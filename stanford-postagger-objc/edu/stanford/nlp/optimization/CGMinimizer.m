//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/optimization/CGMinimizer.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/optimization/CGMinimizer.h"
#include "edu/stanford/nlp/optimization/DiffFunction.h"
#include "edu/stanford/nlp/optimization/Function.h"
#include "edu/stanford/nlp/util/CallbackFunction.h"
#include "java/io/PrintStream.h"
#include "java/lang/Double.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/text/DecimalFormat.h"
#include "java/text/NumberFormat.h"
#include "java/util/Arrays.h"

@class EduStanfordNlpOptimizationCGMinimizer_Triple;

@interface EduStanfordNlpOptimizationCGMinimizer () {
 @public
  id<EduStanfordNlpOptimizationFunction> monitor_;
  EduStanfordNlpUtilCallbackFunction *iterationCallbackFunction_;
  jboolean silent_;
}

+ (NSString *)arrayToStringWithDoubleArray:(IOSDoubleArray *)x
                                   withInt:(jint)num;

+ (jdouble)fabsWithDouble:(jdouble)x;

+ (jdouble)fmaxWithDouble:(jdouble)x
               withDouble:(jdouble)y;

+ (jdouble)signWithDouble:(jdouble)x
               withDouble:(jdouble)y;

+ (EduStanfordNlpOptimizationCGMinimizer_Triple *)mnbrakWithEduStanfordNlpOptimizationCGMinimizer_Triple:(EduStanfordNlpOptimizationCGMinimizer_Triple *)abc
                                            withEduStanfordNlpOptimizationCGMinimizer_OneDimDiffFunction:(EduStanfordNlpOptimizationCGMinimizer_OneDimDiffFunction *)function;

+ (jdouble)dbrentWithEduStanfordNlpOptimizationCGMinimizer_OneDimDiffFunction:(EduStanfordNlpOptimizationCGMinimizer_OneDimDiffFunction *)function
                                                                   withDouble:(jdouble)ax
                                                                   withDouble:(jdouble)bx
                                                                   withDouble:(jdouble)cx;

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpOptimizationCGMinimizer, monitor_, id<EduStanfordNlpOptimizationFunction>)
J2OBJC_FIELD_SETTER(EduStanfordNlpOptimizationCGMinimizer, iterationCallbackFunction_, EduStanfordNlpUtilCallbackFunction *)

inline JavaTextNumberFormat *EduStanfordNlpOptimizationCGMinimizer_get_nf();
inline JavaTextNumberFormat *EduStanfordNlpOptimizationCGMinimizer_set_nf(JavaTextNumberFormat *value);
static JavaTextNumberFormat *EduStanfordNlpOptimizationCGMinimizer_nf;
J2OBJC_STATIC_FIELD_OBJ(EduStanfordNlpOptimizationCGMinimizer, nf, JavaTextNumberFormat *)

inline jint EduStanfordNlpOptimizationCGMinimizer_get_numToPrint();
#define EduStanfordNlpOptimizationCGMinimizer_numToPrint 5
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpOptimizationCGMinimizer, numToPrint, jint)

inline jboolean EduStanfordNlpOptimizationCGMinimizer_get_simpleGD();
#define EduStanfordNlpOptimizationCGMinimizer_simpleGD false
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpOptimizationCGMinimizer, simpleGD, jboolean)

inline jboolean EduStanfordNlpOptimizationCGMinimizer_get_checkSimpleGDConvergence();
#define EduStanfordNlpOptimizationCGMinimizer_checkSimpleGDConvergence true
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpOptimizationCGMinimizer, checkSimpleGDConvergence, jboolean)

inline jboolean EduStanfordNlpOptimizationCGMinimizer_get_verbose();
#define EduStanfordNlpOptimizationCGMinimizer_verbose false
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpOptimizationCGMinimizer, verbose, jboolean)

inline jint EduStanfordNlpOptimizationCGMinimizer_get_ITMAX();
#define EduStanfordNlpOptimizationCGMinimizer_ITMAX 2000
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpOptimizationCGMinimizer, ITMAX, jint)

inline jdouble EduStanfordNlpOptimizationCGMinimizer_get_EPS();
#define EduStanfordNlpOptimizationCGMinimizer_EPS 1.0E-30
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpOptimizationCGMinimizer, EPS, jdouble)

inline jint EduStanfordNlpOptimizationCGMinimizer_get_resetFrequency();
#define EduStanfordNlpOptimizationCGMinimizer_resetFrequency 10
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpOptimizationCGMinimizer, resetFrequency, jint)

inline jdouble EduStanfordNlpOptimizationCGMinimizer_get_GOLD();
#define EduStanfordNlpOptimizationCGMinimizer_GOLD 1.618034
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpOptimizationCGMinimizer, GOLD, jdouble)

inline jdouble EduStanfordNlpOptimizationCGMinimizer_get_GLIMIT();
#define EduStanfordNlpOptimizationCGMinimizer_GLIMIT 100.0
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpOptimizationCGMinimizer, GLIMIT, jdouble)

inline jdouble EduStanfordNlpOptimizationCGMinimizer_get_TINY();
#define EduStanfordNlpOptimizationCGMinimizer_TINY 1.0E-20
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpOptimizationCGMinimizer, TINY, jdouble)

__attribute__((unused)) static NSString *EduStanfordNlpOptimizationCGMinimizer_arrayToStringWithDoubleArray_withInt_(IOSDoubleArray *x, jint num);

__attribute__((unused)) static jdouble EduStanfordNlpOptimizationCGMinimizer_fabsWithDouble_(jdouble x);

__attribute__((unused)) static jdouble EduStanfordNlpOptimizationCGMinimizer_fmaxWithDouble_withDouble_(jdouble x, jdouble y);

__attribute__((unused)) static jdouble EduStanfordNlpOptimizationCGMinimizer_signWithDouble_withDouble_(jdouble x, jdouble y);

__attribute__((unused)) static EduStanfordNlpOptimizationCGMinimizer_Triple *EduStanfordNlpOptimizationCGMinimizer_mnbrakWithEduStanfordNlpOptimizationCGMinimizer_Triple_withEduStanfordNlpOptimizationCGMinimizer_OneDimDiffFunction_(EduStanfordNlpOptimizationCGMinimizer_Triple *abc, EduStanfordNlpOptimizationCGMinimizer_OneDimDiffFunction *function);

__attribute__((unused)) static jdouble EduStanfordNlpOptimizationCGMinimizer_dbrentWithEduStanfordNlpOptimizationCGMinimizer_OneDimDiffFunction_withDouble_withDouble_withDouble_(EduStanfordNlpOptimizationCGMinimizer_OneDimDiffFunction *function, jdouble ax, jdouble bx, jdouble cx);

@interface EduStanfordNlpOptimizationCGMinimizer_OneDimDiffFunction () {
 @public
  id<EduStanfordNlpOptimizationDiffFunction> function_;
  IOSDoubleArray *initial_;
  IOSDoubleArray *direction_;
  IOSDoubleArray *tempVector_;
}

- (IOSDoubleArray *)vectorOfWithDouble:(jdouble)x;

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpOptimizationCGMinimizer_OneDimDiffFunction, function_, id<EduStanfordNlpOptimizationDiffFunction>)
J2OBJC_FIELD_SETTER(EduStanfordNlpOptimizationCGMinimizer_OneDimDiffFunction, initial_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(EduStanfordNlpOptimizationCGMinimizer_OneDimDiffFunction, direction_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(EduStanfordNlpOptimizationCGMinimizer_OneDimDiffFunction, tempVector_, IOSDoubleArray *)

__attribute__((unused)) static IOSDoubleArray *EduStanfordNlpOptimizationCGMinimizer_OneDimDiffFunction_vectorOfWithDouble_(EduStanfordNlpOptimizationCGMinimizer_OneDimDiffFunction *self, jdouble x);

@interface EduStanfordNlpOptimizationCGMinimizer_Triple : NSObject {
 @public
  jdouble a_;
  jdouble b_;
  jdouble c_;
}

- (instancetype)initWithDouble:(jdouble)a
                    withDouble:(jdouble)b
                    withDouble:(jdouble)c;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpOptimizationCGMinimizer_Triple)

__attribute__((unused)) static void EduStanfordNlpOptimizationCGMinimizer_Triple_initWithDouble_withDouble_withDouble_(EduStanfordNlpOptimizationCGMinimizer_Triple *self, jdouble a, jdouble b, jdouble c);

__attribute__((unused)) static EduStanfordNlpOptimizationCGMinimizer_Triple *new_EduStanfordNlpOptimizationCGMinimizer_Triple_initWithDouble_withDouble_withDouble_(jdouble a, jdouble b, jdouble c) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpOptimizationCGMinimizer_Triple *create_EduStanfordNlpOptimizationCGMinimizer_Triple_initWithDouble_withDouble_withDouble_(jdouble a, jdouble b, jdouble c);

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpOptimizationCGMinimizer_Triple)

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpOptimizationCGMinimizer)

@implementation EduStanfordNlpOptimizationCGMinimizer

+ (IOSDoubleArray *)copyArrayWithDoubleArray:(IOSDoubleArray *)a {
  return EduStanfordNlpOptimizationCGMinimizer_copyArrayWithDoubleArray_(a);
}

+ (NSString *)arrayToStringWithDoubleArray:(IOSDoubleArray *)x
                                   withInt:(jint)num {
  return EduStanfordNlpOptimizationCGMinimizer_arrayToStringWithDoubleArray_withInt_(x, num);
}

+ (jdouble)fabsWithDouble:(jdouble)x {
  return EduStanfordNlpOptimizationCGMinimizer_fabsWithDouble_(x);
}

+ (jdouble)fmaxWithDouble:(jdouble)x
               withDouble:(jdouble)y {
  return EduStanfordNlpOptimizationCGMinimizer_fmaxWithDouble_withDouble_(x, y);
}

+ (jdouble)signWithDouble:(jdouble)x
               withDouble:(jdouble)y {
  return EduStanfordNlpOptimizationCGMinimizer_signWithDouble_withDouble_(x, y);
}

+ (EduStanfordNlpOptimizationCGMinimizer_Triple *)mnbrakWithEduStanfordNlpOptimizationCGMinimizer_Triple:(EduStanfordNlpOptimizationCGMinimizer_Triple *)abc
                                            withEduStanfordNlpOptimizationCGMinimizer_OneDimDiffFunction:(EduStanfordNlpOptimizationCGMinimizer_OneDimDiffFunction *)function {
  return EduStanfordNlpOptimizationCGMinimizer_mnbrakWithEduStanfordNlpOptimizationCGMinimizer_Triple_withEduStanfordNlpOptimizationCGMinimizer_OneDimDiffFunction_(abc, function);
}

+ (jdouble)dbrentWithEduStanfordNlpOptimizationCGMinimizer_OneDimDiffFunction:(EduStanfordNlpOptimizationCGMinimizer_OneDimDiffFunction *)function
                                                                   withDouble:(jdouble)ax
                                                                   withDouble:(jdouble)bx
                                                                   withDouble:(jdouble)cx {
  return EduStanfordNlpOptimizationCGMinimizer_dbrentWithEduStanfordNlpOptimizationCGMinimizer_OneDimDiffFunction_withDouble_withDouble_withDouble_(function, ax, bx, cx);
}

- (IOSDoubleArray *)lineMinimizeWithEduStanfordNlpOptimizationDiffFunction:(id<EduStanfordNlpOptimizationDiffFunction>)function
                                                           withDoubleArray:(IOSDoubleArray *)initial
                                                           withDoubleArray:(IOSDoubleArray *)direction {
  EduStanfordNlpOptimizationCGMinimizer_OneDimDiffFunction *oneDim = new_EduStanfordNlpOptimizationCGMinimizer_OneDimDiffFunction_initWithEduStanfordNlpOptimizationDiffFunction_withDoubleArray_withDoubleArray_(function, initial, direction);
  jdouble guess = 0.01;
  if (!silent_) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printWithNSString:@"["];
  }
  EduStanfordNlpOptimizationCGMinimizer_Triple *bracketing = EduStanfordNlpOptimizationCGMinimizer_mnbrakWithEduStanfordNlpOptimizationCGMinimizer_Triple_withEduStanfordNlpOptimizationCGMinimizer_OneDimDiffFunction_(new_EduStanfordNlpOptimizationCGMinimizer_Triple_initWithDouble_withDouble_withDouble_(0, guess, 0), oneDim);
  if (!silent_) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printWithNSString:@"]"];
  }
  jdouble ax = ((EduStanfordNlpOptimizationCGMinimizer_Triple *) nil_chk(bracketing))->a_;
  jdouble xx = bracketing->b_;
  jdouble bx = bracketing->c_;
  if (!(ax <= xx && xx <= bx) && !(bx <= xx && xx <= ax)) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"Bad bracket order!"];
  }
  if (!silent_) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printWithNSString:@"<"];
  }
  jdouble xmin = EduStanfordNlpOptimizationCGMinimizer_dbrentWithEduStanfordNlpOptimizationCGMinimizer_OneDimDiffFunction_withDouble_withDouble_withDouble_(oneDim, ax, xx, bx);
  if (!silent_) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printWithNSString:@">"];
  }
  return EduStanfordNlpOptimizationCGMinimizer_OneDimDiffFunction_vectorOfWithDouble_(oneDim, xmin);
}

- (IOSDoubleArray *)minimizeWithEduStanfordNlpOptimizationFunction:(id<EduStanfordNlpOptimizationDiffFunction>)function
                                                        withDouble:(jdouble)functionTolerance
                                                   withDoubleArray:(IOSDoubleArray *)initial {
  return [self minimizeWithEduStanfordNlpOptimizationFunction:function withDouble:functionTolerance withDoubleArray:initial withInt:EduStanfordNlpOptimizationCGMinimizer_ITMAX];
}

- (IOSDoubleArray *)minimizeWithEduStanfordNlpOptimizationFunction:(id<EduStanfordNlpOptimizationDiffFunction>)dFunction
                                                        withDouble:(jdouble)functionTolerance
                                                   withDoubleArray:(IOSDoubleArray *)initial
                                                           withInt:(jint)maxIterations {
  jint dimension = [((id<EduStanfordNlpOptimizationDiffFunction>) nil_chk(dFunction)) domainDimension];
  jdouble fp = [dFunction valueAtWithDoubleArray:initial];
  IOSDoubleArray *xi = EduStanfordNlpOptimizationCGMinimizer_copyArrayWithDoubleArray_([dFunction derivativeAtWithDoubleArray:initial]);
  IOSDoubleArray *g = [IOSDoubleArray newArrayWithLength:dimension];
  IOSDoubleArray *h = [IOSDoubleArray newArrayWithLength:dimension];
  IOSDoubleArray *p = [IOSDoubleArray newArrayWithLength:dimension];
  for (jint j = 0; j < dimension; j++) {
    *IOSDoubleArray_GetRef(g, j) = -IOSDoubleArray_Get(nil_chk(xi), j);
    *IOSDoubleArray_GetRef(xi, j) = IOSDoubleArray_Get(g, j);
    *IOSDoubleArray_GetRef(h, j) = IOSDoubleArray_Get(g, j);
    *IOSDoubleArray_GetRef(p, j) = IOSDoubleArray_Get(nil_chk(initial), j);
  }
  jboolean simpleGDStep = false;
  for (jint iterations = 1; iterations < maxIterations; iterations++) {
    if (!silent_) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printWithNSString:JreStrcat("$IC", @"Iter ", iterations, ' ')];
    }
    IOSDoubleArray *p2 = [self lineMinimizeWithEduStanfordNlpOptimizationDiffFunction:dFunction withDoubleArray:p withDoubleArray:xi];
    jdouble fp2 = [dFunction valueAtWithDoubleArray:p2];
    if (!silent_) {
      (void) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printfWithNSString:@" %s (delta: %s)\n" withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ [((JavaTextNumberFormat *) nil_chk(EduStanfordNlpOptimizationCGMinimizer_nf)) formatWithDouble:fp2], [((JavaTextNumberFormat *) nil_chk(EduStanfordNlpOptimizationCGMinimizer_nf)) formatWithDouble:fp - fp2] } count:2 type:NSObject_class_()]];
    }
    if (monitor_ != nil) {
      jdouble monitorReturn = [monitor_ valueAtWithDoubleArray:p2];
      if (monitorReturn < functionTolerance) {
        return p2;
      }
    }
    if (2.0 * EduStanfordNlpOptimizationCGMinimizer_fabsWithDouble_(fp2 - fp) <= functionTolerance * (EduStanfordNlpOptimizationCGMinimizer_fabsWithDouble_(fp2) + EduStanfordNlpOptimizationCGMinimizer_fabsWithDouble_(fp) + EduStanfordNlpOptimizationCGMinimizer_EPS)) {
      if (simpleGDStep) {
        return p2;
      }
      simpleGDStep = true;
    }
    else {
      simpleGDStep = false;
    }
    for (jint j = 0; j < dimension; j++) {
      *IOSDoubleArray_GetRef(nil_chk(xi), j) = IOSDoubleArray_Get(nil_chk(p2), j) - IOSDoubleArray_Get(p, j);
      *IOSDoubleArray_GetRef(p, j) = IOSDoubleArray_Get(p2, j);
    }
    fp = fp2;
    xi = EduStanfordNlpOptimizationCGMinimizer_copyArrayWithDoubleArray_([dFunction derivativeAtWithDoubleArray:p]);
    if (iterationCallbackFunction_ != nil) {
      [iterationCallbackFunction_ callbackWithNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ p2, JavaLangInteger_valueOfWithInt_(iterations), JavaLangDouble_valueOfWithDouble_(fp2), xi } count:4 type:NSObject_class_()]];
    }
    if (!simpleGDStep && (iterations % EduStanfordNlpOptimizationCGMinimizer_resetFrequency != 0)) {
      jdouble dgg = 0.0;
      jdouble gg = 0.0;
      for (jint j = 0; j < dimension; j++) {
        JrePlusAssignDoubleD(&gg, IOSDoubleArray_Get(g, j) * IOSDoubleArray_Get(g, j));
        JrePlusAssignDoubleD(&dgg, (IOSDoubleArray_Get(nil_chk(xi), j) + IOSDoubleArray_Get(g, j)) * IOSDoubleArray_Get(xi, j));
      }
      if (gg == 0.0) {
        return p;
      }
      jdouble gam = dgg / gg;
      for (jint j = 0; j < dimension; j++) {
        *IOSDoubleArray_GetRef(g, j) = -IOSDoubleArray_Get(nil_chk(xi), j);
        *IOSDoubleArray_GetRef(h, j) = IOSDoubleArray_Get(g, j) + gam * IOSDoubleArray_Get(h, j);
        *IOSDoubleArray_GetRef(xi, j) = IOSDoubleArray_Get(h, j);
      }
    }
    else {
      jdouble xixi = 0.0;
      for (jint j = 0; j < dimension; j++) {
        JrePlusAssignDoubleD(&xixi, IOSDoubleArray_Get(nil_chk(xi), j) * IOSDoubleArray_Get(xi, j));
      }
      for (jint j = 0; j < dimension; j++) {
        *IOSDoubleArray_GetRef(g, j) = -IOSDoubleArray_Get(nil_chk(xi), j);
        *IOSDoubleArray_GetRef(xi, j) = IOSDoubleArray_Get(g, j);
        *IOSDoubleArray_GetRef(h, j) = IOSDoubleArray_Get(g, j);
      }
      if (xixi == 0.0) {
        return p;
      }
    }
  }
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"Warning: exiting minimize because ITER exceeded!"];
  return p;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpOptimizationCGMinimizer_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithBoolean:(jboolean)silent {
  EduStanfordNlpOptimizationCGMinimizer_initWithBoolean_(self, silent);
  return self;
}

- (instancetype)initWithEduStanfordNlpOptimizationFunction:(id<EduStanfordNlpOptimizationFunction>)monitor {
  EduStanfordNlpOptimizationCGMinimizer_initWithEduStanfordNlpOptimizationFunction_(self, monitor);
  return self;
}

- (void)setIterationCallbackFunctionWithEduStanfordNlpUtilCallbackFunction:(EduStanfordNlpUtilCallbackFunction *)func {
  self->iterationCallbackFunction_ = func;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[D", 0x8, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 2, 3, -1, -1, -1, -1 },
    { NULL, "D", 0xa, 4, 5, -1, -1, -1, -1 },
    { NULL, "D", 0xa, 6, 7, -1, -1, -1, -1 },
    { NULL, "D", 0xa, 8, 7, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpOptimizationCGMinimizer_Triple;", 0xa, 9, 10, -1, -1, -1, -1 },
    { NULL, "D", 0xa, 11, 12, -1, -1, -1, -1 },
    { NULL, "[D", 0x0, 13, 14, -1, -1, -1, -1 },
    { NULL, "[D", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "[D", 0x1, 15, 17, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 18, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 21, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(copyArrayWithDoubleArray:);
  methods[1].selector = @selector(arrayToStringWithDoubleArray:withInt:);
  methods[2].selector = @selector(fabsWithDouble:);
  methods[3].selector = @selector(fmaxWithDouble:withDouble:);
  methods[4].selector = @selector(signWithDouble:withDouble:);
  methods[5].selector = @selector(mnbrakWithEduStanfordNlpOptimizationCGMinimizer_Triple:withEduStanfordNlpOptimizationCGMinimizer_OneDimDiffFunction:);
  methods[6].selector = @selector(dbrentWithEduStanfordNlpOptimizationCGMinimizer_OneDimDiffFunction:withDouble:withDouble:withDouble:);
  methods[7].selector = @selector(lineMinimizeWithEduStanfordNlpOptimizationDiffFunction:withDoubleArray:withDoubleArray:);
  methods[8].selector = @selector(minimizeWithEduStanfordNlpOptimizationFunction:withDouble:withDoubleArray:);
  methods[9].selector = @selector(minimizeWithEduStanfordNlpOptimizationFunction:withDouble:withDoubleArray:withInt:);
  methods[10].selector = @selector(init);
  methods[11].selector = @selector(initWithBoolean:);
  methods[12].selector = @selector(initWithEduStanfordNlpOptimizationFunction:);
  methods[13].selector = @selector(setIterationCallbackFunctionWithEduStanfordNlpUtilCallbackFunction:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "nf", "LJavaTextNumberFormat;", .constantValue.asLong = 0, 0xa, -1, 22, -1, -1 },
    { "monitor_", "LEduStanfordNlpOptimizationFunction;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "iterationCallbackFunction_", "LEduStanfordNlpUtilCallbackFunction;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "numToPrint", "I", .constantValue.asInt = EduStanfordNlpOptimizationCGMinimizer_numToPrint, 0x1a, -1, -1, -1, -1 },
    { "simpleGD", "Z", .constantValue.asBOOL = EduStanfordNlpOptimizationCGMinimizer_simpleGD, 0x1a, -1, -1, -1, -1 },
    { "checkSimpleGDConvergence", "Z", .constantValue.asBOOL = EduStanfordNlpOptimizationCGMinimizer_checkSimpleGDConvergence, 0x1a, -1, -1, -1, -1 },
    { "verbose", "Z", .constantValue.asBOOL = EduStanfordNlpOptimizationCGMinimizer_verbose, 0x1a, -1, -1, -1, -1 },
    { "silent_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ITMAX", "I", .constantValue.asInt = EduStanfordNlpOptimizationCGMinimizer_ITMAX, 0x1a, -1, -1, -1, -1 },
    { "EPS", "D", .constantValue.asDouble = EduStanfordNlpOptimizationCGMinimizer_EPS, 0x1a, -1, -1, -1, -1 },
    { "resetFrequency", "I", .constantValue.asInt = EduStanfordNlpOptimizationCGMinimizer_resetFrequency, 0x1a, -1, -1, -1, -1 },
    { "GOLD", "D", .constantValue.asDouble = EduStanfordNlpOptimizationCGMinimizer_GOLD, 0x1a, -1, -1, -1, -1 },
    { "GLIMIT", "D", .constantValue.asDouble = EduStanfordNlpOptimizationCGMinimizer_GLIMIT, 0x1a, -1, -1, -1, -1 },
    { "TINY", "D", .constantValue.asDouble = EduStanfordNlpOptimizationCGMinimizer_TINY, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "copyArray", "[D", "arrayToString", "[DI", "fabs", "D", "fmax", "DD", "sign", "mnbrak", "LEduStanfordNlpOptimizationCGMinimizer_Triple;LEduStanfordNlpOptimizationCGMinimizer_OneDimDiffFunction;", "dbrent", "LEduStanfordNlpOptimizationCGMinimizer_OneDimDiffFunction;DDD", "lineMinimize", "LEduStanfordNlpOptimizationDiffFunction;[D[D", "minimize", "LEduStanfordNlpOptimizationDiffFunction;D[D", "LEduStanfordNlpOptimizationDiffFunction;D[DI", "Z", "LEduStanfordNlpOptimizationFunction;", "setIterationCallbackFunction", "LEduStanfordNlpUtilCallbackFunction;", &EduStanfordNlpOptimizationCGMinimizer_nf, "LEduStanfordNlpOptimizationCGMinimizer_OneDimDiffFunction;LEduStanfordNlpOptimizationCGMinimizer_Triple;", "Ljava/lang/Object;Ledu/stanford/nlp/optimization/Minimizer<Ledu/stanford/nlp/optimization/DiffFunction;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpOptimizationCGMinimizer = { "CGMinimizer", "edu.stanford.nlp.optimization", ptrTable, methods, fields, 7, 0x1, 14, 14, -1, 23, -1, 24, -1 };
  return &_EduStanfordNlpOptimizationCGMinimizer;
}

+ (void)initialize {
  if (self == [EduStanfordNlpOptimizationCGMinimizer class]) {
    EduStanfordNlpOptimizationCGMinimizer_nf = new_JavaTextDecimalFormat_initWithNSString_(@"0.000E0");
    J2OBJC_SET_INITIALIZED(EduStanfordNlpOptimizationCGMinimizer)
  }
}

@end

IOSDoubleArray *EduStanfordNlpOptimizationCGMinimizer_copyArrayWithDoubleArray_(IOSDoubleArray *a) {
  EduStanfordNlpOptimizationCGMinimizer_initialize();
  return JavaUtilArrays_copyOfWithDoubleArray_withInt_(a, ((IOSDoubleArray *) nil_chk(a))->size_);
}

NSString *EduStanfordNlpOptimizationCGMinimizer_arrayToStringWithDoubleArray_withInt_(IOSDoubleArray *x, jint num) {
  EduStanfordNlpOptimizationCGMinimizer_initialize();
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_initWithNSString_(@"(");
  if (num > ((IOSDoubleArray *) nil_chk(x))->size_) {
    num = x->size_;
  }
  for (jint j = 0; j < num; j++) {
    (void) [sb appendWithDouble:IOSDoubleArray_Get(x, j)];
    if (j != x->size_ - 1) {
      (void) [sb appendWithNSString:@", "];
    }
  }
  if (num < x->size_) {
    (void) [sb appendWithNSString:@"..."];
  }
  (void) [sb appendWithChar:')'];
  return [sb description];
}

jdouble EduStanfordNlpOptimizationCGMinimizer_fabsWithDouble_(jdouble x) {
  EduStanfordNlpOptimizationCGMinimizer_initialize();
  if (x < 0) {
    return -x;
  }
  return x;
}

jdouble EduStanfordNlpOptimizationCGMinimizer_fmaxWithDouble_withDouble_(jdouble x, jdouble y) {
  EduStanfordNlpOptimizationCGMinimizer_initialize();
  if (x < y) {
    return y;
  }
  return x;
}

jdouble EduStanfordNlpOptimizationCGMinimizer_signWithDouble_withDouble_(jdouble x, jdouble y) {
  EduStanfordNlpOptimizationCGMinimizer_initialize();
  if (y >= 0.0) {
    return EduStanfordNlpOptimizationCGMinimizer_fabsWithDouble_(x);
  }
  return -EduStanfordNlpOptimizationCGMinimizer_fabsWithDouble_(x);
}

EduStanfordNlpOptimizationCGMinimizer_Triple *EduStanfordNlpOptimizationCGMinimizer_mnbrakWithEduStanfordNlpOptimizationCGMinimizer_Triple_withEduStanfordNlpOptimizationCGMinimizer_OneDimDiffFunction_(EduStanfordNlpOptimizationCGMinimizer_Triple *abc, EduStanfordNlpOptimizationCGMinimizer_OneDimDiffFunction *function) {
  EduStanfordNlpOptimizationCGMinimizer_initialize();
  jdouble ax = ((EduStanfordNlpOptimizationCGMinimizer_Triple *) nil_chk(abc))->a_;
  jdouble fa = [((EduStanfordNlpOptimizationCGMinimizer_OneDimDiffFunction *) nil_chk(function)) valueAtWithDouble:ax];
  jdouble bx = abc->b_;
  jdouble fb = [function valueAtWithDouble:bx];
  if (fb > fa) {
    jdouble temp = fa;
    fa = fb;
    fb = temp;
    temp = ax;
    ax = bx;
    bx = temp;
  }
  jdouble cx = bx + EduStanfordNlpOptimizationCGMinimizer_GOLD * (bx - ax);
  jdouble fc = [function valueAtWithDouble:cx];
  while (fb > fc) {
    jdouble r = (bx - ax) * (fb - fc);
    jdouble q = (bx - cx) * (fb - fa);
    jdouble u = bx - ((bx - cx) * q - (bx - ax) * r) / (2.0 * EduStanfordNlpOptimizationCGMinimizer_signWithDouble_withDouble_(EduStanfordNlpOptimizationCGMinimizer_fmaxWithDouble_withDouble_(EduStanfordNlpOptimizationCGMinimizer_fabsWithDouble_(q - r), EduStanfordNlpOptimizationCGMinimizer_TINY), q - r));
    jdouble fu;
    jdouble ulim = bx + EduStanfordNlpOptimizationCGMinimizer_GLIMIT * (cx - bx);
    if ((bx - u) * (u - cx) > 0.0) {
      fu = [function valueAtWithDouble:u];
      if (fu < fc) {
        return new_EduStanfordNlpOptimizationCGMinimizer_Triple_initWithDouble_withDouble_withDouble_(bx, u, cx);
      }
      else if (fu > fb) {
        return new_EduStanfordNlpOptimizationCGMinimizer_Triple_initWithDouble_withDouble_withDouble_(ax, bx, u);
      }
      u = cx + EduStanfordNlpOptimizationCGMinimizer_GOLD * (cx - bx);
      fu = [function valueAtWithDouble:u];
    }
    else if ((cx - u) * (u - ulim) > 0.0) {
      fu = [function valueAtWithDouble:u];
      if (fu < fc) {
        bx = cx;
        cx = u;
        u = cx + EduStanfordNlpOptimizationCGMinimizer_GOLD * (cx - bx);
        fb = fc;
        fc = fu;
        fu = [function valueAtWithDouble:u];
      }
    }
    else if ((u - ulim) * (ulim - cx) >= 0.0) {
      u = ulim;
      fu = [function valueAtWithDouble:u];
    }
    else {
      u = cx + EduStanfordNlpOptimizationCGMinimizer_GOLD * (cx - bx);
      fu = [function valueAtWithDouble:u];
    }
    ax = bx;
    bx = cx;
    cx = u;
    fa = fb;
    fb = fc;
    fc = fu;
  }
  return new_EduStanfordNlpOptimizationCGMinimizer_Triple_initWithDouble_withDouble_withDouble_(ax, bx, cx);
}

jdouble EduStanfordNlpOptimizationCGMinimizer_dbrentWithEduStanfordNlpOptimizationCGMinimizer_OneDimDiffFunction_withDouble_withDouble_withDouble_(EduStanfordNlpOptimizationCGMinimizer_OneDimDiffFunction *function, jdouble ax, jdouble bx, jdouble cx) {
  EduStanfordNlpOptimizationCGMinimizer_initialize();
  jboolean dbVerbose = false;
  jint ITMAX = 100;
  jdouble TOL = 1.0e-4;
  jdouble d = 0.0, e = 0.0;
  jdouble a = (ax < cx ? ax : cx);
  jdouble b = (ax > cx ? ax : cx);
  jdouble x = bx;
  jdouble v = bx;
  jdouble w = bx;
  jdouble fx = [((EduStanfordNlpOptimizationCGMinimizer_OneDimDiffFunction *) nil_chk(function)) valueAtWithDouble:x];
  jdouble fv = fx;
  jdouble fw = fx;
  jdouble dx = [function derivativeAtWithDouble:x];
  jdouble dv = dx;
  jdouble dw = dx;
  for (jint iteration = 0; iteration < ITMAX; iteration++) {
    jdouble xm = 0.5 * (a + b);
    jdouble tol1 = TOL * EduStanfordNlpOptimizationCGMinimizer_fabsWithDouble_(x);
    jdouble tol2 = 2.0 * tol1;
    if (EduStanfordNlpOptimizationCGMinimizer_fabsWithDouble_(x - xm) <= (tol2 - 0.5 * (b - a))) {
      return x;
    }
    jdouble u;
    if (EduStanfordNlpOptimizationCGMinimizer_fabsWithDouble_(e) > tol1) {
      jdouble d1 = 2.0 * (b - a);
      jdouble d2 = d1;
      if (dw != dx) {
        d1 = (w - x) * dx / (dx - dw);
      }
      if (dv != dx) {
        d2 = (v - x) * dx / (dx - dv);
      }
      jdouble u1 = x + d1;
      jdouble u2 = x + d2;
      jboolean ok1 = ((a - u1) * (u1 - b) > 0.0 && dx * d1 <= 0.0);
      jboolean ok2 = ((a - u2) * (u2 - b) > 0.0 && dx * d2 <= 0.0);
      jdouble olde = e;
      e = d;
      if (ok1 || ok2) {
        if (ok1 && ok2) {
          d = (EduStanfordNlpOptimizationCGMinimizer_fabsWithDouble_(d1) < EduStanfordNlpOptimizationCGMinimizer_fabsWithDouble_(d2) ? d1 : d2);
        }
        else if (ok1) {
          d = d1;
        }
        else {
          d = d2;
        }
        if (EduStanfordNlpOptimizationCGMinimizer_fabsWithDouble_(d) <= EduStanfordNlpOptimizationCGMinimizer_fabsWithDouble_(0.5 * olde)) {
          u = x + d;
          if (u - a < tol2 || b - u < tol2) {
            d = EduStanfordNlpOptimizationCGMinimizer_signWithDouble_withDouble_(tol1, xm - x);
          }
        }
        else {
          e = (dx >= 0.0 ? a - x : b - x);
          d = 0.5 * e;
        }
      }
      else {
        e = (dx >= 0.0 ? a - x : b - x);
        d = 0.5 * e;
      }
    }
    else {
      e = (dx >= 0.0 ? a - x : b - x);
      d = 0.5 * e;
    }
    jdouble fu;
    if (EduStanfordNlpOptimizationCGMinimizer_fabsWithDouble_(d) >= tol1) {
      u = x + d;
      fu = [function valueAtWithDouble:u];
    }
    else {
      u = x + EduStanfordNlpOptimizationCGMinimizer_signWithDouble_withDouble_(tol1, d);
      fu = [function valueAtWithDouble:u];
      if (fu > fx) {
        return x;
      }
    }
    jdouble du = [function derivativeAtWithDouble:u];
    if (fu <= fx) {
      if (u >= x) {
        a = x;
      }
      else {
        b = x;
      }
      v = w;
      fv = fw;
      dv = dw;
      w = x;
      fw = fx;
      dw = dx;
      x = u;
      fx = fu;
      dx = du;
    }
    else {
      if (u < x) {
        a = u;
      }
      else {
        b = u;
      }
      if (fu <= fw || w == x) {
        v = w;
        fv = fw;
        dv = dw;
        w = u;
        fw = fu;
        dw = du;
      }
      else if (fu < fv || v == x || v == w) {
        v = u;
        fv = fu;
        dv = du;
      }
    }
  }
  if (fx < [function valueAtWithDouble:0.0]) {
    return x;
  }
  return 0.0;
}

void EduStanfordNlpOptimizationCGMinimizer_init(EduStanfordNlpOptimizationCGMinimizer *self) {
  EduStanfordNlpOptimizationCGMinimizer_initWithBoolean_(self, true);
}

EduStanfordNlpOptimizationCGMinimizer *new_EduStanfordNlpOptimizationCGMinimizer_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpOptimizationCGMinimizer, init)
}

EduStanfordNlpOptimizationCGMinimizer *create_EduStanfordNlpOptimizationCGMinimizer_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpOptimizationCGMinimizer, init)
}

void EduStanfordNlpOptimizationCGMinimizer_initWithBoolean_(EduStanfordNlpOptimizationCGMinimizer *self, jboolean silent) {
  NSObject_init(self);
  self->silent_ = silent;
}

EduStanfordNlpOptimizationCGMinimizer *new_EduStanfordNlpOptimizationCGMinimizer_initWithBoolean_(jboolean silent) {
  J2OBJC_NEW_IMPL(EduStanfordNlpOptimizationCGMinimizer, initWithBoolean_, silent)
}

EduStanfordNlpOptimizationCGMinimizer *create_EduStanfordNlpOptimizationCGMinimizer_initWithBoolean_(jboolean silent) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpOptimizationCGMinimizer, initWithBoolean_, silent)
}

void EduStanfordNlpOptimizationCGMinimizer_initWithEduStanfordNlpOptimizationFunction_(EduStanfordNlpOptimizationCGMinimizer *self, id<EduStanfordNlpOptimizationFunction> monitor) {
  EduStanfordNlpOptimizationCGMinimizer_init(self);
  self->monitor_ = monitor;
}

EduStanfordNlpOptimizationCGMinimizer *new_EduStanfordNlpOptimizationCGMinimizer_initWithEduStanfordNlpOptimizationFunction_(id<EduStanfordNlpOptimizationFunction> monitor) {
  J2OBJC_NEW_IMPL(EduStanfordNlpOptimizationCGMinimizer, initWithEduStanfordNlpOptimizationFunction_, monitor)
}

EduStanfordNlpOptimizationCGMinimizer *create_EduStanfordNlpOptimizationCGMinimizer_initWithEduStanfordNlpOptimizationFunction_(id<EduStanfordNlpOptimizationFunction> monitor) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpOptimizationCGMinimizer, initWithEduStanfordNlpOptimizationFunction_, monitor)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpOptimizationCGMinimizer)

@implementation EduStanfordNlpOptimizationCGMinimizer_OneDimDiffFunction

- (IOSDoubleArray *)vectorOfWithDouble:(jdouble)x {
  return EduStanfordNlpOptimizationCGMinimizer_OneDimDiffFunction_vectorOfWithDouble_(self, x);
}

- (jdouble)valueAtWithDouble:(jdouble)x {
  return [((id<EduStanfordNlpOptimizationDiffFunction>) nil_chk(function_)) valueAtWithDoubleArray:EduStanfordNlpOptimizationCGMinimizer_OneDimDiffFunction_vectorOfWithDouble_(self, x)];
}

- (jdouble)derivativeAtWithDouble:(jdouble)x {
  IOSDoubleArray *g = [((id<EduStanfordNlpOptimizationDiffFunction>) nil_chk(function_)) derivativeAtWithDoubleArray:EduStanfordNlpOptimizationCGMinimizer_OneDimDiffFunction_vectorOfWithDouble_(self, x)];
  jdouble d = 0.0;
  for (jint j = 0; j < ((IOSDoubleArray *) nil_chk(g))->size_; j++) {
    JrePlusAssignDoubleD(&d, IOSDoubleArray_Get(g, j) * IOSDoubleArray_Get(nil_chk(direction_), j));
  }
  return d;
}

- (instancetype)initWithEduStanfordNlpOptimizationDiffFunction:(id<EduStanfordNlpOptimizationDiffFunction>)function
                                               withDoubleArray:(IOSDoubleArray *)initial
                                               withDoubleArray:(IOSDoubleArray *)direction {
  EduStanfordNlpOptimizationCGMinimizer_OneDimDiffFunction_initWithEduStanfordNlpOptimizationDiffFunction_withDoubleArray_withDoubleArray_(self, function, initial, direction);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[D", 0x2, 0, 1, -1, -1, -1, -1 },
    { NULL, "D", 0x0, 2, 1, -1, -1, -1, -1 },
    { NULL, "D", 0x0, 3, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(vectorOfWithDouble:);
  methods[1].selector = @selector(valueAtWithDouble:);
  methods[2].selector = @selector(derivativeAtWithDouble:);
  methods[3].selector = @selector(initWithEduStanfordNlpOptimizationDiffFunction:withDoubleArray:withDoubleArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "function_", "LEduStanfordNlpOptimizationDiffFunction;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "initial_", "[D", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "direction_", "[D", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "tempVector_", "[D", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "vectorOf", "D", "valueAt", "derivativeAt", "LEduStanfordNlpOptimizationDiffFunction;[D[D", "LEduStanfordNlpOptimizationCGMinimizer;" };
  static const J2ObjcClassInfo _EduStanfordNlpOptimizationCGMinimizer_OneDimDiffFunction = { "OneDimDiffFunction", "edu.stanford.nlp.optimization", ptrTable, methods, fields, 7, 0x8, 4, 4, 5, -1, -1, -1, -1 };
  return &_EduStanfordNlpOptimizationCGMinimizer_OneDimDiffFunction;
}

@end

IOSDoubleArray *EduStanfordNlpOptimizationCGMinimizer_OneDimDiffFunction_vectorOfWithDouble_(EduStanfordNlpOptimizationCGMinimizer_OneDimDiffFunction *self, jdouble x) {
  for (jint j = 0; j < ((IOSDoubleArray *) nil_chk(self->initial_))->size_; j++) {
    *IOSDoubleArray_GetRef(nil_chk(self->tempVector_), j) = IOSDoubleArray_Get(self->initial_, j) + x * IOSDoubleArray_Get(nil_chk(self->direction_), j);
  }
  return self->tempVector_;
}

void EduStanfordNlpOptimizationCGMinimizer_OneDimDiffFunction_initWithEduStanfordNlpOptimizationDiffFunction_withDoubleArray_withDoubleArray_(EduStanfordNlpOptimizationCGMinimizer_OneDimDiffFunction *self, id<EduStanfordNlpOptimizationDiffFunction> function, IOSDoubleArray *initial, IOSDoubleArray *direction) {
  NSObject_init(self);
  self->function_ = function;
  self->initial_ = EduStanfordNlpOptimizationCGMinimizer_copyArrayWithDoubleArray_(initial);
  self->direction_ = EduStanfordNlpOptimizationCGMinimizer_copyArrayWithDoubleArray_(direction);
  self->tempVector_ = [IOSDoubleArray newArrayWithLength:[((id<EduStanfordNlpOptimizationDiffFunction>) nil_chk(function)) domainDimension]];
}

EduStanfordNlpOptimizationCGMinimizer_OneDimDiffFunction *new_EduStanfordNlpOptimizationCGMinimizer_OneDimDiffFunction_initWithEduStanfordNlpOptimizationDiffFunction_withDoubleArray_withDoubleArray_(id<EduStanfordNlpOptimizationDiffFunction> function, IOSDoubleArray *initial, IOSDoubleArray *direction) {
  J2OBJC_NEW_IMPL(EduStanfordNlpOptimizationCGMinimizer_OneDimDiffFunction, initWithEduStanfordNlpOptimizationDiffFunction_withDoubleArray_withDoubleArray_, function, initial, direction)
}

EduStanfordNlpOptimizationCGMinimizer_OneDimDiffFunction *create_EduStanfordNlpOptimizationCGMinimizer_OneDimDiffFunction_initWithEduStanfordNlpOptimizationDiffFunction_withDoubleArray_withDoubleArray_(id<EduStanfordNlpOptimizationDiffFunction> function, IOSDoubleArray *initial, IOSDoubleArray *direction) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpOptimizationCGMinimizer_OneDimDiffFunction, initWithEduStanfordNlpOptimizationDiffFunction_withDoubleArray_withDoubleArray_, function, initial, direction)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpOptimizationCGMinimizer_OneDimDiffFunction)

@implementation EduStanfordNlpOptimizationCGMinimizer_Triple

- (instancetype)initWithDouble:(jdouble)a
                    withDouble:(jdouble)b
                    withDouble:(jdouble)c {
  EduStanfordNlpOptimizationCGMinimizer_Triple_initWithDouble_withDouble_withDouble_(self, a, b, c);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithDouble:withDouble:withDouble:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "a_", "D", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "b_", "D", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "c_", "D", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "DDD", "LEduStanfordNlpOptimizationCGMinimizer;" };
  static const J2ObjcClassInfo _EduStanfordNlpOptimizationCGMinimizer_Triple = { "Triple", "edu.stanford.nlp.optimization", ptrTable, methods, fields, 7, 0xa, 1, 3, 1, -1, -1, -1, -1 };
  return &_EduStanfordNlpOptimizationCGMinimizer_Triple;
}

@end

void EduStanfordNlpOptimizationCGMinimizer_Triple_initWithDouble_withDouble_withDouble_(EduStanfordNlpOptimizationCGMinimizer_Triple *self, jdouble a, jdouble b, jdouble c) {
  NSObject_init(self);
  self->a_ = a;
  self->b_ = b;
  self->c_ = c;
}

EduStanfordNlpOptimizationCGMinimizer_Triple *new_EduStanfordNlpOptimizationCGMinimizer_Triple_initWithDouble_withDouble_withDouble_(jdouble a, jdouble b, jdouble c) {
  J2OBJC_NEW_IMPL(EduStanfordNlpOptimizationCGMinimizer_Triple, initWithDouble_withDouble_withDouble_, a, b, c)
}

EduStanfordNlpOptimizationCGMinimizer_Triple *create_EduStanfordNlpOptimizationCGMinimizer_Triple_initWithDouble_withDouble_withDouble_(jdouble a, jdouble b, jdouble c) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpOptimizationCGMinimizer_Triple, initWithDouble_withDouble_withDouble_, a, b, c)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpOptimizationCGMinimizer_Triple)
