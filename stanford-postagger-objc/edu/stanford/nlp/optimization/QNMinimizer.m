//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/optimization/QNMinimizer.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/io/RuntimeIOException.h"
#include "edu/stanford/nlp/math/ArrayMath.h"
#include "edu/stanford/nlp/optimization/DiffFloatFunction.h"
#include "edu/stanford/nlp/optimization/DiffFunction.h"
#include "edu/stanford/nlp/optimization/Evaluator.h"
#include "edu/stanford/nlp/optimization/FloatFunction.h"
#include "edu/stanford/nlp/optimization/Function.h"
#include "edu/stanford/nlp/optimization/HasRegularizerParamRange.h"
#include "edu/stanford/nlp/optimization/QNMinimizer.h"
#include "edu/stanford/nlp/util/CallbackFunction.h"
#include "java/io/FileOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/PrintStream.h"
#include "java/io/PrintWriter.h"
#include "java/lang/Double.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/OutOfMemoryError.h"
#include "java/lang/System.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/text/DecimalFormat.h"
#include "java/text/NumberFormat.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"
#include "java/util/Set.h"

@interface EduStanfordNlpOptimizationQNMinimizer () {
 @public
  jint fevals_;
  jint maxFevals_;
  jint mem_;
  jint its_;
  id<EduStanfordNlpOptimizationFunction> monitor_;
  jboolean quiet_;
  jdouble gtol_;
  jboolean success_;
  jboolean bracketed_;
  EduStanfordNlpOptimizationQNMinimizer_QNInfo *presetInfo_;
  jboolean noHistory_;
  jboolean useOWLQN_;
  jdouble lambdaOWL_;
  jboolean useAveImprovement_;
  jboolean useRelativeNorm_;
  jboolean useNumericalZero_;
  jboolean useEvalImprovement_;
  jboolean useMaxItr_;
  jint maxItr_;
  jboolean suppressTestPrompt_;
  jint terminateOnEvalImprovementNumOfEpoch_;
  jint evaluateIters_;
  jint startEvaluateIters_;
  IOSObjectArray *evaluators_;
  EduStanfordNlpUtilCallbackFunction *iterCallbackFunction_;
  EduStanfordNlpOptimizationQNMinimizer_eLineSearch *lsOpt_;
  EduStanfordNlpOptimizationQNMinimizer_eScaling *scaleOpt_;
  EduStanfordNlpOptimizationQNMinimizer_eState *state_;
}

- (void)computeDirWithDoubleArray:(IOSDoubleArray *)dir
                  withDoubleArray:(IOSDoubleArray *)fg
                  withDoubleArray:(IOSDoubleArray *)x
withEduStanfordNlpOptimizationQNMinimizer_QNInfo:(EduStanfordNlpOptimizationQNMinimizer_QNInfo *)qn
withEduStanfordNlpOptimizationFunction:(id<EduStanfordNlpOptimizationFunction>)func;

+ (IOSDoubleArray *)plusAndConstMultWithDoubleArray:(IOSDoubleArray *)a
                                    withDoubleArray:(IOSDoubleArray *)b
                                         withDouble:(jdouble)c
                                    withDoubleArray:(IOSDoubleArray *)d;

- (jdouble)doEvaluationWithDoubleArray:(IOSDoubleArray *)x;

- (void)sayln;

- (void)saylnWithNSString:(NSString *)s;

- (void)sayWithNSString:(NSString *)s;

- (jdouble)evaluateFunctionWithEduStanfordNlpOptimizationDiffFunction:(id<EduStanfordNlpOptimizationDiffFunction>)dfunc
                                                      withDoubleArray:(IOSDoubleArray *)x
                                                      withDoubleArray:(IOSDoubleArray *)grad;

+ (IOSDoubleArray *)projectOWLWithDoubleArray:(IOSDoubleArray *)x
                              withDoubleArray:(IOSDoubleArray *)orthant
       withEduStanfordNlpOptimizationFunction:(id<EduStanfordNlpOptimizationFunction>)func;

+ (jdouble)l1NormOWLWithDoubleArray:(IOSDoubleArray *)x
withEduStanfordNlpOptimizationFunction:(id<EduStanfordNlpOptimizationFunction>)func;

+ (void)constrainSearchDirWithDoubleArray:(IOSDoubleArray *)dir
                          withDoubleArray:(IOSDoubleArray *)fg
                          withDoubleArray:(IOSDoubleArray *)x
   withEduStanfordNlpOptimizationFunction:(id<EduStanfordNlpOptimizationFunction>)func;

- (IOSDoubleArray *)pseudoGradientOWLWithDoubleArray:(IOSDoubleArray *)x
                                     withDoubleArray:(IOSDoubleArray *)grad
              withEduStanfordNlpOptimizationFunction:(id<EduStanfordNlpOptimizationFunction>)func;

- (IOSDoubleArray *)lineSearchBacktrackOWLWithEduStanfordNlpOptimizationFunction:(id<EduStanfordNlpOptimizationFunction>)func
                                                                 withDoubleArray:(IOSDoubleArray *)dir
                                                                 withDoubleArray:(IOSDoubleArray *)x
                                                                 withDoubleArray:(IOSDoubleArray *)newX
                                                                 withDoubleArray:(IOSDoubleArray *)grad
                                                                      withDouble:(jdouble)lastValue;

- (IOSDoubleArray *)lineSearchBacktrackWithEduStanfordNlpOptimizationFunction:(id<EduStanfordNlpOptimizationFunction>)func
                                                              withDoubleArray:(IOSDoubleArray *)dir
                                                              withDoubleArray:(IOSDoubleArray *)x
                                                              withDoubleArray:(IOSDoubleArray *)newX
                                                              withDoubleArray:(IOSDoubleArray *)grad
                                                                   withDouble:(jdouble)lastValue;

- (IOSDoubleArray *)lineSearchMinPackWithEduStanfordNlpOptimizationDiffFunction:(id<EduStanfordNlpOptimizationDiffFunction>)dfunc
                                                                withDoubleArray:(IOSDoubleArray *)dir
                                                                withDoubleArray:(IOSDoubleArray *)x
                                                                withDoubleArray:(IOSDoubleArray *)newX
                                                                withDoubleArray:(IOSDoubleArray *)grad
                                                                     withDouble:(jdouble)f0
                                                                     withDouble:(jdouble)tol;

- (jint)getStepWithDoubleArray:(IOSDoubleArray *)newPt
               withDoubleArray:(IOSDoubleArray *)bestPt
               withDoubleArray:(IOSDoubleArray *)endPt
                    withDouble:(jdouble)stpMin
                    withDouble:(jdouble)stpMax;

+ (void)copy__WithDoubleArray:(IOSDoubleArray *)src
              withDoubleArray:(IOSDoubleArray *)dest OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpOptimizationQNMinimizer, monitor_, id<EduStanfordNlpOptimizationFunction>)
J2OBJC_FIELD_SETTER(EduStanfordNlpOptimizationQNMinimizer, presetInfo_, EduStanfordNlpOptimizationQNMinimizer_QNInfo *)
J2OBJC_FIELD_SETTER(EduStanfordNlpOptimizationQNMinimizer, evaluators_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(EduStanfordNlpOptimizationQNMinimizer, iterCallbackFunction_, EduStanfordNlpUtilCallbackFunction *)
J2OBJC_FIELD_SETTER(EduStanfordNlpOptimizationQNMinimizer, lsOpt_, EduStanfordNlpOptimizationQNMinimizer_eLineSearch *)
J2OBJC_FIELD_SETTER(EduStanfordNlpOptimizationQNMinimizer, scaleOpt_, EduStanfordNlpOptimizationQNMinimizer_eScaling *)
J2OBJC_FIELD_SETTER(EduStanfordNlpOptimizationQNMinimizer, state_, EduStanfordNlpOptimizationQNMinimizer_eState *)

inline JavaTextNumberFormat *EduStanfordNlpOptimizationQNMinimizer_get_nf();
static JavaTextNumberFormat *EduStanfordNlpOptimizationQNMinimizer_nf;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpOptimizationQNMinimizer, nf, JavaTextNumberFormat *)

inline JavaTextNumberFormat *EduStanfordNlpOptimizationQNMinimizer_get_nfsec();
static JavaTextNumberFormat *EduStanfordNlpOptimizationQNMinimizer_nfsec;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpOptimizationQNMinimizer, nfsec, JavaTextNumberFormat *)

inline jdouble EduStanfordNlpOptimizationQNMinimizer_get_ftol();
#define EduStanfordNlpOptimizationQNMinimizer_ftol 1.0E-4
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpOptimizationQNMinimizer, ftol, jdouble)

inline jdouble EduStanfordNlpOptimizationQNMinimizer_get_aMin();
#define EduStanfordNlpOptimizationQNMinimizer_aMin 1.0E-12
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpOptimizationQNMinimizer, aMin, jdouble)

inline jdouble EduStanfordNlpOptimizationQNMinimizer_get_aMax();
#define EduStanfordNlpOptimizationQNMinimizer_aMax 1.0E12
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpOptimizationQNMinimizer, aMax, jdouble)

inline jdouble EduStanfordNlpOptimizationQNMinimizer_get_p66();
#define EduStanfordNlpOptimizationQNMinimizer_p66 0.66
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpOptimizationQNMinimizer, p66, jdouble)

inline jdouble EduStanfordNlpOptimizationQNMinimizer_get_p5();
#define EduStanfordNlpOptimizationQNMinimizer_p5 0.5
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpOptimizationQNMinimizer, p5, jdouble)

inline jint EduStanfordNlpOptimizationQNMinimizer_get_a();
#define EduStanfordNlpOptimizationQNMinimizer_a 0
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpOptimizationQNMinimizer, a, jint)

inline jint EduStanfordNlpOptimizationQNMinimizer_get_f();
#define EduStanfordNlpOptimizationQNMinimizer_f 1
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpOptimizationQNMinimizer, f, jint)

inline jint EduStanfordNlpOptimizationQNMinimizer_get_g();
#define EduStanfordNlpOptimizationQNMinimizer_g 2
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpOptimizationQNMinimizer, g, jint)

__attribute__((unused)) static void EduStanfordNlpOptimizationQNMinimizer_setRobustOptions(EduStanfordNlpOptimizationQNMinimizer *self);

__attribute__((unused)) static void EduStanfordNlpOptimizationQNMinimizer_computeDirWithDoubleArray_withDoubleArray_withDoubleArray_withEduStanfordNlpOptimizationQNMinimizer_QNInfo_withEduStanfordNlpOptimizationFunction_(EduStanfordNlpOptimizationQNMinimizer *self, IOSDoubleArray *dir, IOSDoubleArray *fg, IOSDoubleArray *x, EduStanfordNlpOptimizationQNMinimizer_QNInfo *qn, id<EduStanfordNlpOptimizationFunction> func);

__attribute__((unused)) static IOSDoubleArray *EduStanfordNlpOptimizationQNMinimizer_plusAndConstMultWithDoubleArray_withDoubleArray_withDouble_withDoubleArray_(IOSDoubleArray *a, IOSDoubleArray *b, jdouble c, IOSDoubleArray *d);

__attribute__((unused)) static jdouble EduStanfordNlpOptimizationQNMinimizer_doEvaluationWithDoubleArray_(EduStanfordNlpOptimizationQNMinimizer *self, IOSDoubleArray *x);

__attribute__((unused)) static void EduStanfordNlpOptimizationQNMinimizer_sayln(EduStanfordNlpOptimizationQNMinimizer *self);

__attribute__((unused)) static void EduStanfordNlpOptimizationQNMinimizer_saylnWithNSString_(EduStanfordNlpOptimizationQNMinimizer *self, NSString *s);

__attribute__((unused)) static void EduStanfordNlpOptimizationQNMinimizer_sayWithNSString_(EduStanfordNlpOptimizationQNMinimizer *self, NSString *s);

__attribute__((unused)) static jdouble EduStanfordNlpOptimizationQNMinimizer_evaluateFunctionWithEduStanfordNlpOptimizationDiffFunction_withDoubleArray_withDoubleArray_(EduStanfordNlpOptimizationQNMinimizer *self, id<EduStanfordNlpOptimizationDiffFunction> dfunc, IOSDoubleArray *x, IOSDoubleArray *grad);

__attribute__((unused)) static IOSDoubleArray *EduStanfordNlpOptimizationQNMinimizer_projectOWLWithDoubleArray_withDoubleArray_withEduStanfordNlpOptimizationFunction_(IOSDoubleArray *x, IOSDoubleArray *orthant, id<EduStanfordNlpOptimizationFunction> func);

__attribute__((unused)) static jdouble EduStanfordNlpOptimizationQNMinimizer_l1NormOWLWithDoubleArray_withEduStanfordNlpOptimizationFunction_(IOSDoubleArray *x, id<EduStanfordNlpOptimizationFunction> func);

__attribute__((unused)) static void EduStanfordNlpOptimizationQNMinimizer_constrainSearchDirWithDoubleArray_withDoubleArray_withDoubleArray_withEduStanfordNlpOptimizationFunction_(IOSDoubleArray *dir, IOSDoubleArray *fg, IOSDoubleArray *x, id<EduStanfordNlpOptimizationFunction> func);

__attribute__((unused)) static IOSDoubleArray *EduStanfordNlpOptimizationQNMinimizer_pseudoGradientOWLWithDoubleArray_withDoubleArray_withEduStanfordNlpOptimizationFunction_(EduStanfordNlpOptimizationQNMinimizer *self, IOSDoubleArray *x, IOSDoubleArray *grad, id<EduStanfordNlpOptimizationFunction> func);

__attribute__((unused)) static IOSDoubleArray *EduStanfordNlpOptimizationQNMinimizer_lineSearchBacktrackOWLWithEduStanfordNlpOptimizationFunction_withDoubleArray_withDoubleArray_withDoubleArray_withDoubleArray_withDouble_(EduStanfordNlpOptimizationQNMinimizer *self, id<EduStanfordNlpOptimizationFunction> func, IOSDoubleArray *dir, IOSDoubleArray *x, IOSDoubleArray *newX, IOSDoubleArray *grad, jdouble lastValue);

__attribute__((unused)) static IOSDoubleArray *EduStanfordNlpOptimizationQNMinimizer_lineSearchBacktrackWithEduStanfordNlpOptimizationFunction_withDoubleArray_withDoubleArray_withDoubleArray_withDoubleArray_withDouble_(EduStanfordNlpOptimizationQNMinimizer *self, id<EduStanfordNlpOptimizationFunction> func, IOSDoubleArray *dir, IOSDoubleArray *x, IOSDoubleArray *newX, IOSDoubleArray *grad, jdouble lastValue);

__attribute__((unused)) static IOSDoubleArray *EduStanfordNlpOptimizationQNMinimizer_lineSearchMinPackWithEduStanfordNlpOptimizationDiffFunction_withDoubleArray_withDoubleArray_withDoubleArray_withDoubleArray_withDouble_withDouble_(EduStanfordNlpOptimizationQNMinimizer *self, id<EduStanfordNlpOptimizationDiffFunction> dfunc, IOSDoubleArray *dir, IOSDoubleArray *x, IOSDoubleArray *newX, IOSDoubleArray *grad, jdouble f0, jdouble tol);

__attribute__((unused)) static jint EduStanfordNlpOptimizationQNMinimizer_getStepWithDoubleArray_withDoubleArray_withDoubleArray_withDouble_withDouble_(EduStanfordNlpOptimizationQNMinimizer *self, IOSDoubleArray *newPt, IOSDoubleArray *bestPt, IOSDoubleArray *endPt, jdouble stpMin, jdouble stpMax);

__attribute__((unused)) static void EduStanfordNlpOptimizationQNMinimizer_copy__WithDoubleArray_withDoubleArray_(IOSDoubleArray *src, IOSDoubleArray *dest);

__attribute__((unused)) static void EduStanfordNlpOptimizationQNMinimizer_eState_initWithNSString_withInt_(EduStanfordNlpOptimizationQNMinimizer_eState *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static EduStanfordNlpOptimizationQNMinimizer_eState *new_EduStanfordNlpOptimizationQNMinimizer_eState_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

__attribute__((unused)) static void EduStanfordNlpOptimizationQNMinimizer_eLineSearch_initWithNSString_withInt_(EduStanfordNlpOptimizationQNMinimizer_eLineSearch *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static EduStanfordNlpOptimizationQNMinimizer_eLineSearch *new_EduStanfordNlpOptimizationQNMinimizer_eLineSearch_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

__attribute__((unused)) static void EduStanfordNlpOptimizationQNMinimizer_eScaling_initWithNSString_withInt_(EduStanfordNlpOptimizationQNMinimizer_eScaling *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static EduStanfordNlpOptimizationQNMinimizer_eScaling *new_EduStanfordNlpOptimizationQNMinimizer_eScaling_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

inline jlong EduStanfordNlpOptimizationQNMinimizer_SurpriseConvergence_get_serialVersionUID();
#define EduStanfordNlpOptimizationQNMinimizer_SurpriseConvergence_serialVersionUID 4290178321643529559LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpOptimizationQNMinimizer_SurpriseConvergence, serialVersionUID, jlong)

@interface EduStanfordNlpOptimizationQNMinimizer_MaxEvaluationsExceeded : NSException

- (instancetype)initWithNSString:(NSString *)s;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpOptimizationQNMinimizer_MaxEvaluationsExceeded)

inline jlong EduStanfordNlpOptimizationQNMinimizer_MaxEvaluationsExceeded_get_serialVersionUID();
#define EduStanfordNlpOptimizationQNMinimizer_MaxEvaluationsExceeded_serialVersionUID 8044806163343218660LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpOptimizationQNMinimizer_MaxEvaluationsExceeded, serialVersionUID, jlong)

__attribute__((unused)) static void EduStanfordNlpOptimizationQNMinimizer_MaxEvaluationsExceeded_initWithNSString_(EduStanfordNlpOptimizationQNMinimizer_MaxEvaluationsExceeded *self, NSString *s);

__attribute__((unused)) static EduStanfordNlpOptimizationQNMinimizer_MaxEvaluationsExceeded *new_EduStanfordNlpOptimizationQNMinimizer_MaxEvaluationsExceeded_initWithNSString_(NSString *s) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpOptimizationQNMinimizer_MaxEvaluationsExceeded *create_EduStanfordNlpOptimizationQNMinimizer_MaxEvaluationsExceeded_initWithNSString_(NSString *s);

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpOptimizationQNMinimizer_MaxEvaluationsExceeded)

@interface EduStanfordNlpOptimizationQNMinimizer_Record () {
 @public
  EduStanfordNlpOptimizationQNMinimizer *this$0_;
  id<JavaUtilList> evals_;
  id<JavaUtilList> values_;
  id<JavaUtilList> funcEvals_;
  id<JavaUtilList> time_;
  jdouble gNormInit_;
  jdouble relativeTOL_;
  jdouble TOL_;
  jdouble EPS_;
  jlong startTime_;
  jdouble gNormLast_;
  IOSDoubleArray *xLast_;
  jint maxSize_;
  id<EduStanfordNlpOptimizationFunction> mon_;
  jboolean quiet_;
  jboolean memoryConscious_;
  JavaIoPrintWriter *outputFile_;
  IOSDoubleArray *xBest_;
}

- (void)writeToFileWithDouble:(jdouble)fevals
                   withDouble:(jdouble)val
                   withDouble:(jdouble)gNorm
                   withDouble:(jdouble)time;

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpOptimizationQNMinimizer_Record, this$0_, EduStanfordNlpOptimizationQNMinimizer *)
J2OBJC_FIELD_SETTER(EduStanfordNlpOptimizationQNMinimizer_Record, evals_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(EduStanfordNlpOptimizationQNMinimizer_Record, values_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(EduStanfordNlpOptimizationQNMinimizer_Record, funcEvals_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(EduStanfordNlpOptimizationQNMinimizer_Record, time_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(EduStanfordNlpOptimizationQNMinimizer_Record, xLast_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(EduStanfordNlpOptimizationQNMinimizer_Record, mon_, id<EduStanfordNlpOptimizationFunction>)
J2OBJC_FIELD_SETTER(EduStanfordNlpOptimizationQNMinimizer_Record, outputFile_, JavaIoPrintWriter *)
J2OBJC_FIELD_SETTER(EduStanfordNlpOptimizationQNMinimizer_Record, xBest_, IOSDoubleArray *)

__attribute__((unused)) static void EduStanfordNlpOptimizationQNMinimizer_Record_writeToFileWithDouble_withDouble_withDouble_withDouble_(EduStanfordNlpOptimizationQNMinimizer_Record *self, jdouble fevals, jdouble val, jdouble gNorm, jdouble time);

@interface EduStanfordNlpOptimizationQNMinimizer_QNInfo () {
 @public
  EduStanfordNlpOptimizationQNMinimizer *this$0_;
  id<JavaUtilList> s_;
  id<JavaUtilList> y_;
  id<JavaUtilList> rho_;
  jdouble gamma_;
  jint mem_;
  jint maxMem_;
}

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpOptimizationQNMinimizer_QNInfo, this$0_, EduStanfordNlpOptimizationQNMinimizer *)
J2OBJC_FIELD_SETTER(EduStanfordNlpOptimizationQNMinimizer_QNInfo, s_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(EduStanfordNlpOptimizationQNMinimizer_QNInfo, y_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(EduStanfordNlpOptimizationQNMinimizer_QNInfo, rho_, id<JavaUtilList>)

@interface EduStanfordNlpOptimizationQNMinimizer_QNInfo_NegativeCurvature : NSException

- (instancetype)initWithEduStanfordNlpOptimizationQNMinimizer_QNInfo:(EduStanfordNlpOptimizationQNMinimizer_QNInfo *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpOptimizationQNMinimizer_QNInfo_NegativeCurvature)

inline jlong EduStanfordNlpOptimizationQNMinimizer_QNInfo_NegativeCurvature_get_serialVersionUID();
#define EduStanfordNlpOptimizationQNMinimizer_QNInfo_NegativeCurvature_serialVersionUID 4676562552506850519LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpOptimizationQNMinimizer_QNInfo_NegativeCurvature, serialVersionUID, jlong)

__attribute__((unused)) static void EduStanfordNlpOptimizationQNMinimizer_QNInfo_NegativeCurvature_initWithEduStanfordNlpOptimizationQNMinimizer_QNInfo_(EduStanfordNlpOptimizationQNMinimizer_QNInfo_NegativeCurvature *self, EduStanfordNlpOptimizationQNMinimizer_QNInfo *outer$);

__attribute__((unused)) static EduStanfordNlpOptimizationQNMinimizer_QNInfo_NegativeCurvature *new_EduStanfordNlpOptimizationQNMinimizer_QNInfo_NegativeCurvature_initWithEduStanfordNlpOptimizationQNMinimizer_QNInfo_(EduStanfordNlpOptimizationQNMinimizer_QNInfo *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpOptimizationQNMinimizer_QNInfo_NegativeCurvature *create_EduStanfordNlpOptimizationQNMinimizer_QNInfo_NegativeCurvature_initWithEduStanfordNlpOptimizationQNMinimizer_QNInfo_(EduStanfordNlpOptimizationQNMinimizer_QNInfo *outer$);

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpOptimizationQNMinimizer_QNInfo_NegativeCurvature)

@interface EduStanfordNlpOptimizationQNMinimizer_QNInfo_ZeroGradient : NSException

- (instancetype)initWithEduStanfordNlpOptimizationQNMinimizer_QNInfo:(EduStanfordNlpOptimizationQNMinimizer_QNInfo *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpOptimizationQNMinimizer_QNInfo_ZeroGradient)

inline jlong EduStanfordNlpOptimizationQNMinimizer_QNInfo_ZeroGradient_get_serialVersionUID();
#define EduStanfordNlpOptimizationQNMinimizer_QNInfo_ZeroGradient_serialVersionUID -4001834044987928521LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpOptimizationQNMinimizer_QNInfo_ZeroGradient, serialVersionUID, jlong)

__attribute__((unused)) static void EduStanfordNlpOptimizationQNMinimizer_QNInfo_ZeroGradient_initWithEduStanfordNlpOptimizationQNMinimizer_QNInfo_(EduStanfordNlpOptimizationQNMinimizer_QNInfo_ZeroGradient *self, EduStanfordNlpOptimizationQNMinimizer_QNInfo *outer$);

__attribute__((unused)) static EduStanfordNlpOptimizationQNMinimizer_QNInfo_ZeroGradient *new_EduStanfordNlpOptimizationQNMinimizer_QNInfo_ZeroGradient_initWithEduStanfordNlpOptimizationQNMinimizer_QNInfo_(EduStanfordNlpOptimizationQNMinimizer_QNInfo *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpOptimizationQNMinimizer_QNInfo_ZeroGradient *create_EduStanfordNlpOptimizationQNMinimizer_QNInfo_ZeroGradient_initWithEduStanfordNlpOptimizationQNMinimizer_QNInfo_(EduStanfordNlpOptimizationQNMinimizer_QNInfo *outer$);

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpOptimizationQNMinimizer_QNInfo_ZeroGradient)

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpOptimizationQNMinimizer)

@implementation EduStanfordNlpOptimizationQNMinimizer

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpOptimizationQNMinimizer_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithInt:(jint)m {
  EduStanfordNlpOptimizationQNMinimizer_initWithInt_(self, m);
  return self;
}

- (instancetype)initWithInt:(jint)m
                withBoolean:(jboolean)useRobustOptions {
  EduStanfordNlpOptimizationQNMinimizer_initWithInt_withBoolean_(self, m, useRobustOptions);
  return self;
}

- (instancetype)initWithEduStanfordNlpOptimizationFunction:(id<EduStanfordNlpOptimizationFunction>)monitor {
  EduStanfordNlpOptimizationQNMinimizer_initWithEduStanfordNlpOptimizationFunction_(self, monitor);
  return self;
}

- (instancetype)initWithEduStanfordNlpOptimizationFunction:(id<EduStanfordNlpOptimizationFunction>)monitor
                                                   withInt:(jint)m {
  EduStanfordNlpOptimizationQNMinimizer_initWithEduStanfordNlpOptimizationFunction_withInt_(self, monitor, m);
  return self;
}

- (instancetype)initWithEduStanfordNlpOptimizationFunction:(id<EduStanfordNlpOptimizationFunction>)monitor
                                                   withInt:(jint)m
                                               withBoolean:(jboolean)useRobustOptions {
  EduStanfordNlpOptimizationQNMinimizer_initWithEduStanfordNlpOptimizationFunction_withInt_withBoolean_(self, monitor, m, useRobustOptions);
  return self;
}

- (instancetype)initWithEduStanfordNlpOptimizationFloatFunction:(id<EduStanfordNlpOptimizationFloatFunction>)monitor {
  EduStanfordNlpOptimizationQNMinimizer_initWithEduStanfordNlpOptimizationFloatFunction_(self, monitor);
  return self;
}

- (void)setOldOptions {
  useAveImprovement_ = true;
  useRelativeNorm_ = false;
  useNumericalZero_ = false;
  lsOpt_ = JreLoadEnum(EduStanfordNlpOptimizationQNMinimizer_eLineSearch, BACKTRACK);
  scaleOpt_ = JreLoadEnum(EduStanfordNlpOptimizationQNMinimizer_eScaling, SCALAR);
}

- (void)setRobustOptions {
  EduStanfordNlpOptimizationQNMinimizer_setRobustOptions(self);
}

- (void)setEvaluatorsWithInt:(jint)iters
withEduStanfordNlpOptimizationEvaluatorArray:(IOSObjectArray *)evaluators {
  self->evaluateIters_ = iters;
  self->evaluators_ = evaluators;
}

- (void)setEvaluatorsWithInt:(jint)iters
                     withInt:(jint)startEvaluateIters
withEduStanfordNlpOptimizationEvaluatorArray:(IOSObjectArray *)evaluators {
  self->evaluateIters_ = iters;
  self->startEvaluateIters_ = startEvaluateIters;
  self->evaluators_ = evaluators;
}

- (void)setIterationCallbackFunctionWithEduStanfordNlpUtilCallbackFunction:(EduStanfordNlpUtilCallbackFunction *)func {
  iterCallbackFunction_ = func;
}

- (void)terminateOnRelativeNormWithBoolean:(jboolean)toTerminate {
  useRelativeNorm_ = toTerminate;
}

- (void)terminateOnNumericalZeroWithBoolean:(jboolean)toTerminate {
  useNumericalZero_ = toTerminate;
}

- (void)terminateOnAverageImprovementWithBoolean:(jboolean)toTerminate {
  useAveImprovement_ = toTerminate;
}

- (void)terminateOnEvalImprovementWithBoolean:(jboolean)toTerminate {
  useEvalImprovement_ = toTerminate;
}

- (void)terminateOnMaxItrWithInt:(jint)maxItr {
  if (maxItr > 0) {
    useMaxItr_ = true;
    self->maxItr_ = maxItr;
  }
}

- (void)suppressTestPromptWithBoolean:(jboolean)suppressTestPrompt {
  self->suppressTestPrompt_ = suppressTestPrompt;
}

- (void)setTerminateOnEvalImprovementNumOfEpochWithInt:(jint)terminateOnEvalImprovementNumOfEpoch {
  self->terminateOnEvalImprovementNumOfEpoch_ = terminateOnEvalImprovementNumOfEpoch;
}

- (void)useMinPackSearch {
  lsOpt_ = JreLoadEnum(EduStanfordNlpOptimizationQNMinimizer_eLineSearch, MINPACK);
}

- (void)useBacktracking {
  lsOpt_ = JreLoadEnum(EduStanfordNlpOptimizationQNMinimizer_eLineSearch, BACKTRACK);
}

- (void)useDiagonalScaling {
  scaleOpt_ = JreLoadEnum(EduStanfordNlpOptimizationQNMinimizer_eScaling, DIAGONAL);
}

- (void)useScalarScaling {
  scaleOpt_ = JreLoadEnum(EduStanfordNlpOptimizationQNMinimizer_eScaling, SCALAR);
}

- (jboolean)wasSuccessful {
  return success_;
}

- (void)shutUp {
  self->quiet_ = true;
}

- (void)setMWithInt:(jint)m {
  mem_ = m;
}

- (void)setHistoryWithJavaUtilList:(id<JavaUtilList>)s
                  withJavaUtilList:(id<JavaUtilList>)y {
  presetInfo_ = new_EduStanfordNlpOptimizationQNMinimizer_QNInfo_initWithEduStanfordNlpOptimizationQNMinimizer_withJavaUtilList_withJavaUtilList_(self, s, y);
}

- (void)computeDirWithDoubleArray:(IOSDoubleArray *)dir
                  withDoubleArray:(IOSDoubleArray *)fg
                  withDoubleArray:(IOSDoubleArray *)x
withEduStanfordNlpOptimizationQNMinimizer_QNInfo:(EduStanfordNlpOptimizationQNMinimizer_QNInfo *)qn
withEduStanfordNlpOptimizationFunction:(id<EduStanfordNlpOptimizationFunction>)func {
  EduStanfordNlpOptimizationQNMinimizer_computeDirWithDoubleArray_withDoubleArray_withDoubleArray_withEduStanfordNlpOptimizationQNMinimizer_QNInfo_withEduStanfordNlpOptimizationFunction_(self, dir, fg, x, qn, func);
}

+ (IOSDoubleArray *)plusAndConstMultWithDoubleArray:(IOSDoubleArray *)a
                                    withDoubleArray:(IOSDoubleArray *)b
                                         withDouble:(jdouble)c
                                    withDoubleArray:(IOSDoubleArray *)d {
  return EduStanfordNlpOptimizationQNMinimizer_plusAndConstMultWithDoubleArray_withDoubleArray_withDouble_withDoubleArray_(a, b, c, d);
}

- (jdouble)doEvaluationWithDoubleArray:(IOSDoubleArray *)x {
  return EduStanfordNlpOptimizationQNMinimizer_doEvaluationWithDoubleArray_(self, x);
}

- (IOSFloatArray *)minimizeWithEduStanfordNlpOptimizationDiffFloatFunction:(id<EduStanfordNlpOptimizationDiffFloatFunction>)function
                                                                 withFloat:(jfloat)functionTolerance
                                                            withFloatArray:(IOSFloatArray *)initial {
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"Float not yet supported for QN");
}

- (IOSDoubleArray *)minimizeWithEduStanfordNlpOptimizationFunction:(id<EduStanfordNlpOptimizationDiffFunction>)function
                                                        withDouble:(jdouble)functionTolerance
                                                   withDoubleArray:(IOSDoubleArray *)initial {
  return [self minimizeWithEduStanfordNlpOptimizationFunction:function withDouble:functionTolerance withDoubleArray:initial withInt:-1];
}

- (IOSDoubleArray *)minimizeWithEduStanfordNlpOptimizationFunction:(id<EduStanfordNlpOptimizationDiffFunction>)dFunction
                                                        withDouble:(jdouble)functionTolerance
                                                   withDoubleArray:(IOSDoubleArray *)initial
                                                           withInt:(jint)maxFunctionEvaluations {
  return [self minimizeWithEduStanfordNlpOptimizationDiffFunction:dFunction withDouble:functionTolerance withDoubleArray:initial withInt:maxFunctionEvaluations withEduStanfordNlpOptimizationQNMinimizer_QNInfo:nil];
}

- (IOSDoubleArray *)minimizeWithEduStanfordNlpOptimizationDiffFunction:(id<EduStanfordNlpOptimizationDiffFunction>)dFunction
                                                            withDouble:(jdouble)functionTolerance
                                                       withDoubleArray:(IOSDoubleArray *)initial
                                                               withInt:(jint)maxFunctionEvaluations
                      withEduStanfordNlpOptimizationQNMinimizer_QNInfo:(EduStanfordNlpOptimizationQNMinimizer_QNInfo *)qn {
  EduStanfordNlpOptimizationQNMinimizer_sayWithNSString_(self, JreStrcat("$I$", @"QNMinimizer called on double function of ", [((id<EduStanfordNlpOptimizationDiffFunction>) nil_chk(dFunction)) domainDimension], @" variables,"));
  if (mem_ > 0) {
    EduStanfordNlpOptimizationQNMinimizer_saylnWithNSString_(self, JreStrcat("$IC", @" using M = ", mem_, '.'));
  }
  else {
    EduStanfordNlpOptimizationQNMinimizer_saylnWithNSString_(self, @" using dynamic setting of M.");
  }
  if (qn == nil && presetInfo_ == nil) {
    qn = new_EduStanfordNlpOptimizationQNMinimizer_QNInfo_initWithEduStanfordNlpOptimizationQNMinimizer_withInt_(self, mem_);
    noHistory_ = true;
  }
  else if (presetInfo_ != nil) {
    qn = presetInfo_;
    noHistory_ = false;
  }
  else if (qn != nil) {
    noHistory_ = false;
  }
  IOSDoubleArray *x, *newX, *rawGrad, *grad, *newGrad, *dir;
  jdouble value;
  its_ = 0;
  fevals_ = 0;
  success_ = false;
  ((EduStanfordNlpOptimizationQNMinimizer_QNInfo *) nil_chk(qn))->scaleOpt_ = scaleOpt_;
  x = initial;
  rawGrad = [IOSDoubleArray newArrayWithLength:((IOSDoubleArray *) nil_chk(x))->size_];
  newGrad = [IOSDoubleArray newArrayWithLength:x->size_];
  newX = [IOSDoubleArray newArrayWithLength:x->size_];
  dir = [IOSDoubleArray newArrayWithLength:x->size_];
  value = EduStanfordNlpOptimizationQNMinimizer_evaluateFunctionWithEduStanfordNlpOptimizationDiffFunction_withDoubleArray_withDoubleArray_(self, dFunction, x, rawGrad);
  if (useOWLQN_) {
    jdouble norm = EduStanfordNlpOptimizationQNMinimizer_l1NormOWLWithDoubleArray_withEduStanfordNlpOptimizationFunction_(x, dFunction);
    JrePlusAssignDoubleD(&value, norm * lambdaOWL_);
    grad = EduStanfordNlpOptimizationQNMinimizer_pseudoGradientOWLWithDoubleArray_withDoubleArray_withEduStanfordNlpOptimizationFunction_(self, x, rawGrad, dFunction);
  }
  else {
    grad = rawGrad;
  }
  JavaIoPrintWriter *outFile = nil;
  JavaIoPrintWriter *infoFile = nil;
  if (outputToFile_) {
    @try {
      NSString *baseName = JreStrcat("$IC$C$", @"QN_m", mem_, '_', [((EduStanfordNlpOptimizationQNMinimizer_eLineSearch *) nil_chk(lsOpt_)) description], '_', [((EduStanfordNlpOptimizationQNMinimizer_eScaling *) nil_chk(scaleOpt_)) description]);
      outFile = new_JavaIoPrintWriter_initWithJavaIoOutputStream_withBoolean_(new_JavaIoFileOutputStream_initWithNSString_(JreStrcat("$$", baseName, @".output")), true);
      infoFile = new_JavaIoPrintWriter_initWithJavaIoOutputStream_withBoolean_(new_JavaIoFileOutputStream_initWithNSString_(JreStrcat("$$", baseName, @".info")), true);
      [infoFile printlnWithNSString:JreStrcat("I$", [dFunction domainDimension], @"; DomainDimension ")];
      [infoFile printlnWithNSString:JreStrcat("I$", mem_, @"; memory")];
    }
    @catch (JavaIoIOException *e) {
      @throw new_EduStanfordNlpIoRuntimeIOException_initWithNSString_withNSException_(@"Caught IOException outputting QN data to file", e);
    }
  }
  EduStanfordNlpOptimizationQNMinimizer_Record *rec = new_EduStanfordNlpOptimizationQNMinimizer_Record_initWithEduStanfordNlpOptimizationQNMinimizer_withBoolean_withEduStanfordNlpOptimizationFunction_withDouble_withJavaIoPrintWriter_(self, quiet_, monitor_, functionTolerance, outFile);
  [rec startWithDouble:value withDoubleArray:rawGrad withDoubleArray:x];
  maxFevals_ = (maxFunctionEvaluations > 0) ? maxFunctionEvaluations : JavaLangInteger_MAX_VALUE;
  EduStanfordNlpOptimizationQNMinimizer_saylnWithNSString_(self, @"               An explanation of the output:");
  EduStanfordNlpOptimizationQNMinimizer_saylnWithNSString_(self, @"Iter           The number of iterations");
  EduStanfordNlpOptimizationQNMinimizer_saylnWithNSString_(self, @"evals          The number of function evaluations");
  EduStanfordNlpOptimizationQNMinimizer_saylnWithNSString_(self, @"SCALING        <D> Diagonal scaling was used; <I> Scaled Identity");
  EduStanfordNlpOptimizationQNMinimizer_saylnWithNSString_(self, @"LINESEARCH     [## M steplength]  Minpack linesearch");
  EduStanfordNlpOptimizationQNMinimizer_saylnWithNSString_(self, @"                   1-Function value was too high");
  EduStanfordNlpOptimizationQNMinimizer_saylnWithNSString_(self, @"                   2-Value ok, gradient positive, positive curvature");
  EduStanfordNlpOptimizationQNMinimizer_saylnWithNSString_(self, @"                   3-Value ok, gradient negative, positive curvature");
  EduStanfordNlpOptimizationQNMinimizer_saylnWithNSString_(self, @"                   4-Value ok, gradient negative, negative curvature");
  EduStanfordNlpOptimizationQNMinimizer_saylnWithNSString_(self, @"               [.. B]  Backtracking");
  EduStanfordNlpOptimizationQNMinimizer_saylnWithNSString_(self, @"VALUE          The current function value");
  EduStanfordNlpOptimizationQNMinimizer_saylnWithNSString_(self, @"TIME           Total elapsed time");
  EduStanfordNlpOptimizationQNMinimizer_saylnWithNSString_(self, @"|GNORM|        The current norm of the gradient");
  EduStanfordNlpOptimizationQNMinimizer_saylnWithNSString_(self, @"{RELNORM}      The ratio of the current to initial gradient norms");
  EduStanfordNlpOptimizationQNMinimizer_saylnWithNSString_(self, @"AVEIMPROVE     The average improvement / current value");
  EduStanfordNlpOptimizationQNMinimizer_saylnWithNSString_(self, @"EVALSCORE      The last available eval score");
  EduStanfordNlpOptimizationQNMinimizer_sayln(self);
  EduStanfordNlpOptimizationQNMinimizer_saylnWithNSString_(self, @"Iter ## evals ## <SCALING> [LINESEARCH] VALUE TIME |GNORM| {RELNORM} AVEIMPROVE EVALSCORE");
  do {
    @try {
      EduStanfordNlpOptimizationQNMinimizer_sayln(self);
      jboolean doEval = (its_ >= 0 && its_ >= startEvaluateIters_ && evaluateIters_ > 0 && its_ % evaluateIters_ == 0);
      its_ += 1;
      jdouble newValue;
      EduStanfordNlpOptimizationQNMinimizer_sayWithNSString_(self, JreStrcat("$I$IC", @"Iter ", its_, @" evals ", fevals_, ' '));
      EduStanfordNlpOptimizationQNMinimizer_sayWithNSString_(self, @"<");
      EduStanfordNlpOptimizationQNMinimizer_computeDirWithDoubleArray_withDoubleArray_withDoubleArray_withEduStanfordNlpOptimizationQNMinimizer_QNInfo_withEduStanfordNlpOptimizationFunction_(self, dir, grad, x, qn, dFunction);
      EduStanfordNlpOptimizationQNMinimizer_sayWithNSString_(self, @"> ");
      jboolean hasNaNDir = false;
      jboolean hasNaNGrad = false;
      for (jint i = 0; i < dir->size_; i++) {
        if (IOSDoubleArray_Get(dir, i) != IOSDoubleArray_Get(dir, i)) hasNaNDir = true;
        if (IOSDoubleArray_Get(nil_chk(grad), i) != IOSDoubleArray_Get(grad, i)) hasNaNGrad = true;
      }
      if (hasNaNDir && !hasNaNGrad) {
        EduStanfordNlpOptimizationQNMinimizer_sayWithNSString_(self, @"(NaN dir likely due to Hessian approx - resetting) ");
        [qn clear];
        EduStanfordNlpOptimizationQNMinimizer_sayWithNSString_(self, @"<");
        EduStanfordNlpOptimizationQNMinimizer_computeDirWithDoubleArray_withDoubleArray_withDoubleArray_withEduStanfordNlpOptimizationQNMinimizer_QNInfo_withEduStanfordNlpOptimizationFunction_(self, dir, grad, x, qn, dFunction);
        EduStanfordNlpOptimizationQNMinimizer_sayWithNSString_(self, @"> ");
      }
      EduStanfordNlpOptimizationQNMinimizer_sayWithNSString_(self, @"[");
      IOSDoubleArray *newPoint;
      if (useOWLQN_) {
        newPoint = EduStanfordNlpOptimizationQNMinimizer_lineSearchBacktrackOWLWithEduStanfordNlpOptimizationFunction_withDoubleArray_withDoubleArray_withDoubleArray_withDoubleArray_withDouble_(self, dFunction, dir, x, newX, grad, value);
        EduStanfordNlpOptimizationQNMinimizer_sayWithNSString_(self, @"B");
      }
      else {
        switch ([lsOpt_ ordinal]) {
          case EduStanfordNlpOptimizationQNMinimizer_eLineSearch_Enum_BACKTRACK:
          newPoint = EduStanfordNlpOptimizationQNMinimizer_lineSearchBacktrackWithEduStanfordNlpOptimizationFunction_withDoubleArray_withDoubleArray_withDoubleArray_withDoubleArray_withDouble_(self, dFunction, dir, x, newX, grad, value);
          EduStanfordNlpOptimizationQNMinimizer_sayWithNSString_(self, @"B");
          break;
          case EduStanfordNlpOptimizationQNMinimizer_eLineSearch_Enum_MINPACK:
          newPoint = EduStanfordNlpOptimizationQNMinimizer_lineSearchMinPackWithEduStanfordNlpOptimizationDiffFunction_withDoubleArray_withDoubleArray_withDoubleArray_withDoubleArray_withDouble_withDouble_(self, dFunction, dir, x, newX, grad, value, functionTolerance);
          EduStanfordNlpOptimizationQNMinimizer_sayWithNSString_(self, @"M");
          break;
          default:
          @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Invalid line search option for QNMinimizer.");
        }
      }
      newValue = IOSDoubleArray_Get(nil_chk(newPoint), EduStanfordNlpOptimizationQNMinimizer_f);
      EduStanfordNlpOptimizationQNMinimizer_sayWithNSString_(self, @" ");
      EduStanfordNlpOptimizationQNMinimizer_sayWithNSString_(self, [((JavaTextNumberFormat *) nil_chk(EduStanfordNlpOptimizationQNMinimizer_nf)) formatWithDouble:IOSDoubleArray_Get(newPoint, EduStanfordNlpOptimizationQNMinimizer_a)]);
      EduStanfordNlpOptimizationQNMinimizer_sayWithNSString_(self, @"] ");
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([dFunction derivativeAtWithDoubleArray:newX], 0, newGrad, 0, ((IOSDoubleArray *) nil_chk(newGrad))->size_);
      [qn updateWithDoubleArray:newX withDoubleArray:x withDoubleArray:newGrad withDoubleArray:rawGrad withDouble:IOSDoubleArray_Get(newPoint, EduStanfordNlpOptimizationQNMinimizer_a)];
      if (useOWLQN_) {
        JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(newGrad, 0, rawGrad, 0, newGrad->size_);
        newGrad = EduStanfordNlpOptimizationQNMinimizer_pseudoGradientOWLWithDoubleArray_withDoubleArray_withEduStanfordNlpOptimizationFunction_(self, newX, newGrad, dFunction);
      }
      jdouble evalScore = JavaLangDouble_NEGATIVE_INFINITY;
      if (doEval) {
        evalScore = EduStanfordNlpOptimizationQNMinimizer_doEvaluationWithDoubleArray_(self, newX);
      }
      [rec addWithDouble:newValue withDoubleArray:newGrad withDoubleArray:newX withInt:fevals_ withDouble:evalScore];
      if (iterCallbackFunction_ != nil) {
        [iterCallbackFunction_ callbackWithNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ newX, JavaLangInteger_valueOfWithInt_(its_), JavaLangDouble_valueOfWithDouble_(newValue), newGrad } count:4 type:NSObject_class_()]];
      }
      value = newValue;
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(newX, 0, x, 0, x->size_);
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(newGrad, 0, grad, 0, ((IOSDoubleArray *) nil_chk(newGrad))->size_);
      if (quiet_) {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printWithNSString:@"."];
      }
      if (fevals_ > maxFevals_) {
        @throw new_EduStanfordNlpOptimizationQNMinimizer_MaxEvaluationsExceeded_initWithNSString_(@" Exceeded in minimize() loop ");
      }
    }
    @catch (EduStanfordNlpOptimizationQNMinimizer_SurpriseConvergence *s) {
      EduStanfordNlpOptimizationQNMinimizer_sayln(self);
      EduStanfordNlpOptimizationQNMinimizer_saylnWithNSString_(self, @"QNMinimizer aborted due to surprise convergence");
      break;
    }
    @catch (EduStanfordNlpOptimizationQNMinimizer_MaxEvaluationsExceeded *m) {
      EduStanfordNlpOptimizationQNMinimizer_sayln(self);
      EduStanfordNlpOptimizationQNMinimizer_saylnWithNSString_(self, @"QNMinimizer aborted due to maximum number of function evaluations");
      EduStanfordNlpOptimizationQNMinimizer_saylnWithNSString_(self, [((EduStanfordNlpOptimizationQNMinimizer_MaxEvaluationsExceeded *) nil_chk(m)) description]);
      EduStanfordNlpOptimizationQNMinimizer_saylnWithNSString_(self, @"** This is not an acceptable termination of QNMinimizer, consider");
      EduStanfordNlpOptimizationQNMinimizer_saylnWithNSString_(self, @"** increasing the max number of evaluations, or safeguarding your");
      EduStanfordNlpOptimizationQNMinimizer_saylnWithNSString_(self, @"** program by checking the QNMinimizer.wasSuccessful() method.");
      break;
    }
    @catch (JavaLangOutOfMemoryError *oome) {
      EduStanfordNlpOptimizationQNMinimizer_sayln(self);
      if (![((id<JavaUtilList>) nil_chk(qn->s_)) isEmpty]) {
        (void) [((id<JavaUtilList>) nil_chk(qn->s_)) removeWithInt:0];
        (void) [((id<JavaUtilList>) nil_chk(qn->y_)) removeWithInt:0];
        (void) [((id<JavaUtilList>) nil_chk(qn->rho_)) removeWithInt:0];
        qn->mem_ = [((id<JavaUtilList>) nil_chk(qn->s_)) size];
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$I", @"Caught OutOfMemoryError, changing m = ", qn->mem_)];
      }
      else {
        @throw oome;
      }
    }
  }
  while ((state_ = [rec toContinue]) == JreLoadEnum(EduStanfordNlpOptimizationQNMinimizer_eState, CONTINUE));
  if (evaluateIters_ > 0) {
    jdouble evalScore = (useEvalImprovement_ ? EduStanfordNlpOptimizationQNMinimizer_doEvaluationWithDoubleArray_(self, [rec getBest]) : EduStanfordNlpOptimizationQNMinimizer_doEvaluationWithDoubleArray_(self, x));
    EduStanfordNlpOptimizationQNMinimizer_saylnWithNSString_(self, JreStrcat("$D", @"final evalScore is: ", evalScore));
  }
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) println];
  switch ([state_ ordinal]) {
    case EduStanfordNlpOptimizationQNMinimizer_eState_Enum_TERMINATE_GRADNORM:
    [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:@"QNMinimizer terminated due to numerically zero gradient: |g| < EPS  max(1,|x|) "];
    success_ = true;
    break;
    case EduStanfordNlpOptimizationQNMinimizer_eState_Enum_TERMINATE_RELATIVENORM:
    [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:@"QNMinimizer terminated due to sufficient decrease in gradient norms: |g|/|g0| < TOL "];
    success_ = true;
    break;
    case EduStanfordNlpOptimizationQNMinimizer_eState_Enum_TERMINATE_AVERAGEIMPROVE:
    [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:@"QNMinimizer terminated due to average improvement: | newest_val - previous_val | / |newestVal| < TOL "];
    success_ = true;
    break;
    case EduStanfordNlpOptimizationQNMinimizer_eState_Enum_TERMINATE_MAXITR:
    [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:JreStrcat("$I", @"QNMinimizer terminated due to reached max iteration ", maxItr_)];
    success_ = true;
    break;
    case EduStanfordNlpOptimizationQNMinimizer_eState_Enum_TERMINATE_EVALIMPROVE:
    [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:@"QNMinimizer terminated due to no improvement on eval "];
    success_ = true;
    x = [rec getBest];
    break;
    default:
    [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:@"QNMinimizer terminated without converging"];
    success_ = false;
    break;
  }
  jdouble completionTime = [rec howLong];
  EduStanfordNlpOptimizationQNMinimizer_saylnWithNSString_(self, JreStrcat("$$C", @"Total time spent in optimization: ", [((JavaTextNumberFormat *) nil_chk(EduStanfordNlpOptimizationQNMinimizer_nfsec)) formatWithDouble:completionTime], 's'));
  if (outputToFile_) {
    [((JavaIoPrintWriter *) nil_chk(infoFile)) printlnWithNSString:JreStrcat("D$", completionTime, @"; Total Time ")];
    [infoFile printlnWithNSString:JreStrcat("I$", fevals_, @"; Total evaluations")];
    [infoFile close];
    [((JavaIoPrintWriter *) nil_chk(outFile)) close];
  }
  [qn free];
  return x;
}

- (void)sayln {
  EduStanfordNlpOptimizationQNMinimizer_sayln(self);
}

- (void)saylnWithNSString:(NSString *)s {
  EduStanfordNlpOptimizationQNMinimizer_saylnWithNSString_(self, s);
}

- (void)sayWithNSString:(NSString *)s {
  EduStanfordNlpOptimizationQNMinimizer_sayWithNSString_(self, s);
}

- (jdouble)evaluateFunctionWithEduStanfordNlpOptimizationDiffFunction:(id<EduStanfordNlpOptimizationDiffFunction>)dfunc
                                                      withDoubleArray:(IOSDoubleArray *)x
                                                      withDoubleArray:(IOSDoubleArray *)grad {
  return EduStanfordNlpOptimizationQNMinimizer_evaluateFunctionWithEduStanfordNlpOptimizationDiffFunction_withDoubleArray_withDoubleArray_(self, dfunc, x, grad);
}

- (void)useOWLQNWithBoolean:(jboolean)use
                 withDouble:(jdouble)lambda {
  self->useOWLQN_ = use;
  self->lambdaOWL_ = lambda;
}

+ (IOSDoubleArray *)projectOWLWithDoubleArray:(IOSDoubleArray *)x
                              withDoubleArray:(IOSDoubleArray *)orthant
       withEduStanfordNlpOptimizationFunction:(id<EduStanfordNlpOptimizationFunction>)func {
  return EduStanfordNlpOptimizationQNMinimizer_projectOWLWithDoubleArray_withDoubleArray_withEduStanfordNlpOptimizationFunction_(x, orthant, func);
}

+ (jdouble)l1NormOWLWithDoubleArray:(IOSDoubleArray *)x
withEduStanfordNlpOptimizationFunction:(id<EduStanfordNlpOptimizationFunction>)func {
  return EduStanfordNlpOptimizationQNMinimizer_l1NormOWLWithDoubleArray_withEduStanfordNlpOptimizationFunction_(x, func);
}

+ (void)constrainSearchDirWithDoubleArray:(IOSDoubleArray *)dir
                          withDoubleArray:(IOSDoubleArray *)fg
                          withDoubleArray:(IOSDoubleArray *)x
   withEduStanfordNlpOptimizationFunction:(id<EduStanfordNlpOptimizationFunction>)func {
  EduStanfordNlpOptimizationQNMinimizer_constrainSearchDirWithDoubleArray_withDoubleArray_withDoubleArray_withEduStanfordNlpOptimizationFunction_(dir, fg, x, func);
}

- (IOSDoubleArray *)pseudoGradientOWLWithDoubleArray:(IOSDoubleArray *)x
                                     withDoubleArray:(IOSDoubleArray *)grad
              withEduStanfordNlpOptimizationFunction:(id<EduStanfordNlpOptimizationFunction>)func {
  return EduStanfordNlpOptimizationQNMinimizer_pseudoGradientOWLWithDoubleArray_withDoubleArray_withEduStanfordNlpOptimizationFunction_(self, x, grad, func);
}

- (IOSDoubleArray *)lineSearchBacktrackOWLWithEduStanfordNlpOptimizationFunction:(id<EduStanfordNlpOptimizationFunction>)func
                                                                 withDoubleArray:(IOSDoubleArray *)dir
                                                                 withDoubleArray:(IOSDoubleArray *)x
                                                                 withDoubleArray:(IOSDoubleArray *)newX
                                                                 withDoubleArray:(IOSDoubleArray *)grad
                                                                      withDouble:(jdouble)lastValue {
  return EduStanfordNlpOptimizationQNMinimizer_lineSearchBacktrackOWLWithEduStanfordNlpOptimizationFunction_withDoubleArray_withDoubleArray_withDoubleArray_withDoubleArray_withDouble_(self, func, dir, x, newX, grad, lastValue);
}

- (IOSDoubleArray *)lineSearchBacktrackWithEduStanfordNlpOptimizationFunction:(id<EduStanfordNlpOptimizationFunction>)func
                                                              withDoubleArray:(IOSDoubleArray *)dir
                                                              withDoubleArray:(IOSDoubleArray *)x
                                                              withDoubleArray:(IOSDoubleArray *)newX
                                                              withDoubleArray:(IOSDoubleArray *)grad
                                                                   withDouble:(jdouble)lastValue {
  return EduStanfordNlpOptimizationQNMinimizer_lineSearchBacktrackWithEduStanfordNlpOptimizationFunction_withDoubleArray_withDoubleArray_withDoubleArray_withDoubleArray_withDouble_(self, func, dir, x, newX, grad, lastValue);
}

- (IOSDoubleArray *)lineSearchMinPackWithEduStanfordNlpOptimizationDiffFunction:(id<EduStanfordNlpOptimizationDiffFunction>)dfunc
                                                                withDoubleArray:(IOSDoubleArray *)dir
                                                                withDoubleArray:(IOSDoubleArray *)x
                                                                withDoubleArray:(IOSDoubleArray *)newX
                                                                withDoubleArray:(IOSDoubleArray *)grad
                                                                     withDouble:(jdouble)f0
                                                                     withDouble:(jdouble)tol {
  return EduStanfordNlpOptimizationQNMinimizer_lineSearchMinPackWithEduStanfordNlpOptimizationDiffFunction_withDoubleArray_withDoubleArray_withDoubleArray_withDoubleArray_withDouble_withDouble_(self, dfunc, dir, x, newX, grad, f0, tol);
}

- (jint)getStepWithDoubleArray:(IOSDoubleArray *)newPt
               withDoubleArray:(IOSDoubleArray *)bestPt
               withDoubleArray:(IOSDoubleArray *)endPt
                    withDouble:(jdouble)stpMin
                    withDouble:(jdouble)stpMax {
  return EduStanfordNlpOptimizationQNMinimizer_getStepWithDoubleArray_withDoubleArray_withDoubleArray_withDouble_withDouble_(self, newPt, bestPt, endPt, stpMin, stpMax);
}

+ (void)copy__WithDoubleArray:(IOSDoubleArray *)src
              withDoubleArray:(IOSDoubleArray *)dest {
  EduStanfordNlpOptimizationQNMinimizer_copy__WithDoubleArray_withDoubleArray_(src, dest);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 21, -1, 22, -1, -1 },
    { NULL, "V", 0x2, 23, 24, 25, -1, -1, -1 },
    { NULL, "[D", 0xa, 26, 27, -1, -1, -1, -1 },
    { NULL, "D", 0x2, 28, 29, -1, -1, -1, -1 },
    { NULL, "[F", 0x1, 30, 31, -1, -1, -1, -1 },
    { NULL, "[D", 0x1, 30, 32, -1, -1, -1, -1 },
    { NULL, "[D", 0x1, 30, 33, -1, -1, -1, -1 },
    { NULL, "[D", 0x1, 30, 34, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 35, 36, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 37, 36, -1, -1, -1, -1 },
    { NULL, "D", 0x2, 38, 39, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 40, 41, -1, -1, -1, -1 },
    { NULL, "[D", 0xa, 42, 43, -1, -1, -1, -1 },
    { NULL, "D", 0xa, 44, 45, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 46, 47, -1, -1, -1, -1 },
    { NULL, "[D", 0x2, 48, 43, -1, -1, -1, -1 },
    { NULL, "[D", 0x2, 49, 50, 51, -1, -1, -1 },
    { NULL, "[D", 0x2, 52, 50, 51, -1, -1, -1 },
    { NULL, "[D", 0x2, 53, 54, 51, -1, -1, -1 },
    { NULL, "I", 0x2, 55, 56, 51, -1, -1, -1 },
    { NULL, "V", 0xa, 57, 58, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithInt:);
  methods[2].selector = @selector(initWithInt:withBoolean:);
  methods[3].selector = @selector(initWithEduStanfordNlpOptimizationFunction:);
  methods[4].selector = @selector(initWithEduStanfordNlpOptimizationFunction:withInt:);
  methods[5].selector = @selector(initWithEduStanfordNlpOptimizationFunction:withInt:withBoolean:);
  methods[6].selector = @selector(initWithEduStanfordNlpOptimizationFloatFunction:);
  methods[7].selector = @selector(setOldOptions);
  methods[8].selector = @selector(setRobustOptions);
  methods[9].selector = @selector(setEvaluatorsWithInt:withEduStanfordNlpOptimizationEvaluatorArray:);
  methods[10].selector = @selector(setEvaluatorsWithInt:withInt:withEduStanfordNlpOptimizationEvaluatorArray:);
  methods[11].selector = @selector(setIterationCallbackFunctionWithEduStanfordNlpUtilCallbackFunction:);
  methods[12].selector = @selector(terminateOnRelativeNormWithBoolean:);
  methods[13].selector = @selector(terminateOnNumericalZeroWithBoolean:);
  methods[14].selector = @selector(terminateOnAverageImprovementWithBoolean:);
  methods[15].selector = @selector(terminateOnEvalImprovementWithBoolean:);
  methods[16].selector = @selector(terminateOnMaxItrWithInt:);
  methods[17].selector = @selector(suppressTestPromptWithBoolean:);
  methods[18].selector = @selector(setTerminateOnEvalImprovementNumOfEpochWithInt:);
  methods[19].selector = @selector(useMinPackSearch);
  methods[20].selector = @selector(useBacktracking);
  methods[21].selector = @selector(useDiagonalScaling);
  methods[22].selector = @selector(useScalarScaling);
  methods[23].selector = @selector(wasSuccessful);
  methods[24].selector = @selector(shutUp);
  methods[25].selector = @selector(setMWithInt:);
  methods[26].selector = @selector(setHistoryWithJavaUtilList:withJavaUtilList:);
  methods[27].selector = @selector(computeDirWithDoubleArray:withDoubleArray:withDoubleArray:withEduStanfordNlpOptimizationQNMinimizer_QNInfo:withEduStanfordNlpOptimizationFunction:);
  methods[28].selector = @selector(plusAndConstMultWithDoubleArray:withDoubleArray:withDouble:withDoubleArray:);
  methods[29].selector = @selector(doEvaluationWithDoubleArray:);
  methods[30].selector = @selector(minimizeWithEduStanfordNlpOptimizationDiffFloatFunction:withFloat:withFloatArray:);
  methods[31].selector = @selector(minimizeWithEduStanfordNlpOptimizationFunction:withDouble:withDoubleArray:);
  methods[32].selector = @selector(minimizeWithEduStanfordNlpOptimizationFunction:withDouble:withDoubleArray:withInt:);
  methods[33].selector = @selector(minimizeWithEduStanfordNlpOptimizationDiffFunction:withDouble:withDoubleArray:withInt:withEduStanfordNlpOptimizationQNMinimizer_QNInfo:);
  methods[34].selector = @selector(sayln);
  methods[35].selector = @selector(saylnWithNSString:);
  methods[36].selector = @selector(sayWithNSString:);
  methods[37].selector = @selector(evaluateFunctionWithEduStanfordNlpOptimizationDiffFunction:withDoubleArray:withDoubleArray:);
  methods[38].selector = @selector(useOWLQNWithBoolean:withDouble:);
  methods[39].selector = @selector(projectOWLWithDoubleArray:withDoubleArray:withEduStanfordNlpOptimizationFunction:);
  methods[40].selector = @selector(l1NormOWLWithDoubleArray:withEduStanfordNlpOptimizationFunction:);
  methods[41].selector = @selector(constrainSearchDirWithDoubleArray:withDoubleArray:withDoubleArray:withEduStanfordNlpOptimizationFunction:);
  methods[42].selector = @selector(pseudoGradientOWLWithDoubleArray:withDoubleArray:withEduStanfordNlpOptimizationFunction:);
  methods[43].selector = @selector(lineSearchBacktrackOWLWithEduStanfordNlpOptimizationFunction:withDoubleArray:withDoubleArray:withDoubleArray:withDoubleArray:withDouble:);
  methods[44].selector = @selector(lineSearchBacktrackWithEduStanfordNlpOptimizationFunction:withDoubleArray:withDoubleArray:withDoubleArray:withDoubleArray:withDouble:);
  methods[45].selector = @selector(lineSearchMinPackWithEduStanfordNlpOptimizationDiffFunction:withDoubleArray:withDoubleArray:withDoubleArray:withDoubleArray:withDouble:withDouble:);
  methods[46].selector = @selector(getStepWithDoubleArray:withDoubleArray:withDoubleArray:withDouble:withDouble:);
  methods[47].selector = @selector(copy__WithDoubleArray:withDoubleArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "fevals_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "maxFevals_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mem_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "its_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "monitor_", "LEduStanfordNlpOptimizationFunction;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "quiet_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "nf", "LJavaTextNumberFormat;", .constantValue.asLong = 0, 0x1a, -1, 59, -1, -1 },
    { "nfsec", "LJavaTextNumberFormat;", .constantValue.asLong = 0, 0x1a, -1, 60, -1, -1 },
    { "ftol", "D", .constantValue.asDouble = EduStanfordNlpOptimizationQNMinimizer_ftol, 0x1a, -1, -1, -1, -1 },
    { "gtol_", "D", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "aMin", "D", .constantValue.asDouble = EduStanfordNlpOptimizationQNMinimizer_aMin, 0x1a, -1, -1, -1, -1 },
    { "aMax", "D", .constantValue.asDouble = EduStanfordNlpOptimizationQNMinimizer_aMax, 0x1a, -1, -1, -1, -1 },
    { "p66", "D", .constantValue.asDouble = EduStanfordNlpOptimizationQNMinimizer_p66, 0x1a, -1, -1, -1, -1 },
    { "p5", "D", .constantValue.asDouble = EduStanfordNlpOptimizationQNMinimizer_p5, 0x1a, -1, -1, -1, -1 },
    { "a", "I", .constantValue.asInt = EduStanfordNlpOptimizationQNMinimizer_a, 0x1a, -1, -1, -1, -1 },
    { "f", "I", .constantValue.asInt = EduStanfordNlpOptimizationQNMinimizer_f, 0x1a, -1, -1, -1, -1 },
    { "g", "I", .constantValue.asInt = EduStanfordNlpOptimizationQNMinimizer_g, 0x1a, -1, -1, -1, -1 },
    { "outputToFile_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "success_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bracketed_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "presetInfo_", "LEduStanfordNlpOptimizationQNMinimizer_QNInfo;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "noHistory_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "useOWLQN_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "lambdaOWL_", "D", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "useAveImprovement_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "useRelativeNorm_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "useNumericalZero_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "useEvalImprovement_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "useMaxItr_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "maxItr_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "suppressTestPrompt_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "terminateOnEvalImprovementNumOfEpoch_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "evaluateIters_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "startEvaluateIters_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "evaluators_", "[LEduStanfordNlpOptimizationEvaluator;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "iterCallbackFunction_", "LEduStanfordNlpUtilCallbackFunction;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "lsOpt_", "LEduStanfordNlpOptimizationQNMinimizer_eLineSearch;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "scaleOpt_", "LEduStanfordNlpOptimizationQNMinimizer_eScaling;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "state_", "LEduStanfordNlpOptimizationQNMinimizer_eState;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "IZ", "LEduStanfordNlpOptimizationFunction;", "LEduStanfordNlpOptimizationFunction;I", "LEduStanfordNlpOptimizationFunction;IZ", "LEduStanfordNlpOptimizationFloatFunction;", "setEvaluators", "I[LEduStanfordNlpOptimizationEvaluator;", "II[LEduStanfordNlpOptimizationEvaluator;", "setIterationCallbackFunction", "LEduStanfordNlpUtilCallbackFunction;", "terminateOnRelativeNorm", "Z", "terminateOnNumericalZero", "terminateOnAverageImprovement", "terminateOnEvalImprovement", "terminateOnMaxItr", "suppressTestPrompt", "setTerminateOnEvalImprovementNumOfEpoch", "setM", "setHistory", "LJavaUtilList;LJavaUtilList;", "(Ljava/util/List<[LD;>;Ljava/util/List<[LD;>;)V", "computeDir", "[D[D[DLEduStanfordNlpOptimizationQNMinimizer_QNInfo;LEduStanfordNlpOptimizationFunction;", "LEduStanfordNlpOptimizationQNMinimizer_SurpriseConvergence;", "plusAndConstMult", "[D[DD[D", "doEvaluation", "[D", "minimize", "LEduStanfordNlpOptimizationDiffFloatFunction;F[F", "LEduStanfordNlpOptimizationDiffFunction;D[D", "LEduStanfordNlpOptimizationDiffFunction;D[DI", "LEduStanfordNlpOptimizationDiffFunction;D[DILEduStanfordNlpOptimizationQNMinimizer_QNInfo;", "sayln", "LNSString;", "say", "evaluateFunction", "LEduStanfordNlpOptimizationDiffFunction;[D[D", "useOWLQN", "ZD", "projectOWL", "[D[DLEduStanfordNlpOptimizationFunction;", "l1NormOWL", "[DLEduStanfordNlpOptimizationFunction;", "constrainSearchDir", "[D[D[DLEduStanfordNlpOptimizationFunction;", "pseudoGradientOWL", "lineSearchBacktrackOWL", "LEduStanfordNlpOptimizationFunction;[D[D[D[DD", "LEduStanfordNlpOptimizationQNMinimizer_MaxEvaluationsExceeded;", "lineSearchBacktrack", "lineSearchMinPack", "LEduStanfordNlpOptimizationDiffFunction;[D[D[D[DDD", "getStep", "[D[D[DDD", "copy", "[D[D", &EduStanfordNlpOptimizationQNMinimizer_nf, &EduStanfordNlpOptimizationQNMinimizer_nfsec, "LEduStanfordNlpOptimizationQNMinimizer_eState;LEduStanfordNlpOptimizationQNMinimizer_eLineSearch;LEduStanfordNlpOptimizationQNMinimizer_eScaling;LEduStanfordNlpOptimizationQNMinimizer_SurpriseConvergence;LEduStanfordNlpOptimizationQNMinimizer_MaxEvaluationsExceeded;LEduStanfordNlpOptimizationQNMinimizer_Record;LEduStanfordNlpOptimizationQNMinimizer_QNInfo;", "Ljava/lang/Object;Ledu/stanford/nlp/optimization/Minimizer<Ledu/stanford/nlp/optimization/DiffFunction;>;Ledu/stanford/nlp/optimization/HasEvaluators;" };
  static const J2ObjcClassInfo _EduStanfordNlpOptimizationQNMinimizer = { "QNMinimizer", "edu.stanford.nlp.optimization", ptrTable, methods, fields, 7, 0x1, 48, 39, -1, 61, -1, 62, -1 };
  return &_EduStanfordNlpOptimizationQNMinimizer;
}

+ (void)initialize {
  if (self == [EduStanfordNlpOptimizationQNMinimizer class]) {
    EduStanfordNlpOptimizationQNMinimizer_nf = new_JavaTextDecimalFormat_initWithNSString_(@"0.000E0");
    EduStanfordNlpOptimizationQNMinimizer_nfsec = new_JavaTextDecimalFormat_initWithNSString_(@"0.00");
    J2OBJC_SET_INITIALIZED(EduStanfordNlpOptimizationQNMinimizer)
  }
}

@end

void EduStanfordNlpOptimizationQNMinimizer_init(EduStanfordNlpOptimizationQNMinimizer *self) {
  EduStanfordNlpOptimizationQNMinimizer_initWithEduStanfordNlpOptimizationFunction_(self, nil);
}

EduStanfordNlpOptimizationQNMinimizer *new_EduStanfordNlpOptimizationQNMinimizer_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpOptimizationQNMinimizer, init)
}

EduStanfordNlpOptimizationQNMinimizer *create_EduStanfordNlpOptimizationQNMinimizer_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpOptimizationQNMinimizer, init)
}

void EduStanfordNlpOptimizationQNMinimizer_initWithInt_(EduStanfordNlpOptimizationQNMinimizer *self, jint m) {
  EduStanfordNlpOptimizationQNMinimizer_initWithEduStanfordNlpOptimizationFunction_withInt_(self, nil, m);
}

EduStanfordNlpOptimizationQNMinimizer *new_EduStanfordNlpOptimizationQNMinimizer_initWithInt_(jint m) {
  J2OBJC_NEW_IMPL(EduStanfordNlpOptimizationQNMinimizer, initWithInt_, m)
}

EduStanfordNlpOptimizationQNMinimizer *create_EduStanfordNlpOptimizationQNMinimizer_initWithInt_(jint m) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpOptimizationQNMinimizer, initWithInt_, m)
}

void EduStanfordNlpOptimizationQNMinimizer_initWithInt_withBoolean_(EduStanfordNlpOptimizationQNMinimizer *self, jint m, jboolean useRobustOptions) {
  EduStanfordNlpOptimizationQNMinimizer_initWithEduStanfordNlpOptimizationFunction_withInt_withBoolean_(self, nil, m, useRobustOptions);
}

EduStanfordNlpOptimizationQNMinimizer *new_EduStanfordNlpOptimizationQNMinimizer_initWithInt_withBoolean_(jint m, jboolean useRobustOptions) {
  J2OBJC_NEW_IMPL(EduStanfordNlpOptimizationQNMinimizer, initWithInt_withBoolean_, m, useRobustOptions)
}

EduStanfordNlpOptimizationQNMinimizer *create_EduStanfordNlpOptimizationQNMinimizer_initWithInt_withBoolean_(jint m, jboolean useRobustOptions) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpOptimizationQNMinimizer, initWithInt_withBoolean_, m, useRobustOptions)
}

void EduStanfordNlpOptimizationQNMinimizer_initWithEduStanfordNlpOptimizationFunction_(EduStanfordNlpOptimizationQNMinimizer *self, id<EduStanfordNlpOptimizationFunction> monitor) {
  NSObject_init(self);
  self->fevals_ = 0;
  self->maxFevals_ = -1;
  self->mem_ = 10;
  self->its_ = 0;
  self->gtol_ = 0.9;
  self->outputToFile_ = false;
  self->success_ = false;
  self->bracketed_ = false;
  self->presetInfo_ = nil;
  self->noHistory_ = true;
  self->useOWLQN_ = false;
  self->lambdaOWL_ = 0;
  self->useAveImprovement_ = true;
  self->useRelativeNorm_ = true;
  self->useNumericalZero_ = true;
  self->useEvalImprovement_ = false;
  self->useMaxItr_ = false;
  self->maxItr_ = 0;
  self->suppressTestPrompt_ = false;
  self->terminateOnEvalImprovementNumOfEpoch_ = 1;
  self->evaluateIters_ = 0;
  self->startEvaluateIters_ = 0;
  self->iterCallbackFunction_ = nil;
  self->lsOpt_ = JreLoadEnum(EduStanfordNlpOptimizationQNMinimizer_eLineSearch, MINPACK);
  self->scaleOpt_ = JreLoadEnum(EduStanfordNlpOptimizationQNMinimizer_eScaling, DIAGONAL);
  self->state_ = JreLoadEnum(EduStanfordNlpOptimizationQNMinimizer_eState, CONTINUE);
  self->monitor_ = monitor;
}

EduStanfordNlpOptimizationQNMinimizer *new_EduStanfordNlpOptimizationQNMinimizer_initWithEduStanfordNlpOptimizationFunction_(id<EduStanfordNlpOptimizationFunction> monitor) {
  J2OBJC_NEW_IMPL(EduStanfordNlpOptimizationQNMinimizer, initWithEduStanfordNlpOptimizationFunction_, monitor)
}

EduStanfordNlpOptimizationQNMinimizer *create_EduStanfordNlpOptimizationQNMinimizer_initWithEduStanfordNlpOptimizationFunction_(id<EduStanfordNlpOptimizationFunction> monitor) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpOptimizationQNMinimizer, initWithEduStanfordNlpOptimizationFunction_, monitor)
}

void EduStanfordNlpOptimizationQNMinimizer_initWithEduStanfordNlpOptimizationFunction_withInt_(EduStanfordNlpOptimizationQNMinimizer *self, id<EduStanfordNlpOptimizationFunction> monitor, jint m) {
  EduStanfordNlpOptimizationQNMinimizer_initWithEduStanfordNlpOptimizationFunction_withInt_withBoolean_(self, monitor, m, false);
}

EduStanfordNlpOptimizationQNMinimizer *new_EduStanfordNlpOptimizationQNMinimizer_initWithEduStanfordNlpOptimizationFunction_withInt_(id<EduStanfordNlpOptimizationFunction> monitor, jint m) {
  J2OBJC_NEW_IMPL(EduStanfordNlpOptimizationQNMinimizer, initWithEduStanfordNlpOptimizationFunction_withInt_, monitor, m)
}

EduStanfordNlpOptimizationQNMinimizer *create_EduStanfordNlpOptimizationQNMinimizer_initWithEduStanfordNlpOptimizationFunction_withInt_(id<EduStanfordNlpOptimizationFunction> monitor, jint m) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpOptimizationQNMinimizer, initWithEduStanfordNlpOptimizationFunction_withInt_, monitor, m)
}

void EduStanfordNlpOptimizationQNMinimizer_initWithEduStanfordNlpOptimizationFunction_withInt_withBoolean_(EduStanfordNlpOptimizationQNMinimizer *self, id<EduStanfordNlpOptimizationFunction> monitor, jint m, jboolean useRobustOptions) {
  NSObject_init(self);
  self->fevals_ = 0;
  self->maxFevals_ = -1;
  self->mem_ = 10;
  self->its_ = 0;
  self->gtol_ = 0.9;
  self->outputToFile_ = false;
  self->success_ = false;
  self->bracketed_ = false;
  self->presetInfo_ = nil;
  self->noHistory_ = true;
  self->useOWLQN_ = false;
  self->lambdaOWL_ = 0;
  self->useAveImprovement_ = true;
  self->useRelativeNorm_ = true;
  self->useNumericalZero_ = true;
  self->useEvalImprovement_ = false;
  self->useMaxItr_ = false;
  self->maxItr_ = 0;
  self->suppressTestPrompt_ = false;
  self->terminateOnEvalImprovementNumOfEpoch_ = 1;
  self->evaluateIters_ = 0;
  self->startEvaluateIters_ = 0;
  self->iterCallbackFunction_ = nil;
  self->lsOpt_ = JreLoadEnum(EduStanfordNlpOptimizationQNMinimizer_eLineSearch, MINPACK);
  self->scaleOpt_ = JreLoadEnum(EduStanfordNlpOptimizationQNMinimizer_eScaling, DIAGONAL);
  self->state_ = JreLoadEnum(EduStanfordNlpOptimizationQNMinimizer_eState, CONTINUE);
  self->monitor_ = monitor;
  self->mem_ = m;
  if (useRobustOptions) {
    EduStanfordNlpOptimizationQNMinimizer_setRobustOptions(self);
  }
}

EduStanfordNlpOptimizationQNMinimizer *new_EduStanfordNlpOptimizationQNMinimizer_initWithEduStanfordNlpOptimizationFunction_withInt_withBoolean_(id<EduStanfordNlpOptimizationFunction> monitor, jint m, jboolean useRobustOptions) {
  J2OBJC_NEW_IMPL(EduStanfordNlpOptimizationQNMinimizer, initWithEduStanfordNlpOptimizationFunction_withInt_withBoolean_, monitor, m, useRobustOptions)
}

EduStanfordNlpOptimizationQNMinimizer *create_EduStanfordNlpOptimizationQNMinimizer_initWithEduStanfordNlpOptimizationFunction_withInt_withBoolean_(id<EduStanfordNlpOptimizationFunction> monitor, jint m, jboolean useRobustOptions) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpOptimizationQNMinimizer, initWithEduStanfordNlpOptimizationFunction_withInt_withBoolean_, monitor, m, useRobustOptions)
}

void EduStanfordNlpOptimizationQNMinimizer_initWithEduStanfordNlpOptimizationFloatFunction_(EduStanfordNlpOptimizationQNMinimizer *self, id<EduStanfordNlpOptimizationFloatFunction> monitor) {
  NSObject_init(self);
  self->fevals_ = 0;
  self->maxFevals_ = -1;
  self->mem_ = 10;
  self->its_ = 0;
  self->gtol_ = 0.9;
  self->outputToFile_ = false;
  self->success_ = false;
  self->bracketed_ = false;
  self->presetInfo_ = nil;
  self->noHistory_ = true;
  self->useOWLQN_ = false;
  self->lambdaOWL_ = 0;
  self->useAveImprovement_ = true;
  self->useRelativeNorm_ = true;
  self->useNumericalZero_ = true;
  self->useEvalImprovement_ = false;
  self->useMaxItr_ = false;
  self->maxItr_ = 0;
  self->suppressTestPrompt_ = false;
  self->terminateOnEvalImprovementNumOfEpoch_ = 1;
  self->evaluateIters_ = 0;
  self->startEvaluateIters_ = 0;
  self->iterCallbackFunction_ = nil;
  self->lsOpt_ = JreLoadEnum(EduStanfordNlpOptimizationQNMinimizer_eLineSearch, MINPACK);
  self->scaleOpt_ = JreLoadEnum(EduStanfordNlpOptimizationQNMinimizer_eScaling, DIAGONAL);
  self->state_ = JreLoadEnum(EduStanfordNlpOptimizationQNMinimizer_eState, CONTINUE);
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"Doesn't support floats yet");
}

EduStanfordNlpOptimizationQNMinimizer *new_EduStanfordNlpOptimizationQNMinimizer_initWithEduStanfordNlpOptimizationFloatFunction_(id<EduStanfordNlpOptimizationFloatFunction> monitor) {
  J2OBJC_NEW_IMPL(EduStanfordNlpOptimizationQNMinimizer, initWithEduStanfordNlpOptimizationFloatFunction_, monitor)
}

EduStanfordNlpOptimizationQNMinimizer *create_EduStanfordNlpOptimizationQNMinimizer_initWithEduStanfordNlpOptimizationFloatFunction_(id<EduStanfordNlpOptimizationFloatFunction> monitor) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpOptimizationQNMinimizer, initWithEduStanfordNlpOptimizationFloatFunction_, monitor)
}

void EduStanfordNlpOptimizationQNMinimizer_setRobustOptions(EduStanfordNlpOptimizationQNMinimizer *self) {
  self->useAveImprovement_ = true;
  self->useRelativeNorm_ = true;
  self->useNumericalZero_ = true;
  self->lsOpt_ = JreLoadEnum(EduStanfordNlpOptimizationQNMinimizer_eLineSearch, MINPACK);
  self->scaleOpt_ = JreLoadEnum(EduStanfordNlpOptimizationQNMinimizer_eScaling, DIAGONAL);
}

void EduStanfordNlpOptimizationQNMinimizer_computeDirWithDoubleArray_withDoubleArray_withDoubleArray_withEduStanfordNlpOptimizationQNMinimizer_QNInfo_withEduStanfordNlpOptimizationFunction_(EduStanfordNlpOptimizationQNMinimizer *self, IOSDoubleArray *dir, IOSDoubleArray *fg, IOSDoubleArray *x, EduStanfordNlpOptimizationQNMinimizer_QNInfo *qn, id<EduStanfordNlpOptimizationFunction> func) {
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(fg, 0, dir, 0, ((IOSDoubleArray *) nil_chk(fg))->size_);
  jint mmm = [((EduStanfordNlpOptimizationQNMinimizer_QNInfo *) nil_chk(qn)) size];
  IOSDoubleArray *as = [IOSDoubleArray newArrayWithLength:mmm];
  for (jint i = mmm - 1; i >= 0; i--) {
    *IOSDoubleArray_GetRef(as, i) = [qn getRhoWithInt:i] * EduStanfordNlpMathArrayMath_innerProductWithDoubleArray_withDoubleArray_([qn getSWithInt:i], dir);
    (void) EduStanfordNlpOptimizationQNMinimizer_plusAndConstMultWithDoubleArray_withDoubleArray_withDouble_withDoubleArray_(dir, [qn getYWithInt:i], -IOSDoubleArray_Get(as, i), dir);
  }
  (void) [qn applyInitialHessianWithDoubleArray:dir];
  for (jint i = 0; i < mmm; i++) {
    jdouble b = [qn getRhoWithInt:i] * EduStanfordNlpMathArrayMath_innerProductWithDoubleArray_withDoubleArray_([qn getYWithInt:i], dir);
    (void) EduStanfordNlpOptimizationQNMinimizer_plusAndConstMultWithDoubleArray_withDoubleArray_withDouble_withDoubleArray_(dir, [qn getSWithInt:i], IOSDoubleArray_Get(as, i) - b, dir);
  }
  EduStanfordNlpMathArrayMath_multiplyInPlaceWithDoubleArray_withDouble_(dir, -1);
  if (self->useOWLQN_) {
    EduStanfordNlpOptimizationQNMinimizer_constrainSearchDirWithDoubleArray_withDoubleArray_withDoubleArray_withEduStanfordNlpOptimizationFunction_(dir, fg, x, func);
  }
}

IOSDoubleArray *EduStanfordNlpOptimizationQNMinimizer_plusAndConstMultWithDoubleArray_withDoubleArray_withDouble_withDoubleArray_(IOSDoubleArray *a, IOSDoubleArray *b, jdouble c, IOSDoubleArray *d) {
  EduStanfordNlpOptimizationQNMinimizer_initialize();
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(a))->size_; i++) {
    *IOSDoubleArray_GetRef(nil_chk(d), i) = IOSDoubleArray_Get(a, i) + c * IOSDoubleArray_Get(nil_chk(b), i);
  }
  return d;
}

jdouble EduStanfordNlpOptimizationQNMinimizer_doEvaluationWithDoubleArray_(EduStanfordNlpOptimizationQNMinimizer *self, IOSDoubleArray *x) {
  if (self->evaluators_ == nil) return JavaLangDouble_NEGATIVE_INFINITY;
  jdouble score = 0;
  {
    IOSObjectArray *a__ = self->evaluators_;
    id<EduStanfordNlpOptimizationEvaluator> const *b__ = a__->buffer_;
    id<EduStanfordNlpOptimizationEvaluator> const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id<EduStanfordNlpOptimizationEvaluator> eval = *b__++;
      if (!self->suppressTestPrompt_) EduStanfordNlpOptimizationQNMinimizer_sayWithNSString_(self, JreStrcat("$$", @"  Evaluating: ", [((id<EduStanfordNlpOptimizationEvaluator>) nil_chk(eval)) description]));
      score = [((id<EduStanfordNlpOptimizationEvaluator>) nil_chk(eval)) evaluateWithDoubleArray:x];
    }
  }
  return score;
}

void EduStanfordNlpOptimizationQNMinimizer_sayln(EduStanfordNlpOptimizationQNMinimizer *self) {
  if (!self->quiet_) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) println];
  }
}

void EduStanfordNlpOptimizationQNMinimizer_saylnWithNSString_(EduStanfordNlpOptimizationQNMinimizer *self, NSString *s) {
  if (!self->quiet_) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:s];
  }
}

void EduStanfordNlpOptimizationQNMinimizer_sayWithNSString_(EduStanfordNlpOptimizationQNMinimizer *self, NSString *s) {
  if (!self->quiet_) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printWithNSString:s];
  }
}

jdouble EduStanfordNlpOptimizationQNMinimizer_evaluateFunctionWithEduStanfordNlpOptimizationDiffFunction_withDoubleArray_withDoubleArray_(EduStanfordNlpOptimizationQNMinimizer *self, id<EduStanfordNlpOptimizationDiffFunction> dfunc, IOSDoubleArray *x, IOSDoubleArray *grad) {
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([((id<EduStanfordNlpOptimizationDiffFunction>) nil_chk(dfunc)) derivativeAtWithDoubleArray:x], 0, grad, 0, ((IOSDoubleArray *) nil_chk(grad))->size_);
  self->fevals_ += 1;
  return [dfunc valueAtWithDoubleArray:x];
}

IOSDoubleArray *EduStanfordNlpOptimizationQNMinimizer_projectOWLWithDoubleArray_withDoubleArray_withEduStanfordNlpOptimizationFunction_(IOSDoubleArray *x, IOSDoubleArray *orthant, id<EduStanfordNlpOptimizationFunction> func) {
  EduStanfordNlpOptimizationQNMinimizer_initialize();
  if ([EduStanfordNlpOptimizationHasRegularizerParamRange_class_() isInstance:func]) {
    id<JavaUtilSet> paramRange = [((id<EduStanfordNlpOptimizationHasRegularizerParamRange>) nil_chk(((id<EduStanfordNlpOptimizationHasRegularizerParamRange>) cast_check(func, EduStanfordNlpOptimizationHasRegularizerParamRange_class_())))) getRegularizerParamRangeWithDoubleArray:x];
    for (JavaLangInteger *boxed__ in nil_chk(paramRange)) {
      jint i = [((JavaLangInteger *) nil_chk(boxed__)) intValue];
      if (IOSDoubleArray_Get(nil_chk(x), i) * IOSDoubleArray_Get(nil_chk(orthant), i) <= 0.0) {
        *IOSDoubleArray_GetRef(x, i) = 0.0;
      }
    }
  }
  else {
    for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(x))->size_; i++) {
      if (IOSDoubleArray_Get(x, i) * IOSDoubleArray_Get(nil_chk(orthant), i) <= 0.0) {
        *IOSDoubleArray_GetRef(x, i) = 0.0;
      }
    }
  }
  return x;
}

jdouble EduStanfordNlpOptimizationQNMinimizer_l1NormOWLWithDoubleArray_withEduStanfordNlpOptimizationFunction_(IOSDoubleArray *x, id<EduStanfordNlpOptimizationFunction> func) {
  EduStanfordNlpOptimizationQNMinimizer_initialize();
  jdouble sum = 0.0;
  if ([EduStanfordNlpOptimizationHasRegularizerParamRange_class_() isInstance:func]) {
    id<JavaUtilSet> paramRange = [((id<EduStanfordNlpOptimizationHasRegularizerParamRange>) nil_chk(((id<EduStanfordNlpOptimizationHasRegularizerParamRange>) cast_check(func, EduStanfordNlpOptimizationHasRegularizerParamRange_class_())))) getRegularizerParamRangeWithDoubleArray:x];
    for (JavaLangInteger *boxed__ in nil_chk(paramRange)) {
      jint i = [((JavaLangInteger *) nil_chk(boxed__)) intValue];
      JrePlusAssignDoubleD(&sum, JavaLangMath_absWithDouble_(IOSDoubleArray_Get(nil_chk(x), i)));
    }
  }
  else {
    {
      IOSDoubleArray *a__ = x;
      jdouble const *b__ = ((IOSDoubleArray *) nil_chk(a__))->buffer_;
      jdouble const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        jdouble v = *b__++;
        JrePlusAssignDoubleD(&sum, JavaLangMath_absWithDouble_(v));
      }
    }
  }
  return sum;
}

void EduStanfordNlpOptimizationQNMinimizer_constrainSearchDirWithDoubleArray_withDoubleArray_withDoubleArray_withEduStanfordNlpOptimizationFunction_(IOSDoubleArray *dir, IOSDoubleArray *fg, IOSDoubleArray *x, id<EduStanfordNlpOptimizationFunction> func) {
  EduStanfordNlpOptimizationQNMinimizer_initialize();
  if ([EduStanfordNlpOptimizationHasRegularizerParamRange_class_() isInstance:func]) {
    id<JavaUtilSet> paramRange = [((id<EduStanfordNlpOptimizationHasRegularizerParamRange>) nil_chk(((id<EduStanfordNlpOptimizationHasRegularizerParamRange>) cast_check(func, EduStanfordNlpOptimizationHasRegularizerParamRange_class_())))) getRegularizerParamRangeWithDoubleArray:x];
    for (JavaLangInteger *boxed__ in nil_chk(paramRange)) {
      jint i = [((JavaLangInteger *) nil_chk(boxed__)) intValue];
      if (IOSDoubleArray_Get(nil_chk(dir), i) * IOSDoubleArray_Get(nil_chk(fg), i) >= 0.0) {
        *IOSDoubleArray_GetRef(dir, i) = 0.0;
      }
    }
  }
  else {
    for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(x))->size_; i++) {
      if (IOSDoubleArray_Get(nil_chk(dir), i) * IOSDoubleArray_Get(nil_chk(fg), i) >= 0.0) {
        *IOSDoubleArray_GetRef(dir, i) = 0.0;
      }
    }
  }
}

IOSDoubleArray *EduStanfordNlpOptimizationQNMinimizer_pseudoGradientOWLWithDoubleArray_withDoubleArray_withEduStanfordNlpOptimizationFunction_(EduStanfordNlpOptimizationQNMinimizer *self, IOSDoubleArray *x, IOSDoubleArray *grad, id<EduStanfordNlpOptimizationFunction> func) {
  id<JavaUtilSet> paramRange = [EduStanfordNlpOptimizationHasRegularizerParamRange_class_() isInstance:func] ? [((id<EduStanfordNlpOptimizationHasRegularizerParamRange>) nil_chk(((id<EduStanfordNlpOptimizationHasRegularizerParamRange>) cast_check(func, EduStanfordNlpOptimizationHasRegularizerParamRange_class_())))) getRegularizerParamRangeWithDoubleArray:x] : nil;
  IOSDoubleArray *newGrad = [IOSDoubleArray newArrayWithLength:((IOSDoubleArray *) nil_chk(grad))->size_];
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(x))->size_; i++) {
    if (paramRange == nil || [paramRange containsWithId:JavaLangInteger_valueOfWithInt_(i)]) {
      if (IOSDoubleArray_Get(x, i) < 0.0) {
        *IOSDoubleArray_GetRef(newGrad, i) = IOSDoubleArray_Get(grad, i) - self->lambdaOWL_;
      }
      else if (IOSDoubleArray_Get(x, i) > 0.0) {
        *IOSDoubleArray_GetRef(newGrad, i) = IOSDoubleArray_Get(grad, i) + self->lambdaOWL_;
      }
      else {
        if (IOSDoubleArray_Get(grad, i) < -self->lambdaOWL_) {
          *IOSDoubleArray_GetRef(newGrad, i) = IOSDoubleArray_Get(grad, i) + self->lambdaOWL_;
        }
        else if (IOSDoubleArray_Get(grad, i) > self->lambdaOWL_) {
          *IOSDoubleArray_GetRef(newGrad, i) = IOSDoubleArray_Get(grad, i) - self->lambdaOWL_;
        }
        else {
          *IOSDoubleArray_GetRef(newGrad, i) = 0.0;
        }
      }
    }
    else {
      *IOSDoubleArray_GetRef(newGrad, i) = IOSDoubleArray_Get(grad, i);
    }
  }
  return newGrad;
}

IOSDoubleArray *EduStanfordNlpOptimizationQNMinimizer_lineSearchBacktrackOWLWithEduStanfordNlpOptimizationFunction_withDoubleArray_withDoubleArray_withDoubleArray_withDoubleArray_withDouble_(EduStanfordNlpOptimizationQNMinimizer *self, id<EduStanfordNlpOptimizationFunction> func, IOSDoubleArray *dir, IOSDoubleArray *x, IOSDoubleArray *newX, IOSDoubleArray *grad, jdouble lastValue) {
  IOSDoubleArray *orthant = [IOSDoubleArray newArrayWithLength:((IOSDoubleArray *) nil_chk(x))->size_];
  for (jint i = 0; i < orthant->size_; i++) {
    *IOSDoubleArray_GetRef(orthant, i) = (IOSDoubleArray_Get(x, i) == 0.0) ? -IOSDoubleArray_Get(nil_chk(grad), i) : IOSDoubleArray_Get(x, i);
  }
  jdouble step, c1;
  if (self->its_ <= 2) {
    step = 0.1;
    c1 = 0.1;
  }
  else {
    step = 1.0;
    c1 = 0.1;
  }
  jdouble c = 0.01;
  IOSDoubleArray *newPoint = [IOSDoubleArray newArrayWithLength:3];
  while (true) {
    (void) EduStanfordNlpOptimizationQNMinimizer_plusAndConstMultWithDoubleArray_withDoubleArray_withDouble_withDoubleArray_(x, dir, step, newX);
    (void) EduStanfordNlpOptimizationQNMinimizer_projectOWLWithDoubleArray_withDoubleArray_withEduStanfordNlpOptimizationFunction_(newX, orthant, func);
    jdouble value = [((id<EduStanfordNlpOptimizationFunction>) nil_chk(func)) valueAtWithDoubleArray:newX];
    jdouble norm = EduStanfordNlpOptimizationQNMinimizer_l1NormOWLWithDoubleArray_withEduStanfordNlpOptimizationFunction_(newX, func);
    JrePlusAssignDoubleD(&value, norm * self->lambdaOWL_);
    *IOSDoubleArray_GetRef(newPoint, EduStanfordNlpOptimizationQNMinimizer_f) = value;
    jdouble dgtest = 0.0;
    for (jint i = 0; i < x->size_; i++) {
      JrePlusAssignDoubleD(&dgtest, (IOSDoubleArray_Get(nil_chk(newX), i) - IOSDoubleArray_Get(x, i)) * IOSDoubleArray_Get(nil_chk(grad), i));
    }
    if (IOSDoubleArray_Get(newPoint, EduStanfordNlpOptimizationQNMinimizer_f) <= lastValue + c * dgtest) break;
    else {
      if (IOSDoubleArray_Get(newPoint, EduStanfordNlpOptimizationQNMinimizer_f) < lastValue) {
        EduStanfordNlpOptimizationQNMinimizer_sayWithNSString_(self, @"!");
      }
      else {
        EduStanfordNlpOptimizationQNMinimizer_sayWithNSString_(self, @".");
      }
    }
    step = c1 * step;
  }
  *IOSDoubleArray_GetRef(newPoint, EduStanfordNlpOptimizationQNMinimizer_a) = step;
  self->fevals_ += 1;
  if (self->fevals_ > self->maxFevals_) {
    @throw new_EduStanfordNlpOptimizationQNMinimizer_MaxEvaluationsExceeded_initWithNSString_(@" Exceeded during linesearch() Function ");
  }
  return newPoint;
}

IOSDoubleArray *EduStanfordNlpOptimizationQNMinimizer_lineSearchBacktrackWithEduStanfordNlpOptimizationFunction_withDoubleArray_withDoubleArray_withDoubleArray_withDoubleArray_withDouble_(EduStanfordNlpOptimizationQNMinimizer *self, id<EduStanfordNlpOptimizationFunction> func, IOSDoubleArray *dir, IOSDoubleArray *x, IOSDoubleArray *newX, IOSDoubleArray *grad, jdouble lastValue) {
  jdouble normGradInDir = EduStanfordNlpMathArrayMath_innerProductWithDoubleArray_withDoubleArray_(dir, grad);
  EduStanfordNlpOptimizationQNMinimizer_sayWithNSString_(self, JreStrcat("C$C", '(', [((JavaTextNumberFormat *) nil_chk(EduStanfordNlpOptimizationQNMinimizer_nf)) formatWithDouble:normGradInDir], ')'));
  if (normGradInDir > 0) {
    EduStanfordNlpOptimizationQNMinimizer_sayWithNSString_(self, @"{WARNING--- direction of positive gradient chosen!}");
  }
  jdouble step, c1;
  if (self->its_ <= 2) {
    step = 0.1;
    c1 = 0.1;
  }
  else {
    step = 1.0;
    c1 = 0.1;
  }
  jdouble c = 0.01;
  c = c * normGradInDir;
  IOSDoubleArray *newPoint = [IOSDoubleArray newArrayWithLength:3];
  while ((*IOSDoubleArray_GetRef(newPoint, EduStanfordNlpOptimizationQNMinimizer_f) = [((id<EduStanfordNlpOptimizationFunction>) nil_chk(func)) valueAtWithDoubleArray:(EduStanfordNlpOptimizationQNMinimizer_plusAndConstMultWithDoubleArray_withDoubleArray_withDouble_withDoubleArray_(x, dir, step, newX))]) > lastValue + c * step) {
    self->fevals_ += 1;
    if (IOSDoubleArray_Get(newPoint, EduStanfordNlpOptimizationQNMinimizer_f) < lastValue) {
      EduStanfordNlpOptimizationQNMinimizer_sayWithNSString_(self, @"!");
    }
    else {
      EduStanfordNlpOptimizationQNMinimizer_sayWithNSString_(self, @".");
    }
    step = c1 * step;
  }
  *IOSDoubleArray_GetRef(newPoint, EduStanfordNlpOptimizationQNMinimizer_a) = step;
  self->fevals_ += 1;
  if (self->fevals_ > self->maxFevals_) {
    @throw new_EduStanfordNlpOptimizationQNMinimizer_MaxEvaluationsExceeded_initWithNSString_(@" Exceeded during lineSearch() Function ");
  }
  return newPoint;
}

IOSDoubleArray *EduStanfordNlpOptimizationQNMinimizer_lineSearchMinPackWithEduStanfordNlpOptimizationDiffFunction_withDoubleArray_withDoubleArray_withDoubleArray_withDoubleArray_withDouble_withDouble_(EduStanfordNlpOptimizationQNMinimizer *self, id<EduStanfordNlpOptimizationDiffFunction> dfunc, IOSDoubleArray *dir, IOSDoubleArray *x, IOSDoubleArray *newX, IOSDoubleArray *grad, jdouble f0, jdouble tol) {
  jdouble xtrapf = 4.0;
  jint info = 0;
  jint infoc = 1;
  self->bracketed_ = false;
  jboolean stage1 = true;
  jdouble width = EduStanfordNlpOptimizationQNMinimizer_aMax - EduStanfordNlpOptimizationQNMinimizer_aMin;
  jdouble width1 = 2 * width;
  jdouble g0 = EduStanfordNlpMathArrayMath_innerProductWithDoubleArray_withDoubleArray_(grad, dir);
  if (g0 >= 0) {
    for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(x))->size_; i++) {
      *IOSDoubleArray_GetRef(nil_chk(dir), i) = -IOSDoubleArray_Get(nil_chk(grad), i);
    }
    g0 = EduStanfordNlpMathArrayMath_innerProductWithDoubleArray_withDoubleArray_(grad, dir);
  }
  jdouble gTest = EduStanfordNlpOptimizationQNMinimizer_ftol * g0;
  IOSDoubleArray *newPt = [IOSDoubleArray newArrayWithLength:3];
  IOSDoubleArray *bestPt = [IOSDoubleArray newArrayWithLength:3];
  IOSDoubleArray *endPt = [IOSDoubleArray newArrayWithLength:3];
  *IOSDoubleArray_GetRef(newPt, EduStanfordNlpOptimizationQNMinimizer_a) = 1.0;
  if (self->its_ == 1 && self->noHistory_) {
    *IOSDoubleArray_GetRef(newPt, EduStanfordNlpOptimizationQNMinimizer_a) = 1e-1;
  }
  *IOSDoubleArray_GetRef(bestPt, EduStanfordNlpOptimizationQNMinimizer_a) = 0.0;
  *IOSDoubleArray_GetRef(bestPt, EduStanfordNlpOptimizationQNMinimizer_f) = f0;
  *IOSDoubleArray_GetRef(bestPt, EduStanfordNlpOptimizationQNMinimizer_g) = g0;
  *IOSDoubleArray_GetRef(endPt, EduStanfordNlpOptimizationQNMinimizer_a) = 0.0;
  *IOSDoubleArray_GetRef(endPt, EduStanfordNlpOptimizationQNMinimizer_f) = f0;
  *IOSDoubleArray_GetRef(endPt, EduStanfordNlpOptimizationQNMinimizer_g) = g0;
  do {
    jdouble stpMin;
    jdouble stpMax;
    if (self->bracketed_) {
      stpMin = JavaLangMath_minWithDouble_withDouble_(IOSDoubleArray_Get(bestPt, EduStanfordNlpOptimizationQNMinimizer_a), IOSDoubleArray_Get(endPt, EduStanfordNlpOptimizationQNMinimizer_a));
      stpMax = JavaLangMath_maxWithDouble_withDouble_(IOSDoubleArray_Get(bestPt, EduStanfordNlpOptimizationQNMinimizer_a), IOSDoubleArray_Get(endPt, EduStanfordNlpOptimizationQNMinimizer_a));
    }
    else {
      stpMin = IOSDoubleArray_Get(bestPt, EduStanfordNlpOptimizationQNMinimizer_a);
      stpMax = IOSDoubleArray_Get(newPt, EduStanfordNlpOptimizationQNMinimizer_a) + xtrapf * (IOSDoubleArray_Get(newPt, EduStanfordNlpOptimizationQNMinimizer_a) - IOSDoubleArray_Get(bestPt, EduStanfordNlpOptimizationQNMinimizer_a));
    }
    *IOSDoubleArray_GetRef(newPt, EduStanfordNlpOptimizationQNMinimizer_a) = JavaLangMath_maxWithDouble_withDouble_(IOSDoubleArray_Get(newPt, EduStanfordNlpOptimizationQNMinimizer_a), EduStanfordNlpOptimizationQNMinimizer_aMin);
    *IOSDoubleArray_GetRef(newPt, EduStanfordNlpOptimizationQNMinimizer_a) = JavaLangMath_minWithDouble_withDouble_(IOSDoubleArray_Get(newPt, EduStanfordNlpOptimizationQNMinimizer_a), EduStanfordNlpOptimizationQNMinimizer_aMax);
    if ((self->bracketed_ && (IOSDoubleArray_Get(newPt, EduStanfordNlpOptimizationQNMinimizer_a) <= stpMin || IOSDoubleArray_Get(newPt, EduStanfordNlpOptimizationQNMinimizer_a) >= stpMax)) || self->fevals_ >= self->maxFevals_ || infoc == 0 || (self->bracketed_ && stpMax - stpMin <= tol * stpMax)) {
      (void) EduStanfordNlpOptimizationQNMinimizer_plusAndConstMultWithDoubleArray_withDoubleArray_withDouble_withDoubleArray_(x, dir, IOSDoubleArray_Get(bestPt, EduStanfordNlpOptimizationQNMinimizer_a), newX);
      *IOSDoubleArray_GetRef(newPt, EduStanfordNlpOptimizationQNMinimizer_f) = IOSDoubleArray_Get(bestPt, EduStanfordNlpOptimizationQNMinimizer_f);
      *IOSDoubleArray_GetRef(newPt, EduStanfordNlpOptimizationQNMinimizer_a) = IOSDoubleArray_Get(bestPt, EduStanfordNlpOptimizationQNMinimizer_a);
    }
    *IOSDoubleArray_GetRef(newPt, EduStanfordNlpOptimizationQNMinimizer_f) = [((id<EduStanfordNlpOptimizationDiffFunction>) nil_chk(dfunc)) valueAtWithDoubleArray:(EduStanfordNlpOptimizationQNMinimizer_plusAndConstMultWithDoubleArray_withDoubleArray_withDouble_withDoubleArray_(x, dir, IOSDoubleArray_Get(newPt, EduStanfordNlpOptimizationQNMinimizer_a), newX))];
    *IOSDoubleArray_GetRef(newPt, EduStanfordNlpOptimizationQNMinimizer_g) = EduStanfordNlpMathArrayMath_innerProductWithDoubleArray_withDoubleArray_([dfunc derivativeAtWithDoubleArray:newX], dir);
    jdouble fTest = f0 + IOSDoubleArray_Get(newPt, EduStanfordNlpOptimizationQNMinimizer_a) * gTest;
    self->fevals_ += 1;
    if ((self->bracketed_ && (IOSDoubleArray_Get(newPt, EduStanfordNlpOptimizationQNMinimizer_a) <= stpMin || IOSDoubleArray_Get(newPt, EduStanfordNlpOptimizationQNMinimizer_a) >= stpMax)) || infoc == 0) {
      info = 6;
      EduStanfordNlpOptimizationQNMinimizer_sayWithNSString_(self, @" line search failure: bracketed but no feasible found ");
    }
    if (IOSDoubleArray_Get(newPt, EduStanfordNlpOptimizationQNMinimizer_a) == EduStanfordNlpOptimizationQNMinimizer_aMax && IOSDoubleArray_Get(newPt, EduStanfordNlpOptimizationQNMinimizer_f) <= fTest && IOSDoubleArray_Get(newPt, EduStanfordNlpOptimizationQNMinimizer_g) <= gTest) {
      info = 5;
      EduStanfordNlpOptimizationQNMinimizer_sayWithNSString_(self, @" line search failure: sufficient decrease, but gradient is more negative ");
    }
    if (IOSDoubleArray_Get(newPt, EduStanfordNlpOptimizationQNMinimizer_a) == EduStanfordNlpOptimizationQNMinimizer_aMin && (IOSDoubleArray_Get(newPt, EduStanfordNlpOptimizationQNMinimizer_f) > fTest || IOSDoubleArray_Get(newPt, EduStanfordNlpOptimizationQNMinimizer_g) >= gTest)) {
      info = 4;
      EduStanfordNlpOptimizationQNMinimizer_sayWithNSString_(self, @" line search failure: minimum step length reached ");
    }
    if (self->fevals_ >= self->maxFevals_) {
      info = 3;
      @throw new_EduStanfordNlpOptimizationQNMinimizer_MaxEvaluationsExceeded_initWithNSString_(@" Exceeded during lineSearchMinPack() Function ");
    }
    if (self->bracketed_ && stpMax - stpMin <= tol * stpMax) {
      info = 2;
      EduStanfordNlpOptimizationQNMinimizer_sayWithNSString_(self, @" line search failure: interval is too small ");
    }
    if (IOSDoubleArray_Get(newPt, EduStanfordNlpOptimizationQNMinimizer_f) <= fTest && JavaLangMath_absWithDouble_(IOSDoubleArray_Get(newPt, EduStanfordNlpOptimizationQNMinimizer_g)) <= -self->gtol_ * g0) {
      info = 1;
    }
    if (info != 0) {
      return newPt;
    }
    if (stage1 && IOSDoubleArray_Get(newPt, EduStanfordNlpOptimizationQNMinimizer_f) <= fTest && IOSDoubleArray_Get(newPt, EduStanfordNlpOptimizationQNMinimizer_g) >= JavaLangMath_minWithDouble_withDouble_(EduStanfordNlpOptimizationQNMinimizer_ftol, self->gtol_) * g0) {
      stage1 = false;
    }
    if (stage1 && IOSDoubleArray_Get(newPt, EduStanfordNlpOptimizationQNMinimizer_f) <= IOSDoubleArray_Get(bestPt, EduStanfordNlpOptimizationQNMinimizer_f) && IOSDoubleArray_Get(newPt, EduStanfordNlpOptimizationQNMinimizer_f) > fTest) {
      *IOSDoubleArray_GetRef(newPt, EduStanfordNlpOptimizationQNMinimizer_f) = IOSDoubleArray_Get(newPt, EduStanfordNlpOptimizationQNMinimizer_f) - IOSDoubleArray_Get(newPt, EduStanfordNlpOptimizationQNMinimizer_a) * gTest;
      *IOSDoubleArray_GetRef(bestPt, EduStanfordNlpOptimizationQNMinimizer_f) = IOSDoubleArray_Get(bestPt, EduStanfordNlpOptimizationQNMinimizer_f) - IOSDoubleArray_Get(bestPt, EduStanfordNlpOptimizationQNMinimizer_a) * gTest;
      *IOSDoubleArray_GetRef(endPt, EduStanfordNlpOptimizationQNMinimizer_f) = IOSDoubleArray_Get(endPt, EduStanfordNlpOptimizationQNMinimizer_f) - IOSDoubleArray_Get(endPt, EduStanfordNlpOptimizationQNMinimizer_a) * gTest;
      *IOSDoubleArray_GetRef(newPt, EduStanfordNlpOptimizationQNMinimizer_g) = IOSDoubleArray_Get(newPt, EduStanfordNlpOptimizationQNMinimizer_g) - gTest;
      *IOSDoubleArray_GetRef(bestPt, EduStanfordNlpOptimizationQNMinimizer_g) = IOSDoubleArray_Get(bestPt, EduStanfordNlpOptimizationQNMinimizer_g) - gTest;
      *IOSDoubleArray_GetRef(endPt, EduStanfordNlpOptimizationQNMinimizer_g) = IOSDoubleArray_Get(endPt, EduStanfordNlpOptimizationQNMinimizer_g) - gTest;
      infoc = EduStanfordNlpOptimizationQNMinimizer_getStepWithDoubleArray_withDoubleArray_withDoubleArray_withDouble_withDouble_(self, newPt, bestPt, endPt, stpMin, stpMax);
      *IOSDoubleArray_GetRef(bestPt, EduStanfordNlpOptimizationQNMinimizer_f) = IOSDoubleArray_Get(bestPt, EduStanfordNlpOptimizationQNMinimizer_f) + IOSDoubleArray_Get(bestPt, EduStanfordNlpOptimizationQNMinimizer_a) * gTest;
      *IOSDoubleArray_GetRef(endPt, EduStanfordNlpOptimizationQNMinimizer_f) = IOSDoubleArray_Get(endPt, EduStanfordNlpOptimizationQNMinimizer_f) + IOSDoubleArray_Get(endPt, EduStanfordNlpOptimizationQNMinimizer_a) * gTest;
      *IOSDoubleArray_GetRef(bestPt, EduStanfordNlpOptimizationQNMinimizer_g) = IOSDoubleArray_Get(bestPt, EduStanfordNlpOptimizationQNMinimizer_g) + gTest;
      *IOSDoubleArray_GetRef(endPt, EduStanfordNlpOptimizationQNMinimizer_g) = IOSDoubleArray_Get(endPt, EduStanfordNlpOptimizationQNMinimizer_g) + gTest;
    }
    else {
      infoc = EduStanfordNlpOptimizationQNMinimizer_getStepWithDoubleArray_withDoubleArray_withDoubleArray_withDouble_withDouble_(self, newPt, bestPt, endPt, stpMin, stpMax);
    }
    if (self->bracketed_) {
      if (JavaLangMath_absWithDouble_(IOSDoubleArray_Get(endPt, EduStanfordNlpOptimizationQNMinimizer_a) - IOSDoubleArray_Get(bestPt, EduStanfordNlpOptimizationQNMinimizer_a)) >= EduStanfordNlpOptimizationQNMinimizer_p66 * width1) {
        *IOSDoubleArray_GetRef(newPt, EduStanfordNlpOptimizationQNMinimizer_a) = IOSDoubleArray_Get(bestPt, EduStanfordNlpOptimizationQNMinimizer_a) + EduStanfordNlpOptimizationQNMinimizer_p5 * (IOSDoubleArray_Get(endPt, EduStanfordNlpOptimizationQNMinimizer_a) - IOSDoubleArray_Get(bestPt, EduStanfordNlpOptimizationQNMinimizer_a));
      }
      width1 = width;
      width = JavaLangMath_absWithDouble_(IOSDoubleArray_Get(endPt, EduStanfordNlpOptimizationQNMinimizer_a) - IOSDoubleArray_Get(bestPt, EduStanfordNlpOptimizationQNMinimizer_a));
    }
  }
  while (true);
}

jint EduStanfordNlpOptimizationQNMinimizer_getStepWithDoubleArray_withDoubleArray_withDoubleArray_withDouble_withDouble_(EduStanfordNlpOptimizationQNMinimizer *self, IOSDoubleArray *newPt, IOSDoubleArray *bestPt, IOSDoubleArray *endPt, jdouble stpMin, jdouble stpMax) {
  jint info;
  jboolean bound;
  jdouble theta, gamma, p, q, r, s, stpc, stpq, stpf;
  jdouble signG = IOSDoubleArray_Get(nil_chk(newPt), EduStanfordNlpOptimizationQNMinimizer_g) * IOSDoubleArray_Get(nil_chk(bestPt), EduStanfordNlpOptimizationQNMinimizer_g) / JavaLangMath_absWithDouble_(IOSDoubleArray_Get(bestPt, EduStanfordNlpOptimizationQNMinimizer_g));
  if (IOSDoubleArray_Get(newPt, EduStanfordNlpOptimizationQNMinimizer_f) > IOSDoubleArray_Get(bestPt, EduStanfordNlpOptimizationQNMinimizer_f)) {
    info = 1;
    bound = true;
    theta = 3 * (IOSDoubleArray_Get(bestPt, EduStanfordNlpOptimizationQNMinimizer_f) - IOSDoubleArray_Get(newPt, EduStanfordNlpOptimizationQNMinimizer_f)) / (IOSDoubleArray_Get(newPt, EduStanfordNlpOptimizationQNMinimizer_a) - IOSDoubleArray_Get(bestPt, EduStanfordNlpOptimizationQNMinimizer_a)) + IOSDoubleArray_Get(bestPt, EduStanfordNlpOptimizationQNMinimizer_g) + IOSDoubleArray_Get(newPt, EduStanfordNlpOptimizationQNMinimizer_g);
    s = JavaLangMath_maxWithDouble_withDouble_(JavaLangMath_maxWithDouble_withDouble_(theta, IOSDoubleArray_Get(newPt, EduStanfordNlpOptimizationQNMinimizer_g)), IOSDoubleArray_Get(bestPt, EduStanfordNlpOptimizationQNMinimizer_g));
    gamma = s * JavaLangMath_sqrtWithDouble_((theta / s) * (theta / s) - (IOSDoubleArray_Get(bestPt, EduStanfordNlpOptimizationQNMinimizer_g) / s) * (IOSDoubleArray_Get(newPt, EduStanfordNlpOptimizationQNMinimizer_g) / s));
    if (IOSDoubleArray_Get(newPt, EduStanfordNlpOptimizationQNMinimizer_a) < IOSDoubleArray_Get(bestPt, EduStanfordNlpOptimizationQNMinimizer_a)) {
      gamma = -gamma;
    }
    p = (gamma - IOSDoubleArray_Get(bestPt, EduStanfordNlpOptimizationQNMinimizer_g)) + theta;
    q = ((gamma - IOSDoubleArray_Get(bestPt, EduStanfordNlpOptimizationQNMinimizer_g)) + gamma) + IOSDoubleArray_Get(newPt, EduStanfordNlpOptimizationQNMinimizer_g);
    r = p / q;
    stpc = IOSDoubleArray_Get(bestPt, EduStanfordNlpOptimizationQNMinimizer_a) + r * (IOSDoubleArray_Get(newPt, EduStanfordNlpOptimizationQNMinimizer_a) - IOSDoubleArray_Get(bestPt, EduStanfordNlpOptimizationQNMinimizer_a));
    stpq = IOSDoubleArray_Get(bestPt, EduStanfordNlpOptimizationQNMinimizer_a) + ((IOSDoubleArray_Get(bestPt, EduStanfordNlpOptimizationQNMinimizer_g) / ((IOSDoubleArray_Get(bestPt, EduStanfordNlpOptimizationQNMinimizer_f) - IOSDoubleArray_Get(newPt, EduStanfordNlpOptimizationQNMinimizer_f)) / (IOSDoubleArray_Get(newPt, EduStanfordNlpOptimizationQNMinimizer_a) - IOSDoubleArray_Get(bestPt, EduStanfordNlpOptimizationQNMinimizer_a)) + IOSDoubleArray_Get(bestPt, EduStanfordNlpOptimizationQNMinimizer_g))) / 2) * (IOSDoubleArray_Get(newPt, EduStanfordNlpOptimizationQNMinimizer_a) - IOSDoubleArray_Get(bestPt, EduStanfordNlpOptimizationQNMinimizer_a));
    if (JavaLangMath_absWithDouble_(stpc - IOSDoubleArray_Get(bestPt, EduStanfordNlpOptimizationQNMinimizer_a)) < JavaLangMath_absWithDouble_(stpq - IOSDoubleArray_Get(bestPt, EduStanfordNlpOptimizationQNMinimizer_a))) {
      stpf = stpc;
    }
    else {
      stpf = stpq;
    }
    self->bracketed_ = true;
    if (IOSDoubleArray_Get(newPt, EduStanfordNlpOptimizationQNMinimizer_a) < 0.1) {
      stpf = 0.01 * stpf;
    }
  }
  else if (signG < 0.0) {
    info = 2;
    bound = false;
    theta = 3 * (IOSDoubleArray_Get(bestPt, EduStanfordNlpOptimizationQNMinimizer_f) - IOSDoubleArray_Get(newPt, EduStanfordNlpOptimizationQNMinimizer_f)) / (IOSDoubleArray_Get(newPt, EduStanfordNlpOptimizationQNMinimizer_a) - IOSDoubleArray_Get(bestPt, EduStanfordNlpOptimizationQNMinimizer_a)) + IOSDoubleArray_Get(bestPt, EduStanfordNlpOptimizationQNMinimizer_g) + IOSDoubleArray_Get(newPt, EduStanfordNlpOptimizationQNMinimizer_g);
    s = JavaLangMath_maxWithDouble_withDouble_(JavaLangMath_maxWithDouble_withDouble_(theta, IOSDoubleArray_Get(bestPt, EduStanfordNlpOptimizationQNMinimizer_g)), IOSDoubleArray_Get(newPt, EduStanfordNlpOptimizationQNMinimizer_g));
    gamma = s * JavaLangMath_sqrtWithDouble_((theta / s) * (theta / s) - (IOSDoubleArray_Get(bestPt, EduStanfordNlpOptimizationQNMinimizer_g) / s) * (IOSDoubleArray_Get(newPt, EduStanfordNlpOptimizationQNMinimizer_g) / s));
    if (IOSDoubleArray_Get(newPt, EduStanfordNlpOptimizationQNMinimizer_a) > IOSDoubleArray_Get(bestPt, EduStanfordNlpOptimizationQNMinimizer_a)) {
      gamma = -gamma;
    }
    p = (gamma - IOSDoubleArray_Get(newPt, EduStanfordNlpOptimizationQNMinimizer_g)) + theta;
    q = ((gamma - IOSDoubleArray_Get(newPt, EduStanfordNlpOptimizationQNMinimizer_g)) + gamma) + IOSDoubleArray_Get(bestPt, EduStanfordNlpOptimizationQNMinimizer_g);
    r = p / q;
    stpc = IOSDoubleArray_Get(newPt, EduStanfordNlpOptimizationQNMinimizer_a) + r * (IOSDoubleArray_Get(bestPt, EduStanfordNlpOptimizationQNMinimizer_a) - IOSDoubleArray_Get(newPt, EduStanfordNlpOptimizationQNMinimizer_a));
    stpq = IOSDoubleArray_Get(newPt, EduStanfordNlpOptimizationQNMinimizer_a) + (IOSDoubleArray_Get(newPt, EduStanfordNlpOptimizationQNMinimizer_g) / (IOSDoubleArray_Get(newPt, EduStanfordNlpOptimizationQNMinimizer_g) - IOSDoubleArray_Get(bestPt, EduStanfordNlpOptimizationQNMinimizer_g))) * (IOSDoubleArray_Get(bestPt, EduStanfordNlpOptimizationQNMinimizer_a) - IOSDoubleArray_Get(newPt, EduStanfordNlpOptimizationQNMinimizer_a));
    if (JavaLangMath_absWithDouble_(stpc - IOSDoubleArray_Get(newPt, EduStanfordNlpOptimizationQNMinimizer_a)) > JavaLangMath_absWithDouble_(stpq - IOSDoubleArray_Get(newPt, EduStanfordNlpOptimizationQNMinimizer_a))) {
      stpf = stpc;
    }
    else {
      stpf = stpq;
    }
    self->bracketed_ = true;
  }
  else if (JavaLangMath_absWithDouble_(IOSDoubleArray_Get(newPt, EduStanfordNlpOptimizationQNMinimizer_g)) < JavaLangMath_absWithDouble_(IOSDoubleArray_Get(bestPt, EduStanfordNlpOptimizationQNMinimizer_g))) {
    info = 3;
    bound = true;
    theta = 3 * (IOSDoubleArray_Get(bestPt, EduStanfordNlpOptimizationQNMinimizer_f) - IOSDoubleArray_Get(newPt, EduStanfordNlpOptimizationQNMinimizer_f)) / (IOSDoubleArray_Get(newPt, EduStanfordNlpOptimizationQNMinimizer_a) - IOSDoubleArray_Get(bestPt, EduStanfordNlpOptimizationQNMinimizer_a)) + IOSDoubleArray_Get(bestPt, EduStanfordNlpOptimizationQNMinimizer_g) + IOSDoubleArray_Get(newPt, EduStanfordNlpOptimizationQNMinimizer_g);
    s = JavaLangMath_maxWithDouble_withDouble_(JavaLangMath_maxWithDouble_withDouble_(theta, IOSDoubleArray_Get(bestPt, EduStanfordNlpOptimizationQNMinimizer_g)), IOSDoubleArray_Get(newPt, EduStanfordNlpOptimizationQNMinimizer_g));
    gamma = s * JavaLangMath_sqrtWithDouble_(JavaLangMath_maxWithDouble_withDouble_(0.0, (theta / s) * (theta / s) - (IOSDoubleArray_Get(bestPt, EduStanfordNlpOptimizationQNMinimizer_g) / s) * (IOSDoubleArray_Get(newPt, EduStanfordNlpOptimizationQNMinimizer_g) / s)));
    if (IOSDoubleArray_Get(newPt, EduStanfordNlpOptimizationQNMinimizer_a) < IOSDoubleArray_Get(bestPt, EduStanfordNlpOptimizationQNMinimizer_a)) {
      gamma = -gamma;
    }
    p = (gamma - IOSDoubleArray_Get(bestPt, EduStanfordNlpOptimizationQNMinimizer_g)) + theta;
    q = ((gamma - IOSDoubleArray_Get(bestPt, EduStanfordNlpOptimizationQNMinimizer_g)) + gamma) + IOSDoubleArray_Get(newPt, EduStanfordNlpOptimizationQNMinimizer_g);
    r = p / q;
    if (r < 0.0 && gamma != 0.0) {
      stpc = IOSDoubleArray_Get(newPt, EduStanfordNlpOptimizationQNMinimizer_a) + r * (IOSDoubleArray_Get(bestPt, EduStanfordNlpOptimizationQNMinimizer_a) - IOSDoubleArray_Get(newPt, EduStanfordNlpOptimizationQNMinimizer_a));
    }
    else if (IOSDoubleArray_Get(newPt, EduStanfordNlpOptimizationQNMinimizer_a) > IOSDoubleArray_Get(bestPt, EduStanfordNlpOptimizationQNMinimizer_a)) {
      stpc = stpMax;
    }
    else {
      stpc = stpMin;
    }
    stpq = IOSDoubleArray_Get(newPt, EduStanfordNlpOptimizationQNMinimizer_a) + (IOSDoubleArray_Get(newPt, EduStanfordNlpOptimizationQNMinimizer_g) / (IOSDoubleArray_Get(newPt, EduStanfordNlpOptimizationQNMinimizer_g) - IOSDoubleArray_Get(bestPt, EduStanfordNlpOptimizationQNMinimizer_g))) * (IOSDoubleArray_Get(bestPt, EduStanfordNlpOptimizationQNMinimizer_a) - IOSDoubleArray_Get(newPt, EduStanfordNlpOptimizationQNMinimizer_a));
    if (self->bracketed_) {
      if (JavaLangMath_absWithDouble_(IOSDoubleArray_Get(newPt, EduStanfordNlpOptimizationQNMinimizer_a) - stpc) < JavaLangMath_absWithDouble_(IOSDoubleArray_Get(newPt, EduStanfordNlpOptimizationQNMinimizer_a) - stpq)) {
        stpf = stpc;
      }
      else {
        stpf = stpq;
      }
    }
    else {
      if (JavaLangMath_absWithDouble_(IOSDoubleArray_Get(newPt, EduStanfordNlpOptimizationQNMinimizer_a) - stpc) > JavaLangMath_absWithDouble_(IOSDoubleArray_Get(newPt, EduStanfordNlpOptimizationQNMinimizer_a) - stpq)) {
        stpf = stpc;
      }
      else {
        stpf = stpq;
      }
    }
  }
  else {
    info = 4;
    bound = false;
    if (self->bracketed_) {
      theta = 3 * (IOSDoubleArray_Get(bestPt, EduStanfordNlpOptimizationQNMinimizer_f) - IOSDoubleArray_Get(newPt, EduStanfordNlpOptimizationQNMinimizer_f)) / (IOSDoubleArray_Get(newPt, EduStanfordNlpOptimizationQNMinimizer_a) - IOSDoubleArray_Get(bestPt, EduStanfordNlpOptimizationQNMinimizer_a)) + IOSDoubleArray_Get(bestPt, EduStanfordNlpOptimizationQNMinimizer_g) + IOSDoubleArray_Get(newPt, EduStanfordNlpOptimizationQNMinimizer_g);
      s = JavaLangMath_maxWithDouble_withDouble_(JavaLangMath_maxWithDouble_withDouble_(theta, IOSDoubleArray_Get(bestPt, EduStanfordNlpOptimizationQNMinimizer_g)), IOSDoubleArray_Get(newPt, EduStanfordNlpOptimizationQNMinimizer_g));
      gamma = s * JavaLangMath_sqrtWithDouble_((theta / s) * (theta / s) - (IOSDoubleArray_Get(bestPt, EduStanfordNlpOptimizationQNMinimizer_g) / s) * (IOSDoubleArray_Get(newPt, EduStanfordNlpOptimizationQNMinimizer_g) / s));
      if (IOSDoubleArray_Get(newPt, EduStanfordNlpOptimizationQNMinimizer_a) > IOSDoubleArray_Get(bestPt, EduStanfordNlpOptimizationQNMinimizer_a)) {
        gamma = -gamma;
      }
      p = (gamma - IOSDoubleArray_Get(newPt, EduStanfordNlpOptimizationQNMinimizer_g)) + theta;
      q = ((gamma - IOSDoubleArray_Get(newPt, EduStanfordNlpOptimizationQNMinimizer_g)) + gamma) + IOSDoubleArray_Get(bestPt, EduStanfordNlpOptimizationQNMinimizer_g);
      r = p / q;
      stpc = IOSDoubleArray_Get(newPt, EduStanfordNlpOptimizationQNMinimizer_a) + r * (IOSDoubleArray_Get(bestPt, EduStanfordNlpOptimizationQNMinimizer_a) - IOSDoubleArray_Get(newPt, EduStanfordNlpOptimizationQNMinimizer_a));
      stpf = stpc;
    }
    else if (IOSDoubleArray_Get(newPt, EduStanfordNlpOptimizationQNMinimizer_a) > IOSDoubleArray_Get(bestPt, EduStanfordNlpOptimizationQNMinimizer_a)) {
      stpf = stpMax;
    }
    else {
      stpf = stpMin;
    }
  }
  if (IOSDoubleArray_Get(newPt, EduStanfordNlpOptimizationQNMinimizer_f) > IOSDoubleArray_Get(bestPt, EduStanfordNlpOptimizationQNMinimizer_f)) {
    EduStanfordNlpOptimizationQNMinimizer_copy__WithDoubleArray_withDoubleArray_(newPt, endPt);
  }
  else {
    if (signG < 0.0) {
      EduStanfordNlpOptimizationQNMinimizer_copy__WithDoubleArray_withDoubleArray_(bestPt, endPt);
    }
    EduStanfordNlpOptimizationQNMinimizer_copy__WithDoubleArray_withDoubleArray_(newPt, bestPt);
  }
  EduStanfordNlpOptimizationQNMinimizer_sayWithNSString_(self, NSString_valueOfInt_(info));
  stpf = JavaLangMath_minWithDouble_withDouble_(stpMax, stpf);
  stpf = JavaLangMath_maxWithDouble_withDouble_(stpMin, stpf);
  *IOSDoubleArray_GetRef(newPt, EduStanfordNlpOptimizationQNMinimizer_a) = stpf;
  if (self->bracketed_ && bound) {
    if (IOSDoubleArray_Get(nil_chk(endPt), EduStanfordNlpOptimizationQNMinimizer_a) > IOSDoubleArray_Get(bestPt, EduStanfordNlpOptimizationQNMinimizer_a)) {
      *IOSDoubleArray_GetRef(newPt, EduStanfordNlpOptimizationQNMinimizer_a) = JavaLangMath_minWithDouble_withDouble_(IOSDoubleArray_Get(bestPt, EduStanfordNlpOptimizationQNMinimizer_a) + EduStanfordNlpOptimizationQNMinimizer_p66 * (IOSDoubleArray_Get(endPt, EduStanfordNlpOptimizationQNMinimizer_a) - IOSDoubleArray_Get(bestPt, EduStanfordNlpOptimizationQNMinimizer_a)), IOSDoubleArray_Get(newPt, EduStanfordNlpOptimizationQNMinimizer_a));
    }
    else {
      *IOSDoubleArray_GetRef(newPt, EduStanfordNlpOptimizationQNMinimizer_a) = JavaLangMath_maxWithDouble_withDouble_(IOSDoubleArray_Get(bestPt, EduStanfordNlpOptimizationQNMinimizer_a) + EduStanfordNlpOptimizationQNMinimizer_p66 * (IOSDoubleArray_Get(endPt, EduStanfordNlpOptimizationQNMinimizer_a) - IOSDoubleArray_Get(bestPt, EduStanfordNlpOptimizationQNMinimizer_a)), IOSDoubleArray_Get(newPt, EduStanfordNlpOptimizationQNMinimizer_a));
    }
  }
  return info;
}

void EduStanfordNlpOptimizationQNMinimizer_copy__WithDoubleArray_withDoubleArray_(IOSDoubleArray *src, IOSDoubleArray *dest) {
  EduStanfordNlpOptimizationQNMinimizer_initialize();
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(src, 0, dest, 0, ((IOSDoubleArray *) nil_chk(src))->size_);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpOptimizationQNMinimizer)

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpOptimizationQNMinimizer_eState)

EduStanfordNlpOptimizationQNMinimizer_eState *EduStanfordNlpOptimizationQNMinimizer_eState_values_[7];

@implementation EduStanfordNlpOptimizationQNMinimizer_eState

+ (IOSObjectArray *)values {
  return EduStanfordNlpOptimizationQNMinimizer_eState_values();
}

+ (EduStanfordNlpOptimizationQNMinimizer_eState *)valueOfWithNSString:(NSString *)name {
  return EduStanfordNlpOptimizationQNMinimizer_eState_valueOfWithNSString_(name);
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LEduStanfordNlpOptimizationQNMinimizer_eState;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpOptimizationQNMinimizer_eState;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TERMINATE_MAXEVALS", "LEduStanfordNlpOptimizationQNMinimizer_eState;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "TERMINATE_RELATIVENORM", "LEduStanfordNlpOptimizationQNMinimizer_eState;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "TERMINATE_GRADNORM", "LEduStanfordNlpOptimizationQNMinimizer_eState;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "TERMINATE_AVERAGEIMPROVE", "LEduStanfordNlpOptimizationQNMinimizer_eState;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
    { "CONTINUE", "LEduStanfordNlpOptimizationQNMinimizer_eState;", .constantValue.asLong = 0, 0x4019, -1, 6, -1, -1 },
    { "TERMINATE_EVALIMPROVE", "LEduStanfordNlpOptimizationQNMinimizer_eState;", .constantValue.asLong = 0, 0x4019, -1, 7, -1, -1 },
    { "TERMINATE_MAXITR", "LEduStanfordNlpOptimizationQNMinimizer_eState;", .constantValue.asLong = 0, 0x4019, -1, 8, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(EduStanfordNlpOptimizationQNMinimizer_eState, TERMINATE_MAXEVALS), &JreEnum(EduStanfordNlpOptimizationQNMinimizer_eState, TERMINATE_RELATIVENORM), &JreEnum(EduStanfordNlpOptimizationQNMinimizer_eState, TERMINATE_GRADNORM), &JreEnum(EduStanfordNlpOptimizationQNMinimizer_eState, TERMINATE_AVERAGEIMPROVE), &JreEnum(EduStanfordNlpOptimizationQNMinimizer_eState, CONTINUE), &JreEnum(EduStanfordNlpOptimizationQNMinimizer_eState, TERMINATE_EVALIMPROVE), &JreEnum(EduStanfordNlpOptimizationQNMinimizer_eState, TERMINATE_MAXITR), "LEduStanfordNlpOptimizationQNMinimizer;", "Ljava/lang/Enum<Ledu/stanford/nlp/optimization/QNMinimizer$eState;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpOptimizationQNMinimizer_eState = { "eState", "edu.stanford.nlp.optimization", ptrTable, methods, fields, 7, 0x4019, 2, 7, 9, -1, -1, 10, -1 };
  return &_EduStanfordNlpOptimizationQNMinimizer_eState;
}

+ (void)initialize {
  if (self == [EduStanfordNlpOptimizationQNMinimizer_eState class]) {
    JreEnum(EduStanfordNlpOptimizationQNMinimizer_eState, TERMINATE_MAXEVALS) = new_EduStanfordNlpOptimizationQNMinimizer_eState_initWithNSString_withInt_(@"TERMINATE_MAXEVALS", 0);
    JreEnum(EduStanfordNlpOptimizationQNMinimizer_eState, TERMINATE_RELATIVENORM) = new_EduStanfordNlpOptimizationQNMinimizer_eState_initWithNSString_withInt_(@"TERMINATE_RELATIVENORM", 1);
    JreEnum(EduStanfordNlpOptimizationQNMinimizer_eState, TERMINATE_GRADNORM) = new_EduStanfordNlpOptimizationQNMinimizer_eState_initWithNSString_withInt_(@"TERMINATE_GRADNORM", 2);
    JreEnum(EduStanfordNlpOptimizationQNMinimizer_eState, TERMINATE_AVERAGEIMPROVE) = new_EduStanfordNlpOptimizationQNMinimizer_eState_initWithNSString_withInt_(@"TERMINATE_AVERAGEIMPROVE", 3);
    JreEnum(EduStanfordNlpOptimizationQNMinimizer_eState, CONTINUE) = new_EduStanfordNlpOptimizationQNMinimizer_eState_initWithNSString_withInt_(@"CONTINUE", 4);
    JreEnum(EduStanfordNlpOptimizationQNMinimizer_eState, TERMINATE_EVALIMPROVE) = new_EduStanfordNlpOptimizationQNMinimizer_eState_initWithNSString_withInt_(@"TERMINATE_EVALIMPROVE", 5);
    JreEnum(EduStanfordNlpOptimizationQNMinimizer_eState, TERMINATE_MAXITR) = new_EduStanfordNlpOptimizationQNMinimizer_eState_initWithNSString_withInt_(@"TERMINATE_MAXITR", 6);
    J2OBJC_SET_INITIALIZED(EduStanfordNlpOptimizationQNMinimizer_eState)
  }
}

@end

void EduStanfordNlpOptimizationQNMinimizer_eState_initWithNSString_withInt_(EduStanfordNlpOptimizationQNMinimizer_eState *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

EduStanfordNlpOptimizationQNMinimizer_eState *new_EduStanfordNlpOptimizationQNMinimizer_eState_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  J2OBJC_NEW_IMPL(EduStanfordNlpOptimizationQNMinimizer_eState, initWithNSString_withInt_, __name, __ordinal)
}

IOSObjectArray *EduStanfordNlpOptimizationQNMinimizer_eState_values() {
  EduStanfordNlpOptimizationQNMinimizer_eState_initialize();
  return [IOSObjectArray arrayWithObjects:EduStanfordNlpOptimizationQNMinimizer_eState_values_ count:7 type:EduStanfordNlpOptimizationQNMinimizer_eState_class_()];
}

EduStanfordNlpOptimizationQNMinimizer_eState *EduStanfordNlpOptimizationQNMinimizer_eState_valueOfWithNSString_(NSString *name) {
  EduStanfordNlpOptimizationQNMinimizer_eState_initialize();
  for (int i = 0; i < 7; i++) {
    EduStanfordNlpOptimizationQNMinimizer_eState *e = EduStanfordNlpOptimizationQNMinimizer_eState_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

EduStanfordNlpOptimizationQNMinimizer_eState *EduStanfordNlpOptimizationQNMinimizer_eState_fromOrdinal(NSUInteger ordinal) {
  EduStanfordNlpOptimizationQNMinimizer_eState_initialize();
  if (ordinal >= 7) {
    return nil;
  }
  return EduStanfordNlpOptimizationQNMinimizer_eState_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpOptimizationQNMinimizer_eState)

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpOptimizationQNMinimizer_eLineSearch)

EduStanfordNlpOptimizationQNMinimizer_eLineSearch *EduStanfordNlpOptimizationQNMinimizer_eLineSearch_values_[2];

@implementation EduStanfordNlpOptimizationQNMinimizer_eLineSearch

+ (IOSObjectArray *)values {
  return EduStanfordNlpOptimizationQNMinimizer_eLineSearch_values();
}

+ (EduStanfordNlpOptimizationQNMinimizer_eLineSearch *)valueOfWithNSString:(NSString *)name {
  return EduStanfordNlpOptimizationQNMinimizer_eLineSearch_valueOfWithNSString_(name);
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LEduStanfordNlpOptimizationQNMinimizer_eLineSearch;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpOptimizationQNMinimizer_eLineSearch;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "BACKTRACK", "LEduStanfordNlpOptimizationQNMinimizer_eLineSearch;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "MINPACK", "LEduStanfordNlpOptimizationQNMinimizer_eLineSearch;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(EduStanfordNlpOptimizationQNMinimizer_eLineSearch, BACKTRACK), &JreEnum(EduStanfordNlpOptimizationQNMinimizer_eLineSearch, MINPACK), "LEduStanfordNlpOptimizationQNMinimizer;", "Ljava/lang/Enum<Ledu/stanford/nlp/optimization/QNMinimizer$eLineSearch;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpOptimizationQNMinimizer_eLineSearch = { "eLineSearch", "edu.stanford.nlp.optimization", ptrTable, methods, fields, 7, 0x4019, 2, 2, 4, -1, -1, 5, -1 };
  return &_EduStanfordNlpOptimizationQNMinimizer_eLineSearch;
}

+ (void)initialize {
  if (self == [EduStanfordNlpOptimizationQNMinimizer_eLineSearch class]) {
    JreEnum(EduStanfordNlpOptimizationQNMinimizer_eLineSearch, BACKTRACK) = new_EduStanfordNlpOptimizationQNMinimizer_eLineSearch_initWithNSString_withInt_(@"BACKTRACK", 0);
    JreEnum(EduStanfordNlpOptimizationQNMinimizer_eLineSearch, MINPACK) = new_EduStanfordNlpOptimizationQNMinimizer_eLineSearch_initWithNSString_withInt_(@"MINPACK", 1);
    J2OBJC_SET_INITIALIZED(EduStanfordNlpOptimizationQNMinimizer_eLineSearch)
  }
}

@end

void EduStanfordNlpOptimizationQNMinimizer_eLineSearch_initWithNSString_withInt_(EduStanfordNlpOptimizationQNMinimizer_eLineSearch *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

EduStanfordNlpOptimizationQNMinimizer_eLineSearch *new_EduStanfordNlpOptimizationQNMinimizer_eLineSearch_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  J2OBJC_NEW_IMPL(EduStanfordNlpOptimizationQNMinimizer_eLineSearch, initWithNSString_withInt_, __name, __ordinal)
}

IOSObjectArray *EduStanfordNlpOptimizationQNMinimizer_eLineSearch_values() {
  EduStanfordNlpOptimizationQNMinimizer_eLineSearch_initialize();
  return [IOSObjectArray arrayWithObjects:EduStanfordNlpOptimizationQNMinimizer_eLineSearch_values_ count:2 type:EduStanfordNlpOptimizationQNMinimizer_eLineSearch_class_()];
}

EduStanfordNlpOptimizationQNMinimizer_eLineSearch *EduStanfordNlpOptimizationQNMinimizer_eLineSearch_valueOfWithNSString_(NSString *name) {
  EduStanfordNlpOptimizationQNMinimizer_eLineSearch_initialize();
  for (int i = 0; i < 2; i++) {
    EduStanfordNlpOptimizationQNMinimizer_eLineSearch *e = EduStanfordNlpOptimizationQNMinimizer_eLineSearch_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

EduStanfordNlpOptimizationQNMinimizer_eLineSearch *EduStanfordNlpOptimizationQNMinimizer_eLineSearch_fromOrdinal(NSUInteger ordinal) {
  EduStanfordNlpOptimizationQNMinimizer_eLineSearch_initialize();
  if (ordinal >= 2) {
    return nil;
  }
  return EduStanfordNlpOptimizationQNMinimizer_eLineSearch_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpOptimizationQNMinimizer_eLineSearch)

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpOptimizationQNMinimizer_eScaling)

EduStanfordNlpOptimizationQNMinimizer_eScaling *EduStanfordNlpOptimizationQNMinimizer_eScaling_values_[2];

@implementation EduStanfordNlpOptimizationQNMinimizer_eScaling

+ (IOSObjectArray *)values {
  return EduStanfordNlpOptimizationQNMinimizer_eScaling_values();
}

+ (EduStanfordNlpOptimizationQNMinimizer_eScaling *)valueOfWithNSString:(NSString *)name {
  return EduStanfordNlpOptimizationQNMinimizer_eScaling_valueOfWithNSString_(name);
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LEduStanfordNlpOptimizationQNMinimizer_eScaling;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpOptimizationQNMinimizer_eScaling;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DIAGONAL", "LEduStanfordNlpOptimizationQNMinimizer_eScaling;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "SCALAR", "LEduStanfordNlpOptimizationQNMinimizer_eScaling;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(EduStanfordNlpOptimizationQNMinimizer_eScaling, DIAGONAL), &JreEnum(EduStanfordNlpOptimizationQNMinimizer_eScaling, SCALAR), "LEduStanfordNlpOptimizationQNMinimizer;", "Ljava/lang/Enum<Ledu/stanford/nlp/optimization/QNMinimizer$eScaling;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpOptimizationQNMinimizer_eScaling = { "eScaling", "edu.stanford.nlp.optimization", ptrTable, methods, fields, 7, 0x4019, 2, 2, 4, -1, -1, 5, -1 };
  return &_EduStanfordNlpOptimizationQNMinimizer_eScaling;
}

+ (void)initialize {
  if (self == [EduStanfordNlpOptimizationQNMinimizer_eScaling class]) {
    JreEnum(EduStanfordNlpOptimizationQNMinimizer_eScaling, DIAGONAL) = new_EduStanfordNlpOptimizationQNMinimizer_eScaling_initWithNSString_withInt_(@"DIAGONAL", 0);
    JreEnum(EduStanfordNlpOptimizationQNMinimizer_eScaling, SCALAR) = new_EduStanfordNlpOptimizationQNMinimizer_eScaling_initWithNSString_withInt_(@"SCALAR", 1);
    J2OBJC_SET_INITIALIZED(EduStanfordNlpOptimizationQNMinimizer_eScaling)
  }
}

@end

void EduStanfordNlpOptimizationQNMinimizer_eScaling_initWithNSString_withInt_(EduStanfordNlpOptimizationQNMinimizer_eScaling *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

EduStanfordNlpOptimizationQNMinimizer_eScaling *new_EduStanfordNlpOptimizationQNMinimizer_eScaling_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  J2OBJC_NEW_IMPL(EduStanfordNlpOptimizationQNMinimizer_eScaling, initWithNSString_withInt_, __name, __ordinal)
}

IOSObjectArray *EduStanfordNlpOptimizationQNMinimizer_eScaling_values() {
  EduStanfordNlpOptimizationQNMinimizer_eScaling_initialize();
  return [IOSObjectArray arrayWithObjects:EduStanfordNlpOptimizationQNMinimizer_eScaling_values_ count:2 type:EduStanfordNlpOptimizationQNMinimizer_eScaling_class_()];
}

EduStanfordNlpOptimizationQNMinimizer_eScaling *EduStanfordNlpOptimizationQNMinimizer_eScaling_valueOfWithNSString_(NSString *name) {
  EduStanfordNlpOptimizationQNMinimizer_eScaling_initialize();
  for (int i = 0; i < 2; i++) {
    EduStanfordNlpOptimizationQNMinimizer_eScaling *e = EduStanfordNlpOptimizationQNMinimizer_eScaling_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

EduStanfordNlpOptimizationQNMinimizer_eScaling *EduStanfordNlpOptimizationQNMinimizer_eScaling_fromOrdinal(NSUInteger ordinal) {
  EduStanfordNlpOptimizationQNMinimizer_eScaling_initialize();
  if (ordinal >= 2) {
    return nil;
  }
  return EduStanfordNlpOptimizationQNMinimizer_eScaling_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpOptimizationQNMinimizer_eScaling)

@implementation EduStanfordNlpOptimizationQNMinimizer_SurpriseConvergence

- (instancetype)initWithNSString:(NSString *)s {
  EduStanfordNlpOptimizationQNMinimizer_SurpriseConvergence_initWithNSString_(self, s);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpOptimizationQNMinimizer_SurpriseConvergence_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "LEduStanfordNlpOptimizationQNMinimizer;" };
  static const J2ObjcClassInfo _EduStanfordNlpOptimizationQNMinimizer_SurpriseConvergence = { "SurpriseConvergence", "edu.stanford.nlp.optimization", ptrTable, methods, fields, 7, 0x9, 1, 1, 1, -1, -1, -1, -1 };
  return &_EduStanfordNlpOptimizationQNMinimizer_SurpriseConvergence;
}

@end

void EduStanfordNlpOptimizationQNMinimizer_SurpriseConvergence_initWithNSString_(EduStanfordNlpOptimizationQNMinimizer_SurpriseConvergence *self, NSString *s) {
  NSException_initWithNSString_(self, s);
}

EduStanfordNlpOptimizationQNMinimizer_SurpriseConvergence *new_EduStanfordNlpOptimizationQNMinimizer_SurpriseConvergence_initWithNSString_(NSString *s) {
  J2OBJC_NEW_IMPL(EduStanfordNlpOptimizationQNMinimizer_SurpriseConvergence, initWithNSString_, s)
}

EduStanfordNlpOptimizationQNMinimizer_SurpriseConvergence *create_EduStanfordNlpOptimizationQNMinimizer_SurpriseConvergence_initWithNSString_(NSString *s) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpOptimizationQNMinimizer_SurpriseConvergence, initWithNSString_, s)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpOptimizationQNMinimizer_SurpriseConvergence)

@implementation EduStanfordNlpOptimizationQNMinimizer_MaxEvaluationsExceeded

- (instancetype)initWithNSString:(NSString *)s {
  EduStanfordNlpOptimizationQNMinimizer_MaxEvaluationsExceeded_initWithNSString_(self, s);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpOptimizationQNMinimizer_MaxEvaluationsExceeded_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "LEduStanfordNlpOptimizationQNMinimizer;" };
  static const J2ObjcClassInfo _EduStanfordNlpOptimizationQNMinimizer_MaxEvaluationsExceeded = { "MaxEvaluationsExceeded", "edu.stanford.nlp.optimization", ptrTable, methods, fields, 7, 0xa, 1, 1, 1, -1, -1, -1, -1 };
  return &_EduStanfordNlpOptimizationQNMinimizer_MaxEvaluationsExceeded;
}

@end

void EduStanfordNlpOptimizationQNMinimizer_MaxEvaluationsExceeded_initWithNSString_(EduStanfordNlpOptimizationQNMinimizer_MaxEvaluationsExceeded *self, NSString *s) {
  NSException_initWithNSString_(self, s);
}

EduStanfordNlpOptimizationQNMinimizer_MaxEvaluationsExceeded *new_EduStanfordNlpOptimizationQNMinimizer_MaxEvaluationsExceeded_initWithNSString_(NSString *s) {
  J2OBJC_NEW_IMPL(EduStanfordNlpOptimizationQNMinimizer_MaxEvaluationsExceeded, initWithNSString_, s)
}

EduStanfordNlpOptimizationQNMinimizer_MaxEvaluationsExceeded *create_EduStanfordNlpOptimizationQNMinimizer_MaxEvaluationsExceeded_initWithNSString_(NSString *s) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpOptimizationQNMinimizer_MaxEvaluationsExceeded, initWithNSString_, s)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpOptimizationQNMinimizer_MaxEvaluationsExceeded)

@implementation EduStanfordNlpOptimizationQNMinimizer_Record

- (instancetype)initWithEduStanfordNlpOptimizationQNMinimizer:(EduStanfordNlpOptimizationQNMinimizer *)outer$
                                                  withBoolean:(jboolean)beQuiet
                       withEduStanfordNlpOptimizationFunction:(id<EduStanfordNlpOptimizationFunction>)monitor
                                                   withDouble:(jdouble)tolerance {
  EduStanfordNlpOptimizationQNMinimizer_Record_initWithEduStanfordNlpOptimizationQNMinimizer_withBoolean_withEduStanfordNlpOptimizationFunction_withDouble_(self, outer$, beQuiet, monitor, tolerance);
  return self;
}

- (instancetype)initWithEduStanfordNlpOptimizationQNMinimizer:(EduStanfordNlpOptimizationQNMinimizer *)outer$
                                                  withBoolean:(jboolean)beQuiet
                       withEduStanfordNlpOptimizationFunction:(id<EduStanfordNlpOptimizationFunction>)monitor
                                                   withDouble:(jdouble)tolerance
                                        withJavaIoPrintWriter:(JavaIoPrintWriter *)output {
  EduStanfordNlpOptimizationQNMinimizer_Record_initWithEduStanfordNlpOptimizationQNMinimizer_withBoolean_withEduStanfordNlpOptimizationFunction_withDouble_withJavaIoPrintWriter_(self, outer$, beQuiet, monitor, tolerance, output);
  return self;
}

- (instancetype)initWithEduStanfordNlpOptimizationQNMinimizer:(EduStanfordNlpOptimizationQNMinimizer *)outer$
                                                  withBoolean:(jboolean)beQuiet
                       withEduStanfordNlpOptimizationFunction:(id<EduStanfordNlpOptimizationFunction>)monitor
                                                   withDouble:(jdouble)tolerance
                                                   withDouble:(jdouble)eps {
  EduStanfordNlpOptimizationQNMinimizer_Record_initWithEduStanfordNlpOptimizationQNMinimizer_withBoolean_withEduStanfordNlpOptimizationFunction_withDouble_withDouble_(self, outer$, beQuiet, monitor, tolerance, eps);
  return self;
}

- (void)setEPSWithDouble:(jdouble)eps {
  EPS_ = eps;
}

- (void)setTOLWithDouble:(jdouble)tolerance {
  TOL_ = tolerance;
}

- (void)startWithDouble:(jdouble)val
        withDoubleArray:(IOSDoubleArray *)grad {
  [self startWithDouble:val withDoubleArray:grad withDoubleArray:nil];
}

- (void)shutUp {
  self->quiet_ = true;
}

- (void)startWithDouble:(jdouble)val
        withDoubleArray:(IOSDoubleArray *)grad
        withDoubleArray:(IOSDoubleArray *)x {
  startTime_ = JavaLangSystem_currentTimeMillis();
  gNormInit_ = EduStanfordNlpMathArrayMath_normWithDoubleArray_(grad);
  xLast_ = x;
  EduStanfordNlpOptimizationQNMinimizer_Record_writeToFileWithDouble_withDouble_withDouble_withDouble_(self, 1, val, gNormInit_, 0.0);
  if (x != nil) {
    [self monitorXWithDoubleArray:x];
  }
}

- (void)writeToFileWithDouble:(jdouble)fevals
                   withDouble:(jdouble)val
                   withDouble:(jdouble)gNorm
                   withDouble:(jdouble)time {
  EduStanfordNlpOptimizationQNMinimizer_Record_writeToFileWithDouble_withDouble_withDouble_withDouble_(self, fevals, val, gNorm, time);
}

- (void)addWithDouble:(jdouble)val
      withDoubleArray:(IOSDoubleArray *)grad
      withDoubleArray:(IOSDoubleArray *)x
              withInt:(jint)fevals
           withDouble:(jdouble)evalScore {
  if (!memoryConscious_) {
    if ([((id<JavaUtilList>) nil_chk(gNorms_)) size] > maxSize_) {
      (void) [((id<JavaUtilList>) nil_chk(gNorms_)) removeWithInt:0];
    }
    if ([((id<JavaUtilList>) nil_chk(time_)) size] > maxSize_) {
      (void) [time_ removeWithInt:0];
    }
    if ([((id<JavaUtilList>) nil_chk(funcEvals_)) size] > maxSize_) {
      (void) [funcEvals_ removeWithInt:0];
    }
    [((id<JavaUtilList>) nil_chk(gNorms_)) addWithId:JavaLangDouble_valueOfWithDouble_(gNormLast_)];
    [time_ addWithId:JavaLangDouble_valueOfWithDouble_([self howLong])];
    [funcEvals_ addWithId:JavaLangInteger_valueOfWithInt_(fevals)];
  }
  else {
    maxSize_ = 10;
  }
  gNormLast_ = EduStanfordNlpMathArrayMath_normWithDoubleArray_(grad);
  if ([((id<JavaUtilList>) nil_chk(values_)) size] > maxSize_) {
    (void) [values_ removeWithInt:0];
  }
  [values_ addWithId:JavaLangDouble_valueOfWithDouble_(val)];
  if (evalScore != JavaLangDouble_NEGATIVE_INFINITY) [((id<JavaUtilList>) nil_chk(evals_)) addWithId:JavaLangDouble_valueOfWithDouble_(evalScore)];
  EduStanfordNlpOptimizationQNMinimizer_Record_writeToFileWithDouble_withDouble_withDouble_withDouble_(self, fevals, val, gNormLast_, [self howLong]);
  EduStanfordNlpOptimizationQNMinimizer_sayWithNSString_(this$0_, JreStrcat("$C$C", [((JavaTextNumberFormat *) nil_chk(JreLoadStatic(EduStanfordNlpOptimizationQNMinimizer, nf))) formatWithDouble:val], ' ', [((JavaTextNumberFormat *) nil_chk(JreLoadStatic(EduStanfordNlpOptimizationQNMinimizer, nfsec))) formatWithDouble:[self howLong]], 's'));
  xLast_ = x;
  [self monitorXWithDoubleArray:x];
}

- (void)monitorXWithDoubleArray:(IOSDoubleArray *)x {
  if (self->mon_ != nil) {
    [self->mon_ valueAtWithDoubleArray:x];
  }
}

- (EduStanfordNlpOptimizationQNMinimizer_eState *)toContinue {
  jdouble relNorm = gNormLast_ / gNormInit_;
  jint size = [((id<JavaUtilList>) nil_chk(values_)) size];
  jdouble newestVal = [((JavaLangDouble *) nil_chk([values_ getWithInt:size - 1])) doubleValue];
  jdouble previousVal = [(size >= 10 ? [values_ getWithInt:size - 10] : [values_ getWithInt:0]) doubleValue];
  jdouble averageImprovement = (previousVal - newestVal) / (size >= 10 ? 10 : size);
  jint evalsSize = [((id<JavaUtilList>) nil_chk(evals_)) size];
  if (this$0_->useMaxItr_ && this$0_->its_ >= this$0_->maxItr_) return JreLoadEnum(EduStanfordNlpOptimizationQNMinimizer_eState, TERMINATE_MAXITR);
  if (this$0_->useEvalImprovement_) {
    jint bestInd = -1;
    jdouble bestScore = JavaLangDouble_NEGATIVE_INFINITY;
    for (jint i = 0; i < evalsSize; i++) {
      if ([((JavaLangDouble *) nil_chk([evals_ getWithInt:i])) doubleValue] >= bestScore) {
        bestScore = [((JavaLangDouble *) nil_chk([evals_ getWithInt:i])) doubleValue];
        bestInd = i;
      }
    }
    if (bestInd == evalsSize - 1) {
      if (xBest_ == nil) xBest_ = JavaUtilArrays_copyOfWithDoubleArray_withInt_(xLast_, ((IOSDoubleArray *) nil_chk(xLast_))->size_);
      else JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(xLast_, 0, xBest_, 0, ((IOSDoubleArray *) nil_chk(xLast_))->size_);
    }
    if ((evalsSize - bestInd) >= this$0_->terminateOnEvalImprovementNumOfEpoch_) return JreLoadEnum(EduStanfordNlpOptimizationQNMinimizer_eState, TERMINATE_EVALIMPROVE);
  }
  if (this$0_->useAveImprovement_ && (size > 5 && JavaLangMath_absWithDouble_(averageImprovement / newestVal) < TOL_)) {
    return JreLoadEnum(EduStanfordNlpOptimizationQNMinimizer_eState, TERMINATE_AVERAGEIMPROVE);
  }
  if (this$0_->useRelativeNorm_ && relNorm <= relativeTOL_) {
    return JreLoadEnum(EduStanfordNlpOptimizationQNMinimizer_eState, TERMINATE_RELATIVENORM);
  }
  if (this$0_->useNumericalZero_) {
    if (gNormLast_ < EPS_ * JavaLangMath_maxWithDouble_withDouble_(1.0, EduStanfordNlpMathArrayMath_norm_1WithDoubleArray_(xLast_))) {
      if (gNormLast_ < EPS_ * JavaLangMath_maxWithDouble_withDouble_(1.0, EduStanfordNlpMathArrayMath_normWithDoubleArray_(xLast_))) {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"Gradient is numerically zero, stopped on machine epsilon."];
        return JreLoadEnum(EduStanfordNlpOptimizationQNMinimizer_eState, TERMINATE_GRADNORM);
      }
    }
  }
  EduStanfordNlpOptimizationQNMinimizer_sayWithNSString_(this$0_, JreStrcat("$$$$$$C$C", @" |", [((JavaTextNumberFormat *) nil_chk(JreLoadStatic(EduStanfordNlpOptimizationQNMinimizer, nf))) formatWithDouble:gNormLast_], @"| {", [JreLoadStatic(EduStanfordNlpOptimizationQNMinimizer, nf) formatWithDouble:relNorm], @"} ", [JreLoadStatic(EduStanfordNlpOptimizationQNMinimizer, nf) formatWithDouble:JavaLangMath_absWithDouble_(averageImprovement / newestVal)], ' ', (evalsSize > 0 ? [((JavaLangDouble *) nil_chk([evals_ getWithInt:evalsSize - 1])) description] : @"-"), ' '));
  return JreLoadEnum(EduStanfordNlpOptimizationQNMinimizer_eState, CONTINUE);
}

- (jdouble)howLong {
  return ((JavaLangSystem_currentTimeMillis() - startTime_)) / 1000.0;
}

- (IOSDoubleArray *)getBest {
  return xBest_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpOptimizationQNMinimizer_eState;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[D", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpOptimizationQNMinimizer:withBoolean:withEduStanfordNlpOptimizationFunction:withDouble:);
  methods[1].selector = @selector(initWithEduStanfordNlpOptimizationQNMinimizer:withBoolean:withEduStanfordNlpOptimizationFunction:withDouble:withJavaIoPrintWriter:);
  methods[2].selector = @selector(initWithEduStanfordNlpOptimizationQNMinimizer:withBoolean:withEduStanfordNlpOptimizationFunction:withDouble:withDouble:);
  methods[3].selector = @selector(setEPSWithDouble:);
  methods[4].selector = @selector(setTOLWithDouble:);
  methods[5].selector = @selector(startWithDouble:withDoubleArray:);
  methods[6].selector = @selector(shutUp);
  methods[7].selector = @selector(startWithDouble:withDoubleArray:withDoubleArray:);
  methods[8].selector = @selector(writeToFileWithDouble:withDouble:withDouble:withDouble:);
  methods[9].selector = @selector(addWithDouble:withDoubleArray:withDoubleArray:withInt:withDouble:);
  methods[10].selector = @selector(monitorXWithDoubleArray:);
  methods[11].selector = @selector(toContinue);
  methods[12].selector = @selector(howLong);
  methods[13].selector = @selector(getBest);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LEduStanfordNlpOptimizationQNMinimizer;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "evals_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 15, -1 },
    { "values_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 15, -1 },
    { "gNorms_", "LJavaUtilList;", .constantValue.asLong = 0, 0x0, -1, -1, 15, -1 },
    { "funcEvals_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 16, -1 },
    { "time_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 15, -1 },
    { "gNormInit_", "D", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "relativeTOL_", "D", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "TOL_", "D", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "EPS_", "D", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "startTime_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "gNormLast_", "D", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "xLast_", "[D", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "maxSize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mon_", "LEduStanfordNlpOptimizationFunction;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "quiet_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "memoryConscious_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "outputFile_", "LJavaIoPrintWriter;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "xBest_", "[D", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpOptimizationQNMinimizer;ZLEduStanfordNlpOptimizationFunction;D", "LEduStanfordNlpOptimizationQNMinimizer;ZLEduStanfordNlpOptimizationFunction;DLJavaIoPrintWriter;", "LEduStanfordNlpOptimizationQNMinimizer;ZLEduStanfordNlpOptimizationFunction;DD", "setEPS", "D", "setTOL", "start", "D[D", "D[D[D", "writeToFile", "DDDD", "add", "D[D[DID", "monitorX", "[D", "Ljava/util/List<Ljava/lang/Double;>;", "Ljava/util/List<Ljava/lang/Integer;>;", "LEduStanfordNlpOptimizationQNMinimizer;" };
  static const J2ObjcClassInfo _EduStanfordNlpOptimizationQNMinimizer_Record = { "Record", "edu.stanford.nlp.optimization", ptrTable, methods, fields, 7, 0x1, 14, 19, 17, -1, -1, -1, -1 };
  return &_EduStanfordNlpOptimizationQNMinimizer_Record;
}

@end

void EduStanfordNlpOptimizationQNMinimizer_Record_initWithEduStanfordNlpOptimizationQNMinimizer_withBoolean_withEduStanfordNlpOptimizationFunction_withDouble_(EduStanfordNlpOptimizationQNMinimizer_Record *self, EduStanfordNlpOptimizationQNMinimizer *outer$, jboolean beQuiet, id<EduStanfordNlpOptimizationFunction> monitor, jdouble tolerance) {
  self->this$0_ = outer$;
  NSObject_init(self);
  self->evals_ = new_JavaUtilArrayList_init();
  self->values_ = new_JavaUtilArrayList_init();
  self->gNorms_ = new_JavaUtilArrayList_init();
  self->funcEvals_ = new_JavaUtilArrayList_init();
  self->time_ = new_JavaUtilArrayList_init();
  self->gNormInit_ = JavaLangDouble_MIN_VALUE;
  self->relativeTOL_ = 1e-8;
  self->TOL_ = 1e-6;
  self->EPS_ = 1e-6;
  self->maxSize_ = 100;
  self->mon_ = nil;
  self->quiet_ = false;
  self->memoryConscious_ = true;
  self->outputFile_ = nil;
  self->quiet_ = beQuiet;
  self->mon_ = monitor;
  self->TOL_ = tolerance;
}

EduStanfordNlpOptimizationQNMinimizer_Record *new_EduStanfordNlpOptimizationQNMinimizer_Record_initWithEduStanfordNlpOptimizationQNMinimizer_withBoolean_withEduStanfordNlpOptimizationFunction_withDouble_(EduStanfordNlpOptimizationQNMinimizer *outer$, jboolean beQuiet, id<EduStanfordNlpOptimizationFunction> monitor, jdouble tolerance) {
  J2OBJC_NEW_IMPL(EduStanfordNlpOptimizationQNMinimizer_Record, initWithEduStanfordNlpOptimizationQNMinimizer_withBoolean_withEduStanfordNlpOptimizationFunction_withDouble_, outer$, beQuiet, monitor, tolerance)
}

EduStanfordNlpOptimizationQNMinimizer_Record *create_EduStanfordNlpOptimizationQNMinimizer_Record_initWithEduStanfordNlpOptimizationQNMinimizer_withBoolean_withEduStanfordNlpOptimizationFunction_withDouble_(EduStanfordNlpOptimizationQNMinimizer *outer$, jboolean beQuiet, id<EduStanfordNlpOptimizationFunction> monitor, jdouble tolerance) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpOptimizationQNMinimizer_Record, initWithEduStanfordNlpOptimizationQNMinimizer_withBoolean_withEduStanfordNlpOptimizationFunction_withDouble_, outer$, beQuiet, monitor, tolerance)
}

void EduStanfordNlpOptimizationQNMinimizer_Record_initWithEduStanfordNlpOptimizationQNMinimizer_withBoolean_withEduStanfordNlpOptimizationFunction_withDouble_withJavaIoPrintWriter_(EduStanfordNlpOptimizationQNMinimizer_Record *self, EduStanfordNlpOptimizationQNMinimizer *outer$, jboolean beQuiet, id<EduStanfordNlpOptimizationFunction> monitor, jdouble tolerance, JavaIoPrintWriter *output) {
  self->this$0_ = outer$;
  NSObject_init(self);
  self->evals_ = new_JavaUtilArrayList_init();
  self->values_ = new_JavaUtilArrayList_init();
  self->gNorms_ = new_JavaUtilArrayList_init();
  self->funcEvals_ = new_JavaUtilArrayList_init();
  self->time_ = new_JavaUtilArrayList_init();
  self->gNormInit_ = JavaLangDouble_MIN_VALUE;
  self->relativeTOL_ = 1e-8;
  self->TOL_ = 1e-6;
  self->EPS_ = 1e-6;
  self->maxSize_ = 100;
  self->mon_ = nil;
  self->quiet_ = false;
  self->memoryConscious_ = true;
  self->outputFile_ = nil;
  self->quiet_ = beQuiet;
  self->mon_ = monitor;
  self->TOL_ = tolerance;
  self->outputFile_ = output;
}

EduStanfordNlpOptimizationQNMinimizer_Record *new_EduStanfordNlpOptimizationQNMinimizer_Record_initWithEduStanfordNlpOptimizationQNMinimizer_withBoolean_withEduStanfordNlpOptimizationFunction_withDouble_withJavaIoPrintWriter_(EduStanfordNlpOptimizationQNMinimizer *outer$, jboolean beQuiet, id<EduStanfordNlpOptimizationFunction> monitor, jdouble tolerance, JavaIoPrintWriter *output) {
  J2OBJC_NEW_IMPL(EduStanfordNlpOptimizationQNMinimizer_Record, initWithEduStanfordNlpOptimizationQNMinimizer_withBoolean_withEduStanfordNlpOptimizationFunction_withDouble_withJavaIoPrintWriter_, outer$, beQuiet, monitor, tolerance, output)
}

EduStanfordNlpOptimizationQNMinimizer_Record *create_EduStanfordNlpOptimizationQNMinimizer_Record_initWithEduStanfordNlpOptimizationQNMinimizer_withBoolean_withEduStanfordNlpOptimizationFunction_withDouble_withJavaIoPrintWriter_(EduStanfordNlpOptimizationQNMinimizer *outer$, jboolean beQuiet, id<EduStanfordNlpOptimizationFunction> monitor, jdouble tolerance, JavaIoPrintWriter *output) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpOptimizationQNMinimizer_Record, initWithEduStanfordNlpOptimizationQNMinimizer_withBoolean_withEduStanfordNlpOptimizationFunction_withDouble_withJavaIoPrintWriter_, outer$, beQuiet, monitor, tolerance, output)
}

void EduStanfordNlpOptimizationQNMinimizer_Record_initWithEduStanfordNlpOptimizationQNMinimizer_withBoolean_withEduStanfordNlpOptimizationFunction_withDouble_withDouble_(EduStanfordNlpOptimizationQNMinimizer_Record *self, EduStanfordNlpOptimizationQNMinimizer *outer$, jboolean beQuiet, id<EduStanfordNlpOptimizationFunction> monitor, jdouble tolerance, jdouble eps) {
  self->this$0_ = outer$;
  NSObject_init(self);
  self->evals_ = new_JavaUtilArrayList_init();
  self->values_ = new_JavaUtilArrayList_init();
  self->gNorms_ = new_JavaUtilArrayList_init();
  self->funcEvals_ = new_JavaUtilArrayList_init();
  self->time_ = new_JavaUtilArrayList_init();
  self->gNormInit_ = JavaLangDouble_MIN_VALUE;
  self->relativeTOL_ = 1e-8;
  self->TOL_ = 1e-6;
  self->EPS_ = 1e-6;
  self->maxSize_ = 100;
  self->mon_ = nil;
  self->quiet_ = false;
  self->memoryConscious_ = true;
  self->outputFile_ = nil;
  self->quiet_ = beQuiet;
  self->mon_ = monitor;
  self->TOL_ = tolerance;
  self->EPS_ = eps;
}

EduStanfordNlpOptimizationQNMinimizer_Record *new_EduStanfordNlpOptimizationQNMinimizer_Record_initWithEduStanfordNlpOptimizationQNMinimizer_withBoolean_withEduStanfordNlpOptimizationFunction_withDouble_withDouble_(EduStanfordNlpOptimizationQNMinimizer *outer$, jboolean beQuiet, id<EduStanfordNlpOptimizationFunction> monitor, jdouble tolerance, jdouble eps) {
  J2OBJC_NEW_IMPL(EduStanfordNlpOptimizationQNMinimizer_Record, initWithEduStanfordNlpOptimizationQNMinimizer_withBoolean_withEduStanfordNlpOptimizationFunction_withDouble_withDouble_, outer$, beQuiet, monitor, tolerance, eps)
}

EduStanfordNlpOptimizationQNMinimizer_Record *create_EduStanfordNlpOptimizationQNMinimizer_Record_initWithEduStanfordNlpOptimizationQNMinimizer_withBoolean_withEduStanfordNlpOptimizationFunction_withDouble_withDouble_(EduStanfordNlpOptimizationQNMinimizer *outer$, jboolean beQuiet, id<EduStanfordNlpOptimizationFunction> monitor, jdouble tolerance, jdouble eps) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpOptimizationQNMinimizer_Record, initWithEduStanfordNlpOptimizationQNMinimizer_withBoolean_withEduStanfordNlpOptimizationFunction_withDouble_withDouble_, outer$, beQuiet, monitor, tolerance, eps)
}

void EduStanfordNlpOptimizationQNMinimizer_Record_writeToFileWithDouble_withDouble_withDouble_withDouble_(EduStanfordNlpOptimizationQNMinimizer_Record *self, jdouble fevals, jdouble val, jdouble gNorm, jdouble time) {
  if (self->outputFile_ != nil) {
    [self->outputFile_ printlnWithNSString:JreStrcat("DCDCDCD", fevals, ',', val, ',', gNorm, ',', time)];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpOptimizationQNMinimizer_Record)

@implementation EduStanfordNlpOptimizationQNMinimizer_QNInfo

- (instancetype)initWithEduStanfordNlpOptimizationQNMinimizer:(EduStanfordNlpOptimizationQNMinimizer *)outer$
                                                      withInt:(jint)size {
  EduStanfordNlpOptimizationQNMinimizer_QNInfo_initWithEduStanfordNlpOptimizationQNMinimizer_withInt_(self, outer$, size);
  return self;
}

- (instancetype)initWithEduStanfordNlpOptimizationQNMinimizer:(EduStanfordNlpOptimizationQNMinimizer *)outer$ {
  EduStanfordNlpOptimizationQNMinimizer_QNInfo_initWithEduStanfordNlpOptimizationQNMinimizer_(self, outer$);
  return self;
}

- (instancetype)initWithEduStanfordNlpOptimizationQNMinimizer:(EduStanfordNlpOptimizationQNMinimizer *)outer$
                                             withJavaUtilList:(id<JavaUtilList>)sList
                                             withJavaUtilList:(id<JavaUtilList>)yList {
  EduStanfordNlpOptimizationQNMinimizer_QNInfo_initWithEduStanfordNlpOptimizationQNMinimizer_withJavaUtilList_withJavaUtilList_(self, outer$, sList, yList);
  return self;
}

- (jint)size {
  return [((id<JavaUtilList>) nil_chk(s_)) size];
}

- (jdouble)getRhoWithInt:(jint)ind {
  return [((JavaLangDouble *) nil_chk([((id<JavaUtilList>) nil_chk(rho_)) getWithInt:ind])) doubleValue];
}

- (IOSDoubleArray *)getSWithInt:(jint)ind {
  return [((id<JavaUtilList>) nil_chk(s_)) getWithInt:ind];
}

- (IOSDoubleArray *)getYWithInt:(jint)ind {
  return [((id<JavaUtilList>) nil_chk(y_)) getWithInt:ind];
}

- (void)useDiagonalScaling {
  self->scaleOpt_ = JreLoadEnum(EduStanfordNlpOptimizationQNMinimizer_eScaling, DIAGONAL);
}

- (void)useScalarScaling {
  self->scaleOpt_ = JreLoadEnum(EduStanfordNlpOptimizationQNMinimizer_eScaling, SCALAR);
}

- (void)free {
  s_ = nil;
  y_ = nil;
  rho_ = nil;
  d_ = nil;
}

- (void)clear {
  [((id<JavaUtilList>) nil_chk(s_)) clear];
  [((id<JavaUtilList>) nil_chk(y_)) clear];
  [((id<JavaUtilList>) nil_chk(rho_)) clear];
  d_ = nil;
}

- (void)setHistoryWithJavaUtilList:(id<JavaUtilList>)sList
                  withJavaUtilList:(id<JavaUtilList>)yList {
  jint size = [((id<JavaUtilList>) nil_chk(sList)) size];
  for (jint i = 0; i < size; i++) {
    [self updateWithDoubleArray:[sList getWithInt:i] withDoubleArray:[((id<JavaUtilList>) nil_chk(yList)) getWithInt:i] withDouble:EduStanfordNlpMathArrayMath_innerProductWithDoubleArray_withDoubleArray_([yList getWithInt:i], [yList getWithInt:i]) withDouble:EduStanfordNlpMathArrayMath_innerProductWithDoubleArray_withDoubleArray_([sList getWithInt:i], [yList getWithInt:i]) withDouble:0 withDouble:1.0];
  }
}

- (IOSDoubleArray *)applyInitialHessianWithDoubleArray:(IOSDoubleArray *)x {
  switch ([scaleOpt_ ordinal]) {
    case EduStanfordNlpOptimizationQNMinimizer_eScaling_Enum_SCALAR:
    EduStanfordNlpOptimizationQNMinimizer_sayWithNSString_(this$0_, @"I");
    EduStanfordNlpMathArrayMath_multiplyInPlaceWithDoubleArray_withDouble_(x, gamma_);
    break;
    case EduStanfordNlpOptimizationQNMinimizer_eScaling_Enum_DIAGONAL:
    EduStanfordNlpOptimizationQNMinimizer_sayWithNSString_(this$0_, @"D");
    if (d_ != nil) {
      if (((IOSDoubleArray *) nil_chk(x))->size_ != d_->size_) {
        @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Vector of incorrect size passed to applyInitialHessian in QNInfo class");
      }
      for (jint i = 0; i < x->size_; i++) {
        *IOSDoubleArray_GetRef(x, i) = IOSDoubleArray_Get(x, i) / (IOSDoubleArray_Get(d_, i));
      }
    }
    break;
  }
  return x;
}

- (jint)updateWithDoubleArray:(IOSDoubleArray *)newX
              withDoubleArray:(IOSDoubleArray *)x
              withDoubleArray:(IOSDoubleArray *)newGrad
              withDoubleArray:(IOSDoubleArray *)grad
                   withDouble:(jdouble)step {
  IOSDoubleArray *newS, *newY;
  jdouble sy, yy, sg;
  if ((mem_ > 0 && [((id<JavaUtilList>) nil_chk(s_)) size] == mem_) || [((id<JavaUtilList>) nil_chk(s_)) size] == maxMem_) {
    newS = [((id<JavaUtilList>) nil_chk(s_)) removeWithInt:0];
    newY = [((id<JavaUtilList>) nil_chk(y_)) removeWithInt:0];
    (void) [((id<JavaUtilList>) nil_chk(rho_)) removeWithInt:0];
  }
  else {
    newS = [IOSDoubleArray newArrayWithLength:((IOSDoubleArray *) nil_chk(x))->size_];
    newY = [IOSDoubleArray newArrayWithLength:x->size_];
  }
  sy = 0;
  yy = 0;
  sg = 0;
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(x))->size_; i++) {
    *IOSDoubleArray_GetRef(nil_chk(newS), i) = IOSDoubleArray_Get(nil_chk(newX), i) - IOSDoubleArray_Get(x, i);
    *IOSDoubleArray_GetRef(nil_chk(newY), i) = IOSDoubleArray_Get(nil_chk(newGrad), i) - IOSDoubleArray_Get(nil_chk(grad), i);
    JrePlusAssignDoubleD(&sy, IOSDoubleArray_Get(newS, i) * IOSDoubleArray_Get(newY, i));
    JrePlusAssignDoubleD(&yy, IOSDoubleArray_Get(newY, i) * IOSDoubleArray_Get(newY, i));
    JrePlusAssignDoubleD(&sg, IOSDoubleArray_Get(newS, i) * IOSDoubleArray_Get(newGrad, i));
  }
  return [self updateWithDoubleArray:newS withDoubleArray:newY withDouble:yy withDouble:sy withDouble:sg withDouble:step];
}

- (jint)updateWithDoubleArray:(IOSDoubleArray *)newS
              withDoubleArray:(IOSDoubleArray *)newY
                   withDouble:(jdouble)yy
                   withDouble:(jdouble)sy
                   withDouble:(jdouble)sg
                   withDouble:(jdouble)step {
  if (scaleOpt_ == JreLoadEnum(EduStanfordNlpOptimizationQNMinimizer_eScaling, DIAGONAL) && d_ == nil) {
    d_ = [IOSDoubleArray newArrayWithLength:((IOSDoubleArray *) nil_chk(newS))->size_];
    for (jint i = 0; i < d_->size_; i++) {
      *IOSDoubleArray_GetRef(d_, i) = 1.0;
    }
  }
  @try {
    if (sy < 0) {
      @throw new_EduStanfordNlpOptimizationQNMinimizer_QNInfo_NegativeCurvature_initWithEduStanfordNlpOptimizationQNMinimizer_QNInfo_(self);
    }
    if (yy == 0.0) {
      @throw new_EduStanfordNlpOptimizationQNMinimizer_QNInfo_ZeroGradient_initWithEduStanfordNlpOptimizationQNMinimizer_QNInfo_(self);
    }
    {
      jdouble sDs;
      jdouble minD;
      jdouble maxD;
      switch ([scaleOpt_ ordinal]) {
        case EduStanfordNlpOptimizationQNMinimizer_eScaling_Enum_SCALAR:
        gamma_ = sy / yy;
        break;
        case EduStanfordNlpOptimizationQNMinimizer_eScaling_Enum_DIAGONAL:
        gamma_ = sy / (step * (sy - sg));
        sDs = 0.0;
        for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(d_))->size_; i++) {
          *IOSDoubleArray_GetRef(d_, i) = gamma_ * IOSDoubleArray_Get(d_, i);
          JrePlusAssignDoubleD(&sDs, IOSDoubleArray_Get(nil_chk(newS), i) * IOSDoubleArray_Get(d_, i) * IOSDoubleArray_Get(newS, i));
        }
        for (jint i = 0; i < d_->size_; i++) {
          *IOSDoubleArray_GetRef(d_, i) = (1 - IOSDoubleArray_Get(d_, i) * IOSDoubleArray_Get(nil_chk(newS), i) * IOSDoubleArray_Get(newS, i) / sDs) * IOSDoubleArray_Get(d_, i) + IOSDoubleArray_Get(nil_chk(newY), i) * IOSDoubleArray_Get(newY, i) / sy;
        }
        minD = EduStanfordNlpMathArrayMath_minWithDoubleArray_(d_);
        maxD = EduStanfordNlpMathArrayMath_maxWithDoubleArray_(d_);
        if (minD <= 0 || JavaLangDouble_isInfiniteWithDouble_(maxD) || maxD / minD > 1e12) {
          [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"QNInfo:update() : PROBLEM WITH DIAGONAL UPDATE"];
          jdouble fill = yy / sy;
          for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(d_))->size_; i++) {
            *IOSDoubleArray_GetRef(d_, i) = fill;
          }
        }
      }
    }
    if ((mem_ > 0 && [((id<JavaUtilList>) nil_chk(s_)) size] == mem_) || [((id<JavaUtilList>) nil_chk(s_)) size] == maxMem_) {
      (void) [((id<JavaUtilList>) nil_chk(s_)) removeWithInt:0];
      (void) [((id<JavaUtilList>) nil_chk(y_)) removeWithInt:0];
      (void) [((id<JavaUtilList>) nil_chk(rho_)) removeWithInt:0];
    }
    [((id<JavaUtilList>) nil_chk(s_)) addWithId:newS];
    [((id<JavaUtilList>) nil_chk(y_)) addWithId:newY];
    [((id<JavaUtilList>) nil_chk(rho_)) addWithId:JavaLangDouble_valueOfWithDouble_(1 / sy)];
  }
  @catch (EduStanfordNlpOptimizationQNMinimizer_QNInfo_NegativeCurvature *nc) {
    EduStanfordNlpOptimizationQNMinimizer_sayWithNSString_(this$0_, @" Negative curvature detected, update skipped ");
  }
  @catch (EduStanfordNlpOptimizationQNMinimizer_QNInfo_ZeroGradient *zg) {
    EduStanfordNlpOptimizationQNMinimizer_sayWithNSString_(this$0_, @" Either convergence, or floating point errors combined with extremely linear region ");
  }
  return [((id<JavaUtilList>) nil_chk(s_)) size];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, 3, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "[D", 0x1, 6, 5, -1, -1, -1, -1 },
    { NULL, "[D", 0x1, 7, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, 10, -1, -1 },
    { NULL, "[D", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 13, 14, 15, -1, -1, -1 },
    { NULL, "I", 0x1, 13, 16, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpOptimizationQNMinimizer:withInt:);
  methods[1].selector = @selector(initWithEduStanfordNlpOptimizationQNMinimizer:);
  methods[2].selector = @selector(initWithEduStanfordNlpOptimizationQNMinimizer:withJavaUtilList:withJavaUtilList:);
  methods[3].selector = @selector(size);
  methods[4].selector = @selector(getRhoWithInt:);
  methods[5].selector = @selector(getSWithInt:);
  methods[6].selector = @selector(getYWithInt:);
  methods[7].selector = @selector(useDiagonalScaling);
  methods[8].selector = @selector(useScalarScaling);
  methods[9].selector = @selector(free);
  methods[10].selector = @selector(clear);
  methods[11].selector = @selector(setHistoryWithJavaUtilList:withJavaUtilList:);
  methods[12].selector = @selector(applyInitialHessianWithDoubleArray:);
  methods[13].selector = @selector(updateWithDoubleArray:withDoubleArray:withDoubleArray:withDoubleArray:withDouble:);
  methods[14].selector = @selector(updateWithDoubleArray:withDoubleArray:withDouble:withDouble:withDouble:withDouble:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LEduStanfordNlpOptimizationQNMinimizer;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "s_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 17, -1 },
    { "y_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 17, -1 },
    { "rho_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 18, -1 },
    { "gamma_", "D", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "d_", "[D", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mem_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "maxMem_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "scaleOpt_", "LEduStanfordNlpOptimizationQNMinimizer_eScaling;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpOptimizationQNMinimizer;I", "LEduStanfordNlpOptimizationQNMinimizer;", "LEduStanfordNlpOptimizationQNMinimizer;LJavaUtilList;LJavaUtilList;", "(Ledu/stanford/nlp/optimization/QNMinimizer;Ljava/util/List<[LD;>;Ljava/util/List<[LD;>;)V", "getRho", "I", "getS", "getY", "setHistory", "LJavaUtilList;LJavaUtilList;", "(Ljava/util/List<[LD;>;Ljava/util/List<[LD;>;)V", "applyInitialHessian", "[D", "update", "[D[D[D[DD", "LEduStanfordNlpOptimizationQNMinimizer_SurpriseConvergence;", "[D[DDDDD", "Ljava/util/List<[LD;>;", "Ljava/util/List<Ljava/lang/Double;>;", "LEduStanfordNlpOptimizationQNMinimizer_QNInfo_NegativeCurvature;LEduStanfordNlpOptimizationQNMinimizer_QNInfo_ZeroGradient;" };
  static const J2ObjcClassInfo _EduStanfordNlpOptimizationQNMinimizer_QNInfo = { "QNInfo", "edu.stanford.nlp.optimization", ptrTable, methods, fields, 7, 0x1, 15, 9, 1, 19, -1, -1, -1 };
  return &_EduStanfordNlpOptimizationQNMinimizer_QNInfo;
}

@end

void EduStanfordNlpOptimizationQNMinimizer_QNInfo_initWithEduStanfordNlpOptimizationQNMinimizer_withInt_(EduStanfordNlpOptimizationQNMinimizer_QNInfo *self, EduStanfordNlpOptimizationQNMinimizer *outer$, jint size) {
  self->this$0_ = outer$;
  NSObject_init(self);
  self->s_ = nil;
  self->y_ = nil;
  self->rho_ = nil;
  self->d_ = nil;
  self->maxMem_ = 20;
  self->scaleOpt_ = JreLoadEnum(EduStanfordNlpOptimizationQNMinimizer_eScaling, SCALAR);
  self->s_ = new_JavaUtilArrayList_init();
  self->y_ = new_JavaUtilArrayList_init();
  self->rho_ = new_JavaUtilArrayList_init();
  self->gamma_ = 1;
  self->mem_ = size;
}

EduStanfordNlpOptimizationQNMinimizer_QNInfo *new_EduStanfordNlpOptimizationQNMinimizer_QNInfo_initWithEduStanfordNlpOptimizationQNMinimizer_withInt_(EduStanfordNlpOptimizationQNMinimizer *outer$, jint size) {
  J2OBJC_NEW_IMPL(EduStanfordNlpOptimizationQNMinimizer_QNInfo, initWithEduStanfordNlpOptimizationQNMinimizer_withInt_, outer$, size)
}

EduStanfordNlpOptimizationQNMinimizer_QNInfo *create_EduStanfordNlpOptimizationQNMinimizer_QNInfo_initWithEduStanfordNlpOptimizationQNMinimizer_withInt_(EduStanfordNlpOptimizationQNMinimizer *outer$, jint size) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpOptimizationQNMinimizer_QNInfo, initWithEduStanfordNlpOptimizationQNMinimizer_withInt_, outer$, size)
}

void EduStanfordNlpOptimizationQNMinimizer_QNInfo_initWithEduStanfordNlpOptimizationQNMinimizer_(EduStanfordNlpOptimizationQNMinimizer_QNInfo *self, EduStanfordNlpOptimizationQNMinimizer *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
  self->s_ = nil;
  self->y_ = nil;
  self->rho_ = nil;
  self->d_ = nil;
  self->maxMem_ = 20;
  self->scaleOpt_ = JreLoadEnum(EduStanfordNlpOptimizationQNMinimizer_eScaling, SCALAR);
  self->s_ = new_JavaUtilArrayList_init();
  self->y_ = new_JavaUtilArrayList_init();
  self->rho_ = new_JavaUtilArrayList_init();
  self->gamma_ = 1;
  self->mem_ = self->maxMem_;
}

EduStanfordNlpOptimizationQNMinimizer_QNInfo *new_EduStanfordNlpOptimizationQNMinimizer_QNInfo_initWithEduStanfordNlpOptimizationQNMinimizer_(EduStanfordNlpOptimizationQNMinimizer *outer$) {
  J2OBJC_NEW_IMPL(EduStanfordNlpOptimizationQNMinimizer_QNInfo, initWithEduStanfordNlpOptimizationQNMinimizer_, outer$)
}

EduStanfordNlpOptimizationQNMinimizer_QNInfo *create_EduStanfordNlpOptimizationQNMinimizer_QNInfo_initWithEduStanfordNlpOptimizationQNMinimizer_(EduStanfordNlpOptimizationQNMinimizer *outer$) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpOptimizationQNMinimizer_QNInfo, initWithEduStanfordNlpOptimizationQNMinimizer_, outer$)
}

void EduStanfordNlpOptimizationQNMinimizer_QNInfo_initWithEduStanfordNlpOptimizationQNMinimizer_withJavaUtilList_withJavaUtilList_(EduStanfordNlpOptimizationQNMinimizer_QNInfo *self, EduStanfordNlpOptimizationQNMinimizer *outer$, id<JavaUtilList> sList, id<JavaUtilList> yList) {
  self->this$0_ = outer$;
  NSObject_init(self);
  self->s_ = nil;
  self->y_ = nil;
  self->rho_ = nil;
  self->d_ = nil;
  self->maxMem_ = 20;
  self->scaleOpt_ = JreLoadEnum(EduStanfordNlpOptimizationQNMinimizer_eScaling, SCALAR);
  self->s_ = new_JavaUtilArrayList_init();
  self->y_ = new_JavaUtilArrayList_init();
  self->rho_ = new_JavaUtilArrayList_init();
  self->gamma_ = 1;
  [self setHistoryWithJavaUtilList:sList withJavaUtilList:yList];
}

EduStanfordNlpOptimizationQNMinimizer_QNInfo *new_EduStanfordNlpOptimizationQNMinimizer_QNInfo_initWithEduStanfordNlpOptimizationQNMinimizer_withJavaUtilList_withJavaUtilList_(EduStanfordNlpOptimizationQNMinimizer *outer$, id<JavaUtilList> sList, id<JavaUtilList> yList) {
  J2OBJC_NEW_IMPL(EduStanfordNlpOptimizationQNMinimizer_QNInfo, initWithEduStanfordNlpOptimizationQNMinimizer_withJavaUtilList_withJavaUtilList_, outer$, sList, yList)
}

EduStanfordNlpOptimizationQNMinimizer_QNInfo *create_EduStanfordNlpOptimizationQNMinimizer_QNInfo_initWithEduStanfordNlpOptimizationQNMinimizer_withJavaUtilList_withJavaUtilList_(EduStanfordNlpOptimizationQNMinimizer *outer$, id<JavaUtilList> sList, id<JavaUtilList> yList) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpOptimizationQNMinimizer_QNInfo, initWithEduStanfordNlpOptimizationQNMinimizer_withJavaUtilList_withJavaUtilList_, outer$, sList, yList)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpOptimizationQNMinimizer_QNInfo)

@implementation EduStanfordNlpOptimizationQNMinimizer_QNInfo_NegativeCurvature

- (instancetype)initWithEduStanfordNlpOptimizationQNMinimizer_QNInfo:(EduStanfordNlpOptimizationQNMinimizer_QNInfo *)outer$ {
  EduStanfordNlpOptimizationQNMinimizer_QNInfo_NegativeCurvature_initWithEduStanfordNlpOptimizationQNMinimizer_QNInfo_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpOptimizationQNMinimizer_QNInfo:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpOptimizationQNMinimizer_QNInfo_NegativeCurvature_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpOptimizationQNMinimizer_QNInfo;" };
  static const J2ObjcClassInfo _EduStanfordNlpOptimizationQNMinimizer_QNInfo_NegativeCurvature = { "NegativeCurvature", "edu.stanford.nlp.optimization", ptrTable, methods, fields, 7, 0x2, 1, 1, 0, -1, -1, -1, -1 };
  return &_EduStanfordNlpOptimizationQNMinimizer_QNInfo_NegativeCurvature;
}

@end

void EduStanfordNlpOptimizationQNMinimizer_QNInfo_NegativeCurvature_initWithEduStanfordNlpOptimizationQNMinimizer_QNInfo_(EduStanfordNlpOptimizationQNMinimizer_QNInfo_NegativeCurvature *self, EduStanfordNlpOptimizationQNMinimizer_QNInfo *outer$) {
  NSException_init(self);
}

EduStanfordNlpOptimizationQNMinimizer_QNInfo_NegativeCurvature *new_EduStanfordNlpOptimizationQNMinimizer_QNInfo_NegativeCurvature_initWithEduStanfordNlpOptimizationQNMinimizer_QNInfo_(EduStanfordNlpOptimizationQNMinimizer_QNInfo *outer$) {
  J2OBJC_NEW_IMPL(EduStanfordNlpOptimizationQNMinimizer_QNInfo_NegativeCurvature, initWithEduStanfordNlpOptimizationQNMinimizer_QNInfo_, outer$)
}

EduStanfordNlpOptimizationQNMinimizer_QNInfo_NegativeCurvature *create_EduStanfordNlpOptimizationQNMinimizer_QNInfo_NegativeCurvature_initWithEduStanfordNlpOptimizationQNMinimizer_QNInfo_(EduStanfordNlpOptimizationQNMinimizer_QNInfo *outer$) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpOptimizationQNMinimizer_QNInfo_NegativeCurvature, initWithEduStanfordNlpOptimizationQNMinimizer_QNInfo_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpOptimizationQNMinimizer_QNInfo_NegativeCurvature)

@implementation EduStanfordNlpOptimizationQNMinimizer_QNInfo_ZeroGradient

- (instancetype)initWithEduStanfordNlpOptimizationQNMinimizer_QNInfo:(EduStanfordNlpOptimizationQNMinimizer_QNInfo *)outer$ {
  EduStanfordNlpOptimizationQNMinimizer_QNInfo_ZeroGradient_initWithEduStanfordNlpOptimizationQNMinimizer_QNInfo_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpOptimizationQNMinimizer_QNInfo:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpOptimizationQNMinimizer_QNInfo_ZeroGradient_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpOptimizationQNMinimizer_QNInfo;" };
  static const J2ObjcClassInfo _EduStanfordNlpOptimizationQNMinimizer_QNInfo_ZeroGradient = { "ZeroGradient", "edu.stanford.nlp.optimization", ptrTable, methods, fields, 7, 0x2, 1, 1, 0, -1, -1, -1, -1 };
  return &_EduStanfordNlpOptimizationQNMinimizer_QNInfo_ZeroGradient;
}

@end

void EduStanfordNlpOptimizationQNMinimizer_QNInfo_ZeroGradient_initWithEduStanfordNlpOptimizationQNMinimizer_QNInfo_(EduStanfordNlpOptimizationQNMinimizer_QNInfo_ZeroGradient *self, EduStanfordNlpOptimizationQNMinimizer_QNInfo *outer$) {
  NSException_init(self);
}

EduStanfordNlpOptimizationQNMinimizer_QNInfo_ZeroGradient *new_EduStanfordNlpOptimizationQNMinimizer_QNInfo_ZeroGradient_initWithEduStanfordNlpOptimizationQNMinimizer_QNInfo_(EduStanfordNlpOptimizationQNMinimizer_QNInfo *outer$) {
  J2OBJC_NEW_IMPL(EduStanfordNlpOptimizationQNMinimizer_QNInfo_ZeroGradient, initWithEduStanfordNlpOptimizationQNMinimizer_QNInfo_, outer$)
}

EduStanfordNlpOptimizationQNMinimizer_QNInfo_ZeroGradient *create_EduStanfordNlpOptimizationQNMinimizer_QNInfo_ZeroGradient_initWithEduStanfordNlpOptimizationQNMinimizer_QNInfo_(EduStanfordNlpOptimizationQNMinimizer_QNInfo *outer$) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpOptimizationQNMinimizer_QNInfo_ZeroGradient, initWithEduStanfordNlpOptimizationQNMinimizer_QNInfo_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpOptimizationQNMinimizer_QNInfo_ZeroGradient)
