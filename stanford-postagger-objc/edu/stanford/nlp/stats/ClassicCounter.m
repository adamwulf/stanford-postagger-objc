//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/stats/ClassicCounter.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/math/SloppyMath.h"
#include "edu/stanford/nlp/stats/ClassicCounter.h"
#include "edu/stanford/nlp/stats/Counter.h"
#include "edu/stanford/nlp/stats/Counters.h"
#include "edu/stanford/nlp/util/Factory.h"
#include "edu/stanford/nlp/util/MapFactory.h"
#include "edu/stanford/nlp/util/MutableDouble.h"
#include "edu/stanford/nlp/util/logging/PrettyLogger.h"
#include "edu/stanford/nlp/util/logging/Redwood.h"
#include "java/lang/Double.h"
#include "java/lang/Iterable.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/AbstractCollection.h"
#include "java/util/AbstractSet.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/Spliterator.h"
#include "java/util/function/Consumer.h"

@interface EduStanfordNlpStatsClassicCounter () {
 @public
  EduStanfordNlpUtilMapFactory *mapFactory_;
  jdouble totalCount_;
  jdouble defaultValue_;
  EduStanfordNlpUtilMutableDouble *tempMDouble_;
}

- (EduStanfordNlpUtilMutableDouble *)mutableRemoveWithId:(id)key;

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpStatsClassicCounter, mapFactory_, EduStanfordNlpUtilMapFactory *)
J2OBJC_FIELD_SETTER(EduStanfordNlpStatsClassicCounter, tempMDouble_, EduStanfordNlpUtilMutableDouble *)

inline jlong EduStanfordNlpStatsClassicCounter_get_serialVersionUID();
#define EduStanfordNlpStatsClassicCounter_serialVersionUID 4LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpStatsClassicCounter, serialVersionUID, jlong)

__attribute__((unused)) static void EduStanfordNlpStatsClassicCounter_setDefaultReturnValueWithDouble_(EduStanfordNlpStatsClassicCounter *self, jdouble rv);

__attribute__((unused)) static jdouble EduStanfordNlpStatsClassicCounter_incrementCountWithId_(EduStanfordNlpStatsClassicCounter *self, id key);

__attribute__((unused)) static EduStanfordNlpUtilMutableDouble *EduStanfordNlpStatsClassicCounter_mutableRemoveWithId_(EduStanfordNlpStatsClassicCounter *self, id key);

@interface EduStanfordNlpStatsClassicCounter_ClassicCounterFactory : NSObject < EduStanfordNlpUtilFactory > {
 @public
  EduStanfordNlpUtilMapFactory *mf_;
}

- (instancetype)initWithEduStanfordNlpUtilMapFactory:(EduStanfordNlpUtilMapFactory *)mf;

- (id<EduStanfordNlpStatsCounter>)create;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpStatsClassicCounter_ClassicCounterFactory)

J2OBJC_FIELD_SETTER(EduStanfordNlpStatsClassicCounter_ClassicCounterFactory, mf_, EduStanfordNlpUtilMapFactory *)

inline jlong EduStanfordNlpStatsClassicCounter_ClassicCounterFactory_get_serialVersionUID();
#define EduStanfordNlpStatsClassicCounter_ClassicCounterFactory_serialVersionUID 1LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpStatsClassicCounter_ClassicCounterFactory, serialVersionUID, jlong)

__attribute__((unused)) static void EduStanfordNlpStatsClassicCounter_ClassicCounterFactory_initWithEduStanfordNlpUtilMapFactory_(EduStanfordNlpStatsClassicCounter_ClassicCounterFactory *self, EduStanfordNlpUtilMapFactory *mf);

__attribute__((unused)) static EduStanfordNlpStatsClassicCounter_ClassicCounterFactory *new_EduStanfordNlpStatsClassicCounter_ClassicCounterFactory_initWithEduStanfordNlpUtilMapFactory_(EduStanfordNlpUtilMapFactory *mf) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpStatsClassicCounter_ClassicCounterFactory *create_EduStanfordNlpStatsClassicCounter_ClassicCounterFactory_initWithEduStanfordNlpUtilMapFactory_(EduStanfordNlpUtilMapFactory *mf);

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpStatsClassicCounter_ClassicCounterFactory)

@interface EduStanfordNlpStatsClassicCounter_$1 : JavaUtilAbstractCollection {
 @public
  EduStanfordNlpStatsClassicCounter *this$0_;
}

- (id<JavaUtilIterator>)iterator;

- (jint)size;

- (jboolean)containsWithId:(id)v;

- (instancetype)initWithEduStanfordNlpStatsClassicCounter:(EduStanfordNlpStatsClassicCounter *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpStatsClassicCounter_$1)

J2OBJC_FIELD_SETTER(EduStanfordNlpStatsClassicCounter_$1, this$0_, EduStanfordNlpStatsClassicCounter *)

__attribute__((unused)) static void EduStanfordNlpStatsClassicCounter_$1_initWithEduStanfordNlpStatsClassicCounter_(EduStanfordNlpStatsClassicCounter_$1 *self, EduStanfordNlpStatsClassicCounter *outer$);

__attribute__((unused)) static EduStanfordNlpStatsClassicCounter_$1 *new_EduStanfordNlpStatsClassicCounter_$1_initWithEduStanfordNlpStatsClassicCounter_(EduStanfordNlpStatsClassicCounter *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpStatsClassicCounter_$1 *create_EduStanfordNlpStatsClassicCounter_$1_initWithEduStanfordNlpStatsClassicCounter_(EduStanfordNlpStatsClassicCounter *outer$);

@interface EduStanfordNlpStatsClassicCounter_$1_$1 : NSObject < JavaUtilIterator > {
 @public
  id<JavaUtilIterator> inner_;
}

- (jboolean)hasNext;

- (JavaLangDouble *)next;

- (void)remove;

- (instancetype)initWithEduStanfordNlpStatsClassicCounter_$1:(EduStanfordNlpStatsClassicCounter_$1 *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpStatsClassicCounter_$1_$1)

J2OBJC_FIELD_SETTER(EduStanfordNlpStatsClassicCounter_$1_$1, inner_, id<JavaUtilIterator>)

__attribute__((unused)) static void EduStanfordNlpStatsClassicCounter_$1_$1_initWithEduStanfordNlpStatsClassicCounter_$1_(EduStanfordNlpStatsClassicCounter_$1_$1 *self, EduStanfordNlpStatsClassicCounter_$1 *outer$);

__attribute__((unused)) static EduStanfordNlpStatsClassicCounter_$1_$1 *new_EduStanfordNlpStatsClassicCounter_$1_$1_initWithEduStanfordNlpStatsClassicCounter_$1_(EduStanfordNlpStatsClassicCounter_$1 *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpStatsClassicCounter_$1_$1 *create_EduStanfordNlpStatsClassicCounter_$1_$1_initWithEduStanfordNlpStatsClassicCounter_$1_(EduStanfordNlpStatsClassicCounter_$1 *outer$);

@interface EduStanfordNlpStatsClassicCounter_$2 : JavaUtilAbstractSet {
 @public
  EduStanfordNlpStatsClassicCounter *this$0_;
}

- (id<JavaUtilIterator>)iterator;

- (jint)size;

- (instancetype)initWithEduStanfordNlpStatsClassicCounter:(EduStanfordNlpStatsClassicCounter *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpStatsClassicCounter_$2)

J2OBJC_FIELD_SETTER(EduStanfordNlpStatsClassicCounter_$2, this$0_, EduStanfordNlpStatsClassicCounter *)

__attribute__((unused)) static void EduStanfordNlpStatsClassicCounter_$2_initWithEduStanfordNlpStatsClassicCounter_(EduStanfordNlpStatsClassicCounter_$2 *self, EduStanfordNlpStatsClassicCounter *outer$);

__attribute__((unused)) static EduStanfordNlpStatsClassicCounter_$2 *new_EduStanfordNlpStatsClassicCounter_$2_initWithEduStanfordNlpStatsClassicCounter_(EduStanfordNlpStatsClassicCounter *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpStatsClassicCounter_$2 *create_EduStanfordNlpStatsClassicCounter_$2_initWithEduStanfordNlpStatsClassicCounter_(EduStanfordNlpStatsClassicCounter *outer$);

@interface EduStanfordNlpStatsClassicCounter_$2_$1 : NSObject < JavaUtilIterator > {
 @public
  EduStanfordNlpStatsClassicCounter_$2 *this$0_;
  id<JavaUtilIterator> inner_;
}

- (jboolean)hasNext;

- (id<JavaUtilMap_Entry>)next;

- (void)remove;

- (instancetype)initWithEduStanfordNlpStatsClassicCounter_$2:(EduStanfordNlpStatsClassicCounter_$2 *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpStatsClassicCounter_$2_$1)

J2OBJC_FIELD_SETTER(EduStanfordNlpStatsClassicCounter_$2_$1, this$0_, EduStanfordNlpStatsClassicCounter_$2 *)
J2OBJC_FIELD_SETTER(EduStanfordNlpStatsClassicCounter_$2_$1, inner_, id<JavaUtilIterator>)

__attribute__((unused)) static void EduStanfordNlpStatsClassicCounter_$2_$1_initWithEduStanfordNlpStatsClassicCounter_$2_(EduStanfordNlpStatsClassicCounter_$2_$1 *self, EduStanfordNlpStatsClassicCounter_$2 *outer$);

__attribute__((unused)) static EduStanfordNlpStatsClassicCounter_$2_$1 *new_EduStanfordNlpStatsClassicCounter_$2_$1_initWithEduStanfordNlpStatsClassicCounter_$2_(EduStanfordNlpStatsClassicCounter_$2 *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpStatsClassicCounter_$2_$1 *create_EduStanfordNlpStatsClassicCounter_$2_$1_initWithEduStanfordNlpStatsClassicCounter_$2_(EduStanfordNlpStatsClassicCounter_$2 *outer$);

@interface EduStanfordNlpStatsClassicCounter_$2_$1_$1 : NSObject < JavaUtilMap_Entry > {
 @public
  EduStanfordNlpStatsClassicCounter_$2_$1 *this$0_;
  id<JavaUtilMap_Entry> e_;
}

- (jdouble)getDoubleValue;

- (jdouble)setValueWithDouble:(jdouble)value;

- (id)getKey;

- (JavaLangDouble *)getValue;

- (JavaLangDouble *)setValueWithId:(JavaLangDouble *)value;

- (instancetype)initWithEduStanfordNlpStatsClassicCounter_$2_$1:(EduStanfordNlpStatsClassicCounter_$2_$1 *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpStatsClassicCounter_$2_$1_$1)

J2OBJC_FIELD_SETTER(EduStanfordNlpStatsClassicCounter_$2_$1_$1, this$0_, EduStanfordNlpStatsClassicCounter_$2_$1 *)
J2OBJC_FIELD_SETTER(EduStanfordNlpStatsClassicCounter_$2_$1_$1, e_, id<JavaUtilMap_Entry>)

__attribute__((unused)) static void EduStanfordNlpStatsClassicCounter_$2_$1_$1_initWithEduStanfordNlpStatsClassicCounter_$2_$1_(EduStanfordNlpStatsClassicCounter_$2_$1_$1 *self, EduStanfordNlpStatsClassicCounter_$2_$1 *outer$);

__attribute__((unused)) static EduStanfordNlpStatsClassicCounter_$2_$1_$1 *new_EduStanfordNlpStatsClassicCounter_$2_$1_$1_initWithEduStanfordNlpStatsClassicCounter_$2_$1_(EduStanfordNlpStatsClassicCounter_$2_$1 *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpStatsClassicCounter_$2_$1_$1 *create_EduStanfordNlpStatsClassicCounter_$2_$1_$1_initWithEduStanfordNlpStatsClassicCounter_$2_$1_(EduStanfordNlpStatsClassicCounter_$2_$1 *outer$);

@implementation EduStanfordNlpStatsClassicCounter

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpStatsClassicCounter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithInt:(jint)initialCapacity {
  EduStanfordNlpStatsClassicCounter_initWithInt_(self, initialCapacity);
  return self;
}

- (instancetype)initWithEduStanfordNlpUtilMapFactory:(EduStanfordNlpUtilMapFactory *)mapFactory {
  EduStanfordNlpStatsClassicCounter_initWithEduStanfordNlpUtilMapFactory_(self, mapFactory);
  return self;
}

- (instancetype)initWithEduStanfordNlpUtilMapFactory:(EduStanfordNlpUtilMapFactory *)mapFactory
                                             withInt:(jint)initialCapacity {
  EduStanfordNlpStatsClassicCounter_initWithEduStanfordNlpUtilMapFactory_withInt_(self, mapFactory, initialCapacity);
  return self;
}

- (instancetype)initWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c {
  EduStanfordNlpStatsClassicCounter_initWithEduStanfordNlpStatsCounter_(self, c);
  return self;
}

- (instancetype)initWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  EduStanfordNlpStatsClassicCounter_initWithJavaUtilCollection_(self, collection);
  return self;
}

+ (EduStanfordNlpStatsClassicCounter *)identityHashMapCounter {
  return EduStanfordNlpStatsClassicCounter_identityHashMapCounter();
}

- (EduStanfordNlpUtilMapFactory *)getMapFactory {
  return mapFactory_;
}

- (id<EduStanfordNlpUtilFactory>)getFactory {
  return new_EduStanfordNlpStatsClassicCounter_ClassicCounterFactory_initWithEduStanfordNlpUtilMapFactory_([self getMapFactory]);
}

- (void)setDefaultReturnValueWithDouble:(jdouble)rv {
  EduStanfordNlpStatsClassicCounter_setDefaultReturnValueWithDouble_(self, rv);
}

- (jdouble)defaultReturnValue {
  return defaultValue_;
}

- (jdouble)getCountWithId:(id)key {
  NSNumber *count = [((id<JavaUtilMap>) nil_chk(map_)) getWithId:key];
  if (count == nil) {
    return defaultValue_;
  }
  return [count doubleValue];
}

- (void)setCountWithId:(id)key
            withDouble:(jdouble)count {
  if (tempMDouble_ == nil) {
    tempMDouble_ = new_EduStanfordNlpUtilMutableDouble_init();
  }
  [tempMDouble_ setWithDouble:count];
  tempMDouble_ = [((id<JavaUtilMap>) nil_chk(map_)) putWithId:key withId:tempMDouble_];
  JrePlusAssignDoubleD(&totalCount_, count);
  if (tempMDouble_ != nil) {
    JreMinusAssignDoubleD(&totalCount_, [tempMDouble_ doubleValue]);
  }
}

- (jdouble)incrementCountWithId:(id)key
                     withDouble:(jdouble)count {
  if (tempMDouble_ == nil) {
    tempMDouble_ = new_EduStanfordNlpUtilMutableDouble_init();
  }
  EduStanfordNlpUtilMutableDouble *oldMDouble = [((id<JavaUtilMap>) nil_chk(map_)) putWithId:key withId:tempMDouble_];
  JrePlusAssignDoubleD(&totalCount_, count);
  if (oldMDouble != nil) {
    JrePlusAssignDoubleD(&count, [oldMDouble doubleValue]);
  }
  [((EduStanfordNlpUtilMutableDouble *) nil_chk(tempMDouble_)) setWithDouble:count];
  tempMDouble_ = oldMDouble;
  return count;
}

- (jdouble)incrementCountWithId:(id)key {
  return EduStanfordNlpStatsClassicCounter_incrementCountWithId_(self, key);
}

- (jdouble)decrementCountWithId:(id)key
                     withDouble:(jdouble)count {
  return [self incrementCountWithId:key withDouble:-count];
}

- (jdouble)decrementCountWithId:(id)key {
  return [self incrementCountWithId:key withDouble:-1.0];
}

- (jdouble)logIncrementCountWithId:(id)key
                        withDouble:(jdouble)count {
  if (tempMDouble_ == nil) {
    tempMDouble_ = new_EduStanfordNlpUtilMutableDouble_init();
  }
  EduStanfordNlpUtilMutableDouble *oldMDouble = [((id<JavaUtilMap>) nil_chk(map_)) putWithId:key withId:tempMDouble_];
  if (oldMDouble != nil) {
    count = EduStanfordNlpMathSloppyMath_logAddWithDouble_withDouble_(count, [oldMDouble doubleValue]);
    JrePlusAssignDoubleD(&totalCount_, count - [oldMDouble doubleValue]);
  }
  else {
    JrePlusAssignDoubleD(&totalCount_, count);
  }
  [((EduStanfordNlpUtilMutableDouble *) nil_chk(tempMDouble_)) setWithDouble:count];
  tempMDouble_ = oldMDouble;
  return count;
}

- (void)addAllWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)counter {
  EduStanfordNlpStatsCounters_addInPlaceWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_(self, counter);
}

- (jdouble)removeWithId:(id)key {
  EduStanfordNlpUtilMutableDouble *d = EduStanfordNlpStatsClassicCounter_mutableRemoveWithId_(self, key);
  if (d != nil) {
    return [d doubleValue];
  }
  return defaultValue_;
}

- (jboolean)containsKeyWithId:(id)key {
  return [((id<JavaUtilMap>) nil_chk(map_)) containsKeyWithId:key];
}

- (id<JavaUtilSet>)keySet {
  return [((id<JavaUtilMap>) nil_chk(map_)) keySet];
}

- (id<JavaUtilCollection>)values {
  return new_EduStanfordNlpStatsClassicCounter_$1_initWithEduStanfordNlpStatsClassicCounter_(self);
}

- (id<JavaUtilSet>)entrySet {
  return new_EduStanfordNlpStatsClassicCounter_$2_initWithEduStanfordNlpStatsClassicCounter_(self);
}

- (void)clear {
  [((id<JavaUtilMap>) nil_chk(map_)) clear];
  totalCount_ = 0.0;
}

- (jint)size {
  return [((id<JavaUtilMap>) nil_chk(map_)) size];
}

- (jdouble)totalCount {
  return totalCount_;
}

- (id<JavaUtilIterator>)iterator {
  return [((id<JavaUtilSet>) nil_chk([self keySet])) iterator];
}

- (EduStanfordNlpUtilMutableDouble *)mutableRemoveWithId:(id)key {
  return EduStanfordNlpStatsClassicCounter_mutableRemoveWithId_(self, key);
}

- (void)removeAllWithJavaUtilCollection:(id<JavaUtilCollection>)keys {
  for (id __strong key in nil_chk(keys)) {
    (void) EduStanfordNlpStatsClassicCounter_mutableRemoveWithId_(self, key);
  }
}

- (jboolean)isEmpty {
  return [self size] == 0;
}

- (jboolean)isEqual:(id)o {
  if (self == o) {
    return true;
  }
  else if (!([EduStanfordNlpStatsCounter_class_() isInstance:o])) {
    return false;
  }
  else if (!([o isKindOfClass:[EduStanfordNlpStatsClassicCounter class]])) {
    return EduStanfordNlpStatsCounters_equalsWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_(self, (id<EduStanfordNlpStatsCounter>) cast_check(o, EduStanfordNlpStatsCounter_class_()));
  }
  EduStanfordNlpStatsClassicCounter *counter = (EduStanfordNlpStatsClassicCounter *) cast_chk(o, [EduStanfordNlpStatsClassicCounter class]);
  return totalCount_ == ((EduStanfordNlpStatsClassicCounter *) nil_chk(counter))->totalCount_ && [((id<JavaUtilMap>) nil_chk(map_)) isEqual:counter->map_];
}

- (NSUInteger)hash {
  return ((jint) [((id<JavaUtilMap>) nil_chk(map_)) hash]);
}

- (NSString *)description {
  return [((id<JavaUtilMap>) nil_chk(map_)) description];
}

+ (EduStanfordNlpStatsClassicCounter *)valueOfIgnoreCommentsWithNSString:(NSString *)s {
  return EduStanfordNlpStatsClassicCounter_valueOfIgnoreCommentsWithNSString_(s);
}

+ (EduStanfordNlpStatsClassicCounter *)fromStringWithNSString:(NSString *)s {
  return EduStanfordNlpStatsClassicCounter_fromStringWithNSString_(s);
}

- (void)prettyLogWithEduStanfordNlpUtilLoggingRedwood_RedwoodChannels:(EduStanfordNlpUtilLoggingRedwood_RedwoodChannels *)channels
                                                         withNSString:(NSString *)description_ {
  EduStanfordNlpUtilLoggingPrettyLogger_logWithEduStanfordNlpUtilLoggingRedwood_RedwoodChannels_withNSString_withId_(channels, description_, EduStanfordNlpStatsCounters_asMapWithEduStanfordNlpStatsCounter_(self));
}

- (void)forEachWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaLangIterable_forEachWithJavaUtilFunctionConsumer_(self, arg0);
}

- (id<JavaUtilSpliterator>)spliterator {
  return JavaLangIterable_spliterator(self);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, 4, -1, -1 },
    { NULL, NULL, 0x1, -1, 5, -1, 6, -1, -1 },
    { NULL, NULL, 0x1, -1, 7, -1, 8, -1, -1 },
    { NULL, "LEduStanfordNlpStatsClassicCounter;", 0x9, -1, -1, -1, 9, -1, -1 },
    { NULL, "LEduStanfordNlpUtilMapFactory;", 0x0, -1, -1, -1, 10, -1, -1 },
    { NULL, "LEduStanfordNlpUtilFactory;", 0x1, -1, -1, -1, 11, -1, -1 },
    { NULL, "V", 0x11, 12, 13, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 17, -1, 18, -1, -1 },
    { NULL, "D", 0x1, 19, 17, -1, 20, -1, -1 },
    { NULL, "D", 0x11, 19, 15, -1, 21, -1, -1 },
    { NULL, "D", 0x1, 22, 17, -1, 20, -1, -1 },
    { NULL, "D", 0x1, 22, 15, -1, 21, -1, -1 },
    { NULL, "D", 0x1, 23, 17, -1, 20, -1, -1 },
    { NULL, "V", 0x1, 24, 5, -1, 6, -1, -1 },
    { NULL, "D", 0x1, 25, 15, -1, 21, -1, -1 },
    { NULL, "Z", 0x1, 26, 15, -1, 27, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 28, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, -1, -1, -1, 29, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 30, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 31, -1, -1 },
    { NULL, "LEduStanfordNlpUtilMutableDouble;", 0x2, 32, 15, -1, 33, -1, -1 },
    { NULL, "V", 0x1, 34, 7, -1, 8, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 35, 15, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 36, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 37, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpStatsClassicCounter;", 0x9, 38, 39, -1, 40, -1, -1 },
    { NULL, "LEduStanfordNlpStatsClassicCounter;", 0x9, 41, 39, -1, 40, -1, -1 },
    { NULL, "V", 0x1, 42, 43, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithInt:);
  methods[2].selector = @selector(initWithEduStanfordNlpUtilMapFactory:);
  methods[3].selector = @selector(initWithEduStanfordNlpUtilMapFactory:withInt:);
  methods[4].selector = @selector(initWithEduStanfordNlpStatsCounter:);
  methods[5].selector = @selector(initWithJavaUtilCollection:);
  methods[6].selector = @selector(identityHashMapCounter);
  methods[7].selector = @selector(getMapFactory);
  methods[8].selector = @selector(getFactory);
  methods[9].selector = @selector(setDefaultReturnValueWithDouble:);
  methods[10].selector = @selector(defaultReturnValue);
  methods[11].selector = @selector(getCountWithId:);
  methods[12].selector = @selector(setCountWithId:withDouble:);
  methods[13].selector = @selector(incrementCountWithId:withDouble:);
  methods[14].selector = @selector(incrementCountWithId:);
  methods[15].selector = @selector(decrementCountWithId:withDouble:);
  methods[16].selector = @selector(decrementCountWithId:);
  methods[17].selector = @selector(logIncrementCountWithId:withDouble:);
  methods[18].selector = @selector(addAllWithEduStanfordNlpStatsCounter:);
  methods[19].selector = @selector(removeWithId:);
  methods[20].selector = @selector(containsKeyWithId:);
  methods[21].selector = @selector(keySet);
  methods[22].selector = @selector(values);
  methods[23].selector = @selector(entrySet);
  methods[24].selector = @selector(clear);
  methods[25].selector = @selector(size);
  methods[26].selector = @selector(totalCount);
  methods[27].selector = @selector(iterator);
  methods[28].selector = @selector(mutableRemoveWithId:);
  methods[29].selector = @selector(removeAllWithJavaUtilCollection:);
  methods[30].selector = @selector(isEmpty);
  methods[31].selector = @selector(isEqual:);
  methods[32].selector = @selector(hash);
  methods[33].selector = @selector(description);
  methods[34].selector = @selector(valueOfIgnoreCommentsWithNSString:);
  methods[35].selector = @selector(fromStringWithNSString:);
  methods[36].selector = @selector(prettyLogWithEduStanfordNlpUtilLoggingRedwood_RedwoodChannels:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "map_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x0, -1, -1, 44, -1 },
    { "mapFactory_", "LEduStanfordNlpUtilMapFactory;", .constantValue.asLong = 0, 0x12, -1, -1, 45, -1 },
    { "totalCount_", "D", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "defaultValue_", "D", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpStatsClassicCounter_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "tempMDouble_", "LEduStanfordNlpUtilMutableDouble;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "LEduStanfordNlpUtilMapFactory;", "(Ledu/stanford/nlp/util/MapFactory<TE;Ledu/stanford/nlp/util/MutableDouble;>;)V", "LEduStanfordNlpUtilMapFactory;I", "(Ledu/stanford/nlp/util/MapFactory<TE;Ledu/stanford/nlp/util/MutableDouble;>;I)V", "LEduStanfordNlpStatsCounter;", "(Ledu/stanford/nlp/stats/Counter<TE;>;)V", "LJavaUtilCollection;", "(Ljava/util/Collection<TE;>;)V", "<E:Ljava/lang/Object;>()Ledu/stanford/nlp/stats/ClassicCounter<TE;>;", "()Ledu/stanford/nlp/util/MapFactory<TE;Ledu/stanford/nlp/util/MutableDouble;>;", "()Ledu/stanford/nlp/util/Factory<Ledu/stanford/nlp/stats/Counter<TE;>;>;", "setDefaultReturnValue", "D", "getCount", "LNSObject;", "setCount", "LNSObject;D", "(TE;D)V", "incrementCount", "(TE;D)D", "(TE;)D", "decrementCount", "logIncrementCount", "addAll", "remove", "containsKey", "(TE;)Z", "()Ljava/util/Set<TE;>;", "()Ljava/util/Collection<Ljava/lang/Double;>;", "()Ljava/util/Set<Ljava/util/Map$Entry<TE;Ljava/lang/Double;>;>;", "()Ljava/util/Iterator<TE;>;", "mutableRemove", "(TE;)Ledu/stanford/nlp/util/MutableDouble;", "removeAll", "equals", "hashCode", "toString", "valueOfIgnoreComments", "LNSString;", "(Ljava/lang/String;)Ledu/stanford/nlp/stats/ClassicCounter<Ljava/lang/String;>;", "fromString", "prettyLog", "LEduStanfordNlpUtilLoggingRedwood_RedwoodChannels;LNSString;", "Ljava/util/Map<TE;Ledu/stanford/nlp/util/MutableDouble;>;", "Ledu/stanford/nlp/util/MapFactory<TE;Ledu/stanford/nlp/util/MutableDouble;>;", "LEduStanfordNlpStatsClassicCounter_ClassicCounterFactory;", "<E:Ljava/lang/Object;>Ljava/lang/Object;Ljava/io/Serializable;Ledu/stanford/nlp/stats/Counter<TE;>;Ljava/lang/Iterable<TE;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpStatsClassicCounter = { "ClassicCounter", "edu.stanford.nlp.stats", ptrTable, methods, fields, 7, 0x1, 37, 6, -1, 46, -1, 47, -1 };
  return &_EduStanfordNlpStatsClassicCounter;
}

@end

void EduStanfordNlpStatsClassicCounter_init(EduStanfordNlpStatsClassicCounter *self) {
  EduStanfordNlpStatsClassicCounter_initWithEduStanfordNlpUtilMapFactory_(self, EduStanfordNlpUtilMapFactory_hashMapFactory());
}

EduStanfordNlpStatsClassicCounter *new_EduStanfordNlpStatsClassicCounter_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpStatsClassicCounter, init)
}

EduStanfordNlpStatsClassicCounter *create_EduStanfordNlpStatsClassicCounter_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpStatsClassicCounter, init)
}

void EduStanfordNlpStatsClassicCounter_initWithInt_(EduStanfordNlpStatsClassicCounter *self, jint initialCapacity) {
  EduStanfordNlpStatsClassicCounter_initWithEduStanfordNlpUtilMapFactory_withInt_(self, EduStanfordNlpUtilMapFactory_hashMapFactory(), initialCapacity);
}

EduStanfordNlpStatsClassicCounter *new_EduStanfordNlpStatsClassicCounter_initWithInt_(jint initialCapacity) {
  J2OBJC_NEW_IMPL(EduStanfordNlpStatsClassicCounter, initWithInt_, initialCapacity)
}

EduStanfordNlpStatsClassicCounter *create_EduStanfordNlpStatsClassicCounter_initWithInt_(jint initialCapacity) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpStatsClassicCounter, initWithInt_, initialCapacity)
}

void EduStanfordNlpStatsClassicCounter_initWithEduStanfordNlpUtilMapFactory_(EduStanfordNlpStatsClassicCounter *self, EduStanfordNlpUtilMapFactory *mapFactory) {
  NSObject_init(self);
  self->mapFactory_ = mapFactory;
  self->map_ = [((EduStanfordNlpUtilMapFactory *) nil_chk(mapFactory)) newMap];
}

EduStanfordNlpStatsClassicCounter *new_EduStanfordNlpStatsClassicCounter_initWithEduStanfordNlpUtilMapFactory_(EduStanfordNlpUtilMapFactory *mapFactory) {
  J2OBJC_NEW_IMPL(EduStanfordNlpStatsClassicCounter, initWithEduStanfordNlpUtilMapFactory_, mapFactory)
}

EduStanfordNlpStatsClassicCounter *create_EduStanfordNlpStatsClassicCounter_initWithEduStanfordNlpUtilMapFactory_(EduStanfordNlpUtilMapFactory *mapFactory) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpStatsClassicCounter, initWithEduStanfordNlpUtilMapFactory_, mapFactory)
}

void EduStanfordNlpStatsClassicCounter_initWithEduStanfordNlpUtilMapFactory_withInt_(EduStanfordNlpStatsClassicCounter *self, EduStanfordNlpUtilMapFactory *mapFactory, jint initialCapacity) {
  NSObject_init(self);
  self->mapFactory_ = mapFactory;
  self->map_ = [((EduStanfordNlpUtilMapFactory *) nil_chk(mapFactory)) newMapWithInt:initialCapacity];
}

EduStanfordNlpStatsClassicCounter *new_EduStanfordNlpStatsClassicCounter_initWithEduStanfordNlpUtilMapFactory_withInt_(EduStanfordNlpUtilMapFactory *mapFactory, jint initialCapacity) {
  J2OBJC_NEW_IMPL(EduStanfordNlpStatsClassicCounter, initWithEduStanfordNlpUtilMapFactory_withInt_, mapFactory, initialCapacity)
}

EduStanfordNlpStatsClassicCounter *create_EduStanfordNlpStatsClassicCounter_initWithEduStanfordNlpUtilMapFactory_withInt_(EduStanfordNlpUtilMapFactory *mapFactory, jint initialCapacity) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpStatsClassicCounter, initWithEduStanfordNlpUtilMapFactory_withInt_, mapFactory, initialCapacity)
}

void EduStanfordNlpStatsClassicCounter_initWithEduStanfordNlpStatsCounter_(EduStanfordNlpStatsClassicCounter *self, id<EduStanfordNlpStatsCounter> c) {
  EduStanfordNlpStatsClassicCounter_init(self);
  EduStanfordNlpStatsCounters_addInPlaceWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_(self, c);
  EduStanfordNlpStatsClassicCounter_setDefaultReturnValueWithDouble_(self, [((id<EduStanfordNlpStatsCounter>) nil_chk(c)) defaultReturnValue]);
}

EduStanfordNlpStatsClassicCounter *new_EduStanfordNlpStatsClassicCounter_initWithEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> c) {
  J2OBJC_NEW_IMPL(EduStanfordNlpStatsClassicCounter, initWithEduStanfordNlpStatsCounter_, c)
}

EduStanfordNlpStatsClassicCounter *create_EduStanfordNlpStatsClassicCounter_initWithEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> c) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpStatsClassicCounter, initWithEduStanfordNlpStatsCounter_, c)
}

void EduStanfordNlpStatsClassicCounter_initWithJavaUtilCollection_(EduStanfordNlpStatsClassicCounter *self, id<JavaUtilCollection> collection) {
  EduStanfordNlpStatsClassicCounter_init(self);
  for (id __strong key in nil_chk(collection)) {
    EduStanfordNlpStatsClassicCounter_incrementCountWithId_(self, key);
  }
}

EduStanfordNlpStatsClassicCounter *new_EduStanfordNlpStatsClassicCounter_initWithJavaUtilCollection_(id<JavaUtilCollection> collection) {
  J2OBJC_NEW_IMPL(EduStanfordNlpStatsClassicCounter, initWithJavaUtilCollection_, collection)
}

EduStanfordNlpStatsClassicCounter *create_EduStanfordNlpStatsClassicCounter_initWithJavaUtilCollection_(id<JavaUtilCollection> collection) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpStatsClassicCounter, initWithJavaUtilCollection_, collection)
}

EduStanfordNlpStatsClassicCounter *EduStanfordNlpStatsClassicCounter_identityHashMapCounter() {
  EduStanfordNlpStatsClassicCounter_initialize();
  return new_EduStanfordNlpStatsClassicCounter_initWithEduStanfordNlpUtilMapFactory_(EduStanfordNlpUtilMapFactory_identityHashMapFactory());
}

void EduStanfordNlpStatsClassicCounter_setDefaultReturnValueWithDouble_(EduStanfordNlpStatsClassicCounter *self, jdouble rv) {
  self->defaultValue_ = rv;
}

jdouble EduStanfordNlpStatsClassicCounter_incrementCountWithId_(EduStanfordNlpStatsClassicCounter *self, id key) {
  return [self incrementCountWithId:key withDouble:1.0];
}

EduStanfordNlpUtilMutableDouble *EduStanfordNlpStatsClassicCounter_mutableRemoveWithId_(EduStanfordNlpStatsClassicCounter *self, id key) {
  EduStanfordNlpUtilMutableDouble *md = [((id<JavaUtilMap>) nil_chk(self->map_)) removeWithId:key];
  if (md != nil) {
    JreMinusAssignDoubleD(&self->totalCount_, [md doubleValue]);
  }
  return md;
}

EduStanfordNlpStatsClassicCounter *EduStanfordNlpStatsClassicCounter_valueOfIgnoreCommentsWithNSString_(NSString *s) {
  EduStanfordNlpStatsClassicCounter_initialize();
  EduStanfordNlpStatsClassicCounter *result = new_EduStanfordNlpStatsClassicCounter_init();
  IOSObjectArray *lines = [((NSString *) nil_chk(s)) split:@"\n"];
  {
    IOSObjectArray *a__ = lines;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *line = *b__++;
      IOSObjectArray *fields = [((NSString *) nil_chk(line)) split:@"\t"];
      if (((IOSObjectArray *) nil_chk(fields))->size_ != 2) {
        if ([line hasPrefix:@"#"]) {
          continue;
        }
        else {
          @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$C", @"Got unsplittable line: \"", line, '"'));
        }
      }
      [result setCountWithId:IOSObjectArray_Get(fields, 0) withDouble:JavaLangDouble_parseDoubleWithNSString_(IOSObjectArray_Get(fields, 1))];
    }
  }
  return result;
}

EduStanfordNlpStatsClassicCounter *EduStanfordNlpStatsClassicCounter_fromStringWithNSString_(NSString *s) {
  EduStanfordNlpStatsClassicCounter_initialize();
  EduStanfordNlpStatsClassicCounter *result = new_EduStanfordNlpStatsClassicCounter_init();
  if (![((NSString *) nil_chk(s)) hasPrefix:@"{"] || ![s hasSuffix:@"}"]) {
    @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$$", @"invalid format: ||", s, @"||"));
  }
  s = [s substring:1 endIndex:((jint) [s length]) - 1];
  IOSObjectArray *lines = [((NSString *) nil_chk(s)) split:@", "];
  {
    IOSObjectArray *a__ = lines;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *line = *b__++;
      IOSObjectArray *fields = [((NSString *) nil_chk(line)) split:@"="];
      if (((IOSObjectArray *) nil_chk(fields))->size_ != 2) @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$C", @"Got unsplittable line: \"", line, '"'));
      [result setCountWithId:IOSObjectArray_Get(fields, 0) withDouble:JavaLangDouble_parseDoubleWithNSString_(IOSObjectArray_Get(fields, 1))];
    }
  }
  return result;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpStatsClassicCounter)

@implementation EduStanfordNlpStatsClassicCounter_ClassicCounterFactory

- (instancetype)initWithEduStanfordNlpUtilMapFactory:(EduStanfordNlpUtilMapFactory *)mf {
  EduStanfordNlpStatsClassicCounter_ClassicCounterFactory_initWithEduStanfordNlpUtilMapFactory_(self, mf);
  return self;
}

- (id<EduStanfordNlpStatsCounter>)create {
  return new_EduStanfordNlpStatsClassicCounter_initWithEduStanfordNlpUtilMapFactory_(mf_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, 1, -1, -1 },
    { NULL, "LEduStanfordNlpStatsCounter;", 0x1, -1, -1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpUtilMapFactory:);
  methods[1].selector = @selector(create);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpStatsClassicCounter_ClassicCounterFactory_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "mf_", "LEduStanfordNlpUtilMapFactory;", .constantValue.asLong = 0, 0x12, -1, -1, 3, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpUtilMapFactory;", "(Ledu/stanford/nlp/util/MapFactory<TE;Ledu/stanford/nlp/util/MutableDouble;>;)V", "()Ledu/stanford/nlp/stats/Counter<TE;>;", "Ledu/stanford/nlp/util/MapFactory<TE;Ledu/stanford/nlp/util/MutableDouble;>;", "LEduStanfordNlpStatsClassicCounter;", "<E:Ljava/lang/Object;>Ljava/lang/Object;Ledu/stanford/nlp/util/Factory<Ledu/stanford/nlp/stats/Counter<TE;>;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpStatsClassicCounter_ClassicCounterFactory = { "ClassicCounterFactory", "edu.stanford.nlp.stats", ptrTable, methods, fields, 7, 0xa, 2, 2, 4, -1, -1, 5, -1 };
  return &_EduStanfordNlpStatsClassicCounter_ClassicCounterFactory;
}

@end

void EduStanfordNlpStatsClassicCounter_ClassicCounterFactory_initWithEduStanfordNlpUtilMapFactory_(EduStanfordNlpStatsClassicCounter_ClassicCounterFactory *self, EduStanfordNlpUtilMapFactory *mf) {
  NSObject_init(self);
  self->mf_ = mf;
}

EduStanfordNlpStatsClassicCounter_ClassicCounterFactory *new_EduStanfordNlpStatsClassicCounter_ClassicCounterFactory_initWithEduStanfordNlpUtilMapFactory_(EduStanfordNlpUtilMapFactory *mf) {
  J2OBJC_NEW_IMPL(EduStanfordNlpStatsClassicCounter_ClassicCounterFactory, initWithEduStanfordNlpUtilMapFactory_, mf)
}

EduStanfordNlpStatsClassicCounter_ClassicCounterFactory *create_EduStanfordNlpStatsClassicCounter_ClassicCounterFactory_initWithEduStanfordNlpUtilMapFactory_(EduStanfordNlpUtilMapFactory *mf) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpStatsClassicCounter_ClassicCounterFactory, initWithEduStanfordNlpUtilMapFactory_, mf)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpStatsClassicCounter_ClassicCounterFactory)

@implementation EduStanfordNlpStatsClassicCounter_$1

- (id<JavaUtilIterator>)iterator {
  return new_EduStanfordNlpStatsClassicCounter_$1_$1_initWithEduStanfordNlpStatsClassicCounter_$1_(self);
}

- (jint)size {
  return [((id<JavaUtilMap>) nil_chk(this$0_->map_)) size];
}

- (jboolean)containsWithId:(id)v {
  return [v isKindOfClass:[JavaLangDouble class]] && [((id<JavaUtilCollection>) nil_chk([((id<JavaUtilMap>) nil_chk(this$0_->map_)) values])) containsWithId:new_EduStanfordNlpUtilMutableDouble_initWithNSNumber_((JavaLangDouble *) cast_chk(v, [JavaLangDouble class]))];
}

- (instancetype)initWithEduStanfordNlpStatsClassicCounter:(EduStanfordNlpStatsClassicCounter *)outer$ {
  EduStanfordNlpStatsClassicCounter_$1_initWithEduStanfordNlpStatsClassicCounter_(self, outer$);
  return self;
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(iterator);
  methods[1].selector = @selector(size);
  methods[2].selector = @selector(containsWithId:);
  methods[3].selector = @selector(initWithEduStanfordNlpStatsClassicCounter:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LEduStanfordNlpStatsClassicCounter;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Iterator<Ljava/lang/Double;>;", "contains", "LNSObject;", "LEduStanfordNlpStatsClassicCounter;", "values", "Ljava/util/AbstractCollection<Ljava/lang/Double;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpStatsClassicCounter_$1 = { "", "edu.stanford.nlp.stats", ptrTable, methods, fields, 7, 0x8008, 4, 1, 3, -1, 4, 5, -1 };
  return &_EduStanfordNlpStatsClassicCounter_$1;
}

@end

void EduStanfordNlpStatsClassicCounter_$1_initWithEduStanfordNlpStatsClassicCounter_(EduStanfordNlpStatsClassicCounter_$1 *self, EduStanfordNlpStatsClassicCounter *outer$) {
  self->this$0_ = outer$;
  JavaUtilAbstractCollection_init(self);
}

EduStanfordNlpStatsClassicCounter_$1 *new_EduStanfordNlpStatsClassicCounter_$1_initWithEduStanfordNlpStatsClassicCounter_(EduStanfordNlpStatsClassicCounter *outer$) {
  J2OBJC_NEW_IMPL(EduStanfordNlpStatsClassicCounter_$1, initWithEduStanfordNlpStatsClassicCounter_, outer$)
}

EduStanfordNlpStatsClassicCounter_$1 *create_EduStanfordNlpStatsClassicCounter_$1_initWithEduStanfordNlpStatsClassicCounter_(EduStanfordNlpStatsClassicCounter *outer$) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpStatsClassicCounter_$1, initWithEduStanfordNlpStatsClassicCounter_, outer$)
}

@implementation EduStanfordNlpStatsClassicCounter_$1_$1

- (jboolean)hasNext {
  return [((id<JavaUtilIterator>) nil_chk(inner_)) hasNext];
}

- (JavaLangDouble *)next {
  return JavaLangDouble_valueOfWithDouble_([((EduStanfordNlpUtilMutableDouble *) nil_chk([((id<JavaUtilIterator>) nil_chk(inner_)) next])) doubleValue]);
}

- (void)remove {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (instancetype)initWithEduStanfordNlpStatsClassicCounter_$1:(EduStanfordNlpStatsClassicCounter_$1 *)outer$ {
  EduStanfordNlpStatsClassicCounter_$1_$1_initWithEduStanfordNlpStatsClassicCounter_$1_(self, outer$);
  return self;
}

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaUtilIterator_forEachRemainingWithJavaUtilFunctionConsumer_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangDouble;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(hasNext);
  methods[1].selector = @selector(next);
  methods[2].selector = @selector(remove);
  methods[3].selector = @selector(initWithEduStanfordNlpStatsClassicCounter_$1:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "inner_", "LJavaUtilIterator;", .constantValue.asLong = 0, 0x0, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpStatsClassicCounter_$1;", "Ljava/util/Iterator<Ledu/stanford/nlp/util/MutableDouble;>;", "iterator", "Ljava/lang/Object;Ljava/util/Iterator<Ljava/lang/Double;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpStatsClassicCounter_$1_$1 = { "", "edu.stanford.nlp.stats", ptrTable, methods, fields, 7, 0x8008, 4, 1, 0, -1, 2, 3, -1 };
  return &_EduStanfordNlpStatsClassicCounter_$1_$1;
}

@end

void EduStanfordNlpStatsClassicCounter_$1_$1_initWithEduStanfordNlpStatsClassicCounter_$1_(EduStanfordNlpStatsClassicCounter_$1_$1 *self, EduStanfordNlpStatsClassicCounter_$1 *outer$) {
  NSObject_init(self);
  self->inner_ = [((id<JavaUtilCollection>) nil_chk([((id<JavaUtilMap>) nil_chk(outer$->this$0_->map_)) values])) iterator];
}

EduStanfordNlpStatsClassicCounter_$1_$1 *new_EduStanfordNlpStatsClassicCounter_$1_$1_initWithEduStanfordNlpStatsClassicCounter_$1_(EduStanfordNlpStatsClassicCounter_$1 *outer$) {
  J2OBJC_NEW_IMPL(EduStanfordNlpStatsClassicCounter_$1_$1, initWithEduStanfordNlpStatsClassicCounter_$1_, outer$)
}

EduStanfordNlpStatsClassicCounter_$1_$1 *create_EduStanfordNlpStatsClassicCounter_$1_$1_initWithEduStanfordNlpStatsClassicCounter_$1_(EduStanfordNlpStatsClassicCounter_$1 *outer$) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpStatsClassicCounter_$1_$1, initWithEduStanfordNlpStatsClassicCounter_$1_, outer$)
}

@implementation EduStanfordNlpStatsClassicCounter_$2

- (id<JavaUtilIterator>)iterator {
  return new_EduStanfordNlpStatsClassicCounter_$2_$1_initWithEduStanfordNlpStatsClassicCounter_$2_(self);
}

- (jint)size {
  return [((id<JavaUtilMap>) nil_chk(this$0_->map_)) size];
}

- (instancetype)initWithEduStanfordNlpStatsClassicCounter:(EduStanfordNlpStatsClassicCounter *)outer$ {
  EduStanfordNlpStatsClassicCounter_$2_initWithEduStanfordNlpStatsClassicCounter_(self, outer$);
  return self;
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(iterator);
  methods[1].selector = @selector(size);
  methods[2].selector = @selector(initWithEduStanfordNlpStatsClassicCounter:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LEduStanfordNlpStatsClassicCounter;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Iterator<Ljava/util/Map$Entry<TE;Ljava/lang/Double;>;>;", "LEduStanfordNlpStatsClassicCounter;", "entrySet", "Ljava/util/AbstractSet<Ljava/util/Map$Entry<TE;Ljava/lang/Double;>;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpStatsClassicCounter_$2 = { "", "edu.stanford.nlp.stats", ptrTable, methods, fields, 7, 0x8008, 3, 1, 1, -1, 2, 3, -1 };
  return &_EduStanfordNlpStatsClassicCounter_$2;
}

@end

void EduStanfordNlpStatsClassicCounter_$2_initWithEduStanfordNlpStatsClassicCounter_(EduStanfordNlpStatsClassicCounter_$2 *self, EduStanfordNlpStatsClassicCounter *outer$) {
  self->this$0_ = outer$;
  JavaUtilAbstractSet_init(self);
}

EduStanfordNlpStatsClassicCounter_$2 *new_EduStanfordNlpStatsClassicCounter_$2_initWithEduStanfordNlpStatsClassicCounter_(EduStanfordNlpStatsClassicCounter *outer$) {
  J2OBJC_NEW_IMPL(EduStanfordNlpStatsClassicCounter_$2, initWithEduStanfordNlpStatsClassicCounter_, outer$)
}

EduStanfordNlpStatsClassicCounter_$2 *create_EduStanfordNlpStatsClassicCounter_$2_initWithEduStanfordNlpStatsClassicCounter_(EduStanfordNlpStatsClassicCounter *outer$) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpStatsClassicCounter_$2, initWithEduStanfordNlpStatsClassicCounter_, outer$)
}

@implementation EduStanfordNlpStatsClassicCounter_$2_$1

- (jboolean)hasNext {
  return [((id<JavaUtilIterator>) nil_chk(inner_)) hasNext];
}

- (id<JavaUtilMap_Entry>)next {
  return new_EduStanfordNlpStatsClassicCounter_$2_$1_$1_initWithEduStanfordNlpStatsClassicCounter_$2_$1_(self);
}

- (void)remove {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (instancetype)initWithEduStanfordNlpStatsClassicCounter_$2:(EduStanfordNlpStatsClassicCounter_$2 *)outer$ {
  EduStanfordNlpStatsClassicCounter_$2_$1_initWithEduStanfordNlpStatsClassicCounter_$2_(self, outer$);
  return self;
}

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaUtilIterator_forEachRemainingWithJavaUtilFunctionConsumer_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap_Entry;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(hasNext);
  methods[1].selector = @selector(next);
  methods[2].selector = @selector(remove);
  methods[3].selector = @selector(initWithEduStanfordNlpStatsClassicCounter_$2:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LEduStanfordNlpStatsClassicCounter_$2;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "inner_", "LJavaUtilIterator;", .constantValue.asLong = 0, 0x10, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map$Entry<TE;Ljava/lang/Double;>;", "LEduStanfordNlpStatsClassicCounter_$2;", "Ljava/util/Iterator<Ljava/util/Map$Entry<TE;Ledu/stanford/nlp/util/MutableDouble;>;>;", "iterator", "Ljava/lang/Object;Ljava/util/Iterator<Ljava/util/Map$Entry<TE;Ljava/lang/Double;>;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpStatsClassicCounter_$2_$1 = { "", "edu.stanford.nlp.stats", ptrTable, methods, fields, 7, 0x8008, 4, 2, 1, -1, 3, 4, -1 };
  return &_EduStanfordNlpStatsClassicCounter_$2_$1;
}

@end

void EduStanfordNlpStatsClassicCounter_$2_$1_initWithEduStanfordNlpStatsClassicCounter_$2_(EduStanfordNlpStatsClassicCounter_$2_$1 *self, EduStanfordNlpStatsClassicCounter_$2 *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
  self->inner_ = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(outer$->this$0_->map_)) entrySet])) iterator];
}

EduStanfordNlpStatsClassicCounter_$2_$1 *new_EduStanfordNlpStatsClassicCounter_$2_$1_initWithEduStanfordNlpStatsClassicCounter_$2_(EduStanfordNlpStatsClassicCounter_$2 *outer$) {
  J2OBJC_NEW_IMPL(EduStanfordNlpStatsClassicCounter_$2_$1, initWithEduStanfordNlpStatsClassicCounter_$2_, outer$)
}

EduStanfordNlpStatsClassicCounter_$2_$1 *create_EduStanfordNlpStatsClassicCounter_$2_$1_initWithEduStanfordNlpStatsClassicCounter_$2_(EduStanfordNlpStatsClassicCounter_$2 *outer$) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpStatsClassicCounter_$2_$1, initWithEduStanfordNlpStatsClassicCounter_$2_, outer$)
}

@implementation EduStanfordNlpStatsClassicCounter_$2_$1_$1

- (jdouble)getDoubleValue {
  return [((EduStanfordNlpUtilMutableDouble *) nil_chk([((id<JavaUtilMap_Entry>) nil_chk(e_)) getValue])) doubleValue];
}

- (jdouble)setValueWithDouble:(jdouble)value {
  jdouble old = [((EduStanfordNlpUtilMutableDouble *) nil_chk([((id<JavaUtilMap_Entry>) nil_chk(e_)) getValue])) doubleValue];
  [((EduStanfordNlpUtilMutableDouble *) nil_chk([e_ getValue])) setWithDouble:value];
  this$0_->this$0_->this$0_->totalCount_ = this$0_->this$0_->this$0_->totalCount_ - old + value;
  return old;
}

- (id)getKey {
  return [((id<JavaUtilMap_Entry>) nil_chk(e_)) getKey];
}

- (JavaLangDouble *)getValue {
  return JavaLangDouble_valueOfWithDouble_([self getDoubleValue]);
}

- (JavaLangDouble *)setValueWithId:(JavaLangDouble *)value {
  return JavaLangDouble_valueOfWithDouble_([self setValueWithDouble:[((JavaLangDouble *) nil_chk(value)) doubleValue]]);
}

- (instancetype)initWithEduStanfordNlpStatsClassicCounter_$2_$1:(EduStanfordNlpStatsClassicCounter_$2_$1 *)outer$ {
  EduStanfordNlpStatsClassicCounter_$2_$1_$1_initWithEduStanfordNlpStatsClassicCounter_$2_$1_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "LJavaLangDouble;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangDouble;", 0x1, 0, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(getDoubleValue);
  methods[1].selector = @selector(setValueWithDouble:);
  methods[2].selector = @selector(getKey);
  methods[3].selector = @selector(getValue);
  methods[4].selector = @selector(setValueWithId:);
  methods[5].selector = @selector(initWithEduStanfordNlpStatsClassicCounter_$2_$1:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LEduStanfordNlpStatsClassicCounter_$2_$1;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "e_", "LJavaUtilMap_Entry;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "setValue", "D", "()TE;", "LJavaLangDouble;", "LEduStanfordNlpStatsClassicCounter_$2_$1;", "Ljava/util/Map$Entry<TE;Ledu/stanford/nlp/util/MutableDouble;>;", "next", "Ljava/lang/Object;Ljava/util/Map$Entry<TE;Ljava/lang/Double;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpStatsClassicCounter_$2_$1_$1 = { "", "edu.stanford.nlp.stats", ptrTable, methods, fields, 7, 0x8008, 6, 2, 4, -1, 6, 7, -1 };
  return &_EduStanfordNlpStatsClassicCounter_$2_$1_$1;
}

@end

void EduStanfordNlpStatsClassicCounter_$2_$1_$1_initWithEduStanfordNlpStatsClassicCounter_$2_$1_(EduStanfordNlpStatsClassicCounter_$2_$1_$1 *self, EduStanfordNlpStatsClassicCounter_$2_$1 *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
  self->e_ = [((id<JavaUtilIterator>) nil_chk(outer$->inner_)) next];
}

EduStanfordNlpStatsClassicCounter_$2_$1_$1 *new_EduStanfordNlpStatsClassicCounter_$2_$1_$1_initWithEduStanfordNlpStatsClassicCounter_$2_$1_(EduStanfordNlpStatsClassicCounter_$2_$1 *outer$) {
  J2OBJC_NEW_IMPL(EduStanfordNlpStatsClassicCounter_$2_$1_$1, initWithEduStanfordNlpStatsClassicCounter_$2_$1_, outer$)
}

EduStanfordNlpStatsClassicCounter_$2_$1_$1 *create_EduStanfordNlpStatsClassicCounter_$2_$1_$1_initWithEduStanfordNlpStatsClassicCounter_$2_$1_(EduStanfordNlpStatsClassicCounter_$2_$1 *outer$) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpStatsClassicCounter_$2_$1_$1, initWithEduStanfordNlpStatsClassicCounter_$2_$1_, outer$)
}
