//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/stats/Distribution.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/stats/ClassicCounter.h"
#include "edu/stanford/nlp/stats/Counter.h"
#include "edu/stanford/nlp/stats/Counters.h"
#include "edu/stanford/nlp/stats/Distribution.h"
#include "edu/stanford/nlp/stats/SimpleGoodTuring.h"
#include "edu/stanford/nlp/util/Generics.h"
#include "java/io/PrintStream.h"
#include "java/lang/Double.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/text/DecimalFormat.h"
#include "java/text/NumberFormat.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/Comparator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/PriorityQueue.h"
#include "java/util/Random.h"
#include "java/util/Set.h"
#include "java/util/function/Function.h"
#include "java/util/function/ToDoubleFunction.h"
#include "java/util/function/ToIntFunction.h"
#include "java/util/function/ToLongFunction.h"

@interface EduStanfordNlpStatsDistribution () {
 @public
  jint numberOfKeys_;
  jdouble reservedMass_;
}

+ (IOSIntArray *)getCountCountsWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)counter;

+ (void)validateCounterWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)counts;

+ (id<EduStanfordNlpStatsCounter>)collectCountCountsWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)counts;

+ (IOSObjectArray *)countCounts2IntArraysWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)countCounts;

- (instancetype)init;

@end

inline jlong EduStanfordNlpStatsDistribution_get_serialVersionUID();
#define EduStanfordNlpStatsDistribution_serialVersionUID 6707148234288637809LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpStatsDistribution, serialVersionUID, jlong)

inline jint EduStanfordNlpStatsDistribution_get_NUM_ENTRIES_IN_STRING();
#define EduStanfordNlpStatsDistribution_NUM_ENTRIES_IN_STRING 20
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpStatsDistribution, NUM_ENTRIES_IN_STRING, jint)

inline jboolean EduStanfordNlpStatsDistribution_get_verbose();
#define EduStanfordNlpStatsDistribution_verbose false
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpStatsDistribution, verbose, jboolean)

__attribute__((unused)) static IOSIntArray *EduStanfordNlpStatsDistribution_getCountCountsWithEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> counter);

__attribute__((unused)) static void EduStanfordNlpStatsDistribution_validateCounterWithEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> counts);

__attribute__((unused)) static id<EduStanfordNlpStatsCounter> EduStanfordNlpStatsDistribution_collectCountCountsWithEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> counts);

__attribute__((unused)) static IOSObjectArray *EduStanfordNlpStatsDistribution_countCounts2IntArraysWithEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> countCounts);

__attribute__((unused)) static void EduStanfordNlpStatsDistribution_init(EduStanfordNlpStatsDistribution *self);

__attribute__((unused)) static EduStanfordNlpStatsDistribution *new_EduStanfordNlpStatsDistribution_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpStatsDistribution *create_EduStanfordNlpStatsDistribution_init();

@interface EduStanfordNlpStatsDistribution_DynamicDistribution : EduStanfordNlpStatsDistribution {
 @public
  EduStanfordNlpStatsDistribution *prior_;
  jdouble priorMultiplier_;
}

- (instancetype)initWithEduStanfordNlpStatsDistribution:(EduStanfordNlpStatsDistribution *)prior
                                             withDouble:(jdouble)priorMultiplier;

- (jdouble)probabilityOfWithId:(id)o;

- (jdouble)totalCount;

- (id<JavaUtilSet>)keySet;

- (void)addToKeySetWithId:(id)o;

- (jboolean)containsKeyWithId:(id)key;

- (id)argmax;

- (id)sampleFrom;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpStatsDistribution_DynamicDistribution)

J2OBJC_FIELD_SETTER(EduStanfordNlpStatsDistribution_DynamicDistribution, prior_, EduStanfordNlpStatsDistribution *)

inline jlong EduStanfordNlpStatsDistribution_DynamicDistribution_get_serialVersionUID();
#define EduStanfordNlpStatsDistribution_DynamicDistribution_serialVersionUID -6073849364871185LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpStatsDistribution_DynamicDistribution, serialVersionUID, jlong)

__attribute__((unused)) static void EduStanfordNlpStatsDistribution_DynamicDistribution_initWithEduStanfordNlpStatsDistribution_withDouble_(EduStanfordNlpStatsDistribution_DynamicDistribution *self, EduStanfordNlpStatsDistribution *prior, jdouble priorMultiplier);

__attribute__((unused)) static EduStanfordNlpStatsDistribution_DynamicDistribution *new_EduStanfordNlpStatsDistribution_DynamicDistribution_initWithEduStanfordNlpStatsDistribution_withDouble_(EduStanfordNlpStatsDistribution *prior, jdouble priorMultiplier) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpStatsDistribution_DynamicDistribution *create_EduStanfordNlpStatsDistribution_DynamicDistribution_initWithEduStanfordNlpStatsDistribution_withDouble_(EduStanfordNlpStatsDistribution *prior, jdouble priorMultiplier);

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpStatsDistribution_DynamicDistribution)

@interface EduStanfordNlpStatsDistribution_$Lambda$1 : NSObject < JavaUtilComparator > {
 @public
  EduStanfordNlpStatsDistribution *this$0_;
}

- (jint)compareWithId:(id)o1
               withId:(id)o2;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpStatsDistribution_$Lambda$1)

J2OBJC_FIELD_SETTER(EduStanfordNlpStatsDistribution_$Lambda$1, this$0_, EduStanfordNlpStatsDistribution *)

__attribute__((unused)) static void EduStanfordNlpStatsDistribution_$Lambda$1_initWithEduStanfordNlpStatsDistribution_(EduStanfordNlpStatsDistribution_$Lambda$1 *self, EduStanfordNlpStatsDistribution *outer$);

__attribute__((unused)) static EduStanfordNlpStatsDistribution_$Lambda$1 *new_EduStanfordNlpStatsDistribution_$Lambda$1_initWithEduStanfordNlpStatsDistribution_(EduStanfordNlpStatsDistribution *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpStatsDistribution_$Lambda$1 *create_EduStanfordNlpStatsDistribution_$Lambda$1_initWithEduStanfordNlpStatsDistribution_(EduStanfordNlpStatsDistribution *outer$);

@implementation EduStanfordNlpStatsDistribution

- (id<EduStanfordNlpStatsCounter>)getCounter {
  return counter_;
}

- (id)drawSample {
  return [self sampleFrom];
}

- (id)drawSampleWithJavaUtilRandom:(JavaUtilRandom *)random {
  return [self sampleFromWithJavaUtilRandom:random];
}

- (NSString *)toStringWithJavaTextNumberFormat:(JavaTextNumberFormat *)nf {
  return EduStanfordNlpStatsCounters_toStringWithEduStanfordNlpStatsCounter_withJavaTextNumberFormat_(counter_, nf);
}

- (jdouble)getReservedMass {
  return reservedMass_;
}

- (jint)getNumberOfKeys {
  return numberOfKeys_;
}

- (id<JavaUtilSet>)keySet {
  return [((id<EduStanfordNlpStatsCounter>) nil_chk(counter_)) keySet];
}

- (jboolean)containsKeyWithId:(id)key {
  return [((id<EduStanfordNlpStatsCounter>) nil_chk(counter_)) containsKeyWithId:key];
}

- (jdouble)getCountWithId:(id)key {
  return [((id<EduStanfordNlpStatsCounter>) nil_chk(counter_)) getCountWithId:key];
}

+ (EduStanfordNlpStatsDistribution *)getDistributionFromPartiallySpecifiedCounterWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c
                                                                                                        withInt:(jint)numKeys {
  return EduStanfordNlpStatsDistribution_getDistributionFromPartiallySpecifiedCounterWithEduStanfordNlpStatsCounter_withInt_(c, numKeys);
}

+ (EduStanfordNlpStatsDistribution *)getUniformDistributionWithJavaUtilCollection:(id<JavaUtilCollection>)s {
  return EduStanfordNlpStatsDistribution_getUniformDistributionWithJavaUtilCollection_(s);
}

+ (EduStanfordNlpStatsDistribution *)getPerturbedUniformDistributionWithJavaUtilCollection:(id<JavaUtilCollection>)s
                                                                        withJavaUtilRandom:(JavaUtilRandom *)r {
  return EduStanfordNlpStatsDistribution_getPerturbedUniformDistributionWithJavaUtilCollection_withJavaUtilRandom_(s, r);
}

+ (EduStanfordNlpStatsDistribution *)getPerturbedDistributionWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)wordCounter
                                                                         withJavaUtilRandom:(JavaUtilRandom *)r {
  return EduStanfordNlpStatsDistribution_getPerturbedDistributionWithEduStanfordNlpStatsCounter_withJavaUtilRandom_(wordCounter, r);
}

+ (EduStanfordNlpStatsDistribution *)getDistributionWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)counter {
  return EduStanfordNlpStatsDistribution_getDistributionWithEduStanfordNlpStatsCounter_(counter);
}

+ (EduStanfordNlpStatsDistribution *)getDistributionWithReservedMassWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)counter
                                                                                        withDouble:(jdouble)reservedMass {
  return EduStanfordNlpStatsDistribution_getDistributionWithReservedMassWithEduStanfordNlpStatsCounter_withDouble_(counter, reservedMass);
}

+ (EduStanfordNlpStatsDistribution *)getDistributionFromLogValuesWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)counter {
  return EduStanfordNlpStatsDistribution_getDistributionFromLogValuesWithEduStanfordNlpStatsCounter_(counter);
}

+ (EduStanfordNlpStatsDistribution *)absolutelyDiscountedDistributionWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)counter
                                                                                            withInt:(jint)numberOfKeys
                                                                                         withDouble:(jdouble)discount {
  return EduStanfordNlpStatsDistribution_absolutelyDiscountedDistributionWithEduStanfordNlpStatsCounter_withInt_withDouble_(counter, numberOfKeys, discount);
}

+ (EduStanfordNlpStatsDistribution *)laplaceSmoothedDistributionWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)counter
                                                                                       withInt:(jint)numberOfKeys {
  return EduStanfordNlpStatsDistribution_laplaceSmoothedDistributionWithEduStanfordNlpStatsCounter_withInt_(counter, numberOfKeys);
}

+ (EduStanfordNlpStatsDistribution *)laplaceSmoothedDistributionWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)counter
                                                                                       withInt:(jint)numberOfKeys
                                                                                    withDouble:(jdouble)lambda {
  return EduStanfordNlpStatsDistribution_laplaceSmoothedDistributionWithEduStanfordNlpStatsCounter_withInt_withDouble_(counter, numberOfKeys, lambda);
}

+ (EduStanfordNlpStatsDistribution *)laplaceWithExplicitUnknownWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)counter
                                                                                   withDouble:(jdouble)lambda
                                                                                       withId:(id)UNK {
  return EduStanfordNlpStatsDistribution_laplaceWithExplicitUnknownWithEduStanfordNlpStatsCounter_withDouble_withId_(counter, lambda, UNK);
}

+ (EduStanfordNlpStatsDistribution *)goodTuringSmoothedCounterWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)counter
                                                                                     withInt:(jint)numberOfKeys {
  return EduStanfordNlpStatsDistribution_goodTuringSmoothedCounterWithEduStanfordNlpStatsCounter_withInt_(counter, numberOfKeys);
}

+ (EduStanfordNlpStatsDistribution *)goodTuringWithExplicitUnknownWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)counter
                                                                                          withId:(id)UNK {
  return EduStanfordNlpStatsDistribution_goodTuringWithExplicitUnknownWithEduStanfordNlpStatsCounter_withId_(counter, UNK);
}

+ (IOSIntArray *)getCountCountsWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)counter {
  return EduStanfordNlpStatsDistribution_getCountCountsWithEduStanfordNlpStatsCounter_(counter);
}

+ (EduStanfordNlpStatsDistribution *)simpleGoodTuringWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)counter
                                                                            withInt:(jint)numberOfKeys {
  return EduStanfordNlpStatsDistribution_simpleGoodTuringWithEduStanfordNlpStatsCounter_withInt_(counter, numberOfKeys);
}

+ (void)validateCounterWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)counts {
  EduStanfordNlpStatsDistribution_validateCounterWithEduStanfordNlpStatsCounter_(counts);
}

+ (id<EduStanfordNlpStatsCounter>)collectCountCountsWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)counts {
  return EduStanfordNlpStatsDistribution_collectCountCountsWithEduStanfordNlpStatsCounter_(counts);
}

+ (IOSObjectArray *)countCounts2IntArraysWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)countCounts {
  return EduStanfordNlpStatsDistribution_countCounts2IntArraysWithEduStanfordNlpStatsCounter_(countCounts);
}

+ (EduStanfordNlpStatsDistribution *)distributionWithDirichletPriorWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c
                                                              withEduStanfordNlpStatsDistribution:(EduStanfordNlpStatsDistribution *)prior
                                                                                       withDouble:(jdouble)weight {
  return EduStanfordNlpStatsDistribution_distributionWithDirichletPriorWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsDistribution_withDouble_(c, prior, weight);
}

+ (EduStanfordNlpStatsDistribution *)dynamicCounterWithDirichletPriorWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c
                                                                withEduStanfordNlpStatsDistribution:(EduStanfordNlpStatsDistribution *)prior
                                                                                         withDouble:(jdouble)weight {
  return EduStanfordNlpStatsDistribution_dynamicCounterWithDirichletPriorWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsDistribution_withDouble_(c, prior, weight);
}

+ (EduStanfordNlpStatsDistribution *)distributionFromLogisticCounterWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)cntr {
  return EduStanfordNlpStatsDistribution_distributionFromLogisticCounterWithEduStanfordNlpStatsCounter_(cntr);
}

- (id)sampleFrom {
  return EduStanfordNlpStatsCounters_sampleWithEduStanfordNlpStatsCounter_(counter_);
}

- (id)sampleFromWithJavaUtilRandom:(JavaUtilRandom *)random {
  return EduStanfordNlpStatsCounters_sampleWithEduStanfordNlpStatsCounter_withJavaUtilRandom_(counter_, random);
}

- (jdouble)probabilityOfWithId:(id)key {
  if ([((id<EduStanfordNlpStatsCounter>) nil_chk(counter_)) containsKeyWithId:key]) {
    return [((id<EduStanfordNlpStatsCounter>) nil_chk(counter_)) getCountWithId:key];
  }
  else {
    jint remainingKeys = numberOfKeys_ - [((id<EduStanfordNlpStatsCounter>) nil_chk(counter_)) size];
    if (remainingKeys <= 0) {
      return 0.0;
    }
    else {
      return (reservedMass_ / remainingKeys);
    }
  }
}

- (jdouble)logProbabilityOfWithId:(id)key {
  jdouble prob = [self probabilityOfWithId:key];
  return JavaLangMath_logWithDouble_(prob);
}

- (id)argmax {
  return EduStanfordNlpStatsCounters_argmaxWithEduStanfordNlpStatsCounter_(counter_);
}

- (jdouble)totalCount {
  return [((id<EduStanfordNlpStatsCounter>) nil_chk(counter_)) totalCount] + reservedMass_;
}

- (void)addToKeySetWithId:(id)o {
  if (![((id<EduStanfordNlpStatsCounter>) nil_chk(counter_)) containsKeyWithId:o]) {
    [((id<EduStanfordNlpStatsCounter>) nil_chk(counter_)) setCountWithId:o withDouble:0];
  }
}

- (jboolean)isEqual:(id)o {
  if (self == o) {
    return true;
  }
  return [o isKindOfClass:[EduStanfordNlpStatsDistribution class]] && [self equalsWithEduStanfordNlpStatsDistribution:(EduStanfordNlpStatsDistribution *) cast_chk(o, [EduStanfordNlpStatsDistribution class])];
}

- (jboolean)equalsWithEduStanfordNlpStatsDistribution:(EduStanfordNlpStatsDistribution *)distribution {
  if (numberOfKeys_ != ((EduStanfordNlpStatsDistribution *) nil_chk(distribution))->numberOfKeys_) {
    return false;
  }
  if (reservedMass_ != distribution->reservedMass_) {
    return false;
  }
  return [((id<EduStanfordNlpStatsCounter>) nil_chk(counter_)) isEqual:distribution->counter_];
}

- (NSUInteger)hash {
  jint result = numberOfKeys_;
  jlong temp = JavaLangDouble_doubleToLongBitsWithDouble_(reservedMass_);
  result = 29 * result + (jint) (temp ^ (JreURShift64(temp, 32)));
  result = 29 * result + ((jint) [((id<EduStanfordNlpStatsCounter>) nil_chk(counter_)) hash]);
  return result;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpStatsDistribution_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)description {
  JavaTextNumberFormat *nf = new_JavaTextDecimalFormat_initWithNSString_(@"0.0##E0");
  id<JavaUtilList> keyList = new_JavaUtilArrayList_initWithJavaUtilCollection_([self keySet]);
  JavaUtilCollections_sortWithJavaUtilList_withJavaUtilComparator_(keyList, new_EduStanfordNlpStatsDistribution_$Lambda$1_initWithEduStanfordNlpStatsDistribution_(self));
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  (void) [sb appendWithNSString:@"["];
  for (jint i = 0; i < EduStanfordNlpStatsDistribution_NUM_ENTRIES_IN_STRING; i++) {
    if ([keyList size] <= i) {
      break;
    }
    id o = [keyList getWithInt:i];
    jdouble prob = [self probabilityOfWithId:o];
    (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithId:o])) appendWithNSString:@":"])) appendWithNSString:[nf formatWithDouble:prob]])) appendWithNSString:@" "];
  }
  (void) [sb appendWithNSString:@"]"];
  return [sb description];
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  EduStanfordNlpStatsDistribution_mainWithNSStringArray_(args);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LEduStanfordNlpStatsCounter;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 7, -1, -1 },
    { NULL, "Z", 0x1, 8, 9, -1, 10, -1, -1 },
    { NULL, "D", 0x1, 11, 9, -1, 12, -1, -1 },
    { NULL, "LEduStanfordNlpStatsDistribution;", 0x9, 13, 14, -1, 15, -1, -1 },
    { NULL, "LEduStanfordNlpStatsDistribution;", 0x9, 16, 17, -1, 18, -1, -1 },
    { NULL, "LEduStanfordNlpStatsDistribution;", 0x9, 19, 20, -1, 21, -1, -1 },
    { NULL, "LEduStanfordNlpStatsDistribution;", 0x9, 22, 23, -1, 24, -1, -1 },
    { NULL, "LEduStanfordNlpStatsDistribution;", 0x9, 25, 26, -1, 27, -1, -1 },
    { NULL, "LEduStanfordNlpStatsDistribution;", 0x9, 28, 29, -1, 30, -1, -1 },
    { NULL, "LEduStanfordNlpStatsDistribution;", 0x9, 31, 26, -1, 27, -1, -1 },
    { NULL, "LEduStanfordNlpStatsDistribution;", 0x9, 32, 33, -1, 34, -1, -1 },
    { NULL, "LEduStanfordNlpStatsDistribution;", 0x9, 35, 14, -1, 15, -1, -1 },
    { NULL, "LEduStanfordNlpStatsDistribution;", 0x9, 35, 33, -1, 34, -1, -1 },
    { NULL, "LEduStanfordNlpStatsDistribution;", 0x9, 36, 37, -1, 38, -1, -1 },
    { NULL, "LEduStanfordNlpStatsDistribution;", 0x9, 39, 14, -1, 15, -1, -1 },
    { NULL, "LEduStanfordNlpStatsDistribution;", 0x9, 40, 41, -1, 42, -1, -1 },
    { NULL, "[I", 0xa, 43, 26, -1, 44, -1, -1 },
    { NULL, "LEduStanfordNlpStatsDistribution;", 0x9, 45, 14, -1, 15, -1, -1 },
    { NULL, "V", 0xa, 46, 26, -1, 47, -1, -1 },
    { NULL, "LEduStanfordNlpStatsCounter;", 0xa, 48, 26, -1, 49, -1, -1 },
    { NULL, "[[I", 0xa, 50, 26, -1, 51, -1, -1 },
    { NULL, "LEduStanfordNlpStatsDistribution;", 0x9, 52, 53, -1, 54, -1, -1 },
    { NULL, "LEduStanfordNlpStatsDistribution;", 0x9, 55, 53, -1, 54, -1, -1 },
    { NULL, "LEduStanfordNlpStatsDistribution;", 0x9, 56, 26, -1, 27, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 57, 3, -1, 4, -1, -1 },
    { NULL, "D", 0x1, 58, 9, -1, 12, -1, -1 },
    { NULL, "D", 0x1, 59, 9, -1, 12, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 60, 9, -1, 61, -1, -1 },
    { NULL, "Z", 0x1, 62, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 62, 63, -1, 64, -1, -1 },
    { NULL, "I", 0x1, 65, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 66, 67, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(getCounter);
  methods[1].selector = @selector(drawSample);
  methods[2].selector = @selector(drawSampleWithJavaUtilRandom:);
  methods[3].selector = @selector(toStringWithJavaTextNumberFormat:);
  methods[4].selector = @selector(getReservedMass);
  methods[5].selector = @selector(getNumberOfKeys);
  methods[6].selector = @selector(keySet);
  methods[7].selector = @selector(containsKeyWithId:);
  methods[8].selector = @selector(getCountWithId:);
  methods[9].selector = @selector(getDistributionFromPartiallySpecifiedCounterWithEduStanfordNlpStatsCounter:withInt:);
  methods[10].selector = @selector(getUniformDistributionWithJavaUtilCollection:);
  methods[11].selector = @selector(getPerturbedUniformDistributionWithJavaUtilCollection:withJavaUtilRandom:);
  methods[12].selector = @selector(getPerturbedDistributionWithEduStanfordNlpStatsCounter:withJavaUtilRandom:);
  methods[13].selector = @selector(getDistributionWithEduStanfordNlpStatsCounter:);
  methods[14].selector = @selector(getDistributionWithReservedMassWithEduStanfordNlpStatsCounter:withDouble:);
  methods[15].selector = @selector(getDistributionFromLogValuesWithEduStanfordNlpStatsCounter:);
  methods[16].selector = @selector(absolutelyDiscountedDistributionWithEduStanfordNlpStatsCounter:withInt:withDouble:);
  methods[17].selector = @selector(laplaceSmoothedDistributionWithEduStanfordNlpStatsCounter:withInt:);
  methods[18].selector = @selector(laplaceSmoothedDistributionWithEduStanfordNlpStatsCounter:withInt:withDouble:);
  methods[19].selector = @selector(laplaceWithExplicitUnknownWithEduStanfordNlpStatsCounter:withDouble:withId:);
  methods[20].selector = @selector(goodTuringSmoothedCounterWithEduStanfordNlpStatsCounter:withInt:);
  methods[21].selector = @selector(goodTuringWithExplicitUnknownWithEduStanfordNlpStatsCounter:withId:);
  methods[22].selector = @selector(getCountCountsWithEduStanfordNlpStatsCounter:);
  methods[23].selector = @selector(simpleGoodTuringWithEduStanfordNlpStatsCounter:withInt:);
  methods[24].selector = @selector(validateCounterWithEduStanfordNlpStatsCounter:);
  methods[25].selector = @selector(collectCountCountsWithEduStanfordNlpStatsCounter:);
  methods[26].selector = @selector(countCounts2IntArraysWithEduStanfordNlpStatsCounter:);
  methods[27].selector = @selector(distributionWithDirichletPriorWithEduStanfordNlpStatsCounter:withEduStanfordNlpStatsDistribution:withDouble:);
  methods[28].selector = @selector(dynamicCounterWithDirichletPriorWithEduStanfordNlpStatsCounter:withEduStanfordNlpStatsDistribution:withDouble:);
  methods[29].selector = @selector(distributionFromLogisticCounterWithEduStanfordNlpStatsCounter:);
  methods[30].selector = @selector(sampleFrom);
  methods[31].selector = @selector(sampleFromWithJavaUtilRandom:);
  methods[32].selector = @selector(probabilityOfWithId:);
  methods[33].selector = @selector(logProbabilityOfWithId:);
  methods[34].selector = @selector(argmax);
  methods[35].selector = @selector(totalCount);
  methods[36].selector = @selector(addToKeySetWithId:);
  methods[37].selector = @selector(isEqual:);
  methods[38].selector = @selector(equalsWithEduStanfordNlpStatsDistribution:);
  methods[39].selector = @selector(hash);
  methods[40].selector = @selector(init);
  methods[41].selector = @selector(description);
  methods[42].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpStatsDistribution_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "numberOfKeys_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "reservedMass_", "D", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "counter_", "LEduStanfordNlpStatsCounter;", .constantValue.asLong = 0, 0x4, -1, -1, 68, -1 },
    { "NUM_ENTRIES_IN_STRING", "I", .constantValue.asInt = EduStanfordNlpStatsDistribution_NUM_ENTRIES_IN_STRING, 0x1a, -1, -1, -1, -1 },
    { "verbose", "Z", .constantValue.asBOOL = EduStanfordNlpStatsDistribution_verbose, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "()Ledu/stanford/nlp/stats/Counter<TE;>;", "()TE;", "drawSample", "LJavaUtilRandom;", "(Ljava/util/Random;)TE;", "toString", "LJavaTextNumberFormat;", "()Ljava/util/Set<TE;>;", "containsKey", "LNSObject;", "(TE;)Z", "getCount", "(TE;)D", "getDistributionFromPartiallySpecifiedCounter", "LEduStanfordNlpStatsCounter;I", "<E:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/Counter<TE;>;I)Ledu/stanford/nlp/stats/Distribution<TE;>;", "getUniformDistribution", "LJavaUtilCollection;", "<E:Ljava/lang/Object;>(Ljava/util/Collection<TE;>;)Ledu/stanford/nlp/stats/Distribution<TE;>;", "getPerturbedUniformDistribution", "LJavaUtilCollection;LJavaUtilRandom;", "<E:Ljava/lang/Object;>(Ljava/util/Collection<TE;>;Ljava/util/Random;)Ledu/stanford/nlp/stats/Distribution<TE;>;", "getPerturbedDistribution", "LEduStanfordNlpStatsCounter;LJavaUtilRandom;", "<E:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/Counter<TE;>;Ljava/util/Random;)Ledu/stanford/nlp/stats/Distribution<TE;>;", "getDistribution", "LEduStanfordNlpStatsCounter;", "<E:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/Counter<TE;>;)Ledu/stanford/nlp/stats/Distribution<TE;>;", "getDistributionWithReservedMass", "LEduStanfordNlpStatsCounter;D", "<E:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/Counter<TE;>;D)Ledu/stanford/nlp/stats/Distribution<TE;>;", "getDistributionFromLogValues", "absolutelyDiscountedDistribution", "LEduStanfordNlpStatsCounter;ID", "<E:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/Counter<TE;>;ID)Ledu/stanford/nlp/stats/Distribution<TE;>;", "laplaceSmoothedDistribution", "laplaceWithExplicitUnknown", "LEduStanfordNlpStatsCounter;DLNSObject;", "<E:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/Counter<TE;>;DTE;)Ledu/stanford/nlp/stats/Distribution<TE;>;", "goodTuringSmoothedCounter", "goodTuringWithExplicitUnknown", "LEduStanfordNlpStatsCounter;LNSObject;", "<E:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/Counter<TE;>;TE;)Ledu/stanford/nlp/stats/Distribution<TE;>;", "getCountCounts", "<E:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/Counter<TE;>;)[I", "simpleGoodTuring", "validateCounter", "<E:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/Counter<TE;>;)V", "collectCountCounts", "<E:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/Counter<TE;>;)Ledu/stanford/nlp/stats/Counter<Ljava/lang/Integer;>;", "countCounts2IntArrays", "(Ledu/stanford/nlp/stats/Counter<Ljava/lang/Integer;>;)[[I", "distributionWithDirichletPrior", "LEduStanfordNlpStatsCounter;LEduStanfordNlpStatsDistribution;D", "<E:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/Counter<TE;>;Ledu/stanford/nlp/stats/Distribution<TE;>;D)Ledu/stanford/nlp/stats/Distribution<TE;>;", "dynamicCounterWithDirichletPrior", "distributionFromLogisticCounter", "sampleFrom", "probabilityOf", "logProbabilityOf", "addToKeySet", "(TE;)V", "equals", "LEduStanfordNlpStatsDistribution;", "(Ledu/stanford/nlp/stats/Distribution<TE;>;)Z", "hashCode", "main", "[LNSString;", "Ledu/stanford/nlp/stats/Counter<TE;>;", "LEduStanfordNlpStatsDistribution_DynamicDistribution;", "<E:Ljava/lang/Object;>Ljava/lang/Object;Ledu/stanford/nlp/stats/Sampler<TE;>;Ledu/stanford/nlp/stats/ProbabilityDistribution<TE;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpStatsDistribution = { "Distribution", "edu.stanford.nlp.stats", ptrTable, methods, fields, 7, 0x1, 43, 6, -1, 69, -1, 70, -1 };
  return &_EduStanfordNlpStatsDistribution;
}

@end

EduStanfordNlpStatsDistribution *EduStanfordNlpStatsDistribution_getDistributionFromPartiallySpecifiedCounterWithEduStanfordNlpStatsCounter_withInt_(id<EduStanfordNlpStatsCounter> c, jint numKeys) {
  EduStanfordNlpStatsDistribution_initialize();
  EduStanfordNlpStatsDistribution *d;
  jdouble total = [((id<EduStanfordNlpStatsCounter>) nil_chk(c)) totalCount];
  if (total >= 1.0) {
    d = EduStanfordNlpStatsDistribution_getDistributionWithEduStanfordNlpStatsCounter_(c);
    ((EduStanfordNlpStatsDistribution *) nil_chk(d))->numberOfKeys_ = numKeys;
  }
  else {
    d = new_EduStanfordNlpStatsDistribution_init();
    d->numberOfKeys_ = numKeys;
    d->counter_ = c;
    d->reservedMass_ = 1.0 - total;
  }
  return d;
}

EduStanfordNlpStatsDistribution *EduStanfordNlpStatsDistribution_getUniformDistributionWithJavaUtilCollection_(id<JavaUtilCollection> s) {
  EduStanfordNlpStatsDistribution_initialize();
  EduStanfordNlpStatsDistribution *norm = new_EduStanfordNlpStatsDistribution_init();
  norm->counter_ = new_EduStanfordNlpStatsClassicCounter_init();
  norm->numberOfKeys_ = [((id<JavaUtilCollection>) nil_chk(s)) size];
  norm->reservedMass_ = 0;
  jdouble total = [s size];
  jdouble count = 1.0 / total;
  for (id __strong key in s) {
    [((id<EduStanfordNlpStatsCounter>) nil_chk(norm->counter_)) setCountWithId:key withDouble:count];
  }
  return norm;
}

EduStanfordNlpStatsDistribution *EduStanfordNlpStatsDistribution_getPerturbedUniformDistributionWithJavaUtilCollection_withJavaUtilRandom_(id<JavaUtilCollection> s, JavaUtilRandom *r) {
  EduStanfordNlpStatsDistribution_initialize();
  EduStanfordNlpStatsDistribution *norm = new_EduStanfordNlpStatsDistribution_init();
  norm->counter_ = new_EduStanfordNlpStatsClassicCounter_init();
  norm->numberOfKeys_ = [((id<JavaUtilCollection>) nil_chk(s)) size];
  norm->reservedMass_ = 0;
  jdouble total = [s size];
  jdouble prob = 1.0 / total;
  jdouble stdev = prob / 1000.0;
  for (id __strong key in s) {
    [((id<EduStanfordNlpStatsCounter>) nil_chk(norm->counter_)) setCountWithId:key withDouble:prob + ([((JavaUtilRandom *) nil_chk(r)) nextGaussian] * stdev)];
  }
  return norm;
}

EduStanfordNlpStatsDistribution *EduStanfordNlpStatsDistribution_getPerturbedDistributionWithEduStanfordNlpStatsCounter_withJavaUtilRandom_(id<EduStanfordNlpStatsCounter> wordCounter, JavaUtilRandom *r) {
  EduStanfordNlpStatsDistribution_initialize();
  EduStanfordNlpStatsDistribution *norm = new_EduStanfordNlpStatsDistribution_init();
  norm->counter_ = new_EduStanfordNlpStatsClassicCounter_init();
  norm->numberOfKeys_ = [((id<EduStanfordNlpStatsCounter>) nil_chk(wordCounter)) size];
  norm->reservedMass_ = 0;
  jdouble totalCount = [wordCounter totalCount];
  jdouble stdev = 1.0 / norm->numberOfKeys_ / 1000.0;
  for (id __strong key in nil_chk([wordCounter keySet])) {
    jdouble prob = [wordCounter getCountWithId:key] / totalCount;
    jdouble perturbedProb = prob + ([((JavaUtilRandom *) nil_chk(r)) nextGaussian] * stdev);
    if (perturbedProb < 0.0) {
      perturbedProb = 0.0;
    }
    [((id<EduStanfordNlpStatsCounter>) nil_chk(norm->counter_)) setCountWithId:key withDouble:perturbedProb];
  }
  return norm;
}

EduStanfordNlpStatsDistribution *EduStanfordNlpStatsDistribution_getDistributionWithEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> counter) {
  EduStanfordNlpStatsDistribution_initialize();
  return EduStanfordNlpStatsDistribution_getDistributionWithReservedMassWithEduStanfordNlpStatsCounter_withDouble_(counter, 0.0);
}

EduStanfordNlpStatsDistribution *EduStanfordNlpStatsDistribution_getDistributionWithReservedMassWithEduStanfordNlpStatsCounter_withDouble_(id<EduStanfordNlpStatsCounter> counter, jdouble reservedMass) {
  EduStanfordNlpStatsDistribution_initialize();
  EduStanfordNlpStatsDistribution *norm = new_EduStanfordNlpStatsDistribution_init();
  norm->counter_ = new_EduStanfordNlpStatsClassicCounter_init();
  norm->numberOfKeys_ = [((id<EduStanfordNlpStatsCounter>) nil_chk(counter)) size];
  norm->reservedMass_ = reservedMass;
  jdouble total = [counter totalCount] * (1 + reservedMass);
  if (total == 0.0) {
    total = 1.0;
  }
  for (id __strong key in nil_chk([counter keySet])) {
    jdouble count = [counter getCountWithId:key] / total;
    [((id<EduStanfordNlpStatsCounter>) nil_chk(norm->counter_)) setCountWithId:key withDouble:count];
  }
  return norm;
}

EduStanfordNlpStatsDistribution *EduStanfordNlpStatsDistribution_getDistributionFromLogValuesWithEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> counter) {
  EduStanfordNlpStatsDistribution_initialize();
  id<EduStanfordNlpStatsCounter> c = new_EduStanfordNlpStatsClassicCounter_init();
  jdouble max = EduStanfordNlpStatsCounters_maxWithEduStanfordNlpStatsCounter_(counter);
  for (id __strong key in nil_chk([((id<EduStanfordNlpStatsCounter>) nil_chk(counter)) keySet])) {
    jdouble count = JavaLangMath_expWithDouble_([counter getCountWithId:key] - max);
    [c setCountWithId:key withDouble:count];
  }
  return EduStanfordNlpStatsDistribution_getDistributionWithEduStanfordNlpStatsCounter_(c);
}

EduStanfordNlpStatsDistribution *EduStanfordNlpStatsDistribution_absolutelyDiscountedDistributionWithEduStanfordNlpStatsCounter_withInt_withDouble_(id<EduStanfordNlpStatsCounter> counter, jint numberOfKeys, jdouble discount) {
  EduStanfordNlpStatsDistribution_initialize();
  EduStanfordNlpStatsDistribution *norm = new_EduStanfordNlpStatsDistribution_init();
  norm->counter_ = new_EduStanfordNlpStatsClassicCounter_init();
  jdouble total = [((id<EduStanfordNlpStatsCounter>) nil_chk(counter)) totalCount];
  jdouble reservedMass = 0.0;
  for (id __strong key in nil_chk([counter keySet])) {
    jdouble count = [counter getCountWithId:key];
    if (count > discount) {
      jdouble newCount = (count - discount) / total;
      [((id<EduStanfordNlpStatsCounter>) nil_chk(norm->counter_)) setCountWithId:key withDouble:newCount];
      JrePlusAssignDoubleD(&reservedMass, discount);
    }
    else {
      JrePlusAssignDoubleD(&reservedMass, count);
    }
  }
  norm->numberOfKeys_ = numberOfKeys;
  norm->reservedMass_ = reservedMass / total;
  return norm;
}

EduStanfordNlpStatsDistribution *EduStanfordNlpStatsDistribution_laplaceSmoothedDistributionWithEduStanfordNlpStatsCounter_withInt_(id<EduStanfordNlpStatsCounter> counter, jint numberOfKeys) {
  EduStanfordNlpStatsDistribution_initialize();
  return EduStanfordNlpStatsDistribution_laplaceSmoothedDistributionWithEduStanfordNlpStatsCounter_withInt_withDouble_(counter, numberOfKeys, 1.0);
}

EduStanfordNlpStatsDistribution *EduStanfordNlpStatsDistribution_laplaceSmoothedDistributionWithEduStanfordNlpStatsCounter_withInt_withDouble_(id<EduStanfordNlpStatsCounter> counter, jint numberOfKeys, jdouble lambda) {
  EduStanfordNlpStatsDistribution_initialize();
  EduStanfordNlpStatsDistribution *norm = new_EduStanfordNlpStatsDistribution_init();
  norm->counter_ = new_EduStanfordNlpStatsClassicCounter_init();
  jdouble total = [((id<EduStanfordNlpStatsCounter>) nil_chk(counter)) totalCount];
  jdouble newTotal = total + (lambda * numberOfKeys);
  jdouble reservedMass = ((jdouble) numberOfKeys - [counter size]) * lambda / newTotal;
  norm->numberOfKeys_ = numberOfKeys;
  norm->reservedMass_ = reservedMass;
  for (id __strong key in nil_chk([counter keySet])) {
    jdouble count = [counter getCountWithId:key];
    [((id<EduStanfordNlpStatsCounter>) nil_chk(norm->counter_)) setCountWithId:key withDouble:(count + lambda) / newTotal];
  }
  return norm;
}

EduStanfordNlpStatsDistribution *EduStanfordNlpStatsDistribution_laplaceWithExplicitUnknownWithEduStanfordNlpStatsCounter_withDouble_withId_(id<EduStanfordNlpStatsCounter> counter, jdouble lambda, id UNK) {
  EduStanfordNlpStatsDistribution_initialize();
  EduStanfordNlpStatsDistribution *norm = new_EduStanfordNlpStatsDistribution_init();
  norm->counter_ = new_EduStanfordNlpStatsClassicCounter_init();
  jdouble total = [((id<EduStanfordNlpStatsCounter>) nil_chk(counter)) totalCount] + (lambda * ([counter size] - 1));
  norm->numberOfKeys_ = [counter size];
  norm->reservedMass_ = 0.0;
  for (id __strong key in nil_chk([counter keySet])) {
    if ([nil_chk(key) isEqual:UNK]) {
      [((id<EduStanfordNlpStatsCounter>) nil_chk(norm->counter_)) setCountWithId:key withDouble:[counter getCountWithId:key] / total];
    }
    else {
      [((id<EduStanfordNlpStatsCounter>) nil_chk(norm->counter_)) setCountWithId:key withDouble:([counter getCountWithId:key] + lambda) / total];
    }
  }
  return norm;
}

EduStanfordNlpStatsDistribution *EduStanfordNlpStatsDistribution_goodTuringSmoothedCounterWithEduStanfordNlpStatsCounter_withInt_(id<EduStanfordNlpStatsCounter> counter, jint numberOfKeys) {
  EduStanfordNlpStatsDistribution_initialize();
  IOSIntArray *countCounts = EduStanfordNlpStatsDistribution_getCountCountsWithEduStanfordNlpStatsCounter_(counter);
  for (jint i = 1; i <= 10; i++) {
    if (IOSIntArray_Get(nil_chk(countCounts), i) < 3) {
      return EduStanfordNlpStatsDistribution_laplaceSmoothedDistributionWithEduStanfordNlpStatsCounter_withInt_withDouble_(counter, numberOfKeys, 0.5);
    }
  }
  jdouble observedMass = [((id<EduStanfordNlpStatsCounter>) nil_chk(counter)) totalCount];
  jdouble reservedMass = IOSIntArray_Get(nil_chk(countCounts), 1) / observedMass;
  IOSDoubleArray *adjustedFreq = [IOSDoubleArray newArrayWithLength:10];
  for (jint freq = 1; freq < 10; freq++) {
    *IOSDoubleArray_GetRef(adjustedFreq, freq) = (jdouble) (freq + 1) * (jdouble) IOSIntArray_Get(countCounts, freq + 1) / IOSIntArray_Get(countCounts, freq);
    JreMinusAssignDoubleD(&observedMass, (freq - IOSDoubleArray_Get(adjustedFreq, freq)) * IOSIntArray_Get(countCounts, freq));
  }
  jdouble normFactor = (1.0 - reservedMass) / observedMass;
  EduStanfordNlpStatsDistribution *norm = new_EduStanfordNlpStatsDistribution_init();
  norm->counter_ = new_EduStanfordNlpStatsClassicCounter_init();
  for (id __strong key in nil_chk([counter keySet])) {
    jint origFreq = (jint) JavaLangMath_roundWithDouble_([counter getCountWithId:key]);
    if (origFreq < 10) {
      [((id<EduStanfordNlpStatsCounter>) nil_chk(norm->counter_)) setCountWithId:key withDouble:IOSDoubleArray_Get(adjustedFreq, origFreq) * normFactor];
    }
    else {
      [((id<EduStanfordNlpStatsCounter>) nil_chk(norm->counter_)) setCountWithId:key withDouble:origFreq * normFactor];
    }
  }
  norm->numberOfKeys_ = numberOfKeys;
  norm->reservedMass_ = reservedMass;
  return norm;
}

EduStanfordNlpStatsDistribution *EduStanfordNlpStatsDistribution_goodTuringWithExplicitUnknownWithEduStanfordNlpStatsCounter_withId_(id<EduStanfordNlpStatsCounter> counter, id UNK) {
  EduStanfordNlpStatsDistribution_initialize();
  IOSIntArray *countCounts = EduStanfordNlpStatsDistribution_getCountCountsWithEduStanfordNlpStatsCounter_(counter);
  for (jint i = 1; i <= 10; i++) {
    if (IOSIntArray_Get(nil_chk(countCounts), i) < 3) {
      return EduStanfordNlpStatsDistribution_laplaceWithExplicitUnknownWithEduStanfordNlpStatsCounter_withDouble_withId_(counter, 0.5, UNK);
    }
  }
  jdouble observedMass = [((id<EduStanfordNlpStatsCounter>) nil_chk(counter)) totalCount];
  IOSDoubleArray *adjustedFreq = [IOSDoubleArray newArrayWithLength:10];
  for (jint freq = 1; freq < 10; freq++) {
    *IOSDoubleArray_GetRef(adjustedFreq, freq) = (jdouble) (freq + 1) * (jdouble) IOSIntArray_Get(nil_chk(countCounts), freq + 1) / IOSIntArray_Get(countCounts, freq);
    JreMinusAssignDoubleD(&observedMass, (freq - IOSDoubleArray_Get(adjustedFreq, freq)) * IOSIntArray_Get(countCounts, freq));
  }
  EduStanfordNlpStatsDistribution *norm = new_EduStanfordNlpStatsDistribution_init();
  norm->counter_ = new_EduStanfordNlpStatsClassicCounter_init();
  for (id __strong key in nil_chk([counter keySet])) {
    jint origFreq = (jint) JavaLangMath_roundWithDouble_([counter getCountWithId:key]);
    if (origFreq < 10) {
      [((id<EduStanfordNlpStatsCounter>) nil_chk(norm->counter_)) setCountWithId:key withDouble:IOSDoubleArray_Get(adjustedFreq, origFreq) / observedMass];
    }
    else {
      [((id<EduStanfordNlpStatsCounter>) nil_chk(norm->counter_)) setCountWithId:key withDouble:origFreq / observedMass];
    }
  }
  norm->numberOfKeys_ = [counter size];
  norm->reservedMass_ = 0.0;
  return norm;
}

IOSIntArray *EduStanfordNlpStatsDistribution_getCountCountsWithEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> counter) {
  EduStanfordNlpStatsDistribution_initialize();
  IOSIntArray *countCounts = [IOSIntArray newArrayWithLength:11];
  for (jint i = 0; i <= 10; i++) {
    *IOSIntArray_GetRef(countCounts, i) = 0;
  }
  for (id __strong key in nil_chk([((id<EduStanfordNlpStatsCounter>) nil_chk(counter)) keySet])) {
    jint count = (jint) JavaLangMath_roundWithDouble_([counter getCountWithId:key]);
    if (count <= 10) {
      (*IOSIntArray_GetRef(countCounts, count))++;
    }
  }
  return countCounts;
}

EduStanfordNlpStatsDistribution *EduStanfordNlpStatsDistribution_simpleGoodTuringWithEduStanfordNlpStatsCounter_withInt_(id<EduStanfordNlpStatsCounter> counter, jint numberOfKeys) {
  EduStanfordNlpStatsDistribution_initialize();
  EduStanfordNlpStatsDistribution_validateCounterWithEduStanfordNlpStatsCounter_(counter);
  jint numUnseen = numberOfKeys - [((id<EduStanfordNlpStatsCounter>) nil_chk(counter)) size];
  if (numUnseen < 1) @throw new_JavaLangIllegalArgumentException_initWithNSString_(NSString_formatWithNSString_withNSObjectArray_(@"ERROR: numberOfKeys %d must be > size of counter %d!", [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(numberOfKeys), JavaLangInteger_valueOfWithInt_([counter size]) } count:2 type:NSObject_class_()]));
  IOSObjectArray *cc = EduStanfordNlpStatsDistribution_countCounts2IntArraysWithEduStanfordNlpStatsCounter_(EduStanfordNlpStatsDistribution_collectCountCountsWithEduStanfordNlpStatsCounter_(counter));
  IOSIntArray *r = IOSObjectArray_Get(nil_chk(cc), 0);
  IOSIntArray *n = IOSObjectArray_Get(cc, 1);
  EduStanfordNlpStatsSimpleGoodTuring *sgt = new_EduStanfordNlpStatsSimpleGoodTuring_initWithIntArray_withIntArray_(r, n);
  id<EduStanfordNlpStatsCounter> probsByCount = new_EduStanfordNlpStatsClassicCounter_init();
  IOSDoubleArray *probs = [sgt getProbabilities];
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(probs))->size_; i++) {
    [probsByCount setCountWithId:JavaLangInteger_valueOfWithInt_(IOSIntArray_Get(nil_chk(r), i)) withDouble:IOSDoubleArray_Get(probs, i)];
  }
  EduStanfordNlpStatsDistribution *dist = new_EduStanfordNlpStatsDistribution_init();
  dist->counter_ = new_EduStanfordNlpStatsClassicCounter_init();
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([counter entrySet])) {
    id item = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey];
    JavaLangInteger *count = JavaLangInteger_valueOfWithInt_((jint) JavaLangMath_roundWithDouble_([((JavaLangDouble *) nil_chk([entry_ getValue])) doubleValue]));
    [((id<EduStanfordNlpStatsCounter>) nil_chk(dist->counter_)) setCountWithId:item withDouble:[probsByCount getCountWithId:count]];
  }
  dist->numberOfKeys_ = numberOfKeys;
  dist->reservedMass_ = [sgt getProbabilityForUnseen];
  return dist;
}

void EduStanfordNlpStatsDistribution_validateCounterWithEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> counts) {
  EduStanfordNlpStatsDistribution_initialize();
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((id<EduStanfordNlpStatsCounter>) nil_chk(counts)) entrySet])) {
    id item = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey];
    JavaLangDouble *dblCount = [entry_ getValue];
    if (dblCount == nil) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@C", @"ERROR: null count for item ", item, '!'));
    }
    if ([dblCount doubleValue] < 0) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@$@C", @"ERROR: negative count ", dblCount, @" for item ", item, '!'));
    }
  }
}

id<EduStanfordNlpStatsCounter> EduStanfordNlpStatsDistribution_collectCountCountsWithEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> counts) {
  EduStanfordNlpStatsDistribution_initialize();
  id<EduStanfordNlpStatsCounter> cc = new_EduStanfordNlpStatsClassicCounter_init();
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((id<EduStanfordNlpStatsCounter>) nil_chk(counts)) entrySet])) {
    JavaLangInteger *count = JavaLangInteger_valueOfWithInt_((jint) JavaLangMath_roundWithDouble_([((JavaLangDouble *) nil_chk([((id<JavaUtilMap_Entry>) nil_chk(entry_)) getValue])) doubleValue]));
    [cc incrementCountWithId:count];
  }
  return cc;
}

IOSObjectArray *EduStanfordNlpStatsDistribution_countCounts2IntArraysWithEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> countCounts) {
  EduStanfordNlpStatsDistribution_initialize();
  jint size = [((id<EduStanfordNlpStatsCounter>) nil_chk(countCounts)) size];
  IOSObjectArray *arrays = [IOSObjectArray newArrayWithLength:2 type:IOSClass_intArray(1)];
  (void) IOSObjectArray_SetAndConsume(arrays, 0, [IOSIntArray newArrayWithLength:size]);
  (void) IOSObjectArray_SetAndConsume(arrays, 1, [IOSIntArray newArrayWithLength:size]);
  JavaUtilPriorityQueue *q = new_JavaUtilPriorityQueue_initWithJavaUtilCollection_([countCounts keySet]);
  jint i = 0;
  while (![q isEmpty]) {
    JavaLangInteger *count = [q poll];
    JavaLangInteger *countCount = JavaLangInteger_valueOfWithInt_((jint) JavaLangMath_roundWithDouble_([countCounts getCountWithId:count]));
    *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(arrays, 0)), i) = [((JavaLangInteger *) nil_chk(count)) intValue];
    *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(arrays, 1)), i) = [countCount intValue];
    i++;
  }
  return arrays;
}

EduStanfordNlpStatsDistribution *EduStanfordNlpStatsDistribution_distributionWithDirichletPriorWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsDistribution_withDouble_(id<EduStanfordNlpStatsCounter> c, EduStanfordNlpStatsDistribution *prior, jdouble weight) {
  EduStanfordNlpStatsDistribution_initialize();
  EduStanfordNlpStatsDistribution *norm = new_EduStanfordNlpStatsDistribution_init();
  jdouble totalWeight = [((id<EduStanfordNlpStatsCounter>) nil_chk(c)) totalCount] + weight;
  if ([prior isKindOfClass:[EduStanfordNlpStatsDistribution_DynamicDistribution class]]) {
    @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"Cannot make normalized counter with Dynamic prior.");
  }
  norm->counter_ = EduStanfordNlpStatsCounters_linearCombinationWithEduStanfordNlpStatsCounter_withDouble_withEduStanfordNlpStatsCounter_withDouble_(c, 1 / totalWeight, ((EduStanfordNlpStatsDistribution *) nil_chk(prior))->counter_, weight / totalWeight);
  norm->numberOfKeys_ = prior->numberOfKeys_;
  norm->reservedMass_ = prior->reservedMass_ * weight / totalWeight;
  return norm;
}

EduStanfordNlpStatsDistribution *EduStanfordNlpStatsDistribution_dynamicCounterWithDirichletPriorWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsDistribution_withDouble_(id<EduStanfordNlpStatsCounter> c, EduStanfordNlpStatsDistribution *prior, jdouble weight) {
  EduStanfordNlpStatsDistribution_initialize();
  jdouble totalWeight = [((id<EduStanfordNlpStatsCounter>) nil_chk(c)) totalCount] + weight;
  EduStanfordNlpStatsDistribution *norm = new_EduStanfordNlpStatsDistribution_DynamicDistribution_initWithEduStanfordNlpStatsDistribution_withDouble_(prior, weight / totalWeight);
  norm->counter_ = new_EduStanfordNlpStatsClassicCounter_init();
  for (id __strong key in nil_chk([c keySet])) {
    jdouble count = [c getCountWithId:key] / totalWeight;
    [((EduStanfordNlpStatsDistribution *) nil_chk(prior)) addToKeySetWithId:key];
    [((id<EduStanfordNlpStatsCounter>) nil_chk(norm->counter_)) setCountWithId:key withDouble:count];
  }
  norm->numberOfKeys_ = ((EduStanfordNlpStatsDistribution *) nil_chk(prior))->numberOfKeys_;
  return norm;
}

EduStanfordNlpStatsDistribution *EduStanfordNlpStatsDistribution_distributionFromLogisticCounterWithEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> cntr) {
  EduStanfordNlpStatsDistribution_initialize();
  jdouble expSum = 0.0;
  jint numKeys = 0;
  for (id __strong key in nil_chk([((id<EduStanfordNlpStatsCounter>) nil_chk(cntr)) keySet])) {
    JrePlusAssignDoubleD(&expSum, JavaLangMath_expWithDouble_([cntr getCountWithId:key]));
    numKeys++;
  }
  EduStanfordNlpStatsDistribution *probs = new_EduStanfordNlpStatsDistribution_init();
  probs->counter_ = new_EduStanfordNlpStatsClassicCounter_init();
  probs->reservedMass_ = 0.0;
  probs->numberOfKeys_ = numKeys;
  for (id __strong key in nil_chk([cntr keySet])) {
    [((id<EduStanfordNlpStatsCounter>) nil_chk(probs->counter_)) setCountWithId:key withDouble:JavaLangMath_expWithDouble_([cntr getCountWithId:key]) / expSum];
  }
  return probs;
}

void EduStanfordNlpStatsDistribution_init(EduStanfordNlpStatsDistribution *self) {
  NSObject_init(self);
}

EduStanfordNlpStatsDistribution *new_EduStanfordNlpStatsDistribution_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpStatsDistribution, init)
}

EduStanfordNlpStatsDistribution *create_EduStanfordNlpStatsDistribution_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpStatsDistribution, init)
}

void EduStanfordNlpStatsDistribution_mainWithNSStringArray_(IOSObjectArray *args) {
  EduStanfordNlpStatsDistribution_initialize();
  id<EduStanfordNlpStatsCounter> c2 = new_EduStanfordNlpStatsClassicCounter_init();
  [c2 incrementCountWithId:@"p" withDouble:13];
  [c2 setCountWithId:@"q" withDouble:12];
  [c2 setCountWithId:@"w" withDouble:5];
  [c2 incrementCountWithId:@"x" withDouble:7.5];
  EduStanfordNlpStatsClassicCounter *c = new_EduStanfordNlpStatsClassicCounter_init();
  jdouble p = 1000;
  NSString *UNK = @"!*UNKNOWN*!";
  id<JavaUtilSet> s = EduStanfordNlpUtilGenerics_newHashSet();
  [((id<JavaUtilSet>) nil_chk(s)) addWithId:UNK];
  for (jint rank = 1; rank < 2000; rank++) {
    NSString *i = NSString_valueOfInt_(rank);
    [c setCountWithId:i withDouble:JavaLangMath_roundWithDouble_(p / rank)];
    [s addWithId:i];
  }
  for (jint rank = 2000; rank <= 4000; rank++) {
    NSString *i = NSString_valueOfInt_(rank);
    [s addWithId:i];
  }
  EduStanfordNlpStatsDistribution *n = EduStanfordNlpStatsDistribution_getDistributionWithEduStanfordNlpStatsCounter_(c);
  EduStanfordNlpStatsDistribution *prior = EduStanfordNlpStatsDistribution_getUniformDistributionWithJavaUtilCollection_(s);
  EduStanfordNlpStatsDistribution *dir1 = EduStanfordNlpStatsDistribution_distributionWithDirichletPriorWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsDistribution_withDouble_(c, prior, 4000);
  EduStanfordNlpStatsDistribution *dir2 = EduStanfordNlpStatsDistribution_dynamicCounterWithDirichletPriorWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsDistribution_withDouble_(c, prior, 4000);
  EduStanfordNlpStatsDistribution *add1;
  EduStanfordNlpStatsDistribution *gt;
  {
    add1 = EduStanfordNlpStatsDistribution_laplaceSmoothedDistributionWithEduStanfordNlpStatsCounter_withInt_(c, 4000);
    gt = EduStanfordNlpStatsDistribution_goodTuringSmoothedCounterWithEduStanfordNlpStatsCounter_withInt_(c, 4000);
  }
  EduStanfordNlpStatsDistribution *sgt = EduStanfordNlpStatsDistribution_simpleGoodTuringWithEduStanfordNlpStatsCounter_withInt_(c, 4000);
  (void) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printfWithNSString:@"%10s %10s %10s %10s %10s %10s %10s%n" withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"Freq", @"Norm", @"Add1", @"Dir1", @"Dir2", @"GT", @"SGT" } count:7 type:NSObject_class_()]];
  (void) [JreLoadStatic(JavaLangSystem, out) printfWithNSString:@"%10s %10s %10s %10s %10s %10s %10s%n" withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"----------", @"----------", @"----------", @"----------", @"----------", @"----------", @"----------" } count:7 type:NSObject_class_()]];
  for (jint i = 1; i < 5; i++) {
    (void) [JreLoadStatic(JavaLangSystem, out) printfWithNSString:@"%10d " withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ JavaLangLong_valueOfWithLong_(JavaLangMath_roundWithDouble_(p / i)) } count:1 type:NSObject_class_()]];
    NSString *in = NSString_valueOfInt_(i);
    (void) [JreLoadStatic(JavaLangSystem, out) printfWithNSString:@"%10.8f " withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_([((EduStanfordNlpStatsDistribution *) nil_chk(n)) probabilityOfWithId:NSString_valueOf_(in)]) } count:1 type:NSObject_class_()]];
    (void) [JreLoadStatic(JavaLangSystem, out) printfWithNSString:@"%10.8f " withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_([((EduStanfordNlpStatsDistribution *) nil_chk(add1)) probabilityOfWithId:in]) } count:1 type:NSObject_class_()]];
    (void) [JreLoadStatic(JavaLangSystem, out) printfWithNSString:@"%10.8f " withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_([((EduStanfordNlpStatsDistribution *) nil_chk(dir1)) probabilityOfWithId:in]) } count:1 type:NSObject_class_()]];
    (void) [JreLoadStatic(JavaLangSystem, out) printfWithNSString:@"%10.8f " withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_([((EduStanfordNlpStatsDistribution *) nil_chk(dir2)) probabilityOfWithId:in]) } count:1 type:NSObject_class_()]];
    (void) [JreLoadStatic(JavaLangSystem, out) printfWithNSString:@"%10.8f " withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_([((EduStanfordNlpStatsDistribution *) nil_chk(gt)) probabilityOfWithId:in]) } count:1 type:NSObject_class_()]];
    (void) [JreLoadStatic(JavaLangSystem, out) printfWithNSString:@"%10.8f " withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_([((EduStanfordNlpStatsDistribution *) nil_chk(sgt)) probabilityOfWithId:in]) } count:1 type:NSObject_class_()]];
    [JreLoadStatic(JavaLangSystem, out) println];
  }
  (void) [JreLoadStatic(JavaLangSystem, out) printfWithNSString:@"%10s %10s %10s %10s %10s %10s %10s%n" withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"----------", @"----------", @"----------", @"----------", @"----------", @"----------", @"----------" } count:7 type:NSObject_class_()]];
  (void) [JreLoadStatic(JavaLangSystem, out) printfWithNSString:@"%10d " withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1) } count:1 type:NSObject_class_()]];
  NSString *last = NSString_valueOfInt_(1500);
  (void) [JreLoadStatic(JavaLangSystem, out) printfWithNSString:@"%10.8f " withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_([((EduStanfordNlpStatsDistribution *) nil_chk(n)) probabilityOfWithId:last]) } count:1 type:NSObject_class_()]];
  (void) [JreLoadStatic(JavaLangSystem, out) printfWithNSString:@"%10.8f " withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_([((EduStanfordNlpStatsDistribution *) nil_chk(add1)) probabilityOfWithId:last]) } count:1 type:NSObject_class_()]];
  (void) [JreLoadStatic(JavaLangSystem, out) printfWithNSString:@"%10.8f " withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_([((EduStanfordNlpStatsDistribution *) nil_chk(dir1)) probabilityOfWithId:last]) } count:1 type:NSObject_class_()]];
  (void) [JreLoadStatic(JavaLangSystem, out) printfWithNSString:@"%10.8f " withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_([((EduStanfordNlpStatsDistribution *) nil_chk(dir2)) probabilityOfWithId:last]) } count:1 type:NSObject_class_()]];
  (void) [JreLoadStatic(JavaLangSystem, out) printfWithNSString:@"%10.8f " withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_([((EduStanfordNlpStatsDistribution *) nil_chk(gt)) probabilityOfWithId:last]) } count:1 type:NSObject_class_()]];
  (void) [JreLoadStatic(JavaLangSystem, out) printfWithNSString:@"%10.8f " withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_([((EduStanfordNlpStatsDistribution *) nil_chk(sgt)) probabilityOfWithId:last]) } count:1 type:NSObject_class_()]];
  [JreLoadStatic(JavaLangSystem, out) println];
  (void) [JreLoadStatic(JavaLangSystem, out) printfWithNSString:@"%10s %10s %10s %10s %10s %10s %10s%n" withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"----------", @"----------", @"----------", @"----------", @"----------", @"----------", @"----------" } count:7 type:NSObject_class_()]];
  (void) [JreLoadStatic(JavaLangSystem, out) printfWithNSString:@"%10s " withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"UNK" } count:1 type:NSObject_class_()]];
  (void) [JreLoadStatic(JavaLangSystem, out) printfWithNSString:@"%10.8f " withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_([n probabilityOfWithId:UNK]) } count:1 type:NSObject_class_()]];
  (void) [JreLoadStatic(JavaLangSystem, out) printfWithNSString:@"%10.8f " withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_([add1 probabilityOfWithId:UNK]) } count:1 type:NSObject_class_()]];
  (void) [JreLoadStatic(JavaLangSystem, out) printfWithNSString:@"%10.8f " withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_([dir1 probabilityOfWithId:UNK]) } count:1 type:NSObject_class_()]];
  (void) [JreLoadStatic(JavaLangSystem, out) printfWithNSString:@"%10.8f " withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_([dir2 probabilityOfWithId:UNK]) } count:1 type:NSObject_class_()]];
  (void) [JreLoadStatic(JavaLangSystem, out) printfWithNSString:@"%10.8f " withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_([gt probabilityOfWithId:UNK]) } count:1 type:NSObject_class_()]];
  (void) [JreLoadStatic(JavaLangSystem, out) printfWithNSString:@"%10.8f " withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_([sgt probabilityOfWithId:UNK]) } count:1 type:NSObject_class_()]];
  [JreLoadStatic(JavaLangSystem, out) println];
  (void) [JreLoadStatic(JavaLangSystem, out) printfWithNSString:@"%10s %10s %10s %10s %10s %10s %10s%n" withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"----------", @"----------", @"----------", @"----------", @"----------", @"----------", @"----------" } count:7 type:NSObject_class_()]];
  (void) [JreLoadStatic(JavaLangSystem, out) printfWithNSString:@"%10s " withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"RESERVE" } count:1 type:NSObject_class_()]];
  (void) [JreLoadStatic(JavaLangSystem, out) printfWithNSString:@"%10.8f " withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_([n getReservedMass]) } count:1 type:NSObject_class_()]];
  (void) [JreLoadStatic(JavaLangSystem, out) printfWithNSString:@"%10.8f " withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_([add1 getReservedMass]) } count:1 type:NSObject_class_()]];
  (void) [JreLoadStatic(JavaLangSystem, out) printfWithNSString:@"%10.8f " withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_([dir1 getReservedMass]) } count:1 type:NSObject_class_()]];
  (void) [JreLoadStatic(JavaLangSystem, out) printfWithNSString:@"%10.8f " withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_([dir2 getReservedMass]) } count:1 type:NSObject_class_()]];
  (void) [JreLoadStatic(JavaLangSystem, out) printfWithNSString:@"%10.8f " withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_([gt getReservedMass]) } count:1 type:NSObject_class_()]];
  (void) [JreLoadStatic(JavaLangSystem, out) printfWithNSString:@"%10.8f " withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_([sgt getReservedMass]) } count:1 type:NSObject_class_()]];
  [JreLoadStatic(JavaLangSystem, out) println];
  (void) [JreLoadStatic(JavaLangSystem, out) printfWithNSString:@"%10s %10s %10s %10s %10s %10s %10s%n" withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"----------", @"----------", @"----------", @"----------", @"----------", @"----------", @"----------" } count:7 type:NSObject_class_()]];
  (void) [JreLoadStatic(JavaLangSystem, out) printfWithNSString:@"%10s " withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"Total" } count:1 type:NSObject_class_()]];
  (void) [JreLoadStatic(JavaLangSystem, out) printfWithNSString:@"%10.8f " withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_([n totalCount]) } count:1 type:NSObject_class_()]];
  (void) [JreLoadStatic(JavaLangSystem, out) printfWithNSString:@"%10.8f " withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_([add1 totalCount]) } count:1 type:NSObject_class_()]];
  (void) [JreLoadStatic(JavaLangSystem, out) printfWithNSString:@"%10.8f " withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_([dir1 totalCount]) } count:1 type:NSObject_class_()]];
  (void) [JreLoadStatic(JavaLangSystem, out) printfWithNSString:@"%10.8f " withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_([dir2 totalCount]) } count:1 type:NSObject_class_()]];
  (void) [JreLoadStatic(JavaLangSystem, out) printfWithNSString:@"%10.8f " withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_([gt totalCount]) } count:1 type:NSObject_class_()]];
  (void) [JreLoadStatic(JavaLangSystem, out) printfWithNSString:@"%10.8f " withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_([sgt totalCount]) } count:1 type:NSObject_class_()]];
  [JreLoadStatic(JavaLangSystem, out) println];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpStatsDistribution)

@implementation EduStanfordNlpStatsDistribution_DynamicDistribution

- (instancetype)initWithEduStanfordNlpStatsDistribution:(EduStanfordNlpStatsDistribution *)prior
                                             withDouble:(jdouble)priorMultiplier {
  EduStanfordNlpStatsDistribution_DynamicDistribution_initWithEduStanfordNlpStatsDistribution_withDouble_(self, prior, priorMultiplier);
  return self;
}

- (jdouble)probabilityOfWithId:(id)o {
  return [((id<EduStanfordNlpStatsCounter>) nil_chk(self->counter_)) getCountWithId:o] + [((EduStanfordNlpStatsDistribution *) nil_chk(prior_)) probabilityOfWithId:o] * priorMultiplier_;
}

- (jdouble)totalCount {
  return [((id<EduStanfordNlpStatsCounter>) nil_chk(self->counter_)) totalCount] + [((EduStanfordNlpStatsDistribution *) nil_chk(prior_)) totalCount] * priorMultiplier_;
}

- (id<JavaUtilSet>)keySet {
  return [((EduStanfordNlpStatsDistribution *) nil_chk(prior_)) keySet];
}

- (void)addToKeySetWithId:(id)o {
  [((EduStanfordNlpStatsDistribution *) nil_chk(prior_)) addToKeySetWithId:o];
}

- (jboolean)containsKeyWithId:(id)key {
  return [((EduStanfordNlpStatsDistribution *) nil_chk(prior_)) containsKeyWithId:key];
}

- (id)argmax {
  return EduStanfordNlpStatsCounters_argmaxWithEduStanfordNlpStatsCounter_(EduStanfordNlpStatsCounters_linearCombinationWithEduStanfordNlpStatsCounter_withDouble_withEduStanfordNlpStatsCounter_withDouble_(self->counter_, 1.0, ((EduStanfordNlpStatsDistribution *) nil_chk(prior_))->counter_, priorMultiplier_));
}

- (id)sampleFrom {
  jdouble d = JavaLangMath_random();
  id<JavaUtilSet> s = [((EduStanfordNlpStatsDistribution *) nil_chk(prior_)) keySet];
  for (id __strong o in nil_chk(s)) {
    JreMinusAssignDoubleD(&d, [self probabilityOfWithId:o]);
    if (d < 0) {
      return o;
    }
  }
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"ERROR: Distribution sums to less than 1"];
  [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:JreStrcat("$D$D", @"Sampled ", d, @"      sum is ", [self totalCount])];
  @throw new_JavaLangRuntimeException_initWithNSString_(@"");
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "D", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 5, -1, -1 },
    { NULL, "V", 0x1, 6, 3, -1, 7, -1, -1 },
    { NULL, "Z", 0x1, 8, 3, -1, 9, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 10, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 10, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpStatsDistribution:withDouble:);
  methods[1].selector = @selector(probabilityOfWithId:);
  methods[2].selector = @selector(totalCount);
  methods[3].selector = @selector(keySet);
  methods[4].selector = @selector(addToKeySetWithId:);
  methods[5].selector = @selector(containsKeyWithId:);
  methods[6].selector = @selector(argmax);
  methods[7].selector = @selector(sampleFrom);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpStatsDistribution_DynamicDistribution_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "prior_", "LEduStanfordNlpStatsDistribution;", .constantValue.asLong = 0, 0x12, -1, -1, 11, -1 },
    { "priorMultiplier_", "D", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpStatsDistribution;D", "(Ledu/stanford/nlp/stats/Distribution<TE;>;D)V", "probabilityOf", "LNSObject;", "(TE;)D", "()Ljava/util/Set<TE;>;", "addToKeySet", "(TE;)V", "containsKey", "(TE;)Z", "()TE;", "Ledu/stanford/nlp/stats/Distribution<TE;>;", "LEduStanfordNlpStatsDistribution;", "<E:Ljava/lang/Object;>Ledu/stanford/nlp/stats/Distribution<TE;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpStatsDistribution_DynamicDistribution = { "DynamicDistribution", "edu.stanford.nlp.stats", ptrTable, methods, fields, 7, 0xa, 8, 3, 12, -1, -1, 13, -1 };
  return &_EduStanfordNlpStatsDistribution_DynamicDistribution;
}

@end

void EduStanfordNlpStatsDistribution_DynamicDistribution_initWithEduStanfordNlpStatsDistribution_withDouble_(EduStanfordNlpStatsDistribution_DynamicDistribution *self, EduStanfordNlpStatsDistribution *prior, jdouble priorMultiplier) {
  EduStanfordNlpStatsDistribution_init(self);
  self->prior_ = prior;
  self->priorMultiplier_ = priorMultiplier;
}

EduStanfordNlpStatsDistribution_DynamicDistribution *new_EduStanfordNlpStatsDistribution_DynamicDistribution_initWithEduStanfordNlpStatsDistribution_withDouble_(EduStanfordNlpStatsDistribution *prior, jdouble priorMultiplier) {
  J2OBJC_NEW_IMPL(EduStanfordNlpStatsDistribution_DynamicDistribution, initWithEduStanfordNlpStatsDistribution_withDouble_, prior, priorMultiplier)
}

EduStanfordNlpStatsDistribution_DynamicDistribution *create_EduStanfordNlpStatsDistribution_DynamicDistribution_initWithEduStanfordNlpStatsDistribution_withDouble_(EduStanfordNlpStatsDistribution *prior, jdouble priorMultiplier) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpStatsDistribution_DynamicDistribution, initWithEduStanfordNlpStatsDistribution_withDouble_, prior, priorMultiplier)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpStatsDistribution_DynamicDistribution)

@implementation EduStanfordNlpStatsDistribution_$Lambda$1

- (jint)compareWithId:(id)o1
               withId:(id)o2 {
  if ([this$0_ probabilityOfWithId:o1] < [this$0_ probabilityOfWithId:o2]) {
    return 1;
  }
  else {
    return -1;
  }
}

- (id<JavaUtilComparator>)reversed {
  return JavaUtilComparator_reversed(self);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilComparator:(id<JavaUtilComparator>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilComparator_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0
                                             withJavaUtilComparator:(id<JavaUtilComparator>)arg1 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_withJavaUtilComparator_(self, arg0, arg1);
}

- (id<JavaUtilComparator>)thenComparingDoubleWithJavaUtilFunctionToDoubleFunction:(id<JavaUtilFunctionToDoubleFunction>)arg0 {
  return JavaUtilComparator_thenComparingDoubleWithJavaUtilFunctionToDoubleFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingIntWithJavaUtilFunctionToIntFunction:(id<JavaUtilFunctionToIntFunction>)arg0 {
  return JavaUtilComparator_thenComparingIntWithJavaUtilFunctionToIntFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingLongWithJavaUtilFunctionToLongFunction:(id<JavaUtilFunctionToLongFunction>)arg0 {
  return JavaUtilComparator_thenComparingLongWithJavaUtilFunctionToLongFunction_(self, arg0);
}

@end

void EduStanfordNlpStatsDistribution_$Lambda$1_initWithEduStanfordNlpStatsDistribution_(EduStanfordNlpStatsDistribution_$Lambda$1 *self, EduStanfordNlpStatsDistribution *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
}

EduStanfordNlpStatsDistribution_$Lambda$1 *new_EduStanfordNlpStatsDistribution_$Lambda$1_initWithEduStanfordNlpStatsDistribution_(EduStanfordNlpStatsDistribution *outer$) {
  J2OBJC_NEW_IMPL(EduStanfordNlpStatsDistribution_$Lambda$1, initWithEduStanfordNlpStatsDistribution_, outer$)
}

EduStanfordNlpStatsDistribution_$Lambda$1 *create_EduStanfordNlpStatsDistribution_$Lambda$1_initWithEduStanfordNlpStatsDistribution_(EduStanfordNlpStatsDistribution *outer$) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpStatsDistribution_$Lambda$1, initWithEduStanfordNlpStatsDistribution_, outer$)
}
