//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/stats/Counters.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/io/IOUtils.h"
#include "edu/stanford/nlp/math/ArrayMath.h"
#include "edu/stanford/nlp/math/SloppyMath.h"
#include "edu/stanford/nlp/stats/AbstractCounter.h"
#include "edu/stanford/nlp/stats/ClassicCounter.h"
#include "edu/stanford/nlp/stats/Counter.h"
#include "edu/stanford/nlp/stats/Counters.h"
#include "edu/stanford/nlp/stats/IntCounter.h"
#include "edu/stanford/nlp/stats/TwoDimensionalCounter.h"
#include "edu/stanford/nlp/stats/TwoDimensionalCounterInterface.h"
#include "edu/stanford/nlp/util/BinaryHeapPriorityQueue.h"
#include "edu/stanford/nlp/util/CollectionUtils.h"
#include "edu/stanford/nlp/util/ErasureUtils.h"
#include "edu/stanford/nlp/util/Factory.h"
#include "edu/stanford/nlp/util/FixedPrioritiesPriorityQueue.h"
#include "edu/stanford/nlp/util/Generics.h"
#include "edu/stanford/nlp/util/Index.h"
#include "edu/stanford/nlp/util/MapFactory.h"
#include "edu/stanford/nlp/util/Pair.h"
#include "edu/stanford/nlp/util/PriorityQueue.h"
#include "edu/stanford/nlp/util/RuntimeInterruptedException.h"
#include "edu/stanford/nlp/util/Sets.h"
#include "edu/stanford/nlp/util/StringUtils.h"
#include "edu/stanford/nlp/util/logging/PrettyLogger.h"
#include "edu/stanford/nlp/util/logging/Redwood.h"
#include "java/io/BufferedInputStream.h"
#include "java/io/BufferedOutputStream.h"
#include "java/io/BufferedReader.h"
#include "java/io/FileInputStream.h"
#include "java/io/FileOutputStream.h"
#include "java/io/FileWriter.h"
#include "java/io/ObjectInputStream.h"
#include "java/io/ObjectOutputStream.h"
#include "java/io/OutputStream.h"
#include "java/io/PrintStream.h"
#include "java/io/PrintWriter.h"
#include "java/lang/Boolean.h"
#include "java/lang/Comparable.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/Short.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/lang/reflect/Constructor.h"
#include "java/text/NumberFormat.h"
#include "java/util/AbstractCollection.h"
#include "java/util/AbstractMap.h"
#include "java/util/AbstractSet.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/Comparator.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Random.h"
#include "java/util/Set.h"
#include "java/util/function/Consumer.h"
#include "java/util/function/Function.h"
#include "java/util/function/ToDoubleFunction.h"
#include "java/util/function/ToIntFunction.h"
#include "java/util/function/ToLongFunction.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"

@interface EduStanfordNlpStatsCounters ()

- (instancetype)init;

+ (void)loadIntoCounterWithNSString:(NSString *)filename
                       withIOSClass:(IOSClass *)c
     withEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)counter;

@end

inline jdouble EduStanfordNlpStatsCounters_get_LOG_E_2();
static jdouble EduStanfordNlpStatsCounters_LOG_E_2;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(EduStanfordNlpStatsCounters, LOG_E_2, jdouble)

__attribute__((unused)) static void EduStanfordNlpStatsCounters_init(EduStanfordNlpStatsCounters *self);

__attribute__((unused)) static EduStanfordNlpStatsCounters *new_EduStanfordNlpStatsCounters_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpStatsCounters *create_EduStanfordNlpStatsCounters_init();

__attribute__((unused)) static void EduStanfordNlpStatsCounters_loadIntoCounterWithNSString_withIOSClass_withEduStanfordNlpStatsCounter_(NSString *filename, IOSClass *c, id<EduStanfordNlpStatsCounter> counter);

@interface EduStanfordNlpStatsCounters_$Lambda$1 : NSObject < JavaUtilComparator >

- (jint)compareWithId:(id)x
               withId:(id)y;

@end

J2OBJC_STATIC_INIT(EduStanfordNlpStatsCounters_$Lambda$1)

inline EduStanfordNlpStatsCounters_$Lambda$1 *EduStanfordNlpStatsCounters_$Lambda$1_get_instance();
static EduStanfordNlpStatsCounters_$Lambda$1 *EduStanfordNlpStatsCounters_$Lambda$1_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpStatsCounters_$Lambda$1, instance, EduStanfordNlpStatsCounters_$Lambda$1 *)

__attribute__((unused)) static void EduStanfordNlpStatsCounters_$Lambda$1_init(EduStanfordNlpStatsCounters_$Lambda$1 *self);

__attribute__((unused)) static EduStanfordNlpStatsCounters_$Lambda$1 *new_EduStanfordNlpStatsCounters_$Lambda$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpStatsCounters_$Lambda$1 *create_EduStanfordNlpStatsCounters_$Lambda$1_init();

@interface EduStanfordNlpStatsCounters_$Lambda$2 : NSObject < JavaUtilComparator > {
 @public
  id<EduStanfordNlpStatsCounter> val$counter_;
}

- (jint)compareWithId:(id)o1
               withId:(id)o2;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpStatsCounters_$Lambda$2)

J2OBJC_FIELD_SETTER(EduStanfordNlpStatsCounters_$Lambda$2, val$counter_, id<EduStanfordNlpStatsCounter>)

__attribute__((unused)) static void EduStanfordNlpStatsCounters_$Lambda$2_initWithEduStanfordNlpStatsCounter_(EduStanfordNlpStatsCounters_$Lambda$2 *self, id<EduStanfordNlpStatsCounter> capture$0);

__attribute__((unused)) static EduStanfordNlpStatsCounters_$Lambda$2 *new_EduStanfordNlpStatsCounters_$Lambda$2_initWithEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpStatsCounters_$Lambda$2 *create_EduStanfordNlpStatsCounters_$Lambda$2_initWithEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> capture$0);

@interface EduStanfordNlpStatsCounters_$Lambda$3 : NSObject < JavaUtilComparator > {
 @public
  id<EduStanfordNlpStatsCounter> val$counter_;
}

- (jint)compareWithId:(id<JavaLangComparable>)o1
               withId:(id<JavaLangComparable>)o2;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpStatsCounters_$Lambda$3)

J2OBJC_FIELD_SETTER(EduStanfordNlpStatsCounters_$Lambda$3, val$counter_, id<EduStanfordNlpStatsCounter>)

__attribute__((unused)) static void EduStanfordNlpStatsCounters_$Lambda$3_initWithEduStanfordNlpStatsCounter_(EduStanfordNlpStatsCounters_$Lambda$3 *self, id<EduStanfordNlpStatsCounter> capture$0);

__attribute__((unused)) static EduStanfordNlpStatsCounters_$Lambda$3 *new_EduStanfordNlpStatsCounters_$Lambda$3_initWithEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpStatsCounters_$Lambda$3 *create_EduStanfordNlpStatsCounters_$Lambda$3_initWithEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> capture$0);

@interface EduStanfordNlpStatsCounters_$Lambda$4 : NSObject < JavaUtilComparator > {
 @public
  id<EduStanfordNlpStatsCounter> val$counter_;
}

- (jint)compareWithId:(id)o1
               withId:(id)o2;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpStatsCounters_$Lambda$4)

J2OBJC_FIELD_SETTER(EduStanfordNlpStatsCounters_$Lambda$4, val$counter_, id<EduStanfordNlpStatsCounter>)

__attribute__((unused)) static void EduStanfordNlpStatsCounters_$Lambda$4_initWithEduStanfordNlpStatsCounter_(EduStanfordNlpStatsCounters_$Lambda$4 *self, id<EduStanfordNlpStatsCounter> capture$0);

__attribute__((unused)) static EduStanfordNlpStatsCounters_$Lambda$4 *new_EduStanfordNlpStatsCounters_$Lambda$4_initWithEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpStatsCounters_$Lambda$4 *create_EduStanfordNlpStatsCounters_$Lambda$4_initWithEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> capture$0);

@interface EduStanfordNlpStatsCounters_$Lambda$5 : NSObject < JavaUtilComparator > {
 @public
  jboolean val$ascending_;
  jboolean val$useMagnitude_;
  id<EduStanfordNlpStatsCounter> val$counter_;
}

- (jint)compareWithId:(id)o1
               withId:(id)o2;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpStatsCounters_$Lambda$5)

J2OBJC_FIELD_SETTER(EduStanfordNlpStatsCounters_$Lambda$5, val$counter_, id<EduStanfordNlpStatsCounter>)

__attribute__((unused)) static void EduStanfordNlpStatsCounters_$Lambda$5_initWithBoolean_withBoolean_withEduStanfordNlpStatsCounter_(EduStanfordNlpStatsCounters_$Lambda$5 *self, jboolean capture$0, jboolean capture$1, id<EduStanfordNlpStatsCounter> capture$2);

__attribute__((unused)) static EduStanfordNlpStatsCounters_$Lambda$5 *new_EduStanfordNlpStatsCounters_$Lambda$5_initWithBoolean_withBoolean_withEduStanfordNlpStatsCounter_(jboolean capture$0, jboolean capture$1, id<EduStanfordNlpStatsCounter> capture$2) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpStatsCounters_$Lambda$5 *create_EduStanfordNlpStatsCounters_$Lambda$5_initWithBoolean_withBoolean_withEduStanfordNlpStatsCounter_(jboolean capture$0, jboolean capture$1, id<EduStanfordNlpStatsCounter> capture$2);

@interface EduStanfordNlpStatsCounters_$Lambda$6 : NSObject < JavaUtilComparator >

- (jint)compareWithId:(EduStanfordNlpUtilPair *)a
               withId:(EduStanfordNlpUtilPair *)b;

@end

J2OBJC_STATIC_INIT(EduStanfordNlpStatsCounters_$Lambda$6)

inline EduStanfordNlpStatsCounters_$Lambda$6 *EduStanfordNlpStatsCounters_$Lambda$6_get_instance();
static EduStanfordNlpStatsCounters_$Lambda$6 *EduStanfordNlpStatsCounters_$Lambda$6_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpStatsCounters_$Lambda$6, instance, EduStanfordNlpStatsCounters_$Lambda$6 *)

__attribute__((unused)) static void EduStanfordNlpStatsCounters_$Lambda$6_init(EduStanfordNlpStatsCounters_$Lambda$6 *self);

__attribute__((unused)) static EduStanfordNlpStatsCounters_$Lambda$6 *new_EduStanfordNlpStatsCounters_$Lambda$6_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpStatsCounters_$Lambda$6 *create_EduStanfordNlpStatsCounters_$Lambda$6_init();

@interface EduStanfordNlpStatsCounters_$1 : EduStanfordNlpStatsAbstractCounter {
 @public
  id<EduStanfordNlpStatsCounter> val$counter_;
}

- (void)clear;

- (jboolean)containsKeyWithId:(id)key;

- (jdouble)getCountWithId:(id)key;

- (id<EduStanfordNlpUtilFactory>)getFactory;

- (jdouble)removeWithId:(id)key;

- (void)setCountWithId:(id)key
            withDouble:(jdouble)value;

- (jdouble)incrementCountWithId:(id)key
                     withDouble:(jdouble)value;

- (jdouble)incrementCountWithId:(id)key;

- (jdouble)logIncrementCountWithId:(id)key
                        withDouble:(jdouble)value;

- (jint)size;

- (jdouble)totalCount;

- (id<JavaUtilCollection>)values;

- (id<JavaUtilSet>)keySet;

- (id<JavaUtilSet>)entrySet;

- (void)setDefaultReturnValueWithDouble:(jdouble)rv;

- (jdouble)defaultReturnValue;

- (void)prettyLogWithEduStanfordNlpUtilLoggingRedwood_RedwoodChannels:(EduStanfordNlpUtilLoggingRedwood_RedwoodChannels *)channels
                                                         withNSString:(NSString *)description_;

- (instancetype)initWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpStatsCounters_$1)

J2OBJC_FIELD_SETTER(EduStanfordNlpStatsCounters_$1, val$counter_, id<EduStanfordNlpStatsCounter>)

__attribute__((unused)) static void EduStanfordNlpStatsCounters_$1_initWithEduStanfordNlpStatsCounter_(EduStanfordNlpStatsCounters_$1 *self, id<EduStanfordNlpStatsCounter> capture$0);

__attribute__((unused)) static EduStanfordNlpStatsCounters_$1 *new_EduStanfordNlpStatsCounters_$1_initWithEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpStatsCounters_$1 *create_EduStanfordNlpStatsCounters_$1_initWithEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> capture$0);

@interface EduStanfordNlpStatsCounters_$1_$1 : JavaUtilAbstractSet {
 @public
  EduStanfordNlpStatsCounters_$1 *this$0_;
}

- (id<JavaUtilIterator>)iterator;

- (jint)size;

- (instancetype)initWithEduStanfordNlpStatsCounters_$1:(EduStanfordNlpStatsCounters_$1 *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpStatsCounters_$1_$1)

J2OBJC_FIELD_SETTER(EduStanfordNlpStatsCounters_$1_$1, this$0_, EduStanfordNlpStatsCounters_$1 *)

__attribute__((unused)) static void EduStanfordNlpStatsCounters_$1_$1_initWithEduStanfordNlpStatsCounters_$1_(EduStanfordNlpStatsCounters_$1_$1 *self, EduStanfordNlpStatsCounters_$1 *outer$);

__attribute__((unused)) static EduStanfordNlpStatsCounters_$1_$1 *new_EduStanfordNlpStatsCounters_$1_$1_initWithEduStanfordNlpStatsCounters_$1_(EduStanfordNlpStatsCounters_$1 *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpStatsCounters_$1_$1 *create_EduStanfordNlpStatsCounters_$1_$1_initWithEduStanfordNlpStatsCounters_$1_(EduStanfordNlpStatsCounters_$1 *outer$);

@interface EduStanfordNlpStatsCounters_$1_$1_$1 : NSObject < JavaUtilIterator > {
 @public
  id<JavaUtilIterator> inner_;
}

- (jboolean)hasNext;

- (id<JavaUtilMap_Entry>)next;

- (void)remove;

- (instancetype)initWithEduStanfordNlpStatsCounters_$1_$1:(EduStanfordNlpStatsCounters_$1_$1 *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpStatsCounters_$1_$1_$1)

J2OBJC_FIELD_SETTER(EduStanfordNlpStatsCounters_$1_$1_$1, inner_, id<JavaUtilIterator>)

__attribute__((unused)) static void EduStanfordNlpStatsCounters_$1_$1_$1_initWithEduStanfordNlpStatsCounters_$1_$1_(EduStanfordNlpStatsCounters_$1_$1_$1 *self, EduStanfordNlpStatsCounters_$1_$1 *outer$);

__attribute__((unused)) static EduStanfordNlpStatsCounters_$1_$1_$1 *new_EduStanfordNlpStatsCounters_$1_$1_$1_initWithEduStanfordNlpStatsCounters_$1_$1_(EduStanfordNlpStatsCounters_$1_$1 *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpStatsCounters_$1_$1_$1 *create_EduStanfordNlpStatsCounters_$1_$1_$1_initWithEduStanfordNlpStatsCounters_$1_$1_(EduStanfordNlpStatsCounters_$1_$1 *outer$);

@interface EduStanfordNlpStatsCounters_$1_$1_$1_$1 : NSObject < JavaUtilMap_Entry > {
 @public
  id<JavaUtilMap_Entry> e_;
}

- (id)getKey;

- (JavaLangDouble *)getValue;

- (JavaLangDouble *)setValueWithId:(JavaLangDouble *)value;

- (instancetype)initWithEduStanfordNlpStatsCounters_$1_$1_$1:(EduStanfordNlpStatsCounters_$1_$1_$1 *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpStatsCounters_$1_$1_$1_$1)

J2OBJC_FIELD_SETTER(EduStanfordNlpStatsCounters_$1_$1_$1_$1, e_, id<JavaUtilMap_Entry>)

__attribute__((unused)) static void EduStanfordNlpStatsCounters_$1_$1_$1_$1_initWithEduStanfordNlpStatsCounters_$1_$1_$1_(EduStanfordNlpStatsCounters_$1_$1_$1_$1 *self, EduStanfordNlpStatsCounters_$1_$1_$1 *outer$);

__attribute__((unused)) static EduStanfordNlpStatsCounters_$1_$1_$1_$1 *new_EduStanfordNlpStatsCounters_$1_$1_$1_$1_initWithEduStanfordNlpStatsCounters_$1_$1_$1_(EduStanfordNlpStatsCounters_$1_$1_$1 *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpStatsCounters_$1_$1_$1_$1 *create_EduStanfordNlpStatsCounters_$1_$1_$1_$1_initWithEduStanfordNlpStatsCounters_$1_$1_$1_(EduStanfordNlpStatsCounters_$1_$1_$1 *outer$);

@interface EduStanfordNlpStatsCounters_$2 : EduStanfordNlpStatsAbstractCounter {
 @public
  jdouble total_;
  jdouble defRV_;
  id<JavaUtilMap> val$map_;
  IOSClass *val$type_;
}

- (void)clear;

- (jboolean)containsKeyWithId:(id)key;

- (void)setDefaultReturnValueWithDouble:(jdouble)rv;

- (jdouble)defaultReturnValue;

- (jboolean)isEqual:(id)o;

- (NSUInteger)hash;

- (id<JavaUtilSet>)entrySet;

- (jdouble)getCountWithId:(id)key;

- (id<EduStanfordNlpUtilFactory>)getFactory;

- (id<JavaUtilSet>)keySet;

- (jdouble)removeWithId:(id)key;

- (void)setCountWithId:(id)key
            withDouble:(jdouble)value;

- (jint)size;

- (jdouble)totalCount;

- (id<JavaUtilCollection>)values;

- (void)prettyLogWithEduStanfordNlpUtilLoggingRedwood_RedwoodChannels:(EduStanfordNlpUtilLoggingRedwood_RedwoodChannels *)channels
                                                         withNSString:(NSString *)description_;

- (instancetype)initWithDouble:(jdouble)capture$0
               withJavaUtilMap:(id<JavaUtilMap>)capture$1
                  withIOSClass:(IOSClass *)capture$2;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpStatsCounters_$2)

J2OBJC_FIELD_SETTER(EduStanfordNlpStatsCounters_$2, val$map_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(EduStanfordNlpStatsCounters_$2, val$type_, IOSClass *)

__attribute__((unused)) static void EduStanfordNlpStatsCounters_$2_initWithDouble_withJavaUtilMap_withIOSClass_(EduStanfordNlpStatsCounters_$2 *self, jdouble capture$0, id<JavaUtilMap> capture$1, IOSClass *capture$2);

__attribute__((unused)) static EduStanfordNlpStatsCounters_$2 *new_EduStanfordNlpStatsCounters_$2_initWithDouble_withJavaUtilMap_withIOSClass_(jdouble capture$0, id<JavaUtilMap> capture$1, IOSClass *capture$2) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpStatsCounters_$2 *create_EduStanfordNlpStatsCounters_$2_initWithDouble_withJavaUtilMap_withIOSClass_(jdouble capture$0, id<JavaUtilMap> capture$1, IOSClass *capture$2);

@interface EduStanfordNlpStatsCounters_$2_$1 : JavaUtilAbstractSet {
 @public
  EduStanfordNlpStatsCounters_$2 *this$0_;
  id<JavaUtilSet> entries_;
}

- (id<JavaUtilIterator>)iterator;

- (jint)size;

- (instancetype)initWithEduStanfordNlpStatsCounters_$2:(EduStanfordNlpStatsCounters_$2 *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpStatsCounters_$2_$1)

J2OBJC_FIELD_SETTER(EduStanfordNlpStatsCounters_$2_$1, this$0_, EduStanfordNlpStatsCounters_$2 *)
J2OBJC_FIELD_SETTER(EduStanfordNlpStatsCounters_$2_$1, entries_, id<JavaUtilSet>)

__attribute__((unused)) static void EduStanfordNlpStatsCounters_$2_$1_initWithEduStanfordNlpStatsCounters_$2_(EduStanfordNlpStatsCounters_$2_$1 *self, EduStanfordNlpStatsCounters_$2 *outer$);

__attribute__((unused)) static EduStanfordNlpStatsCounters_$2_$1 *new_EduStanfordNlpStatsCounters_$2_$1_initWithEduStanfordNlpStatsCounters_$2_(EduStanfordNlpStatsCounters_$2 *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpStatsCounters_$2_$1 *create_EduStanfordNlpStatsCounters_$2_$1_initWithEduStanfordNlpStatsCounters_$2_(EduStanfordNlpStatsCounters_$2 *outer$);

@interface EduStanfordNlpStatsCounters_$2_$1_$1 : NSObject < JavaUtilIterator > {
 @public
  EduStanfordNlpStatsCounters_$2_$1 *this$0_;
  id<JavaUtilIterator> it_;
  id<JavaUtilMap_Entry> lastEntry_;
}

- (jboolean)hasNext;

- (id<JavaUtilMap_Entry>)next;

- (void)remove;

- (instancetype)initWithEduStanfordNlpStatsCounters_$2_$1:(EduStanfordNlpStatsCounters_$2_$1 *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpStatsCounters_$2_$1_$1)

J2OBJC_FIELD_SETTER(EduStanfordNlpStatsCounters_$2_$1_$1, this$0_, EduStanfordNlpStatsCounters_$2_$1 *)
J2OBJC_FIELD_SETTER(EduStanfordNlpStatsCounters_$2_$1_$1, it_, id<JavaUtilIterator>)
J2OBJC_FIELD_SETTER(EduStanfordNlpStatsCounters_$2_$1_$1, lastEntry_, id<JavaUtilMap_Entry>)

__attribute__((unused)) static void EduStanfordNlpStatsCounters_$2_$1_$1_initWithEduStanfordNlpStatsCounters_$2_$1_(EduStanfordNlpStatsCounters_$2_$1_$1 *self, EduStanfordNlpStatsCounters_$2_$1 *outer$);

__attribute__((unused)) static EduStanfordNlpStatsCounters_$2_$1_$1 *new_EduStanfordNlpStatsCounters_$2_$1_$1_initWithEduStanfordNlpStatsCounters_$2_$1_(EduStanfordNlpStatsCounters_$2_$1 *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpStatsCounters_$2_$1_$1 *create_EduStanfordNlpStatsCounters_$2_$1_$1_initWithEduStanfordNlpStatsCounters_$2_$1_(EduStanfordNlpStatsCounters_$2_$1 *outer$);

@interface EduStanfordNlpStatsCounters_$2_$1_$1_$1 : NSObject < JavaUtilMap_Entry > {
 @public
  EduStanfordNlpStatsCounters_$2_$1_$1 *this$0_;
  id<JavaUtilMap_Entry> val$entry_;
}

- (id)getKey;

- (JavaLangDouble *)getValue;

- (JavaLangDouble *)setValueWithId:(JavaLangDouble *)value;

- (instancetype)initWithEduStanfordNlpStatsCounters_$2_$1_$1:(EduStanfordNlpStatsCounters_$2_$1_$1 *)outer$
                                       withJavaUtilMap_Entry:(id<JavaUtilMap_Entry>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpStatsCounters_$2_$1_$1_$1)

J2OBJC_FIELD_SETTER(EduStanfordNlpStatsCounters_$2_$1_$1_$1, this$0_, EduStanfordNlpStatsCounters_$2_$1_$1 *)
J2OBJC_FIELD_SETTER(EduStanfordNlpStatsCounters_$2_$1_$1_$1, val$entry_, id<JavaUtilMap_Entry>)

__attribute__((unused)) static void EduStanfordNlpStatsCounters_$2_$1_$1_$1_initWithEduStanfordNlpStatsCounters_$2_$1_$1_withJavaUtilMap_Entry_(EduStanfordNlpStatsCounters_$2_$1_$1_$1 *self, EduStanfordNlpStatsCounters_$2_$1_$1 *outer$, id<JavaUtilMap_Entry> capture$0);

__attribute__((unused)) static EduStanfordNlpStatsCounters_$2_$1_$1_$1 *new_EduStanfordNlpStatsCounters_$2_$1_$1_$1_initWithEduStanfordNlpStatsCounters_$2_$1_$1_withJavaUtilMap_Entry_(EduStanfordNlpStatsCounters_$2_$1_$1 *outer$, id<JavaUtilMap_Entry> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpStatsCounters_$2_$1_$1_$1 *create_EduStanfordNlpStatsCounters_$2_$1_$1_$1_initWithEduStanfordNlpStatsCounters_$2_$1_$1_withJavaUtilMap_Entry_(EduStanfordNlpStatsCounters_$2_$1_$1 *outer$, id<JavaUtilMap_Entry> capture$0);

@interface EduStanfordNlpStatsCounters_$2_$2 : NSObject < EduStanfordNlpUtilFactory > {
 @public
  EduStanfordNlpStatsCounters_$2 *this$0_;
}

- (id<EduStanfordNlpStatsCounter>)create;

- (instancetype)initWithEduStanfordNlpStatsCounters_$2:(EduStanfordNlpStatsCounters_$2 *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpStatsCounters_$2_$2)

J2OBJC_FIELD_SETTER(EduStanfordNlpStatsCounters_$2_$2, this$0_, EduStanfordNlpStatsCounters_$2 *)

inline jlong EduStanfordNlpStatsCounters_$2_$2_get_serialVersionUID();
#define EduStanfordNlpStatsCounters_$2_$2_serialVersionUID -4063129407369590522LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpStatsCounters_$2_$2, serialVersionUID, jlong)

__attribute__((unused)) static void EduStanfordNlpStatsCounters_$2_$2_initWithEduStanfordNlpStatsCounters_$2_(EduStanfordNlpStatsCounters_$2_$2 *self, EduStanfordNlpStatsCounters_$2 *outer$);

__attribute__((unused)) static EduStanfordNlpStatsCounters_$2_$2 *new_EduStanfordNlpStatsCounters_$2_$2_initWithEduStanfordNlpStatsCounters_$2_(EduStanfordNlpStatsCounters_$2 *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpStatsCounters_$2_$2 *create_EduStanfordNlpStatsCounters_$2_$2_initWithEduStanfordNlpStatsCounters_$2_(EduStanfordNlpStatsCounters_$2 *outer$);

@interface EduStanfordNlpStatsCounters_$2_$3 : JavaUtilAbstractSet {
 @public
  EduStanfordNlpStatsCounters_$2 *this$0_;
}

- (id<JavaUtilIterator>)iterator;

- (jint)size;

- (instancetype)initWithEduStanfordNlpStatsCounters_$2:(EduStanfordNlpStatsCounters_$2 *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpStatsCounters_$2_$3)

J2OBJC_FIELD_SETTER(EduStanfordNlpStatsCounters_$2_$3, this$0_, EduStanfordNlpStatsCounters_$2 *)

__attribute__((unused)) static void EduStanfordNlpStatsCounters_$2_$3_initWithEduStanfordNlpStatsCounters_$2_(EduStanfordNlpStatsCounters_$2_$3 *self, EduStanfordNlpStatsCounters_$2 *outer$);

__attribute__((unused)) static EduStanfordNlpStatsCounters_$2_$3 *new_EduStanfordNlpStatsCounters_$2_$3_initWithEduStanfordNlpStatsCounters_$2_(EduStanfordNlpStatsCounters_$2 *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpStatsCounters_$2_$3 *create_EduStanfordNlpStatsCounters_$2_$3_initWithEduStanfordNlpStatsCounters_$2_(EduStanfordNlpStatsCounters_$2 *outer$);

@interface EduStanfordNlpStatsCounters_$2_$3_$1 : NSObject < JavaUtilIterator > {
 @public
  id<JavaUtilIterator> it_;
}

- (jboolean)hasNext;

- (id)next;

- (void)remove;

- (instancetype)initWithEduStanfordNlpStatsCounters_$2_$3:(EduStanfordNlpStatsCounters_$2_$3 *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpStatsCounters_$2_$3_$1)

J2OBJC_FIELD_SETTER(EduStanfordNlpStatsCounters_$2_$3_$1, it_, id<JavaUtilIterator>)

__attribute__((unused)) static void EduStanfordNlpStatsCounters_$2_$3_$1_initWithEduStanfordNlpStatsCounters_$2_$3_(EduStanfordNlpStatsCounters_$2_$3_$1 *self, EduStanfordNlpStatsCounters_$2_$3 *outer$);

__attribute__((unused)) static EduStanfordNlpStatsCounters_$2_$3_$1 *new_EduStanfordNlpStatsCounters_$2_$3_$1_initWithEduStanfordNlpStatsCounters_$2_$3_(EduStanfordNlpStatsCounters_$2_$3 *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpStatsCounters_$2_$3_$1 *create_EduStanfordNlpStatsCounters_$2_$3_$1_initWithEduStanfordNlpStatsCounters_$2_$3_(EduStanfordNlpStatsCounters_$2_$3 *outer$);

@interface EduStanfordNlpStatsCounters_$2_$4 : JavaUtilAbstractCollection {
 @public
  EduStanfordNlpStatsCounters_$2 *this$0_;
}

- (id<JavaUtilIterator>)iterator;

- (jint)size;

- (instancetype)initWithEduStanfordNlpStatsCounters_$2:(EduStanfordNlpStatsCounters_$2 *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpStatsCounters_$2_$4)

J2OBJC_FIELD_SETTER(EduStanfordNlpStatsCounters_$2_$4, this$0_, EduStanfordNlpStatsCounters_$2 *)

__attribute__((unused)) static void EduStanfordNlpStatsCounters_$2_$4_initWithEduStanfordNlpStatsCounters_$2_(EduStanfordNlpStatsCounters_$2_$4 *self, EduStanfordNlpStatsCounters_$2 *outer$);

__attribute__((unused)) static EduStanfordNlpStatsCounters_$2_$4 *new_EduStanfordNlpStatsCounters_$2_$4_initWithEduStanfordNlpStatsCounters_$2_(EduStanfordNlpStatsCounters_$2 *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpStatsCounters_$2_$4 *create_EduStanfordNlpStatsCounters_$2_$4_initWithEduStanfordNlpStatsCounters_$2_(EduStanfordNlpStatsCounters_$2 *outer$);

@interface EduStanfordNlpStatsCounters_$2_$4_$1 : NSObject < JavaUtilIterator > {
 @public
  id<JavaUtilIterator> it_;
}

- (jboolean)hasNext;

- (JavaLangDouble *)next;

- (void)remove;

- (instancetype)initWithEduStanfordNlpStatsCounters_$2_$4:(EduStanfordNlpStatsCounters_$2_$4 *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpStatsCounters_$2_$4_$1)

J2OBJC_FIELD_SETTER(EduStanfordNlpStatsCounters_$2_$4_$1, it_, id<JavaUtilIterator>)

__attribute__((unused)) static void EduStanfordNlpStatsCounters_$2_$4_$1_initWithEduStanfordNlpStatsCounters_$2_$4_(EduStanfordNlpStatsCounters_$2_$4_$1 *self, EduStanfordNlpStatsCounters_$2_$4 *outer$);

__attribute__((unused)) static EduStanfordNlpStatsCounters_$2_$4_$1 *new_EduStanfordNlpStatsCounters_$2_$4_$1_initWithEduStanfordNlpStatsCounters_$2_$4_(EduStanfordNlpStatsCounters_$2_$4 *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpStatsCounters_$2_$4_$1 *create_EduStanfordNlpStatsCounters_$2_$4_$1_initWithEduStanfordNlpStatsCounters_$2_$4_(EduStanfordNlpStatsCounters_$2_$4 *outer$);

@interface EduStanfordNlpStatsCounters_$3 : JavaUtilAbstractMap {
 @public
  id<EduStanfordNlpStatsCounter> val$counter_;
}

- (jint)size;

- (id<JavaUtilSet>)entrySet;

- (jboolean)containsKeyWithId:(id)key;

- (JavaLangDouble *)getWithId:(id)key;

- (JavaLangDouble *)putWithId:(id)key
                       withId:(JavaLangDouble *)value;

- (JavaLangDouble *)removeWithId:(id)key;

- (id<JavaUtilSet>)keySet;

- (instancetype)initWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpStatsCounters_$3)

J2OBJC_FIELD_SETTER(EduStanfordNlpStatsCounters_$3, val$counter_, id<EduStanfordNlpStatsCounter>)

__attribute__((unused)) static void EduStanfordNlpStatsCounters_$3_initWithEduStanfordNlpStatsCounter_(EduStanfordNlpStatsCounters_$3 *self, id<EduStanfordNlpStatsCounter> capture$0);

__attribute__((unused)) static EduStanfordNlpStatsCounters_$3 *new_EduStanfordNlpStatsCounters_$3_initWithEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpStatsCounters_$3 *create_EduStanfordNlpStatsCounters_$3_initWithEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> capture$0);

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpStatsCounters)

JavaUtilRandom *EduStanfordNlpStatsCounters_RAND;

@implementation EduStanfordNlpStatsCounters

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpStatsCounters_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jdouble)logSumWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c {
  return EduStanfordNlpStatsCounters_logSumWithEduStanfordNlpStatsCounter_(c);
}

+ (void)logNormalizeInPlaceWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c {
  EduStanfordNlpStatsCounters_logNormalizeInPlaceWithEduStanfordNlpStatsCounter_(c);
}

+ (jdouble)maxWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c {
  return EduStanfordNlpStatsCounters_maxWithEduStanfordNlpStatsCounter_(c);
}

+ (jdouble)maxWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c
                                  withDouble:(jdouble)valueIfEmpty {
  return EduStanfordNlpStatsCounters_maxWithEduStanfordNlpStatsCounter_withDouble_(c, valueIfEmpty);
}

+ (id<EduStanfordNlpStatsCounter>)asCounterWithJavaUtilCollection:(id<JavaUtilCollection>)c {
  return EduStanfordNlpStatsCounters_asCounterWithJavaUtilCollection_(c);
}

+ (jdouble)minWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c {
  return EduStanfordNlpStatsCounters_minWithEduStanfordNlpStatsCounter_(c);
}

+ (id)argmaxWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c {
  return EduStanfordNlpStatsCounters_argmaxWithEduStanfordNlpStatsCounter_(c);
}

+ (id)argminWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c {
  return EduStanfordNlpStatsCounters_argminWithEduStanfordNlpStatsCounter_(c);
}

+ (id)argmaxWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c
                    withJavaUtilComparator:(id<JavaUtilComparator>)tieBreaker {
  return EduStanfordNlpStatsCounters_argmaxWithEduStanfordNlpStatsCounter_withJavaUtilComparator_(c, tieBreaker);
}

+ (id)argmaxWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c
                    withJavaUtilComparator:(id<JavaUtilComparator>)tieBreaker
                                    withId:(id)defaultIfEmpty {
  return EduStanfordNlpStatsCounters_argmaxWithEduStanfordNlpStatsCounter_withJavaUtilComparator_withId_(c, tieBreaker, defaultIfEmpty);
}

+ (id)argminWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c
                    withJavaUtilComparator:(id<JavaUtilComparator>)tieBreaker {
  return EduStanfordNlpStatsCounters_argminWithEduStanfordNlpStatsCounter_withJavaUtilComparator_(c, tieBreaker);
}

+ (jdouble)meanWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c {
  return EduStanfordNlpStatsCounters_meanWithEduStanfordNlpStatsCounter_(c);
}

+ (jdouble)standardDeviationWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c {
  return EduStanfordNlpStatsCounters_standardDeviationWithEduStanfordNlpStatsCounter_(c);
}

+ (void)addInPlaceWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)target
                  withEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)arg
                                      withDouble:(jdouble)scale_ {
  EduStanfordNlpStatsCounters_addInPlaceWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_withDouble_(target, arg, scale_);
}

+ (void)addInPlaceWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)target
                  withEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)arg {
  EduStanfordNlpStatsCounters_addInPlaceWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_(target, arg);
}

+ (void)addInPlaceWithDoubleArray:(IOSDoubleArray *)target
   withEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)arg
      withEduStanfordNlpUtilIndex:(id<EduStanfordNlpUtilIndex>)idx {
  EduStanfordNlpStatsCounters_addInPlaceWithDoubleArray_withEduStanfordNlpStatsCounter_withEduStanfordNlpUtilIndex_(target, arg, idx);
}

+ (EduStanfordNlpStatsTwoDimensionalCounter *)addWithEduStanfordNlpStatsTwoDimensionalCounter:(EduStanfordNlpStatsTwoDimensionalCounter *)arg1
                                                 withEduStanfordNlpStatsTwoDimensionalCounter:(EduStanfordNlpStatsTwoDimensionalCounter *)arg2 {
  return EduStanfordNlpStatsCounters_addWithEduStanfordNlpStatsTwoDimensionalCounter_withEduStanfordNlpStatsTwoDimensionalCounter_(arg1, arg2);
}

+ (void)addInPlaceWithEduStanfordNlpStatsTwoDimensionalCounter:(EduStanfordNlpStatsTwoDimensionalCounter *)target
                  withEduStanfordNlpStatsTwoDimensionalCounter:(EduStanfordNlpStatsTwoDimensionalCounter *)arg
                                                    withDouble:(jdouble)scale_ {
  EduStanfordNlpStatsCounters_addInPlaceWithEduStanfordNlpStatsTwoDimensionalCounter_withEduStanfordNlpStatsTwoDimensionalCounter_withDouble_(target, arg, scale_);
}

+ (void)addInPlaceWithEduStanfordNlpStatsTwoDimensionalCounter:(EduStanfordNlpStatsTwoDimensionalCounter *)target
                  withEduStanfordNlpStatsTwoDimensionalCounter:(EduStanfordNlpStatsTwoDimensionalCounter *)arg {
  EduStanfordNlpStatsCounters_addInPlaceWithEduStanfordNlpStatsTwoDimensionalCounter_withEduStanfordNlpStatsTwoDimensionalCounter_(target, arg);
}

+ (void)addInPlaceWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)target
                          withJavaUtilCollection:(id<JavaUtilCollection>)arg
                                      withDouble:(jdouble)value {
  EduStanfordNlpStatsCounters_addInPlaceWithEduStanfordNlpStatsCounter_withJavaUtilCollection_withDouble_(target, arg, value);
}

+ (void)addInPlaceWithEduStanfordNlpStatsTwoDimensionalCounter:(EduStanfordNlpStatsTwoDimensionalCounter *)target
                                                    withDouble:(jdouble)value {
  EduStanfordNlpStatsCounters_addInPlaceWithEduStanfordNlpStatsTwoDimensionalCounter_withDouble_(target, value);
}

+ (void)addInPlaceWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)target
                          withJavaUtilCollection:(id<JavaUtilCollection>)arg {
  EduStanfordNlpStatsCounters_addInPlaceWithEduStanfordNlpStatsCounter_withJavaUtilCollection_(target, arg);
}

+ (void)addInPlaceWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)target
                                      withDouble:(jdouble)value {
  EduStanfordNlpStatsCounters_addInPlaceWithEduStanfordNlpStatsCounter_withDouble_(target, value);
}

+ (void)subtractInPlaceWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)target
                       withEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)arg {
  EduStanfordNlpStatsCounters_subtractInPlaceWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_(target, arg);
}

+ (void)subtractInPlaceWithDoubleArray:(IOSDoubleArray *)target
        withEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)arg
           withEduStanfordNlpUtilIndex:(id<EduStanfordNlpUtilIndex>)idx {
  EduStanfordNlpStatsCounters_subtractInPlaceWithDoubleArray_withEduStanfordNlpStatsCounter_withEduStanfordNlpUtilIndex_(target, arg, idx);
}

+ (void)divideInPlaceWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)target
                     withEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)denominator {
  EduStanfordNlpStatsCounters_divideInPlaceWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_(target, denominator);
}

+ (void)dotProductInPlaceWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)target
                         withEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)term {
  EduStanfordNlpStatsCounters_dotProductInPlaceWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_(target, term);
}

+ (id<EduStanfordNlpStatsCounter>)divideInPlaceWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)target
                                                                   withDouble:(jdouble)divisor {
  return EduStanfordNlpStatsCounters_divideInPlaceWithEduStanfordNlpStatsCounter_withDouble_(target, divisor);
}

+ (id<EduStanfordNlpStatsCounter>)multiplyInPlaceWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)target
                                                                     withDouble:(jdouble)multiplier {
  return EduStanfordNlpStatsCounters_multiplyInPlaceWithEduStanfordNlpStatsCounter_withDouble_(target, multiplier);
}

+ (id<EduStanfordNlpStatsCounter>)multiplyInPlaceWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)target
                                                 withEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)mult {
  return EduStanfordNlpStatsCounters_multiplyInPlaceWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_(target, mult);
}

+ (void)normalizeWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)target {
  EduStanfordNlpStatsCounters_normalizeWithEduStanfordNlpStatsCounter_(target);
}

+ (id<EduStanfordNlpStatsCounter>)asNormalizedCounterWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c {
  return EduStanfordNlpStatsCounters_asNormalizedCounterWithEduStanfordNlpStatsCounter_(c);
}

+ (void)normalizeWithEduStanfordNlpStatsTwoDimensionalCounter:(EduStanfordNlpStatsTwoDimensionalCounter *)target {
  EduStanfordNlpStatsCounters_normalizeWithEduStanfordNlpStatsTwoDimensionalCounter_(target);
}

+ (void)logInPlaceWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)target {
  EduStanfordNlpStatsCounters_logInPlaceWithEduStanfordNlpStatsCounter_(target);
}

+ (id<JavaUtilList>)deleteOutofRangeWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c
                                                           withInt:(jint)top
                                                           withInt:(jint)bottom {
  return EduStanfordNlpStatsCounters_deleteOutofRangeWithEduStanfordNlpStatsCounter_withInt_withInt_(c, top, bottom);
}

+ (void)retainTopWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c
                                        withInt:(jint)num {
  EduStanfordNlpStatsCounters_retainTopWithEduStanfordNlpStatsCounter_withInt_(c, num);
}

+ (void)retainTopKeyComparableWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c
                                                     withInt:(jint)num {
  EduStanfordNlpStatsCounters_retainTopKeyComparableWithEduStanfordNlpStatsCounter_withInt_(c, num);
}

+ (id<JavaUtilList>)retainBottomWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c
                                                       withInt:(jint)num {
  return EduStanfordNlpStatsCounters_retainBottomWithEduStanfordNlpStatsCounter_withInt_(c, num);
}

+ (id<JavaUtilSet>)retainNonZerosWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)counter {
  return EduStanfordNlpStatsCounters_retainNonZerosWithEduStanfordNlpStatsCounter_(counter);
}

+ (id<JavaUtilSet>)retainAboveWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)counter
                                                  withDouble:(jdouble)countThreshold {
  return EduStanfordNlpStatsCounters_retainAboveWithEduStanfordNlpStatsCounter_withDouble_(counter, countThreshold);
}

+ (id<JavaUtilSet>)retainAboveWithEduStanfordNlpStatsTwoDimensionalCounter:(EduStanfordNlpStatsTwoDimensionalCounter *)counter
                                                                withDouble:(jdouble)countThreshold {
  return EduStanfordNlpStatsCounters_retainAboveWithEduStanfordNlpStatsTwoDimensionalCounter_withDouble_(counter, countThreshold);
}

+ (id<EduStanfordNlpStatsCounter>)retainBelowWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)counter
                                                                 withDouble:(jdouble)countMaxThreshold {
  return EduStanfordNlpStatsCounters_retainBelowWithEduStanfordNlpStatsCounter_withDouble_(counter, countMaxThreshold);
}

+ (id<JavaUtilSet>)retainMatchingKeysWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)counter
                                                   withJavaUtilList:(id<JavaUtilList>)matchPatterns {
  return EduStanfordNlpStatsCounters_retainMatchingKeysWithEduStanfordNlpStatsCounter_withJavaUtilList_(counter, matchPatterns);
}

+ (id<JavaUtilSet>)retainKeysWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)counter
                                     withJavaUtilCollection:(id<JavaUtilCollection>)matchKeys {
  return EduStanfordNlpStatsCounters_retainKeysWithEduStanfordNlpStatsCounter_withJavaUtilCollection_(counter, matchKeys);
}

+ (void)removeKeysWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)counter
                          withJavaUtilCollection:(id<JavaUtilCollection>)removeKeysCollection {
  EduStanfordNlpStatsCounters_removeKeysWithEduStanfordNlpStatsCounter_withJavaUtilCollection_(counter, removeKeysCollection);
}

+ (void)removeKeysWithEduStanfordNlpStatsTwoDimensionalCounter:(EduStanfordNlpStatsTwoDimensionalCounter *)counter
                                        withJavaUtilCollection:(id<JavaUtilCollection>)removeKeysCollection {
  EduStanfordNlpStatsCounters_removeKeysWithEduStanfordNlpStatsTwoDimensionalCounter_withJavaUtilCollection_(counter, removeKeysCollection);
}

+ (id<JavaUtilSet>)keysAboveWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c
                                                withDouble:(jdouble)countThreshold {
  return EduStanfordNlpStatsCounters_keysAboveWithEduStanfordNlpStatsCounter_withDouble_(c, countThreshold);
}

+ (id<JavaUtilSet>)keysBelowWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c
                                                withDouble:(jdouble)countThreshold {
  return EduStanfordNlpStatsCounters_keysBelowWithEduStanfordNlpStatsCounter_withDouble_(c, countThreshold);
}

+ (id<JavaUtilSet>)keysAtWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c
                                             withDouble:(jdouble)count {
  return EduStanfordNlpStatsCounters_keysAtWithEduStanfordNlpStatsCounter_withDouble_(c, count);
}

+ (id<EduStanfordNlpStatsCounter>)transformWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c
                                             withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)f {
  return EduStanfordNlpStatsCounters_transformWithEduStanfordNlpStatsCounter_withJavaUtilFunctionFunction_(c, f);
}

+ (id<EduStanfordNlpStatsCounter>)transformWithValuesAddWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c
                                                          withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)f {
  return EduStanfordNlpStatsCounters_transformWithValuesAddWithEduStanfordNlpStatsCounter_withJavaUtilFunctionFunction_(c, f);
}

+ (id<JavaUtilComparator>)toComparatorWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)counter {
  return EduStanfordNlpStatsCounters_toComparatorWithEduStanfordNlpStatsCounter_(counter);
}

+ (id<JavaUtilComparator>)toComparatorWithKeysWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)counter {
  return EduStanfordNlpStatsCounters_toComparatorWithKeysWithEduStanfordNlpStatsCounter_(counter);
}

+ (id<JavaUtilComparator>)toComparatorDescendingWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)counter {
  return EduStanfordNlpStatsCounters_toComparatorDescendingWithEduStanfordNlpStatsCounter_(counter);
}

+ (id<JavaUtilComparator>)toComparatorWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)counter
                                                         withBoolean:(jboolean)ascending
                                                         withBoolean:(jboolean)useMagnitude {
  return EduStanfordNlpStatsCounters_toComparatorWithEduStanfordNlpStatsCounter_withBoolean_withBoolean_(counter, ascending, useMagnitude);
}

+ (id<JavaUtilList>)toSortedListWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c {
  return EduStanfordNlpStatsCounters_toSortedListWithEduStanfordNlpStatsCounter_(c);
}

+ (id<JavaUtilList>)toSortedListWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c
                                                   withBoolean:(jboolean)ascending {
  return EduStanfordNlpStatsCounters_toSortedListWithEduStanfordNlpStatsCounter_withBoolean_(c, ascending);
}

+ (id<JavaUtilList>)toSortedListKeyComparableWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c {
  return EduStanfordNlpStatsCounters_toSortedListKeyComparableWithEduStanfordNlpStatsCounter_(c);
}

+ (EduStanfordNlpStatsIntCounter *)toRankCounterWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c {
  return EduStanfordNlpStatsCounters_toRankCounterWithEduStanfordNlpStatsCounter_(c);
}

+ (id<EduStanfordNlpStatsCounter>)toTiedRankCounterWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c {
  return EduStanfordNlpStatsCounters_toTiedRankCounterWithEduStanfordNlpStatsCounter_(c);
}

+ (id<JavaUtilList>)toDescendingMagnitudeSortedListWithCountsWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c {
  return EduStanfordNlpStatsCounters_toDescendingMagnitudeSortedListWithCountsWithEduStanfordNlpStatsCounter_(c);
}

+ (id<JavaUtilList>)toSortedListWithCountsWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c {
  return EduStanfordNlpStatsCounters_toSortedListWithCountsWithEduStanfordNlpStatsCounter_(c);
}

+ (id<JavaUtilList>)toSortedListWithCountsWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c
                                                  withJavaUtilComparator:(id<JavaUtilComparator>)comparator {
  return EduStanfordNlpStatsCounters_toSortedListWithCountsWithEduStanfordNlpStatsCounter_withJavaUtilComparator_(c, comparator);
}

+ (id<EduStanfordNlpUtilPriorityQueue>)toPriorityQueueWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c {
  return EduStanfordNlpStatsCounters_toPriorityQueueWithEduStanfordNlpStatsCounter_(c);
}

+ (id<EduStanfordNlpStatsCounter>)union__WithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c1
                                         withEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c2 {
  return EduStanfordNlpStatsCounters_union__WithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_(c1, c2);
}

+ (id<EduStanfordNlpStatsCounter>)intersectionWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c1
                                              withEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c2 {
  return EduStanfordNlpStatsCounters_intersectionWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_(c1, c2);
}

+ (jdouble)jaccardCoefficientWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c1
                             withEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c2 {
  return EduStanfordNlpStatsCounters_jaccardCoefficientWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_(c1, c2);
}

+ (id<EduStanfordNlpStatsCounter>)productWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c1
                                         withEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c2 {
  return EduStanfordNlpStatsCounters_productWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_(c1, c2);
}

+ (jdouble)dotProductWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c1
                     withEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c2 {
  return EduStanfordNlpStatsCounters_dotProductWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_(c1, c2);
}

+ (jdouble)dotProductWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c
                                    withDoubleArray:(IOSDoubleArray *)a
                        withEduStanfordNlpUtilIndex:(id<EduStanfordNlpUtilIndex>)idx {
  return EduStanfordNlpStatsCounters_dotProductWithEduStanfordNlpStatsCounter_withDoubleArray_withEduStanfordNlpUtilIndex_(c, a, idx);
}

+ (jdouble)sumEntriesWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c1
                             withJavaUtilCollection:(id<JavaUtilCollection>)entries {
  return EduStanfordNlpStatsCounters_sumEntriesWithEduStanfordNlpStatsCounter_withJavaUtilCollection_(c1, entries);
}

+ (id<EduStanfordNlpStatsCounter>)addWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c1
                                             withJavaUtilCollection:(id<JavaUtilCollection>)c2 {
  return EduStanfordNlpStatsCounters_addWithEduStanfordNlpStatsCounter_withJavaUtilCollection_(c1, c2);
}

+ (id<EduStanfordNlpStatsCounter>)addWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c1
                                     withEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c2 {
  return EduStanfordNlpStatsCounters_addWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_(c1, c2);
}

+ (id<EduStanfordNlpStatsCounter>)addWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c1
                                                         withDouble:(jdouble)value {
  return EduStanfordNlpStatsCounters_addWithEduStanfordNlpStatsCounter_withDouble_(c1, value);
}

+ (jdouble)optimizedDotProductWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c1
                              withEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c2 {
  return EduStanfordNlpStatsCounters_optimizedDotProductWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_(c1, c2);
}

+ (id<EduStanfordNlpStatsCounter>)absoluteDifferenceWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c1
                                                    withEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c2 {
  return EduStanfordNlpStatsCounters_absoluteDifferenceWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_(c1, c2);
}

+ (id<EduStanfordNlpStatsCounter>)divisionWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c1
                                          withEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c2 {
  return EduStanfordNlpStatsCounters_divisionWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_(c1, c2);
}

+ (id<EduStanfordNlpStatsCounter>)divisionNonNaNWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c1
                                                withEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c2 {
  return EduStanfordNlpStatsCounters_divisionNonNaNWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_(c1, c2);
}

+ (jdouble)entropyWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c {
  return EduStanfordNlpStatsCounters_entropyWithEduStanfordNlpStatsCounter_(c);
}

+ (jdouble)crossEntropyWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)from
                       withEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)to {
  return EduStanfordNlpStatsCounters_crossEntropyWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_(from, to);
}

+ (jdouble)klDivergenceWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)from
                       withEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)to {
  return EduStanfordNlpStatsCounters_klDivergenceWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_(from, to);
}

+ (jdouble)jensenShannonDivergenceWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c1
                                  withEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c2 {
  return EduStanfordNlpStatsCounters_jensenShannonDivergenceWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_(c1, c2);
}

+ (jdouble)skewDivergenceWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c1
                         withEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c2
                                             withDouble:(jdouble)skew {
  return EduStanfordNlpStatsCounters_skewDivergenceWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_withDouble_(c1, c2, skew);
}

+ (jdouble)L2NormWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c {
  return EduStanfordNlpStatsCounters_L2NormWithEduStanfordNlpStatsCounter_(c);
}

+ (jdouble)sumSquaresWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c {
  return EduStanfordNlpStatsCounters_sumSquaresWithEduStanfordNlpStatsCounter_(c);
}

+ (jdouble)L1NormWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c {
  return EduStanfordNlpStatsCounters_L1NormWithEduStanfordNlpStatsCounter_(c);
}

+ (id<EduStanfordNlpStatsCounter>)L2NormalizeWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c {
  return EduStanfordNlpStatsCounters_L2NormalizeWithEduStanfordNlpStatsCounter_(c);
}

+ (id<EduStanfordNlpStatsCounter>)L2NormalizeInPlaceWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c {
  return EduStanfordNlpStatsCounters_L2NormalizeInPlaceWithEduStanfordNlpStatsCounter_(c);
}

+ (jdouble)saferL2NormWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c {
  return EduStanfordNlpStatsCounters_saferL2NormWithEduStanfordNlpStatsCounter_(c);
}

+ (id<EduStanfordNlpStatsCounter>)saferL2NormalizeWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c {
  return EduStanfordNlpStatsCounters_saferL2NormalizeWithEduStanfordNlpStatsCounter_(c);
}

+ (jdouble)cosineWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c1
                 withEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c2 {
  return EduStanfordNlpStatsCounters_cosineWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_(c1, c2);
}

+ (id<EduStanfordNlpStatsCounter>)averageWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c1
                                         withEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c2 {
  return EduStanfordNlpStatsCounters_averageWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_(c1, c2);
}

+ (id<EduStanfordNlpStatsCounter>)linearCombinationWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c1
                                                                       withDouble:(jdouble)w1
                                                   withEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c2
                                                                       withDouble:(jdouble)w2 {
  return EduStanfordNlpStatsCounters_linearCombinationWithEduStanfordNlpStatsCounter_withDouble_withEduStanfordNlpStatsCounter_withDouble_(c1, w1, c2, w2);
}

+ (jdouble)pointwiseMutualInformationWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)var1Distribution
                                     withEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)var2Distribution
                                     withEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)jointDistribution
                                         withEduStanfordNlpUtilPair:(EduStanfordNlpUtilPair *)values {
  return EduStanfordNlpStatsCounters_pointwiseMutualInformationWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_withEduStanfordNlpUtilPair_(var1Distribution, var2Distribution, jointDistribution, values);
}

+ (jint)hIndexWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)citationCounts {
  return EduStanfordNlpStatsCounters_hIndexWithEduStanfordNlpStatsCounter_(citationCounts);
}

+ (id<EduStanfordNlpStatsCounter>)perturbCountsWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c
                                                           withJavaUtilRandom:(JavaUtilRandom *)random
                                                                   withDouble:(jdouble)p {
  return EduStanfordNlpStatsCounters_perturbCountsWithEduStanfordNlpStatsCounter_withJavaUtilRandom_withDouble_(c, random, p);
}

+ (void)printCounterComparisonWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)a
                              withEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)b {
  EduStanfordNlpStatsCounters_printCounterComparisonWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_(a, b);
}

+ (void)printCounterComparisonWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)a
                              withEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)b
                                       withJavaIoPrintStream:(JavaIoPrintStream *)outArg {
  EduStanfordNlpStatsCounters_printCounterComparisonWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_withJavaIoPrintStream_(a, b, outArg);
}

+ (void)printCounterComparisonWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)a
                              withEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)b
                                       withJavaIoPrintWriter:(JavaIoPrintWriter *)outArg {
  EduStanfordNlpStatsCounters_printCounterComparisonWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_withJavaIoPrintWriter_(a, b, outArg);
}

+ (id<EduStanfordNlpStatsCounter>)getCountCountsWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c {
  return EduStanfordNlpStatsCounters_getCountCountsWithEduStanfordNlpStatsCounter_(c);
}

+ (id<EduStanfordNlpStatsCounter>)scale__WithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c
                                                             withDouble:(jdouble)s {
  return EduStanfordNlpStatsCounters_scale__WithEduStanfordNlpStatsCounter_withDouble_(c, s);
}

+ (id<EduStanfordNlpStatsCounter>)tfLogScaleWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c
                                                                withDouble:(jdouble)base {
  return EduStanfordNlpStatsCounters_tfLogScaleWithEduStanfordNlpStatsCounter_withDouble_(c, base);
}

+ (void)printCounterSortedByKeysWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c {
  EduStanfordNlpStatsCounters_printCounterSortedByKeysWithEduStanfordNlpStatsCounter_(c);
}

+ (EduStanfordNlpStatsClassicCounter *)loadCounterWithNSString:(NSString *)filename
                                                  withIOSClass:(IOSClass *)c {
  return EduStanfordNlpStatsCounters_loadCounterWithNSString_withIOSClass_(filename, c);
}

+ (EduStanfordNlpStatsIntCounter *)loadIntCounterWithNSString:(NSString *)filename
                                                 withIOSClass:(IOSClass *)c {
  return EduStanfordNlpStatsCounters_loadIntCounterWithNSString_withIOSClass_(filename, c);
}

+ (void)loadIntoCounterWithNSString:(NSString *)filename
                       withIOSClass:(IOSClass *)c
     withEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)counter {
  EduStanfordNlpStatsCounters_loadIntoCounterWithNSString_withIOSClass_withEduStanfordNlpStatsCounter_(filename, c, counter);
}

+ (void)saveCounterWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c
                           withJavaIoOutputStream:(JavaIoOutputStream *)stream {
  EduStanfordNlpStatsCounters_saveCounterWithEduStanfordNlpStatsCounter_withJavaIoOutputStream_(c, stream);
}

+ (void)saveCounterWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c
                                     withNSString:(NSString *)filename {
  EduStanfordNlpStatsCounters_saveCounterWithEduStanfordNlpStatsCounter_withNSString_(c, filename);
}

+ (EduStanfordNlpStatsTwoDimensionalCounter *)load2DCounterWithNSString:(NSString *)filename
                                                           withIOSClass:(IOSClass *)t1
                                                           withIOSClass:(IOSClass *)t2 {
  return EduStanfordNlpStatsCounters_load2DCounterWithNSString_withIOSClass_withIOSClass_(filename, t1, t2);
}

+ (void)loadInto2DCounterWithNSString:(NSString *)filename
                         withIOSClass:(IOSClass *)t1
                         withIOSClass:(IOSClass *)t2
withEduStanfordNlpStatsTwoDimensionalCounter:(EduStanfordNlpStatsTwoDimensionalCounter *)tdc {
  EduStanfordNlpStatsCounters_loadInto2DCounterWithNSString_withIOSClass_withIOSClass_withEduStanfordNlpStatsTwoDimensionalCounter_(filename, t1, t2, tdc);
}

+ (void)loadIncInto2DCounterWithNSString:(NSString *)filename
                            withIOSClass:(IOSClass *)t1
                            withIOSClass:(IOSClass *)t2
withEduStanfordNlpStatsTwoDimensionalCounterInterface:(id<EduStanfordNlpStatsTwoDimensionalCounterInterface>)tdc {
  EduStanfordNlpStatsCounters_loadIncInto2DCounterWithNSString_withIOSClass_withIOSClass_withEduStanfordNlpStatsTwoDimensionalCounterInterface_(filename, t1, t2, tdc);
}

+ (void)save2DCounterWithEduStanfordNlpStatsTwoDimensionalCounter:(EduStanfordNlpStatsTwoDimensionalCounter *)tdc
                                                     withNSString:(NSString *)filename {
  EduStanfordNlpStatsCounters_save2DCounterWithEduStanfordNlpStatsTwoDimensionalCounter_withNSString_(tdc, filename);
}

+ (void)save2DCounterSortedWithEduStanfordNlpStatsTwoDimensionalCounterInterface:(id<EduStanfordNlpStatsTwoDimensionalCounterInterface>)tdc
                                                                    withNSString:(NSString *)filename {
  EduStanfordNlpStatsCounters_save2DCounterSortedWithEduStanfordNlpStatsTwoDimensionalCounterInterface_withNSString_(tdc, filename);
}

+ (void)serializeCounterWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c
                                          withNSString:(NSString *)filename {
  EduStanfordNlpStatsCounters_serializeCounterWithEduStanfordNlpStatsCounter_withNSString_(c, filename);
}

+ (EduStanfordNlpStatsClassicCounter *)deserializeCounterWithNSString:(NSString *)filename {
  return EduStanfordNlpStatsCounters_deserializeCounterWithNSString_(filename);
}

+ (NSString *)toSortedStringWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)counter
                                                   withInt:(jint)k
                                              withNSString:(NSString *)itemFormat
                                              withNSString:(NSString *)joiner
                                              withNSString:(NSString *)wrapperFormat {
  return EduStanfordNlpStatsCounters_toSortedStringWithEduStanfordNlpStatsCounter_withInt_withNSString_withNSString_withNSString_(counter, k, itemFormat, joiner, wrapperFormat);
}

+ (NSString *)toSortedStringWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)counter
                                                   withInt:(jint)k
                                              withNSString:(NSString *)itemFormat
                                              withNSString:(NSString *)joiner {
  return EduStanfordNlpStatsCounters_toSortedStringWithEduStanfordNlpStatsCounter_withInt_withNSString_withNSString_(counter, k, itemFormat, joiner);
}

+ (NSString *)toSortedByKeysStringWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)counter
                                                    withNSString:(NSString *)itemFormat
                                                    withNSString:(NSString *)joiner
                                                    withNSString:(NSString *)wrapperFormat {
  return EduStanfordNlpStatsCounters_toSortedByKeysStringWithEduStanfordNlpStatsCounter_withNSString_withNSString_withNSString_(counter, itemFormat, joiner, wrapperFormat);
}

+ (NSString *)toStringWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)counter
                                             withInt:(jint)maxKeysToPrint {
  return EduStanfordNlpStatsCounters_toStringWithEduStanfordNlpStatsCounter_withInt_(counter, maxKeysToPrint);
}

+ (NSString *)toStringWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)counter
                            withJavaTextNumberFormat:(JavaTextNumberFormat *)nf {
  return EduStanfordNlpStatsCounters_toStringWithEduStanfordNlpStatsCounter_withJavaTextNumberFormat_(counter, nf);
}

+ (NSString *)toStringWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)counter
                            withJavaTextNumberFormat:(JavaTextNumberFormat *)nf
                                        withNSString:(NSString *)preAppend
                                        withNSString:(NSString *)postAppend
                                        withNSString:(NSString *)keyValSeparator
                                        withNSString:(NSString *)itemSeparator {
  return EduStanfordNlpStatsCounters_toStringWithEduStanfordNlpStatsCounter_withJavaTextNumberFormat_withNSString_withNSString_withNSString_withNSString_(counter, nf, preAppend, postAppend, keyValSeparator, itemSeparator);
}

+ (NSString *)toBiggestValuesFirstStringWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c {
  return EduStanfordNlpStatsCounters_toBiggestValuesFirstStringWithEduStanfordNlpStatsCounter_(c);
}

+ (NSString *)toBiggestValuesFirstStringWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c
                                                               withInt:(jint)k {
  return EduStanfordNlpStatsCounters_toBiggestValuesFirstStringWithEduStanfordNlpStatsCounter_withInt_(c, k);
}

+ (NSString *)toBiggestValuesFirstStringWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c
                                                               withInt:(jint)k
                                           withEduStanfordNlpUtilIndex:(id<EduStanfordNlpUtilIndex>)index {
  return EduStanfordNlpStatsCounters_toBiggestValuesFirstStringWithEduStanfordNlpStatsCounter_withInt_withEduStanfordNlpUtilIndex_(c, k, index);
}

+ (NSString *)toVerticalStringWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c {
  return EduStanfordNlpStatsCounters_toVerticalStringWithEduStanfordNlpStatsCounter_(c);
}

+ (NSString *)toVerticalStringWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c
                                                     withInt:(jint)k {
  return EduStanfordNlpStatsCounters_toVerticalStringWithEduStanfordNlpStatsCounter_withInt_(c, k);
}

+ (NSString *)toVerticalStringWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c
                                                withNSString:(NSString *)fmt {
  return EduStanfordNlpStatsCounters_toVerticalStringWithEduStanfordNlpStatsCounter_withNSString_(c, fmt);
}

+ (NSString *)toVerticalStringWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c
                                                     withInt:(jint)k
                                                withNSString:(NSString *)fmt {
  return EduStanfordNlpStatsCounters_toVerticalStringWithEduStanfordNlpStatsCounter_withInt_withNSString_(c, k, fmt);
}

+ (NSString *)toVerticalStringWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c
                                                     withInt:(jint)k
                                                withNSString:(NSString *)fmt
                                                 withBoolean:(jboolean)swap {
  return EduStanfordNlpStatsCounters_toVerticalStringWithEduStanfordNlpStatsCounter_withInt_withNSString_withBoolean_(c, k, fmt, swap);
}

+ (id)restrictedArgMaxWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c
                              withJavaUtilCollection:(id<JavaUtilCollection>)restriction {
  return EduStanfordNlpStatsCounters_restrictedArgMaxWithEduStanfordNlpStatsCounter_withJavaUtilCollection_(c, restriction);
}

+ (id<EduStanfordNlpStatsCounter>)toCounterWithDoubleArray:(IOSDoubleArray *)counts
                               withEduStanfordNlpUtilIndex:(id<EduStanfordNlpUtilIndex>)index {
  return EduStanfordNlpStatsCounters_toCounterWithDoubleArray_withEduStanfordNlpUtilIndex_(counts, index);
}

+ (id<EduStanfordNlpStatsCounter>)toCounterWithJavaUtilMap:(id<JavaUtilMap>)counts
                               withEduStanfordNlpUtilIndex:(id<EduStanfordNlpUtilIndex>)index {
  return EduStanfordNlpStatsCounters_toCounterWithJavaUtilMap_withEduStanfordNlpUtilIndex_(counts, index);
}

+ (IOSDoubleArray *)asArrayWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)counter
                              withEduStanfordNlpUtilIndex:(id<EduStanfordNlpUtilIndex>)index {
  return EduStanfordNlpStatsCounters_asArrayWithEduStanfordNlpStatsCounter_withEduStanfordNlpUtilIndex_(counter, index);
}

+ (IOSDoubleArray *)asArrayWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)counter
                              withEduStanfordNlpUtilIndex:(id<EduStanfordNlpUtilIndex>)index
                                                  withInt:(jint)dimension {
  return EduStanfordNlpStatsCounters_asArrayWithEduStanfordNlpStatsCounter_withEduStanfordNlpUtilIndex_withInt_(counter, index, dimension);
}

+ (IOSDoubleArray *)asArrayWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)counter {
  return EduStanfordNlpStatsCounters_asArrayWithEduStanfordNlpStatsCounter_(counter);
}

+ (EduStanfordNlpStatsTwoDimensionalCounter *)scale__WithEduStanfordNlpStatsTwoDimensionalCounter:(EduStanfordNlpStatsTwoDimensionalCounter *)c
                                                                                       withDouble:(jdouble)d {
  return EduStanfordNlpStatsCounters_scale__WithEduStanfordNlpStatsTwoDimensionalCounter_withDouble_(c, d);
}

+ (id)sampleWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c
                        withJavaUtilRandom:(JavaUtilRandom *)rand {
  return EduStanfordNlpStatsCounters_sampleWithEduStanfordNlpStatsCounter_withJavaUtilRandom_(c, rand);
}

+ (id)sampleWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c {
  return EduStanfordNlpStatsCounters_sampleWithEduStanfordNlpStatsCounter_(c);
}

+ (id<EduStanfordNlpStatsCounter>)powNormalizedWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c
                                                                   withDouble:(jdouble)temp {
  return EduStanfordNlpStatsCounters_powNormalizedWithEduStanfordNlpStatsCounter_withDouble_(c, temp);
}

+ (id<EduStanfordNlpStatsCounter>)powWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c
                                                         withDouble:(jdouble)temp {
  return EduStanfordNlpStatsCounters_powWithEduStanfordNlpStatsCounter_withDouble_(c, temp);
}

+ (void)powInPlaceWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c
                                      withDouble:(jdouble)temp {
  EduStanfordNlpStatsCounters_powInPlaceWithEduStanfordNlpStatsCounter_withDouble_(c, temp);
}

+ (id<EduStanfordNlpStatsCounter>)expWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c {
  return EduStanfordNlpStatsCounters_expWithEduStanfordNlpStatsCounter_(c);
}

+ (void)expInPlaceWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c {
  EduStanfordNlpStatsCounters_expInPlaceWithEduStanfordNlpStatsCounter_(c);
}

+ (id<EduStanfordNlpStatsCounter>)diffWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)goldFeatures
                                      withEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)guessedFeatures {
  return EduStanfordNlpStatsCounters_diffWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_(goldFeatures, guessedFeatures);
}

+ (jboolean)equalsWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)o1
                  withEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)o2 {
  return EduStanfordNlpStatsCounters_equalsWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_(o1, o2);
}

+ (jboolean)equalsWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)o1
                  withEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)o2
                                      withDouble:(jdouble)tolerance {
  return EduStanfordNlpStatsCounters_equalsWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_withDouble_(o1, o2, tolerance);
}

+ (id<EduStanfordNlpStatsCounter>)unmodifiableCounterWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)counter {
  return EduStanfordNlpStatsCounters_unmodifiableCounterWithEduStanfordNlpStatsCounter_(counter);
}

+ (id<EduStanfordNlpStatsCounter>)asCounterWithEduStanfordNlpUtilFixedPrioritiesPriorityQueue:(EduStanfordNlpUtilFixedPrioritiesPriorityQueue *)p {
  return EduStanfordNlpStatsCounters_asCounterWithEduStanfordNlpUtilFixedPrioritiesPriorityQueue_(p);
}

+ (id<EduStanfordNlpStatsCounter>)fromMapWithJavaUtilMap:(id<JavaUtilMap>)map {
  return EduStanfordNlpStatsCounters_fromMapWithJavaUtilMap_(map);
}

+ (id<EduStanfordNlpStatsCounter>)fromMapWithJavaUtilMap:(id<JavaUtilMap>)map
                                            withIOSClass:(IOSClass *)type {
  return EduStanfordNlpStatsCounters_fromMapWithJavaUtilMap_withIOSClass_(map, type);
}

+ (id<JavaUtilMap>)asMapWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)counter {
  return EduStanfordNlpStatsCounters_asMapWithEduStanfordNlpStatsCounter_(counter);
}

+ (jboolean)isUniformDistributionWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)distribution
                                                     withDouble:(jdouble)tolerance {
  return EduStanfordNlpStatsCounters_isUniformDistributionWithEduStanfordNlpStatsCounter_withDouble_(distribution, tolerance);
}

+ (id<EduStanfordNlpStatsCounter>)getCopyWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)originalCounter {
  return EduStanfordNlpStatsCounters_getCopyWithEduStanfordNlpStatsCounter_(originalCounter);
}

+ (void)maxInPlaceWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)target
                  withEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)other {
  EduStanfordNlpStatsCounters_maxInPlaceWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_(target, other);
}

+ (void)minInPlaceWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)target
                  withEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)other {
  EduStanfordNlpStatsCounters_minInPlaceWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_(target, other);
}

+ (void)retainTopMassWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)counter
                                         withDouble:(jdouble)thresholdCount {
  EduStanfordNlpStatsCounters_retainTopMassWithEduStanfordNlpStatsCounter_withDouble_(counter, thresholdCount);
}

+ (void)divideInPlaceWithEduStanfordNlpStatsTwoDimensionalCounter:(EduStanfordNlpStatsTwoDimensionalCounter *)counter
                                                       withDouble:(jdouble)divisor {
  EduStanfordNlpStatsCounters_divideInPlaceWithEduStanfordNlpStatsTwoDimensionalCounter_withDouble_(counter, divisor);
}

+ (jdouble)pearsonsCorrelationCoefficientWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)x
                                         withEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)y {
  return EduStanfordNlpStatsCounters_pearsonsCorrelationCoefficientWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_(x, y);
}

+ (jdouble)spearmanRankCorrelationWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)x
                                  withEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)y {
  return EduStanfordNlpStatsCounters_spearmanRankCorrelationWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_(x, y);
}

+ (void)ensureKeysWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)t
                          withJavaUtilCollection:(id<JavaUtilCollection>)keys
                                      withDouble:(jdouble)value {
  EduStanfordNlpStatsCounters_ensureKeysWithEduStanfordNlpStatsCounter_withJavaUtilCollection_withDouble_(t, keys, value);
}

+ (id<JavaUtilList>)topKeysWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)t
                                                  withInt:(jint)topNum {
  return EduStanfordNlpStatsCounters_topKeysWithEduStanfordNlpStatsCounter_withInt_(t, topNum);
}

+ (id<JavaUtilList>)topKeysWithCountsWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)t
                                                            withInt:(jint)topNum {
  return EduStanfordNlpStatsCounters_topKeysWithCountsWithEduStanfordNlpStatsCounter_withInt_(t, topNum);
}

+ (id<EduStanfordNlpStatsCounter>)getFCounterWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)precision
                                             withEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)recall
                                                                 withDouble:(jdouble)beta {
  return EduStanfordNlpStatsCounters_getFCounterWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_withDouble_(precision, recall, beta);
}

+ (void)transformValuesInPlaceWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)counter
                                withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)func {
  EduStanfordNlpStatsCounters_transformValuesInPlaceWithEduStanfordNlpStatsCounter_withJavaUtilFunctionFunction_(counter, func);
}

+ (id<EduStanfordNlpStatsCounter>)getCountsWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c
                                                   withJavaUtilCollection:(id<JavaUtilCollection>)keys {
  return EduStanfordNlpStatsCounters_getCountsWithEduStanfordNlpStatsCounter_withJavaUtilCollection_(c, keys);
}

+ (void)retainKeysWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)counter
                    withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)retainFunction {
  EduStanfordNlpStatsCounters_retainKeysWithEduStanfordNlpStatsCounter_withJavaUtilFunctionFunction_(counter, retainFunction);
}

+ (id<EduStanfordNlpStatsCounter>)flattenWithJavaUtilMap:(id<JavaUtilMap>)hier {
  return EduStanfordNlpStatsCounters_flattenWithJavaUtilMap_(hier);
}

+ (jboolean)isFiniteWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)counts {
  return EduStanfordNlpStatsCounters_isFiniteWithEduStanfordNlpStatsCounter_(counts);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 0, 1, -1, 2, -1, -1 },
    { NULL, "V", 0x9, 3, 1, -1, 4, -1, -1 },
    { NULL, "D", 0x9, 5, 1, -1, 2, -1, -1 },
    { NULL, "D", 0x9, 5, 6, -1, 7, -1, -1 },
    { NULL, "LEduStanfordNlpStatsCounter;", 0x9, 8, 9, -1, 10, -1, -1 },
    { NULL, "D", 0x9, 11, 1, -1, 2, -1, -1 },
    { NULL, "LNSObject;", 0x9, 12, 1, -1, 13, -1, -1 },
    { NULL, "LNSObject;", 0x9, 14, 1, -1, 13, -1, -1 },
    { NULL, "LNSObject;", 0x9, 12, 15, -1, 16, -1, -1 },
    { NULL, "LNSObject;", 0x9, 12, 17, -1, 18, -1, -1 },
    { NULL, "LNSObject;", 0x9, 14, 15, -1, 16, -1, -1 },
    { NULL, "D", 0x9, 19, 1, -1, 2, -1, -1 },
    { NULL, "D", 0x9, 20, 1, -1, 2, -1, -1 },
    { NULL, "V", 0x9, 21, 22, -1, 23, -1, -1 },
    { NULL, "V", 0x9, 21, 24, -1, 25, -1, -1 },
    { NULL, "V", 0x9, 21, 26, -1, 27, -1, -1 },
    { NULL, "LEduStanfordNlpStatsTwoDimensionalCounter;", 0x9, 28, 29, -1, 30, -1, -1 },
    { NULL, "V", 0x9, 21, 31, -1, 32, -1, -1 },
    { NULL, "V", 0x9, 21, 29, -1, 33, -1, -1 },
    { NULL, "V", 0x9, 21, 34, -1, 35, -1, -1 },
    { NULL, "V", 0x9, 21, 36, -1, 37, -1, -1 },
    { NULL, "V", 0x9, 21, 38, -1, 39, -1, -1 },
    { NULL, "V", 0x9, 21, 6, -1, 40, -1, -1 },
    { NULL, "V", 0x9, 41, 24, -1, 25, -1, -1 },
    { NULL, "V", 0x9, 41, 26, -1, 27, -1, -1 },
    { NULL, "V", 0x9, 42, 24, -1, 25, -1, -1 },
    { NULL, "V", 0x9, 43, 24, -1, 25, -1, -1 },
    { NULL, "LEduStanfordNlpStatsCounter;", 0x9, 42, 6, -1, 44, -1, -1 },
    { NULL, "LEduStanfordNlpStatsCounter;", 0x9, 45, 6, -1, 44, -1, -1 },
    { NULL, "LEduStanfordNlpStatsCounter;", 0x9, 45, 24, -1, 46, -1, -1 },
    { NULL, "V", 0x9, 47, 1, -1, 4, -1, -1 },
    { NULL, "LEduStanfordNlpStatsCounter;", 0x9, 48, 1, -1, 49, -1, -1 },
    { NULL, "V", 0x9, 47, 50, -1, 51, -1, -1 },
    { NULL, "V", 0x9, 52, 1, -1, 4, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 53, 54, -1, 55, -1, -1 },
    { NULL, "V", 0x9, 56, 57, -1, 58, -1, -1 },
    { NULL, "V", 0x9, 59, 57, -1, 60, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 61, 57, -1, 62, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x9, 63, 1, -1, 64, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x9, 65, 6, -1, 66, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x9, 65, 36, -1, 67, -1, -1 },
    { NULL, "LEduStanfordNlpStatsCounter;", 0x9, 68, 6, -1, 44, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x9, 69, 70, -1, 71, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x9, 72, 38, -1, 73, -1, -1 },
    { NULL, "V", 0x9, 74, 38, -1, 39, -1, -1 },
    { NULL, "V", 0x9, 74, 75, -1, 76, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x9, 77, 6, -1, 66, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x9, 78, 6, -1, 66, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x9, 79, 6, -1, 66, -1, -1 },
    { NULL, "LEduStanfordNlpStatsCounter;", 0x9, 80, 81, -1, 82, -1, -1 },
    { NULL, "LEduStanfordNlpStatsCounter;", 0x9, 83, 81, -1, 82, -1, -1 },
    { NULL, "LJavaUtilComparator;", 0x9, 84, 1, -1, 85, -1, -1 },
    { NULL, "LJavaUtilComparator;", 0x9, 86, 1, -1, 87, -1, -1 },
    { NULL, "LJavaUtilComparator;", 0x9, 88, 1, -1, 85, -1, -1 },
    { NULL, "LJavaUtilComparator;", 0x9, 84, 89, -1, 90, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 91, 1, -1, 92, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 91, 93, -1, 94, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 95, 1, -1, 96, -1, -1 },
    { NULL, "LEduStanfordNlpStatsIntCounter;", 0x9, 97, 1, -1, 98, -1, -1 },
    { NULL, "LEduStanfordNlpStatsCounter;", 0x9, 99, 1, -1, 100, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 101, 1, -1, 102, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 103, 1, -1, 102, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 103, 15, -1, 104, -1, -1 },
    { NULL, "LEduStanfordNlpUtilPriorityQueue;", 0x9, 105, 1, -1, 106, -1, -1 },
    { NULL, "LEduStanfordNlpStatsCounter;", 0x9, 107, 24, -1, 108, -1, -1 },
    { NULL, "LEduStanfordNlpStatsCounter;", 0x9, 109, 24, -1, 46, -1, -1 },
    { NULL, "D", 0x9, 110, 24, -1, 111, -1, -1 },
    { NULL, "LEduStanfordNlpStatsCounter;", 0x9, 112, 24, -1, 46, -1, -1 },
    { NULL, "D", 0x9, 113, 24, -1, 111, -1, -1 },
    { NULL, "D", 0x9, 113, 114, -1, 115, -1, -1 },
    { NULL, "D", 0x9, 116, 38, -1, 117, -1, -1 },
    { NULL, "LEduStanfordNlpStatsCounter;", 0x9, 28, 38, -1, 118, -1, -1 },
    { NULL, "LEduStanfordNlpStatsCounter;", 0x9, 28, 24, -1, 46, -1, -1 },
    { NULL, "LEduStanfordNlpStatsCounter;", 0x9, 28, 6, -1, 44, -1, -1 },
    { NULL, "D", 0x9, 119, 24, -1, 111, -1, -1 },
    { NULL, "LEduStanfordNlpStatsCounter;", 0x9, 120, 24, -1, 46, -1, -1 },
    { NULL, "LEduStanfordNlpStatsCounter;", 0x9, 121, 24, -1, 46, -1, -1 },
    { NULL, "LEduStanfordNlpStatsCounter;", 0x9, 122, 24, -1, 46, -1, -1 },
    { NULL, "D", 0x9, 123, 1, -1, 2, -1, -1 },
    { NULL, "D", 0x9, 124, 24, -1, 111, -1, -1 },
    { NULL, "D", 0x9, 125, 24, -1, 111, -1, -1 },
    { NULL, "D", 0x9, 126, 24, -1, 111, -1, -1 },
    { NULL, "D", 0x9, 127, 22, -1, 128, -1, -1 },
    { NULL, "D", 0x9, 129, 1, -1, 130, -1, -1 },
    { NULL, "D", 0x9, 131, 1, -1, 130, -1, -1 },
    { NULL, "D", 0x9, 132, 1, -1, 130, -1, -1 },
    { NULL, "LEduStanfordNlpStatsCounter;", 0x9, 133, 1, -1, 49, -1, -1 },
    { NULL, "LEduStanfordNlpStatsCounter;", 0x9, 134, 1, -1, 100, -1, -1 },
    { NULL, "D", 0x9, 135, 1, -1, 130, -1, -1 },
    { NULL, "LEduStanfordNlpStatsCounter;", 0x9, 136, 1, -1, 49, -1, -1 },
    { NULL, "D", 0x9, 137, 24, -1, 111, -1, -1 },
    { NULL, "LEduStanfordNlpStatsCounter;", 0x9, 138, 24, -1, 46, -1, -1 },
    { NULL, "LEduStanfordNlpStatsCounter;", 0x9, 139, 140, -1, 141, -1, -1 },
    { NULL, "D", 0x9, 142, 143, -1, 144, -1, -1 },
    { NULL, "I", 0x9, 145, 1, -1, 146, -1, -1 },
    { NULL, "LEduStanfordNlpStatsCounter;", 0x9, 147, 148, -1, 149, -1, -1 },
    { NULL, "V", 0x9, 150, 24, -1, 25, -1, -1 },
    { NULL, "V", 0x9, 150, 151, -1, 152, -1, -1 },
    { NULL, "V", 0x9, 150, 153, -1, 154, -1, -1 },
    { NULL, "LEduStanfordNlpStatsCounter;", 0x9, 155, 1, -1, 156, -1, -1 },
    { NULL, "LEduStanfordNlpStatsCounter;", 0x9, 157, 6, -1, 158, -1, -1 },
    { NULL, "LEduStanfordNlpStatsCounter;", 0x9, 159, 6, -1, 158, -1, -1 },
    { NULL, "V", 0x9, 160, 1, -1, 161, -1, -1 },
    { NULL, "LEduStanfordNlpStatsClassicCounter;", 0x9, 162, 163, 164, 165, -1, -1 },
    { NULL, "LEduStanfordNlpStatsIntCounter;", 0x9, 166, 163, 167, 168, -1, -1 },
    { NULL, "V", 0xa, 169, 170, 164, 171, -1, -1 },
    { NULL, "V", 0x9, 172, 173, -1, 174, -1, -1 },
    { NULL, "V", 0x9, 172, 175, 176, 177, -1, -1 },
    { NULL, "LEduStanfordNlpStatsTwoDimensionalCounter;", 0x9, 178, 179, 164, 180, -1, -1 },
    { NULL, "V", 0x9, 181, 182, 164, 183, -1, -1 },
    { NULL, "V", 0x9, 184, 185, 164, 186, -1, -1 },
    { NULL, "V", 0x9, 187, 188, 176, 189, -1, -1 },
    { NULL, "V", 0x9, 190, 191, 176, 192, -1, -1 },
    { NULL, "V", 0x9, 193, 175, 176, 194, -1, -1 },
    { NULL, "LEduStanfordNlpStatsClassicCounter;", 0x9, 195, 196, 167, 197, -1, -1 },
    { NULL, "LNSString;", 0x9, 198, 199, -1, 200, -1, -1 },
    { NULL, "LNSString;", 0x9, 198, 201, -1, 202, -1, -1 },
    { NULL, "LNSString;", 0x9, 203, 204, -1, 205, -1, -1 },
    { NULL, "LNSString;", 0x9, 206, 57, -1, 207, -1, -1 },
    { NULL, "LNSString;", 0x9, 206, 208, -1, 209, -1, -1 },
    { NULL, "LNSString;", 0x9, 206, 210, -1, 211, -1, -1 },
    { NULL, "LNSString;", 0x9, 212, 1, -1, 213, -1, -1 },
    { NULL, "LNSString;", 0x9, 212, 57, -1, 207, -1, -1 },
    { NULL, "LNSString;", 0x9, 212, 214, -1, 215, -1, -1 },
    { NULL, "LNSString;", 0x9, 216, 1, -1, 213, -1, -1 },
    { NULL, "LNSString;", 0x9, 216, 57, -1, 207, -1, -1 },
    { NULL, "LNSString;", 0x9, 216, 175, -1, 217, -1, -1 },
    { NULL, "LNSString;", 0x9, 216, 218, -1, 219, -1, -1 },
    { NULL, "LNSString;", 0x9, 216, 220, -1, 221, -1, -1 },
    { NULL, "LNSObject;", 0x9, 222, 38, -1, 223, -1, -1 },
    { NULL, "LEduStanfordNlpStatsCounter;", 0x9, 224, 225, -1, 226, -1, -1 },
    { NULL, "LEduStanfordNlpStatsCounter;", 0x9, 224, 227, -1, 228, -1, -1 },
    { NULL, "[D", 0x9, 229, 230, -1, 231, -1, -1 },
    { NULL, "[D", 0x9, 229, 232, -1, 233, -1, -1 },
    { NULL, "[D", 0x9, 229, 1, -1, 234, -1, -1 },
    { NULL, "LEduStanfordNlpStatsTwoDimensionalCounter;", 0x9, 157, 36, -1, 235, -1, -1 },
    { NULL, "LNSObject;", 0x9, 236, 237, -1, 238, -1, -1 },
    { NULL, "LNSObject;", 0x9, 236, 1, -1, 239, -1, -1 },
    { NULL, "LEduStanfordNlpStatsCounter;", 0x9, 240, 6, -1, 44, -1, -1 },
    { NULL, "LEduStanfordNlpStatsCounter;", 0x9, 241, 6, -1, 242, -1, -1 },
    { NULL, "V", 0x9, 243, 6, -1, 244, -1, -1 },
    { NULL, "LEduStanfordNlpStatsCounter;", 0x9, 245, 1, -1, 246, -1, -1 },
    { NULL, "V", 0x9, 247, 1, -1, 248, -1, -1 },
    { NULL, "LEduStanfordNlpStatsCounter;", 0x9, 249, 24, -1, 250, -1, -1 },
    { NULL, "Z", 0x9, 251, 24, -1, 252, -1, -1 },
    { NULL, "Z", 0x9, 251, 22, -1, 253, -1, -1 },
    { NULL, "LEduStanfordNlpStatsCounter;", 0x9, 254, 1, -1, 246, -1, -1 },
    { NULL, "LEduStanfordNlpStatsCounter;", 0x9, 8, 255, -1, 256, -1, -1 },
    { NULL, "LEduStanfordNlpStatsCounter;", 0x9, 257, 258, -1, 259, -1, -1 },
    { NULL, "LEduStanfordNlpStatsCounter;", 0x9, 257, 260, -1, 261, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x9, 262, 1, -1, 263, -1, -1 },
    { NULL, "Z", 0x9, 264, 6, -1, 265, -1, -1 },
    { NULL, "LEduStanfordNlpStatsCounter;", 0x9, 266, 1, -1, 100, -1, -1 },
    { NULL, "V", 0x9, 267, 24, -1, 25, -1, -1 },
    { NULL, "V", 0x9, 268, 24, -1, 25, -1, -1 },
    { NULL, "V", 0x9, 269, 6, -1, 40, -1, -1 },
    { NULL, "V", 0x9, 42, 36, -1, 270, -1, -1 },
    { NULL, "D", 0x9, 271, 24, -1, 111, -1, -1 },
    { NULL, "D", 0x9, 272, 24, -1, 111, -1, -1 },
    { NULL, "V", 0x9, 273, 34, -1, 35, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 274, 57, -1, 62, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 275, 57, -1, 276, -1, -1 },
    { NULL, "LEduStanfordNlpStatsCounter;", 0x9, 277, 22, -1, 278, -1, -1 },
    { NULL, "V", 0x9, 279, 81, -1, 280, -1, -1 },
    { NULL, "LEduStanfordNlpStatsCounter;", 0x9, 281, 38, -1, 118, -1, -1 },
    { NULL, "V", 0x9, 72, 81, -1, 282, -1, -1 },
    { NULL, "LEduStanfordNlpStatsCounter;", 0x9, 283, 258, -1, 284, -1, -1 },
    { NULL, "Z", 0x9, 285, 1, -1, 286, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(logSumWithEduStanfordNlpStatsCounter:);
  methods[2].selector = @selector(logNormalizeInPlaceWithEduStanfordNlpStatsCounter:);
  methods[3].selector = @selector(maxWithEduStanfordNlpStatsCounter:);
  methods[4].selector = @selector(maxWithEduStanfordNlpStatsCounter:withDouble:);
  methods[5].selector = @selector(asCounterWithJavaUtilCollection:);
  methods[6].selector = @selector(minWithEduStanfordNlpStatsCounter:);
  methods[7].selector = @selector(argmaxWithEduStanfordNlpStatsCounter:);
  methods[8].selector = @selector(argminWithEduStanfordNlpStatsCounter:);
  methods[9].selector = @selector(argmaxWithEduStanfordNlpStatsCounter:withJavaUtilComparator:);
  methods[10].selector = @selector(argmaxWithEduStanfordNlpStatsCounter:withJavaUtilComparator:withId:);
  methods[11].selector = @selector(argminWithEduStanfordNlpStatsCounter:withJavaUtilComparator:);
  methods[12].selector = @selector(meanWithEduStanfordNlpStatsCounter:);
  methods[13].selector = @selector(standardDeviationWithEduStanfordNlpStatsCounter:);
  methods[14].selector = @selector(addInPlaceWithEduStanfordNlpStatsCounter:withEduStanfordNlpStatsCounter:withDouble:);
  methods[15].selector = @selector(addInPlaceWithEduStanfordNlpStatsCounter:withEduStanfordNlpStatsCounter:);
  methods[16].selector = @selector(addInPlaceWithDoubleArray:withEduStanfordNlpStatsCounter:withEduStanfordNlpUtilIndex:);
  methods[17].selector = @selector(addWithEduStanfordNlpStatsTwoDimensionalCounter:withEduStanfordNlpStatsTwoDimensionalCounter:);
  methods[18].selector = @selector(addInPlaceWithEduStanfordNlpStatsTwoDimensionalCounter:withEduStanfordNlpStatsTwoDimensionalCounter:withDouble:);
  methods[19].selector = @selector(addInPlaceWithEduStanfordNlpStatsTwoDimensionalCounter:withEduStanfordNlpStatsTwoDimensionalCounter:);
  methods[20].selector = @selector(addInPlaceWithEduStanfordNlpStatsCounter:withJavaUtilCollection:withDouble:);
  methods[21].selector = @selector(addInPlaceWithEduStanfordNlpStatsTwoDimensionalCounter:withDouble:);
  methods[22].selector = @selector(addInPlaceWithEduStanfordNlpStatsCounter:withJavaUtilCollection:);
  methods[23].selector = @selector(addInPlaceWithEduStanfordNlpStatsCounter:withDouble:);
  methods[24].selector = @selector(subtractInPlaceWithEduStanfordNlpStatsCounter:withEduStanfordNlpStatsCounter:);
  methods[25].selector = @selector(subtractInPlaceWithDoubleArray:withEduStanfordNlpStatsCounter:withEduStanfordNlpUtilIndex:);
  methods[26].selector = @selector(divideInPlaceWithEduStanfordNlpStatsCounter:withEduStanfordNlpStatsCounter:);
  methods[27].selector = @selector(dotProductInPlaceWithEduStanfordNlpStatsCounter:withEduStanfordNlpStatsCounter:);
  methods[28].selector = @selector(divideInPlaceWithEduStanfordNlpStatsCounter:withDouble:);
  methods[29].selector = @selector(multiplyInPlaceWithEduStanfordNlpStatsCounter:withDouble:);
  methods[30].selector = @selector(multiplyInPlaceWithEduStanfordNlpStatsCounter:withEduStanfordNlpStatsCounter:);
  methods[31].selector = @selector(normalizeWithEduStanfordNlpStatsCounter:);
  methods[32].selector = @selector(asNormalizedCounterWithEduStanfordNlpStatsCounter:);
  methods[33].selector = @selector(normalizeWithEduStanfordNlpStatsTwoDimensionalCounter:);
  methods[34].selector = @selector(logInPlaceWithEduStanfordNlpStatsCounter:);
  methods[35].selector = @selector(deleteOutofRangeWithEduStanfordNlpStatsCounter:withInt:withInt:);
  methods[36].selector = @selector(retainTopWithEduStanfordNlpStatsCounter:withInt:);
  methods[37].selector = @selector(retainTopKeyComparableWithEduStanfordNlpStatsCounter:withInt:);
  methods[38].selector = @selector(retainBottomWithEduStanfordNlpStatsCounter:withInt:);
  methods[39].selector = @selector(retainNonZerosWithEduStanfordNlpStatsCounter:);
  methods[40].selector = @selector(retainAboveWithEduStanfordNlpStatsCounter:withDouble:);
  methods[41].selector = @selector(retainAboveWithEduStanfordNlpStatsTwoDimensionalCounter:withDouble:);
  methods[42].selector = @selector(retainBelowWithEduStanfordNlpStatsCounter:withDouble:);
  methods[43].selector = @selector(retainMatchingKeysWithEduStanfordNlpStatsCounter:withJavaUtilList:);
  methods[44].selector = @selector(retainKeysWithEduStanfordNlpStatsCounter:withJavaUtilCollection:);
  methods[45].selector = @selector(removeKeysWithEduStanfordNlpStatsCounter:withJavaUtilCollection:);
  methods[46].selector = @selector(removeKeysWithEduStanfordNlpStatsTwoDimensionalCounter:withJavaUtilCollection:);
  methods[47].selector = @selector(keysAboveWithEduStanfordNlpStatsCounter:withDouble:);
  methods[48].selector = @selector(keysBelowWithEduStanfordNlpStatsCounter:withDouble:);
  methods[49].selector = @selector(keysAtWithEduStanfordNlpStatsCounter:withDouble:);
  methods[50].selector = @selector(transformWithEduStanfordNlpStatsCounter:withJavaUtilFunctionFunction:);
  methods[51].selector = @selector(transformWithValuesAddWithEduStanfordNlpStatsCounter:withJavaUtilFunctionFunction:);
  methods[52].selector = @selector(toComparatorWithEduStanfordNlpStatsCounter:);
  methods[53].selector = @selector(toComparatorWithKeysWithEduStanfordNlpStatsCounter:);
  methods[54].selector = @selector(toComparatorDescendingWithEduStanfordNlpStatsCounter:);
  methods[55].selector = @selector(toComparatorWithEduStanfordNlpStatsCounter:withBoolean:withBoolean:);
  methods[56].selector = @selector(toSortedListWithEduStanfordNlpStatsCounter:);
  methods[57].selector = @selector(toSortedListWithEduStanfordNlpStatsCounter:withBoolean:);
  methods[58].selector = @selector(toSortedListKeyComparableWithEduStanfordNlpStatsCounter:);
  methods[59].selector = @selector(toRankCounterWithEduStanfordNlpStatsCounter:);
  methods[60].selector = @selector(toTiedRankCounterWithEduStanfordNlpStatsCounter:);
  methods[61].selector = @selector(toDescendingMagnitudeSortedListWithCountsWithEduStanfordNlpStatsCounter:);
  methods[62].selector = @selector(toSortedListWithCountsWithEduStanfordNlpStatsCounter:);
  methods[63].selector = @selector(toSortedListWithCountsWithEduStanfordNlpStatsCounter:withJavaUtilComparator:);
  methods[64].selector = @selector(toPriorityQueueWithEduStanfordNlpStatsCounter:);
  methods[65].selector = @selector(union__WithEduStanfordNlpStatsCounter:withEduStanfordNlpStatsCounter:);
  methods[66].selector = @selector(intersectionWithEduStanfordNlpStatsCounter:withEduStanfordNlpStatsCounter:);
  methods[67].selector = @selector(jaccardCoefficientWithEduStanfordNlpStatsCounter:withEduStanfordNlpStatsCounter:);
  methods[68].selector = @selector(productWithEduStanfordNlpStatsCounter:withEduStanfordNlpStatsCounter:);
  methods[69].selector = @selector(dotProductWithEduStanfordNlpStatsCounter:withEduStanfordNlpStatsCounter:);
  methods[70].selector = @selector(dotProductWithEduStanfordNlpStatsCounter:withDoubleArray:withEduStanfordNlpUtilIndex:);
  methods[71].selector = @selector(sumEntriesWithEduStanfordNlpStatsCounter:withJavaUtilCollection:);
  methods[72].selector = @selector(addWithEduStanfordNlpStatsCounter:withJavaUtilCollection:);
  methods[73].selector = @selector(addWithEduStanfordNlpStatsCounter:withEduStanfordNlpStatsCounter:);
  methods[74].selector = @selector(addWithEduStanfordNlpStatsCounter:withDouble:);
  methods[75].selector = @selector(optimizedDotProductWithEduStanfordNlpStatsCounter:withEduStanfordNlpStatsCounter:);
  methods[76].selector = @selector(absoluteDifferenceWithEduStanfordNlpStatsCounter:withEduStanfordNlpStatsCounter:);
  methods[77].selector = @selector(divisionWithEduStanfordNlpStatsCounter:withEduStanfordNlpStatsCounter:);
  methods[78].selector = @selector(divisionNonNaNWithEduStanfordNlpStatsCounter:withEduStanfordNlpStatsCounter:);
  methods[79].selector = @selector(entropyWithEduStanfordNlpStatsCounter:);
  methods[80].selector = @selector(crossEntropyWithEduStanfordNlpStatsCounter:withEduStanfordNlpStatsCounter:);
  methods[81].selector = @selector(klDivergenceWithEduStanfordNlpStatsCounter:withEduStanfordNlpStatsCounter:);
  methods[82].selector = @selector(jensenShannonDivergenceWithEduStanfordNlpStatsCounter:withEduStanfordNlpStatsCounter:);
  methods[83].selector = @selector(skewDivergenceWithEduStanfordNlpStatsCounter:withEduStanfordNlpStatsCounter:withDouble:);
  methods[84].selector = @selector(L2NormWithEduStanfordNlpStatsCounter:);
  methods[85].selector = @selector(sumSquaresWithEduStanfordNlpStatsCounter:);
  methods[86].selector = @selector(L1NormWithEduStanfordNlpStatsCounter:);
  methods[87].selector = @selector(L2NormalizeWithEduStanfordNlpStatsCounter:);
  methods[88].selector = @selector(L2NormalizeInPlaceWithEduStanfordNlpStatsCounter:);
  methods[89].selector = @selector(saferL2NormWithEduStanfordNlpStatsCounter:);
  methods[90].selector = @selector(saferL2NormalizeWithEduStanfordNlpStatsCounter:);
  methods[91].selector = @selector(cosineWithEduStanfordNlpStatsCounter:withEduStanfordNlpStatsCounter:);
  methods[92].selector = @selector(averageWithEduStanfordNlpStatsCounter:withEduStanfordNlpStatsCounter:);
  methods[93].selector = @selector(linearCombinationWithEduStanfordNlpStatsCounter:withDouble:withEduStanfordNlpStatsCounter:withDouble:);
  methods[94].selector = @selector(pointwiseMutualInformationWithEduStanfordNlpStatsCounter:withEduStanfordNlpStatsCounter:withEduStanfordNlpStatsCounter:withEduStanfordNlpUtilPair:);
  methods[95].selector = @selector(hIndexWithEduStanfordNlpStatsCounter:);
  methods[96].selector = @selector(perturbCountsWithEduStanfordNlpStatsCounter:withJavaUtilRandom:withDouble:);
  methods[97].selector = @selector(printCounterComparisonWithEduStanfordNlpStatsCounter:withEduStanfordNlpStatsCounter:);
  methods[98].selector = @selector(printCounterComparisonWithEduStanfordNlpStatsCounter:withEduStanfordNlpStatsCounter:withJavaIoPrintStream:);
  methods[99].selector = @selector(printCounterComparisonWithEduStanfordNlpStatsCounter:withEduStanfordNlpStatsCounter:withJavaIoPrintWriter:);
  methods[100].selector = @selector(getCountCountsWithEduStanfordNlpStatsCounter:);
  methods[101].selector = @selector(scale__WithEduStanfordNlpStatsCounter:withDouble:);
  methods[102].selector = @selector(tfLogScaleWithEduStanfordNlpStatsCounter:withDouble:);
  methods[103].selector = @selector(printCounterSortedByKeysWithEduStanfordNlpStatsCounter:);
  methods[104].selector = @selector(loadCounterWithNSString:withIOSClass:);
  methods[105].selector = @selector(loadIntCounterWithNSString:withIOSClass:);
  methods[106].selector = @selector(loadIntoCounterWithNSString:withIOSClass:withEduStanfordNlpStatsCounter:);
  methods[107].selector = @selector(saveCounterWithEduStanfordNlpStatsCounter:withJavaIoOutputStream:);
  methods[108].selector = @selector(saveCounterWithEduStanfordNlpStatsCounter:withNSString:);
  methods[109].selector = @selector(load2DCounterWithNSString:withIOSClass:withIOSClass:);
  methods[110].selector = @selector(loadInto2DCounterWithNSString:withIOSClass:withIOSClass:withEduStanfordNlpStatsTwoDimensionalCounter:);
  methods[111].selector = @selector(loadIncInto2DCounterWithNSString:withIOSClass:withIOSClass:withEduStanfordNlpStatsTwoDimensionalCounterInterface:);
  methods[112].selector = @selector(save2DCounterWithEduStanfordNlpStatsTwoDimensionalCounter:withNSString:);
  methods[113].selector = @selector(save2DCounterSortedWithEduStanfordNlpStatsTwoDimensionalCounterInterface:withNSString:);
  methods[114].selector = @selector(serializeCounterWithEduStanfordNlpStatsCounter:withNSString:);
  methods[115].selector = @selector(deserializeCounterWithNSString:);
  methods[116].selector = @selector(toSortedStringWithEduStanfordNlpStatsCounter:withInt:withNSString:withNSString:withNSString:);
  methods[117].selector = @selector(toSortedStringWithEduStanfordNlpStatsCounter:withInt:withNSString:withNSString:);
  methods[118].selector = @selector(toSortedByKeysStringWithEduStanfordNlpStatsCounter:withNSString:withNSString:withNSString:);
  methods[119].selector = @selector(toStringWithEduStanfordNlpStatsCounter:withInt:);
  methods[120].selector = @selector(toStringWithEduStanfordNlpStatsCounter:withJavaTextNumberFormat:);
  methods[121].selector = @selector(toStringWithEduStanfordNlpStatsCounter:withJavaTextNumberFormat:withNSString:withNSString:withNSString:withNSString:);
  methods[122].selector = @selector(toBiggestValuesFirstStringWithEduStanfordNlpStatsCounter:);
  methods[123].selector = @selector(toBiggestValuesFirstStringWithEduStanfordNlpStatsCounter:withInt:);
  methods[124].selector = @selector(toBiggestValuesFirstStringWithEduStanfordNlpStatsCounter:withInt:withEduStanfordNlpUtilIndex:);
  methods[125].selector = @selector(toVerticalStringWithEduStanfordNlpStatsCounter:);
  methods[126].selector = @selector(toVerticalStringWithEduStanfordNlpStatsCounter:withInt:);
  methods[127].selector = @selector(toVerticalStringWithEduStanfordNlpStatsCounter:withNSString:);
  methods[128].selector = @selector(toVerticalStringWithEduStanfordNlpStatsCounter:withInt:withNSString:);
  methods[129].selector = @selector(toVerticalStringWithEduStanfordNlpStatsCounter:withInt:withNSString:withBoolean:);
  methods[130].selector = @selector(restrictedArgMaxWithEduStanfordNlpStatsCounter:withJavaUtilCollection:);
  methods[131].selector = @selector(toCounterWithDoubleArray:withEduStanfordNlpUtilIndex:);
  methods[132].selector = @selector(toCounterWithJavaUtilMap:withEduStanfordNlpUtilIndex:);
  methods[133].selector = @selector(asArrayWithEduStanfordNlpStatsCounter:withEduStanfordNlpUtilIndex:);
  methods[134].selector = @selector(asArrayWithEduStanfordNlpStatsCounter:withEduStanfordNlpUtilIndex:withInt:);
  methods[135].selector = @selector(asArrayWithEduStanfordNlpStatsCounter:);
  methods[136].selector = @selector(scale__WithEduStanfordNlpStatsTwoDimensionalCounter:withDouble:);
  methods[137].selector = @selector(sampleWithEduStanfordNlpStatsCounter:withJavaUtilRandom:);
  methods[138].selector = @selector(sampleWithEduStanfordNlpStatsCounter:);
  methods[139].selector = @selector(powNormalizedWithEduStanfordNlpStatsCounter:withDouble:);
  methods[140].selector = @selector(powWithEduStanfordNlpStatsCounter:withDouble:);
  methods[141].selector = @selector(powInPlaceWithEduStanfordNlpStatsCounter:withDouble:);
  methods[142].selector = @selector(expWithEduStanfordNlpStatsCounter:);
  methods[143].selector = @selector(expInPlaceWithEduStanfordNlpStatsCounter:);
  methods[144].selector = @selector(diffWithEduStanfordNlpStatsCounter:withEduStanfordNlpStatsCounter:);
  methods[145].selector = @selector(equalsWithEduStanfordNlpStatsCounter:withEduStanfordNlpStatsCounter:);
  methods[146].selector = @selector(equalsWithEduStanfordNlpStatsCounter:withEduStanfordNlpStatsCounter:withDouble:);
  methods[147].selector = @selector(unmodifiableCounterWithEduStanfordNlpStatsCounter:);
  methods[148].selector = @selector(asCounterWithEduStanfordNlpUtilFixedPrioritiesPriorityQueue:);
  methods[149].selector = @selector(fromMapWithJavaUtilMap:);
  methods[150].selector = @selector(fromMapWithJavaUtilMap:withIOSClass:);
  methods[151].selector = @selector(asMapWithEduStanfordNlpStatsCounter:);
  methods[152].selector = @selector(isUniformDistributionWithEduStanfordNlpStatsCounter:withDouble:);
  methods[153].selector = @selector(getCopyWithEduStanfordNlpStatsCounter:);
  methods[154].selector = @selector(maxInPlaceWithEduStanfordNlpStatsCounter:withEduStanfordNlpStatsCounter:);
  methods[155].selector = @selector(minInPlaceWithEduStanfordNlpStatsCounter:withEduStanfordNlpStatsCounter:);
  methods[156].selector = @selector(retainTopMassWithEduStanfordNlpStatsCounter:withDouble:);
  methods[157].selector = @selector(divideInPlaceWithEduStanfordNlpStatsTwoDimensionalCounter:withDouble:);
  methods[158].selector = @selector(pearsonsCorrelationCoefficientWithEduStanfordNlpStatsCounter:withEduStanfordNlpStatsCounter:);
  methods[159].selector = @selector(spearmanRankCorrelationWithEduStanfordNlpStatsCounter:withEduStanfordNlpStatsCounter:);
  methods[160].selector = @selector(ensureKeysWithEduStanfordNlpStatsCounter:withJavaUtilCollection:withDouble:);
  methods[161].selector = @selector(topKeysWithEduStanfordNlpStatsCounter:withInt:);
  methods[162].selector = @selector(topKeysWithCountsWithEduStanfordNlpStatsCounter:withInt:);
  methods[163].selector = @selector(getFCounterWithEduStanfordNlpStatsCounter:withEduStanfordNlpStatsCounter:withDouble:);
  methods[164].selector = @selector(transformValuesInPlaceWithEduStanfordNlpStatsCounter:withJavaUtilFunctionFunction:);
  methods[165].selector = @selector(getCountsWithEduStanfordNlpStatsCounter:withJavaUtilCollection:);
  methods[166].selector = @selector(retainKeysWithEduStanfordNlpStatsCounter:withJavaUtilFunctionFunction:);
  methods[167].selector = @selector(flattenWithJavaUtilMap:);
  methods[168].selector = @selector(isFiniteWithEduStanfordNlpStatsCounter:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "LOG_E_2", "D", .constantValue.asLong = 0, 0x1a, -1, 287, -1, -1 },
    { "RAND", "LJavaUtilRandom;", .constantValue.asLong = 0, 0x18, -1, 288, -1, -1 },
  };
  static const void *ptrTable[] = { "logSum", "LEduStanfordNlpStatsCounter;", "<E:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/Counter<TE;>;)D", "logNormalizeInPlace", "<E:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/Counter<TE;>;)V", "max", "LEduStanfordNlpStatsCounter;D", "<E:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/Counter<TE;>;D)D", "asCounter", "LJavaUtilCollection;", "<E:Ljava/lang/Object;>(Ljava/util/Collection<TE;>;)Ledu/stanford/nlp/stats/Counter<TE;>;", "min", "argmax", "<E:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/Counter<TE;>;)TE;", "argmin", "LEduStanfordNlpStatsCounter;LJavaUtilComparator;", "<E:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/Counter<TE;>;Ljava/util/Comparator<TE;>;)TE;", "LEduStanfordNlpStatsCounter;LJavaUtilComparator;LNSObject;", "<E:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/Counter<TE;>;Ljava/util/Comparator<TE;>;TE;)TE;", "mean", "standardDeviation", "addInPlace", "LEduStanfordNlpStatsCounter;LEduStanfordNlpStatsCounter;D", "<E:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/Counter<TE;>;Ledu/stanford/nlp/stats/Counter<TE;>;D)V", "LEduStanfordNlpStatsCounter;LEduStanfordNlpStatsCounter;", "<E:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/Counter<TE;>;Ledu/stanford/nlp/stats/Counter<TE;>;)V", "[DLEduStanfordNlpStatsCounter;LEduStanfordNlpUtilIndex;", "<E:Ljava/lang/Object;>([DLedu/stanford/nlp/stats/Counter<TE;>;Ledu/stanford/nlp/util/Index<TE;>;)V", "add", "LEduStanfordNlpStatsTwoDimensionalCounter;LEduStanfordNlpStatsTwoDimensionalCounter;", "<T1:Ljava/lang/Object;T2:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/TwoDimensionalCounter<TT1;TT2;>;Ledu/stanford/nlp/stats/TwoDimensionalCounter<TT1;TT2;>;)Ledu/stanford/nlp/stats/TwoDimensionalCounter<TT1;TT2;>;", "LEduStanfordNlpStatsTwoDimensionalCounter;LEduStanfordNlpStatsTwoDimensionalCounter;D", "<T1:Ljava/lang/Object;T2:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/TwoDimensionalCounter<TT1;TT2;>;Ledu/stanford/nlp/stats/TwoDimensionalCounter<TT1;TT2;>;D)V", "<T1:Ljava/lang/Object;T2:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/TwoDimensionalCounter<TT1;TT2;>;Ledu/stanford/nlp/stats/TwoDimensionalCounter<TT1;TT2;>;)V", "LEduStanfordNlpStatsCounter;LJavaUtilCollection;D", "<E:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/Counter<TE;>;Ljava/util/Collection<TE;>;D)V", "LEduStanfordNlpStatsTwoDimensionalCounter;D", "<T1:Ljava/lang/Object;T2:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/TwoDimensionalCounter<TT1;TT2;>;D)V", "LEduStanfordNlpStatsCounter;LJavaUtilCollection;", "<E:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/Counter<TE;>;Ljava/util/Collection<TE;>;)V", "<E:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/Counter<TE;>;D)V", "subtractInPlace", "divideInPlace", "dotProductInPlace", "<E:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/Counter<TE;>;D)Ledu/stanford/nlp/stats/Counter<TE;>;", "multiplyInPlace", "<E:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/Counter<TE;>;Ledu/stanford/nlp/stats/Counter<TE;>;)Ledu/stanford/nlp/stats/Counter<TE;>;", "normalize", "asNormalizedCounter", "<E:Ljava/lang/Object;C::Ledu/stanford/nlp/stats/Counter<TE;>;>(TC;)TC;", "LEduStanfordNlpStatsTwoDimensionalCounter;", "<E:Ljava/lang/Object;F:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/TwoDimensionalCounter<TE;TF;>;)V", "logInPlace", "deleteOutofRange", "LEduStanfordNlpStatsCounter;II", "<E:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/Counter<TE;>;II)Ljava/util/List<TE;>;", "retainTop", "LEduStanfordNlpStatsCounter;I", "<E:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/Counter<TE;>;I)V", "retainTopKeyComparable", "<E::Ljava/lang/Comparable<TE;>;>(Ledu/stanford/nlp/stats/Counter<TE;>;I)V", "retainBottom", "<E:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/Counter<TE;>;I)Ljava/util/List<TE;>;", "retainNonZeros", "<E:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/Counter<TE;>;)Ljava/util/Set<TE;>;", "retainAbove", "<E:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/Counter<TE;>;D)Ljava/util/Set<TE;>;", "<E1:Ljava/lang/Object;E2:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/TwoDimensionalCounter<TE1;TE2;>;D)Ljava/util/Set<Ledu/stanford/nlp/util/Pair<TE1;TE2;>;>;", "retainBelow", "retainMatchingKeys", "LEduStanfordNlpStatsCounter;LJavaUtilList;", "(Ledu/stanford/nlp/stats/Counter<Ljava/lang/String;>;Ljava/util/List<Ljava/util/regex/Pattern;>;)Ljava/util/Set<Ljava/lang/String;>;", "retainKeys", "<E:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/Counter<TE;>;Ljava/util/Collection<TE;>;)Ljava/util/Set<TE;>;", "removeKeys", "LEduStanfordNlpStatsTwoDimensionalCounter;LJavaUtilCollection;", "<E:Ljava/lang/Object;F:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/TwoDimensionalCounter<TE;TF;>;Ljava/util/Collection<TE;>;)V", "keysAbove", "keysBelow", "keysAt", "transform", "LEduStanfordNlpStatsCounter;LJavaUtilFunctionFunction;", "<T1:Ljava/lang/Object;T2:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/Counter<TT1;>;Ljava/util/function/Function<TT1;TT2;>;)Ledu/stanford/nlp/stats/Counter<TT2;>;", "transformWithValuesAdd", "toComparator", "<E:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/Counter<TE;>;)Ljava/util/Comparator<TE;>;", "toComparatorWithKeys", "<E::Ljava/lang/Comparable<TE;>;>(Ledu/stanford/nlp/stats/Counter<TE;>;)Ljava/util/Comparator<TE;>;", "toComparatorDescending", "LEduStanfordNlpStatsCounter;ZZ", "<E:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/Counter<TE;>;ZZ)Ljava/util/Comparator<TE;>;", "toSortedList", "<E:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/Counter<TE;>;)Ljava/util/List<TE;>;", "LEduStanfordNlpStatsCounter;Z", "<E:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/Counter<TE;>;Z)Ljava/util/List<TE;>;", "toSortedListKeyComparable", "<E::Ljava/lang/Comparable<TE;>;>(Ledu/stanford/nlp/stats/Counter<TE;>;)Ljava/util/List<TE;>;", "toRankCounter", "<E:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/Counter<TE;>;)Ledu/stanford/nlp/stats/IntCounter<TE;>;", "toTiedRankCounter", "<E:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/Counter<TE;>;)Ledu/stanford/nlp/stats/Counter<TE;>;", "toDescendingMagnitudeSortedListWithCounts", "<E:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/Counter<TE;>;)Ljava/util/List<Ledu/stanford/nlp/util/Pair<TE;Ljava/lang/Double;>;>;", "toSortedListWithCounts", "<E:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/Counter<TE;>;Ljava/util/Comparator<Ledu/stanford/nlp/util/Pair<TE;Ljava/lang/Double;>;>;)Ljava/util/List<Ledu/stanford/nlp/util/Pair<TE;Ljava/lang/Double;>;>;", "toPriorityQueue", "<E:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/Counter<TE;>;)Ledu/stanford/nlp/util/PriorityQueue<TE;>;", "union", "<E:Ljava/lang/Object;C::Ledu/stanford/nlp/stats/Counter<TE;>;>(TC;TC;)TC;", "intersection", "jaccardCoefficient", "<E:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/Counter<TE;>;Ledu/stanford/nlp/stats/Counter<TE;>;)D", "product", "dotProduct", "LEduStanfordNlpStatsCounter;[DLEduStanfordNlpUtilIndex;", "<E:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/Counter<TE;>;[DLedu/stanford/nlp/util/Index<TE;>;)D", "sumEntries", "<E:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/Counter<TE;>;Ljava/util/Collection<TE;>;)D", "<E:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/Counter<TE;>;Ljava/util/Collection<TE;>;)Ledu/stanford/nlp/stats/Counter<TE;>;", "optimizedDotProduct", "absoluteDifference", "division", "divisionNonNaN", "entropy", "crossEntropy", "klDivergence", "jensenShannonDivergence", "skewDivergence", "<E:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/Counter<TE;>;Ledu/stanford/nlp/stats/Counter<TE;>;D)D", "L2Norm", "<E:Ljava/lang/Object;C::Ledu/stanford/nlp/stats/Counter<TE;>;>(TC;)D", "sumSquares", "L1Norm", "L2Normalize", "L2NormalizeInPlace", "saferL2Norm", "saferL2Normalize", "cosine", "average", "linearCombination", "LEduStanfordNlpStatsCounter;DLEduStanfordNlpStatsCounter;D", "<E:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/Counter<TE;>;DLedu/stanford/nlp/stats/Counter<TE;>;D)Ledu/stanford/nlp/stats/Counter<TE;>;", "pointwiseMutualInformation", "LEduStanfordNlpStatsCounter;LEduStanfordNlpStatsCounter;LEduStanfordNlpStatsCounter;LEduStanfordNlpUtilPair;", "<T1:Ljava/lang/Object;T2:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/Counter<TT1;>;Ledu/stanford/nlp/stats/Counter<TT2;>;Ledu/stanford/nlp/stats/Counter<Ledu/stanford/nlp/util/Pair<TT1;TT2;>;>;Ledu/stanford/nlp/util/Pair<TT1;TT2;>;)D", "hIndex", "<E:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/Counter<TE;>;)I", "perturbCounts", "LEduStanfordNlpStatsCounter;LJavaUtilRandom;D", "<E:Ljava/lang/Object;C::Ledu/stanford/nlp/stats/Counter<TE;>;>(TC;Ljava/util/Random;D)TC;", "printCounterComparison", "LEduStanfordNlpStatsCounter;LEduStanfordNlpStatsCounter;LJavaIoPrintStream;", "<E:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/Counter<TE;>;Ledu/stanford/nlp/stats/Counter<TE;>;Ljava/io/PrintStream;)V", "LEduStanfordNlpStatsCounter;LEduStanfordNlpStatsCounter;LJavaIoPrintWriter;", "<E:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/Counter<TE;>;Ledu/stanford/nlp/stats/Counter<TE;>;Ljava/io/PrintWriter;)V", "getCountCounts", "<E:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/Counter<TE;>;)Ledu/stanford/nlp/stats/Counter<Ljava/lang/Double;>;", "scale", "<E:Ljava/lang/Object;C::Ledu/stanford/nlp/stats/Counter<TE;>;>(TC;D)TC;", "tfLogScale", "printCounterSortedByKeys", "<E::Ljava/lang/Comparable<TE;>;>(Ledu/stanford/nlp/stats/Counter<TE;>;)V", "loadCounter", "LNSString;LIOSClass;", "LJavaLangRuntimeException;", "<E:Ljava/lang/Object;>(Ljava/lang/String;Ljava/lang/Class<TE;>;)Ledu/stanford/nlp/stats/ClassicCounter<TE;>;", "loadIntCounter", "LJavaLangException;", "<E:Ljava/lang/Object;>(Ljava/lang/String;Ljava/lang/Class<TE;>;)Ledu/stanford/nlp/stats/IntCounter<TE;>;", "loadIntoCounter", "LNSString;LIOSClass;LEduStanfordNlpStatsCounter;", "<E:Ljava/lang/Object;>(Ljava/lang/String;Ljava/lang/Class<TE;>;Ledu/stanford/nlp/stats/Counter<TE;>;)V", "saveCounter", "LEduStanfordNlpStatsCounter;LJavaIoOutputStream;", "<E:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/Counter<TE;>;Ljava/io/OutputStream;)V", "LEduStanfordNlpStatsCounter;LNSString;", "LJavaIoIOException;", "<E:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/Counter<TE;>;Ljava/lang/String;)V", "load2DCounter", "LNSString;LIOSClass;LIOSClass;", "<T1:Ljava/lang/Object;T2:Ljava/lang/Object;>(Ljava/lang/String;Ljava/lang/Class<TT1;>;Ljava/lang/Class<TT2;>;)Ledu/stanford/nlp/stats/TwoDimensionalCounter<TT1;TT2;>;", "loadInto2DCounter", "LNSString;LIOSClass;LIOSClass;LEduStanfordNlpStatsTwoDimensionalCounter;", "<T1:Ljava/lang/Object;T2:Ljava/lang/Object;>(Ljava/lang/String;Ljava/lang/Class<TT1;>;Ljava/lang/Class<TT2;>;Ledu/stanford/nlp/stats/TwoDimensionalCounter<TT1;TT2;>;)V", "loadIncInto2DCounter", "LNSString;LIOSClass;LIOSClass;LEduStanfordNlpStatsTwoDimensionalCounterInterface;", "<T1:Ljava/lang/Object;T2:Ljava/lang/Object;>(Ljava/lang/String;Ljava/lang/Class<TT1;>;Ljava/lang/Class<TT2;>;Ledu/stanford/nlp/stats/TwoDimensionalCounterInterface<TT1;TT2;>;)V", "save2DCounter", "LEduStanfordNlpStatsTwoDimensionalCounter;LNSString;", "<T1:Ljava/lang/Object;T2:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/TwoDimensionalCounter<TT1;TT2;>;Ljava/lang/String;)V", "save2DCounterSorted", "LEduStanfordNlpStatsTwoDimensionalCounterInterface;LNSString;", "<T1:Ljava/lang/Object;T2:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/TwoDimensionalCounterInterface<TT1;TT2;>;Ljava/lang/String;)V", "serializeCounter", "<T:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/Counter<TT;>;Ljava/lang/String;)V", "deserializeCounter", "LNSString;", "<T:Ljava/lang/Object;>(Ljava/lang/String;)Ledu/stanford/nlp/stats/ClassicCounter<TT;>;", "toSortedString", "LEduStanfordNlpStatsCounter;ILNSString;LNSString;LNSString;", "<T:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/Counter<TT;>;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;", "LEduStanfordNlpStatsCounter;ILNSString;LNSString;", "<T:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/Counter<TT;>;ILjava/lang/String;Ljava/lang/String;)Ljava/lang/String;", "toSortedByKeysString", "LEduStanfordNlpStatsCounter;LNSString;LNSString;LNSString;", "<T::Ljava/lang/Comparable<TT;>;>(Ledu/stanford/nlp/stats/Counter<TT;>;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;", "toString", "<E:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/Counter<TE;>;I)Ljava/lang/String;", "LEduStanfordNlpStatsCounter;LJavaTextNumberFormat;", "<E:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/Counter<TE;>;Ljava/text/NumberFormat;)Ljava/lang/String;", "LEduStanfordNlpStatsCounter;LJavaTextNumberFormat;LNSString;LNSString;LNSString;LNSString;", "<E:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/Counter<TE;>;Ljava/text/NumberFormat;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;", "toBiggestValuesFirstString", "<E:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/Counter<TE;>;)Ljava/lang/String;", "LEduStanfordNlpStatsCounter;ILEduStanfordNlpUtilIndex;", "<T:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/Counter<Ljava/lang/Integer;>;ILedu/stanford/nlp/util/Index<TT;>;)Ljava/lang/String;", "toVerticalString", "<E:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/Counter<TE;>;Ljava/lang/String;)Ljava/lang/String;", "LEduStanfordNlpStatsCounter;ILNSString;", "<E:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/Counter<TE;>;ILjava/lang/String;)Ljava/lang/String;", "LEduStanfordNlpStatsCounter;ILNSString;Z", "<E:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/Counter<TE;>;ILjava/lang/String;Z)Ljava/lang/String;", "restrictedArgMax", "<E:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/Counter<TE;>;Ljava/util/Collection<TE;>;)TE;", "toCounter", "[DLEduStanfordNlpUtilIndex;", "<T:Ljava/lang/Object;>([DLedu/stanford/nlp/util/Index<TT;>;)Ledu/stanford/nlp/stats/Counter<TT;>;", "LJavaUtilMap;LEduStanfordNlpUtilIndex;", "<E:Ljava/lang/Object;>(Ljava/util/Map<Ljava/lang/Integer;+Ljava/lang/Number;>;Ledu/stanford/nlp/util/Index<TE;>;)Ledu/stanford/nlp/stats/Counter<TE;>;", "asArray", "LEduStanfordNlpStatsCounter;LEduStanfordNlpUtilIndex;", "<E:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/Counter<TE;>;Ledu/stanford/nlp/util/Index<TE;>;)[D", "LEduStanfordNlpStatsCounter;LEduStanfordNlpUtilIndex;I", "<E:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/Counter<TE;>;Ledu/stanford/nlp/util/Index<TE;>;I)[D", "<E:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/Counter<TE;>;)[D", "<T1:Ljava/lang/Object;T2:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/TwoDimensionalCounter<TT1;TT2;>;D)Ledu/stanford/nlp/stats/TwoDimensionalCounter<TT1;TT2;>;", "sample", "LEduStanfordNlpStatsCounter;LJavaUtilRandom;", "<T:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/Counter<TT;>;Ljava/util/Random;)TT;", "<T:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/Counter<TT;>;)TT;", "powNormalized", "pow", "<T:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/Counter<TT;>;D)Ledu/stanford/nlp/stats/Counter<TT;>;", "powInPlace", "<T:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/Counter<TT;>;D)V", "exp", "<T:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/Counter<TT;>;)Ledu/stanford/nlp/stats/Counter<TT;>;", "expInPlace", "<T:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/Counter<TT;>;)V", "diff", "<T:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/Counter<TT;>;Ledu/stanford/nlp/stats/Counter<TT;>;)Ledu/stanford/nlp/stats/Counter<TT;>;", "equals", "<E:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/Counter<TE;>;Ledu/stanford/nlp/stats/Counter<TE;>;)Z", "<E:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/Counter<TE;>;Ledu/stanford/nlp/stats/Counter<TE;>;D)Z", "unmodifiableCounter", "LEduStanfordNlpUtilFixedPrioritiesPriorityQueue;", "<E:Ljava/lang/Object;>(Ledu/stanford/nlp/util/FixedPrioritiesPriorityQueue<TE;>;)Ledu/stanford/nlp/stats/Counter<TE;>;", "fromMap", "LJavaUtilMap;", "<E:Ljava/lang/Object;N:Ljava/lang/Number;>(Ljava/util/Map<TE;TN;>;)Ledu/stanford/nlp/stats/Counter<TE;>;", "LJavaUtilMap;LIOSClass;", "<E:Ljava/lang/Object;N:Ljava/lang/Number;>(Ljava/util/Map<TE;TN;>;Ljava/lang/Class<TN;>;)Ledu/stanford/nlp/stats/Counter<TE;>;", "asMap", "<E:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/Counter<TE;>;)Ljava/util/Map<TE;Ljava/lang/Double;>;", "isUniformDistribution", "<E:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/Counter<TE;>;D)Z", "getCopy", "maxInPlace", "minInPlace", "retainTopMass", "<A:Ljava/lang/Object;B:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/TwoDimensionalCounter<TA;TB;>;D)V", "pearsonsCorrelationCoefficient", "spearmanRankCorrelation", "ensureKeys", "topKeys", "topKeysWithCounts", "<E:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/Counter<TE;>;I)Ljava/util/List<Ledu/stanford/nlp/util/Pair<TE;Ljava/lang/Double;>;>;", "getFCounter", "<E:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/Counter<TE;>;Ledu/stanford/nlp/stats/Counter<TE;>;D)Ledu/stanford/nlp/stats/Counter<TE;>;", "transformValuesInPlace", "<E:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/Counter<TE;>;Ljava/util/function/Function<Ljava/lang/Double;Ljava/lang/Double;>;)V", "getCounts", "<E:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/Counter<TE;>;Ljava/util/function/Function<TE;Ljava/lang/Boolean;>;)V", "flatten", "<E:Ljava/lang/Object;E2:Ljava/lang/Object;>(Ljava/util/Map<TE2;Ledu/stanford/nlp/stats/Counter<TE;>;>;)Ledu/stanford/nlp/stats/Counter<TE;>;", "isFinite", "<E:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/Counter<TE;>;)Z", &EduStanfordNlpStatsCounters_LOG_E_2, &EduStanfordNlpStatsCounters_RAND, "LEduStanfordNlpStatsCounters_NaturalComparator;" };
  static const J2ObjcClassInfo _EduStanfordNlpStatsCounters = { "Counters", "edu.stanford.nlp.stats", ptrTable, methods, fields, 7, 0x1, 169, 2, -1, 289, -1, -1, -1 };
  return &_EduStanfordNlpStatsCounters;
}

+ (void)initialize {
  if (self == [EduStanfordNlpStatsCounters class]) {
    EduStanfordNlpStatsCounters_LOG_E_2 = JavaLangMath_logWithDouble_(2.0);
    EduStanfordNlpStatsCounters_RAND = new_JavaUtilRandom_init();
    J2OBJC_SET_INITIALIZED(EduStanfordNlpStatsCounters)
  }
}

@end

void EduStanfordNlpStatsCounters_init(EduStanfordNlpStatsCounters *self) {
  NSObject_init(self);
}

EduStanfordNlpStatsCounters *new_EduStanfordNlpStatsCounters_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpStatsCounters, init)
}

EduStanfordNlpStatsCounters *create_EduStanfordNlpStatsCounters_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpStatsCounters, init)
}

jdouble EduStanfordNlpStatsCounters_logSumWithEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> c) {
  EduStanfordNlpStatsCounters_initialize();
  return EduStanfordNlpMathArrayMath_logSumWithDoubleArray_(EduStanfordNlpMathArrayMath_unboxWithJavaUtilCollection_([((id<EduStanfordNlpStatsCounter>) nil_chk(c)) values]));
}

void EduStanfordNlpStatsCounters_logNormalizeInPlaceWithEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> c) {
  EduStanfordNlpStatsCounters_initialize();
  jdouble logsum = EduStanfordNlpStatsCounters_logSumWithEduStanfordNlpStatsCounter_(c);
  for (id<JavaUtilMap_Entry> __strong e in nil_chk([((id<EduStanfordNlpStatsCounter>) nil_chk(c)) entrySet])) {
    (void) [((id<JavaUtilMap_Entry>) nil_chk(e)) setValueWithId:JavaLangDouble_valueOfWithDouble_([((JavaLangDouble *) nil_chk([e getValue])) doubleValue] - logsum)];
  }
}

jdouble EduStanfordNlpStatsCounters_maxWithEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> c) {
  EduStanfordNlpStatsCounters_initialize();
  return EduStanfordNlpStatsCounters_maxWithEduStanfordNlpStatsCounter_withDouble_(c, JavaLangDouble_NEGATIVE_INFINITY);
}

jdouble EduStanfordNlpStatsCounters_maxWithEduStanfordNlpStatsCounter_withDouble_(id<EduStanfordNlpStatsCounter> c, jdouble valueIfEmpty) {
  EduStanfordNlpStatsCounters_initialize();
  if ([((id<EduStanfordNlpStatsCounter>) nil_chk(c)) size] == 0) {
    return valueIfEmpty;
  }
  else {
    jdouble max = JavaLangDouble_NEGATIVE_INFINITY;
    for (JavaLangDouble *boxed__ in nil_chk([c values])) {
      jdouble v = [((JavaLangDouble *) nil_chk(boxed__)) doubleValue];
      max = JavaLangMath_maxWithDouble_withDouble_(max, v);
    }
    return max;
  }
}

id<EduStanfordNlpStatsCounter> EduStanfordNlpStatsCounters_asCounterWithJavaUtilCollection_(id<JavaUtilCollection> c) {
  EduStanfordNlpStatsCounters_initialize();
  id<EduStanfordNlpStatsCounter> count = new_EduStanfordNlpStatsClassicCounter_init();
  for (id __strong elem in nil_chk(c)) {
    [count incrementCountWithId:elem];
  }
  return count;
}

jdouble EduStanfordNlpStatsCounters_minWithEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> c) {
  EduStanfordNlpStatsCounters_initialize();
  jdouble min = JavaLangDouble_POSITIVE_INFINITY;
  for (JavaLangDouble *boxed__ in nil_chk([((id<EduStanfordNlpStatsCounter>) nil_chk(c)) values])) {
    jdouble v = [((JavaLangDouble *) nil_chk(boxed__)) doubleValue];
    min = JavaLangMath_minWithDouble_withDouble_(min, v);
  }
  return min;
}

id EduStanfordNlpStatsCounters_argmaxWithEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> c) {
  EduStanfordNlpStatsCounters_initialize();
  return EduStanfordNlpStatsCounters_argmaxWithEduStanfordNlpStatsCounter_withJavaUtilComparator_withId_(c, JreLoadStatic(EduStanfordNlpStatsCounters_$Lambda$1, instance), nil);
}

id EduStanfordNlpStatsCounters_argminWithEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> c) {
  EduStanfordNlpStatsCounters_initialize();
  jdouble min = JavaLangDouble_POSITIVE_INFINITY;
  id argmin = nil;
  for (id __strong key in nil_chk([((id<EduStanfordNlpStatsCounter>) nil_chk(c)) keySet])) {
    jdouble count = [c getCountWithId:key];
    if (argmin == nil || count < min) {
      min = count;
      argmin = key;
    }
  }
  return argmin;
}

id EduStanfordNlpStatsCounters_argmaxWithEduStanfordNlpStatsCounter_withJavaUtilComparator_(id<EduStanfordNlpStatsCounter> c, id<JavaUtilComparator> tieBreaker) {
  EduStanfordNlpStatsCounters_initialize();
  return EduStanfordNlpStatsCounters_argmaxWithEduStanfordNlpStatsCounter_withJavaUtilComparator_withId_(c, tieBreaker, nil);
}

id EduStanfordNlpStatsCounters_argmaxWithEduStanfordNlpStatsCounter_withJavaUtilComparator_withId_(id<EduStanfordNlpStatsCounter> c, id<JavaUtilComparator> tieBreaker, id defaultIfEmpty) {
  EduStanfordNlpStatsCounters_initialize();
  if (JavaLangThread_interrupted()) {
    @throw new_EduStanfordNlpUtilRuntimeInterruptedException_init();
  }
  if ([((id<EduStanfordNlpStatsCounter>) nil_chk(c)) size] == 0) {
    return defaultIfEmpty;
  }
  jdouble max = JavaLangDouble_NEGATIVE_INFINITY;
  id argmax = nil;
  for (id __strong key in nil_chk([c keySet])) {
    jdouble count = [c getCountWithId:key];
    if (argmax == nil || count > max || (count == max && [((id<JavaUtilComparator>) nil_chk(tieBreaker)) compareWithId:key withId:argmax] < 0)) {
      max = count;
      argmax = key;
    }
  }
  return argmax;
}

id EduStanfordNlpStatsCounters_argminWithEduStanfordNlpStatsCounter_withJavaUtilComparator_(id<EduStanfordNlpStatsCounter> c, id<JavaUtilComparator> tieBreaker) {
  EduStanfordNlpStatsCounters_initialize();
  jdouble min = JavaLangDouble_POSITIVE_INFINITY;
  id argmin = nil;
  for (id __strong key in nil_chk([((id<EduStanfordNlpStatsCounter>) nil_chk(c)) keySet])) {
    jdouble count = [c getCountWithId:key];
    if (argmin == nil || count < min || (count == min && [((id<JavaUtilComparator>) nil_chk(tieBreaker)) compareWithId:key withId:argmin] < 0)) {
      min = count;
      argmin = key;
    }
  }
  return argmin;
}

jdouble EduStanfordNlpStatsCounters_meanWithEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> c) {
  EduStanfordNlpStatsCounters_initialize();
  return [((id<EduStanfordNlpStatsCounter>) nil_chk(c)) totalCount] / [c size];
}

jdouble EduStanfordNlpStatsCounters_standardDeviationWithEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> c) {
  EduStanfordNlpStatsCounters_initialize();
  jdouble std = 0;
  jdouble mean = [((id<EduStanfordNlpStatsCounter>) nil_chk(c)) totalCount] / [c size];
  for (id<JavaUtilMap_Entry> __strong en in nil_chk([c entrySet])) {
    JrePlusAssignDoubleD(&std, ([((JavaLangDouble *) nil_chk([((id<JavaUtilMap_Entry>) nil_chk(en)) getValue])) doubleValue] - mean) * ([((JavaLangDouble *) nil_chk([en getValue])) doubleValue] - mean));
  }
  return JavaLangMath_sqrtWithDouble_(std / [c size]);
}

void EduStanfordNlpStatsCounters_addInPlaceWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_withDouble_(id<EduStanfordNlpStatsCounter> target, id<EduStanfordNlpStatsCounter> arg, jdouble scale_) {
  EduStanfordNlpStatsCounters_initialize();
  for (id __strong key in nil_chk([((id<EduStanfordNlpStatsCounter>) nil_chk(arg)) keySet])) {
    [((id<EduStanfordNlpStatsCounter>) nil_chk(target)) incrementCountWithId:key withDouble:scale_ * [arg getCountWithId:key]];
  }
}

void EduStanfordNlpStatsCounters_addInPlaceWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> target, id<EduStanfordNlpStatsCounter> arg) {
  EduStanfordNlpStatsCounters_initialize();
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((id<EduStanfordNlpStatsCounter>) nil_chk(arg)) entrySet])) {
    jdouble count = [((JavaLangDouble *) nil_chk([((id<JavaUtilMap_Entry>) nil_chk(entry_)) getValue])) doubleValue];
    if (count != 0) {
      [((id<EduStanfordNlpStatsCounter>) nil_chk(target)) incrementCountWithId:[entry_ getKey] withDouble:count];
    }
  }
}

void EduStanfordNlpStatsCounters_addInPlaceWithDoubleArray_withEduStanfordNlpStatsCounter_withEduStanfordNlpUtilIndex_(IOSDoubleArray *target, id<EduStanfordNlpStatsCounter> arg, id<EduStanfordNlpUtilIndex> idx) {
  EduStanfordNlpStatsCounters_initialize();
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((id<EduStanfordNlpStatsCounter>) nil_chk(arg)) entrySet])) {
    JrePlusAssignDoubleD(IOSDoubleArray_GetRef(nil_chk(target), [((id<EduStanfordNlpUtilIndex>) nil_chk(idx)) indexOfWithId:[((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey]]), [((JavaLangDouble *) nil_chk([entry_ getValue])) doubleValue]);
  }
}

EduStanfordNlpStatsTwoDimensionalCounter *EduStanfordNlpStatsCounters_addWithEduStanfordNlpStatsTwoDimensionalCounter_withEduStanfordNlpStatsTwoDimensionalCounter_(EduStanfordNlpStatsTwoDimensionalCounter *arg1, EduStanfordNlpStatsTwoDimensionalCounter *arg2) {
  EduStanfordNlpStatsCounters_initialize();
  EduStanfordNlpStatsTwoDimensionalCounter *add = new_EduStanfordNlpStatsTwoDimensionalCounter_init();
  EduStanfordNlpStatsCounters_addInPlaceWithEduStanfordNlpStatsTwoDimensionalCounter_withEduStanfordNlpStatsTwoDimensionalCounter_(add, arg1);
  EduStanfordNlpStatsCounters_addInPlaceWithEduStanfordNlpStatsTwoDimensionalCounter_withEduStanfordNlpStatsTwoDimensionalCounter_(add, arg2);
  return add;
}

void EduStanfordNlpStatsCounters_addInPlaceWithEduStanfordNlpStatsTwoDimensionalCounter_withEduStanfordNlpStatsTwoDimensionalCounter_withDouble_(EduStanfordNlpStatsTwoDimensionalCounter *target, EduStanfordNlpStatsTwoDimensionalCounter *arg, jdouble scale_) {
  EduStanfordNlpStatsCounters_initialize();
  for (id __strong outer in nil_chk([((EduStanfordNlpStatsTwoDimensionalCounter *) nil_chk(arg)) firstKeySet])) for (id __strong inner in nil_chk([arg secondKeySet])) {
    [((EduStanfordNlpStatsTwoDimensionalCounter *) nil_chk(target)) incrementCountWithId:outer withId:inner withDouble:scale_ * [arg getCountWithId:outer withId:inner]];
  }
}

void EduStanfordNlpStatsCounters_addInPlaceWithEduStanfordNlpStatsTwoDimensionalCounter_withEduStanfordNlpStatsTwoDimensionalCounter_(EduStanfordNlpStatsTwoDimensionalCounter *target, EduStanfordNlpStatsTwoDimensionalCounter *arg) {
  EduStanfordNlpStatsCounters_initialize();
  for (id __strong outer in nil_chk([((EduStanfordNlpStatsTwoDimensionalCounter *) nil_chk(arg)) firstKeySet])) for (id __strong inner in nil_chk([arg secondKeySet])) {
    [((EduStanfordNlpStatsTwoDimensionalCounter *) nil_chk(target)) incrementCountWithId:outer withId:inner withDouble:[arg getCountWithId:outer withId:inner]];
  }
}

void EduStanfordNlpStatsCounters_addInPlaceWithEduStanfordNlpStatsCounter_withJavaUtilCollection_withDouble_(id<EduStanfordNlpStatsCounter> target, id<JavaUtilCollection> arg, jdouble value) {
  EduStanfordNlpStatsCounters_initialize();
  for (id __strong key in nil_chk(arg)) {
    [((id<EduStanfordNlpStatsCounter>) nil_chk(target)) incrementCountWithId:key withDouble:value];
  }
}

void EduStanfordNlpStatsCounters_addInPlaceWithEduStanfordNlpStatsTwoDimensionalCounter_withDouble_(EduStanfordNlpStatsTwoDimensionalCounter *target, jdouble value) {
  EduStanfordNlpStatsCounters_initialize();
  for (id __strong outer in nil_chk([((EduStanfordNlpStatsTwoDimensionalCounter *) nil_chk(target)) firstKeySet])) {
    EduStanfordNlpStatsCounters_addInPlaceWithEduStanfordNlpStatsCounter_withDouble_([target getCounterWithId:outer], value);
  }
}

void EduStanfordNlpStatsCounters_addInPlaceWithEduStanfordNlpStatsCounter_withJavaUtilCollection_(id<EduStanfordNlpStatsCounter> target, id<JavaUtilCollection> arg) {
  EduStanfordNlpStatsCounters_initialize();
  for (id __strong key in nil_chk(arg)) {
    [((id<EduStanfordNlpStatsCounter>) nil_chk(target)) incrementCountWithId:key withDouble:1];
  }
}

void EduStanfordNlpStatsCounters_addInPlaceWithEduStanfordNlpStatsCounter_withDouble_(id<EduStanfordNlpStatsCounter> target, jdouble value) {
  EduStanfordNlpStatsCounters_initialize();
  for (id __strong key in nil_chk([((id<EduStanfordNlpStatsCounter>) nil_chk(target)) keySet])) {
    [target incrementCountWithId:key withDouble:value];
  }
}

void EduStanfordNlpStatsCounters_subtractInPlaceWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> target, id<EduStanfordNlpStatsCounter> arg) {
  EduStanfordNlpStatsCounters_initialize();
  for (id __strong key in nil_chk([((id<EduStanfordNlpStatsCounter>) nil_chk(arg)) keySet])) {
    [((id<EduStanfordNlpStatsCounter>) nil_chk(target)) decrementCountWithId:key withDouble:[arg getCountWithId:key]];
  }
}

void EduStanfordNlpStatsCounters_subtractInPlaceWithDoubleArray_withEduStanfordNlpStatsCounter_withEduStanfordNlpUtilIndex_(IOSDoubleArray *target, id<EduStanfordNlpStatsCounter> arg, id<EduStanfordNlpUtilIndex> idx) {
  EduStanfordNlpStatsCounters_initialize();
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((id<EduStanfordNlpStatsCounter>) nil_chk(arg)) entrySet])) {
    JreMinusAssignDoubleD(IOSDoubleArray_GetRef(nil_chk(target), [((id<EduStanfordNlpUtilIndex>) nil_chk(idx)) indexOfWithId:[((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey]]), [((JavaLangDouble *) nil_chk([entry_ getValue])) doubleValue]);
  }
}

void EduStanfordNlpStatsCounters_divideInPlaceWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> target, id<EduStanfordNlpStatsCounter> denominator) {
  EduStanfordNlpStatsCounters_initialize();
  for (id __strong key in nil_chk([((id<EduStanfordNlpStatsCounter>) nil_chk(target)) keySet])) {
    [target setCountWithId:key withDouble:[target getCountWithId:key] / [((id<EduStanfordNlpStatsCounter>) nil_chk(denominator)) getCountWithId:key]];
  }
}

void EduStanfordNlpStatsCounters_dotProductInPlaceWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> target, id<EduStanfordNlpStatsCounter> term) {
  EduStanfordNlpStatsCounters_initialize();
  for (id __strong key in nil_chk([((id<EduStanfordNlpStatsCounter>) nil_chk(target)) keySet])) {
    [target setCountWithId:key withDouble:[target getCountWithId:key] * [((id<EduStanfordNlpStatsCounter>) nil_chk(term)) getCountWithId:key]];
  }
}

id<EduStanfordNlpStatsCounter> EduStanfordNlpStatsCounters_divideInPlaceWithEduStanfordNlpStatsCounter_withDouble_(id<EduStanfordNlpStatsCounter> target, jdouble divisor) {
  EduStanfordNlpStatsCounters_initialize();
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((id<EduStanfordNlpStatsCounter>) nil_chk(target)) entrySet])) {
    [target setCountWithId:[((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey] withDouble:[((JavaLangDouble *) nil_chk([entry_ getValue])) doubleValue] / divisor];
  }
  return target;
}

id<EduStanfordNlpStatsCounter> EduStanfordNlpStatsCounters_multiplyInPlaceWithEduStanfordNlpStatsCounter_withDouble_(id<EduStanfordNlpStatsCounter> target, jdouble multiplier) {
  EduStanfordNlpStatsCounters_initialize();
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((id<EduStanfordNlpStatsCounter>) nil_chk(target)) entrySet])) {
    [target setCountWithId:[((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey] withDouble:[((JavaLangDouble *) nil_chk([entry_ getValue])) doubleValue] * multiplier];
  }
  return target;
}

id<EduStanfordNlpStatsCounter> EduStanfordNlpStatsCounters_multiplyInPlaceWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> target, id<EduStanfordNlpStatsCounter> mult) {
  EduStanfordNlpStatsCounters_initialize();
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((id<EduStanfordNlpStatsCounter>) nil_chk(target)) entrySet])) {
    [target setCountWithId:[((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey] withDouble:[((JavaLangDouble *) nil_chk([entry_ getValue])) doubleValue] * [((id<EduStanfordNlpStatsCounter>) nil_chk(mult)) getCountWithId:[entry_ getKey]]];
  }
  (void) EduStanfordNlpStatsCounters_retainNonZerosWithEduStanfordNlpStatsCounter_(target);
  return target;
}

void EduStanfordNlpStatsCounters_normalizeWithEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> target) {
  EduStanfordNlpStatsCounters_initialize();
  (void) EduStanfordNlpStatsCounters_divideInPlaceWithEduStanfordNlpStatsCounter_withDouble_(target, [((id<EduStanfordNlpStatsCounter>) nil_chk(target)) totalCount]);
}

id<EduStanfordNlpStatsCounter> EduStanfordNlpStatsCounters_asNormalizedCounterWithEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> c) {
  EduStanfordNlpStatsCounters_initialize();
  return ((id<EduStanfordNlpStatsCounter>) EduStanfordNlpStatsCounters_scale__WithEduStanfordNlpStatsCounter_withDouble_(c, 1.0 / [((id<EduStanfordNlpStatsCounter>) nil_chk(c)) totalCount]));
}

void EduStanfordNlpStatsCounters_normalizeWithEduStanfordNlpStatsTwoDimensionalCounter_(EduStanfordNlpStatsTwoDimensionalCounter *target) {
  EduStanfordNlpStatsCounters_initialize();
  EduStanfordNlpStatsCounters_divideInPlaceWithEduStanfordNlpStatsTwoDimensionalCounter_withDouble_(target, [((EduStanfordNlpStatsTwoDimensionalCounter *) nil_chk(target)) totalCount]);
}

void EduStanfordNlpStatsCounters_logInPlaceWithEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> target) {
  EduStanfordNlpStatsCounters_initialize();
  for (id __strong key in nil_chk([((id<EduStanfordNlpStatsCounter>) nil_chk(target)) keySet])) {
    [target setCountWithId:key withDouble:JavaLangMath_logWithDouble_([target getCountWithId:key])];
  }
}

id<JavaUtilList> EduStanfordNlpStatsCounters_deleteOutofRangeWithEduStanfordNlpStatsCounter_withInt_withInt_(id<EduStanfordNlpStatsCounter> c, jint top, jint bottom) {
  EduStanfordNlpStatsCounters_initialize();
  id<JavaUtilList> purgedItems = new_JavaUtilArrayList_init();
  jint numToPurge = top + bottom;
  if (numToPurge <= 0) {
    return purgedItems;
  }
  id<JavaUtilList> l = EduStanfordNlpStatsCounters_toSortedListWithEduStanfordNlpStatsCounter_(c);
  for (jint i = 0; i < top; i++) {
    id item = [((id<JavaUtilList>) nil_chk(l)) getWithInt:i];
    [purgedItems addWithId:item];
    [((id<EduStanfordNlpStatsCounter>) nil_chk(c)) removeWithId:item];
  }
  jint size = [((id<EduStanfordNlpStatsCounter>) nil_chk(c)) size];
  for (jint i = [c size] - 1; i >= (size - bottom); i--) {
    id item = [((id<JavaUtilList>) nil_chk(l)) getWithInt:i];
    [purgedItems addWithId:item];
    [c removeWithId:item];
  }
  return purgedItems;
}

void EduStanfordNlpStatsCounters_retainTopWithEduStanfordNlpStatsCounter_withInt_(id<EduStanfordNlpStatsCounter> c, jint num) {
  EduStanfordNlpStatsCounters_initialize();
  jint numToPurge = [((id<EduStanfordNlpStatsCounter>) nil_chk(c)) size] - num;
  if (numToPurge <= 0) {
    return;
  }
  id<JavaUtilList> l = EduStanfordNlpStatsCounters_toSortedListWithEduStanfordNlpStatsCounter_withBoolean_(c, true);
  for (jint i = 0; i < numToPurge; i++) {
    [c removeWithId:[((id<JavaUtilList>) nil_chk(l)) getWithInt:i]];
  }
}

void EduStanfordNlpStatsCounters_retainTopKeyComparableWithEduStanfordNlpStatsCounter_withInt_(id<EduStanfordNlpStatsCounter> c, jint num) {
  EduStanfordNlpStatsCounters_initialize();
  jint numToPurge = [((id<EduStanfordNlpStatsCounter>) nil_chk(c)) size] - num;
  if (numToPurge <= 0) {
    return;
  }
  id<JavaUtilList> l = EduStanfordNlpStatsCounters_toSortedListKeyComparableWithEduStanfordNlpStatsCounter_(c);
  JavaUtilCollections_reverseWithJavaUtilList_(l);
  for (jint i = 0; i < numToPurge; i++) {
    [c removeWithId:[((id<JavaUtilList>) nil_chk(l)) getWithInt:i]];
  }
}

id<JavaUtilList> EduStanfordNlpStatsCounters_retainBottomWithEduStanfordNlpStatsCounter_withInt_(id<EduStanfordNlpStatsCounter> c, jint num) {
  EduStanfordNlpStatsCounters_initialize();
  jint numToPurge = [((id<EduStanfordNlpStatsCounter>) nil_chk(c)) size] - num;
  if (numToPurge <= 0) {
    return EduStanfordNlpUtilGenerics_newArrayList();
  }
  id<JavaUtilList> removed = new_JavaUtilArrayList_init();
  id<JavaUtilList> l = EduStanfordNlpStatsCounters_toSortedListWithEduStanfordNlpStatsCounter_(c);
  for (jint i = 0; i < numToPurge; i++) {
    id rem = [((id<JavaUtilList>) nil_chk(l)) getWithInt:i];
    [removed addWithId:rem];
    [c removeWithId:rem];
  }
  return removed;
}

id<JavaUtilSet> EduStanfordNlpStatsCounters_retainNonZerosWithEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> counter) {
  EduStanfordNlpStatsCounters_initialize();
  id<JavaUtilSet> removed = EduStanfordNlpUtilGenerics_newHashSet();
  for (id __strong key in nil_chk([((id<EduStanfordNlpStatsCounter>) nil_chk(counter)) keySet])) {
    if ([counter getCountWithId:key] == 0.0) {
      [((id<JavaUtilSet>) nil_chk(removed)) addWithId:key];
    }
  }
  for (id __strong key in nil_chk(removed)) {
    [counter removeWithId:key];
  }
  return removed;
}

id<JavaUtilSet> EduStanfordNlpStatsCounters_retainAboveWithEduStanfordNlpStatsCounter_withDouble_(id<EduStanfordNlpStatsCounter> counter, jdouble countThreshold) {
  EduStanfordNlpStatsCounters_initialize();
  id<JavaUtilSet> removed = EduStanfordNlpUtilGenerics_newHashSet();
  for (id __strong key in nil_chk([((id<EduStanfordNlpStatsCounter>) nil_chk(counter)) keySet])) {
    if ([counter getCountWithId:key] < countThreshold) {
      [((id<JavaUtilSet>) nil_chk(removed)) addWithId:key];
    }
  }
  for (id __strong key in nil_chk(removed)) {
    [counter removeWithId:key];
  }
  return removed;
}

id<JavaUtilSet> EduStanfordNlpStatsCounters_retainAboveWithEduStanfordNlpStatsTwoDimensionalCounter_withDouble_(EduStanfordNlpStatsTwoDimensionalCounter *counter, jdouble countThreshold) {
  EduStanfordNlpStatsCounters_initialize();
  id<JavaUtilSet> removed = new_JavaUtilHashSet_init();
  for (id<JavaUtilMap_Entry> __strong en in nil_chk([((EduStanfordNlpStatsTwoDimensionalCounter *) nil_chk(counter)) entrySet])) {
    for (id<JavaUtilMap_Entry> __strong en2 in nil_chk([((EduStanfordNlpStatsClassicCounter *) nil_chk([((id<JavaUtilMap_Entry>) nil_chk(en)) getValue])) entrySet])) {
      if ([counter getCountWithId:[en getKey] withId:[((id<JavaUtilMap_Entry>) nil_chk(en2)) getKey]] < countThreshold) {
        [removed addWithId:new_EduStanfordNlpUtilPair_initWithId_withId_([en getKey], [en2 getKey])];
      }
    }
  }
  for (EduStanfordNlpUtilPair * __strong key in removed) {
    [counter removeWithId:[((EduStanfordNlpUtilPair *) nil_chk(key)) first] withId:[key second]];
  }
  return removed;
}

id<EduStanfordNlpStatsCounter> EduStanfordNlpStatsCounters_retainBelowWithEduStanfordNlpStatsCounter_withDouble_(id<EduStanfordNlpStatsCounter> counter, jdouble countMaxThreshold) {
  EduStanfordNlpStatsCounters_initialize();
  id<EduStanfordNlpStatsCounter> removed = new_EduStanfordNlpStatsClassicCounter_init();
  for (id __strong key in nil_chk([((id<EduStanfordNlpStatsCounter>) nil_chk(counter)) keySet])) {
    jdouble count = [counter getCountWithId:key];
    if ([counter getCountWithId:key] > countMaxThreshold) {
      [removed setCountWithId:key withDouble:count];
    }
  }
  for (id<JavaUtilMap_Entry> __strong key in nil_chk([removed entrySet])) {
    [counter removeWithId:[((id<JavaUtilMap_Entry>) nil_chk(key)) getKey]];
  }
  return removed;
}

id<JavaUtilSet> EduStanfordNlpStatsCounters_retainMatchingKeysWithEduStanfordNlpStatsCounter_withJavaUtilList_(id<EduStanfordNlpStatsCounter> counter, id<JavaUtilList> matchPatterns) {
  EduStanfordNlpStatsCounters_initialize();
  id<JavaUtilSet> removed = EduStanfordNlpUtilGenerics_newHashSet();
  for (NSString * __strong key in nil_chk([((id<EduStanfordNlpStatsCounter>) nil_chk(counter)) keySet])) {
    jboolean matched = false;
    for (JavaUtilRegexPattern * __strong pattern in nil_chk(matchPatterns)) {
      if ([((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(pattern)) matcherWithJavaLangCharSequence:key])) matches]) {
        matched = true;
        break;
      }
    }
    if (!matched) {
      [((id<JavaUtilSet>) nil_chk(removed)) addWithId:key];
    }
  }
  for (NSString * __strong key in nil_chk(removed)) {
    [counter removeWithId:key];
  }
  return removed;
}

id<JavaUtilSet> EduStanfordNlpStatsCounters_retainKeysWithEduStanfordNlpStatsCounter_withJavaUtilCollection_(id<EduStanfordNlpStatsCounter> counter, id<JavaUtilCollection> matchKeys) {
  EduStanfordNlpStatsCounters_initialize();
  id<JavaUtilSet> removed = EduStanfordNlpUtilGenerics_newHashSet();
  for (id __strong key in nil_chk([((id<EduStanfordNlpStatsCounter>) nil_chk(counter)) keySet])) {
    jboolean matched = [((id<JavaUtilCollection>) nil_chk(matchKeys)) containsWithId:key];
    if (!matched) {
      [((id<JavaUtilSet>) nil_chk(removed)) addWithId:key];
    }
  }
  for (id __strong key in nil_chk(removed)) {
    [counter removeWithId:key];
  }
  return removed;
}

void EduStanfordNlpStatsCounters_removeKeysWithEduStanfordNlpStatsCounter_withJavaUtilCollection_(id<EduStanfordNlpStatsCounter> counter, id<JavaUtilCollection> removeKeysCollection) {
  EduStanfordNlpStatsCounters_initialize();
  for (id __strong key in nil_chk(removeKeysCollection)) [((id<EduStanfordNlpStatsCounter>) nil_chk(counter)) removeWithId:key];
}

void EduStanfordNlpStatsCounters_removeKeysWithEduStanfordNlpStatsTwoDimensionalCounter_withJavaUtilCollection_(EduStanfordNlpStatsTwoDimensionalCounter *counter, id<JavaUtilCollection> removeKeysCollection) {
  EduStanfordNlpStatsCounters_initialize();
  for (id __strong key in nil_chk(removeKeysCollection)) [((EduStanfordNlpStatsTwoDimensionalCounter *) nil_chk(counter)) removeWithId:key];
}

id<JavaUtilSet> EduStanfordNlpStatsCounters_keysAboveWithEduStanfordNlpStatsCounter_withDouble_(id<EduStanfordNlpStatsCounter> c, jdouble countThreshold) {
  EduStanfordNlpStatsCounters_initialize();
  id<JavaUtilSet> keys = EduStanfordNlpUtilGenerics_newHashSet();
  for (id __strong key in nil_chk([((id<EduStanfordNlpStatsCounter>) nil_chk(c)) keySet])) {
    if ([c getCountWithId:key] >= countThreshold) {
      [((id<JavaUtilSet>) nil_chk(keys)) addWithId:key];
    }
  }
  return (keys);
}

id<JavaUtilSet> EduStanfordNlpStatsCounters_keysBelowWithEduStanfordNlpStatsCounter_withDouble_(id<EduStanfordNlpStatsCounter> c, jdouble countThreshold) {
  EduStanfordNlpStatsCounters_initialize();
  id<JavaUtilSet> keys = EduStanfordNlpUtilGenerics_newHashSet();
  for (id __strong key in nil_chk([((id<EduStanfordNlpStatsCounter>) nil_chk(c)) keySet])) {
    if ([c getCountWithId:key] <= countThreshold) {
      [((id<JavaUtilSet>) nil_chk(keys)) addWithId:key];
    }
  }
  return (keys);
}

id<JavaUtilSet> EduStanfordNlpStatsCounters_keysAtWithEduStanfordNlpStatsCounter_withDouble_(id<EduStanfordNlpStatsCounter> c, jdouble count) {
  EduStanfordNlpStatsCounters_initialize();
  id<JavaUtilSet> keys = EduStanfordNlpUtilGenerics_newHashSet();
  for (id __strong key in nil_chk([((id<EduStanfordNlpStatsCounter>) nil_chk(c)) keySet])) {
    if ([c getCountWithId:key] == count) {
      [((id<JavaUtilSet>) nil_chk(keys)) addWithId:key];
    }
  }
  return (keys);
}

id<EduStanfordNlpStatsCounter> EduStanfordNlpStatsCounters_transformWithEduStanfordNlpStatsCounter_withJavaUtilFunctionFunction_(id<EduStanfordNlpStatsCounter> c, id<JavaUtilFunctionFunction> f) {
  EduStanfordNlpStatsCounters_initialize();
  id<EduStanfordNlpStatsCounter> c2 = new_EduStanfordNlpStatsClassicCounter_init();
  for (id __strong key in nil_chk([((id<EduStanfordNlpStatsCounter>) nil_chk(c)) keySet])) {
    [c2 setCountWithId:[((id<JavaUtilFunctionFunction>) nil_chk(f)) applyWithId:key] withDouble:[c getCountWithId:key]];
  }
  return c2;
}

id<EduStanfordNlpStatsCounter> EduStanfordNlpStatsCounters_transformWithValuesAddWithEduStanfordNlpStatsCounter_withJavaUtilFunctionFunction_(id<EduStanfordNlpStatsCounter> c, id<JavaUtilFunctionFunction> f) {
  EduStanfordNlpStatsCounters_initialize();
  id<EduStanfordNlpStatsCounter> c2 = new_EduStanfordNlpStatsClassicCounter_init();
  for (id __strong key in nil_chk([((id<EduStanfordNlpStatsCounter>) nil_chk(c)) keySet])) {
    [c2 incrementCountWithId:[((id<JavaUtilFunctionFunction>) nil_chk(f)) applyWithId:key] withDouble:[c getCountWithId:key]];
  }
  return c2;
}

id<JavaUtilComparator> EduStanfordNlpStatsCounters_toComparatorWithEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> counter) {
  EduStanfordNlpStatsCounters_initialize();
  return new_EduStanfordNlpStatsCounters_$Lambda$2_initWithEduStanfordNlpStatsCounter_(counter);
}

id<JavaUtilComparator> EduStanfordNlpStatsCounters_toComparatorWithKeysWithEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> counter) {
  EduStanfordNlpStatsCounters_initialize();
  return new_EduStanfordNlpStatsCounters_$Lambda$3_initWithEduStanfordNlpStatsCounter_(counter);
}

id<JavaUtilComparator> EduStanfordNlpStatsCounters_toComparatorDescendingWithEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> counter) {
  EduStanfordNlpStatsCounters_initialize();
  return new_EduStanfordNlpStatsCounters_$Lambda$4_initWithEduStanfordNlpStatsCounter_(counter);
}

id<JavaUtilComparator> EduStanfordNlpStatsCounters_toComparatorWithEduStanfordNlpStatsCounter_withBoolean_withBoolean_(id<EduStanfordNlpStatsCounter> counter, jboolean ascending, jboolean useMagnitude) {
  EduStanfordNlpStatsCounters_initialize();
  return new_EduStanfordNlpStatsCounters_$Lambda$5_initWithBoolean_withBoolean_withEduStanfordNlpStatsCounter_(ascending, useMagnitude, counter);
}

id<JavaUtilList> EduStanfordNlpStatsCounters_toSortedListWithEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> c) {
  EduStanfordNlpStatsCounters_initialize();
  return EduStanfordNlpStatsCounters_toSortedListWithEduStanfordNlpStatsCounter_withBoolean_(c, false);
}

id<JavaUtilList> EduStanfordNlpStatsCounters_toSortedListWithEduStanfordNlpStatsCounter_withBoolean_(id<EduStanfordNlpStatsCounter> c, jboolean ascending) {
  EduStanfordNlpStatsCounters_initialize();
  id<JavaUtilList> l = new_JavaUtilArrayList_initWithJavaUtilCollection_([((id<EduStanfordNlpStatsCounter>) nil_chk(c)) keySet]);
  id<JavaUtilComparator> comp = ascending ? EduStanfordNlpStatsCounters_toComparatorWithEduStanfordNlpStatsCounter_(c) : EduStanfordNlpStatsCounters_toComparatorDescendingWithEduStanfordNlpStatsCounter_(c);
  JavaUtilCollections_sortWithJavaUtilList_withJavaUtilComparator_(l, comp);
  return l;
}

id<JavaUtilList> EduStanfordNlpStatsCounters_toSortedListKeyComparableWithEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> c) {
  EduStanfordNlpStatsCounters_initialize();
  id<JavaUtilList> l = new_JavaUtilArrayList_initWithJavaUtilCollection_([((id<EduStanfordNlpStatsCounter>) nil_chk(c)) keySet]);
  id<JavaUtilComparator> comp = EduStanfordNlpStatsCounters_toComparatorWithKeysWithEduStanfordNlpStatsCounter_(c);
  JavaUtilCollections_sortWithJavaUtilList_withJavaUtilComparator_(l, comp);
  JavaUtilCollections_reverseWithJavaUtilList_(l);
  return l;
}

EduStanfordNlpStatsIntCounter *EduStanfordNlpStatsCounters_toRankCounterWithEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> c) {
  EduStanfordNlpStatsCounters_initialize();
  EduStanfordNlpStatsIntCounter *rankCounter = new_EduStanfordNlpStatsIntCounter_init();
  id<JavaUtilList> sortedList = EduStanfordNlpStatsCounters_toSortedListWithEduStanfordNlpStatsCounter_(c);
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(sortedList)) size]; i++) {
    [rankCounter setCountWithId:[sortedList getWithInt:i] withInt:i];
  }
  return rankCounter;
}

id<EduStanfordNlpStatsCounter> EduStanfordNlpStatsCounters_toTiedRankCounterWithEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> c) {
  EduStanfordNlpStatsCounters_initialize();
  id<EduStanfordNlpStatsCounter> rankCounter = new_EduStanfordNlpStatsClassicCounter_init();
  id<JavaUtilList> sortedList = EduStanfordNlpStatsCounters_toSortedListWithCountsWithEduStanfordNlpStatsCounter_(c);
  jint i = 0;
  id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk(sortedList)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    EduStanfordNlpUtilPair *iEn = [it next];
    jdouble icount = [((JavaLangDouble *) nil_chk([((EduStanfordNlpUtilPair *) nil_chk(iEn)) second])) doubleValue];
    id iKey = [iEn first];
    id<JavaUtilList> l = new_JavaUtilArrayList_init();
    id<JavaUtilList> keys = new_JavaUtilArrayList_init();
    [l addWithId:JavaLangInteger_valueOfWithInt_(i + 1)];
    [keys addWithId:iKey];
    for (jint j = i + 1; j < [sortedList size]; j++) {
      EduStanfordNlpUtilPair *jEn = [sortedList getWithInt:j];
      if (icount == [((JavaLangDouble *) nil_chk([((EduStanfordNlpUtilPair *) nil_chk(jEn)) second])) doubleValue]) {
        [l addWithId:JavaLangInteger_valueOfWithInt_(j + 1)];
        [keys addWithId:[jEn first]];
      }
      else break;
    }
    if ([l size] > 1) {
      jdouble sum = 0;
      for (JavaLangInteger * __strong d in l) JrePlusAssignDoubleD(&sum, [((JavaLangInteger *) nil_chk(d)) intValue]);
      jdouble avgRank = sum / [l size];
      for (jint k = 0; k < [l size]; k++) {
        [rankCounter setCountWithId:[keys getWithInt:k] withDouble:avgRank];
        if (k != [l size] - 1 && [it hasNext]) (void) [it next];
        i++;
      }
    }
    else {
      [rankCounter setCountWithId:iKey withDouble:i + 1];
      i++;
    }
  }
  return rankCounter;
}

id<JavaUtilList> EduStanfordNlpStatsCounters_toDescendingMagnitudeSortedListWithCountsWithEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> c) {
  EduStanfordNlpStatsCounters_initialize();
  id<JavaUtilList> keys = new_JavaUtilArrayList_initWithJavaUtilCollection_([((id<EduStanfordNlpStatsCounter>) nil_chk(c)) keySet]);
  JavaUtilCollections_sortWithJavaUtilList_withJavaUtilComparator_(keys, EduStanfordNlpStatsCounters_toComparatorWithEduStanfordNlpStatsCounter_withBoolean_withBoolean_(c, false, true));
  id<JavaUtilList> l = new_JavaUtilArrayList_initWithInt_([keys size]);
  for (id __strong key in keys) {
    [l addWithId:new_EduStanfordNlpUtilPair_initWithId_withId_(key, JavaLangDouble_valueOfWithDouble_([c getCountWithId:key]))];
  }
  return l;
}

id<JavaUtilList> EduStanfordNlpStatsCounters_toSortedListWithCountsWithEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> c) {
  EduStanfordNlpStatsCounters_initialize();
  id<JavaUtilList> l = new_JavaUtilArrayList_initWithInt_([((id<EduStanfordNlpStatsCounter>) nil_chk(c)) size]);
  for (id __strong e in nil_chk([c keySet])) {
    [l addWithId:new_EduStanfordNlpUtilPair_initWithId_withId_(e, JavaLangDouble_valueOfWithDouble_([c getCountWithId:e]))];
  }
  JavaUtilCollections_sortWithJavaUtilList_withJavaUtilComparator_(l, JreLoadStatic(EduStanfordNlpStatsCounters_$Lambda$6, instance));
  return l;
}

id<JavaUtilList> EduStanfordNlpStatsCounters_toSortedListWithCountsWithEduStanfordNlpStatsCounter_withJavaUtilComparator_(id<EduStanfordNlpStatsCounter> c, id<JavaUtilComparator> comparator) {
  EduStanfordNlpStatsCounters_initialize();
  id<JavaUtilList> l = new_JavaUtilArrayList_initWithInt_([((id<EduStanfordNlpStatsCounter>) nil_chk(c)) size]);
  for (id __strong e in nil_chk([c keySet])) {
    [l addWithId:new_EduStanfordNlpUtilPair_initWithId_withId_(e, JavaLangDouble_valueOfWithDouble_([c getCountWithId:e]))];
  }
  JavaUtilCollections_sortWithJavaUtilList_withJavaUtilComparator_(l, comparator);
  return l;
}

id<EduStanfordNlpUtilPriorityQueue> EduStanfordNlpStatsCounters_toPriorityQueueWithEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> c) {
  EduStanfordNlpStatsCounters_initialize();
  id<EduStanfordNlpUtilPriorityQueue> queue = new_EduStanfordNlpUtilBinaryHeapPriorityQueue_init();
  for (id __strong key in nil_chk([((id<EduStanfordNlpStatsCounter>) nil_chk(c)) keySet])) {
    jdouble count = [c getCountWithId:key];
    [queue addWithId:key withDouble:count];
  }
  return queue;
}

id<EduStanfordNlpStatsCounter> EduStanfordNlpStatsCounters_union__WithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> c1, id<EduStanfordNlpStatsCounter> c2) {
  EduStanfordNlpStatsCounters_initialize();
  id<EduStanfordNlpStatsCounter> result = [((id<EduStanfordNlpUtilFactory>) nil_chk([((id<EduStanfordNlpStatsCounter>) nil_chk(c1)) getFactory])) create];
  EduStanfordNlpStatsCounters_addInPlaceWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_(result, c1);
  EduStanfordNlpStatsCounters_addInPlaceWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_(result, c2);
  return result;
}

id<EduStanfordNlpStatsCounter> EduStanfordNlpStatsCounters_intersectionWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> c1, id<EduStanfordNlpStatsCounter> c2) {
  EduStanfordNlpStatsCounters_initialize();
  id<EduStanfordNlpStatsCounter> result = [((id<EduStanfordNlpUtilFactory>) nil_chk([((id<EduStanfordNlpStatsCounter>) nil_chk(c1)) getFactory])) create];
  for (id __strong key in nil_chk(EduStanfordNlpUtilSets_union__WithJavaUtilSet_withJavaUtilSet_([c1 keySet], [((id<EduStanfordNlpStatsCounter>) nil_chk(c2)) keySet]))) {
    jdouble count1 = [c1 getCountWithId:key];
    jdouble count2 = [c2 getCountWithId:key];
    jdouble minCount = (count1 < count2 ? count1 : count2);
    if (minCount > 0) {
      [((id<EduStanfordNlpStatsCounter>) nil_chk(result)) setCountWithId:key withDouble:minCount];
    }
  }
  return result;
}

jdouble EduStanfordNlpStatsCounters_jaccardCoefficientWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> c1, id<EduStanfordNlpStatsCounter> c2) {
  EduStanfordNlpStatsCounters_initialize();
  jdouble minCount = 0.0, maxCount = 0.0;
  for (id __strong key in nil_chk(EduStanfordNlpUtilSets_union__WithJavaUtilSet_withJavaUtilSet_([((id<EduStanfordNlpStatsCounter>) nil_chk(c1)) keySet], [((id<EduStanfordNlpStatsCounter>) nil_chk(c2)) keySet]))) {
    jdouble count1 = [c1 getCountWithId:key];
    jdouble count2 = [c2 getCountWithId:key];
    JrePlusAssignDoubleD(&minCount, (count1 < count2 ? count1 : count2));
    JrePlusAssignDoubleD(&maxCount, (count1 > count2 ? count1 : count2));
  }
  return minCount / maxCount;
}

id<EduStanfordNlpStatsCounter> EduStanfordNlpStatsCounters_productWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> c1, id<EduStanfordNlpStatsCounter> c2) {
  EduStanfordNlpStatsCounters_initialize();
  id<EduStanfordNlpStatsCounter> result = [((id<EduStanfordNlpUtilFactory>) nil_chk([((id<EduStanfordNlpStatsCounter>) nil_chk(c1)) getFactory])) create];
  for (id __strong key in nil_chk(EduStanfordNlpUtilSets_intersectionWithJavaUtilSet_withJavaUtilSet_([c1 keySet], [((id<EduStanfordNlpStatsCounter>) nil_chk(c2)) keySet]))) {
    [((id<EduStanfordNlpStatsCounter>) nil_chk(result)) setCountWithId:key withDouble:[c1 getCountWithId:key] * [c2 getCountWithId:key]];
  }
  return result;
}

jdouble EduStanfordNlpStatsCounters_dotProductWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> c1, id<EduStanfordNlpStatsCounter> c2) {
  EduStanfordNlpStatsCounters_initialize();
  jdouble dotProd = 0.0;
  if ([((id<EduStanfordNlpStatsCounter>) nil_chk(c1)) size] > [((id<EduStanfordNlpStatsCounter>) nil_chk(c2)) size]) {
    id<EduStanfordNlpStatsCounter> tmpCnt = c1;
    c1 = c2;
    c2 = tmpCnt;
  }
  for (id __strong key in nil_chk([c1 keySet])) {
    jdouble count1 = [c1 getCountWithId:key];
    if (JavaLangDouble_isNaNWithDouble_(count1) || JavaLangDouble_isInfiniteWithDouble_(count1)) {
      @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$@CDCD", @"Counters.dotProduct infinite or NaN value for key: ", key, 0x0009, [c1 getCountWithId:key], 0x0009, [c2 getCountWithId:key]));
    }
    if (count1 != 0.0) {
      jdouble count2 = [c2 getCountWithId:key];
      if (JavaLangDouble_isNaNWithDouble_(count2) || JavaLangDouble_isInfiniteWithDouble_(count2)) {
        @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$@CDCD", @"Counters.dotProduct infinite or NaN value for key: ", key, 0x0009, [c1 getCountWithId:key], 0x0009, [c2 getCountWithId:key]));
      }
      if (count2 != 0.0) {
        JrePlusAssignDoubleD(&dotProd, (count1 * count2));
      }
    }
  }
  return dotProd;
}

jdouble EduStanfordNlpStatsCounters_dotProductWithEduStanfordNlpStatsCounter_withDoubleArray_withEduStanfordNlpUtilIndex_(id<EduStanfordNlpStatsCounter> c, IOSDoubleArray *a, id<EduStanfordNlpUtilIndex> idx) {
  EduStanfordNlpStatsCounters_initialize();
  jdouble dotProd = 0.0;
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((id<EduStanfordNlpStatsCounter>) nil_chk(c)) entrySet])) {
    jint keyIdx = [((id<EduStanfordNlpUtilIndex>) nil_chk(idx)) indexOfWithId:[((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey]];
    if (keyIdx >= 0) {
      JrePlusAssignDoubleD(&dotProd, [((JavaLangDouble *) nil_chk([entry_ getValue])) doubleValue] * IOSDoubleArray_Get(nil_chk(a), keyIdx));
    }
  }
  return dotProd;
}

jdouble EduStanfordNlpStatsCounters_sumEntriesWithEduStanfordNlpStatsCounter_withJavaUtilCollection_(id<EduStanfordNlpStatsCounter> c1, id<JavaUtilCollection> entries) {
  EduStanfordNlpStatsCounters_initialize();
  jdouble dotProd = 0.0;
  for (id __strong entry_ in nil_chk(entries)) {
    JrePlusAssignDoubleD(&dotProd, [((id<EduStanfordNlpStatsCounter>) nil_chk(c1)) getCountWithId:entry_]);
  }
  return dotProd;
}

id<EduStanfordNlpStatsCounter> EduStanfordNlpStatsCounters_addWithEduStanfordNlpStatsCounter_withJavaUtilCollection_(id<EduStanfordNlpStatsCounter> c1, id<JavaUtilCollection> c2) {
  EduStanfordNlpStatsCounters_initialize();
  id<EduStanfordNlpStatsCounter> result = [((id<EduStanfordNlpUtilFactory>) nil_chk([((id<EduStanfordNlpStatsCounter>) nil_chk(c1)) getFactory])) create];
  EduStanfordNlpStatsCounters_addInPlaceWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_(result, c1);
  for (id __strong key in nil_chk(c2)) {
    [((id<EduStanfordNlpStatsCounter>) nil_chk(result)) incrementCountWithId:key withDouble:1];
  }
  return result;
}

id<EduStanfordNlpStatsCounter> EduStanfordNlpStatsCounters_addWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> c1, id<EduStanfordNlpStatsCounter> c2) {
  EduStanfordNlpStatsCounters_initialize();
  id<EduStanfordNlpStatsCounter> result = [((id<EduStanfordNlpUtilFactory>) nil_chk([((id<EduStanfordNlpStatsCounter>) nil_chk(c1)) getFactory])) create];
  for (id __strong key in nil_chk(EduStanfordNlpUtilSets_union__WithJavaUtilSet_withJavaUtilSet_([c1 keySet], [((id<EduStanfordNlpStatsCounter>) nil_chk(c2)) keySet]))) {
    [((id<EduStanfordNlpStatsCounter>) nil_chk(result)) setCountWithId:key withDouble:[c1 getCountWithId:key] + [c2 getCountWithId:key]];
  }
  (void) EduStanfordNlpStatsCounters_retainNonZerosWithEduStanfordNlpStatsCounter_(result);
  return result;
}

id<EduStanfordNlpStatsCounter> EduStanfordNlpStatsCounters_addWithEduStanfordNlpStatsCounter_withDouble_(id<EduStanfordNlpStatsCounter> c1, jdouble value) {
  EduStanfordNlpStatsCounters_initialize();
  id<EduStanfordNlpStatsCounter> result = [((id<EduStanfordNlpUtilFactory>) nil_chk([((id<EduStanfordNlpStatsCounter>) nil_chk(c1)) getFactory])) create];
  for (id __strong key in nil_chk([c1 keySet])) {
    [((id<EduStanfordNlpStatsCounter>) nil_chk(result)) setCountWithId:key withDouble:[c1 getCountWithId:key] + value];
  }
  return result;
}

jdouble EduStanfordNlpStatsCounters_optimizedDotProductWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> c1, id<EduStanfordNlpStatsCounter> c2) {
  EduStanfordNlpStatsCounters_initialize();
  jdouble dotProd = 0.0;
  jint size1 = [((id<EduStanfordNlpStatsCounter>) nil_chk(c1)) size];
  jint size2 = [((id<EduStanfordNlpStatsCounter>) nil_chk(c2)) size];
  if (size1 < size2) {
    for (id __strong key in nil_chk([c1 keySet])) {
      jdouble count1 = [c1 getCountWithId:key];
      if (count1 != 0.0) {
        jdouble count2 = [c2 getCountWithId:key];
        if (count2 != 0.0) JrePlusAssignDoubleD(&dotProd, (count1 * count2));
      }
    }
  }
  else {
    for (id __strong key in nil_chk([c2 keySet])) {
      jdouble count2 = [c2 getCountWithId:key];
      if (count2 != 0.0) {
        jdouble count1 = [c1 getCountWithId:key];
        if (count1 != 0.0) JrePlusAssignDoubleD(&dotProd, (count1 * count2));
      }
    }
  }
  return dotProd;
}

id<EduStanfordNlpStatsCounter> EduStanfordNlpStatsCounters_absoluteDifferenceWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> c1, id<EduStanfordNlpStatsCounter> c2) {
  EduStanfordNlpStatsCounters_initialize();
  id<EduStanfordNlpStatsCounter> result = [((id<EduStanfordNlpUtilFactory>) nil_chk([((id<EduStanfordNlpStatsCounter>) nil_chk(c1)) getFactory])) create];
  for (id __strong key in nil_chk(EduStanfordNlpUtilSets_union__WithJavaUtilSet_withJavaUtilSet_([c1 keySet], [((id<EduStanfordNlpStatsCounter>) nil_chk(c2)) keySet]))) {
    jdouble newCount = JavaLangMath_absWithDouble_([c1 getCountWithId:key] - [c2 getCountWithId:key]);
    if (newCount > 0) {
      [((id<EduStanfordNlpStatsCounter>) nil_chk(result)) setCountWithId:key withDouble:newCount];
    }
  }
  return result;
}

id<EduStanfordNlpStatsCounter> EduStanfordNlpStatsCounters_divisionWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> c1, id<EduStanfordNlpStatsCounter> c2) {
  EduStanfordNlpStatsCounters_initialize();
  id<EduStanfordNlpStatsCounter> result = [((id<EduStanfordNlpUtilFactory>) nil_chk([((id<EduStanfordNlpStatsCounter>) nil_chk(c1)) getFactory])) create];
  for (id __strong key in nil_chk(EduStanfordNlpUtilSets_union__WithJavaUtilSet_withJavaUtilSet_([c1 keySet], [((id<EduStanfordNlpStatsCounter>) nil_chk(c2)) keySet]))) {
    [((id<EduStanfordNlpStatsCounter>) nil_chk(result)) setCountWithId:key withDouble:[c1 getCountWithId:key] / [c2 getCountWithId:key]];
  }
  return result;
}

id<EduStanfordNlpStatsCounter> EduStanfordNlpStatsCounters_divisionNonNaNWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> c1, id<EduStanfordNlpStatsCounter> c2) {
  EduStanfordNlpStatsCounters_initialize();
  id<EduStanfordNlpStatsCounter> result = [((id<EduStanfordNlpUtilFactory>) nil_chk([((id<EduStanfordNlpStatsCounter>) nil_chk(c1)) getFactory])) create];
  for (id __strong key in nil_chk(EduStanfordNlpUtilSets_union__WithJavaUtilSet_withJavaUtilSet_([c1 keySet], [((id<EduStanfordNlpStatsCounter>) nil_chk(c2)) keySet]))) {
    if ([c2 getCountWithId:key] != 0) [((id<EduStanfordNlpStatsCounter>) nil_chk(result)) setCountWithId:key withDouble:[c1 getCountWithId:key] / [c2 getCountWithId:key]];
  }
  return result;
}

jdouble EduStanfordNlpStatsCounters_entropyWithEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> c) {
  EduStanfordNlpStatsCounters_initialize();
  jdouble entropy = 0.0;
  jdouble total = [((id<EduStanfordNlpStatsCounter>) nil_chk(c)) totalCount];
  for (id __strong key in nil_chk([c keySet])) {
    jdouble count = [c getCountWithId:key];
    if (count == 0) {
      continue;
    }
    JreDivideAssignDoubleD(&count, total);
    JreMinusAssignDoubleD(&entropy, count * (JavaLangMath_logWithDouble_(count) / EduStanfordNlpStatsCounters_LOG_E_2));
  }
  return entropy;
}

jdouble EduStanfordNlpStatsCounters_crossEntropyWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> from, id<EduStanfordNlpStatsCounter> to) {
  EduStanfordNlpStatsCounters_initialize();
  jdouble tot2 = [((id<EduStanfordNlpStatsCounter>) nil_chk(to)) totalCount];
  jdouble result = 0.0;
  for (id __strong key in nil_chk([((id<EduStanfordNlpStatsCounter>) nil_chk(from)) keySet])) {
    jdouble count1 = [from getCountWithId:key];
    if (count1 == 0.0) {
      continue;
    }
    jdouble count2 = [to getCountWithId:key];
    jdouble logFract = JavaLangMath_logWithDouble_(count2 / tot2);
    if (logFract == JavaLangDouble_NEGATIVE_INFINITY) {
      return JavaLangDouble_NEGATIVE_INFINITY;
    }
    JrePlusAssignDoubleD(&result, count1 * (logFract / EduStanfordNlpStatsCounters_LOG_E_2));
  }
  return result;
}

jdouble EduStanfordNlpStatsCounters_klDivergenceWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> from, id<EduStanfordNlpStatsCounter> to) {
  EduStanfordNlpStatsCounters_initialize();
  jdouble result = 0.0;
  jdouble tot = ([((id<EduStanfordNlpStatsCounter>) nil_chk(from)) totalCount]);
  jdouble tot2 = ([((id<EduStanfordNlpStatsCounter>) nil_chk(to)) totalCount]);
  for (id __strong key in nil_chk([from keySet])) {
    jdouble num = ([from getCountWithId:key]);
    if (num == 0) {
      continue;
    }
    JreDivideAssignDoubleD(&num, tot);
    jdouble num2 = ([to getCountWithId:key]);
    JreDivideAssignDoubleD(&num2, tot2);
    jdouble logFract = JavaLangMath_logWithDouble_(num / num2);
    if (logFract == JavaLangDouble_NEGATIVE_INFINITY) {
      return JavaLangDouble_NEGATIVE_INFINITY;
    }
    JrePlusAssignDoubleD(&result, num * (logFract / EduStanfordNlpStatsCounters_LOG_E_2));
  }
  return result;
}

jdouble EduStanfordNlpStatsCounters_jensenShannonDivergenceWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> c1, id<EduStanfordNlpStatsCounter> c2) {
  EduStanfordNlpStatsCounters_initialize();
  id<EduStanfordNlpStatsCounter> d1 = EduStanfordNlpStatsCounters_asNormalizedCounterWithEduStanfordNlpStatsCounter_(c1);
  id<EduStanfordNlpStatsCounter> d2 = EduStanfordNlpStatsCounters_asNormalizedCounterWithEduStanfordNlpStatsCounter_(c2);
  id<EduStanfordNlpStatsCounter> average = EduStanfordNlpStatsCounters_averageWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_(d1, d2);
  jdouble kl1 = EduStanfordNlpStatsCounters_klDivergenceWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_(d1, average);
  jdouble kl2 = EduStanfordNlpStatsCounters_klDivergenceWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_(d2, average);
  return (kl1 + kl2) / 2.0;
}

jdouble EduStanfordNlpStatsCounters_skewDivergenceWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_withDouble_(id<EduStanfordNlpStatsCounter> c1, id<EduStanfordNlpStatsCounter> c2, jdouble skew) {
  EduStanfordNlpStatsCounters_initialize();
  id<EduStanfordNlpStatsCounter> d1 = EduStanfordNlpStatsCounters_asNormalizedCounterWithEduStanfordNlpStatsCounter_(c1);
  id<EduStanfordNlpStatsCounter> d2 = EduStanfordNlpStatsCounters_asNormalizedCounterWithEduStanfordNlpStatsCounter_(c2);
  id<EduStanfordNlpStatsCounter> average = EduStanfordNlpStatsCounters_linearCombinationWithEduStanfordNlpStatsCounter_withDouble_withEduStanfordNlpStatsCounter_withDouble_(d2, skew, d1, (1.0 - skew));
  return EduStanfordNlpStatsCounters_klDivergenceWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_(d1, average);
}

jdouble EduStanfordNlpStatsCounters_L2NormWithEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> c) {
  EduStanfordNlpStatsCounters_initialize();
  return JavaLangMath_sqrtWithDouble_(EduStanfordNlpStatsCounters_sumSquaresWithEduStanfordNlpStatsCounter_(c));
}

jdouble EduStanfordNlpStatsCounters_sumSquaresWithEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> c) {
  EduStanfordNlpStatsCounters_initialize();
  jdouble lenSq = 0.0;
  for (id __strong key in nil_chk([((id<EduStanfordNlpStatsCounter>) nil_chk(c)) keySet])) {
    jdouble count = [c getCountWithId:key];
    JrePlusAssignDoubleD(&lenSq, (count * count));
  }
  return lenSq;
}

jdouble EduStanfordNlpStatsCounters_L1NormWithEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> c) {
  EduStanfordNlpStatsCounters_initialize();
  jdouble sumAbs = 0.0;
  for (id __strong key in nil_chk([((id<EduStanfordNlpStatsCounter>) nil_chk(c)) keySet])) {
    jdouble count = [c getCountWithId:key];
    if (count != 0.0) {
      JrePlusAssignDoubleD(&sumAbs, JavaLangMath_absWithDouble_(count));
    }
  }
  return sumAbs;
}

id<EduStanfordNlpStatsCounter> EduStanfordNlpStatsCounters_L2NormalizeWithEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> c) {
  EduStanfordNlpStatsCounters_initialize();
  return ((id<EduStanfordNlpStatsCounter>) EduStanfordNlpStatsCounters_scale__WithEduStanfordNlpStatsCounter_withDouble_(c, 1.0 / EduStanfordNlpStatsCounters_L2NormWithEduStanfordNlpStatsCounter_(c)));
}

id<EduStanfordNlpStatsCounter> EduStanfordNlpStatsCounters_L2NormalizeInPlaceWithEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> c) {
  EduStanfordNlpStatsCounters_initialize();
  return EduStanfordNlpStatsCounters_multiplyInPlaceWithEduStanfordNlpStatsCounter_withDouble_(c, 1.0 / EduStanfordNlpStatsCounters_L2NormWithEduStanfordNlpStatsCounter_(c));
}

jdouble EduStanfordNlpStatsCounters_saferL2NormWithEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> c) {
  EduStanfordNlpStatsCounters_initialize();
  jdouble maxVal = 0.0;
  for (id __strong key in nil_chk([((id<EduStanfordNlpStatsCounter>) nil_chk(c)) keySet])) {
    jdouble value = JavaLangMath_absWithDouble_([c getCountWithId:key]);
    if (value > maxVal) maxVal = value;
  }
  jdouble sqrSum = 0.0;
  for (id __strong key in nil_chk([c keySet])) {
    jdouble count = [c getCountWithId:key];
    JrePlusAssignDoubleD(&sqrSum, JavaLangMath_powWithDouble_withDouble_(count / maxVal, 2));
  }
  return maxVal * JavaLangMath_sqrtWithDouble_(sqrSum);
}

id<EduStanfordNlpStatsCounter> EduStanfordNlpStatsCounters_saferL2NormalizeWithEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> c) {
  EduStanfordNlpStatsCounters_initialize();
  return ((id<EduStanfordNlpStatsCounter>) EduStanfordNlpStatsCounters_scale__WithEduStanfordNlpStatsCounter_withDouble_(c, 1.0 / EduStanfordNlpStatsCounters_saferL2NormWithEduStanfordNlpStatsCounter_(c)));
}

jdouble EduStanfordNlpStatsCounters_cosineWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> c1, id<EduStanfordNlpStatsCounter> c2) {
  EduStanfordNlpStatsCounters_initialize();
  jdouble dotProd = 0.0;
  jdouble lsq1 = 0.0;
  jdouble lsq2 = 0.0;
  for (id __strong key in nil_chk([((id<EduStanfordNlpStatsCounter>) nil_chk(c1)) keySet])) {
    jdouble count1 = [c1 getCountWithId:key];
    if (count1 != 0.0) {
      JrePlusAssignDoubleD(&lsq1, (count1 * count1));
      jdouble count2 = [((id<EduStanfordNlpStatsCounter>) nil_chk(c2)) getCountWithId:key];
      if (count2 != 0.0) {
        JrePlusAssignDoubleD(&dotProd, (count1 * count2));
      }
    }
  }
  for (id __strong key in nil_chk([((id<EduStanfordNlpStatsCounter>) nil_chk(c2)) keySet])) {
    jdouble count2 = [c2 getCountWithId:key];
    if (count2 != 0.0) {
      JrePlusAssignDoubleD(&lsq2, (count2 * count2));
    }
  }
  if (lsq1 != 0.0 && lsq2 != 0.0) {
    jdouble denom = (JavaLangMath_sqrtWithDouble_(lsq1) * JavaLangMath_sqrtWithDouble_(lsq2));
    return dotProd / denom;
  }
  return 0.0;
}

id<EduStanfordNlpStatsCounter> EduStanfordNlpStatsCounters_averageWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> c1, id<EduStanfordNlpStatsCounter> c2) {
  EduStanfordNlpStatsCounters_initialize();
  id<EduStanfordNlpStatsCounter> average = [((id<EduStanfordNlpUtilFactory>) nil_chk([((id<EduStanfordNlpStatsCounter>) nil_chk(c1)) getFactory])) create];
  id<JavaUtilSet> allKeys = EduStanfordNlpUtilGenerics_newHashSetWithJavaUtilCollection_([c1 keySet]);
  [((id<JavaUtilSet>) nil_chk(allKeys)) addAllWithJavaUtilCollection:[((id<EduStanfordNlpStatsCounter>) nil_chk(c2)) keySet]];
  for (id __strong key in allKeys) {
    [((id<EduStanfordNlpStatsCounter>) nil_chk(average)) setCountWithId:key withDouble:([c1 getCountWithId:key] + [c2 getCountWithId:key]) * 0.5];
  }
  return average;
}

id<EduStanfordNlpStatsCounter> EduStanfordNlpStatsCounters_linearCombinationWithEduStanfordNlpStatsCounter_withDouble_withEduStanfordNlpStatsCounter_withDouble_(id<EduStanfordNlpStatsCounter> c1, jdouble w1, id<EduStanfordNlpStatsCounter> c2, jdouble w2) {
  EduStanfordNlpStatsCounters_initialize();
  id<EduStanfordNlpStatsCounter> result = [((id<EduStanfordNlpUtilFactory>) nil_chk([((id<EduStanfordNlpStatsCounter>) nil_chk(c1)) getFactory])) create];
  for (id __strong o in nil_chk([c1 keySet])) {
    [((id<EduStanfordNlpStatsCounter>) nil_chk(result)) incrementCountWithId:o withDouble:[c1 getCountWithId:o] * w1];
  }
  for (id __strong o in nil_chk([((id<EduStanfordNlpStatsCounter>) nil_chk(c2)) keySet])) {
    [((id<EduStanfordNlpStatsCounter>) nil_chk(result)) incrementCountWithId:o withDouble:[c2 getCountWithId:o] * w2];
  }
  return result;
}

jdouble EduStanfordNlpStatsCounters_pointwiseMutualInformationWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_withEduStanfordNlpUtilPair_(id<EduStanfordNlpStatsCounter> var1Distribution, id<EduStanfordNlpStatsCounter> var2Distribution, id<EduStanfordNlpStatsCounter> jointDistribution, EduStanfordNlpUtilPair *values) {
  EduStanfordNlpStatsCounters_initialize();
  jdouble var1Prob = [((id<EduStanfordNlpStatsCounter>) nil_chk(var1Distribution)) getCountWithId:((EduStanfordNlpUtilPair *) nil_chk(values))->first_];
  jdouble var2Prob = [((id<EduStanfordNlpStatsCounter>) nil_chk(var2Distribution)) getCountWithId:values->second_];
  jdouble jointProb = [((id<EduStanfordNlpStatsCounter>) nil_chk(jointDistribution)) getCountWithId:values];
  jdouble pmi = JavaLangMath_logWithDouble_(jointProb) - JavaLangMath_logWithDouble_(var1Prob) - JavaLangMath_logWithDouble_(var2Prob);
  return pmi / EduStanfordNlpStatsCounters_LOG_E_2;
}

jint EduStanfordNlpStatsCounters_hIndexWithEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> citationCounts) {
  EduStanfordNlpStatsCounters_initialize();
  id<EduStanfordNlpStatsCounter> countCounts = new_EduStanfordNlpStatsClassicCounter_init();
  for (JavaLangDouble *boxed__ in nil_chk([((id<EduStanfordNlpStatsCounter>) nil_chk(citationCounts)) values])) {
    jdouble value = [((JavaLangDouble *) nil_chk(boxed__)) doubleValue];
    for (jint i = 0; i <= value; ++i) {
      [countCounts incrementCountWithId:JavaLangInteger_valueOfWithInt_(i)];
    }
  }
  id<JavaUtilList> citationCountValues = EduStanfordNlpUtilCollectionUtils_sortedWithJavaLangIterable_([countCounts keySet]);
  JavaUtilCollections_reverseWithJavaUtilList_(citationCountValues);
  for (JavaLangInteger *boxed__ in nil_chk(citationCountValues)) {
    jint citationCount = [((JavaLangInteger *) nil_chk(boxed__)) intValue];
    jdouble occurrences = [countCounts getCountWithId:JavaLangInteger_valueOfWithInt_(citationCount)];
    if (occurrences >= citationCount) {
      return citationCount;
    }
  }
  return 0;
}

id<EduStanfordNlpStatsCounter> EduStanfordNlpStatsCounters_perturbCountsWithEduStanfordNlpStatsCounter_withJavaUtilRandom_withDouble_(id<EduStanfordNlpStatsCounter> c, JavaUtilRandom *random, jdouble p) {
  EduStanfordNlpStatsCounters_initialize();
  id<EduStanfordNlpStatsCounter> result = [((id<EduStanfordNlpUtilFactory>) nil_chk([((id<EduStanfordNlpStatsCounter>) nil_chk(c)) getFactory])) create];
  for (id __strong key in nil_chk([c keySet])) {
    jdouble count = [c getCountWithId:key];
    jdouble noise = -JavaLangMath_logWithDouble_(1.0 - [((JavaUtilRandom *) nil_chk(random)) nextDouble]);
    jdouble perturbedCount = count + noise * p;
    [((id<EduStanfordNlpStatsCounter>) nil_chk(result)) setCountWithId:key withDouble:perturbedCount];
  }
  return result;
}

void EduStanfordNlpStatsCounters_printCounterComparisonWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> a, id<EduStanfordNlpStatsCounter> b) {
  EduStanfordNlpStatsCounters_initialize();
  EduStanfordNlpStatsCounters_printCounterComparisonWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_withJavaIoPrintStream_(a, b, JreLoadStatic(JavaLangSystem, err));
}

void EduStanfordNlpStatsCounters_printCounterComparisonWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_withJavaIoPrintStream_(id<EduStanfordNlpStatsCounter> a, id<EduStanfordNlpStatsCounter> b, JavaIoPrintStream *outArg) {
  EduStanfordNlpStatsCounters_initialize();
  EduStanfordNlpStatsCounters_printCounterComparisonWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_withJavaIoPrintWriter_(a, b, new_JavaIoPrintWriter_initWithJavaIoOutputStream_withBoolean_(outArg, true));
}

void EduStanfordNlpStatsCounters_printCounterComparisonWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_withJavaIoPrintWriter_(id<EduStanfordNlpStatsCounter> a, id<EduStanfordNlpStatsCounter> b, JavaIoPrintWriter *outArg) {
  EduStanfordNlpStatsCounters_initialize();
  if ([((id<EduStanfordNlpStatsCounter>) nil_chk(a)) isEqual:b]) {
    [((JavaIoPrintWriter *) nil_chk(outArg)) printlnWithNSString:@"Counters are equal."];
    return;
  }
  for (id __strong key in nil_chk([a keySet])) {
    jdouble aCount = [a getCountWithId:key];
    jdouble bCount = [((id<EduStanfordNlpStatsCounter>) nil_chk(b)) getCountWithId:key];
    if (JavaLangMath_absWithDouble_(aCount - bCount) > 1e-5) {
      [((JavaIoPrintWriter *) nil_chk(outArg)) printlnWithNSString:JreStrcat("$@CD$D", @"Counters differ on key ", key, 0x0009, [a getCountWithId:key], @" vs. ", [b getCountWithId:key])];
    }
  }
  id<JavaUtilSet> rest = EduStanfordNlpUtilGenerics_newHashSetWithJavaUtilCollection_([((id<EduStanfordNlpStatsCounter>) nil_chk(b)) keySet]);
  [((id<JavaUtilSet>) nil_chk(rest)) removeAllWithJavaUtilCollection:[a keySet]];
  for (id __strong key in rest) {
    jdouble aCount = [a getCountWithId:key];
    jdouble bCount = [b getCountWithId:key];
    if (JavaLangMath_absWithDouble_(aCount - bCount) > 1e-5) {
      [((JavaIoPrintWriter *) nil_chk(outArg)) printlnWithNSString:JreStrcat("$@CD$D", @"Counters differ on key ", key, 0x0009, [a getCountWithId:key], @" vs. ", [b getCountWithId:key])];
    }
  }
}

id<EduStanfordNlpStatsCounter> EduStanfordNlpStatsCounters_getCountCountsWithEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> c) {
  EduStanfordNlpStatsCounters_initialize();
  id<EduStanfordNlpStatsCounter> result = new_EduStanfordNlpStatsClassicCounter_init();
  for (JavaLangDouble *boxed__ in nil_chk([((id<EduStanfordNlpStatsCounter>) nil_chk(c)) values])) {
    jdouble v = [((JavaLangDouble *) nil_chk(boxed__)) doubleValue];
    [result incrementCountWithId:JavaLangDouble_valueOfWithDouble_(v)];
  }
  return result;
}

id<EduStanfordNlpStatsCounter> EduStanfordNlpStatsCounters_scale__WithEduStanfordNlpStatsCounter_withDouble_(id<EduStanfordNlpStatsCounter> c, jdouble s) {
  EduStanfordNlpStatsCounters_initialize();
  id<EduStanfordNlpStatsCounter> scaled = [((id<EduStanfordNlpUtilFactory>) nil_chk([((id<EduStanfordNlpStatsCounter>) nil_chk(c)) getFactory])) create];
  for (id __strong key in nil_chk([c keySet])) {
    [((id<EduStanfordNlpStatsCounter>) nil_chk(scaled)) setCountWithId:key withDouble:[c getCountWithId:key] * s];
  }
  return scaled;
}

id<EduStanfordNlpStatsCounter> EduStanfordNlpStatsCounters_tfLogScaleWithEduStanfordNlpStatsCounter_withDouble_(id<EduStanfordNlpStatsCounter> c, jdouble base) {
  EduStanfordNlpStatsCounters_initialize();
  id<EduStanfordNlpStatsCounter> scaled = [((id<EduStanfordNlpUtilFactory>) nil_chk([((id<EduStanfordNlpStatsCounter>) nil_chk(c)) getFactory])) create];
  for (id __strong key in nil_chk([c keySet])) {
    jdouble cnt = [c getCountWithId:key];
    jdouble scaledCnt = 0.0;
    if (cnt > 0) {
      scaledCnt = 1.0 + EduStanfordNlpMathSloppyMath_logWithDouble_withDouble_(cnt, base);
    }
    [((id<EduStanfordNlpStatsCounter>) nil_chk(scaled)) setCountWithId:key withDouble:scaledCnt];
  }
  return scaled;
}

void EduStanfordNlpStatsCounters_printCounterSortedByKeysWithEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> c) {
  EduStanfordNlpStatsCounters_initialize();
  id<JavaUtilList> keyList = new_JavaUtilArrayList_initWithJavaUtilCollection_([((id<EduStanfordNlpStatsCounter>) nil_chk(c)) keySet]);
  JavaUtilCollections_sortWithJavaUtilList_(keyList);
  for (id<JavaLangComparable> __strong o in keyList) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("@CD", o, ':', [c getCountWithId:o])];
  }
}

EduStanfordNlpStatsClassicCounter *EduStanfordNlpStatsCounters_loadCounterWithNSString_withIOSClass_(NSString *filename, IOSClass *c) {
  EduStanfordNlpStatsCounters_initialize();
  EduStanfordNlpStatsClassicCounter *counter = new_EduStanfordNlpStatsClassicCounter_init();
  EduStanfordNlpStatsCounters_loadIntoCounterWithNSString_withIOSClass_withEduStanfordNlpStatsCounter_(filename, c, counter);
  return counter;
}

EduStanfordNlpStatsIntCounter *EduStanfordNlpStatsCounters_loadIntCounterWithNSString_withIOSClass_(NSString *filename, IOSClass *c) {
  EduStanfordNlpStatsCounters_initialize();
  EduStanfordNlpStatsIntCounter *counter = new_EduStanfordNlpStatsIntCounter_init();
  EduStanfordNlpStatsCounters_loadIntoCounterWithNSString_withIOSClass_withEduStanfordNlpStatsCounter_(filename, c, counter);
  return counter;
}

void EduStanfordNlpStatsCounters_loadIntoCounterWithNSString_withIOSClass_withEduStanfordNlpStatsCounter_(NSString *filename, IOSClass *c, id<EduStanfordNlpStatsCounter> counter) {
  EduStanfordNlpStatsCounters_initialize();
  @try {
    JavaLangReflectConstructor *m = [((IOSClass *) nil_chk(c)) getConstructor:[IOSObjectArray newArrayWithObjects:(id[]){ NSString_class_() } count:1 type:IOSClass_class_()]];
    JavaIoBufferedReader *in = EduStanfordNlpIoIOUtils_getBufferedFileReaderWithNSString_(filename);
    for (NSString *line; (line = [((JavaIoBufferedReader *) nil_chk(in)) readLine]) != nil; ) {
      IOSObjectArray *tokens = [((NSString *) nil_chk([((NSString *) nil_chk(line)) trim])) split:@"\\s+"];
      if (((IOSObjectArray *) nil_chk(tokens))->size_ != 2) @throw new_JavaLangRuntimeException_init();
      jdouble value = JavaLangDouble_parseDoubleWithNSString_(IOSObjectArray_Get(tokens, 1));
      [((id<EduStanfordNlpStatsCounter>) nil_chk(counter)) setCountWithId:[((JavaLangReflectConstructor *) nil_chk(m)) newInstanceWithNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ IOSObjectArray_Get(tokens, 0) } count:1 type:NSObject_class_()]] withDouble:value];
    }
    [in close];
  }
  @catch (JavaLangException *e) {
    @throw new_JavaLangRuntimeException_initWithNSException_(e);
  }
}

void EduStanfordNlpStatsCounters_saveCounterWithEduStanfordNlpStatsCounter_withJavaIoOutputStream_(id<EduStanfordNlpStatsCounter> c, JavaIoOutputStream *stream) {
  EduStanfordNlpStatsCounters_initialize();
  JavaIoPrintStream *out = new_JavaIoPrintStream_initWithJavaIoOutputStream_(stream);
  for (id __strong key in nil_chk([((id<EduStanfordNlpStatsCounter>) nil_chk(c)) keySet])) {
    [out printlnWithNSString:JreStrcat("@CD", key, ' ', [c getCountWithId:key])];
  }
}

void EduStanfordNlpStatsCounters_saveCounterWithEduStanfordNlpStatsCounter_withNSString_(id<EduStanfordNlpStatsCounter> c, NSString *filename) {
  EduStanfordNlpStatsCounters_initialize();
  JavaIoFileOutputStream *fos = new_JavaIoFileOutputStream_initWithNSString_(filename);
  EduStanfordNlpStatsCounters_saveCounterWithEduStanfordNlpStatsCounter_withJavaIoOutputStream_(c, fos);
  [fos close];
}

EduStanfordNlpStatsTwoDimensionalCounter *EduStanfordNlpStatsCounters_load2DCounterWithNSString_withIOSClass_withIOSClass_(NSString *filename, IOSClass *t1, IOSClass *t2) {
  EduStanfordNlpStatsCounters_initialize();
  @try {
    EduStanfordNlpStatsTwoDimensionalCounter *tdc = new_EduStanfordNlpStatsTwoDimensionalCounter_init();
    EduStanfordNlpStatsCounters_loadInto2DCounterWithNSString_withIOSClass_withIOSClass_withEduStanfordNlpStatsTwoDimensionalCounter_(filename, t1, t2, tdc);
    return tdc;
  }
  @catch (JavaLangException *e) {
    @throw new_JavaLangRuntimeException_initWithNSException_(e);
  }
}

void EduStanfordNlpStatsCounters_loadInto2DCounterWithNSString_withIOSClass_withIOSClass_withEduStanfordNlpStatsTwoDimensionalCounter_(NSString *filename, IOSClass *t1, IOSClass *t2, EduStanfordNlpStatsTwoDimensionalCounter *tdc) {
  EduStanfordNlpStatsCounters_initialize();
  @try {
    JavaLangReflectConstructor *m1 = [((IOSClass *) nil_chk(t1)) getConstructor:[IOSObjectArray newArrayWithObjects:(id[]){ NSString_class_() } count:1 type:IOSClass_class_()]];
    JavaLangReflectConstructor *m2 = [((IOSClass *) nil_chk(t2)) getConstructor:[IOSObjectArray newArrayWithObjects:(id[]){ NSString_class_() } count:1 type:IOSClass_class_()]];
    JavaIoBufferedReader *in = EduStanfordNlpIoIOUtils_getBufferedFileReaderWithNSString_(filename);
    for (NSString *line; (line = [((JavaIoBufferedReader *) nil_chk(in)) readLine]) != nil; ) {
      IOSObjectArray *tuple = [((NSString *) nil_chk([((NSString *) nil_chk(line)) trim])) split:@"\t"];
      NSString *outer = IOSObjectArray_Get(nil_chk(tuple), 0);
      NSString *inner = IOSObjectArray_Get(tuple, 1);
      NSString *valStr = IOSObjectArray_Get(tuple, 2);
      [((EduStanfordNlpStatsTwoDimensionalCounter *) nil_chk(tdc)) setCountWithId:[((JavaLangReflectConstructor *) nil_chk(m1)) newInstanceWithNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ [((NSString *) nil_chk(outer)) trim] } count:1 type:NSObject_class_()]] withId:[((JavaLangReflectConstructor *) nil_chk(m2)) newInstanceWithNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ [((NSString *) nil_chk(inner)) trim] } count:1 type:NSObject_class_()]] withDouble:JavaLangDouble_parseDoubleWithNSString_([((NSString *) nil_chk(valStr)) trim])];
    }
    [in close];
  }
  @catch (JavaLangException *e) {
    @throw new_JavaLangRuntimeException_initWithNSException_(e);
  }
}

void EduStanfordNlpStatsCounters_loadIncInto2DCounterWithNSString_withIOSClass_withIOSClass_withEduStanfordNlpStatsTwoDimensionalCounterInterface_(NSString *filename, IOSClass *t1, IOSClass *t2, id<EduStanfordNlpStatsTwoDimensionalCounterInterface> tdc) {
  EduStanfordNlpStatsCounters_initialize();
  @try {
    JavaLangReflectConstructor *m1 = [((IOSClass *) nil_chk(t1)) getConstructor:[IOSObjectArray newArrayWithObjects:(id[]){ NSString_class_() } count:1 type:IOSClass_class_()]];
    JavaLangReflectConstructor *m2 = [((IOSClass *) nil_chk(t2)) getConstructor:[IOSObjectArray newArrayWithObjects:(id[]){ NSString_class_() } count:1 type:IOSClass_class_()]];
    JavaIoBufferedReader *in = EduStanfordNlpIoIOUtils_getBufferedFileReaderWithNSString_(filename);
    for (NSString *line; (line = [((JavaIoBufferedReader *) nil_chk(in)) readLine]) != nil; ) {
      IOSObjectArray *tuple = [((NSString *) nil_chk([((NSString *) nil_chk(line)) trim])) split:@"\t"];
      NSString *outer = IOSObjectArray_Get(nil_chk(tuple), 0);
      NSString *inner = IOSObjectArray_Get(tuple, 1);
      NSString *valStr = IOSObjectArray_Get(tuple, 2);
      [((id<EduStanfordNlpStatsTwoDimensionalCounterInterface>) nil_chk(tdc)) incrementCountWithId:[((JavaLangReflectConstructor *) nil_chk(m1)) newInstanceWithNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ [((NSString *) nil_chk(outer)) trim] } count:1 type:NSObject_class_()]] withId:[((JavaLangReflectConstructor *) nil_chk(m2)) newInstanceWithNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ [((NSString *) nil_chk(inner)) trim] } count:1 type:NSObject_class_()]] withDouble:JavaLangDouble_parseDoubleWithNSString_([((NSString *) nil_chk(valStr)) trim])];
    }
    [in close];
  }
  @catch (JavaLangException *e) {
    @throw new_JavaLangRuntimeException_initWithNSException_(e);
  }
}

void EduStanfordNlpStatsCounters_save2DCounterWithEduStanfordNlpStatsTwoDimensionalCounter_withNSString_(EduStanfordNlpStatsTwoDimensionalCounter *tdc, NSString *filename) {
  EduStanfordNlpStatsCounters_initialize();
  JavaIoPrintWriter *out = new_JavaIoPrintWriter_initWithJavaIoWriter_(new_JavaIoFileWriter_initWithNSString_(filename));
  for (id __strong outer in nil_chk([((EduStanfordNlpStatsTwoDimensionalCounter *) nil_chk(tdc)) firstKeySet])) {
    for (id __strong inner in nil_chk([tdc secondKeySet])) {
      [out printlnWithNSString:JreStrcat("@C@CD", outer, 0x0009, inner, 0x0009, [tdc getCountWithId:outer withId:inner])];
    }
  }
  [out close];
}

void EduStanfordNlpStatsCounters_save2DCounterSortedWithEduStanfordNlpStatsTwoDimensionalCounterInterface_withNSString_(id<EduStanfordNlpStatsTwoDimensionalCounterInterface> tdc, NSString *filename) {
  EduStanfordNlpStatsCounters_initialize();
  JavaIoPrintWriter *out = new_JavaIoPrintWriter_initWithJavaIoWriter_(new_JavaIoFileWriter_initWithNSString_(filename));
  for (id __strong outer in nil_chk([((id<EduStanfordNlpStatsTwoDimensionalCounterInterface>) nil_chk(tdc)) firstKeySet])) {
    id<EduStanfordNlpStatsCounter> c = [tdc getCounterWithId:outer];
    id<JavaUtilList> keys = EduStanfordNlpStatsCounters_toSortedListWithEduStanfordNlpStatsCounter_(c);
    for (id __strong inner in nil_chk(keys)) {
      [out printlnWithNSString:JreStrcat("@C@CD", outer, 0x0009, inner, 0x0009, [((id<EduStanfordNlpStatsCounter>) nil_chk(c)) getCountWithId:inner])];
    }
  }
  [out close];
}

void EduStanfordNlpStatsCounters_serializeCounterWithEduStanfordNlpStatsCounter_withNSString_(id<EduStanfordNlpStatsCounter> c, NSString *filename) {
  EduStanfordNlpStatsCounters_initialize();
  JavaIoObjectOutputStream *out = new_JavaIoObjectOutputStream_initWithJavaIoOutputStream_(new_JavaIoBufferedOutputStream_initWithJavaIoOutputStream_(new_JavaIoFileOutputStream_initWithNSString_(filename)));
  [out writeObjectWithId:c];
  [out close];
}

EduStanfordNlpStatsClassicCounter *EduStanfordNlpStatsCounters_deserializeCounterWithNSString_(NSString *filename) {
  EduStanfordNlpStatsCounters_initialize();
  JavaIoObjectInputStream *in = new_JavaIoObjectInputStream_initWithJavaIoInputStream_(new_JavaIoBufferedInputStream_initWithJavaIoInputStream_(new_JavaIoFileInputStream_initWithNSString_(filename)));
  EduStanfordNlpStatsClassicCounter *c = EduStanfordNlpUtilErasureUtils_uncheckedCastWithId_([in readObject]);
  [in close];
  return c;
}

NSString *EduStanfordNlpStatsCounters_toSortedStringWithEduStanfordNlpStatsCounter_withInt_withNSString_withNSString_withNSString_(id<EduStanfordNlpStatsCounter> counter, jint k, NSString *itemFormat, NSString *joiner, NSString *wrapperFormat) {
  EduStanfordNlpStatsCounters_initialize();
  id<EduStanfordNlpUtilPriorityQueue> queue = EduStanfordNlpStatsCounters_toPriorityQueueWithEduStanfordNlpStatsCounter_(counter);
  id<JavaUtilList> strings = new_JavaUtilArrayList_init();
  for (jint rank = 0; rank < k && ![((id<EduStanfordNlpUtilPriorityQueue>) nil_chk(queue)) isEmpty]; ++rank) {
    id key = [((id<EduStanfordNlpUtilPriorityQueue>) nil_chk(queue)) removeFirst];
    jdouble value = [((id<EduStanfordNlpStatsCounter>) nil_chk(counter)) getCountWithId:key];
    [strings addWithId:NSString_formatWithNSString_withNSObjectArray_(itemFormat, [IOSObjectArray newArrayWithObjects:(id[]){ key, JavaLangDouble_valueOfWithDouble_(value) } count:2 type:NSObject_class_()])];
  }
  return NSString_formatWithNSString_withNSObjectArray_(wrapperFormat, [IOSObjectArray newArrayWithObjects:(id[]){ EduStanfordNlpUtilStringUtils_joinWithJavaLangIterable_withNSString_(strings, joiner) } count:1 type:NSObject_class_()]);
}

NSString *EduStanfordNlpStatsCounters_toSortedStringWithEduStanfordNlpStatsCounter_withInt_withNSString_withNSString_(id<EduStanfordNlpStatsCounter> counter, jint k, NSString *itemFormat, NSString *joiner) {
  EduStanfordNlpStatsCounters_initialize();
  return EduStanfordNlpStatsCounters_toSortedStringWithEduStanfordNlpStatsCounter_withInt_withNSString_withNSString_withNSString_(counter, k, itemFormat, joiner, @"%s");
}

NSString *EduStanfordNlpStatsCounters_toSortedByKeysStringWithEduStanfordNlpStatsCounter_withNSString_withNSString_withNSString_(id<EduStanfordNlpStatsCounter> counter, NSString *itemFormat, NSString *joiner, NSString *wrapperFormat) {
  EduStanfordNlpStatsCounters_initialize();
  id<JavaUtilList> strings = new_JavaUtilArrayList_init();
  for (id<JavaLangComparable> __strong key in nil_chk(EduStanfordNlpUtilCollectionUtils_sortedWithJavaLangIterable_([((id<EduStanfordNlpStatsCounter>) nil_chk(counter)) keySet]))) {
    [strings addWithId:NSString_formatWithNSString_withNSObjectArray_(itemFormat, [IOSObjectArray newArrayWithObjects:(id[]){ key, JavaLangDouble_valueOfWithDouble_([counter getCountWithId:key]) } count:2 type:NSObject_class_()])];
  }
  return NSString_formatWithNSString_withNSObjectArray_(wrapperFormat, [IOSObjectArray newArrayWithObjects:(id[]){ EduStanfordNlpUtilStringUtils_joinWithJavaLangIterable_withNSString_(strings, joiner) } count:1 type:NSObject_class_()]);
}

NSString *EduStanfordNlpStatsCounters_toStringWithEduStanfordNlpStatsCounter_withInt_(id<EduStanfordNlpStatsCounter> counter, jint maxKeysToPrint) {
  EduStanfordNlpStatsCounters_initialize();
  return [((id<EduStanfordNlpUtilPriorityQueue>) nil_chk(EduStanfordNlpStatsCounters_toPriorityQueueWithEduStanfordNlpStatsCounter_(counter))) toStringWithInt:maxKeysToPrint];
}

NSString *EduStanfordNlpStatsCounters_toStringWithEduStanfordNlpStatsCounter_withJavaTextNumberFormat_(id<EduStanfordNlpStatsCounter> counter, JavaTextNumberFormat *nf) {
  EduStanfordNlpStatsCounters_initialize();
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  (void) [sb appendWithChar:'{'];
  id<JavaUtilList> list = EduStanfordNlpUtilErasureUtils_sortedIfPossibleWithJavaUtilCollection_([((id<EduStanfordNlpStatsCounter>) nil_chk(counter)) keySet]);
  for (id<JavaUtilIterator> iter = [((id<JavaUtilList>) nil_chk(list)) iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) {
    id key = [iter next];
    (void) [sb appendWithId:key];
    (void) [sb appendWithChar:'='];
    (void) [sb appendWithNSString:[((JavaTextNumberFormat *) nil_chk(nf)) formatWithDouble:[counter getCountWithId:key]]];
    if ([iter hasNext]) {
      (void) [sb appendWithNSString:@", "];
    }
  }
  (void) [sb appendWithChar:'}'];
  return [sb description];
}

NSString *EduStanfordNlpStatsCounters_toStringWithEduStanfordNlpStatsCounter_withJavaTextNumberFormat_withNSString_withNSString_withNSString_withNSString_(id<EduStanfordNlpStatsCounter> counter, JavaTextNumberFormat *nf, NSString *preAppend, NSString *postAppend, NSString *keyValSeparator, NSString *itemSeparator) {
  EduStanfordNlpStatsCounters_initialize();
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  (void) [sb appendWithNSString:preAppend];
  for (id<JavaUtilIterator> iter = [((id<JavaUtilSet>) nil_chk([((id<EduStanfordNlpStatsCounter>) nil_chk(counter)) keySet])) iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) {
    id key = [iter next];
    jdouble d = [counter getCountWithId:key];
    (void) [sb appendWithId:key];
    (void) [sb appendWithNSString:keyValSeparator];
    (void) [sb appendWithNSString:[((JavaTextNumberFormat *) nil_chk(nf)) formatWithDouble:d]];
    if ([iter hasNext]) {
      (void) [sb appendWithNSString:itemSeparator];
    }
  }
  (void) [sb appendWithNSString:postAppend];
  return [sb description];
}

NSString *EduStanfordNlpStatsCounters_toBiggestValuesFirstStringWithEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> c) {
  EduStanfordNlpStatsCounters_initialize();
  return [((id<EduStanfordNlpUtilPriorityQueue>) nil_chk(EduStanfordNlpStatsCounters_toPriorityQueueWithEduStanfordNlpStatsCounter_(c))) description];
}

NSString *EduStanfordNlpStatsCounters_toBiggestValuesFirstStringWithEduStanfordNlpStatsCounter_withInt_(id<EduStanfordNlpStatsCounter> c, jint k) {
  EduStanfordNlpStatsCounters_initialize();
  id<EduStanfordNlpUtilPriorityQueue> pq = EduStanfordNlpStatsCounters_toPriorityQueueWithEduStanfordNlpStatsCounter_(c);
  id<EduStanfordNlpUtilPriorityQueue> largestK = new_EduStanfordNlpUtilBinaryHeapPriorityQueue_init();
  while ([largestK size] < k && ![((id<EduStanfordNlpUtilPriorityQueue>) nil_chk(pq)) isEmpty]) {
    jdouble firstScore = [((id<EduStanfordNlpUtilPriorityQueue>) nil_chk(pq)) getPriorityWithId:[pq getFirst]];
    id first = [pq removeFirst];
    [largestK changePriorityWithId:first withDouble:firstScore];
  }
  return [largestK description];
}

NSString *EduStanfordNlpStatsCounters_toBiggestValuesFirstStringWithEduStanfordNlpStatsCounter_withInt_withEduStanfordNlpUtilIndex_(id<EduStanfordNlpStatsCounter> c, jint k, id<EduStanfordNlpUtilIndex> index) {
  EduStanfordNlpStatsCounters_initialize();
  id<EduStanfordNlpUtilPriorityQueue> pq = EduStanfordNlpStatsCounters_toPriorityQueueWithEduStanfordNlpStatsCounter_(c);
  id<EduStanfordNlpUtilPriorityQueue> largestK = new_EduStanfordNlpUtilBinaryHeapPriorityQueue_init();
  while ([largestK size] < k && ![((id<EduStanfordNlpUtilPriorityQueue>) nil_chk(pq)) isEmpty]) {
    jdouble firstScore = [((id<EduStanfordNlpUtilPriorityQueue>) nil_chk(pq)) getPriorityWithId:[pq getFirst]];
    jint first = [((JavaLangInteger *) nil_chk([pq removeFirst])) intValue];
    [largestK changePriorityWithId:[((id<EduStanfordNlpUtilIndex>) nil_chk(index)) getWithInt:first] withDouble:firstScore];
  }
  return [largestK description];
}

NSString *EduStanfordNlpStatsCounters_toVerticalStringWithEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> c) {
  EduStanfordNlpStatsCounters_initialize();
  return EduStanfordNlpStatsCounters_toVerticalStringWithEduStanfordNlpStatsCounter_withInt_(c, JavaLangInteger_MAX_VALUE);
}

NSString *EduStanfordNlpStatsCounters_toVerticalStringWithEduStanfordNlpStatsCounter_withInt_(id<EduStanfordNlpStatsCounter> c, jint k) {
  EduStanfordNlpStatsCounters_initialize();
  return EduStanfordNlpStatsCounters_toVerticalStringWithEduStanfordNlpStatsCounter_withInt_withNSString_withBoolean_(c, k, @"%g\t%s", false);
}

NSString *EduStanfordNlpStatsCounters_toVerticalStringWithEduStanfordNlpStatsCounter_withNSString_(id<EduStanfordNlpStatsCounter> c, NSString *fmt) {
  EduStanfordNlpStatsCounters_initialize();
  return EduStanfordNlpStatsCounters_toVerticalStringWithEduStanfordNlpStatsCounter_withInt_withNSString_withBoolean_(c, JavaLangInteger_MAX_VALUE, fmt, false);
}

NSString *EduStanfordNlpStatsCounters_toVerticalStringWithEduStanfordNlpStatsCounter_withInt_withNSString_(id<EduStanfordNlpStatsCounter> c, jint k, NSString *fmt) {
  EduStanfordNlpStatsCounters_initialize();
  return EduStanfordNlpStatsCounters_toVerticalStringWithEduStanfordNlpStatsCounter_withInt_withNSString_withBoolean_(c, k, fmt, false);
}

NSString *EduStanfordNlpStatsCounters_toVerticalStringWithEduStanfordNlpStatsCounter_withInt_withNSString_withBoolean_(id<EduStanfordNlpStatsCounter> c, jint k, NSString *fmt, jboolean swap) {
  EduStanfordNlpStatsCounters_initialize();
  id<EduStanfordNlpUtilPriorityQueue> q = EduStanfordNlpStatsCounters_toPriorityQueueWithEduStanfordNlpStatsCounter_(c);
  id<JavaUtilList> sortedKeys = [((id<EduStanfordNlpUtilPriorityQueue>) nil_chk(q)) toSortedList];
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  jint i = 0;
  for (id<JavaUtilIterator> keyI = [((id<JavaUtilList>) nil_chk(sortedKeys)) iterator]; [((id<JavaUtilIterator>) nil_chk(keyI)) hasNext] && i < k; i++) {
    id key = [keyI next];
    jdouble val = [q getPriorityWithId:key];
    if (swap) {
      (void) [sb appendWithNSString:NSString_formatWithNSString_withNSObjectArray_(fmt, [IOSObjectArray newArrayWithObjects:(id[]){ key, JavaLangDouble_valueOfWithDouble_(val) } count:2 type:NSObject_class_()])];
    }
    else {
      (void) [sb appendWithNSString:NSString_formatWithNSString_withNSObjectArray_(fmt, [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_(val), key } count:2 type:NSObject_class_()])];
    }
    if ([keyI hasNext]) {
      (void) [sb appendWithChar:0x000a];
    }
  }
  return [sb description];
}

id EduStanfordNlpStatsCounters_restrictedArgMaxWithEduStanfordNlpStatsCounter_withJavaUtilCollection_(id<EduStanfordNlpStatsCounter> c, id<JavaUtilCollection> restriction) {
  EduStanfordNlpStatsCounters_initialize();
  id maxKey = nil;
  jdouble max = JavaLangDouble_NEGATIVE_INFINITY;
  for (id __strong key in nil_chk(restriction)) {
    jdouble count = [((id<EduStanfordNlpStatsCounter>) nil_chk(c)) getCountWithId:key];
    if (count > max) {
      max = count;
      maxKey = key;
    }
  }
  return maxKey;
}

id<EduStanfordNlpStatsCounter> EduStanfordNlpStatsCounters_toCounterWithDoubleArray_withEduStanfordNlpUtilIndex_(IOSDoubleArray *counts, id<EduStanfordNlpUtilIndex> index) {
  EduStanfordNlpStatsCounters_initialize();
  if ([((id<EduStanfordNlpUtilIndex>) nil_chk(index)) size] < ((IOSDoubleArray *) nil_chk(counts))->size_) @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Index not large enough to name all the array elements!");
  id<EduStanfordNlpStatsCounter> c = new_EduStanfordNlpStatsClassicCounter_init();
  for (jint i = 0; i < counts->size_; i++) {
    if (IOSDoubleArray_Get(counts, i) != 0.0) [c setCountWithId:[index getWithInt:i] withDouble:IOSDoubleArray_Get(counts, i)];
  }
  return c;
}

id<EduStanfordNlpStatsCounter> EduStanfordNlpStatsCounters_toCounterWithJavaUtilMap_withEduStanfordNlpUtilIndex_(id<JavaUtilMap> counts, id<EduStanfordNlpUtilIndex> index) {
  EduStanfordNlpStatsCounters_initialize();
  id<EduStanfordNlpStatsCounter> counter = new_EduStanfordNlpStatsClassicCounter_init();
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((id<JavaUtilMap>) nil_chk(counts)) entrySet])) {
    [counter setCountWithId:[((id<EduStanfordNlpUtilIndex>) nil_chk(index)) getWithInt:[((JavaLangInteger *) nil_chk([((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey])) intValue]] withDouble:[((NSNumber *) nil_chk([entry_ getValue])) doubleValue]];
  }
  return counter;
}

IOSDoubleArray *EduStanfordNlpStatsCounters_asArrayWithEduStanfordNlpStatsCounter_withEduStanfordNlpUtilIndex_(id<EduStanfordNlpStatsCounter> counter, id<EduStanfordNlpUtilIndex> index) {
  EduStanfordNlpStatsCounters_initialize();
  return EduStanfordNlpStatsCounters_asArrayWithEduStanfordNlpStatsCounter_withEduStanfordNlpUtilIndex_withInt_(counter, index, [((id<EduStanfordNlpUtilIndex>) nil_chk(index)) size]);
}

IOSDoubleArray *EduStanfordNlpStatsCounters_asArrayWithEduStanfordNlpStatsCounter_withEduStanfordNlpUtilIndex_withInt_(id<EduStanfordNlpStatsCounter> counter, id<EduStanfordNlpUtilIndex> index, jint dimension) {
  EduStanfordNlpStatsCounters_initialize();
  if ([((id<EduStanfordNlpUtilIndex>) nil_chk(index)) size] == 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Empty index");
  }
  id<JavaUtilSet> keys = [((id<EduStanfordNlpStatsCounter>) nil_chk(counter)) keySet];
  IOSDoubleArray *array = [IOSDoubleArray newArrayWithLength:dimension];
  for (id __strong key in nil_chk(keys)) {
    jint i = [index indexOfWithId:key];
    if (i >= 0) {
      *IOSDoubleArray_GetRef(array, i) = [counter getCountWithId:key];
    }
  }
  return array;
}

IOSDoubleArray *EduStanfordNlpStatsCounters_asArrayWithEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> counter) {
  EduStanfordNlpStatsCounters_initialize();
  id<JavaUtilSet> keys = [((id<EduStanfordNlpStatsCounter>) nil_chk(counter)) keySet];
  IOSDoubleArray *array = [IOSDoubleArray newArrayWithLength:[counter size]];
  jint i = 0;
  for (id __strong key in nil_chk(keys)) {
    *IOSDoubleArray_GetRef(array, i) = [counter getCountWithId:key];
    i++;
  }
  return array;
}

EduStanfordNlpStatsTwoDimensionalCounter *EduStanfordNlpStatsCounters_scale__WithEduStanfordNlpStatsTwoDimensionalCounter_withDouble_(EduStanfordNlpStatsTwoDimensionalCounter *c, jdouble d) {
  EduStanfordNlpStatsCounters_initialize();
  EduStanfordNlpStatsTwoDimensionalCounter *result = new_EduStanfordNlpStatsTwoDimensionalCounter_initWithEduStanfordNlpUtilMapFactory_withEduStanfordNlpUtilMapFactory_([((EduStanfordNlpStatsTwoDimensionalCounter *) nil_chk(c)) getOuterMapFactory], [c getInnerMapFactory]);
  for (id __strong key in nil_chk([c firstKeySet])) {
    EduStanfordNlpStatsClassicCounter *ctr = [c getCounterWithId:key];
    (void) [result setCounterWithId:key withEduStanfordNlpStatsCounter:((EduStanfordNlpStatsClassicCounter *) EduStanfordNlpStatsCounters_scale__WithEduStanfordNlpStatsCounter_withDouble_(ctr, d))];
  }
  return result;
}

id EduStanfordNlpStatsCounters_sampleWithEduStanfordNlpStatsCounter_withJavaUtilRandom_(id<EduStanfordNlpStatsCounter> c, JavaUtilRandom *rand) {
  EduStanfordNlpStatsCounters_initialize();
  if (rand == nil) rand = EduStanfordNlpStatsCounters_RAND;
  jdouble r = [((JavaUtilRandom *) nil_chk(rand)) nextDouble] * [((id<EduStanfordNlpStatsCounter>) nil_chk(c)) totalCount];
  jdouble total = 0.0;
  for (id __strong t in nil_chk([c keySet])) {
    JrePlusAssignDoubleD(&total, [c getCountWithId:t]);
    if (total >= r) return t;
  }
  return [((id<JavaUtilIterator>) nil_chk([((id<JavaUtilSet>) nil_chk([c keySet])) iterator])) next];
}

id EduStanfordNlpStatsCounters_sampleWithEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> c) {
  EduStanfordNlpStatsCounters_initialize();
  return EduStanfordNlpStatsCounters_sampleWithEduStanfordNlpStatsCounter_withJavaUtilRandom_(c, nil);
}

id<EduStanfordNlpStatsCounter> EduStanfordNlpStatsCounters_powNormalizedWithEduStanfordNlpStatsCounter_withDouble_(id<EduStanfordNlpStatsCounter> c, jdouble temp) {
  EduStanfordNlpStatsCounters_initialize();
  id<EduStanfordNlpStatsCounter> d = [((id<EduStanfordNlpUtilFactory>) nil_chk([((id<EduStanfordNlpStatsCounter>) nil_chk(c)) getFactory])) create];
  jdouble total = [c totalCount];
  for (id __strong e in nil_chk([c keySet])) {
    [((id<EduStanfordNlpStatsCounter>) nil_chk(d)) setCountWithId:e withDouble:JavaLangMath_powWithDouble_withDouble_([c getCountWithId:e] / total, temp)];
  }
  return d;
}

id<EduStanfordNlpStatsCounter> EduStanfordNlpStatsCounters_powWithEduStanfordNlpStatsCounter_withDouble_(id<EduStanfordNlpStatsCounter> c, jdouble temp) {
  EduStanfordNlpStatsCounters_initialize();
  id<EduStanfordNlpStatsCounter> d = [((id<EduStanfordNlpUtilFactory>) nil_chk([((id<EduStanfordNlpStatsCounter>) nil_chk(c)) getFactory])) create];
  for (id __strong t in nil_chk([c keySet])) {
    [((id<EduStanfordNlpStatsCounter>) nil_chk(d)) setCountWithId:t withDouble:JavaLangMath_powWithDouble_withDouble_([c getCountWithId:t], temp)];
  }
  return d;
}

void EduStanfordNlpStatsCounters_powInPlaceWithEduStanfordNlpStatsCounter_withDouble_(id<EduStanfordNlpStatsCounter> c, jdouble temp) {
  EduStanfordNlpStatsCounters_initialize();
  for (id __strong t in nil_chk([((id<EduStanfordNlpStatsCounter>) nil_chk(c)) keySet])) {
    [c setCountWithId:t withDouble:JavaLangMath_powWithDouble_withDouble_([c getCountWithId:t], temp)];
  }
}

id<EduStanfordNlpStatsCounter> EduStanfordNlpStatsCounters_expWithEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> c) {
  EduStanfordNlpStatsCounters_initialize();
  id<EduStanfordNlpStatsCounter> d = [((id<EduStanfordNlpUtilFactory>) nil_chk([((id<EduStanfordNlpStatsCounter>) nil_chk(c)) getFactory])) create];
  for (id __strong t in nil_chk([c keySet])) {
    [((id<EduStanfordNlpStatsCounter>) nil_chk(d)) setCountWithId:t withDouble:JavaLangMath_expWithDouble_([c getCountWithId:t])];
  }
  return d;
}

void EduStanfordNlpStatsCounters_expInPlaceWithEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> c) {
  EduStanfordNlpStatsCounters_initialize();
  for (id __strong t in nil_chk([((id<EduStanfordNlpStatsCounter>) nil_chk(c)) keySet])) {
    [c setCountWithId:t withDouble:JavaLangMath_expWithDouble_([c getCountWithId:t])];
  }
}

id<EduStanfordNlpStatsCounter> EduStanfordNlpStatsCounters_diffWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> goldFeatures, id<EduStanfordNlpStatsCounter> guessedFeatures) {
  EduStanfordNlpStatsCounters_initialize();
  id<EduStanfordNlpStatsCounter> result = [((id<EduStanfordNlpUtilFactory>) nil_chk([((id<EduStanfordNlpStatsCounter>) nil_chk(goldFeatures)) getFactory])) create];
  for (id __strong key in nil_chk(EduStanfordNlpUtilSets_union__WithJavaUtilSet_withJavaUtilSet_([goldFeatures keySet], [((id<EduStanfordNlpStatsCounter>) nil_chk(guessedFeatures)) keySet]))) {
    [((id<EduStanfordNlpStatsCounter>) nil_chk(result)) setCountWithId:key withDouble:[goldFeatures getCountWithId:key] - [guessedFeatures getCountWithId:key]];
  }
  (void) EduStanfordNlpStatsCounters_retainNonZerosWithEduStanfordNlpStatsCounter_(result);
  return result;
}

jboolean EduStanfordNlpStatsCounters_equalsWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> o1, id<EduStanfordNlpStatsCounter> o2) {
  EduStanfordNlpStatsCounters_initialize();
  return EduStanfordNlpStatsCounters_equalsWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_withDouble_(o1, o2, 0.0);
}

jboolean EduStanfordNlpStatsCounters_equalsWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_withDouble_(id<EduStanfordNlpStatsCounter> o1, id<EduStanfordNlpStatsCounter> o2, jdouble tolerance) {
  EduStanfordNlpStatsCounters_initialize();
  if (o1 == o2) {
    return true;
  }
  if (JavaLangMath_absWithDouble_([((id<EduStanfordNlpStatsCounter>) nil_chk(o1)) totalCount] - [((id<EduStanfordNlpStatsCounter>) nil_chk(o2)) totalCount]) > tolerance) {
    return false;
  }
  if (![((id<JavaUtilSet>) nil_chk([o1 keySet])) isEqual:[o2 keySet]]) {
    return false;
  }
  for (id __strong key in nil_chk([o1 keySet])) {
    if (JavaLangMath_absWithDouble_([o1 getCountWithId:key] - [o2 getCountWithId:key]) > tolerance) {
      return false;
    }
  }
  return true;
}

id<EduStanfordNlpStatsCounter> EduStanfordNlpStatsCounters_unmodifiableCounterWithEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> counter) {
  EduStanfordNlpStatsCounters_initialize();
  return new_EduStanfordNlpStatsCounters_$1_initWithEduStanfordNlpStatsCounter_(counter);
}

id<EduStanfordNlpStatsCounter> EduStanfordNlpStatsCounters_asCounterWithEduStanfordNlpUtilFixedPrioritiesPriorityQueue_(EduStanfordNlpUtilFixedPrioritiesPriorityQueue *p) {
  EduStanfordNlpStatsCounters_initialize();
  EduStanfordNlpUtilFixedPrioritiesPriorityQueue *pq = [((EduStanfordNlpUtilFixedPrioritiesPriorityQueue *) nil_chk(p)) clone];
  EduStanfordNlpStatsClassicCounter *counter = new_EduStanfordNlpStatsClassicCounter_init();
  while ([((EduStanfordNlpUtilFixedPrioritiesPriorityQueue *) nil_chk(pq)) hasNext]) {
    jdouble priority = [pq getPriority];
    id element = [pq next];
    [counter incrementCountWithId:element withDouble:priority];
  }
  return counter;
}

id<EduStanfordNlpStatsCounter> EduStanfordNlpStatsCounters_fromMapWithJavaUtilMap_(id<JavaUtilMap> map) {
  EduStanfordNlpStatsCounters_initialize();
  if ([((id<JavaUtilMap>) nil_chk(map)) isEmpty]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Map must have at least one element to infer numeric type; add an element first or use e.g. fromMap(map, Integer.class)");
  }
  return EduStanfordNlpStatsCounters_fromMapWithJavaUtilMap_withIOSClass_(map, [((NSNumber *) nil_chk([((id<JavaUtilIterator>) nil_chk([((id<JavaUtilCollection>) nil_chk([map values])) iterator])) next])) getClass]);
}

id<EduStanfordNlpStatsCounter> EduStanfordNlpStatsCounters_fromMapWithJavaUtilMap_withIOSClass_(id<JavaUtilMap> map, IOSClass *type) {
  EduStanfordNlpStatsCounters_initialize();
  jdouble initialTotal = 0.0;
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((id<JavaUtilMap>) nil_chk(map)) entrySet])) {
    JrePlusAssignDoubleD(&initialTotal, [((NSNumber *) nil_chk([((id<JavaUtilMap_Entry>) nil_chk(entry_)) getValue])) doubleValue]);
  }
  jdouble initialTotalFinal = initialTotal;
  return new_EduStanfordNlpStatsCounters_$2_initWithDouble_withJavaUtilMap_withIOSClass_(initialTotalFinal, map, type);
}

id<JavaUtilMap> EduStanfordNlpStatsCounters_asMapWithEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> counter) {
  EduStanfordNlpStatsCounters_initialize();
  return new_EduStanfordNlpStatsCounters_$3_initWithEduStanfordNlpStatsCounter_(counter);
}

jboolean EduStanfordNlpStatsCounters_isUniformDistributionWithEduStanfordNlpStatsCounter_withDouble_(id<EduStanfordNlpStatsCounter> distribution, jdouble tolerance) {
  EduStanfordNlpStatsCounters_initialize();
  jdouble value = JavaLangDouble_NaN;
  jdouble totalCount = 0.0;
  for (JavaLangDouble *boxed__ in nil_chk([((id<EduStanfordNlpStatsCounter>) nil_chk(distribution)) values])) {
    jdouble val = [((JavaLangDouble *) nil_chk(boxed__)) doubleValue];
    if (JavaLangDouble_isNaNWithDouble_(value)) {
      value = val;
    }
    if (JavaLangMath_absWithDouble_(val - value) > tolerance) {
      return false;
    }
    JrePlusAssignDoubleD(&totalCount, val);
  }
  return JavaLangMath_absWithDouble_(totalCount - 1.0) < tolerance;
}

id<EduStanfordNlpStatsCounter> EduStanfordNlpStatsCounters_getCopyWithEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> originalCounter) {
  EduStanfordNlpStatsCounters_initialize();
  id<EduStanfordNlpStatsCounter> copyCounter = new_EduStanfordNlpStatsClassicCounter_init();
  [copyCounter addAllWithEduStanfordNlpStatsCounter:originalCounter];
  return copyCounter;
}

void EduStanfordNlpStatsCounters_maxInPlaceWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> target, id<EduStanfordNlpStatsCounter> other) {
  EduStanfordNlpStatsCounters_initialize();
  for (id __strong e in nil_chk(EduStanfordNlpUtilCollectionUtils_union__WithJavaUtilCollection_withJavaUtilCollection_([((id<EduStanfordNlpStatsCounter>) nil_chk(other)) keySet], [((id<EduStanfordNlpStatsCounter>) nil_chk(target)) keySet]))) {
    [target setCountWithId:e withDouble:JavaLangMath_maxWithDouble_withDouble_([target getCountWithId:e], [other getCountWithId:e])];
  }
}

void EduStanfordNlpStatsCounters_minInPlaceWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> target, id<EduStanfordNlpStatsCounter> other) {
  EduStanfordNlpStatsCounters_initialize();
  for (id __strong e in nil_chk(EduStanfordNlpUtilCollectionUtils_union__WithJavaUtilCollection_withJavaUtilCollection_([((id<EduStanfordNlpStatsCounter>) nil_chk(other)) keySet], [((id<EduStanfordNlpStatsCounter>) nil_chk(target)) keySet]))) {
    [target setCountWithId:e withDouble:JavaLangMath_minWithDouble_withDouble_([target getCountWithId:e], [other getCountWithId:e])];
  }
}

void EduStanfordNlpStatsCounters_retainTopMassWithEduStanfordNlpStatsCounter_withDouble_(id<EduStanfordNlpStatsCounter> counter, jdouble thresholdCount) {
  EduStanfordNlpStatsCounters_initialize();
  id<EduStanfordNlpUtilPriorityQueue> queue = EduStanfordNlpStatsCounters_toPriorityQueueWithEduStanfordNlpStatsCounter_(counter);
  [((id<EduStanfordNlpStatsCounter>) nil_chk(counter)) clear];
  jdouble mass = 0;
  while (mass < thresholdCount && ![((id<EduStanfordNlpUtilPriorityQueue>) nil_chk(queue)) isEmpty]) {
    jdouble value = [((id<EduStanfordNlpUtilPriorityQueue>) nil_chk(queue)) getPriority];
    id key = [queue removeFirst];
    [counter setCountWithId:key withDouble:value];
    JrePlusAssignDoubleD(&mass, value);
  }
}

void EduStanfordNlpStatsCounters_divideInPlaceWithEduStanfordNlpStatsTwoDimensionalCounter_withDouble_(EduStanfordNlpStatsTwoDimensionalCounter *counter, jdouble divisor) {
  EduStanfordNlpStatsCounters_initialize();
  for (id<JavaUtilMap_Entry> __strong c in nil_chk([((EduStanfordNlpStatsTwoDimensionalCounter *) nil_chk(counter)) entrySet])) {
    (void) EduStanfordNlpStatsCounters_divideInPlaceWithEduStanfordNlpStatsCounter_withDouble_([((id<JavaUtilMap_Entry>) nil_chk(c)) getValue], divisor);
  }
  [counter recomputeTotal];
}

jdouble EduStanfordNlpStatsCounters_pearsonsCorrelationCoefficientWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> x, id<EduStanfordNlpStatsCounter> y) {
  EduStanfordNlpStatsCounters_initialize();
  jdouble stddevX = EduStanfordNlpStatsCounters_standardDeviationWithEduStanfordNlpStatsCounter_(x);
  jdouble stddevY = EduStanfordNlpStatsCounters_standardDeviationWithEduStanfordNlpStatsCounter_(y);
  jdouble meanX = EduStanfordNlpStatsCounters_meanWithEduStanfordNlpStatsCounter_(x);
  jdouble meanY = EduStanfordNlpStatsCounters_meanWithEduStanfordNlpStatsCounter_(y);
  id<EduStanfordNlpStatsCounter> t1 = EduStanfordNlpStatsCounters_addWithEduStanfordNlpStatsCounter_withDouble_(x, -meanX);
  id<EduStanfordNlpStatsCounter> t2 = EduStanfordNlpStatsCounters_addWithEduStanfordNlpStatsCounter_withDouble_(y, -meanY);
  (void) EduStanfordNlpStatsCounters_divideInPlaceWithEduStanfordNlpStatsCounter_withDouble_(t1, stddevX);
  (void) EduStanfordNlpStatsCounters_divideInPlaceWithEduStanfordNlpStatsCounter_withDouble_(t2, stddevY);
  return EduStanfordNlpStatsCounters_dotProductWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_(t1, t2) / (jdouble) ([((id<EduStanfordNlpStatsCounter>) nil_chk(x)) size] - 1);
}

jdouble EduStanfordNlpStatsCounters_spearmanRankCorrelationWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> x, id<EduStanfordNlpStatsCounter> y) {
  EduStanfordNlpStatsCounters_initialize();
  id<EduStanfordNlpStatsCounter> xrank = EduStanfordNlpStatsCounters_toTiedRankCounterWithEduStanfordNlpStatsCounter_(x);
  id<EduStanfordNlpStatsCounter> yrank = EduStanfordNlpStatsCounters_toTiedRankCounterWithEduStanfordNlpStatsCounter_(y);
  return EduStanfordNlpStatsCounters_pearsonsCorrelationCoefficientWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_(xrank, yrank);
}

void EduStanfordNlpStatsCounters_ensureKeysWithEduStanfordNlpStatsCounter_withJavaUtilCollection_withDouble_(id<EduStanfordNlpStatsCounter> t, id<JavaUtilCollection> keys, jdouble value) {
  EduStanfordNlpStatsCounters_initialize();
  for (id __strong k in nil_chk(keys)) {
    if (![((id<EduStanfordNlpStatsCounter>) nil_chk(t)) containsKeyWithId:k]) [t setCountWithId:k withDouble:value];
  }
}

id<JavaUtilList> EduStanfordNlpStatsCounters_topKeysWithEduStanfordNlpStatsCounter_withInt_(id<EduStanfordNlpStatsCounter> t, jint topNum) {
  EduStanfordNlpStatsCounters_initialize();
  id<JavaUtilList> list = new_JavaUtilArrayList_init();
  id<EduStanfordNlpUtilPriorityQueue> q = EduStanfordNlpStatsCounters_toPriorityQueueWithEduStanfordNlpStatsCounter_(t);
  jint num = 0;
  while (![((id<EduStanfordNlpUtilPriorityQueue>) nil_chk(q)) isEmpty] && num < topNum) {
    num++;
    [list addWithId:[q removeFirst]];
  }
  return list;
}

id<JavaUtilList> EduStanfordNlpStatsCounters_topKeysWithCountsWithEduStanfordNlpStatsCounter_withInt_(id<EduStanfordNlpStatsCounter> t, jint topNum) {
  EduStanfordNlpStatsCounters_initialize();
  id<JavaUtilList> list = new_JavaUtilArrayList_init();
  id<EduStanfordNlpUtilPriorityQueue> q = EduStanfordNlpStatsCounters_toPriorityQueueWithEduStanfordNlpStatsCounter_(t);
  jint num = 0;
  while (![((id<EduStanfordNlpUtilPriorityQueue>) nil_chk(q)) isEmpty] && num < topNum) {
    num++;
    id k = [q removeFirst];
    [list addWithId:new_EduStanfordNlpUtilPair_initWithId_withId_(k, JavaLangDouble_valueOfWithDouble_([((id<EduStanfordNlpStatsCounter>) nil_chk(t)) getCountWithId:k]))];
  }
  return list;
}

id<EduStanfordNlpStatsCounter> EduStanfordNlpStatsCounters_getFCounterWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_withDouble_(id<EduStanfordNlpStatsCounter> precision, id<EduStanfordNlpStatsCounter> recall, jdouble beta) {
  EduStanfordNlpStatsCounters_initialize();
  id<EduStanfordNlpStatsCounter> fscores = new_EduStanfordNlpStatsClassicCounter_init();
  for (id __strong k in nil_chk([((id<EduStanfordNlpStatsCounter>) nil_chk(precision)) keySet])) {
    [fscores setCountWithId:k withDouble:[precision getCountWithId:k] * [((id<EduStanfordNlpStatsCounter>) nil_chk(recall)) getCountWithId:k] * (1 + beta * beta) / (beta * beta * [precision getCountWithId:k] + [recall getCountWithId:k])];
  }
  return fscores;
}

void EduStanfordNlpStatsCounters_transformValuesInPlaceWithEduStanfordNlpStatsCounter_withJavaUtilFunctionFunction_(id<EduStanfordNlpStatsCounter> counter, id<JavaUtilFunctionFunction> func) {
  EduStanfordNlpStatsCounters_initialize();
  for (id __strong key in nil_chk([((id<EduStanfordNlpStatsCounter>) nil_chk(counter)) keySet])) {
    [counter setCountWithId:key withDouble:[((JavaLangDouble *) nil_chk([((id<JavaUtilFunctionFunction>) nil_chk(func)) applyWithId:JavaLangDouble_valueOfWithDouble_([counter getCountWithId:key])])) doubleValue]];
  }
}

id<EduStanfordNlpStatsCounter> EduStanfordNlpStatsCounters_getCountsWithEduStanfordNlpStatsCounter_withJavaUtilCollection_(id<EduStanfordNlpStatsCounter> c, id<JavaUtilCollection> keys) {
  EduStanfordNlpStatsCounters_initialize();
  id<EduStanfordNlpStatsCounter> newcounter = new_EduStanfordNlpStatsClassicCounter_init();
  for (id __strong k in nil_chk(keys)) [newcounter setCountWithId:k withDouble:[((id<EduStanfordNlpStatsCounter>) nil_chk(c)) getCountWithId:k]];
  return newcounter;
}

void EduStanfordNlpStatsCounters_retainKeysWithEduStanfordNlpStatsCounter_withJavaUtilFunctionFunction_(id<EduStanfordNlpStatsCounter> counter, id<JavaUtilFunctionFunction> retainFunction) {
  EduStanfordNlpStatsCounters_initialize();
  id<JavaUtilSet> remove = new_JavaUtilHashSet_init();
  for (id<JavaUtilMap_Entry> __strong en in nil_chk([((id<EduStanfordNlpStatsCounter>) nil_chk(counter)) entrySet])) {
    if (![((JavaLangBoolean *) nil_chk([((id<JavaUtilFunctionFunction>) nil_chk(retainFunction)) applyWithId:[((id<JavaUtilMap_Entry>) nil_chk(en)) getKey]])) booleanValue]) {
      [remove addWithId:[en getKey]];
    }
  }
  EduStanfordNlpStatsCounters_removeKeysWithEduStanfordNlpStatsCounter_withJavaUtilCollection_(counter, remove);
}

id<EduStanfordNlpStatsCounter> EduStanfordNlpStatsCounters_flattenWithJavaUtilMap_(id<JavaUtilMap> hier) {
  EduStanfordNlpStatsCounters_initialize();
  id<EduStanfordNlpStatsCounter> flat = new_EduStanfordNlpStatsClassicCounter_init();
  for (id<JavaUtilMap_Entry> __strong en in nil_chk([((id<JavaUtilMap>) nil_chk(hier)) entrySet])) {
    [flat addAllWithEduStanfordNlpStatsCounter:[((id<JavaUtilMap_Entry>) nil_chk(en)) getValue]];
  }
  return flat;
}

jboolean EduStanfordNlpStatsCounters_isFiniteWithEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> counts) {
  EduStanfordNlpStatsCounters_initialize();
  for (JavaLangDouble *boxed__ in nil_chk([((id<EduStanfordNlpStatsCounter>) nil_chk(counts)) values])) {
    jdouble value = [((JavaLangDouble *) nil_chk(boxed__)) doubleValue];
    if (JavaLangDouble_isInfiniteWithDouble_(value) || JavaLangDouble_isNaNWithDouble_(value)) {
      return false;
    }
  }
  return true;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpStatsCounters)

@implementation EduStanfordNlpStatsCounters_NaturalComparator

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpStatsCounters_NaturalComparator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)description {
  return @"NaturalComparator";
}

- (jint)compareWithId:(id)o1
               withId:(id)o2 {
  if ([JavaLangComparable_class_() isInstance:o1]) {
    return ([((id<JavaLangComparable>) nil_chk(((id<JavaLangComparable>) cast_check(o1, JavaLangComparable_class_())))) compareToWithId:o2]);
  }
  return 0;
}

- (id<JavaUtilComparator>)reversed {
  return JavaUtilComparator_reversed(self);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilComparator:(id<JavaUtilComparator>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilComparator_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0
                                             withJavaUtilComparator:(id<JavaUtilComparator>)arg1 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_withJavaUtilComparator_(self, arg0, arg1);
}

- (id<JavaUtilComparator>)thenComparingDoubleWithJavaUtilFunctionToDoubleFunction:(id<JavaUtilFunctionToDoubleFunction>)arg0 {
  return JavaUtilComparator_thenComparingDoubleWithJavaUtilFunctionToDoubleFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingIntWithJavaUtilFunctionToIntFunction:(id<JavaUtilFunctionToIntFunction>)arg0 {
  return JavaUtilComparator_thenComparingIntWithJavaUtilFunctionToIntFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingLongWithJavaUtilFunctionToLongFunction:(id<JavaUtilFunctionToLongFunction>)arg0 {
  return JavaUtilComparator_thenComparingLongWithJavaUtilFunctionToLongFunction_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 0, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(description);
  methods[2].selector = @selector(compareWithId:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "toString", "compare", "LNSObject;LNSObject;", "(TE;TE;)I", "LEduStanfordNlpStatsCounters;", "<E:Ljava/lang/Object;>Ljava/lang/Object;Ljava/util/Comparator<TE;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpStatsCounters_NaturalComparator = { "NaturalComparator", "edu.stanford.nlp.stats", ptrTable, methods, NULL, 7, 0x8, 3, 0, 4, -1, -1, 5, -1 };
  return &_EduStanfordNlpStatsCounters_NaturalComparator;
}

@end

void EduStanfordNlpStatsCounters_NaturalComparator_init(EduStanfordNlpStatsCounters_NaturalComparator *self) {
  NSObject_init(self);
}

EduStanfordNlpStatsCounters_NaturalComparator *new_EduStanfordNlpStatsCounters_NaturalComparator_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpStatsCounters_NaturalComparator, init)
}

EduStanfordNlpStatsCounters_NaturalComparator *create_EduStanfordNlpStatsCounters_NaturalComparator_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpStatsCounters_NaturalComparator, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpStatsCounters_NaturalComparator)

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpStatsCounters_$Lambda$1)

@implementation EduStanfordNlpStatsCounters_$Lambda$1

- (jint)compareWithId:(id)x
               withId:(id)y {
  return 0;
}

- (id<JavaUtilComparator>)reversed {
  return JavaUtilComparator_reversed(self);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilComparator:(id<JavaUtilComparator>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilComparator_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0
                                             withJavaUtilComparator:(id<JavaUtilComparator>)arg1 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_withJavaUtilComparator_(self, arg0, arg1);
}

- (id<JavaUtilComparator>)thenComparingDoubleWithJavaUtilFunctionToDoubleFunction:(id<JavaUtilFunctionToDoubleFunction>)arg0 {
  return JavaUtilComparator_thenComparingDoubleWithJavaUtilFunctionToDoubleFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingIntWithJavaUtilFunctionToIntFunction:(id<JavaUtilFunctionToIntFunction>)arg0 {
  return JavaUtilComparator_thenComparingIntWithJavaUtilFunctionToIntFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingLongWithJavaUtilFunctionToLongFunction:(id<JavaUtilFunctionToLongFunction>)arg0 {
  return JavaUtilComparator_thenComparingLongWithJavaUtilFunctionToLongFunction_(self, arg0);
}

+ (void)initialize {
  if (self == [EduStanfordNlpStatsCounters_$Lambda$1 class]) {
    EduStanfordNlpStatsCounters_$Lambda$1_instance = new_EduStanfordNlpStatsCounters_$Lambda$1_init();
    J2OBJC_SET_INITIALIZED(EduStanfordNlpStatsCounters_$Lambda$1)
  }
}

@end

void EduStanfordNlpStatsCounters_$Lambda$1_init(EduStanfordNlpStatsCounters_$Lambda$1 *self) {
  NSObject_init(self);
}

EduStanfordNlpStatsCounters_$Lambda$1 *new_EduStanfordNlpStatsCounters_$Lambda$1_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpStatsCounters_$Lambda$1, init)
}

EduStanfordNlpStatsCounters_$Lambda$1 *create_EduStanfordNlpStatsCounters_$Lambda$1_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpStatsCounters_$Lambda$1, init)
}

@implementation EduStanfordNlpStatsCounters_$Lambda$2

- (jint)compareWithId:(id)o1
               withId:(id)o2 {
  return JavaLangDouble_compareWithDouble_withDouble_([((id<EduStanfordNlpStatsCounter>) nil_chk(val$counter_)) getCountWithId:o1], [val$counter_ getCountWithId:o2]);
}

- (id<JavaUtilComparator>)reversed {
  return JavaUtilComparator_reversed(self);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilComparator:(id<JavaUtilComparator>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilComparator_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0
                                             withJavaUtilComparator:(id<JavaUtilComparator>)arg1 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_withJavaUtilComparator_(self, arg0, arg1);
}

- (id<JavaUtilComparator>)thenComparingDoubleWithJavaUtilFunctionToDoubleFunction:(id<JavaUtilFunctionToDoubleFunction>)arg0 {
  return JavaUtilComparator_thenComparingDoubleWithJavaUtilFunctionToDoubleFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingIntWithJavaUtilFunctionToIntFunction:(id<JavaUtilFunctionToIntFunction>)arg0 {
  return JavaUtilComparator_thenComparingIntWithJavaUtilFunctionToIntFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingLongWithJavaUtilFunctionToLongFunction:(id<JavaUtilFunctionToLongFunction>)arg0 {
  return JavaUtilComparator_thenComparingLongWithJavaUtilFunctionToLongFunction_(self, arg0);
}

@end

void EduStanfordNlpStatsCounters_$Lambda$2_initWithEduStanfordNlpStatsCounter_(EduStanfordNlpStatsCounters_$Lambda$2 *self, id<EduStanfordNlpStatsCounter> capture$0) {
  self->val$counter_ = capture$0;
  NSObject_init(self);
}

EduStanfordNlpStatsCounters_$Lambda$2 *new_EduStanfordNlpStatsCounters_$Lambda$2_initWithEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> capture$0) {
  J2OBJC_NEW_IMPL(EduStanfordNlpStatsCounters_$Lambda$2, initWithEduStanfordNlpStatsCounter_, capture$0)
}

EduStanfordNlpStatsCounters_$Lambda$2 *create_EduStanfordNlpStatsCounters_$Lambda$2_initWithEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> capture$0) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpStatsCounters_$Lambda$2, initWithEduStanfordNlpStatsCounter_, capture$0)
}

@implementation EduStanfordNlpStatsCounters_$Lambda$3

- (jint)compareWithId:(id<JavaLangComparable>)o1
               withId:(id<JavaLangComparable>)o2 {
  jint res = JavaLangDouble_compareWithDouble_withDouble_([((id<EduStanfordNlpStatsCounter>) nil_chk(val$counter_)) getCountWithId:o1], [val$counter_ getCountWithId:o2]);
  if (res == 0) {
    return [((id<JavaLangComparable>) nil_chk(o1)) compareToWithId:o2];
  }
  else {
    return res;
  }
}

- (id<JavaUtilComparator>)reversed {
  return JavaUtilComparator_reversed(self);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilComparator:(id<JavaUtilComparator>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilComparator_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0
                                             withJavaUtilComparator:(id<JavaUtilComparator>)arg1 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_withJavaUtilComparator_(self, arg0, arg1);
}

- (id<JavaUtilComparator>)thenComparingDoubleWithJavaUtilFunctionToDoubleFunction:(id<JavaUtilFunctionToDoubleFunction>)arg0 {
  return JavaUtilComparator_thenComparingDoubleWithJavaUtilFunctionToDoubleFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingIntWithJavaUtilFunctionToIntFunction:(id<JavaUtilFunctionToIntFunction>)arg0 {
  return JavaUtilComparator_thenComparingIntWithJavaUtilFunctionToIntFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingLongWithJavaUtilFunctionToLongFunction:(id<JavaUtilFunctionToLongFunction>)arg0 {
  return JavaUtilComparator_thenComparingLongWithJavaUtilFunctionToLongFunction_(self, arg0);
}

@end

void EduStanfordNlpStatsCounters_$Lambda$3_initWithEduStanfordNlpStatsCounter_(EduStanfordNlpStatsCounters_$Lambda$3 *self, id<EduStanfordNlpStatsCounter> capture$0) {
  self->val$counter_ = capture$0;
  NSObject_init(self);
}

EduStanfordNlpStatsCounters_$Lambda$3 *new_EduStanfordNlpStatsCounters_$Lambda$3_initWithEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> capture$0) {
  J2OBJC_NEW_IMPL(EduStanfordNlpStatsCounters_$Lambda$3, initWithEduStanfordNlpStatsCounter_, capture$0)
}

EduStanfordNlpStatsCounters_$Lambda$3 *create_EduStanfordNlpStatsCounters_$Lambda$3_initWithEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> capture$0) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpStatsCounters_$Lambda$3, initWithEduStanfordNlpStatsCounter_, capture$0)
}

@implementation EduStanfordNlpStatsCounters_$Lambda$4

- (jint)compareWithId:(id)o1
               withId:(id)o2 {
  return JavaLangDouble_compareWithDouble_withDouble_([((id<EduStanfordNlpStatsCounter>) nil_chk(val$counter_)) getCountWithId:o2], [val$counter_ getCountWithId:o1]);
}

- (id<JavaUtilComparator>)reversed {
  return JavaUtilComparator_reversed(self);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilComparator:(id<JavaUtilComparator>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilComparator_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0
                                             withJavaUtilComparator:(id<JavaUtilComparator>)arg1 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_withJavaUtilComparator_(self, arg0, arg1);
}

- (id<JavaUtilComparator>)thenComparingDoubleWithJavaUtilFunctionToDoubleFunction:(id<JavaUtilFunctionToDoubleFunction>)arg0 {
  return JavaUtilComparator_thenComparingDoubleWithJavaUtilFunctionToDoubleFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingIntWithJavaUtilFunctionToIntFunction:(id<JavaUtilFunctionToIntFunction>)arg0 {
  return JavaUtilComparator_thenComparingIntWithJavaUtilFunctionToIntFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingLongWithJavaUtilFunctionToLongFunction:(id<JavaUtilFunctionToLongFunction>)arg0 {
  return JavaUtilComparator_thenComparingLongWithJavaUtilFunctionToLongFunction_(self, arg0);
}

@end

void EduStanfordNlpStatsCounters_$Lambda$4_initWithEduStanfordNlpStatsCounter_(EduStanfordNlpStatsCounters_$Lambda$4 *self, id<EduStanfordNlpStatsCounter> capture$0) {
  self->val$counter_ = capture$0;
  NSObject_init(self);
}

EduStanfordNlpStatsCounters_$Lambda$4 *new_EduStanfordNlpStatsCounters_$Lambda$4_initWithEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> capture$0) {
  J2OBJC_NEW_IMPL(EduStanfordNlpStatsCounters_$Lambda$4, initWithEduStanfordNlpStatsCounter_, capture$0)
}

EduStanfordNlpStatsCounters_$Lambda$4 *create_EduStanfordNlpStatsCounters_$Lambda$4_initWithEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> capture$0) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpStatsCounters_$Lambda$4, initWithEduStanfordNlpStatsCounter_, capture$0)
}

@implementation EduStanfordNlpStatsCounters_$Lambda$5

- (jint)compareWithId:(id)o1
               withId:(id)o2 {
  if (val$ascending_) {
    if (val$useMagnitude_) {
      return JavaLangDouble_compareWithDouble_withDouble_(JavaLangMath_absWithDouble_([((id<EduStanfordNlpStatsCounter>) nil_chk(val$counter_)) getCountWithId:o1]), JavaLangMath_absWithDouble_([val$counter_ getCountWithId:o2]));
    }
    else {
      return JavaLangDouble_compareWithDouble_withDouble_([((id<EduStanfordNlpStatsCounter>) nil_chk(val$counter_)) getCountWithId:o1], [val$counter_ getCountWithId:o2]);
    }
  }
  else {
    if (val$useMagnitude_) {
      return JavaLangDouble_compareWithDouble_withDouble_(JavaLangMath_absWithDouble_([((id<EduStanfordNlpStatsCounter>) nil_chk(val$counter_)) getCountWithId:o2]), JavaLangMath_absWithDouble_([val$counter_ getCountWithId:o1]));
    }
    else {
      return JavaLangDouble_compareWithDouble_withDouble_([((id<EduStanfordNlpStatsCounter>) nil_chk(val$counter_)) getCountWithId:o2], [val$counter_ getCountWithId:o1]);
    }
  }
}

- (id<JavaUtilComparator>)reversed {
  return JavaUtilComparator_reversed(self);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilComparator:(id<JavaUtilComparator>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilComparator_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0
                                             withJavaUtilComparator:(id<JavaUtilComparator>)arg1 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_withJavaUtilComparator_(self, arg0, arg1);
}

- (id<JavaUtilComparator>)thenComparingDoubleWithJavaUtilFunctionToDoubleFunction:(id<JavaUtilFunctionToDoubleFunction>)arg0 {
  return JavaUtilComparator_thenComparingDoubleWithJavaUtilFunctionToDoubleFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingIntWithJavaUtilFunctionToIntFunction:(id<JavaUtilFunctionToIntFunction>)arg0 {
  return JavaUtilComparator_thenComparingIntWithJavaUtilFunctionToIntFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingLongWithJavaUtilFunctionToLongFunction:(id<JavaUtilFunctionToLongFunction>)arg0 {
  return JavaUtilComparator_thenComparingLongWithJavaUtilFunctionToLongFunction_(self, arg0);
}

@end

void EduStanfordNlpStatsCounters_$Lambda$5_initWithBoolean_withBoolean_withEduStanfordNlpStatsCounter_(EduStanfordNlpStatsCounters_$Lambda$5 *self, jboolean capture$0, jboolean capture$1, id<EduStanfordNlpStatsCounter> capture$2) {
  self->val$ascending_ = capture$0;
  self->val$useMagnitude_ = capture$1;
  self->val$counter_ = capture$2;
  NSObject_init(self);
}

EduStanfordNlpStatsCounters_$Lambda$5 *new_EduStanfordNlpStatsCounters_$Lambda$5_initWithBoolean_withBoolean_withEduStanfordNlpStatsCounter_(jboolean capture$0, jboolean capture$1, id<EduStanfordNlpStatsCounter> capture$2) {
  J2OBJC_NEW_IMPL(EduStanfordNlpStatsCounters_$Lambda$5, initWithBoolean_withBoolean_withEduStanfordNlpStatsCounter_, capture$0, capture$1, capture$2)
}

EduStanfordNlpStatsCounters_$Lambda$5 *create_EduStanfordNlpStatsCounters_$Lambda$5_initWithBoolean_withBoolean_withEduStanfordNlpStatsCounter_(jboolean capture$0, jboolean capture$1, id<EduStanfordNlpStatsCounter> capture$2) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpStatsCounters_$Lambda$5, initWithBoolean_withBoolean_withEduStanfordNlpStatsCounter_, capture$0, capture$1, capture$2)
}

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpStatsCounters_$Lambda$6)

@implementation EduStanfordNlpStatsCounters_$Lambda$6

- (jint)compareWithId:(EduStanfordNlpUtilPair *)a
               withId:(EduStanfordNlpUtilPair *)b {
  return JavaLangDouble_compareWithDouble_withDouble_([((JavaLangDouble *) nil_chk(((EduStanfordNlpUtilPair *) nil_chk(b))->second_)) doubleValue], [((JavaLangDouble *) ((EduStanfordNlpUtilPair *) nil_chk(a))->second_) doubleValue]);
}

- (id<JavaUtilComparator>)reversed {
  return JavaUtilComparator_reversed(self);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilComparator:(id<JavaUtilComparator>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilComparator_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0
                                             withJavaUtilComparator:(id<JavaUtilComparator>)arg1 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_withJavaUtilComparator_(self, arg0, arg1);
}

- (id<JavaUtilComparator>)thenComparingDoubleWithJavaUtilFunctionToDoubleFunction:(id<JavaUtilFunctionToDoubleFunction>)arg0 {
  return JavaUtilComparator_thenComparingDoubleWithJavaUtilFunctionToDoubleFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingIntWithJavaUtilFunctionToIntFunction:(id<JavaUtilFunctionToIntFunction>)arg0 {
  return JavaUtilComparator_thenComparingIntWithJavaUtilFunctionToIntFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingLongWithJavaUtilFunctionToLongFunction:(id<JavaUtilFunctionToLongFunction>)arg0 {
  return JavaUtilComparator_thenComparingLongWithJavaUtilFunctionToLongFunction_(self, arg0);
}

+ (void)initialize {
  if (self == [EduStanfordNlpStatsCounters_$Lambda$6 class]) {
    EduStanfordNlpStatsCounters_$Lambda$6_instance = new_EduStanfordNlpStatsCounters_$Lambda$6_init();
    J2OBJC_SET_INITIALIZED(EduStanfordNlpStatsCounters_$Lambda$6)
  }
}

@end

void EduStanfordNlpStatsCounters_$Lambda$6_init(EduStanfordNlpStatsCounters_$Lambda$6 *self) {
  NSObject_init(self);
}

EduStanfordNlpStatsCounters_$Lambda$6 *new_EduStanfordNlpStatsCounters_$Lambda$6_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpStatsCounters_$Lambda$6, init)
}

EduStanfordNlpStatsCounters_$Lambda$6 *create_EduStanfordNlpStatsCounters_$Lambda$6_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpStatsCounters_$Lambda$6, init)
}

@implementation EduStanfordNlpStatsCounters_$1

- (void)clear {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (jboolean)containsKeyWithId:(id)key {
  return [((id<EduStanfordNlpStatsCounter>) nil_chk(val$counter_)) containsKeyWithId:key];
}

- (jdouble)getCountWithId:(id)key {
  return [((id<EduStanfordNlpStatsCounter>) nil_chk(val$counter_)) getCountWithId:key];
}

- (id<EduStanfordNlpUtilFactory>)getFactory {
  return [((id<EduStanfordNlpStatsCounter>) nil_chk(val$counter_)) getFactory];
}

- (jdouble)removeWithId:(id)key {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)setCountWithId:(id)key
            withDouble:(jdouble)value {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (jdouble)incrementCountWithId:(id)key
                     withDouble:(jdouble)value {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (jdouble)incrementCountWithId:(id)key {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (jdouble)logIncrementCountWithId:(id)key
                        withDouble:(jdouble)value {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (jint)size {
  return [((id<EduStanfordNlpStatsCounter>) nil_chk(val$counter_)) size];
}

- (jdouble)totalCount {
  return [((id<EduStanfordNlpStatsCounter>) nil_chk(val$counter_)) totalCount];
}

- (id<JavaUtilCollection>)values {
  return [((id<EduStanfordNlpStatsCounter>) nil_chk(val$counter_)) values];
}

- (id<JavaUtilSet>)keySet {
  return JavaUtilCollections_unmodifiableSetWithJavaUtilSet_([((id<EduStanfordNlpStatsCounter>) nil_chk(val$counter_)) keySet]);
}

- (id<JavaUtilSet>)entrySet {
  return JavaUtilCollections_unmodifiableSetWithJavaUtilSet_(new_EduStanfordNlpStatsCounters_$1_$1_initWithEduStanfordNlpStatsCounters_$1_(self));
}

- (void)setDefaultReturnValueWithDouble:(jdouble)rv {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (jdouble)defaultReturnValue {
  return [((id<EduStanfordNlpStatsCounter>) nil_chk(val$counter_)) defaultReturnValue];
}

- (void)prettyLogWithEduStanfordNlpUtilLoggingRedwood_RedwoodChannels:(EduStanfordNlpUtilLoggingRedwood_RedwoodChannels *)channels
                                                         withNSString:(NSString *)description_ {
  EduStanfordNlpUtilLoggingPrettyLogger_logWithEduStanfordNlpUtilLoggingRedwood_RedwoodChannels_withNSString_withId_(channels, description_, EduStanfordNlpStatsCounters_asMapWithEduStanfordNlpStatsCounter_(self));
}

- (instancetype)initWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)capture$0 {
  EduStanfordNlpStatsCounters_$1_initWithEduStanfordNlpStatsCounter_(self, capture$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "D", 0x1, 3, 1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpUtilFactory;", 0x1, -1, -1, -1, 4, -1, -1 },
    { NULL, "D", 0x1, 5, 1, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, 9, -1, -1 },
    { NULL, "D", 0x1, 10, 8, -1, 11, -1, -1 },
    { NULL, "D", 0x1, 10, 1, -1, 6, -1, -1 },
    { NULL, "D", 0x1, 12, 8, -1, 11, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, -1, -1, -1, 13, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 14, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 15, -1, -1 },
    { NULL, "V", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 19, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 20, -1, 21, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(clear);
  methods[1].selector = @selector(containsKeyWithId:);
  methods[2].selector = @selector(getCountWithId:);
  methods[3].selector = @selector(getFactory);
  methods[4].selector = @selector(removeWithId:);
  methods[5].selector = @selector(setCountWithId:withDouble:);
  methods[6].selector = @selector(incrementCountWithId:withDouble:);
  methods[7].selector = @selector(incrementCountWithId:);
  methods[8].selector = @selector(logIncrementCountWithId:withDouble:);
  methods[9].selector = @selector(size);
  methods[10].selector = @selector(totalCount);
  methods[11].selector = @selector(values);
  methods[12].selector = @selector(keySet);
  methods[13].selector = @selector(entrySet);
  methods[14].selector = @selector(setDefaultReturnValueWithDouble:);
  methods[15].selector = @selector(defaultReturnValue);
  methods[16].selector = @selector(prettyLogWithEduStanfordNlpUtilLoggingRedwood_RedwoodChannels:withNSString:);
  methods[17].selector = @selector(initWithEduStanfordNlpStatsCounter:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$counter_", "LEduStanfordNlpStatsCounter;", .constantValue.asLong = 0, 0x1012, -1, -1, 22, -1 },
  };
  static const void *ptrTable[] = { "containsKey", "LNSObject;", "(TT;)Z", "getCount", "()Ledu/stanford/nlp/util/Factory<Ledu/stanford/nlp/stats/Counter<TT;>;>;", "remove", "(TT;)D", "setCount", "LNSObject;D", "(TT;D)V", "incrementCount", "(TT;D)D", "logIncrementCount", "()Ljava/util/Collection<Ljava/lang/Double;>;", "()Ljava/util/Set<TT;>;", "()Ljava/util/Set<Ljava/util/Map$Entry<TT;Ljava/lang/Double;>;>;", "setDefaultReturnValue", "D", "prettyLog", "LEduStanfordNlpUtilLoggingRedwood_RedwoodChannels;LNSString;", "LEduStanfordNlpStatsCounter;", "(Ledu/stanford/nlp/stats/Counter<TT;>;)V", "Ledu/stanford/nlp/stats/Counter<TT;>;", "LEduStanfordNlpStatsCounters;", "unmodifiableCounterWithEduStanfordNlpStatsCounter:", "Ledu/stanford/nlp/stats/AbstractCounter<TT;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpStatsCounters_$1 = { "", "edu.stanford.nlp.stats", ptrTable, methods, fields, 7, 0x8008, 18, 1, 23, -1, 24, 25, -1 };
  return &_EduStanfordNlpStatsCounters_$1;
}

@end

void EduStanfordNlpStatsCounters_$1_initWithEduStanfordNlpStatsCounter_(EduStanfordNlpStatsCounters_$1 *self, id<EduStanfordNlpStatsCounter> capture$0) {
  self->val$counter_ = capture$0;
  EduStanfordNlpStatsAbstractCounter_init(self);
}

EduStanfordNlpStatsCounters_$1 *new_EduStanfordNlpStatsCounters_$1_initWithEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> capture$0) {
  J2OBJC_NEW_IMPL(EduStanfordNlpStatsCounters_$1, initWithEduStanfordNlpStatsCounter_, capture$0)
}

EduStanfordNlpStatsCounters_$1 *create_EduStanfordNlpStatsCounters_$1_initWithEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> capture$0) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpStatsCounters_$1, initWithEduStanfordNlpStatsCounter_, capture$0)
}

@implementation EduStanfordNlpStatsCounters_$1_$1

- (id<JavaUtilIterator>)iterator {
  return new_EduStanfordNlpStatsCounters_$1_$1_$1_initWithEduStanfordNlpStatsCounters_$1_$1_(self);
}

- (jint)size {
  return [((id<EduStanfordNlpStatsCounter>) nil_chk(this$0_->val$counter_)) size];
}

- (instancetype)initWithEduStanfordNlpStatsCounters_$1:(EduStanfordNlpStatsCounters_$1 *)outer$ {
  EduStanfordNlpStatsCounters_$1_$1_initWithEduStanfordNlpStatsCounters_$1_(self, outer$);
  return self;
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(iterator);
  methods[1].selector = @selector(size);
  methods[2].selector = @selector(initWithEduStanfordNlpStatsCounters_$1:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LEduStanfordNlpStatsCounters_$1;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Iterator<Ljava/util/Map$Entry<TT;Ljava/lang/Double;>;>;", "LEduStanfordNlpStatsCounters_$1;", "entrySet", "Ljava/util/AbstractSet<Ljava/util/Map$Entry<TT;Ljava/lang/Double;>;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpStatsCounters_$1_$1 = { "", "edu.stanford.nlp.stats", ptrTable, methods, fields, 7, 0x8008, 3, 1, 1, -1, 2, 3, -1 };
  return &_EduStanfordNlpStatsCounters_$1_$1;
}

@end

void EduStanfordNlpStatsCounters_$1_$1_initWithEduStanfordNlpStatsCounters_$1_(EduStanfordNlpStatsCounters_$1_$1 *self, EduStanfordNlpStatsCounters_$1 *outer$) {
  self->this$0_ = outer$;
  JavaUtilAbstractSet_init(self);
}

EduStanfordNlpStatsCounters_$1_$1 *new_EduStanfordNlpStatsCounters_$1_$1_initWithEduStanfordNlpStatsCounters_$1_(EduStanfordNlpStatsCounters_$1 *outer$) {
  J2OBJC_NEW_IMPL(EduStanfordNlpStatsCounters_$1_$1, initWithEduStanfordNlpStatsCounters_$1_, outer$)
}

EduStanfordNlpStatsCounters_$1_$1 *create_EduStanfordNlpStatsCounters_$1_$1_initWithEduStanfordNlpStatsCounters_$1_(EduStanfordNlpStatsCounters_$1 *outer$) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpStatsCounters_$1_$1, initWithEduStanfordNlpStatsCounters_$1_, outer$)
}

@implementation EduStanfordNlpStatsCounters_$1_$1_$1

- (jboolean)hasNext {
  return [((id<JavaUtilIterator>) nil_chk(inner_)) hasNext];
}

- (id<JavaUtilMap_Entry>)next {
  return new_EduStanfordNlpStatsCounters_$1_$1_$1_$1_initWithEduStanfordNlpStatsCounters_$1_$1_$1_(self);
}

- (void)remove {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (instancetype)initWithEduStanfordNlpStatsCounters_$1_$1:(EduStanfordNlpStatsCounters_$1_$1 *)outer$ {
  EduStanfordNlpStatsCounters_$1_$1_$1_initWithEduStanfordNlpStatsCounters_$1_$1_(self, outer$);
  return self;
}

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaUtilIterator_forEachRemainingWithJavaUtilFunctionConsumer_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap_Entry;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(hasNext);
  methods[1].selector = @selector(next);
  methods[2].selector = @selector(remove);
  methods[3].selector = @selector(initWithEduStanfordNlpStatsCounters_$1_$1:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "inner_", "LJavaUtilIterator;", .constantValue.asLong = 0, 0x10, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map$Entry<TT;Ljava/lang/Double;>;", "LEduStanfordNlpStatsCounters_$1_$1;", "Ljava/util/Iterator<Ljava/util/Map$Entry<TT;Ljava/lang/Double;>;>;", "iterator", "Ljava/lang/Object;Ljava/util/Iterator<Ljava/util/Map$Entry<TT;Ljava/lang/Double;>;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpStatsCounters_$1_$1_$1 = { "", "edu.stanford.nlp.stats", ptrTable, methods, fields, 7, 0x8008, 4, 1, 1, -1, 3, 4, -1 };
  return &_EduStanfordNlpStatsCounters_$1_$1_$1;
}

@end

void EduStanfordNlpStatsCounters_$1_$1_$1_initWithEduStanfordNlpStatsCounters_$1_$1_(EduStanfordNlpStatsCounters_$1_$1_$1 *self, EduStanfordNlpStatsCounters_$1_$1 *outer$) {
  NSObject_init(self);
  self->inner_ = [((id<JavaUtilSet>) nil_chk([((id<EduStanfordNlpStatsCounter>) nil_chk(outer$->this$0_->val$counter_)) entrySet])) iterator];
}

EduStanfordNlpStatsCounters_$1_$1_$1 *new_EduStanfordNlpStatsCounters_$1_$1_$1_initWithEduStanfordNlpStatsCounters_$1_$1_(EduStanfordNlpStatsCounters_$1_$1 *outer$) {
  J2OBJC_NEW_IMPL(EduStanfordNlpStatsCounters_$1_$1_$1, initWithEduStanfordNlpStatsCounters_$1_$1_, outer$)
}

EduStanfordNlpStatsCounters_$1_$1_$1 *create_EduStanfordNlpStatsCounters_$1_$1_$1_initWithEduStanfordNlpStatsCounters_$1_$1_(EduStanfordNlpStatsCounters_$1_$1 *outer$) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpStatsCounters_$1_$1_$1, initWithEduStanfordNlpStatsCounters_$1_$1_, outer$)
}

@implementation EduStanfordNlpStatsCounters_$1_$1_$1_$1

- (id)getKey {
  return [((id<JavaUtilMap_Entry>) nil_chk(e_)) getKey];
}

- (JavaLangDouble *)getValue {
  return JavaLangDouble_valueOfWithDouble_([((JavaLangDouble *) nil_chk([((id<JavaUtilMap_Entry>) nil_chk(e_)) getValue])) doubleValue]);
}

- (JavaLangDouble *)setValueWithId:(JavaLangDouble *)value {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (instancetype)initWithEduStanfordNlpStatsCounters_$1_$1_$1:(EduStanfordNlpStatsCounters_$1_$1_$1 *)outer$ {
  EduStanfordNlpStatsCounters_$1_$1_$1_$1_initWithEduStanfordNlpStatsCounters_$1_$1_$1_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangDouble;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangDouble;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(getKey);
  methods[1].selector = @selector(getValue);
  methods[2].selector = @selector(setValueWithId:);
  methods[3].selector = @selector(initWithEduStanfordNlpStatsCounters_$1_$1_$1:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "e_", "LJavaUtilMap_Entry;", .constantValue.asLong = 0, 0x10, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "()TT;", "setValue", "LJavaLangDouble;", "LEduStanfordNlpStatsCounters_$1_$1_$1;", "Ljava/util/Map$Entry<TT;Ljava/lang/Double;>;", "next", "Ljava/lang/Object;Ljava/util/Map$Entry<TT;Ljava/lang/Double;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpStatsCounters_$1_$1_$1_$1 = { "", "edu.stanford.nlp.stats", ptrTable, methods, fields, 7, 0x8008, 4, 1, 3, -1, 5, 6, -1 };
  return &_EduStanfordNlpStatsCounters_$1_$1_$1_$1;
}

@end

void EduStanfordNlpStatsCounters_$1_$1_$1_$1_initWithEduStanfordNlpStatsCounters_$1_$1_$1_(EduStanfordNlpStatsCounters_$1_$1_$1_$1 *self, EduStanfordNlpStatsCounters_$1_$1_$1 *outer$) {
  NSObject_init(self);
  self->e_ = [((id<JavaUtilIterator>) nil_chk(outer$->inner_)) next];
}

EduStanfordNlpStatsCounters_$1_$1_$1_$1 *new_EduStanfordNlpStatsCounters_$1_$1_$1_$1_initWithEduStanfordNlpStatsCounters_$1_$1_$1_(EduStanfordNlpStatsCounters_$1_$1_$1 *outer$) {
  J2OBJC_NEW_IMPL(EduStanfordNlpStatsCounters_$1_$1_$1_$1, initWithEduStanfordNlpStatsCounters_$1_$1_$1_, outer$)
}

EduStanfordNlpStatsCounters_$1_$1_$1_$1 *create_EduStanfordNlpStatsCounters_$1_$1_$1_$1_initWithEduStanfordNlpStatsCounters_$1_$1_$1_(EduStanfordNlpStatsCounters_$1_$1_$1 *outer$) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpStatsCounters_$1_$1_$1_$1, initWithEduStanfordNlpStatsCounters_$1_$1_$1_, outer$)
}

@implementation EduStanfordNlpStatsCounters_$2

- (void)clear {
  [((id<JavaUtilMap>) nil_chk(val$map_)) clear];
  total_ = 0.0;
}

- (jboolean)containsKeyWithId:(id)key {
  return [((id<JavaUtilMap>) nil_chk(val$map_)) containsKeyWithId:key];
}

- (void)setDefaultReturnValueWithDouble:(jdouble)rv {
  defRV_ = rv;
}

- (jdouble)defaultReturnValue {
  return defRV_;
}

- (jboolean)isEqual:(id)o {
  if (self == o) {
    return true;
  }
  else if (!([EduStanfordNlpStatsCounter_class_() isInstance:o])) {
    return false;
  }
  else {
    return EduStanfordNlpStatsCounters_equalsWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_(self, (id<EduStanfordNlpStatsCounter>) cast_check(o, EduStanfordNlpStatsCounter_class_()));
  }
}

- (NSUInteger)hash {
  return ((jint) [((id<JavaUtilMap>) nil_chk(val$map_)) hash]);
}

- (id<JavaUtilSet>)entrySet {
  return new_EduStanfordNlpStatsCounters_$2_$1_initWithEduStanfordNlpStatsCounters_$2_(self);
}

- (jdouble)getCountWithId:(id)key {
  NSNumber *value = [((id<JavaUtilMap>) nil_chk(val$map_)) getWithId:key];
  return value != nil ? [value doubleValue] : defRV_;
}

- (id<EduStanfordNlpUtilFactory>)getFactory {
  return new_EduStanfordNlpStatsCounters_$2_$2_initWithEduStanfordNlpStatsCounters_$2_(self);
}

- (id<JavaUtilSet>)keySet {
  return new_EduStanfordNlpStatsCounters_$2_$3_initWithEduStanfordNlpStatsCounters_$2_(self);
}

- (jdouble)removeWithId:(id)key {
  NSNumber *removed = [((id<JavaUtilMap>) nil_chk(val$map_)) removeWithId:key];
  if (removed != nil) {
    jdouble rv = [removed doubleValue];
    JreMinusAssignDoubleD(&total_, rv);
    return rv;
  }
  return defRV_;
}

- (void)setCountWithId:(id)key
            withDouble:(jdouble)value {
  JavaLangDouble *lastValue;
  jdouble newValue;
  if (val$type_ == (id) JavaLangDouble_class_()) {
    lastValue = [((id<JavaUtilMap>) nil_chk(EduStanfordNlpUtilErasureUtils_uncheckedCastWithId_(val$map_))) putWithId:key withId:JavaLangDouble_valueOfWithDouble_(value)];
    newValue = value;
  }
  else if (val$type_ == (id) JavaLangInteger_class_()) {
    JavaLangInteger *last = [((id<JavaUtilMap>) nil_chk(EduStanfordNlpUtilErasureUtils_uncheckedCastWithId_(val$map_))) putWithId:key withId:JavaLangInteger_valueOfWithInt_(JreFpToInt(value))];
    lastValue = last != nil ? JavaLangDouble_valueOfWithDouble_([last doubleValue]) : nil;
    newValue = (JreFpToInt(value));
  }
  else if (val$type_ == (id) JavaLangFloat_class_()) {
    JavaLangFloat *last = [((id<JavaUtilMap>) nil_chk(EduStanfordNlpUtilErasureUtils_uncheckedCastWithId_(val$map_))) putWithId:key withId:JavaLangFloat_valueOfWithFloat_((jfloat) value)];
    lastValue = last != nil ? JavaLangDouble_valueOfWithDouble_([last doubleValue]) : nil;
    newValue = ((jfloat) value);
  }
  else if (val$type_ == (id) JavaLangLong_class_()) {
    JavaLangLong *last = [((id<JavaUtilMap>) nil_chk(EduStanfordNlpUtilErasureUtils_uncheckedCastWithId_(val$map_))) putWithId:key withId:JavaLangLong_valueOfWithLong_(JreFpToLong(value))];
    lastValue = last != nil ? JavaLangDouble_valueOfWithDouble_([last doubleValue]) : nil;
    newValue = (JreFpToLong(value));
  }
  else if (val$type_ == (id) JavaLangShort_class_()) {
    JavaLangShort *last = [((id<JavaUtilMap>) nil_chk(EduStanfordNlpUtilErasureUtils_uncheckedCastWithId_(val$map_))) putWithId:key withId:JavaLangShort_valueOfWithShort_((jshort) JreFpToInt(value))];
    lastValue = last != nil ? JavaLangDouble_valueOfWithDouble_([last doubleValue]) : nil;
    newValue = ((jshort) JreFpToInt(value));
  }
  else {
    @throw new_JavaLangRuntimeException_initWithNSString_(@"Unrecognized numeric type in wrapped counter");
  }
  JrePlusAssignDoubleD(&total_, newValue - (lastValue != nil ? [lastValue doubleValue] : 0));
}

- (jint)size {
  return [((id<JavaUtilMap>) nil_chk(val$map_)) size];
}

- (jdouble)totalCount {
  return total_;
}

- (id<JavaUtilCollection>)values {
  return new_EduStanfordNlpStatsCounters_$2_$4_initWithEduStanfordNlpStatsCounters_$2_(self);
}

- (void)prettyLogWithEduStanfordNlpUtilLoggingRedwood_RedwoodChannels:(EduStanfordNlpUtilLoggingRedwood_RedwoodChannels *)channels
                                                         withNSString:(NSString *)description_ {
  EduStanfordNlpUtilLoggingPrettyLogger_logWithEduStanfordNlpUtilLoggingRedwood_RedwoodChannels_withNSString_withId_(channels, description_, val$map_);
}

- (instancetype)initWithDouble:(jdouble)capture$0
               withJavaUtilMap:(id<JavaUtilMap>)capture$1
                  withIOSClass:(IOSClass *)capture$2 {
  EduStanfordNlpStatsCounters_$2_initWithDouble_withJavaUtilMap_withIOSClass_(self, capture$0, capture$1, capture$2);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 5, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 6, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 7, -1, -1 },
    { NULL, "D", 0x1, 8, 1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpUtilFactory;", 0x1, -1, -1, -1, 9, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 10, -1, -1 },
    { NULL, "D", 0x1, 11, 1, -1, 12, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, 15, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, -1, -1, -1, 16, -1, -1 },
    { NULL, "V", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 19, -1, 20, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(clear);
  methods[1].selector = @selector(containsKeyWithId:);
  methods[2].selector = @selector(setDefaultReturnValueWithDouble:);
  methods[3].selector = @selector(defaultReturnValue);
  methods[4].selector = @selector(isEqual:);
  methods[5].selector = @selector(hash);
  methods[6].selector = @selector(entrySet);
  methods[7].selector = @selector(getCountWithId:);
  methods[8].selector = @selector(getFactory);
  methods[9].selector = @selector(keySet);
  methods[10].selector = @selector(removeWithId:);
  methods[11].selector = @selector(setCountWithId:withDouble:);
  methods[12].selector = @selector(size);
  methods[13].selector = @selector(totalCount);
  methods[14].selector = @selector(values);
  methods[15].selector = @selector(prettyLogWithEduStanfordNlpUtilLoggingRedwood_RedwoodChannels:withNSString:);
  methods[16].selector = @selector(initWithDouble:withJavaUtilMap:withIOSClass:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "total_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "defRV_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "val$map_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x1012, -1, -1, 21, -1 },
    { "val$type_", "LIOSClass;", .constantValue.asLong = 0, 0x1012, -1, -1, 22, -1 },
  };
  static const void *ptrTable[] = { "containsKey", "LNSObject;", "(TE;)Z", "setDefaultReturnValue", "D", "equals", "hashCode", "()Ljava/util/Set<Ljava/util/Map$Entry<TE;Ljava/lang/Double;>;>;", "getCount", "()Ledu/stanford/nlp/util/Factory<Ledu/stanford/nlp/stats/Counter<TE;>;>;", "()Ljava/util/Set<TE;>;", "remove", "(TE;)D", "setCount", "LNSObject;D", "(TE;D)V", "()Ljava/util/Collection<Ljava/lang/Double;>;", "prettyLog", "LEduStanfordNlpUtilLoggingRedwood_RedwoodChannels;LNSString;", "DLJavaUtilMap;LIOSClass;", "(DLjava/util/Map<TE;TN;>;Ljava/lang/Class<TN;>;)V", "Ljava/util/Map<TE;TN;>;", "Ljava/lang/Class<TN;>;", "LEduStanfordNlpStatsCounters;", "fromMapWithJavaUtilMap:withIOSClass:", "Ledu/stanford/nlp/stats/AbstractCounter<TE;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpStatsCounters_$2 = { "", "edu.stanford.nlp.stats", ptrTable, methods, fields, 7, 0x8008, 17, 4, 23, -1, 24, 25, -1 };
  return &_EduStanfordNlpStatsCounters_$2;
}

@end

void EduStanfordNlpStatsCounters_$2_initWithDouble_withJavaUtilMap_withIOSClass_(EduStanfordNlpStatsCounters_$2 *self, jdouble capture$0, id<JavaUtilMap> capture$1, IOSClass *capture$2) {
  self->val$map_ = capture$1;
  self->val$type_ = capture$2;
  EduStanfordNlpStatsAbstractCounter_init(self);
  self->total_ = capture$0;
  self->defRV_ = 0.0;
}

EduStanfordNlpStatsCounters_$2 *new_EduStanfordNlpStatsCounters_$2_initWithDouble_withJavaUtilMap_withIOSClass_(jdouble capture$0, id<JavaUtilMap> capture$1, IOSClass *capture$2) {
  J2OBJC_NEW_IMPL(EduStanfordNlpStatsCounters_$2, initWithDouble_withJavaUtilMap_withIOSClass_, capture$0, capture$1, capture$2)
}

EduStanfordNlpStatsCounters_$2 *create_EduStanfordNlpStatsCounters_$2_initWithDouble_withJavaUtilMap_withIOSClass_(jdouble capture$0, id<JavaUtilMap> capture$1, IOSClass *capture$2) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpStatsCounters_$2, initWithDouble_withJavaUtilMap_withIOSClass_, capture$0, capture$1, capture$2)
}

@implementation EduStanfordNlpStatsCounters_$2_$1

- (id<JavaUtilIterator>)iterator {
  return new_EduStanfordNlpStatsCounters_$2_$1_$1_initWithEduStanfordNlpStatsCounters_$2_$1_(self);
}

- (jint)size {
  return [((id<JavaUtilMap>) nil_chk(this$0_->val$map_)) size];
}

- (instancetype)initWithEduStanfordNlpStatsCounters_$2:(EduStanfordNlpStatsCounters_$2 *)outer$ {
  EduStanfordNlpStatsCounters_$2_$1_initWithEduStanfordNlpStatsCounters_$2_(self, outer$);
  return self;
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(iterator);
  methods[1].selector = @selector(size);
  methods[2].selector = @selector(initWithEduStanfordNlpStatsCounters_$2:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LEduStanfordNlpStatsCounters_$2;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "entries_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x0, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Iterator<Ljava/util/Map$Entry<TE;Ljava/lang/Double;>;>;", "LEduStanfordNlpStatsCounters_$2;", "Ljava/util/Set<Ljava/util/Map$Entry<TE;TN;>;>;", "entrySet", "Ljava/util/AbstractSet<Ljava/util/Map$Entry<TE;Ljava/lang/Double;>;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpStatsCounters_$2_$1 = { "", "edu.stanford.nlp.stats", ptrTable, methods, fields, 7, 0x8008, 3, 2, 1, -1, 3, 4, -1 };
  return &_EduStanfordNlpStatsCounters_$2_$1;
}

@end

void EduStanfordNlpStatsCounters_$2_$1_initWithEduStanfordNlpStatsCounters_$2_(EduStanfordNlpStatsCounters_$2_$1 *self, EduStanfordNlpStatsCounters_$2 *outer$) {
  self->this$0_ = outer$;
  JavaUtilAbstractSet_init(self);
  self->entries_ = [((id<JavaUtilMap>) nil_chk(outer$->val$map_)) entrySet];
}

EduStanfordNlpStatsCounters_$2_$1 *new_EduStanfordNlpStatsCounters_$2_$1_initWithEduStanfordNlpStatsCounters_$2_(EduStanfordNlpStatsCounters_$2 *outer$) {
  J2OBJC_NEW_IMPL(EduStanfordNlpStatsCounters_$2_$1, initWithEduStanfordNlpStatsCounters_$2_, outer$)
}

EduStanfordNlpStatsCounters_$2_$1 *create_EduStanfordNlpStatsCounters_$2_$1_initWithEduStanfordNlpStatsCounters_$2_(EduStanfordNlpStatsCounters_$2 *outer$) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpStatsCounters_$2_$1, initWithEduStanfordNlpStatsCounters_$2_, outer$)
}

@implementation EduStanfordNlpStatsCounters_$2_$1_$1

- (jboolean)hasNext {
  return [((id<JavaUtilIterator>) nil_chk(it_)) hasNext];
}

- (id<JavaUtilMap_Entry>)next {
  id<JavaUtilMap_Entry> entry_ = [((id<JavaUtilIterator>) nil_chk(it_)) next];
  lastEntry_ = entry_;
  return new_EduStanfordNlpStatsCounters_$2_$1_$1_$1_initWithEduStanfordNlpStatsCounters_$2_$1_$1_withJavaUtilMap_Entry_(self, entry_);
}

- (void)remove {
  JreMinusAssignDoubleD(&this$0_->this$0_->total_, [((NSNumber *) nil_chk([((id<JavaUtilMap_Entry>) nil_chk(lastEntry_)) getValue])) doubleValue]);
  [((id<JavaUtilIterator>) nil_chk(it_)) remove];
}

- (instancetype)initWithEduStanfordNlpStatsCounters_$2_$1:(EduStanfordNlpStatsCounters_$2_$1 *)outer$ {
  EduStanfordNlpStatsCounters_$2_$1_$1_initWithEduStanfordNlpStatsCounters_$2_$1_(self, outer$);
  return self;
}

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaUtilIterator_forEachRemainingWithJavaUtilFunctionConsumer_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap_Entry;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(hasNext);
  methods[1].selector = @selector(next);
  methods[2].selector = @selector(remove);
  methods[3].selector = @selector(initWithEduStanfordNlpStatsCounters_$2_$1:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LEduStanfordNlpStatsCounters_$2_$1;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "it_", "LJavaUtilIterator;", .constantValue.asLong = 0, 0x0, -1, -1, 2, -1 },
    { "lastEntry_", "LJavaUtilMap_Entry;", .constantValue.asLong = 0, 0x0, -1, -1, 3, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map$Entry<TE;Ljava/lang/Double;>;", "LEduStanfordNlpStatsCounters_$2_$1;", "Ljava/util/Iterator<Ljava/util/Map$Entry<TE;TN;>;>;", "Ljava/util/Map$Entry<TE;TN;>;", "iterator", "Ljava/lang/Object;Ljava/util/Iterator<Ljava/util/Map$Entry<TE;Ljava/lang/Double;>;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpStatsCounters_$2_$1_$1 = { "", "edu.stanford.nlp.stats", ptrTable, methods, fields, 7, 0x8008, 4, 3, 1, -1, 4, 5, -1 };
  return &_EduStanfordNlpStatsCounters_$2_$1_$1;
}

@end

void EduStanfordNlpStatsCounters_$2_$1_$1_initWithEduStanfordNlpStatsCounters_$2_$1_(EduStanfordNlpStatsCounters_$2_$1_$1 *self, EduStanfordNlpStatsCounters_$2_$1 *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
  self->it_ = [((id<JavaUtilSet>) nil_chk(outer$->entries_)) iterator];
}

EduStanfordNlpStatsCounters_$2_$1_$1 *new_EduStanfordNlpStatsCounters_$2_$1_$1_initWithEduStanfordNlpStatsCounters_$2_$1_(EduStanfordNlpStatsCounters_$2_$1 *outer$) {
  J2OBJC_NEW_IMPL(EduStanfordNlpStatsCounters_$2_$1_$1, initWithEduStanfordNlpStatsCounters_$2_$1_, outer$)
}

EduStanfordNlpStatsCounters_$2_$1_$1 *create_EduStanfordNlpStatsCounters_$2_$1_$1_initWithEduStanfordNlpStatsCounters_$2_$1_(EduStanfordNlpStatsCounters_$2_$1 *outer$) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpStatsCounters_$2_$1_$1, initWithEduStanfordNlpStatsCounters_$2_$1_, outer$)
}

@implementation EduStanfordNlpStatsCounters_$2_$1_$1_$1

- (id)getKey {
  return [((id<JavaUtilMap_Entry>) nil_chk(val$entry_)) getKey];
}

- (JavaLangDouble *)getValue {
  return JavaLangDouble_valueOfWithDouble_([((NSNumber *) nil_chk([((id<JavaUtilMap_Entry>) nil_chk(val$entry_)) getValue])) doubleValue]);
}

- (JavaLangDouble *)setValueWithId:(JavaLangDouble *)value {
  jdouble lastValue = [((NSNumber *) nil_chk([((id<JavaUtilMap_Entry>) nil_chk(val$entry_)) getValue])) doubleValue];
  jdouble rv;
  if (this$0_->this$0_->this$0_->val$type_ == (id) JavaLangDouble_class_()) {
    rv = [((JavaLangDouble *) nil_chk([((id<JavaUtilMap_Entry>) nil_chk(EduStanfordNlpUtilErasureUtils_uncheckedCastWithId_(val$entry_))) setValueWithId:value])) doubleValue];
  }
  else if (this$0_->this$0_->this$0_->val$type_ == (id) JavaLangInteger_class_()) {
    rv = [((JavaLangInteger *) nil_chk([((id<JavaUtilMap_Entry>) nil_chk(EduStanfordNlpUtilErasureUtils_uncheckedCastWithId_(val$entry_))) setValueWithId:JavaLangInteger_valueOfWithInt_([((JavaLangDouble *) nil_chk(value)) intValue])])) intValue];
  }
  else if (this$0_->this$0_->this$0_->val$type_ == (id) JavaLangFloat_class_()) {
    rv = [((JavaLangFloat *) nil_chk([((id<JavaUtilMap_Entry>) nil_chk(EduStanfordNlpUtilErasureUtils_uncheckedCastWithId_(val$entry_))) setValueWithId:JavaLangFloat_valueOfWithFloat_([((JavaLangDouble *) nil_chk(value)) floatValue])])) floatValue];
  }
  else if (this$0_->this$0_->this$0_->val$type_ == (id) JavaLangLong_class_()) {
    rv = [((JavaLangLong *) nil_chk([((id<JavaUtilMap_Entry>) nil_chk(EduStanfordNlpUtilErasureUtils_uncheckedCastWithId_(val$entry_))) setValueWithId:JavaLangLong_valueOfWithLong_([((JavaLangDouble *) nil_chk(value)) longLongValue])])) longLongValue];
  }
  else if (this$0_->this$0_->this$0_->val$type_ == (id) JavaLangShort_class_()) {
    rv = [((JavaLangShort *) nil_chk([((id<JavaUtilMap_Entry>) nil_chk(EduStanfordNlpUtilErasureUtils_uncheckedCastWithId_(val$entry_))) setValueWithId:JavaLangShort_valueOfWithShort_([((JavaLangDouble *) nil_chk(value)) shortValue])])) shortValue];
  }
  else {
    @throw new_JavaLangRuntimeException_initWithNSString_(@"Unrecognized numeric type in wrapped counter");
  }
  JrePlusAssignDoubleD(&this$0_->this$0_->this$0_->total_, [((NSNumber *) nil_chk([val$entry_ getValue])) doubleValue] - lastValue);
  return JavaLangDouble_valueOfWithDouble_(rv);
}

- (instancetype)initWithEduStanfordNlpStatsCounters_$2_$1_$1:(EduStanfordNlpStatsCounters_$2_$1_$1 *)outer$
                                       withJavaUtilMap_Entry:(id<JavaUtilMap_Entry>)capture$0 {
  EduStanfordNlpStatsCounters_$2_$1_$1_$1_initWithEduStanfordNlpStatsCounters_$2_$1_$1_withJavaUtilMap_Entry_(self, outer$, capture$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangDouble;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangDouble;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(getKey);
  methods[1].selector = @selector(getValue);
  methods[2].selector = @selector(setValueWithId:);
  methods[3].selector = @selector(initWithEduStanfordNlpStatsCounters_$2_$1_$1:withJavaUtilMap_Entry:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LEduStanfordNlpStatsCounters_$2_$1_$1;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$entry_", "LJavaUtilMap_Entry;", .constantValue.asLong = 0, 0x1012, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "()TE;", "setValue", "LJavaLangDouble;", "LEduStanfordNlpStatsCounters_$2_$1_$1;LJavaUtilMap_Entry;", "(Ledu/stanford/nlp/stats/Counters$2$1$1;Ljava/util/Map$Entry<TE;TN;>;)V", "Ljava/util/Map$Entry<TE;TN;>;", "LEduStanfordNlpStatsCounters_$2_$1_$1;", "next", "Ljava/lang/Object;Ljava/util/Map$Entry<TE;Ljava/lang/Double;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpStatsCounters_$2_$1_$1_$1 = { "", "edu.stanford.nlp.stats", ptrTable, methods, fields, 7, 0x8008, 4, 2, 6, -1, 7, 8, -1 };
  return &_EduStanfordNlpStatsCounters_$2_$1_$1_$1;
}

@end

void EduStanfordNlpStatsCounters_$2_$1_$1_$1_initWithEduStanfordNlpStatsCounters_$2_$1_$1_withJavaUtilMap_Entry_(EduStanfordNlpStatsCounters_$2_$1_$1_$1 *self, EduStanfordNlpStatsCounters_$2_$1_$1 *outer$, id<JavaUtilMap_Entry> capture$0) {
  self->this$0_ = outer$;
  self->val$entry_ = capture$0;
  NSObject_init(self);
}

EduStanfordNlpStatsCounters_$2_$1_$1_$1 *new_EduStanfordNlpStatsCounters_$2_$1_$1_$1_initWithEduStanfordNlpStatsCounters_$2_$1_$1_withJavaUtilMap_Entry_(EduStanfordNlpStatsCounters_$2_$1_$1 *outer$, id<JavaUtilMap_Entry> capture$0) {
  J2OBJC_NEW_IMPL(EduStanfordNlpStatsCounters_$2_$1_$1_$1, initWithEduStanfordNlpStatsCounters_$2_$1_$1_withJavaUtilMap_Entry_, outer$, capture$0)
}

EduStanfordNlpStatsCounters_$2_$1_$1_$1 *create_EduStanfordNlpStatsCounters_$2_$1_$1_$1_initWithEduStanfordNlpStatsCounters_$2_$1_$1_withJavaUtilMap_Entry_(EduStanfordNlpStatsCounters_$2_$1_$1 *outer$, id<JavaUtilMap_Entry> capture$0) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpStatsCounters_$2_$1_$1_$1, initWithEduStanfordNlpStatsCounters_$2_$1_$1_withJavaUtilMap_Entry_, outer$, capture$0)
}

@implementation EduStanfordNlpStatsCounters_$2_$2

- (id<EduStanfordNlpStatsCounter>)create {
  return EduStanfordNlpStatsCounters_fromMapWithJavaUtilMap_withIOSClass_(EduStanfordNlpUtilGenerics_newHashMap(), this$0_->val$type_);
}

- (instancetype)initWithEduStanfordNlpStatsCounters_$2:(EduStanfordNlpStatsCounters_$2 *)outer$ {
  EduStanfordNlpStatsCounters_$2_$2_initWithEduStanfordNlpStatsCounters_$2_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LEduStanfordNlpStatsCounter;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(create);
  methods[1].selector = @selector(initWithEduStanfordNlpStatsCounters_$2:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LEduStanfordNlpStatsCounters_$2;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpStatsCounters_$2_$2_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "()Ledu/stanford/nlp/stats/Counter<TE;>;", "LEduStanfordNlpStatsCounters_$2;", "getFactory", "Ljava/lang/Object;Ledu/stanford/nlp/util/Factory<Ledu/stanford/nlp/stats/Counter<TE;>;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpStatsCounters_$2_$2 = { "", "edu.stanford.nlp.stats", ptrTable, methods, fields, 7, 0x8008, 2, 2, 1, -1, 2, 3, -1 };
  return &_EduStanfordNlpStatsCounters_$2_$2;
}

@end

void EduStanfordNlpStatsCounters_$2_$2_initWithEduStanfordNlpStatsCounters_$2_(EduStanfordNlpStatsCounters_$2_$2 *self, EduStanfordNlpStatsCounters_$2 *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
}

EduStanfordNlpStatsCounters_$2_$2 *new_EduStanfordNlpStatsCounters_$2_$2_initWithEduStanfordNlpStatsCounters_$2_(EduStanfordNlpStatsCounters_$2 *outer$) {
  J2OBJC_NEW_IMPL(EduStanfordNlpStatsCounters_$2_$2, initWithEduStanfordNlpStatsCounters_$2_, outer$)
}

EduStanfordNlpStatsCounters_$2_$2 *create_EduStanfordNlpStatsCounters_$2_$2_initWithEduStanfordNlpStatsCounters_$2_(EduStanfordNlpStatsCounters_$2 *outer$) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpStatsCounters_$2_$2, initWithEduStanfordNlpStatsCounters_$2_, outer$)
}

@implementation EduStanfordNlpStatsCounters_$2_$3

- (id<JavaUtilIterator>)iterator {
  return new_EduStanfordNlpStatsCounters_$2_$3_$1_initWithEduStanfordNlpStatsCounters_$2_$3_(self);
}

- (jint)size {
  return [((id<JavaUtilMap>) nil_chk(this$0_->val$map_)) size];
}

- (instancetype)initWithEduStanfordNlpStatsCounters_$2:(EduStanfordNlpStatsCounters_$2 *)outer$ {
  EduStanfordNlpStatsCounters_$2_$3_initWithEduStanfordNlpStatsCounters_$2_(self, outer$);
  return self;
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(iterator);
  methods[1].selector = @selector(size);
  methods[2].selector = @selector(initWithEduStanfordNlpStatsCounters_$2:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LEduStanfordNlpStatsCounters_$2;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Iterator<TE;>;", "LEduStanfordNlpStatsCounters_$2;", "keySet", "Ljava/util/AbstractSet<TE;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpStatsCounters_$2_$3 = { "", "edu.stanford.nlp.stats", ptrTable, methods, fields, 7, 0x8008, 3, 1, 1, -1, 2, 3, -1 };
  return &_EduStanfordNlpStatsCounters_$2_$3;
}

@end

void EduStanfordNlpStatsCounters_$2_$3_initWithEduStanfordNlpStatsCounters_$2_(EduStanfordNlpStatsCounters_$2_$3 *self, EduStanfordNlpStatsCounters_$2 *outer$) {
  self->this$0_ = outer$;
  JavaUtilAbstractSet_init(self);
}

EduStanfordNlpStatsCounters_$2_$3 *new_EduStanfordNlpStatsCounters_$2_$3_initWithEduStanfordNlpStatsCounters_$2_(EduStanfordNlpStatsCounters_$2 *outer$) {
  J2OBJC_NEW_IMPL(EduStanfordNlpStatsCounters_$2_$3, initWithEduStanfordNlpStatsCounters_$2_, outer$)
}

EduStanfordNlpStatsCounters_$2_$3 *create_EduStanfordNlpStatsCounters_$2_$3_initWithEduStanfordNlpStatsCounters_$2_(EduStanfordNlpStatsCounters_$2 *outer$) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpStatsCounters_$2_$3, initWithEduStanfordNlpStatsCounters_$2_, outer$)
}

@implementation EduStanfordNlpStatsCounters_$2_$3_$1

- (jboolean)hasNext {
  return [((id<JavaUtilIterator>) nil_chk(it_)) hasNext];
}

- (id)next {
  return [((id<JavaUtilIterator>) nil_chk(it_)) next];
}

- (void)remove {
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"Cannot remove from key set");
}

- (instancetype)initWithEduStanfordNlpStatsCounters_$2_$3:(EduStanfordNlpStatsCounters_$2_$3 *)outer$ {
  EduStanfordNlpStatsCounters_$2_$3_$1_initWithEduStanfordNlpStatsCounters_$2_$3_(self, outer$);
  return self;
}

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaUtilIterator_forEachRemainingWithJavaUtilFunctionConsumer_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(hasNext);
  methods[1].selector = @selector(next);
  methods[2].selector = @selector(remove);
  methods[3].selector = @selector(initWithEduStanfordNlpStatsCounters_$2_$3:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "it_", "LJavaUtilIterator;", .constantValue.asLong = 0, 0x0, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "()TE;", "LEduStanfordNlpStatsCounters_$2_$3;", "Ljava/util/Iterator<TE;>;", "iterator", "Ljava/lang/Object;Ljava/util/Iterator<TE;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpStatsCounters_$2_$3_$1 = { "", "edu.stanford.nlp.stats", ptrTable, methods, fields, 7, 0x8008, 4, 1, 1, -1, 3, 4, -1 };
  return &_EduStanfordNlpStatsCounters_$2_$3_$1;
}

@end

void EduStanfordNlpStatsCounters_$2_$3_$1_initWithEduStanfordNlpStatsCounters_$2_$3_(EduStanfordNlpStatsCounters_$2_$3_$1 *self, EduStanfordNlpStatsCounters_$2_$3 *outer$) {
  NSObject_init(self);
  self->it_ = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(outer$->this$0_->val$map_)) keySet])) iterator];
}

EduStanfordNlpStatsCounters_$2_$3_$1 *new_EduStanfordNlpStatsCounters_$2_$3_$1_initWithEduStanfordNlpStatsCounters_$2_$3_(EduStanfordNlpStatsCounters_$2_$3 *outer$) {
  J2OBJC_NEW_IMPL(EduStanfordNlpStatsCounters_$2_$3_$1, initWithEduStanfordNlpStatsCounters_$2_$3_, outer$)
}

EduStanfordNlpStatsCounters_$2_$3_$1 *create_EduStanfordNlpStatsCounters_$2_$3_$1_initWithEduStanfordNlpStatsCounters_$2_$3_(EduStanfordNlpStatsCounters_$2_$3 *outer$) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpStatsCounters_$2_$3_$1, initWithEduStanfordNlpStatsCounters_$2_$3_, outer$)
}

@implementation EduStanfordNlpStatsCounters_$2_$4

- (id<JavaUtilIterator>)iterator {
  return new_EduStanfordNlpStatsCounters_$2_$4_$1_initWithEduStanfordNlpStatsCounters_$2_$4_(self);
}

- (jint)size {
  return [((id<JavaUtilMap>) nil_chk(this$0_->val$map_)) size];
}

- (instancetype)initWithEduStanfordNlpStatsCounters_$2:(EduStanfordNlpStatsCounters_$2 *)outer$ {
  EduStanfordNlpStatsCounters_$2_$4_initWithEduStanfordNlpStatsCounters_$2_(self, outer$);
  return self;
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(iterator);
  methods[1].selector = @selector(size);
  methods[2].selector = @selector(initWithEduStanfordNlpStatsCounters_$2:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LEduStanfordNlpStatsCounters_$2;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Iterator<Ljava/lang/Double;>;", "LEduStanfordNlpStatsCounters_$2;", "values", "Ljava/util/AbstractCollection<Ljava/lang/Double;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpStatsCounters_$2_$4 = { "", "edu.stanford.nlp.stats", ptrTable, methods, fields, 7, 0x8008, 3, 1, 1, -1, 2, 3, -1 };
  return &_EduStanfordNlpStatsCounters_$2_$4;
}

@end

void EduStanfordNlpStatsCounters_$2_$4_initWithEduStanfordNlpStatsCounters_$2_(EduStanfordNlpStatsCounters_$2_$4 *self, EduStanfordNlpStatsCounters_$2 *outer$) {
  self->this$0_ = outer$;
  JavaUtilAbstractCollection_init(self);
}

EduStanfordNlpStatsCounters_$2_$4 *new_EduStanfordNlpStatsCounters_$2_$4_initWithEduStanfordNlpStatsCounters_$2_(EduStanfordNlpStatsCounters_$2 *outer$) {
  J2OBJC_NEW_IMPL(EduStanfordNlpStatsCounters_$2_$4, initWithEduStanfordNlpStatsCounters_$2_, outer$)
}

EduStanfordNlpStatsCounters_$2_$4 *create_EduStanfordNlpStatsCounters_$2_$4_initWithEduStanfordNlpStatsCounters_$2_(EduStanfordNlpStatsCounters_$2 *outer$) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpStatsCounters_$2_$4, initWithEduStanfordNlpStatsCounters_$2_, outer$)
}

@implementation EduStanfordNlpStatsCounters_$2_$4_$1

- (jboolean)hasNext {
  return [((id<JavaUtilIterator>) nil_chk(it_)) hasNext];
}

- (JavaLangDouble *)next {
  return JavaLangDouble_valueOfWithDouble_([((NSNumber *) nil_chk([((id<JavaUtilIterator>) nil_chk(it_)) next])) doubleValue]);
}

- (void)remove {
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"Cannot remove from values collection");
}

- (instancetype)initWithEduStanfordNlpStatsCounters_$2_$4:(EduStanfordNlpStatsCounters_$2_$4 *)outer$ {
  EduStanfordNlpStatsCounters_$2_$4_$1_initWithEduStanfordNlpStatsCounters_$2_$4_(self, outer$);
  return self;
}

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaUtilIterator_forEachRemainingWithJavaUtilFunctionConsumer_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangDouble;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(hasNext);
  methods[1].selector = @selector(next);
  methods[2].selector = @selector(remove);
  methods[3].selector = @selector(initWithEduStanfordNlpStatsCounters_$2_$4:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "it_", "LJavaUtilIterator;", .constantValue.asLong = 0, 0x10, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpStatsCounters_$2_$4;", "Ljava/util/Iterator<TN;>;", "iterator", "Ljava/lang/Object;Ljava/util/Iterator<Ljava/lang/Double;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpStatsCounters_$2_$4_$1 = { "", "edu.stanford.nlp.stats", ptrTable, methods, fields, 7, 0x8008, 4, 1, 0, -1, 2, 3, -1 };
  return &_EduStanfordNlpStatsCounters_$2_$4_$1;
}

@end

void EduStanfordNlpStatsCounters_$2_$4_$1_initWithEduStanfordNlpStatsCounters_$2_$4_(EduStanfordNlpStatsCounters_$2_$4_$1 *self, EduStanfordNlpStatsCounters_$2_$4 *outer$) {
  NSObject_init(self);
  self->it_ = [((id<JavaUtilCollection>) nil_chk([((id<JavaUtilMap>) nil_chk(outer$->this$0_->val$map_)) values])) iterator];
}

EduStanfordNlpStatsCounters_$2_$4_$1 *new_EduStanfordNlpStatsCounters_$2_$4_$1_initWithEduStanfordNlpStatsCounters_$2_$4_(EduStanfordNlpStatsCounters_$2_$4 *outer$) {
  J2OBJC_NEW_IMPL(EduStanfordNlpStatsCounters_$2_$4_$1, initWithEduStanfordNlpStatsCounters_$2_$4_, outer$)
}

EduStanfordNlpStatsCounters_$2_$4_$1 *create_EduStanfordNlpStatsCounters_$2_$4_$1_initWithEduStanfordNlpStatsCounters_$2_$4_(EduStanfordNlpStatsCounters_$2_$4 *outer$) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpStatsCounters_$2_$4_$1, initWithEduStanfordNlpStatsCounters_$2_$4_, outer$)
}

@implementation EduStanfordNlpStatsCounters_$3

- (jint)size {
  return [((id<EduStanfordNlpStatsCounter>) nil_chk(val$counter_)) size];
}

- (id<JavaUtilSet>)entrySet {
  return [((id<EduStanfordNlpStatsCounter>) nil_chk(val$counter_)) entrySet];
}

- (jboolean)containsKeyWithId:(id)key {
  return [((id<EduStanfordNlpStatsCounter>) nil_chk(val$counter_)) containsKeyWithId:key];
}

- (JavaLangDouble *)getWithId:(id)key {
  return JavaLangDouble_valueOfWithDouble_([((id<EduStanfordNlpStatsCounter>) nil_chk(val$counter_)) getCountWithId:key]);
}

- (JavaLangDouble *)putWithId:(id)key
                       withId:(JavaLangDouble *)value {
  jdouble last = [((id<EduStanfordNlpStatsCounter>) nil_chk(val$counter_)) getCountWithId:key];
  [val$counter_ setCountWithId:key withDouble:[((JavaLangDouble *) nil_chk(value)) doubleValue]];
  return JavaLangDouble_valueOfWithDouble_(last);
}

- (JavaLangDouble *)removeWithId:(id)key {
  return JavaLangDouble_valueOfWithDouble_([((id<EduStanfordNlpStatsCounter>) nil_chk(val$counter_)) removeWithId:key]);
}

- (id<JavaUtilSet>)keySet {
  return [((id<EduStanfordNlpStatsCounter>) nil_chk(val$counter_)) keySet];
}

- (instancetype)initWithEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)capture$0 {
  EduStanfordNlpStatsCounters_$3_initWithEduStanfordNlpStatsCounter_(self, capture$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LJavaLangDouble;", 0x1, 3, 2, -1, 4, -1, -1 },
    { NULL, "LJavaLangDouble;", 0x1, 5, 6, -1, 7, -1, -1 },
    { NULL, "LJavaLangDouble;", 0x1, 8, 2, -1, 4, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 9, -1, -1 },
    { NULL, NULL, 0x0, -1, 10, -1, 11, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(size);
  methods[1].selector = @selector(entrySet);
  methods[2].selector = @selector(containsKeyWithId:);
  methods[3].selector = @selector(getWithId:);
  methods[4].selector = @selector(putWithId:withId:);
  methods[5].selector = @selector(removeWithId:);
  methods[6].selector = @selector(keySet);
  methods[7].selector = @selector(initWithEduStanfordNlpStatsCounter:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$counter_", "LEduStanfordNlpStatsCounter;", .constantValue.asLong = 0, 0x1012, -1, -1, 12, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Set<Ljava/util/Map$Entry<TE;Ljava/lang/Double;>;>;", "containsKey", "LNSObject;", "get", "(Ljava/lang/Object;)Ljava/lang/Double;", "put", "LNSObject;LJavaLangDouble;", "(TE;Ljava/lang/Double;)Ljava/lang/Double;", "remove", "()Ljava/util/Set<TE;>;", "LEduStanfordNlpStatsCounter;", "(Ledu/stanford/nlp/stats/Counter<TE;>;)V", "Ledu/stanford/nlp/stats/Counter<TE;>;", "LEduStanfordNlpStatsCounters;", "asMapWithEduStanfordNlpStatsCounter:", "Ljava/util/AbstractMap<TE;Ljava/lang/Double;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpStatsCounters_$3 = { "", "edu.stanford.nlp.stats", ptrTable, methods, fields, 7, 0x8008, 8, 1, 13, -1, 14, 15, -1 };
  return &_EduStanfordNlpStatsCounters_$3;
}

@end

void EduStanfordNlpStatsCounters_$3_initWithEduStanfordNlpStatsCounter_(EduStanfordNlpStatsCounters_$3 *self, id<EduStanfordNlpStatsCounter> capture$0) {
  self->val$counter_ = capture$0;
  JavaUtilAbstractMap_init(self);
}

EduStanfordNlpStatsCounters_$3 *new_EduStanfordNlpStatsCounters_$3_initWithEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> capture$0) {
  J2OBJC_NEW_IMPL(EduStanfordNlpStatsCounters_$3, initWithEduStanfordNlpStatsCounter_, capture$0)
}

EduStanfordNlpStatsCounters_$3 *create_EduStanfordNlpStatsCounters_$3_initWithEduStanfordNlpStatsCounter_(id<EduStanfordNlpStatsCounter> capture$0) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpStatsCounters_$3, initWithEduStanfordNlpStatsCounter_, capture$0)
}
