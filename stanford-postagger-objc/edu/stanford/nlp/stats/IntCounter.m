//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/stats/IntCounter.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/stats/AbstractCounter.h"
#include "edu/stanford/nlp/stats/Counter.h"
#include "edu/stanford/nlp/stats/Counters.h"
#include "edu/stanford/nlp/stats/IntCounter.h"
#include "edu/stanford/nlp/util/ErasureUtils.h"
#include "edu/stanford/nlp/util/Factory.h"
#include "edu/stanford/nlp/util/Generics.h"
#include "edu/stanford/nlp/util/MapFactory.h"
#include "edu/stanford/nlp/util/MutableInteger.h"
#include "edu/stanford/nlp/util/logging/PrettyLogger.h"
#include "edu/stanford/nlp/util/logging/Redwood.h"
#include "java/lang/Comparable.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/text/NumberFormat.h"
#include "java/util/AbstractCollection.h"
#include "java/util/AbstractSet.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/Comparator.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/function/Consumer.h"
#include "java/util/function/Function.h"
#include "java/util/function/Predicate.h"
#include "java/util/function/ToDoubleFunction.h"
#include "java/util/function/ToIntFunction.h"
#include "java/util/function/ToLongFunction.h"

@interface EduStanfordNlpStatsIntCounter () {
 @public
  id<JavaUtilMap> map_;
  EduStanfordNlpUtilMapFactory *mapFactory_;
  jint totalCount_;
  jint defaultValue_;
  EduStanfordNlpUtilMutableInteger *tempMInteger_;
}

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpStatsIntCounter, map_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(EduStanfordNlpStatsIntCounter, mapFactory_, EduStanfordNlpUtilMapFactory *)
J2OBJC_FIELD_SETTER(EduStanfordNlpStatsIntCounter, tempMInteger_, EduStanfordNlpUtilMutableInteger *)

inline id<JavaUtilComparator> EduStanfordNlpStatsIntCounter_get_naturalComparator();
static id<JavaUtilComparator> EduStanfordNlpStatsIntCounter_naturalComparator;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpStatsIntCounter, naturalComparator, id<JavaUtilComparator>)

inline jlong EduStanfordNlpStatsIntCounter_get_serialVersionUID();
#define EduStanfordNlpStatsIntCounter_serialVersionUID 4LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpStatsIntCounter, serialVersionUID, jlong)

@interface EduStanfordNlpStatsIntCounter_NaturalComparator : NSObject < JavaUtilComparator >

- (jint)compareWithId:(id)o1
               withId:(id)o2;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpStatsIntCounter_NaturalComparator)

__attribute__((unused)) static void EduStanfordNlpStatsIntCounter_NaturalComparator_init(EduStanfordNlpStatsIntCounter_NaturalComparator *self);

__attribute__((unused)) static EduStanfordNlpStatsIntCounter_NaturalComparator *new_EduStanfordNlpStatsIntCounter_NaturalComparator_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpStatsIntCounter_NaturalComparator *create_EduStanfordNlpStatsIntCounter_NaturalComparator_init();

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpStatsIntCounter_NaturalComparator)

@interface EduStanfordNlpStatsIntCounter_$1 : JavaUtilAbstractSet {
 @public
  EduStanfordNlpStatsIntCounter *this$0_;
}

- (id<JavaUtilIterator>)iterator;

- (jint)size;

- (instancetype)initWithEduStanfordNlpStatsIntCounter:(EduStanfordNlpStatsIntCounter *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpStatsIntCounter_$1)

J2OBJC_FIELD_SETTER(EduStanfordNlpStatsIntCounter_$1, this$0_, EduStanfordNlpStatsIntCounter *)

__attribute__((unused)) static void EduStanfordNlpStatsIntCounter_$1_initWithEduStanfordNlpStatsIntCounter_(EduStanfordNlpStatsIntCounter_$1 *self, EduStanfordNlpStatsIntCounter *outer$);

__attribute__((unused)) static EduStanfordNlpStatsIntCounter_$1 *new_EduStanfordNlpStatsIntCounter_$1_initWithEduStanfordNlpStatsIntCounter_(EduStanfordNlpStatsIntCounter *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpStatsIntCounter_$1 *create_EduStanfordNlpStatsIntCounter_$1_initWithEduStanfordNlpStatsIntCounter_(EduStanfordNlpStatsIntCounter *outer$);

@interface EduStanfordNlpStatsIntCounter_$1_$1 : NSObject < JavaUtilIterator > {
 @public
  EduStanfordNlpStatsIntCounter_$1 *this$0_;
  id<JavaUtilIterator> inner_;
}

- (jboolean)hasNext;

- (id<JavaUtilMap_Entry>)next;

- (void)remove;

- (instancetype)initWithEduStanfordNlpStatsIntCounter_$1:(EduStanfordNlpStatsIntCounter_$1 *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpStatsIntCounter_$1_$1)

J2OBJC_FIELD_SETTER(EduStanfordNlpStatsIntCounter_$1_$1, this$0_, EduStanfordNlpStatsIntCounter_$1 *)
J2OBJC_FIELD_SETTER(EduStanfordNlpStatsIntCounter_$1_$1, inner_, id<JavaUtilIterator>)

__attribute__((unused)) static void EduStanfordNlpStatsIntCounter_$1_$1_initWithEduStanfordNlpStatsIntCounter_$1_(EduStanfordNlpStatsIntCounter_$1_$1 *self, EduStanfordNlpStatsIntCounter_$1 *outer$);

__attribute__((unused)) static EduStanfordNlpStatsIntCounter_$1_$1 *new_EduStanfordNlpStatsIntCounter_$1_$1_initWithEduStanfordNlpStatsIntCounter_$1_(EduStanfordNlpStatsIntCounter_$1 *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpStatsIntCounter_$1_$1 *create_EduStanfordNlpStatsIntCounter_$1_$1_initWithEduStanfordNlpStatsIntCounter_$1_(EduStanfordNlpStatsIntCounter_$1 *outer$);

@interface EduStanfordNlpStatsIntCounter_$1_$1_$1 : NSObject < JavaUtilMap_Entry > {
 @public
  EduStanfordNlpStatsIntCounter_$1_$1 *this$0_;
  id<JavaUtilMap_Entry> e_;
}

- (id)getKey;

- (JavaLangDouble *)getValue;

- (JavaLangDouble *)setValueWithId:(JavaLangDouble *)value;

- (instancetype)initWithEduStanfordNlpStatsIntCounter_$1_$1:(EduStanfordNlpStatsIntCounter_$1_$1 *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpStatsIntCounter_$1_$1_$1)

J2OBJC_FIELD_SETTER(EduStanfordNlpStatsIntCounter_$1_$1_$1, this$0_, EduStanfordNlpStatsIntCounter_$1_$1 *)
J2OBJC_FIELD_SETTER(EduStanfordNlpStatsIntCounter_$1_$1_$1, e_, id<JavaUtilMap_Entry>)

__attribute__((unused)) static void EduStanfordNlpStatsIntCounter_$1_$1_$1_initWithEduStanfordNlpStatsIntCounter_$1_$1_(EduStanfordNlpStatsIntCounter_$1_$1_$1 *self, EduStanfordNlpStatsIntCounter_$1_$1 *outer$);

__attribute__((unused)) static EduStanfordNlpStatsIntCounter_$1_$1_$1 *new_EduStanfordNlpStatsIntCounter_$1_$1_$1_initWithEduStanfordNlpStatsIntCounter_$1_$1_(EduStanfordNlpStatsIntCounter_$1_$1 *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpStatsIntCounter_$1_$1_$1 *create_EduStanfordNlpStatsIntCounter_$1_$1_$1_initWithEduStanfordNlpStatsIntCounter_$1_$1_(EduStanfordNlpStatsIntCounter_$1_$1 *outer$);

@interface EduStanfordNlpStatsIntCounter_$2 : NSObject < EduStanfordNlpUtilFactory > {
 @public
  EduStanfordNlpStatsIntCounter *this$0_;
}

- (id<EduStanfordNlpStatsCounter>)create;

- (instancetype)initWithEduStanfordNlpStatsIntCounter:(EduStanfordNlpStatsIntCounter *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpStatsIntCounter_$2)

J2OBJC_FIELD_SETTER(EduStanfordNlpStatsIntCounter_$2, this$0_, EduStanfordNlpStatsIntCounter *)

inline jlong EduStanfordNlpStatsIntCounter_$2_get_serialVersionUID();
#define EduStanfordNlpStatsIntCounter_$2_serialVersionUID 7470763055803428477LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpStatsIntCounter_$2, serialVersionUID, jlong)

__attribute__((unused)) static void EduStanfordNlpStatsIntCounter_$2_initWithEduStanfordNlpStatsIntCounter_(EduStanfordNlpStatsIntCounter_$2 *self, EduStanfordNlpStatsIntCounter *outer$);

__attribute__((unused)) static EduStanfordNlpStatsIntCounter_$2 *new_EduStanfordNlpStatsIntCounter_$2_initWithEduStanfordNlpStatsIntCounter_(EduStanfordNlpStatsIntCounter *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpStatsIntCounter_$2 *create_EduStanfordNlpStatsIntCounter_$2_initWithEduStanfordNlpStatsIntCounter_(EduStanfordNlpStatsIntCounter *outer$);

@interface EduStanfordNlpStatsIntCounter_$3 : JavaUtilAbstractCollection {
 @public
  EduStanfordNlpStatsIntCounter *this$0_;
}

- (id<JavaUtilIterator>)iterator;

- (jint)size;

- (instancetype)initWithEduStanfordNlpStatsIntCounter:(EduStanfordNlpStatsIntCounter *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpStatsIntCounter_$3)

J2OBJC_FIELD_SETTER(EduStanfordNlpStatsIntCounter_$3, this$0_, EduStanfordNlpStatsIntCounter *)

__attribute__((unused)) static void EduStanfordNlpStatsIntCounter_$3_initWithEduStanfordNlpStatsIntCounter_(EduStanfordNlpStatsIntCounter_$3 *self, EduStanfordNlpStatsIntCounter *outer$);

__attribute__((unused)) static EduStanfordNlpStatsIntCounter_$3 *new_EduStanfordNlpStatsIntCounter_$3_initWithEduStanfordNlpStatsIntCounter_(EduStanfordNlpStatsIntCounter *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpStatsIntCounter_$3 *create_EduStanfordNlpStatsIntCounter_$3_initWithEduStanfordNlpStatsIntCounter_(EduStanfordNlpStatsIntCounter *outer$);

@interface EduStanfordNlpStatsIntCounter_$3_$1 : NSObject < JavaUtilIterator > {
 @public
  id<JavaUtilIterator> inner_;
}

- (jboolean)hasNext;

- (JavaLangDouble *)next;

- (void)remove;

- (instancetype)initWithEduStanfordNlpStatsIntCounter_$3:(EduStanfordNlpStatsIntCounter_$3 *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpStatsIntCounter_$3_$1)

J2OBJC_FIELD_SETTER(EduStanfordNlpStatsIntCounter_$3_$1, inner_, id<JavaUtilIterator>)

__attribute__((unused)) static void EduStanfordNlpStatsIntCounter_$3_$1_initWithEduStanfordNlpStatsIntCounter_$3_(EduStanfordNlpStatsIntCounter_$3_$1 *self, EduStanfordNlpStatsIntCounter_$3 *outer$);

__attribute__((unused)) static EduStanfordNlpStatsIntCounter_$3_$1 *new_EduStanfordNlpStatsIntCounter_$3_$1_initWithEduStanfordNlpStatsIntCounter_$3_(EduStanfordNlpStatsIntCounter_$3 *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpStatsIntCounter_$3_$1 *create_EduStanfordNlpStatsIntCounter_$3_$1_initWithEduStanfordNlpStatsIntCounter_$3_(EduStanfordNlpStatsIntCounter_$3 *outer$);

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpStatsIntCounter)

@implementation EduStanfordNlpStatsIntCounter

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpStatsIntCounter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithEduStanfordNlpUtilMapFactory:(EduStanfordNlpUtilMapFactory *)mapFactory {
  EduStanfordNlpStatsIntCounter_initWithEduStanfordNlpUtilMapFactory_(self, mapFactory);
  return self;
}

- (instancetype)initWithEduStanfordNlpStatsIntCounter:(EduStanfordNlpStatsIntCounter *)c {
  EduStanfordNlpStatsIntCounter_initWithEduStanfordNlpStatsIntCounter_(self, c);
  return self;
}

- (EduStanfordNlpUtilMapFactory *)getMapFactory {
  return EduStanfordNlpUtilErasureUtils_uncheckedCastWithId_(mapFactory_);
}

- (void)setDefaultReturnValueWithDouble:(jdouble)rv {
  defaultValue_ = JreFpToInt(rv);
}

- (void)setDefaultReturnValueWithInt:(jint)rv {
  defaultValue_ = rv;
}

- (jdouble)defaultReturnValue {
  return defaultValue_;
}

- (jint)totalIntCount {
  return totalCount_;
}

- (jdouble)totalDoubleCount {
  return totalCount_;
}

- (jint)totalIntCountWithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)filter {
  jint total = 0;
  for (id __strong key in nil_chk([((id<JavaUtilMap>) nil_chk(map_)) keySet])) {
    if ([((id<JavaUtilFunctionPredicate>) nil_chk(filter)) testWithId:key]) {
      total += [self getIntCountWithId:key];
    }
  }
  return (total);
}

- (jdouble)totalDoubleCountWithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)filter {
  return [self totalIntCountWithJavaUtilFunctionPredicate:filter];
}

- (jdouble)totalCountWithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)filter {
  return [self totalDoubleCountWithJavaUtilFunctionPredicate:filter];
}

- (jdouble)averageCount {
  return [self totalCount] / [((id<JavaUtilMap>) nil_chk(map_)) size];
}

- (jdouble)getCountWithId:(id)key {
  return [self getIntCountWithId:key];
}

- (NSString *)getCountAsStringWithId:(id)key {
  return JavaLangInteger_toStringWithInt_([self getIntCountWithId:key]);
}

- (jint)getIntCountWithId:(id)key {
  EduStanfordNlpUtilMutableInteger *count = [((id<JavaUtilMap>) nil_chk(map_)) getWithId:key];
  if (count == nil) {
    return defaultValue_;
  }
  return [count intValue];
}

- (jdouble)getNormalizedCountWithId:(id)key {
  return [self getCountWithId:key] / ([self totalCount]);
}

- (void)setCountWithId:(id)key
               withInt:(jint)count {
  if (tempMInteger_ == nil) {
    tempMInteger_ = new_EduStanfordNlpUtilMutableInteger_init();
  }
  [tempMInteger_ setWithInt:count];
  tempMInteger_ = [((id<JavaUtilMap>) nil_chk(map_)) putWithId:key withId:tempMInteger_];
  totalCount_ += count;
  if (tempMInteger_ != nil) {
    totalCount_ -= [tempMInteger_ intValue];
  }
}

- (void)setCountWithId:(id)key
          withNSString:(NSString *)s {
  [self setCountWithId:key withInt:JavaLangInteger_parseIntWithNSString_(s)];
}

- (void)setCountsWithJavaUtilCollection:(id<JavaUtilCollection>)keys
                                withInt:(jint)count {
  for (id __strong key in nil_chk(keys)) {
    [self setCountWithId:key withInt:count];
  }
}

- (jint)incrementCountWithId:(id)key
                     withInt:(jint)count {
  if (tempMInteger_ == nil) {
    tempMInteger_ = new_EduStanfordNlpUtilMutableInteger_init();
  }
  EduStanfordNlpUtilMutableInteger *oldMInteger = [((id<JavaUtilMap>) nil_chk(map_)) putWithId:key withId:tempMInteger_];
  totalCount_ += count;
  if (oldMInteger != nil) {
    count += [oldMInteger intValue];
  }
  [((EduStanfordNlpUtilMutableInteger *) nil_chk(tempMInteger_)) setWithInt:count];
  tempMInteger_ = oldMInteger;
  return count;
}

- (jdouble)incrementCountWithId:(id)key {
  return [self incrementCountWithId:key withInt:1];
}

- (void)incrementCountsWithJavaUtilCollection:(id<JavaUtilCollection>)keys
                                      withInt:(jint)count {
  for (id __strong key in nil_chk(keys)) {
    [self incrementCountWithId:key withInt:count];
  }
}

- (void)incrementCountsWithJavaUtilCollection:(id<JavaUtilCollection>)keys {
  [self incrementCountsWithJavaUtilCollection:keys withInt:1];
}

- (jint)decrementCountWithId:(id)key
                     withInt:(jint)count {
  return [self incrementCountWithId:key withInt:-count];
}

- (jdouble)decrementCountWithId:(id)key {
  return [self decrementCountWithId:key withInt:1];
}

- (void)decrementCountsWithJavaUtilCollection:(id<JavaUtilCollection>)keys
                                      withInt:(jint)count {
  [self incrementCountsWithJavaUtilCollection:keys withInt:-count];
}

- (void)decrementCountsWithJavaUtilCollection:(id<JavaUtilCollection>)keys {
  [self decrementCountsWithJavaUtilCollection:keys withInt:1];
}

- (void)addAllWithEduStanfordNlpStatsIntCounter:(EduStanfordNlpStatsIntCounter *)counter {
  for (id __strong key in nil_chk([((EduStanfordNlpStatsIntCounter *) nil_chk(counter)) keySet])) {
    jint count = [counter getIntCountWithId:key];
    [self incrementCountWithId:key withInt:count];
  }
}

- (void)subtractAllWithEduStanfordNlpStatsIntCounter:(EduStanfordNlpStatsIntCounter *)counter {
  for (id __strong key in nil_chk([((id<JavaUtilMap>) nil_chk(map_)) keySet])) {
    [self decrementCountWithId:key withInt:[((EduStanfordNlpStatsIntCounter *) nil_chk(counter)) getIntCountWithId:key]];
  }
}

- (jboolean)containsKeyWithId:(id)key {
  return [((id<JavaUtilMap>) nil_chk(map_)) containsKeyWithId:key];
}

- (jdouble)removeWithId:(id)key {
  JreMinusAssignIntD(&totalCount_, [self getCountWithId:key]);
  EduStanfordNlpUtilMutableInteger *val = [((id<JavaUtilMap>) nil_chk(map_)) removeWithId:key];
  if (val == nil) {
    return JavaLangDouble_NaN;
  }
  else {
    return [val doubleValue];
  }
}

- (void)removeAllWithJavaUtilCollection:(id<JavaUtilCollection>)c {
  for (id __strong key in nil_chk(c)) {
    [self removeWithId:key];
  }
}

- (void)clear {
  [((id<JavaUtilMap>) nil_chk(map_)) clear];
  totalCount_ = 0;
}

- (jint)size {
  return [((id<JavaUtilMap>) nil_chk(map_)) size];
}

- (jboolean)isEmpty {
  return [self size] == 0;
}

- (id<JavaUtilSet>)keySet {
  return [((id<JavaUtilMap>) nil_chk(map_)) keySet];
}

- (id<JavaUtilSet>)entrySet {
  return new_EduStanfordNlpStatsIntCounter_$1_initWithEduStanfordNlpStatsIntCounter_(self);
}

- (jboolean)isEqual:(id)o {
  if (self == o) {
    return true;
  }
  if (!([o isKindOfClass:[EduStanfordNlpStatsIntCounter class]])) {
    return false;
  }
  EduStanfordNlpStatsIntCounter *counter = (EduStanfordNlpStatsIntCounter *) cast_chk(o, [EduStanfordNlpStatsIntCounter class]);
  return [((id<JavaUtilMap>) nil_chk(map_)) isEqual:((EduStanfordNlpStatsIntCounter *) nil_chk(counter))->map_];
}

- (NSUInteger)hash {
  return ((jint) [((id<JavaUtilMap>) nil_chk(map_)) hash]);
}

- (NSString *)description {
  return [((id<JavaUtilMap>) nil_chk(map_)) description];
}

- (NSString *)toStringWithJavaTextNumberFormat:(JavaTextNumberFormat *)nf
                                  withNSString:(NSString *)preAppend
                                  withNSString:(NSString *)postAppend
                                  withNSString:(NSString *)keyValSeparator
                                  withNSString:(NSString *)itemSeparator {
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  (void) [sb appendWithNSString:preAppend];
  id<JavaUtilList> list = new_JavaUtilArrayList_initWithJavaUtilCollection_([((id<JavaUtilMap>) nil_chk(map_)) keySet]);
  @try {
    JavaUtilCollections_sortWithJavaUtilList_(list);
  }
  @catch (JavaLangException *e) {
  }
  for (id<JavaUtilIterator> iter = [list iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) {
    id key = [iter next];
    EduStanfordNlpUtilMutableInteger *d = [((id<JavaUtilMap>) nil_chk(map_)) getWithId:key];
    (void) [sb appendWithNSString:JreStrcat("@$", key, keyValSeparator)];
    (void) [sb appendWithNSString:[((JavaTextNumberFormat *) nil_chk(nf)) formatWithId:d]];
    if ([iter hasNext]) {
      (void) [sb appendWithNSString:itemSeparator];
    }
  }
  (void) [sb appendWithNSString:postAppend];
  return [sb description];
}

- (NSString *)toStringWithJavaTextNumberFormat:(JavaTextNumberFormat *)nf {
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  (void) [sb appendWithNSString:@"{"];
  id<JavaUtilList> list = new_JavaUtilArrayList_initWithJavaUtilCollection_([((id<JavaUtilMap>) nil_chk(map_)) keySet]);
  @try {
    JavaUtilCollections_sortWithJavaUtilList_(list);
  }
  @catch (JavaLangException *e) {
  }
  for (id<JavaUtilIterator> iter = [list iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) {
    id key = [iter next];
    EduStanfordNlpUtilMutableInteger *d = [((id<JavaUtilMap>) nil_chk(map_)) getWithId:key];
    (void) [sb appendWithNSString:JreStrcat("@C", key, '=')];
    (void) [sb appendWithNSString:[((JavaTextNumberFormat *) nil_chk(nf)) formatWithId:d]];
    if ([iter hasNext]) {
      (void) [sb appendWithNSString:@", "];
    }
  }
  (void) [sb appendWithNSString:@"}"];
  return [sb description];
}

- (id)clone {
  return new_EduStanfordNlpStatsIntCounter_initWithEduStanfordNlpStatsIntCounter_(self);
}

- (void)removeZeroCounts {
  for (id<JavaUtilIterator> iter = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(map_)) keySet])) iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) {
    if ([self getCountWithId:[iter next]] == 0) {
      [iter remove];
    }
  }
}

- (jint)max {
  jint max = JavaLangInteger_MIN_VALUE;
  for (id __strong key in nil_chk([((id<JavaUtilMap>) nil_chk(map_)) keySet])) {
    max = JavaLangMath_maxWithInt_withInt_(max, [self getIntCountWithId:key]);
  }
  return max;
}

- (jdouble)doubleMax {
  return [self max];
}

- (jint)min {
  jint min = JavaLangInteger_MAX_VALUE;
  for (id __strong key in nil_chk([((id<JavaUtilMap>) nil_chk(map_)) keySet])) {
    min = JavaLangMath_minWithInt_withInt_(min, [self getIntCountWithId:key]);
  }
  return min;
}

- (id)argmaxWithJavaUtilComparator:(id<JavaUtilComparator>)tieBreaker {
  jint max = JavaLangInteger_MIN_VALUE;
  id argmax = nil;
  for (id __strong key in nil_chk([self keySet])) {
    jint count = [self getIntCountWithId:key];
    if (argmax == nil || count > max || (count == max && [((id<JavaUtilComparator>) nil_chk(tieBreaker)) compareWithId:key withId:argmax] < 0)) {
      max = count;
      argmax = key;
    }
  }
  return argmax;
}

- (id)argmax {
  return [self argmaxWithJavaUtilComparator:EduStanfordNlpUtilErasureUtils_uncheckedCastWithId_(EduStanfordNlpStatsIntCounter_naturalComparator)];
}

- (id)argminWithJavaUtilComparator:(id<JavaUtilComparator>)tieBreaker {
  jint min = JavaLangInteger_MAX_VALUE;
  id argmin = nil;
  for (id __strong key in nil_chk([((id<JavaUtilMap>) nil_chk(map_)) keySet])) {
    jint count = [self getIntCountWithId:key];
    if (argmin == nil || count < min || (count == min && [((id<JavaUtilComparator>) nil_chk(tieBreaker)) compareWithId:key withId:argmin] < 0)) {
      min = count;
      argmin = key;
    }
  }
  return argmin;
}

- (id)argmin {
  return [self argminWithJavaUtilComparator:EduStanfordNlpUtilErasureUtils_uncheckedCastWithId_(EduStanfordNlpStatsIntCounter_naturalComparator)];
}

- (id<JavaUtilSet>)keysAboveWithInt:(jint)countThreshold {
  id<JavaUtilSet> keys = EduStanfordNlpUtilGenerics_newHashSet();
  for (id __strong key in nil_chk([((id<JavaUtilMap>) nil_chk(map_)) keySet])) {
    if ([self getIntCountWithId:key] >= countThreshold) {
      [((id<JavaUtilSet>) nil_chk(keys)) addWithId:key];
    }
  }
  return keys;
}

- (id<JavaUtilSet>)keysBelowWithInt:(jint)countThreshold {
  id<JavaUtilSet> keys = EduStanfordNlpUtilGenerics_newHashSet();
  for (id __strong key in nil_chk([((id<JavaUtilMap>) nil_chk(map_)) keySet])) {
    if ([self getIntCountWithId:key] <= countThreshold) {
      [((id<JavaUtilSet>) nil_chk(keys)) addWithId:key];
    }
  }
  return keys;
}

- (id<JavaUtilSet>)keysAtWithInt:(jint)count {
  id<JavaUtilSet> keys = EduStanfordNlpUtilGenerics_newHashSet();
  for (id __strong key in nil_chk([((id<JavaUtilMap>) nil_chk(map_)) keySet])) {
    if ([self getIntCountWithId:key] == count) {
      [((id<JavaUtilSet>) nil_chk(keys)) addWithId:key];
    }
  }
  return keys;
}

- (id<EduStanfordNlpUtilFactory>)getFactory {
  return new_EduStanfordNlpStatsIntCounter_$2_initWithEduStanfordNlpStatsIntCounter_(self);
}

- (void)setCountWithId:(id)key
            withDouble:(jdouble)value {
  [self setCountWithId:key withInt:JreFpToInt(value)];
}

- (jdouble)incrementCountWithId:(id)key
                     withDouble:(jdouble)value {
  [self incrementCountWithId:key withInt:JreFpToInt(value)];
  return [self getCountWithId:key];
}

- (jdouble)totalCount {
  return [self totalDoubleCount];
}

- (id<JavaUtilCollection>)values {
  return new_EduStanfordNlpStatsIntCounter_$3_initWithEduStanfordNlpStatsIntCounter_(self);
}

- (id<JavaUtilIterator>)iterator {
  return [((id<JavaUtilSet>) nil_chk([self keySet])) iterator];
}

- (void)prettyLogWithEduStanfordNlpUtilLoggingRedwood_RedwoodChannels:(EduStanfordNlpUtilLoggingRedwood_RedwoodChannels *)channels
                                                         withNSString:(NSString *)description_ {
  EduStanfordNlpUtilLoggingPrettyLogger_logWithEduStanfordNlpUtilLoggingRedwood_RedwoodChannels_withNSString_withId_(channels, description_, EduStanfordNlpStatsCounters_asMapWithEduStanfordNlpStatsCounter_(self));
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, 3, -1, -1 },
    { NULL, "LEduStanfordNlpUtilMapFactory;", 0x1, -1, -1, -1, 4, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 7, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 8, 9, -1, 10, -1, -1 },
    { NULL, "D", 0x1, 11, 9, -1, 12, -1, -1 },
    { NULL, "D", 0x1, 13, 9, -1, 12, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 16, 15, -1, 17, -1, -1 },
    { NULL, "I", 0x1, 18, 15, -1, -1, -1, -1 },
    { NULL, "D", 0x1, 19, 15, -1, 20, -1, -1 },
    { NULL, "V", 0x1, 21, 22, -1, 23, -1, -1 },
    { NULL, "V", 0x1, 21, 24, -1, 25, -1, -1 },
    { NULL, "V", 0x1, 26, 27, -1, 28, -1, -1 },
    { NULL, "I", 0x1, 29, 22, -1, 30, -1, -1 },
    { NULL, "D", 0x1, 29, 15, -1, 20, -1, -1 },
    { NULL, "V", 0x1, 31, 27, -1, 28, -1, -1 },
    { NULL, "V", 0x1, 31, 32, -1, 33, -1, -1 },
    { NULL, "I", 0x1, 34, 22, -1, 30, -1, -1 },
    { NULL, "D", 0x1, 34, 15, -1, 20, -1, -1 },
    { NULL, "V", 0x1, 35, 27, -1, 28, -1, -1 },
    { NULL, "V", 0x1, 35, 32, -1, 33, -1, -1 },
    { NULL, "V", 0x1, 36, 2, -1, 3, -1, -1 },
    { NULL, "V", 0x1, 37, 2, -1, 3, -1, -1 },
    { NULL, "Z", 0x1, 38, 15, -1, 39, -1, -1 },
    { NULL, "D", 0x1, 40, 15, -1, 20, -1, -1 },
    { NULL, "V", 0x1, 41, 32, -1, 33, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 42, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 43, -1, -1 },
    { NULL, "Z", 0x1, 44, 15, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 45, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 46, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 46, 47, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 46, 48, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 49, 50, -1, 51, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 52, -1, -1 },
    { NULL, "LNSObject;", 0x1, 53, 50, -1, 51, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 52, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, 54, 7, -1, 55, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, 56, 7, -1, 55, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, 57, 7, -1, 55, -1, -1 },
    { NULL, "LEduStanfordNlpUtilFactory;", 0x1, -1, -1, -1, 58, -1, -1 },
    { NULL, "V", 0x1, 21, 59, -1, 60, -1, -1 },
    { NULL, "D", 0x1, 29, 59, -1, 61, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, -1, -1, -1, 62, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 63, -1, -1 },
    { NULL, "V", 0x1, 64, 65, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithEduStanfordNlpUtilMapFactory:);
  methods[2].selector = @selector(initWithEduStanfordNlpStatsIntCounter:);
  methods[3].selector = @selector(getMapFactory);
  methods[4].selector = @selector(setDefaultReturnValueWithDouble:);
  methods[5].selector = @selector(setDefaultReturnValueWithInt:);
  methods[6].selector = @selector(defaultReturnValue);
  methods[7].selector = @selector(totalIntCount);
  methods[8].selector = @selector(totalDoubleCount);
  methods[9].selector = @selector(totalIntCountWithJavaUtilFunctionPredicate:);
  methods[10].selector = @selector(totalDoubleCountWithJavaUtilFunctionPredicate:);
  methods[11].selector = @selector(totalCountWithJavaUtilFunctionPredicate:);
  methods[12].selector = @selector(averageCount);
  methods[13].selector = @selector(getCountWithId:);
  methods[14].selector = @selector(getCountAsStringWithId:);
  methods[15].selector = @selector(getIntCountWithId:);
  methods[16].selector = @selector(getNormalizedCountWithId:);
  methods[17].selector = @selector(setCountWithId:withInt:);
  methods[18].selector = @selector(setCountWithId:withNSString:);
  methods[19].selector = @selector(setCountsWithJavaUtilCollection:withInt:);
  methods[20].selector = @selector(incrementCountWithId:withInt:);
  methods[21].selector = @selector(incrementCountWithId:);
  methods[22].selector = @selector(incrementCountsWithJavaUtilCollection:withInt:);
  methods[23].selector = @selector(incrementCountsWithJavaUtilCollection:);
  methods[24].selector = @selector(decrementCountWithId:withInt:);
  methods[25].selector = @selector(decrementCountWithId:);
  methods[26].selector = @selector(decrementCountsWithJavaUtilCollection:withInt:);
  methods[27].selector = @selector(decrementCountsWithJavaUtilCollection:);
  methods[28].selector = @selector(addAllWithEduStanfordNlpStatsIntCounter:);
  methods[29].selector = @selector(subtractAllWithEduStanfordNlpStatsIntCounter:);
  methods[30].selector = @selector(containsKeyWithId:);
  methods[31].selector = @selector(removeWithId:);
  methods[32].selector = @selector(removeAllWithJavaUtilCollection:);
  methods[33].selector = @selector(clear);
  methods[34].selector = @selector(size);
  methods[35].selector = @selector(isEmpty);
  methods[36].selector = @selector(keySet);
  methods[37].selector = @selector(entrySet);
  methods[38].selector = @selector(isEqual:);
  methods[39].selector = @selector(hash);
  methods[40].selector = @selector(description);
  methods[41].selector = @selector(toStringWithJavaTextNumberFormat:withNSString:withNSString:withNSString:withNSString:);
  methods[42].selector = @selector(toStringWithJavaTextNumberFormat:);
  methods[43].selector = @selector(clone);
  methods[44].selector = @selector(removeZeroCounts);
  methods[45].selector = @selector(max);
  methods[46].selector = @selector(doubleMax);
  methods[47].selector = @selector(min);
  methods[48].selector = @selector(argmaxWithJavaUtilComparator:);
  methods[49].selector = @selector(argmax);
  methods[50].selector = @selector(argminWithJavaUtilComparator:);
  methods[51].selector = @selector(argmin);
  methods[52].selector = @selector(keysAboveWithInt:);
  methods[53].selector = @selector(keysBelowWithInt:);
  methods[54].selector = @selector(keysAtWithInt:);
  methods[55].selector = @selector(getFactory);
  methods[56].selector = @selector(setCountWithId:withDouble:);
  methods[57].selector = @selector(incrementCountWithId:withDouble:);
  methods[58].selector = @selector(totalCount);
  methods[59].selector = @selector(values);
  methods[60].selector = @selector(iterator);
  methods[61].selector = @selector(prettyLogWithEduStanfordNlpUtilLoggingRedwood_RedwoodChannels:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "map_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 66, -1 },
    { "mapFactory_", "LEduStanfordNlpUtilMapFactory;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "totalCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "defaultValue_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "naturalComparator", "LJavaUtilComparator;", .constantValue.asLong = 0, 0x1a, -1, 67, 68, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpStatsIntCounter_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "tempMInteger_", "LEduStanfordNlpUtilMutableInteger;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpUtilMapFactory;", "(Ledu/stanford/nlp/util/MapFactory<TE;Ledu/stanford/nlp/util/MutableInteger;>;)V", "LEduStanfordNlpStatsIntCounter;", "(Ledu/stanford/nlp/stats/IntCounter<TE;>;)V", "()Ledu/stanford/nlp/util/MapFactory<TE;Ledu/stanford/nlp/util/MutableInteger;>;", "setDefaultReturnValue", "D", "I", "totalIntCount", "LJavaUtilFunctionPredicate;", "(Ljava/util/function/Predicate<TE;>;)I", "totalDoubleCount", "(Ljava/util/function/Predicate<TE;>;)D", "totalCount", "getCount", "LNSObject;", "getCountAsString", "(TE;)Ljava/lang/String;", "getIntCount", "getNormalizedCount", "(TE;)D", "setCount", "LNSObject;I", "(TE;I)V", "LNSObject;LNSString;", "(TE;Ljava/lang/String;)V", "setCounts", "LJavaUtilCollection;I", "(Ljava/util/Collection<TE;>;I)V", "incrementCount", "(TE;I)I", "incrementCounts", "LJavaUtilCollection;", "(Ljava/util/Collection<TE;>;)V", "decrementCount", "decrementCounts", "addAll", "subtractAll", "containsKey", "(TE;)Z", "remove", "removeAll", "()Ljava/util/Set<TE;>;", "()Ljava/util/Set<Ljava/util/Map$Entry<TE;Ljava/lang/Double;>;>;", "equals", "hashCode", "toString", "LJavaTextNumberFormat;LNSString;LNSString;LNSString;LNSString;", "LJavaTextNumberFormat;", "argmax", "LJavaUtilComparator;", "(Ljava/util/Comparator<TE;>;)TE;", "()TE;", "argmin", "keysAbove", "(I)Ljava/util/Set<TE;>;", "keysBelow", "keysAt", "()Ledu/stanford/nlp/util/Factory<Ledu/stanford/nlp/stats/Counter<TE;>;>;", "LNSObject;D", "(TE;D)V", "(TE;D)D", "()Ljava/util/Collection<Ljava/lang/Double;>;", "()Ljava/util/Iterator<TE;>;", "prettyLog", "LEduStanfordNlpUtilLoggingRedwood_RedwoodChannels;LNSString;", "Ljava/util/Map<TE;Ledu/stanford/nlp/util/MutableInteger;>;", &EduStanfordNlpStatsIntCounter_naturalComparator, "Ljava/util/Comparator<Ljava/lang/Object;>;", "LEduStanfordNlpStatsIntCounter_NaturalComparator;", "<E:Ljava/lang/Object;>Ledu/stanford/nlp/stats/AbstractCounter<TE;>;Ljava/io/Serializable;" };
  static const J2ObjcClassInfo _EduStanfordNlpStatsIntCounter = { "IntCounter", "edu.stanford.nlp.stats", ptrTable, methods, fields, 7, 0x1, 62, 7, -1, 69, -1, 70, -1 };
  return &_EduStanfordNlpStatsIntCounter;
}

+ (void)initialize {
  if (self == [EduStanfordNlpStatsIntCounter class]) {
    EduStanfordNlpStatsIntCounter_naturalComparator = new_EduStanfordNlpStatsIntCounter_NaturalComparator_init();
    J2OBJC_SET_INITIALIZED(EduStanfordNlpStatsIntCounter)
  }
}

@end

void EduStanfordNlpStatsIntCounter_init(EduStanfordNlpStatsIntCounter *self) {
  EduStanfordNlpStatsIntCounter_initWithEduStanfordNlpUtilMapFactory_(self, EduStanfordNlpUtilMapFactory_hashMapFactory());
}

EduStanfordNlpStatsIntCounter *new_EduStanfordNlpStatsIntCounter_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpStatsIntCounter, init)
}

EduStanfordNlpStatsIntCounter *create_EduStanfordNlpStatsIntCounter_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpStatsIntCounter, init)
}

void EduStanfordNlpStatsIntCounter_initWithEduStanfordNlpUtilMapFactory_(EduStanfordNlpStatsIntCounter *self, EduStanfordNlpUtilMapFactory *mapFactory) {
  EduStanfordNlpStatsAbstractCounter_init(self);
  self->tempMInteger_ = nil;
  self->mapFactory_ = mapFactory;
  self->map_ = [((EduStanfordNlpUtilMapFactory *) nil_chk(mapFactory)) newMap];
  self->totalCount_ = 0;
}

EduStanfordNlpStatsIntCounter *new_EduStanfordNlpStatsIntCounter_initWithEduStanfordNlpUtilMapFactory_(EduStanfordNlpUtilMapFactory *mapFactory) {
  J2OBJC_NEW_IMPL(EduStanfordNlpStatsIntCounter, initWithEduStanfordNlpUtilMapFactory_, mapFactory)
}

EduStanfordNlpStatsIntCounter *create_EduStanfordNlpStatsIntCounter_initWithEduStanfordNlpUtilMapFactory_(EduStanfordNlpUtilMapFactory *mapFactory) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpStatsIntCounter, initWithEduStanfordNlpUtilMapFactory_, mapFactory)
}

void EduStanfordNlpStatsIntCounter_initWithEduStanfordNlpStatsIntCounter_(EduStanfordNlpStatsIntCounter *self, EduStanfordNlpStatsIntCounter *c) {
  EduStanfordNlpStatsIntCounter_init(self);
  [self addAllWithEduStanfordNlpStatsIntCounter:c];
}

EduStanfordNlpStatsIntCounter *new_EduStanfordNlpStatsIntCounter_initWithEduStanfordNlpStatsIntCounter_(EduStanfordNlpStatsIntCounter *c) {
  J2OBJC_NEW_IMPL(EduStanfordNlpStatsIntCounter, initWithEduStanfordNlpStatsIntCounter_, c)
}

EduStanfordNlpStatsIntCounter *create_EduStanfordNlpStatsIntCounter_initWithEduStanfordNlpStatsIntCounter_(EduStanfordNlpStatsIntCounter *c) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpStatsIntCounter, initWithEduStanfordNlpStatsIntCounter_, c)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpStatsIntCounter)

@implementation EduStanfordNlpStatsIntCounter_NaturalComparator

- (jint)compareWithId:(id)o1
               withId:(id)o2 {
  if ([JavaLangComparable_class_() isInstance:o1]) {
    return [((id<JavaLangComparable>) nil_chk(EduStanfordNlpUtilErasureUtils_uncheckedCastWithId_(o1))) compareToWithId:o2];
  }
  return 0;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpStatsIntCounter_NaturalComparator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilComparator>)reversed {
  return JavaUtilComparator_reversed(self);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilComparator:(id<JavaUtilComparator>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilComparator_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0
                                             withJavaUtilComparator:(id<JavaUtilComparator>)arg1 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_withJavaUtilComparator_(self, arg0, arg1);
}

- (id<JavaUtilComparator>)thenComparingDoubleWithJavaUtilFunctionToDoubleFunction:(id<JavaUtilFunctionToDoubleFunction>)arg0 {
  return JavaUtilComparator_thenComparingDoubleWithJavaUtilFunctionToDoubleFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingIntWithJavaUtilFunctionToIntFunction:(id<JavaUtilFunctionToIntFunction>)arg0 {
  return JavaUtilComparator_thenComparingIntWithJavaUtilFunctionToIntFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingLongWithJavaUtilFunctionToLongFunction:(id<JavaUtilFunctionToLongFunction>)arg0 {
  return JavaUtilComparator_thenComparingLongWithJavaUtilFunctionToLongFunction_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "I", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(compareWithId:withId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "compare", "LNSObject;LNSObject;", "(TT;TT;)I", "LEduStanfordNlpStatsIntCounter;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Ljava/util/Comparator<TT;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpStatsIntCounter_NaturalComparator = { "NaturalComparator", "edu.stanford.nlp.stats", ptrTable, methods, NULL, 7, 0xa, 2, 0, 3, -1, -1, 4, -1 };
  return &_EduStanfordNlpStatsIntCounter_NaturalComparator;
}

@end

void EduStanfordNlpStatsIntCounter_NaturalComparator_init(EduStanfordNlpStatsIntCounter_NaturalComparator *self) {
  NSObject_init(self);
}

EduStanfordNlpStatsIntCounter_NaturalComparator *new_EduStanfordNlpStatsIntCounter_NaturalComparator_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpStatsIntCounter_NaturalComparator, init)
}

EduStanfordNlpStatsIntCounter_NaturalComparator *create_EduStanfordNlpStatsIntCounter_NaturalComparator_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpStatsIntCounter_NaturalComparator, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpStatsIntCounter_NaturalComparator)

@implementation EduStanfordNlpStatsIntCounter_$1

- (id<JavaUtilIterator>)iterator {
  return new_EduStanfordNlpStatsIntCounter_$1_$1_initWithEduStanfordNlpStatsIntCounter_$1_(self);
}

- (jint)size {
  return [((id<JavaUtilMap>) nil_chk(this$0_->map_)) size];
}

- (instancetype)initWithEduStanfordNlpStatsIntCounter:(EduStanfordNlpStatsIntCounter *)outer$ {
  EduStanfordNlpStatsIntCounter_$1_initWithEduStanfordNlpStatsIntCounter_(self, outer$);
  return self;
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(iterator);
  methods[1].selector = @selector(size);
  methods[2].selector = @selector(initWithEduStanfordNlpStatsIntCounter:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LEduStanfordNlpStatsIntCounter;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Iterator<Ljava/util/Map$Entry<TE;Ljava/lang/Double;>;>;", "LEduStanfordNlpStatsIntCounter;", "entrySet", "Ljava/util/AbstractSet<Ljava/util/Map$Entry<TE;Ljava/lang/Double;>;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpStatsIntCounter_$1 = { "", "edu.stanford.nlp.stats", ptrTable, methods, fields, 7, 0x8008, 3, 1, 1, -1, 2, 3, -1 };
  return &_EduStanfordNlpStatsIntCounter_$1;
}

@end

void EduStanfordNlpStatsIntCounter_$1_initWithEduStanfordNlpStatsIntCounter_(EduStanfordNlpStatsIntCounter_$1 *self, EduStanfordNlpStatsIntCounter *outer$) {
  self->this$0_ = outer$;
  JavaUtilAbstractSet_init(self);
}

EduStanfordNlpStatsIntCounter_$1 *new_EduStanfordNlpStatsIntCounter_$1_initWithEduStanfordNlpStatsIntCounter_(EduStanfordNlpStatsIntCounter *outer$) {
  J2OBJC_NEW_IMPL(EduStanfordNlpStatsIntCounter_$1, initWithEduStanfordNlpStatsIntCounter_, outer$)
}

EduStanfordNlpStatsIntCounter_$1 *create_EduStanfordNlpStatsIntCounter_$1_initWithEduStanfordNlpStatsIntCounter_(EduStanfordNlpStatsIntCounter *outer$) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpStatsIntCounter_$1, initWithEduStanfordNlpStatsIntCounter_, outer$)
}

@implementation EduStanfordNlpStatsIntCounter_$1_$1

- (jboolean)hasNext {
  return [((id<JavaUtilIterator>) nil_chk(inner_)) hasNext];
}

- (id<JavaUtilMap_Entry>)next {
  return new_EduStanfordNlpStatsIntCounter_$1_$1_$1_initWithEduStanfordNlpStatsIntCounter_$1_$1_(self);
}

- (void)remove {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (instancetype)initWithEduStanfordNlpStatsIntCounter_$1:(EduStanfordNlpStatsIntCounter_$1 *)outer$ {
  EduStanfordNlpStatsIntCounter_$1_$1_initWithEduStanfordNlpStatsIntCounter_$1_(self, outer$);
  return self;
}

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaUtilIterator_forEachRemainingWithJavaUtilFunctionConsumer_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap_Entry;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(hasNext);
  methods[1].selector = @selector(next);
  methods[2].selector = @selector(remove);
  methods[3].selector = @selector(initWithEduStanfordNlpStatsIntCounter_$1:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LEduStanfordNlpStatsIntCounter_$1;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "inner_", "LJavaUtilIterator;", .constantValue.asLong = 0, 0x10, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map$Entry<TE;Ljava/lang/Double;>;", "LEduStanfordNlpStatsIntCounter_$1;", "Ljava/util/Iterator<Ljava/util/Map$Entry<TE;Ledu/stanford/nlp/util/MutableInteger;>;>;", "iterator", "Ljava/lang/Object;Ljava/util/Iterator<Ljava/util/Map$Entry<TE;Ljava/lang/Double;>;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpStatsIntCounter_$1_$1 = { "", "edu.stanford.nlp.stats", ptrTable, methods, fields, 7, 0x8008, 4, 2, 1, -1, 3, 4, -1 };
  return &_EduStanfordNlpStatsIntCounter_$1_$1;
}

@end

void EduStanfordNlpStatsIntCounter_$1_$1_initWithEduStanfordNlpStatsIntCounter_$1_(EduStanfordNlpStatsIntCounter_$1_$1 *self, EduStanfordNlpStatsIntCounter_$1 *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
  self->inner_ = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(outer$->this$0_->map_)) entrySet])) iterator];
}

EduStanfordNlpStatsIntCounter_$1_$1 *new_EduStanfordNlpStatsIntCounter_$1_$1_initWithEduStanfordNlpStatsIntCounter_$1_(EduStanfordNlpStatsIntCounter_$1 *outer$) {
  J2OBJC_NEW_IMPL(EduStanfordNlpStatsIntCounter_$1_$1, initWithEduStanfordNlpStatsIntCounter_$1_, outer$)
}

EduStanfordNlpStatsIntCounter_$1_$1 *create_EduStanfordNlpStatsIntCounter_$1_$1_initWithEduStanfordNlpStatsIntCounter_$1_(EduStanfordNlpStatsIntCounter_$1 *outer$) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpStatsIntCounter_$1_$1, initWithEduStanfordNlpStatsIntCounter_$1_, outer$)
}

@implementation EduStanfordNlpStatsIntCounter_$1_$1_$1

- (id)getKey {
  return [((id<JavaUtilMap_Entry>) nil_chk(e_)) getKey];
}

- (JavaLangDouble *)getValue {
  return JavaLangDouble_valueOfWithDouble_([((EduStanfordNlpUtilMutableInteger *) nil_chk([((id<JavaUtilMap_Entry>) nil_chk(e_)) getValue])) doubleValue]);
}

- (JavaLangDouble *)setValueWithId:(JavaLangDouble *)value {
  jdouble old = [((EduStanfordNlpUtilMutableInteger *) nil_chk([((id<JavaUtilMap_Entry>) nil_chk(e_)) getValue])) doubleValue];
  [((EduStanfordNlpUtilMutableInteger *) nil_chk([e_ getValue])) setWithInt:[((JavaLangDouble *) nil_chk(value)) intValue]];
  this$0_->this$0_->this$0_->totalCount_ = this$0_->this$0_->this$0_->totalCount_ - JreFpToInt(old) + [value intValue];
  return JavaLangDouble_valueOfWithDouble_(old);
}

- (instancetype)initWithEduStanfordNlpStatsIntCounter_$1_$1:(EduStanfordNlpStatsIntCounter_$1_$1 *)outer$ {
  EduStanfordNlpStatsIntCounter_$1_$1_$1_initWithEduStanfordNlpStatsIntCounter_$1_$1_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangDouble;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangDouble;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(getKey);
  methods[1].selector = @selector(getValue);
  methods[2].selector = @selector(setValueWithId:);
  methods[3].selector = @selector(initWithEduStanfordNlpStatsIntCounter_$1_$1:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LEduStanfordNlpStatsIntCounter_$1_$1;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "e_", "LJavaUtilMap_Entry;", .constantValue.asLong = 0, 0x10, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "()TE;", "setValue", "LJavaLangDouble;", "LEduStanfordNlpStatsIntCounter_$1_$1;", "Ljava/util/Map$Entry<TE;Ledu/stanford/nlp/util/MutableInteger;>;", "next", "Ljava/lang/Object;Ljava/util/Map$Entry<TE;Ljava/lang/Double;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpStatsIntCounter_$1_$1_$1 = { "", "edu.stanford.nlp.stats", ptrTable, methods, fields, 7, 0x8008, 4, 2, 3, -1, 5, 6, -1 };
  return &_EduStanfordNlpStatsIntCounter_$1_$1_$1;
}

@end

void EduStanfordNlpStatsIntCounter_$1_$1_$1_initWithEduStanfordNlpStatsIntCounter_$1_$1_(EduStanfordNlpStatsIntCounter_$1_$1_$1 *self, EduStanfordNlpStatsIntCounter_$1_$1 *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
  self->e_ = [((id<JavaUtilIterator>) nil_chk(outer$->inner_)) next];
}

EduStanfordNlpStatsIntCounter_$1_$1_$1 *new_EduStanfordNlpStatsIntCounter_$1_$1_$1_initWithEduStanfordNlpStatsIntCounter_$1_$1_(EduStanfordNlpStatsIntCounter_$1_$1 *outer$) {
  J2OBJC_NEW_IMPL(EduStanfordNlpStatsIntCounter_$1_$1_$1, initWithEduStanfordNlpStatsIntCounter_$1_$1_, outer$)
}

EduStanfordNlpStatsIntCounter_$1_$1_$1 *create_EduStanfordNlpStatsIntCounter_$1_$1_$1_initWithEduStanfordNlpStatsIntCounter_$1_$1_(EduStanfordNlpStatsIntCounter_$1_$1 *outer$) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpStatsIntCounter_$1_$1_$1, initWithEduStanfordNlpStatsIntCounter_$1_$1_, outer$)
}

@implementation EduStanfordNlpStatsIntCounter_$2

- (id<EduStanfordNlpStatsCounter>)create {
  return new_EduStanfordNlpStatsIntCounter_initWithEduStanfordNlpUtilMapFactory_([this$0_ getMapFactory]);
}

- (instancetype)initWithEduStanfordNlpStatsIntCounter:(EduStanfordNlpStatsIntCounter *)outer$ {
  EduStanfordNlpStatsIntCounter_$2_initWithEduStanfordNlpStatsIntCounter_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LEduStanfordNlpStatsCounter;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(create);
  methods[1].selector = @selector(initWithEduStanfordNlpStatsIntCounter:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LEduStanfordNlpStatsIntCounter;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpStatsIntCounter_$2_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "()Ledu/stanford/nlp/stats/Counter<TE;>;", "LEduStanfordNlpStatsIntCounter;", "getFactory", "Ljava/lang/Object;Ledu/stanford/nlp/util/Factory<Ledu/stanford/nlp/stats/Counter<TE;>;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpStatsIntCounter_$2 = { "", "edu.stanford.nlp.stats", ptrTable, methods, fields, 7, 0x8008, 2, 2, 1, -1, 2, 3, -1 };
  return &_EduStanfordNlpStatsIntCounter_$2;
}

@end

void EduStanfordNlpStatsIntCounter_$2_initWithEduStanfordNlpStatsIntCounter_(EduStanfordNlpStatsIntCounter_$2 *self, EduStanfordNlpStatsIntCounter *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
}

EduStanfordNlpStatsIntCounter_$2 *new_EduStanfordNlpStatsIntCounter_$2_initWithEduStanfordNlpStatsIntCounter_(EduStanfordNlpStatsIntCounter *outer$) {
  J2OBJC_NEW_IMPL(EduStanfordNlpStatsIntCounter_$2, initWithEduStanfordNlpStatsIntCounter_, outer$)
}

EduStanfordNlpStatsIntCounter_$2 *create_EduStanfordNlpStatsIntCounter_$2_initWithEduStanfordNlpStatsIntCounter_(EduStanfordNlpStatsIntCounter *outer$) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpStatsIntCounter_$2, initWithEduStanfordNlpStatsIntCounter_, outer$)
}

@implementation EduStanfordNlpStatsIntCounter_$3

- (id<JavaUtilIterator>)iterator {
  return new_EduStanfordNlpStatsIntCounter_$3_$1_initWithEduStanfordNlpStatsIntCounter_$3_(self);
}

- (jint)size {
  return [((id<JavaUtilMap>) nil_chk(this$0_->map_)) size];
}

- (instancetype)initWithEduStanfordNlpStatsIntCounter:(EduStanfordNlpStatsIntCounter *)outer$ {
  EduStanfordNlpStatsIntCounter_$3_initWithEduStanfordNlpStatsIntCounter_(self, outer$);
  return self;
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(iterator);
  methods[1].selector = @selector(size);
  methods[2].selector = @selector(initWithEduStanfordNlpStatsIntCounter:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LEduStanfordNlpStatsIntCounter;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Iterator<Ljava/lang/Double;>;", "LEduStanfordNlpStatsIntCounter;", "values", "Ljava/util/AbstractCollection<Ljava/lang/Double;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpStatsIntCounter_$3 = { "", "edu.stanford.nlp.stats", ptrTable, methods, fields, 7, 0x8008, 3, 1, 1, -1, 2, 3, -1 };
  return &_EduStanfordNlpStatsIntCounter_$3;
}

@end

void EduStanfordNlpStatsIntCounter_$3_initWithEduStanfordNlpStatsIntCounter_(EduStanfordNlpStatsIntCounter_$3 *self, EduStanfordNlpStatsIntCounter *outer$) {
  self->this$0_ = outer$;
  JavaUtilAbstractCollection_init(self);
}

EduStanfordNlpStatsIntCounter_$3 *new_EduStanfordNlpStatsIntCounter_$3_initWithEduStanfordNlpStatsIntCounter_(EduStanfordNlpStatsIntCounter *outer$) {
  J2OBJC_NEW_IMPL(EduStanfordNlpStatsIntCounter_$3, initWithEduStanfordNlpStatsIntCounter_, outer$)
}

EduStanfordNlpStatsIntCounter_$3 *create_EduStanfordNlpStatsIntCounter_$3_initWithEduStanfordNlpStatsIntCounter_(EduStanfordNlpStatsIntCounter *outer$) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpStatsIntCounter_$3, initWithEduStanfordNlpStatsIntCounter_, outer$)
}

@implementation EduStanfordNlpStatsIntCounter_$3_$1

- (jboolean)hasNext {
  return [((id<JavaUtilIterator>) nil_chk(inner_)) hasNext];
}

- (JavaLangDouble *)next {
  return JavaLangDouble_valueOfWithDouble_([((EduStanfordNlpUtilMutableInteger *) nil_chk([((id<JavaUtilIterator>) nil_chk(inner_)) next])) doubleValue]);
}

- (void)remove {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (instancetype)initWithEduStanfordNlpStatsIntCounter_$3:(EduStanfordNlpStatsIntCounter_$3 *)outer$ {
  EduStanfordNlpStatsIntCounter_$3_$1_initWithEduStanfordNlpStatsIntCounter_$3_(self, outer$);
  return self;
}

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaUtilIterator_forEachRemainingWithJavaUtilFunctionConsumer_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangDouble;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(hasNext);
  methods[1].selector = @selector(next);
  methods[2].selector = @selector(remove);
  methods[3].selector = @selector(initWithEduStanfordNlpStatsIntCounter_$3:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "inner_", "LJavaUtilIterator;", .constantValue.asLong = 0, 0x0, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpStatsIntCounter_$3;", "Ljava/util/Iterator<Ledu/stanford/nlp/util/MutableInteger;>;", "iterator", "Ljava/lang/Object;Ljava/util/Iterator<Ljava/lang/Double;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpStatsIntCounter_$3_$1 = { "", "edu.stanford.nlp.stats", ptrTable, methods, fields, 7, 0x8008, 4, 1, 0, -1, 2, 3, -1 };
  return &_EduStanfordNlpStatsIntCounter_$3_$1;
}

@end

void EduStanfordNlpStatsIntCounter_$3_$1_initWithEduStanfordNlpStatsIntCounter_$3_(EduStanfordNlpStatsIntCounter_$3_$1 *self, EduStanfordNlpStatsIntCounter_$3 *outer$) {
  NSObject_init(self);
  self->inner_ = [((id<JavaUtilCollection>) nil_chk([((id<JavaUtilMap>) nil_chk(outer$->this$0_->map_)) values])) iterator];
}

EduStanfordNlpStatsIntCounter_$3_$1 *new_EduStanfordNlpStatsIntCounter_$3_$1_initWithEduStanfordNlpStatsIntCounter_$3_(EduStanfordNlpStatsIntCounter_$3 *outer$) {
  J2OBJC_NEW_IMPL(EduStanfordNlpStatsIntCounter_$3_$1, initWithEduStanfordNlpStatsIntCounter_$3_, outer$)
}

EduStanfordNlpStatsIntCounter_$3_$1 *create_EduStanfordNlpStatsIntCounter_$3_$1_initWithEduStanfordNlpStatsIntCounter_$3_(EduStanfordNlpStatsIntCounter_$3 *outer$) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpStatsIntCounter_$3_$1, initWithEduStanfordNlpStatsIntCounter_$3_, outer$)
}
