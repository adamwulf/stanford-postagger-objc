//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/stats/TwoDimensionalCounter.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/math/ArrayMath.h"
#include "edu/stanford/nlp/math/SloppyMath.h"
#include "edu/stanford/nlp/stats/ClassicCounter.h"
#include "edu/stanford/nlp/stats/Counter.h"
#include "edu/stanford/nlp/stats/Counters.h"
#include "edu/stanford/nlp/stats/TwoDimensionalCounter.h"
#include "edu/stanford/nlp/stats/TwoDimensionalCounterInterface.h"
#include "edu/stanford/nlp/util/Generics.h"
#include "edu/stanford/nlp/util/MapFactory.h"
#include "edu/stanford/nlp/util/Pair.h"
#include "edu/stanford/nlp/util/StringUtils.h"
#include "java/io/PrintStream.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/text/DecimalFormat.h"
#include "java/text/NumberFormat.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

@interface EduStanfordNlpStatsTwoDimensionalCounter () {
 @public
  id<JavaUtilMap> map_;
  jdouble total_;
  EduStanfordNlpUtilMapFactory *outerMF_;
  EduStanfordNlpUtilMapFactory *innerMF_;
  jdouble defaultValue_;
}

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpStatsTwoDimensionalCounter, map_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(EduStanfordNlpStatsTwoDimensionalCounter, outerMF_, EduStanfordNlpUtilMapFactory *)
J2OBJC_FIELD_SETTER(EduStanfordNlpStatsTwoDimensionalCounter, innerMF_, EduStanfordNlpUtilMapFactory *)

inline jlong EduStanfordNlpStatsTwoDimensionalCounter_get_serialVersionUID();
#define EduStanfordNlpStatsTwoDimensionalCounter_serialVersionUID 1LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpStatsTwoDimensionalCounter, serialVersionUID, jlong)

@implementation EduStanfordNlpStatsTwoDimensionalCounter

- (void)defaultReturnValueWithDouble:(jdouble)rv {
  defaultValue_ = rv;
}

- (jdouble)defaultReturnValue {
  return defaultValue_;
}

- (jboolean)isEqual:(id)o {
  if (o == self) return true;
  if (!([o isKindOfClass:[EduStanfordNlpStatsTwoDimensionalCounter class]])) return false;
  return [((id<JavaUtilMap>) nil_chk(((EduStanfordNlpStatsTwoDimensionalCounter *) nil_chk(((EduStanfordNlpStatsTwoDimensionalCounter *) cast_chk(o, [EduStanfordNlpStatsTwoDimensionalCounter class]))))->map_)) isEqual:map_];
}

- (NSUInteger)hash {
  return ((jint) [((id<JavaUtilMap>) nil_chk(map_)) hash]) + 17;
}

- (EduStanfordNlpStatsClassicCounter *)getCounterWithId:(id)o {
  EduStanfordNlpStatsClassicCounter *c = [((id<JavaUtilMap>) nil_chk(map_)) getWithId:o];
  if (c == nil) {
    c = new_EduStanfordNlpStatsClassicCounter_initWithEduStanfordNlpUtilMapFactory_(innerMF_);
    [c setDefaultReturnValueWithDouble:defaultValue_];
    (void) [((id<JavaUtilMap>) nil_chk(map_)) putWithId:o withId:c];
  }
  return c;
}

- (id<JavaUtilSet>)entrySet {
  return [((id<JavaUtilMap>) nil_chk(map_)) entrySet];
}

- (jint)size {
  jint result = 0;
  for (id __strong o in nil_chk([self firstKeySet])) {
    EduStanfordNlpStatsClassicCounter *c = [((id<JavaUtilMap>) nil_chk(map_)) getWithId:o];
    result += [((EduStanfordNlpStatsClassicCounter *) nil_chk(c)) size];
  }
  return result;
}

- (jint)sizeOuterMap {
  return [((id<JavaUtilMap>) nil_chk(map_)) size];
}

- (jboolean)containsKeyWithId:(id)o1
                       withId:(id)o2 {
  if (![((id<JavaUtilMap>) nil_chk(map_)) containsKeyWithId:o1]) return false;
  EduStanfordNlpStatsClassicCounter *c = [((id<JavaUtilMap>) nil_chk(map_)) getWithId:o1];
  return [((EduStanfordNlpStatsClassicCounter *) nil_chk(c)) containsKeyWithId:o2];
}

- (jboolean)containsFirstKeyWithId:(id)o1 {
  if (![((id<JavaUtilMap>) nil_chk(map_)) containsKeyWithId:o1]) return false;
  else return true;
}

- (void)incrementCountWithId:(id)o1
                      withId:(id)o2 {
  [self incrementCountWithId:o1 withId:o2 withDouble:1.0];
}

- (void)incrementCountWithId:(id)o1
                      withId:(id)o2
                  withDouble:(jdouble)count {
  EduStanfordNlpStatsClassicCounter *c = [self getCounterWithId:o1];
  [((EduStanfordNlpStatsClassicCounter *) nil_chk(c)) incrementCountWithId:o2 withDouble:count];
  JrePlusAssignDoubleD(&total_, count);
}

- (void)decrementCountWithId:(id)o1
                      withId:(id)o2 {
  [self incrementCountWithId:o1 withId:o2 withDouble:-1.0];
}

- (void)decrementCountWithId:(id)o1
                      withId:(id)o2
                  withDouble:(jdouble)count {
  [self incrementCountWithId:o1 withId:o2 withDouble:-count];
}

- (void)setCountWithId:(id)o1
                withId:(id)o2
            withDouble:(jdouble)count {
  EduStanfordNlpStatsClassicCounter *c = [self getCounterWithId:o1];
  jdouble oldCount = [self getCountWithId:o1 withId:o2];
  JreMinusAssignDoubleD(&total_, oldCount);
  [((EduStanfordNlpStatsClassicCounter *) nil_chk(c)) setCountWithId:o2 withDouble:count];
  JrePlusAssignDoubleD(&total_, count);
}

- (jdouble)removeWithId:(id)o1
                 withId:(id)o2 {
  EduStanfordNlpStatsClassicCounter *c = [self getCounterWithId:o1];
  jdouble oldCount = [self getCountWithId:o1 withId:o2];
  JreMinusAssignDoubleD(&total_, oldCount);
  [((EduStanfordNlpStatsClassicCounter *) nil_chk(c)) removeWithId:o2];
  if ([c size] == 0) {
    (void) [((id<JavaUtilMap>) nil_chk(map_)) removeWithId:o1];
  }
  return oldCount;
}

- (jdouble)getCountWithId:(id)o1
                   withId:(id)o2 {
  EduStanfordNlpStatsClassicCounter *c = [self getCounterWithId:o1];
  if ([((EduStanfordNlpStatsClassicCounter *) nil_chk(c)) totalCount] == 0.0 && ![((id<JavaUtilSet>) nil_chk([c keySet])) containsWithId:o2]) {
    return [self defaultReturnValue];
  }
  return [c getCountWithId:o2];
}

- (jdouble)totalCount {
  return total_;
}

- (jdouble)totalCountWithId:(id)k1 {
  EduStanfordNlpStatsClassicCounter *c = [self getCounterWithId:k1];
  return [((EduStanfordNlpStatsClassicCounter *) nil_chk(c)) totalCount];
}

- (id<JavaUtilSet>)firstKeySet {
  return [((id<JavaUtilMap>) nil_chk(map_)) keySet];
}

- (EduStanfordNlpStatsClassicCounter *)setCounterWithId:(id)o
                         withEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c {
  EduStanfordNlpStatsClassicCounter *old = [self getCounterWithId:o];
  JreMinusAssignDoubleD(&total_, [((EduStanfordNlpStatsClassicCounter *) nil_chk(old)) totalCount]);
  if ([c isKindOfClass:[EduStanfordNlpStatsClassicCounter class]]) {
    (void) [((id<JavaUtilMap>) nil_chk(map_)) putWithId:o withId:(EduStanfordNlpStatsClassicCounter *) cast_chk(c, [EduStanfordNlpStatsClassicCounter class])];
  }
  else {
    (void) [((id<JavaUtilMap>) nil_chk(map_)) putWithId:o withId:new_EduStanfordNlpStatsClassicCounter_initWithEduStanfordNlpStatsCounter_(c)];
  }
  JrePlusAssignDoubleD(&total_, [((id<EduStanfordNlpStatsCounter>) nil_chk(c)) totalCount]);
  return old;
}

+ (EduStanfordNlpStatsTwoDimensionalCounter *)reverseIndexOrderWithEduStanfordNlpStatsTwoDimensionalCounter:(EduStanfordNlpStatsTwoDimensionalCounter *)cc {
  return EduStanfordNlpStatsTwoDimensionalCounter_reverseIndexOrderWithEduStanfordNlpStatsTwoDimensionalCounter_(cc);
}

- (NSString *)description {
  JavaLangStringBuilder *buff = new_JavaLangStringBuilder_init();
  for (id __strong key1 in nil_chk([((id<JavaUtilMap>) nil_chk(map_)) keySet])) {
    EduStanfordNlpStatsClassicCounter *c = [self getCounterWithId:key1];
    for (id __strong key2 in nil_chk([((EduStanfordNlpStatsClassicCounter *) nil_chk(c)) keySet])) {
      jdouble score = [c getCountWithId:key2];
      (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buff appendWithId:key1])) appendWithNSString:@"\t"])) appendWithId:key2])) appendWithNSString:@"\t"])) appendWithDouble:score])) appendWithNSString:@"\n"];
    }
  }
  return [buff description];
}

- (NSString *)toMatrixStringWithInt:(jint)cellSize {
  id<JavaUtilList> firstKeys = new_JavaUtilArrayList_initWithJavaUtilCollection_([self firstKeySet]);
  id<JavaUtilList> secondKeys = new_JavaUtilArrayList_initWithJavaUtilCollection_([self secondKeySet]);
  JavaUtilCollections_sortWithJavaUtilList_(firstKeys);
  JavaUtilCollections_sortWithJavaUtilList_(secondKeys);
  IOSObjectArray *counts = [self toMatrixWithJavaUtilList:firstKeys withJavaUtilList:secondKeys];
  return EduStanfordNlpMathArrayMath_toStringWithDoubleArray2_withInt_withNSObjectArray_withNSObjectArray_withJavaTextNumberFormat_withBoolean_(counts, cellSize, [firstKeys toArray], [secondKeys toArray], new_JavaTextDecimalFormat_init(), true);
}

- (IOSObjectArray *)toMatrixWithJavaUtilList:(id<JavaUtilList>)firstKeys
                            withJavaUtilList:(id<JavaUtilList>)secondKeys {
  IOSObjectArray *counts = [IOSDoubleArray newArrayWithDimensions:2 lengths:(jint[]){ [((id<JavaUtilList>) nil_chk(firstKeys)) size], [((id<JavaUtilList>) nil_chk(secondKeys)) size] }];
  for (jint i = 0; i < [firstKeys size]; i++) {
    for (jint j = 0; j < [secondKeys size]; j++) {
      *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(counts, i)), j) = [self getCountWithId:[firstKeys getWithInt:i] withId:[secondKeys getWithInt:j]];
    }
  }
  return counts;
}

- (NSString *)toCSVStringWithJavaTextNumberFormat:(JavaTextNumberFormat *)nf {
  id<JavaUtilList> firstKeys = new_JavaUtilArrayList_initWithJavaUtilCollection_([self firstKeySet]);
  id<JavaUtilList> secondKeys = new_JavaUtilArrayList_initWithJavaUtilCollection_([self secondKeySet]);
  JavaUtilCollections_sortWithJavaUtilList_(firstKeys);
  JavaUtilCollections_sortWithJavaUtilList_(secondKeys);
  JavaLangStringBuilder *b = new_JavaLangStringBuilder_init();
  IOSObjectArray *headerRow = [IOSObjectArray newArrayWithLength:[secondKeys size] + 1 type:NSString_class_()];
  (void) IOSObjectArray_Set(headerRow, 0, @"");
  for (jint j = 0; j < [secondKeys size]; j++) {
    (void) IOSObjectArray_Set(headerRow, j + 1, [nil_chk([secondKeys getWithInt:j]) description]);
  }
  (void) [((JavaLangStringBuilder *) nil_chk([b appendWithNSString:EduStanfordNlpUtilStringUtils_toCSVStringWithNSStringArray_(headerRow)])) appendWithNSString:@"\n"];
  for (id __strong rowLabel in firstKeys) {
    IOSObjectArray *row = [IOSObjectArray newArrayWithLength:[secondKeys size] + 1 type:NSString_class_()];
    (void) IOSObjectArray_Set(row, 0, [nil_chk(rowLabel) description]);
    for (jint j = 0; j < [secondKeys size]; j++) {
      id colLabel = [secondKeys getWithInt:j];
      (void) IOSObjectArray_Set(row, j + 1, [((JavaTextNumberFormat *) nil_chk(nf)) formatWithDouble:[self getCountWithId:rowLabel withId:colLabel]]);
    }
    (void) [((JavaLangStringBuilder *) nil_chk([b appendWithNSString:EduStanfordNlpUtilStringUtils_toCSVStringWithNSStringArray_(row)])) appendWithNSString:@"\n"];
  }
  return [b description];
}

- (id<JavaUtilSet>)secondKeySet {
  id<JavaUtilSet> result = EduStanfordNlpUtilGenerics_newHashSet();
  for (id __strong k1 in nil_chk([self firstKeySet])) {
    for (id __strong k2 in nil_chk([((EduStanfordNlpStatsClassicCounter *) nil_chk([self getCounterWithId:k1])) keySet])) {
      [((id<JavaUtilSet>) nil_chk(result)) addWithId:k2];
    }
  }
  return result;
}

- (jboolean)isEmpty {
  return [((id<JavaUtilMap>) nil_chk(map_)) isEmpty];
}

- (EduStanfordNlpStatsClassicCounter *)flatten {
  EduStanfordNlpStatsClassicCounter *result = new_EduStanfordNlpStatsClassicCounter_init();
  [result setDefaultReturnValueWithDouble:defaultValue_];
  for (id __strong key1 in nil_chk([self firstKeySet])) {
    EduStanfordNlpStatsClassicCounter *inner = [self getCounterWithId:key1];
    for (id __strong key2 in nil_chk([((EduStanfordNlpStatsClassicCounter *) nil_chk(inner)) keySet])) {
      [result setCountWithId:new_EduStanfordNlpUtilPair_initWithId_withId_(key1, key2) withDouble:[inner getCountWithId:key2]];
    }
  }
  return result;
}

- (void)addAllWithEduStanfordNlpStatsTwoDimensionalCounterInterface:(id<EduStanfordNlpStatsTwoDimensionalCounterInterface>)c {
  for (id __strong key in nil_chk([((id<EduStanfordNlpStatsTwoDimensionalCounterInterface>) nil_chk(c)) firstKeySet])) {
    id<EduStanfordNlpStatsCounter> inner = [c getCounterWithId:key];
    EduStanfordNlpStatsClassicCounter *myInner = [self getCounterWithId:key];
    EduStanfordNlpStatsCounters_addInPlaceWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_(myInner, inner);
    JrePlusAssignDoubleD(&total_, [((id<EduStanfordNlpStatsCounter>) nil_chk(inner)) totalCount]);
  }
}

- (void)addAllWithId:(id)key
withEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c {
  EduStanfordNlpStatsClassicCounter *myInner = [self getCounterWithId:key];
  EduStanfordNlpStatsCounters_addInPlaceWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_(myInner, c);
  JrePlusAssignDoubleD(&total_, [((id<EduStanfordNlpStatsCounter>) nil_chk(c)) totalCount]);
}

- (void)subtractAllWithId:(id)key
withEduStanfordNlpStatsCounter:(id<EduStanfordNlpStatsCounter>)c {
  EduStanfordNlpStatsClassicCounter *myInner = [self getCounterWithId:key];
  EduStanfordNlpStatsCounters_subtractInPlaceWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_(myInner, c);
  JreMinusAssignDoubleD(&total_, [((id<EduStanfordNlpStatsCounter>) nil_chk(c)) totalCount]);
}

- (void)subtractAllWithEduStanfordNlpStatsTwoDimensionalCounterInterface:(id<EduStanfordNlpStatsTwoDimensionalCounterInterface>)c
                                                             withBoolean:(jboolean)removeKeys {
  for (id __strong key in nil_chk([((id<EduStanfordNlpStatsTwoDimensionalCounterInterface>) nil_chk(c)) firstKeySet])) {
    id<EduStanfordNlpStatsCounter> inner = [c getCounterWithId:key];
    EduStanfordNlpStatsClassicCounter *myInner = [self getCounterWithId:key];
    EduStanfordNlpStatsCounters_subtractInPlaceWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_(myInner, inner);
    if (removeKeys) (void) EduStanfordNlpStatsCounters_retainNonZerosWithEduStanfordNlpStatsCounter_(myInner);
    JreMinusAssignDoubleD(&total_, [((id<EduStanfordNlpStatsCounter>) nil_chk(inner)) totalCount]);
  }
}

- (id<EduStanfordNlpStatsCounter>)sumInnerCounter {
  id<EduStanfordNlpStatsCounter> summed = new_EduStanfordNlpStatsClassicCounter_init();
  for (id __strong key in nil_chk([self firstKeySet])) {
    [summed incrementCountWithId:key withDouble:[((EduStanfordNlpStatsClassicCounter *) nil_chk([self getCounterWithId:key])) totalCount]];
  }
  return summed;
}

- (void)removeZeroCounts {
  id<JavaUtilSet> firstKeySet = EduStanfordNlpUtilGenerics_newHashSetWithJavaUtilCollection_([self firstKeySet]);
  for (id __strong k1 in nil_chk(firstKeySet)) {
    EduStanfordNlpStatsClassicCounter *c = [self getCounterWithId:k1];
    (void) EduStanfordNlpStatsCounters_retainNonZerosWithEduStanfordNlpStatsCounter_(c);
    if ([((EduStanfordNlpStatsClassicCounter *) nil_chk(c)) size] == 0) (void) [((id<JavaUtilMap>) nil_chk(map_)) removeWithId:k1];
  }
}

- (void)removeWithId:(id)key {
  EduStanfordNlpStatsClassicCounter *counter = [((id<JavaUtilMap>) nil_chk(map_)) getWithId:key];
  if (counter != nil) {
    JreMinusAssignDoubleD(&total_, [counter totalCount]);
  }
  (void) [((id<JavaUtilMap>) nil_chk(map_)) removeWithId:key];
}

- (void)clear {
  [((id<JavaUtilMap>) nil_chk(map_)) clear];
  total_ = 0;
  defaultValue_ = 0;
}

- (void)clean {
  for (id __strong key1 in nil_chk(EduStanfordNlpUtilGenerics_newHashSetWithJavaUtilCollection_([((id<JavaUtilMap>) nil_chk(map_)) keySet]))) {
    EduStanfordNlpStatsClassicCounter *c = [((id<JavaUtilMap>) nil_chk(map_)) getWithId:key1];
    for (id __strong key2 in nil_chk(EduStanfordNlpUtilGenerics_newHashSetWithJavaUtilCollection_([((EduStanfordNlpStatsClassicCounter *) nil_chk(c)) keySet]))) {
      if (EduStanfordNlpMathSloppyMath_isCloseToWithDouble_withDouble_(0.0, [c getCountWithId:key2])) {
        [c removeWithId:key2];
      }
    }
    if ([((id<JavaUtilSet>) nil_chk([c keySet])) isEmpty]) {
      (void) [((id<JavaUtilMap>) nil_chk(map_)) removeWithId:key1];
    }
  }
}

- (EduStanfordNlpUtilMapFactory *)getOuterMapFactory {
  return outerMF_;
}

- (EduStanfordNlpUtilMapFactory *)getInnerMapFactory {
  return innerMF_;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpStatsTwoDimensionalCounter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithEduStanfordNlpUtilMapFactory:(EduStanfordNlpUtilMapFactory *)outerFactory
                    withEduStanfordNlpUtilMapFactory:(EduStanfordNlpUtilMapFactory *)innerFactory {
  EduStanfordNlpStatsTwoDimensionalCounter_initWithEduStanfordNlpUtilMapFactory_withEduStanfordNlpUtilMapFactory_(self, outerFactory, innerFactory);
  return self;
}

+ (EduStanfordNlpStatsTwoDimensionalCounter *)identityHashMapCounter {
  return EduStanfordNlpStatsTwoDimensionalCounter_identityHashMapCounter();
}

- (void)recomputeTotal {
  total_ = 0;
  for (id<JavaUtilMap_Entry> __strong c in nil_chk([((id<JavaUtilMap>) nil_chk(map_)) entrySet])) {
    JrePlusAssignDoubleD(&total_, [((EduStanfordNlpStatsClassicCounter *) nil_chk([((id<JavaUtilMap_Entry>) nil_chk(c)) getValue])) totalCount]);
  }
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  EduStanfordNlpStatsTwoDimensionalCounter_mainWithNSStringArray_(args);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 4, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpStatsClassicCounter;", 0x1, 5, 3, -1, 6, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 7, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 8, 9, -1, 10, -1, -1 },
    { NULL, "Z", 0x1, 11, 3, -1, 12, -1, -1 },
    { NULL, "V", 0x1, 13, 9, -1, 14, -1, -1 },
    { NULL, "V", 0x1, 13, 15, -1, 16, -1, -1 },
    { NULL, "V", 0x1, 17, 9, -1, 14, -1, -1 },
    { NULL, "V", 0x1, 17, 15, -1, 16, -1, -1 },
    { NULL, "V", 0x1, 18, 15, -1, 16, -1, -1 },
    { NULL, "D", 0x1, 19, 9, -1, 20, -1, -1 },
    { NULL, "D", 0x1, 21, 9, -1, 20, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, 22, 3, -1, 23, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 24, -1, -1 },
    { NULL, "LEduStanfordNlpStatsClassicCounter;", 0x1, 25, 26, -1, 27, -1, -1 },
    { NULL, "LEduStanfordNlpStatsTwoDimensionalCounter;", 0x9, 28, 29, -1, 30, -1, -1 },
    { NULL, "LNSString;", 0x1, 31, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 32, 33, -1, -1, -1, -1 },
    { NULL, "[[D", 0x1, 34, 35, -1, 36, -1, -1 },
    { NULL, "LNSString;", 0x1, 37, 38, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 39, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpStatsClassicCounter;", 0x1, -1, -1, -1, 40, -1, -1 },
    { NULL, "V", 0x1, 41, 42, -1, 43, -1, -1 },
    { NULL, "V", 0x1, 41, 26, -1, 44, -1, -1 },
    { NULL, "V", 0x1, 45, 26, -1, 44, -1, -1 },
    { NULL, "V", 0x1, 45, 46, -1, 47, -1, -1 },
    { NULL, "LEduStanfordNlpStatsCounter;", 0x1, -1, -1, -1, 48, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 3, -1, 49, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpUtilMapFactory;", 0x1, -1, -1, -1, 50, -1, -1 },
    { NULL, "LEduStanfordNlpUtilMapFactory;", 0x1, -1, -1, -1, 51, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 52, -1, 53, -1, -1 },
    { NULL, "LEduStanfordNlpStatsTwoDimensionalCounter;", 0x9, -1, -1, -1, 54, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 55, 56, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(defaultReturnValueWithDouble:);
  methods[1].selector = @selector(defaultReturnValue);
  methods[2].selector = @selector(isEqual:);
  methods[3].selector = @selector(hash);
  methods[4].selector = @selector(getCounterWithId:);
  methods[5].selector = @selector(entrySet);
  methods[6].selector = @selector(size);
  methods[7].selector = @selector(sizeOuterMap);
  methods[8].selector = @selector(containsKeyWithId:withId:);
  methods[9].selector = @selector(containsFirstKeyWithId:);
  methods[10].selector = @selector(incrementCountWithId:withId:);
  methods[11].selector = @selector(incrementCountWithId:withId:withDouble:);
  methods[12].selector = @selector(decrementCountWithId:withId:);
  methods[13].selector = @selector(decrementCountWithId:withId:withDouble:);
  methods[14].selector = @selector(setCountWithId:withId:withDouble:);
  methods[15].selector = @selector(removeWithId:withId:);
  methods[16].selector = @selector(getCountWithId:withId:);
  methods[17].selector = @selector(totalCount);
  methods[18].selector = @selector(totalCountWithId:);
  methods[19].selector = @selector(firstKeySet);
  methods[20].selector = @selector(setCounterWithId:withEduStanfordNlpStatsCounter:);
  methods[21].selector = @selector(reverseIndexOrderWithEduStanfordNlpStatsTwoDimensionalCounter:);
  methods[22].selector = @selector(description);
  methods[23].selector = @selector(toMatrixStringWithInt:);
  methods[24].selector = @selector(toMatrixWithJavaUtilList:withJavaUtilList:);
  methods[25].selector = @selector(toCSVStringWithJavaTextNumberFormat:);
  methods[26].selector = @selector(secondKeySet);
  methods[27].selector = @selector(isEmpty);
  methods[28].selector = @selector(flatten);
  methods[29].selector = @selector(addAllWithEduStanfordNlpStatsTwoDimensionalCounterInterface:);
  methods[30].selector = @selector(addAllWithId:withEduStanfordNlpStatsCounter:);
  methods[31].selector = @selector(subtractAllWithId:withEduStanfordNlpStatsCounter:);
  methods[32].selector = @selector(subtractAllWithEduStanfordNlpStatsTwoDimensionalCounterInterface:withBoolean:);
  methods[33].selector = @selector(sumInnerCounter);
  methods[34].selector = @selector(removeZeroCounts);
  methods[35].selector = @selector(removeWithId:);
  methods[36].selector = @selector(clear);
  methods[37].selector = @selector(clean);
  methods[38].selector = @selector(getOuterMapFactory);
  methods[39].selector = @selector(getInnerMapFactory);
  methods[40].selector = @selector(init);
  methods[41].selector = @selector(initWithEduStanfordNlpUtilMapFactory:withEduStanfordNlpUtilMapFactory:);
  methods[42].selector = @selector(identityHashMapCounter);
  methods[43].selector = @selector(recomputeTotal);
  methods[44].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpStatsTwoDimensionalCounter_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "map_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 57, -1 },
    { "total_", "D", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "outerMF_", "LEduStanfordNlpUtilMapFactory;", .constantValue.asLong = 0, 0x2, -1, -1, 58, -1 },
    { "innerMF_", "LEduStanfordNlpUtilMapFactory;", .constantValue.asLong = 0, 0x2, -1, -1, 59, -1 },
    { "defaultValue_", "D", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "defaultReturnValue", "D", "equals", "LNSObject;", "hashCode", "getCounter", "(TK1;)Ledu/stanford/nlp/stats/ClassicCounter<TK2;>;", "()Ljava/util/Set<Ljava/util/Map$Entry<TK1;Ledu/stanford/nlp/stats/ClassicCounter<TK2;>;>;>;", "containsKey", "LNSObject;LNSObject;", "(TK1;TK2;)Z", "containsFirstKey", "(TK1;)Z", "incrementCount", "(TK1;TK2;)V", "LNSObject;LNSObject;D", "(TK1;TK2;D)V", "decrementCount", "setCount", "remove", "(TK1;TK2;)D", "getCount", "totalCount", "(TK1;)D", "()Ljava/util/Set<TK1;>;", "setCounter", "LNSObject;LEduStanfordNlpStatsCounter;", "(TK1;Ledu/stanford/nlp/stats/Counter<TK2;>;)Ledu/stanford/nlp/stats/ClassicCounter<TK2;>;", "reverseIndexOrder", "LEduStanfordNlpStatsTwoDimensionalCounter;", "<K1:Ljava/lang/Object;K2:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/TwoDimensionalCounter<TK1;TK2;>;)Ledu/stanford/nlp/stats/TwoDimensionalCounter<TK2;TK1;>;", "toString", "toMatrixString", "I", "toMatrix", "LJavaUtilList;LJavaUtilList;", "(Ljava/util/List<TK1;>;Ljava/util/List<TK2;>;)[[D", "toCSVString", "LJavaTextNumberFormat;", "()Ljava/util/Set<TK2;>;", "()Ledu/stanford/nlp/stats/ClassicCounter<Ledu/stanford/nlp/util/Pair<TK1;TK2;>;>;", "addAll", "LEduStanfordNlpStatsTwoDimensionalCounterInterface;", "(Ledu/stanford/nlp/stats/TwoDimensionalCounterInterface<TK1;TK2;>;)V", "(TK1;Ledu/stanford/nlp/stats/Counter<TK2;>;)V", "subtractAll", "LEduStanfordNlpStatsTwoDimensionalCounterInterface;Z", "(Ledu/stanford/nlp/stats/TwoDimensionalCounterInterface<TK1;TK2;>;Z)V", "()Ledu/stanford/nlp/stats/Counter<TK1;>;", "(TK1;)V", "()Ledu/stanford/nlp/util/MapFactory<TK1;Ledu/stanford/nlp/stats/ClassicCounter<TK2;>;>;", "()Ledu/stanford/nlp/util/MapFactory<TK2;Ledu/stanford/nlp/util/MutableDouble;>;", "LEduStanfordNlpUtilMapFactory;LEduStanfordNlpUtilMapFactory;", "(Ledu/stanford/nlp/util/MapFactory<TK1;Ledu/stanford/nlp/stats/ClassicCounter<TK2;>;>;Ledu/stanford/nlp/util/MapFactory<TK2;Ledu/stanford/nlp/util/MutableDouble;>;)V", "<K1:Ljava/lang/Object;K2:Ljava/lang/Object;>()Ledu/stanford/nlp/stats/TwoDimensionalCounter<TK1;TK2;>;", "main", "[LNSString;", "Ljava/util/Map<TK1;Ledu/stanford/nlp/stats/ClassicCounter<TK2;>;>;", "Ledu/stanford/nlp/util/MapFactory<TK1;Ledu/stanford/nlp/stats/ClassicCounter<TK2;>;>;", "Ledu/stanford/nlp/util/MapFactory<TK2;Ledu/stanford/nlp/util/MutableDouble;>;", "<K1:Ljava/lang/Object;K2:Ljava/lang/Object;>Ljava/lang/Object;Ledu/stanford/nlp/stats/TwoDimensionalCounterInterface<TK1;TK2;>;Ljava/io/Serializable;" };
  static const J2ObjcClassInfo _EduStanfordNlpStatsTwoDimensionalCounter = { "TwoDimensionalCounter", "edu.stanford.nlp.stats", ptrTable, methods, fields, 7, 0x1, 45, 6, -1, -1, -1, 60, -1 };
  return &_EduStanfordNlpStatsTwoDimensionalCounter;
}

@end

EduStanfordNlpStatsTwoDimensionalCounter *EduStanfordNlpStatsTwoDimensionalCounter_reverseIndexOrderWithEduStanfordNlpStatsTwoDimensionalCounter_(EduStanfordNlpStatsTwoDimensionalCounter *cc) {
  EduStanfordNlpStatsTwoDimensionalCounter_initialize();
  EduStanfordNlpStatsTwoDimensionalCounter *result = new_EduStanfordNlpStatsTwoDimensionalCounter_initWithEduStanfordNlpUtilMapFactory_withEduStanfordNlpUtilMapFactory_(((EduStanfordNlpStatsTwoDimensionalCounter *) nil_chk(cc))->outerMF_, cc->innerMF_);
  for (id __strong key1 in nil_chk([cc firstKeySet])) {
    EduStanfordNlpStatsClassicCounter *c = [cc getCounterWithId:key1];
    for (id __strong key2 in nil_chk([((EduStanfordNlpStatsClassicCounter *) nil_chk(c)) keySet])) {
      jdouble count = [c getCountWithId:key2];
      [result setCountWithId:key2 withId:key1 withDouble:count];
    }
  }
  return result;
}

void EduStanfordNlpStatsTwoDimensionalCounter_init(EduStanfordNlpStatsTwoDimensionalCounter *self) {
  EduStanfordNlpStatsTwoDimensionalCounter_initWithEduStanfordNlpUtilMapFactory_withEduStanfordNlpUtilMapFactory_(self, EduStanfordNlpUtilMapFactory_hashMapFactory(), EduStanfordNlpUtilMapFactory_hashMapFactory());
}

EduStanfordNlpStatsTwoDimensionalCounter *new_EduStanfordNlpStatsTwoDimensionalCounter_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpStatsTwoDimensionalCounter, init)
}

EduStanfordNlpStatsTwoDimensionalCounter *create_EduStanfordNlpStatsTwoDimensionalCounter_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpStatsTwoDimensionalCounter, init)
}

void EduStanfordNlpStatsTwoDimensionalCounter_initWithEduStanfordNlpUtilMapFactory_withEduStanfordNlpUtilMapFactory_(EduStanfordNlpStatsTwoDimensionalCounter *self, EduStanfordNlpUtilMapFactory *outerFactory, EduStanfordNlpUtilMapFactory *innerFactory) {
  NSObject_init(self);
  self->defaultValue_ = 0.0;
  self->innerMF_ = innerFactory;
  self->outerMF_ = outerFactory;
  self->map_ = [((EduStanfordNlpUtilMapFactory *) nil_chk(outerFactory)) newMap];
  self->total_ = 0.0;
}

EduStanfordNlpStatsTwoDimensionalCounter *new_EduStanfordNlpStatsTwoDimensionalCounter_initWithEduStanfordNlpUtilMapFactory_withEduStanfordNlpUtilMapFactory_(EduStanfordNlpUtilMapFactory *outerFactory, EduStanfordNlpUtilMapFactory *innerFactory) {
  J2OBJC_NEW_IMPL(EduStanfordNlpStatsTwoDimensionalCounter, initWithEduStanfordNlpUtilMapFactory_withEduStanfordNlpUtilMapFactory_, outerFactory, innerFactory)
}

EduStanfordNlpStatsTwoDimensionalCounter *create_EduStanfordNlpStatsTwoDimensionalCounter_initWithEduStanfordNlpUtilMapFactory_withEduStanfordNlpUtilMapFactory_(EduStanfordNlpUtilMapFactory *outerFactory, EduStanfordNlpUtilMapFactory *innerFactory) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpStatsTwoDimensionalCounter, initWithEduStanfordNlpUtilMapFactory_withEduStanfordNlpUtilMapFactory_, outerFactory, innerFactory)
}

EduStanfordNlpStatsTwoDimensionalCounter *EduStanfordNlpStatsTwoDimensionalCounter_identityHashMapCounter() {
  EduStanfordNlpStatsTwoDimensionalCounter_initialize();
  return new_EduStanfordNlpStatsTwoDimensionalCounter_initWithEduStanfordNlpUtilMapFactory_withEduStanfordNlpUtilMapFactory_(EduStanfordNlpUtilMapFactory_identityHashMapFactory(), EduStanfordNlpUtilMapFactory_identityHashMapFactory());
}

void EduStanfordNlpStatsTwoDimensionalCounter_mainWithNSStringArray_(IOSObjectArray *args) {
  EduStanfordNlpStatsTwoDimensionalCounter_initialize();
  EduStanfordNlpStatsTwoDimensionalCounter *cc = new_EduStanfordNlpStatsTwoDimensionalCounter_init();
  [cc setCountWithId:@"a" withId:@"c" withDouble:1.0];
  [cc setCountWithId:@"b" withId:@"c" withDouble:1.0];
  [cc setCountWithId:@"a" withId:@"d" withDouble:1.0];
  [cc setCountWithId:@"a" withId:@"d" withDouble:-1.0];
  [cc setCountWithId:@"b" withId:@"d" withDouble:1.0];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithId:cc];
  [cc incrementCountWithId:@"b" withId:@"d" withDouble:1.0];
  [JreLoadStatic(JavaLangSystem, out) printlnWithId:cc];
  EduStanfordNlpStatsTwoDimensionalCounter *cc2 = EduStanfordNlpStatsTwoDimensionalCounter_reverseIndexOrderWithEduStanfordNlpStatsTwoDimensionalCounter_(cc);
  [JreLoadStatic(JavaLangSystem, out) printlnWithId:cc2];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpStatsTwoDimensionalCounter)
