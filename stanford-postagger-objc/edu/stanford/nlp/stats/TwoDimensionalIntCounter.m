//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/stats/TwoDimensionalIntCounter.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/math/ArrayMath.h"
#include "edu/stanford/nlp/stats/Counters.h"
#include "edu/stanford/nlp/stats/IntCounter.h"
#include "edu/stanford/nlp/stats/TwoDimensionalIntCounter.h"
#include "edu/stanford/nlp/util/Generics.h"
#include "edu/stanford/nlp/util/MapFactory.h"
#include "edu/stanford/nlp/util/Pair.h"
#include "edu/stanford/nlp/util/StringUtils.h"
#include "java/lang/Comparable.h"
#include "java/lang/StringBuilder.h"
#include "java/text/DecimalFormat.h"
#include "java/text/NumberFormat.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/Comparator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

@interface EduStanfordNlpStatsTwoDimensionalIntCounter () {
 @public
  id<JavaUtilMap> map_;
  jint total_;
  EduStanfordNlpUtilMapFactory *outerMF_;
  EduStanfordNlpUtilMapFactory *innerMF_;
  jint defaultValue_;
}

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpStatsTwoDimensionalIntCounter, map_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(EduStanfordNlpStatsTwoDimensionalIntCounter, outerMF_, EduStanfordNlpUtilMapFactory *)
J2OBJC_FIELD_SETTER(EduStanfordNlpStatsTwoDimensionalIntCounter, innerMF_, EduStanfordNlpUtilMapFactory *)

inline jlong EduStanfordNlpStatsTwoDimensionalIntCounter_get_serialVersionUID();
#define EduStanfordNlpStatsTwoDimensionalIntCounter_serialVersionUID 1LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpStatsTwoDimensionalIntCounter, serialVersionUID, jlong)

@implementation EduStanfordNlpStatsTwoDimensionalIntCounter

- (void)defaultReturnValueWithDouble:(jdouble)rv {
  defaultValue_ = JreFpToInt(rv);
}

- (void)defaultReturnValueWithInt:(jint)rv {
  defaultValue_ = rv;
}

- (jint)defaultReturnValue {
  return defaultValue_;
}

- (jboolean)isEqual:(id)o {
  if (o == self) return true;
  if (!([o isKindOfClass:[EduStanfordNlpStatsTwoDimensionalIntCounter class]])) return false;
  return [((id<JavaUtilMap>) nil_chk(((EduStanfordNlpStatsTwoDimensionalIntCounter *) nil_chk(((EduStanfordNlpStatsTwoDimensionalIntCounter *) cast_chk(o, [EduStanfordNlpStatsTwoDimensionalIntCounter class]))))->map_)) isEqual:map_];
}

- (NSUInteger)hash {
  return ((jint) [((id<JavaUtilMap>) nil_chk(map_)) hash]) + 17;
}

- (EduStanfordNlpStatsIntCounter *)getCounterWithId:(id)o {
  EduStanfordNlpStatsIntCounter *c = [((id<JavaUtilMap>) nil_chk(map_)) getWithId:o];
  if (c == nil) {
    c = new_EduStanfordNlpStatsIntCounter_initWithEduStanfordNlpUtilMapFactory_(innerMF_);
    [c setDefaultReturnValueWithInt:defaultValue_];
    (void) [((id<JavaUtilMap>) nil_chk(map_)) putWithId:o withId:c];
  }
  return c;
}

- (id<JavaUtilSet>)entrySet {
  return [((id<JavaUtilMap>) nil_chk(map_)) entrySet];
}

- (jint)size {
  jint result = 0;
  for (id __strong o in nil_chk([self firstKeySet])) {
    EduStanfordNlpStatsIntCounter *c = [((id<JavaUtilMap>) nil_chk(map_)) getWithId:o];
    result += [((EduStanfordNlpStatsIntCounter *) nil_chk(c)) size];
  }
  return result;
}

- (jboolean)containsKeyWithId:(id)o1
                       withId:(id)o2 {
  if (![((id<JavaUtilMap>) nil_chk(map_)) containsKeyWithId:o1]) return false;
  EduStanfordNlpStatsIntCounter *c = [((id<JavaUtilMap>) nil_chk(map_)) getWithId:o1];
  return [((EduStanfordNlpStatsIntCounter *) nil_chk(c)) containsKeyWithId:o2];
}

- (void)incrementCountWithId:(id)o1
                      withId:(id)o2 {
  [self incrementCountWithId:o1 withId:o2 withInt:1];
}

- (void)incrementCountWithId:(id)o1
                      withId:(id)o2
                  withDouble:(jdouble)count {
  [self incrementCountWithId:o1 withId:o2 withInt:JreFpToInt(count)];
}

- (void)incrementCountWithId:(id)o1
                      withId:(id)o2
                     withInt:(jint)count {
  EduStanfordNlpStatsIntCounter *c = [self getCounterWithId:o1];
  [((EduStanfordNlpStatsIntCounter *) nil_chk(c)) incrementCountWithId:o2 withInt:count];
  total_ += count;
}

- (void)decrementCountWithId:(id)o1
                      withId:(id)o2 {
  [self incrementCountWithId:o1 withId:o2 withInt:-1];
}

- (void)decrementCountWithId:(id)o1
                      withId:(id)o2
                  withDouble:(jdouble)count {
  [self incrementCountWithId:o1 withId:o2 withDouble:-count];
}

- (void)decrementCountWithId:(id)o1
                      withId:(id)o2
                     withInt:(jint)count {
  [self incrementCountWithId:o1 withId:o2 withInt:-count];
}

- (void)setCountWithId:(id)o1
                withId:(id)o2
            withDouble:(jdouble)count {
  [self setCountWithId:o1 withId:o2 withInt:JreFpToInt(count)];
}

- (void)setCountWithId:(id)o1
                withId:(id)o2
               withInt:(jint)count {
  EduStanfordNlpStatsIntCounter *c = [self getCounterWithId:o1];
  jint oldCount = [self getCountWithId:o1 withId:o2];
  total_ -= oldCount;
  [((EduStanfordNlpStatsIntCounter *) nil_chk(c)) setCountWithId:o2 withInt:count];
  total_ += count;
}

- (jint)removeWithId:(id)o1
              withId:(id)o2 {
  EduStanfordNlpStatsIntCounter *c = [self getCounterWithId:o1];
  jint oldCount = [self getCountWithId:o1 withId:o2];
  total_ -= oldCount;
  [((EduStanfordNlpStatsIntCounter *) nil_chk(c)) removeWithId:o2];
  if ([c isEmpty]) {
    (void) [((id<JavaUtilMap>) nil_chk(map_)) removeWithId:o1];
  }
  return oldCount;
}

- (jint)getCountWithId:(id)o1
                withId:(id)o2 {
  EduStanfordNlpStatsIntCounter *c = [self getCounterWithId:o1];
  if ([((EduStanfordNlpStatsIntCounter *) nil_chk(c)) totalCount] == 0 && ![((id<JavaUtilSet>) nil_chk([c keySet])) containsWithId:o2]) {
    return [self defaultReturnValue];
  }
  return [c getIntCountWithId:o2];
}

- (jint)totalCount {
  return total_;
}

- (jint)totalCountWithId:(id)k1 {
  EduStanfordNlpStatsIntCounter *c = [self getCounterWithId:k1];
  return [((EduStanfordNlpStatsIntCounter *) nil_chk(c)) totalIntCount];
}

- (EduStanfordNlpStatsIntCounter *)totalCounts {
  EduStanfordNlpStatsIntCounter *tc = new_EduStanfordNlpStatsIntCounter_init();
  for (id __strong k1 in nil_chk([((id<JavaUtilMap>) nil_chk(map_)) keySet])) {
    [tc setCountWithId:k1 withDouble:[((EduStanfordNlpStatsIntCounter *) nil_chk([((id<JavaUtilMap>) nil_chk(map_)) getWithId:k1])) totalCount]];
  }
  return tc;
}

- (id<JavaUtilSet>)firstKeySet {
  return [((id<JavaUtilMap>) nil_chk(map_)) keySet];
}

- (EduStanfordNlpStatsIntCounter *)setCounterWithId:(id)o
                  withEduStanfordNlpStatsIntCounter:(EduStanfordNlpStatsIntCounter *)c {
  EduStanfordNlpStatsIntCounter *old = [self getCounterWithId:o];
  total_ -= [((EduStanfordNlpStatsIntCounter *) nil_chk(old)) totalIntCount];
  (void) [((id<JavaUtilMap>) nil_chk(map_)) putWithId:o withId:c];
  total_ += [((EduStanfordNlpStatsIntCounter *) nil_chk(c)) totalIntCount];
  return old;
}

+ (EduStanfordNlpStatsTwoDimensionalIntCounter *)reverseIndexOrderWithEduStanfordNlpStatsTwoDimensionalIntCounter:(EduStanfordNlpStatsTwoDimensionalIntCounter *)cc {
  return EduStanfordNlpStatsTwoDimensionalIntCounter_reverseIndexOrderWithEduStanfordNlpStatsTwoDimensionalIntCounter_(cc);
}

- (NSString *)description {
  JavaLangStringBuilder *buff = new_JavaLangStringBuilder_init();
  for (id __strong key1 in nil_chk([((id<JavaUtilMap>) nil_chk(map_)) keySet])) {
    EduStanfordNlpStatsIntCounter *c = [self getCounterWithId:key1];
    for (id __strong key2 in nil_chk([((EduStanfordNlpStatsIntCounter *) nil_chk(c)) keySet])) {
      jdouble score = [c getCountWithId:key2];
      (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buff appendWithId:key1])) appendWithNSString:@"\t"])) appendWithId:key2])) appendWithNSString:@"\t"])) appendWithDouble:score])) appendWithNSString:@"\n"];
    }
  }
  return [buff description];
}

- (NSString *)toMatrixStringWithInt:(jint)cellSize {
  id<JavaUtilList> firstKeys = new_JavaUtilArrayList_initWithJavaUtilCollection_([self firstKeySet]);
  id<JavaUtilList> secondKeys = new_JavaUtilArrayList_initWithJavaUtilCollection_([self secondKeySet]);
  JavaUtilCollections_sortWithJavaUtilList_(firstKeys);
  JavaUtilCollections_sortWithJavaUtilList_(secondKeys);
  IOSObjectArray *counts = [self toMatrixWithJavaUtilList:firstKeys withJavaUtilList:secondKeys];
  return EduStanfordNlpMathArrayMath_toStringWithIntArray2_withNSObjectArray_withNSObjectArray_withInt_withInt_withJavaTextNumberFormat_withBoolean_(counts, [firstKeys toArray], [secondKeys toArray], cellSize, cellSize, new_JavaTextDecimalFormat_init(), true);
}

- (IOSObjectArray *)toMatrixWithJavaUtilList:(id<JavaUtilList>)firstKeys
                            withJavaUtilList:(id<JavaUtilList>)secondKeys {
  IOSObjectArray *counts = [IOSIntArray newArrayWithDimensions:2 lengths:(jint[]){ [((id<JavaUtilList>) nil_chk(firstKeys)) size], [((id<JavaUtilList>) nil_chk(secondKeys)) size] }];
  for (jint i = 0; i < [firstKeys size]; i++) {
    for (jint j = 0; j < [secondKeys size]; j++) {
      *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(counts, i)), j) = [self getCountWithId:[firstKeys getWithInt:i] withId:[secondKeys getWithInt:j]];
    }
  }
  return counts;
}

- (NSString *)toCSVStringWithJavaTextNumberFormat:(JavaTextNumberFormat *)nf {
  id<JavaUtilList> firstKeys = new_JavaUtilArrayList_initWithJavaUtilCollection_([self firstKeySet]);
  id<JavaUtilList> secondKeys = new_JavaUtilArrayList_initWithJavaUtilCollection_([self secondKeySet]);
  JavaUtilCollections_sortWithJavaUtilList_(firstKeys);
  JavaUtilCollections_sortWithJavaUtilList_(secondKeys);
  JavaLangStringBuilder *b = new_JavaLangStringBuilder_init();
  IOSObjectArray *headerRow = [IOSObjectArray newArrayWithLength:[secondKeys size] + 1 type:NSString_class_()];
  (void) IOSObjectArray_Set(headerRow, 0, @"");
  for (jint j = 0; j < [secondKeys size]; j++) {
    (void) IOSObjectArray_Set(headerRow, j + 1, [nil_chk([secondKeys getWithInt:j]) description]);
  }
  (void) [((JavaLangStringBuilder *) nil_chk([b appendWithNSString:EduStanfordNlpUtilStringUtils_toCSVStringWithNSStringArray_(headerRow)])) appendWithNSString:@"\n"];
  for (id __strong rowLabel in firstKeys) {
    IOSObjectArray *row = [IOSObjectArray newArrayWithLength:[secondKeys size] + 1 type:NSString_class_()];
    (void) IOSObjectArray_Set(row, 0, [nil_chk(rowLabel) description]);
    for (jint j = 0; j < [secondKeys size]; j++) {
      id colLabel = [secondKeys getWithInt:j];
      (void) IOSObjectArray_Set(row, j + 1, [((JavaTextNumberFormat *) nil_chk(nf)) formatWithLong:[self getCountWithId:rowLabel withId:colLabel]]);
    }
    (void) [((JavaLangStringBuilder *) nil_chk([b appendWithNSString:EduStanfordNlpUtilStringUtils_toCSVStringWithNSStringArray_(row)])) appendWithNSString:@"\n"];
  }
  return [b description];
}

+ (NSString *)toCSVStringWithEduStanfordNlpStatsTwoDimensionalIntCounter:(EduStanfordNlpStatsTwoDimensionalIntCounter *)counter
                                                withJavaTextNumberFormat:(JavaTextNumberFormat *)nf
                                                  withJavaUtilComparator:(id<JavaUtilComparator>)key1Comparator
                                                  withJavaUtilComparator:(id<JavaUtilComparator>)key2Comparator {
  return EduStanfordNlpStatsTwoDimensionalIntCounter_toCSVStringWithEduStanfordNlpStatsTwoDimensionalIntCounter_withJavaTextNumberFormat_withJavaUtilComparator_withJavaUtilComparator_(counter, nf, key1Comparator, key2Comparator);
}

- (id<JavaUtilSet>)secondKeySet {
  id<JavaUtilSet> result = EduStanfordNlpUtilGenerics_newHashSet();
  for (id __strong k1 in nil_chk([self firstKeySet])) {
    for (id __strong k2 in nil_chk([((EduStanfordNlpStatsIntCounter *) nil_chk([self getCounterWithId:k1])) keySet])) {
      [((id<JavaUtilSet>) nil_chk(result)) addWithId:k2];
    }
  }
  return result;
}

- (jboolean)isEmpty {
  return [((id<JavaUtilMap>) nil_chk(map_)) isEmpty];
}

- (EduStanfordNlpStatsIntCounter *)flatten {
  EduStanfordNlpStatsIntCounter *result = new_EduStanfordNlpStatsIntCounter_init();
  [result setDefaultReturnValueWithInt:defaultValue_];
  for (id __strong key1 in nil_chk([self firstKeySet])) {
    EduStanfordNlpStatsIntCounter *inner = [self getCounterWithId:key1];
    for (id __strong key2 in nil_chk([((EduStanfordNlpStatsIntCounter *) nil_chk(inner)) keySet])) {
      [result setCountWithId:new_EduStanfordNlpUtilPair_initWithId_withId_(key1, key2) withInt:[inner getIntCountWithId:key2]];
    }
  }
  return result;
}

- (void)addAllWithEduStanfordNlpStatsTwoDimensionalIntCounter:(EduStanfordNlpStatsTwoDimensionalIntCounter *)c {
  for (id __strong key in nil_chk([((EduStanfordNlpStatsTwoDimensionalIntCounter *) nil_chk(c)) firstKeySet])) {
    EduStanfordNlpStatsIntCounter *inner = [c getCounterWithId:key];
    EduStanfordNlpStatsIntCounter *myInner = [self getCounterWithId:key];
    EduStanfordNlpStatsCounters_addInPlaceWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_(myInner, inner);
    total_ += [((EduStanfordNlpStatsIntCounter *) nil_chk(inner)) totalIntCount];
  }
}

- (void)addAllWithId:(id)key
withEduStanfordNlpStatsIntCounter:(EduStanfordNlpStatsIntCounter *)c {
  EduStanfordNlpStatsIntCounter *myInner = [self getCounterWithId:key];
  EduStanfordNlpStatsCounters_addInPlaceWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_(myInner, c);
  total_ += [((EduStanfordNlpStatsIntCounter *) nil_chk(c)) totalIntCount];
}

- (void)subtractAllWithId:(id)key
withEduStanfordNlpStatsIntCounter:(EduStanfordNlpStatsIntCounter *)c {
  EduStanfordNlpStatsIntCounter *myInner = [self getCounterWithId:key];
  EduStanfordNlpStatsCounters_subtractInPlaceWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_(myInner, c);
  total_ -= [((EduStanfordNlpStatsIntCounter *) nil_chk(c)) totalIntCount];
}

- (void)subtractAllWithEduStanfordNlpStatsTwoDimensionalIntCounter:(EduStanfordNlpStatsTwoDimensionalIntCounter *)c
                                                       withBoolean:(jboolean)removeKeys {
  for (id __strong key in nil_chk([((EduStanfordNlpStatsTwoDimensionalIntCounter *) nil_chk(c)) firstKeySet])) {
    EduStanfordNlpStatsIntCounter *inner = [c getCounterWithId:key];
    EduStanfordNlpStatsIntCounter *myInner = [self getCounterWithId:key];
    EduStanfordNlpStatsCounters_subtractInPlaceWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_(myInner, inner);
    if (removeKeys) {
      (void) EduStanfordNlpStatsCounters_retainNonZerosWithEduStanfordNlpStatsCounter_(myInner);
    }
    total_ -= [((EduStanfordNlpStatsIntCounter *) nil_chk(inner)) totalIntCount];
  }
}

- (void)removeZeroCounts {
  id<JavaUtilSet> firstKeySet = EduStanfordNlpUtilGenerics_newHashSetWithJavaUtilCollection_([self firstKeySet]);
  for (id __strong k1 in nil_chk(firstKeySet)) {
    EduStanfordNlpStatsIntCounter *c = [self getCounterWithId:k1];
    (void) EduStanfordNlpStatsCounters_retainNonZerosWithEduStanfordNlpStatsCounter_(c);
    if ([((EduStanfordNlpStatsIntCounter *) nil_chk(c)) isEmpty]) {
      (void) [((id<JavaUtilMap>) nil_chk(map_)) removeWithId:k1];
    }
  }
}

- (void)removeWithId:(id)key {
  EduStanfordNlpStatsIntCounter *counter = [((id<JavaUtilMap>) nil_chk(map_)) getWithId:key];
  if (counter != nil) {
    total_ -= [counter totalIntCount];
  }
  (void) [((id<JavaUtilMap>) nil_chk(map_)) removeWithId:key];
}

- (void)clean {
  for (id __strong key1 in nil_chk(EduStanfordNlpUtilGenerics_newHashSetWithJavaUtilCollection_([((id<JavaUtilMap>) nil_chk(map_)) keySet]))) {
    EduStanfordNlpStatsIntCounter *c = [((id<JavaUtilMap>) nil_chk(map_)) getWithId:key1];
    for (id __strong key2 in nil_chk(EduStanfordNlpUtilGenerics_newHashSetWithJavaUtilCollection_([((EduStanfordNlpStatsIntCounter *) nil_chk(c)) keySet]))) {
      if ([c getIntCountWithId:key2] == 0) {
        [c removeWithId:key2];
      }
    }
    if ([((id<JavaUtilSet>) nil_chk([c keySet])) isEmpty]) {
      (void) [((id<JavaUtilMap>) nil_chk(map_)) removeWithId:key1];
    }
  }
}

- (EduStanfordNlpUtilMapFactory *)getOuterMapFactory {
  return outerMF_;
}

- (EduStanfordNlpUtilMapFactory *)getInnerMapFactory {
  return innerMF_;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpStatsTwoDimensionalIntCounter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithInt:(jint)initialCapacity {
  EduStanfordNlpStatsTwoDimensionalIntCounter_initWithInt_(self, initialCapacity);
  return self;
}

- (instancetype)initWithEduStanfordNlpUtilMapFactory:(EduStanfordNlpUtilMapFactory *)outerFactory
                    withEduStanfordNlpUtilMapFactory:(EduStanfordNlpUtilMapFactory *)innerFactory {
  EduStanfordNlpStatsTwoDimensionalIntCounter_initWithEduStanfordNlpUtilMapFactory_withEduStanfordNlpUtilMapFactory_(self, outerFactory, innerFactory);
  return self;
}

- (instancetype)initWithEduStanfordNlpUtilMapFactory:(EduStanfordNlpUtilMapFactory *)outerFactory
                    withEduStanfordNlpUtilMapFactory:(EduStanfordNlpUtilMapFactory *)innerFactory
                                             withInt:(jint)initialCapacity {
  EduStanfordNlpStatsTwoDimensionalIntCounter_initWithEduStanfordNlpUtilMapFactory_withEduStanfordNlpUtilMapFactory_withInt_(self, outerFactory, innerFactory, initialCapacity);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 5, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpStatsIntCounter;", 0x1, 6, 4, -1, 7, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 8, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 9, 10, -1, 11, -1, -1 },
    { NULL, "V", 0x1, 12, 10, -1, 13, -1, -1 },
    { NULL, "V", 0x1, 12, 14, -1, 15, -1, -1 },
    { NULL, "V", 0x1, 12, 16, -1, 17, -1, -1 },
    { NULL, "V", 0x1, 18, 10, -1, 13, -1, -1 },
    { NULL, "V", 0x1, 18, 14, -1, 15, -1, -1 },
    { NULL, "V", 0x1, 18, 16, -1, 17, -1, -1 },
    { NULL, "V", 0x1, 19, 14, -1, 15, -1, -1 },
    { NULL, "V", 0x1, 19, 16, -1, 17, -1, -1 },
    { NULL, "I", 0x1, 20, 10, -1, 21, -1, -1 },
    { NULL, "I", 0x1, 22, 10, -1, 21, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 23, 4, -1, 24, -1, -1 },
    { NULL, "LEduStanfordNlpStatsIntCounter;", 0x1, -1, -1, -1, 25, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 26, -1, -1 },
    { NULL, "LEduStanfordNlpStatsIntCounter;", 0x1, 27, 28, -1, 29, -1, -1 },
    { NULL, "LEduStanfordNlpStatsTwoDimensionalIntCounter;", 0x9, 30, 31, -1, 32, -1, -1 },
    { NULL, "LNSString;", 0x1, 33, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 34, 2, -1, -1, -1, -1 },
    { NULL, "[[I", 0x1, 35, 36, -1, 37, -1, -1 },
    { NULL, "LNSString;", 0x1, 38, 39, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 38, 40, -1, 41, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 42, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpStatsIntCounter;", 0x1, -1, -1, -1, 43, -1, -1 },
    { NULL, "V", 0x1, 44, 31, -1, 45, -1, -1 },
    { NULL, "V", 0x1, 44, 28, -1, 46, -1, -1 },
    { NULL, "V", 0x1, 47, 28, -1, 46, -1, -1 },
    { NULL, "V", 0x1, 47, 48, -1, 49, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 4, -1, 50, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpUtilMapFactory;", 0x1, -1, -1, -1, 51, -1, -1 },
    { NULL, "LEduStanfordNlpUtilMapFactory;", 0x1, -1, -1, -1, 52, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 53, -1, 54, -1, -1 },
    { NULL, NULL, 0x1, -1, 55, -1, 56, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(defaultReturnValueWithDouble:);
  methods[1].selector = @selector(defaultReturnValueWithInt:);
  methods[2].selector = @selector(defaultReturnValue);
  methods[3].selector = @selector(isEqual:);
  methods[4].selector = @selector(hash);
  methods[5].selector = @selector(getCounterWithId:);
  methods[6].selector = @selector(entrySet);
  methods[7].selector = @selector(size);
  methods[8].selector = @selector(containsKeyWithId:withId:);
  methods[9].selector = @selector(incrementCountWithId:withId:);
  methods[10].selector = @selector(incrementCountWithId:withId:withDouble:);
  methods[11].selector = @selector(incrementCountWithId:withId:withInt:);
  methods[12].selector = @selector(decrementCountWithId:withId:);
  methods[13].selector = @selector(decrementCountWithId:withId:withDouble:);
  methods[14].selector = @selector(decrementCountWithId:withId:withInt:);
  methods[15].selector = @selector(setCountWithId:withId:withDouble:);
  methods[16].selector = @selector(setCountWithId:withId:withInt:);
  methods[17].selector = @selector(removeWithId:withId:);
  methods[18].selector = @selector(getCountWithId:withId:);
  methods[19].selector = @selector(totalCount);
  methods[20].selector = @selector(totalCountWithId:);
  methods[21].selector = @selector(totalCounts);
  methods[22].selector = @selector(firstKeySet);
  methods[23].selector = @selector(setCounterWithId:withEduStanfordNlpStatsIntCounter:);
  methods[24].selector = @selector(reverseIndexOrderWithEduStanfordNlpStatsTwoDimensionalIntCounter:);
  methods[25].selector = @selector(description);
  methods[26].selector = @selector(toMatrixStringWithInt:);
  methods[27].selector = @selector(toMatrixWithJavaUtilList:withJavaUtilList:);
  methods[28].selector = @selector(toCSVStringWithJavaTextNumberFormat:);
  methods[29].selector = @selector(toCSVStringWithEduStanfordNlpStatsTwoDimensionalIntCounter:withJavaTextNumberFormat:withJavaUtilComparator:withJavaUtilComparator:);
  methods[30].selector = @selector(secondKeySet);
  methods[31].selector = @selector(isEmpty);
  methods[32].selector = @selector(flatten);
  methods[33].selector = @selector(addAllWithEduStanfordNlpStatsTwoDimensionalIntCounter:);
  methods[34].selector = @selector(addAllWithId:withEduStanfordNlpStatsIntCounter:);
  methods[35].selector = @selector(subtractAllWithId:withEduStanfordNlpStatsIntCounter:);
  methods[36].selector = @selector(subtractAllWithEduStanfordNlpStatsTwoDimensionalIntCounter:withBoolean:);
  methods[37].selector = @selector(removeZeroCounts);
  methods[38].selector = @selector(removeWithId:);
  methods[39].selector = @selector(clean);
  methods[40].selector = @selector(getOuterMapFactory);
  methods[41].selector = @selector(getInnerMapFactory);
  methods[42].selector = @selector(init);
  methods[43].selector = @selector(initWithInt:);
  methods[44].selector = @selector(initWithEduStanfordNlpUtilMapFactory:withEduStanfordNlpUtilMapFactory:);
  methods[45].selector = @selector(initWithEduStanfordNlpUtilMapFactory:withEduStanfordNlpUtilMapFactory:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpStatsTwoDimensionalIntCounter_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "map_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 57, -1 },
    { "total_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "outerMF_", "LEduStanfordNlpUtilMapFactory;", .constantValue.asLong = 0, 0x2, -1, -1, 58, -1 },
    { "innerMF_", "LEduStanfordNlpUtilMapFactory;", .constantValue.asLong = 0, 0x2, -1, -1, 59, -1 },
    { "defaultValue_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "defaultReturnValue", "D", "I", "equals", "LNSObject;", "hashCode", "getCounter", "(TK1;)Ledu/stanford/nlp/stats/IntCounter<TK2;>;", "()Ljava/util/Set<Ljava/util/Map$Entry<TK1;Ledu/stanford/nlp/stats/IntCounter<TK2;>;>;>;", "containsKey", "LNSObject;LNSObject;", "(TK1;TK2;)Z", "incrementCount", "(TK1;TK2;)V", "LNSObject;LNSObject;D", "(TK1;TK2;D)V", "LNSObject;LNSObject;I", "(TK1;TK2;I)V", "decrementCount", "setCount", "remove", "(TK1;TK2;)I", "getCount", "totalCount", "(TK1;)I", "()Ledu/stanford/nlp/stats/IntCounter<TK1;>;", "()Ljava/util/Set<TK1;>;", "setCounter", "LNSObject;LEduStanfordNlpStatsIntCounter;", "(TK1;Ledu/stanford/nlp/stats/IntCounter<TK2;>;)Ledu/stanford/nlp/stats/IntCounter<TK2;>;", "reverseIndexOrder", "LEduStanfordNlpStatsTwoDimensionalIntCounter;", "<K1:Ljava/lang/Object;K2:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/TwoDimensionalIntCounter<TK1;TK2;>;)Ledu/stanford/nlp/stats/TwoDimensionalIntCounter<TK2;TK1;>;", "toString", "toMatrixString", "toMatrix", "LJavaUtilList;LJavaUtilList;", "(Ljava/util/List<TK1;>;Ljava/util/List<TK2;>;)[[I", "toCSVString", "LJavaTextNumberFormat;", "LEduStanfordNlpStatsTwoDimensionalIntCounter;LJavaTextNumberFormat;LJavaUtilComparator;LJavaUtilComparator;", "<CK1::Ljava/lang/Comparable<TCK1;>;CK2::Ljava/lang/Comparable<TCK2;>;>(Ledu/stanford/nlp/stats/TwoDimensionalIntCounter<TCK1;TCK2;>;Ljava/text/NumberFormat;Ljava/util/Comparator<TCK1;>;Ljava/util/Comparator<TCK2;>;)Ljava/lang/String;", "()Ljava/util/Set<TK2;>;", "()Ledu/stanford/nlp/stats/IntCounter<Ledu/stanford/nlp/util/Pair<TK1;TK2;>;>;", "addAll", "(Ledu/stanford/nlp/stats/TwoDimensionalIntCounter<TK1;TK2;>;)V", "(TK1;Ledu/stanford/nlp/stats/IntCounter<TK2;>;)V", "subtractAll", "LEduStanfordNlpStatsTwoDimensionalIntCounter;Z", "(Ledu/stanford/nlp/stats/TwoDimensionalIntCounter<TK1;TK2;>;Z)V", "(TK1;)V", "()Ledu/stanford/nlp/util/MapFactory<TK1;Ledu/stanford/nlp/stats/IntCounter<TK2;>;>;", "()Ledu/stanford/nlp/util/MapFactory<TK2;Ledu/stanford/nlp/util/MutableInteger;>;", "LEduStanfordNlpUtilMapFactory;LEduStanfordNlpUtilMapFactory;", "(Ledu/stanford/nlp/util/MapFactory<TK1;Ledu/stanford/nlp/stats/IntCounter<TK2;>;>;Ledu/stanford/nlp/util/MapFactory<TK2;Ledu/stanford/nlp/util/MutableInteger;>;)V", "LEduStanfordNlpUtilMapFactory;LEduStanfordNlpUtilMapFactory;I", "(Ledu/stanford/nlp/util/MapFactory<TK1;Ledu/stanford/nlp/stats/IntCounter<TK2;>;>;Ledu/stanford/nlp/util/MapFactory<TK2;Ledu/stanford/nlp/util/MutableInteger;>;I)V", "Ljava/util/Map<TK1;Ledu/stanford/nlp/stats/IntCounter<TK2;>;>;", "Ledu/stanford/nlp/util/MapFactory<TK1;Ledu/stanford/nlp/stats/IntCounter<TK2;>;>;", "Ledu/stanford/nlp/util/MapFactory<TK2;Ledu/stanford/nlp/util/MutableInteger;>;", "<K1:Ljava/lang/Object;K2:Ljava/lang/Object;>Ljava/lang/Object;Ljava/io/Serializable;" };
  static const J2ObjcClassInfo _EduStanfordNlpStatsTwoDimensionalIntCounter = { "TwoDimensionalIntCounter", "edu.stanford.nlp.stats", ptrTable, methods, fields, 7, 0x1, 46, 6, -1, -1, -1, 60, -1 };
  return &_EduStanfordNlpStatsTwoDimensionalIntCounter;
}

@end

EduStanfordNlpStatsTwoDimensionalIntCounter *EduStanfordNlpStatsTwoDimensionalIntCounter_reverseIndexOrderWithEduStanfordNlpStatsTwoDimensionalIntCounter_(EduStanfordNlpStatsTwoDimensionalIntCounter *cc) {
  EduStanfordNlpStatsTwoDimensionalIntCounter_initialize();
  EduStanfordNlpStatsTwoDimensionalIntCounter *result = new_EduStanfordNlpStatsTwoDimensionalIntCounter_initWithEduStanfordNlpUtilMapFactory_withEduStanfordNlpUtilMapFactory_(((EduStanfordNlpStatsTwoDimensionalIntCounter *) nil_chk(cc))->outerMF_, cc->innerMF_);
  for (id __strong key1 in nil_chk([cc firstKeySet])) {
    EduStanfordNlpStatsIntCounter *c = [cc getCounterWithId:key1];
    for (id __strong key2 in nil_chk([((EduStanfordNlpStatsIntCounter *) nil_chk(c)) keySet])) {
      jint count = [c getIntCountWithId:key2];
      [result setCountWithId:key2 withId:key1 withInt:count];
    }
  }
  return result;
}

NSString *EduStanfordNlpStatsTwoDimensionalIntCounter_toCSVStringWithEduStanfordNlpStatsTwoDimensionalIntCounter_withJavaTextNumberFormat_withJavaUtilComparator_withJavaUtilComparator_(EduStanfordNlpStatsTwoDimensionalIntCounter *counter, JavaTextNumberFormat *nf, id<JavaUtilComparator> key1Comparator, id<JavaUtilComparator> key2Comparator) {
  EduStanfordNlpStatsTwoDimensionalIntCounter_initialize();
  id<JavaUtilList> firstKeys = new_JavaUtilArrayList_initWithJavaUtilCollection_([((EduStanfordNlpStatsTwoDimensionalIntCounter *) nil_chk(counter)) firstKeySet]);
  id<JavaUtilList> secondKeys = new_JavaUtilArrayList_initWithJavaUtilCollection_([counter secondKeySet]);
  JavaUtilCollections_sortWithJavaUtilList_withJavaUtilComparator_(firstKeys, key1Comparator);
  JavaUtilCollections_sortWithJavaUtilList_withJavaUtilComparator_(secondKeys, key2Comparator);
  JavaLangStringBuilder *b = new_JavaLangStringBuilder_init();
  jint secondKeysSize = [secondKeys size];
  IOSObjectArray *headerRow = [IOSObjectArray newArrayWithLength:secondKeysSize + 1 type:NSString_class_()];
  (void) IOSObjectArray_Set(headerRow, 0, @"");
  for (jint j = 0; j < secondKeysSize; j++) {
    (void) IOSObjectArray_Set(headerRow, j + 1, [((id<JavaLangComparable>) nil_chk([secondKeys getWithInt:j])) description]);
  }
  (void) [((JavaLangStringBuilder *) nil_chk([b appendWithNSString:EduStanfordNlpUtilStringUtils_toCSVStringWithNSStringArray_(headerRow)])) appendWithChar:0x000a];
  for (id<JavaLangComparable> __strong rowLabel in firstKeys) {
    IOSObjectArray *row = [IOSObjectArray newArrayWithLength:secondKeysSize + 1 type:NSString_class_()];
    (void) IOSObjectArray_Set(row, 0, [((id<JavaLangComparable>) nil_chk(rowLabel)) description]);
    for (jint j = 0; j < secondKeysSize; j++) {
      id<JavaLangComparable> colLabel = [secondKeys getWithInt:j];
      (void) IOSObjectArray_Set(row, j + 1, [((JavaTextNumberFormat *) nil_chk(nf)) formatWithLong:[counter getCountWithId:rowLabel withId:colLabel]]);
    }
    (void) [((JavaLangStringBuilder *) nil_chk([b appendWithNSString:EduStanfordNlpUtilStringUtils_toCSVStringWithNSStringArray_(row)])) appendWithChar:0x000a];
  }
  return [b description];
}

void EduStanfordNlpStatsTwoDimensionalIntCounter_init(EduStanfordNlpStatsTwoDimensionalIntCounter *self) {
  EduStanfordNlpStatsTwoDimensionalIntCounter_initWithEduStanfordNlpUtilMapFactory_withEduStanfordNlpUtilMapFactory_(self, EduStanfordNlpUtilMapFactory_hashMapFactory(), EduStanfordNlpUtilMapFactory_hashMapFactory());
}

EduStanfordNlpStatsTwoDimensionalIntCounter *new_EduStanfordNlpStatsTwoDimensionalIntCounter_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpStatsTwoDimensionalIntCounter, init)
}

EduStanfordNlpStatsTwoDimensionalIntCounter *create_EduStanfordNlpStatsTwoDimensionalIntCounter_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpStatsTwoDimensionalIntCounter, init)
}

void EduStanfordNlpStatsTwoDimensionalIntCounter_initWithInt_(EduStanfordNlpStatsTwoDimensionalIntCounter *self, jint initialCapacity) {
  EduStanfordNlpStatsTwoDimensionalIntCounter_initWithEduStanfordNlpUtilMapFactory_withEduStanfordNlpUtilMapFactory_withInt_(self, EduStanfordNlpUtilMapFactory_hashMapFactory(), EduStanfordNlpUtilMapFactory_hashMapFactory(), initialCapacity);
}

EduStanfordNlpStatsTwoDimensionalIntCounter *new_EduStanfordNlpStatsTwoDimensionalIntCounter_initWithInt_(jint initialCapacity) {
  J2OBJC_NEW_IMPL(EduStanfordNlpStatsTwoDimensionalIntCounter, initWithInt_, initialCapacity)
}

EduStanfordNlpStatsTwoDimensionalIntCounter *create_EduStanfordNlpStatsTwoDimensionalIntCounter_initWithInt_(jint initialCapacity) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpStatsTwoDimensionalIntCounter, initWithInt_, initialCapacity)
}

void EduStanfordNlpStatsTwoDimensionalIntCounter_initWithEduStanfordNlpUtilMapFactory_withEduStanfordNlpUtilMapFactory_(EduStanfordNlpStatsTwoDimensionalIntCounter *self, EduStanfordNlpUtilMapFactory *outerFactory, EduStanfordNlpUtilMapFactory *innerFactory) {
  EduStanfordNlpStatsTwoDimensionalIntCounter_initWithEduStanfordNlpUtilMapFactory_withEduStanfordNlpUtilMapFactory_withInt_(self, outerFactory, innerFactory, 100);
}

EduStanfordNlpStatsTwoDimensionalIntCounter *new_EduStanfordNlpStatsTwoDimensionalIntCounter_initWithEduStanfordNlpUtilMapFactory_withEduStanfordNlpUtilMapFactory_(EduStanfordNlpUtilMapFactory *outerFactory, EduStanfordNlpUtilMapFactory *innerFactory) {
  J2OBJC_NEW_IMPL(EduStanfordNlpStatsTwoDimensionalIntCounter, initWithEduStanfordNlpUtilMapFactory_withEduStanfordNlpUtilMapFactory_, outerFactory, innerFactory)
}

EduStanfordNlpStatsTwoDimensionalIntCounter *create_EduStanfordNlpStatsTwoDimensionalIntCounter_initWithEduStanfordNlpUtilMapFactory_withEduStanfordNlpUtilMapFactory_(EduStanfordNlpUtilMapFactory *outerFactory, EduStanfordNlpUtilMapFactory *innerFactory) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpStatsTwoDimensionalIntCounter, initWithEduStanfordNlpUtilMapFactory_withEduStanfordNlpUtilMapFactory_, outerFactory, innerFactory)
}

void EduStanfordNlpStatsTwoDimensionalIntCounter_initWithEduStanfordNlpUtilMapFactory_withEduStanfordNlpUtilMapFactory_withInt_(EduStanfordNlpStatsTwoDimensionalIntCounter *self, EduStanfordNlpUtilMapFactory *outerFactory, EduStanfordNlpUtilMapFactory *innerFactory, jint initialCapacity) {
  NSObject_init(self);
  self->defaultValue_ = 0;
  self->innerMF_ = innerFactory;
  self->outerMF_ = outerFactory;
  self->map_ = [((EduStanfordNlpUtilMapFactory *) nil_chk(outerFactory)) newMapWithInt:initialCapacity];
  self->total_ = 0;
}

EduStanfordNlpStatsTwoDimensionalIntCounter *new_EduStanfordNlpStatsTwoDimensionalIntCounter_initWithEduStanfordNlpUtilMapFactory_withEduStanfordNlpUtilMapFactory_withInt_(EduStanfordNlpUtilMapFactory *outerFactory, EduStanfordNlpUtilMapFactory *innerFactory, jint initialCapacity) {
  J2OBJC_NEW_IMPL(EduStanfordNlpStatsTwoDimensionalIntCounter, initWithEduStanfordNlpUtilMapFactory_withEduStanfordNlpUtilMapFactory_withInt_, outerFactory, innerFactory, initialCapacity)
}

EduStanfordNlpStatsTwoDimensionalIntCounter *create_EduStanfordNlpStatsTwoDimensionalIntCounter_initWithEduStanfordNlpUtilMapFactory_withEduStanfordNlpUtilMapFactory_withInt_(EduStanfordNlpUtilMapFactory *outerFactory, EduStanfordNlpUtilMapFactory *innerFactory, jint initialCapacity) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpStatsTwoDimensionalIntCounter, initWithEduStanfordNlpUtilMapFactory_withEduStanfordNlpUtilMapFactory_withInt_, outerFactory, innerFactory, initialCapacity)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpStatsTwoDimensionalIntCounter)
