//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/stats/SimpleGoodTuring.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/stats/SimpleGoodTuring.h"
#include "java/io/BufferedReader.h"
#include "java/io/InputStream.h"
#include "java/io/InputStreamReader.h"
#include "java/io/PrintStream.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"

@interface EduStanfordNlpStatsSimpleGoodTuring () {
 @public
  IOSIntArray *r_;
  IOSIntArray *n_;
  jint rows_;
  jint bigN_;
  jdouble pZero_;
  jdouble bigNPrime_;
  jdouble slope_;
  jdouble intercept_;
  IOSDoubleArray *z_;
  IOSDoubleArray *logR_;
  IOSDoubleArray *logZ_;
  IOSDoubleArray *rStar_;
  IOSDoubleArray *p_;
}

- (void)compute;

- (jint)rowWithInt:(jint)freq;

- (void)findBestFit;

- (jdouble)smoothedWithInt:(jint)i;

+ (jdouble)sqWithDouble:(jdouble)x;

- (void)print;

- (void)validateWithDouble:(jdouble)tolerance;

+ (IOSObjectArray *)readInput;

+ (IOSIntArray *)integerList2IntArrayWithJavaUtilList:(id<JavaUtilList>)integers;

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpStatsSimpleGoodTuring, r_, IOSIntArray *)
J2OBJC_FIELD_SETTER(EduStanfordNlpStatsSimpleGoodTuring, n_, IOSIntArray *)
J2OBJC_FIELD_SETTER(EduStanfordNlpStatsSimpleGoodTuring, z_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(EduStanfordNlpStatsSimpleGoodTuring, logR_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(EduStanfordNlpStatsSimpleGoodTuring, logZ_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(EduStanfordNlpStatsSimpleGoodTuring, rStar_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(EduStanfordNlpStatsSimpleGoodTuring, p_, IOSDoubleArray *)

inline jint EduStanfordNlpStatsSimpleGoodTuring_get_MIN_INPUT();
#define EduStanfordNlpStatsSimpleGoodTuring_MIN_INPUT 5
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpStatsSimpleGoodTuring, MIN_INPUT, jint)

inline jdouble EduStanfordNlpStatsSimpleGoodTuring_get_CONFID_FACTOR();
#define EduStanfordNlpStatsSimpleGoodTuring_CONFID_FACTOR 1.96
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpStatsSimpleGoodTuring, CONFID_FACTOR, jdouble)

inline jdouble EduStanfordNlpStatsSimpleGoodTuring_get_TOLERANCE();
#define EduStanfordNlpStatsSimpleGoodTuring_TOLERANCE 1.0E-12
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpStatsSimpleGoodTuring, TOLERANCE, jdouble)

__attribute__((unused)) static void EduStanfordNlpStatsSimpleGoodTuring_compute(EduStanfordNlpStatsSimpleGoodTuring *self);

__attribute__((unused)) static jint EduStanfordNlpStatsSimpleGoodTuring_rowWithInt_(EduStanfordNlpStatsSimpleGoodTuring *self, jint freq);

__attribute__((unused)) static void EduStanfordNlpStatsSimpleGoodTuring_findBestFit(EduStanfordNlpStatsSimpleGoodTuring *self);

__attribute__((unused)) static jdouble EduStanfordNlpStatsSimpleGoodTuring_smoothedWithInt_(EduStanfordNlpStatsSimpleGoodTuring *self, jint i);

__attribute__((unused)) static jdouble EduStanfordNlpStatsSimpleGoodTuring_sqWithDouble_(jdouble x);

__attribute__((unused)) static void EduStanfordNlpStatsSimpleGoodTuring_print(EduStanfordNlpStatsSimpleGoodTuring *self);

__attribute__((unused)) static void EduStanfordNlpStatsSimpleGoodTuring_validateWithDouble_(EduStanfordNlpStatsSimpleGoodTuring *self, jdouble tolerance);

__attribute__((unused)) static IOSObjectArray *EduStanfordNlpStatsSimpleGoodTuring_readInput();

__attribute__((unused)) static IOSIntArray *EduStanfordNlpStatsSimpleGoodTuring_integerList2IntArrayWithJavaUtilList_(id<JavaUtilList> integers);

@implementation EduStanfordNlpStatsSimpleGoodTuring

- (instancetype)initWithIntArray:(IOSIntArray *)r
                    withIntArray:(IOSIntArray *)n {
  EduStanfordNlpStatsSimpleGoodTuring_initWithIntArray_withIntArray_(self, r, n);
  return self;
}

- (jdouble)getProbabilityForUnseen {
  return pZero_;
}

- (IOSDoubleArray *)getProbabilities {
  return p_;
}

- (void)compute {
  EduStanfordNlpStatsSimpleGoodTuring_compute(self);
}

- (jint)rowWithInt:(jint)freq {
  return EduStanfordNlpStatsSimpleGoodTuring_rowWithInt_(self, freq);
}

- (void)findBestFit {
  EduStanfordNlpStatsSimpleGoodTuring_findBestFit(self);
}

- (jdouble)smoothedWithInt:(jint)i {
  return EduStanfordNlpStatsSimpleGoodTuring_smoothedWithInt_(self, i);
}

+ (jdouble)sqWithDouble:(jdouble)x {
  return EduStanfordNlpStatsSimpleGoodTuring_sqWithDouble_(x);
}

- (void)print {
  EduStanfordNlpStatsSimpleGoodTuring_print(self);
}

- (void)validateWithDouble:(jdouble)tolerance {
  EduStanfordNlpStatsSimpleGoodTuring_validateWithDouble_(self, tolerance);
}

+ (IOSObjectArray *)readInput {
  return EduStanfordNlpStatsSimpleGoodTuring_readInput();
}

+ (IOSIntArray *)integerList2IntArrayWithJavaUtilList:(id<JavaUtilList>)integers {
  return EduStanfordNlpStatsSimpleGoodTuring_integerList2IntArrayWithJavaUtilList_(integers);
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  EduStanfordNlpStatsSimpleGoodTuring_mainWithNSStringArray_(args);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x2, 3, 2, -1, -1, -1, -1 },
    { NULL, "D", 0xa, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 6, 5, -1, -1, -1, -1 },
    { NULL, "[[I", 0xa, -1, -1, 7, -1, -1, -1 },
    { NULL, "[I", 0xa, 8, 9, -1, 10, -1, -1 },
    { NULL, "V", 0x9, 11, 12, 7, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIntArray:withIntArray:);
  methods[1].selector = @selector(getProbabilityForUnseen);
  methods[2].selector = @selector(getProbabilities);
  methods[3].selector = @selector(compute);
  methods[4].selector = @selector(rowWithInt:);
  methods[5].selector = @selector(findBestFit);
  methods[6].selector = @selector(smoothedWithInt:);
  methods[7].selector = @selector(sqWithDouble:);
  methods[8].selector = @selector(print);
  methods[9].selector = @selector(validateWithDouble:);
  methods[10].selector = @selector(readInput);
  methods[11].selector = @selector(integerList2IntArrayWithJavaUtilList:);
  methods[12].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "MIN_INPUT", "I", .constantValue.asInt = EduStanfordNlpStatsSimpleGoodTuring_MIN_INPUT, 0x1a, -1, -1, -1, -1 },
    { "CONFID_FACTOR", "D", .constantValue.asDouble = EduStanfordNlpStatsSimpleGoodTuring_CONFID_FACTOR, 0x1a, -1, -1, -1, -1 },
    { "TOLERANCE", "D", .constantValue.asDouble = EduStanfordNlpStatsSimpleGoodTuring_TOLERANCE, 0x1a, -1, -1, -1, -1 },
    { "r_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "n_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "rows_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bigN_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "pZero_", "D", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bigNPrime_", "D", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "slope_", "D", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "intercept_", "D", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "z_", "[D", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "logR_", "[D", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "logZ_", "[D", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "rStar_", "[D", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "p_", "[D", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[I[I", "row", "I", "smoothed", "sq", "D", "validate", "LJavaLangException;", "integerList2IntArray", "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/Integer;>;)[I", "main", "[LNSString;" };
  static const J2ObjcClassInfo _EduStanfordNlpStatsSimpleGoodTuring = { "SimpleGoodTuring", "edu.stanford.nlp.stats", ptrTable, methods, fields, 7, 0x1, 13, 16, -1, -1, -1, -1, -1 };
  return &_EduStanfordNlpStatsSimpleGoodTuring;
}

@end

void EduStanfordNlpStatsSimpleGoodTuring_initWithIntArray_withIntArray_(EduStanfordNlpStatsSimpleGoodTuring *self, IOSIntArray *r, IOSIntArray *n) {
  NSObject_init(self);
  self->bigN_ = 0;
  if (r == nil) @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"r must not be null!");
  if (n == nil) @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"n must not be null!");
  if (r->size_ != n->size_) @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"r and n must have same size!");
  if (r->size_ < EduStanfordNlpStatsSimpleGoodTuring_MIN_INPUT) @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$IC", @"r must have size >= ", EduStanfordNlpStatsSimpleGoodTuring_MIN_INPUT, '!'));
  self->r_ = [IOSIntArray newArrayWithLength:r->size_];
  self->n_ = [IOSIntArray newArrayWithLength:n->size_];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(r, 0, self->r_, 0, r->size_);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(n, 0, self->n_, 0, n->size_);
  self->rows_ = r->size_;
  EduStanfordNlpStatsSimpleGoodTuring_compute(self);
  EduStanfordNlpStatsSimpleGoodTuring_validateWithDouble_(self, EduStanfordNlpStatsSimpleGoodTuring_TOLERANCE);
}

EduStanfordNlpStatsSimpleGoodTuring *new_EduStanfordNlpStatsSimpleGoodTuring_initWithIntArray_withIntArray_(IOSIntArray *r, IOSIntArray *n) {
  J2OBJC_NEW_IMPL(EduStanfordNlpStatsSimpleGoodTuring, initWithIntArray_withIntArray_, r, n)
}

EduStanfordNlpStatsSimpleGoodTuring *create_EduStanfordNlpStatsSimpleGoodTuring_initWithIntArray_withIntArray_(IOSIntArray *r, IOSIntArray *n) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpStatsSimpleGoodTuring, initWithIntArray_withIntArray_, r, n)
}

void EduStanfordNlpStatsSimpleGoodTuring_compute(EduStanfordNlpStatsSimpleGoodTuring *self) {
  jint i, j, next_n;
  jdouble k, x, y;
  jboolean indiffValsSeen = false;
  self->z_ = [IOSDoubleArray newArrayWithLength:self->rows_];
  self->logR_ = [IOSDoubleArray newArrayWithLength:self->rows_];
  self->logZ_ = [IOSDoubleArray newArrayWithLength:self->rows_];
  self->rStar_ = [IOSDoubleArray newArrayWithLength:self->rows_];
  self->p_ = [IOSDoubleArray newArrayWithLength:self->rows_];
  for (j = 0; j < self->rows_; ++j) self->bigN_ += IOSIntArray_Get(nil_chk(self->r_), j) * IOSIntArray_Get(nil_chk(self->n_), j);
  next_n = EduStanfordNlpStatsSimpleGoodTuring_rowWithInt_(self, 1);
  self->pZero_ = (next_n < 0) ? 0 : IOSIntArray_Get(nil_chk(self->n_), next_n) / (jdouble) self->bigN_;
  for (j = 0; j < self->rows_; ++j) {
    i = (j == 0 ? 0 : IOSIntArray_Get(nil_chk(self->r_), j - 1));
    if (j == self->rows_ - 1) k = (jdouble) (2 * IOSIntArray_Get(nil_chk(self->r_), j) - i);
    else k = (jdouble) IOSIntArray_Get(nil_chk(self->r_), j + 1);
    *IOSDoubleArray_GetRef(nil_chk(self->z_), j) = 2 * IOSIntArray_Get(nil_chk(self->n_), j) / (k - i);
    *IOSDoubleArray_GetRef(nil_chk(self->logR_), j) = JavaLangMath_logWithDouble_(IOSIntArray_Get(self->r_, j));
    *IOSDoubleArray_GetRef(nil_chk(self->logZ_), j) = JavaLangMath_logWithDouble_(IOSDoubleArray_Get(nil_chk(self->z_), j));
  }
  EduStanfordNlpStatsSimpleGoodTuring_findBestFit(self);
  for (j = 0; j < self->rows_; ++j) {
    y = (IOSIntArray_Get(nil_chk(self->r_), j) + 1) * EduStanfordNlpStatsSimpleGoodTuring_smoothedWithInt_(self, IOSIntArray_Get(self->r_, j) + 1) / EduStanfordNlpStatsSimpleGoodTuring_smoothedWithInt_(self, IOSIntArray_Get(nil_chk(self->r_), j));
    if (EduStanfordNlpStatsSimpleGoodTuring_rowWithInt_(self, IOSIntArray_Get(nil_chk(self->r_), j) + 1) < 0) indiffValsSeen = true;
    if (!indiffValsSeen) {
      x = (IOSIntArray_Get(nil_chk(self->r_), j) + 1) * (next_n = IOSIntArray_Get(nil_chk(self->n_), EduStanfordNlpStatsSimpleGoodTuring_rowWithInt_(self, IOSIntArray_Get(self->r_, j) + 1))) / (jdouble) IOSIntArray_Get(nil_chk(self->n_), j);
      if (JavaLangMath_absWithDouble_(x - y) <= EduStanfordNlpStatsSimpleGoodTuring_CONFID_FACTOR * JavaLangMath_sqrtWithDouble_(EduStanfordNlpStatsSimpleGoodTuring_sqWithDouble_(IOSIntArray_Get(nil_chk(self->r_), j) + 1.0) * next_n / (EduStanfordNlpStatsSimpleGoodTuring_sqWithDouble_((jdouble) IOSIntArray_Get(nil_chk(self->n_), j))) * (1 + next_n / (jdouble) IOSIntArray_Get(nil_chk(self->n_), j)))) indiffValsSeen = true;
      else *IOSDoubleArray_GetRef(nil_chk(self->rStar_), j) = x;
    }
    if (indiffValsSeen) *IOSDoubleArray_GetRef(nil_chk(self->rStar_), j) = y;
  }
  self->bigNPrime_ = 0.0;
  for (j = 0; j < self->rows_; ++j) JrePlusAssignDoubleD(&self->bigNPrime_, IOSIntArray_Get(nil_chk(self->n_), j) * IOSDoubleArray_Get(nil_chk(self->rStar_), j));
  for (j = 0; j < self->rows_; ++j) *IOSDoubleArray_GetRef(nil_chk(self->p_), j) = (1 - self->pZero_) * IOSDoubleArray_Get(nil_chk(self->rStar_), j) / self->bigNPrime_;
}

jint EduStanfordNlpStatsSimpleGoodTuring_rowWithInt_(EduStanfordNlpStatsSimpleGoodTuring *self, jint freq) {
  jint i = 0;
  while (i < self->rows_ && IOSIntArray_Get(nil_chk(self->r_), i) < freq) i++;
  return ((i < self->rows_ && IOSIntArray_Get(nil_chk(self->r_), i) == freq) ? i : -1);
}

void EduStanfordNlpStatsSimpleGoodTuring_findBestFit(EduStanfordNlpStatsSimpleGoodTuring *self) {
  jdouble XYs, Xsquares, meanX, meanY;
  jint i;
  XYs = Xsquares = meanX = meanY = 0.0;
  for (i = 0; i < self->rows_; ++i) {
    JrePlusAssignDoubleD(&meanX, IOSDoubleArray_Get(nil_chk(self->logR_), i));
    JrePlusAssignDoubleD(&meanY, IOSDoubleArray_Get(nil_chk(self->logZ_), i));
  }
  JreDivideAssignDoubleD(&meanX, self->rows_);
  JreDivideAssignDoubleD(&meanY, self->rows_);
  for (i = 0; i < self->rows_; ++i) {
    JrePlusAssignDoubleD(&XYs, (IOSDoubleArray_Get(nil_chk(self->logR_), i) - meanX) * (IOSDoubleArray_Get(nil_chk(self->logZ_), i) - meanY));
    JrePlusAssignDoubleD(&Xsquares, EduStanfordNlpStatsSimpleGoodTuring_sqWithDouble_(IOSDoubleArray_Get(self->logR_, i) - meanX));
  }
  self->slope_ = XYs / Xsquares;
  self->intercept_ = meanY - self->slope_ * meanX;
}

jdouble EduStanfordNlpStatsSimpleGoodTuring_smoothedWithInt_(EduStanfordNlpStatsSimpleGoodTuring *self, jint i) {
  return (JavaLangMath_expWithDouble_(self->intercept_ + self->slope_ * JavaLangMath_logWithDouble_(i)));
}

jdouble EduStanfordNlpStatsSimpleGoodTuring_sqWithDouble_(jdouble x) {
  EduStanfordNlpStatsSimpleGoodTuring_initialize();
  return (x * x);
}

void EduStanfordNlpStatsSimpleGoodTuring_print(EduStanfordNlpStatsSimpleGoodTuring *self) {
  jint i;
  (void) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printfWithNSString:@"%6s %6s %8s %8s%n" withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"r", @"n", @"p", @"p*" } count:4 type:NSObject_class_()]];
  (void) [JreLoadStatic(JavaLangSystem, out) printfWithNSString:@"%6s %6s %8s %8s%n" withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"----", @"----", @"----", @"----" } count:4 type:NSObject_class_()]];
  (void) [JreLoadStatic(JavaLangSystem, out) printfWithNSString:@"%6d %6d %8.4g %8.4g%n" withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(0), JavaLangInteger_valueOfWithInt_(0), JavaLangDouble_valueOfWithDouble_(0.0), JavaLangDouble_valueOfWithDouble_(self->pZero_) } count:4 type:NSObject_class_()]];
  for (i = 0; i < self->rows_; ++i) (void) [JreLoadStatic(JavaLangSystem, out) printfWithNSString:@"%6d %6d %8.4g %8.4g%n" withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(IOSIntArray_Get(nil_chk(self->r_), i)), JavaLangInteger_valueOfWithInt_(IOSIntArray_Get(nil_chk(self->n_), i)), JavaLangDouble_valueOfWithDouble_(1.0 * IOSIntArray_Get(self->r_, i) / self->bigN_), JavaLangDouble_valueOfWithDouble_(IOSDoubleArray_Get(nil_chk(self->p_), i)) } count:4 type:NSObject_class_()]];
}

void EduStanfordNlpStatsSimpleGoodTuring_validateWithDouble_(EduStanfordNlpStatsSimpleGoodTuring *self, jdouble tolerance) {
  jdouble sum = self->pZero_;
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(self->n_))->size_; i++) {
    JrePlusAssignDoubleD(&sum, (IOSIntArray_Get(self->n_, i) * IOSDoubleArray_Get(nil_chk(self->p_), i)));
  }
  jdouble err = 1.0 - sum;
  if (JavaLangMath_absWithDouble_(err) > tolerance) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$D", @"ERROR: the probability distribution sums to ", sum));
  }
}

IOSObjectArray *EduStanfordNlpStatsSimpleGoodTuring_readInput() {
  EduStanfordNlpStatsSimpleGoodTuring_initialize();
  id<JavaUtilList> rVals = new_JavaUtilArrayList_init();
  id<JavaUtilList> nVals = new_JavaUtilArrayList_init();
  JavaIoBufferedReader *in = new_JavaIoBufferedReader_initWithJavaIoReader_(new_JavaIoInputStreamReader_initWithJavaIoInputStream_(JreLoadStatic(JavaLangSystem, in)));
  NSString *line;
  while ((line = [in readLine]) != nil) {
    IOSObjectArray *tokens = [((NSString *) nil_chk([((NSString *) nil_chk(line)) trim])) split:@"\\s+"];
    if (((IOSObjectArray *) nil_chk(tokens))->size_ != 2) @throw new_JavaLangException_initWithNSString_(JreStrcat("$$", @"Line doesn't contain two tokens: ", line));
    JavaLangInteger *r = JavaLangInteger_valueOfWithNSString_(IOSObjectArray_Get(tokens, 0));
    JavaLangInteger *n = JavaLangInteger_valueOfWithNSString_(IOSObjectArray_Get(tokens, 1));
    [rVals addWithId:r];
    [nVals addWithId:n];
  }
  [in close];
  IOSObjectArray *result = [IOSObjectArray newArrayWithLength:2 type:IOSClass_intArray(1)];
  (void) IOSObjectArray_Set(result, 0, EduStanfordNlpStatsSimpleGoodTuring_integerList2IntArrayWithJavaUtilList_(rVals));
  (void) IOSObjectArray_Set(result, 1, EduStanfordNlpStatsSimpleGoodTuring_integerList2IntArrayWithJavaUtilList_(nVals));
  return result;
}

IOSIntArray *EduStanfordNlpStatsSimpleGoodTuring_integerList2IntArrayWithJavaUtilList_(id<JavaUtilList> integers) {
  EduStanfordNlpStatsSimpleGoodTuring_initialize();
  IOSIntArray *ints = [IOSIntArray newArrayWithLength:[((id<JavaUtilList>) nil_chk(integers)) size]];
  jint i = 0;
  for (JavaLangInteger * __strong integer in integers) {
    *IOSIntArray_GetRef(ints, i++) = [((JavaLangInteger *) nil_chk(integer)) intValue];
  }
  return ints;
}

void EduStanfordNlpStatsSimpleGoodTuring_mainWithNSStringArray_(IOSObjectArray *args) {
  EduStanfordNlpStatsSimpleGoodTuring_initialize();
  IOSObjectArray *input = EduStanfordNlpStatsSimpleGoodTuring_readInput();
  EduStanfordNlpStatsSimpleGoodTuring *sgt = new_EduStanfordNlpStatsSimpleGoodTuring_initWithIntArray_withIntArray_(IOSObjectArray_Get(nil_chk(input), 0), IOSObjectArray_Get(input, 1));
  EduStanfordNlpStatsSimpleGoodTuring_print(sgt);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpStatsSimpleGoodTuring)
