//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/stats/GeneralizedCounter.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/stats/ClassicCounter.h"
#include "edu/stanford/nlp/stats/GeneralizedCounter.h"
#include "edu/stanford/nlp/util/ErasureUtils.h"
#include "edu/stanford/nlp/util/Generics.h"
#include "edu/stanford/nlp/util/MutableDouble.h"
#include "java/io/PrintStream.h"
#include "java/io/PrintWriter.h"
#include "java/lang/Double.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/Arrays.h"
#include "java/util/Collections.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

@interface EduStanfordNlpStatsGeneralizedCounter () {
 @public
  id<JavaUtilMap> map_;
  jint depth_;
  jdouble total_;
  EduStanfordNlpUtilMutableDouble *tempMDouble_;
}

- (instancetype)init;

- (id<JavaUtilSet>)entrySetWithJavaUtilSet:(id<JavaUtilSet>)s
                         withNSObjectArray:(IOSObjectArray *)key
                               withBoolean:(jboolean)useLists;

- (id<JavaUtilSet>)lowestLevelCounterEntrySetWithJavaUtilSet:(id<JavaUtilSet>)s
                                           withNSObjectArray:(IOSObjectArray *)key
                                                 withBoolean:(jboolean)useLists;

- (id<JavaUtilSet>)keySetWithJavaUtilSet:(id<JavaUtilSet>)s
                       withNSObjectArray:(IOSObjectArray *)key
                             withBoolean:(jboolean)useList;

- (EduStanfordNlpStatsGeneralizedCounter *)conditionalizeHelperWithId:(id)o;

- (void)addToTotalWithDouble:(jdouble)d;

- (void)wrongDepth;

- (void)printKeySet;

+ (void)arrayPrintDoubleWithDoubleArray:(IOSDoubleArray *)o;

- (id<JavaUtilSet>)dumpKeys;

- (void)prettyPrintWithJavaIoPrintWriter:(JavaIoPrintWriter *)pw
                            withNSString:(NSString *)buffer
                            withNSString:(NSString *)bufferIncrement;

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpStatsGeneralizedCounter, map_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(EduStanfordNlpStatsGeneralizedCounter, tempMDouble_, EduStanfordNlpUtilMutableDouble *)

inline jlong EduStanfordNlpStatsGeneralizedCounter_get_serialVersionUID();
#define EduStanfordNlpStatsGeneralizedCounter_serialVersionUID 1LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpStatsGeneralizedCounter, serialVersionUID, jlong)

inline IOSObjectArray *EduStanfordNlpStatsGeneralizedCounter_get_zeroKey();
static IOSObjectArray *EduStanfordNlpStatsGeneralizedCounter_zeroKey;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpStatsGeneralizedCounter, zeroKey, IOSObjectArray *)

__attribute__((unused)) static void EduStanfordNlpStatsGeneralizedCounter_init(EduStanfordNlpStatsGeneralizedCounter *self);

__attribute__((unused)) static EduStanfordNlpStatsGeneralizedCounter *new_EduStanfordNlpStatsGeneralizedCounter_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpStatsGeneralizedCounter *create_EduStanfordNlpStatsGeneralizedCounter_init();

__attribute__((unused)) static id<JavaUtilSet> EduStanfordNlpStatsGeneralizedCounter_entrySetWithJavaUtilSet_withNSObjectArray_withBoolean_(EduStanfordNlpStatsGeneralizedCounter *self, id<JavaUtilSet> s, IOSObjectArray *key, jboolean useLists);

__attribute__((unused)) static id<JavaUtilSet> EduStanfordNlpStatsGeneralizedCounter_lowestLevelCounterEntrySetWithJavaUtilSet_withNSObjectArray_withBoolean_(EduStanfordNlpStatsGeneralizedCounter *self, id<JavaUtilSet> s, IOSObjectArray *key, jboolean useLists);

__attribute__((unused)) static id<JavaUtilSet> EduStanfordNlpStatsGeneralizedCounter_keySetWithJavaUtilSet_withNSObjectArray_withBoolean_(EduStanfordNlpStatsGeneralizedCounter *self, id<JavaUtilSet> s, IOSObjectArray *key, jboolean useList);

__attribute__((unused)) static EduStanfordNlpStatsGeneralizedCounter *EduStanfordNlpStatsGeneralizedCounter_conditionalizeHelperWithId_(EduStanfordNlpStatsGeneralizedCounter *self, id o);

__attribute__((unused)) static void EduStanfordNlpStatsGeneralizedCounter_addToTotalWithDouble_(EduStanfordNlpStatsGeneralizedCounter *self, jdouble d);

__attribute__((unused)) static void EduStanfordNlpStatsGeneralizedCounter_wrongDepth(EduStanfordNlpStatsGeneralizedCounter *self);

__attribute__((unused)) static void EduStanfordNlpStatsGeneralizedCounter_printKeySet(EduStanfordNlpStatsGeneralizedCounter *self);

__attribute__((unused)) static void EduStanfordNlpStatsGeneralizedCounter_arrayPrintDoubleWithDoubleArray_(IOSDoubleArray *o);

__attribute__((unused)) static id<JavaUtilSet> EduStanfordNlpStatsGeneralizedCounter_dumpKeys(EduStanfordNlpStatsGeneralizedCounter *self);

__attribute__((unused)) static void EduStanfordNlpStatsGeneralizedCounter_prettyPrintWithJavaIoPrintWriter_withNSString_withNSString_(EduStanfordNlpStatsGeneralizedCounter *self, JavaIoPrintWriter *pw, NSString *buffer, NSString *bufferIncrement);

@interface EduStanfordNlpStatsGeneralizedCounter_Entry : NSObject < JavaUtilMap_Entry > {
 @public
  id key_;
  id value_;
}

- (instancetype)initWithId:(id)key
                    withId:(id)value;

- (id)getKey;

- (id)getValue;

- (id)setValueWithId:(id)value;

- (jboolean)isEqual:(id)o;

- (NSUInteger)hash;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpStatsGeneralizedCounter_Entry)

J2OBJC_FIELD_SETTER(EduStanfordNlpStatsGeneralizedCounter_Entry, key_, id)
J2OBJC_FIELD_SETTER(EduStanfordNlpStatsGeneralizedCounter_Entry, value_, id)

__attribute__((unused)) static void EduStanfordNlpStatsGeneralizedCounter_Entry_initWithId_withId_(EduStanfordNlpStatsGeneralizedCounter_Entry *self, id key, id value);

__attribute__((unused)) static EduStanfordNlpStatsGeneralizedCounter_Entry *new_EduStanfordNlpStatsGeneralizedCounter_Entry_initWithId_withId_(id key, id value) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpStatsGeneralizedCounter_Entry *create_EduStanfordNlpStatsGeneralizedCounter_Entry_initWithId_withId_(id key, id value);

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpStatsGeneralizedCounter_Entry)

@interface EduStanfordNlpStatsGeneralizedCounter_CounterView : EduStanfordNlpStatsClassicCounter {
 @public
  EduStanfordNlpStatsGeneralizedCounter *this$0_;
}

- (jdouble)incrementCountWithId:(id<JavaUtilList>)o
                     withDouble:(jdouble)count;

- (void)setCountWithId:(id<JavaUtilList>)o
            withDouble:(jdouble)count;

- (jdouble)totalCount;

- (jdouble)getCountWithId:(id)o;

- (jint)size;

- (id<JavaUtilSet>)keySet;

- (jdouble)removeWithId:(id<JavaUtilList>)o;

- (jboolean)containsKeyWithId:(id<JavaUtilList>)key;

- (void)clear;

- (jboolean)isEmpty;

- (id<JavaUtilSet>)entrySet;

- (jboolean)isEqual:(id)o;

- (NSUInteger)hash;

- (NSString *)description;

- (instancetype)initWithEduStanfordNlpStatsGeneralizedCounter:(EduStanfordNlpStatsGeneralizedCounter *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpStatsGeneralizedCounter_CounterView)

J2OBJC_FIELD_SETTER(EduStanfordNlpStatsGeneralizedCounter_CounterView, this$0_, EduStanfordNlpStatsGeneralizedCounter *)

inline jlong EduStanfordNlpStatsGeneralizedCounter_CounterView_get_serialVersionUID();
#define EduStanfordNlpStatsGeneralizedCounter_CounterView_serialVersionUID -1241712543674668918LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpStatsGeneralizedCounter_CounterView, serialVersionUID, jlong)

__attribute__((unused)) static void EduStanfordNlpStatsGeneralizedCounter_CounterView_initWithEduStanfordNlpStatsGeneralizedCounter_(EduStanfordNlpStatsGeneralizedCounter_CounterView *self, EduStanfordNlpStatsGeneralizedCounter *outer$);

__attribute__((unused)) static EduStanfordNlpStatsGeneralizedCounter_CounterView *new_EduStanfordNlpStatsGeneralizedCounter_CounterView_initWithEduStanfordNlpStatsGeneralizedCounter_(EduStanfordNlpStatsGeneralizedCounter *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpStatsGeneralizedCounter_CounterView *create_EduStanfordNlpStatsGeneralizedCounter_CounterView_initWithEduStanfordNlpStatsGeneralizedCounter_(EduStanfordNlpStatsGeneralizedCounter *outer$);

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpStatsGeneralizedCounter_CounterView)

@interface EduStanfordNlpStatsGeneralizedCounter_OneDimensionalCounterView : EduStanfordNlpStatsClassicCounter {
 @public
  EduStanfordNlpStatsGeneralizedCounter *this$0_;
}

- (jdouble)incrementCountWithId:(id)o
                     withDouble:(jdouble)count;

- (void)setCountWithId:(id)o
            withDouble:(jdouble)count;

- (jdouble)totalCount;

- (jdouble)getCountWithId:(id)o;

- (jint)size;

- (id<JavaUtilSet>)keySet;

- (jdouble)removeWithId:(id)o;

- (jboolean)containsKeyWithId:(id)key;

- (void)clear;

- (jboolean)isEmpty;

- (id<JavaUtilSet>)entrySet;

- (jboolean)isEqual:(id)o;

- (NSUInteger)hash;

- (NSString *)description;

- (instancetype)initWithEduStanfordNlpStatsGeneralizedCounter:(EduStanfordNlpStatsGeneralizedCounter *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpStatsGeneralizedCounter_OneDimensionalCounterView)

J2OBJC_FIELD_SETTER(EduStanfordNlpStatsGeneralizedCounter_OneDimensionalCounterView, this$0_, EduStanfordNlpStatsGeneralizedCounter *)

inline jlong EduStanfordNlpStatsGeneralizedCounter_OneDimensionalCounterView_get_serialVersionUID();
#define EduStanfordNlpStatsGeneralizedCounter_OneDimensionalCounterView_serialVersionUID 5628505169749516972LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpStatsGeneralizedCounter_OneDimensionalCounterView, serialVersionUID, jlong)

__attribute__((unused)) static void EduStanfordNlpStatsGeneralizedCounter_OneDimensionalCounterView_initWithEduStanfordNlpStatsGeneralizedCounter_(EduStanfordNlpStatsGeneralizedCounter_OneDimensionalCounterView *self, EduStanfordNlpStatsGeneralizedCounter *outer$);

__attribute__((unused)) static EduStanfordNlpStatsGeneralizedCounter_OneDimensionalCounterView *new_EduStanfordNlpStatsGeneralizedCounter_OneDimensionalCounterView_initWithEduStanfordNlpStatsGeneralizedCounter_(EduStanfordNlpStatsGeneralizedCounter *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpStatsGeneralizedCounter_OneDimensionalCounterView *create_EduStanfordNlpStatsGeneralizedCounter_OneDimensionalCounterView_initWithEduStanfordNlpStatsGeneralizedCounter_(EduStanfordNlpStatsGeneralizedCounter *outer$);

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpStatsGeneralizedCounter_OneDimensionalCounterView)

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpStatsGeneralizedCounter)

@implementation EduStanfordNlpStatsGeneralizedCounter

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpStatsGeneralizedCounter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithInt:(jint)depth {
  EduStanfordNlpStatsGeneralizedCounter_initWithInt_(self, depth);
  return self;
}

- (id<JavaUtilSet>)entrySet {
  return EduStanfordNlpUtilErasureUtils_uncheckedCastWithId_(EduStanfordNlpStatsGeneralizedCounter_entrySetWithJavaUtilSet_withNSObjectArray_withBoolean_(self, new_JavaUtilHashSet_init(), EduStanfordNlpStatsGeneralizedCounter_zeroKey, true));
}

- (id<JavaUtilSet>)entrySetWithJavaUtilSet:(id<JavaUtilSet>)s
                         withNSObjectArray:(IOSObjectArray *)key
                               withBoolean:(jboolean)useLists {
  return EduStanfordNlpStatsGeneralizedCounter_entrySetWithJavaUtilSet_withNSObjectArray_withBoolean_(self, s, key, useLists);
}

- (id<JavaUtilSet>)lowestLevelCounterEntrySet {
  return EduStanfordNlpUtilErasureUtils_uncheckedCastWithId_(EduStanfordNlpStatsGeneralizedCounter_lowestLevelCounterEntrySetWithJavaUtilSet_withNSObjectArray_withBoolean_(self, new_JavaUtilHashSet_init(), EduStanfordNlpStatsGeneralizedCounter_zeroKey, true));
}

- (id<JavaUtilSet>)lowestLevelCounterEntrySetWithJavaUtilSet:(id<JavaUtilSet>)s
                                           withNSObjectArray:(IOSObjectArray *)key
                                                 withBoolean:(jboolean)useLists {
  return EduStanfordNlpStatsGeneralizedCounter_lowestLevelCounterEntrySetWithJavaUtilSet_withNSObjectArray_withBoolean_(self, s, key, useLists);
}

- (jdouble)totalCount {
  if ([self depth] == 1) {
    return total_;
  }
  else {
    jdouble result = 0.0;
    for (id __strong o in nil_chk([self topLevelKeySet])) {
      JrePlusAssignDoubleD(&result, [((EduStanfordNlpStatsGeneralizedCounter *) nil_chk([self conditionalizeOnceWithId:o])) totalCount]);
    }
    return result;
  }
}

- (id<JavaUtilSet>)topLevelKeySet {
  return [((id<JavaUtilMap>) nil_chk(map_)) keySet];
}

- (id<JavaUtilSet>)keySet {
  return EduStanfordNlpUtilErasureUtils_uncheckedCastWithId_(EduStanfordNlpStatsGeneralizedCounter_keySetWithJavaUtilSet_withNSObjectArray_withBoolean_(self, EduStanfordNlpUtilGenerics_newHashSet(), EduStanfordNlpStatsGeneralizedCounter_zeroKey, true));
}

- (id<JavaUtilSet>)keySetWithJavaUtilSet:(id<JavaUtilSet>)s
                       withNSObjectArray:(IOSObjectArray *)key
                             withBoolean:(jboolean)useList {
  return EduStanfordNlpStatsGeneralizedCounter_keySetWithJavaUtilSet_withNSObjectArray_withBoolean_(self, s, key, useList);
}

- (jint)depth {
  return depth_;
}

- (jboolean)isEmpty {
  return [((id<JavaUtilMap>) nil_chk(map_)) isEmpty];
}

- (jdouble)getCountWithId:(id)o {
  if (depth_ > 1) {
    EduStanfordNlpStatsGeneralizedCounter_wrongDepth(self);
  }
  NSNumber *count = (NSNumber *) cast_chk([((id<JavaUtilMap>) nil_chk(map_)) getWithId:o], [NSNumber class]);
  if (count != nil) {
    return [count doubleValue];
  }
  else {
    return 0.0;
  }
}

- (jdouble)getCountWithId:(id)o1
                   withId:(id)o2 {
  if (depth_ != 2) {
    EduStanfordNlpStatsGeneralizedCounter_wrongDepth(self);
  }
  EduStanfordNlpStatsGeneralizedCounter *gc1 = EduStanfordNlpUtilErasureUtils_uncheckedCastWithId_([((id<JavaUtilMap>) nil_chk(map_)) getWithId:o1]);
  if (gc1 == nil) {
    return 0.0;
  }
  else {
    return [gc1 getCountWithId:o2];
  }
}

- (jdouble)getCountWithId:(id)o1
                   withId:(id)o2
                   withId:(id)o3 {
  if (depth_ != 3) {
    EduStanfordNlpStatsGeneralizedCounter_wrongDepth(self);
  }
  EduStanfordNlpStatsGeneralizedCounter *gc1 = EduStanfordNlpUtilErasureUtils_uncheckedCastWithId_([((id<JavaUtilMap>) nil_chk(map_)) getWithId:o1]);
  if (gc1 == nil) {
    return 0.0;
  }
  else {
    return [gc1 getCountWithId:o2 withId:o3];
  }
}

- (IOSDoubleArray *)getCountsWithJavaUtilList:(id<JavaUtilList>)l {
  if ([((id<JavaUtilList>) nil_chk(l)) size] != depth_) {
    EduStanfordNlpStatsGeneralizedCounter_wrongDepth(self);
  }
  IOSDoubleArray *counts = [IOSDoubleArray newArrayWithLength:depth_ + 1];
  EduStanfordNlpStatsGeneralizedCounter *next = self;
  *IOSDoubleArray_GetRef(counts, 0) = [next totalCount];
  id<JavaUtilIterator> i = [l iterator];
  jint j = 1;
  id o = [((id<JavaUtilIterator>) nil_chk(i)) next];
  while ([i hasNext]) {
    next = EduStanfordNlpStatsGeneralizedCounter_conditionalizeHelperWithId_(next, o);
    *IOSDoubleArray_GetRef(counts, j) = [((EduStanfordNlpStatsGeneralizedCounter *) nil_chk(next)) totalCount];
    o = [i next];
    j++;
  }
  *IOSDoubleArray_GetRef(counts, depth_) = [next getCountWithId:o];
  return counts;
}

- (EduStanfordNlpStatsGeneralizedCounter *)conditionalizeHelperWithId:(id)o {
  return EduStanfordNlpStatsGeneralizedCounter_conditionalizeHelperWithId_(self, o);
}

- (EduStanfordNlpStatsGeneralizedCounter *)conditionalizeWithJavaUtilList:(id<JavaUtilList>)l {
  jint n = [((id<JavaUtilList>) nil_chk(l)) size];
  if (n >= [self depth]) {
    @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$I$I", @"Error -- attempted to conditionalize a GeneralizedCounter of depth ", [self depth], @" on a vector of length ", n));
  }
  else {
    EduStanfordNlpStatsGeneralizedCounter *next = self;
    for (id __strong o in l) {
      next = EduStanfordNlpStatsGeneralizedCounter_conditionalizeHelperWithId_(nil_chk(next), o);
    }
    return next;
  }
}

- (EduStanfordNlpStatsGeneralizedCounter *)conditionalizeOnceWithId:(id)o {
  if ([self depth] < 1) {
    @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$I", @"Error -- attempted to conditionalize a GeneralizedCounter of depth ", [self depth]));
  }
  else {
    return EduStanfordNlpStatsGeneralizedCounter_conditionalizeHelperWithId_(self, o);
  }
}

- (void)incrementCountWithJavaUtilList:(id<JavaUtilList>)l
                                withId:(id)o {
  [self incrementCountWithJavaUtilList:l withId:o withDouble:1.0];
}

- (void)incrementCountWithJavaUtilList:(id<JavaUtilList>)l
                                withId:(id)o
                            withDouble:(jdouble)count {
  if ([((id<JavaUtilList>) nil_chk(l)) size] != depth_ - 1) {
    EduStanfordNlpStatsGeneralizedCounter_wrongDepth(self);
  }
  EduStanfordNlpStatsGeneralizedCounter *next = self;
  for (id __strong o2 in l) {
    EduStanfordNlpStatsGeneralizedCounter_addToTotalWithDouble_(nil_chk(next), count);
    next = EduStanfordNlpStatsGeneralizedCounter_conditionalizeHelperWithId_(next, o2);
  }
  EduStanfordNlpStatsGeneralizedCounter_addToTotalWithDouble_(next, count);
  [next incrementCount1DWithId:o withDouble:count];
}

- (void)incrementCountWithJavaUtilList:(id<JavaUtilList>)l {
  [self incrementCountWithJavaUtilList:l withDouble:1.0];
}

- (void)incrementCountWithJavaUtilList:(id<JavaUtilList>)l
                            withDouble:(jdouble)count {
  if ([((id<JavaUtilList>) nil_chk(l)) size] != depth_) {
    EduStanfordNlpStatsGeneralizedCounter_wrongDepth(self);
  }
  EduStanfordNlpStatsGeneralizedCounter *next = self;
  id<JavaUtilIterator> i = [l iterator];
  id o = [((id<JavaUtilIterator>) nil_chk(i)) next];
  while ([i hasNext]) {
    EduStanfordNlpStatsGeneralizedCounter_addToTotalWithDouble_(nil_chk(next), count);
    next = EduStanfordNlpStatsGeneralizedCounter_conditionalizeHelperWithId_(next, o);
    o = [i next];
  }
  [((EduStanfordNlpStatsGeneralizedCounter *) nil_chk(next)) incrementCount1DWithId:o withDouble:count];
}

- (void)incrementCount2DWithId:(id)first
                        withId:(id)second {
  [self incrementCount2DWithId:first withId:second withDouble:1.0];
}

- (void)incrementCount2DWithId:(id)first
                        withId:(id)second
                    withDouble:(jdouble)count {
  if (depth_ != 2) {
    EduStanfordNlpStatsGeneralizedCounter_wrongDepth(self);
  }
  EduStanfordNlpStatsGeneralizedCounter_addToTotalWithDouble_(self, count);
  EduStanfordNlpStatsGeneralizedCounter *next = EduStanfordNlpStatsGeneralizedCounter_conditionalizeHelperWithId_(self, first);
  [((EduStanfordNlpStatsGeneralizedCounter *) nil_chk(next)) incrementCount1DWithId:second withDouble:count];
}

- (void)incrementCount3DWithId:(id)first
                        withId:(id)second
                        withId:(id)third {
  [self incrementCount3DWithId:first withId:second withId:third withDouble:1.0];
}

- (void)incrementCount3DWithId:(id)first
                        withId:(id)second
                        withId:(id)third
                    withDouble:(jdouble)count {
  if (depth_ != 3) {
    EduStanfordNlpStatsGeneralizedCounter_wrongDepth(self);
  }
  EduStanfordNlpStatsGeneralizedCounter_addToTotalWithDouble_(self, count);
  EduStanfordNlpStatsGeneralizedCounter *next = EduStanfordNlpStatsGeneralizedCounter_conditionalizeHelperWithId_(self, first);
  [((EduStanfordNlpStatsGeneralizedCounter *) nil_chk(next)) incrementCount2DWithId:second withId:third withDouble:count];
}

- (void)addToTotalWithDouble:(jdouble)d {
  EduStanfordNlpStatsGeneralizedCounter_addToTotalWithDouble_(self, d);
}

- (void)incrementCount1DWithId:(id)o {
  [self incrementCount1DWithId:o withDouble:1.0];
}

- (void)incrementCount1DWithId:(id)o
                    withDouble:(jdouble)count {
  if (depth_ > 1) {
    EduStanfordNlpStatsGeneralizedCounter_wrongDepth(self);
  }
  EduStanfordNlpStatsGeneralizedCounter_addToTotalWithDouble_(self, count);
  if (tempMDouble_ == nil) {
    tempMDouble_ = new_EduStanfordNlpUtilMutableDouble_init();
  }
  [tempMDouble_ setWithDouble:count];
  EduStanfordNlpUtilMutableDouble *oldMDouble = (EduStanfordNlpUtilMutableDouble *) cast_chk([((id<JavaUtilMap>) nil_chk(map_)) putWithId:o withId:tempMDouble_], [EduStanfordNlpUtilMutableDouble class]);
  if (oldMDouble != nil) {
    [((EduStanfordNlpUtilMutableDouble *) nil_chk(tempMDouble_)) setWithDouble:count + [oldMDouble doubleValue]];
  }
  tempMDouble_ = oldMDouble;
}

- (jboolean)containsKeyWithJavaUtilList:(id<JavaUtilList>)key {
  EduStanfordNlpStatsGeneralizedCounter *next = self;
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(key)) size] - 1; i++) {
    next = EduStanfordNlpStatsGeneralizedCounter_conditionalizeHelperWithId_(next, [key getWithInt:i]);
    if (next == nil) return false;
  }
  return [((id<JavaUtilMap>) nil_chk(next->map_)) containsKeyWithId:[key getWithInt:[key size] - 1]];
}

- (EduStanfordNlpStatsGeneralizedCounter *)reverseKeys {
  EduStanfordNlpStatsGeneralizedCounter *result = new_EduStanfordNlpStatsGeneralizedCounter_init();
  id<JavaUtilSet> entries = [self entrySet];
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk(entries)) {
    id<JavaUtilList> list = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey];
    jdouble count = [((JavaLangDouble *) nil_chk([entry_ getValue])) doubleValue];
    JavaUtilCollections_reverseWithJavaUtilList_(list);
    [result incrementCountWithJavaUtilList:list withDouble:count];
  }
  return result;
}

- (void)wrongDepth {
  EduStanfordNlpStatsGeneralizedCounter_wrongDepth(self);
}

- (EduStanfordNlpStatsClassicCounter *)counterView {
  return new_EduStanfordNlpStatsGeneralizedCounter_CounterView_initWithEduStanfordNlpStatsGeneralizedCounter_(self);
}

- (EduStanfordNlpStatsClassicCounter *)oneDimensionalCounterView {
  if (depth_ != 1) {
    @throw new_JavaLangUnsupportedOperationException_init();
  }
  return new_EduStanfordNlpStatsGeneralizedCounter_OneDimensionalCounterView_initWithEduStanfordNlpStatsGeneralizedCounter_(self);
}

- (NSString *)description {
  return [((id<JavaUtilMap>) nil_chk(map_)) description];
}

- (NSString *)toStringWithNSString:(NSString *)param {
  switch (JreIndexOfStr(param, (id[]){ @"contingency", @"sorted" }, 2)) {
    case 0:
    {
      JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
      for (id __strong obj in nil_chk(EduStanfordNlpUtilErasureUtils_sortedIfPossibleWithJavaUtilCollection_([self topLevelKeySet]))) {
        (void) [sb appendWithId:obj];
        (void) [sb appendWithNSString:@" = "];
        EduStanfordNlpStatsGeneralizedCounter *gc = [self conditionalizeOnceWithId:obj];
        (void) [sb appendWithId:gc];
        (void) [sb appendWithNSString:@"\n"];
      }
      return [sb description];
    }
    case 1:
    {
      JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
      (void) [sb appendWithNSString:@"{\n"];
      for (id __strong obj in nil_chk(EduStanfordNlpUtilErasureUtils_sortedIfPossibleWithJavaUtilCollection_([self topLevelKeySet]))) {
        (void) [sb appendWithId:obj];
        (void) [sb appendWithNSString:@" = "];
        EduStanfordNlpStatsGeneralizedCounter *gc = [self conditionalizeOnceWithId:obj];
        (void) [sb appendWithId:gc];
        (void) [sb appendWithNSString:@"\n"];
      }
      (void) [sb appendWithNSString:@"}\n"];
      return [sb description];
    }
    default:
    return [self description];
  }
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  EduStanfordNlpStatsGeneralizedCounter_mainWithNSStringArray_(args);
}

- (void)printKeySet {
  EduStanfordNlpStatsGeneralizedCounter_printKeySet(self);
}

+ (void)arrayPrintDoubleWithDoubleArray:(IOSDoubleArray *)o {
  EduStanfordNlpStatsGeneralizedCounter_arrayPrintDoubleWithDoubleArray_(o);
}

- (id<JavaUtilSet>)dumpKeys {
  return EduStanfordNlpStatsGeneralizedCounter_dumpKeys(self);
}

- (void)prettyPrint {
  [self prettyPrintWithJavaIoPrintWriter:new_JavaIoPrintWriter_initWithJavaIoOutputStream_withBoolean_(JreLoadStatic(JavaLangSystem, out), true)];
}

- (void)prettyPrintWithJavaIoPrintWriter:(JavaIoPrintWriter *)pw {
  [self prettyPrintWithJavaIoPrintWriter:pw withNSString:@"  "];
}

- (void)prettyPrintWithJavaIoPrintWriter:(JavaIoPrintWriter *)pw
                            withNSString:(NSString *)bufferIncrement {
  EduStanfordNlpStatsGeneralizedCounter_prettyPrintWithJavaIoPrintWriter_withNSString_withNSString_(self, pw, @"", bufferIncrement);
}

- (void)prettyPrintWithJavaIoPrintWriter:(JavaIoPrintWriter *)pw
                            withNSString:(NSString *)buffer
                            withNSString:(NSString *)bufferIncrement {
  EduStanfordNlpStatsGeneralizedCounter_prettyPrintWithJavaIoPrintWriter_withNSString_withNSString_(self, pw, buffer, bufferIncrement);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x2, 2, 3, -1, 4, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 5, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x2, 6, 3, -1, 7, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 8, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 9, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x2, 10, 3, -1, 11, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "D", 0x1, 12, 14, -1, 15, -1, -1 },
    { NULL, "D", 0x1, 12, 16, -1, 17, -1, -1 },
    { NULL, "[D", 0x1, 18, 19, -1, 20, -1, -1 },
    { NULL, "LEduStanfordNlpStatsGeneralizedCounter;", 0x2, 21, 13, -1, 22, -1, -1 },
    { NULL, "LEduStanfordNlpStatsGeneralizedCounter;", 0x1, 23, 19, -1, 24, -1, -1 },
    { NULL, "LEduStanfordNlpStatsGeneralizedCounter;", 0x1, 25, 13, -1, 22, -1, -1 },
    { NULL, "V", 0x1, 26, 27, -1, 28, -1, -1 },
    { NULL, "V", 0x1, 26, 29, -1, 30, -1, -1 },
    { NULL, "V", 0x1, 26, 19, -1, 31, -1, -1 },
    { NULL, "V", 0x1, 26, 32, -1, 33, -1, -1 },
    { NULL, "V", 0x1, 34, 14, -1, 35, -1, -1 },
    { NULL, "V", 0x1, 34, 36, -1, 37, -1, -1 },
    { NULL, "V", 0x1, 38, 16, -1, 39, -1, -1 },
    { NULL, "V", 0x1, 38, 40, -1, 41, -1, -1 },
    { NULL, "V", 0x2, 42, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 44, 13, -1, 45, -1, -1 },
    { NULL, "V", 0x1, 44, 46, -1, 47, -1, -1 },
    { NULL, "Z", 0x1, 48, 19, -1, 49, -1, -1 },
    { NULL, "LEduStanfordNlpStatsGeneralizedCounter;", 0x1, -1, -1, -1, 50, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpStatsClassicCounter;", 0x1, -1, -1, -1, 51, -1, -1 },
    { NULL, "LEduStanfordNlpStatsClassicCounter;", 0x1, -1, -1, -1, 52, -1, -1 },
    { NULL, "LNSString;", 0x1, 53, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 53, 54, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 55, 56, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 57, 58, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x2, -1, -1, -1, 59, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 60, 61, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 60, 62, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 60, 63, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithInt:);
  methods[2].selector = @selector(entrySet);
  methods[3].selector = @selector(entrySetWithJavaUtilSet:withNSObjectArray:withBoolean:);
  methods[4].selector = @selector(lowestLevelCounterEntrySet);
  methods[5].selector = @selector(lowestLevelCounterEntrySetWithJavaUtilSet:withNSObjectArray:withBoolean:);
  methods[6].selector = @selector(totalCount);
  methods[7].selector = @selector(topLevelKeySet);
  methods[8].selector = @selector(keySet);
  methods[9].selector = @selector(keySetWithJavaUtilSet:withNSObjectArray:withBoolean:);
  methods[10].selector = @selector(depth);
  methods[11].selector = @selector(isEmpty);
  methods[12].selector = @selector(getCountWithId:);
  methods[13].selector = @selector(getCountWithId:withId:);
  methods[14].selector = @selector(getCountWithId:withId:withId:);
  methods[15].selector = @selector(getCountsWithJavaUtilList:);
  methods[16].selector = @selector(conditionalizeHelperWithId:);
  methods[17].selector = @selector(conditionalizeWithJavaUtilList:);
  methods[18].selector = @selector(conditionalizeOnceWithId:);
  methods[19].selector = @selector(incrementCountWithJavaUtilList:withId:);
  methods[20].selector = @selector(incrementCountWithJavaUtilList:withId:withDouble:);
  methods[21].selector = @selector(incrementCountWithJavaUtilList:);
  methods[22].selector = @selector(incrementCountWithJavaUtilList:withDouble:);
  methods[23].selector = @selector(incrementCount2DWithId:withId:);
  methods[24].selector = @selector(incrementCount2DWithId:withId:withDouble:);
  methods[25].selector = @selector(incrementCount3DWithId:withId:withId:);
  methods[26].selector = @selector(incrementCount3DWithId:withId:withId:withDouble:);
  methods[27].selector = @selector(addToTotalWithDouble:);
  methods[28].selector = @selector(incrementCount1DWithId:);
  methods[29].selector = @selector(incrementCount1DWithId:withDouble:);
  methods[30].selector = @selector(containsKeyWithJavaUtilList:);
  methods[31].selector = @selector(reverseKeys);
  methods[32].selector = @selector(wrongDepth);
  methods[33].selector = @selector(counterView);
  methods[34].selector = @selector(oneDimensionalCounterView);
  methods[35].selector = @selector(description);
  methods[36].selector = @selector(toStringWithNSString:);
  methods[37].selector = @selector(mainWithNSStringArray:);
  methods[38].selector = @selector(printKeySet);
  methods[39].selector = @selector(arrayPrintDoubleWithDoubleArray:);
  methods[40].selector = @selector(dumpKeys);
  methods[41].selector = @selector(prettyPrint);
  methods[42].selector = @selector(prettyPrintWithJavaIoPrintWriter:);
  methods[43].selector = @selector(prettyPrintWithJavaIoPrintWriter:withNSString:);
  methods[44].selector = @selector(prettyPrintWithJavaIoPrintWriter:withNSString:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpStatsGeneralizedCounter_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "zeroKey", "[LNSObject;", .constantValue.asLong = 0, 0x1a, -1, 64, -1, -1 },
    { "map_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 65, -1 },
    { "depth_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "total_", "D", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "tempMDouble_", "LEduStanfordNlpUtilMutableDouble;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "()Ljava/util/Set<Ljava/util/Map$Entry<Ljava/util/List<TK;>;Ljava/lang/Double;>;>;", "entrySet", "LJavaUtilSet;[LNSObject;Z", "(Ljava/util/Set<Ljava/util/Map$Entry<Ljava/lang/Object;Ljava/lang/Double;>;>;[Ljava/lang/Object;Z)Ljava/util/Set<Ljava/util/Map$Entry<Ljava/lang/Object;Ljava/lang/Double;>;>;", "()Ljava/util/Set<Ljava/util/Map$Entry<Ljava/util/List<TK;>;Ledu/stanford/nlp/stats/ClassicCounter<TK;>;>;>;", "lowestLevelCounterEntrySet", "(Ljava/util/Set<Ljava/util/Map$Entry<Ljava/lang/Object;Ledu/stanford/nlp/stats/ClassicCounter<TK;>;>;>;[Ljava/lang/Object;Z)Ljava/util/Set<Ljava/util/Map$Entry<Ljava/lang/Object;Ledu/stanford/nlp/stats/ClassicCounter<TK;>;>;>;", "()Ljava/util/Set<TK;>;", "()Ljava/util/Set<Ljava/util/List<TK;>;>;", "keySet", "(Ljava/util/Set<Ljava/lang/Object;>;[Ljava/lang/Object;Z)Ljava/util/Set<Ljava/lang/Object;>;", "getCount", "LNSObject;", "LNSObject;LNSObject;", "(TK;TK;)D", "LNSObject;LNSObject;LNSObject;", "(TK;TK;TK;)D", "getCounts", "LJavaUtilList;", "(Ljava/util/List<TK;>;)[D", "conditionalizeHelper", "(TK;)Ledu/stanford/nlp/stats/GeneralizedCounter<TK;>;", "conditionalize", "(Ljava/util/List<TK;>;)Ledu/stanford/nlp/stats/GeneralizedCounter<TK;>;", "conditionalizeOnce", "incrementCount", "LJavaUtilList;LNSObject;", "(Ljava/util/List<TK;>;TK;)V", "LJavaUtilList;LNSObject;D", "(Ljava/util/List<TK;>;TK;D)V", "(Ljava/util/List<TK;>;)V", "LJavaUtilList;D", "(Ljava/util/List<TK;>;D)V", "incrementCount2D", "(TK;TK;)V", "LNSObject;LNSObject;D", "(TK;TK;D)V", "incrementCount3D", "(TK;TK;TK;)V", "LNSObject;LNSObject;LNSObject;D", "(TK;TK;TK;D)V", "addToTotal", "D", "incrementCount1D", "(TK;)V", "LNSObject;D", "(TK;D)V", "containsKey", "(Ljava/util/List<TK;>;)Z", "()Ledu/stanford/nlp/stats/GeneralizedCounter<TK;>;", "()Ledu/stanford/nlp/stats/ClassicCounter<Ljava/util/List<TK;>;>;", "()Ledu/stanford/nlp/stats/ClassicCounter<TK;>;", "toString", "LNSString;", "main", "[LNSString;", "arrayPrintDouble", "[D", "()Ljava/util/Set<*>;", "prettyPrint", "LJavaIoPrintWriter;", "LJavaIoPrintWriter;LNSString;", "LJavaIoPrintWriter;LNSString;LNSString;", &EduStanfordNlpStatsGeneralizedCounter_zeroKey, "Ljava/util/Map<TK;Ljava/lang/Object;>;", "LEduStanfordNlpStatsGeneralizedCounter_Entry;LEduStanfordNlpStatsGeneralizedCounter_CounterView;LEduStanfordNlpStatsGeneralizedCounter_OneDimensionalCounterView;", "<K:Ljava/lang/Object;>Ljava/lang/Object;Ljava/io/Serializable;" };
  static const J2ObjcClassInfo _EduStanfordNlpStatsGeneralizedCounter = { "GeneralizedCounter", "edu.stanford.nlp.stats", ptrTable, methods, fields, 7, 0x1, 45, 6, -1, 66, -1, 67, -1 };
  return &_EduStanfordNlpStatsGeneralizedCounter;
}

+ (void)initialize {
  if (self == [EduStanfordNlpStatsGeneralizedCounter class]) {
    EduStanfordNlpStatsGeneralizedCounter_zeroKey = [IOSObjectArray newArrayWithLength:0 type:NSObject_class_()];
    J2OBJC_SET_INITIALIZED(EduStanfordNlpStatsGeneralizedCounter)
  }
}

@end

void EduStanfordNlpStatsGeneralizedCounter_init(EduStanfordNlpStatsGeneralizedCounter *self) {
  NSObject_init(self);
  self->map_ = EduStanfordNlpUtilGenerics_newHashMap();
  self->tempMDouble_ = nil;
}

EduStanfordNlpStatsGeneralizedCounter *new_EduStanfordNlpStatsGeneralizedCounter_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpStatsGeneralizedCounter, init)
}

EduStanfordNlpStatsGeneralizedCounter *create_EduStanfordNlpStatsGeneralizedCounter_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpStatsGeneralizedCounter, init)
}

void EduStanfordNlpStatsGeneralizedCounter_initWithInt_(EduStanfordNlpStatsGeneralizedCounter *self, jint depth) {
  NSObject_init(self);
  self->map_ = EduStanfordNlpUtilGenerics_newHashMap();
  self->tempMDouble_ = nil;
  self->depth_ = depth;
}

EduStanfordNlpStatsGeneralizedCounter *new_EduStanfordNlpStatsGeneralizedCounter_initWithInt_(jint depth) {
  J2OBJC_NEW_IMPL(EduStanfordNlpStatsGeneralizedCounter, initWithInt_, depth)
}

EduStanfordNlpStatsGeneralizedCounter *create_EduStanfordNlpStatsGeneralizedCounter_initWithInt_(jint depth) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpStatsGeneralizedCounter, initWithInt_, depth)
}

id<JavaUtilSet> EduStanfordNlpStatsGeneralizedCounter_entrySetWithJavaUtilSet_withNSObjectArray_withBoolean_(EduStanfordNlpStatsGeneralizedCounter *self, id<JavaUtilSet> s, IOSObjectArray *key, jboolean useLists) {
  if (self->depth_ == 1) {
    id<JavaUtilSet> keys = [((id<JavaUtilMap>) nil_chk(self->map_)) keySet];
    for (id __strong finalKey in nil_chk(keys)) {
      IOSObjectArray *newKey = EduStanfordNlpUtilErasureUtils_mkTArrayWithIOSClass_withInt_(NSObject_class_(), ((IOSObjectArray *) nil_chk(key))->size_ + 1);
      if (key->size_ > 0) {
        JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(key, 0, newKey, 0, key->size_);
      }
      (void) IOSObjectArray_Set(nil_chk(newKey), key->size_, finalKey);
      EduStanfordNlpUtilMutableDouble *value = (EduStanfordNlpUtilMutableDouble *) cast_chk([((id<JavaUtilMap>) nil_chk(self->map_)) getWithId:finalKey], [EduStanfordNlpUtilMutableDouble class]);
      JavaLangDouble *value1 = new_JavaLangDouble_initWithDouble_([((EduStanfordNlpUtilMutableDouble *) nil_chk(value)) doubleValue]);
      if (useLists) {
        [((id<JavaUtilSet>) nil_chk(s)) addWithId:new_EduStanfordNlpStatsGeneralizedCounter_Entry_initWithId_withId_(JavaUtilArrays_asListWithNSObjectArray_(newKey), value1)];
      }
      else {
        [((id<JavaUtilSet>) nil_chk(s)) addWithId:new_EduStanfordNlpStatsGeneralizedCounter_Entry_initWithId_withId_(IOSObjectArray_Get(newKey, 0), value1)];
      }
    }
  }
  else {
    id<JavaUtilSet> keys = [((id<JavaUtilMap>) nil_chk(self->map_)) keySet];
    for (id __strong o in nil_chk(keys)) {
      IOSObjectArray *newKey = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(key))->size_ + 1 type:NSObject_class_()];
      if (key->size_ > 0) {
        JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(key, 0, newKey, 0, key->size_);
      }
      (void) IOSObjectArray_Set(newKey, key->size_, o);
      (void) EduStanfordNlpStatsGeneralizedCounter_entrySetWithJavaUtilSet_withNSObjectArray_withBoolean_(nil_chk(EduStanfordNlpStatsGeneralizedCounter_conditionalizeHelperWithId_(self, o)), s, newKey, true);
    }
  }
  return s;
}

id<JavaUtilSet> EduStanfordNlpStatsGeneralizedCounter_lowestLevelCounterEntrySetWithJavaUtilSet_withNSObjectArray_withBoolean_(EduStanfordNlpStatsGeneralizedCounter *self, id<JavaUtilSet> s, IOSObjectArray *key, jboolean useLists) {
  id<JavaUtilSet> keys = [((id<JavaUtilMap>) nil_chk(self->map_)) keySet];
  if (self->depth_ == 2) {
    for (id __strong finalKey in nil_chk(keys)) {
      IOSObjectArray *newKey = EduStanfordNlpUtilErasureUtils_mkTArrayWithIOSClass_withInt_(NSObject_class_(), ((IOSObjectArray *) nil_chk(key))->size_ + 1);
      if (key->size_ > 0) {
        JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(key, 0, newKey, 0, key->size_);
      }
      (void) IOSObjectArray_Set(nil_chk(newKey), key->size_, finalKey);
      EduStanfordNlpStatsClassicCounter *c = [((EduStanfordNlpStatsGeneralizedCounter *) nil_chk(EduStanfordNlpStatsGeneralizedCounter_conditionalizeHelperWithId_(self, finalKey))) oneDimensionalCounterView];
      if (useLists) {
        [((id<JavaUtilSet>) nil_chk(s)) addWithId:new_EduStanfordNlpStatsGeneralizedCounter_Entry_initWithId_withId_(JavaUtilArrays_asListWithNSObjectArray_(newKey), c)];
      }
      else {
        [((id<JavaUtilSet>) nil_chk(s)) addWithId:new_EduStanfordNlpStatsGeneralizedCounter_Entry_initWithId_withId_(IOSObjectArray_Get(newKey, 0), c)];
      }
    }
  }
  else {
    for (id __strong o in nil_chk(keys)) {
      IOSObjectArray *newKey = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(key))->size_ + 1 type:NSObject_class_()];
      if (key->size_ > 0) {
        JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(key, 0, newKey, 0, key->size_);
      }
      (void) IOSObjectArray_Set(newKey, key->size_, o);
      (void) EduStanfordNlpStatsGeneralizedCounter_lowestLevelCounterEntrySetWithJavaUtilSet_withNSObjectArray_withBoolean_(nil_chk(EduStanfordNlpStatsGeneralizedCounter_conditionalizeHelperWithId_(self, o)), s, newKey, true);
    }
  }
  return s;
}

id<JavaUtilSet> EduStanfordNlpStatsGeneralizedCounter_keySetWithJavaUtilSet_withNSObjectArray_withBoolean_(EduStanfordNlpStatsGeneralizedCounter *self, id<JavaUtilSet> s, IOSObjectArray *key, jboolean useList) {
  if (self->depth_ == 1) {
    id<JavaUtilSet> keys = [((id<JavaUtilMap>) nil_chk(self->map_)) keySet];
    for (id __strong oldKey in nil_chk(keys)) {
      IOSObjectArray *newKey = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(key))->size_ + 1 type:NSObject_class_()];
      if (key->size_ > 0) {
        JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(key, 0, newKey, 0, key->size_);
      }
      (void) IOSObjectArray_Set(newKey, key->size_, oldKey);
      if (useList) {
        [((id<JavaUtilSet>) nil_chk(s)) addWithId:JavaUtilArrays_asListWithNSObjectArray_(newKey)];
      }
      else {
        [((id<JavaUtilSet>) nil_chk(s)) addWithId:IOSObjectArray_Get(newKey, 0)];
      }
    }
  }
  else {
    id<JavaUtilSet> keys = [((id<JavaUtilMap>) nil_chk(self->map_)) keySet];
    for (id __strong o in nil_chk(keys)) {
      IOSObjectArray *newKey = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(key))->size_ + 1 type:NSObject_class_()];
      if (key->size_ > 0) {
        JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(key, 0, newKey, 0, key->size_);
      }
      (void) IOSObjectArray_Set(newKey, key->size_, o);
      (void) EduStanfordNlpStatsGeneralizedCounter_keySetWithJavaUtilSet_withNSObjectArray_withBoolean_(nil_chk(EduStanfordNlpStatsGeneralizedCounter_conditionalizeHelperWithId_(self, o)), s, newKey, true);
    }
  }
  return s;
}

EduStanfordNlpStatsGeneralizedCounter *EduStanfordNlpStatsGeneralizedCounter_conditionalizeHelperWithId_(EduStanfordNlpStatsGeneralizedCounter *self, id o) {
  if (self->depth_ > 1) {
    EduStanfordNlpStatsGeneralizedCounter *next = EduStanfordNlpUtilErasureUtils_uncheckedCastWithId_([((id<JavaUtilMap>) nil_chk(self->map_)) getWithId:o]);
    if (next == nil) {
      (void) [((id<JavaUtilMap>) nil_chk(self->map_)) putWithId:o withId:(next = new_EduStanfordNlpStatsGeneralizedCounter_initWithInt_(self->depth_ - 1))];
    }
    return next;
  }
  else {
    @throw new_JavaLangRuntimeException_initWithNSString_(@"Error -- can't conditionalize a distribution of depth 1");
  }
}

void EduStanfordNlpStatsGeneralizedCounter_addToTotalWithDouble_(EduStanfordNlpStatsGeneralizedCounter *self, jdouble d) {
  JrePlusAssignDoubleD(&self->total_, d);
}

void EduStanfordNlpStatsGeneralizedCounter_wrongDepth(EduStanfordNlpStatsGeneralizedCounter *self) {
  @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$I", @"Error -- attempt to operate with key of wrong length. depth=", self->depth_));
}

void EduStanfordNlpStatsGeneralizedCounter_mainWithNSStringArray_(IOSObjectArray *args) {
  EduStanfordNlpStatsGeneralizedCounter_initialize();
  IOSObjectArray *a1 = [IOSObjectArray newArrayWithObjects:(id[]){ @"a", @"b" } count:2 type:NSObject_class_()];
  IOSObjectArray *a2 = [IOSObjectArray newArrayWithObjects:(id[]){ @"a", @"b" } count:2 type:NSObject_class_()];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithBoolean:JavaUtilArrays_equalsWithNSObjectArray_withNSObjectArray_(a1, a2)];
  EduStanfordNlpStatsGeneralizedCounter *gc = new_EduStanfordNlpStatsGeneralizedCounter_initWithInt_(3);
  [gc incrementCountWithJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ @"a", @"j", @"x" } count:3 type:NSString_class_()]) withDouble:3.0];
  [gc incrementCountWithJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ @"a", @"l", @"x" } count:3 type:NSString_class_()]) withDouble:3.0];
  [gc incrementCountWithJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ @"b", @"k", @"y" } count:3 type:NSString_class_()]) withDouble:3.0];
  [gc incrementCountWithJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ @"b", @"k", @"z" } count:3 type:NSString_class_()]) withDouble:3.0];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"incremented counts."];
  [JreLoadStatic(JavaLangSystem, out) printlnWithId:EduStanfordNlpStatsGeneralizedCounter_dumpKeys(gc)];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"string representation of generalized counter:"];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:[gc description]];
  EduStanfordNlpStatsGeneralizedCounter_printKeySet(gc);
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$@", @"entry set:\n", [gc entrySet])];
  EduStanfordNlpStatsGeneralizedCounter_arrayPrintDoubleWithDoubleArray_([gc getCountsWithJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ @"a", @"j", @"x" } count:3 type:NSString_class_()])]);
  EduStanfordNlpStatsGeneralizedCounter_arrayPrintDoubleWithDoubleArray_([gc getCountsWithJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ @"a", @"j", @"z" } count:3 type:NSString_class_()])]);
  EduStanfordNlpStatsGeneralizedCounter_arrayPrintDoubleWithDoubleArray_([gc getCountsWithJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ @"b", @"k", @"w" } count:3 type:NSString_class_()])]);
  EduStanfordNlpStatsGeneralizedCounter_arrayPrintDoubleWithDoubleArray_([gc getCountsWithJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ @"b", @"k", @"z" } count:3 type:NSString_class_()])]);
  EduStanfordNlpStatsGeneralizedCounter *gc1 = [gc conditionalizeWithJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ @"a" } count:1 type:NSString_class_()])];
  [((EduStanfordNlpStatsGeneralizedCounter *) nil_chk(gc1)) incrementCountWithJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ @"j", @"x" } count:2 type:NSString_class_()])];
  [gc1 incrementCount2DWithId:@"j" withId:@"z"];
  EduStanfordNlpStatsGeneralizedCounter *gc2 = [gc1 conditionalizeWithJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ @"j" } count:1 type:NSString_class_()])];
  [((EduStanfordNlpStatsGeneralizedCounter *) nil_chk(gc2)) incrementCount1DWithId:@"x"];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"Pretty-printing gc after incrementing gc1:"];
  [gc prettyPrint];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$D", @"Total: ", [gc totalCount])];
  EduStanfordNlpStatsGeneralizedCounter_printKeySet(gc1);
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$@", @"another entry set:\n", [gc1 entrySet])];
  EduStanfordNlpStatsClassicCounter *c = [gc counterView];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"string representation of counter view:"];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:[((EduStanfordNlpStatsClassicCounter *) nil_chk(c)) description]];
  jdouble d1 = [c getCountWithId:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ @"a", @"j", @"x" } count:3 type:NSString_class_()])];
  jdouble d2 = [c getCountWithId:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ @"a", @"j", @"w" } count:3 type:NSString_class_()])];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("DCD", d1, ' ', d2)];
  EduStanfordNlpStatsClassicCounter *c1 = [gc1 counterView];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$D", @"Count of {j,x} -- should be 3.0\t", [((EduStanfordNlpStatsClassicCounter *) nil_chk(c1)) getCountWithId:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ @"j", @"x" } count:2 type:NSString_class_()])])];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("@$I", [c keySet], @" size ", [((id<JavaUtilSet>) nil_chk([c keySet])) size])];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("@$I", [c1 keySet], @" size ", [((id<JavaUtilSet>) nil_chk([c1 keySet])) size])];
  [JreLoadStatic(JavaLangSystem, out) printlnWithBoolean:[c1 isEqual:c]];
  [JreLoadStatic(JavaLangSystem, out) printlnWithBoolean:[c isEqual:c1]];
  [JreLoadStatic(JavaLangSystem, out) printlnWithBoolean:[c isEqual:c]];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"### testing equality of regular Counter..."];
  EduStanfordNlpStatsClassicCounter *z1 = new_EduStanfordNlpStatsClassicCounter_init();
  EduStanfordNlpStatsClassicCounter *z2 = new_EduStanfordNlpStatsClassicCounter_init();
  [z1 incrementCountWithId:@"a1"];
  [z1 incrementCountWithId:@"a2"];
  [z2 incrementCountWithId:@"b"];
  [JreLoadStatic(JavaLangSystem, out) printlnWithBoolean:[z1 isEqual:z2]];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:[z1 description]];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:[((id<JavaUtilSet>) nil_chk([z1 keySet])) description]];
}

void EduStanfordNlpStatsGeneralizedCounter_printKeySet(EduStanfordNlpStatsGeneralizedCounter *self) {
  id<JavaUtilSet> keys = [self keySet];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"printing keyset:"];
  for (id __strong o in nil_chk(keys)) {
    [JreLoadStatic(JavaLangSystem, out) printlnWithId:o];
  }
}

void EduStanfordNlpStatsGeneralizedCounter_arrayPrintDoubleWithDoubleArray_(IOSDoubleArray *o) {
  EduStanfordNlpStatsGeneralizedCounter_initialize();
  {
    IOSDoubleArray *a__ = o;
    jdouble const *b__ = ((IOSDoubleArray *) nil_chk(a__))->buffer_;
    jdouble const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jdouble anO = *b__++;
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printWithNSString:JreStrcat("DC", anO, 0x0009)];
    }
  }
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) println];
}

id<JavaUtilSet> EduStanfordNlpStatsGeneralizedCounter_dumpKeys(EduStanfordNlpStatsGeneralizedCounter *self) {
  return [((id<JavaUtilMap>) nil_chk(self->map_)) keySet];
}

void EduStanfordNlpStatsGeneralizedCounter_prettyPrintWithJavaIoPrintWriter_withNSString_withNSString_(EduStanfordNlpStatsGeneralizedCounter *self, JavaIoPrintWriter *pw, NSString *buffer, NSString *bufferIncrement) {
  if (self->depth_ == 1) {
    for (id<JavaUtilMap_Entry> __strong e in nil_chk([self entrySet])) {
      id key = [((id<JavaUtilMap_Entry>) nil_chk(e)) getKey];
      jdouble count = [((JavaLangDouble *) nil_chk([e getValue])) doubleValue];
      [((JavaIoPrintWriter *) nil_chk(pw)) printlnWithNSString:JreStrcat("$@CD", buffer, key, 0x0009, count)];
    }
  }
  else {
    for (id __strong key in nil_chk([self topLevelKeySet])) {
      EduStanfordNlpStatsGeneralizedCounter *gc1 = [self conditionalizeWithJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_(EduStanfordNlpUtilErasureUtils_uncheckedCastWithId_([IOSObjectArray newArrayWithObjects:(id[]){ key } count:1 type:NSObject_class_()]))];
      [((JavaIoPrintWriter *) nil_chk(pw)) printlnWithNSString:JreStrcat("$@CD", buffer, key, 0x0009, [((EduStanfordNlpStatsGeneralizedCounter *) nil_chk(gc1)) totalCount])];
      EduStanfordNlpStatsGeneralizedCounter_prettyPrintWithJavaIoPrintWriter_withNSString_withNSString_(gc1, pw, JreStrcat("$$", buffer, bufferIncrement), bufferIncrement);
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpStatsGeneralizedCounter)

@implementation EduStanfordNlpStatsGeneralizedCounter_Entry

- (instancetype)initWithId:(id)key
                    withId:(id)value {
  EduStanfordNlpStatsGeneralizedCounter_Entry_initWithId_withId_(self, key, value);
  return self;
}

- (id)getKey {
  return key_;
}

- (id)getValue {
  return value_;
}

- (id)setValueWithId:(id)value {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (jboolean)isEqual:(id)o {
  if (self == o) {
    return true;
  }
  if (!([o isKindOfClass:[EduStanfordNlpStatsGeneralizedCounter_Entry class]])) {
    return false;
  }
  EduStanfordNlpStatsGeneralizedCounter_Entry *e = EduStanfordNlpUtilErasureUtils_uncheckedCastWithId_(o);
  id key1 = [((EduStanfordNlpStatsGeneralizedCounter_Entry *) nil_chk(e)) getKey];
  if (!(key_ != nil && [key_ isEqual:key1])) {
    return false;
  }
  id value1 = [e getValue];
  if (!(value_ != nil && [value_ isEqual:value1])) {
    return false;
  }
  return true;
}

- (NSUInteger)hash {
  if (key_ == nil || value_ == nil) {
    return 0;
  }
  return ((jint) [key_ hash]) ^ ((jint) [nil_chk(value_) hash]);
}

- (NSString *)description {
  return JreStrcat("$C$", [nil_chk(key_) description], '=', [nil_chk(value_) description]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "Z", 0x1, 7, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 8, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 9, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithId:withId:);
  methods[1].selector = @selector(getKey);
  methods[2].selector = @selector(getValue);
  methods[3].selector = @selector(setValueWithId:);
  methods[4].selector = @selector(isEqual:);
  methods[5].selector = @selector(hash);
  methods[6].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "key_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, 10, -1 },
    { "value_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, 11, -1 },
  };
  static const void *ptrTable[] = { "LNSObject;LNSObject;", "(TK;TV;)V", "()TK;", "()TV;", "setValue", "LNSObject;", "(TV;)TV;", "equals", "hashCode", "toString", "TK;", "TV;", "LEduStanfordNlpStatsGeneralizedCounter;", "<K:Ljava/lang/Object;V:Ljava/lang/Object;>Ljava/lang/Object;Ljava/util/Map$Entry<TK;TV;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpStatsGeneralizedCounter_Entry = { "Entry", "edu.stanford.nlp.stats", ptrTable, methods, fields, 7, 0xa, 7, 2, 12, -1, -1, 13, -1 };
  return &_EduStanfordNlpStatsGeneralizedCounter_Entry;
}

@end

void EduStanfordNlpStatsGeneralizedCounter_Entry_initWithId_withId_(EduStanfordNlpStatsGeneralizedCounter_Entry *self, id key, id value) {
  NSObject_init(self);
  self->key_ = key;
  self->value_ = value;
}

EduStanfordNlpStatsGeneralizedCounter_Entry *new_EduStanfordNlpStatsGeneralizedCounter_Entry_initWithId_withId_(id key, id value) {
  J2OBJC_NEW_IMPL(EduStanfordNlpStatsGeneralizedCounter_Entry, initWithId_withId_, key, value)
}

EduStanfordNlpStatsGeneralizedCounter_Entry *create_EduStanfordNlpStatsGeneralizedCounter_Entry_initWithId_withId_(id key, id value) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpStatsGeneralizedCounter_Entry, initWithId_withId_, key, value)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpStatsGeneralizedCounter_Entry)

@implementation EduStanfordNlpStatsGeneralizedCounter_CounterView

- (jdouble)incrementCountWithId:(id<JavaUtilList>)o
                     withDouble:(jdouble)count {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)setCountWithId:(id<JavaUtilList>)o
            withDouble:(jdouble)count {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (jdouble)totalCount {
  return [this$0_ totalCount];
}

- (jdouble)getCountWithId:(id)o {
  id<JavaUtilList> l = (id<JavaUtilList>) cast_check(o, JavaUtilList_class_());
  if ([((id<JavaUtilList>) nil_chk(l)) size] != this$0_->depth_) {
    return 0.0;
  }
  else {
    return IOSDoubleArray_Get(nil_chk([this$0_ getCountsWithJavaUtilList:l]), this$0_->depth_);
  }
}

- (jint)size {
  return [((id<JavaUtilMap>) nil_chk(this$0_->map_)) size];
}

- (id<JavaUtilSet>)keySet {
  return [this$0_ keySet];
}

- (jdouble)removeWithId:(id<JavaUtilList>)o {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (jboolean)containsKeyWithId:(id<JavaUtilList>)key {
  return [this$0_ containsKeyWithJavaUtilList:key];
}

- (void)clear {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (jboolean)isEmpty {
  return [this$0_ isEmpty];
}

- (id<JavaUtilSet>)entrySet {
  return [this$0_ entrySet];
}

- (jboolean)isEqual:(id)o {
  if (o == self) {
    return true;
  }
  if (!([o isKindOfClass:[EduStanfordNlpStatsClassicCounter class]])) {
    return false;
  }
  else {
    return [((id<JavaUtilSet>) nil_chk([self entrySet])) isEqual:[((EduStanfordNlpStatsClassicCounter *) nil_chk(((EduStanfordNlpStatsClassicCounter *) cast_chk(o, [EduStanfordNlpStatsClassicCounter class])))) entrySet]];
  }
}

- (NSUInteger)hash {
  jint total = 17;
  for (id __strong o in nil_chk([self entrySet])) {
    total = 37 * total + ((jint) [nil_chk(o) hash]);
  }
  return total;
}

- (NSString *)description {
  JavaLangStringBuffer *sb = new_JavaLangStringBuffer_initWithNSString_(@"{");
  for (id<JavaUtilIterator> i = [((id<JavaUtilSet>) nil_chk([self entrySet])) iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
    id<JavaUtilMap_Entry> e = [i next];
    (void) [sb appendWithNSString:[((id<JavaUtilMap_Entry>) nil_chk(e)) description]];
    if ([i hasNext]) {
      (void) [sb appendWithNSString:@","];
    }
  }
  (void) [sb appendWithNSString:@"}"];
  return [sb description];
}

- (instancetype)initWithEduStanfordNlpStatsGeneralizedCounter:(EduStanfordNlpStatsGeneralizedCounter *)outer$ {
  EduStanfordNlpStatsGeneralizedCounter_CounterView_initWithEduStanfordNlpStatsGeneralizedCounter_(self, outer$);
  return self;
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "D", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "V", 0x1, 3, 1, -1, 4, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 7, -1, -1 },
    { NULL, "D", 0x1, 8, 9, -1, 10, -1, -1 },
    { NULL, "Z", 0x1, 11, 9, -1, 12, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 13, -1, -1 },
    { NULL, "Z", 0x1, 14, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 15, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 16, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 17, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(incrementCountWithId:withDouble:);
  methods[1].selector = @selector(setCountWithId:withDouble:);
  methods[2].selector = @selector(totalCount);
  methods[3].selector = @selector(getCountWithId:);
  methods[4].selector = @selector(size);
  methods[5].selector = @selector(keySet);
  methods[6].selector = @selector(removeWithId:);
  methods[7].selector = @selector(containsKeyWithId:);
  methods[8].selector = @selector(clear);
  methods[9].selector = @selector(isEmpty);
  methods[10].selector = @selector(entrySet);
  methods[11].selector = @selector(isEqual:);
  methods[12].selector = @selector(hash);
  methods[13].selector = @selector(description);
  methods[14].selector = @selector(initWithEduStanfordNlpStatsGeneralizedCounter:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LEduStanfordNlpStatsGeneralizedCounter;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpStatsGeneralizedCounter_CounterView_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "incrementCount", "LJavaUtilList;D", "(Ljava/util/List<TK;>;D)D", "setCount", "(Ljava/util/List<TK;>;D)V", "getCount", "LNSObject;", "()Ljava/util/Set<Ljava/util/List<TK;>;>;", "remove", "LJavaUtilList;", "(Ljava/util/List<TK;>;)D", "containsKey", "(Ljava/util/List<TK;>;)Z", "()Ljava/util/Set<Ljava/util/Map$Entry<Ljava/util/List<TK;>;Ljava/lang/Double;>;>;", "equals", "hashCode", "toString", "LEduStanfordNlpStatsGeneralizedCounter;", "Ledu/stanford/nlp/stats/ClassicCounter<Ljava/util/List<TK;>;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpStatsGeneralizedCounter_CounterView = { "CounterView", "edu.stanford.nlp.stats", ptrTable, methods, fields, 7, 0x2, 15, 2, 17, -1, -1, 18, -1 };
  return &_EduStanfordNlpStatsGeneralizedCounter_CounterView;
}

@end

void EduStanfordNlpStatsGeneralizedCounter_CounterView_initWithEduStanfordNlpStatsGeneralizedCounter_(EduStanfordNlpStatsGeneralizedCounter_CounterView *self, EduStanfordNlpStatsGeneralizedCounter *outer$) {
  self->this$0_ = outer$;
  EduStanfordNlpStatsClassicCounter_init(self);
}

EduStanfordNlpStatsGeneralizedCounter_CounterView *new_EduStanfordNlpStatsGeneralizedCounter_CounterView_initWithEduStanfordNlpStatsGeneralizedCounter_(EduStanfordNlpStatsGeneralizedCounter *outer$) {
  J2OBJC_NEW_IMPL(EduStanfordNlpStatsGeneralizedCounter_CounterView, initWithEduStanfordNlpStatsGeneralizedCounter_, outer$)
}

EduStanfordNlpStatsGeneralizedCounter_CounterView *create_EduStanfordNlpStatsGeneralizedCounter_CounterView_initWithEduStanfordNlpStatsGeneralizedCounter_(EduStanfordNlpStatsGeneralizedCounter *outer$) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpStatsGeneralizedCounter_CounterView, initWithEduStanfordNlpStatsGeneralizedCounter_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpStatsGeneralizedCounter_CounterView)

@implementation EduStanfordNlpStatsGeneralizedCounter_OneDimensionalCounterView

- (jdouble)incrementCountWithId:(id)o
                     withDouble:(jdouble)count {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)setCountWithId:(id)o
            withDouble:(jdouble)count {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (jdouble)totalCount {
  return [this$0_ totalCount];
}

- (jdouble)getCountWithId:(id)o {
  return [this$0_ getCountWithId:o];
}

- (jint)size {
  return [((id<JavaUtilMap>) nil_chk(this$0_->map_)) size];
}

- (id<JavaUtilSet>)keySet {
  return EduStanfordNlpUtilErasureUtils_uncheckedCastWithId_(EduStanfordNlpStatsGeneralizedCounter_keySetWithJavaUtilSet_withNSObjectArray_withBoolean_(this$0_, EduStanfordNlpUtilGenerics_newHashSet(), JreLoadStatic(EduStanfordNlpStatsGeneralizedCounter, zeroKey), false));
}

- (jdouble)removeWithId:(id)o {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (jboolean)containsKeyWithId:(id)key {
  return [((id<JavaUtilMap>) nil_chk(this$0_->map_)) containsKeyWithId:key];
}

- (void)clear {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (jboolean)isEmpty {
  return [this$0_ isEmpty];
}

- (id<JavaUtilSet>)entrySet {
  return EduStanfordNlpUtilErasureUtils_uncheckedCastWithId_(EduStanfordNlpStatsGeneralizedCounter_entrySetWithJavaUtilSet_withNSObjectArray_withBoolean_(this$0_, new_JavaUtilHashSet_init(), JreLoadStatic(EduStanfordNlpStatsGeneralizedCounter, zeroKey), false));
}

- (jboolean)isEqual:(id)o {
  if (o == self) {
    return true;
  }
  if (!([o isKindOfClass:[EduStanfordNlpStatsClassicCounter class]])) {
    return false;
  }
  else {
    return [((id<JavaUtilSet>) nil_chk([self entrySet])) isEqual:[((EduStanfordNlpStatsClassicCounter *) nil_chk(((EduStanfordNlpStatsClassicCounter *) cast_chk(o, [EduStanfordNlpStatsClassicCounter class])))) entrySet]];
  }
}

- (NSUInteger)hash {
  jint total = 17;
  for (id __strong o in nil_chk([self entrySet])) {
    total = 37 * total + ((jint) [nil_chk(o) hash]);
  }
  return total;
}

- (NSString *)description {
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_initWithNSString_(@"{");
  for (id<JavaUtilIterator> i = [((id<JavaUtilSet>) nil_chk([self entrySet])) iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
    id<JavaUtilMap_Entry> e = [i next];
    (void) [sb appendWithNSString:[((id<JavaUtilMap_Entry>) nil_chk(e)) description]];
    if ([i hasNext]) {
      (void) [sb appendWithNSString:@","];
    }
  }
  (void) [sb appendWithNSString:@"}"];
  return [sb description];
}

- (instancetype)initWithEduStanfordNlpStatsGeneralizedCounter:(EduStanfordNlpStatsGeneralizedCounter *)outer$ {
  EduStanfordNlpStatsGeneralizedCounter_OneDimensionalCounterView_initWithEduStanfordNlpStatsGeneralizedCounter_(self, outer$);
  return self;
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "D", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "V", 0x1, 3, 1, -1, 4, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 7, -1, -1 },
    { NULL, "D", 0x1, 8, 6, -1, 9, -1, -1 },
    { NULL, "Z", 0x1, 10, 6, -1, 11, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 12, -1, -1 },
    { NULL, "Z", 0x1, 13, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 14, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 15, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 16, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(incrementCountWithId:withDouble:);
  methods[1].selector = @selector(setCountWithId:withDouble:);
  methods[2].selector = @selector(totalCount);
  methods[3].selector = @selector(getCountWithId:);
  methods[4].selector = @selector(size);
  methods[5].selector = @selector(keySet);
  methods[6].selector = @selector(removeWithId:);
  methods[7].selector = @selector(containsKeyWithId:);
  methods[8].selector = @selector(clear);
  methods[9].selector = @selector(isEmpty);
  methods[10].selector = @selector(entrySet);
  methods[11].selector = @selector(isEqual:);
  methods[12].selector = @selector(hash);
  methods[13].selector = @selector(description);
  methods[14].selector = @selector(initWithEduStanfordNlpStatsGeneralizedCounter:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LEduStanfordNlpStatsGeneralizedCounter;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpStatsGeneralizedCounter_OneDimensionalCounterView_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "incrementCount", "LNSObject;D", "(TK;D)D", "setCount", "(TK;D)V", "getCount", "LNSObject;", "()Ljava/util/Set<TK;>;", "remove", "(Ljava/lang/Object;)D", "containsKey", "(Ljava/lang/Object;)Z", "()Ljava/util/Set<Ljava/util/Map$Entry<TK;Ljava/lang/Double;>;>;", "equals", "hashCode", "toString", "LEduStanfordNlpStatsGeneralizedCounter;", "Ledu/stanford/nlp/stats/ClassicCounter<TK;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpStatsGeneralizedCounter_OneDimensionalCounterView = { "OneDimensionalCounterView", "edu.stanford.nlp.stats", ptrTable, methods, fields, 7, 0x2, 15, 2, 16, -1, -1, 17, -1 };
  return &_EduStanfordNlpStatsGeneralizedCounter_OneDimensionalCounterView;
}

@end

void EduStanfordNlpStatsGeneralizedCounter_OneDimensionalCounterView_initWithEduStanfordNlpStatsGeneralizedCounter_(EduStanfordNlpStatsGeneralizedCounter_OneDimensionalCounterView *self, EduStanfordNlpStatsGeneralizedCounter *outer$) {
  self->this$0_ = outer$;
  EduStanfordNlpStatsClassicCounter_init(self);
}

EduStanfordNlpStatsGeneralizedCounter_OneDimensionalCounterView *new_EduStanfordNlpStatsGeneralizedCounter_OneDimensionalCounterView_initWithEduStanfordNlpStatsGeneralizedCounter_(EduStanfordNlpStatsGeneralizedCounter *outer$) {
  J2OBJC_NEW_IMPL(EduStanfordNlpStatsGeneralizedCounter_OneDimensionalCounterView, initWithEduStanfordNlpStatsGeneralizedCounter_, outer$)
}

EduStanfordNlpStatsGeneralizedCounter_OneDimensionalCounterView *create_EduStanfordNlpStatsGeneralizedCounter_OneDimensionalCounterView_initWithEduStanfordNlpStatsGeneralizedCounter_(EduStanfordNlpStatsGeneralizedCounter *outer$) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpStatsGeneralizedCounter_OneDimensionalCounterView, initWithEduStanfordNlpStatsGeneralizedCounter_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpStatsGeneralizedCounter_OneDimensionalCounterView)
