//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/parser/lexparser/TreebankLangParserParams.java
//

#include "J2ObjC_source.h"
#include "edu/stanford/nlp/parser/lexparser/TreebankLangParserParams.h"

@interface EduStanfordNlpParserLexparserTreebankLangParserParams : NSObject

@end

@implementation EduStanfordNlpParserLexparserTreebankLangParserParams

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LEduStanfordNlpTreesHeadFinder;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesHeadFinder;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingLabel;", 0x401, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 4, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 5, 6, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTreeReaderFactory;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpParserLexparserLexicon;", 0x401, 7, 8, -1, 9, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTreeTransformer;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTreeTransformer;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesMemoryTreebank;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesDiskTreebank;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesMemoryTreebank;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTreebank;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTreebankLanguagePack;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaIoPrintWriter;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaIoPrintWriter;", 0x401, 10, 11, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTreeTransformer;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x401, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x401, 14, 15, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x401, -1, -1, -1, 16, -1, -1 },
    { NULL, "LEduStanfordNlpProcessTokenizerFactory;", 0x401, -1, -1, -1, 17, -1, -1 },
    { NULL, "LEduStanfordNlpParserLexparserExtractor;", 0x401, 18, 8, -1, 19, -1, -1 },
    { NULL, "[D", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpParserMetricsAbstractEval;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x401, 20, 3, -1, 21, -1, -1 },
    { NULL, "LEduStanfordNlpTreesGrammaticalStructure;", 0x401, 22, 23, -1, 24, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 25, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(headFinder);
  methods[1].selector = @selector(typedDependencyHeadFinder);
  methods[2].selector = @selector(processHeadWordWithEduStanfordNlpLingLabel:);
  methods[3].selector = @selector(setInputEncodingWithNSString:);
  methods[4].selector = @selector(setOutputEncodingWithNSString:);
  methods[5].selector = @selector(setEvaluateGrammaticalFunctionsWithBoolean:);
  methods[6].selector = @selector(getOutputEncoding);
  methods[7].selector = @selector(getInputEncoding);
  methods[8].selector = @selector(treeReaderFactory);
  methods[9].selector = @selector(lexWithEduStanfordNlpParserLexparserOptions:withEduStanfordNlpUtilIndex:withEduStanfordNlpUtilIndex:);
  methods[10].selector = @selector(collinizer);
  methods[11].selector = @selector(collinizerEvalb);
  methods[12].selector = @selector(memoryTreebank);
  methods[13].selector = @selector(diskTreebank);
  methods[14].selector = @selector(testMemoryTreebank);
  methods[15].selector = @selector(treebank);
  methods[16].selector = @selector(treebankLanguagePack);
  methods[17].selector = @selector(pw);
  methods[18].selector = @selector(pwWithJavaIoOutputStream:);
  methods[19].selector = @selector(sisterSplitters);
  methods[20].selector = @selector(subcategoryStripper);
  methods[21].selector = @selector(transformTreeWithEduStanfordNlpTreesTree:withEduStanfordNlpTreesTree:);
  methods[22].selector = @selector(display);
  methods[23].selector = @selector(setOptionFlagWithNSStringArray:withInt:);
  methods[24].selector = @selector(defaultTestSentence);
  methods[25].selector = @selector(treeTokenizerFactory);
  methods[26].selector = @selector(dependencyGrammarExtractorWithEduStanfordNlpParserLexparserOptions:withEduStanfordNlpUtilIndex:withEduStanfordNlpUtilIndex:);
  methods[27].selector = @selector(MLEDependencyGrammarSmoothingParams);
  methods[28].selector = @selector(ppAttachmentEval);
  methods[29].selector = @selector(readGrammaticalStructureFromFileWithNSString:);
  methods[30].selector = @selector(getGrammaticalStructureWithEduStanfordNlpTreesTree:withJavaUtilFunctionPredicate:withEduStanfordNlpTreesHeadFinder:);
  methods[31].selector = @selector(supportsBasicDependencies);
  methods[32].selector = @selector(setGenerateOriginalDependenciesWithBoolean:);
  methods[33].selector = @selector(generateOriginalDependencies);
  methods[34].selector = @selector(defaultCoreNLPFlags);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "processHeadWord", "LEduStanfordNlpLingLabel;", "setInputEncoding", "LNSString;", "setOutputEncoding", "setEvaluateGrammaticalFunctions", "Z", "lex", "LEduStanfordNlpParserLexparserOptions;LEduStanfordNlpUtilIndex;LEduStanfordNlpUtilIndex;", "(Ledu/stanford/nlp/parser/lexparser/Options;Ledu/stanford/nlp/util/Index<Ljava/lang/String;>;Ledu/stanford/nlp/util/Index<Ljava/lang/String;>;)Ledu/stanford/nlp/parser/lexparser/Lexicon;", "pw", "LJavaIoOutputStream;", "transformTree", "LEduStanfordNlpTreesTree;LEduStanfordNlpTreesTree;", "setOptionFlag", "[LNSString;I", "()Ljava/util/List<+Ledu/stanford/nlp/ling/HasWord;>;", "()Ledu/stanford/nlp/process/TokenizerFactory<Ledu/stanford/nlp/trees/Tree;>;", "dependencyGrammarExtractor", "(Ledu/stanford/nlp/parser/lexparser/Options;Ledu/stanford/nlp/util/Index<Ljava/lang/String;>;Ledu/stanford/nlp/util/Index<Ljava/lang/String;>;)Ledu/stanford/nlp/parser/lexparser/Extractor<Ledu/stanford/nlp/parser/lexparser/DependencyGrammar;>;", "readGrammaticalStructureFromFile", "(Ljava/lang/String;)Ljava/util/List<Ledu/stanford/nlp/trees/GrammaticalStructure;>;", "getGrammaticalStructure", "LEduStanfordNlpTreesTree;LJavaUtilFunctionPredicate;LEduStanfordNlpTreesHeadFinder;", "(Ledu/stanford/nlp/trees/Tree;Ljava/util/function/Predicate<Ljava/lang/String;>;Ledu/stanford/nlp/trees/HeadFinder;)Ledu/stanford/nlp/trees/GrammaticalStructure;", "setGenerateOriginalDependencies" };
  static const J2ObjcClassInfo _EduStanfordNlpParserLexparserTreebankLangParserParams = { "TreebankLangParserParams", "edu.stanford.nlp.parser.lexparser", ptrTable, methods, NULL, 7, 0x609, 35, 0, -1, -1, -1, -1, -1 };
  return &_EduStanfordNlpParserLexparserTreebankLangParserParams;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(EduStanfordNlpParserLexparserTreebankLangParserParams)
