//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/parser/lexparser/TreeBinarizer.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/ling/CategoryWordTag.h"
#include "edu/stanford/nlp/ling/CategoryWordTagFactory.h"
#include "edu/stanford/nlp/ling/HasTag.h"
#include "edu/stanford/nlp/ling/HasWord.h"
#include "edu/stanford/nlp/ling/Label.h"
#include "edu/stanford/nlp/ling/TaggedWord.h"
#include "edu/stanford/nlp/ling/Word.h"
#include "edu/stanford/nlp/parser/lexparser/TreeBinarizer.h"
#include "edu/stanford/nlp/parser/lexparser/TreebankLangParserParams.h"
#include "edu/stanford/nlp/stats/ClassicCounter.h"
#include "edu/stanford/nlp/trees/BobChrisTreeNormalizer.h"
#include "edu/stanford/nlp/trees/DiskTreebank.h"
#include "edu/stanford/nlp/trees/HeadFinder.h"
#include "edu/stanford/nlp/trees/LabeledScoredTreeFactory.h"
#include "edu/stanford/nlp/trees/MemoryTreebank.h"
#include "edu/stanford/nlp/trees/ModCollinsHeadFinder.h"
#include "edu/stanford/nlp/trees/PennTreeReader.h"
#include "edu/stanford/nlp/trees/PennTreebankLanguagePack.h"
#include "edu/stanford/nlp/trees/Tree.h"
#include "edu/stanford/nlp/trees/TreeFactory.h"
#include "edu/stanford/nlp/trees/TreeReader.h"
#include "edu/stanford/nlp/trees/TreeReaderFactory.h"
#include "edu/stanford/nlp/trees/TreeTransformer.h"
#include "edu/stanford/nlp/trees/Treebank.h"
#include "edu/stanford/nlp/trees/TreebankLanguagePack.h"
#include "java/io/PrintStream.h"
#include "java/io/Reader.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"

@interface EduStanfordNlpParserLexparserTreeBinarizer () {
 @public
  id<EduStanfordNlpTreesHeadFinder> hf_;
  id<EduStanfordNlpTreesTreeFactory> tf_;
  id<EduStanfordNlpTreesTreebankLanguagePack> tlp_;
  jboolean insideFactor_;
  jboolean markovFactor_;
  jint markovOrder_;
  jboolean useWrappingLabels_;
  jdouble selectiveSplitThreshold_;
  jboolean markFinalStates_;
  jboolean unaryAtTop_;
  jboolean doSelectiveSplit_;
  EduStanfordNlpStatsClassicCounter *stateCounter_;
  jboolean simpleLabels_;
  jboolean noRebinarization_;
}

+ (NSString *)joinWithJavaUtilList:(id<JavaUtilList>)treeList;

+ (void)localTreeStringWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
                         withJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                                           withInt:(jint)level;

- (EduStanfordNlpTreesTree *)markovOutsideBinarizeLocalTreeWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
                                                      withEduStanfordNlpLingTaggedWord:(EduStanfordNlpLingTaggedWord *)head
                                                                               withInt:(jint)headLoc
                                                                          withNSString:(NSString *)topCat
                                                                withJavaUtilLinkedList:(JavaUtilLinkedList *)ll
                                                                           withBoolean:(jboolean)doneLeft;

- (EduStanfordNlpTreesTree *)markovInsideBinarizeLocalTreeNewWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
                                                                                 withInt:(jint)headLoc
                                                                                 withInt:(jint)left
                                                                                 withInt:(jint)right
                                                                             withBoolean:(jboolean)starting;

- (id<EduStanfordNlpLingLabel>)makeSyntheticLabelWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
                                                                     withInt:(jint)left
                                                                     withInt:(jint)right
                                                                     withInt:(jint)headLoc
                                                                     withInt:(jint)markovOrder;

+ (id<EduStanfordNlpLingLabel>)makeSimpleSyntheticLabelWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t;

+ (id<EduStanfordNlpLingLabel>)makeSyntheticLabel1WithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
                                                                      withInt:(jint)left
                                                                      withInt:(jint)right
                                                                      withInt:(jint)headLoc
                                                                      withInt:(jint)markovOrder;

- (id<EduStanfordNlpLingLabel>)makeSyntheticLabel2WithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
                                                                      withInt:(jint)left
                                                                      withInt:(jint)right
                                                                      withInt:(jint)headLoc
                                                                      withInt:(jint)markovOrder;

- (EduStanfordNlpTreesTree *)insideBinarizeLocalTreeWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
                                                                        withInt:(jint)headNum
                                               withEduStanfordNlpLingTaggedWord:(EduStanfordNlpLingTaggedWord *)head
                                                                        withInt:(jint)leftProcessed
                                                                        withInt:(jint)rightProcessed;

- (EduStanfordNlpTreesTree *)outsideBinarizeLocalTreeWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
                                                                    withNSString:(NSString *)labelStr
                                                                    withNSString:(NSString *)finalCat
                                                                         withInt:(jint)headNum
                                                withEduStanfordNlpLingTaggedWord:(EduStanfordNlpLingTaggedWord *)head
                                                                         withInt:(jint)leftProcessed
                                                                    withNSString:(NSString *)leftStr
                                                                         withInt:(jint)rightProcessed
                                                                    withNSString:(NSString *)rightStr;

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserTreeBinarizer, hf_, id<EduStanfordNlpTreesHeadFinder>)
J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserTreeBinarizer, tf_, id<EduStanfordNlpTreesTreeFactory>)
J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserTreeBinarizer, tlp_, id<EduStanfordNlpTreesTreebankLanguagePack>)
J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserTreeBinarizer, stateCounter_, EduStanfordNlpStatsClassicCounter *)

inline jboolean EduStanfordNlpParserLexparserTreeBinarizer_get_DEBUG();
#define EduStanfordNlpParserLexparserTreeBinarizer_DEBUG false
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpParserLexparserTreeBinarizer, DEBUG, jboolean)

__attribute__((unused)) static NSString *EduStanfordNlpParserLexparserTreeBinarizer_joinWithJavaUtilList_(id<JavaUtilList> treeList);

__attribute__((unused)) static void EduStanfordNlpParserLexparserTreeBinarizer_localTreeStringWithEduStanfordNlpTreesTree_withJavaLangStringBuilder_withInt_(EduStanfordNlpTreesTree *t, JavaLangStringBuilder *sb, jint level);

__attribute__((unused)) static EduStanfordNlpTreesTree *EduStanfordNlpParserLexparserTreeBinarizer_markovOutsideBinarizeLocalTreeWithEduStanfordNlpTreesTree_withEduStanfordNlpLingTaggedWord_withInt_withNSString_withJavaUtilLinkedList_withBoolean_(EduStanfordNlpParserLexparserTreeBinarizer *self, EduStanfordNlpTreesTree *t, EduStanfordNlpLingTaggedWord *head, jint headLoc, NSString *topCat, JavaUtilLinkedList *ll, jboolean doneLeft);

__attribute__((unused)) static EduStanfordNlpTreesTree *EduStanfordNlpParserLexparserTreeBinarizer_markovInsideBinarizeLocalTreeNewWithEduStanfordNlpTreesTree_withInt_withInt_withInt_withBoolean_(EduStanfordNlpParserLexparserTreeBinarizer *self, EduStanfordNlpTreesTree *t, jint headLoc, jint left, jint right, jboolean starting);

__attribute__((unused)) static id<EduStanfordNlpLingLabel> EduStanfordNlpParserLexparserTreeBinarizer_makeSyntheticLabelWithEduStanfordNlpTreesTree_withInt_withInt_withInt_withInt_(EduStanfordNlpParserLexparserTreeBinarizer *self, EduStanfordNlpTreesTree *t, jint left, jint right, jint headLoc, jint markovOrder);

__attribute__((unused)) static id<EduStanfordNlpLingLabel> EduStanfordNlpParserLexparserTreeBinarizer_makeSimpleSyntheticLabelWithEduStanfordNlpTreesTree_(EduStanfordNlpTreesTree *t);

__attribute__((unused)) static id<EduStanfordNlpLingLabel> EduStanfordNlpParserLexparserTreeBinarizer_makeSyntheticLabel1WithEduStanfordNlpTreesTree_withInt_withInt_withInt_withInt_(EduStanfordNlpTreesTree *t, jint left, jint right, jint headLoc, jint markovOrder);

__attribute__((unused)) static id<EduStanfordNlpLingLabel> EduStanfordNlpParserLexparserTreeBinarizer_makeSyntheticLabel2WithEduStanfordNlpTreesTree_withInt_withInt_withInt_withInt_(EduStanfordNlpParserLexparserTreeBinarizer *self, EduStanfordNlpTreesTree *t, jint left, jint right, jint headLoc, jint markovOrder);

__attribute__((unused)) static EduStanfordNlpTreesTree *EduStanfordNlpParserLexparserTreeBinarizer_insideBinarizeLocalTreeWithEduStanfordNlpTreesTree_withInt_withEduStanfordNlpLingTaggedWord_withInt_withInt_(EduStanfordNlpParserLexparserTreeBinarizer *self, EduStanfordNlpTreesTree *t, jint headNum, EduStanfordNlpLingTaggedWord *head, jint leftProcessed, jint rightProcessed);

__attribute__((unused)) static EduStanfordNlpTreesTree *EduStanfordNlpParserLexparserTreeBinarizer_outsideBinarizeLocalTreeWithEduStanfordNlpTreesTree_withNSString_withNSString_withInt_withEduStanfordNlpLingTaggedWord_withInt_withNSString_withInt_withNSString_(EduStanfordNlpParserLexparserTreeBinarizer *self, EduStanfordNlpTreesTree *t, NSString *labelStr, NSString *finalCat, jint headNum, EduStanfordNlpLingTaggedWord *head, jint leftProcessed, NSString *leftStr, jint rightProcessed, NSString *rightStr);

@interface EduStanfordNlpParserLexparserTreeBinarizer_$Lambda$1 : NSObject < EduStanfordNlpTreesTreeReaderFactory >

- (id<EduStanfordNlpTreesTreeReader>)newTreeReaderWithJavaIoReader:(JavaIoReader *)inArg OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_STATIC_INIT(EduStanfordNlpParserLexparserTreeBinarizer_$Lambda$1)

inline EduStanfordNlpParserLexparserTreeBinarizer_$Lambda$1 *EduStanfordNlpParserLexparserTreeBinarizer_$Lambda$1_get_instance();
static EduStanfordNlpParserLexparserTreeBinarizer_$Lambda$1 *EduStanfordNlpParserLexparserTreeBinarizer_$Lambda$1_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpParserLexparserTreeBinarizer_$Lambda$1, instance, EduStanfordNlpParserLexparserTreeBinarizer_$Lambda$1 *)

__attribute__((unused)) static void EduStanfordNlpParserLexparserTreeBinarizer_$Lambda$1_init(EduStanfordNlpParserLexparserTreeBinarizer_$Lambda$1 *self);

__attribute__((unused)) static EduStanfordNlpParserLexparserTreeBinarizer_$Lambda$1 *new_EduStanfordNlpParserLexparserTreeBinarizer_$Lambda$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpParserLexparserTreeBinarizer_$Lambda$1 *create_EduStanfordNlpParserLexparserTreeBinarizer_$Lambda$1_init();

@implementation EduStanfordNlpParserLexparserTreeBinarizer

- (void)setDoSelectiveSplitWithBoolean:(jboolean)doSelectiveSplit {
  self->doSelectiveSplit_ = doSelectiveSplit;
  if (!doSelectiveSplit) {
    stateCounter_ = new_EduStanfordNlpStatsClassicCounter_init();
  }
}

+ (NSString *)joinWithJavaUtilList:(id<JavaUtilList>)treeList {
  return EduStanfordNlpParserLexparserTreeBinarizer_joinWithJavaUtilList_(treeList);
}

+ (void)localTreeStringWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
                         withJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                                           withInt:(jint)level {
  EduStanfordNlpParserLexparserTreeBinarizer_localTreeStringWithEduStanfordNlpTreesTree_withJavaLangStringBuilder_withInt_(t, sb, level);
}

+ (jboolean)isSyntheticWithNSString:(NSString *)label {
  return EduStanfordNlpParserLexparserTreeBinarizer_isSyntheticWithNSString_(label);
}

- (EduStanfordNlpTreesTree *)binarizeLocalTreeWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
                                                                  withInt:(jint)headNum
                                         withEduStanfordNlpLingTaggedWord:(EduStanfordNlpLingTaggedWord *)head {
  if (markovFactor_) {
    NSString *topCat = [((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(t)) label])) value];
    id<EduStanfordNlpLingLabel> newLabel = new_EduStanfordNlpLingCategoryWordTag_initWithNSString_withNSString_withNSString_(topCat, [((EduStanfordNlpLingTaggedWord *) nil_chk(head)) word], [head tag]);
    [t setLabelWithEduStanfordNlpLingLabel:newLabel];
    EduStanfordNlpTreesTree *t2;
    if (insideFactor_) {
      t2 = EduStanfordNlpParserLexparserTreeBinarizer_markovInsideBinarizeLocalTreeNewWithEduStanfordNlpTreesTree_withInt_withInt_withInt_withBoolean_(self, t, headNum, 0, [t numChildren] - 1, true);
    }
    else {
      t2 = EduStanfordNlpParserLexparserTreeBinarizer_markovOutsideBinarizeLocalTreeWithEduStanfordNlpTreesTree_withEduStanfordNlpLingTaggedWord_withInt_withNSString_withJavaUtilLinkedList_withBoolean_(self, t, head, headNum, topCat, new_JavaUtilLinkedList_init(), false);
    }
    return t2;
  }
  if (insideFactor_) {
    return EduStanfordNlpParserLexparserTreeBinarizer_insideBinarizeLocalTreeWithEduStanfordNlpTreesTree_withInt_withEduStanfordNlpLingTaggedWord_withInt_withInt_(self, t, headNum, head, 0, 0);
  }
  return EduStanfordNlpParserLexparserTreeBinarizer_outsideBinarizeLocalTreeWithEduStanfordNlpTreesTree_withNSString_withNSString_withInt_withEduStanfordNlpLingTaggedWord_withInt_withNSString_withInt_withNSString_(self, t, [((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(t)) label])) value], [((id<EduStanfordNlpLingLabel>) nil_chk([t label])) value], headNum, head, 0, @"", 0, @"");
}

- (EduStanfordNlpTreesTree *)markovOutsideBinarizeLocalTreeWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
                                                      withEduStanfordNlpLingTaggedWord:(EduStanfordNlpLingTaggedWord *)head
                                                                               withInt:(jint)headLoc
                                                                          withNSString:(NSString *)topCat
                                                                withJavaUtilLinkedList:(JavaUtilLinkedList *)ll
                                                                           withBoolean:(jboolean)doneLeft {
  return EduStanfordNlpParserLexparserTreeBinarizer_markovOutsideBinarizeLocalTreeWithEduStanfordNlpTreesTree_withEduStanfordNlpLingTaggedWord_withInt_withNSString_withJavaUtilLinkedList_withBoolean_(self, t, head, headLoc, topCat, ll, doneLeft);
}

- (EduStanfordNlpTreesTree *)markovInsideBinarizeLocalTreeNewWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
                                                                                 withInt:(jint)headLoc
                                                                                 withInt:(jint)left
                                                                                 withInt:(jint)right
                                                                             withBoolean:(jboolean)starting {
  return EduStanfordNlpParserLexparserTreeBinarizer_markovInsideBinarizeLocalTreeNewWithEduStanfordNlpTreesTree_withInt_withInt_withInt_withBoolean_(self, t, headLoc, left, right, starting);
}

- (id<EduStanfordNlpLingLabel>)makeSyntheticLabelWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
                                                                     withInt:(jint)left
                                                                     withInt:(jint)right
                                                                     withInt:(jint)headLoc
                                                                     withInt:(jint)markovOrder {
  return EduStanfordNlpParserLexparserTreeBinarizer_makeSyntheticLabelWithEduStanfordNlpTreesTree_withInt_withInt_withInt_withInt_(self, t, left, right, headLoc, markovOrder);
}

+ (id<EduStanfordNlpLingLabel>)makeSimpleSyntheticLabelWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t {
  return EduStanfordNlpParserLexparserTreeBinarizer_makeSimpleSyntheticLabelWithEduStanfordNlpTreesTree_(t);
}

+ (id<EduStanfordNlpLingLabel>)makeSyntheticLabel1WithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
                                                                      withInt:(jint)left
                                                                      withInt:(jint)right
                                                                      withInt:(jint)headLoc
                                                                      withInt:(jint)markovOrder {
  return EduStanfordNlpParserLexparserTreeBinarizer_makeSyntheticLabel1WithEduStanfordNlpTreesTree_withInt_withInt_withInt_withInt_(t, left, right, headLoc, markovOrder);
}

- (id<EduStanfordNlpLingLabel>)makeSyntheticLabel2WithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
                                                                      withInt:(jint)left
                                                                      withInt:(jint)right
                                                                      withInt:(jint)headLoc
                                                                      withInt:(jint)markovOrder {
  return EduStanfordNlpParserLexparserTreeBinarizer_makeSyntheticLabel2WithEduStanfordNlpTreesTree_withInt_withInt_withInt_withInt_(self, t, left, right, headLoc, markovOrder);
}

- (EduStanfordNlpTreesTree *)insideBinarizeLocalTreeWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
                                                                        withInt:(jint)headNum
                                               withEduStanfordNlpLingTaggedWord:(EduStanfordNlpLingTaggedWord *)head
                                                                        withInt:(jint)leftProcessed
                                                                        withInt:(jint)rightProcessed {
  return EduStanfordNlpParserLexparserTreeBinarizer_insideBinarizeLocalTreeWithEduStanfordNlpTreesTree_withInt_withEduStanfordNlpLingTaggedWord_withInt_withInt_(self, t, headNum, head, leftProcessed, rightProcessed);
}

- (EduStanfordNlpTreesTree *)outsideBinarizeLocalTreeWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
                                                                    withNSString:(NSString *)labelStr
                                                                    withNSString:(NSString *)finalCat
                                                                         withInt:(jint)headNum
                                                withEduStanfordNlpLingTaggedWord:(EduStanfordNlpLingTaggedWord *)head
                                                                         withInt:(jint)leftProcessed
                                                                    withNSString:(NSString *)leftStr
                                                                         withInt:(jint)rightProcessed
                                                                    withNSString:(NSString *)rightStr {
  return EduStanfordNlpParserLexparserTreeBinarizer_outsideBinarizeLocalTreeWithEduStanfordNlpTreesTree_withNSString_withNSString_withInt_withEduStanfordNlpLingTaggedWord_withInt_withNSString_withInt_withNSString_(self, t, labelStr, finalCat, headNum, head, leftProcessed, leftStr, rightProcessed, rightStr);
}

- (EduStanfordNlpTreesTree *)transformTreeWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t {
  if (t == nil) {
    return nil;
  }
  NSString *cat = [((id<EduStanfordNlpLingLabel>) nil_chk([t label])) value];
  if ([t isLeaf]) {
    id<EduStanfordNlpLingLabel> label = new_EduStanfordNlpLingWord_initWithNSString_(cat);
    return [((id<EduStanfordNlpTreesTreeFactory>) nil_chk(tf_)) newLeafWithEduStanfordNlpLingLabel:label];
  }
  if ([t isPreTerminal]) {
    EduStanfordNlpTreesTree *childResult = [self transformTreeWithEduStanfordNlpTreesTree:[t getChildWithInt:0]];
    NSString *word = [((EduStanfordNlpTreesTree *) nil_chk(childResult)) value];
    id<JavaUtilList> newChildren = new_JavaUtilArrayList_initWithInt_(1);
    [newChildren addWithId:childResult];
    return [((id<EduStanfordNlpTreesTreeFactory>) nil_chk(tf_)) newTreeNodeWithEduStanfordNlpLingLabel:new_EduStanfordNlpLingCategoryWordTag_initWithNSString_withNSString_withNSString_(cat, word, cat) withJavaUtilList:newChildren];
  }
  EduStanfordNlpTreesTree *headChild = [((id<EduStanfordNlpTreesHeadFinder>) nil_chk(hf_)) determineHeadWithEduStanfordNlpTreesTree:t];
  if (headChild == nil && ![((NSString *) nil_chk([((id<EduStanfordNlpLingLabel>) nil_chk([t label])) value])) hasPrefix:[((id<EduStanfordNlpTreesTreebankLanguagePack>) nil_chk(tlp_)) startSymbol]]) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"### No head found for:"];
    [t pennPrint];
  }
  jint headNum = -1;
  IOSObjectArray *kids = [t children];
  id<JavaUtilList> newChildren = new_JavaUtilArrayList_initWithInt_(((IOSObjectArray *) nil_chk(kids))->size_);
  for (jint childNum = 0; childNum < kids->size_; childNum++) {
    EduStanfordNlpTreesTree *child = IOSObjectArray_Get(kids, childNum);
    EduStanfordNlpTreesTree *childResult = [self transformTreeWithEduStanfordNlpTreesTree:child];
    if (child == headChild) {
      headNum = childNum;
    }
    [newChildren addWithId:childResult];
  }
  EduStanfordNlpTreesTree *result;
  if ([((NSString *) nil_chk([((id<EduStanfordNlpLingLabel>) nil_chk([t label])) value])) hasPrefix:[((id<EduStanfordNlpTreesTreebankLanguagePack>) nil_chk(tlp_)) startSymbol]]) {
    result = [((id<EduStanfordNlpTreesTreeFactory>) nil_chk(tf_)) newTreeNodeWithEduStanfordNlpLingLabel:[t label] withJavaUtilList:newChildren];
  }
  else {
    NSString *word = [((id<EduStanfordNlpLingHasWord>) nil_chk(((id<EduStanfordNlpLingHasWord>) cast_check([((EduStanfordNlpTreesTree *) nil_chk(headChild)) label], EduStanfordNlpLingHasWord_class_())))) word];
    NSString *tag = [((id<EduStanfordNlpLingHasTag>) nil_chk(((id<EduStanfordNlpLingHasTag>) cast_check([headChild label], EduStanfordNlpLingHasTag_class_())))) tag];
    id<EduStanfordNlpLingLabel> label = new_EduStanfordNlpLingCategoryWordTag_initWithNSString_withNSString_withNSString_(cat, word, tag);
    result = [((id<EduStanfordNlpTreesTreeFactory>) nil_chk(tf_)) newTreeNodeWithEduStanfordNlpLingLabel:label withJavaUtilList:newChildren];
    EduStanfordNlpLingTaggedWord *head = new_EduStanfordNlpLingTaggedWord_initWithNSString_withNSString_(word, tag);
    result = [self binarizeLocalTreeWithEduStanfordNlpTreesTree:result withInt:headNum withEduStanfordNlpLingTaggedWord:head];
  }
  return result;
}

+ (EduStanfordNlpParserLexparserTreeBinarizer *)simpleTreeBinarizerWithEduStanfordNlpTreesHeadFinder:(id<EduStanfordNlpTreesHeadFinder>)hf
                                                         withEduStanfordNlpTreesTreebankLanguagePack:(id<EduStanfordNlpTreesTreebankLanguagePack>)tlp {
  return EduStanfordNlpParserLexparserTreeBinarizer_simpleTreeBinarizerWithEduStanfordNlpTreesHeadFinder_withEduStanfordNlpTreesTreebankLanguagePack_(hf, tlp);
}

- (instancetype)initWithEduStanfordNlpTreesHeadFinder:(id<EduStanfordNlpTreesHeadFinder>)hf
          withEduStanfordNlpTreesTreebankLanguagePack:(id<EduStanfordNlpTreesTreebankLanguagePack>)tlp
                                          withBoolean:(jboolean)insideFactor
                                          withBoolean:(jboolean)markovFactor
                                              withInt:(jint)markovOrder
                                          withBoolean:(jboolean)useWrappingLabels
                                          withBoolean:(jboolean)unaryAtTop
                                           withDouble:(jdouble)selectiveSplitThreshold
                                          withBoolean:(jboolean)markFinalStates
                                          withBoolean:(jboolean)simpleLabels
                                          withBoolean:(jboolean)noRebinarization {
  EduStanfordNlpParserLexparserTreeBinarizer_initWithEduStanfordNlpTreesHeadFinder_withEduStanfordNlpTreesTreebankLanguagePack_withBoolean_withBoolean_withInt_withBoolean_withBoolean_withDouble_withBoolean_withBoolean_withBoolean_(self, hf, tlp, insideFactor, markovFactor, markovOrder, useWrappingLabels, unaryAtTop, selectiveSplitThreshold, markFinalStates, simpleLabels, noRebinarization);
  return self;
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  EduStanfordNlpParserLexparserTreeBinarizer_mainWithNSStringArray_(args);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 2, 3, -1, 4, -1, -1 },
    { NULL, "V", 0xa, 5, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0xc, 7, 8, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x0, 9, 10, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x2, 11, 12, -1, 13, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x2, 14, 15, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingLabel;", 0x2, 16, 17, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingLabel;", 0xa, 18, 19, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingLabel;", 0xa, 20, 17, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingLabel;", 0x2, 21, 17, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x2, 22, 23, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x2, 24, 25, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x1, 26, 19, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpParserLexparserTreeBinarizer;", 0x9, 27, 28, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 29, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 30, 31, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(setDoSelectiveSplitWithBoolean:);
  methods[1].selector = @selector(joinWithJavaUtilList:);
  methods[2].selector = @selector(localTreeStringWithEduStanfordNlpTreesTree:withJavaLangStringBuilder:withInt:);
  methods[3].selector = @selector(isSyntheticWithNSString:);
  methods[4].selector = @selector(binarizeLocalTreeWithEduStanfordNlpTreesTree:withInt:withEduStanfordNlpLingTaggedWord:);
  methods[5].selector = @selector(markovOutsideBinarizeLocalTreeWithEduStanfordNlpTreesTree:withEduStanfordNlpLingTaggedWord:withInt:withNSString:withJavaUtilLinkedList:withBoolean:);
  methods[6].selector = @selector(markovInsideBinarizeLocalTreeNewWithEduStanfordNlpTreesTree:withInt:withInt:withInt:withBoolean:);
  methods[7].selector = @selector(makeSyntheticLabelWithEduStanfordNlpTreesTree:withInt:withInt:withInt:withInt:);
  methods[8].selector = @selector(makeSimpleSyntheticLabelWithEduStanfordNlpTreesTree:);
  methods[9].selector = @selector(makeSyntheticLabel1WithEduStanfordNlpTreesTree:withInt:withInt:withInt:withInt:);
  methods[10].selector = @selector(makeSyntheticLabel2WithEduStanfordNlpTreesTree:withInt:withInt:withInt:withInt:);
  methods[11].selector = @selector(insideBinarizeLocalTreeWithEduStanfordNlpTreesTree:withInt:withEduStanfordNlpLingTaggedWord:withInt:withInt:);
  methods[12].selector = @selector(outsideBinarizeLocalTreeWithEduStanfordNlpTreesTree:withNSString:withNSString:withInt:withEduStanfordNlpLingTaggedWord:withInt:withNSString:withInt:withNSString:);
  methods[13].selector = @selector(transformTreeWithEduStanfordNlpTreesTree:);
  methods[14].selector = @selector(simpleTreeBinarizerWithEduStanfordNlpTreesHeadFinder:withEduStanfordNlpTreesTreebankLanguagePack:);
  methods[15].selector = @selector(initWithEduStanfordNlpTreesHeadFinder:withEduStanfordNlpTreesTreebankLanguagePack:withBoolean:withBoolean:withInt:withBoolean:withBoolean:withDouble:withBoolean:withBoolean:withBoolean:);
  methods[16].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DEBUG", "Z", .constantValue.asBOOL = EduStanfordNlpParserLexparserTreeBinarizer_DEBUG, 0x1a, -1, -1, -1, -1 },
    { "hf_", "LEduStanfordNlpTreesHeadFinder;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "tf_", "LEduStanfordNlpTreesTreeFactory;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "tlp_", "LEduStanfordNlpTreesTreebankLanguagePack;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "insideFactor_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "markovFactor_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "markovOrder_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "useWrappingLabels_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "selectiveSplitThreshold_", "D", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "markFinalStates_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "unaryAtTop_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "doSelectiveSplit_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "stateCounter_", "LEduStanfordNlpStatsClassicCounter;", .constantValue.asLong = 0, 0x2, -1, -1, 32, -1 },
    { "simpleLabels_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "noRebinarization_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setDoSelectiveSplit", "Z", "join", "LJavaUtilList;", "(Ljava/util/List<Ledu/stanford/nlp/trees/Tree;>;)Ljava/lang/String;", "localTreeString", "LEduStanfordNlpTreesTree;LJavaLangStringBuilder;I", "isSynthetic", "LNSString;", "binarizeLocalTree", "LEduStanfordNlpTreesTree;ILEduStanfordNlpLingTaggedWord;", "markovOutsideBinarizeLocalTree", "LEduStanfordNlpTreesTree;LEduStanfordNlpLingTaggedWord;ILNSString;LJavaUtilLinkedList;Z", "(Ledu/stanford/nlp/trees/Tree;Ledu/stanford/nlp/ling/TaggedWord;ILjava/lang/String;Ljava/util/LinkedList<Ledu/stanford/nlp/trees/Tree;>;Z)Ledu/stanford/nlp/trees/Tree;", "markovInsideBinarizeLocalTreeNew", "LEduStanfordNlpTreesTree;IIIZ", "makeSyntheticLabel", "LEduStanfordNlpTreesTree;IIII", "makeSimpleSyntheticLabel", "LEduStanfordNlpTreesTree;", "makeSyntheticLabel1", "makeSyntheticLabel2", "insideBinarizeLocalTree", "LEduStanfordNlpTreesTree;ILEduStanfordNlpLingTaggedWord;II", "outsideBinarizeLocalTree", "LEduStanfordNlpTreesTree;LNSString;LNSString;ILEduStanfordNlpLingTaggedWord;ILNSString;ILNSString;", "transformTree", "simpleTreeBinarizer", "LEduStanfordNlpTreesHeadFinder;LEduStanfordNlpTreesTreebankLanguagePack;", "LEduStanfordNlpTreesHeadFinder;LEduStanfordNlpTreesTreebankLanguagePack;ZZIZZDZZZ", "main", "[LNSString;", "Ledu/stanford/nlp/stats/ClassicCounter<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpParserLexparserTreeBinarizer = { "TreeBinarizer", "edu.stanford.nlp.parser.lexparser", ptrTable, methods, fields, 7, 0x1, 17, 15, -1, -1, -1, -1, -1 };
  return &_EduStanfordNlpParserLexparserTreeBinarizer;
}

@end

NSString *EduStanfordNlpParserLexparserTreeBinarizer_joinWithJavaUtilList_(id<JavaUtilList> treeList) {
  EduStanfordNlpParserLexparserTreeBinarizer_initialize();
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  for (id<JavaUtilIterator> i = [((id<JavaUtilList>) nil_chk(treeList)) iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
    EduStanfordNlpTreesTree *t = [i next];
    (void) [sb appendWithNSString:[((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(t)) label])) value]];
    if ([i hasNext]) {
      (void) [sb appendWithNSString:@" "];
    }
  }
  return [sb description];
}

void EduStanfordNlpParserLexparserTreeBinarizer_localTreeStringWithEduStanfordNlpTreesTree_withJavaLangStringBuilder_withInt_(EduStanfordNlpTreesTree *t, JavaLangStringBuilder *sb, jint level) {
  EduStanfordNlpParserLexparserTreeBinarizer_initialize();
  (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\n"];
  for (jint i = 0; i < level; i++) {
    (void) [sb appendWithNSString:@"  "];
  }
  (void) [((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"("])) appendWithId:[((EduStanfordNlpTreesTree *) nil_chk(t)) label]];
  if (level == 0 || EduStanfordNlpParserLexparserTreeBinarizer_isSyntheticWithNSString_([((id<EduStanfordNlpLingLabel>) nil_chk([t label])) value])) {
    for (jint c = 0; c < [t numChildren]; c++) {
      EduStanfordNlpParserLexparserTreeBinarizer_localTreeStringWithEduStanfordNlpTreesTree_withJavaLangStringBuilder_withInt_([t getChildWithInt:c], sb, level + 1);
    }
  }
  (void) [sb appendWithNSString:@")"];
}

jboolean EduStanfordNlpParserLexparserTreeBinarizer_isSyntheticWithNSString_(NSString *label) {
  EduStanfordNlpParserLexparserTreeBinarizer_initialize();
  return [((NSString *) nil_chk(label)) indexOf:'@'] > -1;
}

EduStanfordNlpTreesTree *EduStanfordNlpParserLexparserTreeBinarizer_markovOutsideBinarizeLocalTreeWithEduStanfordNlpTreesTree_withEduStanfordNlpLingTaggedWord_withInt_withNSString_withJavaUtilLinkedList_withBoolean_(EduStanfordNlpParserLexparserTreeBinarizer *self, EduStanfordNlpTreesTree *t, EduStanfordNlpLingTaggedWord *head, jint headLoc, NSString *topCat, JavaUtilLinkedList *ll, jboolean doneLeft) {
  NSString *word = [((EduStanfordNlpLingTaggedWord *) nil_chk(head)) word];
  NSString *tag = [head tag];
  id<JavaUtilList> newChildren = new_JavaUtilArrayList_initWithInt_(2);
  if (headLoc == 0) {
    if (!doneLeft) {
      if ([((id<EduStanfordNlpTreesTreebankLanguagePack>) nil_chk(self->tlp_)) isStartSymbolWithNSString:topCat]) {
        return EduStanfordNlpParserLexparserTreeBinarizer_markovOutsideBinarizeLocalTreeWithEduStanfordNlpTreesTree_withEduStanfordNlpLingTaggedWord_withInt_withNSString_withJavaUtilLinkedList_withBoolean_(self, t, head, headLoc, topCat, new_JavaUtilLinkedList_init(), true);
      }
      NSString *subLabelStr;
      if (self->simpleLabels_) {
        subLabelStr = JreStrcat("C$", '@', topCat);
      }
      else {
        NSString *headStr = [((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(t)) getChildWithInt:headLoc])) label])) value];
        subLabelStr = JreStrcat("C$$$$", '@', topCat, @": ", headStr, @" ]");
      }
      id<EduStanfordNlpLingLabel> subLabel = new_EduStanfordNlpLingCategoryWordTag_initWithNSString_withNSString_withNSString_(subLabelStr, word, tag);
      EduStanfordNlpTreesTree *subTree = [((id<EduStanfordNlpTreesTreeFactory>) nil_chk(self->tf_)) newTreeNodeWithEduStanfordNlpLingLabel:subLabel withJavaUtilList:[((EduStanfordNlpTreesTree *) nil_chk(t)) getChildrenAsList]];
      [newChildren addWithId:EduStanfordNlpParserLexparserTreeBinarizer_markovOutsideBinarizeLocalTreeWithEduStanfordNlpTreesTree_withEduStanfordNlpLingTaggedWord_withInt_withNSString_withJavaUtilLinkedList_withBoolean_(self, subTree, head, headLoc, topCat, new_JavaUtilLinkedList_init(), true)];
      return [((id<EduStanfordNlpTreesTreeFactory>) nil_chk(self->tf_)) newTreeNodeWithEduStanfordNlpLingLabel:[t label] withJavaUtilList:newChildren];
    }
    jint len = [((EduStanfordNlpTreesTree *) nil_chk(t)) numChildren];
    if (len == 1) {
      return [((id<EduStanfordNlpTreesTreeFactory>) nil_chk(self->tf_)) newTreeNodeWithEduStanfordNlpLingLabel:[t label] withJavaUtilList:JavaUtilCollections_singletonListWithId_([t getChildWithInt:0])];
    }
    [((JavaUtilLinkedList *) nil_chk(ll)) addFirstWithId:[t getChildWithInt:len - 1]];
    if ([ll size] > self->markovOrder_) {
      (void) [ll removeLast];
    }
    NSString *subLabelStr;
    if (self->simpleLabels_) {
      subLabelStr = JreStrcat("C$", '@', topCat);
    }
    else {
      NSString *headStr = [((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk([t getChildWithInt:headLoc])) label])) value];
      NSString *rightStr = JreStrcat("$$", (len > self->markovOrder_ - 1 ? @"... " : @""), EduStanfordNlpParserLexparserTreeBinarizer_joinWithJavaUtilList_(ll));
      subLabelStr = JreStrcat("C$$$C$", '@', topCat, @": ", headStr, ' ', rightStr);
    }
    id<EduStanfordNlpLingLabel> subLabel = new_EduStanfordNlpLingCategoryWordTag_initWithNSString_withNSString_withNSString_(subLabelStr, word, tag);
    EduStanfordNlpTreesTree *subTree = [((id<EduStanfordNlpTreesTreeFactory>) nil_chk(self->tf_)) newTreeNodeWithEduStanfordNlpLingLabel:subLabel withJavaUtilList:[((id<JavaUtilList>) nil_chk([t getChildrenAsList])) subListWithInt:0 withInt:len - 1]];
    [newChildren addWithId:EduStanfordNlpParserLexparserTreeBinarizer_markovOutsideBinarizeLocalTreeWithEduStanfordNlpTreesTree_withEduStanfordNlpLingTaggedWord_withInt_withNSString_withJavaUtilLinkedList_withBoolean_(self, subTree, head, headLoc, topCat, ll, true)];
    [newChildren addWithId:[t getChildWithInt:len - 1]];
    return [((id<EduStanfordNlpTreesTreeFactory>) nil_chk(self->tf_)) newTreeNodeWithEduStanfordNlpLingLabel:[t label] withJavaUtilList:newChildren];
  }
  if (headLoc > 0) {
    [((JavaUtilLinkedList *) nil_chk(ll)) addLastWithId:[((EduStanfordNlpTreesTree *) nil_chk(t)) getChildWithInt:0]];
    if ([ll size] > self->markovOrder_) {
      (void) [ll removeFirst];
    }
    NSString *subLabelStr;
    if (self->simpleLabels_) {
      subLabelStr = JreStrcat("C$", '@', topCat);
    }
    else {
      NSString *headStr = [((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk([t getChildWithInt:headLoc])) label])) value];
      NSString *leftStr = JreStrcat("$$", EduStanfordNlpParserLexparserTreeBinarizer_joinWithJavaUtilList_(ll), (headLoc > self->markovOrder_ - 1 ? @" ..." : @""));
      subLabelStr = JreStrcat("C$$$C$$", '@', topCat, @": ", leftStr, ' ', headStr, @" ]");
    }
    id<EduStanfordNlpLingLabel> subLabel = new_EduStanfordNlpLingCategoryWordTag_initWithNSString_withNSString_withNSString_(subLabelStr, word, tag);
    EduStanfordNlpTreesTree *subTree = [((id<EduStanfordNlpTreesTreeFactory>) nil_chk(self->tf_)) newTreeNodeWithEduStanfordNlpLingLabel:subLabel withJavaUtilList:[((id<JavaUtilList>) nil_chk([t getChildrenAsList])) subListWithInt:1 withInt:[t numChildren]]];
    [newChildren addWithId:[t getChildWithInt:0]];
    [newChildren addWithId:EduStanfordNlpParserLexparserTreeBinarizer_markovOutsideBinarizeLocalTreeWithEduStanfordNlpTreesTree_withEduStanfordNlpLingTaggedWord_withInt_withNSString_withJavaUtilLinkedList_withBoolean_(self, subTree, head, headLoc - 1, topCat, ll, false)];
    return [((id<EduStanfordNlpTreesTreeFactory>) nil_chk(self->tf_)) newTreeNodeWithEduStanfordNlpLingLabel:[t label] withJavaUtilList:newChildren];
  }
  return t;
}

EduStanfordNlpTreesTree *EduStanfordNlpParserLexparserTreeBinarizer_markovInsideBinarizeLocalTreeNewWithEduStanfordNlpTreesTree_withInt_withInt_withInt_withBoolean_(EduStanfordNlpParserLexparserTreeBinarizer *self, EduStanfordNlpTreesTree *t, jint headLoc, jint left, jint right, jboolean starting) {
  EduStanfordNlpTreesTree *result;
  IOSObjectArray *children = [((EduStanfordNlpTreesTree *) nil_chk(t)) children];
  if (starting) {
    if (left == headLoc && right == headLoc) {
      return t;
    }
    if (self->noRebinarization_ && ((IOSObjectArray *) nil_chk(children))->size_ == 2) {
      return t;
    }
    if (self->unaryAtTop_) {
      result = [((id<EduStanfordNlpTreesTreeFactory>) nil_chk(self->tf_)) newTreeNodeWithEduStanfordNlpLingLabel:[t label] withJavaUtilList:JavaUtilCollections_singletonListWithId_(EduStanfordNlpParserLexparserTreeBinarizer_markovInsideBinarizeLocalTreeNewWithEduStanfordNlpTreesTree_withInt_withInt_withInt_withBoolean_(self, t, headLoc, left, right, false))];
      return result;
    }
  }
  id<JavaUtilList> newChildren = nil;
  if (left == headLoc && right == headLoc) {
    newChildren = JavaUtilCollections_singletonListWithId_(IOSObjectArray_Get(nil_chk(children), headLoc));
  }
  else if (left < headLoc) {
    newChildren = new_JavaUtilArrayList_initWithInt_(2);
    [newChildren addWithId:IOSObjectArray_Get(nil_chk(children), left)];
    [newChildren addWithId:EduStanfordNlpParserLexparserTreeBinarizer_markovInsideBinarizeLocalTreeNewWithEduStanfordNlpTreesTree_withInt_withInt_withInt_withBoolean_(self, t, headLoc, left + 1, right, false)];
  }
  else if (right > headLoc) {
    newChildren = new_JavaUtilArrayList_initWithInt_(2);
    [newChildren addWithId:EduStanfordNlpParserLexparserTreeBinarizer_markovInsideBinarizeLocalTreeNewWithEduStanfordNlpTreesTree_withInt_withInt_withInt_withBoolean_(self, t, headLoc, left, right - 1, false)];
    [newChildren addWithId:IOSObjectArray_Get(nil_chk(children), right)];
  }
  else {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"UHOH, bad parameters passed to markovInsideBinarizeLocalTree"];
  }
  id<EduStanfordNlpLingLabel> label;
  if (starting) {
    label = [t label];
  }
  else {
    label = EduStanfordNlpParserLexparserTreeBinarizer_makeSyntheticLabelWithEduStanfordNlpTreesTree_withInt_withInt_withInt_withInt_(self, t, left, right, headLoc, self->markovOrder_);
  }
  if (self->doSelectiveSplit_) {
    jdouble stateCount = [((EduStanfordNlpStatsClassicCounter *) nil_chk(self->stateCounter_)) getCountWithId:[((id<EduStanfordNlpLingLabel>) nil_chk(label)) value]];
    if (stateCount < self->selectiveSplitThreshold_) {
      if (starting && !self->unaryAtTop_) {
        label = [t label];
      }
      else {
        label = EduStanfordNlpParserLexparserTreeBinarizer_makeSyntheticLabelWithEduStanfordNlpTreesTree_withInt_withInt_withInt_withInt_(self, t, left, right, headLoc, self->markovOrder_ - 1);
      }
    }
  }
  else {
    [((EduStanfordNlpStatsClassicCounter *) nil_chk(self->stateCounter_)) incrementCountWithId:[((id<EduStanfordNlpLingLabel>) nil_chk(label)) value] withDouble:1.0];
  }
  result = [((id<EduStanfordNlpTreesTreeFactory>) nil_chk(self->tf_)) newTreeNodeWithEduStanfordNlpLingLabel:label withJavaUtilList:newChildren];
  return result;
}

id<EduStanfordNlpLingLabel> EduStanfordNlpParserLexparserTreeBinarizer_makeSyntheticLabelWithEduStanfordNlpTreesTree_withInt_withInt_withInt_withInt_(EduStanfordNlpParserLexparserTreeBinarizer *self, EduStanfordNlpTreesTree *t, jint left, jint right, jint headLoc, jint markovOrder) {
  id<EduStanfordNlpLingLabel> result;
  if (self->simpleLabels_) {
    result = EduStanfordNlpParserLexparserTreeBinarizer_makeSimpleSyntheticLabelWithEduStanfordNlpTreesTree_(t);
  }
  else if (self->useWrappingLabels_) {
    result = EduStanfordNlpParserLexparserTreeBinarizer_makeSyntheticLabel2WithEduStanfordNlpTreesTree_withInt_withInt_withInt_withInt_(self, t, left, right, headLoc, markovOrder);
  }
  else {
    result = EduStanfordNlpParserLexparserTreeBinarizer_makeSyntheticLabel1WithEduStanfordNlpTreesTree_withInt_withInt_withInt_withInt_(t, left, right, headLoc, markovOrder);
  }
  return result;
}

id<EduStanfordNlpLingLabel> EduStanfordNlpParserLexparserTreeBinarizer_makeSimpleSyntheticLabelWithEduStanfordNlpTreesTree_(EduStanfordNlpTreesTree *t) {
  EduStanfordNlpParserLexparserTreeBinarizer_initialize();
  NSString *topCat = [((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(t)) label])) value];
  NSString *labelStr = JreStrcat("C$", '@', topCat);
  NSString *word = [((id<EduStanfordNlpLingHasWord>) nil_chk(((id<EduStanfordNlpLingHasWord>) cast_check([t label], EduStanfordNlpLingHasWord_class_())))) word];
  NSString *tag = [((id<EduStanfordNlpLingHasTag>) nil_chk(((id<EduStanfordNlpLingHasTag>) cast_check([t label], EduStanfordNlpLingHasTag_class_())))) tag];
  return new_EduStanfordNlpLingCategoryWordTag_initWithNSString_withNSString_withNSString_(labelStr, word, tag);
}

id<EduStanfordNlpLingLabel> EduStanfordNlpParserLexparserTreeBinarizer_makeSyntheticLabel1WithEduStanfordNlpTreesTree_withInt_withInt_withInt_withInt_(EduStanfordNlpTreesTree *t, jint left, jint right, jint headLoc, jint markovOrder) {
  EduStanfordNlpParserLexparserTreeBinarizer_initialize();
  NSString *topCat = [((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(t)) label])) value];
  IOSObjectArray *children = [t children];
  NSString *leftString;
  if (left == 0) {
    leftString = @"[ ";
  }
  else {
    leftString = @" ";
  }
  NSString *rightString;
  if (right == ((IOSObjectArray *) nil_chk(children))->size_ - 1) {
    rightString = @" ]";
  }
  else {
    rightString = @" ";
  }
  for (jint i = 0; i < markovOrder; i++) {
    if (left < headLoc) {
      leftString = JreStrcat("$$C", leftString, [((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(IOSObjectArray_Get(children, left))) label])) value], ' ');
      left++;
    }
    else if (right > headLoc) {
      rightString = JreStrcat("C$$", ' ', [((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(IOSObjectArray_Get(children, right))) label])) value], rightString);
      right--;
    }
    else {
      break;
    }
  }
  if (right > headLoc) {
    rightString = JreStrcat("$$", @"...", rightString);
  }
  if (left < headLoc) {
    leftString = JreStrcat("$$", leftString, @"...");
  }
  NSString *labelStr = JreStrcat("C$$$C$C$", '@', topCat, @"| ", leftString, '[', [((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk([t getChildWithInt:headLoc])) label])) value], ']', rightString);
  NSString *word = [((id<EduStanfordNlpLingHasWord>) nil_chk(((id<EduStanfordNlpLingHasWord>) cast_check([t label], EduStanfordNlpLingHasWord_class_())))) word];
  NSString *tag = [((id<EduStanfordNlpLingHasTag>) nil_chk(((id<EduStanfordNlpLingHasTag>) cast_check([t label], EduStanfordNlpLingHasTag_class_())))) tag];
  return new_EduStanfordNlpLingCategoryWordTag_initWithNSString_withNSString_withNSString_(labelStr, word, tag);
}

id<EduStanfordNlpLingLabel> EduStanfordNlpParserLexparserTreeBinarizer_makeSyntheticLabel2WithEduStanfordNlpTreesTree_withInt_withInt_withInt_withInt_(EduStanfordNlpParserLexparserTreeBinarizer *self, EduStanfordNlpTreesTree *t, jint left, jint right, jint headLoc, jint markovOrder) {
  NSString *topCat = [((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(t)) label])) value];
  IOSObjectArray *children = [t children];
  NSString *finalPiece;
  jint i = 0;
  if (self->markFinalStates_) {
    if (headLoc != 0 && left == 0) {
      finalPiece = JreStrcat("C$C", ' ', [((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(IOSObjectArray_Get(nil_chk(children), left))) label])) value], '[');
      left++;
      i++;
    }
    else if (headLoc == 0 && right > headLoc && right == ((IOSObjectArray *) nil_chk(children))->size_ - 1) {
      finalPiece = JreStrcat("C$C", ' ', [((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(IOSObjectArray_Get(nil_chk(children), right))) label])) value], ']');
      right--;
      i++;
    }
    else {
      finalPiece = @"";
    }
  }
  else {
    finalPiece = @"";
  }
  NSString *middlePiece = @"";
  for (; i < markovOrder; i++) {
    if (left < headLoc) {
      middlePiece = JreStrcat("C$C$", ' ', [((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(IOSObjectArray_Get(nil_chk(children), left))) label])) value], '<', middlePiece);
      left++;
    }
    else if (right > headLoc) {
      middlePiece = JreStrcat("C$C$", ' ', [((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(IOSObjectArray_Get(nil_chk(children), right))) label])) value], '>', middlePiece);
      right--;
    }
    else {
      break;
    }
  }
  if (right > headLoc || left < headLoc) {
    middlePiece = JreStrcat("$$", @" ...", middlePiece);
  }
  NSString *headStr = [((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk([t getChildWithInt:headLoc])) label])) value];
  jint leng = 1 + 2 + 1 + ((jint) [((NSString *) nil_chk(topCat)) length]) + ((jint) [((NSString *) nil_chk(headStr)) length]) + ((jint) [middlePiece length]) + ((jint) [finalPiece length]);
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_initWithInt_(leng);
  (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"@"])) appendWithNSString:topCat])) appendWithNSString:@"| "])) appendWithNSString:headStr])) appendWithNSString:@"_"])) appendWithNSString:middlePiece])) appendWithNSString:finalPiece];
  NSString *labelStr = [sb description];
  NSString *word = [((id<EduStanfordNlpLingHasWord>) nil_chk(((id<EduStanfordNlpLingHasWord>) cast_check([t label], EduStanfordNlpLingHasWord_class_())))) word];
  NSString *tag = [((id<EduStanfordNlpLingHasTag>) nil_chk(((id<EduStanfordNlpLingHasTag>) cast_check([t label], EduStanfordNlpLingHasTag_class_())))) tag];
  return new_EduStanfordNlpLingCategoryWordTag_initWithNSString_withNSString_withNSString_(labelStr, word, tag);
}

EduStanfordNlpTreesTree *EduStanfordNlpParserLexparserTreeBinarizer_insideBinarizeLocalTreeWithEduStanfordNlpTreesTree_withInt_withEduStanfordNlpLingTaggedWord_withInt_withInt_(EduStanfordNlpParserLexparserTreeBinarizer *self, EduStanfordNlpTreesTree *t, jint headNum, EduStanfordNlpLingTaggedWord *head, jint leftProcessed, jint rightProcessed) {
  NSString *word = [((EduStanfordNlpLingTaggedWord *) nil_chk(head)) word];
  NSString *tag = [head tag];
  id<JavaUtilList> newChildren = new_JavaUtilArrayList_initWithInt_(2);
  if ([((EduStanfordNlpTreesTree *) nil_chk(t)) numChildren] <= leftProcessed + rightProcessed + 2) {
    EduStanfordNlpTreesTree *leftChild = [t getChildWithInt:leftProcessed];
    [newChildren addWithId:leftChild];
    if ([t numChildren] == leftProcessed + rightProcessed + 1) {
      NSString *finalCat = [((id<EduStanfordNlpLingLabel>) nil_chk([t label])) value];
      return [((id<EduStanfordNlpTreesTreeFactory>) nil_chk(self->tf_)) newTreeNodeWithEduStanfordNlpLingLabel:new_EduStanfordNlpLingCategoryWordTag_initWithNSString_withNSString_withNSString_(finalCat, word, tag) withJavaUtilList:newChildren];
    }
    EduStanfordNlpTreesTree *rightChild = [t getChildWithInt:leftProcessed + 1];
    [newChildren addWithId:rightChild];
    NSString *labelStr = [((id<EduStanfordNlpLingLabel>) nil_chk([t label])) value];
    if (leftProcessed != 0 || rightProcessed != 0) {
      labelStr = (JreStrcat("$$C$", @"@ ", [((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(leftChild)) label])) value], ' ', [((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(rightChild)) label])) value]));
    }
    return [((id<EduStanfordNlpTreesTreeFactory>) nil_chk(self->tf_)) newTreeNodeWithEduStanfordNlpLingLabel:new_EduStanfordNlpLingCategoryWordTag_initWithNSString_withNSString_withNSString_(labelStr, word, tag) withJavaUtilList:newChildren];
  }
  if (headNum > leftProcessed) {
    EduStanfordNlpTreesTree *leftChild = [t getChildWithInt:leftProcessed];
    EduStanfordNlpTreesTree *rightChild = EduStanfordNlpParserLexparserTreeBinarizer_insideBinarizeLocalTreeWithEduStanfordNlpTreesTree_withInt_withEduStanfordNlpLingTaggedWord_withInt_withInt_(self, t, headNum, head, leftProcessed + 1, rightProcessed);
    [newChildren addWithId:leftChild];
    [newChildren addWithId:rightChild];
    NSString *labelStr = (JreStrcat("$$C$", @"@ ", [((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(leftChild)) label])) value], ' ', [((NSString *) nil_chk([((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(rightChild)) label])) value])) substring:2]));
    if (leftProcessed == 0 && rightProcessed == 0) {
      labelStr = [((id<EduStanfordNlpLingLabel>) nil_chk([t label])) value];
    }
    return [((id<EduStanfordNlpTreesTreeFactory>) nil_chk(self->tf_)) newTreeNodeWithEduStanfordNlpLingLabel:new_EduStanfordNlpLingCategoryWordTag_initWithNSString_withNSString_withNSString_(labelStr, word, tag) withJavaUtilList:newChildren];
  }
  else {
    EduStanfordNlpTreesTree *leftChild = EduStanfordNlpParserLexparserTreeBinarizer_insideBinarizeLocalTreeWithEduStanfordNlpTreesTree_withInt_withEduStanfordNlpLingTaggedWord_withInt_withInt_(self, t, headNum, head, leftProcessed, rightProcessed + 1);
    EduStanfordNlpTreesTree *rightChild = [t getChildWithInt:[t numChildren] - rightProcessed - 1];
    [newChildren addWithId:leftChild];
    [newChildren addWithId:rightChild];
    NSString *labelStr = (JreStrcat("$$C$", @"@ ", [((NSString *) nil_chk([((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(leftChild)) label])) value])) substring:2], ' ', [((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(rightChild)) label])) value]));
    if (leftProcessed == 0 && rightProcessed == 0) {
      labelStr = [((id<EduStanfordNlpLingLabel>) nil_chk([t label])) value];
    }
    return [((id<EduStanfordNlpTreesTreeFactory>) nil_chk(self->tf_)) newTreeNodeWithEduStanfordNlpLingLabel:new_EduStanfordNlpLingCategoryWordTag_initWithNSString_withNSString_withNSString_(labelStr, word, tag) withJavaUtilList:newChildren];
  }
}

EduStanfordNlpTreesTree *EduStanfordNlpParserLexparserTreeBinarizer_outsideBinarizeLocalTreeWithEduStanfordNlpTreesTree_withNSString_withNSString_withInt_withEduStanfordNlpLingTaggedWord_withInt_withNSString_withInt_withNSString_(EduStanfordNlpParserLexparserTreeBinarizer *self, EduStanfordNlpTreesTree *t, NSString *labelStr, NSString *finalCat, jint headNum, EduStanfordNlpLingTaggedWord *head, jint leftProcessed, NSString *leftStr, jint rightProcessed, NSString *rightStr) {
  id<JavaUtilList> newChildren = new_JavaUtilArrayList_initWithInt_(2);
  id<EduStanfordNlpLingLabel> label = new_EduStanfordNlpLingCategoryWordTag_initWithNSString_withNSString_withNSString_(labelStr, [((EduStanfordNlpLingTaggedWord *) nil_chk(head)) word], [head tag]);
  if ([((EduStanfordNlpTreesTree *) nil_chk(t)) numChildren] - leftProcessed - rightProcessed <= 2) {
    [newChildren addWithId:[t getChildWithInt:leftProcessed]];
    if ([t numChildren] - leftProcessed - rightProcessed == 2) {
      [newChildren addWithId:[t getChildWithInt:leftProcessed + 1]];
    }
    return [((id<EduStanfordNlpTreesTreeFactory>) nil_chk(self->tf_)) newTreeNodeWithEduStanfordNlpLingLabel:label withJavaUtilList:newChildren];
  }
  if (headNum > leftProcessed) {
    EduStanfordNlpTreesTree *leftChild = [t getChildWithInt:leftProcessed];
    NSString *childLeftStr = JreStrcat("$C$", leftStr, ' ', [((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(leftChild)) label])) value]);
    NSString *childLabelStr;
    if (self->simpleLabels_) {
      childLabelStr = JreStrcat("C$", '@', finalCat);
    }
    else {
      childLabelStr = JreStrcat("C$$$$$", '@', finalCat, @" :", childLeftStr, @" ...", rightStr);
    }
    EduStanfordNlpTreesTree *rightChild = EduStanfordNlpParserLexparserTreeBinarizer_outsideBinarizeLocalTreeWithEduStanfordNlpTreesTree_withNSString_withNSString_withInt_withEduStanfordNlpLingTaggedWord_withInt_withNSString_withInt_withNSString_(self, t, childLabelStr, finalCat, headNum, head, leftProcessed + 1, childLeftStr, rightProcessed, rightStr);
    [newChildren addWithId:leftChild];
    [newChildren addWithId:rightChild];
    return [((id<EduStanfordNlpTreesTreeFactory>) nil_chk(self->tf_)) newTreeNodeWithEduStanfordNlpLingLabel:label withJavaUtilList:newChildren];
  }
  else {
    EduStanfordNlpTreesTree *rightChild = [t getChildWithInt:[t numChildren] - rightProcessed - 1];
    NSString *childRightStr = JreStrcat("C$$", ' ', [((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(rightChild)) label])) value], rightStr);
    NSString *childLabelStr;
    if (self->simpleLabels_) {
      childLabelStr = JreStrcat("C$", '@', finalCat);
    }
    else {
      childLabelStr = JreStrcat("C$$$$$", '@', finalCat, @" :", leftStr, @" ...", childRightStr);
    }
    EduStanfordNlpTreesTree *leftChild = EduStanfordNlpParserLexparserTreeBinarizer_outsideBinarizeLocalTreeWithEduStanfordNlpTreesTree_withNSString_withNSString_withInt_withEduStanfordNlpLingTaggedWord_withInt_withNSString_withInt_withNSString_(self, t, childLabelStr, finalCat, headNum, head, leftProcessed, leftStr, rightProcessed + 1, childRightStr);
    [newChildren addWithId:leftChild];
    [newChildren addWithId:rightChild];
    return [((id<EduStanfordNlpTreesTreeFactory>) nil_chk(self->tf_)) newTreeNodeWithEduStanfordNlpLingLabel:label withJavaUtilList:newChildren];
  }
}

EduStanfordNlpParserLexparserTreeBinarizer *EduStanfordNlpParserLexparserTreeBinarizer_simpleTreeBinarizerWithEduStanfordNlpTreesHeadFinder_withEduStanfordNlpTreesTreebankLanguagePack_(id<EduStanfordNlpTreesHeadFinder> hf, id<EduStanfordNlpTreesTreebankLanguagePack> tlp) {
  EduStanfordNlpParserLexparserTreeBinarizer_initialize();
  return new_EduStanfordNlpParserLexparserTreeBinarizer_initWithEduStanfordNlpTreesHeadFinder_withEduStanfordNlpTreesTreebankLanguagePack_withBoolean_withBoolean_withInt_withBoolean_withBoolean_withDouble_withBoolean_withBoolean_withBoolean_(hf, tlp, false, false, 0, false, false, 0.0, false, true, true);
}

void EduStanfordNlpParserLexparserTreeBinarizer_initWithEduStanfordNlpTreesHeadFinder_withEduStanfordNlpTreesTreebankLanguagePack_withBoolean_withBoolean_withInt_withBoolean_withBoolean_withDouble_withBoolean_withBoolean_withBoolean_(EduStanfordNlpParserLexparserTreeBinarizer *self, id<EduStanfordNlpTreesHeadFinder> hf, id<EduStanfordNlpTreesTreebankLanguagePack> tlp, jboolean insideFactor, jboolean markovFactor, jint markovOrder, jboolean useWrappingLabels, jboolean unaryAtTop, jdouble selectiveSplitThreshold, jboolean markFinalStates, jboolean simpleLabels, jboolean noRebinarization) {
  NSObject_init(self);
  self->doSelectiveSplit_ = false;
  self->stateCounter_ = new_EduStanfordNlpStatsClassicCounter_init();
  self->hf_ = hf;
  self->tlp_ = tlp;
  self->tf_ = new_EduStanfordNlpTreesLabeledScoredTreeFactory_initWithEduStanfordNlpLingLabelFactory_(new_EduStanfordNlpLingCategoryWordTagFactory_init());
  self->insideFactor_ = insideFactor;
  self->markovFactor_ = markovFactor;
  self->markovOrder_ = markovOrder;
  self->useWrappingLabels_ = useWrappingLabels;
  self->unaryAtTop_ = unaryAtTop;
  self->selectiveSplitThreshold_ = selectiveSplitThreshold;
  self->markFinalStates_ = markFinalStates;
  self->simpleLabels_ = simpleLabels;
  self->noRebinarization_ = noRebinarization;
}

EduStanfordNlpParserLexparserTreeBinarizer *new_EduStanfordNlpParserLexparserTreeBinarizer_initWithEduStanfordNlpTreesHeadFinder_withEduStanfordNlpTreesTreebankLanguagePack_withBoolean_withBoolean_withInt_withBoolean_withBoolean_withDouble_withBoolean_withBoolean_withBoolean_(id<EduStanfordNlpTreesHeadFinder> hf, id<EduStanfordNlpTreesTreebankLanguagePack> tlp, jboolean insideFactor, jboolean markovFactor, jint markovOrder, jboolean useWrappingLabels, jboolean unaryAtTop, jdouble selectiveSplitThreshold, jboolean markFinalStates, jboolean simpleLabels, jboolean noRebinarization) {
  J2OBJC_NEW_IMPL(EduStanfordNlpParserLexparserTreeBinarizer, initWithEduStanfordNlpTreesHeadFinder_withEduStanfordNlpTreesTreebankLanguagePack_withBoolean_withBoolean_withInt_withBoolean_withBoolean_withDouble_withBoolean_withBoolean_withBoolean_, hf, tlp, insideFactor, markovFactor, markovOrder, useWrappingLabels, unaryAtTop, selectiveSplitThreshold, markFinalStates, simpleLabels, noRebinarization)
}

EduStanfordNlpParserLexparserTreeBinarizer *create_EduStanfordNlpParserLexparserTreeBinarizer_initWithEduStanfordNlpTreesHeadFinder_withEduStanfordNlpTreesTreebankLanguagePack_withBoolean_withBoolean_withInt_withBoolean_withBoolean_withDouble_withBoolean_withBoolean_withBoolean_(id<EduStanfordNlpTreesHeadFinder> hf, id<EduStanfordNlpTreesTreebankLanguagePack> tlp, jboolean insideFactor, jboolean markovFactor, jint markovOrder, jboolean useWrappingLabels, jboolean unaryAtTop, jdouble selectiveSplitThreshold, jboolean markFinalStates, jboolean simpleLabels, jboolean noRebinarization) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpParserLexparserTreeBinarizer, initWithEduStanfordNlpTreesHeadFinder_withEduStanfordNlpTreesTreebankLanguagePack_withBoolean_withBoolean_withInt_withBoolean_withBoolean_withDouble_withBoolean_withBoolean_withBoolean_, hf, tlp, insideFactor, markovFactor, markovOrder, useWrappingLabels, unaryAtTop, selectiveSplitThreshold, markFinalStates, simpleLabels, noRebinarization)
}

void EduStanfordNlpParserLexparserTreeBinarizer_mainWithNSStringArray_(IOSObjectArray *args) {
  EduStanfordNlpParserLexparserTreeBinarizer_initialize();
  id<EduStanfordNlpParserLexparserTreebankLangParserParams> tlpp = nil;
  id<EduStanfordNlpTreesTreeReaderFactory> trf = JreLoadStatic(EduStanfordNlpParserLexparserTreeBinarizer_$Lambda$1, instance);
  NSString *fileExt = @"mrg";
  id<EduStanfordNlpTreesHeadFinder> hf = new_EduStanfordNlpTreesModCollinsHeadFinder_init();
  id<EduStanfordNlpTreesTreebankLanguagePack> tlp = new_EduStanfordNlpTreesPennTreebankLanguagePack_init();
  jboolean insideFactor = false;
  jboolean mf = false;
  jint mo = 1;
  jboolean uwl = false;
  jboolean uat = false;
  jdouble sst = 20.0;
  jboolean mfs = false;
  jboolean simpleLabels = false;
  jboolean noRebinarization = false;
  jint i = 0;
  while (i < ((IOSObjectArray *) nil_chk(args))->size_ && [((NSString *) nil_chk(IOSObjectArray_Get(args, i))) hasPrefix:@"-"]) {
    if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-tlp"] && i + 1 < args->size_) {
      @try {
        tlp = (id<EduStanfordNlpTreesTreebankLanguagePack>) cast_check([((IOSClass *) nil_chk(IOSClass_forName_(IOSObjectArray_Get(args, i + 1)))) newInstance], EduStanfordNlpTreesTreebankLanguagePack_class_());
      }
      @catch (JavaLangException *e) {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$", @"Couldn't instantiate: ", IOSObjectArray_Get(args, i + 1))];
        @throw new_JavaLangRuntimeException_initWithNSException_(e);
      }
      i++;
    }
    else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-tlpp"] && i + 1 < args->size_) {
      @try {
        tlpp = (id<EduStanfordNlpParserLexparserTreebankLangParserParams>) cast_check([((IOSClass *) nil_chk(IOSClass_forName_(IOSObjectArray_Get(args, i + 1)))) newInstance], EduStanfordNlpParserLexparserTreebankLangParserParams_class_());
      }
      @catch (JavaLangException *e) {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$", @"Couldn't instantiate: ", IOSObjectArray_Get(args, i + 1))];
        @throw new_JavaLangRuntimeException_initWithNSException_(e);
      }
      i++;
    }
    else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-insideFactor"]) {
      insideFactor = true;
    }
    else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-markovOrder"] && i + 1 < args->size_) {
      i++;
      mo = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, i));
    }
    else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-simpleLabels"]) {
      simpleLabels = true;
    }
    else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-noRebinarization"]) {
      noRebinarization = true;
    }
    else {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$", @"Unknown option:", IOSObjectArray_Get(args, i))];
    }
    i++;
  }
  if (i >= args->size_) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"usage: java TreeBinarizer [-tlpp class|-markovOrder int|...] treebankPath"];
    JavaLangSystem_exitWithInt_(0);
  }
  EduStanfordNlpTreesTreebank *treebank;
  if (tlpp != nil) {
    treebank = [tlpp memoryTreebank];
    tlp = [tlpp treebankLanguagePack];
    fileExt = [((id<EduStanfordNlpTreesTreebankLanguagePack>) nil_chk(tlp)) treebankFileExtension];
    hf = [tlpp headFinder];
  }
  else {
    treebank = new_EduStanfordNlpTreesDiskTreebank_initWithEduStanfordNlpTreesTreeReaderFactory_(trf);
  }
  [((EduStanfordNlpTreesTreebank *) nil_chk(treebank)) loadPathWithNSString:IOSObjectArray_Get(args, i) withNSString:fileExt withBoolean:true];
  id<EduStanfordNlpTreesTreeTransformer> tt = new_EduStanfordNlpParserLexparserTreeBinarizer_initWithEduStanfordNlpTreesHeadFinder_withEduStanfordNlpTreesTreebankLanguagePack_withBoolean_withBoolean_withInt_withBoolean_withBoolean_withDouble_withBoolean_withBoolean_withBoolean_(hf, tlp, insideFactor, mf, mo, uwl, uat, sst, mfs, simpleLabels, noRebinarization);
  for (EduStanfordNlpTreesTree * __strong t in treebank) {
    EduStanfordNlpTreesTree *newT = [tt transformTreeWithEduStanfordNlpTreesTree:t];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"Original tree:"];
    [((EduStanfordNlpTreesTree *) nil_chk(t)) pennPrint];
    [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"Binarized tree:"];
    [((EduStanfordNlpTreesTree *) nil_chk(newT)) pennPrint];
    [JreLoadStatic(JavaLangSystem, out) println];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpParserLexparserTreeBinarizer)

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpParserLexparserTreeBinarizer_$Lambda$1)

@implementation EduStanfordNlpParserLexparserTreeBinarizer_$Lambda$1

- (id<EduStanfordNlpTreesTreeReader>)newTreeReaderWithJavaIoReader:(JavaIoReader *)inArg {
  return new_EduStanfordNlpTreesPennTreeReader_initWithJavaIoReader_withEduStanfordNlpTreesTreeFactory_withEduStanfordNlpTreesTreeNormalizer_(inArg, new_EduStanfordNlpTreesLabeledScoredTreeFactory_initWithEduStanfordNlpLingLabelFactory_(new_EduStanfordNlpLingCategoryWordTagFactory_init()), new_EduStanfordNlpTreesBobChrisTreeNormalizer_init());
}

+ (void)initialize {
  if (self == [EduStanfordNlpParserLexparserTreeBinarizer_$Lambda$1 class]) {
    EduStanfordNlpParserLexparserTreeBinarizer_$Lambda$1_instance = new_EduStanfordNlpParserLexparserTreeBinarizer_$Lambda$1_init();
    J2OBJC_SET_INITIALIZED(EduStanfordNlpParserLexparserTreeBinarizer_$Lambda$1)
  }
}

@end

void EduStanfordNlpParserLexparserTreeBinarizer_$Lambda$1_init(EduStanfordNlpParserLexparserTreeBinarizer_$Lambda$1 *self) {
  NSObject_init(self);
}

EduStanfordNlpParserLexparserTreeBinarizer_$Lambda$1 *new_EduStanfordNlpParserLexparserTreeBinarizer_$Lambda$1_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpParserLexparserTreeBinarizer_$Lambda$1, init)
}

EduStanfordNlpParserLexparserTreeBinarizer_$Lambda$1 *create_EduStanfordNlpParserLexparserTreeBinarizer_$Lambda$1_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpParserLexparserTreeBinarizer_$Lambda$1, init)
}
