//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/parser/lexparser/Interner.java
//

#include "J2ObjC_source.h"
#include "edu/stanford/nlp/parser/lexparser/Interner.h"
#include "edu/stanford/nlp/util/Generics.h"
#include "java/util/Map.h"

@interface EduStanfordNlpParserLexparserInterner () {
 @public
  id<JavaUtilMap> oToO_;
}

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserInterner, oToO_, id<JavaUtilMap>)

@implementation EduStanfordNlpParserLexparserInterner

- (id)internWithId:(id)o {
  id i = [((id<JavaUtilMap>) nil_chk(oToO_)) getWithId:o];
  if (i == nil) {
    i = o;
    (void) [((id<JavaUtilMap>) nil_chk(oToO_)) putWithId:o withId:o];
  }
  return i;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpParserLexparserInterner_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(internWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "oToO_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 3, -1 },
  };
  static const void *ptrTable[] = { "intern", "LNSObject;", "(TE;)TE;", "Ljava/util/Map<TE;TE;>;", "<E:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _EduStanfordNlpParserLexparserInterner = { "Interner", "edu.stanford.nlp.parser.lexparser", ptrTable, methods, fields, 7, 0x0, 2, 1, -1, -1, -1, 4, -1 };
  return &_EduStanfordNlpParserLexparserInterner;
}

@end

void EduStanfordNlpParserLexparserInterner_init(EduStanfordNlpParserLexparserInterner *self) {
  NSObject_init(self);
  self->oToO_ = EduStanfordNlpUtilGenerics_newHashMap();
}

EduStanfordNlpParserLexparserInterner *new_EduStanfordNlpParserLexparserInterner_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpParserLexparserInterner, init)
}

EduStanfordNlpParserLexparserInterner *create_EduStanfordNlpParserLexparserInterner_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpParserLexparserInterner, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpParserLexparserInterner)
