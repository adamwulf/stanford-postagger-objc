//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/parser/lexparser/ParentAnnotationStats.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/io/NumberRangeFileFilter.h"
#include "edu/stanford/nlp/ling/Label.h"
#include "edu/stanford/nlp/ling/StringLabelFactory.h"
#include "edu/stanford/nlp/parser/lexparser/EnglishTreebankParserParams.h"
#include "edu/stanford/nlp/parser/lexparser/ParentAnnotationStats.h"
#include "edu/stanford/nlp/parser/lexparser/TreebankLangParserParams.h"
#include "edu/stanford/nlp/stats/ClassicCounter.h"
#include "edu/stanford/nlp/stats/Counters.h"
#include "edu/stanford/nlp/trees/BobChrisTreeNormalizer.h"
#include "edu/stanford/nlp/trees/DiskTreebank.h"
#include "edu/stanford/nlp/trees/LabeledScoredTreeFactory.h"
#include "edu/stanford/nlp/trees/MemoryTreebank.h"
#include "edu/stanford/nlp/trees/PennTreeReader.h"
#include "edu/stanford/nlp/trees/Tree.h"
#include "edu/stanford/nlp/trees/TreeReader.h"
#include "edu/stanford/nlp/trees/TreeReaderFactory.h"
#include "edu/stanford/nlp/trees/Treebank.h"
#include "edu/stanford/nlp/trees/TreebankLanguagePack.h"
#include "edu/stanford/nlp/util/Generics.h"
#include "edu/stanford/nlp/util/Pair.h"
#include "edu/stanford/nlp/util/PriorityQueue.h"
#include "java/io/PrintStream.h"
#include "java/io/Reader.h"
#include "java/lang/Double.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/System.h"
#include "java/text/NumberFormat.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/Comparator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/function/Function.h"
#include "java/util/function/ToDoubleFunction.h"
#include "java/util/function/ToIntFunction.h"
#include "java/util/function/ToLongFunction.h"

@interface EduStanfordNlpParserLexparserParentAnnotationStats () {
 @public
  id<EduStanfordNlpTreesTreebankLanguagePack> tlp_;
  jboolean doTags_;
  id<JavaUtilMap> nodeRules_;
  id<JavaUtilMap> pRules_;
  id<JavaUtilMap> gPRules_;
  id<JavaUtilMap> tagNodeRules_;
  id<JavaUtilMap> tagPRules_;
  id<JavaUtilMap> tagGPRules_;
}

- (instancetype)initWithEduStanfordNlpTreesTreebankLanguagePack:(id<EduStanfordNlpTreesTreebankLanguagePack>)tlp
                                                    withBoolean:(jboolean)doTags;

+ (void)getSplittersWithDouble:(jdouble)cutOff
               withJavaUtilMap:(id<JavaUtilMap>)nr
               withJavaUtilMap:(id<JavaUtilMap>)pr
               withJavaUtilMap:(id<JavaUtilMap>)gpr
               withJavaUtilSet:(id<JavaUtilSet>)splitters;

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserParentAnnotationStats, tlp_, id<EduStanfordNlpTreesTreebankLanguagePack>)
J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserParentAnnotationStats, nodeRules_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserParentAnnotationStats, pRules_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserParentAnnotationStats, gPRules_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserParentAnnotationStats, tagNodeRules_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserParentAnnotationStats, tagPRules_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserParentAnnotationStats, tagGPRules_, id<JavaUtilMap>)

__attribute__((unused)) static void EduStanfordNlpParserLexparserParentAnnotationStats_initWithEduStanfordNlpTreesTreebankLanguagePack_withBoolean_(EduStanfordNlpParserLexparserParentAnnotationStats *self, id<EduStanfordNlpTreesTreebankLanguagePack> tlp, jboolean doTags);

__attribute__((unused)) static EduStanfordNlpParserLexparserParentAnnotationStats *new_EduStanfordNlpParserLexparserParentAnnotationStats_initWithEduStanfordNlpTreesTreebankLanguagePack_withBoolean_(id<EduStanfordNlpTreesTreebankLanguagePack> tlp, jboolean doTags) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpParserLexparserParentAnnotationStats *create_EduStanfordNlpParserLexparserParentAnnotationStats_initWithEduStanfordNlpTreesTreebankLanguagePack_withBoolean_(id<EduStanfordNlpTreesTreebankLanguagePack> tlp, jboolean doTags);

__attribute__((unused)) static void EduStanfordNlpParserLexparserParentAnnotationStats_getSplittersWithDouble_withJavaUtilMap_withJavaUtilMap_withJavaUtilMap_withJavaUtilSet_(jdouble cutOff, id<JavaUtilMap> nr, id<JavaUtilMap> pr, id<JavaUtilMap> gpr, id<JavaUtilSet> splitters);

@interface EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$1 : NSObject < JavaUtilComparator >

- (jint)compareWithId:(EduStanfordNlpUtilPair *)o1
               withId:(EduStanfordNlpUtilPair *)o2;

@end

J2OBJC_STATIC_INIT(EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$1)

inline EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$1 *EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$1_get_instance();
static EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$1 *EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$1_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$1, instance, EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$1 *)

__attribute__((unused)) static void EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$1_init(EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$1 *self);

__attribute__((unused)) static EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$1 *new_EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$1 *create_EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$1_init();

@interface EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$2 : NSObject < JavaUtilComparator >

- (jint)compareWithId:(EduStanfordNlpUtilPair *)o1
               withId:(EduStanfordNlpUtilPair *)o2;

@end

J2OBJC_STATIC_INIT(EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$2)

inline EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$2 *EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$2_get_instance();
static EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$2 *EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$2_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$2, instance, EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$2 *)

__attribute__((unused)) static void EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$2_init(EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$2 *self);

__attribute__((unused)) static EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$2 *new_EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$2_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$2 *create_EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$2_init();

@interface EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$3 : NSObject < JavaUtilComparator >

- (jint)compareWithId:(EduStanfordNlpUtilPair *)o1
               withId:(EduStanfordNlpUtilPair *)o2;

@end

J2OBJC_STATIC_INIT(EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$3)

inline EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$3 *EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$3_get_instance();
static EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$3 *EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$3_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$3, instance, EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$3 *)

__attribute__((unused)) static void EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$3_init(EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$3 *self);

__attribute__((unused)) static EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$3 *new_EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$3_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$3 *create_EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$3_init();

@interface EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$4 : NSObject < JavaUtilComparator >

- (jint)compareWithId:(EduStanfordNlpUtilPair *)o1
               withId:(EduStanfordNlpUtilPair *)o2;

@end

J2OBJC_STATIC_INIT(EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$4)

inline EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$4 *EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$4_get_instance();
static EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$4 *EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$4_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$4, instance, EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$4 *)

__attribute__((unused)) static void EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$4_init(EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$4 *self);

__attribute__((unused)) static EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$4 *new_EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$4_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$4 *create_EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$4_init();

@interface EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$5 : NSObject < EduStanfordNlpTreesTreeReaderFactory >

- (id<EduStanfordNlpTreesTreeReader>)newTreeReaderWithJavaIoReader:(JavaIoReader *)inArg OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_STATIC_INIT(EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$5)

inline EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$5 *EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$5_get_instance();
static EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$5 *EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$5_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$5, instance, EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$5 *)

__attribute__((unused)) static void EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$5_init(EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$5 *self);

__attribute__((unused)) static EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$5 *new_EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$5_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$5 *create_EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$5_init();

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpParserLexparserParentAnnotationStats)

IOSDoubleArray *EduStanfordNlpParserLexparserParentAnnotationStats_CUTOFFS;

@implementation EduStanfordNlpParserLexparserParentAnnotationStats

- (instancetype)initWithEduStanfordNlpTreesTreebankLanguagePack:(id<EduStanfordNlpTreesTreebankLanguagePack>)tlp
                                                    withBoolean:(jboolean)doTags {
  EduStanfordNlpParserLexparserParentAnnotationStats_initWithEduStanfordNlpTreesTreebankLanguagePack_withBoolean_(self, tlp, doTags);
  return self;
}

- (void)visitTreeWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t {
  [self processTreeHelperWithNSString:@"TOP" withNSString:@"TOP" withEduStanfordNlpTreesTree:t];
}

+ (id<JavaUtilList>)kidLabelsWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t {
  return EduStanfordNlpParserLexparserParentAnnotationStats_kidLabelsWithEduStanfordNlpTreesTree_(t);
}

- (void)processTreeHelperWithNSString:(NSString *)gP
                         withNSString:(NSString *)p
          withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t {
  if (![((EduStanfordNlpTreesTree *) nil_chk(t)) isLeaf] && (doTags_ || ![t isPreTerminal])) {
    id<JavaUtilMap> nr;
    id<JavaUtilMap> pr;
    id<JavaUtilMap> gpr;
    if ([t isPreTerminal]) {
      nr = tagNodeRules_;
      pr = tagPRules_;
      gpr = tagGPRules_;
    }
    else {
      nr = nodeRules_;
      pr = pRules_;
      gpr = gPRules_;
    }
    NSString *n = [((id<EduStanfordNlpLingLabel>) nil_chk([t label])) value];
    if (tlp_ != nil) {
      p = [tlp_ basicCategoryWithNSString:p];
      gP = [tlp_ basicCategoryWithNSString:gP];
    }
    id<JavaUtilList> kidn = EduStanfordNlpParserLexparserParentAnnotationStats_kidLabelsWithEduStanfordNlpTreesTree_(t);
    EduStanfordNlpStatsClassicCounter *cntr = [((id<JavaUtilMap>) nil_chk(nr)) getWithId:n];
    if (cntr == nil) {
      cntr = new_EduStanfordNlpStatsClassicCounter_init();
      (void) [nr putWithId:n withId:cntr];
    }
    [cntr incrementCountWithId:kidn];
    id<JavaUtilList> pairStr = new_JavaUtilArrayList_initWithInt_(2);
    [pairStr addWithId:n];
    [pairStr addWithId:p];
    cntr = [((id<JavaUtilMap>) nil_chk(pr)) getWithId:pairStr];
    if (cntr == nil) {
      cntr = new_EduStanfordNlpStatsClassicCounter_init();
      (void) [pr putWithId:pairStr withId:cntr];
    }
    [cntr incrementCountWithId:kidn];
    id<JavaUtilList> tripleStr = new_JavaUtilArrayList_initWithInt_(3);
    [tripleStr addWithId:n];
    [tripleStr addWithId:p];
    [tripleStr addWithId:gP];
    cntr = [((id<JavaUtilMap>) nil_chk(gpr)) getWithId:tripleStr];
    if (cntr == nil) {
      cntr = new_EduStanfordNlpStatsClassicCounter_init();
      (void) [gpr putWithId:tripleStr withId:cntr];
    }
    [cntr incrementCountWithId:kidn];
    IOSObjectArray *kids = [t children];
    {
      IOSObjectArray *a__ = kids;
      EduStanfordNlpTreesTree * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        EduStanfordNlpTreesTree *kid = *b__++;
        [self processTreeHelperWithNSString:p withNSString:n withEduStanfordNlpTreesTree:kid];
      }
    }
  }
}

- (void)printStats {
  JavaTextNumberFormat *nf = JavaTextNumberFormat_getNumberInstance();
  [((JavaTextNumberFormat *) nil_chk(nf)) setMaximumFractionDigitsWithInt:2];
  IOSObjectArray *javaSB = [IOSObjectArray newArrayWithLength:((IOSDoubleArray *) nil_chk(EduStanfordNlpParserLexparserParentAnnotationStats_CUTOFFS))->size_ type:JavaLangStringBuffer_class_()];
  for (jint i = 0; i < EduStanfordNlpParserLexparserParentAnnotationStats_CUTOFFS->size_; i++) {
    (void) IOSObjectArray_SetAndConsume(javaSB, i, new_JavaLangStringBuffer_initWithNSString_(JreStrcat("$I$", @"  private static String[] splitters", (i + 1), @" = new String[] {")));
  }
  EduStanfordNlpStatsClassicCounter *allScores = new_EduStanfordNlpStatsClassicCounter_init();
  for (NSString * __strong node in nil_chk([((id<JavaUtilMap>) nil_chk(nodeRules_)) keySet])) {
    JavaUtilArrayList *answers = EduStanfordNlpUtilGenerics_newArrayList();
    EduStanfordNlpStatsClassicCounter *cntr = [((id<JavaUtilMap>) nil_chk(nodeRules_)) getWithId:node];
    jdouble support = ([((EduStanfordNlpStatsClassicCounter *) nil_chk(cntr)) totalCount]);
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$$D", @"Node ", node, @" support is ", support)];
    for (id<JavaUtilList> __strong key in nil_chk([((id<JavaUtilMap>) nil_chk(pRules_)) keySet])) {
      if ([((NSString *) nil_chk([((id<JavaUtilList>) nil_chk(key)) getWithInt:0])) isEqual:node]) {
        EduStanfordNlpStatsClassicCounter *cntr2 = [((id<JavaUtilMap>) nil_chk(pRules_)) getWithId:key];
        jdouble support2 = ([((EduStanfordNlpStatsClassicCounter *) nil_chk(cntr2)) totalCount]);
        jdouble kl = EduStanfordNlpStatsCounters_klDivergenceWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_(cntr2, cntr);
        [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$@$$$$$@$D", @"KL(", key, @"||", node, @") = ", [nf formatWithDouble:kl], @"\tsupport(", key, @") = ", support2)];
        jdouble score = kl * support2;
        [((JavaUtilArrayList *) nil_chk(answers)) addWithId:new_EduStanfordNlpUtilPair_initWithId_withId_(key, new_JavaLangDouble_initWithDouble_(score))];
        [allScores setCountWithId:key withDouble:score];
      }
    }
    [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"----"];
    [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"Sorted descending support * KL"];
    JavaUtilCollections_sortWithJavaUtilList_withJavaUtilComparator_(answers, JreLoadStatic(EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$1, instance));
    for (EduStanfordNlpUtilPair * __strong answer in nil_chk(answers)) {
      EduStanfordNlpUtilPair *p = answer;
      jdouble psd = [((JavaLangDouble *) nil_chk(((JavaLangDouble *) cast_chk([((EduStanfordNlpUtilPair *) nil_chk(p)) second], [JavaLangDouble class])))) doubleValue];
      [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("@$$", [p first], @": ", [nf formatWithDouble:psd])];
      if (psd >= IOSDoubleArray_Get(EduStanfordNlpParserLexparserParentAnnotationStats_CUTOFFS, 0)) {
        id<JavaUtilList> lst = (id<JavaUtilList>) cast_check([p first], JavaUtilList_class_());
        NSString *nd = (NSString *) cast_chk([((id<JavaUtilList>) nil_chk(lst)) getWithInt:0], [NSString class]);
        NSString *par = (NSString *) cast_chk([lst getWithInt:1], [NSString class]);
        for (jint j = 0; j < EduStanfordNlpParserLexparserParentAnnotationStats_CUTOFFS->size_; j++) {
          if (psd >= IOSDoubleArray_Get(EduStanfordNlpParserLexparserParentAnnotationStats_CUTOFFS, j)) {
            (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk(IOSObjectArray_Get(javaSB, j))) appendWithNSString:@"\""])) appendWithNSString:nd])) appendWithNSString:@"^"];
            (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk(IOSObjectArray_Get(javaSB, j))) appendWithNSString:par])) appendWithNSString:@"\", "];
          }
        }
      }
    }
    [JreLoadStatic(JavaLangSystem, out) println];
  }
  for (id<JavaUtilList> __strong node in nil_chk([((id<JavaUtilMap>) nil_chk(pRules_)) keySet])) {
    JavaUtilArrayList *answers = EduStanfordNlpUtilGenerics_newArrayList();
    EduStanfordNlpStatsClassicCounter *cntr = [((id<JavaUtilMap>) nil_chk(pRules_)) getWithId:node];
    jdouble support = ([((EduStanfordNlpStatsClassicCounter *) nil_chk(cntr)) totalCount]);
    if (support < EduStanfordNlpParserLexparserParentAnnotationStats_SUPPCUTOFF) {
      continue;
    }
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@$D", @"Node ", node, @" support is ", support)];
    for (id<JavaUtilList> __strong key in nil_chk([((id<JavaUtilMap>) nil_chk(gPRules_)) keySet])) {
      if ([((NSString *) nil_chk([((id<JavaUtilList>) nil_chk(key)) getWithInt:0])) isEqual:[((id<JavaUtilList>) nil_chk(node)) getWithInt:0]] && [((NSString *) nil_chk([key getWithInt:1])) isEqual:[node getWithInt:1]]) {
        EduStanfordNlpStatsClassicCounter *cntr2 = [((id<JavaUtilMap>) nil_chk(gPRules_)) getWithId:key];
        jdouble support2 = ([((EduStanfordNlpStatsClassicCounter *) nil_chk(cntr2)) totalCount]);
        jdouble kl = EduStanfordNlpStatsCounters_klDivergenceWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_(cntr2, cntr);
        [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$@$@$$$@$D", @"KL(", key, @"||", node, @") = ", [nf formatWithDouble:kl], @"\tsupport(", key, @") = ", support2)];
        jdouble score = kl * support2;
        [((JavaUtilArrayList *) nil_chk(answers)) addWithId:EduStanfordNlpUtilPair_makePairWithId_withId_(key, new_JavaLangDouble_initWithDouble_(score))];
        [allScores setCountWithId:key withDouble:score];
      }
    }
    [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"----"];
    [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"Sorted descending support * KL"];
    JavaUtilCollections_sortWithJavaUtilList_withJavaUtilComparator_(answers, JreLoadStatic(EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$2, instance));
    for (EduStanfordNlpUtilPair * __strong answer in nil_chk(answers)) {
      EduStanfordNlpUtilPair *p = answer;
      jdouble psd = [((JavaLangDouble *) nil_chk(((JavaLangDouble *) cast_chk([((EduStanfordNlpUtilPair *) nil_chk(p)) second], [JavaLangDouble class])))) doubleValue];
      [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("@$$", [p first], @": ", [nf formatWithDouble:psd])];
      if (psd >= IOSDoubleArray_Get(EduStanfordNlpParserLexparserParentAnnotationStats_CUTOFFS, 0)) {
        id<JavaUtilList> lst = (id<JavaUtilList>) cast_check([p first], JavaUtilList_class_());
        NSString *nd = (NSString *) cast_chk([((id<JavaUtilList>) nil_chk(lst)) getWithInt:0], [NSString class]);
        NSString *par = (NSString *) cast_chk([lst getWithInt:1], [NSString class]);
        NSString *gpar = (NSString *) cast_chk([lst getWithInt:2], [NSString class]);
        for (jint j = 0; j < EduStanfordNlpParserLexparserParentAnnotationStats_CUTOFFS->size_; j++) {
          if (psd >= IOSDoubleArray_Get(EduStanfordNlpParserLexparserParentAnnotationStats_CUTOFFS, j)) {
            (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk(IOSObjectArray_Get(javaSB, j))) appendWithNSString:@"\""])) appendWithNSString:nd])) appendWithNSString:@"^"];
            (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk(IOSObjectArray_Get(javaSB, j))) appendWithNSString:par])) appendWithNSString:@"~"];
            (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk(IOSObjectArray_Get(javaSB, j))) appendWithNSString:gpar])) appendWithNSString:@"\", "];
          }
        }
      }
    }
    [JreLoadStatic(JavaLangSystem, out) println];
  }
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) println];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"All scores:"];
  id<EduStanfordNlpUtilPriorityQueue> pq = EduStanfordNlpStatsCounters_toPriorityQueueWithEduStanfordNlpStatsCounter_(allScores);
  while (![((id<EduStanfordNlpUtilPriorityQueue>) nil_chk(pq)) isEmpty]) {
    id<JavaUtilList> key = [pq getFirst];
    jdouble score = [pq getPriorityWithId:key];
    (void) [pq removeFirst];
    [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("@CD", key, 0x0009, score)];
  }
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"  // Automatically generated by ParentAnnotationStats -- preferably don't edit"];
  for (jint i = 0; i < EduStanfordNlpParserLexparserParentAnnotationStats_CUTOFFS->size_; i++) {
    jint len = [((JavaLangStringBuffer *) nil_chk(IOSObjectArray_Get(javaSB, i))) length];
    (void) [((JavaLangStringBuffer *) nil_chk(IOSObjectArray_Get(javaSB, i))) replaceWithInt:len - 2 withInt:len withNSString:@"};"];
    [JreLoadStatic(JavaLangSystem, out) printlnWithId:IOSObjectArray_Get(javaSB, i)];
  }
  [JreLoadStatic(JavaLangSystem, out) printWithNSString:@"  public static HashSet splitters = new HashSet(Arrays.asList("];
  for (jint i = EduStanfordNlpParserLexparserParentAnnotationStats_CUTOFFS->size_; i > 0; i--) {
    if (i == 1) {
      [JreLoadStatic(JavaLangSystem, out) printWithNSString:@"splitters1"];
    }
    else {
      [JreLoadStatic(JavaLangSystem, out) printWithNSString:JreStrcat("$I$I$", @"selectiveSplit", i, @" ? splitters", i, @" : (")];
    }
  }
  for (jint i = EduStanfordNlpParserLexparserParentAnnotationStats_CUTOFFS->size_; i >= 0; i--) {
    [JreLoadStatic(JavaLangSystem, out) printWithNSString:@")"];
  }
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@";"];
}

+ (void)getSplittersWithDouble:(jdouble)cutOff
               withJavaUtilMap:(id<JavaUtilMap>)nr
               withJavaUtilMap:(id<JavaUtilMap>)pr
               withJavaUtilMap:(id<JavaUtilMap>)gpr
               withJavaUtilSet:(id<JavaUtilSet>)splitters {
  EduStanfordNlpParserLexparserParentAnnotationStats_getSplittersWithDouble_withJavaUtilMap_withJavaUtilMap_withJavaUtilMap_withJavaUtilSet_(cutOff, nr, pr, gpr, splitters);
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  EduStanfordNlpParserLexparserParentAnnotationStats_mainWithNSStringArray_(args);
}

+ (id<JavaUtilSet>)getSplitCategoriesWithEduStanfordNlpTreesTreebank:(EduStanfordNlpTreesTreebank *)t
                                                          withDouble:(jdouble)cutOff
                         withEduStanfordNlpTreesTreebankLanguagePack:(id<EduStanfordNlpTreesTreebankLanguagePack>)tlp {
  return EduStanfordNlpParserLexparserParentAnnotationStats_getSplitCategoriesWithEduStanfordNlpTreesTreebank_withDouble_withEduStanfordNlpTreesTreebankLanguagePack_(t, cutOff, tlp);
}

+ (id<JavaUtilSet>)getSplitCategoriesWithEduStanfordNlpTreesTreebank:(EduStanfordNlpTreesTreebank *)t
                                                         withBoolean:(jboolean)doTags
                                                             withInt:(jint)algorithm
                                                          withDouble:(jdouble)phrasalCutOff
                                                          withDouble:(jdouble)tagCutOff
                         withEduStanfordNlpTreesTreebankLanguagePack:(id<EduStanfordNlpTreesTreebankLanguagePack>)tlp {
  return EduStanfordNlpParserLexparserParentAnnotationStats_getSplitCategoriesWithEduStanfordNlpTreesTreebank_withBoolean_withInt_withDouble_withDouble_withEduStanfordNlpTreesTreebankLanguagePack_(t, doTags, algorithm, phrasalCutOff, tagCutOff, tlp);
}

+ (id<JavaUtilSet>)getEnglishSplitCategoriesWithNSString:(NSString *)treebankRoot {
  return EduStanfordNlpParserLexparserParentAnnotationStats_getEnglishSplitCategoriesWithNSString_(treebankRoot);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 3, 2, -1, 4, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 7, 8, -1, 9, -1, -1 },
    { NULL, "V", 0x9, 10, 11, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x9, 12, 13, -1, 14, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x9, 12, 15, -1, 16, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x9, 17, 18, -1, 19, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpTreesTreebankLanguagePack:withBoolean:);
  methods[1].selector = @selector(visitTreeWithEduStanfordNlpTreesTree:);
  methods[2].selector = @selector(kidLabelsWithEduStanfordNlpTreesTree:);
  methods[3].selector = @selector(processTreeHelperWithNSString:withNSString:withEduStanfordNlpTreesTree:);
  methods[4].selector = @selector(printStats);
  methods[5].selector = @selector(getSplittersWithDouble:withJavaUtilMap:withJavaUtilMap:withJavaUtilMap:withJavaUtilSet:);
  methods[6].selector = @selector(mainWithNSStringArray:);
  methods[7].selector = @selector(getSplitCategoriesWithEduStanfordNlpTreesTreebank:withDouble:withEduStanfordNlpTreesTreebankLanguagePack:);
  methods[8].selector = @selector(getSplitCategoriesWithEduStanfordNlpTreesTreebank:withBoolean:withInt:withDouble:withDouble:withEduStanfordNlpTreesTreebankLanguagePack:);
  methods[9].selector = @selector(getEnglishSplitCategoriesWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "tlp_", "LEduStanfordNlpTreesTreebankLanguagePack;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "doTags_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "nodeRules_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 20, -1 },
    { "pRules_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 21, -1 },
    { "gPRules_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 21, -1 },
    { "tagNodeRules_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 20, -1 },
    { "tagPRules_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 21, -1 },
    { "tagGPRules_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 21, -1 },
    { "CUTOFFS", "[D", .constantValue.asLong = 0, 0x19, -1, 22, -1, -1 },
    { "SUPPCUTOFF", "D", .constantValue.asDouble = EduStanfordNlpParserLexparserParentAnnotationStats_SUPPCUTOFF, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpTreesTreebankLanguagePack;Z", "visitTree", "LEduStanfordNlpTreesTree;", "kidLabels", "(Ledu/stanford/nlp/trees/Tree;)Ljava/util/List<Ljava/lang/String;>;", "processTreeHelper", "LNSString;LNSString;LEduStanfordNlpTreesTree;", "getSplitters", "DLJavaUtilMap;LJavaUtilMap;LJavaUtilMap;LJavaUtilSet;", "(DLjava/util/Map<Ljava/lang/String;Ledu/stanford/nlp/stats/ClassicCounter<Ljava/util/List<Ljava/lang/String;>;>;>;Ljava/util/Map<Ljava/util/List<Ljava/lang/String;>;Ledu/stanford/nlp/stats/ClassicCounter<Ljava/util/List<Ljava/lang/String;>;>;>;Ljava/util/Map<Ljava/util/List<Ljava/lang/String;>;Ledu/stanford/nlp/stats/ClassicCounter<Ljava/util/List<Ljava/lang/String;>;>;>;Ljava/util/Set<Ljava/lang/String;>;)V", "main", "[LNSString;", "getSplitCategories", "LEduStanfordNlpTreesTreebank;DLEduStanfordNlpTreesTreebankLanguagePack;", "(Ledu/stanford/nlp/trees/Treebank;DLedu/stanford/nlp/trees/TreebankLanguagePack;)Ljava/util/Set<Ljava/lang/String;>;", "LEduStanfordNlpTreesTreebank;ZIDDLEduStanfordNlpTreesTreebankLanguagePack;", "(Ledu/stanford/nlp/trees/Treebank;ZIDDLedu/stanford/nlp/trees/TreebankLanguagePack;)Ljava/util/Set<Ljava/lang/String;>;", "getEnglishSplitCategories", "LNSString;", "(Ljava/lang/String;)Ljava/util/Set<Ljava/lang/String;>;", "Ljava/util/Map<Ljava/lang/String;Ledu/stanford/nlp/stats/ClassicCounter<Ljava/util/List<Ljava/lang/String;>;>;>;", "Ljava/util/Map<Ljava/util/List<Ljava/lang/String;>;Ledu/stanford/nlp/stats/ClassicCounter<Ljava/util/List<Ljava/lang/String;>;>;>;", &EduStanfordNlpParserLexparserParentAnnotationStats_CUTOFFS };
  static const J2ObjcClassInfo _EduStanfordNlpParserLexparserParentAnnotationStats = { "ParentAnnotationStats", "edu.stanford.nlp.parser.lexparser", ptrTable, methods, fields, 7, 0x1, 10, 10, -1, -1, -1, -1, -1 };
  return &_EduStanfordNlpParserLexparserParentAnnotationStats;
}

+ (void)initialize {
  if (self == [EduStanfordNlpParserLexparserParentAnnotationStats class]) {
    EduStanfordNlpParserLexparserParentAnnotationStats_CUTOFFS = [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ 100.0, 200.0, 500.0, 1000.0 } count:4];
    J2OBJC_SET_INITIALIZED(EduStanfordNlpParserLexparserParentAnnotationStats)
  }
}

@end

void EduStanfordNlpParserLexparserParentAnnotationStats_initWithEduStanfordNlpTreesTreebankLanguagePack_withBoolean_(EduStanfordNlpParserLexparserParentAnnotationStats *self, id<EduStanfordNlpTreesTreebankLanguagePack> tlp, jboolean doTags) {
  NSObject_init(self);
  self->nodeRules_ = EduStanfordNlpUtilGenerics_newHashMap();
  self->pRules_ = EduStanfordNlpUtilGenerics_newHashMap();
  self->gPRules_ = EduStanfordNlpUtilGenerics_newHashMap();
  self->tagNodeRules_ = EduStanfordNlpUtilGenerics_newHashMap();
  self->tagPRules_ = EduStanfordNlpUtilGenerics_newHashMap();
  self->tagGPRules_ = EduStanfordNlpUtilGenerics_newHashMap();
  self->tlp_ = tlp;
  self->doTags_ = doTags;
}

EduStanfordNlpParserLexparserParentAnnotationStats *new_EduStanfordNlpParserLexparserParentAnnotationStats_initWithEduStanfordNlpTreesTreebankLanguagePack_withBoolean_(id<EduStanfordNlpTreesTreebankLanguagePack> tlp, jboolean doTags) {
  J2OBJC_NEW_IMPL(EduStanfordNlpParserLexparserParentAnnotationStats, initWithEduStanfordNlpTreesTreebankLanguagePack_withBoolean_, tlp, doTags)
}

EduStanfordNlpParserLexparserParentAnnotationStats *create_EduStanfordNlpParserLexparserParentAnnotationStats_initWithEduStanfordNlpTreesTreebankLanguagePack_withBoolean_(id<EduStanfordNlpTreesTreebankLanguagePack> tlp, jboolean doTags) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpParserLexparserParentAnnotationStats, initWithEduStanfordNlpTreesTreebankLanguagePack_withBoolean_, tlp, doTags)
}

id<JavaUtilList> EduStanfordNlpParserLexparserParentAnnotationStats_kidLabelsWithEduStanfordNlpTreesTree_(EduStanfordNlpTreesTree *t) {
  EduStanfordNlpParserLexparserParentAnnotationStats_initialize();
  IOSObjectArray *kids = [((EduStanfordNlpTreesTree *) nil_chk(t)) children];
  id<JavaUtilList> l = new_JavaUtilArrayList_initWithInt_(((IOSObjectArray *) nil_chk(kids))->size_);
  {
    IOSObjectArray *a__ = kids;
    EduStanfordNlpTreesTree * const *b__ = a__->buffer_;
    EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      EduStanfordNlpTreesTree *kid = *b__++;
      [l addWithId:[((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(kid)) label])) value]];
    }
  }
  return l;
}

void EduStanfordNlpParserLexparserParentAnnotationStats_getSplittersWithDouble_withJavaUtilMap_withJavaUtilMap_withJavaUtilMap_withJavaUtilSet_(jdouble cutOff, id<JavaUtilMap> nr, id<JavaUtilMap> pr, id<JavaUtilMap> gpr, id<JavaUtilSet> splitters) {
  EduStanfordNlpParserLexparserParentAnnotationStats_initialize();
  for (NSString * __strong node in nil_chk([((id<JavaUtilMap>) nil_chk(nr)) keySet])) {
    id<JavaUtilList> answers = new_JavaUtilArrayList_init();
    EduStanfordNlpStatsClassicCounter *cntr = [nr getWithId:node];
    jdouble support = ([((EduStanfordNlpStatsClassicCounter *) nil_chk(cntr)) totalCount]);
    for (id<JavaUtilList> __strong key in nil_chk([((id<JavaUtilMap>) nil_chk(pr)) keySet])) {
      if ([((NSString *) nil_chk([((id<JavaUtilList>) nil_chk(key)) getWithInt:0])) isEqual:node]) {
        EduStanfordNlpStatsClassicCounter *cntr2 = [pr getWithId:key];
        jdouble support2 = [((EduStanfordNlpStatsClassicCounter *) nil_chk(cntr2)) totalCount];
        jdouble kl = EduStanfordNlpStatsCounters_klDivergenceWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_(cntr2, cntr);
        [answers addWithId:new_EduStanfordNlpUtilPair_initWithId_withId_(key, new_JavaLangDouble_initWithDouble_(kl * support2))];
      }
    }
    JavaUtilCollections_sortWithJavaUtilList_withJavaUtilComparator_(answers, JreLoadStatic(EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$3, instance));
    for (EduStanfordNlpUtilPair * __strong p in answers) {
      jdouble psd = [((JavaLangDouble *) nil_chk([((EduStanfordNlpUtilPair *) nil_chk(p)) second])) doubleValue];
      if (psd >= cutOff) {
        id<JavaUtilList> lst = [p first];
        NSString *nd = [((id<JavaUtilList>) nil_chk(lst)) getWithInt:0];
        NSString *par = [lst getWithInt:1];
        NSString *name = JreStrcat("$C$", nd, '^', par);
        [((id<JavaUtilSet>) nil_chk(splitters)) addWithId:name];
      }
    }
  }
  for (id<JavaUtilList> __strong node in nil_chk([((id<JavaUtilMap>) nil_chk(pr)) keySet])) {
    JavaUtilArrayList *answers = EduStanfordNlpUtilGenerics_newArrayList();
    EduStanfordNlpStatsClassicCounter *cntr = [pr getWithId:node];
    jdouble support = ([((EduStanfordNlpStatsClassicCounter *) nil_chk(cntr)) totalCount]);
    if (support < EduStanfordNlpParserLexparserParentAnnotationStats_SUPPCUTOFF) {
      continue;
    }
    for (id<JavaUtilList> __strong key in nil_chk([((id<JavaUtilMap>) nil_chk(gpr)) keySet])) {
      if ([((NSString *) nil_chk([((id<JavaUtilList>) nil_chk(key)) getWithInt:0])) isEqual:[((id<JavaUtilList>) nil_chk(node)) getWithInt:0]] && [((NSString *) nil_chk([key getWithInt:1])) isEqual:[node getWithInt:1]]) {
        EduStanfordNlpStatsClassicCounter *cntr2 = [gpr getWithId:key];
        jdouble support2 = ([((EduStanfordNlpStatsClassicCounter *) nil_chk(cntr2)) totalCount]);
        jdouble kl = EduStanfordNlpStatsCounters_klDivergenceWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_(cntr2, cntr);
        [((JavaUtilArrayList *) nil_chk(answers)) addWithId:new_EduStanfordNlpUtilPair_initWithId_withId_(key, new_JavaLangDouble_initWithDouble_(kl * support2))];
      }
    }
    JavaUtilCollections_sortWithJavaUtilList_withJavaUtilComparator_(answers, JreLoadStatic(EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$4, instance));
    for (EduStanfordNlpUtilPair * __strong answer in nil_chk(answers)) {
      EduStanfordNlpUtilPair *p = answer;
      jdouble psd = [((JavaLangDouble *) nil_chk(((JavaLangDouble *) cast_chk([((EduStanfordNlpUtilPair *) nil_chk(p)) second], [JavaLangDouble class])))) doubleValue];
      if (psd >= cutOff) {
        id<JavaUtilList> lst = (id<JavaUtilList>) cast_check([p first], JavaUtilList_class_());
        NSString *nd = (NSString *) cast_chk([((id<JavaUtilList>) nil_chk(lst)) getWithInt:0], [NSString class]);
        NSString *par = (NSString *) cast_chk([lst getWithInt:1], [NSString class]);
        NSString *gpar = (NSString *) cast_chk([lst getWithInt:2], [NSString class]);
        NSString *name = JreStrcat("$C$C$", nd, '^', par, '~', gpar);
        [((id<JavaUtilSet>) nil_chk(splitters)) addWithId:name];
      }
    }
  }
}

void EduStanfordNlpParserLexparserParentAnnotationStats_mainWithNSStringArray_(IOSObjectArray *args) {
  EduStanfordNlpParserLexparserParentAnnotationStats_initialize();
  jboolean doTags = false;
  if (((IOSObjectArray *) nil_chk(args))->size_ < 1) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"Usage: java edu.stanford.nlp.parser.lexparser.ParentAnnotationStats [-tags] treebankPath"];
  }
  else {
    jint i = 0;
    jboolean useCutOff = false;
    jdouble cutOff = 0.0;
    while ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) hasPrefix:@"-"]) {
      if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) isEqual:@"-tags"]) {
        doTags = true;
        i++;
      }
      else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) isEqual:@"-cutOff"] && i + 1 < args->size_) {
        useCutOff = true;
        cutOff = JavaLangDouble_parseDoubleWithNSString_(IOSObjectArray_Get(args, i + 1));
        i += 2;
      }
      else {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$", @"Unknown option: ", IOSObjectArray_Get(args, i))];
        i++;
      }
    }
    EduStanfordNlpTreesTreebank *treebank = new_EduStanfordNlpTreesDiskTreebank_initWithEduStanfordNlpTreesTreeReaderFactory_(JreLoadStatic(EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$5, instance));
    [treebank loadPathWithNSString:IOSObjectArray_Get(args, i)];
    if (useCutOff) {
      id<JavaUtilSet> splitters = EduStanfordNlpParserLexparserParentAnnotationStats_getSplitCategoriesWithEduStanfordNlpTreesTreebank_withBoolean_withInt_withDouble_withDouble_withEduStanfordNlpTreesTreebankLanguagePack_(treebank, doTags, 0, cutOff, cutOff, nil);
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithId:splitters];
    }
    else {
      EduStanfordNlpParserLexparserParentAnnotationStats *pas = new_EduStanfordNlpParserLexparserParentAnnotationStats_initWithEduStanfordNlpTreesTreebankLanguagePack_withBoolean_(nil, doTags);
      [treebank applyWithEduStanfordNlpTreesTreeVisitor:pas];
      [pas printStats];
    }
  }
}

id<JavaUtilSet> EduStanfordNlpParserLexparserParentAnnotationStats_getSplitCategoriesWithEduStanfordNlpTreesTreebank_withDouble_withEduStanfordNlpTreesTreebankLanguagePack_(EduStanfordNlpTreesTreebank *t, jdouble cutOff, id<EduStanfordNlpTreesTreebankLanguagePack> tlp) {
  EduStanfordNlpParserLexparserParentAnnotationStats_initialize();
  return EduStanfordNlpParserLexparserParentAnnotationStats_getSplitCategoriesWithEduStanfordNlpTreesTreebank_withBoolean_withInt_withDouble_withDouble_withEduStanfordNlpTreesTreebankLanguagePack_(t, true, 0, cutOff, cutOff, tlp);
}

id<JavaUtilSet> EduStanfordNlpParserLexparserParentAnnotationStats_getSplitCategoriesWithEduStanfordNlpTreesTreebank_withBoolean_withInt_withDouble_withDouble_withEduStanfordNlpTreesTreebankLanguagePack_(EduStanfordNlpTreesTreebank *t, jboolean doTags, jint algorithm, jdouble phrasalCutOff, jdouble tagCutOff, id<EduStanfordNlpTreesTreebankLanguagePack> tlp) {
  EduStanfordNlpParserLexparserParentAnnotationStats_initialize();
  EduStanfordNlpParserLexparserParentAnnotationStats *pas = new_EduStanfordNlpParserLexparserParentAnnotationStats_initWithEduStanfordNlpTreesTreebankLanguagePack_withBoolean_(tlp, doTags);
  [((EduStanfordNlpTreesTreebank *) nil_chk(t)) applyWithEduStanfordNlpTreesTreeVisitor:pas];
  id<JavaUtilSet> splitters = EduStanfordNlpUtilGenerics_newHashSet();
  EduStanfordNlpParserLexparserParentAnnotationStats_getSplittersWithDouble_withJavaUtilMap_withJavaUtilMap_withJavaUtilMap_withJavaUtilSet_(phrasalCutOff, pas->nodeRules_, pas->pRules_, pas->gPRules_, splitters);
  EduStanfordNlpParserLexparserParentAnnotationStats_getSplittersWithDouble_withJavaUtilMap_withJavaUtilMap_withJavaUtilMap_withJavaUtilSet_(tagCutOff, pas->tagNodeRules_, pas->tagPRules_, pas->tagGPRules_, splitters);
  return splitters;
}

id<JavaUtilSet> EduStanfordNlpParserLexparserParentAnnotationStats_getEnglishSplitCategoriesWithNSString_(NSString *treebankRoot) {
  EduStanfordNlpParserLexparserParentAnnotationStats_initialize();
  id<EduStanfordNlpParserLexparserTreebankLangParserParams> tlpParams = new_EduStanfordNlpParserLexparserEnglishTreebankParserParams_init();
  EduStanfordNlpTreesTreebank *trees = [tlpParams memoryTreebank];
  [((EduStanfordNlpTreesTreebank *) nil_chk(trees)) loadPathWithNSString:treebankRoot withJavaIoFileFilter:new_EduStanfordNlpIoNumberRangeFileFilter_initWithInt_withInt_withBoolean_(200, 2199, true)];
  return EduStanfordNlpParserLexparserParentAnnotationStats_getSplitCategoriesWithEduStanfordNlpTreesTreebank_withDouble_withEduStanfordNlpTreesTreebankLanguagePack_(trees, 300.0, [tlpParams treebankLanguagePack]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpParserLexparserParentAnnotationStats)

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$1)

@implementation EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$1

- (jint)compareWithId:(EduStanfordNlpUtilPair *)o1
               withId:(EduStanfordNlpUtilPair *)o2 {
  return [((JavaLangDouble *) nil_chk([((EduStanfordNlpUtilPair *) nil_chk(o2)) second])) compareToWithId:[((EduStanfordNlpUtilPair *) nil_chk(o1)) second]];
}

- (id<JavaUtilComparator>)reversed {
  return JavaUtilComparator_reversed(self);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilComparator:(id<JavaUtilComparator>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilComparator_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0
                                             withJavaUtilComparator:(id<JavaUtilComparator>)arg1 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_withJavaUtilComparator_(self, arg0, arg1);
}

- (id<JavaUtilComparator>)thenComparingDoubleWithJavaUtilFunctionToDoubleFunction:(id<JavaUtilFunctionToDoubleFunction>)arg0 {
  return JavaUtilComparator_thenComparingDoubleWithJavaUtilFunctionToDoubleFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingIntWithJavaUtilFunctionToIntFunction:(id<JavaUtilFunctionToIntFunction>)arg0 {
  return JavaUtilComparator_thenComparingIntWithJavaUtilFunctionToIntFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingLongWithJavaUtilFunctionToLongFunction:(id<JavaUtilFunctionToLongFunction>)arg0 {
  return JavaUtilComparator_thenComparingLongWithJavaUtilFunctionToLongFunction_(self, arg0);
}

+ (void)initialize {
  if (self == [EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$1 class]) {
    EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$1_instance = new_EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$1_init();
    J2OBJC_SET_INITIALIZED(EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$1)
  }
}

@end

void EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$1_init(EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$1 *self) {
  NSObject_init(self);
}

EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$1 *new_EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$1_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$1, init)
}

EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$1 *create_EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$1_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$1, init)
}

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$2)

@implementation EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$2

- (jint)compareWithId:(EduStanfordNlpUtilPair *)o1
               withId:(EduStanfordNlpUtilPair *)o2 {
  return [((JavaLangDouble *) nil_chk([((EduStanfordNlpUtilPair *) nil_chk(o2)) second])) compareToWithId:[((EduStanfordNlpUtilPair *) nil_chk(o1)) second]];
}

- (id<JavaUtilComparator>)reversed {
  return JavaUtilComparator_reversed(self);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilComparator:(id<JavaUtilComparator>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilComparator_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0
                                             withJavaUtilComparator:(id<JavaUtilComparator>)arg1 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_withJavaUtilComparator_(self, arg0, arg1);
}

- (id<JavaUtilComparator>)thenComparingDoubleWithJavaUtilFunctionToDoubleFunction:(id<JavaUtilFunctionToDoubleFunction>)arg0 {
  return JavaUtilComparator_thenComparingDoubleWithJavaUtilFunctionToDoubleFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingIntWithJavaUtilFunctionToIntFunction:(id<JavaUtilFunctionToIntFunction>)arg0 {
  return JavaUtilComparator_thenComparingIntWithJavaUtilFunctionToIntFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingLongWithJavaUtilFunctionToLongFunction:(id<JavaUtilFunctionToLongFunction>)arg0 {
  return JavaUtilComparator_thenComparingLongWithJavaUtilFunctionToLongFunction_(self, arg0);
}

+ (void)initialize {
  if (self == [EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$2 class]) {
    EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$2_instance = new_EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$2_init();
    J2OBJC_SET_INITIALIZED(EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$2)
  }
}

@end

void EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$2_init(EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$2 *self) {
  NSObject_init(self);
}

EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$2 *new_EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$2_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$2, init)
}

EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$2 *create_EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$2_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$2, init)
}

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$3)

@implementation EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$3

- (jint)compareWithId:(EduStanfordNlpUtilPair *)o1
               withId:(EduStanfordNlpUtilPair *)o2 {
  return [((JavaLangDouble *) nil_chk([((EduStanfordNlpUtilPair *) nil_chk(o2)) second])) compareToWithId:[((EduStanfordNlpUtilPair *) nil_chk(o1)) second]];
}

- (id<JavaUtilComparator>)reversed {
  return JavaUtilComparator_reversed(self);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilComparator:(id<JavaUtilComparator>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilComparator_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0
                                             withJavaUtilComparator:(id<JavaUtilComparator>)arg1 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_withJavaUtilComparator_(self, arg0, arg1);
}

- (id<JavaUtilComparator>)thenComparingDoubleWithJavaUtilFunctionToDoubleFunction:(id<JavaUtilFunctionToDoubleFunction>)arg0 {
  return JavaUtilComparator_thenComparingDoubleWithJavaUtilFunctionToDoubleFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingIntWithJavaUtilFunctionToIntFunction:(id<JavaUtilFunctionToIntFunction>)arg0 {
  return JavaUtilComparator_thenComparingIntWithJavaUtilFunctionToIntFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingLongWithJavaUtilFunctionToLongFunction:(id<JavaUtilFunctionToLongFunction>)arg0 {
  return JavaUtilComparator_thenComparingLongWithJavaUtilFunctionToLongFunction_(self, arg0);
}

+ (void)initialize {
  if (self == [EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$3 class]) {
    EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$3_instance = new_EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$3_init();
    J2OBJC_SET_INITIALIZED(EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$3)
  }
}

@end

void EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$3_init(EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$3 *self) {
  NSObject_init(self);
}

EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$3 *new_EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$3_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$3, init)
}

EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$3 *create_EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$3_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$3, init)
}

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$4)

@implementation EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$4

- (jint)compareWithId:(EduStanfordNlpUtilPair *)o1
               withId:(EduStanfordNlpUtilPair *)o2 {
  return [((JavaLangDouble *) nil_chk([((EduStanfordNlpUtilPair *) nil_chk(o2)) second])) compareToWithId:[((EduStanfordNlpUtilPair *) nil_chk(o1)) second]];
}

- (id<JavaUtilComparator>)reversed {
  return JavaUtilComparator_reversed(self);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilComparator:(id<JavaUtilComparator>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilComparator_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0
                                             withJavaUtilComparator:(id<JavaUtilComparator>)arg1 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_withJavaUtilComparator_(self, arg0, arg1);
}

- (id<JavaUtilComparator>)thenComparingDoubleWithJavaUtilFunctionToDoubleFunction:(id<JavaUtilFunctionToDoubleFunction>)arg0 {
  return JavaUtilComparator_thenComparingDoubleWithJavaUtilFunctionToDoubleFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingIntWithJavaUtilFunctionToIntFunction:(id<JavaUtilFunctionToIntFunction>)arg0 {
  return JavaUtilComparator_thenComparingIntWithJavaUtilFunctionToIntFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingLongWithJavaUtilFunctionToLongFunction:(id<JavaUtilFunctionToLongFunction>)arg0 {
  return JavaUtilComparator_thenComparingLongWithJavaUtilFunctionToLongFunction_(self, arg0);
}

+ (void)initialize {
  if (self == [EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$4 class]) {
    EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$4_instance = new_EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$4_init();
    J2OBJC_SET_INITIALIZED(EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$4)
  }
}

@end

void EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$4_init(EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$4 *self) {
  NSObject_init(self);
}

EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$4 *new_EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$4_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$4, init)
}

EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$4 *create_EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$4_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$4, init)
}

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$5)

@implementation EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$5

- (id<EduStanfordNlpTreesTreeReader>)newTreeReaderWithJavaIoReader:(JavaIoReader *)inArg {
  return new_EduStanfordNlpTreesPennTreeReader_initWithJavaIoReader_withEduStanfordNlpTreesTreeFactory_withEduStanfordNlpTreesTreeNormalizer_(inArg, new_EduStanfordNlpTreesLabeledScoredTreeFactory_initWithEduStanfordNlpLingLabelFactory_(new_EduStanfordNlpLingStringLabelFactory_init()), new_EduStanfordNlpTreesBobChrisTreeNormalizer_init());
}

+ (void)initialize {
  if (self == [EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$5 class]) {
    EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$5_instance = new_EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$5_init();
    J2OBJC_SET_INITIALIZED(EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$5)
  }
}

@end

void EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$5_init(EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$5 *self) {
  NSObject_init(self);
}

EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$5 *new_EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$5_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$5, init)
}

EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$5 *create_EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$5_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpParserLexparserParentAnnotationStats_$Lambda$5, init)
}
