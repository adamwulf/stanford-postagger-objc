//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/parser/lexparser/Debinarizer.java
//

#include "J2ObjC_source.h"
#include "edu/stanford/nlp/ling/CoreLabel.h"
#include "edu/stanford/nlp/ling/Label.h"
#include "edu/stanford/nlp/ling/LabelFactory.h"
#include "edu/stanford/nlp/parser/lexparser/BoundaryRemover.h"
#include "edu/stanford/nlp/parser/lexparser/CNFTransformers.h"
#include "edu/stanford/nlp/parser/lexparser/Debinarizer.h"
#include "edu/stanford/nlp/trees/LabeledScoredTreeFactory.h"
#include "edu/stanford/nlp/trees/Tree.h"
#include "edu/stanford/nlp/trees/TreeFactory.h"
#include "edu/stanford/nlp/trees/TreeTransformer.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"

@interface EduStanfordNlpParserLexparserDebinarizer () {
 @public
  id<EduStanfordNlpTreesTreeFactory> tf_;
  jboolean forceCNF_;
  id<EduStanfordNlpTreesTreeTransformer> boundaryRemover_;
}

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserDebinarizer, tf_, id<EduStanfordNlpTreesTreeFactory>)
J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserDebinarizer, boundaryRemover_, id<EduStanfordNlpTreesTreeTransformer>)

@implementation EduStanfordNlpParserLexparserDebinarizer

- (EduStanfordNlpTreesTree *)transformTreeHelperWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t {
  if ([((EduStanfordNlpTreesTree *) nil_chk(t)) isLeaf]) {
    EduStanfordNlpTreesTree *leaf = [((id<EduStanfordNlpTreesTreeFactory>) nil_chk(tf_)) newLeafWithEduStanfordNlpLingLabel:[t label]];
    [((EduStanfordNlpTreesTree *) nil_chk(leaf)) setScoreWithDouble:[t score]];
    return leaf;
  }
  id<JavaUtilList> newChildren = new_JavaUtilArrayList_init();
  for (jint childNum = 0, numKids = [t numChildren]; childNum < numKids; childNum++) {
    EduStanfordNlpTreesTree *child = [t getChildWithInt:childNum];
    EduStanfordNlpTreesTree *newChild = [self transformTreeHelperWithEduStanfordNlpTreesTree:child];
    if ((![((EduStanfordNlpTreesTree *) nil_chk(newChild)) isLeaf]) && [((NSString *) nil_chk([((id<EduStanfordNlpLingLabel>) nil_chk([newChild label])) value])) indexOf:'@'] >= 0) {
      [newChildren addAllWithJavaUtilCollection:[newChild getChildrenAsList]];
    }
    else {
      [newChildren addWithId:newChild];
    }
  }
  EduStanfordNlpTreesTree *node = [((id<EduStanfordNlpTreesTreeFactory>) nil_chk(tf_)) newTreeNodeWithEduStanfordNlpLingLabel:[t label] withJavaUtilList:newChildren];
  [((EduStanfordNlpTreesTree *) nil_chk(node)) setScoreWithDouble:[t score]];
  return node;
}

- (EduStanfordNlpTreesTree *)transformTreeWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t {
  EduStanfordNlpTreesTree *result = [self transformTreeHelperWithEduStanfordNlpTreesTree:t];
  if (forceCNF_) {
    result = [new_EduStanfordNlpParserLexparserCNFTransformers_FromCNFTransformer_init() transformTreeWithEduStanfordNlpTreesTree:result];
  }
  return [((id<EduStanfordNlpTreesTreeTransformer>) nil_chk(boundaryRemover_)) transformTreeWithEduStanfordNlpTreesTree:result];
}

- (instancetype)initWithBoolean:(jboolean)forceCNF {
  EduStanfordNlpParserLexparserDebinarizer_initWithBoolean_(self, forceCNF);
  return self;
}

- (instancetype)initWithBoolean:(jboolean)forceCNF
withEduStanfordNlpLingLabelFactory:(id<EduStanfordNlpLingLabelFactory>)lf {
  EduStanfordNlpParserLexparserDebinarizer_initWithBoolean_withEduStanfordNlpLingLabelFactory_(self, forceCNF, lf);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LEduStanfordNlpTreesTree;", 0x4, 0, 1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(transformTreeHelperWithEduStanfordNlpTreesTree:);
  methods[1].selector = @selector(transformTreeWithEduStanfordNlpTreesTree:);
  methods[2].selector = @selector(initWithBoolean:);
  methods[3].selector = @selector(initWithBoolean:withEduStanfordNlpLingLabelFactory:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "tf_", "LEduStanfordNlpTreesTreeFactory;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "forceCNF_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "boundaryRemover_", "LEduStanfordNlpTreesTreeTransformer;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "transformTreeHelper", "LEduStanfordNlpTreesTree;", "transformTree", "Z", "ZLEduStanfordNlpLingLabelFactory;" };
  static const J2ObjcClassInfo _EduStanfordNlpParserLexparserDebinarizer = { "Debinarizer", "edu.stanford.nlp.parser.lexparser", ptrTable, methods, fields, 7, 0x1, 4, 3, -1, -1, -1, -1, -1 };
  return &_EduStanfordNlpParserLexparserDebinarizer;
}

@end

void EduStanfordNlpParserLexparserDebinarizer_initWithBoolean_(EduStanfordNlpParserLexparserDebinarizer *self, jboolean forceCNF) {
  EduStanfordNlpParserLexparserDebinarizer_initWithBoolean_withEduStanfordNlpLingLabelFactory_(self, forceCNF, EduStanfordNlpLingCoreLabel_factory());
}

EduStanfordNlpParserLexparserDebinarizer *new_EduStanfordNlpParserLexparserDebinarizer_initWithBoolean_(jboolean forceCNF) {
  J2OBJC_NEW_IMPL(EduStanfordNlpParserLexparserDebinarizer, initWithBoolean_, forceCNF)
}

EduStanfordNlpParserLexparserDebinarizer *create_EduStanfordNlpParserLexparserDebinarizer_initWithBoolean_(jboolean forceCNF) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpParserLexparserDebinarizer, initWithBoolean_, forceCNF)
}

void EduStanfordNlpParserLexparserDebinarizer_initWithBoolean_withEduStanfordNlpLingLabelFactory_(EduStanfordNlpParserLexparserDebinarizer *self, jboolean forceCNF, id<EduStanfordNlpLingLabelFactory> lf) {
  NSObject_init(self);
  self->forceCNF_ = forceCNF;
  self->tf_ = new_EduStanfordNlpTreesLabeledScoredTreeFactory_initWithEduStanfordNlpLingLabelFactory_(lf);
  self->boundaryRemover_ = new_EduStanfordNlpParserLexparserBoundaryRemover_init();
}

EduStanfordNlpParserLexparserDebinarizer *new_EduStanfordNlpParserLexparserDebinarizer_initWithBoolean_withEduStanfordNlpLingLabelFactory_(jboolean forceCNF, id<EduStanfordNlpLingLabelFactory> lf) {
  J2OBJC_NEW_IMPL(EduStanfordNlpParserLexparserDebinarizer, initWithBoolean_withEduStanfordNlpLingLabelFactory_, forceCNF, lf)
}

EduStanfordNlpParserLexparserDebinarizer *create_EduStanfordNlpParserLexparserDebinarizer_initWithBoolean_withEduStanfordNlpLingLabelFactory_(jboolean forceCNF, id<EduStanfordNlpLingLabelFactory> lf) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpParserLexparserDebinarizer, initWithBoolean_withEduStanfordNlpLingLabelFactory_, forceCNF, lf)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpParserLexparserDebinarizer)
