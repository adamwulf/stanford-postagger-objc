//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/parser/lexparser/BaseLexicon.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/io/NumberRangesFileFilter.h"
#include "edu/stanford/nlp/ling/TaggedWord.h"
#include "edu/stanford/nlp/parser/lexparser/BaseLexicon.h"
#include "edu/stanford/nlp/parser/lexparser/IntTaggedWord.h"
#include "edu/stanford/nlp/parser/lexparser/Lexicon.h"
#include "edu/stanford/nlp/parser/lexparser/Options.h"
#include "edu/stanford/nlp/parser/lexparser/TestOptions.h"
#include "edu/stanford/nlp/parser/lexparser/TrainOptions.h"
#include "edu/stanford/nlp/parser/lexparser/UnknownWordModel.h"
#include "edu/stanford/nlp/parser/lexparser/UnknownWordModelTrainer.h"
#include "edu/stanford/nlp/stats/ClassicCounter.h"
#include "edu/stanford/nlp/stats/Counter.h"
#include "edu/stanford/nlp/stats/Counters.h"
#include "edu/stanford/nlp/trees/DiskTreebank.h"
#include "edu/stanford/nlp/trees/Tree.h"
#include "edu/stanford/nlp/trees/Treebank.h"
#include "edu/stanford/nlp/trees/TreebankLanguagePack.h"
#include "edu/stanford/nlp/util/Generics.h"
#include "edu/stanford/nlp/util/HashIndex.h"
#include "edu/stanford/nlp/util/Index.h"
#include "edu/stanford/nlp/util/ReflectionLoading.h"
#include "edu/stanford/nlp/util/StringUtils.h"
#include "java/io/BufferedReader.h"
#include "java/io/IOException.h"
#include "java/io/ObjectInputStream.h"
#include "java/io/PrintStream.h"
#include "java/io/PrintWriter.h"
#include "java/io/StringWriter.h"
#include "java/io/Writer.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/text/NumberFormat.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/function/Function.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"

@interface EduStanfordNlpParserLexparserBaseLexicon () {
 @public
  id<JavaUtilMap> baseTagCounts_;
  jint debugLastWord_;
  jint debugLoc_;
  JavaLangStringBuilder *debugProbs_;
  JavaLangStringBuilder *debugNoProbs_;
  NSString *debugPrefix_;
}

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)ois;

- (void)populateTagsToBaseTagsWithEduStanfordNlpTreesTreebankLanguagePack:(id<EduStanfordNlpTreesTreebankLanguagePack>)tlp;

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserBaseLexicon, baseTagCounts_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserBaseLexicon, debugProbs_, JavaLangStringBuilder *)
J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserBaseLexicon, debugNoProbs_, JavaLangStringBuilder *)
J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserBaseLexicon, debugPrefix_, NSString *)

inline jint EduStanfordNlpParserLexparserBaseLexicon_get_STATS_BINS();
#define EduStanfordNlpParserLexparserBaseLexicon_STATS_BINS 15
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpParserLexparserBaseLexicon, STATS_BINS, jint)

inline jlong EduStanfordNlpParserLexparserBaseLexicon_get_serialVersionUID();
#define EduStanfordNlpParserLexparserBaseLexicon_serialVersionUID 40LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpParserLexparserBaseLexicon, serialVersionUID, jlong)

__attribute__((unused)) static void EduStanfordNlpParserLexparserBaseLexicon_trainWithJavaUtilList_withDouble_(EduStanfordNlpParserLexparserBaseLexicon *self, id<JavaUtilList> sentence, jdouble weight);

__attribute__((unused)) static void EduStanfordNlpParserLexparserBaseLexicon_tune(EduStanfordNlpParserLexparserBaseLexicon *self);

__attribute__((unused)) static void EduStanfordNlpParserLexparserBaseLexicon_populateTagsToBaseTagsWithEduStanfordNlpTreesTreebankLanguagePack_(EduStanfordNlpParserLexparserBaseLexicon *self, id<EduStanfordNlpTreesTreebankLanguagePack> tlp);

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpParserLexparserBaseLexicon)

EduStanfordNlpParserLexparserIntTaggedWord *EduStanfordNlpParserLexparserBaseLexicon_NULL_ITW;

@implementation EduStanfordNlpParserLexparserBaseLexicon

- (instancetype)initWithEduStanfordNlpUtilIndex:(id<EduStanfordNlpUtilIndex>)wordIndex
                    withEduStanfordNlpUtilIndex:(id<EduStanfordNlpUtilIndex>)tagIndex {
  EduStanfordNlpParserLexparserBaseLexicon_initWithEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(self, wordIndex, tagIndex);
  return self;
}

- (instancetype)initWithEduStanfordNlpParserLexparserOptions:(EduStanfordNlpParserLexparserOptions *)op
                                 withEduStanfordNlpUtilIndex:(id<EduStanfordNlpUtilIndex>)wordIndex
                                 withEduStanfordNlpUtilIndex:(id<EduStanfordNlpUtilIndex>)tagIndex {
  EduStanfordNlpParserLexparserBaseLexicon_initWithEduStanfordNlpParserLexparserOptions_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(self, op, wordIndex, tagIndex);
  return self;
}

- (jboolean)isKnownWithInt:(jint)word {
  return (word < ((IOSObjectArray *) nil_chk(rulesWithWord_))->size_ && word >= 0 && ![((id<JavaUtilList>) nil_chk(IOSObjectArray_Get(rulesWithWord_, word))) isEmpty]);
}

- (jboolean)isKnownWithNSString:(NSString *)word {
  if (![((id<EduStanfordNlpUtilIndex>) nil_chk(wordIndex_)) containsWithId:word]) return false;
  EduStanfordNlpParserLexparserIntTaggedWord *iW = new_EduStanfordNlpParserLexparserIntTaggedWord_initWithInt_withInt_([wordIndex_ indexOfWithId:word], EduStanfordNlpParserLexparserBaseLexicon_nullTag);
  return [((EduStanfordNlpStatsClassicCounter *) nil_chk(seenCounter_)) getCountWithId:iW] > 0.0;
}

- (id<JavaUtilSet>)tagSetWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)basicCategoryFunction {
  id<JavaUtilSet> tagSet = new_JavaUtilHashSet_init();
  for (NSString * __strong tag in nil_chk([((id<EduStanfordNlpUtilIndex>) nil_chk(tagIndex_)) objectsList])) {
    [tagSet addWithId:[((id<JavaUtilFunctionFunction>) nil_chk(basicCategoryFunction)) applyWithId:tag]];
  }
  return tagSet;
}

- (id<JavaUtilIterator>)ruleIteratorByWordWithNSString:(NSString *)word
                                               withInt:(jint)loc {
  return [self ruleIteratorByWordWithInt:[((id<EduStanfordNlpUtilIndex>) nil_chk(wordIndex_)) addToIndexWithId:word] withInt:loc withNSString:nil];
}

- (id<JavaUtilIterator>)ruleIteratorByWordWithInt:(jint)word
                                          withInt:(jint)loc
                                     withNSString:(NSString *)featureSpec {
  id<JavaUtilList> wordTaggings;
  if ([self isKnownWithInt:word]) {
    if (!flexiTag_) {
      wordTaggings = IOSObjectArray_Get(nil_chk(rulesWithWord_), word);
    }
    else {
      EduStanfordNlpParserLexparserIntTaggedWord *iW = new_EduStanfordNlpParserLexparserIntTaggedWord_initWithInt_withInt_(word, EduStanfordNlpParserLexparserBaseLexicon_nullTag);
      if ([((EduStanfordNlpStatsClassicCounter *) nil_chk(seenCounter_)) getCountWithId:iW] > smoothInUnknownsThreshold_) {
        return [((id<JavaUtilList>) nil_chk(IOSObjectArray_Get(nil_chk(rulesWithWord_), word))) iterator];
      }
      else {
        wordTaggings = new_JavaUtilArrayList_initWithInt_(40);
        for (EduStanfordNlpParserLexparserIntTaggedWord * __strong iTW2 in nil_chk(tags_)) {
          EduStanfordNlpParserLexparserIntTaggedWord *iTW = new_EduStanfordNlpParserLexparserIntTaggedWord_initWithInt_withInt_(word, ((EduStanfordNlpParserLexparserIntTaggedWord *) nil_chk(iTW2))->tag_);
          if ([self scoreWithEduStanfordNlpParserLexparserIntTaggedWord:iTW withInt:loc withNSString:[((id<EduStanfordNlpUtilIndex>) nil_chk(wordIndex_)) getWithInt:word] withNSString:nil] > JavaLangFloat_NEGATIVE_INFINITY) {
            [wordTaggings addWithId:iTW];
          }
        }
      }
    }
  }
  else {
    wordTaggings = new_JavaUtilArrayList_initWithInt_(40);
    for (EduStanfordNlpParserLexparserIntTaggedWord * __strong iTW in nil_chk(IOSObjectArray_Get(nil_chk(rulesWithWord_), [((id<EduStanfordNlpUtilIndex>) nil_chk(wordIndex_)) indexOfWithId:EduStanfordNlpParserLexparserLexicon_UNKNOWN_WORD]))) {
      [wordTaggings addWithId:new_EduStanfordNlpParserLexparserIntTaggedWord_initWithInt_withInt_(word, ((EduStanfordNlpParserLexparserIntTaggedWord *) nil_chk(iTW))->tag_)];
    }
  }
  return [((id<JavaUtilList>) nil_chk(wordTaggings)) iterator];
}

- (id<JavaUtilIterator>)ruleIteratorByWordWithNSString:(NSString *)word
                                               withInt:(jint)loc
                                          withNSString:(NSString *)featureSpec {
  return [self ruleIteratorByWordWithInt:[((id<EduStanfordNlpUtilIndex>) nil_chk(wordIndex_)) addToIndexWithId:word] withInt:loc withNSString:featureSpec];
}

- (void)initRulesWithWord {
  if (((EduStanfordNlpParserLexparserTestOptions *) nil_chk(testOptions_))->verbose_) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printWithNSString:@"\nInitializing lexicon scores ... "];
  }
  jint unkWord = [((id<EduStanfordNlpUtilIndex>) nil_chk(wordIndex_)) addToIndexWithId:EduStanfordNlpParserLexparserLexicon_UNKNOWN_WORD];
  jint numWords = [wordIndex_ size];
  rulesWithWord_ = [IOSObjectArray newArrayWithLength:numWords type:JavaUtilList_class_()];
  for (jint w = 0; w < numWords; w++) {
    (void) IOSObjectArray_SetAndConsume(nil_chk(rulesWithWord_), w, new_JavaUtilArrayList_initWithInt_(1));
  }
  tags_ = EduStanfordNlpUtilGenerics_newHashSet();
  for (EduStanfordNlpParserLexparserIntTaggedWord * __strong iTW in nil_chk([((EduStanfordNlpStatsClassicCounter *) nil_chk(seenCounter_)) keySet])) {
    if ([((EduStanfordNlpParserLexparserIntTaggedWord *) nil_chk(iTW)) word] == EduStanfordNlpParserLexparserBaseLexicon_nullWord && [iTW tag] != EduStanfordNlpParserLexparserBaseLexicon_nullTag) {
      [((id<JavaUtilSet>) nil_chk(tags_)) addWithId:iTW];
    }
  }
  for (EduStanfordNlpParserLexparserIntTaggedWord * __strong iT in nil_chk(tags_)) {
    jdouble types = [((id<EduStanfordNlpStatsCounter>) nil_chk([((id<EduStanfordNlpParserLexparserUnknownWordModel>) nil_chk(uwModel_)) unSeenCounter])) getCountWithId:iT];
    if (types > ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->openClassTypesThreshold_) {
      EduStanfordNlpParserLexparserIntTaggedWord *iTW = new_EduStanfordNlpParserLexparserIntTaggedWord_initWithInt_withInt_(unkWord, ((EduStanfordNlpParserLexparserIntTaggedWord *) nil_chk(iT))->tag_);
      [((id<JavaUtilList>) nil_chk(IOSObjectArray_Get(nil_chk(rulesWithWord_), iTW->word_))) addWithId:iTW];
    }
  }
  if (testOptions_->verbose_) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printWithNSString:JreStrcat("$I$", @"The ", [((id<JavaUtilList>) nil_chk(IOSObjectArray_Get(nil_chk(rulesWithWord_), unkWord))) size], @" open class tags are: [")];
    for (EduStanfordNlpParserLexparserIntTaggedWord * __strong item in nil_chk(IOSObjectArray_Get(nil_chk(rulesWithWord_), unkWord))) {
      [JreLoadStatic(JavaLangSystem, err) printWithNSString:JreStrcat("C$", ' ', [((id<EduStanfordNlpUtilIndex>) nil_chk(tagIndex_)) getWithInt:[((EduStanfordNlpParserLexparserIntTaggedWord *) nil_chk(item)) tag]])];
    }
    [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:@" ] "];
  }
  for (EduStanfordNlpParserLexparserIntTaggedWord * __strong iTW in nil_chk([((EduStanfordNlpStatsClassicCounter *) nil_chk(seenCounter_)) keySet])) {
    if ([((EduStanfordNlpParserLexparserIntTaggedWord *) nil_chk(iTW)) tag] != EduStanfordNlpParserLexparserBaseLexicon_nullTag && [iTW word] != EduStanfordNlpParserLexparserBaseLexicon_nullWord) {
      [((id<JavaUtilList>) nil_chk(IOSObjectArray_Get(nil_chk(rulesWithWord_), iTW->word_))) addWithId:iTW];
    }
  }
}

- (id<JavaUtilList>)treeToEventsWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)tree {
  id<JavaUtilList> taggedWords = [((EduStanfordNlpTreesTree *) nil_chk(tree)) taggedYield];
  return [self listToEventsWithJavaUtilList:taggedWords];
}

- (id<JavaUtilList>)listToEventsWithJavaUtilList:(id<JavaUtilList>)taggedWords {
  id<JavaUtilList> itwList = new_JavaUtilArrayList_init();
  for (EduStanfordNlpLingTaggedWord * __strong tw in nil_chk(taggedWords)) {
    EduStanfordNlpParserLexparserIntTaggedWord *iTW = new_EduStanfordNlpParserLexparserIntTaggedWord_initWithNSString_withNSString_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_([((EduStanfordNlpLingTaggedWord *) nil_chk(tw)) word], [tw tag], wordIndex_, tagIndex_);
    [itwList addWithId:iTW];
  }
  return itwList;
}

- (void)addAllWithJavaUtilList:(id<JavaUtilList>)tagWords {
  [self addAllWithJavaUtilList:tagWords withDouble:1.0];
}

- (void)addAllWithJavaUtilList:(id<JavaUtilList>)taggedWords
                    withDouble:(jdouble)weight {
  id<JavaUtilList> tagWords = [self listToEventsWithJavaUtilList:taggedWords];
}

- (void)trainWithExpansionWithJavaUtilCollection:(id<JavaUtilCollection>)taggedWords {
}

- (void)initializeTrainingWithDouble:(jdouble)numTrees {
  self->uwModelTrainer_ = EduStanfordNlpUtilReflectionLoading_loadByReflectionWithNSString_withNSObjectArray_(uwModelTrainerClass_, [IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]);
  [((id<EduStanfordNlpParserLexparserUnknownWordModelTrainer>) nil_chk(uwModelTrainer_)) initializeTrainingWithEduStanfordNlpParserLexparserOptions:op_ withEduStanfordNlpParserLexparserLexicon:self withEduStanfordNlpUtilIndex:wordIndex_ withEduStanfordNlpUtilIndex:tagIndex_ withDouble:numTrees];
}

- (void)trainWithJavaUtilCollection:(id<JavaUtilCollection>)trees {
  [self trainWithJavaUtilCollection:trees withDouble:1.0];
}

- (void)trainWithJavaUtilCollection:(id<JavaUtilCollection>)trees
                         withDouble:(jdouble)weight {
  for (EduStanfordNlpTreesTree * __strong tree in nil_chk(trees)) {
    [self trainWithEduStanfordNlpTreesTree:tree withDouble:weight];
  }
}

- (void)trainWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)tree
                              withDouble:(jdouble)weight {
  EduStanfordNlpParserLexparserBaseLexicon_trainWithJavaUtilList_withDouble_(self, [((EduStanfordNlpTreesTree *) nil_chk(tree)) taggedYield], weight);
}

- (void)trainWithJavaUtilList:(id<JavaUtilList>)sentence
                   withDouble:(jdouble)weight {
  EduStanfordNlpParserLexparserBaseLexicon_trainWithJavaUtilList_withDouble_(self, sentence, weight);
}

- (void)incrementTreesReadWithDouble:(jdouble)weight {
  [((id<EduStanfordNlpParserLexparserUnknownWordModelTrainer>) nil_chk(uwModelTrainer_)) incrementTreesReadWithDouble:weight];
}

- (void)trainUnannotatedWithJavaUtilList:(id<JavaUtilList>)sentence
                              withDouble:(jdouble)weight {
  [((id<EduStanfordNlpParserLexparserUnknownWordModelTrainer>) nil_chk(uwModelTrainer_)) incrementTreesReadWithDouble:weight];
  jint loc = 0;
  for (EduStanfordNlpLingTaggedWord * __strong tw in nil_chk(sentence)) {
    NSString *baseTag = [((id<EduStanfordNlpTreesTreebankLanguagePack>) nil_chk([((EduStanfordNlpParserLexparserOptions *) nil_chk(op_)) langpack])) basicCategoryWithNSString:[((EduStanfordNlpLingTaggedWord *) nil_chk(tw)) tag]];
    id<EduStanfordNlpStatsCounter> counts = [((id<JavaUtilMap>) nil_chk(baseTagCounts_)) getWithId:baseTag];
    if (counts == nil) {
      ++loc;
      continue;
    }
    jdouble totalCount = [counts totalCount];
    if (totalCount == 0) {
      ++loc;
      continue;
    }
    for (NSString * __strong tag in nil_chk([counts keySet])) {
      EduStanfordNlpLingTaggedWord *newTW = new_EduStanfordNlpLingTaggedWord_initWithNSString_withNSString_([tw word], tag);
      [self trainWithEduStanfordNlpLingTaggedWord:newTW withInt:loc withDouble:weight * [counts getCountWithId:tag] / totalCount];
    }
    ++loc;
  }
}

- (void)trainWithEduStanfordNlpLingTaggedWord:(EduStanfordNlpLingTaggedWord *)tw
                                      withInt:(jint)loc
                                   withDouble:(jdouble)weight {
  [((id<EduStanfordNlpParserLexparserUnknownWordModelTrainer>) nil_chk(uwModelTrainer_)) trainWithEduStanfordNlpLingTaggedWord:tw withInt:loc withDouble:weight];
  EduStanfordNlpParserLexparserIntTaggedWord *iTW = new_EduStanfordNlpParserLexparserIntTaggedWord_initWithNSString_withNSString_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_([((EduStanfordNlpLingTaggedWord *) nil_chk(tw)) word], [tw tag], wordIndex_, tagIndex_);
  [((EduStanfordNlpStatsClassicCounter *) nil_chk(seenCounter_)) incrementCountWithId:iTW withDouble:weight];
  EduStanfordNlpParserLexparserIntTaggedWord *iT = new_EduStanfordNlpParserLexparserIntTaggedWord_initWithInt_withInt_(EduStanfordNlpParserLexparserBaseLexicon_nullWord, iTW->tag_);
  [((EduStanfordNlpStatsClassicCounter *) nil_chk(seenCounter_)) incrementCountWithId:iT withDouble:weight];
  EduStanfordNlpParserLexparserIntTaggedWord *iW = new_EduStanfordNlpParserLexparserIntTaggedWord_initWithInt_withInt_(iTW->word_, EduStanfordNlpParserLexparserBaseLexicon_nullTag);
  [((EduStanfordNlpStatsClassicCounter *) nil_chk(seenCounter_)) incrementCountWithId:iW withDouble:weight];
  EduStanfordNlpParserLexparserIntTaggedWord *i = new_EduStanfordNlpParserLexparserIntTaggedWord_initWithInt_withInt_(EduStanfordNlpParserLexparserBaseLexicon_nullWord, EduStanfordNlpParserLexparserBaseLexicon_nullTag);
  [((EduStanfordNlpStatsClassicCounter *) nil_chk(seenCounter_)) incrementCountWithId:i withDouble:weight];
  [((id<JavaUtilSet>) nil_chk(tags_)) addWithId:iT];
  [((id<JavaUtilSet>) nil_chk(words_)) addWithId:iW];
  NSString *tag = [tw tag];
  NSString *baseTag = [((id<EduStanfordNlpTreesTreebankLanguagePack>) nil_chk([((EduStanfordNlpParserLexparserOptions *) nil_chk(op_)) langpack])) basicCategoryWithNSString:tag];
  id<EduStanfordNlpStatsCounter> counts = [((id<JavaUtilMap>) nil_chk(baseTagCounts_)) getWithId:baseTag];
  if (counts == nil) {
    counts = new_EduStanfordNlpStatsClassicCounter_init();
    (void) [((id<JavaUtilMap>) nil_chk(baseTagCounts_)) putWithId:baseTag withId:counts];
  }
  [counts incrementCountWithId:tag withDouble:weight];
}

- (void)finishTraining {
  uwModel_ = [((id<EduStanfordNlpParserLexparserUnknownWordModelTrainer>) nil_chk(uwModelTrainer_)) finishTraining];
  EduStanfordNlpParserLexparserBaseLexicon_tune(self);
  [self initRulesWithWord];
}

- (void)addTaggingWithBoolean:(jboolean)seen
withEduStanfordNlpParserLexparserIntTaggedWord:(EduStanfordNlpParserLexparserIntTaggedWord *)itw
                   withDouble:(jdouble)count {
  if (seen) {
    [((EduStanfordNlpStatsClassicCounter *) nil_chk(seenCounter_)) incrementCountWithId:itw withDouble:count];
    if ([((EduStanfordNlpParserLexparserIntTaggedWord *) nil_chk(itw)) tag] == EduStanfordNlpParserLexparserBaseLexicon_nullTag) {
      [((id<JavaUtilSet>) nil_chk(words_)) addWithId:itw];
    }
    else if ([itw word] == EduStanfordNlpParserLexparserBaseLexicon_nullWord) {
      [((id<JavaUtilSet>) nil_chk(tags_)) addWithId:itw];
    }
    else {
    }
  }
  else {
    [((id<EduStanfordNlpParserLexparserUnknownWordModel>) nil_chk(uwModel_)) addTaggingWithBoolean:seen withEduStanfordNlpParserLexparserIntTaggedWord:itw withDouble:count];
  }
}

- (void)buildPT_T {
  jint numTags = [((id<EduStanfordNlpUtilIndex>) nil_chk(tagIndex_)) size];
  m_TT_ = [IOSDoubleArray newArrayWithDimensions:2 lengths:(jint[]){ numTags, numTags }];
  m_T_ = [IOSDoubleArray newArrayWithLength:numTags];
  IOSDoubleArray *tmp = [IOSDoubleArray newArrayWithLength:numTags];
  for (EduStanfordNlpParserLexparserIntTaggedWord * __strong word in nil_chk(words_)) {
    jdouble tot = 0.0;
    for (jint t = 0; t < numTags; t++) {
      EduStanfordNlpParserLexparserIntTaggedWord *iTW = new_EduStanfordNlpParserLexparserIntTaggedWord_initWithInt_withInt_(((EduStanfordNlpParserLexparserIntTaggedWord *) nil_chk(word))->word_, t);
      *IOSDoubleArray_GetRef(tmp, t) = [((EduStanfordNlpStatsClassicCounter *) nil_chk(seenCounter_)) getCountWithId:iTW];
      JrePlusAssignDoubleD(&tot, IOSDoubleArray_Get(tmp, t));
    }
    if (tot < 10) {
      continue;
    }
    for (jint t = 0; t < numTags; t++) {
      for (jint t2 = 0; t2 < numTags; t2++) {
        if (IOSDoubleArray_Get(tmp, t2) > 0.0) {
          jdouble c = IOSDoubleArray_Get(tmp, t) / tot;
          JrePlusAssignDoubleD(IOSDoubleArray_GetRef(nil_chk(m_T_), t), c);
          JrePlusAssignDoubleD(IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(m_TT_), t2)), t), c);
        }
      }
    }
  }
}

- (jfloat)scoreWithEduStanfordNlpParserLexparserIntTaggedWord:(EduStanfordNlpParserLexparserIntTaggedWord *)iTW
                                                      withInt:(jint)loc
                                                 withNSString:(NSString *)word
                                                 withNSString:(NSString *)featureSpec {
  jdouble c_TW = [((EduStanfordNlpStatsClassicCounter *) nil_chk(seenCounter_)) getCountWithId:iTW];
  EduStanfordNlpParserLexparserIntTaggedWord *temp = new_EduStanfordNlpParserLexparserIntTaggedWord_initWithInt_withInt_(((EduStanfordNlpParserLexparserIntTaggedWord *) nil_chk(iTW))->word_, EduStanfordNlpParserLexparserBaseLexicon_nullTag);
  jdouble c_W = [((EduStanfordNlpStatsClassicCounter *) nil_chk(seenCounter_)) getCountWithId:temp];
  jdouble total = [((EduStanfordNlpStatsClassicCounter *) nil_chk(seenCounter_)) getCountWithId:EduStanfordNlpParserLexparserBaseLexicon_NULL_ITW];
  jdouble totalUnseen = [((id<EduStanfordNlpStatsCounter>) nil_chk([((id<EduStanfordNlpParserLexparserUnknownWordModel>) nil_chk(uwModel_)) unSeenCounter])) getCountWithId:EduStanfordNlpParserLexparserBaseLexicon_NULL_ITW];
  temp = new_EduStanfordNlpParserLexparserIntTaggedWord_initWithInt_withInt_(EduStanfordNlpParserLexparserBaseLexicon_nullWord, iTW->tag_);
  jdouble c_T = [((EduStanfordNlpStatsClassicCounter *) nil_chk(seenCounter_)) getCountWithId:temp];
  jdouble c_Tunseen = [((id<EduStanfordNlpStatsCounter>) nil_chk([((id<EduStanfordNlpParserLexparserUnknownWordModel>) nil_chk(uwModel_)) unSeenCounter])) getCountWithId:temp];
  jdouble pb_W_T;
  jboolean seen = (c_W > 0.0);
  if (seen) {
    jdouble p_T_U;
    if (useSignatureForKnownSmoothing_) {
      p_T_U = [((id<EduStanfordNlpParserLexparserUnknownWordModel>) nil_chk([self getUnknownWordModel])) scoreProbTagGivenWordSignatureWithEduStanfordNlpParserLexparserIntTaggedWord:iTW withInt:loc withDouble:IOSDoubleArray_Get(nil_chk(smooth_), 0) withNSString:word];
    }
    else {
      p_T_U = c_Tunseen / totalUnseen;
    }
    jdouble pb_T_W;
    if (c_W > smoothInUnknownsThreshold_ && c_TW > 0.0 && c_W > 0.0) {
      pb_T_W = c_TW / c_W;
    }
    else {
      if (smartMutation_) {
        jint numTags = [((id<EduStanfordNlpUtilIndex>) nil_chk(tagIndex_)) size];
        if (m_TT_ == nil || numTags != ((IOSDoubleArray *) nil_chk(m_T_))->size_) {
          [self buildPT_T];
        }
        JreTimesAssignDoubleD(&p_T_U, 0.1);
        for (jint t = 0; t < numTags; t++) {
          EduStanfordNlpParserLexparserIntTaggedWord *iTW2 = new_EduStanfordNlpParserLexparserIntTaggedWord_initWithInt_withInt_(iTW->word_, t);
          jdouble p_T_W2 = [((EduStanfordNlpStatsClassicCounter *) nil_chk(seenCounter_)) getCountWithId:iTW2] / c_W;
          if (p_T_W2 > 0) {
            JrePlusAssignDoubleD(&p_T_U, p_T_W2 * IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(m_TT_), iTW->tag_)), t) / IOSDoubleArray_Get(nil_chk(m_T_), t) * 0.9);
          }
        }
      }
      pb_T_W = (c_TW + IOSDoubleArray_Get(nil_chk(smooth_), 1) * p_T_U) / (c_W + IOSDoubleArray_Get(smooth_, 1));
    }
    jdouble p_T = (c_T / total);
    jdouble p_W = (c_W / total);
    pb_W_T = JavaLangMath_logWithDouble_(pb_T_W * p_W / p_T);
  }
  else {
    if (loc >= 0) {
      pb_W_T = [((id<EduStanfordNlpParserLexparserUnknownWordModel>) nil_chk([self getUnknownWordModel])) scoreWithEduStanfordNlpParserLexparserIntTaggedWord:iTW withInt:loc withDouble:c_T withDouble:total withDouble:IOSDoubleArray_Get(nil_chk(smooth_), 0) withNSString:word];
    }
    else {
      jdouble pb_W0_T = [((id<EduStanfordNlpParserLexparserUnknownWordModel>) nil_chk([self getUnknownWordModel])) scoreWithEduStanfordNlpParserLexparserIntTaggedWord:iTW withInt:0 withDouble:c_T withDouble:total withDouble:IOSDoubleArray_Get(nil_chk(smooth_), 0) withNSString:word];
      jdouble pb_W1_T = [((id<EduStanfordNlpParserLexparserUnknownWordModel>) nil_chk([self getUnknownWordModel])) scoreWithEduStanfordNlpParserLexparserIntTaggedWord:iTW withInt:1 withDouble:c_T withDouble:total withDouble:IOSDoubleArray_Get(nil_chk(smooth_), 0) withNSString:word];
      pb_W_T = JavaLangMath_logWithDouble_((JavaLangMath_expWithDouble_(pb_W0_T) + 2 * JavaLangMath_expWithDouble_(pb_W1_T)) / 3);
    }
  }
  NSString *tag = [((id<EduStanfordNlpUtilIndex>) nil_chk(tagIndex_)) getWithInt:[iTW tag]];
  if (pb_W_T > -100.0) {
    return (jfloat) pb_W_T;
  }
  return JavaLangFloat_NEGATIVE_INFINITY;
}

- (void)tune {
  EduStanfordNlpParserLexparserBaseLexicon_tune(self);
}

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)ois {
  [((JavaIoObjectInputStream *) nil_chk(ois)) defaultReadObject];
  [self initRulesWithWord];
}

- (void)readDataWithJavaIoBufferedReader:(JavaIoBufferedReader *)inArg {
  NSString *SEEN = @"SEEN";
  NSString *line;
  jint lineNum = 1;
  line = [((JavaIoBufferedReader *) nil_chk(inArg)) readLine];
  JavaUtilRegexPattern *p = JavaUtilRegexPattern_compileWithNSString_(@"^smooth\\[([0-9])\\] = (.*)$");
  while (line != nil && ((jint) [line length]) > 0) {
    @try {
      JavaUtilRegexMatcher *m = [((JavaUtilRegexPattern *) nil_chk(p)) matcherWithJavaLangCharSequence:line];
      if ([((JavaUtilRegexMatcher *) nil_chk(m)) matches]) {
        jint i = JavaLangInteger_parseIntWithNSString_([m groupWithInt:1]);
        *IOSDoubleArray_GetRef(nil_chk(smooth_), i) = JavaLangDouble_parseDoubleWithNSString_([m groupWithInt:2]);
      }
      else {
        IOSObjectArray *fields = EduStanfordNlpUtilStringUtils_splitOnCharWithQuotingWithNSString_withChar_withChar_withChar_(line, ' ', '"', '\\');
        jboolean seen = [((NSString *) nil_chk(IOSObjectArray_Get(nil_chk(fields), 3))) isEqual:SEEN];
        [self addTaggingWithBoolean:seen withEduStanfordNlpParserLexparserIntTaggedWord:new_EduStanfordNlpParserLexparserIntTaggedWord_initWithNSString_withNSString_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(IOSObjectArray_Get(fields, 2), IOSObjectArray_Get(fields, 0), wordIndex_, tagIndex_) withDouble:JavaLangDouble_parseDoubleWithNSString_(IOSObjectArray_Get(fields, 4))];
      }
    }
    @catch (JavaLangRuntimeException *e) {
      @throw new_JavaIoIOException_initWithNSString_withNSException_(JreStrcat("$I$$", @"Error on line ", lineNum, @": ", line), e);
    }
    lineNum++;
    line = [inArg readLine];
  }
  [self initRulesWithWord];
}

- (void)writeDataWithJavaIoWriter:(JavaIoWriter *)w {
  JavaIoPrintWriter *out = new_JavaIoPrintWriter_initWithJavaIoWriter_(w);
  for (EduStanfordNlpParserLexparserIntTaggedWord * __strong itw in nil_chk([((EduStanfordNlpStatsClassicCounter *) nil_chk(seenCounter_)) keySet])) {
    [out printlnWithNSString:JreStrcat("$$D", [((EduStanfordNlpParserLexparserIntTaggedWord *) nil_chk(itw)) toLexicalEntryWithEduStanfordNlpUtilIndex:wordIndex_ withEduStanfordNlpUtilIndex:tagIndex_], @" SEEN ", [((EduStanfordNlpStatsClassicCounter *) nil_chk(seenCounter_)) getCountWithId:itw])];
  }
  for (EduStanfordNlpParserLexparserIntTaggedWord * __strong itw in nil_chk([((id<EduStanfordNlpStatsCounter>) nil_chk([((id<EduStanfordNlpParserLexparserUnknownWordModel>) nil_chk([self getUnknownWordModel])) unSeenCounter])) keySet])) {
    [out printlnWithNSString:JreStrcat("$$D", [((EduStanfordNlpParserLexparserIntTaggedWord *) nil_chk(itw)) toLexicalEntryWithEduStanfordNlpUtilIndex:wordIndex_ withEduStanfordNlpUtilIndex:tagIndex_], @" UNSEEN ", [((id<EduStanfordNlpStatsCounter>) nil_chk([((id<EduStanfordNlpParserLexparserUnknownWordModel>) nil_chk([self getUnknownWordModel])) unSeenCounter])) getCountWithId:itw])];
  }
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(smooth_))->size_; i++) {
    [out printlnWithNSString:JreStrcat("$I$D", @"smooth[", i, @"] = ", IOSDoubleArray_Get(smooth_, i))];
  }
  [out flush];
}

- (jint)numRules {
  jint accumulated = 0;
  {
    IOSObjectArray *a__ = rulesWithWord_;
    id<JavaUtilList> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id<JavaUtilList> const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id<JavaUtilList> lis = *b__++;
      accumulated += [((id<JavaUtilList>) nil_chk(lis)) size];
    }
  }
  return accumulated;
}

+ (void)examineIntersectionWithJavaUtilSet:(id<JavaUtilSet>)s1
                           withJavaUtilSet:(id<JavaUtilSet>)s2 {
  EduStanfordNlpParserLexparserBaseLexicon_examineIntersectionWithJavaUtilSet_withJavaUtilSet_(s1, s2);
}

- (void)printLexStats {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"BaseLexicon statistics"];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$I", @"unknownLevel is ", [((id<EduStanfordNlpParserLexparserUnknownWordModel>) nil_chk([self getUnknownWordModel])) getUnknownLevel])];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$I", @"Sum of rulesWithWord: ", [self numRules])];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$I", @"Tags size: ", [((id<JavaUtilSet>) nil_chk(tags_)) size])];
  jint wsize = [((id<JavaUtilSet>) nil_chk(words_)) size];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$I", @"Words size: ", wsize)];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$I$", @"rulesWithWord length: ", ((IOSObjectArray *) nil_chk(rulesWithWord_))->size_, @" [should be sum of words + unknown sigs]")];
  IOSIntArray *lengths = [IOSIntArray newArrayWithLength:EduStanfordNlpParserLexparserBaseLexicon_STATS_BINS];
  IOSObjectArray *wArr = [IOSObjectArray newArrayWithLength:EduStanfordNlpParserLexparserBaseLexicon_STATS_BINS type:JavaUtilArrayList_class_()];
  for (jint j = 0; j < EduStanfordNlpParserLexparserBaseLexicon_STATS_BINS; j++) {
    (void) IOSObjectArray_SetAndConsume(wArr, j, new_JavaUtilArrayList_init());
  }
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(rulesWithWord_))->size_; i++) {
    jint num = [((id<JavaUtilList>) nil_chk(IOSObjectArray_Get(rulesWithWord_, i))) size];
    if (num > EduStanfordNlpParserLexparserBaseLexicon_STATS_BINS - 1) {
      num = EduStanfordNlpParserLexparserBaseLexicon_STATS_BINS - 1;
    }
    (*IOSIntArray_GetRef(lengths, num))++;
    if (wsize <= 20 || num >= EduStanfordNlpParserLexparserBaseLexicon_STATS_BINS / 2) {
      [((JavaUtilArrayList *) nil_chk(IOSObjectArray_Get(wArr, num))) addWithId:[((id<EduStanfordNlpUtilIndex>) nil_chk(wordIndex_)) getWithInt:i]];
    }
  }
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"Stats on how many taggings for how many words"];
  for (jint j = 0; j < EduStanfordNlpParserLexparserBaseLexicon_STATS_BINS; j++) {
    [JreLoadStatic(JavaLangSystem, out) printWithNSString:JreStrcat("I$I$", j, @" taggings: ", IOSIntArray_Get(lengths, j), @" words ")];
    if (wsize <= 20 || j >= EduStanfordNlpParserLexparserBaseLexicon_STATS_BINS / 2) {
      [JreLoadStatic(JavaLangSystem, out) printWithId:IOSObjectArray_Get(wArr, j)];
    }
    [JreLoadStatic(JavaLangSystem, out) println];
  }
  JavaTextNumberFormat *nf = JavaTextNumberFormat_getNumberInstance();
  [((JavaTextNumberFormat *) nil_chk(nf)) setMaximumFractionDigitsWithInt:0];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$$", @"Unseen counter: ", EduStanfordNlpStatsCounters_toStringWithEduStanfordNlpStatsCounter_withJavaTextNumberFormat_([((id<EduStanfordNlpParserLexparserUnknownWordModel>) nil_chk(uwModel_)) unSeenCounter], nf))];
  if (wsize < 50 && [((id<JavaUtilSet>) nil_chk(tags_)) size] < 10) {
    [nf setMaximumFractionDigitsWithInt:3];
    JavaIoStringWriter *sw = new_JavaIoStringWriter_init();
    JavaIoPrintWriter *pw = new_JavaIoPrintWriter_initWithJavaIoWriter_(sw);
    [pw printlnWithNSString:@"Tagging probabilities log P(word|tag)"];
    for (jint t = 0; t < [((id<JavaUtilSet>) nil_chk(tags_)) size]; t++) {
      [pw printWithChar:0x0009];
      [pw printWithNSString:[((id<EduStanfordNlpUtilIndex>) nil_chk(tagIndex_)) getWithInt:t]];
    }
    [pw println];
    for (jint w = 0; w < wsize; w++) {
      [pw printWithNSString:[((id<EduStanfordNlpUtilIndex>) nil_chk(wordIndex_)) getWithInt:w]];
      [pw printWithChar:0x0009];
      for (jint t = 0; t < [((id<JavaUtilSet>) nil_chk(tags_)) size]; t++) {
        EduStanfordNlpParserLexparserIntTaggedWord *iTW = new_EduStanfordNlpParserLexparserIntTaggedWord_initWithInt_withInt_(w, t);
        [pw printWithNSString:[nf formatWithDouble:[self scoreWithEduStanfordNlpParserLexparserIntTaggedWord:iTW withInt:1 withNSString:[wordIndex_ getWithInt:w] withNSString:nil]]];
        if (t == [((id<JavaUtilSet>) nil_chk(tags_)) size] - 1) {
          [pw println];
        }
        else [pw printWithChar:0x0009];
      }
    }
    [pw close];
    [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:[sw description]];
  }
}

- (jdouble)evaluateCoverageWithJavaUtilCollection:(id<JavaUtilCollection>)trees
                                  withJavaUtilSet:(id<JavaUtilSet>)missingWords
                                  withJavaUtilSet:(id<JavaUtilSet>)missingTags
                                  withJavaUtilSet:(id<JavaUtilSet>)missingTW {
  id<JavaUtilList> iTW1 = new_JavaUtilArrayList_init();
  for (EduStanfordNlpTreesTree * __strong t in nil_chk(trees)) {
    [iTW1 addAllWithJavaUtilCollection:[self treeToEventsWithEduStanfordNlpTreesTree:t]];
  }
  jint total = 0;
  jint unseen = 0;
  for (EduStanfordNlpParserLexparserIntTaggedWord * __strong itw in iTW1) {
    total++;
    if (![((id<JavaUtilSet>) nil_chk(words_)) containsWithId:new_EduStanfordNlpParserLexparserIntTaggedWord_initWithInt_withInt_([((EduStanfordNlpParserLexparserIntTaggedWord *) nil_chk(itw)) word], EduStanfordNlpParserLexparserBaseLexicon_nullTag)]) {
      [((id<JavaUtilSet>) nil_chk(missingWords)) addWithId:[((id<EduStanfordNlpUtilIndex>) nil_chk(wordIndex_)) getWithInt:[itw word]]];
    }
    if (![((id<JavaUtilSet>) nil_chk(tags_)) containsWithId:new_EduStanfordNlpParserLexparserIntTaggedWord_initWithInt_withInt_(EduStanfordNlpParserLexparserBaseLexicon_nullWord, [itw tag])]) {
      [((id<JavaUtilSet>) nil_chk(missingTags)) addWithId:[((id<EduStanfordNlpUtilIndex>) nil_chk(tagIndex_)) getWithInt:[itw tag]]];
    }
    if ([((EduStanfordNlpStatsClassicCounter *) nil_chk(seenCounter_)) getCountWithId:itw] == 0.0) {
      unseen++;
      [((id<JavaUtilSet>) nil_chk(missingTW)) addWithId:itw];
    }
  }
  return (jdouble) unseen / total;
}

- (jint)getBaseTagWithInt:(jint)tag
withEduStanfordNlpTreesTreebankLanguagePack:(id<EduStanfordNlpTreesTreebankLanguagePack>)tlp {
  if (tagsToBaseTags_ == nil) {
    EduStanfordNlpParserLexparserBaseLexicon_populateTagsToBaseTagsWithEduStanfordNlpTreesTreebankLanguagePack_(self, tlp);
  }
  return IOSIntArray_Get(nil_chk(tagsToBaseTags_), tag);
}

- (void)populateTagsToBaseTagsWithEduStanfordNlpTreesTreebankLanguagePack:(id<EduStanfordNlpTreesTreebankLanguagePack>)tlp {
  EduStanfordNlpParserLexparserBaseLexicon_populateTagsToBaseTagsWithEduStanfordNlpTreesTreebankLanguagePack_(self, tlp);
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  EduStanfordNlpParserLexparserBaseLexicon_mainWithNSStringArray_(args);
}

- (id<EduStanfordNlpParserLexparserUnknownWordModel>)getUnknownWordModel {
  return uwModel_;
}

- (void)setUnknownWordModelWithEduStanfordNlpParserLexparserUnknownWordModel:(id<EduStanfordNlpParserLexparserUnknownWordModel>)uwm {
  self->uwModel_ = uwm;
}

- (void)trainWithJavaUtilCollection:(id<JavaUtilCollection>)trees
             withJavaUtilCollection:(id<JavaUtilCollection>)rawTrees {
  [self trainWithJavaUtilCollection:trees];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, 3, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 6, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, 7, 8, -1, 9, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, 10, 11, -1, 12, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, 10, 13, -1, 14, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, 10, 15, -1, 16, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x4, 17, 18, -1, 19, -1, -1 },
    { NULL, "LJavaUtilList;", 0x4, 20, 21, -1, 22, -1, -1 },
    { NULL, "V", 0x1, 23, 21, -1, 24, -1, -1 },
    { NULL, "V", 0x1, 23, 25, -1, 26, -1, -1 },
    { NULL, "V", 0x1, 27, 28, -1, 29, -1, -1 },
    { NULL, "V", 0x1, 30, 31, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 32, 28, -1, 33, -1, -1 },
    { NULL, "V", 0x1, 32, 34, -1, 35, -1, -1 },
    { NULL, "V", 0x1, 32, 36, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 32, 25, -1, 26, -1, -1 },
    { NULL, "V", 0x11, 37, 31, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 38, 25, -1, 26, -1, -1 },
    { NULL, "V", 0x1, 32, 39, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 40, 41, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, 42, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 44, 45, 46, -1, -1, -1 },
    { NULL, "V", 0x1, 47, 48, 49, -1, -1, -1 },
    { NULL, "V", 0x1, 50, 51, 49, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0xc, 52, 53, -1, 54, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, 55, 56, -1, 57, -1, -1 },
    { NULL, "I", 0x1, 58, 59, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 60, 61, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 62, 63, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpParserLexparserUnknownWordModel;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 64, 65, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 32, 66, -1, 67, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpUtilIndex:withEduStanfordNlpUtilIndex:);
  methods[1].selector = @selector(initWithEduStanfordNlpParserLexparserOptions:withEduStanfordNlpUtilIndex:withEduStanfordNlpUtilIndex:);
  methods[2].selector = @selector(isKnownWithInt:);
  methods[3].selector = @selector(isKnownWithNSString:);
  methods[4].selector = @selector(tagSetWithJavaUtilFunctionFunction:);
  methods[5].selector = @selector(ruleIteratorByWordWithNSString:withInt:);
  methods[6].selector = @selector(ruleIteratorByWordWithInt:withInt:withNSString:);
  methods[7].selector = @selector(ruleIteratorByWordWithNSString:withInt:withNSString:);
  methods[8].selector = @selector(initRulesWithWord);
  methods[9].selector = @selector(treeToEventsWithEduStanfordNlpTreesTree:);
  methods[10].selector = @selector(listToEventsWithJavaUtilList:);
  methods[11].selector = @selector(addAllWithJavaUtilList:);
  methods[12].selector = @selector(addAllWithJavaUtilList:withDouble:);
  methods[13].selector = @selector(trainWithExpansionWithJavaUtilCollection:);
  methods[14].selector = @selector(initializeTrainingWithDouble:);
  methods[15].selector = @selector(trainWithJavaUtilCollection:);
  methods[16].selector = @selector(trainWithJavaUtilCollection:withDouble:);
  methods[17].selector = @selector(trainWithEduStanfordNlpTreesTree:withDouble:);
  methods[18].selector = @selector(trainWithJavaUtilList:withDouble:);
  methods[19].selector = @selector(incrementTreesReadWithDouble:);
  methods[20].selector = @selector(trainUnannotatedWithJavaUtilList:withDouble:);
  methods[21].selector = @selector(trainWithEduStanfordNlpLingTaggedWord:withInt:withDouble:);
  methods[22].selector = @selector(finishTraining);
  methods[23].selector = @selector(addTaggingWithBoolean:withEduStanfordNlpParserLexparserIntTaggedWord:withDouble:);
  methods[24].selector = @selector(buildPT_T);
  methods[25].selector = @selector(scoreWithEduStanfordNlpParserLexparserIntTaggedWord:withInt:withNSString:withNSString:);
  methods[26].selector = @selector(tune);
  methods[27].selector = @selector(readObjectWithJavaIoObjectInputStream:);
  methods[28].selector = @selector(readDataWithJavaIoBufferedReader:);
  methods[29].selector = @selector(writeDataWithJavaIoWriter:);
  methods[30].selector = @selector(numRules);
  methods[31].selector = @selector(examineIntersectionWithJavaUtilSet:withJavaUtilSet:);
  methods[32].selector = @selector(printLexStats);
  methods[33].selector = @selector(evaluateCoverageWithJavaUtilCollection:withJavaUtilSet:withJavaUtilSet:withJavaUtilSet:);
  methods[34].selector = @selector(getBaseTagWithInt:withEduStanfordNlpTreesTreebankLanguagePack:);
  methods[35].selector = @selector(populateTagsToBaseTagsWithEduStanfordNlpTreesTreebankLanguagePack:);
  methods[36].selector = @selector(mainWithNSStringArray:);
  methods[37].selector = @selector(getUnknownWordModel);
  methods[38].selector = @selector(setUnknownWordModelWithEduStanfordNlpParserLexparserUnknownWordModel:);
  methods[39].selector = @selector(trainWithJavaUtilCollection:withJavaUtilCollection:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "uwModel_", "LEduStanfordNlpParserLexparserUnknownWordModel;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "uwModelTrainerClass_", "LNSString;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "uwModelTrainer_", "LEduStanfordNlpParserLexparserUnknownWordModelTrainer;", .constantValue.asLong = 0, 0x84, -1, -1, -1, -1 },
    { "DEBUG_LEXICON", "Z", .constantValue.asBOOL = EduStanfordNlpParserLexparserBaseLexicon_DEBUG_LEXICON, 0x1c, -1, -1, -1, -1 },
    { "DEBUG_LEXICON_SCORE", "Z", .constantValue.asBOOL = EduStanfordNlpParserLexparserBaseLexicon_DEBUG_LEXICON_SCORE, 0x1c, -1, -1, -1, -1 },
    { "nullWord", "I", .constantValue.asInt = EduStanfordNlpParserLexparserBaseLexicon_nullWord, 0x1c, -1, -1, -1, -1 },
    { "nullTag", "S", .constantValue.asShort = EduStanfordNlpParserLexparserBaseLexicon_nullTag, 0x1c, -1, -1, -1, -1 },
    { "NULL_ITW", "LEduStanfordNlpParserLexparserIntTaggedWord;", .constantValue.asLong = 0, 0x1c, -1, 68, -1, -1 },
    { "trainOptions_", "LEduStanfordNlpParserLexparserTrainOptions;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "testOptions_", "LEduStanfordNlpParserLexparserTestOptions;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "op_", "LEduStanfordNlpParserLexparserOptions;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "smoothInUnknownsThreshold_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "smartMutation_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "wordIndex_", "LEduStanfordNlpUtilIndex;", .constantValue.asLong = 0, 0x14, -1, -1, 69, -1 },
    { "tagIndex_", "LEduStanfordNlpUtilIndex;", .constantValue.asLong = 0, 0x14, -1, -1, 69, -1 },
    { "rulesWithWord_", "[LJavaUtilList;", .constantValue.asLong = 0, 0x81, -1, -1, 70, -1 },
    { "tags_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x84, -1, -1, 71, -1 },
    { "words_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x84, -1, -1, 71, -1 },
    { "seenCounter_", "LEduStanfordNlpStatsClassicCounter;", .constantValue.asLong = 0, 0x1, -1, -1, 72, -1 },
    { "smooth_", "[D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "m_TT_", "[[D", .constantValue.asLong = 0, 0x80, -1, -1, -1, -1 },
    { "m_T_", "[D", .constantValue.asLong = 0, 0x80, -1, -1, -1, -1 },
    { "flexiTag_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "useSignatureForKnownSmoothing_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "baseTagCounts_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 73, -1 },
    { "debugLastWord_", "I", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "debugLoc_", "I", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "debugProbs_", "LJavaLangStringBuilder;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "debugNoProbs_", "LJavaLangStringBuilder;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "debugPrefix_", "LNSString;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "STATS_BINS", "I", .constantValue.asInt = EduStanfordNlpParserLexparserBaseLexicon_STATS_BINS, 0x1a, -1, -1, -1, -1 },
    { "tagsToBaseTags_", "[I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpParserLexparserBaseLexicon_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpUtilIndex;LEduStanfordNlpUtilIndex;", "(Ledu/stanford/nlp/util/Index<Ljava/lang/String;>;Ledu/stanford/nlp/util/Index<Ljava/lang/String;>;)V", "LEduStanfordNlpParserLexparserOptions;LEduStanfordNlpUtilIndex;LEduStanfordNlpUtilIndex;", "(Ledu/stanford/nlp/parser/lexparser/Options;Ledu/stanford/nlp/util/Index<Ljava/lang/String;>;Ledu/stanford/nlp/util/Index<Ljava/lang/String;>;)V", "isKnown", "I", "LNSString;", "tagSet", "LJavaUtilFunctionFunction;", "(Ljava/util/function/Function<Ljava/lang/String;Ljava/lang/String;>;)Ljava/util/Set<Ljava/lang/String;>;", "ruleIteratorByWord", "LNSString;I", "(Ljava/lang/String;I)Ljava/util/Iterator<Ledu/stanford/nlp/parser/lexparser/IntTaggedWord;>;", "IILNSString;", "(IILjava/lang/String;)Ljava/util/Iterator<Ledu/stanford/nlp/parser/lexparser/IntTaggedWord;>;", "LNSString;ILNSString;", "(Ljava/lang/String;ILjava/lang/String;)Ljava/util/Iterator<Ledu/stanford/nlp/parser/lexparser/IntTaggedWord;>;", "treeToEvents", "LEduStanfordNlpTreesTree;", "(Ledu/stanford/nlp/trees/Tree;)Ljava/util/List<Ledu/stanford/nlp/parser/lexparser/IntTaggedWord;>;", "listToEvents", "LJavaUtilList;", "(Ljava/util/List<Ledu/stanford/nlp/ling/TaggedWord;>;)Ljava/util/List<Ledu/stanford/nlp/parser/lexparser/IntTaggedWord;>;", "addAll", "(Ljava/util/List<Ledu/stanford/nlp/ling/TaggedWord;>;)V", "LJavaUtilList;D", "(Ljava/util/List<Ledu/stanford/nlp/ling/TaggedWord;>;D)V", "trainWithExpansion", "LJavaUtilCollection;", "(Ljava/util/Collection<Ledu/stanford/nlp/ling/TaggedWord;>;)V", "initializeTraining", "D", "train", "(Ljava/util/Collection<Ledu/stanford/nlp/trees/Tree;>;)V", "LJavaUtilCollection;D", "(Ljava/util/Collection<Ledu/stanford/nlp/trees/Tree;>;D)V", "LEduStanfordNlpTreesTree;D", "incrementTreesRead", "trainUnannotated", "LEduStanfordNlpLingTaggedWord;ID", "addTagging", "ZLEduStanfordNlpParserLexparserIntTaggedWord;D", "score", "LEduStanfordNlpParserLexparserIntTaggedWord;ILNSString;LNSString;", "readObject", "LJavaIoObjectInputStream;", "LJavaIoIOException;LJavaLangClassNotFoundException;", "readData", "LJavaIoBufferedReader;", "LJavaIoIOException;", "writeData", "LJavaIoWriter;", "examineIntersection", "LJavaUtilSet;LJavaUtilSet;", "(Ljava/util/Set<Ljava/lang/String;>;Ljava/util/Set<Ljava/lang/String;>;)V", "evaluateCoverage", "LJavaUtilCollection;LJavaUtilSet;LJavaUtilSet;LJavaUtilSet;", "(Ljava/util/Collection<Ledu/stanford/nlp/trees/Tree;>;Ljava/util/Set<Ljava/lang/String;>;Ljava/util/Set<Ljava/lang/String;>;Ljava/util/Set<Ledu/stanford/nlp/parser/lexparser/IntTaggedWord;>;)D", "getBaseTag", "ILEduStanfordNlpTreesTreebankLanguagePack;", "populateTagsToBaseTags", "LEduStanfordNlpTreesTreebankLanguagePack;", "main", "[LNSString;", "setUnknownWordModel", "LEduStanfordNlpParserLexparserUnknownWordModel;", "LJavaUtilCollection;LJavaUtilCollection;", "(Ljava/util/Collection<Ledu/stanford/nlp/trees/Tree;>;Ljava/util/Collection<Ledu/stanford/nlp/trees/Tree;>;)V", &EduStanfordNlpParserLexparserBaseLexicon_NULL_ITW, "Ledu/stanford/nlp/util/Index<Ljava/lang/String;>;", "[Ljava/util/List<Ledu/stanford/nlp/parser/lexparser/IntTaggedWord;>;", "Ljava/util/Set<Ledu/stanford/nlp/parser/lexparser/IntTaggedWord;>;", "Ledu/stanford/nlp/stats/ClassicCounter<Ledu/stanford/nlp/parser/lexparser/IntTaggedWord;>;", "Ljava/util/Map<Ljava/lang/String;Ledu/stanford/nlp/stats/Counter<Ljava/lang/String;>;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpParserLexparserBaseLexicon = { "BaseLexicon", "edu.stanford.nlp.parser.lexparser", ptrTable, methods, fields, 7, 0x1, 40, 33, -1, -1, -1, -1, -1 };
  return &_EduStanfordNlpParserLexparserBaseLexicon;
}

+ (void)initialize {
  if (self == [EduStanfordNlpParserLexparserBaseLexicon class]) {
    EduStanfordNlpParserLexparserBaseLexicon_NULL_ITW = new_EduStanfordNlpParserLexparserIntTaggedWord_initWithInt_withInt_(EduStanfordNlpParserLexparserBaseLexicon_nullWord, EduStanfordNlpParserLexparserBaseLexicon_nullTag);
    J2OBJC_SET_INITIALIZED(EduStanfordNlpParserLexparserBaseLexicon)
  }
}

@end

void EduStanfordNlpParserLexparserBaseLexicon_initWithEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(EduStanfordNlpParserLexparserBaseLexicon *self, id<EduStanfordNlpUtilIndex> wordIndex, id<EduStanfordNlpUtilIndex> tagIndex) {
  EduStanfordNlpParserLexparserBaseLexicon_initWithEduStanfordNlpParserLexparserOptions_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(self, new_EduStanfordNlpParserLexparserOptions_init(), wordIndex, tagIndex);
}

EduStanfordNlpParserLexparserBaseLexicon *new_EduStanfordNlpParserLexparserBaseLexicon_initWithEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(id<EduStanfordNlpUtilIndex> wordIndex, id<EduStanfordNlpUtilIndex> tagIndex) {
  J2OBJC_NEW_IMPL(EduStanfordNlpParserLexparserBaseLexicon, initWithEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_, wordIndex, tagIndex)
}

EduStanfordNlpParserLexparserBaseLexicon *create_EduStanfordNlpParserLexparserBaseLexicon_initWithEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(id<EduStanfordNlpUtilIndex> wordIndex, id<EduStanfordNlpUtilIndex> tagIndex) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpParserLexparserBaseLexicon, initWithEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_, wordIndex, tagIndex)
}

void EduStanfordNlpParserLexparserBaseLexicon_initWithEduStanfordNlpParserLexparserOptions_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(EduStanfordNlpParserLexparserBaseLexicon *self, EduStanfordNlpParserLexparserOptions *op, id<EduStanfordNlpUtilIndex> wordIndex, id<EduStanfordNlpUtilIndex> tagIndex) {
  NSObject_init(self);
  self->tags_ = EduStanfordNlpUtilGenerics_newHashSet();
  self->words_ = EduStanfordNlpUtilGenerics_newHashSet();
  self->seenCounter_ = new_EduStanfordNlpStatsClassicCounter_init();
  self->smooth_ = [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ 1.0, 1.0 } count:2];
  self->baseTagCounts_ = EduStanfordNlpUtilGenerics_newHashMap();
  self->debugLastWord_ = -1;
  self->debugLoc_ = -1;
  self->tagsToBaseTags_ = nil;
  self->wordIndex_ = wordIndex;
  self->tagIndex_ = tagIndex;
  self->flexiTag_ = ((EduStanfordNlpParserLexparserOptions_LexOptions *) nil_chk(((EduStanfordNlpParserLexparserOptions *) nil_chk(op))->lexOptions_))->flexiTag_;
  self->useSignatureForKnownSmoothing_ = op->lexOptions_->useSignatureForKnownSmoothing_;
  self->smoothInUnknownsThreshold_ = op->lexOptions_->smoothInUnknownsThreshold_;
  self->smartMutation_ = op->lexOptions_->smartMutation_;
  self->trainOptions_ = op->trainOptions_;
  self->testOptions_ = op->testOptions_;
  self->op_ = op;
  if (op->lexOptions_->uwModelTrainer_ == nil) {
    self->uwModelTrainerClass_ = @"edu.stanford.nlp.parser.lexparser.BaseUnknownWordModelTrainer";
  }
  else {
    self->uwModelTrainerClass_ = op->lexOptions_->uwModelTrainer_;
  }
}

EduStanfordNlpParserLexparserBaseLexicon *new_EduStanfordNlpParserLexparserBaseLexicon_initWithEduStanfordNlpParserLexparserOptions_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(EduStanfordNlpParserLexparserOptions *op, id<EduStanfordNlpUtilIndex> wordIndex, id<EduStanfordNlpUtilIndex> tagIndex) {
  J2OBJC_NEW_IMPL(EduStanfordNlpParserLexparserBaseLexicon, initWithEduStanfordNlpParserLexparserOptions_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_, op, wordIndex, tagIndex)
}

EduStanfordNlpParserLexparserBaseLexicon *create_EduStanfordNlpParserLexparserBaseLexicon_initWithEduStanfordNlpParserLexparserOptions_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(EduStanfordNlpParserLexparserOptions *op, id<EduStanfordNlpUtilIndex> wordIndex, id<EduStanfordNlpUtilIndex> tagIndex) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpParserLexparserBaseLexicon, initWithEduStanfordNlpParserLexparserOptions_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_, op, wordIndex, tagIndex)
}

void EduStanfordNlpParserLexparserBaseLexicon_trainWithJavaUtilList_withDouble_(EduStanfordNlpParserLexparserBaseLexicon *self, id<JavaUtilList> sentence, jdouble weight) {
  [((id<EduStanfordNlpParserLexparserUnknownWordModelTrainer>) nil_chk(self->uwModelTrainer_)) incrementTreesReadWithDouble:weight];
  jint loc = 0;
  for (EduStanfordNlpLingTaggedWord * __strong tw in nil_chk(sentence)) {
    [self trainWithEduStanfordNlpLingTaggedWord:tw withInt:loc withDouble:weight];
    ++loc;
  }
}

void EduStanfordNlpParserLexparserBaseLexicon_tune(EduStanfordNlpParserLexparserBaseLexicon *self) {
  jdouble bestScore = JavaLangDouble_NEGATIVE_INFINITY;
  IOSDoubleArray *bestSmooth = [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ 0.0, 0.0 } count:2];
  for (*IOSDoubleArray_GetRef(nil_chk(self->smooth_), 0) = 1; IOSDoubleArray_Get(self->smooth_, 0) <= 1; JreTimesAssignDoubleD(IOSDoubleArray_GetRef(self->smooth_, 0), 2.0)) {
    for (*IOSDoubleArray_GetRef(self->smooth_, 1) = 0.2; IOSDoubleArray_Get(self->smooth_, 1) <= 0.2; JreTimesAssignDoubleD(IOSDoubleArray_GetRef(nil_chk(self->smooth_), 1), 2.0)) {
      jdouble score = 0.0;
      if (((EduStanfordNlpParserLexparserTestOptions *) nil_chk(self->testOptions_))->verbose_) {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$D$D$D", @"Tuning lexicon: s0 ", IOSDoubleArray_Get(self->smooth_, 0), @" s1 ", IOSDoubleArray_Get(self->smooth_, 1), @" is ", score)];
      }
      if (score > bestScore) {
        JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->smooth_, 0, bestSmooth, 0, ((IOSDoubleArray *) nil_chk(self->smooth_))->size_);
        bestScore = score;
      }
    }
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(bestSmooth, 0, self->smooth_, 0, bestSmooth->size_);
  if (self->smartMutation_) {
    *IOSDoubleArray_GetRef(nil_chk(self->smooth_), 0) = 8.0;
    *IOSDoubleArray_GetRef(self->smooth_, 1) = 0.1;
  }
  if (((EduStanfordNlpParserLexparserTestOptions *) nil_chk(self->testOptions_))->unseenSmooth_ > 0.0) {
    *IOSDoubleArray_GetRef(nil_chk(self->smooth_), 0) = self->testOptions_->unseenSmooth_;
  }
  if (self->testOptions_->verbose_) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$D$D$D", @"Tuning selected smoothUnseen ", IOSDoubleArray_Get(nil_chk(self->smooth_), 0), @" smoothSeen ", IOSDoubleArray_Get(self->smooth_, 1), @" at ", bestScore)];
  }
}

void EduStanfordNlpParserLexparserBaseLexicon_examineIntersectionWithJavaUtilSet_withJavaUtilSet_(id<JavaUtilSet> s1, id<JavaUtilSet> s2) {
  EduStanfordNlpParserLexparserBaseLexicon_initialize();
  id<JavaUtilSet> knownTypes = EduStanfordNlpUtilGenerics_newHashSetWithJavaUtilCollection_(s1);
  [((id<JavaUtilSet>) nil_chk(knownTypes)) retainAllWithJavaUtilCollection:s2];
  if ([knownTypes size] != 0) {
    (void) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printfWithNSString:@"|intersect|: %d%n" withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_([knownTypes size]) } count:1 type:NSObject_class_()]];
    for (NSString * __strong word in knownTypes) {
      [JreLoadStatic(JavaLangSystem, err) printWithNSString:JreStrcat("$C", word, ' ')];
    }
    [JreLoadStatic(JavaLangSystem, err) println];
  }
}

void EduStanfordNlpParserLexparserBaseLexicon_populateTagsToBaseTagsWithEduStanfordNlpTreesTreebankLanguagePack_(EduStanfordNlpParserLexparserBaseLexicon *self, id<EduStanfordNlpTreesTreebankLanguagePack> tlp) {
  jint total = [((id<EduStanfordNlpUtilIndex>) nil_chk(self->tagIndex_)) size];
  self->tagsToBaseTags_ = [IOSIntArray newArrayWithLength:total];
  for (jint i = 0; i < total; i++) {
    NSString *tag = [self->tagIndex_ getWithInt:i];
    NSString *baseTag = [((id<EduStanfordNlpTreesTreebankLanguagePack>) nil_chk(tlp)) basicCategoryWithNSString:tag];
    jint j = [self->tagIndex_ addToIndexWithId:baseTag];
    *IOSIntArray_GetRef(nil_chk(self->tagsToBaseTags_), i) = j;
  }
}

void EduStanfordNlpParserLexparserBaseLexicon_mainWithNSStringArray_(IOSObjectArray *args) {
  EduStanfordNlpParserLexparserBaseLexicon_initialize();
  if (((IOSObjectArray *) nil_chk(args))->size_ < 3) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"java BaseLexicon treebankPath fileRange unknownWordModel words*"];
    return;
  }
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printWithNSString:JreStrcat("$$C$$", @"Training BaseLexicon from ", IOSObjectArray_Get(args, 0), ' ', IOSObjectArray_Get(args, 1), @" ... ")];
  EduStanfordNlpTreesTreebank *tb = new_EduStanfordNlpTreesDiskTreebank_init();
  [tb loadPathWithNSString:IOSObjectArray_Get(args, 0) withJavaIoFileFilter:new_EduStanfordNlpIoNumberRangesFileFilter_initWithNSString_withBoolean_(IOSObjectArray_Get(args, 1), true)];
  id<EduStanfordNlpUtilIndex> wordIndex = new_EduStanfordNlpUtilHashIndex_init();
  id<EduStanfordNlpUtilIndex> tagIndex = new_EduStanfordNlpUtilHashIndex_init();
  EduStanfordNlpParserLexparserOptions *op = new_EduStanfordNlpParserLexparserOptions_init();
  ((EduStanfordNlpParserLexparserOptions_LexOptions *) nil_chk(op->lexOptions_))->useUnknownWordSignatures_ = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, 2));
  EduStanfordNlpParserLexparserBaseLexicon *lex = new_EduStanfordNlpParserLexparserBaseLexicon_initWithEduStanfordNlpParserLexparserOptions_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(op, wordIndex, tagIndex);
  [lex initializeTrainingWithDouble:[tb size]];
  [lex trainWithJavaUtilCollection:tb];
  [lex finishTraining];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"done."];
  [JreLoadStatic(JavaLangSystem, out) println];
  JavaTextNumberFormat *nf = JavaTextNumberFormat_getNumberInstance();
  [((JavaTextNumberFormat *) nil_chk(nf)) setMaximumFractionDigitsWithInt:4];
  id<JavaUtilList> impos = new_JavaUtilArrayList_init();
  for (jint i = 3; i < args->size_; i++) {
    if ([lex isKnownWithNSString:IOSObjectArray_Get(args, i)]) {
      [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$$", IOSObjectArray_Get(args, i), @" is a known word.  Log probabilities [log P(w|t)] for its taggings are:")];
      for (id<JavaUtilIterator> it = [lex ruleIteratorByWordWithInt:[wordIndex addToIndexWithId:IOSObjectArray_Get(args, i)] withInt:i - 3 withNSString:nil]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
        EduStanfordNlpParserLexparserIntTaggedWord *iTW = [it next];
        [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$$", EduStanfordNlpUtilStringUtils_padWithId_withInt_(iTW, 24), [nf formatWithDouble:[lex scoreWithEduStanfordNlpParserLexparserIntTaggedWord:iTW withInt:i - 3 withNSString:[wordIndex getWithInt:((EduStanfordNlpParserLexparserIntTaggedWord *) nil_chk(iTW))->word_] withNSString:nil]])];
      }
    }
    else {
      NSString *sig = [((id<EduStanfordNlpParserLexparserUnknownWordModel>) nil_chk([lex getUnknownWordModel])) getSignatureWithNSString:IOSObjectArray_Get(args, i) withInt:i - 3];
      [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$$I$$$", IOSObjectArray_Get(args, i), @" is an unknown word.  Signature with uwm ", [((id<EduStanfordNlpParserLexparserUnknownWordModel>) nil_chk([lex getUnknownWordModel])) getUnknownLevel], ((i == 3) ? @" init" : @"non-init"), @" is: ", sig)];
      [impos clear];
      id<JavaUtilList> lis = new_JavaUtilArrayList_initWithJavaUtilCollection_([tagIndex objectsList]);
      JavaUtilCollections_sortWithJavaUtilList_(lis);
      for (NSString * __strong tStr in lis) {
        EduStanfordNlpParserLexparserIntTaggedWord *iTW = new_EduStanfordNlpParserLexparserIntTaggedWord_initWithNSString_withNSString_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(IOSObjectArray_Get(args, i), tStr, wordIndex, tagIndex);
        jdouble score = [lex scoreWithEduStanfordNlpParserLexparserIntTaggedWord:iTW withInt:1 withNSString:IOSObjectArray_Get(args, i) withNSString:nil];
        if (score == JavaLangFloat_NEGATIVE_INFINITY) {
          [impos addWithId:tStr];
        }
        else {
          [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$$", EduStanfordNlpUtilStringUtils_padWithId_withInt_(iTW, 24), [nf formatWithDouble:score])];
        }
      }
      if ([impos size] > 0) {
        [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$$@", IOSObjectArray_Get(args, i), @" impossible tags: ", impos)];
      }
    }
    [JreLoadStatic(JavaLangSystem, out) println];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpParserLexparserBaseLexicon)
