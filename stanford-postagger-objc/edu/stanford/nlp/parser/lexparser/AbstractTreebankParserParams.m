//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/parser/lexparser/AbstractTreebankParserParams.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/ling/CategoryWordTag.h"
#include "edu/stanford/nlp/ling/HasTag.h"
#include "edu/stanford/nlp/ling/Label.h"
#include "edu/stanford/nlp/parser/lexparser/AbstractTreebankParserParams.h"
#include "edu/stanford/nlp/parser/lexparser/BaseLexicon.h"
#include "edu/stanford/nlp/parser/lexparser/Extractor.h"
#include "edu/stanford/nlp/parser/lexparser/Lexicon.h"
#include "edu/stanford/nlp/parser/lexparser/MLEDependencyGrammarExtractor.h"
#include "edu/stanford/nlp/parser/lexparser/Options.h"
#include "edu/stanford/nlp/parser/metrics/AbstractEval.h"
#include "edu/stanford/nlp/parser/tools/PunctEquivalenceClasser.h"
#include "edu/stanford/nlp/process/TokenizerFactory.h"
#include "edu/stanford/nlp/stats/EquivalenceClasser.h"
#include "edu/stanford/nlp/trees/DependencyTyper.h"
#include "edu/stanford/nlp/trees/DiskTreebank.h"
#include "edu/stanford/nlp/trees/GrammaticalStructure.h"
#include "edu/stanford/nlp/trees/HeadFinder.h"
#include "edu/stanford/nlp/trees/LabeledConstituent.h"
#include "edu/stanford/nlp/trees/LabeledScoredTreeFactory.h"
#include "edu/stanford/nlp/trees/MemoryTreebank.h"
#include "edu/stanford/nlp/trees/SimpleConstituent.h"
#include "edu/stanford/nlp/trees/Tree.h"
#include "edu/stanford/nlp/trees/TreeFactory.h"
#include "edu/stanford/nlp/trees/TreeReaderFactory.h"
#include "edu/stanford/nlp/trees/TreeTokenizerFactory.h"
#include "edu/stanford/nlp/trees/TreeTransformer.h"
#include "edu/stanford/nlp/trees/Treebank.h"
#include "edu/stanford/nlp/trees/TreebankLanguagePack.h"
#include "edu/stanford/nlp/trees/tregex/TregexMatcher.h"
#include "edu/stanford/nlp/util/Index.h"
#include "java/io/OutputStream.h"
#include "java/io/OutputStreamWriter.h"
#include "java/io/PrintStream.h"
#include "java/io/PrintWriter.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/lang/System.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/nio/charset/Charset.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/List.h"
#include "java/util/function/Function.h"
#include "java/util/function/Predicate.h"

#pragma clang diagnostic ignored "-Wprotocol"

@interface EduStanfordNlpParserLexparserAbstractTreebankParserParams ()

+ (void)dependencyObjectifyHelperWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
                                 withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)root
                           withEduStanfordNlpTreesHeadFinder:(id<EduStanfordNlpTreesHeadFinder>)hf
                                      withJavaUtilCollection:(id<JavaUtilCollection>)c
                      withEduStanfordNlpTreesDependencyTyper:(id<EduStanfordNlpTreesDependencyTyper>)typer;

@end

inline NSString *EduStanfordNlpParserLexparserAbstractTreebankParserParams_get_leftHeaded();
static NSString *EduStanfordNlpParserLexparserAbstractTreebankParserParams_leftHeaded = @"leftHeaded";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpParserLexparserAbstractTreebankParserParams, leftHeaded, NSString *)

inline NSString *EduStanfordNlpParserLexparserAbstractTreebankParserParams_get_rightHeaded();
static NSString *EduStanfordNlpParserLexparserAbstractTreebankParserParams_rightHeaded = @"rightHeaded";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpParserLexparserAbstractTreebankParserParams, rightHeaded, NSString *)

inline jlong EduStanfordNlpParserLexparserAbstractTreebankParserParams_get_serialVersionUID();
#define EduStanfordNlpParserLexparserAbstractTreebankParserParams_serialVersionUID 4299501909017975915LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpParserLexparserAbstractTreebankParserParams, serialVersionUID, jlong)

inline IOSObjectArray *EduStanfordNlpParserLexparserAbstractTreebankParserParams_get_EMPTY_ARGS();
static IOSObjectArray *EduStanfordNlpParserLexparserAbstractTreebankParserParams_EMPTY_ARGS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpParserLexparserAbstractTreebankParserParams, EMPTY_ARGS, IOSObjectArray *)

__attribute__((unused)) static void EduStanfordNlpParserLexparserAbstractTreebankParserParams_dependencyObjectifyHelperWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_withEduStanfordNlpTreesHeadFinder_withJavaUtilCollection_withEduStanfordNlpTreesDependencyTyper_(EduStanfordNlpTreesTree *t, EduStanfordNlpTreesTree *root, id<EduStanfordNlpTreesHeadFinder> hf, id<JavaUtilCollection> c, id<EduStanfordNlpTreesDependencyTyper> typer);

@interface EduStanfordNlpParserLexparserAbstractTreebankParserParams_SubcategoryStripper () {
 @public
  EduStanfordNlpParserLexparserAbstractTreebankParserParams *this$0_;
}

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserAbstractTreebankParserParams_SubcategoryStripper, this$0_, EduStanfordNlpParserLexparserAbstractTreebankParserParams *)

@interface EduStanfordNlpParserLexparserAbstractTreebankParserParams_RemoveGFSubcategoryStripper () {
 @public
  EduStanfordNlpParserLexparserAbstractTreebankParserParams *this$0_;
}

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserAbstractTreebankParserParams_RemoveGFSubcategoryStripper, this$0_, EduStanfordNlpParserLexparserAbstractTreebankParserParams *)

@interface EduStanfordNlpParserLexparserAbstractTreebankParserParams_UntypedDependencyTyper : NSObject < EduStanfordNlpTreesDependencyTyper > {
 @public
  id<EduStanfordNlpTreesHeadFinder> hf_;
}

- (instancetype)initWithEduStanfordNlpTreesHeadFinder:(id<EduStanfordNlpTreesHeadFinder>)hf;

- (id<JavaUtilList>)makeDependencyWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)head
                                  withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)dep
                                  withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)root;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpParserLexparserAbstractTreebankParserParams_UntypedDependencyTyper)

J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserAbstractTreebankParserParams_UntypedDependencyTyper, hf_, id<EduStanfordNlpTreesHeadFinder>)

__attribute__((unused)) static void EduStanfordNlpParserLexparserAbstractTreebankParserParams_UntypedDependencyTyper_initWithEduStanfordNlpTreesHeadFinder_(EduStanfordNlpParserLexparserAbstractTreebankParserParams_UntypedDependencyTyper *self, id<EduStanfordNlpTreesHeadFinder> hf);

__attribute__((unused)) static EduStanfordNlpParserLexparserAbstractTreebankParserParams_UntypedDependencyTyper *new_EduStanfordNlpParserLexparserAbstractTreebankParserParams_UntypedDependencyTyper_initWithEduStanfordNlpTreesHeadFinder_(id<EduStanfordNlpTreesHeadFinder> hf) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpParserLexparserAbstractTreebankParserParams_UntypedDependencyTyper *create_EduStanfordNlpParserLexparserAbstractTreebankParserParams_UntypedDependencyTyper_initWithEduStanfordNlpTreesHeadFinder_(id<EduStanfordNlpTreesHeadFinder> hf);

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpParserLexparserAbstractTreebankParserParams_UntypedDependencyTyper)

@interface EduStanfordNlpParserLexparserAbstractTreebankParserParams_UnorderedUntypedDependencyTyper : NSObject < EduStanfordNlpTreesDependencyTyper > {
 @public
  id<EduStanfordNlpTreesHeadFinder> hf_;
}

- (instancetype)initWithEduStanfordNlpTreesHeadFinder:(id<EduStanfordNlpTreesHeadFinder>)hf;

- (id<JavaUtilList>)makeDependencyWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)head
                                  withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)dep
                                  withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)root;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpParserLexparserAbstractTreebankParserParams_UnorderedUntypedDependencyTyper)

J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserAbstractTreebankParserParams_UnorderedUntypedDependencyTyper, hf_, id<EduStanfordNlpTreesHeadFinder>)

__attribute__((unused)) static void EduStanfordNlpParserLexparserAbstractTreebankParserParams_UnorderedUntypedDependencyTyper_initWithEduStanfordNlpTreesHeadFinder_(EduStanfordNlpParserLexparserAbstractTreebankParserParams_UnorderedUntypedDependencyTyper *self, id<EduStanfordNlpTreesHeadFinder> hf);

__attribute__((unused)) static EduStanfordNlpParserLexparserAbstractTreebankParserParams_UnorderedUntypedDependencyTyper *new_EduStanfordNlpParserLexparserAbstractTreebankParserParams_UnorderedUntypedDependencyTyper_initWithEduStanfordNlpTreesHeadFinder_(id<EduStanfordNlpTreesHeadFinder> hf) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpParserLexparserAbstractTreebankParserParams_UnorderedUntypedDependencyTyper *create_EduStanfordNlpParserLexparserAbstractTreebankParserParams_UnorderedUntypedDependencyTyper_initWithEduStanfordNlpTreesHeadFinder_(id<EduStanfordNlpTreesHeadFinder> hf);

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpParserLexparserAbstractTreebankParserParams_UnorderedUntypedDependencyTyper)

@interface EduStanfordNlpParserLexparserAbstractTreebankParserParams_TypedDependencyTyper : NSObject < EduStanfordNlpTreesDependencyTyper > {
 @public
  id<EduStanfordNlpTreesHeadFinder> hf_;
}

- (instancetype)initWithEduStanfordNlpTreesHeadFinder:(id<EduStanfordNlpTreesHeadFinder>)hf;

- (id<JavaUtilList>)makeDependencyWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)head
                                  withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)dep
                                  withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)root;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpParserLexparserAbstractTreebankParserParams_TypedDependencyTyper)

J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserAbstractTreebankParserParams_TypedDependencyTyper, hf_, id<EduStanfordNlpTreesHeadFinder>)

__attribute__((unused)) static void EduStanfordNlpParserLexparserAbstractTreebankParserParams_TypedDependencyTyper_initWithEduStanfordNlpTreesHeadFinder_(EduStanfordNlpParserLexparserAbstractTreebankParserParams_TypedDependencyTyper *self, id<EduStanfordNlpTreesHeadFinder> hf);

__attribute__((unused)) static EduStanfordNlpParserLexparserAbstractTreebankParserParams_TypedDependencyTyper *new_EduStanfordNlpParserLexparserAbstractTreebankParserParams_TypedDependencyTyper_initWithEduStanfordNlpTreesHeadFinder_(id<EduStanfordNlpTreesHeadFinder> hf) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpParserLexparserAbstractTreebankParserParams_TypedDependencyTyper *create_EduStanfordNlpParserLexparserAbstractTreebankParserParams_TypedDependencyTyper_initWithEduStanfordNlpTreesHeadFinder_(id<EduStanfordNlpTreesHeadFinder> hf);

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpParserLexparserAbstractTreebankParserParams_TypedDependencyTyper)

@interface EduStanfordNlpParserLexparserAbstractTreebankParserParams_UnorderedTypedDependencyTyper : NSObject < EduStanfordNlpTreesDependencyTyper > {
 @public
  id<EduStanfordNlpTreesHeadFinder> hf_;
}

- (instancetype)initWithEduStanfordNlpTreesHeadFinder:(id<EduStanfordNlpTreesHeadFinder>)hf;

- (id<JavaUtilList>)makeDependencyWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)head
                                  withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)dep
                                  withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)root;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpParserLexparserAbstractTreebankParserParams_UnorderedTypedDependencyTyper)

J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserAbstractTreebankParserParams_UnorderedTypedDependencyTyper, hf_, id<EduStanfordNlpTreesHeadFinder>)

__attribute__((unused)) static void EduStanfordNlpParserLexparserAbstractTreebankParserParams_UnorderedTypedDependencyTyper_initWithEduStanfordNlpTreesHeadFinder_(EduStanfordNlpParserLexparserAbstractTreebankParserParams_UnorderedTypedDependencyTyper *self, id<EduStanfordNlpTreesHeadFinder> hf);

__attribute__((unused)) static EduStanfordNlpParserLexparserAbstractTreebankParserParams_UnorderedTypedDependencyTyper *new_EduStanfordNlpParserLexparserAbstractTreebankParserParams_UnorderedTypedDependencyTyper_initWithEduStanfordNlpTreesHeadFinder_(id<EduStanfordNlpTreesHeadFinder> hf) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpParserLexparserAbstractTreebankParserParams_UnorderedTypedDependencyTyper *create_EduStanfordNlpParserLexparserAbstractTreebankParserParams_UnorderedTypedDependencyTyper_initWithEduStanfordNlpTreesHeadFinder_(id<EduStanfordNlpTreesHeadFinder> hf);

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpParserLexparserAbstractTreebankParserParams_UnorderedTypedDependencyTyper)

@interface EduStanfordNlpParserLexparserAbstractTreebankParserParams_AnnotatePunctuationFunction () {
 @public
  NSString *key_;
  NSString *annotationMark_;
}

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserAbstractTreebankParserParams_AnnotatePunctuationFunction, key_, NSString *)
J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserAbstractTreebankParserParams_AnnotatePunctuationFunction, annotationMark_, NSString *)

inline jlong EduStanfordNlpParserLexparserAbstractTreebankParserParams_AnnotatePunctuationFunction_get_serialVersionUID();
#define EduStanfordNlpParserLexparserAbstractTreebankParserParams_AnnotatePunctuationFunction_serialVersionUID 1LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpParserLexparserAbstractTreebankParserParams_AnnotatePunctuationFunction, serialVersionUID, jlong)

@interface EduStanfordNlpParserLexparserAbstractTreebankParserParams_$Lambda$1 : NSObject < EduStanfordNlpStatsEquivalenceClasser >

- (id)equivalenceClassWithId:(id<JavaUtilList>)s;

@end

J2OBJC_STATIC_INIT(EduStanfordNlpParserLexparserAbstractTreebankParserParams_$Lambda$1)

inline EduStanfordNlpParserLexparserAbstractTreebankParserParams_$Lambda$1 *EduStanfordNlpParserLexparserAbstractTreebankParserParams_$Lambda$1_get_instance();
static EduStanfordNlpParserLexparserAbstractTreebankParserParams_$Lambda$1 *EduStanfordNlpParserLexparserAbstractTreebankParserParams_$Lambda$1_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpParserLexparserAbstractTreebankParserParams_$Lambda$1, instance, EduStanfordNlpParserLexparserAbstractTreebankParserParams_$Lambda$1 *)

__attribute__((unused)) static void EduStanfordNlpParserLexparserAbstractTreebankParserParams_$Lambda$1_init(EduStanfordNlpParserLexparserAbstractTreebankParserParams_$Lambda$1 *self);

__attribute__((unused)) static EduStanfordNlpParserLexparserAbstractTreebankParserParams_$Lambda$1 *new_EduStanfordNlpParserLexparserAbstractTreebankParserParams_$Lambda$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpParserLexparserAbstractTreebankParserParams_$Lambda$1 *create_EduStanfordNlpParserLexparserAbstractTreebankParserParams_$Lambda$1_init();

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpParserLexparserAbstractTreebankParserParams)

@implementation EduStanfordNlpParserLexparserAbstractTreebankParserParams

- (instancetype)initWithEduStanfordNlpTreesTreebankLanguagePack:(id<EduStanfordNlpTreesTreebankLanguagePack>)tlp {
  EduStanfordNlpParserLexparserAbstractTreebankParserParams_initWithEduStanfordNlpTreesTreebankLanguagePack_(self, tlp);
  return self;
}

- (id<EduStanfordNlpLingLabel>)processHeadWordWithEduStanfordNlpLingLabel:(id<EduStanfordNlpLingLabel>)headWord {
  return headWord;
}

- (void)setEvaluateGrammaticalFunctionsWithBoolean:(jboolean)evalGFs {
  self->evalGF_ = evalGFs;
}

- (void)setInputEncodingWithNSString:(NSString *)encoding {
  inputEncoding_ = encoding;
}

- (void)setOutputEncodingWithNSString:(NSString *)encoding {
  outputEncoding_ = encoding;
}

- (NSString *)getOutputEncoding {
  return outputEncoding_;
}

- (NSString *)getInputEncoding {
  return inputEncoding_;
}

- (EduStanfordNlpParserMetricsAbstractEval *)ppAttachmentEval {
  return nil;
}

- (EduStanfordNlpTreesMemoryTreebank *)memoryTreebank {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (EduStanfordNlpTreesDiskTreebank *)diskTreebank {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (EduStanfordNlpTreesMemoryTreebank *)testMemoryTreebank {
  return [self memoryTreebank];
}

- (EduStanfordNlpTreesTreebank *)treebank {
  return [self diskTreebank];
}

- (JavaIoPrintWriter *)pw {
  return [self pwWithJavaIoOutputStream:JreLoadStatic(JavaLangSystem, out)];
}

- (JavaIoPrintWriter *)pwWithJavaIoOutputStream:(JavaIoOutputStream *)o {
  NSString *encoding = outputEncoding_;
  if (!JavaNioCharsetCharset_isSupportedWithNSString_(encoding)) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$$", @"Warning: desired encoding ", encoding, @" not accepted. ")];
    [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:@"Using UTF-8 to construct PrintWriter"];
    encoding = @"UTF-8";
  }
  @try {
    return new_JavaIoPrintWriter_initWithJavaIoWriter_withBoolean_(new_JavaIoOutputStreamWriter_initWithJavaIoOutputStream_withNSString_(o, encoding), true);
  }
  @catch (JavaIoUnsupportedEncodingException *e) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$$@", @"Warning: desired encoding ", outputEncoding_, @" not accepted. ", e)];
    @try {
      return new_JavaIoPrintWriter_initWithJavaIoWriter_withBoolean_(new_JavaIoOutputStreamWriter_initWithJavaIoOutputStream_withNSString_(o, @"UTF-8"), true);
    }
    @catch (JavaIoUnsupportedEncodingException *e1) {
      [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:JreStrcat("$@", @"Something is really wrong.  Your system doesn't even support UTF-8!", e1)];
      return new_JavaIoPrintWriter_initWithJavaIoOutputStream_withBoolean_(o, true);
    }
  }
}

- (id<EduStanfordNlpTreesTreebankLanguagePack>)treebankLanguagePack {
  return tlp_;
}

- (id<EduStanfordNlpTreesHeadFinder>)headFinder {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<EduStanfordNlpTreesHeadFinder>)typedDependencyHeadFinder {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<EduStanfordNlpParserLexparserLexicon>)lexWithEduStanfordNlpParserLexparserOptions:(EduStanfordNlpParserLexparserOptions *)op
                                                            withEduStanfordNlpUtilIndex:(id<EduStanfordNlpUtilIndex>)wordIndex
                                                            withEduStanfordNlpUtilIndex:(id<EduStanfordNlpUtilIndex>)tagIndex {
  return new_EduStanfordNlpParserLexparserBaseLexicon_initWithEduStanfordNlpParserLexparserOptions_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(op, wordIndex, tagIndex);
}

- (IOSDoubleArray *)MLEDependencyGrammarSmoothingParams {
  return [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ 16.0, 16.0, 4.0, 0.6 } count:4];
}

+ (id<JavaUtilCollection>)parsevalObjectifyWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
                                withEduStanfordNlpTreesTreeTransformer:(id<EduStanfordNlpTreesTreeTransformer>)collinizer {
  return EduStanfordNlpParserLexparserAbstractTreebankParserParams_parsevalObjectifyWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTreeTransformer_(t, collinizer);
}

+ (id<JavaUtilCollection>)parsevalObjectifyWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
                                withEduStanfordNlpTreesTreeTransformer:(id<EduStanfordNlpTreesTreeTransformer>)collinizer
                                                           withBoolean:(jboolean)labelConstituents {
  return EduStanfordNlpParserLexparserAbstractTreebankParserParams_parsevalObjectifyWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTreeTransformer_withBoolean_(t, collinizer, labelConstituents);
}

+ (id<JavaUtilCollection>)untypedDependencyObjectifyWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
                                              withEduStanfordNlpTreesHeadFinder:(id<EduStanfordNlpTreesHeadFinder>)hf
                                         withEduStanfordNlpTreesTreeTransformer:(id<EduStanfordNlpTreesTreeTransformer>)collinizer {
  return EduStanfordNlpParserLexparserAbstractTreebankParserParams_untypedDependencyObjectifyWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesHeadFinder_withEduStanfordNlpTreesTreeTransformer_(t, hf, collinizer);
}

+ (id<JavaUtilCollection>)unorderedUntypedDependencyObjectifyWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
                                                       withEduStanfordNlpTreesHeadFinder:(id<EduStanfordNlpTreesHeadFinder>)hf
                                                  withEduStanfordNlpTreesTreeTransformer:(id<EduStanfordNlpTreesTreeTransformer>)collinizer {
  return EduStanfordNlpParserLexparserAbstractTreebankParserParams_unorderedUntypedDependencyObjectifyWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesHeadFinder_withEduStanfordNlpTreesTreeTransformer_(t, hf, collinizer);
}

+ (id<JavaUtilCollection>)typedDependencyObjectifyWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
                                            withEduStanfordNlpTreesHeadFinder:(id<EduStanfordNlpTreesHeadFinder>)hf
                                       withEduStanfordNlpTreesTreeTransformer:(id<EduStanfordNlpTreesTreeTransformer>)collinizer {
  return EduStanfordNlpParserLexparserAbstractTreebankParserParams_typedDependencyObjectifyWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesHeadFinder_withEduStanfordNlpTreesTreeTransformer_(t, hf, collinizer);
}

+ (id<JavaUtilCollection>)unorderedTypedDependencyObjectifyWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
                                                     withEduStanfordNlpTreesHeadFinder:(id<EduStanfordNlpTreesHeadFinder>)hf
                                                withEduStanfordNlpTreesTreeTransformer:(id<EduStanfordNlpTreesTreeTransformer>)collinizer {
  return EduStanfordNlpParserLexparserAbstractTreebankParserParams_unorderedTypedDependencyObjectifyWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesHeadFinder_withEduStanfordNlpTreesTreeTransformer_(t, hf, collinizer);
}

+ (id<JavaUtilCollection>)dependencyObjectifyWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
                                       withEduStanfordNlpTreesHeadFinder:(id<EduStanfordNlpTreesHeadFinder>)hf
                                  withEduStanfordNlpTreesTreeTransformer:(id<EduStanfordNlpTreesTreeTransformer>)collinizer
                                  withEduStanfordNlpTreesDependencyTyper:(id<EduStanfordNlpTreesDependencyTyper>)typer {
  return EduStanfordNlpParserLexparserAbstractTreebankParserParams_dependencyObjectifyWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesHeadFinder_withEduStanfordNlpTreesTreeTransformer_withEduStanfordNlpTreesDependencyTyper_(t, hf, collinizer, typer);
}

+ (void)dependencyObjectifyHelperWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
                                 withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)root
                           withEduStanfordNlpTreesHeadFinder:(id<EduStanfordNlpTreesHeadFinder>)hf
                                      withJavaUtilCollection:(id<JavaUtilCollection>)c
                      withEduStanfordNlpTreesDependencyTyper:(id<EduStanfordNlpTreesDependencyTyper>)typer {
  EduStanfordNlpParserLexparserAbstractTreebankParserParams_dependencyObjectifyHelperWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_withEduStanfordNlpTreesHeadFinder_withJavaUtilCollection_withEduStanfordNlpTreesDependencyTyper_(t, root, hf, c, typer);
}

+ (id<EduStanfordNlpStatsEquivalenceClasser>)typedDependencyClasser {
  return EduStanfordNlpParserLexparserAbstractTreebankParserParams_typedDependencyClasser();
}

- (id<EduStanfordNlpTreesTreeTransformer>)collinizer {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<EduStanfordNlpTreesTreeTransformer>)collinizerEvalb {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (IOSObjectArray *)sisterSplitters {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<EduStanfordNlpTreesTreeTransformer>)subcategoryStripper {
  if (evalGF_) return new_EduStanfordNlpParserLexparserAbstractTreebankParserParams_SubcategoryStripper_initWithEduStanfordNlpParserLexparserAbstractTreebankParserParams_(self);
  return new_EduStanfordNlpParserLexparserAbstractTreebankParserParams_RemoveGFSubcategoryStripper_initWithEduStanfordNlpParserLexparserAbstractTreebankParserParams_(self);
}

- (EduStanfordNlpTreesTree *)transformTreeWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
                                          withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)root {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)display {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jint)setOptionFlagWithNSStringArray:(IOSObjectArray *)args
                               withInt:(jint)i {
  return i;
}

- (id<EduStanfordNlpProcessTokenizerFactory>)treeTokenizerFactory {
  return new_EduStanfordNlpTreesTreeTokenizerFactory_initWithEduStanfordNlpTreesTreeReaderFactory_([self treeReaderFactory]);
}

- (id<EduStanfordNlpParserLexparserExtractor>)dependencyGrammarExtractorWithEduStanfordNlpParserLexparserOptions:(EduStanfordNlpParserLexparserOptions *)op
                                                                                     withEduStanfordNlpUtilIndex:(id<EduStanfordNlpUtilIndex>)wordIndex
                                                                                     withEduStanfordNlpUtilIndex:(id<EduStanfordNlpUtilIndex>)tagIndex {
  return new_EduStanfordNlpParserLexparserMLEDependencyGrammarExtractor_initWithEduStanfordNlpParserLexparserOptions_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(op, wordIndex, tagIndex);
}

- (jboolean)isEvalGF {
  return evalGF_;
}

- (void)setEvalGFWithBoolean:(jboolean)evalGF {
  self->evalGF_ = evalGF;
}

- (id<JavaUtilList>)readGrammaticalStructureFromFileWithNSString:(NSString *)filename {
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"This language does not support GrammaticalStructures or dependencies");
}

- (EduStanfordNlpTreesGrammaticalStructure *)getGrammaticalStructureWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
                                                                  withJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)filter
                                                              withEduStanfordNlpTreesHeadFinder:(id<EduStanfordNlpTreesHeadFinder>)hf {
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"This language does not support GrammaticalStructures or dependencies");
}

- (jboolean)supportsBasicDependencies {
  return false;
}

- (void)setGenerateOriginalDependenciesWithBoolean:(jboolean)originalDependencies {
  self->generateOriginalDependencies_ = originalDependencies;
  if (self->tlp_ != nil) {
    [self->tlp_ setGenerateOriginalDependenciesWithBoolean:originalDependencies];
  }
}

- (jboolean)generateOriginalDependencies {
  return self->generateOriginalDependencies_;
}

- (IOSObjectArray *)defaultCoreNLPFlags {
  return EduStanfordNlpParserLexparserAbstractTreebankParserParams_EMPTY_ARGS;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingLabel;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 6, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpParserMetricsAbstractEval;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesMemoryTreebank;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesDiskTreebank;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesMemoryTreebank;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTreebank;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaIoPrintWriter;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaIoPrintWriter;", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTreebankLanguagePack;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesHeadFinder;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesHeadFinder;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpParserLexparserLexicon;", 0x1, 10, 11, -1, 12, -1, -1 },
    { NULL, "[D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x9, 13, 14, -1, 15, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x9, 13, 16, -1, 17, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x9, 18, 19, -1, 20, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x9, 21, 19, -1, 20, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x9, 22, 19, -1, 20, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x9, 23, 19, -1, 20, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x9, 24, 25, -1, 26, -1, -1 },
    { NULL, "V", 0xa, 27, 28, -1, 29, -1, -1 },
    { NULL, "LEduStanfordNlpStatsEquivalenceClasser;", 0x9, -1, -1, -1, 30, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTreeTransformer;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTreeTransformer;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTreeTransformer;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x401, 31, 32, -1, -1, -1, -1 },
    { NULL, "V", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 33, 34, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpProcessTokenizerFactory;", 0x1, -1, -1, -1, 35, -1, -1 },
    { NULL, "LEduStanfordNlpParserLexparserExtractor;", 0x1, 36, 11, -1, 37, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 38, 4, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 39, 6, -1, 40, -1, -1 },
    { NULL, "LEduStanfordNlpTreesGrammaticalStructure;", 0x1, 41, 42, -1, 43, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 44, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpTreesTreebankLanguagePack:);
  methods[1].selector = @selector(processHeadWordWithEduStanfordNlpLingLabel:);
  methods[2].selector = @selector(setEvaluateGrammaticalFunctionsWithBoolean:);
  methods[3].selector = @selector(setInputEncodingWithNSString:);
  methods[4].selector = @selector(setOutputEncodingWithNSString:);
  methods[5].selector = @selector(getOutputEncoding);
  methods[6].selector = @selector(getInputEncoding);
  methods[7].selector = @selector(ppAttachmentEval);
  methods[8].selector = @selector(memoryTreebank);
  methods[9].selector = @selector(diskTreebank);
  methods[10].selector = @selector(testMemoryTreebank);
  methods[11].selector = @selector(treebank);
  methods[12].selector = @selector(pw);
  methods[13].selector = @selector(pwWithJavaIoOutputStream:);
  methods[14].selector = @selector(treebankLanguagePack);
  methods[15].selector = @selector(headFinder);
  methods[16].selector = @selector(typedDependencyHeadFinder);
  methods[17].selector = @selector(lexWithEduStanfordNlpParserLexparserOptions:withEduStanfordNlpUtilIndex:withEduStanfordNlpUtilIndex:);
  methods[18].selector = @selector(MLEDependencyGrammarSmoothingParams);
  methods[19].selector = @selector(parsevalObjectifyWithEduStanfordNlpTreesTree:withEduStanfordNlpTreesTreeTransformer:);
  methods[20].selector = @selector(parsevalObjectifyWithEduStanfordNlpTreesTree:withEduStanfordNlpTreesTreeTransformer:withBoolean:);
  methods[21].selector = @selector(untypedDependencyObjectifyWithEduStanfordNlpTreesTree:withEduStanfordNlpTreesHeadFinder:withEduStanfordNlpTreesTreeTransformer:);
  methods[22].selector = @selector(unorderedUntypedDependencyObjectifyWithEduStanfordNlpTreesTree:withEduStanfordNlpTreesHeadFinder:withEduStanfordNlpTreesTreeTransformer:);
  methods[23].selector = @selector(typedDependencyObjectifyWithEduStanfordNlpTreesTree:withEduStanfordNlpTreesHeadFinder:withEduStanfordNlpTreesTreeTransformer:);
  methods[24].selector = @selector(unorderedTypedDependencyObjectifyWithEduStanfordNlpTreesTree:withEduStanfordNlpTreesHeadFinder:withEduStanfordNlpTreesTreeTransformer:);
  methods[25].selector = @selector(dependencyObjectifyWithEduStanfordNlpTreesTree:withEduStanfordNlpTreesHeadFinder:withEduStanfordNlpTreesTreeTransformer:withEduStanfordNlpTreesDependencyTyper:);
  methods[26].selector = @selector(dependencyObjectifyHelperWithEduStanfordNlpTreesTree:withEduStanfordNlpTreesTree:withEduStanfordNlpTreesHeadFinder:withJavaUtilCollection:withEduStanfordNlpTreesDependencyTyper:);
  methods[27].selector = @selector(typedDependencyClasser);
  methods[28].selector = @selector(collinizer);
  methods[29].selector = @selector(collinizerEvalb);
  methods[30].selector = @selector(sisterSplitters);
  methods[31].selector = @selector(subcategoryStripper);
  methods[32].selector = @selector(transformTreeWithEduStanfordNlpTreesTree:withEduStanfordNlpTreesTree:);
  methods[33].selector = @selector(display);
  methods[34].selector = @selector(setOptionFlagWithNSStringArray:withInt:);
  methods[35].selector = @selector(treeTokenizerFactory);
  methods[36].selector = @selector(dependencyGrammarExtractorWithEduStanfordNlpParserLexparserOptions:withEduStanfordNlpUtilIndex:withEduStanfordNlpUtilIndex:);
  methods[37].selector = @selector(isEvalGF);
  methods[38].selector = @selector(setEvalGFWithBoolean:);
  methods[39].selector = @selector(readGrammaticalStructureFromFileWithNSString:);
  methods[40].selector = @selector(getGrammaticalStructureWithEduStanfordNlpTreesTree:withJavaUtilFunctionPredicate:withEduStanfordNlpTreesHeadFinder:);
  methods[41].selector = @selector(supportsBasicDependencies);
  methods[42].selector = @selector(setGenerateOriginalDependenciesWithBoolean:);
  methods[43].selector = @selector(generateOriginalDependencies);
  methods[44].selector = @selector(defaultCoreNLPFlags);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "evalGF_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "inputEncoding_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "outputEncoding_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "tlp_", "LEduStanfordNlpTreesTreebankLanguagePack;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "generateOriginalDependencies_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "leftHeaded", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 45, -1, -1 },
    { "rightHeaded", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 46, -1, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpParserLexparserAbstractTreebankParserParams_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "EMPTY_ARGS", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 47, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpTreesTreebankLanguagePack;", "processHeadWord", "LEduStanfordNlpLingLabel;", "setEvaluateGrammaticalFunctions", "Z", "setInputEncoding", "LNSString;", "setOutputEncoding", "pw", "LJavaIoOutputStream;", "lex", "LEduStanfordNlpParserLexparserOptions;LEduStanfordNlpUtilIndex;LEduStanfordNlpUtilIndex;", "(Ledu/stanford/nlp/parser/lexparser/Options;Ledu/stanford/nlp/util/Index<Ljava/lang/String;>;Ledu/stanford/nlp/util/Index<Ljava/lang/String;>;)Ledu/stanford/nlp/parser/lexparser/Lexicon;", "parsevalObjectify", "LEduStanfordNlpTreesTree;LEduStanfordNlpTreesTreeTransformer;", "(Ledu/stanford/nlp/trees/Tree;Ledu/stanford/nlp/trees/TreeTransformer;)Ljava/util/Collection<Ledu/stanford/nlp/trees/Constituent;>;", "LEduStanfordNlpTreesTree;LEduStanfordNlpTreesTreeTransformer;Z", "(Ledu/stanford/nlp/trees/Tree;Ledu/stanford/nlp/trees/TreeTransformer;Z)Ljava/util/Collection<Ledu/stanford/nlp/trees/Constituent;>;", "untypedDependencyObjectify", "LEduStanfordNlpTreesTree;LEduStanfordNlpTreesHeadFinder;LEduStanfordNlpTreesTreeTransformer;", "(Ledu/stanford/nlp/trees/Tree;Ledu/stanford/nlp/trees/HeadFinder;Ledu/stanford/nlp/trees/TreeTransformer;)Ljava/util/Collection<Ljava/util/List<Ljava/lang/String;>;>;", "unorderedUntypedDependencyObjectify", "typedDependencyObjectify", "unorderedTypedDependencyObjectify", "dependencyObjectify", "LEduStanfordNlpTreesTree;LEduStanfordNlpTreesHeadFinder;LEduStanfordNlpTreesTreeTransformer;LEduStanfordNlpTreesDependencyTyper;", "<E:Ljava/lang/Object;>(Ledu/stanford/nlp/trees/Tree;Ledu/stanford/nlp/trees/HeadFinder;Ledu/stanford/nlp/trees/TreeTransformer;Ledu/stanford/nlp/trees/DependencyTyper<TE;>;)Ljava/util/Collection<TE;>;", "dependencyObjectifyHelper", "LEduStanfordNlpTreesTree;LEduStanfordNlpTreesTree;LEduStanfordNlpTreesHeadFinder;LJavaUtilCollection;LEduStanfordNlpTreesDependencyTyper;", "<E:Ljava/lang/Object;>(Ledu/stanford/nlp/trees/Tree;Ledu/stanford/nlp/trees/Tree;Ledu/stanford/nlp/trees/HeadFinder;Ljava/util/Collection<TE;>;Ledu/stanford/nlp/trees/DependencyTyper<TE;>;)V", "()Ledu/stanford/nlp/stats/EquivalenceClasser<Ljava/util/List<Ljava/lang/String;>;Ljava/lang/String;>;", "transformTree", "LEduStanfordNlpTreesTree;LEduStanfordNlpTreesTree;", "setOptionFlag", "[LNSString;I", "()Ledu/stanford/nlp/process/TokenizerFactory<Ledu/stanford/nlp/trees/Tree;>;", "dependencyGrammarExtractor", "(Ledu/stanford/nlp/parser/lexparser/Options;Ledu/stanford/nlp/util/Index<Ljava/lang/String;>;Ledu/stanford/nlp/util/Index<Ljava/lang/String;>;)Ledu/stanford/nlp/parser/lexparser/Extractor<Ledu/stanford/nlp/parser/lexparser/DependencyGrammar;>;", "setEvalGF", "readGrammaticalStructureFromFile", "(Ljava/lang/String;)Ljava/util/List<Ledu/stanford/nlp/trees/GrammaticalStructure;>;", "getGrammaticalStructure", "LEduStanfordNlpTreesTree;LJavaUtilFunctionPredicate;LEduStanfordNlpTreesHeadFinder;", "(Ledu/stanford/nlp/trees/Tree;Ljava/util/function/Predicate<Ljava/lang/String;>;Ledu/stanford/nlp/trees/HeadFinder;)Ledu/stanford/nlp/trees/GrammaticalStructure;", "setGenerateOriginalDependencies", &EduStanfordNlpParserLexparserAbstractTreebankParserParams_leftHeaded, &EduStanfordNlpParserLexparserAbstractTreebankParserParams_rightHeaded, &EduStanfordNlpParserLexparserAbstractTreebankParserParams_EMPTY_ARGS, "LEduStanfordNlpParserLexparserAbstractTreebankParserParams_SubcategoryStripper;LEduStanfordNlpParserLexparserAbstractTreebankParserParams_RemoveGFSubcategoryStripper;LEduStanfordNlpParserLexparserAbstractTreebankParserParams_UntypedDependencyTyper;LEduStanfordNlpParserLexparserAbstractTreebankParserParams_UnorderedUntypedDependencyTyper;LEduStanfordNlpParserLexparserAbstractTreebankParserParams_TypedDependencyTyper;LEduStanfordNlpParserLexparserAbstractTreebankParserParams_UnorderedTypedDependencyTyper;LEduStanfordNlpParserLexparserAbstractTreebankParserParams_AnnotatePunctuationFunction;" };
  static const J2ObjcClassInfo _EduStanfordNlpParserLexparserAbstractTreebankParserParams = { "AbstractTreebankParserParams", "edu.stanford.nlp.parser.lexparser", ptrTable, methods, fields, 7, 0x401, 45, 9, -1, 48, -1, -1, -1 };
  return &_EduStanfordNlpParserLexparserAbstractTreebankParserParams;
}

+ (void)initialize {
  if (self == [EduStanfordNlpParserLexparserAbstractTreebankParserParams class]) {
    EduStanfordNlpParserLexparserAbstractTreebankParserParams_EMPTY_ARGS = [IOSObjectArray newArrayWithLength:0 type:NSString_class_()];
    J2OBJC_SET_INITIALIZED(EduStanfordNlpParserLexparserAbstractTreebankParserParams)
  }
}

@end

void EduStanfordNlpParserLexparserAbstractTreebankParserParams_initWithEduStanfordNlpTreesTreebankLanguagePack_(EduStanfordNlpParserLexparserAbstractTreebankParserParams *self, id<EduStanfordNlpTreesTreebankLanguagePack> tlp) {
  NSObject_init(self);
  self->evalGF_ = true;
  self->tlp_ = tlp;
  self->inputEncoding_ = [((id<EduStanfordNlpTreesTreebankLanguagePack>) nil_chk(tlp)) getEncoding];
  self->outputEncoding_ = [tlp getEncoding];
  self->generateOriginalDependencies_ = false;
}

id<JavaUtilCollection> EduStanfordNlpParserLexparserAbstractTreebankParserParams_parsevalObjectifyWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTreeTransformer_(EduStanfordNlpTreesTree *t, id<EduStanfordNlpTreesTreeTransformer> collinizer) {
  EduStanfordNlpParserLexparserAbstractTreebankParserParams_initialize();
  return EduStanfordNlpParserLexparserAbstractTreebankParserParams_parsevalObjectifyWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTreeTransformer_withBoolean_(t, collinizer, true);
}

id<JavaUtilCollection> EduStanfordNlpParserLexparserAbstractTreebankParserParams_parsevalObjectifyWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTreeTransformer_withBoolean_(EduStanfordNlpTreesTree *t, id<EduStanfordNlpTreesTreeTransformer> collinizer, jboolean labelConstituents) {
  EduStanfordNlpParserLexparserAbstractTreebankParserParams_initialize();
  id<JavaUtilCollection> spans = new_JavaUtilArrayList_init();
  EduStanfordNlpTreesTree *t1 = [((id<EduStanfordNlpTreesTreeTransformer>) nil_chk(collinizer)) transformTreeWithEduStanfordNlpTreesTree:t];
  if (t1 == nil) {
    return spans;
  }
  for (EduStanfordNlpTreesTree * __strong node in t1) {
    if ([((EduStanfordNlpTreesTree *) nil_chk(node)) isLeaf] || [node isPreTerminal] || (node != t1 && [node parentWithEduStanfordNlpTreesTree:t1] == nil)) {
      continue;
    }
    jint leftEdge = [t1 leftCharEdgeWithEduStanfordNlpTreesTree:node];
    jint rightEdge = [t1 rightCharEdgeWithEduStanfordNlpTreesTree:node];
    if (labelConstituents) [spans addWithId:new_EduStanfordNlpTreesLabeledConstituent_initWithInt_withInt_withEduStanfordNlpLingLabel_(leftEdge, rightEdge, [node label])];
    else [spans addWithId:new_EduStanfordNlpTreesSimpleConstituent_initWithInt_withInt_(leftEdge, rightEdge)];
  }
  return spans;
}

id<JavaUtilCollection> EduStanfordNlpParserLexparserAbstractTreebankParserParams_untypedDependencyObjectifyWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesHeadFinder_withEduStanfordNlpTreesTreeTransformer_(EduStanfordNlpTreesTree *t, id<EduStanfordNlpTreesHeadFinder> hf, id<EduStanfordNlpTreesTreeTransformer> collinizer) {
  EduStanfordNlpParserLexparserAbstractTreebankParserParams_initialize();
  return EduStanfordNlpParserLexparserAbstractTreebankParserParams_dependencyObjectifyWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesHeadFinder_withEduStanfordNlpTreesTreeTransformer_withEduStanfordNlpTreesDependencyTyper_(t, hf, collinizer, new_EduStanfordNlpParserLexparserAbstractTreebankParserParams_UntypedDependencyTyper_initWithEduStanfordNlpTreesHeadFinder_(hf));
}

id<JavaUtilCollection> EduStanfordNlpParserLexparserAbstractTreebankParserParams_unorderedUntypedDependencyObjectifyWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesHeadFinder_withEduStanfordNlpTreesTreeTransformer_(EduStanfordNlpTreesTree *t, id<EduStanfordNlpTreesHeadFinder> hf, id<EduStanfordNlpTreesTreeTransformer> collinizer) {
  EduStanfordNlpParserLexparserAbstractTreebankParserParams_initialize();
  return EduStanfordNlpParserLexparserAbstractTreebankParserParams_dependencyObjectifyWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesHeadFinder_withEduStanfordNlpTreesTreeTransformer_withEduStanfordNlpTreesDependencyTyper_(t, hf, collinizer, new_EduStanfordNlpParserLexparserAbstractTreebankParserParams_UnorderedUntypedDependencyTyper_initWithEduStanfordNlpTreesHeadFinder_(hf));
}

id<JavaUtilCollection> EduStanfordNlpParserLexparserAbstractTreebankParserParams_typedDependencyObjectifyWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesHeadFinder_withEduStanfordNlpTreesTreeTransformer_(EduStanfordNlpTreesTree *t, id<EduStanfordNlpTreesHeadFinder> hf, id<EduStanfordNlpTreesTreeTransformer> collinizer) {
  EduStanfordNlpParserLexparserAbstractTreebankParserParams_initialize();
  return EduStanfordNlpParserLexparserAbstractTreebankParserParams_dependencyObjectifyWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesHeadFinder_withEduStanfordNlpTreesTreeTransformer_withEduStanfordNlpTreesDependencyTyper_(t, hf, collinizer, new_EduStanfordNlpParserLexparserAbstractTreebankParserParams_TypedDependencyTyper_initWithEduStanfordNlpTreesHeadFinder_(hf));
}

id<JavaUtilCollection> EduStanfordNlpParserLexparserAbstractTreebankParserParams_unorderedTypedDependencyObjectifyWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesHeadFinder_withEduStanfordNlpTreesTreeTransformer_(EduStanfordNlpTreesTree *t, id<EduStanfordNlpTreesHeadFinder> hf, id<EduStanfordNlpTreesTreeTransformer> collinizer) {
  EduStanfordNlpParserLexparserAbstractTreebankParserParams_initialize();
  return EduStanfordNlpParserLexparserAbstractTreebankParserParams_dependencyObjectifyWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesHeadFinder_withEduStanfordNlpTreesTreeTransformer_withEduStanfordNlpTreesDependencyTyper_(t, hf, collinizer, new_EduStanfordNlpParserLexparserAbstractTreebankParserParams_UnorderedTypedDependencyTyper_initWithEduStanfordNlpTreesHeadFinder_(hf));
}

id<JavaUtilCollection> EduStanfordNlpParserLexparserAbstractTreebankParserParams_dependencyObjectifyWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesHeadFinder_withEduStanfordNlpTreesTreeTransformer_withEduStanfordNlpTreesDependencyTyper_(EduStanfordNlpTreesTree *t, id<EduStanfordNlpTreesHeadFinder> hf, id<EduStanfordNlpTreesTreeTransformer> collinizer, id<EduStanfordNlpTreesDependencyTyper> typer) {
  EduStanfordNlpParserLexparserAbstractTreebankParserParams_initialize();
  id<JavaUtilCollection> deps = new_JavaUtilArrayList_init();
  EduStanfordNlpTreesTree *t1 = [((id<EduStanfordNlpTreesTreeTransformer>) nil_chk(collinizer)) transformTreeWithEduStanfordNlpTreesTree:t];
  if (t1 == nil) return deps;
  EduStanfordNlpParserLexparserAbstractTreebankParserParams_dependencyObjectifyHelperWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_withEduStanfordNlpTreesHeadFinder_withJavaUtilCollection_withEduStanfordNlpTreesDependencyTyper_(t1, t1, hf, deps, typer);
  return deps;
}

void EduStanfordNlpParserLexparserAbstractTreebankParserParams_dependencyObjectifyHelperWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_withEduStanfordNlpTreesHeadFinder_withJavaUtilCollection_withEduStanfordNlpTreesDependencyTyper_(EduStanfordNlpTreesTree *t, EduStanfordNlpTreesTree *root, id<EduStanfordNlpTreesHeadFinder> hf, id<JavaUtilCollection> c, id<EduStanfordNlpTreesDependencyTyper> typer) {
  EduStanfordNlpParserLexparserAbstractTreebankParserParams_initialize();
  if ([((EduStanfordNlpTreesTree *) nil_chk(t)) isLeaf] || [t isPreTerminal]) {
    return;
  }
  EduStanfordNlpTreesTree *headDtr = [((id<EduStanfordNlpTreesHeadFinder>) nil_chk(hf)) determineHeadWithEduStanfordNlpTreesTree:t];
  {
    IOSObjectArray *a__ = [t children];
    EduStanfordNlpTreesTree * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      EduStanfordNlpTreesTree *child = *b__++;
      EduStanfordNlpParserLexparserAbstractTreebankParserParams_dependencyObjectifyHelperWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_withEduStanfordNlpTreesHeadFinder_withJavaUtilCollection_withEduStanfordNlpTreesDependencyTyper_(child, root, hf, c, typer);
      if (child != headDtr) {
        [((id<JavaUtilCollection>) nil_chk(c)) addWithId:[((id<EduStanfordNlpTreesDependencyTyper>) nil_chk(typer)) makeDependencyWithEduStanfordNlpTreesTree:headDtr withEduStanfordNlpTreesTree:child withEduStanfordNlpTreesTree:root]];
      }
    }
  }
}

id<EduStanfordNlpStatsEquivalenceClasser> EduStanfordNlpParserLexparserAbstractTreebankParserParams_typedDependencyClasser() {
  EduStanfordNlpParserLexparserAbstractTreebankParserParams_initialize();
  return JreLoadStatic(EduStanfordNlpParserLexparserAbstractTreebankParserParams_$Lambda$1, instance);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpParserLexparserAbstractTreebankParserParams)

@implementation EduStanfordNlpParserLexparserAbstractTreebankParserParams_SubcategoryStripper

- (EduStanfordNlpTreesTree *)transformTreeWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)tree {
  id<EduStanfordNlpLingLabel> lab = [((EduStanfordNlpTreesTree *) nil_chk(tree)) label];
  if ([tree isLeaf]) {
    EduStanfordNlpTreesTree *leaf = [((id<EduStanfordNlpTreesTreeFactory>) nil_chk(tf_)) newLeafWithEduStanfordNlpLingLabel:lab];
    [((EduStanfordNlpTreesTree *) nil_chk(leaf)) setScoreWithDouble:[tree score]];
    return leaf;
  }
  NSString *s = [((id<EduStanfordNlpLingLabel>) nil_chk(lab)) value];
  s = [((id<EduStanfordNlpTreesTreebankLanguagePack>) nil_chk([this$0_ treebankLanguagePack])) basicCategoryWithNSString:s];
  jint numKids = [tree numChildren];
  id<JavaUtilList> children = new_JavaUtilArrayList_initWithInt_(numKids);
  for (jint cNum = 0; cNum < numKids; cNum++) {
    EduStanfordNlpTreesTree *child = [tree getChildWithInt:cNum];
    EduStanfordNlpTreesTree *newChild = [self transformTreeWithEduStanfordNlpTreesTree:child];
    [children addWithId:newChild];
  }
  EduStanfordNlpLingCategoryWordTag *newLabel = new_EduStanfordNlpLingCategoryWordTag_initWithEduStanfordNlpLingLabel_(lab);
  [newLabel setCategoryWithNSString:s];
  if ([EduStanfordNlpLingHasTag_class_() isInstance:lab]) {
    NSString *tag = [((id<EduStanfordNlpLingHasTag>) cast_check(lab, EduStanfordNlpLingHasTag_class_())) tag];
    tag = [((id<EduStanfordNlpTreesTreebankLanguagePack>) nil_chk([this$0_ treebankLanguagePack])) basicCategoryWithNSString:tag];
    [newLabel setTagWithNSString:tag];
  }
  EduStanfordNlpTreesTree *node = [((id<EduStanfordNlpTreesTreeFactory>) nil_chk(tf_)) newTreeNodeWithEduStanfordNlpLingLabel:newLabel withJavaUtilList:children];
  [((EduStanfordNlpTreesTree *) nil_chk(node)) setScoreWithDouble:[tree score]];
  return node;
}

- (instancetype)initWithEduStanfordNlpParserLexparserAbstractTreebankParserParams:(EduStanfordNlpParserLexparserAbstractTreebankParserParams *)outer$ {
  EduStanfordNlpParserLexparserAbstractTreebankParserParams_SubcategoryStripper_initWithEduStanfordNlpParserLexparserAbstractTreebankParserParams_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LEduStanfordNlpTreesTree;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(transformTreeWithEduStanfordNlpTreesTree:);
  methods[1].selector = @selector(initWithEduStanfordNlpParserLexparserAbstractTreebankParserParams:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LEduStanfordNlpParserLexparserAbstractTreebankParserParams;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "tf_", "LEduStanfordNlpTreesTreeFactory;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "transformTree", "LEduStanfordNlpTreesTree;", "LEduStanfordNlpParserLexparserAbstractTreebankParserParams;" };
  static const J2ObjcClassInfo _EduStanfordNlpParserLexparserAbstractTreebankParserParams_SubcategoryStripper = { "SubcategoryStripper", "edu.stanford.nlp.parser.lexparser", ptrTable, methods, fields, 7, 0x4, 2, 2, 2, -1, -1, -1, -1 };
  return &_EduStanfordNlpParserLexparserAbstractTreebankParserParams_SubcategoryStripper;
}

@end

void EduStanfordNlpParserLexparserAbstractTreebankParserParams_SubcategoryStripper_initWithEduStanfordNlpParserLexparserAbstractTreebankParserParams_(EduStanfordNlpParserLexparserAbstractTreebankParserParams_SubcategoryStripper *self, EduStanfordNlpParserLexparserAbstractTreebankParserParams *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
  self->tf_ = new_EduStanfordNlpTreesLabeledScoredTreeFactory_init();
}

EduStanfordNlpParserLexparserAbstractTreebankParserParams_SubcategoryStripper *new_EduStanfordNlpParserLexparserAbstractTreebankParserParams_SubcategoryStripper_initWithEduStanfordNlpParserLexparserAbstractTreebankParserParams_(EduStanfordNlpParserLexparserAbstractTreebankParserParams *outer$) {
  J2OBJC_NEW_IMPL(EduStanfordNlpParserLexparserAbstractTreebankParserParams_SubcategoryStripper, initWithEduStanfordNlpParserLexparserAbstractTreebankParserParams_, outer$)
}

EduStanfordNlpParserLexparserAbstractTreebankParserParams_SubcategoryStripper *create_EduStanfordNlpParserLexparserAbstractTreebankParserParams_SubcategoryStripper_initWithEduStanfordNlpParserLexparserAbstractTreebankParserParams_(EduStanfordNlpParserLexparserAbstractTreebankParserParams *outer$) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpParserLexparserAbstractTreebankParserParams_SubcategoryStripper, initWithEduStanfordNlpParserLexparserAbstractTreebankParserParams_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpParserLexparserAbstractTreebankParserParams_SubcategoryStripper)

@implementation EduStanfordNlpParserLexparserAbstractTreebankParserParams_RemoveGFSubcategoryStripper

- (EduStanfordNlpTreesTree *)transformTreeWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)tree {
  id<EduStanfordNlpLingLabel> lab = [((EduStanfordNlpTreesTree *) nil_chk(tree)) label];
  if ([tree isLeaf]) {
    EduStanfordNlpTreesTree *leaf = [((id<EduStanfordNlpTreesTreeFactory>) nil_chk(tf_)) newLeafWithEduStanfordNlpLingLabel:lab];
    [((EduStanfordNlpTreesTree *) nil_chk(leaf)) setScoreWithDouble:[tree score]];
    return leaf;
  }
  NSString *s = [((id<EduStanfordNlpLingLabel>) nil_chk(lab)) value];
  s = [((id<EduStanfordNlpTreesTreebankLanguagePack>) nil_chk([this$0_ treebankLanguagePack])) basicCategoryWithNSString:s];
  s = [((id<EduStanfordNlpTreesTreebankLanguagePack>) nil_chk([this$0_ treebankLanguagePack])) stripGFWithNSString:s];
  jint numKids = [tree numChildren];
  id<JavaUtilList> children = new_JavaUtilArrayList_initWithInt_(numKids);
  for (jint cNum = 0; cNum < numKids; cNum++) {
    EduStanfordNlpTreesTree *child = [tree getChildWithInt:cNum];
    EduStanfordNlpTreesTree *newChild = [self transformTreeWithEduStanfordNlpTreesTree:child];
    [children addWithId:newChild];
  }
  EduStanfordNlpLingCategoryWordTag *newLabel = new_EduStanfordNlpLingCategoryWordTag_initWithEduStanfordNlpLingLabel_(lab);
  [newLabel setCategoryWithNSString:s];
  if ([EduStanfordNlpLingHasTag_class_() isInstance:lab]) {
    NSString *tag = [((id<EduStanfordNlpLingHasTag>) cast_check(lab, EduStanfordNlpLingHasTag_class_())) tag];
    tag = [((id<EduStanfordNlpTreesTreebankLanguagePack>) nil_chk([this$0_ treebankLanguagePack])) basicCategoryWithNSString:tag];
    tag = [((id<EduStanfordNlpTreesTreebankLanguagePack>) nil_chk([this$0_ treebankLanguagePack])) stripGFWithNSString:tag];
    [newLabel setTagWithNSString:tag];
  }
  EduStanfordNlpTreesTree *node = [((id<EduStanfordNlpTreesTreeFactory>) nil_chk(tf_)) newTreeNodeWithEduStanfordNlpLingLabel:newLabel withJavaUtilList:children];
  [((EduStanfordNlpTreesTree *) nil_chk(node)) setScoreWithDouble:[tree score]];
  return node;
}

- (instancetype)initWithEduStanfordNlpParserLexparserAbstractTreebankParserParams:(EduStanfordNlpParserLexparserAbstractTreebankParserParams *)outer$ {
  EduStanfordNlpParserLexparserAbstractTreebankParserParams_RemoveGFSubcategoryStripper_initWithEduStanfordNlpParserLexparserAbstractTreebankParserParams_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LEduStanfordNlpTreesTree;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(transformTreeWithEduStanfordNlpTreesTree:);
  methods[1].selector = @selector(initWithEduStanfordNlpParserLexparserAbstractTreebankParserParams:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LEduStanfordNlpParserLexparserAbstractTreebankParserParams;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "tf_", "LEduStanfordNlpTreesTreeFactory;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "transformTree", "LEduStanfordNlpTreesTree;", "LEduStanfordNlpParserLexparserAbstractTreebankParserParams;" };
  static const J2ObjcClassInfo _EduStanfordNlpParserLexparserAbstractTreebankParserParams_RemoveGFSubcategoryStripper = { "RemoveGFSubcategoryStripper", "edu.stanford.nlp.parser.lexparser", ptrTable, methods, fields, 7, 0x4, 2, 2, 2, -1, -1, -1, -1 };
  return &_EduStanfordNlpParserLexparserAbstractTreebankParserParams_RemoveGFSubcategoryStripper;
}

@end

void EduStanfordNlpParserLexparserAbstractTreebankParserParams_RemoveGFSubcategoryStripper_initWithEduStanfordNlpParserLexparserAbstractTreebankParserParams_(EduStanfordNlpParserLexparserAbstractTreebankParserParams_RemoveGFSubcategoryStripper *self, EduStanfordNlpParserLexparserAbstractTreebankParserParams *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
  self->tf_ = new_EduStanfordNlpTreesLabeledScoredTreeFactory_init();
}

EduStanfordNlpParserLexparserAbstractTreebankParserParams_RemoveGFSubcategoryStripper *new_EduStanfordNlpParserLexparserAbstractTreebankParserParams_RemoveGFSubcategoryStripper_initWithEduStanfordNlpParserLexparserAbstractTreebankParserParams_(EduStanfordNlpParserLexparserAbstractTreebankParserParams *outer$) {
  J2OBJC_NEW_IMPL(EduStanfordNlpParserLexparserAbstractTreebankParserParams_RemoveGFSubcategoryStripper, initWithEduStanfordNlpParserLexparserAbstractTreebankParserParams_, outer$)
}

EduStanfordNlpParserLexparserAbstractTreebankParserParams_RemoveGFSubcategoryStripper *create_EduStanfordNlpParserLexparserAbstractTreebankParserParams_RemoveGFSubcategoryStripper_initWithEduStanfordNlpParserLexparserAbstractTreebankParserParams_(EduStanfordNlpParserLexparserAbstractTreebankParserParams *outer$) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpParserLexparserAbstractTreebankParserParams_RemoveGFSubcategoryStripper, initWithEduStanfordNlpParserLexparserAbstractTreebankParserParams_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpParserLexparserAbstractTreebankParserParams_RemoveGFSubcategoryStripper)

@implementation EduStanfordNlpParserLexparserAbstractTreebankParserParams_UntypedDependencyTyper

- (instancetype)initWithEduStanfordNlpTreesHeadFinder:(id<EduStanfordNlpTreesHeadFinder>)hf {
  EduStanfordNlpParserLexparserAbstractTreebankParserParams_UntypedDependencyTyper_initWithEduStanfordNlpTreesHeadFinder_(self, hf);
  return self;
}

- (id<JavaUtilList>)makeDependencyWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)head
                                  withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)dep
                                  withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)root {
  id<JavaUtilList> result = new_JavaUtilArrayList_initWithInt_(3);
  EduStanfordNlpTreesTree *headTerm = [((EduStanfordNlpTreesTree *) nil_chk(head)) headTerminalWithEduStanfordNlpTreesHeadFinder:hf_];
  EduStanfordNlpTreesTree *depTerm = [((EduStanfordNlpTreesTree *) nil_chk(dep)) headTerminalWithEduStanfordNlpTreesHeadFinder:hf_];
  jboolean headLeft = [((EduStanfordNlpTreesTree *) nil_chk(root)) leftCharEdgeWithEduStanfordNlpTreesTree:headTerm] < [root leftCharEdgeWithEduStanfordNlpTreesTree:depTerm];
  [result addWithId:[((EduStanfordNlpTreesTree *) nil_chk(headTerm)) value]];
  [result addWithId:[((EduStanfordNlpTreesTree *) nil_chk(depTerm)) value]];
  if (headLeft) [result addWithId:EduStanfordNlpParserLexparserAbstractTreebankParserParams_leftHeaded];
  else [result addWithId:EduStanfordNlpParserLexparserAbstractTreebankParserParams_rightHeaded];
  return result;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpTreesHeadFinder:);
  methods[1].selector = @selector(makeDependencyWithEduStanfordNlpTreesTree:withEduStanfordNlpTreesTree:withEduStanfordNlpTreesTree:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "hf_", "LEduStanfordNlpTreesHeadFinder;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpTreesHeadFinder;", "makeDependency", "LEduStanfordNlpTreesTree;LEduStanfordNlpTreesTree;LEduStanfordNlpTreesTree;", "(Ledu/stanford/nlp/trees/Tree;Ledu/stanford/nlp/trees/Tree;Ledu/stanford/nlp/trees/Tree;)Ljava/util/List<Ljava/lang/String;>;", "LEduStanfordNlpParserLexparserAbstractTreebankParserParams;", "Ljava/lang/Object;Ledu/stanford/nlp/trees/DependencyTyper<Ljava/util/List<Ljava/lang/String;>;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpParserLexparserAbstractTreebankParserParams_UntypedDependencyTyper = { "UntypedDependencyTyper", "edu.stanford.nlp.parser.lexparser", ptrTable, methods, fields, 7, 0xa, 2, 1, 4, -1, -1, 5, -1 };
  return &_EduStanfordNlpParserLexparserAbstractTreebankParserParams_UntypedDependencyTyper;
}

@end

void EduStanfordNlpParserLexparserAbstractTreebankParserParams_UntypedDependencyTyper_initWithEduStanfordNlpTreesHeadFinder_(EduStanfordNlpParserLexparserAbstractTreebankParserParams_UntypedDependencyTyper *self, id<EduStanfordNlpTreesHeadFinder> hf) {
  NSObject_init(self);
  self->hf_ = hf;
}

EduStanfordNlpParserLexparserAbstractTreebankParserParams_UntypedDependencyTyper *new_EduStanfordNlpParserLexparserAbstractTreebankParserParams_UntypedDependencyTyper_initWithEduStanfordNlpTreesHeadFinder_(id<EduStanfordNlpTreesHeadFinder> hf) {
  J2OBJC_NEW_IMPL(EduStanfordNlpParserLexparserAbstractTreebankParserParams_UntypedDependencyTyper, initWithEduStanfordNlpTreesHeadFinder_, hf)
}

EduStanfordNlpParserLexparserAbstractTreebankParserParams_UntypedDependencyTyper *create_EduStanfordNlpParserLexparserAbstractTreebankParserParams_UntypedDependencyTyper_initWithEduStanfordNlpTreesHeadFinder_(id<EduStanfordNlpTreesHeadFinder> hf) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpParserLexparserAbstractTreebankParserParams_UntypedDependencyTyper, initWithEduStanfordNlpTreesHeadFinder_, hf)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpParserLexparserAbstractTreebankParserParams_UntypedDependencyTyper)

@implementation EduStanfordNlpParserLexparserAbstractTreebankParserParams_UnorderedUntypedDependencyTyper

- (instancetype)initWithEduStanfordNlpTreesHeadFinder:(id<EduStanfordNlpTreesHeadFinder>)hf {
  EduStanfordNlpParserLexparserAbstractTreebankParserParams_UnorderedUntypedDependencyTyper_initWithEduStanfordNlpTreesHeadFinder_(self, hf);
  return self;
}

- (id<JavaUtilList>)makeDependencyWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)head
                                  withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)dep
                                  withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)root {
  id<JavaUtilList> result = new_JavaUtilArrayList_initWithInt_(3);
  EduStanfordNlpTreesTree *headTerm = [((EduStanfordNlpTreesTree *) nil_chk(head)) headTerminalWithEduStanfordNlpTreesHeadFinder:hf_];
  EduStanfordNlpTreesTree *depTerm = [((EduStanfordNlpTreesTree *) nil_chk(dep)) headTerminalWithEduStanfordNlpTreesHeadFinder:hf_];
  [result addWithId:[((EduStanfordNlpTreesTree *) nil_chk(headTerm)) value]];
  [result addWithId:[((EduStanfordNlpTreesTree *) nil_chk(depTerm)) value]];
  return result;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpTreesHeadFinder:);
  methods[1].selector = @selector(makeDependencyWithEduStanfordNlpTreesTree:withEduStanfordNlpTreesTree:withEduStanfordNlpTreesTree:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "hf_", "LEduStanfordNlpTreesHeadFinder;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpTreesHeadFinder;", "makeDependency", "LEduStanfordNlpTreesTree;LEduStanfordNlpTreesTree;LEduStanfordNlpTreesTree;", "(Ledu/stanford/nlp/trees/Tree;Ledu/stanford/nlp/trees/Tree;Ledu/stanford/nlp/trees/Tree;)Ljava/util/List<Ljava/lang/String;>;", "LEduStanfordNlpParserLexparserAbstractTreebankParserParams;", "Ljava/lang/Object;Ledu/stanford/nlp/trees/DependencyTyper<Ljava/util/List<Ljava/lang/String;>;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpParserLexparserAbstractTreebankParserParams_UnorderedUntypedDependencyTyper = { "UnorderedUntypedDependencyTyper", "edu.stanford.nlp.parser.lexparser", ptrTable, methods, fields, 7, 0xa, 2, 1, 4, -1, -1, 5, -1 };
  return &_EduStanfordNlpParserLexparserAbstractTreebankParserParams_UnorderedUntypedDependencyTyper;
}

@end

void EduStanfordNlpParserLexparserAbstractTreebankParserParams_UnorderedUntypedDependencyTyper_initWithEduStanfordNlpTreesHeadFinder_(EduStanfordNlpParserLexparserAbstractTreebankParserParams_UnorderedUntypedDependencyTyper *self, id<EduStanfordNlpTreesHeadFinder> hf) {
  NSObject_init(self);
  self->hf_ = hf;
}

EduStanfordNlpParserLexparserAbstractTreebankParserParams_UnorderedUntypedDependencyTyper *new_EduStanfordNlpParserLexparserAbstractTreebankParserParams_UnorderedUntypedDependencyTyper_initWithEduStanfordNlpTreesHeadFinder_(id<EduStanfordNlpTreesHeadFinder> hf) {
  J2OBJC_NEW_IMPL(EduStanfordNlpParserLexparserAbstractTreebankParserParams_UnorderedUntypedDependencyTyper, initWithEduStanfordNlpTreesHeadFinder_, hf)
}

EduStanfordNlpParserLexparserAbstractTreebankParserParams_UnorderedUntypedDependencyTyper *create_EduStanfordNlpParserLexparserAbstractTreebankParserParams_UnorderedUntypedDependencyTyper_initWithEduStanfordNlpTreesHeadFinder_(id<EduStanfordNlpTreesHeadFinder> hf) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpParserLexparserAbstractTreebankParserParams_UnorderedUntypedDependencyTyper, initWithEduStanfordNlpTreesHeadFinder_, hf)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpParserLexparserAbstractTreebankParserParams_UnorderedUntypedDependencyTyper)

@implementation EduStanfordNlpParserLexparserAbstractTreebankParserParams_TypedDependencyTyper

- (instancetype)initWithEduStanfordNlpTreesHeadFinder:(id<EduStanfordNlpTreesHeadFinder>)hf {
  EduStanfordNlpParserLexparserAbstractTreebankParserParams_TypedDependencyTyper_initWithEduStanfordNlpTreesHeadFinder_(self, hf);
  return self;
}

- (id<JavaUtilList>)makeDependencyWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)head
                                  withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)dep
                                  withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)root {
  id<JavaUtilList> result = new_JavaUtilArrayList_initWithInt_(6);
  EduStanfordNlpTreesTree *headTerm = [((EduStanfordNlpTreesTree *) nil_chk(head)) headTerminalWithEduStanfordNlpTreesHeadFinder:hf_];
  EduStanfordNlpTreesTree *depTerm = [((EduStanfordNlpTreesTree *) nil_chk(dep)) headTerminalWithEduStanfordNlpTreesHeadFinder:hf_];
  jboolean headLeft = [((EduStanfordNlpTreesTree *) nil_chk(root)) leftCharEdgeWithEduStanfordNlpTreesTree:headTerm] < [root leftCharEdgeWithEduStanfordNlpTreesTree:depTerm];
  [result addWithId:[((EduStanfordNlpTreesTree *) nil_chk(headTerm)) value]];
  [result addWithId:[((EduStanfordNlpTreesTree *) nil_chk(depTerm)) value]];
  [result addWithId:[((EduStanfordNlpTreesTree *) nil_chk([head parentWithEduStanfordNlpTreesTree:root])) value]];
  [result addWithId:[head value]];
  [result addWithId:[dep value]];
  if (headLeft) [result addWithId:EduStanfordNlpParserLexparserAbstractTreebankParserParams_leftHeaded];
  else [result addWithId:EduStanfordNlpParserLexparserAbstractTreebankParserParams_rightHeaded];
  return result;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpTreesHeadFinder:);
  methods[1].selector = @selector(makeDependencyWithEduStanfordNlpTreesTree:withEduStanfordNlpTreesTree:withEduStanfordNlpTreesTree:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "hf_", "LEduStanfordNlpTreesHeadFinder;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpTreesHeadFinder;", "makeDependency", "LEduStanfordNlpTreesTree;LEduStanfordNlpTreesTree;LEduStanfordNlpTreesTree;", "(Ledu/stanford/nlp/trees/Tree;Ledu/stanford/nlp/trees/Tree;Ledu/stanford/nlp/trees/Tree;)Ljava/util/List<Ljava/lang/String;>;", "LEduStanfordNlpParserLexparserAbstractTreebankParserParams;", "Ljava/lang/Object;Ledu/stanford/nlp/trees/DependencyTyper<Ljava/util/List<Ljava/lang/String;>;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpParserLexparserAbstractTreebankParserParams_TypedDependencyTyper = { "TypedDependencyTyper", "edu.stanford.nlp.parser.lexparser", ptrTable, methods, fields, 7, 0xa, 2, 1, 4, -1, -1, 5, -1 };
  return &_EduStanfordNlpParserLexparserAbstractTreebankParserParams_TypedDependencyTyper;
}

@end

void EduStanfordNlpParserLexparserAbstractTreebankParserParams_TypedDependencyTyper_initWithEduStanfordNlpTreesHeadFinder_(EduStanfordNlpParserLexparserAbstractTreebankParserParams_TypedDependencyTyper *self, id<EduStanfordNlpTreesHeadFinder> hf) {
  NSObject_init(self);
  self->hf_ = hf;
}

EduStanfordNlpParserLexparserAbstractTreebankParserParams_TypedDependencyTyper *new_EduStanfordNlpParserLexparserAbstractTreebankParserParams_TypedDependencyTyper_initWithEduStanfordNlpTreesHeadFinder_(id<EduStanfordNlpTreesHeadFinder> hf) {
  J2OBJC_NEW_IMPL(EduStanfordNlpParserLexparserAbstractTreebankParserParams_TypedDependencyTyper, initWithEduStanfordNlpTreesHeadFinder_, hf)
}

EduStanfordNlpParserLexparserAbstractTreebankParserParams_TypedDependencyTyper *create_EduStanfordNlpParserLexparserAbstractTreebankParserParams_TypedDependencyTyper_initWithEduStanfordNlpTreesHeadFinder_(id<EduStanfordNlpTreesHeadFinder> hf) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpParserLexparserAbstractTreebankParserParams_TypedDependencyTyper, initWithEduStanfordNlpTreesHeadFinder_, hf)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpParserLexparserAbstractTreebankParserParams_TypedDependencyTyper)

@implementation EduStanfordNlpParserLexparserAbstractTreebankParserParams_UnorderedTypedDependencyTyper

- (instancetype)initWithEduStanfordNlpTreesHeadFinder:(id<EduStanfordNlpTreesHeadFinder>)hf {
  EduStanfordNlpParserLexparserAbstractTreebankParserParams_UnorderedTypedDependencyTyper_initWithEduStanfordNlpTreesHeadFinder_(self, hf);
  return self;
}

- (id<JavaUtilList>)makeDependencyWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)head
                                  withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)dep
                                  withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)root {
  id<JavaUtilList> result = new_JavaUtilArrayList_initWithInt_(6);
  EduStanfordNlpTreesTree *headTerm = [((EduStanfordNlpTreesTree *) nil_chk(head)) headTerminalWithEduStanfordNlpTreesHeadFinder:hf_];
  EduStanfordNlpTreesTree *depTerm = [((EduStanfordNlpTreesTree *) nil_chk(dep)) headTerminalWithEduStanfordNlpTreesHeadFinder:hf_];
  [result addWithId:[((EduStanfordNlpTreesTree *) nil_chk(headTerm)) value]];
  [result addWithId:[((EduStanfordNlpTreesTree *) nil_chk(depTerm)) value]];
  [result addWithId:[((EduStanfordNlpTreesTree *) nil_chk([head parentWithEduStanfordNlpTreesTree:root])) value]];
  [result addWithId:[head value]];
  [result addWithId:[dep value]];
  return result;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpTreesHeadFinder:);
  methods[1].selector = @selector(makeDependencyWithEduStanfordNlpTreesTree:withEduStanfordNlpTreesTree:withEduStanfordNlpTreesTree:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "hf_", "LEduStanfordNlpTreesHeadFinder;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpTreesHeadFinder;", "makeDependency", "LEduStanfordNlpTreesTree;LEduStanfordNlpTreesTree;LEduStanfordNlpTreesTree;", "(Ledu/stanford/nlp/trees/Tree;Ledu/stanford/nlp/trees/Tree;Ledu/stanford/nlp/trees/Tree;)Ljava/util/List<Ljava/lang/String;>;", "LEduStanfordNlpParserLexparserAbstractTreebankParserParams;", "Ljava/lang/Object;Ledu/stanford/nlp/trees/DependencyTyper<Ljava/util/List<Ljava/lang/String;>;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpParserLexparserAbstractTreebankParserParams_UnorderedTypedDependencyTyper = { "UnorderedTypedDependencyTyper", "edu.stanford.nlp.parser.lexparser", ptrTable, methods, fields, 7, 0xa, 2, 1, 4, -1, -1, 5, -1 };
  return &_EduStanfordNlpParserLexparserAbstractTreebankParserParams_UnorderedTypedDependencyTyper;
}

@end

void EduStanfordNlpParserLexparserAbstractTreebankParserParams_UnorderedTypedDependencyTyper_initWithEduStanfordNlpTreesHeadFinder_(EduStanfordNlpParserLexparserAbstractTreebankParserParams_UnorderedTypedDependencyTyper *self, id<EduStanfordNlpTreesHeadFinder> hf) {
  NSObject_init(self);
  self->hf_ = hf;
}

EduStanfordNlpParserLexparserAbstractTreebankParserParams_UnorderedTypedDependencyTyper *new_EduStanfordNlpParserLexparserAbstractTreebankParserParams_UnorderedTypedDependencyTyper_initWithEduStanfordNlpTreesHeadFinder_(id<EduStanfordNlpTreesHeadFinder> hf) {
  J2OBJC_NEW_IMPL(EduStanfordNlpParserLexparserAbstractTreebankParserParams_UnorderedTypedDependencyTyper, initWithEduStanfordNlpTreesHeadFinder_, hf)
}

EduStanfordNlpParserLexparserAbstractTreebankParserParams_UnorderedTypedDependencyTyper *create_EduStanfordNlpParserLexparserAbstractTreebankParserParams_UnorderedTypedDependencyTyper_initWithEduStanfordNlpTreesHeadFinder_(id<EduStanfordNlpTreesHeadFinder> hf) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpParserLexparserAbstractTreebankParserParams_UnorderedTypedDependencyTyper, initWithEduStanfordNlpTreesHeadFinder_, hf)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpParserLexparserAbstractTreebankParserParams_UnorderedTypedDependencyTyper)

@implementation EduStanfordNlpParserLexparserAbstractTreebankParserParams_AnnotatePunctuationFunction

- (instancetype)initWithNSString:(NSString *)annotationMark
                    withNSString:(NSString *)key {
  EduStanfordNlpParserLexparserAbstractTreebankParserParams_AnnotatePunctuationFunction_initWithNSString_withNSString_(self, annotationMark, key);
  return self;
}

- (NSString *)applyWithId:(EduStanfordNlpTreesTregexTregexMatcher *)m {
  NSString *punc = [((EduStanfordNlpTreesTree *) nil_chk([((EduStanfordNlpTreesTregexTregexMatcher *) nil_chk(m)) getNodeWithNSString:key_])) value];
  NSString *punctClass = EduStanfordNlpParserToolsPunctEquivalenceClasser_getPunctClassWithNSString_(punc);
  return [((NSString *) nil_chk(punctClass)) isEqual:@""] ? @"" : JreStrcat("$$", annotationMark_, punctClass);
}

- (NSString *)description {
  return @"AnnotatePunctuationFunction";
}

- (id<JavaUtilFunctionFunction>)andThenWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_andThenWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilFunctionFunction>)composeWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_composeWithJavaUtilFunctionFunction_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withNSString:);
  methods[1].selector = @selector(applyWithId:);
  methods[2].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "key_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "annotationMark_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpParserLexparserAbstractTreebankParserParams_AnnotatePunctuationFunction_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LNSString;", "apply", "LEduStanfordNlpTreesTregexTregexMatcher;", "toString", "LEduStanfordNlpParserLexparserAbstractTreebankParserParams;", "Ljava/lang/Object;Ledu/stanford/nlp/process/SerializableFunction<Ledu/stanford/nlp/trees/tregex/TregexMatcher;Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpParserLexparserAbstractTreebankParserParams_AnnotatePunctuationFunction = { "AnnotatePunctuationFunction", "edu.stanford.nlp.parser.lexparser", ptrTable, methods, fields, 7, 0xc, 3, 3, 4, -1, -1, 5, -1 };
  return &_EduStanfordNlpParserLexparserAbstractTreebankParserParams_AnnotatePunctuationFunction;
}

@end

void EduStanfordNlpParserLexparserAbstractTreebankParserParams_AnnotatePunctuationFunction_initWithNSString_withNSString_(EduStanfordNlpParserLexparserAbstractTreebankParserParams_AnnotatePunctuationFunction *self, NSString *annotationMark, NSString *key) {
  NSObject_init(self);
  self->key_ = key;
  self->annotationMark_ = annotationMark;
}

EduStanfordNlpParserLexparserAbstractTreebankParserParams_AnnotatePunctuationFunction *new_EduStanfordNlpParserLexparserAbstractTreebankParserParams_AnnotatePunctuationFunction_initWithNSString_withNSString_(NSString *annotationMark, NSString *key) {
  J2OBJC_NEW_IMPL(EduStanfordNlpParserLexparserAbstractTreebankParserParams_AnnotatePunctuationFunction, initWithNSString_withNSString_, annotationMark, key)
}

EduStanfordNlpParserLexparserAbstractTreebankParserParams_AnnotatePunctuationFunction *create_EduStanfordNlpParserLexparserAbstractTreebankParserParams_AnnotatePunctuationFunction_initWithNSString_withNSString_(NSString *annotationMark, NSString *key) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpParserLexparserAbstractTreebankParserParams_AnnotatePunctuationFunction, initWithNSString_withNSString_, annotationMark, key)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpParserLexparserAbstractTreebankParserParams_AnnotatePunctuationFunction)

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpParserLexparserAbstractTreebankParserParams_$Lambda$1)

@implementation EduStanfordNlpParserLexparserAbstractTreebankParserParams_$Lambda$1

- (id)equivalenceClassWithId:(id<JavaUtilList>)s {
  if ([((NSString *) nil_chk([((id<JavaUtilList>) nil_chk(s)) getWithInt:5])) isEqual:EduStanfordNlpParserLexparserAbstractTreebankParserParams_leftHeaded]) return JreStrcat("$C$$$C", [s getWithInt:2], '(', [s getWithInt:3], @"->", [s getWithInt:4], ')');
  return JreStrcat("$C$$$C", [s getWithInt:2], '(', [s getWithInt:4], @"<-", [s getWithInt:3], ')');
}

+ (void)initialize {
  if (self == [EduStanfordNlpParserLexparserAbstractTreebankParserParams_$Lambda$1 class]) {
    EduStanfordNlpParserLexparserAbstractTreebankParserParams_$Lambda$1_instance = new_EduStanfordNlpParserLexparserAbstractTreebankParserParams_$Lambda$1_init();
    J2OBJC_SET_INITIALIZED(EduStanfordNlpParserLexparserAbstractTreebankParserParams_$Lambda$1)
  }
}

@end

void EduStanfordNlpParserLexparserAbstractTreebankParserParams_$Lambda$1_init(EduStanfordNlpParserLexparserAbstractTreebankParserParams_$Lambda$1 *self) {
  NSObject_init(self);
}

EduStanfordNlpParserLexparserAbstractTreebankParserParams_$Lambda$1 *new_EduStanfordNlpParserLexparserAbstractTreebankParserParams_$Lambda$1_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpParserLexparserAbstractTreebankParserParams_$Lambda$1, init)
}

EduStanfordNlpParserLexparserAbstractTreebankParserParams_$Lambda$1 *create_EduStanfordNlpParserLexparserAbstractTreebankParserParams_$Lambda$1_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpParserLexparserAbstractTreebankParserParams_$Lambda$1, init)
}
