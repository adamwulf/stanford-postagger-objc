//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/parser/lexparser/TestOptions.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_EduStanfordNlpParserLexparserTestOptions")
#ifdef RESTRICT_EduStanfordNlpParserLexparserTestOptions
#define INCLUDE_ALL_EduStanfordNlpParserLexparserTestOptions 0
#else
#define INCLUDE_ALL_EduStanfordNlpParserLexparserTestOptions 1
#endif
#undef RESTRICT_EduStanfordNlpParserLexparserTestOptions

#if !defined (EduStanfordNlpParserLexparserTestOptions_) && (INCLUDE_ALL_EduStanfordNlpParserLexparserTestOptions || defined(INCLUDE_EduStanfordNlpParserLexparserTestOptions))
#define EduStanfordNlpParserLexparserTestOptions_

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class EduStanfordNlpTreesTreePrint;
@class JavaUtilProperties;
@protocol EduStanfordNlpParserLexparserTreebankLangParserParams;

@interface EduStanfordNlpParserLexparserTestOptions : NSObject < JavaIoSerializable > {
 @public
  jboolean noRecoveryTagging_;
  jboolean doRecovery_;
  jboolean useN5_;
  jboolean useFastFactored_;
  jboolean iterativeCKY_;
  jint maxLength_;
  jint MAX_ITEMS_;
  jdouble unseenSmooth_;
  jboolean increasingLength_;
  jboolean preTag_;
  jboolean forceTags_;
  jboolean forceTagBeginnings_;
  NSString *taggerSerializedFile_;
  jboolean noFunctionalForcing_;
  jboolean evalb_;
  jboolean verbose_;
  jboolean printAllBestParses_;
  jdouble depWeight_;
  jboolean prunePunc_;
  jboolean addMissingFinalPunctuation_;
  NSString *outputFormat_;
  NSString *outputFormatOptions_;
  jboolean writeOutputFiles_;
  NSString *outputFilesDirectory_;
  NSString *outputFilesExtension_;
  NSString *outputFilesPrefix_;
  NSString *outputkBestEquivocation_;
  jint maxSpanForTags_;
  jboolean lengthNormalization_;
  jboolean sample_;
  jint printPCFGkBest_;
  jint evalPCFGkBest_;
  jint printFactoredKGood_;
  JavaUtilProperties *evals_;
  jint fastFactoredCandidateMultiplier_;
  jint fastFactoredCandidateAddend_;
  jboolean useLexiconToScoreDependencyPwGt_;
  jboolean useNonProjectiveDependencyParser_;
  jint testingThreads_;
  jboolean quietEvaluation_;
}

#pragma mark Public

- (instancetype)init;

- (void)display;

- (NSString *)description;

- (EduStanfordNlpTreesTreePrint *)treePrintWithEduStanfordNlpParserLexparserTreebankLangParserParams:(id<EduStanfordNlpParserLexparserTreebankLangParserParams>)tlpParams;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpParserLexparserTestOptions)

J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserTestOptions, taggerSerializedFile_, NSString *)
J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserTestOptions, outputFormat_, NSString *)
J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserTestOptions, outputFormatOptions_, NSString *)
J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserTestOptions, outputFilesDirectory_, NSString *)
J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserTestOptions, outputFilesExtension_, NSString *)
J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserTestOptions, outputFilesPrefix_, NSString *)
J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserTestOptions, outputkBestEquivocation_, NSString *)
J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserTestOptions, evals_, JavaUtilProperties *)

inline NSString *EduStanfordNlpParserLexparserTestOptions_get_DEFAULT_PRE_TAGGER();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *EduStanfordNlpParserLexparserTestOptions_DEFAULT_PRE_TAGGER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpParserLexparserTestOptions, DEFAULT_PRE_TAGGER, NSString *)

inline jboolean EduStanfordNlpParserLexparserTestOptions_get_exhaustiveTest();
#define EduStanfordNlpParserLexparserTestOptions_exhaustiveTest false
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpParserLexparserTestOptions, exhaustiveTest, jboolean)

inline jboolean EduStanfordNlpParserLexparserTestOptions_get_pcfgThreshold();
#define EduStanfordNlpParserLexparserTestOptions_pcfgThreshold false
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpParserLexparserTestOptions, pcfgThreshold, jboolean)

inline jdouble EduStanfordNlpParserLexparserTestOptions_get_pcfgThresholdValue();
#define EduStanfordNlpParserLexparserTestOptions_pcfgThresholdValue -2.0
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpParserLexparserTestOptions, pcfgThresholdValue, jdouble)

FOUNDATION_EXPORT void EduStanfordNlpParserLexparserTestOptions_init(EduStanfordNlpParserLexparserTestOptions *self);

FOUNDATION_EXPORT EduStanfordNlpParserLexparserTestOptions *new_EduStanfordNlpParserLexparserTestOptions_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EduStanfordNlpParserLexparserTestOptions *create_EduStanfordNlpParserLexparserTestOptions_init();

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpParserLexparserTestOptions)

#endif

#pragma pop_macro("INCLUDE_ALL_EduStanfordNlpParserLexparserTestOptions")
