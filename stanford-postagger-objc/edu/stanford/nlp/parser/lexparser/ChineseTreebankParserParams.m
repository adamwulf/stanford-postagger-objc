//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/parser/lexparser/ChineseTreebankParserParams.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/io/EncodingPrintWriter.h"
#include "edu/stanford/nlp/io/NumberRangesFileFilter.h"
#include "edu/stanford/nlp/io/RuntimeIOException.h"
#include "edu/stanford/nlp/ling/CategoryWordTag.h"
#include "edu/stanford/nlp/ling/CoreLabel.h"
#include "edu/stanford/nlp/ling/Label.h"
#include "edu/stanford/nlp/ling/Sentence.h"
#include "edu/stanford/nlp/parser/lexparser/AbstractTreebankParserParams.h"
#include "edu/stanford/nlp/parser/lexparser/ChineseCharacterBasedLexicon.h"
#include "edu/stanford/nlp/parser/lexparser/ChineseLexicon.h"
#include "edu/stanford/nlp/parser/lexparser/ChineseLexiconAndWordSegmenter.h"
#include "edu/stanford/nlp/parser/lexparser/ChineseSimWordAvgDepGrammar.h"
#include "edu/stanford/nlp/parser/lexparser/ChineseTreebankParserParams.h"
#include "edu/stanford/nlp/parser/lexparser/Extractor.h"
#include "edu/stanford/nlp/parser/lexparser/IntDependency.h"
#include "edu/stanford/nlp/parser/lexparser/Lexicon.h"
#include "edu/stanford/nlp/parser/lexparser/MLEDependencyGrammar.h"
#include "edu/stanford/nlp/parser/lexparser/MLEDependencyGrammarExtractor.h"
#include "edu/stanford/nlp/parser/lexparser/Options.h"
#include "edu/stanford/nlp/parser/lexparser/SisterAnnotationStats.h"
#include "edu/stanford/nlp/parser/lexparser/TrainOptions.h"
#include "edu/stanford/nlp/parser/lexparser/TreebankLangParserParams.h"
#include "edu/stanford/nlp/process/TokenizerFactory.h"
#include "edu/stanford/nlp/process/WordSegmenter.h"
#include "edu/stanford/nlp/process/WordSegmentingTokenizer.h"
#include "edu/stanford/nlp/stats/ClassicCounter.h"
#include "edu/stanford/nlp/trees/DiskTreebank.h"
#include "edu/stanford/nlp/trees/GrammaticalStructure.h"
#include "edu/stanford/nlp/trees/HeadFinder.h"
#include "edu/stanford/nlp/trees/MemoryTreebank.h"
#include "edu/stanford/nlp/trees/Tree.h"
#include "edu/stanford/nlp/trees/TreeNormalizer.h"
#include "edu/stanford/nlp/trees/TreeReaderFactory.h"
#include "edu/stanford/nlp/trees/TreeTransformer.h"
#include "edu/stanford/nlp/trees/Treebank.h"
#include "edu/stanford/nlp/trees/TreebankLanguagePack.h"
#include "edu/stanford/nlp/trees/international/pennchinese/BikelChineseHeadFinder.h"
#include "edu/stanford/nlp/trees/international/pennchinese/CTBErrorCorrectingTreeNormalizer.h"
#include "edu/stanford/nlp/trees/international/pennchinese/CTBTreeReaderFactory.h"
#include "edu/stanford/nlp/trees/international/pennchinese/ChineseCollinizer.h"
#include "edu/stanford/nlp/trees/international/pennchinese/ChineseGrammaticalStructure.h"
#include "edu/stanford/nlp/trees/international/pennchinese/ChineseHeadFinder.h"
#include "edu/stanford/nlp/trees/international/pennchinese/ChineseSemanticHeadFinder.h"
#include "edu/stanford/nlp/trees/international/pennchinese/ChineseTreebankLanguagePack.h"
#include "edu/stanford/nlp/trees/international/pennchinese/SunJurafskyChineseHeadFinder.h"
#include "edu/stanford/nlp/util/Index.h"
#include "edu/stanford/nlp/util/ReflectionLoading.h"
#include "edu/stanford/nlp/util/StringUtils.h"
#include "java/io/IOException.h"
#include "java/io/PrintStream.h"
#include "java/io/PrintWriter.h"
#include "java/lang/Boolean.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/nio/charset/Charset.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "java/util/function/Predicate.h"

static id (*EduStanfordNlpParserLexparserChineseTreebankParserParams_super$_treebankLanguagePack)(id, SEL);

@interface EduStanfordNlpParserLexparserChineseTreebankParserParams () {
 @public
  EduStanfordNlpTreesInternationalPennchineseChineseTreebankLanguagePack *ctlp_;
  id<EduStanfordNlpParserLexparserLexicon> lex_;
  id<EduStanfordNlpProcessWordSegmenter> segmenter_;
  id<EduStanfordNlpTreesHeadFinder> headFinder_;
  jint depGramFeatureLevel_;
}

+ (void)printlnErrWithNSString:(NSString *)s;

- (id<JavaUtilList>)listBasicCategoriesWithJavaUtilList:(id<JavaUtilList>)l;

+ (jboolean)hasVWithJavaUtilList:(id<JavaUtilList>)tags;

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserChineseTreebankParserParams, ctlp_, EduStanfordNlpTreesInternationalPennchineseChineseTreebankLanguagePack *)
J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserChineseTreebankParserParams, lex_, id<EduStanfordNlpParserLexparserLexicon>)
J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserChineseTreebankParserParams, segmenter_, id<EduStanfordNlpProcessWordSegmenter>)
J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserChineseTreebankParserParams, headFinder_, id<EduStanfordNlpTreesHeadFinder>)

inline jlong EduStanfordNlpParserLexparserChineseTreebankParserParams_get_serialVersionUID();
#define EduStanfordNlpParserLexparserChineseTreebankParserParams_serialVersionUID 2LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpParserLexparserChineseTreebankParserParams, serialVersionUID, jlong)

__attribute__((unused)) static void EduStanfordNlpParserLexparserChineseTreebankParserParams_printlnErrWithNSString_(NSString *s);

__attribute__((unused)) static id<JavaUtilList> EduStanfordNlpParserLexparserChineseTreebankParserParams_listBasicCategoriesWithJavaUtilList_(EduStanfordNlpParserLexparserChineseTreebankParserParams *self, id<JavaUtilList> l);

__attribute__((unused)) static jboolean EduStanfordNlpParserLexparserChineseTreebankParserParams_hasVWithJavaUtilList_(id<JavaUtilList> tags);

@interface EduStanfordNlpParserLexparserChineseTreebankParserParams_$1 : EduStanfordNlpParserLexparserMLEDependencyGrammarExtractor {
 @public
  EduStanfordNlpParserLexparserChineseTreebankParserParams *this$0_;
}

- (EduStanfordNlpParserLexparserMLEDependencyGrammar *)formResult;

- (instancetype)initWithEduStanfordNlpParserLexparserChineseTreebankParserParams:(EduStanfordNlpParserLexparserChineseTreebankParserParams *)outer$
                                        withEduStanfordNlpParserLexparserOptions:(EduStanfordNlpParserLexparserOptions *)arg$0
                                                     withEduStanfordNlpUtilIndex:(id<EduStanfordNlpUtilIndex>)arg$1
                                                     withEduStanfordNlpUtilIndex:(id<EduStanfordNlpUtilIndex>)arg$2;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpParserLexparserChineseTreebankParserParams_$1)

J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserChineseTreebankParserParams_$1, this$0_, EduStanfordNlpParserLexparserChineseTreebankParserParams *)

__attribute__((unused)) static void EduStanfordNlpParserLexparserChineseTreebankParserParams_$1_initWithEduStanfordNlpParserLexparserChineseTreebankParserParams_withEduStanfordNlpParserLexparserOptions_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(EduStanfordNlpParserLexparserChineseTreebankParserParams_$1 *self, EduStanfordNlpParserLexparserChineseTreebankParserParams *outer$, EduStanfordNlpParserLexparserOptions *arg$0, id<EduStanfordNlpUtilIndex> arg$1, id<EduStanfordNlpUtilIndex> arg$2);

__attribute__((unused)) static EduStanfordNlpParserLexparserChineseTreebankParserParams_$1 *new_EduStanfordNlpParserLexparserChineseTreebankParserParams_$1_initWithEduStanfordNlpParserLexparserChineseTreebankParserParams_withEduStanfordNlpParserLexparserOptions_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(EduStanfordNlpParserLexparserChineseTreebankParserParams *outer$, EduStanfordNlpParserLexparserOptions *arg$0, id<EduStanfordNlpUtilIndex> arg$1, id<EduStanfordNlpUtilIndex> arg$2) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpParserLexparserChineseTreebankParserParams_$1 *create_EduStanfordNlpParserLexparserChineseTreebankParserParams_$1_initWithEduStanfordNlpParserLexparserChineseTreebankParserParams_withEduStanfordNlpParserLexparserOptions_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(EduStanfordNlpParserLexparserChineseTreebankParserParams *outer$, EduStanfordNlpParserLexparserOptions *arg$0, id<EduStanfordNlpUtilIndex> arg$1, id<EduStanfordNlpUtilIndex> arg$2);

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpParserLexparserChineseTreebankParserParams)

@implementation EduStanfordNlpParserLexparserChineseTreebankParserParams

+ (void)printlnErrWithNSString:(NSString *)s {
  EduStanfordNlpParserLexparserChineseTreebankParserParams_printlnErrWithNSString_(s);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpParserLexparserChineseTreebankParserParams_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<EduStanfordNlpTreesHeadFinder>)headFinder {
  if (headFinder_ == nil) {
    if (sunJurafskyHeadFinder_) {
      return new_EduStanfordNlpTreesInternationalPennchineseSunJurafskyChineseHeadFinder_init();
    }
    else if (bikelHeadFinder_) {
      return new_EduStanfordNlpTreesInternationalPennchineseBikelChineseHeadFinder_init();
    }
    else {
      return new_EduStanfordNlpTreesInternationalPennchineseChineseHeadFinder_init();
    }
  }
  else return headFinder_;
}

- (id<EduStanfordNlpTreesHeadFinder>)typedDependencyHeadFinder {
  return new_EduStanfordNlpTreesInternationalPennchineseChineseSemanticHeadFinder_init();
}

- (id<EduStanfordNlpParserLexparserLexicon>)lexWithEduStanfordNlpParserLexparserOptions:(EduStanfordNlpParserLexparserOptions *)op
                                                            withEduStanfordNlpUtilIndex:(id<EduStanfordNlpUtilIndex>)wordIndex
                                                            withEduStanfordNlpUtilIndex:(id<EduStanfordNlpUtilIndex>)tagIndex {
  if (useCharacterBasedLexicon_) {
    return lex_ = new_EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_initWithEduStanfordNlpParserLexparserChineseTreebankParserParams_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(self, wordIndex, tagIndex);
  }
  if (((EduStanfordNlpParserLexparserOptions_LexOptions *) nil_chk(((EduStanfordNlpParserLexparserOptions *) nil_chk(op))->lexOptions_))->uwModelTrainer_ == nil) {
    op->lexOptions_->uwModelTrainer_ = @"edu.stanford.nlp.parser.lexparser.ChineseUnknownWordModelTrainer";
  }
  if (segmenterClass_ != nil) {
    @try {
      segmenter_ = EduStanfordNlpUtilReflectionLoading_loadByReflectionWithNSString_withNSObjectArray_(segmenterClass_, [IOSObjectArray newArrayWithObjects:(id[]){ self, wordIndex, tagIndex } count:3 type:NSObject_class_()]);
    }
    @catch (EduStanfordNlpUtilReflectionLoading_ReflectionLoadingException *e) {
      segmenter_ = EduStanfordNlpUtilReflectionLoading_loadByReflectionWithNSString_withNSObjectArray_(segmenterClass_, [IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]);
    }
  }
  EduStanfordNlpParserLexparserChineseLexicon *clex = new_EduStanfordNlpParserLexparserChineseLexicon_initWithEduStanfordNlpParserLexparserOptions_withEduStanfordNlpParserLexparserChineseTreebankParserParams_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(op, self, wordIndex, tagIndex);
  if (segmenter_ != nil) {
    lex_ = new_EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter_initWithEduStanfordNlpParserLexparserChineseLexicon_withEduStanfordNlpProcessWordSegmenter_(clex, segmenter_);
    [((EduStanfordNlpTreesInternationalPennchineseChineseTreebankLanguagePack *) nil_chk(ctlp_)) setTokenizerFactoryWithEduStanfordNlpProcessTokenizerFactory:EduStanfordNlpProcessWordSegmentingTokenizer_factoryWithEduStanfordNlpProcessWordSegmenter_(segmenter_)];
  }
  else {
    lex_ = clex;
  }
  return lex_;
}

- (IOSDoubleArray *)MLEDependencyGrammarSmoothingParams {
  return [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ 5.8, 17.7, 6.5, 0.4 } count:4];
}

- (id<EduStanfordNlpTreesTreeReaderFactory>)treeReaderFactory {
  EduStanfordNlpTreesTreeNormalizer *tn = new_EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_initWithBoolean_withBoolean_withBoolean_withBoolean_(splitNPTMP_, splitPPTMP_, splitXPTMP_, charTags_);
  return new_EduStanfordNlpTreesInternationalPennchineseCTBTreeReaderFactory_initWithEduStanfordNlpTreesTreeNormalizer_withBoolean_(tn, discardFrags_);
}

- (EduStanfordNlpTreesDiskTreebank *)diskTreebank {
  NSString *encoding = inputEncoding_;
  if (!JavaNioCharsetCharset_isSupportedWithNSString_(encoding)) {
    EduStanfordNlpParserLexparserChineseTreebankParserParams_printlnErrWithNSString_(JreStrcat("$$$", @"Warning: desired encoding ", encoding, @" not accepted. "));
    EduStanfordNlpParserLexparserChineseTreebankParserParams_printlnErrWithNSString_(@"Using UTF-8 to construct DiskTreebank");
    encoding = @"UTF-8";
  }
  return new_EduStanfordNlpTreesDiskTreebank_initWithEduStanfordNlpTreesTreeReaderFactory_withNSString_([self treeReaderFactory], encoding);
}

- (EduStanfordNlpTreesMemoryTreebank *)memoryTreebank {
  NSString *encoding = inputEncoding_;
  if (!JavaNioCharsetCharset_isSupportedWithNSString_(encoding)) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$$", @"Warning: desired encoding ", encoding, @" not accepted. ")];
    [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"Using UTF-8 to construct MemoryTreebank"];
    encoding = @"UTF-8";
  }
  return new_EduStanfordNlpTreesMemoryTreebank_initWithEduStanfordNlpTreesTreeReaderFactory_withNSString_([self treeReaderFactory], encoding);
}

- (id<EduStanfordNlpTreesTreeTransformer>)collinizer {
  return new_EduStanfordNlpTreesInternationalPennchineseChineseCollinizer_initWithEduStanfordNlpTreesInternationalPennchineseChineseTreebankLanguagePack_(ctlp_);
}

- (id<EduStanfordNlpTreesTreeTransformer>)collinizerEvalb {
  return new_EduStanfordNlpTreesInternationalPennchineseChineseCollinizer_initWithEduStanfordNlpTreesInternationalPennchineseChineseTreebankLanguagePack_withBoolean_(ctlp_, false);
}

- (IOSObjectArray *)sisterSplitters {
  return JreLoadStatic(EduStanfordNlpUtilStringUtils, EMPTY_STRING_ARRAY);
}

- (EduStanfordNlpTreesTree *)transformTreeWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
                                          withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)root {
  if (t == nil || [t isLeaf]) {
    return t;
  }
  NSString *parentStr;
  NSString *grandParentStr;
  EduStanfordNlpTreesTree *parent;
  EduStanfordNlpTreesTree *grandParent;
  if (root == nil || [t isEqual:root]) {
    parent = nil;
    parentStr = @"";
  }
  else {
    parent = [t parentWithEduStanfordNlpTreesTree:root];
    parentStr = [((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(parent)) label])) value];
  }
  if (parent == nil || [parent isEqual:root]) {
    grandParent = nil;
    grandParentStr = @"";
  }
  else {
    grandParent = [parent parentWithEduStanfordNlpTreesTree:root];
    grandParentStr = [((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(grandParent)) label])) value];
  }
  NSString *baseParentStr = [((EduStanfordNlpTreesInternationalPennchineseChineseTreebankLanguagePack *) nil_chk(ctlp_)) basicCategoryWithNSString:parentStr];
  NSString *baseGrandParentStr = [((EduStanfordNlpTreesInternationalPennchineseChineseTreebankLanguagePack *) nil_chk(ctlp_)) basicCategoryWithNSString:grandParentStr];
  EduStanfordNlpLingCoreLabel *lab = (EduStanfordNlpLingCoreLabel *) cast_chk([t label], [EduStanfordNlpLingCoreLabel class]);
  NSString *word = [((EduStanfordNlpLingCoreLabel *) nil_chk(lab)) word];
  NSString *tag = [lab tag];
  NSString *baseTag = [((EduStanfordNlpTreesInternationalPennchineseChineseTreebankLanguagePack *) nil_chk(ctlp_)) basicCategoryWithNSString:tag];
  NSString *category = [lab value];
  NSString *baseCategory = [((EduStanfordNlpTreesInternationalPennchineseChineseTreebankLanguagePack *) nil_chk(ctlp_)) basicCategoryWithNSString:category];
  if ([t isPreTerminal]) {
    id<JavaUtilList> leftAunts = EduStanfordNlpParserLexparserChineseTreebankParserParams_listBasicCategoriesWithJavaUtilList_(self, EduStanfordNlpParserLexparserSisterAnnotationStats_leftSisterLabelsWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_(parent, grandParent));
    id<JavaUtilList> rightAunts = EduStanfordNlpParserLexparserChineseTreebankParserParams_listBasicCategoriesWithJavaUtilList_(self, EduStanfordNlpParserLexparserSisterAnnotationStats_rightSisterLabelsWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_(parent, grandParent));
    if (chineseSplitPunct_ && [((NSString *) nil_chk(baseTag)) isEqual:@"PU"]) {
      if ([((id<JavaUtilFunctionPredicate>) nil_chk(EduStanfordNlpTreesInternationalPennchineseChineseTreebankLanguagePack_chineseDouHaoAcceptFilter())) testWithId:word]) {
        tag = JreStrcat("$$", tag, @"-DOU");
      }
      else if ([((id<JavaUtilFunctionPredicate>) nil_chk(EduStanfordNlpTreesInternationalPennchineseChineseTreebankLanguagePack_chineseCommaAcceptFilter())) testWithId:word]) {
        tag = JreStrcat("$$", tag, @"-COMMA");
      }
      else if ([((id<JavaUtilFunctionPredicate>) nil_chk(EduStanfordNlpTreesInternationalPennchineseChineseTreebankLanguagePack_chineseColonAcceptFilter())) testWithId:word]) {
        tag = JreStrcat("$$", tag, @"-COLON");
      }
      else if ([((id<JavaUtilFunctionPredicate>) nil_chk(EduStanfordNlpTreesInternationalPennchineseChineseTreebankLanguagePack_chineseQuoteMarkAcceptFilter())) testWithId:word]) {
        if (chineseSplitPunctLR_) {
          if ([((id<JavaUtilFunctionPredicate>) nil_chk(EduStanfordNlpTreesInternationalPennchineseChineseTreebankLanguagePack_chineseLeftQuoteMarkAcceptFilter())) testWithId:word]) {
            (void) JreStrAppendStrong(&tag, "$", @"-LQUOTE");
          }
          else {
            (void) JreStrAppendStrong(&tag, "$", @"-RQUOTE");
          }
        }
        else {
          tag = JreStrcat("$$", tag, @"-QUOTE");
        }
      }
      else if ([((id<JavaUtilFunctionPredicate>) nil_chk(EduStanfordNlpTreesInternationalPennchineseChineseTreebankLanguagePack_chineseEndSentenceAcceptFilter())) testWithId:word]) {
        tag = JreStrcat("$$", tag, @"-ENDSENT");
      }
      else if ([((id<JavaUtilFunctionPredicate>) nil_chk(EduStanfordNlpTreesInternationalPennchineseChineseTreebankLanguagePack_chineseParenthesisAcceptFilter())) testWithId:word]) {
        if (chineseSplitPunctLR_) {
          if ([((id<JavaUtilFunctionPredicate>) nil_chk(EduStanfordNlpTreesInternationalPennchineseChineseTreebankLanguagePack_chineseLeftParenthesisAcceptFilter())) testWithId:word]) {
            (void) JreStrAppendStrong(&tag, "$", @"-LPAREN");
          }
          else {
            (void) JreStrAppendStrong(&tag, "$", @"-RPAREN");
          }
        }
        else {
          (void) JreStrAppendStrong(&tag, "$", @"-PAREN");
        }
      }
      else if ([((id<JavaUtilFunctionPredicate>) nil_chk(EduStanfordNlpTreesInternationalPennchineseChineseTreebankLanguagePack_chineseDashAcceptFilter())) testWithId:word]) {
        tag = JreStrcat("$$", tag, @"-DASH");
      }
      else if ([((id<JavaUtilFunctionPredicate>) nil_chk(EduStanfordNlpTreesInternationalPennchineseChineseTreebankLanguagePack_chineseOtherAcceptFilter())) testWithId:word]) {
        tag = JreStrcat("$$", tag, @"-OTHER");
      }
      else {
        EduStanfordNlpParserLexparserChineseTreebankParserParams_printlnErrWithNSString_(JreStrcat("$$$$C", @"Unknown punct (you should add it to CTLP): ", tag, @" |", word, '|'));
      }
    }
    else if (chineseSplitDouHao_) {
      if ([((id<JavaUtilFunctionPredicate>) nil_chk(EduStanfordNlpTreesInternationalPennchineseChineseTreebankLanguagePack_chineseDouHaoAcceptFilter())) testWithId:word] && [((NSString *) nil_chk(baseTag)) isEqual:@"PU"]) {
        tag = JreStrcat("$$", tag, @"-DOU");
      }
    }
    if (tagWordSize_) {
      jint l = ((jint) [((NSString *) nil_chk(word)) length]);
      (void) JreStrAppendStrong(&tag, "CI$", '-', l, @"CHARS");
    }
    if (mergeNNVV_ && [((NSString *) nil_chk(baseTag)) isEqual:@"NN"]) {
      tag = @"VV";
    }
    if ((chineseSelectiveTagPA_ || chineseVerySelectiveTagPA_) && ([((NSString *) nil_chk(baseTag)) isEqual:@"CC"] || [baseTag isEqual:@"P"])) {
      (void) JreStrAppendStrong(&tag, "C$", '-', baseParentStr);
    }
    if (chineseSelectiveTagPA_ && ([((NSString *) nil_chk(baseTag)) isEqual:@"VV"])) {
      (void) JreStrAppendStrong(&tag, "C$", '-', baseParentStr);
    }
    if (markMultiNtag_ && [((NSString *) nil_chk(tag)) hasPrefix:@"N"]) {
      for (jint i = 0; i < [((EduStanfordNlpTreesTree *) nil_chk(parent)) numChildren]; i++) {
        if ([((NSString *) nil_chk([((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(IOSObjectArray_Get(nil_chk([parent children]), i))) label])) value])) hasPrefix:@"N"] && IOSObjectArray_Get(nil_chk([parent children]), i) != t) {
          (void) JreStrAppendStrong(&tag, "$", @"=N");
        }
      }
    }
    if (markVVsisterIP_ && [((NSString *) nil_chk(baseTag)) isEqual:@"VV"]) {
      jboolean seenIP = false;
      for (jint i = 0; i < [((EduStanfordNlpTreesTree *) nil_chk(parent)) numChildren]; i++) {
        if ([((NSString *) nil_chk([((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(IOSObjectArray_Get(nil_chk([parent children]), i))) label])) value])) hasPrefix:@"IP"]) {
          seenIP = true;
        }
      }
      if (seenIP) {
        (void) JreStrAppendStrong(&tag, "$", @"-IP");
      }
    }
    if (markPsisterIP_ && [((NSString *) nil_chk(baseTag)) isEqual:@"P"]) {
      jboolean seenIP = false;
      for (jint i = 0; i < [((EduStanfordNlpTreesTree *) nil_chk(parent)) numChildren]; i++) {
        if ([((NSString *) nil_chk([((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(IOSObjectArray_Get(nil_chk([parent children]), i))) label])) value])) hasPrefix:@"IP"]) {
          seenIP = true;
        }
      }
      if (seenIP) {
        (void) JreStrAppendStrong(&tag, "$", @"-IP");
      }
    }
    if (markADgrandchildOfIP_ && [((NSString *) nil_chk(baseTag)) isEqual:@"AD"] && [((NSString *) nil_chk(baseGrandParentStr)) isEqual:@"IP"]) {
      (void) JreStrAppendStrong(&tag, "$", @"~IP");
    }
    if (gpaAD_ && [((NSString *) nil_chk(baseTag)) isEqual:@"AD"]) {
      (void) JreStrAppendStrong(&tag, "C$", '~', baseGrandParentStr);
    }
    if (markPostverbalP_ && [((id<JavaUtilList>) nil_chk(leftAunts)) containsWithId:@"VV"] && [((NSString *) nil_chk(baseTag)) isEqual:@"P"]) {
      (void) JreStrAppendStrong(&tag, "$", @"^=lVV");
    }
    id<EduStanfordNlpLingLabel> label = new_EduStanfordNlpLingCategoryWordTag_initWithNSString_withNSString_withNSString_(tag, word, tag);
    [t setLabelWithEduStanfordNlpLingLabel:label];
  }
  else {
    IOSObjectArray *kids = [t children];
    id<JavaUtilList> leftSis = EduStanfordNlpParserLexparserChineseTreebankParserParams_listBasicCategoriesWithJavaUtilList_(self, EduStanfordNlpParserLexparserSisterAnnotationStats_leftSisterLabelsWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_(t, parent));
    id<JavaUtilList> rightSis = EduStanfordNlpParserLexparserChineseTreebankParserParams_listBasicCategoriesWithJavaUtilList_(self, EduStanfordNlpParserLexparserSisterAnnotationStats_rightSisterLabelsWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_(t, parent));
    if (paRootDtr_ && [((NSString *) nil_chk(baseParentStr)) isEqual:@"ROOT"]) {
      (void) JreStrAppendStrong(&category, "$", @"^ROOT");
    }
    if (markIPsisterBA_ && [((NSString *) nil_chk(baseCategory)) isEqual:@"IP"]) {
      if ([((id<JavaUtilList>) nil_chk(leftSis)) containsWithId:@"BA"]) {
        (void) JreStrAppendStrong(&category, "$", @"=BA");
      }
    }
    if (dominatesV_ && EduStanfordNlpParserLexparserChineseTreebankParserParams_hasVWithJavaUtilList_([t preTerminalYield])) {
      (void) JreStrAppendStrong(&category, "$", @"-v");
    }
    if (markIPsisterVVorP_ && [((NSString *) nil_chk(baseCategory)) isEqual:@"IP"]) {
      if ([((id<JavaUtilList>) nil_chk(leftSis)) containsWithId:@"VV"] || [leftSis containsWithId:@"P"]) {
        (void) JreStrAppendStrong(&category, "$", @"=VVP");
      }
    }
    if (markIPsisDEC_ && [((NSString *) nil_chk(baseCategory)) isEqual:@"IP"]) {
      if ([((id<JavaUtilList>) nil_chk(rightSis)) containsWithId:@"DEC"]) {
        (void) JreStrAppendStrong(&category, "$", @"=DEC");
      }
    }
    if ([((NSString *) nil_chk(baseCategory)) isEqual:@"VP"]) {
      if (chineseSplitVP_ == 3) {
        jboolean hasCC = false;
        jboolean hasPU = false;
        jboolean hasLexV = false;
        {
          IOSObjectArray *a__ = kids;
          EduStanfordNlpTreesTree * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
          EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
          while (b__ < e__) {
            EduStanfordNlpTreesTree *kid = *b__++;
            if ([((NSString *) nil_chk([((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(kid)) label])) value])) hasPrefix:@"CC"]) {
              hasCC = true;
            }
            else if ([((NSString *) nil_chk([((id<EduStanfordNlpLingLabel>) nil_chk([kid label])) value])) hasPrefix:@"PU"]) {
              hasPU = true;
            }
            else if (EduStanfordNlpUtilStringUtils_lookingAtWithNSString_withNSString_([((id<EduStanfordNlpLingLabel>) nil_chk([kid label])) value], @"(V[ACEV]|VCD|VCP|VNV|VPT|VRD|VSB)")) {
              hasLexV = true;
            }
          }
        }
        if (hasCC || (hasPU && !hasLexV)) {
          (void) JreStrAppendStrong(&category, "$", @"-CRD");
        }
        else if (hasLexV) {
          (void) JreStrAppendStrong(&category, "$", @"-COMP");
        }
        else {
          (void) JreStrAppendStrong(&category, "$", @"-ADJT");
        }
      }
      else if (chineseSplitVP_ >= 1) {
        jboolean hasBA = false;
        {
          IOSObjectArray *a__ = kids;
          EduStanfordNlpTreesTree * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
          EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
          while (b__ < e__) {
            EduStanfordNlpTreesTree *kid = *b__++;
            if ([((NSString *) nil_chk([((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(kid)) label])) value])) hasPrefix:@"BA"]) {
              hasBA = true;
            }
            else if (chineseSplitVP_ == 2 && [((NSString *) nil_chk([((id<EduStanfordNlpTreesTreebankLanguagePack>) nil_chk(tlp_)) basicCategoryWithNSString:[((id<EduStanfordNlpLingLabel>) nil_chk([kid label])) value]])) isEqual:@"VP"]) {
              {
                IOSObjectArray *a__ = [kid children];
                EduStanfordNlpTreesTree * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
                EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
                while (b__ < e__) {
                  EduStanfordNlpTreesTree *kidkid = *b__++;
                  if ([((NSString *) nil_chk([((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(kidkid)) label])) value])) hasPrefix:@"BA"]) {
                    hasBA = true;
                  }
                }
              }
            }
          }
        }
        if (hasBA) {
          (void) JreStrAppendStrong(&category, "$", @"-BA");
        }
      }
    }
    if (markVPadjunct_ && [((NSString *) nil_chk(baseParentStr)) isEqual:@"VP"]) {
      IOSObjectArray *sisters = [((EduStanfordNlpTreesTree *) nil_chk(parent)) children];
      jboolean hasVPsister = false;
      jboolean hasCC = false;
      jboolean hasPU = false;
      jboolean hasLexV = false;
      {
        IOSObjectArray *a__ = sisters;
        EduStanfordNlpTreesTree * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
        EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          EduStanfordNlpTreesTree *sister = *b__++;
          if ([((NSString *) nil_chk([((id<EduStanfordNlpTreesTreebankLanguagePack>) nil_chk(tlp_)) basicCategoryWithNSString:[((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(sister)) label])) value]])) isEqual:@"VP"]) {
            hasVPsister = true;
          }
          if ([((NSString *) nil_chk([((id<EduStanfordNlpLingLabel>) nil_chk([sister label])) value])) hasPrefix:@"CC"]) {
            hasCC = true;
          }
          if ([((NSString *) nil_chk([((id<EduStanfordNlpLingLabel>) nil_chk([sister label])) value])) hasPrefix:@"PU"]) {
            hasPU = true;
          }
          if (EduStanfordNlpUtilStringUtils_lookingAtWithNSString_withNSString_([((id<EduStanfordNlpLingLabel>) nil_chk([sister label])) value], @"(V[ACEV]|VCD|VCP|VNV|VPT|VRD|VSB)")) {
            hasLexV = true;
          }
        }
      }
      if (hasVPsister && !(hasCC || hasPU || hasLexV)) {
        (void) JreStrAppendStrong(&category, "$", @"-VPADJ");
      }
    }
    if (markNPmodNP_ && [baseCategory isEqual:@"NP"] && [((NSString *) nil_chk(baseParentStr)) isEqual:@"NP"]) {
      if ([((id<JavaUtilList>) nil_chk(rightSis)) containsWithId:@"NP"]) {
        (void) JreStrAppendStrong(&category, "$", @"=MODIFIERNP");
      }
    }
    if (markModifiedNP_ && [baseCategory isEqual:@"NP"] && [((NSString *) nil_chk(baseParentStr)) isEqual:@"NP"]) {
      if ([((id<JavaUtilList>) nil_chk(rightSis)) isEmpty] && ([((id<JavaUtilList>) nil_chk(leftSis)) containsWithId:@"ADJP"] || [leftSis containsWithId:@"NP"] || [leftSis containsWithId:@"DNP"] || [leftSis containsWithId:@"QP"] || [leftSis containsWithId:@"CP"] || [leftSis containsWithId:@"PP"])) {
        (void) JreStrAppendStrong(&category, "$", @"=MODIFIEDNP");
      }
    }
    if (markNPconj_ && [baseCategory isEqual:@"NP"] && [((NSString *) nil_chk(baseParentStr)) isEqual:@"NP"]) {
      if ([((id<JavaUtilList>) nil_chk(rightSis)) containsWithId:@"CC"] || [rightSis containsWithId:@"PU"] || [((id<JavaUtilList>) nil_chk(leftSis)) containsWithId:@"CC"] || [leftSis containsWithId:@"PU"]) {
        (void) JreStrAppendStrong(&category, "$", @"=CONJ");
      }
    }
    if (markIPconj_ && [baseCategory isEqual:@"IP"] && [((NSString *) nil_chk(baseParentStr)) isEqual:@"IP"]) {
      IOSObjectArray *sisters = [((EduStanfordNlpTreesTree *) nil_chk(parent)) children];
      jboolean hasCommaSis = false;
      jboolean hasIPSis = false;
      {
        IOSObjectArray *a__ = sisters;
        EduStanfordNlpTreesTree * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
        EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          EduStanfordNlpTreesTree *sister = *b__++;
          if ([((NSString *) nil_chk([((EduStanfordNlpTreesInternationalPennchineseChineseTreebankLanguagePack *) nil_chk(ctlp_)) basicCategoryWithNSString:[((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(sister)) label])) value]])) isEqual:@"PU"] && [((id<JavaUtilFunctionPredicate>) nil_chk(EduStanfordNlpTreesInternationalPennchineseChineseTreebankLanguagePack_chineseCommaAcceptFilter())) testWithId:[((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(IOSObjectArray_Get(nil_chk([sister children]), 0))) label])) description]]) {
            hasCommaSis = true;
          }
          if ([((NSString *) nil_chk([((EduStanfordNlpTreesInternationalPennchineseChineseTreebankLanguagePack *) nil_chk(ctlp_)) basicCategoryWithNSString:[((id<EduStanfordNlpLingLabel>) nil_chk([sister label])) value]])) isEqual:@"IP"] && sister != t) {
            hasIPSis = true;
          }
        }
      }
      if (hasCommaSis && hasIPSis) {
        (void) JreStrAppendStrong(&category, "$", @"-CONJ");
      }
    }
    if (unaryIP_ && [baseCategory isEqual:@"IP"] && [t numChildren] == 1) {
      (void) JreStrAppendStrong(&category, "$", @"-U");
    }
    if (unaryCP_ && [baseCategory isEqual:@"CP"] && [t numChildren] == 1) {
      (void) JreStrAppendStrong(&category, "$", @"-U");
    }
    if (splitBaseNP_ && [baseCategory isEqual:@"NP"]) {
      if ([t isPrePreTerminal]) {
        category = JreStrcat("$$", category, @"-B");
      }
    }
    if (markPostverbalPP_ && [((id<JavaUtilList>) nil_chk(leftSis)) containsWithId:@"VV"] && [baseCategory isEqual:@"PP"]) {
      (void) JreStrAppendStrong(&category, "$", @"=lVV");
    }
    if ((markADgrandchildOfIP_ || gpaAD_) && [((id<JavaUtilList>) nil_chk(EduStanfordNlpParserLexparserChineseTreebankParserParams_listBasicCategoriesWithJavaUtilList_(self, EduStanfordNlpParserLexparserSisterAnnotationStats_kidLabelsWithEduStanfordNlpTreesTree_(t)))) containsWithId:@"AD"]) {
      (void) JreStrAppendStrong(&category, "$", @"^ADVP");
    }
    if (markCC_) {
      for (jint i = 1; i < ((IOSObjectArray *) nil_chk(kids))->size_ - 1; i++) {
        NSString *cat2 = [((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(IOSObjectArray_Get(kids, i))) label])) value];
        if ([((NSString *) nil_chk(cat2)) hasPrefix:@"CC"]) {
          (void) JreStrAppendStrong(&category, "$", @"-CC");
        }
      }
    }
    id<EduStanfordNlpLingLabel> label = new_EduStanfordNlpLingCategoryWordTag_initWithNSString_withNSString_withNSString_(category, word, tag);
    [t setLabelWithEduStanfordNlpLingLabel:label];
  }
  return t;
}

- (void)display {
  NSString *chineseParams = JreStrcat("$Z$Z$Z$Z$Z$I$Z$Z$Z$Z$Z$Z$Z$Z$Z$Z$Z$Z$Z$Z$Z$Z$Z$Z$$$Z$Z", @"Using ChineseTreebankParserParams chineseSplitDouHao=", chineseSplitDouHao_, @" chineseSplitPunct=", chineseSplitPunct_, @" chineseSplitPunctLR=", chineseSplitPunctLR_, @" markVVsisterIP=", markVVsisterIP_, @" markVPadjunct=", markVPadjunct_, @" chineseSplitVP=", chineseSplitVP_, @" mergeNNVV=", mergeNNVV_, @" unaryIP=", unaryIP_, @" unaryCP=", unaryCP_, @" paRootDtr=", paRootDtr_, @" markPsisterIP=", markPsisterIP_, @" markIPsisterVVorP=", markIPsisterVVorP_, @" markADgrandchildOfIP=", markADgrandchildOfIP_, @" gpaAD=", gpaAD_, @" markIPsisterBA=", markIPsisterBA_, @" markNPmodNP=", markNPmodNP_, @" markNPconj=", markNPconj_, @" markMultiNtag=", markMultiNtag_, @" markIPsisDEC=", markIPsisDEC_, @" markIPconj=", markIPconj_, @" markIPadjsubj=", markIPadjsubj_, @" markPostverbalP=", markPostverbalP_, @" markPostverbalPP=", markPostverbalPP_, @" baseNP=", splitBaseNP_, @" headFinder=", (sunJurafskyHeadFinder_ ? @"sunJurafsky" : (bikelHeadFinder_ ? @"bikel" : @"levy")), @" discardFrags=", discardFrags_, @" dominatesV=", dominatesV_);
  EduStanfordNlpParserLexparserChineseTreebankParserParams_printlnErrWithNSString_(chineseParams);
}

- (id<JavaUtilList>)listBasicCategoriesWithJavaUtilList:(id<JavaUtilList>)l {
  return EduStanfordNlpParserLexparserChineseTreebankParserParams_listBasicCategoriesWithJavaUtilList_(self, l);
}

+ (jboolean)hasVWithJavaUtilList:(id<JavaUtilList>)tags {
  return EduStanfordNlpParserLexparserChineseTreebankParserParams_hasVWithJavaUtilList_(tags);
}

- (jint)setOptionFlagWithNSStringArray:(IOSObjectArray *)args
                               withInt:(jint)i {
  if ([((NSString *) nil_chk(IOSObjectArray_Get(nil_chk(args), i))) equalsIgnoreCase:@"-paRootDtr"]) {
    paRootDtr_ = true;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-unaryIP"]) {
    unaryIP_ = true;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-unaryCP"]) {
    unaryCP_ = true;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-markPostverbalP"]) {
    markPostverbalP_ = true;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-markPostverbalPP"]) {
    markPostverbalPP_ = true;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-baseNP"]) {
    splitBaseNP_ = true;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-markVVsisterIP"]) {
    markVVsisterIP_ = true;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-markPsisterIP"]) {
    markPsisterIP_ = true;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-markIPsisterVVorP"]) {
    markIPsisterVVorP_ = true;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-markIPsisterBA"]) {
    markIPsisterBA_ = true;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-dominatesV"]) {
    dominatesV_ = true;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-gpaAD"]) {
    gpaAD_ = true;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-markVPadjunct"]) {
    markVPadjunct_ = [((JavaLangBoolean *) nil_chk(JavaLangBoolean_valueOfWithNSString_(IOSObjectArray_Get(args, i + 1)))) booleanValue];
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-markNPmodNP"]) {
    markNPmodNP_ = true;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-markModifiedNP"]) {
    markModifiedNP_ = true;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-nomarkModifiedNP"]) {
    markModifiedNP_ = false;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-markNPconj"]) {
    markNPconj_ = true;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-nomarkNPconj"]) {
    markNPconj_ = false;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-chineseSplitPunct"]) {
    chineseSplitPunct_ = true;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-chineseSplitPunctLR"]) {
    chineseSplitPunct_ = true;
    chineseSplitPunctLR_ = true;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-chineseSelectiveTagPA"]) {
    chineseSelectiveTagPA_ = true;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-chineseVerySelectiveTagPA"]) {
    chineseVerySelectiveTagPA_ = true;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-markIPsisDEC"]) {
    markIPsisDEC_ = true;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-chineseSplitVP"]) {
    chineseSplitVP_ = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, i + 1));
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-tagWordSize"]) {
    tagWordSize_ = true;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-vanilla"]) {
    chineseSplitDouHao_ = false;
    chineseSplitPunct_ = false;
    chineseSplitPunctLR_ = false;
    markVVsisterIP_ = false;
    markPsisterIP_ = false;
    markIPsisterVVorP_ = false;
    markADgrandchildOfIP_ = false;
    gpaAD_ = false;
    markIPsisterBA_ = false;
    markVPadjunct_ = false;
    markNPmodNP_ = false;
    markModifiedNP_ = false;
    markNPconj_ = false;
    markMultiNtag_ = false;
    markIPsisDEC_ = false;
    markIPconj_ = false;
    markIPadjsubj_ = false;
    chineseSplitVP_ = 0;
    mergeNNVV_ = false;
    unaryIP_ = false;
    unaryCP_ = false;
    paRootDtr_ = false;
    markPostverbalP_ = false;
    markPostverbalPP_ = false;
    splitBaseNP_ = false;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-acl03chinese"]) {
    chineseSplitDouHao_ = false;
    chineseSplitPunct_ = true;
    chineseSplitPunctLR_ = true;
    markVVsisterIP_ = true;
    markPsisterIP_ = true;
    markIPsisterVVorP_ = true;
    markADgrandchildOfIP_ = false;
    gpaAD_ = true;
    markIPsisterBA_ = false;
    markVPadjunct_ = true;
    markNPmodNP_ = true;
    markModifiedNP_ = true;
    markNPconj_ = true;
    markMultiNtag_ = false;
    markIPsisDEC_ = true;
    markIPconj_ = false;
    markIPadjsubj_ = false;
    chineseSplitVP_ = 3;
    mergeNNVV_ = false;
    unaryIP_ = true;
    unaryCP_ = true;
    paRootDtr_ = true;
    markPostverbalP_ = false;
    markPostverbalPP_ = false;
    splitBaseNP_ = false;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-chineseFactored"]) {
    chineseSplitDouHao_ = false;
    chineseSplitPunct_ = true;
    chineseSplitPunctLR_ = true;
    markVVsisterIP_ = true;
    markPsisterIP_ = true;
    markIPsisterVVorP_ = true;
    markADgrandchildOfIP_ = false;
    gpaAD_ = true;
    markIPsisterBA_ = true;
    markVPadjunct_ = true;
    markNPmodNP_ = true;
    markModifiedNP_ = true;
    markNPconj_ = true;
    markMultiNtag_ = false;
    markIPsisDEC_ = true;
    markIPconj_ = false;
    markIPadjsubj_ = false;
    chineseSplitVP_ = 3;
    mergeNNVV_ = false;
    unaryIP_ = true;
    unaryCP_ = true;
    paRootDtr_ = true;
    markPostverbalP_ = false;
    markPostverbalPP_ = false;
    splitBaseNP_ = false;
    chineseVerySelectiveTagPA_ = true;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-chinesePCFG"]) {
    chineseSplitDouHao_ = false;
    chineseSplitPunct_ = true;
    chineseSplitPunctLR_ = true;
    markVVsisterIP_ = true;
    markPsisterIP_ = false;
    markIPsisterVVorP_ = true;
    markADgrandchildOfIP_ = false;
    gpaAD_ = false;
    markIPsisterBA_ = true;
    markVPadjunct_ = true;
    markNPmodNP_ = true;
    markModifiedNP_ = true;
    markNPconj_ = false;
    markMultiNtag_ = false;
    markIPsisDEC_ = false;
    markIPconj_ = false;
    markIPadjsubj_ = false;
    chineseSplitVP_ = 0;
    mergeNNVV_ = false;
    unaryIP_ = false;
    unaryCP_ = false;
    paRootDtr_ = false;
    markPostverbalP_ = false;
    markPostverbalPP_ = false;
    splitBaseNP_ = false;
    chineseVerySelectiveTagPA_ = true;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-sunHead"]) {
    sunJurafskyHeadFinder_ = true;
    i++;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-bikelHead"]) {
    bikelHeadFinder_ = true;
    i++;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-discardFrags"]) {
    discardFrags_ = true;
    i++;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-charLex"]) {
    useCharacterBasedLexicon_ = true;
    i++;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-charUnk"]) {
    useCharBasedUnknownWordModel_ = true;
    i++;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-rad"]) {
    useUnknownCharacterModel_ = true;
    i++;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-lengthPenalty"] && (i + 1 < args->size_)) {
    lengthPenalty_ = JavaLangDouble_parseDoubleWithNSString_(IOSObjectArray_Get(args, i + 1));
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-penaltyType"] && (i + 1 < args->size_)) {
    penaltyType_ = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, i + 1));
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-gtUnknown"]) {
    useGoodTuringUnknownWordModel_ = true;
    i++;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-maxentUnk"]) {
    i++;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-tuneSigma"]) {
    i++;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-trainCountThresh"] && (i + 1 < args->size_)) {
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-markCC"]) {
    markCC_ = true;
    i++;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-segmentMarkov"] || [((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-segmentWords"]) {
    segment_ = true;
    segmentMarkov_ = true;
    segmenterClass_ = @"edu.stanford.nlp.parser.lexparser.ChineseMarkovWordSegmenter";
    i++;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-segmentMaxMatch"]) {
    segment_ = true;
    segmentMarkov_ = false;
    segmenterClass_ = @"edu.stanford.nlp.parser.lexparser.MaxMatchSegmenter";
    i++;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-segmentDPMaxMatch"]) {
    segment_ = true;
    segmentMarkov_ = false;
    segmenterClass_ = @"edu.stanford.nlp.wordseg.MaxMatchSegmenter";
    i++;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-maxentLex"]) {
    i++;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-fixUnkFunctionWords"]) {
    i++;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-similarWordSmoothing"]) {
    useSimilarWordMap_ = true;
    i++;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-maxentLexSeenTagsOnly"]) {
    i++;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-maxentLexFeatLevel"] && (i + 1 < args->size_)) {
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-maxentDepGrammarFeatLevel"] && (i + 1 < args->size_)) {
    depGramFeatureLevel_ = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, i + 1));
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-maxentDepGrammar"]) {
    i++;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-splitNPTMP"]) {
    splitNPTMP_ = true;
    i++;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-splitPPTMP"]) {
    splitPPTMP_ = true;
    i++;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-splitXPTMP"]) {
    splitXPTMP_ = true;
    i++;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-segmenter"]) {
    segment_ = true;
    segmentMarkov_ = false;
    segmenterClass_ = IOSObjectArray_Get(args, i + 1);
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-headFinder"] && (i + 1 < args->size_)) {
    @try {
      headFinder_ = (id<EduStanfordNlpTreesHeadFinder>) cast_check([((IOSClass *) nil_chk(IOSClass_forName_(IOSObjectArray_Get(args, i + 1)))) newInstance], EduStanfordNlpTreesHeadFinder_class_());
    }
    @catch (JavaLangException *e) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithId:e];
      [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:JreStrcat("$$$", [[self getClass] getName], @": Could not load head finder ", IOSObjectArray_Get(args, i + 1))];
      @throw new_JavaLangRuntimeException_initWithNSException_(e);
    }
    i += 2;
  }
  return i;
}

- (id<EduStanfordNlpParserLexparserExtractor>)dependencyGrammarExtractorWithEduStanfordNlpParserLexparserOptions:(EduStanfordNlpParserLexparserOptions *)op
                                                                                     withEduStanfordNlpUtilIndex:(id<EduStanfordNlpUtilIndex>)wordIndex
                                                                                     withEduStanfordNlpUtilIndex:(id<EduStanfordNlpUtilIndex>)tagIndex {
  if (useSimilarWordMap_) {
    return new_EduStanfordNlpParserLexparserChineseTreebankParserParams_$1_initWithEduStanfordNlpParserLexparserChineseTreebankParserParams_withEduStanfordNlpParserLexparserOptions_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(self, op, wordIndex, tagIndex);
  }
  else {
    return new_EduStanfordNlpParserLexparserMLEDependencyGrammarExtractor_initWithEduStanfordNlpParserLexparserOptions_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(op, wordIndex, tagIndex);
  }
}

- (JavaUtilArrayList *)defaultTestSentence {
  return EduStanfordNlpLingSentence_toUntaggedListWithNSStringArray_([IOSObjectArray newArrayWithObjects:(id[]){ @"\u951f\u65a4\u62f7", @"\u951f\u65a4\u62f7", @"\u5b66\u6821", @"\u951f\u65a4\u62f7", @"\u5b66\u4e60", @"\u951f\u65a4\u62f7" } count:6 type:NSString_class_()]);
}

- (id<JavaUtilList>)readGrammaticalStructureFromFileWithNSString:(NSString *)filename {
  @try {
    return EduStanfordNlpTreesInternationalPennchineseChineseGrammaticalStructure_readCoNLLXGrammaticalStructureCollectionWithNSString_(filename);
  }
  @catch (JavaIoIOException *e) {
    @throw new_EduStanfordNlpIoRuntimeIOException_initWithNSException_(e);
  }
}

- (EduStanfordNlpTreesGrammaticalStructure *)getGrammaticalStructureWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
                                                                  withJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)filter
                                                              withEduStanfordNlpTreesHeadFinder:(id<EduStanfordNlpTreesHeadFinder>)hf {
  return new_EduStanfordNlpTreesInternationalPennchineseChineseGrammaticalStructure_initWithEduStanfordNlpTreesTree_withJavaUtilFunctionPredicate_withEduStanfordNlpTreesHeadFinder_(t, filter, hf);
}

- (jboolean)supportsBasicDependencies {
  return true;
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  EduStanfordNlpParserLexparserChineseTreebankParserParams_mainWithNSStringArray_(args);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0xa, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesHeadFinder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesHeadFinder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpParserLexparserLexicon;", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "[D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTreeReaderFactory;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesDiskTreebank;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesMemoryTreebank;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTreeTransformer;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTreeTransformer;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x2, 7, 8, -1, 9, -1, -1 },
    { NULL, "Z", 0xa, 10, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpParserLexparserExtractor;", 0x1, 13, 3, -1, 14, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x1, -1, -1, -1, 15, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 16, 1, -1, 17, -1, -1 },
    { NULL, "LEduStanfordNlpTreesGrammaticalStructure;", 0x1, 18, 19, -1, 20, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 21, 22, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(printlnErrWithNSString:);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(headFinder);
  methods[3].selector = @selector(typedDependencyHeadFinder);
  methods[4].selector = @selector(lexWithEduStanfordNlpParserLexparserOptions:withEduStanfordNlpUtilIndex:withEduStanfordNlpUtilIndex:);
  methods[5].selector = @selector(MLEDependencyGrammarSmoothingParams);
  methods[6].selector = @selector(treeReaderFactory);
  methods[7].selector = @selector(diskTreebank);
  methods[8].selector = @selector(memoryTreebank);
  methods[9].selector = @selector(collinizer);
  methods[10].selector = @selector(collinizerEvalb);
  methods[11].selector = @selector(sisterSplitters);
  methods[12].selector = @selector(transformTreeWithEduStanfordNlpTreesTree:withEduStanfordNlpTreesTree:);
  methods[13].selector = @selector(display);
  methods[14].selector = @selector(listBasicCategoriesWithJavaUtilList:);
  methods[15].selector = @selector(hasVWithJavaUtilList:);
  methods[16].selector = @selector(setOptionFlagWithNSStringArray:withInt:);
  methods[17].selector = @selector(dependencyGrammarExtractorWithEduStanfordNlpParserLexparserOptions:withEduStanfordNlpUtilIndex:withEduStanfordNlpUtilIndex:);
  methods[18].selector = @selector(defaultTestSentence);
  methods[19].selector = @selector(readGrammaticalStructureFromFileWithNSString:);
  methods[20].selector = @selector(getGrammaticalStructureWithEduStanfordNlpTreesTree:withJavaUtilFunctionPredicate:withEduStanfordNlpTreesHeadFinder:);
  methods[21].selector = @selector(supportsBasicDependencies);
  methods[22].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ctlp_", "LEduStanfordNlpTreesInternationalPennchineseChineseTreebankLanguagePack;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "charTags_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "useCharacterBasedLexicon_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "useMaxentLexicon_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "useMaxentDepGrammar_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "segment_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "segmentMarkov_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "sunJurafskyHeadFinder_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "bikelHeadFinder_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "discardFrags_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "useSimilarWordMap_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "segmenterClass_", "LNSString;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "lex_", "LEduStanfordNlpParserLexparserLexicon;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "segmenter_", "LEduStanfordNlpProcessWordSegmenter;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "headFinder_", "LEduStanfordNlpTreesHeadFinder;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "chineseSplitDouHao_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "chineseSplitPunct_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "chineseSplitPunctLR_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "markVVsisterIP_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "markPsisterIP_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "markIPsisterVVorP_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "markADgrandchildOfIP_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "gpaAD_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "chineseVerySelectiveTagPA_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "chineseSelectiveTagPA_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "markIPsisterBA_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "markVPadjunct_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "markNPmodNP_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "markModifiedNP_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "markNPconj_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "markMultiNtag_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "markIPsisDEC_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "markIPconj_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "markIPadjsubj_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "chineseSplitVP_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mergeNNVV_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "unaryIP_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "unaryCP_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "paRootDtr_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "markPostverbalP_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "markPostverbalPP_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "splitBaseNP_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "tagWordSize_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "markCC_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "splitNPTMP_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "splitPPTMP_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "splitXPTMP_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "dominatesV_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "DEFAULT_USE_GOOD_TURNING_UNKNOWN_WORD_MODEL", "Z", .constantValue.asBOOL = EduStanfordNlpParserLexparserChineseTreebankParserParams_DEFAULT_USE_GOOD_TURNING_UNKNOWN_WORD_MODEL, 0x19, -1, -1, -1, -1 },
    { "useGoodTuringUnknownWordModel_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "useCharBasedUnknownWordModel_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "lengthPenalty_", "D", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "useUnknownCharacterModel_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "penaltyType_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "depGramFeatureLevel_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpParserLexparserChineseTreebankParserParams_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "printlnErr", "LNSString;", "lex", "LEduStanfordNlpParserLexparserOptions;LEduStanfordNlpUtilIndex;LEduStanfordNlpUtilIndex;", "(Ledu/stanford/nlp/parser/lexparser/Options;Ledu/stanford/nlp/util/Index<Ljava/lang/String;>;Ledu/stanford/nlp/util/Index<Ljava/lang/String;>;)Ledu/stanford/nlp/parser/lexparser/Lexicon;", "transformTree", "LEduStanfordNlpTreesTree;LEduStanfordNlpTreesTree;", "listBasicCategories", "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/String;>;)Ljava/util/List<Ljava/lang/String;>;", "hasV", "setOptionFlag", "[LNSString;I", "dependencyGrammarExtractor", "(Ledu/stanford/nlp/parser/lexparser/Options;Ledu/stanford/nlp/util/Index<Ljava/lang/String;>;Ledu/stanford/nlp/util/Index<Ljava/lang/String;>;)Ledu/stanford/nlp/parser/lexparser/Extractor<Ledu/stanford/nlp/parser/lexparser/DependencyGrammar;>;", "()Ljava/util/ArrayList<Ledu/stanford/nlp/ling/Word;>;", "readGrammaticalStructureFromFile", "(Ljava/lang/String;)Ljava/util/List<Ledu/stanford/nlp/trees/GrammaticalStructure;>;", "getGrammaticalStructure", "LEduStanfordNlpTreesTree;LJavaUtilFunctionPredicate;LEduStanfordNlpTreesHeadFinder;", "(Ledu/stanford/nlp/trees/Tree;Ljava/util/function/Predicate<Ljava/lang/String;>;Ledu/stanford/nlp/trees/HeadFinder;)Ledu/stanford/nlp/trees/GrammaticalStructure;", "main", "[LNSString;" };
  static const J2ObjcClassInfo _EduStanfordNlpParserLexparserChineseTreebankParserParams = { "ChineseTreebankParserParams", "edu.stanford.nlp.parser.lexparser", ptrTable, methods, fields, 7, 0x1, 23, 56, -1, -1, -1, -1, -1 };
  return &_EduStanfordNlpParserLexparserChineseTreebankParserParams;
}

+ (void)initialize {
  if (self == [EduStanfordNlpParserLexparserChineseTreebankParserParams class]) {
    EduStanfordNlpParserLexparserChineseTreebankParserParams_super$_treebankLanguagePack = (id (*)(id, SEL))[EduStanfordNlpParserLexparserAbstractTreebankParserParams instanceMethodForSelector:@selector(treebankLanguagePack)];
    J2OBJC_SET_INITIALIZED(EduStanfordNlpParserLexparserChineseTreebankParserParams)
  }
}

@end

void EduStanfordNlpParserLexparserChineseTreebankParserParams_printlnErrWithNSString_(NSString *s) {
  EduStanfordNlpParserLexparserChineseTreebankParserParams_initialize();
  EduStanfordNlpIoEncodingPrintWriter_err_printlnWithNSString_withNSString_(s, EduStanfordNlpTreesInternationalPennchineseChineseTreebankLanguagePack_ENCODING);
}

void EduStanfordNlpParserLexparserChineseTreebankParserParams_init(EduStanfordNlpParserLexparserChineseTreebankParserParams *self) {
  EduStanfordNlpParserLexparserAbstractTreebankParserParams_initWithEduStanfordNlpTreesTreebankLanguagePack_(self, new_EduStanfordNlpTreesInternationalPennchineseChineseTreebankLanguagePack_init());
  self->charTags_ = false;
  self->useCharacterBasedLexicon_ = false;
  self->useMaxentLexicon_ = false;
  self->useMaxentDepGrammar_ = false;
  self->segment_ = false;
  self->segmentMarkov_ = false;
  self->sunJurafskyHeadFinder_ = false;
  self->bikelHeadFinder_ = false;
  self->discardFrags_ = false;
  self->useSimilarWordMap_ = false;
  self->segmenterClass_ = nil;
  self->headFinder_ = nil;
  self->chineseSplitDouHao_ = false;
  self->chineseSplitPunct_ = true;
  self->chineseSplitPunctLR_ = false;
  self->markVVsisterIP_ = true;
  self->markPsisterIP_ = true;
  self->markIPsisterVVorP_ = true;
  self->markADgrandchildOfIP_ = false;
  self->gpaAD_ = true;
  self->chineseVerySelectiveTagPA_ = false;
  self->chineseSelectiveTagPA_ = false;
  self->markIPsisterBA_ = true;
  self->markVPadjunct_ = true;
  self->markNPmodNP_ = true;
  self->markModifiedNP_ = true;
  self->markNPconj_ = true;
  self->markMultiNtag_ = false;
  self->markIPsisDEC_ = true;
  self->markIPconj_ = false;
  self->markIPadjsubj_ = false;
  self->chineseSplitVP_ = 3;
  self->mergeNNVV_ = false;
  self->unaryIP_ = false;
  self->unaryCP_ = false;
  self->paRootDtr_ = false;
  self->markPostverbalP_ = false;
  self->markPostverbalPP_ = false;
  self->splitBaseNP_ = false;
  self->tagWordSize_ = false;
  self->markCC_ = false;
  self->splitNPTMP_ = false;
  self->splitPPTMP_ = false;
  self->splitXPTMP_ = false;
  self->dominatesV_ = false;
  self->useGoodTuringUnknownWordModel_ = EduStanfordNlpParserLexparserChineseTreebankParserParams_DEFAULT_USE_GOOD_TURNING_UNKNOWN_WORD_MODEL;
  self->useCharBasedUnknownWordModel_ = false;
  self->lengthPenalty_ = 5.0;
  self->useUnknownCharacterModel_ = true;
  self->penaltyType_ = 0;
  self->depGramFeatureLevel_ = 0;
  self->ctlp_ = (EduStanfordNlpTreesInternationalPennchineseChineseTreebankLanguagePack *) cast_chk(EduStanfordNlpParserLexparserChineseTreebankParserParams_super$_treebankLanguagePack(self, @selector(treebankLanguagePack)), [EduStanfordNlpTreesInternationalPennchineseChineseTreebankLanguagePack class]);
}

EduStanfordNlpParserLexparserChineseTreebankParserParams *new_EduStanfordNlpParserLexparserChineseTreebankParserParams_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpParserLexparserChineseTreebankParserParams, init)
}

EduStanfordNlpParserLexparserChineseTreebankParserParams *create_EduStanfordNlpParserLexparserChineseTreebankParserParams_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpParserLexparserChineseTreebankParserParams, init)
}

id<JavaUtilList> EduStanfordNlpParserLexparserChineseTreebankParserParams_listBasicCategoriesWithJavaUtilList_(EduStanfordNlpParserLexparserChineseTreebankParserParams *self, id<JavaUtilList> l) {
  id<JavaUtilList> l1 = new_JavaUtilArrayList_init();
  for (NSString * __strong s in nil_chk(l)) {
    [l1 addWithId:[((EduStanfordNlpTreesInternationalPennchineseChineseTreebankLanguagePack *) nil_chk(self->ctlp_)) basicCategoryWithNSString:s]];
  }
  return l1;
}

jboolean EduStanfordNlpParserLexparserChineseTreebankParserParams_hasVWithJavaUtilList_(id<JavaUtilList> tags) {
  EduStanfordNlpParserLexparserChineseTreebankParserParams_initialize();
  for (id __strong tag in nil_chk(tags)) {
    NSString *str = [nil_chk(tag) description];
    if ([((NSString *) nil_chk(str)) hasPrefix:@"V"]) {
      return true;
    }
  }
  return false;
}

void EduStanfordNlpParserLexparserChineseTreebankParserParams_mainWithNSStringArray_(IOSObjectArray *args) {
  EduStanfordNlpParserLexparserChineseTreebankParserParams_initialize();
  id<EduStanfordNlpParserLexparserTreebankLangParserParams> tlpp = new_EduStanfordNlpParserLexparserChineseTreebankParserParams_init();
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"Default encoding is: ", [((EduStanfordNlpTreesDiskTreebank *) nil_chk([tlpp diskTreebank])) encoding])];
  if (((IOSObjectArray *) nil_chk(args))->size_ < 2) {
    EduStanfordNlpParserLexparserChineseTreebankParserParams_printlnErrWithNSString_(@"Usage: edu.stanford.nlp.parser.lexparser.ChineseTreebankParserParams treesPath fileRange");
  }
  else {
    EduStanfordNlpTreesTreebank *m = [tlpp diskTreebank];
    [((EduStanfordNlpTreesTreebank *) nil_chk(m)) loadPathWithNSString:IOSObjectArray_Get(args, 0) withJavaIoFileFilter:new_EduStanfordNlpIoNumberRangesFileFilter_initWithNSString_withBoolean_(IOSObjectArray_Get(args, 1), false)];
    for (EduStanfordNlpTreesTree * __strong t in m) {
      [((EduStanfordNlpTreesTree *) nil_chk(t)) pennPrintWithJavaIoPrintWriter:[tlpp pw]];
    }
    [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$I$", @"There were ", [m size], @" trees.")];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpParserLexparserChineseTreebankParserParams)

@implementation EduStanfordNlpParserLexparserChineseTreebankParserParams_$1

- (EduStanfordNlpParserLexparserMLEDependencyGrammar *)formResult {
  [((id<EduStanfordNlpUtilIndex>) nil_chk(wordIndex_)) addToIndexWithId:EduStanfordNlpParserLexparserLexicon_UNKNOWN_WORD];
  EduStanfordNlpParserLexparserChineseSimWordAvgDepGrammar *dg = new_EduStanfordNlpParserLexparserChineseSimWordAvgDepGrammar_initWithEduStanfordNlpParserLexparserTreebankLangParserParams_withBoolean_withBoolean_withBoolean_withBoolean_withEduStanfordNlpParserLexparserOptions_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(tlpParams_, directional_, useDistance_, useCoarseDistance_, ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(((EduStanfordNlpParserLexparserOptions *) nil_chk(op_))->trainOptions_))->basicCategoryTagsInDependencyGrammar_, op_, wordIndex_, tagIndex_);
  if (this$0_->lex_ == nil) {
    @throw new_JavaLangRuntimeException_initWithNSString_(@"Attempt to create ChineseSimWordAvgDepGrammar before Lexicon!!!");
  }
  else {
    [dg setLexWithEduStanfordNlpParserLexparserLexicon:this$0_->lex_];
  }
  for (EduStanfordNlpParserLexparserIntDependency * __strong dependency in nil_chk([((EduStanfordNlpStatsClassicCounter *) nil_chk(dependencyCounter_)) keySet])) {
    [dg addRuleWithEduStanfordNlpParserLexparserIntDependency:dependency withDouble:[((EduStanfordNlpStatsClassicCounter *) nil_chk(dependencyCounter_)) getCountWithId:dependency]];
  }
  return dg;
}

- (instancetype)initWithEduStanfordNlpParserLexparserChineseTreebankParserParams:(EduStanfordNlpParserLexparserChineseTreebankParserParams *)outer$
                                        withEduStanfordNlpParserLexparserOptions:(EduStanfordNlpParserLexparserOptions *)arg$0
                                                     withEduStanfordNlpUtilIndex:(id<EduStanfordNlpUtilIndex>)arg$1
                                                     withEduStanfordNlpUtilIndex:(id<EduStanfordNlpUtilIndex>)arg$2 {
  EduStanfordNlpParserLexparserChineseTreebankParserParams_$1_initWithEduStanfordNlpParserLexparserChineseTreebankParserParams_withEduStanfordNlpParserLexparserOptions_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(self, outer$, arg$0, arg$1, arg$2);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LEduStanfordNlpParserLexparserMLEDependencyGrammar;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(formResult);
  methods[1].selector = @selector(initWithEduStanfordNlpParserLexparserChineseTreebankParserParams:withEduStanfordNlpParserLexparserOptions:withEduStanfordNlpUtilIndex:withEduStanfordNlpUtilIndex:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LEduStanfordNlpParserLexparserChineseTreebankParserParams;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "()Ledu/stanford/nlp/parser/lexparser/MLEDependencyGrammar;", "LEduStanfordNlpParserLexparserChineseTreebankParserParams;LEduStanfordNlpParserLexparserOptions;LEduStanfordNlpUtilIndex;LEduStanfordNlpUtilIndex;", "(Ledu/stanford/nlp/parser/lexparser/ChineseTreebankParserParams;Ledu/stanford/nlp/parser/lexparser/Options;Ledu/stanford/nlp/util/Index<Ljava/lang/String;>;Ledu/stanford/nlp/util/Index<Ljava/lang/String;>;)V", "LEduStanfordNlpParserLexparserChineseTreebankParserParams;", "dependencyGrammarExtractorWithEduStanfordNlpParserLexparserOptions:withEduStanfordNlpUtilIndex:withEduStanfordNlpUtilIndex:" };
  static const J2ObjcClassInfo _EduStanfordNlpParserLexparserChineseTreebankParserParams_$1 = { "", "edu.stanford.nlp.parser.lexparser", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, -1, -1 };
  return &_EduStanfordNlpParserLexparserChineseTreebankParserParams_$1;
}

@end

void EduStanfordNlpParserLexparserChineseTreebankParserParams_$1_initWithEduStanfordNlpParserLexparserChineseTreebankParserParams_withEduStanfordNlpParserLexparserOptions_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(EduStanfordNlpParserLexparserChineseTreebankParserParams_$1 *self, EduStanfordNlpParserLexparserChineseTreebankParserParams *outer$, EduStanfordNlpParserLexparserOptions *arg$0, id<EduStanfordNlpUtilIndex> arg$1, id<EduStanfordNlpUtilIndex> arg$2) {
  self->this$0_ = outer$;
  EduStanfordNlpParserLexparserMLEDependencyGrammarExtractor_initWithEduStanfordNlpParserLexparserOptions_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(self, arg$0, arg$1, arg$2);
}

EduStanfordNlpParserLexparserChineseTreebankParserParams_$1 *new_EduStanfordNlpParserLexparserChineseTreebankParserParams_$1_initWithEduStanfordNlpParserLexparserChineseTreebankParserParams_withEduStanfordNlpParserLexparserOptions_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(EduStanfordNlpParserLexparserChineseTreebankParserParams *outer$, EduStanfordNlpParserLexparserOptions *arg$0, id<EduStanfordNlpUtilIndex> arg$1, id<EduStanfordNlpUtilIndex> arg$2) {
  J2OBJC_NEW_IMPL(EduStanfordNlpParserLexparserChineseTreebankParserParams_$1, initWithEduStanfordNlpParserLexparserChineseTreebankParserParams_withEduStanfordNlpParserLexparserOptions_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_, outer$, arg$0, arg$1, arg$2)
}

EduStanfordNlpParserLexparserChineseTreebankParserParams_$1 *create_EduStanfordNlpParserLexparserChineseTreebankParserParams_$1_initWithEduStanfordNlpParserLexparserChineseTreebankParserParams_withEduStanfordNlpParserLexparserOptions_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(EduStanfordNlpParserLexparserChineseTreebankParserParams *outer$, EduStanfordNlpParserLexparserOptions *arg$0, id<EduStanfordNlpUtilIndex> arg$1, id<EduStanfordNlpUtilIndex> arg$2) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpParserLexparserChineseTreebankParserParams_$1, initWithEduStanfordNlpParserLexparserChineseTreebankParserParams_withEduStanfordNlpParserLexparserOptions_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_, outer$, arg$0, arg$1, arg$2)
}
