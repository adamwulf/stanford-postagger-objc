//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/parser/lexparser/ChineseLexicon.java
//

#include "J2ObjC_source.h"
#include "edu/stanford/nlp/parser/lexparser/BaseLexicon.h"
#include "edu/stanford/nlp/parser/lexparser/ChineseLexicon.h"
#include "edu/stanford/nlp/parser/lexparser/ChineseTreebankParserParams.h"
#include "edu/stanford/nlp/parser/lexparser/IntTaggedWord.h"
#include "edu/stanford/nlp/parser/lexparser/Options.h"
#include "edu/stanford/nlp/parser/lexparser/RandomWalk.h"
#include "edu/stanford/nlp/parser/lexparser/UnknownWordModel.h"
#include "edu/stanford/nlp/stats/ClassicCounter.h"
#include "edu/stanford/nlp/util/Index.h"

@interface EduStanfordNlpParserLexparserChineseLexicon () {
 @public
  EduStanfordNlpParserLexparserRandomWalk *probRandomWalk_;
}

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserChineseLexicon, probRandomWalk_, EduStanfordNlpParserLexparserRandomWalk *)

inline jlong EduStanfordNlpParserLexparserChineseLexicon_get_serialVersionUID();
#define EduStanfordNlpParserLexparserChineseLexicon_serialVersionUID -7836464391021114960LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpParserLexparserChineseLexicon, serialVersionUID, jlong)

inline jint EduStanfordNlpParserLexparserChineseLexicon_get_STEPS();
#define EduStanfordNlpParserLexparserChineseLexicon_STEPS 1
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpParserLexparserChineseLexicon, STEPS, jint)

@implementation EduStanfordNlpParserLexparserChineseLexicon

- (instancetype)initWithEduStanfordNlpParserLexparserOptions:(EduStanfordNlpParserLexparserOptions *)op
withEduStanfordNlpParserLexparserChineseTreebankParserParams:(EduStanfordNlpParserLexparserChineseTreebankParserParams *)params
                                 withEduStanfordNlpUtilIndex:(id<EduStanfordNlpUtilIndex>)wordIndex
                                 withEduStanfordNlpUtilIndex:(id<EduStanfordNlpUtilIndex>)tagIndex {
  EduStanfordNlpParserLexparserChineseLexicon_initWithEduStanfordNlpParserLexparserOptions_withEduStanfordNlpParserLexparserChineseTreebankParserParams_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(self, op, params, wordIndex, tagIndex);
  return self;
}

- (jfloat)scoreWithEduStanfordNlpParserLexparserIntTaggedWord:(EduStanfordNlpParserLexparserIntTaggedWord *)iTW
                                                      withInt:(jint)loc
                                                 withNSString:(NSString *)word
                                                 withNSString:(NSString *)featureSpec {
  jdouble c_W = [((EduStanfordNlpStatsClassicCounter *) nil_chk(seenCounter_)) getCountWithId:iTW];
  jboolean seen = (c_W > 0.0);
  if (seen) {
    return [super scoreWithEduStanfordNlpParserLexparserIntTaggedWord:iTW withInt:loc withNSString:word withNSString:featureSpec];
  }
  else {
    jfloat score;
    score = [((id<EduStanfordNlpParserLexparserUnknownWordModel>) nil_chk([self getUnknownWordModel])) scoreWithEduStanfordNlpParserLexparserIntTaggedWord:iTW withInt:loc withDouble:0.0 withDouble:0.0 withDouble:0.0 withNSString:word];
    return score;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "F", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpParserLexparserOptions:withEduStanfordNlpParserLexparserChineseTreebankParserParams:withEduStanfordNlpUtilIndex:withEduStanfordNlpUtilIndex:);
  methods[1].selector = @selector(scoreWithEduStanfordNlpParserLexparserIntTaggedWord:withInt:withNSString:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpParserLexparserChineseLexicon_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "useCharBasedUnknownWordModel_", "Z", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "useGoodTuringUnknownWordModel_", "Z", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "STEPS", "I", .constantValue.asInt = EduStanfordNlpParserLexparserChineseLexicon_STEPS, 0x1a, -1, -1, -1, -1 },
    { "probRandomWalk_", "LEduStanfordNlpParserLexparserRandomWalk;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpParserLexparserOptions;LEduStanfordNlpParserLexparserChineseTreebankParserParams;LEduStanfordNlpUtilIndex;LEduStanfordNlpUtilIndex;", "(Ledu/stanford/nlp/parser/lexparser/Options;Ledu/stanford/nlp/parser/lexparser/ChineseTreebankParserParams;Ledu/stanford/nlp/util/Index<Ljava/lang/String;>;Ledu/stanford/nlp/util/Index<Ljava/lang/String;>;)V", "score", "LEduStanfordNlpParserLexparserIntTaggedWord;ILNSString;LNSString;" };
  static const J2ObjcClassInfo _EduStanfordNlpParserLexparserChineseLexicon = { "ChineseLexicon", "edu.stanford.nlp.parser.lexparser", ptrTable, methods, fields, 7, 0x1, 2, 5, -1, -1, -1, -1, -1 };
  return &_EduStanfordNlpParserLexparserChineseLexicon;
}

@end

void EduStanfordNlpParserLexparserChineseLexicon_initWithEduStanfordNlpParserLexparserOptions_withEduStanfordNlpParserLexparserChineseTreebankParserParams_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(EduStanfordNlpParserLexparserChineseLexicon *self, EduStanfordNlpParserLexparserOptions *op, EduStanfordNlpParserLexparserChineseTreebankParserParams *params, id<EduStanfordNlpUtilIndex> wordIndex, id<EduStanfordNlpUtilIndex> tagIndex) {
  EduStanfordNlpParserLexparserBaseLexicon_initWithEduStanfordNlpParserLexparserOptions_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(self, op, wordIndex, tagIndex);
  self->useCharBasedUnknownWordModel_ = ((EduStanfordNlpParserLexparserChineseTreebankParserParams *) nil_chk(params))->useCharBasedUnknownWordModel_;
  self->useGoodTuringUnknownWordModel_ = params->useGoodTuringUnknownWordModel_;
}

EduStanfordNlpParserLexparserChineseLexicon *new_EduStanfordNlpParserLexparserChineseLexicon_initWithEduStanfordNlpParserLexparserOptions_withEduStanfordNlpParserLexparserChineseTreebankParserParams_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(EduStanfordNlpParserLexparserOptions *op, EduStanfordNlpParserLexparserChineseTreebankParserParams *params, id<EduStanfordNlpUtilIndex> wordIndex, id<EduStanfordNlpUtilIndex> tagIndex) {
  J2OBJC_NEW_IMPL(EduStanfordNlpParserLexparserChineseLexicon, initWithEduStanfordNlpParserLexparserOptions_withEduStanfordNlpParserLexparserChineseTreebankParserParams_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_, op, params, wordIndex, tagIndex)
}

EduStanfordNlpParserLexparserChineseLexicon *create_EduStanfordNlpParserLexparserChineseLexicon_initWithEduStanfordNlpParserLexparserOptions_withEduStanfordNlpParserLexparserChineseTreebankParserParams_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(EduStanfordNlpParserLexparserOptions *op, EduStanfordNlpParserLexparserChineseTreebankParserParams *params, id<EduStanfordNlpUtilIndex> wordIndex, id<EduStanfordNlpUtilIndex> tagIndex) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpParserLexparserChineseLexicon, initWithEduStanfordNlpParserLexparserOptions_withEduStanfordNlpParserLexparserChineseTreebankParserParams_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_, op, params, wordIndex, tagIndex)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpParserLexparserChineseLexicon)
