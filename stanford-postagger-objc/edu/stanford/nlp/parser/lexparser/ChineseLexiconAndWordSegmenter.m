//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/parser/lexparser/ChineseLexiconAndWordSegmenter.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/io/IOUtils.h"
#include "edu/stanford/nlp/io/NumberRangeFileFilter.h"
#include "edu/stanford/nlp/io/NumberRangesFileFilter.h"
#include "edu/stanford/nlp/ling/TaggedWord.h"
#include "edu/stanford/nlp/parser/lexparser/ChineseLexicon.h"
#include "edu/stanford/nlp/parser/lexparser/ChineseLexiconAndWordSegmenter.h"
#include "edu/stanford/nlp/parser/lexparser/ChineseTreebankParserParams.h"
#include "edu/stanford/nlp/parser/lexparser/CollinsPuncTransformer.h"
#include "edu/stanford/nlp/parser/lexparser/IntTaggedWord.h"
#include "edu/stanford/nlp/parser/lexparser/Lexicon.h"
#include "edu/stanford/nlp/parser/lexparser/Options.h"
#include "edu/stanford/nlp/parser/lexparser/ParentAnnotationStats.h"
#include "edu/stanford/nlp/parser/lexparser/TestOptions.h"
#include "edu/stanford/nlp/parser/lexparser/TrainOptions.h"
#include "edu/stanford/nlp/parser/lexparser/TreeAnnotator.h"
#include "edu/stanford/nlp/parser/lexparser/TreeAnnotatorAndBinarizer.h"
#include "edu/stanford/nlp/parser/lexparser/TreebankLangParserParams.h"
#include "edu/stanford/nlp/parser/lexparser/UnknownWordModel.h"
#include "edu/stanford/nlp/process/TokenizerFactory.h"
#include "edu/stanford/nlp/process/WordSegmenter.h"
#include "edu/stanford/nlp/trees/HeadFinder.h"
#include "edu/stanford/nlp/trees/LeftHeadFinder.h"
#include "edu/stanford/nlp/trees/MemoryTreebank.h"
#include "edu/stanford/nlp/trees/Tree.h"
#include "edu/stanford/nlp/trees/TreePrint.h"
#include "edu/stanford/nlp/trees/TreeTransformer.h"
#include "edu/stanford/nlp/trees/Treebank.h"
#include "edu/stanford/nlp/trees/TreebankLanguagePack.h"
#include "edu/stanford/nlp/trees/international/pennchinese/ChineseEscaper.h"
#include "edu/stanford/nlp/util/Generics.h"
#include "edu/stanford/nlp/util/HashIndex.h"
#include "edu/stanford/nlp/util/Index.h"
#include "edu/stanford/nlp/util/Timing.h"
#include "java/io/BufferedInputStream.h"
#include "java/io/BufferedOutputStream.h"
#include "java/io/BufferedReader.h"
#include "java/io/FileFilter.h"
#include "java/io/FileInputStream.h"
#include "java/io/FileNotFoundException.h"
#include "java/io/FileOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/InvalidClassException.h"
#include "java/io/ObjectInputStream.h"
#include "java/io/ObjectOutputStream.h"
#include "java/io/OutputStream.h"
#include "java/io/PrintStream.h"
#include "java/io/PrintWriter.h"
#include "java/io/StreamCorruptedException.h"
#include "java/io/Writer.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/net/URL.h"
#include "java/net/URLConnection.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/Date.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "java/util/function/Function.h"
#include "java/util/zip/GZIPInputStream.h"
#include "java/util/zip/GZIPOutputStream.h"

@interface EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter () {
 @public
  EduStanfordNlpParserLexparserChineseLexicon *chineseLexicon_;
  id<EduStanfordNlpProcessWordSegmenter> wordSegmenter_;
  EduStanfordNlpParserLexparserOptions *op_;
}

+ (jint)numSubArgsWithNSStringArray:(IOSObjectArray *)args
                            withInt:(jint)index;

- (instancetype)initWithEduStanfordNlpTreesTreebank:(EduStanfordNlpTreesTreebank *)trainTreebank
           withEduStanfordNlpParserLexparserOptions:(EduStanfordNlpParserLexparserOptions *)op
                        withEduStanfordNlpUtilIndex:(id<EduStanfordNlpUtilIndex>)wordIndex
                        withEduStanfordNlpUtilIndex:(id<EduStanfordNlpUtilIndex>)tagIndex;

+ (EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter *)getSegmenterDataFromTreebankWithEduStanfordNlpTreesTreebank:(EduStanfordNlpTreesTreebank *)trainTreebank
                                                                                    withEduStanfordNlpParserLexparserOptions:(EduStanfordNlpParserLexparserOptions *)op
                                                                                                 withEduStanfordNlpUtilIndex:(id<EduStanfordNlpUtilIndex>)wordIndex
                                                                                                 withEduStanfordNlpUtilIndex:(id<EduStanfordNlpUtilIndex>)tagIndex;

+ (void)printArgsWithNSStringArray:(IOSObjectArray *)args
             withJavaIoPrintStream:(JavaIoPrintStream *)ps;

+ (EduStanfordNlpTreesTreebank *)makeTreebankWithNSString:(NSString *)treebankPath
                 withEduStanfordNlpParserLexparserOptions:(EduStanfordNlpParserLexparserOptions *)op
                                     withJavaIoFileFilter:(id<JavaIoFileFilter>)filt;

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter, chineseLexicon_, EduStanfordNlpParserLexparserChineseLexicon *)
J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter, wordSegmenter_, id<EduStanfordNlpProcessWordSegmenter>)
J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter, op_, EduStanfordNlpParserLexparserOptions *)

inline jlong EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter_get_serialVersionUID();
#define EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter_serialVersionUID -6554995189795187918LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter, serialVersionUID, jlong)

__attribute__((unused)) static jint EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter_numSubArgsWithNSStringArray_withInt_(IOSObjectArray *args, jint index);

__attribute__((unused)) static void EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter_initWithEduStanfordNlpTreesTreebank_withEduStanfordNlpParserLexparserOptions_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter *self, EduStanfordNlpTreesTreebank *trainTreebank, EduStanfordNlpParserLexparserOptions *op, id<EduStanfordNlpUtilIndex> wordIndex, id<EduStanfordNlpUtilIndex> tagIndex);

__attribute__((unused)) static EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter *new_EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter_initWithEduStanfordNlpTreesTreebank_withEduStanfordNlpParserLexparserOptions_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(EduStanfordNlpTreesTreebank *trainTreebank, EduStanfordNlpParserLexparserOptions *op, id<EduStanfordNlpUtilIndex> wordIndex, id<EduStanfordNlpUtilIndex> tagIndex) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter *create_EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter_initWithEduStanfordNlpTreesTreebank_withEduStanfordNlpParserLexparserOptions_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(EduStanfordNlpTreesTreebank *trainTreebank, EduStanfordNlpParserLexparserOptions *op, id<EduStanfordNlpUtilIndex> wordIndex, id<EduStanfordNlpUtilIndex> tagIndex);

__attribute__((unused)) static EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter *EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter_getSegmenterDataFromTreebankWithEduStanfordNlpTreesTreebank_withEduStanfordNlpParserLexparserOptions_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(EduStanfordNlpTreesTreebank *trainTreebank, EduStanfordNlpParserLexparserOptions *op, id<EduStanfordNlpUtilIndex> wordIndex, id<EduStanfordNlpUtilIndex> tagIndex);

__attribute__((unused)) static void EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter_printArgsWithNSStringArray_withJavaIoPrintStream_(IOSObjectArray *args, JavaIoPrintStream *ps);

__attribute__((unused)) static EduStanfordNlpTreesTreebank *EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter_makeTreebankWithNSString_withEduStanfordNlpParserLexparserOptions_withJavaIoFileFilter_(NSString *treebankPath, EduStanfordNlpParserLexparserOptions *op, id<JavaIoFileFilter> filt);

@implementation EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter

- (instancetype)initWithEduStanfordNlpParserLexparserChineseLexicon:(EduStanfordNlpParserLexparserChineseLexicon *)lex
                             withEduStanfordNlpProcessWordSegmenter:(id<EduStanfordNlpProcessWordSegmenter>)seg {
  EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter_initWithEduStanfordNlpParserLexparserChineseLexicon_withEduStanfordNlpProcessWordSegmenter_(self, lex, seg);
  return self;
}

- (id<JavaUtilList>)segmentWithNSString:(NSString *)s {
  return [((id<EduStanfordNlpProcessWordSegmenter>) nil_chk(wordSegmenter_)) segmentWithNSString:s];
}

- (jboolean)isKnownWithInt:(jint)word {
  return [((EduStanfordNlpParserLexparserChineseLexicon *) nil_chk(chineseLexicon_)) isKnownWithInt:word];
}

- (jboolean)isKnownWithNSString:(NSString *)word {
  return [((EduStanfordNlpParserLexparserChineseLexicon *) nil_chk(chineseLexicon_)) isKnownWithNSString:word];
}

- (id<JavaUtilSet>)tagSetWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)basicCategoryFunction {
  return [((EduStanfordNlpParserLexparserChineseLexicon *) nil_chk(chineseLexicon_)) tagSetWithJavaUtilFunctionFunction:basicCategoryFunction];
}

- (id<JavaUtilIterator>)ruleIteratorByWordWithInt:(jint)word
                                          withInt:(jint)loc
                                     withNSString:(NSString *)featureSpec {
  return [((EduStanfordNlpParserLexparserChineseLexicon *) nil_chk(chineseLexicon_)) ruleIteratorByWordWithInt:word withInt:loc withNSString:nil];
}

- (id<JavaUtilIterator>)ruleIteratorByWordWithNSString:(NSString *)word
                                               withInt:(jint)loc
                                          withNSString:(NSString *)featureSpec {
  return [((EduStanfordNlpParserLexparserChineseLexicon *) nil_chk(chineseLexicon_)) ruleIteratorByWordWithNSString:word withInt:loc withNSString:nil];
}

- (jint)numRules {
  return [((EduStanfordNlpParserLexparserChineseLexicon *) nil_chk(chineseLexicon_)) numRules];
}

- (void)initializeTrainingWithDouble:(jdouble)numTrees {
  [((EduStanfordNlpParserLexparserChineseLexicon *) nil_chk(chineseLexicon_)) initializeTrainingWithDouble:numTrees];
  [((id<EduStanfordNlpProcessWordSegmenter>) nil_chk(wordSegmenter_)) initializeTrainingWithDouble:numTrees];
}

- (void)trainWithJavaUtilCollection:(id<JavaUtilCollection>)trees {
  [self trainWithJavaUtilCollection:trees withDouble:1.0];
}

- (void)trainWithJavaUtilCollection:(id<JavaUtilCollection>)trees
                         withDouble:(jdouble)weight {
  for (EduStanfordNlpTreesTree * __strong tree in nil_chk(trees)) {
    [self trainWithEduStanfordNlpTreesTree:tree withDouble:weight];
  }
}

- (void)trainWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)tree {
  [self trainWithEduStanfordNlpTreesTree:tree withDouble:1.0];
}

- (void)trainWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)tree
                              withDouble:(jdouble)weight {
  [self trainWithJavaUtilList:[((EduStanfordNlpTreesTree *) nil_chk(tree)) taggedYield] withDouble:weight];
}

- (void)trainWithJavaUtilList:(id<JavaUtilList>)sentence {
  [self trainWithJavaUtilList:sentence withDouble:1.0];
}

- (void)trainWithJavaUtilList:(id<JavaUtilList>)sentence
                   withDouble:(jdouble)weight {
  [((EduStanfordNlpParserLexparserChineseLexicon *) nil_chk(chineseLexicon_)) trainWithJavaUtilList:sentence withDouble:weight];
  [((id<EduStanfordNlpProcessWordSegmenter>) nil_chk(wordSegmenter_)) trainWithJavaUtilList:sentence];
}

- (void)trainUnannotatedWithJavaUtilList:(id<JavaUtilList>)sentence
                              withDouble:(jdouble)weight {
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"This version of the parser does not support non-tree training data");
}

- (void)incrementTreesReadWithDouble:(jdouble)weight {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)trainWithEduStanfordNlpLingTaggedWord:(EduStanfordNlpLingTaggedWord *)tw
                                      withInt:(jint)loc
                                   withDouble:(jdouble)weight {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)finishTraining {
  [((EduStanfordNlpParserLexparserChineseLexicon *) nil_chk(chineseLexicon_)) finishTraining];
  [((id<EduStanfordNlpProcessWordSegmenter>) nil_chk(wordSegmenter_)) finishTraining];
}

- (jfloat)scoreWithEduStanfordNlpParserLexparserIntTaggedWord:(EduStanfordNlpParserLexparserIntTaggedWord *)iTW
                                                      withInt:(jint)loc
                                                 withNSString:(NSString *)word
                                                 withNSString:(NSString *)featureSpec {
  return [((EduStanfordNlpParserLexparserChineseLexicon *) nil_chk(chineseLexicon_)) scoreWithEduStanfordNlpParserLexparserIntTaggedWord:iTW withInt:loc withNSString:word withNSString:nil];
}

- (void)loadSegmenterWithNSString:(NSString *)filename {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)readDataWithJavaIoBufferedReader:(JavaIoBufferedReader *)inArg {
  [((EduStanfordNlpParserLexparserChineseLexicon *) nil_chk(chineseLexicon_)) readDataWithJavaIoBufferedReader:inArg];
}

- (void)writeDataWithJavaIoWriter:(JavaIoWriter *)w {
  [((EduStanfordNlpParserLexparserChineseLexicon *) nil_chk(chineseLexicon_)) writeDataWithJavaIoWriter:w];
}

+ (jint)numSubArgsWithNSStringArray:(IOSObjectArray *)args
                            withInt:(jint)index {
  return EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter_numSubArgsWithNSStringArray_withInt_(args, index);
}

- (instancetype)initWithEduStanfordNlpTreesTreebank:(EduStanfordNlpTreesTreebank *)trainTreebank
           withEduStanfordNlpParserLexparserOptions:(EduStanfordNlpParserLexparserOptions *)op
                        withEduStanfordNlpUtilIndex:(id<EduStanfordNlpUtilIndex>)wordIndex
                        withEduStanfordNlpUtilIndex:(id<EduStanfordNlpUtilIndex>)tagIndex {
  EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter_initWithEduStanfordNlpTreesTreebank_withEduStanfordNlpParserLexparserOptions_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(self, trainTreebank, op, wordIndex, tagIndex);
  return self;
}

+ (EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter *)getSegmenterDataFromTreebankWithEduStanfordNlpTreesTreebank:(EduStanfordNlpTreesTreebank *)trainTreebank
                                                                                    withEduStanfordNlpParserLexparserOptions:(EduStanfordNlpParserLexparserOptions *)op
                                                                                                 withEduStanfordNlpUtilIndex:(id<EduStanfordNlpUtilIndex>)wordIndex
                                                                                                 withEduStanfordNlpUtilIndex:(id<EduStanfordNlpUtilIndex>)tagIndex {
  return EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter_getSegmenterDataFromTreebankWithEduStanfordNlpTreesTreebank_withEduStanfordNlpParserLexparserOptions_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(trainTreebank, op, wordIndex, tagIndex);
}

+ (void)printArgsWithNSStringArray:(IOSObjectArray *)args
             withJavaIoPrintStream:(JavaIoPrintStream *)ps {
  EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter_printArgsWithNSStringArray_withJavaIoPrintStream_(args, ps);
}

+ (void)saveSegmenterDataToSerializedWithEduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter:(EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter *)cs
                                                                                        withNSString:(NSString *)filename {
  EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter_saveSegmenterDataToSerializedWithEduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter_withNSString_(cs, filename);
}

+ (void)saveSegmenterDataToTextWithEduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter:(EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter *)cs
                                                                                  withNSString:(NSString *)filename {
  EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter_saveSegmenterDataToTextWithEduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter_withNSString_(cs, filename);
}

+ (EduStanfordNlpTreesTreebank *)makeTreebankWithNSString:(NSString *)treebankPath
                 withEduStanfordNlpParserLexparserOptions:(EduStanfordNlpParserLexparserOptions *)op
                                     withJavaIoFileFilter:(id<JavaIoFileFilter>)filt {
  return EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter_makeTreebankWithNSString_withEduStanfordNlpParserLexparserOptions_withJavaIoFileFilter_(treebankPath, op, filt);
}

- (instancetype)initWithNSString:(NSString *)segmenterFileOrUrl
withEduStanfordNlpParserLexparserOptions:(EduStanfordNlpParserLexparserOptions *)op {
  EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter_initWithNSString_withEduStanfordNlpParserLexparserOptions_(self, segmenterFileOrUrl, op);
  return self;
}

+ (EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter *)getSegmenterDataFromFileWithNSString:(NSString *)parserFileOrUrl
                                                             withEduStanfordNlpParserLexparserOptions:(EduStanfordNlpParserLexparserOptions *)op {
  return EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter_getSegmenterDataFromFileWithNSString_withEduStanfordNlpParserLexparserOptions_(parserFileOrUrl, op);
}

+ (EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter *)getSegmenterDataFromSerializedFileWithNSString:(NSString *)serializedFileOrUrl {
  return EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter_getSegmenterDataFromSerializedFileWithNSString_(serializedFileOrUrl);
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter_mainWithNSStringArray_(args);
}

- (id<EduStanfordNlpParserLexparserUnknownWordModel>)getUnknownWordModel {
  return [((EduStanfordNlpParserLexparserChineseLexicon *) nil_chk(chineseLexicon_)) getUnknownWordModel];
}

- (void)setUnknownWordModelWithEduStanfordNlpParserLexparserUnknownWordModel:(id<EduStanfordNlpParserLexparserUnknownWordModel>)uwm {
  [((EduStanfordNlpParserLexparserChineseLexicon *) nil_chk(chineseLexicon_)) setUnknownWordModelWithEduStanfordNlpParserLexparserUnknownWordModel:uwm];
}

- (void)trainWithJavaUtilCollection:(id<JavaUtilCollection>)trees
             withJavaUtilCollection:(id<JavaUtilCollection>)rawTrees {
  [self trainWithJavaUtilCollection:trees];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 1, 2, -1, 3, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 2, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, 6, 7, -1, 8, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, 9, 10, -1, 11, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, 9, 12, -1, 13, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 17, -1, 18, -1, -1 },
    { NULL, "V", 0x1, 16, 19, -1, 20, -1, -1 },
    { NULL, "V", 0x1, 16, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 23, -1, 24, -1, -1 },
    { NULL, "V", 0x1, 16, 25, -1, 26, -1, -1 },
    { NULL, "V", 0x1, 27, 25, -1, 26, -1, -1 },
    { NULL, "V", 0x1, 28, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 29, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, 30, 31, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 32, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 33, 34, 35, -1, -1, -1 },
    { NULL, "V", 0x1, 36, 37, 35, -1, -1, -1 },
    { NULL, "I", 0xa, 38, 39, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 40, -1, 41, -1, -1 },
    { NULL, "LEduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter;", 0xa, 42, 40, -1, 43, -1, -1 },
    { NULL, "V", 0xa, 44, 45, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 46, 47, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 48, 47, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTreebank;", 0xa, 49, 50, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 51, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter;", 0x9, 52, 51, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter;", 0xc, 53, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 54, 55, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpParserLexparserUnknownWordModel;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 56, 57, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 58, -1, 59, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpParserLexparserChineseLexicon:withEduStanfordNlpProcessWordSegmenter:);
  methods[1].selector = @selector(segmentWithNSString:);
  methods[2].selector = @selector(isKnownWithInt:);
  methods[3].selector = @selector(isKnownWithNSString:);
  methods[4].selector = @selector(tagSetWithJavaUtilFunctionFunction:);
  methods[5].selector = @selector(ruleIteratorByWordWithInt:withInt:withNSString:);
  methods[6].selector = @selector(ruleIteratorByWordWithNSString:withInt:withNSString:);
  methods[7].selector = @selector(numRules);
  methods[8].selector = @selector(initializeTrainingWithDouble:);
  methods[9].selector = @selector(trainWithJavaUtilCollection:);
  methods[10].selector = @selector(trainWithJavaUtilCollection:withDouble:);
  methods[11].selector = @selector(trainWithEduStanfordNlpTreesTree:);
  methods[12].selector = @selector(trainWithEduStanfordNlpTreesTree:withDouble:);
  methods[13].selector = @selector(trainWithJavaUtilList:);
  methods[14].selector = @selector(trainWithJavaUtilList:withDouble:);
  methods[15].selector = @selector(trainUnannotatedWithJavaUtilList:withDouble:);
  methods[16].selector = @selector(incrementTreesReadWithDouble:);
  methods[17].selector = @selector(trainWithEduStanfordNlpLingTaggedWord:withInt:withDouble:);
  methods[18].selector = @selector(finishTraining);
  methods[19].selector = @selector(scoreWithEduStanfordNlpParserLexparserIntTaggedWord:withInt:withNSString:withNSString:);
  methods[20].selector = @selector(loadSegmenterWithNSString:);
  methods[21].selector = @selector(readDataWithJavaIoBufferedReader:);
  methods[22].selector = @selector(writeDataWithJavaIoWriter:);
  methods[23].selector = @selector(numSubArgsWithNSStringArray:withInt:);
  methods[24].selector = @selector(initWithEduStanfordNlpTreesTreebank:withEduStanfordNlpParserLexparserOptions:withEduStanfordNlpUtilIndex:withEduStanfordNlpUtilIndex:);
  methods[25].selector = @selector(getSegmenterDataFromTreebankWithEduStanfordNlpTreesTreebank:withEduStanfordNlpParserLexparserOptions:withEduStanfordNlpUtilIndex:withEduStanfordNlpUtilIndex:);
  methods[26].selector = @selector(printArgsWithNSStringArray:withJavaIoPrintStream:);
  methods[27].selector = @selector(saveSegmenterDataToSerializedWithEduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter:withNSString:);
  methods[28].selector = @selector(saveSegmenterDataToTextWithEduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter:withNSString:);
  methods[29].selector = @selector(makeTreebankWithNSString:withEduStanfordNlpParserLexparserOptions:withJavaIoFileFilter:);
  methods[30].selector = @selector(initWithNSString:withEduStanfordNlpParserLexparserOptions:);
  methods[31].selector = @selector(getSegmenterDataFromFileWithNSString:withEduStanfordNlpParserLexparserOptions:);
  methods[32].selector = @selector(getSegmenterDataFromSerializedFileWithNSString:);
  methods[33].selector = @selector(mainWithNSStringArray:);
  methods[34].selector = @selector(getUnknownWordModel);
  methods[35].selector = @selector(setUnknownWordModelWithEduStanfordNlpParserLexparserUnknownWordModel:);
  methods[36].selector = @selector(trainWithJavaUtilCollection:withJavaUtilCollection:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "chineseLexicon_", "LEduStanfordNlpParserLexparserChineseLexicon;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "wordSegmenter_", "LEduStanfordNlpProcessWordSegmenter;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "op_", "LEduStanfordNlpParserLexparserOptions;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpParserLexparserChineseLexicon;LEduStanfordNlpProcessWordSegmenter;", "segment", "LNSString;", "(Ljava/lang/String;)Ljava/util/List<Ledu/stanford/nlp/ling/HasWord;>;", "isKnown", "I", "tagSet", "LJavaUtilFunctionFunction;", "(Ljava/util/function/Function<Ljava/lang/String;Ljava/lang/String;>;)Ljava/util/Set<Ljava/lang/String;>;", "ruleIteratorByWord", "IILNSString;", "(IILjava/lang/String;)Ljava/util/Iterator<Ledu/stanford/nlp/parser/lexparser/IntTaggedWord;>;", "LNSString;ILNSString;", "(Ljava/lang/String;ILjava/lang/String;)Ljava/util/Iterator<Ledu/stanford/nlp/parser/lexparser/IntTaggedWord;>;", "initializeTraining", "D", "train", "LJavaUtilCollection;", "(Ljava/util/Collection<Ledu/stanford/nlp/trees/Tree;>;)V", "LJavaUtilCollection;D", "(Ljava/util/Collection<Ledu/stanford/nlp/trees/Tree;>;D)V", "LEduStanfordNlpTreesTree;", "LEduStanfordNlpTreesTree;D", "LJavaUtilList;", "(Ljava/util/List<Ledu/stanford/nlp/ling/TaggedWord;>;)V", "LJavaUtilList;D", "(Ljava/util/List<Ledu/stanford/nlp/ling/TaggedWord;>;D)V", "trainUnannotated", "incrementTreesRead", "LEduStanfordNlpLingTaggedWord;ID", "score", "LEduStanfordNlpParserLexparserIntTaggedWord;ILNSString;LNSString;", "loadSegmenter", "readData", "LJavaIoBufferedReader;", "LJavaIoIOException;", "writeData", "LJavaIoWriter;", "numSubArgs", "[LNSString;I", "LEduStanfordNlpTreesTreebank;LEduStanfordNlpParserLexparserOptions;LEduStanfordNlpUtilIndex;LEduStanfordNlpUtilIndex;", "(Ledu/stanford/nlp/trees/Treebank;Ledu/stanford/nlp/parser/lexparser/Options;Ledu/stanford/nlp/util/Index<Ljava/lang/String;>;Ledu/stanford/nlp/util/Index<Ljava/lang/String;>;)V", "getSegmenterDataFromTreebank", "(Ledu/stanford/nlp/trees/Treebank;Ledu/stanford/nlp/parser/lexparser/Options;Ledu/stanford/nlp/util/Index<Ljava/lang/String;>;Ledu/stanford/nlp/util/Index<Ljava/lang/String;>;)Ledu/stanford/nlp/parser/lexparser/ChineseLexiconAndWordSegmenter;", "printArgs", "[LNSString;LJavaIoPrintStream;", "saveSegmenterDataToSerialized", "LEduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter;LNSString;", "saveSegmenterDataToText", "makeTreebank", "LNSString;LEduStanfordNlpParserLexparserOptions;LJavaIoFileFilter;", "LNSString;LEduStanfordNlpParserLexparserOptions;", "getSegmenterDataFromFile", "getSegmenterDataFromSerializedFile", "main", "[LNSString;", "setUnknownWordModel", "LEduStanfordNlpParserLexparserUnknownWordModel;", "LJavaUtilCollection;LJavaUtilCollection;", "(Ljava/util/Collection<Ledu/stanford/nlp/trees/Tree;>;Ljava/util/Collection<Ledu/stanford/nlp/trees/Tree;>;)V" };
  static const J2ObjcClassInfo _EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter = { "ChineseLexiconAndWordSegmenter", "edu.stanford.nlp.parser.lexparser", ptrTable, methods, fields, 7, 0x1, 37, 4, -1, -1, -1, -1, -1 };
  return &_EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter;
}

@end

void EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter_initWithEduStanfordNlpParserLexparserChineseLexicon_withEduStanfordNlpProcessWordSegmenter_(EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter *self, EduStanfordNlpParserLexparserChineseLexicon *lex, id<EduStanfordNlpProcessWordSegmenter> seg) {
  NSObject_init(self);
  self->chineseLexicon_ = lex;
  self->wordSegmenter_ = seg;
}

EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter *new_EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter_initWithEduStanfordNlpParserLexparserChineseLexicon_withEduStanfordNlpProcessWordSegmenter_(EduStanfordNlpParserLexparserChineseLexicon *lex, id<EduStanfordNlpProcessWordSegmenter> seg) {
  J2OBJC_NEW_IMPL(EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter, initWithEduStanfordNlpParserLexparserChineseLexicon_withEduStanfordNlpProcessWordSegmenter_, lex, seg)
}

EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter *create_EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter_initWithEduStanfordNlpParserLexparserChineseLexicon_withEduStanfordNlpProcessWordSegmenter_(EduStanfordNlpParserLexparserChineseLexicon *lex, id<EduStanfordNlpProcessWordSegmenter> seg) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter, initWithEduStanfordNlpParserLexparserChineseLexicon_withEduStanfordNlpProcessWordSegmenter_, lex, seg)
}

jint EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter_numSubArgsWithNSStringArray_withInt_(IOSObjectArray *args, jint index) {
  EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter_initialize();
  jint i = index;
  while (i + 1 < ((IOSObjectArray *) nil_chk(args))->size_ && [((NSString *) nil_chk(IOSObjectArray_Get(args, i + 1))) charAtWithInt:0] != '-') {
    i++;
  }
  return i - index;
}

void EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter_initWithEduStanfordNlpTreesTreebank_withEduStanfordNlpParserLexparserOptions_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter *self, EduStanfordNlpTreesTreebank *trainTreebank, EduStanfordNlpParserLexparserOptions *op, id<EduStanfordNlpUtilIndex> wordIndex, id<EduStanfordNlpUtilIndex> tagIndex) {
  NSObject_init(self);
  EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter *cs = EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter_getSegmenterDataFromTreebankWithEduStanfordNlpTreesTreebank_withEduStanfordNlpParserLexparserOptions_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(trainTreebank, op, wordIndex, tagIndex);
  self->chineseLexicon_ = ((EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter *) nil_chk(cs))->chineseLexicon_;
  self->wordSegmenter_ = cs->wordSegmenter_;
}

EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter *new_EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter_initWithEduStanfordNlpTreesTreebank_withEduStanfordNlpParserLexparserOptions_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(EduStanfordNlpTreesTreebank *trainTreebank, EduStanfordNlpParserLexparserOptions *op, id<EduStanfordNlpUtilIndex> wordIndex, id<EduStanfordNlpUtilIndex> tagIndex) {
  J2OBJC_NEW_IMPL(EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter, initWithEduStanfordNlpTreesTreebank_withEduStanfordNlpParserLexparserOptions_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_, trainTreebank, op, wordIndex, tagIndex)
}

EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter *create_EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter_initWithEduStanfordNlpTreesTreebank_withEduStanfordNlpParserLexparserOptions_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(EduStanfordNlpTreesTreebank *trainTreebank, EduStanfordNlpParserLexparserOptions *op, id<EduStanfordNlpUtilIndex> wordIndex, id<EduStanfordNlpUtilIndex> tagIndex) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter, initWithEduStanfordNlpTreesTreebank_withEduStanfordNlpParserLexparserOptions_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_, trainTreebank, op, wordIndex, tagIndex)
}

EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter *EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter_getSegmenterDataFromTreebankWithEduStanfordNlpTreesTreebank_withEduStanfordNlpParserLexparserOptions_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(EduStanfordNlpTreesTreebank *trainTreebank, EduStanfordNlpParserLexparserOptions *op, id<EduStanfordNlpUtilIndex> wordIndex, id<EduStanfordNlpUtilIndex> tagIndex) {
  EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter_initialize();
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@", @"Currently ", new_JavaUtilDate_init())];
  EduStanfordNlpUtilTiming_startTime();
  id<EduStanfordNlpParserLexparserTreebankLangParserParams> tlpParams = ((EduStanfordNlpParserLexparserOptions *) nil_chk(op))->tlpParams_;
  if (((EduStanfordNlpParserLexparserTestOptions *) nil_chk(op->testOptions_))->verbose_) {
    [JreLoadStatic(JavaLangSystem, out) printWithNSString:@"Training "];
    [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:[((EduStanfordNlpTreesTreebank *) nil_chk(trainTreebank)) textualSummary]];
  }
  [JreLoadStatic(JavaLangSystem, out) printWithNSString:@"Binarizing trees..."];
  EduStanfordNlpParserLexparserTreeAnnotatorAndBinarizer *binarizer;
  if (!((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(op->trainOptions_))->leftToRight_) {
    binarizer = new_EduStanfordNlpParserLexparserTreeAnnotatorAndBinarizer_initWithEduStanfordNlpParserLexparserTreebankLangParserParams_withBoolean_withBoolean_withBoolean_withEduStanfordNlpParserLexparserOptions_(tlpParams, op->forceCNF_, ![op->trainOptions_ outsideFactor], true, op);
  }
  else {
    binarizer = new_EduStanfordNlpParserLexparserTreeAnnotatorAndBinarizer_initWithEduStanfordNlpTreesHeadFinder_withEduStanfordNlpTreesHeadFinder_withEduStanfordNlpParserLexparserTreebankLangParserParams_withBoolean_withBoolean_withBoolean_withEduStanfordNlpParserLexparserOptions_([((id<EduStanfordNlpParserLexparserTreebankLangParserParams>) nil_chk(tlpParams)) headFinder], new_EduStanfordNlpTreesLeftHeadFinder_init(), tlpParams, op->forceCNF_, ![((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(op->trainOptions_)) outsideFactor], true, op);
  }
  EduStanfordNlpParserLexparserCollinsPuncTransformer *collinsPuncTransformer = nil;
  if (((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(op->trainOptions_))->collinsPunc_) {
    collinsPuncTransformer = new_EduStanfordNlpParserLexparserCollinsPuncTransformer_initWithEduStanfordNlpTreesTreebankLanguagePack_([((id<EduStanfordNlpParserLexparserTreebankLangParserParams>) nil_chk(tlpParams)) treebankLanguagePack]);
  }
  id<JavaUtilList> binaryTrainTrees = new_JavaUtilArrayList_init();
  if (((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(op->trainOptions_))->selectiveSplit_) {
    op->trainOptions_->splitters_ = EduStanfordNlpParserLexparserParentAnnotationStats_getSplitCategoriesWithEduStanfordNlpTreesTreebank_withBoolean_withInt_withDouble_withDouble_withEduStanfordNlpTreesTreebankLanguagePack_(trainTreebank, true, 0, op->trainOptions_->selectiveSplitCutOff_, op->trainOptions_->tagSelectiveSplitCutOff_, [((id<EduStanfordNlpParserLexparserTreebankLangParserParams>) nil_chk(tlpParams)) treebankLanguagePack]);
    if (((EduStanfordNlpParserLexparserTestOptions *) nil_chk(op->testOptions_))->verbose_) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$@", @"Parent split categories: ", ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(op->trainOptions_))->splitters_)];
    }
  }
  if (((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(op->trainOptions_))->selectivePostSplit_) {
    id<EduStanfordNlpTreesTreeTransformer> myTransformer = new_EduStanfordNlpParserLexparserTreeAnnotator_initWithEduStanfordNlpTreesHeadFinder_withEduStanfordNlpParserLexparserTreebankLangParserParams_withEduStanfordNlpParserLexparserOptions_([((id<EduStanfordNlpParserLexparserTreebankLangParserParams>) nil_chk(tlpParams)) headFinder], tlpParams, op);
    EduStanfordNlpTreesTreebank *annotatedTB = [((EduStanfordNlpTreesTreebank *) nil_chk(trainTreebank)) transformWithEduStanfordNlpTreesTreeTransformer:myTransformer];
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(op->trainOptions_))->postSplitters_ = EduStanfordNlpParserLexparserParentAnnotationStats_getSplitCategoriesWithEduStanfordNlpTreesTreebank_withBoolean_withInt_withDouble_withDouble_withEduStanfordNlpTreesTreebankLanguagePack_(annotatedTB, true, 0, op->trainOptions_->selectivePostSplitCutOff_, op->trainOptions_->tagSelectivePostSplitCutOff_, [tlpParams treebankLanguagePack]);
    if (((EduStanfordNlpParserLexparserTestOptions *) nil_chk(op->testOptions_))->verbose_) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$@", @"Parent post annotation split categories: ", ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(op->trainOptions_))->postSplitters_)];
    }
  }
  if (((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(op->trainOptions_))->hSelSplit_) {
    [binarizer setDoSelectiveSplitWithBoolean:false];
    for (EduStanfordNlpTreesTree * __strong tree in nil_chk(trainTreebank)) {
      if (((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(op->trainOptions_))->collinsPunc_) {
        tree = [((EduStanfordNlpParserLexparserCollinsPuncTransformer *) nil_chk(collinsPuncTransformer)) transformTreeWithEduStanfordNlpTreesTree:tree];
      }
      tree = [binarizer transformTreeWithEduStanfordNlpTreesTree:tree];
    }
    [binarizer setDoSelectiveSplitWithBoolean:true];
  }
  for (EduStanfordNlpTreesTree * __strong tree in nil_chk(trainTreebank)) {
    if (((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(op->trainOptions_))->collinsPunc_) {
      tree = [((EduStanfordNlpParserLexparserCollinsPuncTransformer *) nil_chk(collinsPuncTransformer)) transformTreeWithEduStanfordNlpTreesTree:tree];
    }
    tree = [binarizer transformTreeWithEduStanfordNlpTreesTree:tree];
    [binaryTrainTrees addWithId:tree];
  }
  EduStanfordNlpUtilTiming_tickWithNSString_(@"done.");
  if (((EduStanfordNlpParserLexparserTestOptions *) nil_chk(op->testOptions_))->verbose_) {
    [binarizer dumpStats];
  }
  [JreLoadStatic(JavaLangSystem, out) printWithNSString:@"Extracting Lexicon..."];
  EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter *clex = (EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter *) cast_chk([((id<EduStanfordNlpParserLexparserTreebankLangParserParams>) nil_chk(op->tlpParams_)) lexWithEduStanfordNlpParserLexparserOptions:op withEduStanfordNlpUtilIndex:wordIndex withEduStanfordNlpUtilIndex:tagIndex], [EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter class]);
  [((EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter *) nil_chk(clex)) initializeTrainingWithDouble:[binaryTrainTrees size]];
  [clex trainWithJavaUtilCollection:binaryTrainTrees];
  [clex finishTraining];
  EduStanfordNlpUtilTiming_tickWithNSString_(@"done.");
  return clex;
}

void EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter_printArgsWithNSStringArray_withJavaIoPrintStream_(IOSObjectArray *args, JavaIoPrintStream *ps) {
  EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter_initialize();
  [((JavaIoPrintStream *) nil_chk(ps)) printWithNSString:@"ChineseLexiconAndWordSegmenter invoked with arguments:"];
  {
    IOSObjectArray *a__ = args;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *arg = *b__++;
      [ps printWithNSString:JreStrcat("C$", ' ', arg)];
    }
  }
  [ps println];
}

void EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter_saveSegmenterDataToSerializedWithEduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter_withNSString_(EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter *cs, NSString *filename) {
  EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter_initialize();
  @try {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printWithNSString:JreStrcat("$$C", @"Writing segmenter in serialized format to file ", filename, ' ')];
    JavaIoObjectOutputStream *out = EduStanfordNlpIoIOUtils_writeStreamFromStringWithNSString_(filename);
    [((JavaIoObjectOutputStream *) nil_chk(out)) writeObjectWithId:cs];
    [out close];
    [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:@"done."];
  }
  @catch (JavaIoIOException *ioe) {
    [((JavaIoIOException *) nil_chk(ioe)) printStackTrace];
  }
}

void EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter_saveSegmenterDataToTextWithEduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter_withNSString_(EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter *cs, NSString *filename) {
  EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter_initialize();
  @try {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printWithNSString:JreStrcat("$$", @"Writing parser in text grammar format to file ", filename)];
    JavaIoOutputStream *os;
    if ([((NSString *) nil_chk(filename)) hasSuffix:@".gz"]) {
      os = new_JavaIoBufferedOutputStream_initWithJavaIoOutputStream_(new_JavaUtilZipGZIPOutputStream_initWithJavaIoOutputStream_(new_JavaIoFileOutputStream_initWithNSString_(filename)));
    }
    else {
      os = new_JavaIoBufferedOutputStream_initWithJavaIoOutputStream_(new_JavaIoFileOutputStream_initWithNSString_(filename));
    }
    JavaIoPrintWriter *out = new_JavaIoPrintWriter_initWithJavaIoOutputStream_(os);
    NSString *prefix = @"BEGIN ";
    [out printlnWithNSString:JreStrcat("$$", prefix, @"LEXICON")];
    if (cs != nil) {
      [cs writeDataWithJavaIoWriter:out];
    }
    [out println];
    [JreLoadStatic(JavaLangSystem, err) printWithNSString:@"."];
    [out flush];
    [out close];
    [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:@"done."];
  }
  @catch (JavaIoIOException *e) {
    [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:@"Trouble saving segmenter data to ASCII format."];
    [((JavaIoIOException *) nil_chk(e)) printStackTrace];
  }
}

EduStanfordNlpTreesTreebank *EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter_makeTreebankWithNSString_withEduStanfordNlpParserLexparserOptions_withJavaIoFileFilter_(NSString *treebankPath, EduStanfordNlpParserLexparserOptions *op, id<JavaIoFileFilter> filt) {
  EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter_initialize();
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$", @"Training a segmenter from treebank dir: ", treebankPath)];
  EduStanfordNlpTreesTreebank *trainTreebank = [((id<EduStanfordNlpParserLexparserTreebankLangParserParams>) nil_chk(((EduStanfordNlpParserLexparserOptions *) nil_chk(op))->tlpParams_)) memoryTreebank];
  [JreLoadStatic(JavaLangSystem, err) printWithNSString:@"Reading trees..."];
  if (filt == nil) {
    [((EduStanfordNlpTreesTreebank *) nil_chk(trainTreebank)) loadPathWithNSString:treebankPath];
  }
  else {
    [((EduStanfordNlpTreesTreebank *) nil_chk(trainTreebank)) loadPathWithNSString:treebankPath withJavaIoFileFilter:filt];
  }
  EduStanfordNlpUtilTiming_tickWithNSString_(JreStrcat("$I$", @"done [read ", [trainTreebank size], @" trees]."));
  return trainTreebank;
}

void EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter_initWithNSString_withEduStanfordNlpParserLexparserOptions_(EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter *self, NSString *segmenterFileOrUrl, EduStanfordNlpParserLexparserOptions *op) {
  NSObject_init(self);
  EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter *cs = EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter_getSegmenterDataFromFileWithNSString_withEduStanfordNlpParserLexparserOptions_(segmenterFileOrUrl, op);
  self->op_ = ((EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter *) nil_chk(cs))->op_;
  self->chineseLexicon_ = cs->chineseLexicon_;
  self->wordSegmenter_ = cs->wordSegmenter_;
}

EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter *new_EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter_initWithNSString_withEduStanfordNlpParserLexparserOptions_(NSString *segmenterFileOrUrl, EduStanfordNlpParserLexparserOptions *op) {
  J2OBJC_NEW_IMPL(EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter, initWithNSString_withEduStanfordNlpParserLexparserOptions_, segmenterFileOrUrl, op)
}

EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter *create_EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter_initWithNSString_withEduStanfordNlpParserLexparserOptions_(NSString *segmenterFileOrUrl, EduStanfordNlpParserLexparserOptions *op) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter, initWithNSString_withEduStanfordNlpParserLexparserOptions_, segmenterFileOrUrl, op)
}

EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter *EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter_getSegmenterDataFromFileWithNSString_withEduStanfordNlpParserLexparserOptions_(NSString *parserFileOrUrl, EduStanfordNlpParserLexparserOptions *op) {
  EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter_initialize();
  EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter *cs = EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter_getSegmenterDataFromSerializedFileWithNSString_(parserFileOrUrl);
  if (cs == nil) {
  }
  return cs;
}

EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter *EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter_getSegmenterDataFromSerializedFileWithNSString_(NSString *serializedFileOrUrl) {
  EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter_initialize();
  EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter *cs = nil;
  @try {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printWithNSString:JreStrcat("$$$", @"Loading segmenter from serialized file ", serializedFileOrUrl, @" ...")];
    JavaIoObjectInputStream *in;
    JavaIoInputStream *is;
    if ([((NSString *) nil_chk(serializedFileOrUrl)) hasPrefix:@"http://"]) {
      JavaNetURL *u = new_JavaNetURL_initWithNSString_(serializedFileOrUrl);
      JavaNetURLConnection *uc = [u openConnection];
      is = [((JavaNetURLConnection *) nil_chk(uc)) getInputStream];
    }
    else {
      is = new_JavaIoFileInputStream_initWithNSString_(serializedFileOrUrl);
    }
    if ([serializedFileOrUrl hasSuffix:@".gz"]) {
      in = new_JavaIoObjectInputStream_initWithJavaIoInputStream_(new_JavaIoBufferedInputStream_initWithJavaIoInputStream_(new_JavaUtilZipGZIPInputStream_initWithJavaIoInputStream_(is)));
    }
    else {
      in = new_JavaIoObjectInputStream_initWithJavaIoInputStream_(new_JavaIoBufferedInputStream_initWithJavaIoInputStream_(is));
    }
    cs = (EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter *) cast_chk([in readObject], [EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter class]);
    [in close];
    [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:@" done."];
    return cs;
  }
  @catch (JavaIoInvalidClassException *ice) {
    [JreLoadStatic(JavaLangSystem, err) println];
    @throw new_JavaLangRuntimeException_initWithNSException_(ice);
  }
  @catch (JavaIoFileNotFoundException *fnfe) {
    [JreLoadStatic(JavaLangSystem, err) println];
    @throw new_JavaLangRuntimeException_initWithNSException_(fnfe);
  }
  @catch (JavaIoStreamCorruptedException *sce) {
  }
  @catch (JavaLangException *e) {
    [JreLoadStatic(JavaLangSystem, err) println];
    [((JavaLangException *) nil_chk(e)) printStackTrace];
  }
  return nil;
}

void EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter_mainWithNSStringArray_(IOSObjectArray *args) {
  EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter_initialize();
  jboolean train = false;
  jboolean saveToSerializedFile = false;
  jboolean saveToTextFile = false;
  NSString *serializedInputFileOrUrl = nil;
  NSString *textInputFileOrUrl = nil;
  NSString *serializedOutputFileOrUrl = nil;
  NSString *textOutputFileOrUrl = nil;
  NSString *treebankPath = nil;
  EduStanfordNlpTreesTreebank *testTreebank = nil;
  NSString *testPath = nil;
  id<JavaIoFileFilter> testFilter = nil;
  id<JavaIoFileFilter> trainFilter = nil;
  NSString *encoding = nil;
  id<EduStanfordNlpProcessTokenizerFactory> tokenizerFactory = nil;
  jboolean tokenized = false;
  id<JavaUtilFunctionFunction> escaper = new_EduStanfordNlpTreesInternationalPennchineseChineseEscaper_init();
  jint argIndex = 0;
  if (((IOSObjectArray *) nil_chk(args))->size_ < 1) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"usage: java edu.stanford.nlp.parser.lexparser.LexicalizedParser parserFileOrUrl filename*"];
    return;
  }
  EduStanfordNlpParserLexparserOptions *op = new_EduStanfordNlpParserLexparserOptions_init();
  op->tlpParams_ = new_EduStanfordNlpParserLexparserChineseTreebankParserParams_init();
  while (argIndex < args->size_ && [((NSString *) nil_chk(IOSObjectArray_Get(args, argIndex))) charAtWithInt:0] == '-') {
    if ([((NSString *) nil_chk(IOSObjectArray_Get(args, argIndex))) equalsIgnoreCase:@"-train"]) {
      train = true;
      saveToSerializedFile = true;
      jint numSubArgs = EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter_numSubArgsWithNSStringArray_withInt_(args, argIndex);
      argIndex++;
      if (numSubArgs > 1) {
        treebankPath = IOSObjectArray_Get(args, argIndex);
        argIndex++;
      }
      else {
        @throw new_JavaLangRuntimeException_initWithNSString_(@"Error: -train option must have treebankPath as first argument.");
      }
      if (numSubArgs == 2) {
        trainFilter = new_EduStanfordNlpIoNumberRangesFileFilter_initWithNSString_withBoolean_(IOSObjectArray_Get(args, argIndex++), true);
      }
      else if (numSubArgs >= 3) {
        @try {
          jint low = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, argIndex));
          jint high = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, argIndex + 1));
          trainFilter = new_EduStanfordNlpIoNumberRangeFileFilter_initWithInt_withInt_withBoolean_(low, high, true);
          argIndex += 2;
        }
        @catch (JavaLangNumberFormatException *e) {
          trainFilter = new_EduStanfordNlpIoNumberRangesFileFilter_initWithNSString_withBoolean_(IOSObjectArray_Get(args, argIndex), true);
          argIndex++;
        }
      }
    }
    else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, argIndex))) equalsIgnoreCase:@"-encoding"]) {
      encoding = IOSObjectArray_Get(args, argIndex + 1);
      [((id<EduStanfordNlpParserLexparserTreebankLangParserParams>) nil_chk(op->tlpParams_)) setInputEncodingWithNSString:encoding];
      [((id<EduStanfordNlpParserLexparserTreebankLangParserParams>) nil_chk(op->tlpParams_)) setOutputEncodingWithNSString:encoding];
      argIndex += 2;
    }
    else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, argIndex))) equalsIgnoreCase:@"-loadFromSerializedFile"]) {
      serializedInputFileOrUrl = IOSObjectArray_Get(args, argIndex + 1);
      argIndex += 2;
    }
    else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, argIndex))) equalsIgnoreCase:@"-saveToSerializedFile"]) {
      saveToSerializedFile = true;
      serializedOutputFileOrUrl = IOSObjectArray_Get(args, argIndex + 1);
      argIndex += 2;
    }
    else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, argIndex))) equalsIgnoreCase:@"-saveToTextFile"]) {
      saveToTextFile = true;
      textOutputFileOrUrl = IOSObjectArray_Get(args, argIndex + 1);
      argIndex += 2;
    }
    else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, argIndex))) equalsIgnoreCase:@"-treebank"]) {
      jint numSubArgs = EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter_numSubArgsWithNSStringArray_withInt_(args, argIndex);
      argIndex++;
      if (numSubArgs == 1) {
        testFilter = new_EduStanfordNlpIoNumberRangesFileFilter_initWithNSString_withBoolean_(IOSObjectArray_Get(args, argIndex++), true);
      }
      else if (numSubArgs > 1) {
        testPath = IOSObjectArray_Get(args, argIndex++);
        if (numSubArgs == 2) {
          testFilter = new_EduStanfordNlpIoNumberRangesFileFilter_initWithNSString_withBoolean_(IOSObjectArray_Get(args, argIndex++), true);
        }
        else if (numSubArgs >= 3) {
          @try {
            jint low = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, argIndex));
            jint high = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, argIndex + 1));
            testFilter = new_EduStanfordNlpIoNumberRangeFileFilter_initWithInt_withInt_withBoolean_(low, high, true);
            argIndex += 2;
          }
          @catch (JavaLangNumberFormatException *e) {
            testFilter = new_EduStanfordNlpIoNumberRangesFileFilter_initWithNSString_withBoolean_(IOSObjectArray_Get(args, argIndex++), true);
          }
        }
      }
    }
    else {
      jint j = [((id<EduStanfordNlpParserLexparserTreebankLangParserParams>) nil_chk(op->tlpParams_)) setOptionFlagWithNSStringArray:args withInt:argIndex];
      if (j == argIndex) {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$", @"Unknown option ignored: ", IOSObjectArray_Get(args, argIndex))];
        j++;
      }
      argIndex = j;
    }
  }
  id<EduStanfordNlpParserLexparserTreebankLangParserParams> tlpParams = op->tlpParams_;
  EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter *cs = nil;
  if (!train && ((EduStanfordNlpParserLexparserTestOptions *) nil_chk(op->testOptions_))->verbose_) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@", @"Currently ", new_JavaUtilDate_init())];
    EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter_printArgsWithNSStringArray_withJavaIoPrintStream_(args, JreLoadStatic(JavaLangSystem, out));
  }
  if (train) {
    EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter_printArgsWithNSStringArray_withJavaIoPrintStream_(args, JreLoadStatic(JavaLangSystem, out));
    if (treebankPath == nil) {
      treebankPath = IOSObjectArray_Get(args, argIndex);
      argIndex++;
      if (args->size_ > argIndex + 1) {
        @try {
          jint low = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, argIndex));
          jint high = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, argIndex + 1));
          trainFilter = new_EduStanfordNlpIoNumberRangeFileFilter_initWithInt_withInt_withBoolean_(low, high, true);
          argIndex += 2;
        }
        @catch (JavaLangNumberFormatException *e) {
          trainFilter = new_EduStanfordNlpIoNumberRangesFileFilter_initWithNSString_withBoolean_(IOSObjectArray_Get(args, argIndex), true);
          argIndex++;
        }
      }
    }
    EduStanfordNlpTreesTreebank *trainTreebank = EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter_makeTreebankWithNSString_withEduStanfordNlpParserLexparserOptions_withJavaIoFileFilter_(treebankPath, op, trainFilter);
    id<EduStanfordNlpUtilIndex> wordIndex = new_EduStanfordNlpUtilHashIndex_init();
    id<EduStanfordNlpUtilIndex> tagIndex = new_EduStanfordNlpUtilHashIndex_init();
    cs = new_EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter_initWithEduStanfordNlpTreesTreebank_withEduStanfordNlpParserLexparserOptions_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(trainTreebank, op, wordIndex, tagIndex);
  }
  else if (textInputFileOrUrl != nil) {
  }
  else {
    if (serializedInputFileOrUrl == nil) {
      serializedInputFileOrUrl = IOSObjectArray_Get(args, argIndex);
      argIndex++;
    }
    @try {
      cs = new_EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter_initWithNSString_withEduStanfordNlpParserLexparserOptions_(serializedInputFileOrUrl, op);
    }
    @catch (JavaLangIllegalArgumentException *e) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"Error loading segmenter, exiting..."];
      JavaLangSystem_exitWithInt_(0);
    }
  }
  EduStanfordNlpTreesTreePrint *treePrint = [((EduStanfordNlpParserLexparserTestOptions *) nil_chk(op->testOptions_)) treePrintWithEduStanfordNlpParserLexparserTreebankLangParserParams:tlpParams];
  if (testFilter != nil) {
    if (testPath == nil) {
      if (treebankPath == nil) {
        @throw new_JavaLangRuntimeException_initWithNSString_(@"No test treebank path specified...");
      }
      else {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$C", @"No test treebank path specified.  Using train path: \"", treebankPath, '"')];
        testPath = treebankPath;
      }
    }
    testTreebank = [((id<EduStanfordNlpParserLexparserTreebankLangParserParams>) nil_chk(tlpParams)) testMemoryTreebank];
    [((EduStanfordNlpTreesTreebank *) nil_chk(testTreebank)) loadPathWithNSString:testPath withJavaIoFileFilter:testFilter];
  }
  ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(op->trainOptions_))->sisterSplitters_ = EduStanfordNlpUtilGenerics_newHashSetWithJavaUtilCollection_(JavaUtilArrays_asListWithNSObjectArray_([((id<EduStanfordNlpParserLexparserTreebankLangParserParams>) nil_chk(tlpParams)) sisterSplitters]));
  if (((EduStanfordNlpParserLexparserTestOptions *) nil_chk(op->testOptions_))->verbose_) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$", @"Lexicon is ", [[((EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter *) nil_chk(cs)) getClass] getName])];
  }
  JavaIoPrintWriter *pwOut = [tlpParams pw];
  JavaIoPrintWriter *pwErr = [tlpParams pwWithJavaIoOutputStream:JreLoadStatic(JavaLangSystem, err)];
  if (saveToTextFile) {
    if (textOutputFileOrUrl != nil) {
      EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter_saveSegmenterDataToTextWithEduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter_withNSString_(cs, textOutputFileOrUrl);
    }
    else {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"Usage: must specify a text segmenter data output path"];
    }
  }
  if (saveToSerializedFile) {
    if (serializedOutputFileOrUrl == nil && argIndex < args->size_) {
      serializedOutputFileOrUrl = IOSObjectArray_Get(args, argIndex);
      argIndex++;
    }
    if (serializedOutputFileOrUrl != nil) {
      EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter_saveSegmenterDataToSerializedWithEduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter_withNSString_(cs, serializedOutputFileOrUrl);
    }
    else if (textOutputFileOrUrl == nil && testTreebank == nil) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"usage: java edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter-train trainFilesPath [start stop] serializedParserFilename"];
    }
  }
  if (((EduStanfordNlpParserLexparserTestOptions *) nil_chk(op->testOptions_))->verbose_) {
  }
  if (testTreebank != nil || (argIndex < args->size_ && [((NSString *) nil_chk(IOSObjectArray_Get(args, argIndex))) equalsIgnoreCase:@"-treebank"])) {
    if (testTreebank == nil) {
      testTreebank = [tlpParams testMemoryTreebank];
      if (args->size_ < argIndex + 4) {
        [((EduStanfordNlpTreesTreebank *) nil_chk(testTreebank)) loadPathWithNSString:IOSObjectArray_Get(args, argIndex + 1)];
      }
      else {
        jint testlow = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, argIndex + 2));
        jint testhigh = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, argIndex + 3));
        [((EduStanfordNlpTreesTreebank *) nil_chk(testTreebank)) loadPathWithNSString:IOSObjectArray_Get(args, argIndex + 1) withJavaIoFileFilter:new_EduStanfordNlpIoNumberRangeFileFilter_initWithInt_withInt_withBoolean_(testlow, testhigh, true)];
      }
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpParserLexparserChineseLexiconAndWordSegmenter)
