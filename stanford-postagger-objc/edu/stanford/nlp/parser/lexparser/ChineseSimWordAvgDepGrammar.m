//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/parser/lexparser/ChineseSimWordAvgDepGrammar.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/parser/lexparser/ChineseSimWordAvgDepGrammar.h"
#include "edu/stanford/nlp/parser/lexparser/IntDependency.h"
#include "edu/stanford/nlp/parser/lexparser/IntTaggedWord.h"
#include "edu/stanford/nlp/parser/lexparser/Lexicon.h"
#include "edu/stanford/nlp/parser/lexparser/MLEDependencyGrammar.h"
#include "edu/stanford/nlp/parser/lexparser/Options.h"
#include "edu/stanford/nlp/parser/lexparser/TestOptions.h"
#include "edu/stanford/nlp/parser/lexparser/TreebankLangParserParams.h"
#include "edu/stanford/nlp/stats/ClassicCounter.h"
#include "edu/stanford/nlp/trees/TreebankLanguagePack.h"
#include "edu/stanford/nlp/util/Generics.h"
#include "edu/stanford/nlp/util/Index.h"
#include "edu/stanford/nlp/util/Pair.h"
#include "edu/stanford/nlp/util/Triple.h"
#include "java/io/BufferedReader.h"
#include "java/io/FileInputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStreamReader.h"
#include "java/io/PrintStream.h"
#include "java/lang/Double.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/text/NumberFormat.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"

@interface EduStanfordNlpParserLexparserChineseSimWordAvgDepGrammar () {
 @public
  jdouble simSmooth_;
  id<JavaUtilMap> simArgMap_;
  id<JavaUtilMap> simHeadMap_;
  jboolean debug_;
  jboolean verbose_;
  EduStanfordNlpStatsClassicCounter *statsCounter_;
}

- (jdouble)probTBwithSimWordsWithEduStanfordNlpParserLexparserIntDependency:(EduStanfordNlpParserLexparserIntDependency *)dependency;

- (jdouble)probSimilarWordAvgWithEduStanfordNlpParserLexparserIntDependency:(EduStanfordNlpParserLexparserIntDependency *)dep;

- (NSString *)stringBasicCategoryWithInt:(jint)tag;

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserChineseSimWordAvgDepGrammar, simArgMap_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserChineseSimWordAvgDepGrammar, simHeadMap_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserChineseSimWordAvgDepGrammar, statsCounter_, EduStanfordNlpStatsClassicCounter *)

inline jlong EduStanfordNlpParserLexparserChineseSimWordAvgDepGrammar_get_serialVersionUID();
#define EduStanfordNlpParserLexparserChineseSimWordAvgDepGrammar_serialVersionUID -1845503582705055342LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpParserLexparserChineseSimWordAvgDepGrammar, serialVersionUID, jlong)

inline NSString *EduStanfordNlpParserLexparserChineseSimWordAvgDepGrammar_get_argHeadFile();
static NSString *EduStanfordNlpParserLexparserChineseSimWordAvgDepGrammar_argHeadFile = @"simWords/ArgHead.5";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpParserLexparserChineseSimWordAvgDepGrammar, argHeadFile, NSString *)

inline NSString *EduStanfordNlpParserLexparserChineseSimWordAvgDepGrammar_get_headArgFile();
static NSString *EduStanfordNlpParserLexparserChineseSimWordAvgDepGrammar_headArgFile = @"simWords/HeadArg.5";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpParserLexparserChineseSimWordAvgDepGrammar, headArgFile, NSString *)

__attribute__((unused)) static jdouble EduStanfordNlpParserLexparserChineseSimWordAvgDepGrammar_probTBwithSimWordsWithEduStanfordNlpParserLexparserIntDependency_(EduStanfordNlpParserLexparserChineseSimWordAvgDepGrammar *self, EduStanfordNlpParserLexparserIntDependency *dependency);

__attribute__((unused)) static NSString *EduStanfordNlpParserLexparserChineseSimWordAvgDepGrammar_stringBasicCategoryWithInt_(EduStanfordNlpParserLexparserChineseSimWordAvgDepGrammar *self, jint tag);

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpParserLexparserChineseSimWordAvgDepGrammar)

@implementation EduStanfordNlpParserLexparserChineseSimWordAvgDepGrammar

- (instancetype)initWithEduStanfordNlpParserLexparserTreebankLangParserParams:(id<EduStanfordNlpParserLexparserTreebankLangParserParams>)tlpParams
                                                                  withBoolean:(jboolean)directional
                                                                  withBoolean:(jboolean)distance
                                                                  withBoolean:(jboolean)coarseDistance
                                                                  withBoolean:(jboolean)basicCategoryTagsInDependencyGrammar
                                     withEduStanfordNlpParserLexparserOptions:(EduStanfordNlpParserLexparserOptions *)op
                                                  withEduStanfordNlpUtilIndex:(id<EduStanfordNlpUtilIndex>)wordIndex
                                                  withEduStanfordNlpUtilIndex:(id<EduStanfordNlpUtilIndex>)tagIndex {
  EduStanfordNlpParserLexparserChineseSimWordAvgDepGrammar_initWithEduStanfordNlpParserLexparserTreebankLangParserParams_withBoolean_withBoolean_withBoolean_withBoolean_withEduStanfordNlpParserLexparserOptions_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(self, tlpParams, directional, distance, coarseDistance, basicCategoryTagsInDependencyGrammar, op, wordIndex, tagIndex);
  return self;
}

- (id<JavaUtilMap>)getMapWithNSString:(NSString *)filename {
  id<JavaUtilMap> hashMap = EduStanfordNlpUtilGenerics_newHashMap();
  @try {
    JavaIoBufferedReader *wordMapBReader = new_JavaIoBufferedReader_initWithJavaIoReader_(new_JavaIoInputStreamReader_initWithJavaIoInputStream_withNSString_(new_JavaIoFileInputStream_initWithNSString_(filename), @"UTF-8"));
    NSString *wordMapLine;
    JavaUtilRegexPattern *linePattern = JavaUtilRegexPattern_compileWithNSString_(@"sim\\((.+)/(.+):(.+)/(.+)\\)=(.+)");
    while ((wordMapLine = [wordMapBReader readLine]) != nil) {
      JavaUtilRegexMatcher *m = [((JavaUtilRegexPattern *) nil_chk(linePattern)) matcherWithJavaLangCharSequence:wordMapLine];
      if (![((JavaUtilRegexMatcher *) nil_chk(m)) matches]) {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$", @"Ill-formed line in similar word map file: ", wordMapLine)];
        continue;
      }
      EduStanfordNlpUtilPair *iTW = new_EduStanfordNlpUtilPair_initWithId_withId_(JavaLangInteger_valueOfWithInt_([((id<EduStanfordNlpUtilIndex>) nil_chk(wordIndex_)) addToIndexWithId:[m groupWithInt:1]]), [m groupWithInt:2]);
      jdouble score = JavaLangDouble_parseDoubleWithNSString_([m groupWithInt:5]);
      id<JavaUtilList> tripleList = [((id<JavaUtilMap>) nil_chk(hashMap)) getWithId:iTW];
      if (tripleList == nil) {
        tripleList = new_JavaUtilArrayList_init();
        (void) [hashMap putWithId:iTW withId:tripleList];
      }
      [tripleList addWithId:new_EduStanfordNlpUtilTriple_initWithId_withId_withId_(JavaLangInteger_valueOfWithInt_([wordIndex_ addToIndexWithId:[m groupWithInt:3]]), [m groupWithInt:4], JavaLangDouble_valueOfWithDouble_(score))];
    }
  }
  @catch (JavaIoIOException *e) {
    @throw new_JavaLangRuntimeException_initWithNSString_(@"Problem reading similar words file!");
  }
  return hashMap;
}

- (jdouble)scoreTBWithEduStanfordNlpParserLexparserIntDependency:(EduStanfordNlpParserLexparserIntDependency *)dependency {
  return ((EduStanfordNlpParserLexparserTestOptions *) nil_chk(((EduStanfordNlpParserLexparserOptions *) nil_chk(op_))->testOptions_))->depWeight_ * JavaLangMath_logWithDouble_(EduStanfordNlpParserLexparserChineseSimWordAvgDepGrammar_probTBwithSimWordsWithEduStanfordNlpParserLexparserIntDependency_(self, dependency));
}

- (void)setLexWithEduStanfordNlpParserLexparserLexicon:(id<EduStanfordNlpParserLexparserLexicon>)lex {
  self->lex_ = lex;
}

- (void)javaFinalize {
  [super javaFinalize];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"SimWordAvg stats:"];
  [JreLoadStatic(JavaLangSystem, err) printlnWithId:statsCounter_];
}

- (jdouble)probTBwithSimWordsWithEduStanfordNlpParserLexparserIntDependency:(EduStanfordNlpParserLexparserIntDependency *)dependency {
  return EduStanfordNlpParserLexparserChineseSimWordAvgDepGrammar_probTBwithSimWordsWithEduStanfordNlpParserLexparserIntDependency_(self, dependency);
}

- (jdouble)probSimilarWordAvgWithEduStanfordNlpParserLexparserIntDependency:(EduStanfordNlpParserLexparserIntDependency *)dep {
  jdouble regProb = [self probTBWithEduStanfordNlpParserLexparserIntDependency:dep];
  [((EduStanfordNlpStatsClassicCounter *) nil_chk(statsCounter_)) incrementCountWithId:@"total"];
  id<JavaUtilList> sim2head = nil;
  id<JavaUtilList> sim2arg = nil;
  sim2arg = [((id<JavaUtilMap>) nil_chk(simArgMap_)) getWithId:new_EduStanfordNlpUtilPair_initWithId_withId_(JavaLangInteger_valueOfWithInt_(((EduStanfordNlpParserLexparserIntTaggedWord *) nil_chk(((EduStanfordNlpParserLexparserIntDependency *) nil_chk(dep))->arg_))->word_), EduStanfordNlpParserLexparserChineseSimWordAvgDepGrammar_stringBasicCategoryWithInt_(self, dep->arg_->tag_))];
  sim2head = [((id<JavaUtilMap>) nil_chk(simHeadMap_)) getWithId:new_EduStanfordNlpUtilPair_initWithId_withId_(JavaLangInteger_valueOfWithInt_(((EduStanfordNlpParserLexparserIntTaggedWord *) nil_chk(dep->head_))->word_), EduStanfordNlpParserLexparserChineseSimWordAvgDepGrammar_stringBasicCategoryWithInt_(self, dep->head_->tag_))];
  if (sim2head == nil && sim2arg == nil) {
    return regProb;
  }
  jdouble sumScores = 0, sumWeights = 0;
  if (sim2head == nil) {
    [((EduStanfordNlpStatsClassicCounter *) nil_chk(statsCounter_)) incrementCountWithId:@"aSim"];
    for (EduStanfordNlpUtilTriple * __strong simArg in nil_chk(sim2arg)) {
      jdouble weight = JavaLangMath_expWithDouble_(-50 * [((JavaLangDouble *) nil_chk(((EduStanfordNlpUtilTriple *) nil_chk(simArg))->third_)) doubleValue]);
      for (jint tag = 0, numT = [((id<EduStanfordNlpUtilIndex>) nil_chk(tagIndex_)) size]; tag < numT; tag++) {
        if (![((NSString *) nil_chk(EduStanfordNlpParserLexparserChineseSimWordAvgDepGrammar_stringBasicCategoryWithInt_(self, tag))) isEqual:simArg->second_]) {
          continue;
        }
        EduStanfordNlpParserLexparserIntTaggedWord *tempArg = new_EduStanfordNlpParserLexparserIntTaggedWord_initWithInt_withInt_([((JavaLangInteger *) nil_chk(simArg->first_)) intValue], tag);
        EduStanfordNlpParserLexparserIntDependency *tempDep = new_EduStanfordNlpParserLexparserIntDependency_initWithEduStanfordNlpParserLexparserIntTaggedWord_withEduStanfordNlpParserLexparserIntTaggedWord_withBoolean_withInt_(dep->head_, tempArg, dep->leftHeaded_, dep->distance_);
        jdouble probArg = JavaLangMath_expWithDouble_([((id<EduStanfordNlpParserLexparserLexicon>) nil_chk(lex_)) scoreWithEduStanfordNlpParserLexparserIntTaggedWord:tempArg withInt:0 withNSString:[((id<EduStanfordNlpUtilIndex>) nil_chk(wordIndex_)) getWithInt:tempArg->word_] withNSString:nil]);
        if (probArg == 0.0) {
          continue;
        }
        JrePlusAssignDoubleD(&sumScores, [self probTBWithEduStanfordNlpParserLexparserIntDependency:tempDep] * weight / probArg);
        JrePlusAssignDoubleD(&sumWeights, weight);
      }
    }
  }
  else if (sim2arg == nil) {
    [((EduStanfordNlpStatsClassicCounter *) nil_chk(statsCounter_)) incrementCountWithId:@"hSim"];
    for (EduStanfordNlpUtilTriple * __strong simHead in sim2head) {
      jdouble weight = JavaLangMath_expWithDouble_(-50 * [((JavaLangDouble *) nil_chk(((EduStanfordNlpUtilTriple *) nil_chk(simHead))->third_)) doubleValue]);
      for (jint tag = 0, numT = [((id<EduStanfordNlpUtilIndex>) nil_chk(tagIndex_)) size]; tag < numT; tag++) {
        if (![((NSString *) nil_chk(EduStanfordNlpParserLexparserChineseSimWordAvgDepGrammar_stringBasicCategoryWithInt_(self, tag))) isEqual:simHead->second_]) {
          continue;
        }
        EduStanfordNlpParserLexparserIntTaggedWord *tempHead = new_EduStanfordNlpParserLexparserIntTaggedWord_initWithInt_withInt_([((JavaLangInteger *) nil_chk(simHead->first_)) intValue], tag);
        EduStanfordNlpParserLexparserIntDependency *tempDep = new_EduStanfordNlpParserLexparserIntDependency_initWithEduStanfordNlpParserLexparserIntTaggedWord_withEduStanfordNlpParserLexparserIntTaggedWord_withBoolean_withInt_(tempHead, dep->arg_, dep->leftHeaded_, dep->distance_);
        JrePlusAssignDoubleD(&sumScores, [self probTBWithEduStanfordNlpParserLexparserIntDependency:tempDep] * weight);
        JrePlusAssignDoubleD(&sumWeights, weight);
      }
    }
  }
  else {
    [((EduStanfordNlpStatsClassicCounter *) nil_chk(statsCounter_)) incrementCountWithId:@"hSim"];
    [((EduStanfordNlpStatsClassicCounter *) nil_chk(statsCounter_)) incrementCountWithId:@"aSim"];
    [((EduStanfordNlpStatsClassicCounter *) nil_chk(statsCounter_)) incrementCountWithId:@"aSim&hSim"];
    for (EduStanfordNlpUtilTriple * __strong simArg in sim2arg) {
      for (jint aTag = 0, numT = [((id<EduStanfordNlpUtilIndex>) nil_chk(tagIndex_)) size]; aTag < numT; aTag++) {
        if (![((NSString *) nil_chk(EduStanfordNlpParserLexparserChineseSimWordAvgDepGrammar_stringBasicCategoryWithInt_(self, aTag))) isEqual:((EduStanfordNlpUtilTriple *) nil_chk(simArg))->second_]) {
          continue;
        }
        EduStanfordNlpParserLexparserIntTaggedWord *tempArg = new_EduStanfordNlpParserLexparserIntTaggedWord_initWithInt_withInt_([((JavaLangInteger *) nil_chk(simArg->first_)) intValue], aTag);
        jdouble probArg = JavaLangMath_expWithDouble_([((id<EduStanfordNlpParserLexparserLexicon>) nil_chk(lex_)) scoreWithEduStanfordNlpParserLexparserIntTaggedWord:tempArg withInt:0 withNSString:[((id<EduStanfordNlpUtilIndex>) nil_chk(wordIndex_)) getWithInt:tempArg->word_] withNSString:nil]);
        if (probArg == 0.0) {
          continue;
        }
        for (EduStanfordNlpUtilTriple * __strong simHead in sim2head) {
          for (jint hTag = 0; hTag < numT; hTag++) {
            if (![((NSString *) nil_chk(EduStanfordNlpParserLexparserChineseSimWordAvgDepGrammar_stringBasicCategoryWithInt_(self, hTag))) isEqual:((EduStanfordNlpUtilTriple *) nil_chk(simHead))->second_]) {
              continue;
            }
            EduStanfordNlpParserLexparserIntTaggedWord *tempHead = new_EduStanfordNlpParserLexparserIntTaggedWord_initWithInt_withInt_([((JavaLangInteger *) nil_chk(simHead->first_)) intValue], aTag);
            EduStanfordNlpParserLexparserIntDependency *tempDep = new_EduStanfordNlpParserLexparserIntDependency_initWithEduStanfordNlpParserLexparserIntTaggedWord_withEduStanfordNlpParserLexparserIntTaggedWord_withBoolean_withInt_(tempHead, tempArg, dep->leftHeaded_, dep->distance_);
            jdouble weight = JavaLangMath_expWithDouble_(-50 * [((JavaLangDouble *) nil_chk(simHead->third_)) doubleValue]) * JavaLangMath_expWithDouble_(-50 * [((JavaLangDouble *) nil_chk(simArg->third_)) doubleValue]);
            JrePlusAssignDoubleD(&sumScores, [self probTBWithEduStanfordNlpParserLexparserIntDependency:tempDep] * weight / probArg);
            JrePlusAssignDoubleD(&sumWeights, weight);
          }
        }
      }
    }
  }
  EduStanfordNlpParserLexparserIntDependency *temp = new_EduStanfordNlpParserLexparserIntDependency_initWithEduStanfordNlpParserLexparserIntTaggedWord_withEduStanfordNlpParserLexparserIntTaggedWord_withBoolean_withInt_(dep->head_, wildTW_, dep->leftHeaded_, dep->distance_);
  jdouble countHead = [((EduStanfordNlpStatsClassicCounter *) nil_chk(argCounter_)) getCountWithId:temp];
  jdouble simProb;
  if (sim2arg == nil) {
    simProb = sumScores / sumWeights;
  }
  else {
    jdouble probArg = JavaLangMath_expWithDouble_([((id<EduStanfordNlpParserLexparserLexicon>) nil_chk(lex_)) scoreWithEduStanfordNlpParserLexparserIntTaggedWord:dep->arg_ withInt:0 withNSString:[((id<EduStanfordNlpUtilIndex>) nil_chk(wordIndex_)) getWithInt:dep->arg_->word_] withNSString:nil]);
    simProb = probArg * sumScores / sumWeights;
  }
  if (simProb == 0) {
    [((EduStanfordNlpStatsClassicCounter *) nil_chk(statsCounter_)) incrementCountWithId:@"simProbZero"];
  }
  if (regProb == 0) {
    [((EduStanfordNlpStatsClassicCounter *) nil_chk(statsCounter_)) incrementCountWithId:@"regProbZero"];
  }
  jdouble smoothProb = (countHead * regProb + simSmooth_ * simProb) / (countHead + simSmooth_);
  if (smoothProb == 0) {
    [((EduStanfordNlpStatsClassicCounter *) nil_chk(statsCounter_)) incrementCountWithId:@"smoothProbZero"];
  }
  return smoothProb;
}

- (NSString *)stringBasicCategoryWithInt:(jint)tag {
  return EduStanfordNlpParserLexparserChineseSimWordAvgDepGrammar_stringBasicCategoryWithInt_(self, tag);
}

- (void)dealloc {
  JreCheckFinalize(self, [EduStanfordNlpParserLexparserChineseSimWordAvgDepGrammar class]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "D", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 9, -1, 10, -1, -1, -1 },
    { NULL, "D", 0x2, 11, 6, -1, -1, -1, -1 },
    { NULL, "D", 0x2, 12, 6, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 13, 14, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpParserLexparserTreebankLangParserParams:withBoolean:withBoolean:withBoolean:withBoolean:withEduStanfordNlpParserLexparserOptions:withEduStanfordNlpUtilIndex:withEduStanfordNlpUtilIndex:);
  methods[1].selector = @selector(getMapWithNSString:);
  methods[2].selector = @selector(scoreTBWithEduStanfordNlpParserLexparserIntDependency:);
  methods[3].selector = @selector(setLexWithEduStanfordNlpParserLexparserLexicon:);
  methods[4].selector = @selector(javaFinalize);
  methods[5].selector = @selector(probTBwithSimWordsWithEduStanfordNlpParserLexparserIntDependency:);
  methods[6].selector = @selector(probSimilarWordAvgWithEduStanfordNlpParserLexparserIntDependency:);
  methods[7].selector = @selector(stringBasicCategoryWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpParserLexparserChineseSimWordAvgDepGrammar_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "simSmooth_", "D", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "argHeadFile", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 15, -1, -1 },
    { "headArgFile", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 16, -1, -1 },
    { "simArgMap_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 17, -1 },
    { "simHeadMap_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 17, -1 },
    { "debug_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "verbose_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "statsCounter_", "LEduStanfordNlpStatsClassicCounter;", .constantValue.asLong = 0, 0x2, -1, -1, 18, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpParserLexparserTreebankLangParserParams;ZZZZLEduStanfordNlpParserLexparserOptions;LEduStanfordNlpUtilIndex;LEduStanfordNlpUtilIndex;", "(Ledu/stanford/nlp/parser/lexparser/TreebankLangParserParams;ZZZZLedu/stanford/nlp/parser/lexparser/Options;Ledu/stanford/nlp/util/Index<Ljava/lang/String;>;Ledu/stanford/nlp/util/Index<Ljava/lang/String;>;)V", "getMap", "LNSString;", "(Ljava/lang/String;)Ljava/util/Map<Ledu/stanford/nlp/util/Pair<Ljava/lang/Integer;Ljava/lang/String;>;Ljava/util/List<Ledu/stanford/nlp/util/Triple<Ljava/lang/Integer;Ljava/lang/String;Ljava/lang/Double;>;>;>;", "scoreTB", "LEduStanfordNlpParserLexparserIntDependency;", "setLex", "LEduStanfordNlpParserLexparserLexicon;", "finalize", "LNSException;", "probTBwithSimWords", "probSimilarWordAvg", "stringBasicCategory", "I", &EduStanfordNlpParserLexparserChineseSimWordAvgDepGrammar_argHeadFile, &EduStanfordNlpParserLexparserChineseSimWordAvgDepGrammar_headArgFile, "Ljava/util/Map<Ledu/stanford/nlp/util/Pair<Ljava/lang/Integer;Ljava/lang/String;>;Ljava/util/List<Ledu/stanford/nlp/util/Triple<Ljava/lang/Integer;Ljava/lang/String;Ljava/lang/Double;>;>;>;", "Ledu/stanford/nlp/stats/ClassicCounter<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpParserLexparserChineseSimWordAvgDepGrammar = { "ChineseSimWordAvgDepGrammar", "edu.stanford.nlp.parser.lexparser", ptrTable, methods, fields, 7, 0x1, 8, 9, -1, -1, -1, -1, -1 };
  return &_EduStanfordNlpParserLexparserChineseSimWordAvgDepGrammar;
}

+ (void)initialize {
  if (self == [EduStanfordNlpParserLexparserChineseSimWordAvgDepGrammar class]) {
    {
      JavaLangSystem_runFinalizersOnExitWithBoolean_(true);
    }
    J2OBJC_SET_INITIALIZED(EduStanfordNlpParserLexparserChineseSimWordAvgDepGrammar)
  }
}

@end

void EduStanfordNlpParserLexparserChineseSimWordAvgDepGrammar_initWithEduStanfordNlpParserLexparserTreebankLangParserParams_withBoolean_withBoolean_withBoolean_withBoolean_withEduStanfordNlpParserLexparserOptions_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(EduStanfordNlpParserLexparserChineseSimWordAvgDepGrammar *self, id<EduStanfordNlpParserLexparserTreebankLangParserParams> tlpParams, jboolean directional, jboolean distance, jboolean coarseDistance, jboolean basicCategoryTagsInDependencyGrammar, EduStanfordNlpParserLexparserOptions *op, id<EduStanfordNlpUtilIndex> wordIndex, id<EduStanfordNlpUtilIndex> tagIndex) {
  EduStanfordNlpParserLexparserMLEDependencyGrammar_initWithEduStanfordNlpParserLexparserTreebankLangParserParams_withBoolean_withBoolean_withBoolean_withBoolean_withEduStanfordNlpParserLexparserOptions_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(self, tlpParams, directional, distance, coarseDistance, basicCategoryTagsInDependencyGrammar, op, wordIndex, tagIndex);
  self->simSmooth_ = 10.0;
  self->debug_ = true;
  self->verbose_ = false;
  self->statsCounter_ = new_EduStanfordNlpStatsClassicCounter_init();
  self->simHeadMap_ = [self getMapWithNSString:EduStanfordNlpParserLexparserChineseSimWordAvgDepGrammar_headArgFile];
  self->simArgMap_ = [self getMapWithNSString:EduStanfordNlpParserLexparserChineseSimWordAvgDepGrammar_argHeadFile];
}

EduStanfordNlpParserLexparserChineseSimWordAvgDepGrammar *new_EduStanfordNlpParserLexparserChineseSimWordAvgDepGrammar_initWithEduStanfordNlpParserLexparserTreebankLangParserParams_withBoolean_withBoolean_withBoolean_withBoolean_withEduStanfordNlpParserLexparserOptions_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(id<EduStanfordNlpParserLexparserTreebankLangParserParams> tlpParams, jboolean directional, jboolean distance, jboolean coarseDistance, jboolean basicCategoryTagsInDependencyGrammar, EduStanfordNlpParserLexparserOptions *op, id<EduStanfordNlpUtilIndex> wordIndex, id<EduStanfordNlpUtilIndex> tagIndex) {
  J2OBJC_NEW_IMPL(EduStanfordNlpParserLexparserChineseSimWordAvgDepGrammar, initWithEduStanfordNlpParserLexparserTreebankLangParserParams_withBoolean_withBoolean_withBoolean_withBoolean_withEduStanfordNlpParserLexparserOptions_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_, tlpParams, directional, distance, coarseDistance, basicCategoryTagsInDependencyGrammar, op, wordIndex, tagIndex)
}

EduStanfordNlpParserLexparserChineseSimWordAvgDepGrammar *create_EduStanfordNlpParserLexparserChineseSimWordAvgDepGrammar_initWithEduStanfordNlpParserLexparserTreebankLangParserParams_withBoolean_withBoolean_withBoolean_withBoolean_withEduStanfordNlpParserLexparserOptions_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(id<EduStanfordNlpParserLexparserTreebankLangParserParams> tlpParams, jboolean directional, jboolean distance, jboolean coarseDistance, jboolean basicCategoryTagsInDependencyGrammar, EduStanfordNlpParserLexparserOptions *op, id<EduStanfordNlpUtilIndex> wordIndex, id<EduStanfordNlpUtilIndex> tagIndex) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpParserLexparserChineseSimWordAvgDepGrammar, initWithEduStanfordNlpParserLexparserTreebankLangParserParams_withBoolean_withBoolean_withBoolean_withBoolean_withEduStanfordNlpParserLexparserOptions_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_, tlpParams, directional, distance, coarseDistance, basicCategoryTagsInDependencyGrammar, op, wordIndex, tagIndex)
}

jdouble EduStanfordNlpParserLexparserChineseSimWordAvgDepGrammar_probTBwithSimWordsWithEduStanfordNlpParserLexparserIntDependency_(EduStanfordNlpParserLexparserChineseSimWordAvgDepGrammar *self, EduStanfordNlpParserLexparserIntDependency *dependency) {
  jboolean leftHeaded = ((EduStanfordNlpParserLexparserIntDependency *) nil_chk(dependency))->leftHeaded_ && self->directional_;
  EduStanfordNlpParserLexparserIntTaggedWord *unknownHead = new_EduStanfordNlpParserLexparserIntTaggedWord_initWithInt_withInt_(-1, ((EduStanfordNlpParserLexparserIntTaggedWord *) nil_chk(dependency->head_))->tag_);
  EduStanfordNlpParserLexparserIntTaggedWord *unknownArg = new_EduStanfordNlpParserLexparserIntTaggedWord_initWithInt_withInt_(-1, ((EduStanfordNlpParserLexparserIntTaggedWord *) nil_chk(dependency->arg_))->tag_);
  if (self->verbose_) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@", @"Generating ", dependency)];
  }
  jshort distance = dependency->distance_;
  jint hW = dependency->head_->word_;
  jint aW = dependency->arg_->word_;
  EduStanfordNlpParserLexparserIntTaggedWord *aTW = dependency->arg_;
  EduStanfordNlpParserLexparserIntTaggedWord *hTW = dependency->head_;
  jdouble pb_stop_hTWds = [self getStopProbWithEduStanfordNlpParserLexparserIntDependency:dependency];
  jboolean isRoot = [self rootTWWithEduStanfordNlpParserLexparserIntTaggedWord:dependency->head_];
  if (dependency->arg_->word_ == -2) {
    if (isRoot) {
      return 0.0;
    }
    return pb_stop_hTWds;
  }
  jdouble pb_go_hTWds = 1.0 - pb_stop_hTWds;
  if (isRoot) {
    pb_go_hTWds = 1.0;
  }
  jint valenceBinDistance = [self valenceBinWithInt:distance];
  EduStanfordNlpParserLexparserIntDependency *temp = new_EduStanfordNlpParserLexparserIntDependency_initWithEduStanfordNlpParserLexparserIntTaggedWord_withEduStanfordNlpParserLexparserIntTaggedWord_withBoolean_withInt_(dependency->head_, dependency->arg_, leftHeaded, valenceBinDistance);
  jdouble c_aTW_hTWd = [((EduStanfordNlpStatsClassicCounter *) nil_chk(self->argCounter_)) getCountWithId:temp];
  temp = new_EduStanfordNlpParserLexparserIntDependency_initWithEduStanfordNlpParserLexparserIntTaggedWord_withEduStanfordNlpParserLexparserIntTaggedWord_withBoolean_withInt_(dependency->head_, unknownArg, leftHeaded, valenceBinDistance);
  jdouble c_aT_hTWd = [((EduStanfordNlpStatsClassicCounter *) nil_chk(self->argCounter_)) getCountWithId:temp];
  temp = new_EduStanfordNlpParserLexparserIntDependency_initWithEduStanfordNlpParserLexparserIntTaggedWord_withEduStanfordNlpParserLexparserIntTaggedWord_withBoolean_withInt_(dependency->head_, self->wildTW_, leftHeaded, valenceBinDistance);
  jdouble c_hTWd = [((EduStanfordNlpStatsClassicCounter *) nil_chk(self->argCounter_)) getCountWithId:temp];
  temp = new_EduStanfordNlpParserLexparserIntDependency_initWithEduStanfordNlpParserLexparserIntTaggedWord_withEduStanfordNlpParserLexparserIntTaggedWord_withBoolean_withInt_(unknownHead, dependency->arg_, leftHeaded, valenceBinDistance);
  jdouble c_aTW_hTd = [((EduStanfordNlpStatsClassicCounter *) nil_chk(self->argCounter_)) getCountWithId:temp];
  temp = new_EduStanfordNlpParserLexparserIntDependency_initWithEduStanfordNlpParserLexparserIntTaggedWord_withEduStanfordNlpParserLexparserIntTaggedWord_withBoolean_withInt_(unknownHead, unknownArg, leftHeaded, valenceBinDistance);
  jdouble c_aT_hTd = [((EduStanfordNlpStatsClassicCounter *) nil_chk(self->argCounter_)) getCountWithId:temp];
  temp = new_EduStanfordNlpParserLexparserIntDependency_initWithEduStanfordNlpParserLexparserIntTaggedWord_withEduStanfordNlpParserLexparserIntTaggedWord_withBoolean_withInt_(unknownHead, self->wildTW_, leftHeaded, valenceBinDistance);
  jdouble c_hTd = [((EduStanfordNlpStatsClassicCounter *) nil_chk(self->argCounter_)) getCountWithId:temp];
  temp = new_EduStanfordNlpParserLexparserIntDependency_initWithEduStanfordNlpParserLexparserIntTaggedWord_withEduStanfordNlpParserLexparserIntTaggedWord_withBoolean_withInt_(self->wildTW_, dependency->arg_, false, -1);
  jdouble c_aTW = [((EduStanfordNlpStatsClassicCounter *) nil_chk(self->argCounter_)) getCountWithId:temp];
  temp = new_EduStanfordNlpParserLexparserIntDependency_initWithEduStanfordNlpParserLexparserIntTaggedWord_withEduStanfordNlpParserLexparserIntTaggedWord_withBoolean_withInt_(self->wildTW_, unknownArg, false, -1);
  jdouble c_aT = [((EduStanfordNlpStatsClassicCounter *) nil_chk(self->argCounter_)) getCountWithId:temp];
  jdouble p_aTW_hTd = (c_hTd > 0.0 ? c_aTW_hTd / c_hTd : 0.0);
  jdouble p_aT_hTd = (c_hTd > 0.0 ? c_aT_hTd / c_hTd : 0.0);
  jdouble p_aTW_aT = (c_aTW > 0.0 ? c_aTW / c_aT : 1.0);
  jdouble pb_aTW_hTWd;
  jdouble pb_aT_hTWd = (c_aT_hTWd + self->smooth_aT_hTWd_ * p_aT_hTd) / (c_hTWd + self->smooth_aT_hTWd_);
  jdouble score;
  id<JavaUtilList> sim2head = nil;
  id<JavaUtilList> sim2arg = nil;
  sim2arg = [((id<JavaUtilMap>) nil_chk(self->simArgMap_)) getWithId:new_EduStanfordNlpUtilPair_initWithId_withId_(JavaLangInteger_valueOfWithInt_(dependency->arg_->word_), EduStanfordNlpParserLexparserChineseSimWordAvgDepGrammar_stringBasicCategoryWithInt_(self, dependency->arg_->tag_))];
  sim2head = [((id<JavaUtilMap>) nil_chk(self->simHeadMap_)) getWithId:new_EduStanfordNlpUtilPair_initWithId_withId_(JavaLangInteger_valueOfWithInt_(dependency->head_->word_), EduStanfordNlpParserLexparserChineseSimWordAvgDepGrammar_stringBasicCategoryWithInt_(self, dependency->head_->tag_))];
  id<JavaUtilList> simArg = new_JavaUtilArrayList_init();
  id<JavaUtilList> simHead = new_JavaUtilArrayList_init();
  if (sim2arg != nil) {
    for (EduStanfordNlpUtilTriple * __strong t in sim2arg) {
      [simArg addWithId:((EduStanfordNlpUtilTriple *) nil_chk(t))->first_];
    }
  }
  if (sim2head != nil) {
    for (EduStanfordNlpUtilTriple * __strong t in sim2head) {
      [simHead addWithId:((EduStanfordNlpUtilTriple *) nil_chk(t))->first_];
    }
  }
  jdouble cSim_aTW_hTd = 0;
  jdouble cSim_hTd = 0;
  for (JavaLangInteger *boxed__ in simHead) {
    jint h = [((JavaLangInteger *) nil_chk(boxed__)) intValue];
    EduStanfordNlpParserLexparserIntTaggedWord *hWord = new_EduStanfordNlpParserLexparserIntTaggedWord_initWithInt_withInt_(h, dependency->head_->tag_);
    temp = new_EduStanfordNlpParserLexparserIntDependency_initWithEduStanfordNlpParserLexparserIntTaggedWord_withEduStanfordNlpParserLexparserIntTaggedWord_withBoolean_withInt_(hWord, dependency->arg_, dependency->leftHeaded_, dependency->distance_);
    JrePlusAssignDoubleD(&cSim_aTW_hTd, [((EduStanfordNlpStatsClassicCounter *) nil_chk(self->argCounter_)) getCountWithId:temp]);
    temp = new_EduStanfordNlpParserLexparserIntDependency_initWithEduStanfordNlpParserLexparserIntTaggedWord_withEduStanfordNlpParserLexparserIntTaggedWord_withBoolean_withInt_(hWord, self->wildTW_, dependency->leftHeaded_, dependency->distance_);
    JrePlusAssignDoubleD(&cSim_hTd, [((EduStanfordNlpStatsClassicCounter *) nil_chk(self->argCounter_)) getCountWithId:temp]);
  }
  jdouble pSim_aTW_hTd = (cSim_hTd > 0.0 ? cSim_aTW_hTd / cSim_hTd : 0.0);
  if (self->debug_) {
    if (pSim_aTW_hTd > 0.0) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("@CD", dependency, 0x0009, pSim_aTW_hTd)];
    }
  }
  jdouble smoothSim_aTW_hTWd = 17.7;
  jdouble smooth_aTW_hTWd = 17.7 * 2;
  pb_aTW_hTWd = (c_aTW_hTWd + smoothSim_aTW_hTWd * pSim_aTW_hTd + smooth_aTW_hTWd * p_aTW_hTd) / (c_hTWd + smoothSim_aTW_hTWd + smooth_aTW_hTWd);
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithId:dependency];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("D$D$D$D$D", c_aTW_hTWd, @" + ", smoothSim_aTW_hTWd, @" * ", pSim_aTW_hTd, @" + ", smooth_aTW_hTWd, @" * ", p_aTW_hTd)];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$D", @"--------------------------------  = ", pb_aTW_hTWd)];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("D$D$D", c_hTWd, @" + ", smoothSim_aTW_hTWd, @" + ", smooth_aTW_hTWd)];
  [JreLoadStatic(JavaLangSystem, out) println];
  score = (self->interp_ * pb_aTW_hTWd + (1.0 - self->interp_) * p_aTW_aT * pb_aT_hTWd) * pb_go_hTWds;
  if (self->verbose_) {
    JavaTextNumberFormat *nf = JavaTextNumberFormat_getNumberInstance();
    [((JavaTextNumberFormat *) nil_chk(nf)) setMaximumFractionDigitsWithInt:2];
    [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$D$D$D", @"  c_aTW_hTWd: ", c_aTW_hTWd, @"; c_aT_hTWd: ", c_aT_hTWd, @"; c_hTWd: ", c_hTWd)];
    [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$D$D$D", @"  c_aTW_hTd: ", c_aTW_hTd, @"; c_aT_hTd: ", c_aT_hTd, @"; c_hTd: ", c_hTd)];
    [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$$$$$$$$", @"  Generated with pb_go_hTWds: ", [nf formatWithDouble:pb_go_hTWds], @" pb_aTW_hTWd: ", [nf formatWithDouble:pb_aTW_hTWd], @" p_aTW_aT: ", [nf formatWithDouble:p_aTW_aT], @" pb_aT_hTWd: ", [nf formatWithDouble:pb_aT_hTWd])];
    [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$D", @"  NoDist score: ", score)];
  }
  if (((EduStanfordNlpParserLexparserTestOptions *) nil_chk(((EduStanfordNlpParserLexparserOptions *) nil_chk(self->op_))->testOptions_))->prunePunc_ && [self pruneTWWithEduStanfordNlpParserLexparserIntTaggedWord:aTW]) {
    return 1.0;
  }
  if (JavaLangDouble_isNaNWithDouble_(score)) {
    score = 0.0;
  }
  if (score < EduStanfordNlpParserLexparserMLEDependencyGrammar_MIN_PROBABILITY) {
    score = 0.0;
  }
  return score;
}

NSString *EduStanfordNlpParserLexparserChineseSimWordAvgDepGrammar_stringBasicCategoryWithInt_(EduStanfordNlpParserLexparserChineseSimWordAvgDepGrammar *self, jint tag) {
  return [((id<EduStanfordNlpTreesTreebankLanguagePack>) nil_chk(self->tlp_)) basicCategoryWithNSString:[((id<EduStanfordNlpUtilIndex>) nil_chk(self->tagIndex_)) getWithInt:tag]];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpParserLexparserChineseSimWordAvgDepGrammar)
