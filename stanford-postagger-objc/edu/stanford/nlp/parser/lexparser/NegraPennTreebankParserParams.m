//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/parser/lexparser/NegraPennTreebankParserParams.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/ling/CategoryWordTag.h"
#include "edu/stanford/nlp/ling/CoreLabel.h"
#include "edu/stanford/nlp/ling/Label.h"
#include "edu/stanford/nlp/ling/Sentence.h"
#include "edu/stanford/nlp/parser/lexparser/AbstractTreebankParserParams.h"
#include "edu/stanford/nlp/parser/lexparser/BaseLexicon.h"
#include "edu/stanford/nlp/parser/lexparser/Lexicon.h"
#include "edu/stanford/nlp/parser/lexparser/NegraPennCollinizer.h"
#include "edu/stanford/nlp/parser/lexparser/NegraPennTreebankParserParams.h"
#include "edu/stanford/nlp/parser/lexparser/Options.h"
#include "edu/stanford/nlp/trees/DiskTreebank.h"
#include "edu/stanford/nlp/trees/HeadFinder.h"
#include "edu/stanford/nlp/trees/MemoryTreebank.h"
#include "edu/stanford/nlp/trees/Tree.h"
#include "edu/stanford/nlp/trees/TreeReaderFactory.h"
#include "edu/stanford/nlp/trees/TreeTransformer.h"
#include "edu/stanford/nlp/trees/TreebankLanguagePack.h"
#include "edu/stanford/nlp/trees/international/negra/NegraHeadFinder.h"
#include "edu/stanford/nlp/trees/international/negra/NegraLabel.h"
#include "edu/stanford/nlp/trees/international/negra/NegraPennLanguagePack.h"
#include "edu/stanford/nlp/trees/international/negra/NegraPennTreeReaderFactory.h"
#include "edu/stanford/nlp/util/Index.h"
#include "java/io/PrintStream.h"
#include "java/lang/Boolean.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"

@interface EduStanfordNlpParserLexparserNegraPennTreebankParserParams () {
 @public
  jboolean markRC_;
  jboolean markZuVP_;
  jboolean markLP_;
  jboolean markColon_;
  jboolean markKonjParent_;
  jboolean markHDParent_;
  jboolean markContainsV_;
  jint nodeCleanup_;
  id<EduStanfordNlpTreesHeadFinder> headFinder_;
  jboolean treeNormalizerInsertNPinPP_;
  jboolean treeNormalizerLeaveGF_;
  EduStanfordNlpTreesInternationalNegraNegraPennTreeReaderFactory *treeReaderFactory_;
}

- (NSString *)basicCatWithNSString:(NSString *)str;

+ (jboolean)leftPhrasalWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t;

- (jboolean)containsVPWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t;

- (id<JavaUtilList>)childBasicCatsWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t;

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserNegraPennTreebankParserParams, headFinder_, id<EduStanfordNlpTreesHeadFinder>)
J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserNegraPennTreebankParserParams, treeReaderFactory_, EduStanfordNlpTreesInternationalNegraNegraPennTreeReaderFactory *)

inline jlong EduStanfordNlpParserLexparserNegraPennTreebankParserParams_get_serialVersionUID();
#define EduStanfordNlpParserLexparserNegraPennTreebankParserParams_serialVersionUID 757812264219400466LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpParserLexparserNegraPennTreebankParserParams, serialVersionUID, jlong)

inline jboolean EduStanfordNlpParserLexparserNegraPennTreebankParserParams_get_DEBUG();
#define EduStanfordNlpParserLexparserNegraPennTreebankParserParams_DEBUG false
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpParserLexparserNegraPennTreebankParserParams, DEBUG, jboolean)

inline jboolean EduStanfordNlpParserLexparserNegraPennTreebankParserParams_get_defaultLeaveGF();
#define EduStanfordNlpParserLexparserNegraPennTreebankParserParams_defaultLeaveGF false
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpParserLexparserNegraPennTreebankParserParams, defaultLeaveGF, jboolean)

inline jchar EduStanfordNlpParserLexparserNegraPennTreebankParserParams_get_defaultGFCharacter();
#define EduStanfordNlpParserLexparserNegraPennTreebankParserParams_defaultGFCharacter '-'
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpParserLexparserNegraPennTreebankParserParams, defaultGFCharacter, jchar)

__attribute__((unused)) static NSString *EduStanfordNlpParserLexparserNegraPennTreebankParserParams_basicCatWithNSString_(EduStanfordNlpParserLexparserNegraPennTreebankParserParams *self, NSString *str);

__attribute__((unused)) static jboolean EduStanfordNlpParserLexparserNegraPennTreebankParserParams_leftPhrasalWithEduStanfordNlpTreesTree_(EduStanfordNlpTreesTree *t);

__attribute__((unused)) static jboolean EduStanfordNlpParserLexparserNegraPennTreebankParserParams_containsVPWithEduStanfordNlpTreesTree_(EduStanfordNlpParserLexparserNegraPennTreebankParserParams *self, EduStanfordNlpTreesTree *t);

__attribute__((unused)) static id<JavaUtilList> EduStanfordNlpParserLexparserNegraPennTreebankParserParams_childBasicCatsWithEduStanfordNlpTreesTree_(EduStanfordNlpParserLexparserNegraPennTreebankParserParams *self, EduStanfordNlpTreesTree *t);

@implementation EduStanfordNlpParserLexparserNegraPennTreebankParserParams

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpParserLexparserNegraPennTreebankParserParams_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<EduStanfordNlpTreesHeadFinder>)headFinder {
  return headFinder_;
}

- (id<EduStanfordNlpTreesHeadFinder>)typedDependencyHeadFinder {
  return [self headFinder];
}

- (id<EduStanfordNlpParserLexparserLexicon>)lexWithEduStanfordNlpParserLexparserOptions:(EduStanfordNlpParserLexparserOptions *)op
                                                            withEduStanfordNlpUtilIndex:(id<EduStanfordNlpUtilIndex>)wordIndex
                                                            withEduStanfordNlpUtilIndex:(id<EduStanfordNlpUtilIndex>)tagIndex {
  if (((EduStanfordNlpParserLexparserOptions_LexOptions *) nil_chk(((EduStanfordNlpParserLexparserOptions *) nil_chk(op))->lexOptions_))->uwModelTrainer_ == nil) {
    op->lexOptions_->uwModelTrainer_ = @"edu.stanford.nlp.parser.lexparser.GermanUnknownWordModelTrainer";
  }
  return new_EduStanfordNlpParserLexparserBaseLexicon_initWithEduStanfordNlpParserLexparserOptions_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(op, wordIndex, tagIndex);
}

- (id<EduStanfordNlpTreesTreeReaderFactory>)treeReaderFactory {
  if (treeReaderFactory_ == nil) treeReaderFactory_ = new_EduStanfordNlpTreesInternationalNegraNegraPennTreeReaderFactory_initWithInt_withBoolean_withBoolean_withEduStanfordNlpTreesTreebankLanguagePack_(nodeCleanup_, treeNormalizerInsertNPinPP_, treeNormalizerLeaveGF_, [self treebankLanguagePack]);
  return treeReaderFactory_;
}

- (EduStanfordNlpTreesMemoryTreebank *)memoryTreebank {
  return new_EduStanfordNlpTreesMemoryTreebank_initWithEduStanfordNlpTreesTreeReaderFactory_withNSString_([self treeReaderFactory], inputEncoding_);
}

- (EduStanfordNlpTreesDiskTreebank *)diskTreebank {
  return new_EduStanfordNlpTreesDiskTreebank_initWithEduStanfordNlpTreesTreeReaderFactory_withNSString_([self treeReaderFactory], inputEncoding_);
}

- (id<EduStanfordNlpTreesTreeTransformer>)collinizer {
  return new_EduStanfordNlpParserLexparserNegraPennCollinizer_initWithEduStanfordNlpParserLexparserTreebankLangParserParams_(self);
}

- (id<EduStanfordNlpTreesTreeTransformer>)collinizerEvalb {
  return new_EduStanfordNlpParserLexparserNegraPennCollinizer_initWithEduStanfordNlpParserLexparserTreebankLangParserParams_withBoolean_(self, false);
}

- (IOSObjectArray *)sisterSplitters {
  return [IOSObjectArray newArrayWithLength:0 type:NSString_class_()];
}

- (jint)setOptionFlagWithNSStringArray:(IOSObjectArray *)args
                               withInt:(jint)i {
  if ([((NSString *) nil_chk(IOSObjectArray_Get(nil_chk(args), i))) equalsIgnoreCase:@"-nodeCleanup"]) {
    nodeCleanup_ = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, i + 1));
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-leaveGF"]) {
    [((EduStanfordNlpTreesInternationalNegraNegraPennLanguagePack *) nil_chk(((EduStanfordNlpTreesInternationalNegraNegraPennLanguagePack *) cast_chk([self treebankLanguagePack], [EduStanfordNlpTreesInternationalNegraNegraPennLanguagePack class])))) setLeaveGFWithBoolean:true];
    treeNormalizerLeaveGF_ = true;
    i++;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-gfCharacter"]) {
    NSString *gfChar = IOSObjectArray_Get(args, i + 1);
    if (((jint) [((NSString *) nil_chk(gfChar)) length]) > 1) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"Warning! gfCharacter argument ignored; must specify a character, not a String"];
    [((id<EduStanfordNlpTreesTreebankLanguagePack>) nil_chk([self treebankLanguagePack])) setGfCharacterWithChar:[gfChar charAtWithInt:0]];
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-markZuVP"]) {
    markZuVP_ = true;
    i++;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-markRC"]) {
    markRC_ = true;
    i++;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-insertNPinPP"]) {
    treeNormalizerInsertNPinPP_ = true;
    i++;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-markLP"]) {
    markLP_ = true;
    i++;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-markColon"]) {
    markColon_ = true;
    i++;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-markKonjParent"]) {
    markKonjParent_ = true;
    i++;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-markHDParent"]) {
    markHDParent_ = true;
    i++;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-markContainsV"]) {
    markContainsV_ = true;
    i++;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-evalGF"]) {
    [self setEvalGFWithBoolean:JavaLangBoolean_parseBooleanWithNSString_(IOSObjectArray_Get(args, i + 1))];
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-headFinder"] && (i + 1 < args->size_)) {
    @try {
      headFinder_ = (id<EduStanfordNlpTreesHeadFinder>) cast_check([((IOSClass *) nil_chk(IOSClass_forName_(IOSObjectArray_Get(args, i + 1)))) newInstance], EduStanfordNlpTreesHeadFinder_class_());
    }
    @catch (JavaLangException *e) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithId:e];
      [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:JreStrcat("$$$", [[self getClass] getName], @": Could not load head finder ", IOSObjectArray_Get(args, i + 1))];
    }
    i += 2;
  }
  return i;
}

- (void)display {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"NegraPennTreebankParserParams"];
  [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:JreStrcat("$Z", @"  markZuVP=", markZuVP_)];
  [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:JreStrcat("$Z", @"  insertNPinPP=", treeNormalizerInsertNPinPP_)];
  [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:JreStrcat("$Z", @"  leaveGF=", treeNormalizerLeaveGF_)];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$Z", @"markLP=", markLP_)];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$Z", @"markColon=", markColon_)];
}

- (NSString *)basicCatWithNSString:(NSString *)str {
  return EduStanfordNlpParserLexparserNegraPennTreebankParserParams_basicCatWithNSString_(self, str);
}

- (EduStanfordNlpTreesTree *)transformTreeWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
                                          withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)root {
  if (t == nil || [t isLeaf]) {
    return t;
  }
  id<JavaUtilList> annotations = new_JavaUtilArrayList_init();
  EduStanfordNlpLingCoreLabel *lab = (EduStanfordNlpLingCoreLabel *) cast_chk([t label], [EduStanfordNlpLingCoreLabel class]);
  NSString *word = [((EduStanfordNlpLingCoreLabel *) nil_chk(lab)) word];
  NSString *tag = [lab tag];
  NSString *cat = [lab value];
  NSString *baseCat = [((id<EduStanfordNlpTreesTreebankLanguagePack>) nil_chk([self treebankLanguagePack])) basicCategoryWithNSString:cat];
  if ([t isPhrasal]) {
    id<JavaUtilList> childBasicCats = EduStanfordNlpParserLexparserNegraPennTreebankParserParams_childBasicCatsWithEduStanfordNlpTreesTree_(self, t);
    if (markZuVP_ && [((NSString *) nil_chk(baseCat)) isEqual:@"VP"] && ([((id<JavaUtilList>) nil_chk(childBasicCats)) containsWithId:@"VZ"] || [childBasicCats containsWithId:@"VVIZU"])) {
      [annotations addWithId:@"%ZU"];
    }
    if (markRC_ && ([[t label] isKindOfClass:[EduStanfordNlpTreesInternationalNegraNegraLabel class]]) && [((NSString *) nil_chk(baseCat)) isEqual:@"S"] && [((EduStanfordNlpTreesInternationalNegraNegraLabel *) nil_chk(((EduStanfordNlpTreesInternationalNegraNegraLabel *) cast_chk([t label], [EduStanfordNlpTreesInternationalNegraNegraLabel class])))) getEdge] != nil && [((NSString *) nil_chk([((EduStanfordNlpTreesInternationalNegraNegraLabel *) nil_chk(((EduStanfordNlpTreesInternationalNegraNegraLabel *) cast_chk([t label], [EduStanfordNlpTreesInternationalNegraNegraLabel class])))) getEdge])) isEqual:@"RC"]) {
      [annotations addWithId:@"%RC"];
    }
    if (markContainsV_ && EduStanfordNlpParserLexparserNegraPennTreebankParserParams_containsVPWithEduStanfordNlpTreesTree_(self, t)) {
      [annotations addWithId:@"%vp"];
    }
    if (markLP_ && EduStanfordNlpParserLexparserNegraPennTreebankParserParams_leftPhrasalWithEduStanfordNlpTreesTree_(t)) {
      [annotations addWithId:@"%LP"];
    }
    if (markKonjParent_) {
      for (NSString * __strong cCat in nil_chk(childBasicCats)) {
        if ([((NSString *) nil_chk(cCat)) contains:@"-KONJ"]) {
          [annotations addWithId:@"%konjp"];
          break;
        }
      }
    }
    if (markHDParent_) {
      for (NSString * __strong cCat in nil_chk(childBasicCats)) {
        if ([((NSString *) nil_chk(cCat)) contains:@"-HD"]) {
          [annotations addWithId:@"%hdp"];
          break;
        }
      }
    }
  }
  else {
    if (markColon_ && [((NSString *) nil_chk(cat)) isEqual:@"$."] && ([((NSString *) nil_chk(word)) isEqual:@":"] || [word isEqual:@";"])) {
      [annotations addWithId:@"-%colon"];
    }
  }
  JavaLangStringBuilder *catSB = new_JavaLangStringBuilder_initWithNSString_(cat);
  for (NSString * __strong annotation in annotations) {
    (void) [catSB appendWithNSString:annotation];
  }
  [t setLabelWithEduStanfordNlpLingLabel:new_EduStanfordNlpLingCategoryWordTag_initWithNSString_withNSString_withNSString_([catSB description], word, tag)];
  return t;
}

+ (jboolean)leftPhrasalWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t {
  return EduStanfordNlpParserLexparserNegraPennTreebankParserParams_leftPhrasalWithEduStanfordNlpTreesTree_(t);
}

- (jboolean)containsVPWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t {
  return EduStanfordNlpParserLexparserNegraPennTreebankParserParams_containsVPWithEduStanfordNlpTreesTree_(self, t);
}

- (id<JavaUtilList>)childBasicCatsWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t {
  return EduStanfordNlpParserLexparserNegraPennTreebankParserParams_childBasicCatsWithEduStanfordNlpTreesTree_(self, t);
}

- (id<JavaUtilList>)defaultTestSentence {
  IOSObjectArray *sent = [IOSObjectArray newArrayWithObjects:(id[]){ @"Solch", @"einen", @"Zuspruch", @"hat", @"Angela", @"Merkel", @"lange", @"nicht", @"mehr", @"erlebt", @"." } count:11 type:NSString_class_()];
  return EduStanfordNlpLingSentence_toWordListWithNSStringArray_(sent);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesHeadFinder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesHeadFinder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpParserLexparserLexicon;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTreeReaderFactory;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesMemoryTreebank;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesDiskTreebank;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTreeTransformer;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTreeTransformer;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 5, 6, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 9, 10, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 11, 10, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x2, 12, 10, -1, 13, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 14, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(headFinder);
  methods[2].selector = @selector(typedDependencyHeadFinder);
  methods[3].selector = @selector(lexWithEduStanfordNlpParserLexparserOptions:withEduStanfordNlpUtilIndex:withEduStanfordNlpUtilIndex:);
  methods[4].selector = @selector(treeReaderFactory);
  methods[5].selector = @selector(memoryTreebank);
  methods[6].selector = @selector(diskTreebank);
  methods[7].selector = @selector(collinizer);
  methods[8].selector = @selector(collinizerEvalb);
  methods[9].selector = @selector(sisterSplitters);
  methods[10].selector = @selector(setOptionFlagWithNSStringArray:withInt:);
  methods[11].selector = @selector(display);
  methods[12].selector = @selector(basicCatWithNSString:);
  methods[13].selector = @selector(transformTreeWithEduStanfordNlpTreesTree:withEduStanfordNlpTreesTree:);
  methods[14].selector = @selector(leftPhrasalWithEduStanfordNlpTreesTree:);
  methods[15].selector = @selector(containsVPWithEduStanfordNlpTreesTree:);
  methods[16].selector = @selector(childBasicCatsWithEduStanfordNlpTreesTree:);
  methods[17].selector = @selector(defaultTestSentence);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpParserLexparserNegraPennTreebankParserParams_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "DEBUG", "Z", .constantValue.asBOOL = EduStanfordNlpParserLexparserNegraPennTreebankParserParams_DEBUG, 0x1a, -1, -1, -1, -1 },
    { "markRC_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "markZuVP_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "markLP_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "markColon_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "markKonjParent_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "markHDParent_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "markContainsV_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "defaultLeaveGF", "Z", .constantValue.asBOOL = EduStanfordNlpParserLexparserNegraPennTreebankParserParams_defaultLeaveGF, 0x1a, -1, -1, -1, -1 },
    { "defaultGFCharacter", "C", .constantValue.asUnichar = EduStanfordNlpParserLexparserNegraPennTreebankParserParams_defaultGFCharacter, 0x1a, -1, -1, -1, -1 },
    { "nodeCleanup_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "headFinder_", "LEduStanfordNlpTreesHeadFinder;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "treeNormalizerInsertNPinPP_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "treeNormalizerLeaveGF_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "treeReaderFactory_", "LEduStanfordNlpTreesInternationalNegraNegraPennTreeReaderFactory;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "lex", "LEduStanfordNlpParserLexparserOptions;LEduStanfordNlpUtilIndex;LEduStanfordNlpUtilIndex;", "(Ledu/stanford/nlp/parser/lexparser/Options;Ledu/stanford/nlp/util/Index<Ljava/lang/String;>;Ledu/stanford/nlp/util/Index<Ljava/lang/String;>;)Ledu/stanford/nlp/parser/lexparser/Lexicon;", "setOptionFlag", "[LNSString;I", "basicCat", "LNSString;", "transformTree", "LEduStanfordNlpTreesTree;LEduStanfordNlpTreesTree;", "leftPhrasal", "LEduStanfordNlpTreesTree;", "containsVP", "childBasicCats", "(Ledu/stanford/nlp/trees/Tree;)Ljava/util/List<Ljava/lang/String;>;", "()Ljava/util/List<+Ledu/stanford/nlp/ling/HasWord;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpParserLexparserNegraPennTreebankParserParams = { "NegraPennTreebankParserParams", "edu.stanford.nlp.parser.lexparser", ptrTable, methods, fields, 7, 0x1, 18, 16, -1, -1, -1, -1, -1 };
  return &_EduStanfordNlpParserLexparserNegraPennTreebankParserParams;
}

@end

void EduStanfordNlpParserLexparserNegraPennTreebankParserParams_init(EduStanfordNlpParserLexparserNegraPennTreebankParserParams *self) {
  EduStanfordNlpParserLexparserAbstractTreebankParserParams_initWithEduStanfordNlpTreesTreebankLanguagePack_(self, new_EduStanfordNlpTreesInternationalNegraNegraPennLanguagePack_initWithBoolean_withChar_(EduStanfordNlpParserLexparserNegraPennTreebankParserParams_defaultLeaveGF, EduStanfordNlpParserLexparserNegraPennTreebankParserParams_defaultGFCharacter));
  self->markRC_ = false;
  self->markZuVP_ = false;
  self->markLP_ = false;
  self->markColon_ = false;
  self->markKonjParent_ = false;
  self->markHDParent_ = false;
  self->markContainsV_ = false;
  self->nodeCleanup_ = 2;
  self->treeNormalizerInsertNPinPP_ = false;
  self->treeNormalizerLeaveGF_ = false;
  self->headFinder_ = new_EduStanfordNlpTreesInternationalNegraNegraHeadFinder_init();
  [self setOutputEncodingWithNSString:@"UTF-8"];
}

EduStanfordNlpParserLexparserNegraPennTreebankParserParams *new_EduStanfordNlpParserLexparserNegraPennTreebankParserParams_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpParserLexparserNegraPennTreebankParserParams, init)
}

EduStanfordNlpParserLexparserNegraPennTreebankParserParams *create_EduStanfordNlpParserLexparserNegraPennTreebankParserParams_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpParserLexparserNegraPennTreebankParserParams, init)
}

NSString *EduStanfordNlpParserLexparserNegraPennTreebankParserParams_basicCatWithNSString_(EduStanfordNlpParserLexparserNegraPennTreebankParserParams *self, NSString *str) {
  return [((id<EduStanfordNlpTreesTreebankLanguagePack>) nil_chk([self treebankLanguagePack])) basicCategoryWithNSString:str];
}

jboolean EduStanfordNlpParserLexparserNegraPennTreebankParserParams_leftPhrasalWithEduStanfordNlpTreesTree_(EduStanfordNlpTreesTree *t) {
  EduStanfordNlpParserLexparserNegraPennTreebankParserParams_initialize();
  while (![((EduStanfordNlpTreesTree *) nil_chk(t)) isLeaf]) {
    t = [t lastChild];
    NSString *str = [((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(t)) label])) value];
    if ([((NSString *) nil_chk(str)) hasPrefix:@"NP"] || [str hasPrefix:@"PP"] || [str hasPrefix:@"VP"] || [str hasPrefix:@"S"] || [str hasPrefix:@"Q"] || [str hasPrefix:@"A"]) {
      return true;
    }
  }
  return false;
}

jboolean EduStanfordNlpParserLexparserNegraPennTreebankParserParams_containsVPWithEduStanfordNlpTreesTree_(EduStanfordNlpParserLexparserNegraPennTreebankParserParams *self, EduStanfordNlpTreesTree *t) {
  NSString *cat = [((id<EduStanfordNlpTreesTreebankLanguagePack>) nil_chk(self->tlp_)) basicCategoryWithNSString:[((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(t)) label])) value]];
  if ([((NSString *) nil_chk(cat)) hasPrefix:@"V"]) {
    return true;
  }
  else {
    IOSObjectArray *kids = [t children];
    {
      IOSObjectArray *a__ = kids;
      EduStanfordNlpTreesTree * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        EduStanfordNlpTreesTree *kid = *b__++;
        if (EduStanfordNlpParserLexparserNegraPennTreebankParserParams_containsVPWithEduStanfordNlpTreesTree_(self, kid)) {
          return true;
        }
      }
    }
    return false;
  }
}

id<JavaUtilList> EduStanfordNlpParserLexparserNegraPennTreebankParserParams_childBasicCatsWithEduStanfordNlpTreesTree_(EduStanfordNlpParserLexparserNegraPennTreebankParserParams *self, EduStanfordNlpTreesTree *t) {
  IOSObjectArray *kids = [((EduStanfordNlpTreesTree *) nil_chk(t)) children];
  id<JavaUtilList> l = new_JavaUtilArrayList_init();
  {
    IOSObjectArray *a__ = kids;
    EduStanfordNlpTreesTree * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      EduStanfordNlpTreesTree *kid = *b__++;
      [l addWithId:EduStanfordNlpParserLexparserNegraPennTreebankParserParams_basicCatWithNSString_(self, [((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(kid)) label])) value])];
    }
  }
  return l;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpParserLexparserNegraPennTreebankParserParams)
