//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/parser/lexparser/ChineseCharacterBasedLexicon.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/ling/TaggedWord.h"
#include "edu/stanford/nlp/parser/lexparser/ChineseCharacterBasedLexicon.h"
#include "edu/stanford/nlp/parser/lexparser/ChineseTreebankParserParams.h"
#include "edu/stanford/nlp/parser/lexparser/IntTaggedWord.h"
#include "edu/stanford/nlp/parser/lexparser/Interner.h"
#include "edu/stanford/nlp/parser/lexparser/Lexicon.h"
#include "edu/stanford/nlp/parser/lexparser/UnknownWordModel.h"
#include "edu/stanford/nlp/stats/ClassicCounter.h"
#include "edu/stanford/nlp/stats/Counters.h"
#include "edu/stanford/nlp/stats/Distribution.h"
#include "edu/stanford/nlp/stats/GeneralizedCounter.h"
#include "edu/stanford/nlp/trees/Tree.h"
#include "edu/stanford/nlp/trees/international/pennchinese/RadicalMap.h"
#include "edu/stanford/nlp/util/Generics.h"
#include "edu/stanford/nlp/util/Index.h"
#include "edu/stanford/nlp/util/Timing.h"
#include "java/io/BufferedReader.h"
#include "java/io/InvalidObjectException.h"
#include "java/io/PrintStream.h"
#include "java/io/Serializable.h"
#include "java/io/Writer.h"
#include "java/lang/Character.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/function/Function.h"

@interface EduStanfordNlpParserLexparserChineseCharacterBasedLexicon () {
 @public
  jdouble lengthPenalty_;
  jint penaltyType_;
  id<JavaUtilMap> charDistributions_;
  id<JavaUtilSet> knownChars_;
  EduStanfordNlpStatsDistribution *POSDistribution_;
  jboolean useUnknownCharacterModel_;
  id<EduStanfordNlpUtilIndex> wordIndex_;
  id<EduStanfordNlpUtilIndex> tagIndex_;
  id<JavaUtilList> trainingSentences_;
}

- (EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol *)unknownCharClassWithEduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol:(EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol *)ch;

- (EduStanfordNlpStatsDistribution *)getBackedOffDistWithJavaUtilList:(id<JavaUtilList>)context;

- (EduStanfordNlpStatsDistribution *)getWordLengthDistribution;

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserChineseCharacterBasedLexicon, charDistributions_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserChineseCharacterBasedLexicon, knownChars_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserChineseCharacterBasedLexicon, POSDistribution_, EduStanfordNlpStatsDistribution *)
J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserChineseCharacterBasedLexicon, wordIndex_, id<EduStanfordNlpUtilIndex>)
J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserChineseCharacterBasedLexicon, tagIndex_, id<EduStanfordNlpUtilIndex>)
J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserChineseCharacterBasedLexicon, trainingSentences_, id<JavaUtilList>)

inline jint EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_get_CONTEXT_LENGTH();
#define EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_CONTEXT_LENGTH 2
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpParserLexparserChineseCharacterBasedLexicon, CONTEXT_LENGTH, jint)

inline jlong EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_get_serialVersionUID();
#define EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_serialVersionUID -5357655683145854069LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpParserLexparserChineseCharacterBasedLexicon, serialVersionUID, jlong)

__attribute__((unused)) static EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol *EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_unknownCharClassWithEduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_(EduStanfordNlpParserLexparserChineseCharacterBasedLexicon *self, EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol *ch);

__attribute__((unused)) static EduStanfordNlpStatsDistribution *EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_getBackedOffDistWithJavaUtilList_(EduStanfordNlpParserLexparserChineseCharacterBasedLexicon *self, id<JavaUtilList> context);

@interface EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol () {
 @public
  jchar ch_;
  NSString *unkClass_;
}

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol, unkClass_, NSString *)

inline jint EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_get_UNKNOWN_TYPE();
#define EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_UNKNOWN_TYPE 0
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol, UNKNOWN_TYPE, jint)

inline jint EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_get_DIGIT_TYPE();
#define EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_DIGIT_TYPE 1
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol, DIGIT_TYPE, jint)

inline jint EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_get_LETTER_TYPE();
#define EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_LETTER_TYPE 2
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol, LETTER_TYPE, jint)

inline jint EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_get_BEGIN_WORD_TYPE();
#define EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_BEGIN_WORD_TYPE 3
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol, BEGIN_WORD_TYPE, jint)

inline jint EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_get_END_WORD_TYPE();
#define EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_END_WORD_TYPE 4
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol, END_WORD_TYPE, jint)

inline jint EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_get_CHAR_TYPE();
#define EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_CHAR_TYPE 5
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol, CHAR_TYPE, jint)

inline jint EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_get_UNK_CLASS_TYPE();
#define EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_UNK_CLASS_TYPE 6
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol, UNK_CLASS_TYPE, jint)

inline jlong EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_get_serialVersionUID();
#define EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_serialVersionUID 8925032621317022510LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol, serialVersionUID, jlong)

@implementation EduStanfordNlpParserLexparserChineseCharacterBasedLexicon

- (instancetype)initWithEduStanfordNlpParserLexparserChineseTreebankParserParams:(EduStanfordNlpParserLexparserChineseTreebankParserParams *)params
                                                     withEduStanfordNlpUtilIndex:(id<EduStanfordNlpUtilIndex>)wordIndex
                                                     withEduStanfordNlpUtilIndex:(id<EduStanfordNlpUtilIndex>)tagIndex {
  EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_initWithEduStanfordNlpParserLexparserChineseTreebankParserParams_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(self, params, wordIndex, tagIndex);
  return self;
}

- (void)initializeTrainingWithDouble:(jdouble)numTrees {
  trainingSentences_ = new_JavaUtilArrayList_init();
}

- (void)trainWithJavaUtilCollection:(id<JavaUtilCollection>)trees {
  for (EduStanfordNlpTreesTree * __strong tree in nil_chk(trees)) {
    [self trainWithEduStanfordNlpTreesTree:tree withDouble:1.0];
  }
}

- (void)trainWithJavaUtilCollection:(id<JavaUtilCollection>)trees
                         withDouble:(jdouble)weight {
  for (EduStanfordNlpTreesTree * __strong tree in nil_chk(trees)) {
    [self trainWithEduStanfordNlpTreesTree:tree withDouble:weight];
  }
}

- (void)trainWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)tree
                              withDouble:(jdouble)weight {
  [((id<JavaUtilList>) nil_chk(trainingSentences_)) addWithId:[((EduStanfordNlpTreesTree *) nil_chk(tree)) taggedYield]];
}

- (void)trainUnannotatedWithJavaUtilList:(id<JavaUtilList>)sentence
                              withDouble:(jdouble)weight {
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"This version of the parser does not support non-tree training data");
}

- (void)incrementTreesReadWithDouble:(jdouble)weight {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)trainWithEduStanfordNlpLingTaggedWord:(EduStanfordNlpLingTaggedWord *)tw
                                      withInt:(jint)loc
                                   withDouble:(jdouble)weight {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)trainWithJavaUtilList:(id<JavaUtilList>)sentence
                   withDouble:(jdouble)weight {
  [((id<JavaUtilList>) nil_chk(trainingSentences_)) addWithId:sentence];
}

- (void)finishTraining {
  EduStanfordNlpUtilTiming_tickWithNSString_(@"Counting characters...");
  EduStanfordNlpStatsClassicCounter *charCounter = new_EduStanfordNlpStatsClassicCounter_init();
  for (id<JavaUtilList> __strong labels in nil_chk(trainingSentences_)) {
    for (EduStanfordNlpLingTaggedWord * __strong label in nil_chk(labels)) {
      NSString *word = [((EduStanfordNlpLingTaggedWord *) nil_chk(label)) word];
      if ([((NSString *) nil_chk(word)) isEqual:EduStanfordNlpParserLexparserLexicon_BOUNDARY]) {
        continue;
      }
      for (jint j = 0, length = ((jint) [word length]); j < length; j++) {
        EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol *sym = EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_cannonicalSymbolWithChar_([word charAtWithInt:j]);
        [charCounter incrementCountWithId:sym];
      }
      [charCounter incrementCountWithId:JreLoadStatic(EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol, END_WORD)];
    }
  }
  id<JavaUtilSet> singletons = EduStanfordNlpStatsCounters_keysBelowWithEduStanfordNlpStatsCounter_withDouble_(charCounter, 1.5);
  knownChars_ = EduStanfordNlpUtilGenerics_newHashSetWithJavaUtilCollection_([charCounter keySet]);
  EduStanfordNlpUtilTiming_tickWithNSString_(@"Counting nGrams...");
  IOSObjectArray *POSspecificCharNGrams = [IOSObjectArray newArrayWithLength:EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_CONTEXT_LENGTH + 1 type:EduStanfordNlpStatsGeneralizedCounter_class_()];
  for (jint i = 0; i <= EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_CONTEXT_LENGTH; i++) {
    (void) IOSObjectArray_SetAndConsume(POSspecificCharNGrams, i, new_EduStanfordNlpStatsGeneralizedCounter_initWithInt_(i + 2));
  }
  EduStanfordNlpStatsClassicCounter *POSCounter = new_EduStanfordNlpStatsClassicCounter_init();
  id<JavaUtilList> context = new_JavaUtilArrayList_initWithInt_(EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_CONTEXT_LENGTH + 1);
  for (id<JavaUtilList> __strong words in nil_chk(trainingSentences_)) {
    for (EduStanfordNlpLingTaggedWord * __strong taggedWord in nil_chk(words)) {
      NSString *word = [((EduStanfordNlpLingTaggedWord *) nil_chk(taggedWord)) word];
      NSString *tag = [taggedWord tag];
      [((id<EduStanfordNlpUtilIndex>) nil_chk(tagIndex_)) addWithId:tag];
      if ([((NSString *) nil_chk(word)) isEqual:EduStanfordNlpParserLexparserLexicon_BOUNDARY]) {
        continue;
      }
      [POSCounter incrementCountWithId:tag];
      for (jint i = 0, size = ((jint) [word length]); i <= size; i++) {
        EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol *sym;
        EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol *unknownCharClass = nil;
        [context clear];
        [context addWithId:tag];
        if (i < size) {
          jchar thisCh = [word charAtWithInt:i];
          sym = EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_cannonicalSymbolWithChar_(thisCh);
          if ([((id<JavaUtilSet>) nil_chk(singletons)) containsWithId:sym]) {
            unknownCharClass = EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_unknownCharClassWithEduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_(self, sym);
            [charCounter incrementCountWithId:unknownCharClass];
          }
        }
        else {
          sym = JreLoadStatic(EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol, END_WORD);
        }
        [((EduStanfordNlpStatsGeneralizedCounter *) nil_chk(IOSObjectArray_Get(POSspecificCharNGrams, 0))) incrementCountWithJavaUtilList:context withId:sym];
        if (unknownCharClass != nil) {
          [((EduStanfordNlpStatsGeneralizedCounter *) nil_chk(IOSObjectArray_Get(POSspecificCharNGrams, 0))) incrementCountWithJavaUtilList:context withId:unknownCharClass];
        }
        for (jint j = 1; j <= EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_CONTEXT_LENGTH; j++) {
          if (i - j < 0) {
            [context addWithId:JreLoadStatic(EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol, BEGIN_WORD)];
            [((EduStanfordNlpStatsGeneralizedCounter *) nil_chk(IOSObjectArray_Get(POSspecificCharNGrams, j))) incrementCountWithJavaUtilList:context withId:sym];
            if (unknownCharClass != nil) {
              [((EduStanfordNlpStatsGeneralizedCounter *) nil_chk(IOSObjectArray_Get(POSspecificCharNGrams, j))) incrementCountWithJavaUtilList:context withId:unknownCharClass];
            }
            break;
          }
          else {
            EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol *prev = EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_cannonicalSymbolWithChar_([word charAtWithInt:i - j]);
            if ([((id<JavaUtilSet>) nil_chk(singletons)) containsWithId:prev]) {
              [context addWithId:EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_unknownCharClassWithEduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_(self, prev)];
            }
            else {
              [context addWithId:prev];
            }
            [((EduStanfordNlpStatsGeneralizedCounter *) nil_chk(IOSObjectArray_Get(POSspecificCharNGrams, j))) incrementCountWithJavaUtilList:context withId:sym];
            if (unknownCharClass != nil) {
              [((EduStanfordNlpStatsGeneralizedCounter *) nil_chk(IOSObjectArray_Get(POSspecificCharNGrams, j))) incrementCountWithJavaUtilList:context withId:unknownCharClass];
            }
          }
        }
      }
    }
  }
  POSDistribution_ = EduStanfordNlpStatsDistribution_getDistributionWithEduStanfordNlpStatsCounter_(POSCounter);
  EduStanfordNlpUtilTiming_tickWithNSString_(@"Creating character prior distribution...");
  charDistributions_ = EduStanfordNlpUtilGenerics_newHashMap();
  jint numberOfKeys = [charCounter size] + [((id<JavaUtilSet>) nil_chk(singletons)) size];
  EduStanfordNlpStatsDistribution *prior = EduStanfordNlpStatsDistribution_goodTuringSmoothedCounterWithEduStanfordNlpStatsCounter_withInt_(charCounter, numberOfKeys);
  (void) [((id<JavaUtilMap>) nil_chk(charDistributions_)) putWithId:JreLoadStatic(JavaUtilCollections, EMPTY_LIST) withId:prior];
  for (jint i = 0; i <= EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_CONTEXT_LENGTH; i++) {
    id<JavaUtilSet> counterEntries = [((EduStanfordNlpStatsGeneralizedCounter *) nil_chk(IOSObjectArray_Get(POSspecificCharNGrams, i))) lowestLevelCounterEntrySet];
    EduStanfordNlpUtilTiming_tickWithNSString_(JreStrcat("$I$I$", @"Creating ", [((id<JavaUtilSet>) nil_chk(counterEntries)) size], @" character ", (i + 1), @"-gram distributions..."));
    for (id<JavaUtilMap_Entry> __strong entry_ in counterEntries) {
      context = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey];
      EduStanfordNlpStatsClassicCounter *c = [entry_ getValue];
      EduStanfordNlpStatsDistribution *thisPrior = [((id<JavaUtilMap>) nil_chk(charDistributions_)) getWithId:[((id<JavaUtilList>) nil_chk(context)) subListWithInt:0 withInt:[context size] - 1]];
      jdouble priorWeight = [((EduStanfordNlpStatsDistribution *) nil_chk(thisPrior)) getNumberOfKeys] / 200.0;
      EduStanfordNlpStatsDistribution *newDist = EduStanfordNlpStatsDistribution_dynamicCounterWithDirichletPriorWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsDistribution_withDouble_(c, thisPrior, priorWeight);
      (void) [((id<JavaUtilMap>) nil_chk(charDistributions_)) putWithId:context withId:newDist];
    }
  }
}

- (EduStanfordNlpStatsDistribution *)getPOSDistribution {
  return POSDistribution_;
}

+ (jboolean)isForeignWithNSString:(NSString *)s {
  return EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_isForeignWithNSString_(s);
}

- (EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol *)unknownCharClassWithEduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol:(EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol *)ch {
  return EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_unknownCharClassWithEduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_(self, ch);
}

- (jfloat)scoreWithEduStanfordNlpParserLexparserIntTaggedWord:(EduStanfordNlpParserLexparserIntTaggedWord *)iTW
                                                      withInt:(jint)loc
                                                 withNSString:(NSString *)word
                                                 withNSString:(NSString *)featureSpec {
  NSString *tag = [((id<EduStanfordNlpUtilIndex>) nil_chk(tagIndex_)) getWithInt:((EduStanfordNlpParserLexparserIntTaggedWord *) nil_chk(iTW))->tag_];
  JreAssert((![((NSString *) nil_chk(word)) isEqual:EduStanfordNlpParserLexparserLexicon_BOUNDARY]), (@"edu/stanford/nlp/parser/lexparser/ChineseCharacterBasedLexicon.java:249 condition failed: assert !word.equals(BOUNDARY);"));
  IOSCharArray *chars = [word toCharArray];
  id<JavaUtilList> charList = new_JavaUtilArrayList_initWithInt_(((IOSCharArray *) nil_chk(chars))->size_ + EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_CONTEXT_LENGTH + 1);
  [charList addWithId:JreLoadStatic(EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol, END_WORD)];
  for (jint i = chars->size_ - 1; i >= 0; i--) {
    EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol *ch = EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_cannonicalSymbolWithChar_(IOSCharArray_Get(chars, i));
    if ([((id<JavaUtilSet>) nil_chk(knownChars_)) containsWithId:ch]) {
      [charList addWithId:ch];
    }
    else {
      [charList addWithId:EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_unknownCharClassWithEduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_(self, ch)];
    }
  }
  for (jint i = 0; i < EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_CONTEXT_LENGTH; i++) {
    [charList addWithId:JreLoadStatic(EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol, BEGIN_WORD)];
  }
  jdouble score = 0.0;
  for (jint i = 0, size = [charList size]; i < size - EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_CONTEXT_LENGTH; i++) {
    EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol *nextChar = (EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol *) cast_chk([charList getWithInt:i], [EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol class]);
    (void) [charList setWithInt:i withId:tag];
    jdouble charScore = [((EduStanfordNlpStatsDistribution *) nil_chk(EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_getBackedOffDistWithJavaUtilList_(self, [charList subListWithInt:i withInt:i + EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_CONTEXT_LENGTH + 1]))) probabilityOfWithId:nextChar];
    JrePlusAssignDoubleD(&score, JavaLangMath_logWithDouble_(charScore));
  }
  switch (penaltyType_) {
    case 0:
    break;
    case 1:
    JreMinusAssignDoubleD(&score, (chars->size_ * (chars->size_ + 1)) * (lengthPenalty_ / 2));
    break;
    case 2:
    JreMinusAssignDoubleD(&score, (chars->size_ - 1) * lengthPenalty_);
    break;
  }
  return (jfloat) score;
}

- (EduStanfordNlpStatsDistribution *)getBackedOffDistWithJavaUtilList:(id<JavaUtilList>)context {
  return EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_getBackedOffDistWithJavaUtilList_(self, context);
}

- (NSString *)sampleFromWithNSString:(NSString *)tag {
  JavaLangStringBuilder *buf = new_JavaLangStringBuilder_init();
  id<JavaUtilList> context = new_JavaUtilArrayList_initWithInt_(EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_CONTEXT_LENGTH + 1);
  [context addWithId:tag];
  for (jint i = 0; i < EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_CONTEXT_LENGTH; i++) {
    [context addWithId:JreLoadStatic(EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol, BEGIN_WORD)];
  }
  EduStanfordNlpStatsDistribution *d = EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_getBackedOffDistWithJavaUtilList_(self, context);
  EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol *gen = [((EduStanfordNlpStatsDistribution *) nil_chk(d)) sampleFrom];
  while (gen != JreLoadStatic(EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol, END_WORD)) {
    (void) [buf appendWithChar:[((EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol *) nil_chk(gen)) getCh]];
    switch (penaltyType_) {
      case 1:
      if (JavaLangMath_random() > JavaLangMath_powWithDouble_withDouble_(lengthPenalty_, [buf length])) {
        goto break_genLoop;
      }
      break;
      case 2:
      if (JavaLangMath_random() > lengthPenalty_) {
        goto break_genLoop;
      }
      break;
    }
    for (jint i = 1; i < EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_CONTEXT_LENGTH; i++) {
      (void) [context setWithInt:i + 1 withId:[context getWithInt:i]];
    }
    (void) [context setWithInt:1 withId:gen];
    d = EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_getBackedOffDistWithJavaUtilList_(self, context);
    gen = [((EduStanfordNlpStatsDistribution *) nil_chk(d)) sampleFrom];
  }
  break_genLoop: ;
  return [buf description];
}

- (NSString *)sampleFrom {
  NSString *POS = [((EduStanfordNlpStatsDistribution *) nil_chk(POSDistribution_)) sampleFrom];
  return [self sampleFromWithNSString:POS];
}

- (id<JavaUtilIterator>)ruleIteratorByWordWithInt:(jint)word
                                          withInt:(jint)loc
                                     withNSString:(NSString *)featureSpec {
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"ChineseCharacterBasedLexicon has no rule iterator!");
}

- (id<JavaUtilIterator>)ruleIteratorByWordWithNSString:(NSString *)word
                                               withInt:(jint)loc
                                          withNSString:(NSString *)featureSpec {
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"ChineseCharacterBasedLexicon has no rule iterator!");
}

- (jint)numRules {
  return 0;
}

- (EduStanfordNlpStatsDistribution *)getWordLengthDistribution {
  jint samples = 0;
  EduStanfordNlpStatsClassicCounter *c = new_EduStanfordNlpStatsClassicCounter_init();
  while (samples++ < 10000) {
    NSString *s = [self sampleFrom];
    [c incrementCountWithId:JavaLangInteger_valueOfWithInt_(((jint) [((NSString *) nil_chk(s)) length]))];
    if (samples % 1000 == 0) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printWithNSString:@"."];
    }
  }
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) println];
  EduStanfordNlpStatsDistribution *genWordLengthDist = EduStanfordNlpStatsDistribution_getDistributionWithEduStanfordNlpStatsCounter_(c);
  return genWordLengthDist;
}

- (void)readDataWithJavaIoBufferedReader:(JavaIoBufferedReader *)inArg {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)writeDataWithJavaIoWriter:(JavaIoWriter *)w {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (jboolean)isKnownWithInt:(jint)word {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (jboolean)isKnownWithNSString:(NSString *)word {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id<JavaUtilSet>)tagSetWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)basicCategoryFunction {
  id<JavaUtilSet> tagSet = new_JavaUtilHashSet_init();
  for (NSString * __strong tag in nil_chk([((id<EduStanfordNlpUtilIndex>) nil_chk(tagIndex_)) objectsList])) {
    [tagSet addWithId:[((id<JavaUtilFunctionFunction>) nil_chk(basicCategoryFunction)) applyWithId:tag]];
  }
  return tagSet;
}

- (id<EduStanfordNlpParserLexparserUnknownWordModel>)getUnknownWordModel {
  return nil;
}

- (void)setUnknownWordModelWithEduStanfordNlpParserLexparserUnknownWordModel:(id<EduStanfordNlpParserLexparserUnknownWordModel>)uwm {
}

- (void)trainWithJavaUtilCollection:(id<JavaUtilCollection>)trees
             withJavaUtilCollection:(id<JavaUtilCollection>)rawTrees {
  [self trainWithJavaUtilCollection:trees];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 4, 7, -1, 8, -1, -1 },
    { NULL, "V", 0x1, 4, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, 12, -1, -1 },
    { NULL, "V", 0x1, 13, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 11, -1, 12, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpStatsDistribution;", 0x1, -1, -1, -1, 15, -1, -1 },
    { NULL, "Z", 0x9, 16, 17, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol;", 0x2, 18, 19, -1, -1, -1, -1 },
    { NULL, "F", 0x1, 20, 21, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpStatsDistribution;", 0x2, 22, 23, -1, 24, -1, -1 },
    { NULL, "LNSString;", 0x1, 25, 17, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, 26, 27, -1, 28, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, 26, 29, -1, 30, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpStatsDistribution;", 0x2, -1, -1, -1, 31, -1, -1 },
    { NULL, "V", 0x1, 32, 33, 34, -1, -1, -1 },
    { NULL, "V", 0x1, 35, 36, 34, -1, -1, -1 },
    { NULL, "Z", 0x1, 37, 38, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 37, 17, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, 39, 40, -1, 41, -1, -1 },
    { NULL, "LEduStanfordNlpParserLexparserUnknownWordModel;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 42, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 44, -1, 45, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpParserLexparserChineseTreebankParserParams:withEduStanfordNlpUtilIndex:withEduStanfordNlpUtilIndex:);
  methods[1].selector = @selector(initializeTrainingWithDouble:);
  methods[2].selector = @selector(trainWithJavaUtilCollection:);
  methods[3].selector = @selector(trainWithJavaUtilCollection:withDouble:);
  methods[4].selector = @selector(trainWithEduStanfordNlpTreesTree:withDouble:);
  methods[5].selector = @selector(trainUnannotatedWithJavaUtilList:withDouble:);
  methods[6].selector = @selector(incrementTreesReadWithDouble:);
  methods[7].selector = @selector(trainWithEduStanfordNlpLingTaggedWord:withInt:withDouble:);
  methods[8].selector = @selector(trainWithJavaUtilList:withDouble:);
  methods[9].selector = @selector(finishTraining);
  methods[10].selector = @selector(getPOSDistribution);
  methods[11].selector = @selector(isForeignWithNSString:);
  methods[12].selector = @selector(unknownCharClassWithEduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol:);
  methods[13].selector = @selector(scoreWithEduStanfordNlpParserLexparserIntTaggedWord:withInt:withNSString:withNSString:);
  methods[14].selector = @selector(getBackedOffDistWithJavaUtilList:);
  methods[15].selector = @selector(sampleFromWithNSString:);
  methods[16].selector = @selector(sampleFrom);
  methods[17].selector = @selector(ruleIteratorByWordWithInt:withInt:withNSString:);
  methods[18].selector = @selector(ruleIteratorByWordWithNSString:withInt:withNSString:);
  methods[19].selector = @selector(numRules);
  methods[20].selector = @selector(getWordLengthDistribution);
  methods[21].selector = @selector(readDataWithJavaIoBufferedReader:);
  methods[22].selector = @selector(writeDataWithJavaIoWriter:);
  methods[23].selector = @selector(isKnownWithInt:);
  methods[24].selector = @selector(isKnownWithNSString:);
  methods[25].selector = @selector(tagSetWithJavaUtilFunctionFunction:);
  methods[26].selector = @selector(getUnknownWordModel);
  methods[27].selector = @selector(setUnknownWordModelWithEduStanfordNlpParserLexparserUnknownWordModel:);
  methods[28].selector = @selector(trainWithJavaUtilCollection:withJavaUtilCollection:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "lengthPenalty_", "D", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "penaltyType_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "charDistributions_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 46, -1 },
    { "knownChars_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x2, -1, -1, 47, -1 },
    { "POSDistribution_", "LEduStanfordNlpStatsDistribution;", .constantValue.asLong = 0, 0x2, -1, -1, 48, -1 },
    { "useUnknownCharacterModel_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "CONTEXT_LENGTH", "I", .constantValue.asInt = EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_CONTEXT_LENGTH, 0x1a, -1, -1, -1, -1 },
    { "wordIndex_", "LEduStanfordNlpUtilIndex;", .constantValue.asLong = 0, 0x12, -1, -1, 49, -1 },
    { "tagIndex_", "LEduStanfordNlpUtilIndex;", .constantValue.asLong = 0, 0x12, -1, -1, 49, -1 },
    { "trainingSentences_", "LJavaUtilList;", .constantValue.asLong = 0, 0x82, -1, -1, 50, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpParserLexparserChineseTreebankParserParams;LEduStanfordNlpUtilIndex;LEduStanfordNlpUtilIndex;", "(Ledu/stanford/nlp/parser/lexparser/ChineseTreebankParserParams;Ledu/stanford/nlp/util/Index<Ljava/lang/String;>;Ledu/stanford/nlp/util/Index<Ljava/lang/String;>;)V", "initializeTraining", "D", "train", "LJavaUtilCollection;", "(Ljava/util/Collection<Ledu/stanford/nlp/trees/Tree;>;)V", "LJavaUtilCollection;D", "(Ljava/util/Collection<Ledu/stanford/nlp/trees/Tree;>;D)V", "LEduStanfordNlpTreesTree;D", "trainUnannotated", "LJavaUtilList;D", "(Ljava/util/List<Ledu/stanford/nlp/ling/TaggedWord;>;D)V", "incrementTreesRead", "LEduStanfordNlpLingTaggedWord;ID", "()Ledu/stanford/nlp/stats/Distribution<Ljava/lang/String;>;", "isForeign", "LNSString;", "unknownCharClass", "LEduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol;", "score", "LEduStanfordNlpParserLexparserIntTaggedWord;ILNSString;LNSString;", "getBackedOffDist", "LJavaUtilList;", "(Ljava/util/List<Ljava/io/Serializable;>;)Ledu/stanford/nlp/stats/Distribution<Ledu/stanford/nlp/parser/lexparser/ChineseCharacterBasedLexicon$Symbol;>;", "sampleFrom", "ruleIteratorByWord", "IILNSString;", "(IILjava/lang/String;)Ljava/util/Iterator<Ledu/stanford/nlp/parser/lexparser/IntTaggedWord;>;", "LNSString;ILNSString;", "(Ljava/lang/String;ILjava/lang/String;)Ljava/util/Iterator<Ledu/stanford/nlp/parser/lexparser/IntTaggedWord;>;", "()Ledu/stanford/nlp/stats/Distribution<Ljava/lang/Integer;>;", "readData", "LJavaIoBufferedReader;", "LJavaIoIOException;", "writeData", "LJavaIoWriter;", "isKnown", "I", "tagSet", "LJavaUtilFunctionFunction;", "(Ljava/util/function/Function<Ljava/lang/String;Ljava/lang/String;>;)Ljava/util/Set<Ljava/lang/String;>;", "setUnknownWordModel", "LEduStanfordNlpParserLexparserUnknownWordModel;", "LJavaUtilCollection;LJavaUtilCollection;", "(Ljava/util/Collection<Ledu/stanford/nlp/trees/Tree;>;Ljava/util/Collection<Ledu/stanford/nlp/trees/Tree;>;)V", "Ljava/util/Map<Ljava/util/List;Ledu/stanford/nlp/stats/Distribution<Ledu/stanford/nlp/parser/lexparser/ChineseCharacterBasedLexicon$Symbol;>;>;", "Ljava/util/Set<Ledu/stanford/nlp/parser/lexparser/ChineseCharacterBasedLexicon$Symbol;>;", "Ledu/stanford/nlp/stats/Distribution<Ljava/lang/String;>;", "Ledu/stanford/nlp/util/Index<Ljava/lang/String;>;", "Ljava/util/List<Ljava/util/List<Ledu/stanford/nlp/ling/TaggedWord;>;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpParserLexparserChineseCharacterBasedLexicon = { "ChineseCharacterBasedLexicon", "edu.stanford.nlp.parser.lexparser", ptrTable, methods, fields, 7, 0x1, 29, 11, -1, 19, -1, -1, -1 };
  return &_EduStanfordNlpParserLexparserChineseCharacterBasedLexicon;
}

@end

void EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_initWithEduStanfordNlpParserLexparserChineseTreebankParserParams_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(EduStanfordNlpParserLexparserChineseCharacterBasedLexicon *self, EduStanfordNlpParserLexparserChineseTreebankParserParams *params, id<EduStanfordNlpUtilIndex> wordIndex, id<EduStanfordNlpUtilIndex> tagIndex) {
  NSObject_init(self);
  self->wordIndex_ = wordIndex;
  self->tagIndex_ = tagIndex;
  self->lengthPenalty_ = ((EduStanfordNlpParserLexparserChineseTreebankParserParams *) nil_chk(params))->lengthPenalty_;
  self->penaltyType_ = params->penaltyType_;
  self->useUnknownCharacterModel_ = params->useUnknownCharacterModel_;
}

EduStanfordNlpParserLexparserChineseCharacterBasedLexicon *new_EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_initWithEduStanfordNlpParserLexparserChineseTreebankParserParams_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(EduStanfordNlpParserLexparserChineseTreebankParserParams *params, id<EduStanfordNlpUtilIndex> wordIndex, id<EduStanfordNlpUtilIndex> tagIndex) {
  J2OBJC_NEW_IMPL(EduStanfordNlpParserLexparserChineseCharacterBasedLexicon, initWithEduStanfordNlpParserLexparserChineseTreebankParserParams_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_, params, wordIndex, tagIndex)
}

EduStanfordNlpParserLexparserChineseCharacterBasedLexicon *create_EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_initWithEduStanfordNlpParserLexparserChineseTreebankParserParams_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(EduStanfordNlpParserLexparserChineseTreebankParserParams *params, id<EduStanfordNlpUtilIndex> wordIndex, id<EduStanfordNlpUtilIndex> tagIndex) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpParserLexparserChineseCharacterBasedLexicon, initWithEduStanfordNlpParserLexparserChineseTreebankParserParams_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_, params, wordIndex, tagIndex)
}

jboolean EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_isForeignWithNSString_(NSString *s) {
  EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_initialize();
  for (jint i = 0; i < ((jint) [((NSString *) nil_chk(s)) length]); i++) {
    jint num = JavaLangCharacter_getNumericValueWithChar_([s charAtWithInt:i]);
    if (num < 10 || num > 35) {
      return false;
    }
  }
  return true;
}

EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol *EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_unknownCharClassWithEduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_(EduStanfordNlpParserLexparserChineseCharacterBasedLexicon *self, EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol *ch) {
  if (self->useUnknownCharacterModel_) {
    return [new_EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_initWithNSString_(JavaLangCharacter_toStringWithChar_(EduStanfordNlpTreesInternationalPennchineseRadicalMap_getRadicalWithChar_([((EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol *) nil_chk(ch)) getCh]))) intern];
  }
  else {
    return JreLoadStatic(EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol, UNKNOWN);
  }
}

EduStanfordNlpStatsDistribution *EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_getBackedOffDistWithJavaUtilList_(EduStanfordNlpParserLexparserChineseCharacterBasedLexicon *self, id<JavaUtilList> context) {
  for (jint i = EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_CONTEXT_LENGTH + 1; i >= 0; i--) {
    id<JavaUtilList> l = [((id<JavaUtilList>) nil_chk(context)) subListWithInt:0 withInt:i];
    if ([((id<JavaUtilMap>) nil_chk(self->charDistributions_)) containsKeyWithId:l]) {
      return [((id<JavaUtilMap>) nil_chk(self->charDistributions_)) getWithId:l];
    }
  }
  @throw new_JavaLangRuntimeException_initWithNSString_(@"OOPS... no prior distribution...?");
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpParserLexparserChineseCharacterBasedLexicon)

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol)

EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol *EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_UNKNOWN;
EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol *EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_DIGIT;
EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol *EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_LETTER;
EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol *EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_BEGIN_WORD;
EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol *EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_END_WORD;
EduStanfordNlpParserLexparserInterner *EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_interner;

@implementation EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol

- (instancetype)initWithChar:(jchar)ch {
  EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_initWithChar_(self, ch);
  return self;
}

- (instancetype)initWithNSString:(NSString *)unkClass {
  EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_initWithNSString_(self, unkClass);
  return self;
}

- (instancetype)initWithInt:(jint)type {
  EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_initWithInt_(self, type);
  return self;
}

+ (EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol *)cannonicalSymbolWithChar:(jchar)ch {
  return EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_cannonicalSymbolWithChar_(ch);
}

- (jchar)getCh {
  if (type_ == EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_CHAR_TYPE) {
    return ch_;
  }
  else {
    return '*';
  }
}

- (EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol *)intern {
  return [((EduStanfordNlpParserLexparserInterner *) nil_chk(EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_interner)) internWithId:self];
}

- (NSString *)description {
  if (type_ == EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_CHAR_TYPE) {
    return JreStrcat("$IC", @"[u", (jint) ch_, ']');
  }
  else if (type_ == EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_UNK_CLASS_TYPE) {
    return JreStrcat("$$", @"UNK:", unkClass_);
  }
  else {
    return JavaLangInteger_toStringWithInt_(type_);
  }
}

- (id)readResolve {
  switch (type_) {
    case EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_CHAR_TYPE:
    return [self intern];
    case EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_UNK_CLASS_TYPE:
    return [self intern];
    case EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_UNKNOWN_TYPE:
    return EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_UNKNOWN;
    case EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_DIGIT_TYPE:
    return EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_DIGIT;
    case EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_LETTER_TYPE:
    return EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_LETTER;
    case EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_BEGIN_WORD_TYPE:
    return EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_BEGIN_WORD;
    case EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_END_WORD_TYPE:
    return EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_END_WORD;
    default:
    @throw new_JavaIoInvalidObjectException_initWithNSString_(@"ILLEGAL VALUE IN SERIALIZED SYMBOL");
  }
}

- (jboolean)isEqual:(id)o {
  if (self == o) {
    return true;
  }
  if (!([o isKindOfClass:[EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol class]])) {
    return false;
  }
  EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol *symbol = (EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol *) cast_chk(o, [EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol class]);
  if (ch_ != ((EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol *) nil_chk(symbol))->ch_) {
    return false;
  }
  if (type_ != symbol->type_) {
    return false;
  }
  if (unkClass_ != nil ? ![unkClass_ isEqual:symbol->unkClass_] : symbol->unkClass_ != nil) {
    return false;
  }
  return true;
}

- (NSUInteger)hash {
  jint result;
  result = ch_;
  result = 29 * result + (unkClass_ != nil ? ((jint) [unkClass_ hash]) : 0);
  result = 29 * result + type_;
  return result;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol;", 0x9, 3, 0, -1, -1, -1, -1 },
    { NULL, "C", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x4, -1, -1, 5, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 8, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithChar:);
  methods[1].selector = @selector(initWithNSString:);
  methods[2].selector = @selector(initWithInt:);
  methods[3].selector = @selector(cannonicalSymbolWithChar:);
  methods[4].selector = @selector(getCh);
  methods[5].selector = @selector(intern);
  methods[6].selector = @selector(description);
  methods[7].selector = @selector(readResolve);
  methods[8].selector = @selector(isEqual:);
  methods[9].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "UNKNOWN_TYPE", "I", .constantValue.asInt = EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_UNKNOWN_TYPE, 0x1a, -1, -1, -1, -1 },
    { "DIGIT_TYPE", "I", .constantValue.asInt = EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_DIGIT_TYPE, 0x1a, -1, -1, -1, -1 },
    { "LETTER_TYPE", "I", .constantValue.asInt = EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_LETTER_TYPE, 0x1a, -1, -1, -1, -1 },
    { "BEGIN_WORD_TYPE", "I", .constantValue.asInt = EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_BEGIN_WORD_TYPE, 0x1a, -1, -1, -1, -1 },
    { "END_WORD_TYPE", "I", .constantValue.asInt = EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_END_WORD_TYPE, 0x1a, -1, -1, -1, -1 },
    { "CHAR_TYPE", "I", .constantValue.asInt = EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_CHAR_TYPE, 0x1a, -1, -1, -1, -1 },
    { "UNK_CLASS_TYPE", "I", .constantValue.asInt = EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_UNK_CLASS_TYPE, 0x1a, -1, -1, -1, -1 },
    { "ch_", "C", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "unkClass_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "type_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "UNKNOWN", "LEduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol;", .constantValue.asLong = 0, 0x19, -1, 9, -1, -1 },
    { "DIGIT", "LEduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol;", .constantValue.asLong = 0, 0x19, -1, 10, -1, -1 },
    { "LETTER", "LEduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol;", .constantValue.asLong = 0, 0x19, -1, 11, -1, -1 },
    { "BEGIN_WORD", "LEduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol;", .constantValue.asLong = 0, 0x19, -1, 12, -1, -1 },
    { "END_WORD", "LEduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol;", .constantValue.asLong = 0, 0x19, -1, 13, -1, -1 },
    { "interner", "LEduStanfordNlpParserLexparserInterner;", .constantValue.asLong = 0, 0x19, -1, 14, 15, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "C", "LNSString;", "I", "cannonicalSymbol", "toString", "LJavaIoObjectStreamException;", "equals", "LNSObject;", "hashCode", &EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_UNKNOWN, &EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_DIGIT, &EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_LETTER, &EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_BEGIN_WORD, &EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_END_WORD, &EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_interner, "Ledu/stanford/nlp/parser/lexparser/Interner<Ledu/stanford/nlp/parser/lexparser/ChineseCharacterBasedLexicon$Symbol;>;", "LEduStanfordNlpParserLexparserChineseCharacterBasedLexicon;" };
  static const J2ObjcClassInfo _EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol = { "Symbol", "edu.stanford.nlp.parser.lexparser", ptrTable, methods, fields, 7, 0x8, 10, 17, 16, -1, -1, -1, -1 };
  return &_EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol;
}

+ (void)initialize {
  if (self == [EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol class]) {
    EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_UNKNOWN = new_EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_initWithInt_(EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_UNKNOWN_TYPE);
    EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_DIGIT = new_EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_initWithInt_(EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_DIGIT_TYPE);
    EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_LETTER = new_EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_initWithInt_(EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_LETTER_TYPE);
    EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_BEGIN_WORD = new_EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_initWithInt_(EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_BEGIN_WORD_TYPE);
    EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_END_WORD = new_EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_initWithInt_(EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_END_WORD_TYPE);
    EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_interner = new_EduStanfordNlpParserLexparserInterner_init();
    J2OBJC_SET_INITIALIZED(EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol)
  }
}

@end

void EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_initWithChar_(EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol *self, jchar ch) {
  NSObject_init(self);
  self->type_ = EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_CHAR_TYPE;
  self->ch_ = ch;
}

EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol *new_EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_initWithChar_(jchar ch) {
  J2OBJC_NEW_IMPL(EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol, initWithChar_, ch)
}

EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol *create_EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_initWithChar_(jchar ch) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol, initWithChar_, ch)
}

void EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_initWithNSString_(EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol *self, NSString *unkClass) {
  NSObject_init(self);
  self->type_ = EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_UNK_CLASS_TYPE;
  self->unkClass_ = unkClass;
}

EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol *new_EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_initWithNSString_(NSString *unkClass) {
  J2OBJC_NEW_IMPL(EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol, initWithNSString_, unkClass)
}

EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol *create_EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_initWithNSString_(NSString *unkClass) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol, initWithNSString_, unkClass)
}

void EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_initWithInt_(EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol *self, jint type) {
  NSObject_init(self);
  JreAssert((type != EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_CHAR_TYPE), (@"edu/stanford/nlp/parser/lexparser/ChineseCharacterBasedLexicon.java:460 condition failed: assert type != CHAR_TYPE;"));
  self->type_ = type;
}

EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol *new_EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_initWithInt_(jint type) {
  J2OBJC_NEW_IMPL(EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol, initWithInt_, type)
}

EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol *create_EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_initWithInt_(jint type) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol, initWithInt_, type)
}

EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol *EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_cannonicalSymbolWithChar_(jchar ch) {
  EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_initialize();
  if (JavaLangCharacter_isDigitWithChar_(ch)) {
    return EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_DIGIT;
  }
  if (JavaLangCharacter_getNumericValueWithChar_(ch) >= 10 && JavaLangCharacter_getNumericValueWithChar_(ch) <= 35) {
    return EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_LETTER;
  }
  return new_EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol_initWithChar_(ch);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpParserLexparserChineseCharacterBasedLexicon_Symbol)
