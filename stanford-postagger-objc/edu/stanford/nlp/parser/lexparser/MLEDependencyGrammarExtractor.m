//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/parser/lexparser/MLEDependencyGrammarExtractor.java
//

#include "J2ObjC_source.h"
#include "edu/stanford/nlp/parser/lexparser/AbstractTreeExtractor.h"
#include "edu/stanford/nlp/parser/lexparser/DependencyGrammar.h"
#include "edu/stanford/nlp/parser/lexparser/IntDependency.h"
#include "edu/stanford/nlp/parser/lexparser/Lexicon.h"
#include "edu/stanford/nlp/parser/lexparser/MLEDependencyGrammar.h"
#include "edu/stanford/nlp/parser/lexparser/MLEDependencyGrammarExtractor.h"
#include "edu/stanford/nlp/parser/lexparser/Options.h"
#include "edu/stanford/nlp/parser/lexparser/TrainOptions.h"
#include "edu/stanford/nlp/parser/lexparser/TreebankLangParserParams.h"
#include "edu/stanford/nlp/stats/ClassicCounter.h"
#include "edu/stanford/nlp/trees/Tree.h"
#include "edu/stanford/nlp/util/Index.h"
#include "java/util/List.h"
#include "java/util/Set.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@implementation EduStanfordNlpParserLexparserMLEDependencyGrammarExtractor

- (instancetype)initWithEduStanfordNlpParserLexparserOptions:(EduStanfordNlpParserLexparserOptions *)op
                                 withEduStanfordNlpUtilIndex:(id<EduStanfordNlpUtilIndex>)wordIndex
                                 withEduStanfordNlpUtilIndex:(id<EduStanfordNlpUtilIndex>)tagIndex {
  EduStanfordNlpParserLexparserMLEDependencyGrammarExtractor_initWithEduStanfordNlpParserLexparserOptions_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(self, op, wordIndex, tagIndex);
  return self;
}

- (void)tallyRootWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)lt
                                  withDouble:(jdouble)weight {
  id<JavaUtilList> deps = EduStanfordNlpParserLexparserMLEDependencyGrammar_treeToDependencyListWithEduStanfordNlpTreesTree_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(lt, wordIndex_, tagIndex_);
  for (EduStanfordNlpParserLexparserIntDependency * __strong dependency in nil_chk(deps)) {
    [((EduStanfordNlpStatsClassicCounter *) nil_chk(dependencyCounter_)) incrementCountWithId:dependency withDouble:weight];
  }
}

- (id<EduStanfordNlpParserLexparserDependencyGrammar>)formResult {
  [((id<EduStanfordNlpUtilIndex>) nil_chk(wordIndex_)) addToIndexWithId:EduStanfordNlpParserLexparserLexicon_UNKNOWN_WORD];
  EduStanfordNlpParserLexparserMLEDependencyGrammar *dg = new_EduStanfordNlpParserLexparserMLEDependencyGrammar_initWithEduStanfordNlpParserLexparserTreebankLangParserParams_withBoolean_withBoolean_withBoolean_withBoolean_withEduStanfordNlpParserLexparserOptions_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(tlpParams_, directional_, useDistance_, useCoarseDistance_, basicCategoryTagsInDependencyGrammar_, op_, wordIndex_, tagIndex_);
  for (EduStanfordNlpParserLexparserIntDependency * __strong dependency in nil_chk([((EduStanfordNlpStatsClassicCounter *) nil_chk(dependencyCounter_)) keySet])) {
    [dg addRuleWithEduStanfordNlpParserLexparserIntDependency:dependency withDouble:[((EduStanfordNlpStatsClassicCounter *) nil_chk(dependencyCounter_)) getCountWithId:dependency]];
  }
  return dg;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpParserLexparserDependencyGrammar;", 0x1, -1, -1, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpParserLexparserOptions:withEduStanfordNlpUtilIndex:withEduStanfordNlpUtilIndex:);
  methods[1].selector = @selector(tallyRootWithEduStanfordNlpTreesTree:withDouble:);
  methods[2].selector = @selector(formResult);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "wordIndex_", "LEduStanfordNlpUtilIndex;", .constantValue.asLong = 0, 0x14, -1, -1, 5, -1 },
    { "tagIndex_", "LEduStanfordNlpUtilIndex;", .constantValue.asLong = 0, 0x14, -1, -1, 5, -1 },
    { "dependencyCounter_", "LEduStanfordNlpStatsClassicCounter;", .constantValue.asLong = 0, 0x4, -1, -1, 6, -1 },
    { "tlpParams_", "LEduStanfordNlpParserLexparserTreebankLangParserParams;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "directional_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "useDistance_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "useCoarseDistance_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "basicCategoryTagsInDependencyGrammar_", "Z", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpParserLexparserOptions;LEduStanfordNlpUtilIndex;LEduStanfordNlpUtilIndex;", "(Ledu/stanford/nlp/parser/lexparser/Options;Ledu/stanford/nlp/util/Index<Ljava/lang/String;>;Ledu/stanford/nlp/util/Index<Ljava/lang/String;>;)V", "tallyRoot", "LEduStanfordNlpTreesTree;D", "()Ledu/stanford/nlp/parser/lexparser/DependencyGrammar;", "Ledu/stanford/nlp/util/Index<Ljava/lang/String;>;", "Ledu/stanford/nlp/stats/ClassicCounter<Ledu/stanford/nlp/parser/lexparser/IntDependency;>;", "Ledu/stanford/nlp/parser/lexparser/AbstractTreeExtractor<Ledu/stanford/nlp/parser/lexparser/DependencyGrammar;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpParserLexparserMLEDependencyGrammarExtractor = { "MLEDependencyGrammarExtractor", "edu.stanford.nlp.parser.lexparser", ptrTable, methods, fields, 7, 0x1, 3, 8, -1, -1, -1, 7, -1 };
  return &_EduStanfordNlpParserLexparserMLEDependencyGrammarExtractor;
}

@end

void EduStanfordNlpParserLexparserMLEDependencyGrammarExtractor_initWithEduStanfordNlpParserLexparserOptions_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(EduStanfordNlpParserLexparserMLEDependencyGrammarExtractor *self, EduStanfordNlpParserLexparserOptions *op, id<EduStanfordNlpUtilIndex> wordIndex, id<EduStanfordNlpUtilIndex> tagIndex) {
  EduStanfordNlpParserLexparserAbstractTreeExtractor_initWithEduStanfordNlpParserLexparserOptions_(self, op);
  self->dependencyCounter_ = new_EduStanfordNlpStatsClassicCounter_init();
  self->wordIndex_ = wordIndex;
  self->tagIndex_ = tagIndex;
  self->tlpParams_ = ((EduStanfordNlpParserLexparserOptions *) nil_chk(op))->tlpParams_;
  self->directional_ = op->directional_;
  self->useDistance_ = op->distance_;
  self->useCoarseDistance_ = op->coarseDistance_;
  self->basicCategoryTagsInDependencyGrammar_ = ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(op->trainOptions_))->basicCategoryTagsInDependencyGrammar_;
}

EduStanfordNlpParserLexparserMLEDependencyGrammarExtractor *new_EduStanfordNlpParserLexparserMLEDependencyGrammarExtractor_initWithEduStanfordNlpParserLexparserOptions_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(EduStanfordNlpParserLexparserOptions *op, id<EduStanfordNlpUtilIndex> wordIndex, id<EduStanfordNlpUtilIndex> tagIndex) {
  J2OBJC_NEW_IMPL(EduStanfordNlpParserLexparserMLEDependencyGrammarExtractor, initWithEduStanfordNlpParserLexparserOptions_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_, op, wordIndex, tagIndex)
}

EduStanfordNlpParserLexparserMLEDependencyGrammarExtractor *create_EduStanfordNlpParserLexparserMLEDependencyGrammarExtractor_initWithEduStanfordNlpParserLexparserOptions_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(EduStanfordNlpParserLexparserOptions *op, id<EduStanfordNlpUtilIndex> wordIndex, id<EduStanfordNlpUtilIndex> tagIndex) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpParserLexparserMLEDependencyGrammarExtractor, initWithEduStanfordNlpParserLexparserOptions_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_, op, wordIndex, tagIndex)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpParserLexparserMLEDependencyGrammarExtractor)
