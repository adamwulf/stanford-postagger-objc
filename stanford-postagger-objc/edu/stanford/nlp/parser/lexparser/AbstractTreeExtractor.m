//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/parser/lexparser/AbstractTreeExtractor.java
//

#include "J2ObjC_source.h"
#include "edu/stanford/nlp/parser/lexparser/AbstractTreeExtractor.h"
#include "edu/stanford/nlp/parser/lexparser/Options.h"
#include "edu/stanford/nlp/parser/lexparser/TestOptions.h"
#include "edu/stanford/nlp/trees/Tree.h"
#include "java/lang/Exception.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/function/Function.h"

@implementation EduStanfordNlpParserLexparserAbstractTreeExtractor

- (instancetype)initWithEduStanfordNlpParserLexparserOptions:(EduStanfordNlpParserLexparserOptions *)op {
  EduStanfordNlpParserLexparserAbstractTreeExtractor_initWithEduStanfordNlpParserLexparserOptions_(self, op);
  return self;
}

- (void)tallyLeafWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)lt
                                  withDouble:(jdouble)weight {
}

- (void)tallyPreTerminalWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)lt
                                         withDouble:(jdouble)weight {
}

- (void)tallyInternalNodeWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)lt
                                          withDouble:(jdouble)weight {
}

- (void)tallyRootWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)lt
                                  withDouble:(jdouble)weight {
}

- (id)formResult {
  return nil;
}

- (void)tallyLocalTreeWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)lt
                                       withDouble:(jdouble)weight {
  if ([((EduStanfordNlpTreesTree *) nil_chk(lt)) isLeaf]) {
    [self tallyLeafWithEduStanfordNlpTreesTree:lt withDouble:weight];
  }
  else if ([lt isPreTerminal]) {
    [self tallyPreTerminalWithEduStanfordNlpTreesTree:lt withDouble:weight];
  }
  else {
    [self tallyInternalNodeWithEduStanfordNlpTreesTree:lt withDouble:weight];
  }
}

- (void)tallyTreeWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
                                  withDouble:(jdouble)weight {
  [self tallyRootWithEduStanfordNlpTreesTree:t withDouble:weight];
  for (EduStanfordNlpTreesTree * __strong localTree in nil_chk([((EduStanfordNlpTreesTree *) nil_chk(t)) subTreeList])) {
    [self tallyLocalTreeWithEduStanfordNlpTreesTree:localTree withDouble:weight];
  }
}

- (void)tallyTreesWithJavaUtilCollection:(id<JavaUtilCollection>)trees
                              withDouble:(jdouble)weight {
  for (EduStanfordNlpTreesTree * __strong tree in nil_chk(trees)) {
    [self tallyTreeWithEduStanfordNlpTreesTree:tree withDouble:weight];
  }
}

- (void)tallyTreeIteratorWithJavaUtilIterator:(id<JavaUtilIterator>)treeIterator
                 withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)f
                                   withDouble:(jdouble)weight {
  while ([((id<JavaUtilIterator>) nil_chk(treeIterator)) hasNext]) {
    EduStanfordNlpTreesTree *tree = [treeIterator next];
    @try {
      tree = [((id<JavaUtilFunctionFunction>) nil_chk(f)) applyWithId:tree];
    }
    @catch (JavaLangException *e) {
      if (((EduStanfordNlpParserLexparserTestOptions *) nil_chk(((EduStanfordNlpParserLexparserOptions *) nil_chk(op_))->testOptions_))->verbose_) {
        [((JavaLangException *) nil_chk(e)) printStackTrace];
      }
    }
    [self tallyTreeWithEduStanfordNlpTreesTree:tree withDouble:weight];
  }
}

- (id)extract {
  return [self formResult];
}

- (id)extractWithJavaUtilCollection:(id<JavaUtilCollection>)treeList {
  [self tallyTreesWithJavaUtilCollection:treeList withDouble:1.0];
  return [self formResult];
}

- (id)extractWithJavaUtilCollection:(id<JavaUtilCollection>)trees1
                         withDouble:(jdouble)weight1
             withJavaUtilCollection:(id<JavaUtilCollection>)trees2
                         withDouble:(jdouble)weight2 {
  [self tallyTreesWithJavaUtilCollection:trees1 withDouble:weight1];
  [self tallyTreesWithJavaUtilCollection:trees2 withDouble:weight2];
  return [self formResult];
}

- (id)extractWithJavaUtilIterator:(id<JavaUtilIterator>)treeIterator
     withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)f
                       withDouble:(jdouble)weight {
  [self tallyTreeIteratorWithJavaUtilIterator:treeIterator withJavaUtilFunctionFunction:f withDouble:weight];
  return [self formResult];
}

- (id)extractWithJavaUtilIterator:(id<JavaUtilIterator>)iterator
     withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)f {
  return [self extractWithJavaUtilIterator:iterator withJavaUtilFunctionFunction:f withDouble:1.0];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 3, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 4, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 5, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 6, -1, -1 },
    { NULL, "V", 0x4, 7, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 9, 10, -1, 11, -1, -1 },
    { NULL, "V", 0x4, 12, 13, -1, 14, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 6, -1, -1 },
    { NULL, "LNSObject;", 0x1, 15, 16, -1, 17, -1, -1 },
    { NULL, "LNSObject;", 0x1, 15, 18, -1, 19, -1, -1 },
    { NULL, "LNSObject;", 0x1, 15, 13, -1, 20, -1, -1 },
    { NULL, "LNSObject;", 0x1, 15, 21, -1, 22, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpParserLexparserOptions:);
  methods[1].selector = @selector(tallyLeafWithEduStanfordNlpTreesTree:withDouble:);
  methods[2].selector = @selector(tallyPreTerminalWithEduStanfordNlpTreesTree:withDouble:);
  methods[3].selector = @selector(tallyInternalNodeWithEduStanfordNlpTreesTree:withDouble:);
  methods[4].selector = @selector(tallyRootWithEduStanfordNlpTreesTree:withDouble:);
  methods[5].selector = @selector(formResult);
  methods[6].selector = @selector(tallyLocalTreeWithEduStanfordNlpTreesTree:withDouble:);
  methods[7].selector = @selector(tallyTreeWithEduStanfordNlpTreesTree:withDouble:);
  methods[8].selector = @selector(tallyTreesWithJavaUtilCollection:withDouble:);
  methods[9].selector = @selector(tallyTreeIteratorWithJavaUtilIterator:withJavaUtilFunctionFunction:withDouble:);
  methods[10].selector = @selector(extract);
  methods[11].selector = @selector(extractWithJavaUtilCollection:);
  methods[12].selector = @selector(extractWithJavaUtilCollection:withDouble:withJavaUtilCollection:withDouble:);
  methods[13].selector = @selector(extractWithJavaUtilIterator:withJavaUtilFunctionFunction:withDouble:);
  methods[14].selector = @selector(extractWithJavaUtilIterator:withJavaUtilFunctionFunction:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "op_", "LEduStanfordNlpParserLexparserOptions;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpParserLexparserOptions;", "tallyLeaf", "LEduStanfordNlpTreesTree;D", "tallyPreTerminal", "tallyInternalNode", "tallyRoot", "()TT;", "tallyLocalTree", "tallyTree", "tallyTrees", "LJavaUtilCollection;D", "(Ljava/util/Collection<Ledu/stanford/nlp/trees/Tree;>;D)V", "tallyTreeIterator", "LJavaUtilIterator;LJavaUtilFunctionFunction;D", "(Ljava/util/Iterator<Ledu/stanford/nlp/trees/Tree;>;Ljava/util/function/Function<Ledu/stanford/nlp/trees/Tree;Ledu/stanford/nlp/trees/Tree;>;D)V", "extract", "LJavaUtilCollection;", "(Ljava/util/Collection<Ledu/stanford/nlp/trees/Tree;>;)TT;", "LJavaUtilCollection;DLJavaUtilCollection;D", "(Ljava/util/Collection<Ledu/stanford/nlp/trees/Tree;>;DLjava/util/Collection<Ledu/stanford/nlp/trees/Tree;>;D)TT;", "(Ljava/util/Iterator<Ledu/stanford/nlp/trees/Tree;>;Ljava/util/function/Function<Ledu/stanford/nlp/trees/Tree;Ledu/stanford/nlp/trees/Tree;>;D)TT;", "LJavaUtilIterator;LJavaUtilFunctionFunction;", "(Ljava/util/Iterator<Ledu/stanford/nlp/trees/Tree;>;Ljava/util/function/Function<Ledu/stanford/nlp/trees/Tree;Ledu/stanford/nlp/trees/Tree;>;)TT;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Ledu/stanford/nlp/parser/lexparser/Extractor<TT;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpParserLexparserAbstractTreeExtractor = { "AbstractTreeExtractor", "edu.stanford.nlp.parser.lexparser", ptrTable, methods, fields, 7, 0x401, 15, 1, -1, -1, -1, 23, -1 };
  return &_EduStanfordNlpParserLexparserAbstractTreeExtractor;
}

@end

void EduStanfordNlpParserLexparserAbstractTreeExtractor_initWithEduStanfordNlpParserLexparserOptions_(EduStanfordNlpParserLexparserAbstractTreeExtractor *self, EduStanfordNlpParserLexparserOptions *op) {
  NSObject_init(self);
  self->op_ = op;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpParserLexparserAbstractTreeExtractor)
