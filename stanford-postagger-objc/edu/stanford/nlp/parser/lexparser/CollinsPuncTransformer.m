//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/parser/lexparser/CollinsPuncTransformer.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/ling/Label.h"
#include "edu/stanford/nlp/parser/lexparser/CollinsPuncTransformer.h"
#include "edu/stanford/nlp/trees/Tree.h"
#include "edu/stanford/nlp/trees/TreeFactory.h"
#include "edu/stanford/nlp/trees/TreebankLanguagePack.h"
#include "java/util/Collections.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"

@interface EduStanfordNlpParserLexparserCollinsPuncTransformer () {
 @public
  id<EduStanfordNlpTreesTreebankLanguagePack> tlp_;
}

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserCollinsPuncTransformer, tlp_, id<EduStanfordNlpTreesTreebankLanguagePack>)

@implementation EduStanfordNlpParserLexparserCollinsPuncTransformer

- (jboolean)isPuncWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t {
  if ([((EduStanfordNlpTreesTree *) nil_chk(t)) isPreTerminal]) {
    NSString *s = [((id<EduStanfordNlpLingLabel>) nil_chk([t label])) value];
    if ([((id<EduStanfordNlpTreesTreebankLanguagePack>) nil_chk(tlp_)) isEvalBIgnoredPunctuationTagWithNSString:s]) {
      return true;
    }
  }
  return false;
}

+ (JavaUtilLinkedList *)preTermsWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t {
  return EduStanfordNlpParserLexparserCollinsPuncTransformer_preTermsWithEduStanfordNlpTreesTree_(t);
}

+ (void)preTermHelperWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
                                withJavaUtilList:(id<JavaUtilList>)l {
  EduStanfordNlpParserLexparserCollinsPuncTransformer_preTermHelperWithEduStanfordNlpTreesTree_withJavaUtilList_(t, l);
}

- (EduStanfordNlpTreesTree *)transformRootWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)tree
                                   withEduStanfordNlpTreesTreeFactory:(id<EduStanfordNlpTreesTreeFactory>)tf {
  if ([((NSString *) nil_chk([((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(tree)) label])) description])) hasPrefix:@"ROOT"]) {
    return [((id<EduStanfordNlpTreesTreeFactory>) nil_chk(tf)) newTreeNodeWithEduStanfordNlpLingLabel:[tree label] withJavaUtilList:JavaUtilCollections_singletonListWithId_([self transformNodeWithEduStanfordNlpTreesTree:IOSObjectArray_Get(nil_chk([tree children]), 0) withEduStanfordNlpTreesTreeFactory:tf])];
  }
  return [self transformNodeWithEduStanfordNlpTreesTree:tree withEduStanfordNlpTreesTreeFactory:tf];
}

- (EduStanfordNlpTreesTree *)transformNodeWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)tree
                                   withEduStanfordNlpTreesTreeFactory:(id<EduStanfordNlpTreesTreeFactory>)tf {
  if ([((EduStanfordNlpTreesTree *) nil_chk(tree)) isLeaf]) {
    return [((id<EduStanfordNlpTreesTreeFactory>) nil_chk(tf)) newLeafWithEduStanfordNlpLingLabel:[tree label]];
  }
  if ([tree isPreTerminal]) {
    return [((id<EduStanfordNlpTreesTreeFactory>) nil_chk(tf)) newTreeNodeWithEduStanfordNlpLingLabel:[tree label] withJavaUtilList:JavaUtilCollections_singletonListWithId_([tf newLeafWithEduStanfordNlpLingLabel:[((EduStanfordNlpTreesTree *) nil_chk(IOSObjectArray_Get(nil_chk([tree children]), 0))) label]])];
  }
  id<JavaUtilList> children = [tree getChildrenAsList];
  JavaUtilLinkedList *newChildren = new_JavaUtilLinkedList_init();
  for (EduStanfordNlpTreesTree * __strong child in nil_chk(children)) {
    JavaUtilLinkedList *preTerms = EduStanfordNlpParserLexparserCollinsPuncTransformer_preTermsWithEduStanfordNlpTreesTree_(child);
    while (![((JavaUtilLinkedList *) nil_chk(preTerms)) isEmpty] && [self isPuncWithEduStanfordNlpTreesTree:[preTerms getFirst]]) {
      [newChildren addWithId:[preTerms getFirst]];
      (void) [preTerms removeFirst];
    }
    EduStanfordNlpTreesTree *newChild = [self transformNodeWithEduStanfordNlpTreesTree:child withEduStanfordNlpTreesTreeFactory:tf];
    JavaUtilLinkedList *temp = new_JavaUtilLinkedList_init();
    if (((IOSObjectArray *) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(newChild)) children]))->size_ > 0) {
      [newChildren addWithId:newChild];
    }
    while (![preTerms isEmpty] && [self isPuncWithEduStanfordNlpTreesTree:[preTerms getLast]]) {
      [temp addFirstWithId:[preTerms getLast]];
      (void) [preTerms removeLast];
    }
    [newChildren addAllWithJavaUtilCollection:temp];
  }
  while (![newChildren isEmpty] && [self isPuncWithEduStanfordNlpTreesTree:[newChildren getFirst]]) {
    (void) [newChildren removeFirst];
  }
  while (![newChildren isEmpty] && [self isPuncWithEduStanfordNlpTreesTree:[newChildren getLast]]) {
    (void) [newChildren removeLast];
  }
  return [((id<EduStanfordNlpTreesTreeFactory>) nil_chk(tf)) newTreeNodeWithEduStanfordNlpLingLabel:[tree label] withJavaUtilList:newChildren];
}

- (EduStanfordNlpTreesTree *)transformTreeWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)tree {
  return [self transformRootWithEduStanfordNlpTreesTree:tree withEduStanfordNlpTreesTreeFactory:[((EduStanfordNlpTreesTree *) nil_chk(tree)) treeFactory]];
}

- (instancetype)initWithEduStanfordNlpTreesTreebankLanguagePack:(id<EduStanfordNlpTreesTreebankLanguagePack>)tlp {
  EduStanfordNlpParserLexparserCollinsPuncTransformer_initWithEduStanfordNlpTreesTreebankLanguagePack_(self, tlp);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x0, 0, 1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilLinkedList;", 0x8, 2, 1, -1, 3, -1, -1 },
    { NULL, "V", 0x8, 4, 5, -1, 6, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x0, 7, 8, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x0, 9, 8, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x1, 10, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 11, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(isPuncWithEduStanfordNlpTreesTree:);
  methods[1].selector = @selector(preTermsWithEduStanfordNlpTreesTree:);
  methods[2].selector = @selector(preTermHelperWithEduStanfordNlpTreesTree:withJavaUtilList:);
  methods[3].selector = @selector(transformRootWithEduStanfordNlpTreesTree:withEduStanfordNlpTreesTreeFactory:);
  methods[4].selector = @selector(transformNodeWithEduStanfordNlpTreesTree:withEduStanfordNlpTreesTreeFactory:);
  methods[5].selector = @selector(transformTreeWithEduStanfordNlpTreesTree:);
  methods[6].selector = @selector(initWithEduStanfordNlpTreesTreebankLanguagePack:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "tlp_", "LEduStanfordNlpTreesTreebankLanguagePack;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "isPunc", "LEduStanfordNlpTreesTree;", "preTerms", "(Ledu/stanford/nlp/trees/Tree;)Ljava/util/LinkedList<Ledu/stanford/nlp/trees/Tree;>;", "preTermHelper", "LEduStanfordNlpTreesTree;LJavaUtilList;", "(Ledu/stanford/nlp/trees/Tree;Ljava/util/List<Ledu/stanford/nlp/trees/Tree;>;)V", "transformRoot", "LEduStanfordNlpTreesTree;LEduStanfordNlpTreesTreeFactory;", "transformNode", "transformTree", "LEduStanfordNlpTreesTreebankLanguagePack;" };
  static const J2ObjcClassInfo _EduStanfordNlpParserLexparserCollinsPuncTransformer = { "CollinsPuncTransformer", "edu.stanford.nlp.parser.lexparser", ptrTable, methods, fields, 7, 0x1, 7, 1, -1, -1, -1, -1, -1 };
  return &_EduStanfordNlpParserLexparserCollinsPuncTransformer;
}

@end

JavaUtilLinkedList *EduStanfordNlpParserLexparserCollinsPuncTransformer_preTermsWithEduStanfordNlpTreesTree_(EduStanfordNlpTreesTree *t) {
  EduStanfordNlpParserLexparserCollinsPuncTransformer_initialize();
  JavaUtilLinkedList *l = new_JavaUtilLinkedList_init();
  EduStanfordNlpParserLexparserCollinsPuncTransformer_preTermHelperWithEduStanfordNlpTreesTree_withJavaUtilList_(t, l);
  return l;
}

void EduStanfordNlpParserLexparserCollinsPuncTransformer_preTermHelperWithEduStanfordNlpTreesTree_withJavaUtilList_(EduStanfordNlpTreesTree *t, id<JavaUtilList> l) {
  EduStanfordNlpParserLexparserCollinsPuncTransformer_initialize();
  if ([((EduStanfordNlpTreesTree *) nil_chk(t)) isLeaf]) {
    return;
  }
  if ([t isPreTerminal]) {
    [((id<JavaUtilList>) nil_chk(l)) addWithId:t];
    return;
  }
  IOSObjectArray *children = [t children];
  {
    IOSObjectArray *a__ = children;
    EduStanfordNlpTreesTree * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      EduStanfordNlpTreesTree *child = *b__++;
      EduStanfordNlpParserLexparserCollinsPuncTransformer_preTermHelperWithEduStanfordNlpTreesTree_withJavaUtilList_(child, l);
    }
  }
}

void EduStanfordNlpParserLexparserCollinsPuncTransformer_initWithEduStanfordNlpTreesTreebankLanguagePack_(EduStanfordNlpParserLexparserCollinsPuncTransformer *self, id<EduStanfordNlpTreesTreebankLanguagePack> tlp) {
  NSObject_init(self);
  self->tlp_ = tlp;
}

EduStanfordNlpParserLexparserCollinsPuncTransformer *new_EduStanfordNlpParserLexparserCollinsPuncTransformer_initWithEduStanfordNlpTreesTreebankLanguagePack_(id<EduStanfordNlpTreesTreebankLanguagePack> tlp) {
  J2OBJC_NEW_IMPL(EduStanfordNlpParserLexparserCollinsPuncTransformer, initWithEduStanfordNlpTreesTreebankLanguagePack_, tlp)
}

EduStanfordNlpParserLexparserCollinsPuncTransformer *create_EduStanfordNlpParserLexparserCollinsPuncTransformer_initWithEduStanfordNlpTreesTreebankLanguagePack_(id<EduStanfordNlpTreesTreebankLanguagePack> tlp) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpParserLexparserCollinsPuncTransformer, initWithEduStanfordNlpTreesTreebankLanguagePack_, tlp)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpParserLexparserCollinsPuncTransformer)
