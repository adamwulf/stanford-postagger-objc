//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/parser/lexparser/TreebankAnnotator.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/io/NumberRangeFileFilter.h"
#include "edu/stanford/nlp/ling/CategoryWordTag.h"
#include "edu/stanford/nlp/ling/Label.h"
#include "edu/stanford/nlp/ling/WordFactory.h"
#include "edu/stanford/nlp/parser/lexparser/Debinarizer.h"
#include "edu/stanford/nlp/parser/lexparser/Lexicon.h"
#include "edu/stanford/nlp/parser/lexparser/Options.h"
#include "edu/stanford/nlp/parser/lexparser/ParentAnnotationStats.h"
#include "edu/stanford/nlp/parser/lexparser/TrainOptions.h"
#include "edu/stanford/nlp/parser/lexparser/TreeAnnotatorAndBinarizer.h"
#include "edu/stanford/nlp/parser/lexparser/TreebankAnnotator.h"
#include "edu/stanford/nlp/parser/lexparser/TreebankLangParserParams.h"
#include "edu/stanford/nlp/trees/BobChrisTreeNormalizer.h"
#include "edu/stanford/nlp/trees/DiskTreebank.h"
#include "edu/stanford/nlp/trees/LabeledScoredTreeFactory.h"
#include "edu/stanford/nlp/trees/PennTreeReader.h"
#include "edu/stanford/nlp/trees/Tree.h"
#include "edu/stanford/nlp/trees/TreeReader.h"
#include "edu/stanford/nlp/trees/TreeReaderFactory.h"
#include "edu/stanford/nlp/trees/TreeTransformer.h"
#include "edu/stanford/nlp/trees/Treebank.h"
#include "edu/stanford/nlp/util/Generics.h"
#include "java/io/Reader.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Set.h"

@interface EduStanfordNlpParserLexparserTreebankAnnotator_$Lambda$1 : NSObject < EduStanfordNlpTreesTreeReaderFactory >

- (id<EduStanfordNlpTreesTreeReader>)newTreeReaderWithJavaIoReader:(JavaIoReader *)inArg OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_STATIC_INIT(EduStanfordNlpParserLexparserTreebankAnnotator_$Lambda$1)

inline EduStanfordNlpParserLexparserTreebankAnnotator_$Lambda$1 *EduStanfordNlpParserLexparserTreebankAnnotator_$Lambda$1_get_instance();
static EduStanfordNlpParserLexparserTreebankAnnotator_$Lambda$1 *EduStanfordNlpParserLexparserTreebankAnnotator_$Lambda$1_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpParserLexparserTreebankAnnotator_$Lambda$1, instance, EduStanfordNlpParserLexparserTreebankAnnotator_$Lambda$1 *)

__attribute__((unused)) static void EduStanfordNlpParserLexparserTreebankAnnotator_$Lambda$1_init(EduStanfordNlpParserLexparserTreebankAnnotator_$Lambda$1 *self);

__attribute__((unused)) static EduStanfordNlpParserLexparserTreebankAnnotator_$Lambda$1 *new_EduStanfordNlpParserLexparserTreebankAnnotator_$Lambda$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpParserLexparserTreebankAnnotator_$Lambda$1 *create_EduStanfordNlpParserLexparserTreebankAnnotator_$Lambda$1_init();

@implementation EduStanfordNlpParserLexparserTreebankAnnotator

- (id<JavaUtilList>)annotateTreesWithJavaUtilList:(id<JavaUtilList>)trees {
  id<JavaUtilList> annotatedTrees = new_JavaUtilArrayList_init();
  for (EduStanfordNlpTreesTree * __strong tree in nil_chk(trees)) {
    [annotatedTrees addWithId:[((id<EduStanfordNlpTreesTreeTransformer>) nil_chk(treeTransformer_)) transformTreeWithEduStanfordNlpTreesTree:tree]];
  }
  return annotatedTrees;
}

- (id<JavaUtilList>)deannotateTreesWithJavaUtilList:(id<JavaUtilList>)trees {
  id<JavaUtilList> deannotatedTrees = new_JavaUtilArrayList_init();
  for (EduStanfordNlpTreesTree * __strong tree in nil_chk(trees)) {
    [deannotatedTrees addWithId:[((id<EduStanfordNlpTreesTreeTransformer>) nil_chk(treeUnTransformer_)) transformTreeWithEduStanfordNlpTreesTree:tree]];
  }
  return deannotatedTrees;
}

+ (id<JavaUtilList>)getTreesWithNSString:(NSString *)path
                                 withInt:(jint)low
                                 withInt:(jint)high
                                 withInt:(jint)minLength
                                 withInt:(jint)maxLength {
  return EduStanfordNlpParserLexparserTreebankAnnotator_getTreesWithNSString_withInt_withInt_withInt_withInt_(path, low, high, minLength, maxLength);
}

+ (id<JavaUtilList>)removeDependencyRootsWithJavaUtilList:(id<JavaUtilList>)trees {
  return EduStanfordNlpParserLexparserTreebankAnnotator_removeDependencyRootsWithJavaUtilList_(trees);
}

+ (EduStanfordNlpTreesTree *)removeDependencyRootWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)tree {
  return EduStanfordNlpParserLexparserTreebankAnnotator_removeDependencyRootWithEduStanfordNlpTreesTree_(tree);
}

- (EduStanfordNlpTreesTree *)collinizeWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)tree {
  return [((id<EduStanfordNlpTreesTreeTransformer>) nil_chk(collinizer_)) transformTreeWithEduStanfordNlpTreesTree:tree];
}

- (instancetype)initWithEduStanfordNlpParserLexparserOptions:(EduStanfordNlpParserLexparserOptions *)op
                                                withNSString:(NSString *)treebankRoot {
  EduStanfordNlpParserLexparserTreebankAnnotator_initWithEduStanfordNlpParserLexparserOptions_withNSString_(self, op, treebankRoot);
  return self;
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  EduStanfordNlpParserLexparserTreebankAnnotator_mainWithNSStringArray_(args);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaUtilList;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 3, 1, -1, 2, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 4, 5, -1, 6, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 7, 1, -1, 2, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x8, 8, 9, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x1, 10, 9, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 12, 13, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(annotateTreesWithJavaUtilList:);
  methods[1].selector = @selector(deannotateTreesWithJavaUtilList:);
  methods[2].selector = @selector(getTreesWithNSString:withInt:withInt:withInt:withInt:);
  methods[3].selector = @selector(removeDependencyRootsWithJavaUtilList:);
  methods[4].selector = @selector(removeDependencyRootWithEduStanfordNlpTreesTree:);
  methods[5].selector = @selector(collinizeWithEduStanfordNlpTreesTree:);
  methods[6].selector = @selector(initWithEduStanfordNlpParserLexparserOptions:withNSString:);
  methods[7].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "treeTransformer_", "LEduStanfordNlpTreesTreeTransformer;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "treeUnTransformer_", "LEduStanfordNlpTreesTreeTransformer;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "collinizer_", "LEduStanfordNlpTreesTreeTransformer;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "op_", "LEduStanfordNlpParserLexparserOptions;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "annotateTrees", "LJavaUtilList;", "(Ljava/util/List<Ledu/stanford/nlp/trees/Tree;>;)Ljava/util/List<Ledu/stanford/nlp/trees/Tree;>;", "deannotateTrees", "getTrees", "LNSString;IIII", "(Ljava/lang/String;IIII)Ljava/util/List<Ledu/stanford/nlp/trees/Tree;>;", "removeDependencyRoots", "removeDependencyRoot", "LEduStanfordNlpTreesTree;", "collinize", "LEduStanfordNlpParserLexparserOptions;LNSString;", "main", "[LNSString;" };
  static const J2ObjcClassInfo _EduStanfordNlpParserLexparserTreebankAnnotator = { "TreebankAnnotator", "edu.stanford.nlp.parser.lexparser", ptrTable, methods, fields, 7, 0x1, 8, 4, -1, -1, -1, -1, -1 };
  return &_EduStanfordNlpParserLexparserTreebankAnnotator;
}

@end

id<JavaUtilList> EduStanfordNlpParserLexparserTreebankAnnotator_getTreesWithNSString_withInt_withInt_withInt_withInt_(NSString *path, jint low, jint high, jint minLength, jint maxLength) {
  EduStanfordNlpParserLexparserTreebankAnnotator_initialize();
  EduStanfordNlpTreesTreebank *treebank = new_EduStanfordNlpTreesDiskTreebank_initWithEduStanfordNlpTreesTreeReaderFactory_(JreLoadStatic(EduStanfordNlpParserLexparserTreebankAnnotator_$Lambda$1, instance));
  [treebank loadPathWithNSString:path withJavaIoFileFilter:new_EduStanfordNlpIoNumberRangeFileFilter_initWithInt_withInt_withBoolean_(low, high, true)];
  id<JavaUtilList> trees = new_JavaUtilArrayList_init();
  for (EduStanfordNlpTreesTree * __strong tree in treebank) {
    if ([((JavaUtilArrayList *) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(tree)) yield])) size] <= maxLength && [((JavaUtilArrayList *) nil_chk([tree yield])) size] >= minLength) {
      [trees addWithId:tree];
    }
  }
  return trees;
}

id<JavaUtilList> EduStanfordNlpParserLexparserTreebankAnnotator_removeDependencyRootsWithJavaUtilList_(id<JavaUtilList> trees) {
  EduStanfordNlpParserLexparserTreebankAnnotator_initialize();
  id<JavaUtilList> prunedTrees = new_JavaUtilArrayList_init();
  for (EduStanfordNlpTreesTree * __strong tree in nil_chk(trees)) {
    [prunedTrees addWithId:EduStanfordNlpParserLexparserTreebankAnnotator_removeDependencyRootWithEduStanfordNlpTreesTree_(tree)];
  }
  return prunedTrees;
}

EduStanfordNlpTreesTree *EduStanfordNlpParserLexparserTreebankAnnotator_removeDependencyRootWithEduStanfordNlpTreesTree_(EduStanfordNlpTreesTree *tree) {
  EduStanfordNlpParserLexparserTreebankAnnotator_initialize();
  id<JavaUtilList> childList = [((EduStanfordNlpTreesTree *) nil_chk(tree)) getChildrenAsList];
  EduStanfordNlpTreesTree *last = [((id<JavaUtilList>) nil_chk(childList)) getWithInt:[childList size] - 1];
  if (![((NSString *) nil_chk([((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(last)) label])) value])) isEqual:EduStanfordNlpParserLexparserLexicon_BOUNDARY_TAG]) {
    return tree;
  }
  id<JavaUtilList> lastGoneList = [childList subListWithInt:0 withInt:[childList size] - 1];
  [tree setChildrenWithJavaUtilList:lastGoneList];
  return tree;
}

void EduStanfordNlpParserLexparserTreebankAnnotator_initWithEduStanfordNlpParserLexparserOptions_withNSString_(EduStanfordNlpParserLexparserTreebankAnnotator *self, EduStanfordNlpParserLexparserOptions *op, NSString *treebankRoot) {
  NSObject_init(self);
  ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(((EduStanfordNlpParserLexparserOptions *) nil_chk(op))->trainOptions_))->splitters_ = EduStanfordNlpParserLexparserParentAnnotationStats_getEnglishSplitCategoriesWithNSString_(treebankRoot);
  ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(op->trainOptions_))->sisterSplitters_ = EduStanfordNlpUtilGenerics_newHashSetWithJavaUtilCollection_(JavaUtilArrays_asListWithNSObjectArray_([((id<EduStanfordNlpParserLexparserTreebankLangParserParams>) nil_chk(op->tlpParams_)) sisterSplitters]));
  [op setOptionsWithNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"-acl03pcfg", @"-cnf" } count:2 type:NSString_class_()]];
  self->treeTransformer_ = new_EduStanfordNlpParserLexparserTreeAnnotatorAndBinarizer_initWithEduStanfordNlpParserLexparserTreebankLangParserParams_withBoolean_withBoolean_withBoolean_withEduStanfordNlpParserLexparserOptions_(op->tlpParams_, op->forceCNF_, ![((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(op->trainOptions_)) outsideFactor], true, op);
  self->treeUnTransformer_ = new_EduStanfordNlpParserLexparserDebinarizer_initWithBoolean_(op->forceCNF_);
  self->collinizer_ = [((id<EduStanfordNlpParserLexparserTreebankLangParserParams>) nil_chk(op->tlpParams_)) collinizer];
  self->op_ = op;
}

EduStanfordNlpParserLexparserTreebankAnnotator *new_EduStanfordNlpParserLexparserTreebankAnnotator_initWithEduStanfordNlpParserLexparserOptions_withNSString_(EduStanfordNlpParserLexparserOptions *op, NSString *treebankRoot) {
  J2OBJC_NEW_IMPL(EduStanfordNlpParserLexparserTreebankAnnotator, initWithEduStanfordNlpParserLexparserOptions_withNSString_, op, treebankRoot)
}

EduStanfordNlpParserLexparserTreebankAnnotator *create_EduStanfordNlpParserLexparserTreebankAnnotator_initWithEduStanfordNlpParserLexparserOptions_withNSString_(EduStanfordNlpParserLexparserOptions *op, NSString *treebankRoot) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpParserLexparserTreebankAnnotator, initWithEduStanfordNlpParserLexparserOptions_withNSString_, op, treebankRoot)
}

void EduStanfordNlpParserLexparserTreebankAnnotator_mainWithNSStringArray_(IOSObjectArray *args) {
  EduStanfordNlpParserLexparserTreebankAnnotator_initialize();
  *JreLoadStaticRef(EduStanfordNlpLingCategoryWordTag, printWordTag) = false;
  NSString *path = IOSObjectArray_Get(nil_chk(args), 0);
  id<JavaUtilList> trees = EduStanfordNlpParserLexparserTreebankAnnotator_getTreesWithNSString_withInt_withInt_withInt_withInt_(path, 200, 219, 0, 10);
  [((EduStanfordNlpTreesTree *) nil_chk([((id<JavaUtilIterator>) nil_chk([((id<JavaUtilList>) nil_chk(trees)) iterator])) next])) pennPrint];
  EduStanfordNlpParserLexparserOptions *op = new_EduStanfordNlpParserLexparserOptions_init();
  id<JavaUtilList> annotatedTrees = EduStanfordNlpParserLexparserTreebankAnnotator_removeDependencyRootsWithJavaUtilList_([new_EduStanfordNlpParserLexparserTreebankAnnotator_initWithEduStanfordNlpParserLexparserOptions_withNSString_(op, path) annotateTreesWithJavaUtilList:trees]);
  [((EduStanfordNlpTreesTree *) nil_chk([((id<JavaUtilIterator>) nil_chk([((id<JavaUtilList>) nil_chk(annotatedTrees)) iterator])) next])) pennPrint];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpParserLexparserTreebankAnnotator)

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpParserLexparserTreebankAnnotator_$Lambda$1)

@implementation EduStanfordNlpParserLexparserTreebankAnnotator_$Lambda$1

- (id<EduStanfordNlpTreesTreeReader>)newTreeReaderWithJavaIoReader:(JavaIoReader *)inArg {
  return new_EduStanfordNlpTreesPennTreeReader_initWithJavaIoReader_withEduStanfordNlpTreesTreeFactory_withEduStanfordNlpTreesTreeNormalizer_(inArg, new_EduStanfordNlpTreesLabeledScoredTreeFactory_initWithEduStanfordNlpLingLabelFactory_(new_EduStanfordNlpLingWordFactory_init()), new_EduStanfordNlpTreesBobChrisTreeNormalizer_init());
}

+ (void)initialize {
  if (self == [EduStanfordNlpParserLexparserTreebankAnnotator_$Lambda$1 class]) {
    EduStanfordNlpParserLexparserTreebankAnnotator_$Lambda$1_instance = new_EduStanfordNlpParserLexparserTreebankAnnotator_$Lambda$1_init();
    J2OBJC_SET_INITIALIZED(EduStanfordNlpParserLexparserTreebankAnnotator_$Lambda$1)
  }
}

@end

void EduStanfordNlpParserLexparserTreebankAnnotator_$Lambda$1_init(EduStanfordNlpParserLexparserTreebankAnnotator_$Lambda$1 *self) {
  NSObject_init(self);
}

EduStanfordNlpParserLexparserTreebankAnnotator_$Lambda$1 *new_EduStanfordNlpParserLexparserTreebankAnnotator_$Lambda$1_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpParserLexparserTreebankAnnotator_$Lambda$1, init)
}

EduStanfordNlpParserLexparserTreebankAnnotator_$Lambda$1 *create_EduStanfordNlpParserLexparserTreebankAnnotator_$Lambda$1_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpParserLexparserTreebankAnnotator_$Lambda$1, init)
}
