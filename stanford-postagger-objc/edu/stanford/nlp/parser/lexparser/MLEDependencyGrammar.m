//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/parser/lexparser/MLEDependencyGrammar.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/ling/HasTag.h"
#include "edu/stanford/nlp/ling/HasWord.h"
#include "edu/stanford/nlp/ling/Label.h"
#include "edu/stanford/nlp/parser/lexparser/AbstractDependencyGrammar.h"
#include "edu/stanford/nlp/parser/lexparser/BasicCategoryTagProjection.h"
#include "edu/stanford/nlp/parser/lexparser/IntDependency.h"
#include "edu/stanford/nlp/parser/lexparser/IntTaggedWord.h"
#include "edu/stanford/nlp/parser/lexparser/Lexicon.h"
#include "edu/stanford/nlp/parser/lexparser/MLEDependencyGrammar.h"
#include "edu/stanford/nlp/parser/lexparser/Options.h"
#include "edu/stanford/nlp/parser/lexparser/TagProjection.h"
#include "edu/stanford/nlp/parser/lexparser/TestOptions.h"
#include "edu/stanford/nlp/parser/lexparser/TestTagProjection.h"
#include "edu/stanford/nlp/parser/lexparser/TreebankLangParserParams.h"
#include "edu/stanford/nlp/stats/ClassicCounter.h"
#include "edu/stanford/nlp/trees/Tree.h"
#include "edu/stanford/nlp/trees/TreebankLanguagePack.h"
#include "edu/stanford/nlp/util/HashIndex.h"
#include "edu/stanford/nlp/util/Index.h"
#include "edu/stanford/nlp/util/StringUtils.h"
#include "java/io/BufferedReader.h"
#include "java/io/IOException.h"
#include "java/io/ObjectInputStream.h"
#include "java/io/ObjectOutputStream.h"
#include "java/io/PrintStream.h"
#include "java/io/PrintWriter.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/Short.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/text/NumberFormat.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Set.h"

@interface EduStanfordNlpParserLexparserMLEDependencyGrammar () {
 @public
  id<EduStanfordNlpParserLexparserTagProjection> smoothTP_;
  id<EduStanfordNlpUtilIndex> smoothTPIndex_;
}

- (EduStanfordNlpParserLexparserIntTaggedWord *)getCachedITWWithShort:(jshort)tag;

- (jshort)tagProjectWithShort:(jshort)tag;

- (void)expandArgWithEduStanfordNlpParserLexparserIntDependency:(EduStanfordNlpParserLexparserIntDependency *)dependency
                                                      withShort:(jshort)valBinDist
                                                     withDouble:(jdouble)count;

- (void)expandStopWithEduStanfordNlpParserLexparserIntDependency:(EduStanfordNlpParserLexparserIntDependency *)dependency
                                                       withShort:(jshort)distBinDist
                                                      withDouble:(jdouble)count
                                                     withBoolean:(jboolean)wildForStop;

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)stream;

- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)stream;

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserMLEDependencyGrammar, smoothTP_, id<EduStanfordNlpParserLexparserTagProjection>)
J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserMLEDependencyGrammar, smoothTPIndex_, id<EduStanfordNlpUtilIndex>)

inline NSString *EduStanfordNlpParserLexparserMLEDependencyGrammar_get_TP_PREFIX();
static NSString *EduStanfordNlpParserLexparserMLEDependencyGrammar_TP_PREFIX = @".*TP*.";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpParserLexparserMLEDependencyGrammar, TP_PREFIX, NSString *)

inline jboolean EduStanfordNlpParserLexparserMLEDependencyGrammar_get_verbose();
#define EduStanfordNlpParserLexparserMLEDependencyGrammar_verbose false
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpParserLexparserMLEDependencyGrammar, verbose, jboolean)

inline jlong EduStanfordNlpParserLexparserMLEDependencyGrammar_get_serialVersionUID();
#define EduStanfordNlpParserLexparserMLEDependencyGrammar_serialVersionUID 1LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpParserLexparserMLEDependencyGrammar, serialVersionUID, jlong)

__attribute__((unused)) static EduStanfordNlpParserLexparserIntTaggedWord *EduStanfordNlpParserLexparserMLEDependencyGrammar_getCachedITWWithShort_(EduStanfordNlpParserLexparserMLEDependencyGrammar *self, jshort tag);

__attribute__((unused)) static jshort EduStanfordNlpParserLexparserMLEDependencyGrammar_tagProjectWithShort_(EduStanfordNlpParserLexparserMLEDependencyGrammar *self, jshort tag);

__attribute__((unused)) static void EduStanfordNlpParserLexparserMLEDependencyGrammar_expandArgWithEduStanfordNlpParserLexparserIntDependency_withShort_withDouble_(EduStanfordNlpParserLexparserMLEDependencyGrammar *self, EduStanfordNlpParserLexparserIntDependency *dependency, jshort valBinDist, jdouble count);

__attribute__((unused)) static void EduStanfordNlpParserLexparserMLEDependencyGrammar_expandStopWithEduStanfordNlpParserLexparserIntDependency_withShort_withDouble_withBoolean_(EduStanfordNlpParserLexparserMLEDependencyGrammar *self, EduStanfordNlpParserLexparserIntDependency *dependency, jshort distBinDist, jdouble count, jboolean wildForStop);

@implementation EduStanfordNlpParserLexparserMLEDependencyGrammar

- (instancetype)initWithEduStanfordNlpParserLexparserTreebankLangParserParams:(id<EduStanfordNlpParserLexparserTreebankLangParserParams>)tlpParams
                                                                  withBoolean:(jboolean)directional
                                                                  withBoolean:(jboolean)distance
                                                                  withBoolean:(jboolean)coarseDistance
                                                                  withBoolean:(jboolean)basicCategoryTagsInDependencyGrammar
                                     withEduStanfordNlpParserLexparserOptions:(EduStanfordNlpParserLexparserOptions *)op
                                                  withEduStanfordNlpUtilIndex:(id<EduStanfordNlpUtilIndex>)wordIndex
                                                  withEduStanfordNlpUtilIndex:(id<EduStanfordNlpUtilIndex>)tagIndex {
  EduStanfordNlpParserLexparserMLEDependencyGrammar_initWithEduStanfordNlpParserLexparserTreebankLangParserParams_withBoolean_withBoolean_withBoolean_withBoolean_withEduStanfordNlpParserLexparserOptions_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(self, tlpParams, directional, distance, coarseDistance, basicCategoryTagsInDependencyGrammar, op, wordIndex, tagIndex);
  return self;
}

- (instancetype)initWithEduStanfordNlpParserLexparserTagProjection:(id<EduStanfordNlpParserLexparserTagProjection>)tagProjection
         withEduStanfordNlpParserLexparserTreebankLangParserParams:(id<EduStanfordNlpParserLexparserTreebankLangParserParams>)tlpParams
                                                       withBoolean:(jboolean)directional
                                                       withBoolean:(jboolean)useDistance
                                                       withBoolean:(jboolean)useCoarseDistance
                          withEduStanfordNlpParserLexparserOptions:(EduStanfordNlpParserLexparserOptions *)op
                                       withEduStanfordNlpUtilIndex:(id<EduStanfordNlpUtilIndex>)wordIndex
                                       withEduStanfordNlpUtilIndex:(id<EduStanfordNlpUtilIndex>)tagIndex {
  EduStanfordNlpParserLexparserMLEDependencyGrammar_initWithEduStanfordNlpParserLexparserTagProjection_withEduStanfordNlpParserLexparserTreebankLangParserParams_withBoolean_withBoolean_withBoolean_withEduStanfordNlpParserLexparserOptions_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(self, tagProjection, tlpParams, directional, useDistance, useCoarseDistance, op, wordIndex, tagIndex);
  return self;
}

- (NSString *)description {
  JavaTextNumberFormat *nf = JavaTextNumberFormat_getNumberInstance();
  [((JavaTextNumberFormat *) nil_chk(nf)) setMaximumFractionDigitsWithInt:2];
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_initWithInt_(2000);
  NSString *cl = [[self getClass] getName];
  (void) [((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:[((NSString *) nil_chk(cl)) substring:[cl lastIndexOf:'.'] + 1]])) appendWithNSString:@"[tagbins="];
  (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithInt:numTagBins_])) appendWithNSString:@",wordTokens="])) appendWithInt:numWordTokens_])) appendWithNSString:@"; head -> arg\n"];
  (void) [sb appendWithNSString:@"]"];
  return [sb description];
}

- (jboolean)pruneTWWithEduStanfordNlpParserLexparserIntTaggedWord:(EduStanfordNlpParserLexparserIntTaggedWord *)argTW {
  IOSObjectArray *punctTags = [((id<EduStanfordNlpTreesTreebankLanguagePack>) nil_chk(tlp_)) punctuationTags];
  {
    IOSObjectArray *a__ = punctTags;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *punctTag = *b__++;
      if (((EduStanfordNlpParserLexparserIntTaggedWord *) nil_chk(argTW))->tag_ == [((id<EduStanfordNlpUtilIndex>) nil_chk(tagIndex_)) indexOfWithId:punctTag]) {
        return true;
      }
    }
  }
  return false;
}

+ (EduStanfordNlpParserLexparserMLEDependencyGrammar_EndHead *)treeToDependencyHelperWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)tree
                                                                                                withJavaUtilList:(id<JavaUtilList>)depList
                                                                                                         withInt:(jint)loc
                                                                                     withEduStanfordNlpUtilIndex:(id<EduStanfordNlpUtilIndex>)wordIndex
                                                                                     withEduStanfordNlpUtilIndex:(id<EduStanfordNlpUtilIndex>)tagIndex {
  return EduStanfordNlpParserLexparserMLEDependencyGrammar_treeToDependencyHelperWithEduStanfordNlpTreesTree_withJavaUtilList_withInt_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(tree, depList, loc, wordIndex, tagIndex);
}

- (void)dumpSizes {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I", @"arg counter ", [((EduStanfordNlpStatsClassicCounter *) nil_chk(argCounter_)) size])];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$I", @"stop counter ", [((EduStanfordNlpStatsClassicCounter *) nil_chk(stopCounter_)) size])];
}

+ (id<JavaUtilList>)treeToDependencyListWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)tree
                                        withEduStanfordNlpUtilIndex:(id<EduStanfordNlpUtilIndex>)wordIndex
                                        withEduStanfordNlpUtilIndex:(id<EduStanfordNlpUtilIndex>)tagIndex {
  return EduStanfordNlpParserLexparserMLEDependencyGrammar_treeToDependencyListWithEduStanfordNlpTreesTree_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(tree, wordIndex, tagIndex);
}

- (jdouble)scoreAllWithJavaUtilCollection:(id<JavaUtilCollection>)deps {
  jdouble totalScore = 0.0;
  for (EduStanfordNlpParserLexparserIntDependency * __strong d in nil_chk(deps)) {
    jdouble score = [self scoreWithEduStanfordNlpParserLexparserIntDependency:d];
    if (score > JavaLangDouble_NEGATIVE_INFINITY) {
      JrePlusAssignDoubleD(&totalScore, score);
    }
  }
  return totalScore;
}

- (void)tuneWithJavaUtilCollection:(id<JavaUtilCollection>)trees {
  id<JavaUtilList> deps = new_JavaUtilArrayList_init();
  for (EduStanfordNlpTreesTree * __strong tree in nil_chk(trees)) {
    [deps addAllWithJavaUtilCollection:EduStanfordNlpParserLexparserMLEDependencyGrammar_treeToDependencyListWithEduStanfordNlpTreesTree_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(tree, wordIndex_, tagIndex_)];
  }
  jdouble bestScore = JavaLangDouble_NEGATIVE_INFINITY;
  jdouble bestSmooth_stop = 0.0;
  jdouble bestSmooth_aTW_hTWd = 0.0;
  jdouble bestSmooth_aT_hTWd = 0.0;
  jdouble bestInterp = 0.0;
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"Tuning smooth_stop..."];
  for (smooth_stop_ = 1.0 / 100.0; smooth_stop_ < 100.0; JreTimesAssignDoubleD(&smooth_stop_, 1.25)) {
    jdouble totalScore = 0.0;
    for (EduStanfordNlpParserLexparserIntDependency * __strong dep in deps) {
      if (![self rootTWWithEduStanfordNlpParserLexparserIntTaggedWord:((EduStanfordNlpParserLexparserIntDependency *) nil_chk(dep))->head_]) {
        jdouble stopProb = [self getStopProbWithEduStanfordNlpParserLexparserIntDependency:dep];
        if (![((EduStanfordNlpParserLexparserIntTaggedWord *) nil_chk(dep->arg_)) isEqual:stopTW_]) {
          stopProb = 1.0 - stopProb;
        }
        if (stopProb > 0.0) {
          JrePlusAssignDoubleD(&totalScore, JavaLangMath_logWithDouble_(stopProb));
        }
      }
    }
    if (totalScore > bestScore) {
      bestScore = totalScore;
      bestSmooth_stop = smooth_stop_;
    }
  }
  smooth_stop_ = bestSmooth_stop;
  [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:JreStrcat("$D", @"Tuning selected smooth_stop: ", smooth_stop_)];
  for (id<JavaUtilIterator> iter = [deps iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) {
    EduStanfordNlpParserLexparserIntDependency *dep = [iter next];
    if ([((EduStanfordNlpParserLexparserIntTaggedWord *) nil_chk(((EduStanfordNlpParserLexparserIntDependency *) nil_chk(dep))->arg_)) isEqual:stopTW_]) {
      [iter remove];
    }
  }
  [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:@"Tuning other parameters..."];
  if (!useSmoothTagProjection_) {
    bestScore = JavaLangDouble_NEGATIVE_INFINITY;
    for (smooth_aTW_hTWd_ = 0.5; smooth_aTW_hTWd_ < 100.0; JreTimesAssignDoubleD(&smooth_aTW_hTWd_, 1.25)) {
      [JreLoadStatic(JavaLangSystem, err) printWithNSString:@"."];
      for (smooth_aT_hTWd_ = 0.5; smooth_aT_hTWd_ < 100.0; JreTimesAssignDoubleD(&smooth_aT_hTWd_, 1.25)) {
        for (interp_ = 0.02; interp_ < 1.0; JrePlusAssignDoubleD(&interp_, 0.02)) {
          jdouble totalScore = 0.0;
          for (EduStanfordNlpParserLexparserIntDependency * __strong dep in deps) {
            jdouble score = [self scoreWithEduStanfordNlpParserLexparserIntDependency:dep];
            if (score > JavaLangDouble_NEGATIVE_INFINITY) {
              JrePlusAssignDoubleD(&totalScore, score);
            }
          }
          if (totalScore > bestScore) {
            bestScore = totalScore;
            bestInterp = interp_;
            bestSmooth_aTW_hTWd = smooth_aTW_hTWd_;
            bestSmooth_aT_hTWd = smooth_aT_hTWd_;
            [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:JreStrcat("$D$D", @"Current best interp: ", interp_, @" with score ", totalScore)];
          }
        }
      }
    }
    smooth_aTW_hTWd_ = bestSmooth_aTW_hTWd;
    smooth_aT_hTWd_ = bestSmooth_aT_hTWd;
    interp_ = bestInterp;
  }
  else {
    jdouble bestSmooth_aTW_aT = 0.0;
    jdouble bestSmooth_aTW_hTd = 0.0;
    jdouble bestSmooth_aT_hTd = 0.0;
    bestScore = JavaLangDouble_NEGATIVE_INFINITY;
    for (smooth_aTW_hTWd_ = 1.125; smooth_aTW_hTWd_ < 100.0; JreTimesAssignDoubleD(&smooth_aTW_hTWd_, 1.5)) {
      [JreLoadStatic(JavaLangSystem, err) printWithNSString:@"#"];
      for (smooth_aT_hTWd_ = 1.125; smooth_aT_hTWd_ < 100.0; JreTimesAssignDoubleD(&smooth_aT_hTWd_, 1.5)) {
        [JreLoadStatic(JavaLangSystem, err) printWithNSString:@":"];
        for (smooth_aTW_aT_ = 1.125; smooth_aTW_aT_ < 200.0; JreTimesAssignDoubleD(&smooth_aTW_aT_, 1.5)) {
          [JreLoadStatic(JavaLangSystem, err) printWithNSString:@"."];
          for (smooth_aTW_hTd_ = 1.125; smooth_aTW_hTd_ < 100.0; JreTimesAssignDoubleD(&smooth_aTW_hTd_, 1.5)) {
            for (smooth_aT_hTd_ = 1.125; smooth_aT_hTd_ < 100.0; JreTimesAssignDoubleD(&smooth_aT_hTd_, 1.5)) {
              for (interp_ = 0.2; interp_ <= 0.8; JrePlusAssignDoubleD(&interp_, 0.02)) {
                jdouble totalScore = 0.0;
                for (EduStanfordNlpParserLexparserIntDependency * __strong dep in deps) {
                  jdouble score = [self scoreWithEduStanfordNlpParserLexparserIntDependency:dep];
                  if (score > JavaLangDouble_NEGATIVE_INFINITY) {
                    JrePlusAssignDoubleD(&totalScore, score);
                  }
                }
                if (totalScore > bestScore) {
                  bestScore = totalScore;
                  bestInterp = interp_;
                  bestSmooth_aTW_hTWd = smooth_aTW_hTWd_;
                  bestSmooth_aT_hTWd = smooth_aT_hTWd_;
                  bestSmooth_aTW_aT = smooth_aTW_aT_;
                  bestSmooth_aTW_hTd = smooth_aTW_hTd_;
                  bestSmooth_aT_hTd = smooth_aT_hTd_;
                  [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:JreStrcat("$D$D", @"Current best interp: ", interp_, @" with score ", totalScore)];
                }
              }
            }
          }
        }
      }
      [JreLoadStatic(JavaLangSystem, err) println];
    }
    smooth_aTW_hTWd_ = bestSmooth_aTW_hTWd;
    smooth_aT_hTWd_ = bestSmooth_aT_hTWd;
    smooth_aTW_aT_ = bestSmooth_aTW_aT;
    smooth_aTW_hTd_ = bestSmooth_aTW_hTd;
    smooth_aT_hTd_ = bestSmooth_aT_hTd;
    interp_ = bestInterp;
  }
  [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:JreStrcat("$D$D$D$D$D$D", @"\nTuning selected smooth_aTW_hTWd: ", smooth_aTW_hTWd_, @" smooth_aT_hTWd: ", smooth_aT_hTWd_, @" interp: ", interp_, @" smooth_aTW_aT: ", smooth_aTW_aT_, @" smooth_aTW_hTd: ", smooth_aTW_hTd_, @" smooth_aT_hTd: ", smooth_aT_hTd_)];
}

- (void)addRuleWithEduStanfordNlpParserLexparserIntDependency:(EduStanfordNlpParserLexparserIntDependency *)dependency
                                                   withDouble:(jdouble)count {
  if (!directional_) {
    dependency = new_EduStanfordNlpParserLexparserIntDependency_initWithEduStanfordNlpParserLexparserIntTaggedWord_withEduStanfordNlpParserLexparserIntTaggedWord_withBoolean_withInt_(((EduStanfordNlpParserLexparserIntDependency *) nil_chk(dependency))->head_, dependency->arg_, false, dependency->distance_);
  }
  [self expandDependencyWithEduStanfordNlpParserLexparserIntDependency:dependency withDouble:count];
}

- (EduStanfordNlpParserLexparserIntTaggedWord *)getCachedITWWithShort:(jshort)tag {
  return EduStanfordNlpParserLexparserMLEDependencyGrammar_getCachedITWWithShort_(self, tag);
}

- (void)expandDependencyWithEduStanfordNlpParserLexparserIntDependency:(EduStanfordNlpParserLexparserIntDependency *)dependency
                                                            withDouble:(jdouble)count {
  if (((EduStanfordNlpParserLexparserIntDependency *) nil_chk(dependency))->head_ == nil || dependency->arg_ == nil) {
    return;
  }
  if (dependency->arg_->word_ != EduStanfordNlpParserLexparserIntTaggedWord_STOP_WORD_INT) {
    EduStanfordNlpParserLexparserMLEDependencyGrammar_expandArgWithEduStanfordNlpParserLexparserIntDependency_withShort_withDouble_(self, dependency, [self valenceBinWithInt:dependency->distance_], count);
  }
  EduStanfordNlpParserLexparserMLEDependencyGrammar_expandStopWithEduStanfordNlpParserLexparserIntDependency_withShort_withDouble_withBoolean_(self, dependency, [self distanceBinWithInt:dependency->distance_], count, true);
}

- (jshort)tagProjectWithShort:(jshort)tag {
  return EduStanfordNlpParserLexparserMLEDependencyGrammar_tagProjectWithShort_(self, tag);
}

- (void)expandArgWithEduStanfordNlpParserLexparserIntDependency:(EduStanfordNlpParserLexparserIntDependency *)dependency
                                                      withShort:(jshort)valBinDist
                                                     withDouble:(jdouble)count {
  EduStanfordNlpParserLexparserMLEDependencyGrammar_expandArgWithEduStanfordNlpParserLexparserIntDependency_withShort_withDouble_(self, dependency, valBinDist, count);
}

- (void)expandStopWithEduStanfordNlpParserLexparserIntDependency:(EduStanfordNlpParserLexparserIntDependency *)dependency
                                                       withShort:(jshort)distBinDist
                                                      withDouble:(jdouble)count
                                                     withBoolean:(jboolean)wildForStop {
  EduStanfordNlpParserLexparserMLEDependencyGrammar_expandStopWithEduStanfordNlpParserLexparserIntDependency_withShort_withDouble_withBoolean_(self, dependency, distBinDist, count, wildForStop);
}

- (jdouble)countHistoryWithEduStanfordNlpParserLexparserIntDependency:(EduStanfordNlpParserLexparserIntDependency *)dependency {
  EduStanfordNlpParserLexparserIntDependency *temp = new_EduStanfordNlpParserLexparserIntDependency_initWithInt_withInt_withInt_withInt_withBoolean_withInt_(((EduStanfordNlpParserLexparserIntTaggedWord *) nil_chk(((EduStanfordNlpParserLexparserIntDependency *) nil_chk(dependency))->head_))->word_, [self tagBinWithInt:dependency->head_->tag_], ((EduStanfordNlpParserLexparserIntTaggedWord *) nil_chk(wildTW_))->word_, wildTW_->tag_, dependency->leftHeaded_, [self valenceBinWithInt:dependency->distance_]);
  return [((EduStanfordNlpStatsClassicCounter *) nil_chk(argCounter_)) getCountWithId:temp];
}

- (jdouble)scoreTBWithEduStanfordNlpParserLexparserIntDependency:(EduStanfordNlpParserLexparserIntDependency *)dependency {
  return ((EduStanfordNlpParserLexparserTestOptions *) nil_chk(((EduStanfordNlpParserLexparserOptions *) nil_chk(op_))->testOptions_))->depWeight_ * JavaLangMath_logWithDouble_([self probTBWithEduStanfordNlpParserLexparserIntDependency:dependency]);
}

- (jdouble)probTBWithEduStanfordNlpParserLexparserIntDependency:(EduStanfordNlpParserLexparserIntDependency *)dependency {
  jboolean leftHeaded = ((EduStanfordNlpParserLexparserIntDependency *) nil_chk(dependency))->leftHeaded_ && directional_;
  jint hW = ((EduStanfordNlpParserLexparserIntTaggedWord *) nil_chk(dependency->head_))->word_;
  jint aW = ((EduStanfordNlpParserLexparserIntTaggedWord *) nil_chk(dependency->arg_))->word_;
  jshort hT = dependency->head_->tag_;
  jshort aT = dependency->arg_->tag_;
  EduStanfordNlpParserLexparserIntTaggedWord *aTW = dependency->arg_;
  EduStanfordNlpParserLexparserIntTaggedWord *hTW = dependency->head_;
  jboolean isRoot = [self rootTWWithEduStanfordNlpParserLexparserIntTaggedWord:dependency->head_];
  jdouble pb_stop_hTWds;
  if (isRoot) {
    pb_stop_hTWds = 0.0;
  }
  else {
    pb_stop_hTWds = [self getStopProbWithEduStanfordNlpParserLexparserIntDependency:dependency];
  }
  if (dependency->arg_->word_ == EduStanfordNlpParserLexparserIntTaggedWord_STOP_WORD_INT) {
    return pb_stop_hTWds;
  }
  jdouble pb_go_hTWds = 1.0 - pb_stop_hTWds;
  jshort binDistance = [self valenceBinWithInt:dependency->distance_];
  EduStanfordNlpParserLexparserIntTaggedWord *anyHead = new_EduStanfordNlpParserLexparserIntTaggedWord_initWithInt_withInt_(EduStanfordNlpParserLexparserIntTaggedWord_ANY_WORD_INT, dependency->head_->tag_);
  EduStanfordNlpParserLexparserIntTaggedWord *anyArg = new_EduStanfordNlpParserLexparserIntTaggedWord_initWithInt_withInt_(EduStanfordNlpParserLexparserIntTaggedWord_ANY_WORD_INT, dependency->arg_->tag_);
  EduStanfordNlpParserLexparserIntTaggedWord *anyTagArg = new_EduStanfordNlpParserLexparserIntTaggedWord_initWithInt_withInt_(dependency->arg_->word_, EduStanfordNlpParserLexparserIntTaggedWord_ANY_TAG_INT);
  EduStanfordNlpParserLexparserIntDependency *temp = new_EduStanfordNlpParserLexparserIntDependency_initWithEduStanfordNlpParserLexparserIntTaggedWord_withEduStanfordNlpParserLexparserIntTaggedWord_withBoolean_withInt_(dependency->head_, dependency->arg_, leftHeaded, binDistance);
  jdouble c_aTW_hTWd = [((EduStanfordNlpStatsClassicCounter *) nil_chk(argCounter_)) getCountWithId:temp];
  temp = new_EduStanfordNlpParserLexparserIntDependency_initWithEduStanfordNlpParserLexparserIntTaggedWord_withEduStanfordNlpParserLexparserIntTaggedWord_withBoolean_withInt_(dependency->head_, anyArg, leftHeaded, binDistance);
  jdouble c_aT_hTWd = [((EduStanfordNlpStatsClassicCounter *) nil_chk(argCounter_)) getCountWithId:temp];
  temp = new_EduStanfordNlpParserLexparserIntDependency_initWithEduStanfordNlpParserLexparserIntTaggedWord_withEduStanfordNlpParserLexparserIntTaggedWord_withBoolean_withInt_(dependency->head_, wildTW_, leftHeaded, binDistance);
  jdouble c_hTWd = [((EduStanfordNlpStatsClassicCounter *) nil_chk(argCounter_)) getCountWithId:temp];
  temp = new_EduStanfordNlpParserLexparserIntDependency_initWithEduStanfordNlpParserLexparserIntTaggedWord_withEduStanfordNlpParserLexparserIntTaggedWord_withBoolean_withInt_(anyHead, dependency->arg_, leftHeaded, binDistance);
  jdouble c_aTW_hTd = [((EduStanfordNlpStatsClassicCounter *) nil_chk(argCounter_)) getCountWithId:temp];
  temp = new_EduStanfordNlpParserLexparserIntDependency_initWithEduStanfordNlpParserLexparserIntTaggedWord_withEduStanfordNlpParserLexparserIntTaggedWord_withBoolean_withInt_(anyHead, anyArg, leftHeaded, binDistance);
  jdouble c_aT_hTd = [((EduStanfordNlpStatsClassicCounter *) nil_chk(argCounter_)) getCountWithId:temp];
  temp = new_EduStanfordNlpParserLexparserIntDependency_initWithEduStanfordNlpParserLexparserIntTaggedWord_withEduStanfordNlpParserLexparserIntTaggedWord_withBoolean_withInt_(anyHead, wildTW_, leftHeaded, binDistance);
  jdouble c_hTd = [((EduStanfordNlpStatsClassicCounter *) nil_chk(argCounter_)) getCountWithId:temp];
  jshort aPT = JavaLangShort_MIN_VALUE;
  jdouble c_aPTW_hPTd = JavaLangDouble_NaN;
  jdouble c_aPT_hPTd = JavaLangDouble_NaN;
  jdouble c_hPTd = JavaLangDouble_NaN;
  jdouble c_aPTW_aPT = JavaLangDouble_NaN;
  jdouble c_aPT = JavaLangDouble_NaN;
  if (useSmoothTagProjection_) {
    aPT = EduStanfordNlpParserLexparserMLEDependencyGrammar_tagProjectWithShort_(self, dependency->arg_->tag_);
    jshort hPT = EduStanfordNlpParserLexparserMLEDependencyGrammar_tagProjectWithShort_(self, dependency->head_->tag_);
    EduStanfordNlpParserLexparserIntTaggedWord *projectedArg = new_EduStanfordNlpParserLexparserIntTaggedWord_initWithInt_withInt_(dependency->arg_->word_, aPT);
    EduStanfordNlpParserLexparserIntTaggedWord *projectedAnyHead = new_EduStanfordNlpParserLexparserIntTaggedWord_initWithInt_withInt_(EduStanfordNlpParserLexparserIntTaggedWord_ANY_WORD_INT, hPT);
    EduStanfordNlpParserLexparserIntTaggedWord *projectedAnyArg = new_EduStanfordNlpParserLexparserIntTaggedWord_initWithInt_withInt_(EduStanfordNlpParserLexparserIntTaggedWord_ANY_WORD_INT, aPT);
    temp = new_EduStanfordNlpParserLexparserIntDependency_initWithEduStanfordNlpParserLexparserIntTaggedWord_withEduStanfordNlpParserLexparserIntTaggedWord_withBoolean_withInt_(projectedAnyHead, projectedArg, leftHeaded, binDistance);
    c_aPTW_hPTd = [((EduStanfordNlpStatsClassicCounter *) nil_chk(argCounter_)) getCountWithId:temp];
    temp = new_EduStanfordNlpParserLexparserIntDependency_initWithEduStanfordNlpParserLexparserIntTaggedWord_withEduStanfordNlpParserLexparserIntTaggedWord_withBoolean_withInt_(projectedAnyHead, projectedAnyArg, leftHeaded, binDistance);
    c_aPT_hPTd = [((EduStanfordNlpStatsClassicCounter *) nil_chk(argCounter_)) getCountWithId:temp];
    temp = new_EduStanfordNlpParserLexparserIntDependency_initWithEduStanfordNlpParserLexparserIntTaggedWord_withEduStanfordNlpParserLexparserIntTaggedWord_withBoolean_withInt_(projectedAnyHead, wildTW_, leftHeaded, binDistance);
    c_hPTd = [((EduStanfordNlpStatsClassicCounter *) nil_chk(argCounter_)) getCountWithId:temp];
    temp = new_EduStanfordNlpParserLexparserIntDependency_initWithEduStanfordNlpParserLexparserIntTaggedWord_withEduStanfordNlpParserLexparserIntTaggedWord_withBoolean_withInt_(wildTW_, projectedArg, false, EduStanfordNlpParserLexparserIntDependency_ANY_DISTANCE_INT);
    c_aPTW_aPT = [((EduStanfordNlpStatsClassicCounter *) nil_chk(argCounter_)) getCountWithId:temp];
    temp = new_EduStanfordNlpParserLexparserIntDependency_initWithEduStanfordNlpParserLexparserIntTaggedWord_withEduStanfordNlpParserLexparserIntTaggedWord_withBoolean_withInt_(wildTW_, projectedAnyArg, false, EduStanfordNlpParserLexparserIntDependency_ANY_DISTANCE_INT);
    c_aPT = [((EduStanfordNlpStatsClassicCounter *) nil_chk(argCounter_)) getCountWithId:temp];
  }
  temp = new_EduStanfordNlpParserLexparserIntDependency_initWithEduStanfordNlpParserLexparserIntTaggedWord_withEduStanfordNlpParserLexparserIntTaggedWord_withBoolean_withInt_(wildTW_, dependency->arg_, false, EduStanfordNlpParserLexparserIntDependency_ANY_DISTANCE_INT);
  jdouble c_aTW = [((EduStanfordNlpStatsClassicCounter *) nil_chk(argCounter_)) getCountWithId:temp];
  temp = new_EduStanfordNlpParserLexparserIntDependency_initWithEduStanfordNlpParserLexparserIntTaggedWord_withEduStanfordNlpParserLexparserIntTaggedWord_withBoolean_withInt_(wildTW_, anyArg, false, EduStanfordNlpParserLexparserIntDependency_ANY_DISTANCE_INT);
  jdouble c_aT = [((EduStanfordNlpStatsClassicCounter *) nil_chk(argCounter_)) getCountWithId:temp];
  temp = new_EduStanfordNlpParserLexparserIntDependency_initWithEduStanfordNlpParserLexparserIntTaggedWord_withEduStanfordNlpParserLexparserIntTaggedWord_withBoolean_withInt_(wildTW_, anyTagArg, false, EduStanfordNlpParserLexparserIntDependency_ANY_DISTANCE_INT);
  jdouble c_aW = [((EduStanfordNlpStatsClassicCounter *) nil_chk(argCounter_)) getCountWithId:temp];
  jdouble p_aTW_hTd;
  jdouble p_aT_hTd;
  jdouble p_aTW_aT;
  jdouble p_aW;
  jdouble p_aPTW_aPT;
  jdouble p_aPTW_hPTd;
  jdouble p_aPT_hPTd;
  if (useSmoothTagProjection_) {
    if (useUnigramWordSmoothing_) {
      p_aW = c_aW > 0.0 ? (c_aW / numWordTokens_) : 1.0;
      p_aPTW_aPT = (c_aPTW_aPT + smooth_aPTW_aPT_ * p_aW) / (c_aPT + smooth_aPTW_aPT_);
    }
    else {
      p_aPTW_aPT = c_aPTW_aPT > 0.0 ? (c_aPTW_aPT / c_aPT) : 1.0;
    }
    p_aTW_aT = (c_aTW + smooth_aTW_aT_ * p_aPTW_aPT) / (c_aT + smooth_aTW_aT_);
    p_aPTW_hPTd = c_hPTd > 0.0 ? (c_aPTW_hPTd / c_hPTd) : 0.0;
    p_aTW_hTd = (c_aTW_hTd + smooth_aTW_hTd_ * p_aPTW_hPTd) / (c_hTd + smooth_aTW_hTd_);
    p_aPT_hPTd = c_hPTd > 0.0 ? (c_aPT_hPTd / c_hPTd) : 0.0;
    p_aT_hTd = (c_aT_hTd + smooth_aT_hTd_ * p_aPT_hPTd) / (c_hTd + smooth_aT_hTd_);
  }
  else {
    if (((EduStanfordNlpParserLexparserTestOptions *) nil_chk(((EduStanfordNlpParserLexparserOptions *) nil_chk(op_))->testOptions_))->useLexiconToScoreDependencyPwGt_) {
      p_aTW_aT = dependency->leftHeaded_ ? JavaLangMath_expWithDouble_([((id<EduStanfordNlpParserLexparserLexicon>) nil_chk(lex_)) scoreWithEduStanfordNlpParserLexparserIntTaggedWord:dependency->arg_ withInt:1 withNSString:[((id<EduStanfordNlpUtilIndex>) nil_chk(wordIndex_)) getWithInt:dependency->arg_->word_] withNSString:nil]) : JavaLangMath_expWithDouble_([((id<EduStanfordNlpParserLexparserLexicon>) nil_chk(lex_)) scoreWithEduStanfordNlpParserLexparserIntTaggedWord:dependency->arg_ withInt:-1 withNSString:[((id<EduStanfordNlpUtilIndex>) nil_chk(wordIndex_)) getWithInt:dependency->arg_->word_] withNSString:nil]);
    }
    else {
      p_aTW_aT = c_aTW > 0.0 ? (c_aTW / c_aT) : 1.0;
    }
    p_aTW_hTd = c_hTd > 0.0 ? (c_aTW_hTd / c_hTd) : 0.0;
    p_aT_hTd = c_hTd > 0.0 ? (c_aT_hTd / c_hTd) : 0.0;
  }
  jdouble pb_aTW_hTWd = (c_aTW_hTWd + smooth_aTW_hTWd_ * p_aTW_hTd) / (c_hTWd + smooth_aTW_hTWd_);
  jdouble pb_aT_hTWd = (c_aT_hTWd + smooth_aT_hTWd_ * p_aT_hTd) / (c_hTWd + smooth_aT_hTWd_);
  jdouble score = (interp_ * pb_aTW_hTWd + (1.0 - interp_) * p_aTW_aT * pb_aT_hTWd) * pb_go_hTWds;
  if (((EduStanfordNlpParserLexparserTestOptions *) nil_chk(((EduStanfordNlpParserLexparserOptions *) nil_chk(op_))->testOptions_))->prunePunc_ && [self pruneTWWithEduStanfordNlpParserLexparserIntTaggedWord:aTW]) {
    return 1.0;
  }
  if (JavaLangDouble_isNaNWithDouble_(score)) {
    score = 0.0;
  }
  if (score < EduStanfordNlpParserLexparserMLEDependencyGrammar_MIN_PROBABILITY) {
    score = 0.0;
  }
  return score;
}

- (jdouble)getStopProbWithEduStanfordNlpParserLexparserIntDependency:(EduStanfordNlpParserLexparserIntDependency *)dependency {
  jshort binDistance = [self distanceBinWithInt:((EduStanfordNlpParserLexparserIntDependency *) nil_chk(dependency))->distance_];
  EduStanfordNlpParserLexparserIntTaggedWord *unknownHead = new_EduStanfordNlpParserLexparserIntTaggedWord_initWithInt_withInt_(-1, ((EduStanfordNlpParserLexparserIntTaggedWord *) nil_chk(dependency->head_))->tag_);
  EduStanfordNlpParserLexparserIntTaggedWord *anyHead = new_EduStanfordNlpParserLexparserIntTaggedWord_initWithInt_withInt_(EduStanfordNlpParserLexparserIntTaggedWord_ANY_WORD_INT, dependency->head_->tag_);
  EduStanfordNlpParserLexparserIntDependency *temp = new_EduStanfordNlpParserLexparserIntDependency_initWithEduStanfordNlpParserLexparserIntTaggedWord_withEduStanfordNlpParserLexparserIntTaggedWord_withBoolean_withInt_(dependency->head_, stopTW_, dependency->leftHeaded_, binDistance);
  jdouble c_stop_hTWds = [((EduStanfordNlpStatsClassicCounter *) nil_chk(stopCounter_)) getCountWithId:temp];
  temp = new_EduStanfordNlpParserLexparserIntDependency_initWithEduStanfordNlpParserLexparserIntTaggedWord_withEduStanfordNlpParserLexparserIntTaggedWord_withBoolean_withInt_(unknownHead, stopTW_, dependency->leftHeaded_, binDistance);
  jdouble c_stop_hTds = [((EduStanfordNlpStatsClassicCounter *) nil_chk(stopCounter_)) getCountWithId:temp];
  temp = new_EduStanfordNlpParserLexparserIntDependency_initWithEduStanfordNlpParserLexparserIntTaggedWord_withEduStanfordNlpParserLexparserIntTaggedWord_withBoolean_withInt_(dependency->head_, wildTW_, dependency->leftHeaded_, binDistance);
  jdouble c_hTWds = [((EduStanfordNlpStatsClassicCounter *) nil_chk(stopCounter_)) getCountWithId:temp];
  temp = new_EduStanfordNlpParserLexparserIntDependency_initWithEduStanfordNlpParserLexparserIntTaggedWord_withEduStanfordNlpParserLexparserIntTaggedWord_withBoolean_withInt_(anyHead, wildTW_, dependency->leftHeaded_, binDistance);
  jdouble c_hTds = [((EduStanfordNlpStatsClassicCounter *) nil_chk(stopCounter_)) getCountWithId:temp];
  jdouble p_stop_hTds = (c_hTds > 0.0 ? c_stop_hTds / c_hTds : 1.0);
  jdouble pb_stop_hTWds = (c_stop_hTWds + smooth_stop_ * p_stop_hTds) / (c_hTWds + smooth_stop_);
  return pb_stop_hTWds;
}

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)stream {
  [((JavaIoObjectInputStream *) nil_chk(stream)) defaultReadObject];
  EduStanfordNlpStatsClassicCounter *compressedArgC = argCounter_;
  argCounter_ = new_EduStanfordNlpStatsClassicCounter_init();
  EduStanfordNlpStatsClassicCounter *compressedStopC = stopCounter_;
  stopCounter_ = new_EduStanfordNlpStatsClassicCounter_init();
  for (EduStanfordNlpParserLexparserIntDependency * __strong d in nil_chk([((EduStanfordNlpStatsClassicCounter *) nil_chk(compressedArgC)) keySet])) {
    jdouble count = [compressedArgC getCountWithId:d];
    EduStanfordNlpParserLexparserMLEDependencyGrammar_expandArgWithEduStanfordNlpParserLexparserIntDependency_withShort_withDouble_(self, d, ((EduStanfordNlpParserLexparserIntDependency *) nil_chk(d))->distance_, count);
  }
  for (EduStanfordNlpParserLexparserIntDependency * __strong d in nil_chk([((EduStanfordNlpStatsClassicCounter *) nil_chk(compressedStopC)) keySet])) {
    jdouble count = [compressedStopC getCountWithId:d];
    EduStanfordNlpParserLexparserMLEDependencyGrammar_expandStopWithEduStanfordNlpParserLexparserIntDependency_withShort_withDouble_withBoolean_(self, d, ((EduStanfordNlpParserLexparserIntDependency *) nil_chk(d))->distance_, count, false);
  }
  expandDependencyMap_ = nil;
}

- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)stream {
  EduStanfordNlpStatsClassicCounter *fullArgCounter = argCounter_;
  argCounter_ = new_EduStanfordNlpStatsClassicCounter_init();
  for (EduStanfordNlpParserLexparserIntDependency * __strong dependency in nil_chk([((EduStanfordNlpStatsClassicCounter *) nil_chk(fullArgCounter)) keySet])) {
    if (((EduStanfordNlpParserLexparserIntDependency *) nil_chk(dependency))->head_ != wildTW_ && dependency->arg_ != wildTW_ && ((EduStanfordNlpParserLexparserIntTaggedWord *) nil_chk(dependency->head_))->word_ != -1 && ((EduStanfordNlpParserLexparserIntTaggedWord *) nil_chk(dependency->arg_))->word_ != -1) {
      [((EduStanfordNlpStatsClassicCounter *) nil_chk(argCounter_)) incrementCountWithId:dependency withDouble:[fullArgCounter getCountWithId:dependency]];
    }
  }
  EduStanfordNlpStatsClassicCounter *fullStopCounter = stopCounter_;
  stopCounter_ = new_EduStanfordNlpStatsClassicCounter_init();
  for (EduStanfordNlpParserLexparserIntDependency * __strong dependency in nil_chk([((EduStanfordNlpStatsClassicCounter *) nil_chk(fullStopCounter)) keySet])) {
    if (((EduStanfordNlpParserLexparserIntTaggedWord *) nil_chk(((EduStanfordNlpParserLexparserIntDependency *) nil_chk(dependency))->head_))->word_ != -1) {
      [((EduStanfordNlpStatsClassicCounter *) nil_chk(stopCounter_)) incrementCountWithId:dependency withDouble:[fullStopCounter getCountWithId:dependency]];
    }
  }
  [((JavaIoObjectOutputStream *) nil_chk(stream)) defaultWriteObject];
  argCounter_ = fullArgCounter;
  stopCounter_ = fullStopCounter;
}

- (void)readDataWithJavaIoBufferedReader:(JavaIoBufferedReader *)inArg {
  NSString *LEFT = @"left";
  jint lineNum = 1;
  jboolean doingStop = false;
  for (NSString *line = [((JavaIoBufferedReader *) nil_chk(inArg)) readLine]; line != nil && ((jint) [line length]) > 0; line = [inArg readLine]) {
    @try {
      if ([line isEqual:@"BEGIN_STOP"]) {
        doingStop = true;
        continue;
      }
      IOSObjectArray *fields = EduStanfordNlpUtilStringUtils_splitOnCharWithQuotingWithNSString_withChar_withChar_withChar_(line, ' ', '"', '\\');
      jshort distance = (jshort) JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(nil_chk(fields), 4));
      EduStanfordNlpParserLexparserIntTaggedWord *tempHead = new_EduStanfordNlpParserLexparserIntTaggedWord_initWithNSString_withChar_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(IOSObjectArray_Get(fields, 0), '/', wordIndex_, tagIndex_);
      EduStanfordNlpParserLexparserIntTaggedWord *tempArg = new_EduStanfordNlpParserLexparserIntTaggedWord_initWithNSString_withChar_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(IOSObjectArray_Get(fields, 2), '/', wordIndex_, tagIndex_);
      EduStanfordNlpParserLexparserIntDependency *tempDependency = new_EduStanfordNlpParserLexparserIntDependency_initWithEduStanfordNlpParserLexparserIntTaggedWord_withEduStanfordNlpParserLexparserIntTaggedWord_withBoolean_withInt_(tempHead, tempArg, [((NSString *) nil_chk(IOSObjectArray_Get(fields, 3))) isEqual:LEFT], distance);
      jdouble count = JavaLangDouble_parseDoubleWithNSString_(IOSObjectArray_Get(fields, 5));
      if (doingStop) {
        EduStanfordNlpParserLexparserMLEDependencyGrammar_expandStopWithEduStanfordNlpParserLexparserIntDependency_withShort_withDouble_withBoolean_(self, tempDependency, distance, count, false);
      }
      else {
        EduStanfordNlpParserLexparserMLEDependencyGrammar_expandArgWithEduStanfordNlpParserLexparserIntDependency_withShort_withDouble_(self, tempDependency, distance, count);
      }
    }
    @catch (JavaLangException *e) {
      JavaIoIOException *ioe = new_JavaIoIOException_initWithNSString_(JreStrcat("$I$$", @"Error on line ", lineNum, @": ", line));
      (void) [ioe initCauseWithNSException:e];
      @throw ioe;
    }
    lineNum++;
  }
}

- (void)writeDataWithJavaIoPrintWriter:(JavaIoPrintWriter *)outArg {
  for (EduStanfordNlpParserLexparserIntDependency * __strong dependency in nil_chk([((EduStanfordNlpStatsClassicCounter *) nil_chk(argCounter_)) keySet])) {
    if (((EduStanfordNlpParserLexparserIntDependency *) nil_chk(dependency))->head_ != wildTW_ && dependency->arg_ != wildTW_ && ((EduStanfordNlpParserLexparserIntTaggedWord *) nil_chk(dependency->head_))->word_ != -1 && ((EduStanfordNlpParserLexparserIntTaggedWord *) nil_chk(dependency->arg_))->word_ != -1) {
      jdouble count = [((EduStanfordNlpStatsClassicCounter *) nil_chk(argCounter_)) getCountWithId:dependency];
      [((JavaIoPrintWriter *) nil_chk(outArg)) printlnWithNSString:JreStrcat("$CD", [dependency toStringWithEduStanfordNlpUtilIndex:wordIndex_ withEduStanfordNlpUtilIndex:tagIndex_], ' ', count)];
    }
  }
  [((JavaIoPrintWriter *) nil_chk(outArg)) printlnWithNSString:@"BEGIN_STOP"];
  for (EduStanfordNlpParserLexparserIntDependency * __strong dependency in nil_chk([((EduStanfordNlpStatsClassicCounter *) nil_chk(stopCounter_)) keySet])) {
    if (((EduStanfordNlpParserLexparserIntTaggedWord *) nil_chk(((EduStanfordNlpParserLexparserIntDependency *) nil_chk(dependency))->head_))->word_ != -1) {
      jdouble count = [((EduStanfordNlpStatsClassicCounter *) nil_chk(stopCounter_)) getCountWithId:dependency];
      [outArg printlnWithNSString:JreStrcat("$CD", [dependency toStringWithEduStanfordNlpUtilIndex:wordIndex_ withEduStanfordNlpUtilIndex:tagIndex_], ' ', count)];
    }
  }
  [outArg flush];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, 3, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpParserLexparserMLEDependencyGrammar_EndHead;", 0xc, 7, 8, -1, 9, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 10, 11, -1, 12, -1, -1 },
    { NULL, "D", 0x1, 13, 14, -1, 15, -1, -1 },
    { NULL, "V", 0x1, 16, 14, -1, 17, -1, -1 },
    { NULL, "V", 0x1, 18, 19, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpParserLexparserIntTaggedWord;", 0x2, 20, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 22, 19, -1, -1, -1, -1 },
    { NULL, "S", 0x2, 23, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 24, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 26, 27, -1, -1, -1, -1 },
    { NULL, "D", 0x1, 28, 29, -1, -1, -1, -1 },
    { NULL, "D", 0x1, 30, 29, -1, -1, -1, -1 },
    { NULL, "D", 0x4, 31, 29, -1, -1, -1, -1 },
    { NULL, "D", 0x4, 32, 29, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 33, 34, 35, -1, -1, -1 },
    { NULL, "V", 0x2, 36, 37, 38, -1, -1, -1 },
    { NULL, "V", 0x1, 39, 40, 38, -1, -1, -1 },
    { NULL, "V", 0x1, 41, 42, 38, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpParserLexparserTreebankLangParserParams:withBoolean:withBoolean:withBoolean:withBoolean:withEduStanfordNlpParserLexparserOptions:withEduStanfordNlpUtilIndex:withEduStanfordNlpUtilIndex:);
  methods[1].selector = @selector(initWithEduStanfordNlpParserLexparserTagProjection:withEduStanfordNlpParserLexparserTreebankLangParserParams:withBoolean:withBoolean:withBoolean:withEduStanfordNlpParserLexparserOptions:withEduStanfordNlpUtilIndex:withEduStanfordNlpUtilIndex:);
  methods[2].selector = @selector(description);
  methods[3].selector = @selector(pruneTWWithEduStanfordNlpParserLexparserIntTaggedWord:);
  methods[4].selector = @selector(treeToDependencyHelperWithEduStanfordNlpTreesTree:withJavaUtilList:withInt:withEduStanfordNlpUtilIndex:withEduStanfordNlpUtilIndex:);
  methods[5].selector = @selector(dumpSizes);
  methods[6].selector = @selector(treeToDependencyListWithEduStanfordNlpTreesTree:withEduStanfordNlpUtilIndex:withEduStanfordNlpUtilIndex:);
  methods[7].selector = @selector(scoreAllWithJavaUtilCollection:);
  methods[8].selector = @selector(tuneWithJavaUtilCollection:);
  methods[9].selector = @selector(addRuleWithEduStanfordNlpParserLexparserIntDependency:withDouble:);
  methods[10].selector = @selector(getCachedITWWithShort:);
  methods[11].selector = @selector(expandDependencyWithEduStanfordNlpParserLexparserIntDependency:withDouble:);
  methods[12].selector = @selector(tagProjectWithShort:);
  methods[13].selector = @selector(expandArgWithEduStanfordNlpParserLexparserIntDependency:withShort:withDouble:);
  methods[14].selector = @selector(expandStopWithEduStanfordNlpParserLexparserIntDependency:withShort:withDouble:withBoolean:);
  methods[15].selector = @selector(countHistoryWithEduStanfordNlpParserLexparserIntDependency:);
  methods[16].selector = @selector(scoreTBWithEduStanfordNlpParserLexparserIntDependency:);
  methods[17].selector = @selector(probTBWithEduStanfordNlpParserLexparserIntDependency:);
  methods[18].selector = @selector(getStopProbWithEduStanfordNlpParserLexparserIntDependency:);
  methods[19].selector = @selector(readObjectWithJavaIoObjectInputStream:);
  methods[20].selector = @selector(writeObjectWithJavaIoObjectOutputStream:);
  methods[21].selector = @selector(readDataWithJavaIoBufferedReader:);
  methods[22].selector = @selector(writeDataWithJavaIoPrintWriter:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "useSmoothTagProjection_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "useUnigramWordSmoothing_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "DEBUG", "Z", .constantValue.asBOOL = EduStanfordNlpParserLexparserMLEDependencyGrammar_DEBUG, 0x18, -1, -1, -1, -1 },
    { "numWordTokens_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "argCounter_", "LEduStanfordNlpStatsClassicCounter;", .constantValue.asLong = 0, 0x4, -1, -1, 43, -1 },
    { "stopCounter_", "LEduStanfordNlpStatsClassicCounter;", .constantValue.asLong = 0, 0x4, -1, -1, 43, -1 },
    { "smooth_aT_hTWd_", "D", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "smooth_aTW_hTWd_", "D", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "smooth_stop_", "D", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "interp_", "D", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "smooth_aTW_aT_", "D", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "smooth_aTW_hTd_", "D", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "smooth_aT_hTd_", "D", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "smooth_aPTW_aPT_", "D", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "tagITWList_", "LJavaUtilList;", .constantValue.asLong = 0, 0x84, -1, -1, 44, -1 },
    { "smoothTP_", "LEduStanfordNlpParserLexparserTagProjection;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "smoothTPIndex_", "LEduStanfordNlpUtilIndex;", .constantValue.asLong = 0, 0x2, -1, -1, 45, -1 },
    { "TP_PREFIX", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 46, -1, -1 },
    { "verbose", "Z", .constantValue.asBOOL = EduStanfordNlpParserLexparserMLEDependencyGrammar_verbose, 0x1a, -1, -1, -1, -1 },
    { "MIN_PROBABILITY", "D", .constantValue.asDouble = EduStanfordNlpParserLexparserMLEDependencyGrammar_MIN_PROBABILITY, 0x1c, -1, -1, -1, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpParserLexparserMLEDependencyGrammar_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpParserLexparserTreebankLangParserParams;ZZZZLEduStanfordNlpParserLexparserOptions;LEduStanfordNlpUtilIndex;LEduStanfordNlpUtilIndex;", "(Ledu/stanford/nlp/parser/lexparser/TreebankLangParserParams;ZZZZLedu/stanford/nlp/parser/lexparser/Options;Ledu/stanford/nlp/util/Index<Ljava/lang/String;>;Ledu/stanford/nlp/util/Index<Ljava/lang/String;>;)V", "LEduStanfordNlpParserLexparserTagProjection;LEduStanfordNlpParserLexparserTreebankLangParserParams;ZZZLEduStanfordNlpParserLexparserOptions;LEduStanfordNlpUtilIndex;LEduStanfordNlpUtilIndex;", "(Ledu/stanford/nlp/parser/lexparser/TagProjection;Ledu/stanford/nlp/parser/lexparser/TreebankLangParserParams;ZZZLedu/stanford/nlp/parser/lexparser/Options;Ledu/stanford/nlp/util/Index<Ljava/lang/String;>;Ledu/stanford/nlp/util/Index<Ljava/lang/String;>;)V", "toString", "pruneTW", "LEduStanfordNlpParserLexparserIntTaggedWord;", "treeToDependencyHelper", "LEduStanfordNlpTreesTree;LJavaUtilList;ILEduStanfordNlpUtilIndex;LEduStanfordNlpUtilIndex;", "(Ledu/stanford/nlp/trees/Tree;Ljava/util/List<Ledu/stanford/nlp/parser/lexparser/IntDependency;>;ILedu/stanford/nlp/util/Index<Ljava/lang/String;>;Ledu/stanford/nlp/util/Index<Ljava/lang/String;>;)Ledu/stanford/nlp/parser/lexparser/MLEDependencyGrammar$EndHead;", "treeToDependencyList", "LEduStanfordNlpTreesTree;LEduStanfordNlpUtilIndex;LEduStanfordNlpUtilIndex;", "(Ledu/stanford/nlp/trees/Tree;Ledu/stanford/nlp/util/Index<Ljava/lang/String;>;Ledu/stanford/nlp/util/Index<Ljava/lang/String;>;)Ljava/util/List<Ledu/stanford/nlp/parser/lexparser/IntDependency;>;", "scoreAll", "LJavaUtilCollection;", "(Ljava/util/Collection<Ledu/stanford/nlp/parser/lexparser/IntDependency;>;)D", "tune", "(Ljava/util/Collection<Ledu/stanford/nlp/trees/Tree;>;)V", "addRule", "LEduStanfordNlpParserLexparserIntDependency;D", "getCachedITW", "S", "expandDependency", "tagProject", "expandArg", "LEduStanfordNlpParserLexparserIntDependency;SD", "expandStop", "LEduStanfordNlpParserLexparserIntDependency;SDZ", "countHistory", "LEduStanfordNlpParserLexparserIntDependency;", "scoreTB", "probTB", "getStopProb", "readObject", "LJavaIoObjectInputStream;", "LJavaIoIOException;LJavaLangClassNotFoundException;", "writeObject", "LJavaIoObjectOutputStream;", "LJavaIoIOException;", "readData", "LJavaIoBufferedReader;", "writeData", "LJavaIoPrintWriter;", "Ledu/stanford/nlp/stats/ClassicCounter<Ledu/stanford/nlp/parser/lexparser/IntDependency;>;", "Ljava/util/List<Ledu/stanford/nlp/parser/lexparser/IntTaggedWord;>;", "Ledu/stanford/nlp/util/Index<Ljava/lang/String;>;", &EduStanfordNlpParserLexparserMLEDependencyGrammar_TP_PREFIX, "LEduStanfordNlpParserLexparserMLEDependencyGrammar_EndHead;" };
  static const J2ObjcClassInfo _EduStanfordNlpParserLexparserMLEDependencyGrammar = { "MLEDependencyGrammar", "edu.stanford.nlp.parser.lexparser", ptrTable, methods, fields, 7, 0x1, 23, 21, -1, 47, -1, -1, -1 };
  return &_EduStanfordNlpParserLexparserMLEDependencyGrammar;
}

@end

void EduStanfordNlpParserLexparserMLEDependencyGrammar_initWithEduStanfordNlpParserLexparserTreebankLangParserParams_withBoolean_withBoolean_withBoolean_withBoolean_withEduStanfordNlpParserLexparserOptions_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(EduStanfordNlpParserLexparserMLEDependencyGrammar *self, id<EduStanfordNlpParserLexparserTreebankLangParserParams> tlpParams, jboolean directional, jboolean distance, jboolean coarseDistance, jboolean basicCategoryTagsInDependencyGrammar, EduStanfordNlpParserLexparserOptions *op, id<EduStanfordNlpUtilIndex> wordIndex, id<EduStanfordNlpUtilIndex> tagIndex) {
  EduStanfordNlpParserLexparserMLEDependencyGrammar_initWithEduStanfordNlpParserLexparserTagProjection_withEduStanfordNlpParserLexparserTreebankLangParserParams_withBoolean_withBoolean_withBoolean_withEduStanfordNlpParserLexparserOptions_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(self, basicCategoryTagsInDependencyGrammar ? new_EduStanfordNlpParserLexparserBasicCategoryTagProjection_initWithEduStanfordNlpTreesTreebankLanguagePack_([((id<EduStanfordNlpParserLexparserTreebankLangParserParams>) nil_chk(tlpParams)) treebankLanguagePack]) : (id) new_EduStanfordNlpParserLexparserTestTagProjection_init(), tlpParams, directional, distance, coarseDistance, op, wordIndex, tagIndex);
}

EduStanfordNlpParserLexparserMLEDependencyGrammar *new_EduStanfordNlpParserLexparserMLEDependencyGrammar_initWithEduStanfordNlpParserLexparserTreebankLangParserParams_withBoolean_withBoolean_withBoolean_withBoolean_withEduStanfordNlpParserLexparserOptions_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(id<EduStanfordNlpParserLexparserTreebankLangParserParams> tlpParams, jboolean directional, jboolean distance, jboolean coarseDistance, jboolean basicCategoryTagsInDependencyGrammar, EduStanfordNlpParserLexparserOptions *op, id<EduStanfordNlpUtilIndex> wordIndex, id<EduStanfordNlpUtilIndex> tagIndex) {
  J2OBJC_NEW_IMPL(EduStanfordNlpParserLexparserMLEDependencyGrammar, initWithEduStanfordNlpParserLexparserTreebankLangParserParams_withBoolean_withBoolean_withBoolean_withBoolean_withEduStanfordNlpParserLexparserOptions_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_, tlpParams, directional, distance, coarseDistance, basicCategoryTagsInDependencyGrammar, op, wordIndex, tagIndex)
}

EduStanfordNlpParserLexparserMLEDependencyGrammar *create_EduStanfordNlpParserLexparserMLEDependencyGrammar_initWithEduStanfordNlpParserLexparserTreebankLangParserParams_withBoolean_withBoolean_withBoolean_withBoolean_withEduStanfordNlpParserLexparserOptions_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(id<EduStanfordNlpParserLexparserTreebankLangParserParams> tlpParams, jboolean directional, jboolean distance, jboolean coarseDistance, jboolean basicCategoryTagsInDependencyGrammar, EduStanfordNlpParserLexparserOptions *op, id<EduStanfordNlpUtilIndex> wordIndex, id<EduStanfordNlpUtilIndex> tagIndex) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpParserLexparserMLEDependencyGrammar, initWithEduStanfordNlpParserLexparserTreebankLangParserParams_withBoolean_withBoolean_withBoolean_withBoolean_withEduStanfordNlpParserLexparserOptions_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_, tlpParams, directional, distance, coarseDistance, basicCategoryTagsInDependencyGrammar, op, wordIndex, tagIndex)
}

void EduStanfordNlpParserLexparserMLEDependencyGrammar_initWithEduStanfordNlpParserLexparserTagProjection_withEduStanfordNlpParserLexparserTreebankLangParserParams_withBoolean_withBoolean_withBoolean_withEduStanfordNlpParserLexparserOptions_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(EduStanfordNlpParserLexparserMLEDependencyGrammar *self, id<EduStanfordNlpParserLexparserTagProjection> tagProjection, id<EduStanfordNlpParserLexparserTreebankLangParserParams> tlpParams, jboolean directional, jboolean useDistance, jboolean useCoarseDistance, EduStanfordNlpParserLexparserOptions *op, id<EduStanfordNlpUtilIndex> wordIndex, id<EduStanfordNlpUtilIndex> tagIndex) {
  EduStanfordNlpParserLexparserAbstractDependencyGrammar_initWithEduStanfordNlpTreesTreebankLanguagePack_withEduStanfordNlpParserLexparserTagProjection_withBoolean_withBoolean_withBoolean_withEduStanfordNlpParserLexparserOptions_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(self, [((id<EduStanfordNlpParserLexparserTreebankLangParserParams>) nil_chk(tlpParams)) treebankLanguagePack], tagProjection, directional, useDistance, useCoarseDistance, op, wordIndex, tagIndex);
  self->smooth_aT_hTWd_ = 32.0;
  self->smooth_aTW_hTWd_ = 16.0;
  self->smooth_stop_ = 4.0;
  self->interp_ = 0.6;
  self->smooth_aTW_aT_ = 96.0;
  self->smooth_aTW_hTd_ = 32.0;
  self->smooth_aT_hTd_ = 32.0;
  self->smooth_aPTW_aPT_ = 16.0;
  self->tagITWList_ = nil;
  self->useSmoothTagProjection_ = ((EduStanfordNlpParserLexparserOptions *) nil_chk(op))->useSmoothTagProjection_;
  self->useUnigramWordSmoothing_ = op->useUnigramWordSmoothing_;
  self->argCounter_ = new_EduStanfordNlpStatsClassicCounter_init();
  self->stopCounter_ = new_EduStanfordNlpStatsClassicCounter_init();
  IOSDoubleArray *smoothParams = [tlpParams MLEDependencyGrammarSmoothingParams];
  self->smooth_aT_hTWd_ = IOSDoubleArray_Get(nil_chk(smoothParams), 0);
  self->smooth_aTW_hTWd_ = IOSDoubleArray_Get(smoothParams, 1);
  self->smooth_stop_ = IOSDoubleArray_Get(smoothParams, 2);
  self->interp_ = IOSDoubleArray_Get(smoothParams, 3);
  self->smoothTP_ = new_EduStanfordNlpParserLexparserBasicCategoryTagProjection_initWithEduStanfordNlpTreesTreebankLanguagePack_([tlpParams treebankLanguagePack]);
}

EduStanfordNlpParserLexparserMLEDependencyGrammar *new_EduStanfordNlpParserLexparserMLEDependencyGrammar_initWithEduStanfordNlpParserLexparserTagProjection_withEduStanfordNlpParserLexparserTreebankLangParserParams_withBoolean_withBoolean_withBoolean_withEduStanfordNlpParserLexparserOptions_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(id<EduStanfordNlpParserLexparserTagProjection> tagProjection, id<EduStanfordNlpParserLexparserTreebankLangParserParams> tlpParams, jboolean directional, jboolean useDistance, jboolean useCoarseDistance, EduStanfordNlpParserLexparserOptions *op, id<EduStanfordNlpUtilIndex> wordIndex, id<EduStanfordNlpUtilIndex> tagIndex) {
  J2OBJC_NEW_IMPL(EduStanfordNlpParserLexparserMLEDependencyGrammar, initWithEduStanfordNlpParserLexparserTagProjection_withEduStanfordNlpParserLexparserTreebankLangParserParams_withBoolean_withBoolean_withBoolean_withEduStanfordNlpParserLexparserOptions_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_, tagProjection, tlpParams, directional, useDistance, useCoarseDistance, op, wordIndex, tagIndex)
}

EduStanfordNlpParserLexparserMLEDependencyGrammar *create_EduStanfordNlpParserLexparserMLEDependencyGrammar_initWithEduStanfordNlpParserLexparserTagProjection_withEduStanfordNlpParserLexparserTreebankLangParserParams_withBoolean_withBoolean_withBoolean_withEduStanfordNlpParserLexparserOptions_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(id<EduStanfordNlpParserLexparserTagProjection> tagProjection, id<EduStanfordNlpParserLexparserTreebankLangParserParams> tlpParams, jboolean directional, jboolean useDistance, jboolean useCoarseDistance, EduStanfordNlpParserLexparserOptions *op, id<EduStanfordNlpUtilIndex> wordIndex, id<EduStanfordNlpUtilIndex> tagIndex) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpParserLexparserMLEDependencyGrammar, initWithEduStanfordNlpParserLexparserTagProjection_withEduStanfordNlpParserLexparserTreebankLangParserParams_withBoolean_withBoolean_withBoolean_withEduStanfordNlpParserLexparserOptions_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_, tagProjection, tlpParams, directional, useDistance, useCoarseDistance, op, wordIndex, tagIndex)
}

EduStanfordNlpParserLexparserMLEDependencyGrammar_EndHead *EduStanfordNlpParserLexparserMLEDependencyGrammar_treeToDependencyHelperWithEduStanfordNlpTreesTree_withJavaUtilList_withInt_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(EduStanfordNlpTreesTree *tree, id<JavaUtilList> depList, jint loc, id<EduStanfordNlpUtilIndex> wordIndex, id<EduStanfordNlpUtilIndex> tagIndex) {
  EduStanfordNlpParserLexparserMLEDependencyGrammar_initialize();
  if ([((EduStanfordNlpTreesTree *) nil_chk(tree)) isLeaf] || [tree isPreTerminal]) {
    EduStanfordNlpParserLexparserMLEDependencyGrammar_EndHead *tempEndHead = new_EduStanfordNlpParserLexparserMLEDependencyGrammar_EndHead_init();
    tempEndHead->head_ = loc;
    tempEndHead->end_ = loc + 1;
    return tempEndHead;
  }
  IOSObjectArray *kids = [tree children];
  if (((IOSObjectArray *) nil_chk(kids))->size_ == 1) {
    return EduStanfordNlpParserLexparserMLEDependencyGrammar_treeToDependencyHelperWithEduStanfordNlpTreesTree_withJavaUtilList_withInt_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(IOSObjectArray_Get(kids, 0), depList, loc, wordIndex, tagIndex);
  }
  EduStanfordNlpParserLexparserMLEDependencyGrammar_EndHead *tempEndHead = EduStanfordNlpParserLexparserMLEDependencyGrammar_treeToDependencyHelperWithEduStanfordNlpTreesTree_withJavaUtilList_withInt_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(IOSObjectArray_Get(kids, 0), depList, loc, wordIndex, tagIndex);
  jint lHead = ((EduStanfordNlpParserLexparserMLEDependencyGrammar_EndHead *) nil_chk(tempEndHead))->head_;
  jint split = tempEndHead->end_;
  tempEndHead = EduStanfordNlpParserLexparserMLEDependencyGrammar_treeToDependencyHelperWithEduStanfordNlpTreesTree_withJavaUtilList_withInt_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(IOSObjectArray_Get(kids, 1), depList, tempEndHead->end_, wordIndex, tagIndex);
  jint end = ((EduStanfordNlpParserLexparserMLEDependencyGrammar_EndHead *) nil_chk(tempEndHead))->end_;
  jint rHead = tempEndHead->head_;
  NSString *hTag = [((id<EduStanfordNlpLingHasTag>) nil_chk(((id<EduStanfordNlpLingHasTag>) cast_check([tree label], EduStanfordNlpLingHasTag_class_())))) tag];
  NSString *lTag = [((id<EduStanfordNlpLingHasTag>) nil_chk(((id<EduStanfordNlpLingHasTag>) cast_check([((EduStanfordNlpTreesTree *) nil_chk(IOSObjectArray_Get(kids, 0))) label], EduStanfordNlpLingHasTag_class_())))) tag];
  NSString *rTag = [((id<EduStanfordNlpLingHasTag>) nil_chk(((id<EduStanfordNlpLingHasTag>) cast_check([((EduStanfordNlpTreesTree *) nil_chk(IOSObjectArray_Get(kids, 1))) label], EduStanfordNlpLingHasTag_class_())))) tag];
  NSString *hWord = [((id<EduStanfordNlpLingHasWord>) nil_chk(((id<EduStanfordNlpLingHasWord>) cast_check([tree label], EduStanfordNlpLingHasWord_class_())))) word];
  NSString *lWord = [((id<EduStanfordNlpLingHasWord>) nil_chk(((id<EduStanfordNlpLingHasWord>) cast_check([((EduStanfordNlpTreesTree *) nil_chk(IOSObjectArray_Get(kids, 0))) label], EduStanfordNlpLingHasWord_class_())))) word];
  NSString *rWord = [((id<EduStanfordNlpLingHasWord>) nil_chk(((id<EduStanfordNlpLingHasWord>) cast_check([((EduStanfordNlpTreesTree *) nil_chk(IOSObjectArray_Get(kids, 1))) label], EduStanfordNlpLingHasWord_class_())))) word];
  jboolean leftHeaded = [((NSString *) nil_chk(hWord)) isEqual:lWord];
  NSString *aTag = (leftHeaded ? rTag : lTag);
  NSString *aWord = (leftHeaded ? rWord : lWord);
  jint hT = [((id<EduStanfordNlpUtilIndex>) nil_chk(tagIndex)) indexOfWithId:hTag];
  jint aT = [tagIndex indexOfWithId:aTag];
  jint hW = ([((id<EduStanfordNlpUtilIndex>) nil_chk(wordIndex)) containsWithId:hWord] ? [wordIndex indexOfWithId:hWord] : [wordIndex indexOfWithId:EduStanfordNlpParserLexparserLexicon_UNKNOWN_WORD]);
  jint aW = ([wordIndex containsWithId:aWord] ? [wordIndex indexOfWithId:aWord] : [wordIndex indexOfWithId:EduStanfordNlpParserLexparserLexicon_UNKNOWN_WORD]);
  jint head = (leftHeaded ? lHead : rHead);
  jint arg = (leftHeaded ? rHead : lHead);
  EduStanfordNlpParserLexparserIntDependency *dependency = new_EduStanfordNlpParserLexparserIntDependency_initWithInt_withInt_withInt_withInt_withBoolean_withInt_(hW, hT, aW, aT, leftHeaded, (leftHeaded ? split - head - 1 : head - split));
  [((id<JavaUtilList>) nil_chk(depList)) addWithId:dependency];
  EduStanfordNlpParserLexparserIntDependency *stopL = new_EduStanfordNlpParserLexparserIntDependency_initWithInt_withInt_withInt_withInt_withBoolean_withInt_(aW, aT, EduStanfordNlpParserLexparserIntTaggedWord_STOP_WORD_INT, EduStanfordNlpParserLexparserIntTaggedWord_STOP_TAG_INT, false, (leftHeaded ? arg - split : arg - loc));
  [depList addWithId:stopL];
  EduStanfordNlpParserLexparserIntDependency *stopR = new_EduStanfordNlpParserLexparserIntDependency_initWithInt_withInt_withInt_withInt_withBoolean_withInt_(aW, aT, EduStanfordNlpParserLexparserIntTaggedWord_STOP_WORD_INT, EduStanfordNlpParserLexparserIntTaggedWord_STOP_TAG_INT, true, (leftHeaded ? end - arg - 1 : split - arg - 1));
  [depList addWithId:stopR];
  tempEndHead->head_ = head;
  return tempEndHead;
}

id<JavaUtilList> EduStanfordNlpParserLexparserMLEDependencyGrammar_treeToDependencyListWithEduStanfordNlpTreesTree_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(EduStanfordNlpTreesTree *tree, id<EduStanfordNlpUtilIndex> wordIndex, id<EduStanfordNlpUtilIndex> tagIndex) {
  EduStanfordNlpParserLexparserMLEDependencyGrammar_initialize();
  id<JavaUtilList> depList = new_JavaUtilArrayList_init();
  (void) EduStanfordNlpParserLexparserMLEDependencyGrammar_treeToDependencyHelperWithEduStanfordNlpTreesTree_withJavaUtilList_withInt_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(tree, depList, 0, wordIndex, tagIndex);
  return depList;
}

EduStanfordNlpParserLexparserIntTaggedWord *EduStanfordNlpParserLexparserMLEDependencyGrammar_getCachedITWWithShort_(EduStanfordNlpParserLexparserMLEDependencyGrammar *self, jshort tag) {
  if (self->tagITWList_ == nil) {
    self->tagITWList_ = new_JavaUtilArrayList_initWithInt_(self->numTagBins_ + 2);
    for (jint i = 0; i < self->numTagBins_ + 2; i++) {
      [((id<JavaUtilList>) nil_chk(self->tagITWList_)) addWithInt:i withId:nil];
    }
  }
  EduStanfordNlpParserLexparserIntTaggedWord *headT = [((id<JavaUtilList>) nil_chk(self->tagITWList_)) getWithInt:[self tagBinWithInt:tag] + 2];
  if (headT == nil) {
    headT = new_EduStanfordNlpParserLexparserIntTaggedWord_initWithInt_withInt_(EduStanfordNlpParserLexparserIntTaggedWord_ANY_WORD_INT, [self tagBinWithInt:tag]);
    (void) [((id<JavaUtilList>) nil_chk(self->tagITWList_)) setWithInt:[self tagBinWithInt:tag] + 2 withId:headT];
  }
  return headT;
}

jshort EduStanfordNlpParserLexparserMLEDependencyGrammar_tagProjectWithShort_(EduStanfordNlpParserLexparserMLEDependencyGrammar *self, jshort tag) {
  if (self->smoothTPIndex_ == nil) {
    self->smoothTPIndex_ = new_EduStanfordNlpUtilHashIndex_initWithEduStanfordNlpUtilIndex_(self->tagIndex_);
  }
  if (tag < 0) {
    return tag;
  }
  else {
    NSString *tagStr = [self->smoothTPIndex_ getWithInt:tag];
    NSString *binStr = JreStrcat("$$", EduStanfordNlpParserLexparserMLEDependencyGrammar_TP_PREFIX, [((id<EduStanfordNlpParserLexparserTagProjection>) nil_chk(self->smoothTP_)) projectWithNSString:tagStr]);
    return (jshort) [((id<EduStanfordNlpUtilIndex>) nil_chk(self->smoothTPIndex_)) addToIndexWithId:binStr];
  }
}

void EduStanfordNlpParserLexparserMLEDependencyGrammar_expandArgWithEduStanfordNlpParserLexparserIntDependency_withShort_withDouble_(EduStanfordNlpParserLexparserMLEDependencyGrammar *self, EduStanfordNlpParserLexparserIntDependency *dependency, jshort valBinDist, jdouble count) {
  EduStanfordNlpParserLexparserIntTaggedWord *headT = EduStanfordNlpParserLexparserMLEDependencyGrammar_getCachedITWWithShort_(self, ((EduStanfordNlpParserLexparserIntTaggedWord *) nil_chk(((EduStanfordNlpParserLexparserIntDependency *) nil_chk(dependency))->head_))->tag_);
  EduStanfordNlpParserLexparserIntTaggedWord *argT = EduStanfordNlpParserLexparserMLEDependencyGrammar_getCachedITWWithShort_(self, ((EduStanfordNlpParserLexparserIntTaggedWord *) nil_chk(dependency->arg_))->tag_);
  EduStanfordNlpParserLexparserIntTaggedWord *head = new_EduStanfordNlpParserLexparserIntTaggedWord_initWithInt_withInt_(dependency->head_->word_, [self tagBinWithInt:dependency->head_->tag_]);
  EduStanfordNlpParserLexparserIntTaggedWord *arg = new_EduStanfordNlpParserLexparserIntTaggedWord_initWithInt_withInt_(dependency->arg_->word_, [self tagBinWithInt:dependency->arg_->tag_]);
  jboolean leftHeaded = dependency->leftHeaded_;
  [((EduStanfordNlpStatsClassicCounter *) nil_chk(self->argCounter_)) incrementCountWithId:[self internWithEduStanfordNlpParserLexparserIntTaggedWord:head withEduStanfordNlpParserLexparserIntTaggedWord:arg withBoolean:leftHeaded withShort:valBinDist] withDouble:count];
  [((EduStanfordNlpStatsClassicCounter *) nil_chk(self->argCounter_)) incrementCountWithId:[self internWithEduStanfordNlpParserLexparserIntTaggedWord:headT withEduStanfordNlpParserLexparserIntTaggedWord:arg withBoolean:leftHeaded withShort:valBinDist] withDouble:count];
  [((EduStanfordNlpStatsClassicCounter *) nil_chk(self->argCounter_)) incrementCountWithId:[self internWithEduStanfordNlpParserLexparserIntTaggedWord:head withEduStanfordNlpParserLexparserIntTaggedWord:argT withBoolean:leftHeaded withShort:valBinDist] withDouble:count];
  [((EduStanfordNlpStatsClassicCounter *) nil_chk(self->argCounter_)) incrementCountWithId:[self internWithEduStanfordNlpParserLexparserIntTaggedWord:headT withEduStanfordNlpParserLexparserIntTaggedWord:argT withBoolean:leftHeaded withShort:valBinDist] withDouble:count];
  [((EduStanfordNlpStatsClassicCounter *) nil_chk(self->argCounter_)) incrementCountWithId:[self internWithEduStanfordNlpParserLexparserIntTaggedWord:head withEduStanfordNlpParserLexparserIntTaggedWord:self->wildTW_ withBoolean:leftHeaded withShort:valBinDist] withDouble:count];
  [((EduStanfordNlpStatsClassicCounter *) nil_chk(self->argCounter_)) incrementCountWithId:[self internWithEduStanfordNlpParserLexparserIntTaggedWord:headT withEduStanfordNlpParserLexparserIntTaggedWord:self->wildTW_ withBoolean:leftHeaded withShort:valBinDist] withDouble:count];
  [((EduStanfordNlpStatsClassicCounter *) nil_chk(self->argCounter_)) incrementCountWithId:[self internWithEduStanfordNlpParserLexparserIntTaggedWord:self->wildTW_ withEduStanfordNlpParserLexparserIntTaggedWord:arg withBoolean:false withShort:(jshort) -1] withDouble:count];
  [((EduStanfordNlpStatsClassicCounter *) nil_chk(self->argCounter_)) incrementCountWithId:[self internWithEduStanfordNlpParserLexparserIntTaggedWord:self->wildTW_ withEduStanfordNlpParserLexparserIntTaggedWord:argT withBoolean:false withShort:(jshort) -1] withDouble:count];
  if (self->useSmoothTagProjection_) {
    EduStanfordNlpParserLexparserIntTaggedWord *headP = new_EduStanfordNlpParserLexparserIntTaggedWord_initWithInt_withInt_(dependency->head_->word_, EduStanfordNlpParserLexparserMLEDependencyGrammar_tagProjectWithShort_(self, dependency->head_->tag_));
    EduStanfordNlpParserLexparserIntTaggedWord *headTP = new_EduStanfordNlpParserLexparserIntTaggedWord_initWithInt_withInt_(EduStanfordNlpParserLexparserIntTaggedWord_ANY_WORD_INT, EduStanfordNlpParserLexparserMLEDependencyGrammar_tagProjectWithShort_(self, dependency->head_->tag_));
    EduStanfordNlpParserLexparserIntTaggedWord *argP = new_EduStanfordNlpParserLexparserIntTaggedWord_initWithInt_withInt_(dependency->arg_->word_, EduStanfordNlpParserLexparserMLEDependencyGrammar_tagProjectWithShort_(self, dependency->arg_->tag_));
    EduStanfordNlpParserLexparserIntTaggedWord *argTP = new_EduStanfordNlpParserLexparserIntTaggedWord_initWithInt_withInt_(EduStanfordNlpParserLexparserIntTaggedWord_ANY_WORD_INT, EduStanfordNlpParserLexparserMLEDependencyGrammar_tagProjectWithShort_(self, dependency->arg_->tag_));
    [((EduStanfordNlpStatsClassicCounter *) nil_chk(self->argCounter_)) incrementCountWithId:[self internWithEduStanfordNlpParserLexparserIntTaggedWord:headP withEduStanfordNlpParserLexparserIntTaggedWord:argP withBoolean:leftHeaded withShort:valBinDist] withDouble:count];
    [((EduStanfordNlpStatsClassicCounter *) nil_chk(self->argCounter_)) incrementCountWithId:[self internWithEduStanfordNlpParserLexparserIntTaggedWord:headTP withEduStanfordNlpParserLexparserIntTaggedWord:argP withBoolean:leftHeaded withShort:valBinDist] withDouble:count];
    [((EduStanfordNlpStatsClassicCounter *) nil_chk(self->argCounter_)) incrementCountWithId:[self internWithEduStanfordNlpParserLexparserIntTaggedWord:headP withEduStanfordNlpParserLexparserIntTaggedWord:argTP withBoolean:leftHeaded withShort:valBinDist] withDouble:count];
    [((EduStanfordNlpStatsClassicCounter *) nil_chk(self->argCounter_)) incrementCountWithId:[self internWithEduStanfordNlpParserLexparserIntTaggedWord:headTP withEduStanfordNlpParserLexparserIntTaggedWord:argTP withBoolean:leftHeaded withShort:valBinDist] withDouble:count];
    [((EduStanfordNlpStatsClassicCounter *) nil_chk(self->argCounter_)) incrementCountWithId:[self internWithEduStanfordNlpParserLexparserIntTaggedWord:headP withEduStanfordNlpParserLexparserIntTaggedWord:self->wildTW_ withBoolean:leftHeaded withShort:valBinDist] withDouble:count];
    [((EduStanfordNlpStatsClassicCounter *) nil_chk(self->argCounter_)) incrementCountWithId:[self internWithEduStanfordNlpParserLexparserIntTaggedWord:headTP withEduStanfordNlpParserLexparserIntTaggedWord:self->wildTW_ withBoolean:leftHeaded withShort:valBinDist] withDouble:count];
    [((EduStanfordNlpStatsClassicCounter *) nil_chk(self->argCounter_)) incrementCountWithId:[self internWithEduStanfordNlpParserLexparserIntTaggedWord:self->wildTW_ withEduStanfordNlpParserLexparserIntTaggedWord:argP withBoolean:false withShort:(jshort) -1] withDouble:count];
    [((EduStanfordNlpStatsClassicCounter *) nil_chk(self->argCounter_)) incrementCountWithId:[self internWithEduStanfordNlpParserLexparserIntTaggedWord:self->wildTW_ withEduStanfordNlpParserLexparserIntTaggedWord:argTP withBoolean:false withShort:(jshort) -1] withDouble:count];
    [((EduStanfordNlpStatsClassicCounter *) nil_chk(self->argCounter_)) incrementCountWithId:[self internWithEduStanfordNlpParserLexparserIntTaggedWord:self->wildTW_ withEduStanfordNlpParserLexparserIntTaggedWord:new_EduStanfordNlpParserLexparserIntTaggedWord_initWithInt_withInt_(dependency->head_->word_, EduStanfordNlpParserLexparserIntTaggedWord_ANY_TAG_INT) withBoolean:false withShort:(jshort) -1] withDouble:count];
  }
  self->numWordTokens_++;
}

void EduStanfordNlpParserLexparserMLEDependencyGrammar_expandStopWithEduStanfordNlpParserLexparserIntDependency_withShort_withDouble_withBoolean_(EduStanfordNlpParserLexparserMLEDependencyGrammar *self, EduStanfordNlpParserLexparserIntDependency *dependency, jshort distBinDist, jdouble count, jboolean wildForStop) {
  EduStanfordNlpParserLexparserIntTaggedWord *headT = EduStanfordNlpParserLexparserMLEDependencyGrammar_getCachedITWWithShort_(self, ((EduStanfordNlpParserLexparserIntTaggedWord *) nil_chk(((EduStanfordNlpParserLexparserIntDependency *) nil_chk(dependency))->head_))->tag_);
  EduStanfordNlpParserLexparserIntTaggedWord *head = new_EduStanfordNlpParserLexparserIntTaggedWord_initWithInt_withInt_(dependency->head_->word_, [self tagBinWithInt:dependency->head_->tag_]);
  EduStanfordNlpParserLexparserIntTaggedWord *arg = new_EduStanfordNlpParserLexparserIntTaggedWord_initWithInt_withInt_(((EduStanfordNlpParserLexparserIntTaggedWord *) nil_chk(dependency->arg_))->word_, [self tagBinWithInt:dependency->arg_->tag_]);
  jboolean leftHeaded = dependency->leftHeaded_;
  if (arg->word_ == EduStanfordNlpParserLexparserIntTaggedWord_STOP_WORD_INT) {
    [((EduStanfordNlpStatsClassicCounter *) nil_chk(self->stopCounter_)) incrementCountWithId:[self internWithEduStanfordNlpParserLexparserIntTaggedWord:head withEduStanfordNlpParserLexparserIntTaggedWord:arg withBoolean:leftHeaded withShort:distBinDist] withDouble:count];
    [((EduStanfordNlpStatsClassicCounter *) nil_chk(self->stopCounter_)) incrementCountWithId:[self internWithEduStanfordNlpParserLexparserIntTaggedWord:headT withEduStanfordNlpParserLexparserIntTaggedWord:arg withBoolean:leftHeaded withShort:distBinDist] withDouble:count];
  }
  if (wildForStop || arg->word_ != EduStanfordNlpParserLexparserIntTaggedWord_STOP_WORD_INT) {
    [((EduStanfordNlpStatsClassicCounter *) nil_chk(self->stopCounter_)) incrementCountWithId:[self internWithEduStanfordNlpParserLexparserIntTaggedWord:head withEduStanfordNlpParserLexparserIntTaggedWord:self->wildTW_ withBoolean:leftHeaded withShort:distBinDist] withDouble:count];
    [((EduStanfordNlpStatsClassicCounter *) nil_chk(self->stopCounter_)) incrementCountWithId:[self internWithEduStanfordNlpParserLexparserIntTaggedWord:headT withEduStanfordNlpParserLexparserIntTaggedWord:self->wildTW_ withBoolean:leftHeaded withShort:distBinDist] withDouble:count];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpParserLexparserMLEDependencyGrammar)

@implementation EduStanfordNlpParserLexparserMLEDependencyGrammar_EndHead

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpParserLexparserMLEDependencyGrammar_EndHead_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "end_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "head_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpParserLexparserMLEDependencyGrammar;" };
  static const J2ObjcClassInfo _EduStanfordNlpParserLexparserMLEDependencyGrammar_EndHead = { "EndHead", "edu.stanford.nlp.parser.lexparser", ptrTable, methods, fields, 7, 0x8, 1, 2, 0, -1, -1, -1, -1 };
  return &_EduStanfordNlpParserLexparserMLEDependencyGrammar_EndHead;
}

@end

void EduStanfordNlpParserLexparserMLEDependencyGrammar_EndHead_init(EduStanfordNlpParserLexparserMLEDependencyGrammar_EndHead *self) {
  NSObject_init(self);
}

EduStanfordNlpParserLexparserMLEDependencyGrammar_EndHead *new_EduStanfordNlpParserLexparserMLEDependencyGrammar_EndHead_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpParserLexparserMLEDependencyGrammar_EndHead, init)
}

EduStanfordNlpParserLexparserMLEDependencyGrammar_EndHead *create_EduStanfordNlpParserLexparserMLEDependencyGrammar_EndHead_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpParserLexparserMLEDependencyGrammar_EndHead, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpParserLexparserMLEDependencyGrammar_EndHead)
