//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/parser/lexparser/FactoredLexicon.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/international/Language.h"
#include "edu/stanford/nlp/international/arabic/ArabicMorphoFeatureSpecification.h"
#include "edu/stanford/nlp/international/french/FrenchMorphoFeatureSpecification.h"
#include "edu/stanford/nlp/international/morph/MorphoFeatureSpecification.h"
#include "edu/stanford/nlp/international/morph/MorphoFeatures.h"
#include "edu/stanford/nlp/ling/CoreLabel.h"
#include "edu/stanford/nlp/ling/Label.h"
#include "edu/stanford/nlp/parser/lexparser/BaseLexicon.h"
#include "edu/stanford/nlp/parser/lexparser/FactoredLexicon.h"
#include "edu/stanford/nlp/parser/lexparser/FactoredLexiconEvent.h"
#include "edu/stanford/nlp/parser/lexparser/IntTaggedWord.h"
#include "edu/stanford/nlp/parser/lexparser/Lexicon.h"
#include "edu/stanford/nlp/parser/lexparser/Options.h"
#include "edu/stanford/nlp/parser/lexparser/TrainOptions.h"
#include "edu/stanford/nlp/parser/lexparser/TreebankLangParserParams.h"
#include "edu/stanford/nlp/parser/lexparser/UnknownWordModel.h"
#include "edu/stanford/nlp/parser/lexparser/UnknownWordModelTrainer.h"
#include "edu/stanford/nlp/stats/ClassicCounter.h"
#include "edu/stanford/nlp/stats/Counter.h"
#include "edu/stanford/nlp/stats/Counters.h"
#include "edu/stanford/nlp/stats/IntCounter.h"
#include "edu/stanford/nlp/stats/TwoDimensionalIntCounter.h"
#include "edu/stanford/nlp/trees/DiskTreebank.h"
#include "edu/stanford/nlp/trees/Tree.h"
#include "edu/stanford/nlp/trees/Treebank.h"
#include "edu/stanford/nlp/util/Generics.h"
#include "edu/stanford/nlp/util/HashIndex.h"
#include "edu/stanford/nlp/util/Index.h"
#include "edu/stanford/nlp/util/Pair.h"
#include "java/io/PrintStream.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/Comparator.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Set.h"

@interface EduStanfordNlpParserLexparserFactoredLexicon () {
 @public
  EduStanfordNlpInternationalMorphMorphoFeatureSpecification *morphoSpec_;
  id<EduStanfordNlpUtilIndex> morphIndex_;
  EduStanfordNlpStatsTwoDimensionalIntCounter *wordTag_;
  id<EduStanfordNlpStatsCounter> wordTagUnseen_;
  EduStanfordNlpStatsTwoDimensionalIntCounter *lemmaTag_;
  id<EduStanfordNlpStatsCounter> lemmaTagUnseen_;
  EduStanfordNlpStatsTwoDimensionalIntCounter *morphTag_;
  id<EduStanfordNlpStatsCounter> morphTagUnseen_;
  id<EduStanfordNlpStatsCounter> tagCounter_;
}

- (jdouble)probWordTagWithNSString:(NSString *)word
                           withInt:(jint)loc
                           withInt:(jint)wordId
                           withInt:(jint)tagId;

- (jdouble)probLemmaTagWithNSString:(NSString *)word
                            withInt:(jint)loc
                            withInt:(jint)tagId
                            withInt:(jint)lemmaId;

- (jdouble)probMorphTagWithInt:(jint)tagId
                       withInt:(jint)morphId;

+ (id<JavaUtilList>)treebankToLexiconEventsWithJavaUtilList:(id<JavaUtilList>)treebank
           withEduStanfordNlpParserLexparserFactoredLexicon:(EduStanfordNlpParserLexparserFactoredLexicon *)lexicon;

+ (id<JavaUtilList>)getTuningSetWithEduStanfordNlpTreesTreebank:(EduStanfordNlpTreesTreebank *)devTreebank
               withEduStanfordNlpParserLexparserFactoredLexicon:(EduStanfordNlpParserLexparserFactoredLexicon *)lexicon
      withEduStanfordNlpParserLexparserTreebankLangParserParams:(id<EduStanfordNlpParserLexparserTreebankLangParserParams>)tlpp;

+ (EduStanfordNlpParserLexparserOptions *)getOptionsWithEduStanfordNlpInternationalLanguage:(EduStanfordNlpInternationalLanguage *)language;

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserFactoredLexicon, morphoSpec_, EduStanfordNlpInternationalMorphMorphoFeatureSpecification *)
J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserFactoredLexicon, morphIndex_, id<EduStanfordNlpUtilIndex>)
J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserFactoredLexicon, wordTag_, EduStanfordNlpStatsTwoDimensionalIntCounter *)
J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserFactoredLexicon, wordTagUnseen_, id<EduStanfordNlpStatsCounter>)
J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserFactoredLexicon, lemmaTag_, EduStanfordNlpStatsTwoDimensionalIntCounter *)
J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserFactoredLexicon, lemmaTagUnseen_, id<EduStanfordNlpStatsCounter>)
J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserFactoredLexicon, morphTag_, EduStanfordNlpStatsTwoDimensionalIntCounter *)
J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserFactoredLexicon, morphTagUnseen_, id<EduStanfordNlpStatsCounter>)
J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserFactoredLexicon, tagCounter_, id<EduStanfordNlpStatsCounter>)

inline jlong EduStanfordNlpParserLexparserFactoredLexicon_get_serialVersionUID();
#define EduStanfordNlpParserLexparserFactoredLexicon_serialVersionUID -744693222804176489LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpParserLexparserFactoredLexicon, serialVersionUID, jlong)

inline jboolean EduStanfordNlpParserLexparserFactoredLexicon_get_DEBUG();
#define EduStanfordNlpParserLexparserFactoredLexicon_DEBUG false
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpParserLexparserFactoredLexicon, DEBUG, jboolean)

inline NSString *EduStanfordNlpParserLexparserFactoredLexicon_get_NO_MORPH_ANALYSIS();
static NSString *EduStanfordNlpParserLexparserFactoredLexicon_NO_MORPH_ANALYSIS = @"xXxNONExXx";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpParserLexparserFactoredLexicon, NO_MORPH_ANALYSIS, NSString *)

__attribute__((unused)) static jdouble EduStanfordNlpParserLexparserFactoredLexicon_probWordTagWithNSString_withInt_withInt_withInt_(EduStanfordNlpParserLexparserFactoredLexicon *self, NSString *word, jint loc, jint wordId, jint tagId);

__attribute__((unused)) static jdouble EduStanfordNlpParserLexparserFactoredLexicon_probMorphTagWithInt_withInt_(EduStanfordNlpParserLexparserFactoredLexicon *self, jint tagId, jint morphId);

__attribute__((unused)) static id<JavaUtilList> EduStanfordNlpParserLexparserFactoredLexicon_treebankToLexiconEventsWithJavaUtilList_withEduStanfordNlpParserLexparserFactoredLexicon_(id<JavaUtilList> treebank, EduStanfordNlpParserLexparserFactoredLexicon *lexicon);

__attribute__((unused)) static id<JavaUtilList> EduStanfordNlpParserLexparserFactoredLexicon_getTuningSetWithEduStanfordNlpTreesTreebank_withEduStanfordNlpParserLexparserFactoredLexicon_withEduStanfordNlpParserLexparserTreebankLangParserParams_(EduStanfordNlpTreesTreebank *devTreebank, EduStanfordNlpParserLexparserFactoredLexicon *lexicon, id<EduStanfordNlpParserLexparserTreebankLangParserParams> tlpp);

__attribute__((unused)) static EduStanfordNlpParserLexparserOptions *EduStanfordNlpParserLexparserFactoredLexicon_getOptionsWithEduStanfordNlpInternationalLanguage_(EduStanfordNlpInternationalLanguage *language);

@implementation EduStanfordNlpParserLexparserFactoredLexicon

- (instancetype)initWithEduStanfordNlpInternationalMorphMorphoFeatureSpecification:(EduStanfordNlpInternationalMorphMorphoFeatureSpecification *)morphoSpec
                                                       withEduStanfordNlpUtilIndex:(id<EduStanfordNlpUtilIndex>)wordIndex
                                                       withEduStanfordNlpUtilIndex:(id<EduStanfordNlpUtilIndex>)tagIndex {
  EduStanfordNlpParserLexparserFactoredLexicon_initWithEduStanfordNlpInternationalMorphMorphoFeatureSpecification_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(self, morphoSpec, wordIndex, tagIndex);
  return self;
}

- (instancetype)initWithEduStanfordNlpParserLexparserOptions:(EduStanfordNlpParserLexparserOptions *)op
withEduStanfordNlpInternationalMorphMorphoFeatureSpecification:(EduStanfordNlpInternationalMorphMorphoFeatureSpecification *)morphoSpec
                                 withEduStanfordNlpUtilIndex:(id<EduStanfordNlpUtilIndex>)wordIndex
                                 withEduStanfordNlpUtilIndex:(id<EduStanfordNlpUtilIndex>)tagIndex {
  EduStanfordNlpParserLexparserFactoredLexicon_initWithEduStanfordNlpParserLexparserOptions_withEduStanfordNlpInternationalMorphMorphoFeatureSpecification_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(self, op, morphoSpec, wordIndex, tagIndex);
  return self;
}

- (id<JavaUtilIterator>)ruleIteratorByWordWithInt:(jint)word
                                          withInt:(jint)loc
                                     withNSString:(NSString *)featureSpec {
  if (word == [((id<EduStanfordNlpUtilIndex>) nil_chk(wordIndex_)) indexOfWithId:EduStanfordNlpParserLexparserLexicon_BOUNDARY]) {
    return [((id<JavaUtilList>) nil_chk(IOSObjectArray_Get(nil_chk(rulesWithWord_), word))) iterator];
  }
  else if ([self isKnownWithInt:word]) {
    return [((id<JavaUtilList>) nil_chk(IOSObjectArray_Get(nil_chk(rulesWithWord_), word))) iterator];
  }
  else {
    id<JavaUtilSet> lexRules = EduStanfordNlpUtilGenerics_newHashSetWithInt_(10);
    id<JavaUtilList> uwRules = IOSObjectArray_Get(nil_chk(rulesWithWord_), [wordIndex_ indexOfWithId:EduStanfordNlpParserLexparserLexicon_UNKNOWN_WORD]);
    for (EduStanfordNlpParserLexparserIntTaggedWord * __strong iTW in nil_chk(uwRules)) {
      [((id<JavaUtilSet>) nil_chk(lexRules)) addWithId:new_EduStanfordNlpParserLexparserIntTaggedWord_initWithInt_withInt_(word, ((EduStanfordNlpParserLexparserIntTaggedWord *) nil_chk(iTW))->tag_)];
    }
    return [((id<JavaUtilSet>) nil_chk(lexRules)) iterator];
  }
}

- (jfloat)scoreWithEduStanfordNlpParserLexparserIntTaggedWord:(EduStanfordNlpParserLexparserIntTaggedWord *)iTW
                                                      withInt:(jint)loc
                                                 withNSString:(NSString *)word
                                                 withNSString:(NSString *)featureSpec {
  jint wordId = [((EduStanfordNlpParserLexparserIntTaggedWord *) nil_chk(iTW)) word];
  jint tagId = [iTW tag];
  jint boundaryId = [((id<EduStanfordNlpUtilIndex>) nil_chk(wordIndex_)) indexOfWithId:EduStanfordNlpParserLexparserLexicon_BOUNDARY];
  jint boundaryTagId = [((id<EduStanfordNlpUtilIndex>) nil_chk(tagIndex_)) indexOfWithId:EduStanfordNlpParserLexparserLexicon_BOUNDARY_TAG];
  if (wordId == boundaryId && tagId == boundaryTagId) {
    return 0.0f;
  }
  NSString *tag = [tagIndex_ getWithInt:[iTW tag]];
  EduStanfordNlpUtilPair *lemmaMorph = EduStanfordNlpInternationalMorphMorphoFeatureSpecification_splitMorphStringWithNSString_withNSString_(word, featureSpec);
  NSString *lemma = [((EduStanfordNlpUtilPair *) nil_chk(lemmaMorph)) first];
  jint lemmaId = [wordIndex_ indexOfWithId:lemma];
  NSString *richMorphTag = [lemmaMorph second];
  NSString *reducedMorphTag = [((NSString *) nil_chk([((EduStanfordNlpInternationalMorphMorphoFeatures *) nil_chk([((EduStanfordNlpInternationalMorphMorphoFeatureSpecification *) nil_chk(morphoSpec_)) strToFeaturesWithNSString:richMorphTag])) description])) trim];
  reducedMorphTag = ((jint) [((NSString *) nil_chk(reducedMorphTag)) length]) == 0 ? EduStanfordNlpParserLexparserFactoredLexicon_NO_MORPH_ANALYSIS : reducedMorphTag;
  jint morphId = [((id<EduStanfordNlpUtilIndex>) nil_chk(morphIndex_)) addToIndexWithId:reducedMorphTag];
  jdouble p_W_Tf = JavaLangMath_logWithDouble_(EduStanfordNlpParserLexparserFactoredLexicon_probWordTagWithNSString_withInt_withInt_withInt_(self, word, loc, wordId, tagId));
  jdouble p_L_T = 0.0;
  jdouble p_M_T = JavaLangMath_logWithDouble_(EduStanfordNlpParserLexparserFactoredLexicon_probMorphTagWithInt_withInt_(self, tagId, morphId));
  jdouble p_W_T = p_W_Tf + p_L_T + p_M_T;
  return p_W_T > -100.0 ? (jfloat) p_W_T : JavaLangFloat_NEGATIVE_INFINITY;
}

- (jdouble)probWordTagWithNSString:(NSString *)word
                           withInt:(jint)loc
                           withInt:(jint)wordId
                           withInt:(jint)tagId {
  return EduStanfordNlpParserLexparserFactoredLexicon_probWordTagWithNSString_withInt_withInt_withInt_(self, word, loc, wordId, tagId);
}

- (jdouble)probLemmaTagWithNSString:(NSString *)word
                            withInt:(jint)loc
                            withInt:(jint)tagId
                            withInt:(jint)lemmaId {
  jdouble cL = [((EduStanfordNlpStatsTwoDimensionalIntCounter *) nil_chk(lemmaTag_)) totalCountWithId:JavaLangInteger_valueOfWithInt_(lemmaId)];
  jdouble cLT = [((EduStanfordNlpStatsTwoDimensionalIntCounter *) nil_chk(lemmaTag_)) getCountWithId:JavaLangInteger_valueOfWithInt_(lemmaId) withId:JavaLangInteger_valueOfWithInt_(tagId)];
  jdouble p_L = cL / [((EduStanfordNlpStatsTwoDimensionalIntCounter *) nil_chk(lemmaTag_)) totalCount];
  jdouble cTseen = [((id<EduStanfordNlpStatsCounter>) nil_chk(tagCounter_)) getCountWithId:JavaLangInteger_valueOfWithInt_(tagId)];
  jdouble p_T = cTseen / [((id<EduStanfordNlpStatsCounter>) nil_chk(tagCounter_)) totalCount];
  jdouble p_L_T = 0.0;
  if (cL > 0.0) {
    jdouble p_T_L = 0.0;
    if (cL > 100.0 && cLT > 0.0) {
      p_T_L = cLT / cL;
    }
    else {
      jdouble cTunseen = [((id<EduStanfordNlpStatsCounter>) nil_chk(lemmaTagUnseen_)) getCountWithId:JavaLangInteger_valueOfWithInt_(tagId)];
      jdouble p_T_U = cTunseen / [((id<EduStanfordNlpStatsCounter>) nil_chk(lemmaTagUnseen_)) totalCount];
      p_T_L = (cLT + IOSDoubleArray_Get(nil_chk(smooth_), 1) * p_T_U) / (cL + IOSDoubleArray_Get(smooth_, 1));
    }
    p_L_T = p_T_L * p_L / p_T;
  }
  else {
    jdouble cTunseen = [((id<EduStanfordNlpStatsCounter>) nil_chk(lemmaTagUnseen_)) getCountWithId:JavaLangInteger_valueOfWithInt_(tagId)];
    p_L_T = cTunseen / [((id<EduStanfordNlpStatsCounter>) nil_chk(tagCounter_)) totalCount];
  }
  return p_L_T;
}

- (jdouble)probMorphTagWithInt:(jint)tagId
                       withInt:(jint)morphId {
  return EduStanfordNlpParserLexparserFactoredLexicon_probMorphTagWithInt_withInt_(self, tagId, morphId);
}

- (void)trainWithJavaUtilCollection:(id<JavaUtilCollection>)trees
             withJavaUtilCollection:(id<JavaUtilCollection>)rawTrees {
  jdouble weight = 1.0;
  [((id<EduStanfordNlpParserLexparserUnknownWordModelTrainer>) nil_chk(uwModelTrainer_)) trainWithJavaUtilCollection:trees withDouble:weight];
  jdouble numTrees = [((id<JavaUtilCollection>) nil_chk(trees)) size];
  id<JavaUtilIterator> rawTreesItr = rawTrees == nil ? nil : [rawTrees iterator];
  id<JavaUtilIterator> treeItr = [trees iterator];
  jint treeId = 0;
  while ([((id<JavaUtilIterator>) nil_chk(treeItr)) hasNext]) {
    EduStanfordNlpTreesTree *tree = [treeItr next];
    id<JavaUtilList> yield = rawTrees == nil ? [((EduStanfordNlpTreesTree *) nil_chk(tree)) yield] : [((EduStanfordNlpTreesTree *) nil_chk([rawTreesItr next])) yield];
    id<JavaUtilList> pretermYield = [((EduStanfordNlpTreesTree *) nil_chk(tree)) preTerminalYield];
    jint yieldLen = [yield size];
    for (jint i = 0; i < yieldLen; ++i) {
      NSString *word = [((id<EduStanfordNlpLingLabel>) nil_chk([yield getWithInt:i])) value];
      jint wordId = [((id<EduStanfordNlpUtilIndex>) nil_chk(wordIndex_)) addToIndexWithId:word];
      NSString *tag = [((id<EduStanfordNlpLingLabel>) nil_chk([((id<JavaUtilList>) nil_chk(pretermYield)) getWithInt:i])) value];
      jint tagId = [((id<EduStanfordNlpUtilIndex>) nil_chk(tagIndex_)) addToIndexWithId:tag];
      NSString *featureStr = [((EduStanfordNlpLingCoreLabel *) nil_chk(((EduStanfordNlpLingCoreLabel *) cast_chk([yield getWithInt:i], [EduStanfordNlpLingCoreLabel class])))) originalText];
      EduStanfordNlpUtilPair *lemmaMorph = EduStanfordNlpInternationalMorphMorphoFeatureSpecification_splitMorphStringWithNSString_withNSString_(word, featureStr);
      NSString *lemma = [((EduStanfordNlpUtilPair *) nil_chk(lemmaMorph)) first];
      jint lemmaId = [wordIndex_ addToIndexWithId:lemma];
      NSString *richMorphTag = [lemmaMorph second];
      NSString *reducedMorphTag = [((NSString *) nil_chk([((EduStanfordNlpInternationalMorphMorphoFeatures *) nil_chk([((EduStanfordNlpInternationalMorphMorphoFeatureSpecification *) nil_chk(morphoSpec_)) strToFeaturesWithNSString:richMorphTag])) description])) trim];
      reducedMorphTag = [((NSString *) nil_chk(reducedMorphTag)) isEmpty] ? EduStanfordNlpParserLexparserFactoredLexicon_NO_MORPH_ANALYSIS : reducedMorphTag;
      jint morphId = [((id<EduStanfordNlpUtilIndex>) nil_chk(morphIndex_)) addToIndexWithId:reducedMorphTag];
      [((EduStanfordNlpStatsTwoDimensionalIntCounter *) nil_chk(wordTag_)) incrementCountWithId:JavaLangInteger_valueOfWithInt_(wordId) withId:JavaLangInteger_valueOfWithInt_(tagId)];
      [((EduStanfordNlpStatsTwoDimensionalIntCounter *) nil_chk(lemmaTag_)) incrementCountWithId:JavaLangInteger_valueOfWithInt_(lemmaId) withId:JavaLangInteger_valueOfWithInt_(tagId)];
      [((EduStanfordNlpStatsTwoDimensionalIntCounter *) nil_chk(morphTag_)) incrementCountWithId:JavaLangInteger_valueOfWithInt_(morphId) withId:JavaLangInteger_valueOfWithInt_(tagId)];
      [((id<EduStanfordNlpStatsCounter>) nil_chk(tagCounter_)) incrementCountWithId:JavaLangInteger_valueOfWithInt_(tagId)];
      if (treeId > ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(((EduStanfordNlpParserLexparserOptions *) nil_chk(op_))->trainOptions_))->fractionBeforeUnseenCounting_ * numTrees) {
        if (![((id<JavaUtilSet>) nil_chk([((EduStanfordNlpStatsTwoDimensionalIntCounter *) nil_chk(wordTag_)) firstKeySet])) containsWithId:JavaLangInteger_valueOfWithInt_(wordId)] || [((EduStanfordNlpStatsIntCounter *) nil_chk([((EduStanfordNlpStatsTwoDimensionalIntCounter *) nil_chk(wordTag_)) getCounterWithId:JavaLangInteger_valueOfWithInt_(wordId)])) totalCount] < 2) {
          [((id<EduStanfordNlpStatsCounter>) nil_chk(wordTagUnseen_)) incrementCountWithId:JavaLangInteger_valueOfWithInt_(tagId)];
        }
        if (![((id<JavaUtilSet>) nil_chk([((EduStanfordNlpStatsTwoDimensionalIntCounter *) nil_chk(lemmaTag_)) firstKeySet])) containsWithId:JavaLangInteger_valueOfWithInt_(lemmaId)] || [((EduStanfordNlpStatsIntCounter *) nil_chk([((EduStanfordNlpStatsTwoDimensionalIntCounter *) nil_chk(lemmaTag_)) getCounterWithId:JavaLangInteger_valueOfWithInt_(lemmaId)])) totalCount] < 2) {
          [((id<EduStanfordNlpStatsCounter>) nil_chk(lemmaTagUnseen_)) incrementCountWithId:JavaLangInteger_valueOfWithInt_(tagId)];
        }
        if (![((id<JavaUtilSet>) nil_chk([((EduStanfordNlpStatsTwoDimensionalIntCounter *) nil_chk(morphTag_)) firstKeySet])) containsWithId:JavaLangInteger_valueOfWithInt_(morphId)] || [((EduStanfordNlpStatsIntCounter *) nil_chk([((EduStanfordNlpStatsTwoDimensionalIntCounter *) nil_chk(morphTag_)) getCounterWithId:JavaLangInteger_valueOfWithInt_(morphId)])) totalCount] < 2) {
          [((id<EduStanfordNlpStatsCounter>) nil_chk(morphTagUnseen_)) incrementCountWithId:JavaLangInteger_valueOfWithInt_(tagId)];
        }
      }
    }
    ++treeId;
  }
}

- (void)initRulesWithWord {
  jint unkWord = [((id<EduStanfordNlpUtilIndex>) nil_chk(wordIndex_)) addToIndexWithId:EduStanfordNlpParserLexparserLexicon_UNKNOWN_WORD];
  jint boundaryWordId = [wordIndex_ addToIndexWithId:EduStanfordNlpParserLexparserLexicon_BOUNDARY];
  jint boundaryTagId = [((id<EduStanfordNlpUtilIndex>) nil_chk(tagIndex_)) addToIndexWithId:EduStanfordNlpParserLexparserLexicon_BOUNDARY_TAG];
  jint numWords = [wordIndex_ size];
  rulesWithWord_ = [IOSObjectArray newArrayWithLength:numWords type:JavaUtilList_class_()];
  for (jint w = 0; w < numWords; w++) {
    (void) IOSObjectArray_SetAndConsume(nil_chk(rulesWithWord_), w, new_JavaUtilArrayList_initWithInt_(1));
  }
  id<JavaUtilSet> lexRules = EduStanfordNlpUtilGenerics_newHashSetWithInt_(40000);
  for (JavaLangInteger *boxed__ in nil_chk([((EduStanfordNlpStatsTwoDimensionalIntCounter *) nil_chk(wordTag_)) firstKeySet])) {
    jint wordId = [((JavaLangInteger *) nil_chk(boxed__)) intValue];
    for (JavaLangInteger *boxed__ in nil_chk([((EduStanfordNlpStatsIntCounter *) nil_chk([((EduStanfordNlpStatsTwoDimensionalIntCounter *) nil_chk(wordTag_)) getCounterWithId:JavaLangInteger_valueOfWithInt_(wordId)])) keySet])) {
      jint tagId = [((JavaLangInteger *) nil_chk(boxed__)) intValue];
      [((id<JavaUtilSet>) nil_chk(lexRules)) addWithId:new_EduStanfordNlpParserLexparserIntTaggedWord_initWithInt_withInt_(wordId, tagId)];
      [lexRules addWithId:new_EduStanfordNlpParserLexparserIntTaggedWord_initWithInt_withInt_(EduStanfordNlpParserLexparserBaseLexicon_nullWord, tagId)];
    }
  }
  for (EduStanfordNlpParserLexparserIntTaggedWord * __strong iTW in nil_chk(lexRules)) {
    if ([((EduStanfordNlpParserLexparserIntTaggedWord *) nil_chk(iTW)) word] == EduStanfordNlpParserLexparserBaseLexicon_nullWord) {
      jdouble types = [((id<EduStanfordNlpStatsCounter>) nil_chk([((id<EduStanfordNlpParserLexparserUnknownWordModel>) nil_chk(uwModel_)) unSeenCounter])) getCountWithId:iTW];
      if (types > ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->openClassTypesThreshold_) {
        EduStanfordNlpParserLexparserIntTaggedWord *iTU = new_EduStanfordNlpParserLexparserIntTaggedWord_initWithInt_withInt_(unkWord, iTW->tag_);
        if (![((id<JavaUtilList>) nil_chk(IOSObjectArray_Get(nil_chk(rulesWithWord_), unkWord))) containsWithId:iTU]) {
          [((id<JavaUtilList>) nil_chk(IOSObjectArray_Get(nil_chk(rulesWithWord_), unkWord))) addWithId:iTU];
        }
      }
    }
    else {
      [((id<JavaUtilList>) nil_chk(IOSObjectArray_Get(nil_chk(rulesWithWord_), iTW->word_))) addWithId:iTW];
    }
  }
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printWithNSString:JreStrcat("$I$", @"The ", [((id<JavaUtilList>) nil_chk(IOSObjectArray_Get(nil_chk(rulesWithWord_), unkWord))) size], @" open class tags are: [")];
  for (EduStanfordNlpParserLexparserIntTaggedWord * __strong item in nil_chk(IOSObjectArray_Get(nil_chk(rulesWithWord_), unkWord))) {
    [JreLoadStatic(JavaLangSystem, err) printWithNSString:JreStrcat("C$", ' ', [tagIndex_ getWithInt:[((EduStanfordNlpParserLexparserIntTaggedWord *) nil_chk(item)) tag]])];
  }
  [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:@" ] "];
  [((id<JavaUtilList>) nil_chk(IOSObjectArray_Get(nil_chk(rulesWithWord_), boundaryWordId))) addWithId:new_EduStanfordNlpParserLexparserIntTaggedWord_initWithInt_withInt_(boundaryWordId, boundaryTagId)];
}

+ (id<JavaUtilList>)treebankToLexiconEventsWithJavaUtilList:(id<JavaUtilList>)treebank
           withEduStanfordNlpParserLexparserFactoredLexicon:(EduStanfordNlpParserLexparserFactoredLexicon *)lexicon {
  return EduStanfordNlpParserLexparserFactoredLexicon_treebankToLexiconEventsWithJavaUtilList_withEduStanfordNlpParserLexparserFactoredLexicon_(treebank, lexicon);
}

+ (id<JavaUtilList>)getTuningSetWithEduStanfordNlpTreesTreebank:(EduStanfordNlpTreesTreebank *)devTreebank
               withEduStanfordNlpParserLexparserFactoredLexicon:(EduStanfordNlpParserLexparserFactoredLexicon *)lexicon
      withEduStanfordNlpParserLexparserTreebankLangParserParams:(id<EduStanfordNlpParserLexparserTreebankLangParserParams>)tlpp {
  return EduStanfordNlpParserLexparserFactoredLexicon_getTuningSetWithEduStanfordNlpTreesTreebank_withEduStanfordNlpParserLexparserFactoredLexicon_withEduStanfordNlpParserLexparserTreebankLangParserParams_(devTreebank, lexicon, tlpp);
}

+ (EduStanfordNlpParserLexparserOptions *)getOptionsWithEduStanfordNlpInternationalLanguage:(EduStanfordNlpInternationalLanguage *)language {
  return EduStanfordNlpParserLexparserFactoredLexicon_getOptionsWithEduStanfordNlpInternationalLanguage_(language);
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  EduStanfordNlpParserLexparserFactoredLexicon_mainWithNSStringArray_(args);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, 3, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "F", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "D", 0x2, 9, 10, -1, -1, -1, -1 },
    { NULL, "D", 0x2, 11, 10, -1, -1, -1, -1 },
    { NULL, "D", 0x2, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, -1, 16, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0xa, 17, 18, -1, 19, -1, -1 },
    { NULL, "LJavaUtilList;", 0xa, 20, 21, -1, 22, -1, -1 },
    { NULL, "LEduStanfordNlpParserLexparserOptions;", 0xa, 23, 24, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 25, 26, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpInternationalMorphMorphoFeatureSpecification:withEduStanfordNlpUtilIndex:withEduStanfordNlpUtilIndex:);
  methods[1].selector = @selector(initWithEduStanfordNlpParserLexparserOptions:withEduStanfordNlpInternationalMorphMorphoFeatureSpecification:withEduStanfordNlpUtilIndex:withEduStanfordNlpUtilIndex:);
  methods[2].selector = @selector(ruleIteratorByWordWithInt:withInt:withNSString:);
  methods[3].selector = @selector(scoreWithEduStanfordNlpParserLexparserIntTaggedWord:withInt:withNSString:withNSString:);
  methods[4].selector = @selector(probWordTagWithNSString:withInt:withInt:withInt:);
  methods[5].selector = @selector(probLemmaTagWithNSString:withInt:withInt:withInt:);
  methods[6].selector = @selector(probMorphTagWithInt:withInt:);
  methods[7].selector = @selector(trainWithJavaUtilCollection:withJavaUtilCollection:);
  methods[8].selector = @selector(initRulesWithWord);
  methods[9].selector = @selector(treebankToLexiconEventsWithJavaUtilList:withEduStanfordNlpParserLexparserFactoredLexicon:);
  methods[10].selector = @selector(getTuningSetWithEduStanfordNlpTreesTreebank:withEduStanfordNlpParserLexparserFactoredLexicon:withEduStanfordNlpParserLexparserTreebankLangParserParams:);
  methods[11].selector = @selector(getOptionsWithEduStanfordNlpInternationalLanguage:);
  methods[12].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpParserLexparserFactoredLexicon_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "DEBUG", "Z", .constantValue.asBOOL = EduStanfordNlpParserLexparserFactoredLexicon_DEBUG, 0x1a, -1, -1, -1, -1 },
    { "morphoSpec_", "LEduStanfordNlpInternationalMorphMorphoFeatureSpecification;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "NO_MORPH_ANALYSIS", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 27, -1, -1 },
    { "morphIndex_", "LEduStanfordNlpUtilIndex;", .constantValue.asLong = 0, 0x2, -1, -1, 28, -1 },
    { "wordTag_", "LEduStanfordNlpStatsTwoDimensionalIntCounter;", .constantValue.asLong = 0, 0x2, -1, -1, 29, -1 },
    { "wordTagUnseen_", "LEduStanfordNlpStatsCounter;", .constantValue.asLong = 0, 0x2, -1, -1, 30, -1 },
    { "lemmaTag_", "LEduStanfordNlpStatsTwoDimensionalIntCounter;", .constantValue.asLong = 0, 0x2, -1, -1, 29, -1 },
    { "lemmaTagUnseen_", "LEduStanfordNlpStatsCounter;", .constantValue.asLong = 0, 0x2, -1, -1, 30, -1 },
    { "morphTag_", "LEduStanfordNlpStatsTwoDimensionalIntCounter;", .constantValue.asLong = 0, 0x2, -1, -1, 29, -1 },
    { "morphTagUnseen_", "LEduStanfordNlpStatsCounter;", .constantValue.asLong = 0, 0x2, -1, -1, 30, -1 },
    { "tagCounter_", "LEduStanfordNlpStatsCounter;", .constantValue.asLong = 0, 0x2, -1, -1, 30, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpInternationalMorphMorphoFeatureSpecification;LEduStanfordNlpUtilIndex;LEduStanfordNlpUtilIndex;", "(Ledu/stanford/nlp/international/morph/MorphoFeatureSpecification;Ledu/stanford/nlp/util/Index<Ljava/lang/String;>;Ledu/stanford/nlp/util/Index<Ljava/lang/String;>;)V", "LEduStanfordNlpParserLexparserOptions;LEduStanfordNlpInternationalMorphMorphoFeatureSpecification;LEduStanfordNlpUtilIndex;LEduStanfordNlpUtilIndex;", "(Ledu/stanford/nlp/parser/lexparser/Options;Ledu/stanford/nlp/international/morph/MorphoFeatureSpecification;Ledu/stanford/nlp/util/Index<Ljava/lang/String;>;Ledu/stanford/nlp/util/Index<Ljava/lang/String;>;)V", "ruleIteratorByWord", "IILNSString;", "(IILjava/lang/String;)Ljava/util/Iterator<Ledu/stanford/nlp/parser/lexparser/IntTaggedWord;>;", "score", "LEduStanfordNlpParserLexparserIntTaggedWord;ILNSString;LNSString;", "probWordTag", "LNSString;III", "probLemmaTag", "probMorphTag", "II", "train", "LJavaUtilCollection;LJavaUtilCollection;", "(Ljava/util/Collection<Ledu/stanford/nlp/trees/Tree;>;Ljava/util/Collection<Ledu/stanford/nlp/trees/Tree;>;)V", "treebankToLexiconEvents", "LJavaUtilList;LEduStanfordNlpParserLexparserFactoredLexicon;", "(Ljava/util/List<Ledu/stanford/nlp/trees/Tree;>;Ledu/stanford/nlp/parser/lexparser/FactoredLexicon;)Ljava/util/List<Ledu/stanford/nlp/parser/lexparser/FactoredLexiconEvent;>;", "getTuningSet", "LEduStanfordNlpTreesTreebank;LEduStanfordNlpParserLexparserFactoredLexicon;LEduStanfordNlpParserLexparserTreebankLangParserParams;", "(Ledu/stanford/nlp/trees/Treebank;Ledu/stanford/nlp/parser/lexparser/FactoredLexicon;Ledu/stanford/nlp/parser/lexparser/TreebankLangParserParams;)Ljava/util/List<Ledu/stanford/nlp/parser/lexparser/FactoredLexiconEvent;>;", "getOptions", "LEduStanfordNlpInternationalLanguage;", "main", "[LNSString;", &EduStanfordNlpParserLexparserFactoredLexicon_NO_MORPH_ANALYSIS, "Ledu/stanford/nlp/util/Index<Ljava/lang/String;>;", "Ledu/stanford/nlp/stats/TwoDimensionalIntCounter<Ljava/lang/Integer;Ljava/lang/Integer;>;", "Ledu/stanford/nlp/stats/Counter<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpParserLexparserFactoredLexicon = { "FactoredLexicon", "edu.stanford.nlp.parser.lexparser", ptrTable, methods, fields, 7, 0x1, 13, 12, -1, -1, -1, -1, -1 };
  return &_EduStanfordNlpParserLexparserFactoredLexicon;
}

@end

void EduStanfordNlpParserLexparserFactoredLexicon_initWithEduStanfordNlpInternationalMorphMorphoFeatureSpecification_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(EduStanfordNlpParserLexparserFactoredLexicon *self, EduStanfordNlpInternationalMorphMorphoFeatureSpecification *morphoSpec, id<EduStanfordNlpUtilIndex> wordIndex, id<EduStanfordNlpUtilIndex> tagIndex) {
  EduStanfordNlpParserLexparserBaseLexicon_initWithEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(self, wordIndex, tagIndex);
  self->morphIndex_ = new_EduStanfordNlpUtilHashIndex_init();
  self->wordTag_ = new_EduStanfordNlpStatsTwoDimensionalIntCounter_initWithInt_(40000);
  self->wordTagUnseen_ = new_EduStanfordNlpStatsClassicCounter_initWithInt_(500);
  self->lemmaTag_ = new_EduStanfordNlpStatsTwoDimensionalIntCounter_initWithInt_(40000);
  self->lemmaTagUnseen_ = new_EduStanfordNlpStatsClassicCounter_initWithInt_(500);
  self->morphTag_ = new_EduStanfordNlpStatsTwoDimensionalIntCounter_initWithInt_(500);
  self->morphTagUnseen_ = new_EduStanfordNlpStatsClassicCounter_initWithInt_(500);
  self->tagCounter_ = new_EduStanfordNlpStatsClassicCounter_initWithInt_(300);
  self->morphoSpec_ = morphoSpec;
}

EduStanfordNlpParserLexparserFactoredLexicon *new_EduStanfordNlpParserLexparserFactoredLexicon_initWithEduStanfordNlpInternationalMorphMorphoFeatureSpecification_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(EduStanfordNlpInternationalMorphMorphoFeatureSpecification *morphoSpec, id<EduStanfordNlpUtilIndex> wordIndex, id<EduStanfordNlpUtilIndex> tagIndex) {
  J2OBJC_NEW_IMPL(EduStanfordNlpParserLexparserFactoredLexicon, initWithEduStanfordNlpInternationalMorphMorphoFeatureSpecification_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_, morphoSpec, wordIndex, tagIndex)
}

EduStanfordNlpParserLexparserFactoredLexicon *create_EduStanfordNlpParserLexparserFactoredLexicon_initWithEduStanfordNlpInternationalMorphMorphoFeatureSpecification_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(EduStanfordNlpInternationalMorphMorphoFeatureSpecification *morphoSpec, id<EduStanfordNlpUtilIndex> wordIndex, id<EduStanfordNlpUtilIndex> tagIndex) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpParserLexparserFactoredLexicon, initWithEduStanfordNlpInternationalMorphMorphoFeatureSpecification_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_, morphoSpec, wordIndex, tagIndex)
}

void EduStanfordNlpParserLexparserFactoredLexicon_initWithEduStanfordNlpParserLexparserOptions_withEduStanfordNlpInternationalMorphMorphoFeatureSpecification_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(EduStanfordNlpParserLexparserFactoredLexicon *self, EduStanfordNlpParserLexparserOptions *op, EduStanfordNlpInternationalMorphMorphoFeatureSpecification *morphoSpec, id<EduStanfordNlpUtilIndex> wordIndex, id<EduStanfordNlpUtilIndex> tagIndex) {
  EduStanfordNlpParserLexparserBaseLexicon_initWithEduStanfordNlpParserLexparserOptions_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(self, op, wordIndex, tagIndex);
  self->morphIndex_ = new_EduStanfordNlpUtilHashIndex_init();
  self->wordTag_ = new_EduStanfordNlpStatsTwoDimensionalIntCounter_initWithInt_(40000);
  self->wordTagUnseen_ = new_EduStanfordNlpStatsClassicCounter_initWithInt_(500);
  self->lemmaTag_ = new_EduStanfordNlpStatsTwoDimensionalIntCounter_initWithInt_(40000);
  self->lemmaTagUnseen_ = new_EduStanfordNlpStatsClassicCounter_initWithInt_(500);
  self->morphTag_ = new_EduStanfordNlpStatsTwoDimensionalIntCounter_initWithInt_(500);
  self->morphTagUnseen_ = new_EduStanfordNlpStatsClassicCounter_initWithInt_(500);
  self->tagCounter_ = new_EduStanfordNlpStatsClassicCounter_initWithInt_(300);
  self->morphoSpec_ = morphoSpec;
}

EduStanfordNlpParserLexparserFactoredLexicon *new_EduStanfordNlpParserLexparserFactoredLexicon_initWithEduStanfordNlpParserLexparserOptions_withEduStanfordNlpInternationalMorphMorphoFeatureSpecification_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(EduStanfordNlpParserLexparserOptions *op, EduStanfordNlpInternationalMorphMorphoFeatureSpecification *morphoSpec, id<EduStanfordNlpUtilIndex> wordIndex, id<EduStanfordNlpUtilIndex> tagIndex) {
  J2OBJC_NEW_IMPL(EduStanfordNlpParserLexparserFactoredLexicon, initWithEduStanfordNlpParserLexparserOptions_withEduStanfordNlpInternationalMorphMorphoFeatureSpecification_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_, op, morphoSpec, wordIndex, tagIndex)
}

EduStanfordNlpParserLexparserFactoredLexicon *create_EduStanfordNlpParserLexparserFactoredLexicon_initWithEduStanfordNlpParserLexparserOptions_withEduStanfordNlpInternationalMorphMorphoFeatureSpecification_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(EduStanfordNlpParserLexparserOptions *op, EduStanfordNlpInternationalMorphMorphoFeatureSpecification *morphoSpec, id<EduStanfordNlpUtilIndex> wordIndex, id<EduStanfordNlpUtilIndex> tagIndex) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpParserLexparserFactoredLexicon, initWithEduStanfordNlpParserLexparserOptions_withEduStanfordNlpInternationalMorphMorphoFeatureSpecification_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_, op, morphoSpec, wordIndex, tagIndex)
}

jdouble EduStanfordNlpParserLexparserFactoredLexicon_probWordTagWithNSString_withInt_withInt_withInt_(EduStanfordNlpParserLexparserFactoredLexicon *self, NSString *word, jint loc, jint wordId, jint tagId) {
  jdouble cW = [((EduStanfordNlpStatsTwoDimensionalIntCounter *) nil_chk(self->wordTag_)) totalCountWithId:JavaLangInteger_valueOfWithInt_(wordId)];
  jdouble cWT = [((EduStanfordNlpStatsTwoDimensionalIntCounter *) nil_chk(self->wordTag_)) getCountWithId:JavaLangInteger_valueOfWithInt_(wordId) withId:JavaLangInteger_valueOfWithInt_(tagId)];
  jdouble p_W = cW / [((EduStanfordNlpStatsTwoDimensionalIntCounter *) nil_chk(self->wordTag_)) totalCount];
  jdouble cTseen = [((id<EduStanfordNlpStatsCounter>) nil_chk(self->tagCounter_)) getCountWithId:JavaLangInteger_valueOfWithInt_(tagId)];
  jdouble p_T = cTseen / [((id<EduStanfordNlpStatsCounter>) nil_chk(self->tagCounter_)) totalCount];
  jdouble p_W_T = 0.0;
  if (cW > 0.0) {
    jdouble p_T_W = 0.0;
    if (cW > 100.0 && cWT > 0.0) {
      p_T_W = cWT / cW;
    }
    else {
      jdouble cTunseen = [((id<EduStanfordNlpStatsCounter>) nil_chk(self->wordTagUnseen_)) getCountWithId:JavaLangInteger_valueOfWithInt_(tagId)];
      jdouble p_T_U = cTunseen / [((id<EduStanfordNlpStatsCounter>) nil_chk(self->wordTagUnseen_)) totalCount];
      p_T_W = (cWT + IOSDoubleArray_Get(nil_chk(self->smooth_), 1) * p_T_U) / (cW + IOSDoubleArray_Get(self->smooth_, 1));
    }
    p_W_T = p_T_W * p_W / p_T;
  }
  else {
    EduStanfordNlpParserLexparserIntTaggedWord *iTW = new_EduStanfordNlpParserLexparserIntTaggedWord_initWithInt_withInt_(wordId, tagId);
    jdouble c_T = [((id<EduStanfordNlpStatsCounter>) nil_chk(self->tagCounter_)) getCountWithId:JavaLangInteger_valueOfWithInt_(tagId)];
    p_W_T = JavaLangMath_expWithDouble_([((id<EduStanfordNlpParserLexparserUnknownWordModel>) nil_chk([self getUnknownWordModel])) scoreWithEduStanfordNlpParserLexparserIntTaggedWord:iTW withInt:loc withDouble:c_T withDouble:[((id<EduStanfordNlpStatsCounter>) nil_chk(self->tagCounter_)) totalCount] withDouble:IOSDoubleArray_Get(nil_chk(self->smooth_), 0) withNSString:word]);
  }
  return p_W_T;
}

jdouble EduStanfordNlpParserLexparserFactoredLexicon_probMorphTagWithInt_withInt_(EduStanfordNlpParserLexparserFactoredLexicon *self, jint tagId, jint morphId) {
  jdouble cM = [((EduStanfordNlpStatsTwoDimensionalIntCounter *) nil_chk(self->morphTag_)) totalCountWithId:JavaLangInteger_valueOfWithInt_(morphId)];
  jdouble cMT = [((EduStanfordNlpStatsTwoDimensionalIntCounter *) nil_chk(self->morphTag_)) getCountWithId:JavaLangInteger_valueOfWithInt_(morphId) withId:JavaLangInteger_valueOfWithInt_(tagId)];
  jdouble p_M = cM / [((EduStanfordNlpStatsTwoDimensionalIntCounter *) nil_chk(self->morphTag_)) totalCount];
  jdouble cTseen = [((id<EduStanfordNlpStatsCounter>) nil_chk(self->tagCounter_)) getCountWithId:JavaLangInteger_valueOfWithInt_(tagId)];
  jdouble p_T = cTseen / [((id<EduStanfordNlpStatsCounter>) nil_chk(self->tagCounter_)) totalCount];
  jdouble p_M_T = 0.0;
  if (cM > 100.0 && cMT > 0.0) {
    jdouble p_T_M = cMT / cM;
    p_M_T = p_T_M * p_M / p_T;
  }
  else {
    p_M_T = 1.0 / ([((EduStanfordNlpStatsTwoDimensionalIntCounter *) nil_chk(self->morphTag_)) totalCount] + [((id<EduStanfordNlpUtilIndex>) nil_chk(self->tagIndex_)) size] + 1.0);
  }
  return p_M_T;
}

id<JavaUtilList> EduStanfordNlpParserLexparserFactoredLexicon_treebankToLexiconEventsWithJavaUtilList_withEduStanfordNlpParserLexparserFactoredLexicon_(id<JavaUtilList> treebank, EduStanfordNlpParserLexparserFactoredLexicon *lexicon) {
  EduStanfordNlpParserLexparserFactoredLexicon_initialize();
  id<JavaUtilList> events = new_JavaUtilArrayList_initWithInt_(70000);
  for (EduStanfordNlpTreesTree * __strong tree in nil_chk(treebank)) {
    id<JavaUtilList> yield = [((EduStanfordNlpTreesTree *) nil_chk(tree)) yield];
    id<JavaUtilList> preterm = [tree preTerminalYield];
    JreAssert(([((id<JavaUtilList>) nil_chk(yield)) size] == [((id<JavaUtilList>) nil_chk(preterm)) size]), (@"edu/stanford/nlp/parser/lexparser/FactoredLexicon.java:376 condition failed: assert yield.size() == preterm.size();"));
    jint yieldLen = [yield size];
    for (jint i = 0; i < yieldLen; ++i) {
      NSString *tag = [((id<EduStanfordNlpLingLabel>) nil_chk([preterm getWithInt:i])) value];
      jint tagId = [((id<EduStanfordNlpUtilIndex>) nil_chk(((EduStanfordNlpParserLexparserFactoredLexicon *) nil_chk(lexicon))->tagIndex_)) indexOfWithId:tag];
      NSString *word = [((id<EduStanfordNlpLingLabel>) nil_chk([yield getWithInt:i])) value];
      jint wordId = [((id<EduStanfordNlpUtilIndex>) nil_chk(lexicon->wordIndex_)) indexOfWithId:word];
      if (tagId < 0) {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$C$", @"Discarding training example: ", word, ' ', tag)];
        continue;
      }
      NSString *featureStr = [((EduStanfordNlpLingCoreLabel *) nil_chk(((EduStanfordNlpLingCoreLabel *) cast_chk([yield getWithInt:i], [EduStanfordNlpLingCoreLabel class])))) originalText];
      EduStanfordNlpUtilPair *lemmaMorph = EduStanfordNlpInternationalMorphMorphoFeatureSpecification_splitMorphStringWithNSString_withNSString_(word, featureStr);
      NSString *lemma = [((EduStanfordNlpUtilPair *) nil_chk(lemmaMorph)) first];
      NSString *richTag = [lemmaMorph second];
      NSString *reducedTag = [((EduStanfordNlpInternationalMorphMorphoFeatures *) nil_chk([((EduStanfordNlpInternationalMorphMorphoFeatureSpecification *) nil_chk(lexicon->morphoSpec_)) strToFeaturesWithNSString:richTag])) description];
      reducedTag = ((jint) [((NSString *) nil_chk(reducedTag)) length]) == 0 ? EduStanfordNlpParserLexparserFactoredLexicon_NO_MORPH_ANALYSIS : reducedTag;
      jint lemmaId = [lexicon->wordIndex_ indexOfWithId:lemma];
      jint morphId = [((id<EduStanfordNlpUtilIndex>) nil_chk(lexicon->morphIndex_)) indexOfWithId:reducedTag];
      EduStanfordNlpParserLexparserFactoredLexiconEvent *event = new_EduStanfordNlpParserLexparserFactoredLexiconEvent_initWithInt_withInt_withInt_withInt_withInt_withNSString_withNSString_(wordId, tagId, lemmaId, morphId, i, word, featureStr);
      [events addWithId:event];
    }
  }
  return events;
}

id<JavaUtilList> EduStanfordNlpParserLexparserFactoredLexicon_getTuningSetWithEduStanfordNlpTreesTreebank_withEduStanfordNlpParserLexparserFactoredLexicon_withEduStanfordNlpParserLexparserTreebankLangParserParams_(EduStanfordNlpTreesTreebank *devTreebank, EduStanfordNlpParserLexparserFactoredLexicon *lexicon, id<EduStanfordNlpParserLexparserTreebankLangParserParams> tlpp) {
  EduStanfordNlpParserLexparserFactoredLexicon_initialize();
  id<JavaUtilList> devTrees = new_JavaUtilArrayList_initWithInt_(3000);
  for (EduStanfordNlpTreesTree * __strong tree in nil_chk(devTreebank)) {
    for (EduStanfordNlpTreesTree * __strong subTree in nil_chk(tree)) {
      if (![((EduStanfordNlpTreesTree *) nil_chk(subTree)) isLeaf]) {
        (void) [((id<EduStanfordNlpParserLexparserTreebankLangParserParams>) nil_chk(tlpp)) transformTreeWithEduStanfordNlpTreesTree:subTree withEduStanfordNlpTreesTree:tree];
      }
    }
    [devTrees addWithId:tree];
  }
  id<JavaUtilList> tuningSet = EduStanfordNlpParserLexparserFactoredLexicon_treebankToLexiconEventsWithJavaUtilList_withEduStanfordNlpParserLexparserFactoredLexicon_(devTrees, lexicon);
  return tuningSet;
}

EduStanfordNlpParserLexparserOptions *EduStanfordNlpParserLexparserFactoredLexicon_getOptionsWithEduStanfordNlpInternationalLanguage_(EduStanfordNlpInternationalLanguage *language) {
  EduStanfordNlpParserLexparserFactoredLexicon_initialize();
  EduStanfordNlpParserLexparserOptions *options = new_EduStanfordNlpParserLexparserOptions_init();
  if ([((EduStanfordNlpInternationalLanguage *) nil_chk(language)) isEqual:JreLoadEnum(EduStanfordNlpInternationalLanguage, Arabic)]) {
    ((EduStanfordNlpParserLexparserOptions_LexOptions *) nil_chk(options->lexOptions_))->useUnknownWordSignatures_ = 9;
    options->lexOptions_->unknownPrefixSize_ = 1;
    options->lexOptions_->unknownSuffixSize_ = 1;
    options->lexOptions_->uwModelTrainer_ = @"edu.stanford.nlp.parser.lexparser.ArabicUnknownWordModelTrainer";
  }
  else if ([language isEqual:JreLoadEnum(EduStanfordNlpInternationalLanguage, French)]) {
    ((EduStanfordNlpParserLexparserOptions_LexOptions *) nil_chk(options->lexOptions_))->useUnknownWordSignatures_ = 1;
    options->lexOptions_->unknownPrefixSize_ = 1;
    options->lexOptions_->unknownSuffixSize_ = 2;
    options->lexOptions_->uwModelTrainer_ = @"edu.stanford.nlp.parser.lexparser.FrenchUnknownWordModelTrainer";
  }
  else {
    @throw new_JavaLangUnsupportedOperationException_init();
  }
  return options;
}

void EduStanfordNlpParserLexparserFactoredLexicon_mainWithNSStringArray_(IOSObjectArray *args) {
  EduStanfordNlpParserLexparserFactoredLexicon_initialize();
  if (((IOSObjectArray *) nil_chk(args))->size_ != 4) {
    (void) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printfWithNSString:@"Usage: java %s language features train_file dev_file%n" withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ [EduStanfordNlpParserLexparserFactoredLexicon_class_() getName] } count:1 type:NSObject_class_()]];
    JavaLangSystem_exitWithInt_(-1);
  }
  EduStanfordNlpInternationalLanguage *language = EduStanfordNlpInternationalLanguage_valueOfWithNSString_(IOSObjectArray_Get(args, 0));
  id<EduStanfordNlpParserLexparserTreebankLangParserParams> tlpp = ((EduStanfordNlpInternationalLanguage *) nil_chk(language))->params_;
  EduStanfordNlpTreesTreebank *trainTreebank = [((id<EduStanfordNlpParserLexparserTreebankLangParserParams>) nil_chk(tlpp)) diskTreebank];
  [((EduStanfordNlpTreesTreebank *) nil_chk(trainTreebank)) loadPathWithNSString:IOSObjectArray_Get(args, 2)];
  EduStanfordNlpTreesTreebank *devTreebank = [tlpp diskTreebank];
  [((EduStanfordNlpTreesTreebank *) nil_chk(devTreebank)) loadPathWithNSString:IOSObjectArray_Get(args, 3)];
  EduStanfordNlpInternationalMorphMorphoFeatureSpecification *morphoSpec;
  EduStanfordNlpParserLexparserOptions *options = EduStanfordNlpParserLexparserFactoredLexicon_getOptionsWithEduStanfordNlpInternationalLanguage_(language);
  if ([language isEqual:JreLoadEnum(EduStanfordNlpInternationalLanguage, Arabic)]) {
    morphoSpec = new_EduStanfordNlpInternationalArabicArabicMorphoFeatureSpecification_init();
    IOSObjectArray *languageOptions = [IOSObjectArray newArrayWithObjects:(id[]){ @"-arabicFactored" } count:1 type:NSString_class_()];
    [tlpp setOptionFlagWithNSStringArray:languageOptions withInt:0];
  }
  else if ([language isEqual:JreLoadEnum(EduStanfordNlpInternationalLanguage, French)]) {
    morphoSpec = new_EduStanfordNlpInternationalFrenchFrenchMorphoFeatureSpecification_init();
    IOSObjectArray *languageOptions = [IOSObjectArray newArrayWithObjects:(id[]){ @"-frenchFactored" } count:1 type:NSString_class_()];
    [tlpp setOptionFlagWithNSStringArray:languageOptions withInt:0];
  }
  else {
    @throw new_JavaLangUnsupportedOperationException_init();
  }
  NSString *featureList = IOSObjectArray_Get(args, 1);
  IOSObjectArray *features = [((NSString *) nil_chk([((NSString *) nil_chk(featureList)) trim])) split:@","];
  {
    IOSObjectArray *a__ = features;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *feature = *b__++;
      [morphoSpec activateWithEduStanfordNlpInternationalMorphMorphoFeatureSpecification_MorphoFeatureType:EduStanfordNlpInternationalMorphMorphoFeatureSpecification_MorphoFeatureType_valueOfWithNSString_(feature)];
    }
  }
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"Language: ", [language description])];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$$", @"Features: ", IOSObjectArray_Get(args, 1))];
  [JreLoadStatic(JavaLangSystem, out) printWithNSString:@"Loading training trees..."];
  id<JavaUtilList> trainTrees = new_JavaUtilArrayList_initWithInt_(19000);
  id<EduStanfordNlpUtilIndex> wordIndex = new_EduStanfordNlpUtilHashIndex_init();
  id<EduStanfordNlpUtilIndex> tagIndex = new_EduStanfordNlpUtilHashIndex_init();
  for (EduStanfordNlpTreesTree * __strong tree in trainTreebank) {
    for (EduStanfordNlpTreesTree * __strong subTree in nil_chk(tree)) {
      if (![((EduStanfordNlpTreesTree *) nil_chk(subTree)) isLeaf]) {
        (void) [tlpp transformTreeWithEduStanfordNlpTreesTree:subTree withEduStanfordNlpTreesTree:tree];
      }
    }
    [trainTrees addWithId:tree];
  }
  (void) [JreLoadStatic(JavaLangSystem, out) printfWithNSString:@"Done! (%d trees)%n" withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_([trainTrees size]) } count:1 type:NSObject_class_()]];
  [JreLoadStatic(JavaLangSystem, out) printWithNSString:@"Collecting sufficient statistics for lexicon..."];
  EduStanfordNlpParserLexparserFactoredLexicon *lexicon = new_EduStanfordNlpParserLexparserFactoredLexicon_initWithEduStanfordNlpParserLexparserOptions_withEduStanfordNlpInternationalMorphMorphoFeatureSpecification_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(options, morphoSpec, wordIndex, tagIndex);
  [lexicon initializeTrainingWithDouble:[trainTrees size]];
  [lexicon trainWithJavaUtilCollection:trainTrees withJavaUtilCollection:nil];
  [lexicon finishTraining];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"Done!"];
  trainTrees = nil;
  [JreLoadStatic(JavaLangSystem, out) printWithNSString:@"Loading tuning set..."];
  id<JavaUtilList> tuningSet = EduStanfordNlpParserLexparserFactoredLexicon_getTuningSetWithEduStanfordNlpTreesTreebank_withEduStanfordNlpParserLexparserFactoredLexicon_withEduStanfordNlpParserLexparserTreebankLangParserParams_(devTreebank, lexicon, tlpp);
  (void) [JreLoadStatic(JavaLangSystem, out) printfWithNSString:@"...Done! (%d events)%n" withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_([((id<JavaUtilList>) nil_chk(tuningSet)) size]) } count:1 type:NSObject_class_()]];
  jint nCorrect = 0;
  id<EduStanfordNlpStatsCounter> errors = new_EduStanfordNlpStatsClassicCounter_init();
  for (EduStanfordNlpParserLexparserFactoredLexiconEvent * __strong event in tuningSet) {
    id<JavaUtilIterator> itr = [lexicon ruleIteratorByWordWithNSString:[((EduStanfordNlpParserLexparserFactoredLexiconEvent *) nil_chk(event)) word] withInt:[event getLoc] withNSString:[event featureStr]];
    id<EduStanfordNlpStatsCounter> logScores = new_EduStanfordNlpStatsClassicCounter_init();
    jboolean noRules = true;
    jint goldTagId = -1;
    while ([((id<JavaUtilIterator>) nil_chk(itr)) hasNext]) {
      noRules = false;
      EduStanfordNlpParserLexparserIntTaggedWord *iTW = [itr next];
      if ([((EduStanfordNlpParserLexparserIntTaggedWord *) nil_chk(iTW)) tag] == [event tagId]) {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printWithNSString:@"GOLD-"];
        goldTagId = [iTW tag];
      }
      jfloat tagScore = [lexicon scoreWithEduStanfordNlpParserLexparserIntTaggedWord:iTW withInt:[event getLoc] withNSString:[event word] withNSString:[event featureStr]];
      [logScores incrementCountWithId:JavaLangInteger_valueOfWithInt_([iTW tag]) withDouble:tagScore];
    }
    if (noRules) {
      (void) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printfWithNSString:@"NO TAGGINGS: %s %s%n" withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ [event word], [event featureStr] } count:2 type:NSObject_class_()]];
    }
    else {
      jint hypTagId = [((JavaLangInteger *) nil_chk(EduStanfordNlpStatsCounters_argmaxWithEduStanfordNlpStatsCounter_(logScores))) intValue];
      if (hypTagId == goldTagId) {
        ++nCorrect;
      }
      else {
        NSString *goldTag = goldTagId < 0 ? @"UNSEEN" : [((id<EduStanfordNlpUtilIndex>) nil_chk(lexicon->tagIndex_)) getWithInt:goldTagId];
        [errors incrementCountWithId:goldTag];
      }
    }
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) println];
  }
  jdouble acc = (jdouble) nCorrect / (jdouble) [tuningSet size];
  (void) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printfWithNSString:@"%n%nACCURACY: %.2f%n%n" withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_(acc * 100.0) } count:1 type:NSObject_class_()]];
  [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:@"% of errors by type:"];
  id<JavaUtilList> biggestKeys = new_JavaUtilArrayList_initWithJavaUtilCollection_([errors keySet]);
  JavaUtilCollections_sortWithJavaUtilList_withJavaUtilComparator_(biggestKeys, EduStanfordNlpStatsCounters_toComparatorWithEduStanfordNlpStatsCounter_withBoolean_withBoolean_(errors, false, true));
  EduStanfordNlpStatsCounters_normalizeWithEduStanfordNlpStatsCounter_(errors);
  for (NSString * __strong key in biggestKeys) {
    (void) [JreLoadStatic(JavaLangSystem, err) printfWithNSString:@"%s\t%.2f%n" withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ key, JavaLangDouble_valueOfWithDouble_([errors getCountWithId:key] * 100.0) } count:2 type:NSObject_class_()]];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpParserLexparserFactoredLexicon)
