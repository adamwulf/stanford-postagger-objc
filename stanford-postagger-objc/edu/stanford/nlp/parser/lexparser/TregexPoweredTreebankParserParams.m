//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/parser/lexparser/TregexPoweredTreebankParserParams.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/ling/HasTag.h"
#include "edu/stanford/nlp/ling/Label.h"
#include "edu/stanford/nlp/parser/lexparser/AbstractTreebankParserParams.h"
#include "edu/stanford/nlp/parser/lexparser/TregexPoweredTreebankParserParams.h"
#include "edu/stanford/nlp/trees/HeadFinder.h"
#include "edu/stanford/nlp/trees/Tree.h"
#include "edu/stanford/nlp/trees/TreebankLanguagePack.h"
#include "edu/stanford/nlp/trees/tregex/TregexMatcher.h"
#include "edu/stanford/nlp/trees/tregex/TregexParseException.h"
#include "edu/stanford/nlp/trees/tregex/TregexPattern.h"
#include "edu/stanford/nlp/trees/tregex/TregexPatternCompiler.h"
#include "edu/stanford/nlp/util/CollectionUtils.h"
#include "edu/stanford/nlp/util/Generics.h"
#include "edu/stanford/nlp/util/Pair.h"
#include "java/io/PrintStream.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/Collection.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/function/Function.h"

@interface EduStanfordNlpParserLexparserTregexPoweredTreebankParserParams () {
 @public
  id<JavaUtilMap> annotationPatterns_;
  id<JavaUtilCollection> features_;
}

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserTregexPoweredTreebankParserParams, annotationPatterns_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserTregexPoweredTreebankParserParams, features_, id<JavaUtilCollection>)

inline jlong EduStanfordNlpParserLexparserTregexPoweredTreebankParserParams_get_serialVersionUID();
#define EduStanfordNlpParserLexparserTregexPoweredTreebankParserParams_serialVersionUID -1985603901694682420LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpParserLexparserTregexPoweredTreebankParserParams, serialVersionUID, jlong)

@interface EduStanfordNlpParserLexparserTregexPoweredTreebankParserParams_SimpleStringFunction () {
 @public
  NSString *annotationMark_;
}

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserTregexPoweredTreebankParserParams_SimpleStringFunction, annotationMark_, NSString *)

inline jlong EduStanfordNlpParserLexparserTregexPoweredTreebankParserParams_SimpleStringFunction_get_serialVersionUID();
#define EduStanfordNlpParserLexparserTregexPoweredTreebankParserParams_SimpleStringFunction_serialVersionUID 6958776731059724396LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpParserLexparserTregexPoweredTreebankParserParams_SimpleStringFunction, serialVersionUID, jlong)

@interface EduStanfordNlpParserLexparserTregexPoweredTreebankParserParams_AnnotateHeadFunction () {
 @public
  id<EduStanfordNlpTreesHeadFinder> headFinder_;
  jboolean lowerCase_;
}

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserTregexPoweredTreebankParserParams_AnnotateHeadFunction, headFinder_, id<EduStanfordNlpTreesHeadFinder>)

inline jlong EduStanfordNlpParserLexparserTregexPoweredTreebankParserParams_AnnotateHeadFunction_get_serialVersionUID();
#define EduStanfordNlpParserLexparserTregexPoweredTreebankParserParams_AnnotateHeadFunction_serialVersionUID -4213299755069618322LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpParserLexparserTregexPoweredTreebankParserParams_AnnotateHeadFunction, serialVersionUID, jlong)

@implementation EduStanfordNlpParserLexparserTregexPoweredTreebankParserParams

- (IOSObjectArray *)baselineAnnotationFeatures {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (instancetype)initWithEduStanfordNlpTreesTreebankLanguagePack:(id<EduStanfordNlpTreesTreebankLanguagePack>)tlp {
  EduStanfordNlpParserLexparserTregexPoweredTreebankParserParams_initWithEduStanfordNlpTreesTreebankLanguagePack_(self, tlp);
  return self;
}

- (void)compileAnnotationsWithEduStanfordNlpTreesHeadFinder:(id<EduStanfordNlpTreesHeadFinder>)hf {
  EduStanfordNlpTreesTregexTregexPatternCompiler *compiler = new_EduStanfordNlpTreesTregexTregexPatternCompiler_initWithEduStanfordNlpTreesHeadFinder_(hf);
  [((id<JavaUtilMap>) nil_chk(annotationPatterns_)) clear];
  for (id<JavaUtilMap_Entry> __strong annotation in nil_chk([((id<JavaUtilMap>) nil_chk(annotations_)) entrySet])) {
    EduStanfordNlpTreesTregexTregexPattern *compiled;
    @try {
      compiled = [compiler compileWithNSString:[((EduStanfordNlpUtilPair *) nil_chk([((id<JavaUtilMap_Entry>) nil_chk(annotation)) getValue])) first]];
    }
    @catch (EduStanfordNlpTreesTregexTregexParseException *e) {
      jint nth = [annotationPatterns_ size] + 1;
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$I$@", @"Parse exception on annotation pattern #", nth, @" initialization: ", e)];
      continue;
    }
    EduStanfordNlpUtilPair *behavior = new_EduStanfordNlpUtilPair_initWithId_withId_(compiled, [((EduStanfordNlpUtilPair *) nil_chk([annotation getValue])) second]);
    (void) [annotationPatterns_ putWithId:[annotation getKey] withId:behavior];
  }
}

- (void)addFeatureWithNSString:(NSString *)featureName {
  if (![((id<JavaUtilMap>) nil_chk(annotations_)) containsKeyWithId:featureName]) @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$C", @"Invalid feature name '", featureName, '\''));
  if (![((id<JavaUtilMap>) nil_chk(annotationPatterns_)) containsKeyWithId:featureName]) @throw new_JavaLangRuntimeException_initWithNSString_(@"Compiled patterns out of sync with annotations data structure;did you call compileAnnotations?");
  [((id<JavaUtilCollection>) nil_chk(features_)) addWithId:featureName];
}

- (void)removeFeatureWithNSString:(NSString *)featureName {
  [((id<JavaUtilCollection>) nil_chk(features_)) removeWithId:featureName];
}

- (EduStanfordNlpTreesTree *)transformTreeWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
                                          withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)root {
  NSString *newCat = JreStrcat("$$", [((EduStanfordNlpTreesTree *) nil_chk(t)) value], [self getAnnotationStringWithEduStanfordNlpTreesTree:t withEduStanfordNlpTreesTree:root]);
  [t setValueWithNSString:newCat];
  if ([t isPreTerminal] && [EduStanfordNlpLingHasTag_class_() isInstance:[t label]]) [((id<EduStanfordNlpLingHasTag>) nil_chk(((id<EduStanfordNlpLingHasTag>) cast_check([t label], EduStanfordNlpLingHasTag_class_())))) setTagWithNSString:newCat];
  return t;
}

- (NSString *)getAnnotationStringWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
                                 withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)root {
  JavaLangStringBuilder *annotationStr = new_JavaLangStringBuilder_init();
  for (NSString * __strong featureName in nil_chk(features_)) {
    EduStanfordNlpUtilPair *behavior = [((id<JavaUtilMap>) nil_chk(annotationPatterns_)) getWithId:featureName];
    EduStanfordNlpTreesTregexTregexMatcher *m = [((EduStanfordNlpTreesTregexTregexPattern *) nil_chk([((EduStanfordNlpUtilPair *) nil_chk(behavior)) first])) matcherWithEduStanfordNlpTreesTree:root];
    if ([((EduStanfordNlpTreesTregexTregexMatcher *) nil_chk(m)) matchesAtWithEduStanfordNlpTreesTree:t]) (void) [annotationStr appendWithNSString:[((id<JavaUtilFunctionFunction>) nil_chk([behavior second])) applyWithId:m]];
  }
  return [annotationStr description];
}

- (void)display {
  for (NSString * __strong feature in nil_chk(features_)) (void) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printfWithNSString:@"%s " withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ feature } count:1 type:NSObject_class_()]];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) println];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LNSString;", 0x404, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 5, 4, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, 8, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(baselineAnnotationFeatures);
  methods[1].selector = @selector(initWithEduStanfordNlpTreesTreebankLanguagePack:);
  methods[2].selector = @selector(compileAnnotationsWithEduStanfordNlpTreesHeadFinder:);
  methods[3].selector = @selector(addFeatureWithNSString:);
  methods[4].selector = @selector(removeFeatureWithNSString:);
  methods[5].selector = @selector(transformTreeWithEduStanfordNlpTreesTree:withEduStanfordNlpTreesTree:);
  methods[6].selector = @selector(getAnnotationStringWithEduStanfordNlpTreesTree:withEduStanfordNlpTreesTree:);
  methods[7].selector = @selector(display);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpParserLexparserTregexPoweredTreebankParserParams_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "annotationPatterns_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 9, -1 },
    { "annotations_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x14, -1, -1, 10, -1 },
    { "features_", "LJavaUtilCollection;", .constantValue.asLong = 0, 0x12, -1, -1, 11, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpTreesTreebankLanguagePack;", "compileAnnotations", "LEduStanfordNlpTreesHeadFinder;", "addFeature", "LNSString;", "removeFeature", "transformTree", "LEduStanfordNlpTreesTree;LEduStanfordNlpTreesTree;", "getAnnotationString", "Ljava/util/Map<Ljava/lang/String;Ledu/stanford/nlp/util/Pair<Ledu/stanford/nlp/trees/tregex/TregexPattern;Ljava/util/function/Function<Ledu/stanford/nlp/trees/tregex/TregexMatcher;Ljava/lang/String;>;>;>;", "Ljava/util/Map<Ljava/lang/String;Ledu/stanford/nlp/util/Pair<Ljava/lang/String;Ljava/util/function/Function<Ledu/stanford/nlp/trees/tregex/TregexMatcher;Ljava/lang/String;>;>;>;", "Ljava/util/Collection<Ljava/lang/String;>;", "LEduStanfordNlpParserLexparserTregexPoweredTreebankParserParams_SimpleStringFunction;LEduStanfordNlpParserLexparserTregexPoweredTreebankParserParams_AnnotateHeadFunction;" };
  static const J2ObjcClassInfo _EduStanfordNlpParserLexparserTregexPoweredTreebankParserParams = { "TregexPoweredTreebankParserParams", "edu.stanford.nlp.parser.lexparser", ptrTable, methods, fields, 7, 0x401, 8, 4, -1, 12, -1, -1, -1 };
  return &_EduStanfordNlpParserLexparserTregexPoweredTreebankParserParams;
}

@end

void EduStanfordNlpParserLexparserTregexPoweredTreebankParserParams_initWithEduStanfordNlpTreesTreebankLanguagePack_(EduStanfordNlpParserLexparserTregexPoweredTreebankParserParams *self, id<EduStanfordNlpTreesTreebankLanguagePack> tlp) {
  EduStanfordNlpParserLexparserAbstractTreebankParserParams_initWithEduStanfordNlpTreesTreebankLanguagePack_(self, tlp);
  self->annotationPatterns_ = EduStanfordNlpUtilGenerics_newHashMap();
  self->annotations_ = EduStanfordNlpUtilGenerics_newHashMap();
  self->features_ = EduStanfordNlpUtilCollectionUtils_asSetWithNSObjectArray_([self baselineAnnotationFeatures]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpParserLexparserTregexPoweredTreebankParserParams)

@implementation EduStanfordNlpParserLexparserTregexPoweredTreebankParserParams_SimpleStringFunction

- (instancetype)initWithNSString:(NSString *)annotationMark {
  EduStanfordNlpParserLexparserTregexPoweredTreebankParserParams_SimpleStringFunction_initWithNSString_(self, annotationMark);
  return self;
}

- (NSString *)applyWithId:(EduStanfordNlpTreesTregexTregexMatcher *)matcher {
  return annotationMark_;
}

- (NSString *)description {
  return JreStrcat("$$C", @"SimpleStringFunction[", annotationMark_, ']');
}

- (id<JavaUtilFunctionFunction>)andThenWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_andThenWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilFunctionFunction>)composeWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_composeWithJavaUtilFunctionFunction_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(applyWithId:);
  methods[2].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpParserLexparserTregexPoweredTreebankParserParams_SimpleStringFunction_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "annotationMark_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "apply", "LEduStanfordNlpTreesTregexTregexMatcher;", "toString", "LEduStanfordNlpParserLexparserTregexPoweredTreebankParserParams;", "Ljava/lang/Object;Ledu/stanford/nlp/process/SerializableFunction<Ledu/stanford/nlp/trees/tregex/TregexMatcher;Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpParserLexparserTregexPoweredTreebankParserParams_SimpleStringFunction = { "SimpleStringFunction", "edu.stanford.nlp.parser.lexparser", ptrTable, methods, fields, 7, 0xc, 3, 2, 4, -1, -1, 5, -1 };
  return &_EduStanfordNlpParserLexparserTregexPoweredTreebankParserParams_SimpleStringFunction;
}

@end

void EduStanfordNlpParserLexparserTregexPoweredTreebankParserParams_SimpleStringFunction_initWithNSString_(EduStanfordNlpParserLexparserTregexPoweredTreebankParserParams_SimpleStringFunction *self, NSString *annotationMark) {
  NSObject_init(self);
  self->annotationMark_ = annotationMark;
}

EduStanfordNlpParserLexparserTregexPoweredTreebankParserParams_SimpleStringFunction *new_EduStanfordNlpParserLexparserTregexPoweredTreebankParserParams_SimpleStringFunction_initWithNSString_(NSString *annotationMark) {
  J2OBJC_NEW_IMPL(EduStanfordNlpParserLexparserTregexPoweredTreebankParserParams_SimpleStringFunction, initWithNSString_, annotationMark)
}

EduStanfordNlpParserLexparserTregexPoweredTreebankParserParams_SimpleStringFunction *create_EduStanfordNlpParserLexparserTregexPoweredTreebankParserParams_SimpleStringFunction_initWithNSString_(NSString *annotationMark) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpParserLexparserTregexPoweredTreebankParserParams_SimpleStringFunction, initWithNSString_, annotationMark)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpParserLexparserTregexPoweredTreebankParserParams_SimpleStringFunction)

@implementation EduStanfordNlpParserLexparserTregexPoweredTreebankParserParams_AnnotateHeadFunction

- (instancetype)initWithEduStanfordNlpTreesHeadFinder:(id<EduStanfordNlpTreesHeadFinder>)hf {
  EduStanfordNlpParserLexparserTregexPoweredTreebankParserParams_AnnotateHeadFunction_initWithEduStanfordNlpTreesHeadFinder_(self, hf);
  return self;
}

- (instancetype)initWithEduStanfordNlpTreesHeadFinder:(id<EduStanfordNlpTreesHeadFinder>)hf
                                          withBoolean:(jboolean)lowerCase {
  EduStanfordNlpParserLexparserTregexPoweredTreebankParserParams_AnnotateHeadFunction_initWithEduStanfordNlpTreesHeadFinder_withBoolean_(self, hf, lowerCase);
  return self;
}

- (NSString *)applyWithId:(EduStanfordNlpTreesTregexTregexMatcher *)matcher {
  EduStanfordNlpTreesTree *matchedTree = [((EduStanfordNlpTreesTregexTregexMatcher *) nil_chk(matcher)) getMatch];
  EduStanfordNlpTreesTree *head = [((id<EduStanfordNlpTreesHeadFinder>) nil_chk(headFinder_)) determineHeadWithEduStanfordNlpTreesTree:matchedTree];
  if (![((EduStanfordNlpTreesTree *) nil_chk(head)) isPrePreTerminal]) return @"";
  EduStanfordNlpTreesTree *lexicalHead = [((EduStanfordNlpTreesTree *) nil_chk([head firstChild])) firstChild];
  NSString *headValue = [((EduStanfordNlpTreesTree *) nil_chk(lexicalHead)) value];
  if (headValue != nil) {
    if (lowerCase_) headValue = [headValue lowercaseString];
    return JreStrcat("C$C", '[', headValue, ']');
  }
  else {
    return @"";
  }
}

- (NSString *)description {
  return JreStrcat("$$C", @"AnnotateHeadFunction[", [[((id<EduStanfordNlpTreesHeadFinder>) nil_chk(headFinder_)) getClass] getName], ']');
}

- (id<JavaUtilFunctionFunction>)andThenWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_andThenWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilFunctionFunction>)composeWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_composeWithJavaUtilFunctionFunction_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpTreesHeadFinder:);
  methods[1].selector = @selector(initWithEduStanfordNlpTreesHeadFinder:withBoolean:);
  methods[2].selector = @selector(applyWithId:);
  methods[3].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpParserLexparserTregexPoweredTreebankParserParams_AnnotateHeadFunction_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "headFinder_", "LEduStanfordNlpTreesHeadFinder;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "lowerCase_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpTreesHeadFinder;", "LEduStanfordNlpTreesHeadFinder;Z", "apply", "LEduStanfordNlpTreesTregexTregexMatcher;", "toString", "LEduStanfordNlpParserLexparserTregexPoweredTreebankParserParams;", "Ljava/lang/Object;Ledu/stanford/nlp/process/SerializableFunction<Ledu/stanford/nlp/trees/tregex/TregexMatcher;Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpParserLexparserTregexPoweredTreebankParserParams_AnnotateHeadFunction = { "AnnotateHeadFunction", "edu.stanford.nlp.parser.lexparser", ptrTable, methods, fields, 7, 0xc, 4, 3, 5, -1, -1, 6, -1 };
  return &_EduStanfordNlpParserLexparserTregexPoweredTreebankParserParams_AnnotateHeadFunction;
}

@end

void EduStanfordNlpParserLexparserTregexPoweredTreebankParserParams_AnnotateHeadFunction_initWithEduStanfordNlpTreesHeadFinder_(EduStanfordNlpParserLexparserTregexPoweredTreebankParserParams_AnnotateHeadFunction *self, id<EduStanfordNlpTreesHeadFinder> hf) {
  EduStanfordNlpParserLexparserTregexPoweredTreebankParserParams_AnnotateHeadFunction_initWithEduStanfordNlpTreesHeadFinder_withBoolean_(self, hf, true);
}

EduStanfordNlpParserLexparserTregexPoweredTreebankParserParams_AnnotateHeadFunction *new_EduStanfordNlpParserLexparserTregexPoweredTreebankParserParams_AnnotateHeadFunction_initWithEduStanfordNlpTreesHeadFinder_(id<EduStanfordNlpTreesHeadFinder> hf) {
  J2OBJC_NEW_IMPL(EduStanfordNlpParserLexparserTregexPoweredTreebankParserParams_AnnotateHeadFunction, initWithEduStanfordNlpTreesHeadFinder_, hf)
}

EduStanfordNlpParserLexparserTregexPoweredTreebankParserParams_AnnotateHeadFunction *create_EduStanfordNlpParserLexparserTregexPoweredTreebankParserParams_AnnotateHeadFunction_initWithEduStanfordNlpTreesHeadFinder_(id<EduStanfordNlpTreesHeadFinder> hf) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpParserLexparserTregexPoweredTreebankParserParams_AnnotateHeadFunction, initWithEduStanfordNlpTreesHeadFinder_, hf)
}

void EduStanfordNlpParserLexparserTregexPoweredTreebankParserParams_AnnotateHeadFunction_initWithEduStanfordNlpTreesHeadFinder_withBoolean_(EduStanfordNlpParserLexparserTregexPoweredTreebankParserParams_AnnotateHeadFunction *self, id<EduStanfordNlpTreesHeadFinder> hf, jboolean lowerCase) {
  NSObject_init(self);
  self->headFinder_ = hf;
  self->lowerCase_ = lowerCase;
}

EduStanfordNlpParserLexparserTregexPoweredTreebankParserParams_AnnotateHeadFunction *new_EduStanfordNlpParserLexparserTregexPoweredTreebankParserParams_AnnotateHeadFunction_initWithEduStanfordNlpTreesHeadFinder_withBoolean_(id<EduStanfordNlpTreesHeadFinder> hf, jboolean lowerCase) {
  J2OBJC_NEW_IMPL(EduStanfordNlpParserLexparserTregexPoweredTreebankParserParams_AnnotateHeadFunction, initWithEduStanfordNlpTreesHeadFinder_withBoolean_, hf, lowerCase)
}

EduStanfordNlpParserLexparserTregexPoweredTreebankParserParams_AnnotateHeadFunction *create_EduStanfordNlpParserLexparserTregexPoweredTreebankParserParams_AnnotateHeadFunction_initWithEduStanfordNlpTreesHeadFinder_withBoolean_(id<EduStanfordNlpTreesHeadFinder> hf, jboolean lowerCase) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpParserLexparserTregexPoweredTreebankParserParams_AnnotateHeadFunction, initWithEduStanfordNlpTreesHeadFinder_withBoolean_, hf, lowerCase)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpParserLexparserTregexPoweredTreebankParserParams_AnnotateHeadFunction)
