//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/parser/lexparser/SisterAnnotationStats.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/ling/Label.h"
#include "edu/stanford/nlp/ling/StringLabelFactory.h"
#include "edu/stanford/nlp/parser/lexparser/SisterAnnotationStats.h"
#include "edu/stanford/nlp/stats/ClassicCounter.h"
#include "edu/stanford/nlp/stats/Counters.h"
#include "edu/stanford/nlp/trees/BobChrisTreeNormalizer.h"
#include "edu/stanford/nlp/trees/DiskTreebank.h"
#include "edu/stanford/nlp/trees/LabeledScoredTreeFactory.h"
#include "edu/stanford/nlp/trees/PennTreeReader.h"
#include "edu/stanford/nlp/trees/Tree.h"
#include "edu/stanford/nlp/trees/TreeReader.h"
#include "edu/stanford/nlp/trees/TreeReaderFactory.h"
#include "edu/stanford/nlp/trees/Treebank.h"
#include "edu/stanford/nlp/util/Pair.h"
#include "java/io/PrintStream.h"
#include "java/io/Reader.h"
#include "java/lang/Double.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/System.h"
#include "java/text/NumberFormat.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/Comparator.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/function/Function.h"
#include "java/util/function/ToDoubleFunction.h"
#include "java/util/function/ToIntFunction.h"
#include "java/util/function/ToLongFunction.h"

@interface EduStanfordNlpParserLexparserSisterAnnotationStats () {
 @public
  id<JavaUtilMap> nodeRules_;
  id<JavaUtilMap> leftRules_;
  id<JavaUtilMap> rightRules_;
}

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserSisterAnnotationStats, nodeRules_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserSisterAnnotationStats, leftRules_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserSisterAnnotationStats, rightRules_, id<JavaUtilMap>)

@interface EduStanfordNlpParserLexparserSisterAnnotationStats_$Lambda$1 : NSObject < JavaUtilComparator >

- (jint)compareWithId:(id)o1
               withId:(id)o2;

@end

J2OBJC_STATIC_INIT(EduStanfordNlpParserLexparserSisterAnnotationStats_$Lambda$1)

inline EduStanfordNlpParserLexparserSisterAnnotationStats_$Lambda$1 *EduStanfordNlpParserLexparserSisterAnnotationStats_$Lambda$1_get_instance();
static EduStanfordNlpParserLexparserSisterAnnotationStats_$Lambda$1 *EduStanfordNlpParserLexparserSisterAnnotationStats_$Lambda$1_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpParserLexparserSisterAnnotationStats_$Lambda$1, instance, EduStanfordNlpParserLexparserSisterAnnotationStats_$Lambda$1 *)

__attribute__((unused)) static void EduStanfordNlpParserLexparserSisterAnnotationStats_$Lambda$1_init(EduStanfordNlpParserLexparserSisterAnnotationStats_$Lambda$1 *self);

__attribute__((unused)) static EduStanfordNlpParserLexparserSisterAnnotationStats_$Lambda$1 *new_EduStanfordNlpParserLexparserSisterAnnotationStats_$Lambda$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpParserLexparserSisterAnnotationStats_$Lambda$1 *create_EduStanfordNlpParserLexparserSisterAnnotationStats_$Lambda$1_init();

@interface EduStanfordNlpParserLexparserSisterAnnotationStats_$Lambda$2 : NSObject < JavaUtilComparator >

- (jint)compareWithId:(id)o1
               withId:(id)o2;

@end

J2OBJC_STATIC_INIT(EduStanfordNlpParserLexparserSisterAnnotationStats_$Lambda$2)

inline EduStanfordNlpParserLexparserSisterAnnotationStats_$Lambda$2 *EduStanfordNlpParserLexparserSisterAnnotationStats_$Lambda$2_get_instance();
static EduStanfordNlpParserLexparserSisterAnnotationStats_$Lambda$2 *EduStanfordNlpParserLexparserSisterAnnotationStats_$Lambda$2_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpParserLexparserSisterAnnotationStats_$Lambda$2, instance, EduStanfordNlpParserLexparserSisterAnnotationStats_$Lambda$2 *)

__attribute__((unused)) static void EduStanfordNlpParserLexparserSisterAnnotationStats_$Lambda$2_init(EduStanfordNlpParserLexparserSisterAnnotationStats_$Lambda$2 *self);

__attribute__((unused)) static EduStanfordNlpParserLexparserSisterAnnotationStats_$Lambda$2 *new_EduStanfordNlpParserLexparserSisterAnnotationStats_$Lambda$2_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpParserLexparserSisterAnnotationStats_$Lambda$2 *create_EduStanfordNlpParserLexparserSisterAnnotationStats_$Lambda$2_init();

@interface EduStanfordNlpParserLexparserSisterAnnotationStats_$Lambda$3 : NSObject < EduStanfordNlpTreesTreeReaderFactory >

- (id<EduStanfordNlpTreesTreeReader>)newTreeReaderWithJavaIoReader:(JavaIoReader *)inArg OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_STATIC_INIT(EduStanfordNlpParserLexparserSisterAnnotationStats_$Lambda$3)

inline EduStanfordNlpParserLexparserSisterAnnotationStats_$Lambda$3 *EduStanfordNlpParserLexparserSisterAnnotationStats_$Lambda$3_get_instance();
static EduStanfordNlpParserLexparserSisterAnnotationStats_$Lambda$3 *EduStanfordNlpParserLexparserSisterAnnotationStats_$Lambda$3_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpParserLexparserSisterAnnotationStats_$Lambda$3, instance, EduStanfordNlpParserLexparserSisterAnnotationStats_$Lambda$3 *)

__attribute__((unused)) static void EduStanfordNlpParserLexparserSisterAnnotationStats_$Lambda$3_init(EduStanfordNlpParserLexparserSisterAnnotationStats_$Lambda$3 *self);

__attribute__((unused)) static EduStanfordNlpParserLexparserSisterAnnotationStats_$Lambda$3 *new_EduStanfordNlpParserLexparserSisterAnnotationStats_$Lambda$3_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpParserLexparserSisterAnnotationStats_$Lambda$3 *create_EduStanfordNlpParserLexparserSisterAnnotationStats_$Lambda$3_init();

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpParserLexparserSisterAnnotationStats)

IOSDoubleArray *EduStanfordNlpParserLexparserSisterAnnotationStats_CUTOFFS;

@implementation EduStanfordNlpParserLexparserSisterAnnotationStats

- (void)visitTreeWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t {
  [self recurseWithEduStanfordNlpTreesTree:t withEduStanfordNlpTreesTree:nil];
}

- (void)recurseWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
               withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)p {
  if ([((EduStanfordNlpTreesTree *) nil_chk(t)) isLeaf] || ([t isPreTerminal] && false)) {
    return;
  }
  if (!(p == nil || [((NSString *) nil_chk([((id<EduStanfordNlpLingLabel>) nil_chk([t label])) value])) isEqual:@"ROOT"])) {
    [self sisterCountersWithEduStanfordNlpTreesTree:t withEduStanfordNlpTreesTree:p];
  }
  IOSObjectArray *kids = [t children];
  {
    IOSObjectArray *a__ = kids;
    EduStanfordNlpTreesTree * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      EduStanfordNlpTreesTree *kid = *b__++;
      [self recurseWithEduStanfordNlpTreesTree:kid withEduStanfordNlpTreesTree:t];
    }
  }
}

+ (id<JavaUtilList>)leftSisterLabelsWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
                                    withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)p {
  return EduStanfordNlpParserLexparserSisterAnnotationStats_leftSisterLabelsWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_(t, p);
}

+ (id<JavaUtilList>)rightSisterLabelsWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
                                     withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)p {
  return EduStanfordNlpParserLexparserSisterAnnotationStats_rightSisterLabelsWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_(t, p);
}

+ (id<JavaUtilList>)kidLabelsWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t {
  return EduStanfordNlpParserLexparserSisterAnnotationStats_kidLabelsWithEduStanfordNlpTreesTree_(t);
}

- (void)sisterCountersWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
                      withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)p {
  id<JavaUtilList> rewrite = EduStanfordNlpParserLexparserSisterAnnotationStats_kidLabelsWithEduStanfordNlpTreesTree_(t);
  id<JavaUtilList> left = EduStanfordNlpParserLexparserSisterAnnotationStats_leftSisterLabelsWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_(t, p);
  id<JavaUtilList> right = EduStanfordNlpParserLexparserSisterAnnotationStats_rightSisterLabelsWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_(t, p);
  NSString *label = [((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(t)) label])) value];
  if (![((id<JavaUtilMap>) nil_chk(nodeRules_)) containsKeyWithId:label]) {
    (void) [((id<JavaUtilMap>) nil_chk(nodeRules_)) putWithId:label withId:new_EduStanfordNlpStatsClassicCounter_init()];
  }
  if (![((id<JavaUtilMap>) nil_chk(rightRules_)) containsKeyWithId:label]) {
    (void) [((id<JavaUtilMap>) nil_chk(rightRules_)) putWithId:label withId:new_JavaUtilHashMap_init()];
  }
  if (![((id<JavaUtilMap>) nil_chk(leftRules_)) containsKeyWithId:label]) {
    (void) [((id<JavaUtilMap>) nil_chk(leftRules_)) putWithId:label withId:new_JavaUtilHashMap_init()];
  }
  [((EduStanfordNlpStatsClassicCounter *) nil_chk(((EduStanfordNlpStatsClassicCounter *) cast_chk([((id<JavaUtilMap>) nil_chk(nodeRules_)) getWithId:label], [EduStanfordNlpStatsClassicCounter class])))) incrementCountWithId:rewrite];
  [self sideCountersWithNSString:label withJavaUtilList:rewrite withJavaUtilList:left withJavaUtilMap:leftRules_];
  [self sideCountersWithNSString:label withJavaUtilList:rewrite withJavaUtilList:right withJavaUtilMap:rightRules_];
}

- (void)sideCountersWithNSString:(NSString *)label
                withJavaUtilList:(id<JavaUtilList>)rewrite
                withJavaUtilList:(id<JavaUtilList>)sideSisters
                 withJavaUtilMap:(id<JavaUtilMap>)sideRules {
  for (id __strong sideSister in nil_chk(sideSisters)) {
    NSString *sis = (NSString *) cast_chk(sideSister, [NSString class]);
    if (![((id<JavaUtilMap>) nil_chk(((id<JavaUtilMap>) cast_check([((id<JavaUtilMap>) nil_chk(sideRules)) getWithId:label], JavaUtilMap_class_())))) containsKeyWithId:sis]) {
      (void) [((id<JavaUtilMap>) nil_chk(((id<JavaUtilMap>) cast_check([sideRules getWithId:label], JavaUtilMap_class_())))) putWithId:sis withId:new_EduStanfordNlpStatsClassicCounter_init()];
    }
    [((EduStanfordNlpStatsClassicCounter *) nil_chk(((EduStanfordNlpStatsClassicCounter *) cast_chk([((JavaUtilHashMap *) nil_chk(((JavaUtilHashMap *) cast_chk([sideRules getWithId:label], [JavaUtilHashMap class])))) getWithId:sis], [EduStanfordNlpStatsClassicCounter class])))) incrementCountWithId:rewrite];
  }
}

- (void)printStats {
  JavaTextNumberFormat *nf = JavaTextNumberFormat_getNumberInstance();
  [((JavaTextNumberFormat *) nil_chk(nf)) setMaximumFractionDigitsWithInt:2];
  IOSObjectArray *javaSB = [IOSObjectArray newArrayWithLength:((IOSDoubleArray *) nil_chk(EduStanfordNlpParserLexparserSisterAnnotationStats_CUTOFFS))->size_ type:JavaLangStringBuffer_class_()];
  for (jint i = 0; i < EduStanfordNlpParserLexparserSisterAnnotationStats_CUTOFFS->size_; i++) {
    (void) IOSObjectArray_SetAndConsume(javaSB, i, new_JavaLangStringBuffer_initWithNSString_(JreStrcat("$I$", @"  private static String[] sisterSplit", (i + 1), @" = new String[] {")));
  }
  JavaUtilArrayList *topScores = new_JavaUtilArrayList_init();
  for (id __strong o in nil_chk([((id<JavaUtilMap>) nil_chk(nodeRules_)) keySet])) {
    JavaUtilArrayList *answers = new_JavaUtilArrayList_init();
    NSString *label = (NSString *) cast_chk(o, [NSString class]);
    EduStanfordNlpStatsClassicCounter *cntr = (EduStanfordNlpStatsClassicCounter *) cast_chk([((id<JavaUtilMap>) nil_chk(nodeRules_)) getWithId:label], [EduStanfordNlpStatsClassicCounter class]);
    jdouble support = ([((EduStanfordNlpStatsClassicCounter *) nil_chk(cntr)) totalCount]);
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$$D", @"Node ", label, @" support is ", support)];
    for (id __strong o4 in nil_chk([((JavaUtilHashMap *) nil_chk(((JavaUtilHashMap *) cast_chk([((id<JavaUtilMap>) nil_chk(leftRules_)) getWithId:label], [JavaUtilHashMap class])))) keySet])) {
      NSString *sis = (NSString *) cast_chk(o4, [NSString class]);
      EduStanfordNlpStatsClassicCounter *cntr2 = (EduStanfordNlpStatsClassicCounter *) cast_chk([((JavaUtilHashMap *) nil_chk(((JavaUtilHashMap *) cast_chk([((id<JavaUtilMap>) nil_chk(leftRules_)) getWithId:label], [JavaUtilHashMap class])))) getWithId:sis], [EduStanfordNlpStatsClassicCounter class]);
      jdouble support2 = ([((EduStanfordNlpStatsClassicCounter *) nil_chk(cntr2)) totalCount]);
      jdouble kl = EduStanfordNlpStatsCounters_klDivergenceWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_(cntr2, cntr);
      NSString *annotatedLabel = JreStrcat("$$$", label, @"=l=", sis);
      [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$$$$$$$$$D", @"KL(", annotatedLabel, @"||", label, @") = ", [nf formatWithDouble:kl], @"\tsupport(", sis, @") = ", support2)];
      [answers addWithId:new_EduStanfordNlpUtilPair_initWithId_withId_(annotatedLabel, new_JavaLangDouble_initWithDouble_(kl * support2))];
      [topScores addWithId:new_EduStanfordNlpUtilPair_initWithId_withId_(annotatedLabel, new_JavaLangDouble_initWithDouble_(kl * support2))];
    }
    for (id __strong o3 in nil_chk([((JavaUtilHashMap *) nil_chk(((JavaUtilHashMap *) cast_chk([((id<JavaUtilMap>) nil_chk(rightRules_)) getWithId:label], [JavaUtilHashMap class])))) keySet])) {
      NSString *sis = (NSString *) cast_chk(o3, [NSString class]);
      EduStanfordNlpStatsClassicCounter *cntr2 = (EduStanfordNlpStatsClassicCounter *) cast_chk([((JavaUtilHashMap *) nil_chk(((JavaUtilHashMap *) cast_chk([((id<JavaUtilMap>) nil_chk(rightRules_)) getWithId:label], [JavaUtilHashMap class])))) getWithId:sis], [EduStanfordNlpStatsClassicCounter class]);
      jdouble support2 = ([((EduStanfordNlpStatsClassicCounter *) nil_chk(cntr2)) totalCount]);
      jdouble kl = EduStanfordNlpStatsCounters_klDivergenceWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_(cntr2, cntr);
      NSString *annotatedLabel = JreStrcat("$$$", label, @"=r=", sis);
      [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$$$$$$$$$D", @"KL(", annotatedLabel, @"||", label, @") = ", [nf formatWithDouble:kl], @"\tsupport(", sis, @") = ", support2)];
      [answers addWithId:new_EduStanfordNlpUtilPair_initWithId_withId_(annotatedLabel, new_JavaLangDouble_initWithDouble_(kl * support2))];
      [topScores addWithId:new_EduStanfordNlpUtilPair_initWithId_withId_(annotatedLabel, new_JavaLangDouble_initWithDouble_(kl * support2))];
    }
    [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"----"];
    [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"Sorted descending support * KL"];
    JavaUtilCollections_sortWithJavaUtilList_withJavaUtilComparator_(answers, JreLoadStatic(EduStanfordNlpParserLexparserSisterAnnotationStats_$Lambda$1, instance));
    for (id __strong answer in answers) {
      EduStanfordNlpUtilPair *p = (EduStanfordNlpUtilPair *) cast_chk(answer, [EduStanfordNlpUtilPair class]);
      jdouble psd = [((JavaLangDouble *) nil_chk(((JavaLangDouble *) cast_chk([((EduStanfordNlpUtilPair *) nil_chk(p)) second], [JavaLangDouble class])))) doubleValue];
      [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("@$$", [p first], @": ", [nf formatWithDouble:psd])];
      if (psd >= IOSDoubleArray_Get(EduStanfordNlpParserLexparserSisterAnnotationStats_CUTOFFS, 0)) {
        NSString *annotatedLabel = (NSString *) cast_chk([p first], [NSString class]);
        {
          IOSDoubleArray *a__ = EduStanfordNlpParserLexparserSisterAnnotationStats_CUTOFFS;
          jdouble const *b__ = a__->buffer_;
          jdouble const *e__ = b__ + a__->size_;
          while (b__ < e__) {
            jdouble CUTOFF = *b__++;
            if (psd >= CUTOFF) {
            }
          }
        }
      }
    }
    [JreLoadStatic(JavaLangSystem, out) println];
  }
  JavaUtilCollections_sortWithJavaUtilList_withJavaUtilComparator_(topScores, JreLoadStatic(EduStanfordNlpParserLexparserSisterAnnotationStats_$Lambda$2, instance));
  NSString *outString = @"All enriched categories, sorted by score\n";
  for (id __strong topScore in topScores) {
    EduStanfordNlpUtilPair *p = (EduStanfordNlpUtilPair *) cast_chk(topScore, [EduStanfordNlpUtilPair class]);
    jdouble psd = [((JavaLangDouble *) nil_chk(((JavaLangDouble *) cast_chk([((EduStanfordNlpUtilPair *) nil_chk(p)) second], [JavaLangDouble class])))) doubleValue];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("@$$", [p first], @": ", [nf formatWithDouble:psd])];
  }
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) println];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"  // Automatically generated by SisterAnnotationStats -- preferably don't edit"];
  jint k = EduStanfordNlpParserLexparserSisterAnnotationStats_CUTOFFS->size_ - 1;
  for (jint j = 0; j < [topScores size]; j++) {
    EduStanfordNlpUtilPair *p = (EduStanfordNlpUtilPair *) cast_chk([topScores getWithInt:j], [EduStanfordNlpUtilPair class]);
    jdouble psd = [((JavaLangDouble *) nil_chk(((JavaLangDouble *) cast_chk([((EduStanfordNlpUtilPair *) nil_chk(p)) second], [JavaLangDouble class])))) doubleValue];
    if (psd < IOSDoubleArray_Get(EduStanfordNlpParserLexparserSisterAnnotationStats_CUTOFFS, k)) {
      if (k == 0) {
        break;
      }
      else {
        k--;
        j -= 1;
        continue;
      }
    }
    (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk(IOSObjectArray_Get(javaSB, k))) appendWithNSString:@"\""])) appendWithId:[p first]];
    (void) [((JavaLangStringBuffer *) nil_chk(IOSObjectArray_Get(javaSB, k))) appendWithNSString:@"\","];
  }
  for (jint i = 0; i < EduStanfordNlpParserLexparserSisterAnnotationStats_CUTOFFS->size_; i++) {
    jint len = [((JavaLangStringBuffer *) nil_chk(IOSObjectArray_Get(javaSB, i))) length];
    (void) [((JavaLangStringBuffer *) nil_chk(IOSObjectArray_Get(javaSB, i))) replaceWithInt:len - 2 withInt:len withNSString:@"};"];
    [JreLoadStatic(JavaLangSystem, out) printlnWithId:IOSObjectArray_Get(javaSB, i)];
  }
  [JreLoadStatic(JavaLangSystem, out) printWithNSString:@"  public static String[] sisterSplit = "];
  for (jint i = EduStanfordNlpParserLexparserSisterAnnotationStats_CUTOFFS->size_; i > 0; i--) {
    if (i == 1) {
      [JreLoadStatic(JavaLangSystem, out) printWithNSString:@"sisterSplit1"];
    }
    else {
      [JreLoadStatic(JavaLangSystem, out) printWithNSString:JreStrcat("$I$I$", @"selectiveSisterSplit", i, @" ? sisterSplit", i, @" : (")];
    }
  }
  for (jint i = EduStanfordNlpParserLexparserSisterAnnotationStats_CUTOFFS->size_; i >= 0; i--) {
    [JreLoadStatic(JavaLangSystem, out) printWithNSString:@")"];
  }
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@";"];
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  EduStanfordNlpParserLexparserSisterAnnotationStats_mainWithNSStringArray_(args);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpParserLexparserSisterAnnotationStats_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 4, 3, -1, 5, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 6, 3, -1, 5, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 7, 1, -1, 8, -1, -1 },
    { NULL, "V", 0x4, 9, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 12, 13, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(visitTreeWithEduStanfordNlpTreesTree:);
  methods[1].selector = @selector(recurseWithEduStanfordNlpTreesTree:withEduStanfordNlpTreesTree:);
  methods[2].selector = @selector(leftSisterLabelsWithEduStanfordNlpTreesTree:withEduStanfordNlpTreesTree:);
  methods[3].selector = @selector(rightSisterLabelsWithEduStanfordNlpTreesTree:withEduStanfordNlpTreesTree:);
  methods[4].selector = @selector(kidLabelsWithEduStanfordNlpTreesTree:);
  methods[5].selector = @selector(sisterCountersWithEduStanfordNlpTreesTree:withEduStanfordNlpTreesTree:);
  methods[6].selector = @selector(sideCountersWithNSString:withJavaUtilList:withJavaUtilList:withJavaUtilMap:);
  methods[7].selector = @selector(printStats);
  methods[8].selector = @selector(mainWithNSStringArray:);
  methods[9].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DO_TAGS", "Z", .constantValue.asBOOL = EduStanfordNlpParserLexparserSisterAnnotationStats_DO_TAGS, 0x19, -1, -1, -1, -1 },
    { "nodeRules_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "leftRules_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "rightRules_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "CUTOFFS", "[D", .constantValue.asLong = 0, 0x19, -1, 14, -1, -1 },
    { "SUPPCUTOFF", "D", .constantValue.asDouble = EduStanfordNlpParserLexparserSisterAnnotationStats_SUPPCUTOFF, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "visitTree", "LEduStanfordNlpTreesTree;", "recurse", "LEduStanfordNlpTreesTree;LEduStanfordNlpTreesTree;", "leftSisterLabels", "(Ledu/stanford/nlp/trees/Tree;Ledu/stanford/nlp/trees/Tree;)Ljava/util/List<Ljava/lang/String;>;", "rightSisterLabels", "kidLabels", "(Ledu/stanford/nlp/trees/Tree;)Ljava/util/List<Ljava/lang/String;>;", "sisterCounters", "sideCounters", "LNSString;LJavaUtilList;LJavaUtilList;LJavaUtilMap;", "main", "[LNSString;", &EduStanfordNlpParserLexparserSisterAnnotationStats_CUTOFFS };
  static const J2ObjcClassInfo _EduStanfordNlpParserLexparserSisterAnnotationStats = { "SisterAnnotationStats", "edu.stanford.nlp.parser.lexparser", ptrTable, methods, fields, 7, 0x1, 10, 6, -1, -1, -1, -1, -1 };
  return &_EduStanfordNlpParserLexparserSisterAnnotationStats;
}

+ (void)initialize {
  if (self == [EduStanfordNlpParserLexparserSisterAnnotationStats class]) {
    EduStanfordNlpParserLexparserSisterAnnotationStats_CUTOFFS = [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ 250.0, 500.0, 1000.0, 1500.0 } count:4];
    J2OBJC_SET_INITIALIZED(EduStanfordNlpParserLexparserSisterAnnotationStats)
  }
}

@end

id<JavaUtilList> EduStanfordNlpParserLexparserSisterAnnotationStats_leftSisterLabelsWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_(EduStanfordNlpTreesTree *t, EduStanfordNlpTreesTree *p) {
  EduStanfordNlpParserLexparserSisterAnnotationStats_initialize();
  id<JavaUtilList> l = new_JavaUtilArrayList_init();
  if (p == nil) {
    return l;
  }
  IOSObjectArray *kids = [p children];
  {
    IOSObjectArray *a__ = kids;
    EduStanfordNlpTreesTree * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      EduStanfordNlpTreesTree *kid = *b__++;
      if ([((EduStanfordNlpTreesTree *) nil_chk(kid)) isEqual:t]) {
        break;
      }
      else {
        [l addWithInt:0 withId:[((id<EduStanfordNlpLingLabel>) nil_chk([kid label])) value]];
      }
    }
  }
  return l;
}

id<JavaUtilList> EduStanfordNlpParserLexparserSisterAnnotationStats_rightSisterLabelsWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_(EduStanfordNlpTreesTree *t, EduStanfordNlpTreesTree *p) {
  EduStanfordNlpParserLexparserSisterAnnotationStats_initialize();
  id<JavaUtilList> l = new_JavaUtilArrayList_init();
  if (p == nil) {
    return l;
  }
  IOSObjectArray *kids = [p children];
  for (jint i = ((IOSObjectArray *) nil_chk(kids))->size_ - 1; i >= 0; i--) {
    if ([((EduStanfordNlpTreesTree *) nil_chk(IOSObjectArray_Get(kids, i))) isEqual:t]) {
      break;
    }
    else {
      [l addWithId:[((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(IOSObjectArray_Get(kids, i))) label])) value]];
    }
  }
  return l;
}

id<JavaUtilList> EduStanfordNlpParserLexparserSisterAnnotationStats_kidLabelsWithEduStanfordNlpTreesTree_(EduStanfordNlpTreesTree *t) {
  EduStanfordNlpParserLexparserSisterAnnotationStats_initialize();
  IOSObjectArray *kids = [((EduStanfordNlpTreesTree *) nil_chk(t)) children];
  id<JavaUtilList> l = new_JavaUtilArrayList_initWithInt_(((IOSObjectArray *) nil_chk(kids))->size_);
  {
    IOSObjectArray *a__ = kids;
    EduStanfordNlpTreesTree * const *b__ = a__->buffer_;
    EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      EduStanfordNlpTreesTree *kid = *b__++;
      [l addWithId:[((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(kid)) label])) value]];
    }
  }
  return l;
}

void EduStanfordNlpParserLexparserSisterAnnotationStats_mainWithNSStringArray_(IOSObjectArray *args) {
  EduStanfordNlpParserLexparserSisterAnnotationStats_initialize();
  EduStanfordNlpStatsClassicCounter *c = new_EduStanfordNlpStatsClassicCounter_init();
  [c setCountWithId:@"A" withDouble:0];
  [c setCountWithId:@"B" withDouble:1];
  jdouble d = EduStanfordNlpStatsCounters_klDivergenceWithEduStanfordNlpStatsCounter_withEduStanfordNlpStatsCounter_(c, c);
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$D", @"KL Divergence: ", d)];
  NSString *encoding = @"UTF-8";
  if (((IOSObjectArray *) nil_chk(args))->size_ > 1) {
    encoding = IOSObjectArray_Get(args, 1);
  }
  if (args->size_ < 1) {
    [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"Usage: ParentAnnotationStats treebankPath"];
  }
  else {
    EduStanfordNlpParserLexparserSisterAnnotationStats *pas = new_EduStanfordNlpParserLexparserSisterAnnotationStats_init();
    EduStanfordNlpTreesTreebank *treebank = new_EduStanfordNlpTreesDiskTreebank_initWithEduStanfordNlpTreesTreeReaderFactory_withNSString_(JreLoadStatic(EduStanfordNlpParserLexparserSisterAnnotationStats_$Lambda$3, instance), encoding);
    [treebank loadPathWithNSString:IOSObjectArray_Get(args, 0)];
    [treebank applyWithEduStanfordNlpTreesTreeVisitor:pas];
    [pas printStats];
  }
}

void EduStanfordNlpParserLexparserSisterAnnotationStats_init(EduStanfordNlpParserLexparserSisterAnnotationStats *self) {
  NSObject_init(self);
  self->nodeRules_ = new_JavaUtilHashMap_init();
  self->leftRules_ = new_JavaUtilHashMap_init();
  self->rightRules_ = new_JavaUtilHashMap_init();
}

EduStanfordNlpParserLexparserSisterAnnotationStats *new_EduStanfordNlpParserLexparserSisterAnnotationStats_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpParserLexparserSisterAnnotationStats, init)
}

EduStanfordNlpParserLexparserSisterAnnotationStats *create_EduStanfordNlpParserLexparserSisterAnnotationStats_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpParserLexparserSisterAnnotationStats, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpParserLexparserSisterAnnotationStats)

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpParserLexparserSisterAnnotationStats_$Lambda$1)

@implementation EduStanfordNlpParserLexparserSisterAnnotationStats_$Lambda$1

- (jint)compareWithId:(id)o1
               withId:(id)o2 {
  EduStanfordNlpUtilPair *p1 = (EduStanfordNlpUtilPair *) cast_chk(o1, [EduStanfordNlpUtilPair class]);
  EduStanfordNlpUtilPair *p2 = (EduStanfordNlpUtilPair *) cast_chk(o2, [EduStanfordNlpUtilPair class]);
  JavaLangDouble *p12 = (JavaLangDouble *) cast_chk([((EduStanfordNlpUtilPair *) nil_chk(p1)) second], [JavaLangDouble class]);
  JavaLangDouble *p22 = (JavaLangDouble *) cast_chk([((EduStanfordNlpUtilPair *) nil_chk(p2)) second], [JavaLangDouble class]);
  return [((JavaLangDouble *) nil_chk(p22)) compareToWithId:p12];
}

- (id<JavaUtilComparator>)reversed {
  return JavaUtilComparator_reversed(self);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilComparator:(id<JavaUtilComparator>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilComparator_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0
                                             withJavaUtilComparator:(id<JavaUtilComparator>)arg1 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_withJavaUtilComparator_(self, arg0, arg1);
}

- (id<JavaUtilComparator>)thenComparingDoubleWithJavaUtilFunctionToDoubleFunction:(id<JavaUtilFunctionToDoubleFunction>)arg0 {
  return JavaUtilComparator_thenComparingDoubleWithJavaUtilFunctionToDoubleFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingIntWithJavaUtilFunctionToIntFunction:(id<JavaUtilFunctionToIntFunction>)arg0 {
  return JavaUtilComparator_thenComparingIntWithJavaUtilFunctionToIntFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingLongWithJavaUtilFunctionToLongFunction:(id<JavaUtilFunctionToLongFunction>)arg0 {
  return JavaUtilComparator_thenComparingLongWithJavaUtilFunctionToLongFunction_(self, arg0);
}

+ (void)initialize {
  if (self == [EduStanfordNlpParserLexparserSisterAnnotationStats_$Lambda$1 class]) {
    EduStanfordNlpParserLexparserSisterAnnotationStats_$Lambda$1_instance = new_EduStanfordNlpParserLexparserSisterAnnotationStats_$Lambda$1_init();
    J2OBJC_SET_INITIALIZED(EduStanfordNlpParserLexparserSisterAnnotationStats_$Lambda$1)
  }
}

@end

void EduStanfordNlpParserLexparserSisterAnnotationStats_$Lambda$1_init(EduStanfordNlpParserLexparserSisterAnnotationStats_$Lambda$1 *self) {
  NSObject_init(self);
}

EduStanfordNlpParserLexparserSisterAnnotationStats_$Lambda$1 *new_EduStanfordNlpParserLexparserSisterAnnotationStats_$Lambda$1_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpParserLexparserSisterAnnotationStats_$Lambda$1, init)
}

EduStanfordNlpParserLexparserSisterAnnotationStats_$Lambda$1 *create_EduStanfordNlpParserLexparserSisterAnnotationStats_$Lambda$1_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpParserLexparserSisterAnnotationStats_$Lambda$1, init)
}

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpParserLexparserSisterAnnotationStats_$Lambda$2)

@implementation EduStanfordNlpParserLexparserSisterAnnotationStats_$Lambda$2

- (jint)compareWithId:(id)o1
               withId:(id)o2 {
  EduStanfordNlpUtilPair *p1 = (EduStanfordNlpUtilPair *) cast_chk(o1, [EduStanfordNlpUtilPair class]);
  EduStanfordNlpUtilPair *p2 = (EduStanfordNlpUtilPair *) cast_chk(o2, [EduStanfordNlpUtilPair class]);
  JavaLangDouble *p12 = (JavaLangDouble *) cast_chk([((EduStanfordNlpUtilPair *) nil_chk(p1)) second], [JavaLangDouble class]);
  JavaLangDouble *p22 = (JavaLangDouble *) cast_chk([((EduStanfordNlpUtilPair *) nil_chk(p2)) second], [JavaLangDouble class]);
  return [((JavaLangDouble *) nil_chk(p22)) compareToWithId:p12];
}

- (id<JavaUtilComparator>)reversed {
  return JavaUtilComparator_reversed(self);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilComparator:(id<JavaUtilComparator>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilComparator_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0
                                             withJavaUtilComparator:(id<JavaUtilComparator>)arg1 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_withJavaUtilComparator_(self, arg0, arg1);
}

- (id<JavaUtilComparator>)thenComparingDoubleWithJavaUtilFunctionToDoubleFunction:(id<JavaUtilFunctionToDoubleFunction>)arg0 {
  return JavaUtilComparator_thenComparingDoubleWithJavaUtilFunctionToDoubleFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingIntWithJavaUtilFunctionToIntFunction:(id<JavaUtilFunctionToIntFunction>)arg0 {
  return JavaUtilComparator_thenComparingIntWithJavaUtilFunctionToIntFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingLongWithJavaUtilFunctionToLongFunction:(id<JavaUtilFunctionToLongFunction>)arg0 {
  return JavaUtilComparator_thenComparingLongWithJavaUtilFunctionToLongFunction_(self, arg0);
}

+ (void)initialize {
  if (self == [EduStanfordNlpParserLexparserSisterAnnotationStats_$Lambda$2 class]) {
    EduStanfordNlpParserLexparserSisterAnnotationStats_$Lambda$2_instance = new_EduStanfordNlpParserLexparserSisterAnnotationStats_$Lambda$2_init();
    J2OBJC_SET_INITIALIZED(EduStanfordNlpParserLexparserSisterAnnotationStats_$Lambda$2)
  }
}

@end

void EduStanfordNlpParserLexparserSisterAnnotationStats_$Lambda$2_init(EduStanfordNlpParserLexparserSisterAnnotationStats_$Lambda$2 *self) {
  NSObject_init(self);
}

EduStanfordNlpParserLexparserSisterAnnotationStats_$Lambda$2 *new_EduStanfordNlpParserLexparserSisterAnnotationStats_$Lambda$2_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpParserLexparserSisterAnnotationStats_$Lambda$2, init)
}

EduStanfordNlpParserLexparserSisterAnnotationStats_$Lambda$2 *create_EduStanfordNlpParserLexparserSisterAnnotationStats_$Lambda$2_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpParserLexparserSisterAnnotationStats_$Lambda$2, init)
}

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpParserLexparserSisterAnnotationStats_$Lambda$3)

@implementation EduStanfordNlpParserLexparserSisterAnnotationStats_$Lambda$3

- (id<EduStanfordNlpTreesTreeReader>)newTreeReaderWithJavaIoReader:(JavaIoReader *)inArg {
  return new_EduStanfordNlpTreesPennTreeReader_initWithJavaIoReader_withEduStanfordNlpTreesTreeFactory_withEduStanfordNlpTreesTreeNormalizer_(inArg, new_EduStanfordNlpTreesLabeledScoredTreeFactory_initWithEduStanfordNlpLingLabelFactory_(new_EduStanfordNlpLingStringLabelFactory_init()), new_EduStanfordNlpTreesBobChrisTreeNormalizer_init());
}

+ (void)initialize {
  if (self == [EduStanfordNlpParserLexparserSisterAnnotationStats_$Lambda$3 class]) {
    EduStanfordNlpParserLexparserSisterAnnotationStats_$Lambda$3_instance = new_EduStanfordNlpParserLexparserSisterAnnotationStats_$Lambda$3_init();
    J2OBJC_SET_INITIALIZED(EduStanfordNlpParserLexparserSisterAnnotationStats_$Lambda$3)
  }
}

@end

void EduStanfordNlpParserLexparserSisterAnnotationStats_$Lambda$3_init(EduStanfordNlpParserLexparserSisterAnnotationStats_$Lambda$3 *self) {
  NSObject_init(self);
}

EduStanfordNlpParserLexparserSisterAnnotationStats_$Lambda$3 *new_EduStanfordNlpParserLexparserSisterAnnotationStats_$Lambda$3_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpParserLexparserSisterAnnotationStats_$Lambda$3, init)
}

EduStanfordNlpParserLexparserSisterAnnotationStats_$Lambda$3 *create_EduStanfordNlpParserLexparserSisterAnnotationStats_$Lambda$3_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpParserLexparserSisterAnnotationStats_$Lambda$3, init)
}
