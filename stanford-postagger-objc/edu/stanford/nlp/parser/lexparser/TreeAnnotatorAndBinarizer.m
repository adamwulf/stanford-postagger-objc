//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/parser/lexparser/TreeAnnotatorAndBinarizer.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/io/NumberRangeFileFilter.h"
#include "edu/stanford/nlp/io/NumberRangesFileFilter.h"
#include "edu/stanford/nlp/ling/CategoryWordTag.h"
#include "edu/stanford/nlp/ling/CategoryWordTagFactory.h"
#include "edu/stanford/nlp/ling/Label.h"
#include "edu/stanford/nlp/ling/StringLabelFactory.h"
#include "edu/stanford/nlp/ling/Word.h"
#include "edu/stanford/nlp/parser/lexparser/CNFTransformers.h"
#include "edu/stanford/nlp/parser/lexparser/CollinsPuncTransformer.h"
#include "edu/stanford/nlp/parser/lexparser/Lexicon.h"
#include "edu/stanford/nlp/parser/lexparser/Options.h"
#include "edu/stanford/nlp/parser/lexparser/ParentAnnotationStats.h"
#include "edu/stanford/nlp/parser/lexparser/PostSplitter.h"
#include "edu/stanford/nlp/parser/lexparser/TestOptions.h"
#include "edu/stanford/nlp/parser/lexparser/TrainOptions.h"
#include "edu/stanford/nlp/parser/lexparser/TreeAnnotator.h"
#include "edu/stanford/nlp/parser/lexparser/TreeAnnotatorAndBinarizer.h"
#include "edu/stanford/nlp/parser/lexparser/TreeBinarizer.h"
#include "edu/stanford/nlp/parser/lexparser/TreebankLangParserParams.h"
#include "edu/stanford/nlp/stats/ClassicCounter.h"
#include "edu/stanford/nlp/trees/CompositeTreeTransformer.h"
#include "edu/stanford/nlp/trees/CompositeTreebank.h"
#include "edu/stanford/nlp/trees/DiskTreebank.h"
#include "edu/stanford/nlp/trees/HeadFinder.h"
#include "edu/stanford/nlp/trees/LabeledScoredTreeFactory.h"
#include "edu/stanford/nlp/trees/LeftHeadFinder.h"
#include "edu/stanford/nlp/trees/Tree.h"
#include "edu/stanford/nlp/trees/TreeFactory.h"
#include "edu/stanford/nlp/trees/TreeLeafLabelTransformer.h"
#include "edu/stanford/nlp/trees/TreeTransformer.h"
#include "edu/stanford/nlp/trees/Treebank.h"
#include "edu/stanford/nlp/trees/TreebankLanguagePack.h"
#include "edu/stanford/nlp/util/Triple.h"
#include "java/io/FileFilter.h"
#include "java/io/PrintStream.h"
#include "java/io/PrintWriter.h"
#include "java/lang/Integer.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "java/util/function/Function.h"

@interface EduStanfordNlpParserLexparserTreeAnnotatorAndBinarizer () {
 @public
  id<EduStanfordNlpTreesTreeFactory> tf_;
  id<EduStanfordNlpTreesTreebankLanguagePack> tlp_;
  id<EduStanfordNlpTreesTreeTransformer> annotator_;
  EduStanfordNlpParserLexparserTreeBinarizer *binarizer_;
  EduStanfordNlpParserLexparserPostSplitter *postSplitter_;
  jboolean forceCNF_;
  EduStanfordNlpParserLexparserTrainOptions *trainOptions_;
  EduStanfordNlpStatsClassicCounter *annotatedRuleCounts_;
  EduStanfordNlpStatsClassicCounter *annotatedStateCounts_;
}

+ (jint)numSubArgsWithNSStringArray:(IOSObjectArray *)args
                            withInt:(jint)index;

+ (void)removeDeleteSplittersFromSplittersWithEduStanfordNlpTreesTreebankLanguagePack:(id<EduStanfordNlpTreesTreebankLanguagePack>)tlp
                                             withEduStanfordNlpParserLexparserOptions:(EduStanfordNlpParserLexparserOptions *)op;

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserTreeAnnotatorAndBinarizer, tf_, id<EduStanfordNlpTreesTreeFactory>)
J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserTreeAnnotatorAndBinarizer, tlp_, id<EduStanfordNlpTreesTreebankLanguagePack>)
J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserTreeAnnotatorAndBinarizer, annotator_, id<EduStanfordNlpTreesTreeTransformer>)
J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserTreeAnnotatorAndBinarizer, binarizer_, EduStanfordNlpParserLexparserTreeBinarizer *)
J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserTreeAnnotatorAndBinarizer, postSplitter_, EduStanfordNlpParserLexparserPostSplitter *)
J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserTreeAnnotatorAndBinarizer, trainOptions_, EduStanfordNlpParserLexparserTrainOptions *)
J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserTreeAnnotatorAndBinarizer, annotatedRuleCounts_, EduStanfordNlpStatsClassicCounter *)
J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserTreeAnnotatorAndBinarizer, annotatedStateCounts_, EduStanfordNlpStatsClassicCounter *)

__attribute__((unused)) static jint EduStanfordNlpParserLexparserTreeAnnotatorAndBinarizer_numSubArgsWithNSStringArray_withInt_(IOSObjectArray *args, jint index);

__attribute__((unused)) static void EduStanfordNlpParserLexparserTreeAnnotatorAndBinarizer_removeDeleteSplittersFromSplittersWithEduStanfordNlpTreesTreebankLanguagePack_withEduStanfordNlpParserLexparserOptions_(id<EduStanfordNlpTreesTreebankLanguagePack> tlp, EduStanfordNlpParserLexparserOptions *op);

@interface EduStanfordNlpParserLexparserTreeAnnotatorAndBinarizer_TreeNullAnnotator () {
 @public
  id<EduStanfordNlpTreesTreeFactory> tf_;
  id<EduStanfordNlpTreesHeadFinder> hf_;
}

- (EduStanfordNlpTreesTree *)transformTreeHelperWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t;

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserTreeAnnotatorAndBinarizer_TreeNullAnnotator, tf_, id<EduStanfordNlpTreesTreeFactory>)
J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserTreeAnnotatorAndBinarizer_TreeNullAnnotator, hf_, id<EduStanfordNlpTreesHeadFinder>)

__attribute__((unused)) static EduStanfordNlpTreesTree *EduStanfordNlpParserLexparserTreeAnnotatorAndBinarizer_TreeNullAnnotator_transformTreeHelperWithEduStanfordNlpTreesTree_(EduStanfordNlpParserLexparserTreeAnnotatorAndBinarizer_TreeNullAnnotator *self, EduStanfordNlpTreesTree *t);

@implementation EduStanfordNlpParserLexparserTreeAnnotatorAndBinarizer

- (instancetype)initWithEduStanfordNlpParserLexparserTreebankLangParserParams:(id<EduStanfordNlpParserLexparserTreebankLangParserParams>)tlpParams
                                                                  withBoolean:(jboolean)forceCNF
                                                                  withBoolean:(jboolean)insideFactor
                                                                  withBoolean:(jboolean)doSubcategorization
                                     withEduStanfordNlpParserLexparserOptions:(EduStanfordNlpParserLexparserOptions *)op {
  EduStanfordNlpParserLexparserTreeAnnotatorAndBinarizer_initWithEduStanfordNlpParserLexparserTreebankLangParserParams_withBoolean_withBoolean_withBoolean_withEduStanfordNlpParserLexparserOptions_(self, tlpParams, forceCNF, insideFactor, doSubcategorization, op);
  return self;
}

- (instancetype)initWithEduStanfordNlpTreesHeadFinder:(id<EduStanfordNlpTreesHeadFinder>)annotationHF
                    withEduStanfordNlpTreesHeadFinder:(id<EduStanfordNlpTreesHeadFinder>)binarizationHF
withEduStanfordNlpParserLexparserTreebankLangParserParams:(id<EduStanfordNlpParserLexparserTreebankLangParserParams>)tlpParams
                                          withBoolean:(jboolean)forceCNF
                                          withBoolean:(jboolean)insideFactor
                                          withBoolean:(jboolean)doSubcategorization
             withEduStanfordNlpParserLexparserOptions:(EduStanfordNlpParserLexparserOptions *)op {
  EduStanfordNlpParserLexparserTreeAnnotatorAndBinarizer_initWithEduStanfordNlpTreesHeadFinder_withEduStanfordNlpTreesHeadFinder_withEduStanfordNlpParserLexparserTreebankLangParserParams_withBoolean_withBoolean_withBoolean_withEduStanfordNlpParserLexparserOptions_(self, annotationHF, binarizationHF, tlpParams, forceCNF, insideFactor, doSubcategorization, op);
  return self;
}

- (void)dumpStats {
  if (((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->selectivePostSplit_) {
    [((EduStanfordNlpParserLexparserPostSplitter *) nil_chk(postSplitter_)) dumpStats];
  }
}

- (void)setDoSelectiveSplitWithBoolean:(jboolean)doSelectiveSplit {
  [((EduStanfordNlpParserLexparserTreeBinarizer *) nil_chk(binarizer_)) setDoSelectiveSplitWithBoolean:doSelectiveSplit];
}

- (void)addRootWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t {
  if ([((EduStanfordNlpTreesTree *) nil_chk(t)) isLeaf]) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$@", @"Warning: tree is leaf: ", t)];
    t = [((id<EduStanfordNlpTreesTreeFactory>) nil_chk(tf_)) newTreeNodeWithNSString:[((id<EduStanfordNlpTreesTreebankLanguagePack>) nil_chk(tlp_)) startSymbol] withJavaUtilList:JavaUtilCollections_singletonListWithId_(t)];
  }
  [((EduStanfordNlpTreesTree *) nil_chk(t)) setLabelWithEduStanfordNlpLingLabel:new_EduStanfordNlpLingCategoryWordTag_initWithNSString_withNSString_withNSString_([((id<EduStanfordNlpTreesTreebankLanguagePack>) nil_chk(tlp_)) startSymbol], EduStanfordNlpParserLexparserLexicon_BOUNDARY, EduStanfordNlpParserLexparserLexicon_BOUNDARY_TAG)];
  id<JavaUtilList> preTermChildList = new_JavaUtilArrayList_init();
  EduStanfordNlpTreesTree *boundaryTerm = [((id<EduStanfordNlpTreesTreeFactory>) nil_chk(tf_)) newLeafWithEduStanfordNlpLingLabel:new_EduStanfordNlpLingWord_initWithNSString_(EduStanfordNlpParserLexparserLexicon_BOUNDARY)];
  [preTermChildList addWithId:boundaryTerm];
  EduStanfordNlpTreesTree *boundaryPreTerm = [tf_ newTreeNodeWithEduStanfordNlpLingLabel:new_EduStanfordNlpLingCategoryWordTag_initWithNSString_withNSString_withNSString_(EduStanfordNlpParserLexparserLexicon_BOUNDARY_TAG, EduStanfordNlpParserLexparserLexicon_BOUNDARY, EduStanfordNlpParserLexparserLexicon_BOUNDARY_TAG) withJavaUtilList:preTermChildList];
  id<JavaUtilList> childList = [t getChildrenAsList];
  [((id<JavaUtilList>) nil_chk(childList)) addWithId:boundaryPreTerm];
  [t setChildrenWithJavaUtilList:childList];
}

- (EduStanfordNlpTreesTree *)transformTreeWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t {
  if (((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->printTreeTransformations_ > 0) {
    EduStanfordNlpParserLexparserTrainOptions_printTrainTreeWithJavaIoPrintWriter_withNSString_withEduStanfordNlpTreesTree_(nil, @"ORIGINAL TREE:", t);
  }
  EduStanfordNlpTreesTree *trTree = [((id<EduStanfordNlpTreesTreeTransformer>) nil_chk(annotator_)) transformTreeWithEduStanfordNlpTreesTree:t];
  if (trainOptions_->selectivePostSplit_) {
    trTree = [((EduStanfordNlpParserLexparserPostSplitter *) nil_chk(postSplitter_)) transformTreeWithEduStanfordNlpTreesTree:trTree];
  }
  if (trainOptions_->printTreeTransformations_ > 0) {
    EduStanfordNlpParserLexparserTrainOptions_printTrainTreeWithJavaIoPrintWriter_withNSString_withEduStanfordNlpTreesTree_(trainOptions_->printAnnotatedPW_, @"ANNOTATED TREE:", trTree);
  }
  if (trainOptions_->printAnnotatedRuleCounts_) {
    EduStanfordNlpTreesTree *tr2 = [((EduStanfordNlpTreesTree *) nil_chk(trTree)) deepCopyWithEduStanfordNlpTreesTreeFactory:new_EduStanfordNlpTreesLabeledScoredTreeFactory_init() withEduStanfordNlpLingLabelFactory:new_EduStanfordNlpLingStringLabelFactory_init()];
    id<JavaUtilSet> localTrees = [((EduStanfordNlpTreesTree *) nil_chk(tr2)) localTrees];
    for (EduStanfordNlpTreesTree * __strong tr in nil_chk(localTrees)) {
      [((EduStanfordNlpStatsClassicCounter *) nil_chk(annotatedRuleCounts_)) incrementCountWithId:tr];
    }
  }
  if (trainOptions_->printAnnotatedStateCounts_) {
    for (EduStanfordNlpTreesTree * __strong subt in nil_chk(trTree)) {
      if (![((EduStanfordNlpTreesTree *) nil_chk(subt)) isLeaf]) {
        [((EduStanfordNlpStatsClassicCounter *) nil_chk(annotatedStateCounts_)) incrementCountWithId:[((id<EduStanfordNlpLingLabel>) nil_chk([subt label])) value]];
      }
    }
  }
  [self addRootWithEduStanfordNlpTreesTree:trTree];
  EduStanfordNlpTreesTree *binarizedTree = [((EduStanfordNlpParserLexparserTreeBinarizer *) nil_chk(binarizer_)) transformTreeWithEduStanfordNlpTreesTree:trTree];
  if (trainOptions_->printTreeTransformations_ > 0) {
    EduStanfordNlpParserLexparserTrainOptions_printTrainTreeWithJavaIoPrintWriter_withNSString_withEduStanfordNlpTreesTree_(trainOptions_->printBinarizedPW_, @"BINARIZED TREE:", binarizedTree);
    trainOptions_->printTreeTransformations_--;
  }
  if (forceCNF_) {
    binarizedTree = [new_EduStanfordNlpParserLexparserCNFTransformers_ToCNFTransformer_init() transformTreeWithEduStanfordNlpTreesTree:binarizedTree];
  }
  return binarizedTree;
}

- (void)printRuleCounts {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) println];
  for (EduStanfordNlpTreesTree * __strong t in nil_chk([((EduStanfordNlpStatsClassicCounter *) nil_chk(annotatedRuleCounts_)) keySet])) {
    [JreLoadStatic(JavaLangSystem, err) printWithNSString:JreStrcat("DC$$", [annotatedRuleCounts_ getCountWithId:t], 0x0009, [((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(t)) label])) value], @" -->")];
    for (EduStanfordNlpTreesTree * __strong dtr in nil_chk([t getChildrenAsList])) {
      [JreLoadStatic(JavaLangSystem, err) printWithNSString:@" "];
      [JreLoadStatic(JavaLangSystem, err) printWithNSString:[((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(dtr)) label])) value]];
    }
    [JreLoadStatic(JavaLangSystem, err) println];
  }
}

- (void)printStateCounts {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) println];
  [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:@"Annotated state counts"];
  id<JavaUtilSet> keys = [((EduStanfordNlpStatsClassicCounter *) nil_chk(annotatedStateCounts_)) keySet];
  id<JavaUtilList> keyList = new_JavaUtilArrayList_initWithJavaUtilCollection_(keys);
  JavaUtilCollections_sortWithJavaUtilList_(keyList);
  for (NSString * __strong s in keyList) {
    [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:JreStrcat("$CD", s, 0x0009, [annotatedStateCounts_ getCountWithId:s])];
  }
}

+ (jint)numSubArgsWithNSStringArray:(IOSObjectArray *)args
                            withInt:(jint)index {
  return EduStanfordNlpParserLexparserTreeAnnotatorAndBinarizer_numSubArgsWithNSStringArray_withInt_(args, index);
}

+ (void)removeDeleteSplittersFromSplittersWithEduStanfordNlpTreesTreebankLanguagePack:(id<EduStanfordNlpTreesTreebankLanguagePack>)tlp
                                             withEduStanfordNlpParserLexparserOptions:(EduStanfordNlpParserLexparserOptions *)op {
  EduStanfordNlpParserLexparserTreeAnnotatorAndBinarizer_removeDeleteSplittersFromSplittersWithEduStanfordNlpTreesTreebankLanguagePack_withEduStanfordNlpParserLexparserOptions_(tlp, op);
}

+ (EduStanfordNlpUtilTriple *)getAnnotatedBinaryTreebankFromTreebankWithEduStanfordNlpTreesTreebank:(EduStanfordNlpTreesTreebank *)trainTreebank
                                                                    withEduStanfordNlpTreesTreebank:(EduStanfordNlpTreesTreebank *)secondaryTreebank
                                                                    withEduStanfordNlpTreesTreebank:(EduStanfordNlpTreesTreebank *)tuneTreebank
                                                           withEduStanfordNlpParserLexparserOptions:(EduStanfordNlpParserLexparserOptions *)op {
  return EduStanfordNlpParserLexparserTreeAnnotatorAndBinarizer_getAnnotatedBinaryTreebankFromTreebankWithEduStanfordNlpTreesTreebank_withEduStanfordNlpTreesTreebank_withEduStanfordNlpTreesTreebank_withEduStanfordNlpParserLexparserOptions_(trainTreebank, secondaryTreebank, tuneTreebank, op);
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  EduStanfordNlpParserLexparserTreeAnnotatorAndBinarizer_mainWithNSStringArray_(args);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x1, 6, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 9, 10, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpUtilTriple;", 0x9, 11, 12, -1, 13, -1, -1 },
    { NULL, "V", 0x9, 14, 15, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpParserLexparserTreebankLangParserParams:withBoolean:withBoolean:withBoolean:withEduStanfordNlpParserLexparserOptions:);
  methods[1].selector = @selector(initWithEduStanfordNlpTreesHeadFinder:withEduStanfordNlpTreesHeadFinder:withEduStanfordNlpParserLexparserTreebankLangParserParams:withBoolean:withBoolean:withBoolean:withEduStanfordNlpParserLexparserOptions:);
  methods[2].selector = @selector(dumpStats);
  methods[3].selector = @selector(setDoSelectiveSplitWithBoolean:);
  methods[4].selector = @selector(addRootWithEduStanfordNlpTreesTree:);
  methods[5].selector = @selector(transformTreeWithEduStanfordNlpTreesTree:);
  methods[6].selector = @selector(printRuleCounts);
  methods[7].selector = @selector(printStateCounts);
  methods[8].selector = @selector(numSubArgsWithNSStringArray:withInt:);
  methods[9].selector = @selector(removeDeleteSplittersFromSplittersWithEduStanfordNlpTreesTreebankLanguagePack:withEduStanfordNlpParserLexparserOptions:);
  methods[10].selector = @selector(getAnnotatedBinaryTreebankFromTreebankWithEduStanfordNlpTreesTreebank:withEduStanfordNlpTreesTreebank:withEduStanfordNlpTreesTreebank:withEduStanfordNlpParserLexparserOptions:);
  methods[11].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "tf_", "LEduStanfordNlpTreesTreeFactory;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "tlp_", "LEduStanfordNlpTreesTreebankLanguagePack;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "annotator_", "LEduStanfordNlpTreesTreeTransformer;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "binarizer_", "LEduStanfordNlpParserLexparserTreeBinarizer;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "postSplitter_", "LEduStanfordNlpParserLexparserPostSplitter;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "forceCNF_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "trainOptions_", "LEduStanfordNlpParserLexparserTrainOptions;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "annotatedRuleCounts_", "LEduStanfordNlpStatsClassicCounter;", .constantValue.asLong = 0, 0x12, -1, -1, 16, -1 },
    { "annotatedStateCounts_", "LEduStanfordNlpStatsClassicCounter;", .constantValue.asLong = 0, 0x12, -1, -1, 17, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpParserLexparserTreebankLangParserParams;ZZZLEduStanfordNlpParserLexparserOptions;", "LEduStanfordNlpTreesHeadFinder;LEduStanfordNlpTreesHeadFinder;LEduStanfordNlpParserLexparserTreebankLangParserParams;ZZZLEduStanfordNlpParserLexparserOptions;", "setDoSelectiveSplit", "Z", "addRoot", "LEduStanfordNlpTreesTree;", "transformTree", "numSubArgs", "[LNSString;I", "removeDeleteSplittersFromSplitters", "LEduStanfordNlpTreesTreebankLanguagePack;LEduStanfordNlpParserLexparserOptions;", "getAnnotatedBinaryTreebankFromTreebank", "LEduStanfordNlpTreesTreebank;LEduStanfordNlpTreesTreebank;LEduStanfordNlpTreesTreebank;LEduStanfordNlpParserLexparserOptions;", "(Ledu/stanford/nlp/trees/Treebank;Ledu/stanford/nlp/trees/Treebank;Ledu/stanford/nlp/trees/Treebank;Ledu/stanford/nlp/parser/lexparser/Options;)Ledu/stanford/nlp/util/Triple<Ledu/stanford/nlp/trees/Treebank;Ledu/stanford/nlp/trees/Treebank;Ledu/stanford/nlp/trees/Treebank;>;", "main", "[LNSString;", "Ledu/stanford/nlp/stats/ClassicCounter<Ledu/stanford/nlp/trees/Tree;>;", "Ledu/stanford/nlp/stats/ClassicCounter<Ljava/lang/String;>;", "LEduStanfordNlpParserLexparserTreeAnnotatorAndBinarizer_TreeNullAnnotator;" };
  static const J2ObjcClassInfo _EduStanfordNlpParserLexparserTreeAnnotatorAndBinarizer = { "TreeAnnotatorAndBinarizer", "edu.stanford.nlp.parser.lexparser", ptrTable, methods, fields, 7, 0x1, 12, 9, -1, 18, -1, -1, -1 };
  return &_EduStanfordNlpParserLexparserTreeAnnotatorAndBinarizer;
}

@end

void EduStanfordNlpParserLexparserTreeAnnotatorAndBinarizer_initWithEduStanfordNlpParserLexparserTreebankLangParserParams_withBoolean_withBoolean_withBoolean_withEduStanfordNlpParserLexparserOptions_(EduStanfordNlpParserLexparserTreeAnnotatorAndBinarizer *self, id<EduStanfordNlpParserLexparserTreebankLangParserParams> tlpParams, jboolean forceCNF, jboolean insideFactor, jboolean doSubcategorization, EduStanfordNlpParserLexparserOptions *op) {
  EduStanfordNlpParserLexparserTreeAnnotatorAndBinarizer_initWithEduStanfordNlpTreesHeadFinder_withEduStanfordNlpTreesHeadFinder_withEduStanfordNlpParserLexparserTreebankLangParserParams_withBoolean_withBoolean_withBoolean_withEduStanfordNlpParserLexparserOptions_(self, [((id<EduStanfordNlpParserLexparserTreebankLangParserParams>) nil_chk(tlpParams)) headFinder], [tlpParams headFinder], tlpParams, forceCNF, insideFactor, doSubcategorization, op);
}

EduStanfordNlpParserLexparserTreeAnnotatorAndBinarizer *new_EduStanfordNlpParserLexparserTreeAnnotatorAndBinarizer_initWithEduStanfordNlpParserLexparserTreebankLangParserParams_withBoolean_withBoolean_withBoolean_withEduStanfordNlpParserLexparserOptions_(id<EduStanfordNlpParserLexparserTreebankLangParserParams> tlpParams, jboolean forceCNF, jboolean insideFactor, jboolean doSubcategorization, EduStanfordNlpParserLexparserOptions *op) {
  J2OBJC_NEW_IMPL(EduStanfordNlpParserLexparserTreeAnnotatorAndBinarizer, initWithEduStanfordNlpParserLexparserTreebankLangParserParams_withBoolean_withBoolean_withBoolean_withEduStanfordNlpParserLexparserOptions_, tlpParams, forceCNF, insideFactor, doSubcategorization, op)
}

EduStanfordNlpParserLexparserTreeAnnotatorAndBinarizer *create_EduStanfordNlpParserLexparserTreeAnnotatorAndBinarizer_initWithEduStanfordNlpParserLexparserTreebankLangParserParams_withBoolean_withBoolean_withBoolean_withEduStanfordNlpParserLexparserOptions_(id<EduStanfordNlpParserLexparserTreebankLangParserParams> tlpParams, jboolean forceCNF, jboolean insideFactor, jboolean doSubcategorization, EduStanfordNlpParserLexparserOptions *op) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpParserLexparserTreeAnnotatorAndBinarizer, initWithEduStanfordNlpParserLexparserTreebankLangParserParams_withBoolean_withBoolean_withBoolean_withEduStanfordNlpParserLexparserOptions_, tlpParams, forceCNF, insideFactor, doSubcategorization, op)
}

void EduStanfordNlpParserLexparserTreeAnnotatorAndBinarizer_initWithEduStanfordNlpTreesHeadFinder_withEduStanfordNlpTreesHeadFinder_withEduStanfordNlpParserLexparserTreebankLangParserParams_withBoolean_withBoolean_withBoolean_withEduStanfordNlpParserLexparserOptions_(EduStanfordNlpParserLexparserTreeAnnotatorAndBinarizer *self, id<EduStanfordNlpTreesHeadFinder> annotationHF, id<EduStanfordNlpTreesHeadFinder> binarizationHF, id<EduStanfordNlpParserLexparserTreebankLangParserParams> tlpParams, jboolean forceCNF, jboolean insideFactor, jboolean doSubcategorization, EduStanfordNlpParserLexparserOptions *op) {
  NSObject_init(self);
  self->trainOptions_ = ((EduStanfordNlpParserLexparserOptions *) nil_chk(op))->trainOptions_;
  if (doSubcategorization) {
    self->annotator_ = new_EduStanfordNlpParserLexparserTreeAnnotator_initWithEduStanfordNlpTreesHeadFinder_withEduStanfordNlpParserLexparserTreebankLangParserParams_withEduStanfordNlpParserLexparserOptions_(annotationHF, tlpParams, op);
  }
  else {
    self->annotator_ = new_EduStanfordNlpParserLexparserTreeAnnotatorAndBinarizer_TreeNullAnnotator_initWithEduStanfordNlpTreesHeadFinder_(annotationHF);
  }
  self->binarizer_ = new_EduStanfordNlpParserLexparserTreeBinarizer_initWithEduStanfordNlpTreesHeadFinder_withEduStanfordNlpTreesTreebankLanguagePack_withBoolean_withBoolean_withInt_withBoolean_withBoolean_withDouble_withBoolean_withBoolean_withBoolean_(binarizationHF, [((id<EduStanfordNlpParserLexparserTreebankLangParserParams>) nil_chk(tlpParams)) treebankLanguagePack], insideFactor, ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(self->trainOptions_))->markovFactor_, self->trainOptions_->markovOrder_, [self->trainOptions_ compactGrammar] > 0, [self->trainOptions_ compactGrammar] > 1, self->trainOptions_->HSEL_CUT_, self->trainOptions_->markFinalStates_, self->trainOptions_->simpleBinarizedLabels_, self->trainOptions_->noRebinarization_);
  if (self->trainOptions_->selectivePostSplit_) {
    self->postSplitter_ = new_EduStanfordNlpParserLexparserPostSplitter_initWithEduStanfordNlpParserLexparserTreebankLangParserParams_withEduStanfordNlpParserLexparserOptions_(tlpParams, op);
  }
  else {
    self->postSplitter_ = nil;
  }
  self->tf_ = new_EduStanfordNlpTreesLabeledScoredTreeFactory_initWithEduStanfordNlpLingLabelFactory_(new_EduStanfordNlpLingCategoryWordTagFactory_init());
  self->tlp_ = [tlpParams treebankLanguagePack];
  self->forceCNF_ = forceCNF;
  if (self->trainOptions_->printAnnotatedRuleCounts_) {
    self->annotatedRuleCounts_ = new_EduStanfordNlpStatsClassicCounter_init();
  }
  else {
    self->annotatedRuleCounts_ = nil;
  }
  if (self->trainOptions_->printAnnotatedStateCounts_) {
    self->annotatedStateCounts_ = new_EduStanfordNlpStatsClassicCounter_init();
  }
  else {
    self->annotatedStateCounts_ = nil;
  }
}

EduStanfordNlpParserLexparserTreeAnnotatorAndBinarizer *new_EduStanfordNlpParserLexparserTreeAnnotatorAndBinarizer_initWithEduStanfordNlpTreesHeadFinder_withEduStanfordNlpTreesHeadFinder_withEduStanfordNlpParserLexparserTreebankLangParserParams_withBoolean_withBoolean_withBoolean_withEduStanfordNlpParserLexparserOptions_(id<EduStanfordNlpTreesHeadFinder> annotationHF, id<EduStanfordNlpTreesHeadFinder> binarizationHF, id<EduStanfordNlpParserLexparserTreebankLangParserParams> tlpParams, jboolean forceCNF, jboolean insideFactor, jboolean doSubcategorization, EduStanfordNlpParserLexparserOptions *op) {
  J2OBJC_NEW_IMPL(EduStanfordNlpParserLexparserTreeAnnotatorAndBinarizer, initWithEduStanfordNlpTreesHeadFinder_withEduStanfordNlpTreesHeadFinder_withEduStanfordNlpParserLexparserTreebankLangParserParams_withBoolean_withBoolean_withBoolean_withEduStanfordNlpParserLexparserOptions_, annotationHF, binarizationHF, tlpParams, forceCNF, insideFactor, doSubcategorization, op)
}

EduStanfordNlpParserLexparserTreeAnnotatorAndBinarizer *create_EduStanfordNlpParserLexparserTreeAnnotatorAndBinarizer_initWithEduStanfordNlpTreesHeadFinder_withEduStanfordNlpTreesHeadFinder_withEduStanfordNlpParserLexparserTreebankLangParserParams_withBoolean_withBoolean_withBoolean_withEduStanfordNlpParserLexparserOptions_(id<EduStanfordNlpTreesHeadFinder> annotationHF, id<EduStanfordNlpTreesHeadFinder> binarizationHF, id<EduStanfordNlpParserLexparserTreebankLangParserParams> tlpParams, jboolean forceCNF, jboolean insideFactor, jboolean doSubcategorization, EduStanfordNlpParserLexparserOptions *op) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpParserLexparserTreeAnnotatorAndBinarizer, initWithEduStanfordNlpTreesHeadFinder_withEduStanfordNlpTreesHeadFinder_withEduStanfordNlpParserLexparserTreebankLangParserParams_withBoolean_withBoolean_withBoolean_withEduStanfordNlpParserLexparserOptions_, annotationHF, binarizationHF, tlpParams, forceCNF, insideFactor, doSubcategorization, op)
}

jint EduStanfordNlpParserLexparserTreeAnnotatorAndBinarizer_numSubArgsWithNSStringArray_withInt_(IOSObjectArray *args, jint index) {
  EduStanfordNlpParserLexparserTreeAnnotatorAndBinarizer_initialize();
  jint i = index;
  while (i + 1 < ((IOSObjectArray *) nil_chk(args))->size_ && [((NSString *) nil_chk(IOSObjectArray_Get(args, i + 1))) charAtWithInt:0] != '-') {
    i++;
  }
  return i - index;
}

void EduStanfordNlpParserLexparserTreeAnnotatorAndBinarizer_removeDeleteSplittersFromSplittersWithEduStanfordNlpTreesTreebankLanguagePack_withEduStanfordNlpParserLexparserOptions_(id<EduStanfordNlpTreesTreebankLanguagePack> tlp, EduStanfordNlpParserLexparserOptions *op) {
  EduStanfordNlpParserLexparserTreeAnnotatorAndBinarizer_initialize();
  if (((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(((EduStanfordNlpParserLexparserOptions *) nil_chk(op))->trainOptions_))->deleteSplitters_ != nil) {
    id<JavaUtilList> deleted = new_JavaUtilArrayList_init();
    for (NSString * __strong del in nil_chk(((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(op->trainOptions_))->deleteSplitters_)) {
      NSString *baseDel = [((id<EduStanfordNlpTreesTreebankLanguagePack>) nil_chk(tlp)) basicCategoryWithNSString:del];
      jboolean checkBasic = [((NSString *) nil_chk(del)) isEqual:baseDel];
      for (id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk(((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(op->trainOptions_))->splitters_)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
        NSString *elem = [it next];
        NSString *baseElem = [tlp basicCategoryWithNSString:elem];
        jboolean delStr = (checkBasic && [((NSString *) nil_chk(baseElem)) isEqual:baseDel]) || [((NSString *) nil_chk(elem)) isEqual:del];
        if (delStr) {
          [it remove];
          [deleted addWithId:elem];
        }
      }
    }
    if (((EduStanfordNlpParserLexparserTestOptions *) nil_chk(op->testOptions_))->verbose_) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$@", @"Removed from vertical splitters: ", deleted)];
    }
  }
}

EduStanfordNlpUtilTriple *EduStanfordNlpParserLexparserTreeAnnotatorAndBinarizer_getAnnotatedBinaryTreebankFromTreebankWithEduStanfordNlpTreesTreebank_withEduStanfordNlpTreesTreebank_withEduStanfordNlpTreesTreebank_withEduStanfordNlpParserLexparserOptions_(EduStanfordNlpTreesTreebank *trainTreebank, EduStanfordNlpTreesTreebank *secondaryTreebank, EduStanfordNlpTreesTreebank *tuneTreebank, EduStanfordNlpParserLexparserOptions *op) {
  EduStanfordNlpParserLexparserTreeAnnotatorAndBinarizer_initialize();
  id<EduStanfordNlpParserLexparserTreebankLangParserParams> tlpParams = ((EduStanfordNlpParserLexparserOptions *) nil_chk(op))->tlpParams_;
  id<EduStanfordNlpTreesTreebankLanguagePack> tlp = [((id<EduStanfordNlpParserLexparserTreebankLangParserParams>) nil_chk(tlpParams)) treebankLanguagePack];
  if (((EduStanfordNlpParserLexparserTestOptions *) nil_chk(op->testOptions_))->verbose_) {
    JavaIoPrintWriter *pwErr = [tlpParams pwWithJavaIoOutputStream:JreLoadStatic(JavaLangSystem, err)];
    [((JavaIoPrintWriter *) nil_chk(pwErr)) printWithNSString:@"Training "];
    [pwErr printlnWithNSString:[((EduStanfordNlpTreesTreebank *) nil_chk(trainTreebank)) textualSummaryWithEduStanfordNlpTreesTreebankLanguagePack:tlp]];
    if (secondaryTreebank != nil) {
      [pwErr printWithNSString:@"Secondary training "];
      [pwErr printlnWithNSString:[secondaryTreebank textualSummaryWithEduStanfordNlpTreesTreebankLanguagePack:tlp]];
    }
  }
  EduStanfordNlpTreesCompositeTreeTransformer *trainTransformer = new_EduStanfordNlpTreesCompositeTreeTransformer_init();
  if (((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(op->trainOptions_))->preTransformer_ != nil) {
    [trainTransformer addTransformerWithEduStanfordNlpTreesTreeTransformer:op->trainOptions_->preTransformer_];
  }
  if (((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(op->trainOptions_))->collinsPunc_) {
    EduStanfordNlpParserLexparserCollinsPuncTransformer *collinsPuncTransformer = new_EduStanfordNlpParserLexparserCollinsPuncTransformer_initWithEduStanfordNlpTreesTreebankLanguagePack_(tlp);
    [trainTransformer addTransformerWithEduStanfordNlpTreesTreeTransformer:collinsPuncTransformer];
  }
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printWithNSString:@"Binarizing trees..."];
  EduStanfordNlpParserLexparserTreeAnnotatorAndBinarizer *binarizer;
  if (!((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(op->trainOptions_))->leftToRight_) {
    binarizer = new_EduStanfordNlpParserLexparserTreeAnnotatorAndBinarizer_initWithEduStanfordNlpParserLexparserTreebankLangParserParams_withBoolean_withBoolean_withBoolean_withEduStanfordNlpParserLexparserOptions_(tlpParams, op->forceCNF_, ![op->trainOptions_ outsideFactor], !((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(op->trainOptions_))->predictSplits_, op);
  }
  else {
    binarizer = new_EduStanfordNlpParserLexparserTreeAnnotatorAndBinarizer_initWithEduStanfordNlpTreesHeadFinder_withEduStanfordNlpTreesHeadFinder_withEduStanfordNlpParserLexparserTreebankLangParserParams_withBoolean_withBoolean_withBoolean_withEduStanfordNlpParserLexparserOptions_([tlpParams headFinder], new_EduStanfordNlpTreesLeftHeadFinder_init(), tlpParams, op->forceCNF_, ![((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(op->trainOptions_)) outsideFactor], !((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(op->trainOptions_))->predictSplits_, op);
  }
  [trainTransformer addTransformerWithEduStanfordNlpTreesTreeTransformer:binarizer];
  if (op->wordFunction_ != nil) {
    id<EduStanfordNlpTreesTreeTransformer> wordFunctionTransformer = new_EduStanfordNlpTreesTreeLeafLabelTransformer_initWithJavaUtilFunctionFunction_(op->wordFunction_);
    [trainTransformer addTransformerWithEduStanfordNlpTreesTreeTransformer:wordFunctionTransformer];
  }
  EduStanfordNlpTreesTreebank *wholeTreebank;
  if (secondaryTreebank == nil) {
    wholeTreebank = trainTreebank;
  }
  else {
    wholeTreebank = new_EduStanfordNlpTreesCompositeTreebank_initWithEduStanfordNlpTreesTreebank_withEduStanfordNlpTreesTreebank_(trainTreebank, secondaryTreebank);
  }
  if (((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(op->trainOptions_))->selectiveSplit_) {
    op->trainOptions_->splitters_ = EduStanfordNlpParserLexparserParentAnnotationStats_getSplitCategoriesWithEduStanfordNlpTreesTreebank_withBoolean_withInt_withDouble_withDouble_withEduStanfordNlpTreesTreebankLanguagePack_(wholeTreebank, op->trainOptions_->tagSelectiveSplit_, 0, op->trainOptions_->selectiveSplitCutOff_, op->trainOptions_->tagSelectiveSplitCutOff_, tlp);
    EduStanfordNlpParserLexparserTreeAnnotatorAndBinarizer_removeDeleteSplittersFromSplittersWithEduStanfordNlpTreesTreebankLanguagePack_withEduStanfordNlpParserLexparserOptions_(tlp, op);
    if (((EduStanfordNlpParserLexparserTestOptions *) nil_chk(op->testOptions_))->verbose_) {
      id<JavaUtilList> list = new_JavaUtilArrayList_initWithJavaUtilCollection_(((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(op->trainOptions_))->splitters_);
      JavaUtilCollections_sortWithJavaUtilList_(list);
      [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:JreStrcat("$@", @"Parent split categories: ", list)];
    }
  }
  if (((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(op->trainOptions_))->selectivePostSplit_) {
    id<EduStanfordNlpTreesTreeTransformer> myTransformer = new_EduStanfordNlpParserLexparserTreeAnnotator_initWithEduStanfordNlpTreesHeadFinder_withEduStanfordNlpParserLexparserTreebankLangParserParams_withEduStanfordNlpParserLexparserOptions_([tlpParams headFinder], tlpParams, op);
    wholeTreebank = [((EduStanfordNlpTreesTreebank *) nil_chk(wholeTreebank)) transformWithEduStanfordNlpTreesTreeTransformer:myTransformer];
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(op->trainOptions_))->postSplitters_ = EduStanfordNlpParserLexparserParentAnnotationStats_getSplitCategoriesWithEduStanfordNlpTreesTreebank_withBoolean_withInt_withDouble_withDouble_withEduStanfordNlpTreesTreebankLanguagePack_(wholeTreebank, true, 0, op->trainOptions_->selectivePostSplitCutOff_, op->trainOptions_->tagSelectivePostSplitCutOff_, tlp);
    if (((EduStanfordNlpParserLexparserTestOptions *) nil_chk(op->testOptions_))->verbose_) {
      [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:JreStrcat("$@", @"Parent post annotation split categories: ", ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(op->trainOptions_))->postSplitters_)];
    }
  }
  if (((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(op->trainOptions_))->hSelSplit_) {
    jint ptt = op->trainOptions_->printTreeTransformations_;
    op->trainOptions_->printTreeTransformations_ = 0;
    [binarizer setDoSelectiveSplitWithBoolean:false];
    for (EduStanfordNlpTreesTree * __strong tree in nil_chk(wholeTreebank)) {
      (void) [trainTransformer transformTreeWithEduStanfordNlpTreesTree:tree];
    }
    [binarizer setDoSelectiveSplitWithBoolean:true];
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(op->trainOptions_))->printTreeTransformations_ = ptt;
  }
  trainTreebank = [((EduStanfordNlpTreesTreebank *) nil_chk(trainTreebank)) transformWithEduStanfordNlpTreesTreeTransformer:trainTransformer];
  if (secondaryTreebank != nil) {
    secondaryTreebank = [secondaryTreebank transformWithEduStanfordNlpTreesTreeTransformer:trainTransformer];
  }
  if (((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(op->trainOptions_))->printAnnotatedStateCounts_) {
    [binarizer printStateCounts];
  }
  if (((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(op->trainOptions_))->printAnnotatedRuleCounts_) {
    [binarizer printRuleCounts];
  }
  if (tuneTreebank != nil) {
    tuneTreebank = [tuneTreebank transformWithEduStanfordNlpTreesTreeTransformer:trainTransformer];
  }
  if (((EduStanfordNlpParserLexparserTestOptions *) nil_chk(op->testOptions_))->verbose_) {
    [binarizer dumpStats];
  }
  return new_EduStanfordNlpUtilTriple_initWithId_withId_withId_(trainTreebank, secondaryTreebank, tuneTreebank);
}

void EduStanfordNlpParserLexparserTreeAnnotatorAndBinarizer_mainWithNSStringArray_(IOSObjectArray *args) {
  EduStanfordNlpParserLexparserTreeAnnotatorAndBinarizer_initialize();
  EduStanfordNlpParserLexparserOptions *op = new_EduStanfordNlpParserLexparserOptions_init();
  NSString *treebankPath = nil;
  id<JavaIoFileFilter> trainFilter = nil;
  jint i = 0;
  while (i < ((IOSObjectArray *) nil_chk(args))->size_ && [((NSString *) nil_chk(IOSObjectArray_Get(args, i))) hasPrefix:@"-"]) {
    if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-train"]) {
      jint numSubArgs = EduStanfordNlpParserLexparserTreeAnnotatorAndBinarizer_numSubArgsWithNSStringArray_withInt_(args, i);
      i++;
      if (numSubArgs >= 1) {
        treebankPath = IOSObjectArray_Get(args, i);
        i++;
      }
      else {
        @throw new_JavaLangRuntimeException_initWithNSString_(@"Error: -train option must have treebankPath as first argument.");
      }
      if (numSubArgs == 2) {
        trainFilter = new_EduStanfordNlpIoNumberRangesFileFilter_initWithNSString_withBoolean_(IOSObjectArray_Get(args, i++), true);
      }
      else if (numSubArgs >= 3) {
        jint low = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, i));
        jint high = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, i + 1));
        trainFilter = new_EduStanfordNlpIoNumberRangeFileFilter_initWithInt_withInt_withBoolean_(low, high, true);
        i += 2;
      }
    }
    else {
      i = [op setOptionWithNSStringArray:args withInt:i];
    }
  }
  if (i < args->size_) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"usage: java TreeAnnotatorAndBinarizer options*"];
    [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:@"  Options are like for lexicalized parser including -train treebankPath fileRange]"];
    return;
  }
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$", @"Annotating from treebank dir: ", treebankPath)];
  EduStanfordNlpTreesTreebank *trainTreebank = [((id<EduStanfordNlpParserLexparserTreebankLangParserParams>) nil_chk(op->tlpParams_)) diskTreebank];
  if (trainFilter == nil) {
    [((EduStanfordNlpTreesTreebank *) nil_chk(trainTreebank)) loadPathWithNSString:treebankPath];
  }
  else {
    [((EduStanfordNlpTreesTreebank *) nil_chk(trainTreebank)) loadPathWithNSString:treebankPath withJavaIoFileFilter:trainFilter];
  }
  EduStanfordNlpTreesTreebank *binaryTrainTreebank = [((EduStanfordNlpUtilTriple *) nil_chk(EduStanfordNlpParserLexparserTreeAnnotatorAndBinarizer_getAnnotatedBinaryTreebankFromTreebankWithEduStanfordNlpTreesTreebank_withEduStanfordNlpTreesTreebank_withEduStanfordNlpTreesTreebank_withEduStanfordNlpParserLexparserOptions_(trainTreebank, nil, nil, op))) first];
  id<JavaUtilIterator> it = [trainTreebank iterator];
  for (EduStanfordNlpTreesTree * __strong t in nil_chk(binaryTrainTreebank)) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"Original tree:"];
    [((EduStanfordNlpTreesTree *) nil_chk([((id<JavaUtilIterator>) nil_chk(it)) next])) pennPrint];
    [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"Binarized tree:"];
    [((EduStanfordNlpTreesTree *) nil_chk(t)) pennPrint];
    [JreLoadStatic(JavaLangSystem, out) println];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpParserLexparserTreeAnnotatorAndBinarizer)

@implementation EduStanfordNlpParserLexparserTreeAnnotatorAndBinarizer_TreeNullAnnotator

- (EduStanfordNlpTreesTree *)transformTreeWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t {
  EduStanfordNlpTreesTree *copy_ = [((EduStanfordNlpTreesTree *) nil_chk(t)) treeSkeletonCopyWithEduStanfordNlpTreesTreeFactory:tf_];
  return EduStanfordNlpParserLexparserTreeAnnotatorAndBinarizer_TreeNullAnnotator_transformTreeHelperWithEduStanfordNlpTreesTree_(self, copy_);
}

- (EduStanfordNlpTreesTree *)transformTreeHelperWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t {
  return EduStanfordNlpParserLexparserTreeAnnotatorAndBinarizer_TreeNullAnnotator_transformTreeHelperWithEduStanfordNlpTreesTree_(self, t);
}

- (instancetype)initWithEduStanfordNlpTreesHeadFinder:(id<EduStanfordNlpTreesHeadFinder>)hf {
  EduStanfordNlpParserLexparserTreeAnnotatorAndBinarizer_TreeNullAnnotator_initWithEduStanfordNlpTreesHeadFinder_(self, hf);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LEduStanfordNlpTreesTree;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x2, 2, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(transformTreeWithEduStanfordNlpTreesTree:);
  methods[1].selector = @selector(transformTreeHelperWithEduStanfordNlpTreesTree:);
  methods[2].selector = @selector(initWithEduStanfordNlpTreesHeadFinder:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "tf_", "LEduStanfordNlpTreesTreeFactory;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "hf_", "LEduStanfordNlpTreesHeadFinder;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "transformTree", "LEduStanfordNlpTreesTree;", "transformTreeHelper", "LEduStanfordNlpTreesHeadFinder;", "LEduStanfordNlpParserLexparserTreeAnnotatorAndBinarizer;" };
  static const J2ObjcClassInfo _EduStanfordNlpParserLexparserTreeAnnotatorAndBinarizer_TreeNullAnnotator = { "TreeNullAnnotator", "edu.stanford.nlp.parser.lexparser", ptrTable, methods, fields, 7, 0x8, 3, 2, 4, -1, -1, -1, -1 };
  return &_EduStanfordNlpParserLexparserTreeAnnotatorAndBinarizer_TreeNullAnnotator;
}

@end

EduStanfordNlpTreesTree *EduStanfordNlpParserLexparserTreeAnnotatorAndBinarizer_TreeNullAnnotator_transformTreeHelperWithEduStanfordNlpTreesTree_(EduStanfordNlpParserLexparserTreeAnnotatorAndBinarizer_TreeNullAnnotator *self, EduStanfordNlpTreesTree *t) {
  if (t != nil) {
    NSString *cat = [((id<EduStanfordNlpLingLabel>) nil_chk([t label])) value];
    if ([t isLeaf]) {
      id<EduStanfordNlpLingLabel> label = new_EduStanfordNlpLingWord_initWithNSString_(cat);
      [t setLabelWithEduStanfordNlpLingLabel:label];
    }
    else {
      IOSObjectArray *kids = [t children];
      {
        IOSObjectArray *a__ = kids;
        EduStanfordNlpTreesTree * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
        EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          EduStanfordNlpTreesTree *child = *b__++;
          (void) EduStanfordNlpParserLexparserTreeAnnotatorAndBinarizer_TreeNullAnnotator_transformTreeHelperWithEduStanfordNlpTreesTree_(self, child);
        }
      }
      EduStanfordNlpTreesTree *headChild = [((id<EduStanfordNlpTreesHeadFinder>) nil_chk(self->hf_)) determineHeadWithEduStanfordNlpTreesTree:t];
      NSString *tag;
      NSString *word;
      if (headChild == nil) {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$", @"ERROR: null head for tree\n", [t description])];
        word = nil;
        tag = nil;
      }
      else if ([headChild isLeaf]) {
        tag = cat;
        word = [((id<EduStanfordNlpLingLabel>) nil_chk([headChild label])) value];
      }
      else {
        EduStanfordNlpLingCategoryWordTag *headLabel = (EduStanfordNlpLingCategoryWordTag *) cast_chk([headChild label], [EduStanfordNlpLingCategoryWordTag class]);
        word = [((EduStanfordNlpLingCategoryWordTag *) nil_chk(headLabel)) word];
        tag = [headLabel tag];
      }
      id<EduStanfordNlpLingLabel> label = new_EduStanfordNlpLingCategoryWordTag_initWithNSString_withNSString_withNSString_(cat, word, tag);
      [t setLabelWithEduStanfordNlpLingLabel:label];
    }
  }
  return t;
}

void EduStanfordNlpParserLexparserTreeAnnotatorAndBinarizer_TreeNullAnnotator_initWithEduStanfordNlpTreesHeadFinder_(EduStanfordNlpParserLexparserTreeAnnotatorAndBinarizer_TreeNullAnnotator *self, id<EduStanfordNlpTreesHeadFinder> hf) {
  NSObject_init(self);
  self->tf_ = new_EduStanfordNlpTreesLabeledScoredTreeFactory_initWithEduStanfordNlpLingLabelFactory_(new_EduStanfordNlpLingCategoryWordTagFactory_init());
  self->hf_ = hf;
}

EduStanfordNlpParserLexparserTreeAnnotatorAndBinarizer_TreeNullAnnotator *new_EduStanfordNlpParserLexparserTreeAnnotatorAndBinarizer_TreeNullAnnotator_initWithEduStanfordNlpTreesHeadFinder_(id<EduStanfordNlpTreesHeadFinder> hf) {
  J2OBJC_NEW_IMPL(EduStanfordNlpParserLexparserTreeAnnotatorAndBinarizer_TreeNullAnnotator, initWithEduStanfordNlpTreesHeadFinder_, hf)
}

EduStanfordNlpParserLexparserTreeAnnotatorAndBinarizer_TreeNullAnnotator *create_EduStanfordNlpParserLexparserTreeAnnotatorAndBinarizer_TreeNullAnnotator_initWithEduStanfordNlpTreesHeadFinder_(id<EduStanfordNlpTreesHeadFinder> hf) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpParserLexparserTreeAnnotatorAndBinarizer_TreeNullAnnotator, initWithEduStanfordNlpTreesHeadFinder_, hf)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpParserLexparserTreeAnnotatorAndBinarizer_TreeNullAnnotator)
