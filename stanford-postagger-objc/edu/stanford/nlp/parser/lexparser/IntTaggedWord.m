//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/parser/lexparser/IntTaggedWord.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/ling/TaggedWord.h"
#include "edu/stanford/nlp/parser/lexparser/IntTaggedWord.h"
#include "edu/stanford/nlp/util/Index.h"
#include "edu/stanford/nlp/util/StringUtils.h"

@interface EduStanfordNlpParserLexparserIntTaggedWord ()

+ (NSString *)extractWordWithNSString:(NSString *)s
                             withChar:(jchar)splitChar;

+ (NSString *)extractTagWithNSString:(NSString *)s
                            withChar:(jchar)splitChar;

@end

inline IOSCharArray *EduStanfordNlpParserLexparserIntTaggedWord_get_charsToEscape();
static IOSCharArray *EduStanfordNlpParserLexparserIntTaggedWord_charsToEscape;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpParserLexparserIntTaggedWord, charsToEscape, IOSCharArray *)

inline jlong EduStanfordNlpParserLexparserIntTaggedWord_get_serialVersionUID();
#define EduStanfordNlpParserLexparserIntTaggedWord_serialVersionUID 1LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpParserLexparserIntTaggedWord, serialVersionUID, jlong)

__attribute__((unused)) static NSString *EduStanfordNlpParserLexparserIntTaggedWord_extractWordWithNSString_withChar_(NSString *s, jchar splitChar);

__attribute__((unused)) static NSString *EduStanfordNlpParserLexparserIntTaggedWord_extractTagWithNSString_withChar_(NSString *s, jchar splitChar);

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpParserLexparserIntTaggedWord)

NSString *EduStanfordNlpParserLexparserIntTaggedWord_ANY = @".*.";
NSString *EduStanfordNlpParserLexparserIntTaggedWord_STOP = @"STOP";

@implementation EduStanfordNlpParserLexparserIntTaggedWord

- (jint)tag {
  return tag_;
}

- (jint)word {
  return word_;
}

- (NSString *)wordStringWithEduStanfordNlpUtilIndex:(id<EduStanfordNlpUtilIndex>)wordIndex {
  NSString *wordStr;
  if (word_ >= 0) {
    wordStr = [((id<EduStanfordNlpUtilIndex>) nil_chk(wordIndex)) getWithInt:word_];
  }
  else if (word_ == EduStanfordNlpParserLexparserIntTaggedWord_ANY_WORD_INT) {
    wordStr = EduStanfordNlpParserLexparserIntTaggedWord_ANY;
  }
  else {
    wordStr = EduStanfordNlpParserLexparserIntTaggedWord_STOP;
  }
  return wordStr;
}

- (NSString *)tagStringWithEduStanfordNlpUtilIndex:(id<EduStanfordNlpUtilIndex>)tagIndex {
  NSString *tagStr;
  if (tag_ >= 0) {
    tagStr = [((id<EduStanfordNlpUtilIndex>) nil_chk(tagIndex)) getWithInt:tag_];
  }
  else if (tag_ == EduStanfordNlpParserLexparserIntTaggedWord_ANY_TAG_INT) {
    tagStr = EduStanfordNlpParserLexparserIntTaggedWord_ANY;
  }
  else {
    tagStr = EduStanfordNlpParserLexparserIntTaggedWord_STOP;
  }
  return tagStr;
}

- (NSUInteger)hash {
  return word_ ^ (JreLShift32(tag_, 16));
}

- (jboolean)isEqual:(id)o {
  if (self == o) {
    return true;
  }
  else if ([o isKindOfClass:[EduStanfordNlpParserLexparserIntTaggedWord class]]) {
    EduStanfordNlpParserLexparserIntTaggedWord *i = (EduStanfordNlpParserLexparserIntTaggedWord *) cast_chk(o, [EduStanfordNlpParserLexparserIntTaggedWord class]);
    return (word_ == ((EduStanfordNlpParserLexparserIntTaggedWord *) nil_chk(i))->word_ && tag_ == i->tag_);
  }
  else {
    return false;
  }
}

- (jint)compareToWithId:(EduStanfordNlpParserLexparserIntTaggedWord *)that {
  (void) cast_chk(that, [EduStanfordNlpParserLexparserIntTaggedWord class]);
  if (tag_ != ((EduStanfordNlpParserLexparserIntTaggedWord *) nil_chk(that))->tag_) {
    return tag_ - that->tag_;
  }
  else {
    return word_ - that->word_;
  }
}

- (NSString *)toLexicalEntryWithEduStanfordNlpUtilIndex:(id<EduStanfordNlpUtilIndex>)wordIndex
                            withEduStanfordNlpUtilIndex:(id<EduStanfordNlpUtilIndex>)tagIndex {
  NSString *wordStr = [self wordStringWithEduStanfordNlpUtilIndex:wordIndex];
  NSString *tagStr = [self tagStringWithEduStanfordNlpUtilIndex:tagIndex];
  return JreStrcat("C$$$C", '"', EduStanfordNlpUtilStringUtils_escapeStringWithNSString_withCharArray_withChar_(tagStr, EduStanfordNlpParserLexparserIntTaggedWord_charsToEscape, '\\'), @"\" -> \"", EduStanfordNlpUtilStringUtils_escapeStringWithNSString_withCharArray_withChar_(wordStr, EduStanfordNlpParserLexparserIntTaggedWord_charsToEscape, '\\'), '"');
}

- (NSString *)description {
  return JreStrcat("ICS", word_, '/', tag_);
}

- (NSString *)toStringWithEduStanfordNlpUtilIndex:(id<EduStanfordNlpUtilIndex>)wordIndex
                      withEduStanfordNlpUtilIndex:(id<EduStanfordNlpUtilIndex>)tagIndex {
  return JreStrcat("$C$", [self wordStringWithEduStanfordNlpUtilIndex:wordIndex], '/', [self tagStringWithEduStanfordNlpUtilIndex:tagIndex]);
}

- (NSString *)toStringWithNSString:(NSString *)arg
       withEduStanfordNlpUtilIndex:(id<EduStanfordNlpUtilIndex>)wordIndex
       withEduStanfordNlpUtilIndex:(id<EduStanfordNlpUtilIndex>)tagIndex {
  if ([((NSString *) nil_chk(arg)) isEqual:@"verbose"]) {
    return (JreStrcat("$CI$$CSC", [self wordStringWithEduStanfordNlpUtilIndex:wordIndex], '[', word_, @"]/", [self tagStringWithEduStanfordNlpUtilIndex:tagIndex], '[', tag_, ']'));
  }
  else {
    return [self toStringWithEduStanfordNlpUtilIndex:wordIndex withEduStanfordNlpUtilIndex:tagIndex];
  }
}

- (instancetype)initWithInt:(jint)word
                    withInt:(jint)tag {
  EduStanfordNlpParserLexparserIntTaggedWord_initWithInt_withInt_(self, word, tag);
  return self;
}

- (EduStanfordNlpLingTaggedWord *)toTaggedWordWithEduStanfordNlpUtilIndex:(id<EduStanfordNlpUtilIndex>)wordIndex
                                              withEduStanfordNlpUtilIndex:(id<EduStanfordNlpUtilIndex>)tagIndex {
  NSString *wordStr = [self wordStringWithEduStanfordNlpUtilIndex:wordIndex];
  NSString *tagStr = [self tagStringWithEduStanfordNlpUtilIndex:tagIndex];
  return new_EduStanfordNlpLingTaggedWord_initWithNSString_withNSString_(wordStr, tagStr);
}

- (instancetype)initWithNSString:(NSString *)s
                        withChar:(jchar)splitChar
     withEduStanfordNlpUtilIndex:(id<EduStanfordNlpUtilIndex>)wordIndex
     withEduStanfordNlpUtilIndex:(id<EduStanfordNlpUtilIndex>)tagIndex {
  EduStanfordNlpParserLexparserIntTaggedWord_initWithNSString_withChar_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(self, s, splitChar, wordIndex, tagIndex);
  return self;
}

+ (NSString *)extractWordWithNSString:(NSString *)s
                             withChar:(jchar)splitChar {
  return EduStanfordNlpParserLexparserIntTaggedWord_extractWordWithNSString_withChar_(s, splitChar);
}

+ (NSString *)extractTagWithNSString:(NSString *)s
                            withChar:(jchar)splitChar {
  return EduStanfordNlpParserLexparserIntTaggedWord_extractTagWithNSString_withChar_(s, splitChar);
}

- (instancetype)initWithNSString:(NSString *)wordString
                    withNSString:(NSString *)tagString
     withEduStanfordNlpUtilIndex:(id<EduStanfordNlpUtilIndex>)wordIndex
     withEduStanfordNlpUtilIndex:(id<EduStanfordNlpUtilIndex>)tagIndex {
  EduStanfordNlpParserLexparserIntTaggedWord_initWithNSString_withNSString_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(self, wordString, tagString, wordIndex, tagIndex);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, 1, -1, 2, -1, -1 },
    { NULL, "I", 0x1, 4, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 9, 10, -1, 11, -1, -1 },
    { NULL, "LNSString;", 0x1, 12, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 12, 10, -1, 11, -1, -1 },
    { NULL, "LNSString;", 0x1, 12, 13, -1, 14, -1, -1 },
    { NULL, NULL, 0x1, -1, 15, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTaggedWord;", 0x1, 16, 10, -1, 17, -1, -1 },
    { NULL, NULL, 0x1, -1, 18, -1, 19, -1, -1 },
    { NULL, "LNSString;", 0xa, 20, 21, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 22, 21, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 23, -1, 24, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(tag);
  methods[1].selector = @selector(word);
  methods[2].selector = @selector(wordStringWithEduStanfordNlpUtilIndex:);
  methods[3].selector = @selector(tagStringWithEduStanfordNlpUtilIndex:);
  methods[4].selector = @selector(hash);
  methods[5].selector = @selector(isEqual:);
  methods[6].selector = @selector(compareToWithId:);
  methods[7].selector = @selector(toLexicalEntryWithEduStanfordNlpUtilIndex:withEduStanfordNlpUtilIndex:);
  methods[8].selector = @selector(description);
  methods[9].selector = @selector(toStringWithEduStanfordNlpUtilIndex:withEduStanfordNlpUtilIndex:);
  methods[10].selector = @selector(toStringWithNSString:withEduStanfordNlpUtilIndex:withEduStanfordNlpUtilIndex:);
  methods[11].selector = @selector(initWithInt:withInt:);
  methods[12].selector = @selector(toTaggedWordWithEduStanfordNlpUtilIndex:withEduStanfordNlpUtilIndex:);
  methods[13].selector = @selector(initWithNSString:withChar:withEduStanfordNlpUtilIndex:withEduStanfordNlpUtilIndex:);
  methods[14].selector = @selector(extractWordWithNSString:withChar:);
  methods[15].selector = @selector(extractTagWithNSString:withChar:);
  methods[16].selector = @selector(initWithNSString:withNSString:withEduStanfordNlpUtilIndex:withEduStanfordNlpUtilIndex:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ANY_WORD_INT", "I", .constantValue.asInt = EduStanfordNlpParserLexparserIntTaggedWord_ANY_WORD_INT, 0x19, -1, -1, -1, -1 },
    { "ANY_TAG_INT", "I", .constantValue.asInt = EduStanfordNlpParserLexparserIntTaggedWord_ANY_TAG_INT, 0x19, -1, -1, -1, -1 },
    { "STOP_WORD_INT", "I", .constantValue.asInt = EduStanfordNlpParserLexparserIntTaggedWord_STOP_WORD_INT, 0x19, -1, -1, -1, -1 },
    { "STOP_TAG_INT", "I", .constantValue.asInt = EduStanfordNlpParserLexparserIntTaggedWord_STOP_TAG_INT, 0x19, -1, -1, -1, -1 },
    { "ANY", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 25, -1, -1 },
    { "STOP", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 26, -1, -1 },
    { "word_", "I", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "tag_", "S", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "charsToEscape", "[C", .constantValue.asLong = 0, 0x1a, -1, 27, -1, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpParserLexparserIntTaggedWord_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "wordString", "LEduStanfordNlpUtilIndex;", "(Ledu/stanford/nlp/util/Index<Ljava/lang/String;>;)Ljava/lang/String;", "tagString", "hashCode", "equals", "LNSObject;", "compareTo", "LEduStanfordNlpParserLexparserIntTaggedWord;", "toLexicalEntry", "LEduStanfordNlpUtilIndex;LEduStanfordNlpUtilIndex;", "(Ledu/stanford/nlp/util/Index<Ljava/lang/String;>;Ledu/stanford/nlp/util/Index<Ljava/lang/String;>;)Ljava/lang/String;", "toString", "LNSString;LEduStanfordNlpUtilIndex;LEduStanfordNlpUtilIndex;", "(Ljava/lang/String;Ledu/stanford/nlp/util/Index<Ljava/lang/String;>;Ledu/stanford/nlp/util/Index<Ljava/lang/String;>;)Ljava/lang/String;", "II", "toTaggedWord", "(Ledu/stanford/nlp/util/Index<Ljava/lang/String;>;Ledu/stanford/nlp/util/Index<Ljava/lang/String;>;)Ledu/stanford/nlp/ling/TaggedWord;", "LNSString;CLEduStanfordNlpUtilIndex;LEduStanfordNlpUtilIndex;", "(Ljava/lang/String;CLedu/stanford/nlp/util/Index<Ljava/lang/String;>;Ledu/stanford/nlp/util/Index<Ljava/lang/String;>;)V", "extractWord", "LNSString;C", "extractTag", "LNSString;LNSString;LEduStanfordNlpUtilIndex;LEduStanfordNlpUtilIndex;", "(Ljava/lang/String;Ljava/lang/String;Ledu/stanford/nlp/util/Index<Ljava/lang/String;>;Ledu/stanford/nlp/util/Index<Ljava/lang/String;>;)V", &EduStanfordNlpParserLexparserIntTaggedWord_ANY, &EduStanfordNlpParserLexparserIntTaggedWord_STOP, &EduStanfordNlpParserLexparserIntTaggedWord_charsToEscape, "Ljava/lang/Object;Ljava/io/Serializable;Ljava/lang/Comparable<Ledu/stanford/nlp/parser/lexparser/IntTaggedWord;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpParserLexparserIntTaggedWord = { "IntTaggedWord", "edu.stanford.nlp.parser.lexparser", ptrTable, methods, fields, 7, 0x1, 17, 10, -1, -1, -1, 28, -1 };
  return &_EduStanfordNlpParserLexparserIntTaggedWord;
}

+ (void)initialize {
  if (self == [EduStanfordNlpParserLexparserIntTaggedWord class]) {
    EduStanfordNlpParserLexparserIntTaggedWord_charsToEscape = [IOSCharArray newArrayWithChars:(jchar[]){ '"' } count:1];
    J2OBJC_SET_INITIALIZED(EduStanfordNlpParserLexparserIntTaggedWord)
  }
}

@end

void EduStanfordNlpParserLexparserIntTaggedWord_initWithInt_withInt_(EduStanfordNlpParserLexparserIntTaggedWord *self, jint word, jint tag) {
  NSObject_init(self);
  self->word_ = word;
  self->tag_ = (jshort) tag;
}

EduStanfordNlpParserLexparserIntTaggedWord *new_EduStanfordNlpParserLexparserIntTaggedWord_initWithInt_withInt_(jint word, jint tag) {
  J2OBJC_NEW_IMPL(EduStanfordNlpParserLexparserIntTaggedWord, initWithInt_withInt_, word, tag)
}

EduStanfordNlpParserLexparserIntTaggedWord *create_EduStanfordNlpParserLexparserIntTaggedWord_initWithInt_withInt_(jint word, jint tag) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpParserLexparserIntTaggedWord, initWithInt_withInt_, word, tag)
}

void EduStanfordNlpParserLexparserIntTaggedWord_initWithNSString_withChar_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(EduStanfordNlpParserLexparserIntTaggedWord *self, NSString *s, jchar splitChar, id<EduStanfordNlpUtilIndex> wordIndex, id<EduStanfordNlpUtilIndex> tagIndex) {
  EduStanfordNlpParserLexparserIntTaggedWord_initWithNSString_withNSString_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(self, EduStanfordNlpParserLexparserIntTaggedWord_extractWordWithNSString_withChar_(s, splitChar), EduStanfordNlpParserLexparserIntTaggedWord_extractTagWithNSString_withChar_(s, splitChar), wordIndex, tagIndex);
}

EduStanfordNlpParserLexparserIntTaggedWord *new_EduStanfordNlpParserLexparserIntTaggedWord_initWithNSString_withChar_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(NSString *s, jchar splitChar, id<EduStanfordNlpUtilIndex> wordIndex, id<EduStanfordNlpUtilIndex> tagIndex) {
  J2OBJC_NEW_IMPL(EduStanfordNlpParserLexparserIntTaggedWord, initWithNSString_withChar_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_, s, splitChar, wordIndex, tagIndex)
}

EduStanfordNlpParserLexparserIntTaggedWord *create_EduStanfordNlpParserLexparserIntTaggedWord_initWithNSString_withChar_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(NSString *s, jchar splitChar, id<EduStanfordNlpUtilIndex> wordIndex, id<EduStanfordNlpUtilIndex> tagIndex) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpParserLexparserIntTaggedWord, initWithNSString_withChar_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_, s, splitChar, wordIndex, tagIndex)
}

NSString *EduStanfordNlpParserLexparserIntTaggedWord_extractWordWithNSString_withChar_(NSString *s, jchar splitChar) {
  EduStanfordNlpParserLexparserIntTaggedWord_initialize();
  jint n = [((NSString *) nil_chk(s)) lastIndexOf:splitChar];
  NSString *result = [s substring:0 endIndex:n];
  return result;
}

NSString *EduStanfordNlpParserLexparserIntTaggedWord_extractTagWithNSString_withChar_(NSString *s, jchar splitChar) {
  EduStanfordNlpParserLexparserIntTaggedWord_initialize();
  jint n = [((NSString *) nil_chk(s)) lastIndexOf:splitChar];
  NSString *result = [s substring:n + 1];
  return result;
}

void EduStanfordNlpParserLexparserIntTaggedWord_initWithNSString_withNSString_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(EduStanfordNlpParserLexparserIntTaggedWord *self, NSString *wordString, NSString *tagString, id<EduStanfordNlpUtilIndex> wordIndex, id<EduStanfordNlpUtilIndex> tagIndex) {
  NSObject_init(self);
  switch (JreIndexOfStr(wordString, (id[]){ EduStanfordNlpParserLexparserIntTaggedWord_ANY, EduStanfordNlpParserLexparserIntTaggedWord_STOP }, 2)) {
    case 0:
    self->word_ = EduStanfordNlpParserLexparserIntTaggedWord_ANY_WORD_INT;
    break;
    case 1:
    self->word_ = EduStanfordNlpParserLexparserIntTaggedWord_STOP_WORD_INT;
    break;
    default:
    self->word_ = [((id<EduStanfordNlpUtilIndex>) nil_chk(wordIndex)) addToIndexWithId:wordString];
    break;
  }
  switch (JreIndexOfStr(tagString, (id[]){ EduStanfordNlpParserLexparserIntTaggedWord_ANY, EduStanfordNlpParserLexparserIntTaggedWord_STOP }, 2)) {
    case 0:
    self->tag_ = (jshort) EduStanfordNlpParserLexparserIntTaggedWord_ANY_TAG_INT;
    break;
    case 1:
    self->tag_ = (jshort) EduStanfordNlpParserLexparserIntTaggedWord_STOP_TAG_INT;
    break;
    default:
    self->tag_ = (jshort) [((id<EduStanfordNlpUtilIndex>) nil_chk(tagIndex)) addToIndexWithId:tagString];
    break;
  }
}

EduStanfordNlpParserLexparserIntTaggedWord *new_EduStanfordNlpParserLexparserIntTaggedWord_initWithNSString_withNSString_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(NSString *wordString, NSString *tagString, id<EduStanfordNlpUtilIndex> wordIndex, id<EduStanfordNlpUtilIndex> tagIndex) {
  J2OBJC_NEW_IMPL(EduStanfordNlpParserLexparserIntTaggedWord, initWithNSString_withNSString_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_, wordString, tagString, wordIndex, tagIndex)
}

EduStanfordNlpParserLexparserIntTaggedWord *create_EduStanfordNlpParserLexparserIntTaggedWord_initWithNSString_withNSString_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(NSString *wordString, NSString *tagString, id<EduStanfordNlpUtilIndex> wordIndex, id<EduStanfordNlpUtilIndex> tagIndex) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpParserLexparserIntTaggedWord, initWithNSString_withNSString_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_, wordString, tagString, wordIndex, tagIndex)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpParserLexparserIntTaggedWord)
