//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/parser/lexparser/Options.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/parser/lexparser/EnglishTreebankParserParams.h"
#include "edu/stanford/nlp/parser/lexparser/Options.h"
#include "edu/stanford/nlp/parser/lexparser/TestOptions.h"
#include "edu/stanford/nlp/parser/lexparser/TrainOptions.h"
#include "edu/stanford/nlp/parser/lexparser/TreebankLangParserParams.h"
#include "edu/stanford/nlp/trees/CompositeTreeTransformer.h"
#include "edu/stanford/nlp/trees/TreeTransformer.h"
#include "edu/stanford/nlp/trees/TreebankLanguagePack.h"
#include "edu/stanford/nlp/util/Generics.h"
#include "edu/stanford/nlp/util/ReflectionLoading.h"
#include "edu/stanford/nlp/util/StringUtils.h"
#include "java/io/BufferedReader.h"
#include "java/io/FileOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/ObjectInputStream.h"
#include "java/io/PrintStream.h"
#include "java/io/PrintWriter.h"
#include "java/io/Writer.h"
#include "java/lang/Boolean.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"
#include "java/util/Properties.h"
#include "java/util/Set.h"
#include "java/util/function/Function.h"

@interface EduStanfordNlpParserLexparserOptions ()

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inArg;

@end

inline jlong EduStanfordNlpParserLexparserOptions_get_serialVersionUID();
#define EduStanfordNlpParserLexparserOptions_serialVersionUID 4LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpParserLexparserOptions, serialVersionUID, jlong)

inline jlong EduStanfordNlpParserLexparserOptions_LexOptions_get_serialVersionUID();
#define EduStanfordNlpParserLexparserOptions_LexOptions_serialVersionUID 2805351374506855632LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpParserLexparserOptions_LexOptions, serialVersionUID, jlong)

inline IOSObjectArray *EduStanfordNlpParserLexparserOptions_LexOptions_get_params();
static IOSObjectArray *EduStanfordNlpParserLexparserOptions_LexOptions_params;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpParserLexparserOptions_LexOptions, params, IOSObjectArray *)

@implementation EduStanfordNlpParserLexparserOptions

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpParserLexparserOptions_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithEduStanfordNlpParserLexparserTreebankLangParserParams:(id<EduStanfordNlpParserLexparserTreebankLangParserParams>)tlpParams {
  EduStanfordNlpParserLexparserOptions_initWithEduStanfordNlpParserLexparserTreebankLangParserParams_(self, tlpParams);
  return self;
}

- (void)setOptionsWithNSStringArray:(IOSObjectArray *)flags {
  [self setOptionsWithNSStringArray:flags withInt:0 withInt:((IOSObjectArray *) nil_chk(flags))->size_];
}

- (void)setOptionsWithNSStringArray:(IOSObjectArray *)flags
                            withInt:(jint)startIndex
                            withInt:(jint)endIndexPlusOne {
  for (jint i = startIndex; i < endIndexPlusOne; ) {
    i = [self setOptionWithNSStringArray:flags withInt:i];
  }
}

- (void)setOptionsOrWarnWithNSStringArray:(IOSObjectArray *)flags {
  [self setOptionsOrWarnWithNSStringArray:flags withInt:0 withInt:((IOSObjectArray *) nil_chk(flags))->size_];
}

- (void)setOptionsOrWarnWithNSStringArray:(IOSObjectArray *)flags
                                  withInt:(jint)startIndex
                                  withInt:(jint)endIndexPlusOne {
  for (jint i = startIndex; i < endIndexPlusOne; ) {
    i = [self setOptionOrWarnWithNSStringArray:flags withInt:i];
  }
}

- (jint)setOptionOrWarnWithNSStringArray:(IOSObjectArray *)flags
                                 withInt:(jint)i {
  jint j = [self setOptionFlagWithNSStringArray:flags withInt:i];
  if (j == i) {
    j = [((id<EduStanfordNlpParserLexparserTreebankLangParserParams>) nil_chk(tlpParams_)) setOptionFlagWithNSStringArray:flags withInt:i];
  }
  if (j == i) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$", @"WARNING! lexparser.Options: Unknown option ignored: ", IOSObjectArray_Get(nil_chk(flags), i))];
    j++;
  }
  return j;
}

- (jint)setOptionWithNSStringArray:(IOSObjectArray *)flags
                           withInt:(jint)i {
  jint j = [self setOptionFlagWithNSStringArray:flags withInt:i];
  if (j == i) {
    j = [((id<EduStanfordNlpParserLexparserTreebankLangParserParams>) nil_chk(tlpParams_)) setOptionFlagWithNSStringArray:flags withInt:i];
  }
  if (j == i) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Unknown option: ", IOSObjectArray_Get(nil_chk(flags), i)));
  }
  return j;
}

- (jint)setOptionFlagWithNSStringArray:(IOSObjectArray *)args
                               withInt:(jint)i {
  if ([((NSString *) nil_chk(IOSObjectArray_Get(nil_chk(args), i))) equalsIgnoreCase:@"-PCFG"]) {
    doDep_ = false;
    doPCFG_ = true;
    i++;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-dep"]) {
    doDep_ = true;
    doPCFG_ = false;
    i++;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-factored"]) {
    doDep_ = true;
    doPCFG_ = true;
    ((EduStanfordNlpParserLexparserTestOptions *) nil_chk(testOptions_))->useFastFactored_ = false;
    i++;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-fastFactored"]) {
    doDep_ = true;
    doPCFG_ = true;
    ((EduStanfordNlpParserLexparserTestOptions *) nil_chk(testOptions_))->useFastFactored_ = true;
    i++;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-noRecoveryTagging"]) {
    ((EduStanfordNlpParserLexparserTestOptions *) nil_chk(testOptions_))->noRecoveryTagging_ = true;
    i++;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-useLexiconToScoreDependencyPwGt"]) {
    ((EduStanfordNlpParserLexparserTestOptions *) nil_chk(testOptions_))->useLexiconToScoreDependencyPwGt_ = true;
    i++;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-useSmoothTagProjection"]) {
    useSmoothTagProjection_ = true;
    i++;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-useUnigramWordSmoothing"]) {
    useUnigramWordSmoothing_ = true;
    i++;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-useNonProjectiveDependencyParser"]) {
    ((EduStanfordNlpParserLexparserTestOptions *) nil_chk(testOptions_))->useNonProjectiveDependencyParser_ = true;
    i++;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-maxLength"] && (i + 1 < args->size_)) {
    ((EduStanfordNlpParserLexparserTestOptions *) nil_chk(testOptions_))->maxLength_ = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, i + 1));
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-MAX_ITEMS"] && (i + 1 < args->size_)) {
    ((EduStanfordNlpParserLexparserTestOptions *) nil_chk(testOptions_))->MAX_ITEMS_ = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, i + 1));
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-trainLength"] && (i + 1 < args->size_)) {
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->trainLengthLimit_ = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, i + 1));
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-lengthNormalization"]) {
    ((EduStanfordNlpParserLexparserTestOptions *) nil_chk(testOptions_))->lengthNormalization_ = true;
    i++;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-iterativeCKY"]) {
    ((EduStanfordNlpParserLexparserTestOptions *) nil_chk(testOptions_))->iterativeCKY_ = true;
    i++;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-vMarkov"] && (i + 1 < args->size_)) {
    jint order = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, i + 1));
    if (order <= 1) {
      ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->PA_ = false;
      trainOptions_->gPA_ = false;
    }
    else if (order == 2) {
      ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->PA_ = true;
      trainOptions_->gPA_ = false;
    }
    else if (order >= 3) {
      ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->PA_ = true;
      trainOptions_->gPA_ = true;
    }
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-vSelSplitCutOff"] && (i + 1 < args->size_)) {
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->selectiveSplitCutOff_ = JavaLangDouble_parseDoubleWithNSString_(IOSObjectArray_Get(args, i + 1));
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->selectiveSplit_ = (trainOptions_->selectiveSplitCutOff_ > 0.0);
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-vSelPostSplitCutOff"] && (i + 1 < args->size_)) {
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->selectivePostSplitCutOff_ = JavaLangDouble_parseDoubleWithNSString_(IOSObjectArray_Get(args, i + 1));
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->selectivePostSplit_ = (trainOptions_->selectivePostSplitCutOff_ > 0.0);
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-deleteSplitters"] && (i + 1 < args->size_)) {
    IOSObjectArray *toDel = [((NSString *) nil_chk(IOSObjectArray_Get(args, i + 1))) split:@" *, *"];
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->deleteSplitters_ = EduStanfordNlpUtilGenerics_newHashSetWithJavaUtilCollection_(JavaUtilArrays_asListWithNSObjectArray_(toDel));
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-postSplitWithBaseCategory"]) {
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->postSplitWithBaseCategory_ = true;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-vPostMarkov"] && (i + 1 < args->size_)) {
    jint order = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, i + 1));
    if (order <= 1) {
      ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->postPA_ = false;
      trainOptions_->postGPA_ = false;
    }
    else if (order == 2) {
      ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->postPA_ = true;
      trainOptions_->postGPA_ = false;
    }
    else if (order >= 3) {
      ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->postPA_ = true;
      trainOptions_->postGPA_ = true;
    }
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-hMarkov"] && (i + 1 < args->size_)) {
    jint order = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, i + 1));
    if (order >= 0) {
      ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->markovOrder_ = order;
      trainOptions_->markovFactor_ = true;
    }
    else {
      ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->markovFactor_ = false;
    }
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-distanceBins"] && (i + 1 < args->size_)) {
    jint numBins = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, i + 1));
    if (numBins <= 1) {
      distance_ = false;
    }
    else if (numBins == 4) {
      distance_ = true;
      coarseDistance_ = true;
    }
    else if (numBins == 5) {
      distance_ = true;
      coarseDistance_ = false;
    }
    else {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Invalid value for -distanceBin: ", IOSObjectArray_Get(args, i + 1)));
    }
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-noStop"]) {
    genStop_ = false;
    i++;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-nonDirectional"]) {
    directional_ = false;
    i++;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-depWeight"] && (i + 1 < args->size_)) {
    ((EduStanfordNlpParserLexparserTestOptions *) nil_chk(testOptions_))->depWeight_ = JavaLangDouble_parseDoubleWithNSString_(IOSObjectArray_Get(args, i + 1));
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-printPCFGkBest"] && (i + 1 < args->size_)) {
    ((EduStanfordNlpParserLexparserTestOptions *) nil_chk(testOptions_))->printPCFGkBest_ = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, i + 1));
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-evalPCFGkBest"] && (i + 1 < args->size_)) {
    ((EduStanfordNlpParserLexparserTestOptions *) nil_chk(testOptions_))->evalPCFGkBest_ = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, i + 1));
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-printFactoredKGood"] && (i + 1 < args->size_)) {
    ((EduStanfordNlpParserLexparserTestOptions *) nil_chk(testOptions_))->printFactoredKGood_ = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, i + 1));
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-smoothTagsThresh"] && (i + 1 < args->size_)) {
    ((EduStanfordNlpParserLexparserOptions_LexOptions *) nil_chk(lexOptions_))->smoothInUnknownsThreshold_ = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, i + 1));
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-unseenSmooth"] && (i + 1 < args->size_)) {
    ((EduStanfordNlpParserLexparserTestOptions *) nil_chk(testOptions_))->unseenSmooth_ = JavaLangDouble_parseDoubleWithNSString_(IOSObjectArray_Get(args, i + 1));
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-fractionBeforeUnseenCounting"] && (i + 1 < args->size_)) {
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->fractionBeforeUnseenCounting_ = JavaLangDouble_parseDoubleWithNSString_(IOSObjectArray_Get(args, i + 1));
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-hSelSplitThresh"] && (i + 1 < args->size_)) {
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->HSEL_CUT_ = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, i + 1));
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->hSelSplit_ = (trainOptions_->HSEL_CUT_ > 0);
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-nohSelSplit"]) {
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->hSelSplit_ = false;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-tagPA"]) {
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->tagPA_ = true;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-noTagPA"]) {
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->tagPA_ = false;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-tagSelSplitCutOff"] && (i + 1 < args->size_)) {
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->tagSelectiveSplitCutOff_ = JavaLangDouble_parseDoubleWithNSString_(IOSObjectArray_Get(args, i + 1));
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->tagSelectiveSplit_ = (trainOptions_->tagSelectiveSplitCutOff_ > 0.0);
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-tagSelPostSplitCutOff"] && (i + 1 < args->size_)) {
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->tagSelectivePostSplitCutOff_ = JavaLangDouble_parseDoubleWithNSString_(IOSObjectArray_Get(args, i + 1));
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->tagSelectivePostSplit_ = (trainOptions_->tagSelectivePostSplitCutOff_ > 0.0);
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-noTagSplit"]) {
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->noTagSplit_ = true;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-uwm"] && (i + 1 < args->size_)) {
    ((EduStanfordNlpParserLexparserOptions_LexOptions *) nil_chk(lexOptions_))->useUnknownWordSignatures_ = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, i + 1));
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-unknownSuffixSize"] && (i + 1 < args->size_)) {
    ((EduStanfordNlpParserLexparserOptions_LexOptions *) nil_chk(lexOptions_))->unknownSuffixSize_ = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, i + 1));
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-unknownPrefixSize"] && (i + 1 < args->size_)) {
    ((EduStanfordNlpParserLexparserOptions_LexOptions *) nil_chk(lexOptions_))->unknownPrefixSize_ = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, i + 1));
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-uwModelTrainer"] && (i + 1 < args->size_)) {
    ((EduStanfordNlpParserLexparserOptions_LexOptions *) nil_chk(lexOptions_))->uwModelTrainer_ = IOSObjectArray_Get(args, i + 1);
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-openClassThreshold"] && (i + 1 < args->size_)) {
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->openClassTypesThreshold_ = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, i + 1));
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-unary"] && i + 1 < args->size_) {
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->markUnary_ = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, i + 1));
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-unaryTags"]) {
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->markUnaryTags_ = true;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-mutate"]) {
    ((EduStanfordNlpParserLexparserOptions_LexOptions *) nil_chk(lexOptions_))->smartMutation_ = true;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-useUnicodeType"]) {
    ((EduStanfordNlpParserLexparserOptions_LexOptions *) nil_chk(lexOptions_))->useUnicodeType_ = true;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-rightRec"]) {
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->rightRec_ = true;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-noRightRec"]) {
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->rightRec_ = false;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-preTag"]) {
    ((EduStanfordNlpParserLexparserTestOptions *) nil_chk(testOptions_))->preTag_ = true;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-forceTags"]) {
    ((EduStanfordNlpParserLexparserTestOptions *) nil_chk(testOptions_))->forceTags_ = true;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-taggerSerializedFile"]) {
    ((EduStanfordNlpParserLexparserTestOptions *) nil_chk(testOptions_))->taggerSerializedFile_ = IOSObjectArray_Get(args, i + 1);
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-forceTagBeginnings"]) {
    ((EduStanfordNlpParserLexparserTestOptions *) nil_chk(testOptions_))->forceTagBeginnings_ = true;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-noFunctionalForcing"]) {
    ((EduStanfordNlpParserLexparserTestOptions *) nil_chk(testOptions_))->noFunctionalForcing_ = true;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-scTags"]) {
    dcTags_ = false;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-dcTags"]) {
    dcTags_ = true;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-basicCategoryTagsInDependencyGrammar"]) {
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->basicCategoryTagsInDependencyGrammar_ = true;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-evalb"]) {
    ((EduStanfordNlpParserLexparserTestOptions *) nil_chk(testOptions_))->evalb_ = true;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-v"] || [((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-verbose"]) {
    ((EduStanfordNlpParserLexparserTestOptions *) nil_chk(testOptions_))->verbose_ = true;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-outputFilesDirectory"] && i + 1 < args->size_) {
    ((EduStanfordNlpParserLexparserTestOptions *) nil_chk(testOptions_))->outputFilesDirectory_ = IOSObjectArray_Get(args, i + 1);
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-outputFilesExtension"] && i + 1 < args->size_) {
    ((EduStanfordNlpParserLexparserTestOptions *) nil_chk(testOptions_))->outputFilesExtension_ = IOSObjectArray_Get(args, i + 1);
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-outputFilesPrefix"] && i + 1 < args->size_) {
    ((EduStanfordNlpParserLexparserTestOptions *) nil_chk(testOptions_))->outputFilesPrefix_ = IOSObjectArray_Get(args, i + 1);
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-outputkBestEquivocation"] && i + 1 < args->size_) {
    ((EduStanfordNlpParserLexparserTestOptions *) nil_chk(testOptions_))->outputkBestEquivocation_ = IOSObjectArray_Get(args, i + 1);
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-writeOutputFiles"]) {
    ((EduStanfordNlpParserLexparserTestOptions *) nil_chk(testOptions_))->writeOutputFiles_ = true;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-printAllBestParses"]) {
    ((EduStanfordNlpParserLexparserTestOptions *) nil_chk(testOptions_))->printAllBestParses_ = true;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-outputTreeFormat"] || [((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-outputFormat"]) {
    ((EduStanfordNlpParserLexparserTestOptions *) nil_chk(testOptions_))->outputFormat_ = IOSObjectArray_Get(args, i + 1);
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-outputTreeFormatOptions"] || [((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-outputFormatOptions"]) {
    ((EduStanfordNlpParserLexparserTestOptions *) nil_chk(testOptions_))->outputFormatOptions_ = IOSObjectArray_Get(args, i + 1);
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-addMissingFinalPunctuation"]) {
    ((EduStanfordNlpParserLexparserTestOptions *) nil_chk(testOptions_))->addMissingFinalPunctuation_ = true;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-flexiTag"]) {
    ((EduStanfordNlpParserLexparserOptions_LexOptions *) nil_chk(lexOptions_))->flexiTag_ = true;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-lexiTag"]) {
    ((EduStanfordNlpParserLexparserOptions_LexOptions *) nil_chk(lexOptions_))->flexiTag_ = false;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-useSignatureForKnownSmoothing"]) {
    ((EduStanfordNlpParserLexparserOptions_LexOptions *) nil_chk(lexOptions_))->useSignatureForKnownSmoothing_ = true;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-wordClassesFile"]) {
    ((EduStanfordNlpParserLexparserOptions_LexOptions *) nil_chk(lexOptions_))->wordClassesFile_ = IOSObjectArray_Get(args, i + 1);
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-compactGrammar"]) {
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->compactGrammar_ = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, i + 1));
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-markFinalStates"]) {
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->markFinalStates_ = [((NSString *) nil_chk(IOSObjectArray_Get(args, i + 1))) equalsIgnoreCase:@"true"];
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-leftToRight"]) {
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->leftToRight_ = [((NSString *) nil_chk(IOSObjectArray_Get(args, i + 1))) isEqual:@"true"];
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-cnf"]) {
    forceCNF_ = true;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-smoothRules"]) {
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->ruleSmoothing_ = true;
    trainOptions_->ruleSmoothingAlpha_ = [((JavaLangDouble *) nil_chk(JavaLangDouble_valueOfWithNSString_(IOSObjectArray_Get(args, i + 1)))) doubleValue];
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-nodePrune"] && i + 1 < args->size_) {
    nodePrune_ = [((NSString *) nil_chk(IOSObjectArray_Get(args, i + 1))) equalsIgnoreCase:@"true"];
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-noDoRecovery"]) {
    ((EduStanfordNlpParserLexparserTestOptions *) nil_chk(testOptions_))->doRecovery_ = false;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-acl03chinese"]) {
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->markovOrder_ = 1;
    trainOptions_->markovFactor_ = true;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-wordFunction"]) {
    wordFunction_ = EduStanfordNlpUtilReflectionLoading_loadByReflectionWithNSString_withNSObjectArray_(IOSObjectArray_Get(args, i + 1), [IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]);
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-acl03pcfg"]) {
    doDep_ = false;
    doPCFG_ = true;
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->markUnary_ = 1;
    trainOptions_->PA_ = true;
    trainOptions_->gPA_ = false;
    trainOptions_->tagPA_ = true;
    trainOptions_->tagSelectiveSplit_ = false;
    trainOptions_->rightRec_ = true;
    trainOptions_->selectiveSplit_ = true;
    trainOptions_->selectiveSplitCutOff_ = 400.0;
    trainOptions_->markovFactor_ = true;
    trainOptions_->markovOrder_ = 2;
    trainOptions_->hSelSplit_ = true;
    ((EduStanfordNlpParserLexparserOptions_LexOptions *) nil_chk(lexOptions_))->useUnknownWordSignatures_ = 2;
    lexOptions_->flexiTag_ = true;
    dcTags_ = false;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-jenny"]) {
    doDep_ = false;
    doPCFG_ = true;
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->markUnary_ = 1;
    trainOptions_->PA_ = false;
    trainOptions_->gPA_ = false;
    trainOptions_->tagPA_ = false;
    trainOptions_->tagSelectiveSplit_ = false;
    trainOptions_->rightRec_ = true;
    trainOptions_->selectiveSplit_ = false;
    trainOptions_->markovFactor_ = false;
    trainOptions_->hSelSplit_ = false;
    ((EduStanfordNlpParserLexparserOptions_LexOptions *) nil_chk(lexOptions_))->useUnknownWordSignatures_ = 2;
    lexOptions_->flexiTag_ = true;
    dcTags_ = false;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-goodPCFG"]) {
    doDep_ = false;
    doPCFG_ = true;
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->markUnary_ = 1;
    trainOptions_->PA_ = true;
    trainOptions_->gPA_ = false;
    trainOptions_->tagPA_ = true;
    trainOptions_->tagSelectiveSplit_ = false;
    trainOptions_->rightRec_ = true;
    trainOptions_->selectiveSplit_ = true;
    trainOptions_->selectiveSplitCutOff_ = 400.0;
    trainOptions_->markovFactor_ = true;
    trainOptions_->markovOrder_ = 2;
    trainOptions_->hSelSplit_ = true;
    ((EduStanfordNlpParserLexparserOptions_LexOptions *) nil_chk(lexOptions_))->useUnknownWordSignatures_ = 2;
    lexOptions_->flexiTag_ = true;
    dcTags_ = false;
    IOSObjectArray *delSplit = [IOSObjectArray newArrayWithObjects:(id[]){ @"-deleteSplitters", @"VP^NP,VP^VP,VP^SINV,VP^SQ" } count:2 type:NSString_class_()];
    if ([self setOptionFlagWithNSStringArray:delSplit withInt:0] != 2) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"Error processing deleteSplitters"];
    }
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-linguisticPCFG"]) {
    doDep_ = false;
    doPCFG_ = true;
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->markUnary_ = 1;
    trainOptions_->PA_ = true;
    trainOptions_->gPA_ = false;
    trainOptions_->tagPA_ = true;
    trainOptions_->tagSelectiveSplit_ = false;
    trainOptions_->rightRec_ = false;
    trainOptions_->selectiveSplit_ = true;
    trainOptions_->selectiveSplitCutOff_ = 400.0;
    trainOptions_->markovFactor_ = true;
    trainOptions_->markovOrder_ = 2;
    trainOptions_->hSelSplit_ = true;
    ((EduStanfordNlpParserLexparserOptions_LexOptions *) nil_chk(lexOptions_))->useUnknownWordSignatures_ = 5;
    lexOptions_->flexiTag_ = false;
    dcTags_ = false;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-ijcai03"]) {
    doDep_ = true;
    doPCFG_ = true;
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->markUnary_ = 0;
    trainOptions_->PA_ = true;
    trainOptions_->gPA_ = false;
    trainOptions_->tagPA_ = false;
    trainOptions_->tagSelectiveSplit_ = false;
    trainOptions_->rightRec_ = false;
    trainOptions_->selectiveSplit_ = true;
    trainOptions_->selectiveSplitCutOff_ = 300.0;
    trainOptions_->markovFactor_ = true;
    trainOptions_->markovOrder_ = 2;
    trainOptions_->hSelSplit_ = true;
    trainOptions_->compactGrammar_ = 0;
    ((EduStanfordNlpParserLexparserOptions_LexOptions *) nil_chk(lexOptions_))->useUnknownWordSignatures_ = 2;
    lexOptions_->flexiTag_ = false;
    dcTags_ = true;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-goodFactored"]) {
    doDep_ = true;
    doPCFG_ = true;
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->markUnary_ = 0;
    trainOptions_->PA_ = true;
    trainOptions_->gPA_ = false;
    trainOptions_->tagPA_ = false;
    trainOptions_->tagSelectiveSplit_ = false;
    trainOptions_->rightRec_ = false;
    trainOptions_->selectiveSplit_ = true;
    trainOptions_->selectiveSplitCutOff_ = 300.0;
    trainOptions_->markovFactor_ = true;
    trainOptions_->markovOrder_ = 2;
    trainOptions_->hSelSplit_ = true;
    trainOptions_->compactGrammar_ = 0;
    ((EduStanfordNlpParserLexparserOptions_LexOptions *) nil_chk(lexOptions_))->useUnknownWordSignatures_ = 5;
    lexOptions_->flexiTag_ = false;
    dcTags_ = true;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-chineseFactored"]) {
    dcTags_ = false;
    ((EduStanfordNlpParserLexparserOptions_LexOptions *) nil_chk(lexOptions_))->useUnicodeType_ = true;
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->markovOrder_ = 2;
    trainOptions_->hSelSplit_ = true;
    trainOptions_->markovFactor_ = true;
    trainOptions_->HSEL_CUT_ = 50;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-arabicFactored"]) {
    doDep_ = true;
    doPCFG_ = true;
    dcTags_ = false;
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->markovFactor_ = true;
    trainOptions_->markovOrder_ = 2;
    trainOptions_->hSelSplit_ = true;
    trainOptions_->HSEL_CUT_ = 75;
    trainOptions_->PA_ = true;
    trainOptions_->gPA_ = false;
    trainOptions_->selectiveSplit_ = true;
    trainOptions_->selectiveSplitCutOff_ = 300.0;
    trainOptions_->markUnary_ = 1;
    ((EduStanfordNlpParserLexparserOptions_LexOptions *) nil_chk(lexOptions_))->useUnknownWordSignatures_ = 9;
    lexOptions_->unknownPrefixSize_ = 1;
    lexOptions_->unknownSuffixSize_ = 1;
    ((EduStanfordNlpParserLexparserTestOptions *) nil_chk(testOptions_))->MAX_ITEMS_ = 500000;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-frenchFactored"]) {
    doDep_ = true;
    doPCFG_ = true;
    dcTags_ = false;
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->markovFactor_ = true;
    trainOptions_->markovOrder_ = 2;
    trainOptions_->hSelSplit_ = true;
    trainOptions_->HSEL_CUT_ = 75;
    trainOptions_->PA_ = true;
    trainOptions_->gPA_ = false;
    trainOptions_->selectiveSplit_ = true;
    trainOptions_->selectiveSplitCutOff_ = 300.0;
    trainOptions_->markUnary_ = 0;
    ((EduStanfordNlpParserLexparserOptions_LexOptions *) nil_chk(lexOptions_))->useUnknownWordSignatures_ = 1;
    lexOptions_->unknownPrefixSize_ = 1;
    lexOptions_->unknownSuffixSize_ = 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-chinesePCFG"]) {
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->markovOrder_ = 2;
    trainOptions_->markovFactor_ = true;
    trainOptions_->HSEL_CUT_ = 5;
    trainOptions_->PA_ = true;
    trainOptions_->gPA_ = true;
    trainOptions_->selectiveSplit_ = false;
    doDep_ = false;
    doPCFG_ = true;
    dcTags_ = false;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-printTT"] && (i + 1 < args->size_)) {
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->printTreeTransformations_ = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, i + 1));
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-printAnnotatedRuleCounts"]) {
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->printAnnotatedRuleCounts_ = true;
    i++;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-printAnnotatedStateCounts"]) {
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->printAnnotatedStateCounts_ = true;
    i++;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-printAnnotated"] && (i + 1 < args->size_)) {
    @try {
      ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->printAnnotatedPW_ = [((id<EduStanfordNlpParserLexparserTreebankLangParserParams>) nil_chk(tlpParams_)) pwWithJavaIoOutputStream:new_JavaIoFileOutputStream_initWithNSString_(IOSObjectArray_Get(args, i + 1))];
    }
    @catch (JavaIoIOException *ioe) {
      ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->printAnnotatedPW_ = nil;
    }
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-printBinarized"] && (i + 1 < args->size_)) {
    @try {
      ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->printBinarizedPW_ = [((id<EduStanfordNlpParserLexparserTreebankLangParserParams>) nil_chk(tlpParams_)) pwWithJavaIoOutputStream:new_JavaIoFileOutputStream_initWithNSString_(IOSObjectArray_Get(args, i + 1))];
    }
    @catch (JavaIoIOException *ioe) {
      ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->printBinarizedPW_ = nil;
    }
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-printStates"]) {
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->printStates_ = true;
    i++;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-preTransformer"] && (i + 1 < args->size_)) {
    IOSObjectArray *classes = [((NSString *) nil_chk(IOSObjectArray_Get(args, i + 1))) split:@","];
    i += 2;
    if (((IOSObjectArray *) nil_chk(classes))->size_ == 1) {
      ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->preTransformer_ = EduStanfordNlpUtilReflectionLoading_loadByReflectionWithNSString_withNSObjectArray_(IOSObjectArray_Get(classes, 0), [IOSObjectArray newArrayWithObjects:(id[]){ self } count:1 type:NSObject_class_()]);
    }
    else if (classes->size_ > 1) {
      EduStanfordNlpTreesCompositeTreeTransformer *composite = new_EduStanfordNlpTreesCompositeTreeTransformer_init();
      ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->preTransformer_ = composite;
      {
        IOSObjectArray *a__ = classes;
        NSString * const *b__ = a__->buffer_;
        NSString * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          NSString *clazz = *b__++;
          id<EduStanfordNlpTreesTreeTransformer> transformer = EduStanfordNlpUtilReflectionLoading_loadByReflectionWithNSString_withNSObjectArray_(clazz, [IOSObjectArray newArrayWithObjects:(id[]){ self } count:1 type:NSObject_class_()]);
          [composite addTransformerWithEduStanfordNlpTreesTreeTransformer:transformer];
        }
      }
    }
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-taggedFiles"] && (i + 1 < args->size_)) {
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->taggedFiles_ = IOSObjectArray_Get(args, i + 1);
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-predictSplits"]) {
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->predictSplits_ = true;
    trainOptions_->compactGrammar_ = 0;
    i++;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-splitCount"]) {
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->splitCount_ = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, i + 1));
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-splitRecombineRate"]) {
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->splitRecombineRate_ = JavaLangDouble_parseDoubleWithNSString_(IOSObjectArray_Get(args, i + 1));
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-trainingThreads"] || [((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-nThreads"]) {
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->trainingThreads_ = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, i + 1));
    ((EduStanfordNlpParserLexparserTestOptions *) nil_chk(testOptions_))->testingThreads_ = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, i + 1));
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-testingThreads"]) {
    ((EduStanfordNlpParserLexparserTestOptions *) nil_chk(testOptions_))->testingThreads_ = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, i + 1));
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-evals"]) {
    ((EduStanfordNlpParserLexparserTestOptions *) nil_chk(testOptions_))->evals_ = EduStanfordNlpUtilStringUtils_stringToPropertiesWithNSString_withJavaUtilProperties_(IOSObjectArray_Get(args, i + 1), testOptions_->evals_);
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-fastFactoredCandidateMultiplier"]) {
    ((EduStanfordNlpParserLexparserTestOptions *) nil_chk(testOptions_))->fastFactoredCandidateMultiplier_ = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, i + 1));
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-fastFactoredCandidateAddend"]) {
    ((EduStanfordNlpParserLexparserTestOptions *) nil_chk(testOptions_))->fastFactoredCandidateAddend_ = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, i + 1));
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-quietEvaluation"]) {
    ((EduStanfordNlpParserLexparserTestOptions *) nil_chk(testOptions_))->quietEvaluation_ = true;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-noquietEvaluation"]) {
    ((EduStanfordNlpParserLexparserTestOptions *) nil_chk(testOptions_))->quietEvaluation_ = false;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-simpleBinarizedLabels"]) {
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->simpleBinarizedLabels_ = true;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-noRebinarization"]) {
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->noRebinarization_ = true;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-dvKBest"]) {
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->dvKBest_ = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, i + 1));
    rerankerKBest_ = ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->dvKBest_;
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-regCost"]) {
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->regCost_ = JavaLangDouble_parseDoubleWithNSString_(IOSObjectArray_Get(args, i + 1));
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-dvIterations"] || [((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-trainingIterations"]) {
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->trainingIterations_ = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, i + 1));
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-stalledIterationLimit"]) {
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->stalledIterationLimit_ = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, i + 1));
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-dvBatchSize"] || [((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-batchSize"]) {
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->batchSize_ = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, i + 1));
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-qnIterationsPerBatch"]) {
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->qnIterationsPerBatch_ = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, i + 1));
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-qnEstimates"]) {
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->qnEstimates_ = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, i + 1));
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-qnTolerance"]) {
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->qnTolerance_ = JavaLangDouble_parseDoubleWithNSString_(IOSObjectArray_Get(args, i + 1));
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-debugOutputFrequency"]) {
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->debugOutputFrequency_ = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, i + 1));
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-maxTrainTimeSeconds"]) {
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->maxTrainTimeSeconds_ = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, i + 1));
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-dvSeed"] || [((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-randomSeed"]) {
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->randomSeed_ = JavaLangLong_parseLongWithNSString_(IOSObjectArray_Get(args, i + 1));
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-wordVectorFile"]) {
    ((EduStanfordNlpParserLexparserOptions_LexOptions *) nil_chk(lexOptions_))->wordVectorFile_ = IOSObjectArray_Get(args, i + 1);
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-numHid"]) {
    ((EduStanfordNlpParserLexparserOptions_LexOptions *) nil_chk(lexOptions_))->numHid_ = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, i + 1));
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-learningRate"]) {
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->learningRate_ = JavaLangDouble_parseDoubleWithNSString_(IOSObjectArray_Get(args, i + 1));
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-deltaMargin"]) {
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->deltaMargin_ = JavaLangDouble_parseDoubleWithNSString_(IOSObjectArray_Get(args, i + 1));
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-unknownNumberVector"]) {
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->unknownNumberVector_ = true;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-noUnknownNumberVector"]) {
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->unknownNumberVector_ = false;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-unknownDashedWordVectors"]) {
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->unknownDashedWordVectors_ = true;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-noUnknownDashedWordVectors"]) {
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->unknownDashedWordVectors_ = false;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-unknownCapsVector"]) {
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->unknownCapsVector_ = true;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-noUnknownCapsVector"]) {
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->unknownCapsVector_ = false;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-unknownChineseYearVector"]) {
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->unknownChineseYearVector_ = true;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-noUnknownChineseYearVector"]) {
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->unknownChineseYearVector_ = false;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-unknownChineseNumberVector"]) {
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->unknownChineseNumberVector_ = true;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-noUnknownChineseNumberVector"]) {
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->unknownChineseNumberVector_ = false;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-unknownChinesePercentVector"]) {
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->unknownChinesePercentVector_ = true;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-noUnknownChinesePercentVector"]) {
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->unknownChinesePercentVector_ = false;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-dvSimplifiedModel"]) {
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->dvSimplifiedModel_ = true;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-scalingForInit"]) {
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->scalingForInit_ = JavaLangDouble_parseDoubleWithNSString_(IOSObjectArray_Get(args, i + 1));
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-rerankerKBest"]) {
    rerankerKBest_ = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, i + 1));
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-baseParserWeight"]) {
    baseParserWeight_ = JavaLangDouble_parseDoubleWithNSString_(IOSObjectArray_Get(args, i + 1));
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-unkWord"]) {
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->unkWord_ = IOSObjectArray_Get(args, i + 1);
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-lowercaseWordVectors"]) {
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->lowercaseWordVectors_ = true;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-noLowercaseWordVectors"]) {
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->lowercaseWordVectors_ = false;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-transformMatrixType"]) {
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->transformMatrixType_ = EduStanfordNlpParserLexparserTrainOptions_TransformMatrixType_valueOfWithNSString_(IOSObjectArray_Get(args, i + 1));
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-useContextWords"]) {
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->useContextWords_ = true;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-noUseContextWords"]) {
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->useContextWords_ = false;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-trainWordVectors"]) {
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->trainWordVectors_ = true;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-noTrainWordVectors"]) {
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->trainWordVectors_ = false;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-markStrahler"]) {
    ((EduStanfordNlpParserLexparserTrainOptions *) nil_chk(trainOptions_))->markStrahler_ = true;
    i += 1;
  }
  return i;
}

- (id<EduStanfordNlpTreesTreebankLanguagePack>)langpack {
  return [((id<EduStanfordNlpParserLexparserTreebankLangParserParams>) nil_chk(tlpParams_)) treebankLanguagePack];
}

- (EduStanfordNlpParserLexparserTrainOptions *)newTrainOptions {
  return new_EduStanfordNlpParserLexparserTrainOptions_init();
}

- (EduStanfordNlpParserLexparserTestOptions *)newTestOptions {
  return new_EduStanfordNlpParserLexparserTestOptions_init();
}

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inArg {
  [((JavaIoObjectInputStream *) nil_chk(inArg)) defaultReadObject];
  testOptions_ = [self newTestOptions];
}

- (void)display {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"Options parameters:"];
  [self writeDataWithJavaIoWriter:new_JavaIoPrintWriter_initWithJavaIoOutputStream_(JreLoadStatic(JavaLangSystem, err))];
}

- (void)writeDataWithJavaIoWriter:(JavaIoWriter *)w {
  JavaIoPrintWriter *out = new_JavaIoPrintWriter_initWithJavaIoWriter_(w);
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  (void) [sb appendWithNSString:[((EduStanfordNlpParserLexparserOptions_LexOptions *) nil_chk(lexOptions_)) description]];
  (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"parserParams "])) appendWithNSString:[[((id<EduStanfordNlpParserLexparserTreebankLangParserParams>) nil_chk(tlpParams_)) getClass] getName]])) appendWithNSString:@"\n"];
  (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"forceCNF "])) appendWithBoolean:forceCNF_])) appendWithNSString:@"\n"];
  (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"doPCFG "])) appendWithBoolean:doPCFG_])) appendWithNSString:@"\n"];
  (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"doDep "])) appendWithBoolean:doDep_])) appendWithNSString:@"\n"];
  (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"freeDependencies "])) appendWithBoolean:freeDependencies_])) appendWithNSString:@"\n"];
  (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"directional "])) appendWithBoolean:directional_])) appendWithNSString:@"\n"];
  (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"genStop "])) appendWithBoolean:genStop_])) appendWithNSString:@"\n"];
  (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"distance "])) appendWithBoolean:distance_])) appendWithNSString:@"\n"];
  (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"coarseDistance "])) appendWithBoolean:coarseDistance_])) appendWithNSString:@"\n"];
  (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"dcTags "])) appendWithBoolean:dcTags_])) appendWithNSString:@"\n"];
  (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"nPrune "])) appendWithBoolean:nodePrune_])) appendWithNSString:@"\n"];
  [out printWithNSString:[sb description]];
  [out flush];
}

- (void)readDataWithJavaIoBufferedReader:(JavaIoBufferedReader *)inArg {
  NSString *line, *value;
  [((EduStanfordNlpParserLexparserOptions_LexOptions *) nil_chk(lexOptions_)) readDataWithJavaIoBufferedReader:inArg];
  line = [((JavaIoBufferedReader *) nil_chk(inArg)) readLine];
  value = [((NSString *) nil_chk(line)) substring:[line indexOf:' '] + 1];
  @try {
    tlpParams_ = (id<EduStanfordNlpParserLexparserTreebankLangParserParams>) cast_check([((IOSClass *) nil_chk(IOSClass_forName_(value))) newInstance], EduStanfordNlpParserLexparserTreebankLangParserParams_class_());
  }
  @catch (JavaLangException *e) {
    JavaIoIOException *ioe = new_JavaIoIOException_initWithNSString_(JreStrcat("$$", @"Problem instantiating parserParams: ", line));
    (void) [ioe initCauseWithNSException:e];
    @throw ioe;
  }
  line = [inArg readLine];
  if ([((NSString *) nil_chk(line)) matches:@"^forceCNF.*"]) {
    value = [line substring:[line indexOf:' '] + 1];
    forceCNF_ = JavaLangBoolean_parseBooleanWithNSString_(value);
    line = [inArg readLine];
  }
  value = [((NSString *) nil_chk(line)) substring:[line indexOf:' '] + 1];
  doPCFG_ = JavaLangBoolean_parseBooleanWithNSString_(value);
  line = [inArg readLine];
  value = [((NSString *) nil_chk(line)) substring:[line indexOf:' '] + 1];
  doDep_ = JavaLangBoolean_parseBooleanWithNSString_(value);
  line = [inArg readLine];
  value = [((NSString *) nil_chk(line)) substring:[line indexOf:' '] + 1];
  freeDependencies_ = JavaLangBoolean_parseBooleanWithNSString_(value);
  line = [inArg readLine];
  value = [((NSString *) nil_chk(line)) substring:[line indexOf:' '] + 1];
  directional_ = JavaLangBoolean_parseBooleanWithNSString_(value);
  line = [inArg readLine];
  value = [((NSString *) nil_chk(line)) substring:[line indexOf:' '] + 1];
  genStop_ = JavaLangBoolean_parseBooleanWithNSString_(value);
  line = [inArg readLine];
  value = [((NSString *) nil_chk(line)) substring:[line indexOf:' '] + 1];
  distance_ = JavaLangBoolean_parseBooleanWithNSString_(value);
  line = [inArg readLine];
  value = [((NSString *) nil_chk(line)) substring:[line indexOf:' '] + 1];
  coarseDistance_ = JavaLangBoolean_parseBooleanWithNSString_(value);
  line = [inArg readLine];
  value = [((NSString *) nil_chk(line)) substring:[line indexOf:' '] + 1];
  dcTags_ = JavaLangBoolean_parseBooleanWithNSString_(value);
  line = [inArg readLine];
  if (![((NSString *) nil_chk(line)) matches:@"^nPrune.*"]) {
    @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$", @"Expected nPrune, found: ", line));
  }
  value = [line substring:[line indexOf:' '] + 1];
  nodePrune_ = JavaLangBoolean_parseBooleanWithNSString_(value);
  line = [inArg readLine];
  if (((jint) [((NSString *) nil_chk(line)) length]) != 0) {
    @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$", @"Expected blank line, found: ", line));
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 4, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 7, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 8, 6, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTreebankLanguagePack;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpParserLexparserTrainOptions;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpParserLexparserTestOptions;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 9, 10, 11, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, 16, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithEduStanfordNlpParserLexparserTreebankLangParserParams:);
  methods[2].selector = @selector(setOptionsWithNSStringArray:);
  methods[3].selector = @selector(setOptionsWithNSStringArray:withInt:withInt:);
  methods[4].selector = @selector(setOptionsOrWarnWithNSStringArray:);
  methods[5].selector = @selector(setOptionsOrWarnWithNSStringArray:withInt:withInt:);
  methods[6].selector = @selector(setOptionOrWarnWithNSStringArray:withInt:);
  methods[7].selector = @selector(setOptionWithNSStringArray:withInt:);
  methods[8].selector = @selector(setOptionFlagWithNSStringArray:withInt:);
  methods[9].selector = @selector(langpack);
  methods[10].selector = @selector(newTrainOptions);
  methods[11].selector = @selector(newTestOptions);
  methods[12].selector = @selector(readObjectWithJavaIoObjectInputStream:);
  methods[13].selector = @selector(display);
  methods[14].selector = @selector(writeDataWithJavaIoWriter:);
  methods[15].selector = @selector(readDataWithJavaIoBufferedReader:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "lexOptions_", "LEduStanfordNlpParserLexparserOptions_LexOptions;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "tlpParams_", "LEduStanfordNlpParserLexparserTreebankLangParserParams;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "forceCNF_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "doPCFG_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "doDep_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "freeDependencies_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "directional_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "genStop_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "useSmoothTagProjection_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "useUnigramWordSmoothing_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "distance_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "coarseDistance_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "dcTags_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "nodePrune_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "trainOptions_", "LEduStanfordNlpParserLexparserTrainOptions;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "testOptions_", "LEduStanfordNlpParserLexparserTestOptions;", .constantValue.asLong = 0, 0x81, -1, -1, -1, -1 },
    { "wordFunction_", "LJavaUtilFunctionFunction;", .constantValue.asLong = 0, 0x1, -1, -1, 17, -1 },
    { "rerankerKBest_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "baseParserWeight_", "D", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpParserLexparserOptions_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpParserLexparserTreebankLangParserParams;", "setOptions", "[LNSString;", "[LNSString;II", "setOptionsOrWarn", "setOptionOrWarn", "[LNSString;I", "setOption", "setOptionFlag", "readObject", "LJavaIoObjectInputStream;", "LJavaIoIOException;LJavaLangClassNotFoundException;", "writeData", "LJavaIoWriter;", "readData", "LJavaIoBufferedReader;", "LJavaIoIOException;", "Ljava/util/function/Function<Ljava/lang/String;Ljava/lang/String;>;", "LEduStanfordNlpParserLexparserOptions_LexOptions;" };
  static const J2ObjcClassInfo _EduStanfordNlpParserLexparserOptions = { "Options", "edu.stanford.nlp.parser.lexparser", ptrTable, methods, fields, 7, 0x1, 16, 20, -1, 18, -1, -1, -1 };
  return &_EduStanfordNlpParserLexparserOptions;
}

@end

void EduStanfordNlpParserLexparserOptions_init(EduStanfordNlpParserLexparserOptions *self) {
  EduStanfordNlpParserLexparserOptions_initWithEduStanfordNlpParserLexparserTreebankLangParserParams_(self, new_EduStanfordNlpParserLexparserEnglishTreebankParserParams_init());
}

EduStanfordNlpParserLexparserOptions *new_EduStanfordNlpParserLexparserOptions_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpParserLexparserOptions, init)
}

EduStanfordNlpParserLexparserOptions *create_EduStanfordNlpParserLexparserOptions_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpParserLexparserOptions, init)
}

void EduStanfordNlpParserLexparserOptions_initWithEduStanfordNlpParserLexparserTreebankLangParserParams_(EduStanfordNlpParserLexparserOptions *self, id<EduStanfordNlpParserLexparserTreebankLangParserParams> tlpParams) {
  NSObject_init(self);
  self->lexOptions_ = new_EduStanfordNlpParserLexparserOptions_LexOptions_init();
  self->forceCNF_ = false;
  self->doPCFG_ = true;
  self->doDep_ = true;
  self->freeDependencies_ = false;
  self->directional_ = true;
  self->genStop_ = true;
  self->useSmoothTagProjection_ = false;
  self->useUnigramWordSmoothing_ = false;
  self->distance_ = true;
  self->coarseDistance_ = false;
  self->dcTags_ = true;
  self->nodePrune_ = false;
  self->trainOptions_ = [self newTrainOptions];
  self->testOptions_ = [self newTestOptions];
  self->wordFunction_ = nil;
  self->rerankerKBest_ = 100;
  self->baseParserWeight_ = 0.0;
  self->tlpParams_ = tlpParams;
}

EduStanfordNlpParserLexparserOptions *new_EduStanfordNlpParserLexparserOptions_initWithEduStanfordNlpParserLexparserTreebankLangParserParams_(id<EduStanfordNlpParserLexparserTreebankLangParserParams> tlpParams) {
  J2OBJC_NEW_IMPL(EduStanfordNlpParserLexparserOptions, initWithEduStanfordNlpParserLexparserTreebankLangParserParams_, tlpParams)
}

EduStanfordNlpParserLexparserOptions *create_EduStanfordNlpParserLexparserOptions_initWithEduStanfordNlpParserLexparserTreebankLangParserParams_(id<EduStanfordNlpParserLexparserTreebankLangParserParams> tlpParams) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpParserLexparserOptions, initWithEduStanfordNlpParserLexparserTreebankLangParserParams_, tlpParams)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpParserLexparserOptions)

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpParserLexparserOptions_LexOptions)

NSString *EduStanfordNlpParserLexparserOptions_LexOptions_DEFAULT_WORD_VECTOR_FILE = @"/scr/nlp/deeplearning/datasets/turian/embeddings-scaled.EMBEDDING_SIZE=25.txt";

@implementation EduStanfordNlpParserLexparserOptions_LexOptions

- (NSString *)description {
  return JreStrcat("$CIC$CIC$CZC$CZC$CIC$CIC$CZC$CZC$C$C", IOSObjectArray_Get(nil_chk(EduStanfordNlpParserLexparserOptions_LexOptions_params), 0), ' ', useUnknownWordSignatures_, 0x000a, IOSObjectArray_Get(EduStanfordNlpParserLexparserOptions_LexOptions_params, 1), ' ', smoothInUnknownsThreshold_, 0x000a, IOSObjectArray_Get(EduStanfordNlpParserLexparserOptions_LexOptions_params, 2), ' ', smartMutation_, 0x000a, IOSObjectArray_Get(EduStanfordNlpParserLexparserOptions_LexOptions_params, 3), ' ', useUnicodeType_, 0x000a, IOSObjectArray_Get(EduStanfordNlpParserLexparserOptions_LexOptions_params, 4), ' ', unknownSuffixSize_, 0x000a, IOSObjectArray_Get(EduStanfordNlpParserLexparserOptions_LexOptions_params, 5), ' ', unknownPrefixSize_, 0x000a, IOSObjectArray_Get(EduStanfordNlpParserLexparserOptions_LexOptions_params, 6), ' ', flexiTag_, 0x000a, IOSObjectArray_Get(EduStanfordNlpParserLexparserOptions_LexOptions_params, 7), ' ', useSignatureForKnownSmoothing_, 0x000a, IOSObjectArray_Get(EduStanfordNlpParserLexparserOptions_LexOptions_params, 8), ' ', wordClassesFile_, 0x000a);
}

- (void)readDataWithJavaIoBufferedReader:(JavaIoBufferedReader *)inArg {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(EduStanfordNlpParserLexparserOptions_LexOptions_params))->size_; i++) {
    NSString *line = [((JavaIoBufferedReader *) nil_chk(inArg)) readLine];
    jint idx = [((NSString *) nil_chk(line)) indexOf:' '];
    NSString *key = [line substring:0 endIndex:idx];
    NSString *value = [line substring:idx + 1];
    if (![((NSString *) nil_chk(key)) equalsIgnoreCase:IOSObjectArray_Get(EduStanfordNlpParserLexparserOptions_LexOptions_params, i)]) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$$$", @"Yikes!!! Expected ", IOSObjectArray_Get(EduStanfordNlpParserLexparserOptions_LexOptions_params, i), @" got ", key)];
    }
    switch (i) {
      case 0:
      useUnknownWordSignatures_ = JavaLangInteger_parseIntWithNSString_(value);
      break;
      case 1:
      smoothInUnknownsThreshold_ = JavaLangInteger_parseIntWithNSString_(value);
      break;
      case 2:
      smartMutation_ = JavaLangBoolean_parseBooleanWithNSString_(value);
      break;
      case 3:
      useUnicodeType_ = JavaLangBoolean_parseBooleanWithNSString_(value);
      break;
      case 4:
      unknownSuffixSize_ = JavaLangInteger_parseIntWithNSString_(value);
      break;
      case 5:
      unknownPrefixSize_ = JavaLangInteger_parseIntWithNSString_(value);
      break;
      case 6:
      flexiTag_ = JavaLangBoolean_parseBooleanWithNSString_(value);
      break;
      case 7:
      useSignatureForKnownSmoothing_ = JavaLangBoolean_parseBooleanWithNSString_(value);
      break;
      case 8:
      wordClassesFile_ = value;
      break;
    }
  }
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpParserLexparserOptions_LexOptions_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, 0, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(description);
  methods[1].selector = @selector(readDataWithJavaIoBufferedReader:);
  methods[2].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "useUnknownWordSignatures_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "DEFAULT_WORD_VECTOR_FILE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 4, -1, -1 },
    { "wordVectorFile_", "LNSString;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "numHid_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "smoothInUnknownsThreshold_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "smartMutation_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "useUnicodeType_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "unknownSuffixSize_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "unknownPrefixSize_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "uwModelTrainer_", "LNSString;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "flexiTag_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "useSignatureForKnownSmoothing_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "wordClassesFile_", "LNSString;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpParserLexparserOptions_LexOptions_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "params", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 5, -1, -1 },
  };
  static const void *ptrTable[] = { "toString", "readData", "LJavaIoBufferedReader;", "LJavaIoIOException;", &EduStanfordNlpParserLexparserOptions_LexOptions_DEFAULT_WORD_VECTOR_FILE, &EduStanfordNlpParserLexparserOptions_LexOptions_params, "LEduStanfordNlpParserLexparserOptions;" };
  static const J2ObjcClassInfo _EduStanfordNlpParserLexparserOptions_LexOptions = { "LexOptions", "edu.stanford.nlp.parser.lexparser", ptrTable, methods, fields, 7, 0x9, 3, 15, 6, -1, -1, -1, -1 };
  return &_EduStanfordNlpParserLexparserOptions_LexOptions;
}

+ (void)initialize {
  if (self == [EduStanfordNlpParserLexparserOptions_LexOptions class]) {
    EduStanfordNlpParserLexparserOptions_LexOptions_params = [IOSObjectArray newArrayWithObjects:(id[]){ @"useUnknownWordSignatures", @"smoothInUnknownsThreshold", @"smartMutation", @"useUnicodeType", @"unknownSuffixSize", @"unknownPrefixSize", @"flexiTag", @"useSignatureForKnownSmoothing", @"wordClassesFile" } count:9 type:NSString_class_()];
    J2OBJC_SET_INITIALIZED(EduStanfordNlpParserLexparserOptions_LexOptions)
  }
}

@end

void EduStanfordNlpParserLexparserOptions_LexOptions_init(EduStanfordNlpParserLexparserOptions_LexOptions *self) {
  NSObject_init(self);
  self->useUnknownWordSignatures_ = 0;
  self->wordVectorFile_ = EduStanfordNlpParserLexparserOptions_LexOptions_DEFAULT_WORD_VECTOR_FILE;
  self->numHid_ = 0;
  self->smoothInUnknownsThreshold_ = 100;
  self->smartMutation_ = false;
  self->useUnicodeType_ = false;
  self->unknownSuffixSize_ = 1;
  self->unknownPrefixSize_ = 1;
  self->flexiTag_ = false;
}

EduStanfordNlpParserLexparserOptions_LexOptions *new_EduStanfordNlpParserLexparserOptions_LexOptions_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpParserLexparserOptions_LexOptions, init)
}

EduStanfordNlpParserLexparserOptions_LexOptions *create_EduStanfordNlpParserLexparserOptions_LexOptions_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpParserLexparserOptions_LexOptions, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpParserLexparserOptions_LexOptions)
