//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/parser/lexparser/AbstractDependencyGrammar.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/parser/lexparser/AbstractDependencyGrammar.h"
#include "edu/stanford/nlp/parser/lexparser/IntDependency.h"
#include "edu/stanford/nlp/parser/lexparser/IntTaggedWord.h"
#include "edu/stanford/nlp/parser/lexparser/Lexicon.h"
#include "edu/stanford/nlp/parser/lexparser/Options.h"
#include "edu/stanford/nlp/parser/lexparser/TagProjection.h"
#include "edu/stanford/nlp/trees/TreebankLanguagePack.h"
#include "edu/stanford/nlp/util/Generics.h"
#include "edu/stanford/nlp/util/HashIndex.h"
#include "edu/stanford/nlp/util/Index.h"
#include "edu/stanford/nlp/util/Interner.h"
#include "java/io/BufferedReader.h"
#include "java/io/ObjectInputStream.h"
#include "java/io/PrintWriter.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/Collection.h"
#include "java/util/Map.h"

#pragma clang diagnostic ignored "-Wprotocol"

@interface EduStanfordNlpParserLexparserAbstractDependencyGrammar ()

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)ois;

@end

inline jboolean EduStanfordNlpParserLexparserAbstractDependencyGrammar_get_DEBUG();
#define EduStanfordNlpParserLexparserAbstractDependencyGrammar_DEBUG false
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpParserLexparserAbstractDependencyGrammar, DEBUG, jboolean)

inline jlong EduStanfordNlpParserLexparserAbstractDependencyGrammar_get_serialVersionUID();
#define EduStanfordNlpParserLexparserAbstractDependencyGrammar_serialVersionUID 3LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpParserLexparserAbstractDependencyGrammar, serialVersionUID, jlong)

@implementation EduStanfordNlpParserLexparserAbstractDependencyGrammar

- (instancetype)initWithEduStanfordNlpTreesTreebankLanguagePack:(id<EduStanfordNlpTreesTreebankLanguagePack>)tlp
                 withEduStanfordNlpParserLexparserTagProjection:(id<EduStanfordNlpParserLexparserTagProjection>)tagProjection
                                                    withBoolean:(jboolean)directional
                                                    withBoolean:(jboolean)useDistance
                                                    withBoolean:(jboolean)useCoarseDistance
                       withEduStanfordNlpParserLexparserOptions:(EduStanfordNlpParserLexparserOptions *)op
                                    withEduStanfordNlpUtilIndex:(id<EduStanfordNlpUtilIndex>)wordIndex
                                    withEduStanfordNlpUtilIndex:(id<EduStanfordNlpUtilIndex>)tagIndex {
  EduStanfordNlpParserLexparserAbstractDependencyGrammar_initWithEduStanfordNlpTreesTreebankLanguagePack_withEduStanfordNlpParserLexparserTagProjection_withBoolean_withBoolean_withBoolean_withEduStanfordNlpParserLexparserOptions_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(self, tlp, tagProjection, directional, useDistance, useCoarseDistance, op, wordIndex, tagIndex);
  return self;
}

- (void)setLexiconWithEduStanfordNlpParserLexparserLexicon:(id<EduStanfordNlpParserLexparserLexicon>)lexicon {
  lex_ = lexicon;
}

- (void)tuneWithJavaUtilCollection:(id<JavaUtilCollection>)trees {
}

- (jint)numTagBins {
  return numTagBins_;
}

- (jint)tagBinWithInt:(jint)tag {
  if (tag < 0) {
    return tag;
  }
  else {
    return IOSIntArray_Get(nil_chk(tagBin_), tag);
  }
}

- (jboolean)rootTWWithEduStanfordNlpParserLexparserIntTaggedWord:(EduStanfordNlpParserLexparserIntTaggedWord *)rTW {
  return ((EduStanfordNlpParserLexparserIntTaggedWord *) nil_chk(rTW))->tag_ == [((id<EduStanfordNlpUtilIndex>) nil_chk(tagIndex_)) indexOfWithId:EduStanfordNlpParserLexparserLexicon_BOUNDARY_TAG];
}

- (jshort)valenceBinWithInt:(jint)distance {
  if (!useDistance_) {
    return 0;
  }
  if (distance < 0) {
    return -1;
  }
  if (distance == 0) {
    return 0;
  }
  return 1;
}

- (jint)numDistBins {
  return useCoarseDistance_ ? 4 : 5;
}

- (jshort)distanceBinWithInt:(jint)distance {
  if (!useDistance_) {
    return 0;
  }
  else if (useCoarseDistance_) {
    return [self coarseDistanceBinWithInt:distance];
  }
  else {
    return [self regDistanceBinWithInt:distance];
  }
}

- (jshort)regDistanceBinWithInt:(jint)distance {
  for (jshort i = 0; i < ((IOSIntArray *) nil_chk(regDistanceBins_))->size_; ++i) if (distance <= IOSIntArray_Get(regDistanceBins_, i)) return i;
  return (jshort) regDistanceBins_->size_;
}

- (jshort)coarseDistanceBinWithInt:(jint)distance {
  for (jshort i = 0; i < ((IOSIntArray *) nil_chk(coarseDistanceBins_))->size_; ++i) if (distance <= IOSIntArray_Get(coarseDistanceBins_, i)) return i;
  return (jshort) coarseDistanceBins_->size_;
}

- (void)setCoarseDistanceBinsWithIntArray:(IOSIntArray *)bins {
  JreAssert((((IOSIntArray *) nil_chk(bins))->size_ == 3), (@"edu/stanford/nlp/parser/lexparser/AbstractDependencyGrammar.java:148 condition failed: assert(bins.length == 3);"));
  coarseDistanceBins_ = bins;
}

- (void)setRegDistanceBinsWithIntArray:(IOSIntArray *)bins {
  JreAssert((((IOSIntArray *) nil_chk(bins))->size_ == 4), (@"edu/stanford/nlp/parser/lexparser/AbstractDependencyGrammar.java:153 condition failed: assert(bins.length == 4);"));
  regDistanceBins_ = bins;
}

- (void)initTagBins {
  id<EduStanfordNlpUtilIndex> tagBinIndex = new_EduStanfordNlpUtilHashIndex_init();
  tagBin_ = [IOSIntArray newArrayWithLength:[((id<EduStanfordNlpUtilIndex>) nil_chk(tagIndex_)) size]];
  for (jint t = 0; t < ((IOSIntArray *) nil_chk(tagBin_))->size_; t++) {
    NSString *tagStr = [tagIndex_ getWithInt:t];
    NSString *binStr;
    if (tagProjection_ == nil) {
      binStr = tagStr;
    }
    else {
      binStr = [tagProjection_ projectWithNSString:tagStr];
    }
    *IOSIntArray_GetRef(nil_chk(tagBin_), t) = [tagBinIndex addToIndexWithId:binStr];
  }
  numTagBins_ = [tagBinIndex size];
}

- (jdouble)scoreWithEduStanfordNlpParserLexparserIntDependency:(EduStanfordNlpParserLexparserIntDependency *)dependency {
  return [self scoreTBWithInt:((EduStanfordNlpParserLexparserIntTaggedWord *) nil_chk(((EduStanfordNlpParserLexparserIntDependency *) nil_chk(dependency))->head_))->word_ withInt:[self tagBinWithInt:dependency->head_->tag_] withInt:((EduStanfordNlpParserLexparserIntTaggedWord *) nil_chk(dependency->arg_))->word_ withInt:[self tagBinWithInt:dependency->arg_->tag_] withBoolean:dependency->leftHeaded_ withInt:dependency->distance_];
}

- (jdouble)scoreWithInt:(jint)headWord
                withInt:(jint)headTag
                withInt:(jint)argWord
                withInt:(jint)argTag
            withBoolean:(jboolean)leftHeaded
                withInt:(jint)dist {
  EduStanfordNlpParserLexparserIntDependency *tempDependency = new_EduStanfordNlpParserLexparserIntDependency_initWithInt_withInt_withInt_withInt_withBoolean_withInt_(headWord, headTag, argWord, argTag, leftHeaded, dist);
  return [self scoreWithEduStanfordNlpParserLexparserIntDependency:tempDependency];
}

- (jdouble)scoreTBWithInt:(jint)headWord
                  withInt:(jint)headTag
                  withInt:(jint)argWord
                  withInt:(jint)argTag
              withBoolean:(jboolean)leftHeaded
                  withInt:(jint)dist {
  EduStanfordNlpParserLexparserIntDependency *tempDependency = new_EduStanfordNlpParserLexparserIntDependency_initWithInt_withInt_withInt_withInt_withBoolean_withInt_(headWord, headTag, argWord, argTag, leftHeaded, dist);
  return [self scoreTBWithEduStanfordNlpParserLexparserIntDependency:tempDependency];
}

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)ois {
  [((JavaIoObjectInputStream *) nil_chk(ois)) defaultReadObject];
  itwInterner_ = new_EduStanfordNlpUtilInterner_init();
}

- (void)readDataWithJavaIoBufferedReader:(JavaIoBufferedReader *)inArg {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)writeDataWithJavaIoPrintWriter:(JavaIoPrintWriter *)outArg {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (EduStanfordNlpParserLexparserIntDependency *)internWithEduStanfordNlpParserLexparserIntTaggedWord:(EduStanfordNlpParserLexparserIntTaggedWord *)headTW
                                                      withEduStanfordNlpParserLexparserIntTaggedWord:(EduStanfordNlpParserLexparserIntTaggedWord *)argTW
                                                                                         withBoolean:(jboolean)leftHeaded
                                                                                           withShort:(jshort)dist {
  id<JavaUtilMap> map = expandDependencyMap_;
  EduStanfordNlpParserLexparserIntDependency *internTempDependency = new_EduStanfordNlpParserLexparserIntDependency_initWithEduStanfordNlpParserLexparserIntTaggedWord_withEduStanfordNlpParserLexparserIntTaggedWord_withBoolean_withInt_([((EduStanfordNlpUtilInterner *) nil_chk(itwInterner_)) internWithId:headTW], [((EduStanfordNlpUtilInterner *) nil_chk(itwInterner_)) internWithId:argTW], leftHeaded, dist);
  EduStanfordNlpParserLexparserIntDependency *returnDependency = internTempDependency;
  if (map != nil) {
    returnDependency = [map getWithId:internTempDependency];
    if (returnDependency == nil) {
      (void) [map putWithId:internTempDependency withId:internTempDependency];
      returnDependency = internTempDependency;
    }
  }
  return returnDependency;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "S", 0x4, 11, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "S", 0x1, 12, 8, -1, -1, -1, -1 },
    { NULL, "S", 0x1, 13, 8, -1, -1, -1, -1 },
    { NULL, "S", 0x1, 14, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 17, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, 18, 19, -1, -1, -1, -1 },
    { NULL, "D", 0x1, 18, 20, -1, -1, -1, -1 },
    { NULL, "D", 0x1, 21, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 22, 23, 24, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 26, 27, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 29, 27, -1, -1, -1 },
    { NULL, "LEduStanfordNlpParserLexparserIntDependency;", 0x4, 30, 31, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpTreesTreebankLanguagePack:withEduStanfordNlpParserLexparserTagProjection:withBoolean:withBoolean:withBoolean:withEduStanfordNlpParserLexparserOptions:withEduStanfordNlpUtilIndex:withEduStanfordNlpUtilIndex:);
  methods[1].selector = @selector(setLexiconWithEduStanfordNlpParserLexparserLexicon:);
  methods[2].selector = @selector(tuneWithJavaUtilCollection:);
  methods[3].selector = @selector(numTagBins);
  methods[4].selector = @selector(tagBinWithInt:);
  methods[5].selector = @selector(rootTWWithEduStanfordNlpParserLexparserIntTaggedWord:);
  methods[6].selector = @selector(valenceBinWithInt:);
  methods[7].selector = @selector(numDistBins);
  methods[8].selector = @selector(distanceBinWithInt:);
  methods[9].selector = @selector(regDistanceBinWithInt:);
  methods[10].selector = @selector(coarseDistanceBinWithInt:);
  methods[11].selector = @selector(setCoarseDistanceBinsWithIntArray:);
  methods[12].selector = @selector(setRegDistanceBinsWithIntArray:);
  methods[13].selector = @selector(initTagBins);
  methods[14].selector = @selector(scoreWithEduStanfordNlpParserLexparserIntDependency:);
  methods[15].selector = @selector(scoreWithInt:withInt:withInt:withInt:withBoolean:withInt:);
  methods[16].selector = @selector(scoreTBWithInt:withInt:withInt:withInt:withBoolean:withInt:);
  methods[17].selector = @selector(readObjectWithJavaIoObjectInputStream:);
  methods[18].selector = @selector(readDataWithJavaIoBufferedReader:);
  methods[19].selector = @selector(writeDataWithJavaIoPrintWriter:);
  methods[20].selector = @selector(internWithEduStanfordNlpParserLexparserIntTaggedWord:withEduStanfordNlpParserLexparserIntTaggedWord:withBoolean:withShort:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "tagProjection_", "LEduStanfordNlpParserLexparserTagProjection;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "tagIndex_", "LEduStanfordNlpUtilIndex;", .constantValue.asLong = 0, 0x14, -1, -1, 32, -1 },
    { "wordIndex_", "LEduStanfordNlpUtilIndex;", .constantValue.asLong = 0, 0x14, -1, -1, 32, -1 },
    { "numTagBins_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "tagBin_", "[I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "tlp_", "LEduStanfordNlpTreesTreebankLanguagePack;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "directional_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "useDistance_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "useCoarseDistance_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "lex_", "LEduStanfordNlpParserLexparserLexicon;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "stopTW_", "LEduStanfordNlpParserLexparserIntTaggedWord;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "wildTW_", "LEduStanfordNlpParserLexparserIntTaggedWord;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "expandDependencyMap_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x84, -1, -1, 33, -1 },
    { "DEBUG", "Z", .constantValue.asBOOL = EduStanfordNlpParserLexparserAbstractDependencyGrammar_DEBUG, 0x1a, -1, -1, -1, -1 },
    { "coarseDistanceBins_", "[I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "regDistanceBins_", "[I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "op_", "LEduStanfordNlpParserLexparserOptions;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "itwInterner_", "LEduStanfordNlpUtilInterner;", .constantValue.asLong = 0, 0x84, -1, -1, 34, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpParserLexparserAbstractDependencyGrammar_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpTreesTreebankLanguagePack;LEduStanfordNlpParserLexparserTagProjection;ZZZLEduStanfordNlpParserLexparserOptions;LEduStanfordNlpUtilIndex;LEduStanfordNlpUtilIndex;", "(Ledu/stanford/nlp/trees/TreebankLanguagePack;Ledu/stanford/nlp/parser/lexparser/TagProjection;ZZZLedu/stanford/nlp/parser/lexparser/Options;Ledu/stanford/nlp/util/Index<Ljava/lang/String;>;Ledu/stanford/nlp/util/Index<Ljava/lang/String;>;)V", "setLexicon", "LEduStanfordNlpParserLexparserLexicon;", "tune", "LJavaUtilCollection;", "(Ljava/util/Collection<Ledu/stanford/nlp/trees/Tree;>;)V", "tagBin", "I", "rootTW", "LEduStanfordNlpParserLexparserIntTaggedWord;", "valenceBin", "distanceBin", "regDistanceBin", "coarseDistanceBin", "setCoarseDistanceBins", "[I", "setRegDistanceBins", "score", "LEduStanfordNlpParserLexparserIntDependency;", "IIIIZI", "scoreTB", "readObject", "LJavaIoObjectInputStream;", "LJavaIoIOException;LJavaLangClassNotFoundException;", "readData", "LJavaIoBufferedReader;", "LJavaIoIOException;", "writeData", "LJavaIoPrintWriter;", "intern", "LEduStanfordNlpParserLexparserIntTaggedWord;LEduStanfordNlpParserLexparserIntTaggedWord;ZS", "Ledu/stanford/nlp/util/Index<Ljava/lang/String;>;", "Ljava/util/Map<Ledu/stanford/nlp/parser/lexparser/IntDependency;Ledu/stanford/nlp/parser/lexparser/IntDependency;>;", "Ledu/stanford/nlp/util/Interner<Ledu/stanford/nlp/parser/lexparser/IntTaggedWord;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpParserLexparserAbstractDependencyGrammar = { "AbstractDependencyGrammar", "edu.stanford.nlp.parser.lexparser", ptrTable, methods, fields, 7, 0x401, 21, 19, -1, -1, -1, -1, -1 };
  return &_EduStanfordNlpParserLexparserAbstractDependencyGrammar;
}

@end

void EduStanfordNlpParserLexparserAbstractDependencyGrammar_initWithEduStanfordNlpTreesTreebankLanguagePack_withEduStanfordNlpParserLexparserTagProjection_withBoolean_withBoolean_withBoolean_withEduStanfordNlpParserLexparserOptions_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(EduStanfordNlpParserLexparserAbstractDependencyGrammar *self, id<EduStanfordNlpTreesTreebankLanguagePack> tlp, id<EduStanfordNlpParserLexparserTagProjection> tagProjection, jboolean directional, jboolean useDistance, jboolean useCoarseDistance, EduStanfordNlpParserLexparserOptions *op, id<EduStanfordNlpUtilIndex> wordIndex, id<EduStanfordNlpUtilIndex> tagIndex) {
  NSObject_init(self);
  self->expandDependencyMap_ = EduStanfordNlpUtilGenerics_newHashMap();
  self->coarseDistanceBins_ = [IOSIntArray newArrayWithInts:(jint[]){ 0, 2, 5 } count:3];
  self->regDistanceBins_ = [IOSIntArray newArrayWithInts:(jint[]){ 0, 1, 5, 10 } count:4];
  self->itwInterner_ = new_EduStanfordNlpUtilInterner_init();
  self->tlp_ = tlp;
  self->tagProjection_ = tagProjection;
  self->directional_ = directional;
  self->useDistance_ = useDistance;
  self->useCoarseDistance_ = useCoarseDistance;
  self->op_ = op;
  self->wordIndex_ = wordIndex;
  self->tagIndex_ = tagIndex;
  self->stopTW_ = new_EduStanfordNlpParserLexparserIntTaggedWord_initWithInt_withInt_(EduStanfordNlpParserLexparserIntTaggedWord_STOP_WORD_INT, EduStanfordNlpParserLexparserIntTaggedWord_STOP_TAG_INT);
  self->wildTW_ = new_EduStanfordNlpParserLexparserIntTaggedWord_initWithInt_withInt_(EduStanfordNlpParserLexparserIntTaggedWord_ANY_WORD_INT, EduStanfordNlpParserLexparserIntTaggedWord_ANY_TAG_INT);
  [self initTagBins];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpParserLexparserAbstractDependencyGrammar)
