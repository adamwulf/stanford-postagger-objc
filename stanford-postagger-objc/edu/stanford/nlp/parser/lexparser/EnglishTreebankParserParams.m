//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/parser/lexparser/EnglishTreebankParserParams.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/io/RuntimeIOException.h"
#include "edu/stanford/nlp/ling/CategoryWordTag.h"
#include "edu/stanford/nlp/ling/CategoryWordTagFactory.h"
#include "edu/stanford/nlp/ling/CoreLabel.h"
#include "edu/stanford/nlp/ling/HasTag.h"
#include "edu/stanford/nlp/ling/Label.h"
#include "edu/stanford/nlp/ling/Word.h"
#include "edu/stanford/nlp/parser/lexparser/AbstractTreebankParserParams.h"
#include "edu/stanford/nlp/parser/lexparser/BaseLexicon.h"
#include "edu/stanford/nlp/parser/lexparser/EnglishTreebankParserParams.h"
#include "edu/stanford/nlp/parser/lexparser/Lexicon.h"
#include "edu/stanford/nlp/parser/lexparser/Options.h"
#include "edu/stanford/nlp/parser/lexparser/TreeCollinizer.h"
#include "edu/stanford/nlp/parser/lexparser/TreebankLangParserParams.h"
#include "edu/stanford/nlp/trees/BobChrisTreeNormalizer.h"
#include "edu/stanford/nlp/trees/DiskTreebank.h"
#include "edu/stanford/nlp/trees/EnglishGrammaticalStructure.h"
#include "edu/stanford/nlp/trees/GrammaticalStructure.h"
#include "edu/stanford/nlp/trees/HeadFinder.h"
#include "edu/stanford/nlp/trees/LabeledScoredTreeFactory.h"
#include "edu/stanford/nlp/trees/MemoryTreebank.h"
#include "edu/stanford/nlp/trees/ModCollinsHeadFinder.h"
#include "edu/stanford/nlp/trees/NPTmpRetainingTreeNormalizer.h"
#include "edu/stanford/nlp/trees/PennTreeReader.h"
#include "edu/stanford/nlp/trees/PennTreebankLanguagePack.h"
#include "edu/stanford/nlp/trees/SemanticHeadFinder.h"
#include "edu/stanford/nlp/trees/Tree.h"
#include "edu/stanford/nlp/trees/TreeFactory.h"
#include "edu/stanford/nlp/trees/TreeReader.h"
#include "edu/stanford/nlp/trees/TreeReaderFactory.h"
#include "edu/stanford/nlp/trees/TreeTransformer.h"
#include "edu/stanford/nlp/trees/Treebank.h"
#include "edu/stanford/nlp/trees/TreebankLanguagePack.h"
#include "edu/stanford/nlp/trees/UniversalEnglishGrammaticalStructure.h"
#include "edu/stanford/nlp/trees/UniversalSemanticHeadFinder.h"
#include "edu/stanford/nlp/util/Index.h"
#include "java/io/IOException.h"
#include "java/io/PrintStream.h"
#include "java/io/Reader.h"
#include "java/lang/Character.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/function/Predicate.h"

@interface EduStanfordNlpParserLexparserEnglishTreebankParserParams () {
 @public
  id<EduStanfordNlpTreesHeadFinder> headFinder_;
  EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *englishTrain_;
}

- (jboolean)containsVPWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t;

+ (jboolean)firstOfSeveralNNPWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)parent
                             withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t;

+ (jboolean)lastOfSeveralNNPWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)parent
                            withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t;

+ (NSString *)deduceTagWithNSString:(NSString *)w;

+ (jboolean)rightPhrasalWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t;

+ (NSString *)subCatifyWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t;

- (NSString *)ditransWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t;

- (NSString *)changeBaseCatWithNSString:(NSString *)cat
                           withNSString:(NSString *)newBaseCat;

+ (jboolean)hasClausalVWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)tree;

+ (jboolean)hasVWithJavaUtilList:(id<JavaUtilList>)tags;

+ (jboolean)hasIWithJavaUtilList:(id<JavaUtilList>)tags;

+ (jboolean)hasCWithJavaUtilList:(id<JavaUtilList>)tags;

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserEnglishTreebankParserParams, headFinder_, id<EduStanfordNlpTreesHeadFinder>)
J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserEnglishTreebankParserParams, englishTrain_, EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *)

inline IOSObjectArray *EduStanfordNlpParserLexparserEnglishTreebankParserParams_get_sisterSplit1();
static IOSObjectArray *EduStanfordNlpParserLexparserEnglishTreebankParserParams_sisterSplit1;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpParserLexparserEnglishTreebankParserParams, sisterSplit1, IOSObjectArray *)

inline IOSObjectArray *EduStanfordNlpParserLexparserEnglishTreebankParserParams_get_sisterSplit2();
static IOSObjectArray *EduStanfordNlpParserLexparserEnglishTreebankParserParams_sisterSplit2;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpParserLexparserEnglishTreebankParserParams, sisterSplit2, IOSObjectArray *)

inline IOSObjectArray *EduStanfordNlpParserLexparserEnglishTreebankParserParams_get_sisterSplit3();
static IOSObjectArray *EduStanfordNlpParserLexparserEnglishTreebankParserParams_sisterSplit3;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpParserLexparserEnglishTreebankParserParams, sisterSplit3, IOSObjectArray *)

inline IOSObjectArray *EduStanfordNlpParserLexparserEnglishTreebankParserParams_get_sisterSplit4();
static IOSObjectArray *EduStanfordNlpParserLexparserEnglishTreebankParserParams_sisterSplit4;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpParserLexparserEnglishTreebankParserParams, sisterSplit4, IOSObjectArray *)

inline id<EduStanfordNlpTreesTreeFactory> EduStanfordNlpParserLexparserEnglishTreebankParserParams_get_categoryWordTagTreeFactory();
static id<EduStanfordNlpTreesTreeFactory> EduStanfordNlpParserLexparserEnglishTreebankParserParams_categoryWordTagTreeFactory;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpParserLexparserEnglishTreebankParserParams, categoryWordTagTreeFactory, id<EduStanfordNlpTreesTreeFactory>)

inline IOSObjectArray *EduStanfordNlpParserLexparserEnglishTreebankParserParams_get_RETAIN_TMP_ARGS();
static IOSObjectArray *EduStanfordNlpParserLexparserEnglishTreebankParserParams_RETAIN_TMP_ARGS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpParserLexparserEnglishTreebankParserParams, RETAIN_TMP_ARGS, IOSObjectArray *)

inline jlong EduStanfordNlpParserLexparserEnglishTreebankParserParams_get_serialVersionUID();
#define EduStanfordNlpParserLexparserEnglishTreebankParserParams_serialVersionUID 4153878351331522581LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpParserLexparserEnglishTreebankParserParams, serialVersionUID, jlong)

__attribute__((unused)) static jboolean EduStanfordNlpParserLexparserEnglishTreebankParserParams_containsVPWithEduStanfordNlpTreesTree_(EduStanfordNlpParserLexparserEnglishTreebankParserParams *self, EduStanfordNlpTreesTree *t);

__attribute__((unused)) static jboolean EduStanfordNlpParserLexparserEnglishTreebankParserParams_firstOfSeveralNNPWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_(EduStanfordNlpTreesTree *parent, EduStanfordNlpTreesTree *t);

__attribute__((unused)) static jboolean EduStanfordNlpParserLexparserEnglishTreebankParserParams_lastOfSeveralNNPWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_(EduStanfordNlpTreesTree *parent, EduStanfordNlpTreesTree *t);

__attribute__((unused)) static NSString *EduStanfordNlpParserLexparserEnglishTreebankParserParams_deduceTagWithNSString_(NSString *w);

__attribute__((unused)) static jboolean EduStanfordNlpParserLexparserEnglishTreebankParserParams_rightPhrasalWithEduStanfordNlpTreesTree_(EduStanfordNlpTreesTree *t);

__attribute__((unused)) static NSString *EduStanfordNlpParserLexparserEnglishTreebankParserParams_subCatifyWithEduStanfordNlpTreesTree_(EduStanfordNlpTreesTree *t);

__attribute__((unused)) static NSString *EduStanfordNlpParserLexparserEnglishTreebankParserParams_ditransWithEduStanfordNlpTreesTree_(EduStanfordNlpParserLexparserEnglishTreebankParserParams *self, EduStanfordNlpTreesTree *t);

__attribute__((unused)) static NSString *EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(EduStanfordNlpParserLexparserEnglishTreebankParserParams *self, NSString *cat, NSString *newBaseCat);

__attribute__((unused)) static jboolean EduStanfordNlpParserLexparserEnglishTreebankParserParams_hasClausalVWithEduStanfordNlpTreesTree_(EduStanfordNlpTreesTree *tree);

__attribute__((unused)) static jboolean EduStanfordNlpParserLexparserEnglishTreebankParserParams_hasVWithJavaUtilList_(id<JavaUtilList> tags);

__attribute__((unused)) static jboolean EduStanfordNlpParserLexparserEnglishTreebankParserParams_hasIWithJavaUtilList_(id<JavaUtilList> tags);

__attribute__((unused)) static jboolean EduStanfordNlpParserLexparserEnglishTreebankParserParams_hasCWithJavaUtilList_(id<JavaUtilList> tags);

@interface EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishSubcategoryStripper () {
 @public
  EduStanfordNlpParserLexparserEnglishTreebankParserParams *this$0_;
}

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishSubcategoryStripper, this$0_, EduStanfordNlpParserLexparserEnglishTreebankParserParams *)

inline jlong EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTest_get_serialVersionUID();
#define EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTest_serialVersionUID 183157656745674521LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTest, serialVersionUID, jlong)

inline jlong EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain_get_serialVersionUID();
#define EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain_serialVersionUID 1831576434872643LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain, serialVersionUID, jlong)

@interface EduStanfordNlpParserLexparserEnglishTreebankParserParams_$Lambda$1 : NSObject < EduStanfordNlpTreesTreeReaderFactory > {
 @public
  EduStanfordNlpParserLexparserEnglishTreebankParserParams *this$0_;
}

- (id<EduStanfordNlpTreesTreeReader>)newTreeReaderWithJavaIoReader:(JavaIoReader *)inArg OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpParserLexparserEnglishTreebankParserParams_$Lambda$1)

J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserEnglishTreebankParserParams_$Lambda$1, this$0_, EduStanfordNlpParserLexparserEnglishTreebankParserParams *)

__attribute__((unused)) static void EduStanfordNlpParserLexparserEnglishTreebankParserParams_$Lambda$1_initWithEduStanfordNlpParserLexparserEnglishTreebankParserParams_(EduStanfordNlpParserLexparserEnglishTreebankParserParams_$Lambda$1 *self, EduStanfordNlpParserLexparserEnglishTreebankParserParams *outer$);

__attribute__((unused)) static EduStanfordNlpParserLexparserEnglishTreebankParserParams_$Lambda$1 *new_EduStanfordNlpParserLexparserEnglishTreebankParserParams_$Lambda$1_initWithEduStanfordNlpParserLexparserEnglishTreebankParserParams_(EduStanfordNlpParserLexparserEnglishTreebankParserParams *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpParserLexparserEnglishTreebankParserParams_$Lambda$1 *create_EduStanfordNlpParserLexparserEnglishTreebankParserParams_$Lambda$1_initWithEduStanfordNlpParserLexparserEnglishTreebankParserParams_(EduStanfordNlpParserLexparserEnglishTreebankParserParams *outer$);

@interface EduStanfordNlpParserLexparserEnglishTreebankParserParams_$Lambda$2 : NSObject < EduStanfordNlpTreesTreeReaderFactory > {
 @public
  EduStanfordNlpParserLexparserEnglishTreebankParserParams *this$0_;
}

- (id<EduStanfordNlpTreesTreeReader>)newTreeReaderWithJavaIoReader:(JavaIoReader *)inArg OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpParserLexparserEnglishTreebankParserParams_$Lambda$2)

J2OBJC_FIELD_SETTER(EduStanfordNlpParserLexparserEnglishTreebankParserParams_$Lambda$2, this$0_, EduStanfordNlpParserLexparserEnglishTreebankParserParams *)

__attribute__((unused)) static void EduStanfordNlpParserLexparserEnglishTreebankParserParams_$Lambda$2_initWithEduStanfordNlpParserLexparserEnglishTreebankParserParams_(EduStanfordNlpParserLexparserEnglishTreebankParserParams_$Lambda$2 *self, EduStanfordNlpParserLexparserEnglishTreebankParserParams *outer$);

__attribute__((unused)) static EduStanfordNlpParserLexparserEnglishTreebankParserParams_$Lambda$2 *new_EduStanfordNlpParserLexparserEnglishTreebankParserParams_$Lambda$2_initWithEduStanfordNlpParserLexparserEnglishTreebankParserParams_(EduStanfordNlpParserLexparserEnglishTreebankParserParams *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpParserLexparserEnglishTreebankParserParams_$Lambda$2 *create_EduStanfordNlpParserLexparserEnglishTreebankParserParams_$Lambda$2_initWithEduStanfordNlpParserLexparserEnglishTreebankParserParams_(EduStanfordNlpParserLexparserEnglishTreebankParserParams *outer$);

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpParserLexparserEnglishTreebankParserParams)

@implementation EduStanfordNlpParserLexparserEnglishTreebankParserParams

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpParserLexparserEnglishTreebankParserParams_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<EduStanfordNlpTreesHeadFinder>)headFinder {
  return headFinder_;
}

- (id<EduStanfordNlpTreesHeadFinder>)typedDependencyHeadFinder {
  if (generateOriginalDependencies_) {
    return new_EduStanfordNlpTreesSemanticHeadFinder_initWithEduStanfordNlpTreesTreebankLanguagePack_withBoolean_([self treebankLanguagePack], !((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTest *) nil_chk(englishTest_))->makeCopulaHead_);
  }
  else {
    return new_EduStanfordNlpTreesUniversalSemanticHeadFinder_initWithEduStanfordNlpTreesTreebankLanguagePack_withBoolean_([self treebankLanguagePack], !((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTest *) nil_chk(englishTest_))->makeCopulaHead_);
  }
}

- (EduStanfordNlpTreesDiskTreebank *)diskTreebank {
  return new_EduStanfordNlpTreesDiskTreebank_initWithEduStanfordNlpTreesTreeReaderFactory_([self treeReaderFactory]);
}

- (EduStanfordNlpTreesMemoryTreebank *)memoryTreebank {
  return new_EduStanfordNlpTreesMemoryTreebank_initWithEduStanfordNlpTreesTreeReaderFactory_([self treeReaderFactory]);
}

- (id<EduStanfordNlpTreesTreeReaderFactory>)treeReaderFactory {
  return new_EduStanfordNlpParserLexparserEnglishTreebankParserParams_$Lambda$1_initWithEduStanfordNlpParserLexparserEnglishTreebankParserParams_(self);
}

- (EduStanfordNlpTreesMemoryTreebank *)testMemoryTreebank {
  return new_EduStanfordNlpTreesMemoryTreebank_initWithEduStanfordNlpTreesTreeReaderFactory_(new_EduStanfordNlpParserLexparserEnglishTreebankParserParams_$Lambda$2_initWithEduStanfordNlpParserLexparserEnglishTreebankParserParams_(self));
}

- (id<EduStanfordNlpTreesTreeTransformer>)collinizer {
  return new_EduStanfordNlpParserLexparserTreeCollinizer_initWithEduStanfordNlpTreesTreebankLanguagePack_withBoolean_withBoolean_withInt_(tlp_, true, ((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->splitBaseNP_ == 2, englishTrain_->collapseWhCategories_);
}

- (id<EduStanfordNlpTreesTreeTransformer>)collinizerEvalb {
  return new_EduStanfordNlpParserLexparserTreeCollinizer_initWithEduStanfordNlpTreesTreebankLanguagePack_withBoolean_withBoolean_withInt_(tlp_, true, ((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->splitBaseNP_ == 2, englishTrain_->collapseWhCategories_);
}

- (id<EduStanfordNlpTreesTreebankLanguagePack>)treebankLanguagePack {
  return tlp_;
}

- (id<EduStanfordNlpParserLexparserLexicon>)lexWithEduStanfordNlpParserLexparserOptions:(EduStanfordNlpParserLexparserOptions *)op
                                                            withEduStanfordNlpUtilIndex:(id<EduStanfordNlpUtilIndex>)wordIndex
                                                            withEduStanfordNlpUtilIndex:(id<EduStanfordNlpUtilIndex>)tagIndex {
  if (((EduStanfordNlpParserLexparserOptions_LexOptions *) nil_chk(((EduStanfordNlpParserLexparserOptions *) nil_chk(op))->lexOptions_))->uwModelTrainer_ == nil) {
    op->lexOptions_->uwModelTrainer_ = @"edu.stanford.nlp.parser.lexparser.EnglishUnknownWordModelTrainer";
  }
  return new_EduStanfordNlpParserLexparserBaseLexicon_initWithEduStanfordNlpParserLexparserOptions_withEduStanfordNlpUtilIndex_withEduStanfordNlpUtilIndex_(op, wordIndex, tagIndex);
}

- (IOSObjectArray *)sisterSplitters {
  switch (((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->sisterSplitLevel_) {
    case 1:
    return EduStanfordNlpParserLexparserEnglishTreebankParserParams_sisterSplit1;
    case 2:
    return EduStanfordNlpParserLexparserEnglishTreebankParserParams_sisterSplit2;
    case 3:
    return EduStanfordNlpParserLexparserEnglishTreebankParserParams_sisterSplit3;
    case 4:
    return EduStanfordNlpParserLexparserEnglishTreebankParserParams_sisterSplit4;
    default:
    return [IOSObjectArray newArrayWithLength:0 type:NSString_class_()];
  }
}

- (id<EduStanfordNlpTreesTreeTransformer>)subcategoryStripper {
  return new_EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishSubcategoryStripper_initWithEduStanfordNlpParserLexparserEnglishTreebankParserParams_(self);
}

- (EduStanfordNlpTreesTree *)transformTreeWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
                                          withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)root {
  if (t == nil || [t isLeaf]) {
    return t;
  }
  EduStanfordNlpTreesTree *parent;
  NSString *parentStr;
  NSString *grandParentStr;
  if (root == nil || [t isEqual:root]) {
    parent = nil;
    parentStr = @"";
  }
  else {
    parent = [t parentWithEduStanfordNlpTreesTree:root];
    parentStr = [((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(parent)) label])) value];
  }
  if (parent == nil || [parent isEqual:root]) {
    grandParentStr = @"";
  }
  else {
    EduStanfordNlpTreesTree *grandParent = [parent parentWithEduStanfordNlpTreesTree:root];
    grandParentStr = [((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(grandParent)) label])) value];
  }
  NSString *baseParentStr = [((id<EduStanfordNlpTreesTreebankLanguagePack>) nil_chk(tlp_)) basicCategoryWithNSString:parentStr];
  NSString *baseGrandParentStr = [((id<EduStanfordNlpTreesTreebankLanguagePack>) nil_chk(tlp_)) basicCategoryWithNSString:grandParentStr];
  EduStanfordNlpLingCoreLabel *lab = (EduStanfordNlpLingCoreLabel *) cast_chk([t label], [EduStanfordNlpLingCoreLabel class]);
  NSString *word = [((EduStanfordNlpLingCoreLabel *) nil_chk(lab)) word];
  NSString *tag = [lab tag];
  NSString *baseTag = [((id<EduStanfordNlpTreesTreebankLanguagePack>) nil_chk(tlp_)) basicCategoryWithNSString:tag];
  NSString *cat = [lab value];
  NSString *baseCat = [((id<EduStanfordNlpTreesTreebankLanguagePack>) nil_chk(tlp_)) basicCategoryWithNSString:cat];
  if ([t isPreTerminal]) {
    if (((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->correctTags_) {
      if ([((NSString *) nil_chk(baseParentStr)) isEqual:@"NP"]) {
        switch (JreIndexOfStr(baseCat, (id[]){ @"IN", @"RB", @"RP", @"JJ", @"NN", @":", @"NNS", @"VBZ", @"VBG", @"VB", @"NNP", @"PRP" }, 12)) {
          case 0:
          if ([((NSString *) nil_chk(word)) equalsIgnoreCase:@"a"] || [word equalsIgnoreCase:@"that"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"DT");
          }
          else if ([word equalsIgnoreCase:@"so"] || [word equalsIgnoreCase:@"about"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"RB");
          }
          else if ([word isEqual:@"fiscal"] || [word equalsIgnoreCase:@"next"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"JJ");
          }
          break;
          case 1:
          if ([((NSString *) nil_chk(word)) isEqual:@"McNally"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"NNP");
          }
          else if ([word isEqual:@"multifamily"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"NN");
          }
          else if ([word isEqual:@"MORE"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"JJR");
          }
          else if ([word isEqual:@"hand"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"NN");
          }
          else if ([word isEqual:@"fist"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"NN");
          }
          break;
          case 2:
          if ([((NSString *) nil_chk(word)) isEqual:@"Howard"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"NNP");
          }
          else if ([word isEqual:@"whole"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"JJ");
          }
          break;
          case 3:
          if ([((NSString *) nil_chk(word)) isEqual:@"U.S."]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"NNP");
          }
          else if ([word isEqual:@"ours"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"PRP");
          }
          else if ([word isEqual:@"mine"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"NN");
          }
          else if ([word isEqual:@"Sept."]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"NNP");
          }
          break;
          case 4:
          if ([((NSString *) nil_chk(word)) isEqual:@"Chapman"] || [word isEqual:@"Jan."] || [word isEqual:@"Sept."] || [word isEqual:@"Oct."] || [word isEqual:@"Nov."] || [word isEqual:@"Dec."]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"NNP");
          }
          else if ([word isEqual:@"members"] || [word isEqual:@"bureaus"] || [word isEqual:@"days"] || [word isEqual:@"outfits"] || [word isEqual:@"institutes"] || [word isEqual:@"innings"] || [word isEqual:@"write-offs"] || [word isEqual:@"wines"] || [word isEqual:@"trade-offs"] || [word isEqual:@"tie-ins"] || [word isEqual:@"thrips"] || [word isEqual:@"1980s"] || [word isEqual:@"1920s"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"NNS");
          }
          else if ([word isEqual:@"this"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"DT");
          }
          break;
          case 5:
          if ([((NSString *) nil_chk(word)) isEqual:@"'"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"''");
          }
          break;
          case 6:
          if ([((NSString *) nil_chk(word)) isEqual:@"start-up"] || [word isEqual:@"ground-handling"] || [word isEqual:@"word-processing"] || [word isEqual:@"T-shirt"] || [word isEqual:@"co-pilot"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"NN");
          }
          else if ([word isEqual:@"Sens."] || [word isEqual:@"Aichi"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"NNP");
          }
          break;
          case 7:
          if ([((NSString *) nil_chk(word)) isEqual:@"'s"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"POS");
          }
          else if (![word isEqual:@"kills"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"NNS");
          }
          break;
          case 8:
          if ([((NSString *) nil_chk(word)) isEqual:@"preferred"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"VBN");
          }
          break;
          case 9:
          if ([((NSString *) nil_chk(word)) isEqual:@"The"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"DT");
          }
          else if ([word isEqual:@"allowed"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"VBD");
          }
          else if ([word isEqual:@"short"] || [word isEqual:@"key"] || [word isEqual:@"many"] || [word isEqual:@"last"] || [word isEqual:@"further"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"JJ");
          }
          else if ([word isEqual:@"lower"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"JJR");
          }
          else if ([word isEqual:@"Nov."] || [word isEqual:@"Jan."] || [word isEqual:@"Dec."] || [word isEqual:@"Tandy"] || [word isEqual:@"Release"] || [word isEqual:@"Orkem"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"NNP");
          }
          else if ([word isEqual:@"watch"] || [word isEqual:@"review"] || [word isEqual:@"risk"] || [word isEqual:@"realestate"] || [word isEqual:@"love"] || [word isEqual:@"experience"] || [word isEqual:@"control"] || [word isEqual:@"Transport"] || [word isEqual:@"mind"] || [word isEqual:@"term"] || [word isEqual:@"program"] || [word isEqual:@"gender"] || [word isEqual:@"audit"] || [word isEqual:@"blame"] || [word isEqual:@"stock"] || [word isEqual:@"run"] || [word isEqual:@"group"] || [word isEqual:@"affect"] || [word isEqual:@"rent"] || [word isEqual:@"show"] || [word isEqual:@"accord"] || [word isEqual:@"change"] || [word isEqual:@"finish"] || [word isEqual:@"work"] || [word isEqual:@"schedule"] || [word isEqual:@"influence"] || [word isEqual:@"school"] || [word isEqual:@"freight"] || [word isEqual:@"growth"] || [word isEqual:@"travel"] || [word isEqual:@"call"] || [word isEqual:@"autograph"] || [word isEqual:@"demand"] || [word isEqual:@"abuse"] || [word isEqual:@"return"] || [word isEqual:@"defeat"] || [word isEqual:@"pressure"] || [word isEqual:@"bank"] || [word isEqual:@"notice"] || [word isEqual:@"tax"] || [word isEqual:@"ooze"] || [word isEqual:@"network"] || [word isEqual:@"concern"] || [word isEqual:@"pit"] || [word isEqual:@"contract"] || [word isEqual:@"cash"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"NN");
          }
          break;
          case 10:
          if ([((NSString *) nil_chk(word)) isEqual:@"Officials"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"NNS");
          }
          else if ([word isEqual:@"Currently"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"RB");
          }
          break;
          case 11:
          if ([((NSString *) nil_chk(word)) isEqual:@"her"] && [((EduStanfordNlpTreesTree *) nil_chk(parent)) numChildren] > 1) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"PRP$");
          }
          else if ([word isEqual:@"US"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"NNP");
          }
          break;
        }
      }
      else if ([baseParentStr isEqual:@"WHNP"]) {
        if ([((NSString *) nil_chk(baseCat)) isEqual:@"VBP"] && ([((NSString *) nil_chk(word)) equalsIgnoreCase:@"that"])) {
          cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"WDT");
        }
      }
      else if ([baseParentStr isEqual:@"UCP"]) {
        if ([((NSString *) nil_chk(word)) isEqual:@"multifamily"]) {
          cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"NN");
        }
      }
      else if ([baseParentStr isEqual:@"PRT"]) {
        if ([((NSString *) nil_chk(baseCat)) isEqual:@"RBR"] && [((NSString *) nil_chk(word)) isEqual:@"in"]) {
          cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"RP");
        }
        else if ([baseCat isEqual:@"NNP"] && [((NSString *) nil_chk(word)) isEqual:@"up"]) {
          cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"RP");
        }
      }
      else if ([baseParentStr isEqual:@"PP"]) {
        if ([((NSString *) nil_chk(parentStr)) isEqual:@"PP-TMP"]) {
          if ([((NSString *) nil_chk(baseCat)) isEqual:@"RP"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"IN");
          }
        }
        if ([((NSString *) nil_chk(word)) isEqual:@"in"] && ([((NSString *) nil_chk(baseCat)) isEqual:@"RP"] || [baseCat isEqual:@"NN"])) {
          cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"IN");
        }
        else if ([((NSString *) nil_chk(baseCat)) isEqual:@"RB"]) {
          if ([word isEqual:@"for"] || [word isEqual:@"After"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"IN");
          }
        }
        else if ([word isEqual:@"if"] && [baseCat isEqual:@"JJ"]) {
          cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"IN");
        }
      }
      else if ([baseParentStr isEqual:@"VP"]) {
        if ([((NSString *) nil_chk(baseCat)) isEqual:@"NNS"]) {
          cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"VBZ");
        }
        else if ([baseCat isEqual:@"IN"]) {
          switch (JreIndexOfStr(word, (id[]){ @"complicated", @"post", @"like", @"off" }, 4)) {
            case 0:
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"VBD");
            break;
            case 1:
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"VB");
            break;
            case 2:
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"VB");
            break;
            case 3:
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"RP");
            break;
          }
        }
        else if ([baseCat isEqual:@"NN"]) {
          if ([((NSString *) nil_chk(word)) hasSuffix:@"ing"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"VBG");
          }
          else if ([word isEqual:@"bid"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"VBN");
          }
          else if ([word isEqual:@"are"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"VBP");
          }
          else if ([word isEqual:@"lure"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"VB");
          }
          else if ([word isEqual:@"cost"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"VBP");
          }
          else if ([word isEqual:@"agreed"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"VBN");
          }
          else if ([word isEqual:@"restructure"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"VB");
          }
          else if ([word isEqual:@"rule"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"VB");
          }
          else if ([word isEqual:@"fret"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"VBP");
          }
          else if ([word isEqual:@"retort"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"VBP");
          }
          else if ([word isEqual:@"draft"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"VB");
          }
          else if ([word isEqual:@"will"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"MD");
          }
          else if ([word isEqual:@"yield"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"VBP");
          }
          else if ([word isEqual:@"lure"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"VBP");
          }
          else if ([word isEqual:@"feel"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"VB");
          }
          else if ([word isEqual:@"institutes"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"VBZ");
          }
          else if ([word isEqual:@"share"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"VBP");
          }
          else if ([word isEqual:@"trade"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"VB");
          }
          else if ([word isEqual:@"beat"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"VBN");
          }
          else if ([word isEqual:@"effect"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"VB");
          }
          else if ([word isEqual:@"speed"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"VB");
          }
          else if ([word isEqual:@"work"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"VB");
          }
          else if ([word isEqual:@"act"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"VBP");
          }
          else if ([word isEqual:@"drop"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"VB");
          }
          else if ([word isEqual:@"stand"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"VBP");
          }
          else if ([word isEqual:@"push"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"VB");
          }
          else if ([word isEqual:@"service"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"VB");
          }
          else if ([word isEqual:@"set"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"VBN");
          }
          else if ([word isEqual:@"appeal"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"VBP");
          }
          else if ([word isEqual:@"mold"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"VB");
          }
          else if ([word isEqual:@"mean"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"VB");
          }
          else if ([word isEqual:@"reconfirm"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"VB");
          }
          else if ([word isEqual:@"land"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"VB");
          }
          else if ([word isEqual:@"point"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"VBP");
          }
          else if ([word isEqual:@"rise"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"VB");
          }
          else if ([word isEqual:@"pressured"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"VBN");
          }
          else if ([word isEqual:@"smell"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"VBP");
          }
          else if ([word isEqual:@"pay"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"VBP");
          }
          else if ([word isEqual:@"hum"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"VB");
          }
          else if ([word isEqual:@"shape"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"VBP");
          }
          else if ([word isEqual:@"benefit"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"VB");
          }
          else if ([word isEqual:@"abducted"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"VBN");
          }
          else if ([word isEqual:@"look"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"VB");
          }
          else if ([word isEqual:@"fare"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"VB");
          }
          else if ([word isEqual:@"change"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"VB");
          }
          else if ([word isEqual:@"farm"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"VB");
          }
          else if ([word isEqual:@"increase"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"VB");
          }
          else if ([word isEqual:@"stem"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"VB");
          }
          else if ([word isEqual:@"rebounded"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"VBD");
          }
          else if ([word isEqual:@"face"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"VB");
          }
        }
        else if ([baseCat isEqual:@"NNP"]) {
          switch (JreIndexOfStr(word, (id[]){ @"GRAB", @"mature", @"Face", @"are", @"Urging", @"Finding", @"say", @"Added", @"Adds", @"BRACED", @"REQUIRED", @"SIZING", @"REVIEW", @"code-named", @"Printed", @"Rated", @"FALTERS", @"Got", @"JUMPING", @"Branching", @"Excluding", @"OKing" }, 22)) {
            case 0:
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"VBP");
            break;
            case 1:
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"VB");
            break;
            case 2:
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"VBP");
            break;
            case 3:
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"VBP");
            break;
            case 4:
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"VBG");
            break;
            case 5:
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"VBG");
            break;
            case 6:
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"VBP");
            break;
            case 7:
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"VBD");
            break;
            case 8:
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"VBZ");
            break;
            case 9:
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"VBD");
            break;
            case 10:
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"VBN");
            break;
            case 11:
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"VBG");
            break;
            case 12:
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"VB");
            break;
            case 13:
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"VBN");
            break;
            case 14:
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"VBN");
            break;
            case 15:
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"VBN");
            break;
            case 16:
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"VBZ");
            break;
            case 17:
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"VBN");
            break;
            case 18:
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"VBG");
            break;
            case 19:
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"VBG");
            break;
            case 20:
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"VBG");
            break;
            case 21:
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"VBG");
            break;
          }
        }
        else if ([baseCat isEqual:@"POS"]) {
          cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"VBZ");
        }
        else if ([baseCat isEqual:@"VBD"]) {
          if ([((NSString *) nil_chk(word)) isEqual:@"heaves"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"VBZ");
          }
        }
        else if ([baseCat isEqual:@"VB"]) {
          if ([((NSString *) nil_chk(word)) isEqual:@"allowed"] || [word isEqual:@"increased"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"VBD");
          }
        }
        else if ([baseCat isEqual:@"VBN"]) {
          if ([((NSString *) nil_chk(word)) isEqual:@"has"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"VBZ");
          }
          else if ([word isEqual:@"grew"] || [word isEqual:@"fell"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"VBD");
          }
        }
        else if ([baseCat isEqual:@"JJ"]) {
          if ([((NSString *) nil_chk(word)) isEqual:@"own"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"VB");
          }
        }
        else if ([((NSString *) nil_chk(word)) equalsIgnoreCase:@"being"]) {
          if (![((NSString *) nil_chk(cat)) isEqual:@"VBG"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"VBG");
          }
        }
        else if ([word equalsIgnoreCase:@"all"]) {
          cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"RB");
        }
      }
      else if ([baseParentStr isEqual:@"S"]) {
        if ([((NSString *) nil_chk(word)) equalsIgnoreCase:@"all"]) {
          cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"RB");
        }
      }
      else if ([baseParentStr isEqual:@"ADJP"]) {
        switch (JreIndexOfStr(baseCat, (id[]){ @"UH", @"JJ", @"RB", @"VB" }, 4)) {
          case 0:
          cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"JJ");
          break;
          case 1:
          if ([((NSString *) nil_chk(word)) equalsIgnoreCase:@"more"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"JJR");
          }
          break;
          case 2:
          if ([((NSString *) nil_chk(word)) equalsIgnoreCase:@"free"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"JJ");
          }
          else if ([word equalsIgnoreCase:@"clear"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"JJ");
          }
          else if ([word equalsIgnoreCase:@"tight"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"JJ");
          }
          else if ([word equalsIgnoreCase:@"sure"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"JJ");
          }
          else if ([word equalsIgnoreCase:@"particular"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"JJ");
          }
          break;
          case 3:
          if ([((NSString *) nil_chk(word)) equalsIgnoreCase:@"stock"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"NN");
          }
          else if ([word equalsIgnoreCase:@"secure"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"JJ");
          }
          break;
        }
      }
      else if ([baseParentStr isEqual:@"QP"]) {
        if ([((NSString *) nil_chk(word)) equalsIgnoreCase:@"about"]) {
          cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"RB");
        }
        else if ([((NSString *) nil_chk(baseCat)) isEqual:@"JJ"]) {
          if ([word equalsIgnoreCase:@"more"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"JJR");
          }
        }
      }
      else if ([baseParentStr isEqual:@"ADVP"]) {
        if ([((NSString *) nil_chk(baseCat)) isEqual:@"EX"]) {
          cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"RB");
        }
        else if ([baseCat isEqual:@"NN"] && [((NSString *) nil_chk(word)) equalsIgnoreCase:@"that"]) {
          cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"DT");
        }
        else if ([baseCat isEqual:@"NNP"] && ([((NSString *) nil_chk(word)) hasSuffix:@"ly"] || [word isEqual:@"Overall"])) {
          cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"RB");
        }
      }
      else if ([baseParentStr isEqual:@"SBAR"]) {
        if (([((NSString *) nil_chk(word)) equalsIgnoreCase:@"that"] || [word equalsIgnoreCase:@"because"] || [word equalsIgnoreCase:@"while"]) && ![((NSString *) nil_chk(baseCat)) isEqual:@"IN"]) {
          cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"IN");
        }
        else if (([word isEqual:@"Though"] || [word isEqual:@"Whether"]) && [((NSString *) nil_chk(baseCat)) isEqual:@"NNP"]) {
          cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"IN");
        }
      }
      else if ([baseParentStr isEqual:@"SBARQ"]) {
        if ([((NSString *) nil_chk(baseCat)) isEqual:@"S"]) {
          if ([((NSString *) nil_chk(word)) equalsIgnoreCase:@"had"]) {
            cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"SQ");
          }
        }
      }
      else if ([((NSString *) nil_chk(baseCat)) isEqual:@"JJS"]) {
        if ([((NSString *) nil_chk(word)) equalsIgnoreCase:@"less"]) {
          cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"JJR");
        }
      }
      else if ([baseCat isEqual:@"JJ"]) {
        if ([((NSString *) nil_chk(word)) equalsIgnoreCase:@"%"]) {
          cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"NN");
        }
        else if ([word equalsIgnoreCase:@"to"]) {
          cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"TO");
        }
      }
      else if ([baseCat isEqual:@"VB"]) {
        if ([((NSString *) nil_chk(word)) equalsIgnoreCase:@"even"]) {
          cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"RB");
        }
      }
      else if ([baseCat isEqual:@","]) {
        switch (JreIndexOfStr(word, (id[]){ @"2", @"an", @"Wa", @"section", @"underwriters" }, 5)) {
          case 0:
          cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"CD");
          break;
          case 1:
          cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"DT");
          break;
          case 2:
          cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"NNP");
          break;
          case 3:
          cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"NN");
          break;
          case 4:
          cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"NNS");
          break;
        }
      }
      else if ([baseCat isEqual:@"CD"]) {
        if ([((NSString *) nil_chk(word)) isEqual:@"high-risk"]) {
          cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"JJ");
        }
      }
      else if ([baseCat isEqual:@"RB"]) {
        if ([((NSString *) nil_chk(word)) isEqual:@"for"]) {
          cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"IN");
        }
      }
      else if ([baseCat isEqual:@"RP"]) {
        if ([((NSString *) nil_chk(word)) isEqual:@"for"]) {
          cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"IN");
        }
      }
      else if ([baseCat isEqual:@"NN"]) {
        if (((jint) [((NSString *) nil_chk(word)) length]) == 2 && [word charAtWithInt:1] == '.' && JavaLangCharacter_isUpperCaseWithChar_([word charAtWithInt:0])) {
          cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"NNP");
        }
        else if ([word isEqual:@"Lorillard"]) {
          cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"NNP");
        }
      }
      else if ([((NSString *) nil_chk(word)) isEqual:@"for"] || [word isEqual:@"at"]) {
        if (![baseCat isEqual:@"IN"]) {
          cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"IN");
        }
      }
      else if ([word equalsIgnoreCase:@"and"] && ![baseCat isEqual:@"CC"]) {
        cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"CC");
      }
      else if ([word isEqual:@"ago"]) {
        if (![baseCat isEqual:@"RB"]) {
          cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"RB");
        }
      }
      baseCat = [((id<EduStanfordNlpTreesTreebankLanguagePack>) nil_chk(tlp_)) basicCategoryWithNSString:cat];
    }
    if (((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->makePPTOintoIN_ > 0 && [((NSString *) nil_chk(baseCat)) isEqual:@"TO"]) {
      if (!([((NSString *) nil_chk(baseParentStr)) isEqual:@"VP"] || [baseParentStr isEqual:@"CONJP"] || [baseParentStr hasPrefix:@"S"])) {
        if (((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->makePPTOintoIN_ == 1) {
          cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"IN");
        }
        else {
          cat = JreStrcat("$$", cat, @"-IN");
        }
      }
    }
    if (((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->splitIN_ == 5 && [((NSString *) nil_chk(baseCat)) isEqual:@"TO"]) {
      if ([((NSString *) nil_chk(grandParentStr)) charAtWithInt:0] == 'N' && ([((NSString *) nil_chk(parentStr)) charAtWithInt:0] == 'P' || [parentStr charAtWithInt:0] == 'A')) {
        cat = JreStrcat("$$", EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"IN"), @"-N");
      }
    }
    if (((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->splitIN_ == 1 && [((NSString *) nil_chk(baseCat)) isEqual:@"IN"] && [((NSString *) nil_chk(parentStr)) charAtWithInt:0] == 'S') {
      cat = JreStrcat("$$", cat, @"^S");
    }
    else if (((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->splitIN_ == 2 && [((NSString *) nil_chk(baseCat)) isEqual:@"IN"]) {
      if ([((NSString *) nil_chk(parentStr)) charAtWithInt:0] == 'S') {
        cat = JreStrcat("$$", cat, @"^S");
      }
      else if ([((NSString *) nil_chk(grandParentStr)) charAtWithInt:0] == 'N') {
        cat = JreStrcat("$$", cat, @"^N");
      }
    }
    else if (((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->splitIN_ == 3 && [((NSString *) nil_chk(baseCat)) isEqual:@"IN"]) {
      if ([((NSString *) nil_chk(grandParentStr)) charAtWithInt:0] == 'N' && ([((NSString *) nil_chk(parentStr)) charAtWithInt:0] == 'P' || [parentStr charAtWithInt:0] == 'A')) {
        cat = JreStrcat("$$", cat, @"-N");
      }
      else if ([((NSString *) nil_chk(parentStr)) charAtWithInt:0] == 'Q' && ([grandParentStr charAtWithInt:0] == 'N' || [grandParentStr hasPrefix:@"ADJP"])) {
        cat = JreStrcat("$$", cat, @"-Q");
      }
      else if ([grandParentStr isEqual:@"S"]) {
        if ([((NSString *) nil_chk(baseParentStr)) isEqual:@"SBAR"]) {
          cat = JreStrcat("$$", cat, @"-SCC");
        }
        else {
          cat = JreStrcat("$$", cat, @"-SC");
        }
      }
      else if ([((NSString *) nil_chk(baseParentStr)) isEqual:@"SBAR"] || [baseParentStr isEqual:@"WHNP"]) {
        cat = JreStrcat("$$", cat, @"-T");
      }
    }
    else if (((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->splitIN_ >= 4 && englishTrain_->splitIN_ <= 5 && [((NSString *) nil_chk(baseCat)) isEqual:@"IN"]) {
      if ([((NSString *) nil_chk(grandParentStr)) charAtWithInt:0] == 'N' && ([((NSString *) nil_chk(parentStr)) charAtWithInt:0] == 'P' || [parentStr charAtWithInt:0] == 'A')) {
        cat = JreStrcat("$$", cat, @"-N");
      }
      else if ([((NSString *) nil_chk(parentStr)) charAtWithInt:0] == 'Q' && ([grandParentStr charAtWithInt:0] == 'N' || [grandParentStr hasPrefix:@"ADJP"])) {
        cat = JreStrcat("$$", cat, @"-Q");
      }
      else if ([((NSString *) nil_chk(baseGrandParentStr)) charAtWithInt:0] == 'S' && ![baseGrandParentStr isEqual:@"SBAR"]) {
        if ([((NSString *) nil_chk(baseParentStr)) isEqual:@"SBAR"]) {
          cat = JreStrcat("$$", cat, @"-SCC");
        }
        else if (![baseParentStr isEqual:@"NP"] && ![baseParentStr isEqual:@"ADJP"]) {
          cat = JreStrcat("$$", cat, @"-SC");
        }
      }
      else if ([((NSString *) nil_chk(baseParentStr)) isEqual:@"SBAR"] || [baseParentStr isEqual:@"WHNP"] || [baseParentStr isEqual:@"WHADVP"]) {
        cat = JreStrcat("$$", cat, @"-T");
      }
    }
    else if (((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->splitIN_ == 6 && [((NSString *) nil_chk(baseCat)) isEqual:@"IN"]) {
      if ([((NSString *) nil_chk(grandParentStr)) charAtWithInt:0] == 'V' || [grandParentStr charAtWithInt:0] == 'A') {
        cat = JreStrcat("$$", cat, @"-V");
      }
      else if ([grandParentStr charAtWithInt:0] == 'N' && ([((NSString *) nil_chk(parentStr)) charAtWithInt:0] == 'P' || [parentStr charAtWithInt:0] == 'A')) {
      }
      else if ([((NSString *) nil_chk(parentStr)) charAtWithInt:0] == 'Q' && ([grandParentStr charAtWithInt:0] == 'N' || [grandParentStr hasPrefix:@"ADJP"])) {
        cat = JreStrcat("$$", cat, @"-Q");
      }
      else if ([((NSString *) nil_chk(baseGrandParentStr)) charAtWithInt:0] == 'S' && ![baseGrandParentStr isEqual:@"SBAR"]) {
        if ([((NSString *) nil_chk(baseParentStr)) isEqual:@"SBAR"]) {
          cat = JreStrcat("$$", cat, @"-SCC");
        }
        else if (![baseParentStr isEqual:@"NP"] && ![baseParentStr isEqual:@"ADJP"]) {
          cat = JreStrcat("$$", cat, @"-SC");
        }
      }
      else if ([((NSString *) nil_chk(baseParentStr)) isEqual:@"SBAR"] || [baseParentStr isEqual:@"WHNP"] || [baseParentStr isEqual:@"WHADVP"]) {
        cat = JreStrcat("$$", cat, @"-T");
      }
    }
    if (((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->splitPercent_ && [((NSString *) nil_chk(word)) isEqual:@"%"]) {
      (void) JreStrAppendStrong(&cat, "$", @"-%");
    }
    if (((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->splitNNP_ > 0 && [((NSString *) nil_chk(baseCat)) hasPrefix:@"NNP"]) {
      if (((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->splitNNP_ == 1) {
        if ([((NSString *) nil_chk(baseCat)) isEqual:@"NNP"]) {
          if ([((EduStanfordNlpTreesTree *) nil_chk(parent)) numChildren] == 1) {
            (void) JreStrAppendStrong(&cat, "$", @"-S");
          }
          else if ([((EduStanfordNlpTreesTree *) nil_chk([parent firstChild])) isEqual:t]) {
            (void) JreStrAppendStrong(&cat, "$", @"-L");
          }
          else if ([((EduStanfordNlpTreesTree *) nil_chk([parent lastChild])) isEqual:t]) {
            (void) JreStrAppendStrong(&cat, "$", @"-R");
          }
          else {
            (void) JreStrAppendStrong(&cat, "$", @"-I");
          }
        }
      }
      else if (englishTrain_->splitNNP_ == 2) {
        if ([((NSString *) nil_chk(word)) matches:@"[A-Z]\\.?"]) {
          cat = JreStrcat("$$", cat, @"-I");
        }
        else if (EduStanfordNlpParserLexparserEnglishTreebankParserParams_firstOfSeveralNNPWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_(parent, t)) {
          cat = JreStrcat("$$", cat, @"-B");
        }
        else if (EduStanfordNlpParserLexparserEnglishTreebankParserParams_lastOfSeveralNNPWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_(parent, t)) {
          cat = JreStrcat("$$", cat, @"-E");
        }
      }
    }
    if (((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->splitQuotes_ && ([((NSString *) nil_chk(word)) isEqual:@"'"] || [word isEqual:@"`"])) {
      (void) JreStrAppendStrong(&cat, "$", @"-SG");
    }
    if (((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->splitSFP_ && [((NSString *) nil_chk(baseTag)) isEqual:@"."]) {
      if ([((NSString *) nil_chk(word)) isEqual:@"?"]) {
        (void) JreStrAppendStrong(&cat, "$", @"-QUES");
      }
      else if ([word isEqual:@"!"]) {
        (void) JreStrAppendStrong(&cat, "$", @"-EXCL");
      }
    }
    if (((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->tagRBGPA_) {
      if ([((NSString *) nil_chk(baseCat)) isEqual:@"RB"]) {
        cat = JreStrcat("$C$", cat, '^', baseGrandParentStr);
      }
    }
    if (((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->joinPound_ && [((NSString *) nil_chk(baseCat)) isEqual:@"#"]) {
      cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"$");
    }
    if (((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->joinNounTags_) {
      if ([((NSString *) nil_chk(baseCat)) isEqual:@"NNP"]) {
        cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"NN");
      }
      else if ([baseCat isEqual:@"NNPS"]) {
        cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"NNS");
      }
    }
    if (((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->joinJJ_ && [((NSString *) nil_chk(cat)) hasPrefix:@"JJ"]) {
      cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"JJ");
    }
    if (((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->splitPPJJ_ && [((NSString *) nil_chk(cat)) hasPrefix:@"JJ"] && [((NSString *) nil_chk(parentStr)) hasPrefix:@"PP"]) {
      cat = JreStrcat("$$", cat, @"^S");
    }
    if (((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->splitTRJJ_ && [((NSString *) nil_chk(cat)) hasPrefix:@"JJ"] && ([((NSString *) nil_chk(parentStr)) hasPrefix:@"PP"] || [parentStr hasPrefix:@"ADJP"]) && [((id<EduStanfordNlpTreesHeadFinder>) nil_chk([self headFinder])) determineHeadWithEduStanfordNlpTreesTree:parent] == t) {
      IOSObjectArray *kids = [((EduStanfordNlpTreesTree *) nil_chk(parent)) children];
      jboolean foundJJ = false;
      jint i = 0;
      for (; i < ((IOSObjectArray *) nil_chk(kids))->size_ && !foundJJ; i++) {
        if ([((NSString *) nil_chk([((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(IOSObjectArray_Get(kids, i))) label])) value])) hasPrefix:@"JJ"]) {
          foundJJ = true;
        }
      }
      if (foundJJ) {
        for (jint j = i; j < kids->size_; j++) {
          if ([((NSString *) nil_chk([((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(IOSObjectArray_Get(kids, j))) label])) value])) hasPrefix:@"NP"]) {
            cat = JreStrcat("$$", cat, @"^T");
            break;
          }
        }
      }
    }
    if (((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->splitJJCOMP_ && [((NSString *) nil_chk(cat)) hasPrefix:@"JJ"] && ([((NSString *) nil_chk(parentStr)) hasPrefix:@"PP"] || [parentStr hasPrefix:@"ADJP"]) && [((id<EduStanfordNlpTreesHeadFinder>) nil_chk([self headFinder])) determineHeadWithEduStanfordNlpTreesTree:parent] == t) {
      IOSObjectArray *kids = [((EduStanfordNlpTreesTree *) nil_chk(parent)) children];
      jint i = 0;
      for (jboolean foundJJ = false; i < ((IOSObjectArray *) nil_chk(kids))->size_ && !foundJJ; i++) {
        if ([((NSString *) nil_chk([((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(IOSObjectArray_Get(kids, i))) label])) value])) hasPrefix:@"JJ"]) {
          foundJJ = true;
        }
      }
      for (jint j = i; j < kids->size_; j++) {
        NSString *kid = [((id<EduStanfordNlpTreesTreebankLanguagePack>) nil_chk(tlp_)) basicCategoryWithNSString:[((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(IOSObjectArray_Get(kids, j))) label])) value]];
        if ([@"S" isEqual:kid] || [@"SBAR" isEqual:kid] || [@"PP" isEqual:kid] || [@"NP" isEqual:kid]) {
          cat = JreStrcat("$$", cat, @"^CMPL");
          break;
        }
      }
    }
    if (((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->splitMoreLess_) {
      jchar ch = [((NSString *) nil_chk(cat)) charAtWithInt:0];
      if (ch == 'R' || ch == 'J' || ch == 'C') {
        if ([((NSString *) nil_chk(word)) equalsIgnoreCase:@"more"] || [word equalsIgnoreCase:@"most"] || [word equalsIgnoreCase:@"less"] || [word equalsIgnoreCase:@"least"]) {
          cat = JreStrcat("$$", cat, @"-ML");
        }
      }
    }
    if (((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->unaryDT_ && [((NSString *) nil_chk(cat)) hasPrefix:@"DT"]) {
      if (((IOSObjectArray *) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(parent)) children]))->size_ == 1) {
        cat = JreStrcat("$$", cat, @"^U");
      }
    }
    if (((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->unaryRB_ && [((NSString *) nil_chk(cat)) hasPrefix:@"RB"]) {
      if (((IOSObjectArray *) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(parent)) children]))->size_ == 1) {
        cat = JreStrcat("$$", cat, @"^U");
      }
    }
    if (((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->markReflexivePRP_ && [((NSString *) nil_chk(cat)) hasPrefix:@"PRP"]) {
      if ([((NSString *) nil_chk(word)) equalsIgnoreCase:@"itself"] || [word equalsIgnoreCase:@"themselves"] || [word equalsIgnoreCase:@"himself"] || [word equalsIgnoreCase:@"herself"] || [word equalsIgnoreCase:@"ourselves"] || [word equalsIgnoreCase:@"yourself"] || [word equalsIgnoreCase:@"yourselves"] || [word equalsIgnoreCase:@"myself"] || [word equalsIgnoreCase:@"thyself"]) {
        (void) JreStrAppendStrong(&cat, "$", @"-SE");
      }
    }
    if (((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->unaryPRP_ && [((NSString *) nil_chk(cat)) hasPrefix:@"PRP"]) {
      if (((IOSObjectArray *) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(parent)) children]))->size_ == 1) {
        cat = JreStrcat("$$", cat, @"^U");
      }
    }
    if (((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->unaryIN_ && [((NSString *) nil_chk(cat)) hasPrefix:@"IN"]) {
      if (((IOSObjectArray *) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(parent)) children]))->size_ == 1) {
        cat = JreStrcat("$$", cat, @"^U");
      }
    }
    if (((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->splitCC_ > 0 && [((NSString *) nil_chk(baseCat)) isEqual:@"CC"]) {
      if (((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->splitCC_ == 1 && ([((NSString *) nil_chk(word)) isEqual:@"and"] || [word isEqual:@"or"])) {
        cat = JreStrcat("$$", cat, @"-C");
      }
      else if (((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->splitCC_ == 2) {
        if ([((NSString *) nil_chk(word)) equalsIgnoreCase:@"but"]) {
          cat = JreStrcat("$$", cat, @"-B");
        }
        else if ([word isEqual:@"&"]) {
          cat = JreStrcat("$$", cat, @"-A");
        }
      }
      else if (englishTrain_->splitCC_ == 3 && [((NSString *) nil_chk(word)) equalsIgnoreCase:@"and"]) {
        cat = JreStrcat("$$", cat, @"-A");
      }
    }
    if (((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->splitNOT_ && [((NSString *) nil_chk(baseCat)) isEqual:@"RB"] && ([((NSString *) nil_chk(word)) equalsIgnoreCase:@"n't"] || [word equalsIgnoreCase:@"not"] || [word equalsIgnoreCase:@"nt"])) {
      cat = JreStrcat("$$", cat, @"-N");
    }
    else if (((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->splitRB_ && [((NSString *) nil_chk(baseCat)) isEqual:@"RB"] && ([((NSString *) nil_chk(baseParentStr)) isEqual:@"NP"] || [baseParentStr isEqual:@"QP"] || [baseParentStr isEqual:@"ADJP"])) {
      cat = JreStrcat("$$", cat, @"^M");
    }
    if (((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->splitAux_ > 1 && ([((NSString *) nil_chk(baseCat)) isEqual:@"VBZ"] || [baseCat isEqual:@"VBP"] || [baseCat isEqual:@"VBD"] || [baseCat isEqual:@"VBN"] || [baseCat isEqual:@"VBG"] || [baseCat isEqual:@"VB"])) {
      if ([((NSString *) nil_chk(word)) equalsIgnoreCase:@"'s"] || [word equalsIgnoreCase:@"s"]) {
        IOSObjectArray *sisters = [((EduStanfordNlpTreesTree *) nil_chk(parent)) children];
        jint i = 0;
        for (jboolean foundMe = false; i < ((IOSObjectArray *) nil_chk(sisters))->size_ && !foundMe; i++) {
          if ([((NSString *) nil_chk([((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(IOSObjectArray_Get(sisters, i))) label])) value])) hasPrefix:@"VBZ"]) {
            foundMe = true;
          }
        }
        jboolean annotateHave = false;
        for (jint j = i; j < sisters->size_; j++) {
          if ([((NSString *) nil_chk([((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(IOSObjectArray_Get(sisters, j))) label])) value])) hasPrefix:@"VP"]) {
            {
              IOSObjectArray *a__ = [((EduStanfordNlpTreesTree *) nil_chk(IOSObjectArray_Get(sisters, j))) children];
              EduStanfordNlpTreesTree * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
              EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
              while (b__ < e__) {
                EduStanfordNlpTreesTree *kid = *b__++;
                if ([((NSString *) nil_chk([((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(kid)) label])) value])) hasPrefix:@"VBN"] || [((NSString *) nil_chk([((id<EduStanfordNlpLingLabel>) nil_chk([kid label])) value])) hasPrefix:@"VBD"]) {
                  annotateHave = true;
                }
              }
            }
          }
        }
        if (annotateHave) {
          cat = JreStrcat("$$", cat, @"-HV");
        }
        else {
          cat = JreStrcat("$$", cat, @"-BE");
        }
      }
      else {
        if ([word equalsIgnoreCase:@"am"] || [word equalsIgnoreCase:@"is"] || [word equalsIgnoreCase:@"are"] || [word equalsIgnoreCase:@"was"] || [word equalsIgnoreCase:@"were"] || [word equalsIgnoreCase:@"'m"] || [word equalsIgnoreCase:@"'re"] || [word equalsIgnoreCase:@"be"] || [word equalsIgnoreCase:@"being"] || [word equalsIgnoreCase:@"been"] || [word equalsIgnoreCase:@"ai"]) {
          cat = JreStrcat("$$", cat, @"-BE");
        }
        else if ([word equalsIgnoreCase:@"have"] || [word equalsIgnoreCase:@"'ve"] || [word equalsIgnoreCase:@"having"] || [word equalsIgnoreCase:@"has"] || [word equalsIgnoreCase:@"had"] || [word equalsIgnoreCase:@"'d"]) {
          cat = JreStrcat("$$", cat, @"-HV");
        }
        else if (((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->splitAux_ >= 3 && ([word equalsIgnoreCase:@"do"] || [word equalsIgnoreCase:@"did"] || [word equalsIgnoreCase:@"does"] || [word equalsIgnoreCase:@"done"] || [word equalsIgnoreCase:@"doing"])) {
          cat = JreStrcat("$$", cat, @"-DO");
        }
        else if (((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->splitAux_ >= 4 && ([word equalsIgnoreCase:@"help"] || [word equalsIgnoreCase:@"helps"] || [word equalsIgnoreCase:@"helped"] || [word equalsIgnoreCase:@"helping"])) {
          cat = JreStrcat("$$", cat, @"-DO");
        }
        else if (((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->splitAux_ >= 5 && ([word equalsIgnoreCase:@"let"] || [word equalsIgnoreCase:@"lets"] || [word equalsIgnoreCase:@"letting"])) {
          cat = JreStrcat("$$", cat, @"-DO");
        }
        else if (((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->splitAux_ >= 6 && ([word equalsIgnoreCase:@"make"] || [word equalsIgnoreCase:@"makes"] || [word equalsIgnoreCase:@"making"] || [word equalsIgnoreCase:@"made"])) {
          cat = JreStrcat("$$", cat, @"-DO");
        }
        else if (((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->splitAux_ >= 7 && ([word equalsIgnoreCase:@"watch"] || [word equalsIgnoreCase:@"watches"] || [word equalsIgnoreCase:@"watching"] || [word equalsIgnoreCase:@"watched"] || [word equalsIgnoreCase:@"see"] || [word equalsIgnoreCase:@"sees"] || [word equalsIgnoreCase:@"seeing"] || [word equalsIgnoreCase:@"saw"] || [word equalsIgnoreCase:@"seen"])) {
          cat = JreStrcat("$$", cat, @"-DO");
        }
        else if (((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->splitAux_ >= 8 && ([word equalsIgnoreCase:@"go"] || [word equalsIgnoreCase:@"come"])) {
          cat = JreStrcat("$$", cat, @"-DO");
        }
        else if (((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->splitAux_ >= 9 && ([word equalsIgnoreCase:@"get"] || [word equalsIgnoreCase:@"gets"] || [word equalsIgnoreCase:@"getting"] || [word equalsIgnoreCase:@"got"] || [word equalsIgnoreCase:@"gotten"])) {
          cat = JreStrcat("$$", cat, @"-BE");
        }
      }
    }
    else if (((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->splitAux_ > 0 && ([((NSString *) nil_chk(baseCat)) isEqual:@"VBZ"] || [baseCat isEqual:@"VBP"] || [baseCat isEqual:@"VBD"] || [baseCat isEqual:@"VBN"] || [baseCat isEqual:@"VBG"] || [baseCat isEqual:@"VB"])) {
      if ([((NSString *) nil_chk(word)) equalsIgnoreCase:@"is"] || [word equalsIgnoreCase:@"am"] || [word equalsIgnoreCase:@"are"] || [word equalsIgnoreCase:@"was"] || [word equalsIgnoreCase:@"were"] || [word equalsIgnoreCase:@"'m"] || [word equalsIgnoreCase:@"'re"] || [word equalsIgnoreCase:@"'s"] || [word equalsIgnoreCase:@"being"] || [word equalsIgnoreCase:@"be"] || [word equalsIgnoreCase:@"been"]) {
        cat = JreStrcat("$$", cat, @"-BE");
      }
      if ([word equalsIgnoreCase:@"have"] || [word equalsIgnoreCase:@"'ve"] || [word equalsIgnoreCase:@"having"] || [word equalsIgnoreCase:@"has"] || [word equalsIgnoreCase:@"had"] || [word equalsIgnoreCase:@"'d"]) {
        cat = JreStrcat("$$", cat, @"-HV");
      }
    }
    if (((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->collapseWhCategories_ != 0) {
      if ((englishTrain_->collapseWhCategories_ & 1) != 0) {
        cat = [((NSString *) nil_chk(cat)) replaceAll:@"WH(NP|PP|ADVP|ADJP)" withReplacement:@"$1"];
      }
      if ((((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->collapseWhCategories_ & 2) != 0) {
        cat = [((NSString *) nil_chk(cat)) replaceAll:@"WP" withReplacement:@"PRP"];
        cat = [((NSString *) nil_chk(cat)) replaceAll:@"WDT" withReplacement:@"DT"];
        cat = [((NSString *) nil_chk(cat)) replaceAll:@"WRB" withReplacement:@"RB"];
      }
      if ((((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->collapseWhCategories_ & 4) != 0) {
        cat = [((NSString *) nil_chk(cat)) replaceAll:@"WH(PP|ADVP|ADJP)" withReplacement:@"$1"];
      }
    }
    if (((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->markDitransV_ > 0 && [((NSString *) nil_chk(cat)) hasPrefix:@"VB"]) {
      (void) JreStrAppendStrong(&cat, "$", EduStanfordNlpParserLexparserEnglishTreebankParserParams_ditransWithEduStanfordNlpTreesTree_(self, parent));
    }
    else if (((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->vpSubCat_ && [((NSString *) nil_chk(cat)) hasPrefix:@"VB"]) {
      cat = JreStrcat("$$", cat, EduStanfordNlpParserLexparserEnglishTreebankParserParams_subCatifyWithEduStanfordNlpTreesTree_(parent));
    }
    tag = cat;
  }
  else {
    IOSObjectArray *kids = [t children];
    if ([((NSString *) nil_chk(baseCat)) isEqual:@"VP"]) {
      if (((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->gpaRootVP_) {
        if ([((id<EduStanfordNlpTreesTreebankLanguagePack>) nil_chk(tlp_)) isStartSymbolWithNSString:baseGrandParentStr]) {
          cat = JreStrcat("$$", cat, @"~ROOT");
        }
      }
      if (((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->splitVPNPAgr_) {
        switch (JreIndexOfStr(baseTag, (id[]){ @"VBD", @"MD", @"VBZ", @"TO", @"VBG", @"VBP", @"VBN", @"VB" }, 8)) {
          case 0:
          case 1:
          cat = JreStrcat("$$", cat, @"-VBF");
          break;
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
          case 7:
          cat = JreStrcat("$C$", cat, '-', baseTag);
          break;
          default:
          [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$@$$C$", @"XXXX Head of ", t, @" is ", word, '/', baseTag)];
          break;
        }
      }
      else if (englishTrain_->splitVP_ == 3 || englishTrain_->splitVP_ == 4) {
        if ([((NSString *) nil_chk(baseTag)) isEqual:@"VBZ"] || [baseTag isEqual:@"VBD"] || [baseTag isEqual:@"VBP"] || [baseTag isEqual:@"MD"]) {
          cat = JreStrcat("$$", cat, @"-VBF");
        }
        else if ([baseTag isEqual:@"TO"] || [baseTag isEqual:@"VBG"] || [baseTag isEqual:@"VBN"] || [baseTag isEqual:@"VB"]) {
          cat = JreStrcat("$C$", cat, '-', baseTag);
        }
        else if (((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->splitVP_ == 4) {
          NSString *dTag = EduStanfordNlpParserLexparserEnglishTreebankParserParams_deduceTagWithNSString_(word);
          cat = JreStrcat("$C$", cat, '-', dTag);
        }
      }
      else if (englishTrain_->splitVP_ == 2) {
        if ([((NSString *) nil_chk(baseTag)) isEqual:@"VBZ"] || [baseTag isEqual:@"VBD"] || [baseTag isEqual:@"VBP"] || [baseTag isEqual:@"MD"]) {
          cat = JreStrcat("$$", cat, @"-VBF");
        }
        else {
          cat = JreStrcat("$C$", cat, '-', baseTag);
        }
      }
      else if (englishTrain_->splitVP_ == 1) {
        cat = JreStrcat("$C$", cat, '-', baseTag);
      }
    }
    if (((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->dominatesV_ > 0) {
      if (englishTrain_->dominatesV_ == 2) {
        if (EduStanfordNlpParserLexparserEnglishTreebankParserParams_hasClausalVWithEduStanfordNlpTreesTree_(t)) {
          cat = JreStrcat("$$", cat, @"-v");
        }
      }
      else if (englishTrain_->dominatesV_ == 3) {
        if (EduStanfordNlpParserLexparserEnglishTreebankParserParams_hasVWithJavaUtilList_([t preTerminalYield]) && ![baseCat isEqual:@"WHPP"] && ![baseCat isEqual:@"RRC"] && ![baseCat isEqual:@"QP"] && ![baseCat isEqual:@"PRT"]) {
          cat = JreStrcat("$$", cat, @"-v");
        }
      }
      else {
        if (EduStanfordNlpParserLexparserEnglishTreebankParserParams_hasVWithJavaUtilList_([t preTerminalYield])) {
          cat = JreStrcat("$$", cat, @"-v");
        }
      }
    }
    if (((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->dominatesI_ && EduStanfordNlpParserLexparserEnglishTreebankParserParams_hasIWithJavaUtilList_([t preTerminalYield])) {
      cat = JreStrcat("$$", cat, @"-i");
    }
    if (((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->dominatesC_ && EduStanfordNlpParserLexparserEnglishTreebankParserParams_hasCWithJavaUtilList_([t preTerminalYield])) {
      cat = JreStrcat("$$", cat, @"-c");
    }
    if (((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->splitNPpercent_ > 0 && [((NSString *) nil_chk(word)) isEqual:@"%"]) {
      if ([baseCat isEqual:@"NP"] || (((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->splitNPpercent_ > 1 && [baseCat isEqual:@"ADJP"]) || (((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->splitNPpercent_ > 2 && [baseCat isEqual:@"QP"]) || ((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->splitNPpercent_ > 3) {
        (void) JreStrAppendStrong(&cat, "$", @"-%");
      }
    }
    if (((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->splitNPPRP_ && [((NSString *) nil_chk(baseTag)) isEqual:@"PRP"]) {
      (void) JreStrAppendStrong(&cat, "$", @"-PRON");
    }
    if (((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->splitSbar_ > 0 && [baseCat isEqual:@"SBAR"]) {
      jboolean foundIn = false;
      jboolean foundOrder = false;
      jboolean infinitive = [((NSString *) nil_chk(baseTag)) isEqual:@"TO"];
      {
        IOSObjectArray *a__ = kids;
        EduStanfordNlpTreesTree * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
        EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          EduStanfordNlpTreesTree *kid = *b__++;
          if ([((EduStanfordNlpTreesTree *) nil_chk(kid)) isPreTerminal] && [((NSString *) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(IOSObjectArray_Get(nil_chk([kid children]), 0))) value])) equalsIgnoreCase:@"in"]) {
            foundIn = true;
          }
          if ([kid isPreTerminal] && [((NSString *) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(IOSObjectArray_Get(nil_chk([kid children]), 0))) value])) equalsIgnoreCase:@"order"]) {
            foundOrder = true;
          }
        }
      }
      if (((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->splitSbar_ > 1 && infinitive) {
        cat = JreStrcat("$$", cat, @"-INF");
      }
      if ((englishTrain_->splitSbar_ == 1 || englishTrain_->splitSbar_ == 3) && foundIn && foundOrder) {
        cat = JreStrcat("$$", cat, @"-PURP");
      }
    }
    if (((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->splitNPNNP_ > 0) {
      if (englishTrain_->splitNPNNP_ == 1 && [baseCat isEqual:@"NP"] && [((NSString *) nil_chk(baseTag)) isEqual:@"NNP"]) {
        cat = JreStrcat("$$", cat, @"-NNP");
      }
      else if (((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->splitNPNNP_ == 2 && [baseCat isEqual:@"NP"] && [((NSString *) nil_chk(baseTag)) hasPrefix:@"NNP"]) {
        cat = JreStrcat("$$", cat, @"-NNP");
      }
      else if (((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->splitNPNNP_ == 3 && [baseCat isEqual:@"NP"]) {
        jboolean split = false;
        {
          IOSObjectArray *a__ = kids;
          EduStanfordNlpTreesTree * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
          EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
          while (b__ < e__) {
            EduStanfordNlpTreesTree *kid = *b__++;
            if ([((NSString *) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(kid)) value])) hasPrefix:@"NNP"]) {
              split = true;
              break;
            }
          }
        }
        if (split) {
          cat = JreStrcat("$$", cat, @"-NNP");
        }
      }
    }
    if (((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->collapseWhCategories_ != 0) {
      if ((englishTrain_->collapseWhCategories_ & 1) != 0) {
        cat = [((NSString *) nil_chk(cat)) replaceAll:@"WH(NP|PP|ADVP|ADJP)" withReplacement:@"$1"];
      }
      if ((((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->collapseWhCategories_ & 2) != 0) {
        cat = [((NSString *) nil_chk(cat)) replaceAll:@"WP" withReplacement:@"PRP"];
        cat = [((NSString *) nil_chk(cat)) replaceAll:@"WDT" withReplacement:@"DT"];
        cat = [((NSString *) nil_chk(cat)) replaceAll:@"WRB" withReplacement:@"RB"];
      }
      if ((((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->collapseWhCategories_ & 4) != 0) {
        cat = [((NSString *) nil_chk(cat)) replaceAll:@"WH(PP|ADVP|ADJP)" withReplacement:@"$1"];
      }
    }
    if (((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->splitVPNPAgr_ && [baseCat isEqual:@"NP"] && [((NSString *) nil_chk(baseParentStr)) hasPrefix:@"S"]) {
      if ([((NSString *) nil_chk(baseTag)) isEqual:@"NNPS"] || [baseTag isEqual:@"NNS"]) {
        cat = JreStrcat("$$", cat, @"-PL");
      }
      else if ([((NSString *) nil_chk(word)) equalsIgnoreCase:@"many"] || [word equalsIgnoreCase:@"more"] || [word equalsIgnoreCase:@"most"] || [word equalsIgnoreCase:@"plenty"]) {
        cat = JreStrcat("$$", cat, @"-PL");
      }
      else if ([baseTag isEqual:@"NN"] || [baseTag isEqual:@"NNP"] || [baseTag isEqual:@"POS"] || [baseTag isEqual:@"CD"] || [baseTag isEqual:@"PRP$"] || [baseTag isEqual:@"JJ"] || [baseTag isEqual:@"EX"] || [baseTag isEqual:@"$"] || [baseTag isEqual:@"RB"] || [baseTag isEqual:@"FW"] || [baseTag isEqual:@"VBG"] || [baseTag isEqual:@"JJS"] || [baseTag isEqual:@"JJR"]) {
      }
      else if ([baseTag isEqual:@"PRP"]) {
        if ([word equalsIgnoreCase:@"they"] || [word equalsIgnoreCase:@"them"] || [word equalsIgnoreCase:@"we"] || [word equalsIgnoreCase:@"us"]) {
          cat = JreStrcat("$$", cat, @"-PL");
        }
      }
      else if ([baseTag isEqual:@"DT"] || [baseTag isEqual:@"WDT"]) {
        if ([word equalsIgnoreCase:@"these"] || [word equalsIgnoreCase:@"those"] || [word equalsIgnoreCase:@"several"]) {
          (void) JreStrAppendStrong(&cat, "$", @"-PL");
        }
      }
      else {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$@$$C$", @"XXXX Head of ", t, @" is ", word, '/', baseTag)];
      }
    }
    if (((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->splitSTag_ > 0 && ([baseCat isEqual:@"S"] || (((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->splitSTag_ <= 3 && ([baseCat isEqual:@"SINV"] || [baseCat isEqual:@"SQ"])))) {
      if (((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->splitSTag_ == 1) {
        cat = JreStrcat("$C$", cat, '-', baseTag);
      }
      else if ([((NSString *) nil_chk(baseTag)) isEqual:@"VBZ"] || [baseTag isEqual:@"VBD"] || [baseTag isEqual:@"VBP"] || [baseTag isEqual:@"MD"]) {
        cat = JreStrcat("$$", cat, @"-VBF");
      }
      else if ((((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->splitSTag_ == 3 || englishTrain_->splitSTag_ == 5) && (([baseTag isEqual:@"TO"] || [baseTag isEqual:@"VBG"] || [baseTag isEqual:@"VBN"] || [baseTag isEqual:@"VB"]))) {
        cat = JreStrcat("$$", cat, @"-VBNF");
      }
    }
    if (((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->markContainedVP_ && EduStanfordNlpParserLexparserEnglishTreebankParserParams_containsVPWithEduStanfordNlpTreesTree_(self, t)) {
      cat = JreStrcat("$$", cat, @"-vp");
    }
    if (((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->markCC_ > 0) {
      for (jint i = 1; i < ((IOSObjectArray *) nil_chk(kids))->size_ - 1; i++) {
        NSString *cat2 = [((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(IOSObjectArray_Get(kids, i))) label])) value];
        if ([((NSString *) nil_chk(cat2)) hasPrefix:@"CC"]) {
          NSString *word2 = [((EduStanfordNlpTreesTree *) nil_chk(IOSObjectArray_Get(nil_chk([((EduStanfordNlpTreesTree *) nil_chk(IOSObjectArray_Get(kids, i))) children]), 0))) value];
          if (!([((NSString *) nil_chk(word2)) isEqual:@"either"] || [word2 isEqual:@"both"] || [word2 isEqual:@"neither"])) {
            cat = JreStrcat("$$", cat, @"-CC");
            break;
          }
          else {
          }
        }
        else if (((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->markCC_ > 1 && [cat2 hasPrefix:@"CONJP"]) {
          cat = JreStrcat("$$", cat, @"-CC");
          break;
        }
      }
    }
    if (((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->splitSGapped_ == 1 && [baseCat isEqual:@"S"] && ![((NSString *) nil_chk([((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(IOSObjectArray_Get(nil_chk(kids), 0))) label])) value])) hasPrefix:@"NP"]) {
      cat = JreStrcat("$$", cat, @"-G");
    }
    else if (((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->splitSGapped_ == 2 && [baseCat isEqual:@"S"]) {
      jboolean seenPredCat = false;
      jint seenNP = 0;
      {
        IOSObjectArray *a__ = kids;
        EduStanfordNlpTreesTree * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
        EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          EduStanfordNlpTreesTree *kid = *b__++;
          NSString *cat2 = [((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(kid)) label])) value];
          if ([((NSString *) nil_chk(cat2)) hasPrefix:@"NP"]) {
            seenNP++;
          }
          else if ([cat2 hasPrefix:@"VP"] || [cat2 hasPrefix:@"ADJP"] || [cat2 hasPrefix:@"PP"] || [cat2 hasPrefix:@"UCP"]) {
            seenPredCat = true;
          }
        }
      }
      if (seenNP == 0 || (seenNP == 1 && !seenPredCat)) {
        cat = JreStrcat("$$", cat, @"-G");
      }
    }
    else if (((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->splitSGapped_ == 3 && [baseCat isEqual:@"S"]) {
      jboolean seenPredCat = false;
      jboolean seenCC = false;
      jboolean seenS = false;
      jint seenNP = 0;
      {
        IOSObjectArray *a__ = kids;
        EduStanfordNlpTreesTree * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
        EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          EduStanfordNlpTreesTree *kid = *b__++;
          NSString *cat2 = [((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(kid)) label])) value];
          if ([((NSString *) nil_chk(cat2)) hasPrefix:@"NP"]) {
            seenNP++;
          }
          else if ([cat2 hasPrefix:@"VP"] || [cat2 hasPrefix:@"ADJP"] || [cat2 hasPrefix:@"PP"] || [cat2 hasPrefix:@"UCP"]) {
            seenPredCat = true;
          }
          else if ([cat2 hasPrefix:@"CC"]) {
            seenCC = true;
          }
          else if ([cat2 hasPrefix:@"S"]) {
            seenS = true;
          }
        }
      }
      if ((!(seenCC && seenS)) && (seenNP == 0 || (seenNP == 1 && !seenPredCat))) {
        cat = JreStrcat("$$", cat, @"-G");
      }
    }
    else if (((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->splitSGapped_ == 4 && [baseCat isEqual:@"S"]) {
      jboolean seenPredCat = false;
      jboolean sawSBeforePredCat = false;
      jint seenS = 0;
      jint seenNP = 0;
      {
        IOSObjectArray *a__ = kids;
        EduStanfordNlpTreesTree * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
        EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          EduStanfordNlpTreesTree *kid = *b__++;
          NSString *cat2 = [((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(kid)) label])) value];
          if ([((NSString *) nil_chk(cat2)) hasPrefix:@"NP"]) {
            seenNP++;
          }
          else if ([cat2 hasPrefix:@"VP"] || [cat2 hasPrefix:@"ADJP"] || [cat2 hasPrefix:@"PP"] || [cat2 hasPrefix:@"UCP"]) {
            seenPredCat = true;
          }
          else if ([cat2 hasPrefix:@"S"]) {
            seenS++;
            if (!seenPredCat) {
              sawSBeforePredCat = true;
            }
          }
        }
      }
      if ((seenS < 2) && (!(sawSBeforePredCat && seenPredCat)) && (seenNP == 0 || (seenNP == 1 && !seenPredCat))) {
        cat = JreStrcat("$$", cat, @"-G");
      }
    }
    if (((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->splitNumNP_ && [baseCat isEqual:@"NP"]) {
      jboolean seenNum = false;
      {
        IOSObjectArray *a__ = kids;
        EduStanfordNlpTreesTree * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
        EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          EduStanfordNlpTreesTree *kid = *b__++;
          NSString *cat2 = [((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(kid)) label])) value];
          if ([((NSString *) nil_chk(cat2)) hasPrefix:@"QP"] || [cat2 hasPrefix:@"CD"] || [cat2 hasPrefix:@"$"] || [cat2 hasPrefix:@"#"] || ([cat2 hasPrefix:@"NN"] && [cat2 contains:@"-%"])) {
            seenNum = true;
            break;
          }
        }
      }
      if (seenNum) {
        (void) JreStrAppendStrong(&cat, "$", @"-NUM");
      }
    }
    if (((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->splitPoss_ > 0 && [baseCat isEqual:@"NP"] && [((NSString *) nil_chk([((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(IOSObjectArray_Get(kids, ((IOSObjectArray *) nil_chk(kids))->size_ - 1))) label])) value])) hasPrefix:@"POS"]) {
      if (((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->splitPoss_ == 2) {
        id<EduStanfordNlpLingLabel> labelBot;
        if ([t isPrePreTerminal]) {
          labelBot = new_EduStanfordNlpLingCategoryWordTag_initWithNSString_withNSString_withNSString_(@"NP^POSSP-B", word, tag);
        }
        else {
          labelBot = new_EduStanfordNlpLingCategoryWordTag_initWithNSString_withNSString_withNSString_(@"NP^POSSP", word, tag);
        }
        [t setLabelWithEduStanfordNlpLingLabel:labelBot];
        id<JavaUtilList> oldKids = [t getChildrenAsList];
        id<JavaUtilList> newKids = new_JavaUtilArrayList_init();
        for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(oldKids)) size] - 1; i++) {
          [newKids addWithId:[oldKids getWithInt:i]];
        }
        [t setChildrenWithJavaUtilList:newKids];
        cat = EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, @"POSSP");
        id<EduStanfordNlpLingLabel> labelTop = new_EduStanfordNlpLingCategoryWordTag_initWithNSString_withNSString_withNSString_(cat, word, tag);
        id<JavaUtilList> newerChildren = new_JavaUtilArrayList_initWithInt_(2);
        [newerChildren addWithId:t];
        EduStanfordNlpTreesTree *last = [oldKids getWithInt:[oldKids size] - 1];
        if (![((NSString *) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(last)) value])) isEqual:@"POS^NP"]) {
          [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$@", @"Unexpected POS value (!): ", last)];
        }
        [last setValueWithNSString:@"POS^POSSP"];
        [newerChildren addWithId:last];
        return [((id<EduStanfordNlpTreesTreeFactory>) nil_chk(EduStanfordNlpParserLexparserEnglishTreebankParserParams_categoryWordTagTreeFactory)) newTreeNodeWithEduStanfordNlpLingLabel:labelTop withJavaUtilList:newerChildren];
      }
      else {
        cat = JreStrcat("$$", cat, @"-P");
      }
    }
    if (((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->splitBaseNP_ > 0 && [baseCat isEqual:@"NP"] && [t isPrePreTerminal]) {
      if (((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->splitBaseNP_ == 2) {
        if ([((NSString *) nil_chk(parentStr)) hasPrefix:@"NP"]) {
          cat = JreStrcat("$$", cat, @"-B");
        }
        else {
          id<EduStanfordNlpLingLabel> labelBot = new_EduStanfordNlpLingCategoryWordTag_initWithNSString_withNSString_withNSString_(@"NP^NP-B", word, tag);
          [t setLabelWithEduStanfordNlpLingLabel:labelBot];
          id<EduStanfordNlpLingLabel> labelTop = new_EduStanfordNlpLingCategoryWordTag_initWithNSString_withNSString_withNSString_(cat, word, tag);
          id<JavaUtilList> newerChildren = new_JavaUtilArrayList_initWithInt_(1);
          [newerChildren addWithId:t];
          return [((id<EduStanfordNlpTreesTreeFactory>) nil_chk(EduStanfordNlpParserLexparserEnglishTreebankParserParams_categoryWordTagTreeFactory)) newTreeNodeWithEduStanfordNlpLingLabel:labelTop withJavaUtilList:newerChildren];
        }
      }
      else {
        cat = JreStrcat("$$", cat, @"-B");
      }
    }
    if (((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->rightPhrasal_ && EduStanfordNlpParserLexparserEnglishTreebankParserParams_rightPhrasalWithEduStanfordNlpTreesTree_(t)) {
      cat = JreStrcat("$$", cat, @"-RX");
    }
  }
  [t setLabelWithEduStanfordNlpLingLabel:new_EduStanfordNlpLingCategoryWordTag_initWithNSString_withNSString_withNSString_(cat, word, tag)];
  return t;
}

- (jboolean)containsVPWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t {
  return EduStanfordNlpParserLexparserEnglishTreebankParserParams_containsVPWithEduStanfordNlpTreesTree_(self, t);
}

+ (jboolean)firstOfSeveralNNPWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)parent
                             withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t {
  return EduStanfordNlpParserLexparserEnglishTreebankParserParams_firstOfSeveralNNPWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_(parent, t);
}

+ (jboolean)lastOfSeveralNNPWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)parent
                            withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t {
  return EduStanfordNlpParserLexparserEnglishTreebankParserParams_lastOfSeveralNNPWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_(parent, t);
}

+ (NSString *)deduceTagWithNSString:(NSString *)w {
  return EduStanfordNlpParserLexparserEnglishTreebankParserParams_deduceTagWithNSString_(w);
}

+ (jboolean)rightPhrasalWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t {
  return EduStanfordNlpParserLexparserEnglishTreebankParserParams_rightPhrasalWithEduStanfordNlpTreesTree_(t);
}

+ (NSString *)subCatifyWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t {
  return EduStanfordNlpParserLexparserEnglishTreebankParserParams_subCatifyWithEduStanfordNlpTreesTree_(t);
}

- (NSString *)ditransWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t {
  return EduStanfordNlpParserLexparserEnglishTreebankParserParams_ditransWithEduStanfordNlpTreesTree_(self, t);
}

- (NSString *)changeBaseCatWithNSString:(NSString *)cat
                           withNSString:(NSString *)newBaseCat {
  return EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(self, cat, newBaseCat);
}

+ (jboolean)hasClausalVWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)tree {
  return EduStanfordNlpParserLexparserEnglishTreebankParserParams_hasClausalVWithEduStanfordNlpTreesTree_(tree);
}

+ (jboolean)hasVWithJavaUtilList:(id<JavaUtilList>)tags {
  return EduStanfordNlpParserLexparserEnglishTreebankParserParams_hasVWithJavaUtilList_(tags);
}

+ (jboolean)hasIWithJavaUtilList:(id<JavaUtilList>)tags {
  return EduStanfordNlpParserLexparserEnglishTreebankParserParams_hasIWithJavaUtilList_(tags);
}

+ (jboolean)hasCWithJavaUtilList:(id<JavaUtilList>)tags {
  return EduStanfordNlpParserLexparserEnglishTreebankParserParams_hasCWithJavaUtilList_(tags);
}

- (void)display {
  [((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_)) display];
}

- (jint)setOptionFlagWithNSStringArray:(IOSObjectArray *)args
                               withInt:(jint)i {
  if ([((NSString *) nil_chk(IOSObjectArray_Get(nil_chk(args), i))) equalsIgnoreCase:@"-splitIN"]) {
    ((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->splitIN_ = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, i + 1));
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-splitPercent"]) {
    ((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->splitPercent_ = true;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-splitQuotes"]) {
    ((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->splitQuotes_ = true;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-splitSFP"]) {
    ((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->splitSFP_ = true;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-splitNNP"]) {
    ((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->splitNNP_ = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, i + 1));
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-rbGPA"]) {
    ((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->tagRBGPA_ = true;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-splitTRJJ"]) {
    ((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->splitTRJJ_ = true;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-splitJJCOMP"]) {
    ((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->splitJJCOMP_ = true;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-splitMoreLess"]) {
    ((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->splitMoreLess_ = true;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-unaryDT"]) {
    ((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->unaryDT_ = true;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-unaryRB"]) {
    ((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->unaryRB_ = true;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-unaryIN"]) {
    ((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->unaryIN_ = true;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-markReflexivePRP"]) {
    ((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->markReflexivePRP_ = true;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-splitCC"] && i + 1 < args->size_) {
    ((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->splitCC_ = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, i + 1));
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-splitRB"]) {
    ((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->splitRB_ = true;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-splitAux"] && i + 1 < args->size_) {
    ((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->splitAux_ = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, i + 1));
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-splitSbar"] && i + 1 < args->size_) {
    ((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->splitSbar_ = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, i + 1));
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-splitVP"] && i + 1 < args->size_) {
    ((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->splitVP_ = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, i + 1));
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-splitVPNPAgr"]) {
    ((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->splitVPNPAgr_ = true;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-gpaRootVP"]) {
    ((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->gpaRootVP_ = true;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-makePPTOintoIN"]) {
    ((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->makePPTOintoIN_ = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, i + 1));
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-collapseWhCategories"] && i + 1 < args->size_) {
    ((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->collapseWhCategories_ = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, i + 1));
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-splitSTag"]) {
    ((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->splitSTag_ = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, i + 1));
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-splitSGapped"] && (i + 1 < args->size_)) {
    ((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->splitSGapped_ = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, i + 1));
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-splitNPpercent"] && (i + 1 < args->size_)) {
    ((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->splitNPpercent_ = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, i + 1));
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-splitNPPRP"]) {
    ((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->splitNPPRP_ = true;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-dominatesV"] && (i + 1 < args->size_)) {
    ((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->dominatesV_ = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, i + 1));
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-dominatesI"]) {
    ((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->dominatesI_ = true;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-dominatesC"]) {
    ((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->dominatesC_ = true;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-splitNPNNP"] && (i + 1 < args->size_)) {
    ((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->splitNPNNP_ = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, i + 1));
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-splitTMP"] && (i + 1 < args->size_)) {
    ((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->splitTMP_ = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, i + 1));
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-splitNPADV"] && (i + 1 < args->size_)) {
    ((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->splitNPADV_ = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, i + 1));
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-markContainedVP"]) {
    ((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->markContainedVP_ = true;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-markDitransV"] && (i + 1 < args->size_)) {
    ((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->markDitransV_ = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, i + 1));
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-splitPoss"] && (i + 1 < args->size_)) {
    ((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->splitPoss_ = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, i + 1));
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-baseNP"] && (i + 1 < args->size_)) {
    ((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->splitBaseNP_ = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, i + 1));
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-joinNounTags"]) {
    ((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->joinNounTags_ = true;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-correctTags"]) {
    ((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->correctTags_ = true;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-noCorrectTags"]) {
    ((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->correctTags_ = false;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-markCC"] && (i + 1 < args->size_)) {
    ((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->markCC_ = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, i + 1));
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-noAnnotations"]) {
    ((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->splitVP_ = 0;
    englishTrain_->splitTMP_ = EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_TEMPORAL_NONE;
    englishTrain_->splitSGapped_ = 0;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-retainNPTMPSubcategories"]) {
    ((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTest *) nil_chk(englishTest_))->retainNPTMPSubcategories_ = true;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-retainTMPSubcategories"]) {
    ((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTest *) nil_chk(englishTest_))->retainTMPSubcategories_ = true;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-retainADVSubcategories"]) {
    ((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTest *) nil_chk(englishTest_))->retainADVSubcategories_ = true;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-leaveItAll"] && (i + 1 < args->size_)) {
    ((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->leaveItAll_ = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, i + 1));
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-headFinder"] && (i + 1 < args->size_)) {
    @try {
      headFinder_ = (id<EduStanfordNlpTreesHeadFinder>) cast_check([((IOSClass *) nil_chk(IOSClass_forName_(IOSObjectArray_Get(args, i + 1)))) newInstance], EduStanfordNlpTreesHeadFinder_class_());
    }
    @catch (JavaLangException *e) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"Error: Unable to load HeadFinder; default HeadFinder will be used."];
      [((JavaLangException *) nil_chk(e)) printStackTrace];
    }
    i += 2;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-makeCopulaHead"]) {
    ((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTest *) nil_chk(englishTest_))->makeCopulaHead_ = true;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-originalDependencies"]) {
    [self setGenerateOriginalDependenciesWithBoolean:true];
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-acl03pcfg"]) {
    ((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->splitIN_ = 3;
    englishTrain_->splitPercent_ = true;
    englishTrain_->splitPoss_ = 1;
    englishTrain_->splitCC_ = 2;
    englishTrain_->unaryDT_ = true;
    englishTrain_->unaryRB_ = true;
    englishTrain_->splitAux_ = 1;
    englishTrain_->splitVP_ = 2;
    englishTrain_->splitSGapped_ = 3;
    englishTrain_->dominatesV_ = 1;
    englishTrain_->splitTMP_ = EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_TEMPORAL_ACL03PCFG;
    englishTrain_->splitBaseNP_ = 1;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-jenny"]) {
    ((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->splitIN_ = 3;
    englishTrain_->splitPercent_ = true;
    englishTrain_->splitPoss_ = 1;
    englishTrain_->splitCC_ = 2;
    englishTrain_->unaryDT_ = true;
    englishTrain_->unaryRB_ = true;
    englishTrain_->splitAux_ = 1;
    englishTrain_->splitVP_ = 2;
    englishTrain_->splitSGapped_ = 3;
    englishTrain_->dominatesV_ = 1;
    englishTrain_->splitTMP_ = EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_TEMPORAL_ACL03PCFG;
    englishTrain_->splitBaseNP_ = 1;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-linguisticPCFG"]) {
    ((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->splitIN_ = 3;
    englishTrain_->splitPercent_ = true;
    englishTrain_->splitPoss_ = 1;
    englishTrain_->splitCC_ = 2;
    englishTrain_->unaryDT_ = true;
    englishTrain_->unaryRB_ = true;
    englishTrain_->splitAux_ = 2;
    englishTrain_->splitVP_ = 3;
    englishTrain_->splitSGapped_ = 4;
    englishTrain_->dominatesV_ = 0;
    englishTrain_->splitTMP_ = EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_TEMPORAL_ACL03PCFG;
    englishTrain_->splitBaseNP_ = 1;
    englishTrain_->splitMoreLess_ = true;
    englishTrain_->correctTags_ = true;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-goodPCFG"]) {
    ((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->splitIN_ = 4;
    englishTrain_->splitPercent_ = true;
    englishTrain_->splitNPpercent_ = 0;
    englishTrain_->splitPoss_ = 1;
    englishTrain_->splitCC_ = 1;
    englishTrain_->unaryDT_ = true;
    englishTrain_->unaryRB_ = true;
    englishTrain_->splitAux_ = 2;
    englishTrain_->splitVP_ = 3;
    englishTrain_->splitSGapped_ = 4;
    englishTrain_->dominatesV_ = 1;
    englishTrain_->splitTMP_ = EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_TEMPORAL_ACL03PCFG;
    englishTrain_->splitNPADV_ = 1;
    englishTrain_->splitBaseNP_ = 1;
    englishTrain_->correctTags_ = true;
    englishTrain_->markDitransV_ = 2;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-ijcai03"]) {
    ((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->splitIN_ = 3;
    englishTrain_->splitPercent_ = true;
    englishTrain_->splitPoss_ = 1;
    englishTrain_->splitCC_ = 2;
    englishTrain_->unaryDT_ = false;
    englishTrain_->unaryRB_ = false;
    englishTrain_->splitAux_ = 0;
    englishTrain_->splitVP_ = 2;
    englishTrain_->splitSGapped_ = 4;
    englishTrain_->dominatesV_ = 0;
    englishTrain_->splitTMP_ = EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_TEMPORAL_ACL03PCFG;
    englishTrain_->splitBaseNP_ = 1;
    i += 1;
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) equalsIgnoreCase:@"-goodFactored"]) {
    ((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(englishTrain_))->splitIN_ = 3;
    englishTrain_->splitPercent_ = true;
    englishTrain_->splitPoss_ = 1;
    englishTrain_->splitCC_ = 2;
    englishTrain_->unaryDT_ = false;
    englishTrain_->unaryRB_ = false;
    englishTrain_->splitAux_ = 0;
    englishTrain_->splitVP_ = 3;
    englishTrain_->splitSGapped_ = 4;
    englishTrain_->dominatesV_ = 0;
    englishTrain_->splitTMP_ = EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_TEMPORAL_ACL03PCFG;
    englishTrain_->splitBaseNP_ = 1;
    englishTrain_->correctTags_ = true;
    i += 1;
  }
  return i;
}

- (id<JavaUtilList>)defaultTestSentence {
  id<JavaUtilList> ret = new_JavaUtilArrayList_init();
  IOSObjectArray *sent = [IOSObjectArray newArrayWithObjects:(id[]){ @"This", @"is", @"just", @"a", @"test", @"." } count:6 type:NSString_class_()];
  {
    IOSObjectArray *a__ = sent;
    NSString * const *b__ = a__->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *str = *b__++;
      [ret addWithId:new_EduStanfordNlpLingWord_initWithNSString_(str)];
    }
  }
  return ret;
}

- (id<JavaUtilList>)readGrammaticalStructureFromFileWithNSString:(NSString *)filename {
  @try {
    if (generateOriginalDependencies_) {
      return EduStanfordNlpTreesEnglishGrammaticalStructure_readCoNLLXGrammaticalStructureCollectionWithNSString_(filename);
    }
    else {
      return EduStanfordNlpTreesUniversalEnglishGrammaticalStructure_readCoNLLXGrammaticalStructureCollectionWithNSString_(filename);
    }
  }
  @catch (JavaIoIOException *e) {
    @throw new_EduStanfordNlpIoRuntimeIOException_initWithNSException_(e);
  }
}

- (EduStanfordNlpTreesGrammaticalStructure *)getGrammaticalStructureWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
                                                                  withJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)filter
                                                              withEduStanfordNlpTreesHeadFinder:(id<EduStanfordNlpTreesHeadFinder>)hf {
  if (generateOriginalDependencies_) {
    return new_EduStanfordNlpTreesEnglishGrammaticalStructure_initWithEduStanfordNlpTreesTree_withJavaUtilFunctionPredicate_withEduStanfordNlpTreesHeadFinder_(t, filter, hf);
  }
  else {
    return new_EduStanfordNlpTreesUniversalEnglishGrammaticalStructure_initWithEduStanfordNlpTreesTree_withJavaUtilFunctionPredicate_withEduStanfordNlpTreesHeadFinder_(t, filter, hf);
  }
}

- (jboolean)supportsBasicDependencies {
  return true;
}

- (IOSObjectArray *)defaultCoreNLPFlags {
  return EduStanfordNlpParserLexparserEnglishTreebankParserParams_RETAIN_TMP_ARGS;
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  EduStanfordNlpParserLexparserEnglishTreebankParserParams_mainWithNSStringArray_(args);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesHeadFinder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesHeadFinder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesDiskTreebank;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesMemoryTreebank;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTreeReaderFactory;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesMemoryTreebank;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTreeTransformer;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTreeTransformer;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTreebankLanguagePack;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpParserLexparserLexicon;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "[LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTreeTransformer;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 5, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 7, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 8, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 9, 10, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 11, 6, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 12, 6, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 13, 6, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 14, 15, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 16, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 17, 18, -1, 19, -1, -1 },
    { NULL, "Z", 0xa, 20, 18, -1, 19, -1, -1 },
    { NULL, "Z", 0xa, 21, 18, -1, 19, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 22, 23, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 24, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 25, 10, -1, 26, -1, -1 },
    { NULL, "LEduStanfordNlpTreesGrammaticalStructure;", 0x1, 27, 28, -1, 29, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 30, 31, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(headFinder);
  methods[2].selector = @selector(typedDependencyHeadFinder);
  methods[3].selector = @selector(diskTreebank);
  methods[4].selector = @selector(memoryTreebank);
  methods[5].selector = @selector(treeReaderFactory);
  methods[6].selector = @selector(testMemoryTreebank);
  methods[7].selector = @selector(collinizer);
  methods[8].selector = @selector(collinizerEvalb);
  methods[9].selector = @selector(treebankLanguagePack);
  methods[10].selector = @selector(lexWithEduStanfordNlpParserLexparserOptions:withEduStanfordNlpUtilIndex:withEduStanfordNlpUtilIndex:);
  methods[11].selector = @selector(sisterSplitters);
  methods[12].selector = @selector(subcategoryStripper);
  methods[13].selector = @selector(transformTreeWithEduStanfordNlpTreesTree:withEduStanfordNlpTreesTree:);
  methods[14].selector = @selector(containsVPWithEduStanfordNlpTreesTree:);
  methods[15].selector = @selector(firstOfSeveralNNPWithEduStanfordNlpTreesTree:withEduStanfordNlpTreesTree:);
  methods[16].selector = @selector(lastOfSeveralNNPWithEduStanfordNlpTreesTree:withEduStanfordNlpTreesTree:);
  methods[17].selector = @selector(deduceTagWithNSString:);
  methods[18].selector = @selector(rightPhrasalWithEduStanfordNlpTreesTree:);
  methods[19].selector = @selector(subCatifyWithEduStanfordNlpTreesTree:);
  methods[20].selector = @selector(ditransWithEduStanfordNlpTreesTree:);
  methods[21].selector = @selector(changeBaseCatWithNSString:withNSString:);
  methods[22].selector = @selector(hasClausalVWithEduStanfordNlpTreesTree:);
  methods[23].selector = @selector(hasVWithJavaUtilList:);
  methods[24].selector = @selector(hasIWithJavaUtilList:);
  methods[25].selector = @selector(hasCWithJavaUtilList:);
  methods[26].selector = @selector(display);
  methods[27].selector = @selector(setOptionFlagWithNSStringArray:withInt:);
  methods[28].selector = @selector(defaultTestSentence);
  methods[29].selector = @selector(readGrammaticalStructureFromFileWithNSString:);
  methods[30].selector = @selector(getGrammaticalStructureWithEduStanfordNlpTreesTree:withJavaUtilFunctionPredicate:withEduStanfordNlpTreesHeadFinder:);
  methods[31].selector = @selector(supportsBasicDependencies);
  methods[32].selector = @selector(defaultCoreNLPFlags);
  methods[33].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "headFinder_", "LEduStanfordNlpTreesHeadFinder;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "englishTrain_", "LEduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "englishTest_", "LEduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTest;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "sisterSplit1", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 32, -1, -1 },
    { "sisterSplit2", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 33, -1, -1 },
    { "sisterSplit3", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 34, -1, -1 },
    { "sisterSplit4", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 35, -1, -1 },
    { "categoryWordTagTreeFactory", "LEduStanfordNlpTreesTreeFactory;", .constantValue.asLong = 0, 0x1a, -1, 36, -1, -1 },
    { "RETAIN_TMP_ARGS", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 37, -1, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpParserLexparserEnglishTreebankParserParams_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "lex", "LEduStanfordNlpParserLexparserOptions;LEduStanfordNlpUtilIndex;LEduStanfordNlpUtilIndex;", "(Ledu/stanford/nlp/parser/lexparser/Options;Ledu/stanford/nlp/util/Index<Ljava/lang/String;>;Ledu/stanford/nlp/util/Index<Ljava/lang/String;>;)Ledu/stanford/nlp/parser/lexparser/Lexicon;", "transformTree", "LEduStanfordNlpTreesTree;LEduStanfordNlpTreesTree;", "containsVP", "LEduStanfordNlpTreesTree;", "firstOfSeveralNNP", "lastOfSeveralNNP", "deduceTag", "LNSString;", "rightPhrasal", "subCatify", "ditrans", "changeBaseCat", "LNSString;LNSString;", "hasClausalV", "hasV", "LJavaUtilList;", "(Ljava/util/List<+Ledu/stanford/nlp/ling/Label;>;)Z", "hasI", "hasC", "setOptionFlag", "[LNSString;I", "()Ljava/util/List<Ledu/stanford/nlp/ling/Word;>;", "readGrammaticalStructureFromFile", "(Ljava/lang/String;)Ljava/util/List<Ledu/stanford/nlp/trees/GrammaticalStructure;>;", "getGrammaticalStructure", "LEduStanfordNlpTreesTree;LJavaUtilFunctionPredicate;LEduStanfordNlpTreesHeadFinder;", "(Ledu/stanford/nlp/trees/Tree;Ljava/util/function/Predicate<Ljava/lang/String;>;Ledu/stanford/nlp/trees/HeadFinder;)Ledu/stanford/nlp/trees/GrammaticalStructure;", "main", "[LNSString;", &EduStanfordNlpParserLexparserEnglishTreebankParserParams_sisterSplit1, &EduStanfordNlpParserLexparserEnglishTreebankParserParams_sisterSplit2, &EduStanfordNlpParserLexparserEnglishTreebankParserParams_sisterSplit3, &EduStanfordNlpParserLexparserEnglishTreebankParserParams_sisterSplit4, &EduStanfordNlpParserLexparserEnglishTreebankParserParams_categoryWordTagTreeFactory, &EduStanfordNlpParserLexparserEnglishTreebankParserParams_RETAIN_TMP_ARGS, "LEduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishSubcategoryStripper;LEduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTest;LEduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain;" };
  static const J2ObjcClassInfo _EduStanfordNlpParserLexparserEnglishTreebankParserParams = { "EnglishTreebankParserParams", "edu.stanford.nlp.parser.lexparser", ptrTable, methods, fields, 7, 0x1, 34, 10, -1, 38, -1, -1, -1 };
  return &_EduStanfordNlpParserLexparserEnglishTreebankParserParams;
}

+ (void)initialize {
  if (self == [EduStanfordNlpParserLexparserEnglishTreebankParserParams class]) {
    EduStanfordNlpParserLexparserEnglishTreebankParserParams_sisterSplit1 = [IOSObjectArray newArrayWithObjects:(id[]){ @"ADJP=l=VBD", @"ADJP=l=VBP", @"NP=r=RBR", @"PRN=r=.", @"ADVP=l=PP", @"PP=l=JJ", @"PP=r=NP", @"SBAR=l=VB", @"PP=l=VBG", @"ADJP=r=,", @"ADVP=r=.", @"ADJP=l=VB", @"FRAG=l=FRAG", @"FRAG=r=:", @"PP=r=,", @"ADJP=l=,", @"FRAG=r=FRAG", @"FRAG=l=:", @"PRN=r=VP", @"PP=l=RB", @"S=l=ADJP", @"SBAR=l=VBN", @"NP=r=NX", @"SBAR=l=VBZ", @"SBAR=l=ADVP", @"QP=r=JJ", @"SBAR=l=PP", @"SBAR=l=ADJP", @"NP=r=VBG", @"VP=r=:", @"VP=l=ADJP", @"SBAR=l=VBP", @"ADVP=r=NP", @"PP=l=VB", @"VP=r=PP", @"ADJP=r=SBAR", @"NP=r=JJR", @"SBAR=l=NN", @"S=l=RB", @"S=l=NNS", @"S=r=SBAR", @"S=l=WHPP", @"VP=l=:", @"ADVP=l=NP", @"ADVP=r=PP", @"ADJP=l=JJ", @"NP=r=VBN", @"NP=l=PRN", @"VP=r=S", @"NP=r=NNPS", @"NX=r=NX", @"ADJP=l=PRP$", @"SBAR=l=CC", @"SBAR=l=S", @"S=l=PRT", @"ADVP=l=VB", @"ADVP=r=JJ", @"NP=l=DT" } count:58 type:NSString_class_()];
    EduStanfordNlpParserLexparserEnglishTreebankParserParams_sisterSplit2 = [IOSObjectArray newArrayWithObjects:(id[]){ @"S=r=PP", @"NP=r=JJS", @"ADJP=r=NNP", @"NP=l=PRT", @"ADJP=r=PP", @"ADJP=l=VBZ", @"PP=r=VP", @"NP=r=CD", @"ADVP=l=IN", @"ADVP=l=,", @"ADJP=r=JJ", @"ADVP=l=VBD", @"PP=r=.", @"S=l=ADVP", @"S=l=DT", @"PP=l=NP", @"VP=l=PRN", @"NP=r=IN", @"NP=r=``" } count:19 type:NSString_class_()];
    EduStanfordNlpParserLexparserEnglishTreebankParserParams_sisterSplit3 = [IOSObjectArray newArrayWithObjects:(id[]){ @"PP=l=VBD", @"ADJP=r=NNS", @"S=l=:", @"NP=l=ADVP", @"NP=r=PRN", @"NP=r=-RRB-", @"NP=l=-LRB-", @"NP=l=JJ", @"SBAR=r=.", @"S=r=:", @"ADVP=r=VP", @"NP=l=RB", @"NP=r=RB", @"S=l=VBP", @"SBAR=r=,", @"VP=r=,", @"PP=r=PP", @"NP=r=S", @"ADJP=l=NP", @"VP=l=VBG", @"PP=l=PP" } count:21 type:NSString_class_()];
    EduStanfordNlpParserLexparserEnglishTreebankParserParams_sisterSplit4 = [IOSObjectArray newArrayWithObjects:(id[]){ @"VP=l=NP", @"NP=r=NN", @"NP=r=VP", @"VP=r=.", @"NP=r=PP", @"VP=l=TO", @"VP=l=MD", @"NP=r=,", @"NP=r=NP", @"NP=r=.", @"NP=l=IN", @"NP=l=NP", @"VP=l=,", @"VP=l=S", @"NP=l=,", @"VP=l=VBZ", @"S=r=.", @"NP=r=NNS", @"S=l=IN", @"NP=r=JJ", @"NP=r=NNP", @"VP=l=VBD", @"S=l=WHNP", @"VP=r=NP", @"VP=l=''", @"VP=l=VBP", @"NP=l=:", @"S=r=,", @"VP=l=``", @"VP=l=VB", @"NP=l=S", @"NP=l=VP", @"NP=l=VB", @"NP=l=VBD", @"NP=r=SBAR", @"NP=r=:", @"VP=l=PP", @"NP=l=VBZ", @"NP=l=CC", @"NP=l=''", @"S=r=NP", @"S=r=S", @"S=l=VBN", @"NP=l=``", @"ADJP=r=NN", @"S=r=VP", @"NP=r=CC", @"VP=l=RB", @"S=l=S", @"S=l=NP", @"NP=l=TO", @"S=l=,", @"S=l=VBD", @"S=r=''", @"S=l=``", @"S=r=CC", @"PP=l=,", @"S=l=CC", @"VP=l=CC", @"ADJP=l=DT", @"NP=l=VBG", @"VP=r=''", @"SBAR=l=NP", @"VP=l=VP", @"NP=l=PP", @"S=l=VB", @"SBAR=l=VBD", @"VP=l=ADVP", @"VP=l=VBN", @"NP=r=''", @"VP=l=SBAR", @"SBAR=l=,", @"S=l=WHADVP", @"VP=r=VP", @"NP=r=ADVP", @"QP=r=NNS", @"NP=l=VBP", @"S=l=VBZ", @"NP=l=VBN", @"S=l=PP", @"VP=r=CC", @"NP=l=SBAR", @"SBAR=r=NP", @"S=l=VBG", @"SBAR=r=VP", @"NP=r=ADJP", @"S=l=JJ", @"S=l=NN", @"QP=r=NN" } count:89 type:NSString_class_()];
    EduStanfordNlpParserLexparserEnglishTreebankParserParams_categoryWordTagTreeFactory = new_EduStanfordNlpTreesLabeledScoredTreeFactory_initWithEduStanfordNlpLingLabelFactory_(new_EduStanfordNlpLingCategoryWordTagFactory_init());
    EduStanfordNlpParserLexparserEnglishTreebankParserParams_RETAIN_TMP_ARGS = [IOSObjectArray newArrayWithObjects:(id[]){ @"-retainTmpSubcategories" } count:1 type:NSString_class_()];
    J2OBJC_SET_INITIALIZED(EduStanfordNlpParserLexparserEnglishTreebankParserParams)
  }
}

@end

void EduStanfordNlpParserLexparserEnglishTreebankParserParams_init(EduStanfordNlpParserLexparserEnglishTreebankParserParams *self) {
  EduStanfordNlpParserLexparserAbstractTreebankParserParams_initWithEduStanfordNlpTreesTreebankLanguagePack_(self, new_EduStanfordNlpTreesPennTreebankLanguagePack_init());
  self->englishTrain_ = new_EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain_init();
  self->englishTest_ = new_EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTest_init();
  self->headFinder_ = new_EduStanfordNlpTreesModCollinsHeadFinder_initWithEduStanfordNlpTreesTreebankLanguagePack_(self->tlp_);
}

EduStanfordNlpParserLexparserEnglishTreebankParserParams *new_EduStanfordNlpParserLexparserEnglishTreebankParserParams_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpParserLexparserEnglishTreebankParserParams, init)
}

EduStanfordNlpParserLexparserEnglishTreebankParserParams *create_EduStanfordNlpParserLexparserEnglishTreebankParserParams_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpParserLexparserEnglishTreebankParserParams, init)
}

jboolean EduStanfordNlpParserLexparserEnglishTreebankParserParams_containsVPWithEduStanfordNlpTreesTree_(EduStanfordNlpParserLexparserEnglishTreebankParserParams *self, EduStanfordNlpTreesTree *t) {
  NSString *cat = [((id<EduStanfordNlpTreesTreebankLanguagePack>) nil_chk(self->tlp_)) basicCategoryWithNSString:[((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(t)) label])) value]];
  if ([((NSString *) nil_chk(cat)) isEqual:@"VP"]) {
    return true;
  }
  else {
    {
      IOSObjectArray *a__ = [t children];
      EduStanfordNlpTreesTree * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        EduStanfordNlpTreesTree *kid = *b__++;
        if (EduStanfordNlpParserLexparserEnglishTreebankParserParams_containsVPWithEduStanfordNlpTreesTree_(self, kid)) {
          return true;
        }
      }
    }
    return false;
  }
}

jboolean EduStanfordNlpParserLexparserEnglishTreebankParserParams_firstOfSeveralNNPWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_(EduStanfordNlpTreesTree *parent, EduStanfordNlpTreesTree *t) {
  EduStanfordNlpParserLexparserEnglishTreebankParserParams_initialize();
  jboolean firstIsT = false;
  jint numNNP = 0;
  {
    IOSObjectArray *a__ = [((EduStanfordNlpTreesTree *) nil_chk(parent)) children];
    EduStanfordNlpTreesTree * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      EduStanfordNlpTreesTree *kid = *b__++;
      if ([((NSString *) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(kid)) value])) hasPrefix:@"NNP"]) {
        if ([((EduStanfordNlpTreesTree *) nil_chk(t)) isEqual:kid] && numNNP == 0) {
          firstIsT = true;
        }
        numNNP++;
      }
    }
  }
  return numNNP > 1 && firstIsT;
}

jboolean EduStanfordNlpParserLexparserEnglishTreebankParserParams_lastOfSeveralNNPWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_(EduStanfordNlpTreesTree *parent, EduStanfordNlpTreesTree *t) {
  EduStanfordNlpParserLexparserEnglishTreebankParserParams_initialize();
  EduStanfordNlpTreesTree *last = nil;
  jint numNNP = 0;
  {
    IOSObjectArray *a__ = [((EduStanfordNlpTreesTree *) nil_chk(parent)) children];
    EduStanfordNlpTreesTree * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      EduStanfordNlpTreesTree *kid = *b__++;
      if ([((NSString *) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(kid)) value])) hasPrefix:@"NNP"]) {
        numNNP++;
        last = kid;
      }
    }
  }
  return numNNP > 1 && [((EduStanfordNlpTreesTree *) nil_chk(t)) isEqual:last];
}

NSString *EduStanfordNlpParserLexparserEnglishTreebankParserParams_deduceTagWithNSString_(NSString *w) {
  EduStanfordNlpParserLexparserEnglishTreebankParserParams_initialize();
  NSString *word = [((NSString *) nil_chk(w)) lowercaseString];
  if ([((NSString *) nil_chk(word)) hasSuffix:@"ing"]) {
    return @"VBG";
  }
  else if ([word hasSuffix:@"d"] || [word hasSuffix:@"t"]) {
    return @"VBN";
  }
  else if ([word hasSuffix:@"s"]) {
    return @"VBZ";
  }
  else if ([word isEqual:@"to"]) {
    return @"TO";
  }
  else {
    return @"VB";
  }
}

jboolean EduStanfordNlpParserLexparserEnglishTreebankParserParams_rightPhrasalWithEduStanfordNlpTreesTree_(EduStanfordNlpTreesTree *t) {
  EduStanfordNlpParserLexparserEnglishTreebankParserParams_initialize();
  while (![((EduStanfordNlpTreesTree *) nil_chk(t)) isLeaf]) {
    t = [t lastChild];
    NSString *str = [((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(t)) label])) value];
    if ([((NSString *) nil_chk(str)) hasPrefix:@"NP"] || [str hasPrefix:@"PP"] || [str hasPrefix:@"VP"] || [str hasPrefix:@"S"] || [str hasPrefix:@"Q"] || [str hasPrefix:@"A"]) {
      return true;
    }
  }
  return false;
}

NSString *EduStanfordNlpParserLexparserEnglishTreebankParserParams_subCatifyWithEduStanfordNlpTreesTree_(EduStanfordNlpTreesTree *t) {
  EduStanfordNlpParserLexparserEnglishTreebankParserParams_initialize();
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_initWithNSString_(@"^a");
  jboolean n = false;
  jboolean s = false;
  jboolean p = false;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(t)) children]))->size_; i++) {
    NSString *childStr = [((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(IOSObjectArray_Get(nil_chk([t children]), i))) label])) value];
    n = (n || [((NSString *) nil_chk(childStr)) hasPrefix:@"NP"]);
    s = (s || [((NSString *) nil_chk(childStr)) hasPrefix:@"S"]);
    p = (p || [((NSString *) nil_chk(childStr)) hasPrefix:@"PP"]);
  }
  n = false;
  if (n) {
    (void) [sb appendWithChar:'N'];
  }
  if (p) {
    (void) [sb appendWithChar:'P'];
  }
  if (s) {
    (void) [sb appendWithChar:'S'];
  }
  return [sb description];
}

NSString *EduStanfordNlpParserLexparserEnglishTreebankParserParams_ditransWithEduStanfordNlpTreesTree_(EduStanfordNlpParserLexparserEnglishTreebankParserParams *self, EduStanfordNlpTreesTree *t) {
  jint n = 0;
  {
    IOSObjectArray *a__ = [((EduStanfordNlpTreesTree *) nil_chk(t)) children];
    EduStanfordNlpTreesTree * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      EduStanfordNlpTreesTree *kid = *b__++;
      NSString *childStr = [((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(kid)) label])) value];
      if ([((NSString *) nil_chk(childStr)) hasPrefix:@"NP"] && ![childStr contains:@"-TMP"]) {
        n++;
      }
      else if (((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(self->englishTrain_))->markDitransV_ == 1 && [childStr hasPrefix:@"S"]) {
        n++;
      }
    }
  }
  if (n >= 2) {
    return @"^2Arg";
  }
  else {
    return @"";
  }
}

NSString *EduStanfordNlpParserLexparserEnglishTreebankParserParams_changeBaseCatWithNSString_withNSString_(EduStanfordNlpParserLexparserEnglishTreebankParserParams *self, NSString *cat, NSString *newBaseCat) {
  jint i = 1;
  jint length = ((jint) [((NSString *) nil_chk(cat)) length]);
  for (; (i < length); i++) {
    if ([((id<EduStanfordNlpTreesTreebankLanguagePack>) nil_chk(self->tlp_)) isLabelAnnotationIntroducingCharacterWithChar:[cat charAtWithInt:i]]) {
      break;
    }
  }
  if (i < length) {
    return JreStrcat("$$", newBaseCat, [cat substring:i]);
  }
  else {
    return newBaseCat;
  }
}

jboolean EduStanfordNlpParserLexparserEnglishTreebankParserParams_hasClausalVWithEduStanfordNlpTreesTree_(EduStanfordNlpTreesTree *tree) {
  EduStanfordNlpParserLexparserEnglishTreebankParserParams_initialize();
  if ([((EduStanfordNlpTreesTree *) nil_chk(tree)) isPhrasal]) {
    if ([tree isPrePreTerminal] && [((NSString *) nil_chk([tree value])) hasPrefix:@"NP"]) {
      return false;
    }
    IOSObjectArray *kids = [tree children];
    {
      IOSObjectArray *a__ = kids;
      EduStanfordNlpTreesTree * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        EduStanfordNlpTreesTree *t = *b__++;
        if (EduStanfordNlpParserLexparserEnglishTreebankParserParams_hasClausalVWithEduStanfordNlpTreesTree_(t)) {
          return true;
        }
      }
    }
    return false;
  }
  else {
    NSString *str = [tree value];
    return [((NSString *) nil_chk(str)) hasPrefix:@"VB"] || [str hasPrefix:@"MD"];
  }
}

jboolean EduStanfordNlpParserLexparserEnglishTreebankParserParams_hasVWithJavaUtilList_(id<JavaUtilList> tags) {
  EduStanfordNlpParserLexparserEnglishTreebankParserParams_initialize();
  for (id<EduStanfordNlpLingLabel> __strong tag in nil_chk(tags)) {
    NSString *str = [((id<EduStanfordNlpLingLabel>) nil_chk(tag)) description];
    if ([((NSString *) nil_chk(str)) hasPrefix:@"V"] || [str hasPrefix:@"MD"]) {
      return true;
    }
  }
  return false;
}

jboolean EduStanfordNlpParserLexparserEnglishTreebankParserParams_hasIWithJavaUtilList_(id<JavaUtilList> tags) {
  EduStanfordNlpParserLexparserEnglishTreebankParserParams_initialize();
  for (id<EduStanfordNlpLingLabel> __strong tag in nil_chk(tags)) {
    if ([((NSString *) nil_chk([((id<EduStanfordNlpLingLabel>) nil_chk(tag)) description])) hasPrefix:@"I"]) {
      return true;
    }
  }
  return false;
}

jboolean EduStanfordNlpParserLexparserEnglishTreebankParserParams_hasCWithJavaUtilList_(id<JavaUtilList> tags) {
  EduStanfordNlpParserLexparserEnglishTreebankParserParams_initialize();
  for (id<EduStanfordNlpLingLabel> __strong tag in nil_chk(tags)) {
    if ([((NSString *) nil_chk([((id<EduStanfordNlpLingLabel>) nil_chk(tag)) description])) hasPrefix:@"CC"]) {
      return true;
    }
  }
  return false;
}

void EduStanfordNlpParserLexparserEnglishTreebankParserParams_mainWithNSStringArray_(IOSObjectArray *args) {
  EduStanfordNlpParserLexparserEnglishTreebankParserParams_initialize();
  id<EduStanfordNlpParserLexparserTreebankLangParserParams> tlpp = new_EduStanfordNlpParserLexparserEnglishTreebankParserParams_init();
  EduStanfordNlpTreesTreebank *tb = [tlpp memoryTreebank];
  [((EduStanfordNlpTreesTreebank *) nil_chk(tb)) loadPathWithNSString:IOSObjectArray_Get(nil_chk(args), 0)];
  for (EduStanfordNlpTreesTree * __strong t in tb) {
    [((EduStanfordNlpTreesTree *) nil_chk(t)) pennPrint];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpParserLexparserEnglishTreebankParserParams)

@implementation EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishSubcategoryStripper

- (EduStanfordNlpTreesTree *)transformTreeWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)tree {
  id<EduStanfordNlpLingLabel> lab = [((EduStanfordNlpTreesTree *) nil_chk(tree)) label];
  NSString *s = [((id<EduStanfordNlpLingLabel>) nil_chk(lab)) value];
  NSString *tag = nil;
  if ([EduStanfordNlpLingHasTag_class_() isInstance:lab]) {
    tag = [((id<EduStanfordNlpLingHasTag>) cast_check(lab, EduStanfordNlpLingHasTag_class_())) tag];
  }
  if ([tree isLeaf]) {
    EduStanfordNlpTreesTree *leaf = [((id<EduStanfordNlpTreesTreeFactory>) nil_chk(tf_)) newLeafWithEduStanfordNlpLingLabel:lab];
    [((EduStanfordNlpTreesTree *) nil_chk(leaf)) setScoreWithDouble:[tree score]];
    return leaf;
  }
  else if ([tree isPhrasal]) {
    if (((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTest *) nil_chk(this$0_->englishTest_))->retainADVSubcategories_ && [((NSString *) nil_chk(s)) contains:@"-ADV"]) {
      s = [((id<EduStanfordNlpTreesTreebankLanguagePack>) nil_chk(this$0_->tlp_)) basicCategoryWithNSString:s];
      (void) JreStrAppendStrong(&s, "$", @"-ADV");
    }
    else if (((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTest *) nil_chk(this$0_->englishTest_))->retainTMPSubcategories_ && [((NSString *) nil_chk(s)) contains:@"-TMP"]) {
      s = [((id<EduStanfordNlpTreesTreebankLanguagePack>) nil_chk(this$0_->tlp_)) basicCategoryWithNSString:s];
      (void) JreStrAppendStrong(&s, "$", @"-TMP");
    }
    else if (((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTest *) nil_chk(this$0_->englishTest_))->retainNPTMPSubcategories_ && [((NSString *) nil_chk(s)) hasPrefix:@"NP-TMP"]) {
      s = @"NP-TMP";
    }
    else {
      s = [((id<EduStanfordNlpTreesTreebankLanguagePack>) nil_chk(this$0_->tlp_)) basicCategoryWithNSString:s];
    }
    if (((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(this$0_->englishTrain_))->splitBaseNP_ == 2 && [((NSString *) nil_chk(s)) isEqual:@"NP"]) {
      IOSObjectArray *kids = [tree children];
      if (((IOSObjectArray *) nil_chk(kids))->size_ == 1 && [((NSString *) nil_chk([((id<EduStanfordNlpTreesTreebankLanguagePack>) nil_chk(this$0_->tlp_)) basicCategoryWithNSString:[((EduStanfordNlpTreesTree *) nil_chk(IOSObjectArray_Get(kids, 0))) value]])) isEqual:@"NP"]) {
        id<JavaUtilList> kidkids = new_JavaUtilArrayList_init();
        for (jint cNum = 0; cNum < ((IOSObjectArray *) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(IOSObjectArray_Get(kids, 0))) children]))->size_; cNum++) {
          EduStanfordNlpTreesTree *child = IOSObjectArray_Get(nil_chk([((EduStanfordNlpTreesTree *) nil_chk(IOSObjectArray_Get(kids, 0))) children]), cNum);
          EduStanfordNlpTreesTree *newChild = [self transformTreeWithEduStanfordNlpTreesTree:child];
          if (newChild != nil) {
            [kidkids addWithId:newChild];
          }
        }
        EduStanfordNlpLingCategoryWordTag *myLabel = new_EduStanfordNlpLingCategoryWordTag_initWithEduStanfordNlpLingLabel_(lab);
        [myLabel setCategoryWithNSString:s];
        return [((id<EduStanfordNlpTreesTreeFactory>) nil_chk(tf_)) newTreeNodeWithEduStanfordNlpLingLabel:myLabel withJavaUtilList:kidkids];
      }
    }
    if (((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(this$0_->englishTrain_))->splitPoss_ == 2 && [((NSString *) nil_chk(s)) isEqual:@"POSSP"]) {
      IOSObjectArray *kids = [tree children];
      id<JavaUtilList> newkids = new_JavaUtilArrayList_init();
      for (jint j = 0; j < ((IOSObjectArray *) nil_chk(kids))->size_ - 1; j++) {
        for (jint cNum = 0; cNum < ((IOSObjectArray *) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(IOSObjectArray_Get(kids, j))) children]))->size_; cNum++) {
          EduStanfordNlpTreesTree *child = IOSObjectArray_Get(nil_chk([((EduStanfordNlpTreesTree *) nil_chk(IOSObjectArray_Get(kids, 0))) children]), cNum);
          EduStanfordNlpTreesTree *newChild = [self transformTreeWithEduStanfordNlpTreesTree:child];
          if (newChild != nil) {
            [newkids addWithId:newChild];
          }
        }
      }
      EduStanfordNlpTreesTree *finalChild = [self transformTreeWithEduStanfordNlpTreesTree:IOSObjectArray_Get(kids, kids->size_ - 1)];
      [newkids addWithId:finalChild];
      EduStanfordNlpLingCategoryWordTag *myLabel = new_EduStanfordNlpLingCategoryWordTag_initWithEduStanfordNlpLingLabel_(lab);
      [myLabel setCategoryWithNSString:@"NP"];
      return [((id<EduStanfordNlpTreesTreeFactory>) nil_chk(tf_)) newTreeNodeWithEduStanfordNlpLingLabel:myLabel withJavaUtilList:newkids];
    }
  }
  else {
    s = [((id<EduStanfordNlpTreesTreebankLanguagePack>) nil_chk(this$0_->tlp_)) basicCategoryWithNSString:s];
    if (tag != nil) {
      tag = [((id<EduStanfordNlpTreesTreebankLanguagePack>) nil_chk(this$0_->tlp_)) basicCategoryWithNSString:tag];
    }
  }
  id<JavaUtilList> children = new_JavaUtilArrayList_init();
  for (jint cNum = 0; cNum < [tree numChildren]; cNum++) {
    EduStanfordNlpTreesTree *child = [tree getChildWithInt:cNum];
    EduStanfordNlpTreesTree *newChild = [self transformTreeWithEduStanfordNlpTreesTree:child];
    if (newChild != nil) {
      [children addWithId:newChild];
    }
  }
  if ([children isEmpty]) {
    return nil;
  }
  EduStanfordNlpLingCategoryWordTag *newLabel = new_EduStanfordNlpLingCategoryWordTag_initWithEduStanfordNlpLingLabel_(lab);
  [newLabel setCategoryWithNSString:s];
  if (tag != nil) {
    [newLabel setTagWithNSString:tag];
  }
  EduStanfordNlpTreesTree *node = [((id<EduStanfordNlpTreesTreeFactory>) nil_chk(tf_)) newTreeNodeWithEduStanfordNlpLingLabel:newLabel withJavaUtilList:children];
  [((EduStanfordNlpTreesTree *) nil_chk(node)) setScoreWithDouble:[tree score]];
  return node;
}

- (instancetype)initWithEduStanfordNlpParserLexparserEnglishTreebankParserParams:(EduStanfordNlpParserLexparserEnglishTreebankParserParams *)outer$ {
  EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishSubcategoryStripper_initWithEduStanfordNlpParserLexparserEnglishTreebankParserParams_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LEduStanfordNlpTreesTree;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(transformTreeWithEduStanfordNlpTreesTree:);
  methods[1].selector = @selector(initWithEduStanfordNlpParserLexparserEnglishTreebankParserParams:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LEduStanfordNlpParserLexparserEnglishTreebankParserParams;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "tf_", "LEduStanfordNlpTreesTreeFactory;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "transformTree", "LEduStanfordNlpTreesTree;", "LEduStanfordNlpParserLexparserEnglishTreebankParserParams;" };
  static const J2ObjcClassInfo _EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishSubcategoryStripper = { "EnglishSubcategoryStripper", "edu.stanford.nlp.parser.lexparser", ptrTable, methods, fields, 7, 0x4, 2, 2, 2, -1, -1, -1, -1 };
  return &_EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishSubcategoryStripper;
}

@end

void EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishSubcategoryStripper_initWithEduStanfordNlpParserLexparserEnglishTreebankParserParams_(EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishSubcategoryStripper *self, EduStanfordNlpParserLexparserEnglishTreebankParserParams *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
  self->tf_ = new_EduStanfordNlpTreesLabeledScoredTreeFactory_init();
}

EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishSubcategoryStripper *new_EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishSubcategoryStripper_initWithEduStanfordNlpParserLexparserEnglishTreebankParserParams_(EduStanfordNlpParserLexparserEnglishTreebankParserParams *outer$) {
  J2OBJC_NEW_IMPL(EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishSubcategoryStripper, initWithEduStanfordNlpParserLexparserEnglishTreebankParserParams_, outer$)
}

EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishSubcategoryStripper *create_EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishSubcategoryStripper_initWithEduStanfordNlpParserLexparserEnglishTreebankParserParams_(EduStanfordNlpParserLexparserEnglishTreebankParserParams *outer$) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishSubcategoryStripper, initWithEduStanfordNlpParserLexparserEnglishTreebankParserParams_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishSubcategoryStripper)

@implementation EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTest

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "retainNPTMPSubcategories_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "retainTMPSubcategories_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "retainADVSubcategories_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "makeCopulaHead_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTest_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpParserLexparserEnglishTreebankParserParams;" };
  static const J2ObjcClassInfo _EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTest = { "EnglishTest", "edu.stanford.nlp.parser.lexparser", ptrTable, methods, fields, 7, 0x9, 1, 5, 0, -1, -1, -1, -1 };
  return &_EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTest;
}

@end

void EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTest_init(EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTest *self) {
  NSObject_init(self);
  self->retainNPTMPSubcategories_ = false;
  self->retainTMPSubcategories_ = false;
  self->retainADVSubcategories_ = false;
  self->makeCopulaHead_ = false;
}

EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTest *new_EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTest_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTest, init)
}

EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTest *create_EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTest_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTest, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTest)

@implementation EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)display {
  NSString *englishParams = JreStrcat("$I$Z$I$Z$Z$Z$Z$Z$Z$Z$Z$Z$Z$Z$Z$Z$Z$Z$I$Z$Z$I$Z$I$I$Z$I$Z$I$Z$I$Z$Z$I$I$Z$I$I$I$I$I$Z$Z$Z$I$I$I", @"Using EnglishTreebankParserParams splitIN=", splitIN_, @" sPercent=", splitPercent_, @" sNNP=", splitNNP_, @" sQuotes=", splitQuotes_, @" sSFP=", splitSFP_, @" rbGPA=", tagRBGPA_, @" j#=", joinPound_, @" jJJ=", joinJJ_, @" jNounTags=", joinNounTags_, @" sPPJJ=", splitPPJJ_, @" sTRJJ=", splitTRJJ_, @" sJJCOMP=", splitJJCOMP_, @" sMoreLess=", splitMoreLess_, @" unaryDT=", unaryDT_, @" unaryRB=", unaryRB_, @" unaryPRP=", unaryPRP_, @" reflPRP=", markReflexivePRP_, @" unaryIN=", unaryIN_, @" sCC=", splitCC_, @" sNT=", splitNOT_, @" sRB=", splitRB_, @" sAux=", splitAux_, @" vpSubCat=", vpSubCat_, @" mDTV=", markDitransV_, @" sVP=", splitVP_, @" sVPNPAgr=", splitVPNPAgr_, @" sSTag=", splitSTag_, @" mVP=", markContainedVP_, @" sNP%=", splitNPpercent_, @" sNPPRP=", splitNPPRP_, @" dominatesV=", dominatesV_, @" dominatesI=", dominatesI_, @" dominatesC=", dominatesC_, @" mCC=", markCC_, @" sSGapped=", splitSGapped_, @" numNP=", splitNumNP_, @" sPoss=", splitPoss_, @" baseNP=", splitBaseNP_, @" sNPNNP=", splitNPNNP_, @" sTMP=", splitTMP_, @" sNPADV=", splitNPADV_, @" cTags=", correctTags_, @" rightPhrasal=", rightPhrasal_, @" gpaRootVP=", gpaRootVP_, @" splitSbar=", splitSbar_, @" mPPTOiIN=", makePPTOintoIN_, @" cWh=", collapseWhCategories_);
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:englishParams];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(display);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "leaveItAll_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "splitIN_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "splitQuotes_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "splitSFP_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "splitPercent_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "splitNPpercent_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "tagRBGPA_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "splitNNP_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "joinPound_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "joinJJ_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "joinNounTags_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "splitPPJJ_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "splitTRJJ_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "splitJJCOMP_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "splitMoreLess_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "unaryDT_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "unaryRB_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "unaryPRP_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "markReflexivePRP_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "unaryIN_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "splitCC_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "splitNOT_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "splitRB_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "splitAux_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "vpSubCat_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "markDitransV_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "splitVP_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "splitVPNPAgr_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "splitSTag_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "markContainedVP_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "splitNPPRP_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "dominatesV_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "dominatesI_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "dominatesC_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "markCC_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "splitSGapped_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "splitNumNP_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "splitPoss_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "splitBaseNP_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "splitTMP_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "splitSbar_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "splitNPADV_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "splitNPNNP_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "correctTags_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "rightPhrasal_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "sisterSplitLevel_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "gpaRootVP_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "makePPTOintoIN_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "collapseWhCategories_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpParserLexparserEnglishTreebankParserParams;" };
  static const J2ObjcClassInfo _EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain = { "EnglishTrain", "edu.stanford.nlp.parser.lexparser", ptrTable, methods, fields, 7, 0x9, 2, 50, 0, -1, -1, -1, -1 };
  return &_EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain;
}

@end

void EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain_init(EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *self) {
  NSObject_init(self);
  self->leaveItAll_ = 0;
  self->splitIN_ = 0;
  self->splitQuotes_ = false;
  self->splitSFP_ = false;
  self->splitPercent_ = false;
  self->splitNPpercent_ = 0;
  self->tagRBGPA_ = false;
  self->splitNNP_ = 0;
  self->joinPound_ = false;
  self->joinJJ_ = false;
  self->joinNounTags_ = false;
  self->splitPPJJ_ = false;
  self->splitTRJJ_ = false;
  self->splitJJCOMP_ = false;
  self->splitMoreLess_ = false;
  self->unaryDT_ = false;
  self->unaryRB_ = false;
  self->unaryPRP_ = false;
  self->markReflexivePRP_ = false;
  self->unaryIN_ = false;
  self->splitCC_ = 0;
  self->splitNOT_ = false;
  self->splitRB_ = false;
  self->splitAux_ = 0;
  self->vpSubCat_ = false;
  self->markDitransV_ = 0;
  self->splitVP_ = 0;
  self->splitVPNPAgr_ = false;
  self->splitSTag_ = 0;
  self->markContainedVP_ = false;
  self->splitNPPRP_ = false;
  self->dominatesV_ = 0;
  self->dominatesI_ = false;
  self->dominatesC_ = false;
  self->markCC_ = 0;
  self->splitSGapped_ = 0;
  self->splitNumNP_ = false;
  self->splitPoss_ = 0;
  self->splitBaseNP_ = 0;
  self->splitTMP_ = EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_TEMPORAL_NONE;
  self->splitSbar_ = 0;
  self->splitNPADV_ = 0;
  self->splitNPNNP_ = 0;
  self->correctTags_ = false;
  self->rightPhrasal_ = false;
  self->sisterSplitLevel_ = 1;
  self->gpaRootVP_ = false;
  self->makePPTOintoIN_ = 0;
  self->collapseWhCategories_ = 0;
}

EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *new_EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain, init)
}

EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *create_EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain)

@implementation EduStanfordNlpParserLexparserEnglishTreebankParserParams_$Lambda$1

- (id<EduStanfordNlpTreesTreeReader>)newTreeReaderWithJavaIoReader:(JavaIoReader *)inArg {
  return new_EduStanfordNlpTreesPennTreeReader_initWithJavaIoReader_withEduStanfordNlpTreesTreeFactory_withEduStanfordNlpTreesTreeNormalizer_(inArg, new_EduStanfordNlpTreesLabeledScoredTreeFactory_init(), new_EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_initWithInt_withBoolean_withInt_withBoolean_withEduStanfordNlpTreesHeadFinder_(((EduStanfordNlpParserLexparserEnglishTreebankParserParams_EnglishTrain *) nil_chk(this$0_->englishTrain_))->splitTMP_, this$0_->englishTrain_->splitSGapped_ == 5, this$0_->englishTrain_->leaveItAll_, this$0_->englishTrain_->splitNPADV_ >= 1, [this$0_ headFinder]));
}

@end

void EduStanfordNlpParserLexparserEnglishTreebankParserParams_$Lambda$1_initWithEduStanfordNlpParserLexparserEnglishTreebankParserParams_(EduStanfordNlpParserLexparserEnglishTreebankParserParams_$Lambda$1 *self, EduStanfordNlpParserLexparserEnglishTreebankParserParams *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
}

EduStanfordNlpParserLexparserEnglishTreebankParserParams_$Lambda$1 *new_EduStanfordNlpParserLexparserEnglishTreebankParserParams_$Lambda$1_initWithEduStanfordNlpParserLexparserEnglishTreebankParserParams_(EduStanfordNlpParserLexparserEnglishTreebankParserParams *outer$) {
  J2OBJC_NEW_IMPL(EduStanfordNlpParserLexparserEnglishTreebankParserParams_$Lambda$1, initWithEduStanfordNlpParserLexparserEnglishTreebankParserParams_, outer$)
}

EduStanfordNlpParserLexparserEnglishTreebankParserParams_$Lambda$1 *create_EduStanfordNlpParserLexparserEnglishTreebankParserParams_$Lambda$1_initWithEduStanfordNlpParserLexparserEnglishTreebankParserParams_(EduStanfordNlpParserLexparserEnglishTreebankParserParams *outer$) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpParserLexparserEnglishTreebankParserParams_$Lambda$1, initWithEduStanfordNlpParserLexparserEnglishTreebankParserParams_, outer$)
}

@implementation EduStanfordNlpParserLexparserEnglishTreebankParserParams_$Lambda$2

- (id<EduStanfordNlpTreesTreeReader>)newTreeReaderWithJavaIoReader:(JavaIoReader *)inArg {
  return new_EduStanfordNlpTreesPennTreeReader_initWithJavaIoReader_withEduStanfordNlpTreesTreeFactory_withEduStanfordNlpTreesTreeNormalizer_(inArg, new_EduStanfordNlpTreesLabeledScoredTreeFactory_init(), new_EduStanfordNlpTreesBobChrisTreeNormalizer_initWithEduStanfordNlpTreesTreebankLanguagePack_(this$0_->tlp_));
}

@end

void EduStanfordNlpParserLexparserEnglishTreebankParserParams_$Lambda$2_initWithEduStanfordNlpParserLexparserEnglishTreebankParserParams_(EduStanfordNlpParserLexparserEnglishTreebankParserParams_$Lambda$2 *self, EduStanfordNlpParserLexparserEnglishTreebankParserParams *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
}

EduStanfordNlpParserLexparserEnglishTreebankParserParams_$Lambda$2 *new_EduStanfordNlpParserLexparserEnglishTreebankParserParams_$Lambda$2_initWithEduStanfordNlpParserLexparserEnglishTreebankParserParams_(EduStanfordNlpParserLexparserEnglishTreebankParserParams *outer$) {
  J2OBJC_NEW_IMPL(EduStanfordNlpParserLexparserEnglishTreebankParserParams_$Lambda$2, initWithEduStanfordNlpParserLexparserEnglishTreebankParserParams_, outer$)
}

EduStanfordNlpParserLexparserEnglishTreebankParserParams_$Lambda$2 *create_EduStanfordNlpParserLexparserEnglishTreebankParserParams_$Lambda$2_initWithEduStanfordNlpParserLexparserEnglishTreebankParserParams_(EduStanfordNlpParserLexparserEnglishTreebankParserParams *outer$) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpParserLexparserEnglishTreebankParserParams_$Lambda$2, initWithEduStanfordNlpParserLexparserEnglishTreebankParserParams_, outer$)
}
