//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/parser/metrics/AbstractEval.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/ling/Label.h"
#include "edu/stanford/nlp/parser/KBestViterbiParser.h"
#include "edu/stanford/nlp/parser/metrics/AbstractEval.h"
#include "edu/stanford/nlp/stats/ClassicCounter.h"
#include "edu/stanford/nlp/stats/Counters.h"
#include "edu/stanford/nlp/trees/Tree.h"
#include "edu/stanford/nlp/util/Generics.h"
#include "java/io/PrintStream.h"
#include "java/io/PrintWriter.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/text/DecimalFormat.h"
#include "java/text/NumberFormat.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/Comparator.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "java/util/Set.h"

@interface EduStanfordNlpParserMetricsAbstractEval () {
 @public
  jdouble precision_;
  jdouble recall_;
  jdouble f1_;
  jdouble exact_;
  jdouble precision2_;
  jdouble recall2_;
  jdouble pnum2_;
  jdouble rnum2_;
}

@end

inline jboolean EduStanfordNlpParserMetricsAbstractEval_get_DEBUG();
#define EduStanfordNlpParserMetricsAbstractEval_DEBUG false
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpParserMetricsAbstractEval, DEBUG, jboolean)

@interface EduStanfordNlpParserMetricsAbstractEval_RuleErrorEval () {
 @public
  EduStanfordNlpStatsClassicCounter *over_;
  EduStanfordNlpStatsClassicCounter *under_;
}

+ (void)displayWithEduStanfordNlpStatsClassicCounter:(EduStanfordNlpStatsClassicCounter *)c
                                             withInt:(jint)num
                               withJavaIoPrintWriter:(JavaIoPrintWriter *)pw;

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpParserMetricsAbstractEval_RuleErrorEval, over_, EduStanfordNlpStatsClassicCounter *)
J2OBJC_FIELD_SETTER(EduStanfordNlpParserMetricsAbstractEval_RuleErrorEval, under_, EduStanfordNlpStatsClassicCounter *)

__attribute__((unused)) static void EduStanfordNlpParserMetricsAbstractEval_RuleErrorEval_displayWithEduStanfordNlpStatsClassicCounter_withInt_withJavaIoPrintWriter_(EduStanfordNlpStatsClassicCounter *c, jint num, JavaIoPrintWriter *pw);

@interface EduStanfordNlpParserMetricsAbstractEval_CatErrorEval () {
 @public
  EduStanfordNlpStatsClassicCounter *over_;
  EduStanfordNlpStatsClassicCounter *under_;
}

+ (id<JavaUtilList>)myMakeObjectsWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)tree;

+ (void)displayWithEduStanfordNlpStatsClassicCounter:(EduStanfordNlpStatsClassicCounter *)c
                               withJavaIoPrintWriter:(JavaIoPrintWriter *)pw;

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpParserMetricsAbstractEval_CatErrorEval, over_, EduStanfordNlpStatsClassicCounter *)
J2OBJC_FIELD_SETTER(EduStanfordNlpParserMetricsAbstractEval_CatErrorEval, under_, EduStanfordNlpStatsClassicCounter *)

__attribute__((unused)) static id<JavaUtilList> EduStanfordNlpParserMetricsAbstractEval_CatErrorEval_myMakeObjectsWithEduStanfordNlpTreesTree_(EduStanfordNlpTreesTree *tree);

__attribute__((unused)) static void EduStanfordNlpParserMetricsAbstractEval_CatErrorEval_displayWithEduStanfordNlpStatsClassicCounter_withJavaIoPrintWriter_(EduStanfordNlpStatsClassicCounter *c, JavaIoPrintWriter *pw);

@implementation EduStanfordNlpParserMetricsAbstractEval

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpParserMetricsAbstractEval_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithBoolean:(jboolean)runningAverages {
  EduStanfordNlpParserMetricsAbstractEval_initWithBoolean_(self, runningAverages);
  return self;
}

- (instancetype)initWithNSString:(NSString *)str {
  EduStanfordNlpParserMetricsAbstractEval_initWithNSString_(self, str);
  return self;
}

- (instancetype)initWithNSString:(NSString *)str
                     withBoolean:(jboolean)runningAverages {
  EduStanfordNlpParserMetricsAbstractEval_initWithNSString_withBoolean_(self, str, runningAverages);
  return self;
}

- (jdouble)getSentAveF1 {
  return f1_ / num_;
}

- (jdouble)getEvalbF1 {
  return 2.0 / (rnum2_ / recall2_ + pnum2_ / precision2_);
}

- (jdouble)getLastF1 {
  return curF1_ * 100.0;
}

- (jdouble)getEvalbF1Percent {
  return [self getEvalbF1] * 100.0;
}

- (jdouble)getExact {
  return exact_ / num_;
}

- (jdouble)getExactPercent {
  return [self getExact] * 100.0;
}

- (jint)getNum {
  return JreFpToInt(num_);
}

+ (jdouble)precisionWithJavaUtilSet:(id<JavaUtilSet>)s1
                    withJavaUtilSet:(id<JavaUtilSet>)s2 {
  return EduStanfordNlpParserMetricsAbstractEval_precisionWithJavaUtilSet_withJavaUtilSet_(s1, s2);
}

- (id<JavaUtilSet>)makeObjectsWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)tree {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)evaluateWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)guess
                withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)gold {
  [self evaluateWithEduStanfordNlpTreesTree:guess withEduStanfordNlpTreesTree:gold withJavaIoPrintWriter:new_JavaIoPrintWriter_initWithJavaIoOutputStream_withBoolean_(JreLoadStatic(JavaLangSystem, out), true)];
}

- (void)evaluateWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)guess
                withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)gold
                      withJavaIoPrintWriter:(JavaIoPrintWriter *)pw {
  [self evaluateWithEduStanfordNlpTreesTree:guess withEduStanfordNlpTreesTree:gold withJavaIoPrintWriter:pw withDouble:1.0];
}

- (void)evaluateWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)guess
                withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)gold
                      withJavaIoPrintWriter:(JavaIoPrintWriter *)pw
                                 withDouble:(jdouble)weight {
  id<JavaUtilSet> dep1 = [self makeObjectsWithEduStanfordNlpTreesTree:guess];
  id<JavaUtilSet> dep2 = [self makeObjectsWithEduStanfordNlpTreesTree:gold];
  jdouble curPrecision = EduStanfordNlpParserMetricsAbstractEval_precisionWithJavaUtilSet_withJavaUtilSet_(dep1, dep2);
  jdouble curRecall = EduStanfordNlpParserMetricsAbstractEval_precisionWithJavaUtilSet_withJavaUtilSet_(dep2, dep1);
  curF1_ = (curPrecision > 0.0 && curRecall > 0.0 ? 2.0 / (1.0 / curPrecision + 1.0 / curRecall) : 0.0);
  JrePlusAssignDoubleD(&precision_, curPrecision * weight);
  JrePlusAssignDoubleD(&recall_, curRecall * weight);
  JrePlusAssignDoubleD(&f1_, curF1_ * weight);
  JrePlusAssignDoubleD(&num_, weight);
  JrePlusAssignDoubleD(&precision2_, [((id<JavaUtilSet>) nil_chk(dep1)) size] * curPrecision * weight);
  JrePlusAssignDoubleD(&pnum2_, [dep1 size] * weight);
  JrePlusAssignDoubleD(&recall2_, [((id<JavaUtilSet>) nil_chk(dep2)) size] * curRecall * weight);
  JrePlusAssignDoubleD(&rnum2_, [dep2 size] * weight);
  if (curF1_ > 0.9999) {
    JrePlusAssignDoubleD(&exact_, 1.0);
  }
  if (pw != nil) {
    [pw printWithNSString:JreStrcat("$D", @" P: ", (JreFpToInt((curPrecision * 10000))) / 100.0)];
    if (runningAverages_) {
      [pw printlnWithNSString:JreStrcat("$D$DC", @" (sent ave ", (JreFpToInt((precision_ * 10000 / num_))) / 100.0, @") (evalb ", (JreFpToInt((precision2_ * 10000 / pnum2_))) / 100.0, ')')];
    }
    [pw printWithNSString:JreStrcat("$D", @" R: ", (JreFpToInt((curRecall * 10000))) / 100.0)];
    if (runningAverages_) {
      [pw printWithNSString:JreStrcat("$D$DC", @" (sent ave ", (JreFpToInt((recall_ * 10000 / num_))) / 100.0, @") (evalb ", (JreFpToInt((recall2_ * 10000 / rnum2_))) / 100.0, ')')];
    }
    [pw println];
    jdouble cF1 = 2.0 / (rnum2_ / recall2_ + pnum2_ / precision2_);
    [pw printWithNSString:JreStrcat("$$D", str_, @" F1: ", (JreFpToInt((curF1_ * 10000))) / 100.0)];
    if (runningAverages_) {
      [pw printWithNSString:JreStrcat("$D$D$D", @" (sent ave ", (JreFpToInt((10000 * f1_ / num_))) / 100.0, @", evalb ", (JreFpToInt((10000 * cF1))) / 100.0, @")   Exact: ", (JreFpToInt((10000 * exact_ / num_))) / 100.0)];
    }
    [pw printlnWithNSString:JreStrcat("$D", @" N: ", num_)];
  }
}

- (void)displayWithBoolean:(jboolean)verbose {
  [self displayWithBoolean:verbose withJavaIoPrintWriter:new_JavaIoPrintWriter_initWithJavaIoOutputStream_withBoolean_(JreLoadStatic(JavaLangSystem, out), true)];
}

- (void)displayWithBoolean:(jboolean)verbose
     withJavaIoPrintWriter:(JavaIoPrintWriter *)pw {
  jdouble prec = precision2_ / pnum2_;
  jdouble rec = recall2_ / rnum2_;
  jdouble f = 2.0 / (1.0 / prec + 1.0 / rec);
  [((JavaIoPrintWriter *) nil_chk(pw)) printlnWithNSString:JreStrcat("$$D$D$D$D$I", str_, @" summary evalb: LP: ", (JreFpToInt((10000.0 * prec))) / 100.0, @" LR: ", (JreFpToInt((10000.0 * rec))) / 100.0, @" F1: ", (JreFpToInt((10000.0 * f))) / 100.0, @" Exact: ", (JreFpToInt((10000.0 * exact_ / num_))) / 100.0, @" N: ", [self getNum])];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0xc, 3, 4, -1, 5, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x404, 6, 7, -1, 8, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithBoolean:);
  methods[2].selector = @selector(initWithNSString:);
  methods[3].selector = @selector(initWithNSString:withBoolean:);
  methods[4].selector = @selector(getSentAveF1);
  methods[5].selector = @selector(getEvalbF1);
  methods[6].selector = @selector(getLastF1);
  methods[7].selector = @selector(getEvalbF1Percent);
  methods[8].selector = @selector(getExact);
  methods[9].selector = @selector(getExactPercent);
  methods[10].selector = @selector(getNum);
  methods[11].selector = @selector(precisionWithJavaUtilSet:withJavaUtilSet:);
  methods[12].selector = @selector(makeObjectsWithEduStanfordNlpTreesTree:);
  methods[13].selector = @selector(evaluateWithEduStanfordNlpTreesTree:withEduStanfordNlpTreesTree:);
  methods[14].selector = @selector(evaluateWithEduStanfordNlpTreesTree:withEduStanfordNlpTreesTree:withJavaIoPrintWriter:);
  methods[15].selector = @selector(evaluateWithEduStanfordNlpTreesTree:withEduStanfordNlpTreesTree:withJavaIoPrintWriter:withDouble:);
  methods[16].selector = @selector(displayWithBoolean:);
  methods[17].selector = @selector(displayWithBoolean:withJavaIoPrintWriter:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DEBUG", "Z", .constantValue.asBOOL = EduStanfordNlpParserMetricsAbstractEval_DEBUG, 0x1a, -1, -1, -1, -1 },
    { "str_", "LNSString;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "runningAverages_", "Z", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "precision_", "D", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "recall_", "D", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "f1_", "D", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "num_", "D", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "exact_", "D", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "precision2_", "D", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "recall2_", "D", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "pnum2_", "D", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "rnum2_", "D", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "curF1_", "D", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "Z", "LNSString;", "LNSString;Z", "precision", "LJavaUtilSet;LJavaUtilSet;", "(Ljava/util/Set<*>;Ljava/util/Set<*>;)D", "makeObjects", "LEduStanfordNlpTreesTree;", "(Ledu/stanford/nlp/trees/Tree;)Ljava/util/Set<*>;", "evaluate", "LEduStanfordNlpTreesTree;LEduStanfordNlpTreesTree;", "LEduStanfordNlpTreesTree;LEduStanfordNlpTreesTree;LJavaIoPrintWriter;", "LEduStanfordNlpTreesTree;LEduStanfordNlpTreesTree;LJavaIoPrintWriter;D", "display", "ZLJavaIoPrintWriter;", "LEduStanfordNlpParserMetricsAbstractEval_RuleErrorEval;LEduStanfordNlpParserMetricsAbstractEval_CatErrorEval;LEduStanfordNlpParserMetricsAbstractEval_ScoreEval;" };
  static const J2ObjcClassInfo _EduStanfordNlpParserMetricsAbstractEval = { "AbstractEval", "edu.stanford.nlp.parser.metrics", ptrTable, methods, fields, 7, 0x401, 18, 13, -1, 15, -1, -1, -1 };
  return &_EduStanfordNlpParserMetricsAbstractEval;
}

@end

void EduStanfordNlpParserMetricsAbstractEval_init(EduStanfordNlpParserMetricsAbstractEval *self) {
  EduStanfordNlpParserMetricsAbstractEval_initWithBoolean_(self, true);
}

void EduStanfordNlpParserMetricsAbstractEval_initWithBoolean_(EduStanfordNlpParserMetricsAbstractEval *self, jboolean runningAverages) {
  EduStanfordNlpParserMetricsAbstractEval_initWithNSString_withBoolean_(self, @"", runningAverages);
}

void EduStanfordNlpParserMetricsAbstractEval_initWithNSString_(EduStanfordNlpParserMetricsAbstractEval *self, NSString *str) {
  EduStanfordNlpParserMetricsAbstractEval_initWithNSString_withBoolean_(self, str, true);
}

void EduStanfordNlpParserMetricsAbstractEval_initWithNSString_withBoolean_(EduStanfordNlpParserMetricsAbstractEval *self, NSString *str, jboolean runningAverages) {
  NSObject_init(self);
  self->precision_ = 0.0;
  self->recall_ = 0.0;
  self->f1_ = 0.0;
  self->num_ = 0.0;
  self->exact_ = 0.0;
  self->precision2_ = 0.0;
  self->recall2_ = 0.0;
  self->pnum2_ = 0.0;
  self->rnum2_ = 0.0;
  self->curF1_ = 0.0;
  self->str_ = str;
  self->runningAverages_ = runningAverages;
}

jdouble EduStanfordNlpParserMetricsAbstractEval_precisionWithJavaUtilSet_withJavaUtilSet_(id<JavaUtilSet> s1, id<JavaUtilSet> s2) {
  EduStanfordNlpParserMetricsAbstractEval_initialize();
  jdouble n = 0.0;
  jdouble p = 0.0;
  for (id __strong o1 in nil_chk(s1)) {
    if ([((id<JavaUtilSet>) nil_chk(s2)) containsWithId:o1]) {
      JrePlusAssignDoubleD(&p, 1.0);
    }
    JrePlusAssignDoubleD(&n, 1.0);
  }
  return (n > 0.0 ? p / n : 0.0);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpParserMetricsAbstractEval)

@implementation EduStanfordNlpParserMetricsAbstractEval_RuleErrorEval

+ (NSString *)localizeWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)tree {
  return EduStanfordNlpParserMetricsAbstractEval_RuleErrorEval_localizeWithEduStanfordNlpTreesTree_(tree);
}

- (id<JavaUtilSet>)makeObjectsWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)tree {
  id<JavaUtilSet> localTrees = EduStanfordNlpUtilGenerics_newHashSet();
  for (EduStanfordNlpTreesTree * __strong st in nil_chk([((EduStanfordNlpTreesTree *) nil_chk(tree)) subTreeList])) {
    [((id<JavaUtilSet>) nil_chk(localTrees)) addWithId:EduStanfordNlpParserMetricsAbstractEval_RuleErrorEval_localizeWithEduStanfordNlpTreesTree_(st)];
  }
  return localTrees;
}

- (void)evaluateWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t1
                withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t2
                      withJavaIoPrintWriter:(JavaIoPrintWriter *)pw {
  id<JavaUtilSet> s1 = [self makeObjectsWithEduStanfordNlpTreesTree:t1];
  id<JavaUtilSet> s2 = [self makeObjectsWithEduStanfordNlpTreesTree:t2];
  for (NSString * __strong o1 in nil_chk(s1)) {
    if (![((id<JavaUtilSet>) nil_chk(s2)) containsWithId:o1]) {
      [((EduStanfordNlpStatsClassicCounter *) nil_chk(over_)) incrementCountWithId:o1];
    }
  }
  for (NSString * __strong o2 in nil_chk(s2)) {
    if (![s1 containsWithId:o2]) {
      [((EduStanfordNlpStatsClassicCounter *) nil_chk(under_)) incrementCountWithId:o2];
    }
  }
}

+ (void)displayWithEduStanfordNlpStatsClassicCounter:(EduStanfordNlpStatsClassicCounter *)c
                                             withInt:(jint)num
                               withJavaIoPrintWriter:(JavaIoPrintWriter *)pw {
  EduStanfordNlpParserMetricsAbstractEval_RuleErrorEval_displayWithEduStanfordNlpStatsClassicCounter_withInt_withJavaIoPrintWriter_(c, num, pw);
}

- (void)displayWithBoolean:(jboolean)verbose
     withJavaIoPrintWriter:(JavaIoPrintWriter *)pw {
  [((JavaIoPrintWriter *) nil_chk(pw)) printlnWithNSString:@"Most frequently underproposed rules:"];
  EduStanfordNlpParserMetricsAbstractEval_RuleErrorEval_displayWithEduStanfordNlpStatsClassicCounter_withInt_withJavaIoPrintWriter_(under_, (verbose ? 100 : 10), pw);
  [pw printlnWithNSString:@"Most frequently overproposed rules:"];
  EduStanfordNlpParserMetricsAbstractEval_RuleErrorEval_displayWithEduStanfordNlpStatsClassicCounter_withInt_withJavaIoPrintWriter_(over_, (verbose ? 100 : 10), pw);
}

- (instancetype)initWithNSString:(NSString *)str {
  EduStanfordNlpParserMetricsAbstractEval_RuleErrorEval_initWithNSString_(self, str);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0xc, 0, 1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x4, 2, 1, -1, 3, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 6, 7, -1, 8, -1, -1 },
    { NULL, "V", 0x1, 6, 9, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 10, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(localizeWithEduStanfordNlpTreesTree:);
  methods[1].selector = @selector(makeObjectsWithEduStanfordNlpTreesTree:);
  methods[2].selector = @selector(evaluateWithEduStanfordNlpTreesTree:withEduStanfordNlpTreesTree:withJavaIoPrintWriter:);
  methods[3].selector = @selector(displayWithEduStanfordNlpStatsClassicCounter:withInt:withJavaIoPrintWriter:);
  methods[4].selector = @selector(displayWithBoolean:withJavaIoPrintWriter:);
  methods[5].selector = @selector(initWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "over_", "LEduStanfordNlpStatsClassicCounter;", .constantValue.asLong = 0, 0x2, -1, -1, 11, -1 },
    { "under_", "LEduStanfordNlpStatsClassicCounter;", .constantValue.asLong = 0, 0x2, -1, -1, 11, -1 },
  };
  static const void *ptrTable[] = { "localize", "LEduStanfordNlpTreesTree;", "makeObjects", "(Ledu/stanford/nlp/trees/Tree;)Ljava/util/Set<Ljava/lang/String;>;", "evaluate", "LEduStanfordNlpTreesTree;LEduStanfordNlpTreesTree;LJavaIoPrintWriter;", "display", "LEduStanfordNlpStatsClassicCounter;ILJavaIoPrintWriter;", "<T:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/ClassicCounter<TT;>;ILjava/io/PrintWriter;)V", "ZLJavaIoPrintWriter;", "LNSString;", "Ledu/stanford/nlp/stats/ClassicCounter<Ljava/lang/String;>;", "LEduStanfordNlpParserMetricsAbstractEval;" };
  static const J2ObjcClassInfo _EduStanfordNlpParserMetricsAbstractEval_RuleErrorEval = { "RuleErrorEval", "edu.stanford.nlp.parser.metrics", ptrTable, methods, fields, 7, 0x9, 6, 2, 12, -1, -1, -1, -1 };
  return &_EduStanfordNlpParserMetricsAbstractEval_RuleErrorEval;
}

@end

NSString *EduStanfordNlpParserMetricsAbstractEval_RuleErrorEval_localizeWithEduStanfordNlpTreesTree_(EduStanfordNlpTreesTree *tree) {
  EduStanfordNlpParserMetricsAbstractEval_RuleErrorEval_initialize();
  if ([((EduStanfordNlpTreesTree *) nil_chk(tree)) isLeaf]) {
    return @"";
  }
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  (void) [sb appendWithId:[tree label]];
  (void) [sb appendWithNSString:@" ->"];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk([tree children]))->size_; i++) {
    (void) [sb appendWithChar:' '];
    (void) [sb appendWithId:[((EduStanfordNlpTreesTree *) nil_chk(IOSObjectArray_Get(nil_chk([tree children]), i))) label]];
  }
  return [sb description];
}

void EduStanfordNlpParserMetricsAbstractEval_RuleErrorEval_displayWithEduStanfordNlpStatsClassicCounter_withInt_withJavaIoPrintWriter_(EduStanfordNlpStatsClassicCounter *c, jint num, JavaIoPrintWriter *pw) {
  EduStanfordNlpParserMetricsAbstractEval_RuleErrorEval_initialize();
  id<JavaUtilList> rules = new_JavaUtilArrayList_initWithJavaUtilCollection_([((EduStanfordNlpStatsClassicCounter *) nil_chk(c)) keySet]);
  JavaUtilCollections_sortWithJavaUtilList_withJavaUtilComparator_(rules, EduStanfordNlpStatsCounters_toComparatorDescendingWithEduStanfordNlpStatsCounter_(c));
  jint rSize = [rules size];
  if (num > rSize) {
    num = rSize;
  }
  for (jint i = 0; i < num; i++) {
    [((JavaIoPrintWriter *) nil_chk(pw)) printlnWithNSString:JreStrcat("@CD", [rules getWithInt:i], ' ', [c getCountWithId:[rules getWithInt:i]])];
  }
}

void EduStanfordNlpParserMetricsAbstractEval_RuleErrorEval_initWithNSString_(EduStanfordNlpParserMetricsAbstractEval_RuleErrorEval *self, NSString *str) {
  EduStanfordNlpParserMetricsAbstractEval_initWithNSString_(self, str);
  self->over_ = new_EduStanfordNlpStatsClassicCounter_init();
  self->under_ = new_EduStanfordNlpStatsClassicCounter_init();
}

EduStanfordNlpParserMetricsAbstractEval_RuleErrorEval *new_EduStanfordNlpParserMetricsAbstractEval_RuleErrorEval_initWithNSString_(NSString *str) {
  J2OBJC_NEW_IMPL(EduStanfordNlpParserMetricsAbstractEval_RuleErrorEval, initWithNSString_, str)
}

EduStanfordNlpParserMetricsAbstractEval_RuleErrorEval *create_EduStanfordNlpParserMetricsAbstractEval_RuleErrorEval_initWithNSString_(NSString *str) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpParserMetricsAbstractEval_RuleErrorEval, initWithNSString_, str)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpParserMetricsAbstractEval_RuleErrorEval)

@implementation EduStanfordNlpParserMetricsAbstractEval_CatErrorEval

- (id<JavaUtilSet>)makeObjectsWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)tree {
  return nil;
}

+ (id<JavaUtilList>)myMakeObjectsWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)tree {
  return EduStanfordNlpParserMetricsAbstractEval_CatErrorEval_myMakeObjectsWithEduStanfordNlpTreesTree_(tree);
}

- (void)evaluateWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t1
                withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t2
                      withJavaIoPrintWriter:(JavaIoPrintWriter *)pw {
  id<JavaUtilList> s1 = EduStanfordNlpParserMetricsAbstractEval_CatErrorEval_myMakeObjectsWithEduStanfordNlpTreesTree_(t1);
  id<JavaUtilList> s2 = EduStanfordNlpParserMetricsAbstractEval_CatErrorEval_myMakeObjectsWithEduStanfordNlpTreesTree_(t2);
  id<JavaUtilList> del2 = new_JavaUtilLinkedList_initWithJavaUtilCollection_(s2);
  for (NSString * __strong o1 in nil_chk(s1)) {
    if (![del2 removeWithId:o1]) {
      [((EduStanfordNlpStatsClassicCounter *) nil_chk(over_)) incrementCountWithId:o1];
    }
  }
  for (NSString * __strong o2 in nil_chk(s2)) {
    if (![s1 removeWithId:o2]) {
      [((EduStanfordNlpStatsClassicCounter *) nil_chk(under_)) incrementCountWithId:o2];
    }
  }
}

+ (void)displayWithEduStanfordNlpStatsClassicCounter:(EduStanfordNlpStatsClassicCounter *)c
                               withJavaIoPrintWriter:(JavaIoPrintWriter *)pw {
  EduStanfordNlpParserMetricsAbstractEval_CatErrorEval_displayWithEduStanfordNlpStatsClassicCounter_withJavaIoPrintWriter_(c, pw);
}

- (void)displayWithBoolean:(jboolean)verbose
     withJavaIoPrintWriter:(JavaIoPrintWriter *)pw {
  [((JavaIoPrintWriter *) nil_chk(pw)) printlnWithNSString:@"Most frequently underproposed categories:"];
  EduStanfordNlpParserMetricsAbstractEval_CatErrorEval_displayWithEduStanfordNlpStatsClassicCounter_withJavaIoPrintWriter_(under_, pw);
  [pw printlnWithNSString:@"Most frequently overproposed categories:"];
  EduStanfordNlpParserMetricsAbstractEval_CatErrorEval_displayWithEduStanfordNlpStatsClassicCounter_withJavaIoPrintWriter_(over_, pw);
}

- (instancetype)initWithNSString:(NSString *)str {
  EduStanfordNlpParserMetricsAbstractEval_CatErrorEval_initWithNSString_(self, str);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaUtilSet;", 0x4, 0, 1, -1, 2, -1, -1 },
    { NULL, "LJavaUtilList;", 0xa, 3, 1, -1, 4, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 7, 8, -1, 9, -1, -1 },
    { NULL, "V", 0x1, 7, 10, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 11, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(makeObjectsWithEduStanfordNlpTreesTree:);
  methods[1].selector = @selector(myMakeObjectsWithEduStanfordNlpTreesTree:);
  methods[2].selector = @selector(evaluateWithEduStanfordNlpTreesTree:withEduStanfordNlpTreesTree:withJavaIoPrintWriter:);
  methods[3].selector = @selector(displayWithEduStanfordNlpStatsClassicCounter:withJavaIoPrintWriter:);
  methods[4].selector = @selector(displayWithBoolean:withJavaIoPrintWriter:);
  methods[5].selector = @selector(initWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "over_", "LEduStanfordNlpStatsClassicCounter;", .constantValue.asLong = 0, 0x2, -1, -1, 12, -1 },
    { "under_", "LEduStanfordNlpStatsClassicCounter;", .constantValue.asLong = 0, 0x2, -1, -1, 12, -1 },
  };
  static const void *ptrTable[] = { "makeObjects", "LEduStanfordNlpTreesTree;", "(Ledu/stanford/nlp/trees/Tree;)Ljava/util/Set<*>;", "myMakeObjects", "(Ledu/stanford/nlp/trees/Tree;)Ljava/util/List<Ljava/lang/String;>;", "evaluate", "LEduStanfordNlpTreesTree;LEduStanfordNlpTreesTree;LJavaIoPrintWriter;", "display", "LEduStanfordNlpStatsClassicCounter;LJavaIoPrintWriter;", "<T:Ljava/lang/Object;>(Ledu/stanford/nlp/stats/ClassicCounter<TT;>;Ljava/io/PrintWriter;)V", "ZLJavaIoPrintWriter;", "LNSString;", "Ledu/stanford/nlp/stats/ClassicCounter<Ljava/lang/String;>;", "LEduStanfordNlpParserMetricsAbstractEval;" };
  static const J2ObjcClassInfo _EduStanfordNlpParserMetricsAbstractEval_CatErrorEval = { "CatErrorEval", "edu.stanford.nlp.parser.metrics", ptrTable, methods, fields, 7, 0x9, 6, 2, 13, -1, -1, -1, -1 };
  return &_EduStanfordNlpParserMetricsAbstractEval_CatErrorEval;
}

@end

id<JavaUtilList> EduStanfordNlpParserMetricsAbstractEval_CatErrorEval_myMakeObjectsWithEduStanfordNlpTreesTree_(EduStanfordNlpTreesTree *tree) {
  EduStanfordNlpParserMetricsAbstractEval_CatErrorEval_initialize();
  id<JavaUtilList> cats = new_JavaUtilLinkedList_init();
  for (EduStanfordNlpTreesTree * __strong st in nil_chk([((EduStanfordNlpTreesTree *) nil_chk(tree)) subTreeList])) {
    [cats addWithId:[((EduStanfordNlpTreesTree *) nil_chk(st)) value]];
  }
  return cats;
}

void EduStanfordNlpParserMetricsAbstractEval_CatErrorEval_displayWithEduStanfordNlpStatsClassicCounter_withJavaIoPrintWriter_(EduStanfordNlpStatsClassicCounter *c, JavaIoPrintWriter *pw) {
  EduStanfordNlpParserMetricsAbstractEval_CatErrorEval_initialize();
  id<JavaUtilList> cats = new_JavaUtilArrayList_initWithJavaUtilCollection_([((EduStanfordNlpStatsClassicCounter *) nil_chk(c)) keySet]);
  JavaUtilCollections_sortWithJavaUtilList_withJavaUtilComparator_(cats, EduStanfordNlpStatsCounters_toComparatorDescendingWithEduStanfordNlpStatsCounter_(c));
  for (id __strong ob in cats) {
    [((JavaIoPrintWriter *) nil_chk(pw)) printlnWithNSString:JreStrcat("@CD", ob, ' ', [c getCountWithId:ob])];
  }
}

void EduStanfordNlpParserMetricsAbstractEval_CatErrorEval_initWithNSString_(EduStanfordNlpParserMetricsAbstractEval_CatErrorEval *self, NSString *str) {
  EduStanfordNlpParserMetricsAbstractEval_initWithNSString_(self, str);
  self->over_ = new_EduStanfordNlpStatsClassicCounter_init();
  self->under_ = new_EduStanfordNlpStatsClassicCounter_init();
}

EduStanfordNlpParserMetricsAbstractEval_CatErrorEval *new_EduStanfordNlpParserMetricsAbstractEval_CatErrorEval_initWithNSString_(NSString *str) {
  J2OBJC_NEW_IMPL(EduStanfordNlpParserMetricsAbstractEval_CatErrorEval, initWithNSString_, str)
}

EduStanfordNlpParserMetricsAbstractEval_CatErrorEval *create_EduStanfordNlpParserMetricsAbstractEval_CatErrorEval_initWithNSString_(NSString *str) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpParserMetricsAbstractEval_CatErrorEval, initWithNSString_, str)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpParserMetricsAbstractEval_CatErrorEval)

@implementation EduStanfordNlpParserMetricsAbstractEval_ScoreEval

- (id<JavaUtilSet>)makeObjectsWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)tree {
  return nil;
}

- (void)recordScoreWithEduStanfordNlpParserKBestViterbiParser:(id<EduStanfordNlpParserKBestViterbiParser>)parser
                                        withJavaIoPrintWriter:(JavaIoPrintWriter *)pw {
  jdouble score = [((id<EduStanfordNlpParserKBestViterbiParser>) nil_chk(parser)) getBestScore];
  JrePlusAssignDoubleD(&totScore_, score);
  n_++;
  if (pw != nil) {
    [pw printWithNSString:JreStrcat("$$$", str_, @" score: ", [((JavaTextNumberFormat *) nil_chk(nf_)) formatWithDouble:score])];
    if (runningAverages_) {
      [pw printWithNSString:JreStrcat("$$", @" average score: ", [((JavaTextNumberFormat *) nil_chk(nf_)) formatWithDouble:totScore_ / n_])];
    }
    [pw println];
  }
}

- (void)displayWithBoolean:(jboolean)verbose
     withJavaIoPrintWriter:(JavaIoPrintWriter *)pw {
  if (pw != nil) {
    [pw printlnWithNSString:JreStrcat("$$$$$", str_, @" total score: ", [((JavaTextNumberFormat *) nil_chk(nf_)) formatWithDouble:totScore_], @" average score: ", ((n_ == 0.0) ? @"N/A" : [((JavaTextNumberFormat *) nil_chk(nf_)) formatWithDouble:totScore_ / n_]))];
  }
}

- (instancetype)initWithNSString:(NSString *)str
                     withBoolean:(jboolean)runningAverages {
  EduStanfordNlpParserMetricsAbstractEval_ScoreEval_initWithNSString_withBoolean_(self, str, runningAverages);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaUtilSet;", 0x4, 0, 1, -1, 2, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(makeObjectsWithEduStanfordNlpTreesTree:);
  methods[1].selector = @selector(recordScoreWithEduStanfordNlpParserKBestViterbiParser:withJavaIoPrintWriter:);
  methods[2].selector = @selector(displayWithBoolean:withJavaIoPrintWriter:);
  methods[3].selector = @selector(initWithNSString:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "totScore_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "n_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "nf_", "LJavaTextNumberFormat;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "makeObjects", "LEduStanfordNlpTreesTree;", "(Ledu/stanford/nlp/trees/Tree;)Ljava/util/Set<*>;", "recordScore", "LEduStanfordNlpParserKBestViterbiParser;LJavaIoPrintWriter;", "display", "ZLJavaIoPrintWriter;", "LNSString;Z", "LEduStanfordNlpParserMetricsAbstractEval;" };
  static const J2ObjcClassInfo _EduStanfordNlpParserMetricsAbstractEval_ScoreEval = { "ScoreEval", "edu.stanford.nlp.parser.metrics", ptrTable, methods, fields, 7, 0x9, 4, 3, 8, -1, -1, -1, -1 };
  return &_EduStanfordNlpParserMetricsAbstractEval_ScoreEval;
}

@end

void EduStanfordNlpParserMetricsAbstractEval_ScoreEval_initWithNSString_withBoolean_(EduStanfordNlpParserMetricsAbstractEval_ScoreEval *self, NSString *str, jboolean runningAverages) {
  EduStanfordNlpParserMetricsAbstractEval_initWithNSString_withBoolean_(self, str, runningAverages);
  self->totScore_ = 0.0;
  self->n_ = 0.0;
  self->nf_ = new_JavaTextDecimalFormat_initWithNSString_(@"0.000");
}

EduStanfordNlpParserMetricsAbstractEval_ScoreEval *new_EduStanfordNlpParserMetricsAbstractEval_ScoreEval_initWithNSString_withBoolean_(NSString *str, jboolean runningAverages) {
  J2OBJC_NEW_IMPL(EduStanfordNlpParserMetricsAbstractEval_ScoreEval, initWithNSString_withBoolean_, str, runningAverages)
}

EduStanfordNlpParserMetricsAbstractEval_ScoreEval *create_EduStanfordNlpParserMetricsAbstractEval_ScoreEval_initWithNSString_withBoolean_(NSString *str, jboolean runningAverages) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpParserMetricsAbstractEval_ScoreEval, initWithNSString_withBoolean_, str, runningAverages)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpParserMetricsAbstractEval_ScoreEval)
