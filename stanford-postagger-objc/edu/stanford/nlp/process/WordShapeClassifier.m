//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/process/WordShapeClassifier.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/objectbank/ObjectBank.h"
#include "edu/stanford/nlp/process/WordShapeClassifier.h"
#include "edu/stanford/nlp/trees/international/pennchinese/ChineseUtils.h"
#include "edu/stanford/nlp/util/Generics.h"
#include "edu/stanford/nlp/util/Timing.h"
#include "java/io/PrintStream.h"
#include "java/lang/Character.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/Collection.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/TreeSet.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"

@interface EduStanfordNlpProcessWordShapeClassifier ()

- (instancetype)init;

+ (jboolean)dontUseLCWithInt:(jint)shape;

+ (NSString *)wordShapeDan1WithNSString:(NSString *)s;

+ (NSString *)wordShapeDan2WithNSString:(NSString *)s
                 withJavaUtilCollection:(id<JavaUtilCollection>)knownLCWords;

+ (NSString *)wordShapeJenny1WithNSString:(NSString *)s
                   withJavaUtilCollection:(id<JavaUtilCollection>)knownLCWords;

+ (NSString *)wordShapeChris2WithNSString:(NSString *)s
                              withBoolean:(jboolean)omitIfInBoundary
                   withJavaUtilCollection:(id<JavaUtilCollection>)knownLCWords;

+ (NSString *)wordShapeChris2ShortWithNSString:(NSString *)s
                                       withInt:(jint)len
                        withJavaUtilCollection:(id<JavaUtilCollection>)knownLCWords;

+ (NSString *)wordShapeChris2LongWithNSString:(NSString *)s
                                  withBoolean:(jboolean)omitIfInBoundary
                                      withInt:(jint)len
                       withJavaUtilCollection:(id<JavaUtilCollection>)knownLCWords;

+ (jchar)chris4equivalenceClassWithChar:(jchar)c;

+ (NSString *)wordShapeChris4WithNSString:(NSString *)s
                              withBoolean:(jboolean)omitIfInBoundary
                   withJavaUtilCollection:(id<JavaUtilCollection>)knownLCWords;

+ (NSString *)wordShapeChris4ShortWithNSString:(NSString *)s
                                       withInt:(jint)len
                        withJavaUtilCollection:(id<JavaUtilCollection>)knownLCWords;

+ (NSString *)wordShapeChris4LongWithNSString:(NSString *)s
                                  withBoolean:(jboolean)omitIfInBoundary
                                      withInt:(jint)len
                       withJavaUtilCollection:(id<JavaUtilCollection>)knownLCWords;

+ (NSString *)wordShapeDan2BioWithNSString:(NSString *)s
                    withJavaUtilCollection:(id<JavaUtilCollection>)knownLCWords;

+ (jboolean)containsGreekLetterWithNSString:(NSString *)s;

+ (NSString *)wordShapeChris1WithNSString:(NSString *)s;

+ (NSString *)wordShapeDigitsWithNSString:(NSString *)s;

+ (NSString *)wordShapeCluster1WithNSString:(NSString *)s;

+ (NSString *)wordShapeChineseWithNSString:(NSString *)s;

@end

inline jint EduStanfordNlpProcessWordShapeClassifier_get_BOUNDARY_SIZE();
#define EduStanfordNlpProcessWordShapeClassifier_BOUNDARY_SIZE 2
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpProcessWordShapeClassifier, BOUNDARY_SIZE, jint)

inline IOSObjectArray *EduStanfordNlpProcessWordShapeClassifier_get_greek();
static IOSObjectArray *EduStanfordNlpProcessWordShapeClassifier_greek;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpProcessWordShapeClassifier, greek, IOSObjectArray *)

inline JavaUtilRegexPattern *EduStanfordNlpProcessWordShapeClassifier_get_biogreek();
static JavaUtilRegexPattern *EduStanfordNlpProcessWordShapeClassifier_biogreek;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpProcessWordShapeClassifier, biogreek, JavaUtilRegexPattern *)

__attribute__((unused)) static void EduStanfordNlpProcessWordShapeClassifier_init(EduStanfordNlpProcessWordShapeClassifier *self);

__attribute__((unused)) static EduStanfordNlpProcessWordShapeClassifier *new_EduStanfordNlpProcessWordShapeClassifier_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpProcessWordShapeClassifier *create_EduStanfordNlpProcessWordShapeClassifier_init();

__attribute__((unused)) static jboolean EduStanfordNlpProcessWordShapeClassifier_dontUseLCWithInt_(jint shape);

__attribute__((unused)) static NSString *EduStanfordNlpProcessWordShapeClassifier_wordShapeDan1WithNSString_(NSString *s);

__attribute__((unused)) static NSString *EduStanfordNlpProcessWordShapeClassifier_wordShapeDan2WithNSString_withJavaUtilCollection_(NSString *s, id<JavaUtilCollection> knownLCWords);

__attribute__((unused)) static NSString *EduStanfordNlpProcessWordShapeClassifier_wordShapeJenny1WithNSString_withJavaUtilCollection_(NSString *s, id<JavaUtilCollection> knownLCWords);

__attribute__((unused)) static NSString *EduStanfordNlpProcessWordShapeClassifier_wordShapeChris2WithNSString_withBoolean_withJavaUtilCollection_(NSString *s, jboolean omitIfInBoundary, id<JavaUtilCollection> knownLCWords);

__attribute__((unused)) static NSString *EduStanfordNlpProcessWordShapeClassifier_wordShapeChris2ShortWithNSString_withInt_withJavaUtilCollection_(NSString *s, jint len, id<JavaUtilCollection> knownLCWords);

__attribute__((unused)) static NSString *EduStanfordNlpProcessWordShapeClassifier_wordShapeChris2LongWithNSString_withBoolean_withInt_withJavaUtilCollection_(NSString *s, jboolean omitIfInBoundary, jint len, id<JavaUtilCollection> knownLCWords);

__attribute__((unused)) static jchar EduStanfordNlpProcessWordShapeClassifier_chris4equivalenceClassWithChar_(jchar c);

__attribute__((unused)) static NSString *EduStanfordNlpProcessWordShapeClassifier_wordShapeChris4WithNSString_withBoolean_withJavaUtilCollection_(NSString *s, jboolean omitIfInBoundary, id<JavaUtilCollection> knownLCWords);

__attribute__((unused)) static NSString *EduStanfordNlpProcessWordShapeClassifier_wordShapeChris4ShortWithNSString_withInt_withJavaUtilCollection_(NSString *s, jint len, id<JavaUtilCollection> knownLCWords);

__attribute__((unused)) static NSString *EduStanfordNlpProcessWordShapeClassifier_wordShapeChris4LongWithNSString_withBoolean_withInt_withJavaUtilCollection_(NSString *s, jboolean omitIfInBoundary, jint len, id<JavaUtilCollection> knownLCWords);

__attribute__((unused)) static NSString *EduStanfordNlpProcessWordShapeClassifier_wordShapeDan2BioWithNSString_withJavaUtilCollection_(NSString *s, id<JavaUtilCollection> knownLCWords);

__attribute__((unused)) static jboolean EduStanfordNlpProcessWordShapeClassifier_containsGreekLetterWithNSString_(NSString *s);

__attribute__((unused)) static NSString *EduStanfordNlpProcessWordShapeClassifier_wordShapeChris1WithNSString_(NSString *s);

__attribute__((unused)) static NSString *EduStanfordNlpProcessWordShapeClassifier_wordShapeDigitsWithNSString_(NSString *s);

__attribute__((unused)) static NSString *EduStanfordNlpProcessWordShapeClassifier_wordShapeCluster1WithNSString_(NSString *s);

__attribute__((unused)) static NSString *EduStanfordNlpProcessWordShapeClassifier_wordShapeChineseWithNSString_(NSString *s);

@interface EduStanfordNlpProcessWordShapeClassifier_DistributionalClusters : NSObject

- (instancetype)init;

+ (id<JavaUtilMap>)loadWordClustersWithNSString:(NSString *)file
                                   withNSString:(NSString *)format;

@end

J2OBJC_STATIC_INIT(EduStanfordNlpProcessWordShapeClassifier_DistributionalClusters)

inline id<JavaUtilMap> EduStanfordNlpProcessWordShapeClassifier_DistributionalClusters_get_cluster1();
inline id<JavaUtilMap> EduStanfordNlpProcessWordShapeClassifier_DistributionalClusters_set_cluster1(id<JavaUtilMap> value);
static id<JavaUtilMap> EduStanfordNlpProcessWordShapeClassifier_DistributionalClusters_cluster1;
J2OBJC_STATIC_FIELD_OBJ(EduStanfordNlpProcessWordShapeClassifier_DistributionalClusters, cluster1, id<JavaUtilMap>)

__attribute__((unused)) static void EduStanfordNlpProcessWordShapeClassifier_DistributionalClusters_init(EduStanfordNlpProcessWordShapeClassifier_DistributionalClusters *self);

__attribute__((unused)) static EduStanfordNlpProcessWordShapeClassifier_DistributionalClusters *new_EduStanfordNlpProcessWordShapeClassifier_DistributionalClusters_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpProcessWordShapeClassifier_DistributionalClusters *create_EduStanfordNlpProcessWordShapeClassifier_DistributionalClusters_init();

__attribute__((unused)) static id<JavaUtilMap> EduStanfordNlpProcessWordShapeClassifier_DistributionalClusters_loadWordClustersWithNSString_withNSString_(NSString *file, NSString *format);

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpProcessWordShapeClassifier_DistributionalClusters)

@interface EduStanfordNlpProcessWordShapeClassifier_DistributionalClusters_LcMap : JavaUtilHashMap

- (id)getWithId:(id)key;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpProcessWordShapeClassifier_DistributionalClusters_LcMap)

inline jlong EduStanfordNlpProcessWordShapeClassifier_DistributionalClusters_LcMap_get_serialVersionUID();
#define EduStanfordNlpProcessWordShapeClassifier_DistributionalClusters_LcMap_serialVersionUID -457913281600751901LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpProcessWordShapeClassifier_DistributionalClusters_LcMap, serialVersionUID, jlong)

__attribute__((unused)) static void EduStanfordNlpProcessWordShapeClassifier_DistributionalClusters_LcMap_init(EduStanfordNlpProcessWordShapeClassifier_DistributionalClusters_LcMap *self);

__attribute__((unused)) static EduStanfordNlpProcessWordShapeClassifier_DistributionalClusters_LcMap *new_EduStanfordNlpProcessWordShapeClassifier_DistributionalClusters_LcMap_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpProcessWordShapeClassifier_DistributionalClusters_LcMap *create_EduStanfordNlpProcessWordShapeClassifier_DistributionalClusters_LcMap_init();

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpProcessWordShapeClassifier_DistributionalClusters_LcMap)

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpProcessWordShapeClassifier)

@implementation EduStanfordNlpProcessWordShapeClassifier

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpProcessWordShapeClassifier_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jint)lookupShaperWithNSString:(NSString *)name {
  return EduStanfordNlpProcessWordShapeClassifier_lookupShaperWithNSString_(name);
}

+ (jboolean)dontUseLCWithInt:(jint)shape {
  return EduStanfordNlpProcessWordShapeClassifier_dontUseLCWithInt_(shape);
}

+ (NSString *)wordShapeWithNSString:(NSString *)inStr
                            withInt:(jint)wordShaper {
  return EduStanfordNlpProcessWordShapeClassifier_wordShapeWithNSString_withInt_(inStr, wordShaper);
}

+ (NSString *)wordShapeWithNSString:(NSString *)inStr
                            withInt:(jint)wordShaper
             withJavaUtilCollection:(id<JavaUtilCollection>)knownLCWords {
  return EduStanfordNlpProcessWordShapeClassifier_wordShapeWithNSString_withInt_withJavaUtilCollection_(inStr, wordShaper, knownLCWords);
}

+ (NSString *)wordShapeDan1WithNSString:(NSString *)s {
  return EduStanfordNlpProcessWordShapeClassifier_wordShapeDan1WithNSString_(s);
}

+ (NSString *)wordShapeDan2WithNSString:(NSString *)s
                 withJavaUtilCollection:(id<JavaUtilCollection>)knownLCWords {
  return EduStanfordNlpProcessWordShapeClassifier_wordShapeDan2WithNSString_withJavaUtilCollection_(s, knownLCWords);
}

+ (NSString *)wordShapeJenny1WithNSString:(NSString *)s
                   withJavaUtilCollection:(id<JavaUtilCollection>)knownLCWords {
  return EduStanfordNlpProcessWordShapeClassifier_wordShapeJenny1WithNSString_withJavaUtilCollection_(s, knownLCWords);
}

+ (NSString *)wordShapeChris2WithNSString:(NSString *)s
                              withBoolean:(jboolean)omitIfInBoundary
                   withJavaUtilCollection:(id<JavaUtilCollection>)knownLCWords {
  return EduStanfordNlpProcessWordShapeClassifier_wordShapeChris2WithNSString_withBoolean_withJavaUtilCollection_(s, omitIfInBoundary, knownLCWords);
}

+ (NSString *)wordShapeChris2ShortWithNSString:(NSString *)s
                                       withInt:(jint)len
                        withJavaUtilCollection:(id<JavaUtilCollection>)knownLCWords {
  return EduStanfordNlpProcessWordShapeClassifier_wordShapeChris2ShortWithNSString_withInt_withJavaUtilCollection_(s, len, knownLCWords);
}

+ (NSString *)wordShapeChris2LongWithNSString:(NSString *)s
                                  withBoolean:(jboolean)omitIfInBoundary
                                      withInt:(jint)len
                       withJavaUtilCollection:(id<JavaUtilCollection>)knownLCWords {
  return EduStanfordNlpProcessWordShapeClassifier_wordShapeChris2LongWithNSString_withBoolean_withInt_withJavaUtilCollection_(s, omitIfInBoundary, len, knownLCWords);
}

+ (jchar)chris4equivalenceClassWithChar:(jchar)c {
  return EduStanfordNlpProcessWordShapeClassifier_chris4equivalenceClassWithChar_(c);
}

+ (NSString *)wordShapeChris4WithNSString:(NSString *)s {
  return EduStanfordNlpProcessWordShapeClassifier_wordShapeChris4WithNSString_(s);
}

+ (NSString *)wordShapeChris4WithNSString:(NSString *)s
                              withBoolean:(jboolean)omitIfInBoundary
                   withJavaUtilCollection:(id<JavaUtilCollection>)knownLCWords {
  return EduStanfordNlpProcessWordShapeClassifier_wordShapeChris4WithNSString_withBoolean_withJavaUtilCollection_(s, omitIfInBoundary, knownLCWords);
}

+ (NSString *)wordShapeChris4ShortWithNSString:(NSString *)s
                                       withInt:(jint)len
                        withJavaUtilCollection:(id<JavaUtilCollection>)knownLCWords {
  return EduStanfordNlpProcessWordShapeClassifier_wordShapeChris4ShortWithNSString_withInt_withJavaUtilCollection_(s, len, knownLCWords);
}

+ (NSString *)wordShapeChris4LongWithNSString:(NSString *)s
                                  withBoolean:(jboolean)omitIfInBoundary
                                      withInt:(jint)len
                       withJavaUtilCollection:(id<JavaUtilCollection>)knownLCWords {
  return EduStanfordNlpProcessWordShapeClassifier_wordShapeChris4LongWithNSString_withBoolean_withInt_withJavaUtilCollection_(s, omitIfInBoundary, len, knownLCWords);
}

+ (NSString *)wordShapeDan2BioWithNSString:(NSString *)s
                    withJavaUtilCollection:(id<JavaUtilCollection>)knownLCWords {
  return EduStanfordNlpProcessWordShapeClassifier_wordShapeDan2BioWithNSString_withJavaUtilCollection_(s, knownLCWords);
}

+ (jboolean)containsGreekLetterWithNSString:(NSString *)s {
  return EduStanfordNlpProcessWordShapeClassifier_containsGreekLetterWithNSString_(s);
}

+ (NSString *)wordShapeChris1WithNSString:(NSString *)s {
  return EduStanfordNlpProcessWordShapeClassifier_wordShapeChris1WithNSString_(s);
}

+ (NSString *)wordShapeDigitsWithNSString:(NSString *)s {
  return EduStanfordNlpProcessWordShapeClassifier_wordShapeDigitsWithNSString_(s);
}

+ (NSString *)wordShapeCluster1WithNSString:(NSString *)s {
  return EduStanfordNlpProcessWordShapeClassifier_wordShapeCluster1WithNSString_(s);
}

+ (NSString *)wordShapeChineseWithNSString:(NSString *)s {
  return EduStanfordNlpProcessWordShapeClassifier_wordShapeChineseWithNSString_(s);
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  EduStanfordNlpProcessWordShapeClassifier_mainWithNSStringArray_(args);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 2, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 4, 5, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 4, 6, -1, 7, -1, -1 },
    { NULL, "LNSString;", 0xa, 8, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 9, 10, -1, 11, -1, -1 },
    { NULL, "LNSString;", 0xa, 12, 10, -1, 11, -1, -1 },
    { NULL, "LNSString;", 0xa, 13, 14, -1, 15, -1, -1 },
    { NULL, "LNSString;", 0xa, 16, 6, -1, 7, -1, -1 },
    { NULL, "LNSString;", 0xa, 17, 18, -1, 19, -1, -1 },
    { NULL, "C", 0xa, 20, 21, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 22, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 22, 14, -1, 15, -1, -1 },
    { NULL, "LNSString;", 0xa, 23, 6, -1, 7, -1, -1 },
    { NULL, "LNSString;", 0xa, 24, 18, -1, 19, -1, -1 },
    { NULL, "LNSString;", 0xa, 25, 10, -1, 11, -1, -1 },
    { NULL, "Z", 0xa, 26, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 27, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 28, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 29, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 30, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 31, 32, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(lookupShaperWithNSString:);
  methods[2].selector = @selector(dontUseLCWithInt:);
  methods[3].selector = @selector(wordShapeWithNSString:withInt:);
  methods[4].selector = @selector(wordShapeWithNSString:withInt:withJavaUtilCollection:);
  methods[5].selector = @selector(wordShapeDan1WithNSString:);
  methods[6].selector = @selector(wordShapeDan2WithNSString:withJavaUtilCollection:);
  methods[7].selector = @selector(wordShapeJenny1WithNSString:withJavaUtilCollection:);
  methods[8].selector = @selector(wordShapeChris2WithNSString:withBoolean:withJavaUtilCollection:);
  methods[9].selector = @selector(wordShapeChris2ShortWithNSString:withInt:withJavaUtilCollection:);
  methods[10].selector = @selector(wordShapeChris2LongWithNSString:withBoolean:withInt:withJavaUtilCollection:);
  methods[11].selector = @selector(chris4equivalenceClassWithChar:);
  methods[12].selector = @selector(wordShapeChris4WithNSString:);
  methods[13].selector = @selector(wordShapeChris4WithNSString:withBoolean:withJavaUtilCollection:);
  methods[14].selector = @selector(wordShapeChris4ShortWithNSString:withInt:withJavaUtilCollection:);
  methods[15].selector = @selector(wordShapeChris4LongWithNSString:withBoolean:withInt:withJavaUtilCollection:);
  methods[16].selector = @selector(wordShapeDan2BioWithNSString:withJavaUtilCollection:);
  methods[17].selector = @selector(containsGreekLetterWithNSString:);
  methods[18].selector = @selector(wordShapeChris1WithNSString:);
  methods[19].selector = @selector(wordShapeDigitsWithNSString:);
  methods[20].selector = @selector(wordShapeCluster1WithNSString:);
  methods[21].selector = @selector(wordShapeChineseWithNSString:);
  methods[22].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "NOWORDSHAPE", "I", .constantValue.asInt = EduStanfordNlpProcessWordShapeClassifier_NOWORDSHAPE, 0x19, -1, -1, -1, -1 },
    { "WORDSHAPEDAN1", "I", .constantValue.asInt = EduStanfordNlpProcessWordShapeClassifier_WORDSHAPEDAN1, 0x19, -1, -1, -1, -1 },
    { "WORDSHAPECHRIS1", "I", .constantValue.asInt = EduStanfordNlpProcessWordShapeClassifier_WORDSHAPECHRIS1, 0x19, -1, -1, -1, -1 },
    { "WORDSHAPEDAN2", "I", .constantValue.asInt = EduStanfordNlpProcessWordShapeClassifier_WORDSHAPEDAN2, 0x19, -1, -1, -1, -1 },
    { "WORDSHAPEDAN2USELC", "I", .constantValue.asInt = EduStanfordNlpProcessWordShapeClassifier_WORDSHAPEDAN2USELC, 0x19, -1, -1, -1, -1 },
    { "WORDSHAPEDAN2BIO", "I", .constantValue.asInt = EduStanfordNlpProcessWordShapeClassifier_WORDSHAPEDAN2BIO, 0x19, -1, -1, -1, -1 },
    { "WORDSHAPEDAN2BIOUSELC", "I", .constantValue.asInt = EduStanfordNlpProcessWordShapeClassifier_WORDSHAPEDAN2BIOUSELC, 0x19, -1, -1, -1, -1 },
    { "WORDSHAPEJENNY1", "I", .constantValue.asInt = EduStanfordNlpProcessWordShapeClassifier_WORDSHAPEJENNY1, 0x19, -1, -1, -1, -1 },
    { "WORDSHAPEJENNY1USELC", "I", .constantValue.asInt = EduStanfordNlpProcessWordShapeClassifier_WORDSHAPEJENNY1USELC, 0x19, -1, -1, -1, -1 },
    { "WORDSHAPECHRIS2", "I", .constantValue.asInt = EduStanfordNlpProcessWordShapeClassifier_WORDSHAPECHRIS2, 0x19, -1, -1, -1, -1 },
    { "WORDSHAPECHRIS2USELC", "I", .constantValue.asInt = EduStanfordNlpProcessWordShapeClassifier_WORDSHAPECHRIS2USELC, 0x19, -1, -1, -1, -1 },
    { "WORDSHAPECHRIS3", "I", .constantValue.asInt = EduStanfordNlpProcessWordShapeClassifier_WORDSHAPECHRIS3, 0x19, -1, -1, -1, -1 },
    { "WORDSHAPECHRIS3USELC", "I", .constantValue.asInt = EduStanfordNlpProcessWordShapeClassifier_WORDSHAPECHRIS3USELC, 0x19, -1, -1, -1, -1 },
    { "WORDSHAPECHRIS4", "I", .constantValue.asInt = EduStanfordNlpProcessWordShapeClassifier_WORDSHAPECHRIS4, 0x19, -1, -1, -1, -1 },
    { "WORDSHAPEDIGITS", "I", .constantValue.asInt = EduStanfordNlpProcessWordShapeClassifier_WORDSHAPEDIGITS, 0x19, -1, -1, -1, -1 },
    { "WORDSHAPECHINESE", "I", .constantValue.asInt = EduStanfordNlpProcessWordShapeClassifier_WORDSHAPECHINESE, 0x19, -1, -1, -1, -1 },
    { "WORDSHAPECLUSTER1", "I", .constantValue.asInt = EduStanfordNlpProcessWordShapeClassifier_WORDSHAPECLUSTER1, 0x19, -1, -1, -1, -1 },
    { "BOUNDARY_SIZE", "I", .constantValue.asInt = EduStanfordNlpProcessWordShapeClassifier_BOUNDARY_SIZE, 0x1a, -1, -1, -1, -1 },
    { "greek", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 33, -1, -1 },
    { "biogreek", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 34, -1, -1 },
  };
  static const void *ptrTable[] = { "lookupShaper", "LNSString;", "dontUseLC", "I", "wordShape", "LNSString;I", "LNSString;ILJavaUtilCollection;", "(Ljava/lang/String;ILjava/util/Collection<Ljava/lang/String;>;)Ljava/lang/String;", "wordShapeDan1", "wordShapeDan2", "LNSString;LJavaUtilCollection;", "(Ljava/lang/String;Ljava/util/Collection<Ljava/lang/String;>;)Ljava/lang/String;", "wordShapeJenny1", "wordShapeChris2", "LNSString;ZLJavaUtilCollection;", "(Ljava/lang/String;ZLjava/util/Collection<Ljava/lang/String;>;)Ljava/lang/String;", "wordShapeChris2Short", "wordShapeChris2Long", "LNSString;ZILJavaUtilCollection;", "(Ljava/lang/String;ZILjava/util/Collection<Ljava/lang/String;>;)Ljava/lang/String;", "chris4equivalenceClass", "C", "wordShapeChris4", "wordShapeChris4Short", "wordShapeChris4Long", "wordShapeDan2Bio", "containsGreekLetter", "wordShapeChris1", "wordShapeDigits", "wordShapeCluster1", "wordShapeChinese", "main", "[LNSString;", &EduStanfordNlpProcessWordShapeClassifier_greek, &EduStanfordNlpProcessWordShapeClassifier_biogreek, "LEduStanfordNlpProcessWordShapeClassifier_DistributionalClusters;" };
  static const J2ObjcClassInfo _EduStanfordNlpProcessWordShapeClassifier = { "WordShapeClassifier", "edu.stanford.nlp.process", ptrTable, methods, fields, 7, 0x1, 23, 20, -1, 35, -1, -1, -1 };
  return &_EduStanfordNlpProcessWordShapeClassifier;
}

+ (void)initialize {
  if (self == [EduStanfordNlpProcessWordShapeClassifier class]) {
    EduStanfordNlpProcessWordShapeClassifier_greek = [IOSObjectArray newArrayWithObjects:(id[]){ @"alpha", @"beta", @"gamma", @"delta", @"epsilon", @"zeta", @"theta", @"iota", @"kappa", @"lambda", @"omicron", @"rho", @"sigma", @"tau", @"upsilon", @"omega" } count:16 type:NSString_class_()];
    EduStanfordNlpProcessWordShapeClassifier_biogreek = JavaUtilRegexPattern_compileWithNSString_withInt_(@"alpha|beta|gamma|delta|epsilon|zeta|theta|iota|kappa|lambda|omicron|rho|sigma|tau|upsilon|omega", JavaUtilRegexPattern_CASE_INSENSITIVE);
    J2OBJC_SET_INITIALIZED(EduStanfordNlpProcessWordShapeClassifier)
  }
}

@end

void EduStanfordNlpProcessWordShapeClassifier_init(EduStanfordNlpProcessWordShapeClassifier *self) {
  NSObject_init(self);
}

EduStanfordNlpProcessWordShapeClassifier *new_EduStanfordNlpProcessWordShapeClassifier_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpProcessWordShapeClassifier, init)
}

EduStanfordNlpProcessWordShapeClassifier *create_EduStanfordNlpProcessWordShapeClassifier_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpProcessWordShapeClassifier, init)
}

jint EduStanfordNlpProcessWordShapeClassifier_lookupShaperWithNSString_(NSString *name) {
  EduStanfordNlpProcessWordShapeClassifier_initialize();
  if (name == nil) {
    return EduStanfordNlpProcessWordShapeClassifier_NOWORDSHAPE;
  }
  else if ([name equalsIgnoreCase:@"dan1"]) {
    return EduStanfordNlpProcessWordShapeClassifier_WORDSHAPEDAN1;
  }
  else if ([name equalsIgnoreCase:@"chris1"]) {
    return EduStanfordNlpProcessWordShapeClassifier_WORDSHAPECHRIS1;
  }
  else if ([name equalsIgnoreCase:@"dan2"]) {
    return EduStanfordNlpProcessWordShapeClassifier_WORDSHAPEDAN2;
  }
  else if ([name equalsIgnoreCase:@"dan2useLC"]) {
    return EduStanfordNlpProcessWordShapeClassifier_WORDSHAPEDAN2USELC;
  }
  else if ([name equalsIgnoreCase:@"dan2bio"]) {
    return EduStanfordNlpProcessWordShapeClassifier_WORDSHAPEDAN2BIO;
  }
  else if ([name equalsIgnoreCase:@"dan2bioUseLC"]) {
    return EduStanfordNlpProcessWordShapeClassifier_WORDSHAPEDAN2BIOUSELC;
  }
  else if ([name equalsIgnoreCase:@"jenny1"]) {
    return EduStanfordNlpProcessWordShapeClassifier_WORDSHAPEJENNY1;
  }
  else if ([name equalsIgnoreCase:@"jenny1useLC"]) {
    return EduStanfordNlpProcessWordShapeClassifier_WORDSHAPEJENNY1USELC;
  }
  else if ([name equalsIgnoreCase:@"chris2"]) {
    return EduStanfordNlpProcessWordShapeClassifier_WORDSHAPECHRIS2;
  }
  else if ([name equalsIgnoreCase:@"chris2useLC"]) {
    return EduStanfordNlpProcessWordShapeClassifier_WORDSHAPECHRIS2USELC;
  }
  else if ([name equalsIgnoreCase:@"chris3"]) {
    return EduStanfordNlpProcessWordShapeClassifier_WORDSHAPECHRIS3;
  }
  else if ([name equalsIgnoreCase:@"chris3useLC"]) {
    return EduStanfordNlpProcessWordShapeClassifier_WORDSHAPECHRIS3USELC;
  }
  else if ([name equalsIgnoreCase:@"chris4"]) {
    return EduStanfordNlpProcessWordShapeClassifier_WORDSHAPECHRIS4;
  }
  else if ([name equalsIgnoreCase:@"digits"]) {
    return EduStanfordNlpProcessWordShapeClassifier_WORDSHAPEDIGITS;
  }
  else if ([name equalsIgnoreCase:@"chinese"]) {
    return EduStanfordNlpProcessWordShapeClassifier_WORDSHAPECHINESE;
  }
  else if ([name equalsIgnoreCase:@"cluster1"]) {
    return EduStanfordNlpProcessWordShapeClassifier_WORDSHAPECLUSTER1;
  }
  else {
    return EduStanfordNlpProcessWordShapeClassifier_NOWORDSHAPE;
  }
}

jboolean EduStanfordNlpProcessWordShapeClassifier_dontUseLCWithInt_(jint shape) {
  EduStanfordNlpProcessWordShapeClassifier_initialize();
  return shape == EduStanfordNlpProcessWordShapeClassifier_WORDSHAPEDAN2 || shape == EduStanfordNlpProcessWordShapeClassifier_WORDSHAPEDAN2BIO || shape == EduStanfordNlpProcessWordShapeClassifier_WORDSHAPEJENNY1 || shape == EduStanfordNlpProcessWordShapeClassifier_WORDSHAPECHRIS2 || shape == EduStanfordNlpProcessWordShapeClassifier_WORDSHAPECHRIS3;
}

NSString *EduStanfordNlpProcessWordShapeClassifier_wordShapeWithNSString_withInt_(NSString *inStr, jint wordShaper) {
  EduStanfordNlpProcessWordShapeClassifier_initialize();
  return EduStanfordNlpProcessWordShapeClassifier_wordShapeWithNSString_withInt_withJavaUtilCollection_(inStr, wordShaper, nil);
}

NSString *EduStanfordNlpProcessWordShapeClassifier_wordShapeWithNSString_withInt_withJavaUtilCollection_(NSString *inStr, jint wordShaper, id<JavaUtilCollection> knownLCWords) {
  EduStanfordNlpProcessWordShapeClassifier_initialize();
  if (knownLCWords != nil && EduStanfordNlpProcessWordShapeClassifier_dontUseLCWithInt_(wordShaper)) {
    knownLCWords = nil;
  }
  switch (wordShaper) {
    case EduStanfordNlpProcessWordShapeClassifier_NOWORDSHAPE:
    return inStr;
    case EduStanfordNlpProcessWordShapeClassifier_WORDSHAPEDAN1:
    return EduStanfordNlpProcessWordShapeClassifier_wordShapeDan1WithNSString_(inStr);
    case EduStanfordNlpProcessWordShapeClassifier_WORDSHAPECHRIS1:
    return EduStanfordNlpProcessWordShapeClassifier_wordShapeChris1WithNSString_(inStr);
    case EduStanfordNlpProcessWordShapeClassifier_WORDSHAPEDAN2:
    return EduStanfordNlpProcessWordShapeClassifier_wordShapeDan2WithNSString_withJavaUtilCollection_(inStr, knownLCWords);
    case EduStanfordNlpProcessWordShapeClassifier_WORDSHAPEDAN2USELC:
    return EduStanfordNlpProcessWordShapeClassifier_wordShapeDan2WithNSString_withJavaUtilCollection_(inStr, knownLCWords);
    case EduStanfordNlpProcessWordShapeClassifier_WORDSHAPEDAN2BIO:
    return EduStanfordNlpProcessWordShapeClassifier_wordShapeDan2BioWithNSString_withJavaUtilCollection_(inStr, knownLCWords);
    case EduStanfordNlpProcessWordShapeClassifier_WORDSHAPEDAN2BIOUSELC:
    return EduStanfordNlpProcessWordShapeClassifier_wordShapeDan2BioWithNSString_withJavaUtilCollection_(inStr, knownLCWords);
    case EduStanfordNlpProcessWordShapeClassifier_WORDSHAPEJENNY1:
    return EduStanfordNlpProcessWordShapeClassifier_wordShapeJenny1WithNSString_withJavaUtilCollection_(inStr, knownLCWords);
    case EduStanfordNlpProcessWordShapeClassifier_WORDSHAPEJENNY1USELC:
    return EduStanfordNlpProcessWordShapeClassifier_wordShapeJenny1WithNSString_withJavaUtilCollection_(inStr, knownLCWords);
    case EduStanfordNlpProcessWordShapeClassifier_WORDSHAPECHRIS2:
    return EduStanfordNlpProcessWordShapeClassifier_wordShapeChris2WithNSString_withBoolean_withJavaUtilCollection_(inStr, false, knownLCWords);
    case EduStanfordNlpProcessWordShapeClassifier_WORDSHAPECHRIS2USELC:
    return EduStanfordNlpProcessWordShapeClassifier_wordShapeChris2WithNSString_withBoolean_withJavaUtilCollection_(inStr, false, knownLCWords);
    case EduStanfordNlpProcessWordShapeClassifier_WORDSHAPECHRIS3:
    return EduStanfordNlpProcessWordShapeClassifier_wordShapeChris2WithNSString_withBoolean_withJavaUtilCollection_(inStr, true, knownLCWords);
    case EduStanfordNlpProcessWordShapeClassifier_WORDSHAPECHRIS3USELC:
    return EduStanfordNlpProcessWordShapeClassifier_wordShapeChris2WithNSString_withBoolean_withJavaUtilCollection_(inStr, true, knownLCWords);
    case EduStanfordNlpProcessWordShapeClassifier_WORDSHAPECHRIS4:
    return EduStanfordNlpProcessWordShapeClassifier_wordShapeChris4WithNSString_withBoolean_withJavaUtilCollection_(inStr, false, knownLCWords);
    case EduStanfordNlpProcessWordShapeClassifier_WORDSHAPEDIGITS:
    return EduStanfordNlpProcessWordShapeClassifier_wordShapeDigitsWithNSString_(inStr);
    case EduStanfordNlpProcessWordShapeClassifier_WORDSHAPECHINESE:
    return EduStanfordNlpProcessWordShapeClassifier_wordShapeChineseWithNSString_(inStr);
    case EduStanfordNlpProcessWordShapeClassifier_WORDSHAPECLUSTER1:
    return EduStanfordNlpProcessWordShapeClassifier_wordShapeCluster1WithNSString_(inStr);
    default:
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Bad WordShapeClassifier");
  }
}

NSString *EduStanfordNlpProcessWordShapeClassifier_wordShapeDan1WithNSString_(NSString *s) {
  EduStanfordNlpProcessWordShapeClassifier_initialize();
  jboolean digit = true;
  jboolean upper = true;
  jboolean lower = true;
  jboolean mixed = true;
  for (jint i = 0; i < ((jint) [((NSString *) nil_chk(s)) length]); i++) {
    jchar c = [s charAtWithInt:i];
    if (!JavaLangCharacter_isDigitWithChar_(c)) {
      digit = false;
    }
    if (!JavaLangCharacter_isLowerCaseWithChar_(c)) {
      lower = false;
    }
    if (!JavaLangCharacter_isUpperCaseWithChar_(c)) {
      upper = false;
    }
    if ((i == 0 && !JavaLangCharacter_isUpperCaseWithChar_(c)) || (i >= 1 && !JavaLangCharacter_isLowerCaseWithChar_(c))) {
      mixed = false;
    }
  }
  if (digit) {
    return @"ALL-DIGITS";
  }
  if (upper) {
    return @"ALL-UPPER";
  }
  if (lower) {
    return @"ALL-LOWER";
  }
  if (mixed) {
    return @"MIXED-CASE";
  }
  return @"OTHER";
}

NSString *EduStanfordNlpProcessWordShapeClassifier_wordShapeDan2WithNSString_withJavaUtilCollection_(NSString *s, id<JavaUtilCollection> knownLCWords) {
  EduStanfordNlpProcessWordShapeClassifier_initialize();
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_initWithNSString_(@"WT-");
  jchar lastM = '~';
  jboolean nonLetters = false;
  jint len = ((jint) [((NSString *) nil_chk(s)) length]);
  for (jint i = 0; i < len; i++) {
    jchar c = [s charAtWithInt:i];
    jchar m = c;
    if (JavaLangCharacter_isDigitWithChar_(c)) {
      m = 'd';
    }
    else if (JavaLangCharacter_isLowerCaseWithChar_(c) || c == '_') {
      m = 'x';
    }
    else if (JavaLangCharacter_isUpperCaseWithChar_(c)) {
      m = 'X';
    }
    if (m != 'x' && m != 'X') {
      nonLetters = true;
    }
    if (m != lastM) {
      (void) [sb appendWithChar:m];
    }
    lastM = m;
  }
  if (len <= 3) {
    (void) [((JavaLangStringBuilder *) nil_chk([sb appendWithChar:':'])) appendWithInt:len];
  }
  if (knownLCWords != nil) {
    if (!nonLetters && [knownLCWords containsWithId:[s lowercaseString]]) {
      (void) [sb appendWithChar:'k'];
    }
  }
  return [sb description];
}

NSString *EduStanfordNlpProcessWordShapeClassifier_wordShapeJenny1WithNSString_withJavaUtilCollection_(NSString *s, id<JavaUtilCollection> knownLCWords) {
  EduStanfordNlpProcessWordShapeClassifier_initialize();
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_initWithNSString_(@"WT-");
  jchar lastM = '~';
  jboolean nonLetters = false;
  for (jint i = 0; i < ((jint) [((NSString *) nil_chk(s)) length]); i++) {
    jchar c = [s charAtWithInt:i];
    jchar m = c;
    if (JavaLangCharacter_isDigitWithChar_(c)) {
      m = 'd';
    }
    else if (JavaLangCharacter_isLowerCaseWithChar_(c)) {
      m = 'x';
    }
    else if (JavaLangCharacter_isUpperCaseWithChar_(c)) {
      m = 'X';
    }
    {
      IOSObjectArray *a__ = EduStanfordNlpProcessWordShapeClassifier_greek;
      NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      NSString * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        NSString *gr = *b__++;
        if ([s hasPrefix:gr offset:i]) {
          m = 'g';
          i = i + ((jint) [((NSString *) nil_chk(gr)) length]) - 1;
          break;
        }
      }
    }
    if (m != 'x' && m != 'X') {
      nonLetters = true;
    }
    if (m != lastM) {
      (void) [sb appendWithChar:m];
    }
    lastM = m;
  }
  if (((jint) [s length]) <= 3) {
    (void) [((JavaLangStringBuilder *) nil_chk([sb appendWithChar:':'])) appendWithInt:((jint) [s length])];
  }
  if (knownLCWords != nil) {
    if (!nonLetters && [knownLCWords containsWithId:[s lowercaseString]]) {
      (void) [sb appendWithChar:'k'];
    }
  }
  return [sb description];
}

NSString *EduStanfordNlpProcessWordShapeClassifier_wordShapeChris2WithNSString_withBoolean_withJavaUtilCollection_(NSString *s, jboolean omitIfInBoundary, id<JavaUtilCollection> knownLCWords) {
  EduStanfordNlpProcessWordShapeClassifier_initialize();
  jint len = ((jint) [((NSString *) nil_chk(s)) length]);
  if (len <= EduStanfordNlpProcessWordShapeClassifier_BOUNDARY_SIZE * 2) {
    return EduStanfordNlpProcessWordShapeClassifier_wordShapeChris2ShortWithNSString_withInt_withJavaUtilCollection_(s, len, knownLCWords);
  }
  else {
    return EduStanfordNlpProcessWordShapeClassifier_wordShapeChris2LongWithNSString_withBoolean_withInt_withJavaUtilCollection_(s, omitIfInBoundary, len, knownLCWords);
  }
}

NSString *EduStanfordNlpProcessWordShapeClassifier_wordShapeChris2ShortWithNSString_withInt_withJavaUtilCollection_(NSString *s, jint len, id<JavaUtilCollection> knownLCWords) {
  EduStanfordNlpProcessWordShapeClassifier_initialize();
  jint sbLen = (knownLCWords != nil) ? len + 1 : len;
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_initWithInt_(sbLen);
  jboolean nonLetters = false;
  for (jint i = 0; i < len; i++) {
    jchar c = [((NSString *) nil_chk(s)) charAtWithInt:i];
    jchar m = c;
    if (JavaLangCharacter_isDigitWithChar_(c)) {
      m = 'd';
    }
    else if (JavaLangCharacter_isLowerCaseWithChar_(c)) {
      m = 'x';
    }
    else if (JavaLangCharacter_isUpperCaseWithChar_(c) || JavaLangCharacter_isTitleCaseWithChar_(c)) {
      m = 'X';
    }
    {
      IOSObjectArray *a__ = EduStanfordNlpProcessWordShapeClassifier_greek;
      NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      NSString * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        NSString *gr = *b__++;
        if ([s hasPrefix:gr offset:i]) {
          m = 'g';
          i += ((jint) [((NSString *) nil_chk(gr)) length]) - 1;
          break;
        }
      }
    }
    if (m != 'x' && m != 'X') {
      nonLetters = true;
    }
    (void) [sb appendWithChar:m];
  }
  if (knownLCWords != nil) {
    if (!nonLetters && [knownLCWords containsWithId:[((NSString *) nil_chk(s)) lowercaseString]]) {
      (void) [sb appendWithChar:'k'];
    }
  }
  return [sb description];
}

NSString *EduStanfordNlpProcessWordShapeClassifier_wordShapeChris2LongWithNSString_withBoolean_withInt_withJavaUtilCollection_(NSString *s, jboolean omitIfInBoundary, jint len, id<JavaUtilCollection> knownLCWords) {
  EduStanfordNlpProcessWordShapeClassifier_initialize();
  IOSCharArray *beginChars = [IOSCharArray newArrayWithLength:EduStanfordNlpProcessWordShapeClassifier_BOUNDARY_SIZE];
  IOSCharArray *endChars = [IOSCharArray newArrayWithLength:EduStanfordNlpProcessWordShapeClassifier_BOUNDARY_SIZE];
  jint beginUpto = 0;
  jint endUpto = 0;
  id<JavaUtilSet> seenSet = new_JavaUtilTreeSet_init();
  jboolean nonLetters = false;
  for (jint i = 0; i < len; i++) {
    jint iIncr = 0;
    jchar c = [((NSString *) nil_chk(s)) charAtWithInt:i];
    jchar m = c;
    if (JavaLangCharacter_isDigitWithChar_(c)) {
      m = 'd';
    }
    else if (JavaLangCharacter_isLowerCaseWithChar_(c)) {
      m = 'x';
    }
    else if (JavaLangCharacter_isUpperCaseWithChar_(c) || JavaLangCharacter_isTitleCaseWithChar_(c)) {
      m = 'X';
    }
    {
      IOSObjectArray *a__ = EduStanfordNlpProcessWordShapeClassifier_greek;
      NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      NSString * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        NSString *gr = *b__++;
        if ([s hasPrefix:gr offset:i]) {
          m = 'g';
          iIncr = ((jint) [((NSString *) nil_chk(gr)) length]) - 1;
          break;
        }
      }
    }
    if (m != 'x' && m != 'X') {
      nonLetters = true;
    }
    if (i < EduStanfordNlpProcessWordShapeClassifier_BOUNDARY_SIZE) {
      *IOSCharArray_GetRef(beginChars, beginUpto++) = m;
    }
    else if (i < len - EduStanfordNlpProcessWordShapeClassifier_BOUNDARY_SIZE) {
      [seenSet addWithId:JavaLangCharacter_valueOfWithChar_(m)];
    }
    else {
      *IOSCharArray_GetRef(endChars, endUpto++) = m;
    }
    i += iIncr;
  }
  jint sbSize = beginUpto + endUpto + [seenSet size];
  if (knownLCWords != nil) {
    sbSize++;
  }
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_initWithInt_(sbSize);
  (void) [sb appendWithCharArray:beginChars withInt:0 withInt:beginUpto];
  if (omitIfInBoundary) {
    for (JavaLangCharacter * __strong chr in seenSet) {
      jchar ch = [((JavaLangCharacter *) nil_chk(chr)) charValue];
      jboolean insert = true;
      for (jint i = 0; i < beginUpto; i++) {
        if (IOSCharArray_Get(beginChars, i) == ch) {
          insert = false;
          break;
        }
      }
      for (jint i = 0; i < endUpto; i++) {
        if (IOSCharArray_Get(endChars, i) == ch) {
          insert = false;
          break;
        }
      }
      if (insert) {
        (void) [sb appendWithChar:ch];
      }
    }
  }
  else {
    for (JavaLangCharacter * __strong chr in seenSet) {
      (void) [sb appendWithChar:[((JavaLangCharacter *) nil_chk(chr)) charValue]];
    }
  }
  (void) [sb appendWithCharArray:endChars withInt:0 withInt:endUpto];
  if (knownLCWords != nil) {
    if (!nonLetters && [knownLCWords containsWithId:[((NSString *) nil_chk(s)) lowercaseString]]) {
      (void) [sb appendWithChar:'k'];
    }
  }
  return [sb description];
}

jchar EduStanfordNlpProcessWordShapeClassifier_chris4equivalenceClassWithChar_(jchar c) {
  EduStanfordNlpProcessWordShapeClassifier_initialize();
  jint type = JavaLangCharacter_getTypeWithChar_(c);
  if (JavaLangCharacter_isDigitWithChar_(c) || type == JavaLangCharacter_LETTER_NUMBER || type == JavaLangCharacter_OTHER_NUMBER || [@"\u4e00\u4e8c\u4e09\u56db\u4e94\u516d\u4e03\u516b\u4e5d\u5341\u96f6\u3007\u767e\u5343\u4e07\u4ebf\u5169\u25cb\u25ef" indexOf:c] > 0) {
    return 'd';
  }
  else if (c == 0x7b2c) {
    return 'o';
  }
  else if (c == 0x5e74 || c == 0x6708 || c == 0x65e5) {
    return 'D';
  }
  else if (JavaLangCharacter_isLowerCaseWithChar_(c)) {
    return 'x';
  }
  else if (JavaLangCharacter_isUpperCaseWithChar_(c) || JavaLangCharacter_isTitleCaseWithChar_(c)) {
    return 'X';
  }
  else if (JavaLangCharacter_isWhitespaceWithChar_(c) || JavaLangCharacter_isSpaceCharWithChar_(c)) {
    return 's';
  }
  else if (type == JavaLangCharacter_OTHER_LETTER) {
    return 'c';
  }
  else if (type == JavaLangCharacter_CURRENCY_SYMBOL) {
    return '$';
  }
  else if (type == JavaLangCharacter_MATH_SYMBOL) {
    return '+';
  }
  else if (type == JavaLangCharacter_OTHER_SYMBOL || c == '|') {
    return '|';
  }
  else if (type == JavaLangCharacter_START_PUNCTUATION) {
    return '(';
  }
  else if (type == JavaLangCharacter_END_PUNCTUATION) {
    return ')';
  }
  else if (type == JavaLangCharacter_INITIAL_QUOTE_PUNCTUATION) {
    return '`';
  }
  else if (type == JavaLangCharacter_FINAL_QUOTE_PUNCTUATION || c == '\'') {
    return '\'';
  }
  else if (c == '%') {
    return '%';
  }
  else if (type == JavaLangCharacter_OTHER_PUNCTUATION) {
    return '.';
  }
  else if (type == JavaLangCharacter_CONNECTOR_PUNCTUATION) {
    return '_';
  }
  else if (type == JavaLangCharacter_DASH_PUNCTUATION) {
    return '-';
  }
  else {
    return 'q';
  }
}

NSString *EduStanfordNlpProcessWordShapeClassifier_wordShapeChris4WithNSString_(NSString *s) {
  EduStanfordNlpProcessWordShapeClassifier_initialize();
  return EduStanfordNlpProcessWordShapeClassifier_wordShapeChris4WithNSString_withBoolean_withJavaUtilCollection_(s, false, nil);
}

NSString *EduStanfordNlpProcessWordShapeClassifier_wordShapeChris4WithNSString_withBoolean_withJavaUtilCollection_(NSString *s, jboolean omitIfInBoundary, id<JavaUtilCollection> knownLCWords) {
  EduStanfordNlpProcessWordShapeClassifier_initialize();
  jint len = ((jint) [((NSString *) nil_chk(s)) length]);
  if (len <= EduStanfordNlpProcessWordShapeClassifier_BOUNDARY_SIZE * 2) {
    return EduStanfordNlpProcessWordShapeClassifier_wordShapeChris4ShortWithNSString_withInt_withJavaUtilCollection_(s, len, knownLCWords);
  }
  else {
    return EduStanfordNlpProcessWordShapeClassifier_wordShapeChris4LongWithNSString_withBoolean_withInt_withJavaUtilCollection_(s, omitIfInBoundary, len, knownLCWords);
  }
}

NSString *EduStanfordNlpProcessWordShapeClassifier_wordShapeChris4ShortWithNSString_withInt_withJavaUtilCollection_(NSString *s, jint len, id<JavaUtilCollection> knownLCWords) {
  EduStanfordNlpProcessWordShapeClassifier_initialize();
  jint sbLen = (knownLCWords != nil) ? len + 1 : len;
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_initWithInt_(sbLen);
  jboolean nonLetters = false;
  for (jint i = 0; i < len; i++) {
    jchar c = [((NSString *) nil_chk(s)) charAtWithInt:i];
    jchar m = EduStanfordNlpProcessWordShapeClassifier_chris4equivalenceClassWithChar_(c);
    {
      IOSObjectArray *a__ = EduStanfordNlpProcessWordShapeClassifier_greek;
      NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      NSString * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        NSString *gr = *b__++;
        if ([s hasPrefix:gr offset:i]) {
          m = 'g';
          i += ((jint) [((NSString *) nil_chk(gr)) length]) - 1;
          break;
        }
      }
    }
    if (m != 'x' && m != 'X') {
      nonLetters = true;
    }
    (void) [sb appendWithChar:m];
  }
  if (knownLCWords != nil) {
    if (!nonLetters && [knownLCWords containsWithId:[((NSString *) nil_chk(s)) lowercaseString]]) {
      (void) [sb appendWithChar:'k'];
    }
  }
  return [sb description];
}

NSString *EduStanfordNlpProcessWordShapeClassifier_wordShapeChris4LongWithNSString_withBoolean_withInt_withJavaUtilCollection_(NSString *s, jboolean omitIfInBoundary, jint len, id<JavaUtilCollection> knownLCWords) {
  EduStanfordNlpProcessWordShapeClassifier_initialize();
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_initWithInt_(((jint) [((NSString *) nil_chk(s)) length]) + 1);
  JavaLangStringBuilder *endSB = new_JavaLangStringBuilder_initWithInt_(EduStanfordNlpProcessWordShapeClassifier_BOUNDARY_SIZE);
  id<JavaUtilSet> boundSet = EduStanfordNlpUtilGenerics_newHashSetWithInt_(EduStanfordNlpProcessWordShapeClassifier_BOUNDARY_SIZE * 2);
  id<JavaUtilSet> seenSet = new_JavaUtilTreeSet_init();
  jboolean nonLetters = false;
  for (jint i = 0; i < len; i++) {
    jchar c = [s charAtWithInt:i];
    jchar m = EduStanfordNlpProcessWordShapeClassifier_chris4equivalenceClassWithChar_(c);
    jint iIncr = 0;
    {
      IOSObjectArray *a__ = EduStanfordNlpProcessWordShapeClassifier_greek;
      NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      NSString * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        NSString *gr = *b__++;
        if ([s hasPrefix:gr offset:i]) {
          m = 'g';
          iIncr = ((jint) [((NSString *) nil_chk(gr)) length]) - 1;
          break;
        }
      }
    }
    if (m != 'x' && m != 'X') {
      nonLetters = true;
    }
    if (i < EduStanfordNlpProcessWordShapeClassifier_BOUNDARY_SIZE) {
      (void) [sb appendWithChar:m];
      [((id<JavaUtilSet>) nil_chk(boundSet)) addWithId:JavaLangCharacter_valueOfWithChar_(m)];
    }
    else if (i < len - EduStanfordNlpProcessWordShapeClassifier_BOUNDARY_SIZE) {
      [seenSet addWithId:JavaLangCharacter_valueOfWithChar_(m)];
    }
    else {
      [((id<JavaUtilSet>) nil_chk(boundSet)) addWithId:JavaLangCharacter_valueOfWithChar_(m)];
      (void) [endSB appendWithChar:m];
    }
    i += iIncr;
  }
  for (JavaLangCharacter * __strong chr in seenSet) {
    if (!omitIfInBoundary || ![((id<JavaUtilSet>) nil_chk(boundSet)) containsWithId:chr]) {
      jchar ch = [((JavaLangCharacter *) nil_chk(chr)) charValue];
      (void) [sb appendWithChar:ch];
    }
  }
  (void) [sb appendWithJavaLangCharSequence:endSB];
  if (knownLCWords != nil) {
    if (!nonLetters && [knownLCWords containsWithId:[s lowercaseString]]) {
      (void) [sb appendWithChar:'k'];
    }
  }
  return [sb description];
}

NSString *EduStanfordNlpProcessWordShapeClassifier_wordShapeDan2BioWithNSString_withJavaUtilCollection_(NSString *s, id<JavaUtilCollection> knownLCWords) {
  EduStanfordNlpProcessWordShapeClassifier_initialize();
  if (EduStanfordNlpProcessWordShapeClassifier_containsGreekLetterWithNSString_(s)) {
    return JreStrcat("$$", EduStanfordNlpProcessWordShapeClassifier_wordShapeDan2WithNSString_withJavaUtilCollection_(s, knownLCWords), @"-GREEK");
  }
  else {
    return EduStanfordNlpProcessWordShapeClassifier_wordShapeDan2WithNSString_withJavaUtilCollection_(s, knownLCWords);
  }
}

jboolean EduStanfordNlpProcessWordShapeClassifier_containsGreekLetterWithNSString_(NSString *s) {
  EduStanfordNlpProcessWordShapeClassifier_initialize();
  JavaUtilRegexMatcher *m = [((JavaUtilRegexPattern *) nil_chk(EduStanfordNlpProcessWordShapeClassifier_biogreek)) matcherWithJavaLangCharSequence:s];
  return [((JavaUtilRegexMatcher *) nil_chk(m)) find];
}

NSString *EduStanfordNlpProcessWordShapeClassifier_wordShapeChris1WithNSString_(NSString *s) {
  EduStanfordNlpProcessWordShapeClassifier_initialize();
  jint length = ((jint) [((NSString *) nil_chk(s)) length]);
  if (length == 0) {
    return @"SYMBOL";
  }
  jboolean cardinal = false;
  jboolean number = true;
  jboolean seenDigit = false;
  jboolean seenNonDigit = false;
  for (jint i = 0; i < length; i++) {
    jchar ch = [s charAtWithInt:i];
    jboolean digit = JavaLangCharacter_isDigitWithChar_(ch);
    if (digit) {
      seenDigit = true;
    }
    else {
      seenNonDigit = true;
    }
    digit = (digit || ch == '.' || ch == ',' || (i == 0 && (ch == '-' || ch == '+')));
    if (!digit) {
      number = false;
    }
  }
  if (!seenDigit) {
    number = false;
  }
  else if (!seenNonDigit) {
    cardinal = true;
  }
  if (cardinal) {
    if (length < 4) {
      return @"CARDINAL13";
    }
    else if (length == 4) {
      return @"CARDINAL4";
    }
    else {
      return @"CARDINAL5PLUS";
    }
  }
  else if (number) {
    return @"NUMBER";
  }
  jboolean seenLower = false;
  jboolean seenUpper = false;
  jboolean allCaps = true;
  jboolean allLower = true;
  jboolean initCap = false;
  jboolean dash = false;
  jboolean period = false;
  for (jint i = 0; i < length; i++) {
    jchar ch = [s charAtWithInt:i];
    jboolean up = JavaLangCharacter_isUpperCaseWithChar_(ch);
    jboolean let = JavaLangCharacter_isLetterWithChar_(ch);
    jboolean tit = JavaLangCharacter_isTitleCaseWithChar_(ch);
    if (ch == '-') {
      dash = true;
    }
    else if (ch == '.') {
      period = true;
    }
    if (tit) {
      seenUpper = true;
      allLower = false;
      seenLower = true;
      allCaps = false;
    }
    else if (up) {
      seenUpper = true;
      allLower = false;
    }
    else if (let) {
      seenLower = true;
      allCaps = false;
    }
    if (i == 0 && (up || tit)) {
      initCap = true;
    }
  }
  if (length == 2 && initCap && period) {
    return @"ACRONYM1";
  }
  else if (seenUpper && allCaps && !seenDigit && period) {
    return @"ACRONYM";
  }
  else if (seenDigit && dash && !seenUpper && !seenLower) {
    return @"DIGIT-DASH";
  }
  else if (initCap && seenLower && seenDigit && dash) {
    return @"CAPITALIZED-DIGIT-DASH";
  }
  else if (initCap && seenLower && seenDigit) {
    return @"CAPITALIZED-DIGIT";
  }
  else if (initCap && seenLower && dash) {
    return @"CAPITALIZED-DASH";
  }
  else if (initCap && seenLower) {
    return @"CAPITALIZED";
  }
  else if (seenUpper && allCaps && seenDigit && dash) {
    return @"ALLCAPS-DIGIT-DASH";
  }
  else if (seenUpper && allCaps && seenDigit) {
    return @"ALLCAPS-DIGIT";
  }
  else if (seenUpper && allCaps && dash) {
    return @"ALLCAPS";
  }
  else if (seenUpper && allCaps) {
    return @"ALLCAPS";
  }
  else if (seenLower && allLower && seenDigit && dash) {
    return @"LOWERCASE-DIGIT-DASH";
  }
  else if (seenLower && allLower && seenDigit) {
    return @"LOWERCASE-DIGIT";
  }
  else if (seenLower && allLower && dash) {
    return @"LOWERCASE-DASH";
  }
  else if (seenLower && allLower) {
    return @"LOWERCASE";
  }
  else if (seenLower && seenDigit) {
    return @"MIXEDCASE-DIGIT";
  }
  else if (seenLower) {
    return @"MIXEDCASE";
  }
  else if (seenDigit) {
    return @"SYMBOL-DIGIT";
  }
  else {
    return @"SYMBOL";
  }
}

NSString *EduStanfordNlpProcessWordShapeClassifier_wordShapeDigitsWithNSString_(NSString *s) {
  EduStanfordNlpProcessWordShapeClassifier_initialize();
  IOSCharArray *outChars = nil;
  for (jint i = 0; i < ((jint) [((NSString *) nil_chk(s)) length]); i++) {
    jchar c = [s charAtWithInt:i];
    if (JavaLangCharacter_isDigitWithChar_(c)) {
      if (outChars == nil) {
        outChars = [s toCharArray];
      }
      *IOSCharArray_GetRef(nil_chk(outChars), i) = '9';
    }
  }
  if (outChars == nil) {
    return s;
  }
  else {
    return [NSString stringWithCharacters:outChars];
  }
}

NSString *EduStanfordNlpProcessWordShapeClassifier_wordShapeCluster1WithNSString_(NSString *s) {
  EduStanfordNlpProcessWordShapeClassifier_initialize();
  jboolean digit = true;
  for (jint i = 0; i < ((jint) [((NSString *) nil_chk(s)) length]); i++) {
    jchar c = [s charAtWithInt:i];
    if (!(JavaLangCharacter_isDigitWithChar_(c) || c == '.' || c == ',' || (i == 0 && (c == '-' || c == '+')))) {
      digit = false;
    }
  }
  if (digit) {
    return @"NUMBER";
  }
  else {
    NSString *cluster = [((id<JavaUtilMap>) nil_chk(JreLoadStatic(EduStanfordNlpProcessWordShapeClassifier_DistributionalClusters, cluster1))) getWithId:s];
    if (cluster == nil) {
      cluster = @"NULL";
    }
    return cluster;
  }
}

NSString *EduStanfordNlpProcessWordShapeClassifier_wordShapeChineseWithNSString_(NSString *s) {
  EduStanfordNlpProcessWordShapeClassifier_initialize();
  return EduStanfordNlpTreesInternationalPennchineseChineseUtils_shapeOfWithJavaLangCharSequence_withBoolean_withBoolean_(s, true, true);
}

void EduStanfordNlpProcessWordShapeClassifier_mainWithNSStringArray_(IOSObjectArray *args) {
  EduStanfordNlpProcessWordShapeClassifier_initialize();
  jint i = 0;
  jint classifierToUse = EduStanfordNlpProcessWordShapeClassifier_WORDSHAPECHRIS1;
  if (((IOSObjectArray *) nil_chk(args))->size_ == 0) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"edu.stanford.nlp.process.WordShapeClassifier [-wordShape name] string+"];
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, 0))) charAtWithInt:0] == '-') {
    if ([((NSString *) nil_chk(IOSObjectArray_Get(args, 0))) isEqual:@"-wordShape"] && args->size_ >= 2) {
      classifierToUse = EduStanfordNlpProcessWordShapeClassifier_lookupShaperWithNSString_(IOSObjectArray_Get(args, 1));
      i += 2;
    }
    else {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$", @"Unknown flag: ", IOSObjectArray_Get(args, 0))];
      i++;
    }
  }
  for (; i < args->size_; i++) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printWithNSString:JreStrcat("$$", IOSObjectArray_Get(args, i), @": ")];
    [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:EduStanfordNlpProcessWordShapeClassifier_wordShapeWithNSString_withInt_(IOSObjectArray_Get(args, i), classifierToUse)];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpProcessWordShapeClassifier)

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpProcessWordShapeClassifier_DistributionalClusters)

@implementation EduStanfordNlpProcessWordShapeClassifier_DistributionalClusters

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpProcessWordShapeClassifier_DistributionalClusters_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (id<JavaUtilMap>)loadWordClustersWithNSString:(NSString *)file
                                   withNSString:(NSString *)format {
  return EduStanfordNlpProcessWordShapeClassifier_DistributionalClusters_loadWordClustersWithNSString_withNSString_(file, format);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x9, 0, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(loadWordClustersWithNSString:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "cluster1", "LJavaUtilMap;", .constantValue.asLong = 0, 0x9, -1, 3, 4, -1 },
  };
  static const void *ptrTable[] = { "loadWordClusters", "LNSString;LNSString;", "(Ljava/lang/String;Ljava/lang/String;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", &EduStanfordNlpProcessWordShapeClassifier_DistributionalClusters_cluster1, "Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", "LEduStanfordNlpProcessWordShapeClassifier;", "LEduStanfordNlpProcessWordShapeClassifier_DistributionalClusters_LcMap;" };
  static const J2ObjcClassInfo _EduStanfordNlpProcessWordShapeClassifier_DistributionalClusters = { "DistributionalClusters", "edu.stanford.nlp.process", ptrTable, methods, fields, 7, 0xa, 2, 1, 5, 6, -1, -1, -1 };
  return &_EduStanfordNlpProcessWordShapeClassifier_DistributionalClusters;
}

+ (void)initialize {
  if (self == [EduStanfordNlpProcessWordShapeClassifier_DistributionalClusters class]) {
    EduStanfordNlpProcessWordShapeClassifier_DistributionalClusters_cluster1 = EduStanfordNlpProcessWordShapeClassifier_DistributionalClusters_loadWordClustersWithNSString_withNSString_(@"/u/nlp/data/pos_tags_are_useless/egw.bnc.200", @"alexClark");
    J2OBJC_SET_INITIALIZED(EduStanfordNlpProcessWordShapeClassifier_DistributionalClusters)
  }
}

@end

void EduStanfordNlpProcessWordShapeClassifier_DistributionalClusters_init(EduStanfordNlpProcessWordShapeClassifier_DistributionalClusters *self) {
  NSObject_init(self);
}

EduStanfordNlpProcessWordShapeClassifier_DistributionalClusters *new_EduStanfordNlpProcessWordShapeClassifier_DistributionalClusters_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpProcessWordShapeClassifier_DistributionalClusters, init)
}

EduStanfordNlpProcessWordShapeClassifier_DistributionalClusters *create_EduStanfordNlpProcessWordShapeClassifier_DistributionalClusters_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpProcessWordShapeClassifier_DistributionalClusters, init)
}

id<JavaUtilMap> EduStanfordNlpProcessWordShapeClassifier_DistributionalClusters_loadWordClustersWithNSString_withNSString_(NSString *file, NSString *format) {
  EduStanfordNlpProcessWordShapeClassifier_DistributionalClusters_initialize();
  EduStanfordNlpUtilTiming_startDoingWithNSString_(JreStrcat("$$", @"Loading distsim lexicon from ", file));
  id<JavaUtilMap> lexicon = new_EduStanfordNlpProcessWordShapeClassifier_DistributionalClusters_LcMap_init();
  if ([@"terryKoo" isEqual:format]) {
    for (NSString * __strong line in nil_chk(EduStanfordNlpObjectbankObjectBank_getLineIteratorWithNSString_(file))) {
      IOSObjectArray *bits = [((NSString *) nil_chk(line)) split:@"\\t"];
      NSString *word = IOSObjectArray_Get(nil_chk(bits), 1);
      word = [((NSString *) nil_chk(word)) lowercaseString];
      NSString *wordClass = IOSObjectArray_Get(bits, 0);
      (void) [lexicon putWithId:word withId:wordClass];
    }
  }
  else {
    for (NSString * __strong line in nil_chk(EduStanfordNlpObjectbankObjectBank_getLineIteratorWithNSString_(file))) {
      IOSObjectArray *bits = [((NSString *) nil_chk(line)) split:@"\\s+"];
      NSString *word = IOSObjectArray_Get(nil_chk(bits), 0);
      word = [((NSString *) nil_chk(word)) lowercaseString];
      (void) [lexicon putWithId:word withId:IOSObjectArray_Get(bits, 1)];
    }
  }
  EduStanfordNlpUtilTiming_endDoing();
  return lexicon;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpProcessWordShapeClassifier_DistributionalClusters)

@implementation EduStanfordNlpProcessWordShapeClassifier_DistributionalClusters_LcMap

- (id)getWithId:(id)key {
  return [super getWithId:[((NSString *) nil_chk([nil_chk(key) description])) lowercaseString]];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpProcessWordShapeClassifier_DistributionalClusters_LcMap_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(getWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpProcessWordShapeClassifier_DistributionalClusters_LcMap_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "get", "LNSObject;", "(Ljava/lang/Object;)TV;", "LEduStanfordNlpProcessWordShapeClassifier_DistributionalClusters;", "<K:Ljava/lang/Object;V:Ljava/lang/Object;>Ljava/util/HashMap<TK;TV;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpProcessWordShapeClassifier_DistributionalClusters_LcMap = { "LcMap", "edu.stanford.nlp.process", ptrTable, methods, fields, 7, 0xa, 2, 1, 3, -1, -1, 4, -1 };
  return &_EduStanfordNlpProcessWordShapeClassifier_DistributionalClusters_LcMap;
}

@end

void EduStanfordNlpProcessWordShapeClassifier_DistributionalClusters_LcMap_init(EduStanfordNlpProcessWordShapeClassifier_DistributionalClusters_LcMap *self) {
  JavaUtilHashMap_init(self);
}

EduStanfordNlpProcessWordShapeClassifier_DistributionalClusters_LcMap *new_EduStanfordNlpProcessWordShapeClassifier_DistributionalClusters_LcMap_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpProcessWordShapeClassifier_DistributionalClusters_LcMap, init)
}

EduStanfordNlpProcessWordShapeClassifier_DistributionalClusters_LcMap *create_EduStanfordNlpProcessWordShapeClassifier_DistributionalClusters_LcMap_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpProcessWordShapeClassifier_DistributionalClusters_LcMap, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpProcessWordShapeClassifier_DistributionalClusters_LcMap)
