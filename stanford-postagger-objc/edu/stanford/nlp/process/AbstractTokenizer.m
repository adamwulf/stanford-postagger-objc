//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/process/AbstractTokenizer.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/process/AbstractTokenizer.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/NoSuchElementException.h"
#include "java/util/function/Consumer.h"

#pragma clang diagnostic ignored "-Wprotocol"

@implementation EduStanfordNlpProcessAbstractTokenizer

- (id)getNext {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id)next {
  if (nextToken_ == nil) {
    nextToken_ = [self getNext];
  }
  id result = nextToken_;
  nextToken_ = nil;
  if (result == nil) {
    @throw new_JavaUtilNoSuchElementException_init();
  }
  return result;
}

- (jboolean)hasNext {
  if (nextToken_ == nil) {
    nextToken_ = [self getNext];
  }
  return nextToken_ != nil;
}

- (void)remove {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id)peek {
  if (nextToken_ == nil) {
    nextToken_ = [self getNext];
  }
  if (nextToken_ == nil) {
    @throw new_JavaUtilNoSuchElementException_init();
  }
  return nextToken_;
}

- (id<JavaUtilList>)tokenize {
  id<JavaUtilList> result = new_JavaUtilArrayList_init();
  while ([self hasNext]) {
    [result addWithId:[self next]];
  }
  return result;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpProcessAbstractTokenizer_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaUtilIterator_forEachRemainingWithJavaUtilFunctionConsumer_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x404, -1, -1, -1, 0, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(getNext);
  methods[1].selector = @selector(next);
  methods[2].selector = @selector(hasNext);
  methods[3].selector = @selector(remove);
  methods[4].selector = @selector(peek);
  methods[5].selector = @selector(tokenize);
  methods[6].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "nextToken_", "LNSObject;", .constantValue.asLong = 0, 0x4, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "()TT;", "()Ljava/util/List<TT;>;", "TT;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Ledu/stanford/nlp/process/Tokenizer<TT;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpProcessAbstractTokenizer = { "AbstractTokenizer", "edu.stanford.nlp.process", ptrTable, methods, fields, 7, 0x401, 7, 1, -1, -1, -1, 3, -1 };
  return &_EduStanfordNlpProcessAbstractTokenizer;
}

@end

void EduStanfordNlpProcessAbstractTokenizer_init(EduStanfordNlpProcessAbstractTokenizer *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpProcessAbstractTokenizer)
