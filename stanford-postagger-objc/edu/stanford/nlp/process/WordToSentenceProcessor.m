//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/process/WordToSentenceProcessor.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/ling/CoreAnnotations.h"
#include "edu/stanford/nlp/ling/Document.h"
#include "edu/stanford/nlp/ling/HasWord.h"
#include "edu/stanford/nlp/ling/MultiTokenTag.h"
#include "edu/stanford/nlp/ling/tokensregex/SequenceMatcher.h"
#include "edu/stanford/nlp/ling/tokensregex/SequencePattern.h"
#include "edu/stanford/nlp/process/PTBLexer.h"
#include "edu/stanford/nlp/process/WhitespaceLexer.h"
#include "edu/stanford/nlp/process/WordToSentenceProcessor.h"
#include "edu/stanford/nlp/util/CoreMap.h"
#include "edu/stanford/nlp/util/Generics.h"
#include "java/lang/Boolean.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/RuntimeException.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collections.h"
#include "java/util/IdentityHashMap.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"

@interface EduStanfordNlpProcessWordToSentenceProcessor () {
 @public
  JavaUtilRegexPattern *sentenceBoundaryTokenPattern_;
  EduStanfordNlpLingTokensregexSequencePattern *sentenceBoundaryMultiTokenPattern_;
  id<JavaUtilSet> sentenceBoundaryFollowers_;
  id<JavaUtilSet> sentenceBoundaryToDiscard_;
  id<JavaUtilList> xmlBreakElementsToDiscard_;
  id<JavaUtilList> tokenPatternsToDiscard_;
  JavaUtilRegexPattern *sentenceRegionBeginPattern_;
  JavaUtilRegexPattern *sentenceRegionEndPattern_;
  EduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak *newlineIsSentenceBreak_;
  jboolean isOneSentence_;
  jboolean allowEmptySentences_;
}

- (jboolean)isForcedEndTokenWithId:(id)o;

- (NSString *)getStringWithId:(id)o;

+ (jboolean)matchesWithJavaUtilList:(id<JavaUtilList>)patterns
                       withNSString:(NSString *)word;

- (jboolean)matchesXmlBreakElementToDiscardWithNSString:(NSString *)word;

- (jboolean)matchesTokenPatternsToDiscardWithNSString:(NSString *)word;

- (instancetype)initWithNSString:(NSString *)boundaryTokenRegex
withEduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak:(EduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak *)newlineIsSentenceBreak
                     withBoolean:(jboolean)isOneSentence;

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpProcessWordToSentenceProcessor, sentenceBoundaryTokenPattern_, JavaUtilRegexPattern *)
J2OBJC_FIELD_SETTER(EduStanfordNlpProcessWordToSentenceProcessor, sentenceBoundaryMultiTokenPattern_, EduStanfordNlpLingTokensregexSequencePattern *)
J2OBJC_FIELD_SETTER(EduStanfordNlpProcessWordToSentenceProcessor, sentenceBoundaryFollowers_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(EduStanfordNlpProcessWordToSentenceProcessor, sentenceBoundaryToDiscard_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(EduStanfordNlpProcessWordToSentenceProcessor, xmlBreakElementsToDiscard_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(EduStanfordNlpProcessWordToSentenceProcessor, tokenPatternsToDiscard_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(EduStanfordNlpProcessWordToSentenceProcessor, sentenceRegionBeginPattern_, JavaUtilRegexPattern *)
J2OBJC_FIELD_SETTER(EduStanfordNlpProcessWordToSentenceProcessor, sentenceRegionEndPattern_, JavaUtilRegexPattern *)
J2OBJC_FIELD_SETTER(EduStanfordNlpProcessWordToSentenceProcessor, newlineIsSentenceBreak_, EduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak *)

inline jboolean EduStanfordNlpProcessWordToSentenceProcessor_get_DEBUG();
#define EduStanfordNlpProcessWordToSentenceProcessor_DEBUG false
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpProcessWordToSentenceProcessor, DEBUG, jboolean)

__attribute__((unused)) static jboolean EduStanfordNlpProcessWordToSentenceProcessor_isForcedEndTokenWithId_(EduStanfordNlpProcessWordToSentenceProcessor *self, id o);

__attribute__((unused)) static NSString *EduStanfordNlpProcessWordToSentenceProcessor_getStringWithId_(EduStanfordNlpProcessWordToSentenceProcessor *self, id o);

__attribute__((unused)) static jboolean EduStanfordNlpProcessWordToSentenceProcessor_matchesWithJavaUtilList_withNSString_(id<JavaUtilList> patterns, NSString *word);

__attribute__((unused)) static jboolean EduStanfordNlpProcessWordToSentenceProcessor_matchesXmlBreakElementToDiscardWithNSString_(EduStanfordNlpProcessWordToSentenceProcessor *self, NSString *word);

__attribute__((unused)) static jboolean EduStanfordNlpProcessWordToSentenceProcessor_matchesTokenPatternsToDiscardWithNSString_(EduStanfordNlpProcessWordToSentenceProcessor *self, NSString *word);

__attribute__((unused)) static void EduStanfordNlpProcessWordToSentenceProcessor_initWithNSString_withEduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak_withBoolean_(EduStanfordNlpProcessWordToSentenceProcessor *self, NSString *boundaryTokenRegex, EduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak *newlineIsSentenceBreak, jboolean isOneSentence);

__attribute__((unused)) static EduStanfordNlpProcessWordToSentenceProcessor *new_EduStanfordNlpProcessWordToSentenceProcessor_initWithNSString_withEduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak_withBoolean_(NSString *boundaryTokenRegex, EduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak *newlineIsSentenceBreak, jboolean isOneSentence) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpProcessWordToSentenceProcessor *create_EduStanfordNlpProcessWordToSentenceProcessor_initWithNSString_withEduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak_withBoolean_(NSString *boundaryTokenRegex, EduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak *newlineIsSentenceBreak, jboolean isOneSentence);

__attribute__((unused)) static void EduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak_initWithNSString_withInt_(EduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static EduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak *new_EduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpProcessWordToSentenceProcessor)

NSString *EduStanfordNlpProcessWordToSentenceProcessor_DEFAULT_BOUNDARY_REGEX = @"\\.|[!?]+";
id<JavaUtilSet> EduStanfordNlpProcessWordToSentenceProcessor_DEFAULT_BOUNDARY_FOLLOWERS;
id<JavaUtilSet> EduStanfordNlpProcessWordToSentenceProcessor_DEFAULT_SENTENCE_BOUNDARIES_TO_DISCARD;

@implementation EduStanfordNlpProcessWordToSentenceProcessor

+ (EduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak *)stringToNewlineIsSentenceBreakWithNSString:(NSString *)name {
  return EduStanfordNlpProcessWordToSentenceProcessor_stringToNewlineIsSentenceBreakWithNSString_(name);
}

- (jboolean)isForcedEndTokenWithId:(id)o {
  return EduStanfordNlpProcessWordToSentenceProcessor_isForcedEndTokenWithId_(self, o);
}

- (NSString *)getStringWithId:(id)o {
  return EduStanfordNlpProcessWordToSentenceProcessor_getStringWithId_(self, o);
}

+ (jboolean)matchesWithJavaUtilList:(id<JavaUtilList>)patterns
                       withNSString:(NSString *)word {
  return EduStanfordNlpProcessWordToSentenceProcessor_matchesWithJavaUtilList_withNSString_(patterns, word);
}

- (jboolean)matchesXmlBreakElementToDiscardWithNSString:(NSString *)word {
  return EduStanfordNlpProcessWordToSentenceProcessor_matchesXmlBreakElementToDiscardWithNSString_(self, word);
}

- (jboolean)matchesTokenPatternsToDiscardWithNSString:(NSString *)word {
  return EduStanfordNlpProcessWordToSentenceProcessor_matchesTokenPatternsToDiscardWithNSString_(self, word);
}

- (id<JavaUtilList>)processWithJavaUtilList:(id<JavaUtilList>)words {
  if (isOneSentence_) {
    id<JavaUtilList> sentences = EduStanfordNlpUtilGenerics_newArrayList();
    [((id<JavaUtilList>) nil_chk(sentences)) addWithId:new_JavaUtilArrayList_initWithJavaUtilCollection_(words)];
    return sentences;
  }
  else {
    return [self wordsToSentencesWithJavaUtilList:words];
  }
}

- (id<JavaUtilList>)wordsToSentencesWithJavaUtilList:(id<JavaUtilList>)words {
  JavaUtilIdentityHashMap *isSentenceBoundary = nil;
  if (sentenceBoundaryMultiTokenPattern_ != nil) {
    isSentenceBoundary = new_JavaUtilIdentityHashMap_init();
    EduStanfordNlpLingTokensregexSequenceMatcher *matcher = [sentenceBoundaryMultiTokenPattern_ getMatcherWithJavaUtilList:words];
    while ([((EduStanfordNlpLingTokensregexSequenceMatcher *) nil_chk(matcher)) find]) {
      id<JavaUtilList> nodes = [matcher groupNodes];
      if (nodes != nil && [nodes size] > 0) {
        (void) [isSentenceBoundary putWithId:[nodes getWithInt:[nodes size] - 1] withId:JavaLangBoolean_valueOfWithBoolean_(true)];
      }
    }
  }
  id<JavaUtilList> sentences = EduStanfordNlpUtilGenerics_newArrayList();
  id<JavaUtilList> currentSentence = new_JavaUtilArrayList_init();
  id<JavaUtilList> lastSentence = nil;
  jboolean insideRegion = false;
  jboolean inWaitForForcedEnd = false;
  jboolean lastTokenWasNewline = false;
  for (id __strong o in nil_chk(words)) {
    NSString *word = EduStanfordNlpProcessWordToSentenceProcessor_getStringWithId_(self, o);
    jboolean forcedEnd = EduStanfordNlpProcessWordToSentenceProcessor_isForcedEndTokenWithId_(self, o);
    jboolean inMultiTokenExpr = false;
    jboolean discardToken = false;
    if ([EduStanfordNlpUtilCoreMap_class_() isInstance:o]) {
      id<EduStanfordNlpUtilCoreMap> cm = (id<EduStanfordNlpUtilCoreMap>) cast_check(o, EduStanfordNlpUtilCoreMap_class_());
      JavaLangBoolean *forcedUntilEndValue = [((id<EduStanfordNlpUtilCoreMap>) nil_chk(cm)) getWithIOSClass:EduStanfordNlpLingCoreAnnotations_ForcedSentenceUntilEndAnnotation_class_()];
      if (!forcedEnd) {
        if (forcedUntilEndValue != nil && [forcedUntilEndValue booleanValue]) inWaitForForcedEnd = true;
        else {
          EduStanfordNlpLingMultiTokenTag *mt = [cm getWithIOSClass:EduStanfordNlpLingCoreAnnotations_MentionTokenAnnotation_class_()];
          if (mt != nil && ![mt isEnd]) {
            inMultiTokenExpr = true;
          }
        }
      }
    }
    if (tokenPatternsToDiscard_ != nil) {
      discardToken = EduStanfordNlpProcessWordToSentenceProcessor_matchesTokenPatternsToDiscardWithNSString_(self, word);
    }
    if (sentenceRegionBeginPattern_ != nil && !insideRegion) {
      if ([((JavaUtilRegexMatcher *) nil_chk([sentenceRegionBeginPattern_ matcherWithJavaLangCharSequence:word])) matches]) {
        insideRegion = true;
      }
      lastTokenWasNewline = false;
      continue;
    }
    if (lastSentence != nil && [currentSentence isEmpty] && [((id<JavaUtilSet>) nil_chk(sentenceBoundaryFollowers_)) containsWithId:word]) {
      if (!discardToken) [lastSentence addWithId:o];
      lastTokenWasNewline = false;
      continue;
    }
    jboolean newSent = false;
    NSString *debugText = (discardToken) ? @"discarded" : @"added to current";
    if (inWaitForForcedEnd && !forcedEnd) {
      if (!discardToken) [currentSentence addWithId:o];
    }
    else if (inMultiTokenExpr && !forcedEnd) {
      if (!discardToken) [currentSentence addWithId:o];
    }
    else if ([((id<JavaUtilSet>) nil_chk(sentenceBoundaryToDiscard_)) containsWithId:word]) {
      if (newlineIsSentenceBreak_ == JreLoadEnum(EduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak, ALWAYS)) {
        newSent = true;
      }
      else if (newlineIsSentenceBreak_ == JreLoadEnum(EduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak, TWO_CONSECUTIVE)) {
        if (lastTokenWasNewline) {
          newSent = true;
        }
      }
      lastTokenWasNewline = true;
    }
    else {
      lastTokenWasNewline = false;
      JavaLangBoolean *isb;
      if (xmlBreakElementsToDiscard_ != nil && EduStanfordNlpProcessWordToSentenceProcessor_matchesXmlBreakElementToDiscardWithNSString_(self, word)) {
        newSent = true;
      }
      else if (sentenceRegionEndPattern_ != nil && [((JavaUtilRegexMatcher *) nil_chk([sentenceRegionEndPattern_ matcherWithJavaLangCharSequence:word])) matches]) {
        insideRegion = false;
        newSent = true;
      }
      else if ((isSentenceBoundary != nil) && ((isb = [((JavaUtilIdentityHashMap *) nil_chk(isSentenceBoundary)) getWithId:o]) != nil) && [((JavaLangBoolean *) nil_chk(isb)) booleanValue]) {
        if (!discardToken) [currentSentence addWithId:o];
        newSent = true;
      }
      else if ([((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(sentenceBoundaryTokenPattern_)) matcherWithJavaLangCharSequence:word])) matches]) {
        if (!discardToken) [currentSentence addWithId:o];
        newSent = true;
      }
      else if (forcedEnd) {
        if (!discardToken) [currentSentence addWithId:o];
        inWaitForForcedEnd = false;
        newSent = true;
      }
      else {
        if (!discardToken) [currentSentence addWithId:o];
      }
    }
    if (newSent && (![currentSentence isEmpty] || allowEmptySentences_)) {
      [((id<JavaUtilList>) nil_chk(sentences)) addWithId:currentSentence];
      lastSentence = currentSentence;
      currentSentence = new_JavaUtilArrayList_init();
    }
  }
  if (![currentSentence isEmpty]) {
    [((id<JavaUtilList>) nil_chk(sentences)) addWithId:currentSentence];
  }
  return sentences;
}

- (id<EduStanfordNlpLingDocument>)processDocumentWithEduStanfordNlpLingDocument:(id<EduStanfordNlpLingDocument>)inArg {
  id<EduStanfordNlpLingDocument> doc = [((id<EduStanfordNlpLingDocument>) nil_chk(inArg)) blankDocument];
  [((id<EduStanfordNlpLingDocument>) nil_chk(doc)) addAllWithJavaUtilCollection:[self processWithJavaUtilList:inArg]];
  return doc;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpProcessWordToSentenceProcessor_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithEduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak:(EduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak *)newlineIsSentenceBreak {
  EduStanfordNlpProcessWordToSentenceProcessor_initWithEduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak_(self, newlineIsSentenceBreak);
  return self;
}

- (instancetype)initWithBoolean:(jboolean)isOneSentence {
  EduStanfordNlpProcessWordToSentenceProcessor_initWithBoolean_(self, isOneSentence);
  return self;
}

- (instancetype)initWithNSString:(NSString *)boundaryTokenRegex
withEduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak:(EduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak *)newlineIsSentenceBreak
                     withBoolean:(jboolean)isOneSentence {
  EduStanfordNlpProcessWordToSentenceProcessor_initWithNSString_withEduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak_withBoolean_(self, boundaryTokenRegex, newlineIsSentenceBreak, isOneSentence);
  return self;
}

- (instancetype)initWithNSString:(NSString *)boundaryTokenRegex
                 withJavaUtilSet:(id<JavaUtilSet>)boundaryToDiscard
                 withJavaUtilSet:(id<JavaUtilSet>)xmlBreakElementsToDiscard
withEduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak:(EduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak *)newlineIsSentenceBreak {
  EduStanfordNlpProcessWordToSentenceProcessor_initWithNSString_withJavaUtilSet_withJavaUtilSet_withEduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak_(self, boundaryTokenRegex, boundaryToDiscard, xmlBreakElementsToDiscard, newlineIsSentenceBreak);
  return self;
}

- (instancetype)initWithNSString:(NSString *)boundaryTokenRegex
                 withJavaUtilSet:(id<JavaUtilSet>)boundaryToDiscard
                 withJavaUtilSet:(id<JavaUtilSet>)xmlBreakElementsToDiscard
withEduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak:(EduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak *)newlineIsSentenceBreak
withEduStanfordNlpLingTokensregexSequencePattern:(EduStanfordNlpLingTokensregexSequencePattern *)sentenceBoundaryMultiTokenPattern
                 withJavaUtilSet:(id<JavaUtilSet>)tokenRegexesToDiscard {
  EduStanfordNlpProcessWordToSentenceProcessor_initWithNSString_withJavaUtilSet_withJavaUtilSet_withEduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak_withEduStanfordNlpLingTokensregexSequencePattern_withJavaUtilSet_(self, boundaryTokenRegex, boundaryToDiscard, xmlBreakElementsToDiscard, newlineIsSentenceBreak, sentenceBoundaryMultiTokenPattern, tokenRegexesToDiscard);
  return self;
}

- (instancetype)initWithJavaUtilSet:(id<JavaUtilSet>)boundaryToDiscard {
  EduStanfordNlpProcessWordToSentenceProcessor_initWithJavaUtilSet_(self, boundaryToDiscard);
  return self;
}

- (instancetype)initWithNSString:(NSString *)boundaryTokenRegex
                 withJavaUtilSet:(id<JavaUtilSet>)boundaryFollowers
                 withJavaUtilSet:(id<JavaUtilSet>)boundariesToDiscard
                 withJavaUtilSet:(id<JavaUtilSet>)xmlBreakElementsToDiscard
                    withNSString:(NSString *)regionElementRegex
withEduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak:(EduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak *)newlineIsSentenceBreak
withEduStanfordNlpLingTokensregexSequencePattern:(EduStanfordNlpLingTokensregexSequencePattern *)sentenceBoundaryMultiTokenPattern
                 withJavaUtilSet:(id<JavaUtilSet>)tokenRegexesToDiscard
                     withBoolean:(jboolean)isOneSentence
                     withBoolean:(jboolean)allowEmptySentences {
  EduStanfordNlpProcessWordToSentenceProcessor_initWithNSString_withJavaUtilSet_withJavaUtilSet_withJavaUtilSet_withNSString_withEduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak_withEduStanfordNlpLingTokensregexSequencePattern_withJavaUtilSet_withBoolean_withBoolean_(self, boundaryTokenRegex, boundaryFollowers, boundariesToDiscard, xmlBreakElementsToDiscard, regionElementRegex, newlineIsSentenceBreak, sentenceBoundaryMultiTokenPattern, tokenRegexesToDiscard, isOneSentence, allowEmptySentences);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LEduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 2, 3, -1, 4, -1, -1 },
    { NULL, "LNSString;", 0x2, 5, 3, -1, 6, -1, -1 },
    { NULL, "Z", 0xa, 7, 8, -1, 9, -1, -1 },
    { NULL, "Z", 0x2, 10, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 11, 1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 12, 13, -1, 14, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 15, 13, -1, 14, -1, -1 },
    { NULL, "LEduStanfordNlpLingDocument;", 0x1, 16, 17, -1, 18, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 19, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 20, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 21, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 22, -1, 23, -1, -1 },
    { NULL, NULL, 0x1, -1, 24, -1, 25, -1, -1 },
    { NULL, NULL, 0x1, -1, 26, -1, 27, -1, -1 },
    { NULL, NULL, 0x1, -1, 28, -1, 29, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(stringToNewlineIsSentenceBreakWithNSString:);
  methods[1].selector = @selector(isForcedEndTokenWithId:);
  methods[2].selector = @selector(getStringWithId:);
  methods[3].selector = @selector(matchesWithJavaUtilList:withNSString:);
  methods[4].selector = @selector(matchesXmlBreakElementToDiscardWithNSString:);
  methods[5].selector = @selector(matchesTokenPatternsToDiscardWithNSString:);
  methods[6].selector = @selector(processWithJavaUtilList:);
  methods[7].selector = @selector(wordsToSentencesWithJavaUtilList:);
  methods[8].selector = @selector(processDocumentWithEduStanfordNlpLingDocument:);
  methods[9].selector = @selector(init);
  methods[10].selector = @selector(initWithEduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak:);
  methods[11].selector = @selector(initWithBoolean:);
  methods[12].selector = @selector(initWithNSString:withEduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak:withBoolean:);
  methods[13].selector = @selector(initWithNSString:withJavaUtilSet:withJavaUtilSet:withEduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak:);
  methods[14].selector = @selector(initWithNSString:withJavaUtilSet:withJavaUtilSet:withEduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak:withEduStanfordNlpLingTokensregexSequencePattern:withJavaUtilSet:);
  methods[15].selector = @selector(initWithJavaUtilSet:);
  methods[16].selector = @selector(initWithNSString:withJavaUtilSet:withJavaUtilSet:withJavaUtilSet:withNSString:withEduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak:withEduStanfordNlpLingTokensregexSequencePattern:withJavaUtilSet:withBoolean:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_BOUNDARY_REGEX", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 30, -1, -1 },
    { "DEFAULT_BOUNDARY_FOLLOWERS", "LJavaUtilSet;", .constantValue.asLong = 0, 0x19, -1, 31, 32, -1 },
    { "DEFAULT_SENTENCE_BOUNDARIES_TO_DISCARD", "LJavaUtilSet;", .constantValue.asLong = 0, 0x19, -1, 33, 32, -1 },
    { "DEBUG", "Z", .constantValue.asBOOL = EduStanfordNlpProcessWordToSentenceProcessor_DEBUG, 0x1a, -1, -1, -1, -1 },
    { "sentenceBoundaryTokenPattern_", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "sentenceBoundaryMultiTokenPattern_", "LEduStanfordNlpLingTokensregexSequencePattern;", .constantValue.asLong = 0, 0x12, -1, -1, 34, -1 },
    { "sentenceBoundaryFollowers_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 32, -1 },
    { "sentenceBoundaryToDiscard_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 32, -1 },
    { "xmlBreakElementsToDiscard_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 35, -1 },
    { "tokenPatternsToDiscard_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 35, -1 },
    { "sentenceRegionBeginPattern_", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "sentenceRegionEndPattern_", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "newlineIsSentenceBreak_", "LEduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "isOneSentence_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "allowEmptySentences_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "stringToNewlineIsSentenceBreak", "LNSString;", "isForcedEndToken", "LNSObject;", "(TIN;)Z", "getString", "(TIN;)Ljava/lang/String;", "matches", "LJavaUtilList;LNSString;", "(Ljava/util/List<Ljava/util/regex/Pattern;>;Ljava/lang/String;)Z", "matchesXmlBreakElementToDiscard", "matchesTokenPatternsToDiscard", "process", "LJavaUtilList;", "(Ljava/util/List<+TIN;>;)Ljava/util/List<Ljava/util/List<TIN;>;>;", "wordsToSentences", "processDocument", "LEduStanfordNlpLingDocument;", "<L:Ljava/lang/Object;F:Ljava/lang/Object;>(Ledu/stanford/nlp/ling/Document<TL;TF;TIN;>;)Ledu/stanford/nlp/ling/Document<TL;TF;Ljava/util/List<TIN;>;>;", "LEduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak;", "Z", "LNSString;LEduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak;Z", "LNSString;LJavaUtilSet;LJavaUtilSet;LEduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak;", "(Ljava/lang/String;Ljava/util/Set<Ljava/lang/String;>;Ljava/util/Set<Ljava/lang/String;>;Ledu/stanford/nlp/process/WordToSentenceProcessor$NewlineIsSentenceBreak;)V", "LNSString;LJavaUtilSet;LJavaUtilSet;LEduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak;LEduStanfordNlpLingTokensregexSequencePattern;LJavaUtilSet;", "(Ljava/lang/String;Ljava/util/Set<Ljava/lang/String;>;Ljava/util/Set<Ljava/lang/String;>;Ledu/stanford/nlp/process/WordToSentenceProcessor$NewlineIsSentenceBreak;Ledu/stanford/nlp/ling/tokensregex/SequencePattern<-TIN;>;Ljava/util/Set<Ljava/lang/String;>;)V", "LJavaUtilSet;", "(Ljava/util/Set<Ljava/lang/String;>;)V", "LNSString;LJavaUtilSet;LJavaUtilSet;LJavaUtilSet;LNSString;LEduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak;LEduStanfordNlpLingTokensregexSequencePattern;LJavaUtilSet;ZZ", "(Ljava/lang/String;Ljava/util/Set<Ljava/lang/String;>;Ljava/util/Set<Ljava/lang/String;>;Ljava/util/Set<Ljava/lang/String;>;Ljava/lang/String;Ledu/stanford/nlp/process/WordToSentenceProcessor$NewlineIsSentenceBreak;Ledu/stanford/nlp/ling/tokensregex/SequencePattern<-TIN;>;Ljava/util/Set<Ljava/lang/String;>;ZZ)V", &EduStanfordNlpProcessWordToSentenceProcessor_DEFAULT_BOUNDARY_REGEX, &EduStanfordNlpProcessWordToSentenceProcessor_DEFAULT_BOUNDARY_FOLLOWERS, "Ljava/util/Set<Ljava/lang/String;>;", &EduStanfordNlpProcessWordToSentenceProcessor_DEFAULT_SENTENCE_BOUNDARIES_TO_DISCARD, "Ledu/stanford/nlp/ling/tokensregex/SequencePattern<-TIN;>;", "Ljava/util/List<Ljava/util/regex/Pattern;>;", "<IN:Ljava/lang/Object;>Ljava/lang/Object;Ledu/stanford/nlp/process/ListProcessor<TIN;Ljava/util/List<TIN;>;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpProcessWordToSentenceProcessor = { "WordToSentenceProcessor", "edu.stanford.nlp.process", ptrTable, methods, fields, 7, 0x1, 17, 15, -1, 19, -1, 36, -1 };
  return &_EduStanfordNlpProcessWordToSentenceProcessor;
}

+ (void)initialize {
  if (self == [EduStanfordNlpProcessWordToSentenceProcessor class]) {
    EduStanfordNlpProcessWordToSentenceProcessor_DEFAULT_BOUNDARY_FOLLOWERS = JavaUtilCollections_unmodifiableSetWithJavaUtilSet_(EduStanfordNlpUtilGenerics_newHashSetWithJavaUtilCollection_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ @")", @"]", @"}", @"\"", @"'", @"''", @"\u2019", @"\u201d", @"-RRB-", @"-RSB-", @"-RCB-", @")", @"]", @"}" } count:14 type:NSString_class_()])));
    EduStanfordNlpProcessWordToSentenceProcessor_DEFAULT_SENTENCE_BOUNDARIES_TO_DISCARD = JavaUtilCollections_unmodifiableSetWithJavaUtilSet_(EduStanfordNlpUtilGenerics_newHashSetWithJavaUtilCollection_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ EduStanfordNlpProcessWhitespaceLexer_NEWLINE, EduStanfordNlpProcessPTBLexer_NEWLINE_TOKEN } count:2 type:NSString_class_()])));
    J2OBJC_SET_INITIALIZED(EduStanfordNlpProcessWordToSentenceProcessor)
  }
}

@end

EduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak *EduStanfordNlpProcessWordToSentenceProcessor_stringToNewlineIsSentenceBreakWithNSString_(NSString *name) {
  EduStanfordNlpProcessWordToSentenceProcessor_initialize();
  if ([@"always" isEqual:name]) {
    return JreLoadEnum(EduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak, ALWAYS);
  }
  else if ([@"never" isEqual:name]) {
    return JreLoadEnum(EduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak, NEVER);
  }
  else if (name != nil && [name contains:@"two"]) {
    return JreLoadEnum(EduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak, TWO_CONSECUTIVE);
  }
  else {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$", @"Not a valid NewlineIsSentenceBreak name: '", name, @"' (should be one of 'always', 'never', 'two')"));
  }
}

jboolean EduStanfordNlpProcessWordToSentenceProcessor_isForcedEndTokenWithId_(EduStanfordNlpProcessWordToSentenceProcessor *self, id o) {
  if ([EduStanfordNlpUtilCoreMap_class_() isInstance:o]) {
    JavaLangBoolean *forcedEndValue = [((id<EduStanfordNlpUtilCoreMap>) nil_chk(((id<EduStanfordNlpUtilCoreMap>) cast_check(o, EduStanfordNlpUtilCoreMap_class_())))) getWithIOSClass:EduStanfordNlpLingCoreAnnotations_ForcedSentenceEndAnnotation_class_()];
    return forcedEndValue != nil && [forcedEndValue booleanValue];
  }
  else {
    return false;
  }
}

NSString *EduStanfordNlpProcessWordToSentenceProcessor_getStringWithId_(EduStanfordNlpProcessWordToSentenceProcessor *self, id o) {
  if ([EduStanfordNlpLingHasWord_class_() isInstance:o]) {
    id<EduStanfordNlpLingHasWord> h = (id<EduStanfordNlpLingHasWord>) cast_check(o, EduStanfordNlpLingHasWord_class_());
    return [((id<EduStanfordNlpLingHasWord>) nil_chk(h)) word];
  }
  else if ([o isKindOfClass:[NSString class]]) {
    return (NSString *) cast_chk(o, [NSString class]);
  }
  else if ([EduStanfordNlpUtilCoreMap_class_() isInstance:o]) {
    return [((id<EduStanfordNlpUtilCoreMap>) nil_chk(((id<EduStanfordNlpUtilCoreMap>) cast_check(o, EduStanfordNlpUtilCoreMap_class_())))) getWithIOSClass:EduStanfordNlpLingCoreAnnotations_TextAnnotation_class_()];
  }
  else {
    @throw new_JavaLangRuntimeException_initWithNSString_(@"Expected token to be either Word or String.");
  }
}

jboolean EduStanfordNlpProcessWordToSentenceProcessor_matchesWithJavaUtilList_withNSString_(id<JavaUtilList> patterns, NSString *word) {
  EduStanfordNlpProcessWordToSentenceProcessor_initialize();
  for (JavaUtilRegexPattern * __strong p in nil_chk(patterns)) {
    JavaUtilRegexMatcher *m = [((JavaUtilRegexPattern *) nil_chk(p)) matcherWithJavaLangCharSequence:word];
    if ([((JavaUtilRegexMatcher *) nil_chk(m)) matches]) {
      return true;
    }
  }
  return false;
}

jboolean EduStanfordNlpProcessWordToSentenceProcessor_matchesXmlBreakElementToDiscardWithNSString_(EduStanfordNlpProcessWordToSentenceProcessor *self, NSString *word) {
  return EduStanfordNlpProcessWordToSentenceProcessor_matchesWithJavaUtilList_withNSString_(self->xmlBreakElementsToDiscard_, word);
}

jboolean EduStanfordNlpProcessWordToSentenceProcessor_matchesTokenPatternsToDiscardWithNSString_(EduStanfordNlpProcessWordToSentenceProcessor *self, NSString *word) {
  return EduStanfordNlpProcessWordToSentenceProcessor_matchesWithJavaUtilList_withNSString_(self->tokenPatternsToDiscard_, word);
}

void EduStanfordNlpProcessWordToSentenceProcessor_init(EduStanfordNlpProcessWordToSentenceProcessor *self) {
  EduStanfordNlpProcessWordToSentenceProcessor_initWithBoolean_(self, false);
}

EduStanfordNlpProcessWordToSentenceProcessor *new_EduStanfordNlpProcessWordToSentenceProcessor_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpProcessWordToSentenceProcessor, init)
}

EduStanfordNlpProcessWordToSentenceProcessor *create_EduStanfordNlpProcessWordToSentenceProcessor_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpProcessWordToSentenceProcessor, init)
}

void EduStanfordNlpProcessWordToSentenceProcessor_initWithEduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak_(EduStanfordNlpProcessWordToSentenceProcessor *self, EduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak *newlineIsSentenceBreak) {
  EduStanfordNlpProcessWordToSentenceProcessor_initWithNSString_withEduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak_withBoolean_(self, EduStanfordNlpProcessWordToSentenceProcessor_DEFAULT_BOUNDARY_REGEX, newlineIsSentenceBreak, false);
}

EduStanfordNlpProcessWordToSentenceProcessor *new_EduStanfordNlpProcessWordToSentenceProcessor_initWithEduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak_(EduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak *newlineIsSentenceBreak) {
  J2OBJC_NEW_IMPL(EduStanfordNlpProcessWordToSentenceProcessor, initWithEduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak_, newlineIsSentenceBreak)
}

EduStanfordNlpProcessWordToSentenceProcessor *create_EduStanfordNlpProcessWordToSentenceProcessor_initWithEduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak_(EduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak *newlineIsSentenceBreak) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpProcessWordToSentenceProcessor, initWithEduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak_, newlineIsSentenceBreak)
}

void EduStanfordNlpProcessWordToSentenceProcessor_initWithBoolean_(EduStanfordNlpProcessWordToSentenceProcessor *self, jboolean isOneSentence) {
  EduStanfordNlpProcessWordToSentenceProcessor_initWithNSString_withEduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak_withBoolean_(self, EduStanfordNlpProcessWordToSentenceProcessor_DEFAULT_BOUNDARY_REGEX, JreLoadEnum(EduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak, TWO_CONSECUTIVE), isOneSentence);
}

EduStanfordNlpProcessWordToSentenceProcessor *new_EduStanfordNlpProcessWordToSentenceProcessor_initWithBoolean_(jboolean isOneSentence) {
  J2OBJC_NEW_IMPL(EduStanfordNlpProcessWordToSentenceProcessor, initWithBoolean_, isOneSentence)
}

EduStanfordNlpProcessWordToSentenceProcessor *create_EduStanfordNlpProcessWordToSentenceProcessor_initWithBoolean_(jboolean isOneSentence) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpProcessWordToSentenceProcessor, initWithBoolean_, isOneSentence)
}

void EduStanfordNlpProcessWordToSentenceProcessor_initWithNSString_withEduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak_withBoolean_(EduStanfordNlpProcessWordToSentenceProcessor *self, NSString *boundaryTokenRegex, EduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak *newlineIsSentenceBreak, jboolean isOneSentence) {
  EduStanfordNlpProcessWordToSentenceProcessor_initWithNSString_withJavaUtilSet_withJavaUtilSet_withJavaUtilSet_withNSString_withEduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak_withEduStanfordNlpLingTokensregexSequencePattern_withJavaUtilSet_withBoolean_withBoolean_(self, boundaryTokenRegex, EduStanfordNlpProcessWordToSentenceProcessor_DEFAULT_BOUNDARY_FOLLOWERS, EduStanfordNlpProcessWordToSentenceProcessor_DEFAULT_SENTENCE_BOUNDARIES_TO_DISCARD, nil, nil, newlineIsSentenceBreak, nil, nil, isOneSentence, false);
}

EduStanfordNlpProcessWordToSentenceProcessor *new_EduStanfordNlpProcessWordToSentenceProcessor_initWithNSString_withEduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak_withBoolean_(NSString *boundaryTokenRegex, EduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak *newlineIsSentenceBreak, jboolean isOneSentence) {
  J2OBJC_NEW_IMPL(EduStanfordNlpProcessWordToSentenceProcessor, initWithNSString_withEduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak_withBoolean_, boundaryTokenRegex, newlineIsSentenceBreak, isOneSentence)
}

EduStanfordNlpProcessWordToSentenceProcessor *create_EduStanfordNlpProcessWordToSentenceProcessor_initWithNSString_withEduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak_withBoolean_(NSString *boundaryTokenRegex, EduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak *newlineIsSentenceBreak, jboolean isOneSentence) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpProcessWordToSentenceProcessor, initWithNSString_withEduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak_withBoolean_, boundaryTokenRegex, newlineIsSentenceBreak, isOneSentence)
}

void EduStanfordNlpProcessWordToSentenceProcessor_initWithNSString_withJavaUtilSet_withJavaUtilSet_withEduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak_(EduStanfordNlpProcessWordToSentenceProcessor *self, NSString *boundaryTokenRegex, id<JavaUtilSet> boundaryToDiscard, id<JavaUtilSet> xmlBreakElementsToDiscard, EduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak *newlineIsSentenceBreak) {
  EduStanfordNlpProcessWordToSentenceProcessor_initWithNSString_withJavaUtilSet_withJavaUtilSet_withJavaUtilSet_withNSString_withEduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak_withEduStanfordNlpLingTokensregexSequencePattern_withJavaUtilSet_withBoolean_withBoolean_(self, boundaryTokenRegex == nil ? EduStanfordNlpProcessWordToSentenceProcessor_DEFAULT_BOUNDARY_REGEX : boundaryTokenRegex, EduStanfordNlpProcessWordToSentenceProcessor_DEFAULT_BOUNDARY_FOLLOWERS, boundaryToDiscard == nil || [boundaryToDiscard isEmpty] ? EduStanfordNlpProcessWordToSentenceProcessor_DEFAULT_SENTENCE_BOUNDARIES_TO_DISCARD : boundaryToDiscard, xmlBreakElementsToDiscard == nil ? JavaUtilCollections_emptySet() : xmlBreakElementsToDiscard, nil, newlineIsSentenceBreak, nil, nil, false, false);
}

EduStanfordNlpProcessWordToSentenceProcessor *new_EduStanfordNlpProcessWordToSentenceProcessor_initWithNSString_withJavaUtilSet_withJavaUtilSet_withEduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak_(NSString *boundaryTokenRegex, id<JavaUtilSet> boundaryToDiscard, id<JavaUtilSet> xmlBreakElementsToDiscard, EduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak *newlineIsSentenceBreak) {
  J2OBJC_NEW_IMPL(EduStanfordNlpProcessWordToSentenceProcessor, initWithNSString_withJavaUtilSet_withJavaUtilSet_withEduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak_, boundaryTokenRegex, boundaryToDiscard, xmlBreakElementsToDiscard, newlineIsSentenceBreak)
}

EduStanfordNlpProcessWordToSentenceProcessor *create_EduStanfordNlpProcessWordToSentenceProcessor_initWithNSString_withJavaUtilSet_withJavaUtilSet_withEduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak_(NSString *boundaryTokenRegex, id<JavaUtilSet> boundaryToDiscard, id<JavaUtilSet> xmlBreakElementsToDiscard, EduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak *newlineIsSentenceBreak) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpProcessWordToSentenceProcessor, initWithNSString_withJavaUtilSet_withJavaUtilSet_withEduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak_, boundaryTokenRegex, boundaryToDiscard, xmlBreakElementsToDiscard, newlineIsSentenceBreak)
}

void EduStanfordNlpProcessWordToSentenceProcessor_initWithNSString_withJavaUtilSet_withJavaUtilSet_withEduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak_withEduStanfordNlpLingTokensregexSequencePattern_withJavaUtilSet_(EduStanfordNlpProcessWordToSentenceProcessor *self, NSString *boundaryTokenRegex, id<JavaUtilSet> boundaryToDiscard, id<JavaUtilSet> xmlBreakElementsToDiscard, EduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak *newlineIsSentenceBreak, EduStanfordNlpLingTokensregexSequencePattern *sentenceBoundaryMultiTokenPattern, id<JavaUtilSet> tokenRegexesToDiscard) {
  EduStanfordNlpProcessWordToSentenceProcessor_initWithNSString_withJavaUtilSet_withJavaUtilSet_withJavaUtilSet_withNSString_withEduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak_withEduStanfordNlpLingTokensregexSequencePattern_withJavaUtilSet_withBoolean_withBoolean_(self, boundaryTokenRegex == nil ? EduStanfordNlpProcessWordToSentenceProcessor_DEFAULT_BOUNDARY_REGEX : boundaryTokenRegex, EduStanfordNlpProcessWordToSentenceProcessor_DEFAULT_BOUNDARY_FOLLOWERS, boundaryToDiscard == nil || [boundaryToDiscard isEmpty] ? EduStanfordNlpProcessWordToSentenceProcessor_DEFAULT_SENTENCE_BOUNDARIES_TO_DISCARD : boundaryToDiscard, xmlBreakElementsToDiscard == nil ? JavaUtilCollections_emptySet() : xmlBreakElementsToDiscard, nil, newlineIsSentenceBreak, sentenceBoundaryMultiTokenPattern, tokenRegexesToDiscard, false, false);
}

EduStanfordNlpProcessWordToSentenceProcessor *new_EduStanfordNlpProcessWordToSentenceProcessor_initWithNSString_withJavaUtilSet_withJavaUtilSet_withEduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak_withEduStanfordNlpLingTokensregexSequencePattern_withJavaUtilSet_(NSString *boundaryTokenRegex, id<JavaUtilSet> boundaryToDiscard, id<JavaUtilSet> xmlBreakElementsToDiscard, EduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak *newlineIsSentenceBreak, EduStanfordNlpLingTokensregexSequencePattern *sentenceBoundaryMultiTokenPattern, id<JavaUtilSet> tokenRegexesToDiscard) {
  J2OBJC_NEW_IMPL(EduStanfordNlpProcessWordToSentenceProcessor, initWithNSString_withJavaUtilSet_withJavaUtilSet_withEduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak_withEduStanfordNlpLingTokensregexSequencePattern_withJavaUtilSet_, boundaryTokenRegex, boundaryToDiscard, xmlBreakElementsToDiscard, newlineIsSentenceBreak, sentenceBoundaryMultiTokenPattern, tokenRegexesToDiscard)
}

EduStanfordNlpProcessWordToSentenceProcessor *create_EduStanfordNlpProcessWordToSentenceProcessor_initWithNSString_withJavaUtilSet_withJavaUtilSet_withEduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak_withEduStanfordNlpLingTokensregexSequencePattern_withJavaUtilSet_(NSString *boundaryTokenRegex, id<JavaUtilSet> boundaryToDiscard, id<JavaUtilSet> xmlBreakElementsToDiscard, EduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak *newlineIsSentenceBreak, EduStanfordNlpLingTokensregexSequencePattern *sentenceBoundaryMultiTokenPattern, id<JavaUtilSet> tokenRegexesToDiscard) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpProcessWordToSentenceProcessor, initWithNSString_withJavaUtilSet_withJavaUtilSet_withEduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak_withEduStanfordNlpLingTokensregexSequencePattern_withJavaUtilSet_, boundaryTokenRegex, boundaryToDiscard, xmlBreakElementsToDiscard, newlineIsSentenceBreak, sentenceBoundaryMultiTokenPattern, tokenRegexesToDiscard)
}

void EduStanfordNlpProcessWordToSentenceProcessor_initWithJavaUtilSet_(EduStanfordNlpProcessWordToSentenceProcessor *self, id<JavaUtilSet> boundaryToDiscard) {
  EduStanfordNlpProcessWordToSentenceProcessor_initWithNSString_withJavaUtilSet_withJavaUtilSet_withJavaUtilSet_withNSString_withEduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak_withEduStanfordNlpLingTokensregexSequencePattern_withJavaUtilSet_withBoolean_withBoolean_(self, @"", JavaUtilCollections_emptySet(), boundaryToDiscard, nil, nil, JreLoadEnum(EduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak, ALWAYS), nil, nil, false, true);
}

EduStanfordNlpProcessWordToSentenceProcessor *new_EduStanfordNlpProcessWordToSentenceProcessor_initWithJavaUtilSet_(id<JavaUtilSet> boundaryToDiscard) {
  J2OBJC_NEW_IMPL(EduStanfordNlpProcessWordToSentenceProcessor, initWithJavaUtilSet_, boundaryToDiscard)
}

EduStanfordNlpProcessWordToSentenceProcessor *create_EduStanfordNlpProcessWordToSentenceProcessor_initWithJavaUtilSet_(id<JavaUtilSet> boundaryToDiscard) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpProcessWordToSentenceProcessor, initWithJavaUtilSet_, boundaryToDiscard)
}

void EduStanfordNlpProcessWordToSentenceProcessor_initWithNSString_withJavaUtilSet_withJavaUtilSet_withJavaUtilSet_withNSString_withEduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak_withEduStanfordNlpLingTokensregexSequencePattern_withJavaUtilSet_withBoolean_withBoolean_(EduStanfordNlpProcessWordToSentenceProcessor *self, NSString *boundaryTokenRegex, id<JavaUtilSet> boundaryFollowers, id<JavaUtilSet> boundariesToDiscard, id<JavaUtilSet> xmlBreakElementsToDiscard, NSString *regionElementRegex, EduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak *newlineIsSentenceBreak, EduStanfordNlpLingTokensregexSequencePattern *sentenceBoundaryMultiTokenPattern, id<JavaUtilSet> tokenRegexesToDiscard, jboolean isOneSentence, jboolean allowEmptySentences) {
  NSObject_init(self);
  self->sentenceBoundaryTokenPattern_ = JavaUtilRegexPattern_compileWithNSString_(boundaryTokenRegex);
  self->sentenceBoundaryFollowers_ = JavaUtilCollections_unmodifiableSetWithJavaUtilSet_(boundaryFollowers);
  self->sentenceBoundaryToDiscard_ = JavaUtilCollections_unmodifiableSetWithJavaUtilSet_(boundariesToDiscard);
  if (xmlBreakElementsToDiscard == nil || [xmlBreakElementsToDiscard isEmpty]) {
    self->xmlBreakElementsToDiscard_ = nil;
  }
  else {
    self->xmlBreakElementsToDiscard_ = new_JavaUtilArrayList_initWithInt_([xmlBreakElementsToDiscard size]);
    for (NSString * __strong s in xmlBreakElementsToDiscard) {
      NSString *regex = JreStrcat("$$$", @"<\\s*(?:/\\s*)?(?:", s, @")(?:\\s+[^>]+?|\\s*(?:/\\s*)?)>");
      [self->xmlBreakElementsToDiscard_ addWithId:JavaUtilRegexPattern_compileWithNSString_withInt_(regex, JavaUtilRegexPattern_CASE_INSENSITIVE)];
    }
  }
  if (regionElementRegex != nil) {
    self->sentenceRegionBeginPattern_ = JavaUtilRegexPattern_compileWithNSString_(JreStrcat("$$$", @"<\\s*(?:", regionElementRegex, @")(?:\\s+[^>]+?)?>"));
    self->sentenceRegionEndPattern_ = JavaUtilRegexPattern_compileWithNSString_(JreStrcat("$$$", @"<\\s*/\\s*(?:", regionElementRegex, @")\\s*>"));
  }
  else {
    self->sentenceRegionBeginPattern_ = nil;
    self->sentenceRegionEndPattern_ = nil;
  }
  self->newlineIsSentenceBreak_ = newlineIsSentenceBreak;
  self->isOneSentence_ = isOneSentence;
  self->allowEmptySentences_ = allowEmptySentences;
  if (sentenceBoundaryMultiTokenPattern != nil) {
    self->sentenceBoundaryMultiTokenPattern_ = sentenceBoundaryMultiTokenPattern;
  }
  else {
    self->sentenceBoundaryMultiTokenPattern_ = nil;
  }
  if (tokenRegexesToDiscard != nil) {
    self->tokenPatternsToDiscard_ = new_JavaUtilArrayList_initWithInt_([tokenRegexesToDiscard size]);
    for (NSString * __strong s in tokenRegexesToDiscard) {
      [self->tokenPatternsToDiscard_ addWithId:JavaUtilRegexPattern_compileWithNSString_(s)];
    }
  }
  else {
    self->tokenPatternsToDiscard_ = nil;
  }
}

EduStanfordNlpProcessWordToSentenceProcessor *new_EduStanfordNlpProcessWordToSentenceProcessor_initWithNSString_withJavaUtilSet_withJavaUtilSet_withJavaUtilSet_withNSString_withEduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak_withEduStanfordNlpLingTokensregexSequencePattern_withJavaUtilSet_withBoolean_withBoolean_(NSString *boundaryTokenRegex, id<JavaUtilSet> boundaryFollowers, id<JavaUtilSet> boundariesToDiscard, id<JavaUtilSet> xmlBreakElementsToDiscard, NSString *regionElementRegex, EduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak *newlineIsSentenceBreak, EduStanfordNlpLingTokensregexSequencePattern *sentenceBoundaryMultiTokenPattern, id<JavaUtilSet> tokenRegexesToDiscard, jboolean isOneSentence, jboolean allowEmptySentences) {
  J2OBJC_NEW_IMPL(EduStanfordNlpProcessWordToSentenceProcessor, initWithNSString_withJavaUtilSet_withJavaUtilSet_withJavaUtilSet_withNSString_withEduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak_withEduStanfordNlpLingTokensregexSequencePattern_withJavaUtilSet_withBoolean_withBoolean_, boundaryTokenRegex, boundaryFollowers, boundariesToDiscard, xmlBreakElementsToDiscard, regionElementRegex, newlineIsSentenceBreak, sentenceBoundaryMultiTokenPattern, tokenRegexesToDiscard, isOneSentence, allowEmptySentences)
}

EduStanfordNlpProcessWordToSentenceProcessor *create_EduStanfordNlpProcessWordToSentenceProcessor_initWithNSString_withJavaUtilSet_withJavaUtilSet_withJavaUtilSet_withNSString_withEduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak_withEduStanfordNlpLingTokensregexSequencePattern_withJavaUtilSet_withBoolean_withBoolean_(NSString *boundaryTokenRegex, id<JavaUtilSet> boundaryFollowers, id<JavaUtilSet> boundariesToDiscard, id<JavaUtilSet> xmlBreakElementsToDiscard, NSString *regionElementRegex, EduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak *newlineIsSentenceBreak, EduStanfordNlpLingTokensregexSequencePattern *sentenceBoundaryMultiTokenPattern, id<JavaUtilSet> tokenRegexesToDiscard, jboolean isOneSentence, jboolean allowEmptySentences) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpProcessWordToSentenceProcessor, initWithNSString_withJavaUtilSet_withJavaUtilSet_withJavaUtilSet_withNSString_withEduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak_withEduStanfordNlpLingTokensregexSequencePattern_withJavaUtilSet_withBoolean_withBoolean_, boundaryTokenRegex, boundaryFollowers, boundariesToDiscard, xmlBreakElementsToDiscard, regionElementRegex, newlineIsSentenceBreak, sentenceBoundaryMultiTokenPattern, tokenRegexesToDiscard, isOneSentence, allowEmptySentences)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpProcessWordToSentenceProcessor)

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak)

EduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak *EduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak_values_[3];

@implementation EduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak

+ (IOSObjectArray *)values {
  return EduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak_values();
}

+ (EduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak *)valueOfWithNSString:(NSString *)name {
  return EduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak_valueOfWithNSString_(name);
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LEduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "NEVER", "LEduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "ALWAYS", "LEduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "TWO_CONSECUTIVE", "LEduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(EduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak, NEVER), &JreEnum(EduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak, ALWAYS), &JreEnum(EduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak, TWO_CONSECUTIVE), "LEduStanfordNlpProcessWordToSentenceProcessor;", "Ljava/lang/Enum<Ledu/stanford/nlp/process/WordToSentenceProcessor$NewlineIsSentenceBreak;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak = { "NewlineIsSentenceBreak", "edu.stanford.nlp.process", ptrTable, methods, fields, 7, 0x4019, 2, 3, 5, -1, -1, 6, -1 };
  return &_EduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak;
}

+ (void)initialize {
  if (self == [EduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak class]) {
    JreEnum(EduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak, NEVER) = new_EduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak_initWithNSString_withInt_(@"NEVER", 0);
    JreEnum(EduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak, ALWAYS) = new_EduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak_initWithNSString_withInt_(@"ALWAYS", 1);
    JreEnum(EduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak, TWO_CONSECUTIVE) = new_EduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak_initWithNSString_withInt_(@"TWO_CONSECUTIVE", 2);
    J2OBJC_SET_INITIALIZED(EduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak)
  }
}

@end

void EduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak_initWithNSString_withInt_(EduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

EduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak *new_EduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  J2OBJC_NEW_IMPL(EduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak, initWithNSString_withInt_, __name, __ordinal)
}

IOSObjectArray *EduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak_values() {
  EduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak_initialize();
  return [IOSObjectArray arrayWithObjects:EduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak_values_ count:3 type:EduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak_class_()];
}

EduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak *EduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak_valueOfWithNSString_(NSString *name) {
  EduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak_initialize();
  for (int i = 0; i < 3; i++) {
    EduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak *e = EduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

EduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak *EduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak_fromOrdinal(NSUInteger ordinal) {
  EduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak_initialize();
  if (ordinal >= 3) {
    return nil;
  }
  return EduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpProcessWordToSentenceProcessor_NewlineIsSentenceBreak)
