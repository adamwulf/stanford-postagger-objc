//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/process/TransformXML.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/io/IOUtils.h"
#include "edu/stanford/nlp/process/TransformXML.h"
#include "edu/stanford/nlp/util/XMLUtils.h"
#include "java/io/BufferedInputStream.h"
#include "java/io/BufferedOutputStream.h"
#include "java/io/File.h"
#include "java/io/FileInputStream.h"
#include "java/io/FileOutputStream.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/io/OutputStreamWriter.h"
#include "java/io/PrintStream.h"
#include "java/io/PrintWriter.h"
#include "java/io/Reader.h"
#include "java/io/Writer.h"
#include "java/lang/Exception.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"
#include "java/util/function/Function.h"
#include "javax/xml/parsers/SAXParser.h"
#include "javax/xml/parsers/SAXParserFactory.h"
#include "org/xml/sax/Attributes.h"
#include "org/xml/sax/InputSource.h"
#include "org/xml/sax/helpers/DefaultHandler.h"

@interface EduStanfordNlpProcessTransformXML () {
 @public
  JavaxXmlParsersSAXParser *saxParser_;
}

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpProcessTransformXML, saxParser_, JavaxXmlParsersSAXParser *)

@interface EduStanfordNlpProcessTransformXML_SAXInterface ()

- (void)outputTextAndTagWithNSString:(NSString *)qName
             withOrgXmlSaxAttributes:(id<OrgXmlSaxAttributes>)attributes
                         withBoolean:(jboolean)close;

@end

__attribute__((unused)) static void EduStanfordNlpProcessTransformXML_SAXInterface_outputTextAndTagWithNSString_withOrgXmlSaxAttributes_withBoolean_(EduStanfordNlpProcessTransformXML_SAXInterface *self, NSString *qName, id<OrgXmlSaxAttributes> attributes, jboolean close);

@implementation EduStanfordNlpProcessTransformXML

- (EduStanfordNlpProcessTransformXML_SAXInterface *)buildSaxInterface {
  return new_EduStanfordNlpProcessTransformXML_SAXInterface_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpProcessTransformXML_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)transformXMLWithNSStringArray:(IOSObjectArray *)tags
         withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)fn
                       withJavaIoFile:(JavaIoFile *)inArg {
  JavaIoInputStream *ins = nil;
  @try {
    ins = new_JavaIoBufferedInputStream_initWithJavaIoInputStream_(new_JavaIoFileInputStream_initWithJavaIoFile_(inArg));
    [self transformXMLWithNSStringArray:tags withJavaUtilFunctionFunction:fn withJavaIoInputStream:ins withJavaIoOutputStream:JreLoadStatic(JavaLangSystem, out)];
  }
  @catch (JavaLangException *e) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$@$@", @"Error reading file ", inArg, @": ", e)];
    [((JavaLangException *) nil_chk(e)) printStackTrace];
  }
  @finally {
    EduStanfordNlpIoIOUtils_closeIgnoringExceptionsWithJavaIoCloseable_(ins);
  }
}

- (void)transformXMLWithNSStringArray:(IOSObjectArray *)tags
         withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)fn
                       withJavaIoFile:(JavaIoFile *)inArg
                       withJavaIoFile:(JavaIoFile *)outArg {
  JavaIoInputStream *ins = nil;
  JavaIoOutputStream *outs = nil;
  @try {
    ins = new_JavaIoBufferedInputStream_initWithJavaIoInputStream_(new_JavaIoFileInputStream_initWithJavaIoFile_(inArg));
    outs = new_JavaIoBufferedOutputStream_initWithJavaIoOutputStream_(new_JavaIoFileOutputStream_initWithJavaIoFile_(outArg));
    [self transformXMLWithNSStringArray:tags withJavaUtilFunctionFunction:fn withJavaIoInputStream:ins withJavaIoOutputStream:outs];
  }
  @catch (JavaLangException *e) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$@$@$@", @"Error reading file ", inArg, @" or writing file ", outArg, @": ", e)];
    [((JavaLangException *) nil_chk(e)) printStackTrace];
  }
  @finally {
    EduStanfordNlpIoIOUtils_closeIgnoringExceptionsWithJavaIoCloseable_(ins);
    EduStanfordNlpIoIOUtils_closeIgnoringExceptionsWithJavaIoCloseable_(outs);
  }
}

- (void)transformXMLWithNSStringArray:(IOSObjectArray *)tags
         withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)fn
                withJavaIoInputStream:(JavaIoInputStream *)inArg {
  [self transformXMLWithNSStringArray:tags withJavaUtilFunctionFunction:fn withJavaIoInputStream:inArg withJavaIoOutputStream:JreLoadStatic(JavaLangSystem, out)];
}

- (void)transformXMLWithNSStringArray:(IOSObjectArray *)tags
         withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)fn
                withJavaIoInputStream:(JavaIoInputStream *)inArg
               withJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  [self transformXMLWithNSStringArray:tags withJavaUtilFunctionFunction:fn withJavaIoInputStream:inArg withJavaIoWriter:new_JavaIoOutputStreamWriter_initWithJavaIoOutputStream_(outArg) withEduStanfordNlpProcessTransformXML_SAXInterface:[self buildSaxInterface]];
}

- (void)transformXMLWithNSStringArray:(IOSObjectArray *)tags
         withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)fn
                withJavaIoInputStream:(JavaIoInputStream *)inArg
                     withJavaIoWriter:(JavaIoWriter *)w {
  [self transformXMLWithNSStringArray:tags withJavaUtilFunctionFunction:fn withJavaIoInputStream:inArg withJavaIoWriter:w withEduStanfordNlpProcessTransformXML_SAXInterface:[self buildSaxInterface]];
}

- (void)transformXMLWithNSStringArray:(IOSObjectArray *)tags
         withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)fn
                withJavaIoInputStream:(JavaIoInputStream *)inArg
                     withJavaIoWriter:(JavaIoWriter *)w
withEduStanfordNlpProcessTransformXML_SAXInterface:(EduStanfordNlpProcessTransformXML_SAXInterface *)handler {
  [self transformXMLWithNSStringArray:tags withJavaUtilFunctionFunction:fn withOrgXmlSaxInputSource:new_OrgXmlSaxInputSource_initWithJavaIoInputStream_(inArg) withJavaIoWriter:w withEduStanfordNlpProcessTransformXML_SAXInterface:handler];
}

- (void)transformXMLWithNSStringArray:(IOSObjectArray *)tags
         withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)fn
                     withJavaIoReader:(JavaIoReader *)inArg
                     withJavaIoWriter:(JavaIoWriter *)w
withEduStanfordNlpProcessTransformXML_SAXInterface:(EduStanfordNlpProcessTransformXML_SAXInterface *)handler {
  [self transformXMLWithNSStringArray:tags withJavaUtilFunctionFunction:fn withOrgXmlSaxInputSource:new_OrgXmlSaxInputSource_initWithJavaIoReader_(inArg) withJavaIoWriter:w withEduStanfordNlpProcessTransformXML_SAXInterface:handler];
}

- (void)transformXMLWithNSStringArray:(IOSObjectArray *)tags
         withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)fn
             withOrgXmlSaxInputSource:(OrgXmlSaxInputSource *)inArg
                     withJavaIoWriter:(JavaIoWriter *)w
withEduStanfordNlpProcessTransformXML_SAXInterface:(EduStanfordNlpProcessTransformXML_SAXInterface *)saxInterface {
  ((EduStanfordNlpProcessTransformXML_SAXInterface *) nil_chk(saxInterface))->outWriter_ = new_JavaIoPrintWriter_initWithJavaIoWriter_withBoolean_(w, true);
  saxInterface->function_ = fn;
  saxInterface->elementsToBeTransformed_ = new_JavaUtilArrayList_init();
  [saxInterface->elementsToBeTransformed_ addAllWithJavaUtilCollection:JavaUtilArrays_asListWithNSObjectArray_(tags)];
  @try {
    [((JavaxXmlParsersSAXParser *) nil_chk(saxParser_)) parseWithOrgXmlSaxInputSource:inArg withOrgXmlSaxHelpersDefaultHandler:saxInterface];
  }
  @catch (JavaLangException *e) {
    @throw new_JavaLangRuntimeException_initWithNSException_(e);
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LEduStanfordNlpProcessTransformXML_SAXInterface;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, 3, -1, -1 },
    { NULL, "V", 0x1, 1, 4, -1, 5, -1, -1 },
    { NULL, "V", 0x1, 1, 6, -1, 7, -1, -1 },
    { NULL, "V", 0x1, 1, 8, -1, 9, -1, -1 },
    { NULL, "V", 0x1, 1, 10, -1, 11, -1, -1 },
    { NULL, "V", 0x1, 1, 12, -1, 13, -1, -1 },
    { NULL, "V", 0x1, 1, 14, -1, 15, -1, -1 },
    { NULL, "V", 0x1, 1, 16, -1, 17, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(buildSaxInterface);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(transformXMLWithNSStringArray:withJavaUtilFunctionFunction:withJavaIoFile:);
  methods[3].selector = @selector(transformXMLWithNSStringArray:withJavaUtilFunctionFunction:withJavaIoFile:withJavaIoFile:);
  methods[4].selector = @selector(transformXMLWithNSStringArray:withJavaUtilFunctionFunction:withJavaIoInputStream:);
  methods[5].selector = @selector(transformXMLWithNSStringArray:withJavaUtilFunctionFunction:withJavaIoInputStream:withJavaIoOutputStream:);
  methods[6].selector = @selector(transformXMLWithNSStringArray:withJavaUtilFunctionFunction:withJavaIoInputStream:withJavaIoWriter:);
  methods[7].selector = @selector(transformXMLWithNSStringArray:withJavaUtilFunctionFunction:withJavaIoInputStream:withJavaIoWriter:withEduStanfordNlpProcessTransformXML_SAXInterface:);
  methods[8].selector = @selector(transformXMLWithNSStringArray:withJavaUtilFunctionFunction:withJavaIoReader:withJavaIoWriter:withEduStanfordNlpProcessTransformXML_SAXInterface:);
  methods[9].selector = @selector(transformXMLWithNSStringArray:withJavaUtilFunctionFunction:withOrgXmlSaxInputSource:withJavaIoWriter:withEduStanfordNlpProcessTransformXML_SAXInterface:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "saxParser_", "LJavaxXmlParsersSAXParser;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "()Ledu/stanford/nlp/process/TransformXML$SAXInterface<TT;>;", "transformXML", "[LNSString;LJavaUtilFunctionFunction;LJavaIoFile;", "([Ljava/lang/String;Ljava/util/function/Function<Ljava/lang/String;TT;>;Ljava/io/File;)V", "[LNSString;LJavaUtilFunctionFunction;LJavaIoFile;LJavaIoFile;", "([Ljava/lang/String;Ljava/util/function/Function<Ljava/lang/String;TT;>;Ljava/io/File;Ljava/io/File;)V", "[LNSString;LJavaUtilFunctionFunction;LJavaIoInputStream;", "([Ljava/lang/String;Ljava/util/function/Function<Ljava/lang/String;TT;>;Ljava/io/InputStream;)V", "[LNSString;LJavaUtilFunctionFunction;LJavaIoInputStream;LJavaIoOutputStream;", "([Ljava/lang/String;Ljava/util/function/Function<Ljava/lang/String;TT;>;Ljava/io/InputStream;Ljava/io/OutputStream;)V", "[LNSString;LJavaUtilFunctionFunction;LJavaIoInputStream;LJavaIoWriter;", "([Ljava/lang/String;Ljava/util/function/Function<Ljava/lang/String;TT;>;Ljava/io/InputStream;Ljava/io/Writer;)V", "[LNSString;LJavaUtilFunctionFunction;LJavaIoInputStream;LJavaIoWriter;LEduStanfordNlpProcessTransformXML_SAXInterface;", "([Ljava/lang/String;Ljava/util/function/Function<Ljava/lang/String;TT;>;Ljava/io/InputStream;Ljava/io/Writer;Ledu/stanford/nlp/process/TransformXML$SAXInterface<TT;>;)V", "[LNSString;LJavaUtilFunctionFunction;LJavaIoReader;LJavaIoWriter;LEduStanfordNlpProcessTransformXML_SAXInterface;", "([Ljava/lang/String;Ljava/util/function/Function<Ljava/lang/String;TT;>;Ljava/io/Reader;Ljava/io/Writer;Ledu/stanford/nlp/process/TransformXML$SAXInterface<TT;>;)V", "[LNSString;LJavaUtilFunctionFunction;LOrgXmlSaxInputSource;LJavaIoWriter;LEduStanfordNlpProcessTransformXML_SAXInterface;", "([Ljava/lang/String;Ljava/util/function/Function<Ljava/lang/String;TT;>;Lorg/xml/sax/InputSource;Ljava/io/Writer;Ledu/stanford/nlp/process/TransformXML$SAXInterface<TT;>;)V", "LEduStanfordNlpProcessTransformXML_SAXInterface;LEduStanfordNlpProcessTransformXML_NoEscapingSAXInterface;", "<T:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _EduStanfordNlpProcessTransformXML = { "TransformXML", "edu.stanford.nlp.process", ptrTable, methods, fields, 7, 0x1, 10, 1, -1, 18, -1, 19, -1 };
  return &_EduStanfordNlpProcessTransformXML;
}

@end

void EduStanfordNlpProcessTransformXML_init(EduStanfordNlpProcessTransformXML *self) {
  NSObject_init(self);
  @try {
    self->saxParser_ = [((JavaxXmlParsersSAXParserFactory *) nil_chk(JavaxXmlParsersSAXParserFactory_newInstance())) newSAXParser];
  }
  @catch (JavaLangException *e) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$@", @"Error configuring XML parser: ", e)];
    @throw new_JavaLangRuntimeException_initWithNSException_(e);
  }
}

EduStanfordNlpProcessTransformXML *new_EduStanfordNlpProcessTransformXML_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpProcessTransformXML, init)
}

EduStanfordNlpProcessTransformXML *create_EduStanfordNlpProcessTransformXML_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpProcessTransformXML, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpProcessTransformXML)

@implementation EduStanfordNlpProcessTransformXML_SAXInterface

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpProcessTransformXML_SAXInterface_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)outputTextAndTagWithNSString:(NSString *)qName
             withOrgXmlSaxAttributes:(id<OrgXmlSaxAttributes>)attributes
                         withBoolean:(jboolean)close {
  EduStanfordNlpProcessTransformXML_SAXInterface_outputTextAndTagWithNSString_withOrgXmlSaxAttributes_withBoolean_(self, qName, attributes, close);
}

- (void)endDocument {
  [((JavaIoPrintWriter *) nil_chk(outWriter_)) printWithNSString:EduStanfordNlpUtilXMLUtils_escapeXMLWithNSString_([((JavaLangStringBuffer *) nil_chk(textToBeTransformed_)) description])];
  [((JavaIoPrintWriter *) nil_chk(outWriter_)) flush];
}

- (void)startElementWithNSString:(NSString *)uri
                    withNSString:(NSString *)localName
                    withNSString:(NSString *)qName
         withOrgXmlSaxAttributes:(id<OrgXmlSaxAttributes>)attributes {
  if (depth_ == 0) {
    EduStanfordNlpProcessTransformXML_SAXInterface_outputTextAndTagWithNSString_withOrgXmlSaxAttributes_withBoolean_(self, qName, attributes, false);
  }
  if ([((id<JavaUtilList>) nil_chk(elementsToBeTransformed_)) containsWithId:qName]) {
    if (depth_ == 0) {
      openingTag_ = qName;
    }
    ++depth_;
  }
}

- (void)endElementWithNSString:(NSString *)uri
                  withNSString:(NSString *)localName
                  withNSString:(NSString *)qName {
  if (depth_ == 0) {
    EduStanfordNlpProcessTransformXML_SAXInterface_outputTextAndTagWithNSString_withOrgXmlSaxAttributes_withBoolean_(self, qName, nil, true);
  }
  else {
    if ([((id<JavaUtilList>) nil_chk(elementsToBeTransformed_)) containsWithId:qName]) {
      --depth_;
      if (depth_ == 0) {
        NSString *text = [((NSString *) nil_chk([((JavaLangStringBuffer *) nil_chk(textToBeTransformed_)) description])) trim];
        [self processTextWithNSString:text];
        textToBeTransformed_ = new_JavaLangStringBuffer_init();
        [((JavaIoPrintWriter *) nil_chk(outWriter_)) printWithNSString:JreStrcat("$$$", @"</", openingTag_, @">\n")];
      }
    }
  }
}

- (void)processTextWithNSString:(NSString *)text {
  if (((jint) [((NSString *) nil_chk(text)) length]) > 0) {
    text = [nil_chk([((id<JavaUtilFunctionFunction>) nil_chk(function_)) applyWithId:text]) description];
    [((JavaIoPrintWriter *) nil_chk(outWriter_)) printWithNSString:EduStanfordNlpUtilXMLUtils_escapeXMLWithNSString_(text)];
    [((JavaIoPrintWriter *) nil_chk(outWriter_)) printWithChar:0x000a];
  }
}

- (void)charactersWithCharArray:(IOSCharArray *)buf
                        withInt:(jint)offset
                        withInt:(jint)len {
  (void) [((JavaLangStringBuffer *) nil_chk(textToBeTransformed_)) appendWithCharArray:buf withInt:offset withInt:len];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, 4, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(outputTextAndTagWithNSString:withOrgXmlSaxAttributes:withBoolean:);
  methods[2].selector = @selector(endDocument);
  methods[3].selector = @selector(startElementWithNSString:withNSString:withNSString:withOrgXmlSaxAttributes:);
  methods[4].selector = @selector(endElementWithNSString:withNSString:withNSString:);
  methods[5].selector = @selector(processTextWithNSString:);
  methods[6].selector = @selector(charactersWithCharArray:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "elementsToBeTransformed_", "LJavaUtilList;", .constantValue.asLong = 0, 0x4, -1, -1, 11, -1 },
    { "textToBeTransformed_", "LJavaLangStringBuffer;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "outWriter_", "LJavaIoPrintWriter;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "function_", "LJavaUtilFunctionFunction;", .constantValue.asLong = 0, 0x4, -1, -1, 12, -1 },
    { "depth_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "openingTag_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "outputTextAndTag", "LNSString;LOrgXmlSaxAttributes;Z", "startElement", "LNSString;LNSString;LNSString;LOrgXmlSaxAttributes;", "LOrgXmlSaxSAXException;", "endElement", "LNSString;LNSString;LNSString;", "processText", "LNSString;", "characters", "[CII", "Ljava/util/List<Ljava/lang/String;>;", "Ljava/util/function/Function<Ljava/lang/String;TT;>;", "LEduStanfordNlpProcessTransformXML;", "<T:Ljava/lang/Object;>Lorg/xml/sax/helpers/DefaultHandler;" };
  static const J2ObjcClassInfo _EduStanfordNlpProcessTransformXML_SAXInterface = { "SAXInterface", "edu.stanford.nlp.process", ptrTable, methods, fields, 7, 0x9, 7, 6, 13, -1, -1, 14, -1 };
  return &_EduStanfordNlpProcessTransformXML_SAXInterface;
}

@end

void EduStanfordNlpProcessTransformXML_SAXInterface_init(EduStanfordNlpProcessTransformXML_SAXInterface *self) {
  OrgXmlSaxHelpersDefaultHandler_init(self);
  self->outWriter_ = new_JavaIoPrintWriter_initWithJavaIoOutputStream_withBoolean_(JreLoadStatic(JavaLangSystem, out), true);
  self->depth_ = 0;
  self->elementsToBeTransformed_ = new_JavaUtilArrayList_init();
  self->depth_ = 0;
  self->openingTag_ = nil;
  self->textToBeTransformed_ = new_JavaLangStringBuffer_init();
}

EduStanfordNlpProcessTransformXML_SAXInterface *new_EduStanfordNlpProcessTransformXML_SAXInterface_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpProcessTransformXML_SAXInterface, init)
}

EduStanfordNlpProcessTransformXML_SAXInterface *create_EduStanfordNlpProcessTransformXML_SAXInterface_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpProcessTransformXML_SAXInterface, init)
}

void EduStanfordNlpProcessTransformXML_SAXInterface_outputTextAndTagWithNSString_withOrgXmlSaxAttributes_withBoolean_(EduStanfordNlpProcessTransformXML_SAXInterface *self, NSString *qName, id<OrgXmlSaxAttributes> attributes, jboolean close) {
  [((JavaIoPrintWriter *) nil_chk(self->outWriter_)) printWithNSString:EduStanfordNlpUtilXMLUtils_escapeXMLWithNSString_([((JavaLangStringBuffer *) nil_chk(self->textToBeTransformed_)) description])];
  self->textToBeTransformed_ = new_JavaLangStringBuffer_init();
  [((JavaIoPrintWriter *) nil_chk(self->outWriter_)) printWithChar:'<'];
  if (close) {
    [((JavaIoPrintWriter *) nil_chk(self->outWriter_)) printWithChar:'/'];
  }
  [((JavaIoPrintWriter *) nil_chk(self->outWriter_)) printWithNSString:qName];
  if (attributes != nil) {
    for (jint i = 0; i < [attributes getLength]; i++) {
      [((JavaIoPrintWriter *) nil_chk(self->outWriter_)) printWithChar:' '];
      [((JavaIoPrintWriter *) nil_chk(self->outWriter_)) printWithNSString:[attributes getQNameWithInt:i]];
      [((JavaIoPrintWriter *) nil_chk(self->outWriter_)) printWithNSString:@"=\""];
      [((JavaIoPrintWriter *) nil_chk(self->outWriter_)) printWithNSString:EduStanfordNlpUtilXMLUtils_escapeXMLWithNSString_([attributes getValueWithInt:i])];
      [((JavaIoPrintWriter *) nil_chk(self->outWriter_)) printWithChar:'"'];
    }
  }
  [((JavaIoPrintWriter *) nil_chk(self->outWriter_)) printWithNSString:@">\n"];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpProcessTransformXML_SAXInterface)

@implementation EduStanfordNlpProcessTransformXML_NoEscapingSAXInterface

- (void)processTextWithNSString:(NSString *)text {
  if (((jint) [((NSString *) nil_chk(text)) length]) > 0) {
    text = [nil_chk([((id<JavaUtilFunctionFunction>) nil_chk(function_)) applyWithId:text]) description];
    [((JavaIoPrintWriter *) nil_chk(outWriter_)) printWithNSString:text];
    [((JavaIoPrintWriter *) nil_chk(outWriter_)) printWithChar:0x000a];
  }
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpProcessTransformXML_NoEscapingSAXInterface_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(processTextWithNSString:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "processText", "LNSString;", "LEduStanfordNlpProcessTransformXML;", "<T:Ljava/lang/Object;>Ledu/stanford/nlp/process/TransformXML$SAXInterface<TT;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpProcessTransformXML_NoEscapingSAXInterface = { "NoEscapingSAXInterface", "edu.stanford.nlp.process", ptrTable, methods, NULL, 7, 0x9, 2, 0, 2, -1, -1, 3, -1 };
  return &_EduStanfordNlpProcessTransformXML_NoEscapingSAXInterface;
}

@end

void EduStanfordNlpProcessTransformXML_NoEscapingSAXInterface_init(EduStanfordNlpProcessTransformXML_NoEscapingSAXInterface *self) {
  EduStanfordNlpProcessTransformXML_SAXInterface_init(self);
}

EduStanfordNlpProcessTransformXML_NoEscapingSAXInterface *new_EduStanfordNlpProcessTransformXML_NoEscapingSAXInterface_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpProcessTransformXML_NoEscapingSAXInterface, init)
}

EduStanfordNlpProcessTransformXML_NoEscapingSAXInterface *create_EduStanfordNlpProcessTransformXML_NoEscapingSAXInterface_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpProcessTransformXML_NoEscapingSAXInterface, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpProcessTransformXML_NoEscapingSAXInterface)
