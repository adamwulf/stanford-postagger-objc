//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/process/WhitespaceTokenizer.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/ling/HasWord.h"
#include "edu/stanford/nlp/ling/Word.h"
#include "edu/stanford/nlp/process/AbstractTokenizer.h"
#include "edu/stanford/nlp/process/CoreLabelTokenFactory.h"
#include "edu/stanford/nlp/process/LexedTokenFactory.h"
#include "edu/stanford/nlp/process/Tokenizer.h"
#include "edu/stanford/nlp/process/TokenizerFactory.h"
#include "edu/stanford/nlp/process/WhitespaceLexer.h"
#include "edu/stanford/nlp/process/WhitespaceTokenizer.h"
#include "edu/stanford/nlp/process/WordTokenFactory.h"
#include "edu/stanford/nlp/util/PropertiesUtils.h"
#include "edu/stanford/nlp/util/StringUtils.h"
#include "java/io/FileInputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/InputStreamReader.h"
#include "java/io/OutputStreamWriter.h"
#include "java/io/PrintStream.h"
#include "java/io/PrintWriter.h"
#include "java/io/Reader.h"
#include "java/lang/System.h"
#include "java/util/Iterator.h"
#include "java/util/Properties.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface EduStanfordNlpProcessWhitespaceTokenizer () {
 @public
  EduStanfordNlpProcessWhitespaceLexer *lexer_;
  jboolean eolIsSignificant_;
}

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpProcessWhitespaceTokenizer, lexer_, EduStanfordNlpProcessWhitespaceLexer *)

@interface EduStanfordNlpProcessWhitespaceTokenizer_WhitespaceTokenizerFactory () {
 @public
  jboolean tokenizeNLs_;
  id<EduStanfordNlpProcessLexedTokenFactory> factory_;
}

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpProcessWhitespaceTokenizer_WhitespaceTokenizerFactory, factory_, id<EduStanfordNlpProcessLexedTokenFactory>)

@implementation EduStanfordNlpProcessWhitespaceTokenizer

+ (EduStanfordNlpProcessWhitespaceTokenizer_WhitespaceTokenizerFactory *)newCoreLabelTokenizerFactoryWithNSString:(NSString *)options {
  return EduStanfordNlpProcessWhitespaceTokenizer_newCoreLabelTokenizerFactoryWithNSString_(options);
}

+ (EduStanfordNlpProcessWhitespaceTokenizer_WhitespaceTokenizerFactory *)newCoreLabelTokenizerFactory {
  return EduStanfordNlpProcessWhitespaceTokenizer_newCoreLabelTokenizerFactory();
}

- (id<EduStanfordNlpLingHasWord>)getNext {
  id<EduStanfordNlpLingHasWord> token = nil;
  if (lexer_ == nil) {
    return token;
  }
  @try {
    token = (id<EduStanfordNlpLingHasWord>) cast_check([lexer_ next], EduStanfordNlpLingHasWord_class_());
    while (token != nil && [((NSString *) nil_chk([token word])) isEqual:EduStanfordNlpProcessWhitespaceLexer_NEWLINE]) {
      if (eolIsSignificant_) {
        return token;
      }
      else {
        token = (id<EduStanfordNlpLingHasWord>) cast_check([((EduStanfordNlpProcessWhitespaceLexer *) nil_chk(lexer_)) next], EduStanfordNlpLingHasWord_class_());
      }
    }
  }
  @catch (JavaIoIOException *e) {
  }
  return token;
}

- (instancetype)initWithEduStanfordNlpProcessLexedTokenFactory:(id<EduStanfordNlpProcessLexedTokenFactory>)factory
                                              withJavaIoReader:(JavaIoReader *)r
                                                   withBoolean:(jboolean)eolIsSignificant {
  EduStanfordNlpProcessWhitespaceTokenizer_initWithEduStanfordNlpProcessLexedTokenFactory_withJavaIoReader_withBoolean_(self, factory, r, eolIsSignificant);
  return self;
}

+ (EduStanfordNlpProcessWhitespaceTokenizer *)newCoreLabelWhitespaceTokenizerWithJavaIoReader:(JavaIoReader *)r {
  return EduStanfordNlpProcessWhitespaceTokenizer_newCoreLabelWhitespaceTokenizerWithJavaIoReader_(r);
}

+ (EduStanfordNlpProcessWhitespaceTokenizer *)newCoreLabelWhitespaceTokenizerWithJavaIoReader:(JavaIoReader *)r
                                                                                  withBoolean:(jboolean)tokenizeNLs {
  return EduStanfordNlpProcessWhitespaceTokenizer_newCoreLabelWhitespaceTokenizerWithJavaIoReader_withBoolean_(r, tokenizeNLs);
}

+ (EduStanfordNlpProcessWhitespaceTokenizer *)newWordWhitespaceTokenizerWithJavaIoReader:(JavaIoReader *)r {
  return EduStanfordNlpProcessWhitespaceTokenizer_newWordWhitespaceTokenizerWithJavaIoReader_(r);
}

+ (EduStanfordNlpProcessWhitespaceTokenizer *)newWordWhitespaceTokenizerWithJavaIoReader:(JavaIoReader *)r
                                                                             withBoolean:(jboolean)eolIsSignificant {
  return EduStanfordNlpProcessWhitespaceTokenizer_newWordWhitespaceTokenizerWithJavaIoReader_withBoolean_(r, eolIsSignificant);
}

+ (id<EduStanfordNlpProcessTokenizerFactory>)factory {
  return EduStanfordNlpProcessWhitespaceTokenizer_factory();
}

+ (id<EduStanfordNlpProcessTokenizerFactory>)factoryWithBoolean:(jboolean)eolIsSignificant {
  return EduStanfordNlpProcessWhitespaceTokenizer_factoryWithBoolean_(eolIsSignificant);
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  EduStanfordNlpProcessWhitespaceTokenizer_mainWithNSStringArray_(args);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LEduStanfordNlpProcessWhitespaceTokenizer_WhitespaceTokenizerFactory;", 0x9, 0, 1, -1, 2, -1, -1 },
    { NULL, "LEduStanfordNlpProcessWhitespaceTokenizer_WhitespaceTokenizerFactory;", 0x9, -1, -1, -1, 3, -1, -1 },
    { NULL, "LEduStanfordNlpLingHasWord;", 0x4, -1, -1, -1, 4, -1, -1 },
    { NULL, NULL, 0x1, -1, 5, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpProcessWhitespaceTokenizer;", 0x9, 6, 7, -1, 8, -1, -1 },
    { NULL, "LEduStanfordNlpProcessWhitespaceTokenizer;", 0x9, 6, 9, -1, 10, -1, -1 },
    { NULL, "LEduStanfordNlpProcessWhitespaceTokenizer;", 0x9, 11, 7, -1, 12, -1, -1 },
    { NULL, "LEduStanfordNlpProcessWhitespaceTokenizer;", 0x9, 11, 9, -1, 13, -1, -1 },
    { NULL, "LEduStanfordNlpProcessTokenizerFactory;", 0x9, -1, -1, -1, 14, -1, -1 },
    { NULL, "LEduStanfordNlpProcessTokenizerFactory;", 0x9, 15, 16, -1, 17, -1, -1 },
    { NULL, "V", 0x9, 18, 19, 20, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(newCoreLabelTokenizerFactoryWithNSString:);
  methods[1].selector = @selector(newCoreLabelTokenizerFactory);
  methods[2].selector = @selector(getNext);
  methods[3].selector = @selector(initWithEduStanfordNlpProcessLexedTokenFactory:withJavaIoReader:withBoolean:);
  methods[4].selector = @selector(newCoreLabelWhitespaceTokenizerWithJavaIoReader:);
  methods[5].selector = @selector(newCoreLabelWhitespaceTokenizerWithJavaIoReader:withBoolean:);
  methods[6].selector = @selector(newWordWhitespaceTokenizerWithJavaIoReader:);
  methods[7].selector = @selector(newWordWhitespaceTokenizerWithJavaIoReader:withBoolean:);
  methods[8].selector = @selector(factory);
  methods[9].selector = @selector(factoryWithBoolean:);
  methods[10].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "lexer_", "LEduStanfordNlpProcessWhitespaceLexer;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "eolIsSignificant_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "newCoreLabelTokenizerFactory", "LNSString;", "(Ljava/lang/String;)Ledu/stanford/nlp/process/WhitespaceTokenizer$WhitespaceTokenizerFactory<Ledu/stanford/nlp/ling/CoreLabel;>;", "()Ledu/stanford/nlp/process/WhitespaceTokenizer$WhitespaceTokenizerFactory<Ledu/stanford/nlp/ling/CoreLabel;>;", "()TT;", "LEduStanfordNlpProcessLexedTokenFactory;LJavaIoReader;Z", "newCoreLabelWhitespaceTokenizer", "LJavaIoReader;", "(Ljava/io/Reader;)Ledu/stanford/nlp/process/WhitespaceTokenizer<Ledu/stanford/nlp/ling/CoreLabel;>;", "LJavaIoReader;Z", "(Ljava/io/Reader;Z)Ledu/stanford/nlp/process/WhitespaceTokenizer<Ledu/stanford/nlp/ling/CoreLabel;>;", "newWordWhitespaceTokenizer", "(Ljava/io/Reader;)Ledu/stanford/nlp/process/WhitespaceTokenizer<Ledu/stanford/nlp/ling/Word;>;", "(Ljava/io/Reader;Z)Ledu/stanford/nlp/process/WhitespaceTokenizer<Ledu/stanford/nlp/ling/Word;>;", "()Ledu/stanford/nlp/process/TokenizerFactory<Ledu/stanford/nlp/ling/Word;>;", "factory", "Z", "(Z)Ledu/stanford/nlp/process/TokenizerFactory<Ledu/stanford/nlp/ling/Word;>;", "main", "[LNSString;", "LJavaIoIOException;", "LEduStanfordNlpProcessWhitespaceTokenizer_WhitespaceTokenizerFactory;", "<T::Ledu/stanford/nlp/ling/HasWord;>Ledu/stanford/nlp/process/AbstractTokenizer<TT;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpProcessWhitespaceTokenizer = { "WhitespaceTokenizer", "edu.stanford.nlp.process", ptrTable, methods, fields, 7, 0x1, 11, 2, -1, 21, -1, 22, -1 };
  return &_EduStanfordNlpProcessWhitespaceTokenizer;
}

@end

EduStanfordNlpProcessWhitespaceTokenizer_WhitespaceTokenizerFactory *EduStanfordNlpProcessWhitespaceTokenizer_newCoreLabelTokenizerFactoryWithNSString_(NSString *options) {
  EduStanfordNlpProcessWhitespaceTokenizer_initialize();
  return new_EduStanfordNlpProcessWhitespaceTokenizer_WhitespaceTokenizerFactory_initWithEduStanfordNlpProcessLexedTokenFactory_withNSString_(new_EduStanfordNlpProcessCoreLabelTokenFactory_init(), options);
}

EduStanfordNlpProcessWhitespaceTokenizer_WhitespaceTokenizerFactory *EduStanfordNlpProcessWhitespaceTokenizer_newCoreLabelTokenizerFactory() {
  EduStanfordNlpProcessWhitespaceTokenizer_initialize();
  return new_EduStanfordNlpProcessWhitespaceTokenizer_WhitespaceTokenizerFactory_initWithEduStanfordNlpProcessLexedTokenFactory_(new_EduStanfordNlpProcessCoreLabelTokenFactory_init());
}

void EduStanfordNlpProcessWhitespaceTokenizer_initWithEduStanfordNlpProcessLexedTokenFactory_withJavaIoReader_withBoolean_(EduStanfordNlpProcessWhitespaceTokenizer *self, id<EduStanfordNlpProcessLexedTokenFactory> factory, JavaIoReader *r, jboolean eolIsSignificant) {
  EduStanfordNlpProcessAbstractTokenizer_init(self);
  self->eolIsSignificant_ = eolIsSignificant;
  if (r != nil) {
    self->lexer_ = new_EduStanfordNlpProcessWhitespaceLexer_initWithJavaIoReader_withEduStanfordNlpProcessLexedTokenFactory_(r, factory);
  }
}

EduStanfordNlpProcessWhitespaceTokenizer *new_EduStanfordNlpProcessWhitespaceTokenizer_initWithEduStanfordNlpProcessLexedTokenFactory_withJavaIoReader_withBoolean_(id<EduStanfordNlpProcessLexedTokenFactory> factory, JavaIoReader *r, jboolean eolIsSignificant) {
  J2OBJC_NEW_IMPL(EduStanfordNlpProcessWhitespaceTokenizer, initWithEduStanfordNlpProcessLexedTokenFactory_withJavaIoReader_withBoolean_, factory, r, eolIsSignificant)
}

EduStanfordNlpProcessWhitespaceTokenizer *create_EduStanfordNlpProcessWhitespaceTokenizer_initWithEduStanfordNlpProcessLexedTokenFactory_withJavaIoReader_withBoolean_(id<EduStanfordNlpProcessLexedTokenFactory> factory, JavaIoReader *r, jboolean eolIsSignificant) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpProcessWhitespaceTokenizer, initWithEduStanfordNlpProcessLexedTokenFactory_withJavaIoReader_withBoolean_, factory, r, eolIsSignificant)
}

EduStanfordNlpProcessWhitespaceTokenizer *EduStanfordNlpProcessWhitespaceTokenizer_newCoreLabelWhitespaceTokenizerWithJavaIoReader_(JavaIoReader *r) {
  EduStanfordNlpProcessWhitespaceTokenizer_initialize();
  return new_EduStanfordNlpProcessWhitespaceTokenizer_initWithEduStanfordNlpProcessLexedTokenFactory_withJavaIoReader_withBoolean_(new_EduStanfordNlpProcessCoreLabelTokenFactory_init(), r, false);
}

EduStanfordNlpProcessWhitespaceTokenizer *EduStanfordNlpProcessWhitespaceTokenizer_newCoreLabelWhitespaceTokenizerWithJavaIoReader_withBoolean_(JavaIoReader *r, jboolean tokenizeNLs) {
  EduStanfordNlpProcessWhitespaceTokenizer_initialize();
  return new_EduStanfordNlpProcessWhitespaceTokenizer_initWithEduStanfordNlpProcessLexedTokenFactory_withJavaIoReader_withBoolean_(new_EduStanfordNlpProcessCoreLabelTokenFactory_init(), r, tokenizeNLs);
}

EduStanfordNlpProcessWhitespaceTokenizer *EduStanfordNlpProcessWhitespaceTokenizer_newWordWhitespaceTokenizerWithJavaIoReader_(JavaIoReader *r) {
  EduStanfordNlpProcessWhitespaceTokenizer_initialize();
  return EduStanfordNlpProcessWhitespaceTokenizer_newWordWhitespaceTokenizerWithJavaIoReader_withBoolean_(r, false);
}

EduStanfordNlpProcessWhitespaceTokenizer *EduStanfordNlpProcessWhitespaceTokenizer_newWordWhitespaceTokenizerWithJavaIoReader_withBoolean_(JavaIoReader *r, jboolean eolIsSignificant) {
  EduStanfordNlpProcessWhitespaceTokenizer_initialize();
  return new_EduStanfordNlpProcessWhitespaceTokenizer_initWithEduStanfordNlpProcessLexedTokenFactory_withJavaIoReader_withBoolean_(new_EduStanfordNlpProcessWordTokenFactory_init(), r, eolIsSignificant);
}

id<EduStanfordNlpProcessTokenizerFactory> EduStanfordNlpProcessWhitespaceTokenizer_factory() {
  EduStanfordNlpProcessWhitespaceTokenizer_initialize();
  return new_EduStanfordNlpProcessWhitespaceTokenizer_WhitespaceTokenizerFactory_initWithEduStanfordNlpProcessLexedTokenFactory_withBoolean_(new_EduStanfordNlpProcessWordTokenFactory_init(), false);
}

id<EduStanfordNlpProcessTokenizerFactory> EduStanfordNlpProcessWhitespaceTokenizer_factoryWithBoolean_(jboolean eolIsSignificant) {
  EduStanfordNlpProcessWhitespaceTokenizer_initialize();
  return new_EduStanfordNlpProcessWhitespaceTokenizer_WhitespaceTokenizerFactory_initWithEduStanfordNlpProcessLexedTokenFactory_withBoolean_(new_EduStanfordNlpProcessWordTokenFactory_init(), eolIsSignificant);
}

void EduStanfordNlpProcessWhitespaceTokenizer_mainWithNSStringArray_(IOSObjectArray *args) {
  EduStanfordNlpProcessWhitespaceTokenizer_initialize();
  jboolean eolIsSignificant = (((IOSObjectArray *) nil_chk(args))->size_ > 0 && [((NSString *) nil_chk(IOSObjectArray_Get(args, 0))) isEqual:@"-cr"]);
  JavaIoReader *reader = ((args->size_ > 0 && ![((NSString *) nil_chk(IOSObjectArray_Get(args, args->size_ - 1))) isEqual:@"-cr"]) ? new_JavaIoInputStreamReader_initWithJavaIoInputStream_withNSString_(new_JavaIoFileInputStream_initWithNSString_(IOSObjectArray_Get(args, args->size_ - 1)), @"UTF-8") : new_JavaIoInputStreamReader_initWithJavaIoInputStream_withNSString_(JreLoadStatic(JavaLangSystem, in), @"UTF-8"));
  EduStanfordNlpProcessWhitespaceTokenizer *tokenizer = new_EduStanfordNlpProcessWhitespaceTokenizer_initWithEduStanfordNlpProcessLexedTokenFactory_withJavaIoReader_withBoolean_(new_EduStanfordNlpProcessWordTokenFactory_init(), reader, eolIsSignificant);
  JavaIoPrintWriter *pw = new_JavaIoPrintWriter_initWithJavaIoWriter_withBoolean_(new_JavaIoOutputStreamWriter_initWithJavaIoOutputStream_withNSString_(JreLoadStatic(JavaLangSystem, out), @"UTF-8"), true);
  while ([tokenizer hasNext]) {
    EduStanfordNlpLingWord *w = ((EduStanfordNlpLingWord *) [tokenizer next]);
    if ([((NSString *) nil_chk([((EduStanfordNlpLingWord *) nil_chk(w)) value])) isEqual:EduStanfordNlpProcessWhitespaceLexer_NEWLINE]) {
      [pw printlnWithNSString:@"***CR***"];
    }
    else {
      [pw printlnWithId:w];
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpProcessWhitespaceTokenizer)

@implementation EduStanfordNlpProcessWhitespaceTokenizer_WhitespaceTokenizerFactory

+ (id<EduStanfordNlpProcessTokenizerFactory>)newTokenizerFactory {
  return EduStanfordNlpProcessWhitespaceTokenizer_WhitespaceTokenizerFactory_newTokenizerFactory();
}

- (instancetype)initWithEduStanfordNlpProcessLexedTokenFactory:(id<EduStanfordNlpProcessLexedTokenFactory>)factory {
  EduStanfordNlpProcessWhitespaceTokenizer_WhitespaceTokenizerFactory_initWithEduStanfordNlpProcessLexedTokenFactory_(self, factory);
  return self;
}

- (instancetype)initWithEduStanfordNlpProcessLexedTokenFactory:(id<EduStanfordNlpProcessLexedTokenFactory>)factory
                                                  withNSString:(NSString *)options {
  EduStanfordNlpProcessWhitespaceTokenizer_WhitespaceTokenizerFactory_initWithEduStanfordNlpProcessLexedTokenFactory_withNSString_(self, factory, options);
  return self;
}

- (instancetype)initWithEduStanfordNlpProcessLexedTokenFactory:(id<EduStanfordNlpProcessLexedTokenFactory>)factory
                                                   withBoolean:(jboolean)tokenizeNLs {
  EduStanfordNlpProcessWhitespaceTokenizer_WhitespaceTokenizerFactory_initWithEduStanfordNlpProcessLexedTokenFactory_withBoolean_(self, factory, tokenizeNLs);
  return self;
}

- (id<JavaUtilIterator>)getIteratorWithJavaIoReader:(JavaIoReader *)r {
  return [self getTokenizerWithJavaIoReader:r];
}

- (id<EduStanfordNlpProcessTokenizer>)getTokenizerWithJavaIoReader:(JavaIoReader *)r {
  return new_EduStanfordNlpProcessWhitespaceTokenizer_initWithEduStanfordNlpProcessLexedTokenFactory_withJavaIoReader_withBoolean_(factory_, r, tokenizeNLs_);
}

- (id<EduStanfordNlpProcessTokenizer>)getTokenizerWithJavaIoReader:(JavaIoReader *)r
                                                      withNSString:(NSString *)extraOptions {
  JavaUtilProperties *prop = EduStanfordNlpUtilStringUtils_stringToPropertiesWithNSString_(extraOptions);
  jboolean tokenizeNewlines = EduStanfordNlpUtilPropertiesUtils_getBoolWithJavaUtilProperties_withNSString_withBoolean_(prop, @"tokenizeNLs", self->tokenizeNLs_);
  return new_EduStanfordNlpProcessWhitespaceTokenizer_initWithEduStanfordNlpProcessLexedTokenFactory_withJavaIoReader_withBoolean_(factory_, r, tokenizeNewlines);
}

- (void)setOptionsWithNSString:(NSString *)options {
  JavaUtilProperties *prop = EduStanfordNlpUtilStringUtils_stringToPropertiesWithNSString_(options);
  tokenizeNLs_ = EduStanfordNlpUtilPropertiesUtils_getBoolWithJavaUtilProperties_withNSString_withBoolean_(prop, @"tokenizeNLs", tokenizeNLs_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LEduStanfordNlpProcessTokenizerFactory;", 0x9, -1, -1, -1, 0, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, 4, -1, -1 },
    { NULL, NULL, 0x1, -1, 5, -1, 6, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, 7, 8, -1, 9, -1, -1 },
    { NULL, "LEduStanfordNlpProcessTokenizer;", 0x1, 10, 8, -1, 11, -1, -1 },
    { NULL, "LEduStanfordNlpProcessTokenizer;", 0x1, 10, 12, -1, 13, -1, -1 },
    { NULL, "V", 0x1, 14, 15, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(newTokenizerFactory);
  methods[1].selector = @selector(initWithEduStanfordNlpProcessLexedTokenFactory:);
  methods[2].selector = @selector(initWithEduStanfordNlpProcessLexedTokenFactory:withNSString:);
  methods[3].selector = @selector(initWithEduStanfordNlpProcessLexedTokenFactory:withBoolean:);
  methods[4].selector = @selector(getIteratorWithJavaIoReader:);
  methods[5].selector = @selector(getTokenizerWithJavaIoReader:);
  methods[6].selector = @selector(getTokenizerWithJavaIoReader:withNSString:);
  methods[7].selector = @selector(setOptionsWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "tokenizeNLs_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "factory_", "LEduStanfordNlpProcessLexedTokenFactory;", .constantValue.asLong = 0, 0x2, -1, -1, 16, -1 },
  };
  static const void *ptrTable[] = { "()Ledu/stanford/nlp/process/TokenizerFactory<Ledu/stanford/nlp/ling/Word;>;", "LEduStanfordNlpProcessLexedTokenFactory;", "(Ledu/stanford/nlp/process/LexedTokenFactory<TT;>;)V", "LEduStanfordNlpProcessLexedTokenFactory;LNSString;", "(Ledu/stanford/nlp/process/LexedTokenFactory<TT;>;Ljava/lang/String;)V", "LEduStanfordNlpProcessLexedTokenFactory;Z", "(Ledu/stanford/nlp/process/LexedTokenFactory<TT;>;Z)V", "getIterator", "LJavaIoReader;", "(Ljava/io/Reader;)Ljava/util/Iterator<TT;>;", "getTokenizer", "(Ljava/io/Reader;)Ledu/stanford/nlp/process/Tokenizer<TT;>;", "LJavaIoReader;LNSString;", "(Ljava/io/Reader;Ljava/lang/String;)Ledu/stanford/nlp/process/Tokenizer<TT;>;", "setOptions", "LNSString;", "Ledu/stanford/nlp/process/LexedTokenFactory<TT;>;", "LEduStanfordNlpProcessWhitespaceTokenizer;", "<T::Ledu/stanford/nlp/ling/HasWord;>Ljava/lang/Object;Ledu/stanford/nlp/process/TokenizerFactory<TT;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpProcessWhitespaceTokenizer_WhitespaceTokenizerFactory = { "WhitespaceTokenizerFactory", "edu.stanford.nlp.process", ptrTable, methods, fields, 7, 0x9, 8, 2, 17, -1, -1, 18, -1 };
  return &_EduStanfordNlpProcessWhitespaceTokenizer_WhitespaceTokenizerFactory;
}

@end

id<EduStanfordNlpProcessTokenizerFactory> EduStanfordNlpProcessWhitespaceTokenizer_WhitespaceTokenizerFactory_newTokenizerFactory() {
  EduStanfordNlpProcessWhitespaceTokenizer_WhitespaceTokenizerFactory_initialize();
  return new_EduStanfordNlpProcessWhitespaceTokenizer_WhitespaceTokenizerFactory_initWithEduStanfordNlpProcessLexedTokenFactory_withBoolean_(new_EduStanfordNlpProcessWordTokenFactory_init(), false);
}

void EduStanfordNlpProcessWhitespaceTokenizer_WhitespaceTokenizerFactory_initWithEduStanfordNlpProcessLexedTokenFactory_(EduStanfordNlpProcessWhitespaceTokenizer_WhitespaceTokenizerFactory *self, id<EduStanfordNlpProcessLexedTokenFactory> factory) {
  EduStanfordNlpProcessWhitespaceTokenizer_WhitespaceTokenizerFactory_initWithEduStanfordNlpProcessLexedTokenFactory_withBoolean_(self, factory, false);
}

EduStanfordNlpProcessWhitespaceTokenizer_WhitespaceTokenizerFactory *new_EduStanfordNlpProcessWhitespaceTokenizer_WhitespaceTokenizerFactory_initWithEduStanfordNlpProcessLexedTokenFactory_(id<EduStanfordNlpProcessLexedTokenFactory> factory) {
  J2OBJC_NEW_IMPL(EduStanfordNlpProcessWhitespaceTokenizer_WhitespaceTokenizerFactory, initWithEduStanfordNlpProcessLexedTokenFactory_, factory)
}

EduStanfordNlpProcessWhitespaceTokenizer_WhitespaceTokenizerFactory *create_EduStanfordNlpProcessWhitespaceTokenizer_WhitespaceTokenizerFactory_initWithEduStanfordNlpProcessLexedTokenFactory_(id<EduStanfordNlpProcessLexedTokenFactory> factory) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpProcessWhitespaceTokenizer_WhitespaceTokenizerFactory, initWithEduStanfordNlpProcessLexedTokenFactory_, factory)
}

void EduStanfordNlpProcessWhitespaceTokenizer_WhitespaceTokenizerFactory_initWithEduStanfordNlpProcessLexedTokenFactory_withNSString_(EduStanfordNlpProcessWhitespaceTokenizer_WhitespaceTokenizerFactory *self, id<EduStanfordNlpProcessLexedTokenFactory> factory, NSString *options) {
  NSObject_init(self);
  self->factory_ = factory;
  JavaUtilProperties *prop = EduStanfordNlpUtilStringUtils_stringToPropertiesWithNSString_(options);
  self->tokenizeNLs_ = EduStanfordNlpUtilPropertiesUtils_getBoolWithJavaUtilProperties_withNSString_withBoolean_(prop, @"tokenizeNLs", false);
}

EduStanfordNlpProcessWhitespaceTokenizer_WhitespaceTokenizerFactory *new_EduStanfordNlpProcessWhitespaceTokenizer_WhitespaceTokenizerFactory_initWithEduStanfordNlpProcessLexedTokenFactory_withNSString_(id<EduStanfordNlpProcessLexedTokenFactory> factory, NSString *options) {
  J2OBJC_NEW_IMPL(EduStanfordNlpProcessWhitespaceTokenizer_WhitespaceTokenizerFactory, initWithEduStanfordNlpProcessLexedTokenFactory_withNSString_, factory, options)
}

EduStanfordNlpProcessWhitespaceTokenizer_WhitespaceTokenizerFactory *create_EduStanfordNlpProcessWhitespaceTokenizer_WhitespaceTokenizerFactory_initWithEduStanfordNlpProcessLexedTokenFactory_withNSString_(id<EduStanfordNlpProcessLexedTokenFactory> factory, NSString *options) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpProcessWhitespaceTokenizer_WhitespaceTokenizerFactory, initWithEduStanfordNlpProcessLexedTokenFactory_withNSString_, factory, options)
}

void EduStanfordNlpProcessWhitespaceTokenizer_WhitespaceTokenizerFactory_initWithEduStanfordNlpProcessLexedTokenFactory_withBoolean_(EduStanfordNlpProcessWhitespaceTokenizer_WhitespaceTokenizerFactory *self, id<EduStanfordNlpProcessLexedTokenFactory> factory, jboolean tokenizeNLs) {
  NSObject_init(self);
  self->factory_ = factory;
  self->tokenizeNLs_ = tokenizeNLs;
}

EduStanfordNlpProcessWhitespaceTokenizer_WhitespaceTokenizerFactory *new_EduStanfordNlpProcessWhitespaceTokenizer_WhitespaceTokenizerFactory_initWithEduStanfordNlpProcessLexedTokenFactory_withBoolean_(id<EduStanfordNlpProcessLexedTokenFactory> factory, jboolean tokenizeNLs) {
  J2OBJC_NEW_IMPL(EduStanfordNlpProcessWhitespaceTokenizer_WhitespaceTokenizerFactory, initWithEduStanfordNlpProcessLexedTokenFactory_withBoolean_, factory, tokenizeNLs)
}

EduStanfordNlpProcessWhitespaceTokenizer_WhitespaceTokenizerFactory *create_EduStanfordNlpProcessWhitespaceTokenizer_WhitespaceTokenizerFactory_initWithEduStanfordNlpProcessLexedTokenFactory_withBoolean_(id<EduStanfordNlpProcessLexedTokenFactory> factory, jboolean tokenizeNLs) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpProcessWhitespaceTokenizer_WhitespaceTokenizerFactory, initWithEduStanfordNlpProcessLexedTokenFactory_withBoolean_, factory, tokenizeNLs)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpProcessWhitespaceTokenizer_WhitespaceTokenizerFactory)
