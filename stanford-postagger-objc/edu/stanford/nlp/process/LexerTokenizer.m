//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/process/LexerTokenizer.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/io/Lexer.h"
#include "edu/stanford/nlp/io/RuntimeIOException.h"
#include "edu/stanford/nlp/process/AbstractTokenizer.h"
#include "edu/stanford/nlp/process/JFlexDummyLexer.h"
#include "edu/stanford/nlp/process/LexerTokenizer.h"
#include "edu/stanford/nlp/process/Tokenizer.h"
#include "java/io/BufferedReader.h"
#include "java/io/FileReader.h"
#include "java/io/IOException.h"
#include "java/io/PrintStream.h"
#include "java/io/Reader.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/System.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface EduStanfordNlpProcessLexerTokenizer () {
 @public
  id<EduStanfordNlpIoLexer> lexer_;
}

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpProcessLexerTokenizer, lexer_, id<EduStanfordNlpIoLexer>)

@implementation EduStanfordNlpProcessLexerTokenizer

- (NSString *)getNext {
  NSString *token = nil;
  @try {
    jint a = EduStanfordNlpIoLexer_IGNORE;
    while ((a = [((id<EduStanfordNlpIoLexer>) nil_chk(lexer_)) yylex]) == EduStanfordNlpIoLexer_IGNORE) {
      ;
    }
    if (a == [((id<EduStanfordNlpIoLexer>) nil_chk(lexer_)) getYYEOF]) {
      token = nil;
    }
    else {
      token = [((id<EduStanfordNlpIoLexer>) nil_chk(lexer_)) yytext];
    }
  }
  @catch (JavaIoIOException *e) {
  }
  return token;
}

- (instancetype)initWithEduStanfordNlpIoLexer:(id<EduStanfordNlpIoLexer>)l {
  EduStanfordNlpProcessLexerTokenizer_initWithEduStanfordNlpIoLexer_(self, l);
  return self;
}

- (instancetype)initWithEduStanfordNlpIoLexer:(id<EduStanfordNlpIoLexer>)l
                             withJavaIoReader:(JavaIoReader *)r {
  EduStanfordNlpProcessLexerTokenizer_initWithEduStanfordNlpIoLexer_withJavaIoReader_(self, l, r);
  return self;
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  EduStanfordNlpProcessLexerTokenizer_mainWithNSStringArray_(args);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x4, -1, -1, -1, 0, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 3, 4, 5, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(getNext);
  methods[1].selector = @selector(initWithEduStanfordNlpIoLexer:);
  methods[2].selector = @selector(initWithEduStanfordNlpIoLexer:withJavaIoReader:);
  methods[3].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "lexer_", "LEduStanfordNlpIoLexer;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/lang/String;", "LEduStanfordNlpIoLexer;", "LEduStanfordNlpIoLexer;LJavaIoReader;", "main", "[LNSString;", "LJavaIoIOException;", "Ledu/stanford/nlp/process/AbstractTokenizer<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpProcessLexerTokenizer = { "LexerTokenizer", "edu.stanford.nlp.process", ptrTable, methods, fields, 7, 0x1, 4, 1, -1, -1, -1, 6, -1 };
  return &_EduStanfordNlpProcessLexerTokenizer;
}

@end

void EduStanfordNlpProcessLexerTokenizer_initWithEduStanfordNlpIoLexer_(EduStanfordNlpProcessLexerTokenizer *self, id<EduStanfordNlpIoLexer> l) {
  EduStanfordNlpProcessAbstractTokenizer_init(self);
  if (l == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"You can't make a Tokenizer out of a null Lexer!");
  }
  else {
    self->lexer_ = l;
  }
}

EduStanfordNlpProcessLexerTokenizer *new_EduStanfordNlpProcessLexerTokenizer_initWithEduStanfordNlpIoLexer_(id<EduStanfordNlpIoLexer> l) {
  J2OBJC_NEW_IMPL(EduStanfordNlpProcessLexerTokenizer, initWithEduStanfordNlpIoLexer_, l)
}

EduStanfordNlpProcessLexerTokenizer *create_EduStanfordNlpProcessLexerTokenizer_initWithEduStanfordNlpIoLexer_(id<EduStanfordNlpIoLexer> l) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpProcessLexerTokenizer, initWithEduStanfordNlpIoLexer_, l)
}

void EduStanfordNlpProcessLexerTokenizer_initWithEduStanfordNlpIoLexer_withJavaIoReader_(EduStanfordNlpProcessLexerTokenizer *self, id<EduStanfordNlpIoLexer> l, JavaIoReader *r) {
  EduStanfordNlpProcessLexerTokenizer_initWithEduStanfordNlpIoLexer_(self, l);
  @try {
    [((id<EduStanfordNlpIoLexer>) nil_chk(l)) yyresetWithJavaIoReader:r];
  }
  @catch (JavaIoIOException *e) {
    @throw new_EduStanfordNlpIoRuntimeIOException_initWithNSString_([((JavaIoIOException *) nil_chk(e)) getMessage]);
  }
  (void) [self getNext];
}

EduStanfordNlpProcessLexerTokenizer *new_EduStanfordNlpProcessLexerTokenizer_initWithEduStanfordNlpIoLexer_withJavaIoReader_(id<EduStanfordNlpIoLexer> l, JavaIoReader *r) {
  J2OBJC_NEW_IMPL(EduStanfordNlpProcessLexerTokenizer, initWithEduStanfordNlpIoLexer_withJavaIoReader_, l, r)
}

EduStanfordNlpProcessLexerTokenizer *create_EduStanfordNlpProcessLexerTokenizer_initWithEduStanfordNlpIoLexer_withJavaIoReader_(id<EduStanfordNlpIoLexer> l, JavaIoReader *r) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpProcessLexerTokenizer, initWithEduStanfordNlpIoLexer_withJavaIoReader_, l, r)
}

void EduStanfordNlpProcessLexerTokenizer_mainWithNSStringArray_(IOSObjectArray *args) {
  EduStanfordNlpProcessLexerTokenizer_initialize();
  id<EduStanfordNlpProcessTokenizer> t = new_EduStanfordNlpProcessLexerTokenizer_initWithEduStanfordNlpIoLexer_withJavaIoReader_(new_EduStanfordNlpProcessJFlexDummyLexer_initWithJavaIoReader_(nil), new_JavaIoBufferedReader_initWithJavaIoReader_(new_JavaIoFileReader_initWithNSString_(IOSObjectArray_Get(nil_chk(args), 0))));
  while ([t hasNext]) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"token ", [t next])];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpProcessLexerTokenizer)
