//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/process/WhitespaceLexer.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/process/LexedTokenFactory.h"
#include "edu/stanford/nlp/process/WhitespaceLexer.h"
#include "java/io/InputStream.h"
#include "java/io/InputStreamReader.h"
#include "java/io/Reader.h"
#include "java/lang/ArrayIndexOutOfBoundsException.h"
#include "java/lang/Error.h"
#include "java/lang/System.h"
#include "java/nio/charset/Charset.h"

@interface EduStanfordNlpProcessWhitespaceLexer () {
 @public
  JavaIoReader *zzReader_;
  jint zzState_;
  jint zzLexicalState_;
  IOSCharArray *zzBuffer_;
  jint zzMarkedPos_;
  jint zzCurrentPos_;
  jint zzStartRead_;
  jint zzEndRead_;
  jint yyline_;
  jint yychar_;
  jint yycolumn_;
  jboolean zzAtBOL_;
  jboolean zzAtEOF_;
  jboolean zzEOFDone_;
  id<EduStanfordNlpProcessLexedTokenFactory> tokenFactory_;
}

+ (IOSIntArray *)zzUnpackAction;

+ (jint)zzUnpackActionWithNSString:(NSString *)packed
                           withInt:(jint)offset
                      withIntArray:(IOSIntArray *)result;

+ (IOSIntArray *)zzUnpackRowMap;

+ (jint)zzUnpackRowMapWithNSString:(NSString *)packed
                           withInt:(jint)offset
                      withIntArray:(IOSIntArray *)result;

+ (IOSIntArray *)zzUnpackTrans;

+ (jint)zzUnpackTransWithNSString:(NSString *)packed
                          withInt:(jint)offset
                     withIntArray:(IOSIntArray *)result;

+ (IOSIntArray *)zzUnpackAttribute;

+ (jint)zzUnpackAttributeWithNSString:(NSString *)packed
                              withInt:(jint)offset
                         withIntArray:(IOSIntArray *)result;

+ (IOSCharArray *)zzUnpackCMapWithNSString:(NSString *)packed;

- (jboolean)zzRefill;

- (void)zzScanErrorWithInt:(jint)errorCode;

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpProcessWhitespaceLexer, zzReader_, JavaIoReader *)
J2OBJC_FIELD_SETTER(EduStanfordNlpProcessWhitespaceLexer, zzBuffer_, IOSCharArray *)
J2OBJC_FIELD_SETTER(EduStanfordNlpProcessWhitespaceLexer, tokenFactory_, id<EduStanfordNlpProcessLexedTokenFactory>)

inline jint EduStanfordNlpProcessWhitespaceLexer_get_ZZ_BUFFERSIZE();
#define EduStanfordNlpProcessWhitespaceLexer_ZZ_BUFFERSIZE 16384
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpProcessWhitespaceLexer, ZZ_BUFFERSIZE, jint)

inline IOSIntArray *EduStanfordNlpProcessWhitespaceLexer_get_ZZ_LEXSTATE();
static IOSIntArray *EduStanfordNlpProcessWhitespaceLexer_ZZ_LEXSTATE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpProcessWhitespaceLexer, ZZ_LEXSTATE, IOSIntArray *)

inline NSString *EduStanfordNlpProcessWhitespaceLexer_get_ZZ_CMAP_PACKED();
static NSString *EduStanfordNlpProcessWhitespaceLexer_ZZ_CMAP_PACKED = @"\t\x00\x01\x04\x01\x02\x02\x03\x01\x01\x12\x00\x01\x04""d\x00\x01\x03\x1a\x00\x01\x04\u15df\x00\x01\x04\u018d\x00\x01\x04\u07f3\x00\n\x04\x1c\x00\x01\x03\x01\x03\x05\x00\x01\x04/\x00\x02\x04\u0f9f\x00\x01\x04\ucfff\x00";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpProcessWhitespaceLexer, ZZ_CMAP_PACKED, NSString *)

inline IOSCharArray *EduStanfordNlpProcessWhitespaceLexer_get_ZZ_CMAP();
static IOSCharArray *EduStanfordNlpProcessWhitespaceLexer_ZZ_CMAP;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpProcessWhitespaceLexer, ZZ_CMAP, IOSCharArray *)

inline IOSIntArray *EduStanfordNlpProcessWhitespaceLexer_get_ZZ_ACTION();
static IOSIntArray *EduStanfordNlpProcessWhitespaceLexer_ZZ_ACTION;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpProcessWhitespaceLexer, ZZ_ACTION, IOSIntArray *)

inline NSString *EduStanfordNlpProcessWhitespaceLexer_get_ZZ_ACTION_PACKED_0();
static NSString *EduStanfordNlpProcessWhitespaceLexer_ZZ_ACTION_PACKED_0 = @"\x01\x00\x01\x01\x02\x02\x01\x03";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpProcessWhitespaceLexer, ZZ_ACTION_PACKED_0, NSString *)

inline IOSIntArray *EduStanfordNlpProcessWhitespaceLexer_get_ZZ_ROWMAP();
static IOSIntArray *EduStanfordNlpProcessWhitespaceLexer_ZZ_ROWMAP;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpProcessWhitespaceLexer, ZZ_ROWMAP, IOSIntArray *)

inline NSString *EduStanfordNlpProcessWhitespaceLexer_get_ZZ_ROWMAP_PACKED_0();
static NSString *EduStanfordNlpProcessWhitespaceLexer_ZZ_ROWMAP_PACKED_0 = @"\x00\x00\x00\x05\x00\n\x00\x0f\x00\x14";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpProcessWhitespaceLexer, ZZ_ROWMAP_PACKED_0, NSString *)

inline IOSIntArray *EduStanfordNlpProcessWhitespaceLexer_get_ZZ_TRANS();
static IOSIntArray *EduStanfordNlpProcessWhitespaceLexer_ZZ_TRANS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpProcessWhitespaceLexer, ZZ_TRANS, IOSIntArray *)

inline NSString *EduStanfordNlpProcessWhitespaceLexer_get_ZZ_TRANS_PACKED_0();
static NSString *EduStanfordNlpProcessWhitespaceLexer_ZZ_TRANS_PACKED_0 = @"\x01\x02\x01\x03\x02\x04\x01\x05\x01\x02\x06\x00\x01\x04\x0b\x00\x01\x05";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpProcessWhitespaceLexer, ZZ_TRANS_PACKED_0, NSString *)

inline jint EduStanfordNlpProcessWhitespaceLexer_get_ZZ_UNKNOWN_ERROR();
#define EduStanfordNlpProcessWhitespaceLexer_ZZ_UNKNOWN_ERROR 0
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpProcessWhitespaceLexer, ZZ_UNKNOWN_ERROR, jint)

inline jint EduStanfordNlpProcessWhitespaceLexer_get_ZZ_NO_MATCH();
#define EduStanfordNlpProcessWhitespaceLexer_ZZ_NO_MATCH 1
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpProcessWhitespaceLexer, ZZ_NO_MATCH, jint)

inline jint EduStanfordNlpProcessWhitespaceLexer_get_ZZ_PUSHBACK_2BIG();
#define EduStanfordNlpProcessWhitespaceLexer_ZZ_PUSHBACK_2BIG 2
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpProcessWhitespaceLexer, ZZ_PUSHBACK_2BIG, jint)

inline IOSObjectArray *EduStanfordNlpProcessWhitespaceLexer_get_ZZ_ERROR_MSG();
static IOSObjectArray *EduStanfordNlpProcessWhitespaceLexer_ZZ_ERROR_MSG;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpProcessWhitespaceLexer, ZZ_ERROR_MSG, IOSObjectArray *)

inline IOSIntArray *EduStanfordNlpProcessWhitespaceLexer_get_ZZ_ATTRIBUTE();
static IOSIntArray *EduStanfordNlpProcessWhitespaceLexer_ZZ_ATTRIBUTE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpProcessWhitespaceLexer, ZZ_ATTRIBUTE, IOSIntArray *)

inline NSString *EduStanfordNlpProcessWhitespaceLexer_get_ZZ_ATTRIBUTE_PACKED_0();
static NSString *EduStanfordNlpProcessWhitespaceLexer_ZZ_ATTRIBUTE_PACKED_0 = @"\x01\x00\x02\x01\x01\t\x01\x01";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpProcessWhitespaceLexer, ZZ_ATTRIBUTE_PACKED_0, NSString *)

__attribute__((unused)) static IOSIntArray *EduStanfordNlpProcessWhitespaceLexer_zzUnpackAction();

__attribute__((unused)) static jint EduStanfordNlpProcessWhitespaceLexer_zzUnpackActionWithNSString_withInt_withIntArray_(NSString *packed, jint offset, IOSIntArray *result);

__attribute__((unused)) static IOSIntArray *EduStanfordNlpProcessWhitespaceLexer_zzUnpackRowMap();

__attribute__((unused)) static jint EduStanfordNlpProcessWhitespaceLexer_zzUnpackRowMapWithNSString_withInt_withIntArray_(NSString *packed, jint offset, IOSIntArray *result);

__attribute__((unused)) static IOSIntArray *EduStanfordNlpProcessWhitespaceLexer_zzUnpackTrans();

__attribute__((unused)) static jint EduStanfordNlpProcessWhitespaceLexer_zzUnpackTransWithNSString_withInt_withIntArray_(NSString *packed, jint offset, IOSIntArray *result);

__attribute__((unused)) static IOSIntArray *EduStanfordNlpProcessWhitespaceLexer_zzUnpackAttribute();

__attribute__((unused)) static jint EduStanfordNlpProcessWhitespaceLexer_zzUnpackAttributeWithNSString_withInt_withIntArray_(NSString *packed, jint offset, IOSIntArray *result);

__attribute__((unused)) static IOSCharArray *EduStanfordNlpProcessWhitespaceLexer_zzUnpackCMapWithNSString_(NSString *packed);

__attribute__((unused)) static jboolean EduStanfordNlpProcessWhitespaceLexer_zzRefill(EduStanfordNlpProcessWhitespaceLexer *self);

__attribute__((unused)) static NSString *EduStanfordNlpProcessWhitespaceLexer_yytext(EduStanfordNlpProcessWhitespaceLexer *self);

__attribute__((unused)) static jint EduStanfordNlpProcessWhitespaceLexer_yylength(EduStanfordNlpProcessWhitespaceLexer *self);

__attribute__((unused)) static void EduStanfordNlpProcessWhitespaceLexer_zzScanErrorWithInt_(EduStanfordNlpProcessWhitespaceLexer *self, jint errorCode);

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpProcessWhitespaceLexer)

NSString *EduStanfordNlpProcessWhitespaceLexer_NEWLINE = @"\n";

@implementation EduStanfordNlpProcessWhitespaceLexer

+ (IOSIntArray *)zzUnpackAction {
  return EduStanfordNlpProcessWhitespaceLexer_zzUnpackAction();
}

+ (jint)zzUnpackActionWithNSString:(NSString *)packed
                           withInt:(jint)offset
                      withIntArray:(IOSIntArray *)result {
  return EduStanfordNlpProcessWhitespaceLexer_zzUnpackActionWithNSString_withInt_withIntArray_(packed, offset, result);
}

+ (IOSIntArray *)zzUnpackRowMap {
  return EduStanfordNlpProcessWhitespaceLexer_zzUnpackRowMap();
}

+ (jint)zzUnpackRowMapWithNSString:(NSString *)packed
                           withInt:(jint)offset
                      withIntArray:(IOSIntArray *)result {
  return EduStanfordNlpProcessWhitespaceLexer_zzUnpackRowMapWithNSString_withInt_withIntArray_(packed, offset, result);
}

+ (IOSIntArray *)zzUnpackTrans {
  return EduStanfordNlpProcessWhitespaceLexer_zzUnpackTrans();
}

+ (jint)zzUnpackTransWithNSString:(NSString *)packed
                          withInt:(jint)offset
                     withIntArray:(IOSIntArray *)result {
  return EduStanfordNlpProcessWhitespaceLexer_zzUnpackTransWithNSString_withInt_withIntArray_(packed, offset, result);
}

+ (IOSIntArray *)zzUnpackAttribute {
  return EduStanfordNlpProcessWhitespaceLexer_zzUnpackAttribute();
}

+ (jint)zzUnpackAttributeWithNSString:(NSString *)packed
                              withInt:(jint)offset
                         withIntArray:(IOSIntArray *)result {
  return EduStanfordNlpProcessWhitespaceLexer_zzUnpackAttributeWithNSString_withInt_withIntArray_(packed, offset, result);
}

- (instancetype)initWithJavaIoReader:(JavaIoReader *)r
withEduStanfordNlpProcessLexedTokenFactory:(id<EduStanfordNlpProcessLexedTokenFactory>)tf {
  EduStanfordNlpProcessWhitespaceLexer_initWithJavaIoReader_withEduStanfordNlpProcessLexedTokenFactory_(self, r, tf);
  return self;
}

- (instancetype)initWithJavaIoReader:(JavaIoReader *)inArg {
  EduStanfordNlpProcessWhitespaceLexer_initWithJavaIoReader_(self, inArg);
  return self;
}

- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  EduStanfordNlpProcessWhitespaceLexer_initWithJavaIoInputStream_(self, inArg);
  return self;
}

+ (IOSCharArray *)zzUnpackCMapWithNSString:(NSString *)packed {
  return EduStanfordNlpProcessWhitespaceLexer_zzUnpackCMapWithNSString_(packed);
}

- (jboolean)zzRefill {
  return EduStanfordNlpProcessWhitespaceLexer_zzRefill(self);
}

- (void)yyclose {
  zzAtEOF_ = true;
  zzEndRead_ = zzStartRead_;
  if (zzReader_ != nil) [zzReader_ close];
}

- (void)yyresetWithJavaIoReader:(JavaIoReader *)reader {
  zzReader_ = reader;
  zzAtBOL_ = true;
  zzAtEOF_ = false;
  zzEOFDone_ = false;
  zzEndRead_ = zzStartRead_ = 0;
  zzCurrentPos_ = zzMarkedPos_ = 0;
  yyline_ = yychar_ = yycolumn_ = 0;
  zzLexicalState_ = EduStanfordNlpProcessWhitespaceLexer_YYINITIAL;
  if (((IOSCharArray *) nil_chk(zzBuffer_))->size_ > EduStanfordNlpProcessWhitespaceLexer_ZZ_BUFFERSIZE) zzBuffer_ = [IOSCharArray newArrayWithLength:EduStanfordNlpProcessWhitespaceLexer_ZZ_BUFFERSIZE];
}

- (jint)yystate {
  return zzLexicalState_;
}

- (void)yybeginWithInt:(jint)newState {
  zzLexicalState_ = newState;
}

- (NSString *)yytext {
  return EduStanfordNlpProcessWhitespaceLexer_yytext(self);
}

- (jchar)yycharatWithInt:(jint)pos {
  return IOSCharArray_Get(nil_chk(zzBuffer_), zzStartRead_ + pos);
}

- (jint)yylength {
  return EduStanfordNlpProcessWhitespaceLexer_yylength(self);
}

- (void)zzScanErrorWithInt:(jint)errorCode {
  EduStanfordNlpProcessWhitespaceLexer_zzScanErrorWithInt_(self, errorCode);
}

- (void)yypushbackWithInt:(jint)number {
  if (number > EduStanfordNlpProcessWhitespaceLexer_yylength(self)) EduStanfordNlpProcessWhitespaceLexer_zzScanErrorWithInt_(self, EduStanfordNlpProcessWhitespaceLexer_ZZ_PUSHBACK_2BIG);
  zzMarkedPos_ -= number;
}

- (id)next {
  jint zzInput;
  jint zzAction;
  jint zzCurrentPosL;
  jint zzMarkedPosL;
  jint zzEndReadL = zzEndRead_;
  IOSCharArray *zzBufferL = zzBuffer_;
  IOSCharArray *zzCMapL = EduStanfordNlpProcessWhitespaceLexer_ZZ_CMAP;
  IOSIntArray *zzTransL = EduStanfordNlpProcessWhitespaceLexer_ZZ_TRANS;
  IOSIntArray *zzRowMapL = EduStanfordNlpProcessWhitespaceLexer_ZZ_ROWMAP;
  IOSIntArray *zzAttrL = EduStanfordNlpProcessWhitespaceLexer_ZZ_ATTRIBUTE;
  while (true) {
    zzMarkedPosL = zzMarkedPos_;
    yychar_ += zzMarkedPosL - zzStartRead_;
    zzAction = -1;
    zzCurrentPosL = zzCurrentPos_ = zzStartRead_ = zzMarkedPosL;
    zzState_ = IOSIntArray_Get(nil_chk(EduStanfordNlpProcessWhitespaceLexer_ZZ_LEXSTATE), zzLexicalState_);
    jint zzAttributes = IOSIntArray_Get(nil_chk(zzAttrL), zzState_);
    if ((zzAttributes & 1) == 1) {
      zzAction = zzState_;
    }
    {
      while (true) {
        if (zzCurrentPosL < zzEndReadL) zzInput = IOSCharArray_Get(nil_chk(zzBufferL), zzCurrentPosL++);
        else if (zzAtEOF_) {
          zzInput = EduStanfordNlpProcessWhitespaceLexer_YYEOF;
          goto break_zzForAction;
        }
        else {
          zzCurrentPos_ = zzCurrentPosL;
          zzMarkedPos_ = zzMarkedPosL;
          jboolean eof = EduStanfordNlpProcessWhitespaceLexer_zzRefill(self);
          zzCurrentPosL = zzCurrentPos_;
          zzMarkedPosL = zzMarkedPos_;
          zzBufferL = zzBuffer_;
          zzEndReadL = zzEndRead_;
          if (eof) {
            zzInput = EduStanfordNlpProcessWhitespaceLexer_YYEOF;
            goto break_zzForAction;
          }
          else {
            zzInput = IOSCharArray_Get(nil_chk(zzBufferL), zzCurrentPosL++);
          }
        }
        jint zzNext = IOSIntArray_Get(nil_chk(zzTransL), IOSIntArray_Get(nil_chk(zzRowMapL), zzState_) + IOSCharArray_Get(nil_chk(zzCMapL), zzInput));
        if (zzNext == -1) goto break_zzForAction;
        zzState_ = zzNext;
        zzAttributes = IOSIntArray_Get(zzAttrL, zzState_);
        if ((zzAttributes & 1) == 1) {
          zzAction = zzState_;
          zzMarkedPosL = zzCurrentPosL;
          if ((zzAttributes & 8) == 8) goto break_zzForAction;
        }
      }
    }
    break_zzForAction: ;
    zzMarkedPos_ = zzMarkedPosL;
    switch (zzAction < 0 ? zzAction : IOSIntArray_Get(nil_chk(EduStanfordNlpProcessWhitespaceLexer_ZZ_ACTION), zzAction)) {
      case 1:
      {
        return [((id<EduStanfordNlpProcessLexedTokenFactory>) nil_chk(tokenFactory_)) makeTokenWithNSString:EduStanfordNlpProcessWhitespaceLexer_yytext(self) withInt:yychar_ withInt:EduStanfordNlpProcessWhitespaceLexer_yylength(self)];
      }
      case 4:
      break;
      case 2:
      {
        return [((id<EduStanfordNlpProcessLexedTokenFactory>) nil_chk(tokenFactory_)) makeTokenWithNSString:EduStanfordNlpProcessWhitespaceLexer_NEWLINE withInt:yychar_ withInt:EduStanfordNlpProcessWhitespaceLexer_yylength(self)];
      }
      case 5:
      break;
      case 3:
      {
      }
      case 6:
      break;
      default:
      if (zzInput == EduStanfordNlpProcessWhitespaceLexer_YYEOF && zzStartRead_ == zzCurrentPos_) {
        zzAtEOF_ = true;
        {
          return nil;
        }
      }
      else {
        EduStanfordNlpProcessWhitespaceLexer_zzScanErrorWithInt_(self, EduStanfordNlpProcessWhitespaceLexer_ZZ_NO_MATCH);
      }
    }
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[I", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 0, 1, -1, -1, -1, -1 },
    { NULL, "[I", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 2, 1, -1, -1, -1, -1 },
    { NULL, "[I", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 3, 1, -1, -1, -1, -1 },
    { NULL, "[I", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 4, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 5, -1, 6, -1, -1 },
    { NULL, NULL, 0x0, -1, 7, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 8, -1, -1, -1, -1 },
    { NULL, "[C", 0xa, 9, 10, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, 11, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, 11, -1, -1, -1 },
    { NULL, "V", 0x11, 12, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 13, 14, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "C", 0x11, 15, 14, -1, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 16, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 14, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, 11, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(zzUnpackAction);
  methods[1].selector = @selector(zzUnpackActionWithNSString:withInt:withIntArray:);
  methods[2].selector = @selector(zzUnpackRowMap);
  methods[3].selector = @selector(zzUnpackRowMapWithNSString:withInt:withIntArray:);
  methods[4].selector = @selector(zzUnpackTrans);
  methods[5].selector = @selector(zzUnpackTransWithNSString:withInt:withIntArray:);
  methods[6].selector = @selector(zzUnpackAttribute);
  methods[7].selector = @selector(zzUnpackAttributeWithNSString:withInt:withIntArray:);
  methods[8].selector = @selector(initWithJavaIoReader:withEduStanfordNlpProcessLexedTokenFactory:);
  methods[9].selector = @selector(initWithJavaIoReader:);
  methods[10].selector = @selector(initWithJavaIoInputStream:);
  methods[11].selector = @selector(zzUnpackCMapWithNSString:);
  methods[12].selector = @selector(zzRefill);
  methods[13].selector = @selector(yyclose);
  methods[14].selector = @selector(yyresetWithJavaIoReader:);
  methods[15].selector = @selector(yystate);
  methods[16].selector = @selector(yybeginWithInt:);
  methods[17].selector = @selector(yytext);
  methods[18].selector = @selector(yycharatWithInt:);
  methods[19].selector = @selector(yylength);
  methods[20].selector = @selector(zzScanErrorWithInt:);
  methods[21].selector = @selector(yypushbackWithInt:);
  methods[22].selector = @selector(next);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "YYEOF", "I", .constantValue.asInt = EduStanfordNlpProcessWhitespaceLexer_YYEOF, 0x19, -1, -1, -1, -1 },
    { "ZZ_BUFFERSIZE", "I", .constantValue.asInt = EduStanfordNlpProcessWhitespaceLexer_ZZ_BUFFERSIZE, 0x1a, -1, -1, -1, -1 },
    { "YYINITIAL", "I", .constantValue.asInt = EduStanfordNlpProcessWhitespaceLexer_YYINITIAL, 0x19, -1, -1, -1, -1 },
    { "ZZ_LEXSTATE", "[I", .constantValue.asLong = 0, 0x1a, -1, 18, -1, -1 },
    { "ZZ_CMAP_PACKED", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 19, -1, -1 },
    { "ZZ_CMAP", "[C", .constantValue.asLong = 0, 0x1a, -1, 20, -1, -1 },
    { "ZZ_ACTION", "[I", .constantValue.asLong = 0, 0x1a, -1, 21, -1, -1 },
    { "ZZ_ACTION_PACKED_0", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 22, -1, -1 },
    { "ZZ_ROWMAP", "[I", .constantValue.asLong = 0, 0x1a, -1, 23, -1, -1 },
    { "ZZ_ROWMAP_PACKED_0", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 24, -1, -1 },
    { "ZZ_TRANS", "[I", .constantValue.asLong = 0, 0x1a, -1, 25, -1, -1 },
    { "ZZ_TRANS_PACKED_0", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 26, -1, -1 },
    { "ZZ_UNKNOWN_ERROR", "I", .constantValue.asInt = EduStanfordNlpProcessWhitespaceLexer_ZZ_UNKNOWN_ERROR, 0x1a, -1, -1, -1, -1 },
    { "ZZ_NO_MATCH", "I", .constantValue.asInt = EduStanfordNlpProcessWhitespaceLexer_ZZ_NO_MATCH, 0x1a, -1, -1, -1, -1 },
    { "ZZ_PUSHBACK_2BIG", "I", .constantValue.asInt = EduStanfordNlpProcessWhitespaceLexer_ZZ_PUSHBACK_2BIG, 0x1a, -1, -1, -1, -1 },
    { "ZZ_ERROR_MSG", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 27, -1, -1 },
    { "ZZ_ATTRIBUTE", "[I", .constantValue.asLong = 0, 0x1a, -1, 28, -1, -1 },
    { "ZZ_ATTRIBUTE_PACKED_0", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 29, -1, -1 },
    { "zzReader_", "LJavaIoReader;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "zzState_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "zzLexicalState_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "zzBuffer_", "[C", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "zzMarkedPos_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "zzCurrentPos_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "zzStartRead_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "zzEndRead_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "yyline_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "yychar_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "yycolumn_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "zzAtBOL_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "zzAtEOF_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "zzEOFDone_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "tokenFactory_", "LEduStanfordNlpProcessLexedTokenFactory;", .constantValue.asLong = 0, 0x2, -1, -1, 30, -1 },
    { "NEWLINE", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 31, -1, -1 },
  };
  static const void *ptrTable[] = { "zzUnpackAction", "LNSString;I[I", "zzUnpackRowMap", "zzUnpackTrans", "zzUnpackAttribute", "LJavaIoReader;LEduStanfordNlpProcessLexedTokenFactory;", "(Ljava/io/Reader;Ledu/stanford/nlp/process/LexedTokenFactory<*>;)V", "LJavaIoReader;", "LJavaIoInputStream;", "zzUnpackCMap", "LNSString;", "LJavaIoIOException;", "yyreset", "yybegin", "I", "yycharat", "zzScanError", "yypushback", &EduStanfordNlpProcessWhitespaceLexer_ZZ_LEXSTATE, &EduStanfordNlpProcessWhitespaceLexer_ZZ_CMAP_PACKED, &EduStanfordNlpProcessWhitespaceLexer_ZZ_CMAP, &EduStanfordNlpProcessWhitespaceLexer_ZZ_ACTION, &EduStanfordNlpProcessWhitespaceLexer_ZZ_ACTION_PACKED_0, &EduStanfordNlpProcessWhitespaceLexer_ZZ_ROWMAP, &EduStanfordNlpProcessWhitespaceLexer_ZZ_ROWMAP_PACKED_0, &EduStanfordNlpProcessWhitespaceLexer_ZZ_TRANS, &EduStanfordNlpProcessWhitespaceLexer_ZZ_TRANS_PACKED_0, &EduStanfordNlpProcessWhitespaceLexer_ZZ_ERROR_MSG, &EduStanfordNlpProcessWhitespaceLexer_ZZ_ATTRIBUTE, &EduStanfordNlpProcessWhitespaceLexer_ZZ_ATTRIBUTE_PACKED_0, "Ledu/stanford/nlp/process/LexedTokenFactory<*>;", &EduStanfordNlpProcessWhitespaceLexer_NEWLINE };
  static const J2ObjcClassInfo _EduStanfordNlpProcessWhitespaceLexer = { "WhitespaceLexer", "edu.stanford.nlp.process", ptrTable, methods, fields, 7, 0x0, 23, 34, -1, -1, -1, -1, -1 };
  return &_EduStanfordNlpProcessWhitespaceLexer;
}

+ (void)initialize {
  if (self == [EduStanfordNlpProcessWhitespaceLexer class]) {
    EduStanfordNlpProcessWhitespaceLexer_ZZ_LEXSTATE = [IOSIntArray newArrayWithInts:(jint[]){ 0, 0 } count:2];
    EduStanfordNlpProcessWhitespaceLexer_ZZ_CMAP = EduStanfordNlpProcessWhitespaceLexer_zzUnpackCMapWithNSString_(EduStanfordNlpProcessWhitespaceLexer_ZZ_CMAP_PACKED);
    EduStanfordNlpProcessWhitespaceLexer_ZZ_ACTION = EduStanfordNlpProcessWhitespaceLexer_zzUnpackAction();
    EduStanfordNlpProcessWhitespaceLexer_ZZ_ROWMAP = EduStanfordNlpProcessWhitespaceLexer_zzUnpackRowMap();
    EduStanfordNlpProcessWhitespaceLexer_ZZ_TRANS = EduStanfordNlpProcessWhitespaceLexer_zzUnpackTrans();
    EduStanfordNlpProcessWhitespaceLexer_ZZ_ERROR_MSG = [IOSObjectArray newArrayWithObjects:(id[]){ @"Unkown internal scanner error", @"Error: could not match input", @"Error: pushback value was too large" } count:3 type:NSString_class_()];
    EduStanfordNlpProcessWhitespaceLexer_ZZ_ATTRIBUTE = EduStanfordNlpProcessWhitespaceLexer_zzUnpackAttribute();
    J2OBJC_SET_INITIALIZED(EduStanfordNlpProcessWhitespaceLexer)
  }
}

@end

IOSIntArray *EduStanfordNlpProcessWhitespaceLexer_zzUnpackAction() {
  EduStanfordNlpProcessWhitespaceLexer_initialize();
  IOSIntArray *result = [IOSIntArray newArrayWithLength:5];
  jint offset = 0;
  offset = EduStanfordNlpProcessWhitespaceLexer_zzUnpackActionWithNSString_withInt_withIntArray_(EduStanfordNlpProcessWhitespaceLexer_ZZ_ACTION_PACKED_0, offset, result);
  return result;
}

jint EduStanfordNlpProcessWhitespaceLexer_zzUnpackActionWithNSString_withInt_withIntArray_(NSString *packed, jint offset, IOSIntArray *result) {
  EduStanfordNlpProcessWhitespaceLexer_initialize();
  jint i = 0;
  jint j = offset;
  jint l = ((jint) [((NSString *) nil_chk(packed)) length]);
  while (i < l) {
    jint count = [packed charAtWithInt:i++];
    jint value = [packed charAtWithInt:i++];
    do *IOSIntArray_GetRef(nil_chk(result), j++) = value;
    while (--count > 0);
  }
  return j;
}

IOSIntArray *EduStanfordNlpProcessWhitespaceLexer_zzUnpackRowMap() {
  EduStanfordNlpProcessWhitespaceLexer_initialize();
  IOSIntArray *result = [IOSIntArray newArrayWithLength:5];
  jint offset = 0;
  offset = EduStanfordNlpProcessWhitespaceLexer_zzUnpackRowMapWithNSString_withInt_withIntArray_(EduStanfordNlpProcessWhitespaceLexer_ZZ_ROWMAP_PACKED_0, offset, result);
  return result;
}

jint EduStanfordNlpProcessWhitespaceLexer_zzUnpackRowMapWithNSString_withInt_withIntArray_(NSString *packed, jint offset, IOSIntArray *result) {
  EduStanfordNlpProcessWhitespaceLexer_initialize();
  jint i = 0;
  jint j = offset;
  jint l = ((jint) [((NSString *) nil_chk(packed)) length]);
  while (i < l) {
    jint high = JreLShift32([packed charAtWithInt:i++], 16);
    *IOSIntArray_GetRef(nil_chk(result), j++) = high | [packed charAtWithInt:i++];
  }
  return j;
}

IOSIntArray *EduStanfordNlpProcessWhitespaceLexer_zzUnpackTrans() {
  EduStanfordNlpProcessWhitespaceLexer_initialize();
  IOSIntArray *result = [IOSIntArray newArrayWithLength:25];
  jint offset = 0;
  offset = EduStanfordNlpProcessWhitespaceLexer_zzUnpackTransWithNSString_withInt_withIntArray_(EduStanfordNlpProcessWhitespaceLexer_ZZ_TRANS_PACKED_0, offset, result);
  return result;
}

jint EduStanfordNlpProcessWhitespaceLexer_zzUnpackTransWithNSString_withInt_withIntArray_(NSString *packed, jint offset, IOSIntArray *result) {
  EduStanfordNlpProcessWhitespaceLexer_initialize();
  jint i = 0;
  jint j = offset;
  jint l = ((jint) [((NSString *) nil_chk(packed)) length]);
  while (i < l) {
    jint count = [packed charAtWithInt:i++];
    jint value = [packed charAtWithInt:i++];
    value--;
    do *IOSIntArray_GetRef(nil_chk(result), j++) = value;
    while (--count > 0);
  }
  return j;
}

IOSIntArray *EduStanfordNlpProcessWhitespaceLexer_zzUnpackAttribute() {
  EduStanfordNlpProcessWhitespaceLexer_initialize();
  IOSIntArray *result = [IOSIntArray newArrayWithLength:5];
  jint offset = 0;
  offset = EduStanfordNlpProcessWhitespaceLexer_zzUnpackAttributeWithNSString_withInt_withIntArray_(EduStanfordNlpProcessWhitespaceLexer_ZZ_ATTRIBUTE_PACKED_0, offset, result);
  return result;
}

jint EduStanfordNlpProcessWhitespaceLexer_zzUnpackAttributeWithNSString_withInt_withIntArray_(NSString *packed, jint offset, IOSIntArray *result) {
  EduStanfordNlpProcessWhitespaceLexer_initialize();
  jint i = 0;
  jint j = offset;
  jint l = ((jint) [((NSString *) nil_chk(packed)) length]);
  while (i < l) {
    jint count = [packed charAtWithInt:i++];
    jint value = [packed charAtWithInt:i++];
    do *IOSIntArray_GetRef(nil_chk(result), j++) = value;
    while (--count > 0);
  }
  return j;
}

void EduStanfordNlpProcessWhitespaceLexer_initWithJavaIoReader_withEduStanfordNlpProcessLexedTokenFactory_(EduStanfordNlpProcessWhitespaceLexer *self, JavaIoReader *r, id<EduStanfordNlpProcessLexedTokenFactory> tf) {
  EduStanfordNlpProcessWhitespaceLexer_initWithJavaIoReader_(self, r);
  self->tokenFactory_ = tf;
}

EduStanfordNlpProcessWhitespaceLexer *new_EduStanfordNlpProcessWhitespaceLexer_initWithJavaIoReader_withEduStanfordNlpProcessLexedTokenFactory_(JavaIoReader *r, id<EduStanfordNlpProcessLexedTokenFactory> tf) {
  J2OBJC_NEW_IMPL(EduStanfordNlpProcessWhitespaceLexer, initWithJavaIoReader_withEduStanfordNlpProcessLexedTokenFactory_, r, tf)
}

EduStanfordNlpProcessWhitespaceLexer *create_EduStanfordNlpProcessWhitespaceLexer_initWithJavaIoReader_withEduStanfordNlpProcessLexedTokenFactory_(JavaIoReader *r, id<EduStanfordNlpProcessLexedTokenFactory> tf) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpProcessWhitespaceLexer, initWithJavaIoReader_withEduStanfordNlpProcessLexedTokenFactory_, r, tf)
}

void EduStanfordNlpProcessWhitespaceLexer_initWithJavaIoReader_(EduStanfordNlpProcessWhitespaceLexer *self, JavaIoReader *inArg) {
  NSObject_init(self);
  self->zzLexicalState_ = EduStanfordNlpProcessWhitespaceLexer_YYINITIAL;
  self->zzBuffer_ = [IOSCharArray newArrayWithLength:EduStanfordNlpProcessWhitespaceLexer_ZZ_BUFFERSIZE];
  self->zzAtBOL_ = true;
  self->zzReader_ = inArg;
}

EduStanfordNlpProcessWhitespaceLexer *new_EduStanfordNlpProcessWhitespaceLexer_initWithJavaIoReader_(JavaIoReader *inArg) {
  J2OBJC_NEW_IMPL(EduStanfordNlpProcessWhitespaceLexer, initWithJavaIoReader_, inArg)
}

EduStanfordNlpProcessWhitespaceLexer *create_EduStanfordNlpProcessWhitespaceLexer_initWithJavaIoReader_(JavaIoReader *inArg) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpProcessWhitespaceLexer, initWithJavaIoReader_, inArg)
}

void EduStanfordNlpProcessWhitespaceLexer_initWithJavaIoInputStream_(EduStanfordNlpProcessWhitespaceLexer *self, JavaIoInputStream *inArg) {
  EduStanfordNlpProcessWhitespaceLexer_initWithJavaIoReader_(self, new_JavaIoInputStreamReader_initWithJavaIoInputStream_withJavaNioCharsetCharset_(inArg, JavaNioCharsetCharset_forNameWithNSString_(@"UTF-8")));
}

EduStanfordNlpProcessWhitespaceLexer *new_EduStanfordNlpProcessWhitespaceLexer_initWithJavaIoInputStream_(JavaIoInputStream *inArg) {
  J2OBJC_NEW_IMPL(EduStanfordNlpProcessWhitespaceLexer, initWithJavaIoInputStream_, inArg)
}

EduStanfordNlpProcessWhitespaceLexer *create_EduStanfordNlpProcessWhitespaceLexer_initWithJavaIoInputStream_(JavaIoInputStream *inArg) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpProcessWhitespaceLexer, initWithJavaIoInputStream_, inArg)
}

IOSCharArray *EduStanfordNlpProcessWhitespaceLexer_zzUnpackCMapWithNSString_(NSString *packed) {
  EduStanfordNlpProcessWhitespaceLexer_initialize();
  IOSCharArray *map = [IOSCharArray newArrayWithLength:(jint) 0x10000];
  jint i = 0;
  jint j = 0;
  while (i < 54) {
    jint count = [((NSString *) nil_chk(packed)) charAtWithInt:i++];
    jchar value = [packed charAtWithInt:i++];
    do *IOSCharArray_GetRef(map, j++) = value;
    while (--count > 0);
  }
  return map;
}

jboolean EduStanfordNlpProcessWhitespaceLexer_zzRefill(EduStanfordNlpProcessWhitespaceLexer *self) {
  if (self->zzStartRead_ > 0) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->zzBuffer_, self->zzStartRead_, self->zzBuffer_, 0, self->zzEndRead_ - self->zzStartRead_);
    self->zzEndRead_ -= self->zzStartRead_;
    self->zzCurrentPos_ -= self->zzStartRead_;
    self->zzMarkedPos_ -= self->zzStartRead_;
    self->zzStartRead_ = 0;
  }
  if (self->zzCurrentPos_ >= ((IOSCharArray *) nil_chk(self->zzBuffer_))->size_) {
    IOSCharArray *newBuffer = [IOSCharArray newArrayWithLength:self->zzCurrentPos_ * 2];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->zzBuffer_, 0, newBuffer, 0, self->zzBuffer_->size_);
    self->zzBuffer_ = newBuffer;
  }
  jint numRead = [((JavaIoReader *) nil_chk(self->zzReader_)) readWithCharArray:self->zzBuffer_ withInt:self->zzEndRead_ withInt:self->zzBuffer_->size_ - self->zzEndRead_];
  if (numRead > 0) {
    self->zzEndRead_ += numRead;
    return false;
  }
  if (numRead == 0) {
    jint c = [((JavaIoReader *) nil_chk(self->zzReader_)) read];
    if (c == -1) {
      return true;
    }
    else {
      *IOSCharArray_GetRef(nil_chk(self->zzBuffer_), self->zzEndRead_++) = (jchar) c;
      return false;
    }
  }
  return true;
}

NSString *EduStanfordNlpProcessWhitespaceLexer_yytext(EduStanfordNlpProcessWhitespaceLexer *self) {
  return [NSString stringWithCharacters:self->zzBuffer_ offset:self->zzStartRead_ length:self->zzMarkedPos_ - self->zzStartRead_];
}

jint EduStanfordNlpProcessWhitespaceLexer_yylength(EduStanfordNlpProcessWhitespaceLexer *self) {
  return self->zzMarkedPos_ - self->zzStartRead_;
}

void EduStanfordNlpProcessWhitespaceLexer_zzScanErrorWithInt_(EduStanfordNlpProcessWhitespaceLexer *self, jint errorCode) {
  NSString *message;
  @try {
    message = IOSObjectArray_Get(nil_chk(EduStanfordNlpProcessWhitespaceLexer_ZZ_ERROR_MSG), errorCode);
  }
  @catch (JavaLangArrayIndexOutOfBoundsException *e) {
    message = IOSObjectArray_Get(EduStanfordNlpProcessWhitespaceLexer_ZZ_ERROR_MSG, EduStanfordNlpProcessWhitespaceLexer_ZZ_UNKNOWN_ERROR);
  }
  @throw new_JavaLangError_initWithNSString_(message);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpProcessWhitespaceLexer)
