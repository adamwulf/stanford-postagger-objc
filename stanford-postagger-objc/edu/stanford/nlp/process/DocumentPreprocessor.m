//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/process/DocumentPreprocessor.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/io/IOUtils.h"
#include "edu/stanford/nlp/io/RuntimeIOException.h"
#include "edu/stanford/nlp/ling/CoreAnnotations.h"
#include "edu/stanford/nlp/ling/CoreLabel.h"
#include "edu/stanford/nlp/ling/HasTag.h"
#include "edu/stanford/nlp/ling/HasWord.h"
#include "edu/stanford/nlp/ling/Label.h"
#include "edu/stanford/nlp/objectbank/XMLBeginEndIterator.h"
#include "edu/stanford/nlp/process/CoreLabelTokenFactory.h"
#include "edu/stanford/nlp/process/DocumentPreprocessor.h"
#include "edu/stanford/nlp/process/PTBLexer.h"
#include "edu/stanford/nlp/process/PTBTokenizer.h"
#include "edu/stanford/nlp/process/Tokenizer.h"
#include "edu/stanford/nlp/process/TokenizerFactory.h"
#include "edu/stanford/nlp/process/WhitespaceLexer.h"
#include "edu/stanford/nlp/process/WhitespaceTokenizer.h"
#include "edu/stanford/nlp/util/Generics.h"
#include "edu/stanford/nlp/util/PropertiesUtils.h"
#include "edu/stanford/nlp/util/StringUtils.h"
#include "java/io/BufferedReader.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/InputStreamReader.h"
#include "java/io/OutputStreamWriter.h"
#include "java/io/PrintStream.h"
#include "java/io/PrintWriter.h"
#include "java/io/Reader.h"
#include "java/io/StringReader.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Iterable.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/NoSuchElementException.h"
#include "java/util/Properties.h"
#include "java/util/Set.h"
#include "java/util/Spliterator.h"
#include "java/util/function/Consumer.h"
#include "java/util/function/Function.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"

@interface EduStanfordNlpProcessDocumentPreprocessor () {
 @public
  JavaIoReader *inputReader_;
  EduStanfordNlpProcessDocumentPreprocessor_DocType *docType_;
  id<EduStanfordNlpProcessTokenizerFactory> tokenizerFactory_;
  IOSObjectArray *sentenceFinalPuncWords_;
  id<JavaUtilFunctionFunction> escaper_;
  NSString *sentenceDelimiter_;
  NSString *tagDelimiter_;
  NSString *elementDelimiter_;
  IOSObjectArray *sentenceFinalFollowers_;
  jboolean keepEmptySentences_;
}

+ (NSString *)usage;

+ (id<JavaUtilMap>)argOptionDefs;

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpProcessDocumentPreprocessor, inputReader_, JavaIoReader *)
J2OBJC_FIELD_SETTER(EduStanfordNlpProcessDocumentPreprocessor, docType_, EduStanfordNlpProcessDocumentPreprocessor_DocType *)
J2OBJC_FIELD_SETTER(EduStanfordNlpProcessDocumentPreprocessor, tokenizerFactory_, id<EduStanfordNlpProcessTokenizerFactory>)
J2OBJC_FIELD_SETTER(EduStanfordNlpProcessDocumentPreprocessor, sentenceFinalPuncWords_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(EduStanfordNlpProcessDocumentPreprocessor, escaper_, id<JavaUtilFunctionFunction>)
J2OBJC_FIELD_SETTER(EduStanfordNlpProcessDocumentPreprocessor, sentenceDelimiter_, NSString *)
J2OBJC_FIELD_SETTER(EduStanfordNlpProcessDocumentPreprocessor, tagDelimiter_, NSString *)
J2OBJC_FIELD_SETTER(EduStanfordNlpProcessDocumentPreprocessor, elementDelimiter_, NSString *)
J2OBJC_FIELD_SETTER(EduStanfordNlpProcessDocumentPreprocessor, sentenceFinalFollowers_, IOSObjectArray *)

inline JavaUtilRegexPattern *EduStanfordNlpProcessDocumentPreprocessor_get_wsPattern();
static JavaUtilRegexPattern *EduStanfordNlpProcessDocumentPreprocessor_wsPattern;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpProcessDocumentPreprocessor, wsPattern, JavaUtilRegexPattern *)

__attribute__((unused)) static NSString *EduStanfordNlpProcessDocumentPreprocessor_usage();

__attribute__((unused)) static id<JavaUtilMap> EduStanfordNlpProcessDocumentPreprocessor_argOptionDefs();

__attribute__((unused)) static void EduStanfordNlpProcessDocumentPreprocessor_DocType_initWithNSString_withInt_(EduStanfordNlpProcessDocumentPreprocessor_DocType *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static EduStanfordNlpProcessDocumentPreprocessor_DocType *new_EduStanfordNlpProcessDocumentPreprocessor_DocType_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

@interface EduStanfordNlpProcessDocumentPreprocessor_PlainTextIterator : NSObject < JavaUtilIterator > {
 @public
  EduStanfordNlpProcessDocumentPreprocessor *this$0_;
  id<EduStanfordNlpProcessTokenizer> tokenizer_;
  id<JavaUtilSet> sentDelims_;
  id<JavaUtilSet> delimFollowers_;
  id<JavaUtilFunctionFunction> splitTag_;
  id<JavaUtilList> nextSent_;
  id<JavaUtilList> nextSentCarryover_;
}

- (instancetype)initWithEduStanfordNlpProcessDocumentPreprocessor:(EduStanfordNlpProcessDocumentPreprocessor *)outer$;

- (void)primeNext;

- (jboolean)hasNext;

- (id<JavaUtilList>)next;

- (void)remove;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpProcessDocumentPreprocessor_PlainTextIterator)

J2OBJC_FIELD_SETTER(EduStanfordNlpProcessDocumentPreprocessor_PlainTextIterator, this$0_, EduStanfordNlpProcessDocumentPreprocessor *)
J2OBJC_FIELD_SETTER(EduStanfordNlpProcessDocumentPreprocessor_PlainTextIterator, tokenizer_, id<EduStanfordNlpProcessTokenizer>)
J2OBJC_FIELD_SETTER(EduStanfordNlpProcessDocumentPreprocessor_PlainTextIterator, sentDelims_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(EduStanfordNlpProcessDocumentPreprocessor_PlainTextIterator, delimFollowers_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(EduStanfordNlpProcessDocumentPreprocessor_PlainTextIterator, splitTag_, id<JavaUtilFunctionFunction>)
J2OBJC_FIELD_SETTER(EduStanfordNlpProcessDocumentPreprocessor_PlainTextIterator, nextSent_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(EduStanfordNlpProcessDocumentPreprocessor_PlainTextIterator, nextSentCarryover_, id<JavaUtilList>)

__attribute__((unused)) static void EduStanfordNlpProcessDocumentPreprocessor_PlainTextIterator_initWithEduStanfordNlpProcessDocumentPreprocessor_(EduStanfordNlpProcessDocumentPreprocessor_PlainTextIterator *self, EduStanfordNlpProcessDocumentPreprocessor *outer$);

__attribute__((unused)) static EduStanfordNlpProcessDocumentPreprocessor_PlainTextIterator *new_EduStanfordNlpProcessDocumentPreprocessor_PlainTextIterator_initWithEduStanfordNlpProcessDocumentPreprocessor_(EduStanfordNlpProcessDocumentPreprocessor *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpProcessDocumentPreprocessor_PlainTextIterator *create_EduStanfordNlpProcessDocumentPreprocessor_PlainTextIterator_initWithEduStanfordNlpProcessDocumentPreprocessor_(EduStanfordNlpProcessDocumentPreprocessor *outer$);

__attribute__((unused)) static void EduStanfordNlpProcessDocumentPreprocessor_PlainTextIterator_primeNext(EduStanfordNlpProcessDocumentPreprocessor_PlainTextIterator *self);

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpProcessDocumentPreprocessor_PlainTextIterator)

@interface EduStanfordNlpProcessDocumentPreprocessor_PlainTextIterator_$1 : NSObject < JavaUtilFunctionFunction > {
 @public
  NSString *splitRegex_;
}

- (IOSObjectArray *)applyWithId:(NSString *)inArg;

- (instancetype)initWithEduStanfordNlpProcessDocumentPreprocessor_PlainTextIterator:(EduStanfordNlpProcessDocumentPreprocessor_PlainTextIterator *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpProcessDocumentPreprocessor_PlainTextIterator_$1)

J2OBJC_FIELD_SETTER(EduStanfordNlpProcessDocumentPreprocessor_PlainTextIterator_$1, splitRegex_, NSString *)

__attribute__((unused)) static void EduStanfordNlpProcessDocumentPreprocessor_PlainTextIterator_$1_initWithEduStanfordNlpProcessDocumentPreprocessor_PlainTextIterator_(EduStanfordNlpProcessDocumentPreprocessor_PlainTextIterator_$1 *self, EduStanfordNlpProcessDocumentPreprocessor_PlainTextIterator *outer$);

__attribute__((unused)) static EduStanfordNlpProcessDocumentPreprocessor_PlainTextIterator_$1 *new_EduStanfordNlpProcessDocumentPreprocessor_PlainTextIterator_$1_initWithEduStanfordNlpProcessDocumentPreprocessor_PlainTextIterator_(EduStanfordNlpProcessDocumentPreprocessor_PlainTextIterator *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpProcessDocumentPreprocessor_PlainTextIterator_$1 *create_EduStanfordNlpProcessDocumentPreprocessor_PlainTextIterator_$1_initWithEduStanfordNlpProcessDocumentPreprocessor_PlainTextIterator_(EduStanfordNlpProcessDocumentPreprocessor_PlainTextIterator *outer$);

@interface EduStanfordNlpProcessDocumentPreprocessor_XMLIterator : NSObject < JavaUtilIterator > {
 @public
  EduStanfordNlpProcessDocumentPreprocessor *this$0_;
  EduStanfordNlpObjectbankXMLBeginEndIterator *xmlItr_;
  JavaIoReader *originalDocReader_;
  EduStanfordNlpProcessDocumentPreprocessor_PlainTextIterator *plainItr_;
  id<JavaUtilList> nextSent_;
}

- (instancetype)initWithEduStanfordNlpProcessDocumentPreprocessor:(EduStanfordNlpProcessDocumentPreprocessor *)outer$;

- (void)primeNext;

- (jboolean)hasNext;

- (id<JavaUtilList>)next;

- (void)remove;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpProcessDocumentPreprocessor_XMLIterator)

J2OBJC_FIELD_SETTER(EduStanfordNlpProcessDocumentPreprocessor_XMLIterator, this$0_, EduStanfordNlpProcessDocumentPreprocessor *)
J2OBJC_FIELD_SETTER(EduStanfordNlpProcessDocumentPreprocessor_XMLIterator, xmlItr_, EduStanfordNlpObjectbankXMLBeginEndIterator *)
J2OBJC_FIELD_SETTER(EduStanfordNlpProcessDocumentPreprocessor_XMLIterator, originalDocReader_, JavaIoReader *)
J2OBJC_FIELD_SETTER(EduStanfordNlpProcessDocumentPreprocessor_XMLIterator, plainItr_, EduStanfordNlpProcessDocumentPreprocessor_PlainTextIterator *)
J2OBJC_FIELD_SETTER(EduStanfordNlpProcessDocumentPreprocessor_XMLIterator, nextSent_, id<JavaUtilList>)

__attribute__((unused)) static void EduStanfordNlpProcessDocumentPreprocessor_XMLIterator_initWithEduStanfordNlpProcessDocumentPreprocessor_(EduStanfordNlpProcessDocumentPreprocessor_XMLIterator *self, EduStanfordNlpProcessDocumentPreprocessor *outer$);

__attribute__((unused)) static EduStanfordNlpProcessDocumentPreprocessor_XMLIterator *new_EduStanfordNlpProcessDocumentPreprocessor_XMLIterator_initWithEduStanfordNlpProcessDocumentPreprocessor_(EduStanfordNlpProcessDocumentPreprocessor *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpProcessDocumentPreprocessor_XMLIterator *create_EduStanfordNlpProcessDocumentPreprocessor_XMLIterator_initWithEduStanfordNlpProcessDocumentPreprocessor_(EduStanfordNlpProcessDocumentPreprocessor *outer$);

__attribute__((unused)) static void EduStanfordNlpProcessDocumentPreprocessor_XMLIterator_primeNext(EduStanfordNlpProcessDocumentPreprocessor_XMLIterator *self);

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpProcessDocumentPreprocessor_XMLIterator)

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpProcessDocumentPreprocessor)

IOSObjectArray *EduStanfordNlpProcessDocumentPreprocessor_DEFAULT_SENTENCE_DELIMS;

@implementation EduStanfordNlpProcessDocumentPreprocessor

- (instancetype)initWithJavaIoReader:(JavaIoReader *)input {
  EduStanfordNlpProcessDocumentPreprocessor_initWithJavaIoReader_(self, input);
  return self;
}

- (instancetype)initWithJavaIoReader:(JavaIoReader *)input
withEduStanfordNlpProcessDocumentPreprocessor_DocType:(EduStanfordNlpProcessDocumentPreprocessor_DocType *)t {
  EduStanfordNlpProcessDocumentPreprocessor_initWithJavaIoReader_withEduStanfordNlpProcessDocumentPreprocessor_DocType_(self, input, t);
  return self;
}

- (instancetype)initWithNSString:(NSString *)docPath {
  EduStanfordNlpProcessDocumentPreprocessor_initWithNSString_(self, docPath);
  return self;
}

- (instancetype)initWithNSString:(NSString *)docPath
withEduStanfordNlpProcessDocumentPreprocessor_DocType:(EduStanfordNlpProcessDocumentPreprocessor_DocType *)t {
  EduStanfordNlpProcessDocumentPreprocessor_initWithNSString_withEduStanfordNlpProcessDocumentPreprocessor_DocType_(self, docPath, t);
  return self;
}

- (instancetype)initWithNSString:(NSString *)docPath
withEduStanfordNlpProcessDocumentPreprocessor_DocType:(EduStanfordNlpProcessDocumentPreprocessor_DocType *)t
                    withNSString:(NSString *)encoding {
  EduStanfordNlpProcessDocumentPreprocessor_initWithNSString_withEduStanfordNlpProcessDocumentPreprocessor_DocType_withNSString_(self, docPath, t, encoding);
  return self;
}

- (void)setKeepEmptySentencesWithBoolean:(jboolean)keepEmptySentences {
  self->keepEmptySentences_ = keepEmptySentences;
}

- (void)setSentenceFinalPuncWordsWithNSStringArray:(IOSObjectArray *)sentenceFinalPuncWords {
  self->sentenceFinalPuncWords_ = sentenceFinalPuncWords;
}

- (void)setTokenizerFactoryWithEduStanfordNlpProcessTokenizerFactory:(id<EduStanfordNlpProcessTokenizerFactory>)newTokenizerFactory {
  tokenizerFactory_ = newTokenizerFactory;
}

- (void)setEscaperWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)e {
  escaper_ = e;
}

- (void)setSentenceDelimiterWithNSString:(NSString *)s {
  sentenceDelimiter_ = s;
}

- (void)setTagDelimiterWithNSString:(NSString *)s {
  tagDelimiter_ = s;
}

- (void)setElementDelimiterWithNSString:(NSString *)s {
  elementDelimiter_ = s;
}

- (id<JavaUtilIterator>)iterator {
  if (docType_ == JreLoadEnum(EduStanfordNlpProcessDocumentPreprocessor_DocType, Plain)) {
    return new_EduStanfordNlpProcessDocumentPreprocessor_PlainTextIterator_initWithEduStanfordNlpProcessDocumentPreprocessor_(self);
  }
  else if (docType_ == JreLoadEnum(EduStanfordNlpProcessDocumentPreprocessor_DocType, XML)) {
    return new_EduStanfordNlpProcessDocumentPreprocessor_XMLIterator_initWithEduStanfordNlpProcessDocumentPreprocessor_(self);
  }
  else {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Someone didn't add a handler for a new docType.");
  }
}

+ (NSString *)usage {
  return EduStanfordNlpProcessDocumentPreprocessor_usage();
}

+ (id<JavaUtilMap>)argOptionDefs {
  return EduStanfordNlpProcessDocumentPreprocessor_argOptionDefs();
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  EduStanfordNlpProcessDocumentPreprocessor_mainWithNSStringArray_(args);
}

- (void)forEachWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaLangIterable_forEachWithJavaUtilFunctionConsumer_(self, arg0);
}

- (id<JavaUtilSpliterator>)spliterator {
  return JavaLangIterable_spliterator(self);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, 11, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, 14, -1, -1 },
    { NULL, "V", 0x1, 15, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 2, -1, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 18, -1, -1 },
    { NULL, "LNSString;", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0xa, -1, -1, -1, 19, -1, -1 },
    { NULL, "V", 0x9, 20, 8, 21, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaIoReader:);
  methods[1].selector = @selector(initWithJavaIoReader:withEduStanfordNlpProcessDocumentPreprocessor_DocType:);
  methods[2].selector = @selector(initWithNSString:);
  methods[3].selector = @selector(initWithNSString:withEduStanfordNlpProcessDocumentPreprocessor_DocType:);
  methods[4].selector = @selector(initWithNSString:withEduStanfordNlpProcessDocumentPreprocessor_DocType:withNSString:);
  methods[5].selector = @selector(setKeepEmptySentencesWithBoolean:);
  methods[6].selector = @selector(setSentenceFinalPuncWordsWithNSStringArray:);
  methods[7].selector = @selector(setTokenizerFactoryWithEduStanfordNlpProcessTokenizerFactory:);
  methods[8].selector = @selector(setEscaperWithJavaUtilFunctionFunction:);
  methods[9].selector = @selector(setSentenceDelimiterWithNSString:);
  methods[10].selector = @selector(setTagDelimiterWithNSString:);
  methods[11].selector = @selector(setElementDelimiterWithNSString:);
  methods[12].selector = @selector(iterator);
  methods[13].selector = @selector(usage);
  methods[14].selector = @selector(argOptionDefs);
  methods[15].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_SENTENCE_DELIMS", "[LNSString;", .constantValue.asLong = 0, 0x19, -1, 22, -1, -1 },
    { "inputReader_", "LJavaIoReader;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "docType_", "LEduStanfordNlpProcessDocumentPreprocessor_DocType;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "tokenizerFactory_", "LEduStanfordNlpProcessTokenizerFactory;", .constantValue.asLong = 0, 0x2, -1, -1, 23, -1 },
    { "sentenceFinalPuncWords_", "[LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "escaper_", "LJavaUtilFunctionFunction;", .constantValue.asLong = 0, 0x2, -1, -1, 24, -1 },
    { "sentenceDelimiter_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "tagDelimiter_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "elementDelimiter_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "wsPattern", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 25, -1, -1 },
    { "sentenceFinalFollowers_", "[LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "keepEmptySentences_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoReader;", "LJavaIoReader;LEduStanfordNlpProcessDocumentPreprocessor_DocType;", "LNSString;", "LNSString;LEduStanfordNlpProcessDocumentPreprocessor_DocType;", "LNSString;LEduStanfordNlpProcessDocumentPreprocessor_DocType;LNSString;", "setKeepEmptySentences", "Z", "setSentenceFinalPuncWords", "[LNSString;", "setTokenizerFactory", "LEduStanfordNlpProcessTokenizerFactory;", "(Ledu/stanford/nlp/process/TokenizerFactory<+Ledu/stanford/nlp/ling/HasWord;>;)V", "setEscaper", "LJavaUtilFunctionFunction;", "(Ljava/util/function/Function<Ljava/util/List<Ledu/stanford/nlp/ling/HasWord;>;Ljava/util/List<Ledu/stanford/nlp/ling/HasWord;>;>;)V", "setSentenceDelimiter", "setTagDelimiter", "setElementDelimiter", "()Ljava/util/Iterator<Ljava/util/List<Ledu/stanford/nlp/ling/HasWord;>;>;", "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "main", "LJavaIoIOException;", &EduStanfordNlpProcessDocumentPreprocessor_DEFAULT_SENTENCE_DELIMS, "Ledu/stanford/nlp/process/TokenizerFactory<+Ledu/stanford/nlp/ling/HasWord;>;", "Ljava/util/function/Function<Ljava/util/List<Ledu/stanford/nlp/ling/HasWord;>;Ljava/util/List<Ledu/stanford/nlp/ling/HasWord;>;>;", &EduStanfordNlpProcessDocumentPreprocessor_wsPattern, "LEduStanfordNlpProcessDocumentPreprocessor_DocType;LEduStanfordNlpProcessDocumentPreprocessor_PlainTextIterator;LEduStanfordNlpProcessDocumentPreprocessor_XMLIterator;", "Ljava/lang/Object;Ljava/lang/Iterable<Ljava/util/List<Ledu/stanford/nlp/ling/HasWord;>;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpProcessDocumentPreprocessor = { "DocumentPreprocessor", "edu.stanford.nlp.process", ptrTable, methods, fields, 7, 0x1, 16, 12, -1, 26, -1, 27, -1 };
  return &_EduStanfordNlpProcessDocumentPreprocessor;
}

+ (void)initialize {
  if (self == [EduStanfordNlpProcessDocumentPreprocessor class]) {
    EduStanfordNlpProcessDocumentPreprocessor_DEFAULT_SENTENCE_DELIMS = [IOSObjectArray newArrayWithObjects:(id[]){ @".", @"?", @"!", @"!!", @"!!!", @"??", @"?!", @"!?" } count:8 type:NSString_class_()];
    EduStanfordNlpProcessDocumentPreprocessor_wsPattern = JavaUtilRegexPattern_compileWithNSString_(@"\\s+");
    J2OBJC_SET_INITIALIZED(EduStanfordNlpProcessDocumentPreprocessor)
  }
}

@end

void EduStanfordNlpProcessDocumentPreprocessor_initWithJavaIoReader_(EduStanfordNlpProcessDocumentPreprocessor *self, JavaIoReader *input) {
  EduStanfordNlpProcessDocumentPreprocessor_initWithJavaIoReader_withEduStanfordNlpProcessDocumentPreprocessor_DocType_(self, input, JreLoadEnum(EduStanfordNlpProcessDocumentPreprocessor_DocType, Plain));
}

EduStanfordNlpProcessDocumentPreprocessor *new_EduStanfordNlpProcessDocumentPreprocessor_initWithJavaIoReader_(JavaIoReader *input) {
  J2OBJC_NEW_IMPL(EduStanfordNlpProcessDocumentPreprocessor, initWithJavaIoReader_, input)
}

EduStanfordNlpProcessDocumentPreprocessor *create_EduStanfordNlpProcessDocumentPreprocessor_initWithJavaIoReader_(JavaIoReader *input) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpProcessDocumentPreprocessor, initWithJavaIoReader_, input)
}

void EduStanfordNlpProcessDocumentPreprocessor_initWithJavaIoReader_withEduStanfordNlpProcessDocumentPreprocessor_DocType_(EduStanfordNlpProcessDocumentPreprocessor *self, JavaIoReader *input, EduStanfordNlpProcessDocumentPreprocessor_DocType *t) {
  NSObject_init(self);
  self->tokenizerFactory_ = EduStanfordNlpProcessPTBTokenizer_coreLabelFactory();
  self->sentenceFinalPuncWords_ = EduStanfordNlpProcessDocumentPreprocessor_DEFAULT_SENTENCE_DELIMS;
  self->elementDelimiter_ = @".*";
  self->sentenceFinalFollowers_ = [IOSObjectArray newArrayWithObjects:(id[]){ @")", @"]", @"\"", @"'", @"''", @"-RRB-", @"-RSB-", @"-RCB-" } count:8 type:NSString_class_()];
  if (input == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Cannot read from null object!");
  }
  self->docType_ = t;
  self->inputReader_ = input;
}

EduStanfordNlpProcessDocumentPreprocessor *new_EduStanfordNlpProcessDocumentPreprocessor_initWithJavaIoReader_withEduStanfordNlpProcessDocumentPreprocessor_DocType_(JavaIoReader *input, EduStanfordNlpProcessDocumentPreprocessor_DocType *t) {
  J2OBJC_NEW_IMPL(EduStanfordNlpProcessDocumentPreprocessor, initWithJavaIoReader_withEduStanfordNlpProcessDocumentPreprocessor_DocType_, input, t)
}

EduStanfordNlpProcessDocumentPreprocessor *create_EduStanfordNlpProcessDocumentPreprocessor_initWithJavaIoReader_withEduStanfordNlpProcessDocumentPreprocessor_DocType_(JavaIoReader *input, EduStanfordNlpProcessDocumentPreprocessor_DocType *t) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpProcessDocumentPreprocessor, initWithJavaIoReader_withEduStanfordNlpProcessDocumentPreprocessor_DocType_, input, t)
}

void EduStanfordNlpProcessDocumentPreprocessor_initWithNSString_(EduStanfordNlpProcessDocumentPreprocessor *self, NSString *docPath) {
  EduStanfordNlpProcessDocumentPreprocessor_initWithNSString_withEduStanfordNlpProcessDocumentPreprocessor_DocType_withNSString_(self, docPath, JreLoadEnum(EduStanfordNlpProcessDocumentPreprocessor_DocType, Plain), @"UTF-8");
}

EduStanfordNlpProcessDocumentPreprocessor *new_EduStanfordNlpProcessDocumentPreprocessor_initWithNSString_(NSString *docPath) {
  J2OBJC_NEW_IMPL(EduStanfordNlpProcessDocumentPreprocessor, initWithNSString_, docPath)
}

EduStanfordNlpProcessDocumentPreprocessor *create_EduStanfordNlpProcessDocumentPreprocessor_initWithNSString_(NSString *docPath) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpProcessDocumentPreprocessor, initWithNSString_, docPath)
}

void EduStanfordNlpProcessDocumentPreprocessor_initWithNSString_withEduStanfordNlpProcessDocumentPreprocessor_DocType_(EduStanfordNlpProcessDocumentPreprocessor *self, NSString *docPath, EduStanfordNlpProcessDocumentPreprocessor_DocType *t) {
  EduStanfordNlpProcessDocumentPreprocessor_initWithNSString_withEduStanfordNlpProcessDocumentPreprocessor_DocType_withNSString_(self, docPath, t, @"UTF-8");
}

EduStanfordNlpProcessDocumentPreprocessor *new_EduStanfordNlpProcessDocumentPreprocessor_initWithNSString_withEduStanfordNlpProcessDocumentPreprocessor_DocType_(NSString *docPath, EduStanfordNlpProcessDocumentPreprocessor_DocType *t) {
  J2OBJC_NEW_IMPL(EduStanfordNlpProcessDocumentPreprocessor, initWithNSString_withEduStanfordNlpProcessDocumentPreprocessor_DocType_, docPath, t)
}

EduStanfordNlpProcessDocumentPreprocessor *create_EduStanfordNlpProcessDocumentPreprocessor_initWithNSString_withEduStanfordNlpProcessDocumentPreprocessor_DocType_(NSString *docPath, EduStanfordNlpProcessDocumentPreprocessor_DocType *t) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpProcessDocumentPreprocessor, initWithNSString_withEduStanfordNlpProcessDocumentPreprocessor_DocType_, docPath, t)
}

void EduStanfordNlpProcessDocumentPreprocessor_initWithNSString_withEduStanfordNlpProcessDocumentPreprocessor_DocType_withNSString_(EduStanfordNlpProcessDocumentPreprocessor *self, NSString *docPath, EduStanfordNlpProcessDocumentPreprocessor_DocType *t, NSString *encoding) {
  NSObject_init(self);
  self->tokenizerFactory_ = EduStanfordNlpProcessPTBTokenizer_coreLabelFactory();
  self->sentenceFinalPuncWords_ = EduStanfordNlpProcessDocumentPreprocessor_DEFAULT_SENTENCE_DELIMS;
  self->elementDelimiter_ = @".*";
  self->sentenceFinalFollowers_ = [IOSObjectArray newArrayWithObjects:(id[]){ @")", @"]", @"\"", @"'", @"''", @"-RRB-", @"-RSB-", @"-RCB-" } count:8 type:NSString_class_()];
  if (docPath == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Cannot open null document path!");
  }
  self->docType_ = t;
  @try {
    self->inputReader_ = EduStanfordNlpIoIOUtils_readerFromStringWithNSString_withNSString_(docPath, encoding);
  }
  @catch (JavaIoIOException *ioe) {
    @throw new_EduStanfordNlpIoRuntimeIOException_initWithNSString_withNSException_(NSString_formatWithNSString_withNSObjectArray_(@"%s: Could not open path %s", [IOSObjectArray newArrayWithObjects:(id[]){ [[self getClass] getName], docPath } count:2 type:NSObject_class_()]), ioe);
  }
}

EduStanfordNlpProcessDocumentPreprocessor *new_EduStanfordNlpProcessDocumentPreprocessor_initWithNSString_withEduStanfordNlpProcessDocumentPreprocessor_DocType_withNSString_(NSString *docPath, EduStanfordNlpProcessDocumentPreprocessor_DocType *t, NSString *encoding) {
  J2OBJC_NEW_IMPL(EduStanfordNlpProcessDocumentPreprocessor, initWithNSString_withEduStanfordNlpProcessDocumentPreprocessor_DocType_withNSString_, docPath, t, encoding)
}

EduStanfordNlpProcessDocumentPreprocessor *create_EduStanfordNlpProcessDocumentPreprocessor_initWithNSString_withEduStanfordNlpProcessDocumentPreprocessor_DocType_withNSString_(NSString *docPath, EduStanfordNlpProcessDocumentPreprocessor_DocType *t, NSString *encoding) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpProcessDocumentPreprocessor, initWithNSString_withEduStanfordNlpProcessDocumentPreprocessor_DocType_withNSString_, docPath, t, encoding)
}

NSString *EduStanfordNlpProcessDocumentPreprocessor_usage() {
  EduStanfordNlpProcessDocumentPreprocessor_initialize();
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  NSString *nl = JavaLangSystem_lineSeparator();
  (void) [sb appendWithNSString:NSString_formatWithNSString_withNSObjectArray_(@"Usage: java %s [OPTIONS] [file] [< file]%n%n", [IOSObjectArray newArrayWithObjects:(id[]){ [EduStanfordNlpProcessDocumentPreprocessor_class_() getName] } count:1 type:NSObject_class_()])];
  (void) [((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"Options:"])) appendWithNSString:nl];
  (void) [((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"-xml delim              : XML input with associated delimiter."])) appendWithNSString:nl];
  (void) [((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"-encoding type          : Input encoding (default: UTF-8)."])) appendWithNSString:nl];
  (void) [((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"-printSentenceLengths   : "])) appendWithNSString:nl];
  (void) [((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"-noTokenization         : Split on newline delimiters only."])) appendWithNSString:nl];
  (void) [((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"-printOriginalText      : Print the original, not normalized form of tokens."])) appendWithNSString:nl];
  (void) [((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"-suppressEscaping       : Suppress PTB escaping."])) appendWithNSString:nl];
  (void) [((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"-tokenizerOptions opts  : Specify custom tokenizer options."])) appendWithNSString:nl];
  (void) [((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"-tag delim              : Input tokens are tagged. Split tags."])) appendWithNSString:nl];
  (void) [((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"-whitespaceTokenization : Whitespace tokenization only."])) appendWithNSString:nl];
  return [sb description];
}

id<JavaUtilMap> EduStanfordNlpProcessDocumentPreprocessor_argOptionDefs() {
  EduStanfordNlpProcessDocumentPreprocessor_initialize();
  id<JavaUtilMap> argOptionDefs = EduStanfordNlpUtilGenerics_newHashMap();
  (void) [((id<JavaUtilMap>) nil_chk(argOptionDefs)) putWithId:@"help" withId:JavaLangInteger_valueOfWithInt_(0)];
  (void) [argOptionDefs putWithId:@"xml" withId:JavaLangInteger_valueOfWithInt_(1)];
  (void) [argOptionDefs putWithId:@"encoding" withId:JavaLangInteger_valueOfWithInt_(1)];
  (void) [argOptionDefs putWithId:@"printSentenceLengths" withId:JavaLangInteger_valueOfWithInt_(0)];
  (void) [argOptionDefs putWithId:@"noTokenization" withId:JavaLangInteger_valueOfWithInt_(0)];
  (void) [argOptionDefs putWithId:@"suppressEscaping" withId:JavaLangInteger_valueOfWithInt_(0)];
  (void) [argOptionDefs putWithId:@"tag" withId:JavaLangInteger_valueOfWithInt_(1)];
  (void) [argOptionDefs putWithId:@"tokenizerOptions" withId:JavaLangInteger_valueOfWithInt_(1)];
  (void) [argOptionDefs putWithId:@"whitespaceTokenization" withId:JavaLangInteger_valueOfWithInt_(0)];
  return argOptionDefs;
}

void EduStanfordNlpProcessDocumentPreprocessor_mainWithNSStringArray_(IOSObjectArray *args) {
  EduStanfordNlpProcessDocumentPreprocessor_initialize();
  JavaUtilProperties *options = EduStanfordNlpUtilStringUtils_argsToPropertiesWithNSStringArray_withJavaUtilMap_(args, EduStanfordNlpProcessDocumentPreprocessor_argOptionDefs());
  if ([((JavaUtilProperties *) nil_chk(options)) containsKeyWithId:@"help"]) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:EduStanfordNlpProcessDocumentPreprocessor_usage()];
    return;
  }
  NSString *encoding = [options getPropertyWithNSString:@"encoding" withNSString:@"utf-8"];
  jboolean printSentenceLengths = EduStanfordNlpUtilPropertiesUtils_getBoolWithJavaUtilProperties_withNSString_withBoolean_(options, @"printSentenceLengths", false);
  NSString *xmlElementDelimiter = [options getPropertyWithNSString:@"xml" withNSString:nil];
  EduStanfordNlpProcessDocumentPreprocessor_DocType *docType = xmlElementDelimiter == nil ? JreLoadEnum(EduStanfordNlpProcessDocumentPreprocessor_DocType, Plain) : JreLoadEnum(EduStanfordNlpProcessDocumentPreprocessor_DocType, XML);
  NSString *sentenceDelimiter = [options containsKeyWithId:@"noTokenization"] ? JavaLangSystem_getPropertyWithNSString_(@"line.separator") : nil;
  NSString *tagDelimiter = [options getPropertyWithNSString:@"tag" withNSString:nil];
  IOSObjectArray *sentenceDelims = nil;
  jint numFactoryFlags = 0;
  jboolean suppressEscaping = [options containsKeyWithId:@"suppressEscaping"];
  if (suppressEscaping) numFactoryFlags += 1;
  jboolean customTokenizer = [options containsKeyWithId:@"tokenizerOptions"];
  if (customTokenizer) numFactoryFlags += 1;
  jboolean printOriginalText = [options containsKeyWithId:@"printOriginalText"];
  if (printOriginalText) numFactoryFlags += 1;
  jboolean whitespaceTokenization = [options containsKeyWithId:@"whitespaceTokenization"];
  if (whitespaceTokenization) numFactoryFlags += 1;
  if (numFactoryFlags > 1) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"Only one tokenizer flag allowed at a time: "];
    [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:@"  -suppressEscaping, -tokenizerOptions, -printOriginalText, -whitespaceTokenization"];
    return;
  }
  id<EduStanfordNlpProcessTokenizerFactory> tf = nil;
  if (suppressEscaping) {
    tf = EduStanfordNlpProcessPTBTokenizer_factoryWithEduStanfordNlpProcessLexedTokenFactory_withNSString_(new_EduStanfordNlpProcessCoreLabelTokenFactory_init(), @"ptb3Escaping=false");
  }
  else if (customTokenizer) {
    tf = EduStanfordNlpProcessPTBTokenizer_factoryWithEduStanfordNlpProcessLexedTokenFactory_withNSString_(new_EduStanfordNlpProcessCoreLabelTokenFactory_init(), [options getPropertyWithNSString:@"tokenizerOptions"]);
  }
  else if (printOriginalText) {
    tf = EduStanfordNlpProcessPTBTokenizer_factoryWithEduStanfordNlpProcessLexedTokenFactory_withNSString_(new_EduStanfordNlpProcessCoreLabelTokenFactory_init(), @"invertible=true");
  }
  else if (whitespaceTokenization) {
    id<JavaUtilList> whitespaceDelims = new_JavaUtilArrayList_initWithJavaUtilCollection_(JavaUtilArrays_asListWithNSObjectArray_(EduStanfordNlpProcessDocumentPreprocessor_DEFAULT_SENTENCE_DELIMS));
    [whitespaceDelims addWithId:EduStanfordNlpProcessWhitespaceLexer_NEWLINE];
    sentenceDelims = [whitespaceDelims toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:[whitespaceDelims size] type:NSString_class_()]];
  }
  else {
    tf = EduStanfordNlpProcessPTBTokenizer_factoryWithEduStanfordNlpProcessLexedTokenFactory_withNSString_(new_EduStanfordNlpProcessCoreLabelTokenFactory_init(), @"");
  }
  NSString *fileList = [options getPropertyWithNSString:@"" withNSString:nil];
  IOSObjectArray *files = fileList == nil ? [IOSObjectArray newArrayWithLength:1 type:NSString_class_()] : [fileList split:@"\\s+"];
  jint numSents = 0;
  JavaIoPrintWriter *pw = new_JavaIoPrintWriter_initWithJavaIoWriter_withBoolean_(new_JavaIoOutputStreamWriter_initWithJavaIoOutputStream_withNSString_(JreLoadStatic(JavaLangSystem, out), encoding), true);
  {
    IOSObjectArray *a__ = files;
    NSString * const *b__ = a__->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *file = *b__++;
      EduStanfordNlpProcessDocumentPreprocessor *docPreprocessor;
      if (file == nil || [file isEmpty]) {
        docPreprocessor = new_EduStanfordNlpProcessDocumentPreprocessor_initWithJavaIoReader_(new_JavaIoInputStreamReader_initWithJavaIoInputStream_withNSString_(JreLoadStatic(JavaLangSystem, in), encoding));
      }
      else {
        docPreprocessor = new_EduStanfordNlpProcessDocumentPreprocessor_initWithNSString_withEduStanfordNlpProcessDocumentPreprocessor_DocType_withNSString_(file, docType, encoding);
      }
      if (docType == JreLoadEnum(EduStanfordNlpProcessDocumentPreprocessor_DocType, XML)) {
        [docPreprocessor setElementDelimiterWithNSString:xmlElementDelimiter];
      }
      [docPreprocessor setTokenizerFactoryWithEduStanfordNlpProcessTokenizerFactory:tf];
      if (sentenceDelimiter != nil) {
        [docPreprocessor setSentenceDelimiterWithNSString:sentenceDelimiter];
      }
      if (tagDelimiter != nil) {
        [docPreprocessor setTagDelimiterWithNSString:tagDelimiter];
      }
      if (sentenceDelims != nil) {
        [docPreprocessor setSentenceFinalPuncWordsWithNSStringArray:sentenceDelims];
      }
      for (id<JavaUtilList> __strong sentence in docPreprocessor) {
        numSents++;
        if (printSentenceLengths) {
          (void) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printfWithNSString:@"Length: %d%n" withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_([((id<JavaUtilList>) nil_chk(sentence)) size]) } count:1 type:NSObject_class_()]];
        }
        jboolean printSpace = false;
        for (id<EduStanfordNlpLingHasWord> __strong word in nil_chk(sentence)) {
          if (printOriginalText) {
            EduStanfordNlpLingCoreLabel *cl = (EduStanfordNlpLingCoreLabel *) cast_chk(word, [EduStanfordNlpLingCoreLabel class]);
            if (!printSpace) {
              [pw printWithNSString:[((EduStanfordNlpLingCoreLabel *) nil_chk(cl)) getWithIOSClass:EduStanfordNlpLingCoreAnnotations_BeforeAnnotation_class_()]];
              printSpace = true;
            }
            [pw printWithNSString:[((EduStanfordNlpLingCoreLabel *) nil_chk(cl)) getWithIOSClass:EduStanfordNlpLingCoreAnnotations_OriginalTextAnnotation_class_()]];
            [pw printWithNSString:[cl getWithIOSClass:EduStanfordNlpLingCoreAnnotations_AfterAnnotation_class_()]];
          }
          else {
            if (printSpace) [pw printWithNSString:@" "];
            printSpace = true;
            [pw printWithNSString:[((id<EduStanfordNlpLingHasWord>) nil_chk(word)) word]];
          }
        }
        [pw println];
      }
    }
  }
  [pw close];
  (void) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printfWithNSString:@"Read in %d sentences.%n" withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(numSents) } count:1 type:NSObject_class_()]];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpProcessDocumentPreprocessor)

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpProcessDocumentPreprocessor_DocType)

EduStanfordNlpProcessDocumentPreprocessor_DocType *EduStanfordNlpProcessDocumentPreprocessor_DocType_values_[2];

@implementation EduStanfordNlpProcessDocumentPreprocessor_DocType

+ (IOSObjectArray *)values {
  return EduStanfordNlpProcessDocumentPreprocessor_DocType_values();
}

+ (EduStanfordNlpProcessDocumentPreprocessor_DocType *)valueOfWithNSString:(NSString *)name {
  return EduStanfordNlpProcessDocumentPreprocessor_DocType_valueOfWithNSString_(name);
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LEduStanfordNlpProcessDocumentPreprocessor_DocType;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpProcessDocumentPreprocessor_DocType;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "Plain", "LEduStanfordNlpProcessDocumentPreprocessor_DocType;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "XML", "LEduStanfordNlpProcessDocumentPreprocessor_DocType;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(EduStanfordNlpProcessDocumentPreprocessor_DocType, Plain), &JreEnum(EduStanfordNlpProcessDocumentPreprocessor_DocType, XML), "LEduStanfordNlpProcessDocumentPreprocessor;", "Ljava/lang/Enum<Ledu/stanford/nlp/process/DocumentPreprocessor$DocType;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpProcessDocumentPreprocessor_DocType = { "DocType", "edu.stanford.nlp.process", ptrTable, methods, fields, 7, 0x4019, 2, 2, 4, -1, -1, 5, -1 };
  return &_EduStanfordNlpProcessDocumentPreprocessor_DocType;
}

+ (void)initialize {
  if (self == [EduStanfordNlpProcessDocumentPreprocessor_DocType class]) {
    JreEnum(EduStanfordNlpProcessDocumentPreprocessor_DocType, Plain) = new_EduStanfordNlpProcessDocumentPreprocessor_DocType_initWithNSString_withInt_(@"Plain", 0);
    JreEnum(EduStanfordNlpProcessDocumentPreprocessor_DocType, XML) = new_EduStanfordNlpProcessDocumentPreprocessor_DocType_initWithNSString_withInt_(@"XML", 1);
    J2OBJC_SET_INITIALIZED(EduStanfordNlpProcessDocumentPreprocessor_DocType)
  }
}

@end

void EduStanfordNlpProcessDocumentPreprocessor_DocType_initWithNSString_withInt_(EduStanfordNlpProcessDocumentPreprocessor_DocType *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

EduStanfordNlpProcessDocumentPreprocessor_DocType *new_EduStanfordNlpProcessDocumentPreprocessor_DocType_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  J2OBJC_NEW_IMPL(EduStanfordNlpProcessDocumentPreprocessor_DocType, initWithNSString_withInt_, __name, __ordinal)
}

IOSObjectArray *EduStanfordNlpProcessDocumentPreprocessor_DocType_values() {
  EduStanfordNlpProcessDocumentPreprocessor_DocType_initialize();
  return [IOSObjectArray arrayWithObjects:EduStanfordNlpProcessDocumentPreprocessor_DocType_values_ count:2 type:EduStanfordNlpProcessDocumentPreprocessor_DocType_class_()];
}

EduStanfordNlpProcessDocumentPreprocessor_DocType *EduStanfordNlpProcessDocumentPreprocessor_DocType_valueOfWithNSString_(NSString *name) {
  EduStanfordNlpProcessDocumentPreprocessor_DocType_initialize();
  for (int i = 0; i < 2; i++) {
    EduStanfordNlpProcessDocumentPreprocessor_DocType *e = EduStanfordNlpProcessDocumentPreprocessor_DocType_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

EduStanfordNlpProcessDocumentPreprocessor_DocType *EduStanfordNlpProcessDocumentPreprocessor_DocType_fromOrdinal(NSUInteger ordinal) {
  EduStanfordNlpProcessDocumentPreprocessor_DocType_initialize();
  if (ordinal >= 2) {
    return nil;
  }
  return EduStanfordNlpProcessDocumentPreprocessor_DocType_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpProcessDocumentPreprocessor_DocType)

@implementation EduStanfordNlpProcessDocumentPreprocessor_PlainTextIterator

- (instancetype)initWithEduStanfordNlpProcessDocumentPreprocessor:(EduStanfordNlpProcessDocumentPreprocessor *)outer$ {
  EduStanfordNlpProcessDocumentPreprocessor_PlainTextIterator_initWithEduStanfordNlpProcessDocumentPreprocessor_(self, outer$);
  return self;
}

- (void)primeNext {
  EduStanfordNlpProcessDocumentPreprocessor_PlainTextIterator_primeNext(self);
}

- (jboolean)hasNext {
  if (nextSent_ == nil) {
    EduStanfordNlpProcessDocumentPreprocessor_PlainTextIterator_primeNext(self);
  }
  return nextSent_ != nil;
}

- (id<JavaUtilList>)next {
  if (nextSent_ == nil) {
    EduStanfordNlpProcessDocumentPreprocessor_PlainTextIterator_primeNext(self);
  }
  if (nextSent_ == nil) {
    @throw new_JavaUtilNoSuchElementException_init();
  }
  id<JavaUtilList> thisIteration = nextSent_;
  nextSent_ = nil;
  return thisIteration;
}

- (void)remove {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaUtilIterator_forEachRemainingWithJavaUtilFunctionConsumer_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpProcessDocumentPreprocessor:);
  methods[1].selector = @selector(primeNext);
  methods[2].selector = @selector(hasNext);
  methods[3].selector = @selector(next);
  methods[4].selector = @selector(remove);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LEduStanfordNlpProcessDocumentPreprocessor;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "tokenizer_", "LEduStanfordNlpProcessTokenizer;", .constantValue.asLong = 0, 0x12, -1, -1, 2, -1 },
    { "sentDelims_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 3, -1 },
    { "delimFollowers_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 3, -1 },
    { "splitTag_", "LJavaUtilFunctionFunction;", .constantValue.asLong = 0, 0x12, -1, -1, 4, -1 },
    { "nextSent_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 5, -1 },
    { "nextSentCarryover_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpProcessDocumentPreprocessor;", "()Ljava/util/List<Ledu/stanford/nlp/ling/HasWord;>;", "Ledu/stanford/nlp/process/Tokenizer<+Ledu/stanford/nlp/ling/HasWord;>;", "Ljava/util/Set<Ljava/lang/String;>;", "Ljava/util/function/Function<Ljava/lang/String;[Ljava/lang/String;>;", "Ljava/util/List<Ledu/stanford/nlp/ling/HasWord;>;", "Ljava/lang/Object;Ljava/util/Iterator<Ljava/util/List<Ledu/stanford/nlp/ling/HasWord;>;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpProcessDocumentPreprocessor_PlainTextIterator = { "PlainTextIterator", "edu.stanford.nlp.process", ptrTable, methods, fields, 7, 0x2, 5, 7, 0, -1, -1, 6, -1 };
  return &_EduStanfordNlpProcessDocumentPreprocessor_PlainTextIterator;
}

@end

void EduStanfordNlpProcessDocumentPreprocessor_PlainTextIterator_initWithEduStanfordNlpProcessDocumentPreprocessor_(EduStanfordNlpProcessDocumentPreprocessor_PlainTextIterator *self, EduStanfordNlpProcessDocumentPreprocessor *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
  self->nextSentCarryover_ = EduStanfordNlpUtilGenerics_newArrayList();
  jboolean eolIsSignificant = false;
  self->sentDelims_ = EduStanfordNlpUtilGenerics_newHashSet();
  if (outer$->sentenceDelimiter_ == nil) {
    if (outer$->sentenceFinalPuncWords_ != nil) {
      [((id<JavaUtilSet>) nil_chk(self->sentDelims_)) addAllWithJavaUtilCollection:JavaUtilArrays_asListWithNSObjectArray_(outer$->sentenceFinalPuncWords_)];
    }
    self->delimFollowers_ = EduStanfordNlpUtilGenerics_newHashSetWithJavaUtilCollection_(JavaUtilArrays_asListWithNSObjectArray_(outer$->sentenceFinalFollowers_));
  }
  else {
    [((id<JavaUtilSet>) nil_chk(self->sentDelims_)) addWithId:outer$->sentenceDelimiter_];
    self->delimFollowers_ = EduStanfordNlpUtilGenerics_newHashSet();
    eolIsSignificant = [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(JreLoadStatic(EduStanfordNlpProcessDocumentPreprocessor, wsPattern))) matcherWithJavaLangCharSequence:outer$->sentenceDelimiter_])) matches];
    if (eolIsSignificant) {
      [self->sentDelims_ addWithId:EduStanfordNlpProcessPTBLexer_NEWLINE_TOKEN];
    }
  }
  if (outer$->tokenizerFactory_ == nil) {
    eolIsSignificant = [((id<JavaUtilSet>) nil_chk(self->sentDelims_)) containsWithId:EduStanfordNlpProcessWhitespaceLexer_NEWLINE];
    self->tokenizer_ = EduStanfordNlpProcessWhitespaceTokenizer_newWordWhitespaceTokenizerWithJavaIoReader_withBoolean_(outer$->inputReader_, eolIsSignificant);
  }
  else {
    if (eolIsSignificant) {
      self->tokenizer_ = [outer$->tokenizerFactory_ getTokenizerWithJavaIoReader:outer$->inputReader_ withNSString:@"tokenizeNLs"];
    }
    else {
      self->tokenizer_ = [outer$->tokenizerFactory_ getTokenizerWithJavaIoReader:outer$->inputReader_];
    }
  }
  if (outer$->tagDelimiter_ == nil) {
    self->splitTag_ = nil;
  }
  else {
    self->splitTag_ = new_EduStanfordNlpProcessDocumentPreprocessor_PlainTextIterator_$1_initWithEduStanfordNlpProcessDocumentPreprocessor_PlainTextIterator_(self);
  }
}

EduStanfordNlpProcessDocumentPreprocessor_PlainTextIterator *new_EduStanfordNlpProcessDocumentPreprocessor_PlainTextIterator_initWithEduStanfordNlpProcessDocumentPreprocessor_(EduStanfordNlpProcessDocumentPreprocessor *outer$) {
  J2OBJC_NEW_IMPL(EduStanfordNlpProcessDocumentPreprocessor_PlainTextIterator, initWithEduStanfordNlpProcessDocumentPreprocessor_, outer$)
}

EduStanfordNlpProcessDocumentPreprocessor_PlainTextIterator *create_EduStanfordNlpProcessDocumentPreprocessor_PlainTextIterator_initWithEduStanfordNlpProcessDocumentPreprocessor_(EduStanfordNlpProcessDocumentPreprocessor *outer$) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpProcessDocumentPreprocessor_PlainTextIterator, initWithEduStanfordNlpProcessDocumentPreprocessor_, outer$)
}

void EduStanfordNlpProcessDocumentPreprocessor_PlainTextIterator_primeNext(EduStanfordNlpProcessDocumentPreprocessor_PlainTextIterator *self) {
  if (self->this$0_->inputReader_ == nil) {
    return;
  }
  self->nextSent_ = EduStanfordNlpUtilGenerics_newArrayListWithJavaUtilCollection_(self->nextSentCarryover_);
  [((id<JavaUtilList>) nil_chk(self->nextSentCarryover_)) clear];
  jboolean seenBoundary = false;
  if (![((id<EduStanfordNlpProcessTokenizer>) nil_chk(self->tokenizer_)) hasNext]) {
    EduStanfordNlpIoIOUtils_closeIgnoringExceptionsWithJavaIoCloseable_(self->this$0_->inputReader_);
    self->this$0_->inputReader_ = nil;
    if ([((id<JavaUtilList>) nil_chk(self->nextSent_)) isEmpty]) {
      self->nextSent_ = nil;
    }
    return;
  }
  do {
    id<EduStanfordNlpLingHasWord> token = [self->tokenizer_ next];
    if (self->splitTag_ != nil) {
      IOSObjectArray *toks = [self->splitTag_ applyWithId:[((id<EduStanfordNlpLingHasWord>) nil_chk(token)) word]];
      [token setWordWithNSString:IOSObjectArray_Get(nil_chk(toks), 0)];
      if ([EduStanfordNlpLingLabel_class_() isInstance:token]) {
        [((id<EduStanfordNlpLingLabel>) cast_check(token, EduStanfordNlpLingLabel_class_())) setValueWithNSString:IOSObjectArray_Get(toks, 0)];
      }
      if (toks->size_ == 2 && [EduStanfordNlpLingHasTag_class_() isInstance:token]) {
        [((id<EduStanfordNlpLingHasTag>) cast_check(token, EduStanfordNlpLingHasTag_class_())) setTagWithNSString:IOSObjectArray_Get(toks, 1)];
      }
    }
    if ([((id<JavaUtilSet>) nil_chk(self->sentDelims_)) containsWithId:[((id<EduStanfordNlpLingHasWord>) nil_chk(token)) word]]) {
      seenBoundary = true;
    }
    else if (seenBoundary && ![((id<JavaUtilSet>) nil_chk(self->delimFollowers_)) containsWithId:[token word]]) {
      [self->nextSentCarryover_ addWithId:token];
      break;
    }
    if (!([((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(JreLoadStatic(EduStanfordNlpProcessDocumentPreprocessor, wsPattern))) matcherWithJavaLangCharSequence:[token word]])) matches] || [((NSString *) nil_chk([token word])) isEqual:EduStanfordNlpProcessPTBLexer_NEWLINE_TOKEN])) {
      [((id<JavaUtilList>) nil_chk(self->nextSent_)) addWithId:token];
    }
    if (seenBoundary && [((id<JavaUtilSet>) nil_chk(self->delimFollowers_)) isEmpty]) {
      if (![((id<JavaUtilList>) nil_chk(self->nextSent_)) isEmpty] || self->this$0_->keepEmptySentences_) {
        break;
      }
      else {
        seenBoundary = false;
      }
    }
  }
  while ([self->tokenizer_ hasNext]);
  if ([((id<JavaUtilList>) nil_chk(self->nextSent_)) isEmpty] && [self->nextSentCarryover_ isEmpty] && !self->this$0_->keepEmptySentences_) {
    EduStanfordNlpIoIOUtils_closeIgnoringExceptionsWithJavaIoCloseable_(self->this$0_->inputReader_);
    self->this$0_->inputReader_ = nil;
    self->nextSent_ = nil;
  }
  else if (self->this$0_->escaper_ != nil) {
    self->nextSent_ = [self->this$0_->escaper_ applyWithId:self->nextSent_];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpProcessDocumentPreprocessor_PlainTextIterator)

@implementation EduStanfordNlpProcessDocumentPreprocessor_PlainTextIterator_$1

- (IOSObjectArray *)applyWithId:(NSString *)inArg {
  IOSObjectArray *splits = [((NSString *) nil_chk([((NSString *) nil_chk(inArg)) trim])) split:splitRegex_];
  if (((IOSObjectArray *) nil_chk(splits))->size_ == 2) return splits;
  else {
    IOSObjectArray *oldStr = [IOSObjectArray newArrayWithObjects:(id[]){ inArg } count:1 type:NSString_class_()];
    return oldStr;
  }
}

- (instancetype)initWithEduStanfordNlpProcessDocumentPreprocessor_PlainTextIterator:(EduStanfordNlpProcessDocumentPreprocessor_PlainTextIterator *)outer$ {
  EduStanfordNlpProcessDocumentPreprocessor_PlainTextIterator_$1_initWithEduStanfordNlpProcessDocumentPreprocessor_PlainTextIterator_(self, outer$);
  return self;
}

- (id<JavaUtilFunctionFunction>)andThenWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_andThenWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilFunctionFunction>)composeWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_composeWithJavaUtilFunctionFunction_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(applyWithId:);
  methods[1].selector = @selector(initWithEduStanfordNlpProcessDocumentPreprocessor_PlainTextIterator:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "splitRegex_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "apply", "LNSString;", "LEduStanfordNlpProcessDocumentPreprocessor_PlainTextIterator;", "init", "Ljava/lang/Object;Ljava/util/function/Function<Ljava/lang/String;[Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpProcessDocumentPreprocessor_PlainTextIterator_$1 = { "", "edu.stanford.nlp.process", ptrTable, methods, fields, 7, 0x8008, 2, 1, 2, -1, 3, 4, -1 };
  return &_EduStanfordNlpProcessDocumentPreprocessor_PlainTextIterator_$1;
}

@end

void EduStanfordNlpProcessDocumentPreprocessor_PlainTextIterator_$1_initWithEduStanfordNlpProcessDocumentPreprocessor_PlainTextIterator_(EduStanfordNlpProcessDocumentPreprocessor_PlainTextIterator_$1 *self, EduStanfordNlpProcessDocumentPreprocessor_PlainTextIterator *outer$) {
  NSObject_init(self);
  self->splitRegex_ = NSString_formatWithNSString_withNSObjectArray_(@"%s(?!.*%s)", [IOSObjectArray newArrayWithObjects:(id[]){ outer$->this$0_->tagDelimiter_, outer$->this$0_->tagDelimiter_ } count:2 type:NSObject_class_()]);
}

EduStanfordNlpProcessDocumentPreprocessor_PlainTextIterator_$1 *new_EduStanfordNlpProcessDocumentPreprocessor_PlainTextIterator_$1_initWithEduStanfordNlpProcessDocumentPreprocessor_PlainTextIterator_(EduStanfordNlpProcessDocumentPreprocessor_PlainTextIterator *outer$) {
  J2OBJC_NEW_IMPL(EduStanfordNlpProcessDocumentPreprocessor_PlainTextIterator_$1, initWithEduStanfordNlpProcessDocumentPreprocessor_PlainTextIterator_, outer$)
}

EduStanfordNlpProcessDocumentPreprocessor_PlainTextIterator_$1 *create_EduStanfordNlpProcessDocumentPreprocessor_PlainTextIterator_$1_initWithEduStanfordNlpProcessDocumentPreprocessor_PlainTextIterator_(EduStanfordNlpProcessDocumentPreprocessor_PlainTextIterator *outer$) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpProcessDocumentPreprocessor_PlainTextIterator_$1, initWithEduStanfordNlpProcessDocumentPreprocessor_PlainTextIterator_, outer$)
}

@implementation EduStanfordNlpProcessDocumentPreprocessor_XMLIterator

- (instancetype)initWithEduStanfordNlpProcessDocumentPreprocessor:(EduStanfordNlpProcessDocumentPreprocessor *)outer$ {
  EduStanfordNlpProcessDocumentPreprocessor_XMLIterator_initWithEduStanfordNlpProcessDocumentPreprocessor_(self, outer$);
  return self;
}

- (void)primeNext {
  EduStanfordNlpProcessDocumentPreprocessor_XMLIterator_primeNext(self);
}

- (jboolean)hasNext {
  return nextSent_ != nil;
}

- (id<JavaUtilList>)next {
  if (nextSent_ == nil) {
    @throw new_JavaUtilNoSuchElementException_init();
  }
  id<JavaUtilList> thisSentence = nextSent_;
  EduStanfordNlpProcessDocumentPreprocessor_XMLIterator_primeNext(self);
  return thisSentence;
}

- (void)remove {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaUtilIterator_forEachRemainingWithJavaUtilFunctionConsumer_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpProcessDocumentPreprocessor:);
  methods[1].selector = @selector(primeNext);
  methods[2].selector = @selector(hasNext);
  methods[3].selector = @selector(next);
  methods[4].selector = @selector(remove);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LEduStanfordNlpProcessDocumentPreprocessor;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "xmlItr_", "LEduStanfordNlpObjectbankXMLBeginEndIterator;", .constantValue.asLong = 0, 0x12, -1, -1, 2, -1 },
    { "originalDocReader_", "LJavaIoReader;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "plainItr_", "LEduStanfordNlpProcessDocumentPreprocessor_PlainTextIterator;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "nextSent_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 3, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpProcessDocumentPreprocessor;", "()Ljava/util/List<Ledu/stanford/nlp/ling/HasWord;>;", "Ledu/stanford/nlp/objectbank/XMLBeginEndIterator<Ljava/lang/String;>;", "Ljava/util/List<Ledu/stanford/nlp/ling/HasWord;>;", "Ljava/lang/Object;Ljava/util/Iterator<Ljava/util/List<Ledu/stanford/nlp/ling/HasWord;>;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpProcessDocumentPreprocessor_XMLIterator = { "XMLIterator", "edu.stanford.nlp.process", ptrTable, methods, fields, 7, 0x2, 5, 5, 0, -1, -1, 4, -1 };
  return &_EduStanfordNlpProcessDocumentPreprocessor_XMLIterator;
}

@end

void EduStanfordNlpProcessDocumentPreprocessor_XMLIterator_initWithEduStanfordNlpProcessDocumentPreprocessor_(EduStanfordNlpProcessDocumentPreprocessor_XMLIterator *self, EduStanfordNlpProcessDocumentPreprocessor *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
  self->xmlItr_ = new_EduStanfordNlpObjectbankXMLBeginEndIterator_initWithJavaIoReader_withNSString_(outer$->inputReader_, outer$->elementDelimiter_);
  self->originalDocReader_ = outer$->inputReader_;
  EduStanfordNlpProcessDocumentPreprocessor_XMLIterator_primeNext(self);
}

EduStanfordNlpProcessDocumentPreprocessor_XMLIterator *new_EduStanfordNlpProcessDocumentPreprocessor_XMLIterator_initWithEduStanfordNlpProcessDocumentPreprocessor_(EduStanfordNlpProcessDocumentPreprocessor *outer$) {
  J2OBJC_NEW_IMPL(EduStanfordNlpProcessDocumentPreprocessor_XMLIterator, initWithEduStanfordNlpProcessDocumentPreprocessor_, outer$)
}

EduStanfordNlpProcessDocumentPreprocessor_XMLIterator *create_EduStanfordNlpProcessDocumentPreprocessor_XMLIterator_initWithEduStanfordNlpProcessDocumentPreprocessor_(EduStanfordNlpProcessDocumentPreprocessor *outer$) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpProcessDocumentPreprocessor_XMLIterator, initWithEduStanfordNlpProcessDocumentPreprocessor_, outer$)
}

void EduStanfordNlpProcessDocumentPreprocessor_XMLIterator_primeNext(EduStanfordNlpProcessDocumentPreprocessor_XMLIterator *self) {
  do {
    if (self->plainItr_ != nil && [self->plainItr_ hasNext]) {
      self->nextSent_ = [self->plainItr_ next];
    }
    else if ([((EduStanfordNlpObjectbankXMLBeginEndIterator *) nil_chk(self->xmlItr_)) hasNext]) {
      NSString *block = [self->xmlItr_ next];
      self->this$0_->inputReader_ = new_JavaIoBufferedReader_initWithJavaIoReader_(new_JavaIoStringReader_initWithNSString_(block));
      self->plainItr_ = new_EduStanfordNlpProcessDocumentPreprocessor_PlainTextIterator_initWithEduStanfordNlpProcessDocumentPreprocessor_(self->this$0_);
      if ([self->plainItr_ hasNext]) {
        self->nextSent_ = [((EduStanfordNlpProcessDocumentPreprocessor_PlainTextIterator *) nil_chk(self->plainItr_)) next];
      }
      else {
        self->nextSent_ = nil;
      }
    }
    else {
      EduStanfordNlpIoIOUtils_closeIgnoringExceptionsWithJavaIoCloseable_(self->originalDocReader_);
      self->nextSent_ = nil;
      break;
    }
  }
  while (self->nextSent_ == nil);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpProcessDocumentPreprocessor_XMLIterator)
