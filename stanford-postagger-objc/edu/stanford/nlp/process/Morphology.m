//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/process/Morphology.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/io/IOUtils.h"
#include "edu/stanford/nlp/ling/CoreAnnotations.h"
#include "edu/stanford/nlp/ling/CoreLabel.h"
#include "edu/stanford/nlp/ling/Word.h"
#include "edu/stanford/nlp/ling/WordLemmaTag.h"
#include "edu/stanford/nlp/ling/WordTag.h"
#include "edu/stanford/nlp/process/Morpha.h"
#include "edu/stanford/nlp/process/Morphology.h"
#include "java/io/FileReader.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/PrintStream.h"
#include "java/io/Reader.h"
#include "java/io/StringReader.h"
#include "java/lang/Integer.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/System.h"
#include "java/util/function/Function.h"
#include "java/util/logging/Logger.h"

@interface EduStanfordNlpProcessMorphology () {
 @public
  EduStanfordNlpProcessMorpha *lexer_;
}

+ (NSString *)lemmatizeWithNSString:(NSString *)word
                       withNSString:(NSString *)tag
    withEduStanfordNlpProcessMorpha:(EduStanfordNlpProcessMorpha *)lexer
                        withBoolean:(jboolean)lowercase;

+ (void)initStaticLexer OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpProcessMorphology, lexer_, EduStanfordNlpProcessMorpha *)

inline JavaUtilLoggingLogger *EduStanfordNlpProcessMorphology_get_LOGGER();
static JavaUtilLoggingLogger *EduStanfordNlpProcessMorphology_LOGGER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpProcessMorphology, LOGGER, JavaUtilLoggingLogger *)

inline jboolean EduStanfordNlpProcessMorphology_get_DEBUG();
#define EduStanfordNlpProcessMorphology_DEBUG false
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpProcessMorphology, DEBUG, jboolean)

inline EduStanfordNlpProcessMorpha *EduStanfordNlpProcessMorphology_get_staticLexer();
inline EduStanfordNlpProcessMorpha *EduStanfordNlpProcessMorphology_set_staticLexer(EduStanfordNlpProcessMorpha *value);
static EduStanfordNlpProcessMorpha *EduStanfordNlpProcessMorphology_staticLexer;
J2OBJC_STATIC_FIELD_OBJ(EduStanfordNlpProcessMorphology, staticLexer, EduStanfordNlpProcessMorpha *)

__attribute__((unused)) static NSString *EduStanfordNlpProcessMorphology_lemmatizeWithNSString_withNSString_withEduStanfordNlpProcessMorpha_withBoolean_(NSString *word, NSString *tag, EduStanfordNlpProcessMorpha *lexer, jboolean lowercase);

__attribute__((unused)) static void EduStanfordNlpProcessMorphology_initStaticLexer();

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpProcessMorphology)

@implementation EduStanfordNlpProcessMorphology

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpProcessMorphology_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithJavaIoReader:(JavaIoReader *)inArg {
  EduStanfordNlpProcessMorphology_initWithJavaIoReader_(self, inArg);
  return self;
}

- (instancetype)initWithJavaIoReader:(JavaIoReader *)inArg
                             withInt:(jint)flags {
  EduStanfordNlpProcessMorphology_initWithJavaIoReader_withInt_(self, inArg, flags);
  return self;
}

- (EduStanfordNlpLingWord *)next {
  NSString *nx = [((EduStanfordNlpProcessMorpha *) nil_chk(lexer_)) next];
  if (nx == nil) {
    return nil;
  }
  else {
    return new_EduStanfordNlpLingWord_initWithNSString_(nx);
  }
}

- (EduStanfordNlpLingWord *)stemWithEduStanfordNlpLingWord:(EduStanfordNlpLingWord *)w {
  return new_EduStanfordNlpLingWord_initWithNSString_([self stemWithNSString:[((EduStanfordNlpLingWord *) nil_chk(w)) value]]);
}

- (NSString *)stemWithNSString:(NSString *)word {
  @try {
    [((EduStanfordNlpProcessMorpha *) nil_chk(lexer_)) yyresetWithJavaIoReader:new_JavaIoStringReader_initWithNSString_(word)];
    [lexer_ yybeginWithInt:EduStanfordNlpProcessMorpha_any];
    NSString *wordRes = [lexer_ next];
    return wordRes;
  }
  @catch (JavaIoIOException *e) {
    [((JavaUtilLoggingLogger *) nil_chk(EduStanfordNlpProcessMorphology_LOGGER)) warningWithNSString:JreStrcat("$$", @"Morphology.stem() had error on word ", word)];
    return word;
  }
}

- (NSString *)lemmaWithNSString:(NSString *)word
                   withNSString:(NSString *)tag {
  return EduStanfordNlpProcessMorphology_lemmatizeWithNSString_withNSString_withEduStanfordNlpProcessMorpha_withBoolean_(word, tag, lexer_, [((EduStanfordNlpProcessMorpha *) nil_chk(lexer_)) optionWithInt:1]);
}

- (NSString *)lemmaWithNSString:(NSString *)word
                   withNSString:(NSString *)tag
                    withBoolean:(jboolean)lowercase {
  return EduStanfordNlpProcessMorphology_lemmatizeWithNSString_withNSString_withEduStanfordNlpProcessMorpha_withBoolean_(word, tag, lexer_, lowercase);
}

- (void)stemWithEduStanfordNlpLingCoreLabel:(EduStanfordNlpLingCoreLabel *)label {
  [self stemWithEduStanfordNlpLingCoreLabel:label withIOSClass:EduStanfordNlpLingCoreAnnotations_LemmaAnnotation_class_()];
}

- (void)stemWithEduStanfordNlpLingCoreLabel:(EduStanfordNlpLingCoreLabel *)label
                               withIOSClass:(IOSClass *)ann {
  NSString *lemma = EduStanfordNlpProcessMorphology_lemmatizeWithNSString_withNSString_withEduStanfordNlpProcessMorpha_withBoolean_([((EduStanfordNlpLingCoreLabel *) nil_chk(label)) word], [label tag], lexer_, [((EduStanfordNlpProcessMorpha *) nil_chk(lexer_)) optionWithInt:1]);
  (void) [label setWithIOSClass:ann withId:lemma];
}

+ (NSString *)lemmatizeWithNSString:(NSString *)word
                       withNSString:(NSString *)tag
    withEduStanfordNlpProcessMorpha:(EduStanfordNlpProcessMorpha *)lexer
                        withBoolean:(jboolean)lowercase {
  return EduStanfordNlpProcessMorphology_lemmatizeWithNSString_withNSString_withEduStanfordNlpProcessMorpha_withBoolean_(word, tag, lexer, lowercase);
}

+ (void)initStaticLexer {
  EduStanfordNlpProcessMorphology_initStaticLexer();
}

+ (EduStanfordNlpLingWordTag *)stemStaticWithNSString:(NSString *)word
                                         withNSString:(NSString *)tag {
  return EduStanfordNlpProcessMorphology_stemStaticWithNSString_withNSString_(word, tag);
}

+ (NSString *)lemmaStaticWithNSString:(NSString *)word
                         withNSString:(NSString *)tag
                          withBoolean:(jboolean)lowercase {
  return EduStanfordNlpProcessMorphology_lemmaStaticWithNSString_withNSString_withBoolean_(word, tag, lowercase);
}

+ (EduStanfordNlpLingWordTag *)stemStaticWithEduStanfordNlpLingWordTag:(EduStanfordNlpLingWordTag *)wT {
  return EduStanfordNlpProcessMorphology_stemStaticWithEduStanfordNlpLingWordTag_(wT);
}

- (id)applyWithId:(id)inArg {
  if ([inArg isKindOfClass:[EduStanfordNlpLingWordTag class]]) {
    EduStanfordNlpLingWordTag *wt = (EduStanfordNlpLingWordTag *) cast_chk(inArg, [EduStanfordNlpLingWordTag class]);
    NSString *tag = [((EduStanfordNlpLingWordTag *) nil_chk(wt)) tag];
    return new_EduStanfordNlpLingWordTag_initWithNSString_withNSString_(EduStanfordNlpProcessMorphology_lemmatizeWithNSString_withNSString_withEduStanfordNlpProcessMorpha_withBoolean_([wt word], tag, lexer_, [((EduStanfordNlpProcessMorpha *) nil_chk(lexer_)) optionWithInt:1]), tag);
  }
  if ([inArg isKindOfClass:[EduStanfordNlpLingWord class]]) {
    return [self stemWithEduStanfordNlpLingWord:(EduStanfordNlpLingWord *) cast_chk(inArg, [EduStanfordNlpLingWord class])];
  }
  return inArg;
}

- (EduStanfordNlpLingWordLemmaTag *)lemmatizeWithEduStanfordNlpLingWordTag:(EduStanfordNlpLingWordTag *)wT {
  NSString *tag = [((EduStanfordNlpLingWordTag *) nil_chk(wT)) tag];
  NSString *word = [wT word];
  NSString *lemma = [self lemmaWithNSString:word withNSString:tag];
  return new_EduStanfordNlpLingWordLemmaTag_initWithNSString_withNSString_withNSString_(word, lemma, tag);
}

+ (EduStanfordNlpLingWordLemmaTag *)lemmatizeStaticWithEduStanfordNlpLingWordTag:(EduStanfordNlpLingWordTag *)wT {
  return EduStanfordNlpProcessMorphology_lemmatizeStaticWithEduStanfordNlpLingWordTag_(wT);
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  EduStanfordNlpProcessMorphology_mainWithNSStringArray_(args);
}

- (id<JavaUtilFunctionFunction>)andThenWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_andThenWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilFunctionFunction>)composeWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_composeWithJavaUtilFunctionFunction_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingWord;", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingWord;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, 5, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 6, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 10, -1, 11, -1, -1 },
    { NULL, "LNSString;", 0xa, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x2a, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingWordTag;", 0x29, 14, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x29, 15, 8, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingWordTag;", 0x9, 14, 16, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingWordLemmaTag;", 0x1, 12, 16, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingWordLemmaTag;", 0x9, 19, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 20, 21, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithJavaIoReader:);
  methods[2].selector = @selector(initWithJavaIoReader:withInt:);
  methods[3].selector = @selector(next);
  methods[4].selector = @selector(stemWithEduStanfordNlpLingWord:);
  methods[5].selector = @selector(stemWithNSString:);
  methods[6].selector = @selector(lemmaWithNSString:withNSString:);
  methods[7].selector = @selector(lemmaWithNSString:withNSString:withBoolean:);
  methods[8].selector = @selector(stemWithEduStanfordNlpLingCoreLabel:);
  methods[9].selector = @selector(stemWithEduStanfordNlpLingCoreLabel:withIOSClass:);
  methods[10].selector = @selector(lemmatizeWithNSString:withNSString:withEduStanfordNlpProcessMorpha:withBoolean:);
  methods[11].selector = @selector(initStaticLexer);
  methods[12].selector = @selector(stemStaticWithNSString:withNSString:);
  methods[13].selector = @selector(lemmaStaticWithNSString:withNSString:withBoolean:);
  methods[14].selector = @selector(stemStaticWithEduStanfordNlpLingWordTag:);
  methods[15].selector = @selector(applyWithId:);
  methods[16].selector = @selector(lemmatizeWithEduStanfordNlpLingWordTag:);
  methods[17].selector = @selector(lemmatizeStaticWithEduStanfordNlpLingWordTag:);
  methods[18].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "LOGGER", "LJavaUtilLoggingLogger;", .constantValue.asLong = 0, 0x1a, -1, 22, -1, -1 },
    { "DEBUG", "Z", .constantValue.asBOOL = EduStanfordNlpProcessMorphology_DEBUG, 0x1a, -1, -1, -1, -1 },
    { "staticLexer", "LEduStanfordNlpProcessMorpha;", .constantValue.asLong = 0, 0xa, -1, 23, -1, -1 },
    { "lexer_", "LEduStanfordNlpProcessMorpha;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoReader;", "LJavaIoReader;I", "LJavaIoIOException;", "stem", "LEduStanfordNlpLingWord;", "LNSString;", "lemma", "LNSString;LNSString;", "LNSString;LNSString;Z", "LEduStanfordNlpLingCoreLabel;", "LEduStanfordNlpLingCoreLabel;LIOSClass;", "(Ledu/stanford/nlp/ling/CoreLabel;Ljava/lang/Class<+Ledu/stanford/nlp/ling/CoreAnnotation<Ljava/lang/String;>;>;)V", "lemmatize", "LNSString;LNSString;LEduStanfordNlpProcessMorpha;Z", "stemStatic", "lemmaStatic", "LEduStanfordNlpLingWordTag;", "apply", "LNSObject;", "lemmatizeStatic", "main", "[LNSString;", &EduStanfordNlpProcessMorphology_LOGGER, &EduStanfordNlpProcessMorphology_staticLexer };
  static const J2ObjcClassInfo _EduStanfordNlpProcessMorphology = { "Morphology", "edu.stanford.nlp.process", ptrTable, methods, fields, 7, 0x1, 19, 4, -1, -1, -1, -1, -1 };
  return &_EduStanfordNlpProcessMorphology;
}

+ (void)initialize {
  if (self == [EduStanfordNlpProcessMorphology class]) {
    EduStanfordNlpProcessMorphology_LOGGER = JavaUtilLoggingLogger_getLoggerWithNSString_([EduStanfordNlpProcessMorphology_class_() getName]);
    J2OBJC_SET_INITIALIZED(EduStanfordNlpProcessMorphology)
  }
}

@end

void EduStanfordNlpProcessMorphology_init(EduStanfordNlpProcessMorphology *self) {
  NSObject_init(self);
  self->lexer_ = new_EduStanfordNlpProcessMorpha_initWithJavaIoInputStream_(JreLoadStatic(JavaLangSystem, in));
}

EduStanfordNlpProcessMorphology *new_EduStanfordNlpProcessMorphology_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpProcessMorphology, init)
}

EduStanfordNlpProcessMorphology *create_EduStanfordNlpProcessMorphology_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpProcessMorphology, init)
}

void EduStanfordNlpProcessMorphology_initWithJavaIoReader_(EduStanfordNlpProcessMorphology *self, JavaIoReader *inArg) {
  NSObject_init(self);
  self->lexer_ = new_EduStanfordNlpProcessMorpha_initWithJavaIoReader_(inArg);
}

EduStanfordNlpProcessMorphology *new_EduStanfordNlpProcessMorphology_initWithJavaIoReader_(JavaIoReader *inArg) {
  J2OBJC_NEW_IMPL(EduStanfordNlpProcessMorphology, initWithJavaIoReader_, inArg)
}

EduStanfordNlpProcessMorphology *create_EduStanfordNlpProcessMorphology_initWithJavaIoReader_(JavaIoReader *inArg) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpProcessMorphology, initWithJavaIoReader_, inArg)
}

void EduStanfordNlpProcessMorphology_initWithJavaIoReader_withInt_(EduStanfordNlpProcessMorphology *self, JavaIoReader *inArg, jint flags) {
  NSObject_init(self);
  self->lexer_ = new_EduStanfordNlpProcessMorpha_initWithJavaIoReader_(inArg);
  [self->lexer_ setOptionsWithInt:flags];
}

EduStanfordNlpProcessMorphology *new_EduStanfordNlpProcessMorphology_initWithJavaIoReader_withInt_(JavaIoReader *inArg, jint flags) {
  J2OBJC_NEW_IMPL(EduStanfordNlpProcessMorphology, initWithJavaIoReader_withInt_, inArg, flags)
}

EduStanfordNlpProcessMorphology *create_EduStanfordNlpProcessMorphology_initWithJavaIoReader_withInt_(JavaIoReader *inArg, jint flags) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpProcessMorphology, initWithJavaIoReader_withInt_, inArg, flags)
}

NSString *EduStanfordNlpProcessMorphology_lemmatizeWithNSString_withNSString_withEduStanfordNlpProcessMorpha_withBoolean_(NSString *word, NSString *tag, EduStanfordNlpProcessMorpha *lexer, jboolean lowercase) {
  EduStanfordNlpProcessMorphology_initialize();
  jboolean wordHasForbiddenChar = [((NSString *) nil_chk(word)) indexOf:'_'] >= 0 || [word indexOf:' '] >= 0 || [word indexOf:0x000a] >= 0;
  NSString *quotedWord = word;
  if (wordHasForbiddenChar) {
    quotedWord = [quotedWord replaceAll:@"_" withReplacement:@"\u1cf0"];
    quotedWord = [((NSString *) nil_chk(quotedWord)) replaceAll:@" " withReplacement:@"\u1cf1"];
    quotedWord = [((NSString *) nil_chk(quotedWord)) replaceAll:@"\n" withReplacement:@"\u1cf2"];
  }
  NSString *wordtag = JreStrcat("$C$", quotedWord, '_', tag);
  @try {
    [((EduStanfordNlpProcessMorpha *) nil_chk(lexer)) setOptionWithInt:1 withBoolean:lowercase];
    [lexer yyresetWithJavaIoReader:new_JavaIoStringReader_initWithNSString_(wordtag)];
    [lexer yybeginWithInt:EduStanfordNlpProcessMorpha_scan];
    NSString *wordRes = [lexer next];
    (void) [lexer next];
    if (wordHasForbiddenChar) {
      wordRes = [((NSString *) nil_chk(wordRes)) replaceAll:@"\u1cf0" withReplacement:@"_"];
      wordRes = [((NSString *) nil_chk(wordRes)) replaceAll:@"\u1cf1" withReplacement:@" "];
      wordRes = [((NSString *) nil_chk(wordRes)) replaceAll:@"\u1cf2" withReplacement:@"\n"];
    }
    return wordRes;
  }
  @catch (JavaIoIOException *e) {
    [((JavaUtilLoggingLogger *) nil_chk(EduStanfordNlpProcessMorphology_LOGGER)) warningWithNSString:JreStrcat("$$C$", @"Morphology.stem() had error on word ", word, '/', tag)];
    return word;
  }
}

void EduStanfordNlpProcessMorphology_initStaticLexer() {
  EduStanfordNlpProcessMorphology_initialize();
  @synchronized(EduStanfordNlpProcessMorphology_class_()) {
    if (EduStanfordNlpProcessMorphology_staticLexer == nil) {
      EduStanfordNlpProcessMorphology_staticLexer = new_EduStanfordNlpProcessMorpha_initWithJavaIoInputStream_(JreLoadStatic(JavaLangSystem, in));
    }
  }
}

EduStanfordNlpLingWordTag *EduStanfordNlpProcessMorphology_stemStaticWithNSString_withNSString_(NSString *word, NSString *tag) {
  EduStanfordNlpProcessMorphology_initialize();
  @synchronized(EduStanfordNlpProcessMorphology_class_()) {
    EduStanfordNlpProcessMorphology_initStaticLexer();
    return new_EduStanfordNlpLingWordTag_initWithNSString_withNSString_(EduStanfordNlpProcessMorphology_lemmatizeWithNSString_withNSString_withEduStanfordNlpProcessMorpha_withBoolean_(word, tag, EduStanfordNlpProcessMorphology_staticLexer, [((EduStanfordNlpProcessMorpha *) nil_chk(EduStanfordNlpProcessMorphology_staticLexer)) optionWithInt:1]), tag);
  }
}

NSString *EduStanfordNlpProcessMorphology_lemmaStaticWithNSString_withNSString_withBoolean_(NSString *word, NSString *tag, jboolean lowercase) {
  EduStanfordNlpProcessMorphology_initialize();
  @synchronized(EduStanfordNlpProcessMorphology_class_()) {
    EduStanfordNlpProcessMorphology_initStaticLexer();
    return EduStanfordNlpProcessMorphology_lemmatizeWithNSString_withNSString_withEduStanfordNlpProcessMorpha_withBoolean_(word, tag, EduStanfordNlpProcessMorphology_staticLexer, lowercase);
  }
}

EduStanfordNlpLingWordTag *EduStanfordNlpProcessMorphology_stemStaticWithEduStanfordNlpLingWordTag_(EduStanfordNlpLingWordTag *wT) {
  EduStanfordNlpProcessMorphology_initialize();
  return EduStanfordNlpProcessMorphology_stemStaticWithNSString_withNSString_([((EduStanfordNlpLingWordTag *) nil_chk(wT)) word], [wT tag]);
}

EduStanfordNlpLingWordLemmaTag *EduStanfordNlpProcessMorphology_lemmatizeStaticWithEduStanfordNlpLingWordTag_(EduStanfordNlpLingWordTag *wT) {
  EduStanfordNlpProcessMorphology_initialize();
  NSString *tag = [((EduStanfordNlpLingWordTag *) nil_chk(wT)) tag];
  NSString *word = [wT word];
  NSString *lemma = [((EduStanfordNlpLingWordTag *) nil_chk(EduStanfordNlpProcessMorphology_stemStaticWithEduStanfordNlpLingWordTag_(wT))) word];
  return new_EduStanfordNlpLingWordLemmaTag_initWithNSString_withNSString_withNSString_(word, lemma, tag);
}

void EduStanfordNlpProcessMorphology_mainWithNSStringArray_(IOSObjectArray *args) {
  EduStanfordNlpProcessMorphology_initialize();
  if (((IOSObjectArray *) nil_chk(args))->size_ == 0) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"java Morphology [-rebuildVerbTable file|-stem word+|file+]"];
  }
  else if (args->size_ == 2 && [((NSString *) nil_chk(IOSObjectArray_Get(args, 0))) isEqual:@"-rebuildVerbTable"]) {
    NSString *verbs = EduStanfordNlpIoIOUtils_slurpFileWithNSString_(IOSObjectArray_Get(args, 1));
    IOSObjectArray *words = [((NSString *) nil_chk(verbs)) split:@"\\s+"];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printWithNSString:@" private static final String[] verbStems = { "];
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(words))->size_; i++) {
      [JreLoadStatic(JavaLangSystem, out) printWithNSString:JreStrcat("C$C", '"', IOSObjectArray_Get(words, i), '"')];
      if (i != words->size_ - 1) {
        [JreLoadStatic(JavaLangSystem, out) printWithNSString:@", "];
        if (i % 5 == 0) {
          [JreLoadStatic(JavaLangSystem, out) println];
          [JreLoadStatic(JavaLangSystem, out) printWithNSString:@"    "];
        }
      }
    }
    [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@" };"];
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, 0))) isEqual:@"-stem"]) {
    for (jint i = 1; i < args->size_; i++) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$@", IOSObjectArray_Get(args, i), @" --> ", EduStanfordNlpProcessMorphology_stemStaticWithEduStanfordNlpLingWordTag_(EduStanfordNlpLingWordTag_valueOfWithNSString_withNSString_(IOSObjectArray_Get(args, i), @"_")))];
    }
  }
  else {
    jint flags = 0;
    {
      IOSObjectArray *a__ = args;
      NSString * const *b__ = a__->buffer_;
      NSString * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        NSString *arg = *b__++;
        if ([((NSString *) nil_chk(arg)) charAtWithInt:0] == '-') {
          @try {
            flags = JavaLangInteger_parseIntWithNSString_([arg substring:1]);
          }
          @catch (JavaLangNumberFormatException *nfe) {
            [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$C", @"Couldn't handle flag: ", arg, 0x000a)];
          }
        }
        else {
          EduStanfordNlpProcessMorphology *morph = new_EduStanfordNlpProcessMorphology_initWithJavaIoReader_withInt_(new_JavaIoFileReader_initWithNSString_(arg), flags);
          for (EduStanfordNlpLingWord *next; (next = [morph next]) != nil; ) {
            [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printWithId:next];
          }
        }
      }
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpProcessMorphology)
