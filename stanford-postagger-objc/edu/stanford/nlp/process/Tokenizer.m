//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/process/Tokenizer.java
//

#include "J2ObjC_source.h"
#include "edu/stanford/nlp/process/Tokenizer.h"
#include "java/util/Iterator.h"
#include "java/util/function/Consumer.h"

#pragma clang diagnostic ignored "-Wprotocol"

@implementation EduStanfordNlpProcessTokenizer

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaUtilIterator_forEachRemainingWithJavaUtilFunctionConsumer_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x401, -1, -1, -1, 0, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x401, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaUtilList;", 0x401, -1, -1, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(next);
  methods[1].selector = @selector(hasNext);
  methods[2].selector = @selector(remove);
  methods[3].selector = @selector(peek);
  methods[4].selector = @selector(tokenize);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "()TT;", "()Ljava/util/List<TT;>;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Ljava/util/Iterator<TT;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpProcessTokenizer = { "Tokenizer", "edu.stanford.nlp.process", ptrTable, methods, NULL, 7, 0x609, 5, 0, -1, -1, -1, 2, -1 };
  return &_EduStanfordNlpProcessTokenizer;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(EduStanfordNlpProcessTokenizer)
