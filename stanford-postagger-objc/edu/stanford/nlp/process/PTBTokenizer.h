//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/process/PTBTokenizer.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_EduStanfordNlpProcessPTBTokenizer")
#ifdef RESTRICT_EduStanfordNlpProcessPTBTokenizer
#define INCLUDE_ALL_EduStanfordNlpProcessPTBTokenizer 0
#else
#define INCLUDE_ALL_EduStanfordNlpProcessPTBTokenizer 1
#endif
#undef RESTRICT_EduStanfordNlpProcessPTBTokenizer

#if !defined (EduStanfordNlpProcessPTBTokenizer_) && (INCLUDE_ALL_EduStanfordNlpProcessPTBTokenizer || defined(INCLUDE_EduStanfordNlpProcessPTBTokenizer))
#define EduStanfordNlpProcessPTBTokenizer_

#define RESTRICT_EduStanfordNlpProcessAbstractTokenizer 1
#define INCLUDE_EduStanfordNlpProcessAbstractTokenizer 1
#include "edu/stanford/nlp/process/AbstractTokenizer.h"

@class IOSObjectArray;
@class JavaIoReader;
@class JavaIoWriter;
@protocol EduStanfordNlpLingHasWord;
@protocol EduStanfordNlpProcessLexedTokenFactory;
@protocol EduStanfordNlpProcessTokenizerFactory;
@protocol JavaUtilList;

@interface EduStanfordNlpProcessPTBTokenizer : EduStanfordNlpProcessAbstractTokenizer

#pragma mark Public

- (instancetype)initWithJavaIoReader:(JavaIoReader *)r
withEduStanfordNlpProcessLexedTokenFactory:(id<EduStanfordNlpProcessLexedTokenFactory>)tokenFactory
                        withNSString:(NSString *)options;

+ (id<EduStanfordNlpProcessTokenizerFactory>)coreLabelFactory;

+ (id<EduStanfordNlpProcessTokenizerFactory>)factory;

+ (id<EduStanfordNlpProcessTokenizerFactory>)factoryWithBoolean:(jboolean)tokenizeNLs
                                                    withBoolean:(jboolean)invertible;

+ (id<EduStanfordNlpProcessTokenizerFactory>)factoryWithEduStanfordNlpProcessLexedTokenFactory:(id<EduStanfordNlpProcessLexedTokenFactory>)factory
                                                                                  withNSString:(NSString *)options;

+ (NSString *)getNewlineToken;

+ (NSString *)labelList2TextWithJavaUtilList:(id<JavaUtilList>)ptbWords;

+ (void)mainWithNSStringArray:(IOSObjectArray *)args;

+ (EduStanfordNlpProcessPTBTokenizer *)newPTBTokenizerWithJavaIoReader:(JavaIoReader *)r OBJC_METHOD_FAMILY_NONE;

+ (EduStanfordNlpProcessPTBTokenizer *)newPTBTokenizerWithJavaIoReader:(JavaIoReader *)r
                                                           withBoolean:(jboolean)tokenizeNLs
                                                           withBoolean:(jboolean)invertible OBJC_METHOD_FAMILY_NONE;

- (id<EduStanfordNlpLingHasWord>)next;

- (id<EduStanfordNlpLingHasWord>)peek;

+ (NSString *)ptb2TextWithJavaUtilList:(id<JavaUtilList>)ptbWords;

+ (jint)ptb2TextWithJavaIoReader:(JavaIoReader *)ptbText
                withJavaIoWriter:(JavaIoWriter *)w;

+ (NSString *)ptb2TextWithNSString:(NSString *)ptbText;

+ (NSString *)ptbToken2TextWithNSString:(NSString *)ptbText;

#pragma mark Protected

- (id<EduStanfordNlpLingHasWord>)getNext;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpProcessPTBTokenizer)

FOUNDATION_EXPORT EduStanfordNlpProcessPTBTokenizer *EduStanfordNlpProcessPTBTokenizer_newPTBTokenizerWithJavaIoReader_(JavaIoReader *r);

FOUNDATION_EXPORT EduStanfordNlpProcessPTBTokenizer *EduStanfordNlpProcessPTBTokenizer_newPTBTokenizerWithJavaIoReader_withBoolean_withBoolean_(JavaIoReader *r, jboolean tokenizeNLs, jboolean invertible);

FOUNDATION_EXPORT void EduStanfordNlpProcessPTBTokenizer_initWithJavaIoReader_withEduStanfordNlpProcessLexedTokenFactory_withNSString_(EduStanfordNlpProcessPTBTokenizer *self, JavaIoReader *r, id<EduStanfordNlpProcessLexedTokenFactory> tokenFactory, NSString *options);

FOUNDATION_EXPORT EduStanfordNlpProcessPTBTokenizer *new_EduStanfordNlpProcessPTBTokenizer_initWithJavaIoReader_withEduStanfordNlpProcessLexedTokenFactory_withNSString_(JavaIoReader *r, id<EduStanfordNlpProcessLexedTokenFactory> tokenFactory, NSString *options) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EduStanfordNlpProcessPTBTokenizer *create_EduStanfordNlpProcessPTBTokenizer_initWithJavaIoReader_withEduStanfordNlpProcessLexedTokenFactory_withNSString_(JavaIoReader *r, id<EduStanfordNlpProcessLexedTokenFactory> tokenFactory, NSString *options);

FOUNDATION_EXPORT NSString *EduStanfordNlpProcessPTBTokenizer_getNewlineToken();

FOUNDATION_EXPORT NSString *EduStanfordNlpProcessPTBTokenizer_ptb2TextWithNSString_(NSString *ptbText);

FOUNDATION_EXPORT NSString *EduStanfordNlpProcessPTBTokenizer_ptbToken2TextWithNSString_(NSString *ptbText);

FOUNDATION_EXPORT jint EduStanfordNlpProcessPTBTokenizer_ptb2TextWithJavaIoReader_withJavaIoWriter_(JavaIoReader *ptbText, JavaIoWriter *w);

FOUNDATION_EXPORT NSString *EduStanfordNlpProcessPTBTokenizer_ptb2TextWithJavaUtilList_(id<JavaUtilList> ptbWords);

FOUNDATION_EXPORT NSString *EduStanfordNlpProcessPTBTokenizer_labelList2TextWithJavaUtilList_(id<JavaUtilList> ptbWords);

FOUNDATION_EXPORT id<EduStanfordNlpProcessTokenizerFactory> EduStanfordNlpProcessPTBTokenizer_factory();

FOUNDATION_EXPORT id<EduStanfordNlpProcessTokenizerFactory> EduStanfordNlpProcessPTBTokenizer_factoryWithBoolean_withBoolean_(jboolean tokenizeNLs, jboolean invertible);

FOUNDATION_EXPORT id<EduStanfordNlpProcessTokenizerFactory> EduStanfordNlpProcessPTBTokenizer_coreLabelFactory();

FOUNDATION_EXPORT id<EduStanfordNlpProcessTokenizerFactory> EduStanfordNlpProcessPTBTokenizer_factoryWithEduStanfordNlpProcessLexedTokenFactory_withNSString_(id<EduStanfordNlpProcessLexedTokenFactory> factory, NSString *options);

FOUNDATION_EXPORT void EduStanfordNlpProcessPTBTokenizer_mainWithNSStringArray_(IOSObjectArray *args);

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpProcessPTBTokenizer)

#endif

#if !defined (EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory_) && (INCLUDE_ALL_EduStanfordNlpProcessPTBTokenizer || defined(INCLUDE_EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory))
#define EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory_

#define RESTRICT_EduStanfordNlpProcessTokenizerFactory 1
#define INCLUDE_EduStanfordNlpProcessTokenizerFactory 1
#include "edu/stanford/nlp/process/TokenizerFactory.h"

@class JavaIoReader;
@protocol EduStanfordNlpProcessLexedTokenFactory;
@protocol EduStanfordNlpProcessTokenizer;
@protocol JavaUtilIterator;

@interface EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory : NSObject < EduStanfordNlpProcessTokenizerFactory > {
 @public
  id<EduStanfordNlpProcessLexedTokenFactory> factory_;
  NSString *options_;
}

#pragma mark Public

- (id<JavaUtilIterator>)getIteratorWithJavaIoReader:(JavaIoReader *)r;

- (id<EduStanfordNlpProcessTokenizer>)getTokenizerWithJavaIoReader:(JavaIoReader *)r;

- (id<EduStanfordNlpProcessTokenizer>)getTokenizerWithJavaIoReader:(JavaIoReader *)r
                                                      withNSString:(NSString *)extraOptions;

+ (EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory *)newCoreLabelTokenizerFactoryWithNSString:(NSString *)options OBJC_METHOD_FAMILY_NONE;

+ (EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory *)newPTBTokenizerFactoryWithBoolean:(jboolean)tokenizeNLs
                                                                                 withBoolean:(jboolean)invertible OBJC_METHOD_FAMILY_NONE;

+ (EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory *)newPTBTokenizerFactoryWithEduStanfordNlpProcessLexedTokenFactory:(id<EduStanfordNlpProcessLexedTokenFactory>)tokenFactory
                                                                                                               withNSString:(NSString *)options OBJC_METHOD_FAMILY_NONE;

+ (id<EduStanfordNlpProcessTokenizerFactory>)newTokenizerFactory OBJC_METHOD_FAMILY_NONE;

+ (EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory *)newWordTokenizerFactoryWithNSString:(NSString *)options OBJC_METHOD_FAMILY_NONE;

- (void)setOptionsWithNSString:(NSString *)options;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory)

J2OBJC_FIELD_SETTER(EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory, factory_, id<EduStanfordNlpProcessLexedTokenFactory>)
J2OBJC_FIELD_SETTER(EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory, options_, NSString *)

FOUNDATION_EXPORT id<EduStanfordNlpProcessTokenizerFactory> EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory_newTokenizerFactory();

FOUNDATION_EXPORT EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory *EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory_newWordTokenizerFactoryWithNSString_(NSString *options);

FOUNDATION_EXPORT EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory *EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory_newCoreLabelTokenizerFactoryWithNSString_(NSString *options);

FOUNDATION_EXPORT EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory *EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory_newPTBTokenizerFactoryWithEduStanfordNlpProcessLexedTokenFactory_withNSString_(id<EduStanfordNlpProcessLexedTokenFactory> tokenFactory, NSString *options);

FOUNDATION_EXPORT EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory *EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory_newPTBTokenizerFactoryWithBoolean_withBoolean_(jboolean tokenizeNLs, jboolean invertible);

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory)

#endif

#pragma pop_macro("INCLUDE_ALL_EduStanfordNlpProcessPTBTokenizer")
