//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/process/WhitespaceTokenizer.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_EduStanfordNlpProcessWhitespaceTokenizer")
#ifdef RESTRICT_EduStanfordNlpProcessWhitespaceTokenizer
#define INCLUDE_ALL_EduStanfordNlpProcessWhitespaceTokenizer 0
#else
#define INCLUDE_ALL_EduStanfordNlpProcessWhitespaceTokenizer 1
#endif
#undef RESTRICT_EduStanfordNlpProcessWhitespaceTokenizer

#if !defined (EduStanfordNlpProcessWhitespaceTokenizer_) && (INCLUDE_ALL_EduStanfordNlpProcessWhitespaceTokenizer || defined(INCLUDE_EduStanfordNlpProcessWhitespaceTokenizer))
#define EduStanfordNlpProcessWhitespaceTokenizer_

#define RESTRICT_EduStanfordNlpProcessAbstractTokenizer 1
#define INCLUDE_EduStanfordNlpProcessAbstractTokenizer 1
#include "edu/stanford/nlp/process/AbstractTokenizer.h"

@class EduStanfordNlpProcessWhitespaceTokenizer_WhitespaceTokenizerFactory;
@class IOSObjectArray;
@class JavaIoReader;
@protocol EduStanfordNlpLingHasWord;
@protocol EduStanfordNlpProcessLexedTokenFactory;
@protocol EduStanfordNlpProcessTokenizerFactory;

@interface EduStanfordNlpProcessWhitespaceTokenizer : EduStanfordNlpProcessAbstractTokenizer

#pragma mark Public

- (instancetype)initWithEduStanfordNlpProcessLexedTokenFactory:(id<EduStanfordNlpProcessLexedTokenFactory>)factory
                                              withJavaIoReader:(JavaIoReader *)r
                                                   withBoolean:(jboolean)eolIsSignificant;

+ (id<EduStanfordNlpProcessTokenizerFactory>)factory;

+ (id<EduStanfordNlpProcessTokenizerFactory>)factoryWithBoolean:(jboolean)eolIsSignificant;

+ (void)mainWithNSStringArray:(IOSObjectArray *)args;

+ (EduStanfordNlpProcessWhitespaceTokenizer_WhitespaceTokenizerFactory *)newCoreLabelTokenizerFactory OBJC_METHOD_FAMILY_NONE;

+ (EduStanfordNlpProcessWhitespaceTokenizer_WhitespaceTokenizerFactory *)newCoreLabelTokenizerFactoryWithNSString:(NSString *)options OBJC_METHOD_FAMILY_NONE;

+ (EduStanfordNlpProcessWhitespaceTokenizer *)newCoreLabelWhitespaceTokenizerWithJavaIoReader:(JavaIoReader *)r OBJC_METHOD_FAMILY_NONE;

+ (EduStanfordNlpProcessWhitespaceTokenizer *)newCoreLabelWhitespaceTokenizerWithJavaIoReader:(JavaIoReader *)r
                                                                                  withBoolean:(jboolean)tokenizeNLs OBJC_METHOD_FAMILY_NONE;

+ (EduStanfordNlpProcessWhitespaceTokenizer *)newWordWhitespaceTokenizerWithJavaIoReader:(JavaIoReader *)r OBJC_METHOD_FAMILY_NONE;

+ (EduStanfordNlpProcessWhitespaceTokenizer *)newWordWhitespaceTokenizerWithJavaIoReader:(JavaIoReader *)r
                                                                             withBoolean:(jboolean)eolIsSignificant OBJC_METHOD_FAMILY_NONE;

- (id<EduStanfordNlpLingHasWord>)next;

- (id<EduStanfordNlpLingHasWord>)peek;

#pragma mark Protected

- (id<EduStanfordNlpLingHasWord>)getNext;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpProcessWhitespaceTokenizer)

FOUNDATION_EXPORT EduStanfordNlpProcessWhitespaceTokenizer_WhitespaceTokenizerFactory *EduStanfordNlpProcessWhitespaceTokenizer_newCoreLabelTokenizerFactoryWithNSString_(NSString *options);

FOUNDATION_EXPORT EduStanfordNlpProcessWhitespaceTokenizer_WhitespaceTokenizerFactory *EduStanfordNlpProcessWhitespaceTokenizer_newCoreLabelTokenizerFactory();

FOUNDATION_EXPORT void EduStanfordNlpProcessWhitespaceTokenizer_initWithEduStanfordNlpProcessLexedTokenFactory_withJavaIoReader_withBoolean_(EduStanfordNlpProcessWhitespaceTokenizer *self, id<EduStanfordNlpProcessLexedTokenFactory> factory, JavaIoReader *r, jboolean eolIsSignificant);

FOUNDATION_EXPORT EduStanfordNlpProcessWhitespaceTokenizer *new_EduStanfordNlpProcessWhitespaceTokenizer_initWithEduStanfordNlpProcessLexedTokenFactory_withJavaIoReader_withBoolean_(id<EduStanfordNlpProcessLexedTokenFactory> factory, JavaIoReader *r, jboolean eolIsSignificant) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EduStanfordNlpProcessWhitespaceTokenizer *create_EduStanfordNlpProcessWhitespaceTokenizer_initWithEduStanfordNlpProcessLexedTokenFactory_withJavaIoReader_withBoolean_(id<EduStanfordNlpProcessLexedTokenFactory> factory, JavaIoReader *r, jboolean eolIsSignificant);

FOUNDATION_EXPORT EduStanfordNlpProcessWhitespaceTokenizer *EduStanfordNlpProcessWhitespaceTokenizer_newCoreLabelWhitespaceTokenizerWithJavaIoReader_(JavaIoReader *r);

FOUNDATION_EXPORT EduStanfordNlpProcessWhitespaceTokenizer *EduStanfordNlpProcessWhitespaceTokenizer_newCoreLabelWhitespaceTokenizerWithJavaIoReader_withBoolean_(JavaIoReader *r, jboolean tokenizeNLs);

FOUNDATION_EXPORT EduStanfordNlpProcessWhitespaceTokenizer *EduStanfordNlpProcessWhitespaceTokenizer_newWordWhitespaceTokenizerWithJavaIoReader_(JavaIoReader *r);

FOUNDATION_EXPORT EduStanfordNlpProcessWhitespaceTokenizer *EduStanfordNlpProcessWhitespaceTokenizer_newWordWhitespaceTokenizerWithJavaIoReader_withBoolean_(JavaIoReader *r, jboolean eolIsSignificant);

FOUNDATION_EXPORT id<EduStanfordNlpProcessTokenizerFactory> EduStanfordNlpProcessWhitespaceTokenizer_factory();

FOUNDATION_EXPORT id<EduStanfordNlpProcessTokenizerFactory> EduStanfordNlpProcessWhitespaceTokenizer_factoryWithBoolean_(jboolean eolIsSignificant);

FOUNDATION_EXPORT void EduStanfordNlpProcessWhitespaceTokenizer_mainWithNSStringArray_(IOSObjectArray *args);

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpProcessWhitespaceTokenizer)

#endif

#if !defined (EduStanfordNlpProcessWhitespaceTokenizer_WhitespaceTokenizerFactory_) && (INCLUDE_ALL_EduStanfordNlpProcessWhitespaceTokenizer || defined(INCLUDE_EduStanfordNlpProcessWhitespaceTokenizer_WhitespaceTokenizerFactory))
#define EduStanfordNlpProcessWhitespaceTokenizer_WhitespaceTokenizerFactory_

#define RESTRICT_EduStanfordNlpProcessTokenizerFactory 1
#define INCLUDE_EduStanfordNlpProcessTokenizerFactory 1
#include "edu/stanford/nlp/process/TokenizerFactory.h"

@class JavaIoReader;
@protocol EduStanfordNlpProcessLexedTokenFactory;
@protocol EduStanfordNlpProcessTokenizer;
@protocol JavaUtilIterator;

@interface EduStanfordNlpProcessWhitespaceTokenizer_WhitespaceTokenizerFactory : NSObject < EduStanfordNlpProcessTokenizerFactory >

#pragma mark Public

- (instancetype)initWithEduStanfordNlpProcessLexedTokenFactory:(id<EduStanfordNlpProcessLexedTokenFactory>)factory;

- (instancetype)initWithEduStanfordNlpProcessLexedTokenFactory:(id<EduStanfordNlpProcessLexedTokenFactory>)factory
                                                   withBoolean:(jboolean)tokenizeNLs;

- (instancetype)initWithEduStanfordNlpProcessLexedTokenFactory:(id<EduStanfordNlpProcessLexedTokenFactory>)factory
                                                  withNSString:(NSString *)options;

- (id<JavaUtilIterator>)getIteratorWithJavaIoReader:(JavaIoReader *)r;

- (id<EduStanfordNlpProcessTokenizer>)getTokenizerWithJavaIoReader:(JavaIoReader *)r;

- (id<EduStanfordNlpProcessTokenizer>)getTokenizerWithJavaIoReader:(JavaIoReader *)r
                                                      withNSString:(NSString *)extraOptions;

+ (id<EduStanfordNlpProcessTokenizerFactory>)newTokenizerFactory OBJC_METHOD_FAMILY_NONE;

- (void)setOptionsWithNSString:(NSString *)options;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpProcessWhitespaceTokenizer_WhitespaceTokenizerFactory)

FOUNDATION_EXPORT id<EduStanfordNlpProcessTokenizerFactory> EduStanfordNlpProcessWhitespaceTokenizer_WhitespaceTokenizerFactory_newTokenizerFactory();

FOUNDATION_EXPORT void EduStanfordNlpProcessWhitespaceTokenizer_WhitespaceTokenizerFactory_initWithEduStanfordNlpProcessLexedTokenFactory_(EduStanfordNlpProcessWhitespaceTokenizer_WhitespaceTokenizerFactory *self, id<EduStanfordNlpProcessLexedTokenFactory> factory);

FOUNDATION_EXPORT EduStanfordNlpProcessWhitespaceTokenizer_WhitespaceTokenizerFactory *new_EduStanfordNlpProcessWhitespaceTokenizer_WhitespaceTokenizerFactory_initWithEduStanfordNlpProcessLexedTokenFactory_(id<EduStanfordNlpProcessLexedTokenFactory> factory) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EduStanfordNlpProcessWhitespaceTokenizer_WhitespaceTokenizerFactory *create_EduStanfordNlpProcessWhitespaceTokenizer_WhitespaceTokenizerFactory_initWithEduStanfordNlpProcessLexedTokenFactory_(id<EduStanfordNlpProcessLexedTokenFactory> factory);

FOUNDATION_EXPORT void EduStanfordNlpProcessWhitespaceTokenizer_WhitespaceTokenizerFactory_initWithEduStanfordNlpProcessLexedTokenFactory_withNSString_(EduStanfordNlpProcessWhitespaceTokenizer_WhitespaceTokenizerFactory *self, id<EduStanfordNlpProcessLexedTokenFactory> factory, NSString *options);

FOUNDATION_EXPORT EduStanfordNlpProcessWhitespaceTokenizer_WhitespaceTokenizerFactory *new_EduStanfordNlpProcessWhitespaceTokenizer_WhitespaceTokenizerFactory_initWithEduStanfordNlpProcessLexedTokenFactory_withNSString_(id<EduStanfordNlpProcessLexedTokenFactory> factory, NSString *options) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EduStanfordNlpProcessWhitespaceTokenizer_WhitespaceTokenizerFactory *create_EduStanfordNlpProcessWhitespaceTokenizer_WhitespaceTokenizerFactory_initWithEduStanfordNlpProcessLexedTokenFactory_withNSString_(id<EduStanfordNlpProcessLexedTokenFactory> factory, NSString *options);

FOUNDATION_EXPORT void EduStanfordNlpProcessWhitespaceTokenizer_WhitespaceTokenizerFactory_initWithEduStanfordNlpProcessLexedTokenFactory_withBoolean_(EduStanfordNlpProcessWhitespaceTokenizer_WhitespaceTokenizerFactory *self, id<EduStanfordNlpProcessLexedTokenFactory> factory, jboolean tokenizeNLs);

FOUNDATION_EXPORT EduStanfordNlpProcessWhitespaceTokenizer_WhitespaceTokenizerFactory *new_EduStanfordNlpProcessWhitespaceTokenizer_WhitespaceTokenizerFactory_initWithEduStanfordNlpProcessLexedTokenFactory_withBoolean_(id<EduStanfordNlpProcessLexedTokenFactory> factory, jboolean tokenizeNLs) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EduStanfordNlpProcessWhitespaceTokenizer_WhitespaceTokenizerFactory *create_EduStanfordNlpProcessWhitespaceTokenizer_WhitespaceTokenizerFactory_initWithEduStanfordNlpProcessLexedTokenFactory_withBoolean_(id<EduStanfordNlpProcessLexedTokenFactory> factory, jboolean tokenizeNLs);

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpProcessWhitespaceTokenizer_WhitespaceTokenizerFactory)

#endif

#pragma pop_macro("INCLUDE_ALL_EduStanfordNlpProcessWhitespaceTokenizer")
