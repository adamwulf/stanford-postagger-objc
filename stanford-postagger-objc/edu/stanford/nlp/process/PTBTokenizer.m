//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/process/PTBTokenizer.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/io/IOUtils.h"
#include "edu/stanford/nlp/io/RuntimeIOException.h"
#include "edu/stanford/nlp/ling/CoreAnnotations.h"
#include "edu/stanford/nlp/ling/CoreLabel.h"
#include "edu/stanford/nlp/ling/HasWord.h"
#include "edu/stanford/nlp/process/AbstractTokenizer.h"
#include "edu/stanford/nlp/process/CoreLabelTokenFactory.h"
#include "edu/stanford/nlp/process/LexedTokenFactory.h"
#include "edu/stanford/nlp/process/PTB2TextLexer.h"
#include "edu/stanford/nlp/process/PTBLexer.h"
#include "edu/stanford/nlp/process/PTBTokenizer.h"
#include "edu/stanford/nlp/process/Tokenizer.h"
#include "edu/stanford/nlp/process/TokenizerFactory.h"
#include "edu/stanford/nlp/process/WordTokenFactory.h"
#include "edu/stanford/nlp/util/Generics.h"
#include "edu/stanford/nlp/util/PropertiesUtils.h"
#include "edu/stanford/nlp/util/StringUtils.h"
#include "java/io/BufferedReader.h"
#include "java/io/BufferedWriter.h"
#include "java/io/FileOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/InputStreamReader.h"
#include "java/io/OutputStreamWriter.h"
#include "java/io/PrintStream.h"
#include "java/io/Reader.h"
#include "java/io/StringReader.h"
#include "java/io/Writer.h"
#include "java/lang/Double.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/Properties.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"
#include "java/util/regex/PatternSyntaxException.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface EduStanfordNlpProcessPTBTokenizer () {
 @public
  EduStanfordNlpProcessPTBLexer *lexer_;
}

- (instancetype)initWithJavaIoReader:(JavaIoReader *)r
                         withBoolean:(jboolean)tokenizeNLs
                         withBoolean:(jboolean)invertible
                         withBoolean:(jboolean)suppressEscaping
withEduStanfordNlpProcessLexedTokenFactory:(id<EduStanfordNlpProcessLexedTokenFactory>)tokenFactory;

+ (void)untokWithJavaUtilList:(id<JavaUtilList>)inputFileList
             withJavaUtilList:(id<JavaUtilList>)outputFileList
                 withNSString:(NSString *)charset;

+ (void)tokWithJavaUtilList:(id<JavaUtilList>)inputFileList
           withJavaUtilList:(id<JavaUtilList>)outputFileList
               withNSString:(NSString *)charset
   withJavaUtilRegexPattern:(JavaUtilRegexPattern *)parseInsidePattern
               withNSString:(NSString *)options
                withBoolean:(jboolean)preserveLines
                withBoolean:(jboolean)dump
                withBoolean:(jboolean)lowerCase;

+ (jint)tokReaderWithJavaIoReader:(JavaIoReader *)r
         withJavaIoBufferedWriter:(JavaIoBufferedWriter *)writer
         withJavaUtilRegexPattern:(JavaUtilRegexPattern *)parseInsidePattern
                     withNSString:(NSString *)options
                      withBoolean:(jboolean)preserveLines
                      withBoolean:(jboolean)dump
                      withBoolean:(jboolean)lowerCase;

+ (id<JavaUtilMap>)optionArgDefs;

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpProcessPTBTokenizer, lexer_, EduStanfordNlpProcessPTBLexer *)

__attribute__((unused)) static void EduStanfordNlpProcessPTBTokenizer_initWithJavaIoReader_withBoolean_withBoolean_withBoolean_withEduStanfordNlpProcessLexedTokenFactory_(EduStanfordNlpProcessPTBTokenizer *self, JavaIoReader *r, jboolean tokenizeNLs, jboolean invertible, jboolean suppressEscaping, id<EduStanfordNlpProcessLexedTokenFactory> tokenFactory);

__attribute__((unused)) static EduStanfordNlpProcessPTBTokenizer *new_EduStanfordNlpProcessPTBTokenizer_initWithJavaIoReader_withBoolean_withBoolean_withBoolean_withEduStanfordNlpProcessLexedTokenFactory_(JavaIoReader *r, jboolean tokenizeNLs, jboolean invertible, jboolean suppressEscaping, id<EduStanfordNlpProcessLexedTokenFactory> tokenFactory) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpProcessPTBTokenizer *create_EduStanfordNlpProcessPTBTokenizer_initWithJavaIoReader_withBoolean_withBoolean_withBoolean_withEduStanfordNlpProcessLexedTokenFactory_(JavaIoReader *r, jboolean tokenizeNLs, jboolean invertible, jboolean suppressEscaping, id<EduStanfordNlpProcessLexedTokenFactory> tokenFactory);

__attribute__((unused)) static void EduStanfordNlpProcessPTBTokenizer_untokWithJavaUtilList_withJavaUtilList_withNSString_(id<JavaUtilList> inputFileList, id<JavaUtilList> outputFileList, NSString *charset);

__attribute__((unused)) static void EduStanfordNlpProcessPTBTokenizer_tokWithJavaUtilList_withJavaUtilList_withNSString_withJavaUtilRegexPattern_withNSString_withBoolean_withBoolean_withBoolean_(id<JavaUtilList> inputFileList, id<JavaUtilList> outputFileList, NSString *charset, JavaUtilRegexPattern *parseInsidePattern, NSString *options, jboolean preserveLines, jboolean dump, jboolean lowerCase);

__attribute__((unused)) static jint EduStanfordNlpProcessPTBTokenizer_tokReaderWithJavaIoReader_withJavaIoBufferedWriter_withJavaUtilRegexPattern_withNSString_withBoolean_withBoolean_withBoolean_(JavaIoReader *r, JavaIoBufferedWriter *writer, JavaUtilRegexPattern *parseInsidePattern, NSString *options, jboolean preserveLines, jboolean dump, jboolean lowerCase);

__attribute__((unused)) static id<JavaUtilMap> EduStanfordNlpProcessPTBTokenizer_optionArgDefs();

@interface EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory ()

- (instancetype)initWithBoolean:(jboolean)tokenizeNLs
                    withBoolean:(jboolean)invertible
                    withBoolean:(jboolean)suppressEscaping
withEduStanfordNlpProcessLexedTokenFactory:(id<EduStanfordNlpProcessLexedTokenFactory>)factory;

- (instancetype)initWithEduStanfordNlpProcessLexedTokenFactory:(id<EduStanfordNlpProcessLexedTokenFactory>)tokenFactory
                                                  withNSString:(NSString *)options;

@end

__attribute__((unused)) static void EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory_initWithBoolean_withBoolean_withBoolean_withEduStanfordNlpProcessLexedTokenFactory_(EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory *self, jboolean tokenizeNLs, jboolean invertible, jboolean suppressEscaping, id<EduStanfordNlpProcessLexedTokenFactory> factory);

__attribute__((unused)) static EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory *new_EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory_initWithBoolean_withBoolean_withBoolean_withEduStanfordNlpProcessLexedTokenFactory_(jboolean tokenizeNLs, jboolean invertible, jboolean suppressEscaping, id<EduStanfordNlpProcessLexedTokenFactory> factory) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory *create_EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory_initWithBoolean_withBoolean_withBoolean_withEduStanfordNlpProcessLexedTokenFactory_(jboolean tokenizeNLs, jboolean invertible, jboolean suppressEscaping, id<EduStanfordNlpProcessLexedTokenFactory> factory);

__attribute__((unused)) static void EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory_initWithEduStanfordNlpProcessLexedTokenFactory_withNSString_(EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory *self, id<EduStanfordNlpProcessLexedTokenFactory> tokenFactory, NSString *options);

__attribute__((unused)) static EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory *new_EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory_initWithEduStanfordNlpProcessLexedTokenFactory_withNSString_(id<EduStanfordNlpProcessLexedTokenFactory> tokenFactory, NSString *options) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory *create_EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory_initWithEduStanfordNlpProcessLexedTokenFactory_withNSString_(id<EduStanfordNlpProcessLexedTokenFactory> tokenFactory, NSString *options);

@implementation EduStanfordNlpProcessPTBTokenizer

+ (EduStanfordNlpProcessPTBTokenizer *)newPTBTokenizerWithJavaIoReader:(JavaIoReader *)r {
  return EduStanfordNlpProcessPTBTokenizer_newPTBTokenizerWithJavaIoReader_(r);
}

+ (EduStanfordNlpProcessPTBTokenizer *)newPTBTokenizerWithJavaIoReader:(JavaIoReader *)r
                                                           withBoolean:(jboolean)tokenizeNLs
                                                           withBoolean:(jboolean)invertible {
  return EduStanfordNlpProcessPTBTokenizer_newPTBTokenizerWithJavaIoReader_withBoolean_withBoolean_(r, tokenizeNLs, invertible);
}

- (instancetype)initWithJavaIoReader:(JavaIoReader *)r
                         withBoolean:(jboolean)tokenizeNLs
                         withBoolean:(jboolean)invertible
                         withBoolean:(jboolean)suppressEscaping
withEduStanfordNlpProcessLexedTokenFactory:(id<EduStanfordNlpProcessLexedTokenFactory>)tokenFactory {
  EduStanfordNlpProcessPTBTokenizer_initWithJavaIoReader_withBoolean_withBoolean_withBoolean_withEduStanfordNlpProcessLexedTokenFactory_(self, r, tokenizeNLs, invertible, suppressEscaping, tokenFactory);
  return self;
}

- (instancetype)initWithJavaIoReader:(JavaIoReader *)r
withEduStanfordNlpProcessLexedTokenFactory:(id<EduStanfordNlpProcessLexedTokenFactory>)tokenFactory
                        withNSString:(NSString *)options {
  EduStanfordNlpProcessPTBTokenizer_initWithJavaIoReader_withEduStanfordNlpProcessLexedTokenFactory_withNSString_(self, r, tokenFactory, options);
  return self;
}

- (id<EduStanfordNlpLingHasWord>)getNext {
  @try {
    return (id<EduStanfordNlpLingHasWord>) cast_check([((EduStanfordNlpProcessPTBLexer *) nil_chk(lexer_)) next], EduStanfordNlpLingHasWord_class_());
  }
  @catch (JavaIoIOException *e) {
    @throw new_EduStanfordNlpIoRuntimeIOException_initWithNSException_(e);
  }
}

+ (NSString *)getNewlineToken {
  return EduStanfordNlpProcessPTBTokenizer_getNewlineToken();
}

+ (NSString *)ptb2TextWithNSString:(NSString *)ptbText {
  return EduStanfordNlpProcessPTBTokenizer_ptb2TextWithNSString_(ptbText);
}

+ (NSString *)ptbToken2TextWithNSString:(NSString *)ptbText {
  return EduStanfordNlpProcessPTBTokenizer_ptbToken2TextWithNSString_(ptbText);
}

+ (jint)ptb2TextWithJavaIoReader:(JavaIoReader *)ptbText
                withJavaIoWriter:(JavaIoWriter *)w {
  return EduStanfordNlpProcessPTBTokenizer_ptb2TextWithJavaIoReader_withJavaIoWriter_(ptbText, w);
}

+ (void)untokWithJavaUtilList:(id<JavaUtilList>)inputFileList
             withJavaUtilList:(id<JavaUtilList>)outputFileList
                 withNSString:(NSString *)charset {
  EduStanfordNlpProcessPTBTokenizer_untokWithJavaUtilList_withJavaUtilList_withNSString_(inputFileList, outputFileList, charset);
}

+ (NSString *)ptb2TextWithJavaUtilList:(id<JavaUtilList>)ptbWords {
  return EduStanfordNlpProcessPTBTokenizer_ptb2TextWithJavaUtilList_(ptbWords);
}

+ (NSString *)labelList2TextWithJavaUtilList:(id<JavaUtilList>)ptbWords {
  return EduStanfordNlpProcessPTBTokenizer_labelList2TextWithJavaUtilList_(ptbWords);
}

+ (void)tokWithJavaUtilList:(id<JavaUtilList>)inputFileList
           withJavaUtilList:(id<JavaUtilList>)outputFileList
               withNSString:(NSString *)charset
   withJavaUtilRegexPattern:(JavaUtilRegexPattern *)parseInsidePattern
               withNSString:(NSString *)options
                withBoolean:(jboolean)preserveLines
                withBoolean:(jboolean)dump
                withBoolean:(jboolean)lowerCase {
  EduStanfordNlpProcessPTBTokenizer_tokWithJavaUtilList_withJavaUtilList_withNSString_withJavaUtilRegexPattern_withNSString_withBoolean_withBoolean_withBoolean_(inputFileList, outputFileList, charset, parseInsidePattern, options, preserveLines, dump, lowerCase);
}

+ (jint)tokReaderWithJavaIoReader:(JavaIoReader *)r
         withJavaIoBufferedWriter:(JavaIoBufferedWriter *)writer
         withJavaUtilRegexPattern:(JavaUtilRegexPattern *)parseInsidePattern
                     withNSString:(NSString *)options
                      withBoolean:(jboolean)preserveLines
                      withBoolean:(jboolean)dump
                      withBoolean:(jboolean)lowerCase {
  return EduStanfordNlpProcessPTBTokenizer_tokReaderWithJavaIoReader_withJavaIoBufferedWriter_withJavaUtilRegexPattern_withNSString_withBoolean_withBoolean_withBoolean_(r, writer, parseInsidePattern, options, preserveLines, dump, lowerCase);
}

+ (id<EduStanfordNlpProcessTokenizerFactory>)factory {
  return EduStanfordNlpProcessPTBTokenizer_factory();
}

+ (id<EduStanfordNlpProcessTokenizerFactory>)factoryWithBoolean:(jboolean)tokenizeNLs
                                                    withBoolean:(jboolean)invertible {
  return EduStanfordNlpProcessPTBTokenizer_factoryWithBoolean_withBoolean_(tokenizeNLs, invertible);
}

+ (id<EduStanfordNlpProcessTokenizerFactory>)coreLabelFactory {
  return EduStanfordNlpProcessPTBTokenizer_coreLabelFactory();
}

+ (id<EduStanfordNlpProcessTokenizerFactory>)factoryWithEduStanfordNlpProcessLexedTokenFactory:(id<EduStanfordNlpProcessLexedTokenFactory>)factory
                                                                                  withNSString:(NSString *)options {
  return EduStanfordNlpProcessPTBTokenizer_factoryWithEduStanfordNlpProcessLexedTokenFactory_withNSString_(factory, options);
}

+ (id<JavaUtilMap>)optionArgDefs {
  return EduStanfordNlpProcessPTBTokenizer_optionArgDefs();
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  EduStanfordNlpProcessPTBTokenizer_mainWithNSStringArray_(args);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LEduStanfordNlpProcessPTBTokenizer;", 0x9, 0, 1, -1, 2, -1, -1 },
    { NULL, "LEduStanfordNlpProcessPTBTokenizer;", 0x9, 0, 3, -1, 4, -1, -1 },
    { NULL, NULL, 0x2, -1, 5, -1, 6, -1, -1 },
    { NULL, NULL, 0x1, -1, 7, -1, 8, -1, -1 },
    { NULL, "LEduStanfordNlpLingHasWord;", 0x4, -1, -1, -1, 9, -1, -1 },
    { NULL, "LNSString;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 10, 11, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 12, 11, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 10, 13, 14, -1, -1, -1 },
    { NULL, "V", 0xa, 15, 16, 14, 17, -1, -1 },
    { NULL, "LNSString;", 0x9, 10, 18, -1, 19, -1, -1 },
    { NULL, "LNSString;", 0x9, 20, 18, -1, 21, -1, -1 },
    { NULL, "V", 0xa, 22, 23, 14, 24, -1, -1 },
    { NULL, "I", 0xa, 25, 26, 14, -1, -1, -1 },
    { NULL, "LEduStanfordNlpProcessTokenizerFactory;", 0x9, -1, -1, -1, 27, -1, -1 },
    { NULL, "LEduStanfordNlpProcessTokenizerFactory;", 0x9, 28, 29, -1, 30, -1, -1 },
    { NULL, "LEduStanfordNlpProcessTokenizerFactory;", 0x9, -1, -1, -1, 31, -1, -1 },
    { NULL, "LEduStanfordNlpProcessTokenizerFactory;", 0x9, 28, 32, -1, 33, -1, -1 },
    { NULL, "LJavaUtilMap;", 0xa, -1, -1, -1, 34, -1, -1 },
    { NULL, "V", 0x9, 35, 36, 14, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(newPTBTokenizerWithJavaIoReader:);
  methods[1].selector = @selector(newPTBTokenizerWithJavaIoReader:withBoolean:withBoolean:);
  methods[2].selector = @selector(initWithJavaIoReader:withBoolean:withBoolean:withBoolean:withEduStanfordNlpProcessLexedTokenFactory:);
  methods[3].selector = @selector(initWithJavaIoReader:withEduStanfordNlpProcessLexedTokenFactory:withNSString:);
  methods[4].selector = @selector(getNext);
  methods[5].selector = @selector(getNewlineToken);
  methods[6].selector = @selector(ptb2TextWithNSString:);
  methods[7].selector = @selector(ptbToken2TextWithNSString:);
  methods[8].selector = @selector(ptb2TextWithJavaIoReader:withJavaIoWriter:);
  methods[9].selector = @selector(untokWithJavaUtilList:withJavaUtilList:withNSString:);
  methods[10].selector = @selector(ptb2TextWithJavaUtilList:);
  methods[11].selector = @selector(labelList2TextWithJavaUtilList:);
  methods[12].selector = @selector(tokWithJavaUtilList:withJavaUtilList:withNSString:withJavaUtilRegexPattern:withNSString:withBoolean:withBoolean:withBoolean:);
  methods[13].selector = @selector(tokReaderWithJavaIoReader:withJavaIoBufferedWriter:withJavaUtilRegexPattern:withNSString:withBoolean:withBoolean:withBoolean:);
  methods[14].selector = @selector(factory);
  methods[15].selector = @selector(factoryWithBoolean:withBoolean:);
  methods[16].selector = @selector(coreLabelFactory);
  methods[17].selector = @selector(factoryWithEduStanfordNlpProcessLexedTokenFactory:withNSString:);
  methods[18].selector = @selector(optionArgDefs);
  methods[19].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "lexer_", "LEduStanfordNlpProcessPTBLexer;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "newPTBTokenizer", "LJavaIoReader;", "(Ljava/io/Reader;)Ledu/stanford/nlp/process/PTBTokenizer<Ledu/stanford/nlp/ling/Word;>;", "LJavaIoReader;ZZ", "(Ljava/io/Reader;ZZ)Ledu/stanford/nlp/process/PTBTokenizer<Ledu/stanford/nlp/ling/CoreLabel;>;", "LJavaIoReader;ZZZLEduStanfordNlpProcessLexedTokenFactory;", "(Ljava/io/Reader;ZZZLedu/stanford/nlp/process/LexedTokenFactory<TT;>;)V", "LJavaIoReader;LEduStanfordNlpProcessLexedTokenFactory;LNSString;", "(Ljava/io/Reader;Ledu/stanford/nlp/process/LexedTokenFactory<TT;>;Ljava/lang/String;)V", "()TT;", "ptb2Text", "LNSString;", "ptbToken2Text", "LJavaIoReader;LJavaIoWriter;", "LJavaIoIOException;", "untok", "LJavaUtilList;LJavaUtilList;LNSString;", "(Ljava/util/List<Ljava/lang/String;>;Ljava/util/List<Ljava/lang/String;>;Ljava/lang/String;)V", "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/String;>;)Ljava/lang/String;", "labelList2Text", "(Ljava/util/List<+Ledu/stanford/nlp/ling/HasWord;>;)Ljava/lang/String;", "tok", "LJavaUtilList;LJavaUtilList;LNSString;LJavaUtilRegexPattern;LNSString;ZZZ", "(Ljava/util/List<Ljava/lang/String;>;Ljava/util/List<Ljava/lang/String;>;Ljava/lang/String;Ljava/util/regex/Pattern;Ljava/lang/String;ZZZ)V", "tokReader", "LJavaIoReader;LJavaIoBufferedWriter;LJavaUtilRegexPattern;LNSString;ZZZ", "()Ledu/stanford/nlp/process/TokenizerFactory<Ledu/stanford/nlp/ling/Word;>;", "factory", "ZZ", "(ZZ)Ledu/stanford/nlp/process/TokenizerFactory<Ledu/stanford/nlp/ling/CoreLabel;>;", "()Ledu/stanford/nlp/process/TokenizerFactory<Ledu/stanford/nlp/ling/CoreLabel;>;", "LEduStanfordNlpProcessLexedTokenFactory;LNSString;", "<T::Ledu/stanford/nlp/ling/HasWord;>(Ledu/stanford/nlp/process/LexedTokenFactory<TT;>;Ljava/lang/String;)Ledu/stanford/nlp/process/TokenizerFactory<TT;>;", "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "main", "[LNSString;", "LEduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory;", "<T::Ledu/stanford/nlp/ling/HasWord;>Ledu/stanford/nlp/process/AbstractTokenizer<TT;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpProcessPTBTokenizer = { "PTBTokenizer", "edu.stanford.nlp.process", ptrTable, methods, fields, 7, 0x1, 20, 1, -1, 37, -1, 38, -1 };
  return &_EduStanfordNlpProcessPTBTokenizer;
}

@end

EduStanfordNlpProcessPTBTokenizer *EduStanfordNlpProcessPTBTokenizer_newPTBTokenizerWithJavaIoReader_(JavaIoReader *r) {
  EduStanfordNlpProcessPTBTokenizer_initialize();
  return new_EduStanfordNlpProcessPTBTokenizer_initWithJavaIoReader_withEduStanfordNlpProcessLexedTokenFactory_withNSString_(r, new_EduStanfordNlpProcessWordTokenFactory_init(), @"");
}

EduStanfordNlpProcessPTBTokenizer *EduStanfordNlpProcessPTBTokenizer_newPTBTokenizerWithJavaIoReader_withBoolean_withBoolean_(JavaIoReader *r, jboolean tokenizeNLs, jboolean invertible) {
  EduStanfordNlpProcessPTBTokenizer_initialize();
  return new_EduStanfordNlpProcessPTBTokenizer_initWithJavaIoReader_withBoolean_withBoolean_withBoolean_withEduStanfordNlpProcessLexedTokenFactory_(r, tokenizeNLs, invertible, false, new_EduStanfordNlpProcessCoreLabelTokenFactory_init());
}

void EduStanfordNlpProcessPTBTokenizer_initWithJavaIoReader_withBoolean_withBoolean_withBoolean_withEduStanfordNlpProcessLexedTokenFactory_(EduStanfordNlpProcessPTBTokenizer *self, JavaIoReader *r, jboolean tokenizeNLs, jboolean invertible, jboolean suppressEscaping, id<EduStanfordNlpProcessLexedTokenFactory> tokenFactory) {
  EduStanfordNlpProcessAbstractTokenizer_init(self);
  JavaLangStringBuilder *options = new_JavaLangStringBuilder_init();
  if (suppressEscaping) {
    (void) [options appendWithNSString:@"ptb3Escaping=false"];
  }
  else {
    (void) [options appendWithNSString:@"ptb3Escaping=true"];
  }
  if (tokenizeNLs) {
    (void) [options appendWithNSString:@",tokenizeNLs"];
  }
  if (invertible) {
    (void) [options appendWithNSString:@",invertible"];
  }
  self->lexer_ = new_EduStanfordNlpProcessPTBLexer_initWithJavaIoReader_withEduStanfordNlpProcessLexedTokenFactory_withNSString_(r, tokenFactory, [options description]);
}

EduStanfordNlpProcessPTBTokenizer *new_EduStanfordNlpProcessPTBTokenizer_initWithJavaIoReader_withBoolean_withBoolean_withBoolean_withEduStanfordNlpProcessLexedTokenFactory_(JavaIoReader *r, jboolean tokenizeNLs, jboolean invertible, jboolean suppressEscaping, id<EduStanfordNlpProcessLexedTokenFactory> tokenFactory) {
  J2OBJC_NEW_IMPL(EduStanfordNlpProcessPTBTokenizer, initWithJavaIoReader_withBoolean_withBoolean_withBoolean_withEduStanfordNlpProcessLexedTokenFactory_, r, tokenizeNLs, invertible, suppressEscaping, tokenFactory)
}

EduStanfordNlpProcessPTBTokenizer *create_EduStanfordNlpProcessPTBTokenizer_initWithJavaIoReader_withBoolean_withBoolean_withBoolean_withEduStanfordNlpProcessLexedTokenFactory_(JavaIoReader *r, jboolean tokenizeNLs, jboolean invertible, jboolean suppressEscaping, id<EduStanfordNlpProcessLexedTokenFactory> tokenFactory) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpProcessPTBTokenizer, initWithJavaIoReader_withBoolean_withBoolean_withBoolean_withEduStanfordNlpProcessLexedTokenFactory_, r, tokenizeNLs, invertible, suppressEscaping, tokenFactory)
}

void EduStanfordNlpProcessPTBTokenizer_initWithJavaIoReader_withEduStanfordNlpProcessLexedTokenFactory_withNSString_(EduStanfordNlpProcessPTBTokenizer *self, JavaIoReader *r, id<EduStanfordNlpProcessLexedTokenFactory> tokenFactory, NSString *options) {
  EduStanfordNlpProcessAbstractTokenizer_init(self);
  self->lexer_ = new_EduStanfordNlpProcessPTBLexer_initWithJavaIoReader_withEduStanfordNlpProcessLexedTokenFactory_withNSString_(r, tokenFactory, options);
}

EduStanfordNlpProcessPTBTokenizer *new_EduStanfordNlpProcessPTBTokenizer_initWithJavaIoReader_withEduStanfordNlpProcessLexedTokenFactory_withNSString_(JavaIoReader *r, id<EduStanfordNlpProcessLexedTokenFactory> tokenFactory, NSString *options) {
  J2OBJC_NEW_IMPL(EduStanfordNlpProcessPTBTokenizer, initWithJavaIoReader_withEduStanfordNlpProcessLexedTokenFactory_withNSString_, r, tokenFactory, options)
}

EduStanfordNlpProcessPTBTokenizer *create_EduStanfordNlpProcessPTBTokenizer_initWithJavaIoReader_withEduStanfordNlpProcessLexedTokenFactory_withNSString_(JavaIoReader *r, id<EduStanfordNlpProcessLexedTokenFactory> tokenFactory, NSString *options) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpProcessPTBTokenizer, initWithJavaIoReader_withEduStanfordNlpProcessLexedTokenFactory_withNSString_, r, tokenFactory, options)
}

NSString *EduStanfordNlpProcessPTBTokenizer_getNewlineToken() {
  EduStanfordNlpProcessPTBTokenizer_initialize();
  return EduStanfordNlpProcessPTBLexer_NEWLINE_TOKEN;
}

NSString *EduStanfordNlpProcessPTBTokenizer_ptb2TextWithNSString_(NSString *ptbText) {
  EduStanfordNlpProcessPTBTokenizer_initialize();
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_initWithInt_(((jint) [((NSString *) nil_chk(ptbText)) length]));
  EduStanfordNlpProcessPTB2TextLexer *lexer = new_EduStanfordNlpProcessPTB2TextLexer_initWithJavaIoReader_(new_JavaIoStringReader_initWithNSString_(ptbText));
  @try {
    for (NSString *token; (token = [lexer next]) != nil; ) {
      (void) [sb appendWithNSString:token];
    }
  }
  @catch (JavaIoIOException *e) {
    [((JavaIoIOException *) nil_chk(e)) printStackTrace];
  }
  return [sb description];
}

NSString *EduStanfordNlpProcessPTBTokenizer_ptbToken2TextWithNSString_(NSString *ptbText) {
  EduStanfordNlpProcessPTBTokenizer_initialize();
  return [((NSString *) nil_chk(EduStanfordNlpProcessPTBTokenizer_ptb2TextWithNSString_(JreStrcat("C$C", ' ', ptbText, ' ')))) trim];
}

jint EduStanfordNlpProcessPTBTokenizer_ptb2TextWithJavaIoReader_withJavaIoWriter_(JavaIoReader *ptbText, JavaIoWriter *w) {
  EduStanfordNlpProcessPTBTokenizer_initialize();
  jint numTokens = 0;
  EduStanfordNlpProcessPTB2TextLexer *lexer = new_EduStanfordNlpProcessPTB2TextLexer_initWithJavaIoReader_(ptbText);
  for (NSString *token; (token = [lexer next]) != nil; ) {
    numTokens++;
    [((JavaIoWriter *) nil_chk(w)) writeWithNSString:token];
  }
  return numTokens;
}

void EduStanfordNlpProcessPTBTokenizer_untokWithJavaUtilList_withJavaUtilList_withNSString_(id<JavaUtilList> inputFileList, id<JavaUtilList> outputFileList, NSString *charset) {
  EduStanfordNlpProcessPTBTokenizer_initialize();
  jlong start = JavaLangSystem_nanoTime();
  jint numTokens = 0;
  jint sz = [((id<JavaUtilList>) nil_chk(inputFileList)) size];
  if (sz == 0) {
    JavaIoReader *r = new_JavaIoInputStreamReader_initWithJavaIoInputStream_withNSString_(JreLoadStatic(JavaLangSystem, in), charset);
    JavaIoBufferedWriter *writer = new_JavaIoBufferedWriter_initWithJavaIoWriter_(new_JavaIoOutputStreamWriter_initWithJavaIoOutputStream_withNSString_(JreLoadStatic(JavaLangSystem, out), charset));
    numTokens = EduStanfordNlpProcessPTBTokenizer_ptb2TextWithJavaIoReader_withJavaIoWriter_(r, writer);
    [writer close];
  }
  else {
    for (jint j = 0; j < sz; j++) {
      JavaIoReader *r = EduStanfordNlpIoIOUtils_readerFromStringWithNSString_withNSString_([inputFileList getWithInt:j], charset);
      JavaIoBufferedWriter *writer;
      if (outputFileList == nil) {
        writer = new_JavaIoBufferedWriter_initWithJavaIoWriter_(new_JavaIoOutputStreamWriter_initWithJavaIoOutputStream_withNSString_(JreLoadStatic(JavaLangSystem, out), charset));
      }
      else {
        writer = new_JavaIoBufferedWriter_initWithJavaIoWriter_(new_JavaIoOutputStreamWriter_initWithJavaIoOutputStream_withNSString_(new_JavaIoFileOutputStream_initWithNSString_([outputFileList getWithInt:j]), charset));
      }
      numTokens += EduStanfordNlpProcessPTBTokenizer_ptb2TextWithJavaIoReader_withJavaIoWriter_(r, writer);
      [writer close];
      [((JavaIoReader *) nil_chk(r)) close];
    }
  }
  jlong duration = JavaLangSystem_nanoTime() - start;
  jdouble wordsPerSec = (jdouble) numTokens / ((jdouble) duration / 1000000000.0);
  (void) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printfWithNSString:@"PTBTokenizer untokenized %d tokens at %.2f tokens per second.%n" withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(numTokens), JavaLangDouble_valueOfWithDouble_(wordsPerSec) } count:2 type:NSObject_class_()]];
}

NSString *EduStanfordNlpProcessPTBTokenizer_ptb2TextWithJavaUtilList_(id<JavaUtilList> ptbWords) {
  EduStanfordNlpProcessPTBTokenizer_initialize();
  return EduStanfordNlpProcessPTBTokenizer_ptb2TextWithNSString_(EduStanfordNlpUtilStringUtils_joinWithJavaLangIterable_(ptbWords));
}

NSString *EduStanfordNlpProcessPTBTokenizer_labelList2TextWithJavaUtilList_(id<JavaUtilList> ptbWords) {
  EduStanfordNlpProcessPTBTokenizer_initialize();
  id<JavaUtilList> words = new_JavaUtilArrayList_init();
  for (id<EduStanfordNlpLingHasWord> __strong hw in nil_chk(ptbWords)) {
    [words addWithId:[((id<EduStanfordNlpLingHasWord>) nil_chk(hw)) word]];
  }
  return EduStanfordNlpProcessPTBTokenizer_ptb2TextWithJavaUtilList_(words);
}

void EduStanfordNlpProcessPTBTokenizer_tokWithJavaUtilList_withJavaUtilList_withNSString_withJavaUtilRegexPattern_withNSString_withBoolean_withBoolean_withBoolean_(id<JavaUtilList> inputFileList, id<JavaUtilList> outputFileList, NSString *charset, JavaUtilRegexPattern *parseInsidePattern, NSString *options, jboolean preserveLines, jboolean dump, jboolean lowerCase) {
  EduStanfordNlpProcessPTBTokenizer_initialize();
  jlong start = JavaLangSystem_nanoTime();
  jlong numTokens = 0;
  jint numFiles = [((id<JavaUtilList>) nil_chk(inputFileList)) size];
  if (numFiles == 0) {
    JavaIoReader *stdin_ = EduStanfordNlpIoIOUtils_readerFromStdinWithNSString_(charset);
    JavaIoBufferedWriter *writer = new_JavaIoBufferedWriter_initWithJavaIoWriter_(new_JavaIoOutputStreamWriter_initWithJavaIoOutputStream_withNSString_(JreLoadStatic(JavaLangSystem, out), charset));
    numTokens += EduStanfordNlpProcessPTBTokenizer_tokReaderWithJavaIoReader_withJavaIoBufferedWriter_withJavaUtilRegexPattern_withNSString_withBoolean_withBoolean_withBoolean_(stdin_, writer, parseInsidePattern, options, preserveLines, dump, lowerCase);
    EduStanfordNlpIoIOUtils_closeIgnoringExceptionsWithJavaIoCloseable_(writer);
  }
  else {
    for (jint j = 0; j < numFiles; j++) {
      JavaIoReader *r = EduStanfordNlpIoIOUtils_readerFromStringWithNSString_withNSString_([inputFileList getWithInt:j], charset);
      JavaIoBufferedWriter *out = (outputFileList == nil) ? new_JavaIoBufferedWriter_initWithJavaIoWriter_(new_JavaIoOutputStreamWriter_initWithJavaIoOutputStream_withNSString_(JreLoadStatic(JavaLangSystem, out), charset)) : new_JavaIoBufferedWriter_initWithJavaIoWriter_(new_JavaIoOutputStreamWriter_initWithJavaIoOutputStream_withNSString_(new_JavaIoFileOutputStream_initWithNSString_([((id<JavaUtilList>) nil_chk(outputFileList)) getWithInt:j]), charset));
      numTokens += EduStanfordNlpProcessPTBTokenizer_tokReaderWithJavaIoReader_withJavaIoBufferedWriter_withJavaUtilRegexPattern_withNSString_withBoolean_withBoolean_withBoolean_(r, out, parseInsidePattern, options, preserveLines, dump, lowerCase);
      [((JavaIoReader *) nil_chk(r)) close];
      EduStanfordNlpIoIOUtils_closeIgnoringExceptionsWithJavaIoCloseable_(out);
    }
  }
  jlong duration = JavaLangSystem_nanoTime() - start;
  jdouble wordsPerSec = (jdouble) numTokens / ((jdouble) duration / 1000000000.0);
  (void) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printfWithNSString:@"PTBTokenizer tokenized %d tokens at %.2f tokens per second.%n" withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ JavaLangLong_valueOfWithLong_(numTokens), JavaLangDouble_valueOfWithDouble_(wordsPerSec) } count:2 type:NSObject_class_()]];
}

jint EduStanfordNlpProcessPTBTokenizer_tokReaderWithJavaIoReader_withJavaIoBufferedWriter_withJavaUtilRegexPattern_withNSString_withBoolean_withBoolean_withBoolean_(JavaIoReader *r, JavaIoBufferedWriter *writer, JavaUtilRegexPattern *parseInsidePattern, NSString *options, jboolean preserveLines, jboolean dump, jboolean lowerCase) {
  EduStanfordNlpProcessPTBTokenizer_initialize();
  jint numTokens = 0;
  jboolean beginLine = true;
  jboolean printing = parseInsidePattern == nil;
  JavaUtilRegexMatcher *m = nil;
  if (parseInsidePattern != nil) {
    m = [parseInsidePattern matcherWithJavaLangCharSequence:@""];
  }
  for (EduStanfordNlpProcessPTBTokenizer *tokenizer = new_EduStanfordNlpProcessPTBTokenizer_initWithJavaIoReader_withEduStanfordNlpProcessLexedTokenFactory_withNSString_(r, new_EduStanfordNlpProcessCoreLabelTokenFactory_init(), options); [tokenizer hasNext]; ) {
    EduStanfordNlpLingCoreLabel *obj = ((EduStanfordNlpLingCoreLabel *) [tokenizer next]);
    NSString *origStr = [((EduStanfordNlpLingCoreLabel *) nil_chk(obj)) getWithIOSClass:EduStanfordNlpLingCoreAnnotations_TextAnnotation_class_()];
    NSString *str;
    if (lowerCase) {
      str = [((NSString *) nil_chk(origStr)) lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, ENGLISH)];
      (void) [obj setWithIOSClass:EduStanfordNlpLingCoreAnnotations_TextAnnotation_class_() withId:str];
    }
    else {
      str = origStr;
    }
    if (m != nil && [((JavaUtilRegexMatcher *) nil_chk([m resetWithJavaLangCharSequence:origStr])) matches]) {
      printing = [((NSString *) nil_chk([m groupWithInt:1])) isEmpty];
    }
    else if (printing) {
      if (dump) {
        str = [obj description];
      }
      if (preserveLines) {
        if ([((NSString *) nil_chk(EduStanfordNlpProcessPTBLexer_NEWLINE_TOKEN)) isEqual:origStr]) {
          beginLine = true;
          [((JavaIoBufferedWriter *) nil_chk(writer)) newLine];
        }
        else {
          if (!beginLine) {
            [((JavaIoBufferedWriter *) nil_chk(writer)) writeWithInt:' '];
          }
          else {
            beginLine = false;
          }
          [((JavaIoBufferedWriter *) nil_chk(writer)) writeWithNSString:str];
        }
      }
      else {
        [((JavaIoBufferedWriter *) nil_chk(writer)) writeWithNSString:str];
        [writer newLine];
      }
    }
    numTokens++;
  }
  return numTokens;
}

id<EduStanfordNlpProcessTokenizerFactory> EduStanfordNlpProcessPTBTokenizer_factory() {
  EduStanfordNlpProcessPTBTokenizer_initialize();
  return EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory_newTokenizerFactory();
}

id<EduStanfordNlpProcessTokenizerFactory> EduStanfordNlpProcessPTBTokenizer_factoryWithBoolean_withBoolean_(jboolean tokenizeNLs, jboolean invertible) {
  EduStanfordNlpProcessPTBTokenizer_initialize();
  return EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory_newPTBTokenizerFactoryWithBoolean_withBoolean_(tokenizeNLs, invertible);
}

id<EduStanfordNlpProcessTokenizerFactory> EduStanfordNlpProcessPTBTokenizer_coreLabelFactory() {
  EduStanfordNlpProcessPTBTokenizer_initialize();
  return EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory_newPTBTokenizerFactoryWithEduStanfordNlpProcessLexedTokenFactory_withNSString_(new_EduStanfordNlpProcessCoreLabelTokenFactory_init(), @"");
}

id<EduStanfordNlpProcessTokenizerFactory> EduStanfordNlpProcessPTBTokenizer_factoryWithEduStanfordNlpProcessLexedTokenFactory_withNSString_(id<EduStanfordNlpProcessLexedTokenFactory> factory, NSString *options) {
  EduStanfordNlpProcessPTBTokenizer_initialize();
  return new_EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory_initWithEduStanfordNlpProcessLexedTokenFactory_withNSString_(factory, options);
}

id<JavaUtilMap> EduStanfordNlpProcessPTBTokenizer_optionArgDefs() {
  EduStanfordNlpProcessPTBTokenizer_initialize();
  id<JavaUtilMap> optionArgDefs = EduStanfordNlpUtilGenerics_newHashMap();
  (void) [((id<JavaUtilMap>) nil_chk(optionArgDefs)) putWithId:@"options" withId:JavaLangInteger_valueOfWithInt_(1)];
  (void) [optionArgDefs putWithId:@"ioFileList" withId:JavaLangInteger_valueOfWithInt_(0)];
  (void) [optionArgDefs putWithId:@"lowerCase" withId:JavaLangInteger_valueOfWithInt_(0)];
  (void) [optionArgDefs putWithId:@"dump" withId:JavaLangInteger_valueOfWithInt_(0)];
  (void) [optionArgDefs putWithId:@"untok" withId:JavaLangInteger_valueOfWithInt_(0)];
  (void) [optionArgDefs putWithId:@"encoding" withId:JavaLangInteger_valueOfWithInt_(1)];
  (void) [optionArgDefs putWithId:@"parseInside" withId:JavaLangInteger_valueOfWithInt_(1)];
  (void) [optionArgDefs putWithId:@"preserveLines" withId:JavaLangInteger_valueOfWithInt_(0)];
  return optionArgDefs;
}

void EduStanfordNlpProcessPTBTokenizer_mainWithNSStringArray_(IOSObjectArray *args) {
  EduStanfordNlpProcessPTBTokenizer_initialize();
  JavaUtilProperties *options = EduStanfordNlpUtilStringUtils_argsToPropertiesWithNSStringArray_withJavaUtilMap_(args, EduStanfordNlpProcessPTBTokenizer_optionArgDefs());
  jboolean showHelp = EduStanfordNlpUtilPropertiesUtils_getBoolWithJavaUtilProperties_withNSString_withBoolean_(options, @"help", false);
  showHelp = EduStanfordNlpUtilPropertiesUtils_getBoolWithJavaUtilProperties_withNSString_withBoolean_(options, @"h", showHelp);
  if (showHelp) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"Usage: java edu.stanford.nlp.process.PTBTokenizer [options]* filename*"];
    [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:@"  options: -h|-preserveLines|-lowerCase|-dump|-ioFileList|-encoding|-parseInside|-options"];
    JavaLangSystem_exitWithInt_(0);
  }
  JavaLangStringBuilder *optionsSB = new_JavaLangStringBuilder_init();
  NSString *tokenizerOptions = [((JavaUtilProperties *) nil_chk(options)) getPropertyWithNSString:@"options" withNSString:nil];
  if (tokenizerOptions != nil) {
    (void) [optionsSB appendWithNSString:tokenizerOptions];
  }
  jboolean preserveLines = EduStanfordNlpUtilPropertiesUtils_getBoolWithJavaUtilProperties_withNSString_withBoolean_(options, @"preserveLines", false);
  if (preserveLines) {
    (void) [optionsSB appendWithNSString:@",tokenizeNLs"];
  }
  jboolean inputOutputFileList = EduStanfordNlpUtilPropertiesUtils_getBoolWithJavaUtilProperties_withNSString_withBoolean_(options, @"ioFileList", false);
  jboolean lowerCase = EduStanfordNlpUtilPropertiesUtils_getBoolWithJavaUtilProperties_withNSString_withBoolean_(options, @"lowerCase", false);
  jboolean dump = EduStanfordNlpUtilPropertiesUtils_getBoolWithJavaUtilProperties_withNSString_withBoolean_(options, @"dump", false);
  jboolean untok = EduStanfordNlpUtilPropertiesUtils_getBoolWithJavaUtilProperties_withNSString_withBoolean_(options, @"untok", false);
  NSString *charset = [options getPropertyWithNSString:@"encoding" withNSString:@"utf-8"];
  NSString *parseInsideKey = [options getPropertyWithNSString:@"parseInside" withNSString:nil];
  JavaUtilRegexPattern *parseInsidePattern = nil;
  if (parseInsideKey != nil) {
    @try {
      parseInsidePattern = JavaUtilRegexPattern_compileWithNSString_(JreStrcat("$$$", @"<(/?)(?:", parseInsideKey, @")(?:(?:\\s|\u00a0)[^>]*?)?>"));
    }
    @catch (JavaUtilRegexPatternSyntaxException *e) {
    }
  }
  NSString *parsedArgStr = [options getPropertyWithNSString:@"" withNSString:nil];
  IOSObjectArray *parsedArgs = (parsedArgStr == nil) ? nil : [((NSString *) nil_chk(parsedArgStr)) split:@"\\s+"];
  JavaUtilArrayList *inputFileList = new_JavaUtilArrayList_init();
  JavaUtilArrayList *outputFileList = nil;
  if (inputOutputFileList && parsedArgs != nil) {
    outputFileList = new_JavaUtilArrayList_init();
    {
      IOSObjectArray *a__ = parsedArgs;
      NSString * const *b__ = a__->buffer_;
      NSString * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        NSString *fileName = *b__++;
        JavaIoBufferedReader *r = EduStanfordNlpIoIOUtils_readerFromStringWithNSString_withNSString_(fileName, charset);
        for (NSString *inLine; (inLine = [((JavaIoBufferedReader *) nil_chk(r)) readLine]) != nil; ) {
          IOSObjectArray *fields = [((NSString *) nil_chk(inLine)) split:@"\\s+"];
          [inputFileList addWithId:IOSObjectArray_Get(nil_chk(fields), 0)];
          if (fields->size_ > 1) {
            [outputFileList addWithId:IOSObjectArray_Get(fields, 1)];
          }
          else {
            [outputFileList addWithId:JreStrcat("$$", IOSObjectArray_Get(fields, 0), @".tok")];
          }
        }
        [r close];
      }
    }
  }
  else if (parsedArgs != nil) {
    [inputFileList addAllWithJavaUtilCollection:JavaUtilArrays_asListWithNSObjectArray_(parsedArgs)];
  }
  if (untok) {
    EduStanfordNlpProcessPTBTokenizer_untokWithJavaUtilList_withJavaUtilList_withNSString_(inputFileList, outputFileList, charset);
  }
  else {
    EduStanfordNlpProcessPTBTokenizer_tokWithJavaUtilList_withJavaUtilList_withNSString_withJavaUtilRegexPattern_withNSString_withBoolean_withBoolean_withBoolean_(inputFileList, outputFileList, charset, parseInsidePattern, [optionsSB description], preserveLines, dump, lowerCase);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpProcessPTBTokenizer)

@implementation EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory

+ (id<EduStanfordNlpProcessTokenizerFactory>)newTokenizerFactory {
  return EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory_newTokenizerFactory();
}

+ (EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory *)newWordTokenizerFactoryWithNSString:(NSString *)options {
  return EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory_newWordTokenizerFactoryWithNSString_(options);
}

+ (EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory *)newCoreLabelTokenizerFactoryWithNSString:(NSString *)options {
  return EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory_newCoreLabelTokenizerFactoryWithNSString_(options);
}

+ (EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory *)newPTBTokenizerFactoryWithEduStanfordNlpProcessLexedTokenFactory:(id<EduStanfordNlpProcessLexedTokenFactory>)tokenFactory
                                                                                                               withNSString:(NSString *)options {
  return EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory_newPTBTokenizerFactoryWithEduStanfordNlpProcessLexedTokenFactory_withNSString_(tokenFactory, options);
}

+ (EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory *)newPTBTokenizerFactoryWithBoolean:(jboolean)tokenizeNLs
                                                                                 withBoolean:(jboolean)invertible {
  return EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory_newPTBTokenizerFactoryWithBoolean_withBoolean_(tokenizeNLs, invertible);
}

- (instancetype)initWithBoolean:(jboolean)tokenizeNLs
                    withBoolean:(jboolean)invertible
                    withBoolean:(jboolean)suppressEscaping
withEduStanfordNlpProcessLexedTokenFactory:(id<EduStanfordNlpProcessLexedTokenFactory>)factory {
  EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory_initWithBoolean_withBoolean_withBoolean_withEduStanfordNlpProcessLexedTokenFactory_(self, tokenizeNLs, invertible, suppressEscaping, factory);
  return self;
}

- (instancetype)initWithEduStanfordNlpProcessLexedTokenFactory:(id<EduStanfordNlpProcessLexedTokenFactory>)tokenFactory
                                                  withNSString:(NSString *)options {
  EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory_initWithEduStanfordNlpProcessLexedTokenFactory_withNSString_(self, tokenFactory, options);
  return self;
}

- (id<JavaUtilIterator>)getIteratorWithJavaIoReader:(JavaIoReader *)r {
  return [self getTokenizerWithJavaIoReader:r];
}

- (id<EduStanfordNlpProcessTokenizer>)getTokenizerWithJavaIoReader:(JavaIoReader *)r {
  return new_EduStanfordNlpProcessPTBTokenizer_initWithJavaIoReader_withEduStanfordNlpProcessLexedTokenFactory_withNSString_(r, factory_, options_);
}

- (id<EduStanfordNlpProcessTokenizer>)getTokenizerWithJavaIoReader:(JavaIoReader *)r
                                                      withNSString:(NSString *)extraOptions {
  if (options_ == nil || [options_ isEmpty]) {
    return new_EduStanfordNlpProcessPTBTokenizer_initWithJavaIoReader_withEduStanfordNlpProcessLexedTokenFactory_withNSString_(r, factory_, extraOptions);
  }
  else {
    return new_EduStanfordNlpProcessPTBTokenizer_initWithJavaIoReader_withEduStanfordNlpProcessLexedTokenFactory_withNSString_(r, factory_, JreStrcat("$C$", options_, ',', extraOptions));
  }
}

- (void)setOptionsWithNSString:(NSString *)options {
  self->options_ = options;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LEduStanfordNlpProcessTokenizerFactory;", 0x9, -1, -1, -1, 0, -1, -1 },
    { NULL, "LEduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory;", 0x9, 1, 2, -1, 3, -1, -1 },
    { NULL, "LEduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory;", 0x9, 4, 2, -1, 5, -1, -1 },
    { NULL, "LEduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory;", 0x9, 6, 7, -1, 8, -1, -1 },
    { NULL, "LEduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory;", 0x9, 6, 9, -1, 10, -1, -1 },
    { NULL, NULL, 0x2, -1, 11, -1, 12, -1, -1 },
    { NULL, NULL, 0x2, -1, 7, -1, 13, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, 14, 15, -1, 16, -1, -1 },
    { NULL, "LEduStanfordNlpProcessTokenizer;", 0x1, 17, 15, -1, 18, -1, -1 },
    { NULL, "LEduStanfordNlpProcessTokenizer;", 0x1, 17, 19, -1, 20, -1, -1 },
    { NULL, "V", 0x1, 21, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(newTokenizerFactory);
  methods[1].selector = @selector(newWordTokenizerFactoryWithNSString:);
  methods[2].selector = @selector(newCoreLabelTokenizerFactoryWithNSString:);
  methods[3].selector = @selector(newPTBTokenizerFactoryWithEduStanfordNlpProcessLexedTokenFactory:withNSString:);
  methods[4].selector = @selector(newPTBTokenizerFactoryWithBoolean:withBoolean:);
  methods[5].selector = @selector(initWithBoolean:withBoolean:withBoolean:withEduStanfordNlpProcessLexedTokenFactory:);
  methods[6].selector = @selector(initWithEduStanfordNlpProcessLexedTokenFactory:withNSString:);
  methods[7].selector = @selector(getIteratorWithJavaIoReader:);
  methods[8].selector = @selector(getTokenizerWithJavaIoReader:);
  methods[9].selector = @selector(getTokenizerWithJavaIoReader:withNSString:);
  methods[10].selector = @selector(setOptionsWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "factory_", "LEduStanfordNlpProcessLexedTokenFactory;", .constantValue.asLong = 0, 0x14, -1, -1, 22, -1 },
    { "options_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "()Ledu/stanford/nlp/process/TokenizerFactory<Ledu/stanford/nlp/ling/Word;>;", "newWordTokenizerFactory", "LNSString;", "(Ljava/lang/String;)Ledu/stanford/nlp/process/PTBTokenizer$PTBTokenizerFactory<Ledu/stanford/nlp/ling/Word;>;", "newCoreLabelTokenizerFactory", "(Ljava/lang/String;)Ledu/stanford/nlp/process/PTBTokenizer$PTBTokenizerFactory<Ledu/stanford/nlp/ling/CoreLabel;>;", "newPTBTokenizerFactory", "LEduStanfordNlpProcessLexedTokenFactory;LNSString;", "<T::Ledu/stanford/nlp/ling/HasWord;>(Ledu/stanford/nlp/process/LexedTokenFactory<TT;>;Ljava/lang/String;)Ledu/stanford/nlp/process/PTBTokenizer$PTBTokenizerFactory<TT;>;", "ZZ", "(ZZ)Ledu/stanford/nlp/process/PTBTokenizer$PTBTokenizerFactory<Ledu/stanford/nlp/ling/CoreLabel;>;", "ZZZLEduStanfordNlpProcessLexedTokenFactory;", "(ZZZLedu/stanford/nlp/process/LexedTokenFactory<TT;>;)V", "(Ledu/stanford/nlp/process/LexedTokenFactory<TT;>;Ljava/lang/String;)V", "getIterator", "LJavaIoReader;", "(Ljava/io/Reader;)Ljava/util/Iterator<TT;>;", "getTokenizer", "(Ljava/io/Reader;)Ledu/stanford/nlp/process/Tokenizer<TT;>;", "LJavaIoReader;LNSString;", "(Ljava/io/Reader;Ljava/lang/String;)Ledu/stanford/nlp/process/Tokenizer<TT;>;", "setOptions", "Ledu/stanford/nlp/process/LexedTokenFactory<TT;>;", "LEduStanfordNlpProcessPTBTokenizer;", "<T::Ledu/stanford/nlp/ling/HasWord;>Ljava/lang/Object;Ledu/stanford/nlp/process/TokenizerFactory<TT;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory = { "PTBTokenizerFactory", "edu.stanford.nlp.process", ptrTable, methods, fields, 7, 0x9, 11, 2, 23, -1, -1, 24, -1 };
  return &_EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory;
}

@end

id<EduStanfordNlpProcessTokenizerFactory> EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory_newTokenizerFactory() {
  EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory_initialize();
  return EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory_newPTBTokenizerFactoryWithEduStanfordNlpProcessLexedTokenFactory_withNSString_(new_EduStanfordNlpProcessWordTokenFactory_init(), @"");
}

EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory *EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory_newWordTokenizerFactoryWithNSString_(NSString *options) {
  EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory_initialize();
  return new_EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory_initWithEduStanfordNlpProcessLexedTokenFactory_withNSString_(new_EduStanfordNlpProcessWordTokenFactory_init(), options);
}

EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory *EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory_newCoreLabelTokenizerFactoryWithNSString_(NSString *options) {
  EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory_initialize();
  return new_EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory_initWithEduStanfordNlpProcessLexedTokenFactory_withNSString_(new_EduStanfordNlpProcessCoreLabelTokenFactory_init(), options);
}

EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory *EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory_newPTBTokenizerFactoryWithEduStanfordNlpProcessLexedTokenFactory_withNSString_(id<EduStanfordNlpProcessLexedTokenFactory> tokenFactory, NSString *options) {
  EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory_initialize();
  return new_EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory_initWithEduStanfordNlpProcessLexedTokenFactory_withNSString_(tokenFactory, options);
}

EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory *EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory_newPTBTokenizerFactoryWithBoolean_withBoolean_(jboolean tokenizeNLs, jboolean invertible) {
  EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory_initialize();
  return new_EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory_initWithBoolean_withBoolean_withBoolean_withEduStanfordNlpProcessLexedTokenFactory_(tokenizeNLs, invertible, false, new_EduStanfordNlpProcessCoreLabelTokenFactory_init());
}

void EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory_initWithBoolean_withBoolean_withBoolean_withEduStanfordNlpProcessLexedTokenFactory_(EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory *self, jboolean tokenizeNLs, jboolean invertible, jboolean suppressEscaping, id<EduStanfordNlpProcessLexedTokenFactory> factory) {
  NSObject_init(self);
  self->factory_ = factory;
  JavaLangStringBuilder *optionsSB = new_JavaLangStringBuilder_init();
  if (suppressEscaping) {
    (void) [optionsSB appendWithNSString:@"ptb3Escaping=false"];
  }
  else {
    (void) [optionsSB appendWithNSString:@"ptb3Escaping=true"];
  }
  if (tokenizeNLs) {
    (void) [optionsSB appendWithNSString:@",tokenizeNLs"];
  }
  if (invertible) {
    (void) [optionsSB appendWithNSString:@",invertible"];
  }
  self->options_ = [optionsSB description];
}

EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory *new_EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory_initWithBoolean_withBoolean_withBoolean_withEduStanfordNlpProcessLexedTokenFactory_(jboolean tokenizeNLs, jboolean invertible, jboolean suppressEscaping, id<EduStanfordNlpProcessLexedTokenFactory> factory) {
  J2OBJC_NEW_IMPL(EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory, initWithBoolean_withBoolean_withBoolean_withEduStanfordNlpProcessLexedTokenFactory_, tokenizeNLs, invertible, suppressEscaping, factory)
}

EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory *create_EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory_initWithBoolean_withBoolean_withBoolean_withEduStanfordNlpProcessLexedTokenFactory_(jboolean tokenizeNLs, jboolean invertible, jboolean suppressEscaping, id<EduStanfordNlpProcessLexedTokenFactory> factory) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory, initWithBoolean_withBoolean_withBoolean_withEduStanfordNlpProcessLexedTokenFactory_, tokenizeNLs, invertible, suppressEscaping, factory)
}

void EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory_initWithEduStanfordNlpProcessLexedTokenFactory_withNSString_(EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory *self, id<EduStanfordNlpProcessLexedTokenFactory> tokenFactory, NSString *options) {
  NSObject_init(self);
  self->factory_ = tokenFactory;
  self->options_ = options;
}

EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory *new_EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory_initWithEduStanfordNlpProcessLexedTokenFactory_withNSString_(id<EduStanfordNlpProcessLexedTokenFactory> tokenFactory, NSString *options) {
  J2OBJC_NEW_IMPL(EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory, initWithEduStanfordNlpProcessLexedTokenFactory_withNSString_, tokenFactory, options)
}

EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory *create_EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory_initWithEduStanfordNlpProcessLexedTokenFactory_withNSString_(id<EduStanfordNlpProcessLexedTokenFactory> tokenFactory, NSString *options) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory, initWithEduStanfordNlpProcessLexedTokenFactory_withNSString_, tokenFactory, options)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory)
