//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/trees/international/french/FrenchTreeNormalizer.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/international/french/FrenchMorphoFeatureSpecification.h"
#include "edu/stanford/nlp/international/morph/MorphoFeatureSpecification.h"
#include "edu/stanford/nlp/international/morph/MorphoFeatures.h"
#include "edu/stanford/nlp/ling/CoreLabel.h"
#include "edu/stanford/nlp/ling/HasTag.h"
#include "edu/stanford/nlp/ling/Label.h"
#include "edu/stanford/nlp/trees/BobChrisTreeNormalizer.h"
#include "edu/stanford/nlp/trees/Tree.h"
#include "edu/stanford/nlp/trees/TreeFactory.h"
#include "edu/stanford/nlp/trees/TreebankLanguagePack.h"
#include "edu/stanford/nlp/trees/international/french/FrenchTreeNormalizer.h"
#include "edu/stanford/nlp/trees/international/french/FrenchTreebankLanguagePack.h"
#include "java/io/PrintStream.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/System.h"
#include "java/util/Collections.h"
#include "java/util/List.h"
#include "java/util/function/Predicate.h"

@interface EduStanfordNlpTreesInternationalFrenchFrenchTreeNormalizer () {
 @public
  NSString *rootLabel_;
  EduStanfordNlpInternationalMorphMorphoFeatureSpecification *morpho_;
  jboolean ccTagset_;
}

+ (void)replacePOSTagWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
withEduStanfordNlpInternationalMorphMorphoFeatureSpecification:(EduStanfordNlpInternationalMorphMorphoFeatureSpecification *)morpho;

- (NSString *)normalizePreterminalWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t;

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpTreesInternationalFrenchFrenchTreeNormalizer, rootLabel_, NSString *)
J2OBJC_FIELD_SETTER(EduStanfordNlpTreesInternationalFrenchFrenchTreeNormalizer, morpho_, EduStanfordNlpInternationalMorphMorphoFeatureSpecification *)

inline jlong EduStanfordNlpTreesInternationalFrenchFrenchTreeNormalizer_get_serialVersionUID();
#define EduStanfordNlpTreesInternationalFrenchFrenchTreeNormalizer_serialVersionUID 7868735300308066991LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpTreesInternationalFrenchFrenchTreeNormalizer, serialVersionUID, jlong)

__attribute__((unused)) static void EduStanfordNlpTreesInternationalFrenchFrenchTreeNormalizer_replacePOSTagWithEduStanfordNlpTreesTree_withEduStanfordNlpInternationalMorphMorphoFeatureSpecification_(EduStanfordNlpTreesTree *t, EduStanfordNlpInternationalMorphMorphoFeatureSpecification *morpho);

__attribute__((unused)) static NSString *EduStanfordNlpTreesInternationalFrenchFrenchTreeNormalizer_normalizePreterminalWithEduStanfordNlpTreesTree_(EduStanfordNlpTreesInternationalFrenchFrenchTreeNormalizer *self, EduStanfordNlpTreesTree *t);

inline jlong EduStanfordNlpTreesInternationalFrenchFrenchTreeNormalizer_FrenchAOverAFilter_get_serialVersionUID();
#define EduStanfordNlpTreesInternationalFrenchFrenchTreeNormalizer_FrenchAOverAFilter_serialVersionUID 793800623099852951LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpTreesInternationalFrenchFrenchTreeNormalizer_FrenchAOverAFilter, serialVersionUID, jlong)

@interface EduStanfordNlpTreesInternationalFrenchFrenchTreeNormalizer_$1 : NSObject < JavaUtilFunctionPredicate >

- (jboolean)testWithId:(EduStanfordNlpTreesTree *)tree;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpTreesInternationalFrenchFrenchTreeNormalizer_$1)

inline jlong EduStanfordNlpTreesInternationalFrenchFrenchTreeNormalizer_$1_get_serialVersionUID();
#define EduStanfordNlpTreesInternationalFrenchFrenchTreeNormalizer_$1_serialVersionUID -22673346831392110LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpTreesInternationalFrenchFrenchTreeNormalizer_$1, serialVersionUID, jlong)

__attribute__((unused)) static void EduStanfordNlpTreesInternationalFrenchFrenchTreeNormalizer_$1_init(EduStanfordNlpTreesInternationalFrenchFrenchTreeNormalizer_$1 *self);

__attribute__((unused)) static EduStanfordNlpTreesInternationalFrenchFrenchTreeNormalizer_$1 *new_EduStanfordNlpTreesInternationalFrenchFrenchTreeNormalizer_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpTreesInternationalFrenchFrenchTreeNormalizer_$1 *create_EduStanfordNlpTreesInternationalFrenchFrenchTreeNormalizer_$1_init();

@implementation EduStanfordNlpTreesInternationalFrenchFrenchTreeNormalizer

- (instancetype)initWithBoolean:(jboolean)ccTagset {
  EduStanfordNlpTreesInternationalFrenchFrenchTreeNormalizer_initWithBoolean_(self, ccTagset);
  return self;
}

- (NSString *)normalizeTerminalWithNSString:(NSString *)terminal {
  if (terminal == nil) return terminal;
  if ([terminal isEqual:@")"]) return @"-RRB-";
  else if ([terminal isEqual:@"("]) return @"-LRB-";
  return [((NSString *) nil_chk([super normalizeTerminalWithNSString:terminal])) intern];
}

- (NSString *)normalizeNonterminalWithNSString:(NSString *)category {
  return [((NSString *) nil_chk([super normalizeNonterminalWithNSString:category])) intern];
}

+ (void)replacePOSTagWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
withEduStanfordNlpInternationalMorphMorphoFeatureSpecification:(EduStanfordNlpInternationalMorphMorphoFeatureSpecification *)morpho {
  EduStanfordNlpTreesInternationalFrenchFrenchTreeNormalizer_replacePOSTagWithEduStanfordNlpTreesTree_withEduStanfordNlpInternationalMorphMorphoFeatureSpecification_(t, morpho);
}

- (NSString *)normalizePreterminalWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t {
  return EduStanfordNlpTreesInternationalFrenchFrenchTreeNormalizer_normalizePreterminalWithEduStanfordNlpTreesTree_(self, t);
}

- (EduStanfordNlpTreesTree *)normalizeWholeTreeWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)tree
                                        withEduStanfordNlpTreesTreeFactory:(id<EduStanfordNlpTreesTreeFactory>)tf {
  tree = [((EduStanfordNlpTreesTree *) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(tree)) pruneWithJavaUtilFunctionPredicate:emptyFilter_ withEduStanfordNlpTreesTreeFactory:tf])) spliceOutWithJavaUtilFunctionPredicate:aOverAFilter_ withEduStanfordNlpTreesTreeFactory:tf];
  for (EduStanfordNlpTreesTree * __strong t in nil_chk(tree)) {
    if ([((EduStanfordNlpTreesTree *) nil_chk(t)) isPreTerminal]) {
      NSString *posStr = EduStanfordNlpTreesInternationalFrenchFrenchTreeNormalizer_normalizePreterminalWithEduStanfordNlpTreesTree_(self, t);
      [t setValueWithNSString:posStr];
      if ([EduStanfordNlpLingHasTag_class_() isInstance:[t label]]) [((id<EduStanfordNlpLingHasTag>) nil_chk(((id<EduStanfordNlpLingHasTag>) cast_check([t label], EduStanfordNlpLingHasTag_class_())))) setTagWithNSString:posStr];
    }
    else if ([t isLeaf]) {
      if ([((NSString *) nil_chk([t value])) contains:EduStanfordNlpInternationalMorphMorphoFeatureSpecification_MORPHO_MARK]) {
        IOSObjectArray *toks = [((NSString *) nil_chk([t value])) split:EduStanfordNlpInternationalMorphMorphoFeatureSpecification_MORPHO_MARK];
        if (((IOSObjectArray *) nil_chk(toks))->size_ != 2) (void) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printfWithNSString:@"%s: Word contains malformed morph annotation: %s%n" withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ [[self getClass] getName], [t value] } count:2 type:NSObject_class_()]];
        else if ([[t label] isKindOfClass:[EduStanfordNlpLingCoreLabel class]]) {
          [((EduStanfordNlpLingCoreLabel *) nil_chk(((EduStanfordNlpLingCoreLabel *) cast_chk([t label], [EduStanfordNlpLingCoreLabel class])))) setValueWithNSString:[((NSString *) nil_chk([((NSString *) nil_chk(IOSObjectArray_Get(toks, 0))) trim])) intern]];
          [((EduStanfordNlpLingCoreLabel *) nil_chk(((EduStanfordNlpLingCoreLabel *) cast_chk([t label], [EduStanfordNlpLingCoreLabel class])))) setWordWithNSString:[((NSString *) nil_chk([((NSString *) nil_chk(IOSObjectArray_Get(toks, 0))) trim])) intern]];
          [((EduStanfordNlpLingCoreLabel *) nil_chk(((EduStanfordNlpLingCoreLabel *) cast_chk([t label], [EduStanfordNlpLingCoreLabel class])))) setOriginalTextWithNSString:[((NSString *) nil_chk([((NSString *) nil_chk(IOSObjectArray_Get(toks, 1))) trim])) intern]];
        }
        else {
          (void) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printfWithNSString:@"%s: Cannot store morph analysis in non-CoreLabel: %s%n" withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ [[self getClass] getName], [[((id<EduStanfordNlpLingLabel>) nil_chk([t label])) getClass] getName] } count:2 type:NSObject_class_()]];
        }
      }
    }
  }
  while (tree != nil && ([tree value] == nil || [((NSString *) nil_chk([tree value])) isEqual:@""]) && [tree numChildren] <= 1) tree = [tree firstChild];
  if (tree != nil && ![((NSString *) nil_chk([tree value])) isEqual:rootLabel_]) tree = [((id<EduStanfordNlpTreesTreeFactory>) nil_chk(tf)) newTreeNodeWithNSString:rootLabel_ withJavaUtilList:JavaUtilCollections_singletonListWithId_(tree)];
  return tree;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 4, 5, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 6, 7, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x1, 8, 9, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithBoolean:);
  methods[1].selector = @selector(normalizeTerminalWithNSString:);
  methods[2].selector = @selector(normalizeNonterminalWithNSString:);
  methods[3].selector = @selector(replacePOSTagWithEduStanfordNlpTreesTree:withEduStanfordNlpInternationalMorphMorphoFeatureSpecification:);
  methods[4].selector = @selector(normalizePreterminalWithEduStanfordNlpTreesTree:);
  methods[5].selector = @selector(normalizeWholeTreeWithEduStanfordNlpTreesTree:withEduStanfordNlpTreesTreeFactory:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpTreesInternationalFrenchFrenchTreeNormalizer_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "rootLabel_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "morpho_", "LEduStanfordNlpInternationalMorphMorphoFeatureSpecification;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "ccTagset_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "Z", "normalizeTerminal", "LNSString;", "normalizeNonterminal", "replacePOSTag", "LEduStanfordNlpTreesTree;LEduStanfordNlpInternationalMorphMorphoFeatureSpecification;", "normalizePreterminal", "LEduStanfordNlpTreesTree;", "normalizeWholeTree", "LEduStanfordNlpTreesTree;LEduStanfordNlpTreesTreeFactory;", "LEduStanfordNlpTreesInternationalFrenchFrenchTreeNormalizer_FrenchAOverAFilter;" };
  static const J2ObjcClassInfo _EduStanfordNlpTreesInternationalFrenchFrenchTreeNormalizer = { "FrenchTreeNormalizer", "edu.stanford.nlp.trees.international.french", ptrTable, methods, fields, 7, 0x1, 6, 4, -1, 10, -1, -1, -1 };
  return &_EduStanfordNlpTreesInternationalFrenchFrenchTreeNormalizer;
}

@end

void EduStanfordNlpTreesInternationalFrenchFrenchTreeNormalizer_initWithBoolean_(EduStanfordNlpTreesInternationalFrenchFrenchTreeNormalizer *self, jboolean ccTagset) {
  EduStanfordNlpTreesBobChrisTreeNormalizer_initWithEduStanfordNlpTreesTreebankLanguagePack_(self, new_EduStanfordNlpTreesInternationalFrenchFrenchTreebankLanguagePack_init());
  self->morpho_ = new_EduStanfordNlpInternationalFrenchFrenchMorphoFeatureSpecification_init();
  self->rootLabel_ = [((id<EduStanfordNlpTreesTreebankLanguagePack>) nil_chk(self->tlp_)) startSymbol];
  self->ccTagset_ = ccTagset;
  self->aOverAFilter_ = new_EduStanfordNlpTreesInternationalFrenchFrenchTreeNormalizer_FrenchAOverAFilter_init();
  self->emptyFilter_ = new_EduStanfordNlpTreesInternationalFrenchFrenchTreeNormalizer_$1_init();
}

EduStanfordNlpTreesInternationalFrenchFrenchTreeNormalizer *new_EduStanfordNlpTreesInternationalFrenchFrenchTreeNormalizer_initWithBoolean_(jboolean ccTagset) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesInternationalFrenchFrenchTreeNormalizer, initWithBoolean_, ccTagset)
}

EduStanfordNlpTreesInternationalFrenchFrenchTreeNormalizer *create_EduStanfordNlpTreesInternationalFrenchFrenchTreeNormalizer_initWithBoolean_(jboolean ccTagset) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesInternationalFrenchFrenchTreeNormalizer, initWithBoolean_, ccTagset)
}

void EduStanfordNlpTreesInternationalFrenchFrenchTreeNormalizer_replacePOSTagWithEduStanfordNlpTreesTree_withEduStanfordNlpInternationalMorphMorphoFeatureSpecification_(EduStanfordNlpTreesTree *t, EduStanfordNlpInternationalMorphMorphoFeatureSpecification *morpho) {
  EduStanfordNlpTreesInternationalFrenchFrenchTreeNormalizer_initialize();
  if (![((EduStanfordNlpTreesTree *) nil_chk(t)) isPreTerminal]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Can only operate on preterminals");
  }
  if (!([[t label] isKindOfClass:[EduStanfordNlpLingCoreLabel class]])) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Only operates on CoreLabels");
  }
  EduStanfordNlpLingCoreLabel *label = (EduStanfordNlpLingCoreLabel *) cast_chk([t label], [EduStanfordNlpLingCoreLabel class]);
  EduStanfordNlpTreesTree *child = IOSObjectArray_Get(nil_chk([t children]), 0);
  if (!([[((EduStanfordNlpTreesTree *) nil_chk(child)) label] isKindOfClass:[EduStanfordNlpLingCoreLabel class]])) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Only operates on CoreLabels");
  }
  EduStanfordNlpLingCoreLabel *childLabel = (EduStanfordNlpLingCoreLabel *) cast_chk([child label], [EduStanfordNlpLingCoreLabel class]);
  NSString *morphStr = [((EduStanfordNlpLingCoreLabel *) nil_chk(childLabel)) originalText];
  if (morphStr == nil || [morphStr isEqual:@""]) {
    morphStr = [((EduStanfordNlpLingCoreLabel *) nil_chk(label)) value];
    NSString *subCat = [childLabel category];
    if (subCat != nil && ![@"" isEqual:subCat]) {
      (void) JreStrAppendStrong(&morphStr, "C$$", '-', subCat, @"--");
    }
    else {
      (void) JreStrAppendStrong(&morphStr, "$", @"---");
    }
  }
  EduStanfordNlpInternationalMorphMorphoFeatures *feats = [((EduStanfordNlpInternationalMorphMorphoFeatureSpecification *) nil_chk(morpho)) strToFeaturesWithNSString:morphStr];
  if ([((EduStanfordNlpInternationalMorphMorphoFeatures *) nil_chk(feats)) getAltTag] != nil && ![((NSString *) nil_chk([feats getAltTag])) isEqual:@""]) {
    [((EduStanfordNlpLingCoreLabel *) nil_chk(label)) setValueWithNSString:[feats getAltTag]];
    [label setTagWithNSString:[feats getAltTag]];
  }
}

NSString *EduStanfordNlpTreesInternationalFrenchFrenchTreeNormalizer_normalizePreterminalWithEduStanfordNlpTreesTree_(EduStanfordNlpTreesInternationalFrenchFrenchTreeNormalizer *self, EduStanfordNlpTreesTree *t) {
  if (self->ccTagset_) {
    EduStanfordNlpTreesInternationalFrenchFrenchTreeNormalizer_replacePOSTagWithEduStanfordNlpTreesTree_withEduStanfordNlpInternationalMorphMorphoFeatureSpecification_(t, self->morpho_);
  }
  if ([((id<EduStanfordNlpTreesTreebankLanguagePack>) nil_chk(self->tlp_)) isPunctuationWordWithNSString:[((EduStanfordNlpTreesTree *) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(t)) firstChild])) value]]) return [((NSString *) nil_chk(IOSObjectArray_Get(nil_chk([self->tlp_ punctuationTags]), 0))) intern];
  return [t value];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTreesInternationalFrenchFrenchTreeNormalizer)

@implementation EduStanfordNlpTreesInternationalFrenchFrenchTreeNormalizer_FrenchAOverAFilter

- (jboolean)testWithId:(EduStanfordNlpTreesTree *)t {
  if ([((EduStanfordNlpTreesTree *) nil_chk(t)) value] != nil && [((NSString *) nil_chk([t value])) isEqual:@"w"]) return false;
  if ([t isLeaf] || [t isPreTerminal]) return true;
  return !([t label] != nil && [((id<EduStanfordNlpLingLabel>) nil_chk([t label])) value] != nil && [((NSString *) nil_chk([((id<EduStanfordNlpLingLabel>) nil_chk([t label])) value])) isEqual:[((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk([t getChildWithInt:0])) label])) value]]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpTreesInternationalFrenchFrenchTreeNormalizer_FrenchAOverAFilter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilFunctionPredicate>)and__WithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)arg0 {
  return JavaUtilFunctionPredicate_and__WithJavaUtilFunctionPredicate_(self, arg0);
}

- (id<JavaUtilFunctionPredicate>)negate {
  return JavaUtilFunctionPredicate_negate(self);
}

- (id<JavaUtilFunctionPredicate>)or__WithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)arg0 {
  return JavaUtilFunctionPredicate_or__WithJavaUtilFunctionPredicate_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpTreesInternationalFrenchFrenchTreeNormalizer_FrenchAOverAFilter_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "test", "LEduStanfordNlpTreesTree;", "LEduStanfordNlpTreesInternationalFrenchFrenchTreeNormalizer;", "Ljava/lang/Object;Ljava/util/function/Predicate<Ledu/stanford/nlp/trees/Tree;>;Ljava/io/Serializable;" };
  static const J2ObjcClassInfo _EduStanfordNlpTreesInternationalFrenchFrenchTreeNormalizer_FrenchAOverAFilter = { "FrenchAOverAFilter", "edu.stanford.nlp.trees.international.french", ptrTable, methods, fields, 7, 0x9, 2, 1, 2, -1, -1, 3, -1 };
  return &_EduStanfordNlpTreesInternationalFrenchFrenchTreeNormalizer_FrenchAOverAFilter;
}

@end

void EduStanfordNlpTreesInternationalFrenchFrenchTreeNormalizer_FrenchAOverAFilter_init(EduStanfordNlpTreesInternationalFrenchFrenchTreeNormalizer_FrenchAOverAFilter *self) {
  NSObject_init(self);
}

EduStanfordNlpTreesInternationalFrenchFrenchTreeNormalizer_FrenchAOverAFilter *new_EduStanfordNlpTreesInternationalFrenchFrenchTreeNormalizer_FrenchAOverAFilter_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesInternationalFrenchFrenchTreeNormalizer_FrenchAOverAFilter, init)
}

EduStanfordNlpTreesInternationalFrenchFrenchTreeNormalizer_FrenchAOverAFilter *create_EduStanfordNlpTreesInternationalFrenchFrenchTreeNormalizer_FrenchAOverAFilter_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesInternationalFrenchFrenchTreeNormalizer_FrenchAOverAFilter, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTreesInternationalFrenchFrenchTreeNormalizer_FrenchAOverAFilter)

@implementation EduStanfordNlpTreesInternationalFrenchFrenchTreeNormalizer_$1

- (jboolean)testWithId:(EduStanfordNlpTreesTree *)tree {
  if ([((EduStanfordNlpTreesTree *) nil_chk(tree)) isPreTerminal] && ([((NSString *) nil_chk([((EduStanfordNlpTreesTree *) nil_chk([tree firstChild])) value])) isEqual:@""] || [((NSString *) nil_chk([((EduStanfordNlpTreesTree *) nil_chk([tree firstChild])) value])) isEqual:@"-NONE-"])) {
    return false;
  }
  return true;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpTreesInternationalFrenchFrenchTreeNormalizer_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilFunctionPredicate>)and__WithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)arg0 {
  return JavaUtilFunctionPredicate_and__WithJavaUtilFunctionPredicate_(self, arg0);
}

- (id<JavaUtilFunctionPredicate>)negate {
  return JavaUtilFunctionPredicate_negate(self);
}

- (id<JavaUtilFunctionPredicate>)or__WithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)arg0 {
  return JavaUtilFunctionPredicate_or__WithJavaUtilFunctionPredicate_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpTreesInternationalFrenchFrenchTreeNormalizer_$1_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "test", "LEduStanfordNlpTreesTree;", "LEduStanfordNlpTreesInternationalFrenchFrenchTreeNormalizer;", "initWithBoolean:", "Ljava/lang/Object;Ljava/util/function/Predicate<Ledu/stanford/nlp/trees/Tree;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpTreesInternationalFrenchFrenchTreeNormalizer_$1 = { "", "edu.stanford.nlp.trees.international.french", ptrTable, methods, fields, 7, 0x8008, 2, 1, 2, -1, 3, 4, -1 };
  return &_EduStanfordNlpTreesInternationalFrenchFrenchTreeNormalizer_$1;
}

@end

void EduStanfordNlpTreesInternationalFrenchFrenchTreeNormalizer_$1_init(EduStanfordNlpTreesInternationalFrenchFrenchTreeNormalizer_$1 *self) {
  NSObject_init(self);
}

EduStanfordNlpTreesInternationalFrenchFrenchTreeNormalizer_$1 *new_EduStanfordNlpTreesInternationalFrenchFrenchTreeNormalizer_$1_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesInternationalFrenchFrenchTreeNormalizer_$1, init)
}

EduStanfordNlpTreesInternationalFrenchFrenchTreeNormalizer_$1 *create_EduStanfordNlpTreesInternationalFrenchFrenchTreeNormalizer_$1_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesInternationalFrenchFrenchTreeNormalizer_$1, init)
}
