//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/trees/international/arabic/ArabicTreebankTokenizer.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/process/Tokenizer.h"
#include "edu/stanford/nlp/trees/PennTreebankTokenizer.h"
#include "edu/stanford/nlp/trees/international/arabic/ArabicTreebankTokenizer.h"
#include "java/io/FileReader.h"
#include "java/io/IOException.h"
#include "java/io/PrintStream.h"
#include "java/io/Reader.h"
#include "java/io/StreamTokenizer.h"
#include "java/lang/Double.h"
#include "java/lang/System.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@implementation EduStanfordNlpTreesInternationalArabicArabicTreebankTokenizer

- (instancetype)initWithJavaIoReader:(JavaIoReader *)r {
  EduStanfordNlpTreesInternationalArabicArabicTreebankTokenizer_initWithJavaIoReader_(self, r);
  return self;
}

- (NSString *)getNext {
  @try {
    while (true) {
      [((JavaIoStreamTokenizer *) nil_chk(st_)) nextToken];
      jint nextToken = st_->ttype_;
      {
        IOSCharArray *t;
        switch (nextToken) {
          case JavaIoStreamTokenizer_TT_WORD:
          if ([((NSString *) nil_chk(st_->sval_)) isEqual:@":::"] || [((NSString *) nil_chk(st_->sval_)) isEqual:@";;"]) {
            do {
              [st_ nextToken];
              nextToken = st_->ttype_;
            }
            while (nextToken != JavaIoStreamTokenizer_TT_EOL);
            continue;
          }
          else return st_->sval_;
          case JavaIoStreamTokenizer_TT_NUMBER:
          return JavaLangDouble_toStringWithDouble_(st_->nval_);
          case JavaIoStreamTokenizer_TT_EOL:
          continue;
          case JavaIoStreamTokenizer_TT_EOF:
          return nil;
          default:
          t = [IOSCharArray newArrayWithChars:(jchar[]){ (jchar) nextToken } count:1];
          return [NSString stringWithCharacters:t];
        }
      }
    }
  }
  @catch (JavaIoIOException *e) {
    (void) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printfWithNSString:@"%s: Unknown exception in input stream\n" withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ [[self getClass] getName] } count:1 type:NSObject_class_()]];
    [((JavaIoIOException *) nil_chk(e)) printStackTrace];
  }
  return nil;
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  EduStanfordNlpTreesInternationalArabicArabicTreebankTokenizer_mainWithNSStringArray_(args);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 1, 2, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaIoReader:);
  methods[1].selector = @selector(getNext);
  methods[2].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LJavaIoReader;", "main", "[LNSString;", "LJavaIoIOException;" };
  static const J2ObjcClassInfo _EduStanfordNlpTreesInternationalArabicArabicTreebankTokenizer = { "ArabicTreebankTokenizer", "edu.stanford.nlp.trees.international.arabic", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_EduStanfordNlpTreesInternationalArabicArabicTreebankTokenizer;
}

@end

void EduStanfordNlpTreesInternationalArabicArabicTreebankTokenizer_initWithJavaIoReader_(EduStanfordNlpTreesInternationalArabicArabicTreebankTokenizer *self, JavaIoReader *r) {
  EduStanfordNlpTreesPennTreebankTokenizer_initWithJavaIoReader_(self, r);
  [((JavaIoStreamTokenizer *) nil_chk(self->st_)) eolIsSignificantWithBoolean:true];
}

EduStanfordNlpTreesInternationalArabicArabicTreebankTokenizer *new_EduStanfordNlpTreesInternationalArabicArabicTreebankTokenizer_initWithJavaIoReader_(JavaIoReader *r) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesInternationalArabicArabicTreebankTokenizer, initWithJavaIoReader_, r)
}

EduStanfordNlpTreesInternationalArabicArabicTreebankTokenizer *create_EduStanfordNlpTreesInternationalArabicArabicTreebankTokenizer_initWithJavaIoReader_(JavaIoReader *r) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesInternationalArabicArabicTreebankTokenizer, initWithJavaIoReader_, r)
}

void EduStanfordNlpTreesInternationalArabicArabicTreebankTokenizer_mainWithNSStringArray_(IOSObjectArray *args) {
  EduStanfordNlpTreesInternationalArabicArabicTreebankTokenizer_initialize();
  id<EduStanfordNlpProcessTokenizer> att = new_EduStanfordNlpTreesInternationalArabicArabicTreebankTokenizer_initWithJavaIoReader_(new_JavaIoFileReader_initWithNSString_(IOSObjectArray_Get(nil_chk(args), 0)));
  while ([att hasNext]) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printWithNSString:[att next]];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTreesInternationalArabicArabicTreebankTokenizer)
