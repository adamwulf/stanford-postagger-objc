//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/trees/international/arabic/ArabicTreeNormalizer.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/international/arabic/pipeline/DefaultLexicalMapper.h"
#include "edu/stanford/nlp/international/morph/MorphoFeatureSpecification.h"
#include "edu/stanford/nlp/ling/CoreLabel.h"
#include "edu/stanford/nlp/ling/HasTag.h"
#include "edu/stanford/nlp/ling/Label.h"
#include "edu/stanford/nlp/trees/BobChrisTreeNormalizer.h"
#include "edu/stanford/nlp/trees/Tree.h"
#include "edu/stanford/nlp/trees/TreeFactory.h"
#include "edu/stanford/nlp/trees/TreebankLanguagePack.h"
#include "edu/stanford/nlp/trees/international/arabic/ArabicTreeNormalizer.h"
#include "edu/stanford/nlp/trees/international/arabic/ArabicTreebankLanguagePack.h"
#include "edu/stanford/nlp/trees/treebank/Mapper.h"
#include "edu/stanford/nlp/trees/tregex/TregexMatcher.h"
#include "edu/stanford/nlp/trees/tregex/TregexPattern.h"
#include "edu/stanford/nlp/util/Pair.h"
#include "java/io/PrintStream.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/List.h"
#include "java/util/function/Predicate.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"

@interface EduStanfordNlpTreesInternationalArabicArabicTreeNormalizer () {
 @public
  jboolean retainNPTmp_;
  jboolean retainNPSbj_;
  jboolean markPRDverb_;
  jboolean changeNoLabels_;
  jboolean retainPPClr_;
  JavaUtilRegexPattern *prdPattern_;
  EduStanfordNlpTreesTregexTregexPattern *prdVerbPattern_;
  EduStanfordNlpTreesTregexTregexPattern *npSbjPattern_;
  NSString *rootLabel_;
  id<EduStanfordNlpTreesTreebankMapper> lexMapper_;
}

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpTreesInternationalArabicArabicTreeNormalizer, prdPattern_, JavaUtilRegexPattern *)
J2OBJC_FIELD_SETTER(EduStanfordNlpTreesInternationalArabicArabicTreeNormalizer, prdVerbPattern_, EduStanfordNlpTreesTregexTregexPattern *)
J2OBJC_FIELD_SETTER(EduStanfordNlpTreesInternationalArabicArabicTreeNormalizer, npSbjPattern_, EduStanfordNlpTreesTregexTregexPattern *)
J2OBJC_FIELD_SETTER(EduStanfordNlpTreesInternationalArabicArabicTreeNormalizer, rootLabel_, NSString *)
J2OBJC_FIELD_SETTER(EduStanfordNlpTreesInternationalArabicArabicTreeNormalizer, lexMapper_, id<EduStanfordNlpTreesTreebankMapper>)

inline jlong EduStanfordNlpTreesInternationalArabicArabicTreeNormalizer_get_serialVersionUID();
#define EduStanfordNlpTreesInternationalArabicArabicTreeNormalizer_serialVersionUID -1592231121068698494LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpTreesInternationalArabicArabicTreeNormalizer, serialVersionUID, jlong)

inline jlong EduStanfordNlpTreesInternationalArabicArabicTreeNormalizer_ArabicEmptyFilter_get_serialVersionUID();
#define EduStanfordNlpTreesInternationalArabicArabicTreeNormalizer_ArabicEmptyFilter_serialVersionUID 7417844982953945964LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpTreesInternationalArabicArabicTreeNormalizer_ArabicEmptyFilter, serialVersionUID, jlong)

@implementation EduStanfordNlpTreesInternationalArabicArabicTreeNormalizer

- (instancetype)initWithBoolean:(jboolean)retainNPTmp
                    withBoolean:(jboolean)markPRDverb
                    withBoolean:(jboolean)changeNoLabels
                    withBoolean:(jboolean)retainNPSbj
                    withBoolean:(jboolean)retainPPClr {
  EduStanfordNlpTreesInternationalArabicArabicTreeNormalizer_initWithBoolean_withBoolean_withBoolean_withBoolean_withBoolean_(self, retainNPTmp, markPRDverb, changeNoLabels, retainNPSbj, retainPPClr);
  return self;
}

- (instancetype)initWithBoolean:(jboolean)retainNPTmp
                    withBoolean:(jboolean)markPRDverb
                    withBoolean:(jboolean)changeNoLabels {
  EduStanfordNlpTreesInternationalArabicArabicTreeNormalizer_initWithBoolean_withBoolean_withBoolean_(self, retainNPTmp, markPRDverb, changeNoLabels);
  return self;
}

- (instancetype)initWithBoolean:(jboolean)retainNPTmp
                    withBoolean:(jboolean)markPRDverb {
  EduStanfordNlpTreesInternationalArabicArabicTreeNormalizer_initWithBoolean_withBoolean_(self, retainNPTmp, markPRDverb);
  return self;
}

- (instancetype)initWithBoolean:(jboolean)retainNPTmp {
  EduStanfordNlpTreesInternationalArabicArabicTreeNormalizer_initWithBoolean_(self, retainNPTmp);
  return self;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpTreesInternationalArabicArabicTreeNormalizer_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)normalizeNonterminalWithNSString:(NSString *)category {
  NSString *normalizedString;
  if (changeNoLabels_) {
    normalizedString = category;
  }
  else if (retainNPTmp_ && category != nil && [category hasPrefix:@"NP-TMP"]) {
    normalizedString = @"NP-TMP";
  }
  else if (retainNPSbj_ && category != nil && [category hasPrefix:@"NP-SBJ"]) {
    normalizedString = @"NP-SBJ";
  }
  else if (retainPPClr_ && category != nil && [category hasPrefix:@"PP-CLR"]) {
    normalizedString = @"PP-CLR";
  }
  else if (markPRDverb_ && category != nil && [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(prdPattern_)) matcherWithJavaLangCharSequence:category])) matches]) {
    normalizedString = category;
  }
  else {
    normalizedString = [super normalizeNonterminalWithNSString:category];
  }
  return [((NSString *) nil_chk(normalizedString)) intern];
}

- (EduStanfordNlpTreesTree *)normalizeWholeTreeWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)tree
                                        withEduStanfordNlpTreesTreeFactory:(id<EduStanfordNlpTreesTreeFactory>)tf {
  tree = [((EduStanfordNlpTreesTree *) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(tree)) pruneWithJavaUtilFunctionPredicate:emptyFilter_ withEduStanfordNlpTreesTreeFactory:tf])) spliceOutWithJavaUtilFunctionPredicate:aOverAFilter_ withEduStanfordNlpTreesTreeFactory:tf];
  for (EduStanfordNlpTreesTree * __strong t in nil_chk(tree)) {
    if ([((EduStanfordNlpTreesTree *) nil_chk(t)) isLeaf]) {
      if ([((NSString *) nil_chk([t value])) contains:EduStanfordNlpInternationalMorphMorphoFeatureSpecification_MORPHO_MARK]) {
        IOSObjectArray *toks = [((NSString *) nil_chk([t value])) split:EduStanfordNlpInternationalMorphMorphoFeatureSpecification_MORPHO_MARK];
        if (((IOSObjectArray *) nil_chk(toks))->size_ != 2) (void) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printfWithNSString:@"%s: Word contains malformed morph annotation: %s%n" withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ [[self getClass] getName], [t value] } count:2 type:NSObject_class_()]];
        else if ([[t label] isKindOfClass:[EduStanfordNlpLingCoreLabel class]]) {
          [((EduStanfordNlpLingCoreLabel *) nil_chk(((EduStanfordNlpLingCoreLabel *) cast_chk([t label], [EduStanfordNlpLingCoreLabel class])))) setValueWithNSString:[((NSString *) nil_chk([((NSString *) nil_chk(IOSObjectArray_Get(toks, 0))) trim])) intern]];
          [((EduStanfordNlpLingCoreLabel *) nil_chk(((EduStanfordNlpLingCoreLabel *) cast_chk([t label], [EduStanfordNlpLingCoreLabel class])))) setWordWithNSString:[((NSString *) nil_chk([((NSString *) nil_chk(IOSObjectArray_Get(toks, 0))) trim])) intern]];
          EduStanfordNlpUtilPair *lemmaMorph = EduStanfordNlpInternationalMorphMorphoFeatureSpecification_splitMorphStringWithNSString_withNSString_(IOSObjectArray_Get(toks, 0), IOSObjectArray_Get(toks, 1));
          NSString *lemma = [((EduStanfordNlpUtilPair *) nil_chk(lemmaMorph)) first];
          NSString *morphAnalysis = [lemmaMorph second];
          if ([((NSString *) nil_chk(lemma)) isEqual:IOSObjectArray_Get(toks, 0)]) {
            [((EduStanfordNlpLingCoreLabel *) nil_chk(((EduStanfordNlpLingCoreLabel *) cast_chk([t label], [EduStanfordNlpLingCoreLabel class])))) setOriginalTextWithNSString:[((NSString *) nil_chk([((NSString *) nil_chk(IOSObjectArray_Get(toks, 1))) trim])) intern]];
          }
          else {
            NSString *newLemma = [((id<EduStanfordNlpTreesTreebankMapper>) nil_chk(lexMapper_)) mapWithNSString:nil withNSString:lemma];
            if (newLemma == nil || ((jint) [((NSString *) nil_chk([newLemma trim])) length]) == 0) {
              newLemma = lemma;
            }
            NSString *newMorphAnalysis = JreStrcat("$$$", newLemma, EduStanfordNlpInternationalMorphMorphoFeatureSpecification_LEMMA_MARK, morphAnalysis);
            [((EduStanfordNlpLingCoreLabel *) nil_chk(((EduStanfordNlpLingCoreLabel *) cast_chk([t label], [EduStanfordNlpLingCoreLabel class])))) setOriginalTextWithNSString:[newMorphAnalysis intern]];
          }
        }
        else {
          (void) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printfWithNSString:@"%s: Cannot store morph analysis in non-CoreLabel: %s%n" withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ [[self getClass] getName], [[((id<EduStanfordNlpLingLabel>) nil_chk([t label])) getClass] getName] } count:2 type:NSObject_class_()]];
        }
      }
    }
    else if ([t isPreTerminal]) {
      if ([t value] == nil || [((NSString *) nil_chk([t value])) isEqual:@""]) {
        (void) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printfWithNSString:@"%s: missing tag for\n%s\n" withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ [[self getClass] getName], [t pennString] } count:2 type:NSObject_class_()]];
      }
      else if ([EduStanfordNlpLingHasTag_class_() isInstance:[t label]]) {
        [((id<EduStanfordNlpLingHasTag>) nil_chk(((id<EduStanfordNlpLingHasTag>) cast_check([t label], EduStanfordNlpLingHasTag_class_())))) setTagWithNSString:[t value]];
      }
    }
    else {
      jint nk = [t numChildren];
      id<JavaUtilList> newKids = new_JavaUtilArrayList_initWithInt_(nk);
      for (jint j = 0; j < nk; j++) {
        EduStanfordNlpTreesTree *child = [t getChildWithInt:j];
        if ([((EduStanfordNlpTreesTree *) nil_chk(child)) isLeaf]) {
          (void) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printfWithNSString:@"%s: Splicing in DUMMYTAG for%n%s%n" withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ [[self getClass] getName], [t description] } count:2 type:NSObject_class_()]];
          [newKids addWithId:[((id<EduStanfordNlpTreesTreeFactory>) nil_chk(tf)) newTreeNodeWithNSString:@"DUMMYTAG" withJavaUtilList:JavaUtilCollections_singletonListWithId_(child)]];
        }
        else {
          [newKids addWithId:child];
        }
      }
      [t setChildrenWithJavaUtilList:newKids];
    }
  }
  if (markPRDverb_) {
    EduStanfordNlpTreesTregexTregexMatcher *m = [((EduStanfordNlpTreesTregexTregexPattern *) nil_chk(prdVerbPattern_)) matcherWithEduStanfordNlpTreesTree:tree];
    EduStanfordNlpTreesTree *match = nil;
    while ([((EduStanfordNlpTreesTregexTregexMatcher *) nil_chk(m)) find]) {
      if ([m getMatch] != match) {
        match = [m getMatch];
        [((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(match)) label])) setValueWithNSString:JreStrcat("$$", [((id<EduStanfordNlpLingLabel>) nil_chk([match label])) value], @"-PRDverb")];
        EduStanfordNlpTreesTree *prd = [m getNodeWithNSString:@"prd"];
        [((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(prd)) label])) setValueWithNSString:[super normalizeNonterminalWithNSString:[((id<EduStanfordNlpLingLabel>) nil_chk([prd label])) value]]];
      }
    }
  }
  if (retainNPSbj_) {
    EduStanfordNlpTreesTregexTregexMatcher *m = [((EduStanfordNlpTreesTregexTregexPattern *) nil_chk(npSbjPattern_)) matcherWithEduStanfordNlpTreesTree:tree];
    while ([((EduStanfordNlpTreesTregexTregexMatcher *) nil_chk(m)) find]) {
      EduStanfordNlpTreesTree *match = [m getMatch];
      [((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(match)) label])) setValueWithNSString:@"NP"];
    }
  }
  if ([tree isPreTerminal]) {
    NSString *val = [((id<EduStanfordNlpLingLabel>) nil_chk([tree label])) value];
    if ([((NSString *) nil_chk(val)) isEqual:@"CC"] || [val hasPrefix:@"PUNC"] || [val isEqual:@"CONJ"]) {
      (void) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printfWithNSString:@"%s: Bare tagged word being wrapped in FRAG\n%s\n" withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ [[self getClass] getName], [tree pennString] } count:2 type:NSObject_class_()]];
      tree = [((id<EduStanfordNlpTreesTreeFactory>) nil_chk(tf)) newTreeNodeWithNSString:@"FRAG" withJavaUtilList:JavaUtilCollections_singletonListWithId_(tree)];
    }
    else {
      (void) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printfWithNSString:@"%s: Bare tagged word\n%s\n" withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ [[self getClass] getName], [tree pennString] } count:2 type:NSObject_class_()]];
    }
  }
  while (tree != nil && ([tree value] == nil || [((NSString *) nil_chk([tree value])) isEqual:@""]) && [tree numChildren] <= 1) tree = [tree firstChild];
  if (tree != nil && ![((NSString *) nil_chk([tree value])) isEqual:rootLabel_]) tree = [((id<EduStanfordNlpTreesTreeFactory>) nil_chk(tf)) newTreeNodeWithNSString:rootLabel_ withJavaUtilList:JavaUtilCollections_singletonListWithId_(tree)];
  return tree;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x1, 6, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithBoolean:withBoolean:withBoolean:withBoolean:withBoolean:);
  methods[1].selector = @selector(initWithBoolean:withBoolean:withBoolean:);
  methods[2].selector = @selector(initWithBoolean:withBoolean:);
  methods[3].selector = @selector(initWithBoolean:);
  methods[4].selector = @selector(init);
  methods[5].selector = @selector(normalizeNonterminalWithNSString:);
  methods[6].selector = @selector(normalizeWholeTreeWithEduStanfordNlpTreesTree:withEduStanfordNlpTreesTreeFactory:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "retainNPTmp_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "retainNPSbj_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "markPRDverb_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "changeNoLabels_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "retainPPClr_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "prdPattern_", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "prdVerbPattern_", "LEduStanfordNlpTreesTregexTregexPattern;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "npSbjPattern_", "LEduStanfordNlpTreesTregexTregexPattern;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "rootLabel_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "lexMapper_", "LEduStanfordNlpTreesTreebankMapper;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpTreesInternationalArabicArabicTreeNormalizer_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ZZZZZ", "ZZZ", "ZZ", "Z", "normalizeNonterminal", "LNSString;", "normalizeWholeTree", "LEduStanfordNlpTreesTree;LEduStanfordNlpTreesTreeFactory;", "LEduStanfordNlpTreesInternationalArabicArabicTreeNormalizer_ArabicEmptyFilter;" };
  static const J2ObjcClassInfo _EduStanfordNlpTreesInternationalArabicArabicTreeNormalizer = { "ArabicTreeNormalizer", "edu.stanford.nlp.trees.international.arabic", ptrTable, methods, fields, 7, 0x1, 7, 11, -1, 8, -1, -1, -1 };
  return &_EduStanfordNlpTreesInternationalArabicArabicTreeNormalizer;
}

@end

void EduStanfordNlpTreesInternationalArabicArabicTreeNormalizer_initWithBoolean_withBoolean_withBoolean_withBoolean_withBoolean_(EduStanfordNlpTreesInternationalArabicArabicTreeNormalizer *self, jboolean retainNPTmp, jboolean markPRDverb, jboolean changeNoLabels, jboolean retainNPSbj, jboolean retainPPClr) {
  EduStanfordNlpTreesBobChrisTreeNormalizer_initWithEduStanfordNlpTreesTreebankLanguagePack_(self, new_EduStanfordNlpTreesInternationalArabicArabicTreebankLanguagePack_init());
  self->lexMapper_ = new_EduStanfordNlpInternationalArabicPipelineDefaultLexicalMapper_init();
  self->retainNPTmp_ = retainNPTmp;
  self->retainNPSbj_ = retainNPSbj;
  self->markPRDverb_ = markPRDverb;
  self->changeNoLabels_ = changeNoLabels;
  self->retainPPClr_ = retainPPClr;
  self->rootLabel_ = [((id<EduStanfordNlpTreesTreebankLanguagePack>) nil_chk(self->tlp_)) startSymbol];
  self->prdVerbPattern_ = EduStanfordNlpTreesTregexTregexPattern_compileWithNSString_(@"/^V[^P]/ > VP $ /-PRD$/=prd");
  self->prdPattern_ = JavaUtilRegexPattern_compileWithNSString_(@"^[A-Z]+-PRD");
  self->npSbjPattern_ = EduStanfordNlpTreesTregexTregexPattern_compileWithNSString_(@"/^NP-SBJ/ !> @VP");
  self->emptyFilter_ = new_EduStanfordNlpTreesInternationalArabicArabicTreeNormalizer_ArabicEmptyFilter_init();
}

EduStanfordNlpTreesInternationalArabicArabicTreeNormalizer *new_EduStanfordNlpTreesInternationalArabicArabicTreeNormalizer_initWithBoolean_withBoolean_withBoolean_withBoolean_withBoolean_(jboolean retainNPTmp, jboolean markPRDverb, jboolean changeNoLabels, jboolean retainNPSbj, jboolean retainPPClr) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesInternationalArabicArabicTreeNormalizer, initWithBoolean_withBoolean_withBoolean_withBoolean_withBoolean_, retainNPTmp, markPRDverb, changeNoLabels, retainNPSbj, retainPPClr)
}

EduStanfordNlpTreesInternationalArabicArabicTreeNormalizer *create_EduStanfordNlpTreesInternationalArabicArabicTreeNormalizer_initWithBoolean_withBoolean_withBoolean_withBoolean_withBoolean_(jboolean retainNPTmp, jboolean markPRDverb, jboolean changeNoLabels, jboolean retainNPSbj, jboolean retainPPClr) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesInternationalArabicArabicTreeNormalizer, initWithBoolean_withBoolean_withBoolean_withBoolean_withBoolean_, retainNPTmp, markPRDverb, changeNoLabels, retainNPSbj, retainPPClr)
}

void EduStanfordNlpTreesInternationalArabicArabicTreeNormalizer_initWithBoolean_withBoolean_withBoolean_(EduStanfordNlpTreesInternationalArabicArabicTreeNormalizer *self, jboolean retainNPTmp, jboolean markPRDverb, jboolean changeNoLabels) {
  EduStanfordNlpTreesInternationalArabicArabicTreeNormalizer_initWithBoolean_withBoolean_withBoolean_withBoolean_withBoolean_(self, retainNPTmp, markPRDverb, changeNoLabels, false, false);
}

EduStanfordNlpTreesInternationalArabicArabicTreeNormalizer *new_EduStanfordNlpTreesInternationalArabicArabicTreeNormalizer_initWithBoolean_withBoolean_withBoolean_(jboolean retainNPTmp, jboolean markPRDverb, jboolean changeNoLabels) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesInternationalArabicArabicTreeNormalizer, initWithBoolean_withBoolean_withBoolean_, retainNPTmp, markPRDverb, changeNoLabels)
}

EduStanfordNlpTreesInternationalArabicArabicTreeNormalizer *create_EduStanfordNlpTreesInternationalArabicArabicTreeNormalizer_initWithBoolean_withBoolean_withBoolean_(jboolean retainNPTmp, jboolean markPRDverb, jboolean changeNoLabels) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesInternationalArabicArabicTreeNormalizer, initWithBoolean_withBoolean_withBoolean_, retainNPTmp, markPRDverb, changeNoLabels)
}

void EduStanfordNlpTreesInternationalArabicArabicTreeNormalizer_initWithBoolean_withBoolean_(EduStanfordNlpTreesInternationalArabicArabicTreeNormalizer *self, jboolean retainNPTmp, jboolean markPRDverb) {
  EduStanfordNlpTreesInternationalArabicArabicTreeNormalizer_initWithBoolean_withBoolean_withBoolean_(self, retainNPTmp, markPRDverb, false);
}

EduStanfordNlpTreesInternationalArabicArabicTreeNormalizer *new_EduStanfordNlpTreesInternationalArabicArabicTreeNormalizer_initWithBoolean_withBoolean_(jboolean retainNPTmp, jboolean markPRDverb) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesInternationalArabicArabicTreeNormalizer, initWithBoolean_withBoolean_, retainNPTmp, markPRDverb)
}

EduStanfordNlpTreesInternationalArabicArabicTreeNormalizer *create_EduStanfordNlpTreesInternationalArabicArabicTreeNormalizer_initWithBoolean_withBoolean_(jboolean retainNPTmp, jboolean markPRDverb) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesInternationalArabicArabicTreeNormalizer, initWithBoolean_withBoolean_, retainNPTmp, markPRDverb)
}

void EduStanfordNlpTreesInternationalArabicArabicTreeNormalizer_initWithBoolean_(EduStanfordNlpTreesInternationalArabicArabicTreeNormalizer *self, jboolean retainNPTmp) {
  EduStanfordNlpTreesInternationalArabicArabicTreeNormalizer_initWithBoolean_withBoolean_(self, retainNPTmp, false);
}

EduStanfordNlpTreesInternationalArabicArabicTreeNormalizer *new_EduStanfordNlpTreesInternationalArabicArabicTreeNormalizer_initWithBoolean_(jboolean retainNPTmp) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesInternationalArabicArabicTreeNormalizer, initWithBoolean_, retainNPTmp)
}

EduStanfordNlpTreesInternationalArabicArabicTreeNormalizer *create_EduStanfordNlpTreesInternationalArabicArabicTreeNormalizer_initWithBoolean_(jboolean retainNPTmp) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesInternationalArabicArabicTreeNormalizer, initWithBoolean_, retainNPTmp)
}

void EduStanfordNlpTreesInternationalArabicArabicTreeNormalizer_init(EduStanfordNlpTreesInternationalArabicArabicTreeNormalizer *self) {
  EduStanfordNlpTreesInternationalArabicArabicTreeNormalizer_initWithBoolean_(self, false);
}

EduStanfordNlpTreesInternationalArabicArabicTreeNormalizer *new_EduStanfordNlpTreesInternationalArabicArabicTreeNormalizer_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesInternationalArabicArabicTreeNormalizer, init)
}

EduStanfordNlpTreesInternationalArabicArabicTreeNormalizer *create_EduStanfordNlpTreesInternationalArabicArabicTreeNormalizer_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesInternationalArabicArabicTreeNormalizer, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTreesInternationalArabicArabicTreeNormalizer)

@implementation EduStanfordNlpTreesInternationalArabicArabicTreeNormalizer_ArabicEmptyFilter

- (jboolean)testWithId:(EduStanfordNlpTreesTree *)t {
  if ([((EduStanfordNlpTreesTree *) nil_chk(t)) isPreTerminal] && ([((NSString *) nil_chk([t value])) isEqual:@"PRON_1S"] || [((NSString *) nil_chk([t value])) isEqual:@"PRP"]) && ([((NSString *) nil_chk([((EduStanfordNlpTreesTree *) nil_chk([t firstChild])) value])) isEqual:@"nullp"] || [((NSString *) nil_chk([((EduStanfordNlpTreesTree *) nil_chk([t firstChild])) value])) isEqual:@"\u0646\u0644\u0644\u0629"] || [((NSString *) nil_chk([((EduStanfordNlpTreesTree *) nil_chk([t firstChild])) value])) isEqual:@"-~a"])) return false;
  else if ([t isPreTerminal] && [t value] != nil && [((NSString *) nil_chk([t value])) isEqual:@"-NONE-"]) return false;
  return true;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpTreesInternationalArabicArabicTreeNormalizer_ArabicEmptyFilter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilFunctionPredicate>)and__WithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)arg0 {
  return JavaUtilFunctionPredicate_and__WithJavaUtilFunctionPredicate_(self, arg0);
}

- (id<JavaUtilFunctionPredicate>)negate {
  return JavaUtilFunctionPredicate_negate(self);
}

- (id<JavaUtilFunctionPredicate>)or__WithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)arg0 {
  return JavaUtilFunctionPredicate_or__WithJavaUtilFunctionPredicate_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpTreesInternationalArabicArabicTreeNormalizer_ArabicEmptyFilter_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "test", "LEduStanfordNlpTreesTree;", "LEduStanfordNlpTreesInternationalArabicArabicTreeNormalizer;", "Ljava/lang/Object;Ljava/util/function/Predicate<Ledu/stanford/nlp/trees/Tree;>;Ljava/io/Serializable;" };
  static const J2ObjcClassInfo _EduStanfordNlpTreesInternationalArabicArabicTreeNormalizer_ArabicEmptyFilter = { "ArabicEmptyFilter", "edu.stanford.nlp.trees.international.arabic", ptrTable, methods, fields, 7, 0x9, 2, 1, 2, -1, -1, 3, -1 };
  return &_EduStanfordNlpTreesInternationalArabicArabicTreeNormalizer_ArabicEmptyFilter;
}

@end

void EduStanfordNlpTreesInternationalArabicArabicTreeNormalizer_ArabicEmptyFilter_init(EduStanfordNlpTreesInternationalArabicArabicTreeNormalizer_ArabicEmptyFilter *self) {
  NSObject_init(self);
}

EduStanfordNlpTreesInternationalArabicArabicTreeNormalizer_ArabicEmptyFilter *new_EduStanfordNlpTreesInternationalArabicArabicTreeNormalizer_ArabicEmptyFilter_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesInternationalArabicArabicTreeNormalizer_ArabicEmptyFilter, init)
}

EduStanfordNlpTreesInternationalArabicArabicTreeNormalizer_ArabicEmptyFilter *create_EduStanfordNlpTreesInternationalArabicArabicTreeNormalizer_ArabicEmptyFilter_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesInternationalArabicArabicTreeNormalizer_ArabicEmptyFilter, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTreesInternationalArabicArabicTreeNormalizer_ArabicEmptyFilter)
