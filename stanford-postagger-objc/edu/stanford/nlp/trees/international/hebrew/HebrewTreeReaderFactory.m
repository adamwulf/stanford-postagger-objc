//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/trees/international/hebrew/HebrewTreeReaderFactory.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/trees/LabeledScoredTreeFactory.h"
#include "edu/stanford/nlp/trees/PennTreeReader.h"
#include "edu/stanford/nlp/trees/PennTreebankTokenizer.h"
#include "edu/stanford/nlp/trees/Tree.h"
#include "edu/stanford/nlp/trees/TreeReader.h"
#include "edu/stanford/nlp/trees/TreeReaderFactory.h"
#include "edu/stanford/nlp/trees/TreebankLanguagePack.h"
#include "edu/stanford/nlp/trees/international/hebrew/HebrewTreeNormalizer.h"
#include "edu/stanford/nlp/trees/international/hebrew/HebrewTreeReaderFactory.h"
#include "edu/stanford/nlp/trees/international/hebrew/HebrewTreebankLanguagePack.h"
#include "java/io/BufferedReader.h"
#include "java/io/File.h"
#include "java/io/FileInputStream.h"
#include "java/io/FileNotFoundException.h"
#include "java/io/IOException.h"
#include "java/io/InputStreamReader.h"
#include "java/io/PrintStream.h"
#include "java/io/Reader.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"

inline jlong EduStanfordNlpTreesInternationalHebrewHebrewTreeReaderFactory_get_serialVersionUID();
#define EduStanfordNlpTreesInternationalHebrewHebrewTreeReaderFactory_serialVersionUID 818065349424602548LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpTreesInternationalHebrewHebrewTreeReaderFactory, serialVersionUID, jlong)

@implementation EduStanfordNlpTreesInternationalHebrewHebrewTreeReaderFactory

- (id<EduStanfordNlpTreesTreeReader>)newTreeReaderWithJavaIoReader:(JavaIoReader *)inArg {
  return new_EduStanfordNlpTreesPennTreeReader_initWithJavaIoReader_withEduStanfordNlpTreesTreeFactory_withEduStanfordNlpTreesTreeNormalizer_withEduStanfordNlpProcessTokenizer_(inArg, new_EduStanfordNlpTreesLabeledScoredTreeFactory_init(), new_EduStanfordNlpTreesInternationalHebrewHebrewTreeNormalizer_init(), new_EduStanfordNlpTreesPennTreebankTokenizer_initWithJavaIoReader_(inArg));
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  EduStanfordNlpTreesInternationalHebrewHebrewTreeReaderFactory_mainWithNSStringArray_(args);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpTreesInternationalHebrewHebrewTreeReaderFactory_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LEduStanfordNlpTreesTreeReader;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(newTreeReaderWithJavaIoReader:);
  methods[1].selector = @selector(mainWithNSStringArray:);
  methods[2].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpTreesInternationalHebrewHebrewTreeReaderFactory_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "newTreeReader", "LJavaIoReader;", "main", "[LNSString;" };
  static const J2ObjcClassInfo _EduStanfordNlpTreesInternationalHebrewHebrewTreeReaderFactory = { "HebrewTreeReaderFactory", "edu.stanford.nlp.trees.international.hebrew", ptrTable, methods, fields, 7, 0x1, 3, 1, -1, -1, -1, -1, -1 };
  return &_EduStanfordNlpTreesInternationalHebrewHebrewTreeReaderFactory;
}

@end

void EduStanfordNlpTreesInternationalHebrewHebrewTreeReaderFactory_mainWithNSStringArray_(IOSObjectArray *args) {
  EduStanfordNlpTreesInternationalHebrewHebrewTreeReaderFactory_initialize();
  if (((IOSObjectArray *) nil_chk(args))->size_ != 1) {
    (void) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printfWithNSString:@"Usage: java %s tree_file > trees%n" withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ [EduStanfordNlpTreesInternationalHebrewHebrewTreeReaderFactory_class_() getName] } count:1 type:NSObject_class_()]];
    JavaLangSystem_exitWithInt_(-1);
  }
  id<EduStanfordNlpTreesTreebankLanguagePack> tlp = new_EduStanfordNlpTreesInternationalHebrewHebrewTreebankLanguagePack_init();
  JavaIoFile *treeFile = new_JavaIoFile_initWithNSString_(IOSObjectArray_Get(args, 0));
  @try {
    id<EduStanfordNlpTreesTreeReaderFactory> trf = new_EduStanfordNlpTreesInternationalHebrewHebrewTreeReaderFactory_init();
    JavaIoBufferedReader *br = new_JavaIoBufferedReader_initWithJavaIoReader_(new_JavaIoInputStreamReader_initWithJavaIoInputStream_withNSString_(new_JavaIoFileInputStream_initWithJavaIoFile_(treeFile), [tlp getEncoding]));
    id<EduStanfordNlpTreesTreeReader> tr = [trf newTreeReaderWithJavaIoReader:br];
    jint numTrees = 0;
    for (EduStanfordNlpTreesTree *t; ((t = [((id<EduStanfordNlpTreesTreeReader>) nil_chk(tr)) readTree]) != nil); numTrees++) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:[((EduStanfordNlpTreesTree *) nil_chk(t)) description]];
    [tr close];
    (void) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printfWithNSString:@"Processed %d trees.%n" withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(numTrees) } count:1 type:NSObject_class_()]];
  }
  @catch (JavaIoUnsupportedEncodingException *e) {
    [((JavaIoUnsupportedEncodingException *) nil_chk(e)) printStackTrace];
  }
  @catch (JavaIoFileNotFoundException *e) {
    [((JavaIoFileNotFoundException *) nil_chk(e)) printStackTrace];
  }
  @catch (JavaIoIOException *e) {
    [((JavaIoIOException *) nil_chk(e)) printStackTrace];
  }
}

void EduStanfordNlpTreesInternationalHebrewHebrewTreeReaderFactory_init(EduStanfordNlpTreesInternationalHebrewHebrewTreeReaderFactory *self) {
  NSObject_init(self);
}

EduStanfordNlpTreesInternationalHebrewHebrewTreeReaderFactory *new_EduStanfordNlpTreesInternationalHebrewHebrewTreeReaderFactory_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesInternationalHebrewHebrewTreeReaderFactory, init)
}

EduStanfordNlpTreesInternationalHebrewHebrewTreeReaderFactory *create_EduStanfordNlpTreesInternationalHebrewHebrewTreeReaderFactory_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesInternationalHebrewHebrewTreeReaderFactory, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTreesInternationalHebrewHebrewTreeReaderFactory)
