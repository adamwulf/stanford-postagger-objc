//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/trees/international/pennchinese/CHTBLexer.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/trees/international/pennchinese/CHTBLexer.h"
#include "java/io/InputStream.h"
#include "java/io/InputStreamReader.h"
#include "java/io/OutputStreamWriter.h"
#include "java/io/PrintStream.h"
#include "java/io/PrintWriter.h"
#include "java/io/Reader.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/lang/ArrayIndexOutOfBoundsException.h"
#include "java/lang/Error.h"
#include "java/lang/System.h"
#include "java/nio/charset/Charset.h"

@interface EduStanfordNlpTreesInternationalPennchineseCHTBLexer () {
 @public
  JavaIoReader *zzReader_;
  jint zzState_;
  jint zzLexicalState_;
  IOSCharArray *zzBuffer_;
  jint zzMarkedPos_;
  jint zzCurrentPos_;
  jint zzStartRead_;
  jint zzEndRead_;
  jint yyline_;
  jint yychar_;
  jint yycolumn_;
  jboolean zzAtBOL_;
  jboolean zzAtEOF_;
  jboolean zzEOFDone_;
}

+ (IOSIntArray *)zzUnpackAction;

+ (jint)zzUnpackActionWithNSString:(NSString *)packed
                           withInt:(jint)offset
                      withIntArray:(IOSIntArray *)result;

+ (IOSIntArray *)zzUnpackRowMap;

+ (jint)zzUnpackRowMapWithNSString:(NSString *)packed
                           withInt:(jint)offset
                      withIntArray:(IOSIntArray *)result;

+ (IOSIntArray *)zzUnpackTrans;

+ (jint)zzUnpackTransWithNSString:(NSString *)packed
                          withInt:(jint)offset
                     withIntArray:(IOSIntArray *)result;

+ (IOSIntArray *)zzUnpackAttribute;

+ (jint)zzUnpackAttributeWithNSString:(NSString *)packed
                              withInt:(jint)offset
                         withIntArray:(IOSIntArray *)result;

+ (void)reportErrorWithNSString:(NSString *)yytext;

+ (IOSCharArray *)zzUnpackCMapWithNSString:(NSString *)packed;

- (jboolean)zzRefill;

- (void)zzScanErrorWithInt:(jint)errorCode;

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpTreesInternationalPennchineseCHTBLexer, zzReader_, JavaIoReader *)
J2OBJC_FIELD_SETTER(EduStanfordNlpTreesInternationalPennchineseCHTBLexer, zzBuffer_, IOSCharArray *)

inline jint EduStanfordNlpTreesInternationalPennchineseCHTBLexer_get_ZZ_BUFFERSIZE();
#define EduStanfordNlpTreesInternationalPennchineseCHTBLexer_ZZ_BUFFERSIZE 16384
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpTreesInternationalPennchineseCHTBLexer, ZZ_BUFFERSIZE, jint)

inline IOSIntArray *EduStanfordNlpTreesInternationalPennchineseCHTBLexer_get_ZZ_LEXSTATE();
static IOSIntArray *EduStanfordNlpTreesInternationalPennchineseCHTBLexer_ZZ_LEXSTATE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpTreesInternationalPennchineseCHTBLexer, ZZ_LEXSTATE, IOSIntArray *)

inline NSString *EduStanfordNlpTreesInternationalPennchineseCHTBLexer_get_ZZ_CMAP_PACKED();
static NSString *EduStanfordNlpTreesInternationalPennchineseCHTBLexer_ZZ_CMAP_PACKED;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpTreesInternationalPennchineseCHTBLexer, ZZ_CMAP_PACKED, NSString *)

inline IOSCharArray *EduStanfordNlpTreesInternationalPennchineseCHTBLexer_get_ZZ_CMAP();
static IOSCharArray *EduStanfordNlpTreesInternationalPennchineseCHTBLexer_ZZ_CMAP;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpTreesInternationalPennchineseCHTBLexer, ZZ_CMAP, IOSCharArray *)

inline IOSIntArray *EduStanfordNlpTreesInternationalPennchineseCHTBLexer_get_ZZ_ACTION();
static IOSIntArray *EduStanfordNlpTreesInternationalPennchineseCHTBLexer_ZZ_ACTION;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpTreesInternationalPennchineseCHTBLexer, ZZ_ACTION, IOSIntArray *)

inline NSString *EduStanfordNlpTreesInternationalPennchineseCHTBLexer_get_ZZ_ACTION_PACKED_0();
static NSString *EduStanfordNlpTreesInternationalPennchineseCHTBLexer_ZZ_ACTION_PACKED_0 = @"\t\x00\x02\x01\x01\x02\x01\x01\x03\x02\x07\x03\x06\x01\t\x00\x01\x04\x06\x01\x01\x04\t\x00\x05\x01\t\x00\x07\x01\x08\x00\x01\x01\x01\x05\x05\x01\x05\x00\x01\x06\x04\x00\x02\x01\x01\x07\x01\x01\x01\x08\x01\x01\x02\x00\x01\t\x04\x00\x01\n\x02\x00\x01\x0b\x02\x01\x01\x00\x02\x01\x01\x0c\x02\x00\x01\x0d\x04\x00\x02\x01\x01\x00\x01\x01\x01\x00\x01\x01\x03\x00\x01\x0e\x02\x00\x02\x01\x01\x00\x02\x0f\x01\x10\x01\x11\x04\x00\x01\x01\x03\x00\x01\x12\x01\x01\x01\x00\x01\x01\x01\x00\x02\x01\x02\x00\x01\x01\x01\x00";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpTreesInternationalPennchineseCHTBLexer, ZZ_ACTION_PACKED_0, NSString *)

inline IOSIntArray *EduStanfordNlpTreesInternationalPennchineseCHTBLexer_get_ZZ_ROWMAP();
static IOSIntArray *EduStanfordNlpTreesInternationalPennchineseCHTBLexer_ZZ_ROWMAP;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpTreesInternationalPennchineseCHTBLexer, ZZ_ROWMAP, IOSIntArray *)

inline NSString *EduStanfordNlpTreesInternationalPennchineseCHTBLexer_get_ZZ_ROWMAP_PACKED_0();
static NSString *EduStanfordNlpTreesInternationalPennchineseCHTBLexer_ZZ_ROWMAP_PACKED_0 = @"\x00\x00\x00\x19\x00""2\x00K\x00""d\x00}\x00\xc2\x96\x00\u00af\x00\u00c8\x00\u00e1\x00\u00fa\x00""2\x00""2\x00\u0113\x00\u012c\x00\u0145\x00\u015e\x00\u0177\x00\u0190\x00\u01a9\x00\u01c2\x00\u01db\x00\u01f4\x00\u020d\x00\u0226\x00\u023f\x00\u0258\x00\u0271\x00\u028a\x00\u02a3\x00\u02bc\x00\u02d5\x00\u02ee\x00\u0307\x00\u0320\x00\u0339\x00\u0352\x00\u036b\x00\u00e1\x00\u0384\x00\u039d\x00\u03b6\x00\u03cf\x00\u03e8\x00\u0401\x00""2\x00\u041a\x00\u0433\x00\u044c\x00\u0465\x00\u047e\x00\u0497\x00\u04b0\x00\u04c9\x00\u04e2\x00\u04fb\x00\u0514\x00\u052d\x00\u0546\x00\u055f\x00\u0578\x00\u0591\x00\u05aa\x00\u05c3\x00\u05dc\x00\u05f5\x00\u060e\x00\u0627\x00\u0640\x00\u0659\x00\u0672\x00\u068b\x00\u06a4\x00\u06bd\x00\u06d6\x00\u06ef\x00\u0708\x00\u0721\x00\u073a\x00\u0753\x00\u076c\x00\u0785\x00\u079e\x00\u07b7\x00\u07d0\x00\u00e1\x00\u07e9\x00\u0802\x00\u081b\x00\u0834\x00\u084d\x00\u0866\x00\u087f\x00\u0898\x00\u08b1\x00\u08ca\x00""2\x00\u08e3\x00\u08fc\x00\u0915\x00\u092e\x00\u0947\x00\u0960\x00\u0979\x00\u0992\x00\u00e1\x00\u09ab\x00\u09c4\x00\u09dd\x00""2\x00\u09f6\x00\u0a0f\x00\u0a28\x00\u0a41\x00""2\x00\u0a5a\x00\u0a73\x00\u00e1\x00\u0a8c\x00\u0aa5\x00\u0abe\x00\u0ad7\x00\u0af0\x00""2\x00\u0b09\x00\u0b22\x00""2\x00\u0b3b\x00\u0b54\x00\u0b6d\x00\u0b86\x00\u0b9f\x00\u0bb8\x00\u0bd1\x00\u0bea\x00\u0c03\x00\u0c1c\x00\u0c35\x00\u0c4e\x00\u0c67\x00""2\x00\u0c80\x00\u0c99\x00\u0cb2\x00\u0ccb\x00\u0ce4\x00\u00e1\x00""2\x00\u00e1\x00""2\x00\u0cfd\x00\u0d16\x00\u0d2f\x00\u0d48\x00\u0d61\x00\u0d7a\x00\u0d93\x00\u0dac\x00""2\x00\u0dc5\x00\u0dde\x00\u0df7\x00\u0e10\x00\u0e29\x00\u0e42\x00\u0e5b\x00\u0e74\x00\u0e8d\x00\u0ea6";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpTreesInternationalPennchineseCHTBLexer, ZZ_ROWMAP_PACKED_0, NSString *)

inline IOSIntArray *EduStanfordNlpTreesInternationalPennchineseCHTBLexer_get_ZZ_TRANS();
static IOSIntArray *EduStanfordNlpTreesInternationalPennchineseCHTBLexer_ZZ_TRANS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpTreesInternationalPennchineseCHTBLexer, ZZ_TRANS, IOSIntArray *)

inline NSString *EduStanfordNlpTreesInternationalPennchineseCHTBLexer_get_ZZ_TRANS_PACKED_0();
static NSString *EduStanfordNlpTreesInternationalPennchineseCHTBLexer_ZZ_TRANS_PACKED_0 = @"\x01\n\x01\x0b\x01\x0c\x12\n\x01\x0d\x01\x0e\x01\x0c\x01\x0f\x01\x10\x01\x11\x17\x10\x19\x00\x01\x10\x01\x12\x18\x10\x01\x13\x18\x10\x01\x14\x18\x10\x01\x15\x18\x10\x01\x16\x18\x10\x01\x17\x17\x10\x02\n\x01\x00\x12\n\x04\x00\x02\x18\x01\x00\x01\n\x01\x19\x02\x18\x01\x1a\x03\x18\x01\x1b\x04\x18\x01\x1c\x01\x18\x01\x1d\x02\x18\x01\x1e\x01\x00\x02\x1e\x02\x00\x01\x0c.\x00\x01\x0f\x01\x10\x01\x00\x17\x10\t\x00\x01\x1f\x18\x00\x01 \x18\x00\x01!\x18\x00\x01\"\x16\x00\x01#\x01\x00\x01$\x18\x00\x01%\x18\x00\x01&\x0f\x00\x02\x18\x01\x00\x01'\x11\x18\x01\x1e\x01\x00\x02\x1e\x02\x18\x01\x00\x01'\x01\x18\x01(\x0f\x18\x01\x1e\x01\x00\x02\x1e\x02\x18\x01\x00\x01'\x02\x18\x01)\x03\x18\x01*\n\x18\x01\x1e\x01\x00\x02\x1e\x02\x18\x01\x00\x01'\n\x18\x01+\x06\x18\x01\x1e\x01\x00\x02\x1e\x02\x18\x01\x00\x01'\x04\x18\x01,\x0c\x18\x01\x1e\x01\x00\x02\x1e\x02\x18\x01\x00\x01'\x04\x18\x01-\x0c\x18\x01\x1e\x01\x00\x04\x1e\x01\x00\x01.\x12\x1e\x01\x00\x02\x1e\x07\x00\x01/\x18\x00\x01""0\x18\x00\x01""1\x1c\x00\x01""2\x06\x00\x01""3\x0c\x00\x01""4\x16\x00\x01""5\x1b\x00\x01""6!\x00\x01""7\x08\x00\x02\x18\x01\x00\x01'\x02\x18\x01""8\x0e\x18\x01\x1e\x01\x00\x02\x1e\x02\x18\x01\x00\x01'\n\x18\x01""9\x06\x18\x01\x1e\x01\x00\x02\x1e\x02\x18\x01\x00\x01'\x07\x18\x01:\t\x18\x01\x1e\x01\x00\x02\x1e\x02\x18\x01\x00\x01'\x0f\x18\x01;\x01\x18\x01\x1e\x01\x00\x02\x1e\x02\x18\x01\x00\x01'\x01\x18\x01<\x0f\x18\x01\x1e\x01\x00\x02\x1e\x02\x18\x01\x00\x01'\x07\x18\x01;\t\x18\x01\x1e\x01\x00\x02\x1e\n\x00\x01=\x18\x00\x01>\x14\x00\x01? \x00\x01@\x12\x00\x01""A\x1e\x00\x01""B\x0f\x00\x01""C\x19\x00\x01""D\x1a\x00\x01""E\x10\x00\x02\x18\x01\x00\x01'\x03\x18\x01""F\x0d\x18\x01\x1e\x01\x00\x02\x1e\x02\x18\x01\x00\x01'\x01\x18\x01G\x0f\x18\x01\x1e\x01\x00\x02\x1e\x02\x18\x01\x00\x01'\x08\x18\x01H\x01I\x01J\x06\x18\x01\x1e\x01\x00\x02\x1e\x02\x18\x01\x00\x01'\t\x18\x01K\x07\x18\x01\x1e\x01\x00\x02\x1e\x02\x18\x01\x00\x01'\x02\x18\x01L\x0e\x18\x01\x1e\x01\x00\x02\x1e\x0b\x00\x01M\x18\x00\x01N\x1b\x00\x01O\x1d\x00\x01P\x10\x00\x01P\x12\x00\x01Q\x19\x00\x01R \x00\x01S\x0f\x00\x01T\x13\x00\x02\x18\x01\x00\x01'\x01\x18\x01U\x0f\x18\x01\x1e\x01\x00\x02\x1e\x02\x18\x01\x00\x01V\x05\x18\x01W\x0b\x18\x01\x1e\x01\x00\x02\x1e\x02\x18\x01\x00\x01'\x06\x18\x01X\n\x18\x01\x1e\x01\x00\x02\x1e\x02\x18\x01\x00\x01'\x03\x18\x01X\x0d\x18\x01\x1e\x01\x00\x02\x1e\x02\x18\x01\x00\x01'\x0b\x18\x01Y\x05\x18\x01\x1e\x01\x00\x02\x1e\x02\x18\x01\x00\x01'\x03\x18\x01Z\x0d\x18\x01\x1e\x01\x00\x02\x1e\x02\x18\x01\x00\x01'\x0d\x18\x01[\x03\x18\x01\x1e\x01\x00\x02\x1e\x0c\x00\x01\\\x01]\x19\x00\x01^\x0f\x00\x01_ \x00\x01`\x0e\x00\x01""a\x05\x00\x01""b\x16\x00\x01""c\x16\x00\x01""d\x19\x00\x01""e\x12\x00\x02\x18\x01\x00\x01'\x04\x18\x01""f\x0c\x18\x01\x1e\x01\x00\x02\x1e\x02\x18\x01\x00\x01'\n\x18\x01g\x06\x18\x01\x1e\x01\x00\x02\x1e\x02\x18\x01\x00\x01h\x11\x18\x01\x1e\x01\x00\x02\x1e\x02\x18\x01\x00\x01'\x0c\x18\x01i\x04\x18\x01\x1e\x01\x00\x02\x1e\x02\x18\x01\x00\x01j\x11\x18\x01\x1e\x01\x00\x02\x1e\x02\x18\x01\x00\x01'\x0f\x18\x01k\x01\x18\x01\x1e\x01\x00\x02\x1e\n\x00\x01l\x15\x00\x01l \x00\x01m\x0c\x00\x01n\x05\x00\x01o\x16\x00\x01p\x1f\x00\x01q\x0f\x00\x01r\x16\x00\x01s\x05\x00\x01t \x00\x01u\x07\x00\x02\x18\x01\x00\x01v\x11\x18\x01\x1e\x01\x00\x02\x1e\x02\x18\x01\x00\x01'\t\x18\x01w\x07\x18\x01\x1e\x01\x00\x02\x1e\x01x\x01\n\x01y\x12x\x04y\x02\x18\x01\x00\x01'\x01\x18\x01z\x0f\x18\x01\x1e\x01\x00\x02\x1e\x02\x18\x01\x00\x01'\x10\x18\x01{\x01\x1e\x01\x00\x02\x1e\x03\x00\x01|%\x00\x01}\x16\x00\x01~\x0d\x00\x01\x7f\"\x00\x01\xc2\x80\x13\x00\x01\xc2\x81\x1e\x00\x01\xc2\x82\x1d\x00\x01\xc2\x83\x05\x00\x02\x18\x01\x00\x01'\x0d\x18\x01\xc2\x84\x03\x18\x01\x1e\x01\x00\x02\x1e\x01x\x01\xc2\x85\x01y\x12x\x05y\x01\xc2\x86\x17y\x02\xc2\x87\x01\xc2\x88\x01'\x11\xc2\x87\x04\xc2\x88\x02\x18\x01\x00\x01'\x01\x18\x01\xc2\x89\x0f\x18\x01\x1e\x01\x00\x02\x1e\x05\x00\x01\xc2\x8a \x00\x01\xc2\x8b\x1c\x00\x01\xc2\x8c\n\x00\x01\xc2\x8d\"\x00\x01\xc2\x8e\x1f\x00\x01\xc2\x8f\x04\x00\x02\x18\x01\x00\x01'\x01\x18\x01\xc2\x90\x0f\x18\x01\x1e\x01\x00\x02\x1e\x02\n\x01\x00\x06\n\x01\xc2\x91\x0b\n\x0d\x00\x01\xc2\x92\x0f\x00\x02\xc2\x87\x01\xc2\x88\x01\xc2\x93\x11\xc2\x87\x07\xc2\x88\x01\xc2\x94\x15\xc2\x88\x02\x18\x01\x00\x01\xc2\x95\x11\x18\x01\x1e\x01\x00\x02\x1e\x03\x00\x01\xc2\x96&\x00\x01\xc2\x97\x0c\x00\x01\xc2\x98$\x00\x01\xc2\x99\x0c\x00\x01\xc2\x9a\x13\x00\x02\x18\x01\x00\x01V\x11\x18\x01\x1e\x01\x00\x02\x1e\x02\n\x01\x00\x04\n\x01\xc2\x9b\x0d\n\x0b\x00\x01\xc2\x9c\x16\x00\x01\xc2\x9d\x16\x00\x01""a\x1a\x00\x01\xc2\x9e\x16\x00\x01\xc2\x9f\x15\x00\x02\n\x01\x00\x07\n\x01\u00a0\n\n\x0e\x00\x01\u00a1\x11\x00\x01n\x18\x00\x01s\x15\x00\x02\n\x01\x00\x08\n\x01\u00a2\t\n\x0f\x00\x01\u00a3\x0d\x00\x02\n\x01\x00\t\n\x01\u00a4\x01\u00a5\x07\n\x10\x00\x01\u00a6\x01\u00a7\x0b\x00\x02\n\x01\x00\x07\n\x01\u00a8\n\n\x04\x00\x02\n\x01\x00\x04\n\x01\u00a8\x0d\n\x0e\x00\x01\u00a9\x15\x00\x01\u00a9\x11\x00\x02\n\x01\x00\x01'\x11\n\x07\x00\x01.\x15\x00";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpTreesInternationalPennchineseCHTBLexer, ZZ_TRANS_PACKED_0, NSString *)

inline jint EduStanfordNlpTreesInternationalPennchineseCHTBLexer_get_ZZ_UNKNOWN_ERROR();
#define EduStanfordNlpTreesInternationalPennchineseCHTBLexer_ZZ_UNKNOWN_ERROR 0
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpTreesInternationalPennchineseCHTBLexer, ZZ_UNKNOWN_ERROR, jint)

inline jint EduStanfordNlpTreesInternationalPennchineseCHTBLexer_get_ZZ_NO_MATCH();
#define EduStanfordNlpTreesInternationalPennchineseCHTBLexer_ZZ_NO_MATCH 1
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpTreesInternationalPennchineseCHTBLexer, ZZ_NO_MATCH, jint)

inline jint EduStanfordNlpTreesInternationalPennchineseCHTBLexer_get_ZZ_PUSHBACK_2BIG();
#define EduStanfordNlpTreesInternationalPennchineseCHTBLexer_ZZ_PUSHBACK_2BIG 2
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpTreesInternationalPennchineseCHTBLexer, ZZ_PUSHBACK_2BIG, jint)

inline IOSObjectArray *EduStanfordNlpTreesInternationalPennchineseCHTBLexer_get_ZZ_ERROR_MSG();
static IOSObjectArray *EduStanfordNlpTreesInternationalPennchineseCHTBLexer_ZZ_ERROR_MSG;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpTreesInternationalPennchineseCHTBLexer, ZZ_ERROR_MSG, IOSObjectArray *)

inline IOSIntArray *EduStanfordNlpTreesInternationalPennchineseCHTBLexer_get_ZZ_ATTRIBUTE();
static IOSIntArray *EduStanfordNlpTreesInternationalPennchineseCHTBLexer_ZZ_ATTRIBUTE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpTreesInternationalPennchineseCHTBLexer, ZZ_ATTRIBUTE, IOSIntArray *)

inline NSString *EduStanfordNlpTreesInternationalPennchineseCHTBLexer_get_ZZ_ATTRIBUTE_PACKED_0();
static NSString *EduStanfordNlpTreesInternationalPennchineseCHTBLexer_ZZ_ATTRIBUTE_PACKED_0 = @"\x02\x00\x01\x08\x06\x00\x02\x01\x02\t\x10\x01\t\x00\x07\x01\x01\t\t\x00\x05\x01\t\x00\x07\x01\x08\x00\x07\x01\x05\x00\x01\t\x04\x00\x06\x01\x02\x00\x01\t\x04\x00\x01\t\x02\x00\x03\x01\x01\x00\x02\x01\x01\t\x02\x00\x01\t\x04\x00\x02\x01\x01\x00\x01\x01\x01\x00\x01\x01\x03\x00\x01\t\x02\x00\x02\x01\x01\x00\x01\x01\x01\t\x01\x01\x01\t\x04\x00\x01\x01\x03\x00\x01\t\x01\x01\x01\x00\x01\x01\x01\x00\x02\x01\x02\x00\x01\x01\x01\x00";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpTreesInternationalPennchineseCHTBLexer, ZZ_ATTRIBUTE_PACKED_0, NSString *)

inline jboolean EduStanfordNlpTreesInternationalPennchineseCHTBLexer_get_DBG();
#define EduStanfordNlpTreesInternationalPennchineseCHTBLexer_DBG false
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpTreesInternationalPennchineseCHTBLexer, DBG, jboolean)

__attribute__((unused)) static IOSIntArray *EduStanfordNlpTreesInternationalPennchineseCHTBLexer_zzUnpackAction();

__attribute__((unused)) static jint EduStanfordNlpTreesInternationalPennchineseCHTBLexer_zzUnpackActionWithNSString_withInt_withIntArray_(NSString *packed, jint offset, IOSIntArray *result);

__attribute__((unused)) static IOSIntArray *EduStanfordNlpTreesInternationalPennchineseCHTBLexer_zzUnpackRowMap();

__attribute__((unused)) static jint EduStanfordNlpTreesInternationalPennchineseCHTBLexer_zzUnpackRowMapWithNSString_withInt_withIntArray_(NSString *packed, jint offset, IOSIntArray *result);

__attribute__((unused)) static IOSIntArray *EduStanfordNlpTreesInternationalPennchineseCHTBLexer_zzUnpackTrans();

__attribute__((unused)) static jint EduStanfordNlpTreesInternationalPennchineseCHTBLexer_zzUnpackTransWithNSString_withInt_withIntArray_(NSString *packed, jint offset, IOSIntArray *result);

__attribute__((unused)) static IOSIntArray *EduStanfordNlpTreesInternationalPennchineseCHTBLexer_zzUnpackAttribute();

__attribute__((unused)) static jint EduStanfordNlpTreesInternationalPennchineseCHTBLexer_zzUnpackAttributeWithNSString_withInt_withIntArray_(NSString *packed, jint offset, IOSIntArray *result);

__attribute__((unused)) static void EduStanfordNlpTreesInternationalPennchineseCHTBLexer_reportErrorWithNSString_(NSString *yytext);

__attribute__((unused)) static IOSCharArray *EduStanfordNlpTreesInternationalPennchineseCHTBLexer_zzUnpackCMapWithNSString_(NSString *packed);

__attribute__((unused)) static jboolean EduStanfordNlpTreesInternationalPennchineseCHTBLexer_zzRefill(EduStanfordNlpTreesInternationalPennchineseCHTBLexer *self);

__attribute__((unused)) static void EduStanfordNlpTreesInternationalPennchineseCHTBLexer_yybeginWithInt_(EduStanfordNlpTreesInternationalPennchineseCHTBLexer *self, jint newState);

__attribute__((unused)) static NSString *EduStanfordNlpTreesInternationalPennchineseCHTBLexer_yytext(EduStanfordNlpTreesInternationalPennchineseCHTBLexer *self);

__attribute__((unused)) static jint EduStanfordNlpTreesInternationalPennchineseCHTBLexer_yylength(EduStanfordNlpTreesInternationalPennchineseCHTBLexer *self);

__attribute__((unused)) static void EduStanfordNlpTreesInternationalPennchineseCHTBLexer_zzScanErrorWithInt_(EduStanfordNlpTreesInternationalPennchineseCHTBLexer *self, jint errorCode);

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpTreesInternationalPennchineseCHTBLexer)

@implementation EduStanfordNlpTreesInternationalPennchineseCHTBLexer

+ (IOSIntArray *)zzUnpackAction {
  return EduStanfordNlpTreesInternationalPennchineseCHTBLexer_zzUnpackAction();
}

+ (jint)zzUnpackActionWithNSString:(NSString *)packed
                           withInt:(jint)offset
                      withIntArray:(IOSIntArray *)result {
  return EduStanfordNlpTreesInternationalPennchineseCHTBLexer_zzUnpackActionWithNSString_withInt_withIntArray_(packed, offset, result);
}

+ (IOSIntArray *)zzUnpackRowMap {
  return EduStanfordNlpTreesInternationalPennchineseCHTBLexer_zzUnpackRowMap();
}

+ (jint)zzUnpackRowMapWithNSString:(NSString *)packed
                           withInt:(jint)offset
                      withIntArray:(IOSIntArray *)result {
  return EduStanfordNlpTreesInternationalPennchineseCHTBLexer_zzUnpackRowMapWithNSString_withInt_withIntArray_(packed, offset, result);
}

+ (IOSIntArray *)zzUnpackTrans {
  return EduStanfordNlpTreesInternationalPennchineseCHTBLexer_zzUnpackTrans();
}

+ (jint)zzUnpackTransWithNSString:(NSString *)packed
                          withInt:(jint)offset
                     withIntArray:(IOSIntArray *)result {
  return EduStanfordNlpTreesInternationalPennchineseCHTBLexer_zzUnpackTransWithNSString_withInt_withIntArray_(packed, offset, result);
}

+ (IOSIntArray *)zzUnpackAttribute {
  return EduStanfordNlpTreesInternationalPennchineseCHTBLexer_zzUnpackAttribute();
}

+ (jint)zzUnpackAttributeWithNSString:(NSString *)packed
                              withInt:(jint)offset
                         withIntArray:(IOSIntArray *)result {
  return EduStanfordNlpTreesInternationalPennchineseCHTBLexer_zzUnpackAttributeWithNSString_withInt_withIntArray_(packed, offset, result);
}

- (NSString *)match {
  return EduStanfordNlpTreesInternationalPennchineseCHTBLexer_yytext(self);
}

+ (void)reportErrorWithNSString:(NSString *)yytext {
  EduStanfordNlpTreesInternationalPennchineseCHTBLexer_reportErrorWithNSString_(yytext);
}

- (instancetype)initWithJavaIoReader:(JavaIoReader *)inArg {
  EduStanfordNlpTreesInternationalPennchineseCHTBLexer_initWithJavaIoReader_(self, inArg);
  return self;
}

- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  EduStanfordNlpTreesInternationalPennchineseCHTBLexer_initWithJavaIoInputStream_(self, inArg);
  return self;
}

+ (IOSCharArray *)zzUnpackCMapWithNSString:(NSString *)packed {
  return EduStanfordNlpTreesInternationalPennchineseCHTBLexer_zzUnpackCMapWithNSString_(packed);
}

- (jboolean)zzRefill {
  return EduStanfordNlpTreesInternationalPennchineseCHTBLexer_zzRefill(self);
}

- (void)yyclose {
  zzAtEOF_ = true;
  zzEndRead_ = zzStartRead_;
  if (zzReader_ != nil) [zzReader_ close];
}

- (void)yyresetWithJavaIoReader:(JavaIoReader *)reader {
  zzReader_ = reader;
  zzAtBOL_ = true;
  zzAtEOF_ = false;
  zzEOFDone_ = false;
  zzEndRead_ = zzStartRead_ = 0;
  zzCurrentPos_ = zzMarkedPos_ = 0;
  yyline_ = yychar_ = yycolumn_ = 0;
  zzLexicalState_ = EduStanfordNlpTreesInternationalPennchineseCHTBLexer_YYINITIAL;
  if (((IOSCharArray *) nil_chk(zzBuffer_))->size_ > EduStanfordNlpTreesInternationalPennchineseCHTBLexer_ZZ_BUFFERSIZE) zzBuffer_ = [IOSCharArray newArrayWithLength:EduStanfordNlpTreesInternationalPennchineseCHTBLexer_ZZ_BUFFERSIZE];
}

- (jint)yystate {
  return zzLexicalState_;
}

- (void)yybeginWithInt:(jint)newState {
  EduStanfordNlpTreesInternationalPennchineseCHTBLexer_yybeginWithInt_(self, newState);
}

- (NSString *)yytext {
  return EduStanfordNlpTreesInternationalPennchineseCHTBLexer_yytext(self);
}

- (jchar)yycharatWithInt:(jint)pos {
  return IOSCharArray_Get(nil_chk(zzBuffer_), zzStartRead_ + pos);
}

- (jint)yylength {
  return EduStanfordNlpTreesInternationalPennchineseCHTBLexer_yylength(self);
}

- (void)zzScanErrorWithInt:(jint)errorCode {
  EduStanfordNlpTreesInternationalPennchineseCHTBLexer_zzScanErrorWithInt_(self, errorCode);
}

- (void)yypushbackWithInt:(jint)number {
  if (number > EduStanfordNlpTreesInternationalPennchineseCHTBLexer_yylength(self)) EduStanfordNlpTreesInternationalPennchineseCHTBLexer_zzScanErrorWithInt_(self, EduStanfordNlpTreesInternationalPennchineseCHTBLexer_ZZ_PUSHBACK_2BIG);
  zzMarkedPos_ -= number;
}

- (jint)yylex {
  jint zzInput;
  jint zzAction;
  jint zzCurrentPosL;
  jint zzMarkedPosL;
  jint zzEndReadL = zzEndRead_;
  IOSCharArray *zzBufferL = zzBuffer_;
  IOSCharArray *zzCMapL = EduStanfordNlpTreesInternationalPennchineseCHTBLexer_ZZ_CMAP;
  IOSIntArray *zzTransL = EduStanfordNlpTreesInternationalPennchineseCHTBLexer_ZZ_TRANS;
  IOSIntArray *zzRowMapL = EduStanfordNlpTreesInternationalPennchineseCHTBLexer_ZZ_ROWMAP;
  IOSIntArray *zzAttrL = EduStanfordNlpTreesInternationalPennchineseCHTBLexer_ZZ_ATTRIBUTE;
  while (true) {
    zzMarkedPosL = zzMarkedPos_;
    zzAction = -1;
    zzCurrentPosL = zzCurrentPos_ = zzStartRead_ = zzMarkedPosL;
    zzState_ = IOSIntArray_Get(nil_chk(EduStanfordNlpTreesInternationalPennchineseCHTBLexer_ZZ_LEXSTATE), zzLexicalState_);
    jint zzAttributes = IOSIntArray_Get(nil_chk(zzAttrL), zzState_);
    if ((zzAttributes & 1) == 1) {
      zzAction = zzState_;
    }
    {
      while (true) {
        if (zzCurrentPosL < zzEndReadL) zzInput = IOSCharArray_Get(nil_chk(zzBufferL), zzCurrentPosL++);
        else if (zzAtEOF_) {
          zzInput = EduStanfordNlpTreesInternationalPennchineseCHTBLexer_YYEOF;
          goto break_zzForAction;
        }
        else {
          zzCurrentPos_ = zzCurrentPosL;
          zzMarkedPos_ = zzMarkedPosL;
          jboolean eof = EduStanfordNlpTreesInternationalPennchineseCHTBLexer_zzRefill(self);
          zzCurrentPosL = zzCurrentPos_;
          zzMarkedPosL = zzMarkedPos_;
          zzBufferL = zzBuffer_;
          zzEndReadL = zzEndRead_;
          if (eof) {
            zzInput = EduStanfordNlpTreesInternationalPennchineseCHTBLexer_YYEOF;
            goto break_zzForAction;
          }
          else {
            zzInput = IOSCharArray_Get(nil_chk(zzBufferL), zzCurrentPosL++);
          }
        }
        jint zzNext = IOSIntArray_Get(nil_chk(zzTransL), IOSIntArray_Get(nil_chk(zzRowMapL), zzState_) + IOSCharArray_Get(nil_chk(zzCMapL), zzInput));
        if (zzNext == -1) goto break_zzForAction;
        zzState_ = zzNext;
        zzAttributes = IOSIntArray_Get(zzAttrL, zzState_);
        if ((zzAttributes & 1) == 1) {
          zzAction = zzState_;
          zzMarkedPosL = zzCurrentPosL;
          if ((zzAttributes & 8) == 8) goto break_zzForAction;
        }
      }
    }
    break_zzForAction: ;
    zzMarkedPos_ = zzMarkedPosL;
    switch (zzAction < 0 ? zzAction : IOSIntArray_Get(nil_chk(EduStanfordNlpTreesInternationalPennchineseCHTBLexer_ZZ_ACTION), zzAction)) {
      case 1:
      {
        return EduStanfordNlpTreesInternationalPennchineseCHTBLexer_ACCEPT;
      }
      case 19:
      break;
      case 2:
      {
        return EduStanfordNlpTreesInternationalPennchineseCHTBLexer_IGNORE;
      }
      case 20:
      break;
      case 3:
      {
        EduStanfordNlpTreesInternationalPennchineseCHTBLexer_reportErrorWithNSString_(EduStanfordNlpTreesInternationalPennchineseCHTBLexer_yytext(self));
      }
      case 21:
      break;
      case 4:
      {
        return EduStanfordNlpTreesInternationalPennchineseCHTBLexer_IGNORE;
      }
      case 22:
      break;
      case 5:
      {
        EduStanfordNlpTreesInternationalPennchineseCHTBLexer_yybeginWithInt_(self, EduStanfordNlpTreesInternationalPennchineseCHTBLexer_DATETIME);
        return EduStanfordNlpTreesInternationalPennchineseCHTBLexer_IGNORE;
      }
      case 23:
      break;
      case 6:
      {
        EduStanfordNlpTreesInternationalPennchineseCHTBLexer_yybeginWithInt_(self, EduStanfordNlpTreesInternationalPennchineseCHTBLexer_DATEINHEADER);
        return EduStanfordNlpTreesInternationalPennchineseCHTBLexer_IGNORE;
      }
      case 24:
      break;
      case 7:
      {
        EduStanfordNlpTreesInternationalPennchineseCHTBLexer_yybeginWithInt_(self, EduStanfordNlpTreesInternationalPennchineseCHTBLexer_DOCNO);
        return EduStanfordNlpTreesInternationalPennchineseCHTBLexer_IGNORE;
      }
      case 25:
      break;
      case 8:
      {
        EduStanfordNlpTreesInternationalPennchineseCHTBLexer_yybeginWithInt_(self, EduStanfordNlpTreesInternationalPennchineseCHTBLexer_SRCID);
        return EduStanfordNlpTreesInternationalPennchineseCHTBLexer_IGNORE;
      }
      case 26:
      break;
      case 9:
      {
        EduStanfordNlpTreesInternationalPennchineseCHTBLexer_yybeginWithInt_(self, EduStanfordNlpTreesInternationalPennchineseCHTBLexer_YYINITIAL);
        return EduStanfordNlpTreesInternationalPennchineseCHTBLexer_IGNORE;
      }
      case 27:
      break;
      case 10:
      {
        EduStanfordNlpTreesInternationalPennchineseCHTBLexer_yybeginWithInt_(self, EduStanfordNlpTreesInternationalPennchineseCHTBLexer_HEADER);
        return EduStanfordNlpTreesInternationalPennchineseCHTBLexer_IGNORE;
      }
      case 28:
      break;
      case 11:
      {
        EduStanfordNlpTreesInternationalPennchineseCHTBLexer_yybeginWithInt_(self, EduStanfordNlpTreesInternationalPennchineseCHTBLexer_HEADER);
        return EduStanfordNlpTreesInternationalPennchineseCHTBLexer_IGNORE;
      }
      case 29:
      break;
      case 12:
      {
        EduStanfordNlpTreesInternationalPennchineseCHTBLexer_yybeginWithInt_(self, EduStanfordNlpTreesInternationalPennchineseCHTBLexer_YYINITIAL);
        return EduStanfordNlpTreesInternationalPennchineseCHTBLexer_IGNORE;
      }
      case 30:
      break;
      case 13:
      {
        EduStanfordNlpTreesInternationalPennchineseCHTBLexer_yybeginWithInt_(self, EduStanfordNlpTreesInternationalPennchineseCHTBLexer_YYINITIAL);
        return EduStanfordNlpTreesInternationalPennchineseCHTBLexer_IGNORE;
      }
      case 31:
      break;
      case 14:
      {
        EduStanfordNlpTreesInternationalPennchineseCHTBLexer_yybeginWithInt_(self, EduStanfordNlpTreesInternationalPennchineseCHTBLexer_YYINITIAL);
        return EduStanfordNlpTreesInternationalPennchineseCHTBLexer_IGNORE;
      }
      case 32:
      break;
      case 15:
      {
        EduStanfordNlpTreesInternationalPennchineseCHTBLexer_yybeginWithInt_(self, EduStanfordNlpTreesInternationalPennchineseCHTBLexer_DOCTYPE);
        return EduStanfordNlpTreesInternationalPennchineseCHTBLexer_IGNORE;
      }
      case 33:
      break;
      case 16:
      {
        EduStanfordNlpTreesInternationalPennchineseCHTBLexer_yybeginWithInt_(self, EduStanfordNlpTreesInternationalPennchineseCHTBLexer_PREAMBLE);
        return EduStanfordNlpTreesInternationalPennchineseCHTBLexer_IGNORE;
      }
      case 34:
      break;
      case 17:
      {
        EduStanfordNlpTreesInternationalPennchineseCHTBLexer_yybeginWithInt_(self, EduStanfordNlpTreesInternationalPennchineseCHTBLexer_YYINITIAL);
        return EduStanfordNlpTreesInternationalPennchineseCHTBLexer_IGNORE;
      }
      case 35:
      break;
      case 18:
      {
        EduStanfordNlpTreesInternationalPennchineseCHTBLexer_yybeginWithInt_(self, EduStanfordNlpTreesInternationalPennchineseCHTBLexer_YYINITIAL);
        return EduStanfordNlpTreesInternationalPennchineseCHTBLexer_IGNORE;
      }
      case 36:
      break;
      default:
      if (zzInput == EduStanfordNlpTreesInternationalPennchineseCHTBLexer_YYEOF && zzStartRead_ == zzCurrentPos_) {
        zzAtEOF_ = true;
        return EduStanfordNlpTreesInternationalPennchineseCHTBLexer_YYEOF;
      }
      else {
        EduStanfordNlpTreesInternationalPennchineseCHTBLexer_zzScanErrorWithInt_(self, EduStanfordNlpTreesInternationalPennchineseCHTBLexer_ZZ_NO_MATCH);
      }
    }
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[I", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 0, 1, -1, -1, -1, -1 },
    { NULL, "[I", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 2, 1, -1, -1, -1, -1 },
    { NULL, "[I", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 3, 1, -1, -1, -1, -1 },
    { NULL, "[I", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 4, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 5, 6, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 7, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 8, -1, -1, -1, -1 },
    { NULL, "[C", 0xa, 9, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, 10, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, 10, -1, -1, -1 },
    { NULL, "V", 0x11, 11, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 12, 13, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "C", 0x11, 14, 13, -1, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 15, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 13, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 10, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(zzUnpackAction);
  methods[1].selector = @selector(zzUnpackActionWithNSString:withInt:withIntArray:);
  methods[2].selector = @selector(zzUnpackRowMap);
  methods[3].selector = @selector(zzUnpackRowMapWithNSString:withInt:withIntArray:);
  methods[4].selector = @selector(zzUnpackTrans);
  methods[5].selector = @selector(zzUnpackTransWithNSString:withInt:withIntArray:);
  methods[6].selector = @selector(zzUnpackAttribute);
  methods[7].selector = @selector(zzUnpackAttributeWithNSString:withInt:withIntArray:);
  methods[8].selector = @selector(match);
  methods[9].selector = @selector(reportErrorWithNSString:);
  methods[10].selector = @selector(initWithJavaIoReader:);
  methods[11].selector = @selector(initWithJavaIoInputStream:);
  methods[12].selector = @selector(zzUnpackCMapWithNSString:);
  methods[13].selector = @selector(zzRefill);
  methods[14].selector = @selector(yyclose);
  methods[15].selector = @selector(yyresetWithJavaIoReader:);
  methods[16].selector = @selector(yystate);
  methods[17].selector = @selector(yybeginWithInt:);
  methods[18].selector = @selector(yytext);
  methods[19].selector = @selector(yycharatWithInt:);
  methods[20].selector = @selector(yylength);
  methods[21].selector = @selector(zzScanErrorWithInt:);
  methods[22].selector = @selector(yypushbackWithInt:);
  methods[23].selector = @selector(yylex);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "YYEOF", "I", .constantValue.asInt = EduStanfordNlpTreesInternationalPennchineseCHTBLexer_YYEOF, 0x19, -1, -1, -1, -1 },
    { "ZZ_BUFFERSIZE", "I", .constantValue.asInt = EduStanfordNlpTreesInternationalPennchineseCHTBLexer_ZZ_BUFFERSIZE, 0x1a, -1, -1, -1, -1 },
    { "YYINITIAL", "I", .constantValue.asInt = EduStanfordNlpTreesInternationalPennchineseCHTBLexer_YYINITIAL, 0x19, -1, -1, -1, -1 },
    { "DOCNO", "I", .constantValue.asInt = EduStanfordNlpTreesInternationalPennchineseCHTBLexer_DOCNO, 0x19, -1, -1, -1, -1 },
    { "DOCID", "I", .constantValue.asInt = EduStanfordNlpTreesInternationalPennchineseCHTBLexer_DOCID, 0x19, -1, -1, -1, -1 },
    { "DOCTYPE", "I", .constantValue.asInt = EduStanfordNlpTreesInternationalPennchineseCHTBLexer_DOCTYPE, 0x19, -1, -1, -1, -1 },
    { "DATETIME", "I", .constantValue.asInt = EduStanfordNlpTreesInternationalPennchineseCHTBLexer_DATETIME, 0x19, -1, -1, -1, -1 },
    { "SRCID", "I", .constantValue.asInt = EduStanfordNlpTreesInternationalPennchineseCHTBLexer_SRCID, 0x19, -1, -1, -1, -1 },
    { "HEADER", "I", .constantValue.asInt = EduStanfordNlpTreesInternationalPennchineseCHTBLexer_HEADER, 0x19, -1, -1, -1, -1 },
    { "DATEINHEADER", "I", .constantValue.asInt = EduStanfordNlpTreesInternationalPennchineseCHTBLexer_DATEINHEADER, 0x19, -1, -1, -1, -1 },
    { "PREAMBLE", "I", .constantValue.asInt = EduStanfordNlpTreesInternationalPennchineseCHTBLexer_PREAMBLE, 0x19, -1, -1, -1, -1 },
    { "ZZ_LEXSTATE", "[I", .constantValue.asLong = 0, 0x1a, -1, 17, -1, -1 },
    { "ZZ_CMAP_PACKED", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 18, -1, -1 },
    { "ZZ_CMAP", "[C", .constantValue.asLong = 0, 0x1a, -1, 19, -1, -1 },
    { "ZZ_ACTION", "[I", .constantValue.asLong = 0, 0x1a, -1, 20, -1, -1 },
    { "ZZ_ACTION_PACKED_0", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 21, -1, -1 },
    { "ZZ_ROWMAP", "[I", .constantValue.asLong = 0, 0x1a, -1, 22, -1, -1 },
    { "ZZ_ROWMAP_PACKED_0", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 23, -1, -1 },
    { "ZZ_TRANS", "[I", .constantValue.asLong = 0, 0x1a, -1, 24, -1, -1 },
    { "ZZ_TRANS_PACKED_0", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 25, -1, -1 },
    { "ZZ_UNKNOWN_ERROR", "I", .constantValue.asInt = EduStanfordNlpTreesInternationalPennchineseCHTBLexer_ZZ_UNKNOWN_ERROR, 0x1a, -1, -1, -1, -1 },
    { "ZZ_NO_MATCH", "I", .constantValue.asInt = EduStanfordNlpTreesInternationalPennchineseCHTBLexer_ZZ_NO_MATCH, 0x1a, -1, -1, -1, -1 },
    { "ZZ_PUSHBACK_2BIG", "I", .constantValue.asInt = EduStanfordNlpTreesInternationalPennchineseCHTBLexer_ZZ_PUSHBACK_2BIG, 0x1a, -1, -1, -1, -1 },
    { "ZZ_ERROR_MSG", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 26, -1, -1 },
    { "ZZ_ATTRIBUTE", "[I", .constantValue.asLong = 0, 0x1a, -1, 27, -1, -1 },
    { "ZZ_ATTRIBUTE_PACKED_0", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 28, -1, -1 },
    { "zzReader_", "LJavaIoReader;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "zzState_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "zzLexicalState_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "zzBuffer_", "[C", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "zzMarkedPos_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "zzCurrentPos_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "zzStartRead_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "zzEndRead_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "yyline_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "yychar_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "yycolumn_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "zzAtBOL_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "zzAtEOF_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "zzEOFDone_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "DBG", "Z", .constantValue.asBOOL = EduStanfordNlpTreesInternationalPennchineseCHTBLexer_DBG, 0x1a, -1, -1, -1, -1 },
    { "IGNORE", "I", .constantValue.asInt = EduStanfordNlpTreesInternationalPennchineseCHTBLexer_IGNORE, 0x19, -1, -1, -1, -1 },
    { "ACCEPT", "I", .constantValue.asInt = EduStanfordNlpTreesInternationalPennchineseCHTBLexer_ACCEPT, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "zzUnpackAction", "LNSString;I[I", "zzUnpackRowMap", "zzUnpackTrans", "zzUnpackAttribute", "reportError", "LNSString;", "LJavaIoReader;", "LJavaIoInputStream;", "zzUnpackCMap", "LJavaIoIOException;", "yyreset", "yybegin", "I", "yycharat", "zzScanError", "yypushback", &EduStanfordNlpTreesInternationalPennchineseCHTBLexer_ZZ_LEXSTATE, &EduStanfordNlpTreesInternationalPennchineseCHTBLexer_ZZ_CMAP_PACKED, &EduStanfordNlpTreesInternationalPennchineseCHTBLexer_ZZ_CMAP, &EduStanfordNlpTreesInternationalPennchineseCHTBLexer_ZZ_ACTION, &EduStanfordNlpTreesInternationalPennchineseCHTBLexer_ZZ_ACTION_PACKED_0, &EduStanfordNlpTreesInternationalPennchineseCHTBLexer_ZZ_ROWMAP, &EduStanfordNlpTreesInternationalPennchineseCHTBLexer_ZZ_ROWMAP_PACKED_0, &EduStanfordNlpTreesInternationalPennchineseCHTBLexer_ZZ_TRANS, &EduStanfordNlpTreesInternationalPennchineseCHTBLexer_ZZ_TRANS_PACKED_0, &EduStanfordNlpTreesInternationalPennchineseCHTBLexer_ZZ_ERROR_MSG, &EduStanfordNlpTreesInternationalPennchineseCHTBLexer_ZZ_ATTRIBUTE, &EduStanfordNlpTreesInternationalPennchineseCHTBLexer_ZZ_ATTRIBUTE_PACKED_0 };
  static const J2ObjcClassInfo _EduStanfordNlpTreesInternationalPennchineseCHTBLexer = { "CHTBLexer", "edu.stanford.nlp.trees.international.pennchinese", ptrTable, methods, fields, 7, 0x0, 24, 43, -1, -1, -1, -1, -1 };
  return &_EduStanfordNlpTreesInternationalPennchineseCHTBLexer;
}

+ (void)initialize {
  if (self == [EduStanfordNlpTreesInternationalPennchineseCHTBLexer class]) {
    EduStanfordNlpTreesInternationalPennchineseCHTBLexer_ZZ_LEXSTATE = [IOSIntArray newArrayWithInts:(jint[]){ 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8 } count:18];
    EduStanfordNlpTreesInternationalPennchineseCHTBLexer_ZZ_CMAP_PACKED = JreStrcat("$$", @"\t\x00\x01\x18\x01\x02\x01\x17\x01\x17\x01\x16\x12\x00\x01\x18\x07\x00\x01\x15\x01\x15\x05\x00\x01\t\x0c\x00\x01\x01\x01\x00\x01\x03\x02\x00\x01\x06\x01\x13\x01\x0b\x01\x07\x01\x05\x02\x00\x01\x04\x01\x0d\x02\x00\x01\x14\x01\x11\x01\x0c\x01\n\x01\x10\x01\x00\x01\x08\x01\x12\x01\x0e\x04\x00\x01\x0f+\x00\x01\x17", [NSString stringWithCharacters:(jchar[]) { (int) 0x1fa2, (int) 0x0, (int) 0x1, (int) 0x17, (int) 0x1, (int) 0x17, (int) 0xdfd6, (int) 0x0 } length:8]);
    EduStanfordNlpTreesInternationalPennchineseCHTBLexer_ZZ_CMAP = EduStanfordNlpTreesInternationalPennchineseCHTBLexer_zzUnpackCMapWithNSString_(EduStanfordNlpTreesInternationalPennchineseCHTBLexer_ZZ_CMAP_PACKED);
    EduStanfordNlpTreesInternationalPennchineseCHTBLexer_ZZ_ACTION = EduStanfordNlpTreesInternationalPennchineseCHTBLexer_zzUnpackAction();
    EduStanfordNlpTreesInternationalPennchineseCHTBLexer_ZZ_ROWMAP = EduStanfordNlpTreesInternationalPennchineseCHTBLexer_zzUnpackRowMap();
    EduStanfordNlpTreesInternationalPennchineseCHTBLexer_ZZ_TRANS = EduStanfordNlpTreesInternationalPennchineseCHTBLexer_zzUnpackTrans();
    EduStanfordNlpTreesInternationalPennchineseCHTBLexer_ZZ_ERROR_MSG = [IOSObjectArray newArrayWithObjects:(id[]){ @"Unkown internal scanner error", @"Error: could not match input", @"Error: pushback value was too large" } count:3 type:NSString_class_()];
    EduStanfordNlpTreesInternationalPennchineseCHTBLexer_ZZ_ATTRIBUTE = EduStanfordNlpTreesInternationalPennchineseCHTBLexer_zzUnpackAttribute();
    J2OBJC_SET_INITIALIZED(EduStanfordNlpTreesInternationalPennchineseCHTBLexer)
  }
}

@end

IOSIntArray *EduStanfordNlpTreesInternationalPennchineseCHTBLexer_zzUnpackAction() {
  EduStanfordNlpTreesInternationalPennchineseCHTBLexer_initialize();
  IOSIntArray *result = [IOSIntArray newArrayWithLength:169];
  jint offset = 0;
  offset = EduStanfordNlpTreesInternationalPennchineseCHTBLexer_zzUnpackActionWithNSString_withInt_withIntArray_(EduStanfordNlpTreesInternationalPennchineseCHTBLexer_ZZ_ACTION_PACKED_0, offset, result);
  return result;
}

jint EduStanfordNlpTreesInternationalPennchineseCHTBLexer_zzUnpackActionWithNSString_withInt_withIntArray_(NSString *packed, jint offset, IOSIntArray *result) {
  EduStanfordNlpTreesInternationalPennchineseCHTBLexer_initialize();
  jint i = 0;
  jint j = offset;
  jint l = ((jint) [((NSString *) nil_chk(packed)) length]);
  while (i < l) {
    jint count = [packed charAtWithInt:i++];
    jint value = [packed charAtWithInt:i++];
    do *IOSIntArray_GetRef(nil_chk(result), j++) = value;
    while (--count > 0);
  }
  return j;
}

IOSIntArray *EduStanfordNlpTreesInternationalPennchineseCHTBLexer_zzUnpackRowMap() {
  EduStanfordNlpTreesInternationalPennchineseCHTBLexer_initialize();
  IOSIntArray *result = [IOSIntArray newArrayWithLength:169];
  jint offset = 0;
  offset = EduStanfordNlpTreesInternationalPennchineseCHTBLexer_zzUnpackRowMapWithNSString_withInt_withIntArray_(EduStanfordNlpTreesInternationalPennchineseCHTBLexer_ZZ_ROWMAP_PACKED_0, offset, result);
  return result;
}

jint EduStanfordNlpTreesInternationalPennchineseCHTBLexer_zzUnpackRowMapWithNSString_withInt_withIntArray_(NSString *packed, jint offset, IOSIntArray *result) {
  EduStanfordNlpTreesInternationalPennchineseCHTBLexer_initialize();
  jint i = 0;
  jint j = offset;
  jint l = ((jint) [((NSString *) nil_chk(packed)) length]);
  while (i < l) {
    jint high = JreLShift32([packed charAtWithInt:i++], 16);
    *IOSIntArray_GetRef(nil_chk(result), j++) = high | [packed charAtWithInt:i++];
  }
  return j;
}

IOSIntArray *EduStanfordNlpTreesInternationalPennchineseCHTBLexer_zzUnpackTrans() {
  EduStanfordNlpTreesInternationalPennchineseCHTBLexer_initialize();
  IOSIntArray *result = [IOSIntArray newArrayWithLength:3775];
  jint offset = 0;
  offset = EduStanfordNlpTreesInternationalPennchineseCHTBLexer_zzUnpackTransWithNSString_withInt_withIntArray_(EduStanfordNlpTreesInternationalPennchineseCHTBLexer_ZZ_TRANS_PACKED_0, offset, result);
  return result;
}

jint EduStanfordNlpTreesInternationalPennchineseCHTBLexer_zzUnpackTransWithNSString_withInt_withIntArray_(NSString *packed, jint offset, IOSIntArray *result) {
  EduStanfordNlpTreesInternationalPennchineseCHTBLexer_initialize();
  jint i = 0;
  jint j = offset;
  jint l = ((jint) [((NSString *) nil_chk(packed)) length]);
  while (i < l) {
    jint count = [packed charAtWithInt:i++];
    jint value = [packed charAtWithInt:i++];
    value--;
    do *IOSIntArray_GetRef(nil_chk(result), j++) = value;
    while (--count > 0);
  }
  return j;
}

IOSIntArray *EduStanfordNlpTreesInternationalPennchineseCHTBLexer_zzUnpackAttribute() {
  EduStanfordNlpTreesInternationalPennchineseCHTBLexer_initialize();
  IOSIntArray *result = [IOSIntArray newArrayWithLength:169];
  jint offset = 0;
  offset = EduStanfordNlpTreesInternationalPennchineseCHTBLexer_zzUnpackAttributeWithNSString_withInt_withIntArray_(EduStanfordNlpTreesInternationalPennchineseCHTBLexer_ZZ_ATTRIBUTE_PACKED_0, offset, result);
  return result;
}

jint EduStanfordNlpTreesInternationalPennchineseCHTBLexer_zzUnpackAttributeWithNSString_withInt_withIntArray_(NSString *packed, jint offset, IOSIntArray *result) {
  EduStanfordNlpTreesInternationalPennchineseCHTBLexer_initialize();
  jint i = 0;
  jint j = offset;
  jint l = ((jint) [((NSString *) nil_chk(packed)) length]);
  while (i < l) {
    jint count = [packed charAtWithInt:i++];
    jint value = [packed charAtWithInt:i++];
    do *IOSIntArray_GetRef(nil_chk(result), j++) = value;
    while (--count > 0);
  }
  return j;
}

void EduStanfordNlpTreesInternationalPennchineseCHTBLexer_reportErrorWithNSString_(NSString *yytext) {
  EduStanfordNlpTreesInternationalPennchineseCHTBLexer_initialize();
  @try {
    JavaIoPrintWriter *p = new_JavaIoPrintWriter_initWithJavaIoWriter_withBoolean_(new_JavaIoOutputStreamWriter_initWithJavaIoOutputStream_withNSString_(JreLoadStatic(JavaLangSystem, err), @"GB18030"), true);
    [p printlnWithNSString:JreStrcat("$$C", @"chtbl.flex tokenization error: \"", yytext, '"')];
    if (((jint) [((NSString *) nil_chk(yytext)) length]) >= 1) {
      [p printlnWithNSString:JreStrcat("$C", @"First character is: ", [yytext charAtWithInt:0])];
      if (((jint) [yytext length]) >= 2) {
        [p printlnWithNSString:JreStrcat("$C", @"Second character is: ", [yytext charAtWithInt:1])];
      }
    }
  }
  @catch (JavaIoUnsupportedEncodingException *e) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"chtbl.flex tokenization and encoding present error"];
  }
}

void EduStanfordNlpTreesInternationalPennchineseCHTBLexer_initWithJavaIoReader_(EduStanfordNlpTreesInternationalPennchineseCHTBLexer *self, JavaIoReader *inArg) {
  NSObject_init(self);
  self->zzLexicalState_ = EduStanfordNlpTreesInternationalPennchineseCHTBLexer_YYINITIAL;
  self->zzBuffer_ = [IOSCharArray newArrayWithLength:EduStanfordNlpTreesInternationalPennchineseCHTBLexer_ZZ_BUFFERSIZE];
  self->zzAtBOL_ = true;
  self->zzReader_ = inArg;
}

EduStanfordNlpTreesInternationalPennchineseCHTBLexer *new_EduStanfordNlpTreesInternationalPennchineseCHTBLexer_initWithJavaIoReader_(JavaIoReader *inArg) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesInternationalPennchineseCHTBLexer, initWithJavaIoReader_, inArg)
}

EduStanfordNlpTreesInternationalPennchineseCHTBLexer *create_EduStanfordNlpTreesInternationalPennchineseCHTBLexer_initWithJavaIoReader_(JavaIoReader *inArg) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesInternationalPennchineseCHTBLexer, initWithJavaIoReader_, inArg)
}

void EduStanfordNlpTreesInternationalPennchineseCHTBLexer_initWithJavaIoInputStream_(EduStanfordNlpTreesInternationalPennchineseCHTBLexer *self, JavaIoInputStream *inArg) {
  EduStanfordNlpTreesInternationalPennchineseCHTBLexer_initWithJavaIoReader_(self, new_JavaIoInputStreamReader_initWithJavaIoInputStream_withJavaNioCharsetCharset_(inArg, JavaNioCharsetCharset_forNameWithNSString_(@"UTF-8")));
}

EduStanfordNlpTreesInternationalPennchineseCHTBLexer *new_EduStanfordNlpTreesInternationalPennchineseCHTBLexer_initWithJavaIoInputStream_(JavaIoInputStream *inArg) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesInternationalPennchineseCHTBLexer, initWithJavaIoInputStream_, inArg)
}

EduStanfordNlpTreesInternationalPennchineseCHTBLexer *create_EduStanfordNlpTreesInternationalPennchineseCHTBLexer_initWithJavaIoInputStream_(JavaIoInputStream *inArg) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesInternationalPennchineseCHTBLexer, initWithJavaIoInputStream_, inArg)
}

IOSCharArray *EduStanfordNlpTreesInternationalPennchineseCHTBLexer_zzUnpackCMapWithNSString_(NSString *packed) {
  EduStanfordNlpTreesInternationalPennchineseCHTBLexer_initialize();
  IOSCharArray *map = [IOSCharArray newArrayWithLength:(jint) 0x10000];
  jint i = 0;
  jint j = 0;
  while (i < 88) {
    jint count = [((NSString *) nil_chk(packed)) charAtWithInt:i++];
    jchar value = [packed charAtWithInt:i++];
    do *IOSCharArray_GetRef(map, j++) = value;
    while (--count > 0);
  }
  return map;
}

jboolean EduStanfordNlpTreesInternationalPennchineseCHTBLexer_zzRefill(EduStanfordNlpTreesInternationalPennchineseCHTBLexer *self) {
  if (self->zzStartRead_ > 0) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->zzBuffer_, self->zzStartRead_, self->zzBuffer_, 0, self->zzEndRead_ - self->zzStartRead_);
    self->zzEndRead_ -= self->zzStartRead_;
    self->zzCurrentPos_ -= self->zzStartRead_;
    self->zzMarkedPos_ -= self->zzStartRead_;
    self->zzStartRead_ = 0;
  }
  if (self->zzCurrentPos_ >= ((IOSCharArray *) nil_chk(self->zzBuffer_))->size_) {
    IOSCharArray *newBuffer = [IOSCharArray newArrayWithLength:self->zzCurrentPos_ * 2];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->zzBuffer_, 0, newBuffer, 0, self->zzBuffer_->size_);
    self->zzBuffer_ = newBuffer;
  }
  jint numRead = [((JavaIoReader *) nil_chk(self->zzReader_)) readWithCharArray:self->zzBuffer_ withInt:self->zzEndRead_ withInt:self->zzBuffer_->size_ - self->zzEndRead_];
  if (numRead > 0) {
    self->zzEndRead_ += numRead;
    return false;
  }
  if (numRead == 0) {
    jint c = [((JavaIoReader *) nil_chk(self->zzReader_)) read];
    if (c == -1) {
      return true;
    }
    else {
      *IOSCharArray_GetRef(nil_chk(self->zzBuffer_), self->zzEndRead_++) = (jchar) c;
      return false;
    }
  }
  return true;
}

void EduStanfordNlpTreesInternationalPennchineseCHTBLexer_yybeginWithInt_(EduStanfordNlpTreesInternationalPennchineseCHTBLexer *self, jint newState) {
  self->zzLexicalState_ = newState;
}

NSString *EduStanfordNlpTreesInternationalPennchineseCHTBLexer_yytext(EduStanfordNlpTreesInternationalPennchineseCHTBLexer *self) {
  return [NSString stringWithCharacters:self->zzBuffer_ offset:self->zzStartRead_ length:self->zzMarkedPos_ - self->zzStartRead_];
}

jint EduStanfordNlpTreesInternationalPennchineseCHTBLexer_yylength(EduStanfordNlpTreesInternationalPennchineseCHTBLexer *self) {
  return self->zzMarkedPos_ - self->zzStartRead_;
}

void EduStanfordNlpTreesInternationalPennchineseCHTBLexer_zzScanErrorWithInt_(EduStanfordNlpTreesInternationalPennchineseCHTBLexer *self, jint errorCode) {
  NSString *message;
  @try {
    message = IOSObjectArray_Get(nil_chk(EduStanfordNlpTreesInternationalPennchineseCHTBLexer_ZZ_ERROR_MSG), errorCode);
  }
  @catch (JavaLangArrayIndexOutOfBoundsException *e) {
    message = IOSObjectArray_Get(EduStanfordNlpTreesInternationalPennchineseCHTBLexer_ZZ_ERROR_MSG, EduStanfordNlpTreesInternationalPennchineseCHTBLexer_ZZ_UNKNOWN_ERROR);
  }
  @throw new_JavaLangError_initWithNSString_(message);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTreesInternationalPennchineseCHTBLexer)
