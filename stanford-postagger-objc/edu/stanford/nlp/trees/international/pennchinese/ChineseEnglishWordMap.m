//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/trees/international/pennchinese/ChineseEnglishWordMap.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/trees/TreebankLanguagePack.h"
#include "edu/stanford/nlp/trees/international/pennchinese/CEDict.h"
#include "edu/stanford/nlp/trees/international/pennchinese/ChineseEnglishWordMap.h"
#include "edu/stanford/nlp/trees/international/pennchinese/ChineseTreebankLanguagePack.h"
#include "edu/stanford/nlp/util/Generics.h"
#include "edu/stanford/nlp/util/StringUtils.h"
#include "java/io/BufferedReader.h"
#include "java/io/FileInputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStreamReader.h"
#include "java/io/OutputStreamWriter.h"
#include "java/io/PrintStream.h"
#include "java/io/PrintWriter.h"
#include "java/lang/Character.h"
#include "java/lang/Integer.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedHashSet.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"

@interface EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap () {
 @public
  id<JavaUtilMap> map_;
  jboolean normalized_;
}

- (NSString *)normalizeWithNSString:(NSString *)t;

- (id<JavaUtilSet>)normalizeWithJavaUtilSet:(id<JavaUtilSet>)trans;

+ (jboolean)isDigitsWithNSString:(NSString *)inArg;

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap, map_, id<JavaUtilMap>)

inline jlong EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_get_serialVersionUID();
#define EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_serialVersionUID 7655332268578049993LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap, serialVersionUID, jlong)

inline NSString *EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_get_defaultPattern();
static NSString *EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_defaultPattern = @"[^ ]+ ([^ ]+)[^/]+/(.+)/";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap, defaultPattern, NSString *)

inline NSString *EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_get_defaultDelimiter();
static NSString *EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_defaultDelimiter = @"[/;]";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap, defaultDelimiter, NSString *)

inline NSString *EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_get_defaultCharset();
static NSString *EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_defaultCharset = @"UTF-8";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap, defaultCharset, NSString *)

inline IOSObjectArray *EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_get_punctuations();
static IOSObjectArray *EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_punctuations;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap, punctuations, IOSObjectArray *)

inline jboolean EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_get_DEBUG();
#define EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_DEBUG false
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap, DEBUG, jboolean)

__attribute__((unused)) static NSString *EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_normalizeWithNSString_(EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap *self, NSString *t);

__attribute__((unused)) static id<JavaUtilSet> EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_normalizeWithJavaUtilSet_(EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap *self, id<JavaUtilSet> trans);

__attribute__((unused)) static jboolean EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_isDigitsWithNSString_(NSString *inArg);

@interface EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_SingletonHolder : NSObject

- (instancetype)init;

@end

J2OBJC_STATIC_INIT(EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_SingletonHolder)

inline EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap *EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_SingletonHolder_get_INSTANCE();
static EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap *EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_SingletonHolder_INSTANCE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_SingletonHolder, INSTANCE, EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap *)

__attribute__((unused)) static void EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_SingletonHolder_init(EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_SingletonHolder *self);

__attribute__((unused)) static EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_SingletonHolder *new_EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_SingletonHolder_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_SingletonHolder *create_EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_SingletonHolder_init();

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_SingletonHolder)

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap)

@implementation EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap

+ (EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap *)getInstance {
  return EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_getInstance();
}

- (jboolean)containsKeyWithNSString:(NSString *)key {
  key = [((NSString *) nil_chk(key)) lowercaseString];
  key = [((NSString *) nil_chk(key)) trim];
  return [((id<JavaUtilMap>) nil_chk(map_)) containsKeyWithId:key];
}

- (id<JavaUtilSet>)getAllTranslationsWithNSString:(NSString *)key {
  key = [((NSString *) nil_chk(key)) lowercaseString];
  key = [((NSString *) nil_chk(key)) trim];
  return [((id<JavaUtilMap>) nil_chk(map_)) getWithId:key];
}

- (NSString *)getFirstTranslationWithNSString:(NSString *)key {
  key = [((NSString *) nil_chk(key)) lowercaseString];
  key = [((NSString *) nil_chk(key)) trim];
  id<JavaUtilSet> strings = [((id<JavaUtilMap>) nil_chk(map_)) getWithId:key];
  if (strings == nil) return nil;
  else return [((id<JavaUtilIterator>) nil_chk([strings iterator])) next];
}

- (void)readCEDictWithNSString:(NSString *)dictPath {
  [self readCEDictWithNSString:dictPath withNSString:EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_defaultPattern withNSString:EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_defaultDelimiter withNSString:EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_defaultCharset];
}

- (NSString *)normalizeWithNSString:(NSString *)t {
  return EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_normalizeWithNSString_(self, t);
}

- (id<JavaUtilSet>)normalizeWithJavaUtilSet:(id<JavaUtilSet>)trans {
  return EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_normalizeWithJavaUtilSet_(self, trans);
}

- (void)readCEDictWithNSString:(NSString *)dictPath
                  withNSString:(NSString *)pattern
                  withNSString:(NSString *)delimiter
                  withNSString:(NSString *)charset {
  @try {
    JavaIoBufferedReader *infile = new_JavaIoBufferedReader_initWithJavaIoReader_(new_JavaIoInputStreamReader_initWithJavaIoInputStream_withNSString_(new_JavaIoFileInputStream_initWithNSString_(dictPath), charset));
    JavaUtilRegexPattern *p = JavaUtilRegexPattern_compileWithNSString_(pattern);
    for (NSString *line = [infile readLine]; line != nil; line = [infile readLine]) {
      JavaUtilRegexMatcher *m = [((JavaUtilRegexPattern *) nil_chk(p)) matcherWithJavaLangCharSequence:line];
      if ([((JavaUtilRegexMatcher *) nil_chk(m)) matches]) {
        NSString *word = [((NSString *) nil_chk(([m groupWithInt:1]))) lowercaseString];
        word = [((NSString *) nil_chk(word)) trim];
        NSString *transGroup = [m groupWithInt:2];
        IOSObjectArray *trans = [((NSString *) nil_chk(transGroup)) split:delimiter];
        if ([((id<JavaUtilMap>) nil_chk(map_)) containsKeyWithId:word]) {
          id<JavaUtilSet> oldtrans = [((id<JavaUtilMap>) nil_chk(map_)) getWithId:word];
          {
            IOSObjectArray *a__ = trans;
            NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
            NSString * const *e__ = b__ + a__->size_;
            while (b__ < e__) {
              NSString *t = *b__++;
              t = EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_normalizeWithNSString_(self, t);
              if (![((NSString *) nil_chk(t)) isEqual:@""]) {
                if (![((id<JavaUtilSet>) nil_chk(oldtrans)) containsWithId:t]) {
                  [oldtrans addWithId:t];
                }
              }
            }
          }
        }
        else {
          id<JavaUtilSet> transList = new_JavaUtilLinkedHashSet_initWithJavaUtilCollection_(JavaUtilArrays_asListWithNSObjectArray_(trans));
          NSString *normW = EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_normalizeWithNSString_(self, word);
          id<JavaUtilSet> normSet = EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_normalizeWithJavaUtilSet_(self, transList);
          if (![((NSString *) nil_chk(normW)) isEqual:@""] && [((id<JavaUtilSet>) nil_chk(normSet)) size] > 0) {
            (void) [((id<JavaUtilMap>) nil_chk(map_)) putWithId:normW withId:normSet];
          }
        }
      }
    }
    [infile close];
  }
  @catch (JavaIoIOException *e) {
    @throw new_JavaLangRuntimeException_initWithNSString_withNSException_(JreStrcat("$$", @"IOException reading CEDict from file ", dictPath), e);
  }
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithNSString:(NSString *)dictPath {
  EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_initWithNSString_(self, dictPath);
  return self;
}

- (instancetype)initWithNSString:(NSString *)dictPath
                     withBoolean:(jboolean)normalized {
  EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_initWithNSString_withBoolean_(self, dictPath, normalized);
  return self;
}

- (instancetype)initWithNSString:(NSString *)dictPath
                    withNSString:(NSString *)pattern
                    withNSString:(NSString *)delimiter
                    withNSString:(NSString *)charset {
  EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_initWithNSString_withNSString_withNSString_withNSString_(self, dictPath, pattern, delimiter, charset);
  return self;
}

- (instancetype)initWithNSString:(NSString *)dictPath
                    withNSString:(NSString *)pattern
                    withNSString:(NSString *)delimiter
                    withNSString:(NSString *)charset
                     withBoolean:(jboolean)normalized {
  EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_initWithNSString_withNSString_withNSString_withNSString_withBoolean_(self, dictPath, pattern, delimiter, charset, normalized);
  return self;
}

+ (jboolean)isDigitsWithNSString:(NSString *)inArg {
  return EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_isDigitsWithNSString_(inArg);
}

- (id<JavaUtilMap>)getReverseMap {
  id<JavaUtilSet> entries = [((id<JavaUtilMap>) nil_chk(map_)) entrySet];
  id<JavaUtilMap> rMap = EduStanfordNlpUtilGenerics_newHashMapWithInt_([((id<JavaUtilSet>) nil_chk(entries)) size]);
  for (id<JavaUtilMap_Entry> __strong me in entries) {
    NSString *k = [((id<JavaUtilMap_Entry>) nil_chk(me)) getKey];
    id<JavaUtilSet> transList = [me getValue];
    for (NSString * __strong trans in nil_chk(transList)) {
      id<JavaUtilSet> entry_ = [((id<JavaUtilMap>) nil_chk(rMap)) getWithId:trans];
      if (entry_ == nil) {
        id<JavaUtilSet> toAdd = new_JavaUtilLinkedHashSet_initWithInt_(6);
        [toAdd addWithId:k];
        (void) [rMap putWithId:trans withId:toAdd];
      }
      else {
        [entry_ addWithId:k];
      }
    }
  }
  return rMap;
}

- (jint)addMapWithJavaUtilMap:(id<JavaUtilMap>)addM {
  jint newTrans = 0;
  for (id<JavaUtilMap_Entry> __strong me in nil_chk([((id<JavaUtilMap>) nil_chk(addM)) entrySet])) {
    NSString *k = [((id<JavaUtilMap_Entry>) nil_chk(me)) getKey];
    id<JavaUtilSet> addList = [me getValue];
    id<JavaUtilSet> origList = [((id<JavaUtilMap>) nil_chk(map_)) getWithId:k];
    if (origList == nil) {
      (void) [((id<JavaUtilMap>) nil_chk(map_)) putWithId:k withId:new_JavaUtilLinkedHashSet_initWithJavaUtilCollection_(addList)];
      id<JavaUtilSet> newList = [((id<JavaUtilMap>) nil_chk(map_)) getWithId:k];
      if (newList != nil && [newList size] != 0) {
        newTrans += [((id<JavaUtilSet>) nil_chk(addList)) size];
      }
    }
    else {
      for (NSString * __strong toAdd in nil_chk(addList)) {
        if (!([origList containsWithId:toAdd])) {
          [origList addWithId:toAdd];
          newTrans++;
        }
      }
    }
  }
  return newTrans;
}

- (NSString *)description {
  return [((id<JavaUtilMap>) nil_chk(map_)) description];
}

- (jint)size {
  return [((id<JavaUtilMap>) nil_chk(map_)) size];
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_mainWithNSStringArray_(args);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LEduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, 2, 1, -1, 3, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 6, 1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x2, 6, 7, -1, 8, -1, -1 },
    { NULL, "V", 0x1, 5, 9, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 10, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 9, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 11, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 12, 1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 13, -1, -1 },
    { NULL, "I", 0x1, 14, 15, -1, 16, -1, -1 },
    { NULL, "LNSString;", 0x1, 17, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 18, 19, 20, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(getInstance);
  methods[1].selector = @selector(containsKeyWithNSString:);
  methods[2].selector = @selector(getAllTranslationsWithNSString:);
  methods[3].selector = @selector(getFirstTranslationWithNSString:);
  methods[4].selector = @selector(readCEDictWithNSString:);
  methods[5].selector = @selector(normalizeWithNSString:);
  methods[6].selector = @selector(normalizeWithJavaUtilSet:);
  methods[7].selector = @selector(readCEDictWithNSString:withNSString:withNSString:withNSString:);
  methods[8].selector = @selector(init);
  methods[9].selector = @selector(initWithNSString:);
  methods[10].selector = @selector(initWithNSString:withBoolean:);
  methods[11].selector = @selector(initWithNSString:withNSString:withNSString:withNSString:);
  methods[12].selector = @selector(initWithNSString:withNSString:withNSString:withNSString:withBoolean:);
  methods[13].selector = @selector(isDigitsWithNSString:);
  methods[14].selector = @selector(getReverseMap);
  methods[15].selector = @selector(addMapWithJavaUtilMap:);
  methods[16].selector = @selector(description);
  methods[17].selector = @selector(size);
  methods[18].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "map_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 21, -1 },
    { "defaultPattern", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 22, -1, -1 },
    { "defaultDelimiter", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 23, -1, -1 },
    { "defaultCharset", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 24, -1, -1 },
    { "punctuations", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 25, -1, -1 },
    { "DEBUG", "Z", .constantValue.asBOOL = EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_DEBUG, 0x1a, -1, -1, -1, -1 },
    { "normalized_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "containsKey", "LNSString;", "getAllTranslations", "(Ljava/lang/String;)Ljava/util/Set<Ljava/lang/String;>;", "getFirstTranslation", "readCEDict", "normalize", "LJavaUtilSet;", "(Ljava/util/Set<Ljava/lang/String;>;)Ljava/util/Set<Ljava/lang/String;>;", "LNSString;LNSString;LNSString;LNSString;", "LNSString;Z", "LNSString;LNSString;LNSString;LNSString;Z", "isDigits", "()Ljava/util/Map<Ljava/lang/String;Ljava/util/Set<Ljava/lang/String;>;>;", "addMap", "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;Ljava/util/Set<Ljava/lang/String;>;>;)I", "toString", "main", "[LNSString;", "LJavaIoIOException;", "Ljava/util/Map<Ljava/lang/String;Ljava/util/Set<Ljava/lang/String;>;>;", &EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_defaultPattern, &EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_defaultDelimiter, &EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_defaultCharset, &EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_punctuations, "LEduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_SingletonHolder;" };
  static const J2ObjcClassInfo _EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap = { "ChineseEnglishWordMap", "edu.stanford.nlp.trees.international.pennchinese", ptrTable, methods, fields, 7, 0x1, 19, 8, -1, 26, -1, -1, -1 };
  return &_EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap;
}

+ (void)initialize {
  if (self == [EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap class]) {
    EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_punctuations = [IOSObjectArray newArrayWithObjects:(id[]){ @"\uff08.*?\uff09", @"\\(.*?\\)", @"<.*?>", @"[\u2033\u20dd\u25cb\u25ef\u2039\u2329\u27e8\u203a\u232a\u27e9\u00ab\u27ea\u00bb\u27eb\u2308\u230b\u27e6\u27e7\u3030\uff5e\u201c\u2036\u201d\u2033\u2307\u301c\u3012\u29c4\u300a\u300b\u3000]", @"^to " } count:5 type:NSString_class_()];
    J2OBJC_SET_INITIALIZED(EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap)
  }
}

@end

EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap *EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_getInstance() {
  EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_initialize();
  return JreLoadStatic(EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_SingletonHolder, INSTANCE);
}

NSString *EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_normalizeWithNSString_(EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap *self, NSString *t) {
  NSString *origT;
  if (!self->normalized_) {
    return t;
  }
  {
    IOSObjectArray *a__ = EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_punctuations;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *punc = *b__++;
      t = [((NSString *) nil_chk(t)) replaceAll:punc withReplacement:@""];
    }
  }
  t = [((NSString *) nil_chk(t)) trim];
  return t;
}

id<JavaUtilSet> EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_normalizeWithJavaUtilSet_(EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap *self, id<JavaUtilSet> trans) {
  if (!self->normalized_) {
    return trans;
  }
  id<JavaUtilSet> set = EduStanfordNlpUtilGenerics_newHashSet();
  for (NSString * __strong t in nil_chk(trans)) {
    t = EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_normalizeWithNSString_(self, t);
    if (![((NSString *) nil_chk(t)) isEqual:@""]) {
      [((id<JavaUtilSet>) nil_chk(set)) addWithId:t];
    }
  }
  return set;
}

void EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_init(EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap *self) {
  NSObject_init(self);
  self->map_ = EduStanfordNlpUtilGenerics_newHashMapWithInt_(10000);
  self->normalized_ = false;
  NSString *path = EduStanfordNlpTreesInternationalPennchineseCEDict_path();
  [self readCEDictWithNSString:path];
}

EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap *new_EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap, init)
}

EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap *create_EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap, init)
}

void EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_initWithNSString_(EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap *self, NSString *dictPath) {
  NSObject_init(self);
  self->map_ = EduStanfordNlpUtilGenerics_newHashMapWithInt_(10000);
  self->normalized_ = false;
  [self readCEDictWithNSString:dictPath];
}

EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap *new_EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_initWithNSString_(NSString *dictPath) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap, initWithNSString_, dictPath)
}

EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap *create_EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_initWithNSString_(NSString *dictPath) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap, initWithNSString_, dictPath)
}

void EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_initWithNSString_withBoolean_(EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap *self, NSString *dictPath, jboolean normalized) {
  NSObject_init(self);
  self->map_ = EduStanfordNlpUtilGenerics_newHashMapWithInt_(10000);
  self->normalized_ = false;
  self->normalized_ = normalized;
  [self readCEDictWithNSString:dictPath];
}

EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap *new_EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_initWithNSString_withBoolean_(NSString *dictPath, jboolean normalized) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap, initWithNSString_withBoolean_, dictPath, normalized)
}

EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap *create_EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_initWithNSString_withBoolean_(NSString *dictPath, jboolean normalized) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap, initWithNSString_withBoolean_, dictPath, normalized)
}

void EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_initWithNSString_withNSString_withNSString_withNSString_(EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap *self, NSString *dictPath, NSString *pattern, NSString *delimiter, NSString *charset) {
  NSObject_init(self);
  self->map_ = EduStanfordNlpUtilGenerics_newHashMapWithInt_(10000);
  self->normalized_ = false;
  [self readCEDictWithNSString:dictPath withNSString:pattern withNSString:delimiter withNSString:charset];
}

EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap *new_EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_initWithNSString_withNSString_withNSString_withNSString_(NSString *dictPath, NSString *pattern, NSString *delimiter, NSString *charset) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap, initWithNSString_withNSString_withNSString_withNSString_, dictPath, pattern, delimiter, charset)
}

EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap *create_EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_initWithNSString_withNSString_withNSString_withNSString_(NSString *dictPath, NSString *pattern, NSString *delimiter, NSString *charset) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap, initWithNSString_withNSString_withNSString_withNSString_, dictPath, pattern, delimiter, charset)
}

void EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_initWithNSString_withNSString_withNSString_withNSString_withBoolean_(EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap *self, NSString *dictPath, NSString *pattern, NSString *delimiter, NSString *charset, jboolean normalized) {
  NSObject_init(self);
  self->map_ = EduStanfordNlpUtilGenerics_newHashMapWithInt_(10000);
  self->normalized_ = false;
  self->normalized_ = normalized;
  [self readCEDictWithNSString:dictPath withNSString:pattern withNSString:delimiter withNSString:charset];
}

EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap *new_EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_initWithNSString_withNSString_withNSString_withNSString_withBoolean_(NSString *dictPath, NSString *pattern, NSString *delimiter, NSString *charset, jboolean normalized) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap, initWithNSString_withNSString_withNSString_withNSString_withBoolean_, dictPath, pattern, delimiter, charset, normalized)
}

EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap *create_EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_initWithNSString_withNSString_withNSString_withNSString_withBoolean_(NSString *dictPath, NSString *pattern, NSString *delimiter, NSString *charset, jboolean normalized) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap, initWithNSString_withNSString_withNSString_withNSString_withBoolean_, dictPath, pattern, delimiter, charset, normalized)
}

jboolean EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_isDigitsWithNSString_(NSString *inArg) {
  EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_initialize();
  for (jint i = 0, len = ((jint) [((NSString *) nil_chk(inArg)) length]); i < len; i++) {
    if (!JavaLangCharacter_isDigitWithChar_([inArg charAtWithInt:i])) {
      return false;
    }
  }
  return true;
}

void EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_mainWithNSStringArray_(IOSObjectArray *args) {
  EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_initialize();
  id<JavaUtilMap> flagsToNumArgs = EduStanfordNlpUtilGenerics_newHashMap();
  (void) [((id<JavaUtilMap>) nil_chk(flagsToNumArgs)) putWithId:@"-dictPath" withId:JavaLangInteger_valueOfWithInt_(1)];
  (void) [flagsToNumArgs putWithId:@"-encoding" withId:JavaLangInteger_valueOfWithInt_(1)];
  id<JavaUtilMap> argMap = EduStanfordNlpUtilStringUtils_argsToMapWithNSStringArray_withJavaUtilMap_(args, flagsToNumArgs);
  IOSObjectArray *otherArgs = [((id<JavaUtilMap>) nil_chk(argMap)) getWithId:nil];
  if (((IOSObjectArray *) nil_chk(otherArgs))->size_ < 1) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"usage: ChineseEnglishWordMap [-all] [-dictPath path] [-encoding enc_string] inputFile"];
    JavaLangSystem_exitWithInt_(1);
  }
  NSString *filename = IOSObjectArray_Get(otherArgs, 0);
  jboolean allTranslations = [argMap containsKeyWithId:@"-all"];
  NSString *charset = EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_defaultCharset;
  if ([argMap containsKeyWithId:@"-encoding"]) {
    charset = IOSObjectArray_Get(nil_chk([argMap getWithId:@"-encoding"]), 0);
  }
  JavaIoBufferedReader *r = new_JavaIoBufferedReader_initWithJavaIoReader_(new_JavaIoInputStreamReader_initWithJavaIoInputStream_withNSString_(new_JavaIoFileInputStream_initWithNSString_(filename), charset));
  id<EduStanfordNlpTreesTreebankLanguagePack> tlp = new_EduStanfordNlpTreesInternationalPennchineseChineseTreebankLanguagePack_init();
  IOSObjectArray *dpString = [argMap getWithId:@"-dictPath"];
  EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap *cewm = (dpString == nil) ? new_EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_init() : new_EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_initWithNSString_(IOSObjectArray_Get(nil_chk(dpString), 0));
  jint totalWords = 0, coveredWords = 0;
  JavaIoPrintWriter *pw = new_JavaIoPrintWriter_initWithJavaIoWriter_withBoolean_(new_JavaIoOutputStreamWriter_initWithJavaIoOutputStream_withNSString_(JreLoadStatic(JavaLangSystem, out), charset), true);
  for (NSString *line = [r readLine]; line != nil; line = [r readLine]) {
    IOSObjectArray *words = [line split:@"\\s" limit:1000];
    {
      IOSObjectArray *a__ = words;
      NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      NSString * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        NSString *word = *b__++;
        totalWords++;
        if (((jint) [((NSString *) nil_chk(word)) length]) == 0) continue;
        [pw printWithNSString:EduStanfordNlpUtilStringUtils_padWithNSString_withInt_(JreStrcat("$C", word, ':'), 8)];
        if ([tlp isPunctuationWordWithNSString:word]) {
          totalWords--;
          [pw printWithNSString:word];
        }
        else if (EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_isDigitsWithNSString_(word)) {
          [pw printWithNSString:JreStrcat("$$", word, @" [NUMBER]")];
        }
        else if ([cewm containsKeyWithNSString:word]) {
          coveredWords++;
          if (allTranslations) {
            id<JavaUtilList> trans = new_JavaUtilArrayList_initWithJavaUtilCollection_([cewm getAllTranslationsWithNSString:word]);
            for (NSString * __strong s in trans) {
              [pw printWithNSString:JreStrcat("$$", ([trans indexOfWithId:s] > 0 ? @"|" : @""), s)];
            }
          }
          else {
            [pw printWithNSString:[cewm getFirstTranslationWithNSString:word]];
          }
        }
        else {
          [pw printWithNSString:@"[UNK]"];
        }
        [pw println];
      }
    }
    [pw println];
  }
  [r close];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printWithNSString:JreStrcat("$I$", @"Finished translating ", totalWords, @" words (")];
  [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:JreStrcat("I$", coveredWords, @" were in dictionary).")];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap)

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_SingletonHolder)

@implementation EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_SingletonHolder

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_SingletonHolder_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE", "LEduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap;", .constantValue.asLong = 0, 0x1a, -1, 0, -1, -1 },
  };
  static const void *ptrTable[] = { &EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_SingletonHolder_INSTANCE, "LEduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap;" };
  static const J2ObjcClassInfo _EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_SingletonHolder = { "SingletonHolder", "edu.stanford.nlp.trees.international.pennchinese", ptrTable, methods, fields, 7, 0xa, 1, 1, 1, -1, -1, -1, -1 };
  return &_EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_SingletonHolder;
}

+ (void)initialize {
  if (self == [EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_SingletonHolder class]) {
    EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_SingletonHolder_INSTANCE = new_EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_init();
    J2OBJC_SET_INITIALIZED(EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_SingletonHolder)
  }
}

@end

void EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_SingletonHolder_init(EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_SingletonHolder *self) {
  NSObject_init(self);
}

EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_SingletonHolder *new_EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_SingletonHolder_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_SingletonHolder, init)
}

EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_SingletonHolder *create_EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_SingletonHolder_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_SingletonHolder, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_SingletonHolder)
