//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/trees/international/pennchinese/CHTBTokenizer.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/io/EncodingPrintWriter.h"
#include "edu/stanford/nlp/process/AbstractTokenizer.h"
#include "edu/stanford/nlp/process/Tokenizer.h"
#include "edu/stanford/nlp/trees/international/pennchinese/CHTBLexer.h"
#include "edu/stanford/nlp/trees/international/pennchinese/CHTBTokenizer.h"
#include "java/io/BufferedReader.h"
#include "java/io/FileInputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStreamReader.h"
#include "java/io/Reader.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface EduStanfordNlpTreesInternationalPennchineseCHTBTokenizer () {
 @public
  EduStanfordNlpTreesInternationalPennchineseCHTBLexer *lexer_;
}

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpTreesInternationalPennchineseCHTBTokenizer, lexer_, EduStanfordNlpTreesInternationalPennchineseCHTBLexer *)

@implementation EduStanfordNlpTreesInternationalPennchineseCHTBTokenizer

- (instancetype)initWithJavaIoReader:(JavaIoReader *)r {
  EduStanfordNlpTreesInternationalPennchineseCHTBTokenizer_initWithJavaIoReader_(self, r);
  return self;
}

- (NSString *)getNext {
  @try {
    jint a;
    while ((a = [((EduStanfordNlpTreesInternationalPennchineseCHTBLexer *) nil_chk(lexer_)) yylex]) == EduStanfordNlpTreesInternationalPennchineseCHTBLexer_IGNORE) {
    }
    if (a == EduStanfordNlpTreesInternationalPennchineseCHTBLexer_YYEOF) {
      return nil;
    }
    else {
      return [lexer_ match];
    }
  }
  @catch (JavaIoIOException *ioe) {
  }
  return nil;
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  EduStanfordNlpTreesInternationalPennchineseCHTBTokenizer_mainWithNSStringArray_(args);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, 1, -1, -1 },
    { NULL, "V", 0x9, 2, 3, 4, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaIoReader:);
  methods[1].selector = @selector(getNext);
  methods[2].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "lexer_", "LEduStanfordNlpTreesInternationalPennchineseCHTBLexer;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoReader;", "()Ljava/lang/String;", "main", "[LNSString;", "LJavaIoIOException;", "Ledu/stanford/nlp/process/AbstractTokenizer<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpTreesInternationalPennchineseCHTBTokenizer = { "CHTBTokenizer", "edu.stanford.nlp.trees.international.pennchinese", ptrTable, methods, fields, 7, 0x1, 3, 1, -1, -1, -1, 5, -1 };
  return &_EduStanfordNlpTreesInternationalPennchineseCHTBTokenizer;
}

@end

void EduStanfordNlpTreesInternationalPennchineseCHTBTokenizer_initWithJavaIoReader_(EduStanfordNlpTreesInternationalPennchineseCHTBTokenizer *self, JavaIoReader *r) {
  EduStanfordNlpProcessAbstractTokenizer_init(self);
  self->lexer_ = new_EduStanfordNlpTreesInternationalPennchineseCHTBLexer_initWithJavaIoReader_(r);
}

EduStanfordNlpTreesInternationalPennchineseCHTBTokenizer *new_EduStanfordNlpTreesInternationalPennchineseCHTBTokenizer_initWithJavaIoReader_(JavaIoReader *r) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesInternationalPennchineseCHTBTokenizer, initWithJavaIoReader_, r)
}

EduStanfordNlpTreesInternationalPennchineseCHTBTokenizer *create_EduStanfordNlpTreesInternationalPennchineseCHTBTokenizer_initWithJavaIoReader_(JavaIoReader *r) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesInternationalPennchineseCHTBTokenizer, initWithJavaIoReader_, r)
}

void EduStanfordNlpTreesInternationalPennchineseCHTBTokenizer_mainWithNSStringArray_(IOSObjectArray *args) {
  EduStanfordNlpTreesInternationalPennchineseCHTBTokenizer_initialize();
  NSString *encoding = IOSObjectArray_Get(nil_chk(args), 1);
  JavaIoReader *in = new_JavaIoBufferedReader_initWithJavaIoReader_(new_JavaIoInputStreamReader_initWithJavaIoInputStream_withNSString_(new_JavaIoFileInputStream_initWithNSString_(IOSObjectArray_Get(args, 0)), encoding));
  id<EduStanfordNlpProcessTokenizer> st = new_EduStanfordNlpTreesInternationalPennchineseCHTBTokenizer_initWithJavaIoReader_(in);
  while ([st hasNext]) {
    NSString *s = [st next];
    EduStanfordNlpIoEncodingPrintWriter_out_printlnWithNSString_withNSString_(s, encoding);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTreesInternationalPennchineseCHTBTokenizer)
