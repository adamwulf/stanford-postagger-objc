//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/trees/international/pennchinese/CTBErrorCorrectingTreeNormalizer.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/io/EncodingPrintWriter.h"
#include "edu/stanford/nlp/ling/Label.h"
#include "edu/stanford/nlp/trees/BobChrisTreeNormalizer.h"
#include "edu/stanford/nlp/trees/Tree.h"
#include "edu/stanford/nlp/trees/TreeFactory.h"
#include "edu/stanford/nlp/trees/TreeTransformer.h"
#include "edu/stanford/nlp/trees/TreebankLanguagePack.h"
#include "edu/stanford/nlp/trees/international/pennchinese/CTBErrorCorrectingTreeNormalizer.h"
#include "edu/stanford/nlp/trees/international/pennchinese/CTBTreeReaderFactory.h"
#include "edu/stanford/nlp/trees/international/pennchinese/ChineseTreebankLanguagePack.h"
#include "edu/stanford/nlp/trees/tregex/TregexPattern.h"
#include "edu/stanford/nlp/trees/tregex/tsurgeon/Tsurgeon.h"
#include "edu/stanford/nlp/trees/tregex/tsurgeon/TsurgeonPattern.h"
#include "java/io/Serializable.h"
#include "java/lang/AssertionError.h"
#include "java/lang/Exception.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"
#include "java/util/function/Predicate.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"

@interface EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer () {
 @public
  id<EduStanfordNlpTreesTreeTransformer> tagExtender_;
  jboolean splitNPTMP_;
  jboolean splitPPTMP_;
  jboolean splitXPTMP_;
  id<JavaUtilFunctionPredicate> chineseEmptyFilter_;
}

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer, tagExtender_, id<EduStanfordNlpTreesTreeTransformer>)
J2OBJC_FIELD_SETTER(EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer, chineseEmptyFilter_, id<JavaUtilFunctionPredicate>)

inline jlong EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_get_serialVersionUID();
#define EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_serialVersionUID -8203853817025401845LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer, serialVersionUID, jlong)

inline JavaUtilRegexPattern *EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_get_NPTmpPattern();
static JavaUtilRegexPattern *EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_NPTmpPattern;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer, NPTmpPattern, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_get_PPTmpPattern();
static JavaUtilRegexPattern *EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_PPTmpPattern;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer, PPTmpPattern, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_get_TmpPattern();
static JavaUtilRegexPattern *EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_TmpPattern;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer, TmpPattern, JavaUtilRegexPattern *)

inline jboolean EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_get_DEBUG();
static jboolean EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_DEBUG;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer, DEBUG, jboolean)

inline IOSObjectArray *EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_get_splitPuncTregex();
static IOSObjectArray *EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_splitPuncTregex;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer, splitPuncTregex, IOSObjectArray *)

inline IOSObjectArray *EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_get_splitPuncTsurgeon();
static IOSObjectArray *EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_splitPuncTsurgeon;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer, splitPuncTsurgeon, IOSObjectArray *)

@interface EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_ChineseEmptyFilter : NSObject < JavaUtilFunctionPredicate, JavaIoSerializable >

- (jboolean)testWithId:(EduStanfordNlpTreesTree *)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_ChineseEmptyFilter)

inline jlong EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_ChineseEmptyFilter_get_serialVersionUID();
#define EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_ChineseEmptyFilter_serialVersionUID 8914098359495987617LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_ChineseEmptyFilter, serialVersionUID, jlong)

__attribute__((unused)) static void EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_ChineseEmptyFilter_init(EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_ChineseEmptyFilter *self);

__attribute__((unused)) static EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_ChineseEmptyFilter *new_EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_ChineseEmptyFilter_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_ChineseEmptyFilter *create_EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_ChineseEmptyFilter_init();

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_ChineseEmptyFilter)

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer)

@implementation EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithBoolean:(jboolean)splitNPTMP
                    withBoolean:(jboolean)splitPPTMP
                    withBoolean:(jboolean)splitXPTMP
                    withBoolean:(jboolean)charTags {
  EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_initWithBoolean_withBoolean_withBoolean_withBoolean_(self, splitNPTMP, splitPPTMP, splitXPTMP, charTags);
  return self;
}

- (NSString *)cleanUpLabelWithNSString:(NSString *)label {
  if (label == nil) {
    return @"ROOT";
  }
  else {
    jboolean nptemp = [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_NPTmpPattern)) matcherWithJavaLangCharSequence:label])) matches];
    jboolean pptemp = [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_PPTmpPattern)) matcherWithJavaLangCharSequence:label])) matches];
    jboolean anytemp = [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_TmpPattern)) matcherWithJavaLangCharSequence:label])) matches];
    label = [((id<EduStanfordNlpTreesTreebankLanguagePack>) nil_chk(tlp_)) basicCategoryWithNSString:label];
    if (anytemp && splitXPTMP_) {
      (void) JreStrAppendStrong(&label, "$", @"-TMP");
    }
    else if (pptemp && splitPPTMP_) {
      label = JreStrcat("$$", label, @"-TMP");
    }
    else if (nptemp && splitNPTMP_) {
      label = JreStrcat("$$", label, @"-TMP");
    }
    return label;
  }
}

- (EduStanfordNlpTreesTree *)normalizeWholeTreeWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)tree
                                        withEduStanfordNlpTreesTreeFactory:(id<EduStanfordNlpTreesTreeFactory>)tf {
  EduStanfordNlpTreesTree *newTree = [((EduStanfordNlpTreesTree *) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(tree)) pruneWithJavaUtilFunctionPredicate:chineseEmptyFilter_ withEduStanfordNlpTreesTreeFactory:tf])) spliceOutWithJavaUtilFunctionPredicate:aOverAFilter_];
  IOSObjectArray *kids = [((EduStanfordNlpTreesTree *) nil_chk(newTree)) children];
  if (((IOSObjectArray *) nil_chk(kids))->size_ > 1) {
    EduStanfordNlpIoEncodingPrintWriter_err_printlnWithNSString_withNSString_(JreStrcat("$@", @"Possible error: non-unary initial rewrite: ", [newTree localTree]), EduStanfordNlpTreesInternationalPennchineseChineseTreebankLanguagePack_ENCODING);
  }
  else {
    if (kids->size_ > 0) {
      EduStanfordNlpTreesTree *child = IOSObjectArray_Get(kids, 0);
      if (![((EduStanfordNlpTreesTree *) nil_chk(child)) isPhrasal]) {
        EduStanfordNlpIoEncodingPrintWriter_err_printlnWithNSString_withNSString_(JreStrcat("$@", @"Correcting error: treebank tree is not phrasal; wrapping in FRAG: ", child), EduStanfordNlpTreesInternationalPennchineseChineseTreebankLanguagePack_ENCODING);
        EduStanfordNlpTreesTree *added = [((id<EduStanfordNlpTreesTreeFactory>) nil_chk(tf)) newTreeNodeWithNSString:@"FRAG" withJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_(kids)];
        (void) [newTree setChildWithInt:0 withEduStanfordNlpTreesTree:added];
      }
    }
    else {
      EduStanfordNlpIoEncodingPrintWriter_err_printlnWithNSString_withNSString_(JreStrcat("$@", @"Error: tree with no children: ", tree), EduStanfordNlpTreesInternationalPennchineseChineseTreebankLanguagePack_ENCODING);
    }
  }
  for (EduStanfordNlpTreesTree * __strong subtree in newTree) {
    if ([((NSString *) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(subtree)) value])) isEqual:@"CP"] && [subtree numChildren] == 1) {
      EduStanfordNlpTreesTree *subsubtree = [subtree firstChild];
      if ([((NSString *) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(subsubtree)) value])) isEqual:@"ROOT"]) {
        if ([((EduStanfordNlpTreesTree *) nil_chk([subsubtree firstChild])) isLeaf] && [@"CP" isEqual:[((EduStanfordNlpTreesTree *) nil_chk([subsubtree firstChild])) value]]) {
          EduStanfordNlpIoEncodingPrintWriter_err_printlnWithNSString_withNSString_(JreStrcat("$@", @"Correcting error: seriously messed up tree in CTB6: ", newTree), EduStanfordNlpTreesInternationalPennchineseChineseTreebankLanguagePack_ENCODING);
          id<JavaUtilList> children = [subsubtree getChildrenAsList];
          children = [((id<JavaUtilList>) nil_chk(children)) subListWithInt:1 withInt:[children size]];
          [subtree setChildrenWithJavaUtilList:children];
          EduStanfordNlpIoEncodingPrintWriter_err_printlnWithNSString_withNSString_(JreStrcat("$@", @"  Corrected as:                                     ", newTree), EduStanfordNlpTreesInternationalPennchineseChineseTreebankLanguagePack_ENCODING);
        }
      }
    }
    if ([subtree isPreTerminal]) {
      if ([((NSString *) nil_chk([subtree value])) matches:@"NP"]) {
        if ([((id<JavaUtilFunctionPredicate>) nil_chk(EduStanfordNlpTreesInternationalPennchineseChineseTreebankLanguagePack_chineseDouHaoAcceptFilter())) testWithId:[((EduStanfordNlpTreesTree *) nil_chk([subtree firstChild])) value]]) {
          if (EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_DEBUG) {
            EduStanfordNlpIoEncodingPrintWriter_err_printlnWithNSString_withNSString_(JreStrcat("$@", @"Correcting error: NP preterminal over douhao; preterminal changed to PU: ", subtree), EduStanfordNlpTreesInternationalPennchineseChineseTreebankLanguagePack_ENCODING);
          }
          [subtree setValueWithNSString:@"PU"];
        }
        else if ([((NSString *) nil_chk([((EduStanfordNlpTreesTree *) nil_chk([subtree parentWithEduStanfordNlpTreesTree:newTree])) value])) matches:@"NP"]) {
          if (EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_DEBUG) {
            EduStanfordNlpIoEncodingPrintWriter_err_printlnWithNSString_withNSString_(JreStrcat("$@", @"Correcting error: NP preterminal w/ NP parent; preterminal changed to NN: ", [subtree parentWithEduStanfordNlpTreesTree:newTree]), EduStanfordNlpTreesInternationalPennchineseChineseTreebankLanguagePack_ENCODING);
          }
          [subtree setValueWithNSString:@"NN"];
        }
        else {
          if (EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_DEBUG) {
            EduStanfordNlpIoEncodingPrintWriter_err_printlnWithNSString_withNSString_(JreStrcat("$@", @"Correcting error: NP preterminal w/o NP parent, changing preterminal to NN: ", [subtree parentWithEduStanfordNlpTreesTree:newTree]), EduStanfordNlpTreesInternationalPennchineseChineseTreebankLanguagePack_ENCODING);
          }
          [subtree setValueWithNSString:@"NN"];
        }
      }
      else if ([((NSString *) nil_chk([subtree value])) matches:@"PU"]) {
        if ([((NSString *) nil_chk([((EduStanfordNlpTreesTree *) nil_chk([subtree firstChild])) value])) matches:@"\u4ed6"]) {
          if (EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_DEBUG) {
            EduStanfordNlpIoEncodingPrintWriter_err_printlnWithNSString_withNSString_(JreStrcat("$@", @"Correcting error: \"\u4ed6\" under PU tag; tag changed to PN: ", subtree), EduStanfordNlpTreesInternationalPennchineseChineseTreebankLanguagePack_ENCODING);
          }
          [subtree setValueWithNSString:@"PN"];
        }
        else if ([((NSString *) nil_chk([((EduStanfordNlpTreesTree *) nil_chk([subtree firstChild])) value])) isEqual:@"\u91cc"]) {
          if (EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_DEBUG) {
            EduStanfordNlpIoEncodingPrintWriter_err_printlnWithNSString_withNSString_(JreStrcat("$$$@", @"Correcting error: \"", [((EduStanfordNlpTreesTree *) nil_chk([subtree firstChild])) value], @"\" under PU tag; tag changed to LC: ", subtree), EduStanfordNlpTreesInternationalPennchineseChineseTreebankLanguagePack_ENCODING);
          }
          [subtree setValueWithNSString:@"LC"];
        }
        else if ([((NSString *) nil_chk([((EduStanfordNlpTreesTree *) nil_chk([subtree firstChild])) value])) isEqual:@"\u662f"]) {
          if (EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_DEBUG) {
            EduStanfordNlpIoEncodingPrintWriter_err_printlnWithNSString_withNSString_(JreStrcat("$$$@", @"Correcting error: \"", [((EduStanfordNlpTreesTree *) nil_chk([subtree firstChild])) value], @"\" under PU tag; tag changed to VC: ", subtree), EduStanfordNlpTreesInternationalPennchineseChineseTreebankLanguagePack_ENCODING);
          }
          [subtree setValueWithNSString:@"VC"];
        }
        else if ([((NSString *) nil_chk([((EduStanfordNlpTreesTree *) nil_chk([subtree firstChild])) value])) matches:@"tw|\u534a\u7a74\u5f0f"]) {
          if (EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_DEBUG) {
            EduStanfordNlpIoEncodingPrintWriter_err_printlnWithNSString_withNSString_(JreStrcat("$$$@", @"Correcting error: \"", [((EduStanfordNlpTreesTree *) nil_chk([subtree firstChild])) value], @"\" under PU tag; tag changed to NN: ", subtree), EduStanfordNlpTreesInternationalPennchineseChineseTreebankLanguagePack_ENCODING);
          }
          [subtree setValueWithNSString:@"NN"];
        }
        else if ([((NSString *) nil_chk([((EduStanfordNlpTreesTree *) nil_chk([subtree firstChild])) value])) matches:@"33"]) {
          if (EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_DEBUG) {
            EduStanfordNlpIoEncodingPrintWriter_err_printlnWithNSString_withNSString_(JreStrcat("$@", @"Correcting error: \"33\" under PU tag; tag changed to CD: ", subtree), EduStanfordNlpTreesInternationalPennchineseChineseTreebankLanguagePack_ENCODING);
          }
          [subtree setValueWithNSString:@"CD"];
        }
      }
    }
    else if ([((NSString *) nil_chk([subtree value])) matches:@"NN"]) {
      if (EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_DEBUG) {
        EduStanfordNlpIoEncodingPrintWriter_err_printlnWithNSString_withNSString_(JreStrcat("$@", @"Correcting error: NN phrasal tag changed to NP: ", subtree), EduStanfordNlpTreesInternationalPennchineseChineseTreebankLanguagePack_ENCODING);
      }
      [subtree setValueWithNSString:@"NP"];
    }
    else if ([((NSString *) nil_chk([subtree value])) matches:@"MSP"]) {
      if (EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_DEBUG) {
        EduStanfordNlpIoEncodingPrintWriter_err_printlnWithNSString_withNSString_(JreStrcat("$@", @"Correcting error: MSP phrasal tag changed to VP: ", subtree), EduStanfordNlpTreesInternationalPennchineseChineseTreebankLanguagePack_ENCODING);
      }
      [subtree setValueWithNSString:@"VP"];
    }
  }
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_splitPuncTregex))->size_; ++i) {
    if (EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_DEBUG) {
      EduStanfordNlpTreesTree *preProcessed = [((EduStanfordNlpTreesTree *) nil_chk(newTree)) deepCopy];
      newTree = EduStanfordNlpTreesTregexTsurgeonTsurgeon_processPatternWithEduStanfordNlpTreesTregexTregexPattern_withEduStanfordNlpTreesTregexTsurgeonTsurgeonPattern_withEduStanfordNlpTreesTree_(IOSObjectArray_Get(EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_splitPuncTregex, i), IOSObjectArray_Get(nil_chk(EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_splitPuncTsurgeon), i), newTree);
      if (![((EduStanfordNlpTreesTree *) nil_chk(preProcessed)) isEqual:newTree]) {
        EduStanfordNlpIoEncodingPrintWriter_err_printlnWithNSString_withNSString_(JreStrcat("$@$@", @"Correcting error: Updated tree using tregex ", IOSObjectArray_Get(EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_splitPuncTregex, i), @" and tsurgeon ", IOSObjectArray_Get(EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_splitPuncTsurgeon, i)), EduStanfordNlpTreesInternationalPennchineseChineseTreebankLanguagePack_ENCODING);
      }
    }
    else {
      newTree = EduStanfordNlpTreesTregexTsurgeonTsurgeon_processPatternWithEduStanfordNlpTreesTregexTregexPattern_withEduStanfordNlpTreesTregexTsurgeonTsurgeonPattern_withEduStanfordNlpTreesTree_(IOSObjectArray_Get(EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_splitPuncTregex, i), IOSObjectArray_Get(nil_chk(EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_splitPuncTsurgeon), i), newTree);
    }
  }
  if (tagExtender_ != nil) {
    newTree = [tagExtender_ transformTreeWithEduStanfordNlpTreesTree:newTree];
  }
  return newTree;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, 1, 2, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x1, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithBoolean:withBoolean:withBoolean:withBoolean:);
  methods[2].selector = @selector(cleanUpLabelWithNSString:);
  methods[3].selector = @selector(normalizeWholeTreeWithEduStanfordNlpTreesTree:withEduStanfordNlpTreesTreeFactory:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "NPTmpPattern", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 5, -1, -1 },
    { "PPTmpPattern", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 6, -1, -1 },
    { "TmpPattern", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 7, -1, -1 },
    { "DEBUG", "Z", .constantValue.asLong = 0, 0x1a, -1, 8, -1, -1 },
    { "tagExtender_", "LEduStanfordNlpTreesTreeTransformer;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "splitNPTMP_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "splitPPTMP_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "splitXPTMP_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "chineseEmptyFilter_", "LJavaUtilFunctionPredicate;", .constantValue.asLong = 0, 0x12, -1, -1, 9, -1 },
    { "splitPuncTregex", "[LEduStanfordNlpTreesTregexTregexPattern;", .constantValue.asLong = 0, 0x1a, -1, 10, -1, -1 },
    { "splitPuncTsurgeon", "[LEduStanfordNlpTreesTregexTsurgeonTsurgeonPattern;", .constantValue.asLong = 0, 0x1a, -1, 11, -1, -1 },
  };
  static const void *ptrTable[] = { "ZZZZ", "cleanUpLabel", "LNSString;", "normalizeWholeTree", "LEduStanfordNlpTreesTree;LEduStanfordNlpTreesTreeFactory;", &EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_NPTmpPattern, &EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_PPTmpPattern, &EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_TmpPattern, &EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_DEBUG, "Ljava/util/function/Predicate<Ledu/stanford/nlp/trees/Tree;>;", &EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_splitPuncTregex, &EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_splitPuncTsurgeon, "LEduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_ChineseEmptyFilter;LEduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_CTBErrorCorrectingTreeReaderFactory;" };
  static const J2ObjcClassInfo _EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer = { "CTBErrorCorrectingTreeNormalizer", "edu.stanford.nlp.trees.international.pennchinese", ptrTable, methods, fields, 7, 0x1, 4, 12, -1, 12, -1, -1, -1 };
  return &_EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer;
}

+ (void)initialize {
  if (self == [EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer class]) {
    EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_NPTmpPattern = JavaUtilRegexPattern_compileWithNSString_(@"NP.*-TMP.*");
    EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_PPTmpPattern = JavaUtilRegexPattern_compileWithNSString_(@"PP.*-TMP.*");
    EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_TmpPattern = JavaUtilRegexPattern_compileWithNSString_(@".*-TMP.*");
    EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_DEBUG = (JavaLangSystem_getPropertyWithNSString_withNSString_(@"CTBErrorCorrectingTreeNormalizer", nil) != nil);
    EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_splitPuncTregex = [IOSObjectArray newArrayWithObjects:(id[]){ EduStanfordNlpTreesTregexTregexPattern_compileWithNSString_(@"PU=punc < \u5979\uff5b") } count:1 type:EduStanfordNlpTreesTregexTregexPattern_class_()];
    EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_splitPuncTsurgeon = [IOSObjectArray newArrayWithObjects:(id[]){ EduStanfordNlpTreesTregexTsurgeonTsurgeon_parseOperationWithNSString_(@"replace punc (PN \u5979) (PU \uff5b)") } count:1 type:EduStanfordNlpTreesTregexTsurgeonTsurgeonPattern_class_()];
    {
      if (EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_splitPuncTregex->size_ != EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_splitPuncTsurgeon->size_) {
        @throw new_JavaLangAssertionError_initWithId_(@"splitPuncTregex and splitPuncTsurgeon have different lengths in CTBErrorCorrectingTreeNormalizer.java");
      }
    }
    J2OBJC_SET_INITIALIZED(EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer)
  }
}

@end

void EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_init(EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer *self) {
  EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_initWithBoolean_withBoolean_withBoolean_withBoolean_(self, false, false, false, false);
}

EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer *new_EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer, init)
}

EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer *create_EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer, init)
}

void EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_initWithBoolean_withBoolean_withBoolean_withBoolean_(EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer *self, jboolean splitNPTMP, jboolean splitPPTMP, jboolean splitXPTMP, jboolean charTags) {
  EduStanfordNlpTreesBobChrisTreeNormalizer_init(self);
  self->chineseEmptyFilter_ = new_EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_ChineseEmptyFilter_init();
  self->splitNPTMP_ = splitNPTMP;
  self->splitPPTMP_ = splitPPTMP;
  self->splitXPTMP_ = splitXPTMP;
  if (charTags) {
    @try {
      self->tagExtender_ = (id<EduStanfordNlpTreesTreeTransformer>) cast_check([((IOSClass *) nil_chk(IOSClass_forName_(@"edu.stanford.nlp.trees.international.pennchinese.CharacterLevelTagExtender"))) newInstance], EduStanfordNlpTreesTreeTransformer_class_());
    }
    @catch (JavaLangException *e) {
      @throw new_JavaLangRuntimeException_initWithNSException_(e);
    }
  }
  else {
    self->tagExtender_ = nil;
  }
}

EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer *new_EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_initWithBoolean_withBoolean_withBoolean_withBoolean_(jboolean splitNPTMP, jboolean splitPPTMP, jboolean splitXPTMP, jboolean charTags) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer, initWithBoolean_withBoolean_withBoolean_withBoolean_, splitNPTMP, splitPPTMP, splitXPTMP, charTags)
}

EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer *create_EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_initWithBoolean_withBoolean_withBoolean_withBoolean_(jboolean splitNPTMP, jboolean splitPPTMP, jboolean splitXPTMP, jboolean charTags) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer, initWithBoolean_withBoolean_withBoolean_withBoolean_, splitNPTMP, splitPPTMP, splitXPTMP, charTags)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer)

@implementation EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_ChineseEmptyFilter

- (jboolean)testWithId:(EduStanfordNlpTreesTree *)t {
  IOSObjectArray *kids = [((EduStanfordNlpTreesTree *) nil_chk(t)) children];
  id<EduStanfordNlpLingLabel> l = [t label];
  if ((l != nil) && [((id<EduStanfordNlpLingLabel>) nil_chk(l)) value] != nil && ([((NSString *) nil_chk([l value])) matches:@"-NONE-.*"]) && ![t isLeaf] && ((IOSObjectArray *) nil_chk(kids))->size_ == 1 && [((EduStanfordNlpTreesTree *) nil_chk(IOSObjectArray_Get(kids, 0))) isLeaf]) {
    if (![((NSString *) nil_chk([((id<EduStanfordNlpLingLabel>) nil_chk(l)) value])) isEqual:@"-NONE-"]) {
      EduStanfordNlpIoEncodingPrintWriter_err_printlnWithNSString_withNSString_(JreStrcat("$$$@", @"Deleting errant node ", [l value], @" as if -NONE-: ", t), EduStanfordNlpTreesInternationalPennchineseChineseTreebankLanguagePack_ENCODING);
    }
    return false;
  }
  return true;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_ChineseEmptyFilter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilFunctionPredicate>)and__WithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)arg0 {
  return JavaUtilFunctionPredicate_and__WithJavaUtilFunctionPredicate_(self, arg0);
}

- (id<JavaUtilFunctionPredicate>)negate {
  return JavaUtilFunctionPredicate_negate(self);
}

- (id<JavaUtilFunctionPredicate>)or__WithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)arg0 {
  return JavaUtilFunctionPredicate_or__WithJavaUtilFunctionPredicate_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_ChineseEmptyFilter_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "test", "LEduStanfordNlpTreesTree;", "LEduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer;", "Ljava/lang/Object;Ljava/util/function/Predicate<Ledu/stanford/nlp/trees/Tree;>;Ljava/io/Serializable;" };
  static const J2ObjcClassInfo _EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_ChineseEmptyFilter = { "ChineseEmptyFilter", "edu.stanford.nlp.trees.international.pennchinese", ptrTable, methods, fields, 7, 0xa, 2, 1, 2, -1, -1, 3, -1 };
  return &_EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_ChineseEmptyFilter;
}

@end

void EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_ChineseEmptyFilter_init(EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_ChineseEmptyFilter *self) {
  NSObject_init(self);
}

EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_ChineseEmptyFilter *new_EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_ChineseEmptyFilter_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_ChineseEmptyFilter, init)
}

EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_ChineseEmptyFilter *create_EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_ChineseEmptyFilter_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_ChineseEmptyFilter, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_ChineseEmptyFilter)

@implementation EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_CTBErrorCorrectingTreeReaderFactory

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_CTBErrorCorrectingTreeReaderFactory_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LEduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer;" };
  static const J2ObjcClassInfo _EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_CTBErrorCorrectingTreeReaderFactory = { "CTBErrorCorrectingTreeReaderFactory", "edu.stanford.nlp.trees.international.pennchinese", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_CTBErrorCorrectingTreeReaderFactory;
}

@end

void EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_CTBErrorCorrectingTreeReaderFactory_init(EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_CTBErrorCorrectingTreeReaderFactory *self) {
  EduStanfordNlpTreesInternationalPennchineseCTBTreeReaderFactory_initWithEduStanfordNlpTreesTreeNormalizer_(self, new_EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_initWithBoolean_withBoolean_withBoolean_withBoolean_(false, false, false, false));
}

EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_CTBErrorCorrectingTreeReaderFactory *new_EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_CTBErrorCorrectingTreeReaderFactory_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_CTBErrorCorrectingTreeReaderFactory, init)
}

EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_CTBErrorCorrectingTreeReaderFactory *create_EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_CTBErrorCorrectingTreeReaderFactory_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_CTBErrorCorrectingTreeReaderFactory, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTreesInternationalPennchineseCTBErrorCorrectingTreeNormalizer_CTBErrorCorrectingTreeReaderFactory)
