//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/trees/international/pennchinese/ChineseUtils.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/io/EncodingPrintWriter.h"
#include "edu/stanford/nlp/trees/international/pennchinese/ChineseUtils.h"
#include "edu/stanford/nlp/util/StringUtils.h"
#include "java/io/BufferedReader.h"
#include "java/io/InputStream.h"
#include "java/io/InputStreamReader.h"
#include "java/io/PrintStream.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Character.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"

@interface EduStanfordNlpTreesInternationalPennchineseChineseUtils ()

- (instancetype)init;

+ (NSString *)normalizeBMPWithNSString:(NSString *)inArg
                               withInt:(jint)ascii
                               withInt:(jint)spaceChar
                               withInt:(jint)midDot;

+ (NSString *)normalizeUnicodeWithNSString:(NSString *)inArg
                                   withInt:(jint)ascii
                                   withInt:(jint)spaceChar
                                   withInt:(jint)midDot;

+ (jboolean)isAsciiLowHighWithInt:(jint)cp;

@end

inline jboolean EduStanfordNlpTreesInternationalPennchineseChineseUtils_get_ONLY_BMP();
#define EduStanfordNlpTreesInternationalPennchineseChineseUtils_ONLY_BMP false
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpTreesInternationalPennchineseChineseUtils, ONLY_BMP, jboolean)

inline JavaUtilRegexPattern *EduStanfordNlpTreesInternationalPennchineseChineseUtils_get_dateChars();
static JavaUtilRegexPattern *EduStanfordNlpTreesInternationalPennchineseChineseUtils_dateChars;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpTreesInternationalPennchineseChineseUtils, dateChars, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *EduStanfordNlpTreesInternationalPennchineseChineseUtils_get_dateCharsPlus();
static JavaUtilRegexPattern *EduStanfordNlpTreesInternationalPennchineseChineseUtils_dateCharsPlus;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpTreesInternationalPennchineseChineseUtils, dateCharsPlus, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *EduStanfordNlpTreesInternationalPennchineseChineseUtils_get_numberChars();
static JavaUtilRegexPattern *EduStanfordNlpTreesInternationalPennchineseChineseUtils_numberChars;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpTreesInternationalPennchineseChineseUtils, numberChars, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *EduStanfordNlpTreesInternationalPennchineseChineseUtils_get_letterChars();
static JavaUtilRegexPattern *EduStanfordNlpTreesInternationalPennchineseChineseUtils_letterChars;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpTreesInternationalPennchineseChineseUtils, letterChars, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *EduStanfordNlpTreesInternationalPennchineseChineseUtils_get_periodChars();
static JavaUtilRegexPattern *EduStanfordNlpTreesInternationalPennchineseChineseUtils_periodChars;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpTreesInternationalPennchineseChineseUtils, periodChars, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *EduStanfordNlpTreesInternationalPennchineseChineseUtils_get_separatingPuncChars();
static JavaUtilRegexPattern *EduStanfordNlpTreesInternationalPennchineseChineseUtils_separatingPuncChars;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpTreesInternationalPennchineseChineseUtils, separatingPuncChars, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *EduStanfordNlpTreesInternationalPennchineseChineseUtils_get_ambiguousPuncChars();
static JavaUtilRegexPattern *EduStanfordNlpTreesInternationalPennchineseChineseUtils_ambiguousPuncChars;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpTreesInternationalPennchineseChineseUtils, ambiguousPuncChars, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *EduStanfordNlpTreesInternationalPennchineseChineseUtils_get_midDotPattern();
static JavaUtilRegexPattern *EduStanfordNlpTreesInternationalPennchineseChineseUtils_midDotPattern;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpTreesInternationalPennchineseChineseUtils, midDotPattern, JavaUtilRegexPattern *)

__attribute__((unused)) static void EduStanfordNlpTreesInternationalPennchineseChineseUtils_init(EduStanfordNlpTreesInternationalPennchineseChineseUtils *self);

__attribute__((unused)) static EduStanfordNlpTreesInternationalPennchineseChineseUtils *new_EduStanfordNlpTreesInternationalPennchineseChineseUtils_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpTreesInternationalPennchineseChineseUtils *create_EduStanfordNlpTreesInternationalPennchineseChineseUtils_init();

__attribute__((unused)) static NSString *EduStanfordNlpTreesInternationalPennchineseChineseUtils_normalizeBMPWithNSString_withInt_withInt_withInt_(NSString *inArg, jint ascii, jint spaceChar, jint midDot);

__attribute__((unused)) static NSString *EduStanfordNlpTreesInternationalPennchineseChineseUtils_normalizeUnicodeWithNSString_withInt_withInt_withInt_(NSString *inArg, jint ascii, jint spaceChar, jint midDot);

__attribute__((unused)) static jboolean EduStanfordNlpTreesInternationalPennchineseChineseUtils_isAsciiLowHighWithInt_(jint cp);

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpTreesInternationalPennchineseChineseUtils)

NSString *EduStanfordNlpTreesInternationalPennchineseChineseUtils_ONEWHITE = @"[\\s\\p{Zs}]";
NSString *EduStanfordNlpTreesInternationalPennchineseChineseUtils_WHITE = @"[\\s\\p{Zs}]*";
NSString *EduStanfordNlpTreesInternationalPennchineseChineseUtils_WHITEPLUS = @"[\\s\\p{Zs}]+";
NSString *EduStanfordNlpTreesInternationalPennchineseChineseUtils_NUMBERS = @"[\u4e00\u4e8c\u4e09\u56db\u4e94\u516d\u4e03\u516b\u4e5d\u5341]";
NSString *EduStanfordNlpTreesInternationalPennchineseChineseUtils_MID_DOT_REGEX_STR = @"[\u00b7\u0387\u2022\u2024\u2027\u2219\u22c5\u30fb]";

@implementation EduStanfordNlpTreesInternationalPennchineseChineseUtils

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpTreesInternationalPennchineseChineseUtils_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jboolean)isNumberWithChar:(jchar)c {
  return EduStanfordNlpTreesInternationalPennchineseChineseUtils_isNumberWithChar_(c);
}

+ (NSString *)normalizeWithNSString:(NSString *)inArg {
  return EduStanfordNlpTreesInternationalPennchineseChineseUtils_normalizeWithNSString_(inArg);
}

+ (NSString *)normalizeWithNSString:(NSString *)inArg
                            withInt:(jint)ascii
                            withInt:(jint)spaceChar {
  return EduStanfordNlpTreesInternationalPennchineseChineseUtils_normalizeWithNSString_withInt_withInt_(inArg, ascii, spaceChar);
}

+ (NSString *)normalizeWithNSString:(NSString *)inArg
                            withInt:(jint)ascii
                            withInt:(jint)spaceChar
                            withInt:(jint)midDot {
  return EduStanfordNlpTreesInternationalPennchineseChineseUtils_normalizeWithNSString_withInt_withInt_withInt_(inArg, ascii, spaceChar, midDot);
}

+ (NSString *)normalizeBMPWithNSString:(NSString *)inArg
                               withInt:(jint)ascii
                               withInt:(jint)spaceChar
                               withInt:(jint)midDot {
  return EduStanfordNlpTreesInternationalPennchineseChineseUtils_normalizeBMPWithNSString_withInt_withInt_withInt_(inArg, ascii, spaceChar, midDot);
}

+ (NSString *)normalizeUnicodeWithNSString:(NSString *)inArg
                                   withInt:(jint)ascii
                                   withInt:(jint)spaceChar
                                   withInt:(jint)midDot {
  return EduStanfordNlpTreesInternationalPennchineseChineseUtils_normalizeUnicodeWithNSString_withInt_withInt_withInt_(inArg, ascii, spaceChar, midDot);
}

+ (jboolean)isAsciiLowHighWithInt:(jint)cp {
  return EduStanfordNlpTreesInternationalPennchineseChineseUtils_isAsciiLowHighWithInt_(cp);
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  EduStanfordNlpTreesInternationalPennchineseChineseUtils_mainWithNSStringArray_(args);
}

+ (NSString *)shapeOfWithJavaLangCharSequence:(id<JavaLangCharSequence>)input
                                  withBoolean:(jboolean)augmentedDateChars
                                  withBoolean:(jboolean)useMidDotShape {
  return EduStanfordNlpTreesInternationalPennchineseChineseUtils_shapeOfWithJavaLangCharSequence_withBoolean_withBoolean_(input, augmentedDateChars, useMidDotShape);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 2, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 2, 5, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 6, 5, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 7, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 10, 11, 12, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 13, 14, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(isNumberWithChar:);
  methods[2].selector = @selector(normalizeWithNSString:);
  methods[3].selector = @selector(normalizeWithNSString:withInt:withInt:);
  methods[4].selector = @selector(normalizeWithNSString:withInt:withInt:withInt:);
  methods[5].selector = @selector(normalizeBMPWithNSString:withInt:withInt:withInt:);
  methods[6].selector = @selector(normalizeUnicodeWithNSString:withInt:withInt:withInt:);
  methods[7].selector = @selector(isAsciiLowHighWithInt:);
  methods[8].selector = @selector(mainWithNSStringArray:);
  methods[9].selector = @selector(shapeOfWithJavaLangCharSequence:withBoolean:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ONLY_BMP", "Z", .constantValue.asBOOL = EduStanfordNlpTreesInternationalPennchineseChineseUtils_ONLY_BMP, 0x1a, -1, -1, -1, -1 },
    { "ONEWHITE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 15, -1, -1 },
    { "WHITE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 16, -1, -1 },
    { "WHITEPLUS", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 17, -1, -1 },
    { "NUMBERS", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 18, -1, -1 },
    { "MID_DOT_REGEX_STR", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 19, -1, -1 },
    { "LEAVE", "I", .constantValue.asInt = EduStanfordNlpTreesInternationalPennchineseChineseUtils_LEAVE, 0x19, -1, -1, -1, -1 },
    { "ASCII", "I", .constantValue.asInt = EduStanfordNlpTreesInternationalPennchineseChineseUtils_ASCII, 0x19, -1, -1, -1, -1 },
    { "NORMALIZE", "I", .constantValue.asInt = EduStanfordNlpTreesInternationalPennchineseChineseUtils_NORMALIZE, 0x19, -1, -1, -1, -1 },
    { "FULLWIDTH", "I", .constantValue.asInt = EduStanfordNlpTreesInternationalPennchineseChineseUtils_FULLWIDTH, 0x19, -1, -1, -1, -1 },
    { "DELETE", "I", .constantValue.asInt = EduStanfordNlpTreesInternationalPennchineseChineseUtils_DELETE, 0x19, -1, -1, -1, -1 },
    { "DELETE_EXCEPT_BETWEEN_ASCII", "I", .constantValue.asInt = EduStanfordNlpTreesInternationalPennchineseChineseUtils_DELETE_EXCEPT_BETWEEN_ASCII, 0x19, -1, -1, -1, -1 },
    { "MAX_LEGAL", "I", .constantValue.asInt = EduStanfordNlpTreesInternationalPennchineseChineseUtils_MAX_LEGAL, 0x19, -1, -1, -1, -1 },
    { "dateChars", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 20, -1, -1 },
    { "dateCharsPlus", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 21, -1, -1 },
    { "numberChars", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 22, -1, -1 },
    { "letterChars", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 23, -1, -1 },
    { "periodChars", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 24, -1, -1 },
    { "separatingPuncChars", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 25, -1, -1 },
    { "ambiguousPuncChars", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 26, -1, -1 },
    { "midDotPattern", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 27, -1, -1 },
  };
  static const void *ptrTable[] = { "isNumber", "C", "normalize", "LNSString;", "LNSString;II", "LNSString;III", "normalizeBMP", "normalizeUnicode", "isAsciiLowHigh", "I", "main", "[LNSString;", "LJavaIoIOException;", "shapeOf", "LJavaLangCharSequence;ZZ", &EduStanfordNlpTreesInternationalPennchineseChineseUtils_ONEWHITE, &EduStanfordNlpTreesInternationalPennchineseChineseUtils_WHITE, &EduStanfordNlpTreesInternationalPennchineseChineseUtils_WHITEPLUS, &EduStanfordNlpTreesInternationalPennchineseChineseUtils_NUMBERS, &EduStanfordNlpTreesInternationalPennchineseChineseUtils_MID_DOT_REGEX_STR, &EduStanfordNlpTreesInternationalPennchineseChineseUtils_dateChars, &EduStanfordNlpTreesInternationalPennchineseChineseUtils_dateCharsPlus, &EduStanfordNlpTreesInternationalPennchineseChineseUtils_numberChars, &EduStanfordNlpTreesInternationalPennchineseChineseUtils_letterChars, &EduStanfordNlpTreesInternationalPennchineseChineseUtils_periodChars, &EduStanfordNlpTreesInternationalPennchineseChineseUtils_separatingPuncChars, &EduStanfordNlpTreesInternationalPennchineseChineseUtils_ambiguousPuncChars, &EduStanfordNlpTreesInternationalPennchineseChineseUtils_midDotPattern };
  static const J2ObjcClassInfo _EduStanfordNlpTreesInternationalPennchineseChineseUtils = { "ChineseUtils", "edu.stanford.nlp.trees.international.pennchinese", ptrTable, methods, fields, 7, 0x1, 10, 21, -1, -1, -1, -1, -1 };
  return &_EduStanfordNlpTreesInternationalPennchineseChineseUtils;
}

+ (void)initialize {
  if (self == [EduStanfordNlpTreesInternationalPennchineseChineseUtils class]) {
    EduStanfordNlpTreesInternationalPennchineseChineseUtils_dateChars = JavaUtilRegexPattern_compileWithNSString_(@"[\u5e74\u6708\u65e5]+");
    EduStanfordNlpTreesInternationalPennchineseChineseUtils_dateCharsPlus = JavaUtilRegexPattern_compileWithNSString_(@"[\u5e74\u6708\u65e5\u53f7]+");
    EduStanfordNlpTreesInternationalPennchineseChineseUtils_numberChars = JavaUtilRegexPattern_compileWithNSString_(@"[0-9\uff10-\uff19\u4e00\u4e8c\u4e09\u56db\u4e94\u516d\u4e03\u516b\u4e5d\u5341\u96f6\u3007\u767e\u5343\u4e07\u4ebf\u5169\u25cb\u25ef\u3021-\u3029\u3038-\u303a]+");
    EduStanfordNlpTreesInternationalPennchineseChineseUtils_letterChars = JavaUtilRegexPattern_compileWithNSString_(@"[A-Za-z\uff21-\uff3a\uff41-\uff5a]+");
    EduStanfordNlpTreesInternationalPennchineseChineseUtils_periodChars = JavaUtilRegexPattern_compileWithNSString_(@"[\ufe52\u2027\uff0e.\u70b9]+");
    EduStanfordNlpTreesInternationalPennchineseChineseUtils_separatingPuncChars = JavaUtilRegexPattern_compileWithNSString_(@"[]!\"(),;:<=>?\\[\\\\`{|}~^\u3001-\u3003\u3008-\u3011\u3014-\u301f\u3030\uff3d\uff01\uff02\uff08\uff09\uff0c\uff1b\uff1a\uff1c\uff1d\uff1e\uff1f\uff3b\uff3c\uff40\uff5b\uff5c\uff5d\uff5e\uff3e]+");
    EduStanfordNlpTreesInternationalPennchineseChineseUtils_ambiguousPuncChars = JavaUtilRegexPattern_compileWithNSString_(@"[-#$%&'*+/@_\uff0d\uff03\uff04\uff05\uff06\uff07\uff0a\uff0b\uff0f\uff20\uff3f]+");
    EduStanfordNlpTreesInternationalPennchineseChineseUtils_midDotPattern = JavaUtilRegexPattern_compileWithNSString_(JreStrcat("$C", EduStanfordNlpTreesInternationalPennchineseChineseUtils_MID_DOT_REGEX_STR, '+'));
    J2OBJC_SET_INITIALIZED(EduStanfordNlpTreesInternationalPennchineseChineseUtils)
  }
}

@end

void EduStanfordNlpTreesInternationalPennchineseChineseUtils_init(EduStanfordNlpTreesInternationalPennchineseChineseUtils *self) {
  NSObject_init(self);
}

EduStanfordNlpTreesInternationalPennchineseChineseUtils *new_EduStanfordNlpTreesInternationalPennchineseChineseUtils_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesInternationalPennchineseChineseUtils, init)
}

EduStanfordNlpTreesInternationalPennchineseChineseUtils *create_EduStanfordNlpTreesInternationalPennchineseChineseUtils_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesInternationalPennchineseChineseUtils, init)
}

jboolean EduStanfordNlpTreesInternationalPennchineseChineseUtils_isNumberWithChar_(jchar c) {
  EduStanfordNlpTreesInternationalPennchineseChineseUtils_initialize();
  return (EduStanfordNlpUtilStringUtils_matchesWithNSString_withNSString_(NSString_valueOfChar_(c), EduStanfordNlpTreesInternationalPennchineseChineseUtils_NUMBERS) || JavaLangCharacter_isDigitWithChar_(c));
}

NSString *EduStanfordNlpTreesInternationalPennchineseChineseUtils_normalizeWithNSString_(NSString *inArg) {
  EduStanfordNlpTreesInternationalPennchineseChineseUtils_initialize();
  return EduStanfordNlpTreesInternationalPennchineseChineseUtils_normalizeWithNSString_withInt_withInt_(inArg, EduStanfordNlpTreesInternationalPennchineseChineseUtils_FULLWIDTH, EduStanfordNlpTreesInternationalPennchineseChineseUtils_ASCII);
}

NSString *EduStanfordNlpTreesInternationalPennchineseChineseUtils_normalizeWithNSString_withInt_withInt_(NSString *inArg, jint ascii, jint spaceChar) {
  EduStanfordNlpTreesInternationalPennchineseChineseUtils_initialize();
  return EduStanfordNlpTreesInternationalPennchineseChineseUtils_normalizeWithNSString_withInt_withInt_withInt_(inArg, ascii, spaceChar, EduStanfordNlpTreesInternationalPennchineseChineseUtils_LEAVE);
}

NSString *EduStanfordNlpTreesInternationalPennchineseChineseUtils_normalizeWithNSString_withInt_withInt_withInt_(NSString *inArg, jint ascii, jint spaceChar, jint midDot) {
  EduStanfordNlpTreesInternationalPennchineseChineseUtils_initialize();
  if (ascii < 0 || ascii > EduStanfordNlpTreesInternationalPennchineseChineseUtils_MAX_LEGAL || spaceChar < 0 || spaceChar > EduStanfordNlpTreesInternationalPennchineseChineseUtils_MAX_LEGAL) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"ChineseUtils: Unknown parameter option");
  }
  {
    return EduStanfordNlpTreesInternationalPennchineseChineseUtils_normalizeUnicodeWithNSString_withInt_withInt_withInt_(inArg, ascii, spaceChar, midDot);
  }
}

NSString *EduStanfordNlpTreesInternationalPennchineseChineseUtils_normalizeBMPWithNSString_withInt_withInt_withInt_(NSString *inArg, jint ascii, jint spaceChar, jint midDot) {
  EduStanfordNlpTreesInternationalPennchineseChineseUtils_initialize();
  JavaLangStringBuilder *out = new_JavaLangStringBuilder_init();
  jint len = ((jint) [((NSString *) nil_chk(inArg)) length]);
  for (jint i = 0; i < len; i++) {
    jchar cp = [inArg charAtWithInt:i];
    if (JavaLangCharacter_isHighSurrogateWithChar_(cp)) {
      if (i + 1 < len) {
        EduStanfordNlpIoEncodingPrintWriter_err_printlnWithNSString_(JreStrcat("$$$$", @"ChineseUtils.normalize warning: non-BMP codepoint U+", JavaLangInteger_toHexStringWithInt_(JavaLangCharacter_codePointAtWithJavaLangCharSequence_withInt_(inArg, i)), @" in ", inArg));
      }
      else {
        EduStanfordNlpIoEncodingPrintWriter_err_printlnWithNSString_(JreStrcat("$$$$", @"ChineseUtils.normalize warning: unmatched high surrogate character U+", JavaLangInteger_toHexStringWithInt_(JavaLangCharacter_codePointAtWithJavaLangCharSequence_withInt_(inArg, i)), @" in ", inArg));
      }
    }
    JavaLangCharacter_UnicodeBlock *cub = JavaLangCharacter_UnicodeBlock_ofWithChar_(cp);
    if (cub == JreLoadStatic(JavaLangCharacter_UnicodeBlock, PRIVATE_USE_AREA) || cub == JreLoadStatic(JavaLangCharacter_UnicodeBlock, SUPPLEMENTARY_PRIVATE_USE_AREA_A) || cub == JreLoadStatic(JavaLangCharacter_UnicodeBlock, SUPPLEMENTARY_PRIVATE_USE_AREA_B)) {
      EduStanfordNlpIoEncodingPrintWriter_err_printlnWithNSString_(JreStrcat("$$$$", @"ChineseUtils.normalize warning: private use area codepoint U+", JavaLangInteger_toHexStringWithInt_(cp), @" in ", inArg));
    }
    jboolean delete_ = false;
    switch (ascii) {
      case EduStanfordNlpTreesInternationalPennchineseChineseUtils_LEAVE:
      break;
      case EduStanfordNlpTreesInternationalPennchineseChineseUtils_ASCII:
      if (cp >= 0xff01 && cp <= 0xff5e) {
        cp -= ((jint) 0xFF00 - (jint) 0x0020);
      }
      break;
      case EduStanfordNlpTreesInternationalPennchineseChineseUtils_FULLWIDTH:
      if (cp >= '!' && cp <= '~') {
        cp += ((jint) 0xFF00 - (jint) 0x0020);
      }
      break;
      default:
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"ChineseUtils: Unsupported parameter option: ascii=", ascii));
    }
    {
      jchar cpp;
      jchar cpn;
      switch (spaceChar) {
        case EduStanfordNlpTreesInternationalPennchineseChineseUtils_LEAVE:
        break;
        case EduStanfordNlpTreesInternationalPennchineseChineseUtils_ASCII:
        if (JavaLangCharacter_isSpaceCharWithChar_(cp)) {
          cp = ' ';
        }
        break;
        case EduStanfordNlpTreesInternationalPennchineseChineseUtils_FULLWIDTH:
        if (JavaLangCharacter_isSpaceCharWithChar_(cp)) {
          cp = 0x3000;
        }
        break;
        case EduStanfordNlpTreesInternationalPennchineseChineseUtils_DELETE:
        if (JavaLangCharacter_isSpaceCharWithChar_(cp)) {
          delete_ = true;
        }
        break;
        case EduStanfordNlpTreesInternationalPennchineseChineseUtils_DELETE_EXCEPT_BETWEEN_ASCII:
        cpp = 0;
        if (i > 0) {
          cpp = [inArg charAtWithInt:i - 1];
        }
        cpn = 0;
        if (i < (len - 1)) {
          cpn = [inArg charAtWithInt:i + 1];
        }
        if (JavaLangCharacter_isSpaceCharWithChar_(cp) && !(EduStanfordNlpTreesInternationalPennchineseChineseUtils_isAsciiLowHighWithInt_(cpp) && EduStanfordNlpTreesInternationalPennchineseChineseUtils_isAsciiLowHighWithInt_(cpn))) {
          delete_ = true;
        }
      }
    }
    switch (midDot) {
      case EduStanfordNlpTreesInternationalPennchineseChineseUtils_LEAVE:
      break;
      case EduStanfordNlpTreesInternationalPennchineseChineseUtils_NORMALIZE:
      if (cp == 0x00b7 || cp == 0x0387 || cp == 0x2022 || cp == 0x2024 || cp == 0x2027 || cp == 0x2219 || cp == 0x22c5 || cp == 0x30fb) {
        cp = 0x00b7;
      }
      break;
      case EduStanfordNlpTreesInternationalPennchineseChineseUtils_FULLWIDTH:
      if (cp == 0x00b7 || cp == 0x0387 || cp == 0x2022 || cp == 0x2024 || cp == 0x2027 || cp == 0x2219 || cp == 0x22c5 || cp == 0x30fb) {
        cp = 0x30fb;
      }
      break;
      case EduStanfordNlpTreesInternationalPennchineseChineseUtils_DELETE:
      if (cp == 0x00b7 || cp == 0x0387 || cp == 0x2022 || cp == 0x2024 || cp == 0x2027 || cp == 0x2219 || cp == 0x22c5 || cp == 0x30fb) {
        delete_ = true;
      }
      break;
      default:
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"ChineseUtils: Unsupported parameter option: midDot=", midDot));
    }
    if (!delete_) {
      (void) [out appendWithChar:cp];
    }
  }
  return [out description];
}

NSString *EduStanfordNlpTreesInternationalPennchineseChineseUtils_normalizeUnicodeWithNSString_withInt_withInt_withInt_(NSString *inArg, jint ascii, jint spaceChar, jint midDot) {
  EduStanfordNlpTreesInternationalPennchineseChineseUtils_initialize();
  JavaLangStringBuilder *out = new_JavaLangStringBuilder_init();
  jint len = ((jint) [((NSString *) nil_chk(inArg)) length]);
  jint numCP = [inArg codePointCount:0 endIndex:len];
  for (jint i = 0; i < numCP; i++) {
    jint offset = [inArg offsetByCodePoints:0 codePointOffset:i];
    jint cp = [inArg codePointAt:offset];
    JavaLangCharacter_UnicodeBlock *cub = JavaLangCharacter_UnicodeBlock_ofWithInt_(cp);
    if (cub == JreLoadStatic(JavaLangCharacter_UnicodeBlock, PRIVATE_USE_AREA) || cub == JreLoadStatic(JavaLangCharacter_UnicodeBlock, SUPPLEMENTARY_PRIVATE_USE_AREA_A) || cub == JreLoadStatic(JavaLangCharacter_UnicodeBlock, SUPPLEMENTARY_PRIVATE_USE_AREA_B)) {
      EduStanfordNlpIoEncodingPrintWriter_err_printlnWithNSString_(JreStrcat("$$$$", @"ChineseUtils.normalize warning: private use area codepoint U+", JavaLangInteger_toHexStringWithInt_(cp), @" in ", inArg));
    }
    jboolean delete_ = false;
    switch (ascii) {
      case EduStanfordNlpTreesInternationalPennchineseChineseUtils_LEAVE:
      break;
      case EduStanfordNlpTreesInternationalPennchineseChineseUtils_ASCII:
      if (cp >= 0xff01 && cp <= 0xff5e) {
        cp -= ((jint) 0xFF00 - (jint) 0x0020);
      }
      break;
      case EduStanfordNlpTreesInternationalPennchineseChineseUtils_FULLWIDTH:
      if (cp >= '!' && cp <= '~') {
        cp += ((jint) 0xFF00 - (jint) 0x0020);
      }
      break;
      default:
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"ChineseUtils: Unsupported parameter option: ascii=", ascii));
    }
    {
      jint cpp;
      jint cpn;
      switch (spaceChar) {
        case EduStanfordNlpTreesInternationalPennchineseChineseUtils_LEAVE:
        break;
        case EduStanfordNlpTreesInternationalPennchineseChineseUtils_ASCII:
        if (JavaLangCharacter_isSpaceCharWithInt_(cp)) {
          cp = ' ';
        }
        break;
        case EduStanfordNlpTreesInternationalPennchineseChineseUtils_FULLWIDTH:
        if (JavaLangCharacter_isSpaceCharWithInt_(cp)) {
          cp = 0x3000;
        }
        break;
        case EduStanfordNlpTreesInternationalPennchineseChineseUtils_DELETE:
        if (JavaLangCharacter_isSpaceCharWithInt_(cp)) {
          delete_ = true;
        }
        break;
        case EduStanfordNlpTreesInternationalPennchineseChineseUtils_DELETE_EXCEPT_BETWEEN_ASCII:
        cpp = 0;
        if (i > 0) {
          cpp = [inArg codePointAt:i - 1];
        }
        cpn = 0;
        if (i < (numCP - 1)) {
          cpn = [inArg codePointAt:i + 1];
        }
        if (JavaLangCharacter_isSpaceCharWithInt_(cp) && !(EduStanfordNlpTreesInternationalPennchineseChineseUtils_isAsciiLowHighWithInt_(cpp) && EduStanfordNlpTreesInternationalPennchineseChineseUtils_isAsciiLowHighWithInt_(cpn))) {
          delete_ = true;
        }
      }
    }
    switch (midDot) {
      case EduStanfordNlpTreesInternationalPennchineseChineseUtils_LEAVE:
      break;
      case EduStanfordNlpTreesInternationalPennchineseChineseUtils_NORMALIZE:
      if (cp == 0x00b7 || cp == 0x0387 || cp == 0x2022 || cp == 0x2024 || cp == 0x2027 || cp == 0x2219 || cp == 0x22c5 || cp == 0x30fb) {
        cp = 0x00b7;
      }
      break;
      case EduStanfordNlpTreesInternationalPennchineseChineseUtils_FULLWIDTH:
      if (cp == 0x00b7 || cp == 0x0387 || cp == 0x2022 || cp == 0x2024 || cp == 0x2027 || cp == 0x2219 || cp == 0x22c5 || cp == 0x30fb) {
        cp = 0x30fb;
      }
      break;
      case EduStanfordNlpTreesInternationalPennchineseChineseUtils_DELETE:
      if (cp == 0x00b7 || cp == 0x0387 || cp == 0x2022 || cp == 0x2024 || cp == 0x2027 || cp == 0x2219 || cp == 0x22c5 || cp == 0x30fb) {
        delete_ = true;
      }
      break;
      default:
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"ChineseUtils: Unsupported parameter option: midDot=", midDot));
    }
    if (!delete_) {
      (void) [out appendCodePointWithInt:cp];
    }
  }
  return [out description];
}

jboolean EduStanfordNlpTreesInternationalPennchineseChineseUtils_isAsciiLowHighWithInt_(jint cp) {
  EduStanfordNlpTreesInternationalPennchineseChineseUtils_initialize();
  return (cp >= 0xff01 && cp <= 0xff5e) || (cp >= '!' && cp <= '~');
}

void EduStanfordNlpTreesInternationalPennchineseChineseUtils_mainWithNSStringArray_(IOSObjectArray *args) {
  EduStanfordNlpTreesInternationalPennchineseChineseUtils_initialize();
  if (((IOSObjectArray *) nil_chk(args))->size_ < 3) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"usage: ChineseUtils ascii space midDot word*"];
    [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:@"  First 3 args are int flags; a filter or maps args as words; assumes UTF-8"];
    return;
  }
  jint i = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, 0));
  jint j = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, 1));
  jint midDot = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, 2));
  if (args->size_ > 3) {
    for (jint k = 3; k < args->size_; k++) {
      EduStanfordNlpIoEncodingPrintWriter_out_printlnWithNSString_(EduStanfordNlpTreesInternationalPennchineseChineseUtils_normalizeWithNSString_withInt_withInt_withInt_(IOSObjectArray_Get(args, k), i, j, midDot));
    }
  }
  else {
    JavaIoBufferedReader *r = new_JavaIoBufferedReader_initWithJavaIoReader_(new_JavaIoInputStreamReader_initWithJavaIoInputStream_withNSString_(JreLoadStatic(JavaLangSystem, in), @"UTF-8"));
    NSString *line;
    while ((line = [r readLine]) != nil) {
      EduStanfordNlpIoEncodingPrintWriter_out_printlnWithNSString_(EduStanfordNlpTreesInternationalPennchineseChineseUtils_normalizeWithNSString_withInt_withInt_withInt_(line, i, j, midDot));
    }
  }
}

NSString *EduStanfordNlpTreesInternationalPennchineseChineseUtils_shapeOfWithJavaLangCharSequence_withBoolean_withBoolean_(id<JavaLangCharSequence> input, jboolean augmentedDateChars, jboolean useMidDotShape) {
  EduStanfordNlpTreesInternationalPennchineseChineseUtils_initialize();
  NSString *shape;
  if (augmentedDateChars && [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(EduStanfordNlpTreesInternationalPennchineseChineseUtils_dateCharsPlus)) matcherWithJavaLangCharSequence:input])) matches]) {
    shape = @"D";
  }
  else if ([((id<JavaLangCharSequence>) nil_chk(input)) charAtWithInt:0] == 0x7b2c) {
    return @"o";
  }
  else if ([((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(EduStanfordNlpTreesInternationalPennchineseChineseUtils_dateChars)) matcherWithJavaLangCharSequence:input])) matches]) {
    shape = @"D";
  }
  else if ([((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(EduStanfordNlpTreesInternationalPennchineseChineseUtils_numberChars)) matcherWithJavaLangCharSequence:input])) matches]) {
    shape = @"N";
  }
  else if ([((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(EduStanfordNlpTreesInternationalPennchineseChineseUtils_letterChars)) matcherWithJavaLangCharSequence:input])) matches]) {
    shape = @"L";
  }
  else if ([((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(EduStanfordNlpTreesInternationalPennchineseChineseUtils_periodChars)) matcherWithJavaLangCharSequence:input])) matches]) {
    shape = @"P";
  }
  else if ([((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(EduStanfordNlpTreesInternationalPennchineseChineseUtils_separatingPuncChars)) matcherWithJavaLangCharSequence:input])) matches]) {
    shape = @"S";
  }
  else if ([((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(EduStanfordNlpTreesInternationalPennchineseChineseUtils_ambiguousPuncChars)) matcherWithJavaLangCharSequence:input])) matches]) {
    shape = @"A";
  }
  else if (useMidDotShape && [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(EduStanfordNlpTreesInternationalPennchineseChineseUtils_midDotPattern)) matcherWithJavaLangCharSequence:input])) matches]) {
    shape = @"M";
  }
  else {
    shape = @"C";
  }
  return shape;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTreesInternationalPennchineseChineseUtils)
