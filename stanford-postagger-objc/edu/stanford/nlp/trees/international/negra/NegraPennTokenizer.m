//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/trees/international/negra/NegraPennTokenizer.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/process/LexerTokenizer.h"
#include "edu/stanford/nlp/process/Tokenizer.h"
#include "edu/stanford/nlp/trees/international/negra/NegraPennLexer.h"
#include "edu/stanford/nlp/trees/international/negra/NegraPennTokenizer.h"
#include "java/io/FileReader.h"
#include "java/io/PrintStream.h"
#include "java/io/Reader.h"
#include "java/lang/System.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@implementation EduStanfordNlpTreesInternationalNegraNegraPennTokenizer

- (instancetype)initWithJavaIoReader:(JavaIoReader *)r {
  EduStanfordNlpTreesInternationalNegraNegraPennTokenizer_initWithJavaIoReader_(self, r);
  return self;
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  EduStanfordNlpTreesInternationalNegraNegraPennTokenizer_mainWithNSStringArray_(args);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 1, 2, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaIoReader:);
  methods[1].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LJavaIoReader;", "main", "[LNSString;", "LJavaIoIOException;" };
  static const J2ObjcClassInfo _EduStanfordNlpTreesInternationalNegraNegraPennTokenizer = { "NegraPennTokenizer", "edu.stanford.nlp.trees.international.negra", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_EduStanfordNlpTreesInternationalNegraNegraPennTokenizer;
}

@end

void EduStanfordNlpTreesInternationalNegraNegraPennTokenizer_initWithJavaIoReader_(EduStanfordNlpTreesInternationalNegraNegraPennTokenizer *self, JavaIoReader *r) {
  EduStanfordNlpProcessLexerTokenizer_initWithEduStanfordNlpIoLexer_(self, new_EduStanfordNlpTreesInternationalNegraNegraPennLexer_initWithJavaIoReader_(r));
}

EduStanfordNlpTreesInternationalNegraNegraPennTokenizer *new_EduStanfordNlpTreesInternationalNegraNegraPennTokenizer_initWithJavaIoReader_(JavaIoReader *r) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesInternationalNegraNegraPennTokenizer, initWithJavaIoReader_, r)
}

EduStanfordNlpTreesInternationalNegraNegraPennTokenizer *create_EduStanfordNlpTreesInternationalNegraNegraPennTokenizer_initWithJavaIoReader_(JavaIoReader *r) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesInternationalNegraNegraPennTokenizer, initWithJavaIoReader_, r)
}

void EduStanfordNlpTreesInternationalNegraNegraPennTokenizer_mainWithNSStringArray_(IOSObjectArray *args) {
  EduStanfordNlpTreesInternationalNegraNegraPennTokenizer_initialize();
  JavaIoReader *in = new_JavaIoFileReader_initWithNSString_(IOSObjectArray_Get(nil_chk(args), 0));
  id<EduStanfordNlpProcessTokenizer> st = new_EduStanfordNlpTreesInternationalNegraNegraPennTokenizer_initWithJavaIoReader_(in);
  while ([st hasNext]) {
    NSString *s = (NSString *) cast_chk([st next], [NSString class]);
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:s];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTreesInternationalNegraNegraPennTokenizer)
