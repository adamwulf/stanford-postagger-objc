//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/trees/EnglishGrammaticalStructure.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/ling/IndexedWord.h"
#include "edu/stanford/nlp/process/Morphology.h"
#include "edu/stanford/nlp/semgraph/SemanticGraph.h"
#include "edu/stanford/nlp/semgraph/SemanticGraphEdge.h"
#include "edu/stanford/nlp/semgraph/semgrex/SemgrexMatcher.h"
#include "edu/stanford/nlp/semgraph/semgrex/SemgrexPattern.h"
#include "edu/stanford/nlp/trees/CoordinationTransformer.h"
#include "edu/stanford/nlp/trees/EnglishGrammaticalRelations.h"
#include "edu/stanford/nlp/trees/EnglishGrammaticalStructure.h"
#include "edu/stanford/nlp/trees/EnglishPatterns.h"
#include "edu/stanford/nlp/trees/GrammaticalRelation.h"
#include "edu/stanford/nlp/trees/GrammaticalStructure.h"
#include "edu/stanford/nlp/trees/HeadFinder.h"
#include "edu/stanford/nlp/trees/PennTreebankLanguagePack.h"
#include "edu/stanford/nlp/trees/SemanticHeadFinder.h"
#include "edu/stanford/nlp/trees/Tree.h"
#include "edu/stanford/nlp/trees/TreeGraphNode.h"
#include "edu/stanford/nlp/trees/TypedDependency.h"
#include "edu/stanford/nlp/util/Filters.h"
#include "edu/stanford/nlp/util/Generics.h"
#include "edu/stanford/nlp/util/Pair.h"
#include "edu/stanford/nlp/util/Triple.h"
#include "java/io/PrintStream.h"
#include "java/io/Serializable.h"
#include "java/lang/Boolean.h"
#include "java/lang/Double.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/SortedSet.h"
#include "java/util/TreeSet.h"
#include "java/util/concurrent/locks/Lock.h"
#include "java/util/function/Predicate.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"

@interface EduStanfordNlpTreesEnglishGrammaticalStructure ()

+ (void)printListSortedWithNSString:(NSString *)title
             withJavaUtilCollection:(id<JavaUtilCollection>)list;

+ (void)addStrandedPobjWithJavaUtilList:(id<JavaUtilList>)list;

+ (void)correctWHAttachmentWithEduStanfordNlpSemgraphSemanticGraph:(EduStanfordNlpSemgraphSemanticGraph *)sg;

+ (void)convertRelWithJavaUtilList:(id<JavaUtilList>)list;

+ (void)filterKillWithJavaUtilCollection:(id<JavaUtilCollection>)deps;

+ (EduStanfordNlpTreesGrammaticalRelation *)conjValueWithNSString:(NSString *)conj;

+ (void)treatCCWithJavaUtilCollection:(id<JavaUtilCollection>)list;

+ (jboolean)isDefinitelyActiveWithNSString:(NSString *)tag;

+ (void)collapseConjWithJavaUtilCollection:(id<JavaUtilCollection>)list;

+ (void)collapseReferentWithJavaUtilCollection:(id<JavaUtilCollection>)list;

+ (void)addRefWithJavaUtilCollection:(id<JavaUtilCollection>)list;

+ (void)addExtraNSubjWithJavaUtilCollection:(id<JavaUtilCollection>)list;

+ (void)correctSubjPassWithJavaUtilCollection:(id<JavaUtilCollection>)list;

+ (jboolean)inConjDepsWithEduStanfordNlpTreesTypedDependency:(EduStanfordNlpTreesTypedDependency *)td
                                            withJavaUtilList:(id<JavaUtilList>)conjs;

+ (void)collapsePrepAndPossWithJavaUtilCollection:(id<JavaUtilCollection>)list;

+ (EduStanfordNlpTreesGrammaticalRelation *)determinePrepRelationWithJavaUtilMap:(id<JavaUtilMap>)map
                                                                withJavaUtilList:(id<JavaUtilList>)vmod
                                          withEduStanfordNlpTreesTypedDependency:(EduStanfordNlpTreesTypedDependency *)pc
                                          withEduStanfordNlpTreesTypedDependency:(EduStanfordNlpTreesTypedDependency *)topPrep
                                                                     withBoolean:(jboolean)pobj;

+ (jboolean)isConjWithNoPrepWithEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)node
                                       withJavaUtilCollection:(id<JavaUtilCollection>)list;

+ (void)collapse2WPWithJavaUtilCollection:(id<JavaUtilCollection>)list;

+ (void)collapseMultiWordPrepWithJavaUtilCollection:(id<JavaUtilCollection>)list
                             withJavaUtilCollection:(id<JavaUtilCollection>)newTypedDeps
                                       withNSString:(NSString *)str_mwp0
                                       withNSString:(NSString *)str_mwp1
                                       withNSString:(NSString *)w_mwp0
                                       withNSString:(NSString *)w_mwp1;

+ (void)collapse2WPbisWithJavaUtilCollection:(id<JavaUtilCollection>)list;

+ (void)collapse3WPWithJavaUtilCollection:(id<JavaUtilCollection>)list;

+ (void)collapseFlatMWPWithJavaUtilCollection:(id<JavaUtilCollection>)list;

+ (void)eraseMultiConjWithJavaUtilCollection:(id<JavaUtilCollection>)list;

+ (void)removeDepWithJavaUtilCollection:(id<JavaUtilCollection>)list;

+ (void)removeExactDuplicatesWithJavaUtilCollection:(id<JavaUtilCollection>)list;

@end

inline jlong EduStanfordNlpTreesEnglishGrammaticalStructure_get_serialVersionUID();
#define EduStanfordNlpTreesEnglishGrammaticalStructure_serialVersionUID -1866362375001969402LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpTreesEnglishGrammaticalStructure, serialVersionUID, jlong)

inline jboolean EduStanfordNlpTreesEnglishGrammaticalStructure_get_DEBUG();
static jboolean EduStanfordNlpTreesEnglishGrammaticalStructure_DEBUG;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(EduStanfordNlpTreesEnglishGrammaticalStructure, DEBUG, jboolean)

inline id<JavaUtilFunctionPredicate> EduStanfordNlpTreesEnglishGrammaticalStructure_get_extraTreeDepFilter_();
static id<JavaUtilFunctionPredicate> EduStanfordNlpTreesEnglishGrammaticalStructure_extraTreeDepFilter_;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpTreesEnglishGrammaticalStructure, extraTreeDepFilter_, id<JavaUtilFunctionPredicate>)

inline EduStanfordNlpSemgraphSemgrexSemgrexPattern *EduStanfordNlpTreesEnglishGrammaticalStructure_get_XCOMP_PATTERN();
inline EduStanfordNlpSemgraphSemgrexSemgrexPattern *EduStanfordNlpTreesEnglishGrammaticalStructure_set_XCOMP_PATTERN(EduStanfordNlpSemgraphSemgrexSemgrexPattern *value);
static EduStanfordNlpSemgraphSemgrexSemgrexPattern *EduStanfordNlpTreesEnglishGrammaticalStructure_XCOMP_PATTERN;
J2OBJC_STATIC_FIELD_OBJ(EduStanfordNlpTreesEnglishGrammaticalStructure, XCOMP_PATTERN, EduStanfordNlpSemgraphSemgrexSemgrexPattern *)

inline EduStanfordNlpProcessMorphology *EduStanfordNlpTreesEnglishGrammaticalStructure_get_morphology();
inline EduStanfordNlpProcessMorphology *EduStanfordNlpTreesEnglishGrammaticalStructure_set_morphology(EduStanfordNlpProcessMorphology *value);
static EduStanfordNlpProcessMorphology *EduStanfordNlpTreesEnglishGrammaticalStructure_morphology;
J2OBJC_STATIC_FIELD_OBJ(EduStanfordNlpTreesEnglishGrammaticalStructure, morphology, EduStanfordNlpProcessMorphology *)

inline IOSObjectArray *EduStanfordNlpTreesEnglishGrammaticalStructure_get_MULTIWORD_PREPS();
static IOSObjectArray *EduStanfordNlpTreesEnglishGrammaticalStructure_MULTIWORD_PREPS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpTreesEnglishGrammaticalStructure, MULTIWORD_PREPS, IOSObjectArray *)

inline IOSObjectArray *EduStanfordNlpTreesEnglishGrammaticalStructure_get_THREEWORD_PREPS();
static IOSObjectArray *EduStanfordNlpTreesEnglishGrammaticalStructure_THREEWORD_PREPS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpTreesEnglishGrammaticalStructure, THREEWORD_PREPS, IOSObjectArray *)

__attribute__((unused)) static void EduStanfordNlpTreesEnglishGrammaticalStructure_printListSortedWithNSString_withJavaUtilCollection_(NSString *title, id<JavaUtilCollection> list);

__attribute__((unused)) static void EduStanfordNlpTreesEnglishGrammaticalStructure_addStrandedPobjWithJavaUtilList_(id<JavaUtilList> list);

__attribute__((unused)) static void EduStanfordNlpTreesEnglishGrammaticalStructure_correctWHAttachmentWithEduStanfordNlpSemgraphSemanticGraph_(EduStanfordNlpSemgraphSemanticGraph *sg);

__attribute__((unused)) static void EduStanfordNlpTreesEnglishGrammaticalStructure_convertRelWithJavaUtilList_(id<JavaUtilList> list);

__attribute__((unused)) static void EduStanfordNlpTreesEnglishGrammaticalStructure_filterKillWithJavaUtilCollection_(id<JavaUtilCollection> deps);

__attribute__((unused)) static EduStanfordNlpTreesGrammaticalRelation *EduStanfordNlpTreesEnglishGrammaticalStructure_conjValueWithNSString_(NSString *conj);

__attribute__((unused)) static void EduStanfordNlpTreesEnglishGrammaticalStructure_treatCCWithJavaUtilCollection_(id<JavaUtilCollection> list);

__attribute__((unused)) static jboolean EduStanfordNlpTreesEnglishGrammaticalStructure_isDefinitelyActiveWithNSString_(NSString *tag);

__attribute__((unused)) static void EduStanfordNlpTreesEnglishGrammaticalStructure_collapseConjWithJavaUtilCollection_(id<JavaUtilCollection> list);

__attribute__((unused)) static void EduStanfordNlpTreesEnglishGrammaticalStructure_collapseReferentWithJavaUtilCollection_(id<JavaUtilCollection> list);

__attribute__((unused)) static void EduStanfordNlpTreesEnglishGrammaticalStructure_addRefWithJavaUtilCollection_(id<JavaUtilCollection> list);

__attribute__((unused)) static void EduStanfordNlpTreesEnglishGrammaticalStructure_addExtraNSubjWithJavaUtilCollection_(id<JavaUtilCollection> list);

__attribute__((unused)) static void EduStanfordNlpTreesEnglishGrammaticalStructure_correctSubjPassWithJavaUtilCollection_(id<JavaUtilCollection> list);

__attribute__((unused)) static jboolean EduStanfordNlpTreesEnglishGrammaticalStructure_inConjDepsWithEduStanfordNlpTreesTypedDependency_withJavaUtilList_(EduStanfordNlpTreesTypedDependency *td, id<JavaUtilList> conjs);

__attribute__((unused)) static void EduStanfordNlpTreesEnglishGrammaticalStructure_collapsePrepAndPossWithJavaUtilCollection_(id<JavaUtilCollection> list);

__attribute__((unused)) static EduStanfordNlpTreesGrammaticalRelation *EduStanfordNlpTreesEnglishGrammaticalStructure_determinePrepRelationWithJavaUtilMap_withJavaUtilList_withEduStanfordNlpTreesTypedDependency_withEduStanfordNlpTreesTypedDependency_withBoolean_(id<JavaUtilMap> map, id<JavaUtilList> vmod, EduStanfordNlpTreesTypedDependency *pc, EduStanfordNlpTreesTypedDependency *topPrep, jboolean pobj);

__attribute__((unused)) static jboolean EduStanfordNlpTreesEnglishGrammaticalStructure_isConjWithNoPrepWithEduStanfordNlpLingIndexedWord_withJavaUtilCollection_(EduStanfordNlpLingIndexedWord *node, id<JavaUtilCollection> list);

__attribute__((unused)) static void EduStanfordNlpTreesEnglishGrammaticalStructure_collapse2WPWithJavaUtilCollection_(id<JavaUtilCollection> list);

__attribute__((unused)) static void EduStanfordNlpTreesEnglishGrammaticalStructure_collapseMultiWordPrepWithJavaUtilCollection_withJavaUtilCollection_withNSString_withNSString_withNSString_withNSString_(id<JavaUtilCollection> list, id<JavaUtilCollection> newTypedDeps, NSString *str_mwp0, NSString *str_mwp1, NSString *w_mwp0, NSString *w_mwp1);

__attribute__((unused)) static void EduStanfordNlpTreesEnglishGrammaticalStructure_collapse2WPbisWithJavaUtilCollection_(id<JavaUtilCollection> list);

__attribute__((unused)) static void EduStanfordNlpTreesEnglishGrammaticalStructure_collapse3WPWithJavaUtilCollection_(id<JavaUtilCollection> list);

__attribute__((unused)) static void EduStanfordNlpTreesEnglishGrammaticalStructure_collapseFlatMWPWithJavaUtilCollection_(id<JavaUtilCollection> list);

__attribute__((unused)) static void EduStanfordNlpTreesEnglishGrammaticalStructure_eraseMultiConjWithJavaUtilCollection_(id<JavaUtilCollection> list);

__attribute__((unused)) static void EduStanfordNlpTreesEnglishGrammaticalStructure_removeDepWithJavaUtilCollection_(id<JavaUtilCollection> list);

__attribute__((unused)) static void EduStanfordNlpTreesEnglishGrammaticalStructure_removeExactDuplicatesWithJavaUtilCollection_(id<JavaUtilCollection> list);

@interface EduStanfordNlpTreesEnglishGrammaticalStructure_ExtraTreeDepFilter : NSObject < JavaUtilFunctionPredicate, JavaIoSerializable >

- (jboolean)testWithId:(EduStanfordNlpTreesTypedDependency *)d;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpTreesEnglishGrammaticalStructure_ExtraTreeDepFilter)

inline jlong EduStanfordNlpTreesEnglishGrammaticalStructure_ExtraTreeDepFilter_get_serialVersionUID();
#define EduStanfordNlpTreesEnglishGrammaticalStructure_ExtraTreeDepFilter_serialVersionUID 1LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpTreesEnglishGrammaticalStructure_ExtraTreeDepFilter, serialVersionUID, jlong)

__attribute__((unused)) static void EduStanfordNlpTreesEnglishGrammaticalStructure_ExtraTreeDepFilter_init(EduStanfordNlpTreesEnglishGrammaticalStructure_ExtraTreeDepFilter *self);

__attribute__((unused)) static EduStanfordNlpTreesEnglishGrammaticalStructure_ExtraTreeDepFilter *new_EduStanfordNlpTreesEnglishGrammaticalStructure_ExtraTreeDepFilter_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpTreesEnglishGrammaticalStructure_ExtraTreeDepFilter *create_EduStanfordNlpTreesEnglishGrammaticalStructure_ExtraTreeDepFilter_init();

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpTreesEnglishGrammaticalStructure_ExtraTreeDepFilter)

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpTreesEnglishGrammaticalStructure)

@implementation EduStanfordNlpTreesEnglishGrammaticalStructure

- (instancetype)initWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t {
  EduStanfordNlpTreesEnglishGrammaticalStructure_initWithEduStanfordNlpTreesTree_(self, t);
  return self;
}

- (instancetype)initWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
                  withJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)puncFilter {
  EduStanfordNlpTreesEnglishGrammaticalStructure_initWithEduStanfordNlpTreesTree_withJavaUtilFunctionPredicate_(self, t, puncFilter);
  return self;
}

- (instancetype)initWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
                  withJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)puncFilter
              withEduStanfordNlpTreesHeadFinder:(id<EduStanfordNlpTreesHeadFinder>)hf {
  EduStanfordNlpTreesEnglishGrammaticalStructure_initWithEduStanfordNlpTreesTree_withJavaUtilFunctionPredicate_withEduStanfordNlpTreesHeadFinder_(self, t, puncFilter, hf);
  return self;
}

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)projectiveDependencies
withEduStanfordNlpTreesTreeGraphNode:(EduStanfordNlpTreesTreeGraphNode *)root {
  EduStanfordNlpTreesEnglishGrammaticalStructure_initWithJavaUtilList_withEduStanfordNlpTreesTreeGraphNode_(self, projectiveDependencies, root);
  return self;
}

- (id<JavaUtilFunctionPredicate>)extraTreeDepFilter {
  return EduStanfordNlpTreesEnglishGrammaticalStructure_extraTreeDepFilter_;
}

- (void)correctDependenciesWithJavaUtilList:(id<JavaUtilList>)list {
  if (EduStanfordNlpTreesEnglishGrammaticalStructure_DEBUG) {
    EduStanfordNlpTreesEnglishGrammaticalStructure_printListSortedWithNSString_withJavaUtilCollection_(@"At correctDependencies:", list);
  }
  EduStanfordNlpTreesEnglishGrammaticalStructure_correctSubjPassWithJavaUtilCollection_(list);
  if (EduStanfordNlpTreesEnglishGrammaticalStructure_DEBUG) {
    EduStanfordNlpTreesEnglishGrammaticalStructure_printListSortedWithNSString_withJavaUtilCollection_(@"After correctSubjPass:", list);
  }
  EduStanfordNlpTreesEnglishGrammaticalStructure_removeExactDuplicatesWithJavaUtilCollection_(list);
  if (EduStanfordNlpTreesEnglishGrammaticalStructure_DEBUG) {
    EduStanfordNlpTreesEnglishGrammaticalStructure_printListSortedWithNSString_withJavaUtilCollection_(@"After removeExactDuplicates:", list);
  }
}

+ (void)printListSortedWithNSString:(NSString *)title
             withJavaUtilCollection:(id<JavaUtilCollection>)list {
  EduStanfordNlpTreesEnglishGrammaticalStructure_printListSortedWithNSString_withJavaUtilCollection_(title, list);
}

- (void)postProcessDependenciesWithJavaUtilList:(id<JavaUtilList>)list {
  if (EduStanfordNlpTreesEnglishGrammaticalStructure_DEBUG) {
    EduStanfordNlpTreesEnglishGrammaticalStructure_printListSortedWithNSString_withJavaUtilCollection_(@"At postProcessDependencies:", list);
  }
  EduStanfordNlpSemgraphSemanticGraph *sg = new_EduStanfordNlpSemgraphSemanticGraph_initWithJavaUtilCollection_(list);
  EduStanfordNlpTreesEnglishGrammaticalStructure_correctWHAttachmentWithEduStanfordNlpSemgraphSemanticGraph_(sg);
  [((id<JavaUtilList>) nil_chk(list)) clear];
  [list addAllWithJavaUtilCollection:[sg typedDependencies]];
  if (EduStanfordNlpTreesEnglishGrammaticalStructure_DEBUG) {
    EduStanfordNlpTreesEnglishGrammaticalStructure_printListSortedWithNSString_withJavaUtilCollection_(@"After correcting WH movement", list);
  }
  EduStanfordNlpTreesEnglishGrammaticalStructure_convertRelWithJavaUtilList_(list);
  if (EduStanfordNlpTreesEnglishGrammaticalStructure_DEBUG) {
    EduStanfordNlpTreesEnglishGrammaticalStructure_printListSortedWithNSString_withJavaUtilCollection_(@"After converting rel:", list);
  }
}

- (void)getExtrasWithJavaUtilList:(id<JavaUtilList>)list {
  EduStanfordNlpTreesEnglishGrammaticalStructure_addRefWithJavaUtilCollection_(list);
  if (EduStanfordNlpTreesEnglishGrammaticalStructure_DEBUG) {
    EduStanfordNlpTreesEnglishGrammaticalStructure_printListSortedWithNSString_withJavaUtilCollection_(@"After adding ref:", list);
  }
  EduStanfordNlpTreesEnglishGrammaticalStructure_addExtraNSubjWithJavaUtilCollection_(list);
  if (EduStanfordNlpTreesEnglishGrammaticalStructure_DEBUG) {
    EduStanfordNlpTreesEnglishGrammaticalStructure_printListSortedWithNSString_withJavaUtilCollection_(@"After adding extra nsubj:", list);
  }
  EduStanfordNlpTreesEnglishGrammaticalStructure_addStrandedPobjWithJavaUtilList_(list);
  if (EduStanfordNlpTreesEnglishGrammaticalStructure_DEBUG) {
    EduStanfordNlpTreesEnglishGrammaticalStructure_printListSortedWithNSString_withJavaUtilCollection_(@"After adding stranded pobj:", list);
  }
}

+ (void)addStrandedPobjWithJavaUtilList:(id<JavaUtilList>)list {
  EduStanfordNlpTreesEnglishGrammaticalStructure_addStrandedPobjWithJavaUtilList_(list);
}

+ (void)correctWHAttachmentWithEduStanfordNlpSemgraphSemanticGraph:(EduStanfordNlpSemgraphSemanticGraph *)sg {
  EduStanfordNlpTreesEnglishGrammaticalStructure_correctWHAttachmentWithEduStanfordNlpSemgraphSemanticGraph_(sg);
}

+ (void)convertRelWithJavaUtilList:(id<JavaUtilList>)list {
  EduStanfordNlpTreesEnglishGrammaticalStructure_convertRelWithJavaUtilList_(list);
}

+ (void)filterKillWithJavaUtilCollection:(id<JavaUtilCollection>)deps {
  EduStanfordNlpTreesEnglishGrammaticalStructure_filterKillWithJavaUtilCollection_(deps);
}

- (void)collapseDependenciesWithJavaUtilList:(id<JavaUtilList>)list
                                 withBoolean:(jboolean)CCprocess
withEduStanfordNlpTreesGrammaticalStructure_Extras:(EduStanfordNlpTreesGrammaticalStructure_Extras *)includeExtras {
  if (EduStanfordNlpTreesEnglishGrammaticalStructure_DEBUG) {
    EduStanfordNlpTreesEnglishGrammaticalStructure_printListSortedWithNSString_withJavaUtilCollection_(JreStrcat("$Z$@", @"collapseDependencies: CCproc: ", CCprocess, @" includeExtras: ", includeExtras), list);
  }
  [self correctDependenciesWithJavaUtilList:list];
  if (EduStanfordNlpTreesEnglishGrammaticalStructure_DEBUG) {
    EduStanfordNlpTreesEnglishGrammaticalStructure_printListSortedWithNSString_withJavaUtilCollection_(@"After correctDependencies:", list);
  }
  EduStanfordNlpTreesEnglishGrammaticalStructure_eraseMultiConjWithJavaUtilCollection_(list);
  if (EduStanfordNlpTreesEnglishGrammaticalStructure_DEBUG) {
    EduStanfordNlpTreesEnglishGrammaticalStructure_printListSortedWithNSString_withJavaUtilCollection_(@"After collapse multi conj:", list);
  }
  EduStanfordNlpTreesEnglishGrammaticalStructure_collapse2WPWithJavaUtilCollection_(list);
  if (EduStanfordNlpTreesEnglishGrammaticalStructure_DEBUG) {
    EduStanfordNlpTreesEnglishGrammaticalStructure_printListSortedWithNSString_withJavaUtilCollection_(@"After collapse2WP:", list);
  }
  EduStanfordNlpTreesEnglishGrammaticalStructure_collapseFlatMWPWithJavaUtilCollection_(list);
  if (EduStanfordNlpTreesEnglishGrammaticalStructure_DEBUG) {
    EduStanfordNlpTreesEnglishGrammaticalStructure_printListSortedWithNSString_withJavaUtilCollection_(@"After collapseFlatMWP:", list);
  }
  EduStanfordNlpTreesEnglishGrammaticalStructure_collapse2WPbisWithJavaUtilCollection_(list);
  if (EduStanfordNlpTreesEnglishGrammaticalStructure_DEBUG) {
    EduStanfordNlpTreesEnglishGrammaticalStructure_printListSortedWithNSString_withJavaUtilCollection_(@"After collapse2WPbis:", list);
  }
  EduStanfordNlpTreesEnglishGrammaticalStructure_collapse3WPWithJavaUtilCollection_(list);
  if (EduStanfordNlpTreesEnglishGrammaticalStructure_DEBUG) {
    EduStanfordNlpTreesEnglishGrammaticalStructure_printListSortedWithNSString_withJavaUtilCollection_(@"After collapse3WP:", list);
  }
  EduStanfordNlpTreesEnglishGrammaticalStructure_collapsePrepAndPossWithJavaUtilCollection_(list);
  if (EduStanfordNlpTreesEnglishGrammaticalStructure_DEBUG) {
    EduStanfordNlpTreesEnglishGrammaticalStructure_printListSortedWithNSString_withJavaUtilCollection_(@"After PrepAndPoss:", list);
  }
  EduStanfordNlpTreesEnglishGrammaticalStructure_collapseConjWithJavaUtilCollection_(list);
  if (EduStanfordNlpTreesEnglishGrammaticalStructure_DEBUG) {
    EduStanfordNlpTreesEnglishGrammaticalStructure_printListSortedWithNSString_withJavaUtilCollection_(@"After conj:", list);
  }
  if (((EduStanfordNlpTreesGrammaticalStructure_Extras *) nil_chk(includeExtras))->doRef_) {
    EduStanfordNlpTreesEnglishGrammaticalStructure_addRefWithJavaUtilCollection_(list);
    if (EduStanfordNlpTreesEnglishGrammaticalStructure_DEBUG) {
      EduStanfordNlpTreesEnglishGrammaticalStructure_printListSortedWithNSString_withJavaUtilCollection_(@"After adding ref:", list);
    }
    if (includeExtras->collapseRef_) {
      EduStanfordNlpTreesEnglishGrammaticalStructure_collapseReferentWithJavaUtilCollection_(list);
      if (EduStanfordNlpTreesEnglishGrammaticalStructure_DEBUG) {
        EduStanfordNlpTreesEnglishGrammaticalStructure_printListSortedWithNSString_withJavaUtilCollection_(@"After collapse referent:", list);
      }
    }
  }
  if (CCprocess) {
    EduStanfordNlpTreesEnglishGrammaticalStructure_treatCCWithJavaUtilCollection_(list);
    if (EduStanfordNlpTreesEnglishGrammaticalStructure_DEBUG) {
      EduStanfordNlpTreesEnglishGrammaticalStructure_printListSortedWithNSString_withJavaUtilCollection_(@"After treatCC:", list);
    }
  }
  if (includeExtras->doSubj_) {
    EduStanfordNlpTreesEnglishGrammaticalStructure_addExtraNSubjWithJavaUtilCollection_(list);
    if (EduStanfordNlpTreesEnglishGrammaticalStructure_DEBUG) {
      EduStanfordNlpTreesEnglishGrammaticalStructure_printListSortedWithNSString_withJavaUtilCollection_(@"After adding extra nsubj:", list);
    }
    EduStanfordNlpTreesEnglishGrammaticalStructure_correctSubjPassWithJavaUtilCollection_(list);
    if (EduStanfordNlpTreesEnglishGrammaticalStructure_DEBUG) {
      EduStanfordNlpTreesEnglishGrammaticalStructure_printListSortedWithNSString_withJavaUtilCollection_(@"After correctSubjPass:", list);
    }
  }
  EduStanfordNlpTreesEnglishGrammaticalStructure_removeDepWithJavaUtilCollection_(list);
  if (EduStanfordNlpTreesEnglishGrammaticalStructure_DEBUG) {
    EduStanfordNlpTreesEnglishGrammaticalStructure_printListSortedWithNSString_withJavaUtilCollection_(@"After remove dep:", list);
  }
  JavaUtilCollections_sortWithJavaUtilList_(list);
  if (EduStanfordNlpTreesEnglishGrammaticalStructure_DEBUG) {
    EduStanfordNlpTreesEnglishGrammaticalStructure_printListSortedWithNSString_withJavaUtilCollection_(@"After all collapse:", list);
  }
}

- (void)collapseDependenciesTreeWithJavaUtilList:(id<JavaUtilList>)list {
  [self collapseDependenciesWithJavaUtilList:list withBoolean:false withEduStanfordNlpTreesGrammaticalStructure_Extras:JreLoadEnum(EduStanfordNlpTreesGrammaticalStructure_Extras, NONE)];
}

+ (EduStanfordNlpTreesGrammaticalRelation *)conjValueWithNSString:(NSString *)conj {
  return EduStanfordNlpTreesEnglishGrammaticalStructure_conjValueWithNSString_(conj);
}

+ (void)treatCCWithJavaUtilCollection:(id<JavaUtilCollection>)list {
  EduStanfordNlpTreesEnglishGrammaticalStructure_treatCCWithJavaUtilCollection_(list);
}

+ (jboolean)isDefinitelyActiveWithNSString:(NSString *)tag {
  return EduStanfordNlpTreesEnglishGrammaticalStructure_isDefinitelyActiveWithNSString_(tag);
}

+ (void)collapseConjWithJavaUtilCollection:(id<JavaUtilCollection>)list {
  EduStanfordNlpTreesEnglishGrammaticalStructure_collapseConjWithJavaUtilCollection_(list);
}

+ (void)collapseReferentWithJavaUtilCollection:(id<JavaUtilCollection>)list {
  EduStanfordNlpTreesEnglishGrammaticalStructure_collapseReferentWithJavaUtilCollection_(list);
}

+ (void)addRefWithJavaUtilCollection:(id<JavaUtilCollection>)list {
  EduStanfordNlpTreesEnglishGrammaticalStructure_addRefWithJavaUtilCollection_(list);
}

+ (void)addExtraNSubjWithJavaUtilCollection:(id<JavaUtilCollection>)list {
  EduStanfordNlpTreesEnglishGrammaticalStructure_addExtraNSubjWithJavaUtilCollection_(list);
}

+ (void)correctSubjPassWithJavaUtilCollection:(id<JavaUtilCollection>)list {
  EduStanfordNlpTreesEnglishGrammaticalStructure_correctSubjPassWithJavaUtilCollection_(list);
}

+ (jboolean)inConjDepsWithEduStanfordNlpTreesTypedDependency:(EduStanfordNlpTreesTypedDependency *)td
                                            withJavaUtilList:(id<JavaUtilList>)conjs {
  return EduStanfordNlpTreesEnglishGrammaticalStructure_inConjDepsWithEduStanfordNlpTreesTypedDependency_withJavaUtilList_(td, conjs);
}

+ (void)collapsePrepAndPossWithJavaUtilCollection:(id<JavaUtilCollection>)list {
  EduStanfordNlpTreesEnglishGrammaticalStructure_collapsePrepAndPossWithJavaUtilCollection_(list);
}

+ (EduStanfordNlpTreesGrammaticalRelation *)determinePrepRelationWithJavaUtilMap:(id<JavaUtilMap>)map
                                                                withJavaUtilList:(id<JavaUtilList>)vmod
                                          withEduStanfordNlpTreesTypedDependency:(EduStanfordNlpTreesTypedDependency *)pc
                                          withEduStanfordNlpTreesTypedDependency:(EduStanfordNlpTreesTypedDependency *)topPrep
                                                                     withBoolean:(jboolean)pobj {
  return EduStanfordNlpTreesEnglishGrammaticalStructure_determinePrepRelationWithJavaUtilMap_withJavaUtilList_withEduStanfordNlpTreesTypedDependency_withEduStanfordNlpTreesTypedDependency_withBoolean_(map, vmod, pc, topPrep, pobj);
}

+ (jboolean)isConjWithNoPrepWithEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)node
                                       withJavaUtilCollection:(id<JavaUtilCollection>)list {
  return EduStanfordNlpTreesEnglishGrammaticalStructure_isConjWithNoPrepWithEduStanfordNlpLingIndexedWord_withJavaUtilCollection_(node, list);
}

+ (void)collapse2WPWithJavaUtilCollection:(id<JavaUtilCollection>)list {
  EduStanfordNlpTreesEnglishGrammaticalStructure_collapse2WPWithJavaUtilCollection_(list);
}

+ (void)collapseMultiWordPrepWithJavaUtilCollection:(id<JavaUtilCollection>)list
                             withJavaUtilCollection:(id<JavaUtilCollection>)newTypedDeps
                                       withNSString:(NSString *)str_mwp0
                                       withNSString:(NSString *)str_mwp1
                                       withNSString:(NSString *)w_mwp0
                                       withNSString:(NSString *)w_mwp1 {
  EduStanfordNlpTreesEnglishGrammaticalStructure_collapseMultiWordPrepWithJavaUtilCollection_withJavaUtilCollection_withNSString_withNSString_withNSString_withNSString_(list, newTypedDeps, str_mwp0, str_mwp1, w_mwp0, w_mwp1);
}

+ (void)collapse2WPbisWithJavaUtilCollection:(id<JavaUtilCollection>)list {
  EduStanfordNlpTreesEnglishGrammaticalStructure_collapse2WPbisWithJavaUtilCollection_(list);
}

+ (void)collapse3WPWithJavaUtilCollection:(id<JavaUtilCollection>)list {
  EduStanfordNlpTreesEnglishGrammaticalStructure_collapse3WPWithJavaUtilCollection_(list);
}

+ (void)collapseFlatMWPWithJavaUtilCollection:(id<JavaUtilCollection>)list {
  EduStanfordNlpTreesEnglishGrammaticalStructure_collapseFlatMWPWithJavaUtilCollection_(list);
}

+ (void)eraseMultiConjWithJavaUtilCollection:(id<JavaUtilCollection>)list {
  EduStanfordNlpTreesEnglishGrammaticalStructure_eraseMultiConjWithJavaUtilCollection_(list);
}

+ (void)removeDepWithJavaUtilCollection:(id<JavaUtilCollection>)list {
  EduStanfordNlpTreesEnglishGrammaticalStructure_removeDepWithJavaUtilCollection_(list);
}

+ (void)removeExactDuplicatesWithJavaUtilCollection:(id<JavaUtilCollection>)list {
  EduStanfordNlpTreesEnglishGrammaticalStructure_removeExactDuplicatesWithJavaUtilCollection_(list);
}

+ (id<JavaUtilList>)readCoNLLXGrammaticalStructureCollectionWithNSString:(NSString *)fileName {
  return EduStanfordNlpTreesEnglishGrammaticalStructure_readCoNLLXGrammaticalStructureCollectionWithNSString_(fileName);
}

+ (EduStanfordNlpTreesEnglishGrammaticalStructure *)buildCoNLLXGrammaticalStructureWithJavaUtilList:(id<JavaUtilList>)tokenFields {
  return EduStanfordNlpTreesEnglishGrammaticalStructure_buildCoNLLXGrammaticalStructureWithJavaUtilList_(tokenFields);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, 4, -1, -1 },
    { NULL, NULL, 0x1, -1, 5, -1, 6, -1, -1 },
    { NULL, "LJavaUtilFunctionPredicate;", 0x4, -1, -1, -1, 7, -1, -1 },
    { NULL, "V", 0x4, 8, 9, -1, 10, -1, -1 },
    { NULL, "V", 0xa, 11, 12, -1, 13, -1, -1 },
    { NULL, "V", 0x4, 14, 9, -1, 10, -1, -1 },
    { NULL, "V", 0x4, 15, 9, -1, 10, -1, -1 },
    { NULL, "V", 0xa, 16, 9, -1, 10, -1, -1 },
    { NULL, "V", 0xa, 17, 18, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 19, 9, -1, 10, -1, -1 },
    { NULL, "V", 0xa, 20, 21, -1, 22, -1, -1 },
    { NULL, "V", 0x4, 23, 24, -1, 25, -1, -1 },
    { NULL, "V", 0x4, 26, 9, -1, 10, -1, -1 },
    { NULL, "LEduStanfordNlpTreesGrammaticalRelation;", 0xa, 27, 28, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 29, 21, -1, 22, -1, -1 },
    { NULL, "Z", 0xa, 30, 28, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 31, 21, -1, 22, -1, -1 },
    { NULL, "V", 0xa, 32, 21, -1, 22, -1, -1 },
    { NULL, "V", 0xa, 33, 21, -1, 22, -1, -1 },
    { NULL, "V", 0xa, 34, 21, -1, 22, -1, -1 },
    { NULL, "V", 0xa, 35, 21, -1, 22, -1, -1 },
    { NULL, "Z", 0xa, 36, 37, -1, 38, -1, -1 },
    { NULL, "V", 0xa, 39, 21, -1, 22, -1, -1 },
    { NULL, "LEduStanfordNlpTreesGrammaticalRelation;", 0xa, 40, 41, -1, 42, -1, -1 },
    { NULL, "Z", 0xa, 43, 44, -1, 45, -1, -1 },
    { NULL, "V", 0xa, 46, 21, -1, 22, -1, -1 },
    { NULL, "V", 0xa, 47, 48, -1, 49, -1, -1 },
    { NULL, "V", 0xa, 50, 21, -1, 22, -1, -1 },
    { NULL, "V", 0xa, 51, 21, -1, 22, -1, -1 },
    { NULL, "V", 0xa, 52, 21, -1, 22, -1, -1 },
    { NULL, "V", 0xa, 53, 21, -1, 22, -1, -1 },
    { NULL, "V", 0xa, 54, 21, -1, 22, -1, -1 },
    { NULL, "V", 0xa, 55, 21, -1, 22, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 56, 28, 57, 58, -1, -1 },
    { NULL, "LEduStanfordNlpTreesEnglishGrammaticalStructure;", 0x9, 59, 9, -1, 60, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpTreesTree:);
  methods[1].selector = @selector(initWithEduStanfordNlpTreesTree:withJavaUtilFunctionPredicate:);
  methods[2].selector = @selector(initWithEduStanfordNlpTreesTree:withJavaUtilFunctionPredicate:withEduStanfordNlpTreesHeadFinder:);
  methods[3].selector = @selector(initWithJavaUtilList:withEduStanfordNlpTreesTreeGraphNode:);
  methods[4].selector = @selector(extraTreeDepFilter);
  methods[5].selector = @selector(correctDependenciesWithJavaUtilList:);
  methods[6].selector = @selector(printListSortedWithNSString:withJavaUtilCollection:);
  methods[7].selector = @selector(postProcessDependenciesWithJavaUtilList:);
  methods[8].selector = @selector(getExtrasWithJavaUtilList:);
  methods[9].selector = @selector(addStrandedPobjWithJavaUtilList:);
  methods[10].selector = @selector(correctWHAttachmentWithEduStanfordNlpSemgraphSemanticGraph:);
  methods[11].selector = @selector(convertRelWithJavaUtilList:);
  methods[12].selector = @selector(filterKillWithJavaUtilCollection:);
  methods[13].selector = @selector(collapseDependenciesWithJavaUtilList:withBoolean:withEduStanfordNlpTreesGrammaticalStructure_Extras:);
  methods[14].selector = @selector(collapseDependenciesTreeWithJavaUtilList:);
  methods[15].selector = @selector(conjValueWithNSString:);
  methods[16].selector = @selector(treatCCWithJavaUtilCollection:);
  methods[17].selector = @selector(isDefinitelyActiveWithNSString:);
  methods[18].selector = @selector(collapseConjWithJavaUtilCollection:);
  methods[19].selector = @selector(collapseReferentWithJavaUtilCollection:);
  methods[20].selector = @selector(addRefWithJavaUtilCollection:);
  methods[21].selector = @selector(addExtraNSubjWithJavaUtilCollection:);
  methods[22].selector = @selector(correctSubjPassWithJavaUtilCollection:);
  methods[23].selector = @selector(inConjDepsWithEduStanfordNlpTreesTypedDependency:withJavaUtilList:);
  methods[24].selector = @selector(collapsePrepAndPossWithJavaUtilCollection:);
  methods[25].selector = @selector(determinePrepRelationWithJavaUtilMap:withJavaUtilList:withEduStanfordNlpTreesTypedDependency:withEduStanfordNlpTreesTypedDependency:withBoolean:);
  methods[26].selector = @selector(isConjWithNoPrepWithEduStanfordNlpLingIndexedWord:withJavaUtilCollection:);
  methods[27].selector = @selector(collapse2WPWithJavaUtilCollection:);
  methods[28].selector = @selector(collapseMultiWordPrepWithJavaUtilCollection:withJavaUtilCollection:withNSString:withNSString:withNSString:withNSString:);
  methods[29].selector = @selector(collapse2WPbisWithJavaUtilCollection:);
  methods[30].selector = @selector(collapse3WPWithJavaUtilCollection:);
  methods[31].selector = @selector(collapseFlatMWPWithJavaUtilCollection:);
  methods[32].selector = @selector(eraseMultiConjWithJavaUtilCollection:);
  methods[33].selector = @selector(removeDepWithJavaUtilCollection:);
  methods[34].selector = @selector(removeExactDuplicatesWithJavaUtilCollection:);
  methods[35].selector = @selector(readCoNLLXGrammaticalStructureCollectionWithNSString:);
  methods[36].selector = @selector(buildCoNLLXGrammaticalStructureWithJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpTreesEnglishGrammaticalStructure_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "DEBUG", "Z", .constantValue.asLong = 0, 0x1a, -1, 61, -1, -1 },
    { "extraTreeDepFilter_", "LJavaUtilFunctionPredicate;", .constantValue.asLong = 0, 0x1a, 62, 63, 64, -1 },
    { "XCOMP_PATTERN", "LEduStanfordNlpSemgraphSemgrexSemgrexPattern;", .constantValue.asLong = 0, 0xa, -1, 65, -1, -1 },
    { "morphology", "LEduStanfordNlpProcessMorphology;", .constantValue.asLong = 0, 0xa, -1, 66, -1, -1 },
    { "MULTIWORD_PREPS", "[[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 67, -1, -1 },
    { "THREEWORD_PREPS", "[[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 68, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpTreesTree;", "LEduStanfordNlpTreesTree;LJavaUtilFunctionPredicate;", "(Ledu/stanford/nlp/trees/Tree;Ljava/util/function/Predicate<Ljava/lang/String;>;)V", "LEduStanfordNlpTreesTree;LJavaUtilFunctionPredicate;LEduStanfordNlpTreesHeadFinder;", "(Ledu/stanford/nlp/trees/Tree;Ljava/util/function/Predicate<Ljava/lang/String;>;Ledu/stanford/nlp/trees/HeadFinder;)V", "LJavaUtilList;LEduStanfordNlpTreesTreeGraphNode;", "(Ljava/util/List<Ledu/stanford/nlp/trees/TypedDependency;>;Ledu/stanford/nlp/trees/TreeGraphNode;)V", "()Ljava/util/function/Predicate<Ledu/stanford/nlp/trees/TypedDependency;>;", "correctDependencies", "LJavaUtilList;", "(Ljava/util/List<Ledu/stanford/nlp/trees/TypedDependency;>;)V", "printListSorted", "LNSString;LJavaUtilCollection;", "(Ljava/lang/String;Ljava/util/Collection<Ledu/stanford/nlp/trees/TypedDependency;>;)V", "postProcessDependencies", "getExtras", "addStrandedPobj", "correctWHAttachment", "LEduStanfordNlpSemgraphSemanticGraph;", "convertRel", "filterKill", "LJavaUtilCollection;", "(Ljava/util/Collection<Ledu/stanford/nlp/trees/TypedDependency;>;)V", "collapseDependencies", "LJavaUtilList;ZLEduStanfordNlpTreesGrammaticalStructure_Extras;", "(Ljava/util/List<Ledu/stanford/nlp/trees/TypedDependency;>;ZLedu/stanford/nlp/trees/GrammaticalStructure$Extras;)V", "collapseDependenciesTree", "conjValue", "LNSString;", "treatCC", "isDefinitelyActive", "collapseConj", "collapseReferent", "addRef", "addExtraNSubj", "correctSubjPass", "inConjDeps", "LEduStanfordNlpTreesTypedDependency;LJavaUtilList;", "(Ledu/stanford/nlp/trees/TypedDependency;Ljava/util/List<Ledu/stanford/nlp/util/Triple<Ledu/stanford/nlp/trees/TypedDependency;Ledu/stanford/nlp/trees/TypedDependency;Ljava/lang/Boolean;>;>;)Z", "collapsePrepAndPoss", "determinePrepRelation", "LJavaUtilMap;LJavaUtilList;LEduStanfordNlpTreesTypedDependency;LEduStanfordNlpTreesTypedDependency;Z", "(Ljava/util/Map<Ledu/stanford/nlp/ling/IndexedWord;+Ljava/util/Set<Ledu/stanford/nlp/trees/TypedDependency;>;>;Ljava/util/List<Ledu/stanford/nlp/ling/IndexedWord;>;Ledu/stanford/nlp/trees/TypedDependency;Ledu/stanford/nlp/trees/TypedDependency;Z)Ledu/stanford/nlp/trees/GrammaticalRelation;", "isConjWithNoPrep", "LEduStanfordNlpLingIndexedWord;LJavaUtilCollection;", "(Ledu/stanford/nlp/ling/IndexedWord;Ljava/util/Collection<Ledu/stanford/nlp/trees/TypedDependency;>;)Z", "collapse2WP", "collapseMultiWordPrep", "LJavaUtilCollection;LJavaUtilCollection;LNSString;LNSString;LNSString;LNSString;", "(Ljava/util/Collection<Ledu/stanford/nlp/trees/TypedDependency;>;Ljava/util/Collection<Ledu/stanford/nlp/trees/TypedDependency;>;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", "collapse2WPbis", "collapse3WP", "collapseFlatMWP", "eraseMultiConj", "removeDep", "removeExactDuplicates", "readCoNLLXGrammaticalStructureCollection", "LJavaIoIOException;", "(Ljava/lang/String;)Ljava/util/List<Ledu/stanford/nlp/trees/GrammaticalStructure;>;", "buildCoNLLXGrammaticalStructure", "(Ljava/util/List<Ljava/util/List<Ljava/lang/String;>;>;)Ledu/stanford/nlp/trees/EnglishGrammaticalStructure;", &EduStanfordNlpTreesEnglishGrammaticalStructure_DEBUG, "extraTreeDepFilter", &EduStanfordNlpTreesEnglishGrammaticalStructure_extraTreeDepFilter_, "Ljava/util/function/Predicate<Ledu/stanford/nlp/trees/TypedDependency;>;", &EduStanfordNlpTreesEnglishGrammaticalStructure_XCOMP_PATTERN, &EduStanfordNlpTreesEnglishGrammaticalStructure_morphology, &EduStanfordNlpTreesEnglishGrammaticalStructure_MULTIWORD_PREPS, &EduStanfordNlpTreesEnglishGrammaticalStructure_THREEWORD_PREPS, "LEduStanfordNlpTreesEnglishGrammaticalStructure_ExtraTreeDepFilter;LEduStanfordNlpTreesEnglishGrammaticalStructure_FromDependenciesFactory;" };
  static const J2ObjcClassInfo _EduStanfordNlpTreesEnglishGrammaticalStructure = { "EnglishGrammaticalStructure", "edu.stanford.nlp.trees", ptrTable, methods, fields, 7, 0x1, 37, 7, -1, 69, -1, -1, -1 };
  return &_EduStanfordNlpTreesEnglishGrammaticalStructure;
}

+ (void)initialize {
  if (self == [EduStanfordNlpTreesEnglishGrammaticalStructure class]) {
    EduStanfordNlpTreesEnglishGrammaticalStructure_DEBUG = (JavaLangSystem_getPropertyWithNSString_withNSString_(@"EnglishGrammaticalStructure", nil) != nil);
    EduStanfordNlpTreesEnglishGrammaticalStructure_extraTreeDepFilter_ = new_EduStanfordNlpTreesEnglishGrammaticalStructure_ExtraTreeDepFilter_init();
    EduStanfordNlpTreesEnglishGrammaticalStructure_XCOMP_PATTERN = EduStanfordNlpSemgraphSemgrexSemgrexPattern_compileWithNSString_(@"{}=root >xcomp {}=embedded >/^(dep|dobj)$/ {}=wh ?>/([di]obj)/ {}=obj");
    EduStanfordNlpTreesEnglishGrammaticalStructure_morphology = new_EduStanfordNlpProcessMorphology_init();
    EduStanfordNlpTreesEnglishGrammaticalStructure_MULTIWORD_PREPS = [IOSObjectArray newArrayWithObjects:(id[]){ [IOSObjectArray newArrayWithObjects:(id[]){ @"according", @"to" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"across", @"from" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"ahead", @"of" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"along", @"with" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"alongside", @"of" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"apart", @"from" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"as", @"for" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"as", @"from" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"as", @"of" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"as", @"per" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"as", @"to" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"aside", @"from" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"away", @"from" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"based", @"on" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"because", @"of" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"close", @"by" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"close", @"to" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"contrary", @"to" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"compared", @"to" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"compared", @"with" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"due", @"to" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"depending", @"on" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"except", @"for" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"exclusive", @"of" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"far", @"from" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"followed", @"by" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"inside", @"of" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"instead", @"of" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"irrespective", @"of" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"next", @"to" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"near", @"to" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"off", @"of" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"out", @"of" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"outside", @"of" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"owing", @"to" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"preliminary", @"to" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"preparatory", @"to" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"previous", @"to" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"prior", @"to" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"pursuant", @"to" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"regardless", @"of" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"subsequent", @"to" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"such", @"as" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"thanks", @"to" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"together", @"with" } count:2 type:NSString_class_()] } count:45 type:IOSClass_arrayType(NSString_class_(), 1)];
    EduStanfordNlpTreesEnglishGrammaticalStructure_THREEWORD_PREPS = [IOSObjectArray newArrayWithObjects:(id[]){ [IOSObjectArray newArrayWithObjects:(id[]){ @"by", @"means", @"of" } count:3 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"in", @"accordance", @"with" } count:3 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"in", @"addition", @"to" } count:3 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"in", @"case", @"of" } count:3 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"in", @"front", @"of" } count:3 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"in", @"lieu", @"of" } count:3 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"in", @"place", @"of" } count:3 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"in", @"spite", @"of" } count:3 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"on", @"account", @"of" } count:3 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"on", @"behalf", @"of" } count:3 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"on", @"top", @"of" } count:3 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"with", @"regard", @"to" } count:3 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"with", @"respect", @"to" } count:3 type:NSString_class_()] } count:13 type:IOSClass_arrayType(NSString_class_(), 1)];
    J2OBJC_SET_INITIALIZED(EduStanfordNlpTreesEnglishGrammaticalStructure)
  }
}

@end

void EduStanfordNlpTreesEnglishGrammaticalStructure_initWithEduStanfordNlpTreesTree_(EduStanfordNlpTreesEnglishGrammaticalStructure *self, EduStanfordNlpTreesTree *t) {
  EduStanfordNlpTreesEnglishGrammaticalStructure_initWithEduStanfordNlpTreesTree_withJavaUtilFunctionPredicate_(self, t, [new_EduStanfordNlpTreesPennTreebankLanguagePack_init() punctuationWordRejectFilter]);
}

EduStanfordNlpTreesEnglishGrammaticalStructure *new_EduStanfordNlpTreesEnglishGrammaticalStructure_initWithEduStanfordNlpTreesTree_(EduStanfordNlpTreesTree *t) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesEnglishGrammaticalStructure, initWithEduStanfordNlpTreesTree_, t)
}

EduStanfordNlpTreesEnglishGrammaticalStructure *create_EduStanfordNlpTreesEnglishGrammaticalStructure_initWithEduStanfordNlpTreesTree_(EduStanfordNlpTreesTree *t) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesEnglishGrammaticalStructure, initWithEduStanfordNlpTreesTree_, t)
}

void EduStanfordNlpTreesEnglishGrammaticalStructure_initWithEduStanfordNlpTreesTree_withJavaUtilFunctionPredicate_(EduStanfordNlpTreesEnglishGrammaticalStructure *self, EduStanfordNlpTreesTree *t, id<JavaUtilFunctionPredicate> puncFilter) {
  EduStanfordNlpTreesEnglishGrammaticalStructure_initWithEduStanfordNlpTreesTree_withJavaUtilFunctionPredicate_withEduStanfordNlpTreesHeadFinder_(self, t, puncFilter, new_EduStanfordNlpTreesSemanticHeadFinder_initWithBoolean_(true));
}

EduStanfordNlpTreesEnglishGrammaticalStructure *new_EduStanfordNlpTreesEnglishGrammaticalStructure_initWithEduStanfordNlpTreesTree_withJavaUtilFunctionPredicate_(EduStanfordNlpTreesTree *t, id<JavaUtilFunctionPredicate> puncFilter) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesEnglishGrammaticalStructure, initWithEduStanfordNlpTreesTree_withJavaUtilFunctionPredicate_, t, puncFilter)
}

EduStanfordNlpTreesEnglishGrammaticalStructure *create_EduStanfordNlpTreesEnglishGrammaticalStructure_initWithEduStanfordNlpTreesTree_withJavaUtilFunctionPredicate_(EduStanfordNlpTreesTree *t, id<JavaUtilFunctionPredicate> puncFilter) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesEnglishGrammaticalStructure, initWithEduStanfordNlpTreesTree_withJavaUtilFunctionPredicate_, t, puncFilter)
}

void EduStanfordNlpTreesEnglishGrammaticalStructure_initWithEduStanfordNlpTreesTree_withJavaUtilFunctionPredicate_withEduStanfordNlpTreesHeadFinder_(EduStanfordNlpTreesEnglishGrammaticalStructure *self, EduStanfordNlpTreesTree *t, id<JavaUtilFunctionPredicate> puncFilter, id<EduStanfordNlpTreesHeadFinder> hf) {
  EduStanfordNlpTreesGrammaticalStructure_initWithEduStanfordNlpTreesTree_withJavaUtilCollection_withJavaUtilConcurrentLocksLock_withEduStanfordNlpTreesTreeTransformer_withEduStanfordNlpTreesHeadFinder_withJavaUtilFunctionPredicate_withJavaUtilFunctionPredicate_(self, t, EduStanfordNlpTreesEnglishGrammaticalRelations_values(), EduStanfordNlpTreesEnglishGrammaticalRelations_valuesLock(), new_EduStanfordNlpTreesCoordinationTransformer_initWithEduStanfordNlpTreesHeadFinder_(hf), hf, puncFilter, EduStanfordNlpUtilFilters_acceptFilter());
}

EduStanfordNlpTreesEnglishGrammaticalStructure *new_EduStanfordNlpTreesEnglishGrammaticalStructure_initWithEduStanfordNlpTreesTree_withJavaUtilFunctionPredicate_withEduStanfordNlpTreesHeadFinder_(EduStanfordNlpTreesTree *t, id<JavaUtilFunctionPredicate> puncFilter, id<EduStanfordNlpTreesHeadFinder> hf) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesEnglishGrammaticalStructure, initWithEduStanfordNlpTreesTree_withJavaUtilFunctionPredicate_withEduStanfordNlpTreesHeadFinder_, t, puncFilter, hf)
}

EduStanfordNlpTreesEnglishGrammaticalStructure *create_EduStanfordNlpTreesEnglishGrammaticalStructure_initWithEduStanfordNlpTreesTree_withJavaUtilFunctionPredicate_withEduStanfordNlpTreesHeadFinder_(EduStanfordNlpTreesTree *t, id<JavaUtilFunctionPredicate> puncFilter, id<EduStanfordNlpTreesHeadFinder> hf) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesEnglishGrammaticalStructure, initWithEduStanfordNlpTreesTree_withJavaUtilFunctionPredicate_withEduStanfordNlpTreesHeadFinder_, t, puncFilter, hf)
}

void EduStanfordNlpTreesEnglishGrammaticalStructure_initWithJavaUtilList_withEduStanfordNlpTreesTreeGraphNode_(EduStanfordNlpTreesEnglishGrammaticalStructure *self, id<JavaUtilList> projectiveDependencies, EduStanfordNlpTreesTreeGraphNode *root) {
  EduStanfordNlpTreesGrammaticalStructure_initWithJavaUtilList_withEduStanfordNlpTreesTreeGraphNode_(self, projectiveDependencies, root);
}

EduStanfordNlpTreesEnglishGrammaticalStructure *new_EduStanfordNlpTreesEnglishGrammaticalStructure_initWithJavaUtilList_withEduStanfordNlpTreesTreeGraphNode_(id<JavaUtilList> projectiveDependencies, EduStanfordNlpTreesTreeGraphNode *root) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesEnglishGrammaticalStructure, initWithJavaUtilList_withEduStanfordNlpTreesTreeGraphNode_, projectiveDependencies, root)
}

EduStanfordNlpTreesEnglishGrammaticalStructure *create_EduStanfordNlpTreesEnglishGrammaticalStructure_initWithJavaUtilList_withEduStanfordNlpTreesTreeGraphNode_(id<JavaUtilList> projectiveDependencies, EduStanfordNlpTreesTreeGraphNode *root) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesEnglishGrammaticalStructure, initWithJavaUtilList_withEduStanfordNlpTreesTreeGraphNode_, projectiveDependencies, root)
}

void EduStanfordNlpTreesEnglishGrammaticalStructure_printListSortedWithNSString_withJavaUtilCollection_(NSString *title, id<JavaUtilCollection> list) {
  EduStanfordNlpTreesEnglishGrammaticalStructure_initialize();
  id<JavaUtilList> lis = new_JavaUtilArrayList_initWithJavaUtilCollection_(list);
  JavaUtilCollections_sortWithJavaUtilList_(lis);
  if (title != nil) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:title];
  }
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithId:lis];
}

void EduStanfordNlpTreesEnglishGrammaticalStructure_addStrandedPobjWithJavaUtilList_(id<JavaUtilList> list) {
  EduStanfordNlpTreesEnglishGrammaticalStructure_initialize();
  id<JavaUtilList> depNodes = nil;
  id<JavaUtilList> newDeps = nil;
  for (EduStanfordNlpTreesTypedDependency * __strong rcmod in nil_chk(list)) {
    if ([((EduStanfordNlpTreesTypedDependency *) nil_chk(rcmod)) reln] != JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, RELATIVE_CLAUSE_MODIFIER)) {
      continue;
    }
    EduStanfordNlpLingIndexedWord *head = [rcmod gov];
    if (depNodes == nil) {
      depNodes = EduStanfordNlpUtilGenerics_newArrayList();
    }
    else {
      [depNodes clear];
    }
    [((id<JavaUtilList>) nil_chk(depNodes)) addWithId:[rcmod dep]];
    for (EduStanfordNlpTreesTypedDependency * __strong connected in list) {
      if ([((EduStanfordNlpLingIndexedWord *) nil_chk([((EduStanfordNlpTreesTypedDependency *) nil_chk(connected)) gov])) isEqual:[rcmod dep]] && ([connected reln] == JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, XCLAUSAL_COMPLEMENT) || [connected reln] == JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, CONJUNCT))) {
        [depNodes addWithId:[connected dep]];
      }
    }
    for (EduStanfordNlpLingIndexedWord * __strong dep in depNodes) {
      for (EduStanfordNlpTreesTypedDependency * __strong prep in list) {
        if (![((EduStanfordNlpLingIndexedWord *) nil_chk([((EduStanfordNlpTreesTypedDependency *) nil_chk(prep)) gov])) isEqual:dep] || [prep reln] != JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, PREPOSITIONAL_MODIFIER)) {
          continue;
        }
        jboolean found = false;
        for (EduStanfordNlpTreesTypedDependency * __strong other in list) {
          if ([((EduStanfordNlpLingIndexedWord *) nil_chk([((EduStanfordNlpTreesTypedDependency *) nil_chk(other)) gov])) isEqual:[prep dep]] && ([other reln] == JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, PREPOSITIONAL_COMPLEMENT) || [other reln] == JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, PREPOSITIONAL_OBJECT))) {
            found = true;
            break;
          }
        }
        if (!found) {
          if (newDeps == nil) {
            newDeps = EduStanfordNlpUtilGenerics_newArrayList();
          }
          EduStanfordNlpTreesTypedDependency *newDep = new_EduStanfordNlpTreesTypedDependency_initWithEduStanfordNlpTreesGrammaticalRelation_withEduStanfordNlpLingIndexedWord_withEduStanfordNlpLingIndexedWord_(JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, PREPOSITIONAL_OBJECT), [prep dep], head);
          [((id<JavaUtilList>) nil_chk(newDeps)) addWithId:newDep];
        }
      }
    }
  }
  if (newDeps != nil) {
    [list addAllWithJavaUtilCollection:newDeps];
  }
}

void EduStanfordNlpTreesEnglishGrammaticalStructure_correctWHAttachmentWithEduStanfordNlpSemgraphSemanticGraph_(EduStanfordNlpSemgraphSemanticGraph *sg) {
  EduStanfordNlpTreesEnglishGrammaticalStructure_initialize();
  if ([((id<JavaUtilCollection>) nil_chk([((EduStanfordNlpSemgraphSemanticGraph *) nil_chk(sg)) getRoots])) isEmpty]) return;
  EduStanfordNlpSemgraphSemanticGraph *sgCopy = [sg makeSoftCopy];
  EduStanfordNlpSemgraphSemgrexSemgrexMatcher *matcher = [((EduStanfordNlpSemgraphSemgrexSemgrexPattern *) nil_chk(EduStanfordNlpTreesEnglishGrammaticalStructure_XCOMP_PATTERN)) matcherWithEduStanfordNlpSemgraphSemanticGraph:sgCopy];
  while ([((EduStanfordNlpSemgraphSemgrexSemgrexMatcher *) nil_chk(matcher)) findNextMatchingNode]) {
    EduStanfordNlpLingIndexedWord *root = [matcher getNodeWithNSString:@"root"];
    EduStanfordNlpLingIndexedWord *embeddedVerb = [matcher getNodeWithNSString:@"embedded"];
    EduStanfordNlpLingIndexedWord *wh = [matcher getNodeWithNSString:@"wh"];
    EduStanfordNlpLingIndexedWord *dobj = [matcher getNodeWithNSString:@"obj"];
    if ([((NSString *) nil_chk([((EduStanfordNlpLingIndexedWord *) nil_chk(wh)) tag])) hasPrefix:@"W"]) {
      jboolean reattach = false;
      if (dobj != nil) {
        reattach = true;
      }
      else {
        NSString *lemma = [((EduStanfordNlpProcessMorphology *) nil_chk(EduStanfordNlpTreesEnglishGrammaticalStructure_morphology)) lemmaWithNSString:[((EduStanfordNlpLingIndexedWord *) nil_chk(root)) value] withNSString:[root tag]];
        if ([((NSString *) nil_chk(lemma)) matches:EduStanfordNlpTreesEnglishPatterns_NP_V_S_INF_VERBS_REGEX]) {
          reattach = true;
        }
      }
      if (reattach) {
        EduStanfordNlpSemgraphSemanticGraphEdge *edge = [sg getEdgeWithEduStanfordNlpLingIndexedWord:root withEduStanfordNlpLingIndexedWord:wh];
        if (edge != nil) {
          [sg removeEdgeWithEduStanfordNlpSemgraphSemanticGraphEdge:edge];
          (void) [sg addEdgeWithEduStanfordNlpLingIndexedWord:embeddedVerb withEduStanfordNlpLingIndexedWord:wh withEduStanfordNlpTreesGrammaticalRelation:JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, DIRECT_OBJECT) withDouble:JavaLangDouble_NEGATIVE_INFINITY withBoolean:false];
        }
      }
    }
  }
}

void EduStanfordNlpTreesEnglishGrammaticalStructure_convertRelWithJavaUtilList_(id<JavaUtilList> list) {
  EduStanfordNlpTreesEnglishGrammaticalStructure_initialize();
  id<JavaUtilList> newDeps = new_JavaUtilArrayList_init();
  for (EduStanfordNlpTreesTypedDependency * __strong rel in nil_chk(list)) {
    if ([((EduStanfordNlpTreesTypedDependency *) nil_chk(rel)) reln] != JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, RELATIVE)) {
      continue;
    }
    jboolean foundPrep = false;
    for (EduStanfordNlpTreesTypedDependency * __strong prep in list) {
      if ([((EduStanfordNlpTreesTypedDependency *) nil_chk(prep)) reln] != JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, PREPOSITIONAL_MODIFIER)) {
        continue;
      }
      if (![((EduStanfordNlpLingIndexedWord *) nil_chk([prep gov])) isEqual:[rel gov]]) {
        jboolean hasCompParent = false;
        for (EduStanfordNlpTreesTypedDependency * __strong prep2 in list) {
          if ([((EduStanfordNlpTreesTypedDependency *) nil_chk(prep2)) reln] == JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, XCLAUSAL_COMPLEMENT) || [prep2 reln] == JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, ADJECTIVAL_COMPLEMENT) || [prep2 reln] == JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, CLAUSAL_COMPLEMENT) || [prep2 reln] == JreLoadStatic(EduStanfordNlpTreesGrammaticalRelation, ROOT)) {
            if ([((EduStanfordNlpLingIndexedWord *) nil_chk([prep gov])) isEqual:[prep2 dep]] && [((EduStanfordNlpLingIndexedWord *) nil_chk([prep2 gov])) isEqual:[rel gov]]) {
              hasCompParent = true;
              break;
            }
          }
        }
        if (!hasCompParent) continue;
      }
      jboolean foundPobj = false;
      for (EduStanfordNlpTreesTypedDependency * __strong pobj in list) {
        if ([((EduStanfordNlpTreesTypedDependency *) nil_chk(pobj)) reln] != JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, PREPOSITIONAL_OBJECT) && [pobj reln] != JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, PREPOSITIONAL_COMPLEMENT)) {
          continue;
        }
        if (![((EduStanfordNlpLingIndexedWord *) nil_chk([pobj gov])) isEqual:[prep dep]]) {
          continue;
        }
        foundPobj = true;
        break;
      }
      if (!foundPobj) {
        foundPrep = true;
        EduStanfordNlpTreesTypedDependency *newDep = new_EduStanfordNlpTreesTypedDependency_initWithEduStanfordNlpTreesGrammaticalRelation_withEduStanfordNlpLingIndexedWord_withEduStanfordNlpLingIndexedWord_(JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, PREPOSITIONAL_OBJECT), [prep dep], [rel dep]);
        [newDeps addWithId:newDep];
        [rel setRelnWithEduStanfordNlpTreesGrammaticalRelation:JreLoadStatic(EduStanfordNlpTreesGrammaticalRelation, KILL)];
      }
    }
    if (!foundPrep) {
      [rel setRelnWithEduStanfordNlpTreesGrammaticalRelation:JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, DIRECT_OBJECT)];
    }
  }
  EduStanfordNlpTreesEnglishGrammaticalStructure_filterKillWithJavaUtilCollection_(list);
  for (EduStanfordNlpTreesTypedDependency * __strong dep in newDeps) {
    if (![list containsWithId:dep]) {
      [list addWithId:dep];
    }
  }
}

void EduStanfordNlpTreesEnglishGrammaticalStructure_filterKillWithJavaUtilCollection_(id<JavaUtilCollection> deps) {
  EduStanfordNlpTreesEnglishGrammaticalStructure_initialize();
  id<JavaUtilList> filtered = EduStanfordNlpUtilGenerics_newArrayList();
  for (EduStanfordNlpTreesTypedDependency * __strong dep in nil_chk(deps)) {
    if ([((EduStanfordNlpTreesTypedDependency *) nil_chk(dep)) reln] != JreLoadStatic(EduStanfordNlpTreesGrammaticalRelation, KILL)) {
      [((id<JavaUtilList>) nil_chk(filtered)) addWithId:dep];
    }
  }
  [deps clear];
  [deps addAllWithJavaUtilCollection:filtered];
}

EduStanfordNlpTreesGrammaticalRelation *EduStanfordNlpTreesEnglishGrammaticalStructure_conjValueWithNSString_(NSString *conj) {
  EduStanfordNlpTreesEnglishGrammaticalStructure_initialize();
  NSString *newConj = [((NSString *) nil_chk(conj)) lowercaseString];
  if ([((NSString *) nil_chk(newConj)) isEqual:@"not"] || [newConj isEqual:@"instead"] || [newConj isEqual:@"rather"]) {
    newConj = @"negcc";
  }
  else if ([newConj isEqual:@"mention"] || [newConj isEqual:@"to"] || [newConj isEqual:@"also"] || [newConj contains:@"well"] || [newConj isEqual:@"&"]) {
    newConj = @"and";
  }
  return EduStanfordNlpTreesEnglishGrammaticalRelations_getConjWithNSString_(newConj);
}

void EduStanfordNlpTreesEnglishGrammaticalStructure_treatCCWithJavaUtilCollection_(id<JavaUtilCollection> list) {
  EduStanfordNlpTreesEnglishGrammaticalStructure_initialize();
  id<JavaUtilMap> map = EduStanfordNlpUtilGenerics_newHashMap();
  id<JavaUtilMap> subjectMap = EduStanfordNlpUtilGenerics_newHashMap();
  id<JavaUtilSet> withPassiveAuxiliary = EduStanfordNlpUtilGenerics_newHashSet();
  id<JavaUtilList> rcmodHeads = EduStanfordNlpUtilGenerics_newArrayList();
  id<JavaUtilList> prepcDep = EduStanfordNlpUtilGenerics_newArrayList();
  for (EduStanfordNlpTreesTypedDependency * __strong typedDep in nil_chk(list)) {
    if (![((id<JavaUtilMap>) nil_chk(map)) containsKeyWithId:[((EduStanfordNlpTreesTypedDependency *) nil_chk(typedDep)) dep]]) {
      (void) [map putWithId:[typedDep dep] withId:new_JavaUtilTreeSet_init()];
    }
    [((id<JavaUtilSet>) nil_chk([map getWithId:[typedDep dep]])) addWithId:typedDep];
    if ([((EduStanfordNlpTreesGrammaticalRelation *) nil_chk([typedDep reln])) isEqual:JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, AUX_PASSIVE_MODIFIER)]) {
      [((id<JavaUtilSet>) nil_chk(withPassiveAuxiliary)) addWithId:[typedDep gov]];
    }
    if ([((EduStanfordNlpTreesGrammaticalRelation *) nil_chk([typedDep reln])) getParent] == JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, NOMINAL_SUBJECT) || [((EduStanfordNlpTreesGrammaticalRelation *) nil_chk([typedDep reln])) getParent] == JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, SUBJECT) || [((EduStanfordNlpTreesGrammaticalRelation *) nil_chk([typedDep reln])) getParent] == JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, CLAUSAL_SUBJECT)) {
      if (![((id<JavaUtilMap>) nil_chk(subjectMap)) containsKeyWithId:[typedDep gov]]) {
        (void) [subjectMap putWithId:[typedDep gov] withId:typedDep];
      }
    }
    if ([typedDep reln] == JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, RELATIVE_CLAUSE_MODIFIER)) {
      [((id<JavaUtilList>) nil_chk(rcmodHeads)) addWithId:[typedDep gov]];
    }
    if ([((NSString *) nil_chk([((EduStanfordNlpTreesGrammaticalRelation *) nil_chk([typedDep reln])) description])) hasPrefix:@"prepc"]) {
      [((id<JavaUtilList>) nil_chk(prepcDep)) addWithId:[typedDep dep]];
    }
  }
  id<JavaUtilCollection> newTypedDeps = new_JavaUtilArrayList_initWithJavaUtilCollection_(list);
  for (EduStanfordNlpTreesTypedDependency * __strong td in list) {
    if ([((id<JavaUtilCollection>) nil_chk(EduStanfordNlpTreesEnglishGrammaticalRelations_getConjs())) containsWithId:[((EduStanfordNlpTreesTypedDependency *) nil_chk(td)) reln]]) {
      EduStanfordNlpLingIndexedWord *gov = [td gov];
      EduStanfordNlpLingIndexedWord *dep = [td dep];
      id<JavaUtilSet> gov_relations = [((id<JavaUtilMap>) nil_chk(map)) getWithId:gov];
      if (gov_relations != nil) {
        for (EduStanfordNlpTreesTypedDependency * __strong td1 in gov_relations) {
          EduStanfordNlpLingIndexedWord *newGov = [((EduStanfordNlpTreesTypedDependency *) nil_chk(td1)) gov];
          if ([((EduStanfordNlpLingIndexedWord *) nil_chk(newGov)) isEqual:dep]) {
            continue;
          }
          EduStanfordNlpTreesGrammaticalRelation *newRel = [td1 reln];
          if (newRel != JreLoadStatic(EduStanfordNlpTreesGrammaticalRelation, ROOT)) {
            if ([((id<JavaUtilList>) nil_chk(rcmodHeads)) containsWithId:gov] && [rcmodHeads containsWithId:dep]) {
              if (newRel != JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, DIRECT_OBJECT) && newRel != JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, NOMINAL_SUBJECT)) {
                if (EduStanfordNlpTreesEnglishGrammaticalStructure_DEBUG) {
                  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$@$@$@$", @"Adding new ", newRel, @" dependency from ", newGov, @" to ", dep, @" (subj/obj case)")];
                }
                [newTypedDeps addWithId:new_EduStanfordNlpTreesTypedDependency_initWithEduStanfordNlpTreesGrammaticalRelation_withEduStanfordNlpLingIndexedWord_withEduStanfordNlpLingIndexedWord_(newRel, newGov, dep)];
              }
            }
            else {
              if (EduStanfordNlpTreesEnglishGrammaticalStructure_DEBUG) {
                [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$@$@$@", @"Adding new ", newRel, @" dependency from ", newGov, @" to ", dep)];
              }
              [newTypedDeps addWithId:new_EduStanfordNlpTreesTypedDependency_initWithEduStanfordNlpTreesGrammaticalRelation_withEduStanfordNlpLingIndexedWord_withEduStanfordNlpLingIndexedWord_(newRel, newGov, dep)];
            }
          }
        }
      }
      NSString *tag = [((EduStanfordNlpLingIndexedWord *) nil_chk(dep)) tag];
      if ([((id<JavaUtilMap>) nil_chk(subjectMap)) containsKeyWithId:gov] && ([((NSString *) nil_chk(tag)) hasPrefix:@"VB"] || [tag hasPrefix:@"JJ"]) && ![subjectMap containsKeyWithId:dep]) {
        EduStanfordNlpTreesTypedDependency *tdsubj = [subjectMap getWithId:gov];
        EduStanfordNlpTreesGrammaticalRelation *relation = [((EduStanfordNlpTreesTypedDependency *) nil_chk(tdsubj)) reln];
        if (relation == JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, NOMINAL_PASSIVE_SUBJECT)) {
          if (EduStanfordNlpTreesEnglishGrammaticalStructure_isDefinitelyActiveWithNSString_(tag)) {
            relation = JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, NOMINAL_SUBJECT);
          }
        }
        else if (relation == JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, CLAUSAL_PASSIVE_SUBJECT)) {
          if (EduStanfordNlpTreesEnglishGrammaticalStructure_isDefinitelyActiveWithNSString_(tag)) {
            relation = JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, CLAUSAL_SUBJECT);
          }
        }
        else if (relation == JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, NOMINAL_SUBJECT)) {
          if ([((id<JavaUtilSet>) nil_chk(withPassiveAuxiliary)) containsWithId:dep]) {
            relation = JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, NOMINAL_PASSIVE_SUBJECT);
          }
        }
        else if (relation == JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, CLAUSAL_SUBJECT)) {
          if ([((id<JavaUtilSet>) nil_chk(withPassiveAuxiliary)) containsWithId:dep]) {
            relation = JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, CLAUSAL_PASSIVE_SUBJECT);
          }
        }
        if (EduStanfordNlpTreesEnglishGrammaticalStructure_DEBUG) {
          [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$@$@$@$", @"Adding new ", relation, @" dependency from ", dep, @" to ", [tdsubj dep], @" (subj propagation case)")];
        }
        [newTypedDeps addWithId:new_EduStanfordNlpTreesTypedDependency_initWithEduStanfordNlpTreesGrammaticalRelation_withEduStanfordNlpLingIndexedWord_withEduStanfordNlpLingIndexedWord_(relation, dep, [tdsubj dep])];
      }
    }
  }
  [list clear];
  [list addAllWithJavaUtilCollection:newTypedDeps];
}

jboolean EduStanfordNlpTreesEnglishGrammaticalStructure_isDefinitelyActiveWithNSString_(NSString *tag) {
  EduStanfordNlpTreesEnglishGrammaticalStructure_initialize();
  return [((NSString *) nil_chk(tag)) isEqual:@"VB"] || [tag isEqual:@"VBZ"] || [tag isEqual:@"VBP"] || [tag hasPrefix:@"JJ"];
}

void EduStanfordNlpTreesEnglishGrammaticalStructure_collapseConjWithJavaUtilCollection_(id<JavaUtilCollection> list) {
  EduStanfordNlpTreesEnglishGrammaticalStructure_initialize();
  id<JavaUtilList> govs = EduStanfordNlpUtilGenerics_newArrayList();
  for (EduStanfordNlpTreesTypedDependency * __strong td in nil_chk(list)) {
    if ([((EduStanfordNlpTreesTypedDependency *) nil_chk(td)) reln] == JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, COORDINATION)) {
      EduStanfordNlpLingIndexedWord *gov = [td gov];
      EduStanfordNlpTreesGrammaticalRelation *conj = EduStanfordNlpTreesEnglishGrammaticalStructure_conjValueWithNSString_([((EduStanfordNlpLingIndexedWord *) nil_chk([td dep])) value]);
      if (EduStanfordNlpTreesEnglishGrammaticalStructure_DEBUG) {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$@$@", @"Set conj to ", conj, @" based on ", td)];
      }
      jboolean foundOne = false;
      for (EduStanfordNlpTreesTypedDependency * __strong td1 in list) {
        if ([((EduStanfordNlpLingIndexedWord *) nil_chk([((EduStanfordNlpTreesTypedDependency *) nil_chk(td1)) gov])) isEqual:gov]) {
          if ([td1 reln] == JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, CONJUNCT)) {
            if (EduStanfordNlpTreesEnglishGrammaticalStructure_DEBUG) {
              [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$@$@", @"Changing ", td1, @" to have relation ", conj)];
            }
            [td1 setRelnWithEduStanfordNlpTreesGrammaticalRelation:conj];
            foundOne = true;
          }
          else if ([td1 reln] == JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, COORDINATION)) {
            conj = EduStanfordNlpTreesEnglishGrammaticalStructure_conjValueWithNSString_([((EduStanfordNlpLingIndexedWord *) nil_chk([td1 dep])) value]);
            if (EduStanfordNlpTreesEnglishGrammaticalStructure_DEBUG) {
              [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$@$@", @"Set conj to ", conj, @" based on ", td1)];
            }
          }
        }
      }
      if (foundOne) {
        [((id<JavaUtilList>) nil_chk(govs)) addWithId:gov];
      }
    }
  }
  for (id<JavaUtilIterator> iter = [list iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) {
    EduStanfordNlpTreesTypedDependency *td2 = [iter next];
    if ([((EduStanfordNlpTreesTypedDependency *) nil_chk(td2)) reln] == JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, COORDINATION) && [((id<JavaUtilList>) nil_chk(govs)) containsWithId:[td2 gov]]) {
      [iter remove];
    }
  }
}

void EduStanfordNlpTreesEnglishGrammaticalStructure_collapseReferentWithJavaUtilCollection_(id<JavaUtilCollection> list) {
  EduStanfordNlpTreesEnglishGrammaticalStructure_initialize();
  id<JavaUtilList> refs = new_JavaUtilArrayList_init();
  for (id<JavaUtilIterator> iter = [((id<JavaUtilCollection>) nil_chk(list)) iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) {
    EduStanfordNlpTreesTypedDependency *td = [iter next];
    if ([((EduStanfordNlpTreesTypedDependency *) nil_chk(td)) reln] == JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, REFERENT)) {
      [refs addWithId:td];
      [iter remove];
    }
  }
  for (EduStanfordNlpTreesTypedDependency * __strong ref in refs) {
    EduStanfordNlpLingIndexedWord *dep = [((EduStanfordNlpTreesTypedDependency *) nil_chk(ref)) dep];
    EduStanfordNlpLingIndexedWord *ant = [ref gov];
    for (EduStanfordNlpTreesTypedDependency * __strong td in list) {
      if ([((EduStanfordNlpLingIndexedWord *) nil_chk([((EduStanfordNlpTreesTypedDependency *) nil_chk(td)) dep])) isEqual:dep] && [td reln] != JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, REFERENT) && ![((EduStanfordNlpLingIndexedWord *) nil_chk([td gov])) isEqual:ant]) {
        if (EduStanfordNlpTreesEnglishGrammaticalStructure_DEBUG) {
          [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printWithNSString:JreStrcat("$@", @"referent: changing ", td)];
        }
        [td setDepWithEduStanfordNlpLingIndexedWord:ant];
        [td setExtra];
        if (EduStanfordNlpTreesEnglishGrammaticalStructure_DEBUG) {
          [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$@", @" to ", td)];
        }
      }
    }
  }
}

void EduStanfordNlpTreesEnglishGrammaticalStructure_addRefWithJavaUtilCollection_(id<JavaUtilCollection> list) {
  EduStanfordNlpTreesEnglishGrammaticalStructure_initialize();
  id<JavaUtilList> newDeps = new_JavaUtilArrayList_init();
  for (EduStanfordNlpTreesTypedDependency * __strong rcmod in nil_chk(list)) {
    if ([((EduStanfordNlpTreesTypedDependency *) nil_chk(rcmod)) reln] != JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, RELATIVE_CLAUSE_MODIFIER)) {
      continue;
    }
    EduStanfordNlpLingIndexedWord *head = [rcmod gov];
    EduStanfordNlpLingIndexedWord *modifier = [rcmod dep];
    EduStanfordNlpTreesTypedDependency *leftChild = nil;
    for (EduStanfordNlpTreesTypedDependency * __strong child in list) {
      if ([((EduStanfordNlpLingIndexedWord *) nil_chk([((EduStanfordNlpTreesTypedDependency *) nil_chk(child)) gov])) isEqual:modifier] && [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(JreLoadStatic(EduStanfordNlpTreesEnglishPatterns, RELATIVIZING_WORD_PATTERN))) matcherWithJavaLangCharSequence:[((EduStanfordNlpLingIndexedWord *) nil_chk([child dep])) value]])) matches] && (leftChild == nil || [((EduStanfordNlpLingIndexedWord *) nil_chk([child dep])) index] < [((EduStanfordNlpLingIndexedWord *) nil_chk([leftChild dep])) index])) {
        leftChild = child;
      }
    }
    EduStanfordNlpTreesTypedDependency *leftGrandchild = nil;
    for (EduStanfordNlpTreesTypedDependency * __strong child in list) {
      if (![((EduStanfordNlpLingIndexedWord *) nil_chk([((EduStanfordNlpTreesTypedDependency *) nil_chk(child)) gov])) isEqual:modifier]) {
        continue;
      }
      for (EduStanfordNlpTreesTypedDependency * __strong grandchild in list) {
        if ([((EduStanfordNlpLingIndexedWord *) nil_chk([((EduStanfordNlpTreesTypedDependency *) nil_chk(grandchild)) gov])) isEqual:[child dep]] && [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(JreLoadStatic(EduStanfordNlpTreesEnglishPatterns, RELATIVIZING_WORD_PATTERN))) matcherWithJavaLangCharSequence:[((EduStanfordNlpLingIndexedWord *) nil_chk([grandchild dep])) value]])) matches] && (leftGrandchild == nil || [((EduStanfordNlpLingIndexedWord *) nil_chk([grandchild dep])) index] < [((EduStanfordNlpLingIndexedWord *) nil_chk([leftGrandchild dep])) index])) {
          leftGrandchild = grandchild;
        }
      }
    }
    EduStanfordNlpTreesTypedDependency *newDep = nil;
    if (leftGrandchild != nil && (leftChild == nil || [((EduStanfordNlpLingIndexedWord *) nil_chk([leftGrandchild dep])) index] < [((EduStanfordNlpLingIndexedWord *) nil_chk([leftChild dep])) index])) {
      newDep = new_EduStanfordNlpTreesTypedDependency_initWithEduStanfordNlpTreesGrammaticalRelation_withEduStanfordNlpLingIndexedWord_withEduStanfordNlpLingIndexedWord_(JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, REFERENT), head, [leftGrandchild dep]);
    }
    else if (leftChild != nil) {
      newDep = new_EduStanfordNlpTreesTypedDependency_initWithEduStanfordNlpTreesGrammaticalRelation_withEduStanfordNlpLingIndexedWord_withEduStanfordNlpLingIndexedWord_(JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, REFERENT), head, [leftChild dep]);
    }
    if (newDep != nil) {
      [newDeps addWithId:newDep];
    }
  }
  for (EduStanfordNlpTreesTypedDependency * __strong newDep in newDeps) {
    if (![list containsWithId:newDep]) {
      [((EduStanfordNlpTreesTypedDependency *) nil_chk(newDep)) setExtra];
      [list addWithId:newDep];
    }
  }
}

void EduStanfordNlpTreesEnglishGrammaticalStructure_addExtraNSubjWithJavaUtilCollection_(id<JavaUtilCollection> list) {
  EduStanfordNlpTreesEnglishGrammaticalStructure_initialize();
  id<JavaUtilList> newDeps = new_JavaUtilArrayList_init();
  for (EduStanfordNlpTreesTypedDependency * __strong xcomp in nil_chk(list)) {
    if ([((EduStanfordNlpTreesTypedDependency *) nil_chk(xcomp)) reln] != JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, XCLAUSAL_COMPLEMENT)) {
      continue;
    }
    EduStanfordNlpLingIndexedWord *modifier = [xcomp dep];
    EduStanfordNlpLingIndexedWord *head = [xcomp gov];
    jboolean hasSubjectDaughter = false;
    jboolean hasAux = false;
    id<JavaUtilList> subjects = EduStanfordNlpUtilGenerics_newArrayList();
    id<JavaUtilList> objects = EduStanfordNlpUtilGenerics_newArrayList();
    for (EduStanfordNlpTreesTypedDependency * __strong dep in list) {
      if (([((EduStanfordNlpTreesTypedDependency *) nil_chk(dep)) reln] == JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, NOMINAL_SUBJECT) || [dep reln] == JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, NOMINAL_PASSIVE_SUBJECT)) && [((EduStanfordNlpLingIndexedWord *) nil_chk([dep gov])) isEqual:modifier]) {
        hasSubjectDaughter = true;
        break;
      }
      if ([dep reln] == JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, AUX_MODIFIER) && [((EduStanfordNlpLingIndexedWord *) nil_chk([dep gov])) isEqual:modifier]) {
        hasAux = true;
      }
      if (([dep reln] == JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, NOMINAL_SUBJECT) || [dep reln] == JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, NOMINAL_PASSIVE_SUBJECT)) && [((EduStanfordNlpLingIndexedWord *) nil_chk([dep gov])) isEqual:head]) {
        [((id<JavaUtilList>) nil_chk(subjects)) addWithId:[dep dep]];
      }
      if ([dep reln] == JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, DIRECT_OBJECT) && [((EduStanfordNlpLingIndexedWord *) nil_chk([dep gov])) isEqual:head]) {
        [((id<JavaUtilList>) nil_chk(objects)) addWithId:[dep dep]];
      }
    }
    if (hasSubjectDaughter) {
      continue;
    }
    if (([((NSString *) nil_chk([((EduStanfordNlpLingIndexedWord *) nil_chk(modifier)) value])) equalsIgnoreCase:@"to"] && hasAux) || (![((NSString *) nil_chk([modifier value])) equalsIgnoreCase:@"to"] && !hasAux)) {
      continue;
    }
    if ([((id<JavaUtilList>) nil_chk(objects)) size] > 0) {
      for (EduStanfordNlpLingIndexedWord * __strong object in objects) {
        EduStanfordNlpTreesTypedDependency *newDep = new_EduStanfordNlpTreesTypedDependency_initWithEduStanfordNlpTreesGrammaticalRelation_withEduStanfordNlpLingIndexedWord_withEduStanfordNlpLingIndexedWord_(JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, NOMINAL_SUBJECT), modifier, object);
        [newDeps addWithId:newDep];
      }
    }
    else {
      for (EduStanfordNlpLingIndexedWord * __strong subject in nil_chk(subjects)) {
        EduStanfordNlpTreesTypedDependency *newDep = new_EduStanfordNlpTreesTypedDependency_initWithEduStanfordNlpTreesGrammaticalRelation_withEduStanfordNlpLingIndexedWord_withEduStanfordNlpLingIndexedWord_(JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, NOMINAL_SUBJECT), modifier, subject);
        [newDeps addWithId:newDep];
      }
    }
  }
  for (EduStanfordNlpTreesTypedDependency * __strong newDep in newDeps) {
    if (![list containsWithId:newDep]) {
      [((EduStanfordNlpTreesTypedDependency *) nil_chk(newDep)) setExtra];
      [list addWithId:newDep];
    }
  }
}

void EduStanfordNlpTreesEnglishGrammaticalStructure_correctSubjPassWithJavaUtilCollection_(id<JavaUtilCollection> list) {
  EduStanfordNlpTreesEnglishGrammaticalStructure_initialize();
  id<JavaUtilList> list_auxpass = new_JavaUtilArrayList_init();
  for (EduStanfordNlpTreesTypedDependency * __strong td in nil_chk(list)) {
    if ([((EduStanfordNlpTreesTypedDependency *) nil_chk(td)) reln] == JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, AUX_PASSIVE_MODIFIER)) {
      [list_auxpass addWithId:[td gov]];
    }
  }
  for (EduStanfordNlpTreesTypedDependency * __strong td in list) {
    if ([((EduStanfordNlpTreesTypedDependency *) nil_chk(td)) reln] == JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, NOMINAL_SUBJECT) && [list_auxpass containsWithId:[td gov]]) {
      [td setRelnWithEduStanfordNlpTreesGrammaticalRelation:JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, NOMINAL_PASSIVE_SUBJECT)];
    }
    if ([td reln] == JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, CLAUSAL_SUBJECT) && [list_auxpass containsWithId:[td gov]]) {
      [td setRelnWithEduStanfordNlpTreesGrammaticalRelation:JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, CLAUSAL_PASSIVE_SUBJECT)];
    }
  }
}

jboolean EduStanfordNlpTreesEnglishGrammaticalStructure_inConjDepsWithEduStanfordNlpTreesTypedDependency_withJavaUtilList_(EduStanfordNlpTreesTypedDependency *td, id<JavaUtilList> conjs) {
  EduStanfordNlpTreesEnglishGrammaticalStructure_initialize();
  for (EduStanfordNlpUtilTriple * __strong trip in nil_chk(conjs)) {
    if ([((EduStanfordNlpTreesTypedDependency *) nil_chk(td)) isEqual:[((EduStanfordNlpUtilTriple *) nil_chk(trip)) first]]) {
      return true;
    }
  }
  return false;
}

void EduStanfordNlpTreesEnglishGrammaticalStructure_collapsePrepAndPossWithJavaUtilCollection_(id<JavaUtilCollection> list) {
  EduStanfordNlpTreesEnglishGrammaticalStructure_initialize();
  id<JavaUtilCollection> newTypedDeps = new_JavaUtilArrayList_init();
  id<JavaUtilMap> map = EduStanfordNlpUtilGenerics_newHashMap();
  id<JavaUtilList> vmod = EduStanfordNlpUtilGenerics_newArrayList();
  for (EduStanfordNlpTreesTypedDependency * __strong typedDep in nil_chk(list)) {
    if (![((id<JavaUtilMap>) nil_chk(map)) containsKeyWithId:[((EduStanfordNlpTreesTypedDependency *) nil_chk(typedDep)) gov]]) {
      (void) [map putWithId:[typedDep gov] withId:new_JavaUtilTreeSet_init()];
    }
    [((id<JavaUtilSortedSet>) nil_chk([map getWithId:[typedDep gov]])) addWithId:typedDep];
    if ([typedDep reln] == JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, VERBAL_MODIFIER)) {
      jboolean foundAux = false;
      for (EduStanfordNlpTreesTypedDependency * __strong auxDep in list) {
        if ([((EduStanfordNlpTreesTypedDependency *) nil_chk(auxDep)) reln] != JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, AUX_MODIFIER)) {
          continue;
        }
        if (![((EduStanfordNlpLingIndexedWord *) nil_chk([auxDep gov])) isEqual:[typedDep dep]] || ![((NSString *) nil_chk([((EduStanfordNlpLingIndexedWord *) nil_chk([auxDep dep])) value])) equalsIgnoreCase:@"to"]) {
          continue;
        }
        foundAux = true;
        break;
      }
      if (!foundAux) {
        [((id<JavaUtilList>) nil_chk(vmod)) addWithId:[typedDep dep]];
      }
    }
  }
  for (EduStanfordNlpTreesTypedDependency * __strong td1 in list) {
    if ([((EduStanfordNlpTreesTypedDependency *) nil_chk(td1)) reln] != JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, PREPOSITIONAL_MODIFIER)) {
      continue;
    }
    EduStanfordNlpLingIndexedWord *td1Dep = [td1 dep];
    id<JavaUtilSortedSet> possibles = [((id<JavaUtilMap>) nil_chk(map)) getWithId:td1Dep];
    if (possibles == nil) {
      continue;
    }
    EduStanfordNlpUtilPair *prepDep = nil;
    EduStanfordNlpTreesTypedDependency *ccDep = nil;
    id<JavaUtilList> conjs = new_JavaUtilArrayList_init();
    id<JavaUtilSet> otherDtrs = new_JavaUtilTreeSet_init();
    jboolean samePrepositionInEachConjunct = true;
    jint conjIndex = -1;
    for (EduStanfordNlpTreesTypedDependency * __strong td2 in possibles) {
      if ([((EduStanfordNlpTreesTypedDependency *) nil_chk(td2)) reln] == JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, CONJUNCT)) {
        EduStanfordNlpLingIndexedWord *td2Dep = [td2 dep];
        NSString *td2DepPOS = [((EduStanfordNlpLingIndexedWord *) nil_chk(td2Dep)) tag];
        if ([((NSString *) nil_chk(td2DepPOS)) isEqual:@"IN"] || [td2DepPOS isEqual:@"TO"]) {
          samePrepositionInEachConjunct = (samePrepositionInEachConjunct && [((NSString *) nil_chk([td2Dep value])) isEqual:[((EduStanfordNlpLingIndexedWord *) nil_chk(td1Dep)) value]]);
          id<JavaUtilSet> possibles2 = [map getWithId:td2Dep];
          jboolean pobj = true;
          EduStanfordNlpTreesTypedDependency *prepOtherDep = nil;
          if (possibles2 != nil) {
            for (EduStanfordNlpTreesTypedDependency * __strong td3 in possibles2) {
              EduStanfordNlpLingIndexedWord *td3Dep = [((EduStanfordNlpTreesTypedDependency *) nil_chk(td3)) dep];
              NSString *td3DepPOS = [((EduStanfordNlpLingIndexedWord *) nil_chk(td3Dep)) tag];
              if (([td3 reln] == JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, PREPOSITIONAL_OBJECT) || [td3 reln] == JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, PREPOSITIONAL_COMPLEMENT)) && (!([((NSString *) nil_chk(td3DepPOS)) isEqual:@"IN"] || [td3DepPOS isEqual:@"TO"])) && prepOtherDep == nil) {
                prepOtherDep = td3;
                if ([td3 reln] == JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, PREPOSITIONAL_COMPLEMENT)) {
                  pobj = false;
                }
              }
              else {
                [otherDtrs addWithId:td3];
              }
            }
          }
          if (conjIndex < [td2Dep index]) {
            conjIndex = [td2Dep index];
          }
          [conjs addWithId:new_EduStanfordNlpUtilTriple_initWithId_withId_withId_(td2, prepOtherDep, JavaLangBoolean_valueOfWithBoolean_(pobj))];
        }
      }
    }
    if ([conjs isEmpty]) {
      continue;
    }
    NSString *td1DepPOS = [((EduStanfordNlpLingIndexedWord *) nil_chk(td1Dep)) tag];
    for (EduStanfordNlpTreesTypedDependency * __strong td2 in possibles) {
      if ([((EduStanfordNlpTreesTypedDependency *) nil_chk(td2)) reln] == JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, COORDINATION) && [((EduStanfordNlpLingIndexedWord *) nil_chk([td2 dep])) index] < conjIndex) {
        ccDep = td2;
      }
      else {
        EduStanfordNlpLingIndexedWord *td2Dep = [td2 dep];
        NSString *td2DepPOS = [((EduStanfordNlpLingIndexedWord *) nil_chk(td2Dep)) tag];
        if (([td2 reln] == JreLoadStatic(EduStanfordNlpTreesGrammaticalRelation, DEPENDENT) || [td2 reln] == JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, PREPOSITIONAL_OBJECT) || [td2 reln] == JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, PREPOSITIONAL_COMPLEMENT)) && ([((NSString *) nil_chk(td1DepPOS)) isEqual:@"IN"] || [td1DepPOS isEqual:@"TO"] || [td1DepPOS isEqual:@"VBG"]) && prepDep == nil && (!([((NSString *) nil_chk(td2DepPOS)) isEqual:@"RB"] || [td2DepPOS isEqual:@"IN"] || [td2DepPOS isEqual:@"TO"]))) {
          prepDep = new_EduStanfordNlpUtilPair_initWithId_withId_(td2, JavaLangBoolean_valueOfWithBoolean_([td2 reln] != JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, PREPOSITIONAL_COMPLEMENT)));
        }
        else if (!EduStanfordNlpTreesEnglishGrammaticalStructure_inConjDepsWithEduStanfordNlpTreesTypedDependency_withJavaUtilList_(td2, conjs)) {
          [otherDtrs addWithId:td2];
        }
      }
    }
    if (prepDep == nil || ccDep == nil) {
      continue;
    }
    if (EduStanfordNlpTreesEnglishGrammaticalStructure_DEBUG) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"!! Conj and prep case:"];
      [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:JreStrcat("$@", @"  td1 (prep): ", td1)];
      [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:JreStrcat("$@", @"  Kids of td1 are: ", possibles)];
      [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:JreStrcat("$@", @"  prepDep: ", prepDep)];
      [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:JreStrcat("$@", @"  ccDep: ", ccDep)];
      [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:JreStrcat("$@", @"  conjs: ", conjs)];
      [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:JreStrcat("$Z", @"  samePrepositionInEachConjunct: ", samePrepositionInEachConjunct)];
      [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:JreStrcat("$@", @"  otherDtrs: ", otherDtrs)];
    }
    if (samePrepositionInEachConjunct) {
      EduStanfordNlpTreesGrammaticalRelation *reln = EduStanfordNlpTreesEnglishGrammaticalStructure_determinePrepRelationWithJavaUtilMap_withJavaUtilList_withEduStanfordNlpTreesTypedDependency_withEduStanfordNlpTreesTypedDependency_withBoolean_(map, vmod, td1, td1, [((JavaLangBoolean *) nil_chk([prepDep second])) booleanValue]);
      EduStanfordNlpTreesTypedDependency *tdNew = new_EduStanfordNlpTreesTypedDependency_initWithEduStanfordNlpTreesGrammaticalRelation_withEduStanfordNlpLingIndexedWord_withEduStanfordNlpLingIndexedWord_(reln, [td1 gov], [((EduStanfordNlpTreesTypedDependency *) nil_chk([prepDep first])) dep]);
      [newTypedDeps addWithId:tdNew];
      if (EduStanfordNlpTreesEnglishGrammaticalStructure_DEBUG) {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$@", @"PrepPoss Conj branch (two parallel PPs) adding: ", tdNew)];
        [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:JreStrcat("$@$@$@", @"  removing: ", td1, @"  ", prepDep, @"  ", ccDep)];
      }
      [td1 setRelnWithEduStanfordNlpTreesGrammaticalRelation:JreLoadStatic(EduStanfordNlpTreesGrammaticalRelation, KILL)];
      [((EduStanfordNlpTreesTypedDependency *) nil_chk([prepDep first])) setRelnWithEduStanfordNlpTreesGrammaticalRelation:JreLoadStatic(EduStanfordNlpTreesGrammaticalRelation, KILL)];
      [ccDep setRelnWithEduStanfordNlpTreesGrammaticalRelation:JreLoadStatic(EduStanfordNlpTreesGrammaticalRelation, KILL)];
      for (EduStanfordNlpUtilTriple * __strong trip in conjs) {
        EduStanfordNlpTreesTypedDependency *conjDep = [((EduStanfordNlpUtilTriple *) nil_chk(trip)) first];
        EduStanfordNlpTreesTypedDependency *prepOtherDep = [trip second];
        if (prepOtherDep == nil) {
          if (EduStanfordNlpTreesEnglishGrammaticalStructure_DEBUG) {
            [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"  apparent misparse: same P twice with only one NP object (prepOtherDep is null)"];
            [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:JreStrcat("$@", @"  removing: ", conjDep)];
          }
          [ccDep setRelnWithEduStanfordNlpTreesGrammaticalRelation:JreLoadStatic(EduStanfordNlpTreesGrammaticalRelation, KILL)];
        }
        else {
          EduStanfordNlpTreesTypedDependency *tdNew2 = new_EduStanfordNlpTreesTypedDependency_initWithEduStanfordNlpTreesGrammaticalRelation_withEduStanfordNlpLingIndexedWord_withEduStanfordNlpLingIndexedWord_(EduStanfordNlpTreesEnglishGrammaticalStructure_conjValueWithNSString_([((EduStanfordNlpLingIndexedWord *) nil_chk([ccDep dep])) value]), [((EduStanfordNlpTreesTypedDependency *) nil_chk([prepDep first])) dep], [prepOtherDep dep]);
          [newTypedDeps addWithId:tdNew2];
          if (EduStanfordNlpTreesEnglishGrammaticalStructure_DEBUG) {
            [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$@", @"  adding: ", tdNew2)];
            [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:JreStrcat("$@$@", @"  removing: ", conjDep, @"  ", prepOtherDep)];
          }
          [prepOtherDep setRelnWithEduStanfordNlpTreesGrammaticalRelation:JreLoadStatic(EduStanfordNlpTreesGrammaticalRelation, KILL)];
        }
        [((EduStanfordNlpTreesTypedDependency *) nil_chk(conjDep)) setRelnWithEduStanfordNlpTreesGrammaticalRelation:JreLoadStatic(EduStanfordNlpTreesGrammaticalRelation, KILL)];
      }
      for (EduStanfordNlpTreesTypedDependency * __strong otd in otherDtrs) {
        if (EduStanfordNlpTreesEnglishGrammaticalStructure_DEBUG) {
          [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printWithNSString:JreStrcat("$@", @"Changed ", otd)];
        }
        [((EduStanfordNlpTreesTypedDependency *) nil_chk(otd)) setGovWithEduStanfordNlpLingIndexedWord:[td1 gov]];
        if (EduStanfordNlpTreesEnglishGrammaticalStructure_DEBUG) {
          [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$@", @" to ", otd)];
        }
      }
      if (EduStanfordNlpTreesEnglishGrammaticalStructure_DEBUG) {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$@$@", @"td1: ", td1, @"; possibles: ", possibles)];
      }
      for (EduStanfordNlpTreesTypedDependency * __strong td2 in possibles) {
        if ([((EduStanfordNlpTreesTypedDependency *) nil_chk(td2)) reln] != JreLoadStatic(EduStanfordNlpTreesGrammaticalRelation, KILL) && [((EduStanfordNlpLingIndexedWord *) nil_chk([td2 gov])) isEqual:[td1 dep]]) {
          if (EduStanfordNlpTreesEnglishGrammaticalStructure_DEBUG) {
            [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$@$@$", @"Changing ", td2, @" to have governor of ", td1, @" [a]")];
          }
          [td2 setGovWithEduStanfordNlpLingIndexedWord:[td1 gov]];
        }
      }
      continue;
    }
    for (EduStanfordNlpUtilTriple * __strong trip in conjs) {
      if ([((EduStanfordNlpUtilTriple *) nil_chk(trip)) first] != nil && [trip second] == nil) {
        [trip setSecondWithId:new_EduStanfordNlpTreesTypedDependency_initWithEduStanfordNlpTreesGrammaticalRelation_withEduStanfordNlpLingIndexedWord_withEduStanfordNlpLingIndexedWord_([((EduStanfordNlpTreesTypedDependency *) nil_chk([prepDep first])) reln], [((EduStanfordNlpTreesTypedDependency *) nil_chk([trip first])) dep], [((EduStanfordNlpTreesTypedDependency *) nil_chk([prepDep first])) dep])];
        [trip setThirdWithId:[prepDep second]];
      }
    }
    EduStanfordNlpLingIndexedWord *conjHead = [td1 gov];
    for (EduStanfordNlpTreesTypedDependency * __strong td3 in list) {
      if ([((EduStanfordNlpLingIndexedWord *) nil_chk([((EduStanfordNlpTreesTypedDependency *) nil_chk(td3)) dep])) isEqual:[td1 gov]] && [((EduStanfordNlpTreesGrammaticalRelation *) nil_chk([td3 reln])) isEqual:JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, CONJUNCT)]) {
        conjHead = [td3 gov];
      }
    }
    EduStanfordNlpTreesGrammaticalRelation *reln = EduStanfordNlpTreesEnglishGrammaticalStructure_determinePrepRelationWithJavaUtilMap_withJavaUtilList_withEduStanfordNlpTreesTypedDependency_withEduStanfordNlpTreesTypedDependency_withBoolean_(map, vmod, td1, td1, [((JavaLangBoolean *) nil_chk([prepDep second])) booleanValue]);
    EduStanfordNlpTreesTypedDependency *tdNew = new_EduStanfordNlpTreesTypedDependency_initWithEduStanfordNlpTreesGrammaticalRelation_withEduStanfordNlpLingIndexedWord_withEduStanfordNlpLingIndexedWord_(reln, [td1 gov], [((EduStanfordNlpTreesTypedDependency *) nil_chk([prepDep first])) dep]);
    [newTypedDeps addWithId:tdNew];
    if (EduStanfordNlpTreesEnglishGrammaticalStructure_DEBUG) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$@", @"ConjPP (different preps) adding: ", tdNew)];
      [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:JreStrcat("$@$@$@", @"  deleting: ", td1, @"  ", [prepDep first], @"  ", ccDep)];
    }
    [td1 setRelnWithEduStanfordNlpTreesGrammaticalRelation:JreLoadStatic(EduStanfordNlpTreesGrammaticalRelation, KILL)];
    [((EduStanfordNlpTreesTypedDependency *) nil_chk([prepDep first])) setRelnWithEduStanfordNlpTreesGrammaticalRelation:JreLoadStatic(EduStanfordNlpTreesGrammaticalRelation, KILL)];
    [ccDep setRelnWithEduStanfordNlpTreesGrammaticalRelation:JreLoadStatic(EduStanfordNlpTreesGrammaticalRelation, KILL)];
    jint copyNumber = 1;
    for (EduStanfordNlpUtilTriple * __strong trip in conjs) {
      EduStanfordNlpTreesTypedDependency *conjDep = [((EduStanfordNlpUtilTriple *) nil_chk(trip)) first];
      EduStanfordNlpTreesTypedDependency *prepOtherDep = [trip second];
      jboolean pobj = [((JavaLangBoolean *) nil_chk([trip third])) booleanValue];
      EduStanfordNlpLingIndexedWord *label = [((EduStanfordNlpLingIndexedWord *) nil_chk([td1 gov])) makeSoftCopyWithInt:copyNumber];
      copyNumber++;
      EduStanfordNlpTreesTypedDependency *tdNew2 = new_EduStanfordNlpTreesTypedDependency_initWithEduStanfordNlpTreesGrammaticalRelation_withEduStanfordNlpLingIndexedWord_withEduStanfordNlpLingIndexedWord_(EduStanfordNlpTreesEnglishGrammaticalStructure_conjValueWithNSString_([((EduStanfordNlpLingIndexedWord *) nil_chk([ccDep dep])) value]), [td1 gov], label);
      [newTypedDeps addWithId:tdNew2];
      EduStanfordNlpTreesTypedDependency *tdNew3;
      EduStanfordNlpTreesGrammaticalRelation *reln2 = EduStanfordNlpTreesEnglishGrammaticalStructure_determinePrepRelationWithJavaUtilMap_withJavaUtilList_withEduStanfordNlpTreesTypedDependency_withEduStanfordNlpTreesTypedDependency_withBoolean_(map, vmod, conjDep, td1, pobj);
      tdNew3 = new_EduStanfordNlpTreesTypedDependency_initWithEduStanfordNlpTreesGrammaticalRelation_withEduStanfordNlpLingIndexedWord_withEduStanfordNlpLingIndexedWord_(reln2, label, [((EduStanfordNlpTreesTypedDependency *) nil_chk(prepOtherDep)) dep]);
      [newTypedDeps addWithId:tdNew3];
      if (EduStanfordNlpTreesEnglishGrammaticalStructure_DEBUG) {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$@$@", @"  adding: ", tdNew2, @"  ", tdNew3)];
        [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:JreStrcat("$@$@", @"  deleting: ", conjDep, @"  ", prepOtherDep)];
      }
      [((EduStanfordNlpTreesTypedDependency *) nil_chk(conjDep)) setRelnWithEduStanfordNlpTreesGrammaticalRelation:JreLoadStatic(EduStanfordNlpTreesGrammaticalRelation, KILL)];
      [prepOtherDep setRelnWithEduStanfordNlpTreesGrammaticalRelation:JreLoadStatic(EduStanfordNlpTreesGrammaticalRelation, KILL)];
      for (EduStanfordNlpTreesTypedDependency * __strong otd in otherDtrs) {
        if ([((NSString *) nil_chk([((EduStanfordNlpLingIndexedWord *) nil_chk([((EduStanfordNlpTreesTypedDependency *) nil_chk(otd)) dep])) tag])) isEqual:@"IN"]) {
          [otd setRelnWithEduStanfordNlpTreesGrammaticalRelation:JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, PREPOSITIONAL_MODIFIER)];
        }
        [otd setGovWithEduStanfordNlpLingIndexedWord:[td1 gov]];
      }
    }
    for (EduStanfordNlpTreesTypedDependency * __strong td2 in possibles) {
      if ([((EduStanfordNlpTreesTypedDependency *) nil_chk(td2)) reln] != JreLoadStatic(EduStanfordNlpTreesGrammaticalRelation, KILL)) {
        if (EduStanfordNlpTreesEnglishGrammaticalStructure_DEBUG) {
          [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$@$@$", @"Changing ", td2, @" to have governor of ", td1, @" [b]")];
        }
        [td2 setGovWithEduStanfordNlpLingIndexedWord:[td1 gov]];
      }
    }
  }
  for (EduStanfordNlpTreesTypedDependency * __strong td1 in list) {
    if ([((EduStanfordNlpTreesTypedDependency *) nil_chk(td1)) reln] == JreLoadStatic(EduStanfordNlpTreesGrammaticalRelation, KILL)) {
      continue;
    }
    EduStanfordNlpLingIndexedWord *td1Dep = [td1 dep];
    NSString *td1DepPOS = [((EduStanfordNlpLingIndexedWord *) nil_chk(td1Dep)) tag];
    id<JavaUtilSet> possibles = [((id<JavaUtilMap>) nil_chk(map)) getWithId:td1Dep];
    if (possibles != nil && ([td1 reln] == JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, PREPOSITIONAL_MODIFIER) || [td1 reln] == JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, POSSESSION_MODIFIER) || [td1 reln] == JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, CONJUNCT))) {
      jboolean pobj = true;
      for (EduStanfordNlpTreesTypedDependency * __strong td2 in possibles) {
        if ([((EduStanfordNlpTreesTypedDependency *) nil_chk(td2)) reln] != JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, COORDINATION) && [td2 reln] != JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, CONJUNCT)) {
          EduStanfordNlpLingIndexedWord *td2Dep = [td2 dep];
          NSString *td2DepPOS = [((EduStanfordNlpLingIndexedWord *) nil_chk(td2Dep)) tag];
          if (([td1 reln] == JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, POSSESSION_MODIFIER) || [td1 reln] == JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, CONJUNCT))) {
            if ([td2 reln] == JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, POSSESSIVE_MODIFIER)) {
              if (![map containsKeyWithId:td2Dep]) {
                [td2 setRelnWithEduStanfordNlpTreesGrammaticalRelation:JreLoadStatic(EduStanfordNlpTreesGrammaticalRelation, KILL)];
              }
            }
          }
          else if (([td2 reln] == JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, PREPOSITIONAL_OBJECT) || [td2 reln] == JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, PREPOSITIONAL_COMPLEMENT)) && ([((NSString *) nil_chk(td1DepPOS)) isEqual:@"IN"] || [td1DepPOS isEqual:@"TO"] || [td1DepPOS isEqual:@"VBG"]) && (!([((NSString *) nil_chk(td2DepPOS)) isEqual:@"RB"] || [td2DepPOS isEqual:@"IN"] || [td2DepPOS isEqual:@"TO"])) && !EduStanfordNlpTreesEnglishGrammaticalStructure_isConjWithNoPrepWithEduStanfordNlpLingIndexedWord_withJavaUtilCollection_([td2 gov], possibles)) {
            if (EduStanfordNlpTreesEnglishGrammaticalStructure_DEBUG) {
              [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$@$@", @"(Single prep/poss base case collapsing ", td1, @" and ", td2)];
            }
            if ([td2 reln] == JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, PREPOSITIONAL_COMPLEMENT)) {
              pobj = false;
            }
            EduStanfordNlpTreesGrammaticalRelation *reln = EduStanfordNlpTreesEnglishGrammaticalStructure_determinePrepRelationWithJavaUtilMap_withJavaUtilList_withEduStanfordNlpTreesTypedDependency_withEduStanfordNlpTreesTypedDependency_withBoolean_(map, vmod, td1, td1, pobj);
            EduStanfordNlpTreesTypedDependency *td3 = new_EduStanfordNlpTreesTypedDependency_initWithEduStanfordNlpTreesGrammaticalRelation_withEduStanfordNlpLingIndexedWord_withEduStanfordNlpLingIndexedWord_(reln, [td1 gov], [td2 dep]);
            if (EduStanfordNlpTreesEnglishGrammaticalStructure_DEBUG) {
              [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$@$@C@", @"PP adding: ", td3, @" deleting: ", td1, ' ', td2)];
            }
            [((id<JavaUtilSortedSet>) nil_chk([map getWithId:[td3 gov]])) addWithId:td3];
            [newTypedDeps addWithId:td3];
            [td1 setRelnWithEduStanfordNlpTreesGrammaticalRelation:JreLoadStatic(EduStanfordNlpTreesGrammaticalRelation, KILL)];
            [td2 setRelnWithEduStanfordNlpTreesGrammaticalRelation:JreLoadStatic(EduStanfordNlpTreesGrammaticalRelation, KILL)];
          }
        }
      }
    }
    if (possibles != nil && [td1 reln] == JreLoadStatic(EduStanfordNlpTreesGrammaticalRelation, KILL)) {
      for (EduStanfordNlpTreesTypedDependency * __strong td2 in possibles) {
        if ([((EduStanfordNlpTreesTypedDependency *) nil_chk(td2)) reln] != JreLoadStatic(EduStanfordNlpTreesGrammaticalRelation, KILL)) {
          if (EduStanfordNlpTreesEnglishGrammaticalStructure_DEBUG) {
            [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$@$@$", @"Changing ", td2, @" to have governor of ", td1, @" [c]")];
          }
          [td2 setGovWithEduStanfordNlpLingIndexedWord:[td1 gov]];
        }
      }
    }
  }
  for (id<JavaUtilIterator> iter = [list iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) {
    EduStanfordNlpTreesTypedDependency *td = [iter next];
    if ([((EduStanfordNlpTreesTypedDependency *) nil_chk(td)) reln] == JreLoadStatic(EduStanfordNlpTreesGrammaticalRelation, KILL)) {
      if (EduStanfordNlpTreesEnglishGrammaticalStructure_DEBUG) {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$@", @"Removing dep killed in poss/prep (conj) collapse: ", td)];
      }
      [iter remove];
    }
  }
  [list addAllWithJavaUtilCollection:newTypedDeps];
}

EduStanfordNlpTreesGrammaticalRelation *EduStanfordNlpTreesEnglishGrammaticalStructure_determinePrepRelationWithJavaUtilMap_withJavaUtilList_withEduStanfordNlpTreesTypedDependency_withEduStanfordNlpTreesTypedDependency_withBoolean_(id<JavaUtilMap> map, id<JavaUtilList> vmod, EduStanfordNlpTreesTypedDependency *pc, EduStanfordNlpTreesTypedDependency *topPrep, jboolean pobj) {
  EduStanfordNlpTreesEnglishGrammaticalStructure_initialize();
  jboolean agent = false;
  NSString *preposition = [((NSString *) nil_chk([((EduStanfordNlpLingIndexedWord *) nil_chk([((EduStanfordNlpTreesTypedDependency *) nil_chk(pc)) dep])) value])) lowercaseString];
  if ([((NSString *) nil_chk(preposition)) isEqual:@"by"]) {
    id<JavaUtilSet> aux_pass_poss = [((id<JavaUtilMap>) nil_chk(map)) getWithId:[((EduStanfordNlpTreesTypedDependency *) nil_chk(topPrep)) gov]];
    if (aux_pass_poss != nil) {
      for (EduStanfordNlpTreesTypedDependency * __strong td_pass in aux_pass_poss) {
        if ([((EduStanfordNlpTreesTypedDependency *) nil_chk(td_pass)) reln] == JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, AUX_PASSIVE_MODIFIER)) {
          agent = true;
        }
      }
    }
    if (![((id<JavaUtilList>) nil_chk(vmod)) isEmpty] && [vmod containsWithId:[topPrep gov]]) {
      agent = true;
    }
  }
  EduStanfordNlpTreesGrammaticalRelation *reln;
  if (agent) {
    reln = JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, AGENT);
  }
  else {
    if (pobj) {
      reln = EduStanfordNlpTreesEnglishGrammaticalRelations_getPrepWithNSString_(preposition);
    }
    else {
      reln = EduStanfordNlpTreesEnglishGrammaticalRelations_getPrepCWithNSString_(preposition);
    }
  }
  return reln;
}

jboolean EduStanfordNlpTreesEnglishGrammaticalStructure_isConjWithNoPrepWithEduStanfordNlpLingIndexedWord_withJavaUtilCollection_(EduStanfordNlpLingIndexedWord *node, id<JavaUtilCollection> list) {
  EduStanfordNlpTreesEnglishGrammaticalStructure_initialize();
  for (EduStanfordNlpTreesTypedDependency * __strong td in nil_chk(list)) {
    if ([((EduStanfordNlpLingIndexedWord *) nil_chk([((EduStanfordNlpTreesTypedDependency *) nil_chk(td)) gov])) isEqual:node] && [td reln] == JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, CONJUNCT)) {
      NSString *tdDepPOS = [((EduStanfordNlpLingIndexedWord *) nil_chk([td dep])) tag];
      if (!([((NSString *) nil_chk(tdDepPOS)) isEqual:@"IN"] || [tdDepPOS isEqual:@"TO"])) {
        return true;
      }
    }
  }
  return false;
}

void EduStanfordNlpTreesEnglishGrammaticalStructure_collapse2WPWithJavaUtilCollection_(id<JavaUtilCollection> list) {
  EduStanfordNlpTreesEnglishGrammaticalStructure_initialize();
  id<JavaUtilCollection> newTypedDeps = new_JavaUtilArrayList_init();
  {
    IOSObjectArray *a__ = EduStanfordNlpTreesEnglishGrammaticalStructure_MULTIWORD_PREPS;
    IOSObjectArray * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    IOSObjectArray * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      IOSObjectArray *mwp = *b__++;
      EduStanfordNlpTreesEnglishGrammaticalStructure_collapseMultiWordPrepWithJavaUtilCollection_withJavaUtilCollection_withNSString_withNSString_withNSString_withNSString_(list, newTypedDeps, IOSObjectArray_Get(nil_chk(mwp), 0), IOSObjectArray_Get(mwp, 1), IOSObjectArray_Get(mwp, 0), IOSObjectArray_Get(mwp, 1));
      EduStanfordNlpTreesEnglishGrammaticalStructure_collapseMultiWordPrepWithJavaUtilCollection_withJavaUtilCollection_withNSString_withNSString_withNSString_withNSString_(list, newTypedDeps, IOSObjectArray_Get(mwp, 0), IOSObjectArray_Get(mwp, 1), IOSObjectArray_Get(mwp, 1), IOSObjectArray_Get(mwp, 0));
    }
  }
}

void EduStanfordNlpTreesEnglishGrammaticalStructure_collapseMultiWordPrepWithJavaUtilCollection_withJavaUtilCollection_withNSString_withNSString_withNSString_withNSString_(id<JavaUtilCollection> list, id<JavaUtilCollection> newTypedDeps, NSString *str_mwp0, NSString *str_mwp1, NSString *w_mwp0, NSString *w_mwp1) {
  EduStanfordNlpTreesEnglishGrammaticalStructure_initialize();
  EduStanfordNlpLingIndexedWord *mwp0 = nil;
  EduStanfordNlpLingIndexedWord *mwp1 = nil;
  EduStanfordNlpTreesTypedDependency *dep = nil;
  for (EduStanfordNlpTreesTypedDependency * __strong td in nil_chk(list)) {
    if ([((NSString *) nil_chk([((EduStanfordNlpLingIndexedWord *) nil_chk([((EduStanfordNlpTreesTypedDependency *) nil_chk(td)) gov])) value])) equalsIgnoreCase:w_mwp0] && [((NSString *) nil_chk([((EduStanfordNlpLingIndexedWord *) nil_chk([td dep])) value])) equalsIgnoreCase:w_mwp1] && JavaLangMath_absWithInt_([((EduStanfordNlpLingIndexedWord *) nil_chk([td gov])) index] - [((EduStanfordNlpLingIndexedWord *) nil_chk([td dep])) index]) == 1) {
      mwp0 = [td gov];
      mwp1 = [td dep];
      dep = td;
    }
  }
  if (mwp0 == nil) {
    return;
  }
  EduStanfordNlpLingIndexedWord *governor = nil;
  EduStanfordNlpTreesTypedDependency *prep = nil;
  for (EduStanfordNlpTreesTypedDependency * __strong td1 in list) {
    if (([((EduStanfordNlpTreesTypedDependency *) nil_chk(td1)) reln] == JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, PREPOSITIONAL_MODIFIER) || [td1 reln] == JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, ADVERBIAL_MODIFIER) || [td1 reln] == JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, ADJECTIVAL_MODIFIER) || [td1 reln] == JreLoadStatic(EduStanfordNlpTreesGrammaticalRelation, DEPENDENT) || [td1 reln] == JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, MULTI_WORD_EXPRESSION)) && [((EduStanfordNlpLingIndexedWord *) nil_chk([td1 dep])) isEqual:mwp0]) {
      prep = td1;
      governor = [prep gov];
    }
  }
  if (prep == nil) {
    return;
  }
  EduStanfordNlpTreesTypedDependency *pobj = nil;
  EduStanfordNlpTreesTypedDependency *newtd = nil;
  for (EduStanfordNlpTreesTypedDependency * __strong td2 in list) {
    if (([((EduStanfordNlpTreesTypedDependency *) nil_chk(td2)) reln] == JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, PREPOSITIONAL_OBJECT) || [td2 reln] == JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, PREPOSITIONAL_COMPLEMENT)) && ([((EduStanfordNlpLingIndexedWord *) nil_chk([td2 gov])) isEqual:mwp1] || [((EduStanfordNlpLingIndexedWord *) nil_chk([td2 gov])) isEqual:mwp0])) {
      if (pobj == nil || [((EduStanfordNlpLingIndexedWord *) nil_chk([pobj dep])) index] > [((EduStanfordNlpLingIndexedWord *) nil_chk([td2 dep])) index]) {
        pobj = td2;
        EduStanfordNlpTreesGrammaticalRelation *gr;
        if ([td2 reln] == JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, PREPOSITIONAL_COMPLEMENT)) {
          gr = EduStanfordNlpTreesEnglishGrammaticalRelations_getPrepCWithNSString_(JreStrcat("$C$", str_mwp0, '_', str_mwp1));
        }
        else {
          gr = EduStanfordNlpTreesEnglishGrammaticalRelations_getPrepWithNSString_(JreStrcat("$C$", str_mwp0, '_', str_mwp1));
        }
        if (governor != nil) {
          newtd = new_EduStanfordNlpTreesTypedDependency_initWithEduStanfordNlpTreesGrammaticalRelation_withEduStanfordNlpLingIndexedWord_withEduStanfordNlpLingIndexedWord_(gr, governor, [pobj dep]);
        }
      }
    }
  }
  if (pobj == nil || newtd == nil) {
    return;
  }
  if (EduStanfordNlpTreesEnglishGrammaticalStructure_DEBUG) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$@$@$@", @"Removing ", prep, @", ", dep, @", and ", pobj)];
    [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:JreStrcat("$@", @"  and adding ", newtd)];
  }
  [prep setRelnWithEduStanfordNlpTreesGrammaticalRelation:JreLoadStatic(EduStanfordNlpTreesGrammaticalRelation, KILL)];
  [((EduStanfordNlpTreesTypedDependency *) nil_chk(dep)) setRelnWithEduStanfordNlpTreesGrammaticalRelation:JreLoadStatic(EduStanfordNlpTreesGrammaticalRelation, KILL)];
  [pobj setRelnWithEduStanfordNlpTreesGrammaticalRelation:JreLoadStatic(EduStanfordNlpTreesGrammaticalRelation, KILL)];
  [((id<JavaUtilCollection>) nil_chk(newTypedDeps)) addWithId:newtd];
  for (EduStanfordNlpTreesTypedDependency * __strong td1 in list) {
    if ([((EduStanfordNlpTreesTypedDependency *) nil_chk(td1)) reln] != JreLoadStatic(EduStanfordNlpTreesGrammaticalRelation, KILL)) {
      if ([((EduStanfordNlpLingIndexedWord *) nil_chk([td1 gov])) isEqual:mwp0] || [((EduStanfordNlpLingIndexedWord *) nil_chk([td1 gov])) isEqual:mwp1]) {
        if ([td1 reln] == JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, TEMPORAL_MODIFIER)) {
          [td1 setGovWithEduStanfordNlpLingIndexedWord:[pobj dep]];
        }
        else {
          [td1 setGovWithEduStanfordNlpLingIndexedWord:governor];
        }
      }
      if (![newTypedDeps containsWithId:td1]) {
        [newTypedDeps addWithId:td1];
      }
    }
  }
  [list clear];
  [list addAllWithJavaUtilCollection:newTypedDeps];
}

void EduStanfordNlpTreesEnglishGrammaticalStructure_collapse2WPbisWithJavaUtilCollection_(id<JavaUtilCollection> list) {
  EduStanfordNlpTreesEnglishGrammaticalStructure_initialize();
  id<JavaUtilCollection> newTypedDeps = new_JavaUtilArrayList_init();
  {
    IOSObjectArray *a__ = EduStanfordNlpTreesEnglishGrammaticalStructure_MULTIWORD_PREPS;
    IOSObjectArray * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    IOSObjectArray * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      IOSObjectArray *mwp = *b__++;
      [newTypedDeps clear];
      EduStanfordNlpLingIndexedWord *mwp0 = nil;
      EduStanfordNlpLingIndexedWord *mwp1 = nil;
      EduStanfordNlpLingIndexedWord *governor = nil;
      EduStanfordNlpTreesTypedDependency *prep = nil;
      EduStanfordNlpTreesTypedDependency *dep = nil;
      EduStanfordNlpTreesTypedDependency *pobj = nil;
      EduStanfordNlpTreesTypedDependency *newtd = nil;
      for (EduStanfordNlpTreesTypedDependency * __strong td in nil_chk(list)) {
        if ([((NSString *) nil_chk([((EduStanfordNlpLingIndexedWord *) nil_chk([((EduStanfordNlpTreesTypedDependency *) nil_chk(td)) dep])) value])) equalsIgnoreCase:IOSObjectArray_Get(nil_chk(mwp), 0)] && ([td reln] == JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, PHRASAL_VERB_PARTICLE) || [td reln] == JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, ADVERBIAL_MODIFIER) || [td reln] == JreLoadStatic(EduStanfordNlpTreesGrammaticalRelation, DEPENDENT) || [td reln] == JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, MULTI_WORD_EXPRESSION))) {
          governor = [td gov];
          mwp0 = [td dep];
          dep = td;
        }
      }
      if (mwp0 == nil || governor == nil) {
        continue;
      }
      for (EduStanfordNlpTreesTypedDependency * __strong td1 in list) {
        if ([((EduStanfordNlpTreesTypedDependency *) nil_chk(td1)) reln] == JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, PREPOSITIONAL_MODIFIER) && [((NSString *) nil_chk([((EduStanfordNlpLingIndexedWord *) nil_chk([td1 dep])) value])) equalsIgnoreCase:IOSObjectArray_Get(nil_chk(mwp), 1)] && JavaLangMath_absWithInt_([((EduStanfordNlpLingIndexedWord *) nil_chk([td1 dep])) index] - [mwp0 index]) == 1 && [((EduStanfordNlpLingIndexedWord *) nil_chk([td1 gov])) isEqual:governor]) {
          mwp1 = [td1 dep];
          prep = td1;
        }
      }
      if (mwp1 == nil) {
        continue;
      }
      for (EduStanfordNlpTreesTypedDependency * __strong td2 in list) {
        if ([((EduStanfordNlpTreesTypedDependency *) nil_chk(td2)) reln] == JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, PREPOSITIONAL_OBJECT) && [((EduStanfordNlpLingIndexedWord *) nil_chk([td2 gov])) isEqual:mwp1]) {
          pobj = td2;
          EduStanfordNlpTreesGrammaticalRelation *gr = EduStanfordNlpTreesEnglishGrammaticalRelations_getPrepWithNSString_(JreStrcat("$C$", IOSObjectArray_Get(nil_chk(mwp), 0), '_', IOSObjectArray_Get(mwp, 1)));
          newtd = new_EduStanfordNlpTreesTypedDependency_initWithEduStanfordNlpTreesGrammaticalRelation_withEduStanfordNlpLingIndexedWord_withEduStanfordNlpLingIndexedWord_(gr, governor, [pobj dep]);
        }
        if ([td2 reln] == JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, PREPOSITIONAL_COMPLEMENT) && [((EduStanfordNlpLingIndexedWord *) nil_chk([td2 gov])) isEqual:mwp1]) {
          pobj = td2;
          EduStanfordNlpTreesGrammaticalRelation *gr = EduStanfordNlpTreesEnglishGrammaticalRelations_getPrepCWithNSString_(JreStrcat("$C$", IOSObjectArray_Get(nil_chk(mwp), 0), '_', IOSObjectArray_Get(mwp, 1)));
          newtd = new_EduStanfordNlpTreesTypedDependency_initWithEduStanfordNlpTreesGrammaticalRelation_withEduStanfordNlpLingIndexedWord_withEduStanfordNlpLingIndexedWord_(gr, governor, [pobj dep]);
        }
      }
      if (pobj == nil) {
        return;
      }
      [((EduStanfordNlpTreesTypedDependency *) nil_chk(prep)) setRelnWithEduStanfordNlpTreesGrammaticalRelation:JreLoadStatic(EduStanfordNlpTreesGrammaticalRelation, KILL)];
      [((EduStanfordNlpTreesTypedDependency *) nil_chk(dep)) setRelnWithEduStanfordNlpTreesGrammaticalRelation:JreLoadStatic(EduStanfordNlpTreesGrammaticalRelation, KILL)];
      [pobj setRelnWithEduStanfordNlpTreesGrammaticalRelation:JreLoadStatic(EduStanfordNlpTreesGrammaticalRelation, KILL)];
      [newTypedDeps addWithId:newtd];
      for (EduStanfordNlpTreesTypedDependency * __strong td1 in list) {
        if ([((EduStanfordNlpTreesTypedDependency *) nil_chk(td1)) reln] != JreLoadStatic(EduStanfordNlpTreesGrammaticalRelation, KILL)) {
          if ([((EduStanfordNlpLingIndexedWord *) nil_chk([td1 gov])) isEqual:mwp0] || [((EduStanfordNlpLingIndexedWord *) nil_chk([td1 gov])) isEqual:mwp1]) {
            [td1 setGovWithEduStanfordNlpLingIndexedWord:governor];
          }
          if (![newTypedDeps containsWithId:td1]) {
            [newTypedDeps addWithId:td1];
          }
        }
      }
      [list clear];
      [list addAllWithJavaUtilCollection:newTypedDeps];
    }
  }
}

void EduStanfordNlpTreesEnglishGrammaticalStructure_collapse3WPWithJavaUtilCollection_(id<JavaUtilCollection> list) {
  EduStanfordNlpTreesEnglishGrammaticalStructure_initialize();
  id<JavaUtilCollection> newTypedDeps = new_JavaUtilArrayList_init();
  {
    IOSObjectArray *a__ = EduStanfordNlpTreesEnglishGrammaticalStructure_THREEWORD_PREPS;
    IOSObjectArray * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    IOSObjectArray * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      IOSObjectArray *mwp = *b__++;
      [newTypedDeps clear];
      EduStanfordNlpLingIndexedWord *mwp0 = nil;
      EduStanfordNlpLingIndexedWord *mwp1 = nil;
      EduStanfordNlpLingIndexedWord *mwp2 = nil;
      EduStanfordNlpTreesTypedDependency *dep1 = nil;
      EduStanfordNlpTreesTypedDependency *dep2 = nil;
      for (EduStanfordNlpTreesTypedDependency * __strong td in nil_chk(list)) {
        if ([((NSString *) nil_chk([((EduStanfordNlpLingIndexedWord *) nil_chk([((EduStanfordNlpTreesTypedDependency *) nil_chk(td)) gov])) value])) equalsIgnoreCase:IOSObjectArray_Get(nil_chk(mwp), 0)] && [((NSString *) nil_chk([((EduStanfordNlpLingIndexedWord *) nil_chk([td dep])) value])) equalsIgnoreCase:IOSObjectArray_Get(mwp, 1)] && JavaLangMath_absWithInt_([((EduStanfordNlpLingIndexedWord *) nil_chk([td gov])) index] - [((EduStanfordNlpLingIndexedWord *) nil_chk([td dep])) index]) == 1) {
          mwp0 = [td gov];
          mwp1 = [td dep];
          dep1 = td;
        }
      }
      for (EduStanfordNlpTreesTypedDependency * __strong td in list) {
        if ([((EduStanfordNlpLingIndexedWord *) nil_chk([((EduStanfordNlpTreesTypedDependency *) nil_chk(td)) gov])) isEqual:mwp1] && [((NSString *) nil_chk([((EduStanfordNlpLingIndexedWord *) nil_chk([td dep])) value])) equalsIgnoreCase:IOSObjectArray_Get(nil_chk(mwp), 2)] && JavaLangMath_absWithInt_([((EduStanfordNlpLingIndexedWord *) nil_chk([td gov])) index] - [((EduStanfordNlpLingIndexedWord *) nil_chk([td dep])) index]) == 1) {
          mwp2 = [td dep];
          dep2 = td;
        }
      }
      if (dep1 != nil && dep2 != nil) {
        EduStanfordNlpLingIndexedWord *governor = nil;
        EduStanfordNlpTreesTypedDependency *prep = nil;
        for (EduStanfordNlpTreesTypedDependency * __strong td1 in list) {
          if ([((EduStanfordNlpTreesTypedDependency *) nil_chk(td1)) reln] == JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, PREPOSITIONAL_MODIFIER) && [((EduStanfordNlpLingIndexedWord *) nil_chk([td1 dep])) isEqual:mwp0]) {
            prep = td1;
            governor = [prep gov];
          }
        }
        EduStanfordNlpTreesTypedDependency *pobj = nil;
        EduStanfordNlpTreesTypedDependency *newtd = nil;
        for (EduStanfordNlpTreesTypedDependency * __strong td2 in list) {
          if ([((EduStanfordNlpTreesTypedDependency *) nil_chk(td2)) reln] == JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, PREPOSITIONAL_OBJECT) && [((EduStanfordNlpLingIndexedWord *) nil_chk([td2 gov])) isEqual:mwp2]) {
            pobj = td2;
            EduStanfordNlpTreesGrammaticalRelation *gr = EduStanfordNlpTreesEnglishGrammaticalRelations_getPrepWithNSString_(JreStrcat("$C$C$", IOSObjectArray_Get(nil_chk(mwp), 0), '_', IOSObjectArray_Get(mwp, 1), '_', IOSObjectArray_Get(mwp, 2)));
            if (governor != nil) {
              newtd = new_EduStanfordNlpTreesTypedDependency_initWithEduStanfordNlpTreesGrammaticalRelation_withEduStanfordNlpLingIndexedWord_withEduStanfordNlpLingIndexedWord_(gr, governor, [pobj dep]);
            }
          }
          if ([td2 reln] == JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, PREPOSITIONAL_COMPLEMENT) && [((EduStanfordNlpLingIndexedWord *) nil_chk([td2 gov])) isEqual:mwp2]) {
            pobj = td2;
            EduStanfordNlpTreesGrammaticalRelation *gr = EduStanfordNlpTreesEnglishGrammaticalRelations_getPrepCWithNSString_(JreStrcat("$C$C$", IOSObjectArray_Get(nil_chk(mwp), 0), '_', IOSObjectArray_Get(mwp, 1), '_', IOSObjectArray_Get(mwp, 2)));
            if (governor != nil) {
              newtd = new_EduStanfordNlpTreesTypedDependency_initWithEduStanfordNlpTreesGrammaticalRelation_withEduStanfordNlpLingIndexedWord_withEduStanfordNlpLingIndexedWord_(gr, governor, [pobj dep]);
            }
          }
        }
        if (prep != nil && pobj != nil && newtd != nil) {
          [prep setRelnWithEduStanfordNlpTreesGrammaticalRelation:JreLoadStatic(EduStanfordNlpTreesGrammaticalRelation, KILL)];
          [dep1 setRelnWithEduStanfordNlpTreesGrammaticalRelation:JreLoadStatic(EduStanfordNlpTreesGrammaticalRelation, KILL)];
          [dep2 setRelnWithEduStanfordNlpTreesGrammaticalRelation:JreLoadStatic(EduStanfordNlpTreesGrammaticalRelation, KILL)];
          [pobj setRelnWithEduStanfordNlpTreesGrammaticalRelation:JreLoadStatic(EduStanfordNlpTreesGrammaticalRelation, KILL)];
          [newTypedDeps addWithId:newtd];
          for (EduStanfordNlpTreesTypedDependency * __strong td1 in list) {
            if ([((EduStanfordNlpTreesTypedDependency *) nil_chk(td1)) reln] != JreLoadStatic(EduStanfordNlpTreesGrammaticalRelation, KILL)) {
              if ([((EduStanfordNlpLingIndexedWord *) nil_chk([td1 gov])) isEqual:mwp0] || [((EduStanfordNlpLingIndexedWord *) nil_chk([td1 gov])) isEqual:mwp1] || [((EduStanfordNlpLingIndexedWord *) nil_chk([td1 gov])) isEqual:mwp2]) {
                [td1 setGovWithEduStanfordNlpLingIndexedWord:governor];
              }
              if (![newTypedDeps containsWithId:td1]) {
                [newTypedDeps addWithId:td1];
              }
            }
          }
          [list clear];
          [list addAllWithJavaUtilCollection:newTypedDeps];
        }
      }
    }
  }
  {
    IOSObjectArray *a__ = EduStanfordNlpTreesEnglishGrammaticalStructure_THREEWORD_PREPS;
    IOSObjectArray * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    IOSObjectArray * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      IOSObjectArray *mwp = *b__++;
      [newTypedDeps clear];
      EduStanfordNlpLingIndexedWord *mwp0 = nil;
      EduStanfordNlpLingIndexedWord *mwp1 = nil;
      EduStanfordNlpLingIndexedWord *mwp2 = nil;
      EduStanfordNlpTreesTypedDependency *dep1 = nil;
      EduStanfordNlpTreesTypedDependency *dep2 = nil;
      for (EduStanfordNlpTreesTypedDependency * __strong td in nil_chk(list)) {
        if ([((NSString *) nil_chk([((EduStanfordNlpLingIndexedWord *) nil_chk([((EduStanfordNlpTreesTypedDependency *) nil_chk(td)) gov])) value])) equalsIgnoreCase:IOSObjectArray_Get(nil_chk(mwp), 0)] && [((NSString *) nil_chk([((EduStanfordNlpLingIndexedWord *) nil_chk([td dep])) value])) equalsIgnoreCase:IOSObjectArray_Get(mwp, 1)] && JavaLangMath_absWithInt_([((EduStanfordNlpLingIndexedWord *) nil_chk([td gov])) index] - [((EduStanfordNlpLingIndexedWord *) nil_chk([td dep])) index]) == 1) {
          mwp0 = [td gov];
          mwp1 = [td dep];
          dep1 = td;
        }
      }
      for (EduStanfordNlpTreesTypedDependency * __strong td in list) {
        if ([((EduStanfordNlpLingIndexedWord *) nil_chk([((EduStanfordNlpTreesTypedDependency *) nil_chk(td)) gov])) isEqual:mwp0] && [((NSString *) nil_chk([((EduStanfordNlpLingIndexedWord *) nil_chk([td dep])) value])) equalsIgnoreCase:IOSObjectArray_Get(nil_chk(mwp), 2)] && JavaLangMath_absWithInt_([((EduStanfordNlpLingIndexedWord *) nil_chk([td gov])) index] - [((EduStanfordNlpLingIndexedWord *) nil_chk([td dep])) index]) == 2) {
          mwp2 = [td dep];
          dep2 = td;
        }
      }
      if (dep1 != nil && dep2 != nil) {
        EduStanfordNlpLingIndexedWord *governor = nil;
        EduStanfordNlpTreesTypedDependency *prep = nil;
        for (EduStanfordNlpTreesTypedDependency * __strong td1 in list) {
          if ([((EduStanfordNlpLingIndexedWord *) nil_chk([((EduStanfordNlpTreesTypedDependency *) nil_chk(td1)) dep])) isEqual:mwp0] && [td1 reln] == JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, PREPOSITIONAL_MODIFIER)) {
            prep = td1;
            governor = [prep gov];
          }
        }
        EduStanfordNlpTreesTypedDependency *pobj = nil;
        EduStanfordNlpTreesTypedDependency *newtd = nil;
        for (EduStanfordNlpTreesTypedDependency * __strong td2 in list) {
          if ([((EduStanfordNlpLingIndexedWord *) nil_chk([((EduStanfordNlpTreesTypedDependency *) nil_chk(td2)) gov])) isEqual:mwp0] && [td2 reln] == JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, PREPOSITIONAL_OBJECT)) {
            pobj = td2;
            EduStanfordNlpTreesGrammaticalRelation *gr = EduStanfordNlpTreesEnglishGrammaticalRelations_getPrepWithNSString_(JreStrcat("$C$C$", IOSObjectArray_Get(nil_chk(mwp), 0), '_', IOSObjectArray_Get(mwp, 1), '_', IOSObjectArray_Get(mwp, 2)));
            if (governor != nil) {
              newtd = new_EduStanfordNlpTreesTypedDependency_initWithEduStanfordNlpTreesGrammaticalRelation_withEduStanfordNlpLingIndexedWord_withEduStanfordNlpLingIndexedWord_(gr, governor, [pobj dep]);
            }
          }
          if ([((EduStanfordNlpLingIndexedWord *) nil_chk([td2 gov])) isEqual:mwp0] && [td2 reln] == JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, PREPOSITIONAL_COMPLEMENT)) {
            pobj = td2;
            EduStanfordNlpTreesGrammaticalRelation *gr = EduStanfordNlpTreesEnglishGrammaticalRelations_getPrepCWithNSString_(JreStrcat("$C$C$", IOSObjectArray_Get(nil_chk(mwp), 0), '_', IOSObjectArray_Get(mwp, 1), '_', IOSObjectArray_Get(mwp, 2)));
            if (governor != nil) {
              newtd = new_EduStanfordNlpTreesTypedDependency_initWithEduStanfordNlpTreesGrammaticalRelation_withEduStanfordNlpLingIndexedWord_withEduStanfordNlpLingIndexedWord_(gr, governor, [pobj dep]);
            }
          }
        }
        if (prep != nil && pobj != nil && newtd != nil) {
          [prep setRelnWithEduStanfordNlpTreesGrammaticalRelation:JreLoadStatic(EduStanfordNlpTreesGrammaticalRelation, KILL)];
          [dep1 setRelnWithEduStanfordNlpTreesGrammaticalRelation:JreLoadStatic(EduStanfordNlpTreesGrammaticalRelation, KILL)];
          [dep2 setRelnWithEduStanfordNlpTreesGrammaticalRelation:JreLoadStatic(EduStanfordNlpTreesGrammaticalRelation, KILL)];
          [pobj setRelnWithEduStanfordNlpTreesGrammaticalRelation:JreLoadStatic(EduStanfordNlpTreesGrammaticalRelation, KILL)];
          [newTypedDeps addWithId:newtd];
          for (EduStanfordNlpTreesTypedDependency * __strong td1 in list) {
            if ([((EduStanfordNlpTreesTypedDependency *) nil_chk(td1)) reln] != JreLoadStatic(EduStanfordNlpTreesGrammaticalRelation, KILL)) {
              if ([((EduStanfordNlpLingIndexedWord *) nil_chk([td1 gov])) isEqual:mwp0] || [((EduStanfordNlpLingIndexedWord *) nil_chk([td1 gov])) isEqual:mwp1] || [((EduStanfordNlpLingIndexedWord *) nil_chk([td1 gov])) isEqual:mwp2]) {
                [td1 setGovWithEduStanfordNlpLingIndexedWord:governor];
              }
              if (![newTypedDeps containsWithId:td1]) {
                [newTypedDeps addWithId:td1];
              }
            }
          }
          [list clear];
          [list addAllWithJavaUtilCollection:newTypedDeps];
        }
      }
    }
  }
}

void EduStanfordNlpTreesEnglishGrammaticalStructure_collapseFlatMWPWithJavaUtilCollection_(id<JavaUtilCollection> list) {
  EduStanfordNlpTreesEnglishGrammaticalStructure_initialize();
  id<JavaUtilCollection> newTypedDeps = new_JavaUtilArrayList_init();
  {
    IOSObjectArray *a__ = EduStanfordNlpTreesEnglishGrammaticalStructure_MULTIWORD_PREPS;
    IOSObjectArray * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    IOSObjectArray * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      IOSObjectArray *mwp = *b__++;
      [newTypedDeps clear];
      EduStanfordNlpLingIndexedWord *mwp1 = nil;
      EduStanfordNlpLingIndexedWord *governor = nil;
      EduStanfordNlpTreesTypedDependency *prep = nil;
      EduStanfordNlpTreesTypedDependency *dep = nil;
      EduStanfordNlpTreesTypedDependency *pobj = nil;
      for (EduStanfordNlpTreesTypedDependency * __strong td in nil_chk(list)) {
        if (JavaLangMath_absWithInt_([((EduStanfordNlpLingIndexedWord *) nil_chk([((EduStanfordNlpTreesTypedDependency *) nil_chk(td)) gov])) index] - [((EduStanfordNlpLingIndexedWord *) nil_chk([td dep])) index]) == 1 && [((NSString *) nil_chk([((EduStanfordNlpLingIndexedWord *) nil_chk([td gov])) value])) equalsIgnoreCase:IOSObjectArray_Get(nil_chk(mwp), 1)] && [((NSString *) nil_chk([((EduStanfordNlpLingIndexedWord *) nil_chk([td dep])) value])) equalsIgnoreCase:IOSObjectArray_Get(mwp, 0)]) {
          mwp1 = [td gov];
          dep = td;
        }
      }
      if (mwp1 == nil) {
        continue;
      }
      for (EduStanfordNlpTreesTypedDependency * __strong td1 in list) {
        if ([((EduStanfordNlpLingIndexedWord *) nil_chk([((EduStanfordNlpTreesTypedDependency *) nil_chk(td1)) dep])) isEqual:mwp1] && [td1 reln] == JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, PREPOSITIONAL_MODIFIER)) {
          prep = td1;
          governor = [prep gov];
        }
      }
      if (prep == nil) {
        continue;
      }
      for (EduStanfordNlpTreesTypedDependency * __strong td2 in list) {
        if ([((EduStanfordNlpLingIndexedWord *) nil_chk([((EduStanfordNlpTreesTypedDependency *) nil_chk(td2)) gov])) isEqual:mwp1] && [td2 reln] == JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, PREPOSITIONAL_OBJECT)) {
          pobj = td2;
          EduStanfordNlpTreesGrammaticalRelation *gr = EduStanfordNlpTreesEnglishGrammaticalRelations_getPrepWithNSString_(JreStrcat("$C$", IOSObjectArray_Get(nil_chk(mwp), 0), '_', IOSObjectArray_Get(mwp, 1)));
          [newTypedDeps addWithId:new_EduStanfordNlpTreesTypedDependency_initWithEduStanfordNlpTreesGrammaticalRelation_withEduStanfordNlpLingIndexedWord_withEduStanfordNlpLingIndexedWord_(gr, governor, [pobj dep])];
        }
        if ([((EduStanfordNlpLingIndexedWord *) nil_chk([td2 gov])) isEqual:mwp1] && [td2 reln] == JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, PREPOSITIONAL_COMPLEMENT)) {
          pobj = td2;
          EduStanfordNlpTreesGrammaticalRelation *gr = EduStanfordNlpTreesEnglishGrammaticalRelations_getPrepCWithNSString_(JreStrcat("$C$", IOSObjectArray_Get(nil_chk(mwp), 0), '_', IOSObjectArray_Get(mwp, 1)));
          [newTypedDeps addWithId:new_EduStanfordNlpTreesTypedDependency_initWithEduStanfordNlpTreesGrammaticalRelation_withEduStanfordNlpLingIndexedWord_withEduStanfordNlpLingIndexedWord_(gr, governor, [pobj dep])];
        }
      }
      if (pobj == nil) {
        return;
      }
      [prep setRelnWithEduStanfordNlpTreesGrammaticalRelation:JreLoadStatic(EduStanfordNlpTreesGrammaticalRelation, KILL)];
      [((EduStanfordNlpTreesTypedDependency *) nil_chk(dep)) setRelnWithEduStanfordNlpTreesGrammaticalRelation:JreLoadStatic(EduStanfordNlpTreesGrammaticalRelation, KILL)];
      [pobj setRelnWithEduStanfordNlpTreesGrammaticalRelation:JreLoadStatic(EduStanfordNlpTreesGrammaticalRelation, KILL)];
      for (EduStanfordNlpTreesTypedDependency * __strong td1 in list) {
        if ([((EduStanfordNlpTreesTypedDependency *) nil_chk(td1)) reln] != JreLoadStatic(EduStanfordNlpTreesGrammaticalRelation, KILL)) {
          if ([((EduStanfordNlpLingIndexedWord *) nil_chk([td1 gov])) isEqual:mwp1]) {
            [td1 setGovWithEduStanfordNlpLingIndexedWord:governor];
          }
          if (![newTypedDeps containsWithId:td1]) {
            [newTypedDeps addWithId:td1];
          }
        }
      }
      [list clear];
      [list addAllWithJavaUtilCollection:newTypedDeps];
    }
  }
}

void EduStanfordNlpTreesEnglishGrammaticalStructure_eraseMultiConjWithJavaUtilCollection_(id<JavaUtilCollection> list) {
  EduStanfordNlpTreesEnglishGrammaticalStructure_initialize();
  for (EduStanfordNlpTreesTypedDependency * __strong td1 in nil_chk(list)) {
    if ([((EduStanfordNlpTreesTypedDependency *) nil_chk(td1)) reln] == JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, COORDINATION)) {
      EduStanfordNlpLingIndexedWord *x = [td1 dep];
      for (EduStanfordNlpTreesTypedDependency * __strong td2 in list) {
        if ([((EduStanfordNlpLingIndexedWord *) nil_chk([((EduStanfordNlpTreesTypedDependency *) nil_chk(td2)) gov])) isEqual:x] && ([td2 reln] == JreLoadStatic(EduStanfordNlpTreesGrammaticalRelation, DEPENDENT) || [td2 reln] == JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, MULTI_WORD_EXPRESSION) || [td2 reln] == JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, COORDINATION) || [td2 reln] == JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, ADVERBIAL_MODIFIER) || [td2 reln] == JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, NEGATION_MODIFIER) || [td2 reln] == JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, AUX_MODIFIER))) {
          [td2 setRelnWithEduStanfordNlpTreesGrammaticalRelation:JreLoadStatic(EduStanfordNlpTreesGrammaticalRelation, KILL)];
        }
      }
    }
  }
  EduStanfordNlpTreesEnglishGrammaticalStructure_filterKillWithJavaUtilCollection_(list);
}

void EduStanfordNlpTreesEnglishGrammaticalStructure_removeDepWithJavaUtilCollection_(id<JavaUtilCollection> list) {
  EduStanfordNlpTreesEnglishGrammaticalStructure_initialize();
  id<JavaUtilSet> prepRels = EduStanfordNlpUtilGenerics_newHashSetWithJavaUtilCollection_(EduStanfordNlpTreesEnglishGrammaticalRelations_getPreps());
  [((id<JavaUtilSet>) nil_chk(prepRels)) addAllWithJavaUtilCollection:EduStanfordNlpTreesEnglishGrammaticalRelations_getPrepsC()];
  for (EduStanfordNlpTreesTypedDependency * __strong td1 in nil_chk(list)) {
    if ([prepRels containsWithId:[((EduStanfordNlpTreesTypedDependency *) nil_chk(td1)) reln]]) {
      EduStanfordNlpLingIndexedWord *gov = [td1 gov];
      EduStanfordNlpLingIndexedWord *dep = [td1 dep];
      for (EduStanfordNlpTreesTypedDependency * __strong td2 in list) {
        if ([((EduStanfordNlpTreesTypedDependency *) nil_chk(td2)) reln] == JreLoadStatic(EduStanfordNlpTreesGrammaticalRelation, DEPENDENT) && [((EduStanfordNlpLingIndexedWord *) nil_chk([td2 gov])) isEqual:gov] && [((EduStanfordNlpLingIndexedWord *) nil_chk([td2 dep])) isEqual:dep]) {
          [td2 setRelnWithEduStanfordNlpTreesGrammaticalRelation:JreLoadStatic(EduStanfordNlpTreesGrammaticalRelation, KILL)];
        }
      }
    }
  }
  for (id<JavaUtilIterator> iter = [list iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) {
    EduStanfordNlpTreesTypedDependency *td = [iter next];
    if ([((EduStanfordNlpTreesTypedDependency *) nil_chk(td)) reln] == JreLoadStatic(EduStanfordNlpTreesGrammaticalRelation, KILL)) {
      if (EduStanfordNlpTreesEnglishGrammaticalStructure_DEBUG) {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$@", @"Removing duplicate relation: ", td)];
      }
      [iter remove];
    }
  }
}

void EduStanfordNlpTreesEnglishGrammaticalStructure_removeExactDuplicatesWithJavaUtilCollection_(id<JavaUtilCollection> list) {
  EduStanfordNlpTreesEnglishGrammaticalStructure_initialize();
  id<JavaUtilSet> set = new_JavaUtilTreeSet_initWithJavaUtilCollection_(list);
  [((id<JavaUtilCollection>) nil_chk(list)) clear];
  [list addAllWithJavaUtilCollection:set];
}

id<JavaUtilList> EduStanfordNlpTreesEnglishGrammaticalStructure_readCoNLLXGrammaticalStructureCollectionWithNSString_(NSString *fileName) {
  EduStanfordNlpTreesEnglishGrammaticalStructure_initialize();
  return EduStanfordNlpTreesGrammaticalStructure_readCoNLLXGrammaticalStructureCollectionWithNSString_withJavaUtilMap_withEduStanfordNlpTreesGrammaticalStructureFromDependenciesFactory_(fileName, JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, shortNameToGRel), new_EduStanfordNlpTreesEnglishGrammaticalStructure_FromDependenciesFactory_init());
}

EduStanfordNlpTreesEnglishGrammaticalStructure *EduStanfordNlpTreesEnglishGrammaticalStructure_buildCoNLLXGrammaticalStructureWithJavaUtilList_(id<JavaUtilList> tokenFields) {
  EduStanfordNlpTreesEnglishGrammaticalStructure_initialize();
  return (EduStanfordNlpTreesEnglishGrammaticalStructure *) cast_chk(EduStanfordNlpTreesGrammaticalStructure_buildCoNLLXGrammaticalStructureWithJavaUtilList_withJavaUtilMap_withEduStanfordNlpTreesGrammaticalStructureFromDependenciesFactory_(tokenFields, JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, shortNameToGRel), new_EduStanfordNlpTreesEnglishGrammaticalStructure_FromDependenciesFactory_init()), [EduStanfordNlpTreesEnglishGrammaticalStructure class]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTreesEnglishGrammaticalStructure)

@implementation EduStanfordNlpTreesEnglishGrammaticalStructure_ExtraTreeDepFilter

- (jboolean)testWithId:(EduStanfordNlpTreesTypedDependency *)d {
  return d != nil && [d reln] != JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, RELATIVE);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpTreesEnglishGrammaticalStructure_ExtraTreeDepFilter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilFunctionPredicate>)and__WithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)arg0 {
  return JavaUtilFunctionPredicate_and__WithJavaUtilFunctionPredicate_(self, arg0);
}

- (id<JavaUtilFunctionPredicate>)negate {
  return JavaUtilFunctionPredicate_negate(self);
}

- (id<JavaUtilFunctionPredicate>)or__WithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)arg0 {
  return JavaUtilFunctionPredicate_or__WithJavaUtilFunctionPredicate_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpTreesEnglishGrammaticalStructure_ExtraTreeDepFilter_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "test", "LEduStanfordNlpTreesTypedDependency;", "LEduStanfordNlpTreesEnglishGrammaticalStructure;", "Ljava/lang/Object;Ljava/util/function/Predicate<Ledu/stanford/nlp/trees/TypedDependency;>;Ljava/io/Serializable;" };
  static const J2ObjcClassInfo _EduStanfordNlpTreesEnglishGrammaticalStructure_ExtraTreeDepFilter = { "ExtraTreeDepFilter", "edu.stanford.nlp.trees", ptrTable, methods, fields, 7, 0xa, 2, 1, 2, -1, -1, 3, -1 };
  return &_EduStanfordNlpTreesEnglishGrammaticalStructure_ExtraTreeDepFilter;
}

@end

void EduStanfordNlpTreesEnglishGrammaticalStructure_ExtraTreeDepFilter_init(EduStanfordNlpTreesEnglishGrammaticalStructure_ExtraTreeDepFilter *self) {
  NSObject_init(self);
}

EduStanfordNlpTreesEnglishGrammaticalStructure_ExtraTreeDepFilter *new_EduStanfordNlpTreesEnglishGrammaticalStructure_ExtraTreeDepFilter_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesEnglishGrammaticalStructure_ExtraTreeDepFilter, init)
}

EduStanfordNlpTreesEnglishGrammaticalStructure_ExtraTreeDepFilter *create_EduStanfordNlpTreesEnglishGrammaticalStructure_ExtraTreeDepFilter_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesEnglishGrammaticalStructure_ExtraTreeDepFilter, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTreesEnglishGrammaticalStructure_ExtraTreeDepFilter)

@implementation EduStanfordNlpTreesEnglishGrammaticalStructure_FromDependenciesFactory

- (EduStanfordNlpTreesEnglishGrammaticalStructure *)buildWithJavaUtilList:(id<JavaUtilList>)tdeps
                                     withEduStanfordNlpTreesTreeGraphNode:(EduStanfordNlpTreesTreeGraphNode *)root {
  return new_EduStanfordNlpTreesEnglishGrammaticalStructure_initWithJavaUtilList_withEduStanfordNlpTreesTreeGraphNode_(tdeps, root);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpTreesEnglishGrammaticalStructure_FromDependenciesFactory_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LEduStanfordNlpTreesEnglishGrammaticalStructure;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(buildWithJavaUtilList:withEduStanfordNlpTreesTreeGraphNode:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "build", "LJavaUtilList;LEduStanfordNlpTreesTreeGraphNode;", "(Ljava/util/List<Ledu/stanford/nlp/trees/TypedDependency;>;Ledu/stanford/nlp/trees/TreeGraphNode;)Ledu/stanford/nlp/trees/EnglishGrammaticalStructure;", "LEduStanfordNlpTreesEnglishGrammaticalStructure;" };
  static const J2ObjcClassInfo _EduStanfordNlpTreesEnglishGrammaticalStructure_FromDependenciesFactory = { "FromDependenciesFactory", "edu.stanford.nlp.trees", ptrTable, methods, NULL, 7, 0x9, 2, 0, 3, -1, -1, -1, -1 };
  return &_EduStanfordNlpTreesEnglishGrammaticalStructure_FromDependenciesFactory;
}

@end

void EduStanfordNlpTreesEnglishGrammaticalStructure_FromDependenciesFactory_init(EduStanfordNlpTreesEnglishGrammaticalStructure_FromDependenciesFactory *self) {
  NSObject_init(self);
}

EduStanfordNlpTreesEnglishGrammaticalStructure_FromDependenciesFactory *new_EduStanfordNlpTreesEnglishGrammaticalStructure_FromDependenciesFactory_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesEnglishGrammaticalStructure_FromDependenciesFactory, init)
}

EduStanfordNlpTreesEnglishGrammaticalStructure_FromDependenciesFactory *create_EduStanfordNlpTreesEnglishGrammaticalStructure_FromDependenciesFactory_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesEnglishGrammaticalStructure_FromDependenciesFactory, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTreesEnglishGrammaticalStructure_FromDependenciesFactory)
