//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/trees/BobChrisTreeNormalizer.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/ling/Label.h"
#include "edu/stanford/nlp/trees/BobChrisTreeNormalizer.h"
#include "edu/stanford/nlp/trees/PennTreebankLanguagePack.h"
#include "edu/stanford/nlp/trees/Tree.h"
#include "edu/stanford/nlp/trees/TreeFactory.h"
#include "edu/stanford/nlp/trees/TreeNormalizer.h"
#include "edu/stanford/nlp/trees/TreebankLanguagePack.h"
#include "java/util/function/Predicate.h"

inline jlong EduStanfordNlpTreesBobChrisTreeNormalizer_get_serialVersionUID();
#define EduStanfordNlpTreesBobChrisTreeNormalizer_serialVersionUID -1005188028979810143LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpTreesBobChrisTreeNormalizer, serialVersionUID, jlong)

inline jlong EduStanfordNlpTreesBobChrisTreeNormalizer_EmptyFilter_get_serialVersionUID();
#define EduStanfordNlpTreesBobChrisTreeNormalizer_EmptyFilter_serialVersionUID 8914098359495987617LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpTreesBobChrisTreeNormalizer_EmptyFilter, serialVersionUID, jlong)

inline jlong EduStanfordNlpTreesBobChrisTreeNormalizer_AOverAFilter_get_serialVersionUID();
#define EduStanfordNlpTreesBobChrisTreeNormalizer_AOverAFilter_serialVersionUID 1LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpTreesBobChrisTreeNormalizer_AOverAFilter, serialVersionUID, jlong)

@implementation EduStanfordNlpTreesBobChrisTreeNormalizer

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpTreesBobChrisTreeNormalizer_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithEduStanfordNlpTreesTreebankLanguagePack:(id<EduStanfordNlpTreesTreebankLanguagePack>)tlp {
  EduStanfordNlpTreesBobChrisTreeNormalizer_initWithEduStanfordNlpTreesTreebankLanguagePack_(self, tlp);
  return self;
}

- (NSString *)normalizeTerminalWithNSString:(NSString *)leaf {
  return [((NSString *) nil_chk(leaf)) intern];
}

- (NSString *)normalizeNonterminalWithNSString:(NSString *)category {
  return [((NSString *) nil_chk([self cleanUpLabelWithNSString:category])) intern];
}

- (NSString *)cleanUpLabelWithNSString:(NSString *)label {
  if (label == nil || [label isEmpty]) {
    return @"ROOT";
  }
  else {
    return [((id<EduStanfordNlpTreesTreebankLanguagePack>) nil_chk(tlp_)) basicCategoryWithNSString:label];
  }
}

- (EduStanfordNlpTreesTree *)normalizeWholeTreeWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)tree
                                        withEduStanfordNlpTreesTreeFactory:(id<EduStanfordNlpTreesTreeFactory>)tf {
  EduStanfordNlpTreesTree *middle = [((EduStanfordNlpTreesTree *) nil_chk(tree)) pruneWithJavaUtilFunctionPredicate:emptyFilter_ withEduStanfordNlpTreesTreeFactory:tf];
  if (middle == nil) {
    return nil;
  }
  else {
    return [middle spliceOutWithJavaUtilFunctionPredicate:aOverAFilter_ withEduStanfordNlpTreesTreeFactory:tf];
  }
}

- (EduStanfordNlpTreesTree *)transformTreeWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)tree {
  return [self normalizeWholeTreeWithEduStanfordNlpTreesTree:tree withEduStanfordNlpTreesTreeFactory:[((EduStanfordNlpTreesTree *) nil_chk(tree)) treeFactory]];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, 4, 2, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x1, 7, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithEduStanfordNlpTreesTreebankLanguagePack:);
  methods[2].selector = @selector(normalizeTerminalWithNSString:);
  methods[3].selector = @selector(normalizeNonterminalWithNSString:);
  methods[4].selector = @selector(cleanUpLabelWithNSString:);
  methods[5].selector = @selector(normalizeWholeTreeWithEduStanfordNlpTreesTree:withEduStanfordNlpTreesTreeFactory:);
  methods[6].selector = @selector(transformTreeWithEduStanfordNlpTreesTree:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "tlp_", "LEduStanfordNlpTreesTreebankLanguagePack;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "emptyFilter_", "LJavaUtilFunctionPredicate;", .constantValue.asLong = 0, 0x4, -1, -1, 9, -1 },
    { "aOverAFilter_", "LJavaUtilFunctionPredicate;", .constantValue.asLong = 0, 0x4, -1, -1, 9, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpTreesBobChrisTreeNormalizer_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpTreesTreebankLanguagePack;", "normalizeTerminal", "LNSString;", "normalizeNonterminal", "cleanUpLabel", "normalizeWholeTree", "LEduStanfordNlpTreesTree;LEduStanfordNlpTreesTreeFactory;", "transformTree", "LEduStanfordNlpTreesTree;", "Ljava/util/function/Predicate<Ledu/stanford/nlp/trees/Tree;>;", "LEduStanfordNlpTreesBobChrisTreeNormalizer_EmptyFilter;LEduStanfordNlpTreesBobChrisTreeNormalizer_AOverAFilter;" };
  static const J2ObjcClassInfo _EduStanfordNlpTreesBobChrisTreeNormalizer = { "BobChrisTreeNormalizer", "edu.stanford.nlp.trees", ptrTable, methods, fields, 7, 0x1, 7, 4, -1, 10, -1, -1, -1 };
  return &_EduStanfordNlpTreesBobChrisTreeNormalizer;
}

@end

void EduStanfordNlpTreesBobChrisTreeNormalizer_init(EduStanfordNlpTreesBobChrisTreeNormalizer *self) {
  EduStanfordNlpTreesBobChrisTreeNormalizer_initWithEduStanfordNlpTreesTreebankLanguagePack_(self, new_EduStanfordNlpTreesPennTreebankLanguagePack_init());
}

EduStanfordNlpTreesBobChrisTreeNormalizer *new_EduStanfordNlpTreesBobChrisTreeNormalizer_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesBobChrisTreeNormalizer, init)
}

EduStanfordNlpTreesBobChrisTreeNormalizer *create_EduStanfordNlpTreesBobChrisTreeNormalizer_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesBobChrisTreeNormalizer, init)
}

void EduStanfordNlpTreesBobChrisTreeNormalizer_initWithEduStanfordNlpTreesTreebankLanguagePack_(EduStanfordNlpTreesBobChrisTreeNormalizer *self, id<EduStanfordNlpTreesTreebankLanguagePack> tlp) {
  EduStanfordNlpTreesTreeNormalizer_init(self);
  self->emptyFilter_ = new_EduStanfordNlpTreesBobChrisTreeNormalizer_EmptyFilter_init();
  self->aOverAFilter_ = new_EduStanfordNlpTreesBobChrisTreeNormalizer_AOverAFilter_init();
  self->tlp_ = tlp;
}

EduStanfordNlpTreesBobChrisTreeNormalizer *new_EduStanfordNlpTreesBobChrisTreeNormalizer_initWithEduStanfordNlpTreesTreebankLanguagePack_(id<EduStanfordNlpTreesTreebankLanguagePack> tlp) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesBobChrisTreeNormalizer, initWithEduStanfordNlpTreesTreebankLanguagePack_, tlp)
}

EduStanfordNlpTreesBobChrisTreeNormalizer *create_EduStanfordNlpTreesBobChrisTreeNormalizer_initWithEduStanfordNlpTreesTreebankLanguagePack_(id<EduStanfordNlpTreesTreebankLanguagePack> tlp) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesBobChrisTreeNormalizer, initWithEduStanfordNlpTreesTreebankLanguagePack_, tlp)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTreesBobChrisTreeNormalizer)

@implementation EduStanfordNlpTreesBobChrisTreeNormalizer_EmptyFilter

- (jboolean)testWithId:(EduStanfordNlpTreesTree *)t {
  IOSObjectArray *kids = [((EduStanfordNlpTreesTree *) nil_chk(t)) children];
  id<EduStanfordNlpLingLabel> l = [t label];
  return !((l != nil) && [@"-NONE-" isEqual:[((id<EduStanfordNlpLingLabel>) nil_chk(l)) value]] && ![t isLeaf] && ((IOSObjectArray *) nil_chk(kids))->size_ == 1 && [((EduStanfordNlpTreesTree *) nil_chk(IOSObjectArray_Get(kids, 0))) isLeaf]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpTreesBobChrisTreeNormalizer_EmptyFilter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilFunctionPredicate>)and__WithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)arg0 {
  return JavaUtilFunctionPredicate_and__WithJavaUtilFunctionPredicate_(self, arg0);
}

- (id<JavaUtilFunctionPredicate>)negate {
  return JavaUtilFunctionPredicate_negate(self);
}

- (id<JavaUtilFunctionPredicate>)or__WithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)arg0 {
  return JavaUtilFunctionPredicate_or__WithJavaUtilFunctionPredicate_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpTreesBobChrisTreeNormalizer_EmptyFilter_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "test", "LEduStanfordNlpTreesTree;", "LEduStanfordNlpTreesBobChrisTreeNormalizer;", "Ljava/lang/Object;Ljava/util/function/Predicate<Ledu/stanford/nlp/trees/Tree;>;Ljava/io/Serializable;" };
  static const J2ObjcClassInfo _EduStanfordNlpTreesBobChrisTreeNormalizer_EmptyFilter = { "EmptyFilter", "edu.stanford.nlp.trees", ptrTable, methods, fields, 7, 0x9, 2, 1, 2, -1, -1, 3, -1 };
  return &_EduStanfordNlpTreesBobChrisTreeNormalizer_EmptyFilter;
}

@end

void EduStanfordNlpTreesBobChrisTreeNormalizer_EmptyFilter_init(EduStanfordNlpTreesBobChrisTreeNormalizer_EmptyFilter *self) {
  NSObject_init(self);
}

EduStanfordNlpTreesBobChrisTreeNormalizer_EmptyFilter *new_EduStanfordNlpTreesBobChrisTreeNormalizer_EmptyFilter_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesBobChrisTreeNormalizer_EmptyFilter, init)
}

EduStanfordNlpTreesBobChrisTreeNormalizer_EmptyFilter *create_EduStanfordNlpTreesBobChrisTreeNormalizer_EmptyFilter_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesBobChrisTreeNormalizer_EmptyFilter, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTreesBobChrisTreeNormalizer_EmptyFilter)

@implementation EduStanfordNlpTreesBobChrisTreeNormalizer_AOverAFilter

- (jboolean)testWithId:(EduStanfordNlpTreesTree *)t {
  if ([((EduStanfordNlpTreesTree *) nil_chk(t)) isLeaf] || [t isPreTerminal]) {
    return true;
  }
  if ([@"EDITED" isEqual:[((id<EduStanfordNlpLingLabel>) nil_chk([t label])) value]] || [@"CODE" isEqual:[((id<EduStanfordNlpLingLabel>) nil_chk([t label])) value]]) {
    return false;
  }
  if ([t numChildren] != 1) {
    return true;
  }
  return !([t label] != nil && [((id<EduStanfordNlpLingLabel>) nil_chk([t label])) value] != nil && [((NSString *) nil_chk([((id<EduStanfordNlpLingLabel>) nil_chk([t label])) value])) isEqual:[((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk([t getChildWithInt:0])) label])) value]]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpTreesBobChrisTreeNormalizer_AOverAFilter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilFunctionPredicate>)and__WithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)arg0 {
  return JavaUtilFunctionPredicate_and__WithJavaUtilFunctionPredicate_(self, arg0);
}

- (id<JavaUtilFunctionPredicate>)negate {
  return JavaUtilFunctionPredicate_negate(self);
}

- (id<JavaUtilFunctionPredicate>)or__WithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)arg0 {
  return JavaUtilFunctionPredicate_or__WithJavaUtilFunctionPredicate_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpTreesBobChrisTreeNormalizer_AOverAFilter_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "test", "LEduStanfordNlpTreesTree;", "LEduStanfordNlpTreesBobChrisTreeNormalizer;", "Ljava/lang/Object;Ljava/util/function/Predicate<Ledu/stanford/nlp/trees/Tree;>;Ljava/io/Serializable;" };
  static const J2ObjcClassInfo _EduStanfordNlpTreesBobChrisTreeNormalizer_AOverAFilter = { "AOverAFilter", "edu.stanford.nlp.trees", ptrTable, methods, fields, 7, 0x9, 2, 1, 2, -1, -1, 3, -1 };
  return &_EduStanfordNlpTreesBobChrisTreeNormalizer_AOverAFilter;
}

@end

void EduStanfordNlpTreesBobChrisTreeNormalizer_AOverAFilter_init(EduStanfordNlpTreesBobChrisTreeNormalizer_AOverAFilter *self) {
  NSObject_init(self);
}

EduStanfordNlpTreesBobChrisTreeNormalizer_AOverAFilter *new_EduStanfordNlpTreesBobChrisTreeNormalizer_AOverAFilter_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesBobChrisTreeNormalizer_AOverAFilter, init)
}

EduStanfordNlpTreesBobChrisTreeNormalizer_AOverAFilter *create_EduStanfordNlpTreesBobChrisTreeNormalizer_AOverAFilter_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesBobChrisTreeNormalizer_AOverAFilter, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTreesBobChrisTreeNormalizer_AOverAFilter)
