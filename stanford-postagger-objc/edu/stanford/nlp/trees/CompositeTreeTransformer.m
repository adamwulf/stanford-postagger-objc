//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/trees/CompositeTreeTransformer.java
//

#include "J2ObjC_source.h"
#include "edu/stanford/nlp/trees/CompositeTreeTransformer.h"
#include "edu/stanford/nlp/trees/Tree.h"
#include "edu/stanford/nlp/trees/TreeTransformer.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"

@interface EduStanfordNlpTreesCompositeTreeTransformer () {
 @public
  id<JavaUtilList> transformers_;
}

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpTreesCompositeTreeTransformer, transformers_, id<JavaUtilList>)

@implementation EduStanfordNlpTreesCompositeTreeTransformer

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpTreesCompositeTreeTransformer_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)tt {
  EduStanfordNlpTreesCompositeTreeTransformer_initWithJavaUtilList_(self, tt);
  return self;
}

- (void)addTransformerWithEduStanfordNlpTreesTreeTransformer:(id<EduStanfordNlpTreesTreeTransformer>)tt {
  [((id<JavaUtilList>) nil_chk(transformers_)) addWithId:tt];
}

- (EduStanfordNlpTreesTree *)transformTreeWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t {
  for (id<EduStanfordNlpTreesTreeTransformer> __strong tt in nil_chk(transformers_)) {
    t = [((id<EduStanfordNlpTreesTreeTransformer>) nil_chk(tt)) transformTreeWithEduStanfordNlpTreesTree:t];
  }
  return t;
}

- (NSString *)description {
  return JreStrcat("$@", @"CompositeTreeTransformer: ", transformers_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 6, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithJavaUtilList:);
  methods[2].selector = @selector(addTransformerWithEduStanfordNlpTreesTreeTransformer:);
  methods[3].selector = @selector(transformTreeWithEduStanfordNlpTreesTree:);
  methods[4].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "transformers_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 7, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilList;", "(Ljava/util/List<Ledu/stanford/nlp/trees/TreeTransformer;>;)V", "addTransformer", "LEduStanfordNlpTreesTreeTransformer;", "transformTree", "LEduStanfordNlpTreesTree;", "toString", "Ljava/util/List<Ledu/stanford/nlp/trees/TreeTransformer;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpTreesCompositeTreeTransformer = { "CompositeTreeTransformer", "edu.stanford.nlp.trees", ptrTable, methods, fields, 7, 0x1, 5, 1, -1, -1, -1, -1, -1 };
  return &_EduStanfordNlpTreesCompositeTreeTransformer;
}

@end

void EduStanfordNlpTreesCompositeTreeTransformer_init(EduStanfordNlpTreesCompositeTreeTransformer *self) {
  NSObject_init(self);
  self->transformers_ = new_JavaUtilArrayList_init();
}

EduStanfordNlpTreesCompositeTreeTransformer *new_EduStanfordNlpTreesCompositeTreeTransformer_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesCompositeTreeTransformer, init)
}

EduStanfordNlpTreesCompositeTreeTransformer *create_EduStanfordNlpTreesCompositeTreeTransformer_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesCompositeTreeTransformer, init)
}

void EduStanfordNlpTreesCompositeTreeTransformer_initWithJavaUtilList_(EduStanfordNlpTreesCompositeTreeTransformer *self, id<JavaUtilList> tt) {
  NSObject_init(self);
  self->transformers_ = new_JavaUtilArrayList_init();
  [self->transformers_ addAllWithJavaUtilCollection:tt];
}

EduStanfordNlpTreesCompositeTreeTransformer *new_EduStanfordNlpTreesCompositeTreeTransformer_initWithJavaUtilList_(id<JavaUtilList> tt) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesCompositeTreeTransformer, initWithJavaUtilList_, tt)
}

EduStanfordNlpTreesCompositeTreeTransformer *create_EduStanfordNlpTreesCompositeTreeTransformer_initWithJavaUtilList_(id<JavaUtilList> tt) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesCompositeTreeTransformer, initWithJavaUtilList_, tt)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTreesCompositeTreeTransformer)
