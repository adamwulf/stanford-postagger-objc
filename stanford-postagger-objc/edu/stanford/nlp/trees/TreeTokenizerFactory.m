//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/trees/TreeTokenizerFactory.java
//

#include "J2ObjC_source.h"
#include "edu/stanford/nlp/process/AbstractTokenizer.h"
#include "edu/stanford/nlp/process/Tokenizer.h"
#include "edu/stanford/nlp/trees/Tree.h"
#include "edu/stanford/nlp/trees/TreeReader.h"
#include "edu/stanford/nlp/trees/TreeReaderFactory.h"
#include "edu/stanford/nlp/trees/TreeTokenizerFactory.h"
#include "java/io/IOException.h"
#include "java/io/PrintStream.h"
#include "java/io/Reader.h"
#include "java/lang/System.h"
#include "java/util/Iterator.h"

@interface EduStanfordNlpTreesTreeTokenizerFactory () {
 @public
  id<EduStanfordNlpTreesTreeReaderFactory> trf_;
}

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpTreesTreeTokenizerFactory, trf_, id<EduStanfordNlpTreesTreeReaderFactory>)

@interface EduStanfordNlpTreesTreeTokenizerFactory_$1 : EduStanfordNlpProcessAbstractTokenizer {
 @public
  id<EduStanfordNlpTreesTreeReader> tr_;
}

- (EduStanfordNlpTreesTree *)getNext;

- (instancetype)initWithEduStanfordNlpTreesTreeTokenizerFactory:(EduStanfordNlpTreesTreeTokenizerFactory *)outer$
                                               withJavaIoReader:(JavaIoReader *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpTreesTreeTokenizerFactory_$1)

J2OBJC_FIELD_SETTER(EduStanfordNlpTreesTreeTokenizerFactory_$1, tr_, id<EduStanfordNlpTreesTreeReader>)

__attribute__((unused)) static void EduStanfordNlpTreesTreeTokenizerFactory_$1_initWithEduStanfordNlpTreesTreeTokenizerFactory_withJavaIoReader_(EduStanfordNlpTreesTreeTokenizerFactory_$1 *self, EduStanfordNlpTreesTreeTokenizerFactory *outer$, JavaIoReader *capture$0);

__attribute__((unused)) static EduStanfordNlpTreesTreeTokenizerFactory_$1 *new_EduStanfordNlpTreesTreeTokenizerFactory_$1_initWithEduStanfordNlpTreesTreeTokenizerFactory_withJavaIoReader_(EduStanfordNlpTreesTreeTokenizerFactory *outer$, JavaIoReader *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpTreesTreeTokenizerFactory_$1 *create_EduStanfordNlpTreesTreeTokenizerFactory_$1_initWithEduStanfordNlpTreesTreeTokenizerFactory_withJavaIoReader_(EduStanfordNlpTreesTreeTokenizerFactory *outer$, JavaIoReader *capture$0);

@implementation EduStanfordNlpTreesTreeTokenizerFactory

- (instancetype)initWithEduStanfordNlpTreesTreeReaderFactory:(id<EduStanfordNlpTreesTreeReaderFactory>)trf {
  EduStanfordNlpTreesTreeTokenizerFactory_initWithEduStanfordNlpTreesTreeReaderFactory_(self, trf);
  return self;
}

- (id<EduStanfordNlpProcessTokenizer>)getTokenizerWithJavaIoReader:(JavaIoReader *)r {
  return new_EduStanfordNlpTreesTreeTokenizerFactory_$1_initWithEduStanfordNlpTreesTreeTokenizerFactory_withJavaIoReader_(self, r);
}

- (id<EduStanfordNlpProcessTokenizer>)getTokenizerWithJavaIoReader:(JavaIoReader *)r
                                                      withNSString:(NSString *)extraOptions {
  return [self getTokenizerWithJavaIoReader:r];
}

- (id<JavaUtilIterator>)getIteratorWithJavaIoReader:(JavaIoReader *)r {
  return nil;
}

- (void)setOptionsWithNSString:(NSString *)options {
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpProcessTokenizer;", 0x1, 1, 2, -1, 3, -1, -1 },
    { NULL, "LEduStanfordNlpProcessTokenizer;", 0x1, 1, 4, -1, 5, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, 6, 2, -1, 7, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpTreesTreeReaderFactory:);
  methods[1].selector = @selector(getTokenizerWithJavaIoReader:);
  methods[2].selector = @selector(getTokenizerWithJavaIoReader:withNSString:);
  methods[3].selector = @selector(getIteratorWithJavaIoReader:);
  methods[4].selector = @selector(setOptionsWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "trf_", "LEduStanfordNlpTreesTreeReaderFactory;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpTreesTreeReaderFactory;", "getTokenizer", "LJavaIoReader;", "(Ljava/io/Reader;)Ledu/stanford/nlp/process/Tokenizer<Ledu/stanford/nlp/trees/Tree;>;", "LJavaIoReader;LNSString;", "(Ljava/io/Reader;Ljava/lang/String;)Ledu/stanford/nlp/process/Tokenizer<Ledu/stanford/nlp/trees/Tree;>;", "getIterator", "(Ljava/io/Reader;)Ljava/util/Iterator<Ledu/stanford/nlp/trees/Tree;>;", "setOptions", "LNSString;", "Ljava/lang/Object;Ledu/stanford/nlp/process/TokenizerFactory<Ledu/stanford/nlp/trees/Tree;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpTreesTreeTokenizerFactory = { "TreeTokenizerFactory", "edu.stanford.nlp.trees", ptrTable, methods, fields, 7, 0x1, 5, 1, -1, -1, -1, 10, -1 };
  return &_EduStanfordNlpTreesTreeTokenizerFactory;
}

@end

void EduStanfordNlpTreesTreeTokenizerFactory_initWithEduStanfordNlpTreesTreeReaderFactory_(EduStanfordNlpTreesTreeTokenizerFactory *self, id<EduStanfordNlpTreesTreeReaderFactory> trf) {
  NSObject_init(self);
  self->trf_ = trf;
}

EduStanfordNlpTreesTreeTokenizerFactory *new_EduStanfordNlpTreesTreeTokenizerFactory_initWithEduStanfordNlpTreesTreeReaderFactory_(id<EduStanfordNlpTreesTreeReaderFactory> trf) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesTreeTokenizerFactory, initWithEduStanfordNlpTreesTreeReaderFactory_, trf)
}

EduStanfordNlpTreesTreeTokenizerFactory *create_EduStanfordNlpTreesTreeTokenizerFactory_initWithEduStanfordNlpTreesTreeReaderFactory_(id<EduStanfordNlpTreesTreeReaderFactory> trf) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesTreeTokenizerFactory, initWithEduStanfordNlpTreesTreeReaderFactory_, trf)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTreesTreeTokenizerFactory)

@implementation EduStanfordNlpTreesTreeTokenizerFactory_$1

- (EduStanfordNlpTreesTree *)getNext {
  @try {
    return [((id<EduStanfordNlpTreesTreeReader>) nil_chk(tr_)) readTree];
  }
  @catch (JavaIoIOException *e) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"Error in reading tree."];
    return nil;
  }
}

- (instancetype)initWithEduStanfordNlpTreesTreeTokenizerFactory:(EduStanfordNlpTreesTreeTokenizerFactory *)outer$
                                               withJavaIoReader:(JavaIoReader *)capture$0 {
  EduStanfordNlpTreesTreeTokenizerFactory_$1_initWithEduStanfordNlpTreesTreeTokenizerFactory_withJavaIoReader_(self, outer$, capture$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LEduStanfordNlpTreesTree;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(getNext);
  methods[1].selector = @selector(initWithEduStanfordNlpTreesTreeTokenizerFactory:withJavaIoReader:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "tr_", "LEduStanfordNlpTreesTreeReader;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "()Ledu/stanford/nlp/trees/Tree;", "LEduStanfordNlpTreesTreeTokenizerFactory;LJavaIoReader;", "LEduStanfordNlpTreesTreeTokenizerFactory;", "getTokenizerWithJavaIoReader:", "Ledu/stanford/nlp/process/AbstractTokenizer<Ledu/stanford/nlp/trees/Tree;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpTreesTreeTokenizerFactory_$1 = { "", "edu.stanford.nlp.trees", ptrTable, methods, fields, 7, 0x8008, 2, 1, 2, -1, 3, 4, -1 };
  return &_EduStanfordNlpTreesTreeTokenizerFactory_$1;
}

@end

void EduStanfordNlpTreesTreeTokenizerFactory_$1_initWithEduStanfordNlpTreesTreeTokenizerFactory_withJavaIoReader_(EduStanfordNlpTreesTreeTokenizerFactory_$1 *self, EduStanfordNlpTreesTreeTokenizerFactory *outer$, JavaIoReader *capture$0) {
  EduStanfordNlpProcessAbstractTokenizer_init(self);
  self->tr_ = [((id<EduStanfordNlpTreesTreeReaderFactory>) nil_chk(outer$->trf_)) newTreeReaderWithJavaIoReader:capture$0];
}

EduStanfordNlpTreesTreeTokenizerFactory_$1 *new_EduStanfordNlpTreesTreeTokenizerFactory_$1_initWithEduStanfordNlpTreesTreeTokenizerFactory_withJavaIoReader_(EduStanfordNlpTreesTreeTokenizerFactory *outer$, JavaIoReader *capture$0) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesTreeTokenizerFactory_$1, initWithEduStanfordNlpTreesTreeTokenizerFactory_withJavaIoReader_, outer$, capture$0)
}

EduStanfordNlpTreesTreeTokenizerFactory_$1 *create_EduStanfordNlpTreesTreeTokenizerFactory_$1_initWithEduStanfordNlpTreesTreeTokenizerFactory_withJavaIoReader_(EduStanfordNlpTreesTreeTokenizerFactory *outer$, JavaIoReader *capture$0) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesTreeTokenizerFactory_$1, initWithEduStanfordNlpTreesTreeTokenizerFactory_withJavaIoReader_, outer$, capture$0)
}
