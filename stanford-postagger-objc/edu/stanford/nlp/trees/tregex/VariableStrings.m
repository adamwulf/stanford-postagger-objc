//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/trees/tregex/VariableStrings.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/stats/IntCounter.h"
#include "edu/stanford/nlp/trees/tregex/VariableStrings.h"
#include "edu/stanford/nlp/util/ArrayMap.h"
#include "edu/stanford/nlp/util/MapFactory.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

@interface EduStanfordNlpTreesTregexVariableStrings () {
 @public
  id<JavaUtilMap> varsToStrings_;
  EduStanfordNlpStatsIntCounter *numVarsSet_;
}

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpTreesTregexVariableStrings, varsToStrings_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(EduStanfordNlpTreesTregexVariableStrings, numVarsSet_, EduStanfordNlpStatsIntCounter *)

@implementation EduStanfordNlpTreesTregexVariableStrings

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpTreesTregexVariableStrings_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)reset {
  [((EduStanfordNlpStatsIntCounter *) nil_chk(numVarsSet_)) clear];
  [((id<JavaUtilMap>) nil_chk(varsToStrings_)) clear];
}

- (jboolean)isSetWithNSString:(NSString *)o {
  return [((EduStanfordNlpStatsIntCounter *) nil_chk(numVarsSet_)) getCountWithId:o] >= 1;
}

- (void)setVarWithNSString:(NSString *)var
              withNSString:(NSString *)string {
  NSString *oldString = [((id<JavaUtilMap>) nil_chk(varsToStrings_)) putWithId:var withId:string];
  if (oldString != nil && ![oldString isEqual:string]) @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$$$", @"Error -- can't setVar to a different string -- old: ", oldString, @" new: ", string));
  [((EduStanfordNlpStatsIntCounter *) nil_chk(numVarsSet_)) incrementCountWithId:var];
}

- (void)unsetVarWithNSString:(NSString *)var {
  if ([((EduStanfordNlpStatsIntCounter *) nil_chk(numVarsSet_)) getCountWithId:var] > 0) [numVarsSet_ decrementCountWithId:var];
  if ([numVarsSet_ getCountWithId:var] == 0) (void) [((id<JavaUtilMap>) nil_chk(varsToStrings_)) putWithId:var withId:nil];
}

- (NSString *)getStringWithNSString:(NSString *)var {
  return [((id<JavaUtilMap>) nil_chk(varsToStrings_)) getWithId:var];
}

- (NSString *)description {
  JavaLangStringBuilder *s = new_JavaLangStringBuilder_init();
  (void) [s appendWithNSString:@"{"];
  jboolean appended = false;
  for (NSString * __strong key in nil_chk([((id<JavaUtilMap>) nil_chk(varsToStrings_)) keySet])) {
    if (appended) {
      (void) [s appendWithNSString:@","];
    }
    else {
      appended = true;
    }
    (void) [s appendWithNSString:key];
    (void) [s appendWithNSString:@"=("];
    (void) [s appendWithNSString:[varsToStrings_ getWithId:key]];
    (void) [s appendWithNSString:@":"];
    (void) [s appendWithDouble:[((EduStanfordNlpStatsIntCounter *) nil_chk(numVarsSet_)) getCountWithId:key]];
    (void) [s appendWithNSString:@")"];
  }
  (void) [s appendWithNSString:@"}"];
  return [s description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 6, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(reset);
  methods[2].selector = @selector(isSetWithNSString:);
  methods[3].selector = @selector(setVarWithNSString:withNSString:);
  methods[4].selector = @selector(unsetVarWithNSString:);
  methods[5].selector = @selector(getStringWithNSString:);
  methods[6].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "varsToStrings_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 7, -1 },
    { "numVarsSet_", "LEduStanfordNlpStatsIntCounter;", .constantValue.asLong = 0, 0x12, -1, -1, 8, -1 },
  };
  static const void *ptrTable[] = { "isSet", "LNSString;", "setVar", "LNSString;LNSString;", "unsetVar", "getString", "toString", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", "Ledu/stanford/nlp/stats/IntCounter<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpTreesTregexVariableStrings = { "VariableStrings", "edu.stanford.nlp.trees.tregex", ptrTable, methods, fields, 7, 0x0, 7, 2, -1, -1, -1, -1, -1 };
  return &_EduStanfordNlpTreesTregexVariableStrings;
}

@end

void EduStanfordNlpTreesTregexVariableStrings_init(EduStanfordNlpTreesTregexVariableStrings *self) {
  NSObject_init(self);
  self->varsToStrings_ = EduStanfordNlpUtilArrayMap_newArrayMap();
  self->numVarsSet_ = new_EduStanfordNlpStatsIntCounter_initWithEduStanfordNlpUtilMapFactory_(EduStanfordNlpUtilMapFactory_arrayMapFactory());
}

EduStanfordNlpTreesTregexVariableStrings *new_EduStanfordNlpTreesTregexVariableStrings_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesTregexVariableStrings, init)
}

EduStanfordNlpTreesTregexVariableStrings *create_EduStanfordNlpTreesTregexVariableStrings_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesTregexVariableStrings, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTreesTregexVariableStrings)
