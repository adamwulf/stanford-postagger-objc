//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/trees/tregex/TregexPattern.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/io/IOUtils.h"
#include "edu/stanford/nlp/ling/StringLabelFactory.h"
#include "edu/stanford/nlp/trees/CollinsHeadFinder.h"
#include "edu/stanford/nlp/trees/DiskTreebank.h"
#include "edu/stanford/nlp/trees/HeadFinder.h"
#include "edu/stanford/nlp/trees/LabeledScoredTreeFactory.h"
#include "edu/stanford/nlp/trees/MemoryTreebank.h"
#include "edu/stanford/nlp/trees/PennTreeReader.h"
#include "edu/stanford/nlp/trees/PennTreebankLanguagePack.h"
#include "edu/stanford/nlp/trees/Tree.h"
#include "edu/stanford/nlp/trees/TreeNormalizer.h"
#include "edu/stanford/nlp/trees/TreePrint.h"
#include "edu/stanford/nlp/trees/TreeReader.h"
#include "edu/stanford/nlp/trees/TreeReaderFactory.h"
#include "edu/stanford/nlp/trees/TreeVisitor.h"
#include "edu/stanford/nlp/trees/Treebank.h"
#include "edu/stanford/nlp/trees/tregex/Macros.h"
#include "edu/stanford/nlp/trees/tregex/TregexMatcher.h"
#include "edu/stanford/nlp/trees/tregex/TregexParseException.h"
#include "edu/stanford/nlp/trees/tregex/TregexPattern.h"
#include "edu/stanford/nlp/trees/tregex/TregexPatternCompiler.h"
#include "edu/stanford/nlp/trees/tregex/VariableStrings.h"
#include "edu/stanford/nlp/util/ArrayMap.h"
#include "edu/stanford/nlp/util/Generics.h"
#include "edu/stanford/nlp/util/Pair.h"
#include "edu/stanford/nlp/util/StringUtils.h"
#include "edu/stanford/nlp/util/Timing.h"
#include "java/io/BufferedReader.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/InputStreamReader.h"
#include "java/io/OutputStreamWriter.h"
#include "java/io/PrintStream.h"
#include "java/io/PrintWriter.h"
#include "java/io/Reader.h"
#include "java/io/StringReader.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/reflect/Constructor.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collections.h"
#include "java/util/IdentityHashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"

@interface EduStanfordNlpTreesTregexTregexPattern () {
 @public
  jboolean neg_;
  jboolean opt_;
  NSString *patternString_;
}

- (void)prettyPrintWithJavaIoPrintWriter:(JavaIoPrintWriter *)pw
                                 withInt:(jint)indent;

+ (void)extractSubtreesWithJavaUtilList:(id<JavaUtilList>)codeStrings
                           withNSString:(NSString *)treeFile;

+ (id<EduStanfordNlpTreesTreeReaderFactory>)getTreeReaderFactoryWithNSString:(NSString *)treeReaderFactoryClassName;

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpTreesTregexTregexPattern, patternString_, NSString *)

inline JavaUtilRegexPattern *EduStanfordNlpTreesTregexTregexPattern_get_codePattern();
static JavaUtilRegexPattern *EduStanfordNlpTreesTregexTregexPattern_codePattern;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpTreesTregexTregexPattern, codePattern, JavaUtilRegexPattern *)

inline EduStanfordNlpTreesTreebank *EduStanfordNlpTreesTregexTregexPattern_get_treebank();
inline EduStanfordNlpTreesTreebank *EduStanfordNlpTreesTregexTregexPattern_set_treebank(EduStanfordNlpTreesTreebank *value);
static EduStanfordNlpTreesTreebank *EduStanfordNlpTreesTregexTregexPattern_treebank;
J2OBJC_STATIC_FIELD_OBJ(EduStanfordNlpTreesTregexTregexPattern, treebank, EduStanfordNlpTreesTreebank *)

inline jlong EduStanfordNlpTreesTregexTregexPattern_get_serialVersionUID();
#define EduStanfordNlpTreesTregexTregexPattern_serialVersionUID 5060298043763944913LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpTreesTregexTregexPattern, serialVersionUID, jlong)

__attribute__((unused)) static void EduStanfordNlpTreesTregexTregexPattern_prettyPrintWithJavaIoPrintWriter_withInt_(EduStanfordNlpTreesTregexTregexPattern *self, JavaIoPrintWriter *pw, jint indent);

__attribute__((unused)) static void EduStanfordNlpTreesTregexTregexPattern_extractSubtreesWithJavaUtilList_withNSString_(id<JavaUtilList> codeStrings, NSString *treeFile);

__attribute__((unused)) static id<EduStanfordNlpTreesTreeReaderFactory> EduStanfordNlpTreesTregexTregexPattern_getTreeReaderFactoryWithNSString_(NSString *treeReaderFactoryClassName);

@interface EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor : NSObject < EduStanfordNlpTreesTreeVisitor > {
 @public
  JavaIoPrintWriter *pw_;
  jint treeNumber_;
  EduStanfordNlpTreesTregexTregexPattern *p_;
  IOSObjectArray *handles_;
  jint numMatches_;
}

- (instancetype)initWithEduStanfordNlpTreesTregexTregexPattern:(EduStanfordNlpTreesTregexTregexPattern *)p
                                             withNSStringArray:(IOSObjectArray *)handles
                                                  withNSString:(NSString *)encoding;

- (void)visitTreeWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t;

- (jint)numMatches;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor)

J2OBJC_FIELD_SETTER(EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor, pw_, JavaIoPrintWriter *)
J2OBJC_FIELD_SETTER(EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor, p_, EduStanfordNlpTreesTregexTregexPattern *)
J2OBJC_FIELD_SETTER(EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor, handles_, IOSObjectArray *)

inline jboolean EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor_get_printNumMatchesToStdOut();
inline jboolean EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor_set_printNumMatchesToStdOut(jboolean value);
inline jboolean *EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor_getRef_printNumMatchesToStdOut();
static jboolean EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor_printNumMatchesToStdOut = false;
J2OBJC_STATIC_FIELD_PRIMITIVE(EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor, printNumMatchesToStdOut, jboolean)

inline jboolean EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor_get_printNonMatchingTrees();
inline jboolean EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor_set_printNonMatchingTrees(jboolean value);
inline jboolean *EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor_getRef_printNonMatchingTrees();
static jboolean EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor_printNonMatchingTrees = false;
J2OBJC_STATIC_FIELD_PRIMITIVE(EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor, printNonMatchingTrees, jboolean)

inline jboolean EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor_get_printSubtreeCode();
inline jboolean EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor_set_printSubtreeCode(jboolean value);
inline jboolean *EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor_getRef_printSubtreeCode();
static jboolean EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor_printSubtreeCode = false;
J2OBJC_STATIC_FIELD_PRIMITIVE(EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor, printSubtreeCode, jboolean)

inline jboolean EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor_get_printTree();
inline jboolean EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor_set_printTree(jboolean value);
inline jboolean *EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor_getRef_printTree();
static jboolean EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor_printTree = false;
J2OBJC_STATIC_FIELD_PRIMITIVE(EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor, printTree, jboolean)

inline jboolean EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor_get_printWholeTree();
inline jboolean EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor_set_printWholeTree(jboolean value);
inline jboolean *EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor_getRef_printWholeTree();
static jboolean EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor_printWholeTree = false;
J2OBJC_STATIC_FIELD_PRIMITIVE(EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor, printWholeTree, jboolean)

inline jboolean EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor_get_printMatches();
inline jboolean EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor_set_printMatches(jboolean value);
inline jboolean *EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor_getRef_printMatches();
static jboolean EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor_printMatches = true;
J2OBJC_STATIC_FIELD_PRIMITIVE(EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor, printMatches, jboolean)

inline jboolean EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor_get_printFilename();
inline jboolean EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor_set_printFilename(jboolean value);
inline jboolean *EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor_getRef_printFilename();
static jboolean EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor_printFilename = false;
J2OBJC_STATIC_FIELD_PRIMITIVE(EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor, printFilename, jboolean)

inline jboolean EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor_get_oneMatchPerRootNode();
inline jboolean EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor_set_oneMatchPerRootNode(jboolean value);
inline jboolean *EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor_getRef_oneMatchPerRootNode();
static jboolean EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor_oneMatchPerRootNode = false;
J2OBJC_STATIC_FIELD_PRIMITIVE(EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor, oneMatchPerRootNode, jboolean)

inline jboolean EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor_get_reportTreeNumbers();
inline jboolean EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor_set_reportTreeNumbers(jboolean value);
inline jboolean *EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor_getRef_reportTreeNumbers();
static jboolean EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor_reportTreeNumbers = false;
J2OBJC_STATIC_FIELD_PRIMITIVE(EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor, reportTreeNumbers, jboolean)

inline EduStanfordNlpTreesTreePrint *EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor_get_tp();
inline EduStanfordNlpTreesTreePrint *EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor_set_tp(EduStanfordNlpTreesTreePrint *value);
static EduStanfordNlpTreesTreePrint *EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor_tp;
J2OBJC_STATIC_FIELD_OBJ(EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor, tp, EduStanfordNlpTreesTreePrint *)

__attribute__((unused)) static void EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor_initWithEduStanfordNlpTreesTregexTregexPattern_withNSStringArray_withNSString_(EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor *self, EduStanfordNlpTreesTregexTregexPattern *p, IOSObjectArray *handles, NSString *encoding);

__attribute__((unused)) static EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor *new_EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor_initWithEduStanfordNlpTreesTregexTregexPattern_withNSStringArray_withNSString_(EduStanfordNlpTreesTregexTregexPattern *p, IOSObjectArray *handles, NSString *encoding) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor *create_EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor_initWithEduStanfordNlpTreesTregexTregexPattern_withNSStringArray_withNSString_(EduStanfordNlpTreesTregexTregexPattern *p, IOSObjectArray *handles, NSString *encoding);

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor)

@interface EduStanfordNlpTreesTregexTregexPattern_TRegexTreeReaderFactory () {
 @public
  EduStanfordNlpTreesTreeNormalizer *tn_;
}

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpTreesTregexTregexPattern_TRegexTreeReaderFactory, tn_, EduStanfordNlpTreesTreeNormalizer *)

@interface EduStanfordNlpTreesTregexTregexPattern_TRegexTreeReaderFactory_$1 : EduStanfordNlpTreesTreeNormalizer

- (NSString *)normalizeNonterminalWithNSString:(NSString *)str;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpTreesTregexTregexPattern_TRegexTreeReaderFactory_$1)

inline jlong EduStanfordNlpTreesTregexTregexPattern_TRegexTreeReaderFactory_$1_get_serialVersionUID();
#define EduStanfordNlpTreesTregexTregexPattern_TRegexTreeReaderFactory_$1_serialVersionUID -2998972954089638189LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpTreesTregexTregexPattern_TRegexTreeReaderFactory_$1, serialVersionUID, jlong)

__attribute__((unused)) static void EduStanfordNlpTreesTregexTregexPattern_TRegexTreeReaderFactory_$1_init(EduStanfordNlpTreesTregexTregexPattern_TRegexTreeReaderFactory_$1 *self);

__attribute__((unused)) static EduStanfordNlpTreesTregexTregexPattern_TRegexTreeReaderFactory_$1 *new_EduStanfordNlpTreesTregexTregexPattern_TRegexTreeReaderFactory_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpTreesTregexTregexPattern_TRegexTreeReaderFactory_$1 *create_EduStanfordNlpTreesTregexTregexPattern_TRegexTreeReaderFactory_$1_init();

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpTreesTregexTregexPattern)

@implementation EduStanfordNlpTreesTregexTregexPattern

- (void)negate {
  neg_ = true;
  if (opt_) {
    @throw new_JavaLangRuntimeException_initWithNSString_(@"Node cannot be both negated and optional.");
  }
}

- (void)makeOptional {
  opt_ = true;
  if (neg_) {
    @throw new_JavaLangRuntimeException_initWithNSString_(@"Node cannot be both negated and optional.");
  }
}

- (void)prettyPrintWithJavaIoPrintWriter:(JavaIoPrintWriter *)pw
                                 withInt:(jint)indent {
  EduStanfordNlpTreesTregexTregexPattern_prettyPrintWithJavaIoPrintWriter_withInt_(self, pw, indent);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpTreesTregexTregexPattern_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilList>)getChildren {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)localString {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)isNegated {
  return neg_;
}

- (jboolean)isOptional {
  return opt_;
}

- (EduStanfordNlpTreesTregexTregexMatcher *)matcherWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)root
                                                   withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)tree
                                                   withJavaUtilIdentityHashMap:(JavaUtilIdentityHashMap *)nodesToParents
                                                               withJavaUtilMap:(id<JavaUtilMap>)namesToNodes
                                  withEduStanfordNlpTreesTregexVariableStrings:(EduStanfordNlpTreesTregexVariableStrings *)variableStrings
                                             withEduStanfordNlpTreesHeadFinder:(id<EduStanfordNlpTreesHeadFinder>)headFinder {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (EduStanfordNlpTreesTregexTregexMatcher *)matcherWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t {
  return [self matcherWithEduStanfordNlpTreesTree:t withEduStanfordNlpTreesTree:t withJavaUtilIdentityHashMap:nil withJavaUtilMap:EduStanfordNlpUtilArrayMap_newArrayMap() withEduStanfordNlpTreesTregexVariableStrings:new_EduStanfordNlpTreesTregexVariableStrings_init() withEduStanfordNlpTreesHeadFinder:nil];
}

- (EduStanfordNlpTreesTregexTregexMatcher *)matcherWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
                                             withEduStanfordNlpTreesHeadFinder:(id<EduStanfordNlpTreesHeadFinder>)headFinder {
  return [self matcherWithEduStanfordNlpTreesTree:t withEduStanfordNlpTreesTree:t withJavaUtilIdentityHashMap:nil withJavaUtilMap:EduStanfordNlpUtilArrayMap_newArrayMap() withEduStanfordNlpTreesTregexVariableStrings:new_EduStanfordNlpTreesTregexVariableStrings_init() withEduStanfordNlpTreesHeadFinder:headFinder];
}

+ (EduStanfordNlpTreesTregexTregexPattern *)compileWithNSString:(NSString *)tregex {
  return EduStanfordNlpTreesTregexTregexPattern_compileWithNSString_(tregex);
}

+ (EduStanfordNlpTreesTregexTregexPattern *)safeCompileWithNSString:(NSString *)tregex
                                                        withBoolean:(jboolean)verbose {
  return EduStanfordNlpTreesTregexTregexPattern_safeCompileWithNSString_withBoolean_(tregex, verbose);
}

- (NSString *)pattern {
  return patternString_;
}

- (void)setPatternStringWithNSString:(NSString *)patternString {
  self->patternString_ = patternString;
}

- (NSString *)description {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)prettyPrintWithJavaIoPrintWriter:(JavaIoPrintWriter *)pw {
  EduStanfordNlpTreesTregexTregexPattern_prettyPrintWithJavaIoPrintWriter_withInt_(self, pw, 0);
}

- (void)prettyPrintWithJavaIoPrintStream:(JavaIoPrintStream *)ps {
  [self prettyPrintWithJavaIoPrintWriter:new_JavaIoPrintWriter_initWithJavaIoWriter_withBoolean_(new_JavaIoOutputStreamWriter_initWithJavaIoOutputStream_(ps), true)];
}

- (void)prettyPrint {
  [self prettyPrintWithJavaIoPrintStream:JreLoadStatic(JavaLangSystem, out)];
}

+ (void)extractSubtreesWithJavaUtilList:(id<JavaUtilList>)codeStrings
                           withNSString:(NSString *)treeFile {
  EduStanfordNlpTreesTregexTregexPattern_extractSubtreesWithJavaUtilList_withNSString_(codeStrings, treeFile);
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  EduStanfordNlpTreesTregexTregexPattern_mainWithNSStringArray_(args);
}

+ (id<EduStanfordNlpTreesTreeReaderFactory>)getTreeReaderFactoryWithNSString:(NSString *)treeReaderFactoryClassName {
  return EduStanfordNlpTreesTregexTregexPattern_getTreeReaderFactoryWithNSString_(treeReaderFactoryClassName);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x400, -1, -1, -1, 2, -1, -1 },
    { NULL, "LNSString;", 0x400, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTregexTregexMatcher;", 0x400, 3, 4, -1, 5, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTregexTregexMatcher;", 0x1, 3, 6, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTregexTregexMatcher;", 0x1, 3, 7, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTregexTregexPattern;", 0x9, 8, 9, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTregexTregexPattern;", 0x9, 10, 11, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 12, 9, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, 13, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 16, 17, -1, 18, -1, -1 },
    { NULL, "V", 0x9, 19, 20, 21, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTreeReaderFactory;", 0xa, 22, 9, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(negate);
  methods[1].selector = @selector(makeOptional);
  methods[2].selector = @selector(prettyPrintWithJavaIoPrintWriter:withInt:);
  methods[3].selector = @selector(init);
  methods[4].selector = @selector(getChildren);
  methods[5].selector = @selector(localString);
  methods[6].selector = @selector(isNegated);
  methods[7].selector = @selector(isOptional);
  methods[8].selector = @selector(matcherWithEduStanfordNlpTreesTree:withEduStanfordNlpTreesTree:withJavaUtilIdentityHashMap:withJavaUtilMap:withEduStanfordNlpTreesTregexVariableStrings:withEduStanfordNlpTreesHeadFinder:);
  methods[9].selector = @selector(matcherWithEduStanfordNlpTreesTree:);
  methods[10].selector = @selector(matcherWithEduStanfordNlpTreesTree:withEduStanfordNlpTreesHeadFinder:);
  methods[11].selector = @selector(compileWithNSString:);
  methods[12].selector = @selector(safeCompileWithNSString:withBoolean:);
  methods[13].selector = @selector(pattern);
  methods[14].selector = @selector(setPatternStringWithNSString:);
  methods[15].selector = @selector(description);
  methods[16].selector = @selector(prettyPrintWithJavaIoPrintWriter:);
  methods[17].selector = @selector(prettyPrintWithJavaIoPrintStream:);
  methods[18].selector = @selector(prettyPrint);
  methods[19].selector = @selector(extractSubtreesWithJavaUtilList:withNSString:);
  methods[20].selector = @selector(mainWithNSStringArray:);
  methods[21].selector = @selector(getTreeReaderFactoryWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "neg_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "opt_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "patternString_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "codePattern", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 23, -1, -1 },
    { "treebank", "LEduStanfordNlpTreesTreebank;", .constantValue.asLong = 0, 0xa, -1, 24, -1, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpTreesTregexTregexPattern_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "prettyPrint", "LJavaIoPrintWriter;I", "()Ljava/util/List<Ledu/stanford/nlp/trees/tregex/TregexPattern;>;", "matcher", "LEduStanfordNlpTreesTree;LEduStanfordNlpTreesTree;LJavaUtilIdentityHashMap;LJavaUtilMap;LEduStanfordNlpTreesTregexVariableStrings;LEduStanfordNlpTreesHeadFinder;", "(Ledu/stanford/nlp/trees/Tree;Ledu/stanford/nlp/trees/Tree;Ljava/util/IdentityHashMap<Ledu/stanford/nlp/trees/Tree;Ledu/stanford/nlp/trees/Tree;>;Ljava/util/Map<Ljava/lang/String;Ledu/stanford/nlp/trees/Tree;>;Ledu/stanford/nlp/trees/tregex/VariableStrings;Ledu/stanford/nlp/trees/HeadFinder;)Ledu/stanford/nlp/trees/tregex/TregexMatcher;", "LEduStanfordNlpTreesTree;", "LEduStanfordNlpTreesTree;LEduStanfordNlpTreesHeadFinder;", "compile", "LNSString;", "safeCompile", "LNSString;Z", "setPatternString", "toString", "LJavaIoPrintWriter;", "LJavaIoPrintStream;", "extractSubtrees", "LJavaUtilList;LNSString;", "(Ljava/util/List<Ljava/lang/String;>;Ljava/lang/String;)V", "main", "[LNSString;", "LJavaIoIOException;", "getTreeReaderFactory", &EduStanfordNlpTreesTregexTregexPattern_codePattern, &EduStanfordNlpTreesTregexTregexPattern_treebank, "LEduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor;LEduStanfordNlpTreesTregexTregexPattern_TRegexTreeReaderFactory;" };
  static const J2ObjcClassInfo _EduStanfordNlpTreesTregexTregexPattern = { "TregexPattern", "edu.stanford.nlp.trees.tregex", ptrTable, methods, fields, 7, 0x401, 22, 6, -1, 25, -1, -1, -1 };
  return &_EduStanfordNlpTreesTregexTregexPattern;
}

+ (void)initialize {
  if (self == [EduStanfordNlpTreesTregexTregexPattern class]) {
    EduStanfordNlpTreesTregexTregexPattern_codePattern = JavaUtilRegexPattern_compileWithNSString_(@"([0-9]+):([0-9]+)");
    J2OBJC_SET_INITIALIZED(EduStanfordNlpTreesTregexTregexPattern)
  }
}

@end

void EduStanfordNlpTreesTregexTregexPattern_prettyPrintWithJavaIoPrintWriter_withInt_(EduStanfordNlpTreesTregexTregexPattern *self, JavaIoPrintWriter *pw, jint indent) {
  for (jint i = 0; i < indent; i++) {
    [((JavaIoPrintWriter *) nil_chk(pw)) printWithNSString:@"   "];
  }
  if (self->neg_) {
    [((JavaIoPrintWriter *) nil_chk(pw)) printWithChar:'!'];
  }
  if (self->opt_) {
    [((JavaIoPrintWriter *) nil_chk(pw)) printWithChar:'?'];
  }
  [((JavaIoPrintWriter *) nil_chk(pw)) printlnWithNSString:[self localString]];
  for (EduStanfordNlpTreesTregexTregexPattern * __strong child in nil_chk([self getChildren])) {
    EduStanfordNlpTreesTregexTregexPattern_prettyPrintWithJavaIoPrintWriter_withInt_(nil_chk(child), pw, indent + 1);
  }
}

void EduStanfordNlpTreesTregexTregexPattern_init(EduStanfordNlpTreesTregexTregexPattern *self) {
  NSObject_init(self);
  self->neg_ = false;
  self->opt_ = false;
}

EduStanfordNlpTreesTregexTregexPattern *EduStanfordNlpTreesTregexTregexPattern_compileWithNSString_(NSString *tregex) {
  EduStanfordNlpTreesTregexTregexPattern_initialize();
  return [((EduStanfordNlpTreesTregexTregexPatternCompiler *) nil_chk(JreLoadStatic(EduStanfordNlpTreesTregexTregexPatternCompiler, defaultCompiler))) compileWithNSString:tregex];
}

EduStanfordNlpTreesTregexTregexPattern *EduStanfordNlpTreesTregexTregexPattern_safeCompileWithNSString_withBoolean_(NSString *tregex, jboolean verbose) {
  EduStanfordNlpTreesTregexTregexPattern_initialize();
  EduStanfordNlpTreesTregexTregexPattern *result = nil;
  @try {
    result = [((EduStanfordNlpTreesTregexTregexPatternCompiler *) nil_chk(JreLoadStatic(EduStanfordNlpTreesTregexTregexPatternCompiler, defaultCompiler))) compileWithNSString:tregex];
  }
  @catch (EduStanfordNlpTreesTregexTregexParseException *ex) {
    if (verbose) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$C", @"Could not parse ", tregex, ':')];
      [((EduStanfordNlpTreesTregexTregexParseException *) nil_chk(ex)) printStackTrace];
    }
  }
  return result;
}

void EduStanfordNlpTreesTregexTregexPattern_extractSubtreesWithJavaUtilList_withNSString_(id<JavaUtilList> codeStrings, NSString *treeFile) {
  EduStanfordNlpTreesTregexTregexPattern_initialize();
  id<JavaUtilList> codes = new_JavaUtilArrayList_init();
  for (NSString * __strong s in nil_chk(codeStrings)) {
    JavaUtilRegexMatcher *m = [((JavaUtilRegexPattern *) nil_chk(EduStanfordNlpTreesTregexTregexPattern_codePattern)) matcherWithJavaLangCharSequence:s];
    if ([((JavaUtilRegexMatcher *) nil_chk(m)) matches]) [codes addWithId:new_EduStanfordNlpUtilPair_initWithId_withId_(JavaLangInteger_valueOfWithInt_(JavaLangInteger_parseIntWithNSString_([m groupWithInt:1])), JavaLangInteger_valueOfWithInt_(JavaLangInteger_parseIntWithNSString_([m groupWithInt:2])))];
    else @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$", @"Error: illegal node code ", s));
  }
  id<EduStanfordNlpTreesTreeReaderFactory> trf = new_EduStanfordNlpTreesTregexTregexPattern_TRegexTreeReaderFactory_init();
  EduStanfordNlpTreesMemoryTreebank *treebank = new_EduStanfordNlpTreesMemoryTreebank_initWithEduStanfordNlpTreesTreeReaderFactory_(trf);
  [treebank loadPathWithNSString:treeFile withNSString:nil withBoolean:true];
  for (EduStanfordNlpUtilPair * __strong code in codes) {
    EduStanfordNlpTreesTree *t = [treebank getWithInt:[((JavaLangInteger *) nil_chk([((EduStanfordNlpUtilPair *) nil_chk(code)) first])) intValue] - 1];
    [((EduStanfordNlpTreesTree *) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(t)) getNodeNumberWithInt:[((JavaLangInteger *) nil_chk([code second])) intValue]])) pennPrint];
  }
}

void EduStanfordNlpTreesTregexTregexPattern_mainWithNSStringArray_(IOSObjectArray *args) {
  EduStanfordNlpTreesTregexTregexPattern_initialize();
  EduStanfordNlpUtilTiming_startTime();
  JavaLangStringBuilder *treePrintFormats = new_JavaLangStringBuilder_init();
  NSString *printNonMatchingTreesOption = @"-v";
  NSString *subtreeCodeOption = @"-x";
  NSString *extractSubtreesOption = @"-extract";
  NSString *extractSubtreesFileOption = @"-extractFile";
  NSString *inputFileOption = @"-i";
  NSString *headFinderOption = @"-hf";
  NSString *headFinderArgOption = @"-hfArg";
  NSString *trfOption = @"-trf";
  NSString *extensionOption = @"-e";
  NSString *extension = nil;
  NSString *headFinderClassName = nil;
  IOSObjectArray *headFinderArgs = JreLoadStatic(EduStanfordNlpUtilStringUtils, EMPTY_STRING_ARRAY);
  NSString *treeReaderFactoryClassName = nil;
  NSString *printHandleOption = @"-h";
  NSString *markHandleOption = @"-k";
  NSString *encodingOption = @"-encoding";
  NSString *encoding = @"UTF-8";
  NSString *macroOption = @"-macros";
  NSString *macroFilename = @"";
  NSString *yieldOnly = @"-t";
  NSString *printAllTrees = @"-T";
  NSString *quietMode = @"-C";
  NSString *wholeTreeMode = @"-w";
  NSString *filenameOption = @"-f";
  NSString *oneMatchPerRootNodeMode = @"-o";
  NSString *reportTreeNumbers = @"-n";
  NSString *rootLabelOnly = @"-u";
  NSString *oneLine = @"-s";
  id<JavaUtilMap> flagMap = EduStanfordNlpUtilGenerics_newHashMap();
  (void) [((id<JavaUtilMap>) nil_chk(flagMap)) putWithId:extractSubtreesOption withId:JavaLangInteger_valueOfWithInt_(2)];
  (void) [flagMap putWithId:extractSubtreesFileOption withId:JavaLangInteger_valueOfWithInt_(2)];
  (void) [flagMap putWithId:subtreeCodeOption withId:JavaLangInteger_valueOfWithInt_(0)];
  (void) [flagMap putWithId:printNonMatchingTreesOption withId:JavaLangInteger_valueOfWithInt_(0)];
  (void) [flagMap putWithId:encodingOption withId:JavaLangInteger_valueOfWithInt_(1)];
  (void) [flagMap putWithId:inputFileOption withId:JavaLangInteger_valueOfWithInt_(1)];
  (void) [flagMap putWithId:printHandleOption withId:JavaLangInteger_valueOfWithInt_(1)];
  (void) [flagMap putWithId:markHandleOption withId:JavaLangInteger_valueOfWithInt_(2)];
  (void) [flagMap putWithId:headFinderOption withId:JavaLangInteger_valueOfWithInt_(1)];
  (void) [flagMap putWithId:headFinderArgOption withId:JavaLangInteger_valueOfWithInt_(1)];
  (void) [flagMap putWithId:trfOption withId:JavaLangInteger_valueOfWithInt_(1)];
  (void) [flagMap putWithId:extensionOption withId:JavaLangInteger_valueOfWithInt_(1)];
  (void) [flagMap putWithId:macroOption withId:JavaLangInteger_valueOfWithInt_(1)];
  (void) [flagMap putWithId:yieldOnly withId:JavaLangInteger_valueOfWithInt_(0)];
  (void) [flagMap putWithId:quietMode withId:JavaLangInteger_valueOfWithInt_(0)];
  (void) [flagMap putWithId:wholeTreeMode withId:JavaLangInteger_valueOfWithInt_(0)];
  (void) [flagMap putWithId:printAllTrees withId:JavaLangInteger_valueOfWithInt_(0)];
  (void) [flagMap putWithId:filenameOption withId:JavaLangInteger_valueOfWithInt_(0)];
  (void) [flagMap putWithId:oneMatchPerRootNodeMode withId:JavaLangInteger_valueOfWithInt_(0)];
  (void) [flagMap putWithId:reportTreeNumbers withId:JavaLangInteger_valueOfWithInt_(0)];
  (void) [flagMap putWithId:rootLabelOnly withId:JavaLangInteger_valueOfWithInt_(0)];
  (void) [flagMap putWithId:oneLine withId:JavaLangInteger_valueOfWithInt_(0)];
  id<JavaUtilMap> argsMap = EduStanfordNlpUtilStringUtils_argsToMapWithNSStringArray_withJavaUtilMap_(args, flagMap);
  args = [((id<JavaUtilMap>) nil_chk(argsMap)) getWithId:nil];
  if ([argsMap containsKeyWithId:encodingOption]) {
    encoding = IOSObjectArray_Get(nil_chk([argsMap getWithId:encodingOption]), 0);
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$", @"Encoding set to ", encoding)];
  }
  JavaIoPrintWriter *errPW = new_JavaIoPrintWriter_initWithJavaIoWriter_withBoolean_(new_JavaIoOutputStreamWriter_initWithJavaIoOutputStream_withNSString_(JreLoadStatic(JavaLangSystem, err), encoding), true);
  if ([argsMap containsKeyWithId:extractSubtreesOption]) {
    id<JavaUtilList> subTreeStrings = JavaUtilCollections_singletonListWithId_(IOSObjectArray_Get(nil_chk([argsMap getWithId:extractSubtreesOption]), 0));
    EduStanfordNlpTreesTregexTregexPattern_extractSubtreesWithJavaUtilList_withNSString_(subTreeStrings, IOSObjectArray_Get(nil_chk([argsMap getWithId:extractSubtreesOption]), 1));
    return;
  }
  if ([argsMap containsKeyWithId:extractSubtreesFileOption]) {
    id<JavaUtilList> subTreeStrings = JavaUtilArrays_asListWithNSObjectArray_([((NSString *) nil_chk(EduStanfordNlpIoIOUtils_slurpFileWithNSString_(IOSObjectArray_Get(nil_chk([argsMap getWithId:extractSubtreesFileOption]), 0)))) split:@"\n|\x0d|\n\x0d"]);
    EduStanfordNlpTreesTregexTregexPattern_extractSubtreesWithJavaUtilList_withNSString_(subTreeStrings, IOSObjectArray_Get(nil_chk([argsMap getWithId:extractSubtreesFileOption]), 0));
    return;
  }
  if (((IOSObjectArray *) nil_chk(args))->size_ < 1) {
    [errPW printlnWithNSString:@"Usage: java edu.stanford.nlp.trees.tregex.TregexPattern [-T] [-C] [-w] [-f] [-o] [-n] [-s] [-filter]  [-hf class] [-trf class] [-h handle]* [-e ext] pattern [filepath]"];
    return;
  }
  NSString *matchString = IOSObjectArray_Get(args, 0);
  if ([argsMap containsKeyWithId:macroOption]) {
    macroFilename = IOSObjectArray_Get(nil_chk([argsMap getWithId:macroOption]), 0);
  }
  if ([argsMap containsKeyWithId:headFinderOption]) {
    headFinderClassName = IOSObjectArray_Get(nil_chk([argsMap getWithId:headFinderOption]), 0);
    [errPW printlnWithNSString:JreStrcat("$$$", @"Using head finder ", headFinderClassName, @"...")];
  }
  if ([argsMap containsKeyWithId:headFinderArgOption]) {
    headFinderArgs = [argsMap getWithId:headFinderArgOption];
  }
  if ([argsMap containsKeyWithId:trfOption]) {
    treeReaderFactoryClassName = IOSObjectArray_Get(nil_chk([argsMap getWithId:trfOption]), 0);
    [errPW printlnWithNSString:JreStrcat("$$$", @"Using tree reader factory ", treeReaderFactoryClassName, @"...")];
  }
  if ([argsMap containsKeyWithId:extensionOption]) {
    extension = IOSObjectArray_Get(nil_chk([argsMap getWithId:extensionOption]), 0);
  }
  if ([argsMap containsKeyWithId:printAllTrees]) {
    *JreLoadStaticRef(EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor, printTree) = true;
  }
  if ([argsMap containsKeyWithId:inputFileOption]) {
    NSString *inputFile = IOSObjectArray_Get(nil_chk([argsMap getWithId:inputFileOption]), 0);
    matchString = EduStanfordNlpIoIOUtils_slurpFileWithNSString_withNSString_(inputFile, encoding);
    IOSObjectArray *newArgs = [IOSObjectArray newArrayWithLength:args->size_ + 1 type:NSString_class_()];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(args, 0, newArgs, 1, args->size_);
    args = newArgs;
  }
  if ([argsMap containsKeyWithId:quietMode]) {
    *JreLoadStaticRef(EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor, printMatches) = false;
    *JreLoadStaticRef(EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor, printNumMatchesToStdOut) = true;
  }
  if ([argsMap containsKeyWithId:printNonMatchingTreesOption]) {
    *JreLoadStaticRef(EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor, printNonMatchingTrees) = true;
  }
  if ([argsMap containsKeyWithId:subtreeCodeOption]) {
    *JreLoadStaticRef(EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor, printSubtreeCode) = true;
    *JreLoadStaticRef(EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor, printMatches) = false;
  }
  if ([argsMap containsKeyWithId:wholeTreeMode]) {
    *JreLoadStaticRef(EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor, printWholeTree) = true;
  }
  if ([argsMap containsKeyWithId:filenameOption]) {
    *JreLoadStaticRef(EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor, printFilename) = true;
  }
  if ([argsMap containsKeyWithId:oneMatchPerRootNodeMode]) *JreLoadStaticRef(EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor, oneMatchPerRootNode) = true;
  if ([argsMap containsKeyWithId:reportTreeNumbers]) *JreLoadStaticRef(EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor, reportTreeNumbers) = true;
  if ([argsMap containsKeyWithId:rootLabelOnly]) {
    (void) [((JavaLangStringBuilder *) nil_chk([treePrintFormats appendWithNSString:EduStanfordNlpTreesTreePrint_rootLabelOnlyFormat])) appendWithChar:','];
  }
  else if ([argsMap containsKeyWithId:oneLine]) {
    (void) [treePrintFormats appendWithNSString:@"oneline,"];
  }
  else if ([argsMap containsKeyWithId:yieldOnly]) {
    (void) [treePrintFormats appendWithNSString:@"words,"];
  }
  else {
    (void) [treePrintFormats appendWithNSString:@"penn,"];
  }
  id<EduStanfordNlpTreesHeadFinder> hf = new_EduStanfordNlpTreesCollinsHeadFinder_init();
  if (headFinderClassName != nil) {
    IOSObjectArray *hfArgClasses = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(headFinderArgs))->size_ type:IOSClass_class_()];
    for (jint i = 0; i < hfArgClasses->size_; i++) (void) IOSObjectArray_Set(hfArgClasses, i, NSString_class_());
    @try {
      hf = (id<EduStanfordNlpTreesHeadFinder>) cast_check([((JavaLangReflectConstructor *) nil_chk([((IOSClass *) nil_chk(IOSClass_forName_(headFinderClassName))) getConstructor:hfArgClasses])) newInstanceWithNSObjectArray:headFinderArgs], EduStanfordNlpTreesHeadFinder_class_());
    }
    @catch (JavaLangException *e) {
      @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$@", @"Error occurred while constructing HeadFinder: ", e));
    }
  }
  *JreLoadStaticRef(EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor, tp) = new_EduStanfordNlpTreesTreePrint_initWithNSString_withEduStanfordNlpTreesTreebankLanguagePack_([treePrintFormats description], new_EduStanfordNlpTreesPennTreebankLanguagePack_init());
  @try {
    EduStanfordNlpTreesTregexTregexPatternCompiler *tpc = new_EduStanfordNlpTreesTregexTregexPatternCompiler_initWithEduStanfordNlpTreesHeadFinder_(hf);
    EduStanfordNlpTreesTregexMacros_addAllMacrosWithEduStanfordNlpTreesTregexTregexPatternCompiler_withNSString_withNSString_(tpc, macroFilename, encoding);
    EduStanfordNlpTreesTregexTregexPattern *p = [tpc compileWithNSString:matchString];
    [errPW printlnWithNSString:JreStrcat("$$", @"Pattern string:\n", [((EduStanfordNlpTreesTregexTregexPattern *) nil_chk(p)) pattern])];
    [errPW printlnWithNSString:@"Parsed representation:"];
    [p prettyPrintWithJavaIoPrintWriter:errPW];
    IOSObjectArray *handles = [argsMap getWithId:printHandleOption];
    if ([argsMap containsKeyWithId:@"-filter"]) {
      id<EduStanfordNlpTreesTreeReaderFactory> trf = EduStanfordNlpTreesTregexTregexPattern_getTreeReaderFactoryWithNSString_(treeReaderFactoryClassName);
      EduStanfordNlpTreesTregexTregexPattern_treebank = new_EduStanfordNlpTreesMemoryTreebank_initWithEduStanfordNlpTreesTreeReaderFactory_withNSString_(trf, encoding);
      JavaIoReader *reader = new_JavaIoBufferedReader_initWithJavaIoReader_(new_JavaIoInputStreamReader_initWithJavaIoInputStream_withNSString_(JreLoadStatic(JavaLangSystem, in), encoding));
      [((EduStanfordNlpTreesMemoryTreebank *) nil_chk(((EduStanfordNlpTreesMemoryTreebank *) cast_chk(EduStanfordNlpTreesTregexTregexPattern_treebank, [EduStanfordNlpTreesMemoryTreebank class])))) load__WithJavaIoReader:reader];
      [reader close];
    }
    else if (args->size_ == 1) {
      [errPW printlnWithNSString:@"using default tree"];
      id<EduStanfordNlpTreesTreeReader> r = new_EduStanfordNlpTreesPennTreeReader_initWithJavaIoReader_withEduStanfordNlpTreesTreeFactory_(new_JavaIoStringReader_initWithNSString_(@"(VP (VP (VBZ Try) (NP (NP (DT this) (NN wine)) (CC and) (NP (DT these) (NNS snails)))) (PUNCT .))"), new_EduStanfordNlpTreesLabeledScoredTreeFactory_initWithEduStanfordNlpLingLabelFactory_(new_EduStanfordNlpLingStringLabelFactory_init()));
      EduStanfordNlpTreesTree *t = [r readTree];
      EduStanfordNlpTreesTregexTregexPattern_treebank = new_EduStanfordNlpTreesMemoryTreebank_init();
      [EduStanfordNlpTreesTregexTregexPattern_treebank addWithId:t];
    }
    else {
      jint last = args->size_ - 1;
      [errPW printlnWithNSString:JreStrcat("$$", @"Reading trees from file(s) ", IOSObjectArray_Get(args, last))];
      id<EduStanfordNlpTreesTreeReaderFactory> trf = EduStanfordNlpTreesTregexTregexPattern_getTreeReaderFactoryWithNSString_(treeReaderFactoryClassName);
      EduStanfordNlpTreesTregexTregexPattern_treebank = new_EduStanfordNlpTreesDiskTreebank_initWithEduStanfordNlpTreesTreeReaderFactory_withNSString_(trf, encoding);
      [EduStanfordNlpTreesTregexTregexPattern_treebank loadPathWithNSString:IOSObjectArray_Get(args, last) withNSString:extension withBoolean:true];
    }
    EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor *vis = new_EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor_initWithEduStanfordNlpTreesTregexTregexPattern_withNSStringArray_withNSString_(p, handles, encoding);
    [((EduStanfordNlpTreesTreebank *) nil_chk(EduStanfordNlpTreesTregexTregexPattern_treebank)) applyWithEduStanfordNlpTreesTreeVisitor:vis];
    EduStanfordNlpUtilTiming_endTime();
    if (JreLoadStatic(EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor, printMatches)) {
      [errPW printlnWithNSString:JreStrcat("$I$", @"There were ", [vis numMatches], @" matches in total.")];
    }
    if (JreLoadStatic(EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor, printNumMatchesToStdOut)) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithInt:[vis numMatches]];
    }
  }
  @catch (JavaIoIOException *e) {
    [((JavaIoIOException *) nil_chk(e)) printStackTrace];
  }
  @catch (EduStanfordNlpTreesTregexTregexParseException *e) {
    [errPW printlnWithNSString:JreStrcat("$$", @"Error parsing expression: ", IOSObjectArray_Get(args, 0))];
    [errPW printlnWithNSString:JreStrcat("$$", @"Parse exception: ", [((EduStanfordNlpTreesTregexTregexParseException *) nil_chk(e)) description])];
  }
}

id<EduStanfordNlpTreesTreeReaderFactory> EduStanfordNlpTreesTregexTregexPattern_getTreeReaderFactoryWithNSString_(NSString *treeReaderFactoryClassName) {
  EduStanfordNlpTreesTregexTregexPattern_initialize();
  id<EduStanfordNlpTreesTreeReaderFactory> trf = new_EduStanfordNlpTreesTregexTregexPattern_TRegexTreeReaderFactory_init();
  if (treeReaderFactoryClassName != nil) {
    @try {
      trf = (id<EduStanfordNlpTreesTreeReaderFactory>) cast_check([((IOSClass *) nil_chk(IOSClass_forName_(treeReaderFactoryClassName))) newInstance], EduStanfordNlpTreesTreeReaderFactory_class_());
    }
    @catch (JavaLangException *e) {
      @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$@", @"Error occurred while constructing TreeReaderFactory: ", e));
    }
  }
  return trf;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTreesTregexTregexPattern)

@implementation EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor

- (instancetype)initWithEduStanfordNlpTreesTregexTregexPattern:(EduStanfordNlpTreesTregexTregexPattern *)p
                                             withNSStringArray:(IOSObjectArray *)handles
                                                  withNSString:(NSString *)encoding {
  EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor_initWithEduStanfordNlpTreesTregexTregexPattern_withNSStringArray_withNSString_(self, p, handles, encoding);
  return self;
}

- (void)visitTreeWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t {
  treeNumber_++;
  if (EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor_printTree) {
    [((JavaIoPrintWriter *) nil_chk(pw_)) printWithNSString:JreStrcat("IC", treeNumber_, ':')];
    [((JavaIoPrintWriter *) nil_chk(pw_)) printlnWithNSString:@"Next tree read:"];
    [((EduStanfordNlpTreesTreePrint *) nil_chk(EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor_tp)) printTreeWithEduStanfordNlpTreesTree:t withJavaIoPrintWriter:pw_];
  }
  EduStanfordNlpTreesTregexTregexMatcher *match = [((EduStanfordNlpTreesTregexTregexPattern *) nil_chk(p_)) matcherWithEduStanfordNlpTreesTree:t];
  if (EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor_printNonMatchingTrees) {
    if ([((EduStanfordNlpTreesTregexTregexMatcher *) nil_chk(match)) find]) numMatches_++;
    else [((EduStanfordNlpTreesTreePrint *) nil_chk(EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor_tp)) printTreeWithEduStanfordNlpTreesTree:t withJavaIoPrintWriter:pw_];
    return;
  }
  EduStanfordNlpTreesTree *lastMatchingRootNode = nil;
  while ([((EduStanfordNlpTreesTregexTregexMatcher *) nil_chk(match)) find]) {
    if (EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor_oneMatchPerRootNode) {
      if (lastMatchingRootNode == [match getMatch]) continue;
      else lastMatchingRootNode = [match getMatch];
    }
    numMatches_++;
    if (EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor_printFilename && [JreLoadStatic(EduStanfordNlpTreesTregexTregexPattern, treebank) isKindOfClass:[EduStanfordNlpTreesDiskTreebank class]]) {
      EduStanfordNlpTreesDiskTreebank *dtb = (EduStanfordNlpTreesDiskTreebank *) cast_chk(JreLoadStatic(EduStanfordNlpTreesTregexTregexPattern, treebank), [EduStanfordNlpTreesDiskTreebank class]);
      [((JavaIoPrintWriter *) nil_chk(pw_)) printWithNSString:@"# "];
      [((JavaIoPrintWriter *) nil_chk(pw_)) printlnWithNSString:[((EduStanfordNlpTreesDiskTreebank *) nil_chk(dtb)) getCurrentFilename]];
    }
    if (EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor_printSubtreeCode) {
      [((JavaIoPrintWriter *) nil_chk(pw_)) printWithInt:treeNumber_];
      [((JavaIoPrintWriter *) nil_chk(pw_)) printWithChar:':'];
      [((JavaIoPrintWriter *) nil_chk(pw_)) printlnWithInt:[((EduStanfordNlpTreesTree *) nil_chk([match getMatch])) nodeNumberWithEduStanfordNlpTreesTree:t]];
    }
    if (EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor_printMatches) {
      if (EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor_reportTreeNumbers) {
        [((JavaIoPrintWriter *) nil_chk(pw_)) printWithInt:treeNumber_];
        [((JavaIoPrintWriter *) nil_chk(pw_)) printWithNSString:@": "];
      }
      if (EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor_printTree) {
        [((JavaIoPrintWriter *) nil_chk(pw_)) printlnWithNSString:@"Found a full match:"];
      }
      if (EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor_printWholeTree) {
        [((EduStanfordNlpTreesTreePrint *) nil_chk(EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor_tp)) printTreeWithEduStanfordNlpTreesTree:t withJavaIoPrintWriter:pw_];
      }
      else if (handles_ != nil) {
        if (EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor_printTree) {
          [((JavaIoPrintWriter *) nil_chk(pw_)) printlnWithNSString:@"Here's the node you were interested in:"];
        }
        {
          IOSObjectArray *a__ = handles_;
          NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
          NSString * const *e__ = b__ + a__->size_;
          while (b__ < e__) {
            NSString *handle = *b__++;
            EduStanfordNlpTreesTree *labeledNode = [match getNodeWithNSString:handle];
            if (labeledNode == nil) {
              [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$$", @"Error!!  There is no matched node \"", handle, @"\"!  Did you specify such a label in the pattern?")];
            }
            else {
              [((EduStanfordNlpTreesTreePrint *) nil_chk(EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor_tp)) printTreeWithEduStanfordNlpTreesTree:labeledNode withJavaIoPrintWriter:pw_];
            }
          }
        }
      }
      else {
        [((EduStanfordNlpTreesTreePrint *) nil_chk(EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor_tp)) printTreeWithEduStanfordNlpTreesTree:[match getMatch] withJavaIoPrintWriter:pw_];
      }
    }
  }
}

- (jint)numMatches {
  return numMatches_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpTreesTregexTregexPattern:withNSStringArray:withNSString:);
  methods[1].selector = @selector(visitTreeWithEduStanfordNlpTreesTree:);
  methods[2].selector = @selector(numMatches);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "printNumMatchesToStdOut", "Z", .constantValue.asLong = 0, 0xa, -1, 3, -1, -1 },
    { "printNonMatchingTrees", "Z", .constantValue.asLong = 0, 0x8, -1, 4, -1, -1 },
    { "printSubtreeCode", "Z", .constantValue.asLong = 0, 0x8, -1, 5, -1, -1 },
    { "printTree", "Z", .constantValue.asLong = 0, 0x8, -1, 6, -1, -1 },
    { "printWholeTree", "Z", .constantValue.asLong = 0, 0x8, -1, 7, -1, -1 },
    { "printMatches", "Z", .constantValue.asLong = 0, 0x8, -1, 8, -1, -1 },
    { "printFilename", "Z", .constantValue.asLong = 0, 0x8, -1, 9, -1, -1 },
    { "oneMatchPerRootNode", "Z", .constantValue.asLong = 0, 0x8, -1, 10, -1, -1 },
    { "reportTreeNumbers", "Z", .constantValue.asLong = 0, 0x8, -1, 11, -1, -1 },
    { "tp", "LEduStanfordNlpTreesTreePrint;", .constantValue.asLong = 0, 0x8, -1, 12, -1, -1 },
    { "pw_", "LJavaIoPrintWriter;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "treeNumber_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "p_", "LEduStanfordNlpTreesTregexTregexPattern;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "handles_", "[LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "numMatches_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpTreesTregexTregexPattern;[LNSString;LNSString;", "visitTree", "LEduStanfordNlpTreesTree;", &EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor_printNumMatchesToStdOut, &EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor_printNonMatchingTrees, &EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor_printSubtreeCode, &EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor_printTree, &EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor_printWholeTree, &EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor_printMatches, &EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor_printFilename, &EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor_oneMatchPerRootNode, &EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor_reportTreeNumbers, &EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor_tp, "LEduStanfordNlpTreesTregexTregexPattern;" };
  static const J2ObjcClassInfo _EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor = { "TRegexTreeVisitor", "edu.stanford.nlp.trees.tregex", ptrTable, methods, fields, 7, 0xa, 3, 15, 13, -1, -1, -1, -1 };
  return &_EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor;
}

@end

void EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor_initWithEduStanfordNlpTreesTregexTregexPattern_withNSStringArray_withNSString_(EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor *self, EduStanfordNlpTreesTregexTregexPattern *p, IOSObjectArray *handles, NSString *encoding) {
  NSObject_init(self);
  self->treeNumber_ = 0;
  self->p_ = p;
  self->handles_ = handles;
  @try {
    self->pw_ = new_JavaIoPrintWriter_initWithJavaIoWriter_withBoolean_(new_JavaIoOutputStreamWriter_initWithJavaIoOutputStream_withNSString_(JreLoadStatic(JavaLangSystem, out), encoding), true);
  }
  @catch (JavaIoUnsupportedEncodingException *e) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$$", @"Error -- encoding ", encoding, @" is unsupported.  Using platform default PrintWriter instead.")];
    self->pw_ = new_JavaIoPrintWriter_initWithJavaIoOutputStream_withBoolean_(JreLoadStatic(JavaLangSystem, out), true);
  }
}

EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor *new_EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor_initWithEduStanfordNlpTreesTregexTregexPattern_withNSStringArray_withNSString_(EduStanfordNlpTreesTregexTregexPattern *p, IOSObjectArray *handles, NSString *encoding) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor, initWithEduStanfordNlpTreesTregexTregexPattern_withNSStringArray_withNSString_, p, handles, encoding)
}

EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor *create_EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor_initWithEduStanfordNlpTreesTregexTregexPattern_withNSStringArray_withNSString_(EduStanfordNlpTreesTregexTregexPattern *p, IOSObjectArray *handles, NSString *encoding) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor, initWithEduStanfordNlpTreesTregexTregexPattern_withNSStringArray_withNSString_, p, handles, encoding)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTreesTregexTregexPattern_TRegexTreeVisitor)

@implementation EduStanfordNlpTreesTregexTregexPattern_TRegexTreeReaderFactory

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpTreesTregexTregexPattern_TRegexTreeReaderFactory_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithEduStanfordNlpTreesTreeNormalizer:(EduStanfordNlpTreesTreeNormalizer *)tn {
  EduStanfordNlpTreesTregexTregexPattern_TRegexTreeReaderFactory_initWithEduStanfordNlpTreesTreeNormalizer_(self, tn);
  return self;
}

- (id<EduStanfordNlpTreesTreeReader>)newTreeReaderWithJavaIoReader:(JavaIoReader *)inArg {
  return new_EduStanfordNlpTreesPennTreeReader_initWithJavaIoReader_withEduStanfordNlpTreesTreeFactory_withEduStanfordNlpTreesTreeNormalizer_(new_JavaIoBufferedReader_initWithJavaIoReader_(inArg), new_EduStanfordNlpTreesLabeledScoredTreeFactory_init(), tn_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTreeReader;", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithEduStanfordNlpTreesTreeNormalizer:);
  methods[2].selector = @selector(newTreeReaderWithJavaIoReader:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "tn_", "LEduStanfordNlpTreesTreeNormalizer;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpTreesTreeNormalizer;", "newTreeReader", "LJavaIoReader;", "LEduStanfordNlpTreesTregexTregexPattern;" };
  static const J2ObjcClassInfo _EduStanfordNlpTreesTregexTregexPattern_TRegexTreeReaderFactory = { "TRegexTreeReaderFactory", "edu.stanford.nlp.trees.tregex", ptrTable, methods, fields, 7, 0x9, 3, 1, 3, -1, -1, -1, -1 };
  return &_EduStanfordNlpTreesTregexTregexPattern_TRegexTreeReaderFactory;
}

@end

void EduStanfordNlpTreesTregexTregexPattern_TRegexTreeReaderFactory_init(EduStanfordNlpTreesTregexTregexPattern_TRegexTreeReaderFactory *self) {
  EduStanfordNlpTreesTregexTregexPattern_TRegexTreeReaderFactory_initWithEduStanfordNlpTreesTreeNormalizer_(self, new_EduStanfordNlpTreesTregexTregexPattern_TRegexTreeReaderFactory_$1_init());
}

EduStanfordNlpTreesTregexTregexPattern_TRegexTreeReaderFactory *new_EduStanfordNlpTreesTregexTregexPattern_TRegexTreeReaderFactory_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesTregexTregexPattern_TRegexTreeReaderFactory, init)
}

EduStanfordNlpTreesTregexTregexPattern_TRegexTreeReaderFactory *create_EduStanfordNlpTreesTregexTregexPattern_TRegexTreeReaderFactory_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesTregexTregexPattern_TRegexTreeReaderFactory, init)
}

void EduStanfordNlpTreesTregexTregexPattern_TRegexTreeReaderFactory_initWithEduStanfordNlpTreesTreeNormalizer_(EduStanfordNlpTreesTregexTregexPattern_TRegexTreeReaderFactory *self, EduStanfordNlpTreesTreeNormalizer *tn) {
  NSObject_init(self);
  self->tn_ = tn;
}

EduStanfordNlpTreesTregexTregexPattern_TRegexTreeReaderFactory *new_EduStanfordNlpTreesTregexTregexPattern_TRegexTreeReaderFactory_initWithEduStanfordNlpTreesTreeNormalizer_(EduStanfordNlpTreesTreeNormalizer *tn) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesTregexTregexPattern_TRegexTreeReaderFactory, initWithEduStanfordNlpTreesTreeNormalizer_, tn)
}

EduStanfordNlpTreesTregexTregexPattern_TRegexTreeReaderFactory *create_EduStanfordNlpTreesTregexTregexPattern_TRegexTreeReaderFactory_initWithEduStanfordNlpTreesTreeNormalizer_(EduStanfordNlpTreesTreeNormalizer *tn) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesTregexTregexPattern_TRegexTreeReaderFactory, initWithEduStanfordNlpTreesTreeNormalizer_, tn)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTreesTregexTregexPattern_TRegexTreeReaderFactory)

@implementation EduStanfordNlpTreesTregexTregexPattern_TRegexTreeReaderFactory_$1

- (NSString *)normalizeNonterminalWithNSString:(NSString *)str {
  if (str == nil) {
    return @"";
  }
  else {
    return str;
  }
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpTreesTregexTregexPattern_TRegexTreeReaderFactory_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(normalizeNonterminalWithNSString:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpTreesTregexTregexPattern_TRegexTreeReaderFactory_$1_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "normalizeNonterminal", "LNSString;", "LEduStanfordNlpTreesTregexTregexPattern_TRegexTreeReaderFactory;", "init" };
  static const J2ObjcClassInfo _EduStanfordNlpTreesTregexTregexPattern_TRegexTreeReaderFactory_$1 = { "", "edu.stanford.nlp.trees.tregex", ptrTable, methods, fields, 7, 0x8008, 2, 1, 2, -1, 3, -1, -1 };
  return &_EduStanfordNlpTreesTregexTregexPattern_TRegexTreeReaderFactory_$1;
}

@end

void EduStanfordNlpTreesTregexTregexPattern_TRegexTreeReaderFactory_$1_init(EduStanfordNlpTreesTregexTregexPattern_TRegexTreeReaderFactory_$1 *self) {
  EduStanfordNlpTreesTreeNormalizer_init(self);
}

EduStanfordNlpTreesTregexTregexPattern_TRegexTreeReaderFactory_$1 *new_EduStanfordNlpTreesTregexTregexPattern_TRegexTreeReaderFactory_$1_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesTregexTregexPattern_TRegexTreeReaderFactory_$1, init)
}

EduStanfordNlpTreesTregexTregexPattern_TRegexTreeReaderFactory_$1 *create_EduStanfordNlpTreesTregexTregexPattern_TRegexTreeReaderFactory_$1_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesTregexTregexPattern_TRegexTreeReaderFactory_$1, init)
}
