//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/trees/tregex/tsurgeon/TsurgeonPattern.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/trees/tregex/tsurgeon/CoindexationGenerator.h"
#include "edu/stanford/nlp/trees/tregex/tsurgeon/TsurgeonMatcher.h"
#include "edu/stanford/nlp/trees/tregex/tsurgeon/TsurgeonPattern.h"
#include "edu/stanford/nlp/trees/tregex/tsurgeon/TsurgeonPatternRoot.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/Map.h"

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpTreesTregexTsurgeonTsurgeonPattern)

IOSObjectArray *EduStanfordNlpTreesTregexTsurgeonTsurgeonPattern_EMPTY_TSURGEON_PATTERN_ARRAY;

@implementation EduStanfordNlpTreesTregexTsurgeonTsurgeonPattern

- (void)setRootWithEduStanfordNlpTreesTregexTsurgeonTsurgeonPatternRoot:(EduStanfordNlpTreesTregexTsurgeonTsurgeonPatternRoot *)root {
  self->root_ = root;
  {
    IOSObjectArray *a__ = children_;
    EduStanfordNlpTreesTregexTsurgeonTsurgeonPattern * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    EduStanfordNlpTreesTregexTsurgeonTsurgeonPattern * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      EduStanfordNlpTreesTregexTsurgeonTsurgeonPattern *child = *b__++;
      [((EduStanfordNlpTreesTregexTsurgeonTsurgeonPattern *) nil_chk(child)) setRootWithEduStanfordNlpTreesTregexTsurgeonTsurgeonPatternRoot:root];
    }
  }
}

- (instancetype)initWithNSString:(NSString *)label
withEduStanfordNlpTreesTregexTsurgeonTsurgeonPatternArray:(IOSObjectArray *)children {
  EduStanfordNlpTreesTregexTsurgeonTsurgeonPattern_initWithNSString_withEduStanfordNlpTreesTregexTsurgeonTsurgeonPatternArray_(self, label, children);
  return self;
}

- (NSString *)description {
  JavaLangStringBuilder *resultSB = new_JavaLangStringBuilder_init();
  (void) [resultSB appendWithNSString:label_];
  if (((IOSObjectArray *) nil_chk(children_))->size_ > 0) {
    (void) [resultSB appendWithChar:'('];
    for (jint i = 0; i < children_->size_; i++) {
      (void) [resultSB appendWithId:IOSObjectArray_Get(children_, i)];
      if (i < children_->size_ - 1) {
        (void) [resultSB appendWithNSString:@", "];
      }
    }
    (void) [resultSB appendWithChar:')'];
  }
  return [resultSB description];
}

- (EduStanfordNlpTreesTregexTsurgeonTsurgeonMatcher *)matcher {
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"Only the root node can produce the top level matcher");
}

- (EduStanfordNlpTreesTregexTsurgeonTsurgeonMatcher *)matcherWithJavaUtilMap:(id<JavaUtilMap>)newNodeNames
                  withEduStanfordNlpTreesTregexTsurgeonCoindexationGenerator:(EduStanfordNlpTreesTregexTsurgeonCoindexationGenerator *)coindexer {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x4, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTregexTsurgeonTsurgeonMatcher;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTregexTsurgeonTsurgeonMatcher;", 0x401, 4, 5, -1, 6, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(setRootWithEduStanfordNlpTreesTregexTsurgeonTsurgeonPatternRoot:);
  methods[1].selector = @selector(initWithNSString:withEduStanfordNlpTreesTregexTsurgeonTsurgeonPatternArray:);
  methods[2].selector = @selector(description);
  methods[3].selector = @selector(matcher);
  methods[4].selector = @selector(matcherWithJavaUtilMap:withEduStanfordNlpTreesTregexTsurgeonCoindexationGenerator:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "EMPTY_TSURGEON_PATTERN_ARRAY", "[LEduStanfordNlpTreesTregexTsurgeonTsurgeonPattern;", .constantValue.asLong = 0, 0x18, -1, 7, -1, -1 },
    { "label_", "LNSString;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "children_", "[LEduStanfordNlpTreesTregexTsurgeonTsurgeonPattern;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "root_", "LEduStanfordNlpTreesTregexTsurgeonTsurgeonPattern;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setRoot", "LEduStanfordNlpTreesTregexTsurgeonTsurgeonPatternRoot;", "LNSString;[LEduStanfordNlpTreesTregexTsurgeonTsurgeonPattern;", "toString", "matcher", "LJavaUtilMap;LEduStanfordNlpTreesTregexTsurgeonCoindexationGenerator;", "(Ljava/util/Map<Ljava/lang/String;Ledu/stanford/nlp/trees/Tree;>;Ledu/stanford/nlp/trees/tregex/tsurgeon/CoindexationGenerator;)Ledu/stanford/nlp/trees/tregex/tsurgeon/TsurgeonMatcher;", &EduStanfordNlpTreesTregexTsurgeonTsurgeonPattern_EMPTY_TSURGEON_PATTERN_ARRAY };
  static const J2ObjcClassInfo _EduStanfordNlpTreesTregexTsurgeonTsurgeonPattern = { "TsurgeonPattern", "edu.stanford.nlp.trees.tregex.tsurgeon", ptrTable, methods, fields, 7, 0x401, 5, 4, -1, -1, -1, -1, -1 };
  return &_EduStanfordNlpTreesTregexTsurgeonTsurgeonPattern;
}

+ (void)initialize {
  if (self == [EduStanfordNlpTreesTregexTsurgeonTsurgeonPattern class]) {
    EduStanfordNlpTreesTregexTsurgeonTsurgeonPattern_EMPTY_TSURGEON_PATTERN_ARRAY = [IOSObjectArray newArrayWithLength:0 type:EduStanfordNlpTreesTregexTsurgeonTsurgeonPattern_class_()];
    J2OBJC_SET_INITIALIZED(EduStanfordNlpTreesTregexTsurgeonTsurgeonPattern)
  }
}

@end

void EduStanfordNlpTreesTregexTsurgeonTsurgeonPattern_initWithNSString_withEduStanfordNlpTreesTregexTsurgeonTsurgeonPatternArray_(EduStanfordNlpTreesTregexTsurgeonTsurgeonPattern *self, NSString *label, IOSObjectArray *children) {
  NSObject_init(self);
  self->label_ = label;
  self->children_ = children;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTreesTregexTsurgeonTsurgeonPattern)
