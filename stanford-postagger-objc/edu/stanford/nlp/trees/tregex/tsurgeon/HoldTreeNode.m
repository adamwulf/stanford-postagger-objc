//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/trees/tregex/tsurgeon/HoldTreeNode.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/ling/Label.h"
#include "edu/stanford/nlp/ling/LabelFactory.h"
#include "edu/stanford/nlp/trees/Tree.h"
#include "edu/stanford/nlp/trees/TreeFactory.h"
#include "edu/stanford/nlp/trees/tregex/TregexMatcher.h"
#include "edu/stanford/nlp/trees/tregex/tsurgeon/AuxiliaryTree.h"
#include "edu/stanford/nlp/trees/tregex/tsurgeon/CoindexationGenerator.h"
#include "edu/stanford/nlp/trees/tregex/tsurgeon/HoldTreeNode.h"
#include "edu/stanford/nlp/trees/tregex/tsurgeon/TsurgeonMatcher.h"
#include "edu/stanford/nlp/trees/tregex/tsurgeon/TsurgeonPattern.h"
#include "java/util/Map.h"

@interface EduStanfordNlpTreesTregexTsurgeonHoldTreeNode_Matcher : EduStanfordNlpTreesTregexTsurgeonTsurgeonMatcher {
 @public
  EduStanfordNlpTreesTregexTsurgeonHoldTreeNode *this$0_;
}

- (instancetype)initWithEduStanfordNlpTreesTregexTsurgeonHoldTreeNode:(EduStanfordNlpTreesTregexTsurgeonHoldTreeNode *)outer$
                                                      withJavaUtilMap:(id<JavaUtilMap>)newNodeNames
           withEduStanfordNlpTreesTregexTsurgeonCoindexationGenerator:(EduStanfordNlpTreesTregexTsurgeonCoindexationGenerator *)coindexer;

- (EduStanfordNlpTreesTree *)evaluateWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)tree
                      withEduStanfordNlpTreesTregexTregexMatcher:(EduStanfordNlpTreesTregexTregexMatcher *)tregex;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpTreesTregexTsurgeonHoldTreeNode_Matcher)

J2OBJC_FIELD_SETTER(EduStanfordNlpTreesTregexTsurgeonHoldTreeNode_Matcher, this$0_, EduStanfordNlpTreesTregexTsurgeonHoldTreeNode *)

__attribute__((unused)) static void EduStanfordNlpTreesTregexTsurgeonHoldTreeNode_Matcher_initWithEduStanfordNlpTreesTregexTsurgeonHoldTreeNode_withJavaUtilMap_withEduStanfordNlpTreesTregexTsurgeonCoindexationGenerator_(EduStanfordNlpTreesTregexTsurgeonHoldTreeNode_Matcher *self, EduStanfordNlpTreesTregexTsurgeonHoldTreeNode *outer$, id<JavaUtilMap> newNodeNames, EduStanfordNlpTreesTregexTsurgeonCoindexationGenerator *coindexer);

__attribute__((unused)) static EduStanfordNlpTreesTregexTsurgeonHoldTreeNode_Matcher *new_EduStanfordNlpTreesTregexTsurgeonHoldTreeNode_Matcher_initWithEduStanfordNlpTreesTregexTsurgeonHoldTreeNode_withJavaUtilMap_withEduStanfordNlpTreesTregexTsurgeonCoindexationGenerator_(EduStanfordNlpTreesTregexTsurgeonHoldTreeNode *outer$, id<JavaUtilMap> newNodeNames, EduStanfordNlpTreesTregexTsurgeonCoindexationGenerator *coindexer) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpTreesTregexTsurgeonHoldTreeNode_Matcher *create_EduStanfordNlpTreesTregexTsurgeonHoldTreeNode_Matcher_initWithEduStanfordNlpTreesTregexTsurgeonHoldTreeNode_withJavaUtilMap_withEduStanfordNlpTreesTregexTsurgeonCoindexationGenerator_(EduStanfordNlpTreesTregexTsurgeonHoldTreeNode *outer$, id<JavaUtilMap> newNodeNames, EduStanfordNlpTreesTregexTsurgeonCoindexationGenerator *coindexer);

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpTreesTregexTsurgeonHoldTreeNode_Matcher)

@implementation EduStanfordNlpTreesTregexTsurgeonHoldTreeNode

- (instancetype)initWithEduStanfordNlpTreesTregexTsurgeonAuxiliaryTree:(EduStanfordNlpTreesTregexTsurgeonAuxiliaryTree *)t {
  EduStanfordNlpTreesTregexTsurgeonHoldTreeNode_initWithEduStanfordNlpTreesTregexTsurgeonAuxiliaryTree_(self, t);
  return self;
}

- (EduStanfordNlpTreesTregexTsurgeonTsurgeonMatcher *)matcherWithJavaUtilMap:(id<JavaUtilMap>)newNodeNames
                  withEduStanfordNlpTreesTregexTsurgeonCoindexationGenerator:(EduStanfordNlpTreesTregexTsurgeonCoindexationGenerator *)coindexer {
  return new_EduStanfordNlpTreesTregexTsurgeonHoldTreeNode_Matcher_initWithEduStanfordNlpTreesTregexTsurgeonHoldTreeNode_withJavaUtilMap_withEduStanfordNlpTreesTregexTsurgeonCoindexationGenerator_(self, newNodeNames, coindexer);
}

- (NSString *)description {
  return [((EduStanfordNlpTreesTregexTsurgeonAuxiliaryTree *) nil_chk(subTree_)) description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTregexTsurgeonTsurgeonMatcher;", 0x1, 1, 2, -1, 3, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpTreesTregexTsurgeonAuxiliaryTree:);
  methods[1].selector = @selector(matcherWithJavaUtilMap:withEduStanfordNlpTreesTregexTsurgeonCoindexationGenerator:);
  methods[2].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "subTree_", "LEduStanfordNlpTreesTregexTsurgeonAuxiliaryTree;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpTreesTregexTsurgeonAuxiliaryTree;", "matcher", "LJavaUtilMap;LEduStanfordNlpTreesTregexTsurgeonCoindexationGenerator;", "(Ljava/util/Map<Ljava/lang/String;Ledu/stanford/nlp/trees/Tree;>;Ledu/stanford/nlp/trees/tregex/tsurgeon/CoindexationGenerator;)Ledu/stanford/nlp/trees/tregex/tsurgeon/TsurgeonMatcher;", "toString", "LEduStanfordNlpTreesTregexTsurgeonHoldTreeNode_Matcher;" };
  static const J2ObjcClassInfo _EduStanfordNlpTreesTregexTsurgeonHoldTreeNode = { "HoldTreeNode", "edu.stanford.nlp.trees.tregex.tsurgeon", ptrTable, methods, fields, 7, 0x0, 3, 1, -1, 5, -1, -1, -1 };
  return &_EduStanfordNlpTreesTregexTsurgeonHoldTreeNode;
}

@end

void EduStanfordNlpTreesTregexTsurgeonHoldTreeNode_initWithEduStanfordNlpTreesTregexTsurgeonAuxiliaryTree_(EduStanfordNlpTreesTregexTsurgeonHoldTreeNode *self, EduStanfordNlpTreesTregexTsurgeonAuxiliaryTree *t) {
  EduStanfordNlpTreesTregexTsurgeonTsurgeonPattern_initWithNSString_withEduStanfordNlpTreesTregexTsurgeonTsurgeonPatternArray_(self, @"hold", JreLoadStatic(EduStanfordNlpTreesTregexTsurgeonTsurgeonPattern, EMPTY_TSURGEON_PATTERN_ARRAY));
  self->subTree_ = t;
}

EduStanfordNlpTreesTregexTsurgeonHoldTreeNode *new_EduStanfordNlpTreesTregexTsurgeonHoldTreeNode_initWithEduStanfordNlpTreesTregexTsurgeonAuxiliaryTree_(EduStanfordNlpTreesTregexTsurgeonAuxiliaryTree *t) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesTregexTsurgeonHoldTreeNode, initWithEduStanfordNlpTreesTregexTsurgeonAuxiliaryTree_, t)
}

EduStanfordNlpTreesTregexTsurgeonHoldTreeNode *create_EduStanfordNlpTreesTregexTsurgeonHoldTreeNode_initWithEduStanfordNlpTreesTregexTsurgeonAuxiliaryTree_(EduStanfordNlpTreesTregexTsurgeonAuxiliaryTree *t) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesTregexTsurgeonHoldTreeNode, initWithEduStanfordNlpTreesTregexTsurgeonAuxiliaryTree_, t)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTreesTregexTsurgeonHoldTreeNode)

@implementation EduStanfordNlpTreesTregexTsurgeonHoldTreeNode_Matcher

- (instancetype)initWithEduStanfordNlpTreesTregexTsurgeonHoldTreeNode:(EduStanfordNlpTreesTregexTsurgeonHoldTreeNode *)outer$
                                                      withJavaUtilMap:(id<JavaUtilMap>)newNodeNames
           withEduStanfordNlpTreesTregexTsurgeonCoindexationGenerator:(EduStanfordNlpTreesTregexTsurgeonCoindexationGenerator *)coindexer {
  EduStanfordNlpTreesTregexTsurgeonHoldTreeNode_Matcher_initWithEduStanfordNlpTreesTregexTsurgeonHoldTreeNode_withJavaUtilMap_withEduStanfordNlpTreesTregexTsurgeonCoindexationGenerator_(self, outer$, newNodeNames, coindexer);
  return self;
}

- (EduStanfordNlpTreesTree *)evaluateWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)tree
                      withEduStanfordNlpTreesTregexTregexMatcher:(EduStanfordNlpTreesTregexTregexMatcher *)tregex {
  return ((EduStanfordNlpTreesTregexTsurgeonAuxiliaryTree *) nil_chk([((EduStanfordNlpTreesTregexTsurgeonAuxiliaryTree *) nil_chk(this$0_->subTree_)) copy__WithEduStanfordNlpTreesTregexTsurgeonTsurgeonMatcher:self withEduStanfordNlpTreesTreeFactory:[((EduStanfordNlpTreesTree *) nil_chk(tree)) treeFactory] withEduStanfordNlpLingLabelFactory:[((id<EduStanfordNlpLingLabel>) nil_chk([tree label])) labelFactory]]))->tree_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpTreesTregexTsurgeonHoldTreeNode:withJavaUtilMap:withEduStanfordNlpTreesTregexTsurgeonCoindexationGenerator:);
  methods[1].selector = @selector(evaluateWithEduStanfordNlpTreesTree:withEduStanfordNlpTreesTregexTregexMatcher:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LEduStanfordNlpTreesTregexTsurgeonHoldTreeNode;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpTreesTregexTsurgeonHoldTreeNode;LJavaUtilMap;LEduStanfordNlpTreesTregexTsurgeonCoindexationGenerator;", "(Ledu/stanford/nlp/trees/tregex/tsurgeon/HoldTreeNode;Ljava/util/Map<Ljava/lang/String;Ledu/stanford/nlp/trees/Tree;>;Ledu/stanford/nlp/trees/tregex/tsurgeon/CoindexationGenerator;)V", "evaluate", "LEduStanfordNlpTreesTree;LEduStanfordNlpTreesTregexTregexMatcher;", "LEduStanfordNlpTreesTregexTsurgeonHoldTreeNode;" };
  static const J2ObjcClassInfo _EduStanfordNlpTreesTregexTsurgeonHoldTreeNode_Matcher = { "Matcher", "edu.stanford.nlp.trees.tregex.tsurgeon", ptrTable, methods, fields, 7, 0x2, 2, 1, 4, -1, -1, -1, -1 };
  return &_EduStanfordNlpTreesTregexTsurgeonHoldTreeNode_Matcher;
}

@end

void EduStanfordNlpTreesTregexTsurgeonHoldTreeNode_Matcher_initWithEduStanfordNlpTreesTregexTsurgeonHoldTreeNode_withJavaUtilMap_withEduStanfordNlpTreesTregexTsurgeonCoindexationGenerator_(EduStanfordNlpTreesTregexTsurgeonHoldTreeNode_Matcher *self, EduStanfordNlpTreesTregexTsurgeonHoldTreeNode *outer$, id<JavaUtilMap> newNodeNames, EduStanfordNlpTreesTregexTsurgeonCoindexationGenerator *coindexer) {
  self->this$0_ = outer$;
  EduStanfordNlpTreesTregexTsurgeonTsurgeonMatcher_initWithEduStanfordNlpTreesTregexTsurgeonTsurgeonPattern_withJavaUtilMap_withEduStanfordNlpTreesTregexTsurgeonCoindexationGenerator_(self, outer$, newNodeNames, coindexer);
}

EduStanfordNlpTreesTregexTsurgeonHoldTreeNode_Matcher *new_EduStanfordNlpTreesTregexTsurgeonHoldTreeNode_Matcher_initWithEduStanfordNlpTreesTregexTsurgeonHoldTreeNode_withJavaUtilMap_withEduStanfordNlpTreesTregexTsurgeonCoindexationGenerator_(EduStanfordNlpTreesTregexTsurgeonHoldTreeNode *outer$, id<JavaUtilMap> newNodeNames, EduStanfordNlpTreesTregexTsurgeonCoindexationGenerator *coindexer) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesTregexTsurgeonHoldTreeNode_Matcher, initWithEduStanfordNlpTreesTregexTsurgeonHoldTreeNode_withJavaUtilMap_withEduStanfordNlpTreesTregexTsurgeonCoindexationGenerator_, outer$, newNodeNames, coindexer)
}

EduStanfordNlpTreesTregexTsurgeonHoldTreeNode_Matcher *create_EduStanfordNlpTreesTregexTsurgeonHoldTreeNode_Matcher_initWithEduStanfordNlpTreesTregexTsurgeonHoldTreeNode_withJavaUtilMap_withEduStanfordNlpTreesTregexTsurgeonCoindexationGenerator_(EduStanfordNlpTreesTregexTsurgeonHoldTreeNode *outer$, id<JavaUtilMap> newNodeNames, EduStanfordNlpTreesTregexTsurgeonCoindexationGenerator *coindexer) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesTregexTsurgeonHoldTreeNode_Matcher, initWithEduStanfordNlpTreesTregexTsurgeonHoldTreeNode_withJavaUtilMap_withEduStanfordNlpTreesTregexTsurgeonCoindexationGenerator_, outer$, newNodeNames, coindexer)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTreesTregexTsurgeonHoldTreeNode_Matcher)
