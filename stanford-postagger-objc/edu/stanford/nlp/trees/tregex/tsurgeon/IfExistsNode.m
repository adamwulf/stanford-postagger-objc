//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/trees/tregex/tsurgeon/IfExistsNode.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/trees/Tree.h"
#include "edu/stanford/nlp/trees/tregex/TregexMatcher.h"
#include "edu/stanford/nlp/trees/tregex/tsurgeon/CoindexationGenerator.h"
#include "edu/stanford/nlp/trees/tregex/tsurgeon/IfExistsNode.h"
#include "edu/stanford/nlp/trees/tregex/tsurgeon/TsurgeonMatcher.h"
#include "edu/stanford/nlp/trees/tregex/tsurgeon/TsurgeonPattern.h"
#include "java/util/Map.h"

@interface EduStanfordNlpTreesTregexTsurgeonIfExistsNode_Matcher : EduStanfordNlpTreesTregexTsurgeonTsurgeonMatcher {
 @public
  EduStanfordNlpTreesTregexTsurgeonIfExistsNode *this$0_;
}

- (instancetype)initWithEduStanfordNlpTreesTregexTsurgeonIfExistsNode:(EduStanfordNlpTreesTregexTsurgeonIfExistsNode *)outer$
                                                      withJavaUtilMap:(id<JavaUtilMap>)newNodeNames
           withEduStanfordNlpTreesTregexTsurgeonCoindexationGenerator:(EduStanfordNlpTreesTregexTsurgeonCoindexationGenerator *)coindexer;

- (EduStanfordNlpTreesTree *)evaluateWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)tree
                      withEduStanfordNlpTreesTregexTregexMatcher:(EduStanfordNlpTreesTregexTregexMatcher *)tregex;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpTreesTregexTsurgeonIfExistsNode_Matcher)

J2OBJC_FIELD_SETTER(EduStanfordNlpTreesTregexTsurgeonIfExistsNode_Matcher, this$0_, EduStanfordNlpTreesTregexTsurgeonIfExistsNode *)

__attribute__((unused)) static void EduStanfordNlpTreesTregexTsurgeonIfExistsNode_Matcher_initWithEduStanfordNlpTreesTregexTsurgeonIfExistsNode_withJavaUtilMap_withEduStanfordNlpTreesTregexTsurgeonCoindexationGenerator_(EduStanfordNlpTreesTregexTsurgeonIfExistsNode_Matcher *self, EduStanfordNlpTreesTregexTsurgeonIfExistsNode *outer$, id<JavaUtilMap> newNodeNames, EduStanfordNlpTreesTregexTsurgeonCoindexationGenerator *coindexer);

__attribute__((unused)) static EduStanfordNlpTreesTregexTsurgeonIfExistsNode_Matcher *new_EduStanfordNlpTreesTregexTsurgeonIfExistsNode_Matcher_initWithEduStanfordNlpTreesTregexTsurgeonIfExistsNode_withJavaUtilMap_withEduStanfordNlpTreesTregexTsurgeonCoindexationGenerator_(EduStanfordNlpTreesTregexTsurgeonIfExistsNode *outer$, id<JavaUtilMap> newNodeNames, EduStanfordNlpTreesTregexTsurgeonCoindexationGenerator *coindexer) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpTreesTregexTsurgeonIfExistsNode_Matcher *create_EduStanfordNlpTreesTregexTsurgeonIfExistsNode_Matcher_initWithEduStanfordNlpTreesTregexTsurgeonIfExistsNode_withJavaUtilMap_withEduStanfordNlpTreesTregexTsurgeonCoindexationGenerator_(EduStanfordNlpTreesTregexTsurgeonIfExistsNode *outer$, id<JavaUtilMap> newNodeNames, EduStanfordNlpTreesTregexTsurgeonCoindexationGenerator *coindexer);

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpTreesTregexTsurgeonIfExistsNode_Matcher)

@implementation EduStanfordNlpTreesTregexTsurgeonIfExistsNode

- (instancetype)initWithNSString:(NSString *)name
                     withBoolean:(jboolean)invert
withEduStanfordNlpTreesTregexTsurgeonTsurgeonPatternArray:(IOSObjectArray *)children {
  EduStanfordNlpTreesTregexTsurgeonIfExistsNode_initWithNSString_withBoolean_withEduStanfordNlpTreesTregexTsurgeonTsurgeonPatternArray_(self, name, invert, children);
  return self;
}

- (EduStanfordNlpTreesTregexTsurgeonTsurgeonMatcher *)matcherWithJavaUtilMap:(id<JavaUtilMap>)newNodeNames
                  withEduStanfordNlpTreesTregexTsurgeonCoindexationGenerator:(EduStanfordNlpTreesTregexTsurgeonCoindexationGenerator *)coindexer {
  return new_EduStanfordNlpTreesTregexTsurgeonIfExistsNode_Matcher_initWithEduStanfordNlpTreesTregexTsurgeonIfExistsNode_withJavaUtilMap_withEduStanfordNlpTreesTregexTsurgeonCoindexationGenerator_(self, newNodeNames, coindexer);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x81, -1, 0, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTregexTsurgeonTsurgeonMatcher;", 0x1, 1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withBoolean:withEduStanfordNlpTreesTregexTsurgeonTsurgeonPatternArray:);
  methods[1].selector = @selector(matcherWithJavaUtilMap:withEduStanfordNlpTreesTregexTsurgeonCoindexationGenerator:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "name_", "LNSString;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "invert_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;Z[LEduStanfordNlpTreesTregexTsurgeonTsurgeonPattern;", "matcher", "LJavaUtilMap;LEduStanfordNlpTreesTregexTsurgeonCoindexationGenerator;", "(Ljava/util/Map<Ljava/lang/String;Ledu/stanford/nlp/trees/Tree;>;Ledu/stanford/nlp/trees/tregex/tsurgeon/CoindexationGenerator;)Ledu/stanford/nlp/trees/tregex/tsurgeon/TsurgeonMatcher;", "LEduStanfordNlpTreesTregexTsurgeonIfExistsNode_Matcher;" };
  static const J2ObjcClassInfo _EduStanfordNlpTreesTregexTsurgeonIfExistsNode = { "IfExistsNode", "edu.stanford.nlp.trees.tregex.tsurgeon", ptrTable, methods, fields, 7, 0x0, 2, 2, -1, 4, -1, -1, -1 };
  return &_EduStanfordNlpTreesTregexTsurgeonIfExistsNode;
}

@end

void EduStanfordNlpTreesTregexTsurgeonIfExistsNode_initWithNSString_withBoolean_withEduStanfordNlpTreesTregexTsurgeonTsurgeonPatternArray_(EduStanfordNlpTreesTregexTsurgeonIfExistsNode *self, NSString *name, jboolean invert, IOSObjectArray *children) {
  EduStanfordNlpTreesTregexTsurgeonTsurgeonPattern_initWithNSString_withEduStanfordNlpTreesTregexTsurgeonTsurgeonPatternArray_(self, JreStrcat("$$$$", @"if ", (invert ? @"not " : @""), @"exists ", name), children);
  self->name_ = name;
  self->invert_ = invert;
}

EduStanfordNlpTreesTregexTsurgeonIfExistsNode *new_EduStanfordNlpTreesTregexTsurgeonIfExistsNode_initWithNSString_withBoolean_withEduStanfordNlpTreesTregexTsurgeonTsurgeonPatternArray_(NSString *name, jboolean invert, IOSObjectArray *children) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesTregexTsurgeonIfExistsNode, initWithNSString_withBoolean_withEduStanfordNlpTreesTregexTsurgeonTsurgeonPatternArray_, name, invert, children)
}

EduStanfordNlpTreesTregexTsurgeonIfExistsNode *create_EduStanfordNlpTreesTregexTsurgeonIfExistsNode_initWithNSString_withBoolean_withEduStanfordNlpTreesTregexTsurgeonTsurgeonPatternArray_(NSString *name, jboolean invert, IOSObjectArray *children) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesTregexTsurgeonIfExistsNode, initWithNSString_withBoolean_withEduStanfordNlpTreesTregexTsurgeonTsurgeonPatternArray_, name, invert, children)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTreesTregexTsurgeonIfExistsNode)

@implementation EduStanfordNlpTreesTregexTsurgeonIfExistsNode_Matcher

- (instancetype)initWithEduStanfordNlpTreesTregexTsurgeonIfExistsNode:(EduStanfordNlpTreesTregexTsurgeonIfExistsNode *)outer$
                                                      withJavaUtilMap:(id<JavaUtilMap>)newNodeNames
           withEduStanfordNlpTreesTregexTsurgeonCoindexationGenerator:(EduStanfordNlpTreesTregexTsurgeonCoindexationGenerator *)coindexer {
  EduStanfordNlpTreesTregexTsurgeonIfExistsNode_Matcher_initWithEduStanfordNlpTreesTregexTsurgeonIfExistsNode_withJavaUtilMap_withEduStanfordNlpTreesTregexTsurgeonCoindexationGenerator_(self, outer$, newNodeNames, coindexer);
  return self;
}

- (EduStanfordNlpTreesTree *)evaluateWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)tree
                      withEduStanfordNlpTreesTregexTregexMatcher:(EduStanfordNlpTreesTregexTregexMatcher *)tregex {
  if (this$0_->invert_ ^ ([((EduStanfordNlpTreesTregexTregexMatcher *) nil_chk(tregex)) getNodeWithNSString:this$0_->name_] != nil)) {
    {
      IOSObjectArray *a__ = childMatcher_;
      EduStanfordNlpTreesTregexTsurgeonTsurgeonMatcher * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      EduStanfordNlpTreesTregexTsurgeonTsurgeonMatcher * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        EduStanfordNlpTreesTregexTsurgeonTsurgeonMatcher *child = *b__++;
        (void) [((EduStanfordNlpTreesTregexTsurgeonTsurgeonMatcher *) nil_chk(child)) evaluateWithEduStanfordNlpTreesTree:tree withEduStanfordNlpTreesTregexTregexMatcher:tregex];
      }
    }
  }
  return tree;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpTreesTregexTsurgeonIfExistsNode:withJavaUtilMap:withEduStanfordNlpTreesTregexTsurgeonCoindexationGenerator:);
  methods[1].selector = @selector(evaluateWithEduStanfordNlpTreesTree:withEduStanfordNlpTreesTregexTregexMatcher:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LEduStanfordNlpTreesTregexTsurgeonIfExistsNode;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpTreesTregexTsurgeonIfExistsNode;LJavaUtilMap;LEduStanfordNlpTreesTregexTsurgeonCoindexationGenerator;", "(Ledu/stanford/nlp/trees/tregex/tsurgeon/IfExistsNode;Ljava/util/Map<Ljava/lang/String;Ledu/stanford/nlp/trees/Tree;>;Ledu/stanford/nlp/trees/tregex/tsurgeon/CoindexationGenerator;)V", "evaluate", "LEduStanfordNlpTreesTree;LEduStanfordNlpTreesTregexTregexMatcher;", "LEduStanfordNlpTreesTregexTsurgeonIfExistsNode;" };
  static const J2ObjcClassInfo _EduStanfordNlpTreesTregexTsurgeonIfExistsNode_Matcher = { "Matcher", "edu.stanford.nlp.trees.tregex.tsurgeon", ptrTable, methods, fields, 7, 0x2, 2, 1, 4, -1, -1, -1, -1 };
  return &_EduStanfordNlpTreesTregexTsurgeonIfExistsNode_Matcher;
}

@end

void EduStanfordNlpTreesTregexTsurgeonIfExistsNode_Matcher_initWithEduStanfordNlpTreesTregexTsurgeonIfExistsNode_withJavaUtilMap_withEduStanfordNlpTreesTregexTsurgeonCoindexationGenerator_(EduStanfordNlpTreesTregexTsurgeonIfExistsNode_Matcher *self, EduStanfordNlpTreesTregexTsurgeonIfExistsNode *outer$, id<JavaUtilMap> newNodeNames, EduStanfordNlpTreesTregexTsurgeonCoindexationGenerator *coindexer) {
  self->this$0_ = outer$;
  EduStanfordNlpTreesTregexTsurgeonTsurgeonMatcher_initWithEduStanfordNlpTreesTregexTsurgeonTsurgeonPattern_withJavaUtilMap_withEduStanfordNlpTreesTregexTsurgeonCoindexationGenerator_(self, outer$, newNodeNames, coindexer);
}

EduStanfordNlpTreesTregexTsurgeonIfExistsNode_Matcher *new_EduStanfordNlpTreesTregexTsurgeonIfExistsNode_Matcher_initWithEduStanfordNlpTreesTregexTsurgeonIfExistsNode_withJavaUtilMap_withEduStanfordNlpTreesTregexTsurgeonCoindexationGenerator_(EduStanfordNlpTreesTregexTsurgeonIfExistsNode *outer$, id<JavaUtilMap> newNodeNames, EduStanfordNlpTreesTregexTsurgeonCoindexationGenerator *coindexer) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesTregexTsurgeonIfExistsNode_Matcher, initWithEduStanfordNlpTreesTregexTsurgeonIfExistsNode_withJavaUtilMap_withEduStanfordNlpTreesTregexTsurgeonCoindexationGenerator_, outer$, newNodeNames, coindexer)
}

EduStanfordNlpTreesTregexTsurgeonIfExistsNode_Matcher *create_EduStanfordNlpTreesTregexTsurgeonIfExistsNode_Matcher_initWithEduStanfordNlpTreesTregexTsurgeonIfExistsNode_withJavaUtilMap_withEduStanfordNlpTreesTregexTsurgeonCoindexationGenerator_(EduStanfordNlpTreesTregexTsurgeonIfExistsNode *outer$, id<JavaUtilMap> newNodeNames, EduStanfordNlpTreesTregexTsurgeonCoindexationGenerator *coindexer) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesTregexTsurgeonIfExistsNode_Matcher, initWithEduStanfordNlpTreesTregexTsurgeonIfExistsNode_withJavaUtilMap_withEduStanfordNlpTreesTregexTsurgeonCoindexationGenerator_, outer$, newNodeNames, coindexer)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTreesTregexTsurgeonIfExistsNode_Matcher)
