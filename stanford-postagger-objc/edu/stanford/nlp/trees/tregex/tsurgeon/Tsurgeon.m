//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/trees/tregex/tsurgeon/Tsurgeon.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/io/IOUtils.h"
#include "edu/stanford/nlp/trees/DiskTreebank.h"
#include "edu/stanford/nlp/trees/HeadFinder.h"
#include "edu/stanford/nlp/trees/PennTreebankLanguagePack.h"
#include "edu/stanford/nlp/trees/Tree.h"
#include "edu/stanford/nlp/trees/TreePrint.h"
#include "edu/stanford/nlp/trees/TreeReaderFactory.h"
#include "edu/stanford/nlp/trees/Treebank.h"
#include "edu/stanford/nlp/trees/tregex/Macros.h"
#include "edu/stanford/nlp/trees/tregex/TregexMatcher.h"
#include "edu/stanford/nlp/trees/tregex/TregexPattern.h"
#include "edu/stanford/nlp/trees/tregex/TregexPatternCompiler.h"
#include "edu/stanford/nlp/trees/tregex/tsurgeon/ParseException.h"
#include "edu/stanford/nlp/trees/tregex/tsurgeon/TokenMgrError.h"
#include "edu/stanford/nlp/trees/tregex/tsurgeon/Tsurgeon.h"
#include "edu/stanford/nlp/trees/tregex/tsurgeon/TsurgeonMatcher.h"
#include "edu/stanford/nlp/trees/tregex/tsurgeon/TsurgeonParseException.h"
#include "edu/stanford/nlp/trees/tregex/tsurgeon/TsurgeonParser.h"
#include "edu/stanford/nlp/trees/tregex/tsurgeon/TsurgeonPattern.h"
#include "edu/stanford/nlp/trees/tregex/tsurgeon/TsurgeonPatternRoot.h"
#include "edu/stanford/nlp/util/Generics.h"
#include "edu/stanford/nlp/util/Pair.h"
#include "edu/stanford/nlp/util/ReflectionLoading.h"
#include "edu/stanford/nlp/util/StringUtils.h"
#include "java/io/BufferedReader.h"
#include "java/io/OutputStreamWriter.h"
#include "java/io/PrintStream.h"
#include "java/io/PrintWriter.h"
#include "java/io/StringReader.h"
#include "java/lang/Integer.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/function/Function.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"
#include "java/util/stream/Collector.h"
#include "java/util/stream/Collectors.h"
#include "java/util/stream/Stream.h"

@interface EduStanfordNlpTreesTregexTsurgeonTsurgeon ()

- (instancetype)init;

+ (void)displayTreeWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
              withEduStanfordNlpTreesTreePrint:(EduStanfordNlpTreesTreePrint *)tp
                         withJavaIoPrintWriter:(JavaIoPrintWriter *)pw;

+ (NSString *)removeCommentsWithNSString:(NSString *)line;

@end

inline jboolean EduStanfordNlpTreesTregexTsurgeonTsurgeon_get_DEBUG();
#define EduStanfordNlpTreesTregexTsurgeonTsurgeon_DEBUG false
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpTreesTregexTsurgeonTsurgeon, DEBUG, jboolean)

inline JavaUtilRegexPattern *EduStanfordNlpTreesTregexTsurgeonTsurgeon_get_emptyLinePattern();
static JavaUtilRegexPattern *EduStanfordNlpTreesTregexTsurgeonTsurgeon_emptyLinePattern;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpTreesTregexTsurgeonTsurgeon, emptyLinePattern, JavaUtilRegexPattern *)

inline NSString *EduStanfordNlpTreesTregexTsurgeonTsurgeon_get_commentIntroducingCharacter();
static NSString *EduStanfordNlpTreesTregexTsurgeonTsurgeon_commentIntroducingCharacter = @"%";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpTreesTregexTsurgeonTsurgeon, commentIntroducingCharacter, NSString *)

inline JavaUtilRegexPattern *EduStanfordNlpTreesTregexTsurgeonTsurgeon_get_commentPattern();
static JavaUtilRegexPattern *EduStanfordNlpTreesTregexTsurgeonTsurgeon_commentPattern;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpTreesTregexTsurgeonTsurgeon, commentPattern, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *EduStanfordNlpTreesTregexTsurgeonTsurgeon_get_escapedCommentCharacterPattern();
static JavaUtilRegexPattern *EduStanfordNlpTreesTregexTsurgeonTsurgeon_escapedCommentCharacterPattern;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpTreesTregexTsurgeonTsurgeon, escapedCommentCharacterPattern, JavaUtilRegexPattern *)

inline jboolean EduStanfordNlpTreesTregexTsurgeonTsurgeon_get_matchedOnTree();
inline jboolean EduStanfordNlpTreesTregexTsurgeonTsurgeon_set_matchedOnTree(jboolean value);
inline jboolean *EduStanfordNlpTreesTregexTsurgeonTsurgeon_getRef_matchedOnTree();
static jboolean EduStanfordNlpTreesTregexTsurgeonTsurgeon_matchedOnTree;
J2OBJC_STATIC_FIELD_PRIMITIVE(EduStanfordNlpTreesTregexTsurgeonTsurgeon, matchedOnTree, jboolean)

__attribute__((unused)) static void EduStanfordNlpTreesTregexTsurgeonTsurgeon_init(EduStanfordNlpTreesTregexTsurgeonTsurgeon *self);

__attribute__((unused)) static EduStanfordNlpTreesTregexTsurgeonTsurgeon *new_EduStanfordNlpTreesTregexTsurgeonTsurgeon_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpTreesTregexTsurgeonTsurgeon *create_EduStanfordNlpTreesTregexTsurgeonTsurgeon_init();

__attribute__((unused)) static void EduStanfordNlpTreesTregexTsurgeonTsurgeon_displayTreeWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTreePrint_withJavaIoPrintWriter_(EduStanfordNlpTreesTree *t, EduStanfordNlpTreesTreePrint *tp, JavaIoPrintWriter *pw);

__attribute__((unused)) static NSString *EduStanfordNlpTreesTregexTsurgeonTsurgeon_removeCommentsWithNSString_(NSString *line);

@interface EduStanfordNlpTreesTregexTsurgeonTsurgeon_$Lambda$1 : NSObject < JavaUtilFunctionFunction > {
 @public
  EduStanfordNlpTreesTregexTregexPattern *val$matchPattern_;
  EduStanfordNlpTreesTregexTsurgeonTsurgeonPattern *val$p_;
}

- (id)applyWithId:(EduStanfordNlpTreesTree *)tree;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpTreesTregexTsurgeonTsurgeon_$Lambda$1)

J2OBJC_FIELD_SETTER(EduStanfordNlpTreesTregexTsurgeonTsurgeon_$Lambda$1, val$matchPattern_, EduStanfordNlpTreesTregexTregexPattern *)
J2OBJC_FIELD_SETTER(EduStanfordNlpTreesTregexTsurgeonTsurgeon_$Lambda$1, val$p_, EduStanfordNlpTreesTregexTsurgeonTsurgeonPattern *)

__attribute__((unused)) static void EduStanfordNlpTreesTregexTsurgeonTsurgeon_$Lambda$1_initWithEduStanfordNlpTreesTregexTregexPattern_withEduStanfordNlpTreesTregexTsurgeonTsurgeonPattern_(EduStanfordNlpTreesTregexTsurgeonTsurgeon_$Lambda$1 *self, EduStanfordNlpTreesTregexTregexPattern *capture$0, EduStanfordNlpTreesTregexTsurgeonTsurgeonPattern *capture$1);

__attribute__((unused)) static EduStanfordNlpTreesTregexTsurgeonTsurgeon_$Lambda$1 *new_EduStanfordNlpTreesTregexTsurgeonTsurgeon_$Lambda$1_initWithEduStanfordNlpTreesTregexTregexPattern_withEduStanfordNlpTreesTregexTsurgeonTsurgeonPattern_(EduStanfordNlpTreesTregexTregexPattern *capture$0, EduStanfordNlpTreesTregexTsurgeonTsurgeonPattern *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpTreesTregexTsurgeonTsurgeon_$Lambda$1 *create_EduStanfordNlpTreesTregexTsurgeonTsurgeon_$Lambda$1_initWithEduStanfordNlpTreesTregexTregexPattern_withEduStanfordNlpTreesTregexTsurgeonTsurgeonPattern_(EduStanfordNlpTreesTregexTregexPattern *capture$0, EduStanfordNlpTreesTregexTsurgeonTsurgeonPattern *capture$1);

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpTreesTregexTsurgeonTsurgeon)

jboolean EduStanfordNlpTreesTregexTsurgeonTsurgeon_verbose;

@implementation EduStanfordNlpTreesTregexTsurgeonTsurgeon

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpTreesTregexTsurgeonTsurgeon_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  EduStanfordNlpTreesTregexTsurgeonTsurgeon_mainWithNSStringArray_(args);
}

+ (void)displayTreeWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
              withEduStanfordNlpTreesTreePrint:(EduStanfordNlpTreesTreePrint *)tp
                         withJavaIoPrintWriter:(JavaIoPrintWriter *)pw {
  EduStanfordNlpTreesTregexTsurgeonTsurgeon_displayTreeWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTreePrint_withJavaIoPrintWriter_(t, tp, pw);
}

+ (EduStanfordNlpUtilPair *)getOperationFromReaderWithJavaIoBufferedReader:(JavaIoBufferedReader *)reader
                        withEduStanfordNlpTreesTregexTregexPatternCompiler:(EduStanfordNlpTreesTregexTregexPatternCompiler *)compiler {
  return EduStanfordNlpTreesTregexTsurgeonTsurgeon_getOperationFromReaderWithJavaIoBufferedReader_withEduStanfordNlpTreesTregexTregexPatternCompiler_(reader, compiler);
}

+ (NSString *)getTregexPatternFromReaderWithJavaIoBufferedReader:(JavaIoBufferedReader *)reader {
  return EduStanfordNlpTreesTregexTsurgeonTsurgeon_getTregexPatternFromReaderWithJavaIoBufferedReader_(reader);
}

+ (EduStanfordNlpTreesTregexTsurgeonTsurgeonPattern *)getTsurgeonOperationsFromReaderWithJavaIoBufferedReader:(JavaIoBufferedReader *)reader {
  return EduStanfordNlpTreesTregexTsurgeonTsurgeon_getTsurgeonOperationsFromReaderWithJavaIoBufferedReader_(reader);
}

+ (NSString *)removeCommentsWithNSString:(NSString *)line {
  return EduStanfordNlpTreesTregexTsurgeonTsurgeon_removeCommentsWithNSString_(line);
}

+ (NSString *)getTsurgeonTextFromReaderWithJavaIoBufferedReader:(JavaIoBufferedReader *)reader {
  return EduStanfordNlpTreesTregexTsurgeonTsurgeon_getTsurgeonTextFromReaderWithJavaIoBufferedReader_(reader);
}

+ (id<JavaUtilList>)getOperationsFromFileWithNSString:(NSString *)filename
                                         withNSString:(NSString *)encoding
   withEduStanfordNlpTreesTregexTregexPatternCompiler:(EduStanfordNlpTreesTregexTregexPatternCompiler *)compiler {
  return EduStanfordNlpTreesTregexTsurgeonTsurgeon_getOperationsFromFileWithNSString_withNSString_withEduStanfordNlpTreesTregexTregexPatternCompiler_(filename, encoding, compiler);
}

+ (id<JavaUtilList>)getOperationsFromReaderWithJavaIoBufferedReader:(JavaIoBufferedReader *)reader
                 withEduStanfordNlpTreesTregexTregexPatternCompiler:(EduStanfordNlpTreesTregexTregexPatternCompiler *)compiler {
  return EduStanfordNlpTreesTregexTsurgeonTsurgeon_getOperationsFromReaderWithJavaIoBufferedReader_withEduStanfordNlpTreesTregexTregexPatternCompiler_(reader, compiler);
}

+ (id<JavaUtilList>)processPatternOnTreesWithEduStanfordNlpTreesTregexTregexPattern:(EduStanfordNlpTreesTregexTregexPattern *)matchPattern
                               withEduStanfordNlpTreesTregexTsurgeonTsurgeonPattern:(EduStanfordNlpTreesTregexTsurgeonTsurgeonPattern *)p
                                                             withJavaUtilCollection:(id<JavaUtilCollection>)inputTrees {
  return EduStanfordNlpTreesTregexTsurgeonTsurgeon_processPatternOnTreesWithEduStanfordNlpTreesTregexTregexPattern_withEduStanfordNlpTreesTregexTsurgeonTsurgeonPattern_withJavaUtilCollection_(matchPattern, p, inputTrees);
}

+ (EduStanfordNlpTreesTree *)processPatternWithEduStanfordNlpTreesTregexTregexPattern:(EduStanfordNlpTreesTregexTregexPattern *)matchPattern
                                 withEduStanfordNlpTreesTregexTsurgeonTsurgeonPattern:(EduStanfordNlpTreesTregexTsurgeonTsurgeonPattern *)p
                                                          withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t {
  return EduStanfordNlpTreesTregexTsurgeonTsurgeon_processPatternWithEduStanfordNlpTreesTregexTregexPattern_withEduStanfordNlpTreesTregexTsurgeonTsurgeonPattern_withEduStanfordNlpTreesTree_(matchPattern, p, t);
}

+ (EduStanfordNlpTreesTree *)processPatternsOnTreeWithJavaUtilList:(id<JavaUtilList>)ops
                                       withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t {
  return EduStanfordNlpTreesTregexTsurgeonTsurgeon_processPatternsOnTreeWithJavaUtilList_withEduStanfordNlpTreesTree_(ops, t);
}

+ (EduStanfordNlpTreesTregexTsurgeonTsurgeonPattern *)parseOperationWithNSString:(NSString *)operationString {
  return EduStanfordNlpTreesTregexTsurgeonTsurgeon_parseOperationWithNSString_(operationString);
}

+ (EduStanfordNlpTreesTregexTsurgeonTsurgeonPattern *)collectOperationsWithJavaUtilList:(id<JavaUtilList>)patterns {
  return EduStanfordNlpTreesTregexTsurgeonTsurgeon_collectOperationsWithJavaUtilList_(patterns);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, 2, -1, -1, -1 },
    { NULL, "V", 0xa, 3, 4, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpUtilPair;", 0x9, 5, 6, 7, 8, -1, -1 },
    { NULL, "LNSString;", 0x9, 9, 10, 7, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTregexTsurgeonTsurgeonPattern;", 0x9, 11, 10, 7, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 12, 13, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 14, 10, 7, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 15, 16, 7, 17, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 18, 6, 7, 19, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 20, 21, -1, 22, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x9, 23, 24, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x9, 25, 26, -1, 27, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTregexTsurgeonTsurgeonPattern;", 0x9, 28, 13, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTregexTsurgeonTsurgeonPattern;", 0x9, 29, 30, -1, 31, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(mainWithNSStringArray:);
  methods[2].selector = @selector(displayTreeWithEduStanfordNlpTreesTree:withEduStanfordNlpTreesTreePrint:withJavaIoPrintWriter:);
  methods[3].selector = @selector(getOperationFromReaderWithJavaIoBufferedReader:withEduStanfordNlpTreesTregexTregexPatternCompiler:);
  methods[4].selector = @selector(getTregexPatternFromReaderWithJavaIoBufferedReader:);
  methods[5].selector = @selector(getTsurgeonOperationsFromReaderWithJavaIoBufferedReader:);
  methods[6].selector = @selector(removeCommentsWithNSString:);
  methods[7].selector = @selector(getTsurgeonTextFromReaderWithJavaIoBufferedReader:);
  methods[8].selector = @selector(getOperationsFromFileWithNSString:withNSString:withEduStanfordNlpTreesTregexTregexPatternCompiler:);
  methods[9].selector = @selector(getOperationsFromReaderWithJavaIoBufferedReader:withEduStanfordNlpTreesTregexTregexPatternCompiler:);
  methods[10].selector = @selector(processPatternOnTreesWithEduStanfordNlpTreesTregexTregexPattern:withEduStanfordNlpTreesTregexTsurgeonTsurgeonPattern:withJavaUtilCollection:);
  methods[11].selector = @selector(processPatternWithEduStanfordNlpTreesTregexTregexPattern:withEduStanfordNlpTreesTregexTsurgeonTsurgeonPattern:withEduStanfordNlpTreesTree:);
  methods[12].selector = @selector(processPatternsOnTreeWithJavaUtilList:withEduStanfordNlpTreesTree:);
  methods[13].selector = @selector(parseOperationWithNSString:);
  methods[14].selector = @selector(collectOperationsWithJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DEBUG", "Z", .constantValue.asBOOL = EduStanfordNlpTreesTregexTsurgeonTsurgeon_DEBUG, 0x1a, -1, -1, -1, -1 },
    { "verbose", "Z", .constantValue.asLong = 0, 0x8, -1, 32, -1, -1 },
    { "emptyLinePattern", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 33, -1, -1 },
    { "commentIntroducingCharacter", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 34, -1, -1 },
    { "commentPattern", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 35, -1, -1 },
    { "escapedCommentCharacterPattern", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 36, -1, -1 },
    { "matchedOnTree", "Z", .constantValue.asLong = 0, 0xa, -1, 37, -1, -1 },
  };
  static const void *ptrTable[] = { "main", "[LNSString;", "LJavaLangException;", "displayTree", "LEduStanfordNlpTreesTree;LEduStanfordNlpTreesTreePrint;LJavaIoPrintWriter;", "getOperationFromReader", "LJavaIoBufferedReader;LEduStanfordNlpTreesTregexTregexPatternCompiler;", "LJavaIoIOException;", "(Ljava/io/BufferedReader;Ledu/stanford/nlp/trees/tregex/TregexPatternCompiler;)Ledu/stanford/nlp/util/Pair<Ledu/stanford/nlp/trees/tregex/TregexPattern;Ledu/stanford/nlp/trees/tregex/tsurgeon/TsurgeonPattern;>;", "getTregexPatternFromReader", "LJavaIoBufferedReader;", "getTsurgeonOperationsFromReader", "removeComments", "LNSString;", "getTsurgeonTextFromReader", "getOperationsFromFile", "LNSString;LNSString;LEduStanfordNlpTreesTregexTregexPatternCompiler;", "(Ljava/lang/String;Ljava/lang/String;Ledu/stanford/nlp/trees/tregex/TregexPatternCompiler;)Ljava/util/List<Ledu/stanford/nlp/util/Pair<Ledu/stanford/nlp/trees/tregex/TregexPattern;Ledu/stanford/nlp/trees/tregex/tsurgeon/TsurgeonPattern;>;>;", "getOperationsFromReader", "(Ljava/io/BufferedReader;Ledu/stanford/nlp/trees/tregex/TregexPatternCompiler;)Ljava/util/List<Ledu/stanford/nlp/util/Pair<Ledu/stanford/nlp/trees/tregex/TregexPattern;Ledu/stanford/nlp/trees/tregex/tsurgeon/TsurgeonPattern;>;>;", "processPatternOnTrees", "LEduStanfordNlpTreesTregexTregexPattern;LEduStanfordNlpTreesTregexTsurgeonTsurgeonPattern;LJavaUtilCollection;", "(Ledu/stanford/nlp/trees/tregex/TregexPattern;Ledu/stanford/nlp/trees/tregex/tsurgeon/TsurgeonPattern;Ljava/util/Collection<Ledu/stanford/nlp/trees/Tree;>;)Ljava/util/List<Ledu/stanford/nlp/trees/Tree;>;", "processPattern", "LEduStanfordNlpTreesTregexTregexPattern;LEduStanfordNlpTreesTregexTsurgeonTsurgeonPattern;LEduStanfordNlpTreesTree;", "processPatternsOnTree", "LJavaUtilList;LEduStanfordNlpTreesTree;", "(Ljava/util/List<Ledu/stanford/nlp/util/Pair<Ledu/stanford/nlp/trees/tregex/TregexPattern;Ledu/stanford/nlp/trees/tregex/tsurgeon/TsurgeonPattern;>;>;Ledu/stanford/nlp/trees/Tree;)Ledu/stanford/nlp/trees/Tree;", "parseOperation", "collectOperations", "LJavaUtilList;", "(Ljava/util/List<Ledu/stanford/nlp/trees/tregex/tsurgeon/TsurgeonPattern;>;)Ledu/stanford/nlp/trees/tregex/tsurgeon/TsurgeonPattern;", &EduStanfordNlpTreesTregexTsurgeonTsurgeon_verbose, &EduStanfordNlpTreesTregexTsurgeonTsurgeon_emptyLinePattern, &EduStanfordNlpTreesTregexTsurgeonTsurgeon_commentIntroducingCharacter, &EduStanfordNlpTreesTregexTsurgeonTsurgeon_commentPattern, &EduStanfordNlpTreesTregexTsurgeonTsurgeon_escapedCommentCharacterPattern, &EduStanfordNlpTreesTregexTsurgeonTsurgeon_matchedOnTree };
  static const J2ObjcClassInfo _EduStanfordNlpTreesTregexTsurgeonTsurgeon = { "Tsurgeon", "edu.stanford.nlp.trees.tregex.tsurgeon", ptrTable, methods, fields, 7, 0x1, 15, 7, -1, -1, -1, -1, -1 };
  return &_EduStanfordNlpTreesTregexTsurgeonTsurgeon;
}

+ (void)initialize {
  if (self == [EduStanfordNlpTreesTregexTsurgeonTsurgeon class]) {
    EduStanfordNlpTreesTregexTsurgeonTsurgeon_emptyLinePattern = JavaUtilRegexPattern_compileWithNSString_(@"^\\s*$");
    EduStanfordNlpTreesTregexTsurgeonTsurgeon_commentPattern = JavaUtilRegexPattern_compileWithNSString_(@"(?<!\\\\)%.*$");
    EduStanfordNlpTreesTregexTsurgeonTsurgeon_escapedCommentCharacterPattern = JavaUtilRegexPattern_compileWithNSString_(JreStrcat("$$", @"\\\\", EduStanfordNlpTreesTregexTsurgeonTsurgeon_commentIntroducingCharacter));
    J2OBJC_SET_INITIALIZED(EduStanfordNlpTreesTregexTsurgeonTsurgeon)
  }
}

@end

void EduStanfordNlpTreesTregexTsurgeonTsurgeon_init(EduStanfordNlpTreesTregexTsurgeonTsurgeon *self) {
  NSObject_init(self);
}

EduStanfordNlpTreesTregexTsurgeonTsurgeon *new_EduStanfordNlpTreesTregexTsurgeonTsurgeon_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesTregexTsurgeonTsurgeon, init)
}

EduStanfordNlpTreesTregexTsurgeonTsurgeon *create_EduStanfordNlpTreesTregexTsurgeonTsurgeon_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesTregexTsurgeonTsurgeon, init)
}

void EduStanfordNlpTreesTregexTsurgeonTsurgeon_mainWithNSStringArray_(IOSObjectArray *args) {
  EduStanfordNlpTreesTregexTsurgeonTsurgeon_initialize();
  NSString *headFinderClassName = nil;
  NSString *headFinderOption = @"-hf";
  IOSObjectArray *headFinderArgs = nil;
  NSString *headFinderArgOption = @"-hfArg";
  NSString *encoding = @"UTF-8";
  NSString *encodingOption = @"-encoding";
  if (((IOSObjectArray *) nil_chk(args))->size_ == 0) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"Usage: java edu.stanford.nlp.trees.tregex.tsurgeon.Tsurgeon [-s] -treeFile <file-with-trees> [-po <matching-pattern> <operation>] <operation-file-1> <operation-file-2> ... <operation-file-n>"];
    JavaLangSystem_exitWithInt_(0);
  }
  NSString *treePrintFormats;
  NSString *singleLineOption = @"-s";
  NSString *verboseOption = @"-v";
  NSString *matchedOption = @"-m";
  NSString *patternOperationOption = @"-po";
  NSString *treeFileOption = @"-treeFile";
  NSString *trfOption = @"-trf";
  NSString *macroOption = @"-macros";
  NSString *macroFilename = @"";
  id<JavaUtilMap> flagMap = EduStanfordNlpUtilGenerics_newHashMap();
  (void) [((id<JavaUtilMap>) nil_chk(flagMap)) putWithId:patternOperationOption withId:JavaLangInteger_valueOfWithInt_(2)];
  (void) [flagMap putWithId:treeFileOption withId:JavaLangInteger_valueOfWithInt_(1)];
  (void) [flagMap putWithId:trfOption withId:JavaLangInteger_valueOfWithInt_(1)];
  (void) [flagMap putWithId:singleLineOption withId:JavaLangInteger_valueOfWithInt_(0)];
  (void) [flagMap putWithId:encodingOption withId:JavaLangInteger_valueOfWithInt_(1)];
  (void) [flagMap putWithId:headFinderOption withId:JavaLangInteger_valueOfWithInt_(1)];
  (void) [flagMap putWithId:macroOption withId:JavaLangInteger_valueOfWithInt_(1)];
  id<JavaUtilMap> argsMap = EduStanfordNlpUtilStringUtils_argsToMapWithNSStringArray_withJavaUtilMap_(args, flagMap);
  args = [((id<JavaUtilMap>) nil_chk(argsMap)) getWithId:nil];
  if ([argsMap containsKeyWithId:headFinderOption]) headFinderClassName = IOSObjectArray_Get(nil_chk([argsMap getWithId:headFinderOption]), 0);
  if ([argsMap containsKeyWithId:headFinderArgOption]) headFinderArgs = [argsMap getWithId:headFinderArgOption];
  if ([argsMap containsKeyWithId:verboseOption]) EduStanfordNlpTreesTregexTsurgeonTsurgeon_verbose = true;
  if ([argsMap containsKeyWithId:singleLineOption]) treePrintFormats = @"oneline,";
  else treePrintFormats = @"penn,";
  if ([argsMap containsKeyWithId:encodingOption]) encoding = IOSObjectArray_Get(nil_chk([argsMap getWithId:encodingOption]), 0);
  if ([argsMap containsKeyWithId:macroOption]) macroFilename = IOSObjectArray_Get(nil_chk([argsMap getWithId:macroOption]), 0);
  EduStanfordNlpTreesTreePrint *tp = new_EduStanfordNlpTreesTreePrint_initWithNSString_withEduStanfordNlpTreesTreebankLanguagePack_(treePrintFormats, new_EduStanfordNlpTreesPennTreebankLanguagePack_init());
  JavaIoPrintWriter *pwOut = new_JavaIoPrintWriter_initWithJavaIoWriter_withBoolean_(new_JavaIoOutputStreamWriter_initWithJavaIoOutputStream_withNSString_(JreLoadStatic(JavaLangSystem, out), encoding), true);
  id<EduStanfordNlpTreesTreeReaderFactory> trf;
  if ([argsMap containsKeyWithId:trfOption]) {
    NSString *trfClass = IOSObjectArray_Get(nil_chk([argsMap getWithId:trfOption]), 0);
    trf = EduStanfordNlpUtilReflectionLoading_loadByReflectionWithNSString_withNSObjectArray_(trfClass, [IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]);
  }
  else {
    trf = new_EduStanfordNlpTreesTregexTregexPattern_TRegexTreeReaderFactory_init();
  }
  EduStanfordNlpTreesTreebank *trees = new_EduStanfordNlpTreesDiskTreebank_initWithEduStanfordNlpTreesTreeReaderFactory_withNSString_(trf, encoding);
  if ([argsMap containsKeyWithId:treeFileOption]) {
    [trees loadPathWithNSString:IOSObjectArray_Get(nil_chk([argsMap getWithId:treeFileOption]), 0)];
  }
  if ([trees isEmpty]) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"Warning: No trees specified to operate on.  Use -treeFile path option."];
  }
  EduStanfordNlpTreesTregexTregexPatternCompiler *compiler;
  if (headFinderClassName == nil) {
    compiler = new_EduStanfordNlpTreesTregexTregexPatternCompiler_init();
  }
  else {
    id<EduStanfordNlpTreesHeadFinder> hf;
    if (headFinderArgs == nil) {
      hf = EduStanfordNlpUtilReflectionLoading_loadByReflectionWithNSString_withNSObjectArray_(headFinderClassName, [IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]);
    }
    else {
      hf = EduStanfordNlpUtilReflectionLoading_loadByReflectionWithNSString_withNSObjectArray_(headFinderClassName, headFinderArgs);
    }
    compiler = new_EduStanfordNlpTreesTregexTregexPatternCompiler_initWithEduStanfordNlpTreesHeadFinder_(hf);
  }
  EduStanfordNlpTreesTregexMacros_addAllMacrosWithEduStanfordNlpTreesTregexTregexPatternCompiler_withNSString_withNSString_(compiler, macroFilename, encoding);
  id<JavaUtilList> ops = new_JavaUtilArrayList_init();
  if ([argsMap containsKeyWithId:patternOperationOption]) {
    EduStanfordNlpTreesTregexTregexPattern *matchPattern = [compiler compileWithNSString:IOSObjectArray_Get(nil_chk([argsMap getWithId:patternOperationOption]), 0)];
    EduStanfordNlpTreesTregexTsurgeonTsurgeonPattern *p = EduStanfordNlpTreesTregexTsurgeonTsurgeon_parseOperationWithNSString_(IOSObjectArray_Get(nil_chk([argsMap getWithId:patternOperationOption]), 1));
    [ops addWithId:new_EduStanfordNlpUtilPair_initWithId_withId_(matchPattern, p)];
  }
  else {
    {
      IOSObjectArray *a__ = args;
      NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      NSString * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        NSString *arg = *b__++;
        id<JavaUtilList> pairs = EduStanfordNlpTreesTregexTsurgeonTsurgeon_getOperationsFromFileWithNSString_withNSString_withEduStanfordNlpTreesTregexTregexPatternCompiler_(arg, encoding, compiler);
        for (EduStanfordNlpUtilPair * __strong pair in nil_chk(pairs)) {
          if (EduStanfordNlpTreesTregexTsurgeonTsurgeon_verbose) {
            [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithId:[((EduStanfordNlpUtilPair *) nil_chk(pair)) second]];
          }
          [ops addWithId:pair];
        }
      }
    }
  }
  for (EduStanfordNlpTreesTree * __strong t in trees) {
    EduStanfordNlpTreesTree *original = [((EduStanfordNlpTreesTree *) nil_chk(t)) deepCopy];
    EduStanfordNlpTreesTree *result = EduStanfordNlpTreesTregexTsurgeonTsurgeon_processPatternsOnTreeWithJavaUtilList_withEduStanfordNlpTreesTree_(ops, t);
    if ([argsMap containsKeyWithId:matchedOption] && EduStanfordNlpTreesTregexTsurgeonTsurgeon_matchedOnTree) {
      [pwOut printlnWithNSString:@"Operated on: "];
      EduStanfordNlpTreesTregexTsurgeonTsurgeon_displayTreeWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTreePrint_withJavaIoPrintWriter_(original, tp, pwOut);
      [pwOut printlnWithNSString:@"Result: "];
    }
    EduStanfordNlpTreesTregexTsurgeonTsurgeon_displayTreeWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTreePrint_withJavaIoPrintWriter_(result, tp, pwOut);
  }
}

void EduStanfordNlpTreesTregexTsurgeonTsurgeon_displayTreeWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTreePrint_withJavaIoPrintWriter_(EduStanfordNlpTreesTree *t, EduStanfordNlpTreesTreePrint *tp, JavaIoPrintWriter *pw) {
  EduStanfordNlpTreesTregexTsurgeonTsurgeon_initialize();
  if (t == nil) {
    [((JavaIoPrintWriter *) nil_chk(pw)) printlnWithNSString:@"null"];
  }
  else {
    [((EduStanfordNlpTreesTreePrint *) nil_chk(tp)) printTreeWithEduStanfordNlpTreesTree:t withJavaIoPrintWriter:pw];
  }
}

EduStanfordNlpUtilPair *EduStanfordNlpTreesTregexTsurgeonTsurgeon_getOperationFromReaderWithJavaIoBufferedReader_withEduStanfordNlpTreesTregexTregexPatternCompiler_(JavaIoBufferedReader *reader, EduStanfordNlpTreesTregexTregexPatternCompiler *compiler) {
  EduStanfordNlpTreesTregexTsurgeonTsurgeon_initialize();
  NSString *patternString = EduStanfordNlpTreesTregexTsurgeonTsurgeon_getTregexPatternFromReaderWithJavaIoBufferedReader_(reader);
  if (patternString != nil && [patternString isEmpty]) {
    return nil;
  }
  EduStanfordNlpTreesTregexTregexPattern *matchPattern = [((EduStanfordNlpTreesTregexTregexPatternCompiler *) nil_chk(compiler)) compileWithNSString:patternString];
  EduStanfordNlpTreesTregexTsurgeonTsurgeonPattern *collectedPattern = EduStanfordNlpTreesTregexTsurgeonTsurgeon_getTsurgeonOperationsFromReaderWithJavaIoBufferedReader_(reader);
  return new_EduStanfordNlpUtilPair_initWithId_withId_(matchPattern, collectedPattern);
}

NSString *EduStanfordNlpTreesTregexTsurgeonTsurgeon_getTregexPatternFromReaderWithJavaIoBufferedReader_(JavaIoBufferedReader *reader) {
  EduStanfordNlpTreesTregexTsurgeonTsurgeon_initialize();
  JavaLangStringBuilder *matchString = new_JavaLangStringBuilder_init();
  for (NSString *thisLine; (thisLine = [((JavaIoBufferedReader *) nil_chk(reader)) readLine]) != nil; ) {
    if ([matchString length] > 0 && [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(EduStanfordNlpTreesTregexTsurgeonTsurgeon_emptyLinePattern)) matcherWithJavaLangCharSequence:thisLine])) matches]) {
      break;
    }
    thisLine = EduStanfordNlpTreesTregexTsurgeonTsurgeon_removeCommentsWithNSString_(thisLine);
    if (![((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(EduStanfordNlpTreesTregexTsurgeonTsurgeon_emptyLinePattern)) matcherWithJavaLangCharSequence:thisLine])) matches]) {
      (void) [matchString appendWithNSString:thisLine];
    }
  }
  return [matchString description];
}

EduStanfordNlpTreesTregexTsurgeonTsurgeonPattern *EduStanfordNlpTreesTregexTsurgeonTsurgeon_getTsurgeonOperationsFromReaderWithJavaIoBufferedReader_(JavaIoBufferedReader *reader) {
  EduStanfordNlpTreesTregexTsurgeonTsurgeon_initialize();
  id<JavaUtilList> operations = new_JavaUtilArrayList_init();
  for (NSString *thisLine; (thisLine = [((JavaIoBufferedReader *) nil_chk(reader)) readLine]) != nil; ) {
    if ([((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(EduStanfordNlpTreesTregexTsurgeonTsurgeon_emptyLinePattern)) matcherWithJavaLangCharSequence:thisLine])) matches]) {
      break;
    }
    thisLine = EduStanfordNlpTreesTregexTsurgeonTsurgeon_removeCommentsWithNSString_(thisLine);
    if ([((JavaUtilRegexMatcher *) nil_chk([EduStanfordNlpTreesTregexTsurgeonTsurgeon_emptyLinePattern matcherWithJavaLangCharSequence:thisLine])) matches]) {
      continue;
    }
    [operations addWithId:EduStanfordNlpTreesTregexTsurgeonTsurgeon_parseOperationWithNSString_(thisLine)];
  }
  if ([operations isEmpty]) {
    @throw new_EduStanfordNlpTreesTregexTsurgeonTsurgeonParseException_initWithNSString_(@"No Tsurgeon operation provided.");
  }
  return EduStanfordNlpTreesTregexTsurgeonTsurgeon_collectOperationsWithJavaUtilList_(operations);
}

NSString *EduStanfordNlpTreesTregexTsurgeonTsurgeon_removeCommentsWithNSString_(NSString *line) {
  EduStanfordNlpTreesTregexTsurgeonTsurgeon_initialize();
  JavaUtilRegexMatcher *m = [((JavaUtilRegexPattern *) nil_chk(EduStanfordNlpTreesTregexTsurgeonTsurgeon_commentPattern)) matcherWithJavaLangCharSequence:line];
  line = [((JavaUtilRegexMatcher *) nil_chk(m)) replaceFirstWithNSString:@""];
  JavaUtilRegexMatcher *m1 = [((JavaUtilRegexPattern *) nil_chk(EduStanfordNlpTreesTregexTsurgeonTsurgeon_escapedCommentCharacterPattern)) matcherWithJavaLangCharSequence:line];
  line = [((JavaUtilRegexMatcher *) nil_chk(m1)) replaceAllWithNSString:EduStanfordNlpTreesTregexTsurgeonTsurgeon_commentIntroducingCharacter];
  return line;
}

NSString *EduStanfordNlpTreesTregexTsurgeonTsurgeon_getTsurgeonTextFromReaderWithJavaIoBufferedReader_(JavaIoBufferedReader *reader) {
  EduStanfordNlpTreesTregexTsurgeonTsurgeon_initialize();
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  for (NSString *thisLine; (thisLine = [((JavaIoBufferedReader *) nil_chk(reader)) readLine]) != nil; ) {
    thisLine = EduStanfordNlpTreesTregexTsurgeonTsurgeon_removeCommentsWithNSString_(thisLine);
    if ([((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(EduStanfordNlpTreesTregexTsurgeonTsurgeon_emptyLinePattern)) matcherWithJavaLangCharSequence:thisLine])) matches]) {
      continue;
    }
    (void) [sb appendWithNSString:thisLine];
    (void) [sb appendWithChar:0x000a];
  }
  return [sb description];
}

id<JavaUtilList> EduStanfordNlpTreesTregexTsurgeonTsurgeon_getOperationsFromFileWithNSString_withNSString_withEduStanfordNlpTreesTregexTregexPatternCompiler_(NSString *filename, NSString *encoding, EduStanfordNlpTreesTregexTregexPatternCompiler *compiler) {
  EduStanfordNlpTreesTregexTsurgeonTsurgeon_initialize();
  JavaIoBufferedReader *reader = EduStanfordNlpIoIOUtils_readerFromStringWithNSString_withNSString_(filename, encoding);
  id<JavaUtilList> operations = EduStanfordNlpTreesTregexTsurgeonTsurgeon_getOperationsFromReaderWithJavaIoBufferedReader_withEduStanfordNlpTreesTregexTregexPatternCompiler_(reader, compiler);
  [((JavaIoBufferedReader *) nil_chk(reader)) close];
  return operations;
}

id<JavaUtilList> EduStanfordNlpTreesTregexTsurgeonTsurgeon_getOperationsFromReaderWithJavaIoBufferedReader_withEduStanfordNlpTreesTregexTregexPatternCompiler_(JavaIoBufferedReader *reader, EduStanfordNlpTreesTregexTregexPatternCompiler *compiler) {
  EduStanfordNlpTreesTregexTsurgeonTsurgeon_initialize();
  id<JavaUtilList> operations = new_JavaUtilArrayList_init();
  for (; ; ) {
    EduStanfordNlpUtilPair *operation = EduStanfordNlpTreesTregexTsurgeonTsurgeon_getOperationFromReaderWithJavaIoBufferedReader_withEduStanfordNlpTreesTregexTregexPatternCompiler_(reader, compiler);
    if (operation == nil) {
      break;
    }
    [operations addWithId:operation];
  }
  return operations;
}

id<JavaUtilList> EduStanfordNlpTreesTregexTsurgeonTsurgeon_processPatternOnTreesWithEduStanfordNlpTreesTregexTregexPattern_withEduStanfordNlpTreesTregexTsurgeonTsurgeonPattern_withJavaUtilCollection_(EduStanfordNlpTreesTregexTregexPattern *matchPattern, EduStanfordNlpTreesTregexTsurgeonTsurgeonPattern *p, id<JavaUtilCollection> inputTrees) {
  EduStanfordNlpTreesTregexTsurgeonTsurgeon_initialize();
  id<JavaUtilList> result = [((id<JavaUtilStreamStream>) nil_chk([((id<JavaUtilStreamStream>) nil_chk([((id<JavaUtilCollection>) nil_chk(inputTrees)) stream])) mapWithJavaUtilFunctionFunction:new_EduStanfordNlpTreesTregexTsurgeonTsurgeon_$Lambda$1_initWithEduStanfordNlpTreesTregexTregexPattern_withEduStanfordNlpTreesTregexTsurgeonTsurgeonPattern_(matchPattern, p)])) collectWithJavaUtilStreamCollector:JavaUtilStreamCollectors_toList()];
  return result;
}

EduStanfordNlpTreesTree *EduStanfordNlpTreesTregexTsurgeonTsurgeon_processPatternWithEduStanfordNlpTreesTregexTregexPattern_withEduStanfordNlpTreesTregexTsurgeonTsurgeonPattern_withEduStanfordNlpTreesTree_(EduStanfordNlpTreesTregexTregexPattern *matchPattern, EduStanfordNlpTreesTregexTsurgeonTsurgeonPattern *p, EduStanfordNlpTreesTree *t) {
  EduStanfordNlpTreesTregexTsurgeonTsurgeon_initialize();
  EduStanfordNlpTreesTregexTregexMatcher *m = [((EduStanfordNlpTreesTregexTregexPattern *) nil_chk(matchPattern)) matcherWithEduStanfordNlpTreesTree:t];
  EduStanfordNlpTreesTregexTsurgeonTsurgeonMatcher *tsm = [((EduStanfordNlpTreesTregexTsurgeonTsurgeonPattern *) nil_chk(p)) matcher];
  while ([((EduStanfordNlpTreesTregexTregexMatcher *) nil_chk(m)) find]) {
    t = [((EduStanfordNlpTreesTregexTsurgeonTsurgeonMatcher *) nil_chk(tsm)) evaluateWithEduStanfordNlpTreesTree:t withEduStanfordNlpTreesTregexTregexMatcher:m];
    if (t == nil) {
      break;
    }
    m = [matchPattern matcherWithEduStanfordNlpTreesTree:t];
  }
  return t;
}

EduStanfordNlpTreesTree *EduStanfordNlpTreesTregexTsurgeonTsurgeon_processPatternsOnTreeWithJavaUtilList_withEduStanfordNlpTreesTree_(id<JavaUtilList> ops, EduStanfordNlpTreesTree *t) {
  EduStanfordNlpTreesTregexTsurgeonTsurgeon_initialize();
  EduStanfordNlpTreesTregexTsurgeonTsurgeon_matchedOnTree = false;
  for (EduStanfordNlpUtilPair * __strong op in nil_chk(ops)) {
    @try {
      EduStanfordNlpTreesTregexTregexMatcher *m = [((EduStanfordNlpTreesTregexTregexPattern *) nil_chk([((EduStanfordNlpUtilPair *) nil_chk(op)) first])) matcherWithEduStanfordNlpTreesTree:t];
      EduStanfordNlpTreesTregexTsurgeonTsurgeonMatcher *tsm = [((EduStanfordNlpTreesTregexTsurgeonTsurgeonPattern *) nil_chk([op second])) matcher];
      while ([((EduStanfordNlpTreesTregexTregexMatcher *) nil_chk(m)) find]) {
        EduStanfordNlpTreesTregexTsurgeonTsurgeon_matchedOnTree = true;
        t = [((EduStanfordNlpTreesTregexTsurgeonTsurgeonMatcher *) nil_chk(tsm)) evaluateWithEduStanfordNlpTreesTree:t withEduStanfordNlpTreesTregexTregexMatcher:m];
        if (t == nil) {
          return nil;
        }
        m = [((EduStanfordNlpTreesTregexTregexPattern *) nil_chk([op first])) matcherWithEduStanfordNlpTreesTree:t];
      }
    }
    @catch (JavaLangNullPointerException *npe) {
      @throw new_JavaLangRuntimeException_initWithNSString_withNSException_(JreStrcat("$@$@", @"Tsurgeon.processPatternsOnTree failed to match label for pattern: ", [op first], @", ", [op second]), npe);
    }
  }
  return t;
}

EduStanfordNlpTreesTregexTsurgeonTsurgeonPattern *EduStanfordNlpTreesTregexTsurgeonTsurgeon_parseOperationWithNSString_(NSString *operationString) {
  EduStanfordNlpTreesTregexTsurgeonTsurgeon_initialize();
  @try {
    EduStanfordNlpTreesTregexTsurgeonTsurgeonParser *parser = new_EduStanfordNlpTreesTregexTsurgeonTsurgeonParser_initWithJavaIoReader_(new_JavaIoStringReader_initWithNSString_(JreStrcat("$C", operationString, 0x000a)));
    return [parser Root];
  }
  @catch (EduStanfordNlpTreesTregexTsurgeonParseException *e) {
    @throw new_EduStanfordNlpTreesTregexTsurgeonTsurgeonParseException_initWithNSString_withNSException_(JreStrcat("$$", @"Error parsing Tsurgeon expression: ", operationString), e);
  }
  @catch (EduStanfordNlpTreesTregexTsurgeonTokenMgrError *e) {
    @throw new_EduStanfordNlpTreesTregexTsurgeonTsurgeonParseException_initWithNSString_withNSException_(JreStrcat("$$", @"Error parsing Tsurgeon expression: ", operationString), e);
  }
}

EduStanfordNlpTreesTregexTsurgeonTsurgeonPattern *EduStanfordNlpTreesTregexTsurgeonTsurgeon_collectOperationsWithJavaUtilList_(id<JavaUtilList> patterns) {
  EduStanfordNlpTreesTregexTsurgeonTsurgeon_initialize();
  return new_EduStanfordNlpTreesTregexTsurgeonTsurgeonPatternRoot_initWithEduStanfordNlpTreesTregexTsurgeonTsurgeonPatternArray_([((id<JavaUtilList>) nil_chk(patterns)) toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:[patterns size] type:EduStanfordNlpTreesTregexTsurgeonTsurgeonPattern_class_()]]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTreesTregexTsurgeonTsurgeon)

@implementation EduStanfordNlpTreesTregexTsurgeonTsurgeon_$Lambda$1

- (id)applyWithId:(EduStanfordNlpTreesTree *)tree {
  return EduStanfordNlpTreesTregexTsurgeonTsurgeon_processPatternWithEduStanfordNlpTreesTregexTregexPattern_withEduStanfordNlpTreesTregexTsurgeonTsurgeonPattern_withEduStanfordNlpTreesTree_(val$matchPattern_, val$p_, tree);
}

- (id<JavaUtilFunctionFunction>)andThenWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_andThenWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilFunctionFunction>)composeWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_composeWithJavaUtilFunctionFunction_(self, arg0);
}

@end

void EduStanfordNlpTreesTregexTsurgeonTsurgeon_$Lambda$1_initWithEduStanfordNlpTreesTregexTregexPattern_withEduStanfordNlpTreesTregexTsurgeonTsurgeonPattern_(EduStanfordNlpTreesTregexTsurgeonTsurgeon_$Lambda$1 *self, EduStanfordNlpTreesTregexTregexPattern *capture$0, EduStanfordNlpTreesTregexTsurgeonTsurgeonPattern *capture$1) {
  self->val$matchPattern_ = capture$0;
  self->val$p_ = capture$1;
  NSObject_init(self);
}

EduStanfordNlpTreesTregexTsurgeonTsurgeon_$Lambda$1 *new_EduStanfordNlpTreesTregexTsurgeonTsurgeon_$Lambda$1_initWithEduStanfordNlpTreesTregexTregexPattern_withEduStanfordNlpTreesTregexTsurgeonTsurgeonPattern_(EduStanfordNlpTreesTregexTregexPattern *capture$0, EduStanfordNlpTreesTregexTsurgeonTsurgeonPattern *capture$1) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesTregexTsurgeonTsurgeon_$Lambda$1, initWithEduStanfordNlpTreesTregexTregexPattern_withEduStanfordNlpTreesTregexTsurgeonTsurgeonPattern_, capture$0, capture$1)
}

EduStanfordNlpTreesTregexTsurgeonTsurgeon_$Lambda$1 *create_EduStanfordNlpTreesTregexTsurgeonTsurgeon_$Lambda$1_initWithEduStanfordNlpTreesTregexTregexPattern_withEduStanfordNlpTreesTregexTsurgeonTsurgeonPattern_(EduStanfordNlpTreesTregexTregexPattern *capture$0, EduStanfordNlpTreesTregexTsurgeonTsurgeonPattern *capture$1) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesTregexTsurgeonTsurgeon_$Lambda$1, initWithEduStanfordNlpTreesTregexTregexPattern_withEduStanfordNlpTreesTregexTsurgeonTsurgeonPattern_, capture$0, capture$1)
}
