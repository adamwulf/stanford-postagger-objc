//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/trees/tregex/tsurgeon/JJTTsurgeonParserState.java
//

#include "J2ObjC_source.h"
#include "edu/stanford/nlp/trees/tregex/tsurgeon/JJTTsurgeonParserState.h"
#include "edu/stanford/nlp/trees/tregex/tsurgeon/Node.h"
#include "java/lang/Integer.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"

@interface EduStanfordNlpTreesTregexTsurgeonJJTTsurgeonParserState () {
 @public
  id<JavaUtilList> nodes_;
  id<JavaUtilList> marks_;
  jint sp_;
  jint mk_;
  jboolean node_created_;
}

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpTreesTregexTsurgeonJJTTsurgeonParserState, nodes_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(EduStanfordNlpTreesTregexTsurgeonJJTTsurgeonParserState, marks_, id<JavaUtilList>)

@implementation EduStanfordNlpTreesTregexTsurgeonJJTTsurgeonParserState

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpTreesTregexTsurgeonJJTTsurgeonParserState_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)nodeCreated {
  return node_created_;
}

- (void)reset {
  [((id<JavaUtilList>) nil_chk(nodes_)) clear];
  [((id<JavaUtilList>) nil_chk(marks_)) clear];
  sp_ = 0;
  mk_ = 0;
}

- (id<EduStanfordNlpTreesTregexTsurgeonNode>)rootNode {
  return [((id<JavaUtilList>) nil_chk(nodes_)) getWithInt:0];
}

- (void)pushNodeWithEduStanfordNlpTreesTregexTsurgeonNode:(id<EduStanfordNlpTreesTregexTsurgeonNode>)n {
  [((id<JavaUtilList>) nil_chk(nodes_)) addWithId:n];
  ++sp_;
}

- (id<EduStanfordNlpTreesTregexTsurgeonNode>)popNode {
  if (--sp_ < mk_) {
    mk_ = [((JavaLangInteger *) nil_chk([((id<JavaUtilList>) nil_chk(marks_)) removeWithInt:[marks_ size] - 1])) intValue];
  }
  return [((id<JavaUtilList>) nil_chk(nodes_)) removeWithInt:[nodes_ size] - 1];
}

- (id<EduStanfordNlpTreesTregexTsurgeonNode>)peekNode {
  return [((id<JavaUtilList>) nil_chk(nodes_)) getWithInt:[nodes_ size] - 1];
}

- (jint)nodeArity {
  return sp_ - mk_;
}

- (void)clearNodeScopeWithEduStanfordNlpTreesTregexTsurgeonNode:(id<EduStanfordNlpTreesTregexTsurgeonNode>)n {
  while (sp_ > mk_) {
    (void) [self popNode];
  }
  mk_ = [((JavaLangInteger *) nil_chk([((id<JavaUtilList>) nil_chk(marks_)) removeWithInt:[marks_ size] - 1])) intValue];
}

- (void)openNodeScopeWithEduStanfordNlpTreesTregexTsurgeonNode:(id<EduStanfordNlpTreesTregexTsurgeonNode>)n {
  [((id<JavaUtilList>) nil_chk(marks_)) addWithId:JavaLangInteger_valueOfWithInt_(mk_)];
  mk_ = sp_;
  [((id<EduStanfordNlpTreesTregexTsurgeonNode>) nil_chk(n)) jjtOpen];
}

- (void)closeNodeScopeWithEduStanfordNlpTreesTregexTsurgeonNode:(id<EduStanfordNlpTreesTregexTsurgeonNode>)n
                                                        withInt:(jint)num {
  mk_ = [((JavaLangInteger *) nil_chk([((id<JavaUtilList>) nil_chk(marks_)) removeWithInt:[marks_ size] - 1])) intValue];
  while (num-- > 0) {
    id<EduStanfordNlpTreesTregexTsurgeonNode> c = [self popNode];
    [((id<EduStanfordNlpTreesTregexTsurgeonNode>) nil_chk(c)) jjtSetParentWithEduStanfordNlpTreesTregexTsurgeonNode:n];
    [((id<EduStanfordNlpTreesTregexTsurgeonNode>) nil_chk(n)) jjtAddChildWithEduStanfordNlpTreesTregexTsurgeonNode:c withInt:num];
  }
  [((id<EduStanfordNlpTreesTregexTsurgeonNode>) nil_chk(n)) jjtClose];
  [self pushNodeWithEduStanfordNlpTreesTregexTsurgeonNode:n];
  node_created_ = true;
}

- (void)closeNodeScopeWithEduStanfordNlpTreesTregexTsurgeonNode:(id<EduStanfordNlpTreesTregexTsurgeonNode>)n
                                                    withBoolean:(jboolean)condition {
  if (condition) {
    jint a = [self nodeArity];
    mk_ = [((JavaLangInteger *) nil_chk([((id<JavaUtilList>) nil_chk(marks_)) removeWithInt:[marks_ size] - 1])) intValue];
    while (a-- > 0) {
      id<EduStanfordNlpTreesTregexTsurgeonNode> c = [self popNode];
      [((id<EduStanfordNlpTreesTregexTsurgeonNode>) nil_chk(c)) jjtSetParentWithEduStanfordNlpTreesTregexTsurgeonNode:n];
      [((id<EduStanfordNlpTreesTregexTsurgeonNode>) nil_chk(n)) jjtAddChildWithEduStanfordNlpTreesTregexTsurgeonNode:c withInt:a];
    }
    [((id<EduStanfordNlpTreesTregexTsurgeonNode>) nil_chk(n)) jjtClose];
    [self pushNodeWithEduStanfordNlpTreesTregexTsurgeonNode:n];
    node_created_ = true;
  }
  else {
    mk_ = [((JavaLangInteger *) nil_chk([((id<JavaUtilList>) nil_chk(marks_)) removeWithInt:[marks_ size] - 1])) intValue];
    node_created_ = false;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTregexTsurgeonNode;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTregexTsurgeonNode;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTregexTsurgeonNode;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(nodeCreated);
  methods[2].selector = @selector(reset);
  methods[3].selector = @selector(rootNode);
  methods[4].selector = @selector(pushNodeWithEduStanfordNlpTreesTregexTsurgeonNode:);
  methods[5].selector = @selector(popNode);
  methods[6].selector = @selector(peekNode);
  methods[7].selector = @selector(nodeArity);
  methods[8].selector = @selector(clearNodeScopeWithEduStanfordNlpTreesTregexTsurgeonNode:);
  methods[9].selector = @selector(openNodeScopeWithEduStanfordNlpTreesTregexTsurgeonNode:);
  methods[10].selector = @selector(closeNodeScopeWithEduStanfordNlpTreesTregexTsurgeonNode:withInt:);
  methods[11].selector = @selector(closeNodeScopeWithEduStanfordNlpTreesTregexTsurgeonNode:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "nodes_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 7, -1 },
    { "marks_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 8, -1 },
    { "sp_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mk_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "node_created_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "pushNode", "LEduStanfordNlpTreesTregexTsurgeonNode;", "clearNodeScope", "openNodeScope", "closeNodeScope", "LEduStanfordNlpTreesTregexTsurgeonNode;I", "LEduStanfordNlpTreesTregexTsurgeonNode;Z", "Ljava/util/List<Ledu/stanford/nlp/trees/tregex/tsurgeon/Node;>;", "Ljava/util/List<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpTreesTregexTsurgeonJJTTsurgeonParserState = { "JJTTsurgeonParserState", "edu.stanford.nlp.trees.tregex.tsurgeon", ptrTable, methods, fields, 7, 0x1, 12, 5, -1, -1, -1, -1, -1 };
  return &_EduStanfordNlpTreesTregexTsurgeonJJTTsurgeonParserState;
}

@end

void EduStanfordNlpTreesTregexTsurgeonJJTTsurgeonParserState_init(EduStanfordNlpTreesTregexTsurgeonJJTTsurgeonParserState *self) {
  NSObject_init(self);
  self->nodes_ = new_JavaUtilArrayList_init();
  self->marks_ = new_JavaUtilArrayList_init();
  self->sp_ = 0;
  self->mk_ = 0;
}

EduStanfordNlpTreesTregexTsurgeonJJTTsurgeonParserState *new_EduStanfordNlpTreesTregexTsurgeonJJTTsurgeonParserState_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesTregexTsurgeonJJTTsurgeonParserState, init)
}

EduStanfordNlpTreesTregexTsurgeonJJTTsurgeonParserState *create_EduStanfordNlpTreesTregexTsurgeonJJTTsurgeonParserState_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesTregexTsurgeonJJTTsurgeonParserState, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTreesTregexTsurgeonJJTTsurgeonParserState)
