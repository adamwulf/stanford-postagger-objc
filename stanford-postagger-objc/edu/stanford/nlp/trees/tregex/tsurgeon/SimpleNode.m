//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/trees/tregex/tsurgeon/SimpleNode.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/trees/tregex/tsurgeon/Node.h"
#include "edu/stanford/nlp/trees/tregex/tsurgeon/SimpleNode.h"
#include "edu/stanford/nlp/trees/tregex/tsurgeon/TsurgeonParser.h"
#include "edu/stanford/nlp/trees/tregex/tsurgeon/TsurgeonParserTreeConstants.h"
#include "java/io/PrintStream.h"
#include "java/lang/System.h"

@implementation EduStanfordNlpTreesTregexTsurgeonSimpleNode

- (instancetype)initWithInt:(jint)i {
  EduStanfordNlpTreesTregexTsurgeonSimpleNode_initWithInt_(self, i);
  return self;
}

- (instancetype)initWithEduStanfordNlpTreesTregexTsurgeonTsurgeonParser:(EduStanfordNlpTreesTregexTsurgeonTsurgeonParser *)p
                                                                withInt:(jint)i {
  EduStanfordNlpTreesTregexTsurgeonSimpleNode_initWithEduStanfordNlpTreesTregexTsurgeonTsurgeonParser_withInt_(self, p, i);
  return self;
}

- (void)jjtOpen {
}

- (void)jjtClose {
}

- (void)jjtSetParentWithEduStanfordNlpTreesTregexTsurgeonNode:(id<EduStanfordNlpTreesTregexTsurgeonNode>)n {
  parent_ = n;
}

- (id<EduStanfordNlpTreesTregexTsurgeonNode>)jjtGetParent {
  return parent_;
}

- (void)jjtAddChildWithEduStanfordNlpTreesTregexTsurgeonNode:(id<EduStanfordNlpTreesTregexTsurgeonNode>)n
                                                     withInt:(jint)i {
  if (children_ == nil) {
    children_ = [IOSObjectArray newArrayWithLength:i + 1 type:EduStanfordNlpTreesTregexTsurgeonNode_class_()];
  }
  else if (i >= children_->size_) {
    IOSObjectArray *c = [IOSObjectArray newArrayWithLength:i + 1 type:EduStanfordNlpTreesTregexTsurgeonNode_class_()];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(children_, 0, c, 0, children_->size_);
    children_ = c;
  }
  (void) IOSObjectArray_Set(children_, i, n);
}

- (id<EduStanfordNlpTreesTregexTsurgeonNode>)jjtGetChildWithInt:(jint)i {
  return IOSObjectArray_Get(nil_chk(children_), i);
}

- (jint)jjtGetNumChildren {
  return (children_ == nil) ? 0 : ((IOSObjectArray *) nil_chk(children_))->size_;
}

- (NSString *)description {
  return IOSObjectArray_Get(nil_chk(JreLoadStatic(EduStanfordNlpTreesTregexTsurgeonTsurgeonParserTreeConstants, jjtNodeName)), id__);
}

- (NSString *)toStringWithNSString:(NSString *)prefix {
  return JreStrcat("$$", prefix, [self description]);
}

- (void)dumpWithNSString:(NSString *)prefix {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:[self toStringWithNSString:prefix]];
  if (children_ != nil) {
    {
      IOSObjectArray *a__ = children_;
      id<EduStanfordNlpTreesTregexTsurgeonNode> const *b__ = a__->buffer_;
      id<EduStanfordNlpTreesTregexTsurgeonNode> const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        id<EduStanfordNlpTreesTregexTsurgeonNode> aChildren = *b__++;
        EduStanfordNlpTreesTregexTsurgeonSimpleNode *n = (EduStanfordNlpTreesTregexTsurgeonSimpleNode *) cast_chk(aChildren, [EduStanfordNlpTreesTregexTsurgeonSimpleNode class]);
        if (n != nil) {
          [n dumpWithNSString:JreStrcat("$C", prefix, ' ')];
        }
      }
    }
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTregexTsurgeonNode;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTregexTsurgeonNode;", 0x1, 6, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 7, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(initWithEduStanfordNlpTreesTregexTsurgeonTsurgeonParser:withInt:);
  methods[2].selector = @selector(jjtOpen);
  methods[3].selector = @selector(jjtClose);
  methods[4].selector = @selector(jjtSetParentWithEduStanfordNlpTreesTregexTsurgeonNode:);
  methods[5].selector = @selector(jjtGetParent);
  methods[6].selector = @selector(jjtAddChildWithEduStanfordNlpTreesTregexTsurgeonNode:withInt:);
  methods[7].selector = @selector(jjtGetChildWithInt:);
  methods[8].selector = @selector(jjtGetNumChildren);
  methods[9].selector = @selector(description);
  methods[10].selector = @selector(toStringWithNSString:);
  methods[11].selector = @selector(dumpWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "parent_", "LEduStanfordNlpTreesTregexTsurgeonNode;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "children_", "[LEduStanfordNlpTreesTregexTsurgeonNode;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "id__", "I", .constantValue.asLong = 0, 0x4, 10, -1, -1, -1 },
    { "parser_", "LEduStanfordNlpTreesTregexTsurgeonTsurgeonParser;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "LEduStanfordNlpTreesTregexTsurgeonTsurgeonParser;I", "jjtSetParent", "LEduStanfordNlpTreesTregexTsurgeonNode;", "jjtAddChild", "LEduStanfordNlpTreesTregexTsurgeonNode;I", "jjtGetChild", "toString", "LNSString;", "dump", "id" };
  static const J2ObjcClassInfo _EduStanfordNlpTreesTregexTsurgeonSimpleNode = { "SimpleNode", "edu.stanford.nlp.trees.tregex.tsurgeon", ptrTable, methods, fields, 7, 0x0, 12, 4, -1, -1, -1, -1, -1 };
  return &_EduStanfordNlpTreesTregexTsurgeonSimpleNode;
}

@end

void EduStanfordNlpTreesTregexTsurgeonSimpleNode_initWithInt_(EduStanfordNlpTreesTregexTsurgeonSimpleNode *self, jint i) {
  NSObject_init(self);
  self->id__ = i;
}

EduStanfordNlpTreesTregexTsurgeonSimpleNode *new_EduStanfordNlpTreesTregexTsurgeonSimpleNode_initWithInt_(jint i) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesTregexTsurgeonSimpleNode, initWithInt_, i)
}

EduStanfordNlpTreesTregexTsurgeonSimpleNode *create_EduStanfordNlpTreesTregexTsurgeonSimpleNode_initWithInt_(jint i) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesTregexTsurgeonSimpleNode, initWithInt_, i)
}

void EduStanfordNlpTreesTregexTsurgeonSimpleNode_initWithEduStanfordNlpTreesTregexTsurgeonTsurgeonParser_withInt_(EduStanfordNlpTreesTregexTsurgeonSimpleNode *self, EduStanfordNlpTreesTregexTsurgeonTsurgeonParser *p, jint i) {
  EduStanfordNlpTreesTregexTsurgeonSimpleNode_initWithInt_(self, i);
  self->parser_ = p;
}

EduStanfordNlpTreesTregexTsurgeonSimpleNode *new_EduStanfordNlpTreesTregexTsurgeonSimpleNode_initWithEduStanfordNlpTreesTregexTsurgeonTsurgeonParser_withInt_(EduStanfordNlpTreesTregexTsurgeonTsurgeonParser *p, jint i) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesTregexTsurgeonSimpleNode, initWithEduStanfordNlpTreesTregexTsurgeonTsurgeonParser_withInt_, p, i)
}

EduStanfordNlpTreesTregexTsurgeonSimpleNode *create_EduStanfordNlpTreesTregexTsurgeonSimpleNode_initWithEduStanfordNlpTreesTregexTsurgeonTsurgeonParser_withInt_(EduStanfordNlpTreesTregexTsurgeonTsurgeonParser *p, jint i) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesTregexTsurgeonSimpleNode, initWithEduStanfordNlpTreesTregexTsurgeonTsurgeonParser_withInt_, p, i)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTreesTregexTsurgeonSimpleNode)
