//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/trees/tregex/DescriptionPattern.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/trees/HeadFinder.h"
#include "edu/stanford/nlp/trees/Tree.h"
#include "edu/stanford/nlp/trees/tregex/DescriptionPattern.h"
#include "edu/stanford/nlp/trees/tregex/Relation.h"
#include "edu/stanford/nlp/trees/tregex/TregexMatcher.h"
#include "edu/stanford/nlp/trees/tregex/TregexPattern.h"
#include "edu/stanford/nlp/trees/tregex/VariableStrings.h"
#include "edu/stanford/nlp/util/ArrayStringFilter.h"
#include "edu/stanford/nlp/util/Pair.h"
#include "java/lang/AssertionError.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "java/util/Collections.h"
#include "java/util/IdentityHashMap.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/function/Function.h"
#include "java/util/function/Predicate.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"

@interface EduStanfordNlpTreesTregexDescriptionPattern () {
 @public
  EduStanfordNlpTreesTregexRelation *rel_;
  jboolean negDesc_;
  EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMode *descriptionMode_;
  NSString *exactMatch_;
  JavaUtilRegexPattern *descPattern_;
  id<JavaUtilFunctionPredicate> stringFilter_;
  NSString *stringDesc_;
  NSString *name_;
  NSString *linkedName_;
  jboolean isLink_;
  EduStanfordNlpTreesTregexTregexPattern *child_;
  id<JavaUtilList> variableGroups_;
  id<JavaUtilFunctionFunction> basicCatFunction_;
}

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpTreesTregexDescriptionPattern, rel_, EduStanfordNlpTreesTregexRelation *)
J2OBJC_FIELD_SETTER(EduStanfordNlpTreesTregexDescriptionPattern, descriptionMode_, EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMode *)
J2OBJC_FIELD_SETTER(EduStanfordNlpTreesTregexDescriptionPattern, exactMatch_, NSString *)
J2OBJC_FIELD_SETTER(EduStanfordNlpTreesTregexDescriptionPattern, descPattern_, JavaUtilRegexPattern *)
J2OBJC_FIELD_SETTER(EduStanfordNlpTreesTregexDescriptionPattern, stringFilter_, id<JavaUtilFunctionPredicate>)
J2OBJC_FIELD_SETTER(EduStanfordNlpTreesTregexDescriptionPattern, stringDesc_, NSString *)
J2OBJC_FIELD_SETTER(EduStanfordNlpTreesTregexDescriptionPattern, name_, NSString *)
J2OBJC_FIELD_SETTER(EduStanfordNlpTreesTregexDescriptionPattern, linkedName_, NSString *)
J2OBJC_FIELD_SETTER(EduStanfordNlpTreesTregexDescriptionPattern, child_, EduStanfordNlpTreesTregexTregexPattern *)
J2OBJC_FIELD_SETTER(EduStanfordNlpTreesTregexDescriptionPattern, variableGroups_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(EduStanfordNlpTreesTregexDescriptionPattern, basicCatFunction_, id<JavaUtilFunctionFunction>)

inline jint EduStanfordNlpTreesTregexDescriptionPattern_get_MAX_STRING_MATCHER_SIZE();
#define EduStanfordNlpTreesTregexDescriptionPattern_MAX_STRING_MATCHER_SIZE 8
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpTreesTregexDescriptionPattern, MAX_STRING_MATCHER_SIZE, jint)

inline JavaUtilRegexPattern *EduStanfordNlpTreesTregexDescriptionPattern_get_SINGLE_WORD_PATTERN();
static JavaUtilRegexPattern *EduStanfordNlpTreesTregexDescriptionPattern_SINGLE_WORD_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpTreesTregexDescriptionPattern, SINGLE_WORD_PATTERN, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *EduStanfordNlpTreesTregexDescriptionPattern_get_MULTI_WORD_PATTERN();
static JavaUtilRegexPattern *EduStanfordNlpTreesTregexDescriptionPattern_MULTI_WORD_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpTreesTregexDescriptionPattern, MULTI_WORD_PATTERN, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *EduStanfordNlpTreesTregexDescriptionPattern_get_CASE_INSENSITIVE_PATTERN();
static JavaUtilRegexPattern *EduStanfordNlpTreesTregexDescriptionPattern_CASE_INSENSITIVE_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpTreesTregexDescriptionPattern, CASE_INSENSITIVE_PATTERN, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *EduStanfordNlpTreesTregexDescriptionPattern_get_PREFIX_PATTERN();
static JavaUtilRegexPattern *EduStanfordNlpTreesTregexDescriptionPattern_PREFIX_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpTreesTregexDescriptionPattern, PREFIX_PATTERN, JavaUtilRegexPattern *)

inline jlong EduStanfordNlpTreesTregexDescriptionPattern_get_serialVersionUID();
#define EduStanfordNlpTreesTregexDescriptionPattern_serialVersionUID 1179819056757295757LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpTreesTregexDescriptionPattern, serialVersionUID, jlong)

__attribute__((unused)) static void EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMode_initWithNSString_withInt_(EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMode *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMode *new_EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMode_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

@interface EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMatcher : EduStanfordNlpTreesTregexTregexMatcher {
 @public
  id<JavaUtilIterator> treeNodeMatchCandidateIterator_;
  EduStanfordNlpTreesTregexDescriptionPattern *myNode_;
  EduStanfordNlpTreesTregexTregexMatcher *childMatcher_;
  EduStanfordNlpTreesTree *nextTreeNodeMatchCandidate_;
  jboolean finished_;
  jboolean matchedOnce_;
  jboolean committedVariables_;
}

- (instancetype)initWithEduStanfordNlpTreesTregexDescriptionPattern:(EduStanfordNlpTreesTregexDescriptionPattern *)n
                                        withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)root
                                        withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)tree
                                        withJavaUtilIdentityHashMap:(JavaUtilIdentityHashMap *)nodesToParents
                                                    withJavaUtilMap:(id<JavaUtilMap>)namesToNodes
                       withEduStanfordNlpTreesTregexVariableStrings:(EduStanfordNlpTreesTregexVariableStrings *)variableStrings
                                  withEduStanfordNlpTreesHeadFinder:(id<EduStanfordNlpTreesHeadFinder>)headFinder;

- (void)resetChildIter;

- (void)resetChild;

- (void)goToNextTreeNodeMatch;

- (void)commitVariableGroupsWithJavaUtilRegexMatcher:(JavaUtilRegexMatcher *)m;

- (void)commitVariableGroupsWithNSString:(NSString *)value;

- (void)decommitVariableGroups;

- (void)removeNamedNodes;

- (jboolean)matchChild;

- (jboolean)matches;

- (EduStanfordNlpTreesTree *)getMatch;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMatcher)

J2OBJC_FIELD_SETTER(EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMatcher, treeNodeMatchCandidateIterator_, id<JavaUtilIterator>)
J2OBJC_FIELD_SETTER(EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMatcher, myNode_, EduStanfordNlpTreesTregexDescriptionPattern *)
J2OBJC_FIELD_SETTER(EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMatcher, childMatcher_, EduStanfordNlpTreesTregexTregexMatcher *)
J2OBJC_FIELD_SETTER(EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMatcher, nextTreeNodeMatchCandidate_, EduStanfordNlpTreesTree *)

__attribute__((unused)) static void EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMatcher_initWithEduStanfordNlpTreesTregexDescriptionPattern_withEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_withJavaUtilIdentityHashMap_withJavaUtilMap_withEduStanfordNlpTreesTregexVariableStrings_withEduStanfordNlpTreesHeadFinder_(EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMatcher *self, EduStanfordNlpTreesTregexDescriptionPattern *n, EduStanfordNlpTreesTree *root, EduStanfordNlpTreesTree *tree, JavaUtilIdentityHashMap *nodesToParents, id<JavaUtilMap> namesToNodes, EduStanfordNlpTreesTregexVariableStrings *variableStrings, id<EduStanfordNlpTreesHeadFinder> headFinder);

__attribute__((unused)) static EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMatcher *new_EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMatcher_initWithEduStanfordNlpTreesTregexDescriptionPattern_withEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_withJavaUtilIdentityHashMap_withJavaUtilMap_withEduStanfordNlpTreesTregexVariableStrings_withEduStanfordNlpTreesHeadFinder_(EduStanfordNlpTreesTregexDescriptionPattern *n, EduStanfordNlpTreesTree *root, EduStanfordNlpTreesTree *tree, JavaUtilIdentityHashMap *nodesToParents, id<JavaUtilMap> namesToNodes, EduStanfordNlpTreesTregexVariableStrings *variableStrings, id<EduStanfordNlpTreesHeadFinder> headFinder) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMatcher *create_EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMatcher_initWithEduStanfordNlpTreesTregexDescriptionPattern_withEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_withJavaUtilIdentityHashMap_withJavaUtilMap_withEduStanfordNlpTreesTregexVariableStrings_withEduStanfordNlpTreesHeadFinder_(EduStanfordNlpTreesTregexDescriptionPattern *n, EduStanfordNlpTreesTree *root, EduStanfordNlpTreesTree *tree, JavaUtilIdentityHashMap *nodesToParents, id<JavaUtilMap> namesToNodes, EduStanfordNlpTreesTregexVariableStrings *variableStrings, id<EduStanfordNlpTreesHeadFinder> headFinder);

__attribute__((unused)) static void EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMatcher_resetChild(EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMatcher *self);

__attribute__((unused)) static void EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMatcher_goToNextTreeNodeMatch(EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMatcher *self);

__attribute__((unused)) static void EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMatcher_commitVariableGroupsWithJavaUtilRegexMatcher_(EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMatcher *self, JavaUtilRegexMatcher *m);

__attribute__((unused)) static void EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMatcher_commitVariableGroupsWithNSString_(EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMatcher *self, NSString *value);

__attribute__((unused)) static void EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMatcher_decommitVariableGroups(EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMatcher *self);

__attribute__((unused)) static void EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMatcher_removeNamedNodes(EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMatcher *self);

__attribute__((unused)) static jboolean EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMatcher_matchChild(EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMatcher *self);

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMatcher)

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpTreesTregexDescriptionPattern)

@implementation EduStanfordNlpTreesTregexDescriptionPattern

- (instancetype)initWithEduStanfordNlpTreesTregexRelation:(EduStanfordNlpTreesTregexRelation *)rel
                                              withBoolean:(jboolean)negDesc
                                             withNSString:(NSString *)desc
                                             withNSString:(NSString *)name
                                              withBoolean:(jboolean)useBasicCat
                             withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)basicCatFunction
                                         withJavaUtilList:(id<JavaUtilList>)variableGroups
                                              withBoolean:(jboolean)isLink
                                             withNSString:(NSString *)linkedName {
  EduStanfordNlpTreesTregexDescriptionPattern_initWithEduStanfordNlpTreesTregexRelation_withBoolean_withNSString_withNSString_withBoolean_withJavaUtilFunctionFunction_withJavaUtilList_withBoolean_withNSString_(self, rel, negDesc, desc, name, useBasicCat, basicCatFunction, variableGroups, isLink, linkedName);
  return self;
}

- (instancetype)initWithEduStanfordNlpTreesTregexRelation:(EduStanfordNlpTreesTregexRelation *)newRelation
          withEduStanfordNlpTreesTregexDescriptionPattern:(EduStanfordNlpTreesTregexDescriptionPattern *)oldPattern {
  EduStanfordNlpTreesTregexDescriptionPattern_initWithEduStanfordNlpTreesTregexRelation_withEduStanfordNlpTreesTregexDescriptionPattern_(self, newRelation, oldPattern);
  return self;
}

- (NSString *)localString {
  return JreStrcat("$C$$$$", [((EduStanfordNlpTreesTregexRelation *) nil_chk(rel_)) description], ' ', (negDesc_ ? @"!" : @""), (basicCatFunction_ != nil ? @"@" : @""), stringDesc_, (name_ == nil ? @"" : JreStrcat("C$", '=', name_)));
}

- (NSString *)description {
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  if ([self isNegated]) {
    (void) [sb appendWithChar:'!'];
  }
  if ([self isOptional]) {
    (void) [sb appendWithChar:'?'];
  }
  (void) [sb appendWithNSString:[((EduStanfordNlpTreesTregexRelation *) nil_chk(rel_)) description]];
  (void) [sb appendWithChar:' '];
  if (child_ != nil) {
    (void) [sb appendWithChar:'('];
  }
  if (negDesc_) {
    (void) [sb appendWithChar:'!'];
  }
  if (basicCatFunction_ != nil) {
    (void) [sb appendWithChar:'@'];
  }
  (void) [sb appendWithNSString:stringDesc_];
  if (isLink_) {
    (void) [sb appendWithChar:'~'];
    (void) [sb appendWithNSString:linkedName_];
  }
  if (name_ != nil) {
    (void) [sb appendWithChar:'='];
    (void) [sb appendWithNSString:name_];
  }
  (void) [sb appendWithChar:' '];
  if (child_ != nil) {
    (void) [sb appendWithNSString:[child_ description]];
    (void) [sb appendWithChar:')'];
  }
  return [sb description];
}

- (void)setChildWithEduStanfordNlpTreesTregexTregexPattern:(EduStanfordNlpTreesTregexTregexPattern *)n {
  child_ = n;
}

- (id<JavaUtilList>)getChildren {
  if (child_ == nil) {
    return JavaUtilCollections_emptyList();
  }
  else {
    return JavaUtilCollections_singletonListWithId_(child_);
  }
}

- (EduStanfordNlpTreesTregexTregexMatcher *)matcherWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)root
                                                   withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)tree
                                                   withJavaUtilIdentityHashMap:(JavaUtilIdentityHashMap *)nodesToParents
                                                               withJavaUtilMap:(id<JavaUtilMap>)namesToNodes
                                  withEduStanfordNlpTreesTregexVariableStrings:(EduStanfordNlpTreesTregexVariableStrings *)variableStrings
                                             withEduStanfordNlpTreesHeadFinder:(id<EduStanfordNlpTreesHeadFinder>)headFinder {
  return new_EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMatcher_initWithEduStanfordNlpTreesTregexDescriptionPattern_withEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_withJavaUtilIdentityHashMap_withJavaUtilMap_withEduStanfordNlpTreesTregexVariableStrings_withEduStanfordNlpTreesHeadFinder_(self, root, tree, nodesToParents, namesToNodes, variableStrings, headFinder);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 6, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTregexTregexMatcher;", 0x1, 7, 8, -1, 9, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpTreesTregexRelation:withBoolean:withNSString:withNSString:withBoolean:withJavaUtilFunctionFunction:withJavaUtilList:withBoolean:withNSString:);
  methods[1].selector = @selector(initWithEduStanfordNlpTreesTregexRelation:withEduStanfordNlpTreesTregexDescriptionPattern:);
  methods[2].selector = @selector(localString);
  methods[3].selector = @selector(description);
  methods[4].selector = @selector(setChildWithEduStanfordNlpTreesTregexTregexPattern:);
  methods[5].selector = @selector(getChildren);
  methods[6].selector = @selector(matcherWithEduStanfordNlpTreesTree:withEduStanfordNlpTreesTree:withJavaUtilIdentityHashMap:withJavaUtilMap:withEduStanfordNlpTreesTregexVariableStrings:withEduStanfordNlpTreesHeadFinder:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "rel_", "LEduStanfordNlpTreesTregexRelation;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "negDesc_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "descriptionMode_", "LEduStanfordNlpTreesTregexDescriptionPattern_DescriptionMode;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "exactMatch_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "descPattern_", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "stringFilter_", "LJavaUtilFunctionPredicate;", .constantValue.asLong = 0, 0x12, -1, -1, 10, -1 },
    { "MAX_STRING_MATCHER_SIZE", "I", .constantValue.asInt = EduStanfordNlpTreesTregexDescriptionPattern_MAX_STRING_MATCHER_SIZE, 0x1a, -1, -1, -1, -1 },
    { "stringDesc_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "name_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "linkedName_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "isLink_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "child_", "LEduStanfordNlpTreesTregexTregexPattern;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "variableGroups_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 11, -1 },
    { "basicCatFunction_", "LJavaUtilFunctionFunction;", .constantValue.asLong = 0, 0x12, -1, -1, 12, -1 },
    { "SINGLE_WORD_PATTERN", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 13, -1, -1 },
    { "MULTI_WORD_PATTERN", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 14, -1, -1 },
    { "CASE_INSENSITIVE_PATTERN", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 15, -1, -1 },
    { "PREFIX_PATTERN", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 16, -1, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpTreesTregexDescriptionPattern_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpTreesTregexRelation;ZLNSString;LNSString;ZLJavaUtilFunctionFunction;LJavaUtilList;ZLNSString;", "(Ledu/stanford/nlp/trees/tregex/Relation;ZLjava/lang/String;Ljava/lang/String;ZLjava/util/function/Function<Ljava/lang/String;Ljava/lang/String;>;Ljava/util/List<Ledu/stanford/nlp/util/Pair<Ljava/lang/Integer;Ljava/lang/String;>;>;ZLjava/lang/String;)V", "LEduStanfordNlpTreesTregexRelation;LEduStanfordNlpTreesTregexDescriptionPattern;", "toString", "setChild", "LEduStanfordNlpTreesTregexTregexPattern;", "()Ljava/util/List<Ledu/stanford/nlp/trees/tregex/TregexPattern;>;", "matcher", "LEduStanfordNlpTreesTree;LEduStanfordNlpTreesTree;LJavaUtilIdentityHashMap;LJavaUtilMap;LEduStanfordNlpTreesTregexVariableStrings;LEduStanfordNlpTreesHeadFinder;", "(Ledu/stanford/nlp/trees/Tree;Ledu/stanford/nlp/trees/Tree;Ljava/util/IdentityHashMap<Ledu/stanford/nlp/trees/Tree;Ledu/stanford/nlp/trees/Tree;>;Ljava/util/Map<Ljava/lang/String;Ledu/stanford/nlp/trees/Tree;>;Ledu/stanford/nlp/trees/tregex/VariableStrings;Ledu/stanford/nlp/trees/HeadFinder;)Ledu/stanford/nlp/trees/tregex/TregexMatcher;", "Ljava/util/function/Predicate<Ljava/lang/String;>;", "Ljava/util/List<Ledu/stanford/nlp/util/Pair<Ljava/lang/Integer;Ljava/lang/String;>;>;", "Ljava/util/function/Function<Ljava/lang/String;Ljava/lang/String;>;", &EduStanfordNlpTreesTregexDescriptionPattern_SINGLE_WORD_PATTERN, &EduStanfordNlpTreesTregexDescriptionPattern_MULTI_WORD_PATTERN, &EduStanfordNlpTreesTregexDescriptionPattern_CASE_INSENSITIVE_PATTERN, &EduStanfordNlpTreesTregexDescriptionPattern_PREFIX_PATTERN, "LEduStanfordNlpTreesTregexDescriptionPattern_DescriptionMode;LEduStanfordNlpTreesTregexDescriptionPattern_DescriptionMatcher;" };
  static const J2ObjcClassInfo _EduStanfordNlpTreesTregexDescriptionPattern = { "DescriptionPattern", "edu.stanford.nlp.trees.tregex", ptrTable, methods, fields, 7, 0x0, 7, 19, -1, 17, -1, -1, -1 };
  return &_EduStanfordNlpTreesTregexDescriptionPattern;
}

+ (void)initialize {
  if (self == [EduStanfordNlpTreesTregexDescriptionPattern class]) {
    EduStanfordNlpTreesTregexDescriptionPattern_SINGLE_WORD_PATTERN = JavaUtilRegexPattern_compileWithNSString_(@"/\\^(.)\\$/|/\\^\\[(.)\\]\\$/|/\\^([-a-zA-Z']+)\\$/");
    EduStanfordNlpTreesTregexDescriptionPattern_MULTI_WORD_PATTERN = JavaUtilRegexPattern_compileWithNSString_(@"/\\^\\(\\?\\:((?:[-a-zA-Z|]|\\\\\\$)+)\\)\\$\\/");
    EduStanfordNlpTreesTregexDescriptionPattern_CASE_INSENSITIVE_PATTERN = JavaUtilRegexPattern_compileWithNSString_(@"/\\^\\(\\?i\\:((?:[-a-zA-Z|]|\\\\\\$)+)\\)\\$\\/");
    EduStanfordNlpTreesTregexDescriptionPattern_PREFIX_PATTERN = JavaUtilRegexPattern_compileWithNSString_(@"/\\^([-a-zA-Z|]+)\\/|/\\^\\(\\?\\:([-a-zA-Z|]+)\\)\\/");
    J2OBJC_SET_INITIALIZED(EduStanfordNlpTreesTregexDescriptionPattern)
  }
}

@end

void EduStanfordNlpTreesTregexDescriptionPattern_initWithEduStanfordNlpTreesTregexRelation_withBoolean_withNSString_withNSString_withBoolean_withJavaUtilFunctionFunction_withJavaUtilList_withBoolean_withNSString_(EduStanfordNlpTreesTregexDescriptionPattern *self, EduStanfordNlpTreesTregexRelation *rel, jboolean negDesc, NSString *desc, NSString *name, jboolean useBasicCat, id<JavaUtilFunctionFunction> basicCatFunction, id<JavaUtilList> variableGroups, jboolean isLink, NSString *linkedName) {
  EduStanfordNlpTreesTregexTregexPattern_init(self);
  self->rel_ = rel;
  self->negDesc_ = negDesc;
  self->isLink_ = isLink;
  self->linkedName_ = linkedName;
  if (desc != nil) {
    self->stringDesc_ = desc;
    if ([desc isEqual:@"__"] || [desc isEqual:@"/.*/"] || [desc isEqual:@"/^.*$/"]) {
      self->descriptionMode_ = JreLoadEnum(EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMode, ANYTHING);
      self->descPattern_ = nil;
      self->exactMatch_ = nil;
      self->stringFilter_ = nil;
    }
    else if ([((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(EduStanfordNlpTreesTregexDescriptionPattern_SINGLE_WORD_PATTERN)) matcherWithJavaLangCharSequence:desc])) matches]) {
      self->descriptionMode_ = JreLoadEnum(EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMode, EXACT);
      self->descPattern_ = nil;
      JavaUtilRegexMatcher *matcher = [EduStanfordNlpTreesTregexDescriptionPattern_SINGLE_WORD_PATTERN matcherWithJavaLangCharSequence:desc];
      [((JavaUtilRegexMatcher *) nil_chk(matcher)) matches];
      NSString *matchedGroup = nil;
      for (jint i = 1; i <= [matcher groupCount]; ++i) {
        if ([matcher groupWithInt:i] != nil) {
          matchedGroup = [matcher groupWithInt:i];
          break;
        }
      }
      self->exactMatch_ = matchedGroup;
      self->stringFilter_ = nil;
    }
    else if ([((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(EduStanfordNlpTreesTregexDescriptionPattern_MULTI_WORD_PATTERN)) matcherWithJavaLangCharSequence:desc])) matches]) {
      JavaUtilRegexMatcher *matcher = [EduStanfordNlpTreesTregexDescriptionPattern_MULTI_WORD_PATTERN matcherWithJavaLangCharSequence:desc];
      [((JavaUtilRegexMatcher *) nil_chk(matcher)) matches];
      NSString *matchedGroup = nil;
      for (jint i = 1; i <= [matcher groupCount]; ++i) {
        if ([matcher groupWithInt:i] != nil) {
          matchedGroup = [matcher groupWithInt:i];
          break;
        }
      }
      matchedGroup = [((NSString *) nil_chk(matchedGroup)) replaceAll:@"\\\\" withReplacement:@""];
      if (((IOSObjectArray *) nil_chk([((NSString *) nil_chk(matchedGroup)) split:@"[|]"]))->size_ > EduStanfordNlpTreesTregexDescriptionPattern_MAX_STRING_MATCHER_SIZE) {
        self->descriptionMode_ = JreLoadEnum(EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMode, PATTERN);
        self->descPattern_ = JavaUtilRegexPattern_compileWithNSString_([desc substring:1 endIndex:((jint) [desc length]) - 1]);
        self->exactMatch_ = nil;
        self->stringFilter_ = nil;
      }
      else {
        self->descriptionMode_ = JreLoadEnum(EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMode, STRINGS);
        self->descPattern_ = nil;
        self->exactMatch_ = nil;
        self->stringFilter_ = new_EduStanfordNlpUtilArrayStringFilter_initWithEduStanfordNlpUtilArrayStringFilter_Mode_withNSStringArray_(JreLoadEnum(EduStanfordNlpUtilArrayStringFilter_Mode, EXACT), [matchedGroup split:@"[|]"]);
      }
    }
    else if ([((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(EduStanfordNlpTreesTregexDescriptionPattern_CASE_INSENSITIVE_PATTERN)) matcherWithJavaLangCharSequence:desc])) matches]) {
      JavaUtilRegexMatcher *matcher = [EduStanfordNlpTreesTregexDescriptionPattern_CASE_INSENSITIVE_PATTERN matcherWithJavaLangCharSequence:desc];
      [((JavaUtilRegexMatcher *) nil_chk(matcher)) matches];
      NSString *matchedGroup = nil;
      for (jint i = 1; i <= [matcher groupCount]; ++i) {
        if ([matcher groupWithInt:i] != nil) {
          matchedGroup = [matcher groupWithInt:i];
          break;
        }
      }
      matchedGroup = [((NSString *) nil_chk(matchedGroup)) replaceAll:@"\\\\" withReplacement:@""];
      if (((IOSObjectArray *) nil_chk([((NSString *) nil_chk(matchedGroup)) split:@"[|]"]))->size_ > EduStanfordNlpTreesTregexDescriptionPattern_MAX_STRING_MATCHER_SIZE) {
        self->descriptionMode_ = JreLoadEnum(EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMode, PATTERN);
        self->descPattern_ = JavaUtilRegexPattern_compileWithNSString_([desc substring:1 endIndex:((jint) [desc length]) - 1]);
        self->exactMatch_ = nil;
        self->stringFilter_ = nil;
      }
      else {
        self->descriptionMode_ = JreLoadEnum(EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMode, STRINGS);
        self->descPattern_ = nil;
        self->exactMatch_ = nil;
        self->stringFilter_ = new_EduStanfordNlpUtilArrayStringFilter_initWithEduStanfordNlpUtilArrayStringFilter_Mode_withNSStringArray_(JreLoadEnum(EduStanfordNlpUtilArrayStringFilter_Mode, CASE_INSENSITIVE), [matchedGroup split:@"[|]"]);
      }
    }
    else if ([((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(EduStanfordNlpTreesTregexDescriptionPattern_PREFIX_PATTERN)) matcherWithJavaLangCharSequence:desc])) matches]) {
      JavaUtilRegexMatcher *matcher = [EduStanfordNlpTreesTregexDescriptionPattern_PREFIX_PATTERN matcherWithJavaLangCharSequence:desc];
      [((JavaUtilRegexMatcher *) nil_chk(matcher)) matches];
      NSString *matchedGroup = nil;
      for (jint i = 1; i <= [matcher groupCount]; ++i) {
        if ([matcher groupWithInt:i] != nil) {
          matchedGroup = [matcher groupWithInt:i];
          break;
        }
      }
      if (((IOSObjectArray *) nil_chk([((NSString *) nil_chk(matchedGroup)) split:@"\\|"]))->size_ > EduStanfordNlpTreesTregexDescriptionPattern_MAX_STRING_MATCHER_SIZE) {
        self->descriptionMode_ = JreLoadEnum(EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMode, PATTERN);
        self->descPattern_ = JavaUtilRegexPattern_compileWithNSString_([desc substring:1 endIndex:((jint) [desc length]) - 1]);
        self->exactMatch_ = nil;
        self->stringFilter_ = nil;
      }
      else {
        self->descriptionMode_ = JreLoadEnum(EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMode, STRINGS);
        self->descPattern_ = nil;
        self->exactMatch_ = nil;
        self->stringFilter_ = new_EduStanfordNlpUtilArrayStringFilter_initWithEduStanfordNlpUtilArrayStringFilter_Mode_withNSStringArray_(JreLoadEnum(EduStanfordNlpUtilArrayStringFilter_Mode, PREFIX), [matchedGroup split:@"[|]"]);
      }
    }
    else if ([desc matches:@"/.*/"]) {
      self->descriptionMode_ = JreLoadEnum(EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMode, PATTERN);
      self->descPattern_ = JavaUtilRegexPattern_compileWithNSString_([desc substring:1 endIndex:((jint) [desc length]) - 1]);
      self->exactMatch_ = nil;
      self->stringFilter_ = nil;
    }
    else if ([desc indexOf:'|'] >= 0) {
      IOSObjectArray *words = [desc split:@"[|]"];
      if (((IOSObjectArray *) nil_chk(words))->size_ <= EduStanfordNlpTreesTregexDescriptionPattern_MAX_STRING_MATCHER_SIZE) {
        self->descriptionMode_ = JreLoadEnum(EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMode, STRINGS);
        self->descPattern_ = nil;
        self->exactMatch_ = nil;
        self->stringFilter_ = new_EduStanfordNlpUtilArrayStringFilter_initWithEduStanfordNlpUtilArrayStringFilter_Mode_withNSStringArray_(JreLoadEnum(EduStanfordNlpUtilArrayStringFilter_Mode, EXACT), words);
      }
      else {
        self->descriptionMode_ = JreLoadEnum(EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMode, PATTERN);
        self->descPattern_ = JavaUtilRegexPattern_compileWithNSString_(JreStrcat("$$$", @"^(?:", desc, @")$"));
        self->exactMatch_ = nil;
        self->stringFilter_ = nil;
      }
    }
    else {
      self->descriptionMode_ = JreLoadEnum(EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMode, EXACT);
      self->descPattern_ = nil;
      self->exactMatch_ = desc;
      self->stringFilter_ = nil;
    }
  }
  else {
    if (name == nil && linkedName == nil) {
      @throw new_JavaLangAssertionError_initWithId_(@"Illegal description pattern.  Does not describe a node or link/name a variable");
    }
    self->stringDesc_ = @" ";
    self->descriptionMode_ = nil;
    self->descPattern_ = nil;
    self->exactMatch_ = nil;
    self->stringFilter_ = nil;
  }
  self->name_ = name;
  [self setChildWithEduStanfordNlpTreesTregexTregexPattern:nil];
  self->basicCatFunction_ = (useBasicCat ? basicCatFunction : nil);
  self->variableGroups_ = variableGroups;
}

EduStanfordNlpTreesTregexDescriptionPattern *new_EduStanfordNlpTreesTregexDescriptionPattern_initWithEduStanfordNlpTreesTregexRelation_withBoolean_withNSString_withNSString_withBoolean_withJavaUtilFunctionFunction_withJavaUtilList_withBoolean_withNSString_(EduStanfordNlpTreesTregexRelation *rel, jboolean negDesc, NSString *desc, NSString *name, jboolean useBasicCat, id<JavaUtilFunctionFunction> basicCatFunction, id<JavaUtilList> variableGroups, jboolean isLink, NSString *linkedName) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesTregexDescriptionPattern, initWithEduStanfordNlpTreesTregexRelation_withBoolean_withNSString_withNSString_withBoolean_withJavaUtilFunctionFunction_withJavaUtilList_withBoolean_withNSString_, rel, negDesc, desc, name, useBasicCat, basicCatFunction, variableGroups, isLink, linkedName)
}

EduStanfordNlpTreesTregexDescriptionPattern *create_EduStanfordNlpTreesTregexDescriptionPattern_initWithEduStanfordNlpTreesTregexRelation_withBoolean_withNSString_withNSString_withBoolean_withJavaUtilFunctionFunction_withJavaUtilList_withBoolean_withNSString_(EduStanfordNlpTreesTregexRelation *rel, jboolean negDesc, NSString *desc, NSString *name, jboolean useBasicCat, id<JavaUtilFunctionFunction> basicCatFunction, id<JavaUtilList> variableGroups, jboolean isLink, NSString *linkedName) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesTregexDescriptionPattern, initWithEduStanfordNlpTreesTregexRelation_withBoolean_withNSString_withNSString_withBoolean_withJavaUtilFunctionFunction_withJavaUtilList_withBoolean_withNSString_, rel, negDesc, desc, name, useBasicCat, basicCatFunction, variableGroups, isLink, linkedName)
}

void EduStanfordNlpTreesTregexDescriptionPattern_initWithEduStanfordNlpTreesTregexRelation_withEduStanfordNlpTreesTregexDescriptionPattern_(EduStanfordNlpTreesTregexDescriptionPattern *self, EduStanfordNlpTreesTregexRelation *newRelation, EduStanfordNlpTreesTregexDescriptionPattern *oldPattern) {
  EduStanfordNlpTreesTregexTregexPattern_init(self);
  self->rel_ = newRelation;
  self->negDesc_ = ((EduStanfordNlpTreesTregexDescriptionPattern *) nil_chk(oldPattern))->negDesc_;
  self->isLink_ = oldPattern->isLink_;
  self->linkedName_ = oldPattern->linkedName_;
  self->stringDesc_ = oldPattern->stringDesc_;
  self->descriptionMode_ = oldPattern->descriptionMode_;
  self->descPattern_ = oldPattern->descPattern_;
  self->exactMatch_ = oldPattern->exactMatch_;
  self->stringFilter_ = oldPattern->stringFilter_;
  self->name_ = oldPattern->name_;
  [self setChildWithEduStanfordNlpTreesTregexTregexPattern:oldPattern->child_];
  self->basicCatFunction_ = oldPattern->basicCatFunction_;
  self->variableGroups_ = oldPattern->variableGroups_;
}

EduStanfordNlpTreesTregexDescriptionPattern *new_EduStanfordNlpTreesTregexDescriptionPattern_initWithEduStanfordNlpTreesTregexRelation_withEduStanfordNlpTreesTregexDescriptionPattern_(EduStanfordNlpTreesTregexRelation *newRelation, EduStanfordNlpTreesTregexDescriptionPattern *oldPattern) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesTregexDescriptionPattern, initWithEduStanfordNlpTreesTregexRelation_withEduStanfordNlpTreesTregexDescriptionPattern_, newRelation, oldPattern)
}

EduStanfordNlpTreesTregexDescriptionPattern *create_EduStanfordNlpTreesTregexDescriptionPattern_initWithEduStanfordNlpTreesTregexRelation_withEduStanfordNlpTreesTregexDescriptionPattern_(EduStanfordNlpTreesTregexRelation *newRelation, EduStanfordNlpTreesTregexDescriptionPattern *oldPattern) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesTregexDescriptionPattern, initWithEduStanfordNlpTreesTregexRelation_withEduStanfordNlpTreesTregexDescriptionPattern_, newRelation, oldPattern)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTreesTregexDescriptionPattern)

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMode)

EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMode *EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMode_values_[4];

@implementation EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMode

+ (IOSObjectArray *)values {
  return EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMode_values();
}

+ (EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMode *)valueOfWithNSString:(NSString *)name {
  return EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMode_valueOfWithNSString_(name);
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LEduStanfordNlpTreesTregexDescriptionPattern_DescriptionMode;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTregexDescriptionPattern_DescriptionMode;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PATTERN", "LEduStanfordNlpTreesTregexDescriptionPattern_DescriptionMode;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "STRINGS", "LEduStanfordNlpTreesTregexDescriptionPattern_DescriptionMode;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "EXACT", "LEduStanfordNlpTreesTregexDescriptionPattern_DescriptionMode;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "ANYTHING", "LEduStanfordNlpTreesTregexDescriptionPattern_DescriptionMode;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMode, PATTERN), &JreEnum(EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMode, STRINGS), &JreEnum(EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMode, EXACT), &JreEnum(EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMode, ANYTHING), "LEduStanfordNlpTreesTregexDescriptionPattern;", "Ljava/lang/Enum<Ledu/stanford/nlp/trees/tregex/DescriptionPattern$DescriptionMode;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMode = { "DescriptionMode", "edu.stanford.nlp.trees.tregex", ptrTable, methods, fields, 7, 0x4018, 2, 4, 6, -1, -1, 7, -1 };
  return &_EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMode;
}

+ (void)initialize {
  if (self == [EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMode class]) {
    JreEnum(EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMode, PATTERN) = new_EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMode_initWithNSString_withInt_(@"PATTERN", 0);
    JreEnum(EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMode, STRINGS) = new_EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMode_initWithNSString_withInt_(@"STRINGS", 1);
    JreEnum(EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMode, EXACT) = new_EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMode_initWithNSString_withInt_(@"EXACT", 2);
    JreEnum(EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMode, ANYTHING) = new_EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMode_initWithNSString_withInt_(@"ANYTHING", 3);
    J2OBJC_SET_INITIALIZED(EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMode)
  }
}

@end

void EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMode_initWithNSString_withInt_(EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMode *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMode *new_EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMode_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMode, initWithNSString_withInt_, __name, __ordinal)
}

IOSObjectArray *EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMode_values() {
  EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMode_initialize();
  return [IOSObjectArray arrayWithObjects:EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMode_values_ count:4 type:EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMode_class_()];
}

EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMode *EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMode_valueOfWithNSString_(NSString *name) {
  EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMode_initialize();
  for (int i = 0; i < 4; i++) {
    EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMode *e = EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMode_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMode *EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMode_fromOrdinal(NSUInteger ordinal) {
  EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMode_initialize();
  if (ordinal >= 4) {
    return nil;
  }
  return EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMode_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMode)

@implementation EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMatcher

- (instancetype)initWithEduStanfordNlpTreesTregexDescriptionPattern:(EduStanfordNlpTreesTregexDescriptionPattern *)n
                                        withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)root
                                        withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)tree
                                        withJavaUtilIdentityHashMap:(JavaUtilIdentityHashMap *)nodesToParents
                                                    withJavaUtilMap:(id<JavaUtilMap>)namesToNodes
                       withEduStanfordNlpTreesTregexVariableStrings:(EduStanfordNlpTreesTregexVariableStrings *)variableStrings
                                  withEduStanfordNlpTreesHeadFinder:(id<EduStanfordNlpTreesHeadFinder>)headFinder {
  EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMatcher_initWithEduStanfordNlpTreesTregexDescriptionPattern_withEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_withJavaUtilIdentityHashMap_withJavaUtilMap_withEduStanfordNlpTreesTregexVariableStrings_withEduStanfordNlpTreesHeadFinder_(self, n, root, tree, nodesToParents, namesToNodes, variableStrings, headFinder);
  return self;
}

- (void)resetChildIter {
  EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMatcher_decommitVariableGroups(self);
  EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMatcher_removeNamedNodes(self);
  treeNodeMatchCandidateIterator_ = nil;
  finished_ = false;
  nextTreeNodeMatchCandidate_ = nil;
  if (childMatcher_ != nil) {
    [childMatcher_ resetChildIter];
  }
}

- (void)resetChild {
  EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMatcher_resetChild(self);
}

- (void)goToNextTreeNodeMatch {
  EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMatcher_goToNextTreeNodeMatch(self);
}

- (void)commitVariableGroupsWithJavaUtilRegexMatcher:(JavaUtilRegexMatcher *)m {
  EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMatcher_commitVariableGroupsWithJavaUtilRegexMatcher_(self, m);
}

- (void)commitVariableGroupsWithNSString:(NSString *)value {
  EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMatcher_commitVariableGroupsWithNSString_(self, value);
}

- (void)decommitVariableGroups {
  EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMatcher_decommitVariableGroups(self);
}

- (void)removeNamedNodes {
  EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMatcher_removeNamedNodes(self);
}

- (jboolean)matchChild {
  return EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMatcher_matchChild(self);
}

- (jboolean)matches {
  if (finished_) {
    return false;
  }
  while (!finished_) {
    if (EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMatcher_matchChild(self)) {
      if ([((EduStanfordNlpTreesTregexDescriptionPattern *) nil_chk(myNode_)) isNegated]) {
        finished_ = true;
        return false;
      }
      else {
        if ([myNode_ isOptional]) {
          finished_ = true;
        }
        return true;
      }
    }
    else {
      EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMatcher_goToNextTreeNodeMatch(self);
    }
  }
  if ([((EduStanfordNlpTreesTregexDescriptionPattern *) nil_chk(myNode_)) isNegated]) {
    return true;
  }
  else {
    EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMatcher_decommitVariableGroups(self);
    EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMatcher_removeNamedNodes(self);
    nextTreeNodeMatchCandidate_ = nil;
    return [myNode_ isOptional];
  }
}

- (EduStanfordNlpTreesTree *)getMatch {
  return nextTreeNodeMatchCandidate_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 2, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpTreesTregexDescriptionPattern:withEduStanfordNlpTreesTree:withEduStanfordNlpTreesTree:withJavaUtilIdentityHashMap:withJavaUtilMap:withEduStanfordNlpTreesTregexVariableStrings:withEduStanfordNlpTreesHeadFinder:);
  methods[1].selector = @selector(resetChildIter);
  methods[2].selector = @selector(resetChild);
  methods[3].selector = @selector(goToNextTreeNodeMatch);
  methods[4].selector = @selector(commitVariableGroupsWithJavaUtilRegexMatcher:);
  methods[5].selector = @selector(commitVariableGroupsWithNSString:);
  methods[6].selector = @selector(decommitVariableGroups);
  methods[7].selector = @selector(removeNamedNodes);
  methods[8].selector = @selector(matchChild);
  methods[9].selector = @selector(matches);
  methods[10].selector = @selector(getMatch);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "treeNodeMatchCandidateIterator_", "LJavaUtilIterator;", .constantValue.asLong = 0, 0x2, -1, -1, 5, -1 },
    { "myNode_", "LEduStanfordNlpTreesTregexDescriptionPattern;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "childMatcher_", "LEduStanfordNlpTreesTregexTregexMatcher;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "nextTreeNodeMatchCandidate_", "LEduStanfordNlpTreesTree;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "finished_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "matchedOnce_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "committedVariables_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpTreesTregexDescriptionPattern;LEduStanfordNlpTreesTree;LEduStanfordNlpTreesTree;LJavaUtilIdentityHashMap;LJavaUtilMap;LEduStanfordNlpTreesTregexVariableStrings;LEduStanfordNlpTreesHeadFinder;", "(Ledu/stanford/nlp/trees/tregex/DescriptionPattern;Ledu/stanford/nlp/trees/Tree;Ledu/stanford/nlp/trees/Tree;Ljava/util/IdentityHashMap<Ledu/stanford/nlp/trees/Tree;Ledu/stanford/nlp/trees/Tree;>;Ljava/util/Map<Ljava/lang/String;Ledu/stanford/nlp/trees/Tree;>;Ledu/stanford/nlp/trees/tregex/VariableStrings;Ledu/stanford/nlp/trees/HeadFinder;)V", "commitVariableGroups", "LJavaUtilRegexMatcher;", "LNSString;", "Ljava/util/Iterator<Ledu/stanford/nlp/trees/Tree;>;", "LEduStanfordNlpTreesTregexDescriptionPattern;" };
  static const J2ObjcClassInfo _EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMatcher = { "DescriptionMatcher", "edu.stanford.nlp.trees.tregex", ptrTable, methods, fields, 7, 0xa, 11, 7, 6, -1, -1, -1, -1 };
  return &_EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMatcher;
}

@end

void EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMatcher_initWithEduStanfordNlpTreesTregexDescriptionPattern_withEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_withJavaUtilIdentityHashMap_withJavaUtilMap_withEduStanfordNlpTreesTregexVariableStrings_withEduStanfordNlpTreesHeadFinder_(EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMatcher *self, EduStanfordNlpTreesTregexDescriptionPattern *n, EduStanfordNlpTreesTree *root, EduStanfordNlpTreesTree *tree, JavaUtilIdentityHashMap *nodesToParents, id<JavaUtilMap> namesToNodes, EduStanfordNlpTreesTregexVariableStrings *variableStrings, id<EduStanfordNlpTreesHeadFinder> headFinder) {
  EduStanfordNlpTreesTregexTregexMatcher_initWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_withJavaUtilIdentityHashMap_withJavaUtilMap_withEduStanfordNlpTreesTregexVariableStrings_withEduStanfordNlpTreesHeadFinder_(self, root, tree, nodesToParents, namesToNodes, variableStrings, headFinder);
  self->finished_ = false;
  self->matchedOnce_ = false;
  self->committedVariables_ = false;
  self->myNode_ = n;
}

EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMatcher *new_EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMatcher_initWithEduStanfordNlpTreesTregexDescriptionPattern_withEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_withJavaUtilIdentityHashMap_withJavaUtilMap_withEduStanfordNlpTreesTregexVariableStrings_withEduStanfordNlpTreesHeadFinder_(EduStanfordNlpTreesTregexDescriptionPattern *n, EduStanfordNlpTreesTree *root, EduStanfordNlpTreesTree *tree, JavaUtilIdentityHashMap *nodesToParents, id<JavaUtilMap> namesToNodes, EduStanfordNlpTreesTregexVariableStrings *variableStrings, id<EduStanfordNlpTreesHeadFinder> headFinder) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMatcher, initWithEduStanfordNlpTreesTregexDescriptionPattern_withEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_withJavaUtilIdentityHashMap_withJavaUtilMap_withEduStanfordNlpTreesTregexVariableStrings_withEduStanfordNlpTreesHeadFinder_, n, root, tree, nodesToParents, namesToNodes, variableStrings, headFinder)
}

EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMatcher *create_EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMatcher_initWithEduStanfordNlpTreesTregexDescriptionPattern_withEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_withJavaUtilIdentityHashMap_withJavaUtilMap_withEduStanfordNlpTreesTregexVariableStrings_withEduStanfordNlpTreesHeadFinder_(EduStanfordNlpTreesTregexDescriptionPattern *n, EduStanfordNlpTreesTree *root, EduStanfordNlpTreesTree *tree, JavaUtilIdentityHashMap *nodesToParents, id<JavaUtilMap> namesToNodes, EduStanfordNlpTreesTregexVariableStrings *variableStrings, id<EduStanfordNlpTreesHeadFinder> headFinder) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMatcher, initWithEduStanfordNlpTreesTregexDescriptionPattern_withEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_withJavaUtilIdentityHashMap_withJavaUtilMap_withEduStanfordNlpTreesTregexVariableStrings_withEduStanfordNlpTreesHeadFinder_, n, root, tree, nodesToParents, namesToNodes, variableStrings, headFinder)
}

void EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMatcher_resetChild(EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMatcher *self) {
  if (self->childMatcher_ == nil) {
    if (((EduStanfordNlpTreesTregexDescriptionPattern *) nil_chk(self->myNode_))->child_ == nil) {
      self->matchedOnce_ = false;
    }
  }
  else {
    [self->childMatcher_ resetChildIterWithEduStanfordNlpTreesTree:self->nextTreeNodeMatchCandidate_];
  }
}

void EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMatcher_goToNextTreeNodeMatch(EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMatcher *self) {
  EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMatcher_decommitVariableGroups(self);
  EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMatcher_removeNamedNodes(self);
  self->finished_ = true;
  JavaUtilRegexMatcher *m = nil;
  NSString *value = nil;
  if (self->treeNodeMatchCandidateIterator_ == nil) {
    self->treeNodeMatchCandidateIterator_ = [((EduStanfordNlpTreesTregexRelation *) nil_chk(((EduStanfordNlpTreesTregexDescriptionPattern *) nil_chk(self->myNode_))->rel_)) searchNodeIteratorWithEduStanfordNlpTreesTree:self->tree_ withEduStanfordNlpTreesTregexTregexMatcher:self];
  }
  while ([((id<JavaUtilIterator>) nil_chk(self->treeNodeMatchCandidateIterator_)) hasNext]) {
    self->nextTreeNodeMatchCandidate_ = [((id<JavaUtilIterator>) nil_chk(self->treeNodeMatchCandidateIterator_)) next];
    if (((EduStanfordNlpTreesTregexDescriptionPattern *) nil_chk(self->myNode_))->descriptionMode_ == nil) {
      if (self->myNode_->isLink_) {
        EduStanfordNlpTreesTree *otherTree = [((id<JavaUtilMap>) nil_chk(self->namesToNodes_)) getWithId:self->myNode_->linkedName_];
        if (otherTree != nil) {
          NSString *otherValue = self->myNode_->basicCatFunction_ == nil ? [otherTree value] : [self->myNode_->basicCatFunction_ applyWithId:[otherTree value]];
          NSString *myValue = self->myNode_->basicCatFunction_ == nil ? [((EduStanfordNlpTreesTree *) nil_chk(self->nextTreeNodeMatchCandidate_)) value] : [self->myNode_->basicCatFunction_ applyWithId:[((EduStanfordNlpTreesTree *) nil_chk(self->nextTreeNodeMatchCandidate_)) value]];
          if ([otherValue isEqual:myValue]) {
            self->finished_ = false;
            break;
          }
        }
      }
      else if ([((id<JavaUtilMap>) nil_chk(self->namesToNodes_)) getWithId:self->myNode_->name_] == self->nextTreeNodeMatchCandidate_) {
        self->finished_ = false;
        break;
      }
    }
    else {
      jboolean found;
      value = [((EduStanfordNlpTreesTree *) nil_chk(self->nextTreeNodeMatchCandidate_)) value];
      if (value == nil) {
        found = false;
      }
      else {
        if (self->myNode_->basicCatFunction_ != nil) {
          value = [self->myNode_->basicCatFunction_ applyWithId:value];
        }
        switch ([self->myNode_->descriptionMode_ ordinal]) {
          case EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMode_Enum_EXACT:
          found = [((NSString *) nil_chk(value)) isEqual:self->myNode_->exactMatch_];
          break;
          case EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMode_Enum_PATTERN:
          m = [((JavaUtilRegexPattern *) nil_chk(self->myNode_->descPattern_)) matcherWithJavaLangCharSequence:value];
          found = [((JavaUtilRegexMatcher *) nil_chk(m)) find];
          break;
          case EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMode_Enum_ANYTHING:
          found = true;
          break;
          case EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMode_Enum_STRINGS:
          found = [((id<JavaUtilFunctionPredicate>) nil_chk(self->myNode_->stringFilter_)) testWithId:value];
          break;
          default:
          @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Unexpected match mode");
        }
      }
      if (found) {
        for (EduStanfordNlpUtilPair * __strong varGroup in nil_chk(self->myNode_->variableGroups_)) {
          NSString *thisVariable = [((EduStanfordNlpUtilPair *) nil_chk(varGroup)) second];
          NSString *thisVarString = [((EduStanfordNlpTreesTregexVariableStrings *) nil_chk(self->variableStrings_)) getStringWithNSString:thisVariable];
          if (m != nil) {
            if (thisVarString != nil && ![thisVarString isEqual:[m groupWithInt:[((JavaLangInteger *) nil_chk([varGroup first])) intValue]]]) {
              found = false;
              break;
            }
          }
          else {
            if (thisVarString != nil && ![thisVarString isEqual:value]) {
              found = false;
              break;
            }
          }
        }
      }
      if (found != self->myNode_->negDesc_) {
        self->finished_ = false;
        break;
      }
    }
  }
  if (!self->finished_) {
    EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMatcher_resetChild(self);
    if ((((EduStanfordNlpTreesTregexDescriptionPattern *) nil_chk(self->myNode_))->descriptionMode_ != nil || self->myNode_->isLink_) && self->myNode_->name_ != nil) {
      (void) [((id<JavaUtilMap>) nil_chk(self->namesToNodes_)) putWithId:self->myNode_->name_ withId:self->nextTreeNodeMatchCandidate_];
    }
    if (m != nil) {
      EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMatcher_commitVariableGroupsWithJavaUtilRegexMatcher_(self, m);
    }
    else if (value != nil) {
      EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMatcher_commitVariableGroupsWithNSString_(self, value);
    }
  }
}

void EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMatcher_commitVariableGroupsWithJavaUtilRegexMatcher_(EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMatcher *self, JavaUtilRegexMatcher *m) {
  self->committedVariables_ = true;
  for (EduStanfordNlpUtilPair * __strong varGroup in nil_chk(((EduStanfordNlpTreesTregexDescriptionPattern *) nil_chk(self->myNode_))->variableGroups_)) {
    NSString *thisVarString = [((JavaUtilRegexMatcher *) nil_chk(m)) groupWithInt:[((JavaLangInteger *) nil_chk([((EduStanfordNlpUtilPair *) nil_chk(varGroup)) first])) intValue]];
    [((EduStanfordNlpTreesTregexVariableStrings *) nil_chk(self->variableStrings_)) setVarWithNSString:[varGroup second] withNSString:thisVarString];
  }
}

void EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMatcher_commitVariableGroupsWithNSString_(EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMatcher *self, NSString *value) {
  self->committedVariables_ = true;
  for (EduStanfordNlpUtilPair * __strong varGroup in nil_chk(((EduStanfordNlpTreesTregexDescriptionPattern *) nil_chk(self->myNode_))->variableGroups_)) {
    [((EduStanfordNlpTreesTregexVariableStrings *) nil_chk(self->variableStrings_)) setVarWithNSString:[((EduStanfordNlpUtilPair *) nil_chk(varGroup)) second] withNSString:value];
  }
}

void EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMatcher_decommitVariableGroups(EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMatcher *self) {
  if (self->committedVariables_) {
    for (EduStanfordNlpUtilPair * __strong varGroup in nil_chk(((EduStanfordNlpTreesTregexDescriptionPattern *) nil_chk(self->myNode_))->variableGroups_)) {
      [((EduStanfordNlpTreesTregexVariableStrings *) nil_chk(self->variableStrings_)) unsetVarWithNSString:[((EduStanfordNlpUtilPair *) nil_chk(varGroup)) second]];
    }
  }
  self->committedVariables_ = false;
}

void EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMatcher_removeNamedNodes(EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMatcher *self) {
  if ((((EduStanfordNlpTreesTregexDescriptionPattern *) nil_chk(self->myNode_))->descriptionMode_ != nil || self->myNode_->isLink_) && self->myNode_->name_ != nil) {
    (void) [((id<JavaUtilMap>) nil_chk(self->namesToNodes_)) removeWithId:self->myNode_->name_];
  }
}

jboolean EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMatcher_matchChild(EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMatcher *self) {
  if (self->nextTreeNodeMatchCandidate_ == nil) {
    return false;
  }
  if (self->childMatcher_ == nil && ((EduStanfordNlpTreesTregexDescriptionPattern *) nil_chk(self->myNode_))->child_ != nil) {
    self->childMatcher_ = [((EduStanfordNlpTreesTregexDescriptionPattern *) nil_chk(self->myNode_))->child_ matcherWithEduStanfordNlpTreesTree:self->root_ withEduStanfordNlpTreesTree:self->nextTreeNodeMatchCandidate_ withJavaUtilIdentityHashMap:self->nodesToParents_ withJavaUtilMap:self->namesToNodes_ withEduStanfordNlpTreesTregexVariableStrings:self->variableStrings_ withEduStanfordNlpTreesHeadFinder:self->headFinder_];
  }
  if (self->childMatcher_ == nil) {
    if (!self->matchedOnce_) {
      self->matchedOnce_ = true;
      return true;
    }
    return false;
  }
  return [self->childMatcher_ matches];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTreesTregexDescriptionPattern_DescriptionMatcher)
