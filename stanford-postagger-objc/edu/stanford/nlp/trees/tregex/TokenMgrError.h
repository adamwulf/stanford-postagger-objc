//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/trees/tregex/TokenMgrError.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_EduStanfordNlpTreesTregexTokenMgrError")
#ifdef RESTRICT_EduStanfordNlpTreesTregexTokenMgrError
#define INCLUDE_ALL_EduStanfordNlpTreesTregexTokenMgrError 0
#else
#define INCLUDE_ALL_EduStanfordNlpTreesTregexTokenMgrError 1
#endif
#undef RESTRICT_EduStanfordNlpTreesTregexTokenMgrError

#if !defined (EduStanfordNlpTreesTregexTokenMgrError_) && (INCLUDE_ALL_EduStanfordNlpTreesTregexTokenMgrError || defined(INCLUDE_EduStanfordNlpTreesTregexTokenMgrError))
#define EduStanfordNlpTreesTregexTokenMgrError_

#define RESTRICT_JavaLangError 1
#define INCLUDE_JavaLangError 1
#include "java/lang/Error.h"

@interface EduStanfordNlpTreesTregexTokenMgrError : JavaLangError {
 @public
  jint errorCode_;
}

#pragma mark Public

- (instancetype)init;

- (instancetype)initWithBoolean:(jboolean)EOFSeen
                        withInt:(jint)lexState
                        withInt:(jint)errorLine
                        withInt:(jint)errorColumn
                   withNSString:(NSString *)errorAfter
                       withChar:(jchar)curChar
                        withInt:(jint)reason;

- (instancetype)initWithNSString:(NSString *)message
                         withInt:(jint)reason;

- (NSString *)getMessage;

#pragma mark Protected

+ (NSString *)addEscapesWithNSString:(NSString *)str;

+ (NSString *)LexicalErrorWithBoolean:(jboolean)EOFSeen
                              withInt:(jint)lexState
                              withInt:(jint)errorLine
                              withInt:(jint)errorColumn
                         withNSString:(NSString *)errorAfter
                             withChar:(jchar)curChar;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpTreesTregexTokenMgrError)

inline jint EduStanfordNlpTreesTregexTokenMgrError_get_LEXICAL_ERROR();
#define EduStanfordNlpTreesTregexTokenMgrError_LEXICAL_ERROR 0
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpTreesTregexTokenMgrError, LEXICAL_ERROR, jint)

inline jint EduStanfordNlpTreesTregexTokenMgrError_get_STATIC_LEXER_ERROR();
#define EduStanfordNlpTreesTregexTokenMgrError_STATIC_LEXER_ERROR 1
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpTreesTregexTokenMgrError, STATIC_LEXER_ERROR, jint)

inline jint EduStanfordNlpTreesTregexTokenMgrError_get_INVALID_LEXICAL_STATE();
#define EduStanfordNlpTreesTregexTokenMgrError_INVALID_LEXICAL_STATE 2
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpTreesTregexTokenMgrError, INVALID_LEXICAL_STATE, jint)

inline jint EduStanfordNlpTreesTregexTokenMgrError_get_LOOP_DETECTED();
#define EduStanfordNlpTreesTregexTokenMgrError_LOOP_DETECTED 3
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpTreesTregexTokenMgrError, LOOP_DETECTED, jint)

FOUNDATION_EXPORT NSString *EduStanfordNlpTreesTregexTokenMgrError_addEscapesWithNSString_(NSString *str);

FOUNDATION_EXPORT NSString *EduStanfordNlpTreesTregexTokenMgrError_LexicalErrorWithBoolean_withInt_withInt_withInt_withNSString_withChar_(jboolean EOFSeen, jint lexState, jint errorLine, jint errorColumn, NSString *errorAfter, jchar curChar);

FOUNDATION_EXPORT void EduStanfordNlpTreesTregexTokenMgrError_init(EduStanfordNlpTreesTregexTokenMgrError *self);

FOUNDATION_EXPORT EduStanfordNlpTreesTregexTokenMgrError *new_EduStanfordNlpTreesTregexTokenMgrError_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EduStanfordNlpTreesTregexTokenMgrError *create_EduStanfordNlpTreesTregexTokenMgrError_init();

FOUNDATION_EXPORT void EduStanfordNlpTreesTregexTokenMgrError_initWithNSString_withInt_(EduStanfordNlpTreesTregexTokenMgrError *self, NSString *message, jint reason);

FOUNDATION_EXPORT EduStanfordNlpTreesTregexTokenMgrError *new_EduStanfordNlpTreesTregexTokenMgrError_initWithNSString_withInt_(NSString *message, jint reason) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EduStanfordNlpTreesTregexTokenMgrError *create_EduStanfordNlpTreesTregexTokenMgrError_initWithNSString_withInt_(NSString *message, jint reason);

FOUNDATION_EXPORT void EduStanfordNlpTreesTregexTokenMgrError_initWithBoolean_withInt_withInt_withInt_withNSString_withChar_withInt_(EduStanfordNlpTreesTregexTokenMgrError *self, jboolean EOFSeen, jint lexState, jint errorLine, jint errorColumn, NSString *errorAfter, jchar curChar, jint reason);

FOUNDATION_EXPORT EduStanfordNlpTreesTregexTokenMgrError *new_EduStanfordNlpTreesTregexTokenMgrError_initWithBoolean_withInt_withInt_withInt_withNSString_withChar_withInt_(jboolean EOFSeen, jint lexState, jint errorLine, jint errorColumn, NSString *errorAfter, jchar curChar, jint reason) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EduStanfordNlpTreesTregexTokenMgrError *create_EduStanfordNlpTreesTregexTokenMgrError_initWithBoolean_withInt_withInt_withInt_withNSString_withChar_withInt_(jboolean EOFSeen, jint lexState, jint errorLine, jint errorColumn, NSString *errorAfter, jchar curChar, jint reason);

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpTreesTregexTokenMgrError)

#endif

#pragma pop_macro("INCLUDE_ALL_EduStanfordNlpTreesTregexTokenMgrError")
