//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/trees/tregex/CoordinationPattern.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/trees/HeadFinder.h"
#include "edu/stanford/nlp/trees/Tree.h"
#include "edu/stanford/nlp/trees/tregex/CoordinationPattern.h"
#include "edu/stanford/nlp/trees/tregex/TregexMatcher.h"
#include "edu/stanford/nlp/trees/tregex/TregexPattern.h"
#include "edu/stanford/nlp/trees/tregex/VariableStrings.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/IdentityHashMap.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"

@interface EduStanfordNlpTreesTregexCoordinationPattern () {
 @public
  jboolean isConj_;
  id<JavaUtilList> children_;
}

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpTreesTregexCoordinationPattern, children_, id<JavaUtilList>)

inline jlong EduStanfordNlpTreesTregexCoordinationPattern_get_serialVersionUID();
#define EduStanfordNlpTreesTregexCoordinationPattern_serialVersionUID -7797084959452603087LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpTreesTregexCoordinationPattern, serialVersionUID, jlong)

@interface EduStanfordNlpTreesTregexCoordinationPattern_CoordinationMatcher : EduStanfordNlpTreesTregexTregexMatcher {
 @public
  IOSObjectArray *children_;
  EduStanfordNlpTreesTregexCoordinationPattern *myNode_;
  jint currChild_;
  jboolean considerAll_;
}

- (instancetype)initWithEduStanfordNlpTreesTregexCoordinationPattern:(EduStanfordNlpTreesTregexCoordinationPattern *)n
                                         withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)root
                                         withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)tree
                                         withJavaUtilIdentityHashMap:(JavaUtilIdentityHashMap *)nodesToParents
                                                     withJavaUtilMap:(id<JavaUtilMap>)namesToNodes
                        withEduStanfordNlpTreesTregexVariableStrings:(EduStanfordNlpTreesTregexVariableStrings *)variableStrings
                                   withEduStanfordNlpTreesHeadFinder:(id<EduStanfordNlpTreesHeadFinder>)headFinder;

- (void)resetChildIter;

- (void)resetChildIterWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)tree;

- (jboolean)matches;

- (EduStanfordNlpTreesTree *)getMatch;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpTreesTregexCoordinationPattern_CoordinationMatcher)

J2OBJC_FIELD_SETTER(EduStanfordNlpTreesTregexCoordinationPattern_CoordinationMatcher, children_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(EduStanfordNlpTreesTregexCoordinationPattern_CoordinationMatcher, myNode_, EduStanfordNlpTreesTregexCoordinationPattern *)

__attribute__((unused)) static void EduStanfordNlpTreesTregexCoordinationPattern_CoordinationMatcher_initWithEduStanfordNlpTreesTregexCoordinationPattern_withEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_withJavaUtilIdentityHashMap_withJavaUtilMap_withEduStanfordNlpTreesTregexVariableStrings_withEduStanfordNlpTreesHeadFinder_(EduStanfordNlpTreesTregexCoordinationPattern_CoordinationMatcher *self, EduStanfordNlpTreesTregexCoordinationPattern *n, EduStanfordNlpTreesTree *root, EduStanfordNlpTreesTree *tree, JavaUtilIdentityHashMap *nodesToParents, id<JavaUtilMap> namesToNodes, EduStanfordNlpTreesTregexVariableStrings *variableStrings, id<EduStanfordNlpTreesHeadFinder> headFinder);

__attribute__((unused)) static EduStanfordNlpTreesTregexCoordinationPattern_CoordinationMatcher *new_EduStanfordNlpTreesTregexCoordinationPattern_CoordinationMatcher_initWithEduStanfordNlpTreesTregexCoordinationPattern_withEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_withJavaUtilIdentityHashMap_withJavaUtilMap_withEduStanfordNlpTreesTregexVariableStrings_withEduStanfordNlpTreesHeadFinder_(EduStanfordNlpTreesTregexCoordinationPattern *n, EduStanfordNlpTreesTree *root, EduStanfordNlpTreesTree *tree, JavaUtilIdentityHashMap *nodesToParents, id<JavaUtilMap> namesToNodes, EduStanfordNlpTreesTregexVariableStrings *variableStrings, id<EduStanfordNlpTreesHeadFinder> headFinder) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpTreesTregexCoordinationPattern_CoordinationMatcher *create_EduStanfordNlpTreesTregexCoordinationPattern_CoordinationMatcher_initWithEduStanfordNlpTreesTregexCoordinationPattern_withEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_withJavaUtilIdentityHashMap_withJavaUtilMap_withEduStanfordNlpTreesTregexVariableStrings_withEduStanfordNlpTreesHeadFinder_(EduStanfordNlpTreesTregexCoordinationPattern *n, EduStanfordNlpTreesTree *root, EduStanfordNlpTreesTree *tree, JavaUtilIdentityHashMap *nodesToParents, id<JavaUtilMap> namesToNodes, EduStanfordNlpTreesTregexVariableStrings *variableStrings, id<EduStanfordNlpTreesHeadFinder> headFinder);

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpTreesTregexCoordinationPattern_CoordinationMatcher)

@implementation EduStanfordNlpTreesTregexCoordinationPattern

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)children
                         withBoolean:(jboolean)isConj {
  EduStanfordNlpTreesTregexCoordinationPattern_initWithJavaUtilList_withBoolean_(self, children, isConj);
  return self;
}

- (id<JavaUtilList>)getChildren {
  return children_;
}

- (NSString *)localString {
  return (isConj_ ? @"and" : @"or");
}

- (NSString *)description {
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  if (isConj_) {
    if ([self isNegated]) {
      (void) [sb appendWithNSString:@"!("];
    }
    for (EduStanfordNlpTreesTregexTregexPattern * __strong node in nil_chk(children_)) {
      (void) [sb appendWithNSString:[((EduStanfordNlpTreesTregexTregexPattern *) nil_chk(node)) description]];
    }
    if ([self isNegated]) {
      (void) [sb appendWithNSString:@")"];
    }
  }
  else {
    if ([self isNegated]) {
      (void) [sb appendWithNSString:@"!"];
    }
    (void) [sb appendWithChar:'['];
    for (id<JavaUtilIterator> iter = [((id<JavaUtilList>) nil_chk(children_)) iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) {
      EduStanfordNlpTreesTregexTregexPattern *node = [iter next];
      (void) [sb appendWithNSString:[((EduStanfordNlpTreesTregexTregexPattern *) nil_chk(node)) description]];
      if ([iter hasNext]) {
        (void) [sb appendWithNSString:@" |"];
      }
    }
    (void) [sb appendWithChar:']'];
  }
  return [sb description];
}

- (EduStanfordNlpTreesTregexTregexMatcher *)matcherWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)root
                                                   withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)tree
                                                   withJavaUtilIdentityHashMap:(JavaUtilIdentityHashMap *)nodesToParents
                                                               withJavaUtilMap:(id<JavaUtilMap>)namesToNodes
                                  withEduStanfordNlpTreesTregexVariableStrings:(EduStanfordNlpTreesTregexVariableStrings *)variableStrings
                                             withEduStanfordNlpTreesHeadFinder:(id<EduStanfordNlpTreesHeadFinder>)headFinder {
  return new_EduStanfordNlpTreesTregexCoordinationPattern_CoordinationMatcher_initWithEduStanfordNlpTreesTregexCoordinationPattern_withEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_withJavaUtilIdentityHashMap_withJavaUtilMap_withEduStanfordNlpTreesTregexVariableStrings_withEduStanfordNlpTreesHeadFinder_(self, root, tree, nodesToParents, namesToNodes, variableStrings, headFinder);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTregexTregexMatcher;", 0x1, 4, 5, -1, 6, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilList:withBoolean:);
  methods[1].selector = @selector(getChildren);
  methods[2].selector = @selector(localString);
  methods[3].selector = @selector(description);
  methods[4].selector = @selector(matcherWithEduStanfordNlpTreesTree:withEduStanfordNlpTreesTree:withJavaUtilIdentityHashMap:withJavaUtilMap:withEduStanfordNlpTreesTregexVariableStrings:withEduStanfordNlpTreesHeadFinder:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "isConj_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "children_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 7, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpTreesTregexCoordinationPattern_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilList;Z", "(Ljava/util/List<Ledu/stanford/nlp/trees/tregex/TregexPattern;>;Z)V", "()Ljava/util/List<Ledu/stanford/nlp/trees/tregex/TregexPattern;>;", "toString", "matcher", "LEduStanfordNlpTreesTree;LEduStanfordNlpTreesTree;LJavaUtilIdentityHashMap;LJavaUtilMap;LEduStanfordNlpTreesTregexVariableStrings;LEduStanfordNlpTreesHeadFinder;", "(Ledu/stanford/nlp/trees/Tree;Ledu/stanford/nlp/trees/Tree;Ljava/util/IdentityHashMap<Ledu/stanford/nlp/trees/Tree;Ledu/stanford/nlp/trees/Tree;>;Ljava/util/Map<Ljava/lang/String;Ledu/stanford/nlp/trees/Tree;>;Ledu/stanford/nlp/trees/tregex/VariableStrings;Ledu/stanford/nlp/trees/HeadFinder;)Ledu/stanford/nlp/trees/tregex/TregexMatcher;", "Ljava/util/List<Ledu/stanford/nlp/trees/tregex/TregexPattern;>;", "LEduStanfordNlpTreesTregexCoordinationPattern_CoordinationMatcher;" };
  static const J2ObjcClassInfo _EduStanfordNlpTreesTregexCoordinationPattern = { "CoordinationPattern", "edu.stanford.nlp.trees.tregex", ptrTable, methods, fields, 7, 0x0, 5, 3, -1, 8, -1, -1, -1 };
  return &_EduStanfordNlpTreesTregexCoordinationPattern;
}

@end

void EduStanfordNlpTreesTregexCoordinationPattern_initWithJavaUtilList_withBoolean_(EduStanfordNlpTreesTregexCoordinationPattern *self, id<JavaUtilList> children, jboolean isConj) {
  EduStanfordNlpTreesTregexTregexPattern_init(self);
  if ([((id<JavaUtilList>) nil_chk(children)) size] < 2) {
    @throw new_JavaLangRuntimeException_initWithNSString_(@"Coordination node must have at least 2 children.");
  }
  self->children_ = children;
  self->isConj_ = isConj;
}

EduStanfordNlpTreesTregexCoordinationPattern *new_EduStanfordNlpTreesTregexCoordinationPattern_initWithJavaUtilList_withBoolean_(id<JavaUtilList> children, jboolean isConj) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesTregexCoordinationPattern, initWithJavaUtilList_withBoolean_, children, isConj)
}

EduStanfordNlpTreesTregexCoordinationPattern *create_EduStanfordNlpTreesTregexCoordinationPattern_initWithJavaUtilList_withBoolean_(id<JavaUtilList> children, jboolean isConj) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesTregexCoordinationPattern, initWithJavaUtilList_withBoolean_, children, isConj)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTreesTregexCoordinationPattern)

@implementation EduStanfordNlpTreesTregexCoordinationPattern_CoordinationMatcher

- (instancetype)initWithEduStanfordNlpTreesTregexCoordinationPattern:(EduStanfordNlpTreesTregexCoordinationPattern *)n
                                         withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)root
                                         withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)tree
                                         withJavaUtilIdentityHashMap:(JavaUtilIdentityHashMap *)nodesToParents
                                                     withJavaUtilMap:(id<JavaUtilMap>)namesToNodes
                        withEduStanfordNlpTreesTregexVariableStrings:(EduStanfordNlpTreesTregexVariableStrings *)variableStrings
                                   withEduStanfordNlpTreesHeadFinder:(id<EduStanfordNlpTreesHeadFinder>)headFinder {
  EduStanfordNlpTreesTregexCoordinationPattern_CoordinationMatcher_initWithEduStanfordNlpTreesTregexCoordinationPattern_withEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_withJavaUtilIdentityHashMap_withJavaUtilMap_withEduStanfordNlpTreesTregexVariableStrings_withEduStanfordNlpTreesHeadFinder_(self, n, root, tree, nodesToParents, namesToNodes, variableStrings, headFinder);
  return self;
}

- (void)resetChildIter {
  currChild_ = 0;
  {
    IOSObjectArray *a__ = children_;
    EduStanfordNlpTreesTregexTregexMatcher * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    EduStanfordNlpTreesTregexTregexMatcher * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      EduStanfordNlpTreesTregexTregexMatcher *child = *b__++;
      if (child != nil) {
        [child resetChildIter];
      }
    }
  }
}

- (void)resetChildIterWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)tree {
  self->tree_ = tree;
  currChild_ = 0;
  {
    IOSObjectArray *a__ = children_;
    EduStanfordNlpTreesTregexTregexMatcher * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    EduStanfordNlpTreesTregexTregexMatcher * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      EduStanfordNlpTreesTregexTregexMatcher *child = *b__++;
      if (child != nil) {
        [child resetChildIterWithEduStanfordNlpTreesTree:tree];
      }
    }
  }
}

- (jboolean)matches {
  if (considerAll_) {
    if (currChild_ < 0) {
      return [((EduStanfordNlpTreesTregexCoordinationPattern *) nil_chk(myNode_)) isOptional];
    }
    if (currChild_ == ((IOSObjectArray *) nil_chk(children_))->size_) {
      --currChild_;
    }
    while (true) {
      if (IOSObjectArray_Get(nil_chk(children_), currChild_) == nil) {
        (void) IOSObjectArray_Set(children_, currChild_, [((EduStanfordNlpTreesTregexTregexPattern *) nil_chk([((id<JavaUtilList>) nil_chk(((EduStanfordNlpTreesTregexCoordinationPattern *) nil_chk(myNode_))->children_)) getWithInt:currChild_])) matcherWithEduStanfordNlpTreesTree:root_ withEduStanfordNlpTreesTree:tree_ withJavaUtilIdentityHashMap:nodesToParents_ withJavaUtilMap:namesToNodes_ withEduStanfordNlpTreesTregexVariableStrings:variableStrings_ withEduStanfordNlpTreesHeadFinder:headFinder_]);
        [((EduStanfordNlpTreesTregexTregexMatcher *) nil_chk(IOSObjectArray_Get(nil_chk(children_), currChild_))) resetChildIterWithEduStanfordNlpTreesTree:tree_];
      }
      if ([((EduStanfordNlpTreesTregexCoordinationPattern *) nil_chk(myNode_)) isNegated] != [((EduStanfordNlpTreesTregexTregexMatcher *) nil_chk(IOSObjectArray_Get(nil_chk(children_), currChild_))) matches]) {
        ++currChild_;
        if (currChild_ == ((IOSObjectArray *) nil_chk(children_))->size_) {
          if ([myNode_ isNegated]) {
            currChild_ = -1;
          }
          return true;
        }
      }
      else {
        [((EduStanfordNlpTreesTregexTregexMatcher *) nil_chk(IOSObjectArray_Get(nil_chk(children_), currChild_))) resetChildIter];
        --currChild_;
        if (currChild_ < 0) {
          return [myNode_ isOptional];
        }
      }
    }
  }
  else {
    for (; currChild_ < ((IOSObjectArray *) nil_chk(children_))->size_; currChild_++) {
      if (IOSObjectArray_Get(children_, currChild_) == nil) {
        (void) IOSObjectArray_Set(children_, currChild_, [((EduStanfordNlpTreesTregexTregexPattern *) nil_chk([((id<JavaUtilList>) nil_chk(((EduStanfordNlpTreesTregexCoordinationPattern *) nil_chk(myNode_))->children_)) getWithInt:currChild_])) matcherWithEduStanfordNlpTreesTree:root_ withEduStanfordNlpTreesTree:tree_ withJavaUtilIdentityHashMap:nodesToParents_ withJavaUtilMap:namesToNodes_ withEduStanfordNlpTreesTregexVariableStrings:variableStrings_ withEduStanfordNlpTreesHeadFinder:headFinder_]);
        [((EduStanfordNlpTreesTregexTregexMatcher *) nil_chk(IOSObjectArray_Get(nil_chk(children_), currChild_))) resetChildIterWithEduStanfordNlpTreesTree:tree_];
      }
      if ([((EduStanfordNlpTreesTregexCoordinationPattern *) nil_chk(myNode_)) isNegated] != [((EduStanfordNlpTreesTregexTregexMatcher *) nil_chk(IOSObjectArray_Get(nil_chk(children_), currChild_))) matches]) {
        if ([myNode_ isNegated]) {
          currChild_ = ((IOSObjectArray *) nil_chk(children_))->size_;
        }
        return true;
      }
    }
    if ([((EduStanfordNlpTreesTregexCoordinationPattern *) nil_chk(myNode_)) isNegated]) {
      currChild_ = ((IOSObjectArray *) nil_chk(children_))->size_;
    }
    for (jint resetChild = 0; resetChild < currChild_; ++resetChild) {
      if (IOSObjectArray_Get(nil_chk(children_), resetChild) != nil) {
        [((EduStanfordNlpTreesTregexTregexMatcher *) nil_chk(IOSObjectArray_Get(children_, resetChild))) resetChildIter];
      }
    }
    return [myNode_ isOptional];
  }
}

- (EduStanfordNlpTreesTree *)getMatch {
  if (!((EduStanfordNlpTreesTregexCoordinationPattern *) nil_chk(myNode_))->isConj_ && ![myNode_ isNegated]) {
    if (currChild_ >= ((IOSObjectArray *) nil_chk(children_))->size_ || currChild_ < 0 || IOSObjectArray_Get(children_, currChild_) == nil) {
      return nil;
    }
    else {
      return [((EduStanfordNlpTreesTregexTregexMatcher *) nil_chk(IOSObjectArray_Get(children_, currChild_))) getMatch];
    }
  }
  else {
    @throw new_JavaLangUnsupportedOperationException_init();
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpTreesTregexCoordinationPattern:withEduStanfordNlpTreesTree:withEduStanfordNlpTreesTree:withJavaUtilIdentityHashMap:withJavaUtilMap:withEduStanfordNlpTreesTregexVariableStrings:withEduStanfordNlpTreesHeadFinder:);
  methods[1].selector = @selector(resetChildIter);
  methods[2].selector = @selector(resetChildIterWithEduStanfordNlpTreesTree:);
  methods[3].selector = @selector(matches);
  methods[4].selector = @selector(getMatch);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "children_", "[LEduStanfordNlpTreesTregexTregexMatcher;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "myNode_", "LEduStanfordNlpTreesTregexCoordinationPattern;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "currChild_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "considerAll_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpTreesTregexCoordinationPattern;LEduStanfordNlpTreesTree;LEduStanfordNlpTreesTree;LJavaUtilIdentityHashMap;LJavaUtilMap;LEduStanfordNlpTreesTregexVariableStrings;LEduStanfordNlpTreesHeadFinder;", "(Ledu/stanford/nlp/trees/tregex/CoordinationPattern;Ledu/stanford/nlp/trees/Tree;Ledu/stanford/nlp/trees/Tree;Ljava/util/IdentityHashMap<Ledu/stanford/nlp/trees/Tree;Ledu/stanford/nlp/trees/Tree;>;Ljava/util/Map<Ljava/lang/String;Ledu/stanford/nlp/trees/Tree;>;Ledu/stanford/nlp/trees/tregex/VariableStrings;Ledu/stanford/nlp/trees/HeadFinder;)V", "resetChildIter", "LEduStanfordNlpTreesTree;", "LEduStanfordNlpTreesTregexCoordinationPattern;" };
  static const J2ObjcClassInfo _EduStanfordNlpTreesTregexCoordinationPattern_CoordinationMatcher = { "CoordinationMatcher", "edu.stanford.nlp.trees.tregex", ptrTable, methods, fields, 7, 0xa, 5, 4, 4, -1, -1, -1, -1 };
  return &_EduStanfordNlpTreesTregexCoordinationPattern_CoordinationMatcher;
}

@end

void EduStanfordNlpTreesTregexCoordinationPattern_CoordinationMatcher_initWithEduStanfordNlpTreesTregexCoordinationPattern_withEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_withJavaUtilIdentityHashMap_withJavaUtilMap_withEduStanfordNlpTreesTregexVariableStrings_withEduStanfordNlpTreesHeadFinder_(EduStanfordNlpTreesTregexCoordinationPattern_CoordinationMatcher *self, EduStanfordNlpTreesTregexCoordinationPattern *n, EduStanfordNlpTreesTree *root, EduStanfordNlpTreesTree *tree, JavaUtilIdentityHashMap *nodesToParents, id<JavaUtilMap> namesToNodes, EduStanfordNlpTreesTregexVariableStrings *variableStrings, id<EduStanfordNlpTreesHeadFinder> headFinder) {
  EduStanfordNlpTreesTregexTregexMatcher_initWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_withJavaUtilIdentityHashMap_withJavaUtilMap_withEduStanfordNlpTreesTregexVariableStrings_withEduStanfordNlpTreesHeadFinder_(self, root, tree, nodesToParents, namesToNodes, variableStrings, headFinder);
  self->myNode_ = n;
  self->children_ = [IOSObjectArray newArrayWithLength:[((id<JavaUtilList>) nil_chk(((EduStanfordNlpTreesTregexCoordinationPattern *) nil_chk(self->myNode_))->children_)) size] type:EduStanfordNlpTreesTregexTregexMatcher_class_()];
  self->currChild_ = 0;
  self->considerAll_ = (self->myNode_->isConj_ ^ [self->myNode_ isNegated]);
}

EduStanfordNlpTreesTregexCoordinationPattern_CoordinationMatcher *new_EduStanfordNlpTreesTregexCoordinationPattern_CoordinationMatcher_initWithEduStanfordNlpTreesTregexCoordinationPattern_withEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_withJavaUtilIdentityHashMap_withJavaUtilMap_withEduStanfordNlpTreesTregexVariableStrings_withEduStanfordNlpTreesHeadFinder_(EduStanfordNlpTreesTregexCoordinationPattern *n, EduStanfordNlpTreesTree *root, EduStanfordNlpTreesTree *tree, JavaUtilIdentityHashMap *nodesToParents, id<JavaUtilMap> namesToNodes, EduStanfordNlpTreesTregexVariableStrings *variableStrings, id<EduStanfordNlpTreesHeadFinder> headFinder) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesTregexCoordinationPattern_CoordinationMatcher, initWithEduStanfordNlpTreesTregexCoordinationPattern_withEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_withJavaUtilIdentityHashMap_withJavaUtilMap_withEduStanfordNlpTreesTregexVariableStrings_withEduStanfordNlpTreesHeadFinder_, n, root, tree, nodesToParents, namesToNodes, variableStrings, headFinder)
}

EduStanfordNlpTreesTregexCoordinationPattern_CoordinationMatcher *create_EduStanfordNlpTreesTregexCoordinationPattern_CoordinationMatcher_initWithEduStanfordNlpTreesTregexCoordinationPattern_withEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_withJavaUtilIdentityHashMap_withJavaUtilMap_withEduStanfordNlpTreesTregexVariableStrings_withEduStanfordNlpTreesHeadFinder_(EduStanfordNlpTreesTregexCoordinationPattern *n, EduStanfordNlpTreesTree *root, EduStanfordNlpTreesTree *tree, JavaUtilIdentityHashMap *nodesToParents, id<JavaUtilMap> namesToNodes, EduStanfordNlpTreesTregexVariableStrings *variableStrings, id<EduStanfordNlpTreesHeadFinder> headFinder) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesTregexCoordinationPattern_CoordinationMatcher, initWithEduStanfordNlpTreesTregexCoordinationPattern_withEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_withJavaUtilIdentityHashMap_withJavaUtilMap_withEduStanfordNlpTreesTregexVariableStrings_withEduStanfordNlpTreesHeadFinder_, n, root, tree, nodesToParents, namesToNodes, variableStrings, headFinder)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTreesTregexCoordinationPattern_CoordinationMatcher)
