//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/trees/tregex/TregexMatcher.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/trees/HasParent.h"
#include "edu/stanford/nlp/trees/HeadFinder.h"
#include "edu/stanford/nlp/trees/Tree.h"
#include "edu/stanford/nlp/trees/tregex/TregexMatcher.h"
#include "edu/stanford/nlp/trees/tregex/VariableStrings.h"
#include "java/lang/AssertionError.h"
#include "java/util/IdentityHashMap.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

@interface EduStanfordNlpTreesTregexTregexMatcher ()

- (void)fillNodesToParentsWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)node
                          withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)parent;

@end

__attribute__((unused)) static void EduStanfordNlpTreesTregexTregexMatcher_fillNodesToParentsWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_(EduStanfordNlpTreesTregexTregexMatcher *self, EduStanfordNlpTreesTree *node, EduStanfordNlpTreesTree *parent);

@implementation EduStanfordNlpTreesTregexTregexMatcher

- (instancetype)initWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)root
                    withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)tree
                    withJavaUtilIdentityHashMap:(JavaUtilIdentityHashMap *)nodesToParents
                                withJavaUtilMap:(id<JavaUtilMap>)namesToNodes
   withEduStanfordNlpTreesTregexVariableStrings:(EduStanfordNlpTreesTregexVariableStrings *)variableStrings
              withEduStanfordNlpTreesHeadFinder:(id<EduStanfordNlpTreesHeadFinder>)headFinder {
  EduStanfordNlpTreesTregexTregexMatcher_initWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_withJavaUtilIdentityHashMap_withJavaUtilMap_withEduStanfordNlpTreesTregexVariableStrings_withEduStanfordNlpTreesHeadFinder_(self, root, tree, nodesToParents, namesToNodes, variableStrings, headFinder);
  return self;
}

- (id<EduStanfordNlpTreesHeadFinder>)getHeadFinder {
  return self->headFinder_;
}

- (void)reset {
  findIterator_ = nil;
  findCurrent_ = nil;
  [((id<JavaUtilMap>) nil_chk(namesToNodes_)) clear];
  [((EduStanfordNlpTreesTregexVariableStrings *) nil_chk(variableStrings_)) reset];
}

- (void)resetChildIterWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)tree {
  self->tree_ = tree;
  [self resetChildIter];
}

- (void)resetChildIter {
}

- (jboolean)matches {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)matchesAtWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)node {
  [self resetChildIterWithEduStanfordNlpTreesTree:node];
  return [self matches];
}

- (EduStanfordNlpTreesTree *)getMatch {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)find {
  if (findIterator_ == nil) {
    findIterator_ = [((EduStanfordNlpTreesTree *) nil_chk(root_)) iterator];
  }
  if (findCurrent_ != nil && [self matches]) {
    return true;
  }
  while ([((id<JavaUtilIterator>) nil_chk(findIterator_)) hasNext]) {
    findCurrent_ = [((id<JavaUtilIterator>) nil_chk(findIterator_)) next];
    [self resetChildIterWithEduStanfordNlpTreesTree:findCurrent_];
    if ([self matches]) {
      return true;
    }
  }
  return false;
}

- (jboolean)findAtWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)node {
  if (findCurrent_ != nil && findCurrent_ != node) {
    @throw new_JavaLangAssertionError_initWithId_(@"Error: must call reset() before changing nodes for a call to findAt");
  }
  if (findCurrent_ != nil) {
    return [self matches];
  }
  findCurrent_ = node;
  [self resetChildIterWithEduStanfordNlpTreesTree:findCurrent_];
  return [self matches];
}

- (jboolean)findNextMatchingNode {
  EduStanfordNlpTreesTree *lastMatchingNode = [self getMatch];
  while ([self find]) {
    if ([self getMatch] != lastMatchingNode) return true;
  }
  return false;
}

- (EduStanfordNlpTreesTree *)getNodeWithNSString:(NSString *)name {
  return [((id<JavaUtilMap>) nil_chk(namesToNodes_)) getWithId:name];
}

- (id<JavaUtilSet>)getNodeNames {
  return [((id<JavaUtilMap>) nil_chk(namesToNodes_)) keySet];
}

- (EduStanfordNlpTreesTree *)getParentWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)node {
  if ([EduStanfordNlpTreesHasParent_class_() isInstance:node]) {
    return [((EduStanfordNlpTreesTree *) nil_chk(node)) parent];
  }
  if (nodesToParents_ == nil) {
    nodesToParents_ = new_JavaUtilIdentityHashMap_init();
  }
  if ([nodesToParents_ size] == 0) {
    EduStanfordNlpTreesTregexTregexMatcher_fillNodesToParentsWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_(self, root_, nil);
  }
  return [((JavaUtilIdentityHashMap *) nil_chk(nodesToParents_)) getWithId:node];
}

- (void)fillNodesToParentsWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)node
                          withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)parent {
  EduStanfordNlpTreesTregexTregexMatcher_fillNodesToParentsWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_(self, node, parent);
}

- (EduStanfordNlpTreesTree *)getRoot {
  return root_;
}

- (NSString *)getVariableStringWithNSString:(NSString *)var {
  return [((EduStanfordNlpTreesTregexVariableStrings *) nil_chk(variableStrings_)) getStringWithNSString:var];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesHeadFinder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 3, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 5, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 8, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x0, 9, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 10, 11, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 12, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpTreesTree:withEduStanfordNlpTreesTree:withJavaUtilIdentityHashMap:withJavaUtilMap:withEduStanfordNlpTreesTregexVariableStrings:withEduStanfordNlpTreesHeadFinder:);
  methods[1].selector = @selector(getHeadFinder);
  methods[2].selector = @selector(reset);
  methods[3].selector = @selector(resetChildIterWithEduStanfordNlpTreesTree:);
  methods[4].selector = @selector(resetChildIter);
  methods[5].selector = @selector(matches);
  methods[6].selector = @selector(matchesAtWithEduStanfordNlpTreesTree:);
  methods[7].selector = @selector(getMatch);
  methods[8].selector = @selector(find);
  methods[9].selector = @selector(findAtWithEduStanfordNlpTreesTree:);
  methods[10].selector = @selector(findNextMatchingNode);
  methods[11].selector = @selector(getNodeWithNSString:);
  methods[12].selector = @selector(getNodeNames);
  methods[13].selector = @selector(getParentWithEduStanfordNlpTreesTree:);
  methods[14].selector = @selector(fillNodesToParentsWithEduStanfordNlpTreesTree:withEduStanfordNlpTreesTree:);
  methods[15].selector = @selector(getRoot);
  methods[16].selector = @selector(getVariableStringWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "root_", "LEduStanfordNlpTreesTree;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "tree_", "LEduStanfordNlpTreesTree;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "nodesToParents_", "LJavaUtilIdentityHashMap;", .constantValue.asLong = 0, 0x0, -1, -1, 13, -1 },
    { "namesToNodes_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x10, -1, -1, 14, -1 },
    { "variableStrings_", "LEduStanfordNlpTreesTregexVariableStrings;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "findIterator_", "LJavaUtilIterator;", .constantValue.asLong = 0, 0x0, -1, -1, 15, -1 },
    { "findCurrent_", "LEduStanfordNlpTreesTree;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "headFinder_", "LEduStanfordNlpTreesHeadFinder;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpTreesTree;LEduStanfordNlpTreesTree;LJavaUtilIdentityHashMap;LJavaUtilMap;LEduStanfordNlpTreesTregexVariableStrings;LEduStanfordNlpTreesHeadFinder;", "(Ledu/stanford/nlp/trees/Tree;Ledu/stanford/nlp/trees/Tree;Ljava/util/IdentityHashMap<Ledu/stanford/nlp/trees/Tree;Ledu/stanford/nlp/trees/Tree;>;Ljava/util/Map<Ljava/lang/String;Ledu/stanford/nlp/trees/Tree;>;Ledu/stanford/nlp/trees/tregex/VariableStrings;Ledu/stanford/nlp/trees/HeadFinder;)V", "resetChildIter", "LEduStanfordNlpTreesTree;", "matchesAt", "findAt", "getNode", "LNSString;", "()Ljava/util/Set<Ljava/lang/String;>;", "getParent", "fillNodesToParents", "LEduStanfordNlpTreesTree;LEduStanfordNlpTreesTree;", "getVariableString", "Ljava/util/IdentityHashMap<Ledu/stanford/nlp/trees/Tree;Ledu/stanford/nlp/trees/Tree;>;", "Ljava/util/Map<Ljava/lang/String;Ledu/stanford/nlp/trees/Tree;>;", "Ljava/util/Iterator<Ledu/stanford/nlp/trees/Tree;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpTreesTregexTregexMatcher = { "TregexMatcher", "edu.stanford.nlp.trees.tregex", ptrTable, methods, fields, 7, 0x401, 17, 8, -1, -1, -1, -1, -1 };
  return &_EduStanfordNlpTreesTregexTregexMatcher;
}

@end

void EduStanfordNlpTreesTregexTregexMatcher_initWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_withJavaUtilIdentityHashMap_withJavaUtilMap_withEduStanfordNlpTreesTregexVariableStrings_withEduStanfordNlpTreesHeadFinder_(EduStanfordNlpTreesTregexTregexMatcher *self, EduStanfordNlpTreesTree *root, EduStanfordNlpTreesTree *tree, JavaUtilIdentityHashMap *nodesToParents, id<JavaUtilMap> namesToNodes, EduStanfordNlpTreesTregexVariableStrings *variableStrings, id<EduStanfordNlpTreesHeadFinder> headFinder) {
  NSObject_init(self);
  self->root_ = root;
  self->tree_ = tree;
  self->nodesToParents_ = nodesToParents;
  self->namesToNodes_ = namesToNodes;
  self->variableStrings_ = variableStrings;
  self->headFinder_ = headFinder;
}

void EduStanfordNlpTreesTregexTregexMatcher_fillNodesToParentsWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_(EduStanfordNlpTreesTregexTregexMatcher *self, EduStanfordNlpTreesTree *node, EduStanfordNlpTreesTree *parent) {
  (void) [((JavaUtilIdentityHashMap *) nil_chk(self->nodesToParents_)) putWithId:node withId:parent];
  {
    IOSObjectArray *a__ = [((EduStanfordNlpTreesTree *) nil_chk(node)) children];
    EduStanfordNlpTreesTree * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      EduStanfordNlpTreesTree *child = *b__++;
      EduStanfordNlpTreesTregexTregexMatcher_fillNodesToParentsWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_(self, child, node);
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTreesTregexTregexMatcher)
