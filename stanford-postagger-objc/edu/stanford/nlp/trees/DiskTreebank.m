//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/trees/DiskTreebank.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/io/IOUtils.h"
#include "edu/stanford/nlp/ling/HasIndex.h"
#include "edu/stanford/nlp/ling/Label.h"
#include "edu/stanford/nlp/trees/DiskTreebank.h"
#include "edu/stanford/nlp/trees/LabeledScoredTreeReaderFactory.h"
#include "edu/stanford/nlp/trees/Tree.h"
#include "edu/stanford/nlp/trees/TreeReader.h"
#include "edu/stanford/nlp/trees/TreeReaderFactory.h"
#include "edu/stanford/nlp/trees/TreeVisitor.h"
#include "edu/stanford/nlp/trees/Treebank.h"
#include "java/io/BufferedReader.h"
#include "java/io/File.h"
#include "java/io/FileFilter.h"
#include "java/io/FileNotFoundException.h"
#include "java/io/IOException.h"
#include "java/io/PrintStream.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collections.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/NoSuchElementException.h"
#include "java/util/function/Consumer.h"

@interface EduStanfordNlpTreesDiskTreebank () {
 @public
  id<JavaUtilList> filePaths_;
  id<JavaUtilList> fileFilters_;
  NSString *currentFilename_;
}

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpTreesDiskTreebank, filePaths_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(EduStanfordNlpTreesDiskTreebank, fileFilters_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(EduStanfordNlpTreesDiskTreebank, currentFilename_, NSString *)

inline jboolean EduStanfordNlpTreesDiskTreebank_get_PRINT_FILENAMES();
inline jboolean EduStanfordNlpTreesDiskTreebank_set_PRINT_FILENAMES(jboolean value);
inline jboolean *EduStanfordNlpTreesDiskTreebank_getRef_PRINT_FILENAMES();
static jboolean EduStanfordNlpTreesDiskTreebank_PRINT_FILENAMES = false;
J2OBJC_STATIC_FIELD_PRIMITIVE(EduStanfordNlpTreesDiskTreebank, PRINT_FILENAMES, jboolean)

@interface EduStanfordNlpTreesDiskTreebank_DiskTreebankIterator : NSObject < JavaUtilIterator > {
 @public
  EduStanfordNlpTreesDiskTreebank *this$0_;
  id<EduStanfordNlpTreesTreeReader> tr_;
  EduStanfordNlpTreesTree *storedTree_;
  id<JavaUtilList> localPathList_;
  id<JavaUtilList> localFilterList_;
  jint fileListPtr_;
  JavaIoFile *currentFile_;
  jint curLineId_;
  id<JavaUtilList> curFileList_;
  id<JavaUtilIterator> curPathIter_;
}

- (instancetype)initWithEduStanfordNlpTreesDiskTreebank:(EduStanfordNlpTreesDiskTreebank *)outer$;

- (jboolean)primeNextPath;

- (jboolean)primeNextFile;

- (EduStanfordNlpTreesTree *)primeNextTree;

- (jboolean)hasNext;

- (EduStanfordNlpTreesTree *)next;

- (void)remove;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpTreesDiskTreebank_DiskTreebankIterator)

J2OBJC_FIELD_SETTER(EduStanfordNlpTreesDiskTreebank_DiskTreebankIterator, this$0_, EduStanfordNlpTreesDiskTreebank *)
J2OBJC_FIELD_SETTER(EduStanfordNlpTreesDiskTreebank_DiskTreebankIterator, tr_, id<EduStanfordNlpTreesTreeReader>)
J2OBJC_FIELD_SETTER(EduStanfordNlpTreesDiskTreebank_DiskTreebankIterator, storedTree_, EduStanfordNlpTreesTree *)
J2OBJC_FIELD_SETTER(EduStanfordNlpTreesDiskTreebank_DiskTreebankIterator, localPathList_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(EduStanfordNlpTreesDiskTreebank_DiskTreebankIterator, localFilterList_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(EduStanfordNlpTreesDiskTreebank_DiskTreebankIterator, currentFile_, JavaIoFile *)
J2OBJC_FIELD_SETTER(EduStanfordNlpTreesDiskTreebank_DiskTreebankIterator, curFileList_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(EduStanfordNlpTreesDiskTreebank_DiskTreebankIterator, curPathIter_, id<JavaUtilIterator>)

__attribute__((unused)) static void EduStanfordNlpTreesDiskTreebank_DiskTreebankIterator_initWithEduStanfordNlpTreesDiskTreebank_(EduStanfordNlpTreesDiskTreebank_DiskTreebankIterator *self, EduStanfordNlpTreesDiskTreebank *outer$);

__attribute__((unused)) static EduStanfordNlpTreesDiskTreebank_DiskTreebankIterator *new_EduStanfordNlpTreesDiskTreebank_DiskTreebankIterator_initWithEduStanfordNlpTreesDiskTreebank_(EduStanfordNlpTreesDiskTreebank *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpTreesDiskTreebank_DiskTreebankIterator *create_EduStanfordNlpTreesDiskTreebank_DiskTreebankIterator_initWithEduStanfordNlpTreesDiskTreebank_(EduStanfordNlpTreesDiskTreebank *outer$);

__attribute__((unused)) static jboolean EduStanfordNlpTreesDiskTreebank_DiskTreebankIterator_primeNextPath(EduStanfordNlpTreesDiskTreebank_DiskTreebankIterator *self);

__attribute__((unused)) static jboolean EduStanfordNlpTreesDiskTreebank_DiskTreebankIterator_primeNextFile(EduStanfordNlpTreesDiskTreebank_DiskTreebankIterator *self);

__attribute__((unused)) static EduStanfordNlpTreesTree *EduStanfordNlpTreesDiskTreebank_DiskTreebankIterator_primeNextTree(EduStanfordNlpTreesDiskTreebank_DiskTreebankIterator *self);

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpTreesDiskTreebank_DiskTreebankIterator)

@implementation EduStanfordNlpTreesDiskTreebank

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpTreesDiskTreebank_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithNSString:(NSString *)encoding {
  EduStanfordNlpTreesDiskTreebank_initWithNSString_(self, encoding);
  return self;
}

- (instancetype)initWithEduStanfordNlpTreesTreeReaderFactory:(id<EduStanfordNlpTreesTreeReaderFactory>)trf {
  EduStanfordNlpTreesDiskTreebank_initWithEduStanfordNlpTreesTreeReaderFactory_(self, trf);
  return self;
}

- (instancetype)initWithEduStanfordNlpTreesTreeReaderFactory:(id<EduStanfordNlpTreesTreeReaderFactory>)trf
                                                withNSString:(NSString *)encoding {
  EduStanfordNlpTreesDiskTreebank_initWithEduStanfordNlpTreesTreeReaderFactory_withNSString_(self, trf, encoding);
  return self;
}

- (instancetype)initWithInt:(jint)initialCapacity {
  EduStanfordNlpTreesDiskTreebank_initWithInt_(self, initialCapacity);
  return self;
}

- (instancetype)initWithInt:(jint)initialCapacity
withEduStanfordNlpTreesTreeReaderFactory:(id<EduStanfordNlpTreesTreeReaderFactory>)trf {
  EduStanfordNlpTreesDiskTreebank_initWithInt_withEduStanfordNlpTreesTreeReaderFactory_(self, initialCapacity, trf);
  return self;
}

- (void)clear {
  [((id<JavaUtilList>) nil_chk(filePaths_)) clear];
  [((id<JavaUtilList>) nil_chk(fileFilters_)) clear];
}

- (void)loadPathWithJavaIoFile:(JavaIoFile *)path
          withJavaIoFileFilter:(id<JavaIoFileFilter>)filt {
  if ([((JavaIoFile *) nil_chk(path)) exists]) {
    [((id<JavaUtilList>) nil_chk(filePaths_)) addWithId:path];
    [((id<JavaUtilList>) nil_chk(fileFilters_)) addWithId:filt];
  }
  else {
    (void) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printfWithNSString:@"%s: File/path %s does not exist. Skipping.%n" withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ [[self getClass] getName], [path getPath] } count:2 type:NSObject_class_()]];
  }
}

- (void)applyWithEduStanfordNlpTreesTreeVisitor:(id<EduStanfordNlpTreesTreeVisitor>)tp {
  for (EduStanfordNlpTreesTree * __strong t in self) {
    [((id<EduStanfordNlpTreesTreeVisitor>) nil_chk(tp)) visitTreeWithEduStanfordNlpTreesTree:t];
  }
}

- (NSString *)getCurrentFilename {
  return currentFilename_;
}

- (id<JavaUtilList>)getCurrentPaths {
  return JavaUtilCollections_unmodifiableListWithJavaUtilList_(filePaths_);
}

- (void)printFileNames {
  EduStanfordNlpTreesDiskTreebank_PRINT_FILENAMES = true;
}

- (id<JavaUtilIterator>)iterator {
  return new_EduStanfordNlpTreesDiskTreebank_DiskTreebankIterator_initWithEduStanfordNlpTreesDiskTreebank_(self);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 9, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 10, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithNSString:);
  methods[2].selector = @selector(initWithEduStanfordNlpTreesTreeReaderFactory:);
  methods[3].selector = @selector(initWithEduStanfordNlpTreesTreeReaderFactory:withNSString:);
  methods[4].selector = @selector(initWithInt:);
  methods[5].selector = @selector(initWithInt:withEduStanfordNlpTreesTreeReaderFactory:);
  methods[6].selector = @selector(clear);
  methods[7].selector = @selector(loadPathWithJavaIoFile:withJavaIoFileFilter:);
  methods[8].selector = @selector(applyWithEduStanfordNlpTreesTreeVisitor:);
  methods[9].selector = @selector(getCurrentFilename);
  methods[10].selector = @selector(getCurrentPaths);
  methods[11].selector = @selector(printFileNames);
  methods[12].selector = @selector(iterator);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PRINT_FILENAMES", "Z", .constantValue.asLong = 0, 0xa, -1, 11, -1, -1 },
    { "filePaths_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 12, -1 },
    { "fileFilters_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 13, -1 },
    { "currentFilename_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "LEduStanfordNlpTreesTreeReaderFactory;", "LEduStanfordNlpTreesTreeReaderFactory;LNSString;", "I", "ILEduStanfordNlpTreesTreeReaderFactory;", "loadPath", "LJavaIoFile;LJavaIoFileFilter;", "apply", "LEduStanfordNlpTreesTreeVisitor;", "()Ljava/util/List<Ljava/io/File;>;", "()Ljava/util/Iterator<Ledu/stanford/nlp/trees/Tree;>;", &EduStanfordNlpTreesDiskTreebank_PRINT_FILENAMES, "Ljava/util/List<Ljava/io/File;>;", "Ljava/util/List<Ljava/io/FileFilter;>;", "LEduStanfordNlpTreesDiskTreebank_DiskTreebankIterator;" };
  static const J2ObjcClassInfo _EduStanfordNlpTreesDiskTreebank = { "DiskTreebank", "edu.stanford.nlp.trees", ptrTable, methods, fields, 7, 0x11, 13, 4, -1, 14, -1, -1, -1 };
  return &_EduStanfordNlpTreesDiskTreebank;
}

@end

void EduStanfordNlpTreesDiskTreebank_init(EduStanfordNlpTreesDiskTreebank *self) {
  EduStanfordNlpTreesDiskTreebank_initWithEduStanfordNlpTreesTreeReaderFactory_(self, new_EduStanfordNlpTreesLabeledScoredTreeReaderFactory_init());
}

EduStanfordNlpTreesDiskTreebank *new_EduStanfordNlpTreesDiskTreebank_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesDiskTreebank, init)
}

EduStanfordNlpTreesDiskTreebank *create_EduStanfordNlpTreesDiskTreebank_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesDiskTreebank, init)
}

void EduStanfordNlpTreesDiskTreebank_initWithNSString_(EduStanfordNlpTreesDiskTreebank *self, NSString *encoding) {
  EduStanfordNlpTreesDiskTreebank_initWithEduStanfordNlpTreesTreeReaderFactory_withNSString_(self, new_EduStanfordNlpTreesLabeledScoredTreeReaderFactory_init(), encoding);
}

EduStanfordNlpTreesDiskTreebank *new_EduStanfordNlpTreesDiskTreebank_initWithNSString_(NSString *encoding) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesDiskTreebank, initWithNSString_, encoding)
}

EduStanfordNlpTreesDiskTreebank *create_EduStanfordNlpTreesDiskTreebank_initWithNSString_(NSString *encoding) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesDiskTreebank, initWithNSString_, encoding)
}

void EduStanfordNlpTreesDiskTreebank_initWithEduStanfordNlpTreesTreeReaderFactory_(EduStanfordNlpTreesDiskTreebank *self, id<EduStanfordNlpTreesTreeReaderFactory> trf) {
  EduStanfordNlpTreesTreebank_initWithEduStanfordNlpTreesTreeReaderFactory_(self, trf);
  self->filePaths_ = new_JavaUtilArrayList_init();
  self->fileFilters_ = new_JavaUtilArrayList_init();
}

EduStanfordNlpTreesDiskTreebank *new_EduStanfordNlpTreesDiskTreebank_initWithEduStanfordNlpTreesTreeReaderFactory_(id<EduStanfordNlpTreesTreeReaderFactory> trf) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesDiskTreebank, initWithEduStanfordNlpTreesTreeReaderFactory_, trf)
}

EduStanfordNlpTreesDiskTreebank *create_EduStanfordNlpTreesDiskTreebank_initWithEduStanfordNlpTreesTreeReaderFactory_(id<EduStanfordNlpTreesTreeReaderFactory> trf) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesDiskTreebank, initWithEduStanfordNlpTreesTreeReaderFactory_, trf)
}

void EduStanfordNlpTreesDiskTreebank_initWithEduStanfordNlpTreesTreeReaderFactory_withNSString_(EduStanfordNlpTreesDiskTreebank *self, id<EduStanfordNlpTreesTreeReaderFactory> trf, NSString *encoding) {
  EduStanfordNlpTreesTreebank_initWithEduStanfordNlpTreesTreeReaderFactory_withNSString_(self, trf, encoding);
  self->filePaths_ = new_JavaUtilArrayList_init();
  self->fileFilters_ = new_JavaUtilArrayList_init();
}

EduStanfordNlpTreesDiskTreebank *new_EduStanfordNlpTreesDiskTreebank_initWithEduStanfordNlpTreesTreeReaderFactory_withNSString_(id<EduStanfordNlpTreesTreeReaderFactory> trf, NSString *encoding) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesDiskTreebank, initWithEduStanfordNlpTreesTreeReaderFactory_withNSString_, trf, encoding)
}

EduStanfordNlpTreesDiskTreebank *create_EduStanfordNlpTreesDiskTreebank_initWithEduStanfordNlpTreesTreeReaderFactory_withNSString_(id<EduStanfordNlpTreesTreeReaderFactory> trf, NSString *encoding) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesDiskTreebank, initWithEduStanfordNlpTreesTreeReaderFactory_withNSString_, trf, encoding)
}

void EduStanfordNlpTreesDiskTreebank_initWithInt_(EduStanfordNlpTreesDiskTreebank *self, jint initialCapacity) {
  EduStanfordNlpTreesDiskTreebank_initWithInt_withEduStanfordNlpTreesTreeReaderFactory_(self, initialCapacity, new_EduStanfordNlpTreesLabeledScoredTreeReaderFactory_init());
}

EduStanfordNlpTreesDiskTreebank *new_EduStanfordNlpTreesDiskTreebank_initWithInt_(jint initialCapacity) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesDiskTreebank, initWithInt_, initialCapacity)
}

EduStanfordNlpTreesDiskTreebank *create_EduStanfordNlpTreesDiskTreebank_initWithInt_(jint initialCapacity) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesDiskTreebank, initWithInt_, initialCapacity)
}

void EduStanfordNlpTreesDiskTreebank_initWithInt_withEduStanfordNlpTreesTreeReaderFactory_(EduStanfordNlpTreesDiskTreebank *self, jint initialCapacity, id<EduStanfordNlpTreesTreeReaderFactory> trf) {
  EduStanfordNlpTreesDiskTreebank_initWithEduStanfordNlpTreesTreeReaderFactory_(self, trf);
}

EduStanfordNlpTreesDiskTreebank *new_EduStanfordNlpTreesDiskTreebank_initWithInt_withEduStanfordNlpTreesTreeReaderFactory_(jint initialCapacity, id<EduStanfordNlpTreesTreeReaderFactory> trf) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesDiskTreebank, initWithInt_withEduStanfordNlpTreesTreeReaderFactory_, initialCapacity, trf)
}

EduStanfordNlpTreesDiskTreebank *create_EduStanfordNlpTreesDiskTreebank_initWithInt_withEduStanfordNlpTreesTreeReaderFactory_(jint initialCapacity, id<EduStanfordNlpTreesTreeReaderFactory> trf) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesDiskTreebank, initWithInt_withEduStanfordNlpTreesTreeReaderFactory_, initialCapacity, trf)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTreesDiskTreebank)

@implementation EduStanfordNlpTreesDiskTreebank_DiskTreebankIterator

- (instancetype)initWithEduStanfordNlpTreesDiskTreebank:(EduStanfordNlpTreesDiskTreebank *)outer$ {
  EduStanfordNlpTreesDiskTreebank_DiskTreebankIterator_initWithEduStanfordNlpTreesDiskTreebank_(self, outer$);
  return self;
}

- (jboolean)primeNextPath {
  return EduStanfordNlpTreesDiskTreebank_DiskTreebankIterator_primeNextPath(self);
}

- (jboolean)primeNextFile {
  return EduStanfordNlpTreesDiskTreebank_DiskTreebankIterator_primeNextFile(self);
}

- (EduStanfordNlpTreesTree *)primeNextTree {
  return EduStanfordNlpTreesDiskTreebank_DiskTreebankIterator_primeNextTree(self);
}

- (jboolean)hasNext {
  return storedTree_ != nil;
}

- (EduStanfordNlpTreesTree *)next {
  if (storedTree_ == nil) @throw new_JavaUtilNoSuchElementException_init();
  EduStanfordNlpTreesTree *ret = storedTree_;
  storedTree_ = EduStanfordNlpTreesDiskTreebank_DiskTreebankIterator_primeNextTree(self);
  return ret;
}

- (void)remove {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaUtilIterator_forEachRemainingWithJavaUtilFunctionConsumer_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpTreesDiskTreebank:);
  methods[1].selector = @selector(primeNextPath);
  methods[2].selector = @selector(primeNextFile);
  methods[3].selector = @selector(primeNextTree);
  methods[4].selector = @selector(hasNext);
  methods[5].selector = @selector(next);
  methods[6].selector = @selector(remove);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LEduStanfordNlpTreesDiskTreebank;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "tr_", "LEduStanfordNlpTreesTreeReader;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "storedTree_", "LEduStanfordNlpTreesTree;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "localPathList_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 1, -1 },
    { "localFilterList_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 2, -1 },
    { "fileListPtr_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "currentFile_", "LJavaIoFile;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "curLineId_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "curFileList_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
    { "curPathIter_", "LJavaUtilIterator;", .constantValue.asLong = 0, 0x2, -1, -1, 3, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpTreesDiskTreebank;", "Ljava/util/List<Ljava/io/File;>;", "Ljava/util/List<Ljava/io/FileFilter;>;", "Ljava/util/Iterator<Ljava/io/File;>;", "Ljava/lang/Object;Ljava/util/Iterator<Ledu/stanford/nlp/trees/Tree;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpTreesDiskTreebank_DiskTreebankIterator = { "DiskTreebankIterator", "edu.stanford.nlp.trees", ptrTable, methods, fields, 7, 0x2, 7, 10, 0, -1, -1, 4, -1 };
  return &_EduStanfordNlpTreesDiskTreebank_DiskTreebankIterator;
}

@end

void EduStanfordNlpTreesDiskTreebank_DiskTreebankIterator_initWithEduStanfordNlpTreesDiskTreebank_(EduStanfordNlpTreesDiskTreebank_DiskTreebankIterator *self, EduStanfordNlpTreesDiskTreebank *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
  self->tr_ = nil;
  self->storedTree_ = nil;
  self->fileListPtr_ = 0;
  self->curLineId_ = 1;
  self->localPathList_ = new_JavaUtilArrayList_initWithJavaUtilCollection_(outer$->filePaths_);
  self->localFilterList_ = new_JavaUtilArrayList_initWithJavaUtilCollection_(outer$->fileFilters_);
  if (EduStanfordNlpTreesDiskTreebank_DiskTreebankIterator_primeNextPath(self) && EduStanfordNlpTreesDiskTreebank_DiskTreebankIterator_primeNextFile(self)) self->storedTree_ = EduStanfordNlpTreesDiskTreebank_DiskTreebankIterator_primeNextTree(self);
}

EduStanfordNlpTreesDiskTreebank_DiskTreebankIterator *new_EduStanfordNlpTreesDiskTreebank_DiskTreebankIterator_initWithEduStanfordNlpTreesDiskTreebank_(EduStanfordNlpTreesDiskTreebank *outer$) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesDiskTreebank_DiskTreebankIterator, initWithEduStanfordNlpTreesDiskTreebank_, outer$)
}

EduStanfordNlpTreesDiskTreebank_DiskTreebankIterator *create_EduStanfordNlpTreesDiskTreebank_DiskTreebankIterator_initWithEduStanfordNlpTreesDiskTreebank_(EduStanfordNlpTreesDiskTreebank *outer$) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesDiskTreebank_DiskTreebankIterator, initWithEduStanfordNlpTreesDiskTreebank_, outer$)
}

jboolean EduStanfordNlpTreesDiskTreebank_DiskTreebankIterator_primeNextPath(EduStanfordNlpTreesDiskTreebank_DiskTreebankIterator *self) {
  while (self->fileListPtr_ < [((id<JavaUtilList>) nil_chk(self->localPathList_)) size] && self->fileListPtr_ < [((id<JavaUtilList>) nil_chk(self->localFilterList_)) size]) {
    JavaIoFile *nextPath = [self->localPathList_ getWithInt:self->fileListPtr_];
    id<JavaIoFileFilter> nextFilter = [((id<JavaUtilList>) nil_chk(self->localFilterList_)) getWithInt:self->fileListPtr_];
    self->fileListPtr_++;
    id<JavaUtilList> pathListing = (([((JavaIoFile *) nil_chk(nextPath)) isDirectory]) ? JavaUtilArrays_asListWithNSObjectArray_([nextPath listFilesWithJavaIoFileFilter:nextFilter]) : JavaUtilCollections_singletonListWithId_(nextPath));
    if (pathListing != nil) {
      if ([pathListing size] > 1) JavaUtilCollections_sortWithJavaUtilList_(pathListing);
      self->curFileList_ = new_JavaUtilArrayList_init();
      for (JavaIoFile * __strong path in pathListing) {
        if ([((JavaIoFile *) nil_chk(path)) isDirectory]) {
          [self->localPathList_ addWithId:path];
          [self->localFilterList_ addWithId:nextFilter];
        }
        else {
          [((id<JavaUtilList>) nil_chk(self->curFileList_)) addWithId:path];
        }
      }
      if ([self->curFileList_ size] != 0) {
        self->curPathIter_ = [((id<JavaUtilList>) nil_chk(self->curFileList_)) iterator];
        return true;
      }
    }
  }
  return false;
}

jboolean EduStanfordNlpTreesDiskTreebank_DiskTreebankIterator_primeNextFile(EduStanfordNlpTreesDiskTreebank_DiskTreebankIterator *self) {
  @try {
    if ([((id<JavaUtilIterator>) nil_chk(self->curPathIter_)) hasNext] || (EduStanfordNlpTreesDiskTreebank_DiskTreebankIterator_primeNextPath(self) && [((id<JavaUtilIterator>) nil_chk(self->curPathIter_)) hasNext])) {
      self->currentFile_ = [((id<JavaUtilIterator>) nil_chk(self->curPathIter_)) next];
      self->this$0_->currentFilename_ = [((JavaIoFile *) nil_chk(self->currentFile_)) getAbsolutePath];
      if (JreLoadStatic(EduStanfordNlpTreesDiskTreebank, PRINT_FILENAMES)) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithId:self->currentFile_];
      if (self->tr_ != nil) {
        [self->tr_ close];
      }
      self->tr_ = [((id<EduStanfordNlpTreesTreeReaderFactory>) nil_chk([self->this$0_ treeReaderFactory])) newTreeReaderWithJavaIoReader:EduStanfordNlpIoIOUtils_readerFromFileWithJavaIoFile_withNSString_(self->currentFile_, [self->this$0_ encoding])];
      self->curLineId_ = 1;
      return true;
    }
  }
  @catch (JavaIoUnsupportedEncodingException *e) {
    (void) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printfWithNSString:@"%s: Filesystem does not support encoding:%n%s%n" withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ [[self getClass] getName], [((JavaIoUnsupportedEncodingException *) nil_chk(e)) description] } count:2 type:NSObject_class_()]];
    @throw new_JavaLangRuntimeException_initWithNSException_(e);
  }
  @catch (JavaIoFileNotFoundException *e) {
    (void) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printfWithNSString:@"%s: File does not exist:%n%s%n" withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ [[self getClass] getName], [((JavaIoFileNotFoundException *) nil_chk(e)) description] } count:2 type:NSObject_class_()]];
    @throw new_JavaLangRuntimeException_initWithNSException_(e);
  }
  @catch (JavaIoIOException *e) {
    (void) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printfWithNSString:@"%s: Unable to close open tree reader:%n%s%n" withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ [[self getClass] getName], [((JavaIoFile *) nil_chk(self->currentFile_)) getPath] } count:2 type:NSObject_class_()]];
    @throw new_JavaLangRuntimeException_initWithNSException_(e);
  }
  return false;
}

EduStanfordNlpTreesTree *EduStanfordNlpTreesDiskTreebank_DiskTreebankIterator_primeNextTree(EduStanfordNlpTreesDiskTreebank_DiskTreebankIterator *self) {
  EduStanfordNlpTreesTree *t = nil;
  @try {
    t = [((id<EduStanfordNlpTreesTreeReader>) nil_chk(self->tr_)) readTree];
    if (t == nil && EduStanfordNlpTreesDiskTreebank_DiskTreebankIterator_primeNextFile(self)) t = [((id<EduStanfordNlpTreesTreeReader>) nil_chk(self->tr_)) readTree];
    if (t != nil && [t label] != nil && [EduStanfordNlpLingHasIndex_class_() isInstance:[t label]]) {
      id<EduStanfordNlpLingHasIndex> lab = (id<EduStanfordNlpLingHasIndex>) cast_check([t label], EduStanfordNlpLingHasIndex_class_());
      [((id<EduStanfordNlpLingHasIndex>) nil_chk(lab)) setSentIndexWithInt:self->curLineId_++];
      [lab setDocIDWithNSString:[((JavaIoFile *) nil_chk(self->currentFile_)) getName]];
    }
  }
  @catch (JavaIoIOException *e) {
    (void) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printfWithNSString:@"%s: Error reading from file %s:%n%s%n" withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ [[self getClass] getName], [((JavaIoFile *) nil_chk(self->currentFile_)) getPath], [((JavaIoIOException *) nil_chk(e)) description] } count:3 type:NSObject_class_()]];
    @throw new_JavaLangRuntimeException_initWithNSException_(e);
  }
  return t;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTreesDiskTreebank_DiskTreebankIterator)
