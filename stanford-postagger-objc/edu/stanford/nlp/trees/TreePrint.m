//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/trees/TreePrint.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/ling/CoreAnnotations.h"
#include "edu/stanford/nlp/ling/CoreLabel.h"
#include "edu/stanford/nlp/ling/HasIndex.h"
#include "edu/stanford/nlp/ling/IndexedWord.h"
#include "edu/stanford/nlp/ling/Label.h"
#include "edu/stanford/nlp/ling/LabelFactory.h"
#include "edu/stanford/nlp/ling/Sentence.h"
#include "edu/stanford/nlp/ling/StringLabel.h"
#include "edu/stanford/nlp/ling/StringLabelFactory.h"
#include "edu/stanford/nlp/ling/TaggedWord.h"
#include "edu/stanford/nlp/process/PTBTokenizer.h"
#include "edu/stanford/nlp/process/Tokenizer.h"
#include "edu/stanford/nlp/process/TokenizerFactory.h"
#include "edu/stanford/nlp/trees/BobChrisTreeNormalizer.h"
#include "edu/stanford/nlp/trees/CollocationFinder.h"
#include "edu/stanford/nlp/trees/Dependencies.h"
#include "edu/stanford/nlp/trees/Dependency.h"
#include "edu/stanford/nlp/trees/DiskTreebank.h"
#include "edu/stanford/nlp/trees/GrammaticalRelation.h"
#include "edu/stanford/nlp/trees/GrammaticalStructure.h"
#include "edu/stanford/nlp/trees/GrammaticalStructureFactory.h"
#include "edu/stanford/nlp/trees/HeadFinder.h"
#include "edu/stanford/nlp/trees/LabeledScoredTreeFactory.h"
#include "edu/stanford/nlp/trees/NamedDependency.h"
#include "edu/stanford/nlp/trees/PennTreeReader.h"
#include "edu/stanford/nlp/trees/PennTreebankLanguagePack.h"
#include "edu/stanford/nlp/trees/Tree.h"
#include "edu/stanford/nlp/trees/TreeFactory.h"
#include "edu/stanford/nlp/trees/TreeFunctions.h"
#include "edu/stanford/nlp/trees/TreeNormalizer.h"
#include "edu/stanford/nlp/trees/TreePrint.h"
#include "edu/stanford/nlp/trees/TreeReader.h"
#include "edu/stanford/nlp/trees/TreeReaderFactory.h"
#include "edu/stanford/nlp/trees/TreeTransformer.h"
#include "edu/stanford/nlp/trees/Treebank.h"
#include "edu/stanford/nlp/trees/TreebankLanguagePack.h"
#include "edu/stanford/nlp/trees/Trees.h"
#include "edu/stanford/nlp/trees/TypedDependency.h"
#include "edu/stanford/nlp/trees/WordNetConnection.h"
#include "edu/stanford/nlp/trees/WordStemmer.h"
#include "edu/stanford/nlp/trees/international/pennchinese/ChineseEnglishWordMap.h"
#include "edu/stanford/nlp/util/Filters.h"
#include "edu/stanford/nlp/util/Generics.h"
#include "edu/stanford/nlp/util/ScoredObject.h"
#include "edu/stanford/nlp/util/StringUtils.h"
#include "edu/stanford/nlp/util/XMLUtils.h"
#include "java/io/BufferedReader.h"
#include "java/io/InputStream.h"
#include "java/io/InputStreamReader.h"
#include "java/io/PrintStream.h"
#include "java/io/PrintWriter.h"
#include "java/io/Reader.h"
#include "java/io/StringWriter.h"
#include "java/lang/Boolean.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/Comparator.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Properties.h"
#include "java/util/Set.h"
#include "java/util/function/Function.h"
#include "java/util/function/Predicate.h"

@interface EduStanfordNlpTreesTreePrint () {
 @public
  JavaUtilProperties *formats_;
  JavaUtilProperties *options_;
  jboolean markHeadNodes_;
  jboolean lexicalize_;
  jboolean removeEmpty_;
  jboolean ptb2text_;
  jboolean transChinese_;
  jboolean basicDependencies_;
  jboolean collapsedDependencies_;
  jboolean nonCollapsedDependencies_;
  jboolean nonCollapsedDependenciesSeparated_;
  jboolean CCPropagatedDependencies_;
  jboolean treeDependencies_;
  jboolean includeTags_;
  id<EduStanfordNlpTreesHeadFinder> hf_;
  id<EduStanfordNlpTreesTreebankLanguagePack> tlp_;
  EduStanfordNlpTreesWordStemmer *stemmer_;
  id<JavaUtilFunctionPredicate> dependencyFilter_;
  id<JavaUtilFunctionPredicate> dependencyWordFilter_;
  id<EduStanfordNlpTreesGrammaticalStructureFactory> gsf_;
  JavaIoPrintWriter *pw_;
}

+ (jboolean)propertyToBooleanWithJavaUtilProperties:(JavaUtilProperties *)prop
                                       withNSString:(NSString *)key;

- (void)printTreeInternalWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
                               withJavaIoPrintWriter:(JavaIoPrintWriter *)pw
                                         withBoolean:(jboolean)inXml;

- (id<JavaUtilList>)getSortedDepsWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)tree
                               withJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)filter;

+ (EduStanfordNlpTreesTree *)getCollocationProcessedTreeWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)tree
                                                  withEduStanfordNlpTreesHeadFinder:(id<EduStanfordNlpTreesHeadFinder>)hf;

- (EduStanfordNlpTreesTree *)markHeadNodesWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
                                          withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)head;

+ (id<EduStanfordNlpLingLabel>)headMarkWithEduStanfordNlpLingLabel:(id<EduStanfordNlpLingLabel>)l;

- (IOSObjectArray *)headMarkChildrenWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
                                    withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)head;

+ (NSString *)toStringWithJavaUtilCollection:(id<JavaUtilCollection>)dependencies
                                withNSString:(NSString *)format
                                 withBoolean:(jboolean)includeTags;

+ (NSString *)toStringWithJavaUtilCollection:(id<JavaUtilCollection>)dependencies
                                 withBoolean:(jboolean)extraSep
                                 withBoolean:(jboolean)includeTags;

+ (NSString *)toReadableStringWithJavaUtilCollection:(id<JavaUtilCollection>)dependencies;

+ (NSString *)toXMLStringWithJavaUtilCollection:(id<JavaUtilCollection>)dependencies
                                    withBoolean:(jboolean)includeTags;

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpTreesTreePrint, formats_, JavaUtilProperties *)
J2OBJC_FIELD_SETTER(EduStanfordNlpTreesTreePrint, options_, JavaUtilProperties *)
J2OBJC_FIELD_SETTER(EduStanfordNlpTreesTreePrint, hf_, id<EduStanfordNlpTreesHeadFinder>)
J2OBJC_FIELD_SETTER(EduStanfordNlpTreesTreePrint, tlp_, id<EduStanfordNlpTreesTreebankLanguagePack>)
J2OBJC_FIELD_SETTER(EduStanfordNlpTreesTreePrint, stemmer_, EduStanfordNlpTreesWordStemmer *)
J2OBJC_FIELD_SETTER(EduStanfordNlpTreesTreePrint, dependencyFilter_, id<JavaUtilFunctionPredicate>)
J2OBJC_FIELD_SETTER(EduStanfordNlpTreesTreePrint, dependencyWordFilter_, id<JavaUtilFunctionPredicate>)
J2OBJC_FIELD_SETTER(EduStanfordNlpTreesTreePrint, gsf_, id<EduStanfordNlpTreesGrammaticalStructureFactory>)
J2OBJC_FIELD_SETTER(EduStanfordNlpTreesTreePrint, pw_, JavaIoPrintWriter *)

inline id<EduStanfordNlpTreesWordNetConnection> EduStanfordNlpTreesTreePrint_get_wnc();
inline id<EduStanfordNlpTreesWordNetConnection> EduStanfordNlpTreesTreePrint_set_wnc(id<EduStanfordNlpTreesWordNetConnection> value);
static id<EduStanfordNlpTreesWordNetConnection> EduStanfordNlpTreesTreePrint_wnc;
J2OBJC_STATIC_FIELD_OBJ(EduStanfordNlpTreesTreePrint, wnc, id<EduStanfordNlpTreesWordNetConnection>)

__attribute__((unused)) static jboolean EduStanfordNlpTreesTreePrint_propertyToBooleanWithJavaUtilProperties_withNSString_(JavaUtilProperties *prop, NSString *key);

__attribute__((unused)) static void EduStanfordNlpTreesTreePrint_printTreeInternalWithEduStanfordNlpTreesTree_withJavaIoPrintWriter_withBoolean_(EduStanfordNlpTreesTreePrint *self, EduStanfordNlpTreesTree *t, JavaIoPrintWriter *pw, jboolean inXml);

__attribute__((unused)) static id<JavaUtilList> EduStanfordNlpTreesTreePrint_getSortedDepsWithEduStanfordNlpTreesTree_withJavaUtilFunctionPredicate_(EduStanfordNlpTreesTreePrint *self, EduStanfordNlpTreesTree *tree, id<JavaUtilFunctionPredicate> filter);

__attribute__((unused)) static EduStanfordNlpTreesTree *EduStanfordNlpTreesTreePrint_getCollocationProcessedTreeWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesHeadFinder_(EduStanfordNlpTreesTree *tree, id<EduStanfordNlpTreesHeadFinder> hf);

__attribute__((unused)) static EduStanfordNlpTreesTree *EduStanfordNlpTreesTreePrint_markHeadNodesWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_(EduStanfordNlpTreesTreePrint *self, EduStanfordNlpTreesTree *t, EduStanfordNlpTreesTree *head);

__attribute__((unused)) static id<EduStanfordNlpLingLabel> EduStanfordNlpTreesTreePrint_headMarkWithEduStanfordNlpLingLabel_(id<EduStanfordNlpLingLabel> l);

__attribute__((unused)) static IOSObjectArray *EduStanfordNlpTreesTreePrint_headMarkChildrenWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_(EduStanfordNlpTreesTreePrint *self, EduStanfordNlpTreesTree *t, EduStanfordNlpTreesTree *head);

__attribute__((unused)) static NSString *EduStanfordNlpTreesTreePrint_toStringWithJavaUtilCollection_withNSString_withBoolean_(id<JavaUtilCollection> dependencies, NSString *format, jboolean includeTags);

__attribute__((unused)) static NSString *EduStanfordNlpTreesTreePrint_toStringWithJavaUtilCollection_withBoolean_withBoolean_(id<JavaUtilCollection> dependencies, jboolean extraSep, jboolean includeTags);

__attribute__((unused)) static NSString *EduStanfordNlpTreesTreePrint_toReadableStringWithJavaUtilCollection_(id<JavaUtilCollection> dependencies);

__attribute__((unused)) static NSString *EduStanfordNlpTreesTreePrint_toXMLStringWithJavaUtilCollection_withBoolean_(id<JavaUtilCollection> dependencies, jboolean includeTags);

@interface EduStanfordNlpTreesTreePrint_$Lambda$1 : NSObject < EduStanfordNlpTreesTreeTransformer >

- (EduStanfordNlpTreesTree *)transformTreeWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t1;

@end

J2OBJC_STATIC_INIT(EduStanfordNlpTreesTreePrint_$Lambda$1)

inline EduStanfordNlpTreesTreePrint_$Lambda$1 *EduStanfordNlpTreesTreePrint_$Lambda$1_get_instance();
static EduStanfordNlpTreesTreePrint_$Lambda$1 *EduStanfordNlpTreesTreePrint_$Lambda$1_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpTreesTreePrint_$Lambda$1, instance, EduStanfordNlpTreesTreePrint_$Lambda$1 *)

__attribute__((unused)) static void EduStanfordNlpTreesTreePrint_$Lambda$1_init(EduStanfordNlpTreesTreePrint_$Lambda$1 *self);

__attribute__((unused)) static EduStanfordNlpTreesTreePrint_$Lambda$1 *new_EduStanfordNlpTreesTreePrint_$Lambda$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpTreesTreePrint_$Lambda$1 *create_EduStanfordNlpTreesTreePrint_$Lambda$1_init();

@interface EduStanfordNlpTreesTreePrint_$Lambda$2 : NSObject < EduStanfordNlpTreesTreeReaderFactory >

- (id<EduStanfordNlpTreesTreeReader>)newTreeReaderWithJavaIoReader:(JavaIoReader *)inArg OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_STATIC_INIT(EduStanfordNlpTreesTreePrint_$Lambda$2)

inline EduStanfordNlpTreesTreePrint_$Lambda$2 *EduStanfordNlpTreesTreePrint_$Lambda$2_get_instance();
static EduStanfordNlpTreesTreePrint_$Lambda$2 *EduStanfordNlpTreesTreePrint_$Lambda$2_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpTreesTreePrint_$Lambda$2, instance, EduStanfordNlpTreesTreePrint_$Lambda$2 *)

__attribute__((unused)) static void EduStanfordNlpTreesTreePrint_$Lambda$2_init(EduStanfordNlpTreesTreePrint_$Lambda$2 *self);

__attribute__((unused)) static EduStanfordNlpTreesTreePrint_$Lambda$2 *new_EduStanfordNlpTreesTreePrint_$Lambda$2_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpTreesTreePrint_$Lambda$2 *create_EduStanfordNlpTreesTreePrint_$Lambda$2_init();

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpTreesTreePrint)

NSString *EduStanfordNlpTreesTreePrint_rootLabelOnlyFormat = @"rootSymbolOnly";
NSString *EduStanfordNlpTreesTreePrint_headMark = @"=H";
IOSObjectArray *EduStanfordNlpTreesTreePrint_outputTreeFormats;

@implementation EduStanfordNlpTreesTreePrint

- (instancetype)initWithNSString:(NSString *)formats {
  EduStanfordNlpTreesTreePrint_initWithNSString_(self, formats);
  return self;
}

- (instancetype)initWithNSString:(NSString *)formats
withEduStanfordNlpTreesTreebankLanguagePack:(id<EduStanfordNlpTreesTreebankLanguagePack>)tlp {
  EduStanfordNlpTreesTreePrint_initWithNSString_withEduStanfordNlpTreesTreebankLanguagePack_(self, formats, tlp);
  return self;
}

- (instancetype)initWithNSString:(NSString *)formats
                    withNSString:(NSString *)options
withEduStanfordNlpTreesTreebankLanguagePack:(id<EduStanfordNlpTreesTreebankLanguagePack>)tlp {
  EduStanfordNlpTreesTreePrint_initWithNSString_withNSString_withEduStanfordNlpTreesTreebankLanguagePack_(self, formats, options, tlp);
  return self;
}

- (instancetype)initWithNSString:(NSString *)formatString
                    withNSString:(NSString *)optionsString
withEduStanfordNlpTreesTreebankLanguagePack:(id<EduStanfordNlpTreesTreebankLanguagePack>)tlp
withEduStanfordNlpTreesHeadFinder:(id<EduStanfordNlpTreesHeadFinder>)hf
withEduStanfordNlpTreesHeadFinder:(id<EduStanfordNlpTreesHeadFinder>)typedDependencyHF {
  EduStanfordNlpTreesTreePrint_initWithNSString_withNSString_withEduStanfordNlpTreesTreebankLanguagePack_withEduStanfordNlpTreesHeadFinder_withEduStanfordNlpTreesHeadFinder_(self, formatString, optionsString, tlp, hf, typedDependencyHF);
  return self;
}

+ (jboolean)propertyToBooleanWithJavaUtilProperties:(JavaUtilProperties *)prop
                                       withNSString:(NSString *)key {
  return EduStanfordNlpTreesTreePrint_propertyToBooleanWithJavaUtilProperties_withNSString_(prop, key);
}

- (void)printTreeWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t {
  [self printTreeWithEduStanfordNlpTreesTree:t withJavaIoPrintWriter:pw_];
}

- (void)printTreeWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
                       withJavaIoPrintWriter:(JavaIoPrintWriter *)pw {
  [self printTreeWithEduStanfordNlpTreesTree:t withNSString:@"" withJavaIoPrintWriter:pw];
}

- (void)printTreeWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
                                withNSString:(NSString *)id_
                       withJavaIoPrintWriter:(JavaIoPrintWriter *)pw {
  jboolean inXml = EduStanfordNlpTreesTreePrint_propertyToBooleanWithJavaUtilProperties_withNSString_(options_, @"xml");
  if (t == nil) {
    if (inXml) {
      [((JavaIoPrintWriter *) nil_chk(pw)) printWithNSString:@"<s"];
      if (id_ != nil && ![@"" isEqual:id_]) {
        [pw printWithNSString:JreStrcat("$$C", @" id=\"", EduStanfordNlpUtilXMLUtils_escapeXMLWithNSString_(id_), '"')];
      }
      [pw printlnWithNSString:@" skipped=\"true\"/>"];
      [pw println];
    }
    else {
      [((JavaIoPrintWriter *) nil_chk(pw)) printlnWithNSString:@"SENTENCE_SKIPPED_OR_UNPARSABLE"];
    }
  }
  else {
    if (inXml) {
      [((JavaIoPrintWriter *) nil_chk(pw)) printWithNSString:@"<s"];
      if (id_ != nil && ![@"" isEqual:id_]) {
        [pw printWithNSString:JreStrcat("$$C", @" id=\"", EduStanfordNlpUtilXMLUtils_escapeXMLWithNSString_(id_), '"')];
      }
      [pw printlnWithNSString:@">"];
    }
    EduStanfordNlpTreesTreePrint_printTreeInternalWithEduStanfordNlpTreesTree_withJavaIoPrintWriter_withBoolean_(self, t, pw, inXml);
    if (inXml) {
      [((JavaIoPrintWriter *) nil_chk(pw)) printlnWithNSString:@"</s>"];
      [pw println];
    }
  }
}

- (void)printTreesWithJavaUtilList:(id<JavaUtilList>)trees
                      withNSString:(NSString *)id_
             withJavaIoPrintWriter:(JavaIoPrintWriter *)pw {
  jboolean inXml = EduStanfordNlpTreesTreePrint_propertyToBooleanWithJavaUtilProperties_withNSString_(options_, @"xml");
  jint ii = 0;
  for (EduStanfordNlpUtilScoredObject * __strong tp in nil_chk(trees)) {
    ii++;
    EduStanfordNlpTreesTree *t = [((EduStanfordNlpUtilScoredObject *) nil_chk(tp)) object];
    jdouble score = [tp score];
    if (t == nil) {
      if (inXml) {
        [((JavaIoPrintWriter *) nil_chk(pw)) printWithNSString:@"<s"];
        if (id_ != nil && ![@"" isEqual:id_]) {
          [pw printWithNSString:JreStrcat("$$C", @" id=\"", EduStanfordNlpUtilXMLUtils_escapeXMLWithNSString_(id_), '"')];
        }
        [pw printWithNSString:@" n=\""];
        [pw printWithInt:ii];
        [pw printWithChar:'"'];
        [pw printWithNSString:JreStrcat("$DC", @" score=\"", score, '"')];
        [pw printlnWithNSString:@" skipped=\"true\"/>"];
        [pw println];
      }
      else {
        [((JavaIoPrintWriter *) nil_chk(pw)) printlnWithNSString:JreStrcat("$I$D", @"SENTENCE_SKIPPED_OR_UNPARSABLE Parse #", ii, @" with score ", score)];
      }
    }
    else {
      if (inXml) {
        [((JavaIoPrintWriter *) nil_chk(pw)) printWithNSString:@"<s"];
        if (id_ != nil && ![@"" isEqual:id_]) {
          [pw printWithNSString:@" id=\""];
          [pw printWithNSString:EduStanfordNlpUtilXMLUtils_escapeXMLWithNSString_(id_)];
          [pw printWithChar:'"'];
        }
        [pw printWithNSString:@" n=\""];
        [pw printWithInt:ii];
        [pw printWithChar:'"'];
        [pw printWithNSString:@" score=\""];
        [pw printWithDouble:score];
        [pw printWithChar:'"'];
        [pw printlnWithNSString:@">"];
      }
      else {
        [((JavaIoPrintWriter *) nil_chk(pw)) printWithNSString:@"# Parse "];
        [pw printWithInt:ii];
        [pw printWithNSString:@" with score "];
        [pw printlnWithDouble:score];
      }
      EduStanfordNlpTreesTreePrint_printTreeInternalWithEduStanfordNlpTreesTree_withJavaIoPrintWriter_withBoolean_(self, t, pw, inXml);
      if (inXml) {
        [pw printlnWithNSString:@"</s>"];
        [pw println];
      }
    }
  }
}

- (void)printTreeInternalWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
                               withJavaIoPrintWriter:(JavaIoPrintWriter *)pw
                                         withBoolean:(jboolean)inXml {
  EduStanfordNlpTreesTreePrint_printTreeInternalWithEduStanfordNlpTreesTree_withJavaIoPrintWriter_withBoolean_(self, t, pw, inXml);
}

- (id<JavaUtilList>)getSortedDepsWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)tree
                               withJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)filter {
  return EduStanfordNlpTreesTreePrint_getSortedDepsWithEduStanfordNlpTreesTree_withJavaUtilFunctionPredicate_(self, tree, filter);
}

+ (EduStanfordNlpTreesTree *)getCollocationProcessedTreeWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)tree
                                                  withEduStanfordNlpTreesHeadFinder:(id<EduStanfordNlpTreesHeadFinder>)hf {
  return EduStanfordNlpTreesTreePrint_getCollocationProcessedTreeWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesHeadFinder_(tree, hf);
}

- (void)printHeaderWithJavaIoPrintWriter:(JavaIoPrintWriter *)pw
                            withNSString:(NSString *)charset {
  if (EduStanfordNlpTreesTreePrint_propertyToBooleanWithJavaUtilProperties_withNSString_(options_, @"xml")) {
    [((JavaIoPrintWriter *) nil_chk(pw)) printlnWithNSString:JreStrcat("$$$", @"<?xml version=\"1.0\" encoding=\"", charset, @"\"?>")];
    [pw printlnWithNSString:@"<corpus>"];
  }
}

- (void)printFooterWithJavaIoPrintWriter:(JavaIoPrintWriter *)pw {
  if (EduStanfordNlpTreesTreePrint_propertyToBooleanWithJavaUtilProperties_withNSString_(options_, @"xml")) {
    [((JavaIoPrintWriter *) nil_chk(pw)) printlnWithNSString:@"</corpus>"];
  }
}

- (EduStanfordNlpTreesTree *)markHeadNodesWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t {
  return EduStanfordNlpTreesTreePrint_markHeadNodesWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_(self, t, nil);
}

- (EduStanfordNlpTreesTree *)markHeadNodesWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
                                          withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)head {
  return EduStanfordNlpTreesTreePrint_markHeadNodesWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_(self, t, head);
}

+ (id<EduStanfordNlpLingLabel>)headMarkWithEduStanfordNlpLingLabel:(id<EduStanfordNlpLingLabel>)l {
  return EduStanfordNlpTreesTreePrint_headMarkWithEduStanfordNlpLingLabel_(l);
}

- (IOSObjectArray *)headMarkChildrenWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
                                    withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)head {
  return EduStanfordNlpTreesTreePrint_headMarkChildrenWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_(self, t, head);
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  EduStanfordNlpTreesTreePrint_mainWithNSStringArray_(args);
}

+ (NSString *)toStringWithJavaUtilCollection:(id<JavaUtilCollection>)dependencies
                                withNSString:(NSString *)format
                                 withBoolean:(jboolean)includeTags {
  return EduStanfordNlpTreesTreePrint_toStringWithJavaUtilCollection_withNSString_withBoolean_(dependencies, format, includeTags);
}

+ (NSString *)toStringWithJavaUtilCollection:(id<JavaUtilCollection>)dependencies
                                 withBoolean:(jboolean)extraSep
                                 withBoolean:(jboolean)includeTags {
  return EduStanfordNlpTreesTreePrint_toStringWithJavaUtilCollection_withBoolean_withBoolean_(dependencies, extraSep, includeTags);
}

+ (NSString *)toReadableStringWithJavaUtilCollection:(id<JavaUtilCollection>)dependencies {
  return EduStanfordNlpTreesTreePrint_toReadableStringWithJavaUtilCollection_(dependencies);
}

+ (NSString *)toXMLStringWithJavaUtilCollection:(id<JavaUtilCollection>)dependencies
                                    withBoolean:(jboolean)includeTags {
  return EduStanfordNlpTreesTreePrint_toXMLStringWithJavaUtilCollection_withBoolean_(dependencies, includeTags);
}

+ (void)printWithJavaUtilCollection:(id<JavaUtilCollection>)dependencies
                        withBoolean:(jboolean)includeTags
              withJavaIoPrintWriter:(JavaIoPrintWriter *)pw {
  EduStanfordNlpTreesTreePrint_printWithJavaUtilCollection_withBoolean_withJavaIoPrintWriter_(dependencies, includeTags, pw);
}

+ (void)printWithJavaUtilCollection:(id<JavaUtilCollection>)dependencies
                       withNSString:(NSString *)format
                        withBoolean:(jboolean)includeTags
              withJavaIoPrintWriter:(JavaIoPrintWriter *)pw {
  EduStanfordNlpTreesTreePrint_printWithJavaUtilCollection_withNSString_withBoolean_withJavaIoPrintWriter_(dependencies, format, includeTags, pw);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, 12, -1, -1 },
    { NULL, "V", 0x2, 13, 14, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x2, 15, 16, -1, 17, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x2a, 18, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 23, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x1, 24, 7, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x2, 24, 25, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingLabel;", 0xa, 26, 27, -1, -1, -1, -1 },
    { NULL, "[LEduStanfordNlpTreesTree;", 0x2, 28, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 29, 30, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 31, 32, -1, 33, -1, -1 },
    { NULL, "LNSString;", 0xa, 31, 34, -1, 35, -1, -1 },
    { NULL, "LNSString;", 0xa, 36, 37, -1, 38, -1, -1 },
    { NULL, "LNSString;", 0xa, 39, 40, -1, 41, -1, -1 },
    { NULL, "V", 0x9, 42, 43, -1, 44, -1, -1 },
    { NULL, "V", 0x9, 42, 45, -1, 46, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(initWithNSString:withEduStanfordNlpTreesTreebankLanguagePack:);
  methods[2].selector = @selector(initWithNSString:withNSString:withEduStanfordNlpTreesTreebankLanguagePack:);
  methods[3].selector = @selector(initWithNSString:withNSString:withEduStanfordNlpTreesTreebankLanguagePack:withEduStanfordNlpTreesHeadFinder:withEduStanfordNlpTreesHeadFinder:);
  methods[4].selector = @selector(propertyToBooleanWithJavaUtilProperties:withNSString:);
  methods[5].selector = @selector(printTreeWithEduStanfordNlpTreesTree:);
  methods[6].selector = @selector(printTreeWithEduStanfordNlpTreesTree:withJavaIoPrintWriter:);
  methods[7].selector = @selector(printTreeWithEduStanfordNlpTreesTree:withNSString:withJavaIoPrintWriter:);
  methods[8].selector = @selector(printTreesWithJavaUtilList:withNSString:withJavaIoPrintWriter:);
  methods[9].selector = @selector(printTreeInternalWithEduStanfordNlpTreesTree:withJavaIoPrintWriter:withBoolean:);
  methods[10].selector = @selector(getSortedDepsWithEduStanfordNlpTreesTree:withJavaUtilFunctionPredicate:);
  methods[11].selector = @selector(getCollocationProcessedTreeWithEduStanfordNlpTreesTree:withEduStanfordNlpTreesHeadFinder:);
  methods[12].selector = @selector(printHeaderWithJavaIoPrintWriter:withNSString:);
  methods[13].selector = @selector(printFooterWithJavaIoPrintWriter:);
  methods[14].selector = @selector(markHeadNodesWithEduStanfordNlpTreesTree:);
  methods[15].selector = @selector(markHeadNodesWithEduStanfordNlpTreesTree:withEduStanfordNlpTreesTree:);
  methods[16].selector = @selector(headMarkWithEduStanfordNlpLingLabel:);
  methods[17].selector = @selector(headMarkChildrenWithEduStanfordNlpTreesTree:withEduStanfordNlpTreesTree:);
  methods[18].selector = @selector(mainWithNSStringArray:);
  methods[19].selector = @selector(toStringWithJavaUtilCollection:withNSString:withBoolean:);
  methods[20].selector = @selector(toStringWithJavaUtilCollection:withBoolean:withBoolean:);
  methods[21].selector = @selector(toReadableStringWithJavaUtilCollection:);
  methods[22].selector = @selector(toXMLStringWithJavaUtilCollection:withBoolean:);
  methods[23].selector = @selector(printWithJavaUtilCollection:withBoolean:withJavaIoPrintWriter:);
  methods[24].selector = @selector(printWithJavaUtilCollection:withNSString:withBoolean:withJavaIoPrintWriter:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "rootLabelOnlyFormat", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 47, -1, -1 },
    { "headMark", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 48, -1, -1 },
    { "outputTreeFormats", "[LNSString;", .constantValue.asLong = 0, 0x19, -1, 49, -1, -1 },
    { "formats_", "LJavaUtilProperties;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "options_", "LJavaUtilProperties;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "markHeadNodes_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "lexicalize_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "removeEmpty_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "ptb2text_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "transChinese_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "basicDependencies_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "collapsedDependencies_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "nonCollapsedDependencies_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "nonCollapsedDependenciesSeparated_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "CCPropagatedDependencies_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "treeDependencies_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "includeTags_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "hf_", "LEduStanfordNlpTreesHeadFinder;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "tlp_", "LEduStanfordNlpTreesTreebankLanguagePack;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "stemmer_", "LEduStanfordNlpTreesWordStemmer;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "dependencyFilter_", "LJavaUtilFunctionPredicate;", .constantValue.asLong = 0, 0x12, -1, -1, 50, -1 },
    { "dependencyWordFilter_", "LJavaUtilFunctionPredicate;", .constantValue.asLong = 0, 0x12, -1, -1, 50, -1 },
    { "gsf_", "LEduStanfordNlpTreesGrammaticalStructureFactory;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "wnc", "LEduStanfordNlpTreesWordNetConnection;", .constantValue.asLong = 0, 0xa, -1, 51, -1, -1 },
    { "pw_", "LJavaIoPrintWriter;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "LNSString;LEduStanfordNlpTreesTreebankLanguagePack;", "LNSString;LNSString;LEduStanfordNlpTreesTreebankLanguagePack;", "LNSString;LNSString;LEduStanfordNlpTreesTreebankLanguagePack;LEduStanfordNlpTreesHeadFinder;LEduStanfordNlpTreesHeadFinder;", "propertyToBoolean", "LJavaUtilProperties;LNSString;", "printTree", "LEduStanfordNlpTreesTree;", "LEduStanfordNlpTreesTree;LJavaIoPrintWriter;", "LEduStanfordNlpTreesTree;LNSString;LJavaIoPrintWriter;", "printTrees", "LJavaUtilList;LNSString;LJavaIoPrintWriter;", "(Ljava/util/List<Ledu/stanford/nlp/util/ScoredObject<Ledu/stanford/nlp/trees/Tree;>;>;Ljava/lang/String;Ljava/io/PrintWriter;)V", "printTreeInternal", "LEduStanfordNlpTreesTree;LJavaIoPrintWriter;Z", "getSortedDeps", "LEduStanfordNlpTreesTree;LJavaUtilFunctionPredicate;", "(Ledu/stanford/nlp/trees/Tree;Ljava/util/function/Predicate<Ledu/stanford/nlp/trees/Dependency<Ledu/stanford/nlp/ling/Label;Ledu/stanford/nlp/ling/Label;Ljava/lang/Object;>;>;)Ljava/util/List<Ledu/stanford/nlp/trees/Dependency<Ledu/stanford/nlp/ling/Label;Ledu/stanford/nlp/ling/Label;Ljava/lang/Object;>;>;", "getCollocationProcessedTree", "LEduStanfordNlpTreesTree;LEduStanfordNlpTreesHeadFinder;", "printHeader", "LJavaIoPrintWriter;LNSString;", "printFooter", "LJavaIoPrintWriter;", "markHeadNodes", "LEduStanfordNlpTreesTree;LEduStanfordNlpTreesTree;", "headMark", "LEduStanfordNlpLingLabel;", "headMarkChildren", "main", "[LNSString;", "toString", "LJavaUtilCollection;LNSString;Z", "(Ljava/util/Collection<Ledu/stanford/nlp/trees/TypedDependency;>;Ljava/lang/String;Z)Ljava/lang/String;", "LJavaUtilCollection;ZZ", "(Ljava/util/Collection<Ledu/stanford/nlp/trees/TypedDependency;>;ZZ)Ljava/lang/String;", "toReadableString", "LJavaUtilCollection;", "(Ljava/util/Collection<Ledu/stanford/nlp/trees/TypedDependency;>;)Ljava/lang/String;", "toXMLString", "LJavaUtilCollection;Z", "(Ljava/util/Collection<Ledu/stanford/nlp/trees/TypedDependency;>;Z)Ljava/lang/String;", "print", "LJavaUtilCollection;ZLJavaIoPrintWriter;", "(Ljava/util/Collection<Ledu/stanford/nlp/trees/TypedDependency;>;ZLjava/io/PrintWriter;)V", "LJavaUtilCollection;LNSString;ZLJavaIoPrintWriter;", "(Ljava/util/Collection<Ledu/stanford/nlp/trees/TypedDependency;>;Ljava/lang/String;ZLjava/io/PrintWriter;)V", &EduStanfordNlpTreesTreePrint_rootLabelOnlyFormat, &EduStanfordNlpTreesTreePrint_headMark, &EduStanfordNlpTreesTreePrint_outputTreeFormats, "Ljava/util/function/Predicate<Ledu/stanford/nlp/trees/Dependency<Ledu/stanford/nlp/ling/Label;Ledu/stanford/nlp/ling/Label;Ljava/lang/Object;>;>;", &EduStanfordNlpTreesTreePrint_wnc };
  static const J2ObjcClassInfo _EduStanfordNlpTreesTreePrint = { "TreePrint", "edu.stanford.nlp.trees", ptrTable, methods, fields, 7, 0x1, 25, 25, -1, -1, -1, -1, -1 };
  return &_EduStanfordNlpTreesTreePrint;
}

+ (void)initialize {
  if (self == [EduStanfordNlpTreesTreePrint class]) {
    EduStanfordNlpTreesTreePrint_outputTreeFormats = [IOSObjectArray newArrayWithObjects:(id[]){ @"penn", @"oneline", EduStanfordNlpTreesTreePrint_rootLabelOnlyFormat, @"words", @"wordsAndTags", @"dependencies", @"typedDependencies", @"typedDependenciesCollapsed", @"latexTree", @"xmlTree", @"collocations", @"semanticGraph", @"conllStyleDependencies", @"conll2007" } count:14 type:NSString_class_()];
    J2OBJC_SET_INITIALIZED(EduStanfordNlpTreesTreePrint)
  }
}

@end

void EduStanfordNlpTreesTreePrint_initWithNSString_(EduStanfordNlpTreesTreePrint *self, NSString *formats) {
  EduStanfordNlpTreesTreePrint_initWithNSString_withNSString_withEduStanfordNlpTreesTreebankLanguagePack_(self, formats, @"", new_EduStanfordNlpTreesPennTreebankLanguagePack_init());
}

EduStanfordNlpTreesTreePrint *new_EduStanfordNlpTreesTreePrint_initWithNSString_(NSString *formats) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesTreePrint, initWithNSString_, formats)
}

EduStanfordNlpTreesTreePrint *create_EduStanfordNlpTreesTreePrint_initWithNSString_(NSString *formats) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesTreePrint, initWithNSString_, formats)
}

void EduStanfordNlpTreesTreePrint_initWithNSString_withEduStanfordNlpTreesTreebankLanguagePack_(EduStanfordNlpTreesTreePrint *self, NSString *formats, id<EduStanfordNlpTreesTreebankLanguagePack> tlp) {
  EduStanfordNlpTreesTreePrint_initWithNSString_withNSString_withEduStanfordNlpTreesTreebankLanguagePack_(self, formats, @"", tlp);
}

EduStanfordNlpTreesTreePrint *new_EduStanfordNlpTreesTreePrint_initWithNSString_withEduStanfordNlpTreesTreebankLanguagePack_(NSString *formats, id<EduStanfordNlpTreesTreebankLanguagePack> tlp) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesTreePrint, initWithNSString_withEduStanfordNlpTreesTreebankLanguagePack_, formats, tlp)
}

EduStanfordNlpTreesTreePrint *create_EduStanfordNlpTreesTreePrint_initWithNSString_withEduStanfordNlpTreesTreebankLanguagePack_(NSString *formats, id<EduStanfordNlpTreesTreebankLanguagePack> tlp) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesTreePrint, initWithNSString_withEduStanfordNlpTreesTreebankLanguagePack_, formats, tlp)
}

void EduStanfordNlpTreesTreePrint_initWithNSString_withNSString_withEduStanfordNlpTreesTreebankLanguagePack_(EduStanfordNlpTreesTreePrint *self, NSString *formats, NSString *options, id<EduStanfordNlpTreesTreebankLanguagePack> tlp) {
  EduStanfordNlpTreesTreePrint_initWithNSString_withNSString_withEduStanfordNlpTreesTreebankLanguagePack_withEduStanfordNlpTreesHeadFinder_withEduStanfordNlpTreesHeadFinder_(self, formats, options, tlp, [((id<EduStanfordNlpTreesTreebankLanguagePack>) nil_chk(tlp)) headFinder], [tlp typedDependencyHeadFinder]);
}

EduStanfordNlpTreesTreePrint *new_EduStanfordNlpTreesTreePrint_initWithNSString_withNSString_withEduStanfordNlpTreesTreebankLanguagePack_(NSString *formats, NSString *options, id<EduStanfordNlpTreesTreebankLanguagePack> tlp) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesTreePrint, initWithNSString_withNSString_withEduStanfordNlpTreesTreebankLanguagePack_, formats, options, tlp)
}

EduStanfordNlpTreesTreePrint *create_EduStanfordNlpTreesTreePrint_initWithNSString_withNSString_withEduStanfordNlpTreesTreebankLanguagePack_(NSString *formats, NSString *options, id<EduStanfordNlpTreesTreebankLanguagePack> tlp) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesTreePrint, initWithNSString_withNSString_withEduStanfordNlpTreesTreebankLanguagePack_, formats, options, tlp)
}

void EduStanfordNlpTreesTreePrint_initWithNSString_withNSString_withEduStanfordNlpTreesTreebankLanguagePack_withEduStanfordNlpTreesHeadFinder_withEduStanfordNlpTreesHeadFinder_(EduStanfordNlpTreesTreePrint *self, NSString *formatString, NSString *optionsString, id<EduStanfordNlpTreesTreebankLanguagePack> tlp, id<EduStanfordNlpTreesHeadFinder> hf, id<EduStanfordNlpTreesHeadFinder> typedDependencyHF) {
  NSObject_init(self);
  self->pw_ = new_JavaIoPrintWriter_initWithJavaIoOutputStream_withBoolean_(JreLoadStatic(JavaLangSystem, out), true);
  self->formats_ = EduStanfordNlpUtilStringUtils_stringToPropertiesWithNSString_(formatString);
  self->options_ = EduStanfordNlpUtilStringUtils_stringToPropertiesWithNSString_(optionsString);
  id<JavaUtilList> okOutputs = JavaUtilArrays_asListWithNSObjectArray_(EduStanfordNlpTreesTreePrint_outputTreeFormats);
  for (id __strong formObj in nil_chk([((JavaUtilProperties *) nil_chk(self->formats_)) keySet])) {
    NSString *format = (NSString *) cast_chk(formObj, [NSString class]);
    if (![((id<JavaUtilList>) nil_chk(okOutputs)) containsWithId:format]) {
      @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$$@", @"Error: output tree format ", format, @" not supported. Known formats are: ", okOutputs));
    }
  }
  self->hf_ = hf;
  self->tlp_ = tlp;
  jboolean includePunctuationDependencies;
  includePunctuationDependencies = EduStanfordNlpTreesTreePrint_propertyToBooleanWithJavaUtilProperties_withNSString_(self->options_, @"includePunctuationDependencies");
  jboolean generateOriginalDependencies = [((id<EduStanfordNlpTreesTreebankLanguagePack>) nil_chk(tlp)) generateOriginalDependencies];
  id<JavaUtilFunctionPredicate> puncFilter;
  if (includePunctuationDependencies) {
    self->dependencyFilter_ = EduStanfordNlpUtilFilters_acceptFilter();
    self->dependencyWordFilter_ = EduStanfordNlpUtilFilters_acceptFilter();
    puncFilter = EduStanfordNlpUtilFilters_acceptFilter();
  }
  else {
    self->dependencyFilter_ = new_EduStanfordNlpTreesDependencies_DependentPuncTagRejectFilter_initWithJavaUtilFunctionPredicate_([tlp punctuationTagRejectFilter]);
    self->dependencyWordFilter_ = new_EduStanfordNlpTreesDependencies_DependentPuncWordRejectFilter_initWithJavaUtilFunctionPredicate_([tlp punctuationWordRejectFilter]);
    puncFilter = generateOriginalDependencies ? [tlp punctuationWordRejectFilter] : [tlp punctuationTagRejectFilter];
  }
  if (EduStanfordNlpTreesTreePrint_propertyToBooleanWithJavaUtilProperties_withNSString_(self->options_, @"stem")) {
    self->stemmer_ = new_EduStanfordNlpTreesWordStemmer_init();
  }
  else {
    self->stemmer_ = nil;
  }
  if ([self->formats_ containsKeyWithId:@"typedDependenciesCollapsed"] || [self->formats_ containsKeyWithId:@"typedDependencies"] || ([self->formats_ containsKeyWithId:@"conll2007"] && [tlp supportsGrammaticalStructures])) {
    self->gsf_ = [tlp grammaticalStructureFactoryWithJavaUtilFunctionPredicate:puncFilter withEduStanfordNlpTreesHeadFinder:typedDependencyHF];
  }
  else {
    self->gsf_ = nil;
  }
  self->lexicalize_ = EduStanfordNlpTreesTreePrint_propertyToBooleanWithJavaUtilProperties_withNSString_(self->options_, @"lexicalize");
  self->markHeadNodes_ = EduStanfordNlpTreesTreePrint_propertyToBooleanWithJavaUtilProperties_withNSString_(self->options_, @"markHeadNodes");
  self->transChinese_ = EduStanfordNlpTreesTreePrint_propertyToBooleanWithJavaUtilProperties_withNSString_(self->options_, @"transChinese");
  self->ptb2text_ = EduStanfordNlpTreesTreePrint_propertyToBooleanWithJavaUtilProperties_withNSString_(self->options_, @"ptb2text");
  self->removeEmpty_ = (EduStanfordNlpTreesTreePrint_propertyToBooleanWithJavaUtilProperties_withNSString_(self->options_, @"noempty") || self->ptb2text_);
  self->basicDependencies_ = EduStanfordNlpTreesTreePrint_propertyToBooleanWithJavaUtilProperties_withNSString_(self->options_, @"basicDependencies");
  self->collapsedDependencies_ = EduStanfordNlpTreesTreePrint_propertyToBooleanWithJavaUtilProperties_withNSString_(self->options_, @"collapsedDependencies");
  self->nonCollapsedDependencies_ = EduStanfordNlpTreesTreePrint_propertyToBooleanWithJavaUtilProperties_withNSString_(self->options_, @"nonCollapsedDependencies");
  self->nonCollapsedDependenciesSeparated_ = EduStanfordNlpTreesTreePrint_propertyToBooleanWithJavaUtilProperties_withNSString_(self->options_, @"nonCollapsedDependenciesSeparated");
  self->treeDependencies_ = EduStanfordNlpTreesTreePrint_propertyToBooleanWithJavaUtilProperties_withNSString_(self->options_, @"treeDependencies");
  self->includeTags_ = EduStanfordNlpTreesTreePrint_propertyToBooleanWithJavaUtilProperties_withNSString_(self->options_, @"includeTags");
  if (!self->basicDependencies_ && !self->collapsedDependencies_ && !self->nonCollapsedDependencies_ && !self->nonCollapsedDependenciesSeparated_ && !self->treeDependencies_) {
    self->CCPropagatedDependencies_ = true;
  }
  else {
    self->CCPropagatedDependencies_ = EduStanfordNlpTreesTreePrint_propertyToBooleanWithJavaUtilProperties_withNSString_(self->options_, @"CCPropagatedDependencies");
  }
}

EduStanfordNlpTreesTreePrint *new_EduStanfordNlpTreesTreePrint_initWithNSString_withNSString_withEduStanfordNlpTreesTreebankLanguagePack_withEduStanfordNlpTreesHeadFinder_withEduStanfordNlpTreesHeadFinder_(NSString *formatString, NSString *optionsString, id<EduStanfordNlpTreesTreebankLanguagePack> tlp, id<EduStanfordNlpTreesHeadFinder> hf, id<EduStanfordNlpTreesHeadFinder> typedDependencyHF) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesTreePrint, initWithNSString_withNSString_withEduStanfordNlpTreesTreebankLanguagePack_withEduStanfordNlpTreesHeadFinder_withEduStanfordNlpTreesHeadFinder_, formatString, optionsString, tlp, hf, typedDependencyHF)
}

EduStanfordNlpTreesTreePrint *create_EduStanfordNlpTreesTreePrint_initWithNSString_withNSString_withEduStanfordNlpTreesTreebankLanguagePack_withEduStanfordNlpTreesHeadFinder_withEduStanfordNlpTreesHeadFinder_(NSString *formatString, NSString *optionsString, id<EduStanfordNlpTreesTreebankLanguagePack> tlp, id<EduStanfordNlpTreesHeadFinder> hf, id<EduStanfordNlpTreesHeadFinder> typedDependencyHF) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesTreePrint, initWithNSString_withNSString_withEduStanfordNlpTreesTreebankLanguagePack_withEduStanfordNlpTreesHeadFinder_withEduStanfordNlpTreesHeadFinder_, formatString, optionsString, tlp, hf, typedDependencyHF)
}

jboolean EduStanfordNlpTreesTreePrint_propertyToBooleanWithJavaUtilProperties_withNSString_(JavaUtilProperties *prop, NSString *key) {
  EduStanfordNlpTreesTreePrint_initialize();
  return JavaLangBoolean_parseBooleanWithNSString_([((JavaUtilProperties *) nil_chk(prop)) getPropertyWithNSString:key]);
}

void EduStanfordNlpTreesTreePrint_printTreeInternalWithEduStanfordNlpTreesTree_withJavaIoPrintWriter_withBoolean_(EduStanfordNlpTreesTreePrint *self, EduStanfordNlpTreesTree *t, JavaIoPrintWriter *pw, jboolean inXml) {
  EduStanfordNlpTreesTree *outputTree = t;
  if ([((JavaUtilProperties *) nil_chk(self->formats_)) containsKeyWithId:@"conll2007"] || self->removeEmpty_) {
    outputTree = [((EduStanfordNlpTreesTree *) nil_chk(outputTree)) pruneWithJavaUtilFunctionPredicate:new_EduStanfordNlpTreesBobChrisTreeNormalizer_EmptyFilter_init()];
  }
  if ([self->formats_ containsKeyWithId:@"words"]) {
    if (inXml) {
      JavaUtilArrayList *sentUnstemmed = [((EduStanfordNlpTreesTree *) nil_chk(outputTree)) yield];
      [((JavaIoPrintWriter *) nil_chk(pw)) printlnWithNSString:@"  <words>"];
      jint i = 1;
      for (id<EduStanfordNlpLingLabel> __strong w in nil_chk(sentUnstemmed)) {
        [pw printlnWithNSString:JreStrcat("$I$$$", @"    <word ind=\"", i, @"\">", EduStanfordNlpUtilXMLUtils_escapeXMLWithNSString_([((id<EduStanfordNlpLingLabel>) nil_chk(w)) value]), @"</word>")];
        i++;
      }
      [pw printlnWithNSString:@"  </words>"];
    }
    else {
      NSString *sent = EduStanfordNlpLingSentence_listToStringWithJavaUtilList_withBoolean_([((EduStanfordNlpTreesTree *) nil_chk(outputTree)) yield], false);
      if (self->ptb2text_) {
        [((JavaIoPrintWriter *) nil_chk(pw)) printlnWithNSString:EduStanfordNlpProcessPTBTokenizer_ptb2TextWithNSString_(sent)];
      }
      else {
        [((JavaIoPrintWriter *) nil_chk(pw)) printlnWithNSString:sent];
        [pw println];
      }
    }
  }
  if (EduStanfordNlpTreesTreePrint_propertyToBooleanWithJavaUtilProperties_withNSString_(self->options_, @"removeTopBracket")) {
    NSString *s = [((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(outputTree)) label])) value];
    if ([((id<EduStanfordNlpTreesTreebankLanguagePack>) nil_chk(self->tlp_)) isStartSymbolWithNSString:s]) {
      if ([outputTree isUnaryRewrite]) {
        outputTree = [outputTree firstChild];
      }
      else {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"TreePrint: can't remove top bracket: not unary"];
      }
    }
  }
  if (self->stemmer_ != nil) {
    [self->stemmer_ visitTreeWithEduStanfordNlpTreesTree:outputTree];
  }
  if (self->lexicalize_) {
    outputTree = EduStanfordNlpTreesTrees_lexicalizeWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesHeadFinder_(outputTree, self->hf_);
    id<JavaUtilFunctionFunction> a = EduStanfordNlpTreesTreeFunctions_getLabeledToDescriptiveCoreLabelTreeFunction();
    outputTree = [((id<JavaUtilFunctionFunction>) nil_chk(a)) applyWithId:outputTree];
  }
  if ([self->formats_ containsKeyWithId:@"collocations"]) {
    outputTree = EduStanfordNlpTreesTreePrint_getCollocationProcessedTreeWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesHeadFinder_(outputTree, self->hf_);
  }
  if (!self->lexicalize_) {
    id<JavaUtilFunctionFunction> a = EduStanfordNlpTreesTreeFunctions_getLabeledTreeToStringLabeledTreeFunction();
    outputTree = [((id<JavaUtilFunctionFunction>) nil_chk(a)) applyWithId:outputTree];
  }
  EduStanfordNlpTreesTree *outputPSTree = outputTree;
  if (self->markHeadNodes_) {
    outputPSTree = [self markHeadNodesWithEduStanfordNlpTreesTree:outputPSTree];
  }
  if (self->transChinese_) {
    id<EduStanfordNlpTreesTreeTransformer> tt = JreLoadStatic(EduStanfordNlpTreesTreePrint_$Lambda$1, instance);
    outputPSTree = [((id<EduStanfordNlpTreesTreeTransformer>) nil_chk(tt)) transformTreeWithEduStanfordNlpTreesTree:outputPSTree];
  }
  if (EduStanfordNlpTreesTreePrint_propertyToBooleanWithJavaUtilProperties_withNSString_(self->options_, @"xml")) {
    if ([self->formats_ containsKeyWithId:@"wordsAndTags"]) {
      JavaUtilArrayList *sent = [((EduStanfordNlpTreesTree *) nil_chk(outputTree)) taggedYield];
      [((JavaIoPrintWriter *) nil_chk(pw)) printlnWithNSString:@"  <words pos=\"true\">"];
      jint i = 1;
      for (EduStanfordNlpLingTaggedWord * __strong tw in nil_chk(sent)) {
        [pw printlnWithNSString:JreStrcat("$I$$$$$", @"    <word ind=\"", i, @"\" pos=\"", EduStanfordNlpUtilXMLUtils_escapeXMLWithNSString_([((EduStanfordNlpLingTaggedWord *) nil_chk(tw)) tag]), @"\">", EduStanfordNlpUtilXMLUtils_escapeXMLWithNSString_([tw word]), @"</word>")];
        i++;
      }
      [pw printlnWithNSString:@"  </words>"];
    }
    if ([self->formats_ containsKeyWithId:@"penn"]) {
      [((JavaIoPrintWriter *) nil_chk(pw)) printlnWithNSString:@"  <tree style=\"penn\">"];
      JavaIoStringWriter *sw = new_JavaIoStringWriter_init();
      JavaIoPrintWriter *psw = new_JavaIoPrintWriter_initWithJavaIoWriter_(sw);
      [((EduStanfordNlpTreesTree *) nil_chk(outputPSTree)) pennPrintWithJavaIoPrintWriter:psw];
      [pw printWithNSString:EduStanfordNlpUtilXMLUtils_escapeXMLWithNSString_([sw description])];
      [pw printlnWithNSString:@"  </tree>"];
    }
    if ([self->formats_ containsKeyWithId:@"latexTree"]) {
      [((JavaIoPrintWriter *) nil_chk(pw)) printlnWithNSString:@"    <tree style=\"latexTrees\">"];
      [pw printlnWithNSString:@".["];
      JavaIoStringWriter *sw = new_JavaIoStringWriter_init();
      JavaIoPrintWriter *psw = new_JavaIoPrintWriter_initWithJavaIoWriter_(sw);
      [((EduStanfordNlpTreesTree *) nil_chk(outputTree)) indentedListPrintWithJavaIoPrintWriter:psw withBoolean:false];
      [pw printWithNSString:EduStanfordNlpUtilXMLUtils_escapeXMLWithNSString_([sw description])];
      [pw printlnWithNSString:@".]"];
      [pw printlnWithNSString:@"  </tree>"];
    }
    if ([self->formats_ containsKeyWithId:@"xmlTree"]) {
      [((JavaIoPrintWriter *) nil_chk(pw)) printlnWithNSString:@"<tree style=\"xml\">"];
      [((EduStanfordNlpTreesTree *) nil_chk(outputTree)) indentedXMLPrintWithJavaIoPrintWriter:pw withBoolean:false];
      [pw printlnWithNSString:@"</tree>"];
    }
    if ([self->formats_ containsKeyWithId:@"dependencies"]) {
      EduStanfordNlpTreesTree *indexedTree = [((EduStanfordNlpTreesTree *) nil_chk(outputTree)) deepCopyWithEduStanfordNlpTreesTreeFactory:[outputTree treeFactory] withEduStanfordNlpLingLabelFactory:EduStanfordNlpLingCoreLabel_factory()];
      [((EduStanfordNlpTreesTree *) nil_chk(indexedTree)) indexLeaves];
      id<JavaUtilSet> depsSet = [indexedTree mapDependenciesWithJavaUtilFunctionPredicate:self->dependencyWordFilter_ withEduStanfordNlpTreesHeadFinder:self->hf_];
      id<JavaUtilList> sortedDeps = new_JavaUtilArrayList_initWithJavaUtilCollection_(depsSet);
      JavaUtilCollections_sortWithJavaUtilList_withJavaUtilComparator_(sortedDeps, EduStanfordNlpTreesDependencies_dependencyIndexComparator());
      [((JavaIoPrintWriter *) nil_chk(pw)) printlnWithNSString:@"<dependencies style=\"untyped\">"];
      for (id<EduStanfordNlpTreesDependency> __strong d in sortedDeps) {
        [pw printlnWithNSString:[((id<EduStanfordNlpTreesDependency>) nil_chk(d)) toStringWithNSString:@"xml"]];
      }
      [pw printlnWithNSString:@"</dependencies>"];
    }
    if ([self->formats_ containsKeyWithId:@"conll2007"] || [self->formats_ containsKeyWithId:@"conllStyleDependencies"]) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"The \"conll2007\" and \"conllStyleDependencies\" formats are ignored in xml."];
    }
    if ([self->formats_ containsKeyWithId:@"typedDependencies"]) {
      EduStanfordNlpTreesGrammaticalStructure *gs = [((id<EduStanfordNlpTreesGrammaticalStructureFactory>) nil_chk(self->gsf_)) newGrammaticalStructureWithEduStanfordNlpTreesTree:outputTree];
      if (self->basicDependencies_) {
        EduStanfordNlpTreesTreePrint_printWithJavaUtilCollection_withNSString_withBoolean_withJavaIoPrintWriter_([((EduStanfordNlpTreesGrammaticalStructure *) nil_chk(gs)) typedDependencies], @"xml", self->includeTags_, pw);
      }
      if (self->nonCollapsedDependencies_ || self->nonCollapsedDependenciesSeparated_) {
        EduStanfordNlpTreesTreePrint_printWithJavaUtilCollection_withNSString_withBoolean_withJavaIoPrintWriter_([((EduStanfordNlpTreesGrammaticalStructure *) nil_chk(gs)) allTypedDependencies], @"xml", self->includeTags_, pw);
      }
      if (self->collapsedDependencies_) {
        EduStanfordNlpTreesTreePrint_printWithJavaUtilCollection_withNSString_withBoolean_withJavaIoPrintWriter_([((EduStanfordNlpTreesGrammaticalStructure *) nil_chk(gs)) typedDependenciesCollapsedWithEduStanfordNlpTreesGrammaticalStructure_Extras:JreLoadEnum(EduStanfordNlpTreesGrammaticalStructure_Extras, MAXIMAL)], @"xml", self->includeTags_, pw);
      }
      if (self->CCPropagatedDependencies_) {
        EduStanfordNlpTreesTreePrint_printWithJavaUtilCollection_withNSString_withBoolean_withJavaIoPrintWriter_([((EduStanfordNlpTreesGrammaticalStructure *) nil_chk(gs)) typedDependenciesCCprocessed], @"xml", self->includeTags_, pw);
      }
      if (self->treeDependencies_) {
        EduStanfordNlpTreesTreePrint_printWithJavaUtilCollection_withNSString_withBoolean_withJavaIoPrintWriter_([((EduStanfordNlpTreesGrammaticalStructure *) nil_chk(gs)) typedDependenciesCollapsedTree], @"xml", self->includeTags_, pw);
      }
    }
    if ([self->formats_ containsKeyWithId:@"typedDependenciesCollapsed"]) {
      EduStanfordNlpTreesGrammaticalStructure *gs = [((id<EduStanfordNlpTreesGrammaticalStructureFactory>) nil_chk(self->gsf_)) newGrammaticalStructureWithEduStanfordNlpTreesTree:outputTree];
      EduStanfordNlpTreesTreePrint_printWithJavaUtilCollection_withNSString_withBoolean_withJavaIoPrintWriter_([((EduStanfordNlpTreesGrammaticalStructure *) nil_chk(gs)) typedDependenciesCCprocessed], @"xml", self->includeTags_, pw);
    }
  }
  else {
    if ([self->formats_ containsKeyWithId:@"wordsAndTags"]) {
      [((JavaIoPrintWriter *) nil_chk(pw)) printlnWithNSString:EduStanfordNlpLingSentence_listToStringWithJavaUtilList_withBoolean_([((EduStanfordNlpTreesTree *) nil_chk(outputTree)) taggedYield], false)];
      [pw println];
    }
    if ([self->formats_ containsKeyWithId:@"oneline"]) {
      [((JavaIoPrintWriter *) nil_chk(pw)) printlnWithNSString:[((EduStanfordNlpTreesTree *) nil_chk(outputPSTree)) description]];
    }
    if ([self->formats_ containsKeyWithId:@"penn"]) {
      [((EduStanfordNlpTreesTree *) nil_chk(outputPSTree)) pennPrintWithJavaIoPrintWriter:pw];
      [((JavaIoPrintWriter *) nil_chk(pw)) println];
    }
    if ([self->formats_ containsKeyWithId:EduStanfordNlpTreesTreePrint_rootLabelOnlyFormat]) {
      [((JavaIoPrintWriter *) nil_chk(pw)) printlnWithNSString:[((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(outputTree)) label])) value]];
    }
    if ([self->formats_ containsKeyWithId:@"latexTree"]) {
      [((JavaIoPrintWriter *) nil_chk(pw)) printlnWithNSString:@".["];
      [((EduStanfordNlpTreesTree *) nil_chk(outputTree)) indentedListPrintWithJavaIoPrintWriter:pw withBoolean:false];
      [pw printlnWithNSString:@".]"];
    }
    if ([self->formats_ containsKeyWithId:@"xmlTree"]) {
      [((EduStanfordNlpTreesTree *) nil_chk(outputTree)) indentedXMLPrintWithJavaIoPrintWriter:pw withBoolean:false];
    }
    if ([self->formats_ containsKeyWithId:@"dependencies"]) {
      EduStanfordNlpTreesTree *indexedTree = [((EduStanfordNlpTreesTree *) nil_chk(outputTree)) deepCopyWithEduStanfordNlpTreesTreeFactory:[outputTree treeFactory]];
      [((EduStanfordNlpTreesTree *) nil_chk(indexedTree)) indexLeaves];
      id<JavaUtilList> sortedDeps = EduStanfordNlpTreesTreePrint_getSortedDepsWithEduStanfordNlpTreesTree_withJavaUtilFunctionPredicate_(self, indexedTree, self->dependencyWordFilter_);
      for (id<EduStanfordNlpTreesDependency> __strong d in nil_chk(sortedDeps)) {
        [((JavaIoPrintWriter *) nil_chk(pw)) printlnWithNSString:[((id<EduStanfordNlpTreesDependency>) nil_chk(d)) toStringWithNSString:@"predicate"]];
      }
      [((JavaIoPrintWriter *) nil_chk(pw)) println];
    }
    if ([self->formats_ containsKeyWithId:@"conll2007"]) {
      EduStanfordNlpTreesTree *it = [((EduStanfordNlpTreesTree *) nil_chk(outputTree)) deepCopyWithEduStanfordNlpTreesTreeFactory:[outputTree treeFactory] withEduStanfordNlpLingLabelFactory:EduStanfordNlpLingCoreLabel_factory()];
      [((EduStanfordNlpTreesTree *) nil_chk(it)) indexLeaves];
      id<JavaUtilList> tagged = [it taggedLabeledYield];
      id<JavaUtilList> sortedDeps = EduStanfordNlpTreesTreePrint_getSortedDepsWithEduStanfordNlpTreesTree_withJavaUtilFunctionPredicate_(self, it, EduStanfordNlpUtilFilters_acceptFilter());
      for (id<EduStanfordNlpTreesDependency> __strong d in nil_chk(sortedDeps)) {
        if (![((id<JavaUtilFunctionPredicate>) nil_chk(self->dependencyFilter_)) testWithId:d]) {
          continue;
        }
        if (!([EduStanfordNlpLingHasIndex_class_() isInstance:[((id<EduStanfordNlpTreesDependency>) nil_chk(d)) dependent]]) || !([EduStanfordNlpLingHasIndex_class_() isInstance:[d governor]])) {
          @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Expected labels to have indices");
        }
        id<EduStanfordNlpLingHasIndex> dep = (id<EduStanfordNlpLingHasIndex>) cast_check([d dependent], EduStanfordNlpLingHasIndex_class_());
        id<EduStanfordNlpLingHasIndex> gov = (id<EduStanfordNlpLingHasIndex>) cast_check([d governor], EduStanfordNlpLingHasIndex_class_());
        jint depi = [((id<EduStanfordNlpLingHasIndex>) nil_chk(dep)) index];
        jint govi = [((id<EduStanfordNlpLingHasIndex>) nil_chk(gov)) index];
        EduStanfordNlpLingCoreLabel *w = [((id<JavaUtilList>) nil_chk(tagged)) getWithInt:depi - 1];
        NSString *tag = EduStanfordNlpProcessPTBTokenizer_ptbToken2TextWithNSString_([((EduStanfordNlpLingCoreLabel *) nil_chk(w)) tag]);
        NSString *word = EduStanfordNlpProcessPTBTokenizer_ptbToken2TextWithNSString_([w word]);
        NSString *lemma = @"_";
        NSString *feats = @"_";
        NSString *pHead = @"_";
        NSString *pDepRel = @"_";
        NSString *depRel;
        if ([d name] != nil) {
          depRel = [nil_chk([d name]) description];
        }
        else {
          depRel = (govi == 0) ? @"ROOT" : @"NULL";
        }
        (void) [((JavaIoPrintWriter *) nil_chk(pw)) printfWithNSString:@"%d\t%s\t%s\t%s\t%s\t%s\t%d\t%s\t%s\t%s%n" withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(depi), word, lemma, tag, tag, feats, JavaLangInteger_valueOfWithInt_(govi), depRel, pHead, pDepRel } count:10 type:NSObject_class_()]];
      }
      [((JavaIoPrintWriter *) nil_chk(pw)) println];
    }
    if ([self->formats_ containsKeyWithId:@"conllStyleDependencies"]) {
      EduStanfordNlpTreesBobChrisTreeNormalizer *tn = new_EduStanfordNlpTreesBobChrisTreeNormalizer_init();
      EduStanfordNlpTreesTree *indexedTree = [((EduStanfordNlpTreesTree *) nil_chk(outputTree)) deepCopyWithEduStanfordNlpTreesTreeFactory:[outputTree treeFactory] withEduStanfordNlpLingLabelFactory:EduStanfordNlpLingCoreLabel_factory()];
      for (EduStanfordNlpTreesTree * __strong node in nil_chk(indexedTree)) {
        if ([((NSString *) nil_chk([((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(node)) label])) value])) hasPrefix:@"NML"]) {
          [((id<EduStanfordNlpLingLabel>) nil_chk([node label])) setValueWithNSString:@"NP"];
        }
      }
      indexedTree = [tn normalizeWholeTreeWithEduStanfordNlpTreesTree:indexedTree withEduStanfordNlpTreesTreeFactory:[outputTree treeFactory]];
      [((EduStanfordNlpTreesTree *) nil_chk(indexedTree)) indexLeaves];
      id<JavaUtilSet> depsSet = nil;
      jboolean failed = false;
      @try {
        depsSet = [indexedTree mapDependenciesWithJavaUtilFunctionPredicate:self->dependencyFilter_ withEduStanfordNlpTreesHeadFinder:self->hf_];
      }
      @catch (JavaLangException *e) {
        failed = true;
      }
      if (failed) {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"failed: "];
        [JreLoadStatic(JavaLangSystem, err) printlnWithId:t];
        [JreLoadStatic(JavaLangSystem, err) println];
      }
      else {
        id<JavaUtilMap> deps = EduStanfordNlpUtilGenerics_newHashMap();
        for (id<EduStanfordNlpTreesDependency> __strong dep in nil_chk(depsSet)) {
          EduStanfordNlpLingCoreLabel *child = (EduStanfordNlpLingCoreLabel *) cast_chk([((id<EduStanfordNlpTreesDependency>) nil_chk(dep)) dependent], [EduStanfordNlpLingCoreLabel class]);
          EduStanfordNlpLingCoreLabel *parent = (EduStanfordNlpLingCoreLabel *) cast_chk([dep governor], [EduStanfordNlpLingCoreLabel class]);
          JavaLangInteger *childIndex = [((EduStanfordNlpLingCoreLabel *) nil_chk(child)) getWithIOSClass:EduStanfordNlpLingCoreAnnotations_IndexAnnotation_class_()];
          JavaLangInteger *parentIndex = [((EduStanfordNlpLingCoreLabel *) nil_chk(parent)) getWithIOSClass:EduStanfordNlpLingCoreAnnotations_IndexAnnotation_class_()];
          (void) [((id<JavaUtilMap>) nil_chk(deps)) putWithId:childIndex withId:parentIndex];
        }
        jboolean foundRoot = false;
        jint index = 1;
        for (EduStanfordNlpTreesTree * __strong node in nil_chk([indexedTree getLeaves])) {
          NSString *word = [((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(node)) label])) value];
          NSString *tag = [((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk([node parentWithEduStanfordNlpTreesTree:indexedTree])) label])) value];
          jint parent = 0;
          if ([((id<JavaUtilMap>) nil_chk(deps)) containsKeyWithId:JavaLangInteger_valueOfWithInt_(index)]) {
            parent = [((JavaLangInteger *) nil_chk([deps getWithId:JavaLangInteger_valueOfWithInt_(index)])) intValue];
          }
          else {
            if (foundRoot) {
              @throw new_JavaLangRuntimeException_init();
            }
            foundRoot = true;
          }
          [((JavaIoPrintWriter *) nil_chk(pw)) printlnWithNSString:JreStrcat("IC$C$CI", index, 0x0009, word, 0x0009, tag, 0x0009, parent)];
          index++;
        }
        [((JavaIoPrintWriter *) nil_chk(pw)) println];
      }
    }
    if ([self->formats_ containsKeyWithId:@"typedDependencies"]) {
      EduStanfordNlpTreesGrammaticalStructure *gs = [((id<EduStanfordNlpTreesGrammaticalStructureFactory>) nil_chk(self->gsf_)) newGrammaticalStructureWithEduStanfordNlpTreesTree:outputTree];
      if (self->basicDependencies_) {
        EduStanfordNlpTreesTreePrint_printWithJavaUtilCollection_withBoolean_withJavaIoPrintWriter_([((EduStanfordNlpTreesGrammaticalStructure *) nil_chk(gs)) typedDependencies], self->includeTags_, pw);
      }
      if (self->nonCollapsedDependencies_) {
        EduStanfordNlpTreesTreePrint_printWithJavaUtilCollection_withBoolean_withJavaIoPrintWriter_([((EduStanfordNlpTreesGrammaticalStructure *) nil_chk(gs)) allTypedDependencies], self->includeTags_, pw);
      }
      if (self->nonCollapsedDependenciesSeparated_) {
        EduStanfordNlpTreesTreePrint_printWithJavaUtilCollection_withNSString_withBoolean_withJavaIoPrintWriter_([((EduStanfordNlpTreesGrammaticalStructure *) nil_chk(gs)) allTypedDependencies], @"separator", self->includeTags_, pw);
      }
      if (self->collapsedDependencies_) {
        EduStanfordNlpTreesTreePrint_printWithJavaUtilCollection_withBoolean_withJavaIoPrintWriter_([((EduStanfordNlpTreesGrammaticalStructure *) nil_chk(gs)) typedDependenciesCollapsedWithEduStanfordNlpTreesGrammaticalStructure_Extras:JreLoadEnum(EduStanfordNlpTreesGrammaticalStructure_Extras, MAXIMAL)], self->includeTags_, pw);
      }
      if (self->CCPropagatedDependencies_) {
        EduStanfordNlpTreesTreePrint_printWithJavaUtilCollection_withBoolean_withJavaIoPrintWriter_([((EduStanfordNlpTreesGrammaticalStructure *) nil_chk(gs)) typedDependenciesCCprocessed], self->includeTags_, pw);
      }
      if (self->treeDependencies_) {
        EduStanfordNlpTreesTreePrint_printWithJavaUtilCollection_withBoolean_withJavaIoPrintWriter_([((EduStanfordNlpTreesGrammaticalStructure *) nil_chk(gs)) typedDependenciesCollapsedTree], self->includeTags_, pw);
      }
    }
    if ([self->formats_ containsKeyWithId:@"typedDependenciesCollapsed"]) {
      EduStanfordNlpTreesGrammaticalStructure *gs = [((id<EduStanfordNlpTreesGrammaticalStructureFactory>) nil_chk(self->gsf_)) newGrammaticalStructureWithEduStanfordNlpTreesTree:outputTree];
      EduStanfordNlpTreesTreePrint_printWithJavaUtilCollection_withBoolean_withJavaIoPrintWriter_([((EduStanfordNlpTreesGrammaticalStructure *) nil_chk(gs)) typedDependenciesCCprocessed], self->includeTags_, pw);
    }
  }
  [((JavaIoPrintWriter *) nil_chk(pw)) flush];
}

id<JavaUtilList> EduStanfordNlpTreesTreePrint_getSortedDepsWithEduStanfordNlpTreesTree_withJavaUtilFunctionPredicate_(EduStanfordNlpTreesTreePrint *self, EduStanfordNlpTreesTree *tree, id<JavaUtilFunctionPredicate> filter) {
  if (self->gsf_ != nil) {
    EduStanfordNlpTreesGrammaticalStructure *gs = [self->gsf_ newGrammaticalStructureWithEduStanfordNlpTreesTree:tree];
    id<JavaUtilCollection> deps = [((EduStanfordNlpTreesGrammaticalStructure *) nil_chk(gs)) typedDependenciesWithEduStanfordNlpTreesGrammaticalStructure_Extras:JreLoadEnum(EduStanfordNlpTreesGrammaticalStructure_Extras, NONE)];
    id<JavaUtilList> sortedDeps = new_JavaUtilArrayList_init();
    for (EduStanfordNlpTreesTypedDependency * __strong dep in nil_chk(deps)) {
      [sortedDeps addWithId:new_EduStanfordNlpTreesNamedDependency_initWithEduStanfordNlpLingLabel_withEduStanfordNlpLingLabel_withId_([((EduStanfordNlpTreesTypedDependency *) nil_chk(dep)) gov], [dep dep], [((EduStanfordNlpTreesGrammaticalRelation *) nil_chk([dep reln])) description])];
    }
    JavaUtilCollections_sortWithJavaUtilList_withJavaUtilComparator_(sortedDeps, EduStanfordNlpTreesDependencies_dependencyIndexComparator());
    return sortedDeps;
  }
  else {
    id<JavaUtilSet> depsSet = [((EduStanfordNlpTreesTree *) nil_chk(tree)) mapDependenciesWithJavaUtilFunctionPredicate:filter withEduStanfordNlpTreesHeadFinder:self->hf_ withNSString:@"root"];
    id<JavaUtilList> sortedDeps = new_JavaUtilArrayList_initWithJavaUtilCollection_(depsSet);
    JavaUtilCollections_sortWithJavaUtilList_withJavaUtilComparator_(sortedDeps, EduStanfordNlpTreesDependencies_dependencyIndexComparator());
    return sortedDeps;
  }
}

EduStanfordNlpTreesTree *EduStanfordNlpTreesTreePrint_getCollocationProcessedTreeWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesHeadFinder_(EduStanfordNlpTreesTree *tree, id<EduStanfordNlpTreesHeadFinder> hf) {
  EduStanfordNlpTreesTreePrint_initialize();
  @synchronized(EduStanfordNlpTreesTreePrint_class_()) {
    if (EduStanfordNlpTreesTreePrint_wnc == nil) {
      @try {
        IOSClass *cl = IOSClass_forName_(@"edu.stanford.nlp.trees.WordNetInstance");
        EduStanfordNlpTreesTreePrint_wnc = (id<EduStanfordNlpTreesWordNetConnection>) cast_check([((IOSClass *) nil_chk(cl)) newInstance], EduStanfordNlpTreesWordNetConnection_class_());
      }
      @catch (JavaLangException *e) {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"Couldn't open WordNet Connection.  Aborting collocation detection."];
        [((JavaLangException *) nil_chk(e)) printStackTrace];
        EduStanfordNlpTreesTreePrint_wnc = nil;
      }
    }
    if (EduStanfordNlpTreesTreePrint_wnc != nil) {
      EduStanfordNlpTreesCollocationFinder *cf = new_EduStanfordNlpTreesCollocationFinder_initWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesWordNetConnection_withEduStanfordNlpTreesHeadFinder_(tree, EduStanfordNlpTreesTreePrint_wnc, hf);
      tree = [cf getMangledTree];
    }
    else {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"ERROR: WordNetConnection unavailable for collocations."];
    }
    return tree;
  }
}

EduStanfordNlpTreesTree *EduStanfordNlpTreesTreePrint_markHeadNodesWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_(EduStanfordNlpTreesTreePrint *self, EduStanfordNlpTreesTree *t, EduStanfordNlpTreesTree *head) {
  if ([((EduStanfordNlpTreesTree *) nil_chk(t)) isLeaf]) {
    return t;
  }
  id<EduStanfordNlpLingLabel> newLabel;
  if (t == head) {
    newLabel = EduStanfordNlpTreesTreePrint_headMarkWithEduStanfordNlpLingLabel_([t label]);
  }
  else {
    newLabel = [t label];
  }
  EduStanfordNlpTreesTree *newHead = [((id<EduStanfordNlpTreesHeadFinder>) nil_chk(self->hf_)) determineHeadWithEduStanfordNlpTreesTree:t];
  return [((id<EduStanfordNlpTreesTreeFactory>) nil_chk([t treeFactory])) newTreeNodeWithEduStanfordNlpLingLabel:newLabel withJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_(EduStanfordNlpTreesTreePrint_headMarkChildrenWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_(self, t, newHead))];
}

id<EduStanfordNlpLingLabel> EduStanfordNlpTreesTreePrint_headMarkWithEduStanfordNlpLingLabel_(id<EduStanfordNlpLingLabel> l) {
  EduStanfordNlpTreesTreePrint_initialize();
  id<EduStanfordNlpLingLabel> l1 = [((id<EduStanfordNlpLingLabelFactory>) nil_chk([((id<EduStanfordNlpLingLabel>) nil_chk(l)) labelFactory])) newLabelWithEduStanfordNlpLingLabel:l];
  [((id<EduStanfordNlpLingLabel>) nil_chk(l1)) setValueWithNSString:JreStrcat("$$", [l1 value], EduStanfordNlpTreesTreePrint_headMark)];
  return l1;
}

IOSObjectArray *EduStanfordNlpTreesTreePrint_headMarkChildrenWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_(EduStanfordNlpTreesTreePrint *self, EduStanfordNlpTreesTree *t, EduStanfordNlpTreesTree *head) {
  IOSObjectArray *kids = [((EduStanfordNlpTreesTree *) nil_chk(t)) children];
  IOSObjectArray *newKids = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(kids))->size_ type:EduStanfordNlpTreesTree_class_()];
  for (jint i = 0, n = kids->size_; i < n; i++) {
    (void) IOSObjectArray_Set(newKids, i, EduStanfordNlpTreesTreePrint_markHeadNodesWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_(self, IOSObjectArray_Get(kids, i), head));
  }
  return newKids;
}

void EduStanfordNlpTreesTreePrint_mainWithNSStringArray_(IOSObjectArray *args) {
  EduStanfordNlpTreesTreePrint_initialize();
  NSString *format = @"penn";
  NSString *options = @"";
  NSString *tlpName = @"edu.stanford.nlp.trees.PennTreebankLanguagePack";
  NSString *hfName = nil;
  id<JavaUtilMap> flagMap = EduStanfordNlpUtilGenerics_newHashMap();
  (void) [((id<JavaUtilMap>) nil_chk(flagMap)) putWithId:@"-format" withId:JavaLangInteger_valueOfWithInt_(1)];
  (void) [flagMap putWithId:@"-options" withId:JavaLangInteger_valueOfWithInt_(1)];
  (void) [flagMap putWithId:@"-tLP" withId:JavaLangInteger_valueOfWithInt_(1)];
  (void) [flagMap putWithId:@"-hf" withId:JavaLangInteger_valueOfWithInt_(1)];
  id<JavaUtilMap> argsMap = EduStanfordNlpUtilStringUtils_argsToMapWithNSStringArray_withJavaUtilMap_(args, flagMap);
  args = [((id<JavaUtilMap>) nil_chk(argsMap)) getWithId:nil];
  if ([((id<JavaUtilSet>) nil_chk([argsMap keySet])) containsWithId:@"-format"]) {
    format = IOSObjectArray_Get(nil_chk([argsMap getWithId:@"-format"]), 0);
  }
  if ([((id<JavaUtilSet>) nil_chk([argsMap keySet])) containsWithId:@"-options"]) {
    options = IOSObjectArray_Get(nil_chk([argsMap getWithId:@"-options"]), 0);
  }
  if ([((id<JavaUtilSet>) nil_chk([argsMap keySet])) containsWithId:@"-tLP"]) {
    tlpName = IOSObjectArray_Get(nil_chk([argsMap getWithId:@"-tLP"]), 0);
  }
  if ([((id<JavaUtilSet>) nil_chk([argsMap keySet])) containsWithId:@"-hf"]) {
    hfName = IOSObjectArray_Get(nil_chk([argsMap getWithId:@"-hf"]), 0);
  }
  id<EduStanfordNlpTreesTreebankLanguagePack> tlp;
  @try {
    tlp = (id<EduStanfordNlpTreesTreebankLanguagePack>) cast_check([((IOSClass *) nil_chk(IOSClass_forName_(tlpName))) newInstance], EduStanfordNlpTreesTreebankLanguagePack_class_());
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    return;
  }
  id<EduStanfordNlpTreesHeadFinder> hf;
  if (hfName != nil) {
    @try {
      hf = (id<EduStanfordNlpTreesHeadFinder>) cast_check([((IOSClass *) nil_chk(IOSClass_forName_(hfName))) newInstance], EduStanfordNlpTreesHeadFinder_class_());
    }
    @catch (JavaLangException *e) {
      [((JavaLangException *) nil_chk(e)) printStackTrace];
      return;
    }
  }
  else {
    hf = [((id<EduStanfordNlpTreesTreebankLanguagePack>) nil_chk(tlp)) headFinder];
  }
  EduStanfordNlpTreesTreePrint *print = new_EduStanfordNlpTreesTreePrint_initWithNSString_withNSString_withEduStanfordNlpTreesTreebankLanguagePack_withEduStanfordNlpTreesHeadFinder_withEduStanfordNlpTreesHeadFinder_(format, options, tlp, (hf == nil) ? [((id<EduStanfordNlpTreesTreebankLanguagePack>) nil_chk(tlp)) headFinder] : hf, [((id<EduStanfordNlpTreesTreebankLanguagePack>) nil_chk(tlp)) typedDependencyHeadFinder]);
  id<JavaUtilIterator> i;
  if (((IOSObjectArray *) nil_chk(args))->size_ > 0) {
    EduStanfordNlpTreesTreebank *trees;
    id<EduStanfordNlpTreesTreeReaderFactory> trf;
    if ([((id<JavaUtilSet>) nil_chk([argsMap keySet])) containsWithId:@"-useTLPTreeReader"]) {
      trf = [tlp treeReaderFactory];
    }
    else {
      trf = JreLoadStatic(EduStanfordNlpTreesTreePrint_$Lambda$2, instance);
    }
    trees = new_EduStanfordNlpTreesDiskTreebank_initWithEduStanfordNlpTreesTreeReaderFactory_(trf);
    [trees loadPathWithNSString:IOSObjectArray_Get(args, 0)];
    i = [trees iterator];
  }
  else {
    i = [((id<EduStanfordNlpProcessTokenizerFactory>) nil_chk([tlp treeTokenizerFactory])) getTokenizerWithJavaIoReader:new_JavaIoBufferedReader_initWithJavaIoReader_(new_JavaIoInputStreamReader_initWithJavaIoInputStream_(JreLoadStatic(JavaLangSystem, in)))];
  }
  while ([((id<JavaUtilIterator>) nil_chk(i)) hasNext]) {
    [print printTreeWithEduStanfordNlpTreesTree:[i next]];
  }
}

NSString *EduStanfordNlpTreesTreePrint_toStringWithJavaUtilCollection_withNSString_withBoolean_(id<JavaUtilCollection> dependencies, NSString *format, jboolean includeTags) {
  EduStanfordNlpTreesTreePrint_initialize();
  if (format != nil && [format isEqual:@"xml"]) {
    return EduStanfordNlpTreesTreePrint_toXMLStringWithJavaUtilCollection_withBoolean_(dependencies, includeTags);
  }
  else if (format != nil && [format isEqual:@"readable"]) {
    return EduStanfordNlpTreesTreePrint_toReadableStringWithJavaUtilCollection_(dependencies);
  }
  else if (format != nil && [format isEqual:@"separator"]) {
    return EduStanfordNlpTreesTreePrint_toStringWithJavaUtilCollection_withBoolean_withBoolean_(dependencies, true, includeTags);
  }
  else {
    return EduStanfordNlpTreesTreePrint_toStringWithJavaUtilCollection_withBoolean_withBoolean_(dependencies, false, includeTags);
  }
}

NSString *EduStanfordNlpTreesTreePrint_toStringWithJavaUtilCollection_withBoolean_withBoolean_(id<JavaUtilCollection> dependencies, jboolean extraSep, jboolean includeTags) {
  EduStanfordNlpTreesTreePrint_initialize();
  EduStanfordNlpLingCoreLabel_OutputFormat *labelFormat = (includeTags) ? JreLoadEnum(EduStanfordNlpLingCoreLabel_OutputFormat, VALUE_TAG_INDEX) : JreLoadEnum(EduStanfordNlpLingCoreLabel_OutputFormat, VALUE_INDEX);
  JavaLangStringBuilder *buf = new_JavaLangStringBuilder_init();
  if (extraSep) {
    id<JavaUtilList> extraDeps = new_JavaUtilArrayList_init();
    for (EduStanfordNlpTreesTypedDependency * __strong td in nil_chk(dependencies)) {
      if ([((EduStanfordNlpTreesTypedDependency *) nil_chk(td)) extra]) {
        [extraDeps addWithId:td];
      }
      else {
        (void) [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:[td toStringWithEduStanfordNlpLingCoreLabel_OutputFormat:labelFormat]])) appendWithChar:0x000a];
      }
    }
    if (![extraDeps isEmpty]) {
      (void) [buf appendWithNSString:@"======\n"];
      for (EduStanfordNlpTreesTypedDependency * __strong td in extraDeps) {
        (void) [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:[((EduStanfordNlpTreesTypedDependency *) nil_chk(td)) toStringWithEduStanfordNlpLingCoreLabel_OutputFormat:labelFormat]])) appendWithChar:0x000a];
      }
    }
  }
  else {
    for (EduStanfordNlpTreesTypedDependency * __strong td in nil_chk(dependencies)) {
      (void) [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:[((EduStanfordNlpTreesTypedDependency *) nil_chk(td)) toStringWithEduStanfordNlpLingCoreLabel_OutputFormat:labelFormat]])) appendWithChar:0x000a];
    }
  }
  return [buf description];
}

NSString *EduStanfordNlpTreesTreePrint_toReadableStringWithJavaUtilCollection_(id<JavaUtilCollection> dependencies) {
  EduStanfordNlpTreesTreePrint_initialize();
  JavaLangStringBuilder *buf = new_JavaLangStringBuilder_init();
  (void) [buf appendWithNSString:NSString_formatWithNSString_withNSObjectArray_(@"%-20s%-20s%-20s%n", [IOSObjectArray newArrayWithObjects:(id[]){ @"dep", @"reln", @"gov" } count:3 type:NSObject_class_()])];
  (void) [buf appendWithNSString:NSString_formatWithNSString_withNSObjectArray_(@"%-20s%-20s%-20s%n", [IOSObjectArray newArrayWithObjects:(id[]){ @"---", @"----", @"---" } count:3 type:NSObject_class_()])];
  for (EduStanfordNlpTreesTypedDependency * __strong td in nil_chk(dependencies)) {
    (void) [buf appendWithNSString:NSString_formatWithNSString_withNSObjectArray_(@"%-20s%-20s%-20s%n", [IOSObjectArray newArrayWithObjects:(id[]){ [((EduStanfordNlpTreesTypedDependency *) nil_chk(td)) dep], [td reln], [td gov] } count:3 type:NSObject_class_()])];
  }
  return [buf description];
}

NSString *EduStanfordNlpTreesTreePrint_toXMLStringWithJavaUtilCollection_withBoolean_(id<JavaUtilCollection> dependencies, jboolean includeTags) {
  EduStanfordNlpTreesTreePrint_initialize();
  JavaLangStringBuilder *buf = new_JavaLangStringBuilder_initWithNSString_(@"<dependencies style=\"typed\">\n");
  for (EduStanfordNlpTreesTypedDependency * __strong td in nil_chk(dependencies)) {
    NSString *reln = [((EduStanfordNlpTreesGrammaticalRelation *) nil_chk([((EduStanfordNlpTreesTypedDependency *) nil_chk(td)) reln])) description];
    NSString *gov = [((EduStanfordNlpLingIndexedWord *) nil_chk([td gov])) value];
    NSString *govTag = [((EduStanfordNlpLingIndexedWord *) nil_chk([td gov])) tag];
    jint govIdx = [((EduStanfordNlpLingIndexedWord *) nil_chk([td gov])) index];
    NSString *dep = [((EduStanfordNlpLingIndexedWord *) nil_chk([td dep])) value];
    NSString *depTag = [((EduStanfordNlpLingIndexedWord *) nil_chk([td dep])) tag];
    jint depIdx = [((EduStanfordNlpLingIndexedWord *) nil_chk([td dep])) index];
    jboolean extra = [td extra];
    NSString *govCopy = @"";
    jint copyGov = [((EduStanfordNlpLingIndexedWord *) nil_chk([td gov])) copyCount];
    if (copyGov > 0) {
      govCopy = JreStrcat("$IC", @" copy=\"", copyGov, '"');
    }
    NSString *depCopy = @"";
    jint copyDep = [((EduStanfordNlpLingIndexedWord *) nil_chk([td dep])) copyCount];
    if (copyDep > 0) {
      depCopy = JreStrcat("$IC", @" copy=\"", copyDep, '"');
    }
    NSString *govTagAttribute = (includeTags && govTag != nil) ? JreStrcat("$$C", @" tag=\"", govTag, '"') : @"";
    NSString *depTagAttribute = (includeTags && depTag != nil) ? JreStrcat("$$C", @" tag=\"", depTag, '"') : @"";
    NSString *extraAttr = @"";
    if (extra) {
      extraAttr = @" extra=\"yes\"";
    }
    (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"  <dep type=\""])) appendWithNSString:EduStanfordNlpUtilXMLUtils_escapeXMLWithNSString_(reln)])) appendWithChar:'"'])) appendWithNSString:extraAttr])) appendWithNSString:@">\n"];
    (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"    <governor idx=\""])) appendWithInt:govIdx])) appendWithChar:'"'])) appendWithNSString:govCopy])) appendWithNSString:govTagAttribute])) appendWithChar:'>'])) appendWithNSString:EduStanfordNlpUtilXMLUtils_escapeXMLWithNSString_(gov)])) appendWithNSString:@"</governor>\n"];
    (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"    <dependent idx=\""])) appendWithInt:depIdx])) appendWithChar:'"'])) appendWithNSString:depCopy])) appendWithNSString:depTagAttribute])) appendWithChar:'>'])) appendWithNSString:EduStanfordNlpUtilXMLUtils_escapeXMLWithNSString_(dep)])) appendWithNSString:@"</dependent>\n"];
    (void) [buf appendWithNSString:@"  </dep>\n"];
  }
  (void) [buf appendWithNSString:@"</dependencies>"];
  return [buf description];
}

void EduStanfordNlpTreesTreePrint_printWithJavaUtilCollection_withBoolean_withJavaIoPrintWriter_(id<JavaUtilCollection> dependencies, jboolean includeTags, JavaIoPrintWriter *pw) {
  EduStanfordNlpTreesTreePrint_initialize();
  [((JavaIoPrintWriter *) nil_chk(pw)) printlnWithNSString:EduStanfordNlpTreesTreePrint_toStringWithJavaUtilCollection_withBoolean_withBoolean_(dependencies, false, includeTags)];
}

void EduStanfordNlpTreesTreePrint_printWithJavaUtilCollection_withNSString_withBoolean_withJavaIoPrintWriter_(id<JavaUtilCollection> dependencies, NSString *format, jboolean includeTags, JavaIoPrintWriter *pw) {
  EduStanfordNlpTreesTreePrint_initialize();
  [((JavaIoPrintWriter *) nil_chk(pw)) printlnWithNSString:EduStanfordNlpTreesTreePrint_toStringWithJavaUtilCollection_withNSString_withBoolean_(dependencies, format, includeTags)];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTreesTreePrint)

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpTreesTreePrint_$Lambda$1)

@implementation EduStanfordNlpTreesTreePrint_$Lambda$1

- (EduStanfordNlpTreesTree *)transformTreeWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t1 {
  t1 = [((EduStanfordNlpTreesTree *) nil_chk(t1)) treeSkeletonCopy];
  for (EduStanfordNlpTreesTree * __strong subtree in nil_chk(t1)) {
    if ([((EduStanfordNlpTreesTree *) nil_chk(subtree)) isLeaf]) {
      id<EduStanfordNlpLingLabel> oldLabel = [subtree label];
      NSString *translation = [((EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap *) nil_chk(EduStanfordNlpTreesInternationalPennchineseChineseEnglishWordMap_getInstance())) getFirstTranslationWithNSString:[((id<EduStanfordNlpLingLabel>) nil_chk(oldLabel)) value]];
      if (translation == nil) translation = @"[UNK]";
      id<EduStanfordNlpLingLabel> newLabel = new_EduStanfordNlpLingStringLabel_initWithNSString_(JreStrcat("$C$", [oldLabel value], ':', translation));
      [subtree setLabelWithEduStanfordNlpLingLabel:newLabel];
    }
  }
  return t1;
}

+ (void)initialize {
  if (self == [EduStanfordNlpTreesTreePrint_$Lambda$1 class]) {
    EduStanfordNlpTreesTreePrint_$Lambda$1_instance = new_EduStanfordNlpTreesTreePrint_$Lambda$1_init();
    J2OBJC_SET_INITIALIZED(EduStanfordNlpTreesTreePrint_$Lambda$1)
  }
}

@end

void EduStanfordNlpTreesTreePrint_$Lambda$1_init(EduStanfordNlpTreesTreePrint_$Lambda$1 *self) {
  NSObject_init(self);
}

EduStanfordNlpTreesTreePrint_$Lambda$1 *new_EduStanfordNlpTreesTreePrint_$Lambda$1_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesTreePrint_$Lambda$1, init)
}

EduStanfordNlpTreesTreePrint_$Lambda$1 *create_EduStanfordNlpTreesTreePrint_$Lambda$1_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesTreePrint_$Lambda$1, init)
}

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpTreesTreePrint_$Lambda$2)

@implementation EduStanfordNlpTreesTreePrint_$Lambda$2

- (id<EduStanfordNlpTreesTreeReader>)newTreeReaderWithJavaIoReader:(JavaIoReader *)inArg {
  return new_EduStanfordNlpTreesPennTreeReader_initWithJavaIoReader_withEduStanfordNlpTreesTreeFactory_withEduStanfordNlpTreesTreeNormalizer_(inArg, new_EduStanfordNlpTreesLabeledScoredTreeFactory_initWithEduStanfordNlpLingLabelFactory_(new_EduStanfordNlpLingStringLabelFactory_init()), new_EduStanfordNlpTreesTreeNormalizer_init());
}

+ (void)initialize {
  if (self == [EduStanfordNlpTreesTreePrint_$Lambda$2 class]) {
    EduStanfordNlpTreesTreePrint_$Lambda$2_instance = new_EduStanfordNlpTreesTreePrint_$Lambda$2_init();
    J2OBJC_SET_INITIALIZED(EduStanfordNlpTreesTreePrint_$Lambda$2)
  }
}

@end

void EduStanfordNlpTreesTreePrint_$Lambda$2_init(EduStanfordNlpTreesTreePrint_$Lambda$2 *self) {
  NSObject_init(self);
}

EduStanfordNlpTreesTreePrint_$Lambda$2 *new_EduStanfordNlpTreesTreePrint_$Lambda$2_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesTreePrint_$Lambda$2, init)
}

EduStanfordNlpTreesTreePrint_$Lambda$2 *create_EduStanfordNlpTreesTreePrint_$Lambda$2_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesTreePrint_$Lambda$2, init)
}
