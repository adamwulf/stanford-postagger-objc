//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/trees/FilteringTreeReader.java
//

#include "J2ObjC_source.h"
#include "edu/stanford/nlp/trees/FilteringTreeReader.h"
#include "edu/stanford/nlp/trees/Tree.h"
#include "edu/stanford/nlp/trees/TreeReader.h"
#include "java/util/function/Predicate.h"

@interface EduStanfordNlpTreesFilteringTreeReader () {
 @public
  id<EduStanfordNlpTreesTreeReader> tr_;
  id<JavaUtilFunctionPredicate> f_;
}

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpTreesFilteringTreeReader, tr_, id<EduStanfordNlpTreesTreeReader>)
J2OBJC_FIELD_SETTER(EduStanfordNlpTreesFilteringTreeReader, f_, id<JavaUtilFunctionPredicate>)

@implementation EduStanfordNlpTreesFilteringTreeReader

- (instancetype)initWithEduStanfordNlpTreesTreeReader:(id<EduStanfordNlpTreesTreeReader>)tr
                        withJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)f {
  EduStanfordNlpTreesFilteringTreeReader_initWithEduStanfordNlpTreesTreeReader_withJavaUtilFunctionPredicate_(self, tr, f);
  return self;
}

- (EduStanfordNlpTreesTree *)readTree {
  EduStanfordNlpTreesTree *t;
  do {
    t = [((id<EduStanfordNlpTreesTreeReader>) nil_chk(tr_)) readTree];
  }
  while (t != nil && ![((id<JavaUtilFunctionPredicate>) nil_chk(f_)) testWithId:t]);
  return t;
}

- (void)close {
  [((id<EduStanfordNlpTreesTreeReader>) nil_chk(tr_)) close];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpTreesTreeReader:withJavaUtilFunctionPredicate:);
  methods[1].selector = @selector(readTree);
  methods[2].selector = @selector(close);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "tr_", "LEduStanfordNlpTreesTreeReader;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "f_", "LJavaUtilFunctionPredicate;", .constantValue.asLong = 0, 0x2, -1, -1, 3, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpTreesTreeReader;LJavaUtilFunctionPredicate;", "(Ledu/stanford/nlp/trees/TreeReader;Ljava/util/function/Predicate<Ledu/stanford/nlp/trees/Tree;>;)V", "LJavaIoIOException;", "Ljava/util/function/Predicate<Ledu/stanford/nlp/trees/Tree;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpTreesFilteringTreeReader = { "FilteringTreeReader", "edu.stanford.nlp.trees", ptrTable, methods, fields, 7, 0x1, 3, 2, -1, -1, -1, -1, -1 };
  return &_EduStanfordNlpTreesFilteringTreeReader;
}

@end

void EduStanfordNlpTreesFilteringTreeReader_initWithEduStanfordNlpTreesTreeReader_withJavaUtilFunctionPredicate_(EduStanfordNlpTreesFilteringTreeReader *self, id<EduStanfordNlpTreesTreeReader> tr, id<JavaUtilFunctionPredicate> f) {
  NSObject_init(self);
  self->tr_ = tr;
  self->f_ = f;
}

EduStanfordNlpTreesFilteringTreeReader *new_EduStanfordNlpTreesFilteringTreeReader_initWithEduStanfordNlpTreesTreeReader_withJavaUtilFunctionPredicate_(id<EduStanfordNlpTreesTreeReader> tr, id<JavaUtilFunctionPredicate> f) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesFilteringTreeReader, initWithEduStanfordNlpTreesTreeReader_withJavaUtilFunctionPredicate_, tr, f)
}

EduStanfordNlpTreesFilteringTreeReader *create_EduStanfordNlpTreesFilteringTreeReader_initWithEduStanfordNlpTreesTreeReader_withJavaUtilFunctionPredicate_(id<EduStanfordNlpTreesTreeReader> tr, id<JavaUtilFunctionPredicate> f) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesFilteringTreeReader, initWithEduStanfordNlpTreesTreeReader_withJavaUtilFunctionPredicate_, tr, f)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTreesFilteringTreeReader)
