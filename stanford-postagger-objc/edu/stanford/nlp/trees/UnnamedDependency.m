//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/trees/UnnamedDependency.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/ling/CoreLabel.h"
#include "edu/stanford/nlp/ling/HasWord.h"
#include "edu/stanford/nlp/ling/Label.h"
#include "edu/stanford/nlp/trees/Dependency.h"
#include "edu/stanford/nlp/trees/DependencyFactory.h"
#include "edu/stanford/nlp/trees/UnnamedDependency.h"
#include "edu/stanford/nlp/util/XMLUtils.h"
#include "java/lang/IllegalArgumentException.h"

@interface EduStanfordNlpTreesUnnamedDependency () {
 @public
  id<EduStanfordNlpLingLabel> regent_;
  id<EduStanfordNlpLingLabel> dependent_;
}

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpTreesUnnamedDependency, regent_, id<EduStanfordNlpLingLabel>)
J2OBJC_FIELD_SETTER(EduStanfordNlpTreesUnnamedDependency, dependent_, id<EduStanfordNlpLingLabel>)

inline jlong EduStanfordNlpTreesUnnamedDependency_get_serialVersionUID();
#define EduStanfordNlpTreesUnnamedDependency_serialVersionUID -3768440215342256085LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpTreesUnnamedDependency, serialVersionUID, jlong)

@interface EduStanfordNlpTreesUnnamedDependency_DependencyFactoryHolder : NSObject

- (instancetype)init;

@end

J2OBJC_STATIC_INIT(EduStanfordNlpTreesUnnamedDependency_DependencyFactoryHolder)

inline id<EduStanfordNlpTreesDependencyFactory> EduStanfordNlpTreesUnnamedDependency_DependencyFactoryHolder_get_df();
static id<EduStanfordNlpTreesDependencyFactory> EduStanfordNlpTreesUnnamedDependency_DependencyFactoryHolder_df;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpTreesUnnamedDependency_DependencyFactoryHolder, df, id<EduStanfordNlpTreesDependencyFactory>)

__attribute__((unused)) static void EduStanfordNlpTreesUnnamedDependency_DependencyFactoryHolder_init(EduStanfordNlpTreesUnnamedDependency_DependencyFactoryHolder *self);

__attribute__((unused)) static EduStanfordNlpTreesUnnamedDependency_DependencyFactoryHolder *new_EduStanfordNlpTreesUnnamedDependency_DependencyFactoryHolder_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpTreesUnnamedDependency_DependencyFactoryHolder *create_EduStanfordNlpTreesUnnamedDependency_DependencyFactoryHolder_init();

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpTreesUnnamedDependency_DependencyFactoryHolder)

@interface EduStanfordNlpTreesUnnamedDependency_UnnamedDependencyFactory : NSObject < EduStanfordNlpTreesDependencyFactory >

- (id<EduStanfordNlpTreesDependency>)newDependencyWithEduStanfordNlpLingLabel:(id<EduStanfordNlpLingLabel>)regent
                                                  withEduStanfordNlpLingLabel:(id<EduStanfordNlpLingLabel>)dependent OBJC_METHOD_FAMILY_NONE;

- (id<EduStanfordNlpTreesDependency>)newDependencyWithEduStanfordNlpLingLabel:(id<EduStanfordNlpLingLabel>)regent
                                                  withEduStanfordNlpLingLabel:(id<EduStanfordNlpLingLabel>)dependent
                                                                       withId:(id)name OBJC_METHOD_FAMILY_NONE;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpTreesUnnamedDependency_UnnamedDependencyFactory)

__attribute__((unused)) static void EduStanfordNlpTreesUnnamedDependency_UnnamedDependencyFactory_init(EduStanfordNlpTreesUnnamedDependency_UnnamedDependencyFactory *self);

__attribute__((unused)) static EduStanfordNlpTreesUnnamedDependency_UnnamedDependencyFactory *new_EduStanfordNlpTreesUnnamedDependency_UnnamedDependencyFactory_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpTreesUnnamedDependency_UnnamedDependencyFactory *create_EduStanfordNlpTreesUnnamedDependency_UnnamedDependencyFactory_init();

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpTreesUnnamedDependency_UnnamedDependencyFactory)

@implementation EduStanfordNlpTreesUnnamedDependency

- (instancetype)initWithNSString:(NSString *)regent
                    withNSString:(NSString *)dependent {
  EduStanfordNlpTreesUnnamedDependency_initWithNSString_withNSString_(self, regent, dependent);
  return self;
}

- (instancetype)initWithEduStanfordNlpLingLabel:(id<EduStanfordNlpLingLabel>)regent
                    withEduStanfordNlpLingLabel:(id<EduStanfordNlpLingLabel>)dependent {
  EduStanfordNlpTreesUnnamedDependency_initWithEduStanfordNlpLingLabel_withEduStanfordNlpLingLabel_(self, regent, dependent);
  return self;
}

- (id<EduStanfordNlpLingLabel>)governor {
  return regent_;
}

- (id<EduStanfordNlpLingLabel>)dependent {
  return dependent_;
}

- (id)name {
  return nil;
}

- (NSString *)getTextWithEduStanfordNlpLingLabel:(id<EduStanfordNlpLingLabel>)label {
  if ([EduStanfordNlpLingHasWord_class_() isInstance:label]) {
    NSString *word = [((id<EduStanfordNlpLingHasWord>) nil_chk(((id<EduStanfordNlpLingHasWord>) cast_check(label, EduStanfordNlpLingHasWord_class_())))) word];
    if (word != nil) {
      return word;
    }
  }
  return [((id<EduStanfordNlpLingLabel>) nil_chk(label)) value];
}

- (NSUInteger)hash {
  return ((jint) [((NSString *) nil_chk(regentText_)) hash]) ^ ((jint) [((NSString *) nil_chk(dependentText_)) hash]);
}

- (jboolean)isEqual:(id)o {
  return [self equalsIgnoreNameWithId:o];
}

- (jboolean)equalsIgnoreNameWithId:(id)o {
  if (self == o) {
    return true;
  }
  else if (!([o isKindOfClass:[EduStanfordNlpTreesUnnamedDependency class]])) {
    return false;
  }
  EduStanfordNlpTreesUnnamedDependency *d = (EduStanfordNlpTreesUnnamedDependency *) cast_chk(o, [EduStanfordNlpTreesUnnamedDependency class]);
  NSString *thisHeadWord = regentText_;
  NSString *thisDepWord = dependentText_;
  NSString *headWord = ((EduStanfordNlpTreesUnnamedDependency *) nil_chk(d))->regentText_;
  NSString *depWord = d->dependentText_;
  return [((NSString *) nil_chk(thisHeadWord)) isEqual:headWord] && [((NSString *) nil_chk(thisDepWord)) isEqual:depWord];
}

- (NSString *)description {
  return NSString_formatWithNSString_withNSObjectArray_(@"%s --> %s", [IOSObjectArray newArrayWithObjects:(id[]){ regentText_, dependentText_ } count:2 type:NSObject_class_()]);
}

- (NSString *)toStringWithNSString:(NSString *)format {
  switch (JreIndexOfStr(format, (id[]){ @"xml", @"predicate" }, 2)) {
    case 0:
    return JreStrcat("$$$$$", @"  <dep>\n    <governor>", EduStanfordNlpUtilXMLUtils_escapeXMLWithNSString_([((id<EduStanfordNlpLingLabel>) nil_chk([self governor])) value]), @"</governor>\n    <dependent>", EduStanfordNlpUtilXMLUtils_escapeXMLWithNSString_([((id<EduStanfordNlpLingLabel>) nil_chk([self dependent])) value]), @"</dependent>\n  </dep>");
    case 1:
    return JreStrcat("$@C@C", @"dep(", [self governor], ',', [self dependent], ')');
    default:
    return [self description];
  }
}

- (id<EduStanfordNlpTreesDependencyFactory>)dependencyFactory {
  return JreLoadStatic(EduStanfordNlpTreesUnnamedDependency_DependencyFactoryHolder, df);
}

+ (id<EduStanfordNlpTreesDependencyFactory>)factory {
  return EduStanfordNlpTreesUnnamedDependency_factory();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingLabel;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingLabel;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 4, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 7, 6, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 8, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesDependencyFactory;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesDependencyFactory;", 0x9, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withNSString:);
  methods[1].selector = @selector(initWithEduStanfordNlpLingLabel:withEduStanfordNlpLingLabel:);
  methods[2].selector = @selector(governor);
  methods[3].selector = @selector(dependent);
  methods[4].selector = @selector(name);
  methods[5].selector = @selector(getTextWithEduStanfordNlpLingLabel:);
  methods[6].selector = @selector(hash);
  methods[7].selector = @selector(isEqual:);
  methods[8].selector = @selector(equalsIgnoreNameWithId:);
  methods[9].selector = @selector(description);
  methods[10].selector = @selector(toStringWithNSString:);
  methods[11].selector = @selector(dependencyFactory);
  methods[12].selector = @selector(factory);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpTreesUnnamedDependency_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "regentText_", "LNSString;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "dependentText_", "LNSString;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "regent_", "LEduStanfordNlpLingLabel;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "dependent_", "LEduStanfordNlpLingLabel;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LNSString;", "LEduStanfordNlpLingLabel;LEduStanfordNlpLingLabel;", "getText", "LEduStanfordNlpLingLabel;", "hashCode", "equals", "LNSObject;", "equalsIgnoreName", "toString", "LNSString;", "LEduStanfordNlpTreesUnnamedDependency_DependencyFactoryHolder;LEduStanfordNlpTreesUnnamedDependency_UnnamedDependencyFactory;", "Ljava/lang/Object;Ledu/stanford/nlp/trees/Dependency<Ledu/stanford/nlp/ling/Label;Ledu/stanford/nlp/ling/Label;Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpTreesUnnamedDependency = { "UnnamedDependency", "edu.stanford.nlp.trees", ptrTable, methods, fields, 7, 0x1, 13, 5, -1, 10, -1, 11, -1 };
  return &_EduStanfordNlpTreesUnnamedDependency;
}

@end

void EduStanfordNlpTreesUnnamedDependency_initWithNSString_withNSString_(EduStanfordNlpTreesUnnamedDependency *self, NSString *regent, NSString *dependent) {
  NSObject_init(self);
  if (regent == nil || dependent == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"governor or dependent cannot be null");
  }
  EduStanfordNlpLingCoreLabel *headLabel = new_EduStanfordNlpLingCoreLabel_init();
  [headLabel setValueWithNSString:regent];
  [headLabel setWordWithNSString:regent];
  self->regent_ = headLabel;
  EduStanfordNlpLingCoreLabel *depLabel = new_EduStanfordNlpLingCoreLabel_init();
  [depLabel setValueWithNSString:dependent];
  [depLabel setWordWithNSString:dependent];
  self->dependent_ = depLabel;
  self->regentText_ = regent;
  self->dependentText_ = dependent;
}

EduStanfordNlpTreesUnnamedDependency *new_EduStanfordNlpTreesUnnamedDependency_initWithNSString_withNSString_(NSString *regent, NSString *dependent) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesUnnamedDependency, initWithNSString_withNSString_, regent, dependent)
}

EduStanfordNlpTreesUnnamedDependency *create_EduStanfordNlpTreesUnnamedDependency_initWithNSString_withNSString_(NSString *regent, NSString *dependent) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesUnnamedDependency, initWithNSString_withNSString_, regent, dependent)
}

void EduStanfordNlpTreesUnnamedDependency_initWithEduStanfordNlpLingLabel_withEduStanfordNlpLingLabel_(EduStanfordNlpTreesUnnamedDependency *self, id<EduStanfordNlpLingLabel> regent, id<EduStanfordNlpLingLabel> dependent) {
  NSObject_init(self);
  if (regent == nil || dependent == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"governor or dependent cannot be null");
  }
  self->regent_ = regent;
  self->dependent_ = dependent;
  self->regentText_ = [self getTextWithEduStanfordNlpLingLabel:regent];
  self->dependentText_ = [self getTextWithEduStanfordNlpLingLabel:dependent];
}

EduStanfordNlpTreesUnnamedDependency *new_EduStanfordNlpTreesUnnamedDependency_initWithEduStanfordNlpLingLabel_withEduStanfordNlpLingLabel_(id<EduStanfordNlpLingLabel> regent, id<EduStanfordNlpLingLabel> dependent) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesUnnamedDependency, initWithEduStanfordNlpLingLabel_withEduStanfordNlpLingLabel_, regent, dependent)
}

EduStanfordNlpTreesUnnamedDependency *create_EduStanfordNlpTreesUnnamedDependency_initWithEduStanfordNlpLingLabel_withEduStanfordNlpLingLabel_(id<EduStanfordNlpLingLabel> regent, id<EduStanfordNlpLingLabel> dependent) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesUnnamedDependency, initWithEduStanfordNlpLingLabel_withEduStanfordNlpLingLabel_, regent, dependent)
}

id<EduStanfordNlpTreesDependencyFactory> EduStanfordNlpTreesUnnamedDependency_factory() {
  EduStanfordNlpTreesUnnamedDependency_initialize();
  return JreLoadStatic(EduStanfordNlpTreesUnnamedDependency_DependencyFactoryHolder, df);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTreesUnnamedDependency)

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpTreesUnnamedDependency_DependencyFactoryHolder)

@implementation EduStanfordNlpTreesUnnamedDependency_DependencyFactoryHolder

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpTreesUnnamedDependency_DependencyFactoryHolder_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "df", "LEduStanfordNlpTreesDependencyFactory;", .constantValue.asLong = 0, 0x1a, -1, 0, -1, -1 },
  };
  static const void *ptrTable[] = { &EduStanfordNlpTreesUnnamedDependency_DependencyFactoryHolder_df, "LEduStanfordNlpTreesUnnamedDependency;" };
  static const J2ObjcClassInfo _EduStanfordNlpTreesUnnamedDependency_DependencyFactoryHolder = { "DependencyFactoryHolder", "edu.stanford.nlp.trees", ptrTable, methods, fields, 7, 0xa, 1, 1, 1, -1, -1, -1, -1 };
  return &_EduStanfordNlpTreesUnnamedDependency_DependencyFactoryHolder;
}

+ (void)initialize {
  if (self == [EduStanfordNlpTreesUnnamedDependency_DependencyFactoryHolder class]) {
    EduStanfordNlpTreesUnnamedDependency_DependencyFactoryHolder_df = new_EduStanfordNlpTreesUnnamedDependency_UnnamedDependencyFactory_init();
    J2OBJC_SET_INITIALIZED(EduStanfordNlpTreesUnnamedDependency_DependencyFactoryHolder)
  }
}

@end

void EduStanfordNlpTreesUnnamedDependency_DependencyFactoryHolder_init(EduStanfordNlpTreesUnnamedDependency_DependencyFactoryHolder *self) {
  NSObject_init(self);
}

EduStanfordNlpTreesUnnamedDependency_DependencyFactoryHolder *new_EduStanfordNlpTreesUnnamedDependency_DependencyFactoryHolder_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesUnnamedDependency_DependencyFactoryHolder, init)
}

EduStanfordNlpTreesUnnamedDependency_DependencyFactoryHolder *create_EduStanfordNlpTreesUnnamedDependency_DependencyFactoryHolder_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesUnnamedDependency_DependencyFactoryHolder, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTreesUnnamedDependency_DependencyFactoryHolder)

@implementation EduStanfordNlpTreesUnnamedDependency_UnnamedDependencyFactory

- (id<EduStanfordNlpTreesDependency>)newDependencyWithEduStanfordNlpLingLabel:(id<EduStanfordNlpLingLabel>)regent
                                                  withEduStanfordNlpLingLabel:(id<EduStanfordNlpLingLabel>)dependent {
  return [self newDependencyWithEduStanfordNlpLingLabel:regent withEduStanfordNlpLingLabel:dependent withId:nil];
}

- (id<EduStanfordNlpTreesDependency>)newDependencyWithEduStanfordNlpLingLabel:(id<EduStanfordNlpLingLabel>)regent
                                                  withEduStanfordNlpLingLabel:(id<EduStanfordNlpLingLabel>)dependent
                                                                       withId:(id)name {
  return new_EduStanfordNlpTreesUnnamedDependency_initWithEduStanfordNlpLingLabel_withEduStanfordNlpLingLabel_(regent, dependent);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpTreesUnnamedDependency_UnnamedDependencyFactory_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LEduStanfordNlpTreesDependency;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "LEduStanfordNlpTreesDependency;", 0x1, 0, 3, -1, 4, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(newDependencyWithEduStanfordNlpLingLabel:withEduStanfordNlpLingLabel:);
  methods[1].selector = @selector(newDependencyWithEduStanfordNlpLingLabel:withEduStanfordNlpLingLabel:withId:);
  methods[2].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "newDependency", "LEduStanfordNlpLingLabel;LEduStanfordNlpLingLabel;", "(Ledu/stanford/nlp/ling/Label;Ledu/stanford/nlp/ling/Label;)Ledu/stanford/nlp/trees/Dependency<Ledu/stanford/nlp/ling/Label;Ledu/stanford/nlp/ling/Label;Ljava/lang/Object;>;", "LEduStanfordNlpLingLabel;LEduStanfordNlpLingLabel;LNSObject;", "(Ledu/stanford/nlp/ling/Label;Ledu/stanford/nlp/ling/Label;Ljava/lang/Object;)Ledu/stanford/nlp/trees/Dependency<Ledu/stanford/nlp/ling/Label;Ledu/stanford/nlp/ling/Label;Ljava/lang/Object;>;", "LEduStanfordNlpTreesUnnamedDependency;" };
  static const J2ObjcClassInfo _EduStanfordNlpTreesUnnamedDependency_UnnamedDependencyFactory = { "UnnamedDependencyFactory", "edu.stanford.nlp.trees", ptrTable, methods, NULL, 7, 0xa, 3, 0, 5, -1, -1, -1, -1 };
  return &_EduStanfordNlpTreesUnnamedDependency_UnnamedDependencyFactory;
}

@end

void EduStanfordNlpTreesUnnamedDependency_UnnamedDependencyFactory_init(EduStanfordNlpTreesUnnamedDependency_UnnamedDependencyFactory *self) {
  NSObject_init(self);
}

EduStanfordNlpTreesUnnamedDependency_UnnamedDependencyFactory *new_EduStanfordNlpTreesUnnamedDependency_UnnamedDependencyFactory_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesUnnamedDependency_UnnamedDependencyFactory, init)
}

EduStanfordNlpTreesUnnamedDependency_UnnamedDependencyFactory *create_EduStanfordNlpTreesUnnamedDependency_UnnamedDependencyFactory_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesUnnamedDependency_UnnamedDependencyFactory, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTreesUnnamedDependency_UnnamedDependencyFactory)
