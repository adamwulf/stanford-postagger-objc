//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/trees/SemanticHeadFinder.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/ling/HasCategory.h"
#include "edu/stanford/nlp/ling/HasTag.h"
#include "edu/stanford/nlp/ling/HasWord.h"
#include "edu/stanford/nlp/ling/Label.h"
#include "edu/stanford/nlp/trees/EnglishPatterns.h"
#include "edu/stanford/nlp/trees/ModCollinsHeadFinder.h"
#include "edu/stanford/nlp/trees/PennTreebankLanguagePack.h"
#include "edu/stanford/nlp/trees/SemanticHeadFinder.h"
#include "edu/stanford/nlp/trees/Tree.h"
#include "edu/stanford/nlp/trees/TreebankLanguagePack.h"
#include "edu/stanford/nlp/trees/tregex/TregexMatcher.h"
#include "edu/stanford/nlp/trees/tregex/TregexPattern.h"
#include "edu/stanford/nlp/util/ArrayUtils.h"
#include "edu/stanford/nlp/util/Generics.h"
#include "java/io/PrintStream.h"
#include "java/lang/System.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/function/Predicate.h"

@interface EduStanfordNlpTreesSemanticHeadFinder () {
 @public
  id<JavaUtilSet> verbalAuxiliaries_;
  id<JavaUtilSet> copulars_;
  id<JavaUtilSet> passiveAuxiliaries_;
  id<JavaUtilSet> verbalTags_;
  id<JavaUtilSet> unambiguousAuxiliaryTags_;
  jboolean makeCopulaHead_;
}

- (void)ruleChanges;

- (jboolean)shouldSkipWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
                                      withBoolean:(jboolean)origWasInterjection;

- (jint)findPreviousHeadWithInt:(jint)headIdx
withEduStanfordNlpTreesTreeArray:(IOSObjectArray *)daughterTrees
                    withBoolean:(jboolean)origWasInterjection;

- (jboolean)isExistentialWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
                         withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)parent;

+ (jboolean)isWHQWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
                 withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)parent;

- (jboolean)isVerbalAuxiliaryWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)preterminal
                                         withJavaUtilSet:(id<JavaUtilSet>)verbalSet
                                             withBoolean:(jboolean)allowJustTagMatch;

- (jboolean)hasPassiveProgressiveAuxiliaryWithEduStanfordNlpTreesTreeArray:(IOSObjectArray *)kids;

+ (jboolean)vpContainsParticipleWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t;

- (jboolean)hasVerbalAuxiliaryWithEduStanfordNlpTreesTreeArray:(IOSObjectArray *)kids
                                               withJavaUtilSet:(id<JavaUtilSet>)verbalSet
                                                   withBoolean:(jboolean)allowTagOnlyMatch;

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpTreesSemanticHeadFinder, verbalAuxiliaries_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(EduStanfordNlpTreesSemanticHeadFinder, copulars_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(EduStanfordNlpTreesSemanticHeadFinder, passiveAuxiliaries_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(EduStanfordNlpTreesSemanticHeadFinder, verbalTags_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(EduStanfordNlpTreesSemanticHeadFinder, unambiguousAuxiliaryTags_, id<JavaUtilSet>)

inline jboolean EduStanfordNlpTreesSemanticHeadFinder_get_DEBUG();
static jboolean EduStanfordNlpTreesSemanticHeadFinder_DEBUG;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(EduStanfordNlpTreesSemanticHeadFinder, DEBUG, jboolean)

inline IOSObjectArray *EduStanfordNlpTreesSemanticHeadFinder_get_auxiliaries();
static IOSObjectArray *EduStanfordNlpTreesSemanticHeadFinder_auxiliaries;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpTreesSemanticHeadFinder, auxiliaries, IOSObjectArray *)

inline IOSObjectArray *EduStanfordNlpTreesSemanticHeadFinder_get_verbTags();
static IOSObjectArray *EduStanfordNlpTreesSemanticHeadFinder_verbTags;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpTreesSemanticHeadFinder, verbTags, IOSObjectArray *)

inline IOSObjectArray *EduStanfordNlpTreesSemanticHeadFinder_get_unambiguousAuxTags();
static IOSObjectArray *EduStanfordNlpTreesSemanticHeadFinder_unambiguousAuxTags;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpTreesSemanticHeadFinder, unambiguousAuxTags, IOSObjectArray *)

inline jlong EduStanfordNlpTreesSemanticHeadFinder_get_serialVersionUID();
#define EduStanfordNlpTreesSemanticHeadFinder_serialVersionUID 5721799188009249808LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpTreesSemanticHeadFinder, serialVersionUID, jlong)

__attribute__((unused)) static void EduStanfordNlpTreesSemanticHeadFinder_ruleChanges(EduStanfordNlpTreesSemanticHeadFinder *self);

__attribute__((unused)) static jboolean EduStanfordNlpTreesSemanticHeadFinder_shouldSkipWithEduStanfordNlpTreesTree_withBoolean_(EduStanfordNlpTreesSemanticHeadFinder *self, EduStanfordNlpTreesTree *t, jboolean origWasInterjection);

__attribute__((unused)) static jint EduStanfordNlpTreesSemanticHeadFinder_findPreviousHeadWithInt_withEduStanfordNlpTreesTreeArray_withBoolean_(EduStanfordNlpTreesSemanticHeadFinder *self, jint headIdx, IOSObjectArray *daughterTrees, jboolean origWasInterjection);

__attribute__((unused)) static jboolean EduStanfordNlpTreesSemanticHeadFinder_isExistentialWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_(EduStanfordNlpTreesSemanticHeadFinder *self, EduStanfordNlpTreesTree *t, EduStanfordNlpTreesTree *parent);

__attribute__((unused)) static jboolean EduStanfordNlpTreesSemanticHeadFinder_isWHQWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_(EduStanfordNlpTreesTree *t, EduStanfordNlpTreesTree *parent);

__attribute__((unused)) static jboolean EduStanfordNlpTreesSemanticHeadFinder_isVerbalAuxiliaryWithEduStanfordNlpTreesTree_withJavaUtilSet_withBoolean_(EduStanfordNlpTreesSemanticHeadFinder *self, EduStanfordNlpTreesTree *preterminal, id<JavaUtilSet> verbalSet, jboolean allowJustTagMatch);

__attribute__((unused)) static jboolean EduStanfordNlpTreesSemanticHeadFinder_hasPassiveProgressiveAuxiliaryWithEduStanfordNlpTreesTreeArray_(EduStanfordNlpTreesSemanticHeadFinder *self, IOSObjectArray *kids);

__attribute__((unused)) static jboolean EduStanfordNlpTreesSemanticHeadFinder_vpContainsParticipleWithEduStanfordNlpTreesTree_(EduStanfordNlpTreesTree *t);

__attribute__((unused)) static jboolean EduStanfordNlpTreesSemanticHeadFinder_hasVerbalAuxiliaryWithEduStanfordNlpTreesTreeArray_withJavaUtilSet_withBoolean_(EduStanfordNlpTreesSemanticHeadFinder *self, IOSObjectArray *kids, id<JavaUtilSet> verbalSet, jboolean allowTagOnlyMatch);

@interface EduStanfordNlpTreesSemanticHeadFinder_$Lambda$1 : NSObject < JavaUtilFunctionPredicate >

- (jboolean)testWithId:(EduStanfordNlpTreesTree *)tree;

@end

J2OBJC_STATIC_INIT(EduStanfordNlpTreesSemanticHeadFinder_$Lambda$1)

inline EduStanfordNlpTreesSemanticHeadFinder_$Lambda$1 *EduStanfordNlpTreesSemanticHeadFinder_$Lambda$1_get_instance();
static EduStanfordNlpTreesSemanticHeadFinder_$Lambda$1 *EduStanfordNlpTreesSemanticHeadFinder_$Lambda$1_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpTreesSemanticHeadFinder_$Lambda$1, instance, EduStanfordNlpTreesSemanticHeadFinder_$Lambda$1 *)

__attribute__((unused)) static void EduStanfordNlpTreesSemanticHeadFinder_$Lambda$1_init(EduStanfordNlpTreesSemanticHeadFinder_$Lambda$1 *self);

__attribute__((unused)) static EduStanfordNlpTreesSemanticHeadFinder_$Lambda$1 *new_EduStanfordNlpTreesSemanticHeadFinder_$Lambda$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpTreesSemanticHeadFinder_$Lambda$1 *create_EduStanfordNlpTreesSemanticHeadFinder_$Lambda$1_init();

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpTreesSemanticHeadFinder)

IOSObjectArray *EduStanfordNlpTreesSemanticHeadFinder_headOfCopulaTregex;
IOSObjectArray *EduStanfordNlpTreesSemanticHeadFinder_headOfConjpTregex;
EduStanfordNlpTreesTregexTregexPattern *EduStanfordNlpTreesSemanticHeadFinder_noVerbOverTempTregex;
id<JavaUtilFunctionPredicate> EduStanfordNlpTreesSemanticHeadFinder_REMOVE_TMP_AND_ADV;

@implementation EduStanfordNlpTreesSemanticHeadFinder

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpTreesSemanticHeadFinder_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithBoolean:(jboolean)noCopulaHead {
  EduStanfordNlpTreesSemanticHeadFinder_initWithBoolean_(self, noCopulaHead);
  return self;
}

- (instancetype)initWithEduStanfordNlpTreesTreebankLanguagePack:(id<EduStanfordNlpTreesTreebankLanguagePack>)tlp
                                                    withBoolean:(jboolean)noCopulaHead {
  EduStanfordNlpTreesSemanticHeadFinder_initWithEduStanfordNlpTreesTreebankLanguagePack_withBoolean_(self, tlp, noCopulaHead);
  return self;
}

- (jboolean)makesCopulaHead {
  return makeCopulaHead_;
}

- (void)ruleChanges {
  EduStanfordNlpTreesSemanticHeadFinder_ruleChanges(self);
}

- (jboolean)shouldSkipWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
                                      withBoolean:(jboolean)origWasInterjection {
  return EduStanfordNlpTreesSemanticHeadFinder_shouldSkipWithEduStanfordNlpTreesTree_withBoolean_(self, t, origWasInterjection);
}

- (jint)findPreviousHeadWithInt:(jint)headIdx
withEduStanfordNlpTreesTreeArray:(IOSObjectArray *)daughterTrees
                    withBoolean:(jboolean)origWasInterjection {
  return EduStanfordNlpTreesSemanticHeadFinder_findPreviousHeadWithInt_withEduStanfordNlpTreesTreeArray_withBoolean_(self, headIdx, daughterTrees, origWasInterjection);
}

- (jint)postOperationFixWithInt:(jint)headIdx
withEduStanfordNlpTreesTreeArray:(IOSObjectArray *)daughterTrees {
  if (headIdx >= 2) {
    NSString *prevLab = [((id<EduStanfordNlpTreesTreebankLanguagePack>) nil_chk(tlp_)) basicCategoryWithNSString:[((EduStanfordNlpTreesTree *) nil_chk(IOSObjectArray_Get(nil_chk(daughterTrees), headIdx - 1))) value]];
    if ([((NSString *) nil_chk(prevLab)) isEqual:@"CC"] || [prevLab isEqual:@"CONJP"]) {
      jboolean origWasInterjection = [@"UH" isEqual:[tlp_ basicCategoryWithNSString:[((EduStanfordNlpTreesTree *) nil_chk(IOSObjectArray_Get(daughterTrees, headIdx))) value]]];
      jint newHeadIdx = headIdx - 2;
      while (newHeadIdx >= 0 && EduStanfordNlpTreesSemanticHeadFinder_shouldSkipWithEduStanfordNlpTreesTree_withBoolean_(self, IOSObjectArray_Get(daughterTrees, newHeadIdx), origWasInterjection)) {
        newHeadIdx--;
      }
      while (newHeadIdx >= 2) {
        jint nextHead = EduStanfordNlpTreesSemanticHeadFinder_findPreviousHeadWithInt_withEduStanfordNlpTreesTreeArray_withBoolean_(self, newHeadIdx, daughterTrees, origWasInterjection);
        if (nextHead < 0) {
          break;
        }
        newHeadIdx = nextHead;
      }
      if (newHeadIdx >= 0) {
        headIdx = newHeadIdx;
      }
    }
  }
  return headIdx;
}

- (EduStanfordNlpTreesTree *)determineNonTrivialHeadWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
                                                    withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)parent {
  NSString *motherCat = [((id<EduStanfordNlpTreesTreebankLanguagePack>) nil_chk(tlp_)) basicCategoryWithNSString:[((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(t)) label])) value]];
  if (EduStanfordNlpTreesSemanticHeadFinder_DEBUG) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$$@", @"At ", motherCat, @", my parent is ", parent)];
  }
  if ([((NSString *) nil_chk(motherCat)) isEqual:@"CONJP"]) {
    {
      IOSObjectArray *a__ = EduStanfordNlpTreesSemanticHeadFinder_headOfConjpTregex;
      EduStanfordNlpTreesTregexTregexPattern * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      EduStanfordNlpTreesTregexTregexPattern * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        EduStanfordNlpTreesTregexTregexPattern *pattern = *b__++;
        EduStanfordNlpTreesTregexTregexMatcher *matcher = [((EduStanfordNlpTreesTregexTregexPattern *) nil_chk(pattern)) matcherWithEduStanfordNlpTreesTree:t];
        if ([((EduStanfordNlpTreesTregexTregexMatcher *) nil_chk(matcher)) matchesAtWithEduStanfordNlpTreesTree:t]) {
          return [matcher getNodeWithNSString:@"head"];
        }
      }
    }
  }
  if ([motherCat isEqual:@"SBARQ"] || [motherCat isEqual:@"SINV"]) {
    if (!makeCopulaHead_) {
      {
        IOSObjectArray *a__ = EduStanfordNlpTreesSemanticHeadFinder_headOfCopulaTregex;
        EduStanfordNlpTreesTregexTregexPattern * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
        EduStanfordNlpTreesTregexTregexPattern * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          EduStanfordNlpTreesTregexTregexPattern *pattern = *b__++;
          EduStanfordNlpTreesTregexTregexMatcher *matcher = [((EduStanfordNlpTreesTregexTregexPattern *) nil_chk(pattern)) matcherWithEduStanfordNlpTreesTree:t];
          if ([((EduStanfordNlpTreesTregexTregexMatcher *) nil_chk(matcher)) matchesAtWithEduStanfordNlpTreesTree:t]) {
            return [matcher getNodeWithNSString:@"head"];
          }
        }
      }
    }
  }
  if (([motherCat isEqual:@"VP"] || [motherCat isEqual:@"SQ"] || [motherCat isEqual:@"SINV"])) {
    IOSObjectArray *kids = [t children];
    if (EduStanfordNlpTreesSemanticHeadFinder_DEBUG) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"Semantic head finder: at VP"];
      [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:JreStrcat("$$", @"Class is ", [[t getClass] getName])];
      [t pennPrintWithJavaIoPrintStream:JreLoadStatic(JavaLangSystem, err)];
    }
    IOSObjectArray *tmpFilteredChildren = nil;
    if (EduStanfordNlpTreesSemanticHeadFinder_hasVerbalAuxiliaryWithEduStanfordNlpTreesTreeArray_withJavaUtilSet_withBoolean_(self, kids, verbalAuxiliaries_, true) || EduStanfordNlpTreesSemanticHeadFinder_hasPassiveProgressiveAuxiliaryWithEduStanfordNlpTreesTreeArray_(self, kids)) {
      IOSObjectArray *how;
      if (EduStanfordNlpTreesSemanticHeadFinder_hasVerbalAuxiliaryWithEduStanfordNlpTreesTreeArray_withJavaUtilSet_withBoolean_(self, kids, copulars_, true)) {
        how = [IOSObjectArray newArrayWithObjects:(id[]){ @"left", @"VP", @"ADJP" } count:3 type:NSString_class_()];
      }
      else {
        how = [IOSObjectArray newArrayWithObjects:(id[]){ @"left", @"VP" } count:2 type:NSString_class_()];
      }
      if (tmpFilteredChildren == nil) {
        tmpFilteredChildren = EduStanfordNlpUtilArrayUtils_filterWithNSObjectArray_withJavaUtilFunctionPredicate_(kids, EduStanfordNlpTreesSemanticHeadFinder_REMOVE_TMP_AND_ADV);
      }
      EduStanfordNlpTreesTree *pti = [self traverseLocateWithEduStanfordNlpTreesTreeArray:tmpFilteredChildren withNSStringArray:how withBoolean:false];
      if (EduStanfordNlpTreesSemanticHeadFinder_DEBUG) {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$$@", @"Determined head (case 1) for ", [t value], @" is: ", pti)];
      }
      if (pti != nil) {
        return pti;
      }
    }
    if (EduStanfordNlpTreesSemanticHeadFinder_hasVerbalAuxiliaryWithEduStanfordNlpTreesTreeArray_withJavaUtilSet_withBoolean_(self, kids, copulars_, false) && !EduStanfordNlpTreesSemanticHeadFinder_isExistentialWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_(self, t, parent) && !EduStanfordNlpTreesSemanticHeadFinder_isWHQWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_(t, parent)) {
      IOSObjectArray *how;
      if ([motherCat isEqual:@"SQ"]) {
        how = [IOSObjectArray newArrayWithObjects:(id[]){ @"right", @"VP", @"ADJP", @"NP", @"WHADJP", @"WHNP" } count:6 type:NSString_class_()];
      }
      else {
        how = [IOSObjectArray newArrayWithObjects:(id[]){ @"left", @"VP", @"ADJP", @"NP", @"WHADJP", @"WHNP" } count:6 type:NSString_class_()];
      }
      if (tmpFilteredChildren == nil) {
        tmpFilteredChildren = EduStanfordNlpUtilArrayUtils_filterWithNSObjectArray_withJavaUtilFunctionPredicate_(kids, EduStanfordNlpTreesSemanticHeadFinder_REMOVE_TMP_AND_ADV);
      }
      EduStanfordNlpTreesTree *pti = [self traverseLocateWithEduStanfordNlpTreesTreeArray:tmpFilteredChildren withNSStringArray:how withBoolean:false];
      if ([motherCat isEqual:@"SQ"] && pti != nil && [pti label] != nil && [((NSString *) nil_chk([((id<EduStanfordNlpLingLabel>) nil_chk([pti label])) value])) hasPrefix:@"NP"]) {
        jboolean foundAnotherNp = false;
        {
          IOSObjectArray *a__ = kids;
          EduStanfordNlpTreesTree * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
          EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
          while (b__ < e__) {
            EduStanfordNlpTreesTree *kid = *b__++;
            if (kid == pti) {
              break;
            }
            else if ([((EduStanfordNlpTreesTree *) nil_chk(kid)) label] != nil && [((NSString *) nil_chk([((id<EduStanfordNlpLingLabel>) nil_chk([kid label])) value])) hasPrefix:@"NP"]) {
              foundAnotherNp = true;
              break;
            }
          }
        }
        if (!foundAnotherNp) {
          pti = nil;
        }
      }
      if (EduStanfordNlpTreesSemanticHeadFinder_DEBUG) {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$$@", @"Determined head (case 2) for ", [t value], @" is: ", pti)];
      }
      if (pti != nil) {
        return pti;
      }
      else {
        if (EduStanfordNlpTreesSemanticHeadFinder_DEBUG) {
          [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"------"];
          [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:@"SemanticHeadFinder failed to reassign head for"];
          [t pennPrintWithJavaIoPrintStream:JreLoadStatic(JavaLangSystem, err)];
          [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:@"------"];
        }
      }
    }
  }
  EduStanfordNlpTreesTree *hd = [super determineNonTrivialHeadWithEduStanfordNlpTreesTree:t withEduStanfordNlpTreesTree:parent];
  if (EduStanfordNlpTreesSemanticHeadFinder_DEBUG) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$$@", @"Determined head (case 3) for ", [t value], @" is: ", hd)];
  }
  return hd;
}

- (jboolean)isExistentialWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
                         withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)parent {
  return EduStanfordNlpTreesSemanticHeadFinder_isExistentialWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_(self, t, parent);
}

+ (jboolean)isWHQWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
                 withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)parent {
  return EduStanfordNlpTreesSemanticHeadFinder_isWHQWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_(t, parent);
}

- (jboolean)isVerbalAuxiliaryWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)preterminal
                                         withJavaUtilSet:(id<JavaUtilSet>)verbalSet
                                             withBoolean:(jboolean)allowJustTagMatch {
  return EduStanfordNlpTreesSemanticHeadFinder_isVerbalAuxiliaryWithEduStanfordNlpTreesTree_withJavaUtilSet_withBoolean_(self, preterminal, verbalSet, allowJustTagMatch);
}

- (jboolean)isVerbalAuxiliaryWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t {
  return EduStanfordNlpTreesSemanticHeadFinder_isVerbalAuxiliaryWithEduStanfordNlpTreesTree_withJavaUtilSet_withBoolean_(self, t, verbalAuxiliaries_, true);
}

- (jboolean)hasPassiveProgressiveAuxiliaryWithEduStanfordNlpTreesTreeArray:(IOSObjectArray *)kids {
  return EduStanfordNlpTreesSemanticHeadFinder_hasPassiveProgressiveAuxiliaryWithEduStanfordNlpTreesTreeArray_(self, kids);
}

+ (jboolean)vpContainsParticipleWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t {
  return EduStanfordNlpTreesSemanticHeadFinder_vpContainsParticipleWithEduStanfordNlpTreesTree_(t);
}

- (jboolean)hasVerbalAuxiliaryWithEduStanfordNlpTreesTreeArray:(IOSObjectArray *)kids
                                               withJavaUtilSet:(id<JavaUtilSet>)verbalSet
                                                   withBoolean:(jboolean)allowTagOnlyMatch {
  return EduStanfordNlpTreesSemanticHeadFinder_hasVerbalAuxiliaryWithEduStanfordNlpTreesTreeArray_withJavaUtilSet_withBoolean_(self, kids, verbalSet, allowTagOnlyMatch);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 6, 7, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x4, 8, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 10, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 11, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 12, 13, -1, 14, -1, -1 },
    { NULL, "Z", 0x1, 12, 15, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 16, 17, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 18, 15, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 19, 20, -1, 21, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithBoolean:);
  methods[2].selector = @selector(initWithEduStanfordNlpTreesTreebankLanguagePack:withBoolean:);
  methods[3].selector = @selector(makesCopulaHead);
  methods[4].selector = @selector(ruleChanges);
  methods[5].selector = @selector(shouldSkipWithEduStanfordNlpTreesTree:withBoolean:);
  methods[6].selector = @selector(findPreviousHeadWithInt:withEduStanfordNlpTreesTreeArray:withBoolean:);
  methods[7].selector = @selector(postOperationFixWithInt:withEduStanfordNlpTreesTreeArray:);
  methods[8].selector = @selector(determineNonTrivialHeadWithEduStanfordNlpTreesTree:withEduStanfordNlpTreesTree:);
  methods[9].selector = @selector(isExistentialWithEduStanfordNlpTreesTree:withEduStanfordNlpTreesTree:);
  methods[10].selector = @selector(isWHQWithEduStanfordNlpTreesTree:withEduStanfordNlpTreesTree:);
  methods[11].selector = @selector(isVerbalAuxiliaryWithEduStanfordNlpTreesTree:withJavaUtilSet:withBoolean:);
  methods[12].selector = @selector(isVerbalAuxiliaryWithEduStanfordNlpTreesTree:);
  methods[13].selector = @selector(hasPassiveProgressiveAuxiliaryWithEduStanfordNlpTreesTreeArray:);
  methods[14].selector = @selector(vpContainsParticipleWithEduStanfordNlpTreesTree:);
  methods[15].selector = @selector(hasVerbalAuxiliaryWithEduStanfordNlpTreesTreeArray:withJavaUtilSet:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DEBUG", "Z", .constantValue.asLong = 0, 0x1a, -1, 22, -1, -1 },
    { "auxiliaries", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 23, -1, -1 },
    { "verbTags", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 24, -1, -1 },
    { "unambiguousAuxTags", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 25, -1, -1 },
    { "verbalAuxiliaries_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 26, -1 },
    { "copulars_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 26, -1 },
    { "passiveAuxiliaries_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 26, -1 },
    { "verbalTags_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 26, -1 },
    { "unambiguousAuxiliaryTags_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 26, -1 },
    { "makeCopulaHead_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "headOfCopulaTregex", "[LEduStanfordNlpTreesTregexTregexPattern;", .constantValue.asLong = 0, 0x18, -1, 27, -1, -1 },
    { "headOfConjpTregex", "[LEduStanfordNlpTreesTregexTregexPattern;", .constantValue.asLong = 0, 0x18, -1, 28, -1, -1 },
    { "noVerbOverTempTregex", "LEduStanfordNlpTreesTregexTregexPattern;", .constantValue.asLong = 0, 0x18, -1, 29, -1, -1 },
    { "REMOVE_TMP_AND_ADV", "LJavaUtilFunctionPredicate;", .constantValue.asLong = 0, 0x18, -1, 30, 31, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpTreesSemanticHeadFinder_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "Z", "LEduStanfordNlpTreesTreebankLanguagePack;Z", "shouldSkip", "LEduStanfordNlpTreesTree;Z", "findPreviousHead", "I[LEduStanfordNlpTreesTree;Z", "postOperationFix", "I[LEduStanfordNlpTreesTree;", "determineNonTrivialHead", "LEduStanfordNlpTreesTree;LEduStanfordNlpTreesTree;", "isExistential", "isWHQ", "isVerbalAuxiliary", "LEduStanfordNlpTreesTree;LJavaUtilSet;Z", "(Ledu/stanford/nlp/trees/Tree;Ljava/util/Set<Ljava/lang/String;>;Z)Z", "LEduStanfordNlpTreesTree;", "hasPassiveProgressiveAuxiliary", "[LEduStanfordNlpTreesTree;", "vpContainsParticiple", "hasVerbalAuxiliary", "[LEduStanfordNlpTreesTree;LJavaUtilSet;Z", "([Ledu/stanford/nlp/trees/Tree;Ljava/util/Set<Ljava/lang/String;>;Z)Z", &EduStanfordNlpTreesSemanticHeadFinder_DEBUG, &EduStanfordNlpTreesSemanticHeadFinder_auxiliaries, &EduStanfordNlpTreesSemanticHeadFinder_verbTags, &EduStanfordNlpTreesSemanticHeadFinder_unambiguousAuxTags, "Ljava/util/Set<Ljava/lang/String;>;", &EduStanfordNlpTreesSemanticHeadFinder_headOfCopulaTregex, &EduStanfordNlpTreesSemanticHeadFinder_headOfConjpTregex, &EduStanfordNlpTreesSemanticHeadFinder_noVerbOverTempTregex, &EduStanfordNlpTreesSemanticHeadFinder_REMOVE_TMP_AND_ADV, "Ljava/util/function/Predicate<Ledu/stanford/nlp/trees/Tree;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpTreesSemanticHeadFinder = { "SemanticHeadFinder", "edu.stanford.nlp.trees", ptrTable, methods, fields, 7, 0x1, 16, 15, -1, -1, -1, -1, -1 };
  return &_EduStanfordNlpTreesSemanticHeadFinder;
}

+ (void)initialize {
  if (self == [EduStanfordNlpTreesSemanticHeadFinder class]) {
    EduStanfordNlpTreesSemanticHeadFinder_DEBUG = (JavaLangSystem_getPropertyWithNSString_withNSString_(@"SemanticHeadFinder", nil) != nil);
    EduStanfordNlpTreesSemanticHeadFinder_auxiliaries = [IOSObjectArray newArrayWithObjects:(id[]){ @"will", @"wo", @"shall", @"sha", @"may", @"might", @"should", @"would", @"can", @"could", @"ca", @"must", @"'ll", @"ll", @"-ll", @"cold", @"has", @"have", @"had", @"having", @"'ve", @"ve", @"v", @"of", @"hav", @"hvae", @"as", @"get", @"gets", @"getting", @"got", @"gotten", @"do", @"does", @"did", @"'d", @"d", @"du", @"to", @"2", @"na", @"a", @"ot", @"ta", @"the", @"too" } count:46 type:NSString_class_()];
    EduStanfordNlpTreesSemanticHeadFinder_verbTags = [IOSObjectArray newArrayWithObjects:(id[]){ @"TO", @"MD", @"VB", @"VBD", @"VBP", @"VBZ", @"VBG", @"VBN", @"AUX", @"AUXG" } count:10 type:NSString_class_()];
    EduStanfordNlpTreesSemanticHeadFinder_unambiguousAuxTags = [IOSObjectArray newArrayWithObjects:(id[]){ @"TO", @"MD", @"AUX", @"AUXG" } count:4 type:NSString_class_()];
    EduStanfordNlpTreesSemanticHeadFinder_headOfCopulaTregex = [IOSObjectArray newArrayWithObjects:(id[]){ EduStanfordNlpTreesTregexTregexPattern_compileWithNSString_(JreStrcat("$$$", @"SBARQ < (WHNP $++ (/^VB/ < ", JreLoadStatic(EduStanfordNlpTreesEnglishPatterns, copularWordRegex), @" $++ ADJP=head))")), EduStanfordNlpTreesTregexTregexPattern_compileWithNSString_(JreStrcat("$$$", @"SBARQ < (WHNP=head $++ (/^VB/ < ", JreLoadStatic(EduStanfordNlpTreesEnglishPatterns, copularWordRegex), @" $+ NP !$++ ADJP))")), EduStanfordNlpTreesTregexTregexPattern_compileWithNSString_(JreStrcat("$$$", @"SINV < (NP=head $++ (NP $++ (VP < (/^(?:VB|AUX)/ < ", JreLoadStatic(EduStanfordNlpTreesEnglishPatterns, copularWordRegex), @"))))")) } count:3 type:EduStanfordNlpTreesTregexTregexPattern_class_()];
    EduStanfordNlpTreesSemanticHeadFinder_headOfConjpTregex = [IOSObjectArray newArrayWithObjects:(id[]){ EduStanfordNlpTreesTregexTregexPattern_compileWithNSString_(@"CONJP < (CC <: /^(?i:but|and)$/ $+ (RB=head <: /^(?i:not)$/))"), EduStanfordNlpTreesTregexTregexPattern_compileWithNSString_(@"CONJP < (CC <: /^(?i:but)$/ [ ($+ (RB=head <: /^(?i:also|rather)$/)) | ($+ (ADVP=head <: (RB <: /^(?i:also|rather)$/))) ])"), EduStanfordNlpTreesTregexTregexPattern_compileWithNSString_(@"CONJP < (CC <: /^(?i:and)$/ [ ($+ (RB=head <: /^(?i:yet)$/)) | ($+ (ADVP=head <: (RB <: /^(?i:yet)$/))) ])") } count:3 type:EduStanfordNlpTreesTregexTregexPattern_class_()];
    EduStanfordNlpTreesSemanticHeadFinder_noVerbOverTempTregex = EduStanfordNlpTreesTregexTregexPattern_compileWithNSString_(@"/^VP/ < NP-TMP !< /^V/ !< NNP|NN|NNPS|NNS|NP|JJ|ADJP|S");
    EduStanfordNlpTreesSemanticHeadFinder_REMOVE_TMP_AND_ADV = JreLoadStatic(EduStanfordNlpTreesSemanticHeadFinder_$Lambda$1, instance);
    J2OBJC_SET_INITIALIZED(EduStanfordNlpTreesSemanticHeadFinder)
  }
}

@end

void EduStanfordNlpTreesSemanticHeadFinder_init(EduStanfordNlpTreesSemanticHeadFinder *self) {
  EduStanfordNlpTreesSemanticHeadFinder_initWithEduStanfordNlpTreesTreebankLanguagePack_withBoolean_(self, new_EduStanfordNlpTreesPennTreebankLanguagePack_init(), true);
}

EduStanfordNlpTreesSemanticHeadFinder *new_EduStanfordNlpTreesSemanticHeadFinder_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesSemanticHeadFinder, init)
}

EduStanfordNlpTreesSemanticHeadFinder *create_EduStanfordNlpTreesSemanticHeadFinder_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesSemanticHeadFinder, init)
}

void EduStanfordNlpTreesSemanticHeadFinder_initWithBoolean_(EduStanfordNlpTreesSemanticHeadFinder *self, jboolean noCopulaHead) {
  EduStanfordNlpTreesSemanticHeadFinder_initWithEduStanfordNlpTreesTreebankLanguagePack_withBoolean_(self, new_EduStanfordNlpTreesPennTreebankLanguagePack_init(), noCopulaHead);
}

EduStanfordNlpTreesSemanticHeadFinder *new_EduStanfordNlpTreesSemanticHeadFinder_initWithBoolean_(jboolean noCopulaHead) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesSemanticHeadFinder, initWithBoolean_, noCopulaHead)
}

EduStanfordNlpTreesSemanticHeadFinder *create_EduStanfordNlpTreesSemanticHeadFinder_initWithBoolean_(jboolean noCopulaHead) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesSemanticHeadFinder, initWithBoolean_, noCopulaHead)
}

void EduStanfordNlpTreesSemanticHeadFinder_initWithEduStanfordNlpTreesTreebankLanguagePack_withBoolean_(EduStanfordNlpTreesSemanticHeadFinder *self, id<EduStanfordNlpTreesTreebankLanguagePack> tlp, jboolean noCopulaHead) {
  EduStanfordNlpTreesModCollinsHeadFinder_initWithEduStanfordNlpTreesTreebankLanguagePack_(self, tlp);
  self->makeCopulaHead_ = !noCopulaHead;
  EduStanfordNlpTreesSemanticHeadFinder_ruleChanges(self);
  self->verbalAuxiliaries_ = EduStanfordNlpUtilGenerics_newHashSetWithJavaUtilCollection_(JavaUtilArrays_asListWithNSObjectArray_(EduStanfordNlpTreesSemanticHeadFinder_auxiliaries));
  self->passiveAuxiliaries_ = EduStanfordNlpUtilGenerics_newHashSetWithJavaUtilCollection_(JavaUtilArrays_asListWithNSObjectArray_(JreLoadStatic(EduStanfordNlpTreesEnglishPatterns, beGetVerbs)));
  self->copulars_ = EduStanfordNlpUtilGenerics_newHashSet();
  if (noCopulaHead) {
    [((id<JavaUtilSet>) nil_chk(self->copulars_)) addAllWithJavaUtilCollection:JavaUtilArrays_asListWithNSObjectArray_(JreLoadStatic(EduStanfordNlpTreesEnglishPatterns, copularVerbs))];
  }
  self->verbalTags_ = EduStanfordNlpUtilGenerics_newHashSetWithJavaUtilCollection_(JavaUtilArrays_asListWithNSObjectArray_(EduStanfordNlpTreesSemanticHeadFinder_verbTags));
  self->unambiguousAuxiliaryTags_ = EduStanfordNlpUtilGenerics_newHashSetWithJavaUtilCollection_(JavaUtilArrays_asListWithNSObjectArray_(EduStanfordNlpTreesSemanticHeadFinder_unambiguousAuxTags));
}

EduStanfordNlpTreesSemanticHeadFinder *new_EduStanfordNlpTreesSemanticHeadFinder_initWithEduStanfordNlpTreesTreebankLanguagePack_withBoolean_(id<EduStanfordNlpTreesTreebankLanguagePack> tlp, jboolean noCopulaHead) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesSemanticHeadFinder, initWithEduStanfordNlpTreesTreebankLanguagePack_withBoolean_, tlp, noCopulaHead)
}

EduStanfordNlpTreesSemanticHeadFinder *create_EduStanfordNlpTreesSemanticHeadFinder_initWithEduStanfordNlpTreesTreebankLanguagePack_withBoolean_(id<EduStanfordNlpTreesTreebankLanguagePack> tlp, jboolean noCopulaHead) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesSemanticHeadFinder, initWithEduStanfordNlpTreesTreebankLanguagePack_withBoolean_, tlp, noCopulaHead)
}

void EduStanfordNlpTreesSemanticHeadFinder_ruleChanges(EduStanfordNlpTreesSemanticHeadFinder *self) {
  (void) [((id<JavaUtilMap>) nil_chk(self->nonTerminalInfo_)) putWithId:@"NP" withId:[IOSObjectArray newArrayWithObjects:(id[]){ [IOSObjectArray newArrayWithObjects:(id[]){ @"rightdis", @"NN", @"NNP", @"NNPS", @"NNS", @"NX", @"NML", @"JJR", @"WP" } count:9 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"left", @"NP", @"PRP" } count:3 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"rightdis", @"$", @"ADJP", @"FW" } count:4 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"right", @"CD" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"rightdis", @"JJ", @"JJS", @"QP", @"DT", @"WDT", @"NML", @"PRN", @"RB", @"RBR", @"ADVP" } count:11 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"rightdis", @"VP", @"VB", @"VBZ", @"VBD", @"VBP" } count:6 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"left", @"POS" } count:2 type:NSString_class_()] } count:7 type:IOSClass_arrayType(NSString_class_(), 1)]];
  (void) [((id<JavaUtilMap>) nil_chk(self->nonTerminalInfo_)) putWithId:@"NX" withId:[self->nonTerminalInfo_ getWithId:@"NP"]];
  (void) [((id<JavaUtilMap>) nil_chk(self->nonTerminalInfo_)) putWithId:@"NML" withId:[self->nonTerminalInfo_ getWithId:@"NP"]];
  (void) [((id<JavaUtilMap>) nil_chk(self->nonTerminalInfo_)) putWithId:@"WHNP" withId:[IOSObjectArray newArrayWithObjects:(id[]){ [IOSObjectArray newArrayWithObjects:(id[]){ @"rightdis", @"NN", @"NNP", @"NNPS", @"NNS", @"NX", @"NML", @"JJR", @"WP" } count:9 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"left", @"WHNP", @"NP" } count:3 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"rightdis", @"$", @"ADJP", @"PRN", @"FW" } count:5 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"right", @"CD" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"rightdis", @"JJ", @"JJS", @"RB", @"QP" } count:5 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"left", @"WHPP", @"WHADJP", @"WP$", @"WDT" } count:5 type:NSString_class_()] } count:6 type:IOSClass_arrayType(NSString_class_(), 1)]];
  (void) [((id<JavaUtilMap>) nil_chk(self->nonTerminalInfo_)) putWithId:@"WHADJP" withId:[IOSObjectArray newArrayWithObjects:(id[]){ [IOSObjectArray newArrayWithObjects:(id[]){ @"left", @"ADJP", @"JJ", @"JJR", @"WP" } count:5 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"right", @"RB" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"right" } count:1 type:NSString_class_()] } count:3 type:IOSClass_arrayType(NSString_class_(), 1)]];
  (void) [((id<JavaUtilMap>) nil_chk(self->nonTerminalInfo_)) putWithId:@"WHADVP" withId:[IOSObjectArray newArrayWithObjects:(id[]){ [IOSObjectArray newArrayWithObjects:(id[]){ @"rightdis", @"WRB", @"WHADVP", @"RB", @"JJ" } count:5 type:NSString_class_()] } count:1 type:IOSClass_arrayType(NSString_class_(), 1)]];
  (void) [((id<JavaUtilMap>) nil_chk(self->nonTerminalInfo_)) putWithId:@"QP" withId:[IOSObjectArray newArrayWithObjects:(id[]){ [IOSObjectArray newArrayWithObjects:(id[]){ @"right", @"$", @"NNS", @"NN", @"CD", @"JJ", @"PDT", @"DT", @"IN", @"RB", @"NCD", @"QP", @"JJR", @"JJS" } count:14 type:NSString_class_()] } count:1 type:IOSClass_arrayType(NSString_class_(), 1)]];
  (void) [((id<JavaUtilMap>) nil_chk(self->nonTerminalInfo_)) putWithId:@"S" withId:[IOSObjectArray newArrayWithObjects:(id[]){ [IOSObjectArray newArrayWithObjects:(id[]){ @"left", @"VP", @"S", @"FRAG", @"SBAR", @"ADJP", @"UCP", @"TO" } count:8 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"right", @"NP" } count:2 type:NSString_class_()] } count:2 type:IOSClass_arrayType(NSString_class_(), 1)]];
  (void) [((id<JavaUtilMap>) nil_chk(self->nonTerminalInfo_)) putWithId:@"SBAR" withId:[IOSObjectArray newArrayWithObjects:(id[]){ [IOSObjectArray newArrayWithObjects:(id[]){ @"left", @"S", @"SQ", @"SINV", @"SBAR", @"FRAG", @"VP", @"WHNP", @"WHPP", @"WHADVP", @"WHADJP", @"IN", @"DT" } count:13 type:NSString_class_()] } count:1 type:IOSClass_arrayType(NSString_class_(), 1)]];
  if (self->makeCopulaHead_) {
    (void) [((id<JavaUtilMap>) nil_chk(self->nonTerminalInfo_)) putWithId:@"SQ" withId:[IOSObjectArray newArrayWithObjects:(id[]){ [IOSObjectArray newArrayWithObjects:(id[]){ @"left", @"VP", @"SQ", @"VB", @"VBZ", @"VBD", @"VBP", @"MD", @"AUX", @"AUXG", @"ADJP" } count:11 type:NSString_class_()] } count:1 type:IOSClass_arrayType(NSString_class_(), 1)]];
  }
  else {
    (void) [((id<JavaUtilMap>) nil_chk(self->nonTerminalInfo_)) putWithId:@"SQ" withId:[IOSObjectArray newArrayWithObjects:(id[]){ [IOSObjectArray newArrayWithObjects:(id[]){ @"left", @"VP", @"SQ", @"ADJP", @"VB", @"VBZ", @"VBD", @"VBP", @"MD", @"AUX", @"AUXG" } count:11 type:NSString_class_()] } count:1 type:IOSClass_arrayType(NSString_class_(), 1)]];
  }
  (void) [((id<JavaUtilMap>) nil_chk(self->nonTerminalInfo_)) putWithId:@"UCP" withId:[IOSObjectArray newArrayWithObjects:(id[]){ [IOSObjectArray newArrayWithObjects:(id[]){ @"left" } count:1 type:NSString_class_()] } count:1 type:IOSClass_arrayType(NSString_class_(), 1)]];
  (void) [((id<JavaUtilMap>) nil_chk(self->nonTerminalInfo_)) putWithId:@"CONJP" withId:[IOSObjectArray newArrayWithObjects:(id[]){ [IOSObjectArray newArrayWithObjects:(id[]){ @"right", @"CC", @"VB", @"JJ", @"RB", @"IN" } count:6 type:NSString_class_()] } count:1 type:IOSClass_arrayType(NSString_class_(), 1)]];
  (void) [((id<JavaUtilMap>) nil_chk(self->nonTerminalInfo_)) putWithId:@"FRAG" withId:[IOSObjectArray newArrayWithObjects:(id[]){ [IOSObjectArray newArrayWithObjects:(id[]){ @"left", @"IN" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"right", @"RB" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"left", @"NP" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"left", @"ADJP", @"ADVP", @"FRAG", @"S", @"SBAR", @"VP" } count:7 type:NSString_class_()] } count:4 type:IOSClass_arrayType(NSString_class_(), 1)]];
  (void) [((id<JavaUtilMap>) nil_chk(self->nonTerminalInfo_)) putWithId:@"PRN" withId:[IOSObjectArray newArrayWithObjects:(id[]){ [IOSObjectArray newArrayWithObjects:(id[]){ @"left", @"VP", @"SQ", @"S", @"SINV", @"SBAR", @"NP", @"ADJP", @"PP", @"ADVP", @"INTJ", @"WHNP", @"NAC", @"VBP", @"JJ", @"NN", @"NNP" } count:17 type:NSString_class_()] } count:1 type:IOSClass_arrayType(NSString_class_(), 1)]];
  (void) [((id<JavaUtilMap>) nil_chk(self->nonTerminalInfo_)) putWithId:@"XS" withId:[IOSObjectArray newArrayWithObjects:(id[]){ [IOSObjectArray newArrayWithObjects:(id[]){ @"right", @"IN" } count:2 type:NSString_class_()] } count:1 type:IOSClass_arrayType(NSString_class_(), 1)]];
  (void) [((id<JavaUtilMap>) nil_chk(self->nonTerminalInfo_)) putWithId:@"EMBED" withId:[IOSObjectArray newArrayWithObjects:(id[]){ [IOSObjectArray newArrayWithObjects:(id[]){ @"right", @"INTJ" } count:2 type:NSString_class_()] } count:1 type:IOSClass_arrayType(NSString_class_(), 1)]];
}

jboolean EduStanfordNlpTreesSemanticHeadFinder_shouldSkipWithEduStanfordNlpTreesTree_withBoolean_(EduStanfordNlpTreesSemanticHeadFinder *self, EduStanfordNlpTreesTree *t, jboolean origWasInterjection) {
  return ([((EduStanfordNlpTreesTree *) nil_chk(t)) isPreTerminal] && ([((id<EduStanfordNlpTreesTreebankLanguagePack>) nil_chk(self->tlp_)) isPunctuationTagWithNSString:[t value]] || (!origWasInterjection && [@"UH" isEqual:[t value]]))) || ([@"INTJ" isEqual:[t value]] && !origWasInterjection);
}

jint EduStanfordNlpTreesSemanticHeadFinder_findPreviousHeadWithInt_withEduStanfordNlpTreesTreeArray_withBoolean_(EduStanfordNlpTreesSemanticHeadFinder *self, jint headIdx, IOSObjectArray *daughterTrees, jboolean origWasInterjection) {
  jboolean seenSeparator = false;
  jint newHeadIdx = headIdx;
  while (newHeadIdx >= 0) {
    newHeadIdx = newHeadIdx - 1;
    if (newHeadIdx < 0) {
      return newHeadIdx;
    }
    NSString *label = [((id<EduStanfordNlpTreesTreebankLanguagePack>) nil_chk(self->tlp_)) basicCategoryWithNSString:[((EduStanfordNlpTreesTree *) nil_chk(IOSObjectArray_Get(nil_chk(daughterTrees), newHeadIdx))) value]];
    if ([@"," isEqual:label] || [@":" isEqual:label]) {
      seenSeparator = true;
    }
    else if (([((EduStanfordNlpTreesTree *) nil_chk(IOSObjectArray_Get(daughterTrees, newHeadIdx))) isPreTerminal] && ([self->tlp_ isPunctuationTagWithNSString:label] || (!origWasInterjection && [@"UH" isEqual:label]))) || ([@"INTJ" isEqual:label] && !origWasInterjection)) {
    }
    else {
      if (!seenSeparator) {
        newHeadIdx = -1;
      }
      break;
    }
  }
  return newHeadIdx;
}

jboolean EduStanfordNlpTreesSemanticHeadFinder_isExistentialWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_(EduStanfordNlpTreesSemanticHeadFinder *self, EduStanfordNlpTreesTree *t, EduStanfordNlpTreesTree *parent) {
  if (EduStanfordNlpTreesSemanticHeadFinder_DEBUG) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$@C@", @"isExistential: ", t, ' ', parent)];
  }
  jboolean toReturn = false;
  NSString *motherCat = [((id<EduStanfordNlpTreesTreebankLanguagePack>) nil_chk(self->tlp_)) basicCategoryWithNSString:[((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(t)) label])) value]];
  if ([((NSString *) nil_chk(motherCat)) isEqual:@"VP"] && parent != nil) {
    IOSObjectArray *kids = [parent children];
    {
      IOSObjectArray *a__ = kids;
      EduStanfordNlpTreesTree * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        EduStanfordNlpTreesTree *kid = *b__++;
        if (![((NSString *) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(kid)) value])) isEqual:@"VP"]) {
          id<JavaUtilList> tags = [kid preTerminalYield];
          for (id<EduStanfordNlpLingLabel> __strong tag in nil_chk(tags)) {
            if ([((NSString *) nil_chk([((id<EduStanfordNlpLingLabel>) nil_chk(tag)) value])) isEqual:@"EX"]) {
              toReturn = true;
            }
          }
        }
        else {
          break;
        }
      }
    }
  }
  else if ([motherCat hasPrefix:@"SQ"] && parent != nil) {
    IOSObjectArray *kids = [parent children];
    {
      IOSObjectArray *a__ = kids;
      EduStanfordNlpTreesTree * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        EduStanfordNlpTreesTree *kid = *b__++;
        if (![((NSString *) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(kid)) value])) hasPrefix:@"VB"]) {
          id<JavaUtilList> tags = [kid preTerminalYield];
          for (id<EduStanfordNlpLingLabel> __strong tag in nil_chk(tags)) {
            if ([((NSString *) nil_chk([((id<EduStanfordNlpLingLabel>) nil_chk(tag)) value])) isEqual:@"EX"]) {
              toReturn = true;
            }
          }
        }
      }
    }
  }
  if (EduStanfordNlpTreesSemanticHeadFinder_DEBUG) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$Z", @"decision ", toReturn)];
  }
  return toReturn;
}

jboolean EduStanfordNlpTreesSemanticHeadFinder_isWHQWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_(EduStanfordNlpTreesTree *t, EduStanfordNlpTreesTree *parent) {
  EduStanfordNlpTreesSemanticHeadFinder_initialize();
  if (t == nil) {
    return false;
  }
  jboolean toReturn = false;
  if ([((NSString *) nil_chk([t value])) hasPrefix:@"SQ"]) {
    if (parent != nil && [((NSString *) nil_chk([parent value])) isEqual:@"SBARQ"]) {
      IOSObjectArray *kids = [parent children];
      {
        IOSObjectArray *a__ = kids;
        EduStanfordNlpTreesTree * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
        EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          EduStanfordNlpTreesTree *kid = *b__++;
          if ([((NSString *) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(kid)) value])) hasPrefix:@"WH"]) {
            toReturn = true;
          }
        }
      }
    }
  }
  if (EduStanfordNlpTreesSemanticHeadFinder_DEBUG) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$Z$@", @"in isWH, decision: ", toReturn, @" for node ", t)];
  }
  return toReturn;
}

jboolean EduStanfordNlpTreesSemanticHeadFinder_isVerbalAuxiliaryWithEduStanfordNlpTreesTree_withJavaUtilSet_withBoolean_(EduStanfordNlpTreesSemanticHeadFinder *self, EduStanfordNlpTreesTree *preterminal, id<JavaUtilSet> verbalSet, jboolean allowJustTagMatch) {
  if ([((EduStanfordNlpTreesTree *) nil_chk(preterminal)) isPreTerminal]) {
    id<EduStanfordNlpLingLabel> kidLabel = [preterminal label];
    NSString *tag = nil;
    if ([EduStanfordNlpLingHasTag_class_() isInstance:kidLabel]) {
      tag = [((id<EduStanfordNlpLingHasTag>) nil_chk(((id<EduStanfordNlpLingHasTag>) cast_check(kidLabel, EduStanfordNlpLingHasTag_class_())))) tag];
    }
    if (tag == nil) {
      tag = [preterminal value];
    }
    id<EduStanfordNlpLingLabel> wordLabel = [((EduStanfordNlpTreesTree *) nil_chk([preterminal firstChild])) label];
    NSString *word = nil;
    if ([EduStanfordNlpLingHasWord_class_() isInstance:wordLabel]) {
      word = [((id<EduStanfordNlpLingHasWord>) nil_chk(((id<EduStanfordNlpLingHasWord>) cast_check(wordLabel, EduStanfordNlpLingHasWord_class_())))) word];
    }
    if (word == nil) {
      word = [((id<EduStanfordNlpLingLabel>) nil_chk(wordLabel)) value];
    }
    if (EduStanfordNlpTreesSemanticHeadFinder_DEBUG) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$$$C$", @"Checking ", [preterminal value], @" head is ", word, '/', tag)];
    }
    NSString *lcWord = [((NSString *) nil_chk(word)) lowercaseString];
    if ((allowJustTagMatch && [((id<JavaUtilSet>) nil_chk(self->unambiguousAuxiliaryTags_)) containsWithId:tag]) || ([((id<JavaUtilSet>) nil_chk(self->verbalTags_)) containsWithId:tag] && [((id<JavaUtilSet>) nil_chk(verbalSet)) containsWithId:lcWord])) {
      if (EduStanfordNlpTreesSemanticHeadFinder_DEBUG) {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"isAuxiliary found desired type of aux"];
      }
      return true;
    }
  }
  return false;
}

jboolean EduStanfordNlpTreesSemanticHeadFinder_hasPassiveProgressiveAuxiliaryWithEduStanfordNlpTreesTreeArray_(EduStanfordNlpTreesSemanticHeadFinder *self, IOSObjectArray *kids) {
  if (EduStanfordNlpTreesSemanticHeadFinder_DEBUG) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"Checking for passive/progressive auxiliary"];
  }
  jboolean foundPassiveVP = false;
  jboolean foundPassiveAux = false;
  {
    IOSObjectArray *a__ = kids;
    EduStanfordNlpTreesTree * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      EduStanfordNlpTreesTree *kid = *b__++;
      if (EduStanfordNlpTreesSemanticHeadFinder_DEBUG) {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$@", @"  checking in ", kid)];
      }
      if (EduStanfordNlpTreesSemanticHeadFinder_isVerbalAuxiliaryWithEduStanfordNlpTreesTree_withJavaUtilSet_withBoolean_(self, kid, self->passiveAuxiliaries_, false)) {
        foundPassiveAux = true;
      }
      else if ([((EduStanfordNlpTreesTree *) nil_chk(kid)) isPhrasal]) {
        id<EduStanfordNlpLingLabel> kidLabel = [kid label];
        NSString *cat = nil;
        if ([EduStanfordNlpLingHasCategory_class_() isInstance:kidLabel]) {
          cat = [((id<EduStanfordNlpLingHasCategory>) nil_chk(((id<EduStanfordNlpLingHasCategory>) cast_check(kidLabel, EduStanfordNlpLingHasCategory_class_())))) category];
        }
        if (cat == nil) {
          cat = [kid value];
        }
        if (![((NSString *) nil_chk(cat)) hasPrefix:@"VP"]) {
          continue;
        }
        if (EduStanfordNlpTreesSemanticHeadFinder_DEBUG) {
          [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"hasPassiveProgressiveAuxiliary found VP"];
        }
        IOSObjectArray *kidkids = [kid children];
        jboolean foundParticipleInVp = false;
        {
          IOSObjectArray *a__ = kidkids;
          EduStanfordNlpTreesTree * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
          EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
          while (b__ < e__) {
            EduStanfordNlpTreesTree *kidkid = *b__++;
            if (EduStanfordNlpTreesSemanticHeadFinder_DEBUG) {
              [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$@", @"  hasPassiveProgressiveAuxiliary examining ", kidkid)];
            }
            if ([((EduStanfordNlpTreesTree *) nil_chk(kidkid)) isPreTerminal]) {
              id<EduStanfordNlpLingLabel> kidkidLabel = [kidkid label];
              NSString *tag = nil;
              if ([EduStanfordNlpLingHasTag_class_() isInstance:kidkidLabel]) {
                tag = [((id<EduStanfordNlpLingHasTag>) nil_chk(((id<EduStanfordNlpLingHasTag>) cast_check(kidkidLabel, EduStanfordNlpLingHasTag_class_())))) tag];
              }
              if (tag == nil) {
                tag = [kidkid value];
              }
              if ([@"VBN" isEqual:tag] || [@"VBG" isEqual:tag] || [@"VBD" isEqual:tag]) {
                foundPassiveVP = true;
                if (EduStanfordNlpTreesSemanticHeadFinder_DEBUG) {
                  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"hasPassiveAuxiliary found VBN/VBG/VBD VP"];
                }
                break;
              }
              else if ([@"CC" isEqual:tag] && foundParticipleInVp) {
                foundPassiveVP = true;
                if (EduStanfordNlpTreesSemanticHeadFinder_DEBUG) {
                  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"hasPassiveAuxiliary [coordination] found (VP (VP[VBN/VBG/VBD] CC"];
                }
                break;
              }
            }
            else if ([kidkid isPhrasal]) {
              NSString *catcat = nil;
              if ([EduStanfordNlpLingHasCategory_class_() isInstance:kidLabel]) {
                catcat = [((id<EduStanfordNlpLingHasCategory>) nil_chk(((id<EduStanfordNlpLingHasCategory>) cast_check(kidLabel, EduStanfordNlpLingHasCategory_class_())))) category];
              }
              if (catcat == nil) {
                catcat = [kid value];
              }
              if ([@"VP" isEqual:catcat]) {
                if (EduStanfordNlpTreesSemanticHeadFinder_DEBUG) {
                  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"hasPassiveAuxiliary found (VP (VP)), recursing"];
                }
                foundParticipleInVp = EduStanfordNlpTreesSemanticHeadFinder_vpContainsParticipleWithEduStanfordNlpTreesTree_(kidkid);
              }
              else if (([@"CONJP" isEqual:catcat] || [@"PRN" isEqual:catcat]) && foundParticipleInVp) {
                foundPassiveVP = true;
                if (EduStanfordNlpTreesSemanticHeadFinder_DEBUG) {
                  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"hasPassiveAuxiliary [coordination] found (VP (VP[VBN/VBG/VBD] CONJP"];
                }
                break;
              }
            }
          }
        }
      }
      if (foundPassiveAux && foundPassiveVP) {
        break;
      }
    }
  }
  if (EduStanfordNlpTreesSemanticHeadFinder_DEBUG) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$Z", @"hasPassiveProgressiveAuxiliary returns ", (foundPassiveAux && foundPassiveVP))];
  }
  return foundPassiveAux && foundPassiveVP;
}

jboolean EduStanfordNlpTreesSemanticHeadFinder_vpContainsParticipleWithEduStanfordNlpTreesTree_(EduStanfordNlpTreesTree *t) {
  EduStanfordNlpTreesSemanticHeadFinder_initialize();
  {
    IOSObjectArray *a__ = [((EduStanfordNlpTreesTree *) nil_chk(t)) children];
    EduStanfordNlpTreesTree * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      EduStanfordNlpTreesTree *kid = *b__++;
      if (EduStanfordNlpTreesSemanticHeadFinder_DEBUG) {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$@", @"vpContainsParticiple examining ", kid)];
      }
      if ([((EduStanfordNlpTreesTree *) nil_chk(kid)) isPreTerminal]) {
        id<EduStanfordNlpLingLabel> kidLabel = [kid label];
        NSString *tag = nil;
        if ([EduStanfordNlpLingHasTag_class_() isInstance:kidLabel]) {
          tag = [((id<EduStanfordNlpLingHasTag>) nil_chk(((id<EduStanfordNlpLingHasTag>) cast_check(kidLabel, EduStanfordNlpLingHasTag_class_())))) tag];
        }
        if (tag == nil) {
          tag = [kid value];
        }
        if ([@"VBN" isEqual:tag] || [@"VBG" isEqual:tag] || [@"VBD" isEqual:tag]) {
          if (EduStanfordNlpTreesSemanticHeadFinder_DEBUG) {
            [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"vpContainsParticiple found VBN/VBG/VBD VP"];
          }
          return true;
        }
      }
    }
  }
  return false;
}

jboolean EduStanfordNlpTreesSemanticHeadFinder_hasVerbalAuxiliaryWithEduStanfordNlpTreesTreeArray_withJavaUtilSet_withBoolean_(EduStanfordNlpTreesSemanticHeadFinder *self, IOSObjectArray *kids, id<JavaUtilSet> verbalSet, jboolean allowTagOnlyMatch) {
  if (EduStanfordNlpTreesSemanticHeadFinder_DEBUG) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"Checking for verbal auxiliary"];
  }
  {
    IOSObjectArray *a__ = kids;
    EduStanfordNlpTreesTree * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      EduStanfordNlpTreesTree *kid = *b__++;
      if (EduStanfordNlpTreesSemanticHeadFinder_DEBUG) {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$@", @"  checking in ", kid)];
      }
      if (EduStanfordNlpTreesSemanticHeadFinder_isVerbalAuxiliaryWithEduStanfordNlpTreesTree_withJavaUtilSet_withBoolean_(self, kid, verbalSet, allowTagOnlyMatch)) {
        return true;
      }
    }
  }
  if (EduStanfordNlpTreesSemanticHeadFinder_DEBUG) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"hasVerbalAuxiliary returns false"];
  }
  return false;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTreesSemanticHeadFinder)

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpTreesSemanticHeadFinder_$Lambda$1)

@implementation EduStanfordNlpTreesSemanticHeadFinder_$Lambda$1

- (jboolean)testWithId:(EduStanfordNlpTreesTree *)tree {
  if (tree == nil) return false;
  id<EduStanfordNlpLingLabel> label = [tree label];
  if (label == nil) return false;
  if ([((NSString *) nil_chk([label value])) contains:@"-TMP"] || [((NSString *) nil_chk([label value])) contains:@"-ADV"]) return false;
  if ([((NSString *) nil_chk([label value])) hasPrefix:@"VP"] && [((EduStanfordNlpTreesTregexTregexMatcher *) nil_chk([((EduStanfordNlpTreesTregexTregexPattern *) nil_chk(JreLoadStatic(EduStanfordNlpTreesSemanticHeadFinder, noVerbOverTempTregex))) matcherWithEduStanfordNlpTreesTree:tree])) matches]) {
    return false;
  }
  return true;
}

- (id<JavaUtilFunctionPredicate>)and__WithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)arg0 {
  return JavaUtilFunctionPredicate_and__WithJavaUtilFunctionPredicate_(self, arg0);
}

- (id<JavaUtilFunctionPredicate>)negate {
  return JavaUtilFunctionPredicate_negate(self);
}

- (id<JavaUtilFunctionPredicate>)or__WithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)arg0 {
  return JavaUtilFunctionPredicate_or__WithJavaUtilFunctionPredicate_(self, arg0);
}

+ (void)initialize {
  if (self == [EduStanfordNlpTreesSemanticHeadFinder_$Lambda$1 class]) {
    EduStanfordNlpTreesSemanticHeadFinder_$Lambda$1_instance = new_EduStanfordNlpTreesSemanticHeadFinder_$Lambda$1_init();
    J2OBJC_SET_INITIALIZED(EduStanfordNlpTreesSemanticHeadFinder_$Lambda$1)
  }
}

@end

void EduStanfordNlpTreesSemanticHeadFinder_$Lambda$1_init(EduStanfordNlpTreesSemanticHeadFinder_$Lambda$1 *self) {
  NSObject_init(self);
}

EduStanfordNlpTreesSemanticHeadFinder_$Lambda$1 *new_EduStanfordNlpTreesSemanticHeadFinder_$Lambda$1_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesSemanticHeadFinder_$Lambda$1, init)
}

EduStanfordNlpTreesSemanticHeadFinder_$Lambda$1 *create_EduStanfordNlpTreesSemanticHeadFinder_$Lambda$1_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesSemanticHeadFinder_$Lambda$1, init)
}
