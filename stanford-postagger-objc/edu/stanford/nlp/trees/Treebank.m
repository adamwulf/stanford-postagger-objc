//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/trees/Treebank.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/io/ExtensionFileFilter.h"
#include "edu/stanford/nlp/ling/Label.h"
#include "edu/stanford/nlp/ling/StringLabel.h"
#include "edu/stanford/nlp/stats/ClassicCounter.h"
#include "edu/stanford/nlp/stats/Counters.h"
#include "edu/stanford/nlp/trees/LabeledScoredTreeReaderFactory.h"
#include "edu/stanford/nlp/trees/TransformingTreebank.h"
#include "edu/stanford/nlp/trees/Tree.h"
#include "edu/stanford/nlp/trees/TreeReaderFactory.h"
#include "edu/stanford/nlp/trees/TreeTransformer.h"
#include "edu/stanford/nlp/trees/TreeVisitor.h"
#include "edu/stanford/nlp/trees/Treebank.h"
#include "edu/stanford/nlp/trees/TreebankLanguagePack.h"
#include "edu/stanford/nlp/util/Generics.h"
#include "edu/stanford/nlp/util/Sets.h"
#include "java/io/File.h"
#include "java/io/FileFilter.h"
#include "java/io/PrintWriter.h"
#include "java/io/StringWriter.h"
#include "java/io/Writer.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/text/NumberFormat.h"
#include "java/util/AbstractCollection.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"
#include "java/util/Set.h"

@interface EduStanfordNlpTreesTreebank () {
 @public
  id<EduStanfordNlpTreesTreeReaderFactory> trf_;
  NSString *encoding_;
}

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpTreesTreebank, trf_, id<EduStanfordNlpTreesTreeReaderFactory>)
J2OBJC_FIELD_SETTER(EduStanfordNlpTreesTreebank, encoding_, NSString *)

@interface EduStanfordNlpTreesTreebank_CounterTreeProcessor : NSObject < EduStanfordNlpTreesTreeVisitor > {
 @public
  jint i_;
}

- (void)visitTreeWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t;

- (jint)total;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpTreesTreebank_CounterTreeProcessor)

__attribute__((unused)) static void EduStanfordNlpTreesTreebank_CounterTreeProcessor_init(EduStanfordNlpTreesTreebank_CounterTreeProcessor *self);

__attribute__((unused)) static EduStanfordNlpTreesTreebank_CounterTreeProcessor *new_EduStanfordNlpTreesTreebank_CounterTreeProcessor_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpTreesTreebank_CounterTreeProcessor *create_EduStanfordNlpTreesTreebank_CounterTreeProcessor_init();

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpTreesTreebank_CounterTreeProcessor)

@interface EduStanfordNlpTreesTreebank_$Lambda$1 : NSObject < EduStanfordNlpTreesTreeVisitor > {
 @public
  JavaLangStringBuilder *val$sb_;
}

- (void)visitTreeWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpTreesTreebank_$Lambda$1)

J2OBJC_FIELD_SETTER(EduStanfordNlpTreesTreebank_$Lambda$1, val$sb_, JavaLangStringBuilder *)

__attribute__((unused)) static void EduStanfordNlpTreesTreebank_$Lambda$1_initWithJavaLangStringBuilder_(EduStanfordNlpTreesTreebank_$Lambda$1 *self, JavaLangStringBuilder *capture$0);

__attribute__((unused)) static EduStanfordNlpTreesTreebank_$Lambda$1 *new_EduStanfordNlpTreesTreebank_$Lambda$1_initWithJavaLangStringBuilder_(JavaLangStringBuilder *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpTreesTreebank_$Lambda$1 *create_EduStanfordNlpTreesTreebank_$Lambda$1_initWithJavaLangStringBuilder_(JavaLangStringBuilder *capture$0);

NSString *EduStanfordNlpTreesTreebank_DEFAULT_TREE_FILE_SUFFIX = @"mrg";

@implementation EduStanfordNlpTreesTreebank

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpTreesTreebank_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithEduStanfordNlpTreesTreeReaderFactory:(id<EduStanfordNlpTreesTreeReaderFactory>)trf {
  EduStanfordNlpTreesTreebank_initWithEduStanfordNlpTreesTreeReaderFactory_(self, trf);
  return self;
}

- (instancetype)initWithEduStanfordNlpTreesTreeReaderFactory:(id<EduStanfordNlpTreesTreeReaderFactory>)trf
                                                withNSString:(NSString *)encoding {
  EduStanfordNlpTreesTreebank_initWithEduStanfordNlpTreesTreeReaderFactory_withNSString_(self, trf, encoding);
  return self;
}

- (instancetype)initWithInt:(jint)initialCapacity {
  EduStanfordNlpTreesTreebank_initWithInt_(self, initialCapacity);
  return self;
}

- (instancetype)initWithInt:(jint)initialCapacity
withEduStanfordNlpTreesTreeReaderFactory:(id<EduStanfordNlpTreesTreeReaderFactory>)trf {
  EduStanfordNlpTreesTreebank_initWithInt_withEduStanfordNlpTreesTreeReaderFactory_(self, initialCapacity, trf);
  return self;
}

- (id<EduStanfordNlpTreesTreeReaderFactory>)treeReaderFactory {
  return trf_;
}

- (NSString *)encoding {
  return encoding_;
}

- (void)clear {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)loadPathWithNSString:(NSString *)pathName {
  [self loadPathWithJavaIoFile:new_JavaIoFile_initWithNSString_(pathName)];
}

- (void)loadPathWithJavaIoFile:(JavaIoFile *)path {
  [self loadPathWithJavaIoFile:path withNSString:EduStanfordNlpTreesTreebank_DEFAULT_TREE_FILE_SUFFIX withBoolean:true];
}

- (void)loadPathWithNSString:(NSString *)pathName
                withNSString:(NSString *)suffix
                 withBoolean:(jboolean)recursively {
  [self loadPathWithJavaIoFile:new_JavaIoFile_initWithNSString_(pathName) withJavaIoFileFilter:new_EduStanfordNlpIoExtensionFileFilter_initWithNSString_withBoolean_(suffix, recursively)];
}

- (void)loadPathWithJavaIoFile:(JavaIoFile *)path
                  withNSString:(NSString *)suffix
                   withBoolean:(jboolean)recursively {
  [self loadPathWithJavaIoFile:path withJavaIoFileFilter:new_EduStanfordNlpIoExtensionFileFilter_initWithNSString_withBoolean_(suffix, recursively)];
}

- (void)loadPathWithNSString:(NSString *)pathName
        withJavaIoFileFilter:(id<JavaIoFileFilter>)filt {
  [self loadPathWithJavaIoFile:new_JavaIoFile_initWithNSString_(pathName) withJavaIoFileFilter:filt];
}

- (void)loadPathWithJavaIoFile:(JavaIoFile *)path
          withJavaIoFileFilter:(id<JavaIoFileFilter>)filt {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)applyWithEduStanfordNlpTreesTreeVisitor:(id<EduStanfordNlpTreesTreeVisitor>)tp {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (EduStanfordNlpTreesTreebank *)transformWithEduStanfordNlpTreesTreeTransformer:(id<EduStanfordNlpTreesTreeTransformer>)treeTrans {
  return new_EduStanfordNlpTreesTransformingTreebank_initWithEduStanfordNlpTreesTreebank_withEduStanfordNlpTreesTreeTransformer_(self, treeTrans);
}

- (NSString *)description {
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  [self applyWithEduStanfordNlpTreesTreeVisitor:new_EduStanfordNlpTreesTreebank_$Lambda$1_initWithJavaLangStringBuilder_(sb)];
  return [sb description];
}

- (jint)size {
  EduStanfordNlpTreesTreebank_CounterTreeProcessor *counter = new_EduStanfordNlpTreesTreebank_CounterTreeProcessor_init();
  [self applyWithEduStanfordNlpTreesTreeVisitor:counter];
  return [counter total];
}

- (void)decimateWithJavaIoWriter:(JavaIoWriter *)trainW
                withJavaIoWriter:(JavaIoWriter *)devW
                withJavaIoWriter:(JavaIoWriter *)testW {
  JavaIoPrintWriter *trainPW = new_JavaIoPrintWriter_initWithJavaIoWriter_withBoolean_(trainW, true);
  JavaIoPrintWriter *devPW = new_JavaIoPrintWriter_initWithJavaIoWriter_withBoolean_(devW, true);
  JavaIoPrintWriter *testPW = new_JavaIoPrintWriter_initWithJavaIoWriter_withBoolean_(testW, true);
  jint i = 0;
  for (EduStanfordNlpTreesTree * __strong t in self) {
    if (i == 8) {
      [((EduStanfordNlpTreesTree *) nil_chk(t)) pennPrintWithJavaIoPrintWriter:devPW];
    }
    else if (i == 9) {
      [((EduStanfordNlpTreesTree *) nil_chk(t)) pennPrintWithJavaIoPrintWriter:testPW];
    }
    else {
      [((EduStanfordNlpTreesTree *) nil_chk(t)) pennPrintWithJavaIoPrintWriter:trainPW];
    }
    i = (i + 1) % 10;
  }
}

- (NSString *)textualSummary {
  return [self textualSummaryWithEduStanfordNlpTreesTreebankLanguagePack:nil];
}

- (NSString *)textualSummaryWithEduStanfordNlpTreesTreebankLanguagePack:(id<EduStanfordNlpTreesTreebankLanguagePack>)tlp {
  jint numTrees = 0;
  jint numTreesLE40 = 0;
  jint numNonUnaryRoots = 0;
  EduStanfordNlpTreesTree *nonUnaryEg = nil;
  EduStanfordNlpStatsClassicCounter *nonUnaries = new_EduStanfordNlpStatsClassicCounter_init();
  EduStanfordNlpStatsClassicCounter *roots = new_EduStanfordNlpStatsClassicCounter_init();
  EduStanfordNlpStatsClassicCounter *starts = new_EduStanfordNlpStatsClassicCounter_init();
  EduStanfordNlpStatsClassicCounter *puncts = new_EduStanfordNlpStatsClassicCounter_init();
  jint numUnenclosedLeaves = 0;
  jint numLeaves = 0;
  jint numNonPhrasal = 0;
  jint numPreTerminalWithMultipleChildren = 0;
  jint numWords = 0;
  jint numTags = 0;
  jint shortestSentence = JavaLangInteger_MAX_VALUE;
  jint longestSentence = 0;
  jint numNullLabel = 0;
  id<JavaUtilSet> words = EduStanfordNlpUtilGenerics_newHashSet();
  EduStanfordNlpStatsClassicCounter *tags = new_EduStanfordNlpStatsClassicCounter_init();
  EduStanfordNlpStatsClassicCounter *cats = new_EduStanfordNlpStatsClassicCounter_init();
  EduStanfordNlpTreesTree *leafEg = nil;
  EduStanfordNlpTreesTree *preTerminalMultipleChildrenEg = nil;
  EduStanfordNlpTreesTree *nullLabelEg = nil;
  EduStanfordNlpTreesTree *rootRewritesAsTaggedWordEg = nil;
  for (EduStanfordNlpTreesTree * __strong t in self) {
    [roots incrementCountWithId:[((EduStanfordNlpTreesTree *) nil_chk(t)) value]];
    numTrees++;
    jint leng = [((JavaUtilArrayList *) nil_chk([t yield])) size];
    if (leng <= 40) {
      numTreesLE40++;
    }
    if (leng < shortestSentence) {
      shortestSentence = leng;
    }
    if (leng > longestSentence) {
      longestSentence = leng;
    }
    if ([t numChildren] > 1) {
      if (numNonUnaryRoots == 0) {
        nonUnaryEg = t;
      }
      if (numNonUnaryRoots < 100) {
        [nonUnaries incrementCountWithId:[t localTree]];
      }
      numNonUnaryRoots++;
    }
    else if ([t isLeaf]) {
      numUnenclosedLeaves++;
    }
    else {
      EduStanfordNlpTreesTree *t2 = [t firstChild];
      if ([((EduStanfordNlpTreesTree *) nil_chk(t2)) isLeaf]) {
        numLeaves++;
        leafEg = t;
      }
      else if ([t2 isPreTerminal]) {
        if (numNonPhrasal == 0) {
          rootRewritesAsTaggedWordEg = t;
        }
        numNonPhrasal++;
      }
      [starts incrementCountWithId:[t2 value]];
    }
    for (EduStanfordNlpTreesTree * __strong subtree in t) {
      id<EduStanfordNlpLingLabel> lab = [((EduStanfordNlpTreesTree *) nil_chk(subtree)) label];
      if (lab == nil || [lab value] == nil || [@"" isEqual:[lab value]]) {
        if (numNullLabel == 0) {
          nullLabelEg = subtree;
        }
        numNullLabel++;
        if (lab == nil) {
          [subtree setLabelWithEduStanfordNlpLingLabel:new_EduStanfordNlpLingStringLabel_initWithNSString_(@"")];
        }
        else if ([lab value] == nil) {
          [((id<EduStanfordNlpLingLabel>) nil_chk([subtree label])) setValueWithNSString:@""];
        }
      }
      if ([subtree isLeaf]) {
        numWords++;
        [((id<JavaUtilSet>) nil_chk(words)) addWithId:[subtree value]];
      }
      else if ([subtree isPreTerminal]) {
        numTags++;
        [tags incrementCountWithId:[subtree value]];
        if (tlp != nil && [tlp isPunctuationTagWithNSString:[subtree value]]) {
          [puncts incrementCountWithId:[((EduStanfordNlpTreesTree *) nil_chk([subtree firstChild])) value]];
        }
      }
      else if ([subtree isPhrasal]) {
        jboolean hasLeafChild = false;
        {
          IOSObjectArray *a__ = [subtree children];
          EduStanfordNlpTreesTree * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
          EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
          while (b__ < e__) {
            EduStanfordNlpTreesTree *kt = *b__++;
            if ([((EduStanfordNlpTreesTree *) nil_chk(kt)) isLeaf]) {
              hasLeafChild = true;
            }
          }
        }
        if (hasLeafChild) {
          numPreTerminalWithMultipleChildren++;
          if (preTerminalMultipleChildrenEg == nil) {
            preTerminalMultipleChildrenEg = subtree;
          }
        }
        [cats incrementCountWithId:[subtree value]];
      }
      else {
        @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@", @"Treebank: Bad tree in treebank!: ", subtree));
      }
    }
  }
  JavaIoStringWriter *sw = new_JavaIoStringWriter_initWithInt_(2000);
  JavaIoPrintWriter *pw = new_JavaIoPrintWriter_initWithJavaIoWriter_(sw);
  JavaTextNumberFormat *nf = JavaTextNumberFormat_getNumberInstance();
  [((JavaTextNumberFormat *) nil_chk(nf)) setMaximumFractionDigitsWithInt:0];
  [pw printlnWithNSString:JreStrcat("$I$I$I$", @"Treebank has ", numTrees, @" trees (", numTreesLE40, @" of length <= 40) and ", numWords, @" words (tokens)")];
  if (numTrees > 0) {
    if (numTags != numWords) {
      [pw printlnWithNSString:JreStrcat("$I", @"  Warning! numTags differs and is ", numTags)];
    }
    if ([roots size] == 1) {
      NSString *root = (NSString *) cast_chk(IOSObjectArray_Get(nil_chk([((id<JavaUtilSet>) nil_chk([roots keySet])) toArray]), 0), [NSString class]);
      [pw printlnWithNSString:JreStrcat("$$", @"  The root category is: ", root)];
    }
    else {
      [pw printlnWithNSString:JreStrcat("$I$$", @"  Warning! ", [roots size], @" different roots in treebank: ", EduStanfordNlpStatsCounters_toStringWithEduStanfordNlpStatsCounter_withJavaTextNumberFormat_(roots, nf))];
    }
    if (numNonUnaryRoots > 0) {
      [pw printWithNSString:JreStrcat("$I$", @"  Warning! ", numNonUnaryRoots, @" trees without unary initial rewrite.  ")];
      if (numNonUnaryRoots > 100) {
        [pw printWithNSString:@"First 100 "];
      }
      [pw printlnWithNSString:JreStrcat("$$", @"Rewrites: ", EduStanfordNlpStatsCounters_toStringWithEduStanfordNlpStatsCounter_withJavaTextNumberFormat_(nonUnaries, nf))];
      [pw printlnWithNSString:JreStrcat("$@", @"    Example: ", nonUnaryEg)];
    }
    if (numUnenclosedLeaves > 0 || numLeaves > 0 || numNonPhrasal > 0) {
      [pw printlnWithNSString:JreStrcat("$I$I$I$", @"  Warning! Non-phrasal trees: ", numUnenclosedLeaves, @" bare leaves; ", numLeaves, @" root rewrites as leaf; and ", numNonPhrasal, @" root rewrites as tagged word")];
      if (numLeaves > 0) {
        [pw printlnWithNSString:JreStrcat("$@", @"  Example bad root rewrites as leaf: ", leafEg)];
      }
      if (numNonPhrasal > 0) {
        [pw printlnWithNSString:JreStrcat("$@", @"  Example bad root rewrites as tagged word: ", rootRewritesAsTaggedWordEg)];
      }
    }
    if (numNullLabel > 0) {
      [pw printlnWithNSString:JreStrcat("$I$", @"  Warning!  ", numNullLabel, @" tree nodes with null or empty string labels, e.g.:")];
      [pw printlnWithNSString:JreStrcat("$@", @"    ", nullLabelEg)];
    }
    if (numPreTerminalWithMultipleChildren > 0) {
      [pw printlnWithNSString:JreStrcat("$I$", @"  Warning! ", numPreTerminalWithMultipleChildren, @" preterminal nodes with multiple children.")];
      [pw printlnWithNSString:JreStrcat("$@", @"    Example: ", preTerminalMultipleChildrenEg)];
    }
    [pw printlnWithNSString:JreStrcat("$I$I$D$", @"  Sentences range from ", shortestSentence, @" to ", longestSentence, @" words, with an average length of ", (((numWords * 100) / numTrees) / 100.0), @" words.")];
    [pw printlnWithNSString:JreStrcat("$I$I$I$", @"  ", [cats size], @" phrasal category types, ", [tags size], @" tag types, and ", [((id<JavaUtilSet>) nil_chk(words)) size], @" word types")];
    IOSObjectArray *empties = [IOSObjectArray newArrayWithObjects:(id[]){ @"*", @"0", @"*T*", @"*RNR*", @"*U*", @"*?*", @"*EXP*", @"*ICH*", @"*NOT*", @"*PPA*", @"*OP*", @"*pro*", @"*PRO*" } count:13 type:NSString_class_()];
    id<JavaUtilSet> knownEmpties = EduStanfordNlpUtilGenerics_newHashSetWithJavaUtilCollection_(JavaUtilArrays_asListWithNSObjectArray_(empties));
    id<JavaUtilSet> emptiesIntersection = EduStanfordNlpUtilSets_intersectionWithJavaUtilSet_withJavaUtilSet_(words, knownEmpties);
    if (![((id<JavaUtilSet>) nil_chk(emptiesIntersection)) isEmpty]) {
      [pw printlnWithNSString:JreStrcat("$I$@", @"  Caution! ", [emptiesIntersection size], @" word types are known empty elements: ", emptiesIntersection)];
    }
    id<JavaUtilSet> joint = EduStanfordNlpUtilSets_intersectionWithJavaUtilSet_withJavaUtilSet_([cats keySet], [tags keySet]);
    if (![((id<JavaUtilSet>) nil_chk(joint)) isEmpty]) {
      [pw printlnWithNSString:JreStrcat("$I$@", @"  Warning! ", [joint size], @" items are tags and categories: ", joint)];
    }
    for (NSString * __strong cat in nil_chk([cats keySet])) {
      if (cat != nil && [cat contains:@"@"]) {
        [pw printlnWithNSString:JreStrcat("$$", @"  Warning!!  Stanford Parser does not work with categories containing '@' like: ", cat)];
        break;
      }
    }
    for (NSString * __strong cat in nil_chk([tags keySet])) {
      if (cat != nil && [cat contains:@"@"]) {
        [pw printlnWithNSString:JreStrcat("$$", @"  Warning!!  Stanford Parser does not work with tags containing '@' like: ", cat)];
        break;
      }
    }
    [pw printlnWithNSString:JreStrcat("$$", @"    Cats: ", EduStanfordNlpStatsCounters_toStringWithEduStanfordNlpStatsCounter_withJavaTextNumberFormat_(cats, nf))];
    [pw printlnWithNSString:JreStrcat("$$", @"    Tags: ", EduStanfordNlpStatsCounters_toStringWithEduStanfordNlpStatsCounter_withJavaTextNumberFormat_(tags, nf))];
    [pw printlnWithNSString:JreStrcat("$I$$", @"    ", [starts size], @" start categories: ", EduStanfordNlpStatsCounters_toStringWithEduStanfordNlpStatsCounter_withJavaTextNumberFormat_(starts, nf))];
    if (![puncts isEmpty]) {
      [pw printlnWithNSString:JreStrcat("$$", @"    Puncts: ", EduStanfordNlpStatsCounters_toStringWithEduStanfordNlpStatsCounter_withJavaTextNumberFormat_(puncts, nf))];
    }
  }
  return [sw description];
}

- (jboolean)removeWithId:(id)o {
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"Treebank is read-only");
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTreeReaderFactory;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 4, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 11, 12, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTreebank;", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 15, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 17, 18, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 19, 20, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 21, 22, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithEduStanfordNlpTreesTreeReaderFactory:);
  methods[2].selector = @selector(initWithEduStanfordNlpTreesTreeReaderFactory:withNSString:);
  methods[3].selector = @selector(initWithInt:);
  methods[4].selector = @selector(initWithInt:withEduStanfordNlpTreesTreeReaderFactory:);
  methods[5].selector = @selector(treeReaderFactory);
  methods[6].selector = @selector(encoding);
  methods[7].selector = @selector(clear);
  methods[8].selector = @selector(loadPathWithNSString:);
  methods[9].selector = @selector(loadPathWithJavaIoFile:);
  methods[10].selector = @selector(loadPathWithNSString:withNSString:withBoolean:);
  methods[11].selector = @selector(loadPathWithJavaIoFile:withNSString:withBoolean:);
  methods[12].selector = @selector(loadPathWithNSString:withJavaIoFileFilter:);
  methods[13].selector = @selector(loadPathWithJavaIoFile:withJavaIoFileFilter:);
  methods[14].selector = @selector(applyWithEduStanfordNlpTreesTreeVisitor:);
  methods[15].selector = @selector(transformWithEduStanfordNlpTreesTreeTransformer:);
  methods[16].selector = @selector(description);
  methods[17].selector = @selector(size);
  methods[18].selector = @selector(decimateWithJavaIoWriter:withJavaIoWriter:withJavaIoWriter:);
  methods[19].selector = @selector(textualSummary);
  methods[20].selector = @selector(textualSummaryWithEduStanfordNlpTreesTreebankLanguagePack:);
  methods[21].selector = @selector(removeWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "trf_", "LEduStanfordNlpTreesTreeReaderFactory;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "encoding_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "DEFAULT_TREE_FILE_SUFFIX", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 23, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpTreesTreeReaderFactory;", "LEduStanfordNlpTreesTreeReaderFactory;LNSString;", "I", "ILEduStanfordNlpTreesTreeReaderFactory;", "loadPath", "LNSString;", "LJavaIoFile;", "LNSString;LNSString;Z", "LJavaIoFile;LNSString;Z", "LNSString;LJavaIoFileFilter;", "LJavaIoFile;LJavaIoFileFilter;", "apply", "LEduStanfordNlpTreesTreeVisitor;", "transform", "LEduStanfordNlpTreesTreeTransformer;", "toString", "decimate", "LJavaIoWriter;LJavaIoWriter;LJavaIoWriter;", "LJavaIoIOException;", "textualSummary", "LEduStanfordNlpTreesTreebankLanguagePack;", "remove", "LNSObject;", &EduStanfordNlpTreesTreebank_DEFAULT_TREE_FILE_SUFFIX, "LEduStanfordNlpTreesTreebank_CounterTreeProcessor;", "Ljava/util/AbstractCollection<Ledu/stanford/nlp/trees/Tree;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpTreesTreebank = { "Treebank", "edu.stanford.nlp.trees", ptrTable, methods, fields, 7, 0x401, 22, 3, -1, 24, -1, 25, -1 };
  return &_EduStanfordNlpTreesTreebank;
}

@end

void EduStanfordNlpTreesTreebank_init(EduStanfordNlpTreesTreebank *self) {
  EduStanfordNlpTreesTreebank_initWithEduStanfordNlpTreesTreeReaderFactory_(self, new_EduStanfordNlpTreesLabeledScoredTreeReaderFactory_init());
}

void EduStanfordNlpTreesTreebank_initWithEduStanfordNlpTreesTreeReaderFactory_(EduStanfordNlpTreesTreebank *self, id<EduStanfordNlpTreesTreeReaderFactory> trf) {
  JavaUtilAbstractCollection_init(self);
  self->encoding_ = EduStanfordNlpTreesTreebankLanguagePack_DEFAULT_ENCODING;
  self->trf_ = trf;
}

void EduStanfordNlpTreesTreebank_initWithEduStanfordNlpTreesTreeReaderFactory_withNSString_(EduStanfordNlpTreesTreebank *self, id<EduStanfordNlpTreesTreeReaderFactory> trf, NSString *encoding) {
  JavaUtilAbstractCollection_init(self);
  self->encoding_ = EduStanfordNlpTreesTreebankLanguagePack_DEFAULT_ENCODING;
  self->trf_ = trf;
  self->encoding_ = encoding;
}

void EduStanfordNlpTreesTreebank_initWithInt_(EduStanfordNlpTreesTreebank *self, jint initialCapacity) {
  EduStanfordNlpTreesTreebank_initWithInt_withEduStanfordNlpTreesTreeReaderFactory_(self, initialCapacity, new_EduStanfordNlpTreesLabeledScoredTreeReaderFactory_init());
}

void EduStanfordNlpTreesTreebank_initWithInt_withEduStanfordNlpTreesTreeReaderFactory_(EduStanfordNlpTreesTreebank *self, jint initialCapacity, id<EduStanfordNlpTreesTreeReaderFactory> trf) {
  JavaUtilAbstractCollection_init(self);
  self->encoding_ = EduStanfordNlpTreesTreebankLanguagePack_DEFAULT_ENCODING;
  self->trf_ = trf;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTreesTreebank)

@implementation EduStanfordNlpTreesTreebank_CounterTreeProcessor

- (void)visitTreeWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t {
  i_++;
}

- (jint)total {
  return i_;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpTreesTreebank_CounterTreeProcessor_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(visitTreeWithEduStanfordNlpTreesTree:);
  methods[1].selector = @selector(total);
  methods[2].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "i_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "visitTree", "LEduStanfordNlpTreesTree;", "LEduStanfordNlpTreesTreebank;" };
  static const J2ObjcClassInfo _EduStanfordNlpTreesTreebank_CounterTreeProcessor = { "CounterTreeProcessor", "edu.stanford.nlp.trees", ptrTable, methods, fields, 7, 0x1a, 3, 1, 2, -1, -1, -1, -1 };
  return &_EduStanfordNlpTreesTreebank_CounterTreeProcessor;
}

@end

void EduStanfordNlpTreesTreebank_CounterTreeProcessor_init(EduStanfordNlpTreesTreebank_CounterTreeProcessor *self) {
  NSObject_init(self);
}

EduStanfordNlpTreesTreebank_CounterTreeProcessor *new_EduStanfordNlpTreesTreebank_CounterTreeProcessor_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesTreebank_CounterTreeProcessor, init)
}

EduStanfordNlpTreesTreebank_CounterTreeProcessor *create_EduStanfordNlpTreesTreebank_CounterTreeProcessor_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesTreebank_CounterTreeProcessor, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTreesTreebank_CounterTreeProcessor)

@implementation EduStanfordNlpTreesTreebank_$Lambda$1

- (void)visitTreeWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t {
  (void) [((JavaLangStringBuilder *) nil_chk(val$sb_)) appendWithNSString:[((EduStanfordNlpTreesTree *) nil_chk(t)) description]];
  (void) [val$sb_ appendWithChar:0x000a];
}

@end

void EduStanfordNlpTreesTreebank_$Lambda$1_initWithJavaLangStringBuilder_(EduStanfordNlpTreesTreebank_$Lambda$1 *self, JavaLangStringBuilder *capture$0) {
  self->val$sb_ = capture$0;
  NSObject_init(self);
}

EduStanfordNlpTreesTreebank_$Lambda$1 *new_EduStanfordNlpTreesTreebank_$Lambda$1_initWithJavaLangStringBuilder_(JavaLangStringBuilder *capture$0) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesTreebank_$Lambda$1, initWithJavaLangStringBuilder_, capture$0)
}

EduStanfordNlpTreesTreebank_$Lambda$1 *create_EduStanfordNlpTreesTreebank_$Lambda$1_initWithJavaLangStringBuilder_(JavaLangStringBuilder *capture$0) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesTreebank_$Lambda$1, initWithJavaLangStringBuilder_, capture$0)
}
