//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/trees/MemoryTreebank.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/io/IOUtils.h"
#include "edu/stanford/nlp/io/RuntimeIOException.h"
#include "edu/stanford/nlp/ling/CoreAnnotations.h"
#include "edu/stanford/nlp/ling/CoreLabel.h"
#include "edu/stanford/nlp/ling/HasIndex.h"
#include "edu/stanford/nlp/ling/Label.h"
#include "edu/stanford/nlp/objectbank/ObjectBank.h"
#include "edu/stanford/nlp/trees/LabeledScoredTreeReaderFactory.h"
#include "edu/stanford/nlp/trees/MemoryTreebank.h"
#include "edu/stanford/nlp/trees/PennTreeReader.h"
#include "edu/stanford/nlp/trees/Tree.h"
#include "edu/stanford/nlp/trees/TreeNormalizer.h"
#include "edu/stanford/nlp/trees/TreeReader.h"
#include "edu/stanford/nlp/trees/TreeReaderFactory.h"
#include "edu/stanford/nlp/trees/TreeTransformer.h"
#include "edu/stanford/nlp/trees/TreeVisitor.h"
#include "edu/stanford/nlp/trees/Treebank.h"
#include "edu/stanford/nlp/trees/Trees.h"
#include "edu/stanford/nlp/util/CollectionValuedMap.h"
#include "edu/stanford/nlp/util/FilePathProcessor.h"
#include "edu/stanford/nlp/util/Generics.h"
#include "edu/stanford/nlp/util/Timing.h"
#include "java/io/BufferedReader.h"
#include "java/io/File.h"
#include "java/io/FileFilter.h"
#include "java/io/FileInputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStreamReader.h"
#include "java/io/PrintStream.h"
#include "java/io/Reader.h"
#include "java/lang/Boolean.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Comparator.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/ListIterator.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/Spliterator.h"
#include "java/util/function/UnaryOperator.h"

@interface EduStanfordNlpTreesMemoryTreebank () {
 @public
  id<JavaUtilList> parseTrees_;
  id<JavaUtilMap> srlMap_;
}

- (void)readSRLFileWithNSString:(NSString *)srlFile;

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpTreesMemoryTreebank, parseTrees_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(EduStanfordNlpTreesMemoryTreebank, srlMap_, id<JavaUtilMap>)

inline jboolean EduStanfordNlpTreesMemoryTreebank_get_PRINT_FILENAMES();
#define EduStanfordNlpTreesMemoryTreebank_PRINT_FILENAMES false
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpTreesMemoryTreebank, PRINT_FILENAMES, jboolean)

__attribute__((unused)) static void EduStanfordNlpTreesMemoryTreebank_readSRLFileWithNSString_(EduStanfordNlpTreesMemoryTreebank *self, NSString *srlFile);

@interface EduStanfordNlpTreesMemoryTreebank_$Lambda$1 : NSObject < EduStanfordNlpTreesTreeReaderFactory >

- (id<EduStanfordNlpTreesTreeReader>)newTreeReaderWithJavaIoReader:(JavaIoReader *)inArg OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_STATIC_INIT(EduStanfordNlpTreesMemoryTreebank_$Lambda$1)

inline EduStanfordNlpTreesMemoryTreebank_$Lambda$1 *EduStanfordNlpTreesMemoryTreebank_$Lambda$1_get_instance();
static EduStanfordNlpTreesMemoryTreebank_$Lambda$1 *EduStanfordNlpTreesMemoryTreebank_$Lambda$1_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpTreesMemoryTreebank_$Lambda$1, instance, EduStanfordNlpTreesMemoryTreebank_$Lambda$1 *)

__attribute__((unused)) static void EduStanfordNlpTreesMemoryTreebank_$Lambda$1_init(EduStanfordNlpTreesMemoryTreebank_$Lambda$1 *self);

__attribute__((unused)) static EduStanfordNlpTreesMemoryTreebank_$Lambda$1 *new_EduStanfordNlpTreesMemoryTreebank_$Lambda$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpTreesMemoryTreebank_$Lambda$1 *create_EduStanfordNlpTreesMemoryTreebank_$Lambda$1_init();

@implementation EduStanfordNlpTreesMemoryTreebank

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpTreesMemoryTreebank_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithEduStanfordNlpTreesTreeNormalizer:(EduStanfordNlpTreesTreeNormalizer *)tm {
  EduStanfordNlpTreesMemoryTreebank_initWithEduStanfordNlpTreesTreeNormalizer_(self, tm);
  return self;
}

- (instancetype)initWithNSString:(NSString *)encoding {
  EduStanfordNlpTreesMemoryTreebank_initWithNSString_(self, encoding);
  return self;
}

- (instancetype)initWithEduStanfordNlpTreesTreeReaderFactory:(id<EduStanfordNlpTreesTreeReaderFactory>)trf {
  EduStanfordNlpTreesMemoryTreebank_initWithEduStanfordNlpTreesTreeReaderFactory_(self, trf);
  return self;
}

- (instancetype)initWithEduStanfordNlpTreesTreeReaderFactory:(id<EduStanfordNlpTreesTreeReaderFactory>)trf
                                                withNSString:(NSString *)encoding {
  EduStanfordNlpTreesMemoryTreebank_initWithEduStanfordNlpTreesTreeReaderFactory_withNSString_(self, trf, encoding);
  return self;
}

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)trees
withEduStanfordNlpTreesTreeReaderFactory:(id<EduStanfordNlpTreesTreeReaderFactory>)trf
                        withNSString:(NSString *)encoding {
  EduStanfordNlpTreesMemoryTreebank_initWithJavaUtilList_withEduStanfordNlpTreesTreeReaderFactory_withNSString_(self, trees, trf, encoding);
  return self;
}

- (instancetype)initWithInt:(jint)initialCapacity {
  EduStanfordNlpTreesMemoryTreebank_initWithInt_(self, initialCapacity);
  return self;
}

- (instancetype)initWithInt:(jint)initialCapacity
withEduStanfordNlpTreesTreeReaderFactory:(id<EduStanfordNlpTreesTreeReaderFactory>)trf {
  EduStanfordNlpTreesMemoryTreebank_initWithInt_withEduStanfordNlpTreesTreeReaderFactory_(self, initialCapacity, trf);
  return self;
}

- (void)clear {
  [((id<JavaUtilList>) nil_chk(parseTrees_)) clear];
}

- (void)loadPathWithJavaIoFile:(JavaIoFile *)path
          withJavaIoFileFilter:(id<JavaIoFileFilter>)filt {
  EduStanfordNlpUtilFilePathProcessor_processPathWithJavaIoFile_withJavaIoFileFilter_withEduStanfordNlpUtilFileProcessor_(path, filt, self);
}

- (void)loadPathWithNSString:(NSString *)path
        withJavaIoFileFilter:(id<JavaIoFileFilter>)filt
                withNSString:(NSString *)srlFile {
  EduStanfordNlpTreesMemoryTreebank_readSRLFileWithNSString_(self, srlFile);
  EduStanfordNlpUtilFilePathProcessor_processPathWithJavaIoFile_withJavaIoFileFilter_withEduStanfordNlpUtilFileProcessor_(new_JavaIoFile_initWithNSString_(path), filt, self);
  srlMap_ = nil;
}

- (void)readSRLFileWithNSString:(NSString *)srlFile {
  EduStanfordNlpTreesMemoryTreebank_readSRLFileWithNSString_(self, srlFile);
}

- (void)processFileWithJavaIoFile:(JavaIoFile *)file {
  id<EduStanfordNlpTreesTreeReader> tr = nil;
  EduStanfordNlpUtilCollectionValuedMap *srlMap = nil;
  if (self->srlMap_ != nil) {
    NSString *filename = [((JavaIoFile *) nil_chk(file)) getAbsolutePath];
    for (NSString * __strong suffix in nil_chk([((id<JavaUtilMap>) nil_chk(self->srlMap_)) keySet])) {
      if ([((NSString *) nil_chk(filename)) hasSuffix:suffix]) {
        srlMap = [((id<JavaUtilMap>) nil_chk(self->srlMap_)) getWithId:suffix];
        break;
      }
    }
    if (srlMap == nil) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$@", @"could not find SRL entries for file: ", file)];
    }
  }
  @try {
    tr = [((id<EduStanfordNlpTreesTreeReaderFactory>) nil_chk([self treeReaderFactory])) newTreeReaderWithJavaIoReader:new_JavaIoBufferedReader_initWithJavaIoReader_(new_JavaIoInputStreamReader_initWithJavaIoInputStream_withNSString_(new_JavaIoFileInputStream_initWithJavaIoFile_(file), [self encoding]))];
    jint sentIndex = 0;
    EduStanfordNlpTreesTree *pt;
    while ((pt = [((id<EduStanfordNlpTreesTreeReader>) nil_chk(tr)) readTree]) != nil) {
      if ([EduStanfordNlpLingHasIndex_class_() isInstance:[((EduStanfordNlpTreesTree *) nil_chk(pt)) label]]) {
        id<EduStanfordNlpLingHasIndex> hi = (id<EduStanfordNlpLingHasIndex>) cast_check([pt label], EduStanfordNlpLingHasIndex_class_());
        [((id<EduStanfordNlpLingHasIndex>) nil_chk(hi)) setDocIDWithNSString:[((JavaIoFile *) nil_chk(file)) getName]];
        [hi setSentIndexWithInt:sentIndex];
      }
      if (srlMap == nil) {
        [((id<JavaUtilList>) nil_chk(parseTrees_)) addWithId:pt];
      }
      else {
        id<JavaUtilCollection> srls = [srlMap getWithId:JavaLangInteger_valueOfWithInt_(sentIndex)];
        [((id<JavaUtilList>) nil_chk(parseTrees_)) addWithId:pt];
        if ([((id<JavaUtilCollection>) nil_chk(srls)) isEmpty]) {
        }
        else {
          for (NSString * __strong srl in srls) {
            IOSObjectArray *bits = [((NSString *) nil_chk(srl)) split:@"\\s+"];
            jint verbIndex = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(nil_chk(bits), 0));
            NSString *lemma = IOSObjectArray_Get(nil_chk([((NSString *) nil_chk(IOSObjectArray_Get(bits, 2))) split:@"\\."]), 0);
            EduStanfordNlpTreesTree *verb = EduStanfordNlpTreesTrees_getTerminalWithEduStanfordNlpTreesTree_withInt_(pt, verbIndex);
            (void) [((EduStanfordNlpLingCoreLabel *) nil_chk(((EduStanfordNlpLingCoreLabel *) cast_chk([((EduStanfordNlpTreesTree *) nil_chk(verb)) label], [EduStanfordNlpLingCoreLabel class])))) setWithIOSClass:EduStanfordNlpLingCoreAnnotations_CoNLLPredicateAnnotation_class_() withId:JavaLangBoolean_valueOfWithBoolean_(true)];
            for (jint i = 4; i < bits->size_; i++) {
              NSString *arg = IOSObjectArray_Get(bits, i);
              IOSObjectArray *bits1;
              if ([((NSString *) nil_chk(arg)) indexOfString:@"ARGM"] >= 0) {
                bits1 = [arg split:@"-"];
              }
              else {
                bits1 = [arg split:@"-"];
              }
              NSString *locs = IOSObjectArray_Get(nil_chk(bits1), 0);
              NSString *argType = IOSObjectArray_Get(bits1, 1);
              if ([((NSString *) nil_chk(argType)) isEqual:@"rel"]) {
                continue;
              }
              {
                IOSObjectArray *a__ = [((NSString *) nil_chk(locs)) split:@"[*,]"];
                NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
                NSString * const *e__ = b__ + a__->size_;
                while (b__ < e__) {
                  NSString *loc = *b__++;
                  bits1 = [((NSString *) nil_chk(loc)) split:@":"];
                  jint term = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(nil_chk(bits1), 0));
                  jint height = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(bits1, 1));
                  EduStanfordNlpTreesTree *t1 = EduStanfordNlpTreesTrees_getPreTerminalWithEduStanfordNlpTreesTree_withInt_(pt, term);
                  for (jint j = 0; j < height; j++) {
                    t1 = [((EduStanfordNlpTreesTree *) nil_chk(t1)) parentWithEduStanfordNlpTreesTree:pt];
                  }
                  id<JavaUtilMap> roleMap = [((EduStanfordNlpLingCoreLabel *) nil_chk(((EduStanfordNlpLingCoreLabel *) cast_chk([((EduStanfordNlpTreesTree *) nil_chk(t1)) label], [EduStanfordNlpLingCoreLabel class])))) getWithIOSClass:EduStanfordNlpLingCoreAnnotations_CoNLLSRLAnnotation_class_()];
                  if (roleMap == nil) {
                    roleMap = EduStanfordNlpUtilGenerics_newHashMap();
                    (void) [((EduStanfordNlpLingCoreLabel *) nil_chk(((EduStanfordNlpLingCoreLabel *) cast_chk([t1 label], [EduStanfordNlpLingCoreLabel class])))) setWithIOSClass:EduStanfordNlpLingCoreAnnotations_CoNLLSRLAnnotation_class_() withId:roleMap];
                  }
                  (void) [((id<JavaUtilMap>) nil_chk(roleMap)) putWithId:JavaLangInteger_valueOfWithInt_(verbIndex) withId:argType];
                }
              }
            }
          }
        }
      }
      sentIndex++;
    }
  }
  @catch (JavaIoIOException *e) {
    @throw new_EduStanfordNlpIoRuntimeIOException_initWithNSString_withNSException_(JreStrcat("$@", @"MemoryTreebank.processFile IOException in file ", file), e);
  }
  @finally {
    EduStanfordNlpIoIOUtils_closeIgnoringExceptionsWithJavaIoCloseable_(tr);
  }
}

- (void)load__WithJavaIoReader:(JavaIoReader *)r {
  [self load__WithJavaIoReader:r withNSString:nil];
}

- (void)load__WithJavaIoReader:(JavaIoReader *)r
                  withNSString:(NSString *)id_ {
  @try {
    id<EduStanfordNlpTreesTreeReader> tr = [((id<EduStanfordNlpTreesTreeReaderFactory>) nil_chk([self treeReaderFactory])) newTreeReaderWithJavaIoReader:r];
    jint sentIndex = 0;
    for (EduStanfordNlpTreesTree *pt; (pt = [((id<EduStanfordNlpTreesTreeReader>) nil_chk(tr)) readTree]) != nil; ) {
      if ([EduStanfordNlpLingHasIndex_class_() isInstance:[((EduStanfordNlpTreesTree *) nil_chk(pt)) label]]) {
        id<EduStanfordNlpLingHasIndex> hi = (id<EduStanfordNlpLingHasIndex>) cast_check([pt label], EduStanfordNlpLingHasIndex_class_());
        if (id_ != nil) {
          [((id<EduStanfordNlpLingHasIndex>) nil_chk(hi)) setDocIDWithNSString:id_];
        }
        [((id<EduStanfordNlpLingHasIndex>) nil_chk(hi)) setSentIndexWithInt:sentIndex];
      }
      [((id<JavaUtilList>) nil_chk(parseTrees_)) addWithId:pt];
      sentIndex++;
    }
  }
  @catch (JavaIoIOException *e) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$@", @"load IO Exception: ", e)];
  }
}

- (EduStanfordNlpTreesTree *)getWithInt:(jint)i {
  return [((id<JavaUtilList>) nil_chk(parseTrees_)) getWithInt:i];
}

- (void)applyWithEduStanfordNlpTreesTreeVisitor:(id<EduStanfordNlpTreesTreeVisitor>)tp {
  for (EduStanfordNlpTreesTree * __strong parseTree in nil_chk(parseTrees_)) {
    [((id<EduStanfordNlpTreesTreeVisitor>) nil_chk(tp)) visitTreeWithEduStanfordNlpTreesTree:parseTree];
  }
}

- (id<JavaUtilIterator>)iterator {
  return [((id<JavaUtilList>) nil_chk(parseTrees_)) iterator];
}

- (jint)size {
  return [((id<JavaUtilList>) nil_chk(parseTrees_)) size];
}

- (void)addWithInt:(jint)index
            withId:(EduStanfordNlpTreesTree *)element {
  [((id<JavaUtilList>) nil_chk(parseTrees_)) addWithInt:index withId:element];
}

- (jboolean)addWithId:(EduStanfordNlpTreesTree *)element {
  return [((id<JavaUtilList>) nil_chk(parseTrees_)) addWithId:element];
}

- (jboolean)addAllWithInt:(jint)index
   withJavaUtilCollection:(id<JavaUtilCollection>)c {
  return [((id<JavaUtilList>) nil_chk(parseTrees_)) addAllWithInt:index withJavaUtilCollection:c];
}

- (jint)indexOfWithId:(id)o {
  return [((id<JavaUtilList>) nil_chk(parseTrees_)) indexOfWithId:o];
}

- (jint)lastIndexOfWithId:(id)o {
  return [((id<JavaUtilList>) nil_chk(parseTrees_)) lastIndexOfWithId:o];
}

- (EduStanfordNlpTreesTree *)removeWithInt:(jint)index {
  return [((id<JavaUtilList>) nil_chk(parseTrees_)) removeWithInt:index];
}

- (EduStanfordNlpTreesTree *)setWithInt:(jint)index
                                 withId:(EduStanfordNlpTreesTree *)element {
  return [((id<JavaUtilList>) nil_chk(parseTrees_)) setWithInt:index withId:element];
}

- (id<JavaUtilListIterator>)listIterator {
  return [((id<JavaUtilList>) nil_chk(parseTrees_)) listIterator];
}

- (id<JavaUtilListIterator>)listIteratorWithInt:(jint)index {
  return [((id<JavaUtilList>) nil_chk(parseTrees_)) listIteratorWithInt:index];
}

- (id<JavaUtilList>)subListWithInt:(jint)fromIndex
                           withInt:(jint)toIndex {
  return [((id<JavaUtilList>) nil_chk(parseTrees_)) subListWithInt:fromIndex withInt:toIndex];
}

- (EduStanfordNlpTreesTreebank *)transformWithEduStanfordNlpTreesTreeTransformer:(id<EduStanfordNlpTreesTreeTransformer>)treeTrans {
  EduStanfordNlpTreesTreebank *mtb = new_EduStanfordNlpTreesMemoryTreebank_initWithInt_withEduStanfordNlpTreesTreeReaderFactory_([self size], [self treeReaderFactory]);
  for (EduStanfordNlpTreesTree * __strong t in self) {
    [mtb addWithId:[((id<EduStanfordNlpTreesTreeTransformer>) nil_chk(treeTrans)) transformTreeWithEduStanfordNlpTreesTree:t]];
  }
  return mtb;
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  EduStanfordNlpTreesMemoryTreebank_mainWithNSStringArray_(args);
}

- (void)replaceAllWithJavaUtilFunctionUnaryOperator:(id<JavaUtilFunctionUnaryOperator>)arg0 {
  JavaUtilList_replaceAllWithJavaUtilFunctionUnaryOperator_(self, arg0);
}

- (void)sortWithJavaUtilComparator:(id<JavaUtilComparator>)arg0 {
  JavaUtilList_sortWithJavaUtilComparator_(self, arg0);
}

- (id<JavaUtilSpliterator>)spliterator {
  return JavaUtilList_spliterator(self);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, -1, 5, -1, -1 },
    { NULL, NULL, 0x1, -1, 6, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 11, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 16, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x1, 17, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 19, -1, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 20, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 22, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 21, 23, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 24, 25, -1, 26, -1, -1 },
    { NULL, "I", 0x1, 27, 28, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 29, 28, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x1, 30, 6, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x1, 31, 22, -1, -1, -1, -1 },
    { NULL, "LJavaUtilListIterator;", 0x1, -1, -1, -1, 32, -1, -1 },
    { NULL, "LJavaUtilListIterator;", 0x1, 33, 6, -1, 34, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 35, 36, -1, 37, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTreebank;", 0x1, 38, 39, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 40, 41, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithEduStanfordNlpTreesTreeNormalizer:);
  methods[2].selector = @selector(initWithNSString:);
  methods[3].selector = @selector(initWithEduStanfordNlpTreesTreeReaderFactory:);
  methods[4].selector = @selector(initWithEduStanfordNlpTreesTreeReaderFactory:withNSString:);
  methods[5].selector = @selector(initWithJavaUtilList:withEduStanfordNlpTreesTreeReaderFactory:withNSString:);
  methods[6].selector = @selector(initWithInt:);
  methods[7].selector = @selector(initWithInt:withEduStanfordNlpTreesTreeReaderFactory:);
  methods[8].selector = @selector(clear);
  methods[9].selector = @selector(loadPathWithJavaIoFile:withJavaIoFileFilter:);
  methods[10].selector = @selector(loadPathWithNSString:withJavaIoFileFilter:withNSString:);
  methods[11].selector = @selector(readSRLFileWithNSString:);
  methods[12].selector = @selector(processFileWithJavaIoFile:);
  methods[13].selector = @selector(load__WithJavaIoReader:);
  methods[14].selector = @selector(load__WithJavaIoReader:withNSString:);
  methods[15].selector = @selector(getWithInt:);
  methods[16].selector = @selector(applyWithEduStanfordNlpTreesTreeVisitor:);
  methods[17].selector = @selector(iterator);
  methods[18].selector = @selector(size);
  methods[19].selector = @selector(addWithInt:withId:);
  methods[20].selector = @selector(addWithId:);
  methods[21].selector = @selector(addAllWithInt:withJavaUtilCollection:);
  methods[22].selector = @selector(indexOfWithId:);
  methods[23].selector = @selector(lastIndexOfWithId:);
  methods[24].selector = @selector(removeWithInt:);
  methods[25].selector = @selector(setWithInt:withId:);
  methods[26].selector = @selector(listIterator);
  methods[27].selector = @selector(listIteratorWithInt:);
  methods[28].selector = @selector(subListWithInt:withInt:);
  methods[29].selector = @selector(transformWithEduStanfordNlpTreesTreeTransformer:);
  methods[30].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PRINT_FILENAMES", "Z", .constantValue.asBOOL = EduStanfordNlpTreesMemoryTreebank_PRINT_FILENAMES, 0x1a, -1, -1, -1, -1 },
    { "parseTrees_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 42, -1 },
    { "srlMap_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 43, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpTreesTreeNormalizer;", "LNSString;", "LEduStanfordNlpTreesTreeReaderFactory;", "LEduStanfordNlpTreesTreeReaderFactory;LNSString;", "LJavaUtilList;LEduStanfordNlpTreesTreeReaderFactory;LNSString;", "(Ljava/util/List<Ledu/stanford/nlp/trees/Tree;>;Ledu/stanford/nlp/trees/TreeReaderFactory;Ljava/lang/String;)V", "I", "ILEduStanfordNlpTreesTreeReaderFactory;", "loadPath", "LJavaIoFile;LJavaIoFileFilter;", "LNSString;LJavaIoFileFilter;LNSString;", "readSRLFile", "processFile", "LJavaIoFile;", "load", "LJavaIoReader;", "LJavaIoReader;LNSString;", "get", "apply", "LEduStanfordNlpTreesTreeVisitor;", "()Ljava/util/Iterator<Ledu/stanford/nlp/trees/Tree;>;", "add", "ILEduStanfordNlpTreesTree;", "LEduStanfordNlpTreesTree;", "addAll", "ILJavaUtilCollection;", "(ILjava/util/Collection<+Ledu/stanford/nlp/trees/Tree;>;)Z", "indexOf", "LNSObject;", "lastIndexOf", "remove", "set", "()Ljava/util/ListIterator<Ledu/stanford/nlp/trees/Tree;>;", "listIterator", "(I)Ljava/util/ListIterator<Ledu/stanford/nlp/trees/Tree;>;", "subList", "II", "(II)Ljava/util/List<Ledu/stanford/nlp/trees/Tree;>;", "transform", "LEduStanfordNlpTreesTreeTransformer;", "main", "[LNSString;", "Ljava/util/List<Ledu/stanford/nlp/trees/Tree;>;", "Ljava/util/Map<Ljava/lang/String;Ledu/stanford/nlp/util/CollectionValuedMap<Ljava/lang/Integer;Ljava/lang/String;>;>;", "Ledu/stanford/nlp/trees/Treebank;Ledu/stanford/nlp/util/FileProcessor;Ljava/util/List<Ledu/stanford/nlp/trees/Tree;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpTreesMemoryTreebank = { "MemoryTreebank", "edu.stanford.nlp.trees", ptrTable, methods, fields, 7, 0x11, 31, 3, -1, -1, -1, 44, -1 };
  return &_EduStanfordNlpTreesMemoryTreebank;
}

@end

void EduStanfordNlpTreesMemoryTreebank_init(EduStanfordNlpTreesMemoryTreebank *self) {
  EduStanfordNlpTreesMemoryTreebank_initWithEduStanfordNlpTreesTreeReaderFactory_(self, new_EduStanfordNlpTreesLabeledScoredTreeReaderFactory_initWithEduStanfordNlpTreesTreeNormalizer_(new_EduStanfordNlpTreesTreeNormalizer_init()));
}

EduStanfordNlpTreesMemoryTreebank *new_EduStanfordNlpTreesMemoryTreebank_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesMemoryTreebank, init)
}

EduStanfordNlpTreesMemoryTreebank *create_EduStanfordNlpTreesMemoryTreebank_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesMemoryTreebank, init)
}

void EduStanfordNlpTreesMemoryTreebank_initWithEduStanfordNlpTreesTreeNormalizer_(EduStanfordNlpTreesMemoryTreebank *self, EduStanfordNlpTreesTreeNormalizer *tm) {
  EduStanfordNlpTreesMemoryTreebank_initWithEduStanfordNlpTreesTreeReaderFactory_(self, new_EduStanfordNlpTreesLabeledScoredTreeReaderFactory_initWithEduStanfordNlpTreesTreeNormalizer_(tm));
}

EduStanfordNlpTreesMemoryTreebank *new_EduStanfordNlpTreesMemoryTreebank_initWithEduStanfordNlpTreesTreeNormalizer_(EduStanfordNlpTreesTreeNormalizer *tm) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesMemoryTreebank, initWithEduStanfordNlpTreesTreeNormalizer_, tm)
}

EduStanfordNlpTreesMemoryTreebank *create_EduStanfordNlpTreesMemoryTreebank_initWithEduStanfordNlpTreesTreeNormalizer_(EduStanfordNlpTreesTreeNormalizer *tm) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesMemoryTreebank, initWithEduStanfordNlpTreesTreeNormalizer_, tm)
}

void EduStanfordNlpTreesMemoryTreebank_initWithNSString_(EduStanfordNlpTreesMemoryTreebank *self, NSString *encoding) {
  EduStanfordNlpTreesMemoryTreebank_initWithEduStanfordNlpTreesTreeReaderFactory_withNSString_(self, new_EduStanfordNlpTreesLabeledScoredTreeReaderFactory_init(), encoding);
}

EduStanfordNlpTreesMemoryTreebank *new_EduStanfordNlpTreesMemoryTreebank_initWithNSString_(NSString *encoding) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesMemoryTreebank, initWithNSString_, encoding)
}

EduStanfordNlpTreesMemoryTreebank *create_EduStanfordNlpTreesMemoryTreebank_initWithNSString_(NSString *encoding) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesMemoryTreebank, initWithNSString_, encoding)
}

void EduStanfordNlpTreesMemoryTreebank_initWithEduStanfordNlpTreesTreeReaderFactory_(EduStanfordNlpTreesMemoryTreebank *self, id<EduStanfordNlpTreesTreeReaderFactory> trf) {
  EduStanfordNlpTreesTreebank_initWithEduStanfordNlpTreesTreeReaderFactory_(self, trf);
  self->srlMap_ = nil;
  self->parseTrees_ = new_JavaUtilArrayList_init();
}

EduStanfordNlpTreesMemoryTreebank *new_EduStanfordNlpTreesMemoryTreebank_initWithEduStanfordNlpTreesTreeReaderFactory_(id<EduStanfordNlpTreesTreeReaderFactory> trf) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesMemoryTreebank, initWithEduStanfordNlpTreesTreeReaderFactory_, trf)
}

EduStanfordNlpTreesMemoryTreebank *create_EduStanfordNlpTreesMemoryTreebank_initWithEduStanfordNlpTreesTreeReaderFactory_(id<EduStanfordNlpTreesTreeReaderFactory> trf) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesMemoryTreebank, initWithEduStanfordNlpTreesTreeReaderFactory_, trf)
}

void EduStanfordNlpTreesMemoryTreebank_initWithEduStanfordNlpTreesTreeReaderFactory_withNSString_(EduStanfordNlpTreesMemoryTreebank *self, id<EduStanfordNlpTreesTreeReaderFactory> trf, NSString *encoding) {
  EduStanfordNlpTreesTreebank_initWithEduStanfordNlpTreesTreeReaderFactory_withNSString_(self, trf, encoding);
  self->srlMap_ = nil;
  self->parseTrees_ = new_JavaUtilArrayList_init();
}

EduStanfordNlpTreesMemoryTreebank *new_EduStanfordNlpTreesMemoryTreebank_initWithEduStanfordNlpTreesTreeReaderFactory_withNSString_(id<EduStanfordNlpTreesTreeReaderFactory> trf, NSString *encoding) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesMemoryTreebank, initWithEduStanfordNlpTreesTreeReaderFactory_withNSString_, trf, encoding)
}

EduStanfordNlpTreesMemoryTreebank *create_EduStanfordNlpTreesMemoryTreebank_initWithEduStanfordNlpTreesTreeReaderFactory_withNSString_(id<EduStanfordNlpTreesTreeReaderFactory> trf, NSString *encoding) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesMemoryTreebank, initWithEduStanfordNlpTreesTreeReaderFactory_withNSString_, trf, encoding)
}

void EduStanfordNlpTreesMemoryTreebank_initWithJavaUtilList_withEduStanfordNlpTreesTreeReaderFactory_withNSString_(EduStanfordNlpTreesMemoryTreebank *self, id<JavaUtilList> trees, id<EduStanfordNlpTreesTreeReaderFactory> trf, NSString *encoding) {
  EduStanfordNlpTreesTreebank_initWithEduStanfordNlpTreesTreeReaderFactory_withNSString_(self, trf, encoding);
  self->srlMap_ = nil;
  self->parseTrees_ = trees;
}

EduStanfordNlpTreesMemoryTreebank *new_EduStanfordNlpTreesMemoryTreebank_initWithJavaUtilList_withEduStanfordNlpTreesTreeReaderFactory_withNSString_(id<JavaUtilList> trees, id<EduStanfordNlpTreesTreeReaderFactory> trf, NSString *encoding) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesMemoryTreebank, initWithJavaUtilList_withEduStanfordNlpTreesTreeReaderFactory_withNSString_, trees, trf, encoding)
}

EduStanfordNlpTreesMemoryTreebank *create_EduStanfordNlpTreesMemoryTreebank_initWithJavaUtilList_withEduStanfordNlpTreesTreeReaderFactory_withNSString_(id<JavaUtilList> trees, id<EduStanfordNlpTreesTreeReaderFactory> trf, NSString *encoding) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesMemoryTreebank, initWithJavaUtilList_withEduStanfordNlpTreesTreeReaderFactory_withNSString_, trees, trf, encoding)
}

void EduStanfordNlpTreesMemoryTreebank_initWithInt_(EduStanfordNlpTreesMemoryTreebank *self, jint initialCapacity) {
  EduStanfordNlpTreesMemoryTreebank_initWithInt_withEduStanfordNlpTreesTreeReaderFactory_(self, initialCapacity, new_EduStanfordNlpTreesLabeledScoredTreeReaderFactory_initWithEduStanfordNlpTreesTreeNormalizer_(new_EduStanfordNlpTreesTreeNormalizer_init()));
}

EduStanfordNlpTreesMemoryTreebank *new_EduStanfordNlpTreesMemoryTreebank_initWithInt_(jint initialCapacity) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesMemoryTreebank, initWithInt_, initialCapacity)
}

EduStanfordNlpTreesMemoryTreebank *create_EduStanfordNlpTreesMemoryTreebank_initWithInt_(jint initialCapacity) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesMemoryTreebank, initWithInt_, initialCapacity)
}

void EduStanfordNlpTreesMemoryTreebank_initWithInt_withEduStanfordNlpTreesTreeReaderFactory_(EduStanfordNlpTreesMemoryTreebank *self, jint initialCapacity, id<EduStanfordNlpTreesTreeReaderFactory> trf) {
  EduStanfordNlpTreesTreebank_initWithInt_withEduStanfordNlpTreesTreeReaderFactory_(self, initialCapacity, trf);
  self->srlMap_ = nil;
  self->parseTrees_ = new_JavaUtilArrayList_initWithInt_(initialCapacity);
}

EduStanfordNlpTreesMemoryTreebank *new_EduStanfordNlpTreesMemoryTreebank_initWithInt_withEduStanfordNlpTreesTreeReaderFactory_(jint initialCapacity, id<EduStanfordNlpTreesTreeReaderFactory> trf) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesMemoryTreebank, initWithInt_withEduStanfordNlpTreesTreeReaderFactory_, initialCapacity, trf)
}

EduStanfordNlpTreesMemoryTreebank *create_EduStanfordNlpTreesMemoryTreebank_initWithInt_withEduStanfordNlpTreesTreeReaderFactory_(jint initialCapacity, id<EduStanfordNlpTreesTreeReaderFactory> trf) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesMemoryTreebank, initWithInt_withEduStanfordNlpTreesTreeReaderFactory_, initialCapacity, trf)
}

void EduStanfordNlpTreesMemoryTreebank_readSRLFileWithNSString_(EduStanfordNlpTreesMemoryTreebank *self, NSString *srlFile) {
  self->srlMap_ = EduStanfordNlpUtilGenerics_newHashMap();
  for (NSString * __strong line in nil_chk(EduStanfordNlpObjectbankObjectBank_getLineIteratorWithJavaIoFile_(new_JavaIoFile_initWithNSString_(srlFile)))) {
    IOSObjectArray *bits = [((NSString *) nil_chk(line)) split:@"\\s+" limit:3];
    NSString *filename = IOSObjectArray_Get(nil_chk(bits), 0);
    jint treeNum = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(bits, 1));
    NSString *info = IOSObjectArray_Get(bits, 2);
    EduStanfordNlpUtilCollectionValuedMap *cvm = [((id<JavaUtilMap>) nil_chk(self->srlMap_)) getWithId:filename];
    if (cvm == nil) {
      cvm = new_EduStanfordNlpUtilCollectionValuedMap_init();
      (void) [((id<JavaUtilMap>) nil_chk(self->srlMap_)) putWithId:filename withId:cvm];
    }
    [cvm addWithId:JavaLangInteger_valueOfWithInt_(treeNum) withId:info];
  }
}

void EduStanfordNlpTreesMemoryTreebank_mainWithNSStringArray_(IOSObjectArray *args) {
  EduStanfordNlpTreesMemoryTreebank_initialize();
  EduStanfordNlpUtilTiming_startTime();
  EduStanfordNlpTreesTreebank *treebank = new_EduStanfordNlpTreesMemoryTreebank_initWithEduStanfordNlpTreesTreeReaderFactory_(JreLoadStatic(EduStanfordNlpTreesMemoryTreebank_$Lambda$1, instance));
  [treebank loadPathWithNSString:IOSObjectArray_Get(nil_chk(args), 0)];
  EduStanfordNlpUtilTiming_endTime();
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithId:treebank];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTreesMemoryTreebank)

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpTreesMemoryTreebank_$Lambda$1)

@implementation EduStanfordNlpTreesMemoryTreebank_$Lambda$1

- (id<EduStanfordNlpTreesTreeReader>)newTreeReaderWithJavaIoReader:(JavaIoReader *)inArg {
  return new_EduStanfordNlpTreesPennTreeReader_initWithJavaIoReader_(inArg);
}

+ (void)initialize {
  if (self == [EduStanfordNlpTreesMemoryTreebank_$Lambda$1 class]) {
    EduStanfordNlpTreesMemoryTreebank_$Lambda$1_instance = new_EduStanfordNlpTreesMemoryTreebank_$Lambda$1_init();
    J2OBJC_SET_INITIALIZED(EduStanfordNlpTreesMemoryTreebank_$Lambda$1)
  }
}

@end

void EduStanfordNlpTreesMemoryTreebank_$Lambda$1_init(EduStanfordNlpTreesMemoryTreebank_$Lambda$1 *self) {
  NSObject_init(self);
}

EduStanfordNlpTreesMemoryTreebank_$Lambda$1 *new_EduStanfordNlpTreesMemoryTreebank_$Lambda$1_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesMemoryTreebank_$Lambda$1, init)
}

EduStanfordNlpTreesMemoryTreebank_$Lambda$1 *create_EduStanfordNlpTreesMemoryTreebank_$Lambda$1_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesMemoryTreebank_$Lambda$1, init)
}
