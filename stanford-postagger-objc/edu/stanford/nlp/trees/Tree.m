//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/trees/Tree.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/ling/CoreAnnotations.h"
#include "edu/stanford/nlp/ling/CoreLabel.h"
#include "edu/stanford/nlp/ling/HasIndex.h"
#include "edu/stanford/nlp/ling/HasTag.h"
#include "edu/stanford/nlp/ling/HasWord.h"
#include "edu/stanford/nlp/ling/Label.h"
#include "edu/stanford/nlp/ling/LabelFactory.h"
#include "edu/stanford/nlp/ling/LabeledWord.h"
#include "edu/stanford/nlp/ling/Sentence.h"
#include "edu/stanford/nlp/ling/TaggedWord.h"
#include "edu/stanford/nlp/ling/Word.h"
#include "edu/stanford/nlp/trees/Constituent.h"
#include "edu/stanford/nlp/trees/ConstituentFactory.h"
#include "edu/stanford/nlp/trees/Dependency.h"
#include "edu/stanford/nlp/trees/HeadFinder.h"
#include "edu/stanford/nlp/trees/LabeledScoredTreeReaderFactory.h"
#include "edu/stanford/nlp/trees/NamedDependency.h"
#include "edu/stanford/nlp/trees/SimpleConstituentFactory.h"
#include "edu/stanford/nlp/trees/Tree.h"
#include "edu/stanford/nlp/trees/TreeCoreAnnotations.h"
#include "edu/stanford/nlp/trees/TreeFactory.h"
#include "edu/stanford/nlp/trees/TreeReader.h"
#include "edu/stanford/nlp/trees/TreeReaderFactory.h"
#include "edu/stanford/nlp/trees/TreeTransformer.h"
#include "edu/stanford/nlp/trees/UnnamedConcreteDependency.h"
#include "edu/stanford/nlp/trees/UnnamedDependency.h"
#include "edu/stanford/nlp/util/CoreMap.h"
#include "edu/stanford/nlp/util/Filters.h"
#include "edu/stanford/nlp/util/Generics.h"
#include "edu/stanford/nlp/util/IntPair.h"
#include "edu/stanford/nlp/util/MutableInteger.h"
#include "edu/stanford/nlp/util/Pair.h"
#include "edu/stanford/nlp/util/XMLUtils.h"
#include "java/io/IOException.h"
#include "java/io/OutputStreamWriter.h"
#include "java/io/PrintStream.h"
#include "java/io/PrintWriter.h"
#include "java/io/StringReader.h"
#include "java/io/StringWriter.h"
#include "java/lang/AssertionError.h"
#include "java/lang/Double.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/Integer.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/AbstractCollection.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/NoSuchElementException.h"
#include "java/util/Set.h"
#include "java/util/function/Consumer.h"
#include "java/util/function/Predicate.h"

@interface EduStanfordNlpTreesTree ()

- (jint)constituentsNodesWithInt:(jint)left;

- (jint)constituentsWithJavaUtilSet:(id<JavaUtilSet>)constituentsSet
                            withInt:(jint)left
withEduStanfordNlpTreesConstituentFactory:(id<EduStanfordNlpTreesConstituentFactory>)cf
                        withBoolean:(jboolean)charLevel
      withJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)filter
                            withInt:(jint)maxDepth
                            withInt:(jint)depth;

+ (NSString *)makeIndentStringWithInt:(jint)indent;

- (void)indentedListPrintWithNSString:(NSString *)indent
                         withNSString:(NSString *)pad
                withJavaIoPrintWriter:(JavaIoPrintWriter *)pw
                          withBoolean:(jboolean)printScores;

- (void)indentedXMLPrintWithNSString:(NSString *)indent
                        withNSString:(NSString *)pad
               withJavaIoPrintWriter:(JavaIoPrintWriter *)pw
                         withBoolean:(jboolean)printScores;

+ (void)displayChildrenWithEduStanfordNlpTreesTreeArray:(IOSObjectArray *)trChildren
                                                withInt:(jint)indent
                                            withBoolean:(jboolean)parentLabelNull
                                            withBoolean:(jboolean)onlyLabelValue
                                  withJavaIoPrintWriter:(JavaIoPrintWriter *)pw;

- (void)displayWithInt:(jint)indent
           withBoolean:(jboolean)parentLabelNull
           withBoolean:(jboolean)firstSibling
           withBoolean:(jboolean)leftSiblingPreTerminal
           withBoolean:(jboolean)topLevel
           withBoolean:(jboolean)onlyLabelValue
 withJavaIoPrintWriter:(JavaIoPrintWriter *)pw;

+ (id<EduStanfordNlpLingLabel>)makeDependencyLabelWithEduStanfordNlpLingLabel:(id<EduStanfordNlpLingLabel>)oldLabel
                                                                  withBoolean:(jboolean)copyLabel
                                                                  withBoolean:(jboolean)copyIndex
                                                                  withBoolean:(jboolean)copyPosTag;

- (jint)taggedLabeledYieldWithJavaUtilList:(id<JavaUtilList>)ty
                                   withInt:(jint)termIdx;

- (id<JavaUtilList>)spliceOutHelperWithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)nodeFilter
                              withEduStanfordNlpTreesTreeFactory:(id<EduStanfordNlpTreesTreeFactory>)tf;

+ (EduStanfordNlpTreesTree *)parentHelperWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)parent
                                    withEduStanfordNlpTreesTreeArray:(IOSObjectArray *)kids
                                         withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)node;

+ (void)postOrderRecurseWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
                                   withJavaUtilList:(id<JavaUtilList>)nodes;

+ (void)preOrderRecurseWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
                                  withJavaUtilList:(id<JavaUtilList>)nodes;

- (IOSObjectArray *)dominationPathHelperWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
                                                            withInt:(jint)depth;

- (IOSObjectArray *)dominationPathWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
                                                      withInt:(jint)depth;

- (jboolean)leftCharEdgeWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)node
               withEduStanfordNlpUtilMutableInteger:(EduStanfordNlpUtilMutableInteger *)i;

- (jboolean)rightCharEdgeWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)node
                withEduStanfordNlpUtilMutableInteger:(EduStanfordNlpUtilMutableInteger *)i;

- (jboolean)nodeNumberHelperWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
                   withEduStanfordNlpUtilMutableInteger:(EduStanfordNlpUtilMutableInteger *)i;

- (EduStanfordNlpTreesTree *)getNodeNumberHelperWithEduStanfordNlpUtilMutableInteger:(EduStanfordNlpUtilMutableInteger *)i
                                                                             withInt:(jint)target;

@end

inline jlong EduStanfordNlpTreesTree_get_serialVersionUID();
#define EduStanfordNlpTreesTree_serialVersionUID 5441849457648722744LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpTreesTree, serialVersionUID, jlong)

inline jint EduStanfordNlpTreesTree_get_initialPrintStringBuilderSize();
#define EduStanfordNlpTreesTree_initialPrintStringBuilderSize 500
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpTreesTree, initialPrintStringBuilderSize, jint)

inline jint EduStanfordNlpTreesTree_get_indentIncr();
#define EduStanfordNlpTreesTree_indentIncr 2
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpTreesTree, indentIncr, jint)

__attribute__((unused)) static jint EduStanfordNlpTreesTree_constituentsNodesWithInt_(EduStanfordNlpTreesTree *self, jint left);

__attribute__((unused)) static jint EduStanfordNlpTreesTree_constituentsWithJavaUtilSet_withInt_withEduStanfordNlpTreesConstituentFactory_withBoolean_withJavaUtilFunctionPredicate_withInt_withInt_(EduStanfordNlpTreesTree *self, id<JavaUtilSet> constituentsSet, jint left, id<EduStanfordNlpTreesConstituentFactory> cf, jboolean charLevel, id<JavaUtilFunctionPredicate> filter, jint maxDepth, jint depth);

__attribute__((unused)) static NSString *EduStanfordNlpTreesTree_makeIndentStringWithInt_(jint indent);

__attribute__((unused)) static void EduStanfordNlpTreesTree_indentedListPrintWithNSString_withNSString_withJavaIoPrintWriter_withBoolean_(EduStanfordNlpTreesTree *self, NSString *indent, NSString *pad, JavaIoPrintWriter *pw, jboolean printScores);

__attribute__((unused)) static void EduStanfordNlpTreesTree_indentedXMLPrintWithNSString_withNSString_withJavaIoPrintWriter_withBoolean_(EduStanfordNlpTreesTree *self, NSString *indent, NSString *pad, JavaIoPrintWriter *pw, jboolean printScores);

__attribute__((unused)) static void EduStanfordNlpTreesTree_displayChildrenWithEduStanfordNlpTreesTreeArray_withInt_withBoolean_withBoolean_withJavaIoPrintWriter_(IOSObjectArray *trChildren, jint indent, jboolean parentLabelNull, jboolean onlyLabelValue, JavaIoPrintWriter *pw);

__attribute__((unused)) static void EduStanfordNlpTreesTree_displayWithInt_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withJavaIoPrintWriter_(EduStanfordNlpTreesTree *self, jint indent, jboolean parentLabelNull, jboolean firstSibling, jboolean leftSiblingPreTerminal, jboolean topLevel, jboolean onlyLabelValue, JavaIoPrintWriter *pw);

__attribute__((unused)) static id<EduStanfordNlpLingLabel> EduStanfordNlpTreesTree_makeDependencyLabelWithEduStanfordNlpLingLabel_withBoolean_withBoolean_withBoolean_(id<EduStanfordNlpLingLabel> oldLabel, jboolean copyLabel, jboolean copyIndex, jboolean copyPosTag);

__attribute__((unused)) static jint EduStanfordNlpTreesTree_taggedLabeledYieldWithJavaUtilList_withInt_(EduStanfordNlpTreesTree *self, id<JavaUtilList> ty, jint termIdx);

__attribute__((unused)) static id<JavaUtilList> EduStanfordNlpTreesTree_spliceOutHelperWithJavaUtilFunctionPredicate_withEduStanfordNlpTreesTreeFactory_(EduStanfordNlpTreesTree *self, id<JavaUtilFunctionPredicate> nodeFilter, id<EduStanfordNlpTreesTreeFactory> tf);

__attribute__((unused)) static EduStanfordNlpTreesTree *EduStanfordNlpTreesTree_parentHelperWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTreeArray_withEduStanfordNlpTreesTree_(EduStanfordNlpTreesTree *parent, IOSObjectArray *kids, EduStanfordNlpTreesTree *node);

__attribute__((unused)) static void EduStanfordNlpTreesTree_postOrderRecurseWithEduStanfordNlpTreesTree_withJavaUtilList_(EduStanfordNlpTreesTree *t, id<JavaUtilList> nodes);

__attribute__((unused)) static void EduStanfordNlpTreesTree_preOrderRecurseWithEduStanfordNlpTreesTree_withJavaUtilList_(EduStanfordNlpTreesTree *t, id<JavaUtilList> nodes);

__attribute__((unused)) static IOSObjectArray *EduStanfordNlpTreesTree_dominationPathHelperWithEduStanfordNlpTreesTree_withInt_(EduStanfordNlpTreesTree *self, EduStanfordNlpTreesTree *t, jint depth);

__attribute__((unused)) static IOSObjectArray *EduStanfordNlpTreesTree_dominationPathWithEduStanfordNlpTreesTree_withInt_(EduStanfordNlpTreesTree *self, EduStanfordNlpTreesTree *t, jint depth);

__attribute__((unused)) static jboolean EduStanfordNlpTreesTree_leftCharEdgeWithEduStanfordNlpTreesTree_withEduStanfordNlpUtilMutableInteger_(EduStanfordNlpTreesTree *self, EduStanfordNlpTreesTree *node, EduStanfordNlpUtilMutableInteger *i);

__attribute__((unused)) static jboolean EduStanfordNlpTreesTree_rightCharEdgeWithEduStanfordNlpTreesTree_withEduStanfordNlpUtilMutableInteger_(EduStanfordNlpTreesTree *self, EduStanfordNlpTreesTree *node, EduStanfordNlpUtilMutableInteger *i);

__attribute__((unused)) static jboolean EduStanfordNlpTreesTree_nodeNumberHelperWithEduStanfordNlpTreesTree_withEduStanfordNlpUtilMutableInteger_(EduStanfordNlpTreesTree *self, EduStanfordNlpTreesTree *t, EduStanfordNlpUtilMutableInteger *i);

__attribute__((unused)) static EduStanfordNlpTreesTree *EduStanfordNlpTreesTree_getNodeNumberHelperWithEduStanfordNlpUtilMutableInteger_withInt_(EduStanfordNlpTreesTree *self, EduStanfordNlpUtilMutableInteger *i, jint target);

@interface EduStanfordNlpTreesTree_TreeIterator : NSObject < JavaUtilIterator > {
 @public
  id<JavaUtilList> treeStack_;
}

- (instancetype)initWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t;

- (jboolean)hasNext;

- (EduStanfordNlpTreesTree *)next;

- (void)remove;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpTreesTree_TreeIterator)

J2OBJC_FIELD_SETTER(EduStanfordNlpTreesTree_TreeIterator, treeStack_, id<JavaUtilList>)

__attribute__((unused)) static void EduStanfordNlpTreesTree_TreeIterator_initWithEduStanfordNlpTreesTree_(EduStanfordNlpTreesTree_TreeIterator *self, EduStanfordNlpTreesTree *t);

__attribute__((unused)) static EduStanfordNlpTreesTree_TreeIterator *new_EduStanfordNlpTreesTree_TreeIterator_initWithEduStanfordNlpTreesTree_(EduStanfordNlpTreesTree *t) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpTreesTree_TreeIterator *create_EduStanfordNlpTreesTree_TreeIterator_initWithEduStanfordNlpTreesTree_(EduStanfordNlpTreesTree *t);

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpTreesTree_TreeIterator)

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpTreesTree)

IOSObjectArray *EduStanfordNlpTreesTree_EMPTY_TREE_ARRAY;

@implementation EduStanfordNlpTreesTree

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpTreesTree_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)isLeaf {
  return [self numChildren] == 0;
}

- (jint)numChildren {
  return ((IOSObjectArray *) nil_chk([self children]))->size_;
}

- (jboolean)isUnaryRewrite {
  return [self numChildren] == 1;
}

- (jboolean)isPreTerminal {
  IOSObjectArray *kids = [self children];
  return (((IOSObjectArray *) nil_chk(kids))->size_ == 1) && ([((EduStanfordNlpTreesTree *) nil_chk(IOSObjectArray_Get(kids, 0))) isLeaf]);
}

- (jboolean)isPrePreTerminal {
  IOSObjectArray *kids = [self children];
  if (((IOSObjectArray *) nil_chk(kids))->size_ == 0) {
    return false;
  }
  {
    IOSObjectArray *a__ = kids;
    EduStanfordNlpTreesTree * const *b__ = a__->buffer_;
    EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      EduStanfordNlpTreesTree *kid = *b__++;
      if (![((EduStanfordNlpTreesTree *) nil_chk(kid)) isPreTerminal]) {
        return false;
      }
    }
  }
  return true;
}

- (jboolean)isPhrasal {
  IOSObjectArray *kids = [self children];
  return !(kids == nil || kids->size_ == 0 || (kids->size_ == 1 && [((EduStanfordNlpTreesTree *) nil_chk(IOSObjectArray_Get(kids, 0))) isLeaf]));
}

- (jboolean)isEqual:(id)o {
  if (o == self) {
    return true;
  }
  if (!([o isKindOfClass:[EduStanfordNlpTreesTree class]])) {
    return false;
  }
  EduStanfordNlpTreesTree *t = (EduStanfordNlpTreesTree *) cast_chk(o, [EduStanfordNlpTreesTree class]);
  NSString *value1 = [self value];
  NSString *value2 = [((EduStanfordNlpTreesTree *) nil_chk(t)) value];
  if (value1 != nil || value2 != nil) {
    if (value1 == nil || value2 == nil || ![value1 isEqual:value2]) {
      return false;
    }
  }
  IOSObjectArray *myKids = [self children];
  IOSObjectArray *theirKids = [t children];
  if (((IOSObjectArray *) nil_chk(myKids))->size_ != ((IOSObjectArray *) nil_chk(theirKids))->size_) {
    return false;
  }
  for (jint i = 0; i < myKids->size_; i++) {
    if (![((EduStanfordNlpTreesTree *) nil_chk(IOSObjectArray_Get(myKids, i))) isEqual:IOSObjectArray_Get(theirKids, i)]) {
      return false;
    }
  }
  return true;
}

- (NSUInteger)hash {
  NSString *v = [self value];
  jint hc = (v == nil) ? 1 : ((jint) [((NSString *) nil_chk(v)) hash]);
  IOSObjectArray *kids = [self children];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(kids))->size_; i++) {
    v = [((EduStanfordNlpTreesTree *) nil_chk(IOSObjectArray_Get(kids, i))) value];
    jint hc2 = (v == nil) ? i : ((jint) [((NSString *) nil_chk(v)) hash]);
    hc ^= (JreLShift32(hc2, i));
  }
  return hc;
}

- (jint)objectIndexOfWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)tree {
  IOSObjectArray *kids = [self children];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(kids))->size_; i++) {
    if (IOSObjectArray_Get(kids, i) == tree) {
      return i;
    }
  }
  return -1;
}

- (IOSObjectArray *)children {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<JavaUtilList>)getChildrenAsList {
  return new_JavaUtilArrayList_initWithJavaUtilCollection_(JavaUtilArrays_asListWithNSObjectArray_([self children]));
}

- (void)setChildrenWithEduStanfordNlpTreesTreeArray:(IOSObjectArray *)children {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)setChildrenWithJavaUtilList:(id<JavaUtilList>)childTreesList {
  if (childTreesList == nil || [childTreesList isEmpty]) {
    [self setChildrenWithEduStanfordNlpTreesTreeArray:EduStanfordNlpTreesTree_EMPTY_TREE_ARRAY];
  }
  else {
    IOSObjectArray *childTrees = [IOSObjectArray newArrayWithLength:[childTreesList size] type:EduStanfordNlpTreesTree_class_()];
    (void) [childTreesList toArrayWithNSObjectArray:childTrees];
    [self setChildrenWithEduStanfordNlpTreesTreeArray:childTrees];
  }
}

- (id<EduStanfordNlpLingLabel>)label {
  return nil;
}

- (void)setLabelWithEduStanfordNlpLingLabel:(id<EduStanfordNlpLingLabel>)label {
}

- (jdouble)score {
  return JavaLangDouble_NaN;
}

- (void)setScoreWithDouble:(jdouble)score {
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"You must use a tree type that implements scoring in order call setScore()");
}

- (EduStanfordNlpTreesTree *)firstChild {
  IOSObjectArray *kids = [self children];
  if (((IOSObjectArray *) nil_chk(kids))->size_ == 0) {
    return nil;
  }
  return IOSObjectArray_Get(kids, 0);
}

- (EduStanfordNlpTreesTree *)lastChild {
  IOSObjectArray *kids = [self children];
  if (((IOSObjectArray *) nil_chk(kids))->size_ == 0) {
    return nil;
  }
  return IOSObjectArray_Get(kids, kids->size_ - 1);
}

- (EduStanfordNlpTreesTree *)upperMostUnaryWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)root {
  EduStanfordNlpTreesTree *parent = [self parentWithEduStanfordNlpTreesTree:root];
  if (parent == nil) {
    return self;
  }
  if ([parent numChildren] > 1) {
    return self;
  }
  return [parent upperMostUnaryWithEduStanfordNlpTreesTree:root];
}

- (void)setSpans {
  EduStanfordNlpTreesTree_constituentsNodesWithInt_(self, 0);
}

- (EduStanfordNlpUtilIntPair *)getSpan {
  if ([EduStanfordNlpUtilCoreMap_class_() isInstance:[self label]] && [((id<EduStanfordNlpUtilCoreMap>) nil_chk(((id<EduStanfordNlpUtilCoreMap>) cast_check([self label], EduStanfordNlpUtilCoreMap_class_())))) hasWithIOSClass:EduStanfordNlpLingCoreAnnotations_SpanAnnotation_class_()]) return [((id<EduStanfordNlpUtilCoreMap>) nil_chk(((id<EduStanfordNlpUtilCoreMap>) cast_check([self label], EduStanfordNlpUtilCoreMap_class_())))) getWithIOSClass:EduStanfordNlpLingCoreAnnotations_SpanAnnotation_class_()];
  return nil;
}

- (id<JavaUtilSet>)constituents {
  return [self constituentsWithEduStanfordNlpTreesConstituentFactory:new_EduStanfordNlpTreesSimpleConstituentFactory_init()];
}

- (id<JavaUtilSet>)constituentsWithEduStanfordNlpTreesConstituentFactory:(id<EduStanfordNlpTreesConstituentFactory>)cf {
  return [self constituentsWithEduStanfordNlpTreesConstituentFactory:cf withBoolean:false];
}

- (id<JavaUtilSet>)constituentsWithEduStanfordNlpTreesConstituentFactory:(id<EduStanfordNlpTreesConstituentFactory>)cf
                                                                 withInt:(jint)maxDepth {
  id<JavaUtilSet> constituentsSet = EduStanfordNlpUtilGenerics_newHashSet();
  EduStanfordNlpTreesTree_constituentsWithJavaUtilSet_withInt_withEduStanfordNlpTreesConstituentFactory_withBoolean_withJavaUtilFunctionPredicate_withInt_withInt_(self, constituentsSet, 0, cf, false, nil, maxDepth, 0);
  return constituentsSet;
}

- (id<JavaUtilSet>)constituentsWithEduStanfordNlpTreesConstituentFactory:(id<EduStanfordNlpTreesConstituentFactory>)cf
                                                             withBoolean:(jboolean)charLevel {
  id<JavaUtilSet> constituentsSet = EduStanfordNlpUtilGenerics_newHashSet();
  EduStanfordNlpTreesTree_constituentsWithJavaUtilSet_withInt_withEduStanfordNlpTreesConstituentFactory_withBoolean_withJavaUtilFunctionPredicate_withInt_withInt_(self, constituentsSet, 0, cf, charLevel, nil, -1, 0);
  return constituentsSet;
}

- (id<JavaUtilSet>)constituentsWithEduStanfordNlpTreesConstituentFactory:(id<EduStanfordNlpTreesConstituentFactory>)cf
                                                             withBoolean:(jboolean)charLevel
                                           withJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)filter {
  id<JavaUtilSet> constituentsSet = EduStanfordNlpUtilGenerics_newHashSet();
  EduStanfordNlpTreesTree_constituentsWithJavaUtilSet_withInt_withEduStanfordNlpTreesConstituentFactory_withBoolean_withJavaUtilFunctionPredicate_withInt_withInt_(self, constituentsSet, 0, cf, charLevel, filter, -1, 0);
  return constituentsSet;
}

- (jint)constituentsNodesWithInt:(jint)left {
  return EduStanfordNlpTreesTree_constituentsNodesWithInt_(self, left);
}

- (jint)constituentsWithJavaUtilSet:(id<JavaUtilSet>)constituentsSet
                            withInt:(jint)left
withEduStanfordNlpTreesConstituentFactory:(id<EduStanfordNlpTreesConstituentFactory>)cf
                        withBoolean:(jboolean)charLevel
      withJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)filter
                            withInt:(jint)maxDepth
                            withInt:(jint)depth {
  return EduStanfordNlpTreesTree_constituentsWithJavaUtilSet_withInt_withEduStanfordNlpTreesConstituentFactory_withBoolean_withJavaUtilFunctionPredicate_withInt_withInt_(self, constituentsSet, left, cf, charLevel, filter, maxDepth, depth);
}

- (EduStanfordNlpTreesTree *)localTree {
  IOSObjectArray *kids = [self children];
  IOSObjectArray *newKids = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(kids))->size_ type:EduStanfordNlpTreesTree_class_()];
  id<EduStanfordNlpTreesTreeFactory> tf = [self treeFactory];
  for (jint i = 0, n = kids->size_; i < n; i++) {
    (void) IOSObjectArray_Set(newKids, i, [((id<EduStanfordNlpTreesTreeFactory>) nil_chk(tf)) newTreeNodeWithEduStanfordNlpLingLabel:[((EduStanfordNlpTreesTree *) nil_chk(IOSObjectArray_Get(kids, i))) label] withJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_(EduStanfordNlpTreesTree_EMPTY_TREE_ARRAY)]);
  }
  return [((id<EduStanfordNlpTreesTreeFactory>) nil_chk(tf)) newTreeNodeWithEduStanfordNlpLingLabel:[self label] withJavaUtilList:JavaUtilArrays_asListWithNSObjectArray_(newKids)];
}

- (id<JavaUtilSet>)localTrees {
  id<JavaUtilSet> set = EduStanfordNlpUtilGenerics_newHashSet();
  for (EduStanfordNlpTreesTree * __strong st in self) {
    if ([((EduStanfordNlpTreesTree *) nil_chk(st)) isPhrasal]) {
      [((id<JavaUtilSet>) nil_chk(set)) addWithId:[st localTree]];
    }
  }
  return set;
}

- (JavaLangStringBuilder *)toStringBuilderWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  return [self toStringBuilderWithJavaLangStringBuilder:sb withBoolean:true];
}

- (JavaLangStringBuilder *)toStringBuilderWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                                                        withBoolean:(jboolean)printOnlyLabelValue {
  if ([self isLeaf]) {
    if ([self label] != nil) {
      if (printOnlyLabelValue) {
        (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:[((id<EduStanfordNlpLingLabel>) nil_chk([self label])) value]];
      }
      else {
        (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithId:[self label]];
      }
    }
    return sb;
  }
  else {
    (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithChar:'('];
    if ([self label] != nil) {
      if (printOnlyLabelValue) {
        if ([self value] != nil) {
          (void) [sb appendWithNSString:[((id<EduStanfordNlpLingLabel>) nil_chk([self label])) value]];
        }
      }
      else {
        (void) [sb appendWithId:[self label]];
      }
    }
    IOSObjectArray *kids = [self children];
    if (kids != nil) {
      {
        IOSObjectArray *a__ = kids;
        EduStanfordNlpTreesTree * const *b__ = a__->buffer_;
        EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          EduStanfordNlpTreesTree *kid = *b__++;
          (void) [sb appendWithChar:' '];
          (void) [((EduStanfordNlpTreesTree *) nil_chk(kid)) toStringBuilderWithJavaLangStringBuilder:sb withBoolean:printOnlyLabelValue];
        }
      }
    }
    return [sb appendWithChar:')'];
  }
}

- (NSString *)description {
  return [((JavaLangStringBuilder *) nil_chk([self toStringBuilderWithJavaLangStringBuilder:new_JavaLangStringBuilder_initWithInt_(EduStanfordNlpTreesTree_initialPrintStringBuilderSize)])) description];
}

+ (NSString *)makeIndentStringWithInt:(jint)indent {
  return EduStanfordNlpTreesTree_makeIndentStringWithInt_(indent);
}

- (void)printLocalTree {
  [self printLocalTreeWithJavaIoPrintWriter:new_JavaIoPrintWriter_initWithJavaIoOutputStream_withBoolean_(JreLoadStatic(JavaLangSystem, out), true)];
}

- (void)printLocalTreeWithJavaIoPrintWriter:(JavaIoPrintWriter *)pw {
  [((JavaIoPrintWriter *) nil_chk(pw)) printWithNSString:JreStrcat("C@C", '(', [self label], ' ')];
  {
    IOSObjectArray *a__ = [self children];
    EduStanfordNlpTreesTree * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      EduStanfordNlpTreesTree *kid = *b__++;
      [pw printWithNSString:@"("];
      [pw printWithId:[((EduStanfordNlpTreesTree *) nil_chk(kid)) label]];
      [pw printWithNSString:@") "];
    }
  }
  [pw printlnWithNSString:@")"];
}

- (void)indentedListPrint {
  [self indentedListPrintWithJavaIoPrintWriter:new_JavaIoPrintWriter_initWithJavaIoOutputStream_withBoolean_(JreLoadStatic(JavaLangSystem, out), true) withBoolean:false];
}

- (void)indentedListPrintWithJavaIoPrintWriter:(JavaIoPrintWriter *)pw
                                   withBoolean:(jboolean)printScores {
  EduStanfordNlpTreesTree_indentedListPrintWithNSString_withNSString_withJavaIoPrintWriter_withBoolean_(self, @"", EduStanfordNlpTreesTree_makeIndentStringWithInt_(EduStanfordNlpTreesTree_indentIncr), pw, printScores);
}

- (void)indentedListPrintWithNSString:(NSString *)indent
                         withNSString:(NSString *)pad
                withJavaIoPrintWriter:(JavaIoPrintWriter *)pw
                          withBoolean:(jboolean)printScores {
  EduStanfordNlpTreesTree_indentedListPrintWithNSString_withNSString_withJavaIoPrintWriter_withBoolean_(self, indent, pad, pw, printScores);
}

- (void)indentedXMLPrint {
  [self indentedXMLPrintWithJavaIoPrintWriter:new_JavaIoPrintWriter_initWithJavaIoOutputStream_withBoolean_(JreLoadStatic(JavaLangSystem, out), true) withBoolean:false];
}

- (void)indentedXMLPrintWithJavaIoPrintWriter:(JavaIoPrintWriter *)pw
                                  withBoolean:(jboolean)printScores {
  EduStanfordNlpTreesTree_indentedXMLPrintWithNSString_withNSString_withJavaIoPrintWriter_withBoolean_(self, @"", EduStanfordNlpTreesTree_makeIndentStringWithInt_(EduStanfordNlpTreesTree_indentIncr), pw, printScores);
}

- (void)indentedXMLPrintWithNSString:(NSString *)indent
                        withNSString:(NSString *)pad
               withJavaIoPrintWriter:(JavaIoPrintWriter *)pw
                         withBoolean:(jboolean)printScores {
  EduStanfordNlpTreesTree_indentedXMLPrintWithNSString_withNSString_withJavaIoPrintWriter_withBoolean_(self, indent, pad, pw, printScores);
}

+ (void)displayChildrenWithEduStanfordNlpTreesTreeArray:(IOSObjectArray *)trChildren
                                                withInt:(jint)indent
                                            withBoolean:(jboolean)parentLabelNull
                                            withBoolean:(jboolean)onlyLabelValue
                                  withJavaIoPrintWriter:(JavaIoPrintWriter *)pw {
  EduStanfordNlpTreesTree_displayChildrenWithEduStanfordNlpTreesTreeArray_withInt_withBoolean_withBoolean_withJavaIoPrintWriter_(trChildren, indent, parentLabelNull, onlyLabelValue, pw);
}

- (NSString *)nodeString {
  return ([self value] == nil) ? @"" : [self value];
}

- (void)displayWithInt:(jint)indent
           withBoolean:(jboolean)parentLabelNull
           withBoolean:(jboolean)firstSibling
           withBoolean:(jboolean)leftSiblingPreTerminal
           withBoolean:(jboolean)topLevel
           withBoolean:(jboolean)onlyLabelValue
 withJavaIoPrintWriter:(JavaIoPrintWriter *)pw {
  EduStanfordNlpTreesTree_displayWithInt_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withJavaIoPrintWriter_(self, indent, parentLabelNull, firstSibling, leftSiblingPreTerminal, topLevel, onlyLabelValue, pw);
}

- (void)pennPrintWithJavaIoPrintWriter:(JavaIoPrintWriter *)pw {
  [self pennPrintWithJavaIoPrintWriter:pw withBoolean:true];
}

- (void)pennPrintWithJavaIoPrintWriter:(JavaIoPrintWriter *)pw
                           withBoolean:(jboolean)printOnlyLabelValue {
  EduStanfordNlpTreesTree_displayWithInt_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withJavaIoPrintWriter_(self, 0, false, false, false, true, printOnlyLabelValue, pw);
  [((JavaIoPrintWriter *) nil_chk(pw)) println];
  [pw flush];
}

- (void)pennPrintWithJavaIoPrintStream:(JavaIoPrintStream *)ps {
  [self pennPrintWithJavaIoPrintWriter:new_JavaIoPrintWriter_initWithJavaIoWriter_withBoolean_(new_JavaIoOutputStreamWriter_initWithJavaIoOutputStream_(ps), true)];
}

- (void)pennPrintWithJavaIoPrintStream:(JavaIoPrintStream *)ps
                           withBoolean:(jboolean)printOnlyLabelValue {
  [self pennPrintWithJavaIoPrintWriter:new_JavaIoPrintWriter_initWithJavaIoWriter_withBoolean_(new_JavaIoOutputStreamWriter_initWithJavaIoOutputStream_(ps), true) withBoolean:printOnlyLabelValue];
}

- (NSString *)pennString {
  JavaIoStringWriter *sw = new_JavaIoStringWriter_init();
  [self pennPrintWithJavaIoPrintWriter:new_JavaIoPrintWriter_initWithJavaIoWriter_(sw)];
  return [sw description];
}

- (void)pennPrint {
  [self pennPrintWithJavaIoPrintStream:JreLoadStatic(JavaLangSystem, out)];
}

- (jint)depth {
  if ([self isLeaf]) {
    return 0;
  }
  jint maxDepth = 0;
  IOSObjectArray *kids = [self children];
  {
    IOSObjectArray *a__ = kids;
    EduStanfordNlpTreesTree * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      EduStanfordNlpTreesTree *kid = *b__++;
      jint curDepth = [((EduStanfordNlpTreesTree *) nil_chk(kid)) depth];
      if (curDepth > maxDepth) {
        maxDepth = curDepth;
      }
    }
  }
  return maxDepth + 1;
}

- (jint)depthWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)node {
  EduStanfordNlpTreesTree *p = [((EduStanfordNlpTreesTree *) nil_chk(node)) parentWithEduStanfordNlpTreesTree:self];
  if (self == node) {
    return 0;
  }
  if (p == nil) {
    return -1;
  }
  jint depth = 1;
  while (self != p) {
    p = [((EduStanfordNlpTreesTree *) nil_chk(p)) parentWithEduStanfordNlpTreesTree:self];
    depth++;
  }
  return depth;
}

- (EduStanfordNlpTreesTree *)headTerminalWithEduStanfordNlpTreesHeadFinder:(id<EduStanfordNlpTreesHeadFinder>)hf
                                               withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)parent {
  if ([self isLeaf]) {
    return self;
  }
  EduStanfordNlpTreesTree *head = [((id<EduStanfordNlpTreesHeadFinder>) nil_chk(hf)) determineHeadWithEduStanfordNlpTreesTree:self withEduStanfordNlpTreesTree:parent];
  if (head != nil) {
    return [head headTerminalWithEduStanfordNlpTreesHeadFinder:hf withEduStanfordNlpTreesTree:parent];
  }
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$@", @"Head is null: ", self)];
  return nil;
}

- (EduStanfordNlpTreesTree *)headTerminalWithEduStanfordNlpTreesHeadFinder:(id<EduStanfordNlpTreesHeadFinder>)hf {
  return [self headTerminalWithEduStanfordNlpTreesHeadFinder:hf withEduStanfordNlpTreesTree:nil];
}

- (EduStanfordNlpTreesTree *)headPreTerminalWithEduStanfordNlpTreesHeadFinder:(id<EduStanfordNlpTreesHeadFinder>)hf {
  if ([self isPreTerminal]) {
    return self;
  }
  else if ([self isLeaf]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"Called headPreTerminal on a leaf: ", self));
  }
  else {
    EduStanfordNlpTreesTree *head = [((id<EduStanfordNlpTreesHeadFinder>) nil_chk(hf)) determineHeadWithEduStanfordNlpTreesTree:self];
    if (head != nil) {
      return [head headPreTerminalWithEduStanfordNlpTreesHeadFinder:hf];
    }
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$@", @"Head preterminal is null: ", self)];
    return nil;
  }
}

- (void)percolateHeadAnnotationsWithEduStanfordNlpTreesHeadFinder:(id<EduStanfordNlpTreesHeadFinder>)hf {
  if (!([[self label] isKindOfClass:[EduStanfordNlpLingCoreLabel class]])) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Expected CoreLabels in the trees");
  }
  EduStanfordNlpLingCoreLabel *nodeLabel = (EduStanfordNlpLingCoreLabel *) cast_chk([self label], [EduStanfordNlpLingCoreLabel class]);
  if ([self isLeaf]) {
    return;
  }
  if ([self isPreTerminal]) {
    (void) [((EduStanfordNlpLingCoreLabel *) nil_chk(nodeLabel)) setWithIOSClass:EduStanfordNlpTreesTreeCoreAnnotations_HeadWordLabelAnnotation_class_() withId:(EduStanfordNlpLingCoreLabel *) cast_chk([((EduStanfordNlpTreesTree *) nil_chk(IOSObjectArray_Get(nil_chk([self children]), 0))) label], [EduStanfordNlpLingCoreLabel class])];
    (void) [nodeLabel setWithIOSClass:EduStanfordNlpTreesTreeCoreAnnotations_HeadTagLabelAnnotation_class_() withId:nodeLabel];
    return;
  }
  {
    IOSObjectArray *a__ = [self children];
    EduStanfordNlpTreesTree * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      EduStanfordNlpTreesTree *kid = *b__++;
      [((EduStanfordNlpTreesTree *) nil_chk(kid)) percolateHeadAnnotationsWithEduStanfordNlpTreesHeadFinder:hf];
    }
  }
  EduStanfordNlpTreesTree *head = [((id<EduStanfordNlpTreesHeadFinder>) nil_chk(hf)) determineHeadWithEduStanfordNlpTreesTree:self];
  if (head == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(JreStrcat("$@$@", @"HeadFinder ", hf, @" returned null for ", self));
  }
  else if ([head isLeaf]) {
    (void) [((EduStanfordNlpLingCoreLabel *) nil_chk(nodeLabel)) setWithIOSClass:EduStanfordNlpTreesTreeCoreAnnotations_HeadWordLabelAnnotation_class_() withId:(EduStanfordNlpLingCoreLabel *) cast_chk([head label], [EduStanfordNlpLingCoreLabel class])];
    (void) [nodeLabel setWithIOSClass:EduStanfordNlpTreesTreeCoreAnnotations_HeadTagLabelAnnotation_class_() withId:(EduStanfordNlpLingCoreLabel *) cast_chk([((EduStanfordNlpTreesTree *) nil_chk([head parentWithEduStanfordNlpTreesTree:self])) label], [EduStanfordNlpLingCoreLabel class])];
  }
  else if ([head isPreTerminal]) {
    (void) [((EduStanfordNlpLingCoreLabel *) nil_chk(nodeLabel)) setWithIOSClass:EduStanfordNlpTreesTreeCoreAnnotations_HeadWordLabelAnnotation_class_() withId:(EduStanfordNlpLingCoreLabel *) cast_chk([((EduStanfordNlpTreesTree *) nil_chk(IOSObjectArray_Get(nil_chk([head children]), 0))) label], [EduStanfordNlpLingCoreLabel class])];
    (void) [nodeLabel setWithIOSClass:EduStanfordNlpTreesTreeCoreAnnotations_HeadTagLabelAnnotation_class_() withId:(EduStanfordNlpLingCoreLabel *) cast_chk([head label], [EduStanfordNlpLingCoreLabel class])];
  }
  else {
    if (!([[head label] isKindOfClass:[EduStanfordNlpLingCoreLabel class]])) {
      @throw new_JavaLangAssertionError_initWithId_(@"Horrible bug");
    }
    EduStanfordNlpLingCoreLabel *headLabel = (EduStanfordNlpLingCoreLabel *) cast_chk([head label], [EduStanfordNlpLingCoreLabel class]);
    (void) [((EduStanfordNlpLingCoreLabel *) nil_chk(nodeLabel)) setWithIOSClass:EduStanfordNlpTreesTreeCoreAnnotations_HeadWordLabelAnnotation_class_() withId:[((EduStanfordNlpLingCoreLabel *) nil_chk(headLabel)) getWithIOSClass:EduStanfordNlpTreesTreeCoreAnnotations_HeadWordLabelAnnotation_class_()]];
    (void) [nodeLabel setWithIOSClass:EduStanfordNlpTreesTreeCoreAnnotations_HeadTagLabelAnnotation_class_() withId:[headLabel getWithIOSClass:EduStanfordNlpTreesTreeCoreAnnotations_HeadTagLabelAnnotation_class_()]];
  }
}

- (void)percolateHeadsWithEduStanfordNlpTreesHeadFinder:(id<EduStanfordNlpTreesHeadFinder>)hf {
  id<EduStanfordNlpLingLabel> nodeLabel = [self label];
  if ([self isLeaf]) {
    if ([EduStanfordNlpLingHasWord_class_() isInstance:nodeLabel]) {
      id<EduStanfordNlpLingHasWord> w = (id<EduStanfordNlpLingHasWord>) cast_check(nodeLabel, EduStanfordNlpLingHasWord_class_());
      if ([((id<EduStanfordNlpLingHasWord>) nil_chk(w)) word] == nil) {
        [w setWordWithNSString:[((id<EduStanfordNlpLingLabel>) nil_chk(nodeLabel)) value]];
      }
    }
  }
  else {
    {
      IOSObjectArray *a__ = [self children];
      EduStanfordNlpTreesTree * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        EduStanfordNlpTreesTree *kid = *b__++;
        [((EduStanfordNlpTreesTree *) nil_chk(kid)) percolateHeadsWithEduStanfordNlpTreesHeadFinder:hf];
      }
    }
    EduStanfordNlpTreesTree *head = [((id<EduStanfordNlpTreesHeadFinder>) nil_chk(hf)) determineHeadWithEduStanfordNlpTreesTree:self];
    if (head != nil) {
      id<EduStanfordNlpLingLabel> headLabel = [head label];
      NSString *headTag = ([EduStanfordNlpLingHasTag_class_() isInstance:headLabel]) ? [((id<EduStanfordNlpLingHasTag>) nil_chk(((id<EduStanfordNlpLingHasTag>) cast_check(headLabel, EduStanfordNlpLingHasTag_class_())))) tag] : nil;
      if (headTag == nil && [head isLeaf]) {
        headTag = [((id<EduStanfordNlpLingLabel>) nil_chk(nodeLabel)) value];
      }
      NSString *headWord = ([EduStanfordNlpLingHasWord_class_() isInstance:headLabel]) ? [((id<EduStanfordNlpLingHasWord>) nil_chk(((id<EduStanfordNlpLingHasWord>) cast_check(headLabel, EduStanfordNlpLingHasWord_class_())))) word] : nil;
      if (headWord == nil && [head isLeaf]) {
        headWord = [((id<EduStanfordNlpLingLabel>) nil_chk(headLabel)) value];
      }
      jint headIndex = ([EduStanfordNlpLingHasIndex_class_() isInstance:headLabel]) ? [((id<EduStanfordNlpLingHasIndex>) nil_chk(((id<EduStanfordNlpLingHasIndex>) cast_check(headLabel, EduStanfordNlpLingHasIndex_class_())))) index] : -1;
      if ([EduStanfordNlpLingHasWord_class_() isInstance:nodeLabel]) {
        [((id<EduStanfordNlpLingHasWord>) nil_chk(((id<EduStanfordNlpLingHasWord>) cast_check(nodeLabel, EduStanfordNlpLingHasWord_class_())))) setWordWithNSString:headWord];
      }
      if ([EduStanfordNlpLingHasTag_class_() isInstance:nodeLabel]) {
        [((id<EduStanfordNlpLingHasTag>) nil_chk(((id<EduStanfordNlpLingHasTag>) cast_check(nodeLabel, EduStanfordNlpLingHasTag_class_())))) setTagWithNSString:headTag];
      }
      if ([EduStanfordNlpLingHasIndex_class_() isInstance:nodeLabel] && headIndex >= 0) {
        [((id<EduStanfordNlpLingHasIndex>) nil_chk(((id<EduStanfordNlpLingHasIndex>) cast_check(nodeLabel, EduStanfordNlpLingHasIndex_class_())))) setIndexWithInt:headIndex];
      }
    }
    else {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$@", @"Head is null: ", self)];
    }
  }
}

- (id<JavaUtilSet>)dependencies {
  return [self dependenciesWithJavaUtilFunctionPredicate:EduStanfordNlpUtilFilters_acceptFilter()];
}

- (id<JavaUtilSet>)dependenciesWithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)f {
  return [self dependenciesWithJavaUtilFunctionPredicate:f withBoolean:true withBoolean:true withBoolean:false];
}

+ (id<EduStanfordNlpLingLabel>)makeDependencyLabelWithEduStanfordNlpLingLabel:(id<EduStanfordNlpLingLabel>)oldLabel
                                                                  withBoolean:(jboolean)copyLabel
                                                                  withBoolean:(jboolean)copyIndex
                                                                  withBoolean:(jboolean)copyPosTag {
  return EduStanfordNlpTreesTree_makeDependencyLabelWithEduStanfordNlpLingLabel_withBoolean_withBoolean_withBoolean_(oldLabel, copyLabel, copyIndex, copyPosTag);
}

- (id<JavaUtilSet>)dependenciesWithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)f
                                                 withBoolean:(jboolean)isConcrete
                                                 withBoolean:(jboolean)copyLabel
                                                 withBoolean:(jboolean)copyPosTag {
  id<JavaUtilSet> deps = EduStanfordNlpUtilGenerics_newHashSet();
  for (EduStanfordNlpTreesTree * __strong node in self) {
    if ([((EduStanfordNlpTreesTree *) nil_chk(node)) isLeaf] || ((IOSObjectArray *) nil_chk([node children]))->size_ < 2) {
      continue;
    }
    id<EduStanfordNlpLingLabel> headLabel = EduStanfordNlpTreesTree_makeDependencyLabelWithEduStanfordNlpLingLabel_withBoolean_withBoolean_withBoolean_([node label], copyLabel, isConcrete, copyPosTag);
    NSString *headWord = [((id<EduStanfordNlpLingHasWord>) nil_chk(((id<EduStanfordNlpLingHasWord>) cast_check(headLabel, EduStanfordNlpLingHasWord_class_())))) word];
    if (headWord == nil) {
      headWord = [((id<EduStanfordNlpLingLabel>) nil_chk(headLabel)) value];
    }
    jint headIndex = (isConcrete && ([EduStanfordNlpLingHasIndex_class_() isInstance:headLabel])) ? [((id<EduStanfordNlpLingHasIndex>) nil_chk(((id<EduStanfordNlpLingHasIndex>) cast_check(headLabel, EduStanfordNlpLingHasIndex_class_())))) index] : -1;
    jboolean seenHead = false;
    {
      IOSObjectArray *a__ = [node children];
      EduStanfordNlpTreesTree * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        EduStanfordNlpTreesTree *child = *b__++;
        id<EduStanfordNlpLingLabel> depLabel = EduStanfordNlpTreesTree_makeDependencyLabelWithEduStanfordNlpLingLabel_withBoolean_withBoolean_withBoolean_([((EduStanfordNlpTreesTree *) nil_chk(child)) label], copyLabel, isConcrete, copyPosTag);
        NSString *depWord = [((id<EduStanfordNlpLingHasWord>) nil_chk(((id<EduStanfordNlpLingHasWord>) cast_check(depLabel, EduStanfordNlpLingHasWord_class_())))) word];
        if (depWord == nil) {
          depWord = [((id<EduStanfordNlpLingLabel>) nil_chk(depLabel)) value];
        }
        jint depIndex = (isConcrete && ([EduStanfordNlpLingHasIndex_class_() isInstance:depLabel])) ? [((id<EduStanfordNlpLingHasIndex>) nil_chk(((id<EduStanfordNlpLingHasIndex>) cast_check(depLabel, EduStanfordNlpLingHasIndex_class_())))) index] : -1;
        if (!seenHead && headIndex == depIndex && [((NSString *) nil_chk(headWord)) isEqual:depWord]) {
          seenHead = true;
        }
        else {
          id<EduStanfordNlpTreesDependency> dependency = (isConcrete && depIndex != headIndex) ? new_EduStanfordNlpTreesUnnamedConcreteDependency_initWithEduStanfordNlpLingLabel_withEduStanfordNlpLingLabel_(headLabel, depLabel) : new_EduStanfordNlpTreesUnnamedDependency_initWithEduStanfordNlpLingLabel_withEduStanfordNlpLingLabel_(headLabel, depLabel);
          if ([((id<JavaUtilFunctionPredicate>) nil_chk(f)) testWithId:dependency]) {
            [((id<JavaUtilSet>) nil_chk(deps)) addWithId:dependency];
          }
        }
      }
    }
  }
  return deps;
}

- (id<JavaUtilSet>)mapDependenciesWithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)f
                              withEduStanfordNlpTreesHeadFinder:(id<EduStanfordNlpTreesHeadFinder>)hf {
  if (hf == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"mapDependencies: need HeadFinder");
  }
  id<JavaUtilSet> deps = EduStanfordNlpUtilGenerics_newHashSet();
  for (EduStanfordNlpTreesTree * __strong node in self) {
    if ([((EduStanfordNlpTreesTree *) nil_chk(node)) isLeaf] || ((IOSObjectArray *) nil_chk([node children]))->size_ < 2) {
      continue;
    }
    EduStanfordNlpTreesTree *hwt = [node headTerminalWithEduStanfordNlpTreesHeadFinder:hf];
    if (hwt == nil) {
      @throw new_JavaLangIllegalStateException_initWithNSString_(@"mapDependencies: HeadFinder failed!");
    }
    {
      IOSObjectArray *a__ = [node children];
      EduStanfordNlpTreesTree * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        EduStanfordNlpTreesTree *child = *b__++;
        EduStanfordNlpTreesTree *dwt = [((EduStanfordNlpTreesTree *) nil_chk(child)) headTerminalWithEduStanfordNlpTreesHeadFinder:hf];
        if (dwt == nil) {
          @throw new_JavaLangIllegalStateException_initWithNSString_(@"mapDependencies: HeadFinder failed!");
        }
        if (dwt != hwt) {
          id<EduStanfordNlpTreesDependency> p = new_EduStanfordNlpTreesUnnamedDependency_initWithEduStanfordNlpLingLabel_withEduStanfordNlpLingLabel_([hwt label], [dwt label]);
          if ([((id<JavaUtilFunctionPredicate>) nil_chk(f)) testWithId:p]) {
            [((id<JavaUtilSet>) nil_chk(deps)) addWithId:p];
          }
        }
      }
    }
  }
  return deps;
}

- (id<JavaUtilSet>)mapDependenciesWithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)f
                              withEduStanfordNlpTreesHeadFinder:(id<EduStanfordNlpTreesHeadFinder>)hf
                                                   withNSString:(NSString *)rootName {
  id<JavaUtilSet> deps = [self mapDependenciesWithJavaUtilFunctionPredicate:f withEduStanfordNlpTreesHeadFinder:hf];
  if (rootName != nil) {
    id<EduStanfordNlpLingLabel> hl = [((EduStanfordNlpTreesTree *) nil_chk([self headTerminalWithEduStanfordNlpTreesHeadFinder:hf])) label];
    EduStanfordNlpLingCoreLabel *rl = new_EduStanfordNlpLingCoreLabel_init();
    (void) [rl setWithIOSClass:EduStanfordNlpLingCoreAnnotations_TextAnnotation_class_() withId:rootName];
    (void) [rl setWithIOSClass:EduStanfordNlpLingCoreAnnotations_IndexAnnotation_class_() withId:JavaLangInteger_valueOfWithInt_(0)];
    [((id<JavaUtilSet>) nil_chk(deps)) addWithId:new_EduStanfordNlpTreesNamedDependency_initWithEduStanfordNlpLingLabel_withEduStanfordNlpLingLabel_withId_(rl, hl, rootName)];
  }
  return deps;
}

- (JavaUtilArrayList *)yield {
  return [self yieldWithJavaUtilArrayList:new_JavaUtilArrayList_init()];
}

- (JavaUtilArrayList *)yieldWithJavaUtilArrayList:(JavaUtilArrayList *)y {
  if ([self isLeaf]) {
    [((JavaUtilArrayList *) nil_chk(y)) addWithId:[self label]];
  }
  else {
    IOSObjectArray *kids = [self children];
    {
      IOSObjectArray *a__ = kids;
      EduStanfordNlpTreesTree * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        EduStanfordNlpTreesTree *kid = *b__++;
        (void) [((EduStanfordNlpTreesTree *) nil_chk(kid)) yieldWithJavaUtilArrayList:y];
      }
    }
  }
  return y;
}

- (JavaUtilArrayList *)yieldWords {
  return [self yieldWordsWithJavaUtilArrayList:new_JavaUtilArrayList_init()];
}

- (JavaUtilArrayList *)yieldWordsWithJavaUtilArrayList:(JavaUtilArrayList *)y {
  if ([self isLeaf]) {
    [((JavaUtilArrayList *) nil_chk(y)) addWithId:new_EduStanfordNlpLingWord_initWithEduStanfordNlpLingLabel_([self label])];
  }
  else {
    {
      IOSObjectArray *a__ = [self children];
      EduStanfordNlpTreesTree * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        EduStanfordNlpTreesTree *kid = *b__++;
        (void) [((EduStanfordNlpTreesTree *) nil_chk(kid)) yieldWordsWithJavaUtilArrayList:y];
      }
    }
  }
  return y;
}

- (JavaUtilArrayList *)yieldHasWord {
  return [self yieldHasWordWithJavaUtilArrayList:new_JavaUtilArrayList_init()];
}

- (JavaUtilArrayList *)yieldHasWordWithJavaUtilArrayList:(JavaUtilArrayList *)y {
  if ([self isLeaf]) {
    id<EduStanfordNlpLingLabel> lab = [self label];
    if ([EduStanfordNlpLingHasWord_class_() isInstance:lab]) {
      if ([lab isKindOfClass:[EduStanfordNlpLingCoreLabel class]]) {
        EduStanfordNlpLingCoreLabel *cl = (EduStanfordNlpLingCoreLabel *) cast_chk(lab, [EduStanfordNlpLingCoreLabel class]);
        if ([((EduStanfordNlpLingCoreLabel *) nil_chk(cl)) word] == nil) [cl setWordWithNSString:[cl value]];
        [((JavaUtilArrayList *) nil_chk(y)) addWithId:cl];
      }
      else {
        [((JavaUtilArrayList *) nil_chk(y)) addWithId:(id<EduStanfordNlpLingHasWord>) cast_check(lab, EduStanfordNlpLingHasWord_class_())];
      }
    }
    else {
      [((JavaUtilArrayList *) nil_chk(y)) addWithId:new_EduStanfordNlpLingWord_initWithEduStanfordNlpLingLabel_(lab)];
    }
  }
  else {
    IOSObjectArray *kids = [self children];
    {
      IOSObjectArray *a__ = kids;
      EduStanfordNlpTreesTree * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        EduStanfordNlpTreesTree *kid = *b__++;
        (void) [((EduStanfordNlpTreesTree *) nil_chk(kid)) yieldWithJavaUtilList:y];
      }
    }
  }
  return y;
}

- (id<JavaUtilList>)yieldWithJavaUtilList:(id<JavaUtilList>)y {
  if ([self isLeaf]) {
    if ([EduStanfordNlpLingHasWord_class_() isInstance:[self label]]) {
      id<EduStanfordNlpLingHasWord> hw = (id<EduStanfordNlpLingHasWord>) cast_check([self label], EduStanfordNlpLingHasWord_class_());
      [((id<EduStanfordNlpLingHasWord>) nil_chk(hw)) setWordWithNSString:[((id<EduStanfordNlpLingLabel>) nil_chk([self label])) value]];
    }
    [((id<JavaUtilList>) nil_chk(y)) addWithId:[self label]];
  }
  else {
    IOSObjectArray *kids = [self children];
    {
      IOSObjectArray *a__ = kids;
      EduStanfordNlpTreesTree * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        EduStanfordNlpTreesTree *kid = *b__++;
        (void) [((EduStanfordNlpTreesTree *) nil_chk(kid)) yieldWithJavaUtilList:y];
      }
    }
  }
  return y;
}

- (JavaUtilArrayList *)taggedYield {
  return ((JavaUtilArrayList *) [self taggedYieldWithJavaUtilList:new_JavaUtilArrayList_init()]);
}

- (id<JavaUtilList>)labeledYield {
  return [self labeledYieldWithJavaUtilList:new_JavaUtilArrayList_init()];
}

- (id<JavaUtilList>)taggedYieldWithJavaUtilList:(id<JavaUtilList>)ty {
  if ([self isPreTerminal]) {
    [((id<JavaUtilList>) nil_chk(ty)) addWithId:new_EduStanfordNlpLingTaggedWord_initWithEduStanfordNlpLingLabel_withEduStanfordNlpLingLabel_([((EduStanfordNlpTreesTree *) nil_chk([self firstChild])) label], [self label])];
  }
  else {
    {
      IOSObjectArray *a__ = [self children];
      EduStanfordNlpTreesTree * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        EduStanfordNlpTreesTree *kid = *b__++;
        (void) [((EduStanfordNlpTreesTree *) nil_chk(kid)) taggedYieldWithJavaUtilList:ty];
      }
    }
  }
  return ty;
}

- (id<JavaUtilList>)labeledYieldWithJavaUtilList:(id<JavaUtilList>)ty {
  if ([self isPreTerminal]) {
    [((id<JavaUtilList>) nil_chk(ty)) addWithId:new_EduStanfordNlpLingLabeledWord_initWithEduStanfordNlpLingLabel_withEduStanfordNlpLingLabel_([((EduStanfordNlpTreesTree *) nil_chk([self firstChild])) label], [self label])];
  }
  else {
    {
      IOSObjectArray *a__ = [self children];
      EduStanfordNlpTreesTree * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        EduStanfordNlpTreesTree *kid = *b__++;
        (void) [((EduStanfordNlpTreesTree *) nil_chk(kid)) labeledYieldWithJavaUtilList:ty];
      }
    }
  }
  return ty;
}

- (id<JavaUtilList>)taggedLabeledYield {
  id<JavaUtilList> ty = new_JavaUtilArrayList_init();
  EduStanfordNlpTreesTree_taggedLabeledYieldWithJavaUtilList_withInt_(self, ty, 0);
  return ty;
}

- (jint)taggedLabeledYieldWithJavaUtilList:(id<JavaUtilList>)ty
                                   withInt:(jint)termIdx {
  return EduStanfordNlpTreesTree_taggedLabeledYieldWithJavaUtilList_withInt_(self, ty, termIdx);
}

- (id<JavaUtilList>)preTerminalYield {
  return [self preTerminalYieldWithJavaUtilList:new_JavaUtilArrayList_init()];
}

- (id<JavaUtilList>)preTerminalYieldWithJavaUtilList:(id<JavaUtilList>)y {
  if ([self isPreTerminal]) {
    [((id<JavaUtilList>) nil_chk(y)) addWithId:[self label]];
  }
  else {
    IOSObjectArray *kids = [self children];
    {
      IOSObjectArray *a__ = kids;
      EduStanfordNlpTreesTree * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        EduStanfordNlpTreesTree *kid = *b__++;
        (void) [((EduStanfordNlpTreesTree *) nil_chk(kid)) preTerminalYieldWithJavaUtilList:y];
      }
    }
  }
  return y;
}

- (id<JavaUtilList>)getLeaves {
  return [self getLeavesWithJavaUtilList:new_JavaUtilArrayList_init()];
}

- (id<JavaUtilList>)getLeavesWithJavaUtilList:(id<JavaUtilList>)list {
  if ([self isLeaf]) {
    [((id<JavaUtilList>) nil_chk(list)) addWithId:self];
  }
  else {
    {
      IOSObjectArray *a__ = [self children];
      EduStanfordNlpTreesTree * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        EduStanfordNlpTreesTree *kid = *b__++;
        (void) [((EduStanfordNlpTreesTree *) nil_chk(kid)) getLeavesWithJavaUtilList:list];
      }
    }
  }
  return list;
}

- (id<JavaUtilCollection>)labels {
  id<JavaUtilSet> n = EduStanfordNlpUtilGenerics_newHashSet();
  [((id<JavaUtilSet>) nil_chk(n)) addWithId:[self label]];
  IOSObjectArray *kids = [self children];
  {
    IOSObjectArray *a__ = kids;
    EduStanfordNlpTreesTree * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      EduStanfordNlpTreesTree *kid = *b__++;
      [n addAllWithJavaUtilCollection:[((EduStanfordNlpTreesTree *) nil_chk(kid)) labels]];
    }
  }
  return n;
}

- (void)setLabelsWithJavaUtilCollection:(id<JavaUtilCollection>)c {
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"Can't set Tree labels");
}

- (EduStanfordNlpTreesTree *)flatten {
  return [self flattenWithEduStanfordNlpTreesTreeFactory:[self treeFactory]];
}

- (EduStanfordNlpTreesTree *)flattenWithEduStanfordNlpTreesTreeFactory:(id<EduStanfordNlpTreesTreeFactory>)tf {
  if ([self isLeaf] || [self isPreTerminal]) {
    return self;
  }
  IOSObjectArray *kids = [self children];
  id<JavaUtilList> newChildren = new_JavaUtilArrayList_initWithInt_(((IOSObjectArray *) nil_chk(kids))->size_);
  {
    IOSObjectArray *a__ = kids;
    EduStanfordNlpTreesTree * const *b__ = a__->buffer_;
    EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      EduStanfordNlpTreesTree *child = *b__++;
      if ([((EduStanfordNlpTreesTree *) nil_chk(child)) isLeaf] || [child isPreTerminal]) {
        [newChildren addWithId:child];
      }
      else {
        EduStanfordNlpTreesTree *newChild = [child flattenWithEduStanfordNlpTreesTreeFactory:tf];
        if ([((id<EduStanfordNlpLingLabel>) nil_chk([self label])) isEqual:[((EduStanfordNlpTreesTree *) nil_chk(newChild)) label]]) {
          [newChildren addAllWithJavaUtilCollection:[newChild getChildrenAsList]];
        }
        else {
          [newChildren addWithId:newChild];
        }
      }
    }
  }
  return [((id<EduStanfordNlpTreesTreeFactory>) nil_chk(tf)) newTreeNodeWithEduStanfordNlpLingLabel:[self label] withJavaUtilList:newChildren];
}

- (id<JavaUtilSet>)subTrees {
  return ((id<JavaUtilSet>) [self subTreesWithJavaUtilCollection:EduStanfordNlpUtilGenerics_newHashSet()]);
}

- (id<JavaUtilList>)subTreeList {
  return ((JavaUtilArrayList *) [self subTreesWithJavaUtilCollection:new_JavaUtilArrayList_init()]);
}

- (id<JavaUtilCollection>)subTreesWithJavaUtilCollection:(id<JavaUtilCollection>)n {
  [((id<JavaUtilCollection>) nil_chk(n)) addWithId:self];
  IOSObjectArray *kids = [self children];
  {
    IOSObjectArray *a__ = kids;
    EduStanfordNlpTreesTree * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      EduStanfordNlpTreesTree *kid = *b__++;
      (void) [((EduStanfordNlpTreesTree *) nil_chk(kid)) subTreesWithJavaUtilCollection:n];
    }
  }
  return n;
}

- (EduStanfordNlpTreesTree *)deepCopy {
  return [self deepCopyWithEduStanfordNlpTreesTreeFactory:[self treeFactory]];
}

- (EduStanfordNlpTreesTree *)deepCopyWithEduStanfordNlpTreesTreeFactory:(id<EduStanfordNlpTreesTreeFactory>)tf {
  return [self deepCopyWithEduStanfordNlpTreesTreeFactory:tf withEduStanfordNlpLingLabelFactory:[((id<EduStanfordNlpLingLabel>) nil_chk([self label])) labelFactory]];
}

- (EduStanfordNlpTreesTree *)deepCopyWithEduStanfordNlpTreesTreeFactory:(id<EduStanfordNlpTreesTreeFactory>)tf
                                     withEduStanfordNlpLingLabelFactory:(id<EduStanfordNlpLingLabelFactory>)lf {
  id<EduStanfordNlpLingLabel> label = [((id<EduStanfordNlpLingLabelFactory>) nil_chk(lf)) newLabelWithEduStanfordNlpLingLabel:[self label]];
  if ([self isLeaf]) {
    return [((id<EduStanfordNlpTreesTreeFactory>) nil_chk(tf)) newLeafWithEduStanfordNlpLingLabel:label];
  }
  IOSObjectArray *kids = [self children];
  id<JavaUtilList> newKids = new_JavaUtilArrayList_initWithInt_(((IOSObjectArray *) nil_chk(kids))->size_);
  {
    IOSObjectArray *a__ = kids;
    EduStanfordNlpTreesTree * const *b__ = a__->buffer_;
    EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      EduStanfordNlpTreesTree *kid = *b__++;
      [newKids addWithId:[((EduStanfordNlpTreesTree *) nil_chk(kid)) deepCopyWithEduStanfordNlpTreesTreeFactory:tf withEduStanfordNlpLingLabelFactory:lf]];
    }
  }
  return [((id<EduStanfordNlpTreesTreeFactory>) nil_chk(tf)) newTreeNodeWithEduStanfordNlpLingLabel:label withJavaUtilList:newKids];
}

- (EduStanfordNlpTreesTree *)treeSkeletonCopy {
  return [self treeSkeletonCopyWithEduStanfordNlpTreesTreeFactory:[self treeFactory]];
}

- (EduStanfordNlpTreesTree *)treeSkeletonCopyWithEduStanfordNlpTreesTreeFactory:(id<EduStanfordNlpTreesTreeFactory>)tf {
  EduStanfordNlpTreesTree *t;
  if ([self isLeaf]) {
    t = [((id<EduStanfordNlpTreesTreeFactory>) nil_chk(tf)) newLeafWithEduStanfordNlpLingLabel:[self label]];
  }
  else {
    IOSObjectArray *kids = [self children];
    id<JavaUtilList> newKids = new_JavaUtilArrayList_initWithInt_(((IOSObjectArray *) nil_chk(kids))->size_);
    {
      IOSObjectArray *a__ = kids;
      EduStanfordNlpTreesTree * const *b__ = a__->buffer_;
      EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        EduStanfordNlpTreesTree *kid = *b__++;
        [newKids addWithId:[((EduStanfordNlpTreesTree *) nil_chk(kid)) treeSkeletonCopyWithEduStanfordNlpTreesTreeFactory:tf]];
      }
    }
    t = [((id<EduStanfordNlpTreesTreeFactory>) nil_chk(tf)) newTreeNodeWithEduStanfordNlpLingLabel:[self label] withJavaUtilList:newKids];
  }
  return t;
}

- (EduStanfordNlpTreesTree *)treeSkeletonConstituentCopy {
  return [self treeSkeletonConstituentCopyWithEduStanfordNlpTreesTreeFactory:[self treeFactory] withEduStanfordNlpLingLabelFactory:[((id<EduStanfordNlpLingLabel>) nil_chk([self label])) labelFactory]];
}

- (EduStanfordNlpTreesTree *)treeSkeletonConstituentCopyWithEduStanfordNlpTreesTreeFactory:(id<EduStanfordNlpTreesTreeFactory>)tf
                                                        withEduStanfordNlpLingLabelFactory:(id<EduStanfordNlpLingLabelFactory>)lf {
  if ([self isLeaf]) {
    EduStanfordNlpTreesTree *newLeaf = [((id<EduStanfordNlpTreesTreeFactory>) nil_chk(tf)) newLeafWithEduStanfordNlpLingLabel:[self label]];
    [((EduStanfordNlpTreesTree *) nil_chk(newLeaf)) setLabelWithEduStanfordNlpLingLabel:[self label]];
    return newLeaf;
  }
  id<EduStanfordNlpLingLabel> label = [((id<EduStanfordNlpLingLabelFactory>) nil_chk(lf)) newLabelWithEduStanfordNlpLingLabel:[self label]];
  IOSObjectArray *kids = [self children];
  id<JavaUtilList> newKids = new_JavaUtilArrayList_initWithInt_(((IOSObjectArray *) nil_chk(kids))->size_);
  {
    IOSObjectArray *a__ = kids;
    EduStanfordNlpTreesTree * const *b__ = a__->buffer_;
    EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      EduStanfordNlpTreesTree *kid = *b__++;
      [newKids addWithId:[((EduStanfordNlpTreesTree *) nil_chk(kid)) treeSkeletonConstituentCopyWithEduStanfordNlpTreesTreeFactory:tf withEduStanfordNlpLingLabelFactory:lf]];
    }
  }
  return [((id<EduStanfordNlpTreesTreeFactory>) nil_chk(tf)) newTreeNodeWithEduStanfordNlpLingLabel:label withJavaUtilList:newKids];
}

- (EduStanfordNlpTreesTree *)transformWithEduStanfordNlpTreesTreeTransformer:(id<EduStanfordNlpTreesTreeTransformer>)transformer {
  return [self transformWithEduStanfordNlpTreesTreeTransformer:transformer withEduStanfordNlpTreesTreeFactory:[self treeFactory]];
}

- (EduStanfordNlpTreesTree *)transformWithEduStanfordNlpTreesTreeTransformer:(id<EduStanfordNlpTreesTreeTransformer>)transformer
                                          withEduStanfordNlpTreesTreeFactory:(id<EduStanfordNlpTreesTreeFactory>)tf {
  EduStanfordNlpTreesTree *t;
  if ([self isLeaf]) {
    t = [((id<EduStanfordNlpTreesTreeFactory>) nil_chk(tf)) newLeafWithEduStanfordNlpLingLabel:[self label]];
  }
  else {
    IOSObjectArray *kids = [self children];
    id<JavaUtilList> newKids = new_JavaUtilArrayList_initWithInt_(((IOSObjectArray *) nil_chk(kids))->size_);
    {
      IOSObjectArray *a__ = kids;
      EduStanfordNlpTreesTree * const *b__ = a__->buffer_;
      EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        EduStanfordNlpTreesTree *kid = *b__++;
        [newKids addWithId:[((EduStanfordNlpTreesTree *) nil_chk(kid)) transformWithEduStanfordNlpTreesTreeTransformer:transformer withEduStanfordNlpTreesTreeFactory:tf]];
      }
    }
    t = [((id<EduStanfordNlpTreesTreeFactory>) nil_chk(tf)) newTreeNodeWithEduStanfordNlpLingLabel:[self label] withJavaUtilList:newKids];
  }
  return [((id<EduStanfordNlpTreesTreeTransformer>) nil_chk(transformer)) transformTreeWithEduStanfordNlpTreesTree:t];
}

- (EduStanfordNlpTreesTree *)spliceOutWithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)nodeFilter {
  return [self spliceOutWithJavaUtilFunctionPredicate:nodeFilter withEduStanfordNlpTreesTreeFactory:[self treeFactory]];
}

- (EduStanfordNlpTreesTree *)spliceOutWithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)nodeFilter
                                 withEduStanfordNlpTreesTreeFactory:(id<EduStanfordNlpTreesTreeFactory>)tf {
  id<JavaUtilList> l = EduStanfordNlpTreesTree_spliceOutHelperWithJavaUtilFunctionPredicate_withEduStanfordNlpTreesTreeFactory_(self, nodeFilter, tf);
  if ([((id<JavaUtilList>) nil_chk(l)) isEmpty]) {
    return nil;
  }
  else if ([l size] == 1) {
    return [l getWithInt:0];
  }
  return [((id<EduStanfordNlpTreesTreeFactory>) nil_chk(tf)) newTreeNodeWithEduStanfordNlpLingLabel:nil withJavaUtilList:l];
}

- (id<JavaUtilList>)spliceOutHelperWithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)nodeFilter
                              withEduStanfordNlpTreesTreeFactory:(id<EduStanfordNlpTreesTreeFactory>)tf {
  return EduStanfordNlpTreesTree_spliceOutHelperWithJavaUtilFunctionPredicate_withEduStanfordNlpTreesTreeFactory_(self, nodeFilter, tf);
}

- (EduStanfordNlpTreesTree *)pruneWithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)filter {
  return [self pruneWithJavaUtilFunctionPredicate:filter withEduStanfordNlpTreesTreeFactory:[self treeFactory]];
}

- (EduStanfordNlpTreesTree *)pruneWithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)filter
                             withEduStanfordNlpTreesTreeFactory:(id<EduStanfordNlpTreesTreeFactory>)tf {
  if (![((id<JavaUtilFunctionPredicate>) nil_chk(filter)) testWithId:self]) {
    return nil;
  }
  id<JavaUtilList> l = new_JavaUtilArrayList_init();
  IOSObjectArray *kids = [self children];
  {
    IOSObjectArray *a__ = kids;
    EduStanfordNlpTreesTree * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      EduStanfordNlpTreesTree *kid = *b__++;
      EduStanfordNlpTreesTree *prunedChild = [((EduStanfordNlpTreesTree *) nil_chk(kid)) pruneWithJavaUtilFunctionPredicate:filter withEduStanfordNlpTreesTreeFactory:tf];
      if (prunedChild != nil) {
        [l addWithId:prunedChild];
      }
    }
  }
  if ([l isEmpty] && !(((IOSObjectArray *) nil_chk(kids))->size_ == 0)) {
    return nil;
  }
  if ([self isLeaf]) {
    return [((id<EduStanfordNlpTreesTreeFactory>) nil_chk(tf)) newLeafWithEduStanfordNlpLingLabel:[self label]];
  }
  return [((id<EduStanfordNlpTreesTreeFactory>) nil_chk(tf)) newTreeNodeWithEduStanfordNlpLingLabel:[self label] withJavaUtilList:l];
}

- (EduStanfordNlpTreesTree *)skipRoot {
  if (![self isUnaryRewrite]) return self;
  NSString *lab = [((id<EduStanfordNlpLingLabel>) nil_chk([self label])) value];
  return (lab == nil || [lab isEmpty] || [@"ROOT" isEqual:lab]) ? [self firstChild] : self;
}

- (id<EduStanfordNlpTreesTreeFactory>)treeFactory {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (EduStanfordNlpTreesTree *)parent {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (EduStanfordNlpTreesTree *)parentWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)root {
  IOSObjectArray *kids = [((EduStanfordNlpTreesTree *) nil_chk(root)) children];
  return EduStanfordNlpTreesTree_parentHelperWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTreeArray_withEduStanfordNlpTreesTree_(root, kids, self);
}

+ (EduStanfordNlpTreesTree *)parentHelperWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)parent
                                    withEduStanfordNlpTreesTreeArray:(IOSObjectArray *)kids
                                         withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)node {
  return EduStanfordNlpTreesTree_parentHelperWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTreeArray_withEduStanfordNlpTreesTree_(parent, kids, node);
}

- (jint)size {
  jint size = 1;
  IOSObjectArray *kids = [self children];
  {
    IOSObjectArray *a__ = kids;
    EduStanfordNlpTreesTree * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      EduStanfordNlpTreesTree *kid = *b__++;
      size += [((EduStanfordNlpTreesTree *) nil_chk(kid)) size];
    }
  }
  return size;
}

- (EduStanfordNlpTreesTree *)ancestorWithInt:(jint)height
                 withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)root {
  if (height < 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"ancestor: height cannot be negative");
  }
  if (height == 0) {
    return self;
  }
  EduStanfordNlpTreesTree *par = [self parentWithEduStanfordNlpTreesTree:root];
  if (par == nil) {
    return nil;
  }
  return [par ancestorWithInt:height - 1 withEduStanfordNlpTreesTree:root];
}

- (id<JavaUtilIterator>)iterator {
  return new_EduStanfordNlpTreesTree_TreeIterator_initWithEduStanfordNlpTreesTree_(self);
}

- (id<JavaUtilList>)postOrderNodeList {
  id<JavaUtilList> nodes = new_JavaUtilArrayList_init();
  EduStanfordNlpTreesTree_postOrderRecurseWithEduStanfordNlpTreesTree_withJavaUtilList_(self, nodes);
  return nodes;
}

+ (void)postOrderRecurseWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
                                   withJavaUtilList:(id<JavaUtilList>)nodes {
  EduStanfordNlpTreesTree_postOrderRecurseWithEduStanfordNlpTreesTree_withJavaUtilList_(t, nodes);
}

- (id<JavaUtilList>)preOrderNodeList {
  id<JavaUtilList> nodes = new_JavaUtilArrayList_init();
  EduStanfordNlpTreesTree_preOrderRecurseWithEduStanfordNlpTreesTree_withJavaUtilList_(self, nodes);
  return nodes;
}

+ (void)preOrderRecurseWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
                                  withJavaUtilList:(id<JavaUtilList>)nodes {
  EduStanfordNlpTreesTree_preOrderRecurseWithEduStanfordNlpTreesTree_withJavaUtilList_(t, nodes);
}

+ (EduStanfordNlpTreesTree *)valueOfWithNSString:(NSString *)str {
  return EduStanfordNlpTreesTree_valueOfWithNSString_(str);
}

+ (EduStanfordNlpTreesTree *)valueOfWithNSString:(NSString *)str
        withEduStanfordNlpTreesTreeReaderFactory:(id<EduStanfordNlpTreesTreeReaderFactory>)trf {
  return EduStanfordNlpTreesTree_valueOfWithNSString_withEduStanfordNlpTreesTreeReaderFactory_(str, trf);
}

- (EduStanfordNlpTreesTree *)getChildWithInt:(jint)i {
  IOSObjectArray *kids = [self children];
  return IOSObjectArray_Get(nil_chk(kids), i);
}

- (EduStanfordNlpTreesTree *)removeChildWithInt:(jint)i {
  IOSObjectArray *kids = [self children];
  EduStanfordNlpTreesTree *kid = IOSObjectArray_Get(nil_chk(kids), i);
  IOSObjectArray *newKids = [IOSObjectArray newArrayWithLength:kids->size_ - 1 type:EduStanfordNlpTreesTree_class_()];
  for (jint j = 0; j < newKids->size_; j++) {
    if (j < i) {
      (void) IOSObjectArray_Set(newKids, j, IOSObjectArray_Get(kids, j));
    }
    else {
      (void) IOSObjectArray_Set(newKids, j, IOSObjectArray_Get(kids, j + 1));
    }
  }
  [self setChildrenWithEduStanfordNlpTreesTreeArray:newKids];
  return kid;
}

- (void)addChildWithInt:(jint)i
withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t {
  IOSObjectArray *kids = [self children];
  IOSObjectArray *newKids = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(kids))->size_ + 1 type:EduStanfordNlpTreesTree_class_()];
  if (i != 0) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(kids, 0, newKids, 0, i);
  }
  (void) IOSObjectArray_Set(newKids, i, t);
  if (i != kids->size_) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(kids, i, newKids, i + 1, kids->size_ - i);
  }
  [self setChildrenWithEduStanfordNlpTreesTreeArray:newKids];
}

- (void)addChildWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t {
  [self addChildWithInt:((IOSObjectArray *) nil_chk([self children]))->size_ withEduStanfordNlpTreesTree:t];
}

- (EduStanfordNlpTreesTree *)setChildWithInt:(jint)i
                 withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t {
  IOSObjectArray *kids = [self children];
  EduStanfordNlpTreesTree *old = IOSObjectArray_Get(nil_chk(kids), i);
  (void) IOSObjectArray_Set(kids, i, t);
  return old;
}

- (jboolean)dominatesWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t {
  id<JavaUtilList> dominationPath = [self dominationPathWithEduStanfordNlpTreesTree:t];
  return dominationPath != nil && [dominationPath size] > 1;
}

- (id<JavaUtilList>)dominationPathWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t {
  IOSObjectArray *result = EduStanfordNlpTreesTree_dominationPathWithEduStanfordNlpTreesTree_withInt_(self, t, 0);
  if (result == nil) {
    return nil;
  }
  return JavaUtilArrays_asListWithNSObjectArray_(result);
}

- (IOSObjectArray *)dominationPathHelperWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
                                                            withInt:(jint)depth {
  return EduStanfordNlpTreesTree_dominationPathHelperWithEduStanfordNlpTreesTree_withInt_(self, t, depth);
}

- (IOSObjectArray *)dominationPathWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
                                                      withInt:(jint)depth {
  return EduStanfordNlpTreesTree_dominationPathWithEduStanfordNlpTreesTree_withInt_(self, t, depth);
}

- (id<JavaUtilList>)pathNodeToNodeWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t1
                                  withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t2 {
  if (![self containsWithId:t1] || ![self containsWithId:t2]) {
    return nil;
  }
  if (t1 == t2) {
    return JavaUtilCollections_singletonListWithId_(t1);
  }
  if ([((EduStanfordNlpTreesTree *) nil_chk(t1)) dominatesWithEduStanfordNlpTreesTree:t2]) {
    return [t1 dominationPathWithEduStanfordNlpTreesTree:t2];
  }
  if ([((EduStanfordNlpTreesTree *) nil_chk(t2)) dominatesWithEduStanfordNlpTreesTree:t1]) {
    id<JavaUtilList> path = [t2 dominationPathWithEduStanfordNlpTreesTree:t1];
    JavaUtilCollections_reverseWithJavaUtilList_(path);
    return path;
  }
  EduStanfordNlpTreesTree *joinNode = [self joinNodeWithEduStanfordNlpTreesTree:t1 withEduStanfordNlpTreesTree:t2];
  if (joinNode == nil) {
    return nil;
  }
  id<JavaUtilList> t1DomPath = [joinNode dominationPathWithEduStanfordNlpTreesTree:t1];
  id<JavaUtilList> t2DomPath = [joinNode dominationPathWithEduStanfordNlpTreesTree:t2];
  if (t1DomPath == nil || t2DomPath == nil) {
    return nil;
  }
  JavaUtilArrayList *path = new_JavaUtilArrayList_init();
  [path addAllWithJavaUtilCollection:t1DomPath];
  JavaUtilCollections_reverseWithJavaUtilList_(path);
  [path removeWithId:joinNode];
  [path addAllWithJavaUtilCollection:t2DomPath];
  return path;
}

- (EduStanfordNlpTreesTree *)joinNodeWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t1
                                     withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t2 {
  if (![self containsWithId:t1] || ![self containsWithId:t2]) {
    return nil;
  }
  if (self == t1 || self == t2) {
    return self;
  }
  EduStanfordNlpTreesTree *joinNode = nil;
  id<JavaUtilList> t1DomPath = [self dominationPathWithEduStanfordNlpTreesTree:t1];
  id<JavaUtilList> t2DomPath = [self dominationPathWithEduStanfordNlpTreesTree:t2];
  if (t1DomPath == nil || t2DomPath == nil) {
    return nil;
  }
  id<JavaUtilIterator> it1 = [t1DomPath iterator];
  id<JavaUtilIterator> it2 = [t2DomPath iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it1)) hasNext] && [((id<JavaUtilIterator>) nil_chk(it2)) hasNext]) {
    EduStanfordNlpTreesTree *n1 = [it1 next];
    EduStanfordNlpTreesTree *n2 = [((id<JavaUtilIterator>) nil_chk(it2)) next];
    if (n1 != n2) {
      break;
    }
    joinNode = n1;
  }
  return joinNode;
}

- (jboolean)cCommandsWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t1
                     withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t2 {
  id<JavaUtilList> sibs = [((EduStanfordNlpTreesTree *) nil_chk(t1)) siblingsWithEduStanfordNlpTreesTree:self];
  if (sibs == nil) {
    return false;
  }
  for (EduStanfordNlpTreesTree * __strong sib in sibs) {
    if (sib == t2 || [((EduStanfordNlpTreesTree *) nil_chk(sib)) containsWithId:t2]) {
      return true;
    }
  }
  return false;
}

- (id<JavaUtilList>)siblingsWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)root {
  EduStanfordNlpTreesTree *parent = [self parentWithEduStanfordNlpTreesTree:root];
  if (parent == nil) {
    return nil;
  }
  id<JavaUtilList> siblings = [parent getChildrenAsList];
  [((id<JavaUtilList>) nil_chk(siblings)) removeWithId:self];
  return siblings;
}

- (void)insertDtrWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)dtr
                                     withInt:(jint)position {
  IOSObjectArray *kids = [self children];
  if (position > ((IOSObjectArray *) nil_chk(kids))->size_) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$@$I$", @"Can't insert tree after the ", position, @"th daughter in ", self, @"; only ", kids->size_, @" daughters exist!"));
  }
  IOSObjectArray *newKids = [IOSObjectArray newArrayWithLength:kids->size_ + 1 type:EduStanfordNlpTreesTree_class_()];
  jint i = 0;
  for (; i < position; i++) {
    (void) IOSObjectArray_Set(newKids, i, IOSObjectArray_Get(kids, i));
  }
  (void) IOSObjectArray_Set(newKids, i, dtr);
  for (; i < kids->size_; i++) {
    (void) IOSObjectArray_Set(newKids, i + 1, IOSObjectArray_Get(kids, i));
  }
  [self setChildrenWithEduStanfordNlpTreesTreeArray:newKids];
}

- (NSString *)value {
  id<EduStanfordNlpLingLabel> lab = [self label];
  if (lab == nil) {
    return nil;
  }
  return [lab value];
}

- (void)setValueWithNSString:(NSString *)value {
  id<EduStanfordNlpLingLabel> lab = [self label];
  if (lab != nil) {
    [lab setValueWithNSString:value];
  }
}

- (void)setFromStringWithNSString:(NSString *)labelStr {
  id<EduStanfordNlpLingLabel> lab = [self label];
  if (lab != nil) {
    [lab setFromStringWithNSString:labelStr];
  }
}

- (id<EduStanfordNlpLingLabelFactory>)labelFactory {
  id<EduStanfordNlpLingLabel> lab = [self label];
  if (lab == nil) {
    return nil;
  }
  return [lab labelFactory];
}

- (jint)leftCharEdgeWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)node {
  EduStanfordNlpUtilMutableInteger *i = new_EduStanfordNlpUtilMutableInteger_initWithInt_(0);
  if (EduStanfordNlpTreesTree_leftCharEdgeWithEduStanfordNlpTreesTree_withEduStanfordNlpUtilMutableInteger_(self, node, i)) {
    return [i intValue];
  }
  return -1;
}

- (jboolean)leftCharEdgeWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)node
               withEduStanfordNlpUtilMutableInteger:(EduStanfordNlpUtilMutableInteger *)i {
  return EduStanfordNlpTreesTree_leftCharEdgeWithEduStanfordNlpTreesTree_withEduStanfordNlpUtilMutableInteger_(self, node, i);
}

- (jint)rightCharEdgeWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)node {
  id<JavaUtilList> s = [self getLeaves];
  jint length = 0;
  for (EduStanfordNlpTreesTree * __strong leaf in nil_chk(s)) {
    length += ((jint) [((NSString *) nil_chk([((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(leaf)) label])) value])) length]);
  }
  EduStanfordNlpUtilMutableInteger *i = new_EduStanfordNlpUtilMutableInteger_initWithInt_(length);
  if (EduStanfordNlpTreesTree_rightCharEdgeWithEduStanfordNlpTreesTree_withEduStanfordNlpUtilMutableInteger_(self, node, i)) {
    return [i intValue];
  }
  return -1;
}

- (jboolean)rightCharEdgeWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)node
                withEduStanfordNlpUtilMutableInteger:(EduStanfordNlpUtilMutableInteger *)i {
  return EduStanfordNlpTreesTree_rightCharEdgeWithEduStanfordNlpTreesTree_withEduStanfordNlpUtilMutableInteger_(self, node, i);
}

- (jint)nodeNumberWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)root {
  EduStanfordNlpUtilMutableInteger *i = new_EduStanfordNlpUtilMutableInteger_initWithInt_(1);
  if (EduStanfordNlpTreesTree_nodeNumberHelperWithEduStanfordNlpTreesTree_withEduStanfordNlpUtilMutableInteger_(self, root, i)) return [i intValue];
  return -1;
}

- (jboolean)nodeNumberHelperWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
                   withEduStanfordNlpUtilMutableInteger:(EduStanfordNlpUtilMutableInteger *)i {
  return EduStanfordNlpTreesTree_nodeNumberHelperWithEduStanfordNlpTreesTree_withEduStanfordNlpUtilMutableInteger_(self, t, i);
}

- (EduStanfordNlpTreesTree *)getNodeNumberWithInt:(jint)i {
  return EduStanfordNlpTreesTree_getNodeNumberHelperWithEduStanfordNlpUtilMutableInteger_withInt_(self, new_EduStanfordNlpUtilMutableInteger_initWithInt_(1), i);
}

- (EduStanfordNlpTreesTree *)getNodeNumberHelperWithEduStanfordNlpUtilMutableInteger:(EduStanfordNlpUtilMutableInteger *)i
                                                                             withInt:(jint)target {
  return EduStanfordNlpTreesTree_getNodeNumberHelperWithEduStanfordNlpUtilMutableInteger_withInt_(self, i, target);
}

- (void)indexLeaves {
  [self indexLeavesWithInt:1 withBoolean:false];
}

- (void)indexLeavesWithBoolean:(jboolean)overWrite {
  [self indexLeavesWithInt:1 withBoolean:overWrite];
}

- (jint)indexLeavesWithInt:(jint)startIndex
               withBoolean:(jboolean)overWrite {
  if ([self isLeaf]) {
    if ([EduStanfordNlpLingHasIndex_class_() isInstance:[self label]]) {
      id<EduStanfordNlpLingHasIndex> hi = (id<EduStanfordNlpLingHasIndex>) cast_check([self label], EduStanfordNlpLingHasIndex_class_());
      jint oldIndex = [((id<EduStanfordNlpLingHasIndex>) nil_chk(hi)) index];
      if (!overWrite && oldIndex >= 0) {
        startIndex = oldIndex;
      }
      else {
        [hi setIndexWithInt:startIndex];
      }
      startIndex++;
    }
  }
  else {
    {
      IOSObjectArray *a__ = [self children];
      EduStanfordNlpTreesTree * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        EduStanfordNlpTreesTree *kid = *b__++;
        startIndex = [((EduStanfordNlpTreesTree *) nil_chk(kid)) indexLeavesWithInt:startIndex withBoolean:overWrite];
      }
    }
  }
  return startIndex;
}

- (void)percolateHeadIndices {
  if ([self isPreTerminal]) {
    jint nodeIndex = [((id<EduStanfordNlpLingHasIndex>) nil_chk(((id<EduStanfordNlpLingHasIndex>) cast_check([((EduStanfordNlpTreesTree *) nil_chk([self firstChild])) label], EduStanfordNlpLingHasIndex_class_())))) index];
    [((id<EduStanfordNlpLingHasIndex>) nil_chk(((id<EduStanfordNlpLingHasIndex>) cast_check([self label], EduStanfordNlpLingHasIndex_class_())))) setIndexWithInt:nodeIndex];
    return;
  }
  NSString *wordAnnotation = [((id<EduStanfordNlpLingHasWord>) nil_chk(((id<EduStanfordNlpLingHasWord>) cast_check([self label], EduStanfordNlpLingHasWord_class_())))) word];
  if (wordAnnotation == nil) {
    wordAnnotation = [self value];
  }
  jboolean seenHead = false;
  {
    IOSObjectArray *a__ = [self children];
    EduStanfordNlpTreesTree * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      EduStanfordNlpTreesTree *child = *b__++;
      [((EduStanfordNlpTreesTree *) nil_chk(child)) percolateHeadIndices];
      NSString *childWordAnnotation = [((id<EduStanfordNlpLingHasWord>) nil_chk(((id<EduStanfordNlpLingHasWord>) cast_check([child label], EduStanfordNlpLingHasWord_class_())))) word];
      if (childWordAnnotation == nil) {
        childWordAnnotation = [child value];
      }
      if (!seenHead && [((NSString *) nil_chk(wordAnnotation)) isEqual:childWordAnnotation]) {
        seenHead = true;
        jint nodeIndex = [((id<EduStanfordNlpLingHasIndex>) nil_chk(((id<EduStanfordNlpLingHasIndex>) cast_check([child label], EduStanfordNlpLingHasIndex_class_())))) index];
        [((id<EduStanfordNlpLingHasIndex>) nil_chk(((id<EduStanfordNlpLingHasIndex>) cast_check([self label], EduStanfordNlpLingHasIndex_class_())))) setIndexWithInt:nodeIndex];
      }
    }
  }
}

- (void)indexSpans {
  [self indexSpansWithInt:0];
}

- (void)indexSpansWithInt:(jint)startIndex {
  (void) [self indexSpansWithEduStanfordNlpUtilMutableInteger:new_EduStanfordNlpUtilMutableInteger_initWithInt_(startIndex)];
}

- (EduStanfordNlpUtilPair *)indexSpansWithEduStanfordNlpUtilMutableInteger:(EduStanfordNlpUtilMutableInteger *)startIndex {
  jint start = JavaLangInteger_MAX_VALUE;
  jint end = JavaLangInteger_MIN_VALUE;
  if ([self isLeaf]) {
    start = [((EduStanfordNlpUtilMutableInteger *) nil_chk(startIndex)) intValue];
    end = [startIndex intValue] + 1;
    [startIndex incValueWithInt:1];
  }
  else {
    {
      IOSObjectArray *a__ = [self children];
      EduStanfordNlpTreesTree * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        EduStanfordNlpTreesTree *kid = *b__++;
        EduStanfordNlpUtilPair *span = [((EduStanfordNlpTreesTree *) nil_chk(kid)) indexSpansWithEduStanfordNlpUtilMutableInteger:startIndex];
        if ([((JavaLangInteger *) nil_chk(((EduStanfordNlpUtilPair *) nil_chk(span))->first_)) intValue] < start) start = [((JavaLangInteger *) span->first_) intValue];
        if ([((JavaLangInteger *) nil_chk(span->second_)) intValue] > end) end = [((JavaLangInteger *) span->second_) intValue];
      }
    }
  }
  id<EduStanfordNlpLingLabel> label = [self label];
  if ([EduStanfordNlpUtilCoreMap_class_() isInstance:label]) {
    id<EduStanfordNlpUtilCoreMap> afl = (id<EduStanfordNlpUtilCoreMap>) cast_check([self label], EduStanfordNlpUtilCoreMap_class_());
    (void) [((id<EduStanfordNlpUtilCoreMap>) nil_chk(afl)) setWithIOSClass:EduStanfordNlpLingCoreAnnotations_BeginIndexAnnotation_class_() withId:JavaLangInteger_valueOfWithInt_(start)];
    (void) [afl setWithIOSClass:EduStanfordNlpLingCoreAnnotations_EndIndexAnnotation_class_() withId:JavaLangInteger_valueOfWithInt_(end)];
  }
  return new_EduStanfordNlpUtilPair_initWithId_withId_(JavaLangInteger_valueOfWithInt_(start), JavaLangInteger_valueOfWithInt_(end));
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "[LEduStanfordNlpTreesTree;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 5, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 8, -1, 9, -1, -1 },
    { NULL, "LEduStanfordNlpLingLabel;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x1, 14, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpUtilIntPair;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 15, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, 16, 17, -1, 18, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, 16, 19, -1, 20, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, 16, 21, -1, 22, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, 16, 23, -1, 24, -1, -1 },
    { NULL, "I", 0x2, 25, 26, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 16, 27, -1, 28, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 29, -1, -1 },
    { NULL, "LJavaLangStringBuilder;", 0x1, 30, 31, -1, -1, -1, -1 },
    { NULL, "LJavaLangStringBuilder;", 0x1, 30, 32, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 33, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 34, 26, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 35, 36, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 37, 38, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 37, 39, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 40, 38, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 40, 39, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 41, 42, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 43, 44, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 45, 36, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 45, 38, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 45, 46, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 45, 47, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 48, 4, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x1, 49, 50, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x1, 49, 51, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x1, 52, 51, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 53, 51, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 54, 51, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 55, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, 56, 57, -1, 58, -1, -1 },
    { NULL, "LEduStanfordNlpLingLabel;", 0xa, 59, 60, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, 56, 61, -1, 62, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, 63, 64, -1, 65, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, 63, 66, -1, 67, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x1, -1, -1, -1, 68, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x1, 69, 70, -1, 71, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x1, -1, -1, -1, 72, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x1, 73, 70, -1, 74, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x1, -1, -1, -1, 75, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x1, 76, 70, -1, 77, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 69, 8, -1, 78, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x1, -1, -1, -1, 79, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 80, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 81, 8, -1, 82, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 83, 8, -1, 84, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 85, -1, -1 },
    { NULL, "I", 0x2, 86, 87, -1, 88, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 89, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 90, 8, -1, 91, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 92, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 93, 8, -1, 94, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, -1, -1, -1, 95, -1, -1 },
    { NULL, "V", 0x1, 96, 97, -1, 98, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x1, 99, 100, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 29, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 5, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, 101, 97, -1, 102, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x1, 103, 100, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x1, 103, 104, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x1, 105, 100, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x1, 106, 104, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x1, 107, 108, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x1, 107, 109, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x1, 110, 57, -1, 111, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x1, 110, 112, -1, 113, -1, -1 },
    { NULL, "LJavaUtilList;", 0x2, 114, 112, -1, 115, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x1, 116, 57, -1, 111, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x1, 116, 112, -1, 113, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTreeFactory;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x1, 117, 4, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0xa, 118, 119, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x1, 120, 121, -1, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 122, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 5, -1, -1 },
    { NULL, "V", 0xa, 123, 124, -1, 125, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 5, -1, -1 },
    { NULL, "V", 0xa, 126, 124, -1, 125, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x9, 127, 128, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x9, 127, 129, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x1, 130, 26, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x1, 131, 26, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 132, 121, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 132, 4, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x1, 133, 121, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 134, 4, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 135, 4, -1, 136, -1, -1 },
    { NULL, "[LEduStanfordNlpTreesTree;", 0x2, 137, 138, -1, -1, -1, -1 },
    { NULL, "[LEduStanfordNlpTreesTree;", 0x2, 135, 138, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 139, 140, -1, 141, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x1, 142, 140, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 143, 140, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 144, 4, -1, 136, -1, -1 },
    { NULL, "V", 0x1, 145, 138, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 146, 128, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 147, 128, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingLabelFactory;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 148, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 148, 149, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 150, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 150, 149, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 151, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 152, 149, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x1, 153, 26, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x2, 154, 155, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 156, 157, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 156, 158, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 159, 26, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpUtilPair;", 0x1, 159, 160, -1, 161, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(isLeaf);
  methods[2].selector = @selector(numChildren);
  methods[3].selector = @selector(isUnaryRewrite);
  methods[4].selector = @selector(isPreTerminal);
  methods[5].selector = @selector(isPrePreTerminal);
  methods[6].selector = @selector(isPhrasal);
  methods[7].selector = @selector(isEqual:);
  methods[8].selector = @selector(hash);
  methods[9].selector = @selector(objectIndexOfWithEduStanfordNlpTreesTree:);
  methods[10].selector = @selector(children);
  methods[11].selector = @selector(getChildrenAsList);
  methods[12].selector = @selector(setChildrenWithEduStanfordNlpTreesTreeArray:);
  methods[13].selector = @selector(setChildrenWithJavaUtilList:);
  methods[14].selector = @selector(label);
  methods[15].selector = @selector(setLabelWithEduStanfordNlpLingLabel:);
  methods[16].selector = @selector(score);
  methods[17].selector = @selector(setScoreWithDouble:);
  methods[18].selector = @selector(firstChild);
  methods[19].selector = @selector(lastChild);
  methods[20].selector = @selector(upperMostUnaryWithEduStanfordNlpTreesTree:);
  methods[21].selector = @selector(setSpans);
  methods[22].selector = @selector(getSpan);
  methods[23].selector = @selector(constituents);
  methods[24].selector = @selector(constituentsWithEduStanfordNlpTreesConstituentFactory:);
  methods[25].selector = @selector(constituentsWithEduStanfordNlpTreesConstituentFactory:withInt:);
  methods[26].selector = @selector(constituentsWithEduStanfordNlpTreesConstituentFactory:withBoolean:);
  methods[27].selector = @selector(constituentsWithEduStanfordNlpTreesConstituentFactory:withBoolean:withJavaUtilFunctionPredicate:);
  methods[28].selector = @selector(constituentsNodesWithInt:);
  methods[29].selector = @selector(constituentsWithJavaUtilSet:withInt:withEduStanfordNlpTreesConstituentFactory:withBoolean:withJavaUtilFunctionPredicate:withInt:withInt:);
  methods[30].selector = @selector(localTree);
  methods[31].selector = @selector(localTrees);
  methods[32].selector = @selector(toStringBuilderWithJavaLangStringBuilder:);
  methods[33].selector = @selector(toStringBuilderWithJavaLangStringBuilder:withBoolean:);
  methods[34].selector = @selector(description);
  methods[35].selector = @selector(makeIndentStringWithInt:);
  methods[36].selector = @selector(printLocalTree);
  methods[37].selector = @selector(printLocalTreeWithJavaIoPrintWriter:);
  methods[38].selector = @selector(indentedListPrint);
  methods[39].selector = @selector(indentedListPrintWithJavaIoPrintWriter:withBoolean:);
  methods[40].selector = @selector(indentedListPrintWithNSString:withNSString:withJavaIoPrintWriter:withBoolean:);
  methods[41].selector = @selector(indentedXMLPrint);
  methods[42].selector = @selector(indentedXMLPrintWithJavaIoPrintWriter:withBoolean:);
  methods[43].selector = @selector(indentedXMLPrintWithNSString:withNSString:withJavaIoPrintWriter:withBoolean:);
  methods[44].selector = @selector(displayChildrenWithEduStanfordNlpTreesTreeArray:withInt:withBoolean:withBoolean:withJavaIoPrintWriter:);
  methods[45].selector = @selector(nodeString);
  methods[46].selector = @selector(displayWithInt:withBoolean:withBoolean:withBoolean:withBoolean:withBoolean:withJavaIoPrintWriter:);
  methods[47].selector = @selector(pennPrintWithJavaIoPrintWriter:);
  methods[48].selector = @selector(pennPrintWithJavaIoPrintWriter:withBoolean:);
  methods[49].selector = @selector(pennPrintWithJavaIoPrintStream:);
  methods[50].selector = @selector(pennPrintWithJavaIoPrintStream:withBoolean:);
  methods[51].selector = @selector(pennString);
  methods[52].selector = @selector(pennPrint);
  methods[53].selector = @selector(depth);
  methods[54].selector = @selector(depthWithEduStanfordNlpTreesTree:);
  methods[55].selector = @selector(headTerminalWithEduStanfordNlpTreesHeadFinder:withEduStanfordNlpTreesTree:);
  methods[56].selector = @selector(headTerminalWithEduStanfordNlpTreesHeadFinder:);
  methods[57].selector = @selector(headPreTerminalWithEduStanfordNlpTreesHeadFinder:);
  methods[58].selector = @selector(percolateHeadAnnotationsWithEduStanfordNlpTreesHeadFinder:);
  methods[59].selector = @selector(percolateHeadsWithEduStanfordNlpTreesHeadFinder:);
  methods[60].selector = @selector(dependencies);
  methods[61].selector = @selector(dependenciesWithJavaUtilFunctionPredicate:);
  methods[62].selector = @selector(makeDependencyLabelWithEduStanfordNlpLingLabel:withBoolean:withBoolean:withBoolean:);
  methods[63].selector = @selector(dependenciesWithJavaUtilFunctionPredicate:withBoolean:withBoolean:withBoolean:);
  methods[64].selector = @selector(mapDependenciesWithJavaUtilFunctionPredicate:withEduStanfordNlpTreesHeadFinder:);
  methods[65].selector = @selector(mapDependenciesWithJavaUtilFunctionPredicate:withEduStanfordNlpTreesHeadFinder:withNSString:);
  methods[66].selector = @selector(yield);
  methods[67].selector = @selector(yieldWithJavaUtilArrayList:);
  methods[68].selector = @selector(yieldWords);
  methods[69].selector = @selector(yieldWordsWithJavaUtilArrayList:);
  methods[70].selector = @selector(yieldHasWord);
  methods[71].selector = @selector(yieldHasWordWithJavaUtilArrayList:);
  methods[72].selector = @selector(yieldWithJavaUtilList:);
  methods[73].selector = @selector(taggedYield);
  methods[74].selector = @selector(labeledYield);
  methods[75].selector = @selector(taggedYieldWithJavaUtilList:);
  methods[76].selector = @selector(labeledYieldWithJavaUtilList:);
  methods[77].selector = @selector(taggedLabeledYield);
  methods[78].selector = @selector(taggedLabeledYieldWithJavaUtilList:withInt:);
  methods[79].selector = @selector(preTerminalYield);
  methods[80].selector = @selector(preTerminalYieldWithJavaUtilList:);
  methods[81].selector = @selector(getLeaves);
  methods[82].selector = @selector(getLeavesWithJavaUtilList:);
  methods[83].selector = @selector(labels);
  methods[84].selector = @selector(setLabelsWithJavaUtilCollection:);
  methods[85].selector = @selector(flatten);
  methods[86].selector = @selector(flattenWithEduStanfordNlpTreesTreeFactory:);
  methods[87].selector = @selector(subTrees);
  methods[88].selector = @selector(subTreeList);
  methods[89].selector = @selector(subTreesWithJavaUtilCollection:);
  methods[90].selector = @selector(deepCopy);
  methods[91].selector = @selector(deepCopyWithEduStanfordNlpTreesTreeFactory:);
  methods[92].selector = @selector(deepCopyWithEduStanfordNlpTreesTreeFactory:withEduStanfordNlpLingLabelFactory:);
  methods[93].selector = @selector(treeSkeletonCopy);
  methods[94].selector = @selector(treeSkeletonCopyWithEduStanfordNlpTreesTreeFactory:);
  methods[95].selector = @selector(treeSkeletonConstituentCopy);
  methods[96].selector = @selector(treeSkeletonConstituentCopyWithEduStanfordNlpTreesTreeFactory:withEduStanfordNlpLingLabelFactory:);
  methods[97].selector = @selector(transformWithEduStanfordNlpTreesTreeTransformer:);
  methods[98].selector = @selector(transformWithEduStanfordNlpTreesTreeTransformer:withEduStanfordNlpTreesTreeFactory:);
  methods[99].selector = @selector(spliceOutWithJavaUtilFunctionPredicate:);
  methods[100].selector = @selector(spliceOutWithJavaUtilFunctionPredicate:withEduStanfordNlpTreesTreeFactory:);
  methods[101].selector = @selector(spliceOutHelperWithJavaUtilFunctionPredicate:withEduStanfordNlpTreesTreeFactory:);
  methods[102].selector = @selector(pruneWithJavaUtilFunctionPredicate:);
  methods[103].selector = @selector(pruneWithJavaUtilFunctionPredicate:withEduStanfordNlpTreesTreeFactory:);
  methods[104].selector = @selector(skipRoot);
  methods[105].selector = @selector(treeFactory);
  methods[106].selector = @selector(parent);
  methods[107].selector = @selector(parentWithEduStanfordNlpTreesTree:);
  methods[108].selector = @selector(parentHelperWithEduStanfordNlpTreesTree:withEduStanfordNlpTreesTreeArray:withEduStanfordNlpTreesTree:);
  methods[109].selector = @selector(size);
  methods[110].selector = @selector(ancestorWithInt:withEduStanfordNlpTreesTree:);
  methods[111].selector = @selector(iterator);
  methods[112].selector = @selector(postOrderNodeList);
  methods[113].selector = @selector(postOrderRecurseWithEduStanfordNlpTreesTree:withJavaUtilList:);
  methods[114].selector = @selector(preOrderNodeList);
  methods[115].selector = @selector(preOrderRecurseWithEduStanfordNlpTreesTree:withJavaUtilList:);
  methods[116].selector = @selector(valueOfWithNSString:);
  methods[117].selector = @selector(valueOfWithNSString:withEduStanfordNlpTreesTreeReaderFactory:);
  methods[118].selector = @selector(getChildWithInt:);
  methods[119].selector = @selector(removeChildWithInt:);
  methods[120].selector = @selector(addChildWithInt:withEduStanfordNlpTreesTree:);
  methods[121].selector = @selector(addChildWithEduStanfordNlpTreesTree:);
  methods[122].selector = @selector(setChildWithInt:withEduStanfordNlpTreesTree:);
  methods[123].selector = @selector(dominatesWithEduStanfordNlpTreesTree:);
  methods[124].selector = @selector(dominationPathWithEduStanfordNlpTreesTree:);
  methods[125].selector = @selector(dominationPathHelperWithEduStanfordNlpTreesTree:withInt:);
  methods[126].selector = @selector(dominationPathWithEduStanfordNlpTreesTree:withInt:);
  methods[127].selector = @selector(pathNodeToNodeWithEduStanfordNlpTreesTree:withEduStanfordNlpTreesTree:);
  methods[128].selector = @selector(joinNodeWithEduStanfordNlpTreesTree:withEduStanfordNlpTreesTree:);
  methods[129].selector = @selector(cCommandsWithEduStanfordNlpTreesTree:withEduStanfordNlpTreesTree:);
  methods[130].selector = @selector(siblingsWithEduStanfordNlpTreesTree:);
  methods[131].selector = @selector(insertDtrWithEduStanfordNlpTreesTree:withInt:);
  methods[132].selector = @selector(value);
  methods[133].selector = @selector(setValueWithNSString:);
  methods[134].selector = @selector(setFromStringWithNSString:);
  methods[135].selector = @selector(labelFactory);
  methods[136].selector = @selector(leftCharEdgeWithEduStanfordNlpTreesTree:);
  methods[137].selector = @selector(leftCharEdgeWithEduStanfordNlpTreesTree:withEduStanfordNlpUtilMutableInteger:);
  methods[138].selector = @selector(rightCharEdgeWithEduStanfordNlpTreesTree:);
  methods[139].selector = @selector(rightCharEdgeWithEduStanfordNlpTreesTree:withEduStanfordNlpUtilMutableInteger:);
  methods[140].selector = @selector(nodeNumberWithEduStanfordNlpTreesTree:);
  methods[141].selector = @selector(nodeNumberHelperWithEduStanfordNlpTreesTree:withEduStanfordNlpUtilMutableInteger:);
  methods[142].selector = @selector(getNodeNumberWithInt:);
  methods[143].selector = @selector(getNodeNumberHelperWithEduStanfordNlpUtilMutableInteger:withInt:);
  methods[144].selector = @selector(indexLeaves);
  methods[145].selector = @selector(indexLeavesWithBoolean:);
  methods[146].selector = @selector(indexLeavesWithInt:withBoolean:);
  methods[147].selector = @selector(percolateHeadIndices);
  methods[148].selector = @selector(indexSpans);
  methods[149].selector = @selector(indexSpansWithInt:);
  methods[150].selector = @selector(indexSpansWithEduStanfordNlpUtilMutableInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpTreesTree_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "EMPTY_TREE_ARRAY", "[LEduStanfordNlpTreesTree;", .constantValue.asLong = 0, 0x19, -1, 162, -1, -1 },
    { "initialPrintStringBuilderSize", "I", .constantValue.asInt = EduStanfordNlpTreesTree_initialPrintStringBuilderSize, 0x1a, -1, -1, -1, -1 },
    { "indentIncr", "I", .constantValue.asInt = EduStanfordNlpTreesTree_indentIncr, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "equals", "LNSObject;", "hashCode", "objectIndexOf", "LEduStanfordNlpTreesTree;", "()Ljava/util/List<Ledu/stanford/nlp/trees/Tree;>;", "setChildren", "[LEduStanfordNlpTreesTree;", "LJavaUtilList;", "(Ljava/util/List<+Ledu/stanford/nlp/trees/Tree;>;)V", "setLabel", "LEduStanfordNlpLingLabel;", "setScore", "D", "upperMostUnary", "()Ljava/util/Set<Ledu/stanford/nlp/trees/Constituent;>;", "constituents", "LEduStanfordNlpTreesConstituentFactory;", "(Ledu/stanford/nlp/trees/ConstituentFactory;)Ljava/util/Set<Ledu/stanford/nlp/trees/Constituent;>;", "LEduStanfordNlpTreesConstituentFactory;I", "(Ledu/stanford/nlp/trees/ConstituentFactory;I)Ljava/util/Set<Ledu/stanford/nlp/trees/Constituent;>;", "LEduStanfordNlpTreesConstituentFactory;Z", "(Ledu/stanford/nlp/trees/ConstituentFactory;Z)Ljava/util/Set<Ledu/stanford/nlp/trees/Constituent;>;", "LEduStanfordNlpTreesConstituentFactory;ZLJavaUtilFunctionPredicate;", "(Ledu/stanford/nlp/trees/ConstituentFactory;ZLjava/util/function/Predicate<Ledu/stanford/nlp/trees/Tree;>;)Ljava/util/Set<Ledu/stanford/nlp/trees/Constituent;>;", "constituentsNodes", "I", "LJavaUtilSet;ILEduStanfordNlpTreesConstituentFactory;ZLJavaUtilFunctionPredicate;II", "(Ljava/util/Set<Ledu/stanford/nlp/trees/Constituent;>;ILedu/stanford/nlp/trees/ConstituentFactory;ZLjava/util/function/Predicate<Ledu/stanford/nlp/trees/Tree;>;II)I", "()Ljava/util/Set<Ledu/stanford/nlp/trees/Tree;>;", "toStringBuilder", "LJavaLangStringBuilder;", "LJavaLangStringBuilder;Z", "toString", "makeIndentString", "printLocalTree", "LJavaIoPrintWriter;", "indentedListPrint", "LJavaIoPrintWriter;Z", "LNSString;LNSString;LJavaIoPrintWriter;Z", "indentedXMLPrint", "displayChildren", "[LEduStanfordNlpTreesTree;IZZLJavaIoPrintWriter;", "display", "IZZZZZLJavaIoPrintWriter;", "pennPrint", "LJavaIoPrintStream;", "LJavaIoPrintStream;Z", "depth", "headTerminal", "LEduStanfordNlpTreesHeadFinder;LEduStanfordNlpTreesTree;", "LEduStanfordNlpTreesHeadFinder;", "headPreTerminal", "percolateHeadAnnotations", "percolateHeads", "()Ljava/util/Set<Ledu/stanford/nlp/trees/Dependency<Ledu/stanford/nlp/ling/Label;Ledu/stanford/nlp/ling/Label;Ljava/lang/Object;>;>;", "dependencies", "LJavaUtilFunctionPredicate;", "(Ljava/util/function/Predicate<Ledu/stanford/nlp/trees/Dependency<Ledu/stanford/nlp/ling/Label;Ledu/stanford/nlp/ling/Label;Ljava/lang/Object;>;>;)Ljava/util/Set<Ledu/stanford/nlp/trees/Dependency<Ledu/stanford/nlp/ling/Label;Ledu/stanford/nlp/ling/Label;Ljava/lang/Object;>;>;", "makeDependencyLabel", "LEduStanfordNlpLingLabel;ZZZ", "LJavaUtilFunctionPredicate;ZZZ", "(Ljava/util/function/Predicate<Ledu/stanford/nlp/trees/Dependency<Ledu/stanford/nlp/ling/Label;Ledu/stanford/nlp/ling/Label;Ljava/lang/Object;>;>;ZZZ)Ljava/util/Set<Ledu/stanford/nlp/trees/Dependency<Ledu/stanford/nlp/ling/Label;Ledu/stanford/nlp/ling/Label;Ljava/lang/Object;>;>;", "mapDependencies", "LJavaUtilFunctionPredicate;LEduStanfordNlpTreesHeadFinder;", "(Ljava/util/function/Predicate<Ledu/stanford/nlp/trees/Dependency<Ledu/stanford/nlp/ling/Label;Ledu/stanford/nlp/ling/Label;Ljava/lang/Object;>;>;Ledu/stanford/nlp/trees/HeadFinder;)Ljava/util/Set<Ledu/stanford/nlp/trees/Dependency<Ledu/stanford/nlp/ling/Label;Ledu/stanford/nlp/ling/Label;Ljava/lang/Object;>;>;", "LJavaUtilFunctionPredicate;LEduStanfordNlpTreesHeadFinder;LNSString;", "(Ljava/util/function/Predicate<Ledu/stanford/nlp/trees/Dependency<Ledu/stanford/nlp/ling/Label;Ledu/stanford/nlp/ling/Label;Ljava/lang/Object;>;>;Ledu/stanford/nlp/trees/HeadFinder;Ljava/lang/String;)Ljava/util/Set<Ledu/stanford/nlp/trees/Dependency<Ledu/stanford/nlp/ling/Label;Ledu/stanford/nlp/ling/Label;Ljava/lang/Object;>;>;", "()Ljava/util/ArrayList<Ledu/stanford/nlp/ling/Label;>;", "yield", "LJavaUtilArrayList;", "(Ljava/util/ArrayList<Ledu/stanford/nlp/ling/Label;>;)Ljava/util/ArrayList<Ledu/stanford/nlp/ling/Label;>;", "()Ljava/util/ArrayList<Ledu/stanford/nlp/ling/Word;>;", "yieldWords", "(Ljava/util/ArrayList<Ledu/stanford/nlp/ling/Word;>;)Ljava/util/ArrayList<Ledu/stanford/nlp/ling/Word;>;", "<X::Ledu/stanford/nlp/ling/HasWord;>()Ljava/util/ArrayList<TX;>;", "yieldHasWord", "<X::Ledu/stanford/nlp/ling/HasWord;>(Ljava/util/ArrayList<TX;>;)Ljava/util/ArrayList<TX;>;", "<T:Ljava/lang/Object;>(Ljava/util/List<TT;>;)Ljava/util/List<TT;>;", "()Ljava/util/ArrayList<Ledu/stanford/nlp/ling/TaggedWord;>;", "()Ljava/util/List<Ledu/stanford/nlp/ling/LabeledWord;>;", "taggedYield", "<X::Ljava/util/List<Ledu/stanford/nlp/ling/TaggedWord;>;>(TX;)TX;", "labeledYield", "(Ljava/util/List<Ledu/stanford/nlp/ling/LabeledWord;>;)Ljava/util/List<Ledu/stanford/nlp/ling/LabeledWord;>;", "()Ljava/util/List<Ledu/stanford/nlp/ling/CoreLabel;>;", "taggedLabeledYield", "LJavaUtilList;I", "(Ljava/util/List<Ledu/stanford/nlp/ling/CoreLabel;>;I)I", "()Ljava/util/List<Ledu/stanford/nlp/ling/Label;>;", "preTerminalYield", "(Ljava/util/List<Ledu/stanford/nlp/ling/Label;>;)Ljava/util/List<Ledu/stanford/nlp/ling/Label;>;", "<T:Ledu/stanford/nlp/trees/Tree;>()Ljava/util/List<TT;>;", "getLeaves", "<T:Ledu/stanford/nlp/trees/Tree;>(Ljava/util/List<TT;>;)Ljava/util/List<TT;>;", "()Ljava/util/Collection<Ledu/stanford/nlp/ling/Label;>;", "setLabels", "LJavaUtilCollection;", "(Ljava/util/Collection<Ledu/stanford/nlp/ling/Label;>;)V", "flatten", "LEduStanfordNlpTreesTreeFactory;", "subTrees", "<T::Ljava/util/Collection<Ledu/stanford/nlp/trees/Tree;>;>(TT;)TT;", "deepCopy", "LEduStanfordNlpTreesTreeFactory;LEduStanfordNlpLingLabelFactory;", "treeSkeletonCopy", "treeSkeletonConstituentCopy", "transform", "LEduStanfordNlpTreesTreeTransformer;", "LEduStanfordNlpTreesTreeTransformer;LEduStanfordNlpTreesTreeFactory;", "spliceOut", "(Ljava/util/function/Predicate<Ledu/stanford/nlp/trees/Tree;>;)Ledu/stanford/nlp/trees/Tree;", "LJavaUtilFunctionPredicate;LEduStanfordNlpTreesTreeFactory;", "(Ljava/util/function/Predicate<Ledu/stanford/nlp/trees/Tree;>;Ledu/stanford/nlp/trees/TreeFactory;)Ledu/stanford/nlp/trees/Tree;", "spliceOutHelper", "(Ljava/util/function/Predicate<Ledu/stanford/nlp/trees/Tree;>;Ledu/stanford/nlp/trees/TreeFactory;)Ljava/util/List<Ledu/stanford/nlp/trees/Tree;>;", "prune", "parent", "parentHelper", "LEduStanfordNlpTreesTree;[LEduStanfordNlpTreesTree;LEduStanfordNlpTreesTree;", "ancestor", "ILEduStanfordNlpTreesTree;", "()Ljava/util/Iterator<Ledu/stanford/nlp/trees/Tree;>;", "postOrderRecurse", "LEduStanfordNlpTreesTree;LJavaUtilList;", "(Ledu/stanford/nlp/trees/Tree;Ljava/util/List<Ledu/stanford/nlp/trees/Tree;>;)V", "preOrderRecurse", "valueOf", "LNSString;", "LNSString;LEduStanfordNlpTreesTreeReaderFactory;", "getChild", "removeChild", "addChild", "setChild", "dominates", "dominationPath", "(Ledu/stanford/nlp/trees/Tree;)Ljava/util/List<Ledu/stanford/nlp/trees/Tree;>;", "dominationPathHelper", "LEduStanfordNlpTreesTree;I", "pathNodeToNode", "LEduStanfordNlpTreesTree;LEduStanfordNlpTreesTree;", "(Ledu/stanford/nlp/trees/Tree;Ledu/stanford/nlp/trees/Tree;)Ljava/util/List<Ledu/stanford/nlp/trees/Tree;>;", "joinNode", "cCommands", "siblings", "insertDtr", "setValue", "setFromString", "leftCharEdge", "LEduStanfordNlpTreesTree;LEduStanfordNlpUtilMutableInteger;", "rightCharEdge", "nodeNumber", "nodeNumberHelper", "getNodeNumber", "getNodeNumberHelper", "LEduStanfordNlpUtilMutableInteger;I", "indexLeaves", "Z", "IZ", "indexSpans", "LEduStanfordNlpUtilMutableInteger;", "(Ledu/stanford/nlp/util/MutableInteger;)Ledu/stanford/nlp/util/Pair<Ljava/lang/Integer;Ljava/lang/Integer;>;", &EduStanfordNlpTreesTree_EMPTY_TREE_ARRAY, "LEduStanfordNlpTreesTree_TreeIterator;", "Ljava/util/AbstractCollection<Ledu/stanford/nlp/trees/Tree;>;Ledu/stanford/nlp/ling/Label;Ledu/stanford/nlp/trees/Labeled;Ledu/stanford/nlp/util/Scored;Ljava/io/Serializable;" };
  static const J2ObjcClassInfo _EduStanfordNlpTreesTree = { "Tree", "edu.stanford.nlp.trees", ptrTable, methods, fields, 7, 0x401, 151, 4, -1, 163, -1, 164, -1 };
  return &_EduStanfordNlpTreesTree;
}

+ (void)initialize {
  if (self == [EduStanfordNlpTreesTree class]) {
    EduStanfordNlpTreesTree_EMPTY_TREE_ARRAY = [IOSObjectArray newArrayWithLength:0 type:EduStanfordNlpTreesTree_class_()];
    J2OBJC_SET_INITIALIZED(EduStanfordNlpTreesTree)
  }
}

@end

void EduStanfordNlpTreesTree_init(EduStanfordNlpTreesTree *self) {
  JavaUtilAbstractCollection_init(self);
}

jint EduStanfordNlpTreesTree_constituentsNodesWithInt_(EduStanfordNlpTreesTree *self, jint left) {
  if ([self isLeaf]) {
    if ([[self label] isKindOfClass:[EduStanfordNlpLingCoreLabel class]]) {
      (void) [((EduStanfordNlpLingCoreLabel *) nil_chk(((EduStanfordNlpLingCoreLabel *) cast_chk([self label], [EduStanfordNlpLingCoreLabel class])))) setWithIOSClass:EduStanfordNlpLingCoreAnnotations_SpanAnnotation_class_() withId:new_EduStanfordNlpUtilIntPair_initWithInt_withInt_(left, left)];
    }
    else {
      @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"Can only set spans on trees which use CoreLabel");
    }
    return (left + 1);
  }
  jint position = left;
  IOSObjectArray *kids = [self children];
  {
    IOSObjectArray *a__ = kids;
    EduStanfordNlpTreesTree * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      EduStanfordNlpTreesTree *kid = *b__++;
      position = EduStanfordNlpTreesTree_constituentsNodesWithInt_(nil_chk(kid), position);
    }
  }
  if ([[self label] isKindOfClass:[EduStanfordNlpLingCoreLabel class]]) {
    (void) [((EduStanfordNlpLingCoreLabel *) nil_chk(((EduStanfordNlpLingCoreLabel *) cast_chk([self label], [EduStanfordNlpLingCoreLabel class])))) setWithIOSClass:EduStanfordNlpLingCoreAnnotations_SpanAnnotation_class_() withId:new_EduStanfordNlpUtilIntPair_initWithInt_withInt_(left, position - 1)];
  }
  else {
    @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"Can only set spans on trees which use CoreLabel");
  }
  return position;
}

jint EduStanfordNlpTreesTree_constituentsWithJavaUtilSet_withInt_withEduStanfordNlpTreesConstituentFactory_withBoolean_withJavaUtilFunctionPredicate_withInt_withInt_(EduStanfordNlpTreesTree *self, id<JavaUtilSet> constituentsSet, jint left, id<EduStanfordNlpTreesConstituentFactory> cf, jboolean charLevel, id<JavaUtilFunctionPredicate> filter, jint maxDepth, jint depth) {
  if ([self isPreTerminal]) return left + ((charLevel) ? ((jint) [((NSString *) nil_chk([((EduStanfordNlpTreesTree *) nil_chk([self firstChild])) value])) length]) : 1);
  jint position = left;
  IOSObjectArray *kids = [self children];
  {
    IOSObjectArray *a__ = kids;
    EduStanfordNlpTreesTree * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      EduStanfordNlpTreesTree *kid = *b__++;
      position = EduStanfordNlpTreesTree_constituentsWithJavaUtilSet_withInt_withEduStanfordNlpTreesConstituentFactory_withBoolean_withJavaUtilFunctionPredicate_withInt_withInt_(nil_chk(kid), constituentsSet, position, cf, charLevel, filter, maxDepth, depth + 1);
    }
  }
  if ((filter == nil || [filter testWithId:self]) && (maxDepth < 0 || depth <= maxDepth)) {
    [((id<JavaUtilSet>) nil_chk(constituentsSet)) addWithId:[((id<EduStanfordNlpTreesConstituentFactory>) nil_chk(cf)) newConstituentWithInt:left withInt:position - 1 withEduStanfordNlpLingLabel:[self label] withDouble:[self score]]];
  }
  return position;
}

NSString *EduStanfordNlpTreesTree_makeIndentStringWithInt_(jint indent) {
  EduStanfordNlpTreesTree_initialize();
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_initWithInt_(indent);
  for (jint i = 0; i < EduStanfordNlpTreesTree_indentIncr; i++) {
    (void) [sb appendWithChar:' '];
  }
  return [sb description];
}

void EduStanfordNlpTreesTree_indentedListPrintWithNSString_withNSString_withJavaIoPrintWriter_withBoolean_(EduStanfordNlpTreesTree *self, NSString *indent, NSString *pad, JavaIoPrintWriter *pw, jboolean printScores) {
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_initWithNSString_(indent);
  id<EduStanfordNlpLingLabel> label = [self label];
  if (label != nil) {
    (void) [sb appendWithNSString:[label description]];
  }
  if (printScores) {
    (void) [sb appendWithNSString:@"  "];
    (void) [sb appendWithDouble:[self score]];
  }
  [((JavaIoPrintWriter *) nil_chk(pw)) printlnWithNSString:[sb description]];
  IOSObjectArray *children = [self children];
  NSString *newIndent = JreStrcat("$$", indent, pad);
  {
    IOSObjectArray *a__ = children;
    EduStanfordNlpTreesTree * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      EduStanfordNlpTreesTree *child = *b__++;
      EduStanfordNlpTreesTree_indentedListPrintWithNSString_withNSString_withJavaIoPrintWriter_withBoolean_(nil_chk(child), newIndent, pad, pw, printScores);
    }
  }
}

void EduStanfordNlpTreesTree_indentedXMLPrintWithNSString_withNSString_withJavaIoPrintWriter_withBoolean_(EduStanfordNlpTreesTree *self, NSString *indent, NSString *pad, JavaIoPrintWriter *pw, jboolean printScores) {
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_initWithNSString_(indent);
  IOSObjectArray *children = [self children];
  id<EduStanfordNlpLingLabel> label = [self label];
  if (label != nil) {
    (void) [sb appendWithNSString:@"<"];
    if (((IOSObjectArray *) nil_chk(children))->size_ > 0) {
      (void) [sb appendWithNSString:@"node value=\""];
    }
    else {
      (void) [sb appendWithNSString:@"leaf value=\""];
    }
    (void) [sb appendWithNSString:EduStanfordNlpUtilXMLUtils_escapeXMLWithNSString_(EduStanfordNlpLingSentence_wordToStringWithId_withBoolean_(label, true))];
    (void) [sb appendWithNSString:@"\""];
    if (printScores) {
      (void) [sb appendWithNSString:@" score="];
      (void) [sb appendWithDouble:[self score]];
    }
    if (children->size_ > 0) {
      (void) [sb appendWithNSString:@">"];
    }
    else {
      (void) [sb appendWithNSString:@"/>"];
    }
  }
  else {
    if (((IOSObjectArray *) nil_chk(children))->size_ > 0) {
      (void) [sb appendWithNSString:@"<node>"];
    }
    else {
      (void) [sb appendWithNSString:@"<leaf/>"];
    }
  }
  [((JavaIoPrintWriter *) nil_chk(pw)) printlnWithNSString:[sb description]];
  if (children->size_ > 0) {
    NSString *newIndent = JreStrcat("$$", indent, pad);
    {
      IOSObjectArray *a__ = children;
      EduStanfordNlpTreesTree * const *b__ = a__->buffer_;
      EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        EduStanfordNlpTreesTree *child = *b__++;
        EduStanfordNlpTreesTree_indentedXMLPrintWithNSString_withNSString_withJavaIoPrintWriter_withBoolean_(nil_chk(child), newIndent, pad, pw, printScores);
      }
    }
    [pw printlnWithNSString:JreStrcat("$$", indent, @"</node>")];
  }
}

void EduStanfordNlpTreesTree_displayChildrenWithEduStanfordNlpTreesTreeArray_withInt_withBoolean_withBoolean_withJavaIoPrintWriter_(IOSObjectArray *trChildren, jint indent, jboolean parentLabelNull, jboolean onlyLabelValue, JavaIoPrintWriter *pw) {
  EduStanfordNlpTreesTree_initialize();
  jboolean firstSibling = true;
  jboolean leftSibIsPreTerm = true;
  {
    IOSObjectArray *a__ = trChildren;
    EduStanfordNlpTreesTree * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      EduStanfordNlpTreesTree *currentTree = *b__++;
      EduStanfordNlpTreesTree_displayWithInt_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withJavaIoPrintWriter_(nil_chk(currentTree), indent, parentLabelNull, firstSibling, leftSibIsPreTerm, false, onlyLabelValue, pw);
      leftSibIsPreTerm = [currentTree isPreTerminal];
      if ([currentTree value] != nil && [((NSString *) nil_chk([currentTree value])) hasPrefix:@"CC"]) {
        leftSibIsPreTerm = false;
      }
      firstSibling = false;
    }
  }
}

void EduStanfordNlpTreesTree_displayWithInt_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withJavaIoPrintWriter_(EduStanfordNlpTreesTree *self, jint indent, jboolean parentLabelNull, jboolean firstSibling, jboolean leftSiblingPreTerminal, jboolean topLevel, jboolean onlyLabelValue, JavaIoPrintWriter *pw) {
  jboolean suppressIndent = (parentLabelNull || (firstSibling && [self isPreTerminal]) || (leftSiblingPreTerminal && [self isPreTerminal] && ([self label] == nil || ![((NSString *) nil_chk([((id<EduStanfordNlpLingLabel>) nil_chk([self label])) value])) hasPrefix:@"CC"])));
  if (suppressIndent) {
    [((JavaIoPrintWriter *) nil_chk(pw)) printWithNSString:@" "];
  }
  else {
    if (!topLevel) {
      [((JavaIoPrintWriter *) nil_chk(pw)) println];
    }
    for (jint i = 0; i < indent; i++) {
      [((JavaIoPrintWriter *) nil_chk(pw)) printWithNSString:@"  "];
    }
  }
  if ([self isLeaf] || [self isPreTerminal]) {
    NSString *terminalString = [((JavaLangStringBuilder *) nil_chk([self toStringBuilderWithJavaLangStringBuilder:new_JavaLangStringBuilder_init() withBoolean:onlyLabelValue])) description];
    [((JavaIoPrintWriter *) nil_chk(pw)) printWithNSString:terminalString];
    [pw flush];
    return;
  }
  [((JavaIoPrintWriter *) nil_chk(pw)) printWithNSString:@"("];
  NSString *nodeString;
  if (onlyLabelValue) {
    NSString *value = [self value];
    nodeString = (value == nil) ? @"" : value;
  }
  else {
    nodeString = [self nodeString];
  }
  [pw printWithNSString:nodeString];
  jboolean parentIsNull = [self label] == nil || [((id<EduStanfordNlpLingLabel>) nil_chk([self label])) value] == nil;
  EduStanfordNlpTreesTree_displayChildrenWithEduStanfordNlpTreesTreeArray_withInt_withBoolean_withBoolean_withJavaIoPrintWriter_([self children], indent + 1, parentIsNull, true, pw);
  [pw printWithNSString:@")"];
  [pw flush];
}

id<EduStanfordNlpLingLabel> EduStanfordNlpTreesTree_makeDependencyLabelWithEduStanfordNlpLingLabel_withBoolean_withBoolean_withBoolean_(id<EduStanfordNlpLingLabel> oldLabel, jboolean copyLabel, jboolean copyIndex, jboolean copyPosTag) {
  EduStanfordNlpTreesTree_initialize();
  if (!copyLabel) return oldLabel;
  NSString *wordForm = ([EduStanfordNlpLingHasWord_class_() isInstance:oldLabel]) ? [((id<EduStanfordNlpLingHasWord>) nil_chk(((id<EduStanfordNlpLingHasWord>) cast_check(oldLabel, EduStanfordNlpLingHasWord_class_())))) word] : [((id<EduStanfordNlpLingLabel>) nil_chk(oldLabel)) value];
  id<EduStanfordNlpLingLabel> newLabel = [((id<EduStanfordNlpLingLabelFactory>) nil_chk([((id<EduStanfordNlpLingLabel>) nil_chk(oldLabel)) labelFactory])) newLabelWithNSString:wordForm];
  if ([EduStanfordNlpLingHasWord_class_() isInstance:newLabel]) [((id<EduStanfordNlpLingHasWord>) nil_chk(((id<EduStanfordNlpLingHasWord>) cast_check(newLabel, EduStanfordNlpLingHasWord_class_())))) setWordWithNSString:wordForm];
  if (copyPosTag && [EduStanfordNlpLingHasTag_class_() isInstance:newLabel] && [EduStanfordNlpLingHasTag_class_() isInstance:oldLabel]) {
    NSString *tag = [((id<EduStanfordNlpLingHasTag>) cast_check(oldLabel, EduStanfordNlpLingHasTag_class_())) tag];
    [((id<EduStanfordNlpLingHasTag>) nil_chk(((id<EduStanfordNlpLingHasTag>) cast_check(newLabel, EduStanfordNlpLingHasTag_class_())))) setTagWithNSString:tag];
  }
  if (copyIndex && [EduStanfordNlpLingHasIndex_class_() isInstance:newLabel] && [EduStanfordNlpLingHasIndex_class_() isInstance:oldLabel]) {
    jint index = [((id<EduStanfordNlpLingHasIndex>) cast_check(oldLabel, EduStanfordNlpLingHasIndex_class_())) index];
    [((id<EduStanfordNlpLingHasIndex>) nil_chk(((id<EduStanfordNlpLingHasIndex>) cast_check(newLabel, EduStanfordNlpLingHasIndex_class_())))) setIndexWithInt:index];
  }
  return newLabel;
}

jint EduStanfordNlpTreesTree_taggedLabeledYieldWithJavaUtilList_withInt_(EduStanfordNlpTreesTree *self, id<JavaUtilList> ty, jint termIdx) {
  if ([self isPreTerminal]) {
    EduStanfordNlpLingCoreLabel *taggedWord = new_EduStanfordNlpLingCoreLabel_initWithEduStanfordNlpLingLabel_([((EduStanfordNlpTreesTree *) nil_chk([self firstChild])) label]);
    if ([taggedWord word] == nil) {
      [taggedWord setWordWithNSString:[((EduStanfordNlpTreesTree *) nil_chk([self firstChild])) value]];
    }
    NSString *tag = ([self value] == nil) ? @"" : [self value];
    [taggedWord setValueWithNSString:tag];
    [taggedWord setTagWithNSString:tag];
    [taggedWord setIndexWithInt:termIdx];
    [((id<JavaUtilList>) nil_chk(ty)) addWithId:taggedWord];
    return termIdx + 1;
  }
  else {
    for (EduStanfordNlpTreesTree * __strong kid in nil_chk([self getChildrenAsList])) termIdx = EduStanfordNlpTreesTree_taggedLabeledYieldWithJavaUtilList_withInt_(nil_chk(kid), ty, termIdx);
  }
  return termIdx;
}

id<JavaUtilList> EduStanfordNlpTreesTree_spliceOutHelperWithJavaUtilFunctionPredicate_withEduStanfordNlpTreesTreeFactory_(EduStanfordNlpTreesTree *self, id<JavaUtilFunctionPredicate> nodeFilter, id<EduStanfordNlpTreesTreeFactory> tf) {
  IOSObjectArray *kids = [self children];
  id<JavaUtilList> l = new_JavaUtilArrayList_init();
  {
    IOSObjectArray *a__ = kids;
    EduStanfordNlpTreesTree * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      EduStanfordNlpTreesTree *kid = *b__++;
      [l addAllWithJavaUtilCollection:EduStanfordNlpTreesTree_spliceOutHelperWithJavaUtilFunctionPredicate_withEduStanfordNlpTreesTreeFactory_(nil_chk(kid), nodeFilter, tf)];
    }
  }
  if ([((id<JavaUtilFunctionPredicate>) nil_chk(nodeFilter)) testWithId:self]) {
    EduStanfordNlpTreesTree *t;
    if (![l isEmpty]) {
      t = [((id<EduStanfordNlpTreesTreeFactory>) nil_chk(tf)) newTreeNodeWithEduStanfordNlpLingLabel:[self label] withJavaUtilList:l];
    }
    else {
      t = [((id<EduStanfordNlpTreesTreeFactory>) nil_chk(tf)) newLeafWithEduStanfordNlpLingLabel:[self label]];
    }
    l = new_JavaUtilArrayList_initWithInt_(1);
    [l addWithId:t];
    return l;
  }
  return l;
}

EduStanfordNlpTreesTree *EduStanfordNlpTreesTree_parentHelperWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTreeArray_withEduStanfordNlpTreesTree_(EduStanfordNlpTreesTree *parent, IOSObjectArray *kids, EduStanfordNlpTreesTree *node) {
  EduStanfordNlpTreesTree_initialize();
  {
    IOSObjectArray *a__ = kids;
    EduStanfordNlpTreesTree * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      EduStanfordNlpTreesTree *kid = *b__++;
      if (kid == node) {
        return parent;
      }
      EduStanfordNlpTreesTree *ret = [((EduStanfordNlpTreesTree *) nil_chk(node)) parentWithEduStanfordNlpTreesTree:kid];
      if (ret != nil) {
        return ret;
      }
    }
  }
  return nil;
}

void EduStanfordNlpTreesTree_postOrderRecurseWithEduStanfordNlpTreesTree_withJavaUtilList_(EduStanfordNlpTreesTree *t, id<JavaUtilList> nodes) {
  EduStanfordNlpTreesTree_initialize();
  {
    IOSObjectArray *a__ = [((EduStanfordNlpTreesTree *) nil_chk(t)) children];
    EduStanfordNlpTreesTree * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      EduStanfordNlpTreesTree *c = *b__++;
      EduStanfordNlpTreesTree_postOrderRecurseWithEduStanfordNlpTreesTree_withJavaUtilList_(c, nodes);
    }
  }
  [((id<JavaUtilList>) nil_chk(nodes)) addWithId:t];
}

void EduStanfordNlpTreesTree_preOrderRecurseWithEduStanfordNlpTreesTree_withJavaUtilList_(EduStanfordNlpTreesTree *t, id<JavaUtilList> nodes) {
  EduStanfordNlpTreesTree_initialize();
  [((id<JavaUtilList>) nil_chk(nodes)) addWithId:t];
  {
    IOSObjectArray *a__ = [((EduStanfordNlpTreesTree *) nil_chk(t)) children];
    EduStanfordNlpTreesTree * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      EduStanfordNlpTreesTree *c = *b__++;
      EduStanfordNlpTreesTree_preOrderRecurseWithEduStanfordNlpTreesTree_withJavaUtilList_(c, nodes);
    }
  }
}

EduStanfordNlpTreesTree *EduStanfordNlpTreesTree_valueOfWithNSString_(NSString *str) {
  EduStanfordNlpTreesTree_initialize();
  return EduStanfordNlpTreesTree_valueOfWithNSString_withEduStanfordNlpTreesTreeReaderFactory_(str, new_EduStanfordNlpTreesLabeledScoredTreeReaderFactory_init());
}

EduStanfordNlpTreesTree *EduStanfordNlpTreesTree_valueOfWithNSString_withEduStanfordNlpTreesTreeReaderFactory_(NSString *str, id<EduStanfordNlpTreesTreeReaderFactory> trf) {
  EduStanfordNlpTreesTree_initialize();
  @try {
    return [((id<EduStanfordNlpTreesTreeReader>) nil_chk([((id<EduStanfordNlpTreesTreeReaderFactory>) nil_chk(trf)) newTreeReaderWithJavaIoReader:new_JavaIoStringReader_initWithNSString_(str)])) readTree];
  }
  @catch (JavaIoIOException *ioe) {
    @throw new_JavaLangRuntimeException_initWithNSString_withNSException_(@"Tree.valueOf() tree construction failed", ioe);
  }
}

IOSObjectArray *EduStanfordNlpTreesTree_dominationPathHelperWithEduStanfordNlpTreesTree_withInt_(EduStanfordNlpTreesTree *self, EduStanfordNlpTreesTree *t, jint depth) {
  IOSObjectArray *kids = [self children];
  for (jint i = ((IOSObjectArray *) nil_chk(kids))->size_ - 1; i >= 0; i--) {
    EduStanfordNlpTreesTree *t1 = IOSObjectArray_Get(kids, i);
    if (t1 == nil) {
      return nil;
    }
    IOSObjectArray *result;
    if ((result = EduStanfordNlpTreesTree_dominationPathWithEduStanfordNlpTreesTree_withInt_(t1, t, depth + 1)) != nil) {
      (void) IOSObjectArray_Set(nil_chk(result), depth, self);
      return result;
    }
  }
  return nil;
}

IOSObjectArray *EduStanfordNlpTreesTree_dominationPathWithEduStanfordNlpTreesTree_withInt_(EduStanfordNlpTreesTree *self, EduStanfordNlpTreesTree *t, jint depth) {
  if (self == t) {
    IOSObjectArray *result = [IOSObjectArray newArrayWithLength:depth + 1 type:EduStanfordNlpTreesTree_class_()];
    (void) IOSObjectArray_Set(result, depth, self);
    return result;
  }
  return EduStanfordNlpTreesTree_dominationPathHelperWithEduStanfordNlpTreesTree_withInt_(self, t, depth);
}

jboolean EduStanfordNlpTreesTree_leftCharEdgeWithEduStanfordNlpTreesTree_withEduStanfordNlpUtilMutableInteger_(EduStanfordNlpTreesTree *self, EduStanfordNlpTreesTree *node, EduStanfordNlpUtilMutableInteger *i) {
  if (self == node) {
    return true;
  }
  else if ([self isLeaf]) {
    [((EduStanfordNlpUtilMutableInteger *) nil_chk(i)) setWithInt:[i intValue] + ((jint) [((NSString *) nil_chk([self value])) length])];
    return false;
  }
  else {
    {
      IOSObjectArray *a__ = [self children];
      EduStanfordNlpTreesTree * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        EduStanfordNlpTreesTree *child = *b__++;
        if (EduStanfordNlpTreesTree_leftCharEdgeWithEduStanfordNlpTreesTree_withEduStanfordNlpUtilMutableInteger_(nil_chk(child), node, i)) {
          return true;
        }
      }
    }
    return false;
  }
}

jboolean EduStanfordNlpTreesTree_rightCharEdgeWithEduStanfordNlpTreesTree_withEduStanfordNlpUtilMutableInteger_(EduStanfordNlpTreesTree *self, EduStanfordNlpTreesTree *node, EduStanfordNlpUtilMutableInteger *i) {
  if (self == node) {
    return true;
  }
  else if ([self isLeaf]) {
    [((EduStanfordNlpUtilMutableInteger *) nil_chk(i)) setWithInt:[i intValue] - ((jint) [((NSString *) nil_chk([((id<EduStanfordNlpLingLabel>) nil_chk([self label])) value])) length])];
    return false;
  }
  else {
    for (jint j = ((IOSObjectArray *) nil_chk([self children]))->size_ - 1; j >= 0; j--) {
      if (EduStanfordNlpTreesTree_rightCharEdgeWithEduStanfordNlpTreesTree_withEduStanfordNlpUtilMutableInteger_(nil_chk(IOSObjectArray_Get(nil_chk([self children]), j)), node, i)) {
        return true;
      }
    }
    return false;
  }
}

jboolean EduStanfordNlpTreesTree_nodeNumberHelperWithEduStanfordNlpTreesTree_withEduStanfordNlpUtilMutableInteger_(EduStanfordNlpTreesTree *self, EduStanfordNlpTreesTree *t, EduStanfordNlpUtilMutableInteger *i) {
  if (self == t) return true;
  [((EduStanfordNlpUtilMutableInteger *) nil_chk(i)) incValueWithInt:1];
  for (jint j = 0; j < ((IOSObjectArray *) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(t)) children]))->size_; j++) {
    if (EduStanfordNlpTreesTree_nodeNumberHelperWithEduStanfordNlpTreesTree_withEduStanfordNlpUtilMutableInteger_(self, IOSObjectArray_Get(nil_chk([t children]), j), i)) return true;
  }
  return false;
}

EduStanfordNlpTreesTree *EduStanfordNlpTreesTree_getNodeNumberHelperWithEduStanfordNlpUtilMutableInteger_withInt_(EduStanfordNlpTreesTree *self, EduStanfordNlpUtilMutableInteger *i, jint target) {
  jint i1 = [((EduStanfordNlpUtilMutableInteger *) nil_chk(i)) intValue];
  if (i1 == target) return self;
  if (i1 > target) @throw new_JavaLangIndexOutOfBoundsException_initWithNSString_(JreStrcat("$@$", @"Error -- tree does not contain ", i, @" nodes."));
  [i incValueWithInt:1];
  for (jint j = 0; j < ((IOSObjectArray *) nil_chk([self children]))->size_; j++) {
    EduStanfordNlpTreesTree *temp = EduStanfordNlpTreesTree_getNodeNumberHelperWithEduStanfordNlpUtilMutableInteger_withInt_(nil_chk(IOSObjectArray_Get(nil_chk([self children]), j)), i, target);
    if (temp != nil) return temp;
  }
  return nil;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTreesTree)

@implementation EduStanfordNlpTreesTree_TreeIterator

- (instancetype)initWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t {
  EduStanfordNlpTreesTree_TreeIterator_initWithEduStanfordNlpTreesTree_(self, t);
  return self;
}

- (jboolean)hasNext {
  return (![((id<JavaUtilList>) nil_chk(treeStack_)) isEmpty]);
}

- (EduStanfordNlpTreesTree *)next {
  jint lastIndex = [((id<JavaUtilList>) nil_chk(treeStack_)) size] - 1;
  if (lastIndex < 0) {
    @throw new_JavaUtilNoSuchElementException_initWithNSString_(@"TreeIterator exhausted");
  }
  EduStanfordNlpTreesTree *tr = [treeStack_ removeWithInt:lastIndex];
  IOSObjectArray *kids = [((EduStanfordNlpTreesTree *) nil_chk(tr)) children];
  for (jint i = ((IOSObjectArray *) nil_chk(kids))->size_ - 1; i >= 0; i--) {
    [treeStack_ addWithId:IOSObjectArray_Get(kids, i)];
  }
  return tr;
}

- (void)remove {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (NSString *)description {
  return @"TreeIterator";
}

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaUtilIterator_forEachRemainingWithJavaUtilFunctionConsumer_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpTreesTree:);
  methods[1].selector = @selector(hasNext);
  methods[2].selector = @selector(next);
  methods[3].selector = @selector(remove);
  methods[4].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "treeStack_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpTreesTree;", "toString", "Ljava/util/List<Ledu/stanford/nlp/trees/Tree;>;", "Ljava/lang/Object;Ljava/util/Iterator<Ledu/stanford/nlp/trees/Tree;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpTreesTree_TreeIterator = { "TreeIterator", "edu.stanford.nlp.trees", ptrTable, methods, fields, 7, 0xa, 5, 1, 0, -1, -1, 3, -1 };
  return &_EduStanfordNlpTreesTree_TreeIterator;
}

@end

void EduStanfordNlpTreesTree_TreeIterator_initWithEduStanfordNlpTreesTree_(EduStanfordNlpTreesTree_TreeIterator *self, EduStanfordNlpTreesTree *t) {
  NSObject_init(self);
  self->treeStack_ = new_JavaUtilArrayList_init();
  [self->treeStack_ addWithId:t];
}

EduStanfordNlpTreesTree_TreeIterator *new_EduStanfordNlpTreesTree_TreeIterator_initWithEduStanfordNlpTreesTree_(EduStanfordNlpTreesTree *t) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesTree_TreeIterator, initWithEduStanfordNlpTreesTree_, t)
}

EduStanfordNlpTreesTree_TreeIterator *create_EduStanfordNlpTreesTree_TreeIterator_initWithEduStanfordNlpTreesTree_(EduStanfordNlpTreesTree *t) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesTree_TreeIterator, initWithEduStanfordNlpTreesTree_, t)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTreesTree_TreeIterator)
