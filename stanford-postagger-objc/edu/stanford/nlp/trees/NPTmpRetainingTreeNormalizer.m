//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/trees/NPTmpRetainingTreeNormalizer.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/ling/Label.h"
#include "edu/stanford/nlp/ling/LabelFactory.h"
#include "edu/stanford/nlp/trees/BobChrisTreeNormalizer.h"
#include "edu/stanford/nlp/trees/HeadFinder.h"
#include "edu/stanford/nlp/trees/LabeledScoredTreeFactory.h"
#include "edu/stanford/nlp/trees/ModCollinsHeadFinder.h"
#include "edu/stanford/nlp/trees/NPTmpRetainingTreeNormalizer.h"
#include "edu/stanford/nlp/trees/PennTreeReader.h"
#include "edu/stanford/nlp/trees/Tree.h"
#include "edu/stanford/nlp/trees/TreeFactory.h"
#include "edu/stanford/nlp/trees/TreeReader.h"
#include "edu/stanford/nlp/trees/TreeTransformer.h"
#include "edu/stanford/nlp/trees/TreebankLanguagePack.h"
#include "java/io/Reader.h"
#include "java/util/Collections.h"
#include "java/util/List.h"
#include "java/util/function/Predicate.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"

@interface EduStanfordNlpTreesNPTmpRetainingTreeNormalizer () {
 @public
  jint temporalAnnotation_;
  jboolean doSGappedStuff_;
  jint leaveItAll_;
  jboolean doAdverbialNP_;
  id<EduStanfordNlpTreesHeadFinder> headFinder_;
}

+ (jboolean)includesEmptyNPSubjWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t;

- (void)addTMP9WithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)tree;

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer, headFinder_, id<EduStanfordNlpTreesHeadFinder>)

inline jlong EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_get_serialVersionUID();
#define EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_serialVersionUID 7548777133196579107LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer, serialVersionUID, jlong)

inline jboolean EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_get_onlyTagAnnotateNstar();
#define EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_onlyTagAnnotateNstar true
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer, onlyTagAnnotateNstar, jboolean)

inline JavaUtilRegexPattern *EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_get_NPTmpPattern();
static JavaUtilRegexPattern *EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_NPTmpPattern;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer, NPTmpPattern, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_get_PPTmpPattern();
static JavaUtilRegexPattern *EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_PPTmpPattern;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer, PPTmpPattern, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_get_ADVPTmpPattern();
static JavaUtilRegexPattern *EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_ADVPTmpPattern;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer, ADVPTmpPattern, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_get_TmpPattern();
static JavaUtilRegexPattern *EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_TmpPattern;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer, TmpPattern, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_get_NPSbjPattern();
static JavaUtilRegexPattern *EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_NPSbjPattern;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer, NPSbjPattern, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_get_NPAdvPattern();
static JavaUtilRegexPattern *EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_NPAdvPattern;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer, NPAdvPattern, JavaUtilRegexPattern *)

__attribute__((unused)) static jboolean EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_includesEmptyNPSubjWithEduStanfordNlpTreesTree_(EduStanfordNlpTreesTree *t);

__attribute__((unused)) static void EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_addTMP9WithEduStanfordNlpTreesTree_(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer *self, EduStanfordNlpTreesTree *tree);

@interface EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_$Lambda$1 : NSObject < EduStanfordNlpTreesTreeTransformer > {
 @public
  EduStanfordNlpTreesNPTmpRetainingTreeNormalizer *this$0_;
}

- (EduStanfordNlpTreesTree *)transformTreeWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_$Lambda$1)

J2OBJC_FIELD_SETTER(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_$Lambda$1, this$0_, EduStanfordNlpTreesNPTmpRetainingTreeNormalizer *)

__attribute__((unused)) static void EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_$Lambda$1_initWithEduStanfordNlpTreesNPTmpRetainingTreeNormalizer_(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_$Lambda$1 *self, EduStanfordNlpTreesNPTmpRetainingTreeNormalizer *outer$);

__attribute__((unused)) static EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_$Lambda$1 *new_EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_$Lambda$1_initWithEduStanfordNlpTreesNPTmpRetainingTreeNormalizer_(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_$Lambda$1 *create_EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_$Lambda$1_initWithEduStanfordNlpTreesNPTmpRetainingTreeNormalizer_(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer *outer$);

@interface EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_$Lambda$2 : NSObject < EduStanfordNlpTreesTreeTransformer > {
 @public
  EduStanfordNlpTreesNPTmpRetainingTreeNormalizer *this$0_;
}

- (EduStanfordNlpTreesTree *)transformTreeWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_$Lambda$2)

J2OBJC_FIELD_SETTER(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_$Lambda$2, this$0_, EduStanfordNlpTreesNPTmpRetainingTreeNormalizer *)

__attribute__((unused)) static void EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_$Lambda$2_initWithEduStanfordNlpTreesNPTmpRetainingTreeNormalizer_(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_$Lambda$2 *self, EduStanfordNlpTreesNPTmpRetainingTreeNormalizer *outer$);

__attribute__((unused)) static EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_$Lambda$2 *new_EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_$Lambda$2_initWithEduStanfordNlpTreesNPTmpRetainingTreeNormalizer_(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_$Lambda$2 *create_EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_$Lambda$2_initWithEduStanfordNlpTreesNPTmpRetainingTreeNormalizer_(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer *outer$);

@interface EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_$1 : NSObject < JavaUtilFunctionPredicate >

- (jboolean)testWithId:(EduStanfordNlpTreesTree *)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_$1)

inline jlong EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_$1_get_serialVersionUID();
#define EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_$1_serialVersionUID -7250433816896327901LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_$1, serialVersionUID, jlong)

__attribute__((unused)) static void EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_$1_init(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_$1 *self);

__attribute__((unused)) static EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_$1 *new_EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_$1 *create_EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_$1_init();

@interface EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_$2 : NSObject < JavaUtilFunctionPredicate >

- (jboolean)testWithId:(EduStanfordNlpTreesTree *)t;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_$2)

inline jlong EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_$2_get_serialVersionUID();
#define EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_$2_serialVersionUID 9000955019205336311LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_$2, serialVersionUID, jlong)

__attribute__((unused)) static void EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_$2_init(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_$2 *self);

__attribute__((unused)) static EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_$2 *new_EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_$2_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_$2 *create_EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_$2_init();

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer)

@implementation EduStanfordNlpTreesNPTmpRetainingTreeNormalizer

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithInt:(jint)temporalAnnotation
                withBoolean:(jboolean)doSGappedStuff {
  EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_initWithInt_withBoolean_(self, temporalAnnotation, doSGappedStuff);
  return self;
}

- (instancetype)initWithInt:(jint)temporalAnnotation
                withBoolean:(jboolean)doSGappedStuff
                    withInt:(jint)leaveItAll
                withBoolean:(jboolean)doAdverbialNP {
  EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_initWithInt_withBoolean_withInt_withBoolean_(self, temporalAnnotation, doSGappedStuff, leaveItAll, doAdverbialNP);
  return self;
}

- (instancetype)initWithInt:(jint)temporalAnnotation
                withBoolean:(jboolean)doSGappedStuff
                    withInt:(jint)leaveItAll
                withBoolean:(jboolean)doAdverbialNP
withEduStanfordNlpTreesHeadFinder:(id<EduStanfordNlpTreesHeadFinder>)headFinder {
  EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_initWithInt_withBoolean_withInt_withBoolean_withEduStanfordNlpTreesHeadFinder_(self, temporalAnnotation, doSGappedStuff, leaveItAll, doAdverbialNP, headFinder);
  return self;
}

- (NSString *)cleanUpLabelWithNSString:(NSString *)label {
  if (label == nil) {
    return @"ROOT";
  }
  else if (leaveItAll_ == 1) {
    return [((id<EduStanfordNlpTreesTreebankLanguagePack>) nil_chk(tlp_)) categoryAndFunctionWithNSString:label];
  }
  else if (leaveItAll_ == 2) {
    return label;
  }
  else {
    jboolean nptemp = [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_NPTmpPattern)) matcherWithJavaLangCharSequence:label])) matches];
    jboolean pptemp = [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_PPTmpPattern)) matcherWithJavaLangCharSequence:label])) matches];
    jboolean advptemp = [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_ADVPTmpPattern)) matcherWithJavaLangCharSequence:label])) matches];
    jboolean anytemp = [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_TmpPattern)) matcherWithJavaLangCharSequence:label])) matches];
    jboolean subj = [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_NPSbjPattern)) matcherWithJavaLangCharSequence:label])) matches];
    jboolean npadv = [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_NPAdvPattern)) matcherWithJavaLangCharSequence:label])) matches];
    label = [((id<EduStanfordNlpTreesTreebankLanguagePack>) nil_chk(tlp_)) basicCategoryWithNSString:label];
    if (anytemp && temporalAnnotation_ == EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_TEMPORAL_ANY_TMP_PERCOLATED) {
      (void) JreStrAppendStrong(&label, "$", @"-TMP");
    }
    else if (pptemp && (temporalAnnotation_ == EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_TEMPORAL_ALL_NP_AND_PP || temporalAnnotation_ == EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_TEMPORAL_NP_AND_PP_WITH_NP_HEAD || temporalAnnotation_ == EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_TEMPORAL_ALL_NP_EVEN_UNDER_PP || temporalAnnotation_ == EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_TEMPORAL_ALL_NP_PP_ADVP || temporalAnnotation_ == EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_TEMPORAL_9)) {
      label = JreStrcat("$$", label, @"-TMP");
    }
    else if (advptemp && (temporalAnnotation_ == EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_TEMPORAL_ALL_NP_PP_ADVP || temporalAnnotation_ == EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_TEMPORAL_9)) {
      label = JreStrcat("$$", label, @"-TMP");
    }
    else if (temporalAnnotation_ > 0 && nptemp) {
      label = JreStrcat("$$", label, @"-TMP");
    }
    if (doAdverbialNP_ && npadv) {
      label = JreStrcat("$$", label, @"-ADV");
    }
    if (doSGappedStuff_ && subj) {
      label = JreStrcat("$$", label, @"-SBJ");
    }
    return label;
  }
}

+ (jboolean)includesEmptyNPSubjWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t {
  return EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_includesEmptyNPSubjWithEduStanfordNlpTreesTree_(t);
}

- (EduStanfordNlpTreesTree *)normalizeWholeTreeWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)tree
                                        withEduStanfordNlpTreesTreeFactory:(id<EduStanfordNlpTreesTreeFactory>)tf {
  id<EduStanfordNlpTreesTreeTransformer> transformer1 = new_EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_$Lambda$1_initWithEduStanfordNlpTreesNPTmpRetainingTreeNormalizer_(self);
  id<JavaUtilFunctionPredicate> subtreeFilter = new_EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_$1_init();
  id<JavaUtilFunctionPredicate> nodeFilter = new_EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_$2_init();
  id<EduStanfordNlpTreesTreeTransformer> transformer2 = new_EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_$Lambda$2_initWithEduStanfordNlpTreesNPTmpRetainingTreeNormalizer_(self);
  if ([((NSString *) nil_chk([((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(tree)) label])) value])) isEqual:@"S"]) {
    tree = [((id<EduStanfordNlpTreesTreeFactory>) nil_chk(tf)) newTreeNodeWithNSString:@"ROOT" withJavaUtilList:JavaUtilCollections_singletonListWithId_(tree)];
  }
  for (EduStanfordNlpTreesTree * __strong subtree in nil_chk(tree)) {
    if ([((EduStanfordNlpTreesTree *) nil_chk(subtree)) isPhrasal] && [@"VB" isEqual:[((id<EduStanfordNlpLingLabel>) nil_chk([subtree label])) value]]) {
      [subtree setValueWithNSString:@"VP"];
    }
  }
  tree = [tree transformWithEduStanfordNlpTreesTreeTransformer:transformer1];
  if (tree == nil) {
    return nil;
  }
  tree = [tree pruneWithJavaUtilFunctionPredicate:subtreeFilter withEduStanfordNlpTreesTreeFactory:tf];
  if (tree == nil) {
    return nil;
  }
  tree = [tree spliceOutWithJavaUtilFunctionPredicate:nodeFilter withEduStanfordNlpTreesTreeFactory:tf];
  if (tree == nil) {
    return nil;
  }
  return [tree transformWithEduStanfordNlpTreesTreeTransformer:transformer2 withEduStanfordNlpTreesTreeFactory:tf];
}

- (void)addTMP9WithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)tree {
  EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_addTMP9WithEduStanfordNlpTreesTree_(self, tree);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, 3, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 5, 6, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 9, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithInt:withBoolean:);
  methods[2].selector = @selector(initWithInt:withBoolean:withInt:withBoolean:);
  methods[3].selector = @selector(initWithInt:withBoolean:withInt:withBoolean:withEduStanfordNlpTreesHeadFinder:);
  methods[4].selector = @selector(cleanUpLabelWithNSString:);
  methods[5].selector = @selector(includesEmptyNPSubjWithEduStanfordNlpTreesTree:);
  methods[6].selector = @selector(normalizeWholeTreeWithEduStanfordNlpTreesTree:withEduStanfordNlpTreesTreeFactory:);
  methods[7].selector = @selector(addTMP9WithEduStanfordNlpTreesTree:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "TEMPORAL_NONE", "I", .constantValue.asInt = EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_TEMPORAL_NONE, 0x19, -1, -1, -1, -1 },
    { "TEMPORAL_ACL03PCFG", "I", .constantValue.asInt = EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_TEMPORAL_ACL03PCFG, 0x19, -1, -1, -1, -1 },
    { "TEMPORAL_ANY_TMP_PERCOLATED", "I", .constantValue.asInt = EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_TEMPORAL_ANY_TMP_PERCOLATED, 0x19, -1, -1, -1, -1 },
    { "TEMPORAL_ALL_TERMINALS", "I", .constantValue.asInt = EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_TEMPORAL_ALL_TERMINALS, 0x19, -1, -1, -1, -1 },
    { "TEMPORAL_ALL_NP", "I", .constantValue.asInt = EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_TEMPORAL_ALL_NP, 0x19, -1, -1, -1, -1 },
    { "TEMPORAL_ALL_NP_AND_PP", "I", .constantValue.asInt = EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_TEMPORAL_ALL_NP_AND_PP, 0x19, -1, -1, -1, -1 },
    { "TEMPORAL_NP_AND_PP_WITH_NP_HEAD", "I", .constantValue.asInt = EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_TEMPORAL_NP_AND_PP_WITH_NP_HEAD, 0x19, -1, -1, -1, -1 },
    { "TEMPORAL_ALL_NP_EVEN_UNDER_PP", "I", .constantValue.asInt = EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_TEMPORAL_ALL_NP_EVEN_UNDER_PP, 0x19, -1, -1, -1, -1 },
    { "TEMPORAL_ALL_NP_PP_ADVP", "I", .constantValue.asInt = EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_TEMPORAL_ALL_NP_PP_ADVP, 0x19, -1, -1, -1, -1 },
    { "TEMPORAL_9", "I", .constantValue.asInt = EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_TEMPORAL_9, 0x19, -1, -1, -1, -1 },
    { "onlyTagAnnotateNstar", "Z", .constantValue.asBOOL = EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_onlyTagAnnotateNstar, 0x1a, -1, -1, -1, -1 },
    { "NPTmpPattern", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 10, -1, -1 },
    { "PPTmpPattern", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 11, -1, -1 },
    { "ADVPTmpPattern", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 12, -1, -1 },
    { "TmpPattern", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 13, -1, -1 },
    { "NPSbjPattern", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 14, -1, -1 },
    { "NPAdvPattern", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 15, -1, -1 },
    { "temporalAnnotation_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "doSGappedStuff_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "leaveItAll_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "doAdverbialNP_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "headFinder_", "LEduStanfordNlpTreesHeadFinder;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "IZ", "IZIZ", "IZIZLEduStanfordNlpTreesHeadFinder;", "cleanUpLabel", "LNSString;", "includesEmptyNPSubj", "LEduStanfordNlpTreesTree;", "normalizeWholeTree", "LEduStanfordNlpTreesTree;LEduStanfordNlpTreesTreeFactory;", "addTMP9", &EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_NPTmpPattern, &EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_PPTmpPattern, &EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_ADVPTmpPattern, &EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_TmpPattern, &EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_NPSbjPattern, &EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_NPAdvPattern, "LEduStanfordNlpTreesNPTmpRetainingTreeNormalizer_NPTmpRetainingTreeReaderFactory;LEduStanfordNlpTreesNPTmpRetainingTreeNormalizer_NPTmpAdvRetainingTreeReaderFactory;" };
  static const J2ObjcClassInfo _EduStanfordNlpTreesNPTmpRetainingTreeNormalizer = { "NPTmpRetainingTreeNormalizer", "edu.stanford.nlp.trees", ptrTable, methods, fields, 7, 0x1, 8, 23, -1, 16, -1, -1, -1 };
  return &_EduStanfordNlpTreesNPTmpRetainingTreeNormalizer;
}

+ (void)initialize {
  if (self == [EduStanfordNlpTreesNPTmpRetainingTreeNormalizer class]) {
    EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_NPTmpPattern = JavaUtilRegexPattern_compileWithNSString_(@"NP.*-TMP.*");
    EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_PPTmpPattern = JavaUtilRegexPattern_compileWithNSString_(@"PP.*-TMP.*");
    EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_ADVPTmpPattern = JavaUtilRegexPattern_compileWithNSString_(@"ADVP.*-TMP.*");
    EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_TmpPattern = JavaUtilRegexPattern_compileWithNSString_(@".*-TMP.*");
    EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_NPSbjPattern = JavaUtilRegexPattern_compileWithNSString_(@"NP.*-SBJ.*");
    EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_NPAdvPattern = JavaUtilRegexPattern_compileWithNSString_(@"NP.*-ADV.*");
    J2OBJC_SET_INITIALIZED(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer)
  }
}

@end

void EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_init(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer *self) {
  EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_initWithInt_withBoolean_(self, EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_TEMPORAL_ACL03PCFG, false);
}

EduStanfordNlpTreesNPTmpRetainingTreeNormalizer *new_EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer, init)
}

EduStanfordNlpTreesNPTmpRetainingTreeNormalizer *create_EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer, init)
}

void EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_initWithInt_withBoolean_(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer *self, jint temporalAnnotation, jboolean doSGappedStuff) {
  EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_initWithInt_withBoolean_withInt_withBoolean_(self, temporalAnnotation, doSGappedStuff, 0, false);
}

EduStanfordNlpTreesNPTmpRetainingTreeNormalizer *new_EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_initWithInt_withBoolean_(jint temporalAnnotation, jboolean doSGappedStuff) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer, initWithInt_withBoolean_, temporalAnnotation, doSGappedStuff)
}

EduStanfordNlpTreesNPTmpRetainingTreeNormalizer *create_EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_initWithInt_withBoolean_(jint temporalAnnotation, jboolean doSGappedStuff) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer, initWithInt_withBoolean_, temporalAnnotation, doSGappedStuff)
}

void EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_initWithInt_withBoolean_withInt_withBoolean_(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer *self, jint temporalAnnotation, jboolean doSGappedStuff, jint leaveItAll, jboolean doAdverbialNP) {
  EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_initWithInt_withBoolean_withInt_withBoolean_withEduStanfordNlpTreesHeadFinder_(self, temporalAnnotation, doSGappedStuff, leaveItAll, doAdverbialNP, new_EduStanfordNlpTreesModCollinsHeadFinder_init());
}

EduStanfordNlpTreesNPTmpRetainingTreeNormalizer *new_EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_initWithInt_withBoolean_withInt_withBoolean_(jint temporalAnnotation, jboolean doSGappedStuff, jint leaveItAll, jboolean doAdverbialNP) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer, initWithInt_withBoolean_withInt_withBoolean_, temporalAnnotation, doSGappedStuff, leaveItAll, doAdverbialNP)
}

EduStanfordNlpTreesNPTmpRetainingTreeNormalizer *create_EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_initWithInt_withBoolean_withInt_withBoolean_(jint temporalAnnotation, jboolean doSGappedStuff, jint leaveItAll, jboolean doAdverbialNP) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer, initWithInt_withBoolean_withInt_withBoolean_, temporalAnnotation, doSGappedStuff, leaveItAll, doAdverbialNP)
}

void EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_initWithInt_withBoolean_withInt_withBoolean_withEduStanfordNlpTreesHeadFinder_(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer *self, jint temporalAnnotation, jboolean doSGappedStuff, jint leaveItAll, jboolean doAdverbialNP, id<EduStanfordNlpTreesHeadFinder> headFinder) {
  EduStanfordNlpTreesBobChrisTreeNormalizer_init(self);
  self->temporalAnnotation_ = temporalAnnotation;
  self->doSGappedStuff_ = doSGappedStuff;
  self->leaveItAll_ = leaveItAll;
  self->doAdverbialNP_ = doAdverbialNP;
  self->headFinder_ = headFinder;
}

EduStanfordNlpTreesNPTmpRetainingTreeNormalizer *new_EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_initWithInt_withBoolean_withInt_withBoolean_withEduStanfordNlpTreesHeadFinder_(jint temporalAnnotation, jboolean doSGappedStuff, jint leaveItAll, jboolean doAdverbialNP, id<EduStanfordNlpTreesHeadFinder> headFinder) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer, initWithInt_withBoolean_withInt_withBoolean_withEduStanfordNlpTreesHeadFinder_, temporalAnnotation, doSGappedStuff, leaveItAll, doAdverbialNP, headFinder)
}

EduStanfordNlpTreesNPTmpRetainingTreeNormalizer *create_EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_initWithInt_withBoolean_withInt_withBoolean_withEduStanfordNlpTreesHeadFinder_(jint temporalAnnotation, jboolean doSGappedStuff, jint leaveItAll, jboolean doAdverbialNP, id<EduStanfordNlpTreesHeadFinder> headFinder) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer, initWithInt_withBoolean_withInt_withBoolean_withEduStanfordNlpTreesHeadFinder_, temporalAnnotation, doSGappedStuff, leaveItAll, doAdverbialNP, headFinder)
}

jboolean EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_includesEmptyNPSubjWithEduStanfordNlpTreesTree_(EduStanfordNlpTreesTree *t) {
  EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_initialize();
  if (t == nil) {
    return false;
  }
  IOSObjectArray *kids = [t children];
  if (kids == nil) {
    return false;
  }
  jboolean foundNullSubj = false;
  {
    IOSObjectArray *a__ = kids;
    EduStanfordNlpTreesTree * const *b__ = a__->buffer_;
    EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      EduStanfordNlpTreesTree *kid = *b__++;
      IOSObjectArray *kidkids = [((EduStanfordNlpTreesTree *) nil_chk(kid)) children];
      if ([((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_NPSbjPattern)) matcherWithJavaLangCharSequence:[kid value]])) matches]) {
        [kid setValueWithNSString:@"NP"];
        if (kidkids != nil && kidkids->size_ == 1 && [((NSString *) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(IOSObjectArray_Get(kidkids, 0))) value])) isEqual:@"-NONE-"]) {
          foundNullSubj = true;
        }
      }
    }
  }
  return foundNullSubj;
}

void EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_addTMP9WithEduStanfordNlpTreesTree_(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer *self, EduStanfordNlpTreesTree *tree) {
  EduStanfordNlpTreesTree *ht = [((id<EduStanfordNlpTreesHeadFinder>) nil_chk(self->headFinder_)) determineHeadWithEduStanfordNlpTreesTree:tree];
  if ([((NSString *) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(ht)) value])) isEqual:@"POS"]) {
    jint j = [((EduStanfordNlpTreesTree *) nil_chk(tree)) objectIndexOfWithEduStanfordNlpTreesTree:ht];
    if (j > 0) {
      ht = [tree getChildWithInt:j - 1];
    }
  }
  if ([((EduStanfordNlpTreesTree *) nil_chk(ht)) isPreTerminal] || [((NSString *) nil_chk([ht value])) hasPrefix:@"NP"] || [((NSString *) nil_chk([ht value])) hasPrefix:@"PP"] || [((NSString *) nil_chk([ht value])) hasPrefix:@"ADVP"]) {
    if (![((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_TmpPattern)) matcherWithJavaLangCharSequence:[ht value]])) matches]) {
      id<EduStanfordNlpLingLabelFactory> lf = [ht labelFactory];
      [ht setLabelWithEduStanfordNlpLingLabel:[((id<EduStanfordNlpLingLabelFactory>) nil_chk(lf)) newLabelWithNSString:JreStrcat("$$", [ht value], @"-TMP")]];
    }
    if ([((NSString *) nil_chk([ht value])) hasPrefix:@"NP"] || [((NSString *) nil_chk([ht value])) hasPrefix:@"PP"] || [((NSString *) nil_chk([ht value])) hasPrefix:@"ADVP"]) {
      EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_addTMP9WithEduStanfordNlpTreesTree_(self, ht);
    }
  }
  IOSObjectArray *kidlets = [((EduStanfordNlpTreesTree *) nil_chk(tree)) children];
  {
    IOSObjectArray *a__ = kidlets;
    EduStanfordNlpTreesTree * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      EduStanfordNlpTreesTree *kidlet = *b__++;
      ht = kidlet;
      id<EduStanfordNlpLingLabelFactory> lf;
      if ([tree isPrePreTerminal] && ![((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_TmpPattern)) matcherWithJavaLangCharSequence:[((EduStanfordNlpTreesTree *) nil_chk(ht)) value]])) matches]) {
        lf = [((EduStanfordNlpTreesTree *) nil_chk(ht)) labelFactory];
        [ht setLabelWithEduStanfordNlpLingLabel:[((id<EduStanfordNlpLingLabelFactory>) nil_chk(lf)) newLabelWithNSString:JreStrcat("$$", [ht value], @"-TMP")]];
      }
      else if ([((NSString *) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(ht)) value])) hasPrefix:@"NP"]) {
        if (![((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_TmpPattern)) matcherWithJavaLangCharSequence:[ht value]])) matches]) {
          lf = [ht labelFactory];
          [ht setLabelWithEduStanfordNlpLingLabel:[((id<EduStanfordNlpLingLabelFactory>) nil_chk(lf)) newLabelWithNSString:JreStrcat("$$", [ht value], @"-TMP")]];
        }
        EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_addTMP9WithEduStanfordNlpTreesTree_(self, ht);
      }
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer)

@implementation EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_NPTmpRetainingTreeReaderFactory

- (id<EduStanfordNlpTreesTreeReader>)newTreeReaderWithJavaIoReader:(JavaIoReader *)inArg {
  return new_EduStanfordNlpTreesPennTreeReader_initWithJavaIoReader_withEduStanfordNlpTreesTreeFactory_withEduStanfordNlpTreesTreeNormalizer_(inArg, new_EduStanfordNlpTreesLabeledScoredTreeFactory_init(), new_EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_init());
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_NPTmpRetainingTreeReaderFactory_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LEduStanfordNlpTreesTreeReader;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(newTreeReaderWithJavaIoReader:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "newTreeReader", "LJavaIoReader;", "LEduStanfordNlpTreesNPTmpRetainingTreeNormalizer;" };
  static const J2ObjcClassInfo _EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_NPTmpRetainingTreeReaderFactory = { "NPTmpRetainingTreeReaderFactory", "edu.stanford.nlp.trees", ptrTable, methods, NULL, 7, 0x9, 2, 0, 2, -1, -1, -1, -1 };
  return &_EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_NPTmpRetainingTreeReaderFactory;
}

@end

void EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_NPTmpRetainingTreeReaderFactory_init(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_NPTmpRetainingTreeReaderFactory *self) {
  NSObject_init(self);
}

EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_NPTmpRetainingTreeReaderFactory *new_EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_NPTmpRetainingTreeReaderFactory_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_NPTmpRetainingTreeReaderFactory, init)
}

EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_NPTmpRetainingTreeReaderFactory *create_EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_NPTmpRetainingTreeReaderFactory_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_NPTmpRetainingTreeReaderFactory, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_NPTmpRetainingTreeReaderFactory)

@implementation EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_NPTmpAdvRetainingTreeReaderFactory

- (id<EduStanfordNlpTreesTreeReader>)newTreeReaderWithJavaIoReader:(JavaIoReader *)inArg {
  return new_EduStanfordNlpTreesPennTreeReader_initWithJavaIoReader_withEduStanfordNlpTreesTreeFactory_withEduStanfordNlpTreesTreeNormalizer_(inArg, new_EduStanfordNlpTreesLabeledScoredTreeFactory_init(), new_EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_initWithInt_withBoolean_withInt_withBoolean_(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_TEMPORAL_ACL03PCFG, false, 0, true));
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_NPTmpAdvRetainingTreeReaderFactory_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LEduStanfordNlpTreesTreeReader;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(newTreeReaderWithJavaIoReader:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "newTreeReader", "LJavaIoReader;", "LEduStanfordNlpTreesNPTmpRetainingTreeNormalizer;" };
  static const J2ObjcClassInfo _EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_NPTmpAdvRetainingTreeReaderFactory = { "NPTmpAdvRetainingTreeReaderFactory", "edu.stanford.nlp.trees", ptrTable, methods, NULL, 7, 0x9, 2, 0, 2, -1, -1, -1, -1 };
  return &_EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_NPTmpAdvRetainingTreeReaderFactory;
}

@end

void EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_NPTmpAdvRetainingTreeReaderFactory_init(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_NPTmpAdvRetainingTreeReaderFactory *self) {
  NSObject_init(self);
}

EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_NPTmpAdvRetainingTreeReaderFactory *new_EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_NPTmpAdvRetainingTreeReaderFactory_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_NPTmpAdvRetainingTreeReaderFactory, init)
}

EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_NPTmpAdvRetainingTreeReaderFactory *create_EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_NPTmpAdvRetainingTreeReaderFactory_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_NPTmpAdvRetainingTreeReaderFactory, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_NPTmpAdvRetainingTreeReaderFactory)

@implementation EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_$Lambda$1

- (EduStanfordNlpTreesTree *)transformTreeWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t {
  if (this$0_->doSGappedStuff_) {
    NSString *lab = [((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(t)) label])) value];
    if ([((NSString *) nil_chk(lab)) isEqual:@"S"] && EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_includesEmptyNPSubjWithEduStanfordNlpTreesTree_(t)) {
      id<EduStanfordNlpLingLabelFactory> lf = [((id<EduStanfordNlpLingLabel>) nil_chk([t label])) labelFactory];
      [t setLabelWithEduStanfordNlpLingLabel:[((id<EduStanfordNlpLingLabelFactory>) nil_chk(lf)) newLabelWithNSString:JreStrcat("$$", [((id<EduStanfordNlpLingLabel>) nil_chk([t label])) value], @"-G")]];
    }
  }
  return t;
}

@end

void EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_$Lambda$1_initWithEduStanfordNlpTreesNPTmpRetainingTreeNormalizer_(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_$Lambda$1 *self, EduStanfordNlpTreesNPTmpRetainingTreeNormalizer *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
}

EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_$Lambda$1 *new_EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_$Lambda$1_initWithEduStanfordNlpTreesNPTmpRetainingTreeNormalizer_(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer *outer$) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_$Lambda$1, initWithEduStanfordNlpTreesNPTmpRetainingTreeNormalizer_, outer$)
}

EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_$Lambda$1 *create_EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_$Lambda$1_initWithEduStanfordNlpTreesNPTmpRetainingTreeNormalizer_(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer *outer$) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_$Lambda$1, initWithEduStanfordNlpTreesNPTmpRetainingTreeNormalizer_, outer$)
}

@implementation EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_$Lambda$2

- (EduStanfordNlpTreesTree *)transformTreeWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t {
  if (this$0_->temporalAnnotation_ == EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_TEMPORAL_ANY_TMP_PERCOLATED) {
    NSString *lab = [((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(t)) label])) value];
    if ([((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(JreLoadStatic(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer, TmpPattern))) matcherWithJavaLangCharSequence:lab])) matches]) {
      EduStanfordNlpTreesTree *oldT = t;
      EduStanfordNlpTreesTree *ht;
      do {
        ht = [((id<EduStanfordNlpTreesHeadFinder>) nil_chk(this$0_->headFinder_)) determineHeadWithEduStanfordNlpTreesTree:oldT];
        if ([((NSString *) nil_chk([((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(ht)) label])) value])) isEqual:@"POS"]) {
          jint j = [oldT objectIndexOfWithEduStanfordNlpTreesTree:ht];
          if (j > 0) {
            ht = [oldT getChildWithInt:j - 1];
          }
        }
        id<EduStanfordNlpLingLabelFactory> lf = [((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(ht)) label])) labelFactory];
        [ht setLabelWithEduStanfordNlpLingLabel:[((id<EduStanfordNlpLingLabelFactory>) nil_chk(lf)) newLabelWithNSString:JreStrcat("$$", [((id<EduStanfordNlpLingLabel>) nil_chk([ht label])) value], @"-TMP")]];
        oldT = ht;
      }
      while (![ht isPreTerminal]);
      if ([((NSString *) nil_chk(lab)) hasPrefix:@"PP"]) {
        ht = [this$0_->headFinder_ determineHeadWithEduStanfordNlpTreesTree:t];
        jint j = [t objectIndexOfWithEduStanfordNlpTreesTree:ht];
        jint sz = ((IOSObjectArray *) nil_chk([t children]))->size_;
        if (j + 1 < sz) {
          ht = [t getChildWithInt:j + 1];
        }
        if ([((NSString *) nil_chk([((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(ht)) label])) value])) hasPrefix:@"NP"]) {
          while (![((EduStanfordNlpTreesTree *) nil_chk(ht)) isLeaf]) {
            id<EduStanfordNlpLingLabelFactory> lf = [((id<EduStanfordNlpLingLabel>) nil_chk([ht label])) labelFactory];
            [ht setLabelWithEduStanfordNlpLingLabel:[((id<EduStanfordNlpLingLabelFactory>) nil_chk(lf)) newLabelWithNSString:JreStrcat("$$", [((id<EduStanfordNlpLingLabel>) nil_chk([ht label])) value], @"-TMP")]];
            ht = [this$0_->headFinder_ determineHeadWithEduStanfordNlpTreesTree:ht];
          }
        }
      }
    }
  }
  else if (this$0_->temporalAnnotation_ == EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_TEMPORAL_ALL_TERMINALS) {
    NSString *lab = [((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(t)) label])) value];
    if ([((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(JreLoadStatic(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer, NPTmpPattern))) matcherWithJavaLangCharSequence:lab])) matches]) {
      EduStanfordNlpTreesTree *ht;
      ht = [((id<EduStanfordNlpTreesHeadFinder>) nil_chk(this$0_->headFinder_)) determineHeadWithEduStanfordNlpTreesTree:t];
      if ([((EduStanfordNlpTreesTree *) nil_chk(ht)) isPreTerminal]) {
        id<EduStanfordNlpLingLabelFactory> lf = [((id<EduStanfordNlpLingLabel>) nil_chk([ht label])) labelFactory];
        IOSObjectArray *kids = [t children];
        {
          IOSObjectArray *a__ = kids;
          EduStanfordNlpTreesTree * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
          EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
          while (b__ < e__) {
            EduStanfordNlpTreesTree *kid = *b__++;
            if ([((EduStanfordNlpTreesTree *) nil_chk(kid)) isPreTerminal]) {
              [kid setLabelWithEduStanfordNlpLingLabel:[((id<EduStanfordNlpLingLabelFactory>) nil_chk(lf)) newLabelWithNSString:JreStrcat("$$", [kid value], @"-TMP")]];
            }
          }
        }
      }
      else {
        EduStanfordNlpTreesTree *oldT = t;
        do {
          ht = [this$0_->headFinder_ determineHeadWithEduStanfordNlpTreesTree:oldT];
          oldT = ht;
        }
        while (![((EduStanfordNlpTreesTree *) nil_chk(ht)) isPreTerminal]);
        id<EduStanfordNlpLingLabelFactory> lf = [((id<EduStanfordNlpLingLabel>) nil_chk([ht label])) labelFactory];
        [ht setLabelWithEduStanfordNlpLingLabel:[((id<EduStanfordNlpLingLabelFactory>) nil_chk(lf)) newLabelWithNSString:JreStrcat("$$", [((id<EduStanfordNlpLingLabel>) nil_chk([ht label])) value], @"-TMP")]];
      }
    }
  }
  else if (this$0_->temporalAnnotation_ == EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_TEMPORAL_ALL_NP) {
    NSString *lab = [((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(t)) label])) value];
    if ([((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(JreLoadStatic(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer, NPTmpPattern))) matcherWithJavaLangCharSequence:lab])) matches]) {
      EduStanfordNlpTreesTree *oldT = t;
      EduStanfordNlpTreesTree *ht;
      do {
        ht = [((id<EduStanfordNlpTreesHeadFinder>) nil_chk(this$0_->headFinder_)) determineHeadWithEduStanfordNlpTreesTree:oldT];
        if ([((NSString *) nil_chk([((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(ht)) label])) value])) isEqual:@"POS"]) {
          jint j = [oldT objectIndexOfWithEduStanfordNlpTreesTree:ht];
          if (j > 0) {
            ht = [oldT getChildWithInt:j - 1];
          }
        }
        if ([((EduStanfordNlpTreesTree *) nil_chk(ht)) isPreTerminal] || [((NSString *) nil_chk([ht value])) hasPrefix:@"NP"]) {
          id<EduStanfordNlpLingLabelFactory> lf = [ht labelFactory];
          [ht setLabelWithEduStanfordNlpLingLabel:[((id<EduStanfordNlpLingLabelFactory>) nil_chk(lf)) newLabelWithNSString:JreStrcat("$$", [((id<EduStanfordNlpLingLabel>) nil_chk([ht label])) value], @"-TMP")]];
          oldT = ht;
        }
      }
      while ([((NSString *) nil_chk([ht value])) hasPrefix:@"NP"]);
    }
  }
  else if (this$0_->temporalAnnotation_ == EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_TEMPORAL_ALL_NP_AND_PP || this$0_->temporalAnnotation_ == EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_TEMPORAL_NP_AND_PP_WITH_NP_HEAD || this$0_->temporalAnnotation_ == EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_TEMPORAL_ALL_NP_EVEN_UNDER_PP) {
    NSString *lab = [((EduStanfordNlpTreesTree *) nil_chk(t)) value];
    if ([((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(JreLoadStatic(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer, NPTmpPattern))) matcherWithJavaLangCharSequence:lab])) matches] || [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(JreLoadStatic(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer, PPTmpPattern))) matcherWithJavaLangCharSequence:lab])) matches]) {
      EduStanfordNlpTreesTree *oldT = t;
      do {
        EduStanfordNlpTreesTree *ht = [((id<EduStanfordNlpTreesHeadFinder>) nil_chk(this$0_->headFinder_)) determineHeadWithEduStanfordNlpTreesTree:oldT];
        if ([((NSString *) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(ht)) value])) isEqual:@"POS"]) {
          jint j = [oldT objectIndexOfWithEduStanfordNlpTreesTree:ht];
          if (j > 0) {
            ht = [oldT getChildWithInt:j - 1];
          }
        }
        else if ((this$0_->temporalAnnotation_ == EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_TEMPORAL_NP_AND_PP_WITH_NP_HEAD || this$0_->temporalAnnotation_ == EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_TEMPORAL_ALL_NP_EVEN_UNDER_PP) && ([((NSString *) nil_chk([ht value])) isEqual:@"IN"] || [((NSString *) nil_chk([ht value])) isEqual:@"TO"])) {
          IOSObjectArray *kidlets = [oldT children];
          for (jint k = ((IOSObjectArray *) nil_chk(kidlets))->size_ - 1; k > 0; k--) {
            if ([((NSString *) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(IOSObjectArray_Get(kidlets, k))) value])) hasPrefix:@"NP"]) {
              ht = IOSObjectArray_Get(kidlets, k);
            }
          }
        }
        id<EduStanfordNlpLingLabelFactory> lf = [((EduStanfordNlpTreesTree *) nil_chk(ht)) labelFactory];
        if ([ht isPreTerminal] || [((NSString *) nil_chk([ht value])) hasPrefix:@"NP"]) {
          [ht setLabelWithEduStanfordNlpLingLabel:[((id<EduStanfordNlpLingLabelFactory>) nil_chk(lf)) newLabelWithNSString:JreStrcat("$$", [ht value], @"-TMP")]];
        }
        if (this$0_->temporalAnnotation_ == EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_TEMPORAL_ALL_NP_EVEN_UNDER_PP && [((NSString *) nil_chk([oldT value])) hasPrefix:@"PP"]) {
          [oldT setLabelWithEduStanfordNlpLingLabel:[((id<EduStanfordNlpLingLabelFactory>) nil_chk(lf)) newLabelWithNSString:[((id<EduStanfordNlpTreesTreebankLanguagePack>) nil_chk(this$0_->tlp_)) basicCategoryWithNSString:[oldT value]]]];
        }
        oldT = ht;
      }
      while ([((NSString *) nil_chk([oldT value])) hasPrefix:@"NP"] || [((NSString *) nil_chk([oldT value])) hasPrefix:@"PP"]);
    }
  }
  else if (this$0_->temporalAnnotation_ == EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_TEMPORAL_ALL_NP_PP_ADVP) {
    NSString *lab = [((EduStanfordNlpTreesTree *) nil_chk(t)) value];
    if ([((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(JreLoadStatic(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer, NPTmpPattern))) matcherWithJavaLangCharSequence:lab])) matches] || [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(JreLoadStatic(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer, PPTmpPattern))) matcherWithJavaLangCharSequence:lab])) matches] || [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(JreLoadStatic(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer, ADVPTmpPattern))) matcherWithJavaLangCharSequence:lab])) matches]) {
      EduStanfordNlpTreesTree *oldT = t;
      do {
        EduStanfordNlpTreesTree *ht = [((id<EduStanfordNlpTreesHeadFinder>) nil_chk(this$0_->headFinder_)) determineHeadWithEduStanfordNlpTreesTree:oldT];
        if ([((NSString *) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(ht)) value])) isEqual:@"POS"]) {
          jint j = [oldT objectIndexOfWithEduStanfordNlpTreesTree:ht];
          if (j > 0) {
            ht = [oldT getChildWithInt:j - 1];
          }
        }
        if ([((EduStanfordNlpTreesTree *) nil_chk(ht)) isPreTerminal] || [((NSString *) nil_chk([ht value])) hasPrefix:@"NP"]) {
          id<EduStanfordNlpLingLabelFactory> lf = [ht labelFactory];
          [ht setLabelWithEduStanfordNlpLingLabel:[((id<EduStanfordNlpLingLabelFactory>) nil_chk(lf)) newLabelWithNSString:JreStrcat("$$", [ht value], @"-TMP")]];
        }
        oldT = ht;
      }
      while ([((NSString *) nil_chk([oldT value])) hasPrefix:@"NP"]);
    }
  }
  else if (this$0_->temporalAnnotation_ == EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_TEMPORAL_9) {
    NSString *lab = [((EduStanfordNlpTreesTree *) nil_chk(t)) value];
    if ([((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(JreLoadStatic(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer, NPTmpPattern))) matcherWithJavaLangCharSequence:lab])) matches] || [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(JreLoadStatic(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer, PPTmpPattern))) matcherWithJavaLangCharSequence:lab])) matches] || [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(JreLoadStatic(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer, ADVPTmpPattern))) matcherWithJavaLangCharSequence:lab])) matches]) {
      EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_addTMP9WithEduStanfordNlpTreesTree_(this$0_, t);
    }
  }
  else if (this$0_->temporalAnnotation_ == EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_TEMPORAL_ACL03PCFG) {
    NSString *lab = [((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(t)) label])) value];
    if (lab != nil && [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(JreLoadStatic(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer, NPTmpPattern))) matcherWithJavaLangCharSequence:lab])) matches]) {
      EduStanfordNlpTreesTree *oldT = t;
      EduStanfordNlpTreesTree *ht;
      do {
        ht = [((id<EduStanfordNlpTreesHeadFinder>) nil_chk(this$0_->headFinder_)) determineHeadWithEduStanfordNlpTreesTree:oldT];
        if ([((NSString *) nil_chk([((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(ht)) label])) value])) isEqual:@"POS"]) {
          jint j = [((EduStanfordNlpTreesTree *) nil_chk(oldT)) objectIndexOfWithEduStanfordNlpTreesTree:ht];
          if (j > 0) {
            ht = [oldT getChildWithInt:j - 1];
          }
        }
        oldT = ht;
      }
      while (![((EduStanfordNlpTreesTree *) nil_chk(ht)) isPreTerminal]);
      if ([((NSString *) nil_chk([((id<EduStanfordNlpLingLabel>) nil_chk([ht label])) value])) hasPrefix:@"N"]) {
        id<EduStanfordNlpLingLabelFactory> lf = [((id<EduStanfordNlpLingLabel>) nil_chk([ht label])) labelFactory];
        [ht setLabelWithEduStanfordNlpLingLabel:[((id<EduStanfordNlpLingLabelFactory>) nil_chk(lf)) newLabelWithNSString:JreStrcat("$$", [((id<EduStanfordNlpLingLabel>) nil_chk([ht label])) value], @"-TMP")]];
      }
    }
  }
  if (this$0_->doAdverbialNP_) {
    NSString *lab = [((EduStanfordNlpTreesTree *) nil_chk(t)) value];
    if ([((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(JreLoadStatic(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer, NPAdvPattern))) matcherWithJavaLangCharSequence:lab])) matches]) {
      EduStanfordNlpTreesTree *oldT = t;
      EduStanfordNlpTreesTree *ht;
      do {
        ht = [((id<EduStanfordNlpTreesHeadFinder>) nil_chk(this$0_->headFinder_)) determineHeadWithEduStanfordNlpTreesTree:oldT];
        if ([((NSString *) nil_chk([((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(ht)) label])) value])) isEqual:@"POS"]) {
          jint j = [oldT objectIndexOfWithEduStanfordNlpTreesTree:ht];
          if (j > 0) {
            ht = [oldT getChildWithInt:j - 1];
          }
        }
        if ([((EduStanfordNlpTreesTree *) nil_chk(ht)) isPreTerminal] || [((NSString *) nil_chk([ht value])) hasPrefix:@"NP"]) {
          id<EduStanfordNlpLingLabelFactory> lf = [ht labelFactory];
          [ht setLabelWithEduStanfordNlpLingLabel:[((id<EduStanfordNlpLingLabelFactory>) nil_chk(lf)) newLabelWithNSString:JreStrcat("$$", [((id<EduStanfordNlpLingLabel>) nil_chk([ht label])) value], @"-ADV")]];
          oldT = ht;
        }
      }
      while ([((NSString *) nil_chk([ht value])) hasPrefix:@"NP"]);
    }
  }
  return t;
}

@end

void EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_$Lambda$2_initWithEduStanfordNlpTreesNPTmpRetainingTreeNormalizer_(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_$Lambda$2 *self, EduStanfordNlpTreesNPTmpRetainingTreeNormalizer *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
}

EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_$Lambda$2 *new_EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_$Lambda$2_initWithEduStanfordNlpTreesNPTmpRetainingTreeNormalizer_(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer *outer$) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_$Lambda$2, initWithEduStanfordNlpTreesNPTmpRetainingTreeNormalizer_, outer$)
}

EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_$Lambda$2 *create_EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_$Lambda$2_initWithEduStanfordNlpTreesNPTmpRetainingTreeNormalizer_(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer *outer$) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_$Lambda$2, initWithEduStanfordNlpTreesNPTmpRetainingTreeNormalizer_, outer$)
}

@implementation EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_$1

- (jboolean)testWithId:(EduStanfordNlpTreesTree *)t {
  IOSObjectArray *kids = [((EduStanfordNlpTreesTree *) nil_chk(t)) children];
  id<EduStanfordNlpLingLabel> l = [t label];
  if ([@"RS" isEqual:[((id<EduStanfordNlpLingLabel>) nil_chk([t label])) value]] || [@"RM" isEqual:[((id<EduStanfordNlpLingLabel>) nil_chk([t label])) value]] || [@"IP" isEqual:[((id<EduStanfordNlpLingLabel>) nil_chk([t label])) value]] || [@"CODE" isEqual:[((id<EduStanfordNlpLingLabel>) nil_chk([t label])) value]]) {
    return [t isLeaf];
  }
  if ((l != nil) && [((id<EduStanfordNlpLingLabel>) nil_chk(l)) value] != nil && ([((NSString *) nil_chk([l value])) isEqual:@"-NONE-"]) && ![t isLeaf] && ((IOSObjectArray *) nil_chk(kids))->size_ == 1 && [((EduStanfordNlpTreesTree *) nil_chk(IOSObjectArray_Get(kids, 0))) isLeaf]) {
    return false;
  }
  return true;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilFunctionPredicate>)and__WithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)arg0 {
  return JavaUtilFunctionPredicate_and__WithJavaUtilFunctionPredicate_(self, arg0);
}

- (id<JavaUtilFunctionPredicate>)negate {
  return JavaUtilFunctionPredicate_negate(self);
}

- (id<JavaUtilFunctionPredicate>)or__WithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)arg0 {
  return JavaUtilFunctionPredicate_or__WithJavaUtilFunctionPredicate_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_$1_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "test", "LEduStanfordNlpTreesTree;", "LEduStanfordNlpTreesNPTmpRetainingTreeNormalizer;", "normalizeWholeTreeWithEduStanfordNlpTreesTree:withEduStanfordNlpTreesTreeFactory:", "Ljava/lang/Object;Ljava/util/function/Predicate<Ledu/stanford/nlp/trees/Tree;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_$1 = { "", "edu.stanford.nlp.trees", ptrTable, methods, fields, 7, 0x8008, 2, 1, 2, -1, 3, 4, -1 };
  return &_EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_$1;
}

@end

void EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_$1_init(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_$1 *self) {
  NSObject_init(self);
}

EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_$1 *new_EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_$1_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_$1, init)
}

EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_$1 *create_EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_$1_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_$1, init)
}

@implementation EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_$2

- (jboolean)testWithId:(EduStanfordNlpTreesTree *)t {
  if ([((EduStanfordNlpTreesTree *) nil_chk(t)) isLeaf] || [t isPreTerminal]) {
    return true;
  }
  if ([t numChildren] != 1) {
    return true;
  }
  if ([t label] != nil && [((id<EduStanfordNlpLingLabel>) nil_chk([t label])) value] != nil && [((NSString *) nil_chk([((id<EduStanfordNlpLingLabel>) nil_chk([t label])) value])) isEqual:[((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(IOSObjectArray_Get(nil_chk([t children]), 0))) label])) value]]) {
    return false;
  }
  return true;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_$2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilFunctionPredicate>)and__WithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)arg0 {
  return JavaUtilFunctionPredicate_and__WithJavaUtilFunctionPredicate_(self, arg0);
}

- (id<JavaUtilFunctionPredicate>)negate {
  return JavaUtilFunctionPredicate_negate(self);
}

- (id<JavaUtilFunctionPredicate>)or__WithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)arg0 {
  return JavaUtilFunctionPredicate_or__WithJavaUtilFunctionPredicate_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_$2_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "test", "LEduStanfordNlpTreesTree;", "LEduStanfordNlpTreesNPTmpRetainingTreeNormalizer;", "normalizeWholeTreeWithEduStanfordNlpTreesTree:withEduStanfordNlpTreesTreeFactory:", "Ljava/lang/Object;Ljava/util/function/Predicate<Ledu/stanford/nlp/trees/Tree;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_$2 = { "", "edu.stanford.nlp.trees", ptrTable, methods, fields, 7, 0x8008, 2, 1, 2, -1, 3, 4, -1 };
  return &_EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_$2;
}

@end

void EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_$2_init(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_$2 *self) {
  NSObject_init(self);
}

EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_$2 *new_EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_$2_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_$2, init)
}

EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_$2 *create_EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_$2_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesNPTmpRetainingTreeNormalizer_$2, init)
}
