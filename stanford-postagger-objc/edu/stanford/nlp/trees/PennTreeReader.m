//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/trees/PennTreeReader.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/ling/HasIndex.h"
#include "edu/stanford/nlp/ling/HasTag.h"
#include "edu/stanford/nlp/ling/HasWord.h"
#include "edu/stanford/nlp/ling/Label.h"
#include "edu/stanford/nlp/process/Tokenizer.h"
#include "edu/stanford/nlp/trees/LabeledScoredTreeFactory.h"
#include "edu/stanford/nlp/trees/PennTreeReader.h"
#include "edu/stanford/nlp/trees/PennTreebankTokenizer.h"
#include "edu/stanford/nlp/trees/Tree.h"
#include "edu/stanford/nlp/trees/TreeFactory.h"
#include "edu/stanford/nlp/trees/TreeNormalizer.h"
#include "edu/stanford/nlp/trees/TreeReader.h"
#include "java/io/BufferedReader.h"
#include "java/io/FileInputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStreamReader.h"
#include "java/io/PrintStream.h"
#include "java/io/Reader.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/NoSuchElementException.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"

@interface EduStanfordNlpTreesPennTreeReader () {
 @public
  JavaIoReader *reader_;
  id<EduStanfordNlpProcessTokenizer> tokenizer_;
  EduStanfordNlpTreesTreeNormalizer *treeNormalizer_;
  id<EduStanfordNlpTreesTreeFactory> treeFactory_;
  EduStanfordNlpTreesTree *currentTree_;
  JavaUtilArrayList *stack_;
}

- (EduStanfordNlpTreesTree *)getTreeFromInputStream;

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpTreesPennTreeReader, reader_, JavaIoReader *)
J2OBJC_FIELD_SETTER(EduStanfordNlpTreesPennTreeReader, tokenizer_, id<EduStanfordNlpProcessTokenizer>)
J2OBJC_FIELD_SETTER(EduStanfordNlpTreesPennTreeReader, treeNormalizer_, EduStanfordNlpTreesTreeNormalizer *)
J2OBJC_FIELD_SETTER(EduStanfordNlpTreesPennTreeReader, treeFactory_, id<EduStanfordNlpTreesTreeFactory>)
J2OBJC_FIELD_SETTER(EduStanfordNlpTreesPennTreeReader, currentTree_, EduStanfordNlpTreesTree *)
J2OBJC_FIELD_SETTER(EduStanfordNlpTreesPennTreeReader, stack_, JavaUtilArrayList *)

inline jboolean EduStanfordNlpTreesPennTreeReader_get_DEBUG();
#define EduStanfordNlpTreesPennTreeReader_DEBUG false
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpTreesPennTreeReader, DEBUG, jboolean)

inline NSString *EduStanfordNlpTreesPennTreeReader_get_leftParen();
static NSString *EduStanfordNlpTreesPennTreeReader_leftParen = @"(";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpTreesPennTreeReader, leftParen, NSString *)

inline NSString *EduStanfordNlpTreesPennTreeReader_get_rightParen();
static NSString *EduStanfordNlpTreesPennTreeReader_rightParen = @")";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpTreesPennTreeReader, rightParen, NSString *)

inline JavaUtilRegexPattern *EduStanfordNlpTreesPennTreeReader_get_STAR_PATTERN();
static JavaUtilRegexPattern *EduStanfordNlpTreesPennTreeReader_STAR_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpTreesPennTreeReader, STAR_PATTERN, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *EduStanfordNlpTreesPennTreeReader_get_SLASH_PATTERN();
static JavaUtilRegexPattern *EduStanfordNlpTreesPennTreeReader_SLASH_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpTreesPennTreeReader, SLASH_PATTERN, JavaUtilRegexPattern *)

__attribute__((unused)) static EduStanfordNlpTreesTree *EduStanfordNlpTreesPennTreeReader_getTreeFromInputStream(EduStanfordNlpTreesPennTreeReader *self);

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpTreesPennTreeReader)

@implementation EduStanfordNlpTreesPennTreeReader

- (instancetype)initWithJavaIoReader:(JavaIoReader *)inArg {
  EduStanfordNlpTreesPennTreeReader_initWithJavaIoReader_(self, inArg);
  return self;
}

- (instancetype)initWithJavaIoReader:(JavaIoReader *)inArg
  withEduStanfordNlpTreesTreeFactory:(id<EduStanfordNlpTreesTreeFactory>)tf {
  EduStanfordNlpTreesPennTreeReader_initWithJavaIoReader_withEduStanfordNlpTreesTreeFactory_(self, inArg, tf);
  return self;
}

- (instancetype)initWithJavaIoReader:(JavaIoReader *)inArg
  withEduStanfordNlpTreesTreeFactory:(id<EduStanfordNlpTreesTreeFactory>)tf
withEduStanfordNlpTreesTreeNormalizer:(EduStanfordNlpTreesTreeNormalizer *)tn {
  EduStanfordNlpTreesPennTreeReader_initWithJavaIoReader_withEduStanfordNlpTreesTreeFactory_withEduStanfordNlpTreesTreeNormalizer_(self, inArg, tf, tn);
  return self;
}

- (instancetype)initWithJavaIoReader:(JavaIoReader *)inArg
  withEduStanfordNlpTreesTreeFactory:(id<EduStanfordNlpTreesTreeFactory>)tf
withEduStanfordNlpTreesTreeNormalizer:(EduStanfordNlpTreesTreeNormalizer *)tn
  withEduStanfordNlpProcessTokenizer:(id<EduStanfordNlpProcessTokenizer>)st {
  EduStanfordNlpTreesPennTreeReader_initWithJavaIoReader_withEduStanfordNlpTreesTreeFactory_withEduStanfordNlpTreesTreeNormalizer_withEduStanfordNlpProcessTokenizer_(self, inArg, tf, tn, st);
  return self;
}

- (EduStanfordNlpTreesTree *)readTree {
  EduStanfordNlpTreesTree *t = nil;
  while ([((id<EduStanfordNlpProcessTokenizer>) nil_chk(tokenizer_)) hasNext] && t == nil) {
    self->currentTree_ = nil;
    self->stack_ = new_JavaUtilArrayList_init();
    @try {
      t = EduStanfordNlpTreesPennTreeReader_getTreeFromInputStream(self);
    }
    @catch (JavaUtilNoSuchElementException *e) {
      @throw new_JavaIoIOException_initWithNSString_(@"End of token stream encountered before parsing could complete.");
    }
    if (t != nil) {
      if (treeNormalizer_ != nil && treeFactory_ != nil) {
        t = [treeNormalizer_ normalizeWholeTreeWithEduStanfordNlpTreesTree:t withEduStanfordNlpTreesTreeFactory:treeFactory_];
      }
      if (t != nil) {
        [t indexLeavesWithBoolean:true];
      }
    }
  }
  return t;
}

- (EduStanfordNlpTreesTree *)getTreeFromInputStream {
  return EduStanfordNlpTreesPennTreeReader_getTreeFromInputStream(self);
}

- (void)close {
  [((JavaIoReader *) nil_chk(reader_)) close];
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  EduStanfordNlpTreesPennTreeReader_mainWithNSStringArray_(args);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, 4, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x1, -1, -1, 5, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x2, -1, -1, 6, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 5, -1, -1, -1 },
    { NULL, "V", 0x9, 7, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaIoReader:);
  methods[1].selector = @selector(initWithJavaIoReader:withEduStanfordNlpTreesTreeFactory:);
  methods[2].selector = @selector(initWithJavaIoReader:withEduStanfordNlpTreesTreeFactory:withEduStanfordNlpTreesTreeNormalizer:);
  methods[3].selector = @selector(initWithJavaIoReader:withEduStanfordNlpTreesTreeFactory:withEduStanfordNlpTreesTreeNormalizer:withEduStanfordNlpProcessTokenizer:);
  methods[4].selector = @selector(readTree);
  methods[5].selector = @selector(getTreeFromInputStream);
  methods[6].selector = @selector(close);
  methods[7].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "reader_", "LJavaIoReader;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "tokenizer_", "LEduStanfordNlpProcessTokenizer;", .constantValue.asLong = 0, 0x12, -1, -1, 9, -1 },
    { "treeNormalizer_", "LEduStanfordNlpTreesTreeNormalizer;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "treeFactory_", "LEduStanfordNlpTreesTreeFactory;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "DEBUG", "Z", .constantValue.asBOOL = EduStanfordNlpTreesPennTreeReader_DEBUG, 0x1a, -1, -1, -1, -1 },
    { "currentTree_", "LEduStanfordNlpTreesTree;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "stack_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x2, -1, -1, 10, -1 },
    { "leftParen", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 11, -1, -1 },
    { "rightParen", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 12, -1, -1 },
    { "STAR_PATTERN", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 13, -1, -1 },
    { "SLASH_PATTERN", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 14, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoReader;", "LJavaIoReader;LEduStanfordNlpTreesTreeFactory;", "LJavaIoReader;LEduStanfordNlpTreesTreeFactory;LEduStanfordNlpTreesTreeNormalizer;", "LJavaIoReader;LEduStanfordNlpTreesTreeFactory;LEduStanfordNlpTreesTreeNormalizer;LEduStanfordNlpProcessTokenizer;", "(Ljava/io/Reader;Ledu/stanford/nlp/trees/TreeFactory;Ledu/stanford/nlp/trees/TreeNormalizer;Ledu/stanford/nlp/process/Tokenizer<Ljava/lang/String;>;)V", "LJavaIoIOException;", "LJavaUtilNoSuchElementException;", "main", "[LNSString;", "Ledu/stanford/nlp/process/Tokenizer<Ljava/lang/String;>;", "Ljava/util/ArrayList<Ledu/stanford/nlp/trees/Tree;>;", &EduStanfordNlpTreesPennTreeReader_leftParen, &EduStanfordNlpTreesPennTreeReader_rightParen, &EduStanfordNlpTreesPennTreeReader_STAR_PATTERN, &EduStanfordNlpTreesPennTreeReader_SLASH_PATTERN };
  static const J2ObjcClassInfo _EduStanfordNlpTreesPennTreeReader = { "PennTreeReader", "edu.stanford.nlp.trees", ptrTable, methods, fields, 7, 0x1, 8, 11, -1, -1, -1, -1, -1 };
  return &_EduStanfordNlpTreesPennTreeReader;
}

+ (void)initialize {
  if (self == [EduStanfordNlpTreesPennTreeReader class]) {
    EduStanfordNlpTreesPennTreeReader_STAR_PATTERN = JavaUtilRegexPattern_compileWithNSString_(@"\\\\\\*");
    EduStanfordNlpTreesPennTreeReader_SLASH_PATTERN = JavaUtilRegexPattern_compileWithNSString_(@"\\\\/");
    J2OBJC_SET_INITIALIZED(EduStanfordNlpTreesPennTreeReader)
  }
}

@end

void EduStanfordNlpTreesPennTreeReader_initWithJavaIoReader_(EduStanfordNlpTreesPennTreeReader *self, JavaIoReader *inArg) {
  EduStanfordNlpTreesPennTreeReader_initWithJavaIoReader_withEduStanfordNlpTreesTreeFactory_(self, inArg, new_EduStanfordNlpTreesLabeledScoredTreeFactory_init());
}

EduStanfordNlpTreesPennTreeReader *new_EduStanfordNlpTreesPennTreeReader_initWithJavaIoReader_(JavaIoReader *inArg) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesPennTreeReader, initWithJavaIoReader_, inArg)
}

EduStanfordNlpTreesPennTreeReader *create_EduStanfordNlpTreesPennTreeReader_initWithJavaIoReader_(JavaIoReader *inArg) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesPennTreeReader, initWithJavaIoReader_, inArg)
}

void EduStanfordNlpTreesPennTreeReader_initWithJavaIoReader_withEduStanfordNlpTreesTreeFactory_(EduStanfordNlpTreesPennTreeReader *self, JavaIoReader *inArg, id<EduStanfordNlpTreesTreeFactory> tf) {
  EduStanfordNlpTreesPennTreeReader_initWithJavaIoReader_withEduStanfordNlpTreesTreeFactory_withEduStanfordNlpTreesTreeNormalizer_withEduStanfordNlpProcessTokenizer_(self, inArg, tf, nil, new_EduStanfordNlpTreesPennTreebankTokenizer_initWithJavaIoReader_(inArg));
}

EduStanfordNlpTreesPennTreeReader *new_EduStanfordNlpTreesPennTreeReader_initWithJavaIoReader_withEduStanfordNlpTreesTreeFactory_(JavaIoReader *inArg, id<EduStanfordNlpTreesTreeFactory> tf) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesPennTreeReader, initWithJavaIoReader_withEduStanfordNlpTreesTreeFactory_, inArg, tf)
}

EduStanfordNlpTreesPennTreeReader *create_EduStanfordNlpTreesPennTreeReader_initWithJavaIoReader_withEduStanfordNlpTreesTreeFactory_(JavaIoReader *inArg, id<EduStanfordNlpTreesTreeFactory> tf) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesPennTreeReader, initWithJavaIoReader_withEduStanfordNlpTreesTreeFactory_, inArg, tf)
}

void EduStanfordNlpTreesPennTreeReader_initWithJavaIoReader_withEduStanfordNlpTreesTreeFactory_withEduStanfordNlpTreesTreeNormalizer_(EduStanfordNlpTreesPennTreeReader *self, JavaIoReader *inArg, id<EduStanfordNlpTreesTreeFactory> tf, EduStanfordNlpTreesTreeNormalizer *tn) {
  EduStanfordNlpTreesPennTreeReader_initWithJavaIoReader_withEduStanfordNlpTreesTreeFactory_withEduStanfordNlpTreesTreeNormalizer_withEduStanfordNlpProcessTokenizer_(self, inArg, tf, tn, new_EduStanfordNlpTreesPennTreebankTokenizer_initWithJavaIoReader_(inArg));
}

EduStanfordNlpTreesPennTreeReader *new_EduStanfordNlpTreesPennTreeReader_initWithJavaIoReader_withEduStanfordNlpTreesTreeFactory_withEduStanfordNlpTreesTreeNormalizer_(JavaIoReader *inArg, id<EduStanfordNlpTreesTreeFactory> tf, EduStanfordNlpTreesTreeNormalizer *tn) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesPennTreeReader, initWithJavaIoReader_withEduStanfordNlpTreesTreeFactory_withEduStanfordNlpTreesTreeNormalizer_, inArg, tf, tn)
}

EduStanfordNlpTreesPennTreeReader *create_EduStanfordNlpTreesPennTreeReader_initWithJavaIoReader_withEduStanfordNlpTreesTreeFactory_withEduStanfordNlpTreesTreeNormalizer_(JavaIoReader *inArg, id<EduStanfordNlpTreesTreeFactory> tf, EduStanfordNlpTreesTreeNormalizer *tn) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesPennTreeReader, initWithJavaIoReader_withEduStanfordNlpTreesTreeFactory_withEduStanfordNlpTreesTreeNormalizer_, inArg, tf, tn)
}

void EduStanfordNlpTreesPennTreeReader_initWithJavaIoReader_withEduStanfordNlpTreesTreeFactory_withEduStanfordNlpTreesTreeNormalizer_withEduStanfordNlpProcessTokenizer_(EduStanfordNlpTreesPennTreeReader *self, JavaIoReader *inArg, id<EduStanfordNlpTreesTreeFactory> tf, EduStanfordNlpTreesTreeNormalizer *tn, id<EduStanfordNlpProcessTokenizer> st) {
  NSObject_init(self);
  self->reader_ = inArg;
  self->treeFactory_ = tf;
  self->treeNormalizer_ = tn;
  self->tokenizer_ = st;
  NSString *first = ([((id<EduStanfordNlpProcessTokenizer>) nil_chk(st)) hasNext] ? [st peek] : nil);
  if (first != nil && [first hasPrefix:@"*x*x*x"]) {
    jint foundCount = 0;
    while (foundCount < 4 && [st hasNext]) {
      first = [st next];
      if (first != nil && [first hasPrefix:@"*x*x*x"]) {
        foundCount++;
      }
    }
  }
}

EduStanfordNlpTreesPennTreeReader *new_EduStanfordNlpTreesPennTreeReader_initWithJavaIoReader_withEduStanfordNlpTreesTreeFactory_withEduStanfordNlpTreesTreeNormalizer_withEduStanfordNlpProcessTokenizer_(JavaIoReader *inArg, id<EduStanfordNlpTreesTreeFactory> tf, EduStanfordNlpTreesTreeNormalizer *tn, id<EduStanfordNlpProcessTokenizer> st) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesPennTreeReader, initWithJavaIoReader_withEduStanfordNlpTreesTreeFactory_withEduStanfordNlpTreesTreeNormalizer_withEduStanfordNlpProcessTokenizer_, inArg, tf, tn, st)
}

EduStanfordNlpTreesPennTreeReader *create_EduStanfordNlpTreesPennTreeReader_initWithJavaIoReader_withEduStanfordNlpTreesTreeFactory_withEduStanfordNlpTreesTreeNormalizer_withEduStanfordNlpProcessTokenizer_(JavaIoReader *inArg, id<EduStanfordNlpTreesTreeFactory> tf, EduStanfordNlpTreesTreeNormalizer *tn, id<EduStanfordNlpProcessTokenizer> st) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesPennTreeReader, initWithJavaIoReader_withEduStanfordNlpTreesTreeFactory_withEduStanfordNlpTreesTreeNormalizer_withEduStanfordNlpProcessTokenizer_, inArg, tf, tn, st)
}

EduStanfordNlpTreesTree *EduStanfordNlpTreesPennTreeReader_getTreeFromInputStream(EduStanfordNlpTreesPennTreeReader *self) {
  jint wordIndex = 1;
  while ([((id<EduStanfordNlpProcessTokenizer>) nil_chk(self->tokenizer_)) hasNext]) {
    NSString *token = [self->tokenizer_ next];
    {
      NSString *label;
      EduStanfordNlpTreesTree *newTree;
      NSString *terminal;
      EduStanfordNlpTreesTree *leaf;
      switch (JreIndexOfStr(token, (id[]){ EduStanfordNlpTreesPennTreeReader_leftParen, EduStanfordNlpTreesPennTreeReader_rightParen }, 2)) {
        case 0:
        label = ([((NSString *) nil_chk([self->tokenizer_ peek])) isEqual:EduStanfordNlpTreesPennTreeReader_leftParen]) ? nil : [self->tokenizer_ next];
        if ([((NSString *) nil_chk(EduStanfordNlpTreesPennTreeReader_rightParen)) isEqual:label]) {
          continue;
        }
        else if (self->treeNormalizer_ != nil) {
          label = [self->treeNormalizer_ normalizeNonterminalWithNSString:label];
        }
        if (label != nil) {
          label = [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(EduStanfordNlpTreesPennTreeReader_STAR_PATTERN)) matcherWithJavaLangCharSequence:label])) replaceAllWithNSString:@"*"];
          label = [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(EduStanfordNlpTreesPennTreeReader_SLASH_PATTERN)) matcherWithJavaLangCharSequence:label])) replaceAllWithNSString:@"/"];
        }
        newTree = [((id<EduStanfordNlpTreesTreeFactory>) nil_chk(self->treeFactory_)) newTreeNodeWithNSString:label withJavaUtilList:nil];
        if (self->currentTree_ == nil) [((JavaUtilArrayList *) nil_chk(self->stack_)) addWithId:newTree];
        else {
          [self->currentTree_ addChildWithEduStanfordNlpTreesTree:newTree];
          [((JavaUtilArrayList *) nil_chk(self->stack_)) addWithId:self->currentTree_];
        }
        self->currentTree_ = newTree;
        break;
        case 1:
        if ([((JavaUtilArrayList *) nil_chk(self->stack_)) isEmpty]) {
          [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"PennTreeReader: warning: file has extra non-matching right parenthesis [ignored]"];
          goto break_label;
        }
        self->currentTree_ = [((JavaUtilArrayList *) nil_chk(self->stack_)) removeWithInt:[self->stack_ size] - 1];
        if ([((JavaUtilArrayList *) nil_chk(self->stack_)) isEmpty]) return self->currentTree_;
        break;
        default:
        if (self->currentTree_ == nil) {
          goto break_label;
        }
        terminal = (self->treeNormalizer_ == nil) ? token : [((EduStanfordNlpTreesTreeNormalizer *) nil_chk(self->treeNormalizer_)) normalizeTerminalWithNSString:token];
        terminal = [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(EduStanfordNlpTreesPennTreeReader_STAR_PATTERN)) matcherWithJavaLangCharSequence:terminal])) replaceAllWithNSString:@"*"];
        terminal = [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(EduStanfordNlpTreesPennTreeReader_SLASH_PATTERN)) matcherWithJavaLangCharSequence:terminal])) replaceAllWithNSString:@"/"];
        leaf = [((id<EduStanfordNlpTreesTreeFactory>) nil_chk(self->treeFactory_)) newLeafWithNSString:terminal];
        if ([EduStanfordNlpLingHasIndex_class_() isInstance:[((EduStanfordNlpTreesTree *) nil_chk(leaf)) label]]) {
          id<EduStanfordNlpLingHasIndex> hi = (id<EduStanfordNlpLingHasIndex>) cast_check([leaf label], EduStanfordNlpLingHasIndex_class_());
          [((id<EduStanfordNlpLingHasIndex>) nil_chk(hi)) setIndexWithInt:wordIndex];
        }
        if ([EduStanfordNlpLingHasWord_class_() isInstance:[leaf label]]) {
          id<EduStanfordNlpLingHasWord> hw = (id<EduStanfordNlpLingHasWord>) cast_check([leaf label], EduStanfordNlpLingHasWord_class_());
          [((id<EduStanfordNlpLingHasWord>) nil_chk(hw)) setWordWithNSString:[((id<EduStanfordNlpLingLabel>) nil_chk([leaf label])) value]];
        }
        if ([EduStanfordNlpLingHasTag_class_() isInstance:[leaf label]]) {
          id<EduStanfordNlpLingHasTag> ht = (id<EduStanfordNlpLingHasTag>) cast_check([leaf label], EduStanfordNlpLingHasTag_class_());
          [((id<EduStanfordNlpLingHasTag>) nil_chk(ht)) setTagWithNSString:[((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(self->currentTree_)) label])) value]];
        }
        wordIndex++;
        [((EduStanfordNlpTreesTree *) nil_chk(self->currentTree_)) addChildWithEduStanfordNlpTreesTree:leaf];
        break;
      }
    }
  }
  break_label: ;
  if (self->currentTree_ != nil) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$@", @"PennTreeReader: warning: incomplete tree (extra left parentheses in input): ", self->currentTree_)];
  }
  return nil;
}

void EduStanfordNlpTreesPennTreeReader_mainWithNSStringArray_(IOSObjectArray *args) {
  EduStanfordNlpTreesPennTreeReader_initialize();
  @try {
    id<EduStanfordNlpTreesTreeFactory> tf = new_EduStanfordNlpTreesLabeledScoredTreeFactory_init();
    JavaIoReader *r = new_JavaIoBufferedReader_initWithJavaIoReader_(new_JavaIoInputStreamReader_initWithJavaIoInputStream_withNSString_(new_JavaIoFileInputStream_initWithNSString_(IOSObjectArray_Get(nil_chk(args), 0)), @"UTF-8"));
    id<EduStanfordNlpTreesTreeReader> tr = new_EduStanfordNlpTreesPennTreeReader_initWithJavaIoReader_withEduStanfordNlpTreesTreeFactory_(r, tf);
    EduStanfordNlpTreesTree *t = [tr readTree];
    while (t != nil) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithId:t];
      [JreLoadStatic(JavaLangSystem, out) println];
      t = [tr readTree];
    }
    [r close];
  }
  @catch (JavaIoIOException *ioe) {
    [((JavaIoIOException *) nil_chk(ioe)) printStackTrace];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTreesPennTreeReader)
