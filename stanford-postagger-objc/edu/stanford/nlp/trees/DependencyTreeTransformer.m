//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/trees/DependencyTreeTransformer.java
//

#include "J2ObjC_source.h"
#include "edu/stanford/nlp/trees/DependencyTreeTransformer.h"
#include "edu/stanford/nlp/trees/PennTreebankLanguagePack.h"
#include "edu/stanford/nlp/trees/Tree.h"
#include "edu/stanford/nlp/trees/TreebankLanguagePack.h"
#include "edu/stanford/nlp/trees/tregex/TregexPattern.h"
#include "edu/stanford/nlp/trees/tregex/tsurgeon/Tsurgeon.h"
#include "edu/stanford/nlp/trees/tregex/tsurgeon/TsurgeonPattern.h"
#include "java/util/List.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"

inline JavaUtilRegexPattern *EduStanfordNlpTreesDependencyTreeTransformer_get_TmpPattern();
static JavaUtilRegexPattern *EduStanfordNlpTreesDependencyTreeTransformer_TmpPattern;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpTreesDependencyTreeTransformer, TmpPattern, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *EduStanfordNlpTreesDependencyTreeTransformer_get_AdvPattern();
static JavaUtilRegexPattern *EduStanfordNlpTreesDependencyTreeTransformer_AdvPattern;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpTreesDependencyTreeTransformer, AdvPattern, JavaUtilRegexPattern *)

inline EduStanfordNlpTreesTregexTregexPattern *EduStanfordNlpTreesDependencyTreeTransformer_get_matchPattern();
static EduStanfordNlpTreesTregexTregexPattern *EduStanfordNlpTreesDependencyTreeTransformer_matchPattern;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpTreesDependencyTreeTransformer, matchPattern, EduStanfordNlpTreesTregexTregexPattern *)

inline EduStanfordNlpTreesTregexTsurgeonTsurgeonPattern *EduStanfordNlpTreesDependencyTreeTransformer_get_operation();
static EduStanfordNlpTreesTregexTsurgeonTsurgeonPattern *EduStanfordNlpTreesDependencyTreeTransformer_operation;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpTreesDependencyTreeTransformer, operation, EduStanfordNlpTreesTregexTsurgeonTsurgeonPattern *)

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpTreesDependencyTreeTransformer)

@implementation EduStanfordNlpTreesDependencyTreeTransformer

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpTreesDependencyTreeTransformer_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (EduStanfordNlpTreesTree *)transformTreeWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t {
  [((EduStanfordNlpTreesTree *) nil_chk(t)) setValueWithNSString:EduStanfordNlpTreesDependencyTreeTransformer_cleanUpRootWithNSString_([t value])];
  [self stripTagWithEduStanfordNlpTreesTree:t];
  return EduStanfordNlpTreesDependencyTreeTransformer_stripEmptyNodeWithEduStanfordNlpTreesTree_(t);
}

+ (NSString *)cleanUpRootWithNSString:(NSString *)label {
  return EduStanfordNlpTreesDependencyTreeTransformer_cleanUpRootWithNSString_(label);
}

- (NSString *)cleanUpLabelWithNSString:(NSString *)label {
  if (label == nil) {
    return @"";
  }
  jboolean nptemp = [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(EduStanfordNlpTreesDependencyTreeTransformer_TmpPattern)) matcherWithJavaLangCharSequence:label])) matches];
  jboolean npadv = [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(EduStanfordNlpTreesDependencyTreeTransformer_AdvPattern)) matcherWithJavaLangCharSequence:label])) matches];
  label = [((id<EduStanfordNlpTreesTreebankLanguagePack>) nil_chk(tlp_)) basicCategoryWithNSString:label];
  if (nptemp) {
    label = JreStrcat("$$", label, @"-TMP");
  }
  else if (npadv) {
    label = JreStrcat("$$", label, @"-ADV");
  }
  return label;
}

- (void)stripTagWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t {
  if (![((EduStanfordNlpTreesTree *) nil_chk(t)) isLeaf]) {
    NSString *label = [self cleanUpLabelWithNSString:[t value]];
    [t setValueWithNSString:label];
    for (EduStanfordNlpTreesTree * __strong child in nil_chk([t getChildrenAsList])) {
      [self stripTagWithEduStanfordNlpTreesTree:child];
    }
  }
}

+ (EduStanfordNlpTreesTree *)stripEmptyNodeWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t {
  return EduStanfordNlpTreesDependencyTreeTransformer_stripEmptyNodeWithEduStanfordNlpTreesTree_(t);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xc, 2, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, 4, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 5, 1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0xc, 6, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(transformTreeWithEduStanfordNlpTreesTree:);
  methods[2].selector = @selector(cleanUpRootWithNSString:);
  methods[3].selector = @selector(cleanUpLabelWithNSString:);
  methods[4].selector = @selector(stripTagWithEduStanfordNlpTreesTree:);
  methods[5].selector = @selector(stripEmptyNodeWithEduStanfordNlpTreesTree:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TmpPattern", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 7, -1, -1 },
    { "AdvPattern", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 8, -1, -1 },
    { "tlp_", "LEduStanfordNlpTreesTreebankLanguagePack;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "matchPattern", "LEduStanfordNlpTreesTregexTregexPattern;", .constantValue.asLong = 0, 0x1a, -1, 9, -1, -1 },
    { "operation", "LEduStanfordNlpTreesTregexTsurgeonTsurgeonPattern;", .constantValue.asLong = 0, 0x1a, -1, 10, -1, -1 },
  };
  static const void *ptrTable[] = { "transformTree", "LEduStanfordNlpTreesTree;", "cleanUpRoot", "LNSString;", "cleanUpLabel", "stripTag", "stripEmptyNode", &EduStanfordNlpTreesDependencyTreeTransformer_TmpPattern, &EduStanfordNlpTreesDependencyTreeTransformer_AdvPattern, &EduStanfordNlpTreesDependencyTreeTransformer_matchPattern, &EduStanfordNlpTreesDependencyTreeTransformer_operation };
  static const J2ObjcClassInfo _EduStanfordNlpTreesDependencyTreeTransformer = { "DependencyTreeTransformer", "edu.stanford.nlp.trees", ptrTable, methods, fields, 7, 0x1, 6, 5, -1, -1, -1, -1, -1 };
  return &_EduStanfordNlpTreesDependencyTreeTransformer;
}

+ (void)initialize {
  if (self == [EduStanfordNlpTreesDependencyTreeTransformer class]) {
    EduStanfordNlpTreesDependencyTreeTransformer_TmpPattern = JavaUtilRegexPattern_compileWithNSString_(@"(NP|UCP).*-TMP.*");
    EduStanfordNlpTreesDependencyTreeTransformer_AdvPattern = JavaUtilRegexPattern_compileWithNSString_(@"(NP|UCP).*-ADV.*");
    EduStanfordNlpTreesDependencyTreeTransformer_matchPattern = EduStanfordNlpTreesTregexTregexPattern_safeCompileWithNSString_withBoolean_(@"-NONE-=none", true);
    EduStanfordNlpTreesDependencyTreeTransformer_operation = EduStanfordNlpTreesTregexTsurgeonTsurgeon_parseOperationWithNSString_(@"prune none");
    J2OBJC_SET_INITIALIZED(EduStanfordNlpTreesDependencyTreeTransformer)
  }
}

@end

void EduStanfordNlpTreesDependencyTreeTransformer_init(EduStanfordNlpTreesDependencyTreeTransformer *self) {
  NSObject_init(self);
  self->tlp_ = new_EduStanfordNlpTreesPennTreebankLanguagePack_init();
}

EduStanfordNlpTreesDependencyTreeTransformer *new_EduStanfordNlpTreesDependencyTreeTransformer_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesDependencyTreeTransformer, init)
}

EduStanfordNlpTreesDependencyTreeTransformer *create_EduStanfordNlpTreesDependencyTreeTransformer_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesDependencyTreeTransformer, init)
}

NSString *EduStanfordNlpTreesDependencyTreeTransformer_cleanUpRootWithNSString_(NSString *label) {
  EduStanfordNlpTreesDependencyTreeTransformer_initialize();
  if (label == nil || [label isEqual:@"TOP"]) {
    return @"ROOT";
  }
  else {
    return label;
  }
}

EduStanfordNlpTreesTree *EduStanfordNlpTreesDependencyTreeTransformer_stripEmptyNodeWithEduStanfordNlpTreesTree_(EduStanfordNlpTreesTree *t) {
  EduStanfordNlpTreesDependencyTreeTransformer_initialize();
  return EduStanfordNlpTreesTregexTsurgeonTsurgeon_processPatternWithEduStanfordNlpTreesTregexTregexPattern_withEduStanfordNlpTreesTregexTsurgeonTsurgeonPattern_withEduStanfordNlpTreesTree_(EduStanfordNlpTreesDependencyTreeTransformer_matchPattern, EduStanfordNlpTreesDependencyTreeTransformer_operation, t);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTreesDependencyTreeTransformer)
