//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/trees/Trees.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/io/IOUtils.h"
#include "edu/stanford/nlp/ling/CoreAnnotations.h"
#include "edu/stanford/nlp/ling/CoreLabel.h"
#include "edu/stanford/nlp/ling/HasTag.h"
#include "edu/stanford/nlp/ling/HasWord.h"
#include "edu/stanford/nlp/ling/Label.h"
#include "edu/stanford/nlp/ling/LabelFactory.h"
#include "edu/stanford/nlp/ling/StringLabel.h"
#include "edu/stanford/nlp/ling/StringLabelFactory.h"
#include "edu/stanford/nlp/ling/TaggedWord.h"
#include "edu/stanford/nlp/trees/HeadFinder.h"
#include "edu/stanford/nlp/trees/LabeledScoredTreeFactory.h"
#include "edu/stanford/nlp/trees/LabeledScoredTreeNode.h"
#include "edu/stanford/nlp/trees/PennTreeReader.h"
#include "edu/stanford/nlp/trees/Tree.h"
#include "edu/stanford/nlp/trees/TreeFactory.h"
#include "edu/stanford/nlp/trees/TreeFunctions.h"
#include "edu/stanford/nlp/trees/TreeNormalizer.h"
#include "edu/stanford/nlp/trees/TreeVisitor.h"
#include "edu/stanford/nlp/trees/Trees.h"
#include "edu/stanford/nlp/util/Generics.h"
#include "edu/stanford/nlp/util/MutableInteger.h"
#include "edu/stanford/nlp/util/StringUtils.h"
#include "java/io/BufferedReader.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/InputStreamReader.h"
#include "java/io/PrintStream.h"
#include "java/io/StringReader.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "java/util/function/Function.h"

@interface EduStanfordNlpTreesTrees ()

- (instancetype)init;

+ (void)leavesWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
                         withJavaUtilList:(id<JavaUtilList>)l;

+ (void)preTerminalsWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
                               withJavaUtilList:(id<JavaUtilList>)l;

+ (void)leafLabelsWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
                             withJavaUtilList:(id<JavaUtilList>)l;

+ (void)taggedLeafLabelsWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
                                   withJavaUtilList:(id<JavaUtilList>)l;

+ (jint)treeToLatexHelperWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
                           withJavaLangStringBuilder:(JavaLangStringBuilder *)c
                           withJavaLangStringBuilder:(JavaLangStringBuilder *)h
                                             withInt:(jint)n
                                             withInt:(jint)nextN
                                             withInt:(jint)indent;

+ (jint)treeToLatexEvenHelperWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
                               withJavaLangStringBuilder:(JavaLangStringBuilder *)c
                               withJavaLangStringBuilder:(JavaLangStringBuilder *)h
                                                 withInt:(jint)n
                                                 withInt:(jint)nextN
                                                 withInt:(jint)indent
                                                 withInt:(jint)curDepth
                                                 withInt:(jint)maxDepth;

@end

inline EduStanfordNlpTreesLabeledScoredTreeFactory *EduStanfordNlpTreesTrees_get_defaultTreeFactory();
static EduStanfordNlpTreesLabeledScoredTreeFactory *EduStanfordNlpTreesTrees_defaultTreeFactory;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpTreesTrees, defaultTreeFactory, EduStanfordNlpTreesLabeledScoredTreeFactory *)

__attribute__((unused)) static void EduStanfordNlpTreesTrees_init(EduStanfordNlpTreesTrees *self);

__attribute__((unused)) static EduStanfordNlpTreesTrees *new_EduStanfordNlpTreesTrees_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpTreesTrees *create_EduStanfordNlpTreesTrees_init();

__attribute__((unused)) static void EduStanfordNlpTreesTrees_leavesWithEduStanfordNlpTreesTree_withJavaUtilList_(EduStanfordNlpTreesTree *t, id<JavaUtilList> l);

__attribute__((unused)) static void EduStanfordNlpTreesTrees_preTerminalsWithEduStanfordNlpTreesTree_withJavaUtilList_(EduStanfordNlpTreesTree *t, id<JavaUtilList> l);

__attribute__((unused)) static void EduStanfordNlpTreesTrees_leafLabelsWithEduStanfordNlpTreesTree_withJavaUtilList_(EduStanfordNlpTreesTree *t, id<JavaUtilList> l);

__attribute__((unused)) static void EduStanfordNlpTreesTrees_taggedLeafLabelsWithEduStanfordNlpTreesTree_withJavaUtilList_(EduStanfordNlpTreesTree *t, id<JavaUtilList> l);

__attribute__((unused)) static jint EduStanfordNlpTreesTrees_treeToLatexHelperWithEduStanfordNlpTreesTree_withJavaLangStringBuilder_withJavaLangStringBuilder_withInt_withInt_withInt_(EduStanfordNlpTreesTree *t, JavaLangStringBuilder *c, JavaLangStringBuilder *h, jint n, jint nextN, jint indent);

__attribute__((unused)) static jint EduStanfordNlpTreesTrees_treeToLatexEvenHelperWithEduStanfordNlpTreesTree_withJavaLangStringBuilder_withJavaLangStringBuilder_withInt_withInt_withInt_withInt_withInt_(EduStanfordNlpTreesTree *t, JavaLangStringBuilder *c, JavaLangStringBuilder *h, jint n, jint nextN, jint indent, jint curDepth, jint maxDepth);

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpTreesTrees)

@implementation EduStanfordNlpTreesTrees

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpTreesTrees_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jint)leftEdgeWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
                withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)root {
  return EduStanfordNlpTreesTrees_leftEdgeWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_(t, root);
}

+ (jint)leftEdgeUnsafeWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
                      withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)root {
  return EduStanfordNlpTreesTrees_leftEdgeUnsafeWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_(t, root);
}

+ (jboolean)leftEdgeWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
                    withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t1
           withEduStanfordNlpUtilMutableInteger:(EduStanfordNlpUtilMutableInteger *)i {
  return EduStanfordNlpTreesTrees_leftEdgeWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_withEduStanfordNlpUtilMutableInteger_(t, t1, i);
}

+ (jint)rightEdgeWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
                 withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)root {
  return EduStanfordNlpTreesTrees_rightEdgeWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_(t, root);
}

+ (jint)rightEdgeUnsafeWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
                       withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)root {
  return EduStanfordNlpTreesTrees_rightEdgeUnsafeWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_(t, root);
}

+ (jboolean)rightEdgeWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
                     withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t1
            withEduStanfordNlpUtilMutableInteger:(EduStanfordNlpUtilMutableInteger *)i {
  return EduStanfordNlpTreesTrees_rightEdgeWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_withEduStanfordNlpUtilMutableInteger_(t, t1, i);
}

+ (EduStanfordNlpTreesTree *)lexicalizeWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
                                 withEduStanfordNlpTreesHeadFinder:(id<EduStanfordNlpTreesHeadFinder>)hf {
  return EduStanfordNlpTreesTrees_lexicalizeWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesHeadFinder_(t, hf);
}

+ (id<JavaUtilList>)leavesWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t {
  return EduStanfordNlpTreesTrees_leavesWithEduStanfordNlpTreesTree_(t);
}

+ (void)leavesWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
                         withJavaUtilList:(id<JavaUtilList>)l {
  EduStanfordNlpTreesTrees_leavesWithEduStanfordNlpTreesTree_withJavaUtilList_(t, l);
}

+ (id<JavaUtilList>)preTerminalsWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t {
  return EduStanfordNlpTreesTrees_preTerminalsWithEduStanfordNlpTreesTree_(t);
}

+ (void)preTerminalsWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
                               withJavaUtilList:(id<JavaUtilList>)l {
  EduStanfordNlpTreesTrees_preTerminalsWithEduStanfordNlpTreesTree_withJavaUtilList_(t, l);
}

+ (id<JavaUtilList>)leafLabelsWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t {
  return EduStanfordNlpTreesTrees_leafLabelsWithEduStanfordNlpTreesTree_(t);
}

+ (void)leafLabelsWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
                             withJavaUtilList:(id<JavaUtilList>)l {
  EduStanfordNlpTreesTrees_leafLabelsWithEduStanfordNlpTreesTree_withJavaUtilList_(t, l);
}

+ (id<JavaUtilList>)taggedLeafLabelsWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t {
  return EduStanfordNlpTreesTrees_taggedLeafLabelsWithEduStanfordNlpTreesTree_(t);
}

+ (void)taggedLeafLabelsWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
                                   withJavaUtilList:(id<JavaUtilList>)l {
  EduStanfordNlpTreesTrees_taggedLeafLabelsWithEduStanfordNlpTreesTree_withJavaUtilList_(t, l);
}

+ (void)setLeafTagsIfUnsetWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)tree {
  EduStanfordNlpTreesTrees_setLeafTagsIfUnsetWithEduStanfordNlpTreesTree_(tree);
}

+ (void)setLeafLabelsWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)tree
                                withJavaUtilList:(id<JavaUtilList>)labels {
  EduStanfordNlpTreesTrees_setLeafLabelsWithEduStanfordNlpTreesTree_withJavaUtilList_(tree, labels);
}

+ (EduStanfordNlpTreesTree *)maximalProjectionWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)head
                                              withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)root
                                        withEduStanfordNlpTreesHeadFinder:(id<EduStanfordNlpTreesHeadFinder>)hf {
  return EduStanfordNlpTreesTrees_maximalProjectionWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_withEduStanfordNlpTreesHeadFinder_(head, root, hf);
}

+ (EduStanfordNlpTreesTree *)applyToProjectionsWithEduStanfordNlpTreesTreeVisitor:(id<EduStanfordNlpTreesTreeVisitor>)v
                                                      withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)head
                                                      withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)root
                                                withEduStanfordNlpTreesHeadFinder:(id<EduStanfordNlpTreesHeadFinder>)hf {
  return EduStanfordNlpTreesTrees_applyToProjectionsWithEduStanfordNlpTreesTreeVisitor_withEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_withEduStanfordNlpTreesHeadFinder_(v, head, root, hf);
}

+ (EduStanfordNlpTreesTree *)getTerminalWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)tree
                                                            withInt:(jint)n {
  return EduStanfordNlpTreesTrees_getTerminalWithEduStanfordNlpTreesTree_withInt_(tree, n);
}

+ (EduStanfordNlpTreesTree *)getTerminalWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)tree
                               withEduStanfordNlpUtilMutableInteger:(EduStanfordNlpUtilMutableInteger *)i
                                                            withInt:(jint)n {
  return EduStanfordNlpTreesTrees_getTerminalWithEduStanfordNlpTreesTree_withEduStanfordNlpUtilMutableInteger_withInt_(tree, i, n);
}

+ (EduStanfordNlpTreesTree *)getPreTerminalWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)tree
                                                               withInt:(jint)n {
  return EduStanfordNlpTreesTrees_getPreTerminalWithEduStanfordNlpTreesTree_withInt_(tree, n);
}

+ (EduStanfordNlpTreesTree *)getPreTerminalWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)tree
                                  withEduStanfordNlpUtilMutableInteger:(EduStanfordNlpUtilMutableInteger *)i
                                                               withInt:(jint)n {
  return EduStanfordNlpTreesTrees_getPreTerminalWithEduStanfordNlpTreesTree_withEduStanfordNlpUtilMutableInteger_withInt_(tree, i, n);
}

+ (id<JavaUtilList>)localTreeAsCatListWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t {
  return EduStanfordNlpTreesTrees_localTreeAsCatListWithEduStanfordNlpTreesTree_(t);
}

+ (jint)objectEqualityIndexOfWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)parent
                             withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)daughter {
  return EduStanfordNlpTreesTrees_objectEqualityIndexOfWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_(parent, daughter);
}

+ (NSString *)toStructureDebugStringWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t {
  return EduStanfordNlpTreesTrees_toStructureDebugStringWithEduStanfordNlpTreesTree_(t);
}

+ (EduStanfordNlpTreesTree *)toFlatTreeWithJavaUtilList:(id<JavaUtilList>)s {
  return EduStanfordNlpTreesTrees_toFlatTreeWithJavaUtilList_(s);
}

+ (EduStanfordNlpTreesTree *)toFlatTreeWithJavaUtilList:(id<JavaUtilList>)s
                     withEduStanfordNlpLingLabelFactory:(id<EduStanfordNlpLingLabelFactory>)lf {
  return EduStanfordNlpTreesTrees_toFlatTreeWithJavaUtilList_withEduStanfordNlpLingLabelFactory_(s, lf);
}

+ (NSString *)treeToLatexWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t {
  return EduStanfordNlpTreesTrees_treeToLatexWithEduStanfordNlpTreesTree_(t);
}

+ (jint)treeToLatexHelperWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
                           withJavaLangStringBuilder:(JavaLangStringBuilder *)c
                           withJavaLangStringBuilder:(JavaLangStringBuilder *)h
                                             withInt:(jint)n
                                             withInt:(jint)nextN
                                             withInt:(jint)indent {
  return EduStanfordNlpTreesTrees_treeToLatexHelperWithEduStanfordNlpTreesTree_withJavaLangStringBuilder_withJavaLangStringBuilder_withInt_withInt_withInt_(t, c, h, n, nextN, indent);
}

+ (NSString *)treeToLatexEvenWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t {
  return EduStanfordNlpTreesTrees_treeToLatexEvenWithEduStanfordNlpTreesTree_(t);
}

+ (jint)treeToLatexEvenHelperWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
                               withJavaLangStringBuilder:(JavaLangStringBuilder *)c
                               withJavaLangStringBuilder:(JavaLangStringBuilder *)h
                                                 withInt:(jint)n
                                                 withInt:(jint)nextN
                                                 withInt:(jint)indent
                                                 withInt:(jint)curDepth
                                                 withInt:(jint)maxDepth {
  return EduStanfordNlpTreesTrees_treeToLatexEvenHelperWithEduStanfordNlpTreesTree_withJavaLangStringBuilder_withJavaLangStringBuilder_withInt_withInt_withInt_withInt_withInt_(t, c, h, n, nextN, indent, curDepth, maxDepth);
}

+ (NSString *)texTreeWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t {
  return EduStanfordNlpTreesTrees_texTreeWithEduStanfordNlpTreesTree_(t);
}

+ (NSString *)escapeWithNSString:(NSString *)s {
  return EduStanfordNlpTreesTrees_escapeWithNSString_(s);
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  EduStanfordNlpTreesTrees_mainWithNSStringArray_(args);
}

+ (EduStanfordNlpTreesTree *)normalizeTreeWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)tree
                                withEduStanfordNlpTreesTreeNormalizer:(EduStanfordNlpTreesTreeNormalizer *)tn
                                   withEduStanfordNlpTreesTreeFactory:(id<EduStanfordNlpTreesTreeFactory>)tf {
  return EduStanfordNlpTreesTrees_normalizeTreeWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTreeNormalizer_withEduStanfordNlpTreesTreeFactory_(tree, tn, tf);
}

+ (EduStanfordNlpTreesTree *)getLeafWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)tree
                                                        withInt:(jint)i {
  return EduStanfordNlpTreesTrees_getLeafWithEduStanfordNlpTreesTree_withInt_(tree, i);
}

+ (EduStanfordNlpTreesTree *)getLowestCommonAncestorWithJavaUtilList:(id<JavaUtilList>)nodes
                                         withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)root {
  return EduStanfordNlpTreesTrees_getLowestCommonAncestorWithJavaUtilList_withEduStanfordNlpTreesTree_(nodes, root);
}

+ (id<JavaUtilList>)pathNodeToNodeWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)from
                                  withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)to
                                  withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)root {
  return EduStanfordNlpTreesTrees_pathNodeToNodeWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_(from, to, root);
}

+ (id<JavaUtilList>)pathFromRootWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t
                                withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)root {
  return EduStanfordNlpTreesTrees_pathFromRootWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_(t, root);
}

+ (void)replaceNodeWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)node
                   withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)node1
                   withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t {
  EduStanfordNlpTreesTrees_replaceNodeWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_(node, node1, t);
}

+ (EduStanfordNlpTreesTree *)getLowestCommonAncestorWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t1
                                                    withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)t2
                                                    withEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)root {
  return EduStanfordNlpTreesTrees_getLowestCommonAncestorWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_(t1, t2, root);
}

+ (EduStanfordNlpTreesTree *)readTreeWithNSString:(NSString *)ptbTreeString
               withEduStanfordNlpTreesTreeFactory:(id<EduStanfordNlpTreesTreeFactory>)treeFactory {
  return EduStanfordNlpTreesTrees_readTreeWithNSString_withEduStanfordNlpTreesTreeFactory_(ptbTreeString, treeFactory);
}

+ (EduStanfordNlpTreesTree *)readTreeWithNSString:(NSString *)str {
  return EduStanfordNlpTreesTrees_readTreeWithNSString_(str);
}

+ (void)outputTreeLabelsWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)tree {
  EduStanfordNlpTreesTrees_outputTreeLabelsWithEduStanfordNlpTreesTree_(tree);
}

+ (void)outputTreeLabelsWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)tree
                                            withInt:(jint)depth {
  EduStanfordNlpTreesTrees_outputTreeLabelsWithEduStanfordNlpTreesTree_withInt_(tree, depth);
}

+ (void)convertToCoreLabelsWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)tree {
  EduStanfordNlpTreesTrees_convertToCoreLabelsWithEduStanfordNlpTreesTree_(tree);
}

+ (void)setSentIndexWithEduStanfordNlpTreesTree:(EduStanfordNlpTreesTree *)tree
                                        withInt:(jint)sentIndex {
  EduStanfordNlpTreesTrees_setSentIndexWithEduStanfordNlpTreesTree_withInt_(tree, sentIndex);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 2, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x8, 0, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 4, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 5, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x8, 4, 3, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x9, 6, 7, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 8, 9, -1, 10, -1, -1 },
    { NULL, "V", 0xa, 8, 11, -1, 12, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 13, 9, -1, 10, -1, -1 },
    { NULL, "V", 0xa, 13, 11, -1, 12, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 14, 9, -1, 15, -1, -1 },
    { NULL, "V", 0xa, 14, 11, -1, 16, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 17, 9, -1, 18, -1, -1 },
    { NULL, "V", 0xa, 17, 11, -1, 19, -1, -1 },
    { NULL, "V", 0x9, 20, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 21, 11, -1, 16, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x9, 22, 23, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x9, 24, 25, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x9, 26, 27, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x8, 26, 28, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x9, 29, 27, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x8, 29, 28, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 30, 9, -1, 31, -1, -1 },
    { NULL, "I", 0x9, 32, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 33, 9, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x9, 34, 35, -1, 36, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x9, 34, 37, -1, 38, -1, -1 },
    { NULL, "LNSString;", 0x9, 39, 9, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 40, 41, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 42, 9, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 43, 44, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x8, 45, 9, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x8, 46, 47, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 48, 49, 50, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x9, 51, 52, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x9, 53, 27, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x9, 54, 55, -1, 56, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 57, 58, -1, 59, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 60, 1, -1, 61, -1, -1 },
    { NULL, "V", 0x9, 62, 58, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x9, 54, 58, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x9, 63, 64, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTreesTree;", 0x9, 63, 47, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 65, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 65, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 66, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 67, 27, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(leftEdgeWithEduStanfordNlpTreesTree:withEduStanfordNlpTreesTree:);
  methods[2].selector = @selector(leftEdgeUnsafeWithEduStanfordNlpTreesTree:withEduStanfordNlpTreesTree:);
  methods[3].selector = @selector(leftEdgeWithEduStanfordNlpTreesTree:withEduStanfordNlpTreesTree:withEduStanfordNlpUtilMutableInteger:);
  methods[4].selector = @selector(rightEdgeWithEduStanfordNlpTreesTree:withEduStanfordNlpTreesTree:);
  methods[5].selector = @selector(rightEdgeUnsafeWithEduStanfordNlpTreesTree:withEduStanfordNlpTreesTree:);
  methods[6].selector = @selector(rightEdgeWithEduStanfordNlpTreesTree:withEduStanfordNlpTreesTree:withEduStanfordNlpUtilMutableInteger:);
  methods[7].selector = @selector(lexicalizeWithEduStanfordNlpTreesTree:withEduStanfordNlpTreesHeadFinder:);
  methods[8].selector = @selector(leavesWithEduStanfordNlpTreesTree:);
  methods[9].selector = @selector(leavesWithEduStanfordNlpTreesTree:withJavaUtilList:);
  methods[10].selector = @selector(preTerminalsWithEduStanfordNlpTreesTree:);
  methods[11].selector = @selector(preTerminalsWithEduStanfordNlpTreesTree:withJavaUtilList:);
  methods[12].selector = @selector(leafLabelsWithEduStanfordNlpTreesTree:);
  methods[13].selector = @selector(leafLabelsWithEduStanfordNlpTreesTree:withJavaUtilList:);
  methods[14].selector = @selector(taggedLeafLabelsWithEduStanfordNlpTreesTree:);
  methods[15].selector = @selector(taggedLeafLabelsWithEduStanfordNlpTreesTree:withJavaUtilList:);
  methods[16].selector = @selector(setLeafTagsIfUnsetWithEduStanfordNlpTreesTree:);
  methods[17].selector = @selector(setLeafLabelsWithEduStanfordNlpTreesTree:withJavaUtilList:);
  methods[18].selector = @selector(maximalProjectionWithEduStanfordNlpTreesTree:withEduStanfordNlpTreesTree:withEduStanfordNlpTreesHeadFinder:);
  methods[19].selector = @selector(applyToProjectionsWithEduStanfordNlpTreesTreeVisitor:withEduStanfordNlpTreesTree:withEduStanfordNlpTreesTree:withEduStanfordNlpTreesHeadFinder:);
  methods[20].selector = @selector(getTerminalWithEduStanfordNlpTreesTree:withInt:);
  methods[21].selector = @selector(getTerminalWithEduStanfordNlpTreesTree:withEduStanfordNlpUtilMutableInteger:withInt:);
  methods[22].selector = @selector(getPreTerminalWithEduStanfordNlpTreesTree:withInt:);
  methods[23].selector = @selector(getPreTerminalWithEduStanfordNlpTreesTree:withEduStanfordNlpUtilMutableInteger:withInt:);
  methods[24].selector = @selector(localTreeAsCatListWithEduStanfordNlpTreesTree:);
  methods[25].selector = @selector(objectEqualityIndexOfWithEduStanfordNlpTreesTree:withEduStanfordNlpTreesTree:);
  methods[26].selector = @selector(toStructureDebugStringWithEduStanfordNlpTreesTree:);
  methods[27].selector = @selector(toFlatTreeWithJavaUtilList:);
  methods[28].selector = @selector(toFlatTreeWithJavaUtilList:withEduStanfordNlpLingLabelFactory:);
  methods[29].selector = @selector(treeToLatexWithEduStanfordNlpTreesTree:);
  methods[30].selector = @selector(treeToLatexHelperWithEduStanfordNlpTreesTree:withJavaLangStringBuilder:withJavaLangStringBuilder:withInt:withInt:withInt:);
  methods[31].selector = @selector(treeToLatexEvenWithEduStanfordNlpTreesTree:);
  methods[32].selector = @selector(treeToLatexEvenHelperWithEduStanfordNlpTreesTree:withJavaLangStringBuilder:withJavaLangStringBuilder:withInt:withInt:withInt:withInt:withInt:);
  methods[33].selector = @selector(texTreeWithEduStanfordNlpTreesTree:);
  methods[34].selector = @selector(escapeWithNSString:);
  methods[35].selector = @selector(mainWithNSStringArray:);
  methods[36].selector = @selector(normalizeTreeWithEduStanfordNlpTreesTree:withEduStanfordNlpTreesTreeNormalizer:withEduStanfordNlpTreesTreeFactory:);
  methods[37].selector = @selector(getLeafWithEduStanfordNlpTreesTree:withInt:);
  methods[38].selector = @selector(getLowestCommonAncestorWithJavaUtilList:withEduStanfordNlpTreesTree:);
  methods[39].selector = @selector(pathNodeToNodeWithEduStanfordNlpTreesTree:withEduStanfordNlpTreesTree:withEduStanfordNlpTreesTree:);
  methods[40].selector = @selector(pathFromRootWithEduStanfordNlpTreesTree:withEduStanfordNlpTreesTree:);
  methods[41].selector = @selector(replaceNodeWithEduStanfordNlpTreesTree:withEduStanfordNlpTreesTree:withEduStanfordNlpTreesTree:);
  methods[42].selector = @selector(getLowestCommonAncestorWithEduStanfordNlpTreesTree:withEduStanfordNlpTreesTree:withEduStanfordNlpTreesTree:);
  methods[43].selector = @selector(readTreeWithNSString:withEduStanfordNlpTreesTreeFactory:);
  methods[44].selector = @selector(readTreeWithNSString:);
  methods[45].selector = @selector(outputTreeLabelsWithEduStanfordNlpTreesTree:);
  methods[46].selector = @selector(outputTreeLabelsWithEduStanfordNlpTreesTree:withInt:);
  methods[47].selector = @selector(convertToCoreLabelsWithEduStanfordNlpTreesTree:);
  methods[48].selector = @selector(setSentIndexWithEduStanfordNlpTreesTree:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "defaultTreeFactory", "LEduStanfordNlpTreesLabeledScoredTreeFactory;", .constantValue.asLong = 0, 0x1a, -1, 68, -1, -1 },
  };
  static const void *ptrTable[] = { "leftEdge", "LEduStanfordNlpTreesTree;LEduStanfordNlpTreesTree;", "leftEdgeUnsafe", "LEduStanfordNlpTreesTree;LEduStanfordNlpTreesTree;LEduStanfordNlpUtilMutableInteger;", "rightEdge", "rightEdgeUnsafe", "lexicalize", "LEduStanfordNlpTreesTree;LEduStanfordNlpTreesHeadFinder;", "leaves", "LEduStanfordNlpTreesTree;", "(Ledu/stanford/nlp/trees/Tree;)Ljava/util/List<Ledu/stanford/nlp/trees/Tree;>;", "LEduStanfordNlpTreesTree;LJavaUtilList;", "(Ledu/stanford/nlp/trees/Tree;Ljava/util/List<Ledu/stanford/nlp/trees/Tree;>;)V", "preTerminals", "leafLabels", "(Ledu/stanford/nlp/trees/Tree;)Ljava/util/List<Ledu/stanford/nlp/ling/Label;>;", "(Ledu/stanford/nlp/trees/Tree;Ljava/util/List<Ledu/stanford/nlp/ling/Label;>;)V", "taggedLeafLabels", "(Ledu/stanford/nlp/trees/Tree;)Ljava/util/List<Ledu/stanford/nlp/ling/CoreLabel;>;", "(Ledu/stanford/nlp/trees/Tree;Ljava/util/List<Ledu/stanford/nlp/ling/CoreLabel;>;)V", "setLeafTagsIfUnset", "setLeafLabels", "maximalProjection", "LEduStanfordNlpTreesTree;LEduStanfordNlpTreesTree;LEduStanfordNlpTreesHeadFinder;", "applyToProjections", "LEduStanfordNlpTreesTreeVisitor;LEduStanfordNlpTreesTree;LEduStanfordNlpTreesTree;LEduStanfordNlpTreesHeadFinder;", "getTerminal", "LEduStanfordNlpTreesTree;I", "LEduStanfordNlpTreesTree;LEduStanfordNlpUtilMutableInteger;I", "getPreTerminal", "localTreeAsCatList", "(Ledu/stanford/nlp/trees/Tree;)Ljava/util/List<Ljava/lang/String;>;", "objectEqualityIndexOf", "toStructureDebugString", "toFlatTree", "LJavaUtilList;", "(Ljava/util/List<Ledu/stanford/nlp/ling/HasWord;>;)Ledu/stanford/nlp/trees/Tree;", "LJavaUtilList;LEduStanfordNlpLingLabelFactory;", "(Ljava/util/List<+Ledu/stanford/nlp/ling/HasWord;>;Ledu/stanford/nlp/ling/LabelFactory;)Ledu/stanford/nlp/trees/Tree;", "treeToLatex", "treeToLatexHelper", "LEduStanfordNlpTreesTree;LJavaLangStringBuilder;LJavaLangStringBuilder;III", "treeToLatexEven", "treeToLatexEvenHelper", "LEduStanfordNlpTreesTree;LJavaLangStringBuilder;LJavaLangStringBuilder;IIIII", "texTree", "escape", "LNSString;", "main", "[LNSString;", "LJavaIoIOException;", "normalizeTree", "LEduStanfordNlpTreesTree;LEduStanfordNlpTreesTreeNormalizer;LEduStanfordNlpTreesTreeFactory;", "getLeaf", "getLowestCommonAncestor", "LJavaUtilList;LEduStanfordNlpTreesTree;", "(Ljava/util/List<Ledu/stanford/nlp/trees/Tree;>;Ledu/stanford/nlp/trees/Tree;)Ledu/stanford/nlp/trees/Tree;", "pathNodeToNode", "LEduStanfordNlpTreesTree;LEduStanfordNlpTreesTree;LEduStanfordNlpTreesTree;", "(Ledu/stanford/nlp/trees/Tree;Ledu/stanford/nlp/trees/Tree;Ledu/stanford/nlp/trees/Tree;)Ljava/util/List<Ljava/lang/String;>;", "pathFromRoot", "(Ledu/stanford/nlp/trees/Tree;Ledu/stanford/nlp/trees/Tree;)Ljava/util/List<Ledu/stanford/nlp/trees/Tree;>;", "replaceNode", "readTree", "LNSString;LEduStanfordNlpTreesTreeFactory;", "outputTreeLabels", "convertToCoreLabels", "setSentIndex", &EduStanfordNlpTreesTrees_defaultTreeFactory };
  static const J2ObjcClassInfo _EduStanfordNlpTreesTrees = { "Trees", "edu.stanford.nlp.trees", ptrTable, methods, fields, 7, 0x1, 49, 1, -1, -1, -1, -1, -1 };
  return &_EduStanfordNlpTreesTrees;
}

+ (void)initialize {
  if (self == [EduStanfordNlpTreesTrees class]) {
    EduStanfordNlpTreesTrees_defaultTreeFactory = new_EduStanfordNlpTreesLabeledScoredTreeFactory_init();
    J2OBJC_SET_INITIALIZED(EduStanfordNlpTreesTrees)
  }
}

@end

void EduStanfordNlpTreesTrees_init(EduStanfordNlpTreesTrees *self) {
  NSObject_init(self);
}

EduStanfordNlpTreesTrees *new_EduStanfordNlpTreesTrees_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpTreesTrees, init)
}

EduStanfordNlpTreesTrees *create_EduStanfordNlpTreesTrees_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTreesTrees, init)
}

jint EduStanfordNlpTreesTrees_leftEdgeWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_(EduStanfordNlpTreesTree *t, EduStanfordNlpTreesTree *root) {
  EduStanfordNlpTreesTrees_initialize();
  EduStanfordNlpUtilMutableInteger *i = new_EduStanfordNlpUtilMutableInteger_initWithInt_(0);
  if (EduStanfordNlpTreesTrees_leftEdgeWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_withEduStanfordNlpUtilMutableInteger_(t, root, i)) {
    return [i intValue];
  }
  else {
    @throw new_JavaLangRuntimeException_initWithNSString_(@"Tree is not a descendant of root.");
  }
}

jint EduStanfordNlpTreesTrees_leftEdgeUnsafeWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_(EduStanfordNlpTreesTree *t, EduStanfordNlpTreesTree *root) {
  EduStanfordNlpTreesTrees_initialize();
  EduStanfordNlpUtilMutableInteger *i = new_EduStanfordNlpUtilMutableInteger_initWithInt_(0);
  if (EduStanfordNlpTreesTrees_leftEdgeWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_withEduStanfordNlpUtilMutableInteger_(t, root, i)) {
    return [i intValue];
  }
  else {
    return -1;
  }
}

jboolean EduStanfordNlpTreesTrees_leftEdgeWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_withEduStanfordNlpUtilMutableInteger_(EduStanfordNlpTreesTree *t, EduStanfordNlpTreesTree *t1, EduStanfordNlpUtilMutableInteger *i) {
  EduStanfordNlpTreesTrees_initialize();
  if (t == t1) {
    return true;
  }
  else if ([((EduStanfordNlpTreesTree *) nil_chk(t1)) isLeaf]) {
    jint j = [((JavaUtilArrayList *) nil_chk([t1 yield])) size];
    [((EduStanfordNlpUtilMutableInteger *) nil_chk(i)) setWithInt:[i intValue] + j];
    return false;
  }
  else {
    {
      IOSObjectArray *a__ = [t1 children];
      EduStanfordNlpTreesTree * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        EduStanfordNlpTreesTree *kid = *b__++;
        if (EduStanfordNlpTreesTrees_leftEdgeWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_withEduStanfordNlpUtilMutableInteger_(t, kid, i)) {
          return true;
        }
      }
    }
    return false;
  }
}

jint EduStanfordNlpTreesTrees_rightEdgeWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_(EduStanfordNlpTreesTree *t, EduStanfordNlpTreesTree *root) {
  EduStanfordNlpTreesTrees_initialize();
  EduStanfordNlpUtilMutableInteger *i = new_EduStanfordNlpUtilMutableInteger_initWithInt_([((JavaUtilArrayList *) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(root)) yield])) size]);
  if (EduStanfordNlpTreesTrees_rightEdgeWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_withEduStanfordNlpUtilMutableInteger_(t, root, i)) {
    return [i intValue];
  }
  else {
    @throw new_JavaLangRuntimeException_initWithNSString_(@"Tree is not a descendant of root.");
  }
}

jint EduStanfordNlpTreesTrees_rightEdgeUnsafeWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_(EduStanfordNlpTreesTree *t, EduStanfordNlpTreesTree *root) {
  EduStanfordNlpTreesTrees_initialize();
  EduStanfordNlpUtilMutableInteger *i = new_EduStanfordNlpUtilMutableInteger_initWithInt_([((JavaUtilArrayList *) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(root)) yield])) size]);
  if (EduStanfordNlpTreesTrees_rightEdgeWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_withEduStanfordNlpUtilMutableInteger_(t, root, i)) {
    return [i intValue];
  }
  else {
    return [((JavaUtilArrayList *) nil_chk([root yield])) size] + 1;
  }
}

jboolean EduStanfordNlpTreesTrees_rightEdgeWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_withEduStanfordNlpUtilMutableInteger_(EduStanfordNlpTreesTree *t, EduStanfordNlpTreesTree *t1, EduStanfordNlpUtilMutableInteger *i) {
  EduStanfordNlpTreesTrees_initialize();
  if (t == t1) {
    return true;
  }
  else if ([((EduStanfordNlpTreesTree *) nil_chk(t1)) isLeaf]) {
    jint j = [((JavaUtilArrayList *) nil_chk([t1 yield])) size];
    [((EduStanfordNlpUtilMutableInteger *) nil_chk(i)) setWithInt:[i intValue] - j];
    return false;
  }
  else {
    IOSObjectArray *kids = [t1 children];
    for (jint j = ((IOSObjectArray *) nil_chk(kids))->size_ - 1; j >= 0; j--) {
      if (EduStanfordNlpTreesTrees_rightEdgeWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_withEduStanfordNlpUtilMutableInteger_(t, IOSObjectArray_Get(kids, j), i)) {
        return true;
      }
    }
    return false;
  }
}

EduStanfordNlpTreesTree *EduStanfordNlpTreesTrees_lexicalizeWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesHeadFinder_(EduStanfordNlpTreesTree *t, id<EduStanfordNlpTreesHeadFinder> hf) {
  EduStanfordNlpTreesTrees_initialize();
  id<JavaUtilFunctionFunction> a = EduStanfordNlpTreesTreeFunctions_getLabeledTreeToCategoryWordTagTreeFunction();
  EduStanfordNlpTreesTree *t1 = [((id<JavaUtilFunctionFunction>) nil_chk(a)) applyWithId:t];
  [((EduStanfordNlpTreesTree *) nil_chk(t1)) percolateHeadsWithEduStanfordNlpTreesHeadFinder:hf];
  return t1;
}

id<JavaUtilList> EduStanfordNlpTreesTrees_leavesWithEduStanfordNlpTreesTree_(EduStanfordNlpTreesTree *t) {
  EduStanfordNlpTreesTrees_initialize();
  id<JavaUtilList> l = new_JavaUtilArrayList_init();
  EduStanfordNlpTreesTrees_leavesWithEduStanfordNlpTreesTree_withJavaUtilList_(t, l);
  return l;
}

void EduStanfordNlpTreesTrees_leavesWithEduStanfordNlpTreesTree_withJavaUtilList_(EduStanfordNlpTreesTree *t, id<JavaUtilList> l) {
  EduStanfordNlpTreesTrees_initialize();
  if ([((EduStanfordNlpTreesTree *) nil_chk(t)) isLeaf]) {
    [((id<JavaUtilList>) nil_chk(l)) addWithId:t];
  }
  else {
    {
      IOSObjectArray *a__ = [t children];
      EduStanfordNlpTreesTree * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        EduStanfordNlpTreesTree *kid = *b__++;
        EduStanfordNlpTreesTrees_leavesWithEduStanfordNlpTreesTree_withJavaUtilList_(kid, l);
      }
    }
  }
}

id<JavaUtilList> EduStanfordNlpTreesTrees_preTerminalsWithEduStanfordNlpTreesTree_(EduStanfordNlpTreesTree *t) {
  EduStanfordNlpTreesTrees_initialize();
  id<JavaUtilList> l = new_JavaUtilArrayList_init();
  EduStanfordNlpTreesTrees_preTerminalsWithEduStanfordNlpTreesTree_withJavaUtilList_(t, l);
  return l;
}

void EduStanfordNlpTreesTrees_preTerminalsWithEduStanfordNlpTreesTree_withJavaUtilList_(EduStanfordNlpTreesTree *t, id<JavaUtilList> l) {
  EduStanfordNlpTreesTrees_initialize();
  if ([((EduStanfordNlpTreesTree *) nil_chk(t)) isPreTerminal]) {
    [((id<JavaUtilList>) nil_chk(l)) addWithId:t];
  }
  else {
    {
      IOSObjectArray *a__ = [t children];
      EduStanfordNlpTreesTree * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        EduStanfordNlpTreesTree *kid = *b__++;
        EduStanfordNlpTreesTrees_preTerminalsWithEduStanfordNlpTreesTree_withJavaUtilList_(kid, l);
      }
    }
  }
}

id<JavaUtilList> EduStanfordNlpTreesTrees_leafLabelsWithEduStanfordNlpTreesTree_(EduStanfordNlpTreesTree *t) {
  EduStanfordNlpTreesTrees_initialize();
  id<JavaUtilList> l = new_JavaUtilArrayList_init();
  EduStanfordNlpTreesTrees_leafLabelsWithEduStanfordNlpTreesTree_withJavaUtilList_(t, l);
  return l;
}

void EduStanfordNlpTreesTrees_leafLabelsWithEduStanfordNlpTreesTree_withJavaUtilList_(EduStanfordNlpTreesTree *t, id<JavaUtilList> l) {
  EduStanfordNlpTreesTrees_initialize();
  if ([((EduStanfordNlpTreesTree *) nil_chk(t)) isLeaf]) {
    [((id<JavaUtilList>) nil_chk(l)) addWithId:[t label]];
  }
  else {
    {
      IOSObjectArray *a__ = [t children];
      EduStanfordNlpTreesTree * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        EduStanfordNlpTreesTree *kid = *b__++;
        EduStanfordNlpTreesTrees_leafLabelsWithEduStanfordNlpTreesTree_withJavaUtilList_(kid, l);
      }
    }
  }
}

id<JavaUtilList> EduStanfordNlpTreesTrees_taggedLeafLabelsWithEduStanfordNlpTreesTree_(EduStanfordNlpTreesTree *t) {
  EduStanfordNlpTreesTrees_initialize();
  id<JavaUtilList> l = new_JavaUtilArrayList_init();
  EduStanfordNlpTreesTrees_taggedLeafLabelsWithEduStanfordNlpTreesTree_withJavaUtilList_(t, l);
  return l;
}

void EduStanfordNlpTreesTrees_taggedLeafLabelsWithEduStanfordNlpTreesTree_withJavaUtilList_(EduStanfordNlpTreesTree *t, id<JavaUtilList> l) {
  EduStanfordNlpTreesTrees_initialize();
  if ([((EduStanfordNlpTreesTree *) nil_chk(t)) isPreTerminal]) {
    EduStanfordNlpLingCoreLabel *fl = (EduStanfordNlpLingCoreLabel *) cast_chk([((EduStanfordNlpTreesTree *) nil_chk([t getChildWithInt:0])) label], [EduStanfordNlpLingCoreLabel class]);
    (void) [((EduStanfordNlpLingCoreLabel *) nil_chk(fl)) setWithIOSClass:EduStanfordNlpLingCoreAnnotations_TagLabelAnnotation_class_() withId:[t label]];
    [((id<JavaUtilList>) nil_chk(l)) addWithId:fl];
  }
  else {
    {
      IOSObjectArray *a__ = [t children];
      EduStanfordNlpTreesTree * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        EduStanfordNlpTreesTree *kid = *b__++;
        EduStanfordNlpTreesTrees_taggedLeafLabelsWithEduStanfordNlpTreesTree_withJavaUtilList_(kid, l);
      }
    }
  }
}

void EduStanfordNlpTreesTrees_setLeafTagsIfUnsetWithEduStanfordNlpTreesTree_(EduStanfordNlpTreesTree *tree) {
  EduStanfordNlpTreesTrees_initialize();
  if ([((EduStanfordNlpTreesTree *) nil_chk(tree)) isPreTerminal]) {
    EduStanfordNlpTreesTree *leaf = IOSObjectArray_Get(nil_chk([tree children]), 0);
    if (!([EduStanfordNlpLingHasTag_class_() isInstance:[((EduStanfordNlpTreesTree *) nil_chk(leaf)) label]])) {
      return;
    }
    id<EduStanfordNlpLingHasTag> label = (id<EduStanfordNlpLingHasTag>) cast_check([leaf label], EduStanfordNlpLingHasTag_class_());
    if ([((id<EduStanfordNlpLingHasTag>) nil_chk(label)) tag] == nil) {
      [label setTagWithNSString:[tree value]];
    }
  }
  else {
    {
      IOSObjectArray *a__ = [tree children];
      EduStanfordNlpTreesTree * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        EduStanfordNlpTreesTree *child = *b__++;
        EduStanfordNlpTreesTrees_setLeafTagsIfUnsetWithEduStanfordNlpTreesTree_(child);
      }
    }
  }
}

void EduStanfordNlpTreesTrees_setLeafLabelsWithEduStanfordNlpTreesTree_withJavaUtilList_(EduStanfordNlpTreesTree *tree, id<JavaUtilList> labels) {
  EduStanfordNlpTreesTrees_initialize();
  id<JavaUtilIterator> leafIterator = [((id<JavaUtilList>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(tree)) getLeaves])) iterator];
  id<JavaUtilIterator> labelIterator = [((id<JavaUtilList>) nil_chk(labels)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(leafIterator)) hasNext] && [((id<JavaUtilIterator>) nil_chk(labelIterator)) hasNext]) {
    EduStanfordNlpTreesTree *leaf = [leafIterator next];
    id<EduStanfordNlpLingLabel> label = [((id<JavaUtilIterator>) nil_chk(labelIterator)) next];
    [((EduStanfordNlpTreesTree *) nil_chk(leaf)) setLabelWithEduStanfordNlpLingLabel:label];
  }
  if ([leafIterator hasNext]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Tree had more leaves than the labels provided");
  }
  if ([((id<JavaUtilIterator>) nil_chk(labelIterator)) hasNext]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"More labels provided than tree had leaves");
  }
}

EduStanfordNlpTreesTree *EduStanfordNlpTreesTrees_maximalProjectionWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_withEduStanfordNlpTreesHeadFinder_(EduStanfordNlpTreesTree *head, EduStanfordNlpTreesTree *root, id<EduStanfordNlpTreesHeadFinder> hf) {
  EduStanfordNlpTreesTrees_initialize();
  EduStanfordNlpTreesTree *projection = head;
  if (projection == root) {
    return root;
  }
  EduStanfordNlpTreesTree *parent = [((EduStanfordNlpTreesTree *) nil_chk(projection)) parentWithEduStanfordNlpTreesTree:root];
  while ([((id<EduStanfordNlpTreesHeadFinder>) nil_chk(hf)) determineHeadWithEduStanfordNlpTreesTree:parent] == projection) {
    projection = parent;
    if (projection == root) {
      return root;
    }
    parent = [((EduStanfordNlpTreesTree *) nil_chk(projection)) parentWithEduStanfordNlpTreesTree:root];
  }
  return projection;
}

EduStanfordNlpTreesTree *EduStanfordNlpTreesTrees_applyToProjectionsWithEduStanfordNlpTreesTreeVisitor_withEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_withEduStanfordNlpTreesHeadFinder_(id<EduStanfordNlpTreesTreeVisitor> v, EduStanfordNlpTreesTree *head, EduStanfordNlpTreesTree *root, id<EduStanfordNlpTreesHeadFinder> hf) {
  EduStanfordNlpTreesTrees_initialize();
  EduStanfordNlpTreesTree *projection = head;
  EduStanfordNlpTreesTree *parent = [((EduStanfordNlpTreesTree *) nil_chk(projection)) parentWithEduStanfordNlpTreesTree:root];
  if (parent == nil && projection != root) {
    return nil;
  }
  [((id<EduStanfordNlpTreesTreeVisitor>) nil_chk(v)) visitTreeWithEduStanfordNlpTreesTree:projection];
  if (projection == root) {
    return root;
  }
  while ([((id<EduStanfordNlpTreesHeadFinder>) nil_chk(hf)) determineHeadWithEduStanfordNlpTreesTree:parent] == projection) {
    projection = parent;
    [v visitTreeWithEduStanfordNlpTreesTree:projection];
    if (projection == root) {
      return root;
    }
    parent = [((EduStanfordNlpTreesTree *) nil_chk(projection)) parentWithEduStanfordNlpTreesTree:root];
  }
  return projection;
}

EduStanfordNlpTreesTree *EduStanfordNlpTreesTrees_getTerminalWithEduStanfordNlpTreesTree_withInt_(EduStanfordNlpTreesTree *tree, jint n) {
  EduStanfordNlpTreesTrees_initialize();
  return EduStanfordNlpTreesTrees_getTerminalWithEduStanfordNlpTreesTree_withEduStanfordNlpUtilMutableInteger_withInt_(tree, new_EduStanfordNlpUtilMutableInteger_initWithInt_(0), n);
}

EduStanfordNlpTreesTree *EduStanfordNlpTreesTrees_getTerminalWithEduStanfordNlpTreesTree_withEduStanfordNlpUtilMutableInteger_withInt_(EduStanfordNlpTreesTree *tree, EduStanfordNlpUtilMutableInteger *i, jint n) {
  EduStanfordNlpTreesTrees_initialize();
  if ([((EduStanfordNlpUtilMutableInteger *) nil_chk(i)) intValue] == n) {
    if ([((EduStanfordNlpTreesTree *) nil_chk(tree)) isLeaf]) {
      return tree;
    }
    else {
      return EduStanfordNlpTreesTrees_getTerminalWithEduStanfordNlpTreesTree_withEduStanfordNlpUtilMutableInteger_withInt_(IOSObjectArray_Get(nil_chk([tree children]), 0), i, n);
    }
  }
  else {
    if ([((EduStanfordNlpTreesTree *) nil_chk(tree)) isLeaf]) {
      [i setWithInt:[i intValue] + [((JavaUtilArrayList *) nil_chk([tree yield])) size]];
      return nil;
    }
    else {
      {
        IOSObjectArray *a__ = [tree children];
        EduStanfordNlpTreesTree * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
        EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          EduStanfordNlpTreesTree *kid = *b__++;
          EduStanfordNlpTreesTree *result = EduStanfordNlpTreesTrees_getTerminalWithEduStanfordNlpTreesTree_withEduStanfordNlpUtilMutableInteger_withInt_(kid, i, n);
          if (result != nil) {
            return result;
          }
        }
      }
      return nil;
    }
  }
}

EduStanfordNlpTreesTree *EduStanfordNlpTreesTrees_getPreTerminalWithEduStanfordNlpTreesTree_withInt_(EduStanfordNlpTreesTree *tree, jint n) {
  EduStanfordNlpTreesTrees_initialize();
  return EduStanfordNlpTreesTrees_getPreTerminalWithEduStanfordNlpTreesTree_withEduStanfordNlpUtilMutableInteger_withInt_(tree, new_EduStanfordNlpUtilMutableInteger_initWithInt_(0), n);
}

EduStanfordNlpTreesTree *EduStanfordNlpTreesTrees_getPreTerminalWithEduStanfordNlpTreesTree_withEduStanfordNlpUtilMutableInteger_withInt_(EduStanfordNlpTreesTree *tree, EduStanfordNlpUtilMutableInteger *i, jint n) {
  EduStanfordNlpTreesTrees_initialize();
  if ([((EduStanfordNlpUtilMutableInteger *) nil_chk(i)) intValue] == n) {
    if ([((EduStanfordNlpTreesTree *) nil_chk(tree)) isPreTerminal]) {
      return tree;
    }
    else {
      return EduStanfordNlpTreesTrees_getPreTerminalWithEduStanfordNlpTreesTree_withEduStanfordNlpUtilMutableInteger_withInt_(IOSObjectArray_Get(nil_chk([tree children]), 0), i, n);
    }
  }
  else {
    if ([((EduStanfordNlpTreesTree *) nil_chk(tree)) isPreTerminal]) {
      [i setWithInt:[i intValue] + [((JavaUtilArrayList *) nil_chk([tree yield])) size]];
      return nil;
    }
    else {
      {
        IOSObjectArray *a__ = [tree children];
        EduStanfordNlpTreesTree * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
        EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          EduStanfordNlpTreesTree *kid = *b__++;
          EduStanfordNlpTreesTree *result = EduStanfordNlpTreesTrees_getPreTerminalWithEduStanfordNlpTreesTree_withEduStanfordNlpUtilMutableInteger_withInt_(kid, i, n);
          if (result != nil) {
            return result;
          }
        }
      }
      return nil;
    }
  }
}

id<JavaUtilList> EduStanfordNlpTreesTrees_localTreeAsCatListWithEduStanfordNlpTreesTree_(EduStanfordNlpTreesTree *t) {
  EduStanfordNlpTreesTrees_initialize();
  id<JavaUtilList> l = new_JavaUtilArrayList_initWithInt_(((IOSObjectArray *) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(t)) children]))->size_ + 1);
  [l addWithId:[((id<EduStanfordNlpLingLabel>) nil_chk([t label])) value]];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk([t children]))->size_; i++) {
    [l addWithId:[((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(IOSObjectArray_Get(nil_chk([t children]), i))) label])) value]];
  }
  return l;
}

jint EduStanfordNlpTreesTrees_objectEqualityIndexOfWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_(EduStanfordNlpTreesTree *parent, EduStanfordNlpTreesTree *daughter) {
  EduStanfordNlpTreesTrees_initialize();
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(parent)) children]))->size_; i++) {
    if (daughter == IOSObjectArray_Get(nil_chk([parent children]), i)) {
      return i;
    }
  }
  return -1;
}

NSString *EduStanfordNlpTreesTrees_toStructureDebugStringWithEduStanfordNlpTreesTree_(EduStanfordNlpTreesTree *t) {
  EduStanfordNlpTreesTrees_initialize();
  NSString *tCl = EduStanfordNlpUtilStringUtils_getShortClassNameWithId_(t);
  NSString *tfCl = EduStanfordNlpUtilStringUtils_getShortClassNameWithId_([((EduStanfordNlpTreesTree *) nil_chk(t)) treeFactory]);
  NSString *lCl = EduStanfordNlpUtilStringUtils_getShortClassNameWithId_([t label]);
  NSString *lfCl = EduStanfordNlpUtilStringUtils_getShortClassNameWithId_([((id<EduStanfordNlpLingLabel>) nil_chk([t label])) labelFactory]);
  id<JavaUtilSet> otherClasses = EduStanfordNlpUtilGenerics_newHashSet();
  NSString *leafLabels = nil;
  NSString *tagLabels = nil;
  NSString *phraseLabels = nil;
  NSString *leaves = nil;
  NSString *nodes = nil;
  for (EduStanfordNlpTreesTree * __strong st in t) {
    NSString *stCl = EduStanfordNlpUtilStringUtils_getShortClassNameWithId_(st);
    NSString *stfCl = EduStanfordNlpUtilStringUtils_getShortClassNameWithId_([((EduStanfordNlpTreesTree *) nil_chk(st)) treeFactory]);
    NSString *slCl = EduStanfordNlpUtilStringUtils_getShortClassNameWithId_([st label]);
    NSString *slfCl = EduStanfordNlpUtilStringUtils_getShortClassNameWithId_([((id<EduStanfordNlpLingLabel>) nil_chk([st label])) labelFactory]);
    if (![((NSString *) nil_chk(tCl)) isEqual:stCl]) {
      [((id<JavaUtilSet>) nil_chk(otherClasses)) addWithId:stCl];
    }
    if (![((NSString *) nil_chk(tfCl)) isEqual:stfCl]) {
      [((id<JavaUtilSet>) nil_chk(otherClasses)) addWithId:stfCl];
    }
    if (![((NSString *) nil_chk(lCl)) isEqual:slCl]) {
      [((id<JavaUtilSet>) nil_chk(otherClasses)) addWithId:slCl];
    }
    if (![((NSString *) nil_chk(lfCl)) isEqual:slfCl]) {
      [((id<JavaUtilSet>) nil_chk(otherClasses)) addWithId:slfCl];
    }
    if ([st isPhrasal]) {
      if (nodes == nil) {
        nodes = stCl;
      }
      else if (![nodes isEqual:stCl]) {
        nodes = @"mixed";
      }
      if (phraseLabels == nil) {
        phraseLabels = slCl;
      }
      else if (![phraseLabels isEqual:slCl]) {
        phraseLabels = @"mixed";
      }
    }
    else if ([st isPreTerminal]) {
      if (nodes == nil) {
        nodes = stCl;
      }
      else if (![nodes isEqual:stCl]) {
        nodes = @"mixed";
      }
      if (tagLabels == nil) {
        tagLabels = EduStanfordNlpUtilStringUtils_getShortClassNameWithId_(slCl);
      }
      else if (![tagLabels isEqual:slCl]) {
        tagLabels = @"mixed";
      }
    }
    else if ([st isLeaf]) {
      if (leaves == nil) {
        leaves = stCl;
      }
      else if (![leaves isEqual:stCl]) {
        leaves = @"mixed";
      }
      if (leafLabels == nil) {
        leafLabels = slCl;
      }
      else if (![leafLabels isEqual:slCl]) {
        leafLabels = @"mixed";
      }
    }
    else {
      @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@", @"Bad tree state: ", t));
    }
  }
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"Tree with root of class "])) appendWithNSString:tCl])) appendWithNSString:@" and factory "])) appendWithNSString:tfCl];
  (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@" and root label class "])) appendWithNSString:lCl])) appendWithNSString:@" and factory "])) appendWithNSString:lfCl];
  if (![((id<JavaUtilSet>) nil_chk(otherClasses)) isEmpty]) {
    (void) [((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@" and the following classes also found within the tree: "])) appendWithId:otherClasses];
    return JreStrcat("$$$$$$$$$$$", @" with ", nodes, @" interior nodes and ", leaves, @" leaves, and ", phraseLabels, @" phrase labels, ", tagLabels, @" tag labels, and ", leafLabels, @" leaf labels.");
  }
  else {
    (void) [sb appendWithNSString:@" (and uniform use of these Tree and Label classes throughout the tree)."];
  }
  return [sb description];
}

EduStanfordNlpTreesTree *EduStanfordNlpTreesTrees_toFlatTreeWithJavaUtilList_(id<JavaUtilList> s) {
  EduStanfordNlpTreesTrees_initialize();
  return EduStanfordNlpTreesTrees_toFlatTreeWithJavaUtilList_withEduStanfordNlpLingLabelFactory_(s, new_EduStanfordNlpLingStringLabelFactory_init());
}

EduStanfordNlpTreesTree *EduStanfordNlpTreesTrees_toFlatTreeWithJavaUtilList_withEduStanfordNlpLingLabelFactory_(id<JavaUtilList> s, id<EduStanfordNlpLingLabelFactory> lf) {
  EduStanfordNlpTreesTrees_initialize();
  id<JavaUtilList> daughters = new_JavaUtilArrayList_initWithInt_([((id<JavaUtilList>) nil_chk(s)) size]);
  for (id<EduStanfordNlpLingHasWord> __strong word in s) {
    EduStanfordNlpTreesTree *wordNode = new_EduStanfordNlpTreesLabeledScoredTreeNode_initWithEduStanfordNlpLingLabel_([((id<EduStanfordNlpLingLabelFactory>) nil_chk(lf)) newLabelWithNSString:[((id<EduStanfordNlpLingHasWord>) nil_chk(word)) word]]);
    if ([word isKindOfClass:[EduStanfordNlpLingTaggedWord class]]) {
      EduStanfordNlpLingTaggedWord *taggedWord = (EduStanfordNlpLingTaggedWord *) cast_chk(word, [EduStanfordNlpLingTaggedWord class]);
      wordNode = new_EduStanfordNlpTreesLabeledScoredTreeNode_initWithEduStanfordNlpLingLabel_withJavaUtilList_(new_EduStanfordNlpLingStringLabel_initWithNSString_([taggedWord tag]), JavaUtilCollections_singletonListWithId_(wordNode));
    }
    else {
      wordNode = new_EduStanfordNlpTreesLabeledScoredTreeNode_initWithEduStanfordNlpLingLabel_withJavaUtilList_([lf newLabelWithNSString:@"WD"], JavaUtilCollections_singletonListWithId_(wordNode));
    }
    [daughters addWithId:wordNode];
  }
  return new_EduStanfordNlpTreesLabeledScoredTreeNode_initWithEduStanfordNlpLingLabel_withJavaUtilList_(new_EduStanfordNlpLingStringLabel_initWithNSString_(@"S"), daughters);
}

NSString *EduStanfordNlpTreesTrees_treeToLatexWithEduStanfordNlpTreesTree_(EduStanfordNlpTreesTree *t) {
  EduStanfordNlpTreesTrees_initialize();
  JavaLangStringBuilder *connections = new_JavaLangStringBuilder_init();
  JavaLangStringBuilder *hierarchy = new_JavaLangStringBuilder_init();
  EduStanfordNlpTreesTrees_treeToLatexHelperWithEduStanfordNlpTreesTree_withJavaLangStringBuilder_withJavaLangStringBuilder_withInt_withInt_withInt_(t, connections, hierarchy, 0, 1, 0);
  return JreStrcat("$@C@C", @"\\tree", hierarchy, 0x000a, connections, 0x000a);
}

jint EduStanfordNlpTreesTrees_treeToLatexHelperWithEduStanfordNlpTreesTree_withJavaLangStringBuilder_withJavaLangStringBuilder_withInt_withInt_withInt_(EduStanfordNlpTreesTree *t, JavaLangStringBuilder *c, JavaLangStringBuilder *h, jint n, jint nextN, jint indent) {
  EduStanfordNlpTreesTrees_initialize();
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  for (jint i = 0; i < indent; i++) (void) [sb appendWithNSString:@"  "];
  (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(h)) appendWithChar:0x000a])) appendWithJavaLangCharSequence:sb];
  (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([h appendWithNSString:@"{\\"])) appendWithNSString:[((EduStanfordNlpTreesTree *) nil_chk(t)) isLeaf] ? @"" : @"n"])) appendWithNSString:@"tnode{z"])) appendWithInt:n])) appendWithNSString:@"}{"])) appendWithId:[t label]])) appendWithChar:'}'];
  if (![t isLeaf]) {
    for (jint k = 0; k < ((IOSObjectArray *) nil_chk([t children]))->size_; k++) {
      (void) [h appendWithNSString:@", "];
      (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(c)) appendWithNSString:@"\\nodeconnect{z"])) appendWithInt:n])) appendWithNSString:@"}{z"])) appendWithInt:nextN])) appendWithNSString:@"}\n"];
      nextN = EduStanfordNlpTreesTrees_treeToLatexHelperWithEduStanfordNlpTreesTree_withJavaLangStringBuilder_withJavaLangStringBuilder_withInt_withInt_withInt_(IOSObjectArray_Get(nil_chk([t children]), k), c, h, nextN, nextN + 1, indent + 1);
    }
  }
  (void) [h appendWithChar:'}'];
  return nextN;
}

NSString *EduStanfordNlpTreesTrees_treeToLatexEvenWithEduStanfordNlpTreesTree_(EduStanfordNlpTreesTree *t) {
  EduStanfordNlpTreesTrees_initialize();
  JavaLangStringBuilder *connections = new_JavaLangStringBuilder_init();
  JavaLangStringBuilder *hierarchy = new_JavaLangStringBuilder_init();
  jint maxDepth = [((EduStanfordNlpTreesTree *) nil_chk(t)) depth];
  EduStanfordNlpTreesTrees_treeToLatexEvenHelperWithEduStanfordNlpTreesTree_withJavaLangStringBuilder_withJavaLangStringBuilder_withInt_withInt_withInt_withInt_withInt_(t, connections, hierarchy, 0, 1, 0, 0, maxDepth);
  return JreStrcat("$@C@C", @"\\tree", hierarchy, 0x000a, connections, 0x000a);
}

jint EduStanfordNlpTreesTrees_treeToLatexEvenHelperWithEduStanfordNlpTreesTree_withJavaLangStringBuilder_withJavaLangStringBuilder_withInt_withInt_withInt_withInt_withInt_(EduStanfordNlpTreesTree *t, JavaLangStringBuilder *c, JavaLangStringBuilder *h, jint n, jint nextN, jint indent, jint curDepth, jint maxDepth) {
  EduStanfordNlpTreesTrees_initialize();
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  for (jint i = 0; i < indent; i++) (void) [sb appendWithNSString:@"  "];
  (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(h)) appendWithChar:0x000a])) appendWithJavaLangCharSequence:sb];
  jint tDepth = [((EduStanfordNlpTreesTree *) nil_chk(t)) depth];
  if (tDepth == 0 && tDepth + curDepth < maxDepth) {
    for (jint pad = 0; pad < maxDepth - tDepth - curDepth; pad++) {
      (void) [h appendWithNSString:@"{\\ntnode{pad}{}, "];
    }
  }
  (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([h appendWithNSString:@"{\\ntnode{z"])) appendWithInt:n])) appendWithNSString:@"}{"])) appendWithId:[t label]])) appendWithChar:'}'];
  if (![t isLeaf]) {
    for (jint k = 0; k < ((IOSObjectArray *) nil_chk([t children]))->size_; k++) {
      (void) [h appendWithNSString:@", "];
      (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(c)) appendWithNSString:@"\\nodeconnect{z"])) appendWithInt:n])) appendWithNSString:@"}{z"])) appendWithInt:nextN])) appendWithNSString:@"}\n"];
      nextN = EduStanfordNlpTreesTrees_treeToLatexEvenHelperWithEduStanfordNlpTreesTree_withJavaLangStringBuilder_withJavaLangStringBuilder_withInt_withInt_withInt_withInt_withInt_(IOSObjectArray_Get(nil_chk([t children]), k), c, h, nextN, nextN + 1, indent + 1, curDepth + 1, maxDepth);
    }
  }
  if (tDepth == 0 && tDepth + curDepth < maxDepth) {
    for (jint pad = 0; pad < maxDepth - tDepth - curDepth; pad++) {
      (void) [h appendWithChar:'}'];
    }
  }
  (void) [h appendWithChar:'}'];
  return nextN;
}

NSString *EduStanfordNlpTreesTrees_texTreeWithEduStanfordNlpTreesTree_(EduStanfordNlpTreesTree *t) {
  EduStanfordNlpTreesTrees_initialize();
  return EduStanfordNlpTreesTrees_treeToLatexWithEduStanfordNlpTreesTree_(t);
}

NSString *EduStanfordNlpTreesTrees_escapeWithNSString_(NSString *s) {
  EduStanfordNlpTreesTrees_initialize();
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  for (jint i = 0; i < ((jint) [((NSString *) nil_chk(s)) length]); i++) {
    jchar c = [s charAtWithInt:i];
    if (c == '^') (void) [sb appendWithChar:'\\'];
    (void) [sb appendWithChar:c];
    if (c == '^') (void) [sb appendWithNSString:@"{}"];
  }
  return [sb description];
}

void EduStanfordNlpTreesTrees_mainWithNSStringArray_(IOSObjectArray *args) {
  EduStanfordNlpTreesTrees_initialize();
  jint i = 0;
  while (i < ((IOSObjectArray *) nil_chk(args))->size_) {
    EduStanfordNlpTreesTree *tree = EduStanfordNlpTreesTree_valueOfWithNSString_(IOSObjectArray_Get(args, i));
    if (tree == nil) {
      tree = EduStanfordNlpTreesTree_valueOfWithNSString_(EduStanfordNlpIoIOUtils_slurpFileWithNSString_(IOSObjectArray_Get(args, i)));
    }
    if (tree != nil) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:EduStanfordNlpTreesTrees_escapeWithNSString_(EduStanfordNlpTreesTrees_texTreeWithEduStanfordNlpTreesTree_(tree))];
    }
    i++;
  }
  if (i == 0) {
    EduStanfordNlpTreesTree *tree = [(new_EduStanfordNlpTreesPennTreeReader_initWithJavaIoReader_withEduStanfordNlpTreesTreeFactory_(new_JavaIoBufferedReader_initWithJavaIoReader_(new_JavaIoInputStreamReader_initWithJavaIoInputStream_(JreLoadStatic(JavaLangSystem, in))), new_EduStanfordNlpTreesLabeledScoredTreeFactory_initWithEduStanfordNlpLingLabelFactory_(new_EduStanfordNlpLingStringLabelFactory_init()))) readTree];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:EduStanfordNlpTreesTrees_escapeWithNSString_(EduStanfordNlpTreesTrees_texTreeWithEduStanfordNlpTreesTree_(tree))];
  }
}

EduStanfordNlpTreesTree *EduStanfordNlpTreesTrees_normalizeTreeWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTreeNormalizer_withEduStanfordNlpTreesTreeFactory_(EduStanfordNlpTreesTree *tree, EduStanfordNlpTreesTreeNormalizer *tn, id<EduStanfordNlpTreesTreeFactory> tf) {
  EduStanfordNlpTreesTrees_initialize();
  for (EduStanfordNlpTreesTree * __strong node in nil_chk(tree)) {
    if ([((EduStanfordNlpTreesTree *) nil_chk(node)) isLeaf]) {
      [((id<EduStanfordNlpLingLabel>) nil_chk([node label])) setValueWithNSString:[((EduStanfordNlpTreesTreeNormalizer *) nil_chk(tn)) normalizeTerminalWithNSString:[((id<EduStanfordNlpLingLabel>) nil_chk([node label])) value]]];
    }
    else {
      [((id<EduStanfordNlpLingLabel>) nil_chk([node label])) setValueWithNSString:[((EduStanfordNlpTreesTreeNormalizer *) nil_chk(tn)) normalizeNonterminalWithNSString:[((id<EduStanfordNlpLingLabel>) nil_chk([node label])) value]]];
    }
  }
  return [((EduStanfordNlpTreesTreeNormalizer *) nil_chk(tn)) normalizeWholeTreeWithEduStanfordNlpTreesTree:tree withEduStanfordNlpTreesTreeFactory:tf];
}

EduStanfordNlpTreesTree *EduStanfordNlpTreesTrees_getLeafWithEduStanfordNlpTreesTree_withInt_(EduStanfordNlpTreesTree *tree, jint i) {
  EduStanfordNlpTreesTrees_initialize();
  jint count = -1;
  for (EduStanfordNlpTreesTree * __strong next in nil_chk(tree)) {
    if ([((EduStanfordNlpTreesTree *) nil_chk(next)) isLeaf]) {
      count++;
    }
    if (count == i) {
      return next;
    }
  }
  return nil;
}

EduStanfordNlpTreesTree *EduStanfordNlpTreesTrees_getLowestCommonAncestorWithJavaUtilList_withEduStanfordNlpTreesTree_(id<JavaUtilList> nodes, EduStanfordNlpTreesTree *root) {
  EduStanfordNlpTreesTrees_initialize();
  id<JavaUtilList> paths = new_JavaUtilArrayList_init();
  jint min = JavaLangInteger_MAX_VALUE;
  for (EduStanfordNlpTreesTree * __strong t in nil_chk(nodes)) {
    id<JavaUtilList> path = EduStanfordNlpTreesTrees_pathFromRootWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_(t, root);
    if (path == nil) return nil;
    min = JavaLangMath_minWithInt_withInt_(min, [path size]);
    [paths addWithId:path];
  }
  EduStanfordNlpTreesTree *commonAncestor = nil;
  for (jint i = 0; i < min; ++i) {
    EduStanfordNlpTreesTree *ancestor = [((id<JavaUtilList>) nil_chk([paths getWithInt:0])) getWithInt:i];
    jboolean quit = false;
    for (id<JavaUtilList> __strong path in paths) {
      if (![((EduStanfordNlpTreesTree *) nil_chk([((id<JavaUtilList>) nil_chk(path)) getWithInt:i])) isEqual:ancestor]) {
        quit = true;
        break;
      }
    }
    if (quit) break;
    commonAncestor = ancestor;
  }
  return commonAncestor;
}

id<JavaUtilList> EduStanfordNlpTreesTrees_pathNodeToNodeWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_(EduStanfordNlpTreesTree *from, EduStanfordNlpTreesTree *to, EduStanfordNlpTreesTree *root) {
  EduStanfordNlpTreesTrees_initialize();
  id<JavaUtilList> fromPath = EduStanfordNlpTreesTrees_pathFromRootWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_(from, root);
  if (fromPath == nil) return nil;
  id<JavaUtilList> toPath = EduStanfordNlpTreesTrees_pathFromRootWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_(to, root);
  if (toPath == nil) return nil;
  jint last = 0;
  jint min = [fromPath size] <= [toPath size] ? [fromPath size] : [toPath size];
  EduStanfordNlpTreesTree *lastNode = nil;
  while (last < min && [((EduStanfordNlpTreesTree *) nil_chk([fromPath getWithInt:last])) isEqual:[toPath getWithInt:last]]) {
    lastNode = [fromPath getWithInt:last];
    last++;
  }
  id<JavaUtilList> totalPath = new_JavaUtilArrayList_init();
  for (jint i = [fromPath size] - 1; i >= last; i--) {
    EduStanfordNlpTreesTree *t = [fromPath getWithInt:i];
    [totalPath addWithId:JreStrcat("$$", @"up-", [((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(t)) label])) value])];
  }
  if (lastNode != nil) [totalPath addWithId:JreStrcat("$$", @"up-", [((id<EduStanfordNlpLingLabel>) nil_chk([lastNode label])) value])];
  for (EduStanfordNlpTreesTree * __strong t in toPath) [totalPath addWithId:JreStrcat("$$", @"down-", [((id<EduStanfordNlpLingLabel>) nil_chk([((EduStanfordNlpTreesTree *) nil_chk(t)) label])) value])];
  return totalPath;
}

id<JavaUtilList> EduStanfordNlpTreesTrees_pathFromRootWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_(EduStanfordNlpTreesTree *t, EduStanfordNlpTreesTree *root) {
  EduStanfordNlpTreesTrees_initialize();
  if (t == root) {
    id<JavaUtilList> l = new_JavaUtilArrayList_initWithInt_(1);
    [l addWithId:t];
    return l;
  }
  else if (root == nil) {
    return nil;
  }
  return [root dominationPathWithEduStanfordNlpTreesTree:t];
}

void EduStanfordNlpTreesTrees_replaceNodeWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_(EduStanfordNlpTreesTree *node, EduStanfordNlpTreesTree *node1, EduStanfordNlpTreesTree *t) {
  EduStanfordNlpTreesTrees_initialize();
  if ([((EduStanfordNlpTreesTree *) nil_chk(t)) isLeaf]) return;
  IOSObjectArray *kids = [t children];
  id<JavaUtilList> newKids = new_JavaUtilArrayList_initWithInt_(((IOSObjectArray *) nil_chk(kids))->size_);
  {
    IOSObjectArray *a__ = kids;
    EduStanfordNlpTreesTree * const *b__ = a__->buffer_;
    EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      EduStanfordNlpTreesTree *kid = *b__++;
      if (kid != node) {
        [newKids addWithId:kid];
        EduStanfordNlpTreesTrees_replaceNodeWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_(node, node1, kid);
      }
      else {
        [newKids addWithId:node1];
      }
    }
  }
  [t setChildrenWithJavaUtilList:newKids];
}

EduStanfordNlpTreesTree *EduStanfordNlpTreesTrees_getLowestCommonAncestorWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_(EduStanfordNlpTreesTree *t1, EduStanfordNlpTreesTree *t2, EduStanfordNlpTreesTree *root) {
  EduStanfordNlpTreesTrees_initialize();
  id<JavaUtilList> t1Path = EduStanfordNlpTreesTrees_pathFromRootWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_(t1, root);
  id<JavaUtilList> t2Path = EduStanfordNlpTreesTrees_pathFromRootWithEduStanfordNlpTreesTree_withEduStanfordNlpTreesTree_(t2, root);
  if (t1Path == nil || t2Path == nil) return nil;
  jint min = JavaLangMath_minWithInt_withInt_([t1Path size], [t2Path size]);
  EduStanfordNlpTreesTree *commonAncestor = nil;
  for (jint i = 0; i < min && [((EduStanfordNlpTreesTree *) nil_chk([t1Path getWithInt:i])) isEqual:[t2Path getWithInt:i]]; ++i) {
    commonAncestor = [t1Path getWithInt:i];
  }
  return commonAncestor;
}

EduStanfordNlpTreesTree *EduStanfordNlpTreesTrees_readTreeWithNSString_withEduStanfordNlpTreesTreeFactory_(NSString *ptbTreeString, id<EduStanfordNlpTreesTreeFactory> treeFactory) {
  EduStanfordNlpTreesTrees_initialize();
  @try {
    EduStanfordNlpTreesPennTreeReader *ptr = new_EduStanfordNlpTreesPennTreeReader_initWithJavaIoReader_withEduStanfordNlpTreesTreeFactory_(new_JavaIoStringReader_initWithNSString_(ptbTreeString), treeFactory);
    return [ptr readTree];
  }
  @catch (JavaIoIOException *ex) {
    @throw new_JavaLangRuntimeException_initWithNSException_(ex);
  }
}

EduStanfordNlpTreesTree *EduStanfordNlpTreesTrees_readTreeWithNSString_(NSString *str) {
  EduStanfordNlpTreesTrees_initialize();
  return EduStanfordNlpTreesTrees_readTreeWithNSString_withEduStanfordNlpTreesTreeFactory_(str, EduStanfordNlpTreesTrees_defaultTreeFactory);
}

void EduStanfordNlpTreesTrees_outputTreeLabelsWithEduStanfordNlpTreesTree_(EduStanfordNlpTreesTree *tree) {
  EduStanfordNlpTreesTrees_initialize();
  EduStanfordNlpTreesTrees_outputTreeLabelsWithEduStanfordNlpTreesTree_withInt_(tree, 0);
}

void EduStanfordNlpTreesTrees_outputTreeLabelsWithEduStanfordNlpTreesTree_withInt_(EduStanfordNlpTreesTree *tree, jint depth) {
  EduStanfordNlpTreesTrees_initialize();
  for (jint i = 0; i < depth; ++i) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printWithNSString:@" "];
  }
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithId:[((EduStanfordNlpTreesTree *) nil_chk(tree)) label]];
  {
    IOSObjectArray *a__ = [tree children];
    EduStanfordNlpTreesTree * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      EduStanfordNlpTreesTree *child = *b__++;
      EduStanfordNlpTreesTrees_outputTreeLabelsWithEduStanfordNlpTreesTree_withInt_(child, depth + 1);
    }
  }
}

void EduStanfordNlpTreesTrees_convertToCoreLabelsWithEduStanfordNlpTreesTree_(EduStanfordNlpTreesTree *tree) {
  EduStanfordNlpTreesTrees_initialize();
  id<EduStanfordNlpLingLabel> l = [((EduStanfordNlpTreesTree *) nil_chk(tree)) label];
  if (!([l isKindOfClass:[EduStanfordNlpLingCoreLabel class]])) {
    EduStanfordNlpLingCoreLabel *cl = new_EduStanfordNlpLingCoreLabel_init();
    [cl setValueWithNSString:[((id<EduStanfordNlpLingLabel>) nil_chk(l)) value]];
    [tree setLabelWithEduStanfordNlpLingLabel:cl];
  }
  {
    IOSObjectArray *a__ = [tree children];
    EduStanfordNlpTreesTree * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    EduStanfordNlpTreesTree * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      EduStanfordNlpTreesTree *kid = *b__++;
      EduStanfordNlpTreesTrees_convertToCoreLabelsWithEduStanfordNlpTreesTree_(kid);
    }
  }
}

void EduStanfordNlpTreesTrees_setSentIndexWithEduStanfordNlpTreesTree_withInt_(EduStanfordNlpTreesTree *tree, jint sentIndex) {
  EduStanfordNlpTreesTrees_initialize();
  id<JavaUtilList> leaves = [((EduStanfordNlpTreesTree *) nil_chk(tree)) yield];
  for (id<EduStanfordNlpLingLabel> __strong leaf in nil_chk(leaves)) {
    if (!([leaf isKindOfClass:[EduStanfordNlpLingCoreLabel class]])) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Only works on CoreLabel");
    }
    [((EduStanfordNlpLingCoreLabel *) nil_chk(((EduStanfordNlpLingCoreLabel *) cast_chk(leaf, [EduStanfordNlpLingCoreLabel class])))) setSentIndexWithInt:sentIndex];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTreesTrees)
