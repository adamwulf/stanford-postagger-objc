//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/math/SloppyMath.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/math/SloppyMath.h"
#include "java/io/PrintStream.h"
#include "java/lang/Double.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/util/Collection.h"

@interface EduStanfordNlpMathSloppyMath ()

- (instancetype)init;

@end

inline IOSFloatArray *EduStanfordNlpMathSloppyMath_get_acosCache();
inline IOSFloatArray *EduStanfordNlpMathSloppyMath_set_acosCache(IOSFloatArray *value);
static IOSFloatArray *EduStanfordNlpMathSloppyMath_acosCache;
J2OBJC_STATIC_FIELD_OBJ(EduStanfordNlpMathSloppyMath, acosCache, IOSFloatArray *)

__attribute__((unused)) static void EduStanfordNlpMathSloppyMath_init(EduStanfordNlpMathSloppyMath *self);

__attribute__((unused)) static EduStanfordNlpMathSloppyMath *new_EduStanfordNlpMathSloppyMath_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpMathSloppyMath *create_EduStanfordNlpMathSloppyMath_init();

@implementation EduStanfordNlpMathSloppyMath

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpMathSloppyMath_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jdouble)roundWithDouble:(jdouble)x {
  return EduStanfordNlpMathSloppyMath_roundWithDouble_(x);
}

+ (jdouble)roundWithDouble:(jdouble)x
                   withInt:(jint)precision {
  return EduStanfordNlpMathSloppyMath_roundWithDouble_withInt_(x, precision);
}

+ (jint)maxWithInt:(jint)a
           withInt:(jint)b
           withInt:(jint)c {
  return EduStanfordNlpMathSloppyMath_maxWithInt_withInt_withInt_(a, b, c);
}

+ (jint)maxWithJavaUtilCollection:(id<JavaUtilCollection>)vals {
  return EduStanfordNlpMathSloppyMath_maxWithJavaUtilCollection_(vals);
}

+ (jint)maxWithInt:(jint)a
           withInt:(jint)b {
  return EduStanfordNlpMathSloppyMath_maxWithInt_withInt_(a, b);
}

+ (jfloat)maxWithFloat:(jfloat)a
             withFloat:(jfloat)b {
  return EduStanfordNlpMathSloppyMath_maxWithFloat_withFloat_(a, b);
}

+ (jdouble)maxWithDouble:(jdouble)a
              withDouble:(jdouble)b {
  return EduStanfordNlpMathSloppyMath_maxWithDouble_withDouble_(a, b);
}

+ (jint)minWithInt:(jint)a
           withInt:(jint)b
           withInt:(jint)c {
  return EduStanfordNlpMathSloppyMath_minWithInt_withInt_withInt_(a, b, c);
}

+ (jfloat)minWithFloat:(jfloat)a
             withFloat:(jfloat)b {
  return EduStanfordNlpMathSloppyMath_minWithFloat_withFloat_(a, b);
}

+ (jdouble)minWithDouble:(jdouble)a
              withDouble:(jdouble)b {
  return EduStanfordNlpMathSloppyMath_minWithDouble_withDouble_(a, b);
}

+ (jint)pythonModWithInt:(jint)num
                 withInt:(jint)modulus {
  return EduStanfordNlpMathSloppyMath_pythonModWithInt_withInt_(num, modulus);
}

+ (jdouble)lgammaWithDouble:(jdouble)x {
  return EduStanfordNlpMathSloppyMath_lgammaWithDouble_(x);
}

+ (jboolean)isDangerousWithDouble:(jdouble)d {
  return EduStanfordNlpMathSloppyMath_isDangerousWithDouble_(d);
}

+ (jboolean)isVeryDangerousWithDouble:(jdouble)d {
  return EduStanfordNlpMathSloppyMath_isVeryDangerousWithDouble_(d);
}

+ (jboolean)isCloseToWithDouble:(jdouble)a
                     withDouble:(jdouble)b {
  return EduStanfordNlpMathSloppyMath_isCloseToWithDouble_withDouble_(a, b);
}

+ (jdouble)gammaWithDouble:(jdouble)n {
  return EduStanfordNlpMathSloppyMath_gammaWithDouble_(n);
}

+ (jdouble)logWithDouble:(jdouble)num
              withDouble:(jdouble)base {
  return EduStanfordNlpMathSloppyMath_logWithDouble_withDouble_(num, base);
}

+ (jfloat)logAddWithFloat:(jfloat)lx
                withFloat:(jfloat)ly {
  return EduStanfordNlpMathSloppyMath_logAddWithFloat_withFloat_(lx, ly);
}

+ (jdouble)logAddWithDouble:(jdouble)lx
                 withDouble:(jdouble)ly {
  return EduStanfordNlpMathSloppyMath_logAddWithDouble_withDouble_(lx, ly);
}

+ (jint)nChooseKWithInt:(jint)n
                withInt:(jint)k {
  return EduStanfordNlpMathSloppyMath_nChooseKWithInt_withInt_(n, k);
}

+ (jdouble)powWithDouble:(jdouble)a
              withDouble:(jdouble)b {
  return EduStanfordNlpMathSloppyMath_powWithDouble_withDouble_(a, b);
}

+ (jint)intPowWithInt:(jint)b
              withInt:(jint)e {
  return EduStanfordNlpMathSloppyMath_intPowWithInt_withInt_(b, e);
}

+ (jfloat)intPowWithFloat:(jfloat)b
                  withInt:(jint)e {
  return EduStanfordNlpMathSloppyMath_intPowWithFloat_withInt_(b, e);
}

+ (jdouble)intPowWithDouble:(jdouble)b
                    withInt:(jint)e {
  return EduStanfordNlpMathSloppyMath_intPowWithDouble_withInt_(b, e);
}

+ (jdouble)hypergeometricWithInt:(jint)k
                         withInt:(jint)n
                         withInt:(jint)r
                         withInt:(jint)m {
  return EduStanfordNlpMathSloppyMath_hypergeometricWithInt_withInt_withInt_withInt_(k, n, r, m);
}

+ (jdouble)exactBinomialWithInt:(jint)k
                        withInt:(jint)n
                     withDouble:(jdouble)p {
  return EduStanfordNlpMathSloppyMath_exactBinomialWithInt_withInt_withDouble_(k, n, p);
}

+ (jdouble)oneTailedFishersExactWithInt:(jint)k
                                withInt:(jint)n
                                withInt:(jint)r
                                withInt:(jint)m {
  return EduStanfordNlpMathSloppyMath_oneTailedFishersExactWithInt_withInt_withInt_withInt_(k, n, r, m);
}

+ (jdouble)chiSquare2by2WithInt:(jint)k
                        withInt:(jint)n
                        withInt:(jint)r
                        withInt:(jint)m {
  return EduStanfordNlpMathSloppyMath_chiSquare2by2WithInt_withInt_withInt_withInt_(k, n, r, m);
}

+ (jdouble)sigmoidWithDouble:(jdouble)x {
  return EduStanfordNlpMathSloppyMath_sigmoidWithDouble_(x);
}

+ (jdouble)acosWithDouble:(jdouble)cosValue {
  return EduStanfordNlpMathSloppyMath_acosWithDouble_(cosValue);
}

+ (jdouble)poissonWithInt:(jint)x
               withDouble:(jdouble)lambda {
  return EduStanfordNlpMathSloppyMath_poissonWithInt_withDouble_(x, lambda);
}

+ (jdouble)factorialWithInt:(jint)x {
  return EduStanfordNlpMathSloppyMath_factorialWithInt_(x);
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  EduStanfordNlpMathSloppyMath_mainWithNSStringArray_(args);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 0, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 3, 5, -1, 6, -1, -1 },
    { NULL, "I", 0x9, 3, 7, -1, -1, -1, -1 },
    { NULL, "F", 0x9, 3, 8, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 3, 9, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 10, 4, -1, -1, -1, -1 },
    { NULL, "F", 0x9, 10, 8, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 10, 9, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 11, 7, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 12, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 13, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 14, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 15, 9, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 16, 1, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 17, 9, -1, -1, -1, -1 },
    { NULL, "F", 0x9, 18, 8, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 18, 9, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 19, 7, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 20, 9, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 21, 7, -1, -1, -1, -1 },
    { NULL, "F", 0x9, 21, 22, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 21, 2, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 23, 24, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 25, 26, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 27, 24, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 28, 24, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 29, 1, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 30, 1, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 31, 32, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 33, 34, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 35, 36, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(roundWithDouble:);
  methods[2].selector = @selector(roundWithDouble:withInt:);
  methods[3].selector = @selector(maxWithInt:withInt:withInt:);
  methods[4].selector = @selector(maxWithJavaUtilCollection:);
  methods[5].selector = @selector(maxWithInt:withInt:);
  methods[6].selector = @selector(maxWithFloat:withFloat:);
  methods[7].selector = @selector(maxWithDouble:withDouble:);
  methods[8].selector = @selector(minWithInt:withInt:withInt:);
  methods[9].selector = @selector(minWithFloat:withFloat:);
  methods[10].selector = @selector(minWithDouble:withDouble:);
  methods[11].selector = @selector(pythonModWithInt:withInt:);
  methods[12].selector = @selector(lgammaWithDouble:);
  methods[13].selector = @selector(isDangerousWithDouble:);
  methods[14].selector = @selector(isVeryDangerousWithDouble:);
  methods[15].selector = @selector(isCloseToWithDouble:withDouble:);
  methods[16].selector = @selector(gammaWithDouble:);
  methods[17].selector = @selector(logWithDouble:withDouble:);
  methods[18].selector = @selector(logAddWithFloat:withFloat:);
  methods[19].selector = @selector(logAddWithDouble:withDouble:);
  methods[20].selector = @selector(nChooseKWithInt:withInt:);
  methods[21].selector = @selector(powWithDouble:withDouble:);
  methods[22].selector = @selector(intPowWithInt:withInt:);
  methods[23].selector = @selector(intPowWithFloat:withInt:);
  methods[24].selector = @selector(intPowWithDouble:withInt:);
  methods[25].selector = @selector(hypergeometricWithInt:withInt:withInt:withInt:);
  methods[26].selector = @selector(exactBinomialWithInt:withInt:withDouble:);
  methods[27].selector = @selector(oneTailedFishersExactWithInt:withInt:withInt:withInt:);
  methods[28].selector = @selector(chiSquare2by2WithInt:withInt:withInt:withInt:);
  methods[29].selector = @selector(sigmoidWithDouble:);
  methods[30].selector = @selector(acosWithDouble:);
  methods[31].selector = @selector(poissonWithInt:withDouble:);
  methods[32].selector = @selector(factorialWithInt:);
  methods[33].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "LOGTOLERANCE", "D", .constantValue.asDouble = EduStanfordNlpMathSloppyMath_LOGTOLERANCE, 0x18, -1, -1, -1, -1 },
    { "LOGTOLERANCE_F", "F", .constantValue.asFloat = EduStanfordNlpMathSloppyMath_LOGTOLERANCE_F, 0x18, -1, -1, -1, -1 },
    { "acosCache", "[F", .constantValue.asLong = 0, 0xa, -1, 37, -1, -1 },
  };
  static const void *ptrTable[] = { "round", "D", "DI", "max", "III", "LJavaUtilCollection;", "(Ljava/util/Collection<Ljava/lang/Integer;>;)I", "II", "FF", "DD", "min", "pythonMod", "lgamma", "isDangerous", "isVeryDangerous", "isCloseTo", "gamma", "log", "logAdd", "nChooseK", "pow", "intPow", "FI", "hypergeometric", "IIII", "exactBinomial", "IID", "oneTailedFishersExact", "chiSquare2by2", "sigmoid", "acos", "poisson", "ID", "factorial", "I", "main", "[LNSString;", &EduStanfordNlpMathSloppyMath_acosCache };
  static const J2ObjcClassInfo _EduStanfordNlpMathSloppyMath = { "SloppyMath", "edu.stanford.nlp.math", ptrTable, methods, fields, 7, 0x11, 34, 3, -1, -1, -1, -1, -1 };
  return &_EduStanfordNlpMathSloppyMath;
}

@end

void EduStanfordNlpMathSloppyMath_init(EduStanfordNlpMathSloppyMath *self) {
  NSObject_init(self);
}

EduStanfordNlpMathSloppyMath *new_EduStanfordNlpMathSloppyMath_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpMathSloppyMath, init)
}

EduStanfordNlpMathSloppyMath *create_EduStanfordNlpMathSloppyMath_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpMathSloppyMath, init)
}

jdouble EduStanfordNlpMathSloppyMath_roundWithDouble_(jdouble x) {
  EduStanfordNlpMathSloppyMath_initialize();
  return JavaLangMath_floorWithDouble_(x + 0.5);
}

jdouble EduStanfordNlpMathSloppyMath_roundWithDouble_withInt_(jdouble x, jint precision) {
  EduStanfordNlpMathSloppyMath_initialize();
  jdouble power = JavaLangMath_powWithDouble_withDouble_(10.0, precision);
  return EduStanfordNlpMathSloppyMath_roundWithDouble_(x * power) / power;
}

jint EduStanfordNlpMathSloppyMath_maxWithInt_withInt_withInt_(jint a, jint b, jint c) {
  EduStanfordNlpMathSloppyMath_initialize();
  jint ma;
  ma = a;
  if (b > ma) {
    ma = b;
  }
  if (c > ma) {
    ma = c;
  }
  return ma;
}

jint EduStanfordNlpMathSloppyMath_maxWithJavaUtilCollection_(id<JavaUtilCollection> vals) {
  EduStanfordNlpMathSloppyMath_initialize();
  if ([((id<JavaUtilCollection>) nil_chk(vals)) isEmpty]) {
    @throw new_JavaLangRuntimeException_init();
  }
  jint max = JavaLangInteger_MIN_VALUE;
  for (JavaLangInteger *boxed__ in vals) {
    jint i = [((JavaLangInteger *) nil_chk(boxed__)) intValue];
    if (i > max) {
      max = i;
    }
  }
  return max;
}

jint EduStanfordNlpMathSloppyMath_maxWithInt_withInt_(jint a, jint b) {
  EduStanfordNlpMathSloppyMath_initialize();
  return (a >= b) ? a : b;
}

jfloat EduStanfordNlpMathSloppyMath_maxWithFloat_withFloat_(jfloat a, jfloat b) {
  EduStanfordNlpMathSloppyMath_initialize();
  return (a >= b) ? a : b;
}

jdouble EduStanfordNlpMathSloppyMath_maxWithDouble_withDouble_(jdouble a, jdouble b) {
  EduStanfordNlpMathSloppyMath_initialize();
  return (a >= b) ? a : b;
}

jint EduStanfordNlpMathSloppyMath_minWithInt_withInt_withInt_(jint a, jint b, jint c) {
  EduStanfordNlpMathSloppyMath_initialize();
  jint mi;
  mi = a;
  if (b < mi) {
    mi = b;
  }
  if (c < mi) {
    mi = c;
  }
  return mi;
}

jfloat EduStanfordNlpMathSloppyMath_minWithFloat_withFloat_(jfloat a, jfloat b) {
  EduStanfordNlpMathSloppyMath_initialize();
  return (a <= b) ? a : b;
}

jdouble EduStanfordNlpMathSloppyMath_minWithDouble_withDouble_(jdouble a, jdouble b) {
  EduStanfordNlpMathSloppyMath_initialize();
  return (a <= b) ? a : b;
}

jint EduStanfordNlpMathSloppyMath_pythonModWithInt_withInt_(jint num, jint modulus) {
  EduStanfordNlpMathSloppyMath_initialize();
  return (num % modulus + modulus) % modulus;
}

jdouble EduStanfordNlpMathSloppyMath_lgammaWithDouble_(jdouble x) {
  EduStanfordNlpMathSloppyMath_initialize();
  IOSDoubleArray *cof = [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ 76.18009172947146, -86.50532032941677, 24.01409824083091, -1.231739572450155, 0.1208650973866179e-2, -0.5395239384953e-5 } count:6];
  jdouble xxx = x;
  jdouble tmp = x + 5.5;
  JreMinusAssignDoubleD(&tmp, ((x + 0.5) * JavaLangMath_logWithDouble_(tmp)));
  jdouble ser = 1.000000000190015;
  for (jint j = 0; j < 6; j++) {
    xxx++;
    JrePlusAssignDoubleD(&ser, IOSDoubleArray_Get(cof, j) / xxx);
  }
  return -tmp + JavaLangMath_logWithDouble_(2.5066282746310005 * ser / x);
}

jboolean EduStanfordNlpMathSloppyMath_isDangerousWithDouble_(jdouble d) {
  EduStanfordNlpMathSloppyMath_initialize();
  return JavaLangDouble_isInfiniteWithDouble_(d) || JavaLangDouble_isNaNWithDouble_(d) || d == 0.0;
}

jboolean EduStanfordNlpMathSloppyMath_isVeryDangerousWithDouble_(jdouble d) {
  EduStanfordNlpMathSloppyMath_initialize();
  return JavaLangDouble_isInfiniteWithDouble_(d) || JavaLangDouble_isNaNWithDouble_(d);
}

jboolean EduStanfordNlpMathSloppyMath_isCloseToWithDouble_withDouble_(jdouble a, jdouble b) {
  EduStanfordNlpMathSloppyMath_initialize();
  if (a > b) {
    return (a - b) < 1e-4;
  }
  else {
    return (b - a) < 1e-4;
  }
}

jdouble EduStanfordNlpMathSloppyMath_gammaWithDouble_(jdouble n) {
  EduStanfordNlpMathSloppyMath_initialize();
  return JavaLangMath_sqrtWithDouble_(2.0 * JavaLangMath_PI / n) * JavaLangMath_powWithDouble_withDouble_((n / JavaLangMath_E) * JavaLangMath_sqrtWithDouble_(n * JavaLangMath_sinhWithDouble_((1.0 / n) + (1 / (810 * JavaLangMath_powWithDouble_withDouble_(n, 6))))), n);
}

jdouble EduStanfordNlpMathSloppyMath_logWithDouble_withDouble_(jdouble num, jdouble base) {
  EduStanfordNlpMathSloppyMath_initialize();
  return JavaLangMath_logWithDouble_(num) / JavaLangMath_logWithDouble_(base);
}

jfloat EduStanfordNlpMathSloppyMath_logAddWithFloat_withFloat_(jfloat lx, jfloat ly) {
  EduStanfordNlpMathSloppyMath_initialize();
  jfloat max, negDiff;
  if (lx > ly) {
    max = lx;
    negDiff = ly - lx;
  }
  else {
    max = ly;
    negDiff = lx - ly;
  }
  if (max == JavaLangDouble_NEGATIVE_INFINITY) {
    return max;
  }
  else if (negDiff < -EduStanfordNlpMathSloppyMath_LOGTOLERANCE_F) {
    return max;
  }
  else {
    return max + (jfloat) JavaLangMath_logWithDouble_(1.0 + JavaLangMath_expWithDouble_(negDiff));
  }
}

jdouble EduStanfordNlpMathSloppyMath_logAddWithDouble_withDouble_(jdouble lx, jdouble ly) {
  EduStanfordNlpMathSloppyMath_initialize();
  jdouble max, negDiff;
  if (lx > ly) {
    max = lx;
    negDiff = ly - lx;
  }
  else {
    max = ly;
    negDiff = lx - ly;
  }
  if (max == JavaLangDouble_NEGATIVE_INFINITY) {
    return max;
  }
  else if (negDiff < -EduStanfordNlpMathSloppyMath_LOGTOLERANCE) {
    return max;
  }
  else {
    return max + JavaLangMath_logWithDouble_(1.0 + JavaLangMath_expWithDouble_(negDiff));
  }
}

jint EduStanfordNlpMathSloppyMath_nChooseKWithInt_withInt_(jint n, jint k) {
  EduStanfordNlpMathSloppyMath_initialize();
  k = JavaLangMath_minWithInt_withInt_(k, n - k);
  if (k == 0) {
    return 1;
  }
  jint accum = n;
  for (jint i = 1; i < k; i++) {
    accum *= (n - i);
    accum /= i;
  }
  return accum / k;
}

jdouble EduStanfordNlpMathSloppyMath_powWithDouble_withDouble_(jdouble a, jdouble b) {
  EduStanfordNlpMathSloppyMath_initialize();
  jint x = (jint) (JreRShift64(JavaLangDouble_doubleToLongBitsWithDouble_(a), 32));
  jint y = JreFpToInt((b * (x - 1072632447) + 1072632447));
  return JavaLangDouble_longBitsToDoubleWithLong_(JreLShift64(((jlong) y), 32));
}

jint EduStanfordNlpMathSloppyMath_intPowWithInt_withInt_(jint b, jint e) {
  EduStanfordNlpMathSloppyMath_initialize();
  if (e <= 1) {
    if (e == 1) {
      return b;
    }
    else {
      return 1;
    }
  }
  else {
    if (e == 2) {
      return b * b;
    }
    else {
      jint result = 1;
      while (e > 0) {
        if ((e & 1) != 0) {
          result *= b;
        }
        b *= b;
        JreRShiftAssignInt(&e, 1);
      }
      return result;
    }
  }
}

jfloat EduStanfordNlpMathSloppyMath_intPowWithFloat_withInt_(jfloat b, jint e) {
  EduStanfordNlpMathSloppyMath_initialize();
  jfloat result = 1.0f;
  jfloat currPow = b;
  while (e > 0) {
    if ((e & 1) != 0) {
      JreTimesAssignFloatF(&result, currPow);
    }
    JreTimesAssignFloatF(&currPow, currPow);
    JreRShiftAssignInt(&e, 1);
  }
  return result;
}

jdouble EduStanfordNlpMathSloppyMath_intPowWithDouble_withInt_(jdouble b, jint e) {
  EduStanfordNlpMathSloppyMath_initialize();
  jdouble result = 1.0;
  jdouble currPow = b;
  while (e > 0) {
    if ((e & 1) != 0) {
      JreTimesAssignDoubleD(&result, currPow);
    }
    JreTimesAssignDoubleD(&currPow, currPow);
    JreRShiftAssignInt(&e, 1);
  }
  return result;
}

jdouble EduStanfordNlpMathSloppyMath_hypergeometricWithInt_withInt_withInt_withInt_(jint k, jint n, jint r, jint m) {
  EduStanfordNlpMathSloppyMath_initialize();
  if (k < 0 || r > n || m > n || n <= 0 || m < 0 || r < 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Invalid hypergeometric");
  }
  if (m > n / 2) {
    m = n - m;
    k = r - k;
  }
  if (r > n / 2) {
    r = n - r;
    k = m - k;
  }
  if (m > r) {
    jint temp = m;
    m = r;
    r = temp;
  }
  if (k < (m + r) - n || k > m) {
    return 0.0;
  }
  if (r == n) {
    if (k == m) {
      return 1.0;
    }
    else {
      return 0.0;
    }
  }
  else if (r == n - 1) {
    if (k == m) {
      return (n - m) / (jdouble) n;
    }
    else if (k == m - 1) {
      return m / (jdouble) n;
    }
    else {
      return 0.0;
    }
  }
  else if (m == 1) {
    if (k == 0) {
      return (n - r) / (jdouble) n;
    }
    else if (k == 1) {
      return r / (jdouble) n;
    }
    else {
      return 0.0;
    }
  }
  else if (m == 0) {
    if (k == 0) {
      return 1.0;
    }
    else {
      return 0.0;
    }
  }
  else if (k == 0) {
    jdouble ans = 1.0;
    for (jint m0 = 0; m0 < m; m0++) {
      JreTimesAssignDoubleD(&ans, ((n - r) - m0));
      JreDivideAssignDoubleD(&ans, (n - m0));
    }
    return ans;
  }
  jdouble ans = 1.0;
  for (jint nr = n - r, n0 = n; nr > (n - r) - (m - k); nr--, n0--) {
    JreTimesAssignDoubleD(&ans, nr);
    JreDivideAssignDoubleD(&ans, n0);
  }
  for (jint k0 = 0; k0 < k; k0++) {
    JreTimesAssignDoubleD(&ans, (m - k0));
    JreDivideAssignDoubleD(&ans, ((n - (m - k0)) + 1));
    JreTimesAssignDoubleD(&ans, (r - k0));
    JreDivideAssignDoubleD(&ans, (k0 + 1));
  }
  return ans;
}

jdouble EduStanfordNlpMathSloppyMath_exactBinomialWithInt_withInt_withDouble_(jint k, jint n, jdouble p) {
  EduStanfordNlpMathSloppyMath_initialize();
  jdouble total = 0.0;
  for (jint m = k; m <= n; m++) {
    jdouble nChooseM = 1.0;
    for (jint r = 1; r <= m; r++) {
      JreTimesAssignDoubleD(&nChooseM, (n - r) + 1);
      JreDivideAssignDoubleD(&nChooseM, r);
    }
    JrePlusAssignDoubleD(&total, nChooseM * JavaLangMath_powWithDouble_withDouble_(p, m) * JavaLangMath_powWithDouble_withDouble_(1.0 - p, n - m));
  }
  return total;
}

jdouble EduStanfordNlpMathSloppyMath_oneTailedFishersExactWithInt_withInt_withInt_withInt_(jint k, jint n, jint r, jint m) {
  EduStanfordNlpMathSloppyMath_initialize();
  if (k < 0 || k < (m + r) - n || k > r || k > m || r > n || m > n) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$I$I$I$Z$Z$Z$Z$Z$Z", @"Invalid Fisher's exact: k=", k, @" n=", n, @" r=", r, @" m=", m, @" k<0=", (k < 0), @" k<(m+r)-n=", (k < (m + r) - n), @" k>r=", (k > r), @" k>m=", (k > m), @" r>n=", (r > n), @"m>n=", (m > n)));
  }
  if (m > n / 2) {
    m = n - m;
    k = r - k;
  }
  if (r > n / 2) {
    r = n - r;
    k = m - k;
  }
  if (m > r) {
    jint temp = m;
    m = r;
    r = temp;
  }
  jdouble total = 0.0;
  if (k > m / 2) {
    for (jint k0 = k; k0 <= m; k0++) {
      JrePlusAssignDoubleD(&total, EduStanfordNlpMathSloppyMath_hypergeometricWithInt_withInt_withInt_withInt_(k0, n, r, m));
    }
  }
  else {
    jint min = JavaLangMath_maxWithInt_withInt_(0, (m + r) - n);
    for (jint k0 = min; k0 < k; k0++) {
      JrePlusAssignDoubleD(&total, EduStanfordNlpMathSloppyMath_hypergeometricWithInt_withInt_withInt_withInt_(k0, n, r, m));
    }
    total = 1.0 - total;
  }
  return total;
}

jdouble EduStanfordNlpMathSloppyMath_chiSquare2by2WithInt_withInt_withInt_withInt_(jint k, jint n, jint r, jint m) {
  EduStanfordNlpMathSloppyMath_initialize();
  IOSObjectArray *cg = [IOSObjectArray newArrayWithObjects:(id[]){ [IOSIntArray newArrayWithInts:(jint[]){ k, r - k } count:2], [IOSIntArray newArrayWithInts:(jint[]){ m - k, n - (k + (r - k) + (m - k)) } count:2] } count:2 type:IOSClass_intArray(1)];
  IOSIntArray *cgr = [IOSIntArray newArrayWithInts:(jint[]){ r, n - r } count:2];
  IOSIntArray *cgc = [IOSIntArray newArrayWithInts:(jint[]){ m, n - m } count:2];
  jdouble total = 0.0;
  for (jint i = 0; i < 2; i++) {
    for (jint j = 0; j < 2; j++) {
      jdouble exp = (jdouble) IOSIntArray_Get(cgr, i) * IOSIntArray_Get(cgc, j) / n;
      JrePlusAssignDoubleD(&total, (IOSIntArray_Get(nil_chk(IOSObjectArray_Get(cg, i)), j) - exp) * (IOSIntArray_Get(nil_chk(IOSObjectArray_Get(cg, i)), j) - exp) / exp);
    }
  }
  return total;
}

jdouble EduStanfordNlpMathSloppyMath_sigmoidWithDouble_(jdouble x) {
  EduStanfordNlpMathSloppyMath_initialize();
  if (x < 0) {
    jdouble num = JavaLangMath_expWithDouble_(x);
    return num / (1.0 + num);
  }
  else {
    jdouble den = 1.0 + JavaLangMath_expWithDouble_(-x);
    return 1.0 / den;
  }
}

jdouble EduStanfordNlpMathSloppyMath_acosWithDouble_(jdouble cosValue) {
  EduStanfordNlpMathSloppyMath_initialize();
  if (cosValue < -1.0 || cosValue > 1.0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$D", @"Cosine is not between -1 and 1: ", cosValue));
  }
  jint numSamples = 10000;
  if (EduStanfordNlpMathSloppyMath_acosCache == nil) {
    EduStanfordNlpMathSloppyMath_acosCache = [IOSFloatArray newArrayWithLength:numSamples + 1];
    for (jint i = 0; i <= numSamples; ++i) {
      jdouble x = 2.0 / ((jdouble) numSamples) * ((jdouble) i) - 1.0;
      *IOSFloatArray_GetRef(nil_chk(EduStanfordNlpMathSloppyMath_acosCache), i) = (jfloat) JavaLangMath_acosWithDouble_(x);
    }
  }
  jint i = (JreFpToInt((((cosValue + 1.0) / 2.0) * ((jdouble) numSamples))));
  return IOSFloatArray_Get(nil_chk(EduStanfordNlpMathSloppyMath_acosCache), i);
}

jdouble EduStanfordNlpMathSloppyMath_poissonWithInt_withDouble_(jint x, jdouble lambda) {
  EduStanfordNlpMathSloppyMath_initialize();
  if (x < 0 || lambda <= 0.0) @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$I$D", @"Bad arguments: ", x, @" and ", lambda));
  jdouble p = (JavaLangMath_expWithDouble_(-lambda) * JavaLangMath_powWithDouble_withDouble_(lambda, x)) / EduStanfordNlpMathSloppyMath_factorialWithInt_(x);
  if (JavaLangDouble_isInfiniteWithDouble_(p) || p <= 0.0) @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("DCDCD", JavaLangMath_expWithDouble_(-lambda), ' ', JavaLangMath_powWithDouble_withDouble_(lambda, x), ' ', EduStanfordNlpMathSloppyMath_factorialWithInt_(x)));
  return p;
}

jdouble EduStanfordNlpMathSloppyMath_factorialWithInt_(jint x) {
  EduStanfordNlpMathSloppyMath_initialize();
  jdouble result = 1.0;
  for (jint i = x; i > 1; i--) {
    JreTimesAssignDoubleD(&result, i);
  }
  return result;
}

void EduStanfordNlpMathSloppyMath_mainWithNSStringArray_(IOSObjectArray *args) {
  EduStanfordNlpMathSloppyMath_initialize();
  if (((IOSObjectArray *) nil_chk(args))->size_ == 0) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"Usage: java edu.stanford.nlp.math.SloppyMath [-logAdd|-fishers k n r m|-binomial r n p"];
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, 0))) isEqual:@"-logAdd"]) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"Log adds of neg infinity numbers, etc."];
    [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$D", @"(logs) -Inf + -Inf = ", EduStanfordNlpMathSloppyMath_logAddWithDouble_withDouble_(JavaLangDouble_NEGATIVE_INFINITY, JavaLangDouble_NEGATIVE_INFINITY))];
    [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$D", @"(logs) -Inf + -7 = ", EduStanfordNlpMathSloppyMath_logAddWithDouble_withDouble_(JavaLangDouble_NEGATIVE_INFINITY, -7.0))];
    [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$D", @"(logs) -7 + -Inf = ", EduStanfordNlpMathSloppyMath_logAddWithDouble_withDouble_(-7.0, JavaLangDouble_NEGATIVE_INFINITY))];
    [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$D", @"(logs) -50 + -7 = ", EduStanfordNlpMathSloppyMath_logAddWithDouble_withDouble_(-50.0, -7.0))];
    [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$D", @"(logs) -11 + -7 = ", EduStanfordNlpMathSloppyMath_logAddWithDouble_withDouble_(-11.0, -7.0))];
    [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$D", @"(logs) -7 + -11 = ", EduStanfordNlpMathSloppyMath_logAddWithDouble_withDouble_(-7.0, -11.0))];
    [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$D", @"real 1/2 + 1/2 = ", EduStanfordNlpMathSloppyMath_logAddWithDouble_withDouble_(JavaLangMath_logWithDouble_(0.5), JavaLangMath_logWithDouble_(0.5)))];
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, 0))) isEqual:@"-fishers"]) {
    jint k = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, 1));
    jint n = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, 2));
    jint r = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, 3));
    jint m = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, 4));
    jdouble ans = EduStanfordNlpMathSloppyMath_hypergeometricWithInt_withInt_withInt_withInt_(k, n, r, m);
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I$I$I$I$D", @"hypg(", k, @"; ", n, @", ", r, @", ", m, @") = ", ans)];
    ans = EduStanfordNlpMathSloppyMath_oneTailedFishersExactWithInt_withInt_withInt_withInt_(k, n, r, m);
    [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$I$I$I$I$D", @"1-tailed Fisher's exact(", k, @"; ", n, @", ", r, @", ", m, @") = ", ans)];
    jdouble ansChi = EduStanfordNlpMathSloppyMath_chiSquare2by2WithInt_withInt_withInt_withInt_(k, n, r, m);
    [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$I$I$I$I$D", @"chiSquare(", k, @"; ", n, @", ", r, @", ", m, @") = ", ansChi)];
    [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"Swapping arguments should give same hypg:"];
    ans = EduStanfordNlpMathSloppyMath_hypergeometricWithInt_withInt_withInt_withInt_(k, n, r, m);
    [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$I$I$I$I$D", @"hypg(", k, @"; ", n, @", ", m, @", ", r, @") = ", ans)];
    jint othrow = n - m;
    jint othcol = n - r;
    jint cell12 = m - k;
    jint cell21 = r - k;
    jint cell22 = othrow - (r - k);
    ans = EduStanfordNlpMathSloppyMath_hypergeometricWithInt_withInt_withInt_withInt_(cell12, n, othcol, m);
    [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$I$I$I$I$D", @"hypg(", cell12, @"; ", n, @", ", othcol, @", ", m, @") = ", ans)];
    ans = EduStanfordNlpMathSloppyMath_hypergeometricWithInt_withInt_withInt_withInt_(cell21, n, r, othrow);
    [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$I$I$I$I$D", @"hypg(", cell21, @"; ", n, @", ", r, @", ", othrow, @") = ", ans)];
    ans = EduStanfordNlpMathSloppyMath_hypergeometricWithInt_withInt_withInt_withInt_(cell22, n, othcol, othrow);
    [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$I$I$I$I$D", @"hypg(", cell22, @"; ", n, @", ", othcol, @", ", othrow, @") = ", ans)];
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, 0))) isEqual:@"-binomial"]) {
    jint k = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, 1));
    jint n = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, 2));
    jdouble p = JavaLangDouble_parseDoubleWithNSString_(IOSObjectArray_Get(args, 3));
    jdouble ans = EduStanfordNlpMathSloppyMath_exactBinomialWithInt_withInt_withDouble_(k, n, p);
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I$I$D$D", @"Binomial p(X >= ", k, @"; ", n, @", ", p, @") = ", ans)];
  }
  else {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$", @"Unknown option: ", IOSObjectArray_Get(args, 0))];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpMathSloppyMath)
