//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/math/ArrayMath.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/io/IOUtils.h"
#include "edu/stanford/nlp/math/ArrayMath.h"
#include "edu/stanford/nlp/math/SloppyMath.h"
#include "edu/stanford/nlp/util/RuntimeInterruptedException.h"
#include "edu/stanford/nlp/util/StringUtils.h"
#include "java/io/PrintStream.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/text/NumberFormat.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/List.h"
#include "java/util/Random.h"

@interface EduStanfordNlpMathArrayMath ()

- (instancetype)init;

+ (jdouble)absDiffOfMeansWithDoubleArray:(IOSDoubleArray *)A
                         withDoubleArray:(IOSDoubleArray *)B
                             withBoolean:(jboolean)randomize;

@end

inline JavaUtilRandom *EduStanfordNlpMathArrayMath_get_rand();
static JavaUtilRandom *EduStanfordNlpMathArrayMath_rand;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpMathArrayMath, rand, JavaUtilRandom *)

__attribute__((unused)) static void EduStanfordNlpMathArrayMath_init(EduStanfordNlpMathArrayMath *self);

__attribute__((unused)) static EduStanfordNlpMathArrayMath *new_EduStanfordNlpMathArrayMath_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpMathArrayMath *create_EduStanfordNlpMathArrayMath_init();

__attribute__((unused)) static jdouble EduStanfordNlpMathArrayMath_absDiffOfMeansWithDoubleArray_withDoubleArray_withBoolean_(IOSDoubleArray *A, IOSDoubleArray *B, jboolean randomize);

inline jlong EduStanfordNlpMathArrayMath_InvalidElementException_get_serialVersionUID();
#define EduStanfordNlpMathArrayMath_InvalidElementException_serialVersionUID 1647150702529757545LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpMathArrayMath_InvalidElementException, serialVersionUID, jlong)

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpMathArrayMath)

@implementation EduStanfordNlpMathArrayMath

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpMathArrayMath_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jint)numRowsWithDoubleArray:(IOSDoubleArray *)v {
  return EduStanfordNlpMathArrayMath_numRowsWithDoubleArray_(v);
}

+ (IOSIntArray *)rangeWithInt:(jint)start
                      withInt:(jint)end {
  return EduStanfordNlpMathArrayMath_rangeWithInt_withInt_(start, end);
}

+ (IOSFloatArray *)doubleArrayToFloatArrayWithDoubleArray:(IOSDoubleArray *)a {
  return EduStanfordNlpMathArrayMath_doubleArrayToFloatArrayWithDoubleArray_(a);
}

+ (IOSDoubleArray *)floatArrayToDoubleArrayWithFloatArray:(IOSFloatArray *)a {
  return EduStanfordNlpMathArrayMath_floatArrayToDoubleArrayWithFloatArray_(a);
}

+ (IOSObjectArray *)floatArrayToDoubleArrayWithFloatArray2:(IOSObjectArray *)a {
  return EduStanfordNlpMathArrayMath_floatArrayToDoubleArrayWithFloatArray2_(a);
}

+ (IOSObjectArray *)doubleArrayToFloatArrayWithDoubleArray2:(IOSObjectArray *)a {
  return EduStanfordNlpMathArrayMath_doubleArrayToFloatArrayWithDoubleArray2_(a);
}

+ (IOSDoubleArray *)expWithDoubleArray:(IOSDoubleArray *)a {
  return EduStanfordNlpMathArrayMath_expWithDoubleArray_(a);
}

+ (IOSDoubleArray *)logWithDoubleArray:(IOSDoubleArray *)a {
  return EduStanfordNlpMathArrayMath_logWithDoubleArray_(a);
}

+ (void)expInPlaceWithDoubleArray:(IOSDoubleArray *)a {
  EduStanfordNlpMathArrayMath_expInPlaceWithDoubleArray_(a);
}

+ (void)logInPlaceWithDoubleArray:(IOSDoubleArray *)a {
  EduStanfordNlpMathArrayMath_logInPlaceWithDoubleArray_(a);
}

+ (IOSDoubleArray *)softmaxWithDoubleArray:(IOSDoubleArray *)scales {
  return EduStanfordNlpMathArrayMath_softmaxWithDoubleArray_(scales);
}

+ (void)addInPlaceWithDoubleArray:(IOSDoubleArray *)a
                       withDouble:(jdouble)b {
  EduStanfordNlpMathArrayMath_addInPlaceWithDoubleArray_withDouble_(a, b);
}

+ (void)addInPlaceWithFloatArray:(IOSFloatArray *)a
                      withDouble:(jdouble)b {
  EduStanfordNlpMathArrayMath_addInPlaceWithFloatArray_withDouble_(a, b);
}

+ (void)addMultInPlaceWithDoubleArray:(IOSDoubleArray *)a
                      withDoubleArray:(IOSDoubleArray *)b
                           withDouble:(jdouble)c {
  EduStanfordNlpMathArrayMath_addMultInPlaceWithDoubleArray_withDoubleArray_withDouble_(a, b, c);
}

+ (void)multiplyInPlaceWithDoubleArray:(IOSDoubleArray *)a
                            withDouble:(jdouble)b {
  EduStanfordNlpMathArrayMath_multiplyInPlaceWithDoubleArray_withDouble_(a, b);
}

+ (void)multiplyInPlaceWithFloatArray:(IOSFloatArray *)a
                           withDouble:(jdouble)b {
  EduStanfordNlpMathArrayMath_multiplyInPlaceWithFloatArray_withDouble_(a, b);
}

+ (void)divideInPlaceWithDoubleArray:(IOSDoubleArray *)a
                          withDouble:(jdouble)b {
  EduStanfordNlpMathArrayMath_divideInPlaceWithDoubleArray_withDouble_(a, b);
}

+ (void)powInPlaceWithDoubleArray:(IOSDoubleArray *)a
                       withDouble:(jdouble)c {
  EduStanfordNlpMathArrayMath_powInPlaceWithDoubleArray_withDouble_(a, c);
}

+ (void)powInPlaceWithFloatArray:(IOSFloatArray *)a
                       withFloat:(jfloat)c {
  EduStanfordNlpMathArrayMath_powInPlaceWithFloatArray_withFloat_(a, c);
}

+ (IOSDoubleArray *)addWithDoubleArray:(IOSDoubleArray *)a
                            withDouble:(jdouble)c {
  return EduStanfordNlpMathArrayMath_addWithDoubleArray_withDouble_(a, c);
}

+ (IOSFloatArray *)addWithFloatArray:(IOSFloatArray *)a
                          withDouble:(jdouble)c {
  return EduStanfordNlpMathArrayMath_addWithFloatArray_withDouble_(a, c);
}

+ (IOSDoubleArray *)multiplyWithDoubleArray:(IOSDoubleArray *)a
                                 withDouble:(jdouble)c {
  return EduStanfordNlpMathArrayMath_multiplyWithDoubleArray_withDouble_(a, c);
}

+ (IOSFloatArray *)multiplyWithFloatArray:(IOSFloatArray *)a
                                withFloat:(jfloat)c {
  return EduStanfordNlpMathArrayMath_multiplyWithFloatArray_withFloat_(a, c);
}

+ (IOSDoubleArray *)powWithDoubleArray:(IOSDoubleArray *)a
                            withDouble:(jdouble)c {
  return EduStanfordNlpMathArrayMath_powWithDoubleArray_withDouble_(a, c);
}

+ (IOSFloatArray *)powWithFloatArray:(IOSFloatArray *)a
                           withFloat:(jfloat)c {
  return EduStanfordNlpMathArrayMath_powWithFloatArray_withFloat_(a, c);
}

+ (void)pairwiseAddInPlaceWithFloatArray:(IOSFloatArray *)to
                          withFloatArray:(IOSFloatArray *)from {
  EduStanfordNlpMathArrayMath_pairwiseAddInPlaceWithFloatArray_withFloatArray_(to, from);
}

+ (void)pairwiseAddInPlaceWithDoubleArray:(IOSDoubleArray *)to
                          withDoubleArray:(IOSDoubleArray *)from {
  EduStanfordNlpMathArrayMath_pairwiseAddInPlaceWithDoubleArray_withDoubleArray_(to, from);
}

+ (void)pairwiseAddInPlaceWithDoubleArray:(IOSDoubleArray *)to
                             withIntArray:(IOSIntArray *)from {
  EduStanfordNlpMathArrayMath_pairwiseAddInPlaceWithDoubleArray_withIntArray_(to, from);
}

+ (void)pairwiseAddInPlaceWithDoubleArray:(IOSDoubleArray *)to
                           withShortArray:(IOSShortArray *)from {
  EduStanfordNlpMathArrayMath_pairwiseAddInPlaceWithDoubleArray_withShortArray_(to, from);
}

+ (void)pairwiseSubtractInPlaceWithDoubleArray:(IOSDoubleArray *)to
                               withDoubleArray:(IOSDoubleArray *)from {
  EduStanfordNlpMathArrayMath_pairwiseSubtractInPlaceWithDoubleArray_withDoubleArray_(to, from);
}

+ (void)pairwiseScaleAddInPlaceWithDoubleArray:(IOSDoubleArray *)to
                               withDoubleArray:(IOSDoubleArray *)from
                                    withDouble:(jdouble)fromScale {
  EduStanfordNlpMathArrayMath_pairwiseScaleAddInPlaceWithDoubleArray_withDoubleArray_withDouble_(to, from, fromScale);
}

+ (IOSIntArray *)pairwiseAddWithIntArray:(IOSIntArray *)a
                            withIntArray:(IOSIntArray *)b {
  return EduStanfordNlpMathArrayMath_pairwiseAddWithIntArray_withIntArray_(a, b);
}

+ (IOSDoubleArray *)pairwiseAddWithDoubleArray:(IOSDoubleArray *)a
                               withDoubleArray:(IOSDoubleArray *)b {
  return EduStanfordNlpMathArrayMath_pairwiseAddWithDoubleArray_withDoubleArray_(a, b);
}

+ (IOSFloatArray *)pairwiseAddWithFloatArray:(IOSFloatArray *)a
                              withFloatArray:(IOSFloatArray *)b {
  return EduStanfordNlpMathArrayMath_pairwiseAddWithFloatArray_withFloatArray_(a, b);
}

+ (IOSDoubleArray *)pairwiseScaleAddWithDoubleArray:(IOSDoubleArray *)a
                                    withDoubleArray:(IOSDoubleArray *)b
                                         withDouble:(jdouble)bScale {
  return EduStanfordNlpMathArrayMath_pairwiseScaleAddWithDoubleArray_withDoubleArray_withDouble_(a, b, bScale);
}

+ (IOSDoubleArray *)pairwiseSubtractWithDoubleArray:(IOSDoubleArray *)a
                                    withDoubleArray:(IOSDoubleArray *)b {
  return EduStanfordNlpMathArrayMath_pairwiseSubtractWithDoubleArray_withDoubleArray_(a, b);
}

+ (IOSFloatArray *)pairwiseSubtractWithFloatArray:(IOSFloatArray *)a
                                   withFloatArray:(IOSFloatArray *)b {
  return EduStanfordNlpMathArrayMath_pairwiseSubtractWithFloatArray_withFloatArray_(a, b);
}

+ (jdouble)dotProductWithDoubleArray:(IOSDoubleArray *)a
                     withDoubleArray:(IOSDoubleArray *)b {
  return EduStanfordNlpMathArrayMath_dotProductWithDoubleArray_withDoubleArray_(a, b);
}

+ (IOSDoubleArray *)pairwiseMultiplyWithDoubleArray:(IOSDoubleArray *)a
                                    withDoubleArray:(IOSDoubleArray *)b {
  return EduStanfordNlpMathArrayMath_pairwiseMultiplyWithDoubleArray_withDoubleArray_(a, b);
}

+ (IOSFloatArray *)pairwiseMultiplyWithFloatArray:(IOSFloatArray *)a
                                   withFloatArray:(IOSFloatArray *)b {
  return EduStanfordNlpMathArrayMath_pairwiseMultiplyWithFloatArray_withFloatArray_(a, b);
}

+ (void)pairwiseMultiplyWithDoubleArray:(IOSDoubleArray *)a
                        withDoubleArray:(IOSDoubleArray *)b
                        withDoubleArray:(IOSDoubleArray *)result {
  EduStanfordNlpMathArrayMath_pairwiseMultiplyWithDoubleArray_withDoubleArray_withDoubleArray_(a, b, result);
}

+ (void)pairwiseMultiplyWithFloatArray:(IOSFloatArray *)a
                        withFloatArray:(IOSFloatArray *)b
                        withFloatArray:(IOSFloatArray *)result {
  EduStanfordNlpMathArrayMath_pairwiseMultiplyWithFloatArray_withFloatArray_withFloatArray_(a, b, result);
}

+ (void)pairwiseDivideInPlaceWithDoubleArray:(IOSDoubleArray *)a
                             withDoubleArray:(IOSDoubleArray *)b {
  EduStanfordNlpMathArrayMath_pairwiseDivideInPlaceWithDoubleArray_withDoubleArray_(a, b);
}

+ (jboolean)hasNaNWithDoubleArray:(IOSDoubleArray *)a {
  return EduStanfordNlpMathArrayMath_hasNaNWithDoubleArray_(a);
}

+ (jboolean)hasInfiniteWithDoubleArray:(IOSDoubleArray *)a {
  return EduStanfordNlpMathArrayMath_hasInfiniteWithDoubleArray_(a);
}

+ (jboolean)hasNaNWithFloatArray:(IOSFloatArray *)a {
  return EduStanfordNlpMathArrayMath_hasNaNWithFloatArray_(a);
}

+ (jint)countNaNWithDoubleArray:(IOSDoubleArray *)v {
  return EduStanfordNlpMathArrayMath_countNaNWithDoubleArray_(v);
}

+ (IOSDoubleArray *)filterNaNWithDoubleArray:(IOSDoubleArray *)v {
  return EduStanfordNlpMathArrayMath_filterNaNWithDoubleArray_(v);
}

+ (jint)countInfiniteWithDoubleArray:(IOSDoubleArray *)v {
  return EduStanfordNlpMathArrayMath_countInfiniteWithDoubleArray_(v);
}

+ (jint)countNonZeroWithDoubleArray:(IOSDoubleArray *)v {
  return EduStanfordNlpMathArrayMath_countNonZeroWithDoubleArray_(v);
}

+ (jint)countCloseToZeroWithDoubleArray:(IOSDoubleArray *)v
                             withDouble:(jdouble)epsilon {
  return EduStanfordNlpMathArrayMath_countCloseToZeroWithDoubleArray_withDouble_(v, epsilon);
}

+ (jint)countPositiveWithDoubleArray:(IOSDoubleArray *)v {
  return EduStanfordNlpMathArrayMath_countPositiveWithDoubleArray_(v);
}

+ (jint)countNegativeWithDoubleArray:(IOSDoubleArray *)v {
  return EduStanfordNlpMathArrayMath_countNegativeWithDoubleArray_(v);
}

+ (IOSDoubleArray *)filterInfiniteWithDoubleArray:(IOSDoubleArray *)v {
  return EduStanfordNlpMathArrayMath_filterInfiniteWithDoubleArray_(v);
}

+ (IOSDoubleArray *)filterNaNAndInfiniteWithDoubleArray:(IOSDoubleArray *)v {
  return EduStanfordNlpMathArrayMath_filterNaNAndInfiniteWithDoubleArray_(v);
}

+ (jdouble)sumWithDoubleArray:(IOSDoubleArray *)a {
  return EduStanfordNlpMathArrayMath_sumWithDoubleArray_(a);
}

+ (jdouble)sumWithDoubleArray:(IOSDoubleArray *)a
                      withInt:(jint)fromIndex
                      withInt:(jint)toIndex {
  return EduStanfordNlpMathArrayMath_sumWithDoubleArray_withInt_withInt_(a, fromIndex, toIndex);
}

+ (jint)sumWithIntArray:(IOSIntArray *)a {
  return EduStanfordNlpMathArrayMath_sumWithIntArray_(a);
}

+ (jfloat)sumWithFloatArray:(IOSFloatArray *)a {
  return EduStanfordNlpMathArrayMath_sumWithFloatArray_(a);
}

+ (jint)sumWithIntArray2:(IOSObjectArray *)a {
  return EduStanfordNlpMathArrayMath_sumWithIntArray2_(a);
}

+ (IOSIntArray *)diagWithIntArray2:(IOSObjectArray *)a {
  return EduStanfordNlpMathArrayMath_diagWithIntArray2_(a);
}

+ (jdouble)averageWithDoubleArray:(IOSDoubleArray *)a {
  return EduStanfordNlpMathArrayMath_averageWithDoubleArray_(a);
}

+ (jdouble)iterativeAverageWithDoubleArray:(IOSDoubleArray *)a {
  return EduStanfordNlpMathArrayMath_iterativeAverageWithDoubleArray_(a);
}

+ (jdouble)norm_infWithDoubleArray:(IOSDoubleArray *)a {
  return EduStanfordNlpMathArrayMath_norm_infWithDoubleArray_(a);
}

+ (jdouble)norm_infWithFloatArray:(IOSFloatArray *)a {
  return EduStanfordNlpMathArrayMath_norm_infWithFloatArray_(a);
}

+ (jdouble)norm_1WithDoubleArray:(IOSDoubleArray *)a {
  return EduStanfordNlpMathArrayMath_norm_1WithDoubleArray_(a);
}

+ (jdouble)norm_1WithFloatArray:(IOSFloatArray *)a {
  return EduStanfordNlpMathArrayMath_norm_1WithFloatArray_(a);
}

+ (jdouble)normWithDoubleArray:(IOSDoubleArray *)a {
  return EduStanfordNlpMathArrayMath_normWithDoubleArray_(a);
}

+ (jdouble)normWithFloatArray:(IOSFloatArray *)a {
  return EduStanfordNlpMathArrayMath_normWithFloatArray_(a);
}

+ (jint)argmaxWithDoubleArray:(IOSDoubleArray *)a {
  return EduStanfordNlpMathArrayMath_argmaxWithDoubleArray_(a);
}

+ (jint)argmax_tieLastWithDoubleArray:(IOSDoubleArray *)a {
  return EduStanfordNlpMathArrayMath_argmax_tieLastWithDoubleArray_(a);
}

+ (jdouble)maxWithDoubleArray:(IOSDoubleArray *)a {
  return EduStanfordNlpMathArrayMath_maxWithDoubleArray_(a);
}

+ (jdouble)maxWithJavaUtilCollection:(id<JavaUtilCollection>)a {
  return EduStanfordNlpMathArrayMath_maxWithJavaUtilCollection_(a);
}

+ (jint)argmaxWithFloatArray:(IOSFloatArray *)a {
  return EduStanfordNlpMathArrayMath_argmaxWithFloatArray_(a);
}

+ (jfloat)maxWithFloatArray:(IOSFloatArray *)a {
  return EduStanfordNlpMathArrayMath_maxWithFloatArray_(a);
}

+ (jint)argminWithDoubleArray:(IOSDoubleArray *)a {
  return EduStanfordNlpMathArrayMath_argminWithDoubleArray_(a);
}

+ (jdouble)minWithDoubleArray:(IOSDoubleArray *)a {
  return EduStanfordNlpMathArrayMath_minWithDoubleArray_(a);
}

+ (jdouble)safeMinWithDoubleArray:(IOSDoubleArray *)v {
  return EduStanfordNlpMathArrayMath_safeMinWithDoubleArray_(v);
}

+ (jint)argminWithFloatArray:(IOSFloatArray *)a {
  return EduStanfordNlpMathArrayMath_argminWithFloatArray_(a);
}

+ (jfloat)minWithFloatArray:(IOSFloatArray *)a {
  return EduStanfordNlpMathArrayMath_minWithFloatArray_(a);
}

+ (jint)argminWithIntArray:(IOSIntArray *)a {
  return EduStanfordNlpMathArrayMath_argminWithIntArray_(a);
}

+ (jint)minWithIntArray:(IOSIntArray *)a {
  return EduStanfordNlpMathArrayMath_minWithIntArray_(a);
}

+ (jint)argmaxWithIntArray:(IOSIntArray *)a {
  return EduStanfordNlpMathArrayMath_argmaxWithIntArray_(a);
}

+ (jint)maxWithIntArray:(IOSIntArray *)a {
  return EduStanfordNlpMathArrayMath_maxWithIntArray_(a);
}

+ (jint)minWithIntArray2:(IOSObjectArray *)matrix {
  return EduStanfordNlpMathArrayMath_minWithIntArray2_(matrix);
}

+ (jint)maxWithIntArray2:(IOSObjectArray *)matrix {
  return EduStanfordNlpMathArrayMath_maxWithIntArray2_(matrix);
}

+ (jdouble)safeMaxWithDoubleArray:(IOSDoubleArray *)v {
  return EduStanfordNlpMathArrayMath_safeMaxWithDoubleArray_(v);
}

+ (jdouble)logSumWithDoubleArray:(IOSDoubleArray *)logInputs {
  return EduStanfordNlpMathArrayMath_logSumWithDoubleArray_(logInputs);
}

+ (jdouble)logSumWithDoubleArray:(IOSDoubleArray *)logInputs
                         withInt:(jint)fromIndex
                         withInt:(jint)toIndex {
  return EduStanfordNlpMathArrayMath_logSumWithDoubleArray_withInt_withInt_(logInputs, fromIndex, toIndex);
}

+ (jdouble)logSumWithDoubleArray:(IOSDoubleArray *)logInputs
                         withInt:(jint)fromIndex
                         withInt:(jint)afterIndex
                         withInt:(jint)stride {
  return EduStanfordNlpMathArrayMath_logSumWithDoubleArray_withInt_withInt_withInt_(logInputs, fromIndex, afterIndex, stride);
}

+ (jdouble)logSumWithJavaUtilList:(id<JavaUtilList>)logInputs {
  return EduStanfordNlpMathArrayMath_logSumWithJavaUtilList_(logInputs);
}

+ (jdouble)logSumWithJavaUtilList:(id<JavaUtilList>)logInputs
                          withInt:(jint)fromIndex
                          withInt:(jint)toIndex {
  return EduStanfordNlpMathArrayMath_logSumWithJavaUtilList_withInt_withInt_(logInputs, fromIndex, toIndex);
}

+ (jfloat)logSumWithFloatArray:(IOSFloatArray *)logInputs {
  return EduStanfordNlpMathArrayMath_logSumWithFloatArray_(logInputs);
}

+ (jdouble)innerProductWithDoubleArray:(IOSDoubleArray *)a
                       withDoubleArray:(IOSDoubleArray *)b {
  return EduStanfordNlpMathArrayMath_innerProductWithDoubleArray_withDoubleArray_(a, b);
}

+ (jdouble)innerProductWithFloatArray:(IOSFloatArray *)a
                       withFloatArray:(IOSFloatArray *)b {
  return EduStanfordNlpMathArrayMath_innerProductWithFloatArray_withFloatArray_(a, b);
}

+ (IOSObjectArray *)load2DMatrixFromFileWithNSString:(NSString *)filename {
  return EduStanfordNlpMathArrayMath_load2DMatrixFromFileWithNSString_(filename);
}

+ (IOSObjectArray *)boxWithIntArray:(IOSIntArray *)assignment {
  return EduStanfordNlpMathArrayMath_boxWithIntArray_(assignment);
}

+ (IOSIntArray *)unboxToIntWithJavaUtilCollection:(id<JavaUtilCollection>)list {
  return EduStanfordNlpMathArrayMath_unboxToIntWithJavaUtilCollection_(list);
}

+ (IOSObjectArray *)boxWithDoubleArray:(IOSDoubleArray *)assignment {
  return EduStanfordNlpMathArrayMath_boxWithDoubleArray_(assignment);
}

+ (IOSDoubleArray *)unboxWithJavaUtilCollection:(id<JavaUtilCollection>)list {
  return EduStanfordNlpMathArrayMath_unboxWithJavaUtilCollection_(list);
}

+ (jint)indexOfWithInt:(jint)n
          withIntArray:(IOSIntArray *)a {
  return EduStanfordNlpMathArrayMath_indexOfWithInt_withIntArray_(n, a);
}

+ (IOSObjectArray *)castToIntWithDoubleArray2:(IOSObjectArray *)doubleCounts {
  return EduStanfordNlpMathArrayMath_castToIntWithDoubleArray2_(doubleCounts);
}

+ (void)normalizeWithDoubleArray:(IOSDoubleArray *)a {
  EduStanfordNlpMathArrayMath_normalizeWithDoubleArray_(a);
}

+ (void)L1normalizeWithDoubleArray:(IOSDoubleArray *)a {
  EduStanfordNlpMathArrayMath_L1normalizeWithDoubleArray_(a);
}

+ (void)L2normalizeWithDoubleArray:(IOSDoubleArray *)a {
  EduStanfordNlpMathArrayMath_L2normalizeWithDoubleArray_(a);
}

+ (void)normalizeWithFloatArray:(IOSFloatArray *)a {
  EduStanfordNlpMathArrayMath_normalizeWithFloatArray_(a);
}

+ (void)L2normalizeWithFloatArray:(IOSFloatArray *)a {
  EduStanfordNlpMathArrayMath_L2normalizeWithFloatArray_(a);
}

+ (void)standardizeWithDoubleArray:(IOSDoubleArray *)a {
  EduStanfordNlpMathArrayMath_standardizeWithDoubleArray_(a);
}

+ (jdouble)L2NormWithDoubleArray:(IOSDoubleArray *)a {
  return EduStanfordNlpMathArrayMath_L2NormWithDoubleArray_(a);
}

+ (jfloat)L2NormWithFloatArray:(IOSFloatArray *)a {
  return EduStanfordNlpMathArrayMath_L2NormWithFloatArray_(a);
}

+ (jdouble)L1NormWithDoubleArray:(IOSDoubleArray *)a {
  return EduStanfordNlpMathArrayMath_L1NormWithDoubleArray_(a);
}

+ (void)logNormalizeWithDoubleArray:(IOSDoubleArray *)a {
  EduStanfordNlpMathArrayMath_logNormalizeWithDoubleArray_(a);
}

+ (jint)sampleFromDistributionWithDoubleArray:(IOSDoubleArray *)d {
  return EduStanfordNlpMathArrayMath_sampleFromDistributionWithDoubleArray_(d);
}

+ (jint)sampleFromDistributionWithDoubleArray:(IOSDoubleArray *)d
                           withJavaUtilRandom:(JavaUtilRandom *)random {
  return EduStanfordNlpMathArrayMath_sampleFromDistributionWithDoubleArray_withJavaUtilRandom_(d, random);
}

+ (jint)sampleFromDistributionWithFloatArray:(IOSFloatArray *)d
                          withJavaUtilRandom:(JavaUtilRandom *)random {
  return EduStanfordNlpMathArrayMath_sampleFromDistributionWithFloatArray_withJavaUtilRandom_(d, random);
}

+ (jdouble)klDivergenceWithDoubleArray:(IOSDoubleArray *)from
                       withDoubleArray:(IOSDoubleArray *)to {
  return EduStanfordNlpMathArrayMath_klDivergenceWithDoubleArray_withDoubleArray_(from, to);
}

+ (jdouble)jensenShannonDivergenceWithDoubleArray:(IOSDoubleArray *)a
                                  withDoubleArray:(IOSDoubleArray *)b {
  return EduStanfordNlpMathArrayMath_jensenShannonDivergenceWithDoubleArray_withDoubleArray_(a, b);
}

+ (void)setToLogDeterministicWithFloatArray:(IOSFloatArray *)a
                                    withInt:(jint)i {
  EduStanfordNlpMathArrayMath_setToLogDeterministicWithFloatArray_withInt_(a, i);
}

+ (void)setToLogDeterministicWithDoubleArray:(IOSDoubleArray *)a
                                     withInt:(jint)i {
  EduStanfordNlpMathArrayMath_setToLogDeterministicWithDoubleArray_withInt_(a, i);
}

+ (jdouble)meanWithDoubleArray:(IOSDoubleArray *)a {
  return EduStanfordNlpMathArrayMath_meanWithDoubleArray_(a);
}

+ (jdouble)meanWithIntArray:(IOSIntArray *)a {
  return EduStanfordNlpMathArrayMath_meanWithIntArray_(a);
}

+ (jdouble)medianWithDoubleArray:(IOSDoubleArray *)a {
  return EduStanfordNlpMathArrayMath_medianWithDoubleArray_(a);
}

+ (jdouble)safeMeanWithDoubleArray:(IOSDoubleArray *)v {
  return EduStanfordNlpMathArrayMath_safeMeanWithDoubleArray_(v);
}

+ (jdouble)sumSquaredErrorWithDoubleArray:(IOSDoubleArray *)a {
  return EduStanfordNlpMathArrayMath_sumSquaredErrorWithDoubleArray_(a);
}

+ (jdouble)sumSquaredWithDoubleArray:(IOSDoubleArray *)a {
  return EduStanfordNlpMathArrayMath_sumSquaredWithDoubleArray_(a);
}

+ (jdouble)varianceWithDoubleArray:(IOSDoubleArray *)a {
  return EduStanfordNlpMathArrayMath_varianceWithDoubleArray_(a);
}

+ (jdouble)stdevWithDoubleArray:(IOSDoubleArray *)a {
  return EduStanfordNlpMathArrayMath_stdevWithDoubleArray_(a);
}

+ (jdouble)safeStdevWithDoubleArray:(IOSDoubleArray *)v {
  return EduStanfordNlpMathArrayMath_safeStdevWithDoubleArray_(v);
}

+ (jdouble)standardErrorOfMeanWithDoubleArray:(IOSDoubleArray *)a {
  return EduStanfordNlpMathArrayMath_standardErrorOfMeanWithDoubleArray_(a);
}

+ (void)sampleWithoutReplacementWithIntArray:(IOSIntArray *)array
                                     withInt:(jint)numArgClasses {
  EduStanfordNlpMathArrayMath_sampleWithoutReplacementWithIntArray_withInt_(array, numArgClasses);
}

+ (void)sampleWithoutReplacementWithIntArray:(IOSIntArray *)array
                                     withInt:(jint)numArgClasses
                          withJavaUtilRandom:(JavaUtilRandom *)rand {
  EduStanfordNlpMathArrayMath_sampleWithoutReplacementWithIntArray_withInt_withJavaUtilRandom_(array, numArgClasses, rand);
}

+ (void)shuffleWithIntArray:(IOSIntArray *)a {
  EduStanfordNlpMathArrayMath_shuffleWithIntArray_(a);
}

+ (void)shuffleWithIntArray:(IOSIntArray *)a
         withJavaUtilRandom:(JavaUtilRandom *)rand {
  EduStanfordNlpMathArrayMath_shuffleWithIntArray_withJavaUtilRandom_(a, rand);
}

+ (void)reverseWithIntArray:(IOSIntArray *)a {
  EduStanfordNlpMathArrayMath_reverseWithIntArray_(a);
}

+ (jboolean)containsWithIntArray:(IOSIntArray *)a
                         withInt:(jint)i {
  return EduStanfordNlpMathArrayMath_containsWithIntArray_withInt_(a, i);
}

+ (jboolean)containsInSubarrayWithIntArray:(IOSIntArray *)a
                                   withInt:(jint)begin
                                   withInt:(jint)end
                                   withInt:(jint)i {
  return EduStanfordNlpMathArrayMath_containsInSubarrayWithIntArray_withInt_withInt_withInt_(a, begin, end, i);
}

+ (jdouble)pearsonCorrelationWithDoubleArray:(IOSDoubleArray *)x
                             withDoubleArray:(IOSDoubleArray *)y {
  return EduStanfordNlpMathArrayMath_pearsonCorrelationWithDoubleArray_withDoubleArray_(x, y);
}

+ (jdouble)sigLevelByApproxRandWithDoubleArray:(IOSDoubleArray *)A
                               withDoubleArray:(IOSDoubleArray *)B {
  return EduStanfordNlpMathArrayMath_sigLevelByApproxRandWithDoubleArray_withDoubleArray_(A, B);
}

+ (jdouble)sigLevelByApproxRandWithDoubleArray:(IOSDoubleArray *)A
                               withDoubleArray:(IOSDoubleArray *)B
                                       withInt:(jint)iterations {
  return EduStanfordNlpMathArrayMath_sigLevelByApproxRandWithDoubleArray_withDoubleArray_withInt_(A, B, iterations);
}

+ (jdouble)sigLevelByApproxRandWithIntArray:(IOSIntArray *)A
                               withIntArray:(IOSIntArray *)B {
  return EduStanfordNlpMathArrayMath_sigLevelByApproxRandWithIntArray_withIntArray_(A, B);
}

+ (jdouble)sigLevelByApproxRandWithIntArray:(IOSIntArray *)A
                               withIntArray:(IOSIntArray *)B
                                    withInt:(jint)iterations {
  return EduStanfordNlpMathArrayMath_sigLevelByApproxRandWithIntArray_withIntArray_withInt_(A, B, iterations);
}

+ (jdouble)sigLevelByApproxRandWithBooleanArray:(IOSBooleanArray *)A
                               withBooleanArray:(IOSBooleanArray *)B {
  return EduStanfordNlpMathArrayMath_sigLevelByApproxRandWithBooleanArray_withBooleanArray_(A, B);
}

+ (jdouble)sigLevelByApproxRandWithBooleanArray:(IOSBooleanArray *)A
                               withBooleanArray:(IOSBooleanArray *)B
                                        withInt:(jint)iterations {
  return EduStanfordNlpMathArrayMath_sigLevelByApproxRandWithBooleanArray_withBooleanArray_withInt_(A, B, iterations);
}

+ (jdouble)absDiffOfMeansWithDoubleArray:(IOSDoubleArray *)A
                         withDoubleArray:(IOSDoubleArray *)B
                             withBoolean:(jboolean)randomize {
  return EduStanfordNlpMathArrayMath_absDiffOfMeansWithDoubleArray_withDoubleArray_withBoolean_(A, B, randomize);
}

+ (NSString *)toBinaryStringWithByteArray:(IOSByteArray *)b {
  return EduStanfordNlpMathArrayMath_toBinaryStringWithByteArray_(b);
}

+ (NSString *)toStringWithDoubleArray:(IOSDoubleArray *)a {
  return EduStanfordNlpMathArrayMath_toStringWithDoubleArray_(a);
}

+ (NSString *)toStringWithDoubleArray:(IOSDoubleArray *)a
             withJavaTextNumberFormat:(JavaTextNumberFormat *)nf {
  return EduStanfordNlpMathArrayMath_toStringWithDoubleArray_withJavaTextNumberFormat_(a, nf);
}

+ (NSString *)toStringWithFloatArray:(IOSFloatArray *)a {
  return EduStanfordNlpMathArrayMath_toStringWithFloatArray_(a);
}

+ (NSString *)toStringWithFloatArray:(IOSFloatArray *)a
            withJavaTextNumberFormat:(JavaTextNumberFormat *)nf {
  return EduStanfordNlpMathArrayMath_toStringWithFloatArray_withJavaTextNumberFormat_(a, nf);
}

+ (NSString *)toStringWithIntArray:(IOSIntArray *)a {
  return EduStanfordNlpMathArrayMath_toStringWithIntArray_(a);
}

+ (NSString *)toStringWithIntArray:(IOSIntArray *)a
          withJavaTextNumberFormat:(JavaTextNumberFormat *)nf {
  return EduStanfordNlpMathArrayMath_toStringWithIntArray_withJavaTextNumberFormat_(a, nf);
}

+ (NSString *)toStringWithByteArray:(IOSByteArray *)a {
  return EduStanfordNlpMathArrayMath_toStringWithByteArray_(a);
}

+ (NSString *)toStringWithByteArray:(IOSByteArray *)a
           withJavaTextNumberFormat:(JavaTextNumberFormat *)nf {
  return EduStanfordNlpMathArrayMath_toStringWithByteArray_withJavaTextNumberFormat_(a, nf);
}

+ (NSString *)toStringWithIntArray2:(IOSObjectArray *)counts {
  return EduStanfordNlpMathArrayMath_toStringWithIntArray2_(counts);
}

+ (NSString *)toStringWithIntArray2:(IOSObjectArray *)counts
                  withNSObjectArray:(IOSObjectArray *)rowLabels
                  withNSObjectArray:(IOSObjectArray *)colLabels
                            withInt:(jint)labelSize
                            withInt:(jint)cellSize
           withJavaTextNumberFormat:(JavaTextNumberFormat *)nf
                        withBoolean:(jboolean)printTotals {
  return EduStanfordNlpMathArrayMath_toStringWithIntArray2_withNSObjectArray_withNSObjectArray_withInt_withInt_withJavaTextNumberFormat_withBoolean_(counts, rowLabels, colLabels, labelSize, cellSize, nf, printTotals);
}

+ (NSString *)toStringWithDoubleArray2:(IOSObjectArray *)counts {
  return EduStanfordNlpMathArrayMath_toStringWithDoubleArray2_(counts);
}

+ (NSString *)toStringWithDoubleArray2:(IOSObjectArray *)counts
                               withInt:(jint)cellSize
                     withNSObjectArray:(IOSObjectArray *)rowLabels
                     withNSObjectArray:(IOSObjectArray *)colLabels
              withJavaTextNumberFormat:(JavaTextNumberFormat *)nf
                           withBoolean:(jboolean)printTotals {
  return EduStanfordNlpMathArrayMath_toStringWithDoubleArray2_withInt_withNSObjectArray_withNSObjectArray_withJavaTextNumberFormat_withBoolean_(counts, cellSize, rowLabels, colLabels, nf, printTotals);
}

+ (NSString *)toStringWithFloatArray2:(IOSObjectArray *)counts {
  return EduStanfordNlpMathArrayMath_toStringWithFloatArray2_(counts);
}

+ (NSString *)toStringWithFloatArray2:(IOSObjectArray *)counts
                              withInt:(jint)cellSize
                    withNSObjectArray:(IOSObjectArray *)rowLabels
                    withNSObjectArray:(IOSObjectArray *)colLabels
             withJavaTextNumberFormat:(JavaTextNumberFormat *)nf
                          withBoolean:(jboolean)printTotals {
  return EduStanfordNlpMathArrayMath_toStringWithFloatArray2_withInt_withNSObjectArray_withNSObjectArray_withJavaTextNumberFormat_withBoolean_(counts, cellSize, rowLabels, colLabels, nf, printTotals);
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  EduStanfordNlpMathArrayMath_mainWithNSStringArray_(args);
}

+ (IOSObjectArray *)deepCopyWithIntArray2:(IOSObjectArray *)counts {
  return EduStanfordNlpMathArrayMath_deepCopyWithIntArray2_(counts);
}

+ (IOSObjectArray *)covarianceWithDoubleArray2:(IOSObjectArray *)data {
  return EduStanfordNlpMathArrayMath_covarianceWithDoubleArray2_(data);
}

+ (void)addMultIntoWithDoubleArray:(IOSDoubleArray *)a
                   withDoubleArray:(IOSDoubleArray *)b
                   withDoubleArray:(IOSDoubleArray *)c
                        withDouble:(jdouble)d {
  EduStanfordNlpMathArrayMath_addMultIntoWithDoubleArray_withDoubleArray_withDoubleArray_withDouble_(a, b, c, d);
}

+ (void)multiplyIntoWithDoubleArray:(IOSDoubleArray *)a
                    withDoubleArray:(IOSDoubleArray *)b
                         withDouble:(jdouble)c {
  EduStanfordNlpMathArrayMath_multiplyIntoWithDoubleArray_withDoubleArray_withDouble_(a, b, c);
}

+ (jdouble)entropyWithDoubleArray:(IOSDoubleArray *)probs {
  return EduStanfordNlpMathArrayMath_entropyWithDoubleArray_(probs);
}

+ (void)assertFiniteWithDoubleArray:(IOSDoubleArray *)vector
                       withNSString:(NSString *)vectorName {
  EduStanfordNlpMathArrayMath_assertFiniteWithDoubleArray_withNSString_(vector, vectorName);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "[I", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "[F", 0x9, 4, 1, -1, -1, -1, -1 },
    { NULL, "[D", 0x9, 5, 6, -1, -1, -1, -1 },
    { NULL, "[[D", 0x9, 5, 7, -1, -1, -1, -1 },
    { NULL, "[[F", 0x9, 4, 8, -1, -1, -1, -1 },
    { NULL, "[D", 0x9, 9, 1, -1, -1, -1, -1 },
    { NULL, "[D", 0x9, 10, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 11, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 12, 1, -1, -1, -1, -1 },
    { NULL, "[D", 0x9, 13, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 14, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 14, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 17, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 19, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 19, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 20, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 21, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 21, 22, -1, -1, -1, -1 },
    { NULL, "[D", 0x9, 23, 15, -1, -1, -1, -1 },
    { NULL, "[F", 0x9, 23, 16, -1, -1, -1, -1 },
    { NULL, "[D", 0x9, 24, 15, -1, -1, -1, -1 },
    { NULL, "[F", 0x9, 24, 22, -1, -1, -1, -1 },
    { NULL, "[D", 0x9, 25, 15, -1, -1, -1, -1 },
    { NULL, "[F", 0x9, 25, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 26, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 26, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 26, 29, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 26, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 31, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 32, 18, -1, -1, -1, -1 },
    { NULL, "[I", 0x9, 33, 34, -1, -1, -1, -1 },
    { NULL, "[D", 0x9, 33, 28, -1, -1, -1, -1 },
    { NULL, "[F", 0x9, 33, 27, -1, -1, -1, -1 },
    { NULL, "[D", 0x9, 35, 18, -1, -1, -1, -1 },
    { NULL, "[D", 0x9, 36, 28, -1, -1, -1, -1 },
    { NULL, "[F", 0x9, 36, 27, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 37, 28, -1, -1, -1, -1 },
    { NULL, "[D", 0x9, 38, 28, -1, -1, -1, -1 },
    { NULL, "[F", 0x9, 38, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 38, 39, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 38, 40, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 41, 28, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 42, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 43, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 42, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 44, 1, -1, -1, -1, -1 },
    { NULL, "[D", 0x9, 45, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 46, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 47, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 48, 15, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 49, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 50, 1, -1, -1, -1, -1 },
    { NULL, "[D", 0x9, 51, 1, -1, -1, -1, -1 },
    { NULL, "[D", 0x9, 52, 1, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 53, 1, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 53, 54, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 53, 55, -1, -1, -1, -1 },
    { NULL, "F", 0x9, 53, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 53, 56, -1, -1, -1, -1 },
    { NULL, "[I", 0x9, 57, 56, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 58, 1, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 59, 1, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 60, 1, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 60, 6, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 61, 1, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 61, 6, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 62, 1, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 62, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 63, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 64, 1, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 65, 1, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 65, 66, -1, 67, -1, -1 },
    { NULL, "I", 0x9, 63, 6, -1, -1, -1, -1 },
    { NULL, "F", 0x9, 65, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 68, 1, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 69, 1, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 70, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 68, 6, -1, -1, -1, -1 },
    { NULL, "F", 0x9, 69, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 68, 55, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 69, 55, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 63, 55, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 65, 55, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 69, 56, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 65, 56, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 71, 1, -1, -1, -1, -1 },
    { NULL, "D", 0x89, 72, 1, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 72, 54, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 72, 73, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 72, 74, -1, 75, -1, -1 },
    { NULL, "D", 0x9, 72, 76, -1, 77, -1, -1 },
    { NULL, "F", 0x9, 72, 6, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 78, 28, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 78, 27, -1, -1, -1, -1 },
    { NULL, "[[D", 0x9, 79, 80, 81, -1, -1, -1 },
    { NULL, "[LJavaLangInteger;", 0x9, 82, 55, -1, -1, -1, -1 },
    { NULL, "[I", 0x9, 83, 66, -1, 84, -1, -1 },
    { NULL, "[LJavaLangDouble;", 0x9, 82, 1, -1, -1, -1, -1 },
    { NULL, "[D", 0x9, 85, 66, -1, 86, -1, -1 },
    { NULL, "I", 0x9, 87, 88, -1, -1, -1, -1 },
    { NULL, "[[I", 0x9, 89, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 90, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 91, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 92, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 90, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 92, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 93, 1, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 94, 1, -1, -1, -1, -1 },
    { NULL, "F", 0x9, 94, 6, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 95, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 96, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 97, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 97, 98, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 97, 99, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 100, 28, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 101, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 102, 103, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 102, 104, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 105, 1, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 105, 55, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 106, 1, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 107, 1, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 108, 1, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 109, 1, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 110, 1, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 111, 1, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 112, 1, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 113, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 114, 115, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 114, 116, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 117, 55, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 117, 118, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 119, 55, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 120, 115, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 121, 122, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 123, 28, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 124, 28, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 124, 125, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 124, 34, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 124, 126, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 124, 127, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 124, 128, -1, -1, -1, -1 },
    { NULL, "D", 0xa, 129, 130, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 131, 132, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 133, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 133, 134, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 133, 6, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 133, 135, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 133, 55, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 133, 136, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 133, 132, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 133, 137, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 133, 56, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 133, 138, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 133, 8, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 133, 139, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 133, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 133, 140, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 141, 142, -1, -1, -1, -1 },
    { NULL, "[[I", 0x9, 143, 56, -1, -1, -1, -1 },
    { NULL, "[[D", 0x9, 144, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 145, 146, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 147, 18, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 148, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 149, 150, 151, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(numRowsWithDoubleArray:);
  methods[2].selector = @selector(rangeWithInt:withInt:);
  methods[3].selector = @selector(doubleArrayToFloatArrayWithDoubleArray:);
  methods[4].selector = @selector(floatArrayToDoubleArrayWithFloatArray:);
  methods[5].selector = @selector(floatArrayToDoubleArrayWithFloatArray2:);
  methods[6].selector = @selector(doubleArrayToFloatArrayWithDoubleArray2:);
  methods[7].selector = @selector(expWithDoubleArray:);
  methods[8].selector = @selector(logWithDoubleArray:);
  methods[9].selector = @selector(expInPlaceWithDoubleArray:);
  methods[10].selector = @selector(logInPlaceWithDoubleArray:);
  methods[11].selector = @selector(softmaxWithDoubleArray:);
  methods[12].selector = @selector(addInPlaceWithDoubleArray:withDouble:);
  methods[13].selector = @selector(addInPlaceWithFloatArray:withDouble:);
  methods[14].selector = @selector(addMultInPlaceWithDoubleArray:withDoubleArray:withDouble:);
  methods[15].selector = @selector(multiplyInPlaceWithDoubleArray:withDouble:);
  methods[16].selector = @selector(multiplyInPlaceWithFloatArray:withDouble:);
  methods[17].selector = @selector(divideInPlaceWithDoubleArray:withDouble:);
  methods[18].selector = @selector(powInPlaceWithDoubleArray:withDouble:);
  methods[19].selector = @selector(powInPlaceWithFloatArray:withFloat:);
  methods[20].selector = @selector(addWithDoubleArray:withDouble:);
  methods[21].selector = @selector(addWithFloatArray:withDouble:);
  methods[22].selector = @selector(multiplyWithDoubleArray:withDouble:);
  methods[23].selector = @selector(multiplyWithFloatArray:withFloat:);
  methods[24].selector = @selector(powWithDoubleArray:withDouble:);
  methods[25].selector = @selector(powWithFloatArray:withFloat:);
  methods[26].selector = @selector(pairwiseAddInPlaceWithFloatArray:withFloatArray:);
  methods[27].selector = @selector(pairwiseAddInPlaceWithDoubleArray:withDoubleArray:);
  methods[28].selector = @selector(pairwiseAddInPlaceWithDoubleArray:withIntArray:);
  methods[29].selector = @selector(pairwiseAddInPlaceWithDoubleArray:withShortArray:);
  methods[30].selector = @selector(pairwiseSubtractInPlaceWithDoubleArray:withDoubleArray:);
  methods[31].selector = @selector(pairwiseScaleAddInPlaceWithDoubleArray:withDoubleArray:withDouble:);
  methods[32].selector = @selector(pairwiseAddWithIntArray:withIntArray:);
  methods[33].selector = @selector(pairwiseAddWithDoubleArray:withDoubleArray:);
  methods[34].selector = @selector(pairwiseAddWithFloatArray:withFloatArray:);
  methods[35].selector = @selector(pairwiseScaleAddWithDoubleArray:withDoubleArray:withDouble:);
  methods[36].selector = @selector(pairwiseSubtractWithDoubleArray:withDoubleArray:);
  methods[37].selector = @selector(pairwiseSubtractWithFloatArray:withFloatArray:);
  methods[38].selector = @selector(dotProductWithDoubleArray:withDoubleArray:);
  methods[39].selector = @selector(pairwiseMultiplyWithDoubleArray:withDoubleArray:);
  methods[40].selector = @selector(pairwiseMultiplyWithFloatArray:withFloatArray:);
  methods[41].selector = @selector(pairwiseMultiplyWithDoubleArray:withDoubleArray:withDoubleArray:);
  methods[42].selector = @selector(pairwiseMultiplyWithFloatArray:withFloatArray:withFloatArray:);
  methods[43].selector = @selector(pairwiseDivideInPlaceWithDoubleArray:withDoubleArray:);
  methods[44].selector = @selector(hasNaNWithDoubleArray:);
  methods[45].selector = @selector(hasInfiniteWithDoubleArray:);
  methods[46].selector = @selector(hasNaNWithFloatArray:);
  methods[47].selector = @selector(countNaNWithDoubleArray:);
  methods[48].selector = @selector(filterNaNWithDoubleArray:);
  methods[49].selector = @selector(countInfiniteWithDoubleArray:);
  methods[50].selector = @selector(countNonZeroWithDoubleArray:);
  methods[51].selector = @selector(countCloseToZeroWithDoubleArray:withDouble:);
  methods[52].selector = @selector(countPositiveWithDoubleArray:);
  methods[53].selector = @selector(countNegativeWithDoubleArray:);
  methods[54].selector = @selector(filterInfiniteWithDoubleArray:);
  methods[55].selector = @selector(filterNaNAndInfiniteWithDoubleArray:);
  methods[56].selector = @selector(sumWithDoubleArray:);
  methods[57].selector = @selector(sumWithDoubleArray:withInt:withInt:);
  methods[58].selector = @selector(sumWithIntArray:);
  methods[59].selector = @selector(sumWithFloatArray:);
  methods[60].selector = @selector(sumWithIntArray2:);
  methods[61].selector = @selector(diagWithIntArray2:);
  methods[62].selector = @selector(averageWithDoubleArray:);
  methods[63].selector = @selector(iterativeAverageWithDoubleArray:);
  methods[64].selector = @selector(norm_infWithDoubleArray:);
  methods[65].selector = @selector(norm_infWithFloatArray:);
  methods[66].selector = @selector(norm_1WithDoubleArray:);
  methods[67].selector = @selector(norm_1WithFloatArray:);
  methods[68].selector = @selector(normWithDoubleArray:);
  methods[69].selector = @selector(normWithFloatArray:);
  methods[70].selector = @selector(argmaxWithDoubleArray:);
  methods[71].selector = @selector(argmax_tieLastWithDoubleArray:);
  methods[72].selector = @selector(maxWithDoubleArray:);
  methods[73].selector = @selector(maxWithJavaUtilCollection:);
  methods[74].selector = @selector(argmaxWithFloatArray:);
  methods[75].selector = @selector(maxWithFloatArray:);
  methods[76].selector = @selector(argminWithDoubleArray:);
  methods[77].selector = @selector(minWithDoubleArray:);
  methods[78].selector = @selector(safeMinWithDoubleArray:);
  methods[79].selector = @selector(argminWithFloatArray:);
  methods[80].selector = @selector(minWithFloatArray:);
  methods[81].selector = @selector(argminWithIntArray:);
  methods[82].selector = @selector(minWithIntArray:);
  methods[83].selector = @selector(argmaxWithIntArray:);
  methods[84].selector = @selector(maxWithIntArray:);
  methods[85].selector = @selector(minWithIntArray2:);
  methods[86].selector = @selector(maxWithIntArray2:);
  methods[87].selector = @selector(safeMaxWithDoubleArray:);
  methods[88].selector = @selector(logSumWithDoubleArray:);
  methods[89].selector = @selector(logSumWithDoubleArray:withInt:withInt:);
  methods[90].selector = @selector(logSumWithDoubleArray:withInt:withInt:withInt:);
  methods[91].selector = @selector(logSumWithJavaUtilList:);
  methods[92].selector = @selector(logSumWithJavaUtilList:withInt:withInt:);
  methods[93].selector = @selector(logSumWithFloatArray:);
  methods[94].selector = @selector(innerProductWithDoubleArray:withDoubleArray:);
  methods[95].selector = @selector(innerProductWithFloatArray:withFloatArray:);
  methods[96].selector = @selector(load2DMatrixFromFileWithNSString:);
  methods[97].selector = @selector(boxWithIntArray:);
  methods[98].selector = @selector(unboxToIntWithJavaUtilCollection:);
  methods[99].selector = @selector(boxWithDoubleArray:);
  methods[100].selector = @selector(unboxWithJavaUtilCollection:);
  methods[101].selector = @selector(indexOfWithInt:withIntArray:);
  methods[102].selector = @selector(castToIntWithDoubleArray2:);
  methods[103].selector = @selector(normalizeWithDoubleArray:);
  methods[104].selector = @selector(L1normalizeWithDoubleArray:);
  methods[105].selector = @selector(L2normalizeWithDoubleArray:);
  methods[106].selector = @selector(normalizeWithFloatArray:);
  methods[107].selector = @selector(L2normalizeWithFloatArray:);
  methods[108].selector = @selector(standardizeWithDoubleArray:);
  methods[109].selector = @selector(L2NormWithDoubleArray:);
  methods[110].selector = @selector(L2NormWithFloatArray:);
  methods[111].selector = @selector(L1NormWithDoubleArray:);
  methods[112].selector = @selector(logNormalizeWithDoubleArray:);
  methods[113].selector = @selector(sampleFromDistributionWithDoubleArray:);
  methods[114].selector = @selector(sampleFromDistributionWithDoubleArray:withJavaUtilRandom:);
  methods[115].selector = @selector(sampleFromDistributionWithFloatArray:withJavaUtilRandom:);
  methods[116].selector = @selector(klDivergenceWithDoubleArray:withDoubleArray:);
  methods[117].selector = @selector(jensenShannonDivergenceWithDoubleArray:withDoubleArray:);
  methods[118].selector = @selector(setToLogDeterministicWithFloatArray:withInt:);
  methods[119].selector = @selector(setToLogDeterministicWithDoubleArray:withInt:);
  methods[120].selector = @selector(meanWithDoubleArray:);
  methods[121].selector = @selector(meanWithIntArray:);
  methods[122].selector = @selector(medianWithDoubleArray:);
  methods[123].selector = @selector(safeMeanWithDoubleArray:);
  methods[124].selector = @selector(sumSquaredErrorWithDoubleArray:);
  methods[125].selector = @selector(sumSquaredWithDoubleArray:);
  methods[126].selector = @selector(varianceWithDoubleArray:);
  methods[127].selector = @selector(stdevWithDoubleArray:);
  methods[128].selector = @selector(safeStdevWithDoubleArray:);
  methods[129].selector = @selector(standardErrorOfMeanWithDoubleArray:);
  methods[130].selector = @selector(sampleWithoutReplacementWithIntArray:withInt:);
  methods[131].selector = @selector(sampleWithoutReplacementWithIntArray:withInt:withJavaUtilRandom:);
  methods[132].selector = @selector(shuffleWithIntArray:);
  methods[133].selector = @selector(shuffleWithIntArray:withJavaUtilRandom:);
  methods[134].selector = @selector(reverseWithIntArray:);
  methods[135].selector = @selector(containsWithIntArray:withInt:);
  methods[136].selector = @selector(containsInSubarrayWithIntArray:withInt:withInt:withInt:);
  methods[137].selector = @selector(pearsonCorrelationWithDoubleArray:withDoubleArray:);
  methods[138].selector = @selector(sigLevelByApproxRandWithDoubleArray:withDoubleArray:);
  methods[139].selector = @selector(sigLevelByApproxRandWithDoubleArray:withDoubleArray:withInt:);
  methods[140].selector = @selector(sigLevelByApproxRandWithIntArray:withIntArray:);
  methods[141].selector = @selector(sigLevelByApproxRandWithIntArray:withIntArray:withInt:);
  methods[142].selector = @selector(sigLevelByApproxRandWithBooleanArray:withBooleanArray:);
  methods[143].selector = @selector(sigLevelByApproxRandWithBooleanArray:withBooleanArray:withInt:);
  methods[144].selector = @selector(absDiffOfMeansWithDoubleArray:withDoubleArray:withBoolean:);
  methods[145].selector = @selector(toBinaryStringWithByteArray:);
  methods[146].selector = @selector(toStringWithDoubleArray:);
  methods[147].selector = @selector(toStringWithDoubleArray:withJavaTextNumberFormat:);
  methods[148].selector = @selector(toStringWithFloatArray:);
  methods[149].selector = @selector(toStringWithFloatArray:withJavaTextNumberFormat:);
  methods[150].selector = @selector(toStringWithIntArray:);
  methods[151].selector = @selector(toStringWithIntArray:withJavaTextNumberFormat:);
  methods[152].selector = @selector(toStringWithByteArray:);
  methods[153].selector = @selector(toStringWithByteArray:withJavaTextNumberFormat:);
  methods[154].selector = @selector(toStringWithIntArray2:);
  methods[155].selector = @selector(toStringWithIntArray2:withNSObjectArray:withNSObjectArray:withInt:withInt:withJavaTextNumberFormat:withBoolean:);
  methods[156].selector = @selector(toStringWithDoubleArray2:);
  methods[157].selector = @selector(toStringWithDoubleArray2:withInt:withNSObjectArray:withNSObjectArray:withJavaTextNumberFormat:withBoolean:);
  methods[158].selector = @selector(toStringWithFloatArray2:);
  methods[159].selector = @selector(toStringWithFloatArray2:withInt:withNSObjectArray:withNSObjectArray:withJavaTextNumberFormat:withBoolean:);
  methods[160].selector = @selector(mainWithNSStringArray:);
  methods[161].selector = @selector(deepCopyWithIntArray2:);
  methods[162].selector = @selector(covarianceWithDoubleArray2:);
  methods[163].selector = @selector(addMultIntoWithDoubleArray:withDoubleArray:withDoubleArray:withDouble:);
  methods[164].selector = @selector(multiplyIntoWithDoubleArray:withDoubleArray:withDouble:);
  methods[165].selector = @selector(entropyWithDoubleArray:);
  methods[166].selector = @selector(assertFiniteWithDoubleArray:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "rand", "LJavaUtilRandom;", .constantValue.asLong = 0, 0x1a, -1, 152, -1, -1 },
  };
  static const void *ptrTable[] = { "numRows", "[D", "range", "II", "doubleArrayToFloatArray", "floatArrayToDoubleArray", "[F", "[[F", "[[D", "exp", "log", "expInPlace", "logInPlace", "softmax", "addInPlace", "[DD", "[FD", "addMultInPlace", "[D[DD", "multiplyInPlace", "divideInPlace", "powInPlace", "[FF", "add", "multiply", "pow", "pairwiseAddInPlace", "[F[F", "[D[D", "[D[I", "[D[S", "pairwiseSubtractInPlace", "pairwiseScaleAddInPlace", "pairwiseAdd", "[I[I", "pairwiseScaleAdd", "pairwiseSubtract", "dotProduct", "pairwiseMultiply", "[D[D[D", "[F[F[F", "pairwiseDivideInPlace", "hasNaN", "hasInfinite", "countNaN", "filterNaN", "countInfinite", "countNonZero", "countCloseToZero", "countPositive", "countNegative", "filterInfinite", "filterNaNAndInfinite", "sum", "[DII", "[I", "[[I", "diag", "average", "iterativeAverage", "norm_inf", "norm_1", "norm", "argmax", "argmax_tieLast", "max", "LJavaUtilCollection;", "(Ljava/util/Collection<Ljava/lang/Double;>;)D", "argmin", "min", "safeMin", "safeMax", "logSum", "[DIII", "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/Double;>;)D", "LJavaUtilList;II", "(Ljava/util/List<Ljava/lang/Double;>;II)D", "innerProduct", "load2DMatrixFromFile", "LNSString;", "LJavaIoIOException;", "box", "unboxToInt", "(Ljava/util/Collection<Ljava/lang/Integer;>;)[I", "unbox", "(Ljava/util/Collection<Ljava/lang/Double;>;)[D", "indexOf", "I[I", "castToInt", "normalize", "L1normalize", "L2normalize", "standardize", "L2Norm", "L1Norm", "logNormalize", "sampleFromDistribution", "[DLJavaUtilRandom;", "[FLJavaUtilRandom;", "klDivergence", "jensenShannonDivergence", "setToLogDeterministic", "[FI", "[DI", "mean", "median", "safeMean", "sumSquaredError", "sumSquared", "variance", "stdev", "safeStdev", "standardErrorOfMean", "sampleWithoutReplacement", "[II", "[IILJavaUtilRandom;", "shuffle", "[ILJavaUtilRandom;", "reverse", "contains", "containsInSubarray", "[IIII", "pearsonCorrelation", "sigLevelByApproxRand", "[D[DI", "[I[II", "[Z[Z", "[Z[ZI", "absDiffOfMeans", "[D[DZ", "toBinaryString", "[B", "toString", "[DLJavaTextNumberFormat;", "[FLJavaTextNumberFormat;", "[ILJavaTextNumberFormat;", "[BLJavaTextNumberFormat;", "[[I[LNSObject;[LNSObject;IILJavaTextNumberFormat;Z", "[[DI[LNSObject;[LNSObject;LJavaTextNumberFormat;Z", "[[FI[LNSObject;[LNSObject;LJavaTextNumberFormat;Z", "main", "[LNSString;", "deepCopy", "covariance", "addMultInto", "[D[D[DD", "multiplyInto", "entropy", "assertFinite", "[DLNSString;", "LEduStanfordNlpMathArrayMath_InvalidElementException;", &EduStanfordNlpMathArrayMath_rand };
  static const J2ObjcClassInfo _EduStanfordNlpMathArrayMath = { "ArrayMath", "edu.stanford.nlp.math", ptrTable, methods, fields, 7, 0x1, 167, 1, -1, 151, -1, -1, -1 };
  return &_EduStanfordNlpMathArrayMath;
}

+ (void)initialize {
  if (self == [EduStanfordNlpMathArrayMath class]) {
    EduStanfordNlpMathArrayMath_rand = new_JavaUtilRandom_init();
    J2OBJC_SET_INITIALIZED(EduStanfordNlpMathArrayMath)
  }
}

@end

void EduStanfordNlpMathArrayMath_init(EduStanfordNlpMathArrayMath *self) {
  NSObject_init(self);
}

EduStanfordNlpMathArrayMath *new_EduStanfordNlpMathArrayMath_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpMathArrayMath, init)
}

EduStanfordNlpMathArrayMath *create_EduStanfordNlpMathArrayMath_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpMathArrayMath, init)
}

jint EduStanfordNlpMathArrayMath_numRowsWithDoubleArray_(IOSDoubleArray *v) {
  EduStanfordNlpMathArrayMath_initialize();
  return ((IOSDoubleArray *) nil_chk(v))->size_;
}

IOSIntArray *EduStanfordNlpMathArrayMath_rangeWithInt_withInt_(jint start, jint end) {
  EduStanfordNlpMathArrayMath_initialize();
  JreAssert((end > start), (@"edu/stanford/nlp/math/ArrayMath.java:44 condition failed: assert end > start;"));
  jint len = end - start;
  IOSIntArray *range = [IOSIntArray newArrayWithLength:len];
  for (jint i = 0; i < range->size_; ++i) *IOSIntArray_GetRef(range, i) = i + start;
  return range;
}

IOSFloatArray *EduStanfordNlpMathArrayMath_doubleArrayToFloatArrayWithDoubleArray_(IOSDoubleArray *a) {
  EduStanfordNlpMathArrayMath_initialize();
  IOSFloatArray *result = [IOSFloatArray newArrayWithLength:((IOSDoubleArray *) nil_chk(a))->size_];
  for (jint i = 0; i < a->size_; i++) {
    *IOSFloatArray_GetRef(result, i) = (jfloat) IOSDoubleArray_Get(a, i);
  }
  return result;
}

IOSDoubleArray *EduStanfordNlpMathArrayMath_floatArrayToDoubleArrayWithFloatArray_(IOSFloatArray *a) {
  EduStanfordNlpMathArrayMath_initialize();
  IOSDoubleArray *result = [IOSDoubleArray newArrayWithLength:((IOSFloatArray *) nil_chk(a))->size_];
  for (jint i = 0; i < a->size_; i++) {
    *IOSDoubleArray_GetRef(result, i) = IOSFloatArray_Get(a, i);
  }
  return result;
}

IOSObjectArray *EduStanfordNlpMathArrayMath_floatArrayToDoubleArrayWithFloatArray2_(IOSObjectArray *a) {
  EduStanfordNlpMathArrayMath_initialize();
  IOSObjectArray *result = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(a))->size_ type:IOSClass_doubleArray(1)];
  for (jint i = 0; i < a->size_; i++) {
    (void) IOSObjectArray_SetAndConsume(result, i, [IOSDoubleArray newArrayWithLength:((IOSFloatArray *) nil_chk(IOSObjectArray_Get(a, i)))->size_]);
    for (jint j = 0; j < ((IOSFloatArray *) nil_chk(IOSObjectArray_Get(a, i)))->size_; j++) {
      *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(result, i)), j) = IOSFloatArray_Get(nil_chk(IOSObjectArray_Get(a, i)), j);
    }
  }
  return result;
}

IOSObjectArray *EduStanfordNlpMathArrayMath_doubleArrayToFloatArrayWithDoubleArray2_(IOSObjectArray *a) {
  EduStanfordNlpMathArrayMath_initialize();
  IOSObjectArray *result = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(a))->size_ type:IOSClass_floatArray(1)];
  for (jint i = 0; i < a->size_; i++) {
    (void) IOSObjectArray_SetAndConsume(result, i, [IOSFloatArray newArrayWithLength:((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(a, i)))->size_]);
    for (jint j = 0; j < ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(a, i)))->size_; j++) {
      *IOSFloatArray_GetRef(nil_chk(IOSObjectArray_Get(result, i)), j) = (jfloat) IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(a, i)), j);
    }
  }
  return result;
}

IOSDoubleArray *EduStanfordNlpMathArrayMath_expWithDoubleArray_(IOSDoubleArray *a) {
  EduStanfordNlpMathArrayMath_initialize();
  IOSDoubleArray *result = [IOSDoubleArray newArrayWithLength:((IOSDoubleArray *) nil_chk(a))->size_];
  for (jint i = 0; i < a->size_; i++) {
    *IOSDoubleArray_GetRef(result, i) = JavaLangMath_expWithDouble_(IOSDoubleArray_Get(a, i));
  }
  return result;
}

IOSDoubleArray *EduStanfordNlpMathArrayMath_logWithDoubleArray_(IOSDoubleArray *a) {
  EduStanfordNlpMathArrayMath_initialize();
  IOSDoubleArray *result = [IOSDoubleArray newArrayWithLength:((IOSDoubleArray *) nil_chk(a))->size_];
  for (jint i = 0; i < a->size_; i++) {
    *IOSDoubleArray_GetRef(result, i) = JavaLangMath_logWithDouble_(IOSDoubleArray_Get(a, i));
  }
  return result;
}

void EduStanfordNlpMathArrayMath_expInPlaceWithDoubleArray_(IOSDoubleArray *a) {
  EduStanfordNlpMathArrayMath_initialize();
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(a))->size_; i++) {
    *IOSDoubleArray_GetRef(a, i) = JavaLangMath_expWithDouble_(IOSDoubleArray_Get(a, i));
  }
}

void EduStanfordNlpMathArrayMath_logInPlaceWithDoubleArray_(IOSDoubleArray *a) {
  EduStanfordNlpMathArrayMath_initialize();
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(a))->size_; i++) {
    *IOSDoubleArray_GetRef(a, i) = JavaLangMath_logWithDouble_(IOSDoubleArray_Get(a, i));
  }
}

IOSDoubleArray *EduStanfordNlpMathArrayMath_softmaxWithDoubleArray_(IOSDoubleArray *scales) {
  EduStanfordNlpMathArrayMath_initialize();
  IOSDoubleArray *newScales = [IOSDoubleArray newArrayWithLength:((IOSDoubleArray *) nil_chk(scales))->size_];
  jdouble sum = 0;
  for (jint i = 0; i < scales->size_; i++) {
    *IOSDoubleArray_GetRef(newScales, i) = JavaLangMath_expWithDouble_(IOSDoubleArray_Get(scales, i));
    JrePlusAssignDoubleD(&sum, IOSDoubleArray_Get(newScales, i));
  }
  for (jint i = 0; i < scales->size_; i++) {
    JreDivideAssignDoubleD(IOSDoubleArray_GetRef(newScales, i), sum);
  }
  return newScales;
}

void EduStanfordNlpMathArrayMath_addInPlaceWithDoubleArray_withDouble_(IOSDoubleArray *a, jdouble b) {
  EduStanfordNlpMathArrayMath_initialize();
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(a))->size_; i++) {
    *IOSDoubleArray_GetRef(a, i) = IOSDoubleArray_Get(a, i) + b;
  }
}

void EduStanfordNlpMathArrayMath_addInPlaceWithFloatArray_withDouble_(IOSFloatArray *a, jdouble b) {
  EduStanfordNlpMathArrayMath_initialize();
  for (jint i = 0; i < ((IOSFloatArray *) nil_chk(a))->size_; i++) {
    *IOSFloatArray_GetRef(a, i) = (jfloat) (IOSFloatArray_Get(a, i) + b);
  }
}

void EduStanfordNlpMathArrayMath_addMultInPlaceWithDoubleArray_withDoubleArray_withDouble_(IOSDoubleArray *a, IOSDoubleArray *b, jdouble c) {
  EduStanfordNlpMathArrayMath_initialize();
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(a))->size_; i++) {
    JrePlusAssignDoubleD(IOSDoubleArray_GetRef(a, i), IOSDoubleArray_Get(nil_chk(b), i) * c);
  }
}

void EduStanfordNlpMathArrayMath_multiplyInPlaceWithDoubleArray_withDouble_(IOSDoubleArray *a, jdouble b) {
  EduStanfordNlpMathArrayMath_initialize();
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(a))->size_; i++) {
    *IOSDoubleArray_GetRef(a, i) = IOSDoubleArray_Get(a, i) * b;
  }
}

void EduStanfordNlpMathArrayMath_multiplyInPlaceWithFloatArray_withDouble_(IOSFloatArray *a, jdouble b) {
  EduStanfordNlpMathArrayMath_initialize();
  for (jint i = 0; i < ((IOSFloatArray *) nil_chk(a))->size_; i++) {
    *IOSFloatArray_GetRef(a, i) = (jfloat) (IOSFloatArray_Get(a, i) * b);
  }
}

void EduStanfordNlpMathArrayMath_divideInPlaceWithDoubleArray_withDouble_(IOSDoubleArray *a, jdouble b) {
  EduStanfordNlpMathArrayMath_initialize();
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(a))->size_; i++) {
    *IOSDoubleArray_GetRef(a, i) = IOSDoubleArray_Get(a, i) / b;
  }
}

void EduStanfordNlpMathArrayMath_powInPlaceWithDoubleArray_withDouble_(IOSDoubleArray *a, jdouble c) {
  EduStanfordNlpMathArrayMath_initialize();
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(a))->size_; i++) {
    *IOSDoubleArray_GetRef(a, i) = JavaLangMath_powWithDouble_withDouble_(IOSDoubleArray_Get(a, i), c);
  }
}

void EduStanfordNlpMathArrayMath_powInPlaceWithFloatArray_withFloat_(IOSFloatArray *a, jfloat c) {
  EduStanfordNlpMathArrayMath_initialize();
  for (jint i = 0; i < ((IOSFloatArray *) nil_chk(a))->size_; i++) {
    *IOSFloatArray_GetRef(a, i) = (jfloat) JavaLangMath_powWithDouble_withDouble_(IOSFloatArray_Get(a, i), c);
  }
}

IOSDoubleArray *EduStanfordNlpMathArrayMath_addWithDoubleArray_withDouble_(IOSDoubleArray *a, jdouble c) {
  EduStanfordNlpMathArrayMath_initialize();
  IOSDoubleArray *result = [IOSDoubleArray newArrayWithLength:((IOSDoubleArray *) nil_chk(a))->size_];
  for (jint i = 0; i < a->size_; i++) {
    *IOSDoubleArray_GetRef(result, i) = IOSDoubleArray_Get(a, i) + c;
  }
  return result;
}

IOSFloatArray *EduStanfordNlpMathArrayMath_addWithFloatArray_withDouble_(IOSFloatArray *a, jdouble c) {
  EduStanfordNlpMathArrayMath_initialize();
  IOSFloatArray *result = [IOSFloatArray newArrayWithLength:((IOSFloatArray *) nil_chk(a))->size_];
  for (jint i = 0; i < a->size_; i++) {
    *IOSFloatArray_GetRef(result, i) = (jfloat) (IOSFloatArray_Get(a, i) + c);
  }
  return result;
}

IOSDoubleArray *EduStanfordNlpMathArrayMath_multiplyWithDoubleArray_withDouble_(IOSDoubleArray *a, jdouble c) {
  EduStanfordNlpMathArrayMath_initialize();
  IOSDoubleArray *result = [IOSDoubleArray newArrayWithLength:((IOSDoubleArray *) nil_chk(a))->size_];
  for (jint i = 0; i < a->size_; i++) {
    *IOSDoubleArray_GetRef(result, i) = IOSDoubleArray_Get(a, i) * c;
  }
  return result;
}

IOSFloatArray *EduStanfordNlpMathArrayMath_multiplyWithFloatArray_withFloat_(IOSFloatArray *a, jfloat c) {
  EduStanfordNlpMathArrayMath_initialize();
  IOSFloatArray *result = [IOSFloatArray newArrayWithLength:((IOSFloatArray *) nil_chk(a))->size_];
  for (jint i = 0; i < a->size_; i++) {
    *IOSFloatArray_GetRef(result, i) = IOSFloatArray_Get(a, i) * c;
  }
  return result;
}

IOSDoubleArray *EduStanfordNlpMathArrayMath_powWithDoubleArray_withDouble_(IOSDoubleArray *a, jdouble c) {
  EduStanfordNlpMathArrayMath_initialize();
  IOSDoubleArray *result = [IOSDoubleArray newArrayWithLength:((IOSDoubleArray *) nil_chk(a))->size_];
  for (jint i = 0; i < a->size_; i++) {
    *IOSDoubleArray_GetRef(result, i) = JavaLangMath_powWithDouble_withDouble_(IOSDoubleArray_Get(a, i), c);
  }
  return result;
}

IOSFloatArray *EduStanfordNlpMathArrayMath_powWithFloatArray_withFloat_(IOSFloatArray *a, jfloat c) {
  EduStanfordNlpMathArrayMath_initialize();
  IOSFloatArray *result = [IOSFloatArray newArrayWithLength:((IOSFloatArray *) nil_chk(a))->size_];
  for (jint i = 0; i < a->size_; i++) {
    *IOSFloatArray_GetRef(result, i) = (jfloat) JavaLangMath_powWithDouble_withDouble_(IOSFloatArray_Get(a, i), c);
  }
  return result;
}

void EduStanfordNlpMathArrayMath_pairwiseAddInPlaceWithFloatArray_withFloatArray_(IOSFloatArray *to, IOSFloatArray *from) {
  EduStanfordNlpMathArrayMath_initialize();
  if (((IOSFloatArray *) nil_chk(to))->size_ != ((IOSFloatArray *) nil_chk(from))->size_) {
    @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$I$I", @"to length:", to->size_, @" from length:", from->size_));
  }
  for (jint i = 0; i < to->size_; i++) {
    *IOSFloatArray_GetRef(to, i) = IOSFloatArray_Get(to, i) + IOSFloatArray_Get(from, i);
  }
}

void EduStanfordNlpMathArrayMath_pairwiseAddInPlaceWithDoubleArray_withDoubleArray_(IOSDoubleArray *to, IOSDoubleArray *from) {
  EduStanfordNlpMathArrayMath_initialize();
  if (((IOSDoubleArray *) nil_chk(to))->size_ != ((IOSDoubleArray *) nil_chk(from))->size_) {
    @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$I$I", @"to length:", to->size_, @" from length:", from->size_));
  }
  for (jint i = 0; i < to->size_; i++) {
    *IOSDoubleArray_GetRef(to, i) = IOSDoubleArray_Get(to, i) + IOSDoubleArray_Get(from, i);
  }
}

void EduStanfordNlpMathArrayMath_pairwiseAddInPlaceWithDoubleArray_withIntArray_(IOSDoubleArray *to, IOSIntArray *from) {
  EduStanfordNlpMathArrayMath_initialize();
  if (((IOSDoubleArray *) nil_chk(to))->size_ != ((IOSIntArray *) nil_chk(from))->size_) {
    @throw new_JavaLangRuntimeException_init();
  }
  for (jint i = 0; i < to->size_; i++) {
    *IOSDoubleArray_GetRef(to, i) = IOSDoubleArray_Get(to, i) + IOSIntArray_Get(from, i);
  }
}

void EduStanfordNlpMathArrayMath_pairwiseAddInPlaceWithDoubleArray_withShortArray_(IOSDoubleArray *to, IOSShortArray *from) {
  EduStanfordNlpMathArrayMath_initialize();
  if (((IOSDoubleArray *) nil_chk(to))->size_ != ((IOSShortArray *) nil_chk(from))->size_) {
    @throw new_JavaLangRuntimeException_init();
  }
  for (jint i = 0; i < to->size_; i++) {
    *IOSDoubleArray_GetRef(to, i) = IOSDoubleArray_Get(to, i) + IOSShortArray_Get(from, i);
  }
}

void EduStanfordNlpMathArrayMath_pairwiseSubtractInPlaceWithDoubleArray_withDoubleArray_(IOSDoubleArray *to, IOSDoubleArray *from) {
  EduStanfordNlpMathArrayMath_initialize();
  if (((IOSDoubleArray *) nil_chk(to))->size_ != ((IOSDoubleArray *) nil_chk(from))->size_) {
    @throw new_JavaLangRuntimeException_init();
  }
  for (jint i = 0; i < to->size_; i++) {
    *IOSDoubleArray_GetRef(to, i) = IOSDoubleArray_Get(to, i) - IOSDoubleArray_Get(from, i);
  }
}

void EduStanfordNlpMathArrayMath_pairwiseScaleAddInPlaceWithDoubleArray_withDoubleArray_withDouble_(IOSDoubleArray *to, IOSDoubleArray *from, jdouble fromScale) {
  EduStanfordNlpMathArrayMath_initialize();
  if (((IOSDoubleArray *) nil_chk(to))->size_ != ((IOSDoubleArray *) nil_chk(from))->size_) {
    @throw new_JavaLangRuntimeException_init();
  }
  for (jint i = 0; i < to->size_; i++) {
    *IOSDoubleArray_GetRef(to, i) = IOSDoubleArray_Get(to, i) + fromScale * IOSDoubleArray_Get(from, i);
  }
}

IOSIntArray *EduStanfordNlpMathArrayMath_pairwiseAddWithIntArray_withIntArray_(IOSIntArray *a, IOSIntArray *b) {
  EduStanfordNlpMathArrayMath_initialize();
  IOSIntArray *result = [IOSIntArray newArrayWithLength:((IOSIntArray *) nil_chk(a))->size_];
  for (jint i = 0; i < a->size_; i++) {
    *IOSIntArray_GetRef(result, i) = IOSIntArray_Get(a, i) + IOSIntArray_Get(nil_chk(b), i);
  }
  return result;
}

IOSDoubleArray *EduStanfordNlpMathArrayMath_pairwiseAddWithDoubleArray_withDoubleArray_(IOSDoubleArray *a, IOSDoubleArray *b) {
  EduStanfordNlpMathArrayMath_initialize();
  IOSDoubleArray *result = [IOSDoubleArray newArrayWithLength:((IOSDoubleArray *) nil_chk(a))->size_];
  for (jint i = 0; i < a->size_; i++) {
    if (i < ((IOSDoubleArray *) nil_chk(b))->size_) {
      *IOSDoubleArray_GetRef(result, i) = IOSDoubleArray_Get(a, i) + IOSDoubleArray_Get(b, i);
    }
    else {
      *IOSDoubleArray_GetRef(result, i) = IOSDoubleArray_Get(a, i);
    }
  }
  return result;
}

IOSFloatArray *EduStanfordNlpMathArrayMath_pairwiseAddWithFloatArray_withFloatArray_(IOSFloatArray *a, IOSFloatArray *b) {
  EduStanfordNlpMathArrayMath_initialize();
  IOSFloatArray *result = [IOSFloatArray newArrayWithLength:((IOSFloatArray *) nil_chk(a))->size_];
  for (jint i = 0; i < a->size_; i++) {
    *IOSFloatArray_GetRef(result, i) = IOSFloatArray_Get(a, i) + IOSFloatArray_Get(nil_chk(b), i);
  }
  return result;
}

IOSDoubleArray *EduStanfordNlpMathArrayMath_pairwiseScaleAddWithDoubleArray_withDoubleArray_withDouble_(IOSDoubleArray *a, IOSDoubleArray *b, jdouble bScale) {
  EduStanfordNlpMathArrayMath_initialize();
  IOSDoubleArray *result = [IOSDoubleArray newArrayWithLength:((IOSDoubleArray *) nil_chk(a))->size_];
  for (jint i = 0; i < a->size_; i++) {
    *IOSDoubleArray_GetRef(result, i) = IOSDoubleArray_Get(a, i) + bScale * IOSDoubleArray_Get(nil_chk(b), i);
  }
  return result;
}

IOSDoubleArray *EduStanfordNlpMathArrayMath_pairwiseSubtractWithDoubleArray_withDoubleArray_(IOSDoubleArray *a, IOSDoubleArray *b) {
  EduStanfordNlpMathArrayMath_initialize();
  IOSDoubleArray *c = [IOSDoubleArray newArrayWithLength:((IOSDoubleArray *) nil_chk(a))->size_];
  for (jint i = 0; i < a->size_; i++) {
    *IOSDoubleArray_GetRef(c, i) = IOSDoubleArray_Get(a, i) - IOSDoubleArray_Get(nil_chk(b), i);
  }
  return c;
}

IOSFloatArray *EduStanfordNlpMathArrayMath_pairwiseSubtractWithFloatArray_withFloatArray_(IOSFloatArray *a, IOSFloatArray *b) {
  EduStanfordNlpMathArrayMath_initialize();
  IOSFloatArray *c = [IOSFloatArray newArrayWithLength:((IOSFloatArray *) nil_chk(a))->size_];
  for (jint i = 0; i < a->size_; i++) {
    *IOSFloatArray_GetRef(c, i) = IOSFloatArray_Get(a, i) - IOSFloatArray_Get(nil_chk(b), i);
  }
  return c;
}

jdouble EduStanfordNlpMathArrayMath_dotProductWithDoubleArray_withDoubleArray_(IOSDoubleArray *a, IOSDoubleArray *b) {
  EduStanfordNlpMathArrayMath_initialize();
  if (((IOSDoubleArray *) nil_chk(a))->size_ != ((IOSDoubleArray *) nil_chk(b))->size_) {
    @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$I$I", @"Can't calculate dot product of multiple different lengths: a.length=", a->size_, @" b.length=", b->size_));
  }
  jdouble result = 0;
  for (jint i = 0; i < a->size_; i++) {
    JrePlusAssignDoubleD(&result, IOSDoubleArray_Get(a, i) * IOSDoubleArray_Get(b, i));
  }
  return result;
}

IOSDoubleArray *EduStanfordNlpMathArrayMath_pairwiseMultiplyWithDoubleArray_withDoubleArray_(IOSDoubleArray *a, IOSDoubleArray *b) {
  EduStanfordNlpMathArrayMath_initialize();
  if (((IOSDoubleArray *) nil_chk(a))->size_ != ((IOSDoubleArray *) nil_chk(b))->size_) {
    @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$I$I", @"Can't pairwise multiple different lengths: a.length=", a->size_, @" b.length=", b->size_));
  }
  IOSDoubleArray *result = [IOSDoubleArray newArrayWithLength:a->size_];
  for (jint i = 0; i < result->size_; i++) {
    *IOSDoubleArray_GetRef(result, i) = IOSDoubleArray_Get(a, i) * IOSDoubleArray_Get(b, i);
  }
  return result;
}

IOSFloatArray *EduStanfordNlpMathArrayMath_pairwiseMultiplyWithFloatArray_withFloatArray_(IOSFloatArray *a, IOSFloatArray *b) {
  EduStanfordNlpMathArrayMath_initialize();
  if (((IOSFloatArray *) nil_chk(a))->size_ != ((IOSFloatArray *) nil_chk(b))->size_) {
    @throw new_JavaLangRuntimeException_init();
  }
  IOSFloatArray *result = [IOSFloatArray newArrayWithLength:a->size_];
  for (jint i = 0; i < result->size_; i++) {
    *IOSFloatArray_GetRef(result, i) = IOSFloatArray_Get(a, i) * IOSFloatArray_Get(b, i);
  }
  return result;
}

void EduStanfordNlpMathArrayMath_pairwiseMultiplyWithDoubleArray_withDoubleArray_withDoubleArray_(IOSDoubleArray *a, IOSDoubleArray *b, IOSDoubleArray *result) {
  EduStanfordNlpMathArrayMath_initialize();
  if (((IOSDoubleArray *) nil_chk(a))->size_ != ((IOSDoubleArray *) nil_chk(b))->size_) {
    @throw new_JavaLangRuntimeException_init();
  }
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(result))->size_; i++) {
    *IOSDoubleArray_GetRef(result, i) = IOSDoubleArray_Get(a, i) * IOSDoubleArray_Get(b, i);
  }
}

void EduStanfordNlpMathArrayMath_pairwiseMultiplyWithFloatArray_withFloatArray_withFloatArray_(IOSFloatArray *a, IOSFloatArray *b, IOSFloatArray *result) {
  EduStanfordNlpMathArrayMath_initialize();
  if (((IOSFloatArray *) nil_chk(a))->size_ != ((IOSFloatArray *) nil_chk(b))->size_) {
    @throw new_JavaLangRuntimeException_init();
  }
  for (jint i = 0; i < ((IOSFloatArray *) nil_chk(result))->size_; i++) {
    *IOSFloatArray_GetRef(result, i) = IOSFloatArray_Get(a, i) * IOSFloatArray_Get(b, i);
  }
}

void EduStanfordNlpMathArrayMath_pairwiseDivideInPlaceWithDoubleArray_withDoubleArray_(IOSDoubleArray *a, IOSDoubleArray *b) {
  EduStanfordNlpMathArrayMath_initialize();
  if (((IOSDoubleArray *) nil_chk(a))->size_ != ((IOSDoubleArray *) nil_chk(b))->size_) {
    @throw new_JavaLangRuntimeException_init();
  }
  for (jint i = 0; i < a->size_; i++) {
    *IOSDoubleArray_GetRef(a, i) = IOSDoubleArray_Get(a, i) / IOSDoubleArray_Get(b, i);
  }
}

jboolean EduStanfordNlpMathArrayMath_hasNaNWithDoubleArray_(IOSDoubleArray *a) {
  EduStanfordNlpMathArrayMath_initialize();
  {
    IOSDoubleArray *a__ = a;
    jdouble const *b__ = ((IOSDoubleArray *) nil_chk(a__))->buffer_;
    jdouble const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jdouble x = *b__++;
      if (JavaLangDouble_isNaNWithDouble_(x)) return true;
    }
  }
  return false;
}

jboolean EduStanfordNlpMathArrayMath_hasInfiniteWithDoubleArray_(IOSDoubleArray *a) {
  EduStanfordNlpMathArrayMath_initialize();
  {
    IOSDoubleArray *a__ = a;
    jdouble const *b__ = ((IOSDoubleArray *) nil_chk(a__))->buffer_;
    jdouble const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jdouble anA = *b__++;
      if (JavaLangDouble_isInfiniteWithDouble_(anA)) return true;
    }
  }
  return false;
}

jboolean EduStanfordNlpMathArrayMath_hasNaNWithFloatArray_(IOSFloatArray *a) {
  EduStanfordNlpMathArrayMath_initialize();
  {
    IOSFloatArray *a__ = a;
    jfloat const *b__ = ((IOSFloatArray *) nil_chk(a__))->buffer_;
    jfloat const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jfloat x = *b__++;
      if (JavaLangFloat_isNaNWithFloat_(x)) return true;
    }
  }
  return false;
}

jint EduStanfordNlpMathArrayMath_countNaNWithDoubleArray_(IOSDoubleArray *v) {
  EduStanfordNlpMathArrayMath_initialize();
  jint c = 0;
  {
    IOSDoubleArray *a__ = v;
    jdouble const *b__ = ((IOSDoubleArray *) nil_chk(a__))->buffer_;
    jdouble const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jdouble d = *b__++;
      if (JavaLangDouble_isNaNWithDouble_(d)) {
        c++;
      }
    }
  }
  return c;
}

IOSDoubleArray *EduStanfordNlpMathArrayMath_filterNaNWithDoubleArray_(IOSDoubleArray *v) {
  EduStanfordNlpMathArrayMath_initialize();
  IOSDoubleArray *u = [IOSDoubleArray newArrayWithLength:EduStanfordNlpMathArrayMath_numRowsWithDoubleArray_(v) - EduStanfordNlpMathArrayMath_countNaNWithDoubleArray_(v)];
  jint j = 0;
  {
    IOSDoubleArray *a__ = v;
    jdouble const *b__ = ((IOSDoubleArray *) nil_chk(a__))->buffer_;
    jdouble const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jdouble d = *b__++;
      if (!JavaLangDouble_isNaNWithDouble_(d)) {
        *IOSDoubleArray_GetRef(u, j++) = d;
      }
    }
  }
  return u;
}

jint EduStanfordNlpMathArrayMath_countInfiniteWithDoubleArray_(IOSDoubleArray *v) {
  EduStanfordNlpMathArrayMath_initialize();
  jint c = 0;
  {
    IOSDoubleArray *a__ = v;
    jdouble const *b__ = ((IOSDoubleArray *) nil_chk(a__))->buffer_;
    jdouble const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jdouble aV = *b__++;
      if (JavaLangDouble_isInfiniteWithDouble_(aV)) c++;
    }
  }
  return c;
}

jint EduStanfordNlpMathArrayMath_countNonZeroWithDoubleArray_(IOSDoubleArray *v) {
  EduStanfordNlpMathArrayMath_initialize();
  jint c = 0;
  {
    IOSDoubleArray *a__ = v;
    jdouble const *b__ = ((IOSDoubleArray *) nil_chk(a__))->buffer_;
    jdouble const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jdouble aV = *b__++;
      if (aV != 0.0) ++c;
    }
  }
  return c;
}

jint EduStanfordNlpMathArrayMath_countCloseToZeroWithDoubleArray_withDouble_(IOSDoubleArray *v, jdouble epsilon) {
  EduStanfordNlpMathArrayMath_initialize();
  jint c = 0;
  {
    IOSDoubleArray *a__ = v;
    jdouble const *b__ = ((IOSDoubleArray *) nil_chk(a__))->buffer_;
    jdouble const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jdouble aV = *b__++;
      if (JavaLangMath_absWithDouble_(aV) < epsilon) ++c;
    }
  }
  return c;
}

jint EduStanfordNlpMathArrayMath_countPositiveWithDoubleArray_(IOSDoubleArray *v) {
  EduStanfordNlpMathArrayMath_initialize();
  jint c = 0;
  {
    IOSDoubleArray *a__ = v;
    jdouble const *b__ = ((IOSDoubleArray *) nil_chk(a__))->buffer_;
    jdouble const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jdouble a = *b__++;
      if (a > 0.0) {
        ++c;
      }
    }
  }
  return c;
}

jint EduStanfordNlpMathArrayMath_countNegativeWithDoubleArray_(IOSDoubleArray *v) {
  EduStanfordNlpMathArrayMath_initialize();
  jint c = 0;
  {
    IOSDoubleArray *a__ = v;
    jdouble const *b__ = ((IOSDoubleArray *) nil_chk(a__))->buffer_;
    jdouble const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jdouble aV = *b__++;
      if (aV < 0.0) ++c;
    }
  }
  return c;
}

IOSDoubleArray *EduStanfordNlpMathArrayMath_filterInfiniteWithDoubleArray_(IOSDoubleArray *v) {
  EduStanfordNlpMathArrayMath_initialize();
  IOSDoubleArray *u = [IOSDoubleArray newArrayWithLength:EduStanfordNlpMathArrayMath_numRowsWithDoubleArray_(v) - EduStanfordNlpMathArrayMath_countInfiniteWithDoubleArray_(v)];
  jint j = 0;
  {
    IOSDoubleArray *a__ = v;
    jdouble const *b__ = ((IOSDoubleArray *) nil_chk(a__))->buffer_;
    jdouble const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jdouble aV = *b__++;
      if (!JavaLangDouble_isInfiniteWithDouble_(aV)) {
        *IOSDoubleArray_GetRef(u, j++) = aV;
      }
    }
  }
  return u;
}

IOSDoubleArray *EduStanfordNlpMathArrayMath_filterNaNAndInfiniteWithDoubleArray_(IOSDoubleArray *v) {
  EduStanfordNlpMathArrayMath_initialize();
  return EduStanfordNlpMathArrayMath_filterInfiniteWithDoubleArray_(EduStanfordNlpMathArrayMath_filterNaNWithDoubleArray_(v));
}

jdouble EduStanfordNlpMathArrayMath_sumWithDoubleArray_(IOSDoubleArray *a) {
  EduStanfordNlpMathArrayMath_initialize();
  return EduStanfordNlpMathArrayMath_sumWithDoubleArray_withInt_withInt_(a, 0, ((IOSDoubleArray *) nil_chk(a))->size_);
}

jdouble EduStanfordNlpMathArrayMath_sumWithDoubleArray_withInt_withInt_(IOSDoubleArray *a, jint fromIndex, jint toIndex) {
  EduStanfordNlpMathArrayMath_initialize();
  jdouble result = 0.0;
  for (jint i = fromIndex; i < toIndex; i++) {
    JrePlusAssignDoubleD(&result, IOSDoubleArray_Get(nil_chk(a), i));
  }
  return result;
}

jint EduStanfordNlpMathArrayMath_sumWithIntArray_(IOSIntArray *a) {
  EduStanfordNlpMathArrayMath_initialize();
  jint result = 0;
  {
    IOSIntArray *a__ = a;
    jint const *b__ = ((IOSIntArray *) nil_chk(a__))->buffer_;
    jint const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jint i = *b__++;
      result += i;
    }
  }
  return result;
}

jfloat EduStanfordNlpMathArrayMath_sumWithFloatArray_(IOSFloatArray *a) {
  EduStanfordNlpMathArrayMath_initialize();
  jfloat result = 0.0f;
  {
    IOSFloatArray *a__ = a;
    jfloat const *b__ = ((IOSFloatArray *) nil_chk(a__))->buffer_;
    jfloat const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jfloat f = *b__++;
      JrePlusAssignFloatF(&result, f);
    }
  }
  return result;
}

jint EduStanfordNlpMathArrayMath_sumWithIntArray2_(IOSObjectArray *a) {
  EduStanfordNlpMathArrayMath_initialize();
  jint result = 0;
  {
    IOSObjectArray *a__ = a;
    IOSIntArray * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    IOSIntArray * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      IOSIntArray *v = *b__++;
      {
        IOSIntArray *a__ = v;
        jint const *b__ = ((IOSIntArray *) nil_chk(a__))->buffer_;
        jint const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          jint item = *b__++;
          result += item;
        }
      }
    }
  }
  return result;
}

IOSIntArray *EduStanfordNlpMathArrayMath_diagWithIntArray2_(IOSObjectArray *a) {
  EduStanfordNlpMathArrayMath_initialize();
  IOSIntArray *rv = [IOSIntArray newArrayWithLength:((IOSObjectArray *) nil_chk(a))->size_];
  for (jint i = 0; i < a->size_; i++) {
    *IOSIntArray_GetRef(rv, i) = IOSIntArray_Get(nil_chk(IOSObjectArray_Get(a, i)), i);
  }
  return rv;
}

jdouble EduStanfordNlpMathArrayMath_averageWithDoubleArray_(IOSDoubleArray *a) {
  EduStanfordNlpMathArrayMath_initialize();
  jdouble total = EduStanfordNlpMathArrayMath_sumWithDoubleArray_(a);
  return total / ((IOSDoubleArray *) nil_chk(a))->size_;
}

jdouble EduStanfordNlpMathArrayMath_iterativeAverageWithDoubleArray_(IOSDoubleArray *a) {
  EduStanfordNlpMathArrayMath_initialize();
  jdouble avg = 0.0;
  jint t = 1;
  {
    IOSDoubleArray *a__ = a;
    jdouble const *b__ = ((IOSDoubleArray *) nil_chk(a__))->buffer_;
    jdouble const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jdouble x = *b__++;
      JrePlusAssignDoubleD(&avg, (x - avg) / t);
      t++;
    }
  }
  return avg;
}

jdouble EduStanfordNlpMathArrayMath_norm_infWithDoubleArray_(IOSDoubleArray *a) {
  EduStanfordNlpMathArrayMath_initialize();
  jdouble max = JavaLangDouble_NEGATIVE_INFINITY;
  {
    IOSDoubleArray *a__ = a;
    jdouble const *b__ = ((IOSDoubleArray *) nil_chk(a__))->buffer_;
    jdouble const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jdouble d = *b__++;
      if (JavaLangMath_absWithDouble_(d) > max) {
        max = JavaLangMath_absWithDouble_(d);
      }
    }
  }
  return max;
}

jdouble EduStanfordNlpMathArrayMath_norm_infWithFloatArray_(IOSFloatArray *a) {
  EduStanfordNlpMathArrayMath_initialize();
  jdouble max = JavaLangDouble_NEGATIVE_INFINITY;
  {
    IOSFloatArray *a__ = a;
    jfloat const *b__ = ((IOSFloatArray *) nil_chk(a__))->buffer_;
    jfloat const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jfloat anA = *b__++;
      if (JavaLangMath_absWithFloat_(anA) > max) {
        max = JavaLangMath_absWithFloat_(anA);
      }
    }
  }
  return max;
}

jdouble EduStanfordNlpMathArrayMath_norm_1WithDoubleArray_(IOSDoubleArray *a) {
  EduStanfordNlpMathArrayMath_initialize();
  jdouble sum = 0;
  {
    IOSDoubleArray *a__ = a;
    jdouble const *b__ = ((IOSDoubleArray *) nil_chk(a__))->buffer_;
    jdouble const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jdouble anA = *b__++;
      JrePlusAssignDoubleD(&sum, (anA < 0 ? -anA : anA));
    }
  }
  return sum;
}

jdouble EduStanfordNlpMathArrayMath_norm_1WithFloatArray_(IOSFloatArray *a) {
  EduStanfordNlpMathArrayMath_initialize();
  jdouble sum = 0;
  {
    IOSFloatArray *a__ = a;
    jfloat const *b__ = ((IOSFloatArray *) nil_chk(a__))->buffer_;
    jfloat const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jfloat anA = *b__++;
      JrePlusAssignDoubleD(&sum, (anA < 0 ? -anA : anA));
    }
  }
  return sum;
}

jdouble EduStanfordNlpMathArrayMath_normWithDoubleArray_(IOSDoubleArray *a) {
  EduStanfordNlpMathArrayMath_initialize();
  jdouble squaredSum = 0;
  {
    IOSDoubleArray *a__ = a;
    jdouble const *b__ = ((IOSDoubleArray *) nil_chk(a__))->buffer_;
    jdouble const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jdouble anA = *b__++;
      JrePlusAssignDoubleD(&squaredSum, anA * anA);
    }
  }
  return JavaLangMath_sqrtWithDouble_(squaredSum);
}

jdouble EduStanfordNlpMathArrayMath_normWithFloatArray_(IOSFloatArray *a) {
  EduStanfordNlpMathArrayMath_initialize();
  jdouble squaredSum = 0;
  {
    IOSFloatArray *a__ = a;
    jfloat const *b__ = ((IOSFloatArray *) nil_chk(a__))->buffer_;
    jfloat const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jfloat anA = *b__++;
      JrePlusAssignDoubleD(&squaredSum, anA * anA);
    }
  }
  return JavaLangMath_sqrtWithDouble_(squaredSum);
}

jint EduStanfordNlpMathArrayMath_argmaxWithDoubleArray_(IOSDoubleArray *a) {
  EduStanfordNlpMathArrayMath_initialize();
  jdouble max = JavaLangDouble_NEGATIVE_INFINITY;
  jint argmax = 0;
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(a))->size_; i++) {
    if (IOSDoubleArray_Get(a, i) > max) {
      max = IOSDoubleArray_Get(a, i);
      argmax = i;
    }
  }
  return argmax;
}

jint EduStanfordNlpMathArrayMath_argmax_tieLastWithDoubleArray_(IOSDoubleArray *a) {
  EduStanfordNlpMathArrayMath_initialize();
  jdouble max = JavaLangDouble_NEGATIVE_INFINITY;
  jint argmax = 0;
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(a))->size_; i++) {
    if (IOSDoubleArray_Get(a, i) >= max) {
      max = IOSDoubleArray_Get(a, i);
      argmax = i;
    }
  }
  return argmax;
}

jdouble EduStanfordNlpMathArrayMath_maxWithDoubleArray_(IOSDoubleArray *a) {
  EduStanfordNlpMathArrayMath_initialize();
  return IOSDoubleArray_Get(nil_chk(a), EduStanfordNlpMathArrayMath_argmaxWithDoubleArray_(a));
}

jdouble EduStanfordNlpMathArrayMath_maxWithJavaUtilCollection_(id<JavaUtilCollection> a) {
  EduStanfordNlpMathArrayMath_initialize();
  jdouble max = JavaLangDouble_NEGATIVE_INFINITY;
  for (JavaLangDouble *boxed__ in nil_chk(a)) {
    jdouble d = [((JavaLangDouble *) nil_chk(boxed__)) doubleValue];
    if (d > max) {
      max = d;
    }
  }
  return max;
}

jint EduStanfordNlpMathArrayMath_argmaxWithFloatArray_(IOSFloatArray *a) {
  EduStanfordNlpMathArrayMath_initialize();
  jfloat max = JavaLangFloat_NEGATIVE_INFINITY;
  jint argmax = 0;
  for (jint i = 0; i < ((IOSFloatArray *) nil_chk(a))->size_; i++) {
    if (IOSFloatArray_Get(a, i) > max) {
      max = IOSFloatArray_Get(a, i);
      argmax = i;
    }
  }
  return argmax;
}

jfloat EduStanfordNlpMathArrayMath_maxWithFloatArray_(IOSFloatArray *a) {
  EduStanfordNlpMathArrayMath_initialize();
  return IOSFloatArray_Get(nil_chk(a), EduStanfordNlpMathArrayMath_argmaxWithFloatArray_(a));
}

jint EduStanfordNlpMathArrayMath_argminWithDoubleArray_(IOSDoubleArray *a) {
  EduStanfordNlpMathArrayMath_initialize();
  jdouble min = JavaLangDouble_POSITIVE_INFINITY;
  jint argmin = 0;
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(a))->size_; i++) {
    if (IOSDoubleArray_Get(a, i) < min) {
      min = IOSDoubleArray_Get(a, i);
      argmin = i;
    }
  }
  return argmin;
}

jdouble EduStanfordNlpMathArrayMath_minWithDoubleArray_(IOSDoubleArray *a) {
  EduStanfordNlpMathArrayMath_initialize();
  return IOSDoubleArray_Get(nil_chk(a), EduStanfordNlpMathArrayMath_argminWithDoubleArray_(a));
}

jdouble EduStanfordNlpMathArrayMath_safeMinWithDoubleArray_(IOSDoubleArray *v) {
  EduStanfordNlpMathArrayMath_initialize();
  IOSDoubleArray *u = EduStanfordNlpMathArrayMath_filterNaNAndInfiniteWithDoubleArray_(v);
  if (EduStanfordNlpMathArrayMath_numRowsWithDoubleArray_(u) == 0) return 0.0;
  return EduStanfordNlpMathArrayMath_minWithDoubleArray_(u);
}

jint EduStanfordNlpMathArrayMath_argminWithFloatArray_(IOSFloatArray *a) {
  EduStanfordNlpMathArrayMath_initialize();
  jfloat min = JavaLangFloat_POSITIVE_INFINITY;
  jint argmin = 0;
  for (jint i = 0; i < ((IOSFloatArray *) nil_chk(a))->size_; i++) {
    if (IOSFloatArray_Get(a, i) < min) {
      min = IOSFloatArray_Get(a, i);
      argmin = i;
    }
  }
  return argmin;
}

jfloat EduStanfordNlpMathArrayMath_minWithFloatArray_(IOSFloatArray *a) {
  EduStanfordNlpMathArrayMath_initialize();
  return IOSFloatArray_Get(nil_chk(a), EduStanfordNlpMathArrayMath_argminWithFloatArray_(a));
}

jint EduStanfordNlpMathArrayMath_argminWithIntArray_(IOSIntArray *a) {
  EduStanfordNlpMathArrayMath_initialize();
  jint min = JavaLangInteger_MAX_VALUE;
  jint argmin = 0;
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(a))->size_; i++) {
    if (IOSIntArray_Get(a, i) < min) {
      min = IOSIntArray_Get(a, i);
      argmin = i;
    }
  }
  return argmin;
}

jint EduStanfordNlpMathArrayMath_minWithIntArray_(IOSIntArray *a) {
  EduStanfordNlpMathArrayMath_initialize();
  return IOSIntArray_Get(nil_chk(a), EduStanfordNlpMathArrayMath_argminWithIntArray_(a));
}

jint EduStanfordNlpMathArrayMath_argmaxWithIntArray_(IOSIntArray *a) {
  EduStanfordNlpMathArrayMath_initialize();
  jint max = JavaLangInteger_MIN_VALUE;
  jint argmax = 0;
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(a))->size_; i++) {
    if (IOSIntArray_Get(a, i) > max) {
      max = IOSIntArray_Get(a, i);
      argmax = i;
    }
  }
  return argmax;
}

jint EduStanfordNlpMathArrayMath_maxWithIntArray_(IOSIntArray *a) {
  EduStanfordNlpMathArrayMath_initialize();
  return IOSIntArray_Get(nil_chk(a), EduStanfordNlpMathArrayMath_argmaxWithIntArray_(a));
}

jint EduStanfordNlpMathArrayMath_minWithIntArray2_(IOSObjectArray *matrix) {
  EduStanfordNlpMathArrayMath_initialize();
  jint min = JavaLangInteger_MAX_VALUE;
  {
    IOSObjectArray *a__ = matrix;
    IOSIntArray * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    IOSIntArray * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      IOSIntArray *row = *b__++;
      {
        IOSIntArray *a__ = row;
        jint const *b__ = ((IOSIntArray *) nil_chk(a__))->buffer_;
        jint const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          jint elem = *b__++;
          min = JavaLangMath_minWithInt_withInt_(min, elem);
        }
      }
    }
  }
  return min;
}

jint EduStanfordNlpMathArrayMath_maxWithIntArray2_(IOSObjectArray *matrix) {
  EduStanfordNlpMathArrayMath_initialize();
  jint max = JavaLangInteger_MIN_VALUE;
  {
    IOSObjectArray *a__ = matrix;
    IOSIntArray * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    IOSIntArray * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      IOSIntArray *row = *b__++;
      {
        IOSIntArray *a__ = row;
        jint const *b__ = ((IOSIntArray *) nil_chk(a__))->buffer_;
        jint const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          jint elem = *b__++;
          max = JavaLangMath_maxWithInt_withInt_(max, elem);
        }
      }
    }
  }
  return max;
}

jdouble EduStanfordNlpMathArrayMath_safeMaxWithDoubleArray_(IOSDoubleArray *v) {
  EduStanfordNlpMathArrayMath_initialize();
  IOSDoubleArray *u = EduStanfordNlpMathArrayMath_filterNaNAndInfiniteWithDoubleArray_(v);
  if (EduStanfordNlpMathArrayMath_numRowsWithDoubleArray_(u) == 0) return 0.0;
  return EduStanfordNlpMathArrayMath_maxWithDoubleArray_(u);
}

jdouble EduStanfordNlpMathArrayMath_logSumWithDoubleArray_(IOSDoubleArray *logInputs) {
  EduStanfordNlpMathArrayMath_initialize();
  return EduStanfordNlpMathArrayMath_logSumWithDoubleArray_withInt_withInt_(logInputs, 0, ((IOSDoubleArray *) nil_chk(logInputs))->size_);
}

jdouble EduStanfordNlpMathArrayMath_logSumWithDoubleArray_withInt_withInt_(IOSDoubleArray *logInputs, jint fromIndex, jint toIndex) {
  EduStanfordNlpMathArrayMath_initialize();
  if (JavaLangThread_interrupted()) {
    @throw new_EduStanfordNlpUtilRuntimeInterruptedException_init();
  }
  if (((IOSDoubleArray *) nil_chk(logInputs))->size_ == 0) @throw new_JavaLangIllegalArgumentException_init();
  if (fromIndex >= 0 && toIndex < logInputs->size_ && fromIndex >= toIndex) return JavaLangDouble_NEGATIVE_INFINITY;
  jint maxIdx = fromIndex;
  jdouble max = IOSDoubleArray_Get(logInputs, fromIndex);
  for (jint i = fromIndex + 1; i < toIndex; i++) {
    if (IOSDoubleArray_Get(logInputs, i) > max) {
      maxIdx = i;
      max = IOSDoubleArray_Get(logInputs, i);
    }
  }
  jboolean haveTerms = false;
  jdouble intermediate = 0.0;
  jdouble cutoff = max - EduStanfordNlpMathSloppyMath_LOGTOLERANCE;
  for (jint i = fromIndex; i < toIndex; i++) {
    if (i != maxIdx && IOSDoubleArray_Get(logInputs, i) > cutoff) {
      haveTerms = true;
      JrePlusAssignDoubleD(&intermediate, JavaLangMath_expWithDouble_(IOSDoubleArray_Get(logInputs, i) - max));
    }
  }
  if (haveTerms) {
    return max + JavaLangMath_logWithDouble_(1.0 + intermediate);
  }
  else {
    return max;
  }
}

jdouble EduStanfordNlpMathArrayMath_logSumWithDoubleArray_withInt_withInt_withInt_(IOSDoubleArray *logInputs, jint fromIndex, jint afterIndex, jint stride) {
  EduStanfordNlpMathArrayMath_initialize();
  if (((IOSDoubleArray *) nil_chk(logInputs))->size_ == 0) @throw new_JavaLangIllegalArgumentException_init();
  if (fromIndex >= 0 && afterIndex < logInputs->size_ && fromIndex >= afterIndex) return JavaLangDouble_NEGATIVE_INFINITY;
  jint maxIdx = fromIndex;
  jdouble max = IOSDoubleArray_Get(logInputs, fromIndex);
  for (jint i = fromIndex + stride; i < afterIndex; i += stride) {
    if (IOSDoubleArray_Get(logInputs, i) > max) {
      maxIdx = i;
      max = IOSDoubleArray_Get(logInputs, i);
    }
  }
  jboolean haveTerms = false;
  jdouble intermediate = 0.0;
  jdouble cutoff = max - EduStanfordNlpMathSloppyMath_LOGTOLERANCE;
  for (jint i = fromIndex; i < afterIndex; i += stride) {
    if (i != maxIdx && IOSDoubleArray_Get(logInputs, i) > cutoff) {
      haveTerms = true;
      JrePlusAssignDoubleD(&intermediate, JavaLangMath_expWithDouble_(IOSDoubleArray_Get(logInputs, i) - max));
    }
  }
  if (haveTerms) {
    return max + JavaLangMath_logWithDouble_(1.0 + intermediate);
  }
  else {
    return max;
  }
}

jdouble EduStanfordNlpMathArrayMath_logSumWithJavaUtilList_(id<JavaUtilList> logInputs) {
  EduStanfordNlpMathArrayMath_initialize();
  return EduStanfordNlpMathArrayMath_logSumWithJavaUtilList_withInt_withInt_(logInputs, 0, [((id<JavaUtilList>) nil_chk(logInputs)) size]);
}

jdouble EduStanfordNlpMathArrayMath_logSumWithJavaUtilList_withInt_withInt_(id<JavaUtilList> logInputs, jint fromIndex, jint toIndex) {
  EduStanfordNlpMathArrayMath_initialize();
  jint length = [((id<JavaUtilList>) nil_chk(logInputs)) size];
  if (length == 0) @throw new_JavaLangIllegalArgumentException_init();
  if (fromIndex >= 0 && toIndex < length && fromIndex >= toIndex) return JavaLangDouble_NEGATIVE_INFINITY;
  jint maxIdx = fromIndex;
  jdouble max = [((JavaLangDouble *) nil_chk([logInputs getWithInt:fromIndex])) doubleValue];
  for (jint i = fromIndex + 1; i < toIndex; i++) {
    jdouble d = [((JavaLangDouble *) nil_chk([logInputs getWithInt:i])) doubleValue];
    if (d > max) {
      maxIdx = i;
      max = d;
    }
  }
  jboolean haveTerms = false;
  jdouble intermediate = 0.0;
  jdouble cutoff = max - EduStanfordNlpMathSloppyMath_LOGTOLERANCE;
  for (jint i = fromIndex; i < toIndex; i++) {
    jdouble d = [((JavaLangDouble *) nil_chk([logInputs getWithInt:i])) doubleValue];
    if (i != maxIdx && d > cutoff) {
      haveTerms = true;
      JrePlusAssignDoubleD(&intermediate, JavaLangMath_expWithDouble_(d - max));
    }
  }
  if (haveTerms) {
    return max + JavaLangMath_logWithDouble_(1.0 + intermediate);
  }
  else {
    return max;
  }
}

jfloat EduStanfordNlpMathArrayMath_logSumWithFloatArray_(IOSFloatArray *logInputs) {
  EduStanfordNlpMathArrayMath_initialize();
  jint leng = ((IOSFloatArray *) nil_chk(logInputs))->size_;
  if (leng == 0) {
    @throw new_JavaLangIllegalArgumentException_init();
  }
  jint maxIdx = 0;
  jfloat max = IOSFloatArray_Get(logInputs, 0);
  for (jint i = 1; i < leng; i++) {
    if (IOSFloatArray_Get(logInputs, i) > max) {
      maxIdx = i;
      max = IOSFloatArray_Get(logInputs, i);
    }
  }
  jboolean haveTerms = false;
  jdouble intermediate = 0.0f;
  jfloat cutoff = max - EduStanfordNlpMathSloppyMath_LOGTOLERANCE_F;
  for (jint i = 0; i < leng; i++) {
    if (i != maxIdx && IOSFloatArray_Get(logInputs, i) > cutoff) {
      haveTerms = true;
      JrePlusAssignDoubleD(&intermediate, JavaLangMath_expWithDouble_(IOSFloatArray_Get(logInputs, i) - max));
    }
  }
  if (haveTerms) {
    return max + (jfloat) JavaLangMath_logWithDouble_(1.0 + intermediate);
  }
  else {
    return max;
  }
}

jdouble EduStanfordNlpMathArrayMath_innerProductWithDoubleArray_withDoubleArray_(IOSDoubleArray *a, IOSDoubleArray *b) {
  EduStanfordNlpMathArrayMath_initialize();
  jdouble result = 0.0;
  jint len = JavaLangMath_minWithInt_withInt_(((IOSDoubleArray *) nil_chk(a))->size_, ((IOSDoubleArray *) nil_chk(b))->size_);
  for (jint i = 0; i < len; i++) {
    JrePlusAssignDoubleD(&result, IOSDoubleArray_Get(a, i) * IOSDoubleArray_Get(b, i));
  }
  return result;
}

jdouble EduStanfordNlpMathArrayMath_innerProductWithFloatArray_withFloatArray_(IOSFloatArray *a, IOSFloatArray *b) {
  EduStanfordNlpMathArrayMath_initialize();
  jdouble result = 0.0;
  jint len = JavaLangMath_minWithInt_withInt_(((IOSFloatArray *) nil_chk(a))->size_, ((IOSFloatArray *) nil_chk(b))->size_);
  for (jint i = 0; i < len; i++) {
    JrePlusAssignDoubleD(&result, IOSFloatArray_Get(a, i) * IOSFloatArray_Get(b, i));
  }
  return result;
}

IOSObjectArray *EduStanfordNlpMathArrayMath_load2DMatrixFromFileWithNSString_(NSString *filename) {
  EduStanfordNlpMathArrayMath_initialize();
  NSString *s = EduStanfordNlpIoIOUtils_slurpFileWithNSString_(filename);
  IOSObjectArray *rows = [((NSString *) nil_chk(s)) split:@"[\x0d\n]+"];
  IOSObjectArray *result = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(rows))->size_ type:IOSClass_doubleArray(1)];
  for (jint i = 0; i < result->size_; i++) {
    IOSObjectArray *columns = [((NSString *) nil_chk(IOSObjectArray_Get(rows, i))) split:@"\\s+"];
    (void) IOSObjectArray_SetAndConsume(result, i, [IOSDoubleArray newArrayWithLength:((IOSObjectArray *) nil_chk(columns))->size_]);
    for (jint j = 0; j < ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(result, i)))->size_; j++) {
      *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(result, i)), j) = JavaLangDouble_parseDoubleWithNSString_(IOSObjectArray_Get(columns, j));
    }
  }
  return result;
}

IOSObjectArray *EduStanfordNlpMathArrayMath_boxWithIntArray_(IOSIntArray *assignment) {
  EduStanfordNlpMathArrayMath_initialize();
  IOSObjectArray *result = [IOSObjectArray newArrayWithLength:((IOSIntArray *) nil_chk(assignment))->size_ type:JavaLangInteger_class_()];
  for (jint i = 0; i < assignment->size_; i++) {
    (void) IOSObjectArray_Set(result, i, JavaLangInteger_valueOfWithInt_(IOSIntArray_Get(assignment, i)));
  }
  return result;
}

IOSIntArray *EduStanfordNlpMathArrayMath_unboxToIntWithJavaUtilCollection_(id<JavaUtilCollection> list) {
  EduStanfordNlpMathArrayMath_initialize();
  IOSIntArray *result = [IOSIntArray newArrayWithLength:[((id<JavaUtilCollection>) nil_chk(list)) size]];
  jint i = 0;
  for (JavaLangInteger *boxed__ in list) {
    jint v = [((JavaLangInteger *) nil_chk(boxed__)) intValue];
    *IOSIntArray_GetRef(result, i++) = v;
  }
  return result;
}

IOSObjectArray *EduStanfordNlpMathArrayMath_boxWithDoubleArray_(IOSDoubleArray *assignment) {
  EduStanfordNlpMathArrayMath_initialize();
  IOSObjectArray *result = [IOSObjectArray newArrayWithLength:((IOSDoubleArray *) nil_chk(assignment))->size_ type:JavaLangDouble_class_()];
  for (jint i = 0; i < assignment->size_; i++) {
    (void) IOSObjectArray_Set(result, i, JavaLangDouble_valueOfWithDouble_(IOSDoubleArray_Get(assignment, i)));
  }
  return result;
}

IOSDoubleArray *EduStanfordNlpMathArrayMath_unboxWithJavaUtilCollection_(id<JavaUtilCollection> list) {
  EduStanfordNlpMathArrayMath_initialize();
  IOSDoubleArray *result = [IOSDoubleArray newArrayWithLength:[((id<JavaUtilCollection>) nil_chk(list)) size]];
  jint i = 0;
  for (JavaLangDouble *boxed__ in list) {
    jdouble v = [((JavaLangDouble *) nil_chk(boxed__)) doubleValue];
    *IOSDoubleArray_GetRef(result, i++) = v;
  }
  return result;
}

jint EduStanfordNlpMathArrayMath_indexOfWithInt_withIntArray_(jint n, IOSIntArray *a) {
  EduStanfordNlpMathArrayMath_initialize();
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(a))->size_; i++) {
    if (IOSIntArray_Get(a, i) == n) return i;
  }
  return -1;
}

IOSObjectArray *EduStanfordNlpMathArrayMath_castToIntWithDoubleArray2_(IOSObjectArray *doubleCounts) {
  EduStanfordNlpMathArrayMath_initialize();
  IOSObjectArray *result = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(doubleCounts))->size_ type:IOSClass_intArray(1)];
  for (jint i = 0; i < doubleCounts->size_; i++) {
    (void) IOSObjectArray_SetAndConsume(result, i, [IOSIntArray newArrayWithLength:((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(doubleCounts, i)))->size_]);
    for (jint j = 0; j < ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(doubleCounts, i)))->size_; j++) {
      *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(result, i)), j) = JreFpToInt(IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(doubleCounts, i)), j));
    }
  }
  return result;
}

void EduStanfordNlpMathArrayMath_normalizeWithDoubleArray_(IOSDoubleArray *a) {
  EduStanfordNlpMathArrayMath_initialize();
  jdouble total = EduStanfordNlpMathArrayMath_sumWithDoubleArray_(a);
  if (total == 0.0 || JavaLangDouble_isNaNWithDouble_(total)) {
    @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$", @"Can't normalize an array with sum 0.0 or NaN: ", JavaUtilArrays_toStringWithDoubleArray_(a)));
  }
  EduStanfordNlpMathArrayMath_multiplyInPlaceWithDoubleArray_withDouble_(a, 1.0 / total);
}

void EduStanfordNlpMathArrayMath_L1normalizeWithDoubleArray_(IOSDoubleArray *a) {
  EduStanfordNlpMathArrayMath_initialize();
  jdouble total = EduStanfordNlpMathArrayMath_L1NormWithDoubleArray_(a);
  if (total == 0.0 || JavaLangDouble_isNaNWithDouble_(total)) {
    if (((IOSDoubleArray *) nil_chk(a))->size_ < 100) {
      @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$", @"Can't normalize an array with sum 0.0 or NaN: ", JavaUtilArrays_toStringWithDoubleArray_(a)));
    }
    else {
      IOSDoubleArray *aTrunc = [IOSDoubleArray newArrayWithLength:100];
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(a, 0, aTrunc, 0, 100);
      @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$$", @"Can't normalize an array with sum 0.0 or NaN: ", JavaUtilArrays_toStringWithDoubleArray_(aTrunc), @" ... "));
    }
  }
  EduStanfordNlpMathArrayMath_multiplyInPlaceWithDoubleArray_withDouble_(a, 1.0 / total);
}

void EduStanfordNlpMathArrayMath_L2normalizeWithDoubleArray_(IOSDoubleArray *a) {
  EduStanfordNlpMathArrayMath_initialize();
  jdouble total = EduStanfordNlpMathArrayMath_L2NormWithDoubleArray_(a);
  if (total == 0.0 || JavaLangDouble_isNaNWithDouble_(total)) {
    if (((IOSDoubleArray *) nil_chk(a))->size_ < 100) {
      @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$", @"Can't normalize an array with sum 0.0 or NaN: ", JavaUtilArrays_toStringWithDoubleArray_(a)));
    }
    else {
      IOSDoubleArray *aTrunc = [IOSDoubleArray newArrayWithLength:100];
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(a, 0, aTrunc, 0, 100);
      @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$$", @"Can't normalize an array with sum 0.0 or NaN: ", JavaUtilArrays_toStringWithDoubleArray_(aTrunc), @" ... "));
    }
  }
  EduStanfordNlpMathArrayMath_multiplyInPlaceWithDoubleArray_withDouble_(a, 1.0 / total);
}

void EduStanfordNlpMathArrayMath_normalizeWithFloatArray_(IOSFloatArray *a) {
  EduStanfordNlpMathArrayMath_initialize();
  jfloat total = EduStanfordNlpMathArrayMath_sumWithFloatArray_(a);
  if (total == 0.0f || JavaLangDouble_isNaNWithDouble_(total)) {
    @throw new_JavaLangRuntimeException_initWithNSString_(@"Can't normalize an array with sum 0.0 or NaN");
  }
  EduStanfordNlpMathArrayMath_multiplyInPlaceWithFloatArray_withDouble_(a, 1.0f / total);
}

void EduStanfordNlpMathArrayMath_L2normalizeWithFloatArray_(IOSFloatArray *a) {
  EduStanfordNlpMathArrayMath_initialize();
  jfloat total = EduStanfordNlpMathArrayMath_L2NormWithFloatArray_(a);
  if (total == 0.0 || JavaLangFloat_isNaNWithFloat_(total)) {
    if (((IOSFloatArray *) nil_chk(a))->size_ < 100) {
      @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$", @"Can't normalize an array with sum 0.0 or NaN: ", JavaUtilArrays_toStringWithFloatArray_(a)));
    }
    else {
      IOSFloatArray *aTrunc = [IOSFloatArray newArrayWithLength:100];
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(a, 0, aTrunc, 0, 100);
      @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$$", @"Can't normalize an array with sum 0.0 or NaN: ", JavaUtilArrays_toStringWithFloatArray_(aTrunc), @" ... "));
    }
  }
  EduStanfordNlpMathArrayMath_multiplyInPlaceWithFloatArray_withDouble_(a, 1.0 / total);
}

void EduStanfordNlpMathArrayMath_standardizeWithDoubleArray_(IOSDoubleArray *a) {
  EduStanfordNlpMathArrayMath_initialize();
  jdouble m = EduStanfordNlpMathArrayMath_meanWithDoubleArray_(a);
  if (JavaLangDouble_isNaNWithDouble_(m)) {
    @throw new_JavaLangRuntimeException_initWithNSString_(@"Can't standardize array whose mean is NaN");
  }
  jdouble s = EduStanfordNlpMathArrayMath_stdevWithDoubleArray_(a);
  if (s == 0.0 || JavaLangDouble_isNaNWithDouble_(s)) {
    @throw new_JavaLangRuntimeException_initWithNSString_(@"Can't standardize array whose standard deviation is 0.0 or NaN");
  }
  EduStanfordNlpMathArrayMath_addInPlaceWithDoubleArray_withDouble_(a, -m);
  EduStanfordNlpMathArrayMath_multiplyInPlaceWithDoubleArray_withDouble_(a, 1.0 / s);
}

jdouble EduStanfordNlpMathArrayMath_L2NormWithDoubleArray_(IOSDoubleArray *a) {
  EduStanfordNlpMathArrayMath_initialize();
  jdouble result = 0.0;
  {
    IOSDoubleArray *a__ = a;
    jdouble const *b__ = ((IOSDoubleArray *) nil_chk(a__))->buffer_;
    jdouble const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jdouble d = *b__++;
      JrePlusAssignDoubleD(&result, JavaLangMath_powWithDouble_withDouble_(d, 2));
    }
  }
  return JavaLangMath_sqrtWithDouble_(result);
}

jfloat EduStanfordNlpMathArrayMath_L2NormWithFloatArray_(IOSFloatArray *a) {
  EduStanfordNlpMathArrayMath_initialize();
  jdouble result = 0;
  {
    IOSFloatArray *a__ = a;
    jfloat const *b__ = ((IOSFloatArray *) nil_chk(a__))->buffer_;
    jfloat const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jfloat d = *b__++;
      JrePlusAssignDoubleD(&result, JavaLangMath_powWithDouble_withDouble_(d, 2));
    }
  }
  return (jfloat) JavaLangMath_sqrtWithDouble_(result);
}

jdouble EduStanfordNlpMathArrayMath_L1NormWithDoubleArray_(IOSDoubleArray *a) {
  EduStanfordNlpMathArrayMath_initialize();
  jdouble result = 0.0;
  {
    IOSDoubleArray *a__ = a;
    jdouble const *b__ = ((IOSDoubleArray *) nil_chk(a__))->buffer_;
    jdouble const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jdouble d = *b__++;
      JrePlusAssignDoubleD(&result, JavaLangMath_absWithDouble_(d));
    }
  }
  return result;
}

void EduStanfordNlpMathArrayMath_logNormalizeWithDoubleArray_(IOSDoubleArray *a) {
  EduStanfordNlpMathArrayMath_initialize();
  jdouble logTotal = EduStanfordNlpMathArrayMath_logSumWithDoubleArray_(a);
  if (logTotal == JavaLangDouble_NEGATIVE_INFINITY) {
    jdouble v = -JavaLangMath_logWithDouble_(((IOSDoubleArray *) nil_chk(a))->size_);
    for (jint i = 0; i < a->size_; i++) {
      *IOSDoubleArray_GetRef(a, i) = v;
    }
    return;
  }
  EduStanfordNlpMathArrayMath_addInPlaceWithDoubleArray_withDouble_(a, -logTotal);
}

jint EduStanfordNlpMathArrayMath_sampleFromDistributionWithDoubleArray_(IOSDoubleArray *d) {
  EduStanfordNlpMathArrayMath_initialize();
  return EduStanfordNlpMathArrayMath_sampleFromDistributionWithDoubleArray_withJavaUtilRandom_(d, EduStanfordNlpMathArrayMath_rand);
}

jint EduStanfordNlpMathArrayMath_sampleFromDistributionWithDoubleArray_withJavaUtilRandom_(IOSDoubleArray *d, JavaUtilRandom *random) {
  EduStanfordNlpMathArrayMath_initialize();
  jdouble r = [((JavaUtilRandom *) nil_chk(random)) nextDouble];
  jdouble total = 0;
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(d))->size_ - 1; i++) {
    if (JavaLangDouble_isNaNWithDouble_(IOSDoubleArray_Get(d, i))) {
      @throw new_JavaLangRuntimeException_initWithNSString_(@"Can't sample from NaN");
    }
    JrePlusAssignDoubleD(&total, IOSDoubleArray_Get(d, i));
    if (r < total) {
      return i;
    }
  }
  return d->size_ - 1;
}

jint EduStanfordNlpMathArrayMath_sampleFromDistributionWithFloatArray_withJavaUtilRandom_(IOSFloatArray *d, JavaUtilRandom *random) {
  EduStanfordNlpMathArrayMath_initialize();
  jdouble r = [((JavaUtilRandom *) nil_chk(random)) nextDouble];
  jdouble total = 0;
  for (jint i = 0; i < ((IOSFloatArray *) nil_chk(d))->size_ - 1; i++) {
    if (JavaLangFloat_isNaNWithFloat_(IOSFloatArray_Get(d, i))) {
      @throw new_JavaLangRuntimeException_initWithNSString_(@"Can't sample from NaN");
    }
    JrePlusAssignDoubleD(&total, IOSFloatArray_Get(d, i));
    if (r < total) {
      return i;
    }
  }
  return d->size_ - 1;
}

jdouble EduStanfordNlpMathArrayMath_klDivergenceWithDoubleArray_withDoubleArray_(IOSDoubleArray *from, IOSDoubleArray *to) {
  EduStanfordNlpMathArrayMath_initialize();
  jdouble kl = 0.0;
  jdouble tot = EduStanfordNlpMathArrayMath_sumWithDoubleArray_(from);
  jdouble tot2 = EduStanfordNlpMathArrayMath_sumWithDoubleArray_(to);
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(from))->size_; i++) {
    if (IOSDoubleArray_Get(from, i) == 0.0) {
      continue;
    }
    jdouble num = IOSDoubleArray_Get(from, i) / tot;
    jdouble num2 = IOSDoubleArray_Get(nil_chk(to), i) / tot2;
    JrePlusAssignDoubleD(&kl, num * (JavaLangMath_logWithDouble_(num / num2) / JavaLangMath_logWithDouble_(2.0)));
  }
  return kl;
}

jdouble EduStanfordNlpMathArrayMath_jensenShannonDivergenceWithDoubleArray_withDoubleArray_(IOSDoubleArray *a, IOSDoubleArray *b) {
  EduStanfordNlpMathArrayMath_initialize();
  IOSDoubleArray *average = EduStanfordNlpMathArrayMath_pairwiseAddWithDoubleArray_withDoubleArray_(a, b);
  EduStanfordNlpMathArrayMath_multiplyInPlaceWithDoubleArray_withDouble_(average, .5);
  return .5 * EduStanfordNlpMathArrayMath_klDivergenceWithDoubleArray_withDoubleArray_(a, average) + .5 * EduStanfordNlpMathArrayMath_klDivergenceWithDoubleArray_withDoubleArray_(b, average);
}

void EduStanfordNlpMathArrayMath_setToLogDeterministicWithFloatArray_withInt_(IOSFloatArray *a, jint i) {
  EduStanfordNlpMathArrayMath_initialize();
  for (jint j = 0; j < ((IOSFloatArray *) nil_chk(a))->size_; j++) {
    if (j == i) {
      *IOSFloatArray_GetRef(a, j) = 0.0f;
    }
    else {
      *IOSFloatArray_GetRef(a, j) = JavaLangFloat_NEGATIVE_INFINITY;
    }
  }
}

void EduStanfordNlpMathArrayMath_setToLogDeterministicWithDoubleArray_withInt_(IOSDoubleArray *a, jint i) {
  EduStanfordNlpMathArrayMath_initialize();
  for (jint j = 0; j < ((IOSDoubleArray *) nil_chk(a))->size_; j++) {
    if (j == i) {
      *IOSDoubleArray_GetRef(a, j) = 0.0;
    }
    else {
      *IOSDoubleArray_GetRef(a, j) = JavaLangDouble_NEGATIVE_INFINITY;
    }
  }
}

jdouble EduStanfordNlpMathArrayMath_meanWithDoubleArray_(IOSDoubleArray *a) {
  EduStanfordNlpMathArrayMath_initialize();
  return EduStanfordNlpMathArrayMath_sumWithDoubleArray_(a) / ((IOSDoubleArray *) nil_chk(a))->size_;
}

jdouble EduStanfordNlpMathArrayMath_meanWithIntArray_(IOSIntArray *a) {
  EduStanfordNlpMathArrayMath_initialize();
  return ((jdouble) EduStanfordNlpMathArrayMath_sumWithIntArray_(a)) / ((IOSIntArray *) nil_chk(a))->size_;
}

jdouble EduStanfordNlpMathArrayMath_medianWithDoubleArray_(IOSDoubleArray *a) {
  EduStanfordNlpMathArrayMath_initialize();
  IOSDoubleArray *b = [IOSDoubleArray newArrayWithLength:((IOSDoubleArray *) nil_chk(a))->size_];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(a, 0, b, 0, b->size_);
  JavaUtilArrays_sortWithDoubleArray_(b);
  jint mid = b->size_ / 2;
  if (b->size_ % 2 == 0) {
    return (IOSDoubleArray_Get(b, mid - 1) + IOSDoubleArray_Get(b, mid)) / 2.0;
  }
  else {
    return IOSDoubleArray_Get(b, mid);
  }
}

jdouble EduStanfordNlpMathArrayMath_safeMeanWithDoubleArray_(IOSDoubleArray *v) {
  EduStanfordNlpMathArrayMath_initialize();
  IOSDoubleArray *u = EduStanfordNlpMathArrayMath_filterNaNAndInfiniteWithDoubleArray_(v);
  if (EduStanfordNlpMathArrayMath_numRowsWithDoubleArray_(u) == 0) return 0.0;
  return EduStanfordNlpMathArrayMath_meanWithDoubleArray_(u);
}

jdouble EduStanfordNlpMathArrayMath_sumSquaredErrorWithDoubleArray_(IOSDoubleArray *a) {
  EduStanfordNlpMathArrayMath_initialize();
  jdouble mean = EduStanfordNlpMathArrayMath_meanWithDoubleArray_(a);
  jdouble result = 0.0;
  {
    IOSDoubleArray *a__ = a;
    jdouble const *b__ = ((IOSDoubleArray *) nil_chk(a__))->buffer_;
    jdouble const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jdouble anA = *b__++;
      jdouble diff = anA - mean;
      JrePlusAssignDoubleD(&result, (diff * diff));
    }
  }
  return result;
}

jdouble EduStanfordNlpMathArrayMath_sumSquaredWithDoubleArray_(IOSDoubleArray *a) {
  EduStanfordNlpMathArrayMath_initialize();
  jdouble result = 0.0;
  {
    IOSDoubleArray *a__ = a;
    jdouble const *b__ = ((IOSDoubleArray *) nil_chk(a__))->buffer_;
    jdouble const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jdouble anA = *b__++;
      JrePlusAssignDoubleD(&result, (anA * anA));
    }
  }
  return result;
}

jdouble EduStanfordNlpMathArrayMath_varianceWithDoubleArray_(IOSDoubleArray *a) {
  EduStanfordNlpMathArrayMath_initialize();
  return EduStanfordNlpMathArrayMath_sumSquaredErrorWithDoubleArray_(a) / (((IOSDoubleArray *) nil_chk(a))->size_ - 1);
}

jdouble EduStanfordNlpMathArrayMath_stdevWithDoubleArray_(IOSDoubleArray *a) {
  EduStanfordNlpMathArrayMath_initialize();
  return JavaLangMath_sqrtWithDouble_(EduStanfordNlpMathArrayMath_varianceWithDoubleArray_(a));
}

jdouble EduStanfordNlpMathArrayMath_safeStdevWithDoubleArray_(IOSDoubleArray *v) {
  EduStanfordNlpMathArrayMath_initialize();
  IOSDoubleArray *u = EduStanfordNlpMathArrayMath_filterNaNAndInfiniteWithDoubleArray_(v);
  if (EduStanfordNlpMathArrayMath_numRowsWithDoubleArray_(u) < 2) return 1.0;
  return EduStanfordNlpMathArrayMath_stdevWithDoubleArray_(u);
}

jdouble EduStanfordNlpMathArrayMath_standardErrorOfMeanWithDoubleArray_(IOSDoubleArray *a) {
  EduStanfordNlpMathArrayMath_initialize();
  return EduStanfordNlpMathArrayMath_stdevWithDoubleArray_(a) / JavaLangMath_sqrtWithDouble_(((IOSDoubleArray *) nil_chk(a))->size_);
}

void EduStanfordNlpMathArrayMath_sampleWithoutReplacementWithIntArray_withInt_(IOSIntArray *array, jint numArgClasses) {
  EduStanfordNlpMathArrayMath_initialize();
  EduStanfordNlpMathArrayMath_sampleWithoutReplacementWithIntArray_withInt_withJavaUtilRandom_(array, numArgClasses, EduStanfordNlpMathArrayMath_rand);
}

void EduStanfordNlpMathArrayMath_sampleWithoutReplacementWithIntArray_withInt_withJavaUtilRandom_(IOSIntArray *array, jint numArgClasses, JavaUtilRandom *rand) {
  EduStanfordNlpMathArrayMath_initialize();
  IOSIntArray *temp = [IOSIntArray newArrayWithLength:numArgClasses];
  for (jint i = 0; i < temp->size_; i++) {
    *IOSIntArray_GetRef(temp, i) = i;
  }
  EduStanfordNlpMathArrayMath_shuffleWithIntArray_withJavaUtilRandom_(temp, rand);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(temp, 0, array, 0, ((IOSIntArray *) nil_chk(array))->size_);
}

void EduStanfordNlpMathArrayMath_shuffleWithIntArray_(IOSIntArray *a) {
  EduStanfordNlpMathArrayMath_initialize();
  EduStanfordNlpMathArrayMath_shuffleWithIntArray_withJavaUtilRandom_(a, EduStanfordNlpMathArrayMath_rand);
}

void EduStanfordNlpMathArrayMath_shuffleWithIntArray_withJavaUtilRandom_(IOSIntArray *a, JavaUtilRandom *rand) {
  EduStanfordNlpMathArrayMath_initialize();
  for (jint i = ((IOSIntArray *) nil_chk(a))->size_ - 1; i > 0; i--) {
    jint j = [((JavaUtilRandom *) nil_chk(rand)) nextIntWithInt:i + 1];
    jint tmp = IOSIntArray_Get(a, i);
    *IOSIntArray_GetRef(a, i) = IOSIntArray_Get(a, j);
    *IOSIntArray_GetRef(a, j) = tmp;
  }
}

void EduStanfordNlpMathArrayMath_reverseWithIntArray_(IOSIntArray *a) {
  EduStanfordNlpMathArrayMath_initialize();
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(a))->size_ / 2; i++) {
    jint j = a->size_ - i - 1;
    jint tmp = IOSIntArray_Get(a, i);
    *IOSIntArray_GetRef(a, i) = IOSIntArray_Get(a, j);
    *IOSIntArray_GetRef(a, j) = tmp;
  }
}

jboolean EduStanfordNlpMathArrayMath_containsWithIntArray_withInt_(IOSIntArray *a, jint i) {
  EduStanfordNlpMathArrayMath_initialize();
  {
    IOSIntArray *a__ = a;
    jint const *b__ = ((IOSIntArray *) nil_chk(a__))->buffer_;
    jint const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jint k = *b__++;
      if (k == i) return true;
    }
  }
  return false;
}

jboolean EduStanfordNlpMathArrayMath_containsInSubarrayWithIntArray_withInt_withInt_withInt_(IOSIntArray *a, jint begin, jint end, jint i) {
  EduStanfordNlpMathArrayMath_initialize();
  for (jint j = begin; j < end; j++) {
    if (IOSIntArray_Get(nil_chk(a), j) == i) return true;
  }
  return false;
}

jdouble EduStanfordNlpMathArrayMath_pearsonCorrelationWithDoubleArray_withDoubleArray_(IOSDoubleArray *x, IOSDoubleArray *y) {
  EduStanfordNlpMathArrayMath_initialize();
  jdouble result;
  jdouble sum_sq_x = 0, sum_sq_y = 0;
  jdouble mean_x = IOSDoubleArray_Get(nil_chk(x), 0), mean_y = IOSDoubleArray_Get(nil_chk(y), 0);
  jdouble sum_coproduct = 0;
  for (jint i = 2; i < x->size_ + 1; ++i) {
    jdouble w = (i - 1) * 1.0 / i;
    jdouble delta_x = IOSDoubleArray_Get(x, i - 1) - mean_x;
    jdouble delta_y = IOSDoubleArray_Get(y, i - 1) - mean_y;
    JrePlusAssignDoubleD(&sum_sq_x, delta_x * delta_x * w);
    JrePlusAssignDoubleD(&sum_sq_y, delta_y * delta_y * w);
    JrePlusAssignDoubleD(&sum_coproduct, delta_x * delta_y * w);
    JrePlusAssignDoubleD(&mean_x, delta_x / i);
    JrePlusAssignDoubleD(&mean_y, delta_y / i);
  }
  jdouble pop_sd_x = JavaLangMath_sqrtWithDouble_(sum_sq_x / x->size_);
  jdouble pop_sd_y = JavaLangMath_sqrtWithDouble_(sum_sq_y / y->size_);
  jdouble cov_x_y = sum_coproduct / x->size_;
  jdouble denom = pop_sd_x * pop_sd_y;
  if (denom == 0.0) return 0.0;
  result = cov_x_y / denom;
  return result;
}

jdouble EduStanfordNlpMathArrayMath_sigLevelByApproxRandWithDoubleArray_withDoubleArray_(IOSDoubleArray *A, IOSDoubleArray *B) {
  EduStanfordNlpMathArrayMath_initialize();
  return EduStanfordNlpMathArrayMath_sigLevelByApproxRandWithDoubleArray_withDoubleArray_withInt_(A, B, 1000);
}

jdouble EduStanfordNlpMathArrayMath_sigLevelByApproxRandWithDoubleArray_withDoubleArray_withInt_(IOSDoubleArray *A, IOSDoubleArray *B, jint iterations) {
  EduStanfordNlpMathArrayMath_initialize();
  if (((IOSDoubleArray *) nil_chk(A))->size_ == 0) @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Input arrays must not be empty!");
  if (A->size_ != ((IOSDoubleArray *) nil_chk(B))->size_) @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Input arrays must have equal length!");
  if (iterations <= 0) @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Number of iterations must be positive!");
  jdouble testStatistic = EduStanfordNlpMathArrayMath_absDiffOfMeansWithDoubleArray_withDoubleArray_withBoolean_(A, B, false);
  jint successes = 0;
  for (jint i = 0; i < iterations; i++) {
    jdouble t = EduStanfordNlpMathArrayMath_absDiffOfMeansWithDoubleArray_withDoubleArray_withBoolean_(A, B, true);
    if (t >= testStatistic) successes++;
  }
  return (jdouble) (successes + 1) / (jdouble) (iterations + 1);
}

jdouble EduStanfordNlpMathArrayMath_sigLevelByApproxRandWithIntArray_withIntArray_(IOSIntArray *A, IOSIntArray *B) {
  EduStanfordNlpMathArrayMath_initialize();
  return EduStanfordNlpMathArrayMath_sigLevelByApproxRandWithIntArray_withIntArray_withInt_(A, B, 1000);
}

jdouble EduStanfordNlpMathArrayMath_sigLevelByApproxRandWithIntArray_withIntArray_withInt_(IOSIntArray *A, IOSIntArray *B, jint iterations) {
  EduStanfordNlpMathArrayMath_initialize();
  if (((IOSIntArray *) nil_chk(A))->size_ == 0) @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Input arrays must not be empty!");
  if (A->size_ != ((IOSIntArray *) nil_chk(B))->size_) @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Input arrays must have equal length!");
  if (iterations <= 0) @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Number of iterations must be positive!");
  IOSDoubleArray *X = [IOSDoubleArray newArrayWithLength:A->size_];
  IOSDoubleArray *Y = [IOSDoubleArray newArrayWithLength:B->size_];
  for (jint i = 0; i < A->size_; i++) {
    *IOSDoubleArray_GetRef(X, i) = IOSIntArray_Get(A, i);
    *IOSDoubleArray_GetRef(Y, i) = IOSIntArray_Get(B, i);
  }
  return EduStanfordNlpMathArrayMath_sigLevelByApproxRandWithDoubleArray_withDoubleArray_withInt_(X, Y, iterations);
}

jdouble EduStanfordNlpMathArrayMath_sigLevelByApproxRandWithBooleanArray_withBooleanArray_(IOSBooleanArray *A, IOSBooleanArray *B) {
  EduStanfordNlpMathArrayMath_initialize();
  return EduStanfordNlpMathArrayMath_sigLevelByApproxRandWithBooleanArray_withBooleanArray_withInt_(A, B, 1000);
}

jdouble EduStanfordNlpMathArrayMath_sigLevelByApproxRandWithBooleanArray_withBooleanArray_withInt_(IOSBooleanArray *A, IOSBooleanArray *B, jint iterations) {
  EduStanfordNlpMathArrayMath_initialize();
  if (((IOSBooleanArray *) nil_chk(A))->size_ == 0) @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Input arrays must not be empty!");
  if (A->size_ != ((IOSBooleanArray *) nil_chk(B))->size_) @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Input arrays must have equal length!");
  if (iterations <= 0) @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Number of iterations must be positive!");
  IOSDoubleArray *X = [IOSDoubleArray newArrayWithLength:A->size_];
  IOSDoubleArray *Y = [IOSDoubleArray newArrayWithLength:B->size_];
  for (jint i = 0; i < A->size_; i++) {
    *IOSDoubleArray_GetRef(X, i) = (IOSBooleanArray_Get(A, i) ? 1.0 : 0.0);
    *IOSDoubleArray_GetRef(Y, i) = (IOSBooleanArray_Get(B, i) ? 1.0 : 0.0);
  }
  return EduStanfordNlpMathArrayMath_sigLevelByApproxRandWithDoubleArray_withDoubleArray_withInt_(X, Y, iterations);
}

jdouble EduStanfordNlpMathArrayMath_absDiffOfMeansWithDoubleArray_withDoubleArray_withBoolean_(IOSDoubleArray *A, IOSDoubleArray *B, jboolean randomize) {
  EduStanfordNlpMathArrayMath_initialize();
  JavaUtilRandom *random = new_JavaUtilRandom_init();
  jdouble aTotal = 0.0;
  jdouble bTotal = 0.0;
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(A))->size_; i++) {
    if (randomize && [random nextBoolean]) {
      JrePlusAssignDoubleD(&aTotal, IOSDoubleArray_Get(nil_chk(B), i));
      JrePlusAssignDoubleD(&bTotal, IOSDoubleArray_Get(A, i));
    }
    else {
      JrePlusAssignDoubleD(&aTotal, IOSDoubleArray_Get(A, i));
      JrePlusAssignDoubleD(&bTotal, IOSDoubleArray_Get(nil_chk(B), i));
    }
  }
  jdouble aMean = aTotal / A->size_;
  jdouble bMean = bTotal / ((IOSDoubleArray *) nil_chk(B))->size_;
  return JavaLangMath_absWithDouble_(aMean - bMean);
}

NSString *EduStanfordNlpMathArrayMath_toBinaryStringWithByteArray_(IOSByteArray *b) {
  EduStanfordNlpMathArrayMath_initialize();
  JavaLangStringBuilder *s = new_JavaLangStringBuilder_init();
  {
    IOSByteArray *a__ = b;
    jbyte const *b__ = ((IOSByteArray *) nil_chk(a__))->buffer_;
    jbyte const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jbyte by = *b__++;
      for (jint j = 7; j >= 0; j--) {
        if ((by & (JreLShift32(1, j))) > 0) {
          (void) [s appendWithChar:'1'];
        }
        else {
          (void) [s appendWithChar:'0'];
        }
      }
      (void) [s appendWithChar:' '];
    }
  }
  return [s description];
}

NSString *EduStanfordNlpMathArrayMath_toStringWithDoubleArray_(IOSDoubleArray *a) {
  EduStanfordNlpMathArrayMath_initialize();
  return EduStanfordNlpMathArrayMath_toStringWithDoubleArray_withJavaTextNumberFormat_(a, nil);
}

NSString *EduStanfordNlpMathArrayMath_toStringWithDoubleArray_withJavaTextNumberFormat_(IOSDoubleArray *a, JavaTextNumberFormat *nf) {
  EduStanfordNlpMathArrayMath_initialize();
  if (a == nil) return nil;
  if (a->size_ == 0) return @"[]";
  JavaLangStringBuilder *b = new_JavaLangStringBuilder_init();
  (void) [b appendWithChar:'['];
  for (jint i = 0; i < a->size_ - 1; i++) {
    NSString *s;
    if (nf == nil) {
      s = NSString_valueOfDouble_(IOSDoubleArray_Get(a, i));
    }
    else {
      s = [nf formatWithDouble:IOSDoubleArray_Get(a, i)];
    }
    (void) [b appendWithNSString:s];
    (void) [b appendWithNSString:@", "];
  }
  NSString *s;
  if (nf == nil) {
    s = NSString_valueOfDouble_(IOSDoubleArray_Get(a, a->size_ - 1));
  }
  else {
    s = [nf formatWithDouble:IOSDoubleArray_Get(a, a->size_ - 1)];
  }
  (void) [b appendWithNSString:s];
  (void) [b appendWithChar:']'];
  return [b description];
}

NSString *EduStanfordNlpMathArrayMath_toStringWithFloatArray_(IOSFloatArray *a) {
  EduStanfordNlpMathArrayMath_initialize();
  return EduStanfordNlpMathArrayMath_toStringWithFloatArray_withJavaTextNumberFormat_(a, nil);
}

NSString *EduStanfordNlpMathArrayMath_toStringWithFloatArray_withJavaTextNumberFormat_(IOSFloatArray *a, JavaTextNumberFormat *nf) {
  EduStanfordNlpMathArrayMath_initialize();
  if (a == nil) return nil;
  if (a->size_ == 0) return @"[]";
  JavaLangStringBuilder *b = new_JavaLangStringBuilder_init();
  (void) [b appendWithChar:'['];
  for (jint i = 0; i < a->size_ - 1; i++) {
    NSString *s;
    if (nf == nil) {
      s = NSString_valueOfFloat_(IOSFloatArray_Get(a, i));
    }
    else {
      s = [nf formatWithDouble:IOSFloatArray_Get(a, i)];
    }
    (void) [b appendWithNSString:s];
    (void) [b appendWithNSString:@", "];
  }
  NSString *s;
  if (nf == nil) {
    s = NSString_valueOfFloat_(IOSFloatArray_Get(a, a->size_ - 1));
  }
  else {
    s = [nf formatWithDouble:IOSFloatArray_Get(a, a->size_ - 1)];
  }
  (void) [b appendWithNSString:s];
  (void) [b appendWithChar:']'];
  return [b description];
}

NSString *EduStanfordNlpMathArrayMath_toStringWithIntArray_(IOSIntArray *a) {
  EduStanfordNlpMathArrayMath_initialize();
  return EduStanfordNlpMathArrayMath_toStringWithIntArray_withJavaTextNumberFormat_(a, nil);
}

NSString *EduStanfordNlpMathArrayMath_toStringWithIntArray_withJavaTextNumberFormat_(IOSIntArray *a, JavaTextNumberFormat *nf) {
  EduStanfordNlpMathArrayMath_initialize();
  if (a == nil) return nil;
  if (a->size_ == 0) return @"[]";
  JavaLangStringBuilder *b = new_JavaLangStringBuilder_init();
  (void) [b appendWithChar:'['];
  for (jint i = 0; i < a->size_ - 1; i++) {
    NSString *s;
    if (nf == nil) {
      s = NSString_valueOfInt_(IOSIntArray_Get(a, i));
    }
    else {
      s = [nf formatWithLong:IOSIntArray_Get(a, i)];
    }
    (void) [b appendWithNSString:s];
    (void) [b appendWithNSString:@", "];
  }
  NSString *s;
  if (nf == nil) {
    s = NSString_valueOfInt_(IOSIntArray_Get(a, a->size_ - 1));
  }
  else {
    s = [nf formatWithLong:IOSIntArray_Get(a, a->size_ - 1)];
  }
  (void) [b appendWithNSString:s];
  (void) [b appendWithChar:']'];
  return [b description];
}

NSString *EduStanfordNlpMathArrayMath_toStringWithByteArray_(IOSByteArray *a) {
  EduStanfordNlpMathArrayMath_initialize();
  return EduStanfordNlpMathArrayMath_toStringWithByteArray_withJavaTextNumberFormat_(a, nil);
}

NSString *EduStanfordNlpMathArrayMath_toStringWithByteArray_withJavaTextNumberFormat_(IOSByteArray *a, JavaTextNumberFormat *nf) {
  EduStanfordNlpMathArrayMath_initialize();
  if (a == nil) return nil;
  if (a->size_ == 0) return @"[]";
  JavaLangStringBuilder *b = new_JavaLangStringBuilder_init();
  (void) [b appendWithChar:'['];
  for (jint i = 0; i < a->size_ - 1; i++) {
    NSString *s;
    if (nf == nil) {
      s = NSString_valueOfInt_(IOSByteArray_Get(a, i));
    }
    else {
      s = [nf formatWithLong:IOSByteArray_Get(a, i)];
    }
    (void) [b appendWithNSString:s];
    (void) [b appendWithNSString:@", "];
  }
  NSString *s;
  if (nf == nil) {
    s = NSString_valueOfInt_(IOSByteArray_Get(a, a->size_ - 1));
  }
  else {
    s = [nf formatWithLong:IOSByteArray_Get(a, a->size_ - 1)];
  }
  (void) [b appendWithNSString:s];
  (void) [b appendWithChar:']'];
  return [b description];
}

NSString *EduStanfordNlpMathArrayMath_toStringWithIntArray2_(IOSObjectArray *counts) {
  EduStanfordNlpMathArrayMath_initialize();
  return EduStanfordNlpMathArrayMath_toStringWithIntArray2_withNSObjectArray_withNSObjectArray_withInt_withInt_withJavaTextNumberFormat_withBoolean_(counts, nil, nil, 10, 10, JavaTextNumberFormat_getInstance(), false);
}

NSString *EduStanfordNlpMathArrayMath_toStringWithIntArray2_withNSObjectArray_withNSObjectArray_withInt_withInt_withJavaTextNumberFormat_withBoolean_(IOSObjectArray *counts, IOSObjectArray *rowLabels, IOSObjectArray *colLabels, jint labelSize, jint cellSize, JavaTextNumberFormat *nf, jboolean printTotals) {
  EduStanfordNlpMathArrayMath_initialize();
  if (((IOSObjectArray *) nil_chk(counts))->size_ == 0 || ((IOSIntArray *) nil_chk(IOSObjectArray_Get(counts, 0)))->size_ == 0) return @"";
  IOSIntArray *rowTotals = [IOSIntArray newArrayWithLength:counts->size_];
  IOSIntArray *colTotals = [IOSIntArray newArrayWithLength:((IOSIntArray *) nil_chk(IOSObjectArray_Get(counts, 0)))->size_];
  jint total = 0;
  for (jint i = 0; i < counts->size_; i++) {
    for (jint j = 0; j < ((IOSIntArray *) nil_chk(IOSObjectArray_Get(counts, i)))->size_; j++) {
      *IOSIntArray_GetRef(rowTotals, i) += IOSIntArray_Get(nil_chk(IOSObjectArray_Get(counts, i)), j);
      *IOSIntArray_GetRef(colTotals, j) += IOSIntArray_Get(nil_chk(IOSObjectArray_Get(counts, i)), j);
      total += IOSIntArray_Get(nil_chk(IOSObjectArray_Get(counts, i)), j);
    }
  }
  JavaLangStringBuilder *result = new_JavaLangStringBuilder_init();
  if (colLabels != nil) {
    (void) [result appendWithNSString:EduStanfordNlpUtilStringUtils_padLeftWithNSString_withInt_(@"", labelSize)];
    for (jint j = 0; j < ((IOSIntArray *) nil_chk(IOSObjectArray_Get(counts, 0)))->size_; j++) {
      NSString *s = (IOSObjectArray_Get(colLabels, j) == nil ? @"null" : [nil_chk(IOSObjectArray_Get(colLabels, j)) description]);
      if (((jint) [s length]) > cellSize - 1) {
        s = [s substring:0 endIndex:cellSize - 1];
      }
      s = EduStanfordNlpUtilStringUtils_padLeftWithNSString_withInt_(s, cellSize);
      (void) [result appendWithNSString:s];
    }
    if (printTotals) {
      (void) [result appendWithNSString:EduStanfordNlpUtilStringUtils_padLeftOrTrimWithNSString_withInt_(@"Total", cellSize)];
    }
    (void) [result appendWithChar:0x000a];
  }
  for (jint i = 0; i < counts->size_; i++) {
    if (rowLabels != nil) {
      NSString *s = (IOSObjectArray_Get(rowLabels, i) == nil ? @"null" : [nil_chk(IOSObjectArray_Get(rowLabels, i)) description]);
      s = EduStanfordNlpUtilStringUtils_padOrTrimWithNSString_withInt_(s, labelSize);
      (void) [result appendWithNSString:s];
    }
    for (jint j = 0; j < ((IOSIntArray *) nil_chk(IOSObjectArray_Get(counts, i)))->size_; j++) {
      (void) [result appendWithNSString:EduStanfordNlpUtilStringUtils_padLeftWithNSString_withInt_([((JavaTextNumberFormat *) nil_chk(nf)) formatWithLong:IOSIntArray_Get(nil_chk(IOSObjectArray_Get(counts, i)), j)], cellSize)];
    }
    if (printTotals) {
      (void) [result appendWithNSString:EduStanfordNlpUtilStringUtils_padLeftWithNSString_withInt_([((JavaTextNumberFormat *) nil_chk(nf)) formatWithLong:IOSIntArray_Get(rowTotals, i)], cellSize)];
    }
    (void) [result appendWithChar:0x000a];
  }
  if (printTotals) {
    (void) [result appendWithNSString:EduStanfordNlpUtilStringUtils_padWithNSString_withInt_(@"Total", labelSize)];
    {
      IOSIntArray *a__ = colTotals;
      jint const *b__ = a__->buffer_;
      jint const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        jint colTotal = *b__++;
        (void) [result appendWithNSString:EduStanfordNlpUtilStringUtils_padLeftWithNSString_withInt_([((JavaTextNumberFormat *) nil_chk(nf)) formatWithLong:colTotal], cellSize)];
      }
    }
    (void) [result appendWithNSString:EduStanfordNlpUtilStringUtils_padLeftWithNSString_withInt_([((JavaTextNumberFormat *) nil_chk(nf)) formatWithLong:total], cellSize)];
  }
  return [result description];
}

NSString *EduStanfordNlpMathArrayMath_toStringWithDoubleArray2_(IOSObjectArray *counts) {
  EduStanfordNlpMathArrayMath_initialize();
  return EduStanfordNlpMathArrayMath_toStringWithDoubleArray2_withInt_withNSObjectArray_withNSObjectArray_withJavaTextNumberFormat_withBoolean_(counts, 10, nil, nil, JavaTextNumberFormat_getInstance(), false);
}

NSString *EduStanfordNlpMathArrayMath_toStringWithDoubleArray2_withInt_withNSObjectArray_withNSObjectArray_withJavaTextNumberFormat_withBoolean_(IOSObjectArray *counts, jint cellSize, IOSObjectArray *rowLabels, IOSObjectArray *colLabels, JavaTextNumberFormat *nf, jboolean printTotals) {
  EduStanfordNlpMathArrayMath_initialize();
  if (counts == nil) return nil;
  IOSDoubleArray *rowTotals = [IOSDoubleArray newArrayWithLength:counts->size_];
  IOSDoubleArray *colTotals = [IOSDoubleArray newArrayWithLength:((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(counts, 0)))->size_];
  jdouble total = 0.0;
  for (jint i = 0; i < counts->size_; i++) {
    for (jint j = 0; j < ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(counts, i)))->size_; j++) {
      JrePlusAssignDoubleD(IOSDoubleArray_GetRef(rowTotals, i), IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(counts, i)), j));
      JrePlusAssignDoubleD(IOSDoubleArray_GetRef(colTotals, j), IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(counts, i)), j));
      JrePlusAssignDoubleD(&total, IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(counts, i)), j));
    }
  }
  JavaLangStringBuilder *result = new_JavaLangStringBuilder_init();
  if (colLabels != nil) {
    (void) [result appendWithNSString:EduStanfordNlpUtilStringUtils_padLeftWithNSString_withInt_(@"", cellSize)];
    for (jint j = 0; j < ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(counts, 0)))->size_; j++) {
      NSString *s = [nil_chk(IOSObjectArray_Get(colLabels, j)) description];
      if (((jint) [((NSString *) nil_chk(s)) length]) > cellSize - 1) {
        s = [s substring:0 endIndex:cellSize - 1];
      }
      s = EduStanfordNlpUtilStringUtils_padLeftWithNSString_withInt_(s, cellSize);
      (void) [result appendWithNSString:s];
    }
    if (printTotals) {
      (void) [result appendWithNSString:EduStanfordNlpUtilStringUtils_padLeftOrTrimWithNSString_withInt_(@"Total", cellSize)];
    }
    (void) [result appendWithChar:0x000a];
  }
  for (jint i = 0; i < counts->size_; i++) {
    if (rowLabels != nil) {
      NSString *s = [nil_chk(IOSObjectArray_Get(rowLabels, i)) description];
      s = EduStanfordNlpUtilStringUtils_padOrTrimWithNSString_withInt_(s, cellSize);
      (void) [result appendWithNSString:s];
    }
    for (jint j = 0; j < ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(counts, i)))->size_; j++) {
      (void) [result appendWithNSString:EduStanfordNlpUtilStringUtils_padLeftWithNSString_withInt_([((JavaTextNumberFormat *) nil_chk(nf)) formatWithDouble:IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(counts, i)), j)], cellSize)];
    }
    if (printTotals) {
      (void) [result appendWithNSString:EduStanfordNlpUtilStringUtils_padLeftWithNSString_withInt_([((JavaTextNumberFormat *) nil_chk(nf)) formatWithDouble:IOSDoubleArray_Get(rowTotals, i)], cellSize)];
    }
    (void) [result appendWithChar:0x000a];
  }
  if (printTotals) {
    (void) [result appendWithNSString:EduStanfordNlpUtilStringUtils_padWithNSString_withInt_(@"Total", cellSize)];
    {
      IOSDoubleArray *a__ = colTotals;
      jdouble const *b__ = a__->buffer_;
      jdouble const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        jdouble colTotal = *b__++;
        (void) [result appendWithNSString:EduStanfordNlpUtilStringUtils_padLeftWithNSString_withInt_([((JavaTextNumberFormat *) nil_chk(nf)) formatWithDouble:colTotal], cellSize)];
      }
    }
    (void) [result appendWithNSString:EduStanfordNlpUtilStringUtils_padLeftWithNSString_withInt_([((JavaTextNumberFormat *) nil_chk(nf)) formatWithDouble:total], cellSize)];
  }
  return [result description];
}

NSString *EduStanfordNlpMathArrayMath_toStringWithFloatArray2_(IOSObjectArray *counts) {
  EduStanfordNlpMathArrayMath_initialize();
  return EduStanfordNlpMathArrayMath_toStringWithFloatArray2_withInt_withNSObjectArray_withNSObjectArray_withJavaTextNumberFormat_withBoolean_(counts, 10, nil, nil, JavaTextNumberFormat_getIntegerInstance(), false);
}

NSString *EduStanfordNlpMathArrayMath_toStringWithFloatArray2_withInt_withNSObjectArray_withNSObjectArray_withJavaTextNumberFormat_withBoolean_(IOSObjectArray *counts, jint cellSize, IOSObjectArray *rowLabels, IOSObjectArray *colLabels, JavaTextNumberFormat *nf, jboolean printTotals) {
  EduStanfordNlpMathArrayMath_initialize();
  IOSDoubleArray *rowTotals = [IOSDoubleArray newArrayWithLength:((IOSObjectArray *) nil_chk(counts))->size_];
  IOSDoubleArray *colTotals = [IOSDoubleArray newArrayWithLength:((IOSFloatArray *) nil_chk(IOSObjectArray_Get(counts, 0)))->size_];
  jdouble total = 0.0;
  for (jint i = 0; i < counts->size_; i++) {
    for (jint j = 0; j < ((IOSFloatArray *) nil_chk(IOSObjectArray_Get(counts, i)))->size_; j++) {
      JrePlusAssignDoubleD(IOSDoubleArray_GetRef(rowTotals, i), IOSFloatArray_Get(nil_chk(IOSObjectArray_Get(counts, i)), j));
      JrePlusAssignDoubleD(IOSDoubleArray_GetRef(colTotals, j), IOSFloatArray_Get(nil_chk(IOSObjectArray_Get(counts, i)), j));
      JrePlusAssignDoubleD(&total, IOSFloatArray_Get(nil_chk(IOSObjectArray_Get(counts, i)), j));
    }
  }
  JavaLangStringBuilder *result = new_JavaLangStringBuilder_init();
  if (colLabels != nil) {
    (void) [result appendWithNSString:EduStanfordNlpUtilStringUtils_padLeftWithNSString_withInt_(@"", cellSize)];
    for (jint j = 0; j < ((IOSFloatArray *) nil_chk(IOSObjectArray_Get(counts, 0)))->size_; j++) {
      NSString *s = [nil_chk(IOSObjectArray_Get(colLabels, j)) description];
      s = EduStanfordNlpUtilStringUtils_padLeftOrTrimWithNSString_withInt_(s, cellSize);
      (void) [result appendWithNSString:s];
    }
    if (printTotals) {
      (void) [result appendWithNSString:EduStanfordNlpUtilStringUtils_padLeftOrTrimWithNSString_withInt_(@"Total", cellSize)];
    }
    (void) [result appendWithChar:0x000a];
  }
  for (jint i = 0; i < counts->size_; i++) {
    if (rowLabels != nil) {
      NSString *s = [nil_chk(IOSObjectArray_Get(rowLabels, i)) description];
      s = EduStanfordNlpUtilStringUtils_padWithNSString_withInt_(s, cellSize);
      (void) [result appendWithNSString:s];
    }
    for (jint j = 0; j < ((IOSFloatArray *) nil_chk(IOSObjectArray_Get(counts, i)))->size_; j++) {
      (void) [result appendWithNSString:EduStanfordNlpUtilStringUtils_padLeftWithNSString_withInt_([((JavaTextNumberFormat *) nil_chk(nf)) formatWithDouble:IOSFloatArray_Get(nil_chk(IOSObjectArray_Get(counts, i)), j)], cellSize)];
    }
    if (printTotals) {
      (void) [result appendWithNSString:EduStanfordNlpUtilStringUtils_padLeftWithNSString_withInt_([((JavaTextNumberFormat *) nil_chk(nf)) formatWithDouble:IOSDoubleArray_Get(rowTotals, i)], cellSize)];
    }
    (void) [result appendWithChar:0x000a];
  }
  if (printTotals) {
    (void) [result appendWithNSString:EduStanfordNlpUtilStringUtils_padWithNSString_withInt_(@"Total", cellSize)];
    {
      IOSDoubleArray *a__ = colTotals;
      jdouble const *b__ = a__->buffer_;
      jdouble const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        jdouble colTotal = *b__++;
        (void) [result appendWithNSString:EduStanfordNlpUtilStringUtils_padLeftWithNSString_withInt_([((JavaTextNumberFormat *) nil_chk(nf)) formatWithDouble:colTotal], cellSize)];
      }
    }
    (void) [result appendWithNSString:EduStanfordNlpUtilStringUtils_padLeftWithNSString_withInt_([((JavaTextNumberFormat *) nil_chk(nf)) formatWithDouble:total], cellSize)];
  }
  return [result description];
}

void EduStanfordNlpMathArrayMath_mainWithNSStringArray_(IOSObjectArray *args) {
  EduStanfordNlpMathArrayMath_initialize();
  JavaUtilRandom *random = new_JavaUtilRandom_init();
  jint length = 100;
  IOSDoubleArray *A = [IOSDoubleArray newArrayWithLength:length];
  IOSDoubleArray *B = [IOSDoubleArray newArrayWithLength:length];
  jdouble aAvg = 70.0;
  jdouble bAvg = 70.5;
  for (jint i = 0; i < length; i++) {
    *IOSDoubleArray_GetRef(A, i) = aAvg + [random nextGaussian];
    *IOSDoubleArray_GetRef(B, i) = bAvg + [random nextGaussian];
  }
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I$D", @"A has length ", A->size_, @" and mean ", EduStanfordNlpMathArrayMath_meanWithDoubleArray_(A))];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$I$D", @"B has length ", B->size_, @" and mean ", EduStanfordNlpMathArrayMath_meanWithDoubleArray_(B))];
  for (jint t = 0; t < 10; t++) {
    [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$D", @"p-value: ", EduStanfordNlpMathArrayMath_sigLevelByApproxRandWithDoubleArray_withDoubleArray_(A, B))];
  }
}

IOSObjectArray *EduStanfordNlpMathArrayMath_deepCopyWithIntArray2_(IOSObjectArray *counts) {
  EduStanfordNlpMathArrayMath_initialize();
  IOSObjectArray *result = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(counts))->size_ type:IOSClass_intArray(1)];
  for (jint i = 0; i < counts->size_; i++) {
    (void) IOSObjectArray_SetAndConsume(result, i, [IOSIntArray newArrayWithLength:((IOSIntArray *) nil_chk(IOSObjectArray_Get(counts, i)))->size_]);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(IOSObjectArray_Get(counts, i), 0, IOSObjectArray_Get(result, i), 0, ((IOSIntArray *) nil_chk(IOSObjectArray_Get(counts, i)))->size_);
  }
  return result;
}

IOSObjectArray *EduStanfordNlpMathArrayMath_covarianceWithDoubleArray2_(IOSObjectArray *data) {
  EduStanfordNlpMathArrayMath_initialize();
  IOSDoubleArray *means = [IOSDoubleArray newArrayWithLength:((IOSObjectArray *) nil_chk(data))->size_];
  for (jint i = 0; i < means->size_; i++) {
    *IOSDoubleArray_GetRef(means, i) = EduStanfordNlpMathArrayMath_meanWithDoubleArray_(IOSObjectArray_Get(data, i));
  }
  IOSObjectArray *covariance = [IOSDoubleArray newArrayWithDimensions:2 lengths:(jint[]){ means->size_, means->size_ }];
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(data, 0)))->size_; i++) {
    for (jint j = 0; j < means->size_; j++) {
      for (jint k = 0; k < means->size_; k++) {
        JrePlusAssignDoubleD(IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(covariance, j)), k), (IOSDoubleArray_Get(means, j) - IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(data, j)), i)) * (IOSDoubleArray_Get(means, k) - IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(data, k)), i)));
      }
    }
  }
  for (jint i = 0; i < covariance->size_; i++) {
    for (jint j = 0; j < ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(covariance, i)))->size_; j++) {
      *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(covariance, i)), j) = JavaLangMath_sqrtWithDouble_(IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(covariance, i)), j)) / (((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(data, 0)))->size_);
    }
  }
  return covariance;
}

void EduStanfordNlpMathArrayMath_addMultIntoWithDoubleArray_withDoubleArray_withDoubleArray_withDouble_(IOSDoubleArray *a, IOSDoubleArray *b, IOSDoubleArray *c, jdouble d) {
  EduStanfordNlpMathArrayMath_initialize();
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(a))->size_; i++) {
    *IOSDoubleArray_GetRef(a, i) = IOSDoubleArray_Get(nil_chk(b), i) + IOSDoubleArray_Get(nil_chk(c), i) * d;
  }
}

void EduStanfordNlpMathArrayMath_multiplyIntoWithDoubleArray_withDoubleArray_withDouble_(IOSDoubleArray *a, IOSDoubleArray *b, jdouble c) {
  EduStanfordNlpMathArrayMath_initialize();
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(a))->size_; i++) {
    *IOSDoubleArray_GetRef(a, i) = IOSDoubleArray_Get(nil_chk(b), i) * c;
  }
}

jdouble EduStanfordNlpMathArrayMath_entropyWithDoubleArray_(IOSDoubleArray *probs) {
  EduStanfordNlpMathArrayMath_initialize();
  jdouble e = 0.0;
  {
    IOSDoubleArray *a__ = probs;
    jdouble const *b__ = ((IOSDoubleArray *) nil_chk(a__))->buffer_;
    jdouble const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jdouble p = *b__++;
      if (p != 0.0) JreMinusAssignDoubleD(&e, p * JavaLangMath_logWithDouble_(p));
    }
  }
  return e;
}

void EduStanfordNlpMathArrayMath_assertFiniteWithDoubleArray_withNSString_(IOSDoubleArray *vector, NSString *vectorName) {
  EduStanfordNlpMathArrayMath_initialize();
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(vector))->size_; i++) {
    if (JavaLangDouble_isNaNWithDouble_(IOSDoubleArray_Get(vector, i))) {
      @throw new_EduStanfordNlpMathArrayMath_InvalidElementException_initWithNSString_(JreStrcat("$$$I", @"NaN found in ", vectorName, @" element ", i));
    }
    else if (JavaLangDouble_isInfiniteWithDouble_(IOSDoubleArray_Get(vector, i))) {
      @throw new_EduStanfordNlpMathArrayMath_InvalidElementException_initWithNSString_(JreStrcat("$$$I", @"Infinity found in ", vectorName, @" element ", i));
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpMathArrayMath)

@implementation EduStanfordNlpMathArrayMath_InvalidElementException

- (instancetype)initWithNSString:(NSString *)s {
  EduStanfordNlpMathArrayMath_InvalidElementException_initWithNSString_(self, s);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpMathArrayMath_InvalidElementException_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "LEduStanfordNlpMathArrayMath;" };
  static const J2ObjcClassInfo _EduStanfordNlpMathArrayMath_InvalidElementException = { "InvalidElementException", "edu.stanford.nlp.math", ptrTable, methods, fields, 7, 0x9, 1, 1, 1, -1, -1, -1, -1 };
  return &_EduStanfordNlpMathArrayMath_InvalidElementException;
}

@end

void EduStanfordNlpMathArrayMath_InvalidElementException_initWithNSString_(EduStanfordNlpMathArrayMath_InvalidElementException *self, NSString *s) {
  JavaLangRuntimeException_initWithNSString_(self, s);
}

EduStanfordNlpMathArrayMath_InvalidElementException *new_EduStanfordNlpMathArrayMath_InvalidElementException_initWithNSString_(NSString *s) {
  J2OBJC_NEW_IMPL(EduStanfordNlpMathArrayMath_InvalidElementException, initWithNSString_, s)
}

EduStanfordNlpMathArrayMath_InvalidElementException *create_EduStanfordNlpMathArrayMath_InvalidElementException_initWithNSString_(NSString *s) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpMathArrayMath_InvalidElementException, initWithNSString_, s)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpMathArrayMath_InvalidElementException)
