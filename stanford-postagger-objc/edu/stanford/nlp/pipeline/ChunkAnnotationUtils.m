//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/pipeline/ChunkAnnotationUtils.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/ling/AnnotationLookup.h"
#include "edu/stanford/nlp/ling/CoreAnnotations.h"
#include "edu/stanford/nlp/ling/CoreLabel.h"
#include "edu/stanford/nlp/pipeline/Annotation.h"
#include "edu/stanford/nlp/pipeline/ChunkAnnotationUtils.h"
#include "edu/stanford/nlp/pipeline/CoreMapAttributeAggregator.h"
#include "edu/stanford/nlp/process/CoreLabelTokenFactory.h"
#include "edu/stanford/nlp/process/CoreTokenFactory.h"
#include "edu/stanford/nlp/util/CollectionUtils.h"
#include "edu/stanford/nlp/util/CoreMap.h"
#include "edu/stanford/nlp/util/IntPair.h"
#include "edu/stanford/nlp/util/Interval.h"
#include "java/lang/Character.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/lang/reflect/Method.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/logging/Logger.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"

inline JavaUtilLoggingLogger *EduStanfordNlpPipelineChunkAnnotationUtils_get_logger();
static JavaUtilLoggingLogger *EduStanfordNlpPipelineChunkAnnotationUtils_logger;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpPipelineChunkAnnotationUtils, logger, JavaUtilLoggingLogger *)

inline EduStanfordNlpProcessCoreLabelTokenFactory *EduStanfordNlpPipelineChunkAnnotationUtils_get_tokenFactory();
inline EduStanfordNlpProcessCoreLabelTokenFactory *EduStanfordNlpPipelineChunkAnnotationUtils_set_tokenFactory(EduStanfordNlpProcessCoreLabelTokenFactory *value);
static EduStanfordNlpProcessCoreLabelTokenFactory *EduStanfordNlpPipelineChunkAnnotationUtils_tokenFactory;
J2OBJC_STATIC_FIELD_OBJ(EduStanfordNlpPipelineChunkAnnotationUtils, tokenFactory, EduStanfordNlpProcessCoreLabelTokenFactory *)

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpPipelineChunkAnnotationUtils)

@implementation EduStanfordNlpPipelineChunkAnnotationUtils

+ (jboolean)checkOffsetsWithEduStanfordNlpUtilCoreMap:(id<EduStanfordNlpUtilCoreMap>)docAnnotation {
  return EduStanfordNlpPipelineChunkAnnotationUtils_checkOffsetsWithEduStanfordNlpUtilCoreMap_(docAnnotation);
}

+ (jboolean)fixTokenOffsetsWithEduStanfordNlpUtilCoreMap:(id<EduStanfordNlpUtilCoreMap>)docAnnotation {
  return EduStanfordNlpPipelineChunkAnnotationUtils_fixTokenOffsetsWithEduStanfordNlpUtilCoreMap_(docAnnotation);
}

+ (void)copyUnsetAnnotationsWithEduStanfordNlpUtilCoreMap:(id<EduStanfordNlpUtilCoreMap>)src
                            withEduStanfordNlpUtilCoreMap:(id<EduStanfordNlpUtilCoreMap>)dest {
  EduStanfordNlpPipelineChunkAnnotationUtils_copyUnsetAnnotationsWithEduStanfordNlpUtilCoreMap_withEduStanfordNlpUtilCoreMap_(src, dest);
}

+ (jboolean)fixChunkTokenBoundariesWithEduStanfordNlpUtilCoreMap:(id<EduStanfordNlpUtilCoreMap>)docAnnotation
                                                withJavaUtilList:(id<JavaUtilList>)chunkCharOffsets {
  return EduStanfordNlpPipelineChunkAnnotationUtils_fixChunkTokenBoundariesWithEduStanfordNlpUtilCoreMap_withJavaUtilList_(docAnnotation, chunkCharOffsets);
}

+ (id<EduStanfordNlpUtilCoreMap>)getMergedChunkWithJavaUtilList:(id<JavaUtilList>)chunkList
                                                   withNSString:(NSString *)origText
                                                        withInt:(jint)chunkIndexStart
                                                        withInt:(jint)chunkIndexEnd
                 withEduStanfordNlpProcessCoreLabelTokenFactory:(EduStanfordNlpProcessCoreLabelTokenFactory *)tokenFactory {
  return EduStanfordNlpPipelineChunkAnnotationUtils_getMergedChunkWithJavaUtilList_withNSString_withInt_withInt_withEduStanfordNlpProcessCoreLabelTokenFactory_(chunkList, origText, chunkIndexStart, chunkIndexEnd, tokenFactory);
}

+ (id<EduStanfordNlpUtilCoreMap>)getMergedChunkWithJavaUtilList:(id<JavaUtilList>)chunkList
                                                        withInt:(jint)chunkIndexStart
                                                        withInt:(jint)chunkIndexEnd
                                                withJavaUtilMap:(id<JavaUtilMap>)aggregators
                 withEduStanfordNlpProcessCoreLabelTokenFactory:(EduStanfordNlpProcessCoreLabelTokenFactory *)tokenFactory {
  return EduStanfordNlpPipelineChunkAnnotationUtils_getMergedChunkWithJavaUtilList_withInt_withInt_withJavaUtilMap_withEduStanfordNlpProcessCoreLabelTokenFactory_(chunkList, chunkIndexStart, chunkIndexEnd, aggregators, tokenFactory);
}

+ (EduStanfordNlpUtilInterval *)getChunkOffsetsUsingCharOffsetsWithJavaUtilList:(id<JavaUtilList>)chunkList
                                                                        withInt:(jint)charStart
                                                                        withInt:(jint)charEnd {
  return EduStanfordNlpPipelineChunkAnnotationUtils_getChunkOffsetsUsingCharOffsetsWithJavaUtilList_withInt_withInt_(chunkList, charStart, charEnd);
}

+ (void)mergeChunksWithJavaUtilList:(id<JavaUtilList>)chunkList
                       withNSString:(NSString *)origText
                            withInt:(jint)chunkIndexStart
                            withInt:(jint)chunkIndexEnd {
  EduStanfordNlpPipelineChunkAnnotationUtils_mergeChunksWithJavaUtilList_withNSString_withInt_withInt_(chunkList, origText, chunkIndexStart, chunkIndexEnd);
}

+ (JavaLangCharacter *)getFirstNonWsCharWithEduStanfordNlpUtilCoreMap:(id<EduStanfordNlpUtilCoreMap>)sent {
  return EduStanfordNlpPipelineChunkAnnotationUtils_getFirstNonWsCharWithEduStanfordNlpUtilCoreMap_(sent);
}

+ (JavaLangInteger *)getFirstNonWsCharOffsetWithEduStanfordNlpUtilCoreMap:(id<EduStanfordNlpUtilCoreMap>)sent
                                                              withBoolean:(jboolean)relative {
  return EduStanfordNlpPipelineChunkAnnotationUtils_getFirstNonWsCharOffsetWithEduStanfordNlpUtilCoreMap_withBoolean_(sent, relative);
}

+ (NSString *)getTrimmedTextWithEduStanfordNlpUtilCoreMap:(id<EduStanfordNlpUtilCoreMap>)sent {
  return EduStanfordNlpPipelineChunkAnnotationUtils_getTrimmedTextWithEduStanfordNlpUtilCoreMap_(sent);
}

+ (jboolean)fixChunkSentenceBoundariesWithEduStanfordNlpUtilCoreMap:(id<EduStanfordNlpUtilCoreMap>)docAnnotation
                                                   withJavaUtilList:(id<JavaUtilList>)chunkCharOffsets {
  return EduStanfordNlpPipelineChunkAnnotationUtils_fixChunkSentenceBoundariesWithEduStanfordNlpUtilCoreMap_withJavaUtilList_(docAnnotation, chunkCharOffsets);
}

+ (jboolean)fixChunkSentenceBoundariesWithEduStanfordNlpUtilCoreMap:(id<EduStanfordNlpUtilCoreMap>)docAnnotation
                                                   withJavaUtilList:(id<JavaUtilList>)chunkCharOffsets
                                                        withBoolean:(jboolean)offsetsAreNotSorted
                                                        withBoolean:(jboolean)extendedFixSentence
                                                        withBoolean:(jboolean)moreExtendedFixSentence {
  return EduStanfordNlpPipelineChunkAnnotationUtils_fixChunkSentenceBoundariesWithEduStanfordNlpUtilCoreMap_withJavaUtilList_withBoolean_withBoolean_withBoolean_(docAnnotation, chunkCharOffsets, offsetsAreNotSorted, extendedFixSentence, moreExtendedFixSentence);
}

+ (void)annotateChunkWithEduStanfordNlpUtilCoreMap:(id<EduStanfordNlpUtilCoreMap>)chunk
                                  withJavaUtilList:(id<JavaUtilList>)tokens
                                           withInt:(jint)tokenStartIndex
                                           withInt:(jint)tokenEndIndex
                                           withInt:(jint)totalTokenOffset {
  EduStanfordNlpPipelineChunkAnnotationUtils_annotateChunkWithEduStanfordNlpUtilCoreMap_withJavaUtilList_withInt_withInt_withInt_(chunk, tokens, tokenStartIndex, tokenEndIndex, totalTokenOffset);
}

+ (NSString *)getTokenTextWithJavaUtilList:(id<JavaUtilList>)tokens
                              withIOSClass:(IOSClass *)tokenTextKey {
  return EduStanfordNlpPipelineChunkAnnotationUtils_getTokenTextWithJavaUtilList_withIOSClass_(tokens, tokenTextKey);
}

+ (NSString *)getTokenTextWithJavaUtilList:(id<JavaUtilList>)tokens
                              withIOSClass:(IOSClass *)tokenTextKey
                              withNSString:(NSString *)delimiter {
  return EduStanfordNlpPipelineChunkAnnotationUtils_getTokenTextWithJavaUtilList_withIOSClass_withNSString_(tokens, tokenTextKey, delimiter);
}

+ (void)annotateChunkTextWithEduStanfordNlpUtilCoreMap:(id<EduStanfordNlpUtilCoreMap>)chunk
                                          withIOSClass:(IOSClass *)tokenTextKey {
  EduStanfordNlpPipelineChunkAnnotationUtils_annotateChunkTextWithEduStanfordNlpUtilCoreMap_withIOSClass_(chunk, tokenTextKey);
}

+ (jboolean)hasCharacterOffsetsWithEduStanfordNlpUtilCoreMap:(id<EduStanfordNlpUtilCoreMap>)chunk {
  return EduStanfordNlpPipelineChunkAnnotationUtils_hasCharacterOffsetsWithEduStanfordNlpUtilCoreMap_(chunk);
}

+ (jboolean)annotateChunkTextWithEduStanfordNlpUtilCoreMap:(id<EduStanfordNlpUtilCoreMap>)chunk
                             withEduStanfordNlpUtilCoreMap:(id<EduStanfordNlpUtilCoreMap>)origAnnotation {
  return EduStanfordNlpPipelineChunkAnnotationUtils_annotateChunkTextWithEduStanfordNlpUtilCoreMap_withEduStanfordNlpUtilCoreMap_(chunk, origAnnotation);
}

+ (void)annotateChunkTokensWithEduStanfordNlpUtilCoreMap:(id<EduStanfordNlpUtilCoreMap>)chunk
                                            withIOSClass:(IOSClass *)tokenChunkKey
                                            withIOSClass:(IOSClass *)tokenLabelKey {
  EduStanfordNlpPipelineChunkAnnotationUtils_annotateChunkTokensWithEduStanfordNlpUtilCoreMap_withIOSClass_withIOSClass_(chunk, tokenChunkKey, tokenLabelKey);
}

+ (EduStanfordNlpPipelineAnnotation *)getAnnotatedChunkWithJavaUtilList:(id<JavaUtilList>)tokens
                                                                withInt:(jint)tokenStartIndex
                                                                withInt:(jint)tokenEndIndex
                                                                withInt:(jint)totalTokenOffset {
  return EduStanfordNlpPipelineChunkAnnotationUtils_getAnnotatedChunkWithJavaUtilList_withInt_withInt_withInt_(tokens, tokenStartIndex, tokenEndIndex, totalTokenOffset);
}

+ (EduStanfordNlpPipelineAnnotation *)getAnnotatedChunkWithJavaUtilList:(id<JavaUtilList>)tokens
                                                                withInt:(jint)tokenStartIndex
                                                                withInt:(jint)tokenEndIndex
                                                                withInt:(jint)totalTokenOffset
                                                           withIOSClass:(IOSClass *)tokenChunkKey
                                                           withIOSClass:(IOSClass *)tokenTextKey
                                                           withIOSClass:(IOSClass *)tokenLabelKey {
  return EduStanfordNlpPipelineChunkAnnotationUtils_getAnnotatedChunkWithJavaUtilList_withInt_withInt_withInt_withIOSClass_withIOSClass_withIOSClass_(tokens, tokenStartIndex, tokenEndIndex, totalTokenOffset, tokenChunkKey, tokenTextKey, tokenLabelKey);
}

+ (EduStanfordNlpPipelineAnnotation *)getAnnotatedChunkWithEduStanfordNlpUtilCoreMap:(id<EduStanfordNlpUtilCoreMap>)annotation
                                                                             withInt:(jint)tokenStartIndex
                                                                             withInt:(jint)tokenEndIndex {
  return EduStanfordNlpPipelineChunkAnnotationUtils_getAnnotatedChunkWithEduStanfordNlpUtilCoreMap_withInt_withInt_(annotation, tokenStartIndex, tokenEndIndex);
}

+ (EduStanfordNlpPipelineAnnotation *)getAnnotatedChunkWithEduStanfordNlpUtilCoreMap:(id<EduStanfordNlpUtilCoreMap>)annotation
                                                                             withInt:(jint)tokenStartIndex
                                                                             withInt:(jint)tokenEndIndex
                                                                        withIOSClass:(IOSClass *)tokenChunkKey
                                                                        withIOSClass:(IOSClass *)tokenLabelKey {
  return EduStanfordNlpPipelineChunkAnnotationUtils_getAnnotatedChunkWithEduStanfordNlpUtilCoreMap_withInt_withInt_withIOSClass_withIOSClass_(annotation, tokenStartIndex, tokenEndIndex, tokenChunkKey, tokenLabelKey);
}

+ (id<EduStanfordNlpUtilCoreMap>)getAnnotatedChunkUsingCharOffsetsWithEduStanfordNlpUtilCoreMap:(id<EduStanfordNlpUtilCoreMap>)annotation
                                                                                        withInt:(jint)charOffsetStart
                                                                                        withInt:(jint)charOffsetEnd {
  return EduStanfordNlpPipelineChunkAnnotationUtils_getAnnotatedChunkUsingCharOffsetsWithEduStanfordNlpUtilCoreMap_withInt_withInt_(annotation, charOffsetStart, charOffsetEnd);
}

+ (id<JavaUtilList>)getAnnotatedChunksUsingSortedCharOffsetsWithEduStanfordNlpUtilCoreMap:(id<EduStanfordNlpUtilCoreMap>)annotation
                                                                         withJavaUtilList:(id<JavaUtilList>)charOffsets {
  return EduStanfordNlpPipelineChunkAnnotationUtils_getAnnotatedChunksUsingSortedCharOffsetsWithEduStanfordNlpUtilCoreMap_withJavaUtilList_(annotation, charOffsets);
}

+ (id<JavaUtilList>)getAnnotatedChunksUsingSortedCharOffsetsWithEduStanfordNlpUtilCoreMap:(id<EduStanfordNlpUtilCoreMap>)annotation
                                                                         withJavaUtilList:(id<JavaUtilList>)charOffsets
                                                                              withBoolean:(jboolean)charOffsetIsRelative
                                                                             withIOSClass:(IOSClass *)tokenChunkKey
                                                                             withIOSClass:(IOSClass *)tokenLabelKey
                                                                              withBoolean:(jboolean)allowPartialTokens {
  return EduStanfordNlpPipelineChunkAnnotationUtils_getAnnotatedChunksUsingSortedCharOffsetsWithEduStanfordNlpUtilCoreMap_withJavaUtilList_withBoolean_withIOSClass_withIOSClass_withBoolean_(annotation, charOffsets, charOffsetIsRelative, tokenChunkKey, tokenLabelKey, allowPartialTokens);
}

+ (void)annotateChunkWithEduStanfordNlpUtilCoreMap:(id<EduStanfordNlpUtilCoreMap>)annotation
                                      withIOSClass:(IOSClass *)newAnnotationKey
                                      withIOSClass:(IOSClass *)aggrKey
withEduStanfordNlpPipelineCoreMapAttributeAggregator:(EduStanfordNlpPipelineCoreMapAttributeAggregator *)aggregator {
  EduStanfordNlpPipelineChunkAnnotationUtils_annotateChunkWithEduStanfordNlpUtilCoreMap_withIOSClass_withIOSClass_withEduStanfordNlpPipelineCoreMapAttributeAggregator_(annotation, newAnnotationKey, aggrKey, aggregator);
}

+ (void)annotateChunkWithEduStanfordNlpUtilCoreMap:(id<EduStanfordNlpUtilCoreMap>)chunk
                                   withJavaUtilMap:(id<JavaUtilMap>)attributes {
  EduStanfordNlpPipelineChunkAnnotationUtils_annotateChunkWithEduStanfordNlpUtilCoreMap_withJavaUtilMap_(chunk, attributes);
}

+ (void)annotateChunksWithJavaUtilList:(id<JavaUtilList>)chunks
                               withInt:(jint)start
                               withInt:(jint)end
                       withJavaUtilMap:(id<JavaUtilMap>)attributes {
  EduStanfordNlpPipelineChunkAnnotationUtils_annotateChunksWithJavaUtilList_withInt_withInt_withJavaUtilMap_(chunks, start, end, attributes);
}

+ (void)annotateChunksWithJavaUtilList:(id<JavaUtilList>)chunks
                       withJavaUtilMap:(id<JavaUtilMap>)attributes {
  EduStanfordNlpPipelineChunkAnnotationUtils_annotateChunksWithJavaUtilList_withJavaUtilMap_(chunks, attributes);
}

+ (id<EduStanfordNlpUtilCoreMap>)createCoreMapWithEduStanfordNlpUtilCoreMap:(id<EduStanfordNlpUtilCoreMap>)cm
                                                               withNSString:(NSString *)text
                                                                    withInt:(jint)start
                                                                    withInt:(jint)end
                                  withEduStanfordNlpProcessCoreTokenFactory:(id<EduStanfordNlpProcessCoreTokenFactory>)factory {
  return EduStanfordNlpPipelineChunkAnnotationUtils_createCoreMapWithEduStanfordNlpUtilCoreMap_withNSString_withInt_withInt_withEduStanfordNlpProcessCoreTokenFactory_(cm, text, start, end, factory);
}

+ (void)appendCoreMapWithJavaUtilList:(id<JavaUtilList>)res
        withEduStanfordNlpUtilCoreMap:(id<EduStanfordNlpUtilCoreMap>)cm
                         withNSString:(NSString *)text
                              withInt:(jint)start
                              withInt:(jint)end
withEduStanfordNlpProcessCoreTokenFactory:(id<EduStanfordNlpProcessCoreTokenFactory>)factory {
  EduStanfordNlpPipelineChunkAnnotationUtils_appendCoreMapWithJavaUtilList_withEduStanfordNlpUtilCoreMap_withNSString_withInt_withInt_withEduStanfordNlpProcessCoreTokenFactory_(res, cm, text, start, end, factory);
}

+ (id<JavaUtilList>)splitCoreMapWithJavaUtilRegexPattern:(JavaUtilRegexPattern *)p
                                             withBoolean:(jboolean)includeMatched
                           withEduStanfordNlpUtilCoreMap:(id<EduStanfordNlpUtilCoreMap>)cm
               withEduStanfordNlpProcessCoreTokenFactory:(id<EduStanfordNlpProcessCoreTokenFactory>)factory {
  return EduStanfordNlpPipelineChunkAnnotationUtils_splitCoreMapWithJavaUtilRegexPattern_withBoolean_withEduStanfordNlpUtilCoreMap_withEduStanfordNlpProcessCoreTokenFactory_(p, includeMatched, cm, factory);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpPipelineChunkAnnotationUtils_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 2, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 3, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 5, 6, -1, 7, -1, -1 },
    { NULL, "LEduStanfordNlpUtilCoreMap;", 0x9, 8, 9, -1, 10, -1, -1 },
    { NULL, "LEduStanfordNlpUtilCoreMap;", 0x9, 8, 11, -1, 12, -1, -1 },
    { NULL, "LEduStanfordNlpUtilInterval;", 0x9, 13, 14, -1, 15, -1, -1 },
    { NULL, "V", 0x9, 16, 17, -1, 18, -1, -1 },
    { NULL, "LJavaLangCharacter;", 0x9, 19, 1, -1, -1, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x9, 20, 21, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 22, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 23, 6, -1, 7, -1, -1 },
    { NULL, "Z", 0x9, 23, 24, -1, 25, -1, -1 },
    { NULL, "V", 0x9, 26, 27, -1, 28, -1, -1 },
    { NULL, "LNSString;", 0x9, 29, 30, -1, 31, -1, -1 },
    { NULL, "LNSString;", 0x9, 29, 32, -1, 33, -1, -1 },
    { NULL, "V", 0x9, 34, 35, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 36, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 34, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 37, 38, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpPipelineAnnotation;", 0x9, 39, 40, -1, 41, -1, -1 },
    { NULL, "LEduStanfordNlpPipelineAnnotation;", 0x9, 39, 42, -1, 43, -1, -1 },
    { NULL, "LEduStanfordNlpPipelineAnnotation;", 0x9, 39, 44, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpPipelineAnnotation;", 0x9, 39, 45, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpUtilCoreMap;", 0x9, 46, 44, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 47, 6, -1, 48, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 47, 49, -1, 50, -1, -1 },
    { NULL, "V", 0x9, 26, 51, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 26, 52, -1, 53, -1, -1 },
    { NULL, "V", 0x9, 54, 55, -1, 56, -1, -1 },
    { NULL, "V", 0x9, 54, 57, -1, 58, -1, -1 },
    { NULL, "LEduStanfordNlpUtilCoreMap;", 0x9, 59, 60, -1, 61, -1, -1 },
    { NULL, "V", 0x9, 62, 63, -1, 64, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 65, 66, -1, 67, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(checkOffsetsWithEduStanfordNlpUtilCoreMap:);
  methods[1].selector = @selector(fixTokenOffsetsWithEduStanfordNlpUtilCoreMap:);
  methods[2].selector = @selector(copyUnsetAnnotationsWithEduStanfordNlpUtilCoreMap:withEduStanfordNlpUtilCoreMap:);
  methods[3].selector = @selector(fixChunkTokenBoundariesWithEduStanfordNlpUtilCoreMap:withJavaUtilList:);
  methods[4].selector = @selector(getMergedChunkWithJavaUtilList:withNSString:withInt:withInt:withEduStanfordNlpProcessCoreLabelTokenFactory:);
  methods[5].selector = @selector(getMergedChunkWithJavaUtilList:withInt:withInt:withJavaUtilMap:withEduStanfordNlpProcessCoreLabelTokenFactory:);
  methods[6].selector = @selector(getChunkOffsetsUsingCharOffsetsWithJavaUtilList:withInt:withInt:);
  methods[7].selector = @selector(mergeChunksWithJavaUtilList:withNSString:withInt:withInt:);
  methods[8].selector = @selector(getFirstNonWsCharWithEduStanfordNlpUtilCoreMap:);
  methods[9].selector = @selector(getFirstNonWsCharOffsetWithEduStanfordNlpUtilCoreMap:withBoolean:);
  methods[10].selector = @selector(getTrimmedTextWithEduStanfordNlpUtilCoreMap:);
  methods[11].selector = @selector(fixChunkSentenceBoundariesWithEduStanfordNlpUtilCoreMap:withJavaUtilList:);
  methods[12].selector = @selector(fixChunkSentenceBoundariesWithEduStanfordNlpUtilCoreMap:withJavaUtilList:withBoolean:withBoolean:withBoolean:);
  methods[13].selector = @selector(annotateChunkWithEduStanfordNlpUtilCoreMap:withJavaUtilList:withInt:withInt:withInt:);
  methods[14].selector = @selector(getTokenTextWithJavaUtilList:withIOSClass:);
  methods[15].selector = @selector(getTokenTextWithJavaUtilList:withIOSClass:withNSString:);
  methods[16].selector = @selector(annotateChunkTextWithEduStanfordNlpUtilCoreMap:withIOSClass:);
  methods[17].selector = @selector(hasCharacterOffsetsWithEduStanfordNlpUtilCoreMap:);
  methods[18].selector = @selector(annotateChunkTextWithEduStanfordNlpUtilCoreMap:withEduStanfordNlpUtilCoreMap:);
  methods[19].selector = @selector(annotateChunkTokensWithEduStanfordNlpUtilCoreMap:withIOSClass:withIOSClass:);
  methods[20].selector = @selector(getAnnotatedChunkWithJavaUtilList:withInt:withInt:withInt:);
  methods[21].selector = @selector(getAnnotatedChunkWithJavaUtilList:withInt:withInt:withInt:withIOSClass:withIOSClass:withIOSClass:);
  methods[22].selector = @selector(getAnnotatedChunkWithEduStanfordNlpUtilCoreMap:withInt:withInt:);
  methods[23].selector = @selector(getAnnotatedChunkWithEduStanfordNlpUtilCoreMap:withInt:withInt:withIOSClass:withIOSClass:);
  methods[24].selector = @selector(getAnnotatedChunkUsingCharOffsetsWithEduStanfordNlpUtilCoreMap:withInt:withInt:);
  methods[25].selector = @selector(getAnnotatedChunksUsingSortedCharOffsetsWithEduStanfordNlpUtilCoreMap:withJavaUtilList:);
  methods[26].selector = @selector(getAnnotatedChunksUsingSortedCharOffsetsWithEduStanfordNlpUtilCoreMap:withJavaUtilList:withBoolean:withIOSClass:withIOSClass:withBoolean:);
  methods[27].selector = @selector(annotateChunkWithEduStanfordNlpUtilCoreMap:withIOSClass:withIOSClass:withEduStanfordNlpPipelineCoreMapAttributeAggregator:);
  methods[28].selector = @selector(annotateChunkWithEduStanfordNlpUtilCoreMap:withJavaUtilMap:);
  methods[29].selector = @selector(annotateChunksWithJavaUtilList:withInt:withInt:withJavaUtilMap:);
  methods[30].selector = @selector(annotateChunksWithJavaUtilList:withJavaUtilMap:);
  methods[31].selector = @selector(createCoreMapWithEduStanfordNlpUtilCoreMap:withNSString:withInt:withInt:withEduStanfordNlpProcessCoreTokenFactory:);
  methods[32].selector = @selector(appendCoreMapWithJavaUtilList:withEduStanfordNlpUtilCoreMap:withNSString:withInt:withInt:withEduStanfordNlpProcessCoreTokenFactory:);
  methods[33].selector = @selector(splitCoreMapWithJavaUtilRegexPattern:withBoolean:withEduStanfordNlpUtilCoreMap:withEduStanfordNlpProcessCoreTokenFactory:);
  methods[34].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "logger", "LJavaUtilLoggingLogger;", .constantValue.asLong = 0, 0x1a, -1, 68, -1, -1 },
    { "tokenFactory", "LEduStanfordNlpProcessCoreLabelTokenFactory;", .constantValue.asLong = 0, 0xa, -1, 69, -1, -1 },
  };
  static const void *ptrTable[] = { "checkOffsets", "LEduStanfordNlpUtilCoreMap;", "fixTokenOffsets", "copyUnsetAnnotations", "LEduStanfordNlpUtilCoreMap;LEduStanfordNlpUtilCoreMap;", "fixChunkTokenBoundaries", "LEduStanfordNlpUtilCoreMap;LJavaUtilList;", "(Ledu/stanford/nlp/util/CoreMap;Ljava/util/List<Ledu/stanford/nlp/util/IntPair;>;)Z", "getMergedChunk", "LJavaUtilList;LNSString;IILEduStanfordNlpProcessCoreLabelTokenFactory;", "(Ljava/util/List<+Ledu/stanford/nlp/util/CoreMap;>;Ljava/lang/String;IILedu/stanford/nlp/process/CoreLabelTokenFactory;)Ledu/stanford/nlp/util/CoreMap;", "LJavaUtilList;IILJavaUtilMap;LEduStanfordNlpProcessCoreLabelTokenFactory;", "(Ljava/util/List<+Ledu/stanford/nlp/util/CoreMap;>;IILjava/util/Map<Ljava/lang/Class;Ledu/stanford/nlp/pipeline/CoreMapAttributeAggregator;>;Ledu/stanford/nlp/process/CoreLabelTokenFactory;)Ledu/stanford/nlp/util/CoreMap;", "getChunkOffsetsUsingCharOffsets", "LJavaUtilList;II", "(Ljava/util/List<+Ledu/stanford/nlp/util/CoreMap;>;II)Ledu/stanford/nlp/util/Interval<Ljava/lang/Integer;>;", "mergeChunks", "LJavaUtilList;LNSString;II", "(Ljava/util/List<Ledu/stanford/nlp/util/CoreMap;>;Ljava/lang/String;II)V", "getFirstNonWsChar", "getFirstNonWsCharOffset", "LEduStanfordNlpUtilCoreMap;Z", "getTrimmedText", "fixChunkSentenceBoundaries", "LEduStanfordNlpUtilCoreMap;LJavaUtilList;ZZZ", "(Ledu/stanford/nlp/util/CoreMap;Ljava/util/List<Ledu/stanford/nlp/util/IntPair;>;ZZZ)Z", "annotateChunk", "LEduStanfordNlpUtilCoreMap;LJavaUtilList;III", "(Ledu/stanford/nlp/util/CoreMap;Ljava/util/List<Ledu/stanford/nlp/ling/CoreLabel;>;III)V", "getTokenText", "LJavaUtilList;LIOSClass;", "(Ljava/util/List<+Ledu/stanford/nlp/util/CoreMap;>;Ljava/lang/Class;)Ljava/lang/String;", "LJavaUtilList;LIOSClass;LNSString;", "(Ljava/util/List<+Ledu/stanford/nlp/util/CoreMap;>;Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/String;", "annotateChunkText", "LEduStanfordNlpUtilCoreMap;LIOSClass;", "hasCharacterOffsets", "annotateChunkTokens", "LEduStanfordNlpUtilCoreMap;LIOSClass;LIOSClass;", "getAnnotatedChunk", "LJavaUtilList;III", "(Ljava/util/List<Ledu/stanford/nlp/ling/CoreLabel;>;III)Ledu/stanford/nlp/pipeline/Annotation;", "LJavaUtilList;IIILIOSClass;LIOSClass;LIOSClass;", "(Ljava/util/List<Ledu/stanford/nlp/ling/CoreLabel;>;IIILjava/lang/Class;Ljava/lang/Class;Ljava/lang/Class;)Ledu/stanford/nlp/pipeline/Annotation;", "LEduStanfordNlpUtilCoreMap;II", "LEduStanfordNlpUtilCoreMap;IILIOSClass;LIOSClass;", "getAnnotatedChunkUsingCharOffsets", "getAnnotatedChunksUsingSortedCharOffsets", "(Ledu/stanford/nlp/util/CoreMap;Ljava/util/List<Ledu/stanford/nlp/util/IntPair;>;)Ljava/util/List<Ledu/stanford/nlp/util/CoreMap;>;", "LEduStanfordNlpUtilCoreMap;LJavaUtilList;ZLIOSClass;LIOSClass;Z", "(Ledu/stanford/nlp/util/CoreMap;Ljava/util/List<Ledu/stanford/nlp/util/IntPair;>;ZLjava/lang/Class;Ljava/lang/Class;Z)Ljava/util/List<Ledu/stanford/nlp/util/CoreMap;>;", "LEduStanfordNlpUtilCoreMap;LIOSClass;LIOSClass;LEduStanfordNlpPipelineCoreMapAttributeAggregator;", "LEduStanfordNlpUtilCoreMap;LJavaUtilMap;", "(Ledu/stanford/nlp/util/CoreMap;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)V", "annotateChunks", "LJavaUtilList;IILJavaUtilMap;", "(Ljava/util/List<+Ledu/stanford/nlp/util/CoreMap;>;IILjava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)V", "LJavaUtilList;LJavaUtilMap;", "(Ljava/util/List<+Ledu/stanford/nlp/util/CoreMap;>;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)V", "createCoreMap", "LEduStanfordNlpUtilCoreMap;LNSString;IILEduStanfordNlpProcessCoreTokenFactory;", "<T::Ledu/stanford/nlp/util/CoreMap;>(Ledu/stanford/nlp/util/CoreMap;Ljava/lang/String;IILedu/stanford/nlp/process/CoreTokenFactory<TT;>;)TT;", "appendCoreMap", "LJavaUtilList;LEduStanfordNlpUtilCoreMap;LNSString;IILEduStanfordNlpProcessCoreTokenFactory;", "<T::Ledu/stanford/nlp/util/CoreMap;>(Ljava/util/List<TT;>;Ledu/stanford/nlp/util/CoreMap;Ljava/lang/String;IILedu/stanford/nlp/process/CoreTokenFactory<TT;>;)V", "splitCoreMap", "LJavaUtilRegexPattern;ZLEduStanfordNlpUtilCoreMap;LEduStanfordNlpProcessCoreTokenFactory;", "<T::Ledu/stanford/nlp/util/CoreMap;>(Ljava/util/regex/Pattern;ZLedu/stanford/nlp/util/CoreMap;Ledu/stanford/nlp/process/CoreTokenFactory<TT;>;)Ljava/util/List<TT;>;", &EduStanfordNlpPipelineChunkAnnotationUtils_logger, &EduStanfordNlpPipelineChunkAnnotationUtils_tokenFactory };
  static const J2ObjcClassInfo _EduStanfordNlpPipelineChunkAnnotationUtils = { "ChunkAnnotationUtils", "edu.stanford.nlp.pipeline", ptrTable, methods, fields, 7, 0x1, 35, 2, -1, -1, -1, -1, -1 };
  return &_EduStanfordNlpPipelineChunkAnnotationUtils;
}

+ (void)initialize {
  if (self == [EduStanfordNlpPipelineChunkAnnotationUtils class]) {
    EduStanfordNlpPipelineChunkAnnotationUtils_logger = JavaUtilLoggingLogger_getLoggerWithNSString_([EduStanfordNlpPipelineChunkAnnotationUtils_class_() getName]);
    EduStanfordNlpPipelineChunkAnnotationUtils_tokenFactory = new_EduStanfordNlpProcessCoreLabelTokenFactory_initWithBoolean_(true);
    J2OBJC_SET_INITIALIZED(EduStanfordNlpPipelineChunkAnnotationUtils)
  }
}

@end

jboolean EduStanfordNlpPipelineChunkAnnotationUtils_checkOffsetsWithEduStanfordNlpUtilCoreMap_(id<EduStanfordNlpUtilCoreMap> docAnnotation) {
  EduStanfordNlpPipelineChunkAnnotationUtils_initialize();
  jboolean okay = true;
  NSString *docText = [((id<EduStanfordNlpUtilCoreMap>) nil_chk(docAnnotation)) getWithIOSClass:EduStanfordNlpLingCoreAnnotations_TextAnnotation_class_()];
  NSString *docId = [docAnnotation getWithIOSClass:EduStanfordNlpLingCoreAnnotations_DocIDAnnotation_class_()];
  id<JavaUtilList> docTokens = [docAnnotation getWithIOSClass:EduStanfordNlpLingCoreAnnotations_TokensAnnotation_class_()];
  id<JavaUtilList> sentences = [docAnnotation getWithIOSClass:EduStanfordNlpLingCoreAnnotations_SentencesAnnotation_class_()];
  for (id<EduStanfordNlpUtilCoreMap> __strong sentence in nil_chk(sentences)) {
    NSString *sentText = [((id<EduStanfordNlpUtilCoreMap>) nil_chk(sentence)) getWithIOSClass:EduStanfordNlpLingCoreAnnotations_TextAnnotation_class_()];
    id<JavaUtilList> sentTokens = [sentence getWithIOSClass:EduStanfordNlpLingCoreAnnotations_TokensAnnotation_class_()];
    jint sentBeginChar = [((JavaLangInteger *) nil_chk([sentence getWithIOSClass:EduStanfordNlpLingCoreAnnotations_CharacterOffsetBeginAnnotation_class_()])) intValue];
    jint sentEndChar = [((JavaLangInteger *) nil_chk([sentence getWithIOSClass:EduStanfordNlpLingCoreAnnotations_CharacterOffsetEndAnnotation_class_()])) intValue];
    jint sentBeginToken = [((JavaLangInteger *) nil_chk([sentence getWithIOSClass:EduStanfordNlpLingCoreAnnotations_TokenBeginAnnotation_class_()])) intValue];
    jint sentEndToken = [((JavaLangInteger *) nil_chk([sentence getWithIOSClass:EduStanfordNlpLingCoreAnnotations_TokenEndAnnotation_class_()])) intValue];
    NSString *docTextSpan = [((NSString *) nil_chk(docText)) substring:sentBeginChar endIndex:sentEndChar];
    id<JavaUtilList> docTokenSpan = new_JavaUtilArrayList_initWithJavaUtilCollection_([((id<JavaUtilList>) nil_chk(docTokens)) subListWithInt:sentBeginToken withInt:sentEndToken]);
    [((JavaUtilLoggingLogger *) nil_chk(EduStanfordNlpPipelineChunkAnnotationUtils_logger)) finerWithNSString:JreStrcat("$$$ICI$", @"Checking Document ", docId, @" span (", sentBeginChar, ',', sentEndChar, @") ")];
    if (![((NSString *) nil_chk(docTextSpan)) isEqual:sentText]) {
      okay = false;
      [EduStanfordNlpPipelineChunkAnnotationUtils_logger finerWithNSString:JreStrcat("$$$", @"WARNING: Document ", docId, @" span does not match sentence")];
      [EduStanfordNlpPipelineChunkAnnotationUtils_logger finerWithNSString:JreStrcat("$$", @"DocSpanText: ", docTextSpan)];
      [EduStanfordNlpPipelineChunkAnnotationUtils_logger finerWithNSString:JreStrcat("$$", @"SentenceText: ", sentText)];
    }
    NSString *sentTokenStr = EduStanfordNlpPipelineChunkAnnotationUtils_getTokenTextWithJavaUtilList_withIOSClass_(sentTokens, EduStanfordNlpLingCoreAnnotations_TextAnnotation_class_());
    NSString *docTokenStr = EduStanfordNlpPipelineChunkAnnotationUtils_getTokenTextWithJavaUtilList_withIOSClass_(docTokenSpan, EduStanfordNlpLingCoreAnnotations_TextAnnotation_class_());
    if (![((NSString *) nil_chk(docTokenStr)) isEqual:sentTokenStr]) {
      okay = false;
      [EduStanfordNlpPipelineChunkAnnotationUtils_logger finerWithNSString:JreStrcat("$$$", @"WARNING: Document ", docId, @" tokens does not match sentence")];
      [EduStanfordNlpPipelineChunkAnnotationUtils_logger finerWithNSString:JreStrcat("$$", @"DocSpanTokens: ", docTokenStr)];
      [EduStanfordNlpPipelineChunkAnnotationUtils_logger finerWithNSString:JreStrcat("$$", @"SentenceTokens: ", sentTokenStr)];
    }
  }
  return okay;
}

jboolean EduStanfordNlpPipelineChunkAnnotationUtils_fixTokenOffsetsWithEduStanfordNlpUtilCoreMap_(id<EduStanfordNlpUtilCoreMap> docAnnotation) {
  EduStanfordNlpPipelineChunkAnnotationUtils_initialize();
  id<JavaUtilList> docTokens = [((id<EduStanfordNlpUtilCoreMap>) nil_chk(docAnnotation)) getWithIOSClass:EduStanfordNlpLingCoreAnnotations_TokensAnnotation_class_()];
  id<JavaUtilList> sentences = [docAnnotation getWithIOSClass:EduStanfordNlpLingCoreAnnotations_SentencesAnnotation_class_()];
  jint i = 0;
  EduStanfordNlpLingCoreLabel *curDocToken = [((id<JavaUtilList>) nil_chk(docTokens)) getWithInt:0];
  for (id<EduStanfordNlpUtilCoreMap> __strong sentence in nil_chk(sentences)) {
    id<JavaUtilList> sentTokens = [((id<EduStanfordNlpUtilCoreMap>) nil_chk(sentence)) getWithIOSClass:EduStanfordNlpLingCoreAnnotations_TokensAnnotation_class_()];
    EduStanfordNlpLingCoreLabel *sentTokenFirst = [((id<JavaUtilList>) nil_chk(sentTokens)) getWithInt:0];
    while (curDocToken != sentTokenFirst) {
      i++;
      if (i >= [docTokens size]) {
        return false;
      }
      curDocToken = [docTokens getWithInt:i];
    }
    jint sentTokenBegin = i;
    EduStanfordNlpLingCoreLabel *sentTokenLast = [sentTokens getWithInt:[sentTokens size] - 1];
    while (curDocToken != sentTokenLast) {
      i++;
      if (i >= [docTokens size]) {
        return false;
      }
      curDocToken = [docTokens getWithInt:i];
    }
    jint sentTokenEnd = i + 1;
    (void) [sentence setWithIOSClass:EduStanfordNlpLingCoreAnnotations_TokenBeginAnnotation_class_() withId:JavaLangInteger_valueOfWithInt_(sentTokenBegin)];
    (void) [sentence setWithIOSClass:EduStanfordNlpLingCoreAnnotations_TokenEndAnnotation_class_() withId:JavaLangInteger_valueOfWithInt_(sentTokenEnd)];
  }
  return true;
}

void EduStanfordNlpPipelineChunkAnnotationUtils_copyUnsetAnnotationsWithEduStanfordNlpUtilCoreMap_withEduStanfordNlpUtilCoreMap_(id<EduStanfordNlpUtilCoreMap> src, id<EduStanfordNlpUtilCoreMap> dest) {
  EduStanfordNlpPipelineChunkAnnotationUtils_initialize();
  for (IOSClass * __strong key in nil_chk([((id<EduStanfordNlpUtilCoreMap>) nil_chk(src)) keySet])) {
    if (![((id<EduStanfordNlpUtilCoreMap>) nil_chk(dest)) hasWithIOSClass:key]) {
      (void) [dest setWithIOSClass:key withId:[src getWithIOSClass:key]];
    }
  }
}

jboolean EduStanfordNlpPipelineChunkAnnotationUtils_fixChunkTokenBoundariesWithEduStanfordNlpUtilCoreMap_withJavaUtilList_(id<EduStanfordNlpUtilCoreMap> docAnnotation, id<JavaUtilList> chunkCharOffsets) {
  EduStanfordNlpPipelineChunkAnnotationUtils_initialize();
  NSString *text = [((id<EduStanfordNlpUtilCoreMap>) nil_chk(docAnnotation)) getWithIOSClass:EduStanfordNlpLingCoreAnnotations_TextAnnotation_class_()];
  id<JavaUtilList> tokens = [docAnnotation getWithIOSClass:EduStanfordNlpLingCoreAnnotations_TokensAnnotation_class_()];
  id<JavaUtilList> output = new_JavaUtilArrayList_initWithInt_([((id<JavaUtilList>) nil_chk(tokens)) size]);
  jint i = 0;
  EduStanfordNlpLingCoreLabel *token = [tokens getWithInt:i];
  for (EduStanfordNlpUtilIntPair * __strong offsets in nil_chk(chunkCharOffsets)) {
    JreAssert((([((EduStanfordNlpLingCoreLabel *) nil_chk(token)) beginPosition] >= 0)), (@"edu/stanford/nlp/pipeline/ChunkAnnotationUtils.java:129 condition failed: assert(token.beginPosition() >= 0);"));
    JreAssert((([token endPosition] >= 0)), (@"edu/stanford/nlp/pipeline/ChunkAnnotationUtils.java:130 condition failed: assert(token.endPosition() >= 0);"));
    jint offsetBegin = [((EduStanfordNlpUtilIntPair *) nil_chk(offsets)) getSource];
    jint offsetEnd = [offsets getTarget];
    while (offsetBegin < [((JavaLangInteger *) nil_chk([((EduStanfordNlpLingCoreLabel *) nil_chk(token)) getWithIOSClass:EduStanfordNlpLingCoreAnnotations_CharacterOffsetBeginAnnotation_class_()])) intValue] || offsetBegin >= [((JavaLangInteger *) nil_chk([token getWithIOSClass:EduStanfordNlpLingCoreAnnotations_CharacterOffsetEndAnnotation_class_()])) intValue]) {
      [output addWithId:token];
      i++;
      if (i >= [tokens size]) {
        return false;
      }
      token = [tokens getWithInt:i];
    }
    while (offsetEnd > [((JavaLangInteger *) nil_chk([((EduStanfordNlpLingCoreLabel *) nil_chk(token)) getWithIOSClass:EduStanfordNlpLingCoreAnnotations_CharacterOffsetBeginAnnotation_class_()])) intValue]) {
      if (offsetBegin > [((JavaLangInteger *) nil_chk([token getWithIOSClass:EduStanfordNlpLingCoreAnnotations_CharacterOffsetBeginAnnotation_class_()])) intValue]) {
        if (offsetEnd < [((JavaLangInteger *) nil_chk([token getWithIOSClass:EduStanfordNlpLingCoreAnnotations_CharacterOffsetEndAnnotation_class_()])) intValue]) {
          [output addWithId:[((EduStanfordNlpProcessCoreLabelTokenFactory *) nil_chk(EduStanfordNlpPipelineChunkAnnotationUtils_tokenFactory)) makeTokenWithNSString:[((NSString *) nil_chk(text)) substring:[token beginPosition] endIndex:offsetBegin] withInt:[token beginPosition] withInt:offsetBegin - [token beginPosition]]];
          [output addWithId:[((EduStanfordNlpProcessCoreLabelTokenFactory *) nil_chk(EduStanfordNlpPipelineChunkAnnotationUtils_tokenFactory)) makeTokenWithNSString:[text substring:offsetBegin endIndex:offsetEnd] withInt:offsetBegin withInt:offsetEnd - offsetBegin]];
          [output addWithId:[((EduStanfordNlpProcessCoreLabelTokenFactory *) nil_chk(EduStanfordNlpPipelineChunkAnnotationUtils_tokenFactory)) makeTokenWithNSString:[text substring:offsetEnd endIndex:[token endPosition]] withInt:offsetEnd withInt:[token endPosition] - offsetEnd]];
        }
        else {
          [output addWithId:[((EduStanfordNlpProcessCoreLabelTokenFactory *) nil_chk(EduStanfordNlpPipelineChunkAnnotationUtils_tokenFactory)) makeTokenWithNSString:[((NSString *) nil_chk(text)) substring:[token beginPosition] endIndex:offsetBegin] withInt:[token beginPosition] withInt:offsetBegin - [token beginPosition]]];
          [output addWithId:[((EduStanfordNlpProcessCoreLabelTokenFactory *) nil_chk(EduStanfordNlpPipelineChunkAnnotationUtils_tokenFactory)) makeTokenWithNSString:[text substring:offsetBegin endIndex:[token endPosition]] withInt:offsetBegin withInt:[token endPosition] - offsetBegin]];
        }
      }
      else if (offsetEnd < [((JavaLangInteger *) nil_chk([token getWithIOSClass:EduStanfordNlpLingCoreAnnotations_CharacterOffsetEndAnnotation_class_()])) intValue]) {
        [output addWithId:[((EduStanfordNlpProcessCoreLabelTokenFactory *) nil_chk(EduStanfordNlpPipelineChunkAnnotationUtils_tokenFactory)) makeTokenWithNSString:[((NSString *) nil_chk(text)) substring:[token beginPosition] endIndex:offsetEnd] withInt:[token beginPosition] withInt:offsetEnd - [token beginPosition]]];
        [output addWithId:[((EduStanfordNlpProcessCoreLabelTokenFactory *) nil_chk(EduStanfordNlpPipelineChunkAnnotationUtils_tokenFactory)) makeTokenWithNSString:[text substring:offsetEnd endIndex:[token endPosition]] withInt:offsetEnd withInt:[token endPosition] - offsetEnd]];
      }
      else {
        [output addWithId:token];
      }
      i++;
      if (i >= [tokens size]) {
        return false;
      }
      token = [tokens getWithInt:i];
    }
  }
  for (; i < [tokens size]; i++) {
    token = [tokens getWithInt:i];
    [output addWithId:token];
  }
  (void) [docAnnotation setWithIOSClass:EduStanfordNlpLingCoreAnnotations_TokensAnnotation_class_() withId:output];
  return true;
}

id<EduStanfordNlpUtilCoreMap> EduStanfordNlpPipelineChunkAnnotationUtils_getMergedChunkWithJavaUtilList_withNSString_withInt_withInt_withEduStanfordNlpProcessCoreLabelTokenFactory_(id<JavaUtilList> chunkList, NSString *origText, jint chunkIndexStart, jint chunkIndexEnd, EduStanfordNlpProcessCoreLabelTokenFactory *tokenFactory) {
  EduStanfordNlpPipelineChunkAnnotationUtils_initialize();
  id<EduStanfordNlpUtilCoreMap> firstChunk = [((id<JavaUtilList>) nil_chk(chunkList)) getWithInt:chunkIndexStart];
  id<EduStanfordNlpUtilCoreMap> lastChunk = [chunkList getWithInt:chunkIndexEnd - 1];
  jint firstCharOffset = [((JavaLangInteger *) nil_chk([((id<EduStanfordNlpUtilCoreMap>) nil_chk(firstChunk)) getWithIOSClass:EduStanfordNlpLingCoreAnnotations_CharacterOffsetBeginAnnotation_class_()])) intValue];
  jint lastCharOffset = [((JavaLangInteger *) nil_chk([((id<EduStanfordNlpUtilCoreMap>) nil_chk(lastChunk)) getWithIOSClass:EduStanfordNlpLingCoreAnnotations_CharacterOffsetEndAnnotation_class_()])) intValue];
  jint firstTokenIndex = [((JavaLangInteger *) nil_chk([firstChunk getWithIOSClass:EduStanfordNlpLingCoreAnnotations_TokenBeginAnnotation_class_()])) intValue];
  jint lastTokenIndex = [((JavaLangInteger *) nil_chk([lastChunk getWithIOSClass:EduStanfordNlpLingCoreAnnotations_TokenEndAnnotation_class_()])) intValue];
  NSString *chunkText = [((NSString *) nil_chk(origText)) substring:firstCharOffset endIndex:lastCharOffset];
  id<EduStanfordNlpUtilCoreMap> newChunk;
  if (tokenFactory != nil) {
    newChunk = [tokenFactory makeTokenWithNSString:chunkText withInt:firstCharOffset withInt:lastCharOffset];
  }
  else {
    newChunk = new_EduStanfordNlpPipelineAnnotation_initWithNSString_(chunkText);
  }
  (void) [((id<EduStanfordNlpUtilCoreMap>) nil_chk(newChunk)) setWithIOSClass:EduStanfordNlpLingCoreAnnotations_CharacterOffsetBeginAnnotation_class_() withId:JavaLangInteger_valueOfWithInt_(firstCharOffset)];
  (void) [newChunk setWithIOSClass:EduStanfordNlpLingCoreAnnotations_CharacterOffsetEndAnnotation_class_() withId:JavaLangInteger_valueOfWithInt_(lastCharOffset)];
  (void) [newChunk setWithIOSClass:EduStanfordNlpLingCoreAnnotations_TokenBeginAnnotation_class_() withId:JavaLangInteger_valueOfWithInt_(firstTokenIndex)];
  (void) [newChunk setWithIOSClass:EduStanfordNlpLingCoreAnnotations_TokenEndAnnotation_class_() withId:JavaLangInteger_valueOfWithInt_(lastTokenIndex)];
  id<JavaUtilList> tokens = new_JavaUtilArrayList_initWithInt_(lastTokenIndex - firstTokenIndex);
  for (jint i = chunkIndexStart; i < chunkIndexEnd; i++) {
    id<EduStanfordNlpUtilCoreMap> chunk = [chunkList getWithInt:i];
    [tokens addAllWithJavaUtilCollection:[((id<EduStanfordNlpUtilCoreMap>) nil_chk(chunk)) getWithIOSClass:EduStanfordNlpLingCoreAnnotations_TokensAnnotation_class_()]];
  }
  (void) [newChunk setWithIOSClass:EduStanfordNlpLingCoreAnnotations_TokensAnnotation_class_() withId:tokens];
  return newChunk;
}

id<EduStanfordNlpUtilCoreMap> EduStanfordNlpPipelineChunkAnnotationUtils_getMergedChunkWithJavaUtilList_withInt_withInt_withJavaUtilMap_withEduStanfordNlpProcessCoreLabelTokenFactory_(id<JavaUtilList> chunkList, jint chunkIndexStart, jint chunkIndexEnd, id<JavaUtilMap> aggregators, EduStanfordNlpProcessCoreLabelTokenFactory *tokenFactory) {
  EduStanfordNlpPipelineChunkAnnotationUtils_initialize();
  id<EduStanfordNlpUtilCoreMap> newChunk;
  if (tokenFactory != nil) {
    newChunk = [tokenFactory makeToken];
  }
  else {
    newChunk = new_EduStanfordNlpPipelineAnnotation_initWithNSString_(@"");
  }
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((id<JavaUtilMap>) nil_chk(aggregators)) entrySet])) {
    if (chunkIndexEnd > [((id<JavaUtilList>) nil_chk(chunkList)) size]) {
      JreAssert((false), (@"edu/stanford/nlp/pipeline/ChunkAnnotationUtils.java:248 condition failed: assert(false);"));
    }
    id value = [((EduStanfordNlpPipelineCoreMapAttributeAggregator *) nil_chk([((id<JavaUtilMap_Entry>) nil_chk(entry_)) getValue])) aggregateWithIOSClass:[entry_ getKey] withJavaUtilList:[chunkList subListWithInt:chunkIndexStart withInt:chunkIndexEnd]];
    (void) [((id<EduStanfordNlpUtilCoreMap>) nil_chk(newChunk)) setWithIOSClass:[entry_ getKey] withId:value];
  }
  if ([newChunk isKindOfClass:[EduStanfordNlpLingCoreLabel class]]) {
    EduStanfordNlpLingCoreLabel *cl = (EduStanfordNlpLingCoreLabel *) cast_chk(newChunk, [EduStanfordNlpLingCoreLabel class]);
    [((EduStanfordNlpLingCoreLabel *) nil_chk(cl)) setValueWithNSString:[cl word]];
    [cl setOriginalTextWithNSString:[cl word]];
  }
  return newChunk;
}

EduStanfordNlpUtilInterval *EduStanfordNlpPipelineChunkAnnotationUtils_getChunkOffsetsUsingCharOffsetsWithJavaUtilList_withInt_withInt_(id<JavaUtilList> chunkList, jint charStart, jint charEnd) {
  EduStanfordNlpPipelineChunkAnnotationUtils_initialize();
  jint chunkStart = 0;
  jint chunkEnd = [((id<JavaUtilList>) nil_chk(chunkList)) size];
  for (jint i = 0; i < [chunkList size]; i++) {
    jint start = [((JavaLangInteger *) nil_chk([((id<EduStanfordNlpUtilCoreMap>) nil_chk([chunkList getWithInt:i])) getWithIOSClass:EduStanfordNlpLingCoreAnnotations_CharacterOffsetBeginAnnotation_class_()])) intValue];
    if (start > charStart) {
      break;
    }
    chunkStart = i;
  }
  for (jint i = chunkStart; i < [chunkList size]; i++) {
    jint start = [((JavaLangInteger *) nil_chk([((id<EduStanfordNlpUtilCoreMap>) nil_chk([chunkList getWithInt:i])) getWithIOSClass:EduStanfordNlpLingCoreAnnotations_CharacterOffsetBeginAnnotation_class_()])) intValue];
    if (start >= charEnd) {
      chunkEnd = i;
      break;
    }
  }
  return EduStanfordNlpUtilInterval_toIntervalWithJavaLangComparable_withJavaLangComparable_withInt_(JavaLangInteger_valueOfWithInt_(chunkStart), JavaLangInteger_valueOfWithInt_(chunkEnd), EduStanfordNlpUtilInterval_INTERVAL_OPEN_END);
}

void EduStanfordNlpPipelineChunkAnnotationUtils_mergeChunksWithJavaUtilList_withNSString_withInt_withInt_(id<JavaUtilList> chunkList, NSString *origText, jint chunkIndexStart, jint chunkIndexEnd) {
  EduStanfordNlpPipelineChunkAnnotationUtils_initialize();
  id<EduStanfordNlpUtilCoreMap> newChunk = EduStanfordNlpPipelineChunkAnnotationUtils_getMergedChunkWithJavaUtilList_withNSString_withInt_withInt_withEduStanfordNlpProcessCoreLabelTokenFactory_(chunkList, origText, chunkIndexStart, chunkIndexEnd, nil);
  jint nChunksToRemove = chunkIndexEnd - chunkIndexStart - 1;
  for (jint i = 0; i < nChunksToRemove; i++) {
    (void) [((id<JavaUtilList>) nil_chk(chunkList)) removeWithInt:chunkIndexStart];
  }
  (void) [((id<JavaUtilList>) nil_chk(chunkList)) setWithInt:chunkIndexStart withId:newChunk];
}

JavaLangCharacter *EduStanfordNlpPipelineChunkAnnotationUtils_getFirstNonWsCharWithEduStanfordNlpUtilCoreMap_(id<EduStanfordNlpUtilCoreMap> sent) {
  EduStanfordNlpPipelineChunkAnnotationUtils_initialize();
  NSString *sentText = [((id<EduStanfordNlpUtilCoreMap>) nil_chk(sent)) getWithIOSClass:EduStanfordNlpLingCoreAnnotations_TextAnnotation_class_()];
  for (jint j = 0; j < ((jint) [((NSString *) nil_chk(sentText)) length]); j++) {
    jchar c = [sentText charAtWithInt:j];
    if (!JavaLangCharacter_isWhitespaceWithChar_(c)) {
      return JavaLangCharacter_valueOfWithChar_(c);
    }
  }
  return nil;
}

JavaLangInteger *EduStanfordNlpPipelineChunkAnnotationUtils_getFirstNonWsCharOffsetWithEduStanfordNlpUtilCoreMap_withBoolean_(id<EduStanfordNlpUtilCoreMap> sent, jboolean relative) {
  EduStanfordNlpPipelineChunkAnnotationUtils_initialize();
  NSString *sentText = [((id<EduStanfordNlpUtilCoreMap>) nil_chk(sent)) getWithIOSClass:EduStanfordNlpLingCoreAnnotations_TextAnnotation_class_()];
  for (jint j = 0; j < ((jint) [((NSString *) nil_chk(sentText)) length]); j++) {
    jchar c = [sentText charAtWithInt:j];
    if (!JavaLangCharacter_isWhitespaceWithChar_(c)) {
      if (relative) {
        return JavaLangInteger_valueOfWithInt_(j);
      }
      else {
        return JavaLangInteger_valueOfWithInt_(j + [((JavaLangInteger *) nil_chk([sent getWithIOSClass:EduStanfordNlpLingCoreAnnotations_CharacterOffsetBeginAnnotation_class_()])) intValue]);
      }
    }
  }
  return nil;
}

NSString *EduStanfordNlpPipelineChunkAnnotationUtils_getTrimmedTextWithEduStanfordNlpUtilCoreMap_(id<EduStanfordNlpUtilCoreMap> sent) {
  EduStanfordNlpPipelineChunkAnnotationUtils_initialize();
  NSString *sentText = [((id<EduStanfordNlpUtilCoreMap>) nil_chk(sent)) getWithIOSClass:EduStanfordNlpLingCoreAnnotations_TextAnnotation_class_()];
  return [((NSString *) nil_chk(sentText)) trim];
}

jboolean EduStanfordNlpPipelineChunkAnnotationUtils_fixChunkSentenceBoundariesWithEduStanfordNlpUtilCoreMap_withJavaUtilList_(id<EduStanfordNlpUtilCoreMap> docAnnotation, id<JavaUtilList> chunkCharOffsets) {
  EduStanfordNlpPipelineChunkAnnotationUtils_initialize();
  return EduStanfordNlpPipelineChunkAnnotationUtils_fixChunkSentenceBoundariesWithEduStanfordNlpUtilCoreMap_withJavaUtilList_withBoolean_withBoolean_withBoolean_(docAnnotation, chunkCharOffsets, false, false, false);
}

jboolean EduStanfordNlpPipelineChunkAnnotationUtils_fixChunkSentenceBoundariesWithEduStanfordNlpUtilCoreMap_withJavaUtilList_withBoolean_withBoolean_withBoolean_(id<EduStanfordNlpUtilCoreMap> docAnnotation, id<JavaUtilList> chunkCharOffsets, jboolean offsetsAreNotSorted, jboolean extendedFixSentence, jboolean moreExtendedFixSentence) {
  EduStanfordNlpPipelineChunkAnnotationUtils_initialize();
  NSString *text = [((id<EduStanfordNlpUtilCoreMap>) nil_chk(docAnnotation)) getWithIOSClass:EduStanfordNlpLingCoreAnnotations_TextAnnotation_class_()];
  id<JavaUtilList> sentences = [docAnnotation getWithIOSClass:EduStanfordNlpLingCoreAnnotations_SentencesAnnotation_class_()];
  if (sentences == nil || [sentences size] == 0) return true;
  if (chunkCharOffsets != nil) {
    jint i = 0;
    id<EduStanfordNlpUtilCoreMap> sentence = [sentences getWithInt:i];
    for (EduStanfordNlpUtilIntPair * __strong offsets in chunkCharOffsets) {
      jint offsetBegin = [((EduStanfordNlpUtilIntPair *) nil_chk(offsets)) getSource];
      jint offsetEnd = [offsets getTarget];
      while (offsetBegin < [((JavaLangInteger *) nil_chk([((id<EduStanfordNlpUtilCoreMap>) nil_chk(sentence)) getWithIOSClass:EduStanfordNlpLingCoreAnnotations_CharacterOffsetBeginAnnotation_class_()])) intValue] || offsetBegin >= [((JavaLangInteger *) nil_chk([sentence getWithIOSClass:EduStanfordNlpLingCoreAnnotations_CharacterOffsetEndAnnotation_class_()])) intValue]) {
        i++;
        if (i >= [sentences size]) {
          return false;
        }
        sentence = [sentences getWithInt:i];
      }
      if ([((JavaLangInteger *) nil_chk([sentence getWithIOSClass:EduStanfordNlpLingCoreAnnotations_CharacterOffsetEndAnnotation_class_()])) intValue] >= offsetEnd) {
      }
      else {
        jint startSentIndex = i;
        while (offsetEnd > [((JavaLangInteger *) nil_chk([((id<EduStanfordNlpUtilCoreMap>) nil_chk(sentence)) getWithIOSClass:EduStanfordNlpLingCoreAnnotations_CharacterOffsetEndAnnotation_class_()])) intValue]) {
          i++;
          if (i >= [sentences size]) {
            return false;
          }
          sentence = [sentences getWithInt:i];
        }
        JavaLangInteger *firstNonWsCharOffset = EduStanfordNlpPipelineChunkAnnotationUtils_getFirstNonWsCharOffsetWithEduStanfordNlpUtilCoreMap_withBoolean_(sentence, false);
        if (firstNonWsCharOffset != nil && [firstNonWsCharOffset intValue] >= offsetEnd) {
          i--;
          sentence = [sentences getWithInt:i];
        }
        EduStanfordNlpPipelineChunkAnnotationUtils_mergeChunksWithJavaUtilList_withNSString_withInt_withInt_(sentences, text, startSentIndex, i + 1);
        i = startSentIndex;
        sentence = [sentences getWithInt:i];
      }
      if (extendedFixSentence) {
        if (i + 1 < [sentences size]) {
          jboolean entityAtSentEnd = true;
          jint sentCharBegin = [((JavaLangInteger *) nil_chk([((id<EduStanfordNlpUtilCoreMap>) nil_chk(sentence)) getWithIOSClass:EduStanfordNlpLingCoreAnnotations_CharacterOffsetBeginAnnotation_class_()])) intValue];
          NSString *sentText = [sentence getWithIOSClass:EduStanfordNlpLingCoreAnnotations_TextAnnotation_class_()];
          jint offsetEndInSentText = offsetEnd - sentCharBegin;
          for (jint j = offsetEndInSentText; j < ((jint) [((NSString *) nil_chk(sentText)) length]); j++) {
            jchar c = [sentText charAtWithInt:j];
            if (!JavaLangCharacter_isWhitespaceWithChar_(c)) {
              entityAtSentEnd = false;
              break;
            }
          }
          jboolean doMerge = false;
          if (entityAtSentEnd) {
            id<EduStanfordNlpUtilCoreMap> nextSentence = [sentences getWithInt:i + 1];
            JavaLangCharacter *c = EduStanfordNlpPipelineChunkAnnotationUtils_getFirstNonWsCharWithEduStanfordNlpUtilCoreMap_(nextSentence);
            if (c != nil) {
              doMerge = !JavaLangCharacter_isUpperCaseWithChar_([c charValue]);
              if (!doMerge) {
                [((JavaUtilLoggingLogger *) nil_chk(EduStanfordNlpPipelineChunkAnnotationUtils_logger)) finerWithNSString:JreStrcat("$@C", @"No merge: c is '", c, '\'')];
              }
            }
            else {
              [((JavaUtilLoggingLogger *) nil_chk(EduStanfordNlpPipelineChunkAnnotationUtils_logger)) finerWithNSString:@"No merge: no char"];
            }
          }
          else {
            [((JavaUtilLoggingLogger *) nil_chk(EduStanfordNlpPipelineChunkAnnotationUtils_logger)) finerWithNSString:@"No merge: entity not at end"];
          }
          if (doMerge) {
            [((JavaUtilLoggingLogger *) nil_chk(EduStanfordNlpPipelineChunkAnnotationUtils_logger)) finerWithNSString:@"Merge chunks"];
            EduStanfordNlpPipelineChunkAnnotationUtils_mergeChunksWithJavaUtilList_withNSString_withInt_withInt_(sentences, text, i, i + 2);
          }
        }
      }
      if (offsetsAreNotSorted) {
        i = 0;
      }
      sentence = [sentences getWithInt:i];
    }
  }
  if (moreExtendedFixSentence) {
    jint i = 0;
    while (i + 1 < [sentences size]) {
      jboolean doMerge = false;
      id<EduStanfordNlpUtilCoreMap> sentence = [sentences getWithInt:i];
      id<EduStanfordNlpUtilCoreMap> nextSentence = [sentences getWithInt:i + 1];
      NSString *sentTrimmedText = EduStanfordNlpPipelineChunkAnnotationUtils_getTrimmedTextWithEduStanfordNlpUtilCoreMap_(sentence);
      NSString *nextSentTrimmedText = EduStanfordNlpPipelineChunkAnnotationUtils_getTrimmedTextWithEduStanfordNlpUtilCoreMap_(nextSentence);
      if (((jint) [((NSString *) nil_chk(sentTrimmedText)) length]) <= 1 || ((jint) [((NSString *) nil_chk(nextSentTrimmedText)) length]) <= 1) {
        doMerge = true;
      }
      else {
        JavaLangCharacter *c = EduStanfordNlpPipelineChunkAnnotationUtils_getFirstNonWsCharWithEduStanfordNlpUtilCoreMap_(nextSentence);
        if (c != nil && !JavaLangCharacter_isUpperCaseWithChar_([c charValue])) {
          if ([c charValue] == ',' || (JavaLangCharacter_isLowerCaseWithChar_([c charValue]))) {
            doMerge = true;
          }
        }
      }
      if (doMerge) {
        EduStanfordNlpPipelineChunkAnnotationUtils_mergeChunksWithJavaUtilList_withNSString_withInt_withInt_(sentences, text, i, i + 2);
      }
      else {
        i++;
      }
    }
  }
  for (jint i = 0; i < [sentences size]; i++) {
    id<EduStanfordNlpUtilCoreMap> sentence = [sentences getWithInt:i];
    (void) [((id<EduStanfordNlpUtilCoreMap>) nil_chk(sentence)) setWithIOSClass:EduStanfordNlpLingCoreAnnotations_SentenceIndexAnnotation_class_() withId:JavaLangInteger_valueOfWithInt_(i)];
  }
  return true;
}

void EduStanfordNlpPipelineChunkAnnotationUtils_annotateChunkWithEduStanfordNlpUtilCoreMap_withJavaUtilList_withInt_withInt_withInt_(id<EduStanfordNlpUtilCoreMap> chunk, id<JavaUtilList> tokens, jint tokenStartIndex, jint tokenEndIndex, jint totalTokenOffset) {
  EduStanfordNlpPipelineChunkAnnotationUtils_initialize();
  id<JavaUtilList> chunkTokens = new_JavaUtilArrayList_initWithJavaUtilCollection_([((id<JavaUtilList>) nil_chk(tokens)) subListWithInt:tokenStartIndex withInt:tokenEndIndex]);
  (void) [((id<EduStanfordNlpUtilCoreMap>) nil_chk(chunk)) setWithIOSClass:EduStanfordNlpLingCoreAnnotations_CharacterOffsetBeginAnnotation_class_() withId:[((EduStanfordNlpLingCoreLabel *) nil_chk([chunkTokens getWithInt:0])) getWithIOSClass:EduStanfordNlpLingCoreAnnotations_CharacterOffsetBeginAnnotation_class_()]];
  (void) [chunk setWithIOSClass:EduStanfordNlpLingCoreAnnotations_CharacterOffsetEndAnnotation_class_() withId:[((EduStanfordNlpLingCoreLabel *) nil_chk([chunkTokens getWithInt:[chunkTokens size] - 1])) getWithIOSClass:EduStanfordNlpLingCoreAnnotations_CharacterOffsetEndAnnotation_class_()]];
  (void) [chunk setWithIOSClass:EduStanfordNlpLingCoreAnnotations_TokensAnnotation_class_() withId:chunkTokens];
  (void) [chunk setWithIOSClass:EduStanfordNlpLingCoreAnnotations_TokenBeginAnnotation_class_() withId:JavaLangInteger_valueOfWithInt_(tokenStartIndex + totalTokenOffset)];
  (void) [chunk setWithIOSClass:EduStanfordNlpLingCoreAnnotations_TokenEndAnnotation_class_() withId:JavaLangInteger_valueOfWithInt_(tokenEndIndex + totalTokenOffset)];
}

NSString *EduStanfordNlpPipelineChunkAnnotationUtils_getTokenTextWithJavaUtilList_withIOSClass_(id<JavaUtilList> tokens, IOSClass *tokenTextKey) {
  EduStanfordNlpPipelineChunkAnnotationUtils_initialize();
  return EduStanfordNlpPipelineChunkAnnotationUtils_getTokenTextWithJavaUtilList_withIOSClass_withNSString_(tokens, tokenTextKey, @" ");
}

NSString *EduStanfordNlpPipelineChunkAnnotationUtils_getTokenTextWithJavaUtilList_withIOSClass_withNSString_(id<JavaUtilList> tokens, IOSClass *tokenTextKey, NSString *delimiter) {
  EduStanfordNlpPipelineChunkAnnotationUtils_initialize();
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  jint prevEndIndex = -1;
  for (id<EduStanfordNlpUtilCoreMap> __strong cm in nil_chk(tokens)) {
    id obj = [((id<EduStanfordNlpUtilCoreMap>) nil_chk(cm)) getWithIOSClass:tokenTextKey];
    jboolean includeDelimiter = [sb length] > 0;
    if ([cm containsKeyWithIOSClass:EduStanfordNlpLingCoreAnnotations_CharacterOffsetBeginAnnotation_class_()] && [cm containsKeyWithIOSClass:EduStanfordNlpLingCoreAnnotations_CharacterOffsetEndAnnotation_class_()]) {
      jint beginIndex = [((JavaLangInteger *) nil_chk([cm getWithIOSClass:EduStanfordNlpLingCoreAnnotations_CharacterOffsetBeginAnnotation_class_()])) intValue];
      jint endIndex = [((JavaLangInteger *) nil_chk([cm getWithIOSClass:EduStanfordNlpLingCoreAnnotations_CharacterOffsetEndAnnotation_class_()])) intValue];
      if (prevEndIndex == beginIndex) {
        includeDelimiter = false;
      }
      prevEndIndex = endIndex;
    }
    if (obj != nil) {
      if (includeDelimiter) {
        (void) [sb appendWithNSString:delimiter];
      }
      (void) [sb appendWithId:obj];
    }
  }
  return [sb description];
}

void EduStanfordNlpPipelineChunkAnnotationUtils_annotateChunkTextWithEduStanfordNlpUtilCoreMap_withIOSClass_(id<EduStanfordNlpUtilCoreMap> chunk, IOSClass *tokenTextKey) {
  EduStanfordNlpPipelineChunkAnnotationUtils_initialize();
  id<JavaUtilList> chunkTokens = [((id<EduStanfordNlpUtilCoreMap>) nil_chk(chunk)) getWithIOSClass:EduStanfordNlpLingCoreAnnotations_TokensAnnotation_class_()];
  NSString *text = EduStanfordNlpPipelineChunkAnnotationUtils_getTokenTextWithJavaUtilList_withIOSClass_(chunkTokens, tokenTextKey);
  (void) [chunk setWithIOSClass:EduStanfordNlpLingCoreAnnotations_TextAnnotation_class_() withId:text];
}

jboolean EduStanfordNlpPipelineChunkAnnotationUtils_hasCharacterOffsetsWithEduStanfordNlpUtilCoreMap_(id<EduStanfordNlpUtilCoreMap> chunk) {
  EduStanfordNlpPipelineChunkAnnotationUtils_initialize();
  return ([((id<EduStanfordNlpUtilCoreMap>) nil_chk(chunk)) getWithIOSClass:EduStanfordNlpLingCoreAnnotations_CharacterOffsetBeginAnnotation_class_()] != nil && [chunk getWithIOSClass:EduStanfordNlpLingCoreAnnotations_CharacterOffsetEndAnnotation_class_()] != nil);
}

jboolean EduStanfordNlpPipelineChunkAnnotationUtils_annotateChunkTextWithEduStanfordNlpUtilCoreMap_withEduStanfordNlpUtilCoreMap_(id<EduStanfordNlpUtilCoreMap> chunk, id<EduStanfordNlpUtilCoreMap> origAnnotation) {
  EduStanfordNlpPipelineChunkAnnotationUtils_initialize();
  NSString *annoText = [((id<EduStanfordNlpUtilCoreMap>) nil_chk(origAnnotation)) getWithIOSClass:EduStanfordNlpLingCoreAnnotations_TextAnnotation_class_()];
  if (annoText == nil) return false;
  if (!EduStanfordNlpPipelineChunkAnnotationUtils_hasCharacterOffsetsWithEduStanfordNlpUtilCoreMap_(chunk)) return false;
  JavaLangInteger *annoBeginCharOffset = [origAnnotation getWithIOSClass:EduStanfordNlpLingCoreAnnotations_CharacterOffsetBeginAnnotation_class_()];
  if (annoBeginCharOffset == nil) {
    annoBeginCharOffset = JavaLangInteger_valueOfWithInt_(0);
  }
  jint chunkBeginCharOffset = [((JavaLangInteger *) nil_chk([((id<EduStanfordNlpUtilCoreMap>) nil_chk(chunk)) getWithIOSClass:EduStanfordNlpLingCoreAnnotations_CharacterOffsetBeginAnnotation_class_()])) intValue] - [annoBeginCharOffset intValue];
  jint chunkEndCharOffset = [((JavaLangInteger *) nil_chk([chunk getWithIOSClass:EduStanfordNlpLingCoreAnnotations_CharacterOffsetEndAnnotation_class_()])) intValue] - [annoBeginCharOffset intValue];
  if (chunkBeginCharOffset < 0) {
    [((JavaUtilLoggingLogger *) nil_chk(EduStanfordNlpPipelineChunkAnnotationUtils_logger)) fineWithNSString:JreStrcat("$I$", @"Adjusting begin char offset from ", chunkBeginCharOffset, @" to 0")];
    [EduStanfordNlpPipelineChunkAnnotationUtils_logger fineWithNSString:JreStrcat("$@$@", @"Chunk begin offset: ", [chunk getWithIOSClass:EduStanfordNlpLingCoreAnnotations_CharacterOffsetBeginAnnotation_class_()], @", Source text begin offset ", annoBeginCharOffset)];
    chunkBeginCharOffset = 0;
  }
  if (chunkBeginCharOffset > ((jint) [annoText length])) {
    [((JavaUtilLoggingLogger *) nil_chk(EduStanfordNlpPipelineChunkAnnotationUtils_logger)) fineWithNSString:JreStrcat("$I$I", @"Adjusting begin char offset from ", chunkBeginCharOffset, @" to ", ((jint) [annoText length]))];
    [EduStanfordNlpPipelineChunkAnnotationUtils_logger fineWithNSString:JreStrcat("$@$@", @"Chunk begin offset: ", [chunk getWithIOSClass:EduStanfordNlpLingCoreAnnotations_CharacterOffsetBeginAnnotation_class_()], @", Source text begin offset ", annoBeginCharOffset)];
    chunkBeginCharOffset = ((jint) [annoText length]);
  }
  if (chunkEndCharOffset < 0) {
    [((JavaUtilLoggingLogger *) nil_chk(EduStanfordNlpPipelineChunkAnnotationUtils_logger)) fineWithNSString:JreStrcat("$I$", @"Adjusting end char offset from ", chunkEndCharOffset, @" to 0")];
    [EduStanfordNlpPipelineChunkAnnotationUtils_logger fineWithNSString:JreStrcat("$@$@", @"Chunk end offset: ", [chunk getWithIOSClass:EduStanfordNlpLingCoreAnnotations_CharacterOffsetEndAnnotation_class_()], @", Source text begin offset ", annoBeginCharOffset)];
    chunkEndCharOffset = 0;
  }
  if (chunkEndCharOffset > ((jint) [annoText length])) {
    [((JavaUtilLoggingLogger *) nil_chk(EduStanfordNlpPipelineChunkAnnotationUtils_logger)) fineWithNSString:JreStrcat("$I$I", @"Adjusting end char offset from ", chunkEndCharOffset, @" to ", ((jint) [annoText length]))];
    [EduStanfordNlpPipelineChunkAnnotationUtils_logger fineWithNSString:JreStrcat("$@$@", @"Chunk end offset: ", [chunk getWithIOSClass:EduStanfordNlpLingCoreAnnotations_CharacterOffsetEndAnnotation_class_()], @", Source text begin offset ", annoBeginCharOffset)];
    chunkEndCharOffset = ((jint) [annoText length]);
  }
  if (chunkEndCharOffset < chunkBeginCharOffset) {
    [((JavaUtilLoggingLogger *) nil_chk(EduStanfordNlpPipelineChunkAnnotationUtils_logger)) fineWithNSString:JreStrcat("$I$I", @"Adjusting end char offset from ", chunkEndCharOffset, @" to ", chunkBeginCharOffset)];
    [EduStanfordNlpPipelineChunkAnnotationUtils_logger fineWithNSString:JreStrcat("$@$@", @"Chunk end offset: ", [chunk getWithIOSClass:EduStanfordNlpLingCoreAnnotations_CharacterOffsetEndAnnotation_class_()], @", Source text begin offset ", annoBeginCharOffset)];
    chunkEndCharOffset = chunkBeginCharOffset;
  }
  NSString *chunkText = [annoText substring:chunkBeginCharOffset endIndex:chunkEndCharOffset];
  (void) [chunk setWithIOSClass:EduStanfordNlpLingCoreAnnotations_TextAnnotation_class_() withId:chunkText];
  return true;
}

void EduStanfordNlpPipelineChunkAnnotationUtils_annotateChunkTokensWithEduStanfordNlpUtilCoreMap_withIOSClass_withIOSClass_(id<EduStanfordNlpUtilCoreMap> chunk, IOSClass *tokenChunkKey, IOSClass *tokenLabelKey) {
  EduStanfordNlpPipelineChunkAnnotationUtils_initialize();
  id<JavaUtilList> chunkTokens = [((id<EduStanfordNlpUtilCoreMap>) nil_chk(chunk)) getWithIOSClass:EduStanfordNlpLingCoreAnnotations_TokensAnnotation_class_()];
  if (tokenLabelKey != nil) {
    NSString *text = [chunk getWithIOSClass:EduStanfordNlpLingCoreAnnotations_TextAnnotation_class_()];
    for (EduStanfordNlpLingCoreLabel * __strong t in nil_chk(chunkTokens)) {
      (void) [((EduStanfordNlpLingCoreLabel *) nil_chk(t)) setWithIOSClass:tokenLabelKey withId:text];
    }
  }
  if (tokenChunkKey != nil) {
    for (EduStanfordNlpLingCoreLabel * __strong t in nil_chk(chunkTokens)) {
      (void) [((EduStanfordNlpLingCoreLabel *) nil_chk(t)) setWithIOSClass:tokenChunkKey withId:chunk];
    }
  }
}

EduStanfordNlpPipelineAnnotation *EduStanfordNlpPipelineChunkAnnotationUtils_getAnnotatedChunkWithJavaUtilList_withInt_withInt_withInt_(id<JavaUtilList> tokens, jint tokenStartIndex, jint tokenEndIndex, jint totalTokenOffset) {
  EduStanfordNlpPipelineChunkAnnotationUtils_initialize();
  EduStanfordNlpPipelineAnnotation *chunk = new_EduStanfordNlpPipelineAnnotation_initWithNSString_(@"");
  EduStanfordNlpPipelineChunkAnnotationUtils_annotateChunkWithEduStanfordNlpUtilCoreMap_withJavaUtilList_withInt_withInt_withInt_(chunk, tokens, tokenStartIndex, tokenEndIndex, totalTokenOffset);
  return chunk;
}

EduStanfordNlpPipelineAnnotation *EduStanfordNlpPipelineChunkAnnotationUtils_getAnnotatedChunkWithJavaUtilList_withInt_withInt_withInt_withIOSClass_withIOSClass_withIOSClass_(id<JavaUtilList> tokens, jint tokenStartIndex, jint tokenEndIndex, jint totalTokenOffset, IOSClass *tokenChunkKey, IOSClass *tokenTextKey, IOSClass *tokenLabelKey) {
  EduStanfordNlpPipelineChunkAnnotationUtils_initialize();
  EduStanfordNlpPipelineAnnotation *chunk = EduStanfordNlpPipelineChunkAnnotationUtils_getAnnotatedChunkWithJavaUtilList_withInt_withInt_withInt_(tokens, tokenStartIndex, tokenEndIndex, totalTokenOffset);
  EduStanfordNlpPipelineChunkAnnotationUtils_annotateChunkTextWithEduStanfordNlpUtilCoreMap_withIOSClass_(chunk, tokenTextKey);
  EduStanfordNlpPipelineChunkAnnotationUtils_annotateChunkTokensWithEduStanfordNlpUtilCoreMap_withIOSClass_withIOSClass_(chunk, tokenChunkKey, tokenLabelKey);
  return chunk;
}

EduStanfordNlpPipelineAnnotation *EduStanfordNlpPipelineChunkAnnotationUtils_getAnnotatedChunkWithEduStanfordNlpUtilCoreMap_withInt_withInt_(id<EduStanfordNlpUtilCoreMap> annotation, jint tokenStartIndex, jint tokenEndIndex) {
  EduStanfordNlpPipelineChunkAnnotationUtils_initialize();
  JavaLangInteger *annoTokenBegin = [((id<EduStanfordNlpUtilCoreMap>) nil_chk(annotation)) getWithIOSClass:EduStanfordNlpLingCoreAnnotations_TokenBeginAnnotation_class_()];
  if (annoTokenBegin == nil) {
    annoTokenBegin = JavaLangInteger_valueOfWithInt_(0);
  }
  id<JavaUtilList> tokens = [annotation getWithIOSClass:EduStanfordNlpLingCoreAnnotations_TokensAnnotation_class_()];
  EduStanfordNlpPipelineAnnotation *chunk = EduStanfordNlpPipelineChunkAnnotationUtils_getAnnotatedChunkWithJavaUtilList_withInt_withInt_withInt_(tokens, tokenStartIndex, tokenEndIndex, [annoTokenBegin intValue]);
  jboolean annotatedTextFromCharOffsets = EduStanfordNlpPipelineChunkAnnotationUtils_annotateChunkTextWithEduStanfordNlpUtilCoreMap_withEduStanfordNlpUtilCoreMap_(chunk, annotation);
  if (!annotatedTextFromCharOffsets) {
    EduStanfordNlpPipelineChunkAnnotationUtils_annotateChunkTextWithEduStanfordNlpUtilCoreMap_withIOSClass_(chunk, EduStanfordNlpLingCoreAnnotations_TextAnnotation_class_());
  }
  return chunk;
}

EduStanfordNlpPipelineAnnotation *EduStanfordNlpPipelineChunkAnnotationUtils_getAnnotatedChunkWithEduStanfordNlpUtilCoreMap_withInt_withInt_withIOSClass_withIOSClass_(id<EduStanfordNlpUtilCoreMap> annotation, jint tokenStartIndex, jint tokenEndIndex, IOSClass *tokenChunkKey, IOSClass *tokenLabelKey) {
  EduStanfordNlpPipelineChunkAnnotationUtils_initialize();
  EduStanfordNlpPipelineAnnotation *chunk = EduStanfordNlpPipelineChunkAnnotationUtils_getAnnotatedChunkWithEduStanfordNlpUtilCoreMap_withInt_withInt_(annotation, tokenStartIndex, tokenEndIndex);
  EduStanfordNlpPipelineChunkAnnotationUtils_annotateChunkTokensWithEduStanfordNlpUtilCoreMap_withIOSClass_withIOSClass_(chunk, tokenChunkKey, tokenLabelKey);
  return chunk;
}

id<EduStanfordNlpUtilCoreMap> EduStanfordNlpPipelineChunkAnnotationUtils_getAnnotatedChunkUsingCharOffsetsWithEduStanfordNlpUtilCoreMap_withInt_withInt_(id<EduStanfordNlpUtilCoreMap> annotation, jint charOffsetStart, jint charOffsetEnd) {
  EduStanfordNlpPipelineChunkAnnotationUtils_initialize();
  id<JavaUtilList> cm = EduStanfordNlpPipelineChunkAnnotationUtils_getAnnotatedChunksUsingSortedCharOffsetsWithEduStanfordNlpUtilCoreMap_withJavaUtilList_(annotation, EduStanfordNlpUtilCollectionUtils_makeListWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ create_EduStanfordNlpUtilIntPair_initWithInt_withInt_(charOffsetStart, charOffsetEnd) } count:1 type:EduStanfordNlpUtilIntPair_class_()]));
  if (cm != nil && [cm size] > 0) {
    return [cm getWithInt:0];
  }
  else {
    return nil;
  }
}

id<JavaUtilList> EduStanfordNlpPipelineChunkAnnotationUtils_getAnnotatedChunksUsingSortedCharOffsetsWithEduStanfordNlpUtilCoreMap_withJavaUtilList_(id<EduStanfordNlpUtilCoreMap> annotation, id<JavaUtilList> charOffsets) {
  EduStanfordNlpPipelineChunkAnnotationUtils_initialize();
  return EduStanfordNlpPipelineChunkAnnotationUtils_getAnnotatedChunksUsingSortedCharOffsetsWithEduStanfordNlpUtilCoreMap_withJavaUtilList_withBoolean_withIOSClass_withIOSClass_withBoolean_(annotation, charOffsets, true, nil, nil, true);
}

id<JavaUtilList> EduStanfordNlpPipelineChunkAnnotationUtils_getAnnotatedChunksUsingSortedCharOffsetsWithEduStanfordNlpUtilCoreMap_withJavaUtilList_withBoolean_withIOSClass_withIOSClass_withBoolean_(id<EduStanfordNlpUtilCoreMap> annotation, id<JavaUtilList> charOffsets, jboolean charOffsetIsRelative, IOSClass *tokenChunkKey, IOSClass *tokenLabelKey, jboolean allowPartialTokens) {
  EduStanfordNlpPipelineChunkAnnotationUtils_initialize();
  NSString *annoText = [((id<EduStanfordNlpUtilCoreMap>) nil_chk(annotation)) getWithIOSClass:EduStanfordNlpLingCoreAnnotations_TextAnnotation_class_()];
  id<JavaUtilList> chunks = new_JavaUtilArrayList_initWithInt_([((id<JavaUtilList>) nil_chk(charOffsets)) size]);
  id<JavaUtilList> annoTokens = [annotation getWithIOSClass:EduStanfordNlpLingCoreAnnotations_TokensAnnotation_class_()];
  JavaLangInteger *annoCharBegin = [annotation getWithIOSClass:EduStanfordNlpLingCoreAnnotations_CharacterOffsetBeginAnnotation_class_()];
  if (annoCharBegin == nil) {
    annoCharBegin = JavaLangInteger_valueOfWithInt_(0);
  }
  JavaLangInteger *annoTokenBegin = [annotation getWithIOSClass:EduStanfordNlpLingCoreAnnotations_TokenBeginAnnotation_class_()];
  if (annoTokenBegin == nil) {
    annoTokenBegin = JavaLangInteger_valueOfWithInt_(0);
  }
  jint i = 0;
  for (EduStanfordNlpUtilIntPair * __strong p in charOffsets) {
    jint beginRelCharOffset = charOffsetIsRelative ? [((EduStanfordNlpUtilIntPair *) nil_chk(p)) getSource] : [((EduStanfordNlpUtilIntPair *) nil_chk(p)) getSource] - [annoCharBegin intValue];
    jint endRelCharOffset = charOffsetIsRelative ? [p getTarget] : [p getTarget] - [annoCharBegin intValue];
    jint beginCharOffset = beginRelCharOffset + [annoCharBegin intValue];
    jint endCharOffset = endRelCharOffset + [annoCharBegin intValue];
    if (beginRelCharOffset >= ((jint) [((NSString *) nil_chk(annoText)) length])) {
      break;
    }
    if (endRelCharOffset > ((jint) [annoText length])) {
      endRelCharOffset = ((jint) [annoText length]);
    }
    if (allowPartialTokens) {
      while (i < [((id<JavaUtilList>) nil_chk(annoTokens)) size] && [((EduStanfordNlpLingCoreLabel *) nil_chk([annoTokens getWithInt:i])) endPosition] <= beginCharOffset) {
        i++;
      }
    }
    else {
      while (i < [((id<JavaUtilList>) nil_chk(annoTokens)) size] && [((EduStanfordNlpLingCoreLabel *) nil_chk([annoTokens getWithInt:i])) beginPosition] < beginCharOffset) {
        i++;
      }
    }
    if (i >= [annoTokens size]) break;
    jint tokenBegin = i;
    jint j = i;
    if (allowPartialTokens) {
      while (j < [annoTokens size] && [((EduStanfordNlpLingCoreLabel *) nil_chk([annoTokens getWithInt:j])) beginPosition] < endCharOffset) {
        j++;
      }
    }
    else {
      while (j < [annoTokens size] && [((EduStanfordNlpLingCoreLabel *) nil_chk([annoTokens getWithInt:j])) endPosition] <= endCharOffset) {
        JreAssert((([((EduStanfordNlpLingCoreLabel *) nil_chk([annoTokens getWithInt:j])) beginPosition] >= beginCharOffset)), (@"edu/stanford/nlp/pipeline/ChunkAnnotationUtils.java:822 condition failed: assert(annoTokens.get(j).beginPosition() >= beginCharOffset);"));
        j++;
      }
    }
    jint tokenEnd = j;
    id<JavaUtilList> chunkTokens = new_JavaUtilArrayList_initWithJavaUtilCollection_([annoTokens subListWithInt:tokenBegin withInt:tokenEnd]);
    NSString *chunkText = [annoText substring:beginRelCharOffset endIndex:endRelCharOffset];
    EduStanfordNlpPipelineAnnotation *chunk = new_EduStanfordNlpPipelineAnnotation_initWithNSString_(chunkText);
    (void) [chunk setWithIOSClass:EduStanfordNlpLingCoreAnnotations_CharacterOffsetBeginAnnotation_class_() withId:JavaLangInteger_valueOfWithInt_(beginCharOffset)];
    (void) [chunk setWithIOSClass:EduStanfordNlpLingCoreAnnotations_CharacterOffsetEndAnnotation_class_() withId:JavaLangInteger_valueOfWithInt_(endCharOffset)];
    (void) [chunk setWithIOSClass:EduStanfordNlpLingCoreAnnotations_TokensAnnotation_class_() withId:chunkTokens];
    (void) [chunk setWithIOSClass:EduStanfordNlpLingCoreAnnotations_TokenBeginAnnotation_class_() withId:JavaLangInteger_valueOfWithInt_(tokenBegin + [annoTokenBegin intValue])];
    (void) [chunk setWithIOSClass:EduStanfordNlpLingCoreAnnotations_TokenEndAnnotation_class_() withId:JavaLangInteger_valueOfWithInt_(tokenEnd + [annoTokenBegin intValue])];
    EduStanfordNlpPipelineChunkAnnotationUtils_annotateChunkTokensWithEduStanfordNlpUtilCoreMap_withIOSClass_withIOSClass_(chunk, tokenChunkKey, tokenLabelKey);
    [chunks addWithId:chunk];
    if (j >= [annoTokens size]) break;
  }
  if ([chunks size] != [charOffsets size]) {
    [((JavaUtilLoggingLogger *) nil_chk(EduStanfordNlpPipelineChunkAnnotationUtils_logger)) warningWithNSString:JreStrcat("$ICI$", @"WARNING: Only ", [chunks size], '/', [charOffsets size], @" chunks found.  Check if offsets are sorted/nonoverlapping")];
  }
  return chunks;
}

void EduStanfordNlpPipelineChunkAnnotationUtils_annotateChunkWithEduStanfordNlpUtilCoreMap_withIOSClass_withIOSClass_withEduStanfordNlpPipelineCoreMapAttributeAggregator_(id<EduStanfordNlpUtilCoreMap> annotation, IOSClass *newAnnotationKey, IOSClass *aggrKey, EduStanfordNlpPipelineCoreMapAttributeAggregator *aggregator) {
  EduStanfordNlpPipelineChunkAnnotationUtils_initialize();
  id v = [((EduStanfordNlpPipelineCoreMapAttributeAggregator *) nil_chk(aggregator)) aggregateWithIOSClass:aggrKey withJavaUtilList:[((id<EduStanfordNlpUtilCoreMap>) nil_chk(annotation)) getWithIOSClass:EduStanfordNlpLingCoreAnnotations_TokensAnnotation_class_()]];
  (void) [annotation setWithIOSClass:newAnnotationKey withId:v];
}

void EduStanfordNlpPipelineChunkAnnotationUtils_annotateChunkWithEduStanfordNlpUtilCoreMap_withJavaUtilMap_(id<EduStanfordNlpUtilCoreMap> chunk, id<JavaUtilMap> attributes) {
  EduStanfordNlpPipelineChunkAnnotationUtils_initialize();
  for (NSString * __strong attr in nil_chk([((id<JavaUtilMap>) nil_chk(attributes)) keySet])) {
    NSString *value = [attributes getWithId:attr];
    EduStanfordNlpLingAnnotationLookup_KeyLookup *lookup = EduStanfordNlpLingAnnotationLookup_getCoreKeyWithNSString_(attr);
    if (attr != nil) {
      if (value != nil) {
        @try {
          IOSClass *valueClass = EduStanfordNlpLingAnnotationLookup_getValueTypeWithIOSClass_(((EduStanfordNlpLingAnnotationLookup_KeyLookup *) nil_chk(lookup))->coreKey_);
          if (valueClass == NSString_class_()) {
            (void) [((id<EduStanfordNlpUtilCoreMap>) nil_chk(chunk)) setWithIOSClass:lookup->coreKey_ withId:value];
          }
          else {
            JavaLangReflectMethod *valueOfMethod = [((IOSClass *) nil_chk(valueClass)) getMethod:@"valueOf" parameterTypes:[IOSObjectArray newArrayWithObjects:(id[]){ NSString_class_() } count:1 type:IOSClass_class_()]];
            if (valueOfMethod != nil) {
              (void) [((id<EduStanfordNlpUtilCoreMap>) nil_chk(chunk)) setWithIOSClass:lookup->coreKey_ withId:[valueOfMethod invokeWithId:valueClass withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ value } count:1 type:NSObject_class_()]]];
            }
          }
        }
        @catch (JavaLangException *ex) {
          @throw new_JavaLangRuntimeException_initWithNSString_withNSException_(JreStrcat("$$", @"Unable to annotate attribute ", attr), ex);
        }
      }
      else {
        (void) [((id<EduStanfordNlpUtilCoreMap>) nil_chk(chunk)) setWithIOSClass:((EduStanfordNlpLingAnnotationLookup_KeyLookup *) nil_chk(lookup))->coreKey_ withId:nil];
      }
    }
    else {
      @throw new_JavaLangUnsupportedOperationException_initWithNSString_(JreStrcat("$$", @"Unknown attributes: ", attr));
    }
  }
}

void EduStanfordNlpPipelineChunkAnnotationUtils_annotateChunksWithJavaUtilList_withInt_withInt_withJavaUtilMap_(id<JavaUtilList> chunks, jint start, jint end, id<JavaUtilMap> attributes) {
  EduStanfordNlpPipelineChunkAnnotationUtils_initialize();
  for (jint i = start; i < end; i++) {
    EduStanfordNlpPipelineChunkAnnotationUtils_annotateChunkWithEduStanfordNlpUtilCoreMap_withJavaUtilMap_([((id<JavaUtilList>) nil_chk(chunks)) getWithInt:i], attributes);
  }
}

void EduStanfordNlpPipelineChunkAnnotationUtils_annotateChunksWithJavaUtilList_withJavaUtilMap_(id<JavaUtilList> chunks, id<JavaUtilMap> attributes) {
  EduStanfordNlpPipelineChunkAnnotationUtils_initialize();
  for (id<EduStanfordNlpUtilCoreMap> __strong chunk in nil_chk(chunks)) {
    EduStanfordNlpPipelineChunkAnnotationUtils_annotateChunkWithEduStanfordNlpUtilCoreMap_withJavaUtilMap_(chunk, attributes);
  }
}

id<EduStanfordNlpUtilCoreMap> EduStanfordNlpPipelineChunkAnnotationUtils_createCoreMapWithEduStanfordNlpUtilCoreMap_withNSString_withInt_withInt_withEduStanfordNlpProcessCoreTokenFactory_(id<EduStanfordNlpUtilCoreMap> cm, NSString *text, jint start, jint end, id<EduStanfordNlpProcessCoreTokenFactory> factory) {
  EduStanfordNlpPipelineChunkAnnotationUtils_initialize();
  if (end > start) {
    id<EduStanfordNlpUtilCoreMap> token = ((id<EduStanfordNlpUtilCoreMap>) [((id<EduStanfordNlpProcessCoreTokenFactory>) nil_chk(factory)) makeToken]);
    JavaLangInteger *cmCharStart = [((id<EduStanfordNlpUtilCoreMap>) nil_chk(cm)) getWithIOSClass:EduStanfordNlpLingCoreAnnotations_CharacterOffsetBeginAnnotation_class_()];
    if (cmCharStart == nil) cmCharStart = JavaLangInteger_valueOfWithInt_(0);
    (void) [((id<EduStanfordNlpUtilCoreMap>) nil_chk(token)) setWithIOSClass:EduStanfordNlpLingCoreAnnotations_TextAnnotation_class_() withId:[((NSString *) nil_chk(text)) substring:start endIndex:end]];
    (void) [token setWithIOSClass:EduStanfordNlpLingCoreAnnotations_CharacterOffsetBeginAnnotation_class_() withId:JavaLangInteger_valueOfWithInt_([cmCharStart intValue] + start)];
    (void) [token setWithIOSClass:EduStanfordNlpLingCoreAnnotations_CharacterOffsetEndAnnotation_class_() withId:JavaLangInteger_valueOfWithInt_([cmCharStart intValue] + end)];
    return token;
  }
  else {
    return nil;
  }
}

void EduStanfordNlpPipelineChunkAnnotationUtils_appendCoreMapWithJavaUtilList_withEduStanfordNlpUtilCoreMap_withNSString_withInt_withInt_withEduStanfordNlpProcessCoreTokenFactory_(id<JavaUtilList> res, id<EduStanfordNlpUtilCoreMap> cm, NSString *text, jint start, jint end, id<EduStanfordNlpProcessCoreTokenFactory> factory) {
  EduStanfordNlpPipelineChunkAnnotationUtils_initialize();
  id<EduStanfordNlpUtilCoreMap> scm = ((id<EduStanfordNlpUtilCoreMap>) EduStanfordNlpPipelineChunkAnnotationUtils_createCoreMapWithEduStanfordNlpUtilCoreMap_withNSString_withInt_withInt_withEduStanfordNlpProcessCoreTokenFactory_(cm, text, start, end, factory));
  if (scm != nil) {
    [((id<JavaUtilList>) nil_chk(res)) addWithId:scm];
  }
}

id<JavaUtilList> EduStanfordNlpPipelineChunkAnnotationUtils_splitCoreMapWithJavaUtilRegexPattern_withBoolean_withEduStanfordNlpUtilCoreMap_withEduStanfordNlpProcessCoreTokenFactory_(JavaUtilRegexPattern *p, jboolean includeMatched, id<EduStanfordNlpUtilCoreMap> cm, id<EduStanfordNlpProcessCoreTokenFactory> factory) {
  EduStanfordNlpPipelineChunkAnnotationUtils_initialize();
  id<JavaUtilList> res = new_JavaUtilArrayList_init();
  NSString *text = [((id<EduStanfordNlpUtilCoreMap>) nil_chk(cm)) getWithIOSClass:EduStanfordNlpLingCoreAnnotations_TextAnnotation_class_()];
  JavaUtilRegexMatcher *m = [((JavaUtilRegexPattern *) nil_chk(p)) matcherWithJavaLangCharSequence:text];
  jint index = 0;
  while ([((JavaUtilRegexMatcher *) nil_chk(m)) find]) {
    jint start = [m start];
    jint end = [m end];
    EduStanfordNlpPipelineChunkAnnotationUtils_appendCoreMapWithJavaUtilList_withEduStanfordNlpUtilCoreMap_withNSString_withInt_withInt_withEduStanfordNlpProcessCoreTokenFactory_(res, cm, text, index, start, factory);
    if (includeMatched) {
      EduStanfordNlpPipelineChunkAnnotationUtils_appendCoreMapWithJavaUtilList_withEduStanfordNlpUtilCoreMap_withNSString_withInt_withInt_withEduStanfordNlpProcessCoreTokenFactory_(res, cm, text, start, end, factory);
    }
    index = end;
  }
  EduStanfordNlpPipelineChunkAnnotationUtils_appendCoreMapWithJavaUtilList_withEduStanfordNlpUtilCoreMap_withNSString_withInt_withInt_withEduStanfordNlpProcessCoreTokenFactory_(res, cm, text, index, ((jint) [((NSString *) nil_chk(text)) length]), factory);
  return res;
}

void EduStanfordNlpPipelineChunkAnnotationUtils_init(EduStanfordNlpPipelineChunkAnnotationUtils *self) {
  NSObject_init(self);
}

EduStanfordNlpPipelineChunkAnnotationUtils *new_EduStanfordNlpPipelineChunkAnnotationUtils_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpPipelineChunkAnnotationUtils, init)
}

EduStanfordNlpPipelineChunkAnnotationUtils *create_EduStanfordNlpPipelineChunkAnnotationUtils_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpPipelineChunkAnnotationUtils, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpPipelineChunkAnnotationUtils)
