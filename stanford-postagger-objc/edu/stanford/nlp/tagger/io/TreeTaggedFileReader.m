//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/tagger/io/TreeTaggedFileReader.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/io/NumberRangesFileFilter.h"
#include "edu/stanford/nlp/tagger/io/TaggedFileRecord.h"
#include "edu/stanford/nlp/tagger/io/TreeTaggedFileReader.h"
#include "edu/stanford/nlp/trees/DiskTreebank.h"
#include "edu/stanford/nlp/trees/LabeledScoredTreeReaderFactory.h"
#include "edu/stanford/nlp/trees/Tree.h"
#include "edu/stanford/nlp/trees/TreeFactory.h"
#include "edu/stanford/nlp/trees/TreeNormalizer.h"
#include "edu/stanford/nlp/trees/TreeReaderFactory.h"
#include "edu/stanford/nlp/trees/TreeTransformer.h"
#include "edu/stanford/nlp/trees/Treebank.h"
#include "java/lang/Iterable.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/NoSuchElementException.h"
#include "java/util/Spliterator.h"
#include "java/util/function/Consumer.h"
#include "java/util/function/Predicate.h"

@interface EduStanfordNlpTaggerIoTreeTaggedFileReader ()

- (void)findNext;

@end

__attribute__((unused)) static void EduStanfordNlpTaggerIoTreeTaggedFileReader_findNext(EduStanfordNlpTaggerIoTreeTaggedFileReader *self);

@implementation EduStanfordNlpTaggerIoTreeTaggedFileReader

- (instancetype)initWithEduStanfordNlpTaggerIoTaggedFileRecord:(EduStanfordNlpTaggerIoTaggedFileRecord *)record {
  EduStanfordNlpTaggerIoTreeTaggedFileReader_initWithEduStanfordNlpTaggerIoTaggedFileRecord_(self, record);
  return self;
}

- (id<JavaUtilIterator>)iterator {
  return self;
}

- (NSString *)filename {
  return filename_;
}

- (jboolean)hasNext {
  return next_ != nil;
}

- (id<JavaUtilList>)next {
  if (next_ == nil) {
    @throw new_JavaUtilNoSuchElementException_initWithNSString_(@"Iterator exhausted.");
  }
  EduStanfordNlpTreesTree *t = next_;
  if (normalizer_ != nil) {
    t = [normalizer_ normalizeWholeTreeWithEduStanfordNlpTreesTree:t withEduStanfordNlpTreesTreeFactory:[t treeFactory]];
  }
  if (transformer_ != nil) {
    t = [((EduStanfordNlpTreesTree *) nil_chk(t)) transformWithEduStanfordNlpTreesTreeTransformer:transformer_];
  }
  EduStanfordNlpTaggerIoTreeTaggedFileReader_findNext(self);
  return [((EduStanfordNlpTreesTree *) nil_chk(t)) taggedYield];
}

- (void)findNext {
  EduStanfordNlpTaggerIoTreeTaggedFileReader_findNext(self);
}

- (void)remove {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)forEachWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaLangIterable_forEachWithJavaUtilFunctionConsumer_(self, arg0);
}

- (id<JavaUtilSpliterator>)spliterator {
  return JavaLangIterable_spliterator(self);
}

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaUtilIterator_forEachRemainingWithJavaUtilFunctionConsumer_(self, arg0);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpTaggerIoTaggedFileRecord:);
  methods[1].selector = @selector(iterator);
  methods[2].selector = @selector(filename);
  methods[3].selector = @selector(hasNext);
  methods[4].selector = @selector(next);
  methods[5].selector = @selector(findNext);
  methods[6].selector = @selector(remove);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "treebank_", "LEduStanfordNlpTreesTreebank;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "filename_", "LNSString;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "trf_", "LEduStanfordNlpTreesTreeReaderFactory;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "transformer_", "LEduStanfordNlpTreesTreeTransformer;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "normalizer_", "LEduStanfordNlpTreesTreeNormalizer;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "treeFilter_", "LJavaUtilFunctionPredicate;", .constantValue.asLong = 0, 0x10, -1, -1, 3, -1 },
    { "treeIterator_", "LJavaUtilIterator;", .constantValue.asLong = 0, 0x10, -1, -1, 4, -1 },
    { "next_", "LEduStanfordNlpTreesTree;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpTaggerIoTaggedFileRecord;", "()Ljava/util/Iterator<Ljava/util/List<Ledu/stanford/nlp/ling/TaggedWord;>;>;", "()Ljava/util/List<Ledu/stanford/nlp/ling/TaggedWord;>;", "Ljava/util/function/Predicate<Ledu/stanford/nlp/trees/Tree;>;", "Ljava/util/Iterator<Ledu/stanford/nlp/trees/Tree;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpTaggerIoTreeTaggedFileReader = { "TreeTaggedFileReader", "edu.stanford.nlp.tagger.io", ptrTable, methods, fields, 7, 0x1, 7, 8, -1, -1, -1, -1, -1 };
  return &_EduStanfordNlpTaggerIoTreeTaggedFileReader;
}

@end

void EduStanfordNlpTaggerIoTreeTaggedFileReader_initWithEduStanfordNlpTaggerIoTaggedFileRecord_(EduStanfordNlpTaggerIoTreeTaggedFileReader *self, EduStanfordNlpTaggerIoTaggedFileRecord *record) {
  NSObject_init(self);
  self->next_ = nil;
  self->filename_ = ((EduStanfordNlpTaggerIoTaggedFileRecord *) nil_chk(record))->file_;
  self->trf_ = record->trf_ == nil ? new_EduStanfordNlpTreesLabeledScoredTreeReaderFactory_init() : record->trf_;
  self->transformer_ = record->treeTransformer_;
  self->normalizer_ = record->treeNormalizer_;
  self->treeFilter_ = record->treeFilter_;
  self->treebank_ = new_EduStanfordNlpTreesDiskTreebank_initWithEduStanfordNlpTreesTreeReaderFactory_withNSString_(self->trf_, record->encoding_);
  if (record->treeRange_ != nil) {
    [self->treebank_ loadPathWithNSString:self->filename_ withJavaIoFileFilter:record->treeRange_];
  }
  else {
    [self->treebank_ loadPathWithNSString:self->filename_];
  }
  self->treeIterator_ = [self->treebank_ iterator];
  EduStanfordNlpTaggerIoTreeTaggedFileReader_findNext(self);
}

EduStanfordNlpTaggerIoTreeTaggedFileReader *new_EduStanfordNlpTaggerIoTreeTaggedFileReader_initWithEduStanfordNlpTaggerIoTaggedFileRecord_(EduStanfordNlpTaggerIoTaggedFileRecord *record) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTaggerIoTreeTaggedFileReader, initWithEduStanfordNlpTaggerIoTaggedFileRecord_, record)
}

EduStanfordNlpTaggerIoTreeTaggedFileReader *create_EduStanfordNlpTaggerIoTreeTaggedFileReader_initWithEduStanfordNlpTaggerIoTaggedFileRecord_(EduStanfordNlpTaggerIoTaggedFileRecord *record) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTaggerIoTreeTaggedFileReader, initWithEduStanfordNlpTaggerIoTaggedFileRecord_, record)
}

void EduStanfordNlpTaggerIoTreeTaggedFileReader_findNext(EduStanfordNlpTaggerIoTreeTaggedFileReader *self) {
  while ([((id<JavaUtilIterator>) nil_chk(self->treeIterator_)) hasNext]) {
    self->next_ = [self->treeIterator_ next];
    if (self->treeFilter_ == nil || [self->treeFilter_ testWithId:self->next_]) {
      return;
    }
  }
  self->next_ = nil;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTaggerIoTreeTaggedFileReader)
