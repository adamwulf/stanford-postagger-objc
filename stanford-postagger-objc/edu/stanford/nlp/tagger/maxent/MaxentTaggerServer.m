//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/tagger/maxent/MaxentTaggerServer.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/io/EncodingPrintWriter.h"
#include "edu/stanford/nlp/tagger/maxent/MaxentTagger.h"
#include "edu/stanford/nlp/tagger/maxent/MaxentTaggerServer.h"
#include "edu/stanford/nlp/tagger/maxent/TaggerConfig.h"
#include "edu/stanford/nlp/util/StringUtils.h"
#include "java/io/BufferedReader.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/InputStreamReader.h"
#include "java/io/OutputStream.h"
#include "java/io/OutputStreamWriter.h"
#include "java/io/PrintStream.h"
#include "java/io/PrintWriter.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/net/InetAddress.h"
#include "java/net/ServerSocket.h"
#include "java/net/Socket.h"
#include "java/net/UnknownHostException.h"
#include "java/util/Properties.h"

@interface EduStanfordNlpTaggerMaxentMaxentTaggerServer () {
 @public
  jboolean DEBUG__;
  NSString *charset_;
  JavaNetServerSocket *listener_;
  EduStanfordNlpTaggerMaxentMaxentTagger_TaggerWrapper *tagger_;
}

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpTaggerMaxentMaxentTaggerServer, charset_, NSString *)
J2OBJC_FIELD_SETTER(EduStanfordNlpTaggerMaxentMaxentTaggerServer, listener_, JavaNetServerSocket *)
J2OBJC_FIELD_SETTER(EduStanfordNlpTaggerMaxentMaxentTaggerServer, tagger_, EduStanfordNlpTaggerMaxentMaxentTagger_TaggerWrapper *)

inline NSString *EduStanfordNlpTaggerMaxentMaxentTaggerServer_get_USAGE();
static NSString *EduStanfordNlpTaggerMaxentMaxentTaggerServer_USAGE = @"Usage: MaxentTaggerServer [-model file|-client] -port portNumber [other MaxentTagger options]";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpTaggerMaxentMaxentTaggerServer, USAGE, NSString *)

@interface EduStanfordNlpTaggerMaxentMaxentTaggerServer_Session : JavaLangThread {
 @public
  EduStanfordNlpTaggerMaxentMaxentTaggerServer *this$0_;
  JavaNetSocket *client_;
  JavaIoBufferedReader *in_;
  JavaIoPrintWriter *out_;
}

- (instancetype)initWithEduStanfordNlpTaggerMaxentMaxentTaggerServer:(EduStanfordNlpTaggerMaxentMaxentTaggerServer *)outer$
                                                   withJavaNetSocket:(JavaNetSocket *)socket;

- (void)run;

- (void)close;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpTaggerMaxentMaxentTaggerServer_Session)

J2OBJC_FIELD_SETTER(EduStanfordNlpTaggerMaxentMaxentTaggerServer_Session, this$0_, EduStanfordNlpTaggerMaxentMaxentTaggerServer *)
J2OBJC_FIELD_SETTER(EduStanfordNlpTaggerMaxentMaxentTaggerServer_Session, client_, JavaNetSocket *)
J2OBJC_FIELD_SETTER(EduStanfordNlpTaggerMaxentMaxentTaggerServer_Session, in_, JavaIoBufferedReader *)
J2OBJC_FIELD_SETTER(EduStanfordNlpTaggerMaxentMaxentTaggerServer_Session, out_, JavaIoPrintWriter *)

__attribute__((unused)) static void EduStanfordNlpTaggerMaxentMaxentTaggerServer_Session_initWithEduStanfordNlpTaggerMaxentMaxentTaggerServer_withJavaNetSocket_(EduStanfordNlpTaggerMaxentMaxentTaggerServer_Session *self, EduStanfordNlpTaggerMaxentMaxentTaggerServer *outer$, JavaNetSocket *socket);

__attribute__((unused)) static EduStanfordNlpTaggerMaxentMaxentTaggerServer_Session *new_EduStanfordNlpTaggerMaxentMaxentTaggerServer_Session_initWithEduStanfordNlpTaggerMaxentMaxentTaggerServer_withJavaNetSocket_(EduStanfordNlpTaggerMaxentMaxentTaggerServer *outer$, JavaNetSocket *socket) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpTaggerMaxentMaxentTaggerServer_Session *create_EduStanfordNlpTaggerMaxentMaxentTaggerServer_Session_initWithEduStanfordNlpTaggerMaxentMaxentTaggerServer_withJavaNetSocket_(EduStanfordNlpTaggerMaxentMaxentTaggerServer *outer$, JavaNetSocket *socket);

__attribute__((unused)) static void EduStanfordNlpTaggerMaxentMaxentTaggerServer_Session_close(EduStanfordNlpTaggerMaxentMaxentTaggerServer_Session *self);

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpTaggerMaxentMaxentTaggerServer_Session)

@interface EduStanfordNlpTaggerMaxentMaxentTaggerServer_TaggerClient : NSObject

- (instancetype)init;

+ (void)communicateWithMaxentTaggerServerWithNSString:(NSString *)host
                                              withInt:(jint)port
                                         withNSString:(NSString *)charset;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpTaggerMaxentMaxentTaggerServer_TaggerClient)

__attribute__((unused)) static void EduStanfordNlpTaggerMaxentMaxentTaggerServer_TaggerClient_init(EduStanfordNlpTaggerMaxentMaxentTaggerServer_TaggerClient *self);

__attribute__((unused)) static EduStanfordNlpTaggerMaxentMaxentTaggerServer_TaggerClient *new_EduStanfordNlpTaggerMaxentMaxentTaggerServer_TaggerClient_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpTaggerMaxentMaxentTaggerServer_TaggerClient *create_EduStanfordNlpTaggerMaxentMaxentTaggerServer_TaggerClient_init();

__attribute__((unused)) static void EduStanfordNlpTaggerMaxentMaxentTaggerServer_TaggerClient_communicateWithMaxentTaggerServerWithNSString_withInt_withNSString_(NSString *host, jint port, NSString *charset);

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpTaggerMaxentMaxentTaggerServer_TaggerClient)

@implementation EduStanfordNlpTaggerMaxentMaxentTaggerServer

- (instancetype)initWithInt:(jint)port
withEduStanfordNlpTaggerMaxentMaxentTagger_TaggerWrapper:(EduStanfordNlpTaggerMaxentMaxentTagger_TaggerWrapper *)tagger
               withNSString:(NSString *)charset {
  EduStanfordNlpTaggerMaxentMaxentTaggerServer_initWithInt_withEduStanfordNlpTaggerMaxentMaxentTagger_TaggerWrapper_withNSString_(self, port, tagger, charset);
  return self;
}

- (void)run {
  if (DEBUG__) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"Starting server loop"];
  }
  JavaNetSocket *client = nil;
  while (true) {
    @try {
      client = [((JavaNetServerSocket *) nil_chk(listener_)) accept];
      if (DEBUG__) {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printWithNSString:@"Accepted request from "];
        [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:[((JavaNetInetAddress *) nil_chk([((JavaNetSocket *) nil_chk(client)) getInetAddress])) getHostName]];
      }
      (void) new_EduStanfordNlpTaggerMaxentMaxentTaggerServer_Session_initWithEduStanfordNlpTaggerMaxentMaxentTaggerServer_withJavaNetSocket_(self, client);
    }
    @catch (JavaLangException *e1) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"MaxentTaggerServer: couldn't accept"];
      [((JavaLangException *) nil_chk(e1)) printStackTraceWithJavaIoPrintStream:JreLoadStatic(JavaLangSystem, err)];
      @try {
        [((JavaNetSocket *) nil_chk(client)) close];
      }
      @catch (JavaLangException *e2) {
        [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:@"MaxentTaggerServer: couldn't close client"];
        [((JavaLangException *) nil_chk(e2)) printStackTraceWithJavaIoPrintStream:JreLoadStatic(JavaLangSystem, err)];
      }
    }
  }
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  EduStanfordNlpTaggerMaxentMaxentTaggerServer_mainWithNSStringArray_(args);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 2, 3, 4, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:withEduStanfordNlpTaggerMaxentMaxentTagger_TaggerWrapper:withNSString:);
  methods[1].selector = @selector(run);
  methods[2].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DEBUG__", "Z", .constantValue.asLong = 0, 0x2, 5, -1, -1, -1 },
    { "charset_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "listener_", "LJavaNetServerSocket;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "tagger_", "LEduStanfordNlpTaggerMaxentMaxentTagger_TaggerWrapper;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "USAGE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 6, -1, -1 },
  };
  static const void *ptrTable[] = { "ILEduStanfordNlpTaggerMaxentMaxentTagger_TaggerWrapper;LNSString;", "LJavaIoIOException;", "main", "[LNSString;", "LJavaLangException;", "DEBUG", &EduStanfordNlpTaggerMaxentMaxentTaggerServer_USAGE, "LEduStanfordNlpTaggerMaxentMaxentTaggerServer_Session;LEduStanfordNlpTaggerMaxentMaxentTaggerServer_TaggerClient;" };
  static const J2ObjcClassInfo _EduStanfordNlpTaggerMaxentMaxentTaggerServer = { "MaxentTaggerServer", "edu.stanford.nlp.tagger.maxent", ptrTable, methods, fields, 7, 0x1, 3, 5, -1, 7, -1, -1, -1 };
  return &_EduStanfordNlpTaggerMaxentMaxentTaggerServer;
}

@end

void EduStanfordNlpTaggerMaxentMaxentTaggerServer_initWithInt_withEduStanfordNlpTaggerMaxentMaxentTagger_TaggerWrapper_withNSString_(EduStanfordNlpTaggerMaxentMaxentTaggerServer *self, jint port, EduStanfordNlpTaggerMaxentMaxentTagger_TaggerWrapper *tagger, NSString *charset) {
  NSObject_init(self);
  self->DEBUG__ = false;
  self->tagger_ = tagger;
  self->listener_ = new_JavaNetServerSocket_initWithInt_(port);
  self->charset_ = charset;
}

EduStanfordNlpTaggerMaxentMaxentTaggerServer *new_EduStanfordNlpTaggerMaxentMaxentTaggerServer_initWithInt_withEduStanfordNlpTaggerMaxentMaxentTagger_TaggerWrapper_withNSString_(jint port, EduStanfordNlpTaggerMaxentMaxentTagger_TaggerWrapper *tagger, NSString *charset) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTaggerMaxentMaxentTaggerServer, initWithInt_withEduStanfordNlpTaggerMaxentMaxentTagger_TaggerWrapper_withNSString_, port, tagger, charset)
}

EduStanfordNlpTaggerMaxentMaxentTaggerServer *create_EduStanfordNlpTaggerMaxentMaxentTaggerServer_initWithInt_withEduStanfordNlpTaggerMaxentMaxentTagger_TaggerWrapper_withNSString_(jint port, EduStanfordNlpTaggerMaxentMaxentTagger_TaggerWrapper *tagger, NSString *charset) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTaggerMaxentMaxentTaggerServer, initWithInt_withEduStanfordNlpTaggerMaxentMaxentTagger_TaggerWrapper_withNSString_, port, tagger, charset)
}

void EduStanfordNlpTaggerMaxentMaxentTaggerServer_mainWithNSStringArray_(IOSObjectArray *args) {
  EduStanfordNlpTaggerMaxentMaxentTaggerServer_initialize();
  if (((IOSObjectArray *) nil_chk(args))->size_ == 0) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:EduStanfordNlpTaggerMaxentMaxentTaggerServer_USAGE];
    return;
  }
  JavaUtilProperties *props = EduStanfordNlpUtilStringUtils_argsToPropertiesWithNSStringArray_(args);
  NSString *client = [((JavaUtilProperties *) nil_chk(props)) getPropertyWithNSString:@"client"];
  NSString *portStr = [props getPropertyWithNSString:@"port"];
  if (portStr == nil || [portStr isEqual:@""]) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:EduStanfordNlpTaggerMaxentMaxentTaggerServer_USAGE];
    return;
  }
  jint port = 0;
  @try {
    port = JavaLangInteger_parseIntWithNSString_(portStr);
  }
  @catch (JavaLangNumberFormatException *e) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"Non-numerical port"];
    [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:EduStanfordNlpTaggerMaxentMaxentTaggerServer_USAGE];
    JavaLangSystem_exitWithInt_(1);
  }
  if (client != nil && ![client isEqual:@""]) {
    NSString *host = [props getPropertyWithNSString:@"host"];
    NSString *encoding = [props getPropertyWithNSString:@"encoding"];
    if (encoding == nil || [@"" isEqual:encoding]) {
      encoding = @"utf-8";
    }
    EduStanfordNlpTaggerMaxentMaxentTaggerServer_TaggerClient_communicateWithMaxentTaggerServerWithNSString_withInt_withNSString_(host, port, encoding);
  }
  else {
    EduStanfordNlpTaggerMaxentTaggerConfig *config = new_EduStanfordNlpTaggerMaxentTaggerConfig_initWithNSStringArray_(args);
    EduStanfordNlpTaggerMaxentMaxentTagger *tagger = new_EduStanfordNlpTaggerMaxentMaxentTagger_initWithNSString_withJavaUtilProperties_([config getModel], config);
    EduStanfordNlpTaggerMaxentMaxentTagger_TaggerWrapper *wrapper = new_EduStanfordNlpTaggerMaxentMaxentTagger_TaggerWrapper_initWithEduStanfordNlpTaggerMaxentMaxentTagger_(tagger);
    [new_EduStanfordNlpTaggerMaxentMaxentTaggerServer_initWithInt_withEduStanfordNlpTaggerMaxentMaxentTagger_TaggerWrapper_withNSString_(port, wrapper, [config getEncoding]) run];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTaggerMaxentMaxentTaggerServer)

@implementation EduStanfordNlpTaggerMaxentMaxentTaggerServer_Session

- (instancetype)initWithEduStanfordNlpTaggerMaxentMaxentTaggerServer:(EduStanfordNlpTaggerMaxentMaxentTaggerServer *)outer$
                                                   withJavaNetSocket:(JavaNetSocket *)socket {
  EduStanfordNlpTaggerMaxentMaxentTaggerServer_Session_initWithEduStanfordNlpTaggerMaxentMaxentTaggerServer_withJavaNetSocket_(self, outer$, socket);
  return self;
}

- (void)run {
  if (this$0_->DEBUG__) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"Created new session"];
  }
  @try {
    NSString *input = [((JavaIoBufferedReader *) nil_chk(in_)) readLine];
    if (this$0_->DEBUG__) {
      EduStanfordNlpIoEncodingPrintWriter_err_printlnWithNSString_withNSString_(JreStrcat("$$C", @"Receiving: \"", input, '"'), this$0_->charset_);
    }
    if (!(input == nil)) {
      NSString *output = [((EduStanfordNlpTaggerMaxentMaxentTagger_TaggerWrapper *) nil_chk(this$0_->tagger_)) applyWithId:input];
      if (this$0_->DEBUG__) {
        EduStanfordNlpIoEncodingPrintWriter_err_printlnWithNSString_withNSString_(JreStrcat("$$C", @"Sending: \"", output, '"'), this$0_->charset_);
      }
      [((JavaIoPrintWriter *) nil_chk(out_)) printWithNSString:output];
      [((JavaIoPrintWriter *) nil_chk(out_)) flush];
    }
    EduStanfordNlpTaggerMaxentMaxentTaggerServer_Session_close(self);
  }
  @catch (JavaIoIOException *e) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"MaxentTaggerServer:Session: couldn't read input or error running POS tagger"];
    [((JavaIoIOException *) nil_chk(e)) printStackTraceWithJavaIoPrintStream:JreLoadStatic(JavaLangSystem, err)];
  }
  @catch (JavaLangNullPointerException *npe) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"MaxentTaggerServer:Session: connection closed by peer"];
    [((JavaLangNullPointerException *) nil_chk(npe)) printStackTraceWithJavaIoPrintStream:JreLoadStatic(JavaLangSystem, err)];
  }
}

- (void)close {
  EduStanfordNlpTaggerMaxentMaxentTaggerServer_Session_close(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpTaggerMaxentMaxentTaggerServer:withJavaNetSocket:);
  methods[1].selector = @selector(run);
  methods[2].selector = @selector(close);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LEduStanfordNlpTaggerMaxentMaxentTaggerServer;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "client_", "LJavaNetSocket;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "in_", "LJavaIoBufferedReader;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "out_", "LJavaIoPrintWriter;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpTaggerMaxentMaxentTaggerServer;LJavaNetSocket;", "LEduStanfordNlpTaggerMaxentMaxentTaggerServer;" };
  static const J2ObjcClassInfo _EduStanfordNlpTaggerMaxentMaxentTaggerServer_Session = { "Session", "edu.stanford.nlp.tagger.maxent", ptrTable, methods, fields, 7, 0x2, 3, 4, 1, -1, -1, -1, -1 };
  return &_EduStanfordNlpTaggerMaxentMaxentTaggerServer_Session;
}

@end

void EduStanfordNlpTaggerMaxentMaxentTaggerServer_Session_initWithEduStanfordNlpTaggerMaxentMaxentTaggerServer_withJavaNetSocket_(EduStanfordNlpTaggerMaxentMaxentTaggerServer_Session *self, EduStanfordNlpTaggerMaxentMaxentTaggerServer *outer$, JavaNetSocket *socket) {
  self->this$0_ = outer$;
  JavaLangThread_init(self);
  self->client_ = socket;
  self->in_ = new_JavaIoBufferedReader_initWithJavaIoReader_(new_JavaIoInputStreamReader_initWithJavaIoInputStream_withNSString_([((JavaNetSocket *) nil_chk(self->client_)) getInputStream], outer$->charset_));
  self->out_ = new_JavaIoPrintWriter_initWithJavaIoWriter_(new_JavaIoOutputStreamWriter_initWithJavaIoOutputStream_withNSString_([self->client_ getOutputStream], outer$->charset_));
  [self start];
}

EduStanfordNlpTaggerMaxentMaxentTaggerServer_Session *new_EduStanfordNlpTaggerMaxentMaxentTaggerServer_Session_initWithEduStanfordNlpTaggerMaxentMaxentTaggerServer_withJavaNetSocket_(EduStanfordNlpTaggerMaxentMaxentTaggerServer *outer$, JavaNetSocket *socket) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTaggerMaxentMaxentTaggerServer_Session, initWithEduStanfordNlpTaggerMaxentMaxentTaggerServer_withJavaNetSocket_, outer$, socket)
}

EduStanfordNlpTaggerMaxentMaxentTaggerServer_Session *create_EduStanfordNlpTaggerMaxentMaxentTaggerServer_Session_initWithEduStanfordNlpTaggerMaxentMaxentTaggerServer_withJavaNetSocket_(EduStanfordNlpTaggerMaxentMaxentTaggerServer *outer$, JavaNetSocket *socket) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTaggerMaxentMaxentTaggerServer_Session, initWithEduStanfordNlpTaggerMaxentMaxentTaggerServer_withJavaNetSocket_, outer$, socket)
}

void EduStanfordNlpTaggerMaxentMaxentTaggerServer_Session_close(EduStanfordNlpTaggerMaxentMaxentTaggerServer_Session *self) {
  @try {
    [((JavaIoBufferedReader *) nil_chk(self->in_)) close];
    [((JavaIoPrintWriter *) nil_chk(self->out_)) close];
    [((JavaNetSocket *) nil_chk(self->client_)) close];
  }
  @catch (JavaLangException *e) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"MaxentTaggerServer:Session: can't close session"];
    [((JavaLangException *) nil_chk(e)) printStackTrace];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTaggerMaxentMaxentTaggerServer_Session)

@implementation EduStanfordNlpTaggerMaxentMaxentTaggerServer_TaggerClient

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpTaggerMaxentMaxentTaggerServer_TaggerClient_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)communicateWithMaxentTaggerServerWithNSString:(NSString *)host
                                              withInt:(jint)port
                                         withNSString:(NSString *)charset {
  EduStanfordNlpTaggerMaxentMaxentTaggerServer_TaggerClient_communicateWithMaxentTaggerServerWithNSString_withInt_withNSString_(host, port, charset);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 0, 1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(communicateWithMaxentTaggerServerWithNSString:withInt:withNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "communicateWithMaxentTaggerServer", "LNSString;ILNSString;", "LJavaIoIOException;", "LEduStanfordNlpTaggerMaxentMaxentTaggerServer;" };
  static const J2ObjcClassInfo _EduStanfordNlpTaggerMaxentMaxentTaggerServer_TaggerClient = { "TaggerClient", "edu.stanford.nlp.tagger.maxent", ptrTable, methods, NULL, 7, 0xa, 2, 0, 3, -1, -1, -1, -1 };
  return &_EduStanfordNlpTaggerMaxentMaxentTaggerServer_TaggerClient;
}

@end

void EduStanfordNlpTaggerMaxentMaxentTaggerServer_TaggerClient_init(EduStanfordNlpTaggerMaxentMaxentTaggerServer_TaggerClient *self) {
  NSObject_init(self);
}

EduStanfordNlpTaggerMaxentMaxentTaggerServer_TaggerClient *new_EduStanfordNlpTaggerMaxentMaxentTaggerServer_TaggerClient_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpTaggerMaxentMaxentTaggerServer_TaggerClient, init)
}

EduStanfordNlpTaggerMaxentMaxentTaggerServer_TaggerClient *create_EduStanfordNlpTaggerMaxentMaxentTaggerServer_TaggerClient_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTaggerMaxentMaxentTaggerServer_TaggerClient, init)
}

void EduStanfordNlpTaggerMaxentMaxentTaggerServer_TaggerClient_communicateWithMaxentTaggerServerWithNSString_withInt_withNSString_(NSString *host, jint port, NSString *charset) {
  EduStanfordNlpTaggerMaxentMaxentTaggerServer_TaggerClient_initialize();
  if (host == nil) {
    host = @"localhost";
  }
  JavaIoBufferedReader *stdIn = new_JavaIoBufferedReader_initWithJavaIoReader_(new_JavaIoInputStreamReader_initWithJavaIoInputStream_withNSString_(JreLoadStatic(JavaLangSystem, in), charset));
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"Input some text and press RETURN to POS tag it, or just RETURN to finish."];
  for (NSString *userInput; (userInput = [stdIn readLine]) != nil && ![((NSString *) nil_chk(userInput)) matches:@"\\n?"]; ) {
    @try {
      JavaNetSocket *socket = new_JavaNetSocket_initWithNSString_withInt_(host, port);
      JavaIoPrintWriter *out = new_JavaIoPrintWriter_initWithJavaIoWriter_withBoolean_(new_JavaIoOutputStreamWriter_initWithJavaIoOutputStream_withNSString_([socket getOutputStream], charset), true);
      JavaIoBufferedReader *in = new_JavaIoBufferedReader_initWithJavaIoReader_(new_JavaIoInputStreamReader_initWithJavaIoInputStream_withNSString_([socket getInputStream], charset));
      JavaIoPrintWriter *stdOut = new_JavaIoPrintWriter_initWithJavaIoWriter_withBoolean_(new_JavaIoOutputStreamWriter_initWithJavaIoOutputStream_withNSString_(JreLoadStatic(JavaLangSystem, out), charset), true);
      [out printlnWithNSString:userInput];
      [stdOut printlnWithNSString:[in readLine]];
      while ([in ready]) {
        [stdOut printlnWithNSString:[in readLine]];
      }
      [in close];
      [socket close];
    }
    @catch (JavaNetUnknownHostException *e) {
      [JreLoadStatic(JavaLangSystem, err) printWithNSString:@"Cannot find host: "];
      [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:host];
      return;
    }
    @catch (JavaIoIOException *e) {
      [JreLoadStatic(JavaLangSystem, err) printWithNSString:@"I/O error in the connection to: "];
      [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:host];
      return;
    }
  }
  [stdIn close];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTaggerMaxentMaxentTaggerServer_TaggerClient)
