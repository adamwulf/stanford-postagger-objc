//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/tagger/maxent/Extractor.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/tagger/maxent/Extractor.h"
#include "edu/stanford/nlp/tagger/maxent/History.h"
#include "edu/stanford/nlp/tagger/maxent/MaxentTagger.h"
#include "edu/stanford/nlp/tagger/maxent/PairsHolder.h"
#include "java/lang/ArrayIndexOutOfBoundsException.h"
#include "java/lang/Integer.h"
#include "java/lang/NumberFormatException.h"

@interface EduStanfordNlpTaggerMaxentExtractor () {
 @public
  jboolean isTag_;
}

@end

inline jlong EduStanfordNlpTaggerMaxentExtractor_get_serialVersionUID();
#define EduStanfordNlpTaggerMaxentExtractor_serialVersionUID -4694133872973560083LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpTaggerMaxentExtractor, serialVersionUID, jlong)

NSString *EduStanfordNlpTaggerMaxentExtractor_zeroSt = @"0";

@implementation EduStanfordNlpTaggerMaxentExtractor

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpTaggerMaxentExtractor_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithInt:(jint)position
                withBoolean:(jboolean)isTag {
  EduStanfordNlpTaggerMaxentExtractor_initWithInt_withBoolean_(self, position, isTag);
  return self;
}

- (void)setGlobalHolderWithEduStanfordNlpTaggerMaxentMaxentTagger:(EduStanfordNlpTaggerMaxentMaxentTagger *)tagger {
}

- (jboolean)preconditionWithNSString:(NSString *)tag {
  return true;
}

- (jint)leftContext {
  if (isTag_) {
    if (position_ < 0) {
      return -position_;
    }
  }
  return 0;
}

- (jint)rightContext {
  if (isTag_) {
    if (position_ > 0) {
      return position_;
    }
  }
  return 0;
}

- (NSString *)extractWithEduStanfordNlpTaggerMaxentHistory:(EduStanfordNlpTaggerMaxentHistory *)h {
  return [self extractWithEduStanfordNlpTaggerMaxentHistory:h withEduStanfordNlpTaggerMaxentPairsHolder:((EduStanfordNlpTaggerMaxentHistory *) nil_chk(h))->pairs_];
}

- (jboolean)isDynamic {
  return isTag_;
}

- (jboolean)isLocal {
  return !isTag_ && position_ == 0;
}

- (NSString *)extractWithEduStanfordNlpTaggerMaxentHistory:(EduStanfordNlpTaggerMaxentHistory *)h
                 withEduStanfordNlpTaggerMaxentPairsHolder:(EduStanfordNlpTaggerMaxentPairsHolder *)pH {
  return isTag_ ? [((EduStanfordNlpTaggerMaxentPairsHolder *) nil_chk(pH)) getTagWithEduStanfordNlpTaggerMaxentHistory:h withInt:position_] : [((EduStanfordNlpTaggerMaxentPairsHolder *) nil_chk(pH)) getWordWithEduStanfordNlpTaggerMaxentHistory:h withInt:position_];
}

- (NSString *)extractLVWithEduStanfordNlpTaggerMaxentHistory:(EduStanfordNlpTaggerMaxentHistory *)h
                   withEduStanfordNlpTaggerMaxentPairsHolder:(EduStanfordNlpTaggerMaxentPairsHolder *)pH {
  jint start = ((EduStanfordNlpTaggerMaxentHistory *) nil_chk(h))->start_;
  NSString *lastverb = @"NA";
  jint current = h->current_;
  jint index = current - 1;
  while (index >= start) {
    NSString *tag = [((EduStanfordNlpTaggerMaxentPairsHolder *) nil_chk(pH)) getTagWithInt:index];
    if ([((NSString *) nil_chk(tag)) hasPrefix:@"VB"]) {
      lastverb = [pH getWordWithInt:index];
      break;
    }
    if ([tag hasPrefix:@","]) {
      break;
    }
    index--;
  }
  return lastverb;
}

- (NSString *)extractLVWithEduStanfordNlpTaggerMaxentHistory:(EduStanfordNlpTaggerMaxentHistory *)h
                   withEduStanfordNlpTaggerMaxentPairsHolder:(EduStanfordNlpTaggerMaxentPairsHolder *)pH
                                                     withInt:(jint)bound {
  jint start = ((EduStanfordNlpTaggerMaxentHistory *) nil_chk(h))->start_;
  NSString *lastverb = @"NA";
  jint current = h->current_;
  jint index = current - 1;
  while ((index >= start) && (index >= current - bound)) {
    NSString *tag = [((EduStanfordNlpTaggerMaxentPairsHolder *) nil_chk(pH)) getTagWithInt:index];
    if ([((NSString *) nil_chk(tag)) hasPrefix:@"VB"]) {
      lastverb = [pH getWordWithInt:index];
      break;
    }
    if ([tag hasPrefix:@","]) {
      break;
    }
    index--;
  }
  return lastverb;
}

- (NSString *)extractWithEduStanfordNlpTaggerMaxentHistory:(EduStanfordNlpTaggerMaxentHistory *)h
                 withEduStanfordNlpTaggerMaxentPairsHolder:(EduStanfordNlpTaggerMaxentPairsHolder *)pH
                                                   withInt:(jint)bound {
  return [self extractWithEduStanfordNlpTaggerMaxentHistory:h withEduStanfordNlpTaggerMaxentPairsHolder:pH];
}

- (NSString *)description {
  NSString *cl = [[self getClass] getName];
  jint ind = [((NSString *) nil_chk(cl)) lastIndexOf:'.'];
  NSString *args = (position_ == JavaLangInteger_MAX_VALUE) ? @"" : (JreStrcat("IC$", position_, ',', (isTag_ ? @"tag" : @"word")));
  return JreStrcat("$C$C", [cl substring:ind + 1], '(', args, ')');
}

+ (NSString *)getParenthesizedArgWithNSString:(NSString *)str
                                      withInt:(jint)num {
  return EduStanfordNlpTaggerMaxentExtractor_getParenthesizedArgWithNSString_withInt_(str, num);
}

+ (jint)getParenthesizedNumWithNSString:(NSString *)str
                                withInt:(jint)num {
  return EduStanfordNlpTaggerMaxentExtractor_getParenthesizedNumWithNSString_withInt_(str, num);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x10, 5, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, 5, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, 8, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, 8, 9, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, 5, 9, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 10, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x8, 11, 12, -1, -1, -1, -1 },
    { NULL, "I", 0x8, 13, 12, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithInt:withBoolean:);
  methods[2].selector = @selector(setGlobalHolderWithEduStanfordNlpTaggerMaxentMaxentTagger:);
  methods[3].selector = @selector(preconditionWithNSString:);
  methods[4].selector = @selector(leftContext);
  methods[5].selector = @selector(rightContext);
  methods[6].selector = @selector(extractWithEduStanfordNlpTaggerMaxentHistory:);
  methods[7].selector = @selector(isDynamic);
  methods[8].selector = @selector(isLocal);
  methods[9].selector = @selector(extractWithEduStanfordNlpTaggerMaxentHistory:withEduStanfordNlpTaggerMaxentPairsHolder:);
  methods[10].selector = @selector(extractLVWithEduStanfordNlpTaggerMaxentHistory:withEduStanfordNlpTaggerMaxentPairsHolder:);
  methods[11].selector = @selector(extractLVWithEduStanfordNlpTaggerMaxentHistory:withEduStanfordNlpTaggerMaxentPairsHolder:withInt:);
  methods[12].selector = @selector(extractWithEduStanfordNlpTaggerMaxentHistory:withEduStanfordNlpTaggerMaxentPairsHolder:withInt:);
  methods[13].selector = @selector(description);
  methods[14].selector = @selector(getParenthesizedArgWithNSString:withInt:);
  methods[15].selector = @selector(getParenthesizedNumWithNSString:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpTaggerMaxentExtractor_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "zeroSt", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 14, -1, -1 },
    { "position_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "isTag_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "IZ", "setGlobalHolder", "LEduStanfordNlpTaggerMaxentMaxentTagger;", "precondition", "LNSString;", "extract", "LEduStanfordNlpTaggerMaxentHistory;", "LEduStanfordNlpTaggerMaxentHistory;LEduStanfordNlpTaggerMaxentPairsHolder;", "extractLV", "LEduStanfordNlpTaggerMaxentHistory;LEduStanfordNlpTaggerMaxentPairsHolder;I", "toString", "getParenthesizedArg", "LNSString;I", "getParenthesizedNum", &EduStanfordNlpTaggerMaxentExtractor_zeroSt };
  static const J2ObjcClassInfo _EduStanfordNlpTaggerMaxentExtractor = { "Extractor", "edu.stanford.nlp.tagger.maxent", ptrTable, methods, fields, 7, 0x1, 16, 4, -1, -1, -1, -1, -1 };
  return &_EduStanfordNlpTaggerMaxentExtractor;
}

@end

void EduStanfordNlpTaggerMaxentExtractor_init(EduStanfordNlpTaggerMaxentExtractor *self) {
  EduStanfordNlpTaggerMaxentExtractor_initWithInt_withBoolean_(self, JavaLangInteger_MAX_VALUE, false);
}

EduStanfordNlpTaggerMaxentExtractor *new_EduStanfordNlpTaggerMaxentExtractor_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpTaggerMaxentExtractor, init)
}

EduStanfordNlpTaggerMaxentExtractor *create_EduStanfordNlpTaggerMaxentExtractor_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTaggerMaxentExtractor, init)
}

void EduStanfordNlpTaggerMaxentExtractor_initWithInt_withBoolean_(EduStanfordNlpTaggerMaxentExtractor *self, jint position, jboolean isTag) {
  NSObject_init(self);
  self->position_ = position;
  self->isTag_ = isTag;
}

EduStanfordNlpTaggerMaxentExtractor *new_EduStanfordNlpTaggerMaxentExtractor_initWithInt_withBoolean_(jint position, jboolean isTag) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTaggerMaxentExtractor, initWithInt_withBoolean_, position, isTag)
}

EduStanfordNlpTaggerMaxentExtractor *create_EduStanfordNlpTaggerMaxentExtractor_initWithInt_withBoolean_(jint position, jboolean isTag) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTaggerMaxentExtractor, initWithInt_withBoolean_, position, isTag)
}

NSString *EduStanfordNlpTaggerMaxentExtractor_getParenthesizedArgWithNSString_withInt_(NSString *str, jint num) {
  EduStanfordNlpTaggerMaxentExtractor_initialize();
  IOSObjectArray *args = [((NSString *) nil_chk(str)) split:@"\\s*[,()]\\s*"];
  if (((IOSObjectArray *) nil_chk(args))->size_ <= num) {
    return nil;
  }
  return IOSObjectArray_Get(args, num);
}

jint EduStanfordNlpTaggerMaxentExtractor_getParenthesizedNumWithNSString_withInt_(NSString *str, jint num) {
  EduStanfordNlpTaggerMaxentExtractor_initialize();
  IOSObjectArray *args = [((NSString *) nil_chk(str)) split:@"\\s*[,()]\\s*"];
  jint ans = 0;
  @try {
    ans = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(nil_chk(args), num));
  }
  @catch (JavaLangNumberFormatException *nfe) {
  }
  @catch (JavaLangArrayIndexOutOfBoundsException *aioobe) {
  }
  return ans;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTaggerMaxentExtractor)
