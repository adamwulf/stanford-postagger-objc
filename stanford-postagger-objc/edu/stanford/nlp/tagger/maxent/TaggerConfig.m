//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/tagger/maxent/TaggerConfig.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/io/IOUtils.h"
#include "edu/stanford/nlp/io/RuntimeIOException.h"
#include "edu/stanford/nlp/tagger/maxent/TaggerConfig.h"
#include "edu/stanford/nlp/util/Generics.h"
#include "edu/stanford/nlp/util/StringUtils.h"
#include "java/io/DataInputStream.h"
#include "java/io/InputStream.h"
#include "java/io/ObjectInputStream.h"
#include "java/io/ObjectOutputStream.h"
#include "java/io/OutputStream.h"
#include "java/io/PrintStream.h"
#include "java/io/PrintWriter.h"
#include "java/io/StringWriter.h"
#include "java/lang/Boolean.h"
#include "java/lang/Double.h"
#include "java/lang/Enum.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/util/Map.h"
#include "java/util/Properties.h"

@interface EduStanfordNlpTaggerMaxentTaggerConfig ()

- (instancetype)init;

+ (IOSObjectArray *)wsvStringToStringArrayWithNSString:(NSString *)str;

- (void)dumpWithJavaIoPrintWriter:(JavaIoPrintWriter *)pw;

+ (void)printGenPropsWithJavaIoPrintStream:(JavaIoPrintStream *)outArg;

@end

inline jlong EduStanfordNlpTaggerMaxentTaggerConfig_get_serialVersionUID();
#define EduStanfordNlpTaggerMaxentTaggerConfig_serialVersionUID -4136407850147157497LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpTaggerMaxentTaggerConfig, serialVersionUID, jlong)

inline id<JavaUtilMap> EduStanfordNlpTaggerMaxentTaggerConfig_get_defaultValues();
static id<JavaUtilMap> EduStanfordNlpTaggerMaxentTaggerConfig_defaultValues;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpTaggerMaxentTaggerConfig, defaultValues, id<JavaUtilMap>)

__attribute__((unused)) static void EduStanfordNlpTaggerMaxentTaggerConfig_init(EduStanfordNlpTaggerMaxentTaggerConfig *self);

__attribute__((unused)) static EduStanfordNlpTaggerMaxentTaggerConfig *new_EduStanfordNlpTaggerMaxentTaggerConfig_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpTaggerMaxentTaggerConfig *create_EduStanfordNlpTaggerMaxentTaggerConfig_init();

__attribute__((unused)) static IOSObjectArray *EduStanfordNlpTaggerMaxentTaggerConfig_wsvStringToStringArrayWithNSString_(NSString *str);

__attribute__((unused)) static void EduStanfordNlpTaggerMaxentTaggerConfig_dumpWithJavaIoPrintWriter_(EduStanfordNlpTaggerMaxentTaggerConfig *self, JavaIoPrintWriter *pw);

__attribute__((unused)) static void EduStanfordNlpTaggerMaxentTaggerConfig_printGenPropsWithJavaIoPrintStream_(JavaIoPrintStream *outArg);

__attribute__((unused)) static void EduStanfordNlpTaggerMaxentTaggerConfig_Mode_initWithNSString_withInt_(EduStanfordNlpTaggerMaxentTaggerConfig_Mode *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static EduStanfordNlpTaggerMaxentTaggerConfig_Mode *new_EduStanfordNlpTaggerMaxentTaggerConfig_Mode_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpTaggerMaxentTaggerConfig)

NSString *EduStanfordNlpTaggerMaxentTaggerConfig_SEARCH = @"qn";
NSString *EduStanfordNlpTaggerMaxentTaggerConfig_TAG_SEPARATOR = @"/";
NSString *EduStanfordNlpTaggerMaxentTaggerConfig_TOKENIZE = @"true";
NSString *EduStanfordNlpTaggerMaxentTaggerConfig_DEBUG = @"false";
NSString *EduStanfordNlpTaggerMaxentTaggerConfig_ITERATIONS = @"100";
NSString *EduStanfordNlpTaggerMaxentTaggerConfig_ARCH = @"";
NSString *EduStanfordNlpTaggerMaxentTaggerConfig_WORD_FUNCTION = @"";
NSString *EduStanfordNlpTaggerMaxentTaggerConfig_RARE_WORD_THRESH = @"5";
NSString *EduStanfordNlpTaggerMaxentTaggerConfig_MIN_FEATURE_THRESH = @"5";
NSString *EduStanfordNlpTaggerMaxentTaggerConfig_CUR_WORD_MIN_FEATURE_THRESH = @"2";
NSString *EduStanfordNlpTaggerMaxentTaggerConfig_RARE_WORD_MIN_FEATURE_THRESH = @"10";
NSString *EduStanfordNlpTaggerMaxentTaggerConfig_VERY_COMMON_WORD_THRESH = @"250";
NSString *EduStanfordNlpTaggerMaxentTaggerConfig_OCCURRING_TAGS_ONLY = @"false";
NSString *EduStanfordNlpTaggerMaxentTaggerConfig_POSSIBLE_TAGS_ONLY = @"false";
NSString *EduStanfordNlpTaggerMaxentTaggerConfig_SIGMA_SQUARED;
NSString *EduStanfordNlpTaggerMaxentTaggerConfig_ENCODING = @"UTF-8";
NSString *EduStanfordNlpTaggerMaxentTaggerConfig_LEARN_CLOSED_CLASS = @"false";
NSString *EduStanfordNlpTaggerMaxentTaggerConfig_CLOSED_CLASS_THRESHOLD = @"40";
NSString *EduStanfordNlpTaggerMaxentTaggerConfig_VERBOSE = @"false";
NSString *EduStanfordNlpTaggerMaxentTaggerConfig_VERBOSE_RESULTS = @"true";
NSString *EduStanfordNlpTaggerMaxentTaggerConfig_SGML = @"false";
NSString *EduStanfordNlpTaggerMaxentTaggerConfig_LANG = @"";
NSString *EduStanfordNlpTaggerMaxentTaggerConfig_TOKENIZER_FACTORY = @"";
NSString *EduStanfordNlpTaggerMaxentTaggerConfig_XML_INPUT = @"";
NSString *EduStanfordNlpTaggerMaxentTaggerConfig_TAG_INSIDE = @"";
NSString *EduStanfordNlpTaggerMaxentTaggerConfig_APPROXIMATE = @"-1.0";
NSString *EduStanfordNlpTaggerMaxentTaggerConfig_TOKENIZER_OPTIONS = @"";
NSString *EduStanfordNlpTaggerMaxentTaggerConfig_DEFAULT_REG_L1 = @"1.0";
NSString *EduStanfordNlpTaggerMaxentTaggerConfig_OUTPUT_FILE = @"";
NSString *EduStanfordNlpTaggerMaxentTaggerConfig_OUTPUT_FORMAT = @"slashTags";
NSString *EduStanfordNlpTaggerMaxentTaggerConfig_OUTPUT_FORMAT_OPTIONS = @"";
NSString *EduStanfordNlpTaggerMaxentTaggerConfig_NTHREADS = @"1";
NSString *EduStanfordNlpTaggerMaxentTaggerConfig_ENCODING_PROPERTY = @"encoding";
NSString *EduStanfordNlpTaggerMaxentTaggerConfig_TAG_SEPARATOR_PROPERTY = @"tagSeparator";

@implementation EduStanfordNlpTaggerMaxentTaggerConfig

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpTaggerMaxentTaggerConfig_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithEduStanfordNlpTaggerMaxentTaggerConfig:(EduStanfordNlpTaggerMaxentTaggerConfig *)old {
  EduStanfordNlpTaggerMaxentTaggerConfig_initWithEduStanfordNlpTaggerMaxentTaggerConfig_(self, old);
  return self;
}

- (instancetype)initWithNSStringArray:(IOSObjectArray *)args {
  EduStanfordNlpTaggerMaxentTaggerConfig_initWithNSStringArray_(self, args);
  return self;
}

- (instancetype)initWithJavaUtilProperties:(JavaUtilProperties *)props {
  EduStanfordNlpTaggerMaxentTaggerConfig_initWithJavaUtilProperties_(self, props);
  return self;
}

- (void)setPropertiesWithJavaUtilProperties:(JavaUtilProperties *)props {
  if ([((JavaUtilProperties *) nil_chk(props)) getPropertyWithNSString:@""] != nil) {
    @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$C", @"unknown argument(s): \"", [props getPropertyWithNSString:@""], '"'));
  }
  if ([props getPropertyWithNSString:@"genprops"] != nil) {
    EduStanfordNlpTaggerMaxentTaggerConfig_printGenPropsWithJavaIoPrintStream_(JreLoadStatic(JavaLangSystem, out));
    JavaLangSystem_exitWithInt_(0);
  }
  if ([props containsKeyWithId:@"mode"] && [props containsKeyWithId:@"file"]) {
    (void) [self setPropertyWithNSString:@"mode" withNSString:[props getPropertyWithNSString:@"mode"]];
    (void) [self setPropertyWithNSString:@"file" withNSString:[props getPropertyWithNSString:@"file"]];
  }
  else if ([props containsKeyWithId:@"trainFile"]) {
    (void) [self setPropertyWithNSString:@"mode" withNSString:[((EduStanfordNlpTaggerMaxentTaggerConfig_Mode *) nil_chk(JreLoadEnum(EduStanfordNlpTaggerMaxentTaggerConfig_Mode, TRAIN))) description]];
    (void) [self setPropertyWithNSString:@"file" withNSString:[((NSString *) nil_chk([props getPropertyWithNSString:@"trainFile" withNSString:@""])) trim]];
  }
  else if ([props containsKeyWithId:@"testFile"]) {
    (void) [self setPropertyWithNSString:@"mode" withNSString:[((EduStanfordNlpTaggerMaxentTaggerConfig_Mode *) nil_chk(JreLoadEnum(EduStanfordNlpTaggerMaxentTaggerConfig_Mode, TEST))) description]];
    (void) [self setPropertyWithNSString:@"file" withNSString:[((NSString *) nil_chk([props getPropertyWithNSString:@"testFile" withNSString:@""])) trim]];
  }
  else if ([props containsKeyWithId:@"textFile"]) {
    (void) [self setPropertyWithNSString:@"mode" withNSString:[((EduStanfordNlpTaggerMaxentTaggerConfig_Mode *) nil_chk(JreLoadEnum(EduStanfordNlpTaggerMaxentTaggerConfig_Mode, TAG))) description]];
    (void) [self setPropertyWithNSString:@"file" withNSString:[((NSString *) nil_chk([props getPropertyWithNSString:@"textFile" withNSString:@""])) trim]];
  }
  else if ([props containsKeyWithId:@"dump"]) {
    (void) [self setPropertyWithNSString:@"mode" withNSString:[((EduStanfordNlpTaggerMaxentTaggerConfig_Mode *) nil_chk(JreLoadEnum(EduStanfordNlpTaggerMaxentTaggerConfig_Mode, DUMP))) description]];
    (void) [props setPropertyWithNSString:@"model" withNSString:[((NSString *) nil_chk([props getPropertyWithNSString:@"dump"])) trim]];
  }
  else {
    (void) [self setPropertyWithNSString:@"mode" withNSString:[((EduStanfordNlpTaggerMaxentTaggerConfig_Mode *) nil_chk(JreLoadEnum(EduStanfordNlpTaggerMaxentTaggerConfig_Mode, TAG))) description]];
    (void) [self setPropertyWithNSString:@"file" withNSString:@"stdin"];
  }
  (void) [self setPropertyWithNSString:@"model" withNSString:[((NSString *) nil_chk([props getPropertyWithNSString:@"model" withNSString:[self getPropertyWithNSString:@"model" withNSString:@""]])) trim]];
  if (!([self getMode] == JreLoadEnum(EduStanfordNlpTaggerMaxentTaggerConfig_Mode, DUMP)) && [((NSString *) nil_chk([self getPropertyWithNSString:@"model"])) isEqual:@""]) {
    @throw new_JavaLangRuntimeException_initWithNSString_(@"'model' parameter must be specified");
  }
  (void) [self setPropertyWithNSString:@"search" withNSString:[((NSString *) nil_chk([((NSString *) nil_chk([props getPropertyWithNSString:@"search" withNSString:[self getPropertyWithNSString:@"search"]])) trim])) lowercaseString]];
  NSString *srch = [self getPropertyWithNSString:@"search"];
  if (!([((NSString *) nil_chk(srch)) isEqual:@"cg"] || [srch isEqual:@"iis"] || [srch isEqual:@"owlqn"] || [srch isEqual:@"qn"] || [srch isEqual:@"owlqn2"])) {
    @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$", @"'search' must be one of 'iis', 'cg', 'qn' or 'owlqn' or 'owlqn2': ", srch));
  }
  (void) [self setPropertyWithNSString:@"sigmaSquared" withNSString:[props getPropertyWithNSString:@"sigmaSquared" withNSString:[self getPropertyWithNSString:@"sigmaSquared"]]];
  (void) [self setPropertyWithNSString:EduStanfordNlpTaggerMaxentTaggerConfig_TAG_SEPARATOR_PROPERTY withNSString:[props getPropertyWithNSString:EduStanfordNlpTaggerMaxentTaggerConfig_TAG_SEPARATOR_PROPERTY withNSString:[self getPropertyWithNSString:EduStanfordNlpTaggerMaxentTaggerConfig_TAG_SEPARATOR_PROPERTY]]];
  (void) [self setPropertyWithNSString:@"iterations" withNSString:[props getPropertyWithNSString:@"iterations" withNSString:[self getPropertyWithNSString:@"iterations"]]];
  (void) [self setPropertyWithNSString:@"rareWordThresh" withNSString:[props getPropertyWithNSString:@"rareWordThresh" withNSString:[self getPropertyWithNSString:@"rareWordThresh"]]];
  (void) [self setPropertyWithNSString:@"minFeatureThresh" withNSString:[props getPropertyWithNSString:@"minFeatureThresh" withNSString:[self getPropertyWithNSString:@"minFeatureThresh"]]];
  (void) [self setPropertyWithNSString:@"curWordMinFeatureThresh" withNSString:[props getPropertyWithNSString:@"curWordMinFeatureThresh" withNSString:[self getPropertyWithNSString:@"curWordMinFeatureThresh"]]];
  (void) [self setPropertyWithNSString:@"rareWordMinFeatureThresh" withNSString:[props getPropertyWithNSString:@"rareWordMinFeatureThresh" withNSString:[self getPropertyWithNSString:@"rareWordMinFeatureThresh"]]];
  (void) [self setPropertyWithNSString:@"veryCommonWordThresh" withNSString:[props getPropertyWithNSString:@"veryCommonWordThresh" withNSString:[self getPropertyWithNSString:@"veryCommonWordThresh"]]];
  (void) [self setPropertyWithNSString:@"occurringTagsOnly" withNSString:[props getPropertyWithNSString:@"occurringTagsOnly" withNSString:[self getPropertyWithNSString:@"occurringTagsOnly" withNSString:EduStanfordNlpTaggerMaxentTaggerConfig_OCCURRING_TAGS_ONLY]]];
  (void) [self setPropertyWithNSString:@"possibleTagsOnly" withNSString:[props getPropertyWithNSString:@"possibleTagsOnly" withNSString:[self getPropertyWithNSString:@"possibleTagsOnly"]]];
  (void) [self setPropertyWithNSString:@"lang" withNSString:[props getPropertyWithNSString:@"lang" withNSString:[self getPropertyWithNSString:@"lang"]]];
  (void) [self setPropertyWithNSString:@"openClassTags" withNSString:[((NSString *) nil_chk([props getPropertyWithNSString:@"openClassTags" withNSString:[self getPropertyWithNSString:@"openClassTags"]])) trim]];
  (void) [self setPropertyWithNSString:@"closedClassTags" withNSString:[((NSString *) nil_chk([props getPropertyWithNSString:@"closedClassTags" withNSString:[self getPropertyWithNSString:@"closedClassTags"]])) trim]];
  (void) [self setPropertyWithNSString:@"learnClosedClassTags" withNSString:[props getPropertyWithNSString:@"learnClosedClassTags" withNSString:[self getPropertyWithNSString:@"learnClosedClassTags"]]];
  (void) [self setPropertyWithNSString:@"closedClassTagThreshold" withNSString:[props getPropertyWithNSString:@"closedClassTagThreshold" withNSString:[self getPropertyWithNSString:@"closedClassTagThreshold"]]];
  (void) [self setPropertyWithNSString:@"arch" withNSString:[props getPropertyWithNSString:@"arch" withNSString:[self getPropertyWithNSString:@"arch"]]];
  if ([self getMode] == JreLoadEnum(EduStanfordNlpTaggerMaxentTaggerConfig_Mode, TRAIN) && [((NSString *) nil_chk([self getPropertyWithNSString:@"arch"])) isEqual:@""]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"No architecture specified; set the -arch flag with the features to be used");
  }
  (void) [self setPropertyWithNSString:@"wordFunction" withNSString:[props getPropertyWithNSString:@"wordFunction" withNSString:[self getPropertyWithNSString:@"wordFunction" withNSString:EduStanfordNlpTaggerMaxentTaggerConfig_WORD_FUNCTION]]];
  (void) [self setPropertyWithNSString:@"tokenize" withNSString:[props getPropertyWithNSString:@"tokenize" withNSString:[self getPropertyWithNSString:@"tokenize"]]];
  (void) [self setPropertyWithNSString:@"tokenizerFactory" withNSString:[props getPropertyWithNSString:@"tokenizerFactory" withNSString:[self getPropertyWithNSString:@"tokenizerFactory"]]];
  (void) [self setPropertyWithNSString:@"debugPrefix" withNSString:[props getPropertyWithNSString:@"debugPrefix" withNSString:[self getPropertyWithNSString:@"debugPrefix" withNSString:@""]]];
  (void) [self setPropertyWithNSString:@"debug" withNSString:[props getPropertyWithNSString:@"debug" withNSString:EduStanfordNlpTaggerMaxentTaggerConfig_DEBUG]];
  (void) [self setPropertyWithNSString:EduStanfordNlpTaggerMaxentTaggerConfig_ENCODING_PROPERTY withNSString:[props getPropertyWithNSString:EduStanfordNlpTaggerMaxentTaggerConfig_ENCODING_PROPERTY withNSString:[self getPropertyWithNSString:EduStanfordNlpTaggerMaxentTaggerConfig_ENCODING_PROPERTY]]];
  (void) [self setPropertyWithNSString:@"sgml" withNSString:[props getPropertyWithNSString:@"sgml" withNSString:[self getPropertyWithNSString:@"sgml"]]];
  (void) [self setPropertyWithNSString:@"verbose" withNSString:[props getPropertyWithNSString:@"verbose" withNSString:[self getPropertyWithNSString:@"verbose"]]];
  (void) [self setPropertyWithNSString:@"verboseResults" withNSString:[props getPropertyWithNSString:@"verboseResults" withNSString:[self getPropertyWithNSString:@"verboseResults"]]];
  (void) [self setPropertyWithNSString:@"regL1" withNSString:[props getPropertyWithNSString:@"regL1" withNSString:[self getPropertyWithNSString:@"regL1"]]];
  (void) [self setPropertyWithNSString:@"xmlInput" withNSString:[((NSString *) nil_chk([props getPropertyWithNSString:@"xmlInput" withNSString:[self getPropertyWithNSString:@"xmlInput"]])) trim]];
  (void) [self setPropertyWithNSString:@"tagInside" withNSString:[props getPropertyWithNSString:@"tagInside" withNSString:[self getPropertyWithNSString:@"tagInside"]]];
  (void) [self setPropertyWithNSString:@"approximate" withNSString:[props getPropertyWithNSString:@"approximate" withNSString:[self getPropertyWithNSString:@"approximate"]]];
  (void) [self setPropertyWithNSString:@"tokenizerOptions" withNSString:[props getPropertyWithNSString:@"tokenizerOptions" withNSString:[self getPropertyWithNSString:@"tokenizerOptions"]]];
  (void) [self setPropertyWithNSString:@"outputFile" withNSString:[((NSString *) nil_chk([props getPropertyWithNSString:@"outputFile" withNSString:[self getPropertyWithNSString:@"outputFile"]])) trim]];
  (void) [self setPropertyWithNSString:@"outputFormat" withNSString:[((NSString *) nil_chk([props getPropertyWithNSString:@"outputFormat" withNSString:[self getPropertyWithNSString:@"outputFormat"]])) trim]];
  (void) [self setPropertyWithNSString:@"outputFormatOptions" withNSString:[((NSString *) nil_chk([props getPropertyWithNSString:@"outputFormatOptions" withNSString:[self getPropertyWithNSString:@"outputFormatOptions"]])) trim]];
  (void) [self setPropertyWithNSString:@"nthreads" withNSString:[((NSString *) nil_chk([props getPropertyWithNSString:@"nthreads" withNSString:[self getPropertyWithNSString:@"nthreads" withNSString:EduStanfordNlpTaggerMaxentTaggerConfig_NTHREADS]])) trim]];
  NSString *sentenceDelimiter = [props getPropertyWithNSString:@"sentenceDelimiter" withNSString:[self getPropertyWithNSString:@"sentenceDelimiter"]];
  if (sentenceDelimiter != nil) {
    (void) [self setPropertyWithNSString:@"sentenceDelimiter" withNSString:sentenceDelimiter];
  }
}

- (NSString *)getModel {
  return [self getPropertyWithNSString:@"model"];
}

- (NSString *)getFile {
  return [self getPropertyWithNSString:@"file"];
}

- (NSString *)getOutputFile {
  return [self getPropertyWithNSString:@"outputFile"];
}

- (NSString *)getOutputFormat {
  return [self getPropertyWithNSString:@"outputFormat"];
}

- (IOSObjectArray *)getOutputOptions {
  return [((NSString *) nil_chk([self getPropertyWithNSString:@"outputFormatOptions"])) split:@"\\s*,\\s*"];
}

- (jboolean)getOutputVerbosity {
  return [self getOutputOptionsContainsWithNSString:@"verbose"];
}

- (jboolean)getOutputLemmas {
  return [self getOutputOptionsContainsWithNSString:@"lemmatize"];
}

- (jboolean)keepEmptySentences {
  return [self getOutputOptionsContainsWithNSString:@"keepEmptySentences"];
}

- (jboolean)getOutputOptionsContainsWithNSString:(NSString *)sought {
  IOSObjectArray *options = [self getOutputOptions];
  {
    IOSObjectArray *a__ = options;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *option = *b__++;
      if ([((NSString *) nil_chk(option)) isEqual:sought]) {
        return true;
      }
    }
  }
  return false;
}

- (NSString *)getSearch {
  return [self getPropertyWithNSString:@"search"];
}

- (jdouble)getSigmaSquared {
  return JavaLangDouble_parseDoubleWithNSString_([self getPropertyWithNSString:@"sigmaSquared"]);
}

- (jint)getIterations {
  return JavaLangInteger_parseIntWithNSString_([self getPropertyWithNSString:@"iterations"]);
}

- (jint)getRareWordThresh {
  return JavaLangInteger_parseIntWithNSString_([self getPropertyWithNSString:@"rareWordThresh"]);
}

- (jint)getMinFeatureThresh {
  return JavaLangInteger_parseIntWithNSString_([self getPropertyWithNSString:@"minFeatureThresh"]);
}

- (jint)getCurWordMinFeatureThresh {
  return JavaLangInteger_parseIntWithNSString_([self getPropertyWithNSString:@"curWordMinFeatureThresh"]);
}

- (jint)getRareWordMinFeatureThresh {
  return JavaLangInteger_parseIntWithNSString_([self getPropertyWithNSString:@"rareWordMinFeatureThresh"]);
}

- (jint)getVeryCommonWordThresh {
  return JavaLangInteger_parseIntWithNSString_([self getPropertyWithNSString:@"veryCommonWordThresh"]);
}

- (jboolean)occurringTagsOnly {
  return JavaLangBoolean_parseBooleanWithNSString_([self getPropertyWithNSString:@"occurringTagsOnly"]);
}

- (jboolean)possibleTagsOnly {
  return JavaLangBoolean_parseBooleanWithNSString_([self getPropertyWithNSString:@"possibleTagsOnly"]);
}

- (NSString *)getLang {
  return [self getPropertyWithNSString:@"lang"];
}

- (IOSObjectArray *)getOpenClassTags {
  return EduStanfordNlpTaggerMaxentTaggerConfig_wsvStringToStringArrayWithNSString_([self getPropertyWithNSString:@"openClassTags"]);
}

- (IOSObjectArray *)getClosedClassTags {
  return EduStanfordNlpTaggerMaxentTaggerConfig_wsvStringToStringArrayWithNSString_([self getPropertyWithNSString:@"closedClassTags"]);
}

+ (IOSObjectArray *)wsvStringToStringArrayWithNSString:(NSString *)str {
  return EduStanfordNlpTaggerMaxentTaggerConfig_wsvStringToStringArrayWithNSString_(str);
}

- (jboolean)getLearnClosedClassTags {
  return JavaLangBoolean_parseBooleanWithNSString_([self getPropertyWithNSString:@"learnClosedClassTags"]);
}

- (jint)getClosedTagThreshold {
  return JavaLangInteger_parseIntWithNSString_([self getPropertyWithNSString:@"closedClassTagThreshold"]);
}

- (NSString *)getArch {
  return [self getPropertyWithNSString:@"arch"];
}

- (NSString *)getWordFunction {
  return [self getPropertyWithNSString:@"wordFunction"];
}

- (jboolean)getDebug {
  return JavaLangBoolean_parseBooleanWithNSString_([self getPropertyWithNSString:@"debug"]);
}

- (NSString *)getDebugPrefix {
  return [self getPropertyWithNSString:@"debugPrefix"];
}

- (NSString *)getTokenizerFactory {
  return [self getPropertyWithNSString:@"tokenizerFactory"];
}

+ (NSString *)getDefaultTagSeparator {
  return EduStanfordNlpTaggerMaxentTaggerConfig_getDefaultTagSeparator();
}

- (NSString *)getTagSeparator {
  return [self getPropertyWithNSString:EduStanfordNlpTaggerMaxentTaggerConfig_TAG_SEPARATOR_PROPERTY];
}

- (jboolean)getTokenize {
  return JavaLangBoolean_parseBooleanWithNSString_([self getPropertyWithNSString:@"tokenize"]);
}

- (NSString *)getEncoding {
  return [self getPropertyWithNSString:EduStanfordNlpTaggerMaxentTaggerConfig_ENCODING_PROPERTY];
}

- (jdouble)getRegL1 {
  return JavaLangDouble_parseDoubleWithNSString_([self getPropertyWithNSString:@"regL1"]);
}

- (IOSObjectArray *)getXMLInput {
  return EduStanfordNlpTaggerMaxentTaggerConfig_wsvStringToStringArrayWithNSString_([self getPropertyWithNSString:@"xmlInput"]);
}

- (jboolean)getVerbose {
  return JavaLangBoolean_parseBooleanWithNSString_([self getPropertyWithNSString:@"verbose"]);
}

- (jboolean)getVerboseResults {
  return JavaLangBoolean_parseBooleanWithNSString_([self getPropertyWithNSString:@"verboseResults"]);
}

- (jboolean)getSGML {
  return JavaLangBoolean_parseBooleanWithNSString_([self getPropertyWithNSString:@"sgml"]);
}

- (jint)getNThreads {
  return JavaLangInteger_parseIntWithNSString_([self getPropertyWithNSString:@"nthreads"]);
}

- (NSString *)getTagInside {
  NSString *str = [self getPropertyWithNSString:@"tagInside"];
  if (str == nil) {
    return @"";
  }
  return str;
}

- (NSString *)getTokenizerOptions {
  return [self getPropertyWithNSString:@"tokenizerOptions"];
}

- (jboolean)getTokenizerInvertible {
  NSString *tokenizerOptions = [self getTokenizerOptions];
  if (tokenizerOptions != nil && [tokenizerOptions matches:@"(^|.*,)invertible=true"]) return true;
  return [self getOutputVerbosity] || [self getOutputLemmas];
}

- (jdouble)getDefaultScore {
  NSString *approx = [self getPropertyWithNSString:@"approximate"];
  if ([@"false" equalsIgnoreCase:approx]) {
    return -1.0;
  }
  else if ([@"true" equalsIgnoreCase:approx]) {
    return 1.0;
  }
  else {
    return JavaLangDouble_parseDoubleWithNSString_(approx);
  }
}

- (void)dump {
  EduStanfordNlpTaggerMaxentTaggerConfig_dumpWithJavaIoPrintWriter_(self, new_JavaIoPrintWriter_initWithJavaIoOutputStream_(JreLoadStatic(JavaLangSystem, err)));
}

- (void)dumpWithJavaIoPrintStream:(JavaIoPrintStream *)stream {
  JavaIoPrintWriter *pw = new_JavaIoPrintWriter_initWithJavaIoOutputStream_(stream);
  EduStanfordNlpTaggerMaxentTaggerConfig_dumpWithJavaIoPrintWriter_(self, pw);
}

- (void)dumpWithJavaIoPrintWriter:(JavaIoPrintWriter *)pw {
  EduStanfordNlpTaggerMaxentTaggerConfig_dumpWithJavaIoPrintWriter_(self, pw);
}

- (NSString *)description {
  JavaIoStringWriter *sw = new_JavaIoStringWriter_initWithInt_(200);
  JavaIoPrintWriter *pw = new_JavaIoPrintWriter_initWithJavaIoWriter_(sw);
  EduStanfordNlpTaggerMaxentTaggerConfig_dumpWithJavaIoPrintWriter_(self, pw);
  return [sw description];
}

- (NSString *)getSentenceDelimiter {
  NSString *delimiter = [self getPropertyWithNSString:@"sentenceDelimiter"];
  if (delimiter == nil && ![self getTokenize]) {
    delimiter = @"\n";
  }
  return delimiter;
}

- (jboolean)useStdin {
  return [((NSString *) nil_chk([((NSString *) nil_chk([self getFile])) trim])) equalsIgnoreCase:@"stdin"];
}

+ (void)printGenPropsWithJavaIoPrintStream:(JavaIoPrintStream *)outArg {
  EduStanfordNlpTaggerMaxentTaggerConfig_printGenPropsWithJavaIoPrintStream_(outArg);
}

- (EduStanfordNlpTaggerMaxentTaggerConfig_Mode *)getMode {
  if (![self containsKeyWithId:@"mode"]) {
    return nil;
  }
  return EduStanfordNlpTaggerMaxentTaggerConfig_Mode_valueOfWithNSString_([self getPropertyWithNSString:@"mode"]);
}

- (void)saveConfigWithJavaIoOutputStream:(JavaIoOutputStream *)os {
  JavaIoObjectOutputStream *out = new_JavaIoObjectOutputStream_initWithJavaIoOutputStream_(os);
  [out writeObjectWithId:self];
}

+ (EduStanfordNlpTaggerMaxentTaggerConfig *)readConfigWithJavaIoDataInputStream:(JavaIoDataInputStream *)stream {
  return EduStanfordNlpTaggerMaxentTaggerConfig_readConfigWithJavaIoDataInputStream_(stream);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x81, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0xa, 6, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 7, 9, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 10, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 11, 8, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTaggerMaxentTaggerConfig_Mode;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, 14, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTaggerMaxentTaggerConfig;", 0x9, 15, 16, 17, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithEduStanfordNlpTaggerMaxentTaggerConfig:);
  methods[2].selector = @selector(initWithNSStringArray:);
  methods[3].selector = @selector(initWithJavaUtilProperties:);
  methods[4].selector = @selector(setPropertiesWithJavaUtilProperties:);
  methods[5].selector = @selector(getModel);
  methods[6].selector = @selector(getFile);
  methods[7].selector = @selector(getOutputFile);
  methods[8].selector = @selector(getOutputFormat);
  methods[9].selector = @selector(getOutputOptions);
  methods[10].selector = @selector(getOutputVerbosity);
  methods[11].selector = @selector(getOutputLemmas);
  methods[12].selector = @selector(keepEmptySentences);
  methods[13].selector = @selector(getOutputOptionsContainsWithNSString:);
  methods[14].selector = @selector(getSearch);
  methods[15].selector = @selector(getSigmaSquared);
  methods[16].selector = @selector(getIterations);
  methods[17].selector = @selector(getRareWordThresh);
  methods[18].selector = @selector(getMinFeatureThresh);
  methods[19].selector = @selector(getCurWordMinFeatureThresh);
  methods[20].selector = @selector(getRareWordMinFeatureThresh);
  methods[21].selector = @selector(getVeryCommonWordThresh);
  methods[22].selector = @selector(occurringTagsOnly);
  methods[23].selector = @selector(possibleTagsOnly);
  methods[24].selector = @selector(getLang);
  methods[25].selector = @selector(getOpenClassTags);
  methods[26].selector = @selector(getClosedClassTags);
  methods[27].selector = @selector(wsvStringToStringArrayWithNSString:);
  methods[28].selector = @selector(getLearnClosedClassTags);
  methods[29].selector = @selector(getClosedTagThreshold);
  methods[30].selector = @selector(getArch);
  methods[31].selector = @selector(getWordFunction);
  methods[32].selector = @selector(getDebug);
  methods[33].selector = @selector(getDebugPrefix);
  methods[34].selector = @selector(getTokenizerFactory);
  methods[35].selector = @selector(getDefaultTagSeparator);
  methods[36].selector = @selector(getTagSeparator);
  methods[37].selector = @selector(getTokenize);
  methods[38].selector = @selector(getEncoding);
  methods[39].selector = @selector(getRegL1);
  methods[40].selector = @selector(getXMLInput);
  methods[41].selector = @selector(getVerbose);
  methods[42].selector = @selector(getVerboseResults);
  methods[43].selector = @selector(getSGML);
  methods[44].selector = @selector(getNThreads);
  methods[45].selector = @selector(getTagInside);
  methods[46].selector = @selector(getTokenizerOptions);
  methods[47].selector = @selector(getTokenizerInvertible);
  methods[48].selector = @selector(getDefaultScore);
  methods[49].selector = @selector(dump);
  methods[50].selector = @selector(dumpWithJavaIoPrintStream:);
  methods[51].selector = @selector(dumpWithJavaIoPrintWriter:);
  methods[52].selector = @selector(description);
  methods[53].selector = @selector(getSentenceDelimiter);
  methods[54].selector = @selector(useStdin);
  methods[55].selector = @selector(printGenPropsWithJavaIoPrintStream:);
  methods[56].selector = @selector(getMode);
  methods[57].selector = @selector(saveConfigWithJavaIoOutputStream:);
  methods[58].selector = @selector(readConfigWithJavaIoDataInputStream:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpTaggerMaxentTaggerConfig_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "SEARCH", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 18, -1, -1 },
    { "TAG_SEPARATOR", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 19, -1, -1 },
    { "TOKENIZE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 20, -1, -1 },
    { "DEBUG", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 21, -1, -1 },
    { "ITERATIONS", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 22, -1, -1 },
    { "ARCH", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 23, -1, -1 },
    { "WORD_FUNCTION", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 24, -1, -1 },
    { "RARE_WORD_THRESH", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 25, -1, -1 },
    { "MIN_FEATURE_THRESH", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 26, -1, -1 },
    { "CUR_WORD_MIN_FEATURE_THRESH", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 27, -1, -1 },
    { "RARE_WORD_MIN_FEATURE_THRESH", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 28, -1, -1 },
    { "VERY_COMMON_WORD_THRESH", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 29, -1, -1 },
    { "OCCURRING_TAGS_ONLY", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 30, -1, -1 },
    { "POSSIBLE_TAGS_ONLY", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 31, -1, -1 },
    { "SIGMA_SQUARED", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 32, -1, -1 },
    { "ENCODING", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 33, -1, -1 },
    { "LEARN_CLOSED_CLASS", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 34, -1, -1 },
    { "CLOSED_CLASS_THRESHOLD", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 35, -1, -1 },
    { "VERBOSE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 36, -1, -1 },
    { "VERBOSE_RESULTS", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 37, -1, -1 },
    { "SGML", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 38, -1, -1 },
    { "LANG", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 39, -1, -1 },
    { "TOKENIZER_FACTORY", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 40, -1, -1 },
    { "XML_INPUT", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 41, -1, -1 },
    { "TAG_INSIDE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 42, -1, -1 },
    { "APPROXIMATE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 43, -1, -1 },
    { "TOKENIZER_OPTIONS", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 44, -1, -1 },
    { "DEFAULT_REG_L1", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 45, -1, -1 },
    { "OUTPUT_FILE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 46, -1, -1 },
    { "OUTPUT_FORMAT", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 47, -1, -1 },
    { "OUTPUT_FORMAT_OPTIONS", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 48, -1, -1 },
    { "NTHREADS", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 49, -1, -1 },
    { "ENCODING_PROPERTY", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 50, -1, -1 },
    { "TAG_SEPARATOR_PROPERTY", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 51, -1, -1 },
    { "defaultValues", "LJavaUtilMap;", .constantValue.asLong = 0, 0x1a, -1, 52, 53, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpTaggerMaxentTaggerConfig;", "[LNSString;", "LJavaUtilProperties;", "setProperties", "getOutputOptionsContains", "LNSString;", "wsvStringToStringArray", "dump", "LJavaIoPrintStream;", "LJavaIoPrintWriter;", "toString", "printGenProps", "saveConfig", "LJavaIoOutputStream;", "LJavaIoIOException;", "readConfig", "LJavaIoDataInputStream;", "LJavaIoIOException;LJavaLangClassNotFoundException;", &EduStanfordNlpTaggerMaxentTaggerConfig_SEARCH, &EduStanfordNlpTaggerMaxentTaggerConfig_TAG_SEPARATOR, &EduStanfordNlpTaggerMaxentTaggerConfig_TOKENIZE, &EduStanfordNlpTaggerMaxentTaggerConfig_DEBUG, &EduStanfordNlpTaggerMaxentTaggerConfig_ITERATIONS, &EduStanfordNlpTaggerMaxentTaggerConfig_ARCH, &EduStanfordNlpTaggerMaxentTaggerConfig_WORD_FUNCTION, &EduStanfordNlpTaggerMaxentTaggerConfig_RARE_WORD_THRESH, &EduStanfordNlpTaggerMaxentTaggerConfig_MIN_FEATURE_THRESH, &EduStanfordNlpTaggerMaxentTaggerConfig_CUR_WORD_MIN_FEATURE_THRESH, &EduStanfordNlpTaggerMaxentTaggerConfig_RARE_WORD_MIN_FEATURE_THRESH, &EduStanfordNlpTaggerMaxentTaggerConfig_VERY_COMMON_WORD_THRESH, &EduStanfordNlpTaggerMaxentTaggerConfig_OCCURRING_TAGS_ONLY, &EduStanfordNlpTaggerMaxentTaggerConfig_POSSIBLE_TAGS_ONLY, &EduStanfordNlpTaggerMaxentTaggerConfig_SIGMA_SQUARED, &EduStanfordNlpTaggerMaxentTaggerConfig_ENCODING, &EduStanfordNlpTaggerMaxentTaggerConfig_LEARN_CLOSED_CLASS, &EduStanfordNlpTaggerMaxentTaggerConfig_CLOSED_CLASS_THRESHOLD, &EduStanfordNlpTaggerMaxentTaggerConfig_VERBOSE, &EduStanfordNlpTaggerMaxentTaggerConfig_VERBOSE_RESULTS, &EduStanfordNlpTaggerMaxentTaggerConfig_SGML, &EduStanfordNlpTaggerMaxentTaggerConfig_LANG, &EduStanfordNlpTaggerMaxentTaggerConfig_TOKENIZER_FACTORY, &EduStanfordNlpTaggerMaxentTaggerConfig_XML_INPUT, &EduStanfordNlpTaggerMaxentTaggerConfig_TAG_INSIDE, &EduStanfordNlpTaggerMaxentTaggerConfig_APPROXIMATE, &EduStanfordNlpTaggerMaxentTaggerConfig_TOKENIZER_OPTIONS, &EduStanfordNlpTaggerMaxentTaggerConfig_DEFAULT_REG_L1, &EduStanfordNlpTaggerMaxentTaggerConfig_OUTPUT_FILE, &EduStanfordNlpTaggerMaxentTaggerConfig_OUTPUT_FORMAT, &EduStanfordNlpTaggerMaxentTaggerConfig_OUTPUT_FORMAT_OPTIONS, &EduStanfordNlpTaggerMaxentTaggerConfig_NTHREADS, &EduStanfordNlpTaggerMaxentTaggerConfig_ENCODING_PROPERTY, &EduStanfordNlpTaggerMaxentTaggerConfig_TAG_SEPARATOR_PROPERTY, &EduStanfordNlpTaggerMaxentTaggerConfig_defaultValues, "Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", "LEduStanfordNlpTaggerMaxentTaggerConfig_Mode;" };
  static const J2ObjcClassInfo _EduStanfordNlpTaggerMaxentTaggerConfig = { "TaggerConfig", "edu.stanford.nlp.tagger.maxent", ptrTable, methods, fields, 7, 0x1, 59, 36, -1, 54, -1, -1, -1 };
  return &_EduStanfordNlpTaggerMaxentTaggerConfig;
}

+ (void)initialize {
  if (self == [EduStanfordNlpTaggerMaxentTaggerConfig class]) {
    EduStanfordNlpTaggerMaxentTaggerConfig_SIGMA_SQUARED = NSString_valueOfDouble_(0.5);
    EduStanfordNlpTaggerMaxentTaggerConfig_defaultValues = EduStanfordNlpUtilGenerics_newHashMap();
    {
      (void) [((id<JavaUtilMap>) nil_chk(EduStanfordNlpTaggerMaxentTaggerConfig_defaultValues)) putWithId:@"arch" withId:EduStanfordNlpTaggerMaxentTaggerConfig_ARCH];
      (void) [EduStanfordNlpTaggerMaxentTaggerConfig_defaultValues putWithId:@"wordFunction" withId:EduStanfordNlpTaggerMaxentTaggerConfig_WORD_FUNCTION];
      (void) [EduStanfordNlpTaggerMaxentTaggerConfig_defaultValues putWithId:@"closedClassTags" withId:@""];
      (void) [EduStanfordNlpTaggerMaxentTaggerConfig_defaultValues putWithId:@"closedClassTagThreshold" withId:EduStanfordNlpTaggerMaxentTaggerConfig_CLOSED_CLASS_THRESHOLD];
      (void) [EduStanfordNlpTaggerMaxentTaggerConfig_defaultValues putWithId:@"search" withId:EduStanfordNlpTaggerMaxentTaggerConfig_SEARCH];
      (void) [EduStanfordNlpTaggerMaxentTaggerConfig_defaultValues putWithId:EduStanfordNlpTaggerMaxentTaggerConfig_TAG_SEPARATOR_PROPERTY withId:EduStanfordNlpTaggerMaxentTaggerConfig_TAG_SEPARATOR];
      (void) [EduStanfordNlpTaggerMaxentTaggerConfig_defaultValues putWithId:@"tokenize" withId:EduStanfordNlpTaggerMaxentTaggerConfig_TOKENIZE];
      (void) [EduStanfordNlpTaggerMaxentTaggerConfig_defaultValues putWithId:@"debug" withId:EduStanfordNlpTaggerMaxentTaggerConfig_DEBUG];
      (void) [EduStanfordNlpTaggerMaxentTaggerConfig_defaultValues putWithId:@"iterations" withId:EduStanfordNlpTaggerMaxentTaggerConfig_ITERATIONS];
      (void) [EduStanfordNlpTaggerMaxentTaggerConfig_defaultValues putWithId:@"rareWordThresh" withId:EduStanfordNlpTaggerMaxentTaggerConfig_RARE_WORD_THRESH];
      (void) [EduStanfordNlpTaggerMaxentTaggerConfig_defaultValues putWithId:@"minFeatureThresh" withId:EduStanfordNlpTaggerMaxentTaggerConfig_MIN_FEATURE_THRESH];
      (void) [EduStanfordNlpTaggerMaxentTaggerConfig_defaultValues putWithId:@"curWordMinFeatureThresh" withId:EduStanfordNlpTaggerMaxentTaggerConfig_CUR_WORD_MIN_FEATURE_THRESH];
      (void) [EduStanfordNlpTaggerMaxentTaggerConfig_defaultValues putWithId:@"rareWordMinFeatureThresh" withId:EduStanfordNlpTaggerMaxentTaggerConfig_RARE_WORD_MIN_FEATURE_THRESH];
      (void) [EduStanfordNlpTaggerMaxentTaggerConfig_defaultValues putWithId:@"veryCommonWordThresh" withId:EduStanfordNlpTaggerMaxentTaggerConfig_VERY_COMMON_WORD_THRESH];
      (void) [EduStanfordNlpTaggerMaxentTaggerConfig_defaultValues putWithId:@"occurringTagsOnly" withId:EduStanfordNlpTaggerMaxentTaggerConfig_OCCURRING_TAGS_ONLY];
      (void) [EduStanfordNlpTaggerMaxentTaggerConfig_defaultValues putWithId:@"possibleTagsOnly" withId:EduStanfordNlpTaggerMaxentTaggerConfig_POSSIBLE_TAGS_ONLY];
      (void) [EduStanfordNlpTaggerMaxentTaggerConfig_defaultValues putWithId:@"sigmaSquared" withId:EduStanfordNlpTaggerMaxentTaggerConfig_SIGMA_SQUARED];
      (void) [EduStanfordNlpTaggerMaxentTaggerConfig_defaultValues putWithId:EduStanfordNlpTaggerMaxentTaggerConfig_ENCODING_PROPERTY withId:EduStanfordNlpTaggerMaxentTaggerConfig_ENCODING];
      (void) [EduStanfordNlpTaggerMaxentTaggerConfig_defaultValues putWithId:@"learnClosedClassTags" withId:EduStanfordNlpTaggerMaxentTaggerConfig_LEARN_CLOSED_CLASS];
      (void) [EduStanfordNlpTaggerMaxentTaggerConfig_defaultValues putWithId:@"verbose" withId:EduStanfordNlpTaggerMaxentTaggerConfig_VERBOSE];
      (void) [EduStanfordNlpTaggerMaxentTaggerConfig_defaultValues putWithId:@"verboseResults" withId:EduStanfordNlpTaggerMaxentTaggerConfig_VERBOSE_RESULTS];
      (void) [EduStanfordNlpTaggerMaxentTaggerConfig_defaultValues putWithId:@"openClassTags" withId:@""];
      (void) [EduStanfordNlpTaggerMaxentTaggerConfig_defaultValues putWithId:@"lang" withId:EduStanfordNlpTaggerMaxentTaggerConfig_LANG];
      (void) [EduStanfordNlpTaggerMaxentTaggerConfig_defaultValues putWithId:@"tokenizerFactory" withId:EduStanfordNlpTaggerMaxentTaggerConfig_TOKENIZER_FACTORY];
      (void) [EduStanfordNlpTaggerMaxentTaggerConfig_defaultValues putWithId:@"xmlInput" withId:EduStanfordNlpTaggerMaxentTaggerConfig_XML_INPUT];
      (void) [EduStanfordNlpTaggerMaxentTaggerConfig_defaultValues putWithId:@"tagInside" withId:EduStanfordNlpTaggerMaxentTaggerConfig_TAG_INSIDE];
      (void) [EduStanfordNlpTaggerMaxentTaggerConfig_defaultValues putWithId:@"sgml" withId:EduStanfordNlpTaggerMaxentTaggerConfig_SGML];
      (void) [EduStanfordNlpTaggerMaxentTaggerConfig_defaultValues putWithId:@"approximate" withId:EduStanfordNlpTaggerMaxentTaggerConfig_APPROXIMATE];
      (void) [EduStanfordNlpTaggerMaxentTaggerConfig_defaultValues putWithId:@"tokenizerOptions" withId:EduStanfordNlpTaggerMaxentTaggerConfig_TOKENIZER_OPTIONS];
      (void) [EduStanfordNlpTaggerMaxentTaggerConfig_defaultValues putWithId:@"regL1" withId:EduStanfordNlpTaggerMaxentTaggerConfig_DEFAULT_REG_L1];
      (void) [EduStanfordNlpTaggerMaxentTaggerConfig_defaultValues putWithId:@"outputFile" withId:EduStanfordNlpTaggerMaxentTaggerConfig_OUTPUT_FILE];
      (void) [EduStanfordNlpTaggerMaxentTaggerConfig_defaultValues putWithId:@"outputFormat" withId:EduStanfordNlpTaggerMaxentTaggerConfig_OUTPUT_FORMAT];
      (void) [EduStanfordNlpTaggerMaxentTaggerConfig_defaultValues putWithId:@"outputFormatOptions" withId:EduStanfordNlpTaggerMaxentTaggerConfig_OUTPUT_FORMAT_OPTIONS];
      (void) [EduStanfordNlpTaggerMaxentTaggerConfig_defaultValues putWithId:@"nthreads" withId:EduStanfordNlpTaggerMaxentTaggerConfig_NTHREADS];
    }
    J2OBJC_SET_INITIALIZED(EduStanfordNlpTaggerMaxentTaggerConfig)
  }
}

@end

void EduStanfordNlpTaggerMaxentTaggerConfig_init(EduStanfordNlpTaggerMaxentTaggerConfig *self) {
  JavaUtilProperties_init(self);
  [self putAllWithJavaUtilMap:EduStanfordNlpTaggerMaxentTaggerConfig_defaultValues];
}

EduStanfordNlpTaggerMaxentTaggerConfig *new_EduStanfordNlpTaggerMaxentTaggerConfig_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpTaggerMaxentTaggerConfig, init)
}

EduStanfordNlpTaggerMaxentTaggerConfig *create_EduStanfordNlpTaggerMaxentTaggerConfig_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTaggerMaxentTaggerConfig, init)
}

void EduStanfordNlpTaggerMaxentTaggerConfig_initWithEduStanfordNlpTaggerMaxentTaggerConfig_(EduStanfordNlpTaggerMaxentTaggerConfig *self, EduStanfordNlpTaggerMaxentTaggerConfig *old) {
  JavaUtilProperties_initWithJavaUtilProperties_(self, old);
}

EduStanfordNlpTaggerMaxentTaggerConfig *new_EduStanfordNlpTaggerMaxentTaggerConfig_initWithEduStanfordNlpTaggerMaxentTaggerConfig_(EduStanfordNlpTaggerMaxentTaggerConfig *old) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTaggerMaxentTaggerConfig, initWithEduStanfordNlpTaggerMaxentTaggerConfig_, old)
}

EduStanfordNlpTaggerMaxentTaggerConfig *create_EduStanfordNlpTaggerMaxentTaggerConfig_initWithEduStanfordNlpTaggerMaxentTaggerConfig_(EduStanfordNlpTaggerMaxentTaggerConfig *old) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTaggerMaxentTaggerConfig, initWithEduStanfordNlpTaggerMaxentTaggerConfig_, old)
}

void EduStanfordNlpTaggerMaxentTaggerConfig_initWithNSStringArray_(EduStanfordNlpTaggerMaxentTaggerConfig *self, IOSObjectArray *args) {
  EduStanfordNlpTaggerMaxentTaggerConfig_initWithJavaUtilProperties_(self, EduStanfordNlpUtilStringUtils_argsToPropertiesWithNSStringArray_(args));
}

EduStanfordNlpTaggerMaxentTaggerConfig *new_EduStanfordNlpTaggerMaxentTaggerConfig_initWithNSStringArray_(IOSObjectArray *args) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTaggerMaxentTaggerConfig, initWithNSStringArray_, args)
}

EduStanfordNlpTaggerMaxentTaggerConfig *create_EduStanfordNlpTaggerMaxentTaggerConfig_initWithNSStringArray_(IOSObjectArray *args) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTaggerMaxentTaggerConfig, initWithNSStringArray_, args)
}

void EduStanfordNlpTaggerMaxentTaggerConfig_initWithJavaUtilProperties_(EduStanfordNlpTaggerMaxentTaggerConfig *self, JavaUtilProperties *props) {
  EduStanfordNlpTaggerMaxentTaggerConfig_init(self);
  if (![((JavaUtilProperties *) nil_chk(props)) containsKeyWithId:@"trainFile"]) {
    NSString *name = [props getPropertyWithNSString:@"model"];
    if (name == nil) {
      name = [props getPropertyWithNSString:@"dump"];
    }
    if (name != nil) {
      @try {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$", @"Loading default properties from tagger ", name)];
        JavaIoDataInputStream *in = new_JavaIoDataInputStream_initWithJavaIoInputStream_(EduStanfordNlpIoIOUtils_getInputStreamFromURLOrClasspathOrFileSystemWithNSString_(name));
        [self putAllWithJavaUtilMap:EduStanfordNlpTaggerMaxentTaggerConfig_readConfigWithJavaIoDataInputStream_(in)];
        [in close];
      }
      @catch (JavaLangException *e) {
        @throw new_EduStanfordNlpIoRuntimeIOException_initWithNSString_(JreStrcat("$$", @"No such trained tagger config file found: ", name));
      }
    }
  }
  [self setPropertiesWithJavaUtilProperties:props];
}

EduStanfordNlpTaggerMaxentTaggerConfig *new_EduStanfordNlpTaggerMaxentTaggerConfig_initWithJavaUtilProperties_(JavaUtilProperties *props) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTaggerMaxentTaggerConfig, initWithJavaUtilProperties_, props)
}

EduStanfordNlpTaggerMaxentTaggerConfig *create_EduStanfordNlpTaggerMaxentTaggerConfig_initWithJavaUtilProperties_(JavaUtilProperties *props) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTaggerMaxentTaggerConfig, initWithJavaUtilProperties_, props)
}

IOSObjectArray *EduStanfordNlpTaggerMaxentTaggerConfig_wsvStringToStringArrayWithNSString_(NSString *str) {
  EduStanfordNlpTaggerMaxentTaggerConfig_initialize();
  if (str == nil || [str isEqual:@""]) {
    return JreLoadStatic(EduStanfordNlpUtilStringUtils, EMPTY_STRING_ARRAY);
  }
  else {
    return [str split:@"\\s+"];
  }
}

NSString *EduStanfordNlpTaggerMaxentTaggerConfig_getDefaultTagSeparator() {
  EduStanfordNlpTaggerMaxentTaggerConfig_initialize();
  return EduStanfordNlpTaggerMaxentTaggerConfig_TAG_SEPARATOR;
}

void EduStanfordNlpTaggerMaxentTaggerConfig_dumpWithJavaIoPrintWriter_(EduStanfordNlpTaggerMaxentTaggerConfig *self, JavaIoPrintWriter *pw) {
  [((JavaIoPrintWriter *) nil_chk(pw)) printlnWithNSString:JreStrcat("$$", @"                   model = ", [self getPropertyWithNSString:@"model"])];
  [pw printlnWithNSString:JreStrcat("$$", @"                    arch = ", [self getPropertyWithNSString:@"arch"])];
  [pw printlnWithNSString:JreStrcat("$$", @"            wordFunction = ", [self getPropertyWithNSString:@"wordFunction"])];
  if ([self getMode] == JreLoadEnum(EduStanfordNlpTaggerMaxentTaggerConfig_Mode, TRAIN) || [self getMode] == JreLoadEnum(EduStanfordNlpTaggerMaxentTaggerConfig_Mode, DUMP)) {
    [pw printlnWithNSString:JreStrcat("$$", @"               trainFile = ", [self getPropertyWithNSString:@"file"])];
  }
  else if ([self getMode] == JreLoadEnum(EduStanfordNlpTaggerMaxentTaggerConfig_Mode, TAG)) {
    [pw printlnWithNSString:JreStrcat("$$", @"                textFile = ", [self getPropertyWithNSString:@"file"])];
  }
  else if ([self getMode] == JreLoadEnum(EduStanfordNlpTaggerMaxentTaggerConfig_Mode, TEST)) {
    [pw printlnWithNSString:JreStrcat("$$", @"                testFile = ", [self getPropertyWithNSString:@"file"])];
  }
  [pw printlnWithNSString:JreStrcat("$$", @"         closedClassTags = ", [self getPropertyWithNSString:@"closedClassTags"])];
  [pw printlnWithNSString:JreStrcat("$$", @" closedClassTagThreshold = ", [self getPropertyWithNSString:@"closedClassTagThreshold"])];
  [pw printlnWithNSString:JreStrcat("$$", @" curWordMinFeatureThresh = ", [self getPropertyWithNSString:@"curWordMinFeatureThresh"])];
  [pw printlnWithNSString:JreStrcat("$$", @"                   debug = ", [self getPropertyWithNSString:@"debug"])];
  [pw printlnWithNSString:JreStrcat("$$", @"             debugPrefix = ", [self getPropertyWithNSString:@"debugPrefix"])];
  [pw printlnWithNSString:JreStrcat("$$$$", @"            ", EduStanfordNlpTaggerMaxentTaggerConfig_TAG_SEPARATOR_PROPERTY, @" = ", [self getPropertyWithNSString:EduStanfordNlpTaggerMaxentTaggerConfig_TAG_SEPARATOR_PROPERTY])];
  [pw printlnWithNSString:JreStrcat("$$$$", @"                ", EduStanfordNlpTaggerMaxentTaggerConfig_ENCODING_PROPERTY, @" = ", [self getPropertyWithNSString:EduStanfordNlpTaggerMaxentTaggerConfig_ENCODING_PROPERTY])];
  [pw printlnWithNSString:JreStrcat("$$", @"              iterations = ", [self getPropertyWithNSString:@"iterations"])];
  [pw printlnWithNSString:JreStrcat("$$", @"                    lang = ", [self getPropertyWithNSString:@"lang"])];
  [pw printlnWithNSString:JreStrcat("$$", @"    learnClosedClassTags = ", [self getPropertyWithNSString:@"learnClosedClassTags"])];
  [pw printlnWithNSString:JreStrcat("$$", @"        minFeatureThresh = ", [self getPropertyWithNSString:@"minFeatureThresh"])];
  [pw printlnWithNSString:JreStrcat("$$", @"           openClassTags = ", [self getPropertyWithNSString:@"openClassTags"])];
  [pw printlnWithNSString:JreStrcat("$$", @"rareWordMinFeatureThresh = ", [self getPropertyWithNSString:@"rareWordMinFeatureThresh"])];
  [pw printlnWithNSString:JreStrcat("$$", @"          rareWordThresh = ", [self getPropertyWithNSString:@"rareWordThresh"])];
  [pw printlnWithNSString:JreStrcat("$$", @"                  search = ", [self getPropertyWithNSString:@"search"])];
  [pw printlnWithNSString:JreStrcat("$$", @"                    sgml = ", [self getPropertyWithNSString:@"sgml"])];
  [pw printlnWithNSString:JreStrcat("$$", @"            sigmaSquared = ", [self getPropertyWithNSString:@"sigmaSquared"])];
  [pw printlnWithNSString:JreStrcat("$$", @"                   regL1 = ", [self getPropertyWithNSString:@"regL1"])];
  [pw printlnWithNSString:JreStrcat("$$", @"               tagInside = ", [self getPropertyWithNSString:@"tagInside"])];
  [pw printlnWithNSString:JreStrcat("$$", @"                tokenize = ", [self getPropertyWithNSString:@"tokenize"])];
  [pw printlnWithNSString:JreStrcat("$$", @"        tokenizerFactory = ", [self getPropertyWithNSString:@"tokenizerFactory"])];
  [pw printlnWithNSString:JreStrcat("$$", @"        tokenizerOptions = ", [self getPropertyWithNSString:@"tokenizerOptions"])];
  [pw printlnWithNSString:JreStrcat("$$", @"                 verbose = ", [self getPropertyWithNSString:@"verbose"])];
  [pw printlnWithNSString:JreStrcat("$$", @"          verboseResults = ", [self getPropertyWithNSString:@"verboseResults"])];
  [pw printlnWithNSString:JreStrcat("$$", @"    veryCommonWordThresh = ", [self getPropertyWithNSString:@"veryCommonWordThresh"])];
  [pw printlnWithNSString:JreStrcat("$$", @"                xmlInput = ", [self getPropertyWithNSString:@"xmlInput"])];
  [pw printlnWithNSString:JreStrcat("$$", @"              outputFile = ", [self getPropertyWithNSString:@"outputFile"])];
  [pw printlnWithNSString:JreStrcat("$$", @"            outputFormat = ", [self getPropertyWithNSString:@"outputFormat"])];
  [pw printlnWithNSString:JreStrcat("$$", @"     outputFormatOptions = ", [self getPropertyWithNSString:@"outputFormatOptions"])];
  [pw printlnWithNSString:JreStrcat("$$", @"                nthreads = ", [self getPropertyWithNSString:@"nthreads"])];
  [pw flush];
}

void EduStanfordNlpTaggerMaxentTaggerConfig_printGenPropsWithJavaIoPrintStream_(JavaIoPrintStream *outArg) {
  EduStanfordNlpTaggerMaxentTaggerConfig_initialize();
  [((JavaIoPrintStream *) nil_chk(outArg)) printlnWithNSString:@"## Sample properties file for maxent tagger. This file is used for three main"];
  [outArg printlnWithNSString:@"## operations: training, testing, and tagging. It may also be used to dump"];
  [outArg printlnWithNSString:@"## the contents of a model."];
  [outArg printlnWithNSString:@"## To train or test a model, or to tag something, run:"];
  [outArg printlnWithNSString:@"##   java edu.stanford.nlp.tagger.maxent.MaxentTagger -prop <properties file>"];
  [outArg printlnWithNSString:@"## Arguments can be overridden on the commandline, e.g.:"];
  [outArg printlnWithNSString:@"##   java ....MaxentTagger -prop <properties file> -testFile /other/file "];
  [outArg println];
  [outArg printlnWithNSString:@"# Model file name (created at train time; used at tag and test time)"];
  [outArg printlnWithNSString:@"# (you can leave this blank and specify it on the commandline with -model)"];
  [outArg printlnWithNSString:@"# model = "];
  [outArg println];
  [outArg printlnWithNSString:@"# Path to file to be operated on (trained from, tested against, or tagged)"];
  [outArg printlnWithNSString:@"# Specify -textFile <filename> to tag text in the given file, -trainFile <filename> to"];
  [outArg printlnWithNSString:@"# to train a model using data in the given file, or -testFile <filename> to test your"];
  [outArg printlnWithNSString:@"# model using data in the given file.  Alternatively, you may specify"];
  [outArg printlnWithNSString:@"# -dump <filename> to dump the parameters stored in a model or "];
  [outArg printlnWithNSString:@"# -convertToSingleFile <filename> to save an old, multi-file model (specified as -model)"];
  [outArg printlnWithNSString:@"# to the new single file format.  The new model will be saved in the file filename."];
  [outArg printlnWithNSString:@"# If you choose to convert an old file, you must specify "];
  [outArg printlnWithNSString:@"# the correct 'arch' parameter used to create the original model."];
  [outArg printlnWithNSString:@"# trainFile = "];
  [outArg println];
  [outArg printlnWithNSString:@"# Path to outputFile to write tagged output to."];
  [outArg printlnWithNSString:@"# If empty, stdout is used."];
  [outArg printlnWithNSString:JreStrcat("$$", @"# outputFile = ", EduStanfordNlpTaggerMaxentTaggerConfig_OUTPUT_FILE)];
  [outArg println];
  [outArg printlnWithNSString:@"# Output format. One of: slashTags (default), xml, or tsv"];
  [outArg printlnWithNSString:JreStrcat("$$", @"# outputFormat = ", EduStanfordNlpTaggerMaxentTaggerConfig_OUTPUT_FORMAT)];
  [outArg println];
  [outArg printlnWithNSString:@"# Output format options. Comma separated list."];
  [outArg printlnWithNSString:@"# currently \"lemmatize\" and \"keepEmptySentences\" are supported."];
  [outArg printlnWithNSString:JreStrcat("$$", @"# outputFormatOptions = ", EduStanfordNlpTaggerMaxentTaggerConfig_OUTPUT_FORMAT_OPTIONS)];
  [outArg println];
  [outArg printlnWithNSString:@"# Tag separator character that separates word and pos tags"];
  [outArg printlnWithNSString:@"# (for both training and test data) and used for"];
  [outArg printlnWithNSString:@"# separating words and tags in slashTags format output."];
  [outArg printlnWithNSString:JreStrcat("$$", @"# tagSeparator = ", EduStanfordNlpTaggerMaxentTaggerConfig_TAG_SEPARATOR)];
  [outArg println];
  [outArg printlnWithNSString:@"# Encoding format in which files are stored.  If left blank, UTF-8 is assumed."];
  [outArg printlnWithNSString:JreStrcat("$$", @"# encoding = ", EduStanfordNlpTaggerMaxentTaggerConfig_ENCODING)];
  [outArg println];
  [outArg printlnWithNSString:@"# A couple flags for controlling the amount of output:"];
  [outArg printlnWithNSString:@"# - print extra debugging information:"];
  [outArg printlnWithNSString:JreStrcat("$$", @"# verbose = ", EduStanfordNlpTaggerMaxentTaggerConfig_VERBOSE)];
  [outArg printlnWithNSString:@"# - print intermediate results:"];
  [outArg printlnWithNSString:JreStrcat("$$", @"# verboseResults = ", EduStanfordNlpTaggerMaxentTaggerConfig_VERBOSE_RESULTS)];
  [outArg printlnWithNSString:@"######### parameters for tag and test operations #########"];
  [outArg println];
  [outArg printlnWithNSString:@"# Class to use for tokenization. Default blank value means Penn Treebank"];
  [outArg printlnWithNSString:@"# tokenization.  If you'd like to just assume that tokenization has been done,"];
  [outArg printlnWithNSString:@"# and the input is whitespace-tokenized, use"];
  [outArg printlnWithNSString:@"# edu.stanford.nlp.process.WhitespaceTokenizer or set tokenize to false."];
  [outArg printlnWithNSString:@"# tokenizerFactory = "];
  [outArg println];
  [outArg printlnWithNSString:@"# Options to the tokenizer.  A comma separated list."];
  [outArg printlnWithNSString:@"# This depends on what the tokenizer supports."];
  [outArg printlnWithNSString:@"# For PTBTokenizer, you might try options like americanize=false"];
  [outArg printlnWithNSString:@"# or asciiQuotes (for German!)."];
  [outArg printlnWithNSString:@"# tokenizerOptions = "];
  [outArg println];
  [outArg printlnWithNSString:@"# Whether to tokenize text for tag and test operations. Default is true."];
  [outArg printlnWithNSString:@"# If false, your text must already be whitespace tokenized."];
  [outArg printlnWithNSString:JreStrcat("$$", @"# tokenize = ", EduStanfordNlpTaggerMaxentTaggerConfig_TOKENIZE)];
  [outArg println];
  [outArg printlnWithNSString:@"# Write debugging information (words, top words, unknown words). Useful for"];
  [outArg printlnWithNSString:@"# error analysis. Default is false."];
  [outArg printlnWithNSString:JreStrcat("$$", @"# debug = ", EduStanfordNlpTaggerMaxentTaggerConfig_DEBUG)];
  [outArg println];
  [outArg printlnWithNSString:@"# Prefix for debugging output (if debug == true). Default is to use the"];
  [outArg printlnWithNSString:@"# filename from 'file'"];
  [outArg printlnWithNSString:@"# debugPrefix = "];
  [outArg println];
  [outArg printlnWithNSString:@"######### parameters for training  #########"];
  [outArg println];
  [outArg printlnWithNSString:@"# model architecture: This is one or more comma separated strings, which"];
  [outArg printlnWithNSString:@"# specify which extractors to use. Some of them take one or more integer"];
  [outArg printlnWithNSString:@"# or string "];
  [outArg printlnWithNSString:@"# (file path) arguments in parentheses, written as m, n, and s below:"];
  [outArg printlnWithNSString:@"# 'left3words', 'left5words', 'bidirectional', 'bidirectional5words',"];
  [outArg printlnWithNSString:@"# 'generic', 'sighan2005', 'german', 'words(m,n)', 'wordshapes(m,n)',"];
  [outArg printlnWithNSString:@"# 'biwords(m,n)', 'lowercasewords(m,n)', 'vbn(n)', distsimconjunction(s,m,n)',"];
  [outArg printlnWithNSString:@"# 'naacl2003unknowns', 'naacl2003conjunctions', 'distsim(s,m,n)',"];
  [outArg printlnWithNSString:@"# 'suffix(n)', 'prefix(n)', 'prefixsuffix(n)', 'capitalizationsuffix(n)',"];
  [outArg printlnWithNSString:@"# 'wordshapes(m,n)', 'unicodeshapes(m,n)', 'unicodeshapeconjunction(m,n)',"];
  [outArg printlnWithNSString:@"# 'lctagfeatures', 'order(k)', 'chinesedictionaryfeatures(s)'."];
  [outArg printlnWithNSString:@"# These keywords determines the features extracted.  'generic' is language independent."];
  [outArg printlnWithNSString:@"# distsim: Distributional similarity classes can be an added source of information"];
  [outArg printlnWithNSString:@"# about your words. An English distsim file is included, or you can use your own."];
  [outArg printlnWithNSString:@"# arch = "];
  [outArg println];
  [outArg printlnWithNSString:@"# 'wordFunction'.  A function applied to the text before training or tagging."];
  [outArg printlnWithNSString:@"# For example, edu.stanford.nlp.util.LowercaseFunction"];
  [outArg printlnWithNSString:@"# This function turns all the words into lowercase"];
  [outArg printlnWithNSString:@"# The function must implement java.util.function.Function<String, String>"];
  [outArg printlnWithNSString:@"# Blank means no preprocessing function"];
  [outArg printlnWithNSString:@"# wordFunction = "];
  [outArg println];
  [outArg printlnWithNSString:@"# 'language'.  This is really the tag set which is used for the"];
  [outArg printlnWithNSString:@"# list of open-class tags, and perhaps deterministic  tag"];
  [outArg printlnWithNSString:@"# expansion). Currently we have 'english', 'arabic', 'german', 'chinese'"];
  [outArg printlnWithNSString:@"# or 'polish' predefined. For your own language, you can specify "];
  [outArg printlnWithNSString:@"# the same information via openClassTags or closedClassTags below"];
  [outArg printlnWithNSString:@"# (only ONE of these three options may be specified). "];
  [outArg printlnWithNSString:@"# 'english' means UPenn English treebank tags. 'german' is STTS"];
  [outArg printlnWithNSString:@"# 'chinese' is CTB, and Arabic is an expanded Bies mapping from the ATB"];
  [outArg printlnWithNSString:@"# 'polish' means some tags that some guy on the internet once used. "];
  [outArg printlnWithNSString:@"# See the TTags class for more information."];
  [outArg printlnWithNSString:@"# lang = "];
  [outArg println];
  [outArg printlnWithNSString:@"# a space-delimited list of open-class parts of speech"];
  [outArg printlnWithNSString:@"# alternatively, you can specify language above to use a pre-defined list or specify the closed class tags (below)"];
  [outArg printlnWithNSString:@"# openClassTags = "];
  [outArg println];
  [outArg printlnWithNSString:@"# a space-delimited list of closed-class parts of speech"];
  [outArg printlnWithNSString:@"# alternatively, you can specify language above to use a pre-defined list or specify the open class tags (above)"];
  [outArg printlnWithNSString:@"# closedClassTags = "];
  [outArg println];
  [outArg printlnWithNSString:@"# A boolean indicating whether you would like the trained model to set POS tags as closed"];
  [outArg printlnWithNSString:@"# based on their frequency in training; default is false.  The frequency threshold can be set below. "];
  [outArg printlnWithNSString:@"# This option is ignored if any of {openClassTags, closedClassTags, lang} are specified."];
  [outArg printlnWithNSString:@"# learnClosedClassTags = "];
  [outArg println];
  [outArg printlnWithNSString:@"# Used only if learnClosedClassTags=true.  Tags that have fewer tokens than this threshold are"];
  [outArg printlnWithNSString:@"# considered closed in the trained model."];
  [outArg printlnWithNSString:@"# closedClassTagThreshold = "];
  [outArg println];
  [outArg printlnWithNSString:@"# search method for optimization. Normally use the default 'qn'. choices: 'qn' (quasi-Newton),"];
  [outArg printlnWithNSString:@"# 'cg' (conjugate gradient, 'owlqn' (L1 regularization) or 'iis' (improved iterative scaling)"];
  [outArg printlnWithNSString:JreStrcat("$$", @"# search = ", EduStanfordNlpTaggerMaxentTaggerConfig_SEARCH)];
  [outArg println];
  [outArg printlnWithNSString:@"# for conjugate gradient or quasi-Newton search, sigma-squared smoothing/regularization"];
  [outArg printlnWithNSString:@"# parameter. if left blank, the default is 0.5, which is usually okay"];
  [outArg printlnWithNSString:JreStrcat("$$", @"# sigmaSquared = ", EduStanfordNlpTaggerMaxentTaggerConfig_SIGMA_SQUARED)];
  [outArg println];
  [outArg printlnWithNSString:@"# for OWLQN search, regularization"];
  [outArg printlnWithNSString:@"# parameter. if left blank, the default is 1.0, which is usually okay"];
  [outArg printlnWithNSString:JreStrcat("$$", @"# regL1 = ", EduStanfordNlpTaggerMaxentTaggerConfig_DEFAULT_REG_L1)];
  [outArg println];
  [outArg printlnWithNSString:@"# For improved iterative scaling, the number of iterations, otherwise ignored"];
  [outArg printlnWithNSString:JreStrcat("$$", @"# iterations = ", EduStanfordNlpTaggerMaxentTaggerConfig_ITERATIONS)];
  [outArg println];
  [outArg printlnWithNSString:@"# rare word threshold. words that occur less than this number of"];
  [outArg printlnWithNSString:@"# times are considered rare words."];
  [outArg printlnWithNSString:JreStrcat("$$", @"# rareWordThresh = ", EduStanfordNlpTaggerMaxentTaggerConfig_RARE_WORD_THRESH)];
  [outArg println];
  [outArg printlnWithNSString:@"# minimum feature threshold. features whose history appears less"];
  [outArg printlnWithNSString:@"# than this number of times are ignored."];
  [outArg printlnWithNSString:JreStrcat("$$", @"# minFeatureThresh = ", EduStanfordNlpTaggerMaxentTaggerConfig_MIN_FEATURE_THRESH)];
  [outArg println];
  [outArg printlnWithNSString:@"# current word feature threshold. words that occur more than this"];
  [outArg printlnWithNSString:@"# number of times will generate features with all of their occurring"];
  [outArg printlnWithNSString:@"# tags."];
  [outArg printlnWithNSString:JreStrcat("$$", @"# curWordMinFeatureThresh = ", EduStanfordNlpTaggerMaxentTaggerConfig_CUR_WORD_MIN_FEATURE_THRESH)];
  [outArg println];
  [outArg printlnWithNSString:@"# rare word minimum feature threshold. features of rare words whose histories"];
  [outArg printlnWithNSString:@"# appear less than this times will be ignored."];
  [outArg printlnWithNSString:JreStrcat("$$", @"# rareWordMinFeatureThresh = ", EduStanfordNlpTaggerMaxentTaggerConfig_RARE_WORD_MIN_FEATURE_THRESH)];
  [outArg println];
  [outArg printlnWithNSString:@"# very common word threshold. words that occur more than this number of"];
  [outArg printlnWithNSString:@"# times will form an equivalence class by themselves. ignored unless"];
  [outArg printlnWithNSString:@"# you are using equivalence classes."];
  [outArg printlnWithNSString:JreStrcat("$$", @"# veryCommonWordThresh = ", EduStanfordNlpTaggerMaxentTaggerConfig_VERY_COMMON_WORD_THRESH)];
  [outArg println];
  [outArg printlnWithNSString:@"# sgml = "];
  [outArg printlnWithNSString:@"# tagInside = "];
  [outArg println];
  [outArg printlnWithNSString:@"# testFile and textFile can use multiple threads to process text."];
  [outArg printlnWithNSString:JreStrcat("$$", @"# nthreads = ", EduStanfordNlpTaggerMaxentTaggerConfig_NTHREADS)];
}

EduStanfordNlpTaggerMaxentTaggerConfig *EduStanfordNlpTaggerMaxentTaggerConfig_readConfigWithJavaIoDataInputStream_(JavaIoDataInputStream *stream) {
  EduStanfordNlpTaggerMaxentTaggerConfig_initialize();
  JavaIoObjectInputStream *in = new_JavaIoObjectInputStream_initWithJavaIoInputStream_(stream);
  return (EduStanfordNlpTaggerMaxentTaggerConfig *) cast_chk([in readObject], [EduStanfordNlpTaggerMaxentTaggerConfig class]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTaggerMaxentTaggerConfig)

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpTaggerMaxentTaggerConfig_Mode)

EduStanfordNlpTaggerMaxentTaggerConfig_Mode *EduStanfordNlpTaggerMaxentTaggerConfig_Mode_values_[4];

@implementation EduStanfordNlpTaggerMaxentTaggerConfig_Mode

+ (IOSObjectArray *)values {
  return EduStanfordNlpTaggerMaxentTaggerConfig_Mode_values();
}

+ (EduStanfordNlpTaggerMaxentTaggerConfig_Mode *)valueOfWithNSString:(NSString *)name {
  return EduStanfordNlpTaggerMaxentTaggerConfig_Mode_valueOfWithNSString_(name);
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LEduStanfordNlpTaggerMaxentTaggerConfig_Mode;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTaggerMaxentTaggerConfig_Mode;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TRAIN", "LEduStanfordNlpTaggerMaxentTaggerConfig_Mode;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "TEST", "LEduStanfordNlpTaggerMaxentTaggerConfig_Mode;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "TAG", "LEduStanfordNlpTaggerMaxentTaggerConfig_Mode;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "DUMP", "LEduStanfordNlpTaggerMaxentTaggerConfig_Mode;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(EduStanfordNlpTaggerMaxentTaggerConfig_Mode, TRAIN), &JreEnum(EduStanfordNlpTaggerMaxentTaggerConfig_Mode, TEST), &JreEnum(EduStanfordNlpTaggerMaxentTaggerConfig_Mode, TAG), &JreEnum(EduStanfordNlpTaggerMaxentTaggerConfig_Mode, DUMP), "LEduStanfordNlpTaggerMaxentTaggerConfig;", "Ljava/lang/Enum<Ledu/stanford/nlp/tagger/maxent/TaggerConfig$Mode;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpTaggerMaxentTaggerConfig_Mode = { "Mode", "edu.stanford.nlp.tagger.maxent", ptrTable, methods, fields, 7, 0x4019, 2, 4, 6, -1, -1, 7, -1 };
  return &_EduStanfordNlpTaggerMaxentTaggerConfig_Mode;
}

+ (void)initialize {
  if (self == [EduStanfordNlpTaggerMaxentTaggerConfig_Mode class]) {
    JreEnum(EduStanfordNlpTaggerMaxentTaggerConfig_Mode, TRAIN) = new_EduStanfordNlpTaggerMaxentTaggerConfig_Mode_initWithNSString_withInt_(@"TRAIN", 0);
    JreEnum(EduStanfordNlpTaggerMaxentTaggerConfig_Mode, TEST) = new_EduStanfordNlpTaggerMaxentTaggerConfig_Mode_initWithNSString_withInt_(@"TEST", 1);
    JreEnum(EduStanfordNlpTaggerMaxentTaggerConfig_Mode, TAG) = new_EduStanfordNlpTaggerMaxentTaggerConfig_Mode_initWithNSString_withInt_(@"TAG", 2);
    JreEnum(EduStanfordNlpTaggerMaxentTaggerConfig_Mode, DUMP) = new_EduStanfordNlpTaggerMaxentTaggerConfig_Mode_initWithNSString_withInt_(@"DUMP", 3);
    J2OBJC_SET_INITIALIZED(EduStanfordNlpTaggerMaxentTaggerConfig_Mode)
  }
}

@end

void EduStanfordNlpTaggerMaxentTaggerConfig_Mode_initWithNSString_withInt_(EduStanfordNlpTaggerMaxentTaggerConfig_Mode *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

EduStanfordNlpTaggerMaxentTaggerConfig_Mode *new_EduStanfordNlpTaggerMaxentTaggerConfig_Mode_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTaggerMaxentTaggerConfig_Mode, initWithNSString_withInt_, __name, __ordinal)
}

IOSObjectArray *EduStanfordNlpTaggerMaxentTaggerConfig_Mode_values() {
  EduStanfordNlpTaggerMaxentTaggerConfig_Mode_initialize();
  return [IOSObjectArray arrayWithObjects:EduStanfordNlpTaggerMaxentTaggerConfig_Mode_values_ count:4 type:EduStanfordNlpTaggerMaxentTaggerConfig_Mode_class_()];
}

EduStanfordNlpTaggerMaxentTaggerConfig_Mode *EduStanfordNlpTaggerMaxentTaggerConfig_Mode_valueOfWithNSString_(NSString *name) {
  EduStanfordNlpTaggerMaxentTaggerConfig_Mode_initialize();
  for (int i = 0; i < 4; i++) {
    EduStanfordNlpTaggerMaxentTaggerConfig_Mode *e = EduStanfordNlpTaggerMaxentTaggerConfig_Mode_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

EduStanfordNlpTaggerMaxentTaggerConfig_Mode *EduStanfordNlpTaggerMaxentTaggerConfig_Mode_fromOrdinal(NSUInteger ordinal) {
  EduStanfordNlpTaggerMaxentTaggerConfig_Mode_initialize();
  if (ordinal >= 4) {
    return nil;
  }
  return EduStanfordNlpTaggerMaxentTaggerConfig_Mode_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTaggerMaxentTaggerConfig_Mode)
