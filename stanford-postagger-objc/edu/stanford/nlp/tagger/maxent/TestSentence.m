//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/tagger/maxent/TestSentence.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/io/EncodingPrintWriter.h"
#include "edu/stanford/nlp/io/PrintFile.h"
#include "edu/stanford/nlp/ling/HasOffset.h"
#include "edu/stanford/nlp/ling/HasTag.h"
#include "edu/stanford/nlp/ling/HasWord.h"
#include "edu/stanford/nlp/ling/Sentence.h"
#include "edu/stanford/nlp/ling/TaggedWord.h"
#include "edu/stanford/nlp/math/ArrayMath.h"
#include "edu/stanford/nlp/math/SloppyMath.h"
#include "edu/stanford/nlp/maxent/iis/LambdaSolve.h"
#include "edu/stanford/nlp/sequences/BestSequenceFinder.h"
#include "edu/stanford/nlp/sequences/ExactBestSequenceFinder.h"
#include "edu/stanford/nlp/tagger/common/Tagger.h"
#include "edu/stanford/nlp/tagger/maxent/Dictionary.h"
#include "edu/stanford/nlp/tagger/maxent/Extractor.h"
#include "edu/stanford/nlp/tagger/maxent/ExtractorFrames.h"
#include "edu/stanford/nlp/tagger/maxent/Extractors.h"
#include "edu/stanford/nlp/tagger/maxent/History.h"
#include "edu/stanford/nlp/tagger/maxent/MaxentTagger.h"
#include "edu/stanford/nlp/tagger/maxent/PairsHolder.h"
#include "edu/stanford/nlp/tagger/maxent/TTags.h"
#include "edu/stanford/nlp/tagger/maxent/TaggerConfig.h"
#include "edu/stanford/nlp/tagger/maxent/TestSentence.h"
#include "edu/stanford/nlp/util/ArrayUtils.h"
#include "edu/stanford/nlp/util/ConfusionMatrix.h"
#include "edu/stanford/nlp/util/Generics.h"
#include "edu/stanford/nlp/util/Pair.h"
#include "edu/stanford/nlp/util/RuntimeInterruptedException.h"
#include "java/io/OutputStreamWriter.h"
#include "java/io/PrintStream.h"
#include "java/io/PrintWriter.h"
#include "java/io/StringWriter.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/lang/Double.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/text/DecimalFormat.h"
#include "java/text/NumberFormat.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/function/Function.h"

@interface EduStanfordNlpTaggerMaxentTestSentence () {
 @public
  jint endSizePairs_;
  volatile_id history_;
}

- (JavaUtilArrayList *)testTagInference;

- (void)runTagInference;

- (void)setHistoryWithInt:(jint)current
withEduStanfordNlpTaggerMaxentHistory:(EduStanfordNlpTaggerMaxentHistory *)h
             withIntArray:(IOSIntArray *)tags;

- (IOSDoubleArray *)getScoresWithEduStanfordNlpTaggerMaxentHistory:(EduStanfordNlpTaggerMaxentHistory *)h;

- (IOSDoubleArray *)getExactScoresWithEduStanfordNlpTaggerMaxentHistory:(EduStanfordNlpTaggerMaxentHistory *)h;

- (IOSDoubleArray *)getApproximateScoresWithEduStanfordNlpTaggerMaxentHistory:(EduStanfordNlpTaggerMaxentHistory *)h;

- (IOSDoubleArray *)getHistoriesWithNSStringArray:(IOSObjectArray *)tags
            withEduStanfordNlpTaggerMaxentHistory:(EduStanfordNlpTaggerMaxentHistory *)h
                                 withJavaUtilList:(id<JavaUtilList>)extractors
                                 withJavaUtilList:(id<JavaUtilList>)extractorsRare;

- (IOSDoubleArray *)getExactHistoriesWithEduStanfordNlpTaggerMaxentHistory:(EduStanfordNlpTaggerMaxentHistory *)h
                                                          withJavaUtilList:(id<JavaUtilList>)extractors
                                                          withJavaUtilList:(id<JavaUtilList>)extractorsRare;

- (IOSDoubleArray *)getApproximateHistoriesWithNSStringArray:(IOSObjectArray *)tags
                       withEduStanfordNlpTaggerMaxentHistory:(EduStanfordNlpTaggerMaxentHistory *)h
                                            withJavaUtilList:(id<JavaUtilList>)extractors
                                            withJavaUtilList:(id<JavaUtilList>)extractorsRare;

- (void)getTop3WithDoubleArray3:(IOSObjectArray *)probabilities
                        withInt:(jint)current
                withDoubleArray:(IOSDoubleArray *)probs
              withNSStringArray:(IOSObjectArray *)tags;

@end

J2OBJC_VOLATILE_FIELD_SETTER(EduStanfordNlpTaggerMaxentTestSentence, history_, EduStanfordNlpTaggerMaxentHistory *)

inline IOSObjectArray *EduStanfordNlpTaggerMaxentTestSentence_get_naTagArr();
static IOSObjectArray *EduStanfordNlpTaggerMaxentTestSentence_naTagArr;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpTaggerMaxentTestSentence, naTagArr, IOSObjectArray *)

__attribute__((unused)) static JavaUtilArrayList *EduStanfordNlpTaggerMaxentTestSentence_testTagInference(EduStanfordNlpTaggerMaxentTestSentence *self);

__attribute__((unused)) static void EduStanfordNlpTaggerMaxentTestSentence_runTagInference(EduStanfordNlpTaggerMaxentTestSentence *self);

__attribute__((unused)) static void EduStanfordNlpTaggerMaxentTestSentence_setHistoryWithInt_withEduStanfordNlpTaggerMaxentHistory_withIntArray_(EduStanfordNlpTaggerMaxentTestSentence *self, jint current, EduStanfordNlpTaggerMaxentHistory *h, IOSIntArray *tags);

__attribute__((unused)) static IOSDoubleArray *EduStanfordNlpTaggerMaxentTestSentence_getScoresWithEduStanfordNlpTaggerMaxentHistory_(EduStanfordNlpTaggerMaxentTestSentence *self, EduStanfordNlpTaggerMaxentHistory *h);

__attribute__((unused)) static IOSDoubleArray *EduStanfordNlpTaggerMaxentTestSentence_getExactScoresWithEduStanfordNlpTaggerMaxentHistory_(EduStanfordNlpTaggerMaxentTestSentence *self, EduStanfordNlpTaggerMaxentHistory *h);

__attribute__((unused)) static IOSDoubleArray *EduStanfordNlpTaggerMaxentTestSentence_getApproximateScoresWithEduStanfordNlpTaggerMaxentHistory_(EduStanfordNlpTaggerMaxentTestSentence *self, EduStanfordNlpTaggerMaxentHistory *h);

__attribute__((unused)) static IOSDoubleArray *EduStanfordNlpTaggerMaxentTestSentence_getHistoriesWithNSStringArray_withEduStanfordNlpTaggerMaxentHistory_withJavaUtilList_withJavaUtilList_(EduStanfordNlpTaggerMaxentTestSentence *self, IOSObjectArray *tags, EduStanfordNlpTaggerMaxentHistory *h, id<JavaUtilList> extractors, id<JavaUtilList> extractorsRare);

__attribute__((unused)) static IOSDoubleArray *EduStanfordNlpTaggerMaxentTestSentence_getExactHistoriesWithEduStanfordNlpTaggerMaxentHistory_withJavaUtilList_withJavaUtilList_(EduStanfordNlpTaggerMaxentTestSentence *self, EduStanfordNlpTaggerMaxentHistory *h, id<JavaUtilList> extractors, id<JavaUtilList> extractorsRare);

__attribute__((unused)) static IOSDoubleArray *EduStanfordNlpTaggerMaxentTestSentence_getApproximateHistoriesWithNSStringArray_withEduStanfordNlpTaggerMaxentHistory_withJavaUtilList_withJavaUtilList_(EduStanfordNlpTaggerMaxentTestSentence *self, IOSObjectArray *tags, EduStanfordNlpTaggerMaxentHistory *h, id<JavaUtilList> extractors, id<JavaUtilList> extractorsRare);

__attribute__((unused)) static void EduStanfordNlpTaggerMaxentTestSentence_getTop3WithDoubleArray3_withInt_withDoubleArray_withNSStringArray_(EduStanfordNlpTaggerMaxentTestSentence *self, IOSObjectArray *probabilities, jint current, IOSDoubleArray *probs, IOSObjectArray *tags);

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpTaggerMaxentTestSentence)

NSString *EduStanfordNlpTaggerMaxentTestSentence_naTag = @"NA";

@implementation EduStanfordNlpTaggerMaxentTestSentence

- (instancetype)initWithEduStanfordNlpTaggerMaxentMaxentTagger:(EduStanfordNlpTaggerMaxentMaxentTagger *)maxentTagger {
  EduStanfordNlpTaggerMaxentTestSentence_initWithEduStanfordNlpTaggerMaxentMaxentTagger_(self, maxentTagger);
  return self;
}

- (void)setCorrectTagsWithJavaUtilList:(id<JavaUtilList>)sentence {
  jint len = [((id<JavaUtilList>) nil_chk(sentence)) size];
  correctTags_ = [IOSObjectArray newArrayWithLength:len type:NSString_class_()];
  for (jint i = 0; i < len; i++) {
    (void) IOSObjectArray_Set(nil_chk(correctTags_), i, [((id<EduStanfordNlpLingHasTag>) nil_chk([sentence getWithInt:i])) tag]);
  }
}

- (JavaUtilArrayList *)tagSentenceWithJavaUtilList:(id<JavaUtilList>)s
                                       withBoolean:(jboolean)reuseTags {
  self->origWords_ = new_JavaUtilArrayList_initWithJavaUtilCollection_(s);
  jint sz = [((id<JavaUtilList>) nil_chk(s)) size];
  self->sent_ = new_JavaUtilArrayList_initWithInt_(sz + 1);
  for (id<EduStanfordNlpLingHasWord> __strong value1 in s) {
    if (((EduStanfordNlpTaggerMaxentMaxentTagger *) nil_chk(maxentTagger_))->wordFunction_ != nil) {
      [((id<JavaUtilList>) nil_chk(sent_)) addWithId:[maxentTagger_->wordFunction_ applyWithId:[((id<EduStanfordNlpLingHasWord>) nil_chk(value1)) word]]];
    }
    else {
      [((id<JavaUtilList>) nil_chk(sent_)) addWithId:[((id<EduStanfordNlpLingHasWord>) nil_chk(value1)) word]];
    }
  }
  [sent_ addWithId:EduStanfordNlpTaggerCommonTagger_EOS_WORD];
  if (reuseTags) {
    self->originalTags_ = new_JavaUtilArrayList_initWithInt_(sz + 1);
    for (id<EduStanfordNlpLingHasWord> __strong value in s) {
      if ([EduStanfordNlpLingHasTag_class_() isInstance:value]) {
        [((id<JavaUtilList>) nil_chk(originalTags_)) addWithId:[((id<EduStanfordNlpLingHasTag>) nil_chk(((id<EduStanfordNlpLingHasTag>) cast_check(value, EduStanfordNlpLingHasTag_class_())))) tag]];
      }
      else {
        [((id<JavaUtilList>) nil_chk(originalTags_)) addWithId:nil];
      }
    }
    [originalTags_ addWithId:EduStanfordNlpTaggerCommonTagger_EOS_TAG];
  }
  size_ = sz + 1;
  if (VERBOSE_) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$", @"Sentence is ", EduStanfordNlpLingSentence_listToStringWithJavaUtilList_withBoolean_withNSString_(sent_, false, tagSeparator_))];
  }
  [self init__];
  result_ = EduStanfordNlpTaggerMaxentTestSentence_testTagInference(self);
  if (((EduStanfordNlpTaggerMaxentMaxentTagger *) nil_chk(maxentTagger_))->wordFunction_ != nil) {
    for (jint j = 0; j < sz; ++j) {
      [((EduStanfordNlpLingTaggedWord *) nil_chk([((JavaUtilArrayList *) nil_chk(result_)) getWithInt:j])) setWordWithNSString:[((id<EduStanfordNlpLingHasWord>) nil_chk([s getWithInt:j])) word]];
    }
  }
  return result_;
}

- (void)revertWithInt:(jint)prevSize {
  endSizePairs_ = prevSize;
}

- (void)init__ {
  (void) JreVolatileStrongAssignAndConsume(&localContextScores_, [IOSObjectArray newArrayWithLength:size_ type:IOSClass_doubleArray(1)]);
  for (jint i = 0; i < size_ - 1; i++) {
    if ([((EduStanfordNlpTaggerMaxentDictionary *) nil_chk(((EduStanfordNlpTaggerMaxentMaxentTagger *) nil_chk(maxentTagger_))->dict_)) isUnknownWithNSString:[((id<JavaUtilList>) nil_chk(sent_)) getWithInt:i]]) {
      numUnknown_++;
    }
  }
}

- (NSString *)getTaggedNice {
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  for (jint i = 0; i < size_ - 1; i++) {
    (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:EduStanfordNlpTaggerMaxentTestSentence_toNiceWithNSString_([((id<JavaUtilList>) nil_chk(sent_)) getWithInt:i])])) appendWithNSString:tagSeparator_])) appendWithNSString:EduStanfordNlpTaggerMaxentTestSentence_toNiceWithNSString_(IOSObjectArray_Get(nil_chk(finalTags_), i))];
    (void) [sb appendWithChar:' '];
  }
  return [sb description];
}

- (JavaUtilArrayList *)getTaggedSentence {
  jboolean hasOffset;
  hasOffset = (origWords_ != nil && [origWords_ size] > 0 && ([EduStanfordNlpLingHasOffset_class_() isInstance:[((id<JavaUtilList>) nil_chk(origWords_)) getWithInt:0]]));
  JavaUtilArrayList *taggedSentence = new_JavaUtilArrayList_init();
  for (jint j = 0; j < size_ - 1; j++) {
    NSString *tag = IOSObjectArray_Get(nil_chk(finalTags_), j);
    EduStanfordNlpLingTaggedWord *w = new_EduStanfordNlpLingTaggedWord_initWithNSString_withNSString_([((id<JavaUtilList>) nil_chk(sent_)) getWithInt:j], tag);
    if (hasOffset) {
      id<EduStanfordNlpLingHasOffset> offset = (id<EduStanfordNlpLingHasOffset>) cast_check([((id<JavaUtilList>) nil_chk(origWords_)) getWithInt:j], EduStanfordNlpLingHasOffset_class_());
      [w setBeginPositionWithInt:[((id<EduStanfordNlpLingHasOffset>) nil_chk(offset)) beginPosition]];
      [w setEndPositionWithInt:[offset endPosition]];
    }
    [taggedSentence addWithId:w];
  }
  return taggedSentence;
}

+ (NSString *)toNiceWithNSString:(NSString *)s {
  return EduStanfordNlpTaggerMaxentTestSentence_toNiceWithNSString_(s);
}

- (void)calculateProbsWithDoubleArray3:(IOSObjectArray *)probabilities {
  EduStanfordNlpUtilArrayUtils_fillWithDoubleArray3_withDouble_(probabilities, JavaLangDouble_NEGATIVE_INFINITY);
  for (jint hyp = 0; hyp < EduStanfordNlpTaggerMaxentTestSentence_kBestSize; hyp++) {
    [((EduStanfordNlpTaggerMaxentPairsHolder *) nil_chk(pairs_)) setSizeWithInt:size_];
    for (jint i = 0; i < size_; i++) {
      [pairs_ setWordWithInt:i withNSString:[((id<JavaUtilList>) nil_chk(sent_)) getWithInt:i]];
      [pairs_ setTagWithInt:i withNSString:IOSObjectArray_Get(nil_chk(finalTags_), i)];
    }
    jint start = endSizePairs_;
    jint end = endSizePairs_ + size_ - 1;
    endSizePairs_ = endSizePairs_ + size_;
    for (jint current = 0; current < size_; current++) {
      EduStanfordNlpTaggerMaxentHistory *h = new_EduStanfordNlpTaggerMaxentHistory_initWithInt_withInt_withInt_withEduStanfordNlpTaggerMaxentPairsHolder_withEduStanfordNlpTaggerMaxentExtractors_(start, end, current + start, pairs_, ((EduStanfordNlpTaggerMaxentMaxentTagger *) nil_chk(maxentTagger_))->extractors_);
      IOSObjectArray *tags = [self stringTagsAtWithInt:h->current_ - h->start_ + [self leftWindow]];
      IOSDoubleArray *probs = [self getHistoriesWithNSStringArray:tags withEduStanfordNlpTaggerMaxentHistory:h];
      EduStanfordNlpMathArrayMath_logNormalizeWithDoubleArray_(probs);
      for (jint j = 0; j < ((IOSObjectArray *) nil_chk(tags))->size_; j++) {
        NSString *tag = IOSObjectArray_Get(tags, j);
        jboolean approximate = [maxentTagger_ hasApproximateScoring];
        jint tagindex = approximate ? [((EduStanfordNlpTaggerMaxentTTags *) nil_chk(maxentTagger_->tags_)) getIndexWithNSString:tag] : j;
        *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(probabilities), current)), hyp)), tagindex) = IOSDoubleArray_Get(nil_chk(probs), j);
      }
    }
  }
  [self revertWithInt:0];
}

- (void)writeTagsAndErrorsWithNSStringArray:(IOSObjectArray *)finalTags
              withEduStanfordNlpIoPrintFile:(EduStanfordNlpIoPrintFile *)pf
                                withBoolean:(jboolean)verboseResults {
  JavaIoStringWriter *sw = new_JavaIoStringWriter_initWithInt_(200);
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(correctTags_))->size_; i++) {
    [sw writeWithNSString:EduStanfordNlpTaggerMaxentTestSentence_toNiceWithNSString_([((id<JavaUtilList>) nil_chk(sent_)) getWithInt:i])];
    [sw writeWithNSString:tagSeparator_];
    [sw writeWithNSString:IOSObjectArray_Get(nil_chk(finalTags), i)];
    [sw writeWithInt:' '];
    if (pf != nil) {
      [pf printWithNSString:EduStanfordNlpTaggerMaxentTestSentence_toNiceWithNSString_([((id<JavaUtilList>) nil_chk(sent_)) getWithInt:i])];
      [pf printWithNSString:tagSeparator_];
      [pf printWithNSString:IOSObjectArray_Get(finalTags, i)];
    }
    if ([((NSString *) nil_chk((IOSObjectArray_Get(nil_chk(correctTags_), i)))) isEqual:IOSObjectArray_Get(finalTags, i)]) {
      numRight_++;
    }
    else {
      numWrong_++;
      if (pf != nil) [pf printWithNSString:JreStrcat("C$", '|', IOSObjectArray_Get(nil_chk(correctTags_), i))];
      if (verboseResults) {
        EduStanfordNlpIoEncodingPrintWriter_err_printlnWithNSString_withNSString_(JreStrcat("$$$$$$$", ([((EduStanfordNlpTaggerMaxentDictionary *) nil_chk(((EduStanfordNlpTaggerMaxentMaxentTagger *) nil_chk(maxentTagger_))->dict_)) isUnknownWithNSString:[((id<JavaUtilList>) nil_chk(sent_)) getWithInt:i]] ? @"Unk" : @""), @"Word: ", [((id<JavaUtilList>) nil_chk(sent_)) getWithInt:i], @"; correct: ", IOSObjectArray_Get(nil_chk(correctTags_), i), @"; guessed: ", IOSObjectArray_Get(finalTags, i)), encoding_);
      }
      if ([((EduStanfordNlpTaggerMaxentDictionary *) nil_chk(((EduStanfordNlpTaggerMaxentMaxentTagger *) nil_chk(maxentTagger_))->dict_)) isUnknownWithNSString:[((id<JavaUtilList>) nil_chk(sent_)) getWithInt:i]]) {
        numWrongUnknown_++;
        if (pf != nil) [pf printWithNSString:@"*"];
      }
    }
    if (pf != nil) [pf printWithChar:' '];
  }
  if (pf != nil) [pf println];
  if (verboseResults) {
    JavaIoPrintWriter *pw;
    @try {
      pw = new_JavaIoPrintWriter_initWithJavaIoWriter_withBoolean_(new_JavaIoOutputStreamWriter_initWithJavaIoOutputStream_withNSString_(JreLoadStatic(JavaLangSystem, out), encoding_), true);
    }
    @catch (JavaIoUnsupportedEncodingException *uee) {
      pw = new_JavaIoPrintWriter_initWithJavaIoWriter_withBoolean_(new_JavaIoOutputStreamWriter_initWithJavaIoOutputStream_(JreLoadStatic(JavaLangSystem, out)), true);
    }
    [((JavaIoPrintWriter *) nil_chk(pw)) printlnWithId:sw];
  }
}

- (void)updateConfusionMatrixWithNSStringArray:(IOSObjectArray *)finalTags
         withEduStanfordNlpUtilConfusionMatrix:(EduStanfordNlpUtilConfusionMatrix *)confusionMatrix {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(correctTags_))->size_; i++) [((EduStanfordNlpUtilConfusionMatrix *) nil_chk(confusionMatrix)) addWithId:IOSObjectArray_Get(nil_chk(finalTags), i) withId:IOSObjectArray_Get(correctTags_, i)];
}

- (JavaUtilArrayList *)testTagInference {
  return EduStanfordNlpTaggerMaxentTestSentence_testTagInference(self);
}

- (void)runTagInference {
  EduStanfordNlpTaggerMaxentTestSentence_runTagInference(self);
}

- (void)setHistoryWithInt:(jint)current
withEduStanfordNlpTaggerMaxentHistory:(EduStanfordNlpTaggerMaxentHistory *)h
             withIntArray:(IOSIntArray *)tags {
  EduStanfordNlpTaggerMaxentTestSentence_setHistoryWithInt_withEduStanfordNlpTaggerMaxentHistory_withIntArray_(self, current, h, tags);
}

- (void)initializeScorer {
  [((EduStanfordNlpTaggerMaxentPairsHolder *) nil_chk(pairs_)) setSizeWithInt:size_];
  for (jint i = 0; i < size_; i++) [pairs_ setWordWithInt:i withNSString:[((id<JavaUtilList>) nil_chk(sent_)) getWithInt:i]];
  endSizePairs_ += size_;
}

- (void)cleanUpScorer {
  [self revertWithInt:0];
}

- (IOSDoubleArray *)getScoresWithEduStanfordNlpTaggerMaxentHistory:(EduStanfordNlpTaggerMaxentHistory *)h {
  return EduStanfordNlpTaggerMaxentTestSentence_getScoresWithEduStanfordNlpTaggerMaxentHistory_(self, h);
}

- (IOSDoubleArray *)getExactScoresWithEduStanfordNlpTaggerMaxentHistory:(EduStanfordNlpTaggerMaxentHistory *)h {
  return EduStanfordNlpTaggerMaxentTestSentence_getExactScoresWithEduStanfordNlpTaggerMaxentHistory_(self, h);
}

- (IOSDoubleArray *)getApproximateScoresWithEduStanfordNlpTaggerMaxentHistory:(EduStanfordNlpTaggerMaxentHistory *)h {
  return EduStanfordNlpTaggerMaxentTestSentence_getApproximateScoresWithEduStanfordNlpTaggerMaxentHistory_(self, h);
}

- (IOSDoubleArray *)getHistoriesWithNSStringArray:(IOSObjectArray *)tags
            withEduStanfordNlpTaggerMaxentHistory:(EduStanfordNlpTaggerMaxentHistory *)h {
  jboolean rare = [((EduStanfordNlpTaggerMaxentMaxentTagger *) nil_chk(maxentTagger_)) isRareWithNSString:[((EduStanfordNlpTaggerMaxentExtractor *) nil_chk(JreLoadStatic(EduStanfordNlpTaggerMaxentExtractorFrames, cWord))) extractWithEduStanfordNlpTaggerMaxentHistory:h]];
  EduStanfordNlpTaggerMaxentExtractors *ex = maxentTagger_->extractors_, *exR = maxentTagger_->extractorsRare_;
  NSString *w = [((EduStanfordNlpTaggerMaxentPairsHolder *) nil_chk(pairs_)) getWordWithInt:((EduStanfordNlpTaggerMaxentHistory *) nil_chk(h))->current_];
  IOSDoubleArray *lS, *lcS;
  lS = [((id<JavaUtilMap>) nil_chk(JreLoadVolatileId(&localScores_))) getWithId:w];
  if (lS == nil) {
    lS = EduStanfordNlpTaggerMaxentTestSentence_getHistoriesWithNSStringArray_withEduStanfordNlpTaggerMaxentHistory_withJavaUtilList_withJavaUtilList_(self, tags, h, ((EduStanfordNlpTaggerMaxentExtractors *) nil_chk(ex))->local_, rare ? ((EduStanfordNlpTaggerMaxentExtractors *) nil_chk(exR))->local_ : nil);
    (void) [((id<JavaUtilMap>) nil_chk(JreLoadVolatileId(&localScores_))) putWithId:w withId:lS];
  }
  else if (lS->size_ != ((IOSObjectArray *) nil_chk(tags))->size_) {
    lS = EduStanfordNlpTaggerMaxentTestSentence_getHistoriesWithNSStringArray_withEduStanfordNlpTaggerMaxentHistory_withJavaUtilList_withJavaUtilList_(self, tags, h, ((EduStanfordNlpTaggerMaxentExtractors *) nil_chk(ex))->local_, rare ? ((EduStanfordNlpTaggerMaxentExtractors *) nil_chk(exR))->local_ : nil);
    if (tags->size_ > 1) {
      (void) [((id<JavaUtilMap>) nil_chk(JreLoadVolatileId(&localScores_))) putWithId:w withId:lS];
    }
  }
  if ((lcS = IOSObjectArray_Get(nil_chk(JreLoadVolatileId(&localContextScores_)), h->current_)) == nil) {
    lcS = EduStanfordNlpTaggerMaxentTestSentence_getHistoriesWithNSStringArray_withEduStanfordNlpTaggerMaxentHistory_withJavaUtilList_withJavaUtilList_(self, tags, h, ((EduStanfordNlpTaggerMaxentExtractors *) nil_chk(ex))->localContext_, rare ? ((EduStanfordNlpTaggerMaxentExtractors *) nil_chk(exR))->localContext_ : nil);
    (void) IOSObjectArray_Set(nil_chk(JreLoadVolatileId(&localContextScores_)), h->current_, lcS);
    EduStanfordNlpMathArrayMath_pairwiseAddInPlaceWithDoubleArray_withDoubleArray_(lcS, lS);
  }
  IOSDoubleArray *totalS = EduStanfordNlpTaggerMaxentTestSentence_getHistoriesWithNSStringArray_withEduStanfordNlpTaggerMaxentHistory_withJavaUtilList_withJavaUtilList_(self, tags, h, ((EduStanfordNlpTaggerMaxentExtractors *) nil_chk(ex))->dynamic_, rare ? ((EduStanfordNlpTaggerMaxentExtractors *) nil_chk(exR))->dynamic_ : nil);
  EduStanfordNlpMathArrayMath_pairwiseAddInPlaceWithDoubleArray_withDoubleArray_(totalS, lcS);
  return totalS;
}

- (IOSDoubleArray *)getHistoriesWithNSStringArray:(IOSObjectArray *)tags
            withEduStanfordNlpTaggerMaxentHistory:(EduStanfordNlpTaggerMaxentHistory *)h
                                 withJavaUtilList:(id<JavaUtilList>)extractors
                                 withJavaUtilList:(id<JavaUtilList>)extractorsRare {
  return EduStanfordNlpTaggerMaxentTestSentence_getHistoriesWithNSStringArray_withEduStanfordNlpTaggerMaxentHistory_withJavaUtilList_withJavaUtilList_(self, tags, h, extractors, extractorsRare);
}

- (IOSDoubleArray *)getExactHistoriesWithEduStanfordNlpTaggerMaxentHistory:(EduStanfordNlpTaggerMaxentHistory *)h
                                                          withJavaUtilList:(id<JavaUtilList>)extractors
                                                          withJavaUtilList:(id<JavaUtilList>)extractorsRare {
  return EduStanfordNlpTaggerMaxentTestSentence_getExactHistoriesWithEduStanfordNlpTaggerMaxentHistory_withJavaUtilList_withJavaUtilList_(self, h, extractors, extractorsRare);
}

- (IOSDoubleArray *)getApproximateHistoriesWithNSStringArray:(IOSObjectArray *)tags
                       withEduStanfordNlpTaggerMaxentHistory:(EduStanfordNlpTaggerMaxentHistory *)h
                                            withJavaUtilList:(id<JavaUtilList>)extractors
                                            withJavaUtilList:(id<JavaUtilList>)extractorsRare {
  return EduStanfordNlpTaggerMaxentTestSentence_getApproximateHistoriesWithNSStringArray_withEduStanfordNlpTaggerMaxentHistory_withJavaUtilList_withJavaUtilList_(self, tags, h, extractors, extractorsRare);
}

- (void)printUnknownWithInt:(jint)numSent
withEduStanfordNlpIoPrintFile:(EduStanfordNlpIoPrintFile *)pfu {
  JavaTextNumberFormat *nf = new_JavaTextDecimalFormat_initWithNSString_(@"0.0000");
  jint numTags = [((EduStanfordNlpTaggerMaxentMaxentTagger *) nil_chk(maxentTagger_)) numTags];
  IOSObjectArray *probabilities = [IOSDoubleArray newArrayWithDimensions:3 lengths:(jint[]){ size_, EduStanfordNlpTaggerMaxentTestSentence_kBestSize, numTags }];
  [self calculateProbsWithDoubleArray3:probabilities];
  for (jint current = 0; current < size_; current++) {
    if ([((EduStanfordNlpTaggerMaxentDictionary *) nil_chk(maxentTagger_->dict_)) isUnknownWithNSString:[((id<JavaUtilList>) nil_chk(sent_)) getWithInt:current]]) {
      [((EduStanfordNlpIoPrintFile *) nil_chk(pfu)) printWithNSString:[((id<JavaUtilList>) nil_chk(sent_)) getWithInt:current]];
      [pfu printWithChar:':'];
      [pfu printWithInt:numSent];
      IOSDoubleArray *probs = [IOSDoubleArray newArrayWithLength:3];
      IOSObjectArray *tag3 = [IOSObjectArray newArrayWithLength:3 type:NSString_class_()];
      EduStanfordNlpTaggerMaxentTestSentence_getTop3WithDoubleArray3_withInt_withDoubleArray_withNSStringArray_(self, probabilities, current, probs, tag3);
      for (jint i = 0; i < 3; i++) {
        if (IOSDoubleArray_Get(probs, i) > JavaLangDouble_NEGATIVE_INFINITY) {
          [pfu printWithChar:0x0009];
          [pfu printWithNSString:IOSObjectArray_Get(tag3, i)];
          [pfu printWithChar:' '];
          [pfu printWithNSString:[nf formatWithDouble:JavaLangMath_expWithDouble_(IOSDoubleArray_Get(probs, i))]];
        }
      }
      jint rank;
      NSString *correctTag = EduStanfordNlpTaggerMaxentTestSentence_toNiceWithNSString_(IOSObjectArray_Get(nil_chk(self->correctTags_), current));
      for (rank = 0; rank < 3; rank++) {
        if ([((NSString *) nil_chk(correctTag)) isEqual:IOSObjectArray_Get(tag3, rank)]) {
          break;
        }
      }
      [pfu printWithChar:0x0009];
      switch (rank) {
        case 0:
        [pfu printWithNSString:@"Correct"];
        break;
        case 1:
        [pfu printWithNSString:@"2nd"];
        break;
        case 2:
        [pfu printWithNSString:@"3rd"];
        break;
        default:
        [pfu printWithNSString:@"Not top 3"];
      }
      [pfu println];
    }
  }
}

- (void)printTopWithEduStanfordNlpIoPrintFile:(EduStanfordNlpIoPrintFile *)pfu {
  JavaTextNumberFormat *nf = new_JavaTextDecimalFormat_initWithNSString_(@"0.0000");
  jint numTags = [((EduStanfordNlpTaggerMaxentMaxentTagger *) nil_chk(maxentTagger_)) numTags];
  IOSObjectArray *probabilities = [IOSDoubleArray newArrayWithDimensions:3 lengths:(jint[]){ size_, EduStanfordNlpTaggerMaxentTestSentence_kBestSize, numTags }];
  [self calculateProbsWithDoubleArray3:probabilities];
  for (jint current = 0; current < ((IOSObjectArray *) nil_chk(correctTags_))->size_; current++) {
    [((EduStanfordNlpIoPrintFile *) nil_chk(pfu)) printWithNSString:[((id<JavaUtilList>) nil_chk(sent_)) getWithInt:current]];
    IOSDoubleArray *probs = [IOSDoubleArray newArrayWithLength:3];
    IOSObjectArray *tag3 = [IOSObjectArray newArrayWithLength:3 type:NSString_class_()];
    EduStanfordNlpTaggerMaxentTestSentence_getTop3WithDoubleArray3_withInt_withDoubleArray_withNSStringArray_(self, probabilities, current, probs, tag3);
    for (jint i = 0; i < 3; i++) {
      if (IOSDoubleArray_Get(probs, i) > JavaLangDouble_NEGATIVE_INFINITY) {
        [pfu printWithChar:0x0009];
        [pfu printWithNSString:IOSObjectArray_Get(tag3, i)];
        [pfu printWithChar:' '];
        [pfu printWithNSString:[nf formatWithDouble:JavaLangMath_expWithDouble_(IOSDoubleArray_Get(probs, i))]];
      }
    }
    jint rank;
    NSString *correctTag = EduStanfordNlpTaggerMaxentTestSentence_toNiceWithNSString_(IOSObjectArray_Get(nil_chk(self->correctTags_), current));
    for (rank = 0; rank < 3; rank++) {
      if ([((NSString *) nil_chk(correctTag)) isEqual:IOSObjectArray_Get(tag3, rank)]) {
        break;
      }
    }
    [pfu printWithChar:0x0009];
    switch (rank) {
      case 0:
      [pfu printWithNSString:@"Correct"];
      break;
      case 1:
      [pfu printWithNSString:@"2nd"];
      break;
      case 2:
      [pfu printWithNSString:@"3rd"];
      break;
      default:
      [pfu printWithNSString:@"Not top 3"];
    }
    [pfu println];
  }
}

- (void)getTop3WithDoubleArray3:(IOSObjectArray *)probabilities
                        withInt:(jint)current
                withDoubleArray:(IOSDoubleArray *)probs
              withNSStringArray:(IOSObjectArray *)tags {
  EduStanfordNlpTaggerMaxentTestSentence_getTop3WithDoubleArray3_withInt_withDoubleArray_withNSStringArray_(self, probabilities, current, probs, tags);
}

- (jint)length {
  return [((id<JavaUtilList>) nil_chk(sent_)) size];
}

- (jint)leftWindow {
  return ((EduStanfordNlpTaggerMaxentMaxentTagger *) nil_chk(maxentTagger_))->leftContext_;
}

- (jint)rightWindow {
  return ((EduStanfordNlpTaggerMaxentMaxentTagger *) nil_chk(maxentTagger_))->rightContext_;
}

- (IOSIntArray *)getPossibleValuesWithInt:(jint)pos {
  IOSObjectArray *arr1 = [self stringTagsAtWithInt:pos];
  IOSIntArray *arr = [IOSIntArray newArrayWithLength:((IOSObjectArray *) nil_chk(arr1))->size_];
  for (jint i = 0; i < arr->size_; i++) {
    *IOSIntArray_GetRef(arr, i) = [((EduStanfordNlpTaggerMaxentTTags *) nil_chk(((EduStanfordNlpTaggerMaxentMaxentTagger *) nil_chk(maxentTagger_))->tags_)) getIndexWithNSString:IOSObjectArray_Get(arr1, i)];
  }
  return arr;
}

- (jdouble)scoreOfWithIntArray:(IOSIntArray *)tags
                       withInt:(jint)pos {
  IOSDoubleArray *scores = [self scoresOfWithIntArray:tags withInt:pos];
  jdouble score = JavaLangDouble_NEGATIVE_INFINITY;
  IOSIntArray *pv = [self getPossibleValuesWithInt:pos];
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(scores))->size_; i++) {
    if (IOSIntArray_Get(nil_chk(pv), i) == IOSIntArray_Get(nil_chk(tags), pos)) {
      score = IOSDoubleArray_Get(scores, i);
    }
  }
  return score;
}

- (jdouble)scoreOfWithIntArray:(IOSIntArray *)sequence {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (IOSDoubleArray *)scoresOfWithIntArray:(IOSIntArray *)tags
                                 withInt:(jint)pos {
  [((EduStanfordNlpTaggerMaxentHistory *) nil_chk(JreLoadVolatileId(&history_))) init__WithInt:endSizePairs_ - size_ withInt:endSizePairs_ - 1 withInt:endSizePairs_ - size_ + pos - [self leftWindow]];
  EduStanfordNlpTaggerMaxentTestSentence_setHistoryWithInt_withEduStanfordNlpTaggerMaxentHistory_withIntArray_(self, pos, JreLoadVolatileId(&history_), tags);
  return EduStanfordNlpTaggerMaxentTestSentence_getScoresWithEduStanfordNlpTaggerMaxentHistory_(self, JreLoadVolatileId(&history_));
}

- (IOSObjectArray *)stringTagsAtWithInt:(jint)pos {
  if ((pos < [self leftWindow]) || (pos >= size_ + [self leftWindow])) {
    return EduStanfordNlpTaggerMaxentTestSentence_naTagArr;
  }
  IOSObjectArray *arr1;
  if (originalTags_ != nil && [originalTags_ getWithInt:pos - [self leftWindow]] != nil) {
    arr1 = [IOSObjectArray newArrayWithLength:1 type:NSString_class_()];
    (void) IOSObjectArray_Set(arr1, 0, [originalTags_ getWithInt:pos - [self leftWindow]]);
    return arr1;
  }
  NSString *word = [((id<JavaUtilList>) nil_chk(sent_)) getWithInt:pos - [self leftWindow]];
  if ([((EduStanfordNlpTaggerMaxentDictionary *) nil_chk(((EduStanfordNlpTaggerMaxentMaxentTagger *) nil_chk(maxentTagger_))->dict_)) isUnknownWithNSString:word]) {
    id<JavaUtilSet> open = [((EduStanfordNlpTaggerMaxentTTags *) nil_chk(maxentTagger_->tags_)) getOpenTags];
    arr1 = [((id<JavaUtilSet>) nil_chk(open)) toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:[open size] type:NSString_class_()]];
  }
  else {
    arr1 = [maxentTagger_->dict_ getTagsWithNSString:word];
  }
  arr1 = [((EduStanfordNlpTaggerMaxentTTags *) nil_chk(maxentTagger_->tags_)) deterministicallyExpandTagsWithNSStringArray:arr1];
  return arr1;
}

- (void)__javaClone:(EduStanfordNlpTaggerMaxentTestSentence *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&history_, &original->history_);
  JreCloneVolatileStrong(&localScores_, &original->localScores_);
  JreCloneVolatileStrong(&localContextScores_, &original->localContextScores_);
}

- (void)dealloc {
  JreReleaseVolatile(&history_);
  JreReleaseVolatile(&localScores_);
  JreReleaseVolatile(&localContextScores_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, 3, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x4, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 9, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x0, -1, -1, -1, 10, -1, -1 },
    { NULL, "LNSString;", 0x8, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 17, 18, -1, 19, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x2, -1, -1, -1, 10, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 20, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "[D", 0x2, 22, 23, -1, -1, -1, -1 },
    { NULL, "[D", 0x2, 24, 23, -1, -1, -1, -1 },
    { NULL, "[D", 0x2, 25, 23, -1, -1, -1, -1 },
    { NULL, "[D", 0x4, 26, 27, -1, -1, -1, -1 },
    { NULL, "[D", 0x2, 26, 28, -1, 29, -1, -1 },
    { NULL, "[D", 0x2, 30, 31, -1, 32, -1, -1 },
    { NULL, "[D", 0x2, 33, 28, -1, 29, -1, -1 },
    { NULL, "V", 0x0, 34, 35, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 36, 37, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 38, 39, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[I", 0x1, 40, 8, -1, -1, -1, -1 },
    { NULL, "D", 0x1, 41, 42, -1, -1, -1, -1 },
    { NULL, "D", 0x1, 41, 43, -1, -1, -1, -1 },
    { NULL, "[D", 0x1, 44, 42, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x4, 45, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpTaggerMaxentMaxentTagger:);
  methods[1].selector = @selector(setCorrectTagsWithJavaUtilList:);
  methods[2].selector = @selector(tagSentenceWithJavaUtilList:withBoolean:);
  methods[3].selector = @selector(revertWithInt:);
  methods[4].selector = @selector(init__);
  methods[5].selector = @selector(getTaggedNice);
  methods[6].selector = @selector(getTaggedSentence);
  methods[7].selector = @selector(toNiceWithNSString:);
  methods[8].selector = @selector(calculateProbsWithDoubleArray3:);
  methods[9].selector = @selector(writeTagsAndErrorsWithNSStringArray:withEduStanfordNlpIoPrintFile:withBoolean:);
  methods[10].selector = @selector(updateConfusionMatrixWithNSStringArray:withEduStanfordNlpUtilConfusionMatrix:);
  methods[11].selector = @selector(testTagInference);
  methods[12].selector = @selector(runTagInference);
  methods[13].selector = @selector(setHistoryWithInt:withEduStanfordNlpTaggerMaxentHistory:withIntArray:);
  methods[14].selector = @selector(initializeScorer);
  methods[15].selector = @selector(cleanUpScorer);
  methods[16].selector = @selector(getScoresWithEduStanfordNlpTaggerMaxentHistory:);
  methods[17].selector = @selector(getExactScoresWithEduStanfordNlpTaggerMaxentHistory:);
  methods[18].selector = @selector(getApproximateScoresWithEduStanfordNlpTaggerMaxentHistory:);
  methods[19].selector = @selector(getHistoriesWithNSStringArray:withEduStanfordNlpTaggerMaxentHistory:);
  methods[20].selector = @selector(getHistoriesWithNSStringArray:withEduStanfordNlpTaggerMaxentHistory:withJavaUtilList:withJavaUtilList:);
  methods[21].selector = @selector(getExactHistoriesWithEduStanfordNlpTaggerMaxentHistory:withJavaUtilList:withJavaUtilList:);
  methods[22].selector = @selector(getApproximateHistoriesWithNSStringArray:withEduStanfordNlpTaggerMaxentHistory:withJavaUtilList:withJavaUtilList:);
  methods[23].selector = @selector(printUnknownWithInt:withEduStanfordNlpIoPrintFile:);
  methods[24].selector = @selector(printTopWithEduStanfordNlpIoPrintFile:);
  methods[25].selector = @selector(getTop3WithDoubleArray3:withInt:withDoubleArray:withNSStringArray:);
  methods[26].selector = @selector(length);
  methods[27].selector = @selector(leftWindow);
  methods[28].selector = @selector(rightWindow);
  methods[29].selector = @selector(getPossibleValuesWithInt:);
  methods[30].selector = @selector(scoreOfWithIntArray:withInt:);
  methods[31].selector = @selector(scoreOfWithIntArray:);
  methods[32].selector = @selector(scoresOfWithIntArray:withInt:);
  methods[33].selector = @selector(stringTagsAtWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "VERBOSE_", "Z", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "naTag", "LNSString;", .constantValue.asLong = 0, 0x1c, -1, 46, -1, -1 },
    { "naTagArr", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 47, -1, -1 },
    { "DBG", "Z", .constantValue.asBOOL = EduStanfordNlpTaggerMaxentTestSentence_DBG, 0x1c, -1, -1, -1, -1 },
    { "kBestSize", "I", .constantValue.asInt = EduStanfordNlpTaggerMaxentTestSentence_kBestSize, 0x1c, -1, -1, -1, -1 },
    { "tagSeparator_", "LNSString;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "encoding_", "LNSString;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "pairs_", "LEduStanfordNlpTaggerMaxentPairsHolder;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "sent_", "LJavaUtilList;", .constantValue.asLong = 0, 0x4, -1, -1, 48, -1 },
    { "originalTags_", "LJavaUtilList;", .constantValue.asLong = 0, 0x4, -1, -1, 48, -1 },
    { "origWords_", "LJavaUtilList;", .constantValue.asLong = 0, 0x4, -1, -1, 49, -1 },
    { "size_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "correctTags_", "[LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "finalTags_", "[LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "result_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x0, -1, -1, 50, -1 },
    { "numRight_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "numWrong_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "numUnknown_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "numWrongUnknown_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "endSizePairs_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "history_", "LEduStanfordNlpTaggerMaxentHistory;", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "localScores_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x44, -1, -1, 51, -1 },
    { "localContextScores_", "[[D", .constantValue.asLong = 0, 0x44, -1, -1, -1, -1 },
    { "maxentTagger_", "LEduStanfordNlpTaggerMaxentMaxentTagger;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpTaggerMaxentMaxentTagger;", "setCorrectTags", "LJavaUtilList;", "(Ljava/util/List<+Ledu/stanford/nlp/ling/HasTag;>;)V", "tagSentence", "LJavaUtilList;Z", "(Ljava/util/List<+Ledu/stanford/nlp/ling/HasWord;>;Z)Ljava/util/ArrayList<Ledu/stanford/nlp/ling/TaggedWord;>;", "revert", "I", "init", "()Ljava/util/ArrayList<Ledu/stanford/nlp/ling/TaggedWord;>;", "toNice", "LNSString;", "calculateProbs", "[[[D", "writeTagsAndErrors", "[LNSString;LEduStanfordNlpIoPrintFile;Z", "updateConfusionMatrix", "[LNSString;LEduStanfordNlpUtilConfusionMatrix;", "([Ljava/lang/String;Ledu/stanford/nlp/util/ConfusionMatrix<Ljava/lang/String;>;)V", "setHistory", "ILEduStanfordNlpTaggerMaxentHistory;[I", "getScores", "LEduStanfordNlpTaggerMaxentHistory;", "getExactScores", "getApproximateScores", "getHistories", "[LNSString;LEduStanfordNlpTaggerMaxentHistory;", "[LNSString;LEduStanfordNlpTaggerMaxentHistory;LJavaUtilList;LJavaUtilList;", "([Ljava/lang/String;Ledu/stanford/nlp/tagger/maxent/History;Ljava/util/List<Ledu/stanford/nlp/util/Pair<Ljava/lang/Integer;Ledu/stanford/nlp/tagger/maxent/Extractor;>;>;Ljava/util/List<Ledu/stanford/nlp/util/Pair<Ljava/lang/Integer;Ledu/stanford/nlp/tagger/maxent/Extractor;>;>;)[D", "getExactHistories", "LEduStanfordNlpTaggerMaxentHistory;LJavaUtilList;LJavaUtilList;", "(Ledu/stanford/nlp/tagger/maxent/History;Ljava/util/List<Ledu/stanford/nlp/util/Pair<Ljava/lang/Integer;Ledu/stanford/nlp/tagger/maxent/Extractor;>;>;Ljava/util/List<Ledu/stanford/nlp/util/Pair<Ljava/lang/Integer;Ledu/stanford/nlp/tagger/maxent/Extractor;>;>;)[D", "getApproximateHistories", "printUnknown", "ILEduStanfordNlpIoPrintFile;", "printTop", "LEduStanfordNlpIoPrintFile;", "getTop3", "[[[DI[D[LNSString;", "getPossibleValues", "scoreOf", "[II", "[I", "scoresOf", "stringTagsAt", &EduStanfordNlpTaggerMaxentTestSentence_naTag, &EduStanfordNlpTaggerMaxentTestSentence_naTagArr, "Ljava/util/List<Ljava/lang/String;>;", "Ljava/util/List<Ledu/stanford/nlp/ling/HasWord;>;", "Ljava/util/ArrayList<Ledu/stanford/nlp/ling/TaggedWord;>;", "Ljava/util/Map<Ljava/lang/String;[LD;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpTaggerMaxentTestSentence = { "TestSentence", "edu.stanford.nlp.tagger.maxent", ptrTable, methods, fields, 7, 0x1, 34, 24, -1, -1, -1, -1, -1 };
  return &_EduStanfordNlpTaggerMaxentTestSentence;
}

+ (void)initialize {
  if (self == [EduStanfordNlpTaggerMaxentTestSentence class]) {
    EduStanfordNlpTaggerMaxentTestSentence_naTagArr = [IOSObjectArray newArrayWithObjects:(id[]){ EduStanfordNlpTaggerMaxentTestSentence_naTag } count:1 type:NSString_class_()];
    J2OBJC_SET_INITIALIZED(EduStanfordNlpTaggerMaxentTestSentence)
  }
}

@end

void EduStanfordNlpTaggerMaxentTestSentence_initWithEduStanfordNlpTaggerMaxentMaxentTagger_(EduStanfordNlpTaggerMaxentTestSentence *self, EduStanfordNlpTaggerMaxentMaxentTagger *maxentTagger) {
  NSObject_init(self);
  self->pairs_ = new_EduStanfordNlpTaggerMaxentPairsHolder_init();
  (void) JreVolatileStrongAssign(&self->localScores_, EduStanfordNlpUtilGenerics_newHashMap());
  JreAssert(((maxentTagger != nil)), (@"edu/stanford/nlp/tagger/maxent/TestSentence.java:73 condition failed: assert(maxentTagger != null);"));
  JreAssert((([((EduStanfordNlpTaggerMaxentMaxentTagger *) nil_chk(maxentTagger)) getLambdaSolve] != nil)), (@"edu/stanford/nlp/tagger/maxent/TestSentence.java:74 condition failed: assert(maxentTagger.getLambdaSolve() != null);"));
  self->maxentTagger_ = maxentTagger;
  if (maxentTagger->config_ != nil) {
    self->tagSeparator_ = [maxentTagger->config_ getTagSeparator];
    self->encoding_ = [((EduStanfordNlpTaggerMaxentTaggerConfig *) nil_chk(maxentTagger->config_)) getEncoding];
    self->VERBOSE_ = [((EduStanfordNlpTaggerMaxentTaggerConfig *) nil_chk(maxentTagger->config_)) getVerbose];
  }
  else {
    self->tagSeparator_ = EduStanfordNlpTaggerMaxentTaggerConfig_getDefaultTagSeparator();
    self->encoding_ = @"utf-8";
    self->VERBOSE_ = false;
  }
  (void) JreVolatileStrongAssignAndConsume(&self->history_, new_EduStanfordNlpTaggerMaxentHistory_initWithEduStanfordNlpTaggerMaxentPairsHolder_withEduStanfordNlpTaggerMaxentExtractors_(self->pairs_, maxentTagger->extractors_));
}

EduStanfordNlpTaggerMaxentTestSentence *new_EduStanfordNlpTaggerMaxentTestSentence_initWithEduStanfordNlpTaggerMaxentMaxentTagger_(EduStanfordNlpTaggerMaxentMaxentTagger *maxentTagger) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTaggerMaxentTestSentence, initWithEduStanfordNlpTaggerMaxentMaxentTagger_, maxentTagger)
}

EduStanfordNlpTaggerMaxentTestSentence *create_EduStanfordNlpTaggerMaxentTestSentence_initWithEduStanfordNlpTaggerMaxentMaxentTagger_(EduStanfordNlpTaggerMaxentMaxentTagger *maxentTagger) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTaggerMaxentTestSentence, initWithEduStanfordNlpTaggerMaxentMaxentTagger_, maxentTagger)
}

NSString *EduStanfordNlpTaggerMaxentTestSentence_toNiceWithNSString_(NSString *s) {
  EduStanfordNlpTaggerMaxentTestSentence_initialize();
  if (s == nil) {
    return EduStanfordNlpTaggerMaxentTestSentence_naTag;
  }
  else {
    return s;
  }
}

JavaUtilArrayList *EduStanfordNlpTaggerMaxentTestSentence_testTagInference(EduStanfordNlpTaggerMaxentTestSentence *self) {
  EduStanfordNlpTaggerMaxentTestSentence_runTagInference(self);
  return [self getTaggedSentence];
}

void EduStanfordNlpTaggerMaxentTestSentence_runTagInference(EduStanfordNlpTaggerMaxentTestSentence *self) {
  [self initializeScorer];
  if (JavaLangThread_interrupted()) {
    @throw new_EduStanfordNlpUtilRuntimeInterruptedException_init();
  }
  id<EduStanfordNlpSequencesBestSequenceFinder> ti = new_EduStanfordNlpSequencesExactBestSequenceFinder_init();
  IOSIntArray *bestTags = [ti bestSequenceWithEduStanfordNlpSequencesSequenceModel:self];
  self->finalTags_ = [IOSObjectArray newArrayWithLength:((IOSIntArray *) nil_chk(bestTags))->size_ type:NSString_class_()];
  for (jint j = 0; j < self->size_; j++) {
    (void) IOSObjectArray_Set(nil_chk(self->finalTags_), j, [((EduStanfordNlpTaggerMaxentTTags *) nil_chk(((EduStanfordNlpTaggerMaxentMaxentTagger *) nil_chk(self->maxentTagger_))->tags_)) getTagWithInt:IOSIntArray_Get(bestTags, j + [self leftWindow])]);
  }
  if (JavaLangThread_interrupted()) {
    @throw new_EduStanfordNlpUtilRuntimeInterruptedException_init();
  }
  [self cleanUpScorer];
}

void EduStanfordNlpTaggerMaxentTestSentence_setHistoryWithInt_withEduStanfordNlpTaggerMaxentHistory_withIntArray_(EduStanfordNlpTaggerMaxentTestSentence *self, jint current, EduStanfordNlpTaggerMaxentHistory *h, IOSIntArray *tags) {
  jint left = [self leftWindow];
  jint right = [self rightWindow];
  for (jint j = current - left; j <= current + right; j++) {
    if (j < left) {
      continue;
    }
    if (j >= self->size_ + left) {
      break;
    }
    [((EduStanfordNlpTaggerMaxentHistory *) nil_chk(h)) setTagWithInt:j - left withNSString:[((EduStanfordNlpTaggerMaxentTTags *) nil_chk(((EduStanfordNlpTaggerMaxentMaxentTagger *) nil_chk(self->maxentTagger_))->tags_)) getTagWithInt:IOSIntArray_Get(nil_chk(tags), j)]];
  }
}

IOSDoubleArray *EduStanfordNlpTaggerMaxentTestSentence_getScoresWithEduStanfordNlpTaggerMaxentHistory_(EduStanfordNlpTaggerMaxentTestSentence *self, EduStanfordNlpTaggerMaxentHistory *h) {
  if ([((EduStanfordNlpTaggerMaxentMaxentTagger *) nil_chk(self->maxentTagger_)) hasApproximateScoring]) {
    return EduStanfordNlpTaggerMaxentTestSentence_getApproximateScoresWithEduStanfordNlpTaggerMaxentHistory_(self, h);
  }
  return EduStanfordNlpTaggerMaxentTestSentence_getExactScoresWithEduStanfordNlpTaggerMaxentHistory_(self, h);
}

IOSDoubleArray *EduStanfordNlpTaggerMaxentTestSentence_getExactScoresWithEduStanfordNlpTaggerMaxentHistory_(EduStanfordNlpTaggerMaxentTestSentence *self, EduStanfordNlpTaggerMaxentHistory *h) {
  IOSObjectArray *tags = [self stringTagsAtWithInt:((EduStanfordNlpTaggerMaxentHistory *) nil_chk(h))->current_ - h->start_ + [self leftWindow]];
  IOSDoubleArray *histories = [self getHistoriesWithNSStringArray:tags withEduStanfordNlpTaggerMaxentHistory:h];
  EduStanfordNlpMathArrayMath_logNormalizeWithDoubleArray_(histories);
  IOSDoubleArray *scores = [IOSDoubleArray newArrayWithLength:((IOSObjectArray *) nil_chk(tags))->size_];
  for (jint j = 0; j < tags->size_; j++) {
    NSString *tag = IOSObjectArray_Get(tags, j);
    jint tagindex = [((EduStanfordNlpTaggerMaxentTTags *) nil_chk(((EduStanfordNlpTaggerMaxentMaxentTagger *) nil_chk(self->maxentTagger_))->tags_)) getIndexWithNSString:tag];
    *IOSDoubleArray_GetRef(scores, j) = IOSDoubleArray_Get(nil_chk(histories), tagindex);
  }
  return scores;
}

IOSDoubleArray *EduStanfordNlpTaggerMaxentTestSentence_getApproximateScoresWithEduStanfordNlpTaggerMaxentHistory_(EduStanfordNlpTaggerMaxentTestSentence *self, EduStanfordNlpTaggerMaxentHistory *h) {
  IOSObjectArray *tags = [self stringTagsAtWithInt:((EduStanfordNlpTaggerMaxentHistory *) nil_chk(h))->current_ - h->start_ + [self leftWindow]];
  IOSDoubleArray *scores = [self getHistoriesWithNSStringArray:tags withEduStanfordNlpTaggerMaxentHistory:h];
  jint nDefault = ((EduStanfordNlpTaggerMaxentMaxentTagger *) nil_chk(self->maxentTagger_))->ySize_ - ((IOSObjectArray *) nil_chk(tags))->size_;
  jdouble logScore = EduStanfordNlpMathArrayMath_logSumWithDoubleArray_(scores);
  jdouble logScoreInactiveTags = [self->maxentTagger_ getInactiveTagDefaultScoreWithInt:nDefault];
  jdouble logTotal = EduStanfordNlpMathSloppyMath_logAddWithDouble_withDouble_(logScore, logScoreInactiveTags);
  EduStanfordNlpMathArrayMath_addInPlaceWithDoubleArray_withDouble_(scores, -logTotal);
  return scores;
}

IOSDoubleArray *EduStanfordNlpTaggerMaxentTestSentence_getHistoriesWithNSStringArray_withEduStanfordNlpTaggerMaxentHistory_withJavaUtilList_withJavaUtilList_(EduStanfordNlpTaggerMaxentTestSentence *self, IOSObjectArray *tags, EduStanfordNlpTaggerMaxentHistory *h, id<JavaUtilList> extractors, id<JavaUtilList> extractorsRare) {
  if ([((EduStanfordNlpTaggerMaxentMaxentTagger *) nil_chk(self->maxentTagger_)) hasApproximateScoring]) return EduStanfordNlpTaggerMaxentTestSentence_getApproximateHistoriesWithNSStringArray_withEduStanfordNlpTaggerMaxentHistory_withJavaUtilList_withJavaUtilList_(self, tags, h, extractors, extractorsRare);
  return EduStanfordNlpTaggerMaxentTestSentence_getExactHistoriesWithEduStanfordNlpTaggerMaxentHistory_withJavaUtilList_withJavaUtilList_(self, h, extractors, extractorsRare);
}

IOSDoubleArray *EduStanfordNlpTaggerMaxentTestSentence_getExactHistoriesWithEduStanfordNlpTaggerMaxentHistory_withJavaUtilList_withJavaUtilList_(EduStanfordNlpTaggerMaxentTestSentence *self, EduStanfordNlpTaggerMaxentHistory *h, id<JavaUtilList> extractors, id<JavaUtilList> extractorsRare) {
  IOSDoubleArray *scores = [IOSDoubleArray newArrayWithLength:((EduStanfordNlpTaggerMaxentMaxentTagger *) nil_chk(self->maxentTagger_))->ySize_];
  jint szCommon = [((EduStanfordNlpTaggerMaxentExtractors *) nil_chk(self->maxentTagger_->extractors_)) size];
  for (EduStanfordNlpUtilPair * __strong e in nil_chk(extractors)) {
    jint kf = [((JavaLangInteger *) nil_chk([((EduStanfordNlpUtilPair *) nil_chk(e)) first])) intValue];
    EduStanfordNlpTaggerMaxentExtractor *ex = [e second];
    NSString *val = [((EduStanfordNlpTaggerMaxentExtractor *) nil_chk(ex)) extractWithEduStanfordNlpTaggerMaxentHistory:h];
    IOSIntArray *fAssociations = [((id<JavaUtilMap>) nil_chk([((id<JavaUtilList>) nil_chk(self->maxentTagger_->fAssociations_)) getWithInt:kf])) getWithId:val];
    if (fAssociations != nil) {
      for (jint i = 0; i < self->maxentTagger_->ySize_; i++) {
        jint fNum = IOSIntArray_Get(fAssociations, i);
        if (fNum > -1) {
          JrePlusAssignDoubleD(IOSDoubleArray_GetRef(scores, i), IOSDoubleArray_Get(nil_chk(((EduStanfordNlpMaxentIisLambdaSolve *) nil_chk([self->maxentTagger_ getLambdaSolve]))->lambda_), fNum));
        }
      }
    }
  }
  if (extractorsRare != nil) {
    for (EduStanfordNlpUtilPair * __strong e in extractorsRare) {
      jint kf = [((JavaLangInteger *) nil_chk([((EduStanfordNlpUtilPair *) nil_chk(e)) first])) intValue];
      EduStanfordNlpTaggerMaxentExtractor *ex = [e second];
      NSString *val = [((EduStanfordNlpTaggerMaxentExtractor *) nil_chk(ex)) extractWithEduStanfordNlpTaggerMaxentHistory:h];
      IOSIntArray *fAssociations = [((id<JavaUtilMap>) nil_chk([((id<JavaUtilList>) nil_chk(self->maxentTagger_->fAssociations_)) getWithInt:kf + szCommon])) getWithId:val];
      if (fAssociations != nil) {
        for (jint i = 0; i < self->maxentTagger_->ySize_; i++) {
          jint fNum = IOSIntArray_Get(fAssociations, i);
          if (fNum > -1) {
            JrePlusAssignDoubleD(IOSDoubleArray_GetRef(scores, i), IOSDoubleArray_Get(nil_chk(((EduStanfordNlpMaxentIisLambdaSolve *) nil_chk([self->maxentTagger_ getLambdaSolve]))->lambda_), fNum));
          }
        }
      }
    }
  }
  return scores;
}

IOSDoubleArray *EduStanfordNlpTaggerMaxentTestSentence_getApproximateHistoriesWithNSStringArray_withEduStanfordNlpTaggerMaxentHistory_withJavaUtilList_withJavaUtilList_(EduStanfordNlpTaggerMaxentTestSentence *self, IOSObjectArray *tags, EduStanfordNlpTaggerMaxentHistory *h, id<JavaUtilList> extractors, id<JavaUtilList> extractorsRare) {
  IOSDoubleArray *scores = [IOSDoubleArray newArrayWithLength:((IOSObjectArray *) nil_chk(tags))->size_];
  jint szCommon = [((EduStanfordNlpTaggerMaxentExtractors *) nil_chk(((EduStanfordNlpTaggerMaxentMaxentTagger *) nil_chk(self->maxentTagger_))->extractors_)) size];
  for (EduStanfordNlpUtilPair * __strong e in nil_chk(extractors)) {
    jint kf = [((JavaLangInteger *) nil_chk([((EduStanfordNlpUtilPair *) nil_chk(e)) first])) intValue];
    EduStanfordNlpTaggerMaxentExtractor *ex = [e second];
    NSString *val = [((EduStanfordNlpTaggerMaxentExtractor *) nil_chk(ex)) extractWithEduStanfordNlpTaggerMaxentHistory:h];
    IOSIntArray *fAssociations = [((id<JavaUtilMap>) nil_chk([((id<JavaUtilList>) nil_chk(self->maxentTagger_->fAssociations_)) getWithInt:kf])) getWithId:val];
    if (fAssociations != nil) {
      for (jint j = 0; j < tags->size_; j++) {
        NSString *tag = IOSObjectArray_Get(tags, j);
        jint tagIndex = [((EduStanfordNlpTaggerMaxentTTags *) nil_chk(self->maxentTagger_->tags_)) getIndexWithNSString:tag];
        jint fNum = IOSIntArray_Get(fAssociations, tagIndex);
        if (fNum > -1) {
          JrePlusAssignDoubleD(IOSDoubleArray_GetRef(scores, j), IOSDoubleArray_Get(nil_chk(((EduStanfordNlpMaxentIisLambdaSolve *) nil_chk([self->maxentTagger_ getLambdaSolve]))->lambda_), fNum));
        }
      }
    }
  }
  if (extractorsRare != nil) {
    for (EduStanfordNlpUtilPair * __strong e in extractorsRare) {
      jint kf = [((JavaLangInteger *) nil_chk([((EduStanfordNlpUtilPair *) nil_chk(e)) first])) intValue];
      EduStanfordNlpTaggerMaxentExtractor *ex = [e second];
      NSString *val = [((EduStanfordNlpTaggerMaxentExtractor *) nil_chk(ex)) extractWithEduStanfordNlpTaggerMaxentHistory:h];
      IOSIntArray *fAssociations = [((id<JavaUtilMap>) nil_chk([((id<JavaUtilList>) nil_chk(self->maxentTagger_->fAssociations_)) getWithInt:szCommon + kf])) getWithId:val];
      if (fAssociations != nil) {
        for (jint j = 0; j < tags->size_; j++) {
          NSString *tag = IOSObjectArray_Get(tags, j);
          jint tagIndex = [((EduStanfordNlpTaggerMaxentTTags *) nil_chk(self->maxentTagger_->tags_)) getIndexWithNSString:tag];
          jint fNum = IOSIntArray_Get(fAssociations, tagIndex);
          if (fNum > -1) {
            JrePlusAssignDoubleD(IOSDoubleArray_GetRef(scores, j), IOSDoubleArray_Get(nil_chk(((EduStanfordNlpMaxentIisLambdaSolve *) nil_chk([self->maxentTagger_ getLambdaSolve]))->lambda_), fNum));
          }
        }
      }
    }
  }
  return scores;
}

void EduStanfordNlpTaggerMaxentTestSentence_getTop3WithDoubleArray3_withInt_withDoubleArray_withNSStringArray_(EduStanfordNlpTaggerMaxentTestSentence *self, IOSObjectArray *probabilities, jint current, IOSDoubleArray *probs, IOSObjectArray *tags) {
  IOSIntArray *topIds = [IOSIntArray newArrayWithLength:3];
  IOSDoubleArray *probTags = IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(probabilities), current)), 0);
  JavaUtilArrays_fillWithDoubleArray_withDouble_(probs, JavaLangDouble_NEGATIVE_INFINITY);
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(probTags))->size_; i++) {
    if (IOSDoubleArray_Get(probTags, i) > IOSDoubleArray_Get(nil_chk(probs), 0)) {
      *IOSDoubleArray_GetRef(probs, 2) = IOSDoubleArray_Get(probs, 1);
      *IOSDoubleArray_GetRef(probs, 1) = IOSDoubleArray_Get(probs, 0);
      *IOSDoubleArray_GetRef(probs, 0) = IOSDoubleArray_Get(probTags, i);
      *IOSIntArray_GetRef(topIds, 2) = IOSIntArray_Get(topIds, 1);
      *IOSIntArray_GetRef(topIds, 1) = IOSIntArray_Get(topIds, 0);
      *IOSIntArray_GetRef(topIds, 0) = i;
    }
    else if (IOSDoubleArray_Get(probTags, i) > IOSDoubleArray_Get(probs, 1)) {
      *IOSDoubleArray_GetRef(probs, 2) = IOSDoubleArray_Get(probs, 1);
      *IOSDoubleArray_GetRef(probs, 1) = IOSDoubleArray_Get(probTags, i);
      *IOSIntArray_GetRef(topIds, 2) = IOSIntArray_Get(topIds, 1);
      *IOSIntArray_GetRef(topIds, 1) = i;
    }
    else if (IOSDoubleArray_Get(probTags, i) > IOSDoubleArray_Get(probs, 2)) {
      *IOSDoubleArray_GetRef(probs, 2) = IOSDoubleArray_Get(probTags, i);
      *IOSIntArray_GetRef(topIds, 2) = i;
    }
  }
  for (jint j = 0; j < 3; j++) {
    (void) IOSObjectArray_Set(nil_chk(tags), j, EduStanfordNlpTaggerMaxentTestSentence_toNiceWithNSString_([((EduStanfordNlpTaggerMaxentTTags *) nil_chk(((EduStanfordNlpTaggerMaxentMaxentTagger *) nil_chk(self->maxentTagger_))->tags_)) getTagWithInt:IOSIntArray_Get(topIds, j)]));
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTaggerMaxentTestSentence)
