//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/tagger/maxent/CountWrapper.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/tagger/maxent/CountWrapper.h"
#include "java/io/DataInputStream.h"
#include "java/io/DataOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/PrintStream.h"
#include "java/lang/Exception.h"
#include "java/lang/System.h"

@interface EduStanfordNlpTaggerMaxentCountWrapper () {
 @public
  NSString *word_;
  jint countPart_;
  jint countThat_;
  jint countIn_;
  jint countRB_;
}

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpTaggerMaxentCountWrapper, word_, NSString *)

@implementation EduStanfordNlpTaggerMaxentCountWrapper

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpTaggerMaxentCountWrapper_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithNSString:(NSString *)word
                         withInt:(jint)countPart
                         withInt:(jint)countThat
                         withInt:(jint)countIn
                         withInt:(jint)countRB {
  EduStanfordNlpTaggerMaxentCountWrapper_initWithNSString_withInt_withInt_withInt_withInt_(self, word, countPart, countThat, countIn, countRB);
  return self;
}

- (void)incThat {
  self->countThat_++;
}

- (jint)getCountPart {
  return countPart_;
}

- (jint)getCountThat {
  return countThat_;
}

- (jint)getCountIn {
  return countIn_;
}

- (jint)getCountRB {
  return countRB_;
}

- (NSString *)getWord {
  return word_;
}

- (NSUInteger)hash {
  return ((jint) [((NSString *) nil_chk(word_)) hash]);
}

- (jboolean)isEqual:(id)obj {
  if (self == obj) {
    return true;
  }
  if (!([obj isKindOfClass:[EduStanfordNlpTaggerMaxentCountWrapper class]])) {
    return false;
  }
  EduStanfordNlpTaggerMaxentCountWrapper *cw = (EduStanfordNlpTaggerMaxentCountWrapper *) cast_chk(obj, [EduStanfordNlpTaggerMaxentCountWrapper class]);
  return [((NSString *) nil_chk(word_)) isEqual:((EduStanfordNlpTaggerMaxentCountWrapper *) nil_chk(cw))->word_];
}

- (void)saveWithJavaIoDataOutputStream:(JavaIoDataOutputStream *)rf {
  @try {
    [((JavaIoDataOutputStream *) nil_chk(rf)) writeIntWithInt:((jint) [((NSString *) nil_chk(word_)) length])];
    [rf writeWithByteArray:[((NSString *) nil_chk(word_)) getBytes]];
    [rf writeIntWithInt:countPart_];
    [rf writeIntWithInt:countThat_];
    [rf writeIntWithInt:countIn_];
    [rf writeIntWithInt:countRB_];
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
  }
}

- (void)readWithJavaIoDataInputStream:(JavaIoDataInputStream *)rf {
  @try {
    jint len = [((JavaIoDataInputStream *) nil_chk(rf)) readInt];
    IOSByteArray *buff = [IOSByteArray newArrayWithLength:len];
    if ([rf readWithByteArray:buff] != len) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"Error: rewrite CountWrapper.read"];
    }
    word_ = [NSString stringWithBytes:buff];
    JreAssert(((word_ != nil)), (@"edu/stanford/nlp/tagger/maxent/CountWrapper.java:112 condition failed: assert(word != null);"));
    countPart_ = [rf readInt];
    countThat_ = [rf readInt];
    countIn_ = [rf readInt];
    countRB_ = [rf readInt];
  }
  @catch (JavaIoIOException *e) {
    [((JavaIoIOException *) nil_chk(e)) printStackTrace];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 6, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithNSString:withInt:withInt:withInt:withInt:);
  methods[2].selector = @selector(incThat);
  methods[3].selector = @selector(getCountPart);
  methods[4].selector = @selector(getCountThat);
  methods[5].selector = @selector(getCountIn);
  methods[6].selector = @selector(getCountRB);
  methods[7].selector = @selector(getWord);
  methods[8].selector = @selector(hash);
  methods[9].selector = @selector(isEqual:);
  methods[10].selector = @selector(saveWithJavaIoDataOutputStream:);
  methods[11].selector = @selector(readWithJavaIoDataInputStream:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "word_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "countPart_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "countThat_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "countIn_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "countRB_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;IIII", "hashCode", "equals", "LNSObject;", "save", "LJavaIoDataOutputStream;", "read", "LJavaIoDataInputStream;" };
  static const J2ObjcClassInfo _EduStanfordNlpTaggerMaxentCountWrapper = { "CountWrapper", "edu.stanford.nlp.tagger.maxent", ptrTable, methods, fields, 7, 0x1, 12, 5, -1, -1, -1, -1, -1 };
  return &_EduStanfordNlpTaggerMaxentCountWrapper;
}

@end

void EduStanfordNlpTaggerMaxentCountWrapper_init(EduStanfordNlpTaggerMaxentCountWrapper *self) {
  NSObject_init(self);
}

EduStanfordNlpTaggerMaxentCountWrapper *new_EduStanfordNlpTaggerMaxentCountWrapper_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpTaggerMaxentCountWrapper, init)
}

EduStanfordNlpTaggerMaxentCountWrapper *create_EduStanfordNlpTaggerMaxentCountWrapper_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTaggerMaxentCountWrapper, init)
}

void EduStanfordNlpTaggerMaxentCountWrapper_initWithNSString_withInt_withInt_withInt_withInt_(EduStanfordNlpTaggerMaxentCountWrapper *self, NSString *word, jint countPart, jint countThat, jint countIn, jint countRB) {
  NSObject_init(self);
  JreAssert(((word != nil)), (@"edu/stanford/nlp/tagger/maxent/CountWrapper.java:34 condition failed: assert(word != null);"));
  self->word_ = word;
  self->countPart_ = countPart;
  self->countThat_ = countThat;
  self->countIn_ = countIn;
  self->countRB_ = countRB;
}

EduStanfordNlpTaggerMaxentCountWrapper *new_EduStanfordNlpTaggerMaxentCountWrapper_initWithNSString_withInt_withInt_withInt_withInt_(NSString *word, jint countPart, jint countThat, jint countIn, jint countRB) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTaggerMaxentCountWrapper, initWithNSString_withInt_withInt_withInt_withInt_, word, countPart, countThat, countIn, countRB)
}

EduStanfordNlpTaggerMaxentCountWrapper *create_EduStanfordNlpTaggerMaxentCountWrapper_initWithNSString_withInt_withInt_withInt_withInt_(NSString *word, jint countPart, jint countThat, jint countIn, jint countRB) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTaggerMaxentCountWrapper, initWithNSString_withInt_withInt_withInt_withInt_, word, countPart, countThat, countIn, countRB)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTaggerMaxentCountWrapper)
