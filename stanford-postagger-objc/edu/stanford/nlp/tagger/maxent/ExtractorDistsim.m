//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/tagger/maxent/ExtractorDistsim.java
//

#include "J2ObjC_source.h"
#include "edu/stanford/nlp/tagger/maxent/Distsim.h"
#include "edu/stanford/nlp/tagger/maxent/Extractor.h"
#include "edu/stanford/nlp/tagger/maxent/ExtractorDistsim.h"
#include "edu/stanford/nlp/tagger/maxent/History.h"
#include "edu/stanford/nlp/tagger/maxent/PairsHolder.h"

@interface EduStanfordNlpTaggerMaxentExtractorDistsim () {
 @public
  EduStanfordNlpTaggerMaxentDistsim *lexicon_;
}

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpTaggerMaxentExtractorDistsim, lexicon_, EduStanfordNlpTaggerMaxentDistsim *)

inline jlong EduStanfordNlpTaggerMaxentExtractorDistsim_get_serialVersionUID();
#define EduStanfordNlpTaggerMaxentExtractorDistsim_serialVersionUID 2LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpTaggerMaxentExtractorDistsim, serialVersionUID, jlong)

@implementation EduStanfordNlpTaggerMaxentExtractorDistsim

- (NSString *)extractWithEduStanfordNlpTaggerMaxentHistory:(EduStanfordNlpTaggerMaxentHistory *)h
                 withEduStanfordNlpTaggerMaxentPairsHolder:(EduStanfordNlpTaggerMaxentPairsHolder *)pH {
  NSString *word = [super extractWithEduStanfordNlpTaggerMaxentHistory:h withEduStanfordNlpTaggerMaxentPairsHolder:pH];
  return [((EduStanfordNlpTaggerMaxentDistsim *) nil_chk(lexicon_)) getMappingWithNSString:word];
}

- (instancetype)initWithNSString:(NSString *)distSimPath
                         withInt:(jint)position {
  EduStanfordNlpTaggerMaxentExtractorDistsim_initWithNSString_withInt_(self, distSimPath, position);
  return self;
}

- (jboolean)isLocal {
  return position_ == 0;
}

- (jboolean)isDynamic {
  return false;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x0, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(extractWithEduStanfordNlpTaggerMaxentHistory:withEduStanfordNlpTaggerMaxentPairsHolder:);
  methods[1].selector = @selector(initWithNSString:withInt:);
  methods[2].selector = @selector(isLocal);
  methods[3].selector = @selector(isDynamic);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpTaggerMaxentExtractorDistsim_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "lexicon_", "LEduStanfordNlpTaggerMaxentDistsim;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "extract", "LEduStanfordNlpTaggerMaxentHistory;LEduStanfordNlpTaggerMaxentPairsHolder;", "LNSString;I" };
  static const J2ObjcClassInfo _EduStanfordNlpTaggerMaxentExtractorDistsim = { "ExtractorDistsim", "edu.stanford.nlp.tagger.maxent", ptrTable, methods, fields, 7, 0x1, 4, 2, -1, -1, -1, -1, -1 };
  return &_EduStanfordNlpTaggerMaxentExtractorDistsim;
}

@end

void EduStanfordNlpTaggerMaxentExtractorDistsim_initWithNSString_withInt_(EduStanfordNlpTaggerMaxentExtractorDistsim *self, NSString *distSimPath, jint position) {
  EduStanfordNlpTaggerMaxentExtractor_initWithInt_withBoolean_(self, position, false);
  self->lexicon_ = EduStanfordNlpTaggerMaxentDistsim_initLexiconWithNSString_(distSimPath);
}

EduStanfordNlpTaggerMaxentExtractorDistsim *new_EduStanfordNlpTaggerMaxentExtractorDistsim_initWithNSString_withInt_(NSString *distSimPath, jint position) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTaggerMaxentExtractorDistsim, initWithNSString_withInt_, distSimPath, position)
}

EduStanfordNlpTaggerMaxentExtractorDistsim *create_EduStanfordNlpTaggerMaxentExtractorDistsim_initWithNSString_withInt_(NSString *distSimPath, jint position) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTaggerMaxentExtractorDistsim, initWithNSString_withInt_, distSimPath, position)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTaggerMaxentExtractorDistsim)
