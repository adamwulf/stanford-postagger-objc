//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/tagger/maxent/Distsim.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/objectbank/ObjectBank.h"
#include "edu/stanford/nlp/tagger/maxent/Distsim.h"
#include "edu/stanford/nlp/util/Generics.h"
#include "edu/stanford/nlp/util/Timing.h"
#include "java/io/File.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/Map.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"

@interface EduStanfordNlpTaggerMaxentDistsim () {
 @public
  id<JavaUtilMap> lexicon_;
  NSString *unk_;
  jboolean mapdigits_;
}

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpTaggerMaxentDistsim, lexicon_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(EduStanfordNlpTaggerMaxentDistsim, unk_, NSString *)

inline id<JavaUtilMap> EduStanfordNlpTaggerMaxentDistsim_get_lexiconMap();
static id<JavaUtilMap> EduStanfordNlpTaggerMaxentDistsim_lexiconMap;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpTaggerMaxentDistsim, lexiconMap, id<JavaUtilMap>)

inline JavaUtilRegexPattern *EduStanfordNlpTaggerMaxentDistsim_get_digits();
static JavaUtilRegexPattern *EduStanfordNlpTaggerMaxentDistsim_digits;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpTaggerMaxentDistsim, digits, JavaUtilRegexPattern *)

inline jlong EduStanfordNlpTaggerMaxentDistsim_get_serialVersionUID();
#define EduStanfordNlpTaggerMaxentDistsim_serialVersionUID 2LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpTaggerMaxentDistsim, serialVersionUID, jlong)

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpTaggerMaxentDistsim)

@implementation EduStanfordNlpTaggerMaxentDistsim

- (instancetype)initWithNSString:(NSString *)path {
  EduStanfordNlpTaggerMaxentDistsim_initWithNSString_(self, path);
  return self;
}

+ (EduStanfordNlpTaggerMaxentDistsim *)initLexiconWithNSString:(NSString *)path {
  return EduStanfordNlpTaggerMaxentDistsim_initLexiconWithNSString_(path);
}

- (NSString *)getMappingWithNSString:(NSString *)word {
  NSString *distSim = [((id<JavaUtilMap>) nil_chk(lexicon_)) getWithId:[((NSString *) nil_chk(word)) lowercaseString]];
  if (distSim == nil && mapdigits_) {
    JavaUtilRegexMatcher *matcher = [((JavaUtilRegexPattern *) nil_chk(EduStanfordNlpTaggerMaxentDistsim_digits)) matcherWithJavaLangCharSequence:word];
    if ([((JavaUtilRegexMatcher *) nil_chk(matcher)) find]) {
      distSim = [lexicon_ getWithId:[matcher replaceAllWithNSString:@"0"]];
    }
  }
  if (distSim == nil) {
    distSim = unk_;
  }
  return distSim;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTaggerMaxentDistsim;", 0x9, 1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 2, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(initLexiconWithNSString:);
  methods[2].selector = @selector(getMappingWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "lexiconMap", "LJavaUtilMap;", .constantValue.asLong = 0, 0x1a, -1, 3, 4, -1 },
    { "lexicon_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 5, -1 },
    { "unk_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mapdigits_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "digits", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 6, -1, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpTaggerMaxentDistsim_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "initLexicon", "getMapping", &EduStanfordNlpTaggerMaxentDistsim_lexiconMap, "Ljava/util/Map<Ljava/lang/String;Ledu/stanford/nlp/tagger/maxent/Distsim;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", &EduStanfordNlpTaggerMaxentDistsim_digits };
  static const J2ObjcClassInfo _EduStanfordNlpTaggerMaxentDistsim = { "Distsim", "edu.stanford.nlp.tagger.maxent", ptrTable, methods, fields, 7, 0x1, 3, 6, -1, -1, -1, -1, -1 };
  return &_EduStanfordNlpTaggerMaxentDistsim;
}

+ (void)initialize {
  if (self == [EduStanfordNlpTaggerMaxentDistsim class]) {
    EduStanfordNlpTaggerMaxentDistsim_lexiconMap = EduStanfordNlpUtilGenerics_newHashMap();
    EduStanfordNlpTaggerMaxentDistsim_digits = JavaUtilRegexPattern_compileWithNSString_(@"[0-9]");
    J2OBJC_SET_INITIALIZED(EduStanfordNlpTaggerMaxentDistsim)
  }
}

@end

void EduStanfordNlpTaggerMaxentDistsim_initWithNSString_(EduStanfordNlpTaggerMaxentDistsim *self, NSString *path) {
  NSObject_init(self);
  IOSObjectArray *pieces = [((NSString *) nil_chk(path)) split:@";"];
  NSString *filename = IOSObjectArray_Get(nil_chk(pieces), 0);
  for (jint arg = 1; arg < pieces->size_; ++arg) {
    if ([((NSString *) nil_chk(IOSObjectArray_Get(pieces, arg))) equalsIgnoreCase:@"mapdigits"]) {
      self->mapdigits_ = true;
    }
    else {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Unknown argument ", IOSObjectArray_Get(pieces, arg)));
    }
  }
  self->lexicon_ = EduStanfordNlpUtilGenerics_newHashMap();
  for (NSString * __strong word in nil_chk(EduStanfordNlpObjectbankObjectBank_getLineIteratorWithJavaIoFile_(new_JavaIoFile_initWithNSString_(filename)))) {
    IOSObjectArray *bits = [((NSString *) nil_chk(word)) split:@"\\s+"];
    (void) [((id<JavaUtilMap>) nil_chk(self->lexicon_)) putWithId:[((NSString *) nil_chk(IOSObjectArray_Get(nil_chk(bits), 0))) lowercaseString] withId:IOSObjectArray_Get(bits, 1)];
  }
  if ([((id<JavaUtilMap>) nil_chk(self->lexicon_)) containsKeyWithId:@"<unk>"]) {
    self->unk_ = [self->lexicon_ getWithId:@"<unk>"];
  }
  else {
    self->unk_ = @"null";
  }
}

EduStanfordNlpTaggerMaxentDistsim *new_EduStanfordNlpTaggerMaxentDistsim_initWithNSString_(NSString *path) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTaggerMaxentDistsim, initWithNSString_, path)
}

EduStanfordNlpTaggerMaxentDistsim *create_EduStanfordNlpTaggerMaxentDistsim_initWithNSString_(NSString *path) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTaggerMaxentDistsim, initWithNSString_, path)
}

EduStanfordNlpTaggerMaxentDistsim *EduStanfordNlpTaggerMaxentDistsim_initLexiconWithNSString_(NSString *path) {
  EduStanfordNlpTaggerMaxentDistsim_initialize();
  @synchronized(EduStanfordNlpTaggerMaxentDistsim_lexiconMap) {
    EduStanfordNlpTaggerMaxentDistsim *lex = [((id<JavaUtilMap>) nil_chk(EduStanfordNlpTaggerMaxentDistsim_lexiconMap)) getWithId:path];
    if (lex == nil) {
      EduStanfordNlpUtilTiming_startDoingWithNSString_(JreStrcat("$$", @"Loading distsim lexicon from ", path));
      lex = new_EduStanfordNlpTaggerMaxentDistsim_initWithNSString_(path);
      (void) [EduStanfordNlpTaggerMaxentDistsim_lexiconMap putWithId:path withId:lex];
      EduStanfordNlpUtilTiming_endDoing();
    }
    return lex;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTaggerMaxentDistsim)
