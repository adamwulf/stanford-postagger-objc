//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/tagger/maxent/Dictionary.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/io/IOUtils.h"
#include "edu/stanford/nlp/stats/IntCounter.h"
#include "edu/stanford/nlp/tagger/maxent/AmbiguityClasses.h"
#include "edu/stanford/nlp/tagger/maxent/CountWrapper.h"
#include "edu/stanford/nlp/tagger/maxent/Dictionary.h"
#include "edu/stanford/nlp/tagger/maxent/TTags.h"
#include "edu/stanford/nlp/tagger/maxent/TagCount.h"
#include "edu/stanford/nlp/util/Generics.h"
#include "java/io/DataInputStream.h"
#include "java/io/DataOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/PrintStream.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

@interface EduStanfordNlpTaggerMaxentDictionary () {
 @public
  id<JavaUtilMap> dict_;
  id<JavaUtilMap> partTakingVerbs_;
}

- (void)readWithJavaIoDataInputStream:(JavaIoDataInputStream *)rf
                         withNSString:(NSString *)filename;

- (void)readTagsWithJavaIoDataInputStream:(JavaIoDataInputStream *)rf;

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpTaggerMaxentDictionary, dict_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(EduStanfordNlpTaggerMaxentDictionary, partTakingVerbs_, id<JavaUtilMap>)

inline NSString *EduStanfordNlpTaggerMaxentDictionary_get_naWord();
static NSString *EduStanfordNlpTaggerMaxentDictionary_naWord = @"NA";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpTaggerMaxentDictionary, naWord, NSString *)

inline jboolean EduStanfordNlpTaggerMaxentDictionary_get_VERBOSE();
#define EduStanfordNlpTaggerMaxentDictionary_VERBOSE false
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpTaggerMaxentDictionary, VERBOSE, jboolean)

__attribute__((unused)) static void EduStanfordNlpTaggerMaxentDictionary_readWithJavaIoDataInputStream_withNSString_(EduStanfordNlpTaggerMaxentDictionary *self, JavaIoDataInputStream *rf, NSString *filename);

__attribute__((unused)) static void EduStanfordNlpTaggerMaxentDictionary_readTagsWithJavaIoDataInputStream_(EduStanfordNlpTaggerMaxentDictionary *self, JavaIoDataInputStream *rf);

@implementation EduStanfordNlpTaggerMaxentDictionary

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpTaggerMaxentDictionary_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)fillWordTagCountsWithJavaUtilMap:(id<JavaUtilMap>)wordTagCounts {
  for (NSString * __strong word in nil_chk([((id<JavaUtilMap>) nil_chk(wordTagCounts)) keySet])) {
    EduStanfordNlpTaggerMaxentTagCount *count = new_EduStanfordNlpTaggerMaxentTagCount_initWithEduStanfordNlpStatsIntCounter_([wordTagCounts getWithId:word]);
    (void) [((id<JavaUtilMap>) nil_chk(dict_)) putWithId:word withId:count];
  }
}

- (void)addVThatTakingWithNSString:(NSString *)verb {
  jint i = ((jint) [((NSString *) nil_chk(verb)) hash]);
  if ([((id<JavaUtilMap>) nil_chk(self->partTakingVerbs_)) containsKeyWithId:JavaLangInteger_valueOfWithInt_(i)]) {
    [((EduStanfordNlpTaggerMaxentCountWrapper *) nil_chk([self->partTakingVerbs_ getWithId:JavaLangInteger_valueOfWithInt_(i)])) incThat];
  }
  else {
    (void) [self->partTakingVerbs_ putWithId:JavaLangInteger_valueOfWithInt_(i) withId:new_EduStanfordNlpTaggerMaxentCountWrapper_initWithNSString_withInt_withInt_withInt_withInt_(verb, 0, 1, 0, 0)];
  }
}

- (jint)getCountPartWithNSString:(NSString *)verb {
  jint i = ((jint) [((NSString *) nil_chk(verb)) hash]);
  if ([((id<JavaUtilMap>) nil_chk(self->partTakingVerbs_)) containsKeyWithId:JavaLangInteger_valueOfWithInt_(i)]) {
    return [((EduStanfordNlpTaggerMaxentCountWrapper *) nil_chk([self->partTakingVerbs_ getWithId:JavaLangInteger_valueOfWithInt_(i)])) getCountPart];
  }
  return 0;
}

- (jint)getCountThatWithNSString:(NSString *)verb {
  jint i = ((jint) [((NSString *) nil_chk(verb)) hash]);
  if ([((id<JavaUtilMap>) nil_chk(self->partTakingVerbs_)) containsKeyWithId:JavaLangInteger_valueOfWithInt_(i)]) {
    return [((EduStanfordNlpTaggerMaxentCountWrapper *) nil_chk([self->partTakingVerbs_ getWithId:JavaLangInteger_valueOfWithInt_(i)])) getCountThat];
  }
  return 0;
}

- (jint)getCountInWithNSString:(NSString *)verb {
  jint i = ((jint) [((NSString *) nil_chk(verb)) hash]);
  if ([((id<JavaUtilMap>) nil_chk(self->partTakingVerbs_)) containsKeyWithId:JavaLangInteger_valueOfWithInt_(i)]) {
    return [((EduStanfordNlpTaggerMaxentCountWrapper *) nil_chk([self->partTakingVerbs_ getWithId:JavaLangInteger_valueOfWithInt_(i)])) getCountIn];
  }
  return 0;
}

- (jint)getCountRBWithNSString:(NSString *)verb {
  jint i = ((jint) [((NSString *) nil_chk(verb)) hash]);
  if ([((id<JavaUtilMap>) nil_chk(self->partTakingVerbs_)) containsKeyWithId:JavaLangInteger_valueOfWithInt_(i)]) {
    return [((EduStanfordNlpTaggerMaxentCountWrapper *) nil_chk([self->partTakingVerbs_ getWithId:JavaLangInteger_valueOfWithInt_(i)])) getCountRB];
  }
  return 0;
}

- (jint)getCountWithNSString:(NSString *)word
                withNSString:(NSString *)tag {
  EduStanfordNlpTaggerMaxentTagCount *count = [((id<JavaUtilMap>) nil_chk(dict_)) getWithId:word];
  if (count == nil) {
    return 0;
  }
  else {
    return [count getWithNSString:tag];
  }
}

- (IOSObjectArray *)getTagsWithNSString:(NSString *)word {
  EduStanfordNlpTaggerMaxentTagCount *count = [self getWithNSString:word];
  if (count == nil) {
    return nil;
  }
  return [count getTags];
}

- (EduStanfordNlpTaggerMaxentTagCount *)getWithNSString:(NSString *)word {
  return [((id<JavaUtilMap>) nil_chk(dict_)) getWithId:word];
}

- (NSString *)getFirstTagWithNSString:(NSString *)word {
  EduStanfordNlpTaggerMaxentTagCount *count = [((id<JavaUtilMap>) nil_chk(dict_)) getWithId:word];
  if (count != nil) {
    return [count getFirstTag];
  }
  return nil;
}

- (jint)sumWithNSString:(NSString *)word {
  EduStanfordNlpTaggerMaxentTagCount *count = [((id<JavaUtilMap>) nil_chk(dict_)) getWithId:word];
  if (count != nil) {
    return [count sum];
  }
  return 0;
}

- (jboolean)isUnknownWithNSString:(NSString *)word {
  return ![((id<JavaUtilMap>) nil_chk(dict_)) containsKeyWithId:word];
}

- (void)saveWithJavaIoDataOutputStream:(JavaIoDataOutputStream *)file {
  IOSObjectArray *arr = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(dict_)) keySet])) toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:[((id<JavaUtilSet>) nil_chk([dict_ keySet])) size] type:NSString_class_()]];
  @try {
    [((JavaIoDataOutputStream *) nil_chk(file)) writeIntWithInt:((IOSObjectArray *) nil_chk(arr))->size_];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$I$", @"Saving dictionary of ", arr->size_, @" words ...")];
    {
      IOSObjectArray *a__ = arr;
      NSString * const *b__ = a__->buffer_;
      NSString * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        NSString *word = *b__++;
        EduStanfordNlpTaggerMaxentTagCount *count = [self getWithNSString:word];
        [file writeUTFWithNSString:word];
        [((EduStanfordNlpTaggerMaxentTagCount *) nil_chk(count)) saveWithJavaIoDataOutputStream:file];
      }
    }
    IOSObjectArray *arrverbs = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(self->partTakingVerbs_)) keySet])) toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:[((id<JavaUtilSet>) nil_chk([partTakingVerbs_ keySet])) size] type:JavaLangInteger_class_()]];
    [file writeIntWithInt:((IOSObjectArray *) nil_chk(arrverbs))->size_];
    {
      IOSObjectArray *a__ = arrverbs;
      JavaLangInteger * const *b__ = a__->buffer_;
      JavaLangInteger * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        JavaLangInteger *iO = *b__++;
        EduStanfordNlpTaggerMaxentCountWrapper *tC = [self->partTakingVerbs_ getWithId:iO];
        [file writeIntWithInt:[((JavaLangInteger *) nil_chk(iO)) intValue]];
        [((EduStanfordNlpTaggerMaxentCountWrapper *) nil_chk(tC)) saveWithJavaIoDataOutputStream:file];
      }
    }
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
  }
}

- (void)readWithJavaIoDataInputStream:(JavaIoDataInputStream *)rf
                         withNSString:(NSString *)filename {
  EduStanfordNlpTaggerMaxentDictionary_readWithJavaIoDataInputStream_withNSString_(self, rf, filename);
}

- (void)readTagsWithJavaIoDataInputStream:(JavaIoDataInputStream *)rf {
  EduStanfordNlpTaggerMaxentDictionary_readTagsWithJavaIoDataInputStream_(self, rf);
}

- (void)readWithNSString:(NSString *)filename {
  @try {
    JavaIoDataInputStream *rf = EduStanfordNlpIoIOUtils_getDataInputStreamWithNSString_(filename);
    EduStanfordNlpTaggerMaxentDictionary_readWithJavaIoDataInputStream_withNSString_(self, rf, filename);
    jint len1 = [((JavaIoDataInputStream *) nil_chk(rf)) readInt];
    for (jint i = 0; i < len1; i++) {
      jint iO = [rf readInt];
      EduStanfordNlpTaggerMaxentCountWrapper *tC = new_EduStanfordNlpTaggerMaxentCountWrapper_init();
      [tC readWithJavaIoDataInputStream:rf];
      (void) [((id<JavaUtilMap>) nil_chk(self->partTakingVerbs_)) putWithId:JavaLangInteger_valueOfWithInt_(iO) withId:tC];
    }
    [rf close];
  }
  @catch (JavaIoIOException *e) {
    [((JavaIoIOException *) nil_chk(e)) printStackTrace];
  }
}

- (void)readWithJavaIoDataInputStream:(JavaIoDataInputStream *)file {
  @try {
    EduStanfordNlpTaggerMaxentDictionary_readTagsWithJavaIoDataInputStream_(self, file);
    jint len1 = [((JavaIoDataInputStream *) nil_chk(file)) readInt];
    for (jint i = 0; i < len1; i++) {
      jint iO = [file readInt];
      EduStanfordNlpTaggerMaxentCountWrapper *tC = new_EduStanfordNlpTaggerMaxentCountWrapper_init();
      [tC readWithJavaIoDataInputStream:file];
      (void) [((id<JavaUtilMap>) nil_chk(self->partTakingVerbs_)) putWithId:JavaLangInteger_valueOfWithInt_(iO) withId:tC];
    }
  }
  @catch (JavaIoIOException *e) {
    [((JavaIoIOException *) nil_chk(e)) printStackTrace];
  }
}

- (void)setAmbClassesWithEduStanfordNlpTaggerMaxentAmbiguityClasses:(EduStanfordNlpTaggerMaxentAmbiguityClasses *)ambClasses
                                                            withInt:(jint)veryCommonWordThresh
                                withEduStanfordNlpTaggerMaxentTTags:(EduStanfordNlpTaggerMaxentTTags *)ttags {
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((id<JavaUtilMap>) nil_chk(dict_)) entrySet])) {
    NSString *w = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey];
    EduStanfordNlpTaggerMaxentTagCount *count = [entry_ getValue];
    jint ambClassId = [((EduStanfordNlpTaggerMaxentAmbiguityClasses *) nil_chk(ambClasses)) getClassWithNSString:w withEduStanfordNlpTaggerMaxentDictionary:self withInt:veryCommonWordThresh withEduStanfordNlpTaggerMaxentTTags:ttags];
    [((EduStanfordNlpTaggerMaxentTagCount *) nil_chk(count)) setAmbClassIdWithInt:ambClassId];
  }
}

- (jint)getAmbClassWithNSString:(NSString *)word {
  if ([((NSString *) nil_chk(word)) isEqual:EduStanfordNlpTaggerMaxentDictionary_naWord]) {
    return -2;
  }
  if ([self getWithNSString:word] == nil) {
    return -1;
  }
  return [((EduStanfordNlpTaggerMaxentTagCount *) nil_chk([self getWithNSString:word])) getAmbClassId];
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  EduStanfordNlpTaggerMaxentDictionary_mainWithNSStringArray_(args);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 0, 1, -1, 2, -1, -1 },
    { NULL, "V", 0x4, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 5, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 6, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 7, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 8, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 9, 10, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x4, 11, 4, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTaggerMaxentTagCount;", 0x4, 12, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, 13, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 14, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 15, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 18, 19, 20, -1, -1, -1 },
    { NULL, "V", 0x2, 21, 22, 20, -1, -1, -1 },
    { NULL, "V", 0x4, 18, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 18, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 23, 24, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 25, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 26, 27, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(fillWordTagCountsWithJavaUtilMap:);
  methods[2].selector = @selector(addVThatTakingWithNSString:);
  methods[3].selector = @selector(getCountPartWithNSString:);
  methods[4].selector = @selector(getCountThatWithNSString:);
  methods[5].selector = @selector(getCountInWithNSString:);
  methods[6].selector = @selector(getCountRBWithNSString:);
  methods[7].selector = @selector(getCountWithNSString:withNSString:);
  methods[8].selector = @selector(getTagsWithNSString:);
  methods[9].selector = @selector(getWithNSString:);
  methods[10].selector = @selector(getFirstTagWithNSString:);
  methods[11].selector = @selector(sumWithNSString:);
  methods[12].selector = @selector(isUnknownWithNSString:);
  methods[13].selector = @selector(saveWithJavaIoDataOutputStream:);
  methods[14].selector = @selector(readWithJavaIoDataInputStream:withNSString:);
  methods[15].selector = @selector(readTagsWithJavaIoDataInputStream:);
  methods[16].selector = @selector(readWithNSString:);
  methods[17].selector = @selector(readWithJavaIoDataInputStream:);
  methods[18].selector = @selector(setAmbClassesWithEduStanfordNlpTaggerMaxentAmbiguityClasses:withInt:withEduStanfordNlpTaggerMaxentTTags:);
  methods[19].selector = @selector(getAmbClassWithNSString:);
  methods[20].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "dict_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 28, -1 },
    { "partTakingVerbs_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 29, -1 },
    { "naWord", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 30, -1, -1 },
    { "VERBOSE", "Z", .constantValue.asBOOL = EduStanfordNlpTaggerMaxentDictionary_VERBOSE, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "fillWordTagCounts", "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;Ledu/stanford/nlp/stats/IntCounter<Ljava/lang/String;>;>;)V", "addVThatTaking", "LNSString;", "getCountPart", "getCountThat", "getCountIn", "getCountRB", "getCount", "LNSString;LNSString;", "getTags", "get", "getFirstTag", "sum", "isUnknown", "save", "LJavaIoDataOutputStream;", "read", "LJavaIoDataInputStream;LNSString;", "LJavaIoIOException;", "readTags", "LJavaIoDataInputStream;", "setAmbClasses", "LEduStanfordNlpTaggerMaxentAmbiguityClasses;ILEduStanfordNlpTaggerMaxentTTags;", "getAmbClass", "main", "[LNSString;", "Ljava/util/Map<Ljava/lang/String;Ledu/stanford/nlp/tagger/maxent/TagCount;>;", "Ljava/util/Map<Ljava/lang/Integer;Ledu/stanford/nlp/tagger/maxent/CountWrapper;>;", &EduStanfordNlpTaggerMaxentDictionary_naWord };
  static const J2ObjcClassInfo _EduStanfordNlpTaggerMaxentDictionary = { "Dictionary", "edu.stanford.nlp.tagger.maxent", ptrTable, methods, fields, 7, 0x1, 21, 4, -1, -1, -1, -1, -1 };
  return &_EduStanfordNlpTaggerMaxentDictionary;
}

@end

void EduStanfordNlpTaggerMaxentDictionary_init(EduStanfordNlpTaggerMaxentDictionary *self) {
  NSObject_init(self);
  self->dict_ = EduStanfordNlpUtilGenerics_newHashMap();
  self->partTakingVerbs_ = EduStanfordNlpUtilGenerics_newHashMap();
}

EduStanfordNlpTaggerMaxentDictionary *new_EduStanfordNlpTaggerMaxentDictionary_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpTaggerMaxentDictionary, init)
}

EduStanfordNlpTaggerMaxentDictionary *create_EduStanfordNlpTaggerMaxentDictionary_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTaggerMaxentDictionary, init)
}

void EduStanfordNlpTaggerMaxentDictionary_readWithJavaIoDataInputStream_withNSString_(EduStanfordNlpTaggerMaxentDictionary *self, JavaIoDataInputStream *rf, NSString *filename) {
  jint maxNumTags = 0;
  jint len = [((JavaIoDataInputStream *) nil_chk(rf)) readInt];
  for (jint i = 0; i < len; i++) {
    NSString *word = [rf readUTF];
    EduStanfordNlpTaggerMaxentTagCount *count = EduStanfordNlpTaggerMaxentTagCount_readTagCountWithJavaIoDataInputStream_(rf);
    jint numTags = [((EduStanfordNlpTaggerMaxentTagCount *) nil_chk(count)) numTags];
    if (numTags > maxNumTags) {
      maxNumTags = numTags;
    }
    (void) [((id<JavaUtilMap>) nil_chk(self->dict_)) putWithId:word withId:count];
  }
}

void EduStanfordNlpTaggerMaxentDictionary_readTagsWithJavaIoDataInputStream_(EduStanfordNlpTaggerMaxentDictionary *self, JavaIoDataInputStream *rf) {
  jint maxNumTags = 0;
  jint len = [((JavaIoDataInputStream *) nil_chk(rf)) readInt];
  for (jint i = 0; i < len; i++) {
    NSString *word = [rf readUTF];
    EduStanfordNlpTaggerMaxentTagCount *count = EduStanfordNlpTaggerMaxentTagCount_readTagCountWithJavaIoDataInputStream_(rf);
    jint numTags = [((EduStanfordNlpTaggerMaxentTagCount *) nil_chk(count)) numTags];
    if (numTags > maxNumTags) {
      maxNumTags = numTags;
    }
    (void) [((id<JavaUtilMap>) nil_chk(self->dict_)) putWithId:word withId:count];
  }
}

void EduStanfordNlpTaggerMaxentDictionary_mainWithNSStringArray_(IOSObjectArray *args) {
  EduStanfordNlpTaggerMaxentDictionary_initialize();
  NSString *s = @"word";
  NSString *tag = @"tag";
  EduStanfordNlpTaggerMaxentDictionary *d = new_EduStanfordNlpTaggerMaxentDictionary_init();
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithInt:[d getCountWithNSString:s withNSString:tag]];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:[d getFirstTagWithNSString:s]];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTaggerMaxentDictionary)
