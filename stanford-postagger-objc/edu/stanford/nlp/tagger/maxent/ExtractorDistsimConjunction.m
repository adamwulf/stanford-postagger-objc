//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/tagger/maxent/ExtractorDistsimConjunction.java
//

#include "J2ObjC_source.h"
#include "edu/stanford/nlp/tagger/maxent/Distsim.h"
#include "edu/stanford/nlp/tagger/maxent/Extractor.h"
#include "edu/stanford/nlp/tagger/maxent/ExtractorDistsimConjunction.h"
#include "edu/stanford/nlp/tagger/maxent/History.h"
#include "edu/stanford/nlp/tagger/maxent/PairsHolder.h"
#include "java/lang/StringBuilder.h"

@interface EduStanfordNlpTaggerMaxentExtractorDistsimConjunction () {
 @public
  EduStanfordNlpTaggerMaxentDistsim *lexicon_;
  jint left_;
  jint right_;
  NSString *name_;
}

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpTaggerMaxentExtractorDistsimConjunction, lexicon_, EduStanfordNlpTaggerMaxentDistsim *)
J2OBJC_FIELD_SETTER(EduStanfordNlpTaggerMaxentExtractorDistsimConjunction, name_, NSString *)

inline jlong EduStanfordNlpTaggerMaxentExtractorDistsimConjunction_get_serialVersionUID();
#define EduStanfordNlpTaggerMaxentExtractorDistsimConjunction_serialVersionUID 1LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpTaggerMaxentExtractorDistsimConjunction, serialVersionUID, jlong)

@implementation EduStanfordNlpTaggerMaxentExtractorDistsimConjunction

- (NSString *)extractWithEduStanfordNlpTaggerMaxentHistory:(EduStanfordNlpTaggerMaxentHistory *)h
                 withEduStanfordNlpTaggerMaxentPairsHolder:(EduStanfordNlpTaggerMaxentPairsHolder *)pH {
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  for (jint j = left_; j <= right_; j++) {
    NSString *word = [((EduStanfordNlpTaggerMaxentPairsHolder *) nil_chk(pH)) getWordWithEduStanfordNlpTaggerMaxentHistory:h withInt:j];
    NSString *distSim = [((EduStanfordNlpTaggerMaxentDistsim *) nil_chk(lexicon_)) getMappingWithNSString:word];
    (void) [sb appendWithNSString:distSim];
    if (j < right_) {
      (void) [sb appendWithChar:'|'];
    }
  }
  return [sb description];
}

- (instancetype)initWithNSString:(NSString *)distSimPath
                         withInt:(jint)left
                         withInt:(jint)right {
  EduStanfordNlpTaggerMaxentExtractorDistsimConjunction_initWithNSString_withInt_withInt_(self, distSimPath, left, right);
  return self;
}

- (NSString *)description {
  return name_;
}

- (jboolean)isLocal {
  return false;
}

- (jboolean)isDynamic {
  return false;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x0, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(extractWithEduStanfordNlpTaggerMaxentHistory:withEduStanfordNlpTaggerMaxentPairsHolder:);
  methods[1].selector = @selector(initWithNSString:withInt:withInt:);
  methods[2].selector = @selector(description);
  methods[3].selector = @selector(isLocal);
  methods[4].selector = @selector(isDynamic);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpTaggerMaxentExtractorDistsimConjunction_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "lexicon_", "LEduStanfordNlpTaggerMaxentDistsim;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "left_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "right_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "name_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "extract", "LEduStanfordNlpTaggerMaxentHistory;LEduStanfordNlpTaggerMaxentPairsHolder;", "LNSString;II", "toString" };
  static const J2ObjcClassInfo _EduStanfordNlpTaggerMaxentExtractorDistsimConjunction = { "ExtractorDistsimConjunction", "edu.stanford.nlp.tagger.maxent", ptrTable, methods, fields, 7, 0x1, 5, 5, -1, -1, -1, -1, -1 };
  return &_EduStanfordNlpTaggerMaxentExtractorDistsimConjunction;
}

@end

void EduStanfordNlpTaggerMaxentExtractorDistsimConjunction_initWithNSString_withInt_withInt_(EduStanfordNlpTaggerMaxentExtractorDistsimConjunction *self, NSString *distSimPath, jint left, jint right) {
  EduStanfordNlpTaggerMaxentExtractor_init(self);
  self->lexicon_ = EduStanfordNlpTaggerMaxentDistsim_initLexiconWithNSString_(distSimPath);
  self->left_ = left;
  self->right_ = right;
  self->name_ = JreStrcat("$ICIC", @"ExtractorDistsimConjunction(", left, ',', right, ')');
}

EduStanfordNlpTaggerMaxentExtractorDistsimConjunction *new_EduStanfordNlpTaggerMaxentExtractorDistsimConjunction_initWithNSString_withInt_withInt_(NSString *distSimPath, jint left, jint right) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTaggerMaxentExtractorDistsimConjunction, initWithNSString_withInt_withInt_, distSimPath, left, right)
}

EduStanfordNlpTaggerMaxentExtractorDistsimConjunction *create_EduStanfordNlpTaggerMaxentExtractorDistsimConjunction_initWithNSString_withInt_withInt_(NSString *distSimPath, jint left, jint right) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTaggerMaxentExtractorDistsimConjunction, initWithNSString_withInt_withInt_, distSimPath, left, right)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTaggerMaxentExtractorDistsimConjunction)
