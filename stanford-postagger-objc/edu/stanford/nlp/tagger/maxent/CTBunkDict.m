//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/tagger/maxent/CTBunkDict.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/io/RuntimeIOException.h"
#include "edu/stanford/nlp/tagger/maxent/CTBunkDict.h"
#include "edu/stanford/nlp/util/Generics.h"
#include "java/io/BufferedReader.h"
#include "java/io/FileInputStream.h"
#include "java/io/FileNotFoundException.h"
#include "java/io/IOException.h"
#include "java/io/InputStreamReader.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

@interface EduStanfordNlpTaggerMaxentCTBunkDict ()

+ (EduStanfordNlpTaggerMaxentCTBunkDict *)getInstance;

- (instancetype)init;

+ (void)readCTBunkDictWithNSString:(NSString *)filename;

+ (id<JavaUtilSet>)getWithNSString:(NSString *)a;

@end

inline NSString *EduStanfordNlpTaggerMaxentCTBunkDict_get_defaultFilename();
static NSString *EduStanfordNlpTaggerMaxentCTBunkDict_defaultFilename = @"ctb_amb";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpTaggerMaxentCTBunkDict, defaultFilename, NSString *)

inline EduStanfordNlpTaggerMaxentCTBunkDict *EduStanfordNlpTaggerMaxentCTBunkDict_get_CTBunkDictSingleton();
inline EduStanfordNlpTaggerMaxentCTBunkDict *EduStanfordNlpTaggerMaxentCTBunkDict_set_CTBunkDictSingleton(EduStanfordNlpTaggerMaxentCTBunkDict *value);
static EduStanfordNlpTaggerMaxentCTBunkDict *EduStanfordNlpTaggerMaxentCTBunkDict_CTBunkDictSingleton;
J2OBJC_STATIC_FIELD_OBJ(EduStanfordNlpTaggerMaxentCTBunkDict, CTBunkDictSingleton, EduStanfordNlpTaggerMaxentCTBunkDict *)

inline id<JavaUtilMap> EduStanfordNlpTaggerMaxentCTBunkDict_get_CTBunk_dict();
inline id<JavaUtilMap> EduStanfordNlpTaggerMaxentCTBunkDict_set_CTBunk_dict(id<JavaUtilMap> value);
static id<JavaUtilMap> EduStanfordNlpTaggerMaxentCTBunkDict_CTBunk_dict;
J2OBJC_STATIC_FIELD_OBJ(EduStanfordNlpTaggerMaxentCTBunkDict, CTBunk_dict, id<JavaUtilMap>)

__attribute__((unused)) static EduStanfordNlpTaggerMaxentCTBunkDict *EduStanfordNlpTaggerMaxentCTBunkDict_getInstance();

__attribute__((unused)) static void EduStanfordNlpTaggerMaxentCTBunkDict_init(EduStanfordNlpTaggerMaxentCTBunkDict *self);

__attribute__((unused)) static EduStanfordNlpTaggerMaxentCTBunkDict *new_EduStanfordNlpTaggerMaxentCTBunkDict_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpTaggerMaxentCTBunkDict *create_EduStanfordNlpTaggerMaxentCTBunkDict_init();

__attribute__((unused)) static void EduStanfordNlpTaggerMaxentCTBunkDict_readCTBunkDictWithNSString_(NSString *filename);

__attribute__((unused)) static id<JavaUtilSet> EduStanfordNlpTaggerMaxentCTBunkDict_getWithNSString_(NSString *a);

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpTaggerMaxentCTBunkDict)

@implementation EduStanfordNlpTaggerMaxentCTBunkDict

+ (EduStanfordNlpTaggerMaxentCTBunkDict *)getInstance {
  return EduStanfordNlpTaggerMaxentCTBunkDict_getInstance();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpTaggerMaxentCTBunkDict_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)readCTBunkDictWithNSString:(NSString *)filename {
  EduStanfordNlpTaggerMaxentCTBunkDict_readCTBunkDictWithNSString_(filename);
}

+ (NSString *)getTagWithNSString:(NSString *)tag
                    withNSString:(NSString *)word {
  return EduStanfordNlpTaggerMaxentCTBunkDict_getTagWithNSString_withNSString_(tag, word);
}

+ (id<JavaUtilSet>)getWithNSString:(NSString *)a {
  return EduStanfordNlpTaggerMaxentCTBunkDict_getWithNSString_(a);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LEduStanfordNlpTaggerMaxentCTBunkDict;", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xc, 2, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0xa, 4, 1, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(getInstance);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(readCTBunkDictWithNSString:);
  methods[3].selector = @selector(getTagWithNSString:withNSString:);
  methods[4].selector = @selector(getWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "defaultFilename", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 6, -1, -1 },
    { "CTBunkDictSingleton", "LEduStanfordNlpTaggerMaxentCTBunkDict;", .constantValue.asLong = 0, 0xa, -1, 7, -1, -1 },
    { "CTBunk_dict", "LJavaUtilMap;", .constantValue.asLong = 0, 0xa, -1, 8, 9, -1 },
  };
  static const void *ptrTable[] = { "readCTBunkDict", "LNSString;", "getTag", "LNSString;LNSString;", "get", "(Ljava/lang/String;)Ljava/util/Set<Ljava/lang/String;>;", &EduStanfordNlpTaggerMaxentCTBunkDict_defaultFilename, &EduStanfordNlpTaggerMaxentCTBunkDict_CTBunkDictSingleton, &EduStanfordNlpTaggerMaxentCTBunkDict_CTBunk_dict, "Ljava/util/Map<Ljava/lang/String;Ljava/util/Set<Ljava/lang/String;>;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpTaggerMaxentCTBunkDict = { "CTBunkDict", "edu.stanford.nlp.tagger.maxent", ptrTable, methods, fields, 7, 0x1, 5, 3, -1, -1, -1, -1, -1 };
  return &_EduStanfordNlpTaggerMaxentCTBunkDict;
}

+ (void)initialize {
  if (self == [EduStanfordNlpTaggerMaxentCTBunkDict class]) {
    EduStanfordNlpTaggerMaxentCTBunkDict_CTBunkDictSingleton = nil;
    J2OBJC_SET_INITIALIZED(EduStanfordNlpTaggerMaxentCTBunkDict)
  }
}

@end

EduStanfordNlpTaggerMaxentCTBunkDict *EduStanfordNlpTaggerMaxentCTBunkDict_getInstance() {
  EduStanfordNlpTaggerMaxentCTBunkDict_initialize();
  if (EduStanfordNlpTaggerMaxentCTBunkDict_CTBunkDictSingleton == nil) {
    EduStanfordNlpTaggerMaxentCTBunkDict_CTBunkDictSingleton = new_EduStanfordNlpTaggerMaxentCTBunkDict_init();
  }
  return EduStanfordNlpTaggerMaxentCTBunkDict_CTBunkDictSingleton;
}

void EduStanfordNlpTaggerMaxentCTBunkDict_init(EduStanfordNlpTaggerMaxentCTBunkDict *self) {
  NSObject_init(self);
  EduStanfordNlpTaggerMaxentCTBunkDict_readCTBunkDictWithNSString_(JreStrcat("$$", @"/u/nlp/data/pos-tagger/dictionary/", EduStanfordNlpTaggerMaxentCTBunkDict_defaultFilename));
}

EduStanfordNlpTaggerMaxentCTBunkDict *new_EduStanfordNlpTaggerMaxentCTBunkDict_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpTaggerMaxentCTBunkDict, init)
}

EduStanfordNlpTaggerMaxentCTBunkDict *create_EduStanfordNlpTaggerMaxentCTBunkDict_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTaggerMaxentCTBunkDict, init)
}

void EduStanfordNlpTaggerMaxentCTBunkDict_readCTBunkDictWithNSString_(NSString *filename) {
  EduStanfordNlpTaggerMaxentCTBunkDict_initialize();
  EduStanfordNlpTaggerMaxentCTBunkDict_CTBunk_dict = EduStanfordNlpUtilGenerics_newHashMap();
  @try {
    JavaIoBufferedReader *CTBunkDetectorReader = new_JavaIoBufferedReader_initWithJavaIoReader_(new_JavaIoInputStreamReader_initWithJavaIoInputStream_withNSString_(new_JavaIoFileInputStream_initWithNSString_(filename), @"GB18030"));
    for (NSString *CTBunkDetectorLine; (CTBunkDetectorLine = [CTBunkDetectorReader readLine]) != nil; ) {
      IOSObjectArray *fields = [((NSString *) nil_chk(CTBunkDetectorLine)) split:@" "];
      NSString *tag = IOSObjectArray_Get(nil_chk(fields), 1);
      id<JavaUtilSet> words = [((id<JavaUtilMap>) nil_chk(EduStanfordNlpTaggerMaxentCTBunkDict_CTBunk_dict)) getWithId:tag];
      if (words == nil) {
        words = EduStanfordNlpUtilGenerics_newHashSet();
        (void) [((id<JavaUtilMap>) nil_chk(EduStanfordNlpTaggerMaxentCTBunkDict_CTBunk_dict)) putWithId:tag withId:words];
      }
      [((id<JavaUtilSet>) nil_chk(words)) addWithId:IOSObjectArray_Get(fields, 0)];
    }
  }
  @catch (JavaIoFileNotFoundException *e) {
    @throw new_EduStanfordNlpIoRuntimeIOException_initWithNSString_withNSException_(JreStrcat("$$", @"CTBunk file not found: ", filename), e);
  }
  @catch (JavaIoIOException *e) {
    @throw new_EduStanfordNlpIoRuntimeIOException_initWithNSString_withNSException_(JreStrcat("$$", @"CTBunk I/O error: ", filename), e);
  }
}

NSString *EduStanfordNlpTaggerMaxentCTBunkDict_getTagWithNSString_withNSString_(NSString *tag, NSString *word) {
  EduStanfordNlpTaggerMaxentCTBunkDict_initialize();
  EduStanfordNlpTaggerMaxentCTBunkDict *dict = EduStanfordNlpTaggerMaxentCTBunkDict_getInstance();
  id<JavaUtilSet> words = EduStanfordNlpTaggerMaxentCTBunkDict_getWithNSString_(tag);
  if (words != nil && [words containsWithId:word]) {
    return @"1";
  }
  else {
    return @"0";
  }
}

id<JavaUtilSet> EduStanfordNlpTaggerMaxentCTBunkDict_getWithNSString_(NSString *a) {
  EduStanfordNlpTaggerMaxentCTBunkDict_initialize();
  return [((id<JavaUtilMap>) nil_chk(EduStanfordNlpTaggerMaxentCTBunkDict_CTBunk_dict)) getWithId:a];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTaggerMaxentCTBunkDict)
