//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/tagger/maxent/TestClassifier.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/io/PrintFile.h"
#include "edu/stanford/nlp/maxent/iis/LambdaSolve.h"
#include "edu/stanford/nlp/tagger/io/TaggedFileReader.h"
#include "edu/stanford/nlp/tagger/io/TaggedFileRecord.h"
#include "edu/stanford/nlp/tagger/maxent/MaxentTagger.h"
#include "edu/stanford/nlp/tagger/maxent/TaggerConfig.h"
#include "edu/stanford/nlp/tagger/maxent/TestClassifier.h"
#include "edu/stanford/nlp/tagger/maxent/TestSentence.h"
#include "edu/stanford/nlp/util/ConfusionMatrix.h"
#include "edu/stanford/nlp/util/concurrent/MulticoreWrapper.h"
#include "edu/stanford/nlp/util/concurrent/ThreadsafeProcessor.h"
#include "java/io/PrintStream.h"
#include "java/lang/Double.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"

@interface EduStanfordNlpTaggerMaxentTestClassifier () {
 @public
  EduStanfordNlpTaggerIoTaggedFileRecord *fileRecord_;
  jint numRight_;
  jint numWrong_;
  jint unknownWords_;
  jint numWrongUnknown_;
  jint numCorrectSentences_;
  jint numSentences_;
  EduStanfordNlpUtilConfusionMatrix *confusionMatrix_;
  jboolean writeUnknDict_;
  jboolean writeWords_;
  jboolean writeTopWords_;
  jboolean writeConfusionMatrix_;
}

- (void)processResultsWithEduStanfordNlpTaggerMaxentTestSentence:(EduStanfordNlpTaggerMaxentTestSentence *)testS
                                   withEduStanfordNlpIoPrintFile:(EduStanfordNlpIoPrintFile *)wordsFile
                                   withEduStanfordNlpIoPrintFile:(EduStanfordNlpIoPrintFile *)unknDictFile
                                   withEduStanfordNlpIoPrintFile:(EduStanfordNlpIoPrintFile *)topWordsFile
                                                     withBoolean:(jboolean)verboseResults;

- (void)test;

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpTaggerMaxentTestClassifier, fileRecord_, EduStanfordNlpTaggerIoTaggedFileRecord *)
J2OBJC_FIELD_SETTER(EduStanfordNlpTaggerMaxentTestClassifier, confusionMatrix_, EduStanfordNlpUtilConfusionMatrix *)

__attribute__((unused)) static void EduStanfordNlpTaggerMaxentTestClassifier_processResultsWithEduStanfordNlpTaggerMaxentTestSentence_withEduStanfordNlpIoPrintFile_withEduStanfordNlpIoPrintFile_withEduStanfordNlpIoPrintFile_withBoolean_(EduStanfordNlpTaggerMaxentTestClassifier *self, EduStanfordNlpTaggerMaxentTestSentence *testS, EduStanfordNlpIoPrintFile *wordsFile, EduStanfordNlpIoPrintFile *unknDictFile, EduStanfordNlpIoPrintFile *topWordsFile, jboolean verboseResults);

__attribute__((unused)) static void EduStanfordNlpTaggerMaxentTestClassifier_test(EduStanfordNlpTaggerMaxentTestClassifier *self);

@implementation EduStanfordNlpTaggerMaxentTestClassifier

- (instancetype)initWithEduStanfordNlpTaggerMaxentMaxentTagger:(EduStanfordNlpTaggerMaxentMaxentTagger *)maxentTagger {
  EduStanfordNlpTaggerMaxentTestClassifier_initWithEduStanfordNlpTaggerMaxentMaxentTagger_(self, maxentTagger);
  return self;
}

- (instancetype)initWithEduStanfordNlpTaggerMaxentMaxentTagger:(EduStanfordNlpTaggerMaxentMaxentTagger *)maxentTagger
                                                  withNSString:(NSString *)testFile {
  EduStanfordNlpTaggerMaxentTestClassifier_initWithEduStanfordNlpTaggerMaxentMaxentTagger_withNSString_(self, maxentTagger, testFile);
  return self;
}

- (void)processResultsWithEduStanfordNlpTaggerMaxentTestSentence:(EduStanfordNlpTaggerMaxentTestSentence *)testS
                                   withEduStanfordNlpIoPrintFile:(EduStanfordNlpIoPrintFile *)wordsFile
                                   withEduStanfordNlpIoPrintFile:(EduStanfordNlpIoPrintFile *)unknDictFile
                                   withEduStanfordNlpIoPrintFile:(EduStanfordNlpIoPrintFile *)topWordsFile
                                                     withBoolean:(jboolean)verboseResults {
  EduStanfordNlpTaggerMaxentTestClassifier_processResultsWithEduStanfordNlpTaggerMaxentTestSentence_withEduStanfordNlpIoPrintFile_withEduStanfordNlpIoPrintFile_withEduStanfordNlpIoPrintFile_withBoolean_(self, testS, wordsFile, unknDictFile, topWordsFile, verboseResults);
}

- (void)test {
  EduStanfordNlpTaggerMaxentTestClassifier_test(self);
}

- (NSString *)resultsStringWithEduStanfordNlpTaggerMaxentMaxentTagger:(EduStanfordNlpTaggerMaxentMaxentTagger *)maxentTagger {
  JavaLangStringBuilder *output = new_JavaLangStringBuilder_init();
  (void) [output appendWithNSString:NSString_formatWithNSString_withNSObjectArray_(@"Model %s has xSize=%d, ySize=%d, and numFeatures=%d.%n", [IOSObjectArray newArrayWithObjects:(id[]){ [((EduStanfordNlpTaggerMaxentTaggerConfig *) nil_chk(((EduStanfordNlpTaggerMaxentMaxentTagger *) nil_chk(maxentTagger))->config_)) getModel], JavaLangInteger_valueOfWithInt_(maxentTagger->xSize_), JavaLangInteger_valueOfWithInt_(maxentTagger->ySize_), JavaLangInteger_valueOfWithInt_(((IOSDoubleArray *) nil_chk(((EduStanfordNlpMaxentIisLambdaSolve *) nil_chk([maxentTagger getLambdaSolve]))->lambda_))->size_) } count:4 type:NSObject_class_()])];
  (void) [output appendWithNSString:NSString_formatWithNSString_withNSObjectArray_(@"Results on %d sentences and %d words, of which %d were unknown.%n", [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(numSentences_), JavaLangInteger_valueOfWithInt_(numRight_ + numWrong_), JavaLangInteger_valueOfWithInt_(unknownWords_) } count:3 type:NSObject_class_()])];
  (void) [output appendWithNSString:NSString_formatWithNSString_withNSObjectArray_(@"Total sentences right: %d (%f%%); wrong: %d (%f%%).%n", [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(numCorrectSentences_), JavaLangDouble_valueOfWithDouble_(numCorrectSentences_ * 100.0 / numSentences_), JavaLangInteger_valueOfWithInt_(numSentences_ - numCorrectSentences_), JavaLangDouble_valueOfWithDouble_((numSentences_ - numCorrectSentences_) * 100.0 / (numSentences_)) } count:4 type:NSObject_class_()])];
  (void) [output appendWithNSString:NSString_formatWithNSString_withNSObjectArray_(@"Total tags right: %d (%f%%); wrong: %d (%f%%).%n", [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(numRight_), JavaLangDouble_valueOfWithDouble_(numRight_ * 100.0 / (numRight_ + numWrong_)), JavaLangInteger_valueOfWithInt_(numWrong_), JavaLangDouble_valueOfWithDouble_(numWrong_ * 100.0 / (numRight_ + numWrong_)) } count:4 type:NSObject_class_()])];
  if (unknownWords_ > 0) {
    (void) [output appendWithNSString:NSString_formatWithNSString_withNSObjectArray_(@"Unknown words right: %d (%f%%); wrong: %d (%f%%).%n", [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_((unknownWords_ - numWrongUnknown_)), JavaLangDouble_valueOfWithDouble_(100.0 - (numWrongUnknown_ * 100.0 / unknownWords_)), JavaLangInteger_valueOfWithInt_(numWrongUnknown_), JavaLangDouble_valueOfWithDouble_(numWrongUnknown_ * 100.0 / unknownWords_) } count:4 type:NSObject_class_()])];
  }
  return [output description];
}

- (void)printModelAndAccuracyWithEduStanfordNlpTaggerMaxentMaxentTagger:(EduStanfordNlpTaggerMaxentMaxentTagger *)maxentTagger {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:[self resultsStringWithEduStanfordNlpTaggerMaxentMaxentTagger:maxentTagger]];
}

- (jint)getNumWords {
  return numRight_ + numWrong_;
}

- (void)setDebugWithBoolean:(jboolean)status {
  writeUnknDict_ = status;
  writeWords_ = status;
  writeTopWords_ = status;
  writeConfusionMatrix_ = status;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, 1, -1, -1, -1 },
    { NULL, "V", 0x2, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, 5, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 6, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 7, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpTaggerMaxentMaxentTagger:);
  methods[1].selector = @selector(initWithEduStanfordNlpTaggerMaxentMaxentTagger:withNSString:);
  methods[2].selector = @selector(processResultsWithEduStanfordNlpTaggerMaxentTestSentence:withEduStanfordNlpIoPrintFile:withEduStanfordNlpIoPrintFile:withEduStanfordNlpIoPrintFile:withBoolean:);
  methods[3].selector = @selector(test);
  methods[4].selector = @selector(resultsStringWithEduStanfordNlpTaggerMaxentMaxentTagger:);
  methods[5].selector = @selector(printModelAndAccuracyWithEduStanfordNlpTaggerMaxentMaxentTagger:);
  methods[6].selector = @selector(getNumWords);
  methods[7].selector = @selector(setDebugWithBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "fileRecord_", "LEduStanfordNlpTaggerIoTaggedFileRecord;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "numRight_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "numWrong_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "unknownWords_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "numWrongUnknown_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "numCorrectSentences_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "numSentences_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "confusionMatrix_", "LEduStanfordNlpUtilConfusionMatrix;", .constantValue.asLong = 0, 0x2, -1, -1, 9, -1 },
    { "writeUnknDict_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "writeWords_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "writeTopWords_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "writeConfusionMatrix_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "maxentTagger_", "LEduStanfordNlpTaggerMaxentMaxentTagger;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "config_", "LEduStanfordNlpTaggerMaxentTaggerConfig;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "saveRoot_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpTaggerMaxentMaxentTagger;", "LJavaIoIOException;", "LEduStanfordNlpTaggerMaxentMaxentTagger;LNSString;", "processResults", "LEduStanfordNlpTaggerMaxentTestSentence;LEduStanfordNlpIoPrintFile;LEduStanfordNlpIoPrintFile;LEduStanfordNlpIoPrintFile;Z", "resultsString", "printModelAndAccuracy", "setDebug", "Z", "Ledu/stanford/nlp/util/ConfusionMatrix<Ljava/lang/String;>;", "LEduStanfordNlpTaggerMaxentTestClassifier_TestSentenceProcessor;" };
  static const J2ObjcClassInfo _EduStanfordNlpTaggerMaxentTestClassifier = { "TestClassifier", "edu.stanford.nlp.tagger.maxent", ptrTable, methods, fields, 7, 0x1, 8, 15, -1, 10, -1, -1, -1 };
  return &_EduStanfordNlpTaggerMaxentTestClassifier;
}

@end

void EduStanfordNlpTaggerMaxentTestClassifier_initWithEduStanfordNlpTaggerMaxentMaxentTagger_(EduStanfordNlpTaggerMaxentTestClassifier *self, EduStanfordNlpTaggerMaxentMaxentTagger *maxentTagger) {
  EduStanfordNlpTaggerMaxentTestClassifier_initWithEduStanfordNlpTaggerMaxentMaxentTagger_withNSString_(self, maxentTagger, [((EduStanfordNlpTaggerMaxentTaggerConfig *) nil_chk(((EduStanfordNlpTaggerMaxentMaxentTagger *) nil_chk(maxentTagger))->config_)) getFile]);
}

EduStanfordNlpTaggerMaxentTestClassifier *new_EduStanfordNlpTaggerMaxentTestClassifier_initWithEduStanfordNlpTaggerMaxentMaxentTagger_(EduStanfordNlpTaggerMaxentMaxentTagger *maxentTagger) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTaggerMaxentTestClassifier, initWithEduStanfordNlpTaggerMaxentMaxentTagger_, maxentTagger)
}

EduStanfordNlpTaggerMaxentTestClassifier *create_EduStanfordNlpTaggerMaxentTestClassifier_initWithEduStanfordNlpTaggerMaxentMaxentTagger_(EduStanfordNlpTaggerMaxentMaxentTagger *maxentTagger) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTaggerMaxentTestClassifier, initWithEduStanfordNlpTaggerMaxentMaxentTagger_, maxentTagger)
}

void EduStanfordNlpTaggerMaxentTestClassifier_initWithEduStanfordNlpTaggerMaxentMaxentTagger_withNSString_(EduStanfordNlpTaggerMaxentTestClassifier *self, EduStanfordNlpTaggerMaxentMaxentTagger *maxentTagger, NSString *testFile) {
  NSObject_init(self);
  self->maxentTagger_ = maxentTagger;
  self->config_ = ((EduStanfordNlpTaggerMaxentMaxentTagger *) nil_chk(maxentTagger))->config_;
  [self setDebugWithBoolean:[((EduStanfordNlpTaggerMaxentTaggerConfig *) nil_chk(self->config_)) getDebug]];
  self->fileRecord_ = EduStanfordNlpTaggerIoTaggedFileRecord_createRecordWithJavaUtilProperties_withNSString_(self->config_, testFile);
  self->saveRoot_ = [((EduStanfordNlpTaggerMaxentTaggerConfig *) nil_chk(self->config_)) getDebugPrefix];
  if (self->saveRoot_ == nil || [self->saveRoot_ isEqual:@""]) {
    self->saveRoot_ = [((EduStanfordNlpTaggerIoTaggedFileRecord *) nil_chk(self->fileRecord_)) filename];
  }
  EduStanfordNlpTaggerMaxentTestClassifier_test(self);
  if (self->writeConfusionMatrix_) {
    EduStanfordNlpIoPrintFile *pf = new_EduStanfordNlpIoPrintFile_initWithNSString_(JreStrcat("$$", self->saveRoot_, @".confusion"));
    [pf printWithNSString:[((EduStanfordNlpUtilConfusionMatrix *) nil_chk(self->confusionMatrix_)) description]];
    [pf close];
  }
}

EduStanfordNlpTaggerMaxentTestClassifier *new_EduStanfordNlpTaggerMaxentTestClassifier_initWithEduStanfordNlpTaggerMaxentMaxentTagger_withNSString_(EduStanfordNlpTaggerMaxentMaxentTagger *maxentTagger, NSString *testFile) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTaggerMaxentTestClassifier, initWithEduStanfordNlpTaggerMaxentMaxentTagger_withNSString_, maxentTagger, testFile)
}

EduStanfordNlpTaggerMaxentTestClassifier *create_EduStanfordNlpTaggerMaxentTestClassifier_initWithEduStanfordNlpTaggerMaxentMaxentTagger_withNSString_(EduStanfordNlpTaggerMaxentMaxentTagger *maxentTagger, NSString *testFile) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTaggerMaxentTestClassifier, initWithEduStanfordNlpTaggerMaxentMaxentTagger_withNSString_, maxentTagger, testFile)
}

void EduStanfordNlpTaggerMaxentTestClassifier_processResultsWithEduStanfordNlpTaggerMaxentTestSentence_withEduStanfordNlpIoPrintFile_withEduStanfordNlpIoPrintFile_withEduStanfordNlpIoPrintFile_withBoolean_(EduStanfordNlpTaggerMaxentTestClassifier *self, EduStanfordNlpTaggerMaxentTestSentence *testS, EduStanfordNlpIoPrintFile *wordsFile, EduStanfordNlpIoPrintFile *unknDictFile, EduStanfordNlpIoPrintFile *topWordsFile, jboolean verboseResults) {
  self->numSentences_++;
  [((EduStanfordNlpTaggerMaxentTestSentence *) nil_chk(testS)) writeTagsAndErrorsWithNSStringArray:testS->finalTags_ withEduStanfordNlpIoPrintFile:unknDictFile withBoolean:verboseResults];
  if (self->writeUnknDict_) [testS printUnknownWithInt:self->numSentences_ withEduStanfordNlpIoPrintFile:unknDictFile];
  if (self->writeTopWords_) [testS printTopWithEduStanfordNlpIoPrintFile:topWordsFile];
  [testS updateConfusionMatrixWithNSStringArray:testS->finalTags_ withEduStanfordNlpUtilConfusionMatrix:self->confusionMatrix_];
  self->numWrong_ = self->numWrong_ + testS->numWrong_;
  self->numRight_ = self->numRight_ + testS->numRight_;
  self->unknownWords_ = self->unknownWords_ + testS->numUnknown_;
  self->numWrongUnknown_ = self->numWrongUnknown_ + testS->numWrongUnknown_;
  if (testS->numWrong_ == 0) {
    self->numCorrectSentences_++;
  }
  if (verboseResults) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$I$I$I$I$I", @"Sentence number: ", self->numSentences_, @"; length ", (testS->size_ - 1), @"; correct: ", testS->numRight_, @"; wrong: ", testS->numWrong_, @"; unknown wrong: ", testS->numWrongUnknown_)];
    [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:JreStrcat("$I$I$I", @"  Total tags correct: ", self->numRight_, @"; wrong: ", self->numWrong_, @"; unknown wrong: ", self->numWrongUnknown_)];
  }
}

void EduStanfordNlpTaggerMaxentTestClassifier_test(EduStanfordNlpTaggerMaxentTestClassifier *self) {
  self->numSentences_ = 0;
  self->confusionMatrix_ = new_EduStanfordNlpUtilConfusionMatrix_init();
  EduStanfordNlpIoPrintFile *pf = nil;
  EduStanfordNlpIoPrintFile *pf1 = nil;
  EduStanfordNlpIoPrintFile *pf3 = nil;
  if (self->writeWords_) pf = new_EduStanfordNlpIoPrintFile_initWithNSString_(JreStrcat("$$", self->saveRoot_, @".words"));
  if (self->writeUnknDict_) pf1 = new_EduStanfordNlpIoPrintFile_initWithNSString_(JreStrcat("$$", self->saveRoot_, @".un.dict"));
  if (self->writeTopWords_) pf3 = new_EduStanfordNlpIoPrintFile_initWithNSString_(JreStrcat("$$", self->saveRoot_, @".words.top"));
  jboolean verboseResults = [((EduStanfordNlpTaggerMaxentTaggerConfig *) nil_chk(self->config_)) getVerboseResults];
  if ([((EduStanfordNlpTaggerMaxentTaggerConfig *) nil_chk(self->config_)) getNThreads] != 1) {
    EduStanfordNlpUtilConcurrentMulticoreWrapper *wrapper = new_EduStanfordNlpUtilConcurrentMulticoreWrapper_initWithInt_withEduStanfordNlpUtilConcurrentThreadsafeProcessor_([((EduStanfordNlpTaggerMaxentTaggerConfig *) nil_chk(self->config_)) getNThreads], new_EduStanfordNlpTaggerMaxentTestClassifier_TestSentenceProcessor_initWithEduStanfordNlpTaggerMaxentMaxentTagger_(self->maxentTagger_));
    for (id<JavaUtilList> __strong taggedSentence in nil_chk([((EduStanfordNlpTaggerIoTaggedFileRecord *) nil_chk(self->fileRecord_)) reader])) {
      [wrapper putWithId:taggedSentence];
      while ([wrapper peek]) {
        EduStanfordNlpTaggerMaxentTestClassifier_processResultsWithEduStanfordNlpTaggerMaxentTestSentence_withEduStanfordNlpIoPrintFile_withEduStanfordNlpIoPrintFile_withEduStanfordNlpIoPrintFile_withBoolean_(self, [wrapper poll], pf, pf1, pf3, verboseResults);
      }
    }
    [wrapper join];
    while ([wrapper peek]) {
      EduStanfordNlpTaggerMaxentTestClassifier_processResultsWithEduStanfordNlpTaggerMaxentTestSentence_withEduStanfordNlpIoPrintFile_withEduStanfordNlpIoPrintFile_withEduStanfordNlpIoPrintFile_withBoolean_(self, [wrapper poll], pf, pf1, pf3, verboseResults);
    }
  }
  else {
    for (id<JavaUtilList> __strong taggedSentence in nil_chk([((EduStanfordNlpTaggerIoTaggedFileRecord *) nil_chk(self->fileRecord_)) reader])) {
      EduStanfordNlpTaggerMaxentTestSentence *testS = new_EduStanfordNlpTaggerMaxentTestSentence_initWithEduStanfordNlpTaggerMaxentMaxentTagger_(self->maxentTagger_);
      [testS setCorrectTagsWithJavaUtilList:taggedSentence];
      (void) [testS tagSentenceWithJavaUtilList:taggedSentence withBoolean:false];
      EduStanfordNlpTaggerMaxentTestClassifier_processResultsWithEduStanfordNlpTaggerMaxentTestSentence_withEduStanfordNlpIoPrintFile_withEduStanfordNlpIoPrintFile_withEduStanfordNlpIoPrintFile_withBoolean_(self, testS, pf, pf1, pf3, verboseResults);
    }
  }
  if (pf != nil) [pf close];
  if (pf1 != nil) [pf1 close];
  if (pf3 != nil) [pf3 close];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTaggerMaxentTestClassifier)

@implementation EduStanfordNlpTaggerMaxentTestClassifier_TestSentenceProcessor

- (instancetype)initWithEduStanfordNlpTaggerMaxentMaxentTagger:(EduStanfordNlpTaggerMaxentMaxentTagger *)maxentTagger {
  EduStanfordNlpTaggerMaxentTestClassifier_TestSentenceProcessor_initWithEduStanfordNlpTaggerMaxentMaxentTagger_(self, maxentTagger);
  return self;
}

- (EduStanfordNlpTaggerMaxentTestSentence *)processWithId:(id<JavaUtilList>)taggedSentence {
  EduStanfordNlpTaggerMaxentTestSentence *testS = new_EduStanfordNlpTaggerMaxentTestSentence_initWithEduStanfordNlpTaggerMaxentMaxentTagger_(maxentTagger_);
  [testS setCorrectTagsWithJavaUtilList:taggedSentence];
  (void) [testS tagSentenceWithJavaUtilList:taggedSentence withBoolean:false];
  return testS;
}

- (id<EduStanfordNlpUtilConcurrentThreadsafeProcessor>)newInstance {
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTaggerMaxentTestSentence;", 0x1, 1, 2, -1, 3, -1, -1 },
    { NULL, "LEduStanfordNlpUtilConcurrentThreadsafeProcessor;", 0x1, -1, -1, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpTaggerMaxentMaxentTagger:);
  methods[1].selector = @selector(processWithId:);
  methods[2].selector = @selector(newInstance);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "maxentTagger_", "LEduStanfordNlpTaggerMaxentMaxentTagger;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpTaggerMaxentMaxentTagger;", "process", "LJavaUtilList;", "(Ljava/util/List<Ledu/stanford/nlp/ling/TaggedWord;>;)Ledu/stanford/nlp/tagger/maxent/TestSentence;", "()Ledu/stanford/nlp/util/concurrent/ThreadsafeProcessor<Ljava/util/List<Ledu/stanford/nlp/ling/TaggedWord;>;Ledu/stanford/nlp/tagger/maxent/TestSentence;>;", "LEduStanfordNlpTaggerMaxentTestClassifier;", "Ljava/lang/Object;Ledu/stanford/nlp/util/concurrent/ThreadsafeProcessor<Ljava/util/List<Ledu/stanford/nlp/ling/TaggedWord;>;Ledu/stanford/nlp/tagger/maxent/TestSentence;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpTaggerMaxentTestClassifier_TestSentenceProcessor = { "TestSentenceProcessor", "edu.stanford.nlp.tagger.maxent", ptrTable, methods, fields, 7, 0x8, 3, 1, 5, -1, -1, 6, -1 };
  return &_EduStanfordNlpTaggerMaxentTestClassifier_TestSentenceProcessor;
}

@end

void EduStanfordNlpTaggerMaxentTestClassifier_TestSentenceProcessor_initWithEduStanfordNlpTaggerMaxentMaxentTagger_(EduStanfordNlpTaggerMaxentTestClassifier_TestSentenceProcessor *self, EduStanfordNlpTaggerMaxentMaxentTagger *maxentTagger) {
  NSObject_init(self);
  self->maxentTagger_ = maxentTagger;
}

EduStanfordNlpTaggerMaxentTestClassifier_TestSentenceProcessor *new_EduStanfordNlpTaggerMaxentTestClassifier_TestSentenceProcessor_initWithEduStanfordNlpTaggerMaxentMaxentTagger_(EduStanfordNlpTaggerMaxentMaxentTagger *maxentTagger) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTaggerMaxentTestClassifier_TestSentenceProcessor, initWithEduStanfordNlpTaggerMaxentMaxentTagger_, maxentTagger)
}

EduStanfordNlpTaggerMaxentTestClassifier_TestSentenceProcessor *create_EduStanfordNlpTaggerMaxentTestClassifier_TestSentenceProcessor_initWithEduStanfordNlpTaggerMaxentMaxentTagger_(EduStanfordNlpTaggerMaxentMaxentTagger *maxentTagger) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTaggerMaxentTestClassifier_TestSentenceProcessor, initWithEduStanfordNlpTaggerMaxentMaxentTagger_, maxentTagger)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTaggerMaxentTestClassifier_TestSentenceProcessor)
