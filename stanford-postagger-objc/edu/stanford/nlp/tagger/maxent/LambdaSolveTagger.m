//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/tagger/maxent/LambdaSolveTagger.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/maxent/Experiments.h"
#include "edu/stanford/nlp/maxent/Feature.h"
#include "edu/stanford/nlp/maxent/Features.h"
#include "edu/stanford/nlp/maxent/Problem.h"
#include "edu/stanford/nlp/maxent/iis/LambdaSolve.h"
#include "edu/stanford/nlp/tagger/maxent/LambdaSolveTagger.h"
#include "edu/stanford/nlp/tagger/maxent/TaggerFeature.h"
#include "java/io/DataInputStream.h"
#include "java/io/PrintStream.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/text/NumberFormat.h"

static void (*EduStanfordNlpTaggerMaxentLambdaSolveTagger_super$_setBinary)(id, SEL);

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpTaggerMaxentLambdaSolveTagger)

@implementation EduStanfordNlpTaggerMaxentLambdaSolveTagger

- (instancetype)initWithEduStanfordNlpMaxentProblem:(EduStanfordNlpMaxentProblem *)p1
                                         withDouble:(jdouble)eps1
                                     withByteArray2:(IOSObjectArray *)fnumArr {
  EduStanfordNlpTaggerMaxentLambdaSolveTagger_initWithEduStanfordNlpMaxentProblem_withDouble_withByteArray2_(self, p1, eps1, fnumArr);
  return self;
}

- (instancetype)initWithJavaIoDataInputStream:(JavaIoDataInputStream *)dataStream {
  EduStanfordNlpTaggerMaxentLambdaSolveTagger_initWithJavaIoDataInputStream_(self, dataStream);
  return self;
}

- (instancetype)initWithDoubleArray:(IOSDoubleArray *)lambda {
  EduStanfordNlpTaggerMaxentLambdaSolveTagger_initWithDoubleArray_(self, lambda);
  return self;
}

- (void)initCondsZlambdaEtc {
  for (jint x = 0; x < ((EduStanfordNlpMaxentExperiments *) nil_chk(((EduStanfordNlpMaxentProblem *) nil_chk(p_))->data_))->xSize_; x++) {
    for (jint y = 0; y < p_->data_->ySize_; y++) {
      *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(probConds_), x)), y) = 1.0 / p_->data_->ySize_;
    }
  }
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@" pcond initialized "];
  for (jint x = 0; x < ((EduStanfordNlpMaxentExperiments *) nil_chk(((EduStanfordNlpMaxentProblem *) nil_chk(p_))->data_))->xSize_; x++) {
    *IOSDoubleArray_GetRef(nil_chk(zlambda_), x) = p_->data_->ySize_;
  }
  [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:@" zlambda initialized "];
  for (jint i = 0; i < ((EduStanfordNlpMaxentProblem *) nil_chk(p_))->fSize_; i++) {
    *IOSDoubleArray_GetRef(nil_chk(ftildeArr_), i) = [((EduStanfordNlpMaxentFeature *) nil_chk([((EduStanfordNlpMaxentFeatures *) nil_chk(p_->functions_)) getWithInt:i])) ftilde];
    if (IOSDoubleArray_Get(nil_chk(ftildeArr_), i) == 0) {
      [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:JreStrcat("$I", @" Empirical expectation 0 for feature ", i)];
    }
  }
  [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:@" ftildeArr initialized "];
}

- (jdouble)gWithDouble:(jdouble)lambdaP
               withInt:(jint)index {
  jdouble s = 0.0;
  for (jint i = 0; i < [((EduStanfordNlpMaxentFeature *) nil_chk([((EduStanfordNlpMaxentFeatures *) nil_chk(((EduStanfordNlpMaxentProblem *) nil_chk(p_))->functions_)) getWithInt:index])) len]; i++) {
    jint y = [((EduStanfordNlpTaggerMaxentTaggerFeature *) nil_chk(((EduStanfordNlpTaggerMaxentTaggerFeature *) cast_chk([((EduStanfordNlpMaxentFeatures *) nil_chk(((EduStanfordNlpMaxentProblem *) nil_chk(p_))->functions_)) getWithInt:index], [EduStanfordNlpTaggerMaxentTaggerFeature class])))) getYTag];
    jint x = [((EduStanfordNlpMaxentFeature *) nil_chk(([((EduStanfordNlpMaxentFeatures *) nil_chk(((EduStanfordNlpMaxentProblem *) nil_chk(p_))->functions_)) getWithInt:index]))) getXWithInt:i];
    s = s + [((EduStanfordNlpMaxentExperiments *) nil_chk(((EduStanfordNlpMaxentProblem *) nil_chk(p_))->data_)) ptildeXWithInt:x] * [self pcondWithInt:y withInt:x] * 1 * JavaLangMath_expWithDouble_(lambdaP * [self fnumWithInt:x withInt:y]);
  }
  s = s - IOSDoubleArray_Get(nil_chk(ftildeArr_), index);
  return s;
}

- (jdouble)fExpectedWithEduStanfordNlpMaxentFeature:(EduStanfordNlpMaxentFeature *)f {
  EduStanfordNlpTaggerMaxentTaggerFeature *tF = (EduStanfordNlpTaggerMaxentTaggerFeature *) cast_chk(f, [EduStanfordNlpTaggerMaxentTaggerFeature class]);
  jdouble s = 0.0;
  jint y = [((EduStanfordNlpTaggerMaxentTaggerFeature *) nil_chk(tF)) getYTag];
  for (jint i = 0; i < [((EduStanfordNlpMaxentFeature *) nil_chk(f)) len]; i++) {
    jint x = [tF getXWithInt:i];
    s = s + [((EduStanfordNlpMaxentExperiments *) nil_chk(((EduStanfordNlpMaxentProblem *) nil_chk(p_))->data_)) ptildeXWithInt:x] * [self pcondWithInt:y withInt:x];
  }
  return s;
}

- (jboolean)checkCorrectness {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$I$I", @"Checking model correctness; x size ", ((EduStanfordNlpMaxentExperiments *) nil_chk(((EduStanfordNlpMaxentProblem *) nil_chk(p_))->data_))->xSize_, @" , ysize ", p_->data_->ySize_)];
  JavaTextNumberFormat *nf = JavaTextNumberFormat_getNumberInstance();
  [((JavaTextNumberFormat *) nil_chk(nf)) setMaximumFractionDigitsWithInt:4];
  jboolean flag = true;
  for (jint f = 0; f < ((IOSDoubleArray *) nil_chk(lambda_))->size_; f++) {
    if (JavaLangMath_absWithDouble_(IOSDoubleArray_Get(lambda_, f)) > 100) {
      [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:JreStrcat("$D", @" Lambda too big ", IOSDoubleArray_Get(nil_chk(lambda_), f))];
      [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:JreStrcat("$D$D", @" empirical ", IOSDoubleArray_Get(nil_chk(ftildeArr_), f), @" expected ", [self fExpectedWithEduStanfordNlpMaxentFeature:[((EduStanfordNlpMaxentFeatures *) nil_chk(((EduStanfordNlpMaxentProblem *) nil_chk(p_))->functions_)) getWithInt:f]])];
    }
  }
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(ftildeArr_))->size_; i++) {
    jdouble exp = JavaLangMath_absWithDouble_(IOSDoubleArray_Get(ftildeArr_, i) - [self fExpectedWithEduStanfordNlpMaxentFeature:[((EduStanfordNlpMaxentFeatures *) nil_chk(((EduStanfordNlpMaxentProblem *) nil_chk(p_))->functions_)) getWithInt:i]]);
    if (exp > 0.001) {
      flag = false;
      [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:JreStrcat("$I$$$$$$$$", @"Constraint ", i, @" not satisfied emp ", [nf formatWithDouble:IOSDoubleArray_Get(nil_chk(ftildeArr_), i)], @" exp ", [nf formatWithDouble:[self fExpectedWithEduStanfordNlpMaxentFeature:[((EduStanfordNlpMaxentFeatures *) nil_chk(((EduStanfordNlpMaxentProblem *) nil_chk(p_))->functions_)) getWithInt:i]]], @" diff ", [nf formatWithDouble:exp], @" lambda ", [nf formatWithDouble:IOSDoubleArray_Get(nil_chk(lambda_), i)])];
    }
  }
  for (jint x = 0; x < ((EduStanfordNlpMaxentExperiments *) nil_chk(((EduStanfordNlpMaxentProblem *) nil_chk(p_))->data_))->xSize_; x++) {
    jdouble s = 0.0;
    for (jint y = 0; y < p_->data_->ySize_; y++) {
      s = s + IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(probConds_), x)), y);
    }
    if (JavaLangMath_absWithDouble_(s - 1) > 0.0001) {
      for (jint y = 0; y < ((EduStanfordNlpMaxentExperiments *) nil_chk(((EduStanfordNlpMaxentProblem *) nil_chk(p_))->data_))->ySize_; y++) {
        [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:JreStrcat("I$D", y, @" : ", IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(probConds_), x)), y))];
      }
      [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:JreStrcat("$ICF", @"probabilities do not sum to one ", x, ' ', (jfloat) s)];
    }
  }
  return flag;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x0, 3, 4, -1, -1, -1, -1 },
    { NULL, "D", 0x0, 5, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpMaxentProblem:withDouble:withByteArray2:);
  methods[1].selector = @selector(initWithJavaIoDataInputStream:);
  methods[2].selector = @selector(initWithDoubleArray:);
  methods[3].selector = @selector(initCondsZlambdaEtc);
  methods[4].selector = @selector(gWithDouble:withInt:);
  methods[5].selector = @selector(fExpectedWithEduStanfordNlpMaxentFeature:);
  methods[6].selector = @selector(checkCorrectness);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LEduStanfordNlpMaxentProblem;D[[B", "LJavaIoDataInputStream;", "[D", "g", "DI", "fExpected", "LEduStanfordNlpMaxentFeature;" };
  static const J2ObjcClassInfo _EduStanfordNlpTaggerMaxentLambdaSolveTagger = { "LambdaSolveTagger", "edu.stanford.nlp.tagger.maxent", ptrTable, methods, NULL, 7, 0x1, 7, 0, -1, -1, -1, -1, -1 };
  return &_EduStanfordNlpTaggerMaxentLambdaSolveTagger;
}

+ (void)initialize {
  if (self == [EduStanfordNlpTaggerMaxentLambdaSolveTagger class]) {
    EduStanfordNlpTaggerMaxentLambdaSolveTagger_super$_setBinary = (void (*)(id, SEL))[EduStanfordNlpMaxentIisLambdaSolve instanceMethodForSelector:@selector(setBinary)];
    J2OBJC_SET_INITIALIZED(EduStanfordNlpTaggerMaxentLambdaSolveTagger)
  }
}

@end

void EduStanfordNlpTaggerMaxentLambdaSolveTagger_initWithEduStanfordNlpMaxentProblem_withDouble_withByteArray2_(EduStanfordNlpTaggerMaxentLambdaSolveTagger *self, EduStanfordNlpMaxentProblem *p1, jdouble eps1, IOSObjectArray *fnumArr) {
  EduStanfordNlpMaxentIisLambdaSolve_init(self);
  self->p_ = p1;
  self->eps_ = eps1;
  self->lambda_ = [IOSDoubleArray newArrayWithLength:((EduStanfordNlpMaxentProblem *) nil_chk(p1))->fSize_];
  self->probConds_ = [IOSDoubleArray newArrayWithDimensions:2 lengths:(jint[]){ ((EduStanfordNlpMaxentExperiments *) nil_chk(p1->data_))->xSize_, p1->data_->ySize_ }];
  self->fnumArr_ = fnumArr;
  self->zlambda_ = [IOSDoubleArray newArrayWithLength:p1->data_->xSize_];
  self->ftildeArr_ = [IOSDoubleArray newArrayWithLength:((EduStanfordNlpMaxentProblem *) nil_chk(self->p_))->fSize_];
  [self initCondsZlambdaEtc];
  EduStanfordNlpTaggerMaxentLambdaSolveTagger_super$_setBinary(self, @selector(setBinary));
}

EduStanfordNlpTaggerMaxentLambdaSolveTagger *new_EduStanfordNlpTaggerMaxentLambdaSolveTagger_initWithEduStanfordNlpMaxentProblem_withDouble_withByteArray2_(EduStanfordNlpMaxentProblem *p1, jdouble eps1, IOSObjectArray *fnumArr) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTaggerMaxentLambdaSolveTagger, initWithEduStanfordNlpMaxentProblem_withDouble_withByteArray2_, p1, eps1, fnumArr)
}

EduStanfordNlpTaggerMaxentLambdaSolveTagger *create_EduStanfordNlpTaggerMaxentLambdaSolveTagger_initWithEduStanfordNlpMaxentProblem_withDouble_withByteArray2_(EduStanfordNlpMaxentProblem *p1, jdouble eps1, IOSObjectArray *fnumArr) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTaggerMaxentLambdaSolveTagger, initWithEduStanfordNlpMaxentProblem_withDouble_withByteArray2_, p1, eps1, fnumArr)
}

void EduStanfordNlpTaggerMaxentLambdaSolveTagger_initWithJavaIoDataInputStream_(EduStanfordNlpTaggerMaxentLambdaSolveTagger *self, JavaIoDataInputStream *dataStream) {
  EduStanfordNlpMaxentIisLambdaSolve_init(self);
  self->lambda_ = EduStanfordNlpMaxentIisLambdaSolve_read_lambdasWithJavaIoDataInputStream_(dataStream);
  EduStanfordNlpTaggerMaxentLambdaSolveTagger_super$_setBinary(self, @selector(setBinary));
}

EduStanfordNlpTaggerMaxentLambdaSolveTagger *new_EduStanfordNlpTaggerMaxentLambdaSolveTagger_initWithJavaIoDataInputStream_(JavaIoDataInputStream *dataStream) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTaggerMaxentLambdaSolveTagger, initWithJavaIoDataInputStream_, dataStream)
}

EduStanfordNlpTaggerMaxentLambdaSolveTagger *create_EduStanfordNlpTaggerMaxentLambdaSolveTagger_initWithJavaIoDataInputStream_(JavaIoDataInputStream *dataStream) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTaggerMaxentLambdaSolveTagger, initWithJavaIoDataInputStream_, dataStream)
}

void EduStanfordNlpTaggerMaxentLambdaSolveTagger_initWithDoubleArray_(EduStanfordNlpTaggerMaxentLambdaSolveTagger *self, IOSDoubleArray *lambda) {
  EduStanfordNlpMaxentIisLambdaSolve_init(self);
  self->lambda_ = lambda;
  EduStanfordNlpTaggerMaxentLambdaSolveTagger_super$_setBinary(self, @selector(setBinary));
}

EduStanfordNlpTaggerMaxentLambdaSolveTagger *new_EduStanfordNlpTaggerMaxentLambdaSolveTagger_initWithDoubleArray_(IOSDoubleArray *lambda) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTaggerMaxentLambdaSolveTagger, initWithDoubleArray_, lambda)
}

EduStanfordNlpTaggerMaxentLambdaSolveTagger *create_EduStanfordNlpTaggerMaxentLambdaSolveTagger_initWithDoubleArray_(IOSDoubleArray *lambda) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTaggerMaxentLambdaSolveTagger, initWithDoubleArray_, lambda)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTaggerMaxentLambdaSolveTagger)
