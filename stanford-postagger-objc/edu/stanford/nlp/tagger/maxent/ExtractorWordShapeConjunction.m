//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/tagger/maxent/ExtractorWordShapeConjunction.java
//

#include "J2ObjC_source.h"
#include "edu/stanford/nlp/process/WordShapeClassifier.h"
#include "edu/stanford/nlp/tagger/maxent/Extractor.h"
#include "edu/stanford/nlp/tagger/maxent/ExtractorWordShapeConjunction.h"
#include "edu/stanford/nlp/tagger/maxent/History.h"
#include "edu/stanford/nlp/tagger/maxent/PairsHolder.h"
#include "java/lang/StringBuilder.h"

@interface EduStanfordNlpTaggerMaxentExtractorWordShapeConjunction () {
 @public
  jint wordShaper_;
  jint left_;
  jint right_;
  NSString *name_;
}

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpTaggerMaxentExtractorWordShapeConjunction, name_, NSString *)

inline jlong EduStanfordNlpTaggerMaxentExtractorWordShapeConjunction_get_serialVersionUID();
#define EduStanfordNlpTaggerMaxentExtractorWordShapeConjunction_serialVersionUID -49LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpTaggerMaxentExtractorWordShapeConjunction, serialVersionUID, jlong)

@implementation EduStanfordNlpTaggerMaxentExtractorWordShapeConjunction

- (instancetype)initWithInt:(jint)left
                    withInt:(jint)right
               withNSString:(NSString *)wsc {
  EduStanfordNlpTaggerMaxentExtractorWordShapeConjunction_initWithInt_withInt_withNSString_(self, left, right, wsc);
  return self;
}

- (NSString *)extractWithEduStanfordNlpTaggerMaxentHistory:(EduStanfordNlpTaggerMaxentHistory *)h
                 withEduStanfordNlpTaggerMaxentPairsHolder:(EduStanfordNlpTaggerMaxentPairsHolder *)pH {
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  for (jint j = left_; j <= right_; j++) {
    NSString *s = [((EduStanfordNlpTaggerMaxentPairsHolder *) nil_chk(pH)) getWordWithEduStanfordNlpTaggerMaxentHistory:h withInt:j];
    (void) [sb appendWithNSString:EduStanfordNlpProcessWordShapeClassifier_wordShapeWithNSString_withInt_(s, wordShaper_)];
    if (j < right_) {
      (void) [sb appendWithChar:'|'];
    }
  }
  return [sb description];
}

- (NSString *)description {
  return name_;
}

- (jboolean)isLocal {
  return false;
}

- (jboolean)isDynamic {
  return false;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:withInt:withNSString:);
  methods[1].selector = @selector(extractWithEduStanfordNlpTaggerMaxentHistory:withEduStanfordNlpTaggerMaxentPairsHolder:);
  methods[2].selector = @selector(description);
  methods[3].selector = @selector(isLocal);
  methods[4].selector = @selector(isDynamic);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpTaggerMaxentExtractorWordShapeConjunction_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "wordShaper_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "left_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "right_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "name_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "IILNSString;", "extract", "LEduStanfordNlpTaggerMaxentHistory;LEduStanfordNlpTaggerMaxentPairsHolder;", "toString" };
  static const J2ObjcClassInfo _EduStanfordNlpTaggerMaxentExtractorWordShapeConjunction = { "ExtractorWordShapeConjunction", "edu.stanford.nlp.tagger.maxent", ptrTable, methods, fields, 7, 0x0, 5, 5, -1, -1, -1, -1, -1 };
  return &_EduStanfordNlpTaggerMaxentExtractorWordShapeConjunction;
}

@end

void EduStanfordNlpTaggerMaxentExtractorWordShapeConjunction_initWithInt_withInt_withNSString_(EduStanfordNlpTaggerMaxentExtractorWordShapeConjunction *self, jint left, jint right, NSString *wsc) {
  EduStanfordNlpTaggerMaxentExtractor_init(self);
  self->left_ = left;
  self->right_ = right;
  self->wordShaper_ = EduStanfordNlpProcessWordShapeClassifier_lookupShaperWithNSString_(wsc);
  self->name_ = JreStrcat("$ICIC$C", @"ExtractorWordShapeConjunction(", left, ',', right, ',', wsc, ')');
}

EduStanfordNlpTaggerMaxentExtractorWordShapeConjunction *new_EduStanfordNlpTaggerMaxentExtractorWordShapeConjunction_initWithInt_withInt_withNSString_(jint left, jint right, NSString *wsc) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTaggerMaxentExtractorWordShapeConjunction, initWithInt_withInt_withNSString_, left, right, wsc)
}

EduStanfordNlpTaggerMaxentExtractorWordShapeConjunction *create_EduStanfordNlpTaggerMaxentExtractorWordShapeConjunction_initWithInt_withInt_withNSString_(jint left, jint right, NSString *wsc) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTaggerMaxentExtractorWordShapeConjunction, initWithInt_withInt_withNSString_, left, right, wsc)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTaggerMaxentExtractorWordShapeConjunction)
