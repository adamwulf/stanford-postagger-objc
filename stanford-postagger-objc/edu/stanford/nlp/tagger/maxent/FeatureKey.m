//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/tagger/maxent/FeatureKey.java
//

#include "J2ObjC_source.h"
#include "edu/stanford/nlp/tagger/maxent/FeatureKey.h"
#include "java/io/DataInputStream.h"
#include "java/io/DataOutputStream.h"
#include "java/lang/Integer.h"

@interface EduStanfordNlpTaggerMaxentFeatureKey () {
 @public
  jint hashCode_;
}

@end

@implementation EduStanfordNlpTaggerMaxentFeatureKey

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpTaggerMaxentFeatureKey_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithInt:(jint)num
               withNSString:(NSString *)val
               withNSString:(NSString *)tag {
  EduStanfordNlpTaggerMaxentFeatureKey_initWithInt_withNSString_withNSString_(self, num, val, tag);
  return self;
}

- (NSString *)description {
  return JreStrcat("$C$C$", JavaLangInteger_toStringWithInt_(num_), ' ', val_, ' ', tag_);
}

- (void)saveWithJavaIoDataOutputStream:(JavaIoDataOutputStream *)f {
  [((JavaIoDataOutputStream *) nil_chk(f)) writeIntWithInt:num_];
  [f writeUTFWithNSString:val_];
  [f writeUTFWithNSString:tag_];
}

- (void)readWithJavaIoDataInputStream:(JavaIoDataInputStream *)inf {
  num_ = [((JavaIoDataInputStream *) nil_chk(inf)) readInt];
  val_ = [inf readUTF];
  tag_ = [inf readUTF];
  hashCode_ = 0;
}

- (NSUInteger)hash {
  if (hashCode_ == 0) {
    jint hNum = JavaLangInteger_rotateLeftWithInt_withInt_(num_, 16);
    jint hVal = JavaLangInteger_rotateLeftWithInt_withInt_(((jint) [((NSString *) nil_chk(val_)) hash]), 5);
    hashCode_ = hNum ^ hVal ^ ((jint) [((NSString *) nil_chk(tag_)) hash]);
  }
  return hashCode_;
}

- (jboolean)isEqual:(id)o {
  JreAssert((([o isKindOfClass:[EduStanfordNlpTaggerMaxentFeatureKey class]])), (@"edu/stanford/nlp/tagger/maxent/FeatureKey.java:101 condition failed: assert(o instanceof FeatureKey);"));
  EduStanfordNlpTaggerMaxentFeatureKey *f1 = (EduStanfordNlpTaggerMaxentFeatureKey *) cast_chk(o, [EduStanfordNlpTaggerMaxentFeatureKey class]);
  return (num_ == ((EduStanfordNlpTaggerMaxentFeatureKey *) nil_chk(f1))->num_) && ([((NSString *) nil_chk(tag_)) isEqual:f1->tag_]) && ([((NSString *) nil_chk(val_)) isEqual:f1->val_]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, 4, -1, -1, -1 },
    { NULL, "V", 0x4, 5, 6, 4, -1, -1, -1 },
    { NULL, "I", 0x1, 7, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 8, 9, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithInt:withNSString:withNSString:);
  methods[2].selector = @selector(description);
  methods[3].selector = @selector(saveWithJavaIoDataOutputStream:);
  methods[4].selector = @selector(readWithJavaIoDataInputStream:);
  methods[5].selector = @selector(hash);
  methods[6].selector = @selector(isEqual:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "num_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "val_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "tag_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "hashCode_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ILNSString;LNSString;", "toString", "save", "LJavaIoDataOutputStream;", "LJavaIoIOException;", "read", "LJavaIoDataInputStream;", "hashCode", "equals", "LNSObject;" };
  static const J2ObjcClassInfo _EduStanfordNlpTaggerMaxentFeatureKey = { "FeatureKey", "edu.stanford.nlp.tagger.maxent", ptrTable, methods, fields, 7, 0x1, 7, 4, -1, -1, -1, -1, -1 };
  return &_EduStanfordNlpTaggerMaxentFeatureKey;
}

@end

void EduStanfordNlpTaggerMaxentFeatureKey_init(EduStanfordNlpTaggerMaxentFeatureKey *self) {
  NSObject_init(self);
  self->hashCode_ = 0;
}

EduStanfordNlpTaggerMaxentFeatureKey *new_EduStanfordNlpTaggerMaxentFeatureKey_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpTaggerMaxentFeatureKey, init)
}

EduStanfordNlpTaggerMaxentFeatureKey *create_EduStanfordNlpTaggerMaxentFeatureKey_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTaggerMaxentFeatureKey, init)
}

void EduStanfordNlpTaggerMaxentFeatureKey_initWithInt_withNSString_withNSString_(EduStanfordNlpTaggerMaxentFeatureKey *self, jint num, NSString *val, NSString *tag) {
  NSObject_init(self);
  self->hashCode_ = 0;
  self->num_ = num;
  self->val_ = val;
  self->tag_ = tag;
}

EduStanfordNlpTaggerMaxentFeatureKey *new_EduStanfordNlpTaggerMaxentFeatureKey_initWithInt_withNSString_withNSString_(jint num, NSString *val, NSString *tag) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTaggerMaxentFeatureKey, initWithInt_withNSString_withNSString_, num, val, tag)
}

EduStanfordNlpTaggerMaxentFeatureKey *create_EduStanfordNlpTaggerMaxentFeatureKey_initWithInt_withNSString_withNSString_(jint num, NSString *val, NSString *tag) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTaggerMaxentFeatureKey, initWithInt_withNSString_withNSString_, num, val, tag)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTaggerMaxentFeatureKey)
