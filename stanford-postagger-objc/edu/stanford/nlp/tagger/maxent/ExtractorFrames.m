//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/tagger/maxent/ExtractorFrames.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/tagger/maxent/Extractor.h"
#include "edu/stanford/nlp/tagger/maxent/ExtractorFrames.h"
#include "edu/stanford/nlp/tagger/maxent/ExtractorVerbalVBNZero.h"
#include "edu/stanford/nlp/tagger/maxent/ExtractorWordShapeClassifier.h"
#include "edu/stanford/nlp/tagger/maxent/ExtractorWordShapeConjunction.h"
#include "edu/stanford/nlp/tagger/maxent/History.h"
#include "edu/stanford/nlp/tagger/maxent/PairsHolder.h"
#include "edu/stanford/nlp/util/StringUtils.h"
#include "java/io/PrintStream.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"
#include "java/util/Locale.h"

@interface EduStanfordNlpTaggerMaxentExtractorFrames ()

- (instancetype)init;

@end

inline EduStanfordNlpTaggerMaxentExtractor *EduStanfordNlpTaggerMaxentExtractorFrames_get_prevTag();
static EduStanfordNlpTaggerMaxentExtractor *EduStanfordNlpTaggerMaxentExtractorFrames_prevTag;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpTaggerMaxentExtractorFrames, prevTag, EduStanfordNlpTaggerMaxentExtractor *)

inline EduStanfordNlpTaggerMaxentExtractor *EduStanfordNlpTaggerMaxentExtractorFrames_get_prevTagWord();
static EduStanfordNlpTaggerMaxentExtractor *EduStanfordNlpTaggerMaxentExtractorFrames_prevTagWord;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpTaggerMaxentExtractorFrames, prevTagWord, EduStanfordNlpTaggerMaxentExtractor *)

inline EduStanfordNlpTaggerMaxentExtractor *EduStanfordNlpTaggerMaxentExtractorFrames_get_prevWord2();
static EduStanfordNlpTaggerMaxentExtractor *EduStanfordNlpTaggerMaxentExtractorFrames_prevWord2;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpTaggerMaxentExtractorFrames, prevWord2, EduStanfordNlpTaggerMaxentExtractor *)

inline EduStanfordNlpTaggerMaxentExtractor *EduStanfordNlpTaggerMaxentExtractorFrames_get_prevTwoTag();
static EduStanfordNlpTaggerMaxentExtractor *EduStanfordNlpTaggerMaxentExtractorFrames_prevTwoTag;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpTaggerMaxentExtractorFrames, prevTwoTag, EduStanfordNlpTaggerMaxentExtractor *)

inline EduStanfordNlpTaggerMaxentExtractor *EduStanfordNlpTaggerMaxentExtractorFrames_get_nextWord();
static EduStanfordNlpTaggerMaxentExtractor *EduStanfordNlpTaggerMaxentExtractorFrames_nextWord;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpTaggerMaxentExtractorFrames, nextWord, EduStanfordNlpTaggerMaxentExtractor *)

inline EduStanfordNlpTaggerMaxentExtractor *EduStanfordNlpTaggerMaxentExtractorFrames_get_nextWord2();
static EduStanfordNlpTaggerMaxentExtractor *EduStanfordNlpTaggerMaxentExtractorFrames_nextWord2;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpTaggerMaxentExtractorFrames, nextWord2, EduStanfordNlpTaggerMaxentExtractor *)

inline EduStanfordNlpTaggerMaxentExtractor *EduStanfordNlpTaggerMaxentExtractorFrames_get_nextTag();
static EduStanfordNlpTaggerMaxentExtractor *EduStanfordNlpTaggerMaxentExtractorFrames_nextTag;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpTaggerMaxentExtractorFrames, nextTag, EduStanfordNlpTaggerMaxentExtractor *)

inline IOSObjectArray *EduStanfordNlpTaggerMaxentExtractorFrames_get_eFrames_sighan2005();
static IOSObjectArray *EduStanfordNlpTaggerMaxentExtractorFrames_eFrames_sighan2005;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpTaggerMaxentExtractorFrames, eFrames_sighan2005, IOSObjectArray *)

inline IOSObjectArray *EduStanfordNlpTaggerMaxentExtractorFrames_get_eFrames_german();
static IOSObjectArray *EduStanfordNlpTaggerMaxentExtractorFrames_eFrames_german;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpTaggerMaxentExtractorFrames, eFrames_german, IOSObjectArray *)

__attribute__((unused)) static void EduStanfordNlpTaggerMaxentExtractorFrames_init(EduStanfordNlpTaggerMaxentExtractorFrames *self);

__attribute__((unused)) static EduStanfordNlpTaggerMaxentExtractorFrames *new_EduStanfordNlpTaggerMaxentExtractorFrames_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpTaggerMaxentExtractorFrames *create_EduStanfordNlpTaggerMaxentExtractorFrames_init();

@interface EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorWordTag () {
 @public
  jint wordPosition_;
}

@end

inline jlong EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorWordTag_get_serialVersionUID();
#define EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorWordTag_serialVersionUID 3LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorWordTag, serialVersionUID, jlong)

inline jlong EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorWordLowerCase_get_serialVersionUID();
#define EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorWordLowerCase_serialVersionUID -7847524200422095441LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorWordLowerCase, serialVersionUID, jlong)

inline jlong EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorCWordCapCase_get_serialVersionUID();
#define EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorCWordCapCase_serialVersionUID -2393096135964969744LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorCWordCapCase, serialVersionUID, jlong)

@interface EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorTwoWords () {
 @public
  jint leftPosition_;
  jint rightPosition_;
}

@end

inline jlong EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorTwoWords_get_serialVersionUID();
#define EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorTwoWords_serialVersionUID -1034112287022504917LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorTwoWords, serialVersionUID, jlong)

@interface EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorTwoTags () {
 @public
  jint leftPosition_;
  jint rightPosition_;
  jint leftContext_, rightContext_;
}

@end

inline jlong EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorTwoTags_get_serialVersionUID();
#define EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorTwoTags_serialVersionUID -7342144764725605134LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorTwoTags, serialVersionUID, jlong)

@interface EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorTwoWordsTag () {
 @public
  jint leftWord_, rightWord_, tag_;
  jint rightContext_, leftContext_;
}

@end

inline jlong EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorTwoWordsTag_get_serialVersionUID();
#define EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorTwoWordsTag_serialVersionUID 277004119652781188LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorTwoWordsTag, serialVersionUID, jlong)

inline jlong EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorContinuousTagConjunction_get_serialVersionUID();
#define EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorContinuousTagConjunction_serialVersionUID 3LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorContinuousTagConjunction, serialVersionUID, jlong)

@interface EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorThreeTags () {
 @public
  jint position1_;
  jint position2_;
  jint position3_;
}

@end

inline jlong EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorThreeTags_get_serialVersionUID();
#define EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorThreeTags_serialVersionUID 8563584394721620568LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorThreeTags, serialVersionUID, jlong)

@interface EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorWordTwoTags () {
 @public
  jint position1_;
  jint position2_;
  jint word_;
}

@end

inline jlong EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorWordTwoTags_get_serialVersionUID();
#define EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorWordTwoTags_serialVersionUID -4942654091455804176LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorWordTwoTags, serialVersionUID, jlong)

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpTaggerMaxentExtractorFrames)

EduStanfordNlpTaggerMaxentExtractor *EduStanfordNlpTaggerMaxentExtractorFrames_cWord;
EduStanfordNlpTaggerMaxentExtractor *EduStanfordNlpTaggerMaxentExtractorFrames_prevWord;

@implementation EduStanfordNlpTaggerMaxentExtractorFrames

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpTaggerMaxentExtractorFrames_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (IOSObjectArray *)getExtractorFramesWithNSString:(NSString *)arch {
  return EduStanfordNlpTaggerMaxentExtractorFrames_getExtractorFramesWithNSString_(arch);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LEduStanfordNlpTaggerMaxentExtractor;", 0xc, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getExtractorFramesWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "cWord", "LEduStanfordNlpTaggerMaxentExtractor;", .constantValue.asLong = 0, 0x18, -1, 2, -1, -1 },
    { "prevWord", "LEduStanfordNlpTaggerMaxentExtractor;", .constantValue.asLong = 0, 0x18, -1, 3, -1, -1 },
    { "prevTag", "LEduStanfordNlpTaggerMaxentExtractor;", .constantValue.asLong = 0, 0x1a, -1, 4, -1, -1 },
    { "prevTagWord", "LEduStanfordNlpTaggerMaxentExtractor;", .constantValue.asLong = 0, 0x1a, -1, 5, -1, -1 },
    { "prevWord2", "LEduStanfordNlpTaggerMaxentExtractor;", .constantValue.asLong = 0, 0x1a, -1, 6, -1, -1 },
    { "prevTwoTag", "LEduStanfordNlpTaggerMaxentExtractor;", .constantValue.asLong = 0, 0x1a, -1, 7, -1, -1 },
    { "nextWord", "LEduStanfordNlpTaggerMaxentExtractor;", .constantValue.asLong = 0, 0x1a, -1, 8, -1, -1 },
    { "nextWord2", "LEduStanfordNlpTaggerMaxentExtractor;", .constantValue.asLong = 0, 0x1a, -1, 9, -1, -1 },
    { "nextTag", "LEduStanfordNlpTaggerMaxentExtractor;", .constantValue.asLong = 0, 0x1a, -1, 10, -1, -1 },
    { "eFrames_sighan2005", "[LEduStanfordNlpTaggerMaxentExtractor;", .constantValue.asLong = 0, 0x1a, -1, 11, -1, -1 },
    { "eFrames_german", "[LEduStanfordNlpTaggerMaxentExtractor;", .constantValue.asLong = 0, 0x1a, -1, 12, -1, -1 },
  };
  static const void *ptrTable[] = { "getExtractorFrames", "LNSString;", &EduStanfordNlpTaggerMaxentExtractorFrames_cWord, &EduStanfordNlpTaggerMaxentExtractorFrames_prevWord, &EduStanfordNlpTaggerMaxentExtractorFrames_prevTag, &EduStanfordNlpTaggerMaxentExtractorFrames_prevTagWord, &EduStanfordNlpTaggerMaxentExtractorFrames_prevWord2, &EduStanfordNlpTaggerMaxentExtractorFrames_prevTwoTag, &EduStanfordNlpTaggerMaxentExtractorFrames_nextWord, &EduStanfordNlpTaggerMaxentExtractorFrames_nextWord2, &EduStanfordNlpTaggerMaxentExtractorFrames_nextTag, &EduStanfordNlpTaggerMaxentExtractorFrames_eFrames_sighan2005, &EduStanfordNlpTaggerMaxentExtractorFrames_eFrames_german, "LEduStanfordNlpTaggerMaxentExtractorFrames_ExtractorWordTag;LEduStanfordNlpTaggerMaxentExtractorFrames_ExtractorWordLowerCase;LEduStanfordNlpTaggerMaxentExtractorFrames_ExtractorCWordCapCase;LEduStanfordNlpTaggerMaxentExtractorFrames_ExtractorTwoWords;LEduStanfordNlpTaggerMaxentExtractorFrames_ExtractorTwoTags;LEduStanfordNlpTaggerMaxentExtractorFrames_ExtractorTwoWordsTag;LEduStanfordNlpTaggerMaxentExtractorFrames_ExtractorContinuousTagConjunction;LEduStanfordNlpTaggerMaxentExtractorFrames_ExtractorThreeTags;LEduStanfordNlpTaggerMaxentExtractorFrames_ExtractorWordTwoTags;" };
  static const J2ObjcClassInfo _EduStanfordNlpTaggerMaxentExtractorFrames = { "ExtractorFrames", "edu.stanford.nlp.tagger.maxent", ptrTable, methods, fields, 7, 0x1, 2, 11, -1, 13, -1, -1, -1 };
  return &_EduStanfordNlpTaggerMaxentExtractorFrames;
}

+ (void)initialize {
  if (self == [EduStanfordNlpTaggerMaxentExtractorFrames class]) {
    EduStanfordNlpTaggerMaxentExtractorFrames_cWord = new_EduStanfordNlpTaggerMaxentExtractor_initWithInt_withBoolean_(0, false);
    EduStanfordNlpTaggerMaxentExtractorFrames_prevWord = new_EduStanfordNlpTaggerMaxentExtractor_initWithInt_withBoolean_(-1, false);
    EduStanfordNlpTaggerMaxentExtractorFrames_prevTag = new_EduStanfordNlpTaggerMaxentExtractor_initWithInt_withBoolean_(-1, true);
    EduStanfordNlpTaggerMaxentExtractorFrames_prevTagWord = new_EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorWordTag_initWithInt_withInt_(0, -1);
    EduStanfordNlpTaggerMaxentExtractorFrames_prevWord2 = new_EduStanfordNlpTaggerMaxentExtractor_initWithInt_withBoolean_(-2, false);
    EduStanfordNlpTaggerMaxentExtractorFrames_prevTwoTag = new_EduStanfordNlpTaggerMaxentExtractor_initWithInt_withBoolean_(-2, true);
    EduStanfordNlpTaggerMaxentExtractorFrames_nextWord = new_EduStanfordNlpTaggerMaxentExtractor_initWithInt_withBoolean_(1, false);
    EduStanfordNlpTaggerMaxentExtractorFrames_nextWord2 = new_EduStanfordNlpTaggerMaxentExtractor_initWithInt_withBoolean_(2, false);
    EduStanfordNlpTaggerMaxentExtractorFrames_nextTag = new_EduStanfordNlpTaggerMaxentExtractor_initWithInt_withBoolean_(1, true);
    EduStanfordNlpTaggerMaxentExtractorFrames_eFrames_sighan2005 = [IOSObjectArray newArrayWithObjects:(id[]){ EduStanfordNlpTaggerMaxentExtractorFrames_cWord, EduStanfordNlpTaggerMaxentExtractorFrames_prevWord, EduStanfordNlpTaggerMaxentExtractorFrames_prevWord2, EduStanfordNlpTaggerMaxentExtractorFrames_nextWord, EduStanfordNlpTaggerMaxentExtractorFrames_nextWord2, EduStanfordNlpTaggerMaxentExtractorFrames_prevTag, EduStanfordNlpTaggerMaxentExtractorFrames_prevTwoTag, create_EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorContinuousTagConjunction_initWithInt_(-2) } count:8 type:EduStanfordNlpTaggerMaxentExtractor_class_()];
    EduStanfordNlpTaggerMaxentExtractorFrames_eFrames_german = [IOSObjectArray newArrayWithObjects:(id[]){ EduStanfordNlpTaggerMaxentExtractorFrames_cWord, EduStanfordNlpTaggerMaxentExtractorFrames_prevWord, EduStanfordNlpTaggerMaxentExtractorFrames_nextWord, EduStanfordNlpTaggerMaxentExtractorFrames_nextTag, EduStanfordNlpTaggerMaxentExtractorFrames_prevTag, create_EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorContinuousTagConjunction_initWithInt_(-2), EduStanfordNlpTaggerMaxentExtractorFrames_prevTagWord, create_EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorTwoWords_initWithInt_withInt_(-1, 0) } count:8 type:EduStanfordNlpTaggerMaxentExtractor_class_()];
    J2OBJC_SET_INITIALIZED(EduStanfordNlpTaggerMaxentExtractorFrames)
  }
}

@end

void EduStanfordNlpTaggerMaxentExtractorFrames_init(EduStanfordNlpTaggerMaxentExtractorFrames *self) {
  NSObject_init(self);
}

EduStanfordNlpTaggerMaxentExtractorFrames *new_EduStanfordNlpTaggerMaxentExtractorFrames_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpTaggerMaxentExtractorFrames, init)
}

EduStanfordNlpTaggerMaxentExtractorFrames *create_EduStanfordNlpTaggerMaxentExtractorFrames_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTaggerMaxentExtractorFrames, init)
}

IOSObjectArray *EduStanfordNlpTaggerMaxentExtractorFrames_getExtractorFramesWithNSString_(NSString *arch) {
  EduStanfordNlpTaggerMaxentExtractorFrames_initialize();
  arch = [((NSString *) nil_chk(arch)) replaceAll:@"left3words" withReplacement:@"words(-1,1),order(2)"];
  arch = [((NSString *) nil_chk(arch)) replaceAll:@"left5words" withReplacement:@"words(-2,2),order(2)"];
  arch = [((NSString *) nil_chk(arch)) replaceAll:@"generic" withReplacement:@"words(-1,1),order(2),biwords(-1,0),wordTag(0,-1)"];
  arch = [((NSString *) nil_chk(arch)) replaceAll:@"bidirectional5words" withReplacement:@"words(-2,2),order(-2,2),twoTags(-1,1),wordTag(0,-1),wordTag(0,1),biwords(-1,1)"];
  arch = [((NSString *) nil_chk(arch)) replaceAll:@"bidirectional" withReplacement:@"words(-1,1),order(-2,2),twoTags(-1,1),wordTag(0,-1),wordTag(0,1),biwords(-1,1)"];
  JavaUtilArrayList *extrs = new_JavaUtilArrayList_init();
  id<JavaUtilList> args = EduStanfordNlpUtilStringUtils_valueSplitWithNSString_withNSString_withNSString_(arch, @"[a-zA-Z0-9]*(?:\\([^)]*\\))?", @"\\s*,\\s*");
  for (NSString * __strong arg in nil_chk(args)) {
    if ([((NSString *) nil_chk(arg)) isEqual:@"sighan2005"]) {
      [extrs addAllWithJavaUtilCollection:JavaUtilArrays_asListWithNSObjectArray_(EduStanfordNlpTaggerMaxentExtractorFrames_eFrames_sighan2005)];
    }
    else if ([arg equalsIgnoreCase:@"german"]) {
      [extrs addAllWithJavaUtilCollection:JavaUtilArrays_asListWithNSObjectArray_(EduStanfordNlpTaggerMaxentExtractorFrames_eFrames_german)];
    }
    else if ([arg hasPrefix:@"words("]) {
      jint lWindow = EduStanfordNlpTaggerMaxentExtractor_getParenthesizedNumWithNSString_withInt_(arg, 1);
      jint rWindow = EduStanfordNlpTaggerMaxentExtractor_getParenthesizedNumWithNSString_withInt_(arg, 2);
      for (jint i = lWindow; i <= rWindow; i++) {
        [extrs addWithId:new_EduStanfordNlpTaggerMaxentExtractor_initWithInt_withBoolean_(i, false)];
      }
    }
    else if ([arg hasPrefix:@"tags("]) {
      jint lWindow = EduStanfordNlpTaggerMaxentExtractor_getParenthesizedNumWithNSString_withInt_(arg, 1);
      jint rWindow = EduStanfordNlpTaggerMaxentExtractor_getParenthesizedNumWithNSString_withInt_(arg, 2);
      for (jint i = lWindow; i <= rWindow; i++) {
        [extrs addWithId:new_EduStanfordNlpTaggerMaxentExtractor_initWithInt_withBoolean_(i, true)];
      }
    }
    else if ([arg hasPrefix:@"biwords("]) {
      jint lWindow = EduStanfordNlpTaggerMaxentExtractor_getParenthesizedNumWithNSString_withInt_(arg, 1);
      jint rWindow = EduStanfordNlpTaggerMaxentExtractor_getParenthesizedNumWithNSString_withInt_(arg, 2);
      for (jint i = lWindow; i < rWindow; i++) {
        [extrs addWithId:new_EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorTwoWords_initWithInt_(i)];
      }
    }
    else if ([arg hasPrefix:@"biword("]) {
      jint left = EduStanfordNlpTaggerMaxentExtractor_getParenthesizedNumWithNSString_withInt_(arg, 1);
      jint right = EduStanfordNlpTaggerMaxentExtractor_getParenthesizedNumWithNSString_withInt_(arg, 2);
      [extrs addWithId:new_EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorTwoWords_initWithInt_withInt_(left, right)];
    }
    else if ([arg hasPrefix:@"twoTags("]) {
      jint left = EduStanfordNlpTaggerMaxentExtractor_getParenthesizedNumWithNSString_withInt_(arg, 1);
      jint right = EduStanfordNlpTaggerMaxentExtractor_getParenthesizedNumWithNSString_withInt_(arg, 2);
      [extrs addWithId:new_EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorTwoTags_initWithInt_withInt_(left, right)];
    }
    else if ([arg hasPrefix:@"lowercasewords("]) {
      jint lWindow = EduStanfordNlpTaggerMaxentExtractor_getParenthesizedNumWithNSString_withInt_(arg, 1);
      jint rWindow = EduStanfordNlpTaggerMaxentExtractor_getParenthesizedNumWithNSString_withInt_(arg, 2);
      for (jint i = lWindow; i <= rWindow; i++) {
        [extrs addWithId:new_EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorWordLowerCase_initWithInt_(i)];
      }
    }
    else if ([arg hasPrefix:@"order("]) {
      jint leftOrder = EduStanfordNlpTaggerMaxentExtractor_getParenthesizedNumWithNSString_withInt_(arg, 1);
      jint rightOrder = EduStanfordNlpTaggerMaxentExtractor_getParenthesizedNumWithNSString_withInt_(arg, 2);
      if (leftOrder > 0) {
        leftOrder = -leftOrder;
      }
      if (rightOrder < 0) {
        @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"Right order must be non-negative, not ", rightOrder));
      }
      for (jint idx = leftOrder; idx <= rightOrder; idx++) {
        if (idx == 0) {
        }
        else if (idx == -1 || idx == 1) {
          [extrs addWithId:new_EduStanfordNlpTaggerMaxentExtractor_initWithInt_withBoolean_(idx, true)];
        }
        else {
          [extrs addWithId:new_EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorContinuousTagConjunction_initWithInt_(idx)];
        }
      }
    }
    else if ([arg hasPrefix:@"wordTag("]) {
      jint posW = EduStanfordNlpTaggerMaxentExtractor_getParenthesizedNumWithNSString_withInt_(arg, 1);
      jint posT = EduStanfordNlpTaggerMaxentExtractor_getParenthesizedNumWithNSString_withInt_(arg, 2);
      [extrs addWithId:new_EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorWordTag_initWithInt_withInt_(posW, posT)];
    }
    else if ([arg hasPrefix:@"wordTwoTags("]) {
      jint word = EduStanfordNlpTaggerMaxentExtractor_getParenthesizedNumWithNSString_withInt_(arg, 1);
      jint tag1 = EduStanfordNlpTaggerMaxentExtractor_getParenthesizedNumWithNSString_withInt_(arg, 2);
      jint tag2 = EduStanfordNlpTaggerMaxentExtractor_getParenthesizedNumWithNSString_withInt_(arg, 3);
      [extrs addWithId:new_EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorWordTwoTags_initWithInt_withInt_withInt_(word, tag1, tag2)];
    }
    else if ([arg hasPrefix:@"threeTags("]) {
      jint pos1 = EduStanfordNlpTaggerMaxentExtractor_getParenthesizedNumWithNSString_withInt_(arg, 1);
      jint pos2 = EduStanfordNlpTaggerMaxentExtractor_getParenthesizedNumWithNSString_withInt_(arg, 2);
      jint pos3 = EduStanfordNlpTaggerMaxentExtractor_getParenthesizedNumWithNSString_withInt_(arg, 3);
      [extrs addWithId:new_EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorThreeTags_initWithInt_withInt_withInt_(pos1, pos2, pos3)];
    }
    else if ([arg hasPrefix:@"vbn("]) {
      jint order = EduStanfordNlpTaggerMaxentExtractor_getParenthesizedNumWithNSString_withInt_(arg, 1);
      [extrs addWithId:new_EduStanfordNlpTaggerMaxentExtractorVerbalVBNZero_initWithInt_(order)];
    }
    else if ([arg hasPrefix:@"allwordshapes("]) {
      jint lWindow = EduStanfordNlpTaggerMaxentExtractor_getParenthesizedNumWithNSString_withInt_(arg, 1);
      jint rWindow = EduStanfordNlpTaggerMaxentExtractor_getParenthesizedNumWithNSString_withInt_(arg, 2);
      NSString *wsc = EduStanfordNlpTaggerMaxentExtractor_getParenthesizedArgWithNSString_withInt_(arg, 3);
      if (wsc == nil) {
        wsc = @"chris2";
      }
      for (jint i = lWindow; i <= rWindow; i++) {
        [extrs addWithId:new_EduStanfordNlpTaggerMaxentExtractorWordShapeClassifier_initWithInt_withNSString_(i, wsc)];
      }
    }
    else if ([arg hasPrefix:@"allwordshapeconjunction("]) {
      jint lWindow = EduStanfordNlpTaggerMaxentExtractor_getParenthesizedNumWithNSString_withInt_(arg, 1);
      jint rWindow = EduStanfordNlpTaggerMaxentExtractor_getParenthesizedNumWithNSString_withInt_(arg, 2);
      NSString *wsc = EduStanfordNlpTaggerMaxentExtractor_getParenthesizedArgWithNSString_withInt_(arg, 3);
      if (wsc == nil) {
        wsc = @"chris2";
      }
      [extrs addWithId:new_EduStanfordNlpTaggerMaxentExtractorWordShapeConjunction_initWithInt_withInt_withNSString_(lWindow, rWindow, wsc)];
    }
    else if ([arg hasPrefix:@"allunicodeshapes("]) {
      jint lWindow = EduStanfordNlpTaggerMaxentExtractor_getParenthesizedNumWithNSString_withInt_(arg, 1);
      jint rWindow = EduStanfordNlpTaggerMaxentExtractor_getParenthesizedNumWithNSString_withInt_(arg, 2);
      for (jint i = lWindow; i <= rWindow; i++) {
        [extrs addWithId:new_EduStanfordNlpTaggerMaxentExtractorWordShapeClassifier_initWithInt_withNSString_(i, @"chris4")];
      }
    }
    else if ([arg hasPrefix:@"allunicodeshapeconjunction("]) {
      jint lWindow = EduStanfordNlpTaggerMaxentExtractor_getParenthesizedNumWithNSString_withInt_(arg, 1);
      jint rWindow = EduStanfordNlpTaggerMaxentExtractor_getParenthesizedNumWithNSString_withInt_(arg, 2);
      [extrs addWithId:new_EduStanfordNlpTaggerMaxentExtractorWordShapeConjunction_initWithInt_withInt_withNSString_(lWindow, rWindow, @"chris4")];
    }
    else if ([arg equalsIgnoreCase:@"spanishauxiliaries"]) {
      [extrs addWithId:new_EduStanfordNlpTaggerMaxentExtractorSpanishAuxiliaryTag_init()];
      [extrs addWithId:new_EduStanfordNlpTaggerMaxentExtractorSpanishSemiauxiliaryTag_init()];
    }
    else if ([arg equalsIgnoreCase:@"naacl2003unknowns"] || [arg equalsIgnoreCase:@"lnaacl2003unknowns"] || [arg equalsIgnoreCase:@"caselessnaacl2003unknowns"] || [arg equalsIgnoreCase:@"naacl2003conjunctions"] || [arg equalsIgnoreCase:@"frenchunknowns"] || [arg equalsIgnoreCase:@"spanishunknowns"] || [arg hasPrefix:@"wordshapes("] || [arg hasPrefix:@"wordshapeconjunction("] || [arg equalsIgnoreCase:@"motleyUnknown"] || [arg hasPrefix:@"suffix("] || [arg hasPrefix:@"prefix("] || [arg hasPrefix:@"prefixsuffix"] || [arg hasPrefix:@"capitalizationsuffix("] || [arg hasPrefix:@"distsim("] || [arg hasPrefix:@"distsimconjunction("] || [arg equalsIgnoreCase:@"lctagfeatures"] || [arg hasPrefix:@"unicodeshapes("] || [arg hasPrefix:@"chinesedictionaryfeatures("] || [arg hasPrefix:@"unicodeshapeconjunction("]) {
    }
    else {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$", @"Unrecognized ExtractorFrames identifier (ignored): ", arg)];
    }
  }
  return [extrs toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:[extrs size] type:EduStanfordNlpTaggerMaxentExtractor_class_()]];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTaggerMaxentExtractorFrames)

@implementation EduStanfordNlpTaggerMaxentExtractorSpanishAuxiliaryTag

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpTaggerMaxentExtractorSpanishAuxiliaryTag_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)extractWithEduStanfordNlpTaggerMaxentHistory:(EduStanfordNlpTaggerMaxentHistory *)h
                 withEduStanfordNlpTaggerMaxentPairsHolder:(EduStanfordNlpTaggerMaxentPairsHolder *)pH {
  NSString *tag = [super extractWithEduStanfordNlpTaggerMaxentHistory:h withEduStanfordNlpTaggerMaxentPairsHolder:pH];
  jboolean isAux = ((jint) [((NSString *) nil_chk(tag)) length]) >= 2 && [((NSString *) nil_chk([tag substring:0 endIndex:2])) isEqual:@"va"];
  return isAux ? @"1" : @"0";
}

- (NSString *)description {
  return @"ExtractorSpanishAuxiliaryTag";
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 2, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(extractWithEduStanfordNlpTaggerMaxentHistory:withEduStanfordNlpTaggerMaxentPairsHolder:);
  methods[2].selector = @selector(description);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "extract", "LEduStanfordNlpTaggerMaxentHistory;LEduStanfordNlpTaggerMaxentPairsHolder;", "toString" };
  static const J2ObjcClassInfo _EduStanfordNlpTaggerMaxentExtractorSpanishAuxiliaryTag = { "ExtractorSpanishAuxiliaryTag", "edu.stanford.nlp.tagger.maxent", ptrTable, methods, NULL, 7, 0x0, 3, 0, -1, -1, -1, -1, -1 };
  return &_EduStanfordNlpTaggerMaxentExtractorSpanishAuxiliaryTag;
}

@end

void EduStanfordNlpTaggerMaxentExtractorSpanishAuxiliaryTag_init(EduStanfordNlpTaggerMaxentExtractorSpanishAuxiliaryTag *self) {
  EduStanfordNlpTaggerMaxentExtractor_initWithInt_withBoolean_(self, -1, true);
}

EduStanfordNlpTaggerMaxentExtractorSpanishAuxiliaryTag *new_EduStanfordNlpTaggerMaxentExtractorSpanishAuxiliaryTag_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpTaggerMaxentExtractorSpanishAuxiliaryTag, init)
}

EduStanfordNlpTaggerMaxentExtractorSpanishAuxiliaryTag *create_EduStanfordNlpTaggerMaxentExtractorSpanishAuxiliaryTag_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTaggerMaxentExtractorSpanishAuxiliaryTag, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTaggerMaxentExtractorSpanishAuxiliaryTag)

@implementation EduStanfordNlpTaggerMaxentExtractorSpanishSemiauxiliaryTag

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpTaggerMaxentExtractorSpanishSemiauxiliaryTag_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)extractWithEduStanfordNlpTaggerMaxentHistory:(EduStanfordNlpTaggerMaxentHistory *)h
                 withEduStanfordNlpTaggerMaxentPairsHolder:(EduStanfordNlpTaggerMaxentPairsHolder *)pH {
  NSString *tag = [super extractWithEduStanfordNlpTaggerMaxentHistory:h withEduStanfordNlpTaggerMaxentPairsHolder:pH];
  jboolean isSemiAux = ((jint) [((NSString *) nil_chk(tag)) length]) >= 2 && [((NSString *) nil_chk([tag substring:0 endIndex:2])) isEqual:@"vs"];
  return isSemiAux ? @"1" : @"0";
}

- (NSString *)description {
  return @"ExtractorSpanishSemiauxiliaryTag";
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 2, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(extractWithEduStanfordNlpTaggerMaxentHistory:withEduStanfordNlpTaggerMaxentPairsHolder:);
  methods[2].selector = @selector(description);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "extract", "LEduStanfordNlpTaggerMaxentHistory;LEduStanfordNlpTaggerMaxentPairsHolder;", "toString" };
  static const J2ObjcClassInfo _EduStanfordNlpTaggerMaxentExtractorSpanishSemiauxiliaryTag = { "ExtractorSpanishSemiauxiliaryTag", "edu.stanford.nlp.tagger.maxent", ptrTable, methods, NULL, 7, 0x0, 3, 0, -1, -1, -1, -1, -1 };
  return &_EduStanfordNlpTaggerMaxentExtractorSpanishSemiauxiliaryTag;
}

@end

void EduStanfordNlpTaggerMaxentExtractorSpanishSemiauxiliaryTag_init(EduStanfordNlpTaggerMaxentExtractorSpanishSemiauxiliaryTag *self) {
  EduStanfordNlpTaggerMaxentExtractor_initWithInt_withBoolean_(self, -1, true);
}

EduStanfordNlpTaggerMaxentExtractorSpanishSemiauxiliaryTag *new_EduStanfordNlpTaggerMaxentExtractorSpanishSemiauxiliaryTag_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpTaggerMaxentExtractorSpanishSemiauxiliaryTag, init)
}

EduStanfordNlpTaggerMaxentExtractorSpanishSemiauxiliaryTag *create_EduStanfordNlpTaggerMaxentExtractorSpanishSemiauxiliaryTag_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTaggerMaxentExtractorSpanishSemiauxiliaryTag, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTaggerMaxentExtractorSpanishSemiauxiliaryTag)

@implementation EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorWordTag

- (instancetype)initWithInt:(jint)posW
                    withInt:(jint)posT {
  EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorWordTag_initWithInt_withInt_(self, posW, posT);
  return self;
}

- (NSString *)extractWithEduStanfordNlpTaggerMaxentHistory:(EduStanfordNlpTaggerMaxentHistory *)h
                 withEduStanfordNlpTaggerMaxentPairsHolder:(EduStanfordNlpTaggerMaxentPairsHolder *)pH {
  return JreStrcat("$C$", [((EduStanfordNlpTaggerMaxentPairsHolder *) nil_chk(pH)) getTagWithEduStanfordNlpTaggerMaxentHistory:h withInt:position_], '!', [pH getWordWithEduStanfordNlpTaggerMaxentHistory:h withInt:wordPosition_]);
}

- (NSString *)description {
  return (JreStrcat("$$I$IC", [[self getClass] getName], @"(w", wordPosition_, @",t", position_, ')'));
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:withInt:);
  methods[1].selector = @selector(extractWithEduStanfordNlpTaggerMaxentHistory:withEduStanfordNlpTaggerMaxentPairsHolder:);
  methods[2].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorWordTag_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "wordPosition_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "II", "extract", "LEduStanfordNlpTaggerMaxentHistory;LEduStanfordNlpTaggerMaxentPairsHolder;", "toString", "LEduStanfordNlpTaggerMaxentExtractorFrames;" };
  static const J2ObjcClassInfo _EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorWordTag = { "ExtractorWordTag", "edu.stanford.nlp.tagger.maxent", ptrTable, methods, fields, 7, 0x8, 3, 2, 4, -1, -1, -1, -1 };
  return &_EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorWordTag;
}

@end

void EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorWordTag_initWithInt_withInt_(EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorWordTag *self, jint posW, jint posT) {
  EduStanfordNlpTaggerMaxentExtractor_initWithInt_withBoolean_(self, posT, true);
  self->wordPosition_ = posW;
}

EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorWordTag *new_EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorWordTag_initWithInt_withInt_(jint posW, jint posT) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorWordTag, initWithInt_withInt_, posW, posT)
}

EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorWordTag *create_EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorWordTag_initWithInt_withInt_(jint posW, jint posT) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorWordTag, initWithInt_withInt_, posW, posT)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorWordTag)

@implementation EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorWordLowerCase

- (instancetype)initWithInt:(jint)position {
  EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorWordLowerCase_initWithInt_(self, position);
  return self;
}

- (NSString *)extractWithEduStanfordNlpTaggerMaxentHistory:(EduStanfordNlpTaggerMaxentHistory *)h
                 withEduStanfordNlpTaggerMaxentPairsHolder:(EduStanfordNlpTaggerMaxentPairsHolder *)pH {
  return [((NSString *) nil_chk([((EduStanfordNlpTaggerMaxentPairsHolder *) nil_chk(pH)) getWordWithEduStanfordNlpTaggerMaxentHistory:h withInt:position_])) lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, ENGLISH)];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(extractWithEduStanfordNlpTaggerMaxentHistory:withEduStanfordNlpTaggerMaxentPairsHolder:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorWordLowerCase_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "extract", "LEduStanfordNlpTaggerMaxentHistory;LEduStanfordNlpTaggerMaxentPairsHolder;", "LEduStanfordNlpTaggerMaxentExtractorFrames;" };
  static const J2ObjcClassInfo _EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorWordLowerCase = { "ExtractorWordLowerCase", "edu.stanford.nlp.tagger.maxent", ptrTable, methods, fields, 7, 0x8, 2, 1, 3, -1, -1, -1, -1 };
  return &_EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorWordLowerCase;
}

@end

void EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorWordLowerCase_initWithInt_(EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorWordLowerCase *self, jint position) {
  EduStanfordNlpTaggerMaxentExtractor_initWithInt_withBoolean_(self, position, false);
}

EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorWordLowerCase *new_EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorWordLowerCase_initWithInt_(jint position) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorWordLowerCase, initWithInt_, position)
}

EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorWordLowerCase *create_EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorWordLowerCase_initWithInt_(jint position) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorWordLowerCase, initWithInt_, position)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorWordLowerCase)

@implementation EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorCWordCapCase

- (NSString *)extractWithEduStanfordNlpTaggerMaxentHistory:(EduStanfordNlpTaggerMaxentHistory *)h
                 withEduStanfordNlpTaggerMaxentPairsHolder:(EduStanfordNlpTaggerMaxentPairsHolder *)pH {
  NSString *cw = [((EduStanfordNlpTaggerMaxentPairsHolder *) nil_chk(pH)) getWordWithEduStanfordNlpTaggerMaxentHistory:h withInt:0];
  NSString *lk = [((NSString *) nil_chk(cw)) lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, ENGLISH)];
  if ([((NSString *) nil_chk(lk)) isEqual:cw]) {
    return EduStanfordNlpTaggerMaxentExtractor_zeroSt;
  }
  return cw;
}

- (jboolean)isLocal {
  return true;
}

- (jboolean)isDynamic {
  return false;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorCWordCapCase_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x0, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(extractWithEduStanfordNlpTaggerMaxentHistory:withEduStanfordNlpTaggerMaxentPairsHolder:);
  methods[1].selector = @selector(isLocal);
  methods[2].selector = @selector(isDynamic);
  methods[3].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorCWordCapCase_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "extract", "LEduStanfordNlpTaggerMaxentHistory;LEduStanfordNlpTaggerMaxentPairsHolder;", "LEduStanfordNlpTaggerMaxentExtractorFrames;" };
  static const J2ObjcClassInfo _EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorCWordCapCase = { "ExtractorCWordCapCase", "edu.stanford.nlp.tagger.maxent", ptrTable, methods, fields, 7, 0x8, 4, 1, 2, -1, -1, -1, -1 };
  return &_EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorCWordCapCase;
}

@end

void EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorCWordCapCase_init(EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorCWordCapCase *self) {
  EduStanfordNlpTaggerMaxentExtractor_init(self);
}

EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorCWordCapCase *new_EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorCWordCapCase_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorCWordCapCase, init)
}

EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorCWordCapCase *create_EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorCWordCapCase_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorCWordCapCase, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorCWordCapCase)

@implementation EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorTwoWords

- (instancetype)initWithInt:(jint)leftPosition {
  EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorTwoWords_initWithInt_(self, leftPosition);
  return self;
}

- (instancetype)initWithInt:(jint)position1
                    withInt:(jint)position2 {
  EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorTwoWords_initWithInt_withInt_(self, position1, position2);
  return self;
}

- (NSString *)extractWithEduStanfordNlpTaggerMaxentHistory:(EduStanfordNlpTaggerMaxentHistory *)h
                 withEduStanfordNlpTaggerMaxentPairsHolder:(EduStanfordNlpTaggerMaxentPairsHolder *)pH {
  return JreStrcat("$C$", [((EduStanfordNlpTaggerMaxentPairsHolder *) nil_chk(pH)) getWordWithEduStanfordNlpTaggerMaxentHistory:h withInt:leftPosition_], '!', [pH getWordWithEduStanfordNlpTaggerMaxentHistory:h withInt:rightPosition_]);
}

- (jboolean)isLocal {
  return false;
}

- (NSString *)description {
  return (JreStrcat("$$I$IC", [[self getClass] getName], @"(w", leftPosition_, @",w", rightPosition_, ')'));
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(initWithInt:withInt:);
  methods[2].selector = @selector(extractWithEduStanfordNlpTaggerMaxentHistory:withEduStanfordNlpTaggerMaxentPairsHolder:);
  methods[3].selector = @selector(isLocal);
  methods[4].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorTwoWords_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "leftPosition_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "rightPosition_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "II", "extract", "LEduStanfordNlpTaggerMaxentHistory;LEduStanfordNlpTaggerMaxentPairsHolder;", "toString", "LEduStanfordNlpTaggerMaxentExtractorFrames;" };
  static const J2ObjcClassInfo _EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorTwoWords = { "ExtractorTwoWords", "edu.stanford.nlp.tagger.maxent", ptrTable, methods, fields, 7, 0x8, 5, 3, 5, -1, -1, -1, -1 };
  return &_EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorTwoWords;
}

@end

void EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorTwoWords_initWithInt_(EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorTwoWords *self, jint leftPosition) {
  EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorTwoWords_initWithInt_withInt_(self, leftPosition, leftPosition + 1);
}

EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorTwoWords *new_EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorTwoWords_initWithInt_(jint leftPosition) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorTwoWords, initWithInt_, leftPosition)
}

EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorTwoWords *create_EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorTwoWords_initWithInt_(jint leftPosition) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorTwoWords, initWithInt_, leftPosition)
}

void EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorTwoWords_initWithInt_withInt_(EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorTwoWords *self, jint position1, jint position2) {
  EduStanfordNlpTaggerMaxentExtractor_initWithInt_withBoolean_(self, 0, false);
  if (position1 > position2) {
    self->leftPosition_ = position1;
    self->rightPosition_ = position2;
  }
  else {
    self->leftPosition_ = position2;
    self->rightPosition_ = position1;
  }
}

EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorTwoWords *new_EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorTwoWords_initWithInt_withInt_(jint position1, jint position2) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorTwoWords, initWithInt_withInt_, position1, position2)
}

EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorTwoWords *create_EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorTwoWords_initWithInt_withInt_(jint position1, jint position2) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorTwoWords, initWithInt_withInt_, position1, position2)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorTwoWords)

@implementation EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorTwoTags

- (instancetype)initWithInt:(jint)position1
                    withInt:(jint)position2 {
  EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorTwoTags_initWithInt_withInt_(self, position1, position2);
  return self;
}

- (jint)rightContext {
  return rightContext_;
}

- (jint)leftContext {
  return leftContext_;
}

- (NSString *)extractWithEduStanfordNlpTaggerMaxentHistory:(EduStanfordNlpTaggerMaxentHistory *)h
                 withEduStanfordNlpTaggerMaxentPairsHolder:(EduStanfordNlpTaggerMaxentPairsHolder *)pH {
  return JreStrcat("$C$", [((EduStanfordNlpTaggerMaxentPairsHolder *) nil_chk(pH)) getTagWithEduStanfordNlpTaggerMaxentHistory:h withInt:leftPosition_], '!', [pH getTagWithEduStanfordNlpTaggerMaxentHistory:h withInt:rightPosition_]);
}

- (jboolean)isLocal {
  return false;
}

- (jboolean)isDynamic {
  return true;
}

- (NSString *)description {
  return (JreStrcat("$$I$IC", [[self getClass] getName], @"(t", leftPosition_, @",t", rightPosition_, ')'));
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:withInt:);
  methods[1].selector = @selector(rightContext);
  methods[2].selector = @selector(leftContext);
  methods[3].selector = @selector(extractWithEduStanfordNlpTaggerMaxentHistory:withEduStanfordNlpTaggerMaxentPairsHolder:);
  methods[4].selector = @selector(isLocal);
  methods[5].selector = @selector(isDynamic);
  methods[6].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorTwoTags_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "leftPosition_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "rightPosition_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "leftContext_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "rightContext_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "II", "extract", "LEduStanfordNlpTaggerMaxentHistory;LEduStanfordNlpTaggerMaxentPairsHolder;", "toString", "LEduStanfordNlpTaggerMaxentExtractorFrames;" };
  static const J2ObjcClassInfo _EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorTwoTags = { "ExtractorTwoTags", "edu.stanford.nlp.tagger.maxent", ptrTable, methods, fields, 7, 0x8, 7, 5, 4, -1, -1, -1, -1 };
  return &_EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorTwoTags;
}

@end

void EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorTwoTags_initWithInt_withInt_(EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorTwoTags *self, jint position1, jint position2) {
  EduStanfordNlpTaggerMaxentExtractor_init(self);
  self->leftPosition_ = JavaLangMath_minWithInt_withInt_(position1, position2);
  self->rightPosition_ = JavaLangMath_maxWithInt_withInt_(position1, position2);
  self->leftContext_ = -JavaLangMath_minWithInt_withInt_(self->leftPosition_, 0);
  self->rightContext_ = JavaLangMath_maxWithInt_withInt_(self->rightPosition_, 0);
}

EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorTwoTags *new_EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorTwoTags_initWithInt_withInt_(jint position1, jint position2) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorTwoTags, initWithInt_withInt_, position1, position2)
}

EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorTwoTags *create_EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorTwoTags_initWithInt_withInt_(jint position1, jint position2) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorTwoTags, initWithInt_withInt_, position1, position2)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorTwoTags)

@implementation EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorTwoWordsTag

- (instancetype)initWithInt:(jint)leftWord
                    withInt:(jint)rightWord
                    withInt:(jint)tag {
  EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorTwoWordsTag_initWithInt_withInt_withInt_(self, leftWord, rightWord, tag);
  return self;
}

- (jint)rightContext {
  return rightContext_;
}

- (jint)leftContext {
  return leftContext_;
}

- (NSString *)extractWithEduStanfordNlpTaggerMaxentHistory:(EduStanfordNlpTaggerMaxentHistory *)h
                 withEduStanfordNlpTaggerMaxentPairsHolder:(EduStanfordNlpTaggerMaxentPairsHolder *)pH {
  return (JreStrcat("$C$C$", [((EduStanfordNlpTaggerMaxentPairsHolder *) nil_chk(pH)) getWordWithEduStanfordNlpTaggerMaxentHistory:h withInt:leftWord_], '!', [pH getTagWithEduStanfordNlpTaggerMaxentHistory:h withInt:tag_], '!', [pH getWordWithEduStanfordNlpTaggerMaxentHistory:h withInt:rightWord_]));
}

- (jboolean)isLocal {
  return false;
}

- (jboolean)isDynamic {
  return true;
}

- (NSString *)description {
  return (JreStrcat("$$I$I$IC", [[self getClass] getName], @"(w", leftWord_, @",t", tag_, @",w", rightWord_, ')'));
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:withInt:withInt:);
  methods[1].selector = @selector(rightContext);
  methods[2].selector = @selector(leftContext);
  methods[3].selector = @selector(extractWithEduStanfordNlpTaggerMaxentHistory:withEduStanfordNlpTaggerMaxentPairsHolder:);
  methods[4].selector = @selector(isLocal);
  methods[5].selector = @selector(isDynamic);
  methods[6].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorTwoWordsTag_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "leftWord_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "rightWord_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "tag_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "rightContext_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "leftContext_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "III", "extract", "LEduStanfordNlpTaggerMaxentHistory;LEduStanfordNlpTaggerMaxentPairsHolder;", "toString", "LEduStanfordNlpTaggerMaxentExtractorFrames;" };
  static const J2ObjcClassInfo _EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorTwoWordsTag = { "ExtractorTwoWordsTag", "edu.stanford.nlp.tagger.maxent", ptrTable, methods, fields, 7, 0x8, 7, 6, 4, -1, -1, -1, -1 };
  return &_EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorTwoWordsTag;
}

@end

void EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorTwoWordsTag_initWithInt_withInt_withInt_(EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorTwoWordsTag *self, jint leftWord, jint rightWord, jint tag) {
  EduStanfordNlpTaggerMaxentExtractor_init(self);
  self->leftWord_ = JavaLangMath_minWithInt_withInt_(leftWord, rightWord);
  self->rightWord_ = JavaLangMath_maxWithInt_withInt_(leftWord, rightWord);
  self->tag_ = tag;
  self->rightContext_ = JavaLangMath_maxWithInt_withInt_(tag, 0);
  self->leftContext_ = -JavaLangMath_minWithInt_withInt_(tag, 0);
}

EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorTwoWordsTag *new_EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorTwoWordsTag_initWithInt_withInt_withInt_(jint leftWord, jint rightWord, jint tag) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorTwoWordsTag, initWithInt_withInt_withInt_, leftWord, rightWord, tag)
}

EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorTwoWordsTag *create_EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorTwoWordsTag_initWithInt_withInt_withInt_(jint leftWord, jint rightWord, jint tag) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorTwoWordsTag, initWithInt_withInt_withInt_, leftWord, rightWord, tag)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorTwoWordsTag)

@implementation EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorContinuousTagConjunction

- (instancetype)initWithInt:(jint)maxPosition {
  EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorContinuousTagConjunction_initWithInt_(self, maxPosition);
  return self;
}

- (NSString *)extractWithEduStanfordNlpTaggerMaxentHistory:(EduStanfordNlpTaggerMaxentHistory *)h
                 withEduStanfordNlpTaggerMaxentPairsHolder:(EduStanfordNlpTaggerMaxentPairsHolder *)pH {
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  if (position_ < 0) {
    for (jint idx = position_; idx < 0; idx++) {
      if (idx != position_) {
        (void) [sb appendWithChar:'!'];
      }
      (void) [sb appendWithNSString:[((EduStanfordNlpTaggerMaxentPairsHolder *) nil_chk(pH)) getTagWithEduStanfordNlpTaggerMaxentHistory:h withInt:idx]];
    }
  }
  else {
    for (jint idx = position_; idx > 0; idx--) {
      if (idx != position_) {
        (void) [sb appendWithChar:'!'];
      }
      (void) [sb appendWithNSString:[((EduStanfordNlpTaggerMaxentPairsHolder *) nil_chk(pH)) getTagWithEduStanfordNlpTaggerMaxentHistory:h withInt:idx]];
    }
  }
  return [sb description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(extractWithEduStanfordNlpTaggerMaxentHistory:withEduStanfordNlpTaggerMaxentPairsHolder:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorContinuousTagConjunction_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "extract", "LEduStanfordNlpTaggerMaxentHistory;LEduStanfordNlpTaggerMaxentPairsHolder;", "LEduStanfordNlpTaggerMaxentExtractorFrames;" };
  static const J2ObjcClassInfo _EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorContinuousTagConjunction = { "ExtractorContinuousTagConjunction", "edu.stanford.nlp.tagger.maxent", ptrTable, methods, fields, 7, 0x8, 2, 1, 3, -1, -1, -1, -1 };
  return &_EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorContinuousTagConjunction;
}

@end

void EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorContinuousTagConjunction_initWithInt_(EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorContinuousTagConjunction *self, jint maxPosition) {
  EduStanfordNlpTaggerMaxentExtractor_initWithInt_withBoolean_(self, maxPosition, true);
}

EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorContinuousTagConjunction *new_EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorContinuousTagConjunction_initWithInt_(jint maxPosition) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorContinuousTagConjunction, initWithInt_, maxPosition)
}

EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorContinuousTagConjunction *create_EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorContinuousTagConjunction_initWithInt_(jint maxPosition) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorContinuousTagConjunction, initWithInt_, maxPosition)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorContinuousTagConjunction)

@implementation EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorThreeTags

- (instancetype)initWithInt:(jint)position1
                    withInt:(jint)position2
                    withInt:(jint)position3 {
  EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorThreeTags_initWithInt_withInt_withInt_(self, position1, position2, position3);
  return self;
}

- (jint)rightContext {
  if (position3_ > 0) {
    return position3_;
  }
  else {
    return 0;
  }
}

- (jint)leftContext {
  if (position1_ < 0) {
    return -position1_;
  }
  else {
    return 0;
  }
}

- (NSString *)extractWithEduStanfordNlpTaggerMaxentHistory:(EduStanfordNlpTaggerMaxentHistory *)h
                 withEduStanfordNlpTaggerMaxentPairsHolder:(EduStanfordNlpTaggerMaxentPairsHolder *)pH {
  return JreStrcat("$C$C$", [((EduStanfordNlpTaggerMaxentPairsHolder *) nil_chk(pH)) getTagWithEduStanfordNlpTaggerMaxentHistory:h withInt:position1_], '!', [pH getTagWithEduStanfordNlpTaggerMaxentHistory:h withInt:position2_], '!', [pH getTagWithEduStanfordNlpTaggerMaxentHistory:h withInt:position3_]);
}

- (jboolean)isLocal {
  return false;
}

- (jboolean)isDynamic {
  return true;
}

- (NSString *)description {
  return (JreStrcat("$$I$I$IC", [[self getClass] getName], @"(t", position1_, @",t", position2_, @",t", position3_, ')'));
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:withInt:withInt:);
  methods[1].selector = @selector(rightContext);
  methods[2].selector = @selector(leftContext);
  methods[3].selector = @selector(extractWithEduStanfordNlpTaggerMaxentHistory:withEduStanfordNlpTaggerMaxentPairsHolder:);
  methods[4].selector = @selector(isLocal);
  methods[5].selector = @selector(isDynamic);
  methods[6].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorThreeTags_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "position1_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "position2_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "position3_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "III", "extract", "LEduStanfordNlpTaggerMaxentHistory;LEduStanfordNlpTaggerMaxentPairsHolder;", "toString", "LEduStanfordNlpTaggerMaxentExtractorFrames;" };
  static const J2ObjcClassInfo _EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorThreeTags = { "ExtractorThreeTags", "edu.stanford.nlp.tagger.maxent", ptrTable, methods, fields, 7, 0x8, 7, 4, 4, -1, -1, -1, -1 };
  return &_EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorThreeTags;
}

@end

void EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorThreeTags_initWithInt_withInt_withInt_(EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorThreeTags *self, jint position1, jint position2, jint position3) {
  EduStanfordNlpTaggerMaxentExtractor_init(self);
  jint x;
  if (position1 > position2) {
    x = position2;
    position2 = position1;
    position1 = x;
  }
  if (position2 > position3) {
    x = position3;
    position3 = position2;
    position2 = x;
  }
  if (position1 > position2) {
    x = position2;
    position2 = position1;
    position1 = x;
  }
  self->position1_ = position1;
  self->position2_ = position2;
  self->position3_ = position3;
}

EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorThreeTags *new_EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorThreeTags_initWithInt_withInt_withInt_(jint position1, jint position2, jint position3) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorThreeTags, initWithInt_withInt_withInt_, position1, position2, position3)
}

EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorThreeTags *create_EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorThreeTags_initWithInt_withInt_withInt_(jint position1, jint position2, jint position3) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorThreeTags, initWithInt_withInt_withInt_, position1, position2, position3)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorThreeTags)

@implementation EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorWordTwoTags

- (instancetype)initWithInt:(jint)word
                    withInt:(jint)position1
                    withInt:(jint)position2 {
  EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorWordTwoTags_initWithInt_withInt_withInt_(self, word, position1, position2);
  return self;
}

- (jint)leftContext {
  if (position1_ < 0) {
    return -position1_;
  }
  else {
    return 0;
  }
}

- (jint)rightContext {
  if (position2_ > 0) {
    return position2_;
  }
  else {
    return 0;
  }
}

- (NSString *)extractWithEduStanfordNlpTaggerMaxentHistory:(EduStanfordNlpTaggerMaxentHistory *)h
                 withEduStanfordNlpTaggerMaxentPairsHolder:(EduStanfordNlpTaggerMaxentPairsHolder *)pH {
  return JreStrcat("$C$C$", [((EduStanfordNlpTaggerMaxentPairsHolder *) nil_chk(pH)) getTagWithEduStanfordNlpTaggerMaxentHistory:h withInt:position1_], '!', [pH getWordWithEduStanfordNlpTaggerMaxentHistory:h withInt:word_], '!', [pH getTagWithEduStanfordNlpTaggerMaxentHistory:h withInt:position2_]);
}

- (jboolean)isLocal {
  return false;
}

- (jboolean)isDynamic {
  return true;
}

- (NSString *)description {
  return (JreStrcat("$$I$I$IC", [[self getClass] getName], @"(t", position1_, @",t", position2_, @",w", word_, ')'));
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:withInt:withInt:);
  methods[1].selector = @selector(leftContext);
  methods[2].selector = @selector(rightContext);
  methods[3].selector = @selector(extractWithEduStanfordNlpTaggerMaxentHistory:withEduStanfordNlpTaggerMaxentPairsHolder:);
  methods[4].selector = @selector(isLocal);
  methods[5].selector = @selector(isDynamic);
  methods[6].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorWordTwoTags_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "position1_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "position2_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "word_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "III", "extract", "LEduStanfordNlpTaggerMaxentHistory;LEduStanfordNlpTaggerMaxentPairsHolder;", "toString", "LEduStanfordNlpTaggerMaxentExtractorFrames;" };
  static const J2ObjcClassInfo _EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorWordTwoTags = { "ExtractorWordTwoTags", "edu.stanford.nlp.tagger.maxent", ptrTable, methods, fields, 7, 0x8, 7, 4, 4, -1, -1, -1, -1 };
  return &_EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorWordTwoTags;
}

@end

void EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorWordTwoTags_initWithInt_withInt_withInt_(EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorWordTwoTags *self, jint word, jint position1, jint position2) {
  EduStanfordNlpTaggerMaxentExtractor_init(self);
  if (position1 < position2) {
    self->position1_ = position1;
    self->position2_ = position1;
  }
  else {
    self->position1_ = position2;
    self->position2_ = position1;
  }
  self->word_ = word;
}

EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorWordTwoTags *new_EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorWordTwoTags_initWithInt_withInt_withInt_(jint word, jint position1, jint position2) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorWordTwoTags, initWithInt_withInt_withInt_, word, position1, position2)
}

EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorWordTwoTags *create_EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorWordTwoTags_initWithInt_withInt_withInt_(jint word, jint position1, jint position2) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorWordTwoTags, initWithInt_withInt_withInt_, word, position1, position2)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTaggerMaxentExtractorFrames_ExtractorWordTwoTags)
