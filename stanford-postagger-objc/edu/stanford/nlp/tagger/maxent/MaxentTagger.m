//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/tagger/maxent/MaxentTagger.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/io/IOUtils.h"
#include "edu/stanford/nlp/io/PrintFile.h"
#include "edu/stanford/nlp/io/RuntimeIOException.h"
#include "edu/stanford/nlp/ling/CoreLabel.h"
#include "edu/stanford/nlp/ling/HasTag.h"
#include "edu/stanford/nlp/ling/HasWord.h"
#include "edu/stanford/nlp/ling/Sentence.h"
#include "edu/stanford/nlp/ling/TaggedWord.h"
#include "edu/stanford/nlp/maxent/CGRunner.h"
#include "edu/stanford/nlp/maxent/Problem.h"
#include "edu/stanford/nlp/maxent/iis/LambdaSolve.h"
#include "edu/stanford/nlp/process/DocumentPreprocessor.h"
#include "edu/stanford/nlp/process/Morphology.h"
#include "edu/stanford/nlp/process/PTBTokenizer.h"
#include "edu/stanford/nlp/process/TokenizerFactory.h"
#include "edu/stanford/nlp/process/TransformXML.h"
#include "edu/stanford/nlp/process/WhitespaceTokenizer.h"
#include "edu/stanford/nlp/tagger/common/Tagger.h"
#include "edu/stanford/nlp/tagger/io/TaggedFileReader.h"
#include "edu/stanford/nlp/tagger/io/TaggedFileRecord.h"
#include "edu/stanford/nlp/tagger/maxent/AmbiguityClasses.h"
#include "edu/stanford/nlp/tagger/maxent/Dictionary.h"
#include "edu/stanford/nlp/tagger/maxent/Extractor.h"
#include "edu/stanford/nlp/tagger/maxent/ExtractorFrames.h"
#include "edu/stanford/nlp/tagger/maxent/ExtractorFramesRare.h"
#include "edu/stanford/nlp/tagger/maxent/Extractors.h"
#include "edu/stanford/nlp/tagger/maxent/FeatureKey.h"
#include "edu/stanford/nlp/tagger/maxent/LambdaSolveTagger.h"
#include "edu/stanford/nlp/tagger/maxent/MaxentTagger.h"
#include "edu/stanford/nlp/tagger/maxent/TTags.h"
#include "edu/stanford/nlp/tagger/maxent/TaggerConfig.h"
#include "edu/stanford/nlp/tagger/maxent/TaggerExperiments.h"
#include "edu/stanford/nlp/tagger/maxent/TaggerFeatures.h"
#include "edu/stanford/nlp/tagger/maxent/TestClassifier.h"
#include "edu/stanford/nlp/tagger/maxent/TestSentence.h"
#include "edu/stanford/nlp/util/DataFilePaths.h"
#include "edu/stanford/nlp/util/Generics.h"
#include "edu/stanford/nlp/util/ReflectionLoading.h"
#include "edu/stanford/nlp/util/StringUtils.h"
#include "edu/stanford/nlp/util/Timing.h"
#include "edu/stanford/nlp/util/XMLUtils.h"
#include "edu/stanford/nlp/util/concurrent/MulticoreWrapper.h"
#include "edu/stanford/nlp/util/concurrent/ThreadsafeProcessor.h"
#include "java/io/BufferedReader.h"
#include "java/io/BufferedWriter.h"
#include "java/io/DataInputStream.h"
#include "java/io/DataOutputStream.h"
#include "java/io/File.h"
#include "java/io/FileInputStream.h"
#include "java/io/FileNotFoundException.h"
#include "java/io/FileOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/InputStreamReader.h"
#include "java/io/ObjectInputStream.h"
#include "java/io/ObjectOutputStream.h"
#include "java/io/OutputStream.h"
#include "java/io/OutputStreamWriter.h"
#include "java/io/PrintStream.h"
#include "java/io/Reader.h"
#include "java/io/StringReader.h"
#include "java/io/StringWriter.h"
#include "java/io/Writer.h"
#include "java/lang/AssertionError.h"
#include "java/lang/Boolean.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/Enum.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Iterable.h"
#include "java/lang/Math.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/reflect/Method.h"
#include "java/text/DecimalFormat.h"
#include "java/text/NumberFormat.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/Date.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Properties.h"
#include "java/util/Set.h"
#include "java/util/function/Function.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"

@interface EduStanfordNlpTaggerMaxentMaxentTagger () {
 @public
  EduStanfordNlpTaggerMaxentLambdaSolveTagger *prob_;
  jdouble defaultScore_;
  IOSDoubleArray *defaultScores_;
  jint rareWordThresh_;
  jboolean initted_;
}

- (void)initDefaultScores OBJC_METHOD_FAMILY_NONE;

- (void)saveExtractorsWithJavaIoOutputStream:(JavaIoOutputStream *)os;

- (void)readExtractorsWithJavaIoInputStream:(JavaIoInputStream *)file;

- (void)setExtractorsGlobal;

- (void)removeDeadRules;

- (void)simplifyLambda;

+ (id<JavaUtilList>)castCoreLabelsWithJavaUtilList:(id<JavaUtilList>)sent;

+ (void)dumpModelWithEduStanfordNlpTaggerMaxentTaggerConfig:(EduStanfordNlpTaggerMaxentTaggerConfig *)config;

+ (void)runTestWithEduStanfordNlpTaggerMaxentTaggerConfig:(EduStanfordNlpTaggerMaxentTaggerConfig *)config;

+ (void)trainAndSaveModelWithEduStanfordNlpTaggerMaxentTaggerConfig:(EduStanfordNlpTaggerMaxentTaggerConfig *)config;

+ (void)runTrainingWithEduStanfordNlpTaggerMaxentTaggerConfig:(EduStanfordNlpTaggerMaxentTaggerConfig *)config;

+ (void)printErrWordsPerSecWithLong:(jlong)milliSec
                            withInt:(jint)numWords;

+ (NSString *)getXMLWordsWithJavaUtilList:(id<JavaUtilList>)sentence
                                  withInt:(jint)sentNum
                              withBoolean:(jboolean)outputLemmas;

+ (NSString *)getTsvWordsWithBoolean:(jboolean)verbose
                         withBoolean:(jboolean)outputLemmas
                    withJavaUtilList:(id<JavaUtilList>)sentence;

+ (void)writeXMLSentenceWithJavaIoWriter:(JavaIoWriter *)w
                        withJavaUtilList:(id<JavaUtilList>)sent
                                 withInt:(jint)sentNum
                             withBoolean:(jboolean)outputLemmas;

- (void)tagFromXML;

+ (void)runTaggerWithEduStanfordNlpTaggerMaxentTaggerConfig:(EduStanfordNlpTaggerMaxentTaggerConfig *)config;

- (void)runTagger;

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpTaggerMaxentMaxentTagger, prob_, EduStanfordNlpTaggerMaxentLambdaSolveTagger *)
J2OBJC_FIELD_SETTER(EduStanfordNlpTaggerMaxentMaxentTagger, defaultScores_, IOSDoubleArray *)

inline JavaUtilRegexPattern *EduStanfordNlpTaggerMaxentMaxentTagger_get_formatPattern();
static JavaUtilRegexPattern *EduStanfordNlpTaggerMaxentMaxentTagger_formatPattern;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpTaggerMaxentMaxentTagger, formatPattern, JavaUtilRegexPattern *)

inline jlong EduStanfordNlpTaggerMaxentMaxentTagger_get_serialVersionUID();
#define EduStanfordNlpTaggerMaxentMaxentTagger_serialVersionUID 2LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpTaggerMaxentMaxentTagger, serialVersionUID, jlong)

__attribute__((unused)) static void EduStanfordNlpTaggerMaxentMaxentTagger_initDefaultScores(EduStanfordNlpTaggerMaxentMaxentTagger *self);

__attribute__((unused)) static void EduStanfordNlpTaggerMaxentMaxentTagger_saveExtractorsWithJavaIoOutputStream_(EduStanfordNlpTaggerMaxentMaxentTagger *self, JavaIoOutputStream *os);

__attribute__((unused)) static void EduStanfordNlpTaggerMaxentMaxentTagger_readExtractorsWithJavaIoInputStream_(EduStanfordNlpTaggerMaxentMaxentTagger *self, JavaIoInputStream *file);

__attribute__((unused)) static void EduStanfordNlpTaggerMaxentMaxentTagger_setExtractorsGlobal(EduStanfordNlpTaggerMaxentMaxentTagger *self);

__attribute__((unused)) static void EduStanfordNlpTaggerMaxentMaxentTagger_removeDeadRules(EduStanfordNlpTaggerMaxentMaxentTagger *self);

__attribute__((unused)) static void EduStanfordNlpTaggerMaxentMaxentTagger_simplifyLambda(EduStanfordNlpTaggerMaxentMaxentTagger *self);

__attribute__((unused)) static id<JavaUtilList> EduStanfordNlpTaggerMaxentMaxentTagger_castCoreLabelsWithJavaUtilList_(id<JavaUtilList> sent);

__attribute__((unused)) static void EduStanfordNlpTaggerMaxentMaxentTagger_dumpModelWithEduStanfordNlpTaggerMaxentTaggerConfig_(EduStanfordNlpTaggerMaxentTaggerConfig *config);

__attribute__((unused)) static void EduStanfordNlpTaggerMaxentMaxentTagger_runTestWithEduStanfordNlpTaggerMaxentTaggerConfig_(EduStanfordNlpTaggerMaxentTaggerConfig *config);

__attribute__((unused)) static void EduStanfordNlpTaggerMaxentMaxentTagger_trainAndSaveModelWithEduStanfordNlpTaggerMaxentTaggerConfig_(EduStanfordNlpTaggerMaxentTaggerConfig *config);

__attribute__((unused)) static void EduStanfordNlpTaggerMaxentMaxentTagger_runTrainingWithEduStanfordNlpTaggerMaxentTaggerConfig_(EduStanfordNlpTaggerMaxentTaggerConfig *config);

__attribute__((unused)) static void EduStanfordNlpTaggerMaxentMaxentTagger_printErrWordsPerSecWithLong_withInt_(jlong milliSec, jint numWords);

__attribute__((unused)) static NSString *EduStanfordNlpTaggerMaxentMaxentTagger_getXMLWordsWithJavaUtilList_withInt_withBoolean_(id<JavaUtilList> sentence, jint sentNum, jboolean outputLemmas);

__attribute__((unused)) static NSString *EduStanfordNlpTaggerMaxentMaxentTagger_getTsvWordsWithBoolean_withBoolean_withJavaUtilList_(jboolean verbose, jboolean outputLemmas, id<JavaUtilList> sentence);

__attribute__((unused)) static void EduStanfordNlpTaggerMaxentMaxentTagger_writeXMLSentenceWithJavaIoWriter_withJavaUtilList_withInt_withBoolean_(JavaIoWriter *w, id<JavaUtilList> sent, jint sentNum, jboolean outputLemmas);

__attribute__((unused)) static void EduStanfordNlpTaggerMaxentMaxentTagger_tagFromXML(EduStanfordNlpTaggerMaxentMaxentTagger *self);

__attribute__((unused)) static void EduStanfordNlpTaggerMaxentMaxentTagger_runTaggerWithEduStanfordNlpTaggerMaxentTaggerConfig_(EduStanfordNlpTaggerMaxentTaggerConfig *config);

__attribute__((unused)) static void EduStanfordNlpTaggerMaxentMaxentTagger_runTagger(EduStanfordNlpTaggerMaxentMaxentTagger *self);

@interface EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle () {
 @public
  NSString *shortName_;
}

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle, shortName_, NSString *)

inline id<JavaUtilMap> EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle_get_shortNames();
static id<JavaUtilMap> EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle_shortNames;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle, shortNames, id<JavaUtilMap>)

__attribute__((unused)) static void EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle_initWithNSString_withNSString_withInt_(EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle *self, NSString *shortName, NSString *__name, jint __ordinal);

__attribute__((unused)) static EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle *new_EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle_initWithNSString_withNSString_withInt_(NSString *shortName, NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

@interface EduStanfordNlpTaggerMaxentMaxentTagger_TaggerWrapper () {
 @public
  EduStanfordNlpTaggerMaxentTaggerConfig *config_;
  EduStanfordNlpTaggerMaxentMaxentTagger *tagger_;
  id<EduStanfordNlpProcessTokenizerFactory> tokenizerFactory_;
  jint sentNum_;
  jboolean tokenize_;
  jboolean outputVerbosity_, outputLemmas_;
  EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle *outputStyle_;
  EduStanfordNlpProcessMorphology *morpha_;
}

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpTaggerMaxentMaxentTagger_TaggerWrapper, config_, EduStanfordNlpTaggerMaxentTaggerConfig *)
J2OBJC_FIELD_SETTER(EduStanfordNlpTaggerMaxentMaxentTagger_TaggerWrapper, tagger_, EduStanfordNlpTaggerMaxentMaxentTagger *)
J2OBJC_FIELD_SETTER(EduStanfordNlpTaggerMaxentMaxentTagger_TaggerWrapper, tokenizerFactory_, id<EduStanfordNlpProcessTokenizerFactory>)
J2OBJC_FIELD_SETTER(EduStanfordNlpTaggerMaxentMaxentTagger_TaggerWrapper, outputStyle_, EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle *)
J2OBJC_FIELD_SETTER(EduStanfordNlpTaggerMaxentMaxentTagger_TaggerWrapper, morpha_, EduStanfordNlpProcessMorphology *)

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpTaggerMaxentMaxentTagger)

NSString *EduStanfordNlpTaggerMaxentMaxentTagger_BASE_TAGGER_HOME = @"$NLP_DATA_HOME/data/pos-tagger/distrib";
NSString *EduStanfordNlpTaggerMaxentMaxentTagger_TAGGER_HOME;
NSString *EduStanfordNlpTaggerMaxentMaxentTagger_DEFAULT_NLP_GROUP_MODEL_PATH;
NSString *EduStanfordNlpTaggerMaxentMaxentTagger_DEFAULT_JAR_PATH = @"edu/stanford/nlp/models/pos-tagger/english-left3words/english-left3words-distsim.tagger";
NSString *EduStanfordNlpTaggerMaxentMaxentTagger_DEFAULT_DISTRIBUTION_PATH = @"models/english-left3words-distsim.tagger";
jint EduStanfordNlpTaggerMaxentMaxentTagger_RARE_WORD_THRESH;
jint EduStanfordNlpTaggerMaxentMaxentTagger_MIN_FEATURE_THRESH;
jint EduStanfordNlpTaggerMaxentMaxentTagger_CUR_WORD_MIN_FEATURE_THRESH;
jint EduStanfordNlpTaggerMaxentMaxentTagger_RARE_WORD_MIN_FEATURE_THRESH;
jint EduStanfordNlpTaggerMaxentMaxentTagger_VERY_COMMON_WORD_THRESH;
jboolean EduStanfordNlpTaggerMaxentMaxentTagger_OCCURRING_TAGS_ONLY;
jboolean EduStanfordNlpTaggerMaxentMaxentTagger_POSSIBLE_TAGS_ONLY;

@implementation EduStanfordNlpTaggerMaxentMaxentTagger

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpTaggerMaxentMaxentTagger_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithEduStanfordNlpTaggerMaxentTaggerConfig:(EduStanfordNlpTaggerMaxentTaggerConfig *)config {
  EduStanfordNlpTaggerMaxentMaxentTagger_initWithEduStanfordNlpTaggerMaxentTaggerConfig_(self, config);
  return self;
}

- (instancetype)initWithNSString:(NSString *)modelFile {
  EduStanfordNlpTaggerMaxentMaxentTagger_initWithNSString_(self, modelFile);
  return self;
}

- (instancetype)initWithNSString:(NSString *)modelFile
          withJavaUtilProperties:(JavaUtilProperties *)config {
  EduStanfordNlpTaggerMaxentMaxentTagger_initWithNSString_withJavaUtilProperties_(self, modelFile, config);
  return self;
}

- (instancetype)initWithNSString:(NSString *)modelFile
          withJavaUtilProperties:(JavaUtilProperties *)config
                     withBoolean:(jboolean)printLoading {
  EduStanfordNlpTaggerMaxentMaxentTagger_initWithNSString_withJavaUtilProperties_withBoolean_(self, modelFile, config, printLoading);
  return self;
}

- (jint)addTagWithNSString:(NSString *)tag {
  return [((EduStanfordNlpTaggerMaxentTTags *) nil_chk(tags_)) addWithNSString:tag];
}

- (jint)getTagIndexWithNSString:(NSString *)tag {
  return [((EduStanfordNlpTaggerMaxentTTags *) nil_chk(tags_)) getIndexWithNSString:tag];
}

- (jint)numTags {
  return [((EduStanfordNlpTaggerMaxentTTags *) nil_chk(tags_)) getSize];
}

- (NSString *)getTagWithInt:(jint)index {
  return [((EduStanfordNlpTaggerMaxentTTags *) nil_chk(tags_)) getTagWithInt:index];
}

- (id<JavaUtilSet>)tagSet {
  return [((EduStanfordNlpTaggerMaxentTTags *) nil_chk(tags_)) tagSet];
}

- (EduStanfordNlpMaxentIisLambdaSolve *)getLambdaSolve {
  return prob_;
}

- (void)init__WithEduStanfordNlpTaggerMaxentTaggerConfig:(EduStanfordNlpTaggerMaxentTaggerConfig *)config {
  if (initted_) return;
  self->config_ = config;
  NSString *lang, *arch;
  IOSObjectArray *openClassTags, *closedClassTags;
  if (config == nil) {
    lang = @"english";
    arch = @"left3words";
    openClassTags = JreLoadStatic(EduStanfordNlpUtilStringUtils, EMPTY_STRING_ARRAY);
    closedClassTags = JreLoadStatic(EduStanfordNlpUtilStringUtils, EMPTY_STRING_ARRAY);
    wordFunction_ = nil;
  }
  else {
    self->VERBOSE_ = [config getVerbose];
    lang = [config getLang];
    arch = [config getArch];
    openClassTags = [config getOpenClassTags];
    closedClassTags = [config getClosedClassTags];
    if (![((NSString *) nil_chk([config getWordFunction])) isEqual:@""]) {
      wordFunction_ = EduStanfordNlpUtilReflectionLoading_loadByReflectionWithNSString_withNSObjectArray_([config getWordFunction], [IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]);
    }
    if (((((IOSObjectArray *) nil_chk(openClassTags))->size_ > 0) && ![((NSString *) nil_chk(lang)) isEqual:@""]) || ((((IOSObjectArray *) nil_chk(closedClassTags))->size_ > 0) && ![((NSString *) nil_chk(lang)) isEqual:@""]) || ((closedClassTags->size_ > 0) && (openClassTags->size_ > 0))) {
      @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$$I$$$I$$$", @"At least two of lang (\"", lang, @"\"), openClassTags (length ", openClassTags->size_, @": ", JavaUtilArrays_toStringWithNSObjectArray_(openClassTags), @"),and closedClassTags (length ", ((IOSObjectArray *) nil_chk(closedClassTags))->size_, @": ", JavaUtilArrays_toStringWithNSObjectArray_(closedClassTags), @") specified---you must choose one!"));
    }
    else if ((openClassTags->size_ == 0) && [((NSString *) nil_chk(lang)) isEqual:@""] && (((IOSObjectArray *) nil_chk(closedClassTags))->size_ == 0) && ![config getLearnClosedClassTags]) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"warning: no language set, no open-class tags specified, and no closed-class tags specified; assuming ALL tags are open class tags"];
    }
  }
  if (((IOSObjectArray *) nil_chk(openClassTags))->size_ > 0) {
    tags_ = new_EduStanfordNlpTaggerMaxentTTags_init();
    [tags_ setOpenClassTagsWithNSStringArray:openClassTags];
  }
  else if (((IOSObjectArray *) nil_chk(closedClassTags))->size_ > 0) {
    tags_ = new_EduStanfordNlpTaggerMaxentTTags_init();
    [tags_ setClosedClassTagsWithNSStringArray:closedClassTags];
  }
  else {
    tags_ = new_EduStanfordNlpTaggerMaxentTTags_initWithNSString_(lang);
  }
  defaultScore_ = [((NSString *) nil_chk(lang)) isEqual:@"english"] ? 1.0 : 0.0;
  if (config != nil) {
    rareWordThresh_ = [config getRareWordThresh];
    minFeatureThresh_ = [config getMinFeatureThresh];
    curWordMinFeatureThresh_ = [config getCurWordMinFeatureThresh];
    rareWordMinFeatureThresh_ = [config getRareWordMinFeatureThresh];
    veryCommonWordThresh_ = [config getVeryCommonWordThresh];
    occurringTagsOnly_ = [config occurringTagsOnly];
    possibleTagsOnly_ = [config possibleTagsOnly];
    if ([config getDefaultScore] >= 0) defaultScore_ = [config getDefaultScore];
  }
  defaultScores_ = nil;
  if (config == nil || [config getMode] == JreLoadEnum(EduStanfordNlpTaggerMaxentTaggerConfig_Mode, TRAIN)) {
    extractors_ = new_EduStanfordNlpTaggerMaxentExtractors_initWithEduStanfordNlpTaggerMaxentExtractorArray_(EduStanfordNlpTaggerMaxentExtractorFrames_getExtractorFramesWithNSString_(arch));
    extractorsRare_ = new_EduStanfordNlpTaggerMaxentExtractors_initWithEduStanfordNlpTaggerMaxentExtractorArray_(EduStanfordNlpTaggerMaxentExtractorFramesRare_getExtractorFramesRareWithNSString_withEduStanfordNlpTaggerMaxentTTags_(arch, tags_));
    EduStanfordNlpTaggerMaxentMaxentTagger_setExtractorsGlobal(self);
  }
  ambClasses_ = new_EduStanfordNlpTaggerMaxentAmbiguityClasses_initWithEduStanfordNlpTaggerMaxentTTags_(tags_);
  initted_ = true;
}

- (void)initDefaultScores {
  EduStanfordNlpTaggerMaxentMaxentTagger_initDefaultScores(self);
}

- (jdouble)getInactiveTagDefaultScoreWithInt:(jint)nDefault {
  if (defaultScores_ == nil) {
    EduStanfordNlpTaggerMaxentMaxentTagger_initDefaultScores(self);
  }
  return IOSDoubleArray_Get(nil_chk(defaultScores_), nDefault);
}

- (jboolean)hasApproximateScoring {
  return defaultScore_ > 0.0;
}

- (id<EduStanfordNlpProcessTokenizerFactory>)chooseTokenizerFactory {
  return EduStanfordNlpTaggerMaxentMaxentTagger_chooseTokenizerFactoryWithBoolean_withNSString_withNSString_withBoolean_([((EduStanfordNlpTaggerMaxentTaggerConfig *) nil_chk(config_)) getTokenize], [((EduStanfordNlpTaggerMaxentTaggerConfig *) nil_chk(config_)) getTokenizerFactory], [((EduStanfordNlpTaggerMaxentTaggerConfig *) nil_chk(config_)) getTokenizerOptions], [((EduStanfordNlpTaggerMaxentTaggerConfig *) nil_chk(config_)) getTokenizerInvertible]);
}

+ (id<EduStanfordNlpProcessTokenizerFactory>)chooseTokenizerFactoryWithBoolean:(jboolean)tokenize
                                                                  withNSString:(NSString *)tokenizerFactory
                                                                  withNSString:(NSString *)tokenizerOptions
                                                                   withBoolean:(jboolean)invertible {
  return EduStanfordNlpTaggerMaxentMaxentTagger_chooseTokenizerFactoryWithBoolean_withNSString_withNSString_withBoolean_(tokenize, tokenizerFactory, tokenizerOptions, invertible);
}

- (void)saveExtractorsWithJavaIoOutputStream:(JavaIoOutputStream *)os {
  EduStanfordNlpTaggerMaxentMaxentTagger_saveExtractorsWithJavaIoOutputStream_(self, os);
}

- (void)readExtractorsWithJavaIoInputStream:(JavaIoInputStream *)file {
  EduStanfordNlpTaggerMaxentMaxentTagger_readExtractorsWithJavaIoInputStream_(self, file);
}

- (void)setExtractorsGlobal {
  EduStanfordNlpTaggerMaxentMaxentTagger_setExtractorsGlobal(self);
}

- (void)removeDeadRules {
  EduStanfordNlpTaggerMaxentMaxentTagger_removeDeadRules(self);
}

- (void)simplifyLambda {
  EduStanfordNlpTaggerMaxentMaxentTagger_simplifyLambda(self);
}

- (void)saveModelWithNSString:(NSString *)filename {
  @try {
    JavaIoDataOutputStream *file = EduStanfordNlpIoIOUtils_getDataOutputStreamWithNSString_(filename);
    [self saveModelWithJavaIoDataOutputStream:file];
    [((JavaIoDataOutputStream *) nil_chk(file)) close];
  }
  @catch (JavaIoIOException *ioe) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$", @"Error saving tagger to file ", filename)];
    @throw new_EduStanfordNlpIoRuntimeIOException_initWithNSException_(ioe);
  }
}

- (void)saveModelWithJavaIoDataOutputStream:(JavaIoDataOutputStream *)file {
  [((EduStanfordNlpTaggerMaxentTaggerConfig *) nil_chk(config_)) saveConfigWithJavaIoOutputStream:file];
  [((JavaIoDataOutputStream *) nil_chk(file)) writeIntWithInt:xSize_];
  [file writeIntWithInt:ySize_];
  [((EduStanfordNlpTaggerMaxentDictionary *) nil_chk(dict_)) saveWithJavaIoDataOutputStream:file];
  [((EduStanfordNlpTaggerMaxentTTags *) nil_chk(tags_)) saveWithJavaIoDataOutputStream:file withJavaUtilMap:tagTokens_];
  EduStanfordNlpTaggerMaxentMaxentTagger_saveExtractorsWithJavaIoOutputStream_(self, file);
  jint sizeAssoc = 0;
  for (id<JavaUtilMap> __strong fValueAssociations in nil_chk(fAssociations_)) {
    for (IOSIntArray * __strong fTagAssociations in nil_chk([((id<JavaUtilMap>) nil_chk(fValueAssociations)) values])) {
      {
        IOSIntArray *a__ = fTagAssociations;
        jint const *b__ = ((IOSIntArray *) nil_chk(a__))->buffer_;
        jint const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          jint association = *b__++;
          if (association >= 0) {
            ++sizeAssoc;
          }
        }
      }
    }
  }
  [file writeIntWithInt:sizeAssoc];
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(fAssociations_)) size]; ++i) {
    id<JavaUtilMap> fValueAssociations = [((id<JavaUtilList>) nil_chk(fAssociations_)) getWithInt:i];
    for (id<JavaUtilMap_Entry> __strong item in nil_chk([((id<JavaUtilMap>) nil_chk(fValueAssociations)) entrySet])) {
      NSString *featureValue = [((id<JavaUtilMap_Entry>) nil_chk(item)) getKey];
      IOSIntArray *fTagAssociations = [item getValue];
      for (jint j = 0; j < ((IOSIntArray *) nil_chk(fTagAssociations))->size_; ++j) {
        jint association = IOSIntArray_Get(fTagAssociations, j);
        if (association >= 0) {
          [file writeIntWithInt:association];
          EduStanfordNlpTaggerMaxentFeatureKey *fk = new_EduStanfordNlpTaggerMaxentFeatureKey_initWithInt_withNSString_withNSString_(i, featureValue, [((EduStanfordNlpTaggerMaxentTTags *) nil_chk(tags_)) getTagWithInt:j]);
          [fk saveWithJavaIoDataOutputStream:file];
        }
      }
    }
  }
  EduStanfordNlpMaxentIisLambdaSolve_save_lambdasWithJavaIoDataOutputStream_withDoubleArray_(file, ((EduStanfordNlpTaggerMaxentLambdaSolveTagger *) nil_chk(prob_))->lambda_);
}

- (void)readModelAndInitWithJavaUtilProperties:(JavaUtilProperties *)config
                                  withNSString:(NSString *)modelFileOrUrl
                                   withBoolean:(jboolean)printLoading {
  @try {
    JavaIoDataInputStream *rf = new_JavaIoDataInputStream_initWithJavaIoInputStream_(EduStanfordNlpIoIOUtils_getInputStreamFromURLOrClasspathOrFileSystemWithNSString_(modelFileOrUrl));
    [self readModelAndInitWithJavaUtilProperties:config withJavaIoDataInputStream:rf withBoolean:printLoading];
    [rf close];
  }
  @catch (JavaIoIOException *e) {
    @throw new_EduStanfordNlpIoRuntimeIOException_initWithNSString_withNSException_(@"Error while loading a tagger model (probably missing model file)", e);
  }
}

- (void)readModelAndInitWithJavaUtilProperties:(JavaUtilProperties *)config
                     withJavaIoDataInputStream:(JavaIoDataInputStream *)rf
                                   withBoolean:(jboolean)printLoading {
  @try {
    EduStanfordNlpUtilTiming *t = new_EduStanfordNlpUtilTiming_init();
    if (printLoading) {
      NSString *source = nil;
      if (config != nil) {
        source = [config getPropertyWithNSString:@"model"];
      }
      if (source == nil) {
        source = @"data stream";
      }
      [t doingWithNSString:JreStrcat("$$", @"Reading POS tagger model from ", source)];
    }
    EduStanfordNlpTaggerMaxentTaggerConfig *taggerConfig = EduStanfordNlpTaggerMaxentTaggerConfig_readConfigWithJavaIoDataInputStream_(rf);
    if (config != nil) {
      [((EduStanfordNlpTaggerMaxentTaggerConfig *) nil_chk(taggerConfig)) setPropertiesWithJavaUtilProperties:config];
    }
    [self init__WithEduStanfordNlpTaggerMaxentTaggerConfig:taggerConfig];
    xSize_ = [((JavaIoDataInputStream *) nil_chk(rf)) readInt];
    ySize_ = [rf readInt];
    [((EduStanfordNlpTaggerMaxentDictionary *) nil_chk(dict_)) readWithJavaIoDataInputStream:rf];
    if (VERBOSE_) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@" dictionary read "];
    }
    [((EduStanfordNlpTaggerMaxentTTags *) nil_chk(tags_)) readWithJavaIoDataInputStream:rf];
    EduStanfordNlpTaggerMaxentMaxentTagger_readExtractorsWithJavaIoInputStream_(self, rf);
    [dict_ setAmbClassesWithEduStanfordNlpTaggerMaxentAmbiguityClasses:ambClasses_ withInt:veryCommonWordThresh_ withEduStanfordNlpTaggerMaxentTTags:tags_];
    IOSIntArray *numFA = [IOSIntArray newArrayWithLength:[((EduStanfordNlpTaggerMaxentExtractors *) nil_chk(extractors_)) size] + [((EduStanfordNlpTaggerMaxentExtractors *) nil_chk(extractorsRare_)) size]];
    jint sizeAssoc = [rf readInt];
    fAssociations_ = EduStanfordNlpUtilGenerics_newArrayList();
    for (jint i = 0; i < [((EduStanfordNlpTaggerMaxentExtractors *) nil_chk(extractors_)) size] + [((EduStanfordNlpTaggerMaxentExtractors *) nil_chk(extractorsRare_)) size]; ++i) {
      [((id<JavaUtilList>) nil_chk(fAssociations_)) addWithId:EduStanfordNlpUtilGenerics_newHashMap()];
    }
    if (VERBOSE_) (void) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printfWithNSString:@"Reading %d feature keys...%n" withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(sizeAssoc) } count:1 type:NSObject_class_()]];
    EduStanfordNlpIoPrintFile *pfVP = nil;
    if (VERBOSE_) {
      pfVP = new_EduStanfordNlpIoPrintFile_initWithNSString_(@"pairs.txt");
    }
    for (jint i = 0; i < sizeAssoc; i++) {
      jint numF = [rf readInt];
      EduStanfordNlpTaggerMaxentFeatureKey *fK = new_EduStanfordNlpTaggerMaxentFeatureKey_init();
      [fK readWithJavaIoDataInputStream:rf];
      (*IOSIntArray_GetRef(numFA, fK->num_))++;
      id<JavaUtilMap> fValueAssociations = [((id<JavaUtilList>) nil_chk(fAssociations_)) getWithInt:fK->num_];
      IOSIntArray *fTagAssociations = [((id<JavaUtilMap>) nil_chk(fValueAssociations)) getWithId:fK->val_];
      if (fTagAssociations == nil) {
        fTagAssociations = [IOSIntArray newArrayWithLength:ySize_];
        for (jint j = 0; j < ySize_; ++j) {
          *IOSIntArray_GetRef(fTagAssociations, j) = -1;
        }
        (void) [fValueAssociations putWithId:fK->val_ withId:fTagAssociations];
      }
      *IOSIntArray_GetRef(fTagAssociations, [((EduStanfordNlpTaggerMaxentTTags *) nil_chk(tags_)) getIndexWithNSString:fK->tag_]) = numF;
    }
    if (VERBOSE_) {
      EduStanfordNlpIoIOUtils_closeIgnoringExceptionsWithJavaIoCloseable_(pfVP);
    }
    if (VERBOSE_) {
      for (jint k = 0; k < numFA->size_; k++) {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$ICI", @" Number of features of kind ", k, ' ', IOSIntArray_Get(numFA, k))];
      }
    }
    prob_ = new_EduStanfordNlpTaggerMaxentLambdaSolveTagger_initWithJavaIoDataInputStream_(rf);
    if (VERBOSE_) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@" prob read "];
    }
    if (printLoading) [t done];
  }
  @catch (JavaIoIOException *e) {
    @throw new_EduStanfordNlpIoRuntimeIOException_initWithNSString_withNSException_(@"Error while loading a tagger model (probably missing model file)", e);
  }
  @catch (JavaLangClassNotFoundException *e) {
    @throw new_EduStanfordNlpIoRuntimeIOException_initWithNSString_withNSException_(@"Error while loading a tagger model (probably missing model file)", e);
  }
}

- (void)dumpModelWithJavaIoPrintStream:(JavaIoPrintStream *)outArg {
  [((JavaIoPrintStream *) nil_chk(outArg)) printlnWithNSString:@"Features: template featureValue tag: lambda"];
  JavaTextNumberFormat *nf = new_JavaTextDecimalFormat_initWithNSString_(@" 0.000000;-0.000000");
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(fAssociations_)) size]; ++i) {
    id<JavaUtilMap> fValueAssociations = [((id<JavaUtilList>) nil_chk(fAssociations_)) getWithInt:i];
    id<JavaUtilList> features = EduStanfordNlpUtilGenerics_newArrayList();
    JavaUtilCollections_sortWithJavaUtilList_(features);
    for (NSString * __strong featureValue in nil_chk(features)) {
      IOSIntArray *fTagAssociations = [((id<JavaUtilMap>) nil_chk(fValueAssociations)) getWithId:featureValue];
      for (jint j = 0; j < ((IOSIntArray *) nil_chk(fTagAssociations))->size_; ++j) {
        jint association = IOSIntArray_Get(fTagAssociations, j);
        if (association >= 0) {
          EduStanfordNlpTaggerMaxentFeatureKey *fk = new_EduStanfordNlpTaggerMaxentFeatureKey_initWithInt_withNSString_withNSString_(i, featureValue, [((EduStanfordNlpTaggerMaxentTTags *) nil_chk(tags_)) getTagWithInt:j]);
          [outArg printlnWithNSString:JreStrcat("@C$C$$$", (fk->num_ < [((EduStanfordNlpTaggerMaxentExtractors *) nil_chk(extractors_)) size] ? [((EduStanfordNlpTaggerMaxentExtractors *) nil_chk(extractors_)) getWithInt:fk->num_] : [((EduStanfordNlpTaggerMaxentExtractors *) nil_chk(extractorsRare_)) getWithInt:fk->num_ - [((EduStanfordNlpTaggerMaxentExtractors *) nil_chk(extractors_)) size]]), ' ', fk->val_, ' ', fk->tag_, @": ", [nf formatWithDouble:IOSDoubleArray_Get(nil_chk(((EduStanfordNlpMaxentIisLambdaSolve *) nil_chk([self getLambdaSolve]))->lambda_), association)])];
        }
      }
    }
  }
}

- (jboolean)isRareWithNSString:(NSString *)word {
  return [((EduStanfordNlpTaggerMaxentDictionary *) nil_chk(dict_)) sumWithNSString:word] < rareWordThresh_;
}

- (NSString *)tagTokenizedStringWithNSString:(NSString *)toTag {
  id<JavaUtilList> sent = EduStanfordNlpLingSentence_toUntaggedListWithJavaUtilList_(JavaUtilArrays_asListWithNSObjectArray_([((NSString *) nil_chk(toTag)) split:@"\\s+"]));
  EduStanfordNlpTaggerMaxentTestSentence *testSentence = new_EduStanfordNlpTaggerMaxentTestSentence_initWithEduStanfordNlpTaggerMaxentMaxentTagger_(self);
  (void) [testSentence tagSentenceWithJavaUtilList:sent withBoolean:false];
  return [testSentence getTaggedNice];
}

- (NSString *)tagStringWithNSString:(NSString *)toTag {
  EduStanfordNlpTaggerMaxentMaxentTagger_TaggerWrapper *tw = new_EduStanfordNlpTaggerMaxentMaxentTagger_TaggerWrapper_initWithEduStanfordNlpTaggerMaxentMaxentTagger_(self);
  return [tw applyWithId:toTag];
}

- (id<JavaUtilList>)applyWithId:(id<JavaUtilList>)inArg {
  EduStanfordNlpTaggerMaxentTestSentence *testSentence = new_EduStanfordNlpTaggerMaxentTestSentence_initWithEduStanfordNlpTaggerMaxentMaxentTagger_(self);
  return [testSentence tagSentenceWithJavaUtilList:inArg withBoolean:false];
}

- (id<JavaUtilList>)processWithJavaUtilList:(id<JavaUtilList>)sentences {
  id<JavaUtilList> taggedSentences = EduStanfordNlpUtilGenerics_newArrayList();
  EduStanfordNlpTaggerMaxentTestSentence *testSentence = new_EduStanfordNlpTaggerMaxentTestSentence_initWithEduStanfordNlpTaggerMaxentMaxentTagger_(self);
  for (id<JavaUtilList> __strong sentence in nil_chk(sentences)) {
    [((id<JavaUtilList>) nil_chk(taggedSentences)) addWithId:[testSentence tagSentenceWithJavaUtilList:sentence withBoolean:false]];
  }
  return taggedSentences;
}

- (id<JavaUtilList>)tagSentenceWithJavaUtilList:(id<JavaUtilList>)sentence {
  EduStanfordNlpTaggerMaxentTestSentence *testSentence = new_EduStanfordNlpTaggerMaxentTestSentence_initWithEduStanfordNlpTaggerMaxentMaxentTagger_(self);
  return [testSentence tagSentenceWithJavaUtilList:sentence withBoolean:false];
}

- (id<JavaUtilList>)tagSentenceWithJavaUtilList:(id<JavaUtilList>)sentence
                                    withBoolean:(jboolean)reuseTags {
  EduStanfordNlpTaggerMaxentTestSentence *testSentence = new_EduStanfordNlpTaggerMaxentTestSentence_initWithEduStanfordNlpTaggerMaxentMaxentTagger_(self);
  return [testSentence tagSentenceWithJavaUtilList:sentence withBoolean:reuseTags];
}

- (void)tagCoreLabelsWithJavaUtilList:(id<JavaUtilList>)sentence {
  [self tagCoreLabelsWithJavaUtilList:sentence withBoolean:false];
}

- (void)tagCoreLabelsWithJavaUtilList:(id<JavaUtilList>)sentence
                          withBoolean:(jboolean)reuseTags {
  id<JavaUtilList> taggedWords = [self tagSentenceWithJavaUtilList:sentence withBoolean:reuseTags];
  if ([((id<JavaUtilList>) nil_chk(taggedWords)) size] != [((id<JavaUtilList>) nil_chk(sentence)) size]) @throw new_JavaLangAssertionError_initWithId_(@"Tagged word list not the same length as the original sentence");
  for (jint i = 0, size = [sentence size]; i < size; ++i) {
    [((EduStanfordNlpLingCoreLabel *) nil_chk([sentence getWithInt:i])) setTagWithNSString:[((EduStanfordNlpLingTaggedWord *) nil_chk([taggedWords getWithInt:i])) tag]];
  }
}

+ (void)lemmatizeWithJavaUtilList:(id<JavaUtilList>)sentence
withEduStanfordNlpProcessMorphology:(EduStanfordNlpProcessMorphology *)morpha {
  EduStanfordNlpTaggerMaxentMaxentTagger_lemmatizeWithJavaUtilList_withEduStanfordNlpProcessMorphology_(sentence, morpha);
}

+ (id<JavaUtilList>)castCoreLabelsWithJavaUtilList:(id<JavaUtilList>)sent {
  return EduStanfordNlpTaggerMaxentMaxentTagger_castCoreLabelsWithJavaUtilList_(sent);
}

+ (id<JavaUtilList>)tokenizeTextWithJavaIoReader:(JavaIoReader *)r {
  return EduStanfordNlpTaggerMaxentMaxentTagger_tokenizeTextWithJavaIoReader_(r);
}

+ (id<JavaUtilList>)tokenizeTextWithJavaIoReader:(JavaIoReader *)r
       withEduStanfordNlpProcessTokenizerFactory:(id<EduStanfordNlpProcessTokenizerFactory>)tokenizerFactory {
  return EduStanfordNlpTaggerMaxentMaxentTagger_tokenizeTextWithJavaIoReader_withEduStanfordNlpProcessTokenizerFactory_(r, tokenizerFactory);
}

+ (void)dumpModelWithEduStanfordNlpTaggerMaxentTaggerConfig:(EduStanfordNlpTaggerMaxentTaggerConfig *)config {
  EduStanfordNlpTaggerMaxentMaxentTagger_dumpModelWithEduStanfordNlpTaggerMaxentTaggerConfig_(config);
}

+ (void)runTestWithEduStanfordNlpTaggerMaxentTaggerConfig:(EduStanfordNlpTaggerMaxentTaggerConfig *)config {
  EduStanfordNlpTaggerMaxentMaxentTagger_runTestWithEduStanfordNlpTaggerMaxentTaggerConfig_(config);
}

+ (void)trainAndSaveModelWithEduStanfordNlpTaggerMaxentTaggerConfig:(EduStanfordNlpTaggerMaxentTaggerConfig *)config {
  EduStanfordNlpTaggerMaxentMaxentTagger_trainAndSaveModelWithEduStanfordNlpTaggerMaxentTaggerConfig_(config);
}

+ (void)runTrainingWithEduStanfordNlpTaggerMaxentTaggerConfig:(EduStanfordNlpTaggerMaxentTaggerConfig *)config {
  EduStanfordNlpTaggerMaxentMaxentTagger_runTrainingWithEduStanfordNlpTaggerMaxentTaggerConfig_(config);
}

+ (void)printErrWordsPerSecWithLong:(jlong)milliSec
                            withInt:(jint)numWords {
  EduStanfordNlpTaggerMaxentMaxentTagger_printErrWordsPerSecWithLong_withInt_(milliSec, numWords);
}

+ (NSString *)getXMLWordsWithJavaUtilList:(id<JavaUtilList>)sentence
                                  withInt:(jint)sentNum
                              withBoolean:(jboolean)outputLemmas {
  return EduStanfordNlpTaggerMaxentMaxentTagger_getXMLWordsWithJavaUtilList_withInt_withBoolean_(sentence, sentNum, outputLemmas);
}

+ (NSString *)getTsvWordsWithBoolean:(jboolean)verbose
                         withBoolean:(jboolean)outputLemmas
                    withJavaUtilList:(id<JavaUtilList>)sentence {
  return EduStanfordNlpTaggerMaxentMaxentTagger_getTsvWordsWithBoolean_withBoolean_withJavaUtilList_(verbose, outputLemmas, sentence);
}

+ (void)writeXMLSentenceWithJavaIoWriter:(JavaIoWriter *)w
                        withJavaUtilList:(id<JavaUtilList>)sent
                                 withInt:(jint)sentNum
                             withBoolean:(jboolean)outputLemmas {
  EduStanfordNlpTaggerMaxentMaxentTagger_writeXMLSentenceWithJavaIoWriter_withJavaUtilList_withInt_withBoolean_(w, sent, sentNum, outputLemmas);
}

- (void)tagFromXMLWithJavaIoInputStream:(JavaIoInputStream *)input
                       withJavaIoWriter:(JavaIoWriter *)writer
                      withNSStringArray:(IOSObjectArray *)xmlTags {
  EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle *outputStyle = EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle_fromShortNameWithNSString_([((EduStanfordNlpTaggerMaxentTaggerConfig *) nil_chk(config_)) getOutputFormat]);
  EduStanfordNlpProcessTransformXML *txml = new_EduStanfordNlpProcessTransformXML_init();
  switch ([outputStyle ordinal]) {
    case EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle_Enum_XML:
    case EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle_Enum_INLINE_XML:
    [txml transformXMLWithNSStringArray:xmlTags withJavaUtilFunctionFunction:new_EduStanfordNlpTaggerMaxentMaxentTagger_TaggerWrapper_initWithEduStanfordNlpTaggerMaxentMaxentTagger_(self) withJavaIoInputStream:input withJavaIoWriter:writer withEduStanfordNlpProcessTransformXML_SAXInterface:new_EduStanfordNlpProcessTransformXML_NoEscapingSAXInterface_init()];
    break;
    case EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle_Enum_SLASH_TAGS:
    case EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle_Enum_TSV:
    [txml transformXMLWithNSStringArray:xmlTags withJavaUtilFunctionFunction:new_EduStanfordNlpTaggerMaxentMaxentTagger_TaggerWrapper_initWithEduStanfordNlpTaggerMaxentMaxentTagger_(self) withJavaIoInputStream:input withJavaIoWriter:writer withEduStanfordNlpProcessTransformXML_SAXInterface:new_EduStanfordNlpProcessTransformXML_SAXInterface_init()];
    break;
    default:
    @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$@", @"Unexpected format ", outputStyle));
  }
}

- (void)tagFromXMLWithJavaIoReader:(JavaIoReader *)input
                  withJavaIoWriter:(JavaIoWriter *)writer
                 withNSStringArray:(IOSObjectArray *)xmlTags {
  EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle *outputStyle = EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle_fromShortNameWithNSString_([((EduStanfordNlpTaggerMaxentTaggerConfig *) nil_chk(config_)) getOutputFormat]);
  EduStanfordNlpProcessTransformXML *txml = new_EduStanfordNlpProcessTransformXML_init();
  switch ([outputStyle ordinal]) {
    case EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle_Enum_XML:
    case EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle_Enum_INLINE_XML:
    [txml transformXMLWithNSStringArray:xmlTags withJavaUtilFunctionFunction:new_EduStanfordNlpTaggerMaxentMaxentTagger_TaggerWrapper_initWithEduStanfordNlpTaggerMaxentMaxentTagger_(self) withJavaIoReader:input withJavaIoWriter:writer withEduStanfordNlpProcessTransformXML_SAXInterface:new_EduStanfordNlpProcessTransformXML_NoEscapingSAXInterface_init()];
    break;
    case EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle_Enum_SLASH_TAGS:
    case EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle_Enum_TSV:
    [txml transformXMLWithNSStringArray:xmlTags withJavaUtilFunctionFunction:new_EduStanfordNlpTaggerMaxentMaxentTagger_TaggerWrapper_initWithEduStanfordNlpTaggerMaxentMaxentTagger_(self) withJavaIoReader:input withJavaIoWriter:writer withEduStanfordNlpProcessTransformXML_SAXInterface:new_EduStanfordNlpProcessTransformXML_SAXInterface_init()];
    break;
    default:
    @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$@", @"Unexpected format ", outputStyle));
  }
}

- (void)tagFromXML {
  EduStanfordNlpTaggerMaxentMaxentTagger_tagFromXML(self);
}

+ (void)runTaggerWithEduStanfordNlpTaggerMaxentTaggerConfig:(EduStanfordNlpTaggerMaxentTaggerConfig *)config {
  EduStanfordNlpTaggerMaxentMaxentTagger_runTaggerWithEduStanfordNlpTaggerMaxentTaggerConfig_(config);
}

- (void)runTagger {
  EduStanfordNlpTaggerMaxentMaxentTagger_runTagger(self);
}

- (void)runTaggerStdinWithJavaIoBufferedReader:(JavaIoBufferedReader *)reader
                      withJavaIoBufferedWriter:(JavaIoBufferedWriter *)writer
withEduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle:(EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle *)outputStyle {
  id<EduStanfordNlpProcessTokenizerFactory> tokenizerFactory = [self chooseTokenizerFactory];
  jlong totalMillis = 0;
  jint numWords = 0;
  jint numSentences = 0;
  jboolean outputVerbosity = [((EduStanfordNlpTaggerMaxentTaggerConfig *) nil_chk(config_)) getOutputVerbosity];
  jboolean outputLemmas = [((EduStanfordNlpTaggerMaxentTaggerConfig *) nil_chk(config_)) getOutputLemmas];
  EduStanfordNlpProcessMorphology *morpha = (outputLemmas) ? new_EduStanfordNlpProcessMorphology_init() : nil;
  if (outputStyle == JreLoadEnum(EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle, XML) || outputStyle == JreLoadEnum(EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle, INLINE_XML)) {
    [((JavaIoBufferedWriter *) nil_chk(writer)) writeWithNSString:JreStrcat("$$$", @"<?xml version=\"1.0\" encoding=\"", [((EduStanfordNlpTaggerMaxentTaggerConfig *) nil_chk(config_)) getEncoding], @"\"?>\n")];
    [writer writeWithNSString:@"<pos>\n"];
  }
  NSString *sentenceDelimiter = [((EduStanfordNlpTaggerMaxentTaggerConfig *) nil_chk(config_)) getSentenceDelimiter];
  if (sentenceDelimiter != nil && [sentenceDelimiter isEqual:@"newline"]) {
    sentenceDelimiter = @"\n";
  }
  while (true) {
    EduStanfordNlpProcessDocumentPreprocessor *docProcessor;
    NSString *line = [((JavaIoBufferedReader *) nil_chk(reader)) readLine];
    if (line == nil) break;
    docProcessor = new_EduStanfordNlpProcessDocumentPreprocessor_initWithJavaIoReader_(new_JavaIoStringReader_initWithNSString_(line));
    [docProcessor setTokenizerFactoryWithEduStanfordNlpProcessTokenizerFactory:tokenizerFactory];
    [docProcessor setSentenceDelimiterWithNSString:sentenceDelimiter];
    if ([((EduStanfordNlpTaggerMaxentTaggerConfig *) nil_chk(config_)) keepEmptySentences]) {
      [docProcessor setKeepEmptySentencesWithBoolean:true];
    }
    for (id<JavaUtilList> __strong sentence in docProcessor) {
      numWords += [((id<JavaUtilList>) nil_chk(sentence)) size];
      EduStanfordNlpUtilTiming *t = new_EduStanfordNlpUtilTiming_init();
      [self tagAndOutputSentenceWithJavaUtilList:sentence withBoolean:outputLemmas withEduStanfordNlpProcessMorphology:morpha withEduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle:outputStyle withBoolean:outputVerbosity withInt:numSentences withNSString:@"" withJavaIoWriter:writer];
      totalMillis += [t stop];
      [((JavaIoBufferedWriter *) nil_chk(writer)) newLine];
      [writer flush];
      numSentences++;
    }
  }
  if (outputStyle == JreLoadEnum(EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle, XML) || outputStyle == JreLoadEnum(EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle, INLINE_XML)) {
    [((JavaIoBufferedWriter *) nil_chk(writer)) writeWithNSString:@"</pos>\n"];
  }
  [((JavaIoBufferedWriter *) nil_chk(writer)) flush];
  EduStanfordNlpTaggerMaxentMaxentTagger_printErrWordsPerSecWithLong_withInt_(totalMillis, numWords);
}

- (void)runTaggerWithJavaLangIterable:(id<JavaLangIterable>)document
             withJavaIoBufferedWriter:(JavaIoBufferedWriter *)writer
withEduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle:(EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle *)outputStyle {
  EduStanfordNlpUtilTiming *t = new_EduStanfordNlpUtilTiming_init();
  jint numWords = 0;
  jint numSentences = 0;
  jboolean outputVerbosity = [((EduStanfordNlpTaggerMaxentTaggerConfig *) nil_chk(config_)) getOutputVerbosity];
  jboolean outputLemmas = [((EduStanfordNlpTaggerMaxentTaggerConfig *) nil_chk(config_)) getOutputLemmas];
  if (outputStyle == JreLoadEnum(EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle, XML) || outputStyle == JreLoadEnum(EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle, INLINE_XML)) {
    [((JavaIoBufferedWriter *) nil_chk(writer)) writeWithNSString:JreStrcat("$$$", @"<?xml version=\"1.0\" encoding=\"", [((EduStanfordNlpTaggerMaxentTaggerConfig *) nil_chk(config_)) getEncoding], @"\"?>\n")];
    [writer writeWithNSString:@"<pos>\n"];
  }
  if ([((EduStanfordNlpTaggerMaxentTaggerConfig *) nil_chk(config_)) getNThreads] != 1) {
    EduStanfordNlpUtilConcurrentMulticoreWrapper *wrapper = new_EduStanfordNlpUtilConcurrentMulticoreWrapper_initWithInt_withEduStanfordNlpUtilConcurrentThreadsafeProcessor_([((EduStanfordNlpTaggerMaxentTaggerConfig *) nil_chk(config_)) getNThreads], new_EduStanfordNlpTaggerMaxentMaxentTagger_SentenceTaggingProcessor_initWithEduStanfordNlpTaggerMaxentMaxentTagger_withBoolean_(self, outputLemmas));
    for (id<JavaUtilList> __strong sentence in nil_chk(document)) {
      [wrapper putWithId:sentence];
      while ([wrapper peek]) {
        id<JavaUtilList> taggedSentence = [wrapper poll];
        numWords += [((id<JavaUtilList>) nil_chk(taggedSentence)) size];
        [self outputTaggedSentenceWithJavaUtilList:taggedSentence withBoolean:outputLemmas withEduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle:outputStyle withBoolean:outputVerbosity withInt:numSentences withNSString:@"\n" withJavaIoWriter:writer];
        numSentences++;
      }
    }
    [wrapper join];
    while ([wrapper peek]) {
      id<JavaUtilList> taggedSentence = [wrapper poll];
      numWords += [((id<JavaUtilList>) nil_chk(taggedSentence)) size];
      [self outputTaggedSentenceWithJavaUtilList:taggedSentence withBoolean:outputLemmas withEduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle:outputStyle withBoolean:outputVerbosity withInt:numSentences withNSString:@"\n" withJavaIoWriter:writer];
      numSentences++;
    }
  }
  else {
    EduStanfordNlpProcessMorphology *morpha = (outputLemmas) ? new_EduStanfordNlpProcessMorphology_init() : nil;
    for (id<JavaUtilList> __strong sentence in nil_chk(document)) {
      numWords += [((id<JavaUtilList>) nil_chk(sentence)) size];
      [self tagAndOutputSentenceWithJavaUtilList:sentence withBoolean:outputLemmas withEduStanfordNlpProcessMorphology:morpha withEduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle:outputStyle withBoolean:outputVerbosity withInt:numSentences withNSString:@"\n" withJavaIoWriter:writer];
      numSentences++;
    }
  }
  if (outputStyle == JreLoadEnum(EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle, XML) || outputStyle == JreLoadEnum(EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle, INLINE_XML)) {
    [((JavaIoBufferedWriter *) nil_chk(writer)) writeWithNSString:@"</pos>\n"];
  }
  [((JavaIoBufferedWriter *) nil_chk(writer)) flush];
  jlong millis = [t stop];
  EduStanfordNlpTaggerMaxentMaxentTagger_printErrWordsPerSecWithLong_withInt_(millis, numWords);
}

- (void)runTaggerWithJavaIoBufferedReader:(JavaIoBufferedReader *)reader
                 withJavaIoBufferedWriter:(JavaIoBufferedWriter *)writer
                             withNSString:(NSString *)tagInside
withEduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle:(EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle *)outputStyle {
  NSString *sentenceDelimiter = [((EduStanfordNlpTaggerMaxentTaggerConfig *) nil_chk(config_)) getSentenceDelimiter];
  if (sentenceDelimiter != nil && [sentenceDelimiter isEqual:@"newline"]) {
    sentenceDelimiter = @"\n";
  }
  id<EduStanfordNlpProcessTokenizerFactory> tokenizerFactory = [self chooseTokenizerFactory];
  EduStanfordNlpProcessDocumentPreprocessor *docProcessor;
  if (((jint) [((NSString *) nil_chk(tagInside)) length]) > 0) {
    docProcessor = new_EduStanfordNlpProcessDocumentPreprocessor_initWithJavaIoReader_withEduStanfordNlpProcessDocumentPreprocessor_DocType_(reader, JreLoadEnum(EduStanfordNlpProcessDocumentPreprocessor_DocType, XML));
    [docProcessor setElementDelimiterWithNSString:tagInside];
    if ([((EduStanfordNlpTaggerMaxentTaggerConfig *) nil_chk(config_)) keepEmptySentences]) {
      [docProcessor setKeepEmptySentencesWithBoolean:true];
    }
  }
  else {
    docProcessor = new_EduStanfordNlpProcessDocumentPreprocessor_initWithJavaIoReader_(reader);
    [docProcessor setSentenceDelimiterWithNSString:sentenceDelimiter];
    if ([((EduStanfordNlpTaggerMaxentTaggerConfig *) nil_chk(config_)) keepEmptySentences]) {
      [docProcessor setKeepEmptySentencesWithBoolean:true];
    }
  }
  [docProcessor setTokenizerFactoryWithEduStanfordNlpProcessTokenizerFactory:tokenizerFactory];
  [self runTaggerWithJavaLangIterable:docProcessor withJavaIoBufferedWriter:writer withEduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle:outputStyle];
}

- (id<JavaUtilList>)tagCoreLabelsOrHasWordsWithJavaUtilList:(id<JavaUtilList>)sentence
                        withEduStanfordNlpProcessMorphology:(EduStanfordNlpProcessMorphology *)morpha
                                                withBoolean:(jboolean)outputLemmas {
  if ([((id<JavaUtilList>) nil_chk(sentence)) size] > 0 && [[sentence getWithInt:0] isKindOfClass:[EduStanfordNlpLingCoreLabel class]]) {
    id<JavaUtilList> coreLabels = EduStanfordNlpTaggerMaxentMaxentTagger_castCoreLabelsWithJavaUtilList_(sentence);
    [self tagCoreLabelsWithJavaUtilList:coreLabels];
    if (outputLemmas) {
      if (morpha == nil) {
        morpha = new_EduStanfordNlpProcessMorphology_init();
      }
      EduStanfordNlpTaggerMaxentMaxentTagger_lemmatizeWithJavaUtilList_withEduStanfordNlpProcessMorphology_(coreLabels, morpha);
    }
    return coreLabels;
  }
  else {
    id<JavaUtilList> taggedSentence = [self tagSentenceWithJavaUtilList:sentence withBoolean:false];
    return taggedSentence;
  }
}

- (void)tagAndOutputSentenceWithJavaUtilList:(id<JavaUtilList>)sentence
                                 withBoolean:(jboolean)outputLemmas
         withEduStanfordNlpProcessMorphology:(EduStanfordNlpProcessMorphology *)morpha
withEduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle:(EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle *)outputStyle
                                 withBoolean:(jboolean)outputVerbosity
                                     withInt:(jint)numSentences
                                withNSString:(NSString *)separator
                            withJavaIoWriter:(JavaIoWriter *)writer {
  sentence = [self tagCoreLabelsOrHasWordsWithJavaUtilList:sentence withEduStanfordNlpProcessMorphology:morpha withBoolean:outputLemmas];
  [self outputTaggedSentenceWithJavaUtilList:sentence withBoolean:outputLemmas withEduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle:outputStyle withBoolean:outputVerbosity withInt:numSentences withNSString:separator withJavaIoWriter:writer];
}

- (void)outputTaggedSentenceWithJavaUtilList:(id<JavaUtilList>)sentence
                                 withBoolean:(jboolean)outputLemmas
withEduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle:(EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle *)outputStyle
                                 withBoolean:(jboolean)outputVerbosity
                                     withInt:(jint)numSentences
                                withNSString:(NSString *)separator
                            withJavaIoWriter:(JavaIoWriter *)writer {
  @try {
    switch ([outputStyle ordinal]) {
      case EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle_Enum_TSV:
      [((JavaIoWriter *) nil_chk(writer)) writeWithNSString:EduStanfordNlpTaggerMaxentMaxentTagger_getTsvWordsWithBoolean_withBoolean_withJavaUtilList_(outputVerbosity, outputLemmas, sentence)];
      break;
      case EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle_Enum_XML:
      case EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle_Enum_INLINE_XML:
      EduStanfordNlpTaggerMaxentMaxentTagger_writeXMLSentenceWithJavaIoWriter_withJavaUtilList_withInt_withBoolean_(writer, sentence, numSentences, outputLemmas);
      break;
      case EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle_Enum_SLASH_TAGS:
      [((JavaIoWriter *) nil_chk(writer)) writeWithNSString:EduStanfordNlpLingSentence_listToStringWithJavaUtilList_withBoolean_withNSString_(sentence, false, [((EduStanfordNlpTaggerMaxentTaggerConfig *) nil_chk(config_)) getTagSeparator])];
      [writer writeWithNSString:separator];
      break;
      default:
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"Unsupported output style ", outputStyle));
    }
  }
  @catch (JavaIoIOException *e) {
    @throw new_EduStanfordNlpIoRuntimeIOException_initWithNSException_(e);
  }
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  EduStanfordNlpTaggerMaxentMaxentTagger_mainWithNSStringArray_(args);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 4, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 5, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 8, -1, -1 },
    { NULL, "LEduStanfordNlpMaxentIisLambdaSolve;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 9, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x22, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x0, 10, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpProcessTokenizerFactory;", 0x4, -1, -1, -1, 11, -1, -1 },
    { NULL, "LEduStanfordNlpProcessTokenizerFactory;", 0xc, 12, 13, -1, 14, -1, -1 },
    { NULL, "V", 0x2, 15, 16, 17, -1, -1, -1 },
    { NULL, "V", 0x2, 18, 19, 20, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 21, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 21, 22, 17, -1, -1, -1 },
    { NULL, "V", 0x4, 23, 24, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 23, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 26, 27, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 28, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 29, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 30, 1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 31, 32, -1, 33, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 34, 32, -1, 35, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 36, 32, -1, 33, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 36, 37, -1, 38, -1, -1 },
    { NULL, "V", 0x1, 39, 32, -1, 40, -1, -1 },
    { NULL, "V", 0x1, 39, 37, -1, 41, -1, -1 },
    { NULL, "V", 0x9, 42, 43, -1, 44, -1, -1 },
    { NULL, "LJavaUtilList;", 0xa, 45, 32, -1, 46, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 47, 48, -1, 49, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 47, 50, -1, 51, -1, -1 },
    { NULL, "V", 0xa, 26, 0, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 52, 0, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 53, 0, 17, -1, -1, -1 },
    { NULL, "V", 0xa, 54, 0, 17, -1, -1, -1 },
    { NULL, "V", 0xa, 55, 56, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 57, 58, -1, 59, -1, -1 },
    { NULL, "LNSString;", 0xa, 60, 61, -1, 62, -1, -1 },
    { NULL, "V", 0xa, 63, 64, -1, 65, -1, -1 },
    { NULL, "V", 0x81, 66, 67, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 66, 68, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 69, 0, 70, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 70, -1, -1, -1 },
    { NULL, "V", 0x1, 71, 72, 17, -1, -1, -1 },
    { NULL, "V", 0x1, 69, 73, 17, 74, -1, -1 },
    { NULL, "V", 0x1, 69, 75, 17, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 76, 77, -1, 78, -1, -1 },
    { NULL, "V", 0x1, 79, 80, -1, 81, -1, -1 },
    { NULL, "V", 0x1, 82, 83, -1, 84, -1, -1 },
    { NULL, "V", 0x9, 85, 86, 87, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithEduStanfordNlpTaggerMaxentTaggerConfig:);
  methods[2].selector = @selector(initWithNSString:);
  methods[3].selector = @selector(initWithNSString:withJavaUtilProperties:);
  methods[4].selector = @selector(initWithNSString:withJavaUtilProperties:withBoolean:);
  methods[5].selector = @selector(addTagWithNSString:);
  methods[6].selector = @selector(getTagIndexWithNSString:);
  methods[7].selector = @selector(numTags);
  methods[8].selector = @selector(getTagWithInt:);
  methods[9].selector = @selector(tagSet);
  methods[10].selector = @selector(getLambdaSolve);
  methods[11].selector = @selector(init__WithEduStanfordNlpTaggerMaxentTaggerConfig:);
  methods[12].selector = @selector(initDefaultScores);
  methods[13].selector = @selector(getInactiveTagDefaultScoreWithInt:);
  methods[14].selector = @selector(hasApproximateScoring);
  methods[15].selector = @selector(chooseTokenizerFactory);
  methods[16].selector = @selector(chooseTokenizerFactoryWithBoolean:withNSString:withNSString:withBoolean:);
  methods[17].selector = @selector(saveExtractorsWithJavaIoOutputStream:);
  methods[18].selector = @selector(readExtractorsWithJavaIoInputStream:);
  methods[19].selector = @selector(setExtractorsGlobal);
  methods[20].selector = @selector(removeDeadRules);
  methods[21].selector = @selector(simplifyLambda);
  methods[22].selector = @selector(saveModelWithNSString:);
  methods[23].selector = @selector(saveModelWithJavaIoDataOutputStream:);
  methods[24].selector = @selector(readModelAndInitWithJavaUtilProperties:withNSString:withBoolean:);
  methods[25].selector = @selector(readModelAndInitWithJavaUtilProperties:withJavaIoDataInputStream:withBoolean:);
  methods[26].selector = @selector(dumpModelWithJavaIoPrintStream:);
  methods[27].selector = @selector(isRareWithNSString:);
  methods[28].selector = @selector(tagTokenizedStringWithNSString:);
  methods[29].selector = @selector(tagStringWithNSString:);
  methods[30].selector = @selector(applyWithId:);
  methods[31].selector = @selector(processWithJavaUtilList:);
  methods[32].selector = @selector(tagSentenceWithJavaUtilList:);
  methods[33].selector = @selector(tagSentenceWithJavaUtilList:withBoolean:);
  methods[34].selector = @selector(tagCoreLabelsWithJavaUtilList:);
  methods[35].selector = @selector(tagCoreLabelsWithJavaUtilList:withBoolean:);
  methods[36].selector = @selector(lemmatizeWithJavaUtilList:withEduStanfordNlpProcessMorphology:);
  methods[37].selector = @selector(castCoreLabelsWithJavaUtilList:);
  methods[38].selector = @selector(tokenizeTextWithJavaIoReader:);
  methods[39].selector = @selector(tokenizeTextWithJavaIoReader:withEduStanfordNlpProcessTokenizerFactory:);
  methods[40].selector = @selector(dumpModelWithEduStanfordNlpTaggerMaxentTaggerConfig:);
  methods[41].selector = @selector(runTestWithEduStanfordNlpTaggerMaxentTaggerConfig:);
  methods[42].selector = @selector(trainAndSaveModelWithEduStanfordNlpTaggerMaxentTaggerConfig:);
  methods[43].selector = @selector(runTrainingWithEduStanfordNlpTaggerMaxentTaggerConfig:);
  methods[44].selector = @selector(printErrWordsPerSecWithLong:withInt:);
  methods[45].selector = @selector(getXMLWordsWithJavaUtilList:withInt:withBoolean:);
  methods[46].selector = @selector(getTsvWordsWithBoolean:withBoolean:withJavaUtilList:);
  methods[47].selector = @selector(writeXMLSentenceWithJavaIoWriter:withJavaUtilList:withInt:withBoolean:);
  methods[48].selector = @selector(tagFromXMLWithJavaIoInputStream:withJavaIoWriter:withNSStringArray:);
  methods[49].selector = @selector(tagFromXMLWithJavaIoReader:withJavaIoWriter:withNSStringArray:);
  methods[50].selector = @selector(tagFromXML);
  methods[51].selector = @selector(runTaggerWithEduStanfordNlpTaggerMaxentTaggerConfig:);
  methods[52].selector = @selector(runTagger);
  methods[53].selector = @selector(runTaggerStdinWithJavaIoBufferedReader:withJavaIoBufferedWriter:withEduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle:);
  methods[54].selector = @selector(runTaggerWithJavaLangIterable:withJavaIoBufferedWriter:withEduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle:);
  methods[55].selector = @selector(runTaggerWithJavaIoBufferedReader:withJavaIoBufferedWriter:withNSString:withEduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle:);
  methods[56].selector = @selector(tagCoreLabelsOrHasWordsWithJavaUtilList:withEduStanfordNlpProcessMorphology:withBoolean:);
  methods[57].selector = @selector(tagAndOutputSentenceWithJavaUtilList:withBoolean:withEduStanfordNlpProcessMorphology:withEduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle:withBoolean:withInt:withNSString:withJavaIoWriter:);
  methods[58].selector = @selector(outputTaggedSentenceWithJavaUtilList:withBoolean:withEduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle:withBoolean:withInt:withNSString:withJavaIoWriter:);
  methods[59].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "BASE_TAGGER_HOME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 88, -1, -1 },
    { "TAGGER_HOME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 89, -1, -1 },
    { "DEFAULT_NLP_GROUP_MODEL_PATH", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 90, -1, -1 },
    { "DEFAULT_JAR_PATH", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 91, -1, -1 },
    { "DEFAULT_DISTRIBUTION_PATH", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 92, -1, -1 },
    { "dict_", "LEduStanfordNlpTaggerMaxentDictionary;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "tags_", "LEduStanfordNlpTaggerMaxentTTags;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "prob_", "LEduStanfordNlpTaggerMaxentLambdaSolveTagger;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "fAssociations_", "LJavaUtilList;", .constantValue.asLong = 0, 0x0, -1, -1, 93, -1 },
    { "extractors_", "LEduStanfordNlpTaggerMaxentExtractors;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "extractorsRare_", "LEduStanfordNlpTaggerMaxentExtractors;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "ambClasses_", "LEduStanfordNlpTaggerMaxentAmbiguityClasses;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "alltags", "Z", .constantValue.asBOOL = EduStanfordNlpTaggerMaxentMaxentTagger_alltags, 0x10, 94, -1, -1, -1 },
    { "tagTokens_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x10, -1, -1, 95, -1 },
    { "RARE_WORD_THRESH", "I", .constantValue.asLong = 0, 0x18, -1, 96, -1, -1 },
    { "MIN_FEATURE_THRESH", "I", .constantValue.asLong = 0, 0x18, -1, 97, -1, -1 },
    { "CUR_WORD_MIN_FEATURE_THRESH", "I", .constantValue.asLong = 0, 0x18, -1, 98, -1, -1 },
    { "RARE_WORD_MIN_FEATURE_THRESH", "I", .constantValue.asLong = 0, 0x18, -1, 99, -1, -1 },
    { "VERY_COMMON_WORD_THRESH", "I", .constantValue.asLong = 0, 0x18, -1, 100, -1, -1 },
    { "OCCURRING_TAGS_ONLY", "Z", .constantValue.asLong = 0, 0x18, -1, 101, -1, -1 },
    { "POSSIBLE_TAGS_ONLY", "Z", .constantValue.asLong = 0, 0x18, -1, 102, -1, -1 },
    { "defaultScore_", "D", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "defaultScores_", "[D", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "leftContext_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "rightContext_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "config_", "LEduStanfordNlpTaggerMaxentTaggerConfig;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "rareWordThresh_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "minFeatureThresh_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "curWordMinFeatureThresh_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "rareWordMinFeatureThresh_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "veryCommonWordThresh_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "xSize_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "ySize_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "occurringTagsOnly_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "possibleTagsOnly_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "initted_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "VERBOSE_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "wordFunction_", "LJavaUtilFunctionFunction;", .constantValue.asLong = 0, 0x0, -1, -1, 103, -1 },
    { "formatPattern", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 104, -1, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpTaggerMaxentMaxentTagger_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpTaggerMaxentTaggerConfig;", "LNSString;", "LNSString;LJavaUtilProperties;", "LNSString;LJavaUtilProperties;Z", "addTag", "getTagIndex", "getTag", "I", "()Ljava/util/Set<Ljava/lang/String;>;", "init", "getInactiveTagDefaultScore", "()Ledu/stanford/nlp/process/TokenizerFactory<+Ledu/stanford/nlp/ling/HasWord;>;", "chooseTokenizerFactory", "ZLNSString;LNSString;Z", "(ZLjava/lang/String;Ljava/lang/String;Z)Ledu/stanford/nlp/process/TokenizerFactory<+Ledu/stanford/nlp/ling/HasWord;>;", "saveExtractors", "LJavaIoOutputStream;", "LJavaIoIOException;", "readExtractors", "LJavaIoInputStream;", "LJavaIoIOException;LJavaLangClassNotFoundException;", "saveModel", "LJavaIoDataOutputStream;", "readModelAndInit", "LJavaUtilProperties;LNSString;Z", "LJavaUtilProperties;LJavaIoDataInputStream;Z", "dumpModel", "LJavaIoPrintStream;", "isRare", "tagTokenizedString", "tagString", "apply", "LJavaUtilList;", "(Ljava/util/List<+Ledu/stanford/nlp/ling/HasWord;>;)Ljava/util/List<Ledu/stanford/nlp/ling/TaggedWord;>;", "process", "(Ljava/util/List<+Ljava/util/List<+Ledu/stanford/nlp/ling/HasWord;>;>;)Ljava/util/List<Ljava/util/List<Ledu/stanford/nlp/ling/TaggedWord;>;>;", "tagSentence", "LJavaUtilList;Z", "(Ljava/util/List<+Ledu/stanford/nlp/ling/HasWord;>;Z)Ljava/util/List<Ledu/stanford/nlp/ling/TaggedWord;>;", "tagCoreLabels", "(Ljava/util/List<Ledu/stanford/nlp/ling/CoreLabel;>;)V", "(Ljava/util/List<Ledu/stanford/nlp/ling/CoreLabel;>;Z)V", "lemmatize", "LJavaUtilList;LEduStanfordNlpProcessMorphology;", "(Ljava/util/List<Ledu/stanford/nlp/ling/CoreLabel;>;Ledu/stanford/nlp/process/Morphology;)V", "castCoreLabels", "(Ljava/util/List<+Ledu/stanford/nlp/ling/HasWord;>;)Ljava/util/List<Ledu/stanford/nlp/ling/CoreLabel;>;", "tokenizeText", "LJavaIoReader;", "(Ljava/io/Reader;)Ljava/util/List<Ljava/util/List<Ledu/stanford/nlp/ling/HasWord;>;>;", "LJavaIoReader;LEduStanfordNlpProcessTokenizerFactory;", "(Ljava/io/Reader;Ledu/stanford/nlp/process/TokenizerFactory<+Ledu/stanford/nlp/ling/HasWord;>;)Ljava/util/List<Ljava/util/List<Ledu/stanford/nlp/ling/HasWord;>;>;", "runTest", "trainAndSaveModel", "runTraining", "printErrWordsPerSec", "JI", "getXMLWords", "LJavaUtilList;IZ", "(Ljava/util/List<+Ledu/stanford/nlp/ling/HasWord;>;IZ)Ljava/lang/String;", "getTsvWords", "ZZLJavaUtilList;", "(ZZLjava/util/List<+Ledu/stanford/nlp/ling/HasWord;>;)Ljava/lang/String;", "writeXMLSentence", "LJavaIoWriter;LJavaUtilList;IZ", "(Ljava/io/Writer;Ljava/util/List<+Ledu/stanford/nlp/ling/HasWord;>;IZ)V", "tagFromXML", "LJavaIoInputStream;LJavaIoWriter;[LNSString;", "LJavaIoReader;LJavaIoWriter;[LNSString;", "runTagger", "LJavaIoIOException;LJavaLangClassNotFoundException;LJavaLangNoSuchMethodException;LJavaLangIllegalAccessException;LJavaLangReflectInvocationTargetException;", "runTaggerStdin", "LJavaIoBufferedReader;LJavaIoBufferedWriter;LEduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle;", "LJavaLangIterable;LJavaIoBufferedWriter;LEduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle;", "<X::Ledu/stanford/nlp/ling/HasWord;>(Ljava/lang/Iterable<Ljava/util/List<TX;>;>;Ljava/io/BufferedWriter;Ledu/stanford/nlp/tagger/maxent/MaxentTagger$OutputStyle;)V", "LJavaIoBufferedReader;LJavaIoBufferedWriter;LNSString;LEduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle;", "tagCoreLabelsOrHasWords", "LJavaUtilList;LEduStanfordNlpProcessMorphology;Z", "(Ljava/util/List<+Ledu/stanford/nlp/ling/HasWord;>;Ledu/stanford/nlp/process/Morphology;Z)Ljava/util/List<+Ledu/stanford/nlp/ling/HasWord;>;", "tagAndOutputSentence", "LJavaUtilList;ZLEduStanfordNlpProcessMorphology;LEduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle;ZILNSString;LJavaIoWriter;", "(Ljava/util/List<+Ledu/stanford/nlp/ling/HasWord;>;ZLedu/stanford/nlp/process/Morphology;Ledu/stanford/nlp/tagger/maxent/MaxentTagger$OutputStyle;ZILjava/lang/String;Ljava/io/Writer;)V", "outputTaggedSentence", "LJavaUtilList;ZLEduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle;ZILNSString;LJavaIoWriter;", "(Ljava/util/List<+Ledu/stanford/nlp/ling/HasWord;>;ZLedu/stanford/nlp/tagger/maxent/MaxentTagger$OutputStyle;ZILjava/lang/String;Ljava/io/Writer;)V", "main", "[LNSString;", "LJavaLangException;", &EduStanfordNlpTaggerMaxentMaxentTagger_BASE_TAGGER_HOME, &EduStanfordNlpTaggerMaxentMaxentTagger_TAGGER_HOME, &EduStanfordNlpTaggerMaxentMaxentTagger_DEFAULT_NLP_GROUP_MODEL_PATH, &EduStanfordNlpTaggerMaxentMaxentTagger_DEFAULT_JAR_PATH, &EduStanfordNlpTaggerMaxentMaxentTagger_DEFAULT_DISTRIBUTION_PATH, "Ljava/util/List<Ljava/util/Map<Ljava/lang/String;[LI;>;>;", "alltags", "Ljava/util/Map<Ljava/lang/String;Ljava/util/Set<Ljava/lang/String;>;>;", &EduStanfordNlpTaggerMaxentMaxentTagger_RARE_WORD_THRESH, &EduStanfordNlpTaggerMaxentMaxentTagger_MIN_FEATURE_THRESH, &EduStanfordNlpTaggerMaxentMaxentTagger_CUR_WORD_MIN_FEATURE_THRESH, &EduStanfordNlpTaggerMaxentMaxentTagger_RARE_WORD_MIN_FEATURE_THRESH, &EduStanfordNlpTaggerMaxentMaxentTagger_VERY_COMMON_WORD_THRESH, &EduStanfordNlpTaggerMaxentMaxentTagger_OCCURRING_TAGS_ONLY, &EduStanfordNlpTaggerMaxentMaxentTagger_POSSIBLE_TAGS_ONLY, "Ljava/util/function/Function<Ljava/lang/String;Ljava/lang/String;>;", &EduStanfordNlpTaggerMaxentMaxentTagger_formatPattern, "LEduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle;LEduStanfordNlpTaggerMaxentMaxentTagger_TaggerWrapper;LEduStanfordNlpTaggerMaxentMaxentTagger_SentenceTaggingProcessor;", "Ledu/stanford/nlp/tagger/common/Tagger;Ledu/stanford/nlp/process/ListProcessor<Ljava/util/List<+Ledu/stanford/nlp/ling/HasWord;>;Ljava/util/List<Ledu/stanford/nlp/ling/TaggedWord;>;>;Ljava/io/Serializable;" };
  static const J2ObjcClassInfo _EduStanfordNlpTaggerMaxentMaxentTagger = { "MaxentTagger", "edu.stanford.nlp.tagger.maxent", ptrTable, methods, fields, 7, 0x1, 60, 40, -1, 105, -1, 106, -1 };
  return &_EduStanfordNlpTaggerMaxentMaxentTagger;
}

+ (void)initialize {
  if (self == [EduStanfordNlpTaggerMaxentMaxentTagger class]) {
    EduStanfordNlpTaggerMaxentMaxentTagger_TAGGER_HOME = EduStanfordNlpUtilDataFilePaths_convertWithNSString_(EduStanfordNlpTaggerMaxentMaxentTagger_BASE_TAGGER_HOME);
    EduStanfordNlpTaggerMaxentMaxentTagger_DEFAULT_NLP_GROUP_MODEL_PATH = [new_JavaIoFile_initWithNSString_withNSString_(EduStanfordNlpTaggerMaxentMaxentTagger_TAGGER_HOME, @"english-left3words-distsim.tagger") getPath];
    EduStanfordNlpTaggerMaxentMaxentTagger_RARE_WORD_THRESH = JavaLangInteger_parseIntWithNSString_(EduStanfordNlpTaggerMaxentTaggerConfig_RARE_WORD_THRESH);
    EduStanfordNlpTaggerMaxentMaxentTagger_MIN_FEATURE_THRESH = JavaLangInteger_parseIntWithNSString_(EduStanfordNlpTaggerMaxentTaggerConfig_MIN_FEATURE_THRESH);
    EduStanfordNlpTaggerMaxentMaxentTagger_CUR_WORD_MIN_FEATURE_THRESH = JavaLangInteger_parseIntWithNSString_(EduStanfordNlpTaggerMaxentTaggerConfig_CUR_WORD_MIN_FEATURE_THRESH);
    EduStanfordNlpTaggerMaxentMaxentTagger_RARE_WORD_MIN_FEATURE_THRESH = JavaLangInteger_parseIntWithNSString_(EduStanfordNlpTaggerMaxentTaggerConfig_RARE_WORD_MIN_FEATURE_THRESH);
    EduStanfordNlpTaggerMaxentMaxentTagger_VERY_COMMON_WORD_THRESH = JavaLangInteger_parseIntWithNSString_(EduStanfordNlpTaggerMaxentTaggerConfig_VERY_COMMON_WORD_THRESH);
    EduStanfordNlpTaggerMaxentMaxentTagger_OCCURRING_TAGS_ONLY = JavaLangBoolean_parseBooleanWithNSString_(EduStanfordNlpTaggerMaxentTaggerConfig_OCCURRING_TAGS_ONLY);
    EduStanfordNlpTaggerMaxentMaxentTagger_POSSIBLE_TAGS_ONLY = JavaLangBoolean_parseBooleanWithNSString_(EduStanfordNlpTaggerMaxentTaggerConfig_POSSIBLE_TAGS_ONLY);
    EduStanfordNlpTaggerMaxentMaxentTagger_formatPattern = JavaUtilRegexPattern_compileWithNSString_(@"format=[a-zA-Z]+,");
    J2OBJC_SET_INITIALIZED(EduStanfordNlpTaggerMaxentMaxentTagger)
  }
}

@end

void EduStanfordNlpTaggerMaxentMaxentTagger_init(EduStanfordNlpTaggerMaxentMaxentTagger *self) {
  EduStanfordNlpTaggerCommonTagger_init(self);
  self->dict_ = new_EduStanfordNlpTaggerMaxentDictionary_init();
  self->fAssociations_ = EduStanfordNlpUtilGenerics_newArrayList();
  self->tagTokens_ = EduStanfordNlpUtilGenerics_newHashMap();
  self->rareWordThresh_ = EduStanfordNlpTaggerMaxentMaxentTagger_RARE_WORD_THRESH;
  self->minFeatureThresh_ = EduStanfordNlpTaggerMaxentMaxentTagger_MIN_FEATURE_THRESH;
  self->curWordMinFeatureThresh_ = EduStanfordNlpTaggerMaxentMaxentTagger_CUR_WORD_MIN_FEATURE_THRESH;
  self->rareWordMinFeatureThresh_ = EduStanfordNlpTaggerMaxentMaxentTagger_RARE_WORD_MIN_FEATURE_THRESH;
  self->veryCommonWordThresh_ = EduStanfordNlpTaggerMaxentMaxentTagger_VERY_COMMON_WORD_THRESH;
  self->occurringTagsOnly_ = EduStanfordNlpTaggerMaxentMaxentTagger_OCCURRING_TAGS_ONLY;
  self->possibleTagsOnly_ = EduStanfordNlpTaggerMaxentMaxentTagger_POSSIBLE_TAGS_ONLY;
  self->initted_ = false;
  self->VERBOSE_ = false;
}

EduStanfordNlpTaggerMaxentMaxentTagger *new_EduStanfordNlpTaggerMaxentMaxentTagger_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpTaggerMaxentMaxentTagger, init)
}

EduStanfordNlpTaggerMaxentMaxentTagger *create_EduStanfordNlpTaggerMaxentMaxentTagger_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTaggerMaxentMaxentTagger, init)
}

void EduStanfordNlpTaggerMaxentMaxentTagger_initWithEduStanfordNlpTaggerMaxentTaggerConfig_(EduStanfordNlpTaggerMaxentMaxentTagger *self, EduStanfordNlpTaggerMaxentTaggerConfig *config) {
  EduStanfordNlpTaggerMaxentMaxentTagger_initWithNSString_withJavaUtilProperties_(self, [((EduStanfordNlpTaggerMaxentTaggerConfig *) nil_chk(config)) getModel], config);
}

EduStanfordNlpTaggerMaxentMaxentTagger *new_EduStanfordNlpTaggerMaxentMaxentTagger_initWithEduStanfordNlpTaggerMaxentTaggerConfig_(EduStanfordNlpTaggerMaxentTaggerConfig *config) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTaggerMaxentMaxentTagger, initWithEduStanfordNlpTaggerMaxentTaggerConfig_, config)
}

EduStanfordNlpTaggerMaxentMaxentTagger *create_EduStanfordNlpTaggerMaxentMaxentTagger_initWithEduStanfordNlpTaggerMaxentTaggerConfig_(EduStanfordNlpTaggerMaxentTaggerConfig *config) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTaggerMaxentMaxentTagger, initWithEduStanfordNlpTaggerMaxentTaggerConfig_, config)
}

void EduStanfordNlpTaggerMaxentMaxentTagger_initWithNSString_(EduStanfordNlpTaggerMaxentMaxentTagger *self, NSString *modelFile) {
  EduStanfordNlpTaggerMaxentMaxentTagger_initWithNSString_withJavaUtilProperties_withBoolean_(self, modelFile, EduStanfordNlpUtilStringUtils_argsToPropertiesWithNSStringArray_([IOSObjectArray newArrayWithObjects:(id[]){ @"-model", modelFile } count:2 type:NSString_class_()]), true);
}

EduStanfordNlpTaggerMaxentMaxentTagger *new_EduStanfordNlpTaggerMaxentMaxentTagger_initWithNSString_(NSString *modelFile) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTaggerMaxentMaxentTagger, initWithNSString_, modelFile)
}

EduStanfordNlpTaggerMaxentMaxentTagger *create_EduStanfordNlpTaggerMaxentMaxentTagger_initWithNSString_(NSString *modelFile) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTaggerMaxentMaxentTagger, initWithNSString_, modelFile)
}

void EduStanfordNlpTaggerMaxentMaxentTagger_initWithNSString_withJavaUtilProperties_(EduStanfordNlpTaggerMaxentMaxentTagger *self, NSString *modelFile, JavaUtilProperties *config) {
  EduStanfordNlpTaggerMaxentMaxentTagger_initWithNSString_withJavaUtilProperties_withBoolean_(self, modelFile, config, true);
}

EduStanfordNlpTaggerMaxentMaxentTagger *new_EduStanfordNlpTaggerMaxentMaxentTagger_initWithNSString_withJavaUtilProperties_(NSString *modelFile, JavaUtilProperties *config) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTaggerMaxentMaxentTagger, initWithNSString_withJavaUtilProperties_, modelFile, config)
}

EduStanfordNlpTaggerMaxentMaxentTagger *create_EduStanfordNlpTaggerMaxentMaxentTagger_initWithNSString_withJavaUtilProperties_(NSString *modelFile, JavaUtilProperties *config) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTaggerMaxentMaxentTagger, initWithNSString_withJavaUtilProperties_, modelFile, config)
}

void EduStanfordNlpTaggerMaxentMaxentTagger_initWithNSString_withJavaUtilProperties_withBoolean_(EduStanfordNlpTaggerMaxentMaxentTagger *self, NSString *modelFile, JavaUtilProperties *config, jboolean printLoading) {
  EduStanfordNlpTaggerCommonTagger_init(self);
  self->dict_ = new_EduStanfordNlpTaggerMaxentDictionary_init();
  self->fAssociations_ = EduStanfordNlpUtilGenerics_newArrayList();
  self->tagTokens_ = EduStanfordNlpUtilGenerics_newHashMap();
  self->rareWordThresh_ = EduStanfordNlpTaggerMaxentMaxentTagger_RARE_WORD_THRESH;
  self->minFeatureThresh_ = EduStanfordNlpTaggerMaxentMaxentTagger_MIN_FEATURE_THRESH;
  self->curWordMinFeatureThresh_ = EduStanfordNlpTaggerMaxentMaxentTagger_CUR_WORD_MIN_FEATURE_THRESH;
  self->rareWordMinFeatureThresh_ = EduStanfordNlpTaggerMaxentMaxentTagger_RARE_WORD_MIN_FEATURE_THRESH;
  self->veryCommonWordThresh_ = EduStanfordNlpTaggerMaxentMaxentTagger_VERY_COMMON_WORD_THRESH;
  self->occurringTagsOnly_ = EduStanfordNlpTaggerMaxentMaxentTagger_OCCURRING_TAGS_ONLY;
  self->possibleTagsOnly_ = EduStanfordNlpTaggerMaxentMaxentTagger_POSSIBLE_TAGS_ONLY;
  self->initted_ = false;
  self->VERBOSE_ = false;
  [self readModelAndInitWithJavaUtilProperties:config withNSString:modelFile withBoolean:printLoading];
}

EduStanfordNlpTaggerMaxentMaxentTagger *new_EduStanfordNlpTaggerMaxentMaxentTagger_initWithNSString_withJavaUtilProperties_withBoolean_(NSString *modelFile, JavaUtilProperties *config, jboolean printLoading) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTaggerMaxentMaxentTagger, initWithNSString_withJavaUtilProperties_withBoolean_, modelFile, config, printLoading)
}

EduStanfordNlpTaggerMaxentMaxentTagger *create_EduStanfordNlpTaggerMaxentMaxentTagger_initWithNSString_withJavaUtilProperties_withBoolean_(NSString *modelFile, JavaUtilProperties *config, jboolean printLoading) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTaggerMaxentMaxentTagger, initWithNSString_withJavaUtilProperties_withBoolean_, modelFile, config, printLoading)
}

void EduStanfordNlpTaggerMaxentMaxentTagger_initDefaultScores(EduStanfordNlpTaggerMaxentMaxentTagger *self) {
  @synchronized(self) {
    if (self->defaultScores_ == nil) {
      self->defaultScores_ = [IOSDoubleArray newArrayWithLength:self->ySize_ + 1];
      for (jint i = 0; i < self->ySize_ + 1; ++i) {
        *IOSDoubleArray_GetRef(nil_chk(self->defaultScores_), i) = JavaLangMath_logWithDouble_(i * self->defaultScore_);
      }
    }
  }
}

id<EduStanfordNlpProcessTokenizerFactory> EduStanfordNlpTaggerMaxentMaxentTagger_chooseTokenizerFactoryWithBoolean_withNSString_withNSString_withBoolean_(jboolean tokenize, NSString *tokenizerFactory, NSString *tokenizerOptions, jboolean invertible) {
  EduStanfordNlpTaggerMaxentMaxentTagger_initialize();
  if (tokenize && ((jint) [((NSString *) nil_chk([((NSString *) nil_chk(tokenizerFactory)) trim])) length]) != 0) {
    @try {
      IOSClass *clazz = IOSClass_forName_([((NSString *) nil_chk(tokenizerFactory)) trim]);
      JavaLangReflectMethod *factoryMethod = [((IOSClass *) nil_chk(clazz)) getMethod:@"newTokenizerFactory" parameterTypes:[IOSObjectArray newArrayWithLength:0 type:IOSClass_class_()]];
      id<EduStanfordNlpProcessTokenizerFactory> factory = (id<EduStanfordNlpProcessTokenizerFactory>) cast_check([((JavaLangReflectMethod *) nil_chk(factoryMethod)) invokeWithId:tokenizerOptions withNSObjectArray:[IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]], EduStanfordNlpProcessTokenizerFactory_class_());
      return factory;
    }
    @catch (JavaLangException *e) {
      @throw new_JavaLangRuntimeException_initWithNSString_withNSException_(@"Could not load tokenizer factory", e);
    }
  }
  else if (tokenize) {
    if (invertible) {
      if ([((NSString *) nil_chk(tokenizerOptions)) isEqual:@""]) {
        tokenizerOptions = @"invertible=true";
      }
      else if (![tokenizerOptions matches:@"(^|.*,)invertible=true"]) {
        (void) JreStrAppendStrong(&tokenizerOptions, "$", @",invertible=true");
      }
      return EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory_newCoreLabelTokenizerFactoryWithNSString_(tokenizerOptions);
    }
    else {
      return EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory_newWordTokenizerFactoryWithNSString_(tokenizerOptions);
    }
  }
  else {
    return EduStanfordNlpProcessWhitespaceTokenizer_factory();
  }
}

void EduStanfordNlpTaggerMaxentMaxentTagger_saveExtractorsWithJavaIoOutputStream_(EduStanfordNlpTaggerMaxentMaxentTagger *self, JavaIoOutputStream *os) {
  JavaIoObjectOutputStream *out = new_JavaIoObjectOutputStream_initWithJavaIoOutputStream_(os);
  [out writeObjectWithId:self->extractors_];
  [out writeObjectWithId:self->extractorsRare_];
  [out flush];
}

void EduStanfordNlpTaggerMaxentMaxentTagger_readExtractorsWithJavaIoInputStream_(EduStanfordNlpTaggerMaxentMaxentTagger *self, JavaIoInputStream *file) {
  JavaIoObjectInputStream *in = new_JavaIoObjectInputStream_initWithJavaIoInputStream_(file);
  self->extractors_ = (EduStanfordNlpTaggerMaxentExtractors *) cast_chk([in readObject], [EduStanfordNlpTaggerMaxentExtractors class]);
  self->extractorsRare_ = (EduStanfordNlpTaggerMaxentExtractors *) cast_chk([in readObject], [EduStanfordNlpTaggerMaxentExtractors class]);
  [((EduStanfordNlpTaggerMaxentExtractors *) nil_chk(self->extractors_)) initTypes];
  [((EduStanfordNlpTaggerMaxentExtractors *) nil_chk(self->extractorsRare_)) initTypes];
  jint left = [((EduStanfordNlpTaggerMaxentExtractors *) nil_chk(self->extractors_)) leftContext];
  jint left_u = [((EduStanfordNlpTaggerMaxentExtractors *) nil_chk(self->extractorsRare_)) leftContext];
  if (left_u > left) {
    left = left_u;
  }
  self->leftContext_ = left;
  jint right = [((EduStanfordNlpTaggerMaxentExtractors *) nil_chk(self->extractors_)) rightContext];
  jint right_u = [((EduStanfordNlpTaggerMaxentExtractors *) nil_chk(self->extractorsRare_)) rightContext];
  if (right_u > right) {
    right = right_u;
  }
  self->rightContext_ = right;
  EduStanfordNlpTaggerMaxentMaxentTagger_setExtractorsGlobal(self);
}

void EduStanfordNlpTaggerMaxentMaxentTagger_setExtractorsGlobal(EduStanfordNlpTaggerMaxentMaxentTagger *self) {
  [((EduStanfordNlpTaggerMaxentExtractors *) nil_chk(self->extractors_)) setGlobalHolderWithEduStanfordNlpTaggerMaxentMaxentTagger:self];
  [((EduStanfordNlpTaggerMaxentExtractors *) nil_chk(self->extractorsRare_)) setGlobalHolderWithEduStanfordNlpTaggerMaxentMaxentTagger:self];
}

void EduStanfordNlpTaggerMaxentMaxentTagger_removeDeadRules(EduStanfordNlpTaggerMaxentMaxentTagger *self) {
  for (id<JavaUtilMap> __strong fAssociation in nil_chk(self->fAssociations_)) {
    id<JavaUtilList> deadRules = EduStanfordNlpUtilGenerics_newArrayList();
    for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((id<JavaUtilMap>) nil_chk(fAssociation)) entrySet])) {
      NSString *value = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey];
      IOSIntArray *fAssociations = [entry_ getValue];
      jboolean found = false;
      for (jint index = 0; index < self->ySize_; ++index) {
        jint fNum = IOSIntArray_Get(nil_chk(fAssociations), index);
        if (fNum > -1) {
          if (IOSDoubleArray_Get(nil_chk(((EduStanfordNlpMaxentIisLambdaSolve *) nil_chk([self getLambdaSolve]))->lambda_), fNum) != 0.0) {
            found = true;
            break;
          }
        }
      }
      if (!found) {
        [((id<JavaUtilList>) nil_chk(deadRules)) addWithId:value];
      }
    }
    for (NSString * __strong rule in nil_chk(deadRules)) {
      (void) [fAssociation removeWithId:rule];
    }
  }
}

void EduStanfordNlpTaggerMaxentMaxentTagger_simplifyLambda(EduStanfordNlpTaggerMaxentMaxentTagger *self) {
  IOSDoubleArray *lambda = ((EduStanfordNlpMaxentIisLambdaSolve *) nil_chk([self getLambdaSolve]))->lambda_;
  IOSIntArray *map = [IOSIntArray newArrayWithLength:((IOSDoubleArray *) nil_chk(lambda))->size_];
  jint current = 0;
  for (jint index = 0; index < lambda->size_; ++index) {
    if (IOSDoubleArray_Get(lambda, index) == 0.0) {
      *IOSIntArray_GetRef(map, index) = -1;
    }
    else {
      *IOSIntArray_GetRef(map, index) = current;
      current++;
    }
  }
  IOSDoubleArray *condensedLambda = [IOSDoubleArray newArrayWithLength:current];
  for (jint i = 0; i < lambda->size_; ++i) {
    if (IOSIntArray_Get(map, i) != -1) {
      *IOSDoubleArray_GetRef(condensedLambda, IOSIntArray_Get(map, i)) = IOSDoubleArray_Get(lambda, i);
    }
  }
  for (id<JavaUtilMap> __strong featureMap in nil_chk(self->fAssociations_)) {
    for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((id<JavaUtilMap>) nil_chk(featureMap)) entrySet])) {
      IOSIntArray *fAssociations = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getValue];
      for (jint index = 0; index < self->ySize_; ++index) {
        if (IOSIntArray_Get(nil_chk(fAssociations), index) >= 0) {
          *IOSIntArray_GetRef(fAssociations, index) = IOSIntArray_Get(map, IOSIntArray_Get(fAssociations, index));
        }
      }
    }
  }
  self->prob_ = new_EduStanfordNlpTaggerMaxentLambdaSolveTagger_initWithDoubleArray_(condensedLambda);
}

void EduStanfordNlpTaggerMaxentMaxentTagger_lemmatizeWithJavaUtilList_withEduStanfordNlpProcessMorphology_(id<JavaUtilList> sentence, EduStanfordNlpProcessMorphology *morpha) {
  EduStanfordNlpTaggerMaxentMaxentTagger_initialize();
  for (EduStanfordNlpLingCoreLabel * __strong label in nil_chk(sentence)) {
    [((EduStanfordNlpProcessMorphology *) nil_chk(morpha)) stemWithEduStanfordNlpLingCoreLabel:label];
  }
}

id<JavaUtilList> EduStanfordNlpTaggerMaxentMaxentTagger_castCoreLabelsWithJavaUtilList_(id<JavaUtilList> sent) {
  EduStanfordNlpTaggerMaxentMaxentTagger_initialize();
  id<JavaUtilList> coreLabels = EduStanfordNlpUtilGenerics_newArrayList();
  for (id<EduStanfordNlpLingHasWord> __strong word in nil_chk(sent)) {
    if (!([word isKindOfClass:[EduStanfordNlpLingCoreLabel class]])) {
      @throw new_JavaLangClassCastException_initWithNSString_(@"Expected CoreLabels");
    }
    [((id<JavaUtilList>) nil_chk(coreLabels)) addWithId:(EduStanfordNlpLingCoreLabel *) cast_chk(word, [EduStanfordNlpLingCoreLabel class])];
  }
  return coreLabels;
}

id<JavaUtilList> EduStanfordNlpTaggerMaxentMaxentTagger_tokenizeTextWithJavaIoReader_(JavaIoReader *r) {
  EduStanfordNlpTaggerMaxentMaxentTagger_initialize();
  return EduStanfordNlpTaggerMaxentMaxentTagger_tokenizeTextWithJavaIoReader_withEduStanfordNlpProcessTokenizerFactory_(r, nil);
}

id<JavaUtilList> EduStanfordNlpTaggerMaxentMaxentTagger_tokenizeTextWithJavaIoReader_withEduStanfordNlpProcessTokenizerFactory_(JavaIoReader *r, id<EduStanfordNlpProcessTokenizerFactory> tokenizerFactory) {
  EduStanfordNlpTaggerMaxentMaxentTagger_initialize();
  EduStanfordNlpProcessDocumentPreprocessor *documentPreprocessor = new_EduStanfordNlpProcessDocumentPreprocessor_initWithJavaIoReader_(r);
  if (tokenizerFactory != nil) {
    [documentPreprocessor setTokenizerFactoryWithEduStanfordNlpProcessTokenizerFactory:tokenizerFactory];
  }
  id<JavaUtilList> out = EduStanfordNlpUtilGenerics_newArrayList();
  for (id<JavaUtilList> __strong item in documentPreprocessor) {
    [((id<JavaUtilList>) nil_chk(out)) addWithId:item];
  }
  return out;
}

void EduStanfordNlpTaggerMaxentMaxentTagger_dumpModelWithEduStanfordNlpTaggerMaxentTaggerConfig_(EduStanfordNlpTaggerMaxentTaggerConfig *config) {
  EduStanfordNlpTaggerMaxentMaxentTagger_initialize();
  @try {
    EduStanfordNlpTaggerMaxentMaxentTagger *tagger = new_EduStanfordNlpTaggerMaxentMaxentTagger_initWithNSString_withJavaUtilProperties_withBoolean_([((EduStanfordNlpTaggerMaxentTaggerConfig *) nil_chk(config)) getModel], config, false);
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"Serialized tagger built with config:"];
    [((EduStanfordNlpTaggerMaxentTaggerConfig *) nil_chk(tagger->config_)) dumpWithJavaIoPrintStream:JreLoadStatic(JavaLangSystem, out)];
    [tagger dumpModelWithJavaIoPrintStream:JreLoadStatic(JavaLangSystem, out)];
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
  }
}

void EduStanfordNlpTaggerMaxentMaxentTagger_runTestWithEduStanfordNlpTaggerMaxentTaggerConfig_(EduStanfordNlpTaggerMaxentTaggerConfig *config) {
  EduStanfordNlpTaggerMaxentMaxentTagger_initialize();
  if ([((EduStanfordNlpTaggerMaxentTaggerConfig *) nil_chk(config)) getVerbose]) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$@$", @"## tagger testing invoked at ", new_JavaUtilDate_init(), @" with arguments:")];
    [config dump];
  }
  @try {
    EduStanfordNlpTaggerMaxentMaxentTagger *tagger = new_EduStanfordNlpTaggerMaxentMaxentTagger_initWithNSString_withJavaUtilProperties_([config getModel], config);
    EduStanfordNlpUtilTiming *t = new_EduStanfordNlpUtilTiming_init();
    EduStanfordNlpTaggerMaxentTestClassifier *testClassifier = new_EduStanfordNlpTaggerMaxentTestClassifier_initWithEduStanfordNlpTaggerMaxentMaxentTagger_(tagger);
    jlong millis = [t stop];
    EduStanfordNlpTaggerMaxentMaxentTagger_printErrWordsPerSecWithLong_withInt_(millis, [testClassifier getNumWords]);
    [testClassifier printModelAndAccuracyWithEduStanfordNlpTaggerMaxentMaxentTagger:tagger];
  }
  @catch (JavaLangException *e) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"An error occurred while testing the tagger."];
    [((JavaLangException *) nil_chk(e)) printStackTrace];
  }
}

void EduStanfordNlpTaggerMaxentMaxentTagger_trainAndSaveModelWithEduStanfordNlpTaggerMaxentTaggerConfig_(EduStanfordNlpTaggerMaxentTaggerConfig *config) {
  EduStanfordNlpTaggerMaxentMaxentTagger_initialize();
  NSString *modelName = [((EduStanfordNlpTaggerMaxentTaggerConfig *) nil_chk(config)) getModel];
  EduStanfordNlpTaggerMaxentMaxentTagger *maxentTagger = new_EduStanfordNlpTaggerMaxentMaxentTagger_init();
  [maxentTagger init__WithEduStanfordNlpTaggerMaxentTaggerConfig:config];
  EduStanfordNlpTaggerMaxentTaggerExperiments *samples = new_EduStanfordNlpTaggerMaxentTaggerExperiments_initWithEduStanfordNlpTaggerMaxentTaggerConfig_withEduStanfordNlpTaggerMaxentMaxentTagger_(config, maxentTagger);
  EduStanfordNlpTaggerMaxentTaggerFeatures *feats = [samples getTaggerFeatures];
  IOSObjectArray *fnumArr = [samples getFnumArr];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$", @"Samples from ", [config getFile])];
  [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:JreStrcat("$I", @"Number of features: ", [((EduStanfordNlpTaggerMaxentTaggerFeatures *) nil_chk(feats)) size])];
  [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:JreStrcat("$@", @"Tag set: ", [((EduStanfordNlpTaggerMaxentTTags *) nil_chk(maxentTagger->tags_)) tagSet])];
  EduStanfordNlpMaxentProblem *p = new_EduStanfordNlpMaxentProblem_initWithEduStanfordNlpMaxentExperiments_withEduStanfordNlpMaxentFeatures_(samples, feats);
  EduStanfordNlpTaggerMaxentLambdaSolveTagger *prob = new_EduStanfordNlpTaggerMaxentLambdaSolveTagger_initWithEduStanfordNlpMaxentProblem_withDouble_withByteArray2_(p, 0.0001, fnumArr);
  maxentTagger->prob_ = prob;
  if ([((NSString *) nil_chk([config getSearch])) isEqual:@"owlqn"]) {
    EduStanfordNlpMaxentCGRunner *runner = new_EduStanfordNlpMaxentCGRunner_initWithEduStanfordNlpMaxentIisLambdaSolve_withNSString_withDouble_(prob, [config getModel], [config getSigmaSquared]);
    [runner solveL1WithDouble:[config getRegL1]];
  }
  else if ([((NSString *) nil_chk([config getSearch])) isEqual:@"owlqn2"]) {
    EduStanfordNlpMaxentCGRunner *runner = new_EduStanfordNlpMaxentCGRunner_initWithEduStanfordNlpMaxentIisLambdaSolve_withNSString_withDouble_(prob, [config getModel], [config getSigmaSquared]);
    [runner solveOWLQN2WithDouble:[config getRegL1]];
  }
  else if ([((NSString *) nil_chk([config getSearch])) isEqual:@"cg"]) {
    EduStanfordNlpMaxentCGRunner *runner = new_EduStanfordNlpMaxentCGRunner_initWithEduStanfordNlpMaxentIisLambdaSolve_withNSString_withDouble_(prob, [config getModel], [config getSigmaSquared]);
    [runner solveCG];
  }
  else if ([((NSString *) nil_chk([config getSearch])) isEqual:@"qn"]) {
    EduStanfordNlpMaxentCGRunner *runner = new_EduStanfordNlpMaxentCGRunner_initWithEduStanfordNlpMaxentIisLambdaSolve_withNSString_withDouble_(prob, [config getModel], [config getSigmaSquared]);
    [runner solveQN];
  }
  else {
    [prob improvedIterativeWithInt:[config getIterations]];
  }
  if ([prob checkCorrectness]) {
    [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:@"Model is correct [empirical expec = model expec]"];
  }
  else {
    [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:@"Model is not correct"];
  }
  EduStanfordNlpTaggerMaxentMaxentTagger_removeDeadRules(maxentTagger);
  EduStanfordNlpTaggerMaxentMaxentTagger_simplifyLambda(maxentTagger);
  [maxentTagger saveModelWithNSString:modelName];
  [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:@"Extractors list:"];
  [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:JreStrcat("$$$", [((EduStanfordNlpTaggerMaxentExtractors *) nil_chk(maxentTagger->extractors_)) description], @"\nrare", [((EduStanfordNlpTaggerMaxentExtractors *) nil_chk(maxentTagger->extractorsRare_)) description])];
}

void EduStanfordNlpTaggerMaxentMaxentTagger_runTrainingWithEduStanfordNlpTaggerMaxentTaggerConfig_(EduStanfordNlpTaggerMaxentTaggerConfig *config) {
  EduStanfordNlpTaggerMaxentMaxentTagger_initialize();
  JavaUtilDate *now = new_JavaUtilDate_init();
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$@$", @"## tagger training invoked at ", now, @" with arguments:")];
  [((EduStanfordNlpTaggerMaxentTaggerConfig *) nil_chk(config)) dump];
  EduStanfordNlpUtilTiming *tim = new_EduStanfordNlpUtilTiming_init();
  EduStanfordNlpIoPrintFile *log = new_EduStanfordNlpIoPrintFile_initWithNSString_(JreStrcat("$$", [config getModel], @".props"));
  [log printlnWithNSString:JreStrcat("$@$", @"## tagger training invoked at ", now, @" with arguments:")];
  [config dumpWithJavaIoPrintStream:log];
  [log close];
  EduStanfordNlpTaggerMaxentMaxentTagger_trainAndSaveModelWithEduStanfordNlpTaggerMaxentTaggerConfig_(config);
  [tim doneWithNSString:@"Training POS tagger"];
}

void EduStanfordNlpTaggerMaxentMaxentTagger_printErrWordsPerSecWithLong_withInt_(jlong milliSec, jint numWords) {
  EduStanfordNlpTaggerMaxentMaxentTagger_initialize();
  jdouble wordsPerSec = numWords / (((jdouble) milliSec) / 1000);
  JavaTextNumberFormat *nf = new_JavaTextDecimalFormat_initWithNSString_(@"0.00");
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$I$$$", @"Tagged ", numWords, @" words at ", [nf formatWithDouble:wordsPerSec], @" words per second.")];
}

NSString *EduStanfordNlpTaggerMaxentMaxentTagger_getXMLWordsWithJavaUtilList_withInt_withBoolean_(id<JavaUtilList> sentence, jint sentNum, jboolean outputLemmas) {
  EduStanfordNlpTaggerMaxentMaxentTagger_initialize();
  jboolean hasCoreLabels = (sentence != nil && [sentence size] > 0 && [[sentence getWithInt:0] isKindOfClass:[EduStanfordNlpLingCoreLabel class]]);
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"<sentence id=\""])) appendWithInt:sentNum])) appendWithNSString:@"\">\n"];
  jint wordIndex = 0;
  for (id<EduStanfordNlpLingHasWord> __strong hw in nil_chk(sentence)) {
    NSString *word = [((id<EduStanfordNlpLingHasWord>) nil_chk(hw)) word];
    if (!([EduStanfordNlpLingHasTag_class_() isInstance:hw])) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"Expected HasTags, got ", [hw getClass]));
    }
    NSString *tag = [((id<EduStanfordNlpLingHasTag>) cast_check(hw, EduStanfordNlpLingHasTag_class_())) tag];
    (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"  <word wid=\""])) appendWithInt:wordIndex])) appendWithNSString:@"\" pos=\""])) appendWithNSString:EduStanfordNlpUtilXMLUtils_escapeAttributeXMLWithNSString_(tag)])) appendWithNSString:@"\""];
    if (outputLemmas && hasCoreLabels) {
      if (!([hw isKindOfClass:[EduStanfordNlpLingCoreLabel class]])) {
        @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@$", @"You mixed CoreLabels with ", [hw getClass], @"?  Why would you do that?"));
      }
      EduStanfordNlpLingCoreLabel *label = (EduStanfordNlpLingCoreLabel *) cast_chk(hw, [EduStanfordNlpLingCoreLabel class]);
      NSString *lemma = [label lemma];
      if (lemma != nil) {
        (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@" lemma=\""])) appendWithNSString:EduStanfordNlpUtilXMLUtils_escapeElementXMLWithNSString_(lemma)])) appendWithChar:'"'];
      }
    }
    (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@">"])) appendWithNSString:EduStanfordNlpUtilXMLUtils_escapeElementXMLWithNSString_(word)])) appendWithNSString:@"</word>\n"];
    ++wordIndex;
  }
  (void) [sb appendWithNSString:@"</sentence>\n"];
  return [sb description];
}

NSString *EduStanfordNlpTaggerMaxentMaxentTagger_getTsvWordsWithBoolean_withBoolean_withJavaUtilList_(jboolean verbose, jboolean outputLemmas, id<JavaUtilList> sentence) {
  EduStanfordNlpTaggerMaxentMaxentTagger_initialize();
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  if (verbose && [((id<JavaUtilList>) nil_chk(sentence)) size] > 0 && [[sentence getWithInt:0] isKindOfClass:[EduStanfordNlpLingCoreLabel class]]) {
    for (id<EduStanfordNlpLingHasWord> __strong hw in nil_chk(sentence)) {
      if (!([hw isKindOfClass:[EduStanfordNlpLingCoreLabel class]])) {
        @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@$", @"You mixed CoreLabels with ", [((id<EduStanfordNlpLingHasWord>) nil_chk(hw)) getClass], @"?  Why would you do that?"));
      }
      EduStanfordNlpLingCoreLabel *label = (EduStanfordNlpLingCoreLabel *) cast_chk(hw, [EduStanfordNlpLingCoreLabel class]);
      (void) [sb appendWithNSString:[((EduStanfordNlpLingCoreLabel *) nil_chk(label)) word]];
      (void) [sb appendWithNSString:@"\t"];
      (void) [sb appendWithNSString:[label originalText]];
      (void) [sb appendWithNSString:@"\t"];
      if (outputLemmas) {
        (void) [sb appendWithNSString:[label lemma]];
        (void) [sb appendWithNSString:@"\t"];
      }
      (void) [sb appendWithNSString:[label tag]];
      (void) [sb appendWithNSString:@"\t"];
      (void) [sb appendWithInt:[label beginPosition]];
      (void) [sb appendWithNSString:@"\t"];
      (void) [sb appendWithInt:[label endPosition]];
      (void) [sb appendWithNSString:@"\n"];
    }
    (void) [sb appendWithChar:0x000a];
    return [sb description];
  }
  for (id<EduStanfordNlpLingHasWord> __strong hw in nil_chk(sentence)) {
    NSString *word = [((id<EduStanfordNlpLingHasWord>) nil_chk(hw)) word];
    if (!([EduStanfordNlpLingHasTag_class_() isInstance:hw])) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"Expected HasTags, got ", [hw getClass]));
    }
    NSString *tag = [((id<EduStanfordNlpLingHasTag>) cast_check(hw, EduStanfordNlpLingHasTag_class_())) tag];
    (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:word])) appendWithChar:0x0009])) appendWithNSString:tag])) appendWithChar:0x000a];
  }
  (void) [sb appendWithChar:0x000a];
  return [sb description];
}

void EduStanfordNlpTaggerMaxentMaxentTagger_writeXMLSentenceWithJavaIoWriter_withJavaUtilList_withInt_withBoolean_(JavaIoWriter *w, id<JavaUtilList> sent, jint sentNum, jboolean outputLemmas) {
  EduStanfordNlpTaggerMaxentMaxentTagger_initialize();
  @try {
    [((JavaIoWriter *) nil_chk(w)) writeWithNSString:EduStanfordNlpTaggerMaxentMaxentTagger_getXMLWordsWithJavaUtilList_withInt_withBoolean_(sent, sentNum, outputLemmas)];
  }
  @catch (JavaIoIOException *e) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$I$$", @"Error writing sentence ", sentNum, @": ", EduStanfordNlpLingSentence_listToStringWithJavaUtilList_(sent))];
    @throw new_EduStanfordNlpIoRuntimeIOException_initWithNSException_(e);
  }
}

void EduStanfordNlpTaggerMaxentMaxentTagger_tagFromXML(EduStanfordNlpTaggerMaxentMaxentTagger *self) {
  JavaIoReader *reader = nil;
  JavaIoWriter *w = nil;
  @try {
    reader = new_JavaIoBufferedReader_initWithJavaIoReader_(new_JavaIoInputStreamReader_initWithJavaIoInputStream_withNSString_(new_JavaIoFileInputStream_initWithNSString_([((EduStanfordNlpTaggerMaxentTaggerConfig *) nil_chk(self->config_)) getFile]), [((EduStanfordNlpTaggerMaxentTaggerConfig *) nil_chk(self->config_)) getEncoding]));
    NSString *outFile = [((EduStanfordNlpTaggerMaxentTaggerConfig *) nil_chk(self->config_)) getOutputFile];
    if (((jint) [((NSString *) nil_chk(outFile)) length]) > 0) {
      w = new_JavaIoBufferedWriter_initWithJavaIoWriter_(new_JavaIoOutputStreamWriter_initWithJavaIoOutputStream_withNSString_(new_JavaIoFileOutputStream_initWithNSString_(outFile), [((EduStanfordNlpTaggerMaxentTaggerConfig *) nil_chk(self->config_)) getEncoding]));
    }
    else {
      w = new_JavaIoBufferedWriter_initWithJavaIoWriter_(new_JavaIoOutputStreamWriter_initWithJavaIoOutputStream_withNSString_(JreLoadStatic(JavaLangSystem, out), [((EduStanfordNlpTaggerMaxentTaggerConfig *) nil_chk(self->config_)) getEncoding]));
    }
    [w writeWithNSString:JreStrcat("$$$", @"<?xml version=\"1.0\" encoding=\"", [((EduStanfordNlpTaggerMaxentTaggerConfig *) nil_chk(self->config_)) getEncoding], @"\"?>\n")];
    [self tagFromXMLWithJavaIoReader:reader withJavaIoWriter:w withNSStringArray:[((EduStanfordNlpTaggerMaxentTaggerConfig *) nil_chk(self->config_)) getXMLInput]];
  }
  @catch (JavaIoFileNotFoundException *e) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$", @"Input file not found: ", [((EduStanfordNlpTaggerMaxentTaggerConfig *) nil_chk(self->config_)) getFile])];
    [((JavaIoFileNotFoundException *) nil_chk(e)) printStackTrace];
  }
  @catch (JavaIoIOException *ioe) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"tagFromXML: mysterious IO Exception"];
    [((JavaIoIOException *) nil_chk(ioe)) printStackTrace];
  }
  @finally {
    EduStanfordNlpIoIOUtils_closeIgnoringExceptionsWithJavaIoCloseable_(reader);
    EduStanfordNlpIoIOUtils_closeIgnoringExceptionsWithJavaIoCloseable_(w);
  }
}

void EduStanfordNlpTaggerMaxentMaxentTagger_runTaggerWithEduStanfordNlpTaggerMaxentTaggerConfig_(EduStanfordNlpTaggerMaxentTaggerConfig *config) {
  EduStanfordNlpTaggerMaxentMaxentTagger_initialize();
  if ([((EduStanfordNlpTaggerMaxentTaggerConfig *) nil_chk(config)) getVerbose]) {
    JavaUtilDate *now = new_JavaUtilDate_init();
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$@$", @"## tagger invoked at ", now, @" with arguments:")];
    [config dump];
  }
  EduStanfordNlpTaggerMaxentMaxentTagger *tagger = new_EduStanfordNlpTaggerMaxentMaxentTagger_initWithNSString_withJavaUtilProperties_([config getModel], config);
  EduStanfordNlpTaggerMaxentMaxentTagger_runTagger(tagger);
}

void EduStanfordNlpTaggerMaxentMaxentTagger_runTagger(EduStanfordNlpTaggerMaxentMaxentTagger *self) {
  IOSObjectArray *xmlInput = [((EduStanfordNlpTaggerMaxentTaggerConfig *) nil_chk(self->config_)) getXMLInput];
  if (((IOSObjectArray *) nil_chk(xmlInput))->size_ > 0) {
    if (xmlInput->size_ > 1 || ![((NSString *) nil_chk(IOSObjectArray_Get(xmlInput, 0))) isEqual:@"null"]) {
      EduStanfordNlpTaggerMaxentMaxentTagger_tagFromXML(self);
      return;
    }
  }
  JavaIoBufferedWriter *writer = nil;
  JavaIoBufferedReader *br = nil;
  @try {
    NSString *outFile = [((EduStanfordNlpTaggerMaxentTaggerConfig *) nil_chk(self->config_)) getOutputFile];
    if (((jint) [((NSString *) nil_chk(outFile)) length]) > 0) {
      writer = new_JavaIoBufferedWriter_initWithJavaIoWriter_(new_JavaIoOutputStreamWriter_initWithJavaIoOutputStream_withNSString_(new_JavaIoFileOutputStream_initWithNSString_(outFile), [((EduStanfordNlpTaggerMaxentTaggerConfig *) nil_chk(self->config_)) getEncoding]));
    }
    else {
      writer = new_JavaIoBufferedWriter_initWithJavaIoWriter_(new_JavaIoOutputStreamWriter_initWithJavaIoOutputStream_withNSString_(JreLoadStatic(JavaLangSystem, out), [((EduStanfordNlpTaggerMaxentTaggerConfig *) nil_chk(self->config_)) getEncoding]));
    }
    jboolean stdin_ = [((EduStanfordNlpTaggerMaxentTaggerConfig *) nil_chk(self->config_)) useStdin];
    EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle *outputStyle = EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle_fromShortNameWithNSString_([((EduStanfordNlpTaggerMaxentTaggerConfig *) nil_chk(self->config_)) getOutputFormat]);
    if (!stdin_) {
      NSString *filename = [((EduStanfordNlpTaggerMaxentTaggerConfig *) nil_chk(self->config_)) getFile];
      if ([((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(EduStanfordNlpTaggerMaxentMaxentTagger_formatPattern)) matcherWithJavaLangCharSequence:filename])) find]) {
        EduStanfordNlpTaggerIoTaggedFileRecord *record = EduStanfordNlpTaggerIoTaggedFileRecord_createRecordWithJavaUtilProperties_withNSString_(self->config_, filename);
        [self runTaggerWithJavaLangIterable:[((EduStanfordNlpTaggerIoTaggedFileRecord *) nil_chk(record)) reader] withJavaIoBufferedWriter:writer withEduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle:outputStyle];
      }
      else {
        br = EduStanfordNlpIoIOUtils_readerFromStringWithNSString_withNSString_([((EduStanfordNlpTaggerMaxentTaggerConfig *) nil_chk(self->config_)) getFile], [((EduStanfordNlpTaggerMaxentTaggerConfig *) nil_chk(self->config_)) getEncoding]);
        [self runTaggerWithJavaIoBufferedReader:br withJavaIoBufferedWriter:writer withNSString:[((EduStanfordNlpTaggerMaxentTaggerConfig *) nil_chk(self->config_)) getTagInside] withEduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle:outputStyle];
      }
    }
    else {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"Type some text to tag, then EOF."];
      [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:@"  (For EOF, use Return, Ctrl-D on Unix; Enter, Ctrl-Z, Enter on Windows.)"];
      br = new_JavaIoBufferedReader_initWithJavaIoReader_(new_JavaIoInputStreamReader_initWithJavaIoInputStream_(JreLoadStatic(JavaLangSystem, in)));
      [self runTaggerStdinWithJavaIoBufferedReader:br withJavaIoBufferedWriter:writer withEduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle:outputStyle];
    }
  }
  @finally {
    EduStanfordNlpIoIOUtils_closeIgnoringExceptionsWithJavaIoCloseable_(br);
    EduStanfordNlpIoIOUtils_closeIgnoringExceptionsWithJavaIoCloseable_(writer);
  }
}

void EduStanfordNlpTaggerMaxentMaxentTagger_mainWithNSStringArray_(IOSObjectArray *args) {
  EduStanfordNlpTaggerMaxentMaxentTagger_initialize();
  EduStanfordNlpTaggerMaxentTaggerConfig *config = new_EduStanfordNlpTaggerMaxentTaggerConfig_initWithNSStringArray_(args);
  if ([config getMode] == JreLoadEnum(EduStanfordNlpTaggerMaxentTaggerConfig_Mode, TRAIN)) {
    EduStanfordNlpTaggerMaxentMaxentTagger_runTrainingWithEduStanfordNlpTaggerMaxentTaggerConfig_(config);
  }
  else if ([config getMode] == JreLoadEnum(EduStanfordNlpTaggerMaxentTaggerConfig_Mode, TAG)) {
    EduStanfordNlpTaggerMaxentMaxentTagger_runTaggerWithEduStanfordNlpTaggerMaxentTaggerConfig_(config);
  }
  else if ([config getMode] == JreLoadEnum(EduStanfordNlpTaggerMaxentTaggerConfig_Mode, TEST)) {
    EduStanfordNlpTaggerMaxentMaxentTagger_runTestWithEduStanfordNlpTaggerMaxentTaggerConfig_(config);
  }
  else if ([config getMode] == JreLoadEnum(EduStanfordNlpTaggerMaxentTaggerConfig_Mode, DUMP)) {
    EduStanfordNlpTaggerMaxentMaxentTagger_dumpModelWithEduStanfordNlpTaggerMaxentTaggerConfig_(config);
  }
  else {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"Impossible: nothing to do. None of train, tag, test, or dump was specified."];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTaggerMaxentMaxentTagger)

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle)

EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle *EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle_values_[5];

@implementation EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle

+ (EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle *)fromShortNameWithNSString:(NSString *)name {
  return EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle_fromShortNameWithNSString_(name);
}

+ (jboolean)defaultToPreserveSpacingWithNSString:(NSString *)str {
  return EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle_defaultToPreserveSpacingWithNSString_(str);
}

+ (IOSObjectArray *)values {
  return EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle_values();
}

+ (EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle *)valueOfWithNSString:(NSString *)name {
  return EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle_valueOfWithNSString_(name);
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LEduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 2, 1, -1, -1, -1, -1 },
    { NULL, "[LEduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle;", 0x9, 3, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(fromShortNameWithNSString:);
  methods[1].selector = @selector(defaultToPreserveSpacingWithNSString:);
  methods[2].selector = @selector(values);
  methods[3].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "SLASH_TAGS", "LEduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "XML", "LEduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
    { "INLINE_XML", "LEduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle;", .constantValue.asLong = 0, 0x4019, -1, 6, -1, -1 },
    { "TSV", "LEduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle;", .constantValue.asLong = 0, 0x4019, -1, 7, -1, -1 },
    { "TABBED", "LEduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle;", .constantValue.asLong = 0, 0x4019, -1, 8, -1, -1 },
    { "shortName_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "shortNames", "LJavaUtilMap;", .constantValue.asLong = 0, 0x1a, -1, 9, 10, -1 },
  };
  static const void *ptrTable[] = { "fromShortName", "LNSString;", "defaultToPreserveSpacing", "valueOf", &JreEnum(EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle, SLASH_TAGS), &JreEnum(EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle, XML), &JreEnum(EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle, INLINE_XML), &JreEnum(EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle, TSV), &JreEnum(EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle, TABBED), &EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle_shortNames, "Ljava/util/Map<Ljava/lang/String;Ledu/stanford/nlp/tagger/maxent/MaxentTagger$OutputStyle;>;", "LEduStanfordNlpTaggerMaxentMaxentTagger;", "Ljava/lang/Enum<Ledu/stanford/nlp/tagger/maxent/MaxentTagger$OutputStyle;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle = { "OutputStyle", "edu.stanford.nlp.tagger.maxent", ptrTable, methods, fields, 7, 0x4019, 4, 7, 11, -1, -1, 12, -1 };
  return &_EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle;
}

+ (void)initialize {
  if (self == [EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle class]) {
    JreEnum(EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle, SLASH_TAGS) = new_EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle_initWithNSString_withNSString_withInt_(@"slashTags", @"SLASH_TAGS", 0);
    JreEnum(EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle, XML) = new_EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle_initWithNSString_withNSString_withInt_(@"xml", @"XML", 1);
    JreEnum(EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle, INLINE_XML) = new_EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle_initWithNSString_withNSString_withInt_(@"inlineXML", @"INLINE_XML", 2);
    JreEnum(EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle, TSV) = new_EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle_initWithNSString_withNSString_withInt_(@"tsv", @"TSV", 3);
    JreEnum(EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle, TABBED) = new_EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle_initWithNSString_withNSString_withInt_(@"tabbedEntities", @"TABBED", 4);
    EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle_shortNames = EduStanfordNlpUtilGenerics_newHashMap();
    {
      {
        IOSObjectArray *a__ = EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle_values();
        EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
        EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle *style = *b__++;
          (void) [((id<JavaUtilMap>) nil_chk(EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle_shortNames)) putWithId:((EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle *) nil_chk(style))->shortName_ withId:style];
        }
      }
    }
    J2OBJC_SET_INITIALIZED(EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle)
  }
}

@end

void EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle_initWithNSString_withNSString_withInt_(EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle *self, NSString *shortName, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
  self->shortName_ = shortName;
}

EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle *new_EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle_initWithNSString_withNSString_withInt_(NSString *shortName, NSString *__name, jint __ordinal) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle, initWithNSString_withNSString_withInt_, shortName, __name, __ordinal)
}

EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle *EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle_fromShortNameWithNSString_(NSString *name) {
  EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle_initialize();
  EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle *result = [((id<JavaUtilMap>) nil_chk(EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle_shortNames)) getWithId:name];
  if (result == nil) @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", name, @" is not an OutputStyle"));
  return result;
}

jboolean EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle_defaultToPreserveSpacingWithNSString_(NSString *str) {
  EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle_initialize();
  return [((NSString *) nil_chk(str)) isEqual:((EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle *) nil_chk(JreEnum(EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle, XML)))->shortName_] || [str isEqual:((EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle *) nil_chk(JreEnum(EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle, INLINE_XML)))->shortName_];
}

IOSObjectArray *EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle_values() {
  EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle_initialize();
  return [IOSObjectArray arrayWithObjects:EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle_values_ count:5 type:EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle_class_()];
}

EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle *EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle_valueOfWithNSString_(NSString *name) {
  EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle_initialize();
  for (int i = 0; i < 5; i++) {
    EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle *e = EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle *EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle_fromOrdinal(NSUInteger ordinal) {
  EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle_initialize();
  if (ordinal >= 5) {
    return nil;
  }
  return EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle)

@implementation EduStanfordNlpTaggerMaxentMaxentTagger_TaggerWrapper

- (instancetype)initWithEduStanfordNlpTaggerMaxentMaxentTagger:(EduStanfordNlpTaggerMaxentMaxentTagger *)tagger {
  EduStanfordNlpTaggerMaxentMaxentTagger_TaggerWrapper_initWithEduStanfordNlpTaggerMaxentMaxentTagger_(self, tagger);
  return self;
}

- (NSString *)applyWithId:(NSString *)o {
  JavaIoStringWriter *taggedResults = new_JavaIoStringWriter_init();
  id<JavaUtilList> sentences;
  if (tokenize_) {
    sentences = EduStanfordNlpTaggerMaxentMaxentTagger_tokenizeTextWithJavaIoReader_withEduStanfordNlpProcessTokenizerFactory_(new_JavaIoStringReader_initWithNSString_(o), tokenizerFactory_);
  }
  else {
    sentences = EduStanfordNlpUtilGenerics_newArrayList();
    [((id<JavaUtilList>) nil_chk(sentences)) addWithId:EduStanfordNlpLingSentence_toWordListWithNSStringArray_([((NSString *) nil_chk(o)) split:@"\\s+"])];
  }
  if ([((EduStanfordNlpTaggerMaxentTaggerConfig *) nil_chk(config_)) getNThreads] != 1) {
    EduStanfordNlpUtilConcurrentMulticoreWrapper *wrapper = new_EduStanfordNlpUtilConcurrentMulticoreWrapper_initWithInt_withEduStanfordNlpUtilConcurrentThreadsafeProcessor_([config_ getNThreads], new_EduStanfordNlpTaggerMaxentMaxentTagger_SentenceTaggingProcessor_initWithEduStanfordNlpTaggerMaxentMaxentTagger_withBoolean_(tagger_, outputLemmas_));
    for (id<JavaUtilList> __strong sentence in nil_chk(sentences)) {
      [wrapper putWithId:sentence];
      while ([wrapper peek]) {
        id<JavaUtilList> taggedSentence = [wrapper poll];
        [((EduStanfordNlpTaggerMaxentMaxentTagger *) nil_chk(tagger_)) outputTaggedSentenceWithJavaUtilList:taggedSentence withBoolean:outputLemmas_ withEduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle:outputStyle_ withBoolean:outputVerbosity_ withInt:sentNum_++ withNSString:@" " withJavaIoWriter:taggedResults];
      }
    }
    [wrapper join];
    while ([wrapper peek]) {
      id<JavaUtilList> taggedSentence = [wrapper poll];
      [((EduStanfordNlpTaggerMaxentMaxentTagger *) nil_chk(tagger_)) outputTaggedSentenceWithJavaUtilList:taggedSentence withBoolean:outputLemmas_ withEduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle:outputStyle_ withBoolean:outputVerbosity_ withInt:sentNum_++ withNSString:@" " withJavaIoWriter:taggedResults];
    }
  }
  else {
    for (id<JavaUtilList> __strong sent in nil_chk(sentences)) {
      sent = [((EduStanfordNlpTaggerMaxentMaxentTagger *) nil_chk(tagger_)) tagCoreLabelsOrHasWordsWithJavaUtilList:sent withEduStanfordNlpProcessMorphology:morpha_ withBoolean:outputLemmas_];
      [tagger_ outputTaggedSentenceWithJavaUtilList:sent withBoolean:outputLemmas_ withEduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle:outputStyle_ withBoolean:outputVerbosity_ withInt:sentNum_++ withNSString:@" " withJavaIoWriter:taggedResults];
    }
  }
  return [taggedResults description];
}

- (id<JavaUtilFunctionFunction>)andThenWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_andThenWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilFunctionFunction>)composeWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_composeWithJavaUtilFunctionFunction_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpTaggerMaxentMaxentTagger:);
  methods[1].selector = @selector(applyWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "config_", "LEduStanfordNlpTaggerMaxentTaggerConfig;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "tagger_", "LEduStanfordNlpTaggerMaxentMaxentTagger;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "tokenizerFactory_", "LEduStanfordNlpProcessTokenizerFactory;", .constantValue.asLong = 0, 0x2, -1, -1, 3, -1 },
    { "sentNum_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "tokenize_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "outputVerbosity_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "outputLemmas_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "outputStyle_", "LEduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "morpha_", "LEduStanfordNlpProcessMorphology;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpTaggerMaxentMaxentTagger;", "apply", "LNSString;", "Ledu/stanford/nlp/process/TokenizerFactory<+Ledu/stanford/nlp/ling/HasWord;>;", "Ljava/lang/Object;Ljava/util/function/Function<Ljava/lang/String;Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpTaggerMaxentMaxentTagger_TaggerWrapper = { "TaggerWrapper", "edu.stanford.nlp.tagger.maxent", ptrTable, methods, fields, 7, 0x8, 2, 9, 0, -1, -1, 4, -1 };
  return &_EduStanfordNlpTaggerMaxentMaxentTagger_TaggerWrapper;
}

@end

void EduStanfordNlpTaggerMaxentMaxentTagger_TaggerWrapper_initWithEduStanfordNlpTaggerMaxentMaxentTagger_(EduStanfordNlpTaggerMaxentMaxentTagger_TaggerWrapper *self, EduStanfordNlpTaggerMaxentMaxentTagger *tagger) {
  NSObject_init(self);
  self->tagger_ = tagger;
  self->config_ = ((EduStanfordNlpTaggerMaxentMaxentTagger *) nil_chk(tagger))->config_;
  @try {
    self->tokenizerFactory_ = EduStanfordNlpTaggerMaxentMaxentTagger_chooseTokenizerFactoryWithBoolean_withNSString_withNSString_withBoolean_([((EduStanfordNlpTaggerMaxentTaggerConfig *) nil_chk(self->config_)) getTokenize], [self->config_ getTokenizerFactory], [self->config_ getTokenizerOptions], [self->config_ getTokenizerInvertible]);
  }
  @catch (JavaLangException *e) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$", @"Error in tokenizer factory instantiation for class: ", [self->config_ getTokenizerFactory])];
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    self->tokenizerFactory_ = EduStanfordNlpProcessPTBTokenizer_PTBTokenizerFactory_newWordTokenizerFactoryWithNSString_([self->config_ getTokenizerOptions]);
  }
  self->outputStyle_ = EduStanfordNlpTaggerMaxentMaxentTagger_OutputStyle_fromShortNameWithNSString_([self->config_ getOutputFormat]);
  self->outputVerbosity_ = [self->config_ getOutputVerbosity];
  self->outputLemmas_ = [self->config_ getOutputLemmas];
  self->morpha_ = (self->outputLemmas_) ? new_EduStanfordNlpProcessMorphology_init() : nil;
  self->tokenize_ = [self->config_ getTokenize];
}

EduStanfordNlpTaggerMaxentMaxentTagger_TaggerWrapper *new_EduStanfordNlpTaggerMaxentMaxentTagger_TaggerWrapper_initWithEduStanfordNlpTaggerMaxentMaxentTagger_(EduStanfordNlpTaggerMaxentMaxentTagger *tagger) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTaggerMaxentMaxentTagger_TaggerWrapper, initWithEduStanfordNlpTaggerMaxentMaxentTagger_, tagger)
}

EduStanfordNlpTaggerMaxentMaxentTagger_TaggerWrapper *create_EduStanfordNlpTaggerMaxentMaxentTagger_TaggerWrapper_initWithEduStanfordNlpTaggerMaxentMaxentTagger_(EduStanfordNlpTaggerMaxentMaxentTagger *tagger) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTaggerMaxentMaxentTagger_TaggerWrapper, initWithEduStanfordNlpTaggerMaxentMaxentTagger_, tagger)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTaggerMaxentMaxentTagger_TaggerWrapper)

@implementation EduStanfordNlpTaggerMaxentMaxentTagger_SentenceTaggingProcessor

- (instancetype)initWithEduStanfordNlpTaggerMaxentMaxentTagger:(EduStanfordNlpTaggerMaxentMaxentTagger *)maxentTagger
                                                   withBoolean:(jboolean)outputLemmas {
  EduStanfordNlpTaggerMaxentMaxentTagger_SentenceTaggingProcessor_initWithEduStanfordNlpTaggerMaxentMaxentTagger_withBoolean_(self, maxentTagger, outputLemmas);
  return self;
}

- (id<JavaUtilList>)processWithId:(id<JavaUtilList>)sentence {
  return [((EduStanfordNlpTaggerMaxentMaxentTagger *) nil_chk(maxentTagger_)) tagCoreLabelsOrHasWordsWithJavaUtilList:sentence withEduStanfordNlpProcessMorphology:nil withBoolean:outputLemmas_];
}

- (id<EduStanfordNlpUtilConcurrentThreadsafeProcessor>)newInstance {
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 1, 2, -1, 3, -1, -1 },
    { NULL, "LEduStanfordNlpUtilConcurrentThreadsafeProcessor;", 0x1, -1, -1, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpTaggerMaxentMaxentTagger:withBoolean:);
  methods[1].selector = @selector(processWithId:);
  methods[2].selector = @selector(newInstance);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "maxentTagger_", "LEduStanfordNlpTaggerMaxentMaxentTagger;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "outputLemmas_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpTaggerMaxentMaxentTagger;Z", "process", "LJavaUtilList;", "(Ljava/util/List<+Ledu/stanford/nlp/ling/HasWord;>;)Ljava/util/List<+Ledu/stanford/nlp/ling/HasWord;>;", "()Ledu/stanford/nlp/util/concurrent/ThreadsafeProcessor<Ljava/util/List<+Ledu/stanford/nlp/ling/HasWord;>;Ljava/util/List<+Ledu/stanford/nlp/ling/HasWord;>;>;", "LEduStanfordNlpTaggerMaxentMaxentTagger;", "Ljava/lang/Object;Ledu/stanford/nlp/util/concurrent/ThreadsafeProcessor<Ljava/util/List<+Ledu/stanford/nlp/ling/HasWord;>;Ljava/util/List<+Ledu/stanford/nlp/ling/HasWord;>;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpTaggerMaxentMaxentTagger_SentenceTaggingProcessor = { "SentenceTaggingProcessor", "edu.stanford.nlp.tagger.maxent", ptrTable, methods, fields, 7, 0x8, 3, 2, 5, -1, -1, 6, -1 };
  return &_EduStanfordNlpTaggerMaxentMaxentTagger_SentenceTaggingProcessor;
}

@end

void EduStanfordNlpTaggerMaxentMaxentTagger_SentenceTaggingProcessor_initWithEduStanfordNlpTaggerMaxentMaxentTagger_withBoolean_(EduStanfordNlpTaggerMaxentMaxentTagger_SentenceTaggingProcessor *self, EduStanfordNlpTaggerMaxentMaxentTagger *maxentTagger, jboolean outputLemmas) {
  NSObject_init(self);
  self->maxentTagger_ = maxentTagger;
  self->outputLemmas_ = outputLemmas;
}

EduStanfordNlpTaggerMaxentMaxentTagger_SentenceTaggingProcessor *new_EduStanfordNlpTaggerMaxentMaxentTagger_SentenceTaggingProcessor_initWithEduStanfordNlpTaggerMaxentMaxentTagger_withBoolean_(EduStanfordNlpTaggerMaxentMaxentTagger *maxentTagger, jboolean outputLemmas) {
  J2OBJC_NEW_IMPL(EduStanfordNlpTaggerMaxentMaxentTagger_SentenceTaggingProcessor, initWithEduStanfordNlpTaggerMaxentMaxentTagger_withBoolean_, maxentTagger, outputLemmas)
}

EduStanfordNlpTaggerMaxentMaxentTagger_SentenceTaggingProcessor *create_EduStanfordNlpTaggerMaxentMaxentTagger_SentenceTaggingProcessor_initWithEduStanfordNlpTaggerMaxentMaxentTagger_withBoolean_(EduStanfordNlpTaggerMaxentMaxentTagger *maxentTagger, jboolean outputLemmas) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpTaggerMaxentMaxentTagger_SentenceTaggingProcessor, initWithEduStanfordNlpTaggerMaxentMaxentTagger_withBoolean_, maxentTagger, outputLemmas)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpTaggerMaxentMaxentTagger_SentenceTaggingProcessor)
