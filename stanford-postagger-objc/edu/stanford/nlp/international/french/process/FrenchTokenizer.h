//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/international/french/process/FrenchTokenizer.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_EduStanfordNlpInternationalFrenchProcessFrenchTokenizer")
#ifdef RESTRICT_EduStanfordNlpInternationalFrenchProcessFrenchTokenizer
#define INCLUDE_ALL_EduStanfordNlpInternationalFrenchProcessFrenchTokenizer 0
#else
#define INCLUDE_ALL_EduStanfordNlpInternationalFrenchProcessFrenchTokenizer 1
#endif
#undef RESTRICT_EduStanfordNlpInternationalFrenchProcessFrenchTokenizer

#if !defined (EduStanfordNlpInternationalFrenchProcessFrenchTokenizer_) && (INCLUDE_ALL_EduStanfordNlpInternationalFrenchProcessFrenchTokenizer || defined(INCLUDE_EduStanfordNlpInternationalFrenchProcessFrenchTokenizer))
#define EduStanfordNlpInternationalFrenchProcessFrenchTokenizer_

#define RESTRICT_EduStanfordNlpProcessAbstractTokenizer 1
#define INCLUDE_EduStanfordNlpProcessAbstractTokenizer 1
#include "edu/stanford/nlp/process/AbstractTokenizer.h"

@class IOSObjectArray;
@class JavaIoReader;
@class JavaUtilProperties;
@protocol EduStanfordNlpLingHasWord;
@protocol EduStanfordNlpProcessLexedTokenFactory;
@protocol EduStanfordNlpProcessTokenizerFactory;

@interface EduStanfordNlpInternationalFrenchProcessFrenchTokenizer : EduStanfordNlpProcessAbstractTokenizer

#pragma mark Public

- (instancetype)initWithJavaIoReader:(JavaIoReader *)r
withEduStanfordNlpProcessLexedTokenFactory:(id<EduStanfordNlpProcessLexedTokenFactory>)tf
              withJavaUtilProperties:(JavaUtilProperties *)lexerProperties
                         withBoolean:(jboolean)splitCompounds;

+ (id<EduStanfordNlpProcessTokenizerFactory>)factory;

+ (id<EduStanfordNlpProcessTokenizerFactory>)factoryWithEduStanfordNlpProcessLexedTokenFactory:(id<EduStanfordNlpProcessLexedTokenFactory>)factory
                                                                                  withNSString:(NSString *)options;

+ (id<EduStanfordNlpProcessTokenizerFactory>)ftbFactory;

+ (void)mainWithNSStringArray:(IOSObjectArray *)args;

- (id<EduStanfordNlpLingHasWord>)next;

- (id<EduStanfordNlpLingHasWord>)peek;

#pragma mark Protected

- (id<EduStanfordNlpLingHasWord>)getNext;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpInternationalFrenchProcessFrenchTokenizer)

inline NSString *EduStanfordNlpInternationalFrenchProcessFrenchTokenizer_get_FTB_OPTIONS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *EduStanfordNlpInternationalFrenchProcessFrenchTokenizer_FTB_OPTIONS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpInternationalFrenchProcessFrenchTokenizer, FTB_OPTIONS, NSString *)

FOUNDATION_EXPORT void EduStanfordNlpInternationalFrenchProcessFrenchTokenizer_initWithJavaIoReader_withEduStanfordNlpProcessLexedTokenFactory_withJavaUtilProperties_withBoolean_(EduStanfordNlpInternationalFrenchProcessFrenchTokenizer *self, JavaIoReader *r, id<EduStanfordNlpProcessLexedTokenFactory> tf, JavaUtilProperties *lexerProperties, jboolean splitCompounds);

FOUNDATION_EXPORT EduStanfordNlpInternationalFrenchProcessFrenchTokenizer *new_EduStanfordNlpInternationalFrenchProcessFrenchTokenizer_initWithJavaIoReader_withEduStanfordNlpProcessLexedTokenFactory_withJavaUtilProperties_withBoolean_(JavaIoReader *r, id<EduStanfordNlpProcessLexedTokenFactory> tf, JavaUtilProperties *lexerProperties, jboolean splitCompounds) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EduStanfordNlpInternationalFrenchProcessFrenchTokenizer *create_EduStanfordNlpInternationalFrenchProcessFrenchTokenizer_initWithJavaIoReader_withEduStanfordNlpProcessLexedTokenFactory_withJavaUtilProperties_withBoolean_(JavaIoReader *r, id<EduStanfordNlpProcessLexedTokenFactory> tf, JavaUtilProperties *lexerProperties, jboolean splitCompounds);

FOUNDATION_EXPORT id<EduStanfordNlpProcessTokenizerFactory> EduStanfordNlpInternationalFrenchProcessFrenchTokenizer_factory();

FOUNDATION_EXPORT id<EduStanfordNlpProcessTokenizerFactory> EduStanfordNlpInternationalFrenchProcessFrenchTokenizer_factoryWithEduStanfordNlpProcessLexedTokenFactory_withNSString_(id<EduStanfordNlpProcessLexedTokenFactory> factory, NSString *options);

FOUNDATION_EXPORT id<EduStanfordNlpProcessTokenizerFactory> EduStanfordNlpInternationalFrenchProcessFrenchTokenizer_ftbFactory();

FOUNDATION_EXPORT void EduStanfordNlpInternationalFrenchProcessFrenchTokenizer_mainWithNSStringArray_(IOSObjectArray *args);

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpInternationalFrenchProcessFrenchTokenizer)

#endif

#if !defined (EduStanfordNlpInternationalFrenchProcessFrenchTokenizer_FrenchTokenizerFactory_) && (INCLUDE_ALL_EduStanfordNlpInternationalFrenchProcessFrenchTokenizer || defined(INCLUDE_EduStanfordNlpInternationalFrenchProcessFrenchTokenizer_FrenchTokenizerFactory))
#define EduStanfordNlpInternationalFrenchProcessFrenchTokenizer_FrenchTokenizerFactory_

#define RESTRICT_EduStanfordNlpProcessTokenizerFactory 1
#define INCLUDE_EduStanfordNlpProcessTokenizerFactory 1
#include "edu/stanford/nlp/process/TokenizerFactory.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class JavaIoReader;
@class JavaUtilProperties;
@protocol EduStanfordNlpProcessLexedTokenFactory;
@protocol EduStanfordNlpProcessTokenizer;
@protocol JavaUtilIterator;

@interface EduStanfordNlpInternationalFrenchProcessFrenchTokenizer_FrenchTokenizerFactory : NSObject < EduStanfordNlpProcessTokenizerFactory, JavaIoSerializable > {
 @public
  id<EduStanfordNlpProcessLexedTokenFactory> factory_;
  JavaUtilProperties *lexerProperties_;
  jboolean splitCompoundOption_;
}

#pragma mark Public

- (id<JavaUtilIterator>)getIteratorWithJavaIoReader:(JavaIoReader *)r;

- (id<EduStanfordNlpProcessTokenizer>)getTokenizerWithJavaIoReader:(JavaIoReader *)r;

- (id<EduStanfordNlpProcessTokenizer>)getTokenizerWithJavaIoReader:(JavaIoReader *)r
                                                      withNSString:(NSString *)extraOptions;

+ (id<EduStanfordNlpProcessTokenizerFactory>)newTokenizerFactory OBJC_METHOD_FAMILY_NONE;

+ (id<EduStanfordNlpProcessTokenizerFactory>)newWordTokenizerFactoryWithNSString:(NSString *)options OBJC_METHOD_FAMILY_NONE;

- (void)setOptionsWithNSString:(NSString *)options;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpInternationalFrenchProcessFrenchTokenizer_FrenchTokenizerFactory)

J2OBJC_FIELD_SETTER(EduStanfordNlpInternationalFrenchProcessFrenchTokenizer_FrenchTokenizerFactory, factory_, id<EduStanfordNlpProcessLexedTokenFactory>)
J2OBJC_FIELD_SETTER(EduStanfordNlpInternationalFrenchProcessFrenchTokenizer_FrenchTokenizerFactory, lexerProperties_, JavaUtilProperties *)

FOUNDATION_EXPORT id<EduStanfordNlpProcessTokenizerFactory> EduStanfordNlpInternationalFrenchProcessFrenchTokenizer_FrenchTokenizerFactory_newTokenizerFactory();

FOUNDATION_EXPORT id<EduStanfordNlpProcessTokenizerFactory> EduStanfordNlpInternationalFrenchProcessFrenchTokenizer_FrenchTokenizerFactory_newWordTokenizerFactoryWithNSString_(NSString *options);

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpInternationalFrenchProcessFrenchTokenizer_FrenchTokenizerFactory)

#endif

#pragma pop_macro("INCLUDE_ALL_EduStanfordNlpInternationalFrenchProcessFrenchTokenizer")
