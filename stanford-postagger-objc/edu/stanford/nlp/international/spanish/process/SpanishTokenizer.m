//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/international/spanish/process/SpanishTokenizer.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/international/spanish/SpanishVerbStripper.h"
#include "edu/stanford/nlp/international/spanish/process/SpanishLexer.h"
#include "edu/stanford/nlp/international/spanish/process/SpanishTokenizer.h"
#include "edu/stanford/nlp/io/RuntimeIOException.h"
#include "edu/stanford/nlp/ling/CoreAnnotations.h"
#include "edu/stanford/nlp/ling/CoreLabel.h"
#include "edu/stanford/nlp/ling/HasWord.h"
#include "edu/stanford/nlp/process/AbstractTokenizer.h"
#include "edu/stanford/nlp/process/CoreLabelTokenFactory.h"
#include "edu/stanford/nlp/process/LexedTokenFactory.h"
#include "edu/stanford/nlp/process/Tokenizer.h"
#include "edu/stanford/nlp/process/TokenizerFactory.h"
#include "edu/stanford/nlp/util/Generics.h"
#include "edu/stanford/nlp/util/Pair.h"
#include "edu/stanford/nlp/util/PropertiesUtils.h"
#include "edu/stanford/nlp/util/StringUtils.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/InputStreamReader.h"
#include "java/io/PrintStream.h"
#include "java/io/Reader.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/lang/Boolean.h"
#include "java/lang/Character.h"
#include "java/lang/Double.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/Properties.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface EduStanfordNlpInternationalSpanishProcessSpanishTokenizer () {
 @public
  EduStanfordNlpInternationalSpanishProcessSpanishLexer *lexer_;
  jboolean splitCompounds_;
  jboolean splitVerbs_;
  jboolean splitContractions_;
  jboolean splitAny_;
  id<JavaUtilList> compoundBuffer_;
  EduStanfordNlpInternationalSpanishSpanishVerbStripper *verbStripper_;
}

+ (EduStanfordNlpLingCoreLabel *)copyCoreLabelWithEduStanfordNlpLingCoreLabel:(EduStanfordNlpLingCoreLabel *)cl
                                                                 withNSString:(NSString *)part OBJC_METHOD_FAMILY_NONE;

- (EduStanfordNlpLingCoreLabel *)processContractionWithEduStanfordNlpLingCoreLabel:(EduStanfordNlpLingCoreLabel *)cl;

- (EduStanfordNlpLingCoreLabel *)processVerbWithEduStanfordNlpLingCoreLabel:(EduStanfordNlpLingCoreLabel *)cl;

- (EduStanfordNlpLingCoreLabel *)processCompoundWithEduStanfordNlpLingCoreLabel:(EduStanfordNlpLingCoreLabel *)cl;

+ (NSString *)usage;

+ (id<JavaUtilMap>)argOptionDefs;

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpInternationalSpanishProcessSpanishTokenizer, lexer_, EduStanfordNlpInternationalSpanishProcessSpanishLexer *)
J2OBJC_FIELD_SETTER(EduStanfordNlpInternationalSpanishProcessSpanishTokenizer, compoundBuffer_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(EduStanfordNlpInternationalSpanishProcessSpanishTokenizer, verbStripper_, EduStanfordNlpInternationalSpanishSpanishVerbStripper *)

inline JavaUtilRegexPattern *EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_get_pDash();
static JavaUtilRegexPattern *EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_pDash;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpInternationalSpanishProcessSpanishTokenizer, pDash, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_get_pSpace();
static JavaUtilRegexPattern *EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_pSpace;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpInternationalSpanishProcessSpanishTokenizer, pSpace, JavaUtilRegexPattern *)

__attribute__((unused)) static EduStanfordNlpLingCoreLabel *EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_copyCoreLabelWithEduStanfordNlpLingCoreLabel_withNSString_(EduStanfordNlpLingCoreLabel *cl, NSString *part);

__attribute__((unused)) static EduStanfordNlpLingCoreLabel *EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_processContractionWithEduStanfordNlpLingCoreLabel_(EduStanfordNlpInternationalSpanishProcessSpanishTokenizer *self, EduStanfordNlpLingCoreLabel *cl);

__attribute__((unused)) static EduStanfordNlpLingCoreLabel *EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_processVerbWithEduStanfordNlpLingCoreLabel_(EduStanfordNlpInternationalSpanishProcessSpanishTokenizer *self, EduStanfordNlpLingCoreLabel *cl);

__attribute__((unused)) static EduStanfordNlpLingCoreLabel *EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_processCompoundWithEduStanfordNlpLingCoreLabel_(EduStanfordNlpInternationalSpanishProcessSpanishTokenizer *self, EduStanfordNlpLingCoreLabel *cl);

__attribute__((unused)) static NSString *EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_usage();

__attribute__((unused)) static id<JavaUtilMap> EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_argOptionDefs();

@interface EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_SpanishTokenizerFactory ()

- (instancetype)initWithEduStanfordNlpProcessLexedTokenFactory:(id<EduStanfordNlpProcessLexedTokenFactory>)factory;

- (instancetype)initWithEduStanfordNlpProcessLexedTokenFactory:(id<EduStanfordNlpProcessLexedTokenFactory>)factory
                                                  withNSString:(NSString *)options;

@end

inline jlong EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_SpanishTokenizerFactory_get_serialVersionUID();
#define EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_SpanishTokenizerFactory_serialVersionUID 946818805507187330LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_SpanishTokenizerFactory, serialVersionUID, jlong)

__attribute__((unused)) static void EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_SpanishTokenizerFactory_initWithEduStanfordNlpProcessLexedTokenFactory_(EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_SpanishTokenizerFactory *self, id<EduStanfordNlpProcessLexedTokenFactory> factory);

__attribute__((unused)) static EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_SpanishTokenizerFactory *new_EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_SpanishTokenizerFactory_initWithEduStanfordNlpProcessLexedTokenFactory_(id<EduStanfordNlpProcessLexedTokenFactory> factory) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_SpanishTokenizerFactory *create_EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_SpanishTokenizerFactory_initWithEduStanfordNlpProcessLexedTokenFactory_(id<EduStanfordNlpProcessLexedTokenFactory> factory);

__attribute__((unused)) static void EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_SpanishTokenizerFactory_initWithEduStanfordNlpProcessLexedTokenFactory_withNSString_(EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_SpanishTokenizerFactory *self, id<EduStanfordNlpProcessLexedTokenFactory> factory, NSString *options);

__attribute__((unused)) static EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_SpanishTokenizerFactory *new_EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_SpanishTokenizerFactory_initWithEduStanfordNlpProcessLexedTokenFactory_withNSString_(id<EduStanfordNlpProcessLexedTokenFactory> factory, NSString *options) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_SpanishTokenizerFactory *create_EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_SpanishTokenizerFactory_initWithEduStanfordNlpProcessLexedTokenFactory_withNSString_(id<EduStanfordNlpProcessLexedTokenFactory> factory, NSString *options);

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpInternationalSpanishProcessSpanishTokenizer)

NSString *EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_ANCORA_OPTIONS = @"ptb3Ellipsis=true,normalizeParentheses=true,ptb3Dashes=false,splitAll=true";

@implementation EduStanfordNlpInternationalSpanishProcessSpanishTokenizer

- (instancetype)initWithJavaIoReader:(JavaIoReader *)r
withEduStanfordNlpProcessLexedTokenFactory:(id<EduStanfordNlpProcessLexedTokenFactory>)tf
              withJavaUtilProperties:(JavaUtilProperties *)lexerProperties
                         withBoolean:(jboolean)splitCompounds
                         withBoolean:(jboolean)splitVerbs
                         withBoolean:(jboolean)splitContractions {
  EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_initWithJavaIoReader_withEduStanfordNlpProcessLexedTokenFactory_withJavaUtilProperties_withBoolean_withBoolean_withBoolean_(self, r, tf, lexerProperties, splitCompounds, splitVerbs, splitContractions);
  return self;
}

- (id<EduStanfordNlpLingHasWord>)getNext {
  @try {
    id<EduStanfordNlpLingHasWord> nextToken;
    do {
      nextToken = (splitAny_ && ![((id<JavaUtilList>) nil_chk(compoundBuffer_)) isEmpty]) ? [((id<JavaUtilList>) nil_chk(compoundBuffer_)) removeWithInt:0] : (id) (id<EduStanfordNlpLingHasWord>) cast_check([((EduStanfordNlpInternationalSpanishProcessSpanishLexer *) nil_chk(lexer_)) next], EduStanfordNlpLingHasWord_class_());
    }
    while (nextToken != nil && [((NSString *) nil_chk([nextToken word])) isEmpty]);
    if (splitAny_ && [nextToken isKindOfClass:[EduStanfordNlpLingCoreLabel class]]) {
      EduStanfordNlpLingCoreLabel *cl = (EduStanfordNlpLingCoreLabel *) cast_chk(nextToken, [EduStanfordNlpLingCoreLabel class]);
      if ([cl containsKeyWithIOSClass:EduStanfordNlpLingCoreAnnotations_ParentAnnotation_class_()]) {
        if (splitCompounds_ && [((NSString *) nil_chk([cl getWithIOSClass:EduStanfordNlpLingCoreAnnotations_ParentAnnotation_class_()])) isEqual:EduStanfordNlpInternationalSpanishProcessSpanishLexer_COMPOUND_ANNOTATION]) nextToken = EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_processCompoundWithEduStanfordNlpLingCoreLabel_(self, cl);
        else if (splitVerbs_ && [((NSString *) nil_chk([cl getWithIOSClass:EduStanfordNlpLingCoreAnnotations_ParentAnnotation_class_()])) isEqual:EduStanfordNlpInternationalSpanishProcessSpanishLexer_VB_PRON_ANNOTATION]) nextToken = EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_processVerbWithEduStanfordNlpLingCoreLabel_(self, cl);
        else if (splitContractions_ && [((NSString *) nil_chk([cl getWithIOSClass:EduStanfordNlpLingCoreAnnotations_ParentAnnotation_class_()])) isEqual:EduStanfordNlpInternationalSpanishProcessSpanishLexer_CONTR_ANNOTATION]) nextToken = EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_processContractionWithEduStanfordNlpLingCoreLabel_(self, cl);
      }
    }
    return nextToken;
  }
  @catch (JavaIoIOException *e) {
    @throw new_EduStanfordNlpIoRuntimeIOException_initWithNSException_(e);
  }
}

+ (EduStanfordNlpLingCoreLabel *)copyCoreLabelWithEduStanfordNlpLingCoreLabel:(EduStanfordNlpLingCoreLabel *)cl
                                                                 withNSString:(NSString *)part {
  return EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_copyCoreLabelWithEduStanfordNlpLingCoreLabel_withNSString_(cl, part);
}

- (EduStanfordNlpLingCoreLabel *)processContractionWithEduStanfordNlpLingCoreLabel:(EduStanfordNlpLingCoreLabel *)cl {
  return EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_processContractionWithEduStanfordNlpLingCoreLabel_(self, cl);
}

- (EduStanfordNlpLingCoreLabel *)processVerbWithEduStanfordNlpLingCoreLabel:(EduStanfordNlpLingCoreLabel *)cl {
  return EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_processVerbWithEduStanfordNlpLingCoreLabel_(self, cl);
}

- (EduStanfordNlpLingCoreLabel *)processCompoundWithEduStanfordNlpLingCoreLabel:(EduStanfordNlpLingCoreLabel *)cl {
  return EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_processCompoundWithEduStanfordNlpLingCoreLabel_(self, cl);
}

+ (id<EduStanfordNlpProcessTokenizerFactory>)factoryWithEduStanfordNlpProcessLexedTokenFactory:(id<EduStanfordNlpProcessLexedTokenFactory>)factory
                                                                                  withNSString:(NSString *)options {
  return EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_factoryWithEduStanfordNlpProcessLexedTokenFactory_withNSString_(factory, options);
}

+ (id<EduStanfordNlpProcessTokenizerFactory>)factoryWithEduStanfordNlpProcessLexedTokenFactory:(id<EduStanfordNlpProcessLexedTokenFactory>)factory {
  return EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_factoryWithEduStanfordNlpProcessLexedTokenFactory_(factory);
}

+ (id<EduStanfordNlpProcessTokenizerFactory>)ancoraFactory {
  return EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_ancoraFactory();
}

+ (id<EduStanfordNlpProcessTokenizerFactory>)coreLabelFactory {
  return EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_coreLabelFactory();
}

+ (id<EduStanfordNlpProcessTokenizerFactory>)factory {
  return EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_factory();
}

+ (NSString *)usage {
  return EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_usage();
}

+ (id<JavaUtilMap>)argOptionDefs {
  return EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_argOptionDefs();
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_mainWithNSStringArray_(args);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "LEduStanfordNlpLingHasWord;", 0x4, -1, -1, -1, 2, -1, -1 },
    { NULL, "LEduStanfordNlpLingCoreLabel;", 0xa, 3, 4, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingCoreLabel;", 0x2, 5, 6, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingCoreLabel;", 0x2, 7, 6, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingCoreLabel;", 0x2, 8, 6, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpProcessTokenizerFactory;", 0x9, 9, 10, -1, 11, -1, -1 },
    { NULL, "LEduStanfordNlpProcessTokenizerFactory;", 0x9, 9, 12, -1, 13, -1, -1 },
    { NULL, "LEduStanfordNlpProcessTokenizerFactory;", 0x9, -1, -1, -1, 14, -1, -1 },
    { NULL, "LEduStanfordNlpProcessTokenizerFactory;", 0x9, -1, -1, -1, 14, -1, -1 },
    { NULL, "LEduStanfordNlpProcessTokenizerFactory;", 0x9, -1, -1, -1, 14, -1, -1 },
    { NULL, "LNSString;", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0xa, -1, -1, -1, 15, -1, -1 },
    { NULL, "V", 0x9, 16, 17, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaIoReader:withEduStanfordNlpProcessLexedTokenFactory:withJavaUtilProperties:withBoolean:withBoolean:withBoolean:);
  methods[1].selector = @selector(getNext);
  methods[2].selector = @selector(copyCoreLabelWithEduStanfordNlpLingCoreLabel:withNSString:);
  methods[3].selector = @selector(processContractionWithEduStanfordNlpLingCoreLabel:);
  methods[4].selector = @selector(processVerbWithEduStanfordNlpLingCoreLabel:);
  methods[5].selector = @selector(processCompoundWithEduStanfordNlpLingCoreLabel:);
  methods[6].selector = @selector(factoryWithEduStanfordNlpProcessLexedTokenFactory:withNSString:);
  methods[7].selector = @selector(factoryWithEduStanfordNlpProcessLexedTokenFactory:);
  methods[8].selector = @selector(ancoraFactory);
  methods[9].selector = @selector(coreLabelFactory);
  methods[10].selector = @selector(factory);
  methods[11].selector = @selector(usage);
  methods[12].selector = @selector(argOptionDefs);
  methods[13].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "lexer_", "LEduStanfordNlpInternationalSpanishProcessSpanishLexer;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "splitCompounds_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "splitVerbs_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "splitContractions_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "splitAny_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "compoundBuffer_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 18, -1 },
    { "verbStripper_", "LEduStanfordNlpInternationalSpanishSpanishVerbStripper;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ANCORA_OPTIONS", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 19, -1, -1 },
    { "pDash", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 20, -1, -1 },
    { "pSpace", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 21, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoReader;LEduStanfordNlpProcessLexedTokenFactory;LJavaUtilProperties;ZZZ", "(Ljava/io/Reader;Ledu/stanford/nlp/process/LexedTokenFactory<TT;>;Ljava/util/Properties;ZZZ)V", "()TT;", "copyCoreLabel", "LEduStanfordNlpLingCoreLabel;LNSString;", "processContraction", "LEduStanfordNlpLingCoreLabel;", "processVerb", "processCompound", "factory", "LEduStanfordNlpProcessLexedTokenFactory;LNSString;", "<T::Ledu/stanford/nlp/ling/HasWord;>(Ledu/stanford/nlp/process/LexedTokenFactory<TT;>;Ljava/lang/String;)Ledu/stanford/nlp/process/TokenizerFactory<TT;>;", "LEduStanfordNlpProcessLexedTokenFactory;", "<T::Ledu/stanford/nlp/ling/HasWord;>(Ledu/stanford/nlp/process/LexedTokenFactory<TT;>;)Ledu/stanford/nlp/process/TokenizerFactory<TT;>;", "()Ledu/stanford/nlp/process/TokenizerFactory<Ledu/stanford/nlp/ling/CoreLabel;>;", "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "main", "[LNSString;", "Ljava/util/List<Ledu/stanford/nlp/ling/CoreLabel;>;", &EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_ANCORA_OPTIONS, &EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_pDash, &EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_pSpace, "LEduStanfordNlpInternationalSpanishProcessSpanishTokenizer_SpanishTokenizerFactory;", "<T::Ledu/stanford/nlp/ling/HasWord;>Ledu/stanford/nlp/process/AbstractTokenizer<TT;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpInternationalSpanishProcessSpanishTokenizer = { "SpanishTokenizer", "edu.stanford.nlp.international.spanish.process", ptrTable, methods, fields, 7, 0x1, 14, 10, -1, 22, -1, 23, -1 };
  return &_EduStanfordNlpInternationalSpanishProcessSpanishTokenizer;
}

+ (void)initialize {
  if (self == [EduStanfordNlpInternationalSpanishProcessSpanishTokenizer class]) {
    EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_pDash = JavaUtilRegexPattern_compileWithNSString_(@"\\-");
    EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_pSpace = JavaUtilRegexPattern_compileWithNSString_(@"\\s+");
    J2OBJC_SET_INITIALIZED(EduStanfordNlpInternationalSpanishProcessSpanishTokenizer)
  }
}

@end

void EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_initWithJavaIoReader_withEduStanfordNlpProcessLexedTokenFactory_withJavaUtilProperties_withBoolean_withBoolean_withBoolean_(EduStanfordNlpInternationalSpanishProcessSpanishTokenizer *self, JavaIoReader *r, id<EduStanfordNlpProcessLexedTokenFactory> tf, JavaUtilProperties *lexerProperties, jboolean splitCompounds, jboolean splitVerbs, jboolean splitContractions) {
  EduStanfordNlpProcessAbstractTokenizer_init(self);
  self->lexer_ = new_EduStanfordNlpInternationalSpanishProcessSpanishLexer_initWithJavaIoReader_withEduStanfordNlpProcessLexedTokenFactory_withJavaUtilProperties_(r, tf, lexerProperties);
  self->splitCompounds_ = splitCompounds;
  self->splitVerbs_ = splitVerbs;
  self->splitContractions_ = splitContractions;
  self->splitAny_ = (splitCompounds || splitVerbs || splitContractions);
  if (self->splitAny_) self->compoundBuffer_ = EduStanfordNlpUtilGenerics_newArrayListWithInt_(4);
  if (splitVerbs) self->verbStripper_ = EduStanfordNlpInternationalSpanishSpanishVerbStripper_getInstance();
}

EduStanfordNlpInternationalSpanishProcessSpanishTokenizer *new_EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_initWithJavaIoReader_withEduStanfordNlpProcessLexedTokenFactory_withJavaUtilProperties_withBoolean_withBoolean_withBoolean_(JavaIoReader *r, id<EduStanfordNlpProcessLexedTokenFactory> tf, JavaUtilProperties *lexerProperties, jboolean splitCompounds, jboolean splitVerbs, jboolean splitContractions) {
  J2OBJC_NEW_IMPL(EduStanfordNlpInternationalSpanishProcessSpanishTokenizer, initWithJavaIoReader_withEduStanfordNlpProcessLexedTokenFactory_withJavaUtilProperties_withBoolean_withBoolean_withBoolean_, r, tf, lexerProperties, splitCompounds, splitVerbs, splitContractions)
}

EduStanfordNlpInternationalSpanishProcessSpanishTokenizer *create_EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_initWithJavaIoReader_withEduStanfordNlpProcessLexedTokenFactory_withJavaUtilProperties_withBoolean_withBoolean_withBoolean_(JavaIoReader *r, id<EduStanfordNlpProcessLexedTokenFactory> tf, JavaUtilProperties *lexerProperties, jboolean splitCompounds, jboolean splitVerbs, jboolean splitContractions) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpInternationalSpanishProcessSpanishTokenizer, initWithJavaIoReader_withEduStanfordNlpProcessLexedTokenFactory_withJavaUtilProperties_withBoolean_withBoolean_withBoolean_, r, tf, lexerProperties, splitCompounds, splitVerbs, splitContractions)
}

EduStanfordNlpLingCoreLabel *EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_copyCoreLabelWithEduStanfordNlpLingCoreLabel_withNSString_(EduStanfordNlpLingCoreLabel *cl, NSString *part) {
  EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_initialize();
  EduStanfordNlpLingCoreLabel *newLabel = new_EduStanfordNlpLingCoreLabel_initWithEduStanfordNlpLingCoreLabel_(cl);
  [newLabel setWordWithNSString:part];
  [newLabel setValueWithNSString:part];
  (void) [newLabel setWithIOSClass:EduStanfordNlpLingCoreAnnotations_OriginalTextAnnotation_class_() withId:part];
  return newLabel;
}

EduStanfordNlpLingCoreLabel *EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_processContractionWithEduStanfordNlpLingCoreLabel_(EduStanfordNlpInternationalSpanishProcessSpanishTokenizer *self, EduStanfordNlpLingCoreLabel *cl) {
  (void) [((EduStanfordNlpLingCoreLabel *) nil_chk(cl)) removeWithIOSClass:EduStanfordNlpLingCoreAnnotations_ParentAnnotation_class_()];
  NSString *word = [cl word];
  NSString *first;
  NSString *second;
  NSString *lowered = [((NSString *) nil_chk(word)) lowercaseString];
  {
    jchar lastChar;
    switch (JreIndexOfStr(lowered, (id[]){ @"del", @"al", @"conmigo", @"consigo", @"contigo" }, 5)) {
      case 0:
      case 1:
      first = [word substring:0 endIndex:((jint) [((NSString *) nil_chk(lowered)) length]) - 1];
      lastChar = [word charAtWithInt:((jint) [lowered length]) - 1];
      if (JavaLangCharacter_isLowerCaseWithChar_(lastChar)) second = @"el";
      else second = @"EL";
      break;
      case 2:
      case 3:
      first = [word substring:0 endIndex:3];
      second = JreStrcat("CC", [word charAtWithInt:3], 0x00ed);
      break;
      case 4:
      first = [word substring:0 endIndex:3];
      second = [word substring:3 endIndex:5];
      break;
      default:
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Invalid contraction provided to processContraction");
    }
  }
  [((id<JavaUtilList>) nil_chk(self->compoundBuffer_)) addWithId:EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_copyCoreLabelWithEduStanfordNlpLingCoreLabel_withNSString_(cl, second)];
  return EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_copyCoreLabelWithEduStanfordNlpLingCoreLabel_withNSString_(cl, first);
}

EduStanfordNlpLingCoreLabel *EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_processVerbWithEduStanfordNlpLingCoreLabel_(EduStanfordNlpInternationalSpanishProcessSpanishTokenizer *self, EduStanfordNlpLingCoreLabel *cl) {
  (void) [((EduStanfordNlpLingCoreLabel *) nil_chk(cl)) removeWithIOSClass:EduStanfordNlpLingCoreAnnotations_ParentAnnotation_class_()];
  EduStanfordNlpUtilPair *parts = [((EduStanfordNlpInternationalSpanishSpanishVerbStripper *) nil_chk(self->verbStripper_)) separatePronounsWithNSString:[cl word]];
  if (parts == nil) {
    return cl;
  }
  for (NSString * __strong pronoun in nil_chk([parts second])) {
    [((id<JavaUtilList>) nil_chk(self->compoundBuffer_)) addWithId:EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_copyCoreLabelWithEduStanfordNlpLingCoreLabel_withNSString_(cl, pronoun)];
  }
  return EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_copyCoreLabelWithEduStanfordNlpLingCoreLabel_withNSString_(cl, [parts first]);
}

EduStanfordNlpLingCoreLabel *EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_processCompoundWithEduStanfordNlpLingCoreLabel_(EduStanfordNlpInternationalSpanishProcessSpanishTokenizer *self, EduStanfordNlpLingCoreLabel *cl) {
  (void) [((EduStanfordNlpLingCoreLabel *) nil_chk(cl)) removeWithIOSClass:EduStanfordNlpLingCoreAnnotations_ParentAnnotation_class_()];
  IOSObjectArray *parts = [((JavaUtilRegexPattern *) nil_chk(EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_pSpace)) splitWithJavaLangCharSequence:[((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_pDash)) matcherWithJavaLangCharSequence:[cl word]])) replaceAllWithNSString:@" - "]];
  {
    IOSObjectArray *a__ = parts;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *part = *b__++;
      EduStanfordNlpLingCoreLabel *newLabel = new_EduStanfordNlpLingCoreLabel_initWithEduStanfordNlpLingCoreLabel_(cl);
      [newLabel setWordWithNSString:part];
      [newLabel setValueWithNSString:part];
      (void) [newLabel setWithIOSClass:EduStanfordNlpLingCoreAnnotations_OriginalTextAnnotation_class_() withId:part];
      [((id<JavaUtilList>) nil_chk(self->compoundBuffer_)) addWithId:newLabel];
    }
  }
  return [((id<JavaUtilList>) nil_chk(self->compoundBuffer_)) removeWithInt:0];
}

id<EduStanfordNlpProcessTokenizerFactory> EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_factoryWithEduStanfordNlpProcessLexedTokenFactory_withNSString_(id<EduStanfordNlpProcessLexedTokenFactory> factory, NSString *options) {
  EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_initialize();
  return new_EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_SpanishTokenizerFactory_initWithEduStanfordNlpProcessLexedTokenFactory_withNSString_(factory, options);
}

id<EduStanfordNlpProcessTokenizerFactory> EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_factoryWithEduStanfordNlpProcessLexedTokenFactory_(id<EduStanfordNlpProcessLexedTokenFactory> factory) {
  EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_initialize();
  return new_EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_SpanishTokenizerFactory_initWithEduStanfordNlpProcessLexedTokenFactory_withNSString_(factory, EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_ANCORA_OPTIONS);
}

id<EduStanfordNlpProcessTokenizerFactory> EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_ancoraFactory() {
  EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_initialize();
  id<EduStanfordNlpProcessTokenizerFactory> tf = EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_SpanishTokenizerFactory_newCoreLabelTokenizerFactory();
  [((id<EduStanfordNlpProcessTokenizerFactory>) nil_chk(tf)) setOptionsWithNSString:EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_ANCORA_OPTIONS];
  return tf;
}

id<EduStanfordNlpProcessTokenizerFactory> EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_coreLabelFactory() {
  EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_initialize();
  return EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_SpanishTokenizerFactory_newCoreLabelTokenizerFactory();
}

id<EduStanfordNlpProcessTokenizerFactory> EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_factory() {
  EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_initialize();
  return EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_coreLabelFactory();
}

NSString *EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_usage() {
  EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_initialize();
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  NSString *nl = JavaLangSystem_lineSeparator();
  (void) [sb appendWithNSString:NSString_formatWithNSString_withNSObjectArray_(@"Usage: java %s [OPTIONS] < file%n%n", [IOSObjectArray newArrayWithObjects:(id[]){ [EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_class_() getName] } count:1 type:NSObject_class_()])];
  (void) [((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"Options:"])) appendWithNSString:nl];
  (void) [((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"   -help          : Print this message."])) appendWithNSString:nl];
  (void) [((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"   -ancora        : Tokenization style of AnCora (fixed)."])) appendWithNSString:nl];
  (void) [((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"   -lowerCase     : Apply lowercasing."])) appendWithNSString:nl];
  (void) [((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"   -encoding type : Encoding format."])) appendWithNSString:nl];
  (void) [((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"   -options str   : Orthographic options (see SpanishLexer.java)"])) appendWithNSString:nl];
  (void) [((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"   -tokens        : Output tokens as line-separated instead of space-separated."])) appendWithNSString:nl];
  (void) [((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"   -onePerLine    : Output tokens one per line."])) appendWithNSString:nl];
  return [sb description];
}

id<JavaUtilMap> EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_argOptionDefs() {
  EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_initialize();
  id<JavaUtilMap> argOptionDefs = EduStanfordNlpUtilGenerics_newHashMap();
  (void) [((id<JavaUtilMap>) nil_chk(argOptionDefs)) putWithId:@"help" withId:JavaLangInteger_valueOfWithInt_(0)];
  (void) [argOptionDefs putWithId:@"ftb" withId:JavaLangInteger_valueOfWithInt_(0)];
  (void) [argOptionDefs putWithId:@"ancora" withId:JavaLangInteger_valueOfWithInt_(0)];
  (void) [argOptionDefs putWithId:@"lowerCase" withId:JavaLangInteger_valueOfWithInt_(0)];
  (void) [argOptionDefs putWithId:@"encoding" withId:JavaLangInteger_valueOfWithInt_(1)];
  (void) [argOptionDefs putWithId:@"options" withId:JavaLangInteger_valueOfWithInt_(1)];
  (void) [argOptionDefs putWithId:@"tokens" withId:JavaLangInteger_valueOfWithInt_(0)];
  return argOptionDefs;
}

void EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_mainWithNSStringArray_(IOSObjectArray *args) {
  EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_initialize();
  JavaUtilProperties *options = EduStanfordNlpUtilStringUtils_argsToPropertiesWithNSStringArray_withJavaUtilMap_(args, EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_argOptionDefs());
  if ([((JavaUtilProperties *) nil_chk(options)) containsKeyWithId:@"help"]) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_usage()];
    return;
  }
  id<EduStanfordNlpProcessTokenizerFactory> tf = EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_coreLabelFactory();
  NSString *orthoOptions = [options containsKeyWithId:@"ancora"] ? EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_ANCORA_OPTIONS : @"";
  if ([options containsKeyWithId:@"options"]) {
    orthoOptions = [orthoOptions isEmpty] ? [options getPropertyWithNSString:@"options"] : JreStrcat("$C@", orthoOptions, ',', options);
  }
  jboolean tokens = EduStanfordNlpUtilPropertiesUtils_getBoolWithJavaUtilProperties_withNSString_withBoolean_(options, @"tokens", false);
  if (!tokens) {
    orthoOptions = [orthoOptions isEmpty] ? @"tokenizeNLs" : JreStrcat("$$", orthoOptions, @",tokenizeNLs");
  }
  [((id<EduStanfordNlpProcessTokenizerFactory>) nil_chk(tf)) setOptionsWithNSString:orthoOptions];
  NSString *encoding = [options getPropertyWithNSString:@"encoding" withNSString:@"UTF-8"];
  jboolean toLower = EduStanfordNlpUtilPropertiesUtils_getBoolWithJavaUtilProperties_withNSString_withBoolean_(options, @"lowerCase", false);
  JavaUtilLocale *es = new_JavaUtilLocale_initWithNSString_(@"es");
  jboolean onePerLine = EduStanfordNlpUtilPropertiesUtils_getBoolWithJavaUtilProperties_withNSString_withBoolean_(options, @"onePerLine", false);
  jint nLines = 0;
  jint nTokens = 0;
  jlong startTime = JavaLangSystem_nanoTime();
  @try {
    id<EduStanfordNlpProcessTokenizer> tokenizer = [tf getTokenizerWithJavaIoReader:new_JavaIoInputStreamReader_initWithJavaIoInputStream_withNSString_(JreLoadStatic(JavaLangSystem, in), encoding)];
    jboolean printSpace = false;
    while ([((id<EduStanfordNlpProcessTokenizer>) nil_chk(tokenizer)) hasNext]) {
      ++nTokens;
      NSString *word = [((EduStanfordNlpLingCoreLabel *) nil_chk([tokenizer next])) word];
      if ([((NSString *) nil_chk(word)) isEqual:EduStanfordNlpInternationalSpanishProcessSpanishLexer_NEWLINE_TOKEN]) {
        ++nLines;
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) println];
        if (!onePerLine) {
          printSpace = false;
        }
      }
      else {
        NSString *outputToken = toLower ? [word lowercaseStringWithJRELocale:es] : word;
        if (onePerLine) {
          [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:outputToken];
        }
        else {
          if (printSpace) {
            [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printWithNSString:@" "];
          }
          [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printWithNSString:outputToken];
          printSpace = true;
        }
      }
    }
  }
  @catch (JavaIoUnsupportedEncodingException *e) {
    @throw new_EduStanfordNlpIoRuntimeIOException_initWithNSString_withNSException_(@"Bad character encoding", e);
  }
  jlong elapsedTime = JavaLangSystem_nanoTime() - startTime;
  jdouble linesPerSec = (jdouble) nLines / (elapsedTime / 1e9);
  (void) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printfWithNSString:@"Done! Tokenized %d lines (%d tokens) at %.2f lines/sec%n" withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(nLines), JavaLangInteger_valueOfWithInt_(nTokens), JavaLangDouble_valueOfWithDouble_(linesPerSec) } count:3 type:NSObject_class_()]];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpInternationalSpanishProcessSpanishTokenizer)

@implementation EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_SpanishTokenizerFactory

+ (id<EduStanfordNlpProcessTokenizerFactory>)newCoreLabelTokenizerFactory {
  return EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_SpanishTokenizerFactory_newCoreLabelTokenizerFactory();
}

+ (EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_SpanishTokenizerFactory *)newSpanishTokenizerFactoryWithEduStanfordNlpProcessLexedTokenFactory:(id<EduStanfordNlpProcessLexedTokenFactory>)factory
                                                                                                                                               withNSString:(NSString *)options {
  return EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_SpanishTokenizerFactory_newSpanishTokenizerFactoryWithEduStanfordNlpProcessLexedTokenFactory_withNSString_(factory, options);
}

- (instancetype)initWithEduStanfordNlpProcessLexedTokenFactory:(id<EduStanfordNlpProcessLexedTokenFactory>)factory {
  EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_SpanishTokenizerFactory_initWithEduStanfordNlpProcessLexedTokenFactory_(self, factory);
  return self;
}

- (instancetype)initWithEduStanfordNlpProcessLexedTokenFactory:(id<EduStanfordNlpProcessLexedTokenFactory>)factory
                                                  withNSString:(NSString *)options {
  EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_SpanishTokenizerFactory_initWithEduStanfordNlpProcessLexedTokenFactory_withNSString_(self, factory, options);
  return self;
}

- (id<JavaUtilIterator>)getIteratorWithJavaIoReader:(JavaIoReader *)r {
  return [self getTokenizerWithJavaIoReader:r];
}

- (id<EduStanfordNlpProcessTokenizer>)getTokenizerWithJavaIoReader:(JavaIoReader *)r {
  return new_EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_initWithJavaIoReader_withEduStanfordNlpProcessLexedTokenFactory_withJavaUtilProperties_withBoolean_withBoolean_withBoolean_(r, factory_, lexerProperties_, splitCompoundOption_, splitVerbOption_, splitContractionOption_);
}

- (void)setOptionsWithNSString:(NSString *)options {
  if (options == nil) return;
  IOSObjectArray *optionList = [options split:@","];
  {
    IOSObjectArray *a__ = optionList;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *option = *b__++;
      IOSObjectArray *fields = [((NSString *) nil_chk(option)) split:@"="];
      if (((IOSObjectArray *) nil_chk(fields))->size_ == 1) {
        switch (JreIndexOfStr(IOSObjectArray_Get(fields, 0), (id[]){ @"splitAll", @"splitCompounds", @"splitVerbs", @"splitContractions" }, 4)) {
          case 0:
          splitCompoundOption_ = true;
          splitVerbOption_ = true;
          splitContractionOption_ = true;
          break;
          case 1:
          splitCompoundOption_ = true;
          break;
          case 2:
          splitVerbOption_ = true;
          break;
          case 3:
          splitContractionOption_ = true;
          break;
          default:
          (void) [((JavaUtilProperties *) nil_chk(lexerProperties_)) setPropertyWithNSString:option withNSString:@"true"];
          break;
        }
      }
      else if (fields->size_ == 2) {
        switch (JreIndexOfStr(IOSObjectArray_Get(fields, 0), (id[]){ @"splitAll", @"splitCompounds", @"splitVerbs", @"splitContractions" }, 4)) {
          case 0:
          splitCompoundOption_ = [((JavaLangBoolean *) nil_chk(JavaLangBoolean_valueOfWithNSString_(IOSObjectArray_Get(fields, 1)))) booleanValue];
          splitVerbOption_ = [((JavaLangBoolean *) nil_chk(JavaLangBoolean_valueOfWithNSString_(IOSObjectArray_Get(fields, 1)))) booleanValue];
          splitContractionOption_ = [((JavaLangBoolean *) nil_chk(JavaLangBoolean_valueOfWithNSString_(IOSObjectArray_Get(fields, 1)))) booleanValue];
          break;
          case 1:
          splitCompoundOption_ = [((JavaLangBoolean *) nil_chk(JavaLangBoolean_valueOfWithNSString_(IOSObjectArray_Get(fields, 1)))) booleanValue];
          break;
          case 2:
          splitVerbOption_ = [((JavaLangBoolean *) nil_chk(JavaLangBoolean_valueOfWithNSString_(IOSObjectArray_Get(fields, 1)))) booleanValue];
          break;
          case 3:
          splitContractionOption_ = [((JavaLangBoolean *) nil_chk(JavaLangBoolean_valueOfWithNSString_(IOSObjectArray_Get(fields, 1)))) booleanValue];
          break;
          default:
          (void) [((JavaUtilProperties *) nil_chk(lexerProperties_)) setPropertyWithNSString:IOSObjectArray_Get(fields, 0) withNSString:IOSObjectArray_Get(fields, 1)];
          break;
        }
      }
      else {
        (void) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printfWithNSString:@"%s: Bad option %s%n" withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ [[self getClass] getName], option } count:2 type:NSObject_class_()]];
      }
    }
  }
}

- (id<EduStanfordNlpProcessTokenizer>)getTokenizerWithJavaIoReader:(JavaIoReader *)r
                                                      withNSString:(NSString *)extraOptions {
  [self setOptionsWithNSString:extraOptions];
  return [self getTokenizerWithJavaIoReader:r];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LEduStanfordNlpProcessTokenizerFactory;", 0x9, -1, -1, -1, 0, -1, -1 },
    { NULL, "LEduStanfordNlpInternationalSpanishProcessSpanishTokenizer_SpanishTokenizerFactory;", 0x9, 1, 2, -1, 3, -1, -1 },
    { NULL, NULL, 0x2, -1, 4, -1, 5, -1, -1 },
    { NULL, NULL, 0x2, -1, 2, -1, 6, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, 7, 8, -1, 9, -1, -1 },
    { NULL, "LEduStanfordNlpProcessTokenizer;", 0x1, 10, 8, -1, 11, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpProcessTokenizer;", 0x1, 10, 14, -1, 15, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(newCoreLabelTokenizerFactory);
  methods[1].selector = @selector(newSpanishTokenizerFactoryWithEduStanfordNlpProcessLexedTokenFactory:withNSString:);
  methods[2].selector = @selector(initWithEduStanfordNlpProcessLexedTokenFactory:);
  methods[3].selector = @selector(initWithEduStanfordNlpProcessLexedTokenFactory:withNSString:);
  methods[4].selector = @selector(getIteratorWithJavaIoReader:);
  methods[5].selector = @selector(getTokenizerWithJavaIoReader:);
  methods[6].selector = @selector(setOptionsWithNSString:);
  methods[7].selector = @selector(getTokenizerWithJavaIoReader:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_SpanishTokenizerFactory_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "factory_", "LEduStanfordNlpProcessLexedTokenFactory;", .constantValue.asLong = 0, 0x14, -1, -1, 16, -1 },
    { "lexerProperties_", "LJavaUtilProperties;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "splitCompoundOption_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "splitVerbOption_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "splitContractionOption_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "()Ledu/stanford/nlp/process/TokenizerFactory<Ledu/stanford/nlp/ling/CoreLabel;>;", "newSpanishTokenizerFactory", "LEduStanfordNlpProcessLexedTokenFactory;LNSString;", "<T::Ledu/stanford/nlp/ling/HasWord;>(Ledu/stanford/nlp/process/LexedTokenFactory<TT;>;Ljava/lang/String;)Ledu/stanford/nlp/international/spanish/process/SpanishTokenizer$SpanishTokenizerFactory<TT;>;", "LEduStanfordNlpProcessLexedTokenFactory;", "(Ledu/stanford/nlp/process/LexedTokenFactory<TT;>;)V", "(Ledu/stanford/nlp/process/LexedTokenFactory<TT;>;Ljava/lang/String;)V", "getIterator", "LJavaIoReader;", "(Ljava/io/Reader;)Ljava/util/Iterator<TT;>;", "getTokenizer", "(Ljava/io/Reader;)Ledu/stanford/nlp/process/Tokenizer<TT;>;", "setOptions", "LNSString;", "LJavaIoReader;LNSString;", "(Ljava/io/Reader;Ljava/lang/String;)Ledu/stanford/nlp/process/Tokenizer<TT;>;", "Ledu/stanford/nlp/process/LexedTokenFactory<TT;>;", "LEduStanfordNlpInternationalSpanishProcessSpanishTokenizer;", "<T::Ledu/stanford/nlp/ling/HasWord;>Ljava/lang/Object;Ledu/stanford/nlp/process/TokenizerFactory<TT;>;Ljava/io/Serializable;" };
  static const J2ObjcClassInfo _EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_SpanishTokenizerFactory = { "SpanishTokenizerFactory", "edu.stanford.nlp.international.spanish.process", ptrTable, methods, fields, 7, 0x9, 8, 6, 17, -1, -1, 18, -1 };
  return &_EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_SpanishTokenizerFactory;
}

@end

id<EduStanfordNlpProcessTokenizerFactory> EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_SpanishTokenizerFactory_newCoreLabelTokenizerFactory() {
  EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_SpanishTokenizerFactory_initialize();
  return new_EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_SpanishTokenizerFactory_initWithEduStanfordNlpProcessLexedTokenFactory_(new_EduStanfordNlpProcessCoreLabelTokenFactory_init());
}

EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_SpanishTokenizerFactory *EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_SpanishTokenizerFactory_newSpanishTokenizerFactoryWithEduStanfordNlpProcessLexedTokenFactory_withNSString_(id<EduStanfordNlpProcessLexedTokenFactory> factory, NSString *options) {
  EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_SpanishTokenizerFactory_initialize();
  return new_EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_SpanishTokenizerFactory_initWithEduStanfordNlpProcessLexedTokenFactory_withNSString_(factory, options);
}

void EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_SpanishTokenizerFactory_initWithEduStanfordNlpProcessLexedTokenFactory_(EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_SpanishTokenizerFactory *self, id<EduStanfordNlpProcessLexedTokenFactory> factory) {
  NSObject_init(self);
  self->lexerProperties_ = new_JavaUtilProperties_init();
  self->splitCompoundOption_ = false;
  self->splitVerbOption_ = false;
  self->splitContractionOption_ = false;
  self->factory_ = factory;
}

EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_SpanishTokenizerFactory *new_EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_SpanishTokenizerFactory_initWithEduStanfordNlpProcessLexedTokenFactory_(id<EduStanfordNlpProcessLexedTokenFactory> factory) {
  J2OBJC_NEW_IMPL(EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_SpanishTokenizerFactory, initWithEduStanfordNlpProcessLexedTokenFactory_, factory)
}

EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_SpanishTokenizerFactory *create_EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_SpanishTokenizerFactory_initWithEduStanfordNlpProcessLexedTokenFactory_(id<EduStanfordNlpProcessLexedTokenFactory> factory) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_SpanishTokenizerFactory, initWithEduStanfordNlpProcessLexedTokenFactory_, factory)
}

void EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_SpanishTokenizerFactory_initWithEduStanfordNlpProcessLexedTokenFactory_withNSString_(EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_SpanishTokenizerFactory *self, id<EduStanfordNlpProcessLexedTokenFactory> factory, NSString *options) {
  NSObject_init(self);
  self->lexerProperties_ = new_JavaUtilProperties_init();
  self->splitCompoundOption_ = false;
  self->splitVerbOption_ = false;
  self->splitContractionOption_ = false;
  self->factory_ = factory;
  [self setOptionsWithNSString:options];
}

EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_SpanishTokenizerFactory *new_EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_SpanishTokenizerFactory_initWithEduStanfordNlpProcessLexedTokenFactory_withNSString_(id<EduStanfordNlpProcessLexedTokenFactory> factory, NSString *options) {
  J2OBJC_NEW_IMPL(EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_SpanishTokenizerFactory, initWithEduStanfordNlpProcessLexedTokenFactory_withNSString_, factory, options)
}

EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_SpanishTokenizerFactory *create_EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_SpanishTokenizerFactory_initWithEduStanfordNlpProcessLexedTokenFactory_withNSString_(id<EduStanfordNlpProcessLexedTokenFactory> factory, NSString *options) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_SpanishTokenizerFactory, initWithEduStanfordNlpProcessLexedTokenFactory_withNSString_, factory, options)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_SpanishTokenizerFactory)
