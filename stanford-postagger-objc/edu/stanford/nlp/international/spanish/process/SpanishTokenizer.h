//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/international/spanish/process/SpanishTokenizer.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_EduStanfordNlpInternationalSpanishProcessSpanishTokenizer")
#ifdef RESTRICT_EduStanfordNlpInternationalSpanishProcessSpanishTokenizer
#define INCLUDE_ALL_EduStanfordNlpInternationalSpanishProcessSpanishTokenizer 0
#else
#define INCLUDE_ALL_EduStanfordNlpInternationalSpanishProcessSpanishTokenizer 1
#endif
#undef RESTRICT_EduStanfordNlpInternationalSpanishProcessSpanishTokenizer

#if !defined (EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_) && (INCLUDE_ALL_EduStanfordNlpInternationalSpanishProcessSpanishTokenizer || defined(INCLUDE_EduStanfordNlpInternationalSpanishProcessSpanishTokenizer))
#define EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_

#define RESTRICT_EduStanfordNlpProcessAbstractTokenizer 1
#define INCLUDE_EduStanfordNlpProcessAbstractTokenizer 1
#include "edu/stanford/nlp/process/AbstractTokenizer.h"

@class IOSObjectArray;
@class JavaIoReader;
@class JavaUtilProperties;
@protocol EduStanfordNlpLingHasWord;
@protocol EduStanfordNlpProcessLexedTokenFactory;
@protocol EduStanfordNlpProcessTokenizerFactory;

@interface EduStanfordNlpInternationalSpanishProcessSpanishTokenizer : EduStanfordNlpProcessAbstractTokenizer

#pragma mark Public

- (instancetype)initWithJavaIoReader:(JavaIoReader *)r
withEduStanfordNlpProcessLexedTokenFactory:(id<EduStanfordNlpProcessLexedTokenFactory>)tf
              withJavaUtilProperties:(JavaUtilProperties *)lexerProperties
                         withBoolean:(jboolean)splitCompounds
                         withBoolean:(jboolean)splitVerbs
                         withBoolean:(jboolean)splitContractions;

+ (id<EduStanfordNlpProcessTokenizerFactory>)ancoraFactory;

+ (id<EduStanfordNlpProcessTokenizerFactory>)coreLabelFactory;

+ (id<EduStanfordNlpProcessTokenizerFactory>)factory;

+ (id<EduStanfordNlpProcessTokenizerFactory>)factoryWithEduStanfordNlpProcessLexedTokenFactory:(id<EduStanfordNlpProcessLexedTokenFactory>)factory;

+ (id<EduStanfordNlpProcessTokenizerFactory>)factoryWithEduStanfordNlpProcessLexedTokenFactory:(id<EduStanfordNlpProcessLexedTokenFactory>)factory
                                                                                  withNSString:(NSString *)options;

+ (void)mainWithNSStringArray:(IOSObjectArray *)args;

- (id<EduStanfordNlpLingHasWord>)next;

- (id<EduStanfordNlpLingHasWord>)peek;

#pragma mark Protected

- (id<EduStanfordNlpLingHasWord>)getNext;

@end

J2OBJC_STATIC_INIT(EduStanfordNlpInternationalSpanishProcessSpanishTokenizer)

inline NSString *EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_get_ANCORA_OPTIONS();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_ANCORA_OPTIONS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpInternationalSpanishProcessSpanishTokenizer, ANCORA_OPTIONS, NSString *)

FOUNDATION_EXPORT void EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_initWithJavaIoReader_withEduStanfordNlpProcessLexedTokenFactory_withJavaUtilProperties_withBoolean_withBoolean_withBoolean_(EduStanfordNlpInternationalSpanishProcessSpanishTokenizer *self, JavaIoReader *r, id<EduStanfordNlpProcessLexedTokenFactory> tf, JavaUtilProperties *lexerProperties, jboolean splitCompounds, jboolean splitVerbs, jboolean splitContractions);

FOUNDATION_EXPORT EduStanfordNlpInternationalSpanishProcessSpanishTokenizer *new_EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_initWithJavaIoReader_withEduStanfordNlpProcessLexedTokenFactory_withJavaUtilProperties_withBoolean_withBoolean_withBoolean_(JavaIoReader *r, id<EduStanfordNlpProcessLexedTokenFactory> tf, JavaUtilProperties *lexerProperties, jboolean splitCompounds, jboolean splitVerbs, jboolean splitContractions) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EduStanfordNlpInternationalSpanishProcessSpanishTokenizer *create_EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_initWithJavaIoReader_withEduStanfordNlpProcessLexedTokenFactory_withJavaUtilProperties_withBoolean_withBoolean_withBoolean_(JavaIoReader *r, id<EduStanfordNlpProcessLexedTokenFactory> tf, JavaUtilProperties *lexerProperties, jboolean splitCompounds, jboolean splitVerbs, jboolean splitContractions);

FOUNDATION_EXPORT id<EduStanfordNlpProcessTokenizerFactory> EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_factoryWithEduStanfordNlpProcessLexedTokenFactory_withNSString_(id<EduStanfordNlpProcessLexedTokenFactory> factory, NSString *options);

FOUNDATION_EXPORT id<EduStanfordNlpProcessTokenizerFactory> EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_factoryWithEduStanfordNlpProcessLexedTokenFactory_(id<EduStanfordNlpProcessLexedTokenFactory> factory);

FOUNDATION_EXPORT id<EduStanfordNlpProcessTokenizerFactory> EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_ancoraFactory();

FOUNDATION_EXPORT id<EduStanfordNlpProcessTokenizerFactory> EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_coreLabelFactory();

FOUNDATION_EXPORT id<EduStanfordNlpProcessTokenizerFactory> EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_factory();

FOUNDATION_EXPORT void EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_mainWithNSStringArray_(IOSObjectArray *args);

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpInternationalSpanishProcessSpanishTokenizer)

#endif

#if !defined (EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_SpanishTokenizerFactory_) && (INCLUDE_ALL_EduStanfordNlpInternationalSpanishProcessSpanishTokenizer || defined(INCLUDE_EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_SpanishTokenizerFactory))
#define EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_SpanishTokenizerFactory_

#define RESTRICT_EduStanfordNlpProcessTokenizerFactory 1
#define INCLUDE_EduStanfordNlpProcessTokenizerFactory 1
#include "edu/stanford/nlp/process/TokenizerFactory.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class JavaIoReader;
@class JavaUtilProperties;
@protocol EduStanfordNlpProcessLexedTokenFactory;
@protocol EduStanfordNlpProcessTokenizer;
@protocol JavaUtilIterator;

@interface EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_SpanishTokenizerFactory : NSObject < EduStanfordNlpProcessTokenizerFactory, JavaIoSerializable > {
 @public
  id<EduStanfordNlpProcessLexedTokenFactory> factory_;
  JavaUtilProperties *lexerProperties_;
  jboolean splitCompoundOption_;
  jboolean splitVerbOption_;
  jboolean splitContractionOption_;
}

#pragma mark Public

- (id<JavaUtilIterator>)getIteratorWithJavaIoReader:(JavaIoReader *)r;

- (id<EduStanfordNlpProcessTokenizer>)getTokenizerWithJavaIoReader:(JavaIoReader *)r;

- (id<EduStanfordNlpProcessTokenizer>)getTokenizerWithJavaIoReader:(JavaIoReader *)r
                                                      withNSString:(NSString *)extraOptions;

+ (id<EduStanfordNlpProcessTokenizerFactory>)newCoreLabelTokenizerFactory OBJC_METHOD_FAMILY_NONE;

+ (EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_SpanishTokenizerFactory *)newSpanishTokenizerFactoryWithEduStanfordNlpProcessLexedTokenFactory:(id<EduStanfordNlpProcessLexedTokenFactory>)factory
                                                                                                                                               withNSString:(NSString *)options OBJC_METHOD_FAMILY_NONE;

- (void)setOptionsWithNSString:(NSString *)options;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_SpanishTokenizerFactory)

J2OBJC_FIELD_SETTER(EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_SpanishTokenizerFactory, factory_, id<EduStanfordNlpProcessLexedTokenFactory>)
J2OBJC_FIELD_SETTER(EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_SpanishTokenizerFactory, lexerProperties_, JavaUtilProperties *)

FOUNDATION_EXPORT id<EduStanfordNlpProcessTokenizerFactory> EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_SpanishTokenizerFactory_newCoreLabelTokenizerFactory();

FOUNDATION_EXPORT EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_SpanishTokenizerFactory *EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_SpanishTokenizerFactory_newSpanishTokenizerFactoryWithEduStanfordNlpProcessLexedTokenFactory_withNSString_(id<EduStanfordNlpProcessLexedTokenFactory> factory, NSString *options);

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpInternationalSpanishProcessSpanishTokenizer_SpanishTokenizerFactory)

#endif

#pragma pop_macro("INCLUDE_ALL_EduStanfordNlpInternationalSpanishProcessSpanishTokenizer")
