//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/international/arabic/process/ArabicTokenizer.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_EduStanfordNlpInternationalArabicProcessArabicTokenizer")
#ifdef RESTRICT_EduStanfordNlpInternationalArabicProcessArabicTokenizer
#define INCLUDE_ALL_EduStanfordNlpInternationalArabicProcessArabicTokenizer 0
#else
#define INCLUDE_ALL_EduStanfordNlpInternationalArabicProcessArabicTokenizer 1
#endif
#undef RESTRICT_EduStanfordNlpInternationalArabicProcessArabicTokenizer

#if !defined (EduStanfordNlpInternationalArabicProcessArabicTokenizer_) && (INCLUDE_ALL_EduStanfordNlpInternationalArabicProcessArabicTokenizer || defined(INCLUDE_EduStanfordNlpInternationalArabicProcessArabicTokenizer))
#define EduStanfordNlpInternationalArabicProcessArabicTokenizer_

#define RESTRICT_EduStanfordNlpProcessAbstractTokenizer 1
#define INCLUDE_EduStanfordNlpProcessAbstractTokenizer 1
#include "edu/stanford/nlp/process/AbstractTokenizer.h"

@class IOSObjectArray;
@class JavaIoReader;
@class JavaUtilProperties;
@protocol EduStanfordNlpLingHasWord;
@protocol EduStanfordNlpProcessLexedTokenFactory;
@protocol EduStanfordNlpProcessTokenizerFactory;

@interface EduStanfordNlpInternationalArabicProcessArabicTokenizer : EduStanfordNlpProcessAbstractTokenizer

#pragma mark Public

- (instancetype)initWithJavaIoReader:(JavaIoReader *)r
withEduStanfordNlpProcessLexedTokenFactory:(id<EduStanfordNlpProcessLexedTokenFactory>)tf
              withJavaUtilProperties:(JavaUtilProperties *)lexerProperties;

+ (id<EduStanfordNlpProcessTokenizerFactory>)atbFactory;

+ (id<EduStanfordNlpProcessTokenizerFactory>)factory;

+ (void)mainWithNSStringArray:(IOSObjectArray *)args;

+ (EduStanfordNlpInternationalArabicProcessArabicTokenizer *)newArabicTokenizerWithJavaIoReader:(JavaIoReader *)r
                                                                         withJavaUtilProperties:(JavaUtilProperties *)lexerProperties OBJC_METHOD_FAMILY_NONE;

- (id<EduStanfordNlpLingHasWord>)next;

- (id<EduStanfordNlpLingHasWord>)peek;

#pragma mark Protected

- (id<EduStanfordNlpLingHasWord>)getNext;

@end

J2OBJC_STATIC_INIT(EduStanfordNlpInternationalArabicProcessArabicTokenizer)

FOUNDATION_EXPORT EduStanfordNlpInternationalArabicProcessArabicTokenizer *EduStanfordNlpInternationalArabicProcessArabicTokenizer_newArabicTokenizerWithJavaIoReader_withJavaUtilProperties_(JavaIoReader *r, JavaUtilProperties *lexerProperties);

FOUNDATION_EXPORT void EduStanfordNlpInternationalArabicProcessArabicTokenizer_initWithJavaIoReader_withEduStanfordNlpProcessLexedTokenFactory_withJavaUtilProperties_(EduStanfordNlpInternationalArabicProcessArabicTokenizer *self, JavaIoReader *r, id<EduStanfordNlpProcessLexedTokenFactory> tf, JavaUtilProperties *lexerProperties);

FOUNDATION_EXPORT EduStanfordNlpInternationalArabicProcessArabicTokenizer *new_EduStanfordNlpInternationalArabicProcessArabicTokenizer_initWithJavaIoReader_withEduStanfordNlpProcessLexedTokenFactory_withJavaUtilProperties_(JavaIoReader *r, id<EduStanfordNlpProcessLexedTokenFactory> tf, JavaUtilProperties *lexerProperties) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EduStanfordNlpInternationalArabicProcessArabicTokenizer *create_EduStanfordNlpInternationalArabicProcessArabicTokenizer_initWithJavaIoReader_withEduStanfordNlpProcessLexedTokenFactory_withJavaUtilProperties_(JavaIoReader *r, id<EduStanfordNlpProcessLexedTokenFactory> tf, JavaUtilProperties *lexerProperties);

FOUNDATION_EXPORT id<EduStanfordNlpProcessTokenizerFactory> EduStanfordNlpInternationalArabicProcessArabicTokenizer_factory();

FOUNDATION_EXPORT id<EduStanfordNlpProcessTokenizerFactory> EduStanfordNlpInternationalArabicProcessArabicTokenizer_atbFactory();

FOUNDATION_EXPORT void EduStanfordNlpInternationalArabicProcessArabicTokenizer_mainWithNSStringArray_(IOSObjectArray *args);

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpInternationalArabicProcessArabicTokenizer)

#endif

#if !defined (EduStanfordNlpInternationalArabicProcessArabicTokenizer_ArabicTokenizerFactory_) && (INCLUDE_ALL_EduStanfordNlpInternationalArabicProcessArabicTokenizer || defined(INCLUDE_EduStanfordNlpInternationalArabicProcessArabicTokenizer_ArabicTokenizerFactory))
#define EduStanfordNlpInternationalArabicProcessArabicTokenizer_ArabicTokenizerFactory_

#define RESTRICT_EduStanfordNlpProcessTokenizerFactory 1
#define INCLUDE_EduStanfordNlpProcessTokenizerFactory 1
#include "edu/stanford/nlp/process/TokenizerFactory.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class JavaIoReader;
@class JavaUtilProperties;
@protocol EduStanfordNlpProcessLexedTokenFactory;
@protocol EduStanfordNlpProcessTokenizer;
@protocol JavaUtilIterator;

@interface EduStanfordNlpInternationalArabicProcessArabicTokenizer_ArabicTokenizerFactory : NSObject < EduStanfordNlpProcessTokenizerFactory, JavaIoSerializable > {
 @public
  id<EduStanfordNlpProcessLexedTokenFactory> factory_;
  JavaUtilProperties *lexerProperties_;
}

#pragma mark Public

- (id<JavaUtilIterator>)getIteratorWithJavaIoReader:(JavaIoReader *)r;

- (id<EduStanfordNlpProcessTokenizer>)getTokenizerWithJavaIoReader:(JavaIoReader *)r;

- (id<EduStanfordNlpProcessTokenizer>)getTokenizerWithJavaIoReader:(JavaIoReader *)r
                                                      withNSString:(NSString *)extraOptions;

+ (id<EduStanfordNlpProcessTokenizerFactory>)newTokenizerFactory OBJC_METHOD_FAMILY_NONE;

- (void)setOptionsWithNSString:(NSString *)options;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpInternationalArabicProcessArabicTokenizer_ArabicTokenizerFactory)

J2OBJC_FIELD_SETTER(EduStanfordNlpInternationalArabicProcessArabicTokenizer_ArabicTokenizerFactory, factory_, id<EduStanfordNlpProcessLexedTokenFactory>)
J2OBJC_FIELD_SETTER(EduStanfordNlpInternationalArabicProcessArabicTokenizer_ArabicTokenizerFactory, lexerProperties_, JavaUtilProperties *)

FOUNDATION_EXPORT id<EduStanfordNlpProcessTokenizerFactory> EduStanfordNlpInternationalArabicProcessArabicTokenizer_ArabicTokenizerFactory_newTokenizerFactory();

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpInternationalArabicProcessArabicTokenizer_ArabicTokenizerFactory)

#endif

#pragma pop_macro("INCLUDE_ALL_EduStanfordNlpInternationalArabicProcessArabicTokenizer")
