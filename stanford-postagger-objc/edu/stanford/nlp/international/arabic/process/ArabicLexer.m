//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/international/arabic/process/ArabicLexer.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/international/arabic/process/ArabicLexer.h"
#include "edu/stanford/nlp/ling/CoreAnnotations.h"
#include "edu/stanford/nlp/ling/CoreLabel.h"
#include "edu/stanford/nlp/process/LexedTokenFactory.h"
#include "edu/stanford/nlp/util/Generics.h"
#include "edu/stanford/nlp/util/PropertiesUtils.h"
#include "java/io/InputStream.h"
#include "java/io/InputStreamReader.h"
#include "java/io/PrintStream.h"
#include "java/io/Reader.h"
#include "java/lang/ArrayIndexOutOfBoundsException.h"
#include "java/lang/Error.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/nio/charset/Charset.h"
#include "java/util/Map.h"
#include "java/util/Properties.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"

@interface EduStanfordNlpInternationalArabicProcessArabicLexer () {
 @public
  JavaIoReader *zzReader_;
  jint zzState_;
  jint zzLexicalState_;
  IOSCharArray *zzBuffer_;
  jint zzMarkedPos_;
  jint zzCurrentPos_;
  jint zzStartRead_;
  jint zzEndRead_;
  jint yyline_;
  jint yychar_;
  jint yycolumn_;
  jboolean zzAtBOL_;
  jboolean zzAtEOF_;
  jboolean zzEOFDone_;
  id<EduStanfordNlpProcessLexedTokenFactory> tokenFactory_;
  jboolean invertible_;
  jboolean normArDigits_;
  jboolean normArPunc_;
  jboolean tokenizeNLs_;
  jboolean useUTF8Ellipsis_;
  jboolean normAlif_;
  jboolean normYa_;
  jboolean removeDiacritics_;
  jboolean removeTatweel_;
  jboolean removeQuranChars_;
  jboolean removeProMarker_;
  jboolean removeSegMarker_;
  jboolean removeMorphMarker_;
  jboolean removeLengthening_;
  JavaUtilRegexPattern *segmentationMarker_;
  jboolean atbEscaping_;
  id<JavaUtilMap> normMap_;
}

+ (IOSIntArray *)zzUnpackAction;

+ (jint)zzUnpackActionWithNSString:(NSString *)packed
                           withInt:(jint)offset
                      withIntArray:(IOSIntArray *)result;

+ (IOSIntArray *)zzUnpackRowMap;

+ (jint)zzUnpackRowMapWithNSString:(NSString *)packed
                           withInt:(jint)offset
                      withIntArray:(IOSIntArray *)result;

+ (IOSIntArray *)zzUnpackTrans;

+ (jint)zzUnpackTransWithNSString:(NSString *)packed
                          withInt:(jint)offset
                     withIntArray:(IOSIntArray *)result;

+ (IOSIntArray *)zzUnpackAttribute;

+ (jint)zzUnpackAttributeWithNSString:(NSString *)packed
                              withInt:(jint)offset
                         withIntArray:(IOSIntArray *)result;

- (void)setupNormalizationMap;

- (NSString *)normalizeTokenWithNSString:(NSString *)text
                             withBoolean:(jboolean)isWord;

- (jboolean)isLengtheningWithNSString:(NSString *)text
                              withInt:(jint)pos;

- (id)getNextWithNSString:(NSString *)txt
             withNSString:(NSString *)originalText;

- (id)getNextWithBoolean:(jboolean)isWord;

- (id)getEllipsis;

+ (IOSCharArray *)zzUnpackCMapWithNSString:(NSString *)packed;

- (jboolean)zzRefill;

- (void)zzScanErrorWithInt:(jint)errorCode;

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpInternationalArabicProcessArabicLexer, zzReader_, JavaIoReader *)
J2OBJC_FIELD_SETTER(EduStanfordNlpInternationalArabicProcessArabicLexer, zzBuffer_, IOSCharArray *)
J2OBJC_FIELD_SETTER(EduStanfordNlpInternationalArabicProcessArabicLexer, tokenFactory_, id<EduStanfordNlpProcessLexedTokenFactory>)
J2OBJC_FIELD_SETTER(EduStanfordNlpInternationalArabicProcessArabicLexer, segmentationMarker_, JavaUtilRegexPattern *)
J2OBJC_FIELD_SETTER(EduStanfordNlpInternationalArabicProcessArabicLexer, normMap_, id<JavaUtilMap>)

inline jint EduStanfordNlpInternationalArabicProcessArabicLexer_get_ZZ_BUFFERSIZE();
#define EduStanfordNlpInternationalArabicProcessArabicLexer_ZZ_BUFFERSIZE 16384
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpInternationalArabicProcessArabicLexer, ZZ_BUFFERSIZE, jint)

inline IOSIntArray *EduStanfordNlpInternationalArabicProcessArabicLexer_get_ZZ_LEXSTATE();
static IOSIntArray *EduStanfordNlpInternationalArabicProcessArabicLexer_ZZ_LEXSTATE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpInternationalArabicProcessArabicLexer, ZZ_LEXSTATE, IOSIntArray *)

inline NSString *EduStanfordNlpInternationalArabicProcessArabicLexer_get_ZZ_CMAP_PACKED();
static NSString *EduStanfordNlpInternationalArabicProcessArabicLexer_ZZ_CMAP_PACKED = @"\t\x00\x01\x1d\x01\x02\x01\x03\x01\x04\x01\x01\x12\x00\x01\x1d\x01\x1f\x01\x1e\x01\x07\x01$\x02\x07\x01$\x02\x1e\x01\x07\x01\x13\x01 \x01\x0d\x01\x06\x01\x1c\n%\x01\x1b\x01$\x01\x1e\x01$\x01\x1e\x01\x1f\x01?\x01*\x01""C\x01-\x01;\x01""5\x01*\x01""9\x01&\x03*\x01""A\x01""1\x01""3\x01/\x01(\x01*\x01""7\x01+\x01'\x01=\x01*\x01)\x03*\x01\x0e\x01\n\x01\x12\x01$\x01\x0c\x01$\x01\"\x01""B\x01,\x01:\x01""4\x01\"\x01""8\x01\x17\x03\"\x01@\x01""0\x01""2\x01.\x01\x19\x01\"\x01""6\x01#\x01\x18\x01<\x01\"\x01!\x03\"\x01\x1f\x01\x1e\x01\x1f\x01\x07\x06\x00\x01\x03\x1a\x00\x01>\t\x07\x01\x15\x02\x07\x01\x15\x07\x07\x01\x15\x04\x07\x01\x15\x05\x07\x17\x14\x01\x00\x1f\x14\x01\x00\xc2\x87\x14\x01\x1a\u00b7\x14\x19\x14r\x14\x04\x14\x0c\x14\x0e\x14\x05\x14\x07\x14\x01\x14\x01\x14\x01\x14\xc2\x81\x14\x05\x14\x01\x14\x02\x14\x02\x14\x04\x14\x06\x00\x02\x14\x01\x14\x01\x00\x03\x14\x01\x00\x01\x14\x01\x00\x14\x14\x01\x00,\x14\x01\x14&\x14\x01\x14\x05\x14\x04\x14\xc2\x82\x14\x01\x00\x05\x14\x02\x00""E\x14\x01\x14&\x14\n\x14\x10\x14\x16\x14\x02\x14\t\x00&\x14\x02\x00\x01\x14\x06\x14\x01\x00'\x14\t\x00-\x14\x01\x00\x01\x14\x01\x00\x02\x14\x01\x00\x02\x14\x01\x00\x01\x14\x08\x00\x1b\x14\x05\x00\x03\x14\x0d\x00\x0c\x07\x02\t\x0d\x0b\x05\x07\x01\x14#\x16\x01\x11\x01\x16\x01\x0f\x04\x16\x04\x0b\x01\x10\x0f\x0b\x01\x00\n\x08\x01\x07\x02\t\x01\x07\x02\x16\x01\x0b""c\x16\x01\x07\x01\x16\x0f\x0b\x02\x16\x07\x0b\x02\x16\n\x08\x03\x16\x02\x0b\x01\x16\x0f\x00\x01\x14\x01\x14\x01\x14\x1e\x14\x1d\x14""3\x14&\x14\x0b\x14\x01\x14\x0e\x00\n\x08!\x14\t\x14\x02\x14\x04\x00\x01\x14\x05\x00\x16\x14\x04\x00\x01\x14\t\x00\x01\x14\x03\x00\x01\x14\x17\x00\x19\x14G\x00\x01\x14\x01\x00\x0b\x14S\x00\x04\x14""6\x14\x02\x00\x01\x14\x01\x14\x11\x14\x01\x00\x01\x14\x05\x14\x02\x00\n\x14\x02\x14\x02\x00\n\x08\x01\x00\x07\x14\x01\x00\x07\x14\x01\x00\x03\x14\x01\x00\x08\x14\x02\x00\x02\x14\x02\x00\x16\x14\x01\x00\x07\x14\x01\x00\x01\x14\x03\x00\x04\x14\x02\x00\x01\x14\x01\x14\x07\x14\x02\x00\x02\x14\x02\x00\x03\x14\x01\x14\x08\x00\x01\x14\x04\x00\x02\x14\x01\x00\x03\x14\x02\x14\x02\x00\n\x08\x02\x14\x0f\x00\x03\x14\x01\x00\x06\x14\x04\x00\x02\x14\x02\x00\x16\x14\x01\x00\x07\x14\x01\x00\x02\x14\x01\x00\x02\x14\x01\x00\x02\x14\x02\x00\x01\x14\x01\x00\x12\x14\t\x00\x04\x14\x01\x00\x01\x14\x07\x00\n\x08\x02\x00\x03\x14\x0c\x00\x03\x14\x01\x00\t\x14\x01\x00\x03\x14\x01\x00\x16\x14\x01\x00\x07\x14\x01\x00\x02\x14\x01\x00\x05\x14\x02\x00\x01\x14\x01\x14\x12\x14\x01\x14\x0f\x00\x02\x14\x04\x00\n\x08\x15\x00\x08\x14\x02\x00\x02\x14\x02\x00\x16\x14\x01\x00\x07\x14\x01\x00\x02\x14\x01\x00\x05\x14\x03\x00\x01\x14\x1e\x00\x02\x14\x01\x00\x03\x14\x04\x00\n\x08\x01\x00\x01\x14\x10\x00\x01\x14\x01\x14\x01\x00\x06\x14\x03\x00\x03\x14\x01\x00\x04\x14\x03\x00\x02\x14\x01\x00\x01\x14\x01\x00\x02\x14\x03\x00\x02\x14\x03\x00\x03\x14\x03\x00\x0c\x14\x04\x00\x05\x14\x03\x00\x03\x14\x01\x00\x04\x14\x02\x00\x01\x14\x15\x00\n\x08\x11\x00\x03\x14\x01\x00\x08\x14\x01\x00\x03\x14\x01\x00\x17\x14\x01\x00\n\x14\x01\x00\x05\x14\x03\x00\x01\x14\x19\x14\x01\x00\x02\x14\x06\x00\x02\x14\x04\x00\n\x08\x15\x00\x08\x14\x01\x00\x03\x14\x01\x00\x17\x14\x01\x00\n\x14\x01\x00\x05\x14\x03\x00\x01\x14 \x00\x01\x14\x01\x00\x02\x14\x04\x00\n\x08\x01\x00\x02\x14\x12\x00\x08\x14\x01\x00\x03\x14\x01\x00)\x14\x02\x00\x01\x14\x07\x14\x01\x00\x03\x14\x05\x00\x01\x14\x11\x00\x02\x14\x04\x00\n\x08\n\x00\x06\x14\x05\x00\x12\x14\x03\x00\x18\x14\x01\x00\t\x14\x01\x00\x01\x14\x02\x00\x07\x14:\x00/\x14\x01\x14\x01\x14\x02\x14\x07\x14\x05\x00\x07\x14\x08\x14\x01\x00\n\x08'\x00\x02\x14\x01\x00\x01\x14\x02\x00\x02\x14\x01\x00\x01\x14\x02\x00\x01\x14\x06\x00\x04\x14\x01\x00\x07\x14\x01\x00\x03\x14\x01\x00\x01\x14\x01\x00\x01\x14\x02\x00\x02\x14\x01\x00\x04\x14\x01\x14\x02\x14\t\x14\x01\x14\x02\x00\x05\x14\x01\x00\x01\x14\x01\x00\x06\x14\x02\x00\n\x08\x02\x00\x04\x14 \x00\x01\x14\x1f\x00\n\x08\x16\x00\x08\x14\x01\x00$\x14\x1b\x00\x05\x14s\x00+\x14\x14\x00\x01\x14\n\x08\x06\x00\x06\x14\x04\x00\x04\x14\x03\x00\x01\x14\x03\x00\x02\x14\x07\x00\x03\x14\x04\x00\x0d\x14\x0c\x00\x01\x14\x01\x00\n\x08\x06\x00&\x14\x01\x00\x01\x14\x05\x00\x01\x14\x02\x00+\x14\x01\x00\u014d\x14\x01\x00\x04\x14\x02\x00\x07\x14\x01\x00\x01\x14\x01\x00\x04\x14\x02\x00)\x14\x01\x00\x04\x14\x02\x00!\x14\x01\x00\x04\x14\x02\x00\x07\x14\x01\x00\x01\x14\x01\x00\x04\x14\x02\x00\x0f\x14\x01\x00""9\x14\x01\x00\x04\x14\x02\x00""C\x14%\x00\x10\x14\x10\x00U\x14\x0c\x00\u026c\x14\x02\x00\x11\x14\x01\x00\x1a\x14\x05\x00K\x14\x15\x00\x0d\x14\x01\x00\x04\x14\x0e\x00\x12\x14\x0e\x00\x12\x14\x0e\x00\x0d\x14\x01\x00\x03\x14\x0f\x00""4\x14#\x00\x01\x14\x04\x00\x01\x14\x03\x00\n\x08&\x00\n\x08\x06\x00X\x14\x08\x00)\x14\x01\x00\x01\x14\x05\x00""F\x14\n\x00\x1d\x14)\x00\n\x08\x1e\x14\x02\x00\x05\x14\x0b\x00,\x14\x15\x00\x07\x14\x08\x00\n\x08&\x00\x17\x14\t\x00""5\x14+\x00\n\x08\x06\x00\n\x08\x0d\x00\x01\x14]\x00/\x14\x11\x00\x07\x14\x04\x00\n\x08)\x00\x1e\x14\x0d\x00\x02\x14\n\x08,\x14\x1a\x00$\x14\x1c\x00\n\x08\x03\x00\x03\x14\n\x08$\x14k\x00\x04\x14\x01\x00\x04\x14\x03\x00\x02\x14\t\x00\u00c0\x14@\x00\u0116\x14\x02\x00\x06\x14\x02\x00&\x14\x02\x00\x06\x14\x02\x00\x08\x14\x01\x00\x01\x14\x01\x00\x01\x14\x01\x00\x01\x14\x01\x00\x1f\x14\x02\x00""5\x14\x01\x00\x07\x14\x01\x00\x01\x14\x03\x00\x03\x14\x01\x00\x07\x14\x03\x00\x04\x14\x02\x00\x06\x14\x04\x00\x0d\x14\x05\x00\x03\x14\x01\x00\x07\x14\x03\x00\x0b\x05\x05\x00\x18\x07\x01\x03\x01\x03\x05\x00\x01\x05/\x07\x12\x00\x01\x14\x0d\x00\x01\x14\x10\x00\x0d\x14\x03\x00\x16\x07L\x00\x01\x14\x04\x00\x01\x14\x02\x00\n\x14\x01\x00\x01\x14\x03\x00\x05\x14\x06\x00\x01\x14\x01\x00\x01\x14\x01\x00\x01\x14\x01\x00\x04\x14\x01\x00\x0b\x14\x02\x00\x04\x14\x05\x00\x05\x14\x04\x00\x01\x14""4\x00\x02\x14\u0a7b\x00/\x14\x01\x00/\x14\x01\x00\xc2\x85\x14\x06\x00\x04\x14\x03\x00\x02\x14\x0c\x00&\x14\x01\x00\x01\x14\x05\x00\x01\x14\x02\x00""8\x14\x07\x00\x01\x14\x10\x00\x17\x14\t\x00\x07\x14\x01\x00\x07\x14\x01\x00\x07\x14\x01\x00\x07\x14\x01\x00\x07\x14\x01\x00\x07\x14\x01\x00\x07\x14\x01\x00\x07\x14O\x00\x01\x07\x01\x14\u01d0\x00\x01\x05\x04\x00\x02\x14*\x00\x05\x14\x05\x00\x02\x14\x04\x00V\x14\x06\x00\x03\x14\x01\x00Z\x14\x01\x00\x04\x14\x05\x00)\x14\x03\x00^\x14\x11\x00\x1b\x14""5\x00\x10\x14\u0200\x00\u19b6\x14J\x00\u51cd\x14""3\x00\u048d\x14""C\x00.\x14\x02\x00\u010d\x14\x03\x00\x10\x14\n\x08\x02\x14\x14\x00/\x14\x10\x00\x19\x14\x08\x00""F\x14""1\x00\t\x14\x02\x00g\x14\x02\x00\x04\x14\x01\x00\x04\x14\x0c\x00\x0b\x14M\x00\n\x14\x01\x00\x03\x14\x01\x00\x04\x14\x01\x00\x17\x14\x1d\x00""4\x14\x0e\x00""2\x14\x1c\x00\n\x08\x18\x00\x06\x14\x03\x00\x01\x14\x04\x00\n\x08\x1c\x14\n\x00\x17\x14\x19\x00\x1d\x14\x07\x00/\x14\x1c\x00\x01\x14\n\x08&\x00)\x14\x17\x00\x03\x14\x01\x00\x08\x14\x04\x00\n\x08\x06\x00\x17\x14\x03\x00\x01\x14\x05\x00""0\x14\x01\x00\x01\x14\x03\x00\x02\x14\x02\x00\x05\x14\x02\x00\x01\x14\x01\x00\x01\x14\x18\x00\x03\x14\x02\x00\x0b\x14\x07\x00\x03\x14\x0c\x00\x06\x14\x02\x00\x06\x14\x02\x00\x06\x14\t\x00\x07\x14\x01\x00\x07\x14\xc2\x91\x00#\x14\x0d\x00\n\x08\x06\x00\u2ba4\x14\x0c\x00\x17\x14\x04\x00""1\x14\u2104\x00\u016e\x14\x02\x00j\x14&\x00\x07\x14\x0c\x00\x05\x14\x05\x00\x01\x14\x01\x00\n\x14\x01\x00\x0d\x14\x01\x00\x05\x14\x01\x00\x01\x14\x01\x00\x02\x14\x01\x00\x02\x14\x01\x00l\x14!\x00\u016b\x14\x12\x00@\x14\x02\x00""6\x14(\x00\x0c\x14t\x00\x05\x14\x01\x00\xc2\x87\x14\x13\x00\n\x08\x07\x00\x1a\x14\x06\x00\x1a\x14\x0b\x00Y\x14\x03\x00\x06\x14\x02\x00\x06\x14\x02\x00\x06\x14\x02\x00\x03\x14#\x00";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpInternationalArabicProcessArabicLexer, ZZ_CMAP_PACKED, NSString *)

inline IOSCharArray *EduStanfordNlpInternationalArabicProcessArabicLexer_get_ZZ_CMAP();
static IOSCharArray *EduStanfordNlpInternationalArabicProcessArabicLexer_ZZ_CMAP;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpInternationalArabicProcessArabicLexer, ZZ_CMAP, IOSCharArray *)

inline IOSIntArray *EduStanfordNlpInternationalArabicProcessArabicLexer_get_ZZ_ACTION();
static IOSIntArray *EduStanfordNlpInternationalArabicProcessArabicLexer_ZZ_ACTION;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpInternationalArabicProcessArabicLexer, ZZ_ACTION, IOSIntArray *)

inline NSString *EduStanfordNlpInternationalArabicProcessArabicLexer_get_ZZ_ACTION_PACKED_0();
static NSString *EduStanfordNlpInternationalArabicProcessArabicLexer_ZZ_ACTION_PACKED_0 = @"\x01\x00\x01\x01\x03\x02\x01\x03\x04\x04\x01\x05\x03\x04\x02\x05\x01\x04\x02\x05\x01\x03\x01\x05\x01\x04\x03\x05\x02\x00\x05\x04\x02\x05\x03\x04\x02\x00\x01\x05\x03\x00\x02\x05\x01\x00\x02\x05\x08\x00\x01\x06\n\x00\x02\x05\x01\x00\x02\x05\x12\x00\x02\x05\x03\x00\x03\x04\x01\x00\x02\x04\x01\x05\x01\x00\x01\x05\t\x00\x01\x07\x01\x00\x01\x04\x08\x00\x01\x08\x01\x04\x01\x00\x01\x04\x02\x00\x04\x04\x01\x00\x06\x04";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpInternationalArabicProcessArabicLexer, ZZ_ACTION_PACKED_0, NSString *)

inline IOSIntArray *EduStanfordNlpInternationalArabicProcessArabicLexer_get_ZZ_ROWMAP();
static IOSIntArray *EduStanfordNlpInternationalArabicProcessArabicLexer_ZZ_ROWMAP;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpInternationalArabicProcessArabicLexer, ZZ_ROWMAP, IOSIntArray *)

inline NSString *EduStanfordNlpInternationalArabicProcessArabicLexer_get_ZZ_ROWMAP_PACKED_0();
static NSString *EduStanfordNlpInternationalArabicProcessArabicLexer_ZZ_ROWMAP_PACKED_0 = @"\x00\x00\x00""D\x00\xc2\x88\x00\u00cc\x00""D\x00\u0110\x00\u0154\x00\u0198\x00\u01dc\x00\u0220\x00\u0264\x00\u02a8\x00\u02ec\x00\u0330\x00\u0374\x00\u03b8\x00\u03fc\x00\u0440\x00\u0484\x00\u04c8\x00\u050c\x00\u0550\x00\u0594\x00\u05d8\x00\u061c\x00""D\x00\u0660\x00\u06a4\x00\u06e8\x00\u072c\x00\u0770\x00\u07b4\x00\u07f8\x00\u083c\x00\u0880\x00\u08c4\x00\u0908\x00\u094c\x00\u0990\x00\u09d4\x00\u0a18\x00\u0a5c\x00\u0aa0\x00\u0ae4\x00\u0b28\x00\u0b6c\x00\u0bb0\x00\u0bf4\x00\u0c38\x00\u0c7c\x00\u0cc0\x00\u0d04\x00\u0d48\x00\u0d8c\x00\u0dd0\x00\u0e14\x00\u06a4\x00\u0e58\x00\u0e9c\x00\u0ee0\x00\u0f24\x00\u0f68\x00\u0fac\x00\u0ff0\x00\u1034\x00\u1078\x00\u10bc\x00\u1100\x00\u1144\x00\u1188\x00\u11cc\x00\u1210\x00\u1254\x00\u1298\x00\u12dc\x00\u1320\x00\u1364\x00\u13a8\x00\u13ec\x00\u1430\x00\u1474\x00\u14b8\x00\u14fc\x00\u1540\x00\u1584\x00\u15c8\x00\u160c\x00\u1650\x00\u1694\x00\u16d8\x00\u171c\x00\u1760\x00\u17a4\x00\u17e8\x00\u182c\x00\u1870\x00\u18b4\x00\u00cc\x00\u18f8\x00\u193c\x00\u1980\x00\u19c4\x00\u1a08\x00\u1a4c\x00\u1a90\x00\u1ad4\x00\u1b18\x00\u1b5c\x00\u1ba0\x00\u1be4\x00\u1c28\x00\u1c6c\x00\u1cb0\x00\u1cf4\x00\u1980\x00\u1d38\x00\u1d7c\x00\u1dc0\x00\u1e04\x00\u1e48\x00\u1e8c\x00\u1ed0\x00\u1f14\x00\u1f58\x00\u00cc\x00\u1f9c\x00\u1fe0\x00\u2024\x00\u2068\x00\u20ac\x00\u1f58\x00\u1188\x00\u20f0\x00\u2134\x00\u2178\x00\u21bc\x00\u2200\x00\u2244\x00\u2288\x00\u22cc\x00\u2310";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpInternationalArabicProcessArabicLexer, ZZ_ROWMAP_PACKED_0, NSString *)

inline IOSIntArray *EduStanfordNlpInternationalArabicProcessArabicLexer_get_ZZ_TRANS();
static IOSIntArray *EduStanfordNlpInternationalArabicProcessArabicLexer_ZZ_TRANS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpInternationalArabicProcessArabicLexer, ZZ_TRANS, IOSIntArray *)

inline NSString *EduStanfordNlpInternationalArabicProcessArabicLexer_get_ZZ_TRANS_PACKED_0();
static NSString *EduStanfordNlpInternationalArabicProcessArabicLexer_ZZ_TRANS_PACKED_0 = @"\x01\x02\x01\x03\x01\x04\x01\x05\x01\x04\x01\x06\x01\x07\x01\x08\x01\t\x01\x08\x01\n\x01\x0b\x01\x0c\x01\x0d\x01\x0e\x01\x0f\x01\x0b\x01\x0f\x01\n\x01\x08\x01\x10\x01\x11\x01\x0f\x01\x12\x02\x13\x01\x10\x02\n\x01\x14\x03\n\x01\x15\x02\x13\x01\n\x01\x16\x01\x17\x02\x18\x01\x19\x02\x18\x01\x13\x01\x18\x01\x13\x01\x18\x01\x13\x01\x18\x01\x13\x01\x18\x01\x13\x01\x18\x01\x13\x01\x18\x01\x13\x01\x18\x01\x13\x01\x18\x01\x13\x01\x18\x01\x06\x01\n\x01\x13\x01\x18\x01\x13\x01\x18\x01\x1a\x02\x00\x01\x1a\x01\x00\x01\x1a\x01\x1b\x03\x1a\x01\x00\x01\x1a\x03\x00\x03\x1a\x01\x00\x08\x1a\x06\x00\x03\x1a\x08\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x03\x00\x01\x04\xc2\x85\x00\x01\x1a\x02\x00\x01\x1a\x01\x00\x01\x06\x01\x1b\x03\x1a\x01\x00\x01\x1a\x03\x00\x03\x1a\x01\x00\x08\x1a\x02\x00\x01\x14\x03\x00\x03\x1a\x08\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x06\x01\x00\x01\x1a\x01\x00\x01\x1a\x07\x00\x01\x1c\x01\n\x01\x00\x02\n\x01\x00\x03\n\x03\x00\x02\n\x01\x00\x01\n\x05\x00\x02\n\x01\x00\x03\n\x03\x00\x01\n\x1a\x00\x01\n\x04\x00\x01\x1a\x02\x00\x01\x1a\x01\x00\x01\x1a\x01\x1d\x01\x08\x01\x1a\x01\x08\x01\n\x01\x1a\x03\n\x03\x1a\x01\n\x01\x08\x01\x1a\x01\x08\x05\x1a\x02\n\x01\x00\x03\n\x03\x1a\x01\n\x07\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\n\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x02\x00\x01\x1a\x01\x00\x01\x1a\x01\x1e\x01\x1a\x02\t\x01\x1f\x01\x1a\x02\x1f\x01\x00\x03\x1a\x01\x00\x01\t\x07\x1a\x01\x00\x01\x1f\x03\x00\x01\x1f\x03\x1a\x01\x00\x01\x1f\x06\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x07\x00\x02\n\x01\x00\x02\n\x01\x00\x03\n\x03\x00\x02\n\x01\x00\x01\n\x05\x00\x02\n\x01\x00\x03\n\x03\x00\x01\n\x1a\x00\x01\n\x04\x00\x01\x1a\x02\x00\x01\x1a\x01\x00\x01\x1a\x01\x1b\x01\x1a\x01 \x01\x1a\x01\x00\x01\x0b\x01!\x01\"\x01\x00\x03\x0b\x01\x00\x01\x0b\x02\x1a\x01\x0b\x04\x1a\x06\x00\x03\x1a\x01\x00\x01#\x06\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x07\x00\x02\n\x01#\x02\n\x01!\x01\x0c\x01$\x01\n\x03!\x01\n\x01\x0c\x01\x00\x01\n\x01!\x04\x00\x02\n\x01\x00\x03\n\x03\x00\x01\n\x01#\x19\x00\x01\n\n\x00\x02\n\x01\x00\x02\n\x01!\x01\x0c\x01%\x01\x0e\x03!\x02\n\x01\x00\x01\n\x01!\x04\x00\x02\n\x01\x00\x03\n\x03\x00\x01\n\x11\x00\x02&\x07\x00\x01\n\x02&\x08\x00\x02\n\x01\x00\x02\n\x01\x00\x03\n\x01'\x02\x00\x02\n\x01\x00\x01\n\x05\x00\x02\n\x01\x00\x03\n\x03\x00\x01\n\x1a\x00\x01\n\x04\x00\x01\x1a\x02\x00\x01\x1a\x01\x00\x01\x1a\x01\x1b\x01\x1a\x01 \x01\x1a\x01\x00\x01\x0b\x01!\x01\"\x01\x00\x01\x0f\x01\x0b\x01\x0f\x01\x00\x01\x0b\x02\x10\x01\x0f\x04\x10\x06\x00\x03\x10\x01\x00\x01#\x06(\x01\x10\x01(\x01\x10\x01(\x01\x10\x01(\x01\x10\x01(\x01\x10\x01(\x01\x10\x01(\x01\x10\x01(\x01\x10\x01(\x01\x10\x01(\x01\x1a\x01\x00\x01\x10\x01(\x01\x10\x01(\x01\x1a\x02\x00\x01\x1a\x01\x00\x01\x1a\x01\x1b\x03\x1a\x01\x00\x01\x1a\x03\x00\x01\x10\x01\x1a\x01\x10\x01\x00\x01\x1a\x07\x10\x06\x00\x03\x10\x02\x00\x06(\x01\x10\x01(\x01\x10\x01(\x01\x10\x01(\x01\x10\x01(\x01\x10\x01(\x01\x10\x01(\x01\x10\x01(\x01\x10\x01(\x01\x10\x01(\x01\x1a\x01\x00\x01\x10\x01(\x01\x10\x01(\x01\x1a\x02\x00\x01\x1a\x01\x00\x01\x1a\x01\x1d\x01\x08\x01\x1a\x01\x08\x01\n\x01\x1a\x03\n\x01\x10\x01\x1a\x01\x10\x01\n\x01\x08\x01\x10\x01\x11\x05\x10\x02\n\x01\x00\x03\n\x03\x10\x01\n\x01\x00\x06(\x01\x10\x01(\x01\x10\x01(\x01\x10\x01(\x01\x10\x01(\x01\x10\x01(\x01\x10\x01(\x01\x10\x01(\x01\x10\x01(\x01\x10\x01(\x01\x1a\x01\n\x01\x10\x01(\x01\x10\x01(\x01)\x02\x00\x01)\x01\x00\x01)\x01*\x03)\x01+\x01)\x03+\x01\x13\x01)\x01\x13\x01+\x01)\x04\x13\x01,\x02\x13\x02+\x02\x00\x02+\x03\x13\x02+\x01\x18\x01-\x04\x18\x01\x13\x01\x18\x01\x13\x01\x18\x01\x13\x01\x18\x01\x13\x01\x18\x01\x13\x01\x18\x01\x13\x01\x18\x01\x13\x01\x18\x01\x13\x01\x18\x01\x13\x01\x18\x01\x1a\x01.\x01\x13\x01\x18\x01\x13\x01\x18\x01)\x02\x00\x01)\x01\x00\x01)\x01*\x03)\x01+\x01)\x03+\x01\x13\x01)\x01\x13\x01+\x01)\x07\x13\x02+\x02\x00\x02+\x03\x13\x02+\x06\x18\x01\x13\x01\x18\x01\x13\x01\x18\x01\x13\x01\x18\x01\x13\x01\x18\x01\x13\x01\x18\x01\x13\x01\x18\x01\x13\x01\x18\x01\x13\x01\x18\x01\x13\x01\x18\x01\x1a\x01.\x01\x13\x01\x18\x01\x13\x01\x18\x05\x00\x01\x14\x17\x00\x01\x14 \x00\x01\x14\x05\x00\x01)\x02\x00\x01)\x01\x00\x01)\x01*\x03)\x01+\x01)\x03+\x01\x13\x01)\x01\x13\x01+\x01)\x07\x13\x02+\x02\x00\x02+\x01/\x02\x13\x02+\x03\x18\x01""0\x02\x18\x01\x13\x01\x18\x01\x13\x01\x18\x01\x13\x01\x18\x01\x13\x01\x18\x01\x13\x01\x18\x01\x13\x01\x18\x01\x13\x01\x18\x01\x13\x01\x18\x01\x13\x01\x18\x01\x1a\x01.\x01\x13\x01\x18\x01\x13\x01\x18\x01+\x02\x00\x01+\x01\x00\x01+\x01\x16\x01+\x03\x16\x01+\x02\x16\x05+\x01\x16\x08+\x01\x16\x02\x00\x01+\x01\x16\x04+\x01\x16\x18+\x01\x00\x01.\x05+\x02\x00\x01+\x01\x00\n+\x01\x18\x01+\x01\x18\x02+\x04\x18\x01-\x02\x18\x02+\x02\x00\x02+\x03\x18\x02+\x01\x18\x01-\x16\x18\x01\x00\x01.\x04\x18\x01+\x02\x00\x01+\x01\x00\n+\x01\x18\x01+\x01\x18\x02+\x07\x18\x02+\x02\x00\x02+\x03\x18\x02+\x18\x18\x01\x00\x01.\x04\x18\x01+\x02\x00\x01+\x01\x00\n+\x01\x18\x01+\x01\x18\x02+\x07\x18\x02+\x02\x00\x02+\x01""0\x02\x18\x02+\x03\x18\x01""0\x14\x18\x01\x00\x01.\x04\x18\x01\x1a\x02\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x03\x1a\x01\x00\x01\x1a\x03\x00\x03\x1a\x01\x00\x08\x1a\x06\x00\x03\x1a\x08\x00\x01""1\x01""2\x01""3\x01""4\x01\x1a\x01\x00\x01""5\x01""6\x01""7\x01""8\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x07\x00\x01""9\x01\n\x01\x00\x02\n\x01\x00\x03\n\x03\x00\x02\n\x01\x00\x01\n\x05\x00\x02\n\x01\x00\x03\n\x03\x00\x01\n\x1a\x00\x01\n\x04\x00\x01\x1a\x02\x00\x01\x1a\x01\x00\x01\x1a\x01\n\x01\x08\x01\x1a\x01\x08\x01\n\x01\x1a\x03\n\x03\x1a\x01\n\x01\x08\x01\x1a\x01\x08\x05\x1a\x02\n\x01\x00\x03\n\x03\x1a\x01\n\x07\x00\x01""1\x01""2\x01""3\x01""4\x01\x1a\x01\x00\x01""5\x01""6\x01""7\x01""8\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\n\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x02\x00\x01\x1a\x01\x00\x01\x1a\x01\x1f\x01\x1a\x02\t\x01\x1f\x01\x1a\x02\x1f\x01\x00\x03\x1a\x01\x00\x01\t\x07\x1a\x01\x00\x01\x1f\x03\x00\x01\x1f\x03\x1a\x01\x00\x01\x1f\x06\x00\x01""1\x01""2\x01""3\x01""4\x01\x1a\x01\x00\x01""5\x01""6\x01""7\x01""8\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x07\x00\x01\x1f\x01\x00\x03\x1f\x01\x00\x02\x1f\x05\x00\x01\x1f\x08\x00\x01\x1f\x03\x00\x01\x1f\x04\x00\x01\x1f\x1e\x00\x01\x1a\x02\x00\x01\x1a\x01\x00\x01\x1a\x01\x1b\x01\x1a\x01 \x01\x1a\x01\x00\x01\x1a\x03\x00\x03\x1a\x01\x00\x08\x1a\x06\x00\x03\x1a\x01\x00\x01#\x06\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\t\x00\x01#\x02\x00\x02!\x01\"\x01\x00\x03!\x01\x00\x01!\x02\x00\x01!\x0e\x00\x01#&\x00\x01#\x04\x00\x01\"\x17\x00\x01#&\x00\x01#\x1c\x00\x01#$\x00\x02\n\x01#\x02\n\x01\x00\x01\n\x01$\x01\n\x03\x00\x02\n\x01\x00\x01\n\x05\x00\x02\n\x01\x00\x03\n\x03\x00\x01\n\x01#\x19\x00\x01\n\n\x00\x02\n\x01\x00\x02\n\x01!\x01\x0c\x01%\x01\x0e\x03!\x02\n\x01\x00\x01\n\x01!\x04\x00\x02\n\x01\x00\x03\n\x03\x00\x01\n\x1a\x00\x01\n:\x00\x02:\x1c\x00\x01;B\x00\x01(\x01\x00\x01(\x02\x00\x07(\x06\x00\x03(\x02\x00\x18(\x02\x00\x04(\x01)\x02\x00\x01)\x01\x00\x01)\x01*\x03)\x01+\x01)\x03+\x03)\x01+\x08)\x02+\x02\x00\x02+\x03)\x08+\x01)\x01+\x01)\x01+\x01)\x01+\x01)\x01+\x01)\x01+\x01)\x01+\x01)\x01+\x01)\x01+\x01)\x01+\x01\x1a\x01.\x01)\x01+\x01)\x01+\x01)\x02\x00\x01)\x01\x00\x01)\x01+\x03)\x01+\x01)\x03+\x03)\x01+\x08)\x02+\x02\x00\x02+\x03)\x08+\x01<\x01=\x01>\x01?\x01)\x01+\x01@\x01""A\x01""B\x01""C\x01)\x01+\x01)\x01+\x01)\x01+\x01)\x01+\x01\x1a\x01.\x01)\x01+\x01)\x02+\x02\x00\x01+\x01\x00\x18+\x02\x00\x1f+\x01\x00\x01.\x04+\x01)\x02\x00\x01)\x01\x00\x01)\x01*\x03)\x01+\x01)\x03+\x01\x13\x01)\x01\x13\x01+\x01)\x04\x13\x01""D\x02\x13\x02+\x02\x00\x02+\x03\x13\x02+\x01\x18\x01""E\x04\x18\x01\x13\x01\x18\x01\x13\x01\x18\x01\x13\x01\x18\x01\x13\x01\x18\x01\x13\x01\x18\x01\x13\x01\x18\x01\x13\x01\x18\x01\x13\x01\x18\x01\x13\x01\x18\x01\x1a\x01.\x01\x13\x01\x18\x01\x13\x01\x18\x01+\x02\x00\x01+\x01\x00\n+\x01\x18\x01+\x01\x18\x02+\x04\x18\x01""E\x02\x18\x02+\x02\x00\x02+\x03\x18\x02+\x01\x18\x01""E\x16\x18\x01\x00\x01.\x04\x18\x01""F\x02\x00\x01""F\x01\x00\x01""F\x01+\x16""F\x02\x00\x1f""F\x01\x00\x05""F\x01)\x02\x00\x01)\x01\x00\x01)\x01*\x03)\x01+\x01)\x03+\x01\x13\x01)\x01\x13\x01+\x01)\x07\x13\x02+\x02\x00\x02+\x01G\x02\x13\x02+\x03\x18\x01H\x02\x18\x01\x13\x01\x18\x01\x13\x01\x18\x01\x13\x01\x18\x01\x13\x01\x18\x01\x13\x01\x18\x01\x13\x01\x18\x01\x13\x01\x18\x01\x13\x01\x18\x01\x13\x01\x18\x01\x1a\x01.\x01\x13\x01\x18\x01\x13\x01\x18\x01+\x02\x00\x01+\x01\x00\n+\x01\x18\x01+\x01\x18\x02+\x07\x18\x02+\x02\x00\x02+\x01H\x02\x18\x02+\x03\x18\x01H\x14\x18\x01\x00\x01.\x04\x18\x01\x1a\x02\x00\x01\x1a\x01\x00\x01\x1a\x01\x1b\x03\x1a\x01\x00\x01\x1a\x03\x00\x03\x1a\x01\x00\x08\x1a\x06\x00\x03\x1a\x08\x00\x01\x1a\x01\x00\x01I\x01J\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a/\x00\x02J\x14\x00\x01\x1a\x02\x00\x01\x1a\x01\x00\x01\x1a\x01\x1b\x03\x1a\x01\x00\x01\x1a\x03\x00\x03\x1a\x01\x00\x08\x1a\x06\x00\x03\x1a\x08\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01K\x01L\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a""7\x00\x02L\x0c\x00\x01\x1a\x02\x00\x01\x1a\x01\x00\x01\x1a\x01\x1b\x03\x1a\x01\x00\x01\x1a\x03\x00\x03\x1a\x01\x00\x08\x1a\x06\x00\x03\x1a\x08\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01M\x01N\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a""5\x00\x02N\x0e\x00\x01\x1a\x02\x00\x01\x1a\x01\x00\x01\x1a\x01\x1b\x03\x1a\x01\x00\x01\x1a\x03\x00\x03\x1a\x01\x00\x08\x1a\x06\x00\x03\x1a\x08\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01O\x01P\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a;\x00\x02PJ\x00\x02Q\x11\x00\x01R2\x00\x01)\x02\x00\x01)\x01\x00\x01)\x01*\x03)\x01+\x01)\x03+\x03)\x01+\x08)\x02+\x02\x00\x02+\x03)\x08+\x01)\x01+\x01S\x01T\x01)\x01+\x01)\x01+\x01)\x01+\x01)\x01+\x01)\x01+\x01)\x01+\x01)\x01+\x01\x1a\x01.\x01)\x01+\x01)\x02+\x02\x00\x01+\x01\x00\x18+\x02\x00\x0f+\x02T\x0e+\x01\x00\x01.\x04+\x01)\x02\x00\x01)\x01\x00\x01)\x01*\x03)\x01+\x01)\x03+\x03)\x01+\x08)\x02+\x02\x00\x02+\x03)\x08+\x01)\x01+\x01)\x01+\x01)\x01+\x01)\x01+\x01)\x01+\x01U\x01V\x01)\x01+\x01)\x01+\x01)\x01+\x01\x1a\x01.\x01)\x01+\x01)\x02+\x02\x00\x01+\x01\x00\x18+\x02\x00\x17+\x02V\x06+\x01\x00\x01.\x04+\x01)\x02\x00\x01)\x01\x00\x01)\x01*\x03)\x01+\x01)\x03+\x03)\x01+\x08)\x02+\x02\x00\x02+\x03)\x08+\x01)\x01+\x01)\x01+\x01)\x01+\x01)\x01+\x01W\x01X\x01)\x01+\x01)\x01+\x01)\x01+\x01)\x01+\x01\x1a\x01.\x01)\x01+\x01)\x02+\x02\x00\x01+\x01\x00\x18+\x02\x00\x15+\x02X\x08+\x01\x00\x01.\x04+\x01)\x02\x00\x01)\x01\x00\x01)\x01*\x03)\x01+\x01)\x03+\x03)\x01+\x08)\x02+\x02\x00\x02+\x03)\x08+\x01)\x01+\x01)\x01+\x01)\x01+\x01)\x01+\x01)\x01+\x01)\x01+\x01)\x01+\x01Y\x01Z\x01)\x01+\x01\x1a\x01.\x01)\x01+\x01)\x02+\x02\x00\x01+\x01\x00\x18+\x02\x00\x1b+\x02Z\x02+\x01\x00\x01.\x04+\x01)\x02\x00\x01)\x01\x00\x01)\x01*\x03)\x01+\x01)\x03+\x01\x13\x01)\x01\x13\x01+\x01)\x05\x13\x01[\x01\x13\x02+\x02\x00\x02+\x03\x13\x02+\x02\x18\x01\\\x03\x18\x01\x13\x01\x18\x01\x13\x01\x18\x01\x13\x01\x18\x01\x13\x01\x18\x01\x13\x01\x18\x01\x13\x01\x18\x01\x13\x01\x18\x01\x13\x01\x18\x01\x13\x01\x18\x01\x1a\x01.\x01\x13\x01\x18\x01\x13\x01\x18\x01+\x02\x00\x01+\x01\x00\n+\x01\x18\x01+\x01\x18\x02+\x05\x18\x01\\\x01\x18\x02+\x02\x00\x02+\x03\x18\x02+\x02\x18\x01\\\x15\x18\x01\x00\x01.\x04\x18\x01""F\x02\x00\x01""F\x01\x00\x01""F\x01]\x16""F\x02\x00\x1f""F\x01\x00\x05""F\x01)\x02\x00\x01)\x01\x00\x01)\x01^\x03)\x01+\x01)\x03+\x01\x13\x01)\x01\x13\x01+\x01)\x07\x13\x02+\x02\x00\x02+\x03\x13\x02+\x06\x18\x01\x13\x01\x18\x01\x13\x01\x18\x01\x13\x01\x18\x01\x13\x01\x18\x01\x13\x01\x18\x01\x13\x01\x18\x01\x13\x01\x18\x01\x13\x01\x18\x01\x13\x01\x18\x01\x1a\x01.\x01\x13\x01\x18\x01\x13\x01\x18\x01+\x02\x00\x01+\x01\x00\x01+\x01_\x08+\x01\x18\x01+\x01\x18\x02+\x07\x18\x02+\x02\x00\x02+\x03\x18\x02+\x18\x18\x01\x00\x01.\x04\x18\x01\x1a\x02\x00\x01\x1a\x01\x00\x01\x1a\x01\x1b\x03\x1a\x01\x00\x01\x1a\x03\x00\x03\x1a\x01\x00\x08\x1a\x06\x00\x03\x1a\x08\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01`\x01""a\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a""1\x00\x02""a\x12\x00\x01\x1a\x02\x00\x01\x1a\x01\x00\x01\x1a\x01\x1b\x03\x1a\x01\x00\x01\x1a\x03\x00\x03\x1a\x01\x00\x08\x1a\x06\x00\x03\x1a\x08\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01`\x01""a\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a""9\x00\x02""a\n\x00\x01\x1a\x02\x00\x01\x1a\x01\x00\x01\x1a\x01\x1b\x03\x1a\x01\x00\x01\x1a\x03\x00\x03\x1a\x01\x00\x05\x1a\x01`\x02\x1a\x06\x00\x03\x1a\x03\x00\x01""a\x04\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x19\x00\x01""a\x0e\x00\x01""a\x1c\x00\x01\x1a\x02\x00\x01\x1a\x01\x00\x01\x1a\x01\x1b\x03\x1a\x01\x00\x01\x1a\x03\x00\x03\x1a\x01\x00\x08\x1a\x06\x00\x03\x1a\x08\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01`\x01""a\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a=\x00\x02""a\x13\x00\x01""bG\x00\x01""c2\x00\x01)\x02\x00\x01)\x01\x00\x01)\x01*\x03)\x01+\x01)\x03+\x03)\x01+\x08)\x02+\x02\x00\x02+\x03)\x08+\x01)\x01+\x01)\x01+\x01""d\x01""e\x01)\x01+\x01)\x01+\x01)\x01+\x01)\x01+\x01)\x01+\x01)\x01+\x01\x1a\x01.\x01)\x01+\x01)\x02+\x02\x00\x01+\x01\x00\x18+\x02\x00\x11+\x02""e\x0c+\x01\x00\x01.\x04+\x01)\x02\x00\x01)\x01\x00\x01)\x01*\x03)\x01+\x01)\x03+\x03)\x01+\x08)\x02+\x02\x00\x02+\x03)\x08+\x01)\x01+\x01)\x01+\x01)\x01+\x01)\x01+\x01)\x01+\x01)\x01+\x01""d\x01""e\x01)\x01+\x01)\x01+\x01\x1a\x01.\x01)\x01+\x01)\x02+\x02\x00\x01+\x01\x00\x18+\x02\x00\x19+\x02""e\x04+\x01\x00\x01.\x04+\x01)\x02\x00\x01)\x01\x00\x01)\x01*\x03)\x01+\x01)\x03+\x03)\x01+\x05)\x01""d\x02)\x02+\x02\x00\x02+\x03)\x03+\x01""e\x04+\x01)\x01+\x01)\x01+\x01)\x01+\x01)\x01+\x01)\x01+\x01)\x01+\x01)\x01+\x01)\x01+\x01)\x01+\x01\x1a\x01.\x01)\x01+\x01)\x02+\x02\x00\x01+\x01\x00\x13+\x01""e\x04+\x02\x00\x08+\x01""e\x16+\x01\x00\x01.\x04+\x01)\x02\x00\x01)\x01\x00\x01)\x01*\x03)\x01+\x01)\x03+\x03)\x01+\x08)\x02+\x02\x00\x02+\x03)\x08+\x01)\x01+\x01)\x01+\x01)\x01+\x01)\x01+\x01)\x01+\x01)\x01+\x01)\x01+\x01)\x01+\x01""d\x01""e\x01\x1a\x01.\x01)\x01+\x01)\x02+\x02\x00\x01+\x01\x00\x18+\x02\x00\x1d+\x02""e\x01\x00\x01.\x04+\x01)\x02\x00\x01)\x01\x00\x01)\x01*\x03)\x01+\x01)\x03+\x01\x13\x01)\x01\x13\x01+\x01)\x06\x13\x01""f\x01g\x01+\x02\x00\x02+\x02\x13\x01""f\x02+\x05\x18\x01h\x01\x13\x01\x18\x01\x13\x01\x18\x01\x13\x01\x18\x01\x13\x01\x18\x01\x13\x01\x18\x01\x13\x01\x18\x01\x13\x01\x18\x01\x13\x01\x18\x01\x13\x01\x18\x01\x1a\x01.\x01\x13\x01\x18\x01\x13\x01\x18\x01+\x02\x00\x01+\x01\x00\n+\x01\x18\x01+\x01\x18\x02+\x06\x18\x01h\x01g\x01+\x02\x00\x02+\x02\x18\x01h\x02+\x05\x18\x01h\x12\x18\x01\x00\x01.\x04\x18\x01""F\x02\x00\x01""F\x01\x00\x01""F\x01+\x10""F\x03i\x03""F\x02\x00\x02""F\x03i\x02""F\x18i\x01\x00\x01""F\x04i\x01j\x02\x00\x01j\x01\x00\x01j\x01+\x16j\x02\x00\x02+\x0bj\x02k\x02l\x02j\x02m\x02n\x08j\x01o\x01p\x05j\x02\x00\x01j\x01\x00\x01j\x01+\x16j\x02\x00\x02+\x1dj\x01o\x01p\x04j\x01\x1a\x02\x00\x01\x1a\x01\x00\x01\x1a\x01\x1b\x03\x1a\x01\x00\x01\x1a\x03\x00\x03\x1a\x01\x00\x08\x1a\x01\x00\x01q\x04\x00\x03\x1a\x08\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x01\x00\x01\x1a\x1d\x00\x01q9\x00\x01r1\x00\x01)\x02\x00\x01)\x01\x00\x01)\x01*\x03)\x01+\x01)\x03+\x03)\x01+\x08)\x01+\x01q\x02\x00\x02+\x03)\x08+\x01)\x01+\x01)\x01+\x01)\x01+\x01)\x01+\x01)\x01+\x01)\x01+\x01)\x01+\x01)\x01+\x01)\x01+\x01\x1a\x01.\x01)\x01+\x01)\x02+\x02\x00\x01+\x01\x00\x17+\x01q\x02\x00\x1f+\x01\x00\x01.\x04+\x01)\x02\x00\x01)\x01\x00\x01)\x01*\x03)\x01+\x01)\x03+\x01\x13\x01)\x01\x13\x01+\x01)\x07\x13\x01g\x01+\x02\x00\x02+\x03\x13\x02+\x06\x18\x01\x13\x01\x18\x01\x13\x01\x18\x01\x13\x01\x18\x01\x13\x01\x18\x01\x13\x01\x18\x01\x13\x01\x18\x01\x13\x01\x18\x01\x13\x01\x18\x01\x13\x01\x18\x01\x1a\x01.\x01\x13\x01\x18\x01\x13\x01\x18\x01+\x02\x00\x01+\x01\x00\x17+\x01s\x02\x00\x1f+\x01\x00\x01.\x05+\x02\x00\x01+\x01\x00\n+\x01\x18\x01+\x01\x18\x02+\x07\x18\x01g\x01+\x02\x00\x02+\x03\x18\x02+\x18\x18\x01\x00\x01.\x04\x18\x01""F\x02\x00\x01""F\x01\x00\x01""F\x01]\x10""F\x03t\x03""F\x02\x00\x02""F\x03t\x02""F\x18t\x01\x00\x01""F\x04t\x01j\x02\x00\x01j\x01\x00\x01j\x01u\x16j\x02\x00\x02+\x1dj\x01o\x01p\x05j\x02\x00\x01j\x01\x00\x01j\x01u\x16j\x02\x00\x02+\x0dj\x02v\x0ej\x01o\x01p\x05j\x02\x00\x01j\x01\x00\x01j\x01u\x16j\x02\x00\x02+\x15j\x02w\x06j\x01o\x01p\x05j\x02\x00\x01j\x01\x00\x01j\x01u\x16j\x02\x00\x02+\x13j\x02x\x08j\x01o\x01p\x05j\x02\x00\x01j\x01\x00\x01j\x01u\x16j\x02\x00\x02+\x19j\x02y\x02j\x01o\x01p\x04j\x01o\x02\x00\x01o\x01\x00\x01o\x01z\x16o\x04\x00#o\x01{\x02\x00\x01{\x01\x00\x01{\x01u\x16{\x02\x00\x02""F\x1d{\x01o\x05{\x01|\x02\x00\x01|\x01\x00\x18|\x02\x00%|\x0d\x00\x01}6\x00\x01""F\x02\x00\x01""F\x01\x00\x01""F\x01]\x10""F\x03~\x03""F\x02\x00\x02""F\x03~\x02""F\x18~\x01\x00\x01""F\x04~\x01j\x02\x00\x01j\x01\x00\x01j\x01+\x10j\x03\x7f\x03j\x02\x00\x02+\x03\x7f\x02j\x18\x7f\x01o\x01p\x04\x7f\x01j\x02\x00\x01j\x01\x00\x01j\x01u\x16j\x02\x00\x02+\x0fj\x02\xc2\x80\x0cj\x01o\x01p\x05j\x02\x00\x01j\x01\x00\x01j\x01u\x16j\x02\x00\x02+\x17j\x02\xc2\x80\x04j\x01o\x01p\x05j\x02\x00\x01j\x01\x00\x01j\x01u\x11j\x01\xc2\x80\x04j\x02\x00\x02+\x06j\x01\xc2\x80\x16j\x01o\x01p\x05j\x02\x00\x01j\x01\x00\x01j\x01u\x16j\x02\x00\x02+\x1bj\x02\xc2\x80\x01o\x01p\x04j\x01o\x02\x00\x01o\x01\x00\x01o\x01\x00\x10o\x03\xc2\x81\x03o\x04\x00\x03\xc2\x81\x02o\x18\xc2\x81\x02o\x04\xc2\x81\x01{\x02\x00\x01{\x01\x00\x01{\x01\xc2\x82\x16{\x02\x00\x02""F\x1d{\x01o\x05{\x01\xc2\x83\x02\x00\x01\xc2\x83\x01\x00\x01\xc2\x83\x01|\x06\xc2\x83\x01|\x0f\xc2\x83\x02\x00\x02|#\xc2\x83\x01""F\x02\x00\x01""F\x01\x00\x01""F\x01]\x10""F\x03\xc2\x84\x03""F\x02\x00\x02""F\x03\xc2\x84\x02""F\x18\xc2\x84\x01\x00\x01""F\x04\xc2\x84\x01j\x02\x00\x01j\x01\x00\x01j\x01u\x10j\x03\xc2\x85\x03j\x02\x00\x02+\x03\xc2\x85\x02j\x18\xc2\x85\x01o\x01p\x04\xc2\x85\x01j\x02\x00\x01j\x01\x00\x01j\x01u\x15j\x01q\x02\x00\x02+\x1dj\x01o\x01p\x04j\x01o\x02\x00\x01o\x01\x00\x01o\x01z\x10o\x03\xc2\x86\x03o\x04\x00\x03\xc2\x86\x02o\x18\xc2\x86\x02o\x04\xc2\x86\x01{\x02\x00\x01{\x01\x00\x01{\x01+\x10{\x03\xc2\x87\x03{\x02\x00\x02""F\x03\xc2\x87\x02{\x18\xc2\x87\x01o\x01{\x04\xc2\x87\x01j\x02\x00\x01j\x01\x00\x01j\x01u\x10j\x03\xc2\x88\x02j\x01q\x02\x00\x02+\x03\xc2\x88\x02j\x18\xc2\x88\x01o\x01p\x04\xc2\x88\x01o\x02\x00\x01o\x01\x00\x01o\x01z\x10o\x03\xc2\x89\x02o\x01q\x04\x00\x03\xc2\x89\x02o\x18\xc2\x89\x02o\x04\xc2\x89\x01{\x02\x00\x01{\x01\x00\x01{\x01\xc2\x82\x10{\x03\xc2\x8a\x03{\x02\x00\x02""F\x03\xc2\x8a\x02{\x18\xc2\x8a\x01o\x01{\x04\xc2\x8a\x01j\x02\x00\x01j\x01\x00\x01j\x01u\x10j\x03\xc2\x80\x02j\x01q\x02\x00\x02+\x03\xc2\x80\x02j\x18\xc2\x80\x01o\x01p\x04\xc2\x80\x01o\x02\x00\x01o\x01\x00\x01o\x01z\x10o\x03\xc2\x8b\x02o\x01q\x04\x00\x03\xc2\x8b\x02o\x18\xc2\x8b\x02o\x04\xc2\x8b\x01{\x02\x00\x01{\x01\x00\x01{\x01\xc2\x82\x10{\x03\xc2\x8c\x02{\x01q\x02\x00\x02""F\x03\xc2\x8c\x02{\x18\xc2\x8c\x01o\x01{\x04\xc2\x8c\x01o\x02\x00\x01o\x01\x00\x01o\x01z\x15o\x01q\x04\x00#o\x01{\x02\x00\x01{\x01\x00\x01{\x01\xc2\x82\x10{\x03\xc2\x8d\x02{\x01q\x02\x00\x02""F\x03\xc2\x8d\x02{\x18\xc2\x8d\x01o\x01{\x04\xc2\x8d\x01{\x02\x00\x01{\x01\x00\x01{\x01\xc2\x82\x15{\x01q\x02\x00\x02""F\x1d{\x01o\x05{";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpInternationalArabicProcessArabicLexer, ZZ_TRANS_PACKED_0, NSString *)

inline jint EduStanfordNlpInternationalArabicProcessArabicLexer_get_ZZ_UNKNOWN_ERROR();
#define EduStanfordNlpInternationalArabicProcessArabicLexer_ZZ_UNKNOWN_ERROR 0
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpInternationalArabicProcessArabicLexer, ZZ_UNKNOWN_ERROR, jint)

inline jint EduStanfordNlpInternationalArabicProcessArabicLexer_get_ZZ_NO_MATCH();
#define EduStanfordNlpInternationalArabicProcessArabicLexer_ZZ_NO_MATCH 1
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpInternationalArabicProcessArabicLexer, ZZ_NO_MATCH, jint)

inline jint EduStanfordNlpInternationalArabicProcessArabicLexer_get_ZZ_PUSHBACK_2BIG();
#define EduStanfordNlpInternationalArabicProcessArabicLexer_ZZ_PUSHBACK_2BIG 2
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpInternationalArabicProcessArabicLexer, ZZ_PUSHBACK_2BIG, jint)

inline IOSObjectArray *EduStanfordNlpInternationalArabicProcessArabicLexer_get_ZZ_ERROR_MSG();
static IOSObjectArray *EduStanfordNlpInternationalArabicProcessArabicLexer_ZZ_ERROR_MSG;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpInternationalArabicProcessArabicLexer, ZZ_ERROR_MSG, IOSObjectArray *)

inline IOSIntArray *EduStanfordNlpInternationalArabicProcessArabicLexer_get_ZZ_ATTRIBUTE();
static IOSIntArray *EduStanfordNlpInternationalArabicProcessArabicLexer_ZZ_ATTRIBUTE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpInternationalArabicProcessArabicLexer, ZZ_ATTRIBUTE, IOSIntArray *)

inline NSString *EduStanfordNlpInternationalArabicProcessArabicLexer_get_ZZ_ATTRIBUTE_PACKED_0();
static NSString *EduStanfordNlpInternationalArabicProcessArabicLexer_ZZ_ATTRIBUTE_PACKED_0 = @"\x01\x00\x02\x01\x01\t\x15\x01\x02\x00\n\x01\x02\x00\x01\x01\x03\x00\x02\x01\x01\x00\x02\x01\x08\x00\x01\x01\n\x00\x02\x01\x01\x00\x02\x01\x12\x00\x02\x01\x03\x00\x02\x01\x01\t\x01\x00\x03\x01\x01\x00\x01\x01\t\x00\x01\x01\x01\x00\x01\x01\x08\x00\x01\t\x01\x01\x01\x00\x01\x01\x02\x00\x04\x01\x01\x00\x06\x01";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpInternationalArabicProcessArabicLexer, ZZ_ATTRIBUTE_PACKED_0, NSString *)

__attribute__((unused)) static IOSIntArray *EduStanfordNlpInternationalArabicProcessArabicLexer_zzUnpackAction();

__attribute__((unused)) static jint EduStanfordNlpInternationalArabicProcessArabicLexer_zzUnpackActionWithNSString_withInt_withIntArray_(NSString *packed, jint offset, IOSIntArray *result);

__attribute__((unused)) static IOSIntArray *EduStanfordNlpInternationalArabicProcessArabicLexer_zzUnpackRowMap();

__attribute__((unused)) static jint EduStanfordNlpInternationalArabicProcessArabicLexer_zzUnpackRowMapWithNSString_withInt_withIntArray_(NSString *packed, jint offset, IOSIntArray *result);

__attribute__((unused)) static IOSIntArray *EduStanfordNlpInternationalArabicProcessArabicLexer_zzUnpackTrans();

__attribute__((unused)) static jint EduStanfordNlpInternationalArabicProcessArabicLexer_zzUnpackTransWithNSString_withInt_withIntArray_(NSString *packed, jint offset, IOSIntArray *result);

__attribute__((unused)) static IOSIntArray *EduStanfordNlpInternationalArabicProcessArabicLexer_zzUnpackAttribute();

__attribute__((unused)) static jint EduStanfordNlpInternationalArabicProcessArabicLexer_zzUnpackAttributeWithNSString_withInt_withIntArray_(NSString *packed, jint offset, IOSIntArray *result);

__attribute__((unused)) static void EduStanfordNlpInternationalArabicProcessArabicLexer_setupNormalizationMap(EduStanfordNlpInternationalArabicProcessArabicLexer *self);

__attribute__((unused)) static NSString *EduStanfordNlpInternationalArabicProcessArabicLexer_normalizeTokenWithNSString_withBoolean_(EduStanfordNlpInternationalArabicProcessArabicLexer *self, NSString *text, jboolean isWord);

__attribute__((unused)) static jboolean EduStanfordNlpInternationalArabicProcessArabicLexer_isLengtheningWithNSString_withInt_(EduStanfordNlpInternationalArabicProcessArabicLexer *self, NSString *text, jint pos);

__attribute__((unused)) static id EduStanfordNlpInternationalArabicProcessArabicLexer_getNextWithNSString_withNSString_(EduStanfordNlpInternationalArabicProcessArabicLexer *self, NSString *txt, NSString *originalText);

__attribute__((unused)) static id EduStanfordNlpInternationalArabicProcessArabicLexer_getNextWithBoolean_(EduStanfordNlpInternationalArabicProcessArabicLexer *self, jboolean isWord);

__attribute__((unused)) static id EduStanfordNlpInternationalArabicProcessArabicLexer_getEllipsis(EduStanfordNlpInternationalArabicProcessArabicLexer *self);

__attribute__((unused)) static IOSCharArray *EduStanfordNlpInternationalArabicProcessArabicLexer_zzUnpackCMapWithNSString_(NSString *packed);

__attribute__((unused)) static jboolean EduStanfordNlpInternationalArabicProcessArabicLexer_zzRefill(EduStanfordNlpInternationalArabicProcessArabicLexer *self);

__attribute__((unused)) static NSString *EduStanfordNlpInternationalArabicProcessArabicLexer_yytext(EduStanfordNlpInternationalArabicProcessArabicLexer *self);

__attribute__((unused)) static jint EduStanfordNlpInternationalArabicProcessArabicLexer_yylength(EduStanfordNlpInternationalArabicProcessArabicLexer *self);

__attribute__((unused)) static void EduStanfordNlpInternationalArabicProcessArabicLexer_zzScanErrorWithInt_(EduStanfordNlpInternationalArabicProcessArabicLexer *self, jint errorCode);

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpInternationalArabicProcessArabicLexer)

NSString *EduStanfordNlpInternationalArabicProcessArabicLexer_NEWLINE_TOKEN = @"*NL*";

@implementation EduStanfordNlpInternationalArabicProcessArabicLexer

+ (IOSIntArray *)zzUnpackAction {
  return EduStanfordNlpInternationalArabicProcessArabicLexer_zzUnpackAction();
}

+ (jint)zzUnpackActionWithNSString:(NSString *)packed
                           withInt:(jint)offset
                      withIntArray:(IOSIntArray *)result {
  return EduStanfordNlpInternationalArabicProcessArabicLexer_zzUnpackActionWithNSString_withInt_withIntArray_(packed, offset, result);
}

+ (IOSIntArray *)zzUnpackRowMap {
  return EduStanfordNlpInternationalArabicProcessArabicLexer_zzUnpackRowMap();
}

+ (jint)zzUnpackRowMapWithNSString:(NSString *)packed
                           withInt:(jint)offset
                      withIntArray:(IOSIntArray *)result {
  return EduStanfordNlpInternationalArabicProcessArabicLexer_zzUnpackRowMapWithNSString_withInt_withIntArray_(packed, offset, result);
}

+ (IOSIntArray *)zzUnpackTrans {
  return EduStanfordNlpInternationalArabicProcessArabicLexer_zzUnpackTrans();
}

+ (jint)zzUnpackTransWithNSString:(NSString *)packed
                          withInt:(jint)offset
                     withIntArray:(IOSIntArray *)result {
  return EduStanfordNlpInternationalArabicProcessArabicLexer_zzUnpackTransWithNSString_withInt_withIntArray_(packed, offset, result);
}

+ (IOSIntArray *)zzUnpackAttribute {
  return EduStanfordNlpInternationalArabicProcessArabicLexer_zzUnpackAttribute();
}

+ (jint)zzUnpackAttributeWithNSString:(NSString *)packed
                              withInt:(jint)offset
                         withIntArray:(IOSIntArray *)result {
  return EduStanfordNlpInternationalArabicProcessArabicLexer_zzUnpackAttributeWithNSString_withInt_withIntArray_(packed, offset, result);
}

- (instancetype)initWithJavaIoReader:(JavaIoReader *)r
withEduStanfordNlpProcessLexedTokenFactory:(id<EduStanfordNlpProcessLexedTokenFactory>)tf
              withJavaUtilProperties:(JavaUtilProperties *)props {
  EduStanfordNlpInternationalArabicProcessArabicLexer_initWithJavaIoReader_withEduStanfordNlpProcessLexedTokenFactory_withJavaUtilProperties_(self, r, tf, props);
  return self;
}

- (void)setupNormalizationMap {
  EduStanfordNlpInternationalArabicProcessArabicLexer_setupNormalizationMap(self);
}

- (NSString *)normalizeTokenWithNSString:(NSString *)text
                             withBoolean:(jboolean)isWord {
  return EduStanfordNlpInternationalArabicProcessArabicLexer_normalizeTokenWithNSString_withBoolean_(self, text, isWord);
}

- (jboolean)isLengtheningWithNSString:(NSString *)text
                              withInt:(jint)pos {
  return EduStanfordNlpInternationalArabicProcessArabicLexer_isLengtheningWithNSString_withInt_(self, text, pos);
}

- (id)getNextWithNSString:(NSString *)txt
             withNSString:(NSString *)originalText {
  return EduStanfordNlpInternationalArabicProcessArabicLexer_getNextWithNSString_withNSString_(self, txt, originalText);
}

- (id)getNextWithBoolean:(jboolean)isWord {
  return EduStanfordNlpInternationalArabicProcessArabicLexer_getNextWithBoolean_(self, isWord);
}

- (id)getEllipsis {
  return EduStanfordNlpInternationalArabicProcessArabicLexer_getEllipsis(self);
}

- (instancetype)initWithJavaIoReader:(JavaIoReader *)inArg {
  EduStanfordNlpInternationalArabicProcessArabicLexer_initWithJavaIoReader_(self, inArg);
  return self;
}

- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  EduStanfordNlpInternationalArabicProcessArabicLexer_initWithJavaIoInputStream_(self, inArg);
  return self;
}

+ (IOSCharArray *)zzUnpackCMapWithNSString:(NSString *)packed {
  return EduStanfordNlpInternationalArabicProcessArabicLexer_zzUnpackCMapWithNSString_(packed);
}

- (jboolean)zzRefill {
  return EduStanfordNlpInternationalArabicProcessArabicLexer_zzRefill(self);
}

- (void)yyclose {
  zzAtEOF_ = true;
  zzEndRead_ = zzStartRead_;
  if (zzReader_ != nil) [zzReader_ close];
}

- (void)yyresetWithJavaIoReader:(JavaIoReader *)reader {
  zzReader_ = reader;
  zzAtBOL_ = true;
  zzAtEOF_ = false;
  zzEOFDone_ = false;
  zzEndRead_ = zzStartRead_ = 0;
  zzCurrentPos_ = zzMarkedPos_ = 0;
  yyline_ = yychar_ = yycolumn_ = 0;
  zzLexicalState_ = EduStanfordNlpInternationalArabicProcessArabicLexer_YYINITIAL;
  if (((IOSCharArray *) nil_chk(zzBuffer_))->size_ > EduStanfordNlpInternationalArabicProcessArabicLexer_ZZ_BUFFERSIZE) zzBuffer_ = [IOSCharArray newArrayWithLength:EduStanfordNlpInternationalArabicProcessArabicLexer_ZZ_BUFFERSIZE];
}

- (jint)yystate {
  return zzLexicalState_;
}

- (void)yybeginWithInt:(jint)newState {
  zzLexicalState_ = newState;
}

- (NSString *)yytext {
  return EduStanfordNlpInternationalArabicProcessArabicLexer_yytext(self);
}

- (jchar)yycharatWithInt:(jint)pos {
  return IOSCharArray_Get(nil_chk(zzBuffer_), zzStartRead_ + pos);
}

- (jint)yylength {
  return EduStanfordNlpInternationalArabicProcessArabicLexer_yylength(self);
}

- (void)zzScanErrorWithInt:(jint)errorCode {
  EduStanfordNlpInternationalArabicProcessArabicLexer_zzScanErrorWithInt_(self, errorCode);
}

- (void)yypushbackWithInt:(jint)number {
  if (number > EduStanfordNlpInternationalArabicProcessArabicLexer_yylength(self)) EduStanfordNlpInternationalArabicProcessArabicLexer_zzScanErrorWithInt_(self, EduStanfordNlpInternationalArabicProcessArabicLexer_ZZ_PUSHBACK_2BIG);
  zzMarkedPos_ -= number;
}

- (id)next {
  jint zzInput;
  jint zzAction;
  jint zzCurrentPosL;
  jint zzMarkedPosL;
  jint zzEndReadL = zzEndRead_;
  IOSCharArray *zzBufferL = zzBuffer_;
  IOSCharArray *zzCMapL = EduStanfordNlpInternationalArabicProcessArabicLexer_ZZ_CMAP;
  IOSIntArray *zzTransL = EduStanfordNlpInternationalArabicProcessArabicLexer_ZZ_TRANS;
  IOSIntArray *zzRowMapL = EduStanfordNlpInternationalArabicProcessArabicLexer_ZZ_ROWMAP;
  IOSIntArray *zzAttrL = EduStanfordNlpInternationalArabicProcessArabicLexer_ZZ_ATTRIBUTE;
  while (true) {
    zzMarkedPosL = zzMarkedPos_;
    yychar_ += zzMarkedPosL - zzStartRead_;
    zzAction = -1;
    zzCurrentPosL = zzCurrentPos_ = zzStartRead_ = zzMarkedPosL;
    zzState_ = IOSIntArray_Get(nil_chk(EduStanfordNlpInternationalArabicProcessArabicLexer_ZZ_LEXSTATE), zzLexicalState_);
    jint zzAttributes = IOSIntArray_Get(nil_chk(zzAttrL), zzState_);
    if ((zzAttributes & 1) == 1) {
      zzAction = zzState_;
    }
    {
      while (true) {
        if (zzCurrentPosL < zzEndReadL) zzInput = IOSCharArray_Get(nil_chk(zzBufferL), zzCurrentPosL++);
        else if (zzAtEOF_) {
          zzInput = EduStanfordNlpInternationalArabicProcessArabicLexer_YYEOF;
          goto break_zzForAction;
        }
        else {
          zzCurrentPos_ = zzCurrentPosL;
          zzMarkedPos_ = zzMarkedPosL;
          jboolean eof = EduStanfordNlpInternationalArabicProcessArabicLexer_zzRefill(self);
          zzCurrentPosL = zzCurrentPos_;
          zzMarkedPosL = zzMarkedPos_;
          zzBufferL = zzBuffer_;
          zzEndReadL = zzEndRead_;
          if (eof) {
            zzInput = EduStanfordNlpInternationalArabicProcessArabicLexer_YYEOF;
            goto break_zzForAction;
          }
          else {
            zzInput = IOSCharArray_Get(nil_chk(zzBufferL), zzCurrentPosL++);
          }
        }
        jint zzNext = IOSIntArray_Get(nil_chk(zzTransL), IOSIntArray_Get(nil_chk(zzRowMapL), zzState_) + IOSCharArray_Get(nil_chk(zzCMapL), zzInput));
        if (zzNext == -1) goto break_zzForAction;
        zzState_ = zzNext;
        zzAttributes = IOSIntArray_Get(zzAttrL, zzState_);
        if ((zzAttributes & 1) == 1) {
          zzAction = zzState_;
          zzMarkedPosL = zzCurrentPosL;
          if ((zzAttributes & 8) == 8) goto break_zzForAction;
        }
      }
    }
    break_zzForAction: ;
    zzMarkedPos_ = zzMarkedPosL;
    switch (zzAction < 0 ? zzAction : IOSIntArray_Get(nil_chk(EduStanfordNlpInternationalArabicProcessArabicLexer_ZZ_ACTION), zzAction)) {
      case 1:
      {
        (void) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printfWithNSString:@"Untokenizable: %s%n" withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ EduStanfordNlpInternationalArabicProcessArabicLexer_yytext(self) } count:1 type:NSObject_class_()]];
        return EduStanfordNlpInternationalArabicProcessArabicLexer_getNextWithBoolean_(self, true);
      }
      case 9:
      break;
      case 2:
      {
        if (tokenizeNLs_) {
          return EduStanfordNlpInternationalArabicProcessArabicLexer_getNextWithNSString_withNSString_(self, EduStanfordNlpInternationalArabicProcessArabicLexer_NEWLINE_TOKEN, EduStanfordNlpInternationalArabicProcessArabicLexer_yytext(self));
        }
      }
      case 10:
      break;
      case 3:
      {
      }
      case 11:
      break;
      case 4:
      {
        return EduStanfordNlpInternationalArabicProcessArabicLexer_getNextWithBoolean_(self, false);
      }
      case 12:
      break;
      case 5:
      {
        return EduStanfordNlpInternationalArabicProcessArabicLexer_getNextWithBoolean_(self, true);
      }
      case 13:
      break;
      case 6:
      {
        return EduStanfordNlpInternationalArabicProcessArabicLexer_getEllipsis(self);
      }
      case 14:
      break;
      case 7:
      {
        if (!removeProMarker_) return EduStanfordNlpInternationalArabicProcessArabicLexer_getNextWithBoolean_(self, false);
      }
      case 15:
      break;
      case 8:
      {
        if (removeProMarker_) {
          if (!removeSegMarker_) {
            return EduStanfordNlpInternationalArabicProcessArabicLexer_getNextWithNSString_withNSString_(self, @"-", EduStanfordNlpInternationalArabicProcessArabicLexer_yytext(self));
          }
        }
        else {
          return EduStanfordNlpInternationalArabicProcessArabicLexer_getNextWithBoolean_(self, false);
        }
      }
      case 16:
      break;
      default:
      if (zzInput == EduStanfordNlpInternationalArabicProcessArabicLexer_YYEOF && zzStartRead_ == zzCurrentPos_) {
        zzAtEOF_ = true;
        {
          return nil;
        }
      }
      else {
        EduStanfordNlpInternationalArabicProcessArabicLexer_zzScanErrorWithInt_(self, EduStanfordNlpInternationalArabicProcessArabicLexer_ZZ_NO_MATCH);
      }
    }
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[I", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 0, 1, -1, -1, -1, -1 },
    { NULL, "[I", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 2, 1, -1, -1, -1, -1 },
    { NULL, "[I", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 3, 1, -1, -1, -1, -1 },
    { NULL, "[I", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 4, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 7, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 9, 10, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, 11, 12, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, 11, 13, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 14, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 15, -1, -1, -1, -1 },
    { NULL, "[C", 0xa, 16, 17, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, 18, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, 18, -1, -1, -1 },
    { NULL, "V", 0x11, 19, 14, -1, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 20, 21, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "C", 0x11, 22, 21, -1, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 23, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 21, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, 18, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(zzUnpackAction);
  methods[1].selector = @selector(zzUnpackActionWithNSString:withInt:withIntArray:);
  methods[2].selector = @selector(zzUnpackRowMap);
  methods[3].selector = @selector(zzUnpackRowMapWithNSString:withInt:withIntArray:);
  methods[4].selector = @selector(zzUnpackTrans);
  methods[5].selector = @selector(zzUnpackTransWithNSString:withInt:withIntArray:);
  methods[6].selector = @selector(zzUnpackAttribute);
  methods[7].selector = @selector(zzUnpackAttributeWithNSString:withInt:withIntArray:);
  methods[8].selector = @selector(initWithJavaIoReader:withEduStanfordNlpProcessLexedTokenFactory:withJavaUtilProperties:);
  methods[9].selector = @selector(setupNormalizationMap);
  methods[10].selector = @selector(normalizeTokenWithNSString:withBoolean:);
  methods[11].selector = @selector(isLengtheningWithNSString:withInt:);
  methods[12].selector = @selector(getNextWithNSString:withNSString:);
  methods[13].selector = @selector(getNextWithBoolean:);
  methods[14].selector = @selector(getEllipsis);
  methods[15].selector = @selector(initWithJavaIoReader:);
  methods[16].selector = @selector(initWithJavaIoInputStream:);
  methods[17].selector = @selector(zzUnpackCMapWithNSString:);
  methods[18].selector = @selector(zzRefill);
  methods[19].selector = @selector(yyclose);
  methods[20].selector = @selector(yyresetWithJavaIoReader:);
  methods[21].selector = @selector(yystate);
  methods[22].selector = @selector(yybeginWithInt:);
  methods[23].selector = @selector(yytext);
  methods[24].selector = @selector(yycharatWithInt:);
  methods[25].selector = @selector(yylength);
  methods[26].selector = @selector(zzScanErrorWithInt:);
  methods[27].selector = @selector(yypushbackWithInt:);
  methods[28].selector = @selector(next);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "YYEOF", "I", .constantValue.asInt = EduStanfordNlpInternationalArabicProcessArabicLexer_YYEOF, 0x19, -1, -1, -1, -1 },
    { "ZZ_BUFFERSIZE", "I", .constantValue.asInt = EduStanfordNlpInternationalArabicProcessArabicLexer_ZZ_BUFFERSIZE, 0x1a, -1, -1, -1, -1 },
    { "YYINITIAL", "I", .constantValue.asInt = EduStanfordNlpInternationalArabicProcessArabicLexer_YYINITIAL, 0x19, -1, -1, -1, -1 },
    { "ZZ_LEXSTATE", "[I", .constantValue.asLong = 0, 0x1a, -1, 25, -1, -1 },
    { "ZZ_CMAP_PACKED", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 26, -1, -1 },
    { "ZZ_CMAP", "[C", .constantValue.asLong = 0, 0x1a, -1, 27, -1, -1 },
    { "ZZ_ACTION", "[I", .constantValue.asLong = 0, 0x1a, -1, 28, -1, -1 },
    { "ZZ_ACTION_PACKED_0", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 29, -1, -1 },
    { "ZZ_ROWMAP", "[I", .constantValue.asLong = 0, 0x1a, -1, 30, -1, -1 },
    { "ZZ_ROWMAP_PACKED_0", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 31, -1, -1 },
    { "ZZ_TRANS", "[I", .constantValue.asLong = 0, 0x1a, -1, 32, -1, -1 },
    { "ZZ_TRANS_PACKED_0", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 33, -1, -1 },
    { "ZZ_UNKNOWN_ERROR", "I", .constantValue.asInt = EduStanfordNlpInternationalArabicProcessArabicLexer_ZZ_UNKNOWN_ERROR, 0x1a, -1, -1, -1, -1 },
    { "ZZ_NO_MATCH", "I", .constantValue.asInt = EduStanfordNlpInternationalArabicProcessArabicLexer_ZZ_NO_MATCH, 0x1a, -1, -1, -1, -1 },
    { "ZZ_PUSHBACK_2BIG", "I", .constantValue.asInt = EduStanfordNlpInternationalArabicProcessArabicLexer_ZZ_PUSHBACK_2BIG, 0x1a, -1, -1, -1, -1 },
    { "ZZ_ERROR_MSG", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 34, -1, -1 },
    { "ZZ_ATTRIBUTE", "[I", .constantValue.asLong = 0, 0x1a, -1, 35, -1, -1 },
    { "ZZ_ATTRIBUTE_PACKED_0", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 36, -1, -1 },
    { "zzReader_", "LJavaIoReader;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "zzState_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "zzLexicalState_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "zzBuffer_", "[C", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "zzMarkedPos_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "zzCurrentPos_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "zzStartRead_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "zzEndRead_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "yyline_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "yychar_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "yycolumn_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "zzAtBOL_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "zzAtEOF_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "zzEOFDone_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "tokenFactory_", "LEduStanfordNlpProcessLexedTokenFactory;", .constantValue.asLong = 0, 0x2, -1, -1, 37, -1 },
    { "invertible_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "normArDigits_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "normArPunc_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "tokenizeNLs_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "NEWLINE_TOKEN", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 38, -1, -1 },
    { "useUTF8Ellipsis_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "normAlif_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "normYa_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "removeDiacritics_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "removeTatweel_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "removeQuranChars_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "removeProMarker_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "removeSegMarker_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "removeMorphMarker_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "removeLengthening_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "segmentationMarker_", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "atbEscaping_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "normMap_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 39, -1 },
  };
  static const void *ptrTable[] = { "zzUnpackAction", "LNSString;I[I", "zzUnpackRowMap", "zzUnpackTrans", "zzUnpackAttribute", "LJavaIoReader;LEduStanfordNlpProcessLexedTokenFactory;LJavaUtilProperties;", "(Ljava/io/Reader;Ledu/stanford/nlp/process/LexedTokenFactory<*>;Ljava/util/Properties;)V", "normalizeToken", "LNSString;Z", "isLengthening", "LNSString;I", "getNext", "LNSString;LNSString;", "Z", "LJavaIoReader;", "LJavaIoInputStream;", "zzUnpackCMap", "LNSString;", "LJavaIoIOException;", "yyreset", "yybegin", "I", "yycharat", "zzScanError", "yypushback", &EduStanfordNlpInternationalArabicProcessArabicLexer_ZZ_LEXSTATE, &EduStanfordNlpInternationalArabicProcessArabicLexer_ZZ_CMAP_PACKED, &EduStanfordNlpInternationalArabicProcessArabicLexer_ZZ_CMAP, &EduStanfordNlpInternationalArabicProcessArabicLexer_ZZ_ACTION, &EduStanfordNlpInternationalArabicProcessArabicLexer_ZZ_ACTION_PACKED_0, &EduStanfordNlpInternationalArabicProcessArabicLexer_ZZ_ROWMAP, &EduStanfordNlpInternationalArabicProcessArabicLexer_ZZ_ROWMAP_PACKED_0, &EduStanfordNlpInternationalArabicProcessArabicLexer_ZZ_TRANS, &EduStanfordNlpInternationalArabicProcessArabicLexer_ZZ_TRANS_PACKED_0, &EduStanfordNlpInternationalArabicProcessArabicLexer_ZZ_ERROR_MSG, &EduStanfordNlpInternationalArabicProcessArabicLexer_ZZ_ATTRIBUTE, &EduStanfordNlpInternationalArabicProcessArabicLexer_ZZ_ATTRIBUTE_PACKED_0, "Ledu/stanford/nlp/process/LexedTokenFactory<*>;", &EduStanfordNlpInternationalArabicProcessArabicLexer_NEWLINE_TOKEN, "Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpInternationalArabicProcessArabicLexer = { "ArabicLexer", "edu.stanford.nlp.international.arabic.process", ptrTable, methods, fields, 7, 0x0, 29, 51, -1, -1, -1, -1, -1 };
  return &_EduStanfordNlpInternationalArabicProcessArabicLexer;
}

+ (void)initialize {
  if (self == [EduStanfordNlpInternationalArabicProcessArabicLexer class]) {
    EduStanfordNlpInternationalArabicProcessArabicLexer_ZZ_LEXSTATE = [IOSIntArray newArrayWithInts:(jint[]){ 0, 0 } count:2];
    EduStanfordNlpInternationalArabicProcessArabicLexer_ZZ_CMAP = EduStanfordNlpInternationalArabicProcessArabicLexer_zzUnpackCMapWithNSString_(EduStanfordNlpInternationalArabicProcessArabicLexer_ZZ_CMAP_PACKED);
    EduStanfordNlpInternationalArabicProcessArabicLexer_ZZ_ACTION = EduStanfordNlpInternationalArabicProcessArabicLexer_zzUnpackAction();
    EduStanfordNlpInternationalArabicProcessArabicLexer_ZZ_ROWMAP = EduStanfordNlpInternationalArabicProcessArabicLexer_zzUnpackRowMap();
    EduStanfordNlpInternationalArabicProcessArabicLexer_ZZ_TRANS = EduStanfordNlpInternationalArabicProcessArabicLexer_zzUnpackTrans();
    EduStanfordNlpInternationalArabicProcessArabicLexer_ZZ_ERROR_MSG = [IOSObjectArray newArrayWithObjects:(id[]){ @"Unkown internal scanner error", @"Error: could not match input", @"Error: pushback value was too large" } count:3 type:NSString_class_()];
    EduStanfordNlpInternationalArabicProcessArabicLexer_ZZ_ATTRIBUTE = EduStanfordNlpInternationalArabicProcessArabicLexer_zzUnpackAttribute();
    J2OBJC_SET_INITIALIZED(EduStanfordNlpInternationalArabicProcessArabicLexer)
  }
}

@end

IOSIntArray *EduStanfordNlpInternationalArabicProcessArabicLexer_zzUnpackAction() {
  EduStanfordNlpInternationalArabicProcessArabicLexer_initialize();
  IOSIntArray *result = [IOSIntArray newArrayWithLength:141];
  jint offset = 0;
  offset = EduStanfordNlpInternationalArabicProcessArabicLexer_zzUnpackActionWithNSString_withInt_withIntArray_(EduStanfordNlpInternationalArabicProcessArabicLexer_ZZ_ACTION_PACKED_0, offset, result);
  return result;
}

jint EduStanfordNlpInternationalArabicProcessArabicLexer_zzUnpackActionWithNSString_withInt_withIntArray_(NSString *packed, jint offset, IOSIntArray *result) {
  EduStanfordNlpInternationalArabicProcessArabicLexer_initialize();
  jint i = 0;
  jint j = offset;
  jint l = ((jint) [((NSString *) nil_chk(packed)) length]);
  while (i < l) {
    jint count = [packed charAtWithInt:i++];
    jint value = [packed charAtWithInt:i++];
    do *IOSIntArray_GetRef(nil_chk(result), j++) = value;
    while (--count > 0);
  }
  return j;
}

IOSIntArray *EduStanfordNlpInternationalArabicProcessArabicLexer_zzUnpackRowMap() {
  EduStanfordNlpInternationalArabicProcessArabicLexer_initialize();
  IOSIntArray *result = [IOSIntArray newArrayWithLength:141];
  jint offset = 0;
  offset = EduStanfordNlpInternationalArabicProcessArabicLexer_zzUnpackRowMapWithNSString_withInt_withIntArray_(EduStanfordNlpInternationalArabicProcessArabicLexer_ZZ_ROWMAP_PACKED_0, offset, result);
  return result;
}

jint EduStanfordNlpInternationalArabicProcessArabicLexer_zzUnpackRowMapWithNSString_withInt_withIntArray_(NSString *packed, jint offset, IOSIntArray *result) {
  EduStanfordNlpInternationalArabicProcessArabicLexer_initialize();
  jint i = 0;
  jint j = offset;
  jint l = ((jint) [((NSString *) nil_chk(packed)) length]);
  while (i < l) {
    jint high = JreLShift32([packed charAtWithInt:i++], 16);
    *IOSIntArray_GetRef(nil_chk(result), j++) = high | [packed charAtWithInt:i++];
  }
  return j;
}

IOSIntArray *EduStanfordNlpInternationalArabicProcessArabicLexer_zzUnpackTrans() {
  EduStanfordNlpInternationalArabicProcessArabicLexer_initialize();
  IOSIntArray *result = [IOSIntArray newArrayWithLength:9044];
  jint offset = 0;
  offset = EduStanfordNlpInternationalArabicProcessArabicLexer_zzUnpackTransWithNSString_withInt_withIntArray_(EduStanfordNlpInternationalArabicProcessArabicLexer_ZZ_TRANS_PACKED_0, offset, result);
  return result;
}

jint EduStanfordNlpInternationalArabicProcessArabicLexer_zzUnpackTransWithNSString_withInt_withIntArray_(NSString *packed, jint offset, IOSIntArray *result) {
  EduStanfordNlpInternationalArabicProcessArabicLexer_initialize();
  jint i = 0;
  jint j = offset;
  jint l = ((jint) [((NSString *) nil_chk(packed)) length]);
  while (i < l) {
    jint count = [packed charAtWithInt:i++];
    jint value = [packed charAtWithInt:i++];
    value--;
    do *IOSIntArray_GetRef(nil_chk(result), j++) = value;
    while (--count > 0);
  }
  return j;
}

IOSIntArray *EduStanfordNlpInternationalArabicProcessArabicLexer_zzUnpackAttribute() {
  EduStanfordNlpInternationalArabicProcessArabicLexer_initialize();
  IOSIntArray *result = [IOSIntArray newArrayWithLength:141];
  jint offset = 0;
  offset = EduStanfordNlpInternationalArabicProcessArabicLexer_zzUnpackAttributeWithNSString_withInt_withIntArray_(EduStanfordNlpInternationalArabicProcessArabicLexer_ZZ_ATTRIBUTE_PACKED_0, offset, result);
  return result;
}

jint EduStanfordNlpInternationalArabicProcessArabicLexer_zzUnpackAttributeWithNSString_withInt_withIntArray_(NSString *packed, jint offset, IOSIntArray *result) {
  EduStanfordNlpInternationalArabicProcessArabicLexer_initialize();
  jint i = 0;
  jint j = offset;
  jint l = ((jint) [((NSString *) nil_chk(packed)) length]);
  while (i < l) {
    jint count = [packed charAtWithInt:i++];
    jint value = [packed charAtWithInt:i++];
    do *IOSIntArray_GetRef(nil_chk(result), j++) = value;
    while (--count > 0);
  }
  return j;
}

void EduStanfordNlpInternationalArabicProcessArabicLexer_initWithJavaIoReader_withEduStanfordNlpProcessLexedTokenFactory_withJavaUtilProperties_(EduStanfordNlpInternationalArabicProcessArabicLexer *self, JavaIoReader *r, id<EduStanfordNlpProcessLexedTokenFactory> tf, JavaUtilProperties *props) {
  EduStanfordNlpInternationalArabicProcessArabicLexer_initWithJavaIoReader_(self, r);
  self->tokenFactory_ = tf;
  self->tokenizeNLs_ = EduStanfordNlpUtilPropertiesUtils_getBoolWithJavaUtilProperties_withNSString_withBoolean_(props, @"tokenizeNLs", false);
  self->useUTF8Ellipsis_ = EduStanfordNlpUtilPropertiesUtils_getBoolWithJavaUtilProperties_withNSString_withBoolean_(props, @"useUTF8Ellipsis", false);
  self->invertible_ = EduStanfordNlpUtilPropertiesUtils_getBoolWithJavaUtilProperties_withNSString_withBoolean_(props, @"invertible", false);
  self->normArDigits_ = EduStanfordNlpUtilPropertiesUtils_getBoolWithJavaUtilProperties_withNSString_withBoolean_(props, @"normArDigits", false);
  self->normArPunc_ = EduStanfordNlpUtilPropertiesUtils_getBoolWithJavaUtilProperties_withNSString_withBoolean_(props, @"normArPunc", false);
  self->normAlif_ = EduStanfordNlpUtilPropertiesUtils_getBoolWithJavaUtilProperties_withNSString_withBoolean_(props, @"normAlif", false);
  self->normYa_ = EduStanfordNlpUtilPropertiesUtils_getBoolWithJavaUtilProperties_withNSString_withBoolean_(props, @"normYa", false);
  self->removeDiacritics_ = EduStanfordNlpUtilPropertiesUtils_getBoolWithJavaUtilProperties_withNSString_withBoolean_(props, @"removeDiacritics", false);
  self->removeTatweel_ = EduStanfordNlpUtilPropertiesUtils_getBoolWithJavaUtilProperties_withNSString_withBoolean_(props, @"removeTatweel", false);
  self->removeQuranChars_ = EduStanfordNlpUtilPropertiesUtils_getBoolWithJavaUtilProperties_withNSString_withBoolean_(props, @"removeQuranChars", false);
  self->removeProMarker_ = EduStanfordNlpUtilPropertiesUtils_getBoolWithJavaUtilProperties_withNSString_withBoolean_(props, @"removeProMarker", false);
  self->removeSegMarker_ = EduStanfordNlpUtilPropertiesUtils_getBoolWithJavaUtilProperties_withNSString_withBoolean_(props, @"removeSegMarker", false);
  self->removeMorphMarker_ = EduStanfordNlpUtilPropertiesUtils_getBoolWithJavaUtilProperties_withNSString_withBoolean_(props, @"removeMorphMarker", false);
  self->removeLengthening_ = EduStanfordNlpUtilPropertiesUtils_getBoolWithJavaUtilProperties_withNSString_withBoolean_(props, @"removeLengthening", false);
  self->atbEscaping_ = EduStanfordNlpUtilPropertiesUtils_getBoolWithJavaUtilProperties_withNSString_withBoolean_(props, @"atbEscaping", false);
  EduStanfordNlpInternationalArabicProcessArabicLexer_setupNormalizationMap(self);
}

EduStanfordNlpInternationalArabicProcessArabicLexer *new_EduStanfordNlpInternationalArabicProcessArabicLexer_initWithJavaIoReader_withEduStanfordNlpProcessLexedTokenFactory_withJavaUtilProperties_(JavaIoReader *r, id<EduStanfordNlpProcessLexedTokenFactory> tf, JavaUtilProperties *props) {
  J2OBJC_NEW_IMPL(EduStanfordNlpInternationalArabicProcessArabicLexer, initWithJavaIoReader_withEduStanfordNlpProcessLexedTokenFactory_withJavaUtilProperties_, r, tf, props)
}

EduStanfordNlpInternationalArabicProcessArabicLexer *create_EduStanfordNlpInternationalArabicProcessArabicLexer_initWithJavaIoReader_withEduStanfordNlpProcessLexedTokenFactory_withJavaUtilProperties_(JavaIoReader *r, id<EduStanfordNlpProcessLexedTokenFactory> tf, JavaUtilProperties *props) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpInternationalArabicProcessArabicLexer, initWithJavaIoReader_withEduStanfordNlpProcessLexedTokenFactory_withJavaUtilProperties_, r, tf, props)
}

void EduStanfordNlpInternationalArabicProcessArabicLexer_setupNormalizationMap(EduStanfordNlpInternationalArabicProcessArabicLexer *self) {
  self->normMap_ = EduStanfordNlpUtilGenerics_newHashMapWithInt_(200);
  (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u0600" withId:@"#"];
  (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u0601" withId:@""];
  (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u0602" withId:@""];
  (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u0603" withId:@""];
  (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u0606" withId:@"\u221b"];
  (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u0607" withId:@"\u221c"];
  (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u0608" withId:@""];
  (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u0609" withId:@"%"];
  (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u060a" withId:@"%"];
  (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u060b" withId:@""];
  (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u060e" withId:@""];
  (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u060f" withId:@""];
  (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u066e" withId:@"\u0628"];
  (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u066f" withId:@"\u0642"];
  (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u06cc" withId:@"\u0649"];
  (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u06d6" withId:@""];
  (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u06d7" withId:@""];
  (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u06d8" withId:@""];
  (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u06d9" withId:@""];
  (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u06da" withId:@""];
  (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u06db" withId:@""];
  (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u06dc" withId:@""];
  (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u06dd" withId:@""];
  (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u06de" withId:@""];
  (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u06df" withId:@""];
  (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u06e0" withId:@""];
  (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u06e1" withId:@""];
  (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u06e2" withId:@""];
  (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u06e3" withId:@""];
  (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u06e4" withId:@""];
  (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u06e5" withId:@""];
  (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u06e6" withId:@""];
  (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u06e7" withId:@""];
  (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u06e8" withId:@""];
  (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u06e9" withId:@""];
  (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u06ea" withId:@""];
  (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u06eb" withId:@""];
  (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u06ec" withId:@""];
  (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u06ed" withId:@""];
  if (self->normArDigits_) {
    (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u0660" withId:@"0"];
    (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u0661" withId:@"1"];
    (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u0662" withId:@"2"];
    (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u0663" withId:@"3"];
    (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u0664" withId:@"4"];
    (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u0665" withId:@"5"];
    (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u0666" withId:@"6"];
    (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u0667" withId:@"7"];
    (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u0668" withId:@"8"];
    (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u0669" withId:@"9"];
    (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u06f0" withId:@"0"];
    (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u06f1" withId:@"1"];
    (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u06f2" withId:@"2"];
    (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u06f3" withId:@"3"];
    (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u06f4" withId:@"4"];
    (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u06f5" withId:@"5"];
    (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u06f6" withId:@"6"];
    (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u06f7" withId:@"7"];
    (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u06f8" withId:@"8"];
    (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u06f9" withId:@"9"];
  }
  if (self->normArPunc_) {
    (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u00bb" withId:@"\""];
    (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u00ab" withId:@"\""];
    (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u060c" withId:@","];
    (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u060d" withId:@","];
    (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u061b" withId:@";"];
    (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u061e" withId:@"."];
    (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u061f" withId:@"?"];
    (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u066a" withId:@"%"];
    (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u066b" withId:@","];
    (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u066c" withId:@"'"];
    (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u066f" withId:@"*"];
    (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u06df" withId:@"."];
  }
  if (self->normAlif_) {
    (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u0622" withId:@"\u0627"];
    (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u0623" withId:@"\u0627"];
    (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u0625" withId:@"\u0627"];
    (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u0671" withId:@"\u0627"];
    (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u0672" withId:@"\u0627"];
    (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u0673" withId:@"\u0627"];
  }
  if (self->normYa_) {
    (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u064a" withId:@"\u0649"];
  }
  if (self->removeDiacritics_) {
    (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u064b" withId:@""];
    (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u064c" withId:@""];
    (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u064d" withId:@""];
    (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u064e" withId:@""];
    (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u064f" withId:@""];
    (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u0650" withId:@""];
    (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u0651" withId:@""];
    (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u0652" withId:@""];
    (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u0653" withId:@""];
    (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u0654" withId:@""];
    (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u0655" withId:@""];
    (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u0656" withId:@""];
    (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u0657" withId:@""];
    (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u0658" withId:@""];
    (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u0659" withId:@""];
    (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u065a" withId:@""];
    (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u065b" withId:@""];
    (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u065c" withId:@""];
    (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u065d" withId:@""];
    (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u065e" withId:@""];
    (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u0670" withId:@""];
  }
  if (self->removeTatweel_) {
    (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u0640" withId:@""];
    (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"_" withId:@""];
  }
  if (self->removeQuranChars_) {
    (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u0610" withId:@""];
    (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u0611" withId:@""];
    (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u0612" withId:@""];
    (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u0613" withId:@""];
    (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u0614" withId:@""];
    (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u0615" withId:@""];
    (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u0616" withId:@""];
    (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u0617" withId:@""];
    (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u0618" withId:@""];
    (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u0619" withId:@""];
    (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"\u061a" withId:@""];
  }
  if (self->atbEscaping_) {
    (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@"(" withId:@"-LRB-"];
    (void) [((id<JavaUtilMap>) nil_chk(self->normMap_)) putWithId:@")" withId:@"-RRB-"];
  }
}

NSString *EduStanfordNlpInternationalArabicProcessArabicLexer_normalizeTokenWithNSString_withBoolean_(EduStanfordNlpInternationalArabicProcessArabicLexer *self, NSString *text, jboolean isWord) {
  if (isWord && self->removeSegMarker_) {
    text = [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(self->segmentationMarker_)) matcherWithJavaLangCharSequence:text])) replaceAllWithNSString:@""];
  }
  jint len = ((jint) [((NSString *) nil_chk(text)) length]);
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_initWithInt_(len);
  for (jint i = 0; i < len; ++i) {
    NSString *thisChar = NSString_valueOfChar_([text charAtWithInt:i]);
    if (isWord && self->removeMorphMarker_ && [((NSString *) nil_chk(thisChar)) isEqual:@"+"]) {
      continue;
    }
    if (self->removeLengthening_ && EduStanfordNlpInternationalArabicProcessArabicLexer_isLengtheningWithNSString_withInt_(self, text, i)) {
      continue;
    }
    if ([((id<JavaUtilMap>) nil_chk(self->normMap_)) containsKeyWithId:thisChar]) {
      thisChar = [((id<JavaUtilMap>) nil_chk(self->normMap_)) getWithId:thisChar];
    }
    if (((jint) [((NSString *) nil_chk(thisChar)) length]) > 0) {
      (void) [sb appendWithNSString:thisChar];
    }
  }
  return [sb description];
}

jboolean EduStanfordNlpInternationalArabicProcessArabicLexer_isLengtheningWithNSString_withInt_(EduStanfordNlpInternationalArabicProcessArabicLexer *self, NSString *text, jint pos) {
  if (pos == 0) return false;
  NSString *thisChar = NSString_valueOfChar_([((NSString *) nil_chk(text)) charAtWithInt:pos]);
  if (![((NSString *) nil_chk(thisChar)) isEqual:NSString_valueOfChar_([text charAtWithInt:pos - 1])]) return false;
  if (pos < ((jint) [text length]) - 1 && [thisChar isEqual:NSString_valueOfChar_([text charAtWithInt:pos + 1])]) return true;
  if (pos >= 2 && [thisChar isEqual:NSString_valueOfChar_([text charAtWithInt:pos - 2])]) return true;
  return false;
}

id EduStanfordNlpInternationalArabicProcessArabicLexer_getNextWithNSString_withNSString_(EduStanfordNlpInternationalArabicProcessArabicLexer *self, NSString *txt, NSString *originalText) {
  if (self->tokenFactory_ == nil) {
    @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$", [[self getClass] getName], @": Token factory is null."));
  }
  if (self->invertible_) {
    EduStanfordNlpLingCoreLabel *word = (EduStanfordNlpLingCoreLabel *) cast_chk([self->tokenFactory_ makeTokenWithNSString:txt withInt:self->yychar_ withInt:EduStanfordNlpInternationalArabicProcessArabicLexer_yylength(self)], [EduStanfordNlpLingCoreLabel class]);
    (void) [((EduStanfordNlpLingCoreLabel *) nil_chk(word)) setWithIOSClass:EduStanfordNlpLingCoreAnnotations_OriginalTextAnnotation_class_() withId:originalText];
    return word;
  }
  else {
    return [self->tokenFactory_ makeTokenWithNSString:txt withInt:self->yychar_ withInt:EduStanfordNlpInternationalArabicProcessArabicLexer_yylength(self)];
  }
}

id EduStanfordNlpInternationalArabicProcessArabicLexer_getNextWithBoolean_(EduStanfordNlpInternationalArabicProcessArabicLexer *self, jboolean isWord) {
  NSString *text = EduStanfordNlpInternationalArabicProcessArabicLexer_yytext(self);
  NSString *normText = EduStanfordNlpInternationalArabicProcessArabicLexer_normalizeTokenWithNSString_withBoolean_(self, text, isWord);
  return EduStanfordNlpInternationalArabicProcessArabicLexer_getNextWithNSString_withNSString_(self, normText, text);
}

id EduStanfordNlpInternationalArabicProcessArabicLexer_getEllipsis(EduStanfordNlpInternationalArabicProcessArabicLexer *self) {
  NSString *ellipsisString = self->useUTF8Ellipsis_ ? @"\u2026" : @"...";
  return EduStanfordNlpInternationalArabicProcessArabicLexer_getNextWithNSString_withNSString_(self, ellipsisString, EduStanfordNlpInternationalArabicProcessArabicLexer_yytext(self));
}

void EduStanfordNlpInternationalArabicProcessArabicLexer_initWithJavaIoReader_(EduStanfordNlpInternationalArabicProcessArabicLexer *self, JavaIoReader *inArg) {
  NSObject_init(self);
  self->zzLexicalState_ = EduStanfordNlpInternationalArabicProcessArabicLexer_YYINITIAL;
  self->zzBuffer_ = [IOSCharArray newArrayWithLength:EduStanfordNlpInternationalArabicProcessArabicLexer_ZZ_BUFFERSIZE];
  self->zzAtBOL_ = true;
  self->segmentationMarker_ = JavaUtilRegexPattern_compileWithNSString_(@"^-+|-+$");
  self->zzReader_ = inArg;
}

EduStanfordNlpInternationalArabicProcessArabicLexer *new_EduStanfordNlpInternationalArabicProcessArabicLexer_initWithJavaIoReader_(JavaIoReader *inArg) {
  J2OBJC_NEW_IMPL(EduStanfordNlpInternationalArabicProcessArabicLexer, initWithJavaIoReader_, inArg)
}

EduStanfordNlpInternationalArabicProcessArabicLexer *create_EduStanfordNlpInternationalArabicProcessArabicLexer_initWithJavaIoReader_(JavaIoReader *inArg) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpInternationalArabicProcessArabicLexer, initWithJavaIoReader_, inArg)
}

void EduStanfordNlpInternationalArabicProcessArabicLexer_initWithJavaIoInputStream_(EduStanfordNlpInternationalArabicProcessArabicLexer *self, JavaIoInputStream *inArg) {
  EduStanfordNlpInternationalArabicProcessArabicLexer_initWithJavaIoReader_(self, new_JavaIoInputStreamReader_initWithJavaIoInputStream_withJavaNioCharsetCharset_(inArg, JavaNioCharsetCharset_forNameWithNSString_(@"UTF-8")));
}

EduStanfordNlpInternationalArabicProcessArabicLexer *new_EduStanfordNlpInternationalArabicProcessArabicLexer_initWithJavaIoInputStream_(JavaIoInputStream *inArg) {
  J2OBJC_NEW_IMPL(EduStanfordNlpInternationalArabicProcessArabicLexer, initWithJavaIoInputStream_, inArg)
}

EduStanfordNlpInternationalArabicProcessArabicLexer *create_EduStanfordNlpInternationalArabicProcessArabicLexer_initWithJavaIoInputStream_(JavaIoInputStream *inArg) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpInternationalArabicProcessArabicLexer, initWithJavaIoInputStream_, inArg)
}

IOSCharArray *EduStanfordNlpInternationalArabicProcessArabicLexer_zzUnpackCMapWithNSString_(NSString *packed) {
  EduStanfordNlpInternationalArabicProcessArabicLexer_initialize();
  IOSCharArray *map = [IOSCharArray newArrayWithLength:(jint) 0x10000];
  jint i = 0;
  jint j = 0;
  while (i < 1960) {
    jint count = [((NSString *) nil_chk(packed)) charAtWithInt:i++];
    jchar value = [packed charAtWithInt:i++];
    do *IOSCharArray_GetRef(map, j++) = value;
    while (--count > 0);
  }
  return map;
}

jboolean EduStanfordNlpInternationalArabicProcessArabicLexer_zzRefill(EduStanfordNlpInternationalArabicProcessArabicLexer *self) {
  if (self->zzStartRead_ > 0) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->zzBuffer_, self->zzStartRead_, self->zzBuffer_, 0, self->zzEndRead_ - self->zzStartRead_);
    self->zzEndRead_ -= self->zzStartRead_;
    self->zzCurrentPos_ -= self->zzStartRead_;
    self->zzMarkedPos_ -= self->zzStartRead_;
    self->zzStartRead_ = 0;
  }
  if (self->zzCurrentPos_ >= ((IOSCharArray *) nil_chk(self->zzBuffer_))->size_) {
    IOSCharArray *newBuffer = [IOSCharArray newArrayWithLength:self->zzCurrentPos_ * 2];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->zzBuffer_, 0, newBuffer, 0, self->zzBuffer_->size_);
    self->zzBuffer_ = newBuffer;
  }
  jint numRead = [((JavaIoReader *) nil_chk(self->zzReader_)) readWithCharArray:self->zzBuffer_ withInt:self->zzEndRead_ withInt:self->zzBuffer_->size_ - self->zzEndRead_];
  if (numRead > 0) {
    self->zzEndRead_ += numRead;
    return false;
  }
  if (numRead == 0) {
    jint c = [((JavaIoReader *) nil_chk(self->zzReader_)) read];
    if (c == -1) {
      return true;
    }
    else {
      *IOSCharArray_GetRef(nil_chk(self->zzBuffer_), self->zzEndRead_++) = (jchar) c;
      return false;
    }
  }
  return true;
}

NSString *EduStanfordNlpInternationalArabicProcessArabicLexer_yytext(EduStanfordNlpInternationalArabicProcessArabicLexer *self) {
  return [NSString stringWithCharacters:self->zzBuffer_ offset:self->zzStartRead_ length:self->zzMarkedPos_ - self->zzStartRead_];
}

jint EduStanfordNlpInternationalArabicProcessArabicLexer_yylength(EduStanfordNlpInternationalArabicProcessArabicLexer *self) {
  return self->zzMarkedPos_ - self->zzStartRead_;
}

void EduStanfordNlpInternationalArabicProcessArabicLexer_zzScanErrorWithInt_(EduStanfordNlpInternationalArabicProcessArabicLexer *self, jint errorCode) {
  NSString *message;
  @try {
    message = IOSObjectArray_Get(nil_chk(EduStanfordNlpInternationalArabicProcessArabicLexer_ZZ_ERROR_MSG), errorCode);
  }
  @catch (JavaLangArrayIndexOutOfBoundsException *e) {
    message = IOSObjectArray_Get(EduStanfordNlpInternationalArabicProcessArabicLexer_ZZ_ERROR_MSG, EduStanfordNlpInternationalArabicProcessArabicLexer_ZZ_UNKNOWN_ERROR);
  }
  @throw new_JavaLangError_initWithNSString_(message);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpInternationalArabicProcessArabicLexer)
