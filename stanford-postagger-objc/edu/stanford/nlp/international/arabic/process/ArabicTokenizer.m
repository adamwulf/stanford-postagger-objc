//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/international/arabic/process/ArabicTokenizer.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/international/arabic/process/ArabicLexer.h"
#include "edu/stanford/nlp/international/arabic/process/ArabicTokenizer.h"
#include "edu/stanford/nlp/io/RuntimeIOException.h"
#include "edu/stanford/nlp/ling/CoreLabel.h"
#include "edu/stanford/nlp/ling/HasWord.h"
#include "edu/stanford/nlp/process/AbstractTokenizer.h"
#include "edu/stanford/nlp/process/CoreLabelTokenFactory.h"
#include "edu/stanford/nlp/process/LexedTokenFactory.h"
#include "edu/stanford/nlp/process/Tokenizer.h"
#include "edu/stanford/nlp/process/TokenizerFactory.h"
#include "edu/stanford/nlp/util/StringUtils.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/InputStreamReader.h"
#include "java/io/PrintStream.h"
#include "java/io/Reader.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "java/util/Iterator.h"
#include "java/util/Properties.h"
#include "java/util/Set.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface EduStanfordNlpInternationalArabicProcessArabicTokenizer () {
 @public
  EduStanfordNlpInternationalArabicProcessArabicLexer *lexer_;
}

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpInternationalArabicProcessArabicTokenizer, lexer_, EduStanfordNlpInternationalArabicProcessArabicLexer *)

inline JavaUtilProperties *EduStanfordNlpInternationalArabicProcessArabicTokenizer_get_atbOptions();
static JavaUtilProperties *EduStanfordNlpInternationalArabicProcessArabicTokenizer_atbOptions;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpInternationalArabicProcessArabicTokenizer, atbOptions, JavaUtilProperties *)

@interface EduStanfordNlpInternationalArabicProcessArabicTokenizer_ArabicTokenizerFactory ()

- (instancetype)initWithEduStanfordNlpProcessLexedTokenFactory:(id<EduStanfordNlpProcessLexedTokenFactory>)factory;

@end

inline jlong EduStanfordNlpInternationalArabicProcessArabicTokenizer_ArabicTokenizerFactory_get_serialVersionUID();
#define EduStanfordNlpInternationalArabicProcessArabicTokenizer_ArabicTokenizerFactory_serialVersionUID 946818805507187330LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpInternationalArabicProcessArabicTokenizer_ArabicTokenizerFactory, serialVersionUID, jlong)

__attribute__((unused)) static void EduStanfordNlpInternationalArabicProcessArabicTokenizer_ArabicTokenizerFactory_initWithEduStanfordNlpProcessLexedTokenFactory_(EduStanfordNlpInternationalArabicProcessArabicTokenizer_ArabicTokenizerFactory *self, id<EduStanfordNlpProcessLexedTokenFactory> factory);

__attribute__((unused)) static EduStanfordNlpInternationalArabicProcessArabicTokenizer_ArabicTokenizerFactory *new_EduStanfordNlpInternationalArabicProcessArabicTokenizer_ArabicTokenizerFactory_initWithEduStanfordNlpProcessLexedTokenFactory_(id<EduStanfordNlpProcessLexedTokenFactory> factory) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpInternationalArabicProcessArabicTokenizer_ArabicTokenizerFactory *create_EduStanfordNlpInternationalArabicProcessArabicTokenizer_ArabicTokenizerFactory_initWithEduStanfordNlpProcessLexedTokenFactory_(id<EduStanfordNlpProcessLexedTokenFactory> factory);

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpInternationalArabicProcessArabicTokenizer)

@implementation EduStanfordNlpInternationalArabicProcessArabicTokenizer

+ (EduStanfordNlpInternationalArabicProcessArabicTokenizer *)newArabicTokenizerWithJavaIoReader:(JavaIoReader *)r
                                                                         withJavaUtilProperties:(JavaUtilProperties *)lexerProperties {
  return EduStanfordNlpInternationalArabicProcessArabicTokenizer_newArabicTokenizerWithJavaIoReader_withJavaUtilProperties_(r, lexerProperties);
}

- (instancetype)initWithJavaIoReader:(JavaIoReader *)r
withEduStanfordNlpProcessLexedTokenFactory:(id<EduStanfordNlpProcessLexedTokenFactory>)tf
              withJavaUtilProperties:(JavaUtilProperties *)lexerProperties {
  EduStanfordNlpInternationalArabicProcessArabicTokenizer_initWithJavaIoReader_withEduStanfordNlpProcessLexedTokenFactory_withJavaUtilProperties_(self, r, tf, lexerProperties);
  return self;
}

- (id<EduStanfordNlpLingHasWord>)getNext {
  @try {
    id<EduStanfordNlpLingHasWord> nextToken = nil;
    do {
      nextToken = (id<EduStanfordNlpLingHasWord>) cast_check([((EduStanfordNlpInternationalArabicProcessArabicLexer *) nil_chk(lexer_)) next], EduStanfordNlpLingHasWord_class_());
    }
    while (nextToken != nil && ((jint) [((NSString *) nil_chk([nextToken word])) length]) == 0);
    return nextToken;
  }
  @catch (JavaIoIOException *e) {
    @throw new_EduStanfordNlpIoRuntimeIOException_initWithNSException_(e);
  }
}

+ (id<EduStanfordNlpProcessTokenizerFactory>)factory {
  return EduStanfordNlpInternationalArabicProcessArabicTokenizer_factory();
}

+ (id<EduStanfordNlpProcessTokenizerFactory>)atbFactory {
  return EduStanfordNlpInternationalArabicProcessArabicTokenizer_atbFactory();
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  EduStanfordNlpInternationalArabicProcessArabicTokenizer_mainWithNSStringArray_(args);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LEduStanfordNlpInternationalArabicProcessArabicTokenizer;", 0x9, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, 4, -1, -1 },
    { NULL, "LEduStanfordNlpLingHasWord;", 0x4, -1, -1, -1, 5, -1, -1 },
    { NULL, "LEduStanfordNlpProcessTokenizerFactory;", 0x9, -1, -1, -1, 6, -1, -1 },
    { NULL, "LEduStanfordNlpProcessTokenizerFactory;", 0x9, -1, -1, -1, 6, -1, -1 },
    { NULL, "V", 0x9, 7, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(newArabicTokenizerWithJavaIoReader:withJavaUtilProperties:);
  methods[1].selector = @selector(initWithJavaIoReader:withEduStanfordNlpProcessLexedTokenFactory:withJavaUtilProperties:);
  methods[2].selector = @selector(getNext);
  methods[3].selector = @selector(factory);
  methods[4].selector = @selector(atbFactory);
  methods[5].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "lexer_", "LEduStanfordNlpInternationalArabicProcessArabicLexer;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "atbOptions", "LJavaUtilProperties;", .constantValue.asLong = 0, 0x1a, -1, 9, -1, -1 },
  };
  static const void *ptrTable[] = { "newArabicTokenizer", "LJavaIoReader;LJavaUtilProperties;", "(Ljava/io/Reader;Ljava/util/Properties;)Ledu/stanford/nlp/international/arabic/process/ArabicTokenizer<Ledu/stanford/nlp/ling/CoreLabel;>;", "LJavaIoReader;LEduStanfordNlpProcessLexedTokenFactory;LJavaUtilProperties;", "(Ljava/io/Reader;Ledu/stanford/nlp/process/LexedTokenFactory<TT;>;Ljava/util/Properties;)V", "()TT;", "()Ledu/stanford/nlp/process/TokenizerFactory<Ledu/stanford/nlp/ling/CoreLabel;>;", "main", "[LNSString;", &EduStanfordNlpInternationalArabicProcessArabicTokenizer_atbOptions, "LEduStanfordNlpInternationalArabicProcessArabicTokenizer_ArabicTokenizerFactory;", "<T::Ledu/stanford/nlp/ling/HasWord;>Ledu/stanford/nlp/process/AbstractTokenizer<TT;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpInternationalArabicProcessArabicTokenizer = { "ArabicTokenizer", "edu.stanford.nlp.international.arabic.process", ptrTable, methods, fields, 7, 0x1, 6, 2, -1, 10, -1, 11, -1 };
  return &_EduStanfordNlpInternationalArabicProcessArabicTokenizer;
}

+ (void)initialize {
  if (self == [EduStanfordNlpInternationalArabicProcessArabicTokenizer class]) {
    EduStanfordNlpInternationalArabicProcessArabicTokenizer_atbOptions = new_JavaUtilProperties_init();
    {
      NSString *optionsStr = @"normArDigits,normArPunc,normAlif,removeDiacritics,removeTatweel,removeQuranChars";
      IOSObjectArray *optionToks = [optionsStr split:@","];
      {
        IOSObjectArray *a__ = optionToks;
        NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
        NSString * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          NSString *option = *b__++;
          (void) [((JavaUtilProperties *) nil_chk(EduStanfordNlpInternationalArabicProcessArabicTokenizer_atbOptions)) setPropertyWithNSString:option withNSString:@"true"];
        }
      }
    }
    J2OBJC_SET_INITIALIZED(EduStanfordNlpInternationalArabicProcessArabicTokenizer)
  }
}

@end

EduStanfordNlpInternationalArabicProcessArabicTokenizer *EduStanfordNlpInternationalArabicProcessArabicTokenizer_newArabicTokenizerWithJavaIoReader_withJavaUtilProperties_(JavaIoReader *r, JavaUtilProperties *lexerProperties) {
  EduStanfordNlpInternationalArabicProcessArabicTokenizer_initialize();
  return new_EduStanfordNlpInternationalArabicProcessArabicTokenizer_initWithJavaIoReader_withEduStanfordNlpProcessLexedTokenFactory_withJavaUtilProperties_(r, new_EduStanfordNlpProcessCoreLabelTokenFactory_init(), lexerProperties);
}

void EduStanfordNlpInternationalArabicProcessArabicTokenizer_initWithJavaIoReader_withEduStanfordNlpProcessLexedTokenFactory_withJavaUtilProperties_(EduStanfordNlpInternationalArabicProcessArabicTokenizer *self, JavaIoReader *r, id<EduStanfordNlpProcessLexedTokenFactory> tf, JavaUtilProperties *lexerProperties) {
  EduStanfordNlpProcessAbstractTokenizer_init(self);
  self->lexer_ = new_EduStanfordNlpInternationalArabicProcessArabicLexer_initWithJavaIoReader_withEduStanfordNlpProcessLexedTokenFactory_withJavaUtilProperties_(r, tf, lexerProperties);
}

EduStanfordNlpInternationalArabicProcessArabicTokenizer *new_EduStanfordNlpInternationalArabicProcessArabicTokenizer_initWithJavaIoReader_withEduStanfordNlpProcessLexedTokenFactory_withJavaUtilProperties_(JavaIoReader *r, id<EduStanfordNlpProcessLexedTokenFactory> tf, JavaUtilProperties *lexerProperties) {
  J2OBJC_NEW_IMPL(EduStanfordNlpInternationalArabicProcessArabicTokenizer, initWithJavaIoReader_withEduStanfordNlpProcessLexedTokenFactory_withJavaUtilProperties_, r, tf, lexerProperties)
}

EduStanfordNlpInternationalArabicProcessArabicTokenizer *create_EduStanfordNlpInternationalArabicProcessArabicTokenizer_initWithJavaIoReader_withEduStanfordNlpProcessLexedTokenFactory_withJavaUtilProperties_(JavaIoReader *r, id<EduStanfordNlpProcessLexedTokenFactory> tf, JavaUtilProperties *lexerProperties) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpInternationalArabicProcessArabicTokenizer, initWithJavaIoReader_withEduStanfordNlpProcessLexedTokenFactory_withJavaUtilProperties_, r, tf, lexerProperties)
}

id<EduStanfordNlpProcessTokenizerFactory> EduStanfordNlpInternationalArabicProcessArabicTokenizer_factory() {
  EduStanfordNlpInternationalArabicProcessArabicTokenizer_initialize();
  return EduStanfordNlpInternationalArabicProcessArabicTokenizer_ArabicTokenizerFactory_newTokenizerFactory();
}

id<EduStanfordNlpProcessTokenizerFactory> EduStanfordNlpInternationalArabicProcessArabicTokenizer_atbFactory() {
  EduStanfordNlpInternationalArabicProcessArabicTokenizer_initialize();
  id<EduStanfordNlpProcessTokenizerFactory> tf = EduStanfordNlpInternationalArabicProcessArabicTokenizer_ArabicTokenizerFactory_newTokenizerFactory();
  for (NSString * __strong option in nil_chk([((JavaUtilProperties *) nil_chk(EduStanfordNlpInternationalArabicProcessArabicTokenizer_atbOptions)) stringPropertyNames])) {
    [((id<EduStanfordNlpProcessTokenizerFactory>) nil_chk(tf)) setOptionsWithNSString:option];
  }
  return tf;
}

void EduStanfordNlpInternationalArabicProcessArabicTokenizer_mainWithNSStringArray_(IOSObjectArray *args) {
  EduStanfordNlpInternationalArabicProcessArabicTokenizer_initialize();
  if (((IOSObjectArray *) nil_chk(args))->size_ > 0 && [((NSString *) nil_chk(IOSObjectArray_Get(args, 0))) contains:@"help"]) {
    (void) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printfWithNSString:@"Usage: java %s [OPTIONS] < file%n" withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ [EduStanfordNlpInternationalArabicProcessArabicTokenizer_class_() getName] } count:1 type:NSObject_class_()]];
    (void) [JreLoadStatic(JavaLangSystem, err) printfWithNSString:@"%nOptions:%n" withNSObjectArray:[IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]];
    [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:@"   -help : Print this message. See javadocs for all normalization options."];
    [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:@"   -atb  : Tokenization for the parsing experiments in Green and Manning (2010)"];
    JavaLangSystem_exitWithInt_(-1);
  }
  JavaUtilProperties *tokenizerOptions = EduStanfordNlpUtilStringUtils_argsToPropertiesWithNSStringArray_(args);
  id<EduStanfordNlpProcessTokenizerFactory> tf = [((JavaUtilProperties *) nil_chk(tokenizerOptions)) containsKeyWithId:@"atb"] ? EduStanfordNlpInternationalArabicProcessArabicTokenizer_atbFactory() : EduStanfordNlpInternationalArabicProcessArabicTokenizer_factory();
  for (NSString * __strong option in nil_chk([tokenizerOptions stringPropertyNames])) {
    [tf setOptionsWithNSString:option];
  }
  [tf setOptionsWithNSString:@"tokenizeNLs"];
  jint nLines = 0;
  jint nTokens = 0;
  @try {
    NSString *encoding = @"UTF-8";
    id<EduStanfordNlpProcessTokenizer> tokenizer = [tf getTokenizerWithJavaIoReader:new_JavaIoInputStreamReader_initWithJavaIoInputStream_withNSString_(JreLoadStatic(JavaLangSystem, in), encoding)];
    jboolean printSpace = false;
    while ([((id<EduStanfordNlpProcessTokenizer>) nil_chk(tokenizer)) hasNext]) {
      ++nTokens;
      NSString *word = [((EduStanfordNlpLingCoreLabel *) nil_chk([tokenizer next])) word];
      if ([((NSString *) nil_chk(word)) isEqual:EduStanfordNlpInternationalArabicProcessArabicLexer_NEWLINE_TOKEN]) {
        ++nLines;
        printSpace = false;
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) println];
      }
      else {
        if (printSpace) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printWithNSString:@" "];
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printWithNSString:word];
        printSpace = true;
      }
    }
  }
  @catch (JavaIoUnsupportedEncodingException *e) {
    [((JavaIoUnsupportedEncodingException *) nil_chk(e)) printStackTrace];
  }
  (void) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printfWithNSString:@"Done! Tokenized %d lines (%d tokens)%n" withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(nLines), JavaLangInteger_valueOfWithInt_(nTokens) } count:2 type:NSObject_class_()]];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpInternationalArabicProcessArabicTokenizer)

@implementation EduStanfordNlpInternationalArabicProcessArabicTokenizer_ArabicTokenizerFactory

+ (id<EduStanfordNlpProcessTokenizerFactory>)newTokenizerFactory {
  return EduStanfordNlpInternationalArabicProcessArabicTokenizer_ArabicTokenizerFactory_newTokenizerFactory();
}

- (instancetype)initWithEduStanfordNlpProcessLexedTokenFactory:(id<EduStanfordNlpProcessLexedTokenFactory>)factory {
  EduStanfordNlpInternationalArabicProcessArabicTokenizer_ArabicTokenizerFactory_initWithEduStanfordNlpProcessLexedTokenFactory_(self, factory);
  return self;
}

- (id<JavaUtilIterator>)getIteratorWithJavaIoReader:(JavaIoReader *)r {
  return [self getTokenizerWithJavaIoReader:r];
}

- (id<EduStanfordNlpProcessTokenizer>)getTokenizerWithJavaIoReader:(JavaIoReader *)r {
  return new_EduStanfordNlpInternationalArabicProcessArabicTokenizer_initWithJavaIoReader_withEduStanfordNlpProcessLexedTokenFactory_withJavaUtilProperties_(r, factory_, lexerProperties_);
}

- (void)setOptionsWithNSString:(NSString *)options {
  IOSObjectArray *optionList = [((NSString *) nil_chk(options)) split:@","];
  {
    IOSObjectArray *a__ = optionList;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *option = *b__++;
      (void) [((JavaUtilProperties *) nil_chk(lexerProperties_)) putWithId:option withId:@"true"];
    }
  }
}

- (id<EduStanfordNlpProcessTokenizer>)getTokenizerWithJavaIoReader:(JavaIoReader *)r
                                                      withNSString:(NSString *)extraOptions {
  [self setOptionsWithNSString:extraOptions];
  return [self getTokenizerWithJavaIoReader:r];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LEduStanfordNlpProcessTokenizerFactory;", 0x9, -1, -1, -1, 0, -1, -1 },
    { NULL, NULL, 0x2, -1, 1, -1, 2, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "LEduStanfordNlpProcessTokenizer;", 0x1, 6, 4, -1, 7, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpProcessTokenizer;", 0x1, 6, 10, -1, 11, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(newTokenizerFactory);
  methods[1].selector = @selector(initWithEduStanfordNlpProcessLexedTokenFactory:);
  methods[2].selector = @selector(getIteratorWithJavaIoReader:);
  methods[3].selector = @selector(getTokenizerWithJavaIoReader:);
  methods[4].selector = @selector(setOptionsWithNSString:);
  methods[5].selector = @selector(getTokenizerWithJavaIoReader:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpInternationalArabicProcessArabicTokenizer_ArabicTokenizerFactory_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "factory_", "LEduStanfordNlpProcessLexedTokenFactory;", .constantValue.asLong = 0, 0x14, -1, -1, 12, -1 },
    { "lexerProperties_", "LJavaUtilProperties;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "()Ledu/stanford/nlp/process/TokenizerFactory<Ledu/stanford/nlp/ling/CoreLabel;>;", "LEduStanfordNlpProcessLexedTokenFactory;", "(Ledu/stanford/nlp/process/LexedTokenFactory<TT;>;)V", "getIterator", "LJavaIoReader;", "(Ljava/io/Reader;)Ljava/util/Iterator<TT;>;", "getTokenizer", "(Ljava/io/Reader;)Ledu/stanford/nlp/process/Tokenizer<TT;>;", "setOptions", "LNSString;", "LJavaIoReader;LNSString;", "(Ljava/io/Reader;Ljava/lang/String;)Ledu/stanford/nlp/process/Tokenizer<TT;>;", "Ledu/stanford/nlp/process/LexedTokenFactory<TT;>;", "LEduStanfordNlpInternationalArabicProcessArabicTokenizer;", "<T::Ledu/stanford/nlp/ling/HasWord;>Ljava/lang/Object;Ledu/stanford/nlp/process/TokenizerFactory<TT;>;Ljava/io/Serializable;" };
  static const J2ObjcClassInfo _EduStanfordNlpInternationalArabicProcessArabicTokenizer_ArabicTokenizerFactory = { "ArabicTokenizerFactory", "edu.stanford.nlp.international.arabic.process", ptrTable, methods, fields, 7, 0x9, 6, 3, 13, -1, -1, 14, -1 };
  return &_EduStanfordNlpInternationalArabicProcessArabicTokenizer_ArabicTokenizerFactory;
}

@end

id<EduStanfordNlpProcessTokenizerFactory> EduStanfordNlpInternationalArabicProcessArabicTokenizer_ArabicTokenizerFactory_newTokenizerFactory() {
  EduStanfordNlpInternationalArabicProcessArabicTokenizer_ArabicTokenizerFactory_initialize();
  return new_EduStanfordNlpInternationalArabicProcessArabicTokenizer_ArabicTokenizerFactory_initWithEduStanfordNlpProcessLexedTokenFactory_(new_EduStanfordNlpProcessCoreLabelTokenFactory_init());
}

void EduStanfordNlpInternationalArabicProcessArabicTokenizer_ArabicTokenizerFactory_initWithEduStanfordNlpProcessLexedTokenFactory_(EduStanfordNlpInternationalArabicProcessArabicTokenizer_ArabicTokenizerFactory *self, id<EduStanfordNlpProcessLexedTokenFactory> factory) {
  NSObject_init(self);
  self->lexerProperties_ = new_JavaUtilProperties_init();
  self->factory_ = factory;
}

EduStanfordNlpInternationalArabicProcessArabicTokenizer_ArabicTokenizerFactory *new_EduStanfordNlpInternationalArabicProcessArabicTokenizer_ArabicTokenizerFactory_initWithEduStanfordNlpProcessLexedTokenFactory_(id<EduStanfordNlpProcessLexedTokenFactory> factory) {
  J2OBJC_NEW_IMPL(EduStanfordNlpInternationalArabicProcessArabicTokenizer_ArabicTokenizerFactory, initWithEduStanfordNlpProcessLexedTokenFactory_, factory)
}

EduStanfordNlpInternationalArabicProcessArabicTokenizer_ArabicTokenizerFactory *create_EduStanfordNlpInternationalArabicProcessArabicTokenizer_ArabicTokenizerFactory_initWithEduStanfordNlpProcessLexedTokenFactory_(id<EduStanfordNlpProcessLexedTokenFactory> factory) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpInternationalArabicProcessArabicTokenizer_ArabicTokenizerFactory, initWithEduStanfordNlpProcessLexedTokenFactory_, factory)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpInternationalArabicProcessArabicTokenizer_ArabicTokenizerFactory)
