//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/international/arabic/pipeline/DefaultLexicalMapper.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/international/arabic/Buckwalter.h"
#include "edu/stanford/nlp/international/arabic/pipeline/DefaultLexicalMapper.h"
#include "edu/stanford/nlp/trees/international/arabic/ATBTreeUtils.h"
#include "edu/stanford/nlp/trees/treebank/Mapper.h"
#include "edu/stanford/nlp/util/Generics.h"
#include "java/io/File.h"
#include "java/io/PrintStream.h"
#include "java/lang/System.h"
#include "java/util/Arrays.h"
#include "java/util/Collections.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"

@interface EduStanfordNlpInternationalArabicPipelineDefaultLexicalMapper () {
 @public
  JavaUtilRegexPattern *utf8ArabicChart_;
  NSString *bwAlefChar_;
  JavaUtilRegexPattern *bwDiacritics_;
  JavaUtilRegexPattern *bwTatweel_;
  JavaUtilRegexPattern *bwAlef_;
  JavaUtilRegexPattern *bwQuran_;
  JavaUtilRegexPattern *bwNullAnaphoraMarker_;
  JavaUtilRegexPattern *utf8Diacritics_;
  JavaUtilRegexPattern *utf8Tatweel_;
  JavaUtilRegexPattern *utf8Alef_;
  JavaUtilRegexPattern *utf8Quran_;
  JavaUtilRegexPattern *utf8ProDrop_;
  JavaUtilRegexPattern *morphemeBoundary_;
  JavaUtilRegexPattern *hasDigit_;
  jboolean useATBVocalizedSectionMapping_;
  jboolean stripMorphemeMarkersInUTF8_;
  jboolean stripSegmentationMarkersInUTF8_;
  NSString *parentTagString_;
  id<JavaUtilSet> parentTagsToEscape_;
  NSString *utf8CliticString_;
  id<JavaUtilSet> bwClitics_;
}

- (NSString *)mapUtf8WithNSString:(NSString *)element;

- (NSString *)mapBuckwalterWithNSString:(NSString *)element;

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpInternationalArabicPipelineDefaultLexicalMapper, utf8ArabicChart_, JavaUtilRegexPattern *)
J2OBJC_FIELD_SETTER(EduStanfordNlpInternationalArabicPipelineDefaultLexicalMapper, bwAlefChar_, NSString *)
J2OBJC_FIELD_SETTER(EduStanfordNlpInternationalArabicPipelineDefaultLexicalMapper, bwDiacritics_, JavaUtilRegexPattern *)
J2OBJC_FIELD_SETTER(EduStanfordNlpInternationalArabicPipelineDefaultLexicalMapper, bwTatweel_, JavaUtilRegexPattern *)
J2OBJC_FIELD_SETTER(EduStanfordNlpInternationalArabicPipelineDefaultLexicalMapper, bwAlef_, JavaUtilRegexPattern *)
J2OBJC_FIELD_SETTER(EduStanfordNlpInternationalArabicPipelineDefaultLexicalMapper, bwQuran_, JavaUtilRegexPattern *)
J2OBJC_FIELD_SETTER(EduStanfordNlpInternationalArabicPipelineDefaultLexicalMapper, bwNullAnaphoraMarker_, JavaUtilRegexPattern *)
J2OBJC_FIELD_SETTER(EduStanfordNlpInternationalArabicPipelineDefaultLexicalMapper, utf8Diacritics_, JavaUtilRegexPattern *)
J2OBJC_FIELD_SETTER(EduStanfordNlpInternationalArabicPipelineDefaultLexicalMapper, utf8Tatweel_, JavaUtilRegexPattern *)
J2OBJC_FIELD_SETTER(EduStanfordNlpInternationalArabicPipelineDefaultLexicalMapper, utf8Alef_, JavaUtilRegexPattern *)
J2OBJC_FIELD_SETTER(EduStanfordNlpInternationalArabicPipelineDefaultLexicalMapper, utf8Quran_, JavaUtilRegexPattern *)
J2OBJC_FIELD_SETTER(EduStanfordNlpInternationalArabicPipelineDefaultLexicalMapper, utf8ProDrop_, JavaUtilRegexPattern *)
J2OBJC_FIELD_SETTER(EduStanfordNlpInternationalArabicPipelineDefaultLexicalMapper, morphemeBoundary_, JavaUtilRegexPattern *)
J2OBJC_FIELD_SETTER(EduStanfordNlpInternationalArabicPipelineDefaultLexicalMapper, hasDigit_, JavaUtilRegexPattern *)
J2OBJC_FIELD_SETTER(EduStanfordNlpInternationalArabicPipelineDefaultLexicalMapper, parentTagString_, NSString *)
J2OBJC_FIELD_SETTER(EduStanfordNlpInternationalArabicPipelineDefaultLexicalMapper, parentTagsToEscape_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(EduStanfordNlpInternationalArabicPipelineDefaultLexicalMapper, utf8CliticString_, NSString *)
J2OBJC_FIELD_SETTER(EduStanfordNlpInternationalArabicPipelineDefaultLexicalMapper, bwClitics_, id<JavaUtilSet>)

inline jlong EduStanfordNlpInternationalArabicPipelineDefaultLexicalMapper_get_serialVersionUID();
#define EduStanfordNlpInternationalArabicPipelineDefaultLexicalMapper_serialVersionUID -3798804368296999785LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpInternationalArabicPipelineDefaultLexicalMapper, serialVersionUID, jlong)

__attribute__((unused)) static NSString *EduStanfordNlpInternationalArabicPipelineDefaultLexicalMapper_mapUtf8WithNSString_(EduStanfordNlpInternationalArabicPipelineDefaultLexicalMapper *self, NSString *element);

__attribute__((unused)) static NSString *EduStanfordNlpInternationalArabicPipelineDefaultLexicalMapper_mapBuckwalterWithNSString_(EduStanfordNlpInternationalArabicPipelineDefaultLexicalMapper *self, NSString *element);

@implementation EduStanfordNlpInternationalArabicPipelineDefaultLexicalMapper

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpInternationalArabicPipelineDefaultLexicalMapper_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)mapUtf8WithNSString:(NSString *)element {
  return EduStanfordNlpInternationalArabicPipelineDefaultLexicalMapper_mapUtf8WithNSString_(self, element);
}

- (NSString *)mapBuckwalterWithNSString:(NSString *)element {
  return EduStanfordNlpInternationalArabicPipelineDefaultLexicalMapper_mapBuckwalterWithNSString_(self, element);
}

- (NSString *)mapWithNSString:(NSString *)parent
                 withNSString:(NSString *)element {
  NSString *elem = [((NSString *) nil_chk(element)) trim];
  if (parent != nil && [((id<JavaUtilSet>) nil_chk(parentTagsToEscape_)) containsWithId:parent]) return elem;
  JavaUtilRegexMatcher *utf8Encoding = [((JavaUtilRegexPattern *) nil_chk(utf8ArabicChart_)) matcherWithJavaLangCharSequence:elem];
  return ([((JavaUtilRegexMatcher *) nil_chk(utf8Encoding)) find]) ? EduStanfordNlpInternationalArabicPipelineDefaultLexicalMapper_mapUtf8WithNSString_(self, elem) : EduStanfordNlpInternationalArabicPipelineDefaultLexicalMapper_mapBuckwalterWithNSString_(self, elem);
}

- (void)setupWithJavaIoFile:(JavaIoFile *)path
          withNSStringArray:(IOSObjectArray *)options {
  if (options == nil) return;
  {
    IOSObjectArray *a__ = options;
    NSString * const *b__ = a__->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *opt = *b__++;
      switch (JreIndexOfStr(opt, (id[]){ @"ATBVocalizedSection", @"StripSegMarkersInUTF8", @"StripMorphMarkersInUTF8" }, 3)) {
        case 0:
        useATBVocalizedSectionMapping_ = true;
        break;
        case 1:
        stripSegmentationMarkersInUTF8_ = true;
        break;
        case 2:
        stripMorphemeMarkersInUTF8_ = true;
        break;
      }
    }
  }
}

- (jboolean)canChangeEncodingWithNSString:(NSString *)parent
                             withNSString:(NSString *)element {
  parent = [((NSString *) nil_chk(parent)) trim];
  element = [((NSString *) nil_chk(element)) trim];
  if ([((NSString *) nil_chk(parent)) contains:@"NUMERIC_COMMA"] || ([parent contains:@"PUNC"] && [((NSString *) nil_chk(element)) isEqual:@"r"])) return true;
  JavaUtilRegexMatcher *numMatcher = [((JavaUtilRegexPattern *) nil_chk(hasDigit_)) matcherWithJavaLangCharSequence:element];
  return !([((JavaUtilRegexMatcher *) nil_chk(numMatcher)) find] || [((id<JavaUtilSet>) nil_chk(parentTagsToEscape_)) containsWithId:parent]);
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  EduStanfordNlpInternationalArabicPipelineDefaultLexicalMapper_mainWithNSStringArray_(args);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 2, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 5, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 7, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 8, 9, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(mapUtf8WithNSString:);
  methods[2].selector = @selector(mapBuckwalterWithNSString:);
  methods[3].selector = @selector(mapWithNSString:withNSString:);
  methods[4].selector = @selector(setupWithJavaIoFile:withNSStringArray:);
  methods[5].selector = @selector(canChangeEncodingWithNSString:withNSString:);
  methods[6].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpInternationalArabicPipelineDefaultLexicalMapper_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "utf8ArabicChart_", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "bwAlefChar_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "bwDiacritics_", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "bwTatweel_", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "bwAlef_", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "bwQuran_", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "bwNullAnaphoraMarker_", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "latinPunc_", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "arabicPunc_", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "arabicDigit_", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "utf8Diacritics_", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "utf8Tatweel_", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "utf8Alef_", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "utf8Quran_", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "utf8ProDrop_", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "segmentationMarker_", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "morphemeBoundary_", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "hasDigit_", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "useATBVocalizedSectionMapping_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "stripMorphemeMarkersInUTF8_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "stripSegmentationMarkersInUTF8_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "parentTagString_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "parentTagsToEscape_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 10, -1 },
    { "utf8CliticString_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "bwClitics_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 10, -1 },
  };
  static const void *ptrTable[] = { "mapUtf8", "LNSString;", "mapBuckwalter", "map", "LNSString;LNSString;", "setup", "LJavaIoFile;[LNSString;", "canChangeEncoding", "main", "[LNSString;", "Ljava/util/Set<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpInternationalArabicPipelineDefaultLexicalMapper = { "DefaultLexicalMapper", "edu.stanford.nlp.international.arabic.pipeline", ptrTable, methods, fields, 7, 0x1, 7, 26, -1, -1, -1, -1, -1 };
  return &_EduStanfordNlpInternationalArabicPipelineDefaultLexicalMapper;
}

@end

void EduStanfordNlpInternationalArabicPipelineDefaultLexicalMapper_init(EduStanfordNlpInternationalArabicPipelineDefaultLexicalMapper *self) {
  NSObject_init(self);
  self->utf8ArabicChart_ = JavaUtilRegexPattern_compileWithNSString_(@"[\u0600-\u06ff]");
  self->bwAlefChar_ = @"A";
  self->bwDiacritics_ = JavaUtilRegexPattern_compileWithNSString_(@"F|N|K|a|u|i|\\~|o");
  self->bwTatweel_ = JavaUtilRegexPattern_compileWithNSString_(@"_");
  self->bwAlef_ = JavaUtilRegexPattern_compileWithNSString_(@"\\{|\\||>|<");
  self->bwQuran_ = JavaUtilRegexPattern_compileWithNSString_(@"`");
  self->bwNullAnaphoraMarker_ = JavaUtilRegexPattern_compileWithNSString_(@"\\[nll\\]");
  self->latinPunc_ = JavaUtilRegexPattern_compileWithNSString_(@"([!-/:-@\\u005B-`{-~\u00a1-\u00bf\u00f7\u2010-\u2027\u2030-\u205e\u20a0-\u20ba])+");
  self->arabicPunc_ = JavaUtilRegexPattern_compileWithNSString_(@"([\u00ab\u00bb\u0609-\u060d\u061b-\u061f\u066a\u066c-\u066d\u06d4])+");
  self->arabicDigit_ = JavaUtilRegexPattern_compileWithNSString_(@"([\u06f0-\u06f9\u0660-\u0669])+");
  self->utf8Diacritics_ = JavaUtilRegexPattern_compileWithNSString_(@"\u064e|\u064b|\u064f|\u064c|\u0650|\u064d|\u0651|\u0652|\u0670");
  self->utf8Tatweel_ = JavaUtilRegexPattern_compileWithNSString_(@"\u0640");
  self->utf8Alef_ = JavaUtilRegexPattern_compileWithNSString_(@"\u0627|\u0625|\u0623|\u0622|\u0671");
  self->utf8Quran_ = JavaUtilRegexPattern_compileWithNSString_(@"[\u0615-\u061a\u06d6-\u06e5]");
  self->utf8ProDrop_ = JavaUtilRegexPattern_compileWithNSString_(@"\\[\u0646\u0644\u0644\\]");
  self->segmentationMarker_ = JavaUtilRegexPattern_compileWithNSString_(@"^-+|-+$");
  self->morphemeBoundary_ = JavaUtilRegexPattern_compileWithNSString_(@"\\+");
  self->hasDigit_ = JavaUtilRegexPattern_compileWithNSString_(@"\\d+");
  self->useATBVocalizedSectionMapping_ = false;
  self->stripMorphemeMarkersInUTF8_ = false;
  self->stripSegmentationMarkersInUTF8_ = false;
  self->parentTagString_ = @"PUNC LATIN -NONE-";
  self->utf8CliticString_ = @"\u0644 \u0641 \u0648 \u0645\u0627 \u0647 \u0647\u0627 \u0647\u0645 \u0647\u0646 \u0646\u0627 \u0643\u0645 \u062a\u0646 \u062a\u0645 \u0649 \u064a \u0647\u0645\u0627 \u0643 \u0628 \u0645";
  self->parentTagsToEscape_ = JavaUtilCollections_unmodifiableSetWithJavaUtilSet_(EduStanfordNlpUtilGenerics_newHashSetWithJavaUtilCollection_(JavaUtilArrays_asListWithNSObjectArray_([self->parentTagString_ split:@"\\s+"])));
  EduStanfordNlpInternationalArabicBuckwalter *bw = new_EduStanfordNlpInternationalArabicBuckwalter_initWithBoolean_(true);
  NSString *bwString = [bw applyWithId:self->utf8CliticString_];
  self->bwClitics_ = JavaUtilCollections_unmodifiableSetWithJavaUtilSet_(EduStanfordNlpUtilGenerics_newHashSetWithJavaUtilCollection_(JavaUtilArrays_asListWithNSObjectArray_([((NSString *) nil_chk(bwString)) split:@"\\s+"])));
}

EduStanfordNlpInternationalArabicPipelineDefaultLexicalMapper *new_EduStanfordNlpInternationalArabicPipelineDefaultLexicalMapper_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpInternationalArabicPipelineDefaultLexicalMapper, init)
}

EduStanfordNlpInternationalArabicPipelineDefaultLexicalMapper *create_EduStanfordNlpInternationalArabicPipelineDefaultLexicalMapper_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpInternationalArabicPipelineDefaultLexicalMapper, init)
}

NSString *EduStanfordNlpInternationalArabicPipelineDefaultLexicalMapper_mapUtf8WithNSString_(EduStanfordNlpInternationalArabicPipelineDefaultLexicalMapper *self, NSString *element) {
  JavaUtilRegexMatcher *latinPuncOnly = [((JavaUtilRegexPattern *) nil_chk(self->latinPunc_)) matcherWithJavaLangCharSequence:element];
  JavaUtilRegexMatcher *arbPuncOnly = [((JavaUtilRegexPattern *) nil_chk(self->arabicPunc_)) matcherWithJavaLangCharSequence:element];
  if ([((JavaUtilRegexMatcher *) nil_chk(latinPuncOnly)) matches] || [((JavaUtilRegexMatcher *) nil_chk(arbPuncOnly)) matches]) return element;
  JavaUtilRegexMatcher *rmDiacritics = [((JavaUtilRegexPattern *) nil_chk(self->utf8Diacritics_)) matcherWithJavaLangCharSequence:element];
  element = [((JavaUtilRegexMatcher *) nil_chk(rmDiacritics)) replaceAllWithNSString:@""];
  if (((jint) [((NSString *) nil_chk(element)) length]) > 1) {
    JavaUtilRegexMatcher *rmTatweel = [((JavaUtilRegexPattern *) nil_chk(self->utf8Tatweel_)) matcherWithJavaLangCharSequence:element];
    element = [((JavaUtilRegexMatcher *) nil_chk(rmTatweel)) replaceAllWithNSString:@""];
  }
  JavaUtilRegexMatcher *normAlef = [((JavaUtilRegexPattern *) nil_chk(self->utf8Alef_)) matcherWithJavaLangCharSequence:element];
  element = [((JavaUtilRegexMatcher *) nil_chk(normAlef)) replaceAllWithNSString:@"\u0627"];
  JavaUtilRegexMatcher *rmQuran = [((JavaUtilRegexPattern *) nil_chk(self->utf8Quran_)) matcherWithJavaLangCharSequence:element];
  element = [((JavaUtilRegexMatcher *) nil_chk(rmQuran)) replaceAllWithNSString:@""];
  JavaUtilRegexMatcher *rmProDrop = [((JavaUtilRegexPattern *) nil_chk(self->utf8ProDrop_)) matcherWithJavaLangCharSequence:element];
  element = [((JavaUtilRegexMatcher *) nil_chk(rmProDrop)) replaceAllWithNSString:@""];
  if (self->stripMorphemeMarkersInUTF8_) {
    JavaUtilRegexMatcher *rmMorphemeBoundary = [((JavaUtilRegexPattern *) nil_chk(self->morphemeBoundary_)) matcherWithJavaLangCharSequence:element];
    NSString *strippedElem = [((JavaUtilRegexMatcher *) nil_chk(rmMorphemeBoundary)) replaceAllWithNSString:@""];
    if (((jint) [((NSString *) nil_chk(strippedElem)) length]) > 0) element = strippedElem;
  }
  if (self->stripSegmentationMarkersInUTF8_) {
    NSString *strippedElem = [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(self->segmentationMarker_)) matcherWithJavaLangCharSequence:element])) replaceAllWithNSString:@""];
    if (((jint) [((NSString *) nil_chk(strippedElem)) length]) > 0) element = strippedElem;
  }
  return element;
}

NSString *EduStanfordNlpInternationalArabicPipelineDefaultLexicalMapper_mapBuckwalterWithNSString_(EduStanfordNlpInternationalArabicPipelineDefaultLexicalMapper *self, NSString *element) {
  JavaUtilRegexMatcher *puncOnly = [((JavaUtilRegexPattern *) nil_chk(self->latinPunc_)) matcherWithJavaLangCharSequence:element];
  if ([((JavaUtilRegexMatcher *) nil_chk(puncOnly)) matches]) return element;
  JavaUtilRegexMatcher *rmDiacritics = [((JavaUtilRegexPattern *) nil_chk(self->bwDiacritics_)) matcherWithJavaLangCharSequence:element];
  element = [((JavaUtilRegexMatcher *) nil_chk(rmDiacritics)) replaceAllWithNSString:@""];
  if (((jint) [((NSString *) nil_chk(element)) length]) > 1) {
    JavaUtilRegexMatcher *rmTatweel = [((JavaUtilRegexPattern *) nil_chk(self->bwTatweel_)) matcherWithJavaLangCharSequence:element];
    element = [((JavaUtilRegexMatcher *) nil_chk(rmTatweel)) replaceAllWithNSString:@""];
  }
  JavaUtilRegexMatcher *normAlef = [((JavaUtilRegexPattern *) nil_chk(self->bwAlef_)) matcherWithJavaLangCharSequence:element];
  element = [((JavaUtilRegexMatcher *) nil_chk(normAlef)) replaceAllWithNSString:self->bwAlefChar_];
  JavaUtilRegexMatcher *rmQuran = [((JavaUtilRegexPattern *) nil_chk(self->bwQuran_)) matcherWithJavaLangCharSequence:element];
  element = [((JavaUtilRegexMatcher *) nil_chk(rmQuran)) replaceAllWithNSString:@""];
  JavaUtilRegexMatcher *rmProDrop = [((JavaUtilRegexPattern *) nil_chk(self->bwNullAnaphoraMarker_)) matcherWithJavaLangCharSequence:element];
  element = [((JavaUtilRegexMatcher *) nil_chk(rmProDrop)) replaceAllWithNSString:@""];
  if (self->useATBVocalizedSectionMapping_ && ((jint) [((NSString *) nil_chk(element)) length]) > 1) {
    JavaUtilRegexMatcher *rmMorphemeBoundary = [((JavaUtilRegexPattern *) nil_chk(self->morphemeBoundary_)) matcherWithJavaLangCharSequence:element];
    element = [((JavaUtilRegexMatcher *) nil_chk(rmMorphemeBoundary)) replaceAllWithNSString:@""];
    JavaUtilRegexMatcher *cliticMarker = [((JavaUtilRegexPattern *) nil_chk(self->segmentationMarker_)) matcherWithJavaLangCharSequence:element];
    if ([((JavaUtilRegexMatcher *) nil_chk(cliticMarker)) find] && ![((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(self->hasDigit_)) matcherWithJavaLangCharSequence:element])) find]) {
      NSString *strippedElem = [cliticMarker replaceAllWithNSString:@""];
      if (((jint) [((NSString *) nil_chk(strippedElem)) length]) > 0) element = [((id<JavaUtilSet>) nil_chk(self->bwClitics_)) containsWithId:strippedElem] ? element : strippedElem;
    }
  }
  else if (((jint) [((NSString *) nil_chk(element)) length]) > 1 && ![((id<JavaUtilSet>) nil_chk(JreLoadStatic(EduStanfordNlpTreesInternationalArabicATBTreeUtils, reservedWords))) containsWithId:element]) {
    JavaUtilRegexMatcher *rmCliticMarker = [((JavaUtilRegexPattern *) nil_chk(self->segmentationMarker_)) matcherWithJavaLangCharSequence:element];
    element = [((JavaUtilRegexMatcher *) nil_chk(rmCliticMarker)) replaceAllWithNSString:@""];
  }
  return element;
}

void EduStanfordNlpInternationalArabicPipelineDefaultLexicalMapper_mainWithNSStringArray_(IOSObjectArray *args) {
  EduStanfordNlpInternationalArabicPipelineDefaultLexicalMapper_initialize();
  id<EduStanfordNlpTreesTreebankMapper> m = new_EduStanfordNlpInternationalArabicPipelineDefaultLexicalMapper_init();
  (void) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printfWithNSString:@"< :-> %s\n" withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ [m mapWithNSString:nil withNSString:@"FNKqq"] } count:1 type:NSObject_class_()]];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpInternationalArabicPipelineDefaultLexicalMapper)
