//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/graph/DirectedMultiGraph.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/graph/ConnectedComponents.h"
#include "edu/stanford/nlp/graph/DijkstraShortestPath.h"
#include "edu/stanford/nlp/graph/DirectedMultiGraph.h"
#include "edu/stanford/nlp/ling/IndexedWord.h"
#include "edu/stanford/nlp/semgraph/SemanticGraphEdge.h"
#include "edu/stanford/nlp/util/CollectionUtils.h"
#include "edu/stanford/nlp/util/Generics.h"
#include "edu/stanford/nlp/util/MapFactory.h"
#include "java/lang/AssertionError.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Iterable.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/NoSuchElementException.h"
#include "java/util/Set.h"
#include "java/util/Spliterator.h"
#include "java/util/TreeSet.h"
#include "java/util/function/Consumer.h"

@interface EduStanfordNlpGraphDirectedMultiGraph ()

- (id<JavaUtilMap>)getOutgoingEdgesMapWithId:(id)v;

- (id<JavaUtilMap>)getIncomingEdgesMapWithId:(id)v;

@end

inline jlong EduStanfordNlpGraphDirectedMultiGraph_get_serialVersionUID();
#define EduStanfordNlpGraphDirectedMultiGraph_serialVersionUID 609823567298345145LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpGraphDirectedMultiGraph, serialVersionUID, jlong)

__attribute__((unused)) static id<JavaUtilMap> EduStanfordNlpGraphDirectedMultiGraph_getOutgoingEdgesMapWithId_(EduStanfordNlpGraphDirectedMultiGraph *self, id v);

__attribute__((unused)) static id<JavaUtilMap> EduStanfordNlpGraphDirectedMultiGraph_getIncomingEdgesMapWithId_(EduStanfordNlpGraphDirectedMultiGraph *self, id v);

@interface EduStanfordNlpGraphDirectedMultiGraph_EdgeIterator () {
 @public
  id<JavaUtilMap> incomingEdges_;
  id<JavaUtilIterator> vertexIterator_;
  id<JavaUtilIterator> connectionIterator_;
  id<JavaUtilIterator> edgeIterator_;
  id lastRemoved_;
  jboolean hasNext_;
}

- (void)primeIterator;

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpGraphDirectedMultiGraph_EdgeIterator, incomingEdges_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(EduStanfordNlpGraphDirectedMultiGraph_EdgeIterator, vertexIterator_, id<JavaUtilIterator>)
J2OBJC_FIELD_SETTER(EduStanfordNlpGraphDirectedMultiGraph_EdgeIterator, connectionIterator_, id<JavaUtilIterator>)
J2OBJC_FIELD_SETTER(EduStanfordNlpGraphDirectedMultiGraph_EdgeIterator, edgeIterator_, id<JavaUtilIterator>)
J2OBJC_FIELD_SETTER(EduStanfordNlpGraphDirectedMultiGraph_EdgeIterator, lastRemoved_, id)

__attribute__((unused)) static void EduStanfordNlpGraphDirectedMultiGraph_EdgeIterator_primeIterator(EduStanfordNlpGraphDirectedMultiGraph_EdgeIterator *self);

@interface EduStanfordNlpGraphDirectedMultiGraph_$Lambda$1 : NSObject < JavaLangIterable > {
 @public
  EduStanfordNlpGraphDirectedMultiGraph *this$0_;
  id val$vertex_;
}

- (id<JavaUtilIterator>)iterator;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpGraphDirectedMultiGraph_$Lambda$1)

J2OBJC_FIELD_SETTER(EduStanfordNlpGraphDirectedMultiGraph_$Lambda$1, this$0_, EduStanfordNlpGraphDirectedMultiGraph *)
J2OBJC_FIELD_SETTER(EduStanfordNlpGraphDirectedMultiGraph_$Lambda$1, val$vertex_, id)

__attribute__((unused)) static void EduStanfordNlpGraphDirectedMultiGraph_$Lambda$1_initWithEduStanfordNlpGraphDirectedMultiGraph_withId_(EduStanfordNlpGraphDirectedMultiGraph_$Lambda$1 *self, EduStanfordNlpGraphDirectedMultiGraph *outer$, id capture$0);

__attribute__((unused)) static EduStanfordNlpGraphDirectedMultiGraph_$Lambda$1 *new_EduStanfordNlpGraphDirectedMultiGraph_$Lambda$1_initWithEduStanfordNlpGraphDirectedMultiGraph_withId_(EduStanfordNlpGraphDirectedMultiGraph *outer$, id capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpGraphDirectedMultiGraph_$Lambda$1 *create_EduStanfordNlpGraphDirectedMultiGraph_$Lambda$1_initWithEduStanfordNlpGraphDirectedMultiGraph_withId_(EduStanfordNlpGraphDirectedMultiGraph *outer$, id capture$0);

@interface EduStanfordNlpGraphDirectedMultiGraph_$Lambda$2 : NSObject < JavaLangIterable > {
 @public
  EduStanfordNlpGraphDirectedMultiGraph *this$0_;
  id val$vertex_;
}

- (id<JavaUtilIterator>)iterator;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpGraphDirectedMultiGraph_$Lambda$2)

J2OBJC_FIELD_SETTER(EduStanfordNlpGraphDirectedMultiGraph_$Lambda$2, this$0_, EduStanfordNlpGraphDirectedMultiGraph *)
J2OBJC_FIELD_SETTER(EduStanfordNlpGraphDirectedMultiGraph_$Lambda$2, val$vertex_, id)

__attribute__((unused)) static void EduStanfordNlpGraphDirectedMultiGraph_$Lambda$2_initWithEduStanfordNlpGraphDirectedMultiGraph_withId_(EduStanfordNlpGraphDirectedMultiGraph_$Lambda$2 *self, EduStanfordNlpGraphDirectedMultiGraph *outer$, id capture$0);

__attribute__((unused)) static EduStanfordNlpGraphDirectedMultiGraph_$Lambda$2 *new_EduStanfordNlpGraphDirectedMultiGraph_$Lambda$2_initWithEduStanfordNlpGraphDirectedMultiGraph_withId_(EduStanfordNlpGraphDirectedMultiGraph *outer$, id capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpGraphDirectedMultiGraph_$Lambda$2 *create_EduStanfordNlpGraphDirectedMultiGraph_$Lambda$2_initWithEduStanfordNlpGraphDirectedMultiGraph_withId_(EduStanfordNlpGraphDirectedMultiGraph *outer$, id capture$0);

@interface EduStanfordNlpGraphDirectedMultiGraph_$Lambda$3 : NSObject < JavaLangIterable > {
 @public
  EduStanfordNlpGraphDirectedMultiGraph *this$0_;
}

- (id<JavaUtilIterator>)iterator;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpGraphDirectedMultiGraph_$Lambda$3)

J2OBJC_FIELD_SETTER(EduStanfordNlpGraphDirectedMultiGraph_$Lambda$3, this$0_, EduStanfordNlpGraphDirectedMultiGraph *)

__attribute__((unused)) static void EduStanfordNlpGraphDirectedMultiGraph_$Lambda$3_initWithEduStanfordNlpGraphDirectedMultiGraph_(EduStanfordNlpGraphDirectedMultiGraph_$Lambda$3 *self, EduStanfordNlpGraphDirectedMultiGraph *outer$);

__attribute__((unused)) static EduStanfordNlpGraphDirectedMultiGraph_$Lambda$3 *new_EduStanfordNlpGraphDirectedMultiGraph_$Lambda$3_initWithEduStanfordNlpGraphDirectedMultiGraph_(EduStanfordNlpGraphDirectedMultiGraph *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpGraphDirectedMultiGraph_$Lambda$3 *create_EduStanfordNlpGraphDirectedMultiGraph_$Lambda$3_initWithEduStanfordNlpGraphDirectedMultiGraph_(EduStanfordNlpGraphDirectedMultiGraph *outer$);

@implementation EduStanfordNlpGraphDirectedMultiGraph

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpGraphDirectedMultiGraph_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithEduStanfordNlpUtilMapFactory:(EduStanfordNlpUtilMapFactory *)outerMapFactory
                    withEduStanfordNlpUtilMapFactory:(EduStanfordNlpUtilMapFactory *)innerMapFactory {
  EduStanfordNlpGraphDirectedMultiGraph_initWithEduStanfordNlpUtilMapFactory_withEduStanfordNlpUtilMapFactory_(self, outerMapFactory, innerMapFactory);
  return self;
}

- (instancetype)initWithEduStanfordNlpGraphDirectedMultiGraph:(EduStanfordNlpGraphDirectedMultiGraph *)graph {
  EduStanfordNlpGraphDirectedMultiGraph_initWithEduStanfordNlpGraphDirectedMultiGraph_(self, graph);
  return self;
}

- (NSUInteger)hash {
  return ((jint) [((id<JavaUtilMap>) nil_chk(outgoingEdges_)) hash]);
}

- (jboolean)isEqual:(id)that {
  if (that == self) return true;
  if (!([that isKindOfClass:[EduStanfordNlpGraphDirectedMultiGraph class]])) return false;
  return [((id<JavaUtilMap>) nil_chk(outgoingEdges_)) isEqual:((EduStanfordNlpGraphDirectedMultiGraph *) nil_chk(((EduStanfordNlpGraphDirectedMultiGraph *) cast_chk(that, [EduStanfordNlpGraphDirectedMultiGraph class]))))->outgoingEdges_];
}

- (jboolean)addVertexWithId:(id)v {
  if ([((id<JavaUtilMap>) nil_chk(outgoingEdges_)) containsKeyWithId:v]) return false;
  (void) [outgoingEdges_ putWithId:v withId:[((EduStanfordNlpUtilMapFactory *) nil_chk(innerMapFactory_)) newMap]];
  (void) [((id<JavaUtilMap>) nil_chk(incomingEdges_)) putWithId:v withId:[innerMapFactory_ newMap]];
  return true;
}

- (id<JavaUtilMap>)getOutgoingEdgesMapWithId:(id)v {
  return EduStanfordNlpGraphDirectedMultiGraph_getOutgoingEdgesMapWithId_(self, v);
}

- (id<JavaUtilMap>)getIncomingEdgesMapWithId:(id)v {
  return EduStanfordNlpGraphDirectedMultiGraph_getIncomingEdgesMapWithId_(self, v);
}

- (void)addWithId:(id)source
           withId:(id)dest
           withId:(id)data {
  id<JavaUtilMap> outgoingMap = EduStanfordNlpGraphDirectedMultiGraph_getOutgoingEdgesMapWithId_(self, source);
  id<JavaUtilMap> incomingMap = EduStanfordNlpGraphDirectedMultiGraph_getIncomingEdgesMapWithId_(self, dest);
  id<JavaUtilList> outgoingList = [((id<JavaUtilMap>) nil_chk(outgoingMap)) getWithId:dest];
  if (outgoingList == nil) {
    outgoingList = new_JavaUtilArrayList_init();
    (void) [outgoingMap putWithId:dest withId:outgoingList];
  }
  id<JavaUtilList> incomingList = [((id<JavaUtilMap>) nil_chk(incomingMap)) getWithId:source];
  if (incomingList == nil) {
    incomingList = new_JavaUtilArrayList_init();
    (void) [incomingMap putWithId:source withId:incomingList];
  }
  [outgoingList addWithId:data];
  [incomingList addWithId:data];
}

- (jboolean)removeEdgesWithId:(id)source
                       withId:(id)dest {
  if (![((id<JavaUtilMap>) nil_chk(outgoingEdges_)) containsKeyWithId:source]) {
    return false;
  }
  if (![((id<JavaUtilMap>) nil_chk(incomingEdges_)) containsKeyWithId:dest]) {
    return false;
  }
  if (![((id<JavaUtilMap>) nil_chk([outgoingEdges_ getWithId:source])) containsKeyWithId:dest]) {
    return false;
  }
  (void) [((id<JavaUtilMap>) nil_chk([outgoingEdges_ getWithId:source])) removeWithId:dest];
  (void) [((id<JavaUtilMap>) nil_chk([incomingEdges_ getWithId:dest])) removeWithId:source];
  return true;
}

- (jboolean)removeEdgeWithId:(id)source
                      withId:(id)dest
                      withId:(id)data {
  if (![((id<JavaUtilMap>) nil_chk(outgoingEdges_)) containsKeyWithId:source]) {
    return false;
  }
  if (![((id<JavaUtilMap>) nil_chk(incomingEdges_)) containsKeyWithId:dest]) {
    return false;
  }
  if (![((id<JavaUtilMap>) nil_chk([outgoingEdges_ getWithId:source])) containsKeyWithId:dest]) {
    return false;
  }
  jboolean foundOut = [outgoingEdges_ containsKeyWithId:source] && [((id<JavaUtilMap>) nil_chk([outgoingEdges_ getWithId:source])) containsKeyWithId:dest] && [((id<JavaUtilList>) nil_chk([((id<JavaUtilMap>) nil_chk([outgoingEdges_ getWithId:source])) getWithId:dest])) removeWithId:data];
  jboolean foundIn = [incomingEdges_ containsKeyWithId:dest] && [((id<JavaUtilMap>) nil_chk([incomingEdges_ getWithId:dest])) containsKeyWithId:source] && [((id<JavaUtilList>) nil_chk([((id<JavaUtilMap>) nil_chk([incomingEdges_ getWithId:dest])) getWithId:source])) removeWithId:data];
  if (foundOut && !foundIn) {
    @throw new_JavaLangAssertionError_initWithId_(@"Edge found in outgoing but not incoming");
  }
  if (foundIn && !foundOut) {
    @throw new_JavaLangAssertionError_initWithId_(@"Edge found in incoming but not outgoing");
  }
  if ([outgoingEdges_ containsKeyWithId:source] && (![((id<JavaUtilMap>) nil_chk([outgoingEdges_ getWithId:source])) containsKeyWithId:dest] || [((id<JavaUtilList>) nil_chk([((id<JavaUtilMap>) nil_chk([outgoingEdges_ getWithId:source])) getWithId:dest])) size] == 0)) {
    (void) [((id<JavaUtilMap>) nil_chk([outgoingEdges_ getWithId:source])) removeWithId:dest];
  }
  if ([incomingEdges_ containsKeyWithId:dest] && (![((id<JavaUtilMap>) nil_chk([incomingEdges_ getWithId:dest])) containsKeyWithId:source] || [((id<JavaUtilList>) nil_chk([((id<JavaUtilMap>) nil_chk([incomingEdges_ getWithId:dest])) getWithId:source])) size] == 0)) {
    (void) [((id<JavaUtilMap>) nil_chk([incomingEdges_ getWithId:dest])) removeWithId:source];
  }
  return foundOut;
}

- (jboolean)removeVertexWithId:(id)vertex {
  if (![((id<JavaUtilMap>) nil_chk(outgoingEdges_)) containsKeyWithId:vertex]) {
    return false;
  }
  for (id __strong other in nil_chk([((id<JavaUtilMap>) nil_chk([outgoingEdges_ getWithId:vertex])) keySet])) {
    (void) [((id<JavaUtilMap>) nil_chk([((id<JavaUtilMap>) nil_chk(incomingEdges_)) getWithId:other])) removeWithId:vertex];
  }
  for (id __strong other in nil_chk([((id<JavaUtilMap>) nil_chk([((id<JavaUtilMap>) nil_chk(incomingEdges_)) getWithId:vertex])) keySet])) {
    (void) [((id<JavaUtilMap>) nil_chk([outgoingEdges_ getWithId:other])) removeWithId:vertex];
  }
  (void) [outgoingEdges_ removeWithId:vertex];
  (void) [incomingEdges_ removeWithId:vertex];
  return true;
}

- (jboolean)removeVerticesWithJavaUtilCollection:(id<JavaUtilCollection>)vertices {
  jboolean changed = false;
  for (id __strong v in nil_chk(vertices)) {
    if ([self removeVertexWithId:v]) {
      changed = true;
    }
  }
  return changed;
}

- (jint)getNumVertices {
  return [((id<JavaUtilMap>) nil_chk(outgoingEdges_)) size];
}

- (id<JavaUtilList>)getOutgoingEdgesWithId:(id)v {
  if (![((id<JavaUtilMap>) nil_chk(outgoingEdges_)) containsKeyWithId:v]) {
    return JavaUtilCollections_emptyList();
  }
  return EduStanfordNlpUtilCollectionUtils_flattenWithJavaUtilCollection_([((id<JavaUtilMap>) nil_chk([outgoingEdges_ getWithId:v])) values]);
}

- (id<JavaUtilList>)getIncomingEdgesWithId:(id)v {
  if (![((id<JavaUtilMap>) nil_chk(incomingEdges_)) containsKeyWithId:v]) {
    return JavaUtilCollections_emptyList();
  }
  return EduStanfordNlpUtilCollectionUtils_flattenWithJavaUtilCollection_([((id<JavaUtilMap>) nil_chk([incomingEdges_ getWithId:v])) values]);
}

- (jint)getNumEdges {
  jint count = 0;
  for (id<JavaUtilMap_Entry> __strong sourceEntry in nil_chk([((id<JavaUtilMap>) nil_chk(outgoingEdges_)) entrySet])) {
    for (id<JavaUtilMap_Entry> __strong destEntry in nil_chk([((id<JavaUtilMap>) nil_chk([((id<JavaUtilMap_Entry>) nil_chk(sourceEntry)) getValue])) entrySet])) {
      count += [((id<JavaUtilList>) nil_chk([((id<JavaUtilMap_Entry>) nil_chk(destEntry)) getValue])) size];
    }
  }
  return count;
}

- (id<JavaUtilSet>)getParentsWithId:(id)vertex {
  id<JavaUtilMap> parentMap = [((id<JavaUtilMap>) nil_chk(incomingEdges_)) getWithId:vertex];
  if (parentMap == nil) return nil;
  return JavaUtilCollections_unmodifiableSetWithJavaUtilSet_([parentMap keySet]);
}

- (id<JavaUtilSet>)getChildrenWithId:(id)vertex {
  id<JavaUtilMap> childMap = [((id<JavaUtilMap>) nil_chk(outgoingEdges_)) getWithId:vertex];
  if (childMap == nil) return nil;
  return JavaUtilCollections_unmodifiableSetWithJavaUtilSet_([childMap keySet]);
}

- (id<JavaUtilSet>)getNeighborsWithId:(id)v {
  id<JavaUtilSet> children = [self getChildrenWithId:v];
  id<JavaUtilSet> parents = [self getParentsWithId:v];
  if (children == nil && parents == nil) return nil;
  id<JavaUtilSet> neighbors = [((EduStanfordNlpUtilMapFactory *) nil_chk(innerMapFactory_)) newSet];
  [((id<JavaUtilSet>) nil_chk(neighbors)) addAllWithJavaUtilCollection:children];
  [neighbors addAllWithJavaUtilCollection:parents];
  return neighbors;
}

- (void)clear {
  [((id<JavaUtilMap>) nil_chk(incomingEdges_)) clear];
  [((id<JavaUtilMap>) nil_chk(outgoingEdges_)) clear];
}

- (jboolean)containsVertexWithId:(id)v {
  return [((id<JavaUtilMap>) nil_chk(outgoingEdges_)) containsKeyWithId:v];
}

- (jboolean)isEdgeWithId:(id)source
                  withId:(id)dest {
  id<JavaUtilMap> childrenMap = [((id<JavaUtilMap>) nil_chk(outgoingEdges_)) getWithId:source];
  if (childrenMap == nil || [childrenMap isEmpty]) return false;
  id<JavaUtilList> edges = [childrenMap getWithId:dest];
  if (edges == nil || [edges isEmpty]) return false;
  return [edges size] > 0;
}

- (jboolean)isNeighborWithId:(id)source
                      withId:(id)dest {
  return [self isEdgeWithId:source withId:dest] || [self isEdgeWithId:dest withId:source];
}

- (id<JavaUtilSet>)getAllVertices {
  return JavaUtilCollections_unmodifiableSetWithJavaUtilSet_([((id<JavaUtilMap>) nil_chk(outgoingEdges_)) keySet]);
}

- (id<JavaUtilList>)getAllEdges {
  id<JavaUtilList> edges = new_JavaUtilArrayList_init();
  for (id<JavaUtilMap> __strong e in nil_chk([((id<JavaUtilMap>) nil_chk(outgoingEdges_)) values])) {
    for (id<JavaUtilList> __strong ee in nil_chk([((id<JavaUtilMap>) nil_chk(e)) values])) {
      [edges addAllWithJavaUtilCollection:ee];
    }
  }
  return edges;
}

- (jboolean)isEmpty {
  return [((id<JavaUtilMap>) nil_chk(outgoingEdges_)) isEmpty];
}

- (void)removeZeroDegreeNodes {
  id<JavaUtilList> toDelete = new_JavaUtilArrayList_init();
  for (id __strong vertex in nil_chk([((id<JavaUtilMap>) nil_chk(outgoingEdges_)) keySet])) {
    if ([((id<JavaUtilMap>) nil_chk([outgoingEdges_ getWithId:vertex])) isEmpty] && [((id<JavaUtilMap>) nil_chk([((id<JavaUtilMap>) nil_chk(incomingEdges_)) getWithId:vertex])) isEmpty]) {
      [toDelete addWithId:vertex];
    }
  }
  for (id __strong vertex in toDelete) {
    (void) [outgoingEdges_ removeWithId:vertex];
    (void) [((id<JavaUtilMap>) nil_chk(incomingEdges_)) removeWithId:vertex];
  }
}

- (id<JavaUtilList>)getEdgesWithId:(id)source
                            withId:(id)dest {
  id<JavaUtilMap> childrenMap = [((id<JavaUtilMap>) nil_chk(outgoingEdges_)) getWithId:source];
  if (childrenMap == nil) {
    return JavaUtilCollections_emptyList();
  }
  id<JavaUtilList> edges = [childrenMap getWithId:dest];
  if (edges == nil) {
    return JavaUtilCollections_emptyList();
  }
  return JavaUtilCollections_unmodifiableListWithJavaUtilList_(edges);
}

- (id<JavaUtilList>)getShortestPathWithId:(id)node1
                                   withId:(id)node2 {
  if (![((id<JavaUtilMap>) nil_chk(outgoingEdges_)) containsKeyWithId:node1] || ![outgoingEdges_ containsKeyWithId:node2]) {
    return nil;
  }
  return [self getShortestPathWithId:node1 withId:node2 withBoolean:false];
}

- (id<JavaUtilList>)getShortestPathEdgesWithId:(id)node1
                                        withId:(id)node2 {
  return [self convertPathWithJavaUtilList:[self getShortestPathWithId:node1 withId:node2] withBoolean:false];
}

- (id<JavaUtilList>)getShortestPathWithId:(id)node1
                                   withId:(id)node2
                              withBoolean:(jboolean)directionSensitive {
  if (![((id<JavaUtilMap>) nil_chk(outgoingEdges_)) containsKeyWithId:node1] || ![outgoingEdges_ containsKeyWithId:node2]) {
    return nil;
  }
  return EduStanfordNlpGraphDijkstraShortestPath_getShortestPathWithEduStanfordNlpGraphGraph_withId_withId_withBoolean_(self, node1, node2, directionSensitive);
}

- (id<JavaUtilList>)getShortestPathEdgesWithId:(id)node1
                                        withId:(id)node2
                                   withBoolean:(jboolean)directionSensitive {
  return [self convertPathWithJavaUtilList:[self getShortestPathWithId:node1 withId:node2 withBoolean:directionSensitive] withBoolean:directionSensitive];
}

- (id<JavaUtilList>)convertPathWithJavaUtilList:(id<JavaUtilList>)nodes
                                    withBoolean:(jboolean)directionSensitive {
  if (nodes == nil) return nil;
  if ([nodes size] <= 1) return JavaUtilCollections_emptyList();
  id<JavaUtilList> path = new_JavaUtilArrayList_init();
  id<JavaUtilIterator> nodeIterator = [nodes iterator];
  id previous = [((id<JavaUtilIterator>) nil_chk(nodeIterator)) next];
  while ([nodeIterator hasNext]) {
    id next = [nodeIterator next];
    id connection = nil;
    id<JavaUtilList> edges = [self getEdgesWithId:previous withId:next];
    if ([((id<JavaUtilList>) nil_chk(edges)) size] == 0 && !directionSensitive) {
      edges = [self getEdgesWithId:next withId:previous];
    }
    if ([((id<JavaUtilList>) nil_chk(edges)) size] > 0) {
      connection = [edges getWithInt:0];
    }
    else {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Path given with missing edge connection");
    }
    [path addWithId:connection];
    previous = next;
  }
  return path;
}

- (jint)getInDegreeWithId:(id)vertex {
  if (![self containsVertexWithId:vertex]) {
    return 0;
  }
  jint result = 0;
  id<JavaUtilMap> incoming = [((id<JavaUtilMap>) nil_chk(incomingEdges_)) getWithId:vertex];
  for (id<JavaUtilList> __strong edges in nil_chk([((id<JavaUtilMap>) nil_chk(incoming)) values])) {
    result += [((id<JavaUtilList>) nil_chk(edges)) size];
  }
  return result;
}

- (jint)getOutDegreeWithId:(id)vertex {
  jint result = 0;
  id<JavaUtilMap> outgoing = [((id<JavaUtilMap>) nil_chk(outgoingEdges_)) getWithId:vertex];
  if (outgoing == nil) {
    return 0;
  }
  for (id<JavaUtilList> __strong edges in nil_chk([outgoing values])) {
    result += [((id<JavaUtilList>) nil_chk(edges)) size];
  }
  return result;
}

- (id<JavaUtilList>)getConnectedComponents {
  return EduStanfordNlpGraphConnectedComponents_getConnectedComponentsWithEduStanfordNlpGraphGraph_(self);
}

- (void)deleteDuplicateEdges {
  for (id __strong vertex in nil_chk([self getAllVertices])) {
    for (id __strong vertex2 in nil_chk([((id<JavaUtilMap>) nil_chk([((id<JavaUtilMap>) nil_chk(outgoingEdges_)) getWithId:vertex])) keySet])) {
      id<JavaUtilList> data = [((id<JavaUtilMap>) nil_chk([outgoingEdges_ getWithId:vertex])) getWithId:vertex2];
      id<JavaUtilSet> deduplicatedData = new_JavaUtilTreeSet_initWithJavaUtilCollection_(data);
      [((id<JavaUtilList>) nil_chk(data)) clear];
      [data addAllWithJavaUtilCollection:deduplicatedData];
    }
    for (id __strong vertex2 in nil_chk([((id<JavaUtilMap>) nil_chk([((id<JavaUtilMap>) nil_chk(incomingEdges_)) getWithId:vertex])) keySet])) {
      id<JavaUtilList> data = [((id<JavaUtilMap>) nil_chk([incomingEdges_ getWithId:vertex])) getWithId:vertex2];
      id<JavaUtilSet> deduplicatedData = new_JavaUtilTreeSet_initWithJavaUtilCollection_(data);
      [((id<JavaUtilList>) nil_chk(data)) clear];
      [data addAllWithJavaUtilCollection:deduplicatedData];
    }
  }
}

- (id<JavaUtilIterator>)incomingEdgeIteratorWithId:(id)vertex {
  return new_EduStanfordNlpGraphDirectedMultiGraph_EdgeIterator_initWithJavaUtilMap_withId_(incomingEdges_, vertex);
}

- (id<JavaLangIterable>)incomingEdgeIterableWithId:(id)vertex {
  return new_EduStanfordNlpGraphDirectedMultiGraph_$Lambda$1_initWithEduStanfordNlpGraphDirectedMultiGraph_withId_(self, vertex);
}

- (id<JavaUtilIterator>)outgoingEdgeIteratorWithId:(id)vertex {
  return new_EduStanfordNlpGraphDirectedMultiGraph_EdgeIterator_initWithJavaUtilMap_withId_(outgoingEdges_, vertex);
}

- (id<JavaLangIterable>)outgoingEdgeIterableWithId:(id)vertex {
  return new_EduStanfordNlpGraphDirectedMultiGraph_$Lambda$2_initWithEduStanfordNlpGraphDirectedMultiGraph_withId_(self, vertex);
}

- (id<JavaUtilIterator>)edgeIterator {
  return new_EduStanfordNlpGraphDirectedMultiGraph_EdgeIterator_initWithEduStanfordNlpGraphDirectedMultiGraph_(self);
}

- (id<JavaLangIterable>)edgeIterable {
  return new_EduStanfordNlpGraphDirectedMultiGraph_$Lambda$3_initWithEduStanfordNlpGraphDirectedMultiGraph_(self);
}

- (id<JavaUtilMap>)toMap {
  id<JavaUtilMap> map = [((EduStanfordNlpUtilMapFactory *) nil_chk(innerMapFactory_)) newMap];
  for (id __strong vertex in nil_chk([self getAllVertices])) {
    (void) [((id<JavaUtilMap>) nil_chk(map)) putWithId:vertex withId:[self getOutgoingEdgesWithId:vertex]];
  }
  return map;
}

- (NSString *)description {
  JavaLangStringBuilder *s = new_JavaLangStringBuilder_init();
  (void) [s appendWithNSString:@"{\n"];
  (void) [s appendWithNSString:@"Vertices:\n"];
  for (id __strong vertex in nil_chk([((id<JavaUtilMap>) nil_chk(outgoingEdges_)) keySet])) {
    (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([s appendWithNSString:@"  "])) appendWithId:vertex])) appendWithChar:0x000a];
  }
  (void) [s appendWithNSString:@"Edges:\n"];
  for (id __strong source in nil_chk([outgoingEdges_ keySet])) {
    for (id __strong dest in nil_chk([((id<JavaUtilMap>) nil_chk([outgoingEdges_ getWithId:source])) keySet])) {
      for (id __strong edge in nil_chk([((id<JavaUtilMap>) nil_chk([outgoingEdges_ getWithId:source])) getWithId:dest])) {
        (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([s appendWithNSString:@"  "])) appendWithId:source])) appendWithNSString:@" -> "])) appendWithId:dest])) appendWithNSString:@" : "])) appendWithId:edge])) appendWithChar:0x000a];
      }
    }
  }
  (void) [s appendWithChar:'}'];
  return [s description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, 3, -1, -1 },
    { NULL, "I", 0x1, 4, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 7, 6, -1, 8, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x2, 9, 6, -1, 10, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x2, 11, 6, -1, 10, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, 14, -1, -1 },
    { NULL, "Z", 0x1, 15, 16, -1, 17, -1, -1 },
    { NULL, "Z", 0x1, 18, 13, -1, 19, -1, -1 },
    { NULL, "Z", 0x1, 20, 6, -1, 8, -1, -1 },
    { NULL, "Z", 0x1, 21, 22, -1, 23, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 24, 6, -1, 25, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 26, 6, -1, 25, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, 27, 6, -1, 28, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, 29, 6, -1, 28, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, 30, 6, -1, 28, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 31, 6, -1, 8, -1, -1 },
    { NULL, "Z", 0x1, 32, 16, -1, 17, -1, -1 },
    { NULL, "Z", 0x1, 33, 16, -1, 17, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 34, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 35, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 36, 16, -1, 37, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 38, 16, -1, 39, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 40, 16, -1, 37, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 38, 41, -1, 42, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 40, 41, -1, 43, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 44, 45, -1, 46, -1, -1 },
    { NULL, "I", 0x1, 47, 6, -1, 48, -1, -1 },
    { NULL, "I", 0x1, 49, 6, -1, 48, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 50, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, 51, 6, -1, 52, -1, -1 },
    { NULL, "LJavaLangIterable;", 0x1, 53, 6, -1, 54, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, 55, 6, -1, 52, -1, -1 },
    { NULL, "LJavaLangIterable;", 0x1, 56, 6, -1, 54, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 57, -1, -1 },
    { NULL, "LJavaLangIterable;", 0x1, -1, -1, -1, 58, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 59, -1, -1 },
    { NULL, "LNSString;", 0x1, 60, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithEduStanfordNlpUtilMapFactory:withEduStanfordNlpUtilMapFactory:);
  methods[2].selector = @selector(initWithEduStanfordNlpGraphDirectedMultiGraph:);
  methods[3].selector = @selector(hash);
  methods[4].selector = @selector(isEqual:);
  methods[5].selector = @selector(addVertexWithId:);
  methods[6].selector = @selector(getOutgoingEdgesMapWithId:);
  methods[7].selector = @selector(getIncomingEdgesMapWithId:);
  methods[8].selector = @selector(addWithId:withId:withId:);
  methods[9].selector = @selector(removeEdgesWithId:withId:);
  methods[10].selector = @selector(removeEdgeWithId:withId:withId:);
  methods[11].selector = @selector(removeVertexWithId:);
  methods[12].selector = @selector(removeVerticesWithJavaUtilCollection:);
  methods[13].selector = @selector(getNumVertices);
  methods[14].selector = @selector(getOutgoingEdgesWithId:);
  methods[15].selector = @selector(getIncomingEdgesWithId:);
  methods[16].selector = @selector(getNumEdges);
  methods[17].selector = @selector(getParentsWithId:);
  methods[18].selector = @selector(getChildrenWithId:);
  methods[19].selector = @selector(getNeighborsWithId:);
  methods[20].selector = @selector(clear);
  methods[21].selector = @selector(containsVertexWithId:);
  methods[22].selector = @selector(isEdgeWithId:withId:);
  methods[23].selector = @selector(isNeighborWithId:withId:);
  methods[24].selector = @selector(getAllVertices);
  methods[25].selector = @selector(getAllEdges);
  methods[26].selector = @selector(isEmpty);
  methods[27].selector = @selector(removeZeroDegreeNodes);
  methods[28].selector = @selector(getEdgesWithId:withId:);
  methods[29].selector = @selector(getShortestPathWithId:withId:);
  methods[30].selector = @selector(getShortestPathEdgesWithId:withId:);
  methods[31].selector = @selector(getShortestPathWithId:withId:withBoolean:);
  methods[32].selector = @selector(getShortestPathEdgesWithId:withId:withBoolean:);
  methods[33].selector = @selector(convertPathWithJavaUtilList:withBoolean:);
  methods[34].selector = @selector(getInDegreeWithId:);
  methods[35].selector = @selector(getOutDegreeWithId:);
  methods[36].selector = @selector(getConnectedComponents);
  methods[37].selector = @selector(deleteDuplicateEdges);
  methods[38].selector = @selector(incomingEdgeIteratorWithId:);
  methods[39].selector = @selector(incomingEdgeIterableWithId:);
  methods[40].selector = @selector(outgoingEdgeIteratorWithId:);
  methods[41].selector = @selector(outgoingEdgeIterableWithId:);
  methods[42].selector = @selector(edgeIterator);
  methods[43].selector = @selector(edgeIterable);
  methods[44].selector = @selector(toMap);
  methods[45].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "outgoingEdges_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x10, -1, -1, 61, -1 },
    { "incomingEdges_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x10, -1, -1, 61, -1 },
    { "outerMapFactory_", "LEduStanfordNlpUtilMapFactory;", .constantValue.asLong = 0, 0x10, -1, -1, 62, -1 },
    { "innerMapFactory_", "LEduStanfordNlpUtilMapFactory;", .constantValue.asLong = 0, 0x10, -1, -1, 63, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpGraphDirectedMultiGraph_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpUtilMapFactory;LEduStanfordNlpUtilMapFactory;", "(Ledu/stanford/nlp/util/MapFactory<TV;Ljava/util/Map<TV;Ljava/util/List<TE;>;>;>;Ledu/stanford/nlp/util/MapFactory<TV;Ljava/util/List<TE;>;>;)V", "LEduStanfordNlpGraphDirectedMultiGraph;", "(Ledu/stanford/nlp/graph/DirectedMultiGraph<TV;TE;>;)V", "hashCode", "equals", "LNSObject;", "addVertex", "(TV;)Z", "getOutgoingEdgesMap", "(TV;)Ljava/util/Map<TV;Ljava/util/List<TE;>;>;", "getIncomingEdgesMap", "add", "LNSObject;LNSObject;LNSObject;", "(TV;TV;TE;)V", "removeEdges", "LNSObject;LNSObject;", "(TV;TV;)Z", "removeEdge", "(TV;TV;TE;)Z", "removeVertex", "removeVertices", "LJavaUtilCollection;", "(Ljava/util/Collection<TV;>;)Z", "getOutgoingEdges", "(TV;)Ljava/util/List<TE;>;", "getIncomingEdges", "getParents", "(TV;)Ljava/util/Set<TV;>;", "getChildren", "getNeighbors", "containsVertex", "isEdge", "isNeighbor", "()Ljava/util/Set<TV;>;", "()Ljava/util/List<TE;>;", "getEdges", "(TV;TV;)Ljava/util/List<TE;>;", "getShortestPath", "(TV;TV;)Ljava/util/List<TV;>;", "getShortestPathEdges", "LNSObject;LNSObject;Z", "(TV;TV;Z)Ljava/util/List<TV;>;", "(TV;TV;Z)Ljava/util/List<TE;>;", "convertPath", "LJavaUtilList;Z", "(Ljava/util/List<TV;>;Z)Ljava/util/List<TE;>;", "getInDegree", "(TV;)I", "getOutDegree", "()Ljava/util/List<Ljava/util/Set<TV;>;>;", "incomingEdgeIterator", "(TV;)Ljava/util/Iterator<TE;>;", "incomingEdgeIterable", "(TV;)Ljava/lang/Iterable<TE;>;", "outgoingEdgeIterator", "outgoingEdgeIterable", "()Ljava/util/Iterator<TE;>;", "()Ljava/lang/Iterable<TE;>;", "()Ljava/util/Map<TV;Ljava/util/List<TE;>;>;", "toString", "Ljava/util/Map<TV;Ljava/util/Map<TV;Ljava/util/List<TE;>;>;>;", "Ledu/stanford/nlp/util/MapFactory<TV;Ljava/util/Map<TV;Ljava/util/List<TE;>;>;>;", "Ledu/stanford/nlp/util/MapFactory<TV;Ljava/util/List<TE;>;>;", "LEduStanfordNlpGraphDirectedMultiGraph_EdgeIterator;", "<V:Ljava/lang/Object;E:Ljava/lang/Object;>Ljava/lang/Object;Ledu/stanford/nlp/graph/Graph<TV;TE;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpGraphDirectedMultiGraph = { "DirectedMultiGraph", "edu.stanford.nlp.graph", ptrTable, methods, fields, 7, 0x1, 46, 5, -1, 64, -1, 65, -1 };
  return &_EduStanfordNlpGraphDirectedMultiGraph;
}

@end

void EduStanfordNlpGraphDirectedMultiGraph_init(EduStanfordNlpGraphDirectedMultiGraph *self) {
  EduStanfordNlpGraphDirectedMultiGraph_initWithEduStanfordNlpUtilMapFactory_withEduStanfordNlpUtilMapFactory_(self, EduStanfordNlpUtilMapFactory_hashMapFactory(), EduStanfordNlpUtilMapFactory_hashMapFactory());
}

EduStanfordNlpGraphDirectedMultiGraph *new_EduStanfordNlpGraphDirectedMultiGraph_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpGraphDirectedMultiGraph, init)
}

EduStanfordNlpGraphDirectedMultiGraph *create_EduStanfordNlpGraphDirectedMultiGraph_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpGraphDirectedMultiGraph, init)
}

void EduStanfordNlpGraphDirectedMultiGraph_initWithEduStanfordNlpUtilMapFactory_withEduStanfordNlpUtilMapFactory_(EduStanfordNlpGraphDirectedMultiGraph *self, EduStanfordNlpUtilMapFactory *outerMapFactory, EduStanfordNlpUtilMapFactory *innerMapFactory) {
  NSObject_init(self);
  self->outerMapFactory_ = outerMapFactory;
  self->innerMapFactory_ = innerMapFactory;
  self->outgoingEdges_ = [((EduStanfordNlpUtilMapFactory *) nil_chk(outerMapFactory)) newMap];
  self->incomingEdges_ = [outerMapFactory newMap];
}

EduStanfordNlpGraphDirectedMultiGraph *new_EduStanfordNlpGraphDirectedMultiGraph_initWithEduStanfordNlpUtilMapFactory_withEduStanfordNlpUtilMapFactory_(EduStanfordNlpUtilMapFactory *outerMapFactory, EduStanfordNlpUtilMapFactory *innerMapFactory) {
  J2OBJC_NEW_IMPL(EduStanfordNlpGraphDirectedMultiGraph, initWithEduStanfordNlpUtilMapFactory_withEduStanfordNlpUtilMapFactory_, outerMapFactory, innerMapFactory)
}

EduStanfordNlpGraphDirectedMultiGraph *create_EduStanfordNlpGraphDirectedMultiGraph_initWithEduStanfordNlpUtilMapFactory_withEduStanfordNlpUtilMapFactory_(EduStanfordNlpUtilMapFactory *outerMapFactory, EduStanfordNlpUtilMapFactory *innerMapFactory) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpGraphDirectedMultiGraph, initWithEduStanfordNlpUtilMapFactory_withEduStanfordNlpUtilMapFactory_, outerMapFactory, innerMapFactory)
}

void EduStanfordNlpGraphDirectedMultiGraph_initWithEduStanfordNlpGraphDirectedMultiGraph_(EduStanfordNlpGraphDirectedMultiGraph *self, EduStanfordNlpGraphDirectedMultiGraph *graph) {
  EduStanfordNlpGraphDirectedMultiGraph_initWithEduStanfordNlpUtilMapFactory_withEduStanfordNlpUtilMapFactory_(self, ((EduStanfordNlpGraphDirectedMultiGraph *) nil_chk(graph))->outerMapFactory_, graph->innerMapFactory_);
  for (id<JavaUtilMap_Entry> __strong map in nil_chk([((id<JavaUtilMap>) nil_chk(graph->outgoingEdges_)) entrySet])) {
    id<JavaUtilMap> edgesCopy = [((EduStanfordNlpUtilMapFactory *) nil_chk(self->innerMapFactory_)) newMap];
    for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((id<JavaUtilMap>) nil_chk([((id<JavaUtilMap_Entry>) nil_chk(map)) getValue])) entrySet])) {
      (void) [((id<JavaUtilMap>) nil_chk(edgesCopy)) putWithId:[((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey] withId:EduStanfordNlpUtilGenerics_newArrayListWithJavaUtilCollection_([entry_ getValue])];
    }
    (void) [self->outgoingEdges_ putWithId:[map getKey] withId:edgesCopy];
  }
  for (id<JavaUtilMap_Entry> __strong map in nil_chk([((id<JavaUtilMap>) nil_chk(graph->incomingEdges_)) entrySet])) {
    id<JavaUtilMap> edgesCopy = [((EduStanfordNlpUtilMapFactory *) nil_chk(self->innerMapFactory_)) newMap];
    for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((id<JavaUtilMap>) nil_chk([((id<JavaUtilMap_Entry>) nil_chk(map)) getValue])) entrySet])) {
      (void) [((id<JavaUtilMap>) nil_chk(edgesCopy)) putWithId:[((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey] withId:EduStanfordNlpUtilGenerics_newArrayListWithJavaUtilCollection_([entry_ getValue])];
    }
    (void) [self->incomingEdges_ putWithId:[map getKey] withId:edgesCopy];
  }
}

EduStanfordNlpGraphDirectedMultiGraph *new_EduStanfordNlpGraphDirectedMultiGraph_initWithEduStanfordNlpGraphDirectedMultiGraph_(EduStanfordNlpGraphDirectedMultiGraph *graph) {
  J2OBJC_NEW_IMPL(EduStanfordNlpGraphDirectedMultiGraph, initWithEduStanfordNlpGraphDirectedMultiGraph_, graph)
}

EduStanfordNlpGraphDirectedMultiGraph *create_EduStanfordNlpGraphDirectedMultiGraph_initWithEduStanfordNlpGraphDirectedMultiGraph_(EduStanfordNlpGraphDirectedMultiGraph *graph) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpGraphDirectedMultiGraph, initWithEduStanfordNlpGraphDirectedMultiGraph_, graph)
}

id<JavaUtilMap> EduStanfordNlpGraphDirectedMultiGraph_getOutgoingEdgesMapWithId_(EduStanfordNlpGraphDirectedMultiGraph *self, id v) {
  id<JavaUtilMap> map = [((id<JavaUtilMap>) nil_chk(self->outgoingEdges_)) getWithId:v];
  if (map == nil) {
    map = [((EduStanfordNlpUtilMapFactory *) nil_chk(self->innerMapFactory_)) newMap];
    (void) [self->outgoingEdges_ putWithId:v withId:map];
    (void) [((id<JavaUtilMap>) nil_chk(self->incomingEdges_)) putWithId:v withId:[self->innerMapFactory_ newMap]];
  }
  return map;
}

id<JavaUtilMap> EduStanfordNlpGraphDirectedMultiGraph_getIncomingEdgesMapWithId_(EduStanfordNlpGraphDirectedMultiGraph *self, id v) {
  id<JavaUtilMap> map = [((id<JavaUtilMap>) nil_chk(self->incomingEdges_)) getWithId:v];
  if (map == nil) {
    (void) [((id<JavaUtilMap>) nil_chk(self->outgoingEdges_)) putWithId:v withId:[((EduStanfordNlpUtilMapFactory *) nil_chk(self->innerMapFactory_)) newMap]];
    map = [self->innerMapFactory_ newMap];
    (void) [self->incomingEdges_ putWithId:v withId:map];
  }
  return map;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpGraphDirectedMultiGraph)

@implementation EduStanfordNlpGraphDirectedMultiGraph_EdgeIterator

- (instancetype)initWithEduStanfordNlpGraphDirectedMultiGraph:(EduStanfordNlpGraphDirectedMultiGraph *)graph {
  EduStanfordNlpGraphDirectedMultiGraph_EdgeIterator_initWithEduStanfordNlpGraphDirectedMultiGraph_(self, graph);
  return self;
}

- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)source
                             withId:(id)startVertex {
  EduStanfordNlpGraphDirectedMultiGraph_EdgeIterator_initWithJavaUtilMap_withId_(self, source, startVertex);
  return self;
}

- (jboolean)hasNext {
  EduStanfordNlpGraphDirectedMultiGraph_EdgeIterator_primeIterator(self);
  return hasNext_;
}

- (id)next {
  if (![self hasNext]) {
    @throw new_JavaUtilNoSuchElementException_initWithNSString_(@"Graph edge iterator exhausted.");
  }
  lastRemoved_ = [((id<JavaUtilIterator>) nil_chk(edgeIterator_)) next];
  return lastRemoved_;
}

- (void)primeIterator {
  EduStanfordNlpGraphDirectedMultiGraph_EdgeIterator_primeIterator(self);
}

- (void)remove {
  if (incomingEdges_ == nil) {
    @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"remove() is only valid if iterating over entire graph (Gabor was too lazy to implement the general case...sorry!)");
  }
  if (lastRemoved_ != nil) {
    if ([lastRemoved_ isKindOfClass:[EduStanfordNlpSemgraphSemanticGraphEdge class]]) {
      EduStanfordNlpSemgraphSemanticGraphEdge *edge = (EduStanfordNlpSemgraphSemanticGraphEdge *) cast_chk(lastRemoved_, [EduStanfordNlpSemgraphSemanticGraphEdge class]);
      [((id<JavaUtilList>) nil_chk([((id<JavaUtilMap>) nil_chk([incomingEdges_ getWithId:[edge getDependent]])) getWithId:[edge getGovernor]])) removeWithId:edge];
      [((id<JavaUtilIterator>) nil_chk(edgeIterator_)) remove];
    }
    else {
      [((id<JavaUtilIterator>) nil_chk(edgeIterator_)) remove];
    }
  }
}

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaUtilIterator_forEachRemainingWithJavaUtilFunctionConsumer_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, 3, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 4, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpGraphDirectedMultiGraph:);
  methods[1].selector = @selector(initWithJavaUtilMap:withId:);
  methods[2].selector = @selector(hasNext);
  methods[3].selector = @selector(next);
  methods[4].selector = @selector(primeIterator);
  methods[5].selector = @selector(remove);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "incomingEdges_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 5, -1 },
    { "vertexIterator_", "LJavaUtilIterator;", .constantValue.asLong = 0, 0x2, -1, -1, 6, -1 },
    { "connectionIterator_", "LJavaUtilIterator;", .constantValue.asLong = 0, 0x2, -1, -1, 7, -1 },
    { "edgeIterator_", "LJavaUtilIterator;", .constantValue.asLong = 0, 0x2, -1, -1, 8, -1 },
    { "lastRemoved_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, 9, -1 },
    { "hasNext_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpGraphDirectedMultiGraph;", "(Ledu/stanford/nlp/graph/DirectedMultiGraph<TV;TE;>;)V", "LJavaUtilMap;LNSObject;", "(Ljava/util/Map<TV;Ljava/util/Map<TV;Ljava/util/List<TE;>;>;>;TV;)V", "()TE;", "Ljava/util/Map<TV;Ljava/util/Map<TV;Ljava/util/List<TE;>;>;>;", "Ljava/util/Iterator<Ljava/util/Map<TV;Ljava/util/List<TE;>;>;>;", "Ljava/util/Iterator<Ljava/util/List<TE;>;>;", "Ljava/util/Iterator<TE;>;", "TE;", "<V:Ljava/lang/Object;E:Ljava/lang/Object;>Ljava/lang/Object;Ljava/util/Iterator<TE;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpGraphDirectedMultiGraph_EdgeIterator = { "EdgeIterator", "edu.stanford.nlp.graph", ptrTable, methods, fields, 7, 0x8, 6, 6, 0, -1, -1, 10, -1 };
  return &_EduStanfordNlpGraphDirectedMultiGraph_EdgeIterator;
}

@end

void EduStanfordNlpGraphDirectedMultiGraph_EdgeIterator_initWithEduStanfordNlpGraphDirectedMultiGraph_(EduStanfordNlpGraphDirectedMultiGraph_EdgeIterator *self, EduStanfordNlpGraphDirectedMultiGraph *graph) {
  NSObject_init(self);
  self->lastRemoved_ = nil;
  self->hasNext_ = true;
  self->vertexIterator_ = [((id<JavaUtilCollection>) nil_chk([((id<JavaUtilMap>) nil_chk(((EduStanfordNlpGraphDirectedMultiGraph *) nil_chk(graph))->outgoingEdges_)) values])) iterator];
  self->incomingEdges_ = graph->incomingEdges_;
}

EduStanfordNlpGraphDirectedMultiGraph_EdgeIterator *new_EduStanfordNlpGraphDirectedMultiGraph_EdgeIterator_initWithEduStanfordNlpGraphDirectedMultiGraph_(EduStanfordNlpGraphDirectedMultiGraph *graph) {
  J2OBJC_NEW_IMPL(EduStanfordNlpGraphDirectedMultiGraph_EdgeIterator, initWithEduStanfordNlpGraphDirectedMultiGraph_, graph)
}

EduStanfordNlpGraphDirectedMultiGraph_EdgeIterator *create_EduStanfordNlpGraphDirectedMultiGraph_EdgeIterator_initWithEduStanfordNlpGraphDirectedMultiGraph_(EduStanfordNlpGraphDirectedMultiGraph *graph) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpGraphDirectedMultiGraph_EdgeIterator, initWithEduStanfordNlpGraphDirectedMultiGraph_, graph)
}

void EduStanfordNlpGraphDirectedMultiGraph_EdgeIterator_initWithJavaUtilMap_withId_(EduStanfordNlpGraphDirectedMultiGraph_EdgeIterator *self, id<JavaUtilMap> source, id startVertex) {
  NSObject_init(self);
  self->lastRemoved_ = nil;
  self->hasNext_ = true;
  id<JavaUtilMap> neighbors = [((id<JavaUtilMap>) nil_chk(source)) getWithId:startVertex];
  if (neighbors != nil) {
    self->vertexIterator_ = nil;
    self->connectionIterator_ = [((id<JavaUtilCollection>) nil_chk([neighbors values])) iterator];
  }
  self->incomingEdges_ = nil;
}

EduStanfordNlpGraphDirectedMultiGraph_EdgeIterator *new_EduStanfordNlpGraphDirectedMultiGraph_EdgeIterator_initWithJavaUtilMap_withId_(id<JavaUtilMap> source, id startVertex) {
  J2OBJC_NEW_IMPL(EduStanfordNlpGraphDirectedMultiGraph_EdgeIterator, initWithJavaUtilMap_withId_, source, startVertex)
}

EduStanfordNlpGraphDirectedMultiGraph_EdgeIterator *create_EduStanfordNlpGraphDirectedMultiGraph_EdgeIterator_initWithJavaUtilMap_withId_(id<JavaUtilMap> source, id startVertex) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpGraphDirectedMultiGraph_EdgeIterator, initWithJavaUtilMap_withId_, source, startVertex)
}

void EduStanfordNlpGraphDirectedMultiGraph_EdgeIterator_primeIterator(EduStanfordNlpGraphDirectedMultiGraph_EdgeIterator *self) {
  if (self->edgeIterator_ != nil && [self->edgeIterator_ hasNext]) {
    self->hasNext_ = true;
  }
  else if (self->connectionIterator_ != nil && [self->connectionIterator_ hasNext]) {
    self->edgeIterator_ = [((id<JavaUtilList>) nil_chk([self->connectionIterator_ next])) iterator];
    EduStanfordNlpGraphDirectedMultiGraph_EdgeIterator_primeIterator(self);
  }
  else if (self->vertexIterator_ != nil && [self->vertexIterator_ hasNext]) {
    self->connectionIterator_ = [((id<JavaUtilCollection>) nil_chk([((id<JavaUtilMap>) nil_chk([self->vertexIterator_ next])) values])) iterator];
    EduStanfordNlpGraphDirectedMultiGraph_EdgeIterator_primeIterator(self);
  }
  else {
    self->hasNext_ = false;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpGraphDirectedMultiGraph_EdgeIterator)

@implementation EduStanfordNlpGraphDirectedMultiGraph_$Lambda$1

- (id<JavaUtilIterator>)iterator {
  return new_EduStanfordNlpGraphDirectedMultiGraph_EdgeIterator_initWithJavaUtilMap_withId_(this$0_->incomingEdges_, val$vertex_);
}

- (void)forEachWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaLangIterable_forEachWithJavaUtilFunctionConsumer_(self, arg0);
}

- (id<JavaUtilSpliterator>)spliterator {
  return JavaLangIterable_spliterator(self);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

@end

void EduStanfordNlpGraphDirectedMultiGraph_$Lambda$1_initWithEduStanfordNlpGraphDirectedMultiGraph_withId_(EduStanfordNlpGraphDirectedMultiGraph_$Lambda$1 *self, EduStanfordNlpGraphDirectedMultiGraph *outer$, id capture$0) {
  self->this$0_ = outer$;
  self->val$vertex_ = capture$0;
  NSObject_init(self);
}

EduStanfordNlpGraphDirectedMultiGraph_$Lambda$1 *new_EduStanfordNlpGraphDirectedMultiGraph_$Lambda$1_initWithEduStanfordNlpGraphDirectedMultiGraph_withId_(EduStanfordNlpGraphDirectedMultiGraph *outer$, id capture$0) {
  J2OBJC_NEW_IMPL(EduStanfordNlpGraphDirectedMultiGraph_$Lambda$1, initWithEduStanfordNlpGraphDirectedMultiGraph_withId_, outer$, capture$0)
}

EduStanfordNlpGraphDirectedMultiGraph_$Lambda$1 *create_EduStanfordNlpGraphDirectedMultiGraph_$Lambda$1_initWithEduStanfordNlpGraphDirectedMultiGraph_withId_(EduStanfordNlpGraphDirectedMultiGraph *outer$, id capture$0) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpGraphDirectedMultiGraph_$Lambda$1, initWithEduStanfordNlpGraphDirectedMultiGraph_withId_, outer$, capture$0)
}

@implementation EduStanfordNlpGraphDirectedMultiGraph_$Lambda$2

- (id<JavaUtilIterator>)iterator {
  return new_EduStanfordNlpGraphDirectedMultiGraph_EdgeIterator_initWithJavaUtilMap_withId_(this$0_->outgoingEdges_, val$vertex_);
}

- (void)forEachWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaLangIterable_forEachWithJavaUtilFunctionConsumer_(self, arg0);
}

- (id<JavaUtilSpliterator>)spliterator {
  return JavaLangIterable_spliterator(self);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

@end

void EduStanfordNlpGraphDirectedMultiGraph_$Lambda$2_initWithEduStanfordNlpGraphDirectedMultiGraph_withId_(EduStanfordNlpGraphDirectedMultiGraph_$Lambda$2 *self, EduStanfordNlpGraphDirectedMultiGraph *outer$, id capture$0) {
  self->this$0_ = outer$;
  self->val$vertex_ = capture$0;
  NSObject_init(self);
}

EduStanfordNlpGraphDirectedMultiGraph_$Lambda$2 *new_EduStanfordNlpGraphDirectedMultiGraph_$Lambda$2_initWithEduStanfordNlpGraphDirectedMultiGraph_withId_(EduStanfordNlpGraphDirectedMultiGraph *outer$, id capture$0) {
  J2OBJC_NEW_IMPL(EduStanfordNlpGraphDirectedMultiGraph_$Lambda$2, initWithEduStanfordNlpGraphDirectedMultiGraph_withId_, outer$, capture$0)
}

EduStanfordNlpGraphDirectedMultiGraph_$Lambda$2 *create_EduStanfordNlpGraphDirectedMultiGraph_$Lambda$2_initWithEduStanfordNlpGraphDirectedMultiGraph_withId_(EduStanfordNlpGraphDirectedMultiGraph *outer$, id capture$0) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpGraphDirectedMultiGraph_$Lambda$2, initWithEduStanfordNlpGraphDirectedMultiGraph_withId_, outer$, capture$0)
}

@implementation EduStanfordNlpGraphDirectedMultiGraph_$Lambda$3

- (id<JavaUtilIterator>)iterator {
  return new_EduStanfordNlpGraphDirectedMultiGraph_EdgeIterator_initWithEduStanfordNlpGraphDirectedMultiGraph_(this$0_);
}

- (void)forEachWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaLangIterable_forEachWithJavaUtilFunctionConsumer_(self, arg0);
}

- (id<JavaUtilSpliterator>)spliterator {
  return JavaLangIterable_spliterator(self);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

@end

void EduStanfordNlpGraphDirectedMultiGraph_$Lambda$3_initWithEduStanfordNlpGraphDirectedMultiGraph_(EduStanfordNlpGraphDirectedMultiGraph_$Lambda$3 *self, EduStanfordNlpGraphDirectedMultiGraph *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
}

EduStanfordNlpGraphDirectedMultiGraph_$Lambda$3 *new_EduStanfordNlpGraphDirectedMultiGraph_$Lambda$3_initWithEduStanfordNlpGraphDirectedMultiGraph_(EduStanfordNlpGraphDirectedMultiGraph *outer$) {
  J2OBJC_NEW_IMPL(EduStanfordNlpGraphDirectedMultiGraph_$Lambda$3, initWithEduStanfordNlpGraphDirectedMultiGraph_, outer$)
}

EduStanfordNlpGraphDirectedMultiGraph_$Lambda$3 *create_EduStanfordNlpGraphDirectedMultiGraph_$Lambda$3_initWithEduStanfordNlpGraphDirectedMultiGraph_(EduStanfordNlpGraphDirectedMultiGraph *outer$) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpGraphDirectedMultiGraph_$Lambda$3, initWithEduStanfordNlpGraphDirectedMultiGraph_, outer$)
}
