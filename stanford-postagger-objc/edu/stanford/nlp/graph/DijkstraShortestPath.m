//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/graph/DijkstraShortestPath.java
//

#include "J2ObjC_source.h"
#include "edu/stanford/nlp/graph/DijkstraShortestPath.h"
#include "edu/stanford/nlp/graph/Graph.h"
#include "edu/stanford/nlp/util/BinaryHeapPriorityQueue.h"
#include "edu/stanford/nlp/util/Generics.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

@interface EduStanfordNlpGraphDijkstraShortestPath ()

- (instancetype)init;

@end

__attribute__((unused)) static void EduStanfordNlpGraphDijkstraShortestPath_init(EduStanfordNlpGraphDijkstraShortestPath *self);

__attribute__((unused)) static EduStanfordNlpGraphDijkstraShortestPath *new_EduStanfordNlpGraphDijkstraShortestPath_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpGraphDijkstraShortestPath *create_EduStanfordNlpGraphDijkstraShortestPath_init();

@implementation EduStanfordNlpGraphDijkstraShortestPath

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpGraphDijkstraShortestPath_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (id<JavaUtilList>)getShortestPathWithEduStanfordNlpGraphGraph:(id<EduStanfordNlpGraphGraph>)graph
                                                         withId:(id)node1
                                                         withId:(id)node2
                                                    withBoolean:(jboolean)directionSensitive {
  return EduStanfordNlpGraphDijkstraShortestPath_getShortestPathWithEduStanfordNlpGraphGraph_withId_withId_withBoolean_(graph, node1, node2, directionSensitive);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 0, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getShortestPathWithEduStanfordNlpGraphGraph:withId:withId:withBoolean:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "getShortestPath", "LEduStanfordNlpGraphGraph;LNSObject;LNSObject;Z", "<V:Ljava/lang/Object;E:Ljava/lang/Object;>(Ledu/stanford/nlp/graph/Graph<TV;TE;>;TV;TV;Z)Ljava/util/List<TV;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpGraphDijkstraShortestPath = { "DijkstraShortestPath", "edu.stanford.nlp.graph", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_EduStanfordNlpGraphDijkstraShortestPath;
}

@end

void EduStanfordNlpGraphDijkstraShortestPath_init(EduStanfordNlpGraphDijkstraShortestPath *self) {
  NSObject_init(self);
}

EduStanfordNlpGraphDijkstraShortestPath *new_EduStanfordNlpGraphDijkstraShortestPath_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpGraphDijkstraShortestPath, init)
}

EduStanfordNlpGraphDijkstraShortestPath *create_EduStanfordNlpGraphDijkstraShortestPath_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpGraphDijkstraShortestPath, init)
}

id<JavaUtilList> EduStanfordNlpGraphDijkstraShortestPath_getShortestPathWithEduStanfordNlpGraphGraph_withId_withId_withBoolean_(id<EduStanfordNlpGraphGraph> graph, id node1, id node2, jboolean directionSensitive) {
  EduStanfordNlpGraphDijkstraShortestPath_initialize();
  if ([nil_chk(node1) isEqual:node2]) {
    return JavaUtilCollections_singletonListWithId_(node2);
  }
  id<JavaUtilSet> visited = EduStanfordNlpUtilGenerics_newHashSet();
  id<JavaUtilMap> previous = EduStanfordNlpUtilGenerics_newHashMap();
  EduStanfordNlpUtilBinaryHeapPriorityQueue *unsettledNodes = new_EduStanfordNlpUtilBinaryHeapPriorityQueue_init();
  [unsettledNodes addWithId:node1 withDouble:0];
  while ([unsettledNodes size] > 0) {
    jdouble distance = [unsettledNodes getPriority];
    id u = [unsettledNodes removeFirst];
    [((id<JavaUtilSet>) nil_chk(visited)) addWithId:u];
    if ([nil_chk(u) isEqual:node2]) break;
    [unsettledNodes removeWithId:u];
    id<JavaUtilSet> candidates = ((directionSensitive) ? [((id<EduStanfordNlpGraphGraph>) nil_chk(graph)) getChildrenWithId:u] : [((id<EduStanfordNlpGraphGraph>) nil_chk(graph)) getNeighborsWithId:u]);
    for (id __strong candidate in candidates) {
      jdouble alt = distance - 1;
      if (alt > [unsettledNodes getPriorityWithId:candidate] && ![visited containsWithId:candidate]) {
        [unsettledNodes relaxPriorityWithId:candidate withDouble:alt];
        (void) [((id<JavaUtilMap>) nil_chk(previous)) putWithId:candidate withId:u];
      }
    }
  }
  if (![((id<JavaUtilMap>) nil_chk(previous)) containsKeyWithId:node2]) return nil;
  JavaUtilArrayList *path = new_JavaUtilArrayList_init();
  [path addWithId:node2];
  id n = node2;
  while ([previous containsKeyWithId:n]) {
    [path addWithId:[previous getWithId:n]];
    n = [previous getWithId:n];
  }
  JavaUtilCollections_reverseWithJavaUtilList_(path);
  return path;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpGraphDijkstraShortestPath)
