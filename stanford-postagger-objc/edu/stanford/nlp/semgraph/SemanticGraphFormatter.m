//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/semgraph/SemanticGraphFormatter.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/ling/CoreLabel.h"
#include "edu/stanford/nlp/ling/IndexedWord.h"
#include "edu/stanford/nlp/semgraph/SemanticGraph.h"
#include "edu/stanford/nlp/semgraph/SemanticGraphEdge.h"
#include "edu/stanford/nlp/semgraph/SemanticGraphFormatter.h"
#include "edu/stanford/nlp/trees/GrammaticalRelation.h"
#include "edu/stanford/nlp/util/Generics.h"
#include "edu/stanford/nlp/util/StringUtils.h"
#include "java/io/PrintStream.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/Collection.h"
#include "java/util/List.h"
#include "java/util/Set.h"

@interface EduStanfordNlpSemgraphSemanticGraphFormatter () {
 @public
  jint width_;
  jint indent_;
  jboolean smartIndent_;
  jboolean showRelns_;
  jboolean showTags_;
  jboolean showAnnos_;
  jboolean showIndices_;
  JavaLangStringBuilder *out_;
  id<JavaUtilSet> used_;
}

- (void)formatSGNodeWithEduStanfordNlpSemgraphSemanticGraph:(EduStanfordNlpSemgraphSemanticGraph *)sg
                          withEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)node
                                                    withInt:(jint)spaces;

- (NSString *)formatSGNodeOnelineWithEduStanfordNlpSemgraphSemanticGraph:(EduStanfordNlpSemgraphSemanticGraph *)sg
                                       withEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)node;

- (void)formatSGNodeOnelineHelperWithEduStanfordNlpSemgraphSemanticGraph:(EduStanfordNlpSemgraphSemanticGraph *)sg
                                       withEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)node
                                               withJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                                                         withJavaUtilSet:(id<JavaUtilSet>)usedOneline;

- (void)formatSGNodeMultilineWithEduStanfordNlpSemgraphSemanticGraph:(EduStanfordNlpSemgraphSemanticGraph *)sg
                                   withEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)node
                                                             withInt:(jint)spaces;

- (NSString *)formatLabelWithEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)node;

- (void)testWithNSString:(NSString *)s;

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpSemgraphSemanticGraphFormatter, out_, JavaLangStringBuilder *)
J2OBJC_FIELD_SETTER(EduStanfordNlpSemgraphSemanticGraphFormatter, used_, id<JavaUtilSet>)

inline NSString *EduStanfordNlpSemgraphSemanticGraphFormatter_get_LPAREN();
static NSString *EduStanfordNlpSemgraphSemanticGraphFormatter_LPAREN = @"[";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpSemgraphSemanticGraphFormatter, LPAREN, NSString *)

inline NSString *EduStanfordNlpSemgraphSemanticGraphFormatter_get_RPAREN();
static NSString *EduStanfordNlpSemgraphSemanticGraphFormatter_RPAREN = @"]";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpSemgraphSemanticGraphFormatter, RPAREN, NSString *)

inline NSString *EduStanfordNlpSemgraphSemanticGraphFormatter_get_SPACE();
static NSString *EduStanfordNlpSemgraphSemanticGraphFormatter_SPACE = @" ";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpSemgraphSemanticGraphFormatter, SPACE, NSString *)

inline NSString *EduStanfordNlpSemgraphSemanticGraphFormatter_get_COLON();
static NSString *EduStanfordNlpSemgraphSemanticGraphFormatter_COLON = @">";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpSemgraphSemanticGraphFormatter, COLON, NSString *)

inline jint EduStanfordNlpSemgraphSemanticGraphFormatter_get_DEFAULT_WIDTH();
#define EduStanfordNlpSemgraphSemanticGraphFormatter_DEFAULT_WIDTH 80
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpSemgraphSemanticGraphFormatter, DEFAULT_WIDTH, jint)

inline jint EduStanfordNlpSemgraphSemanticGraphFormatter_get_DEFAULT_INDENT();
#define EduStanfordNlpSemgraphSemanticGraphFormatter_DEFAULT_INDENT 4
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpSemgraphSemanticGraphFormatter, DEFAULT_INDENT, jint)

inline jboolean EduStanfordNlpSemgraphSemanticGraphFormatter_get_DEFAULT_SMART_INDENT();
#define EduStanfordNlpSemgraphSemanticGraphFormatter_DEFAULT_SMART_INDENT true
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpSemgraphSemanticGraphFormatter, DEFAULT_SMART_INDENT, jboolean)

inline jboolean EduStanfordNlpSemgraphSemanticGraphFormatter_get_DEFAULT_SHOW_RELNS();
#define EduStanfordNlpSemgraphSemanticGraphFormatter_DEFAULT_SHOW_RELNS true
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpSemgraphSemanticGraphFormatter, DEFAULT_SHOW_RELNS, jboolean)

inline jboolean EduStanfordNlpSemgraphSemanticGraphFormatter_get_DEFAULT_SHOW_TAGS();
#define EduStanfordNlpSemgraphSemanticGraphFormatter_DEFAULT_SHOW_TAGS true
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpSemgraphSemanticGraphFormatter, DEFAULT_SHOW_TAGS, jboolean)

inline jboolean EduStanfordNlpSemgraphSemanticGraphFormatter_get_DEFAULT_SHOW_ANNOS();
#define EduStanfordNlpSemgraphSemanticGraphFormatter_DEFAULT_SHOW_ANNOS false
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpSemgraphSemanticGraphFormatter, DEFAULT_SHOW_ANNOS, jboolean)

inline jboolean EduStanfordNlpSemgraphSemanticGraphFormatter_get_DEFAULT_SHOW_INDICES();
#define EduStanfordNlpSemgraphSemanticGraphFormatter_DEFAULT_SHOW_INDICES false
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpSemgraphSemanticGraphFormatter, DEFAULT_SHOW_INDICES, jboolean)

__attribute__((unused)) static void EduStanfordNlpSemgraphSemanticGraphFormatter_formatSGNodeWithEduStanfordNlpSemgraphSemanticGraph_withEduStanfordNlpLingIndexedWord_withInt_(EduStanfordNlpSemgraphSemanticGraphFormatter *self, EduStanfordNlpSemgraphSemanticGraph *sg, EduStanfordNlpLingIndexedWord *node, jint spaces);

__attribute__((unused)) static NSString *EduStanfordNlpSemgraphSemanticGraphFormatter_formatSGNodeOnelineWithEduStanfordNlpSemgraphSemanticGraph_withEduStanfordNlpLingIndexedWord_(EduStanfordNlpSemgraphSemanticGraphFormatter *self, EduStanfordNlpSemgraphSemanticGraph *sg, EduStanfordNlpLingIndexedWord *node);

__attribute__((unused)) static void EduStanfordNlpSemgraphSemanticGraphFormatter_formatSGNodeOnelineHelperWithEduStanfordNlpSemgraphSemanticGraph_withEduStanfordNlpLingIndexedWord_withJavaLangStringBuilder_withJavaUtilSet_(EduStanfordNlpSemgraphSemanticGraphFormatter *self, EduStanfordNlpSemgraphSemanticGraph *sg, EduStanfordNlpLingIndexedWord *node, JavaLangStringBuilder *sb, id<JavaUtilSet> usedOneline);

__attribute__((unused)) static void EduStanfordNlpSemgraphSemanticGraphFormatter_formatSGNodeMultilineWithEduStanfordNlpSemgraphSemanticGraph_withEduStanfordNlpLingIndexedWord_withInt_(EduStanfordNlpSemgraphSemanticGraphFormatter *self, EduStanfordNlpSemgraphSemanticGraph *sg, EduStanfordNlpLingIndexedWord *node, jint spaces);

__attribute__((unused)) static NSString *EduStanfordNlpSemgraphSemanticGraphFormatter_formatLabelWithEduStanfordNlpLingIndexedWord_(EduStanfordNlpSemgraphSemanticGraphFormatter *self, EduStanfordNlpLingIndexedWord *node);

__attribute__((unused)) static void EduStanfordNlpSemgraphSemanticGraphFormatter_testWithNSString_(EduStanfordNlpSemgraphSemanticGraphFormatter *self, NSString *s);

@implementation EduStanfordNlpSemgraphSemanticGraphFormatter

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpSemgraphSemanticGraphFormatter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithInt:(jint)width
                    withInt:(jint)indent
                withBoolean:(jboolean)smartIndent
                withBoolean:(jboolean)showRelns
                withBoolean:(jboolean)showTags
                withBoolean:(jboolean)showAnnos
                withBoolean:(jboolean)showIndices {
  EduStanfordNlpSemgraphSemanticGraphFormatter_initWithInt_withInt_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_(self, width, indent, smartIndent, showRelns, showTags, showAnnos, showIndices);
  return self;
}

- (NSString *)formatSemanticGraphWithEduStanfordNlpSemgraphSemanticGraph:(EduStanfordNlpSemgraphSemanticGraph *)sg {
  if ([((id<JavaUtilSet>) nil_chk([((EduStanfordNlpSemgraphSemanticGraph *) nil_chk(sg)) vertexSet])) isEmpty]) {
    return @"[]";
  }
  out_ = new_JavaLangStringBuilder_init();
  used_ = EduStanfordNlpUtilGenerics_newHashSet();
  if ([((id<JavaUtilCollection>) nil_chk([sg getRoots])) size] == 1) {
    EduStanfordNlpSemgraphSemanticGraphFormatter_formatSGNodeWithEduStanfordNlpSemgraphSemanticGraph_withEduStanfordNlpLingIndexedWord_withInt_(self, sg, [sg getFirstRoot], 1);
  }
  else {
    jint index = 0;
    for (EduStanfordNlpLingIndexedWord * __strong root in nil_chk([sg getRoots])) {
      index += 1;
      (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(out_)) appendWithNSString:@"root_"])) appendWithInt:index])) appendWithNSString:@"> "];
      EduStanfordNlpSemgraphSemanticGraphFormatter_formatSGNodeWithEduStanfordNlpSemgraphSemanticGraph_withEduStanfordNlpLingIndexedWord_withInt_(self, sg, root, 9);
      (void) [((JavaLangStringBuilder *) nil_chk(out_)) appendWithNSString:@"\n"];
    }
  }
  NSString *result = [((JavaLangStringBuilder *) nil_chk(out_)) description];
  if (![((NSString *) nil_chk(result)) hasPrefix:@"["]) {
    result = JreStrcat("C$C", '[', result, ']');
  }
  return result;
}

- (void)formatSGNodeWithEduStanfordNlpSemgraphSemanticGraph:(EduStanfordNlpSemgraphSemanticGraph *)sg
                          withEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)node
                                                    withInt:(jint)spaces {
  EduStanfordNlpSemgraphSemanticGraphFormatter_formatSGNodeWithEduStanfordNlpSemgraphSemanticGraph_withEduStanfordNlpLingIndexedWord_withInt_(self, sg, node, spaces);
}

- (NSString *)formatSGNodeOnelineWithEduStanfordNlpSemgraphSemanticGraph:(EduStanfordNlpSemgraphSemanticGraph *)sg
                                       withEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)node {
  return EduStanfordNlpSemgraphSemanticGraphFormatter_formatSGNodeOnelineWithEduStanfordNlpSemgraphSemanticGraph_withEduStanfordNlpLingIndexedWord_(self, sg, node);
}

- (void)formatSGNodeOnelineHelperWithEduStanfordNlpSemgraphSemanticGraph:(EduStanfordNlpSemgraphSemanticGraph *)sg
                                       withEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)node
                                               withJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                                                         withJavaUtilSet:(id<JavaUtilSet>)usedOneline {
  EduStanfordNlpSemgraphSemanticGraphFormatter_formatSGNodeOnelineHelperWithEduStanfordNlpSemgraphSemanticGraph_withEduStanfordNlpLingIndexedWord_withJavaLangStringBuilder_withJavaUtilSet_(self, sg, node, sb, usedOneline);
}

- (void)formatSGNodeMultilineWithEduStanfordNlpSemgraphSemanticGraph:(EduStanfordNlpSemgraphSemanticGraph *)sg
                                   withEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)node
                                                             withInt:(jint)spaces {
  EduStanfordNlpSemgraphSemanticGraphFormatter_formatSGNodeMultilineWithEduStanfordNlpSemgraphSemanticGraph_withEduStanfordNlpLingIndexedWord_withInt_(self, sg, node, spaces);
}

- (NSString *)formatLabelWithEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)node {
  return EduStanfordNlpSemgraphSemanticGraphFormatter_formatLabelWithEduStanfordNlpLingIndexedWord_(self, node);
}

- (void)testWithNSString:(NSString *)s {
  EduStanfordNlpSemgraphSemanticGraphFormatter_testWithNSString_(self, s);
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  EduStanfordNlpSemgraphSemanticGraphFormatter_mainWithNSStringArray_(args);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 7, 8, -1, 9, -1, -1 },
    { NULL, "V", 0x2, 10, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 15, 16, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithInt:withInt:withBoolean:withBoolean:withBoolean:withBoolean:withBoolean:);
  methods[2].selector = @selector(formatSemanticGraphWithEduStanfordNlpSemgraphSemanticGraph:);
  methods[3].selector = @selector(formatSGNodeWithEduStanfordNlpSemgraphSemanticGraph:withEduStanfordNlpLingIndexedWord:withInt:);
  methods[4].selector = @selector(formatSGNodeOnelineWithEduStanfordNlpSemgraphSemanticGraph:withEduStanfordNlpLingIndexedWord:);
  methods[5].selector = @selector(formatSGNodeOnelineHelperWithEduStanfordNlpSemgraphSemanticGraph:withEduStanfordNlpLingIndexedWord:withJavaLangStringBuilder:withJavaUtilSet:);
  methods[6].selector = @selector(formatSGNodeMultilineWithEduStanfordNlpSemgraphSemanticGraph:withEduStanfordNlpLingIndexedWord:withInt:);
  methods[7].selector = @selector(formatLabelWithEduStanfordNlpLingIndexedWord:);
  methods[8].selector = @selector(testWithNSString:);
  methods[9].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "LPAREN", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 17, -1, -1 },
    { "RPAREN", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 18, -1, -1 },
    { "SPACE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 19, -1, -1 },
    { "COLON", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 20, -1, -1 },
    { "DEFAULT_WIDTH", "I", .constantValue.asInt = EduStanfordNlpSemgraphSemanticGraphFormatter_DEFAULT_WIDTH, 0x1a, -1, -1, -1, -1 },
    { "DEFAULT_INDENT", "I", .constantValue.asInt = EduStanfordNlpSemgraphSemanticGraphFormatter_DEFAULT_INDENT, 0x1a, -1, -1, -1, -1 },
    { "DEFAULT_SMART_INDENT", "Z", .constantValue.asBOOL = EduStanfordNlpSemgraphSemanticGraphFormatter_DEFAULT_SMART_INDENT, 0x1a, -1, -1, -1, -1 },
    { "DEFAULT_SHOW_RELNS", "Z", .constantValue.asBOOL = EduStanfordNlpSemgraphSemanticGraphFormatter_DEFAULT_SHOW_RELNS, 0x1a, -1, -1, -1, -1 },
    { "DEFAULT_SHOW_TAGS", "Z", .constantValue.asBOOL = EduStanfordNlpSemgraphSemanticGraphFormatter_DEFAULT_SHOW_TAGS, 0x1a, -1, -1, -1, -1 },
    { "DEFAULT_SHOW_ANNOS", "Z", .constantValue.asBOOL = EduStanfordNlpSemgraphSemanticGraphFormatter_DEFAULT_SHOW_ANNOS, 0x1a, -1, -1, -1, -1 },
    { "DEFAULT_SHOW_INDICES", "Z", .constantValue.asBOOL = EduStanfordNlpSemgraphSemanticGraphFormatter_DEFAULT_SHOW_INDICES, 0x1a, -1, -1, -1, -1 },
    { "width_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "indent_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "smartIndent_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "showRelns_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "showTags_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "showAnnos_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "showIndices_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "out_", "LJavaLangStringBuilder;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "used_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x2, -1, -1, 21, -1 },
  };
  static const void *ptrTable[] = { "IIZZZZZ", "formatSemanticGraph", "LEduStanfordNlpSemgraphSemanticGraph;", "formatSGNode", "LEduStanfordNlpSemgraphSemanticGraph;LEduStanfordNlpLingIndexedWord;I", "formatSGNodeOneline", "LEduStanfordNlpSemgraphSemanticGraph;LEduStanfordNlpLingIndexedWord;", "formatSGNodeOnelineHelper", "LEduStanfordNlpSemgraphSemanticGraph;LEduStanfordNlpLingIndexedWord;LJavaLangStringBuilder;LJavaUtilSet;", "(Ledu/stanford/nlp/semgraph/SemanticGraph;Ledu/stanford/nlp/ling/IndexedWord;Ljava/lang/StringBuilder;Ljava/util/Set<Ledu/stanford/nlp/ling/IndexedWord;>;)V", "formatSGNodeMultiline", "formatLabel", "LEduStanfordNlpLingIndexedWord;", "test", "LNSString;", "main", "[LNSString;", &EduStanfordNlpSemgraphSemanticGraphFormatter_LPAREN, &EduStanfordNlpSemgraphSemanticGraphFormatter_RPAREN, &EduStanfordNlpSemgraphSemanticGraphFormatter_SPACE, &EduStanfordNlpSemgraphSemanticGraphFormatter_COLON, "Ljava/util/Set<Ledu/stanford/nlp/ling/IndexedWord;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpSemgraphSemanticGraphFormatter = { "SemanticGraphFormatter", "edu.stanford.nlp.semgraph", ptrTable, methods, fields, 7, 0x1, 10, 20, -1, -1, -1, -1, -1 };
  return &_EduStanfordNlpSemgraphSemanticGraphFormatter;
}

@end

void EduStanfordNlpSemgraphSemanticGraphFormatter_init(EduStanfordNlpSemgraphSemanticGraphFormatter *self) {
  EduStanfordNlpSemgraphSemanticGraphFormatter_initWithInt_withInt_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_(self, EduStanfordNlpSemgraphSemanticGraphFormatter_DEFAULT_WIDTH, EduStanfordNlpSemgraphSemanticGraphFormatter_DEFAULT_INDENT, EduStanfordNlpSemgraphSemanticGraphFormatter_DEFAULT_SMART_INDENT, EduStanfordNlpSemgraphSemanticGraphFormatter_DEFAULT_SHOW_RELNS, EduStanfordNlpSemgraphSemanticGraphFormatter_DEFAULT_SHOW_TAGS, EduStanfordNlpSemgraphSemanticGraphFormatter_DEFAULT_SHOW_ANNOS, EduStanfordNlpSemgraphSemanticGraphFormatter_DEFAULT_SHOW_INDICES);
}

EduStanfordNlpSemgraphSemanticGraphFormatter *new_EduStanfordNlpSemgraphSemanticGraphFormatter_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpSemgraphSemanticGraphFormatter, init)
}

EduStanfordNlpSemgraphSemanticGraphFormatter *create_EduStanfordNlpSemgraphSemanticGraphFormatter_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpSemgraphSemanticGraphFormatter, init)
}

void EduStanfordNlpSemgraphSemanticGraphFormatter_initWithInt_withInt_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_(EduStanfordNlpSemgraphSemanticGraphFormatter *self, jint width, jint indent, jboolean smartIndent, jboolean showRelns, jboolean showTags, jboolean showAnnos, jboolean showIndices) {
  NSObject_init(self);
  self->width_ = EduStanfordNlpSemgraphSemanticGraphFormatter_DEFAULT_WIDTH;
  self->indent_ = EduStanfordNlpSemgraphSemanticGraphFormatter_DEFAULT_INDENT;
  self->smartIndent_ = EduStanfordNlpSemgraphSemanticGraphFormatter_DEFAULT_SMART_INDENT;
  self->showRelns_ = EduStanfordNlpSemgraphSemanticGraphFormatter_DEFAULT_SHOW_RELNS;
  self->showTags_ = EduStanfordNlpSemgraphSemanticGraphFormatter_DEFAULT_SHOW_TAGS;
  self->showAnnos_ = EduStanfordNlpSemgraphSemanticGraphFormatter_DEFAULT_SHOW_ANNOS;
  self->showIndices_ = EduStanfordNlpSemgraphSemanticGraphFormatter_DEFAULT_SHOW_INDICES;
  self->width_ = width;
  self->indent_ = indent;
  self->smartIndent_ = smartIndent;
  self->showRelns_ = showRelns;
  self->showTags_ = showTags;
  self->showAnnos_ = showAnnos;
  self->showIndices_ = showIndices;
}

EduStanfordNlpSemgraphSemanticGraphFormatter *new_EduStanfordNlpSemgraphSemanticGraphFormatter_initWithInt_withInt_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_(jint width, jint indent, jboolean smartIndent, jboolean showRelns, jboolean showTags, jboolean showAnnos, jboolean showIndices) {
  J2OBJC_NEW_IMPL(EduStanfordNlpSemgraphSemanticGraphFormatter, initWithInt_withInt_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_, width, indent, smartIndent, showRelns, showTags, showAnnos, showIndices)
}

EduStanfordNlpSemgraphSemanticGraphFormatter *create_EduStanfordNlpSemgraphSemanticGraphFormatter_initWithInt_withInt_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_(jint width, jint indent, jboolean smartIndent, jboolean showRelns, jboolean showTags, jboolean showAnnos, jboolean showIndices) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpSemgraphSemanticGraphFormatter, initWithInt_withInt_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_, width, indent, smartIndent, showRelns, showTags, showAnnos, showIndices)
}

void EduStanfordNlpSemgraphSemanticGraphFormatter_formatSGNodeWithEduStanfordNlpSemgraphSemanticGraph_withEduStanfordNlpLingIndexedWord_withInt_(EduStanfordNlpSemgraphSemanticGraphFormatter *self, EduStanfordNlpSemgraphSemanticGraph *sg, EduStanfordNlpLingIndexedWord *node, jint spaces) {
  [((id<JavaUtilSet>) nil_chk(self->used_)) addWithId:node];
  NSString *oneline = EduStanfordNlpSemgraphSemanticGraphFormatter_formatSGNodeOnelineWithEduStanfordNlpSemgraphSemanticGraph_withEduStanfordNlpLingIndexedWord_(self, sg, node);
  jboolean toolong = (spaces + ((jint) [((NSString *) nil_chk(oneline)) length]) > self->width_);
  jboolean breakable = [((EduStanfordNlpSemgraphSemanticGraph *) nil_chk(sg)) hasChildrenWithEduStanfordNlpLingIndexedWord:node];
  if (toolong && breakable) {
    EduStanfordNlpSemgraphSemanticGraphFormatter_formatSGNodeMultilineWithEduStanfordNlpSemgraphSemanticGraph_withEduStanfordNlpLingIndexedWord_withInt_(self, sg, node, spaces);
  }
  else {
    (void) [((JavaLangStringBuilder *) nil_chk(self->out_)) appendWithNSString:oneline];
  }
}

NSString *EduStanfordNlpSemgraphSemanticGraphFormatter_formatSGNodeOnelineWithEduStanfordNlpSemgraphSemanticGraph_withEduStanfordNlpLingIndexedWord_(EduStanfordNlpSemgraphSemanticGraphFormatter *self, EduStanfordNlpSemgraphSemanticGraph *sg, EduStanfordNlpLingIndexedWord *node) {
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  id<JavaUtilSet> usedOneline = EduStanfordNlpUtilGenerics_newHashSet();
  EduStanfordNlpSemgraphSemanticGraphFormatter_formatSGNodeOnelineHelperWithEduStanfordNlpSemgraphSemanticGraph_withEduStanfordNlpLingIndexedWord_withJavaLangStringBuilder_withJavaUtilSet_(self, sg, node, sb, usedOneline);
  return [sb description];
}

void EduStanfordNlpSemgraphSemanticGraphFormatter_formatSGNodeOnelineHelperWithEduStanfordNlpSemgraphSemanticGraph_withEduStanfordNlpLingIndexedWord_withJavaLangStringBuilder_withJavaUtilSet_(EduStanfordNlpSemgraphSemanticGraphFormatter *self, EduStanfordNlpSemgraphSemanticGraph *sg, EduStanfordNlpLingIndexedWord *node, JavaLangStringBuilder *sb, id<JavaUtilSet> usedOneline) {
  [((id<JavaUtilSet>) nil_chk(usedOneline)) addWithId:node];
  jboolean isntLeaf = ([((EduStanfordNlpSemgraphSemanticGraph *) nil_chk(sg)) outDegreeWithEduStanfordNlpLingIndexedWord:node] > 0);
  if (isntLeaf) {
    (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:EduStanfordNlpSemgraphSemanticGraphFormatter_LPAREN];
  }
  (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:EduStanfordNlpSemgraphSemanticGraphFormatter_formatLabelWithEduStanfordNlpLingIndexedWord_(self, node)];
  for (EduStanfordNlpSemgraphSemanticGraphEdge * __strong depcy in nil_chk([sg getOutEdgesSortedWithEduStanfordNlpLingIndexedWord:node])) {
    EduStanfordNlpLingIndexedWord *dep = [((EduStanfordNlpSemgraphSemanticGraphEdge *) nil_chk(depcy)) getDependent];
    (void) [sb appendWithNSString:EduStanfordNlpSemgraphSemanticGraphFormatter_SPACE];
    if (self->showRelns_) {
      (void) [sb appendWithId:[depcy getRelation]];
      (void) [sb appendWithNSString:EduStanfordNlpSemgraphSemanticGraphFormatter_COLON];
    }
    if (![usedOneline containsWithId:dep] && ![((id<JavaUtilSet>) nil_chk(self->used_)) containsWithId:dep]) {
      EduStanfordNlpSemgraphSemanticGraphFormatter_formatSGNodeOnelineHelperWithEduStanfordNlpSemgraphSemanticGraph_withEduStanfordNlpLingIndexedWord_withJavaLangStringBuilder_withJavaUtilSet_(self, sg, dep, sb, usedOneline);
    }
    else {
      (void) [sb appendWithNSString:EduStanfordNlpSemgraphSemanticGraphFormatter_formatLabelWithEduStanfordNlpLingIndexedWord_(self, dep)];
    }
  }
  if (isntLeaf) {
    (void) [sb appendWithNSString:EduStanfordNlpSemgraphSemanticGraphFormatter_RPAREN];
  }
}

void EduStanfordNlpSemgraphSemanticGraphFormatter_formatSGNodeMultilineWithEduStanfordNlpSemgraphSemanticGraph_withEduStanfordNlpLingIndexedWord_withInt_(EduStanfordNlpSemgraphSemanticGraphFormatter *self, EduStanfordNlpSemgraphSemanticGraph *sg, EduStanfordNlpLingIndexedWord *node, jint spaces) {
  (void) [((JavaLangStringBuilder *) nil_chk(self->out_)) appendWithNSString:EduStanfordNlpSemgraphSemanticGraphFormatter_LPAREN];
  (void) [((JavaLangStringBuilder *) nil_chk(self->out_)) appendWithNSString:EduStanfordNlpSemgraphSemanticGraphFormatter_formatLabelWithEduStanfordNlpLingIndexedWord_(self, node)];
  if (self->smartIndent_) {
    spaces += 1;
  }
  else {
    spaces += self->indent_;
  }
  for (EduStanfordNlpSemgraphSemanticGraphEdge * __strong depcy in nil_chk([((EduStanfordNlpSemgraphSemanticGraph *) nil_chk(sg)) getOutEdgesSortedWithEduStanfordNlpLingIndexedWord:node])) {
    EduStanfordNlpLingIndexedWord *dep = [((EduStanfordNlpSemgraphSemanticGraphEdge *) nil_chk(depcy)) getDependent];
    (void) [((JavaLangStringBuilder *) nil_chk(self->out_)) appendWithNSString:@"\n"];
    (void) [((JavaLangStringBuilder *) nil_chk(self->out_)) appendWithNSString:EduStanfordNlpUtilStringUtils_repeatWithNSString_withInt_(EduStanfordNlpSemgraphSemanticGraphFormatter_SPACE, spaces)];
    jint sp = spaces;
    if (self->showRelns_) {
      NSString *reln = [((EduStanfordNlpTreesGrammaticalRelation *) nil_chk([depcy getRelation])) description];
      (void) [((JavaLangStringBuilder *) nil_chk(self->out_)) appendWithNSString:reln];
      (void) [((JavaLangStringBuilder *) nil_chk(self->out_)) appendWithNSString:EduStanfordNlpSemgraphSemanticGraphFormatter_COLON];
      if (self->smartIndent_) {
        sp += (((jint) [((NSString *) nil_chk(reln)) length]) + 1);
      }
    }
    if (![((id<JavaUtilSet>) nil_chk(self->used_)) containsWithId:dep]) {
      EduStanfordNlpSemgraphSemanticGraphFormatter_formatSGNodeWithEduStanfordNlpSemgraphSemanticGraph_withEduStanfordNlpLingIndexedWord_withInt_(self, sg, dep, sp);
    }
  }
  (void) [((JavaLangStringBuilder *) nil_chk(self->out_)) appendWithNSString:EduStanfordNlpSemgraphSemanticGraphFormatter_RPAREN];
}

NSString *EduStanfordNlpSemgraphSemanticGraphFormatter_formatLabelWithEduStanfordNlpLingIndexedWord_(EduStanfordNlpSemgraphSemanticGraphFormatter *self, EduStanfordNlpLingIndexedWord *node) {
  NSString *s = [((EduStanfordNlpLingIndexedWord *) nil_chk(node)) word];
  if (self->showIndices_) {
    s = JreStrcat("ICIC$", [node sentIndex], ':', [node index], '-', s);
  }
  if (self->showTags_) {
    NSString *tag = [node tag];
    if (tag != nil && ((jint) [tag length]) > 0) {
      (void) JreStrAppendStrong(&s, "C$", '/', tag);
    }
  }
  if (self->showAnnos_) {
    (void) JreStrAppendStrong(&s, "$", [node toStringWithEduStanfordNlpLingCoreLabel_OutputFormat:JreLoadEnum(EduStanfordNlpLingCoreLabel_OutputFormat, MAP)]);
  }
  return s;
}

void EduStanfordNlpSemgraphSemanticGraphFormatter_testWithNSString_(EduStanfordNlpSemgraphSemanticGraphFormatter *self, NSString *s) {
  EduStanfordNlpSemgraphSemanticGraph *sg = EduStanfordNlpSemgraphSemanticGraph_valueOfWithNSString_(s);
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:[((EduStanfordNlpSemgraphSemanticGraph *) nil_chk(sg)) toCompactString]];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:[self formatSemanticGraphWithEduStanfordNlpSemgraphSemanticGraph:sg]];
  [JreLoadStatic(JavaLangSystem, out) println];
}

void EduStanfordNlpSemgraphSemanticGraphFormatter_mainWithNSStringArray_(IOSObjectArray *args) {
  EduStanfordNlpSemgraphSemanticGraphFormatter_initialize();
  EduStanfordNlpSemgraphSemanticGraphFormatter *fmt = new_EduStanfordNlpSemgraphSemanticGraphFormatter_init();
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"0        1         2         3         4         5         6         7         8"];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"12345678901234567890123456789012345678901234567890123456789012345678901234567890"];
  [JreLoadStatic(JavaLangSystem, out) println];
  EduStanfordNlpSemgraphSemanticGraphFormatter_testWithNSString_(fmt, @"[like subj>Bill dobj>[muffins compound>blueberrry]]");
  EduStanfordNlpSemgraphSemanticGraphFormatter_testWithNSString_(fmt, @"[eligible nsubj>Zambia cop>became xcomp>[receive mark>to dobj>[assistance amod>UNCDF] nmod:in>1991]]");
  EduStanfordNlpSemgraphSemanticGraphFormatter_testWithNSString_(fmt, @"[say advcl>[are mark>If nsubj>[polls det>the] xcomp>[believed aux>to auxpass>be]] nsubj>[voters amod>American] aux>will advmod>[much dep>[same det>the]] nmod:to>[Republicans nmod:poss>[Bush case>'s compound>George] case>to] dep>[vote advmod>when nsubj>they nmod:in>[elections amod>congressional det>the case>in] nmod:on>[[November num>7th case>on]]]]");
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpSemgraphSemanticGraphFormatter)
