//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/semgraph/semgrex/SemgrexMatcher.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/ling/IndexedWord.h"
#include "edu/stanford/nlp/semgraph/SemanticGraph.h"
#include "edu/stanford/nlp/semgraph/semgrex/Alignment.h"
#include "edu/stanford/nlp/semgraph/semgrex/SemgrexMatcher.h"
#include "edu/stanford/nlp/semgraph/semgrex/VariableStrings.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/WeakHashMap.h"

inline JavaUtilWeakHashMap *EduStanfordNlpSemgraphSemgrexSemgrexMatcher_get_topologicalSortCache();
static JavaUtilWeakHashMap *EduStanfordNlpSemgraphSemgrexSemgrexMatcher_topologicalSortCache;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpSemgraphSemgrexSemgrexMatcher, topologicalSortCache, JavaUtilWeakHashMap *)

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpSemgraphSemgrexSemgrexMatcher)

@implementation EduStanfordNlpSemgraphSemgrexSemgrexMatcher

- (instancetype)initWithEduStanfordNlpSemgraphSemanticGraph:(EduStanfordNlpSemgraphSemanticGraph *)sg
                 withEduStanfordNlpSemgraphSemgrexAlignment:(EduStanfordNlpSemgraphSemgrexAlignment *)alignment
                    withEduStanfordNlpSemgraphSemanticGraph:(EduStanfordNlpSemgraphSemanticGraph *)sg_aligned
                                                withBoolean:(jboolean)hyp
                          withEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)node
                                            withJavaUtilMap:(id<JavaUtilMap>)namesToNodes
                                            withJavaUtilMap:(id<JavaUtilMap>)namesToRelations
           withEduStanfordNlpSemgraphSemgrexVariableStrings:(EduStanfordNlpSemgraphSemgrexVariableStrings *)variableStrings {
  EduStanfordNlpSemgraphSemgrexSemgrexMatcher_initWithEduStanfordNlpSemgraphSemanticGraph_withEduStanfordNlpSemgraphSemgrexAlignment_withEduStanfordNlpSemgraphSemanticGraph_withBoolean_withEduStanfordNlpLingIndexedWord_withJavaUtilMap_withJavaUtilMap_withEduStanfordNlpSemgraphSemgrexVariableStrings_(self, sg, alignment, sg_aligned, hyp, node, namesToNodes, namesToRelations, variableStrings);
  return self;
}

- (instancetype)initWithEduStanfordNlpSemgraphSemanticGraph:(EduStanfordNlpSemgraphSemanticGraph *)sg
                          withEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)node
                                            withJavaUtilMap:(id<JavaUtilMap>)namesToNodes
                                            withJavaUtilMap:(id<JavaUtilMap>)namesToRelations
           withEduStanfordNlpSemgraphSemgrexVariableStrings:(EduStanfordNlpSemgraphSemgrexVariableStrings *)variableStrings {
  EduStanfordNlpSemgraphSemgrexSemgrexMatcher_initWithEduStanfordNlpSemgraphSemanticGraph_withEduStanfordNlpLingIndexedWord_withJavaUtilMap_withJavaUtilMap_withEduStanfordNlpSemgraphSemgrexVariableStrings_(self, sg, node, namesToNodes, namesToRelations, variableStrings);
  return self;
}

- (void)reset {
  findIterator_ = nil;
  [((id<JavaUtilMap>) nil_chk(namesToNodes_)) clear];
  [((id<JavaUtilMap>) nil_chk(namesToRelations_)) clear];
}

- (void)resetChildIterWithEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)node {
  self->node_ = node;
  [self resetChildIter];
}

- (void)resetChildIter {
}

- (jboolean)matches {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)matchesAtWithEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)node {
  [self resetChildIterWithEduStanfordNlpLingIndexedWord:node];
  return [self matches];
}

- (EduStanfordNlpLingIndexedWord *)getMatch {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)find {
  if (findIterator_ == nil) {
    @try {
      if (hyp_) {
        @synchronized(EduStanfordNlpSemgraphSemgrexSemgrexMatcher_topologicalSortCache) {
          id<JavaUtilList> topoSort = [((JavaUtilWeakHashMap *) nil_chk(EduStanfordNlpSemgraphSemgrexSemgrexMatcher_topologicalSortCache)) getWithId:JavaLangInteger_valueOfWithInt_(JavaLangSystem_identityHashCodeWithId_(sg_))];
          if (topoSort == nil || [topoSort size] != [((EduStanfordNlpSemgraphSemanticGraph *) nil_chk(sg_)) size]) {
            topoSort = [((EduStanfordNlpSemgraphSemanticGraph *) nil_chk(sg_)) topologicalSort];
            (void) [EduStanfordNlpSemgraphSemgrexSemgrexMatcher_topologicalSortCache putWithId:JavaLangInteger_valueOfWithInt_(JavaLangSystem_identityHashCodeWithId_(sg_)) withId:topoSort];
          }
          findIterator_ = [((id<JavaUtilList>) nil_chk(topoSort)) iterator];
        }
      }
      else if (sg_aligned_ == nil) {
        return false;
      }
      else {
        @synchronized(EduStanfordNlpSemgraphSemgrexSemgrexMatcher_topologicalSortCache) {
          id<JavaUtilList> topoSort = [((JavaUtilWeakHashMap *) nil_chk(EduStanfordNlpSemgraphSemgrexSemgrexMatcher_topologicalSortCache)) getWithId:JavaLangInteger_valueOfWithInt_(JavaLangSystem_identityHashCodeWithId_(sg_aligned_))];
          if (topoSort == nil || [topoSort size] != [((EduStanfordNlpSemgraphSemanticGraph *) nil_chk(sg_aligned_)) size]) {
            topoSort = [((EduStanfordNlpSemgraphSemanticGraph *) nil_chk(sg_aligned_)) topologicalSort];
            (void) [EduStanfordNlpSemgraphSemgrexSemgrexMatcher_topologicalSortCache putWithId:JavaLangInteger_valueOfWithInt_(JavaLangSystem_identityHashCodeWithId_(sg_aligned_)) withId:topoSort];
          }
          findIterator_ = [((id<JavaUtilList>) nil_chk(topoSort)) iterator];
        }
      }
    }
    @catch (JavaLangException *ex) {
      if (hyp_) {
        findIterator_ = [((id<JavaUtilSet>) nil_chk([((EduStanfordNlpSemgraphSemanticGraph *) nil_chk(sg_)) vertexSet])) iterator];
      }
      else if (sg_aligned_ == nil) {
        return false;
      }
      else {
        findIterator_ = [((id<JavaUtilSet>) nil_chk([sg_aligned_ vertexSet])) iterator];
      }
    }
  }
  if (findCurrent_ != nil && [self matches]) {
    return true;
  }
  while ([((id<JavaUtilIterator>) nil_chk(findIterator_)) hasNext]) {
    findCurrent_ = [((id<JavaUtilIterator>) nil_chk(findIterator_)) next];
    [self resetChildIterWithEduStanfordNlpLingIndexedWord:findCurrent_];
    if ([self matches]) {
      return true;
    }
  }
  return false;
}

- (jboolean)findNextMatchingNode {
  EduStanfordNlpLingIndexedWord *lastMatchingNode = [self getMatch];
  while ([self find]) {
    if ([self getMatch] != lastMatchingNode) return true;
  }
  return false;
}

- (EduStanfordNlpLingIndexedWord *)getNodeWithNSString:(NSString *)name {
  return [((id<JavaUtilMap>) nil_chk(namesToNodes_)) getWithId:name];
}

- (NSString *)getRelnStringWithNSString:(NSString *)name {
  return [((id<JavaUtilMap>) nil_chk(namesToRelations_)) getWithId:name];
}

- (id<JavaUtilSet>)getNodeNames {
  return [((id<JavaUtilMap>) nil_chk(namesToNodes_)) keySet];
}

- (id<JavaUtilSet>)getRelationNames {
  return [((id<JavaUtilMap>) nil_chk(namesToRelations_)) keySet];
}

- (NSString *)description {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (EduStanfordNlpSemgraphSemanticGraph *)getGraph {
  return sg_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, 3, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 5, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingIndexedWord;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingIndexedWord;", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 9, 8, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 10, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 10, -1, -1 },
    { NULL, "LNSString;", 0x401, 11, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpSemgraphSemanticGraph;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpSemgraphSemanticGraph:withEduStanfordNlpSemgraphSemgrexAlignment:withEduStanfordNlpSemgraphSemanticGraph:withBoolean:withEduStanfordNlpLingIndexedWord:withJavaUtilMap:withJavaUtilMap:withEduStanfordNlpSemgraphSemgrexVariableStrings:);
  methods[1].selector = @selector(initWithEduStanfordNlpSemgraphSemanticGraph:withEduStanfordNlpLingIndexedWord:withJavaUtilMap:withJavaUtilMap:withEduStanfordNlpSemgraphSemgrexVariableStrings:);
  methods[2].selector = @selector(reset);
  methods[3].selector = @selector(resetChildIterWithEduStanfordNlpLingIndexedWord:);
  methods[4].selector = @selector(resetChildIter);
  methods[5].selector = @selector(matches);
  methods[6].selector = @selector(matchesAtWithEduStanfordNlpLingIndexedWord:);
  methods[7].selector = @selector(getMatch);
  methods[8].selector = @selector(find);
  methods[9].selector = @selector(findNextMatchingNode);
  methods[10].selector = @selector(getNodeWithNSString:);
  methods[11].selector = @selector(getRelnStringWithNSString:);
  methods[12].selector = @selector(getNodeNames);
  methods[13].selector = @selector(getRelationNames);
  methods[14].selector = @selector(description);
  methods[15].selector = @selector(getGraph);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "sg_", "LEduStanfordNlpSemgraphSemanticGraph;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "namesToNodes_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x0, -1, -1, 12, -1 },
    { "namesToRelations_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x0, -1, -1, 13, -1 },
    { "variableStrings_", "LEduStanfordNlpSemgraphSemgrexVariableStrings;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "node_", "LEduStanfordNlpLingIndexedWord;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "alignment_", "LEduStanfordNlpSemgraphSemgrexAlignment;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "sg_aligned_", "LEduStanfordNlpSemgraphSemanticGraph;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "hyp_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "findIterator_", "LJavaUtilIterator;", .constantValue.asLong = 0, 0x0, -1, -1, 14, -1 },
    { "findCurrent_", "LEduStanfordNlpLingIndexedWord;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "topologicalSortCache", "LJavaUtilWeakHashMap;", .constantValue.asLong = 0, 0x1a, -1, 15, 16, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpSemgraphSemanticGraph;LEduStanfordNlpSemgraphSemgrexAlignment;LEduStanfordNlpSemgraphSemanticGraph;ZLEduStanfordNlpLingIndexedWord;LJavaUtilMap;LJavaUtilMap;LEduStanfordNlpSemgraphSemgrexVariableStrings;", "(Ledu/stanford/nlp/semgraph/SemanticGraph;Ledu/stanford/nlp/semgraph/semgrex/Alignment;Ledu/stanford/nlp/semgraph/SemanticGraph;ZLedu/stanford/nlp/ling/IndexedWord;Ljava/util/Map<Ljava/lang/String;Ledu/stanford/nlp/ling/IndexedWord;>;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;Ledu/stanford/nlp/semgraph/semgrex/VariableStrings;)V", "LEduStanfordNlpSemgraphSemanticGraph;LEduStanfordNlpLingIndexedWord;LJavaUtilMap;LJavaUtilMap;LEduStanfordNlpSemgraphSemgrexVariableStrings;", "(Ledu/stanford/nlp/semgraph/SemanticGraph;Ledu/stanford/nlp/ling/IndexedWord;Ljava/util/Map<Ljava/lang/String;Ledu/stanford/nlp/ling/IndexedWord;>;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;Ledu/stanford/nlp/semgraph/semgrex/VariableStrings;)V", "resetChildIter", "LEduStanfordNlpLingIndexedWord;", "matchesAt", "getNode", "LNSString;", "getRelnString", "()Ljava/util/Set<Ljava/lang/String;>;", "toString", "Ljava/util/Map<Ljava/lang/String;Ledu/stanford/nlp/ling/IndexedWord;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", "Ljava/util/Iterator<Ledu/stanford/nlp/ling/IndexedWord;>;", &EduStanfordNlpSemgraphSemgrexSemgrexMatcher_topologicalSortCache, "Ljava/util/WeakHashMap<Ljava/lang/Integer;Ljava/util/List<Ledu/stanford/nlp/ling/IndexedWord;>;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpSemgraphSemgrexSemgrexMatcher = { "SemgrexMatcher", "edu.stanford.nlp.semgraph.semgrex", ptrTable, methods, fields, 7, 0x401, 16, 11, -1, -1, -1, -1, -1 };
  return &_EduStanfordNlpSemgraphSemgrexSemgrexMatcher;
}

+ (void)initialize {
  if (self == [EduStanfordNlpSemgraphSemgrexSemgrexMatcher class]) {
    EduStanfordNlpSemgraphSemgrexSemgrexMatcher_topologicalSortCache = new_JavaUtilWeakHashMap_init();
    J2OBJC_SET_INITIALIZED(EduStanfordNlpSemgraphSemgrexSemgrexMatcher)
  }
}

@end

void EduStanfordNlpSemgraphSemgrexSemgrexMatcher_initWithEduStanfordNlpSemgraphSemanticGraph_withEduStanfordNlpSemgraphSemgrexAlignment_withEduStanfordNlpSemgraphSemanticGraph_withBoolean_withEduStanfordNlpLingIndexedWord_withJavaUtilMap_withJavaUtilMap_withEduStanfordNlpSemgraphSemgrexVariableStrings_(EduStanfordNlpSemgraphSemgrexSemgrexMatcher *self, EduStanfordNlpSemgraphSemanticGraph *sg, EduStanfordNlpSemgraphSemgrexAlignment *alignment, EduStanfordNlpSemgraphSemanticGraph *sg_aligned, jboolean hyp, EduStanfordNlpLingIndexedWord *node, id<JavaUtilMap> namesToNodes, id<JavaUtilMap> namesToRelations, EduStanfordNlpSemgraphSemgrexVariableStrings *variableStrings) {
  NSObject_init(self);
  self->sg_ = sg;
  self->alignment_ = (alignment == nil) ? nil : alignment;
  self->sg_aligned_ = (sg_aligned == nil) ? nil : sg_aligned;
  self->hyp_ = hyp;
  self->node_ = node;
  self->namesToNodes_ = namesToNodes;
  self->namesToRelations_ = namesToRelations;
  self->variableStrings_ = variableStrings;
}

void EduStanfordNlpSemgraphSemgrexSemgrexMatcher_initWithEduStanfordNlpSemgraphSemanticGraph_withEduStanfordNlpLingIndexedWord_withJavaUtilMap_withJavaUtilMap_withEduStanfordNlpSemgraphSemgrexVariableStrings_(EduStanfordNlpSemgraphSemgrexSemgrexMatcher *self, EduStanfordNlpSemgraphSemanticGraph *sg, EduStanfordNlpLingIndexedWord *node, id<JavaUtilMap> namesToNodes, id<JavaUtilMap> namesToRelations, EduStanfordNlpSemgraphSemgrexVariableStrings *variableStrings) {
  EduStanfordNlpSemgraphSemgrexSemgrexMatcher_initWithEduStanfordNlpSemgraphSemanticGraph_withEduStanfordNlpSemgraphSemgrexAlignment_withEduStanfordNlpSemgraphSemanticGraph_withBoolean_withEduStanfordNlpLingIndexedWord_withJavaUtilMap_withJavaUtilMap_withEduStanfordNlpSemgraphSemgrexVariableStrings_(self, sg, nil, nil, true, node, namesToNodes, namesToRelations, variableStrings);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpSemgraphSemgrexSemgrexMatcher)
