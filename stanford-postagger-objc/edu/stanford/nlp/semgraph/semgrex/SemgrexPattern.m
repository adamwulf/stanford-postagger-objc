//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/semgraph/semgrex/SemgrexPattern.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/io/IOUtils.h"
#include "edu/stanford/nlp/ling/CoreAnnotations.h"
#include "edu/stanford/nlp/ling/IndexedWord.h"
#include "edu/stanford/nlp/semgraph/SemanticGraph.h"
#include "edu/stanford/nlp/semgraph/SemanticGraphFactory.h"
#include "edu/stanford/nlp/semgraph/semgrex/Alignment.h"
#include "edu/stanford/nlp/semgraph/semgrex/Env.h"
#include "edu/stanford/nlp/semgraph/semgrex/ParseException.h"
#include "edu/stanford/nlp/semgraph/semgrex/SemgrexMatcher.h"
#include "edu/stanford/nlp/semgraph/semgrex/SemgrexParseException.h"
#include "edu/stanford/nlp/semgraph/semgrex/SemgrexParser.h"
#include "edu/stanford/nlp/semgraph/semgrex/SemgrexPattern.h"
#include "edu/stanford/nlp/semgraph/semgrex/TokenMgrError.h"
#include "edu/stanford/nlp/semgraph/semgrex/VariableStrings.h"
#include "edu/stanford/nlp/trees/GrammaticalStructure.h"
#include "edu/stanford/nlp/trees/MemoryTreebank.h"
#include "edu/stanford/nlp/trees/Tree.h"
#include "edu/stanford/nlp/trees/TreeNormalizer.h"
#include "edu/stanford/nlp/trees/ud/CoNLLUDocumentReader.h"
#include "edu/stanford/nlp/util/Generics.h"
#include "edu/stanford/nlp/util/StringUtils.h"
#include "java/io/BufferedReader.h"
#include "java/io/OutputStreamWriter.h"
#include "java/io/PrintStream.h"
#include "java/io/PrintWriter.h"
#include "java/io/StringReader.h"
#include "java/lang/Boolean.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/function/Consumer.h"
#include "java/util/stream/Stream.h"

@interface EduStanfordNlpSemgraphSemgrexSemgrexPattern () {
 @public
  jboolean neg_;
  jboolean opt_;
  NSString *patternString_;
}

- (void)prettyPrintWithJavaIoPrintWriter:(JavaIoPrintWriter *)pw
                                 withInt:(jint)indent;

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpSemgraphSemgrexSemgrexPattern, patternString_, NSString *)

inline jlong EduStanfordNlpSemgraphSemgrexSemgrexPattern_get_serialVersionUID();
#define EduStanfordNlpSemgraphSemgrexSemgrexPattern_serialVersionUID 1722052832350596732LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpSemgraphSemgrexSemgrexPattern, serialVersionUID, jlong)

__attribute__((unused)) static void EduStanfordNlpSemgraphSemgrexSemgrexPattern_prettyPrintWithJavaIoPrintWriter_withInt_(EduStanfordNlpSemgraphSemgrexSemgrexPattern *self, JavaIoPrintWriter *pw, jint indent);

__attribute__((unused)) static void EduStanfordNlpSemgraphSemgrexSemgrexPattern_OutputFormat_initWithNSString_withInt_(EduStanfordNlpSemgraphSemgrexSemgrexPattern_OutputFormat *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static EduStanfordNlpSemgraphSemgrexSemgrexPattern_OutputFormat *new_EduStanfordNlpSemgraphSemgrexSemgrexPattern_OutputFormat_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

@interface EduStanfordNlpSemgraphSemgrexSemgrexPattern_$Lambda$1 : NSObject < JavaUtilFunctionConsumer > {
 @public
  EduStanfordNlpSemgraphSemgrexEnv *val$env_;
}

- (void)acceptWithId:(EduStanfordNlpSemgraphSemgrexSemgrexPattern *)p;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpSemgraphSemgrexSemgrexPattern_$Lambda$1)

J2OBJC_FIELD_SETTER(EduStanfordNlpSemgraphSemgrexSemgrexPattern_$Lambda$1, val$env_, EduStanfordNlpSemgraphSemgrexEnv *)

__attribute__((unused)) static void EduStanfordNlpSemgraphSemgrexSemgrexPattern_$Lambda$1_initWithEduStanfordNlpSemgraphSemgrexEnv_(EduStanfordNlpSemgraphSemgrexSemgrexPattern_$Lambda$1 *self, EduStanfordNlpSemgraphSemgrexEnv *capture$0);

__attribute__((unused)) static EduStanfordNlpSemgraphSemgrexSemgrexPattern_$Lambda$1 *new_EduStanfordNlpSemgraphSemgrexSemgrexPattern_$Lambda$1_initWithEduStanfordNlpSemgraphSemgrexEnv_(EduStanfordNlpSemgraphSemgrexEnv *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpSemgraphSemgrexSemgrexPattern_$Lambda$1 *create_EduStanfordNlpSemgraphSemgrexSemgrexPattern_$Lambda$1_initWithEduStanfordNlpSemgraphSemgrexEnv_(EduStanfordNlpSemgraphSemgrexEnv *capture$0);

NSString *EduStanfordNlpSemgraphSemgrexSemgrexPattern_PATTERN = @"-pattern";
NSString *EduStanfordNlpSemgraphSemgrexSemgrexPattern_TREE_FILE = @"-treeFile";
NSString *EduStanfordNlpSemgraphSemgrexSemgrexPattern_MODE = @"-mode";
NSString *EduStanfordNlpSemgraphSemgrexSemgrexPattern_DEFAULT_MODE = @"BASIC";
NSString *EduStanfordNlpSemgraphSemgrexSemgrexPattern_EXTRAS = @"-extras";
NSString *EduStanfordNlpSemgraphSemgrexSemgrexPattern_CONLLU_FILE = @"-conlluFile";
NSString *EduStanfordNlpSemgraphSemgrexSemgrexPattern_OUTPUT_FORMAT_OPTION = @"-outputFormat";
NSString *EduStanfordNlpSemgraphSemgrexSemgrexPattern_DEFAULT_OUTPUT_FORMAT = @"LIST";

@implementation EduStanfordNlpSemgraphSemgrexSemgrexPattern

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpSemgraphSemgrexSemgrexPattern_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilList>)getChildren {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)localString {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)setChildWithEduStanfordNlpSemgraphSemgrexSemgrexPattern:(EduStanfordNlpSemgraphSemgrexSemgrexPattern *)child {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)negate {
  if (opt_) {
    @throw new_JavaLangRuntimeException_initWithNSString_(@"Node cannot be both negated and optional.");
  }
  neg_ = true;
}

- (void)makeOptional {
  if (neg_) {
    @throw new_JavaLangRuntimeException_initWithNSString_(@"Node cannot be both negated and optional.");
  }
  opt_ = true;
}

- (jboolean)isNegated {
  return neg_;
}

- (jboolean)isOptional {
  return opt_;
}

- (EduStanfordNlpSemgraphSemgrexSemgrexMatcher *)matcherWithEduStanfordNlpSemgraphSemanticGraph:(EduStanfordNlpSemgraphSemanticGraph *)sg
                                                              withEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)node
                                                                                withJavaUtilMap:(id<JavaUtilMap>)namesToNodes
                                                                                withJavaUtilMap:(id<JavaUtilMap>)namesToRelations
                                               withEduStanfordNlpSemgraphSemgrexVariableStrings:(EduStanfordNlpSemgraphSemgrexVariableStrings *)variableStrings
                                                                                    withBoolean:(jboolean)ignoreCase {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (EduStanfordNlpSemgraphSemgrexSemgrexMatcher *)matcherWithEduStanfordNlpSemgraphSemanticGraph:(EduStanfordNlpSemgraphSemanticGraph *)sg
                                                     withEduStanfordNlpSemgraphSemgrexAlignment:(EduStanfordNlpSemgraphSemgrexAlignment *)alignment
                                                        withEduStanfordNlpSemgraphSemanticGraph:(EduStanfordNlpSemgraphSemanticGraph *)sg_align
                                                                                    withBoolean:(jboolean)hypToText
                                                              withEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)node
                                                                                withJavaUtilMap:(id<JavaUtilMap>)namesToNodes
                                                                                withJavaUtilMap:(id<JavaUtilMap>)namesToRelations
                                               withEduStanfordNlpSemgraphSemgrexVariableStrings:(EduStanfordNlpSemgraphSemgrexVariableStrings *)variableStrings
                                                                                    withBoolean:(jboolean)ignoreCase {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (EduStanfordNlpSemgraphSemgrexSemgrexMatcher *)matcherWithEduStanfordNlpSemgraphSemanticGraph:(EduStanfordNlpSemgraphSemanticGraph *)sg {
  return [self matcherWithEduStanfordNlpSemgraphSemanticGraph:sg withEduStanfordNlpLingIndexedWord:[((EduStanfordNlpSemgraphSemanticGraph *) nil_chk(sg)) getFirstRoot] withJavaUtilMap:EduStanfordNlpUtilGenerics_newHashMap() withJavaUtilMap:EduStanfordNlpUtilGenerics_newHashMap() withEduStanfordNlpSemgraphSemgrexVariableStrings:new_EduStanfordNlpSemgraphSemgrexVariableStrings_init() withBoolean:false];
}

- (EduStanfordNlpSemgraphSemgrexSemgrexMatcher *)matcherWithEduStanfordNlpSemgraphSemanticGraph:(EduStanfordNlpSemgraphSemanticGraph *)sg
                                                                                withJavaUtilMap:(id<JavaUtilMap>)variables {
  return [self matcherWithEduStanfordNlpSemgraphSemanticGraph:sg withEduStanfordNlpLingIndexedWord:[((EduStanfordNlpSemgraphSemanticGraph *) nil_chk(sg)) getFirstRoot] withJavaUtilMap:variables withJavaUtilMap:EduStanfordNlpUtilGenerics_newHashMap() withEduStanfordNlpSemgraphSemgrexVariableStrings:new_EduStanfordNlpSemgraphSemgrexVariableStrings_init() withBoolean:false];
}

- (EduStanfordNlpSemgraphSemgrexSemgrexMatcher *)matcherWithEduStanfordNlpSemgraphSemanticGraph:(EduStanfordNlpSemgraphSemanticGraph *)sg
                                                                                    withBoolean:(jboolean)ignoreCase {
  return [self matcherWithEduStanfordNlpSemgraphSemanticGraph:sg withEduStanfordNlpLingIndexedWord:[((EduStanfordNlpSemgraphSemanticGraph *) nil_chk(sg)) getFirstRoot] withJavaUtilMap:EduStanfordNlpUtilGenerics_newHashMap() withJavaUtilMap:EduStanfordNlpUtilGenerics_newHashMap() withEduStanfordNlpSemgraphSemgrexVariableStrings:new_EduStanfordNlpSemgraphSemgrexVariableStrings_init() withBoolean:ignoreCase];
}

- (EduStanfordNlpSemgraphSemgrexSemgrexMatcher *)matcherWithEduStanfordNlpSemgraphSemanticGraph:(EduStanfordNlpSemgraphSemanticGraph *)hypGraph
                                                     withEduStanfordNlpSemgraphSemgrexAlignment:(EduStanfordNlpSemgraphSemgrexAlignment *)alignment
                                                        withEduStanfordNlpSemgraphSemanticGraph:(EduStanfordNlpSemgraphSemanticGraph *)txtGraph {
  return [self matcherWithEduStanfordNlpSemgraphSemanticGraph:hypGraph withEduStanfordNlpSemgraphSemgrexAlignment:alignment withEduStanfordNlpSemgraphSemanticGraph:txtGraph withBoolean:true withEduStanfordNlpLingIndexedWord:[((EduStanfordNlpSemgraphSemanticGraph *) nil_chk(hypGraph)) getFirstRoot] withJavaUtilMap:EduStanfordNlpUtilGenerics_newHashMap() withJavaUtilMap:EduStanfordNlpUtilGenerics_newHashMap() withEduStanfordNlpSemgraphSemgrexVariableStrings:new_EduStanfordNlpSemgraphSemgrexVariableStrings_init() withBoolean:false];
}

- (EduStanfordNlpSemgraphSemgrexSemgrexMatcher *)matcherWithEduStanfordNlpSemgraphSemanticGraph:(EduStanfordNlpSemgraphSemanticGraph *)hypGraph
                                                     withEduStanfordNlpSemgraphSemgrexAlignment:(EduStanfordNlpSemgraphSemgrexAlignment *)alignment
                                                        withEduStanfordNlpSemgraphSemanticGraph:(EduStanfordNlpSemgraphSemanticGraph *)txtGraph
                                                                                    withBoolean:(jboolean)ignoreCase {
  return [self matcherWithEduStanfordNlpSemgraphSemanticGraph:hypGraph withEduStanfordNlpSemgraphSemgrexAlignment:alignment withEduStanfordNlpSemgraphSemanticGraph:txtGraph withBoolean:true withEduStanfordNlpLingIndexedWord:[((EduStanfordNlpSemgraphSemanticGraph *) nil_chk(hypGraph)) getFirstRoot] withJavaUtilMap:EduStanfordNlpUtilGenerics_newHashMap() withJavaUtilMap:EduStanfordNlpUtilGenerics_newHashMap() withEduStanfordNlpSemgraphSemgrexVariableStrings:new_EduStanfordNlpSemgraphSemgrexVariableStrings_init() withBoolean:ignoreCase];
}

+ (EduStanfordNlpSemgraphSemgrexSemgrexPattern *)compileWithNSString:(NSString *)semgrex
                                withEduStanfordNlpSemgraphSemgrexEnv:(EduStanfordNlpSemgraphSemgrexEnv *)env {
  return EduStanfordNlpSemgraphSemgrexSemgrexPattern_compileWithNSString_withEduStanfordNlpSemgraphSemgrexEnv_(semgrex, env);
}

+ (EduStanfordNlpSemgraphSemgrexSemgrexPattern *)compileWithNSString:(NSString *)semgrex {
  return EduStanfordNlpSemgraphSemgrexSemgrexPattern_compileWithNSString_(semgrex);
}

- (NSString *)pattern {
  return patternString_;
}

- (void)setEnvWithEduStanfordNlpSemgraphSemgrexEnv:(EduStanfordNlpSemgraphSemgrexEnv *)env {
  self->env_ = env;
  [((id<JavaUtilStreamStream>) nil_chk([((id<JavaUtilList>) nil_chk([self getChildren])) stream])) forEachWithJavaUtilFunctionConsumer:new_EduStanfordNlpSemgraphSemgrexSemgrexPattern_$Lambda$1_initWithEduStanfordNlpSemgraphSemgrexEnv_(env)];
}

- (NSString *)description {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)toStringWithBoolean:(jboolean)hasPrecedence {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)prettyPrintWithJavaIoPrintWriter:(JavaIoPrintWriter *)pw
                                 withInt:(jint)indent {
  EduStanfordNlpSemgraphSemgrexSemgrexPattern_prettyPrintWithJavaIoPrintWriter_withInt_(self, pw, indent);
}

- (void)prettyPrintWithJavaIoPrintWriter:(JavaIoPrintWriter *)pw {
  EduStanfordNlpSemgraphSemgrexSemgrexPattern_prettyPrintWithJavaIoPrintWriter_withInt_(self, pw, 0);
}

- (void)prettyPrintWithJavaIoPrintStream:(JavaIoPrintStream *)ps {
  [self prettyPrintWithJavaIoPrintWriter:new_JavaIoPrintWriter_initWithJavaIoWriter_withBoolean_(new_JavaIoOutputStreamWriter_initWithJavaIoOutputStream_(ps), true)];
}

- (void)prettyPrint {
  [self prettyPrintWithJavaIoPrintStream:JreLoadStatic(JavaLangSystem, out)];
}

- (jboolean)isEqual:(id)o {
  if (!([o isKindOfClass:[EduStanfordNlpSemgraphSemgrexSemgrexPattern class]])) return false;
  return [((NSString *) nil_chk([nil_chk(o) description])) isEqual:[self description]];
}

- (NSUInteger)hash {
  return ((jint) [((NSString *) nil_chk([self description])) hash]);
}

+ (void)help {
  EduStanfordNlpSemgraphSemgrexSemgrexPattern_help();
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  EduStanfordNlpSemgraphSemgrexSemgrexPattern_mainWithNSStringArray_(args);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x400, -1, -1, -1, 0, -1, -1 },
    { NULL, "LNSString;", 0x400, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x400, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpSemgraphSemgrexSemgrexMatcher;", 0x400, 3, 4, -1, 5, -1, -1 },
    { NULL, "LEduStanfordNlpSemgraphSemgrexSemgrexMatcher;", 0x400, 3, 6, -1, 7, -1, -1 },
    { NULL, "LEduStanfordNlpSemgraphSemgrexSemgrexMatcher;", 0x1, 3, 8, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpSemgraphSemgrexSemgrexMatcher;", 0x1, 3, 9, -1, 10, -1, -1 },
    { NULL, "LEduStanfordNlpSemgraphSemgrexSemgrexMatcher;", 0x1, 3, 11, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpSemgraphSemgrexSemgrexMatcher;", 0x1, 3, 12, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpSemgraphSemgrexSemgrexMatcher;", 0x1, 3, 13, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpSemgraphSemgrexSemgrexPattern;", 0x9, 14, 15, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpSemgraphSemgrexSemgrexPattern;", 0x9, 14, 16, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, 19, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, 19, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 21, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 23, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 24, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 25, 26, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 27, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 28, 29, 30, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getChildren);
  methods[2].selector = @selector(localString);
  methods[3].selector = @selector(setChildWithEduStanfordNlpSemgraphSemgrexSemgrexPattern:);
  methods[4].selector = @selector(negate);
  methods[5].selector = @selector(makeOptional);
  methods[6].selector = @selector(isNegated);
  methods[7].selector = @selector(isOptional);
  methods[8].selector = @selector(matcherWithEduStanfordNlpSemgraphSemanticGraph:withEduStanfordNlpLingIndexedWord:withJavaUtilMap:withJavaUtilMap:withEduStanfordNlpSemgraphSemgrexVariableStrings:withBoolean:);
  methods[9].selector = @selector(matcherWithEduStanfordNlpSemgraphSemanticGraph:withEduStanfordNlpSemgraphSemgrexAlignment:withEduStanfordNlpSemgraphSemanticGraph:withBoolean:withEduStanfordNlpLingIndexedWord:withJavaUtilMap:withJavaUtilMap:withEduStanfordNlpSemgraphSemgrexVariableStrings:withBoolean:);
  methods[10].selector = @selector(matcherWithEduStanfordNlpSemgraphSemanticGraph:);
  methods[11].selector = @selector(matcherWithEduStanfordNlpSemgraphSemanticGraph:withJavaUtilMap:);
  methods[12].selector = @selector(matcherWithEduStanfordNlpSemgraphSemanticGraph:withBoolean:);
  methods[13].selector = @selector(matcherWithEduStanfordNlpSemgraphSemanticGraph:withEduStanfordNlpSemgraphSemgrexAlignment:withEduStanfordNlpSemgraphSemanticGraph:);
  methods[14].selector = @selector(matcherWithEduStanfordNlpSemgraphSemanticGraph:withEduStanfordNlpSemgraphSemgrexAlignment:withEduStanfordNlpSemgraphSemanticGraph:withBoolean:);
  methods[15].selector = @selector(compileWithNSString:withEduStanfordNlpSemgraphSemgrexEnv:);
  methods[16].selector = @selector(compileWithNSString:);
  methods[17].selector = @selector(pattern);
  methods[18].selector = @selector(setEnvWithEduStanfordNlpSemgraphSemgrexEnv:);
  methods[19].selector = @selector(description);
  methods[20].selector = @selector(toStringWithBoolean:);
  methods[21].selector = @selector(prettyPrintWithJavaIoPrintWriter:withInt:);
  methods[22].selector = @selector(prettyPrintWithJavaIoPrintWriter:);
  methods[23].selector = @selector(prettyPrintWithJavaIoPrintStream:);
  methods[24].selector = @selector(prettyPrint);
  methods[25].selector = @selector(isEqual:);
  methods[26].selector = @selector(hash);
  methods[27].selector = @selector(help);
  methods[28].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpSemgraphSemgrexSemgrexPattern_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "neg_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "opt_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "patternString_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "env_", "LEduStanfordNlpSemgraphSemgrexEnv;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "PATTERN", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 31, -1, -1 },
    { "TREE_FILE", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 32, -1, -1 },
    { "MODE", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 33, -1, -1 },
    { "DEFAULT_MODE", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 34, -1, -1 },
    { "EXTRAS", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 35, -1, -1 },
    { "CONLLU_FILE", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 36, -1, -1 },
    { "OUTPUT_FORMAT_OPTION", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 37, -1, -1 },
    { "DEFAULT_OUTPUT_FORMAT", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 38, -1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/List<Ledu/stanford/nlp/semgraph/semgrex/SemgrexPattern;>;", "setChild", "LEduStanfordNlpSemgraphSemgrexSemgrexPattern;", "matcher", "LEduStanfordNlpSemgraphSemanticGraph;LEduStanfordNlpLingIndexedWord;LJavaUtilMap;LJavaUtilMap;LEduStanfordNlpSemgraphSemgrexVariableStrings;Z", "(Ledu/stanford/nlp/semgraph/SemanticGraph;Ledu/stanford/nlp/ling/IndexedWord;Ljava/util/Map<Ljava/lang/String;Ledu/stanford/nlp/ling/IndexedWord;>;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;Ledu/stanford/nlp/semgraph/semgrex/VariableStrings;Z)Ledu/stanford/nlp/semgraph/semgrex/SemgrexMatcher;", "LEduStanfordNlpSemgraphSemanticGraph;LEduStanfordNlpSemgraphSemgrexAlignment;LEduStanfordNlpSemgraphSemanticGraph;ZLEduStanfordNlpLingIndexedWord;LJavaUtilMap;LJavaUtilMap;LEduStanfordNlpSemgraphSemgrexVariableStrings;Z", "(Ledu/stanford/nlp/semgraph/SemanticGraph;Ledu/stanford/nlp/semgraph/semgrex/Alignment;Ledu/stanford/nlp/semgraph/SemanticGraph;ZLedu/stanford/nlp/ling/IndexedWord;Ljava/util/Map<Ljava/lang/String;Ledu/stanford/nlp/ling/IndexedWord;>;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;Ledu/stanford/nlp/semgraph/semgrex/VariableStrings;Z)Ledu/stanford/nlp/semgraph/semgrex/SemgrexMatcher;", "LEduStanfordNlpSemgraphSemanticGraph;", "LEduStanfordNlpSemgraphSemanticGraph;LJavaUtilMap;", "(Ledu/stanford/nlp/semgraph/SemanticGraph;Ljava/util/Map<Ljava/lang/String;Ledu/stanford/nlp/ling/IndexedWord;>;)Ledu/stanford/nlp/semgraph/semgrex/SemgrexMatcher;", "LEduStanfordNlpSemgraphSemanticGraph;Z", "LEduStanfordNlpSemgraphSemanticGraph;LEduStanfordNlpSemgraphSemgrexAlignment;LEduStanfordNlpSemgraphSemanticGraph;", "LEduStanfordNlpSemgraphSemanticGraph;LEduStanfordNlpSemgraphSemgrexAlignment;LEduStanfordNlpSemgraphSemanticGraph;Z", "compile", "LNSString;LEduStanfordNlpSemgraphSemgrexEnv;", "LNSString;", "setEnv", "LEduStanfordNlpSemgraphSemgrexEnv;", "toString", "Z", "prettyPrint", "LJavaIoPrintWriter;I", "LJavaIoPrintWriter;", "LJavaIoPrintStream;", "equals", "LNSObject;", "hashCode", "main", "[LNSString;", "LJavaIoIOException;", &EduStanfordNlpSemgraphSemgrexSemgrexPattern_PATTERN, &EduStanfordNlpSemgraphSemgrexSemgrexPattern_TREE_FILE, &EduStanfordNlpSemgraphSemgrexSemgrexPattern_MODE, &EduStanfordNlpSemgraphSemgrexSemgrexPattern_DEFAULT_MODE, &EduStanfordNlpSemgraphSemgrexSemgrexPattern_EXTRAS, &EduStanfordNlpSemgraphSemgrexSemgrexPattern_CONLLU_FILE, &EduStanfordNlpSemgraphSemgrexSemgrexPattern_OUTPUT_FORMAT_OPTION, &EduStanfordNlpSemgraphSemgrexSemgrexPattern_DEFAULT_OUTPUT_FORMAT, "LEduStanfordNlpSemgraphSemgrexSemgrexPattern_OutputFormat;" };
  static const J2ObjcClassInfo _EduStanfordNlpSemgraphSemgrexSemgrexPattern = { "SemgrexPattern", "edu.stanford.nlp.semgraph.semgrex", ptrTable, methods, fields, 7, 0x401, 29, 13, -1, 39, -1, -1, -1 };
  return &_EduStanfordNlpSemgraphSemgrexSemgrexPattern;
}

@end

void EduStanfordNlpSemgraphSemgrexSemgrexPattern_init(EduStanfordNlpSemgraphSemgrexSemgrexPattern *self) {
  NSObject_init(self);
  self->neg_ = false;
  self->opt_ = false;
}

EduStanfordNlpSemgraphSemgrexSemgrexPattern *EduStanfordNlpSemgraphSemgrexSemgrexPattern_compileWithNSString_withEduStanfordNlpSemgraphSemgrexEnv_(NSString *semgrex, EduStanfordNlpSemgraphSemgrexEnv *env) {
  EduStanfordNlpSemgraphSemgrexSemgrexPattern_initialize();
  @try {
    EduStanfordNlpSemgraphSemgrexSemgrexParser *parser = new_EduStanfordNlpSemgraphSemgrexSemgrexParser_initWithJavaIoReader_(new_JavaIoStringReader_initWithNSString_(JreStrcat("$C", semgrex, 0x000a)));
    EduStanfordNlpSemgraphSemgrexSemgrexPattern *newPattern = [parser Root];
    [((EduStanfordNlpSemgraphSemgrexSemgrexPattern *) nil_chk(newPattern)) setEnvWithEduStanfordNlpSemgraphSemgrexEnv:env];
    newPattern->patternString_ = semgrex;
    return newPattern;
  }
  @catch (EduStanfordNlpSemgraphSemgrexParseException *ex) {
    @throw new_EduStanfordNlpSemgraphSemgrexSemgrexParseException_initWithNSString_withNSException_(JreStrcat("$$", @"Error parsing semgrex pattern ", semgrex), ex);
  }
  @catch (EduStanfordNlpSemgraphSemgrexTokenMgrError *er) {
    @throw new_EduStanfordNlpSemgraphSemgrexSemgrexParseException_initWithNSString_withNSException_(JreStrcat("$$", @"Error parsing semgrex pattern ", semgrex), er);
  }
}

EduStanfordNlpSemgraphSemgrexSemgrexPattern *EduStanfordNlpSemgraphSemgrexSemgrexPattern_compileWithNSString_(NSString *semgrex) {
  EduStanfordNlpSemgraphSemgrexSemgrexPattern_initialize();
  return EduStanfordNlpSemgraphSemgrexSemgrexPattern_compileWithNSString_withEduStanfordNlpSemgraphSemgrexEnv_(semgrex, new_EduStanfordNlpSemgraphSemgrexEnv_init());
}

void EduStanfordNlpSemgraphSemgrexSemgrexPattern_prettyPrintWithJavaIoPrintWriter_withInt_(EduStanfordNlpSemgraphSemgrexSemgrexPattern *self, JavaIoPrintWriter *pw, jint indent) {
  for (jint i = 0; i < indent; i++) {
    [((JavaIoPrintWriter *) nil_chk(pw)) printWithNSString:@"   "];
  }
  [((JavaIoPrintWriter *) nil_chk(pw)) printlnWithNSString:[self localString]];
  for (EduStanfordNlpSemgraphSemgrexSemgrexPattern * __strong child in nil_chk([self getChildren])) {
    EduStanfordNlpSemgraphSemgrexSemgrexPattern_prettyPrintWithJavaIoPrintWriter_withInt_(nil_chk(child), pw, indent + 1);
  }
}

void EduStanfordNlpSemgraphSemgrexSemgrexPattern_help() {
  EduStanfordNlpSemgraphSemgrexSemgrexPattern_initialize();
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"Possible arguments for SemgrexPattern:"];
  [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:JreStrcat("$$", EduStanfordNlpSemgraphSemgrexSemgrexPattern_PATTERN, @": what pattern to use for matching")];
  [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:JreStrcat("$$", EduStanfordNlpSemgraphSemgrexSemgrexPattern_TREE_FILE, @": a file of trees to process")];
  [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:JreStrcat("$$", EduStanfordNlpSemgraphSemgrexSemgrexPattern_CONLLU_FILE, @": a CoNLL-U file of dependency trees to process")];
  [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:JreStrcat("$$", EduStanfordNlpSemgraphSemgrexSemgrexPattern_MODE, @": what mode for dependencies.  basic, collapsed, or ccprocessed.  To get 'noncollapsed', use basic with extras")];
  [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:JreStrcat("$$", EduStanfordNlpSemgraphSemgrexSemgrexPattern_EXTRAS, @": whether or not to use extras")];
  [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:JreStrcat("$$", EduStanfordNlpSemgraphSemgrexSemgrexPattern_OUTPUT_FORMAT_OPTION, @": output format of matches. list or offset. 'list' prints the graph as a list of dependencies, 'offset' prints the filename and the line offset in the ConLL-U file.")];
  [JreLoadStatic(JavaLangSystem, err) println];
  [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:JreStrcat("$$", EduStanfordNlpSemgraphSemgrexSemgrexPattern_PATTERN, @" is required")];
}

void EduStanfordNlpSemgraphSemgrexSemgrexPattern_mainWithNSStringArray_(IOSObjectArray *args) {
  EduStanfordNlpSemgraphSemgrexSemgrexPattern_initialize();
  id<JavaUtilMap> flagMap = EduStanfordNlpUtilGenerics_newHashMap();
  (void) [((id<JavaUtilMap>) nil_chk(flagMap)) putWithId:EduStanfordNlpSemgraphSemgrexSemgrexPattern_PATTERN withId:JavaLangInteger_valueOfWithInt_(1)];
  (void) [flagMap putWithId:EduStanfordNlpSemgraphSemgrexSemgrexPattern_TREE_FILE withId:JavaLangInteger_valueOfWithInt_(1)];
  (void) [flagMap putWithId:EduStanfordNlpSemgraphSemgrexSemgrexPattern_MODE withId:JavaLangInteger_valueOfWithInt_(1)];
  (void) [flagMap putWithId:EduStanfordNlpSemgraphSemgrexSemgrexPattern_EXTRAS withId:JavaLangInteger_valueOfWithInt_(1)];
  (void) [flagMap putWithId:EduStanfordNlpSemgraphSemgrexSemgrexPattern_CONLLU_FILE withId:JavaLangInteger_valueOfWithInt_(1)];
  (void) [flagMap putWithId:EduStanfordNlpSemgraphSemgrexSemgrexPattern_OUTPUT_FORMAT_OPTION withId:JavaLangInteger_valueOfWithInt_(1)];
  id<JavaUtilMap> argsMap = EduStanfordNlpUtilStringUtils_argsToMapWithNSStringArray_withJavaUtilMap_(args, flagMap);
  args = [((id<JavaUtilMap>) nil_chk(argsMap)) getWithId:nil];
  if (!([argsMap containsKeyWithId:EduStanfordNlpSemgraphSemgrexSemgrexPattern_PATTERN]) || ((IOSObjectArray *) nil_chk([argsMap getWithId:EduStanfordNlpSemgraphSemgrexSemgrexPattern_PATTERN]))->size_ == 0) {
    EduStanfordNlpSemgraphSemgrexSemgrexPattern_help();
    JavaLangSystem_exitWithInt_(2);
  }
  EduStanfordNlpSemgraphSemgrexSemgrexPattern *semgrex = EduStanfordNlpSemgraphSemgrexSemgrexPattern_compileWithNSString_(IOSObjectArray_Get(nil_chk([argsMap getWithId:EduStanfordNlpSemgraphSemgrexSemgrexPattern_PATTERN]), 0));
  NSString *modeString = EduStanfordNlpSemgraphSemgrexSemgrexPattern_DEFAULT_MODE;
  if ([argsMap containsKeyWithId:EduStanfordNlpSemgraphSemgrexSemgrexPattern_MODE] && ((IOSObjectArray *) nil_chk([argsMap getWithId:EduStanfordNlpSemgraphSemgrexSemgrexPattern_MODE]))->size_ > 0) {
    modeString = [((NSString *) nil_chk(IOSObjectArray_Get(nil_chk([argsMap getWithId:EduStanfordNlpSemgraphSemgrexSemgrexPattern_MODE]), 0))) uppercaseString];
  }
  EduStanfordNlpSemgraphSemanticGraphFactory_Mode *mode = EduStanfordNlpSemgraphSemanticGraphFactory_Mode_valueOfWithNSString_(modeString);
  NSString *outputFormatString = EduStanfordNlpSemgraphSemgrexSemgrexPattern_DEFAULT_OUTPUT_FORMAT;
  if ([argsMap containsKeyWithId:EduStanfordNlpSemgraphSemgrexSemgrexPattern_OUTPUT_FORMAT_OPTION] && ((IOSObjectArray *) nil_chk([argsMap getWithId:EduStanfordNlpSemgraphSemgrexSemgrexPattern_OUTPUT_FORMAT_OPTION]))->size_ > 0) {
    outputFormatString = [((NSString *) nil_chk(IOSObjectArray_Get(nil_chk([argsMap getWithId:EduStanfordNlpSemgraphSemgrexSemgrexPattern_OUTPUT_FORMAT_OPTION]), 0))) uppercaseString];
  }
  EduStanfordNlpSemgraphSemgrexSemgrexPattern_OutputFormat *outputFormat = EduStanfordNlpSemgraphSemgrexSemgrexPattern_OutputFormat_valueOfWithNSString_(outputFormatString);
  jboolean useExtras = true;
  if ([argsMap containsKeyWithId:EduStanfordNlpSemgraphSemgrexSemgrexPattern_EXTRAS] && ((IOSObjectArray *) nil_chk([argsMap getWithId:EduStanfordNlpSemgraphSemgrexSemgrexPattern_EXTRAS]))->size_ > 0) {
    useExtras = [((JavaLangBoolean *) nil_chk(JavaLangBoolean_valueOfWithNSString_(IOSObjectArray_Get(nil_chk([argsMap getWithId:EduStanfordNlpSemgraphSemgrexSemgrexPattern_EXTRAS]), 0)))) booleanValue];
  }
  id<JavaUtilList> graphs = EduStanfordNlpUtilGenerics_newArrayList();
  if ([argsMap containsKeyWithId:EduStanfordNlpSemgraphSemgrexSemgrexPattern_TREE_FILE] && ((IOSObjectArray *) nil_chk([argsMap getWithId:EduStanfordNlpSemgraphSemgrexSemgrexPattern_TREE_FILE]))->size_ > 0) {
    {
      IOSObjectArray *a__ = [argsMap getWithId:EduStanfordNlpSemgraphSemgrexSemgrexPattern_TREE_FILE];
      NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      NSString * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        NSString *treeFile = *b__++;
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$", @"Loading file ", treeFile)];
        EduStanfordNlpTreesMemoryTreebank *treebank = new_EduStanfordNlpTreesMemoryTreebank_initWithEduStanfordNlpTreesTreeNormalizer_(new_EduStanfordNlpTreesTreeNormalizer_init());
        [treebank loadPathWithNSString:treeFile];
        for (EduStanfordNlpTreesTree * __strong tree in treebank) {
          EduStanfordNlpSemgraphSemanticGraph *graph = EduStanfordNlpSemgraphSemanticGraphFactory_makeFromTreeWithEduStanfordNlpTreesTree_withEduStanfordNlpSemgraphSemanticGraphFactory_Mode_withEduStanfordNlpTreesGrammaticalStructure_Extras_withBoolean_(tree, mode, useExtras ? JreLoadEnum(EduStanfordNlpTreesGrammaticalStructure_Extras, MAXIMAL) : JreLoadEnum(EduStanfordNlpTreesGrammaticalStructure_Extras, NONE), true);
          [((id<JavaUtilList>) nil_chk(graphs)) addWithId:graph];
        }
      }
    }
  }
  if ([argsMap containsKeyWithId:EduStanfordNlpSemgraphSemgrexSemgrexPattern_CONLLU_FILE] && ((IOSObjectArray *) nil_chk([argsMap getWithId:EduStanfordNlpSemgraphSemgrexSemgrexPattern_CONLLU_FILE]))->size_ > 0) {
    EduStanfordNlpTreesUdCoNLLUDocumentReader *reader = new_EduStanfordNlpTreesUdCoNLLUDocumentReader_init();
    {
      IOSObjectArray *a__ = [argsMap getWithId:EduStanfordNlpSemgraphSemgrexSemgrexPattern_CONLLU_FILE];
      NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      NSString * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        NSString *conlluFile = *b__++;
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$", @"Loading file ", conlluFile)];
        id<JavaUtilIterator> it = [reader getIteratorWithJavaIoReader:EduStanfordNlpIoIOUtils_readerFromStringWithNSString_(conlluFile)];
        while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
          EduStanfordNlpSemgraphSemanticGraph *graph = [it next];
          [((id<JavaUtilList>) nil_chk(graphs)) addWithId:graph];
        }
      }
    }
  }
  for (EduStanfordNlpSemgraphSemanticGraph * __strong graph in nil_chk(graphs)) {
    EduStanfordNlpSemgraphSemgrexSemgrexMatcher *matcher = [((EduStanfordNlpSemgraphSemgrexSemgrexPattern *) nil_chk(semgrex)) matcherWithEduStanfordNlpSemgraphSemanticGraph:graph];
    if (!([((EduStanfordNlpSemgraphSemgrexSemgrexMatcher *) nil_chk(matcher)) find])) {
      continue;
    }
    if (outputFormat == JreLoadEnum(EduStanfordNlpSemgraphSemgrexSemgrexPattern_OutputFormat, LIST)) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"Matched graph:"];
      [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:[((EduStanfordNlpSemgraphSemanticGraph *) nil_chk(graph)) toStringWithEduStanfordNlpSemgraphSemanticGraph_OutputFormat:JreLoadEnum(EduStanfordNlpSemgraphSemanticGraph_OutputFormat, LIST)]];
      jboolean found = true;
      while (found) {
        [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:JreStrcat("$$CI", @"Matches at: ", [((EduStanfordNlpLingIndexedWord *) nil_chk([matcher getMatch])) value], '-', [((EduStanfordNlpLingIndexedWord *) nil_chk([matcher getMatch])) index])];
        id<JavaUtilList> nodeNames = EduStanfordNlpUtilGenerics_newArrayList();
        [((id<JavaUtilList>) nil_chk(nodeNames)) addAllWithJavaUtilCollection:[matcher getNodeNames]];
        JavaUtilCollections_sortWithJavaUtilList_(nodeNames);
        for (NSString * __strong name in nodeNames) {
          [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:JreStrcat("$$$$CI", @"  ", name, @": ", [((EduStanfordNlpLingIndexedWord *) nil_chk([matcher getNodeWithNSString:name])) value], '-', [((EduStanfordNlpLingIndexedWord *) nil_chk([matcher getNodeWithNSString:name])) index])];
        }
        [JreLoadStatic(JavaLangSystem, err) println];
        found = [matcher find];
      }
    }
    else if (outputFormat == JreLoadEnum(EduStanfordNlpSemgraphSemgrexSemgrexPattern_OutputFormat, OFFSET)) {
      if ([((id<JavaUtilList>) nil_chk([((EduStanfordNlpSemgraphSemanticGraph *) nil_chk(graph)) vertexListSorted])) isEmpty]) {
        continue;
      }
      (void) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printfWithNSString:@"+%d %s%n" withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ [((EduStanfordNlpLingIndexedWord *) nil_chk([((id<JavaUtilList>) nil_chk([graph vertexListSorted])) getWithInt:0])) getWithIOSClass:EduStanfordNlpLingCoreAnnotations_LineNumberAnnotation_class_()], IOSObjectArray_Get(nil_chk([argsMap getWithId:EduStanfordNlpSemgraphSemgrexSemgrexPattern_CONLLU_FILE]), 0) } count:2 type:NSObject_class_()]];
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpSemgraphSemgrexSemgrexPattern)

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpSemgraphSemgrexSemgrexPattern_OutputFormat)

EduStanfordNlpSemgraphSemgrexSemgrexPattern_OutputFormat *EduStanfordNlpSemgraphSemgrexSemgrexPattern_OutputFormat_values_[2];

@implementation EduStanfordNlpSemgraphSemgrexSemgrexPattern_OutputFormat

+ (IOSObjectArray *)values {
  return EduStanfordNlpSemgraphSemgrexSemgrexPattern_OutputFormat_values();
}

+ (EduStanfordNlpSemgraphSemgrexSemgrexPattern_OutputFormat *)valueOfWithNSString:(NSString *)name {
  return EduStanfordNlpSemgraphSemgrexSemgrexPattern_OutputFormat_valueOfWithNSString_(name);
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LEduStanfordNlpSemgraphSemgrexSemgrexPattern_OutputFormat;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpSemgraphSemgrexSemgrexPattern_OutputFormat;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "LIST", "LEduStanfordNlpSemgraphSemgrexSemgrexPattern_OutputFormat;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "OFFSET", "LEduStanfordNlpSemgraphSemgrexSemgrexPattern_OutputFormat;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(EduStanfordNlpSemgraphSemgrexSemgrexPattern_OutputFormat, LIST), &JreEnum(EduStanfordNlpSemgraphSemgrexSemgrexPattern_OutputFormat, OFFSET), "LEduStanfordNlpSemgraphSemgrexSemgrexPattern;", "Ljava/lang/Enum<Ledu/stanford/nlp/semgraph/semgrex/SemgrexPattern$OutputFormat;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpSemgraphSemgrexSemgrexPattern_OutputFormat = { "OutputFormat", "edu.stanford.nlp.semgraph.semgrex", ptrTable, methods, fields, 7, 0x4019, 2, 2, 4, -1, -1, 5, -1 };
  return &_EduStanfordNlpSemgraphSemgrexSemgrexPattern_OutputFormat;
}

+ (void)initialize {
  if (self == [EduStanfordNlpSemgraphSemgrexSemgrexPattern_OutputFormat class]) {
    JreEnum(EduStanfordNlpSemgraphSemgrexSemgrexPattern_OutputFormat, LIST) = new_EduStanfordNlpSemgraphSemgrexSemgrexPattern_OutputFormat_initWithNSString_withInt_(@"LIST", 0);
    JreEnum(EduStanfordNlpSemgraphSemgrexSemgrexPattern_OutputFormat, OFFSET) = new_EduStanfordNlpSemgraphSemgrexSemgrexPattern_OutputFormat_initWithNSString_withInt_(@"OFFSET", 1);
    J2OBJC_SET_INITIALIZED(EduStanfordNlpSemgraphSemgrexSemgrexPattern_OutputFormat)
  }
}

@end

void EduStanfordNlpSemgraphSemgrexSemgrexPattern_OutputFormat_initWithNSString_withInt_(EduStanfordNlpSemgraphSemgrexSemgrexPattern_OutputFormat *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

EduStanfordNlpSemgraphSemgrexSemgrexPattern_OutputFormat *new_EduStanfordNlpSemgraphSemgrexSemgrexPattern_OutputFormat_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  J2OBJC_NEW_IMPL(EduStanfordNlpSemgraphSemgrexSemgrexPattern_OutputFormat, initWithNSString_withInt_, __name, __ordinal)
}

IOSObjectArray *EduStanfordNlpSemgraphSemgrexSemgrexPattern_OutputFormat_values() {
  EduStanfordNlpSemgraphSemgrexSemgrexPattern_OutputFormat_initialize();
  return [IOSObjectArray arrayWithObjects:EduStanfordNlpSemgraphSemgrexSemgrexPattern_OutputFormat_values_ count:2 type:EduStanfordNlpSemgraphSemgrexSemgrexPattern_OutputFormat_class_()];
}

EduStanfordNlpSemgraphSemgrexSemgrexPattern_OutputFormat *EduStanfordNlpSemgraphSemgrexSemgrexPattern_OutputFormat_valueOfWithNSString_(NSString *name) {
  EduStanfordNlpSemgraphSemgrexSemgrexPattern_OutputFormat_initialize();
  for (int i = 0; i < 2; i++) {
    EduStanfordNlpSemgraphSemgrexSemgrexPattern_OutputFormat *e = EduStanfordNlpSemgraphSemgrexSemgrexPattern_OutputFormat_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

EduStanfordNlpSemgraphSemgrexSemgrexPattern_OutputFormat *EduStanfordNlpSemgraphSemgrexSemgrexPattern_OutputFormat_fromOrdinal(NSUInteger ordinal) {
  EduStanfordNlpSemgraphSemgrexSemgrexPattern_OutputFormat_initialize();
  if (ordinal >= 2) {
    return nil;
  }
  return EduStanfordNlpSemgraphSemgrexSemgrexPattern_OutputFormat_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpSemgraphSemgrexSemgrexPattern_OutputFormat)

@implementation EduStanfordNlpSemgraphSemgrexSemgrexPattern_$Lambda$1

- (void)acceptWithId:(EduStanfordNlpSemgraphSemgrexSemgrexPattern *)p {
  [((EduStanfordNlpSemgraphSemgrexSemgrexPattern *) nil_chk(p)) setEnvWithEduStanfordNlpSemgraphSemgrexEnv:val$env_];
}

- (id<JavaUtilFunctionConsumer>)andThenWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  return JavaUtilFunctionConsumer_andThenWithJavaUtilFunctionConsumer_(self, arg0);
}

@end

void EduStanfordNlpSemgraphSemgrexSemgrexPattern_$Lambda$1_initWithEduStanfordNlpSemgraphSemgrexEnv_(EduStanfordNlpSemgraphSemgrexSemgrexPattern_$Lambda$1 *self, EduStanfordNlpSemgraphSemgrexEnv *capture$0) {
  self->val$env_ = capture$0;
  NSObject_init(self);
}

EduStanfordNlpSemgraphSemgrexSemgrexPattern_$Lambda$1 *new_EduStanfordNlpSemgraphSemgrexSemgrexPattern_$Lambda$1_initWithEduStanfordNlpSemgraphSemgrexEnv_(EduStanfordNlpSemgraphSemgrexEnv *capture$0) {
  J2OBJC_NEW_IMPL(EduStanfordNlpSemgraphSemgrexSemgrexPattern_$Lambda$1, initWithEduStanfordNlpSemgraphSemgrexEnv_, capture$0)
}

EduStanfordNlpSemgraphSemgrexSemgrexPattern_$Lambda$1 *create_EduStanfordNlpSemgraphSemgrexSemgrexPattern_$Lambda$1_initWithEduStanfordNlpSemgraphSemgrexEnv_(EduStanfordNlpSemgraphSemgrexEnv *capture$0) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpSemgraphSemgrexSemgrexPattern_$Lambda$1, initWithEduStanfordNlpSemgraphSemgrexEnv_, capture$0)
}
