//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/semgraph/semgrex/Env.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/ling/AnnotationLookup.h"
#include "edu/stanford/nlp/semgraph/semgrex/Env.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"

@implementation EduStanfordNlpSemgraphSemgrexEnv

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpSemgraphSemgrexEnv_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)variables {
  EduStanfordNlpSemgraphSemgrexEnv_initWithJavaUtilMap_(self, variables);
  return self;
}

- (void)bindWithNSString:(NSString *)name
                  withId:(id)obj {
  if (obj != nil) {
    (void) [((id<JavaUtilMap>) nil_chk(variables_)) putWithId:name withId:obj];
  }
  else {
    (void) [((id<JavaUtilMap>) nil_chk(variables_)) removeWithId:name];
  }
}

- (void)unbindWithNSString:(NSString *)name {
  [self bindWithNSString:name withId:nil];
}

- (id)getWithNSString:(NSString *)name {
  return [((id<JavaUtilMap>) nil_chk(variables_)) getWithId:name];
}

+ (IOSClass *)lookupAnnotationKeyWithEduStanfordNlpSemgraphSemgrexEnv:(EduStanfordNlpSemgraphSemgrexEnv *)env
                                                         withNSString:(NSString *)name {
  return EduStanfordNlpSemgraphSemgrexEnv_lookupAnnotationKeyWithEduStanfordNlpSemgraphSemgrexEnv_withNSString_(env, name);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 6, 5, -1, -1, -1, -1 },
    { NULL, "LIOSClass;", 0x9, 7, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithJavaUtilMap:);
  methods[2].selector = @selector(bindWithNSString:withId:);
  methods[3].selector = @selector(unbindWithNSString:);
  methods[4].selector = @selector(getWithNSString:);
  methods[5].selector = @selector(lookupAnnotationKeyWithEduStanfordNlpSemgraphSemgrexEnv:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "variables_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x0, -1, -1, 9, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "bind", "LNSString;LNSObject;", "unbind", "LNSString;", "get", "lookupAnnotationKey", "LEduStanfordNlpSemgraphSemgrexEnv;LNSString;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpSemgraphSemgrexEnv = { "Env", "edu.stanford.nlp.semgraph.semgrex", ptrTable, methods, fields, 7, 0x1, 6, 1, -1, -1, -1, -1, -1 };
  return &_EduStanfordNlpSemgraphSemgrexEnv;
}

@end

void EduStanfordNlpSemgraphSemgrexEnv_init(EduStanfordNlpSemgraphSemgrexEnv *self) {
  NSObject_init(self);
  self->variables_ = new_JavaUtilHashMap_init();
}

EduStanfordNlpSemgraphSemgrexEnv *new_EduStanfordNlpSemgraphSemgrexEnv_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpSemgraphSemgrexEnv, init)
}

EduStanfordNlpSemgraphSemgrexEnv *create_EduStanfordNlpSemgraphSemgrexEnv_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpSemgraphSemgrexEnv, init)
}

void EduStanfordNlpSemgraphSemgrexEnv_initWithJavaUtilMap_(EduStanfordNlpSemgraphSemgrexEnv *self, id<JavaUtilMap> variables) {
  NSObject_init(self);
  self->variables_ = new_JavaUtilHashMap_init();
  self->variables_ = variables;
}

EduStanfordNlpSemgraphSemgrexEnv *new_EduStanfordNlpSemgraphSemgrexEnv_initWithJavaUtilMap_(id<JavaUtilMap> variables) {
  J2OBJC_NEW_IMPL(EduStanfordNlpSemgraphSemgrexEnv, initWithJavaUtilMap_, variables)
}

EduStanfordNlpSemgraphSemgrexEnv *create_EduStanfordNlpSemgraphSemgrexEnv_initWithJavaUtilMap_(id<JavaUtilMap> variables) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpSemgraphSemgrexEnv, initWithJavaUtilMap_, variables)
}

IOSClass *EduStanfordNlpSemgraphSemgrexEnv_lookupAnnotationKeyWithEduStanfordNlpSemgraphSemgrexEnv_withNSString_(EduStanfordNlpSemgraphSemgrexEnv *env, NSString *name) {
  EduStanfordNlpSemgraphSemgrexEnv_initialize();
  if (env != nil) {
    id obj = [env getWithNSString:name];
    if (obj != nil) {
      if ([obj isKindOfClass:[IOSClass class]]) {
        return (IOSClass *) cast_chk(obj, [IOSClass class]);
      }
    }
  }
  EduStanfordNlpLingAnnotationLookup_KeyLookup *lookup = EduStanfordNlpLingAnnotationLookup_getCoreKeyWithNSString_(name);
  if (lookup != nil) {
    return lookup->coreKey_;
  }
  else {
    @try {
      IOSClass *clazz = IOSClass_forName_(name);
      return clazz;
    }
    @catch (JavaLangClassNotFoundException *ex) {
    }
    return nil;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpSemgraphSemgrexEnv)
