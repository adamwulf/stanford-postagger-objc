//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/semgraph/semgrex/NodePattern.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/ling/IndexedWord.h"
#include "edu/stanford/nlp/semgraph/SemanticGraph.h"
#include "edu/stanford/nlp/semgraph/semgrex/Alignment.h"
#include "edu/stanford/nlp/semgraph/semgrex/Env.h"
#include "edu/stanford/nlp/semgraph/semgrex/GraphRelation.h"
#include "edu/stanford/nlp/semgraph/semgrex/NodePattern.h"
#include "edu/stanford/nlp/semgraph/semgrex/SemgrexMatcher.h"
#include "edu/stanford/nlp/semgraph/semgrex/SemgrexPattern.h"
#include "edu/stanford/nlp/semgraph/semgrex/VariableStrings.h"
#include "edu/stanford/nlp/util/Generics.h"
#include "edu/stanford/nlp/util/Pair.h"
#include "java/lang/Boolean.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"

@interface EduStanfordNlpSemgraphSemgrexNodePattern () {
 @public
  EduStanfordNlpSemgraphSemgrexGraphRelation *reln_;
  jboolean negDesc_;
  id<JavaUtilMap> attributes_;
  jboolean isRoot_;
  jboolean isLink_;
  jboolean isEmpty_;
  NSString *name_;
  NSString *descString_;
  id<JavaUtilList> variableGroups_;
}

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpSemgraphSemgrexNodePattern, reln_, EduStanfordNlpSemgraphSemgrexGraphRelation *)
J2OBJC_FIELD_SETTER(EduStanfordNlpSemgraphSemgrexNodePattern, attributes_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(EduStanfordNlpSemgraphSemgrexNodePattern, name_, NSString *)
J2OBJC_FIELD_SETTER(EduStanfordNlpSemgraphSemgrexNodePattern, descString_, NSString *)
J2OBJC_FIELD_SETTER(EduStanfordNlpSemgraphSemgrexNodePattern, variableGroups_, id<JavaUtilList>)

inline jlong EduStanfordNlpSemgraphSemgrexNodePattern_get_serialVersionUID();
#define EduStanfordNlpSemgraphSemgrexNodePattern_serialVersionUID -5981133879119233896LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpSemgraphSemgrexNodePattern, serialVersionUID, jlong)

@interface EduStanfordNlpSemgraphSemgrexNodePattern_NodeMatcher : EduStanfordNlpSemgraphSemgrexSemgrexMatcher {
 @public
  jboolean finished_;
  id<JavaUtilIterator> nodeMatchCandidateIterator_;
  EduStanfordNlpSemgraphSemgrexNodePattern *myNode_;
  EduStanfordNlpSemgraphSemgrexSemgrexMatcher *childMatcher_;
  jboolean matchedOnce_;
  jboolean committedVariables_;
  NSString *nextMatchReln_;
  EduStanfordNlpLingIndexedWord *nextMatch_;
  jboolean namedFirst_;
  jboolean relnNamedFirst_;
  jboolean ignoreCase_;
}

- (instancetype)initWithEduStanfordNlpSemgraphSemgrexNodePattern:(EduStanfordNlpSemgraphSemgrexNodePattern *)n
                         withEduStanfordNlpSemgraphSemanticGraph:(EduStanfordNlpSemgraphSemanticGraph *)sg
                      withEduStanfordNlpSemgraphSemgrexAlignment:(EduStanfordNlpSemgraphSemgrexAlignment *)alignment
                         withEduStanfordNlpSemgraphSemanticGraph:(EduStanfordNlpSemgraphSemanticGraph *)sg_align
                                                     withBoolean:(jboolean)hyp
                               withEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)node
                                                 withJavaUtilMap:(id<JavaUtilMap>)namesToNodes
                                                 withJavaUtilMap:(id<JavaUtilMap>)namesToRelations
                withEduStanfordNlpSemgraphSemgrexVariableStrings:(EduStanfordNlpSemgraphSemgrexVariableStrings *)variableStrings
                                                     withBoolean:(jboolean)ignoreCase;

- (void)resetChildIter;

- (void)resetChild;

- (void)goToNextNodeMatch;

- (void)commitVariableGroupsWithJavaUtilRegexMatcher:(JavaUtilRegexMatcher *)m;

- (void)decommitVariableGroups;

- (void)decommitNamedNodes;

- (void)decommitNamedRelations;

- (jboolean)matchChild;

- (jboolean)matches;

- (EduStanfordNlpLingIndexedWord *)getMatch;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpSemgraphSemgrexNodePattern_NodeMatcher)

J2OBJC_FIELD_SETTER(EduStanfordNlpSemgraphSemgrexNodePattern_NodeMatcher, nodeMatchCandidateIterator_, id<JavaUtilIterator>)
J2OBJC_FIELD_SETTER(EduStanfordNlpSemgraphSemgrexNodePattern_NodeMatcher, myNode_, EduStanfordNlpSemgraphSemgrexNodePattern *)
J2OBJC_FIELD_SETTER(EduStanfordNlpSemgraphSemgrexNodePattern_NodeMatcher, childMatcher_, EduStanfordNlpSemgraphSemgrexSemgrexMatcher *)
J2OBJC_FIELD_SETTER(EduStanfordNlpSemgraphSemgrexNodePattern_NodeMatcher, nextMatchReln_, NSString *)
J2OBJC_FIELD_SETTER(EduStanfordNlpSemgraphSemgrexNodePattern_NodeMatcher, nextMatch_, EduStanfordNlpLingIndexedWord *)

__attribute__((unused)) static void EduStanfordNlpSemgraphSemgrexNodePattern_NodeMatcher_initWithEduStanfordNlpSemgraphSemgrexNodePattern_withEduStanfordNlpSemgraphSemanticGraph_withEduStanfordNlpSemgraphSemgrexAlignment_withEduStanfordNlpSemgraphSemanticGraph_withBoolean_withEduStanfordNlpLingIndexedWord_withJavaUtilMap_withJavaUtilMap_withEduStanfordNlpSemgraphSemgrexVariableStrings_withBoolean_(EduStanfordNlpSemgraphSemgrexNodePattern_NodeMatcher *self, EduStanfordNlpSemgraphSemgrexNodePattern *n, EduStanfordNlpSemgraphSemanticGraph *sg, EduStanfordNlpSemgraphSemgrexAlignment *alignment, EduStanfordNlpSemgraphSemanticGraph *sg_align, jboolean hyp, EduStanfordNlpLingIndexedWord *node, id<JavaUtilMap> namesToNodes, id<JavaUtilMap> namesToRelations, EduStanfordNlpSemgraphSemgrexVariableStrings *variableStrings, jboolean ignoreCase);

__attribute__((unused)) static EduStanfordNlpSemgraphSemgrexNodePattern_NodeMatcher *new_EduStanfordNlpSemgraphSemgrexNodePattern_NodeMatcher_initWithEduStanfordNlpSemgraphSemgrexNodePattern_withEduStanfordNlpSemgraphSemanticGraph_withEduStanfordNlpSemgraphSemgrexAlignment_withEduStanfordNlpSemgraphSemanticGraph_withBoolean_withEduStanfordNlpLingIndexedWord_withJavaUtilMap_withJavaUtilMap_withEduStanfordNlpSemgraphSemgrexVariableStrings_withBoolean_(EduStanfordNlpSemgraphSemgrexNodePattern *n, EduStanfordNlpSemgraphSemanticGraph *sg, EduStanfordNlpSemgraphSemgrexAlignment *alignment, EduStanfordNlpSemgraphSemanticGraph *sg_align, jboolean hyp, EduStanfordNlpLingIndexedWord *node, id<JavaUtilMap> namesToNodes, id<JavaUtilMap> namesToRelations, EduStanfordNlpSemgraphSemgrexVariableStrings *variableStrings, jboolean ignoreCase) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpSemgraphSemgrexNodePattern_NodeMatcher *create_EduStanfordNlpSemgraphSemgrexNodePattern_NodeMatcher_initWithEduStanfordNlpSemgraphSemgrexNodePattern_withEduStanfordNlpSemgraphSemanticGraph_withEduStanfordNlpSemgraphSemgrexAlignment_withEduStanfordNlpSemgraphSemanticGraph_withBoolean_withEduStanfordNlpLingIndexedWord_withJavaUtilMap_withJavaUtilMap_withEduStanfordNlpSemgraphSemgrexVariableStrings_withBoolean_(EduStanfordNlpSemgraphSemgrexNodePattern *n, EduStanfordNlpSemgraphSemanticGraph *sg, EduStanfordNlpSemgraphSemgrexAlignment *alignment, EduStanfordNlpSemgraphSemanticGraph *sg_align, jboolean hyp, EduStanfordNlpLingIndexedWord *node, id<JavaUtilMap> namesToNodes, id<JavaUtilMap> namesToRelations, EduStanfordNlpSemgraphSemgrexVariableStrings *variableStrings, jboolean ignoreCase);

__attribute__((unused)) static void EduStanfordNlpSemgraphSemgrexNodePattern_NodeMatcher_resetChild(EduStanfordNlpSemgraphSemgrexNodePattern_NodeMatcher *self);

__attribute__((unused)) static void EduStanfordNlpSemgraphSemgrexNodePattern_NodeMatcher_goToNextNodeMatch(EduStanfordNlpSemgraphSemgrexNodePattern_NodeMatcher *self);

__attribute__((unused)) static void EduStanfordNlpSemgraphSemgrexNodePattern_NodeMatcher_commitVariableGroupsWithJavaUtilRegexMatcher_(EduStanfordNlpSemgraphSemgrexNodePattern_NodeMatcher *self, JavaUtilRegexMatcher *m);

__attribute__((unused)) static void EduStanfordNlpSemgraphSemgrexNodePattern_NodeMatcher_decommitVariableGroups(EduStanfordNlpSemgraphSemgrexNodePattern_NodeMatcher *self);

__attribute__((unused)) static void EduStanfordNlpSemgraphSemgrexNodePattern_NodeMatcher_decommitNamedNodes(EduStanfordNlpSemgraphSemgrexNodePattern_NodeMatcher *self);

__attribute__((unused)) static void EduStanfordNlpSemgraphSemgrexNodePattern_NodeMatcher_decommitNamedRelations(EduStanfordNlpSemgraphSemgrexNodePattern_NodeMatcher *self);

__attribute__((unused)) static jboolean EduStanfordNlpSemgraphSemgrexNodePattern_NodeMatcher_matchChild(EduStanfordNlpSemgraphSemgrexNodePattern_NodeMatcher *self);

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpSemgraphSemgrexNodePattern_NodeMatcher)

@implementation EduStanfordNlpSemgraphSemgrexNodePattern

- (instancetype)initWithEduStanfordNlpSemgraphSemgrexGraphRelation:(EduStanfordNlpSemgraphSemgrexGraphRelation *)r
                                                       withBoolean:(jboolean)negDesc
                                                   withJavaUtilMap:(id<JavaUtilMap>)attrs
                                                       withBoolean:(jboolean)root
                                                       withBoolean:(jboolean)empty
                                                      withNSString:(NSString *)name {
  EduStanfordNlpSemgraphSemgrexNodePattern_initWithEduStanfordNlpSemgraphSemgrexGraphRelation_withBoolean_withJavaUtilMap_withBoolean_withBoolean_withNSString_(self, r, negDesc, attrs, root, empty, name);
  return self;
}

- (instancetype)initWithEduStanfordNlpSemgraphSemgrexGraphRelation:(EduStanfordNlpSemgraphSemgrexGraphRelation *)r
                                                       withBoolean:(jboolean)negDesc
                                                   withJavaUtilMap:(id<JavaUtilMap>)attrs
                                                       withBoolean:(jboolean)root
                                                       withBoolean:(jboolean)empty
                                                      withNSString:(NSString *)name
                                                  withJavaUtilList:(id<JavaUtilList>)variableGroups {
  EduStanfordNlpSemgraphSemgrexNodePattern_initWithEduStanfordNlpSemgraphSemgrexGraphRelation_withBoolean_withJavaUtilMap_withBoolean_withBoolean_withNSString_withJavaUtilList_(self, r, negDesc, attrs, root, empty, name, variableGroups);
  return self;
}

- (jboolean)nodeAttrMatchWithEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)node
                   withEduStanfordNlpSemgraphSemanticGraph:(EduStanfordNlpSemgraphSemanticGraph *)sg
                                               withBoolean:(jboolean)ignoreCase {
  if (isRoot_) return (negDesc_ ? ![((id<JavaUtilCollection>) nil_chk([((EduStanfordNlpSemgraphSemanticGraph *) nil_chk(sg)) getRoots])) containsWithId:node] : [((id<JavaUtilCollection>) nil_chk([((EduStanfordNlpSemgraphSemanticGraph *) nil_chk(sg)) getRoots])) containsWithId:node]);
  if (isEmpty_) return (negDesc_ ? ![((EduStanfordNlpLingIndexedWord *) nil_chk(node)) isEqual:JreLoadStatic(EduStanfordNlpLingIndexedWord, NO_WORD)] : [((EduStanfordNlpLingIndexedWord *) nil_chk(node)) isEqual:JreLoadStatic(EduStanfordNlpLingIndexedWord, NO_WORD)]);
  for (id<JavaUtilMap_Entry> __strong attr in nil_chk([((id<JavaUtilMap>) nil_chk(attributes_)) entrySet])) {
    NSString *key = [((id<JavaUtilMap_Entry>) nil_chk(attr)) getKey];
    NSString *nodeValue;
    IOSClass *c = EduStanfordNlpSemgraphSemgrexEnv_lookupAnnotationKeyWithEduStanfordNlpSemgraphSemgrexEnv_withNSString_(env_, key);
    id value = [((EduStanfordNlpLingIndexedWord *) nil_chk(node)) getWithIOSClass:c];
    if (value == nil) nodeValue = nil;
    else nodeValue = [value description];
    if (nodeValue == nil) return negDesc_;
    id toMatch = ignoreCase ? ((EduStanfordNlpUtilPair *) nil_chk([attr getValue]))->second_ : ((EduStanfordNlpUtilPair *) nil_chk([attr getValue]))->first_;
    jboolean matches;
    if ([toMatch isKindOfClass:[JavaLangBoolean class]]) {
      matches = [((JavaLangBoolean *) cast_chk(toMatch, [JavaLangBoolean class])) booleanValue];
    }
    else if ([toMatch isKindOfClass:[NSString class]]) {
      if (ignoreCase) {
        matches = [nodeValue equalsIgnoreCase:[toMatch description]];
      }
      else {
        matches = [nodeValue isEqual:[toMatch description]];
      }
    }
    else if ([toMatch isKindOfClass:[JavaUtilRegexPattern class]]) {
      matches = [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) cast_chk(toMatch, [JavaUtilRegexPattern class])) matcherWithJavaLangCharSequence:nodeValue])) matches];
    }
    else {
      @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@$@C", @"Unknown matcher type: ", toMatch, @" (of class + ", [toMatch getClass], ')'));
    }
    if (!matches) {
      return negDesc_;
    }
  }
  return !negDesc_;
}

- (void)makeLink {
  isLink_ = true;
}

- (jboolean)isRoot {
  return isRoot_;
}

- (jboolean)isNull {
  return isEmpty_;
}

- (NSString *)localString {
  return [self toStringWithBoolean:true withBoolean:false];
}

- (NSString *)description {
  return [self toStringWithBoolean:true withBoolean:true];
}

- (NSString *)toStringWithBoolean:(jboolean)hasPrecedence {
  return [self toStringWithBoolean:hasPrecedence withBoolean:true];
}

- (NSString *)toStringWithBoolean:(jboolean)hasPrecedence
                      withBoolean:(jboolean)addChild {
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  if ([self isNegated]) {
    (void) [sb appendWithChar:'!'];
  }
  if ([self isOptional]) {
    (void) [sb appendWithChar:'?'];
  }
  (void) [sb appendWithChar:' '];
  if (reln_ != nil) {
    (void) [sb appendWithNSString:[reln_ description]];
    (void) [sb appendWithChar:' '];
  }
  if (!hasPrecedence && addChild && child_ != nil) {
    (void) [sb appendWithChar:'('];
  }
  if (negDesc_) {
    (void) [sb appendWithChar:'!'];
  }
  (void) [sb appendWithNSString:descString_];
  if (name_ != nil) {
    (void) [((JavaLangStringBuilder *) nil_chk([sb appendWithChar:'='])) appendWithNSString:name_];
  }
  if (addChild && child_ != nil) {
    (void) [sb appendWithChar:' '];
    (void) [sb appendWithNSString:[((EduStanfordNlpSemgraphSemgrexSemgrexPattern *) nil_chk(child_)) toStringWithBoolean:false]];
    if (!hasPrecedence) {
      (void) [sb appendWithChar:')'];
    }
  }
  return [sb description];
}

- (void)setChildWithEduStanfordNlpSemgraphSemgrexSemgrexPattern:(EduStanfordNlpSemgraphSemgrexSemgrexPattern *)n {
  child_ = n;
}

- (id<JavaUtilList>)getChildren {
  if (child_ == nil) {
    return JavaUtilCollections_emptyList();
  }
  else {
    return JavaUtilCollections_singletonListWithId_(child_);
  }
}

- (NSString *)getName {
  return name_;
}

- (EduStanfordNlpSemgraphSemgrexSemgrexMatcher *)matcherWithEduStanfordNlpSemgraphSemanticGraph:(EduStanfordNlpSemgraphSemanticGraph *)sg
                                                              withEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)node
                                                                                withJavaUtilMap:(id<JavaUtilMap>)namesToNodes
                                                                                withJavaUtilMap:(id<JavaUtilMap>)namesToRelations
                                               withEduStanfordNlpSemgraphSemgrexVariableStrings:(EduStanfordNlpSemgraphSemgrexVariableStrings *)variableStrings
                                                                                    withBoolean:(jboolean)ignoreCase {
  return new_EduStanfordNlpSemgraphSemgrexNodePattern_NodeMatcher_initWithEduStanfordNlpSemgraphSemgrexNodePattern_withEduStanfordNlpSemgraphSemanticGraph_withEduStanfordNlpSemgraphSemgrexAlignment_withEduStanfordNlpSemgraphSemanticGraph_withBoolean_withEduStanfordNlpLingIndexedWord_withJavaUtilMap_withJavaUtilMap_withEduStanfordNlpSemgraphSemgrexVariableStrings_withBoolean_(self, sg, nil, nil, true, node, namesToNodes, namesToRelations, variableStrings, ignoreCase);
}

- (EduStanfordNlpSemgraphSemgrexSemgrexMatcher *)matcherWithEduStanfordNlpSemgraphSemanticGraph:(EduStanfordNlpSemgraphSemanticGraph *)sg
                                                     withEduStanfordNlpSemgraphSemgrexAlignment:(EduStanfordNlpSemgraphSemgrexAlignment *)alignment
                                                        withEduStanfordNlpSemgraphSemanticGraph:(EduStanfordNlpSemgraphSemanticGraph *)sg_align
                                                                                    withBoolean:(jboolean)hyp
                                                              withEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)node
                                                                                withJavaUtilMap:(id<JavaUtilMap>)namesToNodes
                                                                                withJavaUtilMap:(id<JavaUtilMap>)namesToRelations
                                               withEduStanfordNlpSemgraphSemgrexVariableStrings:(EduStanfordNlpSemgraphSemgrexVariableStrings *)variableStrings
                                                                                    withBoolean:(jboolean)ignoreCase {
  return new_EduStanfordNlpSemgraphSemgrexNodePattern_NodeMatcher_initWithEduStanfordNlpSemgraphSemgrexNodePattern_withEduStanfordNlpSemgraphSemanticGraph_withEduStanfordNlpSemgraphSemgrexAlignment_withEduStanfordNlpSemgraphSemanticGraph_withBoolean_withEduStanfordNlpLingIndexedWord_withJavaUtilMap_withJavaUtilMap_withEduStanfordNlpSemgraphSemgrexVariableStrings_withBoolean_(self, sg, alignment, sg_align, ([((EduStanfordNlpSemgraphSemgrexGraphRelation *) nil_chk(reln_)) isEqual:JreLoadStatic(EduStanfordNlpSemgraphSemgrexGraphRelation, ALIGNED_ROOT)]) ? false : hyp, ([((EduStanfordNlpSemgraphSemgrexGraphRelation *) nil_chk(reln_)) isEqual:JreLoadStatic(EduStanfordNlpSemgraphSemgrexGraphRelation, ALIGNED_ROOT)]) ? [((EduStanfordNlpSemgraphSemanticGraph *) nil_chk(sg_align)) getFirstRoot] : node, namesToNodes, namesToRelations, variableStrings, ignoreCase);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, 3, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 6, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 6, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 11, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpSemgraphSemgrexSemgrexMatcher;", 0x1, 12, 13, -1, 14, -1, -1 },
    { NULL, "LEduStanfordNlpSemgraphSemgrexSemgrexMatcher;", 0x1, 12, 15, -1, 16, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpSemgraphSemgrexGraphRelation:withBoolean:withJavaUtilMap:withBoolean:withBoolean:withNSString:);
  methods[1].selector = @selector(initWithEduStanfordNlpSemgraphSemgrexGraphRelation:withBoolean:withJavaUtilMap:withBoolean:withBoolean:withNSString:withJavaUtilList:);
  methods[2].selector = @selector(nodeAttrMatchWithEduStanfordNlpLingIndexedWord:withEduStanfordNlpSemgraphSemanticGraph:withBoolean:);
  methods[3].selector = @selector(makeLink);
  methods[4].selector = @selector(isRoot);
  methods[5].selector = @selector(isNull);
  methods[6].selector = @selector(localString);
  methods[7].selector = @selector(description);
  methods[8].selector = @selector(toStringWithBoolean:);
  methods[9].selector = @selector(toStringWithBoolean:withBoolean:);
  methods[10].selector = @selector(setChildWithEduStanfordNlpSemgraphSemgrexSemgrexPattern:);
  methods[11].selector = @selector(getChildren);
  methods[12].selector = @selector(getName);
  methods[13].selector = @selector(matcherWithEduStanfordNlpSemgraphSemanticGraph:withEduStanfordNlpLingIndexedWord:withJavaUtilMap:withJavaUtilMap:withEduStanfordNlpSemgraphSemgrexVariableStrings:withBoolean:);
  methods[14].selector = @selector(matcherWithEduStanfordNlpSemgraphSemanticGraph:withEduStanfordNlpSemgraphSemgrexAlignment:withEduStanfordNlpSemgraphSemanticGraph:withBoolean:withEduStanfordNlpLingIndexedWord:withJavaUtilMap:withJavaUtilMap:withEduStanfordNlpSemgraphSemgrexVariableStrings:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpSemgraphSemgrexNodePattern_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "reln_", "LEduStanfordNlpSemgraphSemgrexGraphRelation;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "negDesc_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "attributes_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 17, -1 },
    { "isRoot_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "isLink_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "isEmpty_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "name_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "descString_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "child_", "LEduStanfordNlpSemgraphSemgrexSemgrexPattern;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "variableGroups_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 18, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpSemgraphSemgrexGraphRelation;ZLJavaUtilMap;ZZLNSString;", "(Ledu/stanford/nlp/semgraph/semgrex/GraphRelation;ZLjava/util/Map<Ljava/lang/String;Ljava/lang/String;>;ZZLjava/lang/String;)V", "LEduStanfordNlpSemgraphSemgrexGraphRelation;ZLJavaUtilMap;ZZLNSString;LJavaUtilList;", "(Ledu/stanford/nlp/semgraph/semgrex/GraphRelation;ZLjava/util/Map<Ljava/lang/String;Ljava/lang/String;>;ZZLjava/lang/String;Ljava/util/List<Ledu/stanford/nlp/util/Pair<Ljava/lang/Integer;Ljava/lang/String;>;>;)V", "nodeAttrMatch", "LEduStanfordNlpLingIndexedWord;LEduStanfordNlpSemgraphSemanticGraph;Z", "toString", "Z", "ZZ", "setChild", "LEduStanfordNlpSemgraphSemgrexSemgrexPattern;", "()Ljava/util/List<Ledu/stanford/nlp/semgraph/semgrex/SemgrexPattern;>;", "matcher", "LEduStanfordNlpSemgraphSemanticGraph;LEduStanfordNlpLingIndexedWord;LJavaUtilMap;LJavaUtilMap;LEduStanfordNlpSemgraphSemgrexVariableStrings;Z", "(Ledu/stanford/nlp/semgraph/SemanticGraph;Ledu/stanford/nlp/ling/IndexedWord;Ljava/util/Map<Ljava/lang/String;Ledu/stanford/nlp/ling/IndexedWord;>;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;Ledu/stanford/nlp/semgraph/semgrex/VariableStrings;Z)Ledu/stanford/nlp/semgraph/semgrex/SemgrexMatcher;", "LEduStanfordNlpSemgraphSemanticGraph;LEduStanfordNlpSemgraphSemgrexAlignment;LEduStanfordNlpSemgraphSemanticGraph;ZLEduStanfordNlpLingIndexedWord;LJavaUtilMap;LJavaUtilMap;LEduStanfordNlpSemgraphSemgrexVariableStrings;Z", "(Ledu/stanford/nlp/semgraph/SemanticGraph;Ledu/stanford/nlp/semgraph/semgrex/Alignment;Ledu/stanford/nlp/semgraph/SemanticGraph;ZLedu/stanford/nlp/ling/IndexedWord;Ljava/util/Map<Ljava/lang/String;Ledu/stanford/nlp/ling/IndexedWord;>;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;Ledu/stanford/nlp/semgraph/semgrex/VariableStrings;Z)Ledu/stanford/nlp/semgraph/semgrex/SemgrexMatcher;", "Ljava/util/Map<Ljava/lang/String;Ledu/stanford/nlp/util/Pair<Ljava/lang/Object;Ljava/lang/Object;>;>;", "Ljava/util/List<Ledu/stanford/nlp/util/Pair<Ljava/lang/Integer;Ljava/lang/String;>;>;", "LEduStanfordNlpSemgraphSemgrexNodePattern_NodeMatcher;" };
  static const J2ObjcClassInfo _EduStanfordNlpSemgraphSemgrexNodePattern = { "NodePattern", "edu.stanford.nlp.semgraph.semgrex", ptrTable, methods, fields, 7, 0x1, 15, 11, -1, 19, -1, -1, -1 };
  return &_EduStanfordNlpSemgraphSemgrexNodePattern;
}

@end

void EduStanfordNlpSemgraphSemgrexNodePattern_initWithEduStanfordNlpSemgraphSemgrexGraphRelation_withBoolean_withJavaUtilMap_withBoolean_withBoolean_withNSString_(EduStanfordNlpSemgraphSemgrexNodePattern *self, EduStanfordNlpSemgraphSemgrexGraphRelation *r, jboolean negDesc, id<JavaUtilMap> attrs, jboolean root, jboolean empty, NSString *name) {
  EduStanfordNlpSemgraphSemgrexNodePattern_initWithEduStanfordNlpSemgraphSemgrexGraphRelation_withBoolean_withJavaUtilMap_withBoolean_withBoolean_withNSString_withJavaUtilList_(self, r, negDesc, attrs, root, empty, name, new_JavaUtilArrayList_initWithInt_(0));
}

EduStanfordNlpSemgraphSemgrexNodePattern *new_EduStanfordNlpSemgraphSemgrexNodePattern_initWithEduStanfordNlpSemgraphSemgrexGraphRelation_withBoolean_withJavaUtilMap_withBoolean_withBoolean_withNSString_(EduStanfordNlpSemgraphSemgrexGraphRelation *r, jboolean negDesc, id<JavaUtilMap> attrs, jboolean root, jboolean empty, NSString *name) {
  J2OBJC_NEW_IMPL(EduStanfordNlpSemgraphSemgrexNodePattern, initWithEduStanfordNlpSemgraphSemgrexGraphRelation_withBoolean_withJavaUtilMap_withBoolean_withBoolean_withNSString_, r, negDesc, attrs, root, empty, name)
}

EduStanfordNlpSemgraphSemgrexNodePattern *create_EduStanfordNlpSemgraphSemgrexNodePattern_initWithEduStanfordNlpSemgraphSemgrexGraphRelation_withBoolean_withJavaUtilMap_withBoolean_withBoolean_withNSString_(EduStanfordNlpSemgraphSemgrexGraphRelation *r, jboolean negDesc, id<JavaUtilMap> attrs, jboolean root, jboolean empty, NSString *name) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpSemgraphSemgrexNodePattern, initWithEduStanfordNlpSemgraphSemgrexGraphRelation_withBoolean_withJavaUtilMap_withBoolean_withBoolean_withNSString_, r, negDesc, attrs, root, empty, name)
}

void EduStanfordNlpSemgraphSemgrexNodePattern_initWithEduStanfordNlpSemgraphSemgrexGraphRelation_withBoolean_withJavaUtilMap_withBoolean_withBoolean_withNSString_withJavaUtilList_(EduStanfordNlpSemgraphSemgrexNodePattern *self, EduStanfordNlpSemgraphSemgrexGraphRelation *r, jboolean negDesc, id<JavaUtilMap> attrs, jboolean root, jboolean empty, NSString *name, id<JavaUtilList> variableGroups) {
  EduStanfordNlpSemgraphSemgrexSemgrexPattern_init(self);
  self->reln_ = r;
  self->negDesc_ = negDesc;
  self->attributes_ = EduStanfordNlpUtilGenerics_newHashMap();
  self->descString_ = @"{";
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((id<JavaUtilMap>) nil_chk(attrs)) entrySet])) {
    if (![((NSString *) nil_chk(self->descString_)) isEqual:@"{"]) (void) JreStrAppendStrong(&self->descString_, "$", @";");
    NSString *key = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey];
    NSString *value = [entry_ getValue];
    if ([((NSString *) nil_chk(value)) isEqual:@"__"]) {
      (void) [((id<JavaUtilMap>) nil_chk(self->attributes_)) putWithId:key withId:EduStanfordNlpUtilPair_makePairWithId_withId_(JavaLangBoolean_valueOfWithBoolean_(true), JavaLangBoolean_valueOfWithBoolean_(true))];
    }
    else if ([value matches:@"/.*/"]) {
      jboolean isRegexp = false;
      for (jint i = 1; i < ((jint) [value length]) - 1; ++i) {
        jchar chr = [value charAtWithInt:i];
        if (!((chr >= 'A' && chr <= 'Z') || (chr >= 'a' && chr <= 'z') || (chr >= '0' && chr <= '9'))) {
          isRegexp = true;
          break;
        }
      }
      NSString *patternContent = [value substring:1 endIndex:((jint) [value length]) - 1];
      if (isRegexp) {
        (void) [((id<JavaUtilMap>) nil_chk(self->attributes_)) putWithId:key withId:EduStanfordNlpUtilPair_makePairWithId_withId_(JavaUtilRegexPattern_compileWithNSString_(patternContent), JavaUtilRegexPattern_compileWithNSString_withInt_(patternContent, JavaUtilRegexPattern_CASE_INSENSITIVE))];
      }
      else {
        (void) [((id<JavaUtilMap>) nil_chk(self->attributes_)) putWithId:key withId:EduStanfordNlpUtilPair_makePairWithId_withId_(patternContent, patternContent)];
      }
    }
    else {
      (void) [((id<JavaUtilMap>) nil_chk(self->attributes_)) putWithId:key withId:EduStanfordNlpUtilPair_makePairWithId_withId_(value, value)];
    }
    (void) JreStrAppendStrong(&self->descString_, "$", (JreStrcat("$C$", key, ':', value)));
  }
  if (root) (void) JreStrAppendStrong(&self->descString_, "$", @"$");
  else if (empty) (void) JreStrAppendStrong(&self->descString_, "$", @"#");
  (void) JreStrAppendStrong(&self->descString_, "C", '}');
  self->name_ = name;
  self->child_ = nil;
  self->isRoot_ = root;
  self->isEmpty_ = empty;
  self->variableGroups_ = variableGroups;
}

EduStanfordNlpSemgraphSemgrexNodePattern *new_EduStanfordNlpSemgraphSemgrexNodePattern_initWithEduStanfordNlpSemgraphSemgrexGraphRelation_withBoolean_withJavaUtilMap_withBoolean_withBoolean_withNSString_withJavaUtilList_(EduStanfordNlpSemgraphSemgrexGraphRelation *r, jboolean negDesc, id<JavaUtilMap> attrs, jboolean root, jboolean empty, NSString *name, id<JavaUtilList> variableGroups) {
  J2OBJC_NEW_IMPL(EduStanfordNlpSemgraphSemgrexNodePattern, initWithEduStanfordNlpSemgraphSemgrexGraphRelation_withBoolean_withJavaUtilMap_withBoolean_withBoolean_withNSString_withJavaUtilList_, r, negDesc, attrs, root, empty, name, variableGroups)
}

EduStanfordNlpSemgraphSemgrexNodePattern *create_EduStanfordNlpSemgraphSemgrexNodePattern_initWithEduStanfordNlpSemgraphSemgrexGraphRelation_withBoolean_withJavaUtilMap_withBoolean_withBoolean_withNSString_withJavaUtilList_(EduStanfordNlpSemgraphSemgrexGraphRelation *r, jboolean negDesc, id<JavaUtilMap> attrs, jboolean root, jboolean empty, NSString *name, id<JavaUtilList> variableGroups) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpSemgraphSemgrexNodePattern, initWithEduStanfordNlpSemgraphSemgrexGraphRelation_withBoolean_withJavaUtilMap_withBoolean_withBoolean_withNSString_withJavaUtilList_, r, negDesc, attrs, root, empty, name, variableGroups)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpSemgraphSemgrexNodePattern)

@implementation EduStanfordNlpSemgraphSemgrexNodePattern_NodeMatcher

- (instancetype)initWithEduStanfordNlpSemgraphSemgrexNodePattern:(EduStanfordNlpSemgraphSemgrexNodePattern *)n
                         withEduStanfordNlpSemgraphSemanticGraph:(EduStanfordNlpSemgraphSemanticGraph *)sg
                      withEduStanfordNlpSemgraphSemgrexAlignment:(EduStanfordNlpSemgraphSemgrexAlignment *)alignment
                         withEduStanfordNlpSemgraphSemanticGraph:(EduStanfordNlpSemgraphSemanticGraph *)sg_align
                                                     withBoolean:(jboolean)hyp
                               withEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)node
                                                 withJavaUtilMap:(id<JavaUtilMap>)namesToNodes
                                                 withJavaUtilMap:(id<JavaUtilMap>)namesToRelations
                withEduStanfordNlpSemgraphSemgrexVariableStrings:(EduStanfordNlpSemgraphSemgrexVariableStrings *)variableStrings
                                                     withBoolean:(jboolean)ignoreCase {
  EduStanfordNlpSemgraphSemgrexNodePattern_NodeMatcher_initWithEduStanfordNlpSemgraphSemgrexNodePattern_withEduStanfordNlpSemgraphSemanticGraph_withEduStanfordNlpSemgraphSemgrexAlignment_withEduStanfordNlpSemgraphSemanticGraph_withBoolean_withEduStanfordNlpLingIndexedWord_withJavaUtilMap_withJavaUtilMap_withEduStanfordNlpSemgraphSemgrexVariableStrings_withBoolean_(self, n, sg, alignment, sg_align, hyp, node, namesToNodes, namesToRelations, variableStrings, ignoreCase);
  return self;
}

- (void)resetChildIter {
  nodeMatchCandidateIterator_ = [((EduStanfordNlpSemgraphSemgrexGraphRelation *) nil_chk(((EduStanfordNlpSemgraphSemgrexNodePattern *) nil_chk(myNode_))->reln_)) searchNodeIteratorWithEduStanfordNlpLingIndexedWord:node_ withEduStanfordNlpSemgraphSemanticGraph:hyp_ ? sg_ : sg_aligned_];
  if ([myNode_->reln_ isKindOfClass:[EduStanfordNlpSemgraphSemgrexGraphRelation_ALIGNMENT class]]) [((EduStanfordNlpSemgraphSemgrexGraphRelation_ALIGNMENT *) nil_chk(((EduStanfordNlpSemgraphSemgrexGraphRelation_ALIGNMENT *) cast_chk(myNode_->reln_, [EduStanfordNlpSemgraphSemgrexGraphRelation_ALIGNMENT class])))) setAlignmentWithEduStanfordNlpSemgraphSemgrexAlignment:alignment_ withBoolean:hyp_ withEduStanfordNlpSemgraphSemgrexGraphRelation_SearchNodeIterator:(EduStanfordNlpSemgraphSemgrexGraphRelation_SearchNodeIterator *) cast_chk(nodeMatchCandidateIterator_, [EduStanfordNlpSemgraphSemgrexGraphRelation_SearchNodeIterator class])];
  finished_ = false;
  if (nextMatch_ != nil) {
    EduStanfordNlpSemgraphSemgrexNodePattern_NodeMatcher_decommitVariableGroups(self);
    EduStanfordNlpSemgraphSemgrexNodePattern_NodeMatcher_decommitNamedNodes(self);
    EduStanfordNlpSemgraphSemgrexNodePattern_NodeMatcher_decommitNamedRelations(self);
  }
  nextMatch_ = nil;
}

- (void)resetChild {
  EduStanfordNlpSemgraphSemgrexNodePattern_NodeMatcher_resetChild(self);
}

- (void)goToNextNodeMatch {
  EduStanfordNlpSemgraphSemgrexNodePattern_NodeMatcher_goToNextNodeMatch(self);
}

- (void)commitVariableGroupsWithJavaUtilRegexMatcher:(JavaUtilRegexMatcher *)m {
  EduStanfordNlpSemgraphSemgrexNodePattern_NodeMatcher_commitVariableGroupsWithJavaUtilRegexMatcher_(self, m);
}

- (void)decommitVariableGroups {
  EduStanfordNlpSemgraphSemgrexNodePattern_NodeMatcher_decommitVariableGroups(self);
}

- (void)decommitNamedNodes {
  EduStanfordNlpSemgraphSemgrexNodePattern_NodeMatcher_decommitNamedNodes(self);
}

- (void)decommitNamedRelations {
  EduStanfordNlpSemgraphSemgrexNodePattern_NodeMatcher_decommitNamedRelations(self);
}

- (jboolean)matchChild {
  return EduStanfordNlpSemgraphSemgrexNodePattern_NodeMatcher_matchChild(self);
}

- (jboolean)matches {
  if (finished_) {
    return false;
  }
  while (!finished_) {
    if (EduStanfordNlpSemgraphSemgrexNodePattern_NodeMatcher_matchChild(self)) {
      if ([((EduStanfordNlpSemgraphSemgrexNodePattern *) nil_chk(myNode_)) isNegated]) {
        finished_ = true;
        return false;
      }
      else {
        if ([myNode_ isOptional]) {
          finished_ = true;
        }
        return true;
      }
    }
    else {
      EduStanfordNlpSemgraphSemgrexNodePattern_NodeMatcher_goToNextNodeMatch(self);
    }
  }
  if ([((EduStanfordNlpSemgraphSemgrexNodePattern *) nil_chk(myNode_)) isNegated]) {
    return true;
  }
  else {
    nextMatch_ = nil;
    EduStanfordNlpSemgraphSemgrexNodePattern_NodeMatcher_decommitVariableGroups(self);
    EduStanfordNlpSemgraphSemgrexNodePattern_NodeMatcher_decommitNamedNodes(self);
    EduStanfordNlpSemgraphSemgrexNodePattern_NodeMatcher_decommitNamedRelations(self);
    return [myNode_ isOptional];
  }
}

- (EduStanfordNlpLingIndexedWord *)getMatch {
  return nextMatch_;
}

- (NSString *)description {
  return JreStrcat("$$", @"node matcher for: ", [((EduStanfordNlpSemgraphSemgrexNodePattern *) nil_chk(myNode_)) localString]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingIndexedWord;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpSemgraphSemgrexNodePattern:withEduStanfordNlpSemgraphSemanticGraph:withEduStanfordNlpSemgraphSemgrexAlignment:withEduStanfordNlpSemgraphSemanticGraph:withBoolean:withEduStanfordNlpLingIndexedWord:withJavaUtilMap:withJavaUtilMap:withEduStanfordNlpSemgraphSemgrexVariableStrings:withBoolean:);
  methods[1].selector = @selector(resetChildIter);
  methods[2].selector = @selector(resetChild);
  methods[3].selector = @selector(goToNextNodeMatch);
  methods[4].selector = @selector(commitVariableGroupsWithJavaUtilRegexMatcher:);
  methods[5].selector = @selector(decommitVariableGroups);
  methods[6].selector = @selector(decommitNamedNodes);
  methods[7].selector = @selector(decommitNamedRelations);
  methods[8].selector = @selector(matchChild);
  methods[9].selector = @selector(matches);
  methods[10].selector = @selector(getMatch);
  methods[11].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "finished_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "nodeMatchCandidateIterator_", "LJavaUtilIterator;", .constantValue.asLong = 0, 0x2, -1, -1, 5, -1 },
    { "myNode_", "LEduStanfordNlpSemgraphSemgrexNodePattern;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "childMatcher_", "LEduStanfordNlpSemgraphSemgrexSemgrexMatcher;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "matchedOnce_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "committedVariables_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "nextMatchReln_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "nextMatch_", "LEduStanfordNlpLingIndexedWord;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "namedFirst_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "relnNamedFirst_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ignoreCase_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpSemgraphSemgrexNodePattern;LEduStanfordNlpSemgraphSemanticGraph;LEduStanfordNlpSemgraphSemgrexAlignment;LEduStanfordNlpSemgraphSemanticGraph;ZLEduStanfordNlpLingIndexedWord;LJavaUtilMap;LJavaUtilMap;LEduStanfordNlpSemgraphSemgrexVariableStrings;Z", "(Ledu/stanford/nlp/semgraph/semgrex/NodePattern;Ledu/stanford/nlp/semgraph/SemanticGraph;Ledu/stanford/nlp/semgraph/semgrex/Alignment;Ledu/stanford/nlp/semgraph/SemanticGraph;ZLedu/stanford/nlp/ling/IndexedWord;Ljava/util/Map<Ljava/lang/String;Ledu/stanford/nlp/ling/IndexedWord;>;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;Ledu/stanford/nlp/semgraph/semgrex/VariableStrings;Z)V", "commitVariableGroups", "LJavaUtilRegexMatcher;", "toString", "Ljava/util/Iterator<Ledu/stanford/nlp/ling/IndexedWord;>;", "LEduStanfordNlpSemgraphSemgrexNodePattern;" };
  static const J2ObjcClassInfo _EduStanfordNlpSemgraphSemgrexNodePattern_NodeMatcher = { "NodeMatcher", "edu.stanford.nlp.semgraph.semgrex", ptrTable, methods, fields, 7, 0xa, 12, 11, 6, -1, -1, -1, -1 };
  return &_EduStanfordNlpSemgraphSemgrexNodePattern_NodeMatcher;
}

@end

void EduStanfordNlpSemgraphSemgrexNodePattern_NodeMatcher_initWithEduStanfordNlpSemgraphSemgrexNodePattern_withEduStanfordNlpSemgraphSemanticGraph_withEduStanfordNlpSemgraphSemgrexAlignment_withEduStanfordNlpSemgraphSemanticGraph_withBoolean_withEduStanfordNlpLingIndexedWord_withJavaUtilMap_withJavaUtilMap_withEduStanfordNlpSemgraphSemgrexVariableStrings_withBoolean_(EduStanfordNlpSemgraphSemgrexNodePattern_NodeMatcher *self, EduStanfordNlpSemgraphSemgrexNodePattern *n, EduStanfordNlpSemgraphSemanticGraph *sg, EduStanfordNlpSemgraphSemgrexAlignment *alignment, EduStanfordNlpSemgraphSemanticGraph *sg_align, jboolean hyp, EduStanfordNlpLingIndexedWord *node, id<JavaUtilMap> namesToNodes, id<JavaUtilMap> namesToRelations, EduStanfordNlpSemgraphSemgrexVariableStrings *variableStrings, jboolean ignoreCase) {
  EduStanfordNlpSemgraphSemgrexSemgrexMatcher_initWithEduStanfordNlpSemgraphSemanticGraph_withEduStanfordNlpSemgraphSemgrexAlignment_withEduStanfordNlpSemgraphSemanticGraph_withBoolean_withEduStanfordNlpLingIndexedWord_withJavaUtilMap_withJavaUtilMap_withEduStanfordNlpSemgraphSemgrexVariableStrings_(self, sg, alignment, sg_align, hyp, node, namesToNodes, namesToRelations, variableStrings);
  self->finished_ = false;
  self->nodeMatchCandidateIterator_ = nil;
  self->matchedOnce_ = false;
  self->committedVariables_ = false;
  self->nextMatchReln_ = nil;
  self->nextMatch_ = nil;
  self->namedFirst_ = false;
  self->relnNamedFirst_ = false;
  self->ignoreCase_ = false;
  self->myNode_ = n;
  self->ignoreCase_ = ignoreCase;
  [self resetChildIter];
}

EduStanfordNlpSemgraphSemgrexNodePattern_NodeMatcher *new_EduStanfordNlpSemgraphSemgrexNodePattern_NodeMatcher_initWithEduStanfordNlpSemgraphSemgrexNodePattern_withEduStanfordNlpSemgraphSemanticGraph_withEduStanfordNlpSemgraphSemgrexAlignment_withEduStanfordNlpSemgraphSemanticGraph_withBoolean_withEduStanfordNlpLingIndexedWord_withJavaUtilMap_withJavaUtilMap_withEduStanfordNlpSemgraphSemgrexVariableStrings_withBoolean_(EduStanfordNlpSemgraphSemgrexNodePattern *n, EduStanfordNlpSemgraphSemanticGraph *sg, EduStanfordNlpSemgraphSemgrexAlignment *alignment, EduStanfordNlpSemgraphSemanticGraph *sg_align, jboolean hyp, EduStanfordNlpLingIndexedWord *node, id<JavaUtilMap> namesToNodes, id<JavaUtilMap> namesToRelations, EduStanfordNlpSemgraphSemgrexVariableStrings *variableStrings, jboolean ignoreCase) {
  J2OBJC_NEW_IMPL(EduStanfordNlpSemgraphSemgrexNodePattern_NodeMatcher, initWithEduStanfordNlpSemgraphSemgrexNodePattern_withEduStanfordNlpSemgraphSemanticGraph_withEduStanfordNlpSemgraphSemgrexAlignment_withEduStanfordNlpSemgraphSemanticGraph_withBoolean_withEduStanfordNlpLingIndexedWord_withJavaUtilMap_withJavaUtilMap_withEduStanfordNlpSemgraphSemgrexVariableStrings_withBoolean_, n, sg, alignment, sg_align, hyp, node, namesToNodes, namesToRelations, variableStrings, ignoreCase)
}

EduStanfordNlpSemgraphSemgrexNodePattern_NodeMatcher *create_EduStanfordNlpSemgraphSemgrexNodePattern_NodeMatcher_initWithEduStanfordNlpSemgraphSemgrexNodePattern_withEduStanfordNlpSemgraphSemanticGraph_withEduStanfordNlpSemgraphSemgrexAlignment_withEduStanfordNlpSemgraphSemanticGraph_withBoolean_withEduStanfordNlpLingIndexedWord_withJavaUtilMap_withJavaUtilMap_withEduStanfordNlpSemgraphSemgrexVariableStrings_withBoolean_(EduStanfordNlpSemgraphSemgrexNodePattern *n, EduStanfordNlpSemgraphSemanticGraph *sg, EduStanfordNlpSemgraphSemgrexAlignment *alignment, EduStanfordNlpSemgraphSemanticGraph *sg_align, jboolean hyp, EduStanfordNlpLingIndexedWord *node, id<JavaUtilMap> namesToNodes, id<JavaUtilMap> namesToRelations, EduStanfordNlpSemgraphSemgrexVariableStrings *variableStrings, jboolean ignoreCase) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpSemgraphSemgrexNodePattern_NodeMatcher, initWithEduStanfordNlpSemgraphSemgrexNodePattern_withEduStanfordNlpSemgraphSemanticGraph_withEduStanfordNlpSemgraphSemgrexAlignment_withEduStanfordNlpSemgraphSemanticGraph_withBoolean_withEduStanfordNlpLingIndexedWord_withJavaUtilMap_withJavaUtilMap_withEduStanfordNlpSemgraphSemgrexVariableStrings_withBoolean_, n, sg, alignment, sg_align, hyp, node, namesToNodes, namesToRelations, variableStrings, ignoreCase)
}

void EduStanfordNlpSemgraphSemgrexNodePattern_NodeMatcher_resetChild(EduStanfordNlpSemgraphSemgrexNodePattern_NodeMatcher *self) {
  if (self->childMatcher_ == nil) {
    if (((EduStanfordNlpSemgraphSemgrexNodePattern *) nil_chk(self->myNode_))->child_ == nil) {
      self->matchedOnce_ = false;
    }
    else {
      self->childMatcher_ = [self->myNode_->child_ matcherWithEduStanfordNlpSemgraphSemanticGraph:self->sg_ withEduStanfordNlpSemgraphSemgrexAlignment:self->alignment_ withEduStanfordNlpSemgraphSemanticGraph:self->sg_aligned_ withBoolean:([self->myNode_->reln_ isKindOfClass:[EduStanfordNlpSemgraphSemgrexGraphRelation_ALIGNMENT class]]) ? !self->hyp_ : self->hyp_ withEduStanfordNlpLingIndexedWord:self->nextMatch_ withJavaUtilMap:self->namesToNodes_ withJavaUtilMap:self->namesToRelations_ withEduStanfordNlpSemgraphSemgrexVariableStrings:self->variableStrings_ withBoolean:self->ignoreCase_];
    }
  }
  else {
    [self->childMatcher_ resetChildIterWithEduStanfordNlpLingIndexedWord:self->nextMatch_];
  }
}

void EduStanfordNlpSemgraphSemgrexNodePattern_NodeMatcher_goToNextNodeMatch(EduStanfordNlpSemgraphSemgrexNodePattern_NodeMatcher *self) {
  EduStanfordNlpSemgraphSemgrexNodePattern_NodeMatcher_decommitVariableGroups(self);
  EduStanfordNlpSemgraphSemgrexNodePattern_NodeMatcher_decommitNamedNodes(self);
  EduStanfordNlpSemgraphSemgrexNodePattern_NodeMatcher_decommitNamedRelations(self);
  self->finished_ = true;
  JavaUtilRegexMatcher *m = nil;
  while ([((id<JavaUtilIterator>) nil_chk(self->nodeMatchCandidateIterator_)) hasNext]) {
    if ([((EduStanfordNlpSemgraphSemgrexGraphRelation *) nil_chk(((EduStanfordNlpSemgraphSemgrexNodePattern *) nil_chk(self->myNode_))->reln_)) getName] != nil) {
      NSString *foundReln = [((id<JavaUtilMap>) nil_chk(self->namesToRelations_)) getWithId:[((EduStanfordNlpSemgraphSemgrexGraphRelation *) nil_chk(self->myNode_->reln_)) getName]];
      self->nextMatchReln_ = [((EduStanfordNlpSemgraphSemgrexGraphRelation_SearchNodeIterator *) nil_chk(((EduStanfordNlpSemgraphSemgrexGraphRelation_SearchNodeIterator *) cast_chk(self->nodeMatchCandidateIterator_, [EduStanfordNlpSemgraphSemgrexGraphRelation_SearchNodeIterator class])))) getReln];
      if ((foundReln != nil) && (![((NSString *) nil_chk(self->nextMatchReln_)) isEqual:foundReln])) {
        self->nextMatch_ = [((id<JavaUtilIterator>) nil_chk(self->nodeMatchCandidateIterator_)) next];
        continue;
      }
    }
    self->nextMatch_ = [((id<JavaUtilIterator>) nil_chk(self->nodeMatchCandidateIterator_)) next];
    if ([((NSString *) nil_chk(self->myNode_->descString_)) isEqual:@"{}"] && self->myNode_->isLink_) {
      EduStanfordNlpLingIndexedWord *otherNode = [((id<JavaUtilMap>) nil_chk(self->namesToNodes_)) getWithId:self->myNode_->name_];
      if (otherNode != nil) {
        if ([otherNode isEqual:self->nextMatch_]) {
          if (!self->myNode_->negDesc_) {
            self->finished_ = false;
            break;
          }
        }
        else {
          if (self->myNode_->negDesc_) {
            self->finished_ = false;
            break;
          }
        }
      }
      else {
        jboolean found = [self->myNode_ nodeAttrMatchWithEduStanfordNlpLingIndexedWord:self->nextMatch_ withEduStanfordNlpSemgraphSemanticGraph:self->hyp_ ? self->sg_ : self->sg_aligned_ withBoolean:self->ignoreCase_];
        if (found) {
          for (EduStanfordNlpUtilPair * __strong varGroup in nil_chk(self->myNode_->variableGroups_)) {
            NSString *thisVariable = [((EduStanfordNlpUtilPair *) nil_chk(varGroup)) second];
            NSString *thisVarString = [((EduStanfordNlpSemgraphSemgrexVariableStrings *) nil_chk(self->variableStrings_)) getStringWithId:thisVariable];
            if (thisVarString != nil && ![thisVarString isEqual:[((JavaUtilRegexMatcher *) nil_chk(m)) groupWithInt:[((JavaLangInteger *) nil_chk([varGroup first])) intValue]]]) {
              found = false;
              break;
            }
          }
          self->finished_ = false;
          break;
        }
      }
    }
    else {
      jboolean found = [self->myNode_ nodeAttrMatchWithEduStanfordNlpLingIndexedWord:self->nextMatch_ withEduStanfordNlpSemgraphSemanticGraph:self->hyp_ ? self->sg_ : self->sg_aligned_ withBoolean:self->ignoreCase_];
      if (found) {
        for (EduStanfordNlpUtilPair * __strong varGroup in nil_chk(self->myNode_->variableGroups_)) {
          NSString *thisVariable = [((EduStanfordNlpUtilPair *) nil_chk(varGroup)) second];
          NSString *thisVarString = [((EduStanfordNlpSemgraphSemgrexVariableStrings *) nil_chk(self->variableStrings_)) getStringWithId:thisVariable];
          if (thisVarString != nil && ![thisVarString isEqual:[((JavaUtilRegexMatcher *) nil_chk(m)) groupWithInt:[((JavaLangInteger *) nil_chk([varGroup first])) intValue]]]) {
            found = false;
            break;
          }
        }
        self->finished_ = false;
        break;
      }
    }
  }
  if (!self->finished_) {
    EduStanfordNlpSemgraphSemgrexNodePattern_NodeMatcher_resetChild(self);
    if (((EduStanfordNlpSemgraphSemgrexNodePattern *) nil_chk(self->myNode_))->name_ != nil) {
      if (![((id<JavaUtilMap>) nil_chk(self->namesToNodes_)) containsKeyWithId:self->myNode_->name_]) {
        self->namedFirst_ = true;
      }
      (void) [((id<JavaUtilMap>) nil_chk(self->namesToNodes_)) putWithId:self->myNode_->name_ withId:self->nextMatch_];
    }
    if ([((EduStanfordNlpSemgraphSemgrexGraphRelation *) nil_chk(self->myNode_->reln_)) getName] != nil) {
      if (![((id<JavaUtilMap>) nil_chk(self->namesToRelations_)) containsKeyWithId:[((EduStanfordNlpSemgraphSemgrexGraphRelation *) nil_chk(self->myNode_->reln_)) getName]]) self->relnNamedFirst_ = true;
      (void) [((id<JavaUtilMap>) nil_chk(self->namesToRelations_)) putWithId:[((EduStanfordNlpSemgraphSemgrexGraphRelation *) nil_chk(self->myNode_->reln_)) getName] withId:self->nextMatchReln_];
    }
    EduStanfordNlpSemgraphSemgrexNodePattern_NodeMatcher_commitVariableGroupsWithJavaUtilRegexMatcher_(self, m);
  }
}

void EduStanfordNlpSemgraphSemgrexNodePattern_NodeMatcher_commitVariableGroupsWithJavaUtilRegexMatcher_(EduStanfordNlpSemgraphSemgrexNodePattern_NodeMatcher *self, JavaUtilRegexMatcher *m) {
  self->committedVariables_ = true;
  for (EduStanfordNlpUtilPair * __strong varGroup in nil_chk(((EduStanfordNlpSemgraphSemgrexNodePattern *) nil_chk(self->myNode_))->variableGroups_)) {
    NSString *thisVarString = [((JavaUtilRegexMatcher *) nil_chk(m)) groupWithInt:[((JavaLangInteger *) nil_chk([((EduStanfordNlpUtilPair *) nil_chk(varGroup)) first])) intValue]];
    [((EduStanfordNlpSemgraphSemgrexVariableStrings *) nil_chk(self->variableStrings_)) setVarWithId:[varGroup second] withNSString:thisVarString];
  }
}

void EduStanfordNlpSemgraphSemgrexNodePattern_NodeMatcher_decommitVariableGroups(EduStanfordNlpSemgraphSemgrexNodePattern_NodeMatcher *self) {
  if (self->committedVariables_) {
    for (EduStanfordNlpUtilPair * __strong varGroup in nil_chk(((EduStanfordNlpSemgraphSemgrexNodePattern *) nil_chk(self->myNode_))->variableGroups_)) {
      [((EduStanfordNlpSemgraphSemgrexVariableStrings *) nil_chk(self->variableStrings_)) unsetVarWithId:[((EduStanfordNlpUtilPair *) nil_chk(varGroup)) second]];
    }
  }
  self->committedVariables_ = false;
}

void EduStanfordNlpSemgraphSemgrexNodePattern_NodeMatcher_decommitNamedNodes(EduStanfordNlpSemgraphSemgrexNodePattern_NodeMatcher *self) {
  if ([((id<JavaUtilMap>) nil_chk(self->namesToNodes_)) containsKeyWithId:((EduStanfordNlpSemgraphSemgrexNodePattern *) nil_chk(self->myNode_))->name_] && self->namedFirst_) {
    self->namedFirst_ = false;
    (void) [((id<JavaUtilMap>) nil_chk(self->namesToNodes_)) removeWithId:self->myNode_->name_];
  }
}

void EduStanfordNlpSemgraphSemgrexNodePattern_NodeMatcher_decommitNamedRelations(EduStanfordNlpSemgraphSemgrexNodePattern_NodeMatcher *self) {
  if ([((id<JavaUtilMap>) nil_chk(self->namesToRelations_)) containsKeyWithId:((EduStanfordNlpSemgraphSemgrexGraphRelation *) nil_chk(((EduStanfordNlpSemgraphSemgrexNodePattern *) nil_chk(self->myNode_))->reln_))->name_] && self->relnNamedFirst_) {
    self->relnNamedFirst_ = false;
    (void) [((id<JavaUtilMap>) nil_chk(self->namesToRelations_)) removeWithId:((EduStanfordNlpSemgraphSemgrexGraphRelation *) nil_chk(self->myNode_->reln_))->name_];
  }
}

jboolean EduStanfordNlpSemgraphSemgrexNodePattern_NodeMatcher_matchChild(EduStanfordNlpSemgraphSemgrexNodePattern_NodeMatcher *self) {
  if (self->nextMatch_ == nil) {
    return false;
  }
  if (self->childMatcher_ == nil) {
    if (!self->matchedOnce_) {
      self->matchedOnce_ = true;
      return true;
    }
    return false;
  }
  jboolean match = [self->childMatcher_ matches];
  if (match) {
  }
  else {
    if (self->nextMatch_ != nil) {
      EduStanfordNlpSemgraphSemgrexNodePattern_NodeMatcher_decommitVariableGroups(self);
      EduStanfordNlpSemgraphSemgrexNodePattern_NodeMatcher_decommitNamedNodes(self);
      EduStanfordNlpSemgraphSemgrexNodePattern_NodeMatcher_decommitNamedRelations(self);
    }
  }
  return match;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpSemgraphSemgrexNodePattern_NodeMatcher)
