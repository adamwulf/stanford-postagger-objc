//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/semgraph/semgrex/CoordinationPattern.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/ling/IndexedWord.h"
#include "edu/stanford/nlp/semgraph/SemanticGraph.h"
#include "edu/stanford/nlp/semgraph/semgrex/Alignment.h"
#include "edu/stanford/nlp/semgraph/semgrex/CoordinationPattern.h"
#include "edu/stanford/nlp/semgraph/semgrex/NodePattern.h"
#include "edu/stanford/nlp/semgraph/semgrex/SemgrexMatcher.h"
#include "edu/stanford/nlp/semgraph/semgrex/SemgrexPattern.h"
#include "edu/stanford/nlp/semgraph/semgrex/VariableStrings.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"

@interface EduStanfordNlpSemgraphSemgrexCoordinationPattern () {
 @public
  jboolean isConj_;
  jboolean isNodeCoord_;
  id<JavaUtilList> children_;
}

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpSemgraphSemgrexCoordinationPattern, children_, id<JavaUtilList>)

inline jlong EduStanfordNlpSemgraphSemgrexCoordinationPattern_get_serialVersionUID();
#define EduStanfordNlpSemgraphSemgrexCoordinationPattern_serialVersionUID -3122330899634961002LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpSemgraphSemgrexCoordinationPattern, serialVersionUID, jlong)

@interface EduStanfordNlpSemgraphSemgrexCoordinationPattern_CoordinationMatcher : EduStanfordNlpSemgraphSemgrexSemgrexMatcher {
 @public
  IOSObjectArray *children_;
  EduStanfordNlpSemgraphSemgrexCoordinationPattern *myNode_;
  jint currChild_;
  jboolean considerAll_;
  EduStanfordNlpLingIndexedWord *nextNodeMatch_;
}

- (instancetype)initWithEduStanfordNlpSemgraphSemgrexCoordinationPattern:(EduStanfordNlpSemgraphSemgrexCoordinationPattern *)c
                                 withEduStanfordNlpSemgraphSemanticGraph:(EduStanfordNlpSemgraphSemanticGraph *)sg
                              withEduStanfordNlpSemgraphSemgrexAlignment:(EduStanfordNlpSemgraphSemgrexAlignment *)alignment
                                 withEduStanfordNlpSemgraphSemanticGraph:(EduStanfordNlpSemgraphSemanticGraph *)sg_align
                                                             withBoolean:(jboolean)hypToText
                                       withEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)n
                                                         withJavaUtilMap:(id<JavaUtilMap>)namesToNodes
                                                         withJavaUtilMap:(id<JavaUtilMap>)namesToRelations
                        withEduStanfordNlpSemgraphSemgrexVariableStrings:(EduStanfordNlpSemgraphSemgrexVariableStrings *)variableStrings
                                                             withBoolean:(jboolean)ignoreCase;

- (void)resetChildIter;

- (void)resetChildIterWithEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)node;

- (jboolean)matches;

- (EduStanfordNlpLingIndexedWord *)getMatch;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpSemgraphSemgrexCoordinationPattern_CoordinationMatcher)

J2OBJC_FIELD_SETTER(EduStanfordNlpSemgraphSemgrexCoordinationPattern_CoordinationMatcher, children_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(EduStanfordNlpSemgraphSemgrexCoordinationPattern_CoordinationMatcher, myNode_, EduStanfordNlpSemgraphSemgrexCoordinationPattern *)
J2OBJC_FIELD_SETTER(EduStanfordNlpSemgraphSemgrexCoordinationPattern_CoordinationMatcher, nextNodeMatch_, EduStanfordNlpLingIndexedWord *)

__attribute__((unused)) static void EduStanfordNlpSemgraphSemgrexCoordinationPattern_CoordinationMatcher_initWithEduStanfordNlpSemgraphSemgrexCoordinationPattern_withEduStanfordNlpSemgraphSemanticGraph_withEduStanfordNlpSemgraphSemgrexAlignment_withEduStanfordNlpSemgraphSemanticGraph_withBoolean_withEduStanfordNlpLingIndexedWord_withJavaUtilMap_withJavaUtilMap_withEduStanfordNlpSemgraphSemgrexVariableStrings_withBoolean_(EduStanfordNlpSemgraphSemgrexCoordinationPattern_CoordinationMatcher *self, EduStanfordNlpSemgraphSemgrexCoordinationPattern *c, EduStanfordNlpSemgraphSemanticGraph *sg, EduStanfordNlpSemgraphSemgrexAlignment *alignment, EduStanfordNlpSemgraphSemanticGraph *sg_align, jboolean hypToText, EduStanfordNlpLingIndexedWord *n, id<JavaUtilMap> namesToNodes, id<JavaUtilMap> namesToRelations, EduStanfordNlpSemgraphSemgrexVariableStrings *variableStrings, jboolean ignoreCase);

__attribute__((unused)) static EduStanfordNlpSemgraphSemgrexCoordinationPattern_CoordinationMatcher *new_EduStanfordNlpSemgraphSemgrexCoordinationPattern_CoordinationMatcher_initWithEduStanfordNlpSemgraphSemgrexCoordinationPattern_withEduStanfordNlpSemgraphSemanticGraph_withEduStanfordNlpSemgraphSemgrexAlignment_withEduStanfordNlpSemgraphSemanticGraph_withBoolean_withEduStanfordNlpLingIndexedWord_withJavaUtilMap_withJavaUtilMap_withEduStanfordNlpSemgraphSemgrexVariableStrings_withBoolean_(EduStanfordNlpSemgraphSemgrexCoordinationPattern *c, EduStanfordNlpSemgraphSemanticGraph *sg, EduStanfordNlpSemgraphSemgrexAlignment *alignment, EduStanfordNlpSemgraphSemanticGraph *sg_align, jboolean hypToText, EduStanfordNlpLingIndexedWord *n, id<JavaUtilMap> namesToNodes, id<JavaUtilMap> namesToRelations, EduStanfordNlpSemgraphSemgrexVariableStrings *variableStrings, jboolean ignoreCase) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpSemgraphSemgrexCoordinationPattern_CoordinationMatcher *create_EduStanfordNlpSemgraphSemgrexCoordinationPattern_CoordinationMatcher_initWithEduStanfordNlpSemgraphSemgrexCoordinationPattern_withEduStanfordNlpSemgraphSemanticGraph_withEduStanfordNlpSemgraphSemgrexAlignment_withEduStanfordNlpSemgraphSemanticGraph_withBoolean_withEduStanfordNlpLingIndexedWord_withJavaUtilMap_withJavaUtilMap_withEduStanfordNlpSemgraphSemgrexVariableStrings_withBoolean_(EduStanfordNlpSemgraphSemgrexCoordinationPattern *c, EduStanfordNlpSemgraphSemanticGraph *sg, EduStanfordNlpSemgraphSemgrexAlignment *alignment, EduStanfordNlpSemgraphSemanticGraph *sg_align, jboolean hypToText, EduStanfordNlpLingIndexedWord *n, id<JavaUtilMap> namesToNodes, id<JavaUtilMap> namesToRelations, EduStanfordNlpSemgraphSemgrexVariableStrings *variableStrings, jboolean ignoreCase);

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpSemgraphSemgrexCoordinationPattern_CoordinationMatcher)

@implementation EduStanfordNlpSemgraphSemgrexCoordinationPattern

- (instancetype)initWithBoolean:(jboolean)isNodeCoord
               withJavaUtilList:(id<JavaUtilList>)children
                    withBoolean:(jboolean)isConj {
  EduStanfordNlpSemgraphSemgrexCoordinationPattern_initWithBoolean_withJavaUtilList_withBoolean_(self, isNodeCoord, children, isConj);
  return self;
}

- (jboolean)isNodeCoord {
  return isNodeCoord_;
}

- (void)setChildWithEduStanfordNlpSemgraphSemgrexSemgrexPattern:(EduStanfordNlpSemgraphSemgrexSemgrexPattern *)child {
  if (isNodeCoord_) {
    for (id __strong c in nil_chk(children_)) {
      if ([c isKindOfClass:[EduStanfordNlpSemgraphSemgrexNodePattern class]]) [((EduStanfordNlpSemgraphSemgrexNodePattern *) nil_chk(((EduStanfordNlpSemgraphSemgrexNodePattern *) cast_chk(c, [EduStanfordNlpSemgraphSemgrexNodePattern class])))) setChildWithEduStanfordNlpSemgraphSemgrexSemgrexPattern:child];
    }
  }
  else {
  }
}

- (void)addRelnToNodeCoordWithEduStanfordNlpSemgraphSemgrexSemgrexPattern:(EduStanfordNlpSemgraphSemgrexSemgrexPattern *)child {
  if (isNodeCoord_) {
    for (EduStanfordNlpSemgraphSemgrexSemgrexPattern * __strong c in nil_chk(children_)) {
      id<JavaUtilList> newChildren = new_JavaUtilArrayList_init();
      [newChildren addAllWithJavaUtilCollection:[((EduStanfordNlpSemgraphSemgrexSemgrexPattern *) nil_chk(c)) getChildren]];
      [newChildren addWithId:child];
      [c setChildWithEduStanfordNlpSemgraphSemgrexSemgrexPattern:new_EduStanfordNlpSemgraphSemgrexCoordinationPattern_initWithBoolean_withJavaUtilList_withBoolean_(false, newChildren, true)];
    }
  }
}

- (id<JavaUtilList>)getChildren {
  return children_;
}

- (NSString *)localString {
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  if ([self isNegated]) {
    (void) [sb appendWithChar:'!'];
  }
  if ([self isOptional]) {
    (void) [sb appendWithChar:'?'];
  }
  (void) [sb appendWithNSString:(isConj_ ? @"and" : @"or")];
  (void) [sb appendWithNSString:@" "];
  (void) [sb appendWithNSString:(isNodeCoord_ ? @"node coordination" : @"reln coordination")];
  return [sb description];
}

- (NSString *)description {
  return [self toStringWithBoolean:true];
}

- (NSString *)toStringWithBoolean:(jboolean)hasPrecedence {
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  if (isConj_) {
    for (EduStanfordNlpSemgraphSemgrexSemgrexPattern * __strong node in nil_chk(children_)) {
      (void) [sb appendWithNSString:[((EduStanfordNlpSemgraphSemgrexSemgrexPattern *) nil_chk(node)) description]];
    }
  }
  else {
    (void) [sb appendWithChar:'['];
    for (id<JavaUtilIterator> iter = [((id<JavaUtilList>) nil_chk(children_)) iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) {
      EduStanfordNlpSemgraphSemgrexSemgrexPattern *node = [iter next];
      (void) [sb appendWithNSString:[((EduStanfordNlpSemgraphSemgrexSemgrexPattern *) nil_chk(node)) description]];
      if ([iter hasNext]) {
        (void) [sb appendWithNSString:@" |"];
      }
    }
    (void) [sb appendWithChar:']'];
  }
  return [sb description];
}

- (EduStanfordNlpSemgraphSemgrexSemgrexMatcher *)matcherWithEduStanfordNlpSemgraphSemanticGraph:(EduStanfordNlpSemgraphSemanticGraph *)sg
                                                              withEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)node
                                                                                withJavaUtilMap:(id<JavaUtilMap>)namesToNodes
                                                                                withJavaUtilMap:(id<JavaUtilMap>)namesToRelations
                                               withEduStanfordNlpSemgraphSemgrexVariableStrings:(EduStanfordNlpSemgraphSemgrexVariableStrings *)variableStrings
                                                                                    withBoolean:(jboolean)ignoreCase {
  return new_EduStanfordNlpSemgraphSemgrexCoordinationPattern_CoordinationMatcher_initWithEduStanfordNlpSemgraphSemgrexCoordinationPattern_withEduStanfordNlpSemgraphSemanticGraph_withEduStanfordNlpSemgraphSemgrexAlignment_withEduStanfordNlpSemgraphSemanticGraph_withBoolean_withEduStanfordNlpLingIndexedWord_withJavaUtilMap_withJavaUtilMap_withEduStanfordNlpSemgraphSemgrexVariableStrings_withBoolean_(self, sg, nil, nil, true, node, namesToNodes, namesToRelations, variableStrings, ignoreCase);
}

- (EduStanfordNlpSemgraphSemgrexSemgrexMatcher *)matcherWithEduStanfordNlpSemgraphSemanticGraph:(EduStanfordNlpSemgraphSemanticGraph *)sg
                                                     withEduStanfordNlpSemgraphSemgrexAlignment:(EduStanfordNlpSemgraphSemgrexAlignment *)alignment
                                                        withEduStanfordNlpSemgraphSemanticGraph:(EduStanfordNlpSemgraphSemanticGraph *)sg_align
                                                                                    withBoolean:(jboolean)hypToText
                                                              withEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)node
                                                                                withJavaUtilMap:(id<JavaUtilMap>)namesToNodes
                                                                                withJavaUtilMap:(id<JavaUtilMap>)namesToRelations
                                               withEduStanfordNlpSemgraphSemgrexVariableStrings:(EduStanfordNlpSemgraphSemgrexVariableStrings *)variableStrings
                                                                                    withBoolean:(jboolean)ignoreCase {
  return new_EduStanfordNlpSemgraphSemgrexCoordinationPattern_CoordinationMatcher_initWithEduStanfordNlpSemgraphSemgrexCoordinationPattern_withEduStanfordNlpSemgraphSemanticGraph_withEduStanfordNlpSemgraphSemgrexAlignment_withEduStanfordNlpSemgraphSemanticGraph_withBoolean_withEduStanfordNlpLingIndexedWord_withJavaUtilMap_withJavaUtilMap_withEduStanfordNlpSemgraphSemgrexVariableStrings_withBoolean_(self, sg, alignment, sg_align, hypToText, node, namesToNodes, namesToRelations, variableStrings, ignoreCase);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 5, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 6, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpSemgraphSemgrexSemgrexMatcher;", 0x1, 8, 9, -1, 10, -1, -1 },
    { NULL, "LEduStanfordNlpSemgraphSemgrexSemgrexMatcher;", 0x1, 8, 11, -1, 12, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithBoolean:withJavaUtilList:withBoolean:);
  methods[1].selector = @selector(isNodeCoord);
  methods[2].selector = @selector(setChildWithEduStanfordNlpSemgraphSemgrexSemgrexPattern:);
  methods[3].selector = @selector(addRelnToNodeCoordWithEduStanfordNlpSemgraphSemgrexSemgrexPattern:);
  methods[4].selector = @selector(getChildren);
  methods[5].selector = @selector(localString);
  methods[6].selector = @selector(description);
  methods[7].selector = @selector(toStringWithBoolean:);
  methods[8].selector = @selector(matcherWithEduStanfordNlpSemgraphSemanticGraph:withEduStanfordNlpLingIndexedWord:withJavaUtilMap:withJavaUtilMap:withEduStanfordNlpSemgraphSemgrexVariableStrings:withBoolean:);
  methods[9].selector = @selector(matcherWithEduStanfordNlpSemgraphSemanticGraph:withEduStanfordNlpSemgraphSemgrexAlignment:withEduStanfordNlpSemgraphSemanticGraph:withBoolean:withEduStanfordNlpLingIndexedWord:withJavaUtilMap:withJavaUtilMap:withEduStanfordNlpSemgraphSemgrexVariableStrings:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpSemgraphSemgrexCoordinationPattern_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "isConj_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "isNodeCoord_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "children_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 13, -1 },
  };
  static const void *ptrTable[] = { "ZLJavaUtilList;Z", "(ZLjava/util/List<Ledu/stanford/nlp/semgraph/semgrex/SemgrexPattern;>;Z)V", "setChild", "LEduStanfordNlpSemgraphSemgrexSemgrexPattern;", "addRelnToNodeCoord", "()Ljava/util/List<Ledu/stanford/nlp/semgraph/semgrex/SemgrexPattern;>;", "toString", "Z", "matcher", "LEduStanfordNlpSemgraphSemanticGraph;LEduStanfordNlpLingIndexedWord;LJavaUtilMap;LJavaUtilMap;LEduStanfordNlpSemgraphSemgrexVariableStrings;Z", "(Ledu/stanford/nlp/semgraph/SemanticGraph;Ledu/stanford/nlp/ling/IndexedWord;Ljava/util/Map<Ljava/lang/String;Ledu/stanford/nlp/ling/IndexedWord;>;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;Ledu/stanford/nlp/semgraph/semgrex/VariableStrings;Z)Ledu/stanford/nlp/semgraph/semgrex/SemgrexMatcher;", "LEduStanfordNlpSemgraphSemanticGraph;LEduStanfordNlpSemgraphSemgrexAlignment;LEduStanfordNlpSemgraphSemanticGraph;ZLEduStanfordNlpLingIndexedWord;LJavaUtilMap;LJavaUtilMap;LEduStanfordNlpSemgraphSemgrexVariableStrings;Z", "(Ledu/stanford/nlp/semgraph/SemanticGraph;Ledu/stanford/nlp/semgraph/semgrex/Alignment;Ledu/stanford/nlp/semgraph/SemanticGraph;ZLedu/stanford/nlp/ling/IndexedWord;Ljava/util/Map<Ljava/lang/String;Ledu/stanford/nlp/ling/IndexedWord;>;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;Ledu/stanford/nlp/semgraph/semgrex/VariableStrings;Z)Ledu/stanford/nlp/semgraph/semgrex/SemgrexMatcher;", "Ljava/util/List<Ledu/stanford/nlp/semgraph/semgrex/SemgrexPattern;>;", "LEduStanfordNlpSemgraphSemgrexCoordinationPattern_CoordinationMatcher;" };
  static const J2ObjcClassInfo _EduStanfordNlpSemgraphSemgrexCoordinationPattern = { "CoordinationPattern", "edu.stanford.nlp.semgraph.semgrex", ptrTable, methods, fields, 7, 0x1, 10, 4, -1, 14, -1, -1, -1 };
  return &_EduStanfordNlpSemgraphSemgrexCoordinationPattern;
}

@end

void EduStanfordNlpSemgraphSemgrexCoordinationPattern_initWithBoolean_withJavaUtilList_withBoolean_(EduStanfordNlpSemgraphSemgrexCoordinationPattern *self, jboolean isNodeCoord, id<JavaUtilList> children, jboolean isConj) {
  EduStanfordNlpSemgraphSemgrexSemgrexPattern_init(self);
  if ([((id<JavaUtilList>) nil_chk(children)) size] < 2) {
    @throw new_JavaLangRuntimeException_initWithNSString_(@"Coordination node must have at least 2 children.");
  }
  self->children_ = children;
  self->isConj_ = isConj;
  self->isNodeCoord_ = isNodeCoord;
}

EduStanfordNlpSemgraphSemgrexCoordinationPattern *new_EduStanfordNlpSemgraphSemgrexCoordinationPattern_initWithBoolean_withJavaUtilList_withBoolean_(jboolean isNodeCoord, id<JavaUtilList> children, jboolean isConj) {
  J2OBJC_NEW_IMPL(EduStanfordNlpSemgraphSemgrexCoordinationPattern, initWithBoolean_withJavaUtilList_withBoolean_, isNodeCoord, children, isConj)
}

EduStanfordNlpSemgraphSemgrexCoordinationPattern *create_EduStanfordNlpSemgraphSemgrexCoordinationPattern_initWithBoolean_withJavaUtilList_withBoolean_(jboolean isNodeCoord, id<JavaUtilList> children, jboolean isConj) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpSemgraphSemgrexCoordinationPattern, initWithBoolean_withJavaUtilList_withBoolean_, isNodeCoord, children, isConj)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpSemgraphSemgrexCoordinationPattern)

@implementation EduStanfordNlpSemgraphSemgrexCoordinationPattern_CoordinationMatcher

- (instancetype)initWithEduStanfordNlpSemgraphSemgrexCoordinationPattern:(EduStanfordNlpSemgraphSemgrexCoordinationPattern *)c
                                 withEduStanfordNlpSemgraphSemanticGraph:(EduStanfordNlpSemgraphSemanticGraph *)sg
                              withEduStanfordNlpSemgraphSemgrexAlignment:(EduStanfordNlpSemgraphSemgrexAlignment *)alignment
                                 withEduStanfordNlpSemgraphSemanticGraph:(EduStanfordNlpSemgraphSemanticGraph *)sg_align
                                                             withBoolean:(jboolean)hypToText
                                       withEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)n
                                                         withJavaUtilMap:(id<JavaUtilMap>)namesToNodes
                                                         withJavaUtilMap:(id<JavaUtilMap>)namesToRelations
                        withEduStanfordNlpSemgraphSemgrexVariableStrings:(EduStanfordNlpSemgraphSemgrexVariableStrings *)variableStrings
                                                             withBoolean:(jboolean)ignoreCase {
  EduStanfordNlpSemgraphSemgrexCoordinationPattern_CoordinationMatcher_initWithEduStanfordNlpSemgraphSemgrexCoordinationPattern_withEduStanfordNlpSemgraphSemanticGraph_withEduStanfordNlpSemgraphSemgrexAlignment_withEduStanfordNlpSemgraphSemanticGraph_withBoolean_withEduStanfordNlpLingIndexedWord_withJavaUtilMap_withJavaUtilMap_withEduStanfordNlpSemgraphSemgrexVariableStrings_withBoolean_(self, c, sg, alignment, sg_align, hypToText, n, namesToNodes, namesToRelations, variableStrings, ignoreCase);
  return self;
}

- (void)resetChildIter {
  currChild_ = 0;
  {
    IOSObjectArray *a__ = children_;
    EduStanfordNlpSemgraphSemgrexSemgrexMatcher * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    EduStanfordNlpSemgraphSemgrexSemgrexMatcher * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      EduStanfordNlpSemgraphSemgrexSemgrexMatcher *aChildren = *b__++;
      [((EduStanfordNlpSemgraphSemgrexSemgrexMatcher *) nil_chk(aChildren)) resetChildIter];
    }
  }
  nextNodeMatch_ = nil;
}

- (void)resetChildIterWithEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)node {
  currChild_ = 0;
  {
    IOSObjectArray *a__ = children_;
    EduStanfordNlpSemgraphSemgrexSemgrexMatcher * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    EduStanfordNlpSemgraphSemgrexSemgrexMatcher * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      EduStanfordNlpSemgraphSemgrexSemgrexMatcher *aChildren = *b__++;
      [((EduStanfordNlpSemgraphSemgrexSemgrexMatcher *) nil_chk(aChildren)) resetChildIterWithEduStanfordNlpLingIndexedWord:node];
    }
  }
}

- (jboolean)matches {
  if (considerAll_) {
    if (currChild_ < 0) {
      return [((EduStanfordNlpSemgraphSemgrexCoordinationPattern *) nil_chk(myNode_)) isOptional];
    }
    if (currChild_ == ((IOSObjectArray *) nil_chk(children_))->size_) {
      --currChild_;
    }
    while (true) {
      if ([((EduStanfordNlpSemgraphSemgrexCoordinationPattern *) nil_chk(myNode_)) isNegated] != [((EduStanfordNlpSemgraphSemgrexSemgrexMatcher *) nil_chk(IOSObjectArray_Get(nil_chk(children_), currChild_))) matches]) {
        ++currChild_;
        if (currChild_ == ((IOSObjectArray *) nil_chk(children_))->size_) {
          if ([myNode_ isNegated]) {
            currChild_ = -1;
          }
          else if (myNode_->isNodeCoord_) {
            nextNodeMatch_ = [((EduStanfordNlpSemgraphSemgrexSemgrexMatcher *) nil_chk(IOSObjectArray_Get(nil_chk(children_), 0))) getMatch];
          }
          return true;
        }
      }
      else {
        [((EduStanfordNlpSemgraphSemgrexSemgrexMatcher *) nil_chk(IOSObjectArray_Get(nil_chk(children_), currChild_))) resetChildIter];
        --currChild_;
        if (currChild_ < 0) {
          return [myNode_ isOptional];
        }
      }
    }
  }
  else {
    for (; currChild_ < ((IOSObjectArray *) nil_chk(children_))->size_; currChild_++) {
      if ([((EduStanfordNlpSemgraphSemgrexCoordinationPattern *) nil_chk(myNode_)) isNegated] != [((EduStanfordNlpSemgraphSemgrexSemgrexMatcher *) nil_chk(IOSObjectArray_Get(nil_chk(children_), currChild_))) matches]) {
        if ([myNode_ isNegated]) {
          currChild_ = ((IOSObjectArray *) nil_chk(children_))->size_;
        }
        if (myNode_->isNodeCoord_) nextNodeMatch_ = [((EduStanfordNlpSemgraphSemgrexSemgrexMatcher *) nil_chk(IOSObjectArray_Get(nil_chk(children_), currChild_))) getMatch];
        return true;
      }
      [((EduStanfordNlpSemgraphSemgrexSemgrexMatcher *) nil_chk(IOSObjectArray_Get(nil_chk(children_), currChild_))) resetChildIter];
    }
    if ([((EduStanfordNlpSemgraphSemgrexCoordinationPattern *) nil_chk(myNode_)) isNegated]) {
      currChild_ = ((IOSObjectArray *) nil_chk(children_))->size_;
    }
    return [myNode_ isOptional];
  }
}

- (EduStanfordNlpLingIndexedWord *)getMatch {
  if (((EduStanfordNlpSemgraphSemgrexCoordinationPattern *) nil_chk(myNode_))->isNodeCoord_ && ![myNode_ isNegated]) {
    return nextNodeMatch_;
  }
  else {
    @throw new_JavaLangUnsupportedOperationException_init();
  }
}

- (NSString *)description {
  NSString *ret = @"coordinate matcher for: ";
  {
    IOSObjectArray *a__ = children_;
    EduStanfordNlpSemgraphSemgrexSemgrexMatcher * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    EduStanfordNlpSemgraphSemgrexSemgrexMatcher * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      EduStanfordNlpSemgraphSemgrexSemgrexMatcher *child = *b__++;
      (void) JreStrAppendStrong(&ret, "$C", [((EduStanfordNlpSemgraphSemgrexSemgrexMatcher *) nil_chk(child)) description], ' ');
    }
  }
  return ret;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingIndexedWord;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpSemgraphSemgrexCoordinationPattern:withEduStanfordNlpSemgraphSemanticGraph:withEduStanfordNlpSemgraphSemgrexAlignment:withEduStanfordNlpSemgraphSemanticGraph:withBoolean:withEduStanfordNlpLingIndexedWord:withJavaUtilMap:withJavaUtilMap:withEduStanfordNlpSemgraphSemgrexVariableStrings:withBoolean:);
  methods[1].selector = @selector(resetChildIter);
  methods[2].selector = @selector(resetChildIterWithEduStanfordNlpLingIndexedWord:);
  methods[3].selector = @selector(matches);
  methods[4].selector = @selector(getMatch);
  methods[5].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "children_", "[LEduStanfordNlpSemgraphSemgrexSemgrexMatcher;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "myNode_", "LEduStanfordNlpSemgraphSemgrexCoordinationPattern;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "currChild_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "considerAll_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "nextNodeMatch_", "LEduStanfordNlpLingIndexedWord;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpSemgraphSemgrexCoordinationPattern;LEduStanfordNlpSemgraphSemanticGraph;LEduStanfordNlpSemgraphSemgrexAlignment;LEduStanfordNlpSemgraphSemanticGraph;ZLEduStanfordNlpLingIndexedWord;LJavaUtilMap;LJavaUtilMap;LEduStanfordNlpSemgraphSemgrexVariableStrings;Z", "(Ledu/stanford/nlp/semgraph/semgrex/CoordinationPattern;Ledu/stanford/nlp/semgraph/SemanticGraph;Ledu/stanford/nlp/semgraph/semgrex/Alignment;Ledu/stanford/nlp/semgraph/SemanticGraph;ZLedu/stanford/nlp/ling/IndexedWord;Ljava/util/Map<Ljava/lang/String;Ledu/stanford/nlp/ling/IndexedWord;>;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;Ledu/stanford/nlp/semgraph/semgrex/VariableStrings;Z)V", "resetChildIter", "LEduStanfordNlpLingIndexedWord;", "toString", "LEduStanfordNlpSemgraphSemgrexCoordinationPattern;" };
  static const J2ObjcClassInfo _EduStanfordNlpSemgraphSemgrexCoordinationPattern_CoordinationMatcher = { "CoordinationMatcher", "edu.stanford.nlp.semgraph.semgrex", ptrTable, methods, fields, 7, 0xa, 6, 5, 5, -1, -1, -1, -1 };
  return &_EduStanfordNlpSemgraphSemgrexCoordinationPattern_CoordinationMatcher;
}

@end

void EduStanfordNlpSemgraphSemgrexCoordinationPattern_CoordinationMatcher_initWithEduStanfordNlpSemgraphSemgrexCoordinationPattern_withEduStanfordNlpSemgraphSemanticGraph_withEduStanfordNlpSemgraphSemgrexAlignment_withEduStanfordNlpSemgraphSemanticGraph_withBoolean_withEduStanfordNlpLingIndexedWord_withJavaUtilMap_withJavaUtilMap_withEduStanfordNlpSemgraphSemgrexVariableStrings_withBoolean_(EduStanfordNlpSemgraphSemgrexCoordinationPattern_CoordinationMatcher *self, EduStanfordNlpSemgraphSemgrexCoordinationPattern *c, EduStanfordNlpSemgraphSemanticGraph *sg, EduStanfordNlpSemgraphSemgrexAlignment *alignment, EduStanfordNlpSemgraphSemanticGraph *sg_align, jboolean hypToText, EduStanfordNlpLingIndexedWord *n, id<JavaUtilMap> namesToNodes, id<JavaUtilMap> namesToRelations, EduStanfordNlpSemgraphSemgrexVariableStrings *variableStrings, jboolean ignoreCase) {
  EduStanfordNlpSemgraphSemgrexSemgrexMatcher_initWithEduStanfordNlpSemgraphSemanticGraph_withEduStanfordNlpSemgraphSemgrexAlignment_withEduStanfordNlpSemgraphSemanticGraph_withBoolean_withEduStanfordNlpLingIndexedWord_withJavaUtilMap_withJavaUtilMap_withEduStanfordNlpSemgraphSemgrexVariableStrings_(self, sg, alignment, sg_align, hypToText, n, namesToNodes, namesToRelations, variableStrings);
  self->nextNodeMatch_ = nil;
  self->myNode_ = c;
  self->children_ = [IOSObjectArray newArrayWithLength:[((id<JavaUtilList>) nil_chk(((EduStanfordNlpSemgraphSemgrexCoordinationPattern *) nil_chk(self->myNode_))->children_)) size] type:EduStanfordNlpSemgraphSemgrexSemgrexMatcher_class_()];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(self->children_))->size_; i++) {
    EduStanfordNlpSemgraphSemgrexSemgrexPattern *node = [((id<JavaUtilList>) nil_chk(self->myNode_->children_)) getWithInt:i];
    (void) IOSObjectArray_Set(nil_chk(self->children_), i, [((EduStanfordNlpSemgraphSemgrexSemgrexPattern *) nil_chk(node)) matcherWithEduStanfordNlpSemgraphSemanticGraph:sg withEduStanfordNlpSemgraphSemgrexAlignment:alignment withEduStanfordNlpSemgraphSemanticGraph:sg_align withBoolean:hypToText withEduStanfordNlpLingIndexedWord:n withJavaUtilMap:namesToNodes withJavaUtilMap:namesToRelations withEduStanfordNlpSemgraphSemgrexVariableStrings:variableStrings withBoolean:ignoreCase]);
  }
  self->currChild_ = 0;
  self->considerAll_ = (self->myNode_->isConj_ ^ [self->myNode_ isNegated]);
}

EduStanfordNlpSemgraphSemgrexCoordinationPattern_CoordinationMatcher *new_EduStanfordNlpSemgraphSemgrexCoordinationPattern_CoordinationMatcher_initWithEduStanfordNlpSemgraphSemgrexCoordinationPattern_withEduStanfordNlpSemgraphSemanticGraph_withEduStanfordNlpSemgraphSemgrexAlignment_withEduStanfordNlpSemgraphSemanticGraph_withBoolean_withEduStanfordNlpLingIndexedWord_withJavaUtilMap_withJavaUtilMap_withEduStanfordNlpSemgraphSemgrexVariableStrings_withBoolean_(EduStanfordNlpSemgraphSemgrexCoordinationPattern *c, EduStanfordNlpSemgraphSemanticGraph *sg, EduStanfordNlpSemgraphSemgrexAlignment *alignment, EduStanfordNlpSemgraphSemanticGraph *sg_align, jboolean hypToText, EduStanfordNlpLingIndexedWord *n, id<JavaUtilMap> namesToNodes, id<JavaUtilMap> namesToRelations, EduStanfordNlpSemgraphSemgrexVariableStrings *variableStrings, jboolean ignoreCase) {
  J2OBJC_NEW_IMPL(EduStanfordNlpSemgraphSemgrexCoordinationPattern_CoordinationMatcher, initWithEduStanfordNlpSemgraphSemgrexCoordinationPattern_withEduStanfordNlpSemgraphSemanticGraph_withEduStanfordNlpSemgraphSemgrexAlignment_withEduStanfordNlpSemgraphSemanticGraph_withBoolean_withEduStanfordNlpLingIndexedWord_withJavaUtilMap_withJavaUtilMap_withEduStanfordNlpSemgraphSemgrexVariableStrings_withBoolean_, c, sg, alignment, sg_align, hypToText, n, namesToNodes, namesToRelations, variableStrings, ignoreCase)
}

EduStanfordNlpSemgraphSemgrexCoordinationPattern_CoordinationMatcher *create_EduStanfordNlpSemgraphSemgrexCoordinationPattern_CoordinationMatcher_initWithEduStanfordNlpSemgraphSemgrexCoordinationPattern_withEduStanfordNlpSemgraphSemanticGraph_withEduStanfordNlpSemgraphSemgrexAlignment_withEduStanfordNlpSemgraphSemanticGraph_withBoolean_withEduStanfordNlpLingIndexedWord_withJavaUtilMap_withJavaUtilMap_withEduStanfordNlpSemgraphSemgrexVariableStrings_withBoolean_(EduStanfordNlpSemgraphSemgrexCoordinationPattern *c, EduStanfordNlpSemgraphSemanticGraph *sg, EduStanfordNlpSemgraphSemgrexAlignment *alignment, EduStanfordNlpSemgraphSemanticGraph *sg_align, jboolean hypToText, EduStanfordNlpLingIndexedWord *n, id<JavaUtilMap> namesToNodes, id<JavaUtilMap> namesToRelations, EduStanfordNlpSemgraphSemgrexVariableStrings *variableStrings, jboolean ignoreCase) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpSemgraphSemgrexCoordinationPattern_CoordinationMatcher, initWithEduStanfordNlpSemgraphSemgrexCoordinationPattern_withEduStanfordNlpSemgraphSemanticGraph_withEduStanfordNlpSemgraphSemgrexAlignment_withEduStanfordNlpSemgraphSemanticGraph_withBoolean_withEduStanfordNlpLingIndexedWord_withJavaUtilMap_withJavaUtilMap_withEduStanfordNlpSemgraphSemgrexVariableStrings_withBoolean_, c, sg, alignment, sg_align, hypToText, n, namesToNodes, namesToRelations, variableStrings, ignoreCase)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpSemgraphSemgrexCoordinationPattern_CoordinationMatcher)
