//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/semgraph/semgrex/SemgrexParserTokenManager.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/semgraph/semgrex/SemgrexParserTokenManager.h"
#include "edu/stanford/nlp/semgraph/semgrex/SimpleCharStream.h"
#include "edu/stanford/nlp/semgraph/semgrex/Token.h"
#include "edu/stanford/nlp/semgraph/semgrex/TokenMgrError.h"
#include "java/io/IOException.h"
#include "java/io/PrintStream.h"
#include "java/lang/System.h"

@interface EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager () {
 @public
  IOSIntArray *jjrounds_;
  IOSIntArray *jjstateSet_;
}

- (jint)jjStopStringLiteralDfa_0WithInt:(jint)pos
                               withLong:(jlong)active0;

- (jint)jjStartNfa_0WithInt:(jint)pos
                   withLong:(jlong)active0;

- (jint)jjStopAtPosWithInt:(jint)pos
                   withInt:(jint)kind;

- (jint)jjMoveStringLiteralDfa0_0;

- (jint)jjStartNfaWithStates_0WithInt:(jint)pos
                              withInt:(jint)kind
                              withInt:(jint)state;

- (jint)jjMoveNfa_0WithInt:(jint)startState
                   withInt:(jint)curPos;

+ (jboolean)jjCanMove_0WithInt:(jint)hiByte
                       withInt:(jint)i1
                       withInt:(jint)i2
                      withLong:(jlong)l1
                      withLong:(jlong)l2;

- (void)ReInitRounds;

- (void)jjCheckNAddWithInt:(jint)state;

- (void)jjAddStatesWithInt:(jint)start
                   withInt:(jint)end;

- (void)jjCheckNAddTwoStatesWithInt:(jint)state1
                            withInt:(jint)state2;

- (void)jjCheckNAddStatesWithInt:(jint)start
                         withInt:(jint)end;

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager, jjrounds_, IOSIntArray *)
J2OBJC_FIELD_SETTER(EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager, jjstateSet_, IOSIntArray *)

__attribute__((unused)) static jint EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjStopStringLiteralDfa_0WithInt_withLong_(EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager *self, jint pos, jlong active0);

__attribute__((unused)) static jint EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjStopAtPosWithInt_withInt_(EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager *self, jint pos, jint kind);

__attribute__((unused)) static jint EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjMoveStringLiteralDfa0_0(EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager *self);

__attribute__((unused)) static jint EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjStartNfaWithStates_0WithInt_withInt_withInt_(EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager *self, jint pos, jint kind, jint state);

__attribute__((unused)) static jint EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjMoveNfa_0WithInt_withInt_(EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager *self, jint startState, jint curPos);

__attribute__((unused)) static jboolean EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjCanMove_0WithInt_withInt_withInt_withLong_withLong_(jint hiByte, jint i1, jint i2, jlong l1, jlong l2);

__attribute__((unused)) static void EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_ReInitRounds(EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager *self);

__attribute__((unused)) static void EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjCheckNAddWithInt_(EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager *self, jint state);

__attribute__((unused)) static void EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjAddStatesWithInt_withInt_(EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager *self, jint start, jint end);

__attribute__((unused)) static void EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjCheckNAddStatesWithInt_withInt_(EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager *self, jint start, jint end);

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager)

IOSLongArray *EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjbitVec0;
IOSLongArray *EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjbitVec2;
IOSIntArray *EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjnextStates;
IOSObjectArray *EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjstrLiteralImages;
IOSObjectArray *EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_lexStateNames;
IOSLongArray *EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjtoToken;
IOSLongArray *EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjtoSkip;

@implementation EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager

- (void)setDebugStreamWithJavaIoPrintStream:(JavaIoPrintStream *)ds {
  debugStream_ = ds;
}

- (jint)jjStopStringLiteralDfa_0WithInt:(jint)pos
                               withLong:(jlong)active0 {
  return EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjStopStringLiteralDfa_0WithInt_withLong_(self, pos, active0);
}

- (jint)jjStartNfa_0WithInt:(jint)pos
                   withLong:(jlong)active0 {
  return EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjMoveNfa_0WithInt_withInt_(self, EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjStopStringLiteralDfa_0WithInt_withLong_(self, pos, active0), pos + 1);
}

- (jint)jjStopAtPosWithInt:(jint)pos
                   withInt:(jint)kind {
  return EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjStopAtPosWithInt_withInt_(self, pos, kind);
}

- (jint)jjMoveStringLiteralDfa0_0 {
  return EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjMoveStringLiteralDfa0_0(self);
}

- (jint)jjStartNfaWithStates_0WithInt:(jint)pos
                              withInt:(jint)kind
                              withInt:(jint)state {
  return EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjStartNfaWithStates_0WithInt_withInt_withInt_(self, pos, kind, state);
}

- (jint)jjMoveNfa_0WithInt:(jint)startState
                   withInt:(jint)curPos {
  return EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjMoveNfa_0WithInt_withInt_(self, startState, curPos);
}

+ (jboolean)jjCanMove_0WithInt:(jint)hiByte
                       withInt:(jint)i1
                       withInt:(jint)i2
                      withLong:(jlong)l1
                      withLong:(jlong)l2 {
  return EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjCanMove_0WithInt_withInt_withInt_withLong_withLong_(hiByte, i1, i2, l1, l2);
}

- (instancetype)initWithEduStanfordNlpSemgraphSemgrexSimpleCharStream:(EduStanfordNlpSemgraphSemgrexSimpleCharStream *)stream {
  EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_initWithEduStanfordNlpSemgraphSemgrexSimpleCharStream_(self, stream);
  return self;
}

- (instancetype)initWithEduStanfordNlpSemgraphSemgrexSimpleCharStream:(EduStanfordNlpSemgraphSemgrexSimpleCharStream *)stream
                                                              withInt:(jint)lexState {
  EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_initWithEduStanfordNlpSemgraphSemgrexSimpleCharStream_withInt_(self, stream, lexState);
  return self;
}

- (void)ReInitWithEduStanfordNlpSemgraphSemgrexSimpleCharStream:(EduStanfordNlpSemgraphSemgrexSimpleCharStream *)stream {
  jjmatchedPos_ = jjnewStateCnt_ = 0;
  curLexState_ = defaultLexState_;
  input_stream_ = stream;
  EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_ReInitRounds(self);
}

- (void)ReInitRounds {
  EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_ReInitRounds(self);
}

- (void)ReInitWithEduStanfordNlpSemgraphSemgrexSimpleCharStream:(EduStanfordNlpSemgraphSemgrexSimpleCharStream *)stream
                                                        withInt:(jint)lexState {
  [self ReInitWithEduStanfordNlpSemgraphSemgrexSimpleCharStream:stream];
  [self SwitchToWithInt:lexState];
}

- (void)SwitchToWithInt:(jint)lexState {
  if (lexState >= 1 || lexState < 0) @throw new_EduStanfordNlpSemgraphSemgrexTokenMgrError_initWithNSString_withInt_(JreStrcat("$I$", @"Error: Ignoring invalid lexical state : ", lexState, @". State unchanged."), EduStanfordNlpSemgraphSemgrexTokenMgrError_INVALID_LEXICAL_STATE);
  else curLexState_ = lexState;
}

- (EduStanfordNlpSemgraphSemgrexToken *)jjFillToken {
  EduStanfordNlpSemgraphSemgrexToken *t;
  NSString *curTokenImage;
  jint beginLine;
  jint endLine;
  jint beginColumn;
  jint endColumn;
  NSString *im = IOSObjectArray_Get(nil_chk(EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjstrLiteralImages), jjmatchedKind_);
  curTokenImage = (im == nil) ? [((EduStanfordNlpSemgraphSemgrexSimpleCharStream *) nil_chk(input_stream_)) GetImage] : im;
  beginLine = [((EduStanfordNlpSemgraphSemgrexSimpleCharStream *) nil_chk(input_stream_)) getBeginLine];
  beginColumn = [((EduStanfordNlpSemgraphSemgrexSimpleCharStream *) nil_chk(input_stream_)) getBeginColumn];
  endLine = [((EduStanfordNlpSemgraphSemgrexSimpleCharStream *) nil_chk(input_stream_)) getEndLine];
  endColumn = [((EduStanfordNlpSemgraphSemgrexSimpleCharStream *) nil_chk(input_stream_)) getEndColumn];
  t = EduStanfordNlpSemgraphSemgrexToken_newTokenWithInt_withNSString_(jjmatchedKind_, curTokenImage);
  ((EduStanfordNlpSemgraphSemgrexToken *) nil_chk(t))->beginLine_ = beginLine;
  t->endLine_ = endLine;
  t->beginColumn_ = beginColumn;
  t->endColumn_ = endColumn;
  return t;
}

- (EduStanfordNlpSemgraphSemgrexToken *)getNextToken {
  EduStanfordNlpSemgraphSemgrexToken *matchedToken;
  jint curPos = 0;
  for (; ; ) {
    {
      @try {
        curChar_ = [((EduStanfordNlpSemgraphSemgrexSimpleCharStream *) nil_chk(input_stream_)) BeginToken];
      }
      @catch (JavaIoIOException *e) {
        jjmatchedKind_ = 0;
        matchedToken = [self jjFillToken];
        return matchedToken;
      }
      @try {
        [((EduStanfordNlpSemgraphSemgrexSimpleCharStream *) nil_chk(input_stream_)) backupWithInt:0];
        while (curChar_ <= 32 && ((jlong) 0x100002000LL & (JreLShift64(1LL, curChar_))) != 0LL) curChar_ = [((EduStanfordNlpSemgraphSemgrexSimpleCharStream *) nil_chk(input_stream_)) BeginToken];
      }
      @catch (JavaIoIOException *e1) {
        goto continue_EOFLoop;
      }
      jjmatchedKind_ = (jint) 0x7fffffff;
      jjmatchedPos_ = 0;
      curPos = EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjMoveStringLiteralDfa0_0(self);
      if (jjmatchedKind_ != (jint) 0x7fffffff) {
        if (jjmatchedPos_ + 1 < curPos) [((EduStanfordNlpSemgraphSemgrexSimpleCharStream *) nil_chk(input_stream_)) backupWithInt:curPos - jjmatchedPos_ - 1];
        if ((IOSLongArray_Get(nil_chk(EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjtoToken), JreRShift32(jjmatchedKind_, 6)) & (JreLShift64(1LL, (jjmatchedKind_ & 077)))) != 0LL) {
          matchedToken = [self jjFillToken];
          return matchedToken;
        }
        else {
          goto continue_EOFLoop;
        }
      }
      jint error_line = [((EduStanfordNlpSemgraphSemgrexSimpleCharStream *) nil_chk(input_stream_)) getEndLine];
      jint error_column = [((EduStanfordNlpSemgraphSemgrexSimpleCharStream *) nil_chk(input_stream_)) getEndColumn];
      NSString *error_after = nil;
      jboolean EOFSeen = false;
      @try {
        [((EduStanfordNlpSemgraphSemgrexSimpleCharStream *) nil_chk(input_stream_)) readChar];
        [((EduStanfordNlpSemgraphSemgrexSimpleCharStream *) nil_chk(input_stream_)) backupWithInt:1];
      }
      @catch (JavaIoIOException *e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? @"" : [((EduStanfordNlpSemgraphSemgrexSimpleCharStream *) nil_chk(input_stream_)) GetImage];
        if (curChar_ == 0x000a || curChar_ == 0x000d) {
          error_line++;
          error_column = 0;
        }
        else error_column++;
      }
      if (!EOFSeen) {
        [((EduStanfordNlpSemgraphSemgrexSimpleCharStream *) nil_chk(input_stream_)) backupWithInt:1];
        error_after = curPos <= 1 ? @"" : [((EduStanfordNlpSemgraphSemgrexSimpleCharStream *) nil_chk(input_stream_)) GetImage];
      }
      @throw new_EduStanfordNlpSemgraphSemgrexTokenMgrError_initWithBoolean_withInt_withInt_withInt_withNSString_withChar_withInt_(EOFSeen, curLexState_, error_line, error_column, error_after, curChar_, EduStanfordNlpSemgraphSemgrexTokenMgrError_LEXICAL_ERROR);
    }
    continue_EOFLoop: ;
  }
}

- (void)jjCheckNAddWithInt:(jint)state {
  EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjCheckNAddWithInt_(self, state);
}

- (void)jjAddStatesWithInt:(jint)start
                   withInt:(jint)end {
  EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjAddStatesWithInt_withInt_(self, start, end);
}

- (void)jjCheckNAddTwoStatesWithInt:(jint)state1
                            withInt:(jint)state2 {
  EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjCheckNAddWithInt_(self, state1);
  EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjCheckNAddWithInt_(self, state2);
}

- (void)jjCheckNAddStatesWithInt:(jint)start
                         withInt:(jint)end {
  EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, start, end);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x12, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x12, 4, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 5, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 7, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 9, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x1a, 10, 11, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 12, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpSemgraphSemgrexToken;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpSemgraphSemgrexToken;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 17, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 18, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 19, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 20, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(setDebugStreamWithJavaIoPrintStream:);
  methods[1].selector = @selector(jjStopStringLiteralDfa_0WithInt:withLong:);
  methods[2].selector = @selector(jjStartNfa_0WithInt:withLong:);
  methods[3].selector = @selector(jjStopAtPosWithInt:withInt:);
  methods[4].selector = @selector(jjMoveStringLiteralDfa0_0);
  methods[5].selector = @selector(jjStartNfaWithStates_0WithInt:withInt:withInt:);
  methods[6].selector = @selector(jjMoveNfa_0WithInt:withInt:);
  methods[7].selector = @selector(jjCanMove_0WithInt:withInt:withInt:withLong:withLong:);
  methods[8].selector = @selector(initWithEduStanfordNlpSemgraphSemgrexSimpleCharStream:);
  methods[9].selector = @selector(initWithEduStanfordNlpSemgraphSemgrexSimpleCharStream:withInt:);
  methods[10].selector = @selector(ReInitWithEduStanfordNlpSemgraphSemgrexSimpleCharStream:);
  methods[11].selector = @selector(ReInitRounds);
  methods[12].selector = @selector(ReInitWithEduStanfordNlpSemgraphSemgrexSimpleCharStream:withInt:);
  methods[13].selector = @selector(SwitchToWithInt:);
  methods[14].selector = @selector(jjFillToken);
  methods[15].selector = @selector(getNextToken);
  methods[16].selector = @selector(jjCheckNAddWithInt:);
  methods[17].selector = @selector(jjAddStatesWithInt:withInt:);
  methods[18].selector = @selector(jjCheckNAddTwoStatesWithInt:withInt:);
  methods[19].selector = @selector(jjCheckNAddStatesWithInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "debugStream_", "LJavaIoPrintStream;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "jjbitVec0", "[J", .constantValue.asLong = 0, 0x18, -1, 21, -1, -1 },
    { "jjbitVec2", "[J", .constantValue.asLong = 0, 0x18, -1, 22, -1, -1 },
    { "jjnextStates", "[I", .constantValue.asLong = 0, 0x18, -1, 23, -1, -1 },
    { "jjstrLiteralImages", "[LNSString;", .constantValue.asLong = 0, 0x19, -1, 24, -1, -1 },
    { "lexStateNames", "[LNSString;", .constantValue.asLong = 0, 0x19, -1, 25, -1, -1 },
    { "jjtoToken", "[J", .constantValue.asLong = 0, 0x18, -1, 26, -1, -1 },
    { "jjtoSkip", "[J", .constantValue.asLong = 0, 0x18, -1, 27, -1, -1 },
    { "input_stream_", "LEduStanfordNlpSemgraphSemgrexSimpleCharStream;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "jjrounds_", "[I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "jjstateSet_", "[I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "curChar_", "C", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "curLexState_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "defaultLexState_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "jjnewStateCnt_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "jjround_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "jjmatchedPos_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "jjmatchedKind_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setDebugStream", "LJavaIoPrintStream;", "jjStopStringLiteralDfa_0", "IJ", "jjStartNfa_0", "jjStopAtPos", "II", "jjStartNfaWithStates_0", "III", "jjMoveNfa_0", "jjCanMove_0", "IIIJJ", "LEduStanfordNlpSemgraphSemgrexSimpleCharStream;", "LEduStanfordNlpSemgraphSemgrexSimpleCharStream;I", "ReInit", "SwitchTo", "I", "jjCheckNAdd", "jjAddStates", "jjCheckNAddTwoStates", "jjCheckNAddStates", &EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjbitVec0, &EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjbitVec2, &EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjnextStates, &EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjstrLiteralImages, &EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_lexStateNames, &EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjtoToken, &EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjtoSkip };
  static const J2ObjcClassInfo _EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager = { "SemgrexParserTokenManager", "edu.stanford.nlp.semgraph.semgrex", ptrTable, methods, fields, 7, 0x0, 20, 18, -1, -1, -1, -1, -1 };
  return &_EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager;
}

+ (void)initialize {
  if (self == [EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager class]) {
    EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjbitVec0 = [IOSLongArray newArrayWithLongs:(jlong[]){ (jlong) 0xfffffffffffffffeLL, (jlong) 0xffffffffffffffffLL, (jlong) 0xffffffffffffffffLL, (jlong) 0xffffffffffffffffLL } count:4];
    EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjbitVec2 = [IOSLongArray newArrayWithLongs:(jlong[]){ (jlong) 0x0LL, (jlong) 0x0LL, (jlong) 0xffffffffffffffffLL, (jlong) 0xffffffffffffffffLL } count:4];
    EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjnextStates = [IOSIntArray newArrayWithInts:(jint[]){ 15, 16, 17, 18, 11, 12, 13 } count:7];
    EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjstrLiteralImages = [IOSObjectArray newArrayWithObjects:(id[]){ @"", nil, nil, nil, nil, @"@", nil, nil, @"#", @"$", nil, @"\n", @":", @"(", @")", @"|", @"&", @"!", @"?", @"[", @"]", @",", @"=", @"{", @";", @"}" } count:26 type:NSString_class_()];
    EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_lexStateNames = [IOSObjectArray newArrayWithObjects:(id[]){ @"DEFAULT" } count:1 type:NSString_class_()];
    EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjtoToken = [IOSLongArray newArrayWithLongs:(jlong[]){ (jlong) 0x3fffff1LL } count:1];
    EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjtoSkip = [IOSLongArray newArrayWithLongs:(jlong[]){ (jlong) 0xeLL } count:1];
    J2OBJC_SET_INITIALIZED(EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager)
  }
}

@end

jint EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjStopStringLiteralDfa_0WithInt_withLong_(EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager *self, jint pos, jlong active0) {
  switch (pos) {
    default:
    return -1;
  }
}

jint EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjStopAtPosWithInt_withInt_(EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager *self, jint pos, jint kind) {
  self->jjmatchedKind_ = kind;
  self->jjmatchedPos_ = pos;
  return pos + 1;
}

jint EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjMoveStringLiteralDfa0_0(EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager *self) {
  switch (self->curChar_) {
    case 9:
    return EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjStartNfaWithStates_0WithInt_withInt_withInt_(self, 0, 3, 7);
    case 10:
    return EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjStopAtPosWithInt_withInt_(self, 0, 11);
    case 33:
    return EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjStopAtPosWithInt_withInt_(self, 0, 17);
    case 35:
    return EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjStopAtPosWithInt_withInt_(self, 0, 8);
    case 36:
    return EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjStartNfaWithStates_0WithInt_withInt_withInt_(self, 0, 9, 17);
    case 38:
    return EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjStopAtPosWithInt_withInt_(self, 0, 16);
    case 40:
    return EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjStopAtPosWithInt_withInt_(self, 0, 13);
    case 41:
    return EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjStopAtPosWithInt_withInt_(self, 0, 14);
    case 44:
    return EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjStopAtPosWithInt_withInt_(self, 0, 21);
    case 58:
    return EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjStopAtPosWithInt_withInt_(self, 0, 12);
    case 59:
    return EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjStopAtPosWithInt_withInt_(self, 0, 24);
    case 61:
    return EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjStartNfaWithStates_0WithInt_withInt_withInt_(self, 0, 22, 5);
    case 63:
    return EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjStopAtPosWithInt_withInt_(self, 0, 18);
    case 64:
    return EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjStopAtPosWithInt_withInt_(self, 0, 5);
    case 91:
    return EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjStopAtPosWithInt_withInt_(self, 0, 19);
    case 93:
    return EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjStopAtPosWithInt_withInt_(self, 0, 20);
    case 123:
    return EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjStopAtPosWithInt_withInt_(self, 0, 23);
    case 124:
    return EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjStopAtPosWithInt_withInt_(self, 0, 15);
    case 125:
    return EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjStopAtPosWithInt_withInt_(self, 0, 25);
    default:
    return EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjMoveNfa_0WithInt_withInt_(self, 0, 0);
  }
}

jint EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjStartNfaWithStates_0WithInt_withInt_withInt_(EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager *self, jint pos, jint kind, jint state) {
  self->jjmatchedKind_ = kind;
  self->jjmatchedPos_ = pos;
  @try {
    self->curChar_ = [((EduStanfordNlpSemgraphSemgrexSimpleCharStream *) nil_chk(self->input_stream_)) readChar];
  }
  @catch (JavaIoIOException *e) {
    return pos + 1;
  }
  return EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjMoveNfa_0WithInt_withInt_(self, state, pos + 1);
}

jint EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjMoveNfa_0WithInt_withInt_(EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager *self, jint startState, jint curPos) {
  jint startsAt = 0;
  self->jjnewStateCnt_ = 19;
  jint i = 1;
  *IOSIntArray_GetRef(nil_chk(self->jjstateSet_), 0) = startState;
  jint kind = (jint) 0x7fffffff;
  for (; ; ) {
    if (++self->jjround_ == (jint) 0x7fffffff) EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_ReInitRounds(self);
    if (self->curChar_ < 64) {
      jlong l = JreLShift64(1LL, self->curChar_);
      do {
        switch (IOSIntArray_Get(self->jjstateSet_, --i)) {
          case 0:
          if (((jlong) 0x3ff0484ffffdbffLL & l) != 0LL) {
            if (kind > 6) kind = 6;
            EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjCheckNAddWithInt_(self, 7);
          }
          else if (((jlong) 0x5000400000000000LL & l) != 0LL) {
            if (kind > 4) kind = 4;
          }
          else if (self->curChar_ == 36) EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 0, 3);
          else if (self->curChar_ == 47) EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 4, 6);
          else if (self->curChar_ == 61) *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 5;
          if (((jlong) 0x3ff000000000000LL & l) != 0LL) {
            if (kind > 7) kind = 7;
            EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjCheckNAddWithInt_(self, 8);
          }
          else if (self->curChar_ == 60) *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 3;
          else if (self->curChar_ == 62) *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 1;
          break;
          case 17:
          if (self->curChar_ == 45) EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjCheckNAddWithInt_(self, 16);
          else if (self->curChar_ == 43) EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjCheckNAddWithInt_(self, 15);
          if (self->curChar_ == 45) {
            if (kind > 4) kind = 4;
          }
          else if (self->curChar_ == 43) {
            if (kind > 4) kind = 4;
          }
          break;
          case 1:
          if (self->curChar_ == 62 && kind > 4) kind = 4;
          break;
          case 2:
          if (self->curChar_ == 62) *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 1;
          break;
          case 3:
          if (self->curChar_ == 60 && kind > 4) kind = 4;
          break;
          case 4:
          if (self->curChar_ == 60) *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 3;
          break;
          case 5:
          if (self->curChar_ == 61 && kind > 4) kind = 4;
          break;
          case 6:
          if (self->curChar_ == 61) *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 5;
          break;
          case 7:
          if (((jlong) 0x3ff0484ffffdbffLL & l) == 0LL) break;
          if (kind > 6) kind = 6;
          EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjCheckNAddWithInt_(self, 7);
          break;
          case 8:
          if (((jlong) 0x3ff000000000000LL & l) == 0LL) break;
          if (kind > 7) kind = 7;
          EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjCheckNAddWithInt_(self, 8);
          break;
          case 9:
          case 10:
          if (self->curChar_ == 47) EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 4, 6);
          break;
          case 12:
          if (((jlong) 0xffff7fffffffdbffLL & l) != 0LL) EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 4, 6);
          break;
          case 13:
          if (self->curChar_ == 47 && kind > 10) kind = 10;
          break;
          case 14:
          if (self->curChar_ == 36) EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjCheckNAddStatesWithInt_withInt_(self, 0, 3);
          break;
          case 15:
          if (self->curChar_ == 43 && kind > 4) kind = 4;
          break;
          case 16:
          if (self->curChar_ == 45 && kind > 4) kind = 4;
          break;
          case 18:
          if (self->curChar_ == 45) EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjCheckNAddWithInt_(self, 16);
          break;
          default:
          break;
        }
      }
      while (i != startsAt);
    }
    else if (self->curChar_ < 128) {
      jlong l = JreLShift64(1LL, (self->curChar_ & 077));
      do {
        switch (IOSIntArray_Get(self->jjstateSet_, --i)) {
          case 0:
          case 7:
          if (((jlong) 0x87ffffffd7fffffeLL & l) == 0LL) break;
          if (kind > 6) kind = 6;
          EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjCheckNAddWithInt_(self, 7);
          break;
          case 11:
          if (self->curChar_ == 92) *IOSIntArray_GetRef(self->jjstateSet_, self->jjnewStateCnt_++) = 10;
          break;
          case 12:
          EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjAddStatesWithInt_withInt_(self, 4, 6);
          break;
          default:
          break;
        }
      }
      while (i != startsAt);
    }
    else {
      jint hiByte = (jint) (JreRShift32(self->curChar_, 8));
      jint i1 = JreRShift32(hiByte, 6);
      jlong l1 = JreLShift64(1LL, (hiByte & 077));
      jint i2 = JreRShift32((self->curChar_ & (jint) 0xff), 6);
      jlong l2 = JreLShift64(1LL, (self->curChar_ & 077));
      do {
        switch (IOSIntArray_Get(self->jjstateSet_, --i)) {
          case 0:
          case 7:
          if (!EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjCanMove_0WithInt_withInt_withInt_withLong_withLong_(hiByte, i1, i2, l1, l2)) break;
          if (kind > 6) kind = 6;
          EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjCheckNAddWithInt_(self, 7);
          break;
          case 12:
          if (EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjCanMove_0WithInt_withInt_withInt_withLong_withLong_(hiByte, i1, i2, l1, l2)) EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjAddStatesWithInt_withInt_(self, 4, 6);
          break;
          default:
          break;
        }
      }
      while (i != startsAt);
    }
    if (kind != (jint) 0x7fffffff) {
      self->jjmatchedKind_ = kind;
      self->jjmatchedPos_ = curPos;
      kind = (jint) 0x7fffffff;
    }
    ++curPos;
    if ((i = self->jjnewStateCnt_) == (startsAt = 19 - (self->jjnewStateCnt_ = startsAt))) return curPos;
    @try {
      self->curChar_ = [((EduStanfordNlpSemgraphSemgrexSimpleCharStream *) nil_chk(self->input_stream_)) readChar];
    }
    @catch (JavaIoIOException *e) {
      return curPos;
    }
  }
}

jboolean EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjCanMove_0WithInt_withInt_withInt_withLong_withLong_(jint hiByte, jint i1, jint i2, jlong l1, jlong l2) {
  EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_initialize();
  switch (hiByte) {
    case 0:
    return ((IOSLongArray_Get(nil_chk(EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjbitVec2), i2) & l2) != 0LL);
    default:
    if ((IOSLongArray_Get(nil_chk(EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjbitVec0), i1) & l1) != 0LL) return true;
    return false;
  }
}

void EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_initWithEduStanfordNlpSemgraphSemgrexSimpleCharStream_(EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager *self, EduStanfordNlpSemgraphSemgrexSimpleCharStream *stream) {
  NSObject_init(self);
  self->debugStream_ = JreLoadStatic(JavaLangSystem, out);
  self->jjrounds_ = [IOSIntArray newArrayWithLength:19];
  self->jjstateSet_ = [IOSIntArray newArrayWithLength:38];
  self->curLexState_ = 0;
  self->defaultLexState_ = 0;
  self->input_stream_ = stream;
}

EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager *new_EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_initWithEduStanfordNlpSemgraphSemgrexSimpleCharStream_(EduStanfordNlpSemgraphSemgrexSimpleCharStream *stream) {
  J2OBJC_NEW_IMPL(EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager, initWithEduStanfordNlpSemgraphSemgrexSimpleCharStream_, stream)
}

EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager *create_EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_initWithEduStanfordNlpSemgraphSemgrexSimpleCharStream_(EduStanfordNlpSemgraphSemgrexSimpleCharStream *stream) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager, initWithEduStanfordNlpSemgraphSemgrexSimpleCharStream_, stream)
}

void EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_initWithEduStanfordNlpSemgraphSemgrexSimpleCharStream_withInt_(EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager *self, EduStanfordNlpSemgraphSemgrexSimpleCharStream *stream, jint lexState) {
  EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_initWithEduStanfordNlpSemgraphSemgrexSimpleCharStream_(self, stream);
  [self SwitchToWithInt:lexState];
}

EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager *new_EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_initWithEduStanfordNlpSemgraphSemgrexSimpleCharStream_withInt_(EduStanfordNlpSemgraphSemgrexSimpleCharStream *stream, jint lexState) {
  J2OBJC_NEW_IMPL(EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager, initWithEduStanfordNlpSemgraphSemgrexSimpleCharStream_withInt_, stream, lexState)
}

EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager *create_EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_initWithEduStanfordNlpSemgraphSemgrexSimpleCharStream_withInt_(EduStanfordNlpSemgraphSemgrexSimpleCharStream *stream, jint lexState) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager, initWithEduStanfordNlpSemgraphSemgrexSimpleCharStream_withInt_, stream, lexState)
}

void EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_ReInitRounds(EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager *self) {
  jint i;
  self->jjround_ = (jint) 0x80000001;
  for (i = 19; i-- > 0; ) *IOSIntArray_GetRef(nil_chk(self->jjrounds_), i) = -0x7fffffff - 1;
}

void EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjCheckNAddWithInt_(EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager *self, jint state) {
  if (IOSIntArray_Get(nil_chk(self->jjrounds_), state) != self->jjround_) {
    *IOSIntArray_GetRef(nil_chk(self->jjstateSet_), self->jjnewStateCnt_++) = state;
    *IOSIntArray_GetRef(self->jjrounds_, state) = self->jjround_;
  }
}

void EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjAddStatesWithInt_withInt_(EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager *self, jint start, jint end) {
  do {
    *IOSIntArray_GetRef(nil_chk(self->jjstateSet_), self->jjnewStateCnt_++) = IOSIntArray_Get(nil_chk(EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjnextStates), start);
  }
  while (start++ != end);
}

void EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjCheckNAddStatesWithInt_withInt_(EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager *self, jint start, jint end) {
  do {
    EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjCheckNAddWithInt_(self, IOSIntArray_Get(nil_chk(EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager_jjnextStates), start));
  }
  while (start++ != end);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpSemgraphSemgrexSemgrexParserTokenManager)
