//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/semgraph/SemanticGraph.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/graph/DirectedMultiGraph.h"
#include "edu/stanford/nlp/ling/CoreAnnotations.h"
#include "edu/stanford/nlp/ling/CoreLabel.h"
#include "edu/stanford/nlp/ling/IndexedWord.h"
#include "edu/stanford/nlp/semgraph/SemanticGraph.h"
#include "edu/stanford/nlp/semgraph/SemanticGraphEdge.h"
#include "edu/stanford/nlp/semgraph/SemanticGraphFormatter.h"
#include "edu/stanford/nlp/stats/ClassicCounter.h"
#include "edu/stanford/nlp/stats/Counters.h"
#include "edu/stanford/nlp/stats/TwoDimensionalCounter.h"
#include "edu/stanford/nlp/trees/EnglishGrammaticalRelations.h"
#include "edu/stanford/nlp/trees/GrammaticalRelation.h"
#include "edu/stanford/nlp/trees/TypedDependency.h"
#include "edu/stanford/nlp/util/CollectionUtils.h"
#include "edu/stanford/nlp/util/Generics.h"
#include "edu/stanford/nlp/util/MapFactory.h"
#include "edu/stanford/nlp/util/Pair.h"
#include "edu/stanford/nlp/util/StringParsingTask.h"
#include "edu/stanford/nlp/util/StringUtils.h"
#include "java/io/PrintStream.h"
#include "java/lang/Double.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Iterable.h"
#include "java/lang/Math.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/Comparator.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/Stack.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"

@interface EduStanfordNlpSemgraphSemanticGraph () {
 @public
  id<JavaUtilCollection> roots_;
  EduStanfordNlpGraphDirectedMultiGraph *graph_;
  JavaUtilLinkedList *comments_;
}

- (id<JavaUtilList>)getPathToRootWithEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)vertex
                                                  withJavaUtilList:(id<JavaUtilList>)used;

- (void)descendantsHelperWithEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)curr
                                           withJavaUtilSet:(id<JavaUtilSet>)descendantSet;

- (id<JavaUtilList>)getVerticesWithoutParents;

- (void)topologicalSortHelperWithEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)vertex
                                               withJavaUtilSet:(id<JavaUtilSet>)temporary
                                               withJavaUtilSet:(id<JavaUtilSet>)permanent
                                              withJavaUtilList:(id<JavaUtilList>)result;

- (jboolean)isNegatedVerbWithEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)vertex;

- (jboolean)isDagHelperWithEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)current
                                         withJavaUtilSet:(id<JavaUtilSet>)unused
                                         withJavaUtilSet:(id<JavaUtilSet>)trail;

- (void)recToStringWithEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)curr
        withEduStanfordNlpLingCoreLabel_OutputFormat:(EduStanfordNlpLingCoreLabel_OutputFormat *)wordFormat
                           withJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                                             withInt:(jint)offset
                                     withJavaUtilSet:(id<JavaUtilSet>)used;

+ (NSString *)spaceWithInt:(jint)width;

- (void)insertSpecificIntoListWithNSString:(NSString *)specific
         withEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)relnTgtNode
                          withJavaUtilList:(id<JavaUtilList>)tgtList;

- (NSString *)toReadableString;

- (NSString *)toXMLString;

- (void)toCompactStringHelperWithEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)node
                                     withJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                                               withJavaUtilSet:(id<JavaUtilSet>)used
                                                   withBoolean:(jboolean)showTags;

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpSemgraphSemanticGraph, roots_, id<JavaUtilCollection>)
J2OBJC_FIELD_SETTER(EduStanfordNlpSemgraphSemanticGraph, graph_, EduStanfordNlpGraphDirectedMultiGraph *)
J2OBJC_FIELD_SETTER(EduStanfordNlpSemgraphSemanticGraph, comments_, JavaUtilLinkedList *)

inline EduStanfordNlpSemgraphSemanticGraphFormatter *EduStanfordNlpSemgraphSemanticGraph_get_formatter();
static EduStanfordNlpSemgraphSemanticGraphFormatter *EduStanfordNlpSemgraphSemanticGraph_formatter;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpSemgraphSemanticGraph, formatter, EduStanfordNlpSemgraphSemanticGraphFormatter *)

inline EduStanfordNlpUtilMapFactory *EduStanfordNlpSemgraphSemanticGraph_get_outerMapFactory();
static EduStanfordNlpUtilMapFactory *EduStanfordNlpSemgraphSemanticGraph_outerMapFactory;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpSemgraphSemanticGraph, outerMapFactory, EduStanfordNlpUtilMapFactory *)

inline EduStanfordNlpUtilMapFactory *EduStanfordNlpSemgraphSemanticGraph_get_innerMapFactory();
static EduStanfordNlpUtilMapFactory *EduStanfordNlpSemgraphSemanticGraph_innerMapFactory;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpSemgraphSemanticGraph, innerMapFactory, EduStanfordNlpUtilMapFactory *)

inline EduStanfordNlpUtilMapFactory *EduStanfordNlpSemgraphSemanticGraph_get_wordMapFactory();
static EduStanfordNlpUtilMapFactory *EduStanfordNlpSemgraphSemanticGraph_wordMapFactory;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpSemgraphSemanticGraph, wordMapFactory, EduStanfordNlpUtilMapFactory *)

inline JavaUtilRegexPattern *EduStanfordNlpSemgraphSemanticGraph_get_WORD_AND_INDEX_PATTERN();
static JavaUtilRegexPattern *EduStanfordNlpSemgraphSemanticGraph_WORD_AND_INDEX_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpSemgraphSemanticGraph, WORD_AND_INDEX_PATTERN, JavaUtilRegexPattern *)

inline jlong EduStanfordNlpSemgraphSemanticGraph_get_serialVersionUID();
#define EduStanfordNlpSemgraphSemanticGraph_serialVersionUID 1LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpSemgraphSemanticGraph, serialVersionUID, jlong)

__attribute__((unused)) static id<JavaUtilList> EduStanfordNlpSemgraphSemanticGraph_getPathToRootWithEduStanfordNlpLingIndexedWord_withJavaUtilList_(EduStanfordNlpSemgraphSemanticGraph *self, EduStanfordNlpLingIndexedWord *vertex, id<JavaUtilList> used);

__attribute__((unused)) static void EduStanfordNlpSemgraphSemanticGraph_descendantsHelperWithEduStanfordNlpLingIndexedWord_withJavaUtilSet_(EduStanfordNlpSemgraphSemanticGraph *self, EduStanfordNlpLingIndexedWord *curr, id<JavaUtilSet> descendantSet);

__attribute__((unused)) static id<JavaUtilList> EduStanfordNlpSemgraphSemanticGraph_getVerticesWithoutParents(EduStanfordNlpSemgraphSemanticGraph *self);

__attribute__((unused)) static void EduStanfordNlpSemgraphSemanticGraph_topologicalSortHelperWithEduStanfordNlpLingIndexedWord_withJavaUtilSet_withJavaUtilSet_withJavaUtilList_(EduStanfordNlpSemgraphSemanticGraph *self, EduStanfordNlpLingIndexedWord *vertex, id<JavaUtilSet> temporary, id<JavaUtilSet> permanent, id<JavaUtilList> result);

__attribute__((unused)) static jboolean EduStanfordNlpSemgraphSemanticGraph_isNegatedVerbWithEduStanfordNlpLingIndexedWord_(EduStanfordNlpSemgraphSemanticGraph *self, EduStanfordNlpLingIndexedWord *vertex);

__attribute__((unused)) static jboolean EduStanfordNlpSemgraphSemanticGraph_isDagHelperWithEduStanfordNlpLingIndexedWord_withJavaUtilSet_withJavaUtilSet_(EduStanfordNlpSemgraphSemanticGraph *self, EduStanfordNlpLingIndexedWord *current, id<JavaUtilSet> unused, id<JavaUtilSet> trail);

__attribute__((unused)) static void EduStanfordNlpSemgraphSemanticGraph_recToStringWithEduStanfordNlpLingIndexedWord_withEduStanfordNlpLingCoreLabel_OutputFormat_withJavaLangStringBuilder_withInt_withJavaUtilSet_(EduStanfordNlpSemgraphSemanticGraph *self, EduStanfordNlpLingIndexedWord *curr, EduStanfordNlpLingCoreLabel_OutputFormat *wordFormat, JavaLangStringBuilder *sb, jint offset, id<JavaUtilSet> used);

__attribute__((unused)) static NSString *EduStanfordNlpSemgraphSemanticGraph_spaceWithInt_(jint width);

__attribute__((unused)) static void EduStanfordNlpSemgraphSemanticGraph_insertSpecificIntoListWithNSString_withEduStanfordNlpLingIndexedWord_withJavaUtilList_(EduStanfordNlpSemgraphSemanticGraph *self, NSString *specific, EduStanfordNlpLingIndexedWord *relnTgtNode, id<JavaUtilList> tgtList);

__attribute__((unused)) static NSString *EduStanfordNlpSemgraphSemanticGraph_toReadableString(EduStanfordNlpSemgraphSemanticGraph *self);

__attribute__((unused)) static NSString *EduStanfordNlpSemgraphSemanticGraph_toXMLString(EduStanfordNlpSemgraphSemanticGraph *self);

__attribute__((unused)) static void EduStanfordNlpSemgraphSemanticGraph_toCompactStringHelperWithEduStanfordNlpLingIndexedWord_withJavaLangStringBuilder_withJavaUtilSet_withBoolean_(EduStanfordNlpSemgraphSemanticGraph *self, EduStanfordNlpLingIndexedWord *node, JavaLangStringBuilder *sb, id<JavaUtilSet> used, jboolean showTags);

__attribute__((unused)) static void EduStanfordNlpSemgraphSemanticGraph_OutputFormat_initWithNSString_withInt_(EduStanfordNlpSemgraphSemanticGraph_OutputFormat *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static EduStanfordNlpSemgraphSemanticGraph_OutputFormat *new_EduStanfordNlpSemgraphSemanticGraph_OutputFormat_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

@interface EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask : EduStanfordNlpUtilStringParsingTask {
 @public
  EduStanfordNlpSemgraphSemanticGraph *sg_;
  id<JavaUtilSet> indexesUsed_;
}

- (instancetype)initWithNSString:(NSString *)s;

- (EduStanfordNlpSemgraphSemanticGraph *)parse;

- (void)readDepWithEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)gov
                                    withNSString:(NSString *)reln;

- (EduStanfordNlpLingIndexedWord *)makeVertexWithNSString:(NSString *)word;

+ (EduStanfordNlpUtilPair *)readWordAndIndexWithNSString:(NSString *)word;

- (JavaLangInteger *)getNextFreeIndex;

- (void)readLeftBracket;

- (void)readRightBracket;

- (void)readRelnSeparator;

+ (jboolean)isLeftBracketWithChar:(jchar)ch;

+ (jboolean)isRightBracketWithChar:(jchar)ch;

+ (jboolean)isRelnSeparatorWithChar:(jchar)ch;

- (jboolean)isPunctWithChar:(jchar)ch;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask)

J2OBJC_FIELD_SETTER(EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask, sg_, EduStanfordNlpSemgraphSemanticGraph *)
J2OBJC_FIELD_SETTER(EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask, indexesUsed_, id<JavaUtilSet>)

__attribute__((unused)) static void EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask_initWithNSString_(EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask *self, NSString *s);

__attribute__((unused)) static EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask *new_EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask_initWithNSString_(NSString *s) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask *create_EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask_initWithNSString_(NSString *s);

__attribute__((unused)) static void EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask_readDepWithEduStanfordNlpLingIndexedWord_withNSString_(EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask *self, EduStanfordNlpLingIndexedWord *gov, NSString *reln);

__attribute__((unused)) static EduStanfordNlpLingIndexedWord *EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask_makeVertexWithNSString_(EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask *self, NSString *word);

__attribute__((unused)) static EduStanfordNlpUtilPair *EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask_readWordAndIndexWithNSString_(NSString *word);

__attribute__((unused)) static JavaLangInteger *EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask_getNextFreeIndex(EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask *self);

__attribute__((unused)) static void EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask_readLeftBracket(EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask *self);

__attribute__((unused)) static void EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask_readRightBracket(EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask *self);

__attribute__((unused)) static void EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask_readRelnSeparator(EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask *self);

__attribute__((unused)) static jboolean EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask_isLeftBracketWithChar_(jchar ch);

__attribute__((unused)) static jboolean EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask_isRightBracketWithChar_(jchar ch);

__attribute__((unused)) static jboolean EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask_isRelnSeparatorWithChar_(jchar ch);

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask)

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpSemgraphSemanticGraph)

@implementation EduStanfordNlpSemgraphSemanticGraph

- (jint)edgeCount {
  return [((EduStanfordNlpGraphDirectedMultiGraph *) nil_chk(graph_)) getNumEdges];
}

- (jint)outDegreeWithEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)vertex {
  return [((EduStanfordNlpGraphDirectedMultiGraph *) nil_chk(graph_)) getOutDegreeWithId:vertex];
}

- (jint)inDegreeWithEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)vertex {
  return [((EduStanfordNlpGraphDirectedMultiGraph *) nil_chk(graph_)) getInDegreeWithId:vertex];
}

- (id<JavaUtilList>)getAllEdgesWithEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)gov
                               withEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)dep {
  return [((EduStanfordNlpGraphDirectedMultiGraph *) nil_chk(graph_)) getEdgesWithId:gov withId:dep];
}

- (EduStanfordNlpSemgraphSemanticGraphEdge *)getEdgeWithEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)gov
                                                    withEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)dep {
  id<JavaUtilList> edges = [((EduStanfordNlpGraphDirectedMultiGraph *) nil_chk(graph_)) getEdgesWithId:gov withId:dep];
  if (edges == nil || [edges isEmpty]) return nil;
  return [edges getWithInt:0];
}

- (void)addVertexWithEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)vertex {
  [((EduStanfordNlpGraphDirectedMultiGraph *) nil_chk(graph_)) addVertexWithId:vertex];
}

- (jboolean)containsVertexWithEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)vertex {
  return [((EduStanfordNlpGraphDirectedMultiGraph *) nil_chk(graph_)) containsVertexWithId:vertex];
}

- (jboolean)containsEdgeWithEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)source
                        withEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)target {
  return [((EduStanfordNlpGraphDirectedMultiGraph *) nil_chk(graph_)) isEdgeWithId:source withId:target];
}

- (jboolean)containsEdgeWithEduStanfordNlpSemgraphSemanticGraphEdge:(EduStanfordNlpSemgraphSemanticGraphEdge *)edge {
  return [self containsEdgeWithEduStanfordNlpLingIndexedWord:[((EduStanfordNlpSemgraphSemanticGraphEdge *) nil_chk(edge)) getSource] withEduStanfordNlpLingIndexedWord:[edge getTarget]];
}

- (id<JavaUtilSet>)vertexSet {
  return [((EduStanfordNlpGraphDirectedMultiGraph *) nil_chk(graph_)) getAllVertices];
}

- (jboolean)removeEdgeWithEduStanfordNlpSemgraphSemanticGraphEdge:(EduStanfordNlpSemgraphSemanticGraphEdge *)e {
  return [((EduStanfordNlpGraphDirectedMultiGraph *) nil_chk(graph_)) removeEdgeWithId:[((EduStanfordNlpSemgraphSemanticGraphEdge *) nil_chk(e)) getSource] withId:[e getTarget] withId:e];
}

- (jboolean)removeVertexWithEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)vertex {
  return [((EduStanfordNlpGraphDirectedMultiGraph *) nil_chk(graph_)) removeVertexWithId:vertex];
}

- (id<JavaUtilList>)vertexListSorted {
  JavaUtilArrayList *vlist = new_JavaUtilArrayList_initWithJavaUtilCollection_([self vertexSet]);
  JavaUtilCollections_sortWithJavaUtilList_(vlist);
  return vlist;
}

- (id<JavaUtilList>)edgeListSorted {
  JavaUtilArrayList *edgeList = new_JavaUtilArrayList_init();
  for (EduStanfordNlpSemgraphSemanticGraphEdge * __strong edge in nil_chk([self edgeIterable])) {
    [edgeList addWithId:edge];
  }
  JavaUtilCollections_sortWithJavaUtilList_withJavaUtilComparator_(edgeList, EduStanfordNlpSemgraphSemanticGraphEdge_orderByTargetComparator());
  return edgeList;
}

- (id<JavaLangIterable>)edgeIterable {
  return [((EduStanfordNlpGraphDirectedMultiGraph *) nil_chk(graph_)) edgeIterable];
}

- (id<JavaUtilIterator>)outgoingEdgeIteratorWithEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)v {
  return [((EduStanfordNlpGraphDirectedMultiGraph *) nil_chk(graph_)) outgoingEdgeIteratorWithId:v];
}

- (id<JavaLangIterable>)outgoingEdgeIterableWithEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)v {
  return [((EduStanfordNlpGraphDirectedMultiGraph *) nil_chk(graph_)) outgoingEdgeIterableWithId:v];
}

- (id<JavaUtilIterator>)incomingEdgeIteratorWithEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)v {
  return [((EduStanfordNlpGraphDirectedMultiGraph *) nil_chk(graph_)) incomingEdgeIteratorWithId:v];
}

- (id<JavaLangIterable>)incomingEdgeIterableWithEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)v {
  return [((EduStanfordNlpGraphDirectedMultiGraph *) nil_chk(graph_)) incomingEdgeIterableWithId:v];
}

- (id<JavaUtilList>)outgoingEdgeListWithEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)v {
  return EduStanfordNlpUtilCollectionUtils_toListWithJavaLangIterable_([self outgoingEdgeIterableWithEduStanfordNlpLingIndexedWord:v]);
}

- (id<JavaUtilList>)incomingEdgeListWithEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)v {
  return EduStanfordNlpUtilCollectionUtils_toListWithJavaLangIterable_([self incomingEdgeIterableWithEduStanfordNlpLingIndexedWord:v]);
}

- (jboolean)isEmpty {
  return [((EduStanfordNlpGraphDirectedMultiGraph *) nil_chk(graph_)) isEmpty];
}

- (jint)isAncestorWithEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)child
                  withEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)ancestor {
  id<JavaUtilSet> parents = [self getParentsWithEduStanfordNlpLingIndexedWord:child];
  if ([((id<JavaUtilSet>) nil_chk(parents)) containsWithId:ancestor]) {
    return 1;
  }
  for (EduStanfordNlpLingIndexedWord * __strong parent in parents) {
    id<JavaUtilSet> grandparents = [self getParentsWithEduStanfordNlpLingIndexedWord:parent];
    if ([((id<JavaUtilSet>) nil_chk(grandparents)) containsWithId:ancestor]) {
      return 2;
    }
  }
  return -1;
}

- (jint)commonAncestorWithEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)v1
                      withEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)v2 {
  if ([((EduStanfordNlpLingIndexedWord *) nil_chk(v1)) isEqual:v2]) {
    return 0;
  }
  id<JavaUtilSet> v1Parents = [self getParentsWithEduStanfordNlpLingIndexedWord:v1];
  id<JavaUtilSet> v2Parents = [self getParentsWithEduStanfordNlpLingIndexedWord:v2];
  id<JavaUtilSet> v1GrandParents = [((EduStanfordNlpUtilMapFactory *) nil_chk(EduStanfordNlpSemgraphSemanticGraph_wordMapFactory)) newSet];
  id<JavaUtilSet> v2GrandParents = [EduStanfordNlpSemgraphSemanticGraph_wordMapFactory newSet];
  if ([((id<JavaUtilSet>) nil_chk(v1Parents)) containsWithId:v2] || [((id<JavaUtilSet>) nil_chk(v2Parents)) containsWithId:v1]) {
    return 1;
  }
  for (EduStanfordNlpLingIndexedWord * __strong v1Parent in v1Parents) {
    if ([((id<JavaUtilSet>) nil_chk(v2Parents)) containsWithId:v1Parent]) {
      return 1;
    }
    [((id<JavaUtilSet>) nil_chk(v1GrandParents)) addAllWithJavaUtilCollection:[self getParentsWithEduStanfordNlpLingIndexedWord:v1Parent]];
  }
  for (EduStanfordNlpLingIndexedWord * __strong v2Parent in nil_chk(v2Parents)) {
    [((id<JavaUtilSet>) nil_chk(v2GrandParents)) addAllWithJavaUtilCollection:[self getParentListWithEduStanfordNlpLingIndexedWord:v2Parent]];
  }
  if ([((id<JavaUtilSet>) nil_chk(v1GrandParents)) containsWithId:v2] || [((id<JavaUtilSet>) nil_chk(v2GrandParents)) containsWithId:v1]) {
    return 2;
  }
  for (EduStanfordNlpLingIndexedWord * __strong v2GrandParent in nil_chk(v2GrandParents)) {
    if ([v1Parents containsWithId:v2GrandParent]) {
      return 2;
    }
  }
  for (EduStanfordNlpLingIndexedWord * __strong v1GrandParent in v1GrandParents) {
    if ([v2Parents containsWithId:v1GrandParent]) {
      return 2;
    }
  }
  for (EduStanfordNlpLingIndexedWord * __strong v2GrandParent in v2GrandParents) {
    if ([v1GrandParents containsWithId:v2GrandParent]) {
      return 2;
    }
  }
  return -1;
}

- (EduStanfordNlpLingIndexedWord *)getCommonAncestorWithEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)v1
                                                    withEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)v2 {
  if ([((EduStanfordNlpLingIndexedWord *) nil_chk(v1)) isEqual:v2]) {
    return v1;
  }
  if ([self isAncestorWithEduStanfordNlpLingIndexedWord:v1 withEduStanfordNlpLingIndexedWord:v2] >= 1) {
    return v2;
  }
  if ([self isAncestorWithEduStanfordNlpLingIndexedWord:v2 withEduStanfordNlpLingIndexedWord:v1] >= 1) {
    return v1;
  }
  id<JavaUtilSet> v1Parents = [self getParentsWithEduStanfordNlpLingIndexedWord:v1];
  id<JavaUtilSet> v2Parents = [self getParentsWithEduStanfordNlpLingIndexedWord:v2];
  id<JavaUtilSet> v1GrandParents = [((EduStanfordNlpUtilMapFactory *) nil_chk(EduStanfordNlpSemgraphSemanticGraph_wordMapFactory)) newSet];
  id<JavaUtilSet> v2GrandParents = [EduStanfordNlpSemgraphSemanticGraph_wordMapFactory newSet];
  for (EduStanfordNlpLingIndexedWord * __strong v1Parent in nil_chk(v1Parents)) {
    if ([((id<JavaUtilSet>) nil_chk(v2Parents)) containsWithId:v1Parent]) {
      return v1Parent;
    }
    [((id<JavaUtilSet>) nil_chk(v1GrandParents)) addAllWithJavaUtilCollection:[self getParentsWithEduStanfordNlpLingIndexedWord:v1Parent]];
  }
  for (EduStanfordNlpLingIndexedWord * __strong v1GrandParent in nil_chk(v1GrandParents)) {
    if ([((id<JavaUtilSet>) nil_chk(v2Parents)) containsWithId:v1GrandParent]) {
      return v1GrandParent;
    }
  }
  for (EduStanfordNlpLingIndexedWord * __strong v2Parent in nil_chk(v2Parents)) {
    [((id<JavaUtilSet>) nil_chk(v2GrandParents)) addAllWithJavaUtilCollection:[self getParentsWithEduStanfordNlpLingIndexedWord:v2Parent]];
  }
  for (EduStanfordNlpLingIndexedWord * __strong v2GrandParent in nil_chk(v2GrandParents)) {
    if ([v1Parents containsWithId:v2GrandParent]) {
      return v2GrandParent;
    }
    if ([v1GrandParents containsWithId:v2GrandParent]) {
      return v2GrandParent;
    }
  }
  return nil;
}

- (jboolean)matchPatternToVertexWithNSString:(NSString *)pattern
           withEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)vertex
                                 withBoolean:(jboolean)det {
  if (![self containsVertexWithEduStanfordNlpLingIndexedWord:vertex]) {
    @throw new_JavaLangIllegalArgumentException_init();
  }
  NSString *pat = [((NSString *) nil_chk(pattern)) replaceAll:@"<" withReplacement:@",<"];
  pat = [((NSString *) nil_chk(pat)) replaceAll:@">" withReplacement:@",>"];
  IOSObjectArray *nodePath = [((NSString *) nil_chk(pat)) split:@","];
  {
    IOSObjectArray *a__ = nodePath;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *s = *b__++;
      if ([((NSString *) nil_chk(s)) isEqual:@""]) {
        continue;
      }
      NSString *word = [s substring:1];
      jchar dir = [s charAtWithInt:0];
      if (dir == '<') {
        jboolean match = false;
        for (EduStanfordNlpLingIndexedWord * __strong parent in nil_chk([self getParentsWithEduStanfordNlpLingIndexedWord:vertex])) {
          NSString *lemma = [((EduStanfordNlpLingIndexedWord *) nil_chk(parent)) getWithIOSClass:EduStanfordNlpLingCoreAnnotations_LemmaAnnotation_class_()];
          if ([((NSString *) nil_chk(lemma)) isEqual:word]) {
            match = true;
            break;
          }
        }
        if (!match) {
          return false;
        }
      }
      else if (dir == '>') {
        if (det) {
          id<JavaUtilSet> children = [((EduStanfordNlpUtilMapFactory *) nil_chk(EduStanfordNlpSemgraphSemanticGraph_wordMapFactory)) newSet];
          [((id<JavaUtilSet>) nil_chk(children)) addAllWithJavaUtilCollection:[self getChildrenWithRelnWithEduStanfordNlpLingIndexedWord:vertex withEduStanfordNlpTreesGrammaticalRelation:JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, DETERMINER)]];
          [children addAllWithJavaUtilCollection:[self getChildrenWithRelnWithEduStanfordNlpLingIndexedWord:vertex withEduStanfordNlpTreesGrammaticalRelation:JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, PREDETERMINER)]];
          jboolean match = false;
          for (EduStanfordNlpLingIndexedWord * __strong child in children) {
            NSString *lemma = [((EduStanfordNlpLingIndexedWord *) nil_chk(child)) getWithIOSClass:EduStanfordNlpLingCoreAnnotations_LemmaAnnotation_class_()];
            if ([((NSString *) nil_chk(lemma)) isEqual:@""]) {
              lemma = [((NSString *) nil_chk([child word])) lowercaseString];
            }
            if ([((NSString *) nil_chk(lemma)) isEqual:word]) {
              match = true;
              break;
            }
          }
          if (!match) {
            return false;
          }
        }
        else {
          id<JavaUtilList> children = [self childPairsWithEduStanfordNlpLingIndexedWord:vertex];
          jboolean match = false;
          for (EduStanfordNlpUtilPair * __strong pair in nil_chk(children)) {
            if ([((NSString *) nil_chk([((EduStanfordNlpTreesGrammaticalRelation *) nil_chk([((EduStanfordNlpUtilPair *) nil_chk(pair)) first])) description])) isEqual:@"det"]) continue;
            EduStanfordNlpLingIndexedWord *child = [pair second];
            NSString *lemma = [((EduStanfordNlpLingIndexedWord *) nil_chk(child)) getWithIOSClass:EduStanfordNlpLingCoreAnnotations_LemmaAnnotation_class_()];
            if ([((NSString *) nil_chk(lemma)) isEqual:@""]) {
              lemma = [((NSString *) nil_chk([child word])) lowercaseString];
            }
            if ([((NSString *) nil_chk(lemma)) isEqual:word]) {
              match = true;
              break;
            }
          }
          if (!match) {
            return false;
          }
        }
      }
      else {
        @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$", @"Warning: bad pattern \"%s\"\n", pattern));
      }
    }
  }
  return true;
}

- (jboolean)matchPatternToVertexWithNSString:(NSString *)pattern
           withEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)vertex {
  if (![self containsVertexWithEduStanfordNlpLingIndexedWord:vertex]) {
    @throw new_JavaLangIllegalArgumentException_init();
  }
  NSString *pat = [((NSString *) nil_chk(pattern)) replaceAll:@"<" withReplacement:@",<"];
  pat = [((NSString *) nil_chk(pat)) replaceAll:@">" withReplacement:@",>"];
  IOSObjectArray *nodePath = [((NSString *) nil_chk(pat)) split:@","];
  {
    IOSObjectArray *a__ = nodePath;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *s = *b__++;
      if ([((NSString *) nil_chk(s)) isEqual:@""]) {
        continue;
      }
      NSString *word = [s substring:1];
      jchar dir = [s charAtWithInt:0];
      if (dir == '<') {
        jboolean match = false;
        for (EduStanfordNlpLingIndexedWord * __strong parent in nil_chk([self getParentsWithEduStanfordNlpLingIndexedWord:vertex])) {
          NSString *lemma = [((EduStanfordNlpLingIndexedWord *) nil_chk(parent)) getWithIOSClass:EduStanfordNlpLingCoreAnnotations_LemmaAnnotation_class_()];
          if ([((NSString *) nil_chk(lemma)) isEqual:word]) {
            match = true;
            break;
          }
        }
        if (!match) {
          return false;
        }
      }
      else if (dir == '>') {
        jboolean match = false;
        for (EduStanfordNlpLingIndexedWord * __strong child in nil_chk([self getChildrenWithEduStanfordNlpLingIndexedWord:vertex])) {
          NSString *lemma = [((EduStanfordNlpLingIndexedWord *) nil_chk(child)) getWithIOSClass:EduStanfordNlpLingCoreAnnotations_LemmaAnnotation_class_()];
          if (lemma == nil || [lemma isEqual:@""]) {
            lemma = [((NSString *) nil_chk([child word])) lowercaseString];
          }
          if ([((NSString *) nil_chk(lemma)) isEqual:word]) {
            match = true;
            break;
          }
        }
        if (!match) {
          return false;
        }
      }
      else {
        @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$", @"Warning: bad pattern \"%s\"\n", pattern));
      }
    }
  }
  return true;
}

- (id<JavaUtilList>)getChildListWithEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)vertex {
  if (![self containsVertexWithEduStanfordNlpLingIndexedWord:vertex]) {
    @throw new_JavaLangIllegalArgumentException_init();
  }
  id<JavaUtilList> result = new_JavaUtilArrayList_initWithJavaUtilCollection_([self getChildrenWithEduStanfordNlpLingIndexedWord:vertex]);
  JavaUtilCollections_sortWithJavaUtilList_(result);
  return result;
}

- (id<JavaUtilSet>)getChildrenWithEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)vertex {
  if (![self containsVertexWithEduStanfordNlpLingIndexedWord:vertex]) {
    @throw new_JavaLangIllegalArgumentException_init();
  }
  return [((EduStanfordNlpGraphDirectedMultiGraph *) nil_chk(graph_)) getChildrenWithId:vertex];
}

- (jboolean)hasChildrenWithEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)vertex {
  return [((id<JavaUtilIterator>) nil_chk([self outgoingEdgeIteratorWithEduStanfordNlpLingIndexedWord:vertex])) hasNext];
}

- (id<JavaUtilList>)getIncomingEdgesSortedWithEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)vertex {
  id<JavaUtilList> edges = [self incomingEdgeListWithEduStanfordNlpLingIndexedWord:vertex];
  JavaUtilCollections_sortWithJavaUtilList_(edges);
  return edges;
}

- (id<JavaUtilList>)getOutEdgesSortedWithEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)vertex {
  id<JavaUtilList> edges = [self outgoingEdgeListWithEduStanfordNlpLingIndexedWord:vertex];
  JavaUtilCollections_sortWithJavaUtilList_(edges);
  return edges;
}

- (id<JavaUtilList>)getParentListWithEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)vertex {
  if (![self containsVertexWithEduStanfordNlpLingIndexedWord:vertex]) {
    @throw new_JavaLangIllegalArgumentException_init();
  }
  id<JavaUtilList> result = new_JavaUtilArrayList_initWithJavaUtilCollection_([self getParentsWithEduStanfordNlpLingIndexedWord:vertex]);
  JavaUtilCollections_sortWithJavaUtilList_(result);
  return result;
}

- (id<JavaUtilSet>)getParentsWithEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)vertex {
  if (![self containsVertexWithEduStanfordNlpLingIndexedWord:vertex]) {
    @throw new_JavaLangIllegalArgumentException_init();
  }
  return [((EduStanfordNlpGraphDirectedMultiGraph *) nil_chk(graph_)) getParentsWithId:vertex];
}

- (id<JavaUtilCollection>)getSiblingsWithEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)vertex {
  EduStanfordNlpLingIndexedWord *parent = [self getParentWithEduStanfordNlpLingIndexedWord:vertex];
  if (parent != nil) {
    id<JavaUtilSet> result = [((EduStanfordNlpUtilMapFactory *) nil_chk(EduStanfordNlpSemgraphSemanticGraph_wordMapFactory)) newSet];
    [((id<JavaUtilSet>) nil_chk(result)) addAllWithJavaUtilCollection:[self getChildrenWithEduStanfordNlpLingIndexedWord:parent]];
    [result removeWithId:vertex];
    return result;
  }
  else {
    return JavaUtilCollections_emptySet();
  }
}

- (id<JavaUtilList>)getPathToRootWithEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)vertex
                                                  withJavaUtilList:(id<JavaUtilList>)used {
  return EduStanfordNlpSemgraphSemanticGraph_getPathToRootWithEduStanfordNlpLingIndexedWord_withJavaUtilList_(self, vertex, used);
}

- (id<JavaUtilList>)getPathToRootWithEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)vertex {
  id<JavaUtilList> path = EduStanfordNlpSemgraphSemanticGraph_getPathToRootWithEduStanfordNlpLingIndexedWord_withJavaUtilList_(self, vertex, EduStanfordNlpUtilGenerics_newArrayList());
  if (path != nil) JavaUtilCollections_reverseWithJavaUtilList_(path);
  return path;
}

- (EduStanfordNlpLingIndexedWord *)getParentWithEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)vertex {
  id<JavaUtilList> path = [self getPathToRootWithEduStanfordNlpLingIndexedWord:vertex];
  if (path != nil && [path size] > 0) return [path getWithInt:0];
  else return nil;
}

- (EduStanfordNlpLingIndexedWord *)getNodeByIndexWithInt:(jint)index {
  EduStanfordNlpLingIndexedWord *node = [self getNodeByIndexSafeWithInt:index];
  if (node == nil) @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"No SemanticGraph vertex with index ", index));
  else return node;
}

- (EduStanfordNlpLingIndexedWord *)getNodeByIndexSafeWithInt:(jint)index {
  for (EduStanfordNlpLingIndexedWord * __strong vertex in nil_chk([self vertexSet])) {
    if ([((EduStanfordNlpLingIndexedWord *) nil_chk(vertex)) index] == index) {
      return vertex;
    }
  }
  return nil;
}

- (EduStanfordNlpLingIndexedWord *)getNodeByWordPatternWithNSString:(NSString *)pattern {
  JavaUtilRegexPattern *p = JavaUtilRegexPattern_compileWithNSString_(pattern);
  for (EduStanfordNlpLingIndexedWord * __strong vertex in nil_chk([self vertexSet])) {
    NSString *w = [((EduStanfordNlpLingIndexedWord *) nil_chk(vertex)) word];
    if ((w == nil && pattern == nil) || (w != nil && [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(p)) matcherWithJavaLangCharSequence:w])) matches])) {
      return vertex;
    }
  }
  return nil;
}

- (id<JavaUtilList>)getAllNodesByWordPatternWithNSString:(NSString *)pattern {
  JavaUtilRegexPattern *p = JavaUtilRegexPattern_compileWithNSString_(pattern);
  id<JavaUtilList> nodes = new_JavaUtilArrayList_init();
  for (EduStanfordNlpLingIndexedWord * __strong vertex in nil_chk([self vertexSet])) {
    NSString *w = [((EduStanfordNlpLingIndexedWord *) nil_chk(vertex)) word];
    if ((w == nil && pattern == nil) || (w != nil && [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(p)) matcherWithJavaLangCharSequence:w])) matches])) {
      [nodes addWithId:vertex];
    }
  }
  return nodes;
}

- (id<JavaUtilList>)getAllNodesByPartOfSpeechPatternWithNSString:(NSString *)pattern {
  JavaUtilRegexPattern *p = JavaUtilRegexPattern_compileWithNSString_(pattern);
  id<JavaUtilList> nodes = new_JavaUtilArrayList_init();
  for (EduStanfordNlpLingIndexedWord * __strong vertex in nil_chk([self vertexSet])) {
    NSString *pos = [((EduStanfordNlpLingIndexedWord *) nil_chk(vertex)) tag];
    if ((pos == nil && pattern == nil) || (pos != nil && [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(p)) matcherWithJavaLangCharSequence:pos])) matches])) {
      [nodes addWithId:vertex];
    }
  }
  return nodes;
}

- (id<JavaUtilSet>)descendantsWithEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)vertex {
  if (![self containsVertexWithEduStanfordNlpLingIndexedWord:vertex]) {
    @throw new_JavaLangIllegalArgumentException_init();
  }
  id<JavaUtilSet> descendantSet = [((EduStanfordNlpUtilMapFactory *) nil_chk(EduStanfordNlpSemgraphSemanticGraph_wordMapFactory)) newSet];
  EduStanfordNlpSemgraphSemanticGraph_descendantsHelperWithEduStanfordNlpLingIndexedWord_withJavaUtilSet_(self, vertex, descendantSet);
  return descendantSet;
}

- (void)descendantsHelperWithEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)curr
                                           withJavaUtilSet:(id<JavaUtilSet>)descendantSet {
  EduStanfordNlpSemgraphSemanticGraph_descendantsHelperWithEduStanfordNlpLingIndexedWord_withJavaUtilSet_(self, curr, descendantSet);
}

- (id<JavaUtilList>)childPairsWithEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)vertex {
  if (![self containsVertexWithEduStanfordNlpLingIndexedWord:vertex]) {
    @throw new_JavaLangIllegalArgumentException_init();
  }
  id<JavaUtilList> childPairs = EduStanfordNlpUtilGenerics_newArrayList();
  for (EduStanfordNlpSemgraphSemanticGraphEdge * __strong e in nil_chk([self outgoingEdgeIterableWithEduStanfordNlpLingIndexedWord:vertex])) {
    [((id<JavaUtilList>) nil_chk(childPairs)) addWithId:new_EduStanfordNlpUtilPair_initWithId_withId_([((EduStanfordNlpSemgraphSemanticGraphEdge *) nil_chk(e)) getRelation], [e getTarget])];
  }
  return childPairs;
}

- (id<JavaUtilList>)parentPairsWithEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)vertex {
  if (![self containsVertexWithEduStanfordNlpLingIndexedWord:vertex]) {
    @throw new_JavaLangIllegalArgumentException_init();
  }
  id<JavaUtilList> parentPairs = EduStanfordNlpUtilGenerics_newArrayList();
  for (EduStanfordNlpSemgraphSemanticGraphEdge * __strong e in nil_chk([self incomingEdgeIterableWithEduStanfordNlpLingIndexedWord:vertex])) {
    [((id<JavaUtilList>) nil_chk(parentPairs)) addWithId:new_EduStanfordNlpUtilPair_initWithId_withId_([((EduStanfordNlpSemgraphSemanticGraphEdge *) nil_chk(e)) getRelation], [e getSource])];
  }
  return parentPairs;
}

- (id<JavaUtilSet>)relnsWithEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)vertex {
  if (![self containsVertexWithEduStanfordNlpLingIndexedWord:vertex]) {
    @throw new_JavaLangIllegalArgumentException_init();
  }
  id<JavaUtilSet> relns = EduStanfordNlpUtilGenerics_newHashSet();
  id<JavaUtilList> pairs = [self parentPairsWithEduStanfordNlpLingIndexedWord:vertex];
  for (EduStanfordNlpUtilPair * __strong p in nil_chk(pairs)) {
    [((id<JavaUtilSet>) nil_chk(relns)) addWithId:[((EduStanfordNlpUtilPair *) nil_chk(p)) first]];
  }
  return relns;
}

- (EduStanfordNlpTreesGrammaticalRelation *)relnWithEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)a
                                                withEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)b {
  if (![self containsVertexWithEduStanfordNlpLingIndexedWord:a]) {
    @throw new_JavaLangIllegalArgumentException_init();
  }
  id<JavaUtilList> pairs = [self childPairsWithEduStanfordNlpLingIndexedWord:a];
  for (EduStanfordNlpUtilPair * __strong p in nil_chk(pairs)) if ([((EduStanfordNlpLingIndexedWord *) nil_chk([((EduStanfordNlpUtilPair *) nil_chk(p)) second])) isEqual:b]) return [p first];
  return nil;
}

- (id<JavaUtilSet>)childRelnsWithEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)vertex {
  if (![self containsVertexWithEduStanfordNlpLingIndexedWord:vertex]) {
    @throw new_JavaLangIllegalArgumentException_init();
  }
  id<JavaUtilSet> relns = EduStanfordNlpUtilGenerics_newHashSet();
  id<JavaUtilList> pairs = [self childPairsWithEduStanfordNlpLingIndexedWord:vertex];
  for (EduStanfordNlpUtilPair * __strong p in nil_chk(pairs)) {
    [((id<JavaUtilSet>) nil_chk(relns)) addWithId:[((EduStanfordNlpUtilPair *) nil_chk(p)) first]];
  }
  return relns;
}

- (id<JavaUtilCollection>)getRoots {
  return roots_;
}

- (id<JavaUtilList>)getVerticesWithoutParents {
  return EduStanfordNlpSemgraphSemanticGraph_getVerticesWithoutParents(self);
}

- (EduStanfordNlpLingIndexedWord *)getFirstRoot {
  if ([((id<JavaUtilCollection>) nil_chk(roots_)) isEmpty]) @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$@$", @"No roots in graph:\n", self, @"\nFind where this graph was created and make sure you're adding roots."));
  return [((id<JavaUtilIterator>) nil_chk([roots_ iterator])) next];
}

- (void)addRootWithEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)root {
  [self addVertexWithEduStanfordNlpLingIndexedWord:root];
  [((id<JavaUtilCollection>) nil_chk(roots_)) addWithId:root];
}

- (void)resetRoots {
  id<JavaUtilCollection> newRoots = EduStanfordNlpSemgraphSemanticGraph_getVerticesWithoutParents(self);
  if ([((id<JavaUtilCollection>) nil_chk(newRoots)) size] > 0) {
    [((id<JavaUtilCollection>) nil_chk(roots_)) clear];
    [roots_ addAllWithJavaUtilCollection:newRoots];
    return;
  }
  EduStanfordNlpStatsTwoDimensionalCounter *nodeDists = EduStanfordNlpStatsTwoDimensionalCounter_identityHashMapCounter();
  for (EduStanfordNlpLingIndexedWord * __strong node1 in nil_chk([self vertexSet])) {
    for (EduStanfordNlpLingIndexedWord * __strong node2 in nil_chk([self vertexSet])) {
      id<JavaUtilList> path = [self getShortestDirectedPathEdgesWithEduStanfordNlpLingIndexedWord:node1 withEduStanfordNlpLingIndexedWord:node2];
      if (path != nil) {
        jint dist = [path size];
        [((EduStanfordNlpStatsTwoDimensionalCounter *) nil_chk(nodeDists)) setCountWithId:node1 withId:node2 withDouble:dist];
      }
    }
  }
  EduStanfordNlpStatsClassicCounter *dominatedEdgeCount = EduStanfordNlpStatsClassicCounter_identityHashMapCounter();
  for (EduStanfordNlpLingIndexedWord * __strong outer in nil_chk([self vertexSet])) {
    for (EduStanfordNlpLingIndexedWord * __strong inner in nil_chk([self vertexSet])) {
      [((EduStanfordNlpStatsClassicCounter *) nil_chk(dominatedEdgeCount)) incrementCountWithId:outer withDouble:[((EduStanfordNlpStatsTwoDimensionalCounter *) nil_chk(nodeDists)) getCountWithId:outer withId:inner]];
    }
  }
  EduStanfordNlpLingIndexedWord *winner = EduStanfordNlpStatsCounters_argmaxWithEduStanfordNlpStatsCounter_(dominatedEdgeCount);
  [self setRootWithEduStanfordNlpLingIndexedWord:winner];
}

- (void)setRootWithEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)word {
  [((id<JavaUtilCollection>) nil_chk(roots_)) clear];
  [roots_ addWithId:word];
}

- (void)setRootsWithJavaUtilCollection:(id<JavaUtilCollection>)words {
  [((id<JavaUtilCollection>) nil_chk(roots_)) clear];
  [roots_ addAllWithJavaUtilCollection:words];
}

- (id<JavaUtilList>)topologicalSort {
  id<JavaUtilList> result = EduStanfordNlpUtilGenerics_newArrayList();
  id<JavaUtilSet> temporary = [((EduStanfordNlpUtilMapFactory *) nil_chk(EduStanfordNlpSemgraphSemanticGraph_wordMapFactory)) newSet];
  id<JavaUtilSet> permanent = [EduStanfordNlpSemgraphSemanticGraph_wordMapFactory newSet];
  for (EduStanfordNlpLingIndexedWord * __strong vertex in nil_chk([self vertexSet])) {
    if (![((id<JavaUtilSet>) nil_chk(temporary)) containsWithId:vertex]) {
      EduStanfordNlpSemgraphSemanticGraph_topologicalSortHelperWithEduStanfordNlpLingIndexedWord_withJavaUtilSet_withJavaUtilSet_withJavaUtilList_(self, vertex, temporary, permanent, result);
    }
  }
  JavaUtilCollections_reverseWithJavaUtilList_(result);
  return result;
}

- (void)topologicalSortHelperWithEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)vertex
                                               withJavaUtilSet:(id<JavaUtilSet>)temporary
                                               withJavaUtilSet:(id<JavaUtilSet>)permanent
                                              withJavaUtilList:(id<JavaUtilList>)result {
  EduStanfordNlpSemgraphSemanticGraph_topologicalSortHelperWithEduStanfordNlpLingIndexedWord_withJavaUtilSet_withJavaUtilSet_withJavaUtilList_(self, vertex, temporary, permanent, result);
}

- (jboolean)hasChildWithEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)vertex
           withEduStanfordNlpTreesGrammaticalRelation:(EduStanfordNlpTreesGrammaticalRelation *)reln
                                         withNSString:(NSString *)childLemma {
  if (![self containsVertexWithEduStanfordNlpLingIndexedWord:vertex]) {
    @throw new_JavaLangIllegalArgumentException_init();
  }
  for (EduStanfordNlpSemgraphSemanticGraphEdge * __strong edge in nil_chk([self outgoingEdgeIterableWithEduStanfordNlpLingIndexedWord:vertex])) {
    if ([((EduStanfordNlpTreesGrammaticalRelation *) nil_chk([((EduStanfordNlpSemgraphSemanticGraphEdge *) nil_chk(edge)) getRelation])) isEqual:reln]) {
      if ([((NSString *) nil_chk([((EduStanfordNlpLingIndexedWord *) nil_chk([edge getTarget])) getWithIOSClass:EduStanfordNlpLingCoreAnnotations_LemmaAnnotation_class_()])) isEqual:childLemma]) {
        return true;
      }
    }
  }
  return false;
}

- (jboolean)hasChildWithRelnWithEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)vertex
                   withEduStanfordNlpTreesGrammaticalRelation:(EduStanfordNlpTreesGrammaticalRelation *)reln {
  if (![self containsVertexWithEduStanfordNlpLingIndexedWord:vertex]) {
    @throw new_JavaLangIllegalArgumentException_init();
  }
  for (EduStanfordNlpSemgraphSemanticGraphEdge * __strong edge in nil_chk([self outgoingEdgeIterableWithEduStanfordNlpLingIndexedWord:vertex])) {
    if ([((EduStanfordNlpTreesGrammaticalRelation *) nil_chk([((EduStanfordNlpSemgraphSemanticGraphEdge *) nil_chk(edge)) getRelation])) isEqual:reln]) {
      return true;
    }
  }
  return false;
}

- (jboolean)hasParentWithRelnWithEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)vertex
                    withEduStanfordNlpTreesGrammaticalRelation:(EduStanfordNlpTreesGrammaticalRelation *)reln {
  if (![self containsVertexWithEduStanfordNlpLingIndexedWord:vertex]) {
    @throw new_JavaLangIllegalArgumentException_init();
  }
  for (EduStanfordNlpSemgraphSemanticGraphEdge * __strong edge in nil_chk([self incomingEdgeIterableWithEduStanfordNlpLingIndexedWord:vertex])) {
    if ([((EduStanfordNlpTreesGrammaticalRelation *) nil_chk([((EduStanfordNlpSemgraphSemanticGraphEdge *) nil_chk(edge)) getRelation])) isEqual:reln]) {
      return true;
    }
  }
  return false;
}

- (EduStanfordNlpLingIndexedWord *)getChildWithRelnWithEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)vertex
                                          withEduStanfordNlpTreesGrammaticalRelation:(EduStanfordNlpTreesGrammaticalRelation *)reln {
  if ([((EduStanfordNlpLingIndexedWord *) nil_chk(vertex)) isEqual:JreLoadStatic(EduStanfordNlpLingIndexedWord, NO_WORD)]) return nil;
  if (![self containsVertexWithEduStanfordNlpLingIndexedWord:vertex]) @throw new_JavaLangIllegalArgumentException_init();
  for (EduStanfordNlpSemgraphSemanticGraphEdge * __strong edge in nil_chk([self outgoingEdgeIterableWithEduStanfordNlpLingIndexedWord:vertex])) {
    if ([((EduStanfordNlpTreesGrammaticalRelation *) nil_chk([((EduStanfordNlpSemgraphSemanticGraphEdge *) nil_chk(edge)) getRelation])) isEqual:reln]) {
      return [edge getTarget];
    }
  }
  return nil;
}

- (id<JavaUtilSet>)getParentsWithRelnWithEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)vertex
                            withEduStanfordNlpTreesGrammaticalRelation:(EduStanfordNlpTreesGrammaticalRelation *)reln {
  if ([((EduStanfordNlpLingIndexedWord *) nil_chk(vertex)) isEqual:JreLoadStatic(EduStanfordNlpLingIndexedWord, NO_WORD)]) return JavaUtilCollections_emptySet();
  if (![self containsVertexWithEduStanfordNlpLingIndexedWord:vertex]) @throw new_JavaLangIllegalArgumentException_init();
  id<JavaUtilSet> parentList = [((EduStanfordNlpUtilMapFactory *) nil_chk(EduStanfordNlpSemgraphSemanticGraph_wordMapFactory)) newSet];
  for (EduStanfordNlpSemgraphSemanticGraphEdge * __strong edge in nil_chk([self incomingEdgeIterableWithEduStanfordNlpLingIndexedWord:vertex])) {
    if ([((EduStanfordNlpTreesGrammaticalRelation *) nil_chk([((EduStanfordNlpSemgraphSemanticGraphEdge *) nil_chk(edge)) getRelation])) isEqual:reln]) {
      [((id<JavaUtilSet>) nil_chk(parentList)) addWithId:[edge getSource]];
    }
  }
  return parentList;
}

- (id<JavaUtilSet>)getChildrenWithRelnWithEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)vertex
                             withEduStanfordNlpTreesGrammaticalRelation:(EduStanfordNlpTreesGrammaticalRelation *)reln {
  if ([((EduStanfordNlpLingIndexedWord *) nil_chk(vertex)) isEqual:JreLoadStatic(EduStanfordNlpLingIndexedWord, NO_WORD)]) return JavaUtilCollections_emptySet();
  if (![self containsVertexWithEduStanfordNlpLingIndexedWord:vertex]) @throw new_JavaLangIllegalArgumentException_init();
  id<JavaUtilSet> childList = [((EduStanfordNlpUtilMapFactory *) nil_chk(EduStanfordNlpSemgraphSemanticGraph_wordMapFactory)) newSet];
  for (EduStanfordNlpSemgraphSemanticGraphEdge * __strong edge in nil_chk([self outgoingEdgeIterableWithEduStanfordNlpLingIndexedWord:vertex])) {
    if ([((EduStanfordNlpTreesGrammaticalRelation *) nil_chk([((EduStanfordNlpSemgraphSemanticGraphEdge *) nil_chk(edge)) getRelation])) isEqual:reln]) {
      [((id<JavaUtilSet>) nil_chk(childList)) addWithId:[edge getTarget]];
    }
  }
  return childList;
}

- (id<JavaUtilSet>)getChildrenWithRelnsWithEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)vertex
                                                  withJavaUtilCollection:(id<JavaUtilCollection>)relns {
  if ([((EduStanfordNlpLingIndexedWord *) nil_chk(vertex)) isEqual:JreLoadStatic(EduStanfordNlpLingIndexedWord, NO_WORD)]) return JavaUtilCollections_emptySet();
  if (![self containsVertexWithEduStanfordNlpLingIndexedWord:vertex]) {
    @throw new_JavaLangIllegalArgumentException_init();
  }
  id<JavaUtilSet> childList = [((EduStanfordNlpUtilMapFactory *) nil_chk(EduStanfordNlpSemgraphSemanticGraph_wordMapFactory)) newSet];
  for (EduStanfordNlpSemgraphSemanticGraphEdge * __strong edge in nil_chk([self outgoingEdgeIterableWithEduStanfordNlpLingIndexedWord:vertex])) {
    if ([((id<JavaUtilCollection>) nil_chk(relns)) containsWithId:[((EduStanfordNlpSemgraphSemanticGraphEdge *) nil_chk(edge)) getRelation]]) {
      [((id<JavaUtilSet>) nil_chk(childList)) addWithId:[edge getTarget]];
    }
  }
  return childList;
}

- (EduStanfordNlpSemgraphSemanticGraphEdge *)getEdgeWithEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)gov
                                                    withEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)dep
                                           withEduStanfordNlpTreesGrammaticalRelation:(EduStanfordNlpTreesGrammaticalRelation *)reln {
  id<JavaUtilCollection> edges = [self getAllEdgesWithEduStanfordNlpLingIndexedWord:gov withEduStanfordNlpLingIndexedWord:dep];
  if (edges != nil) {
    for (EduStanfordNlpSemgraphSemanticGraphEdge * __strong edge in edges) {
      if (![((EduStanfordNlpLingIndexedWord *) nil_chk([((EduStanfordNlpSemgraphSemanticGraphEdge *) nil_chk(edge)) getSource])) isEqual:gov]) continue;
      if (([((EduStanfordNlpTreesGrammaticalRelation *) nil_chk([edge getRelation])) isEqual:reln])) {
        return edge;
      }
    }
  }
  return nil;
}

- (jboolean)isNegatedVertexWithEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)vertex {
  if (vertex == JreLoadStatic(EduStanfordNlpLingIndexedWord, NO_WORD)) {
    return false;
  }
  if (![self containsVertexWithEduStanfordNlpLingIndexedWord:vertex]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@$@", @"Vertex ", vertex, @" not in graph ", self));
  }
  return ([self hasChildWithRelnWithEduStanfordNlpLingIndexedWord:vertex withEduStanfordNlpTreesGrammaticalRelation:JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, NEGATION_MODIFIER)] || [self hasChildWithEduStanfordNlpLingIndexedWord:vertex withEduStanfordNlpTreesGrammaticalRelation:JreLoadStatic(EduStanfordNlpTreesGrammaticalRelation, DEPENDENT) withNSString:@"nor"]);
}

- (jboolean)isNegatedVerbWithEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)vertex {
  return EduStanfordNlpSemgraphSemanticGraph_isNegatedVerbWithEduStanfordNlpLingIndexedWord_(self, vertex);
}

- (jboolean)isInConditionalContextWithEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)vertex {
  for (EduStanfordNlpLingIndexedWord * __strong child in nil_chk([self getChildrenWithRelnWithEduStanfordNlpLingIndexedWord:vertex withEduStanfordNlpTreesGrammaticalRelation:JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, MARKER)])) {
    if ([((NSString *) nil_chk([((EduStanfordNlpLingIndexedWord *) nil_chk(child)) word])) equalsIgnoreCase:@"if"]) {
      return true;
    }
  }
  return false;
}

- (jboolean)attachedNegatedVerbWithEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)vertex {
  for (EduStanfordNlpLingIndexedWord * __strong parent in nil_chk([self getParentsWithEduStanfordNlpLingIndexedWord:vertex])) {
    if (EduStanfordNlpSemgraphSemanticGraph_isNegatedVerbWithEduStanfordNlpLingIndexedWord_(self, parent)) {
      return true;
    }
  }
  return false;
}

- (jboolean)isAuxiliaryVerbWithEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)vertex {
  id<JavaUtilSet> relns = [self relnsWithEduStanfordNlpLingIndexedWord:vertex];
  if ([((id<JavaUtilSet>) nil_chk(relns)) isEmpty]) return false;
  jboolean result = [relns containsWithId:JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, AUX_MODIFIER)] || [relns containsWithId:JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, AUX_PASSIVE_MODIFIER)];
  return result;
}

- (id<JavaUtilSet>)getLeafVertices {
  id<JavaUtilSet> result = [((EduStanfordNlpUtilMapFactory *) nil_chk(EduStanfordNlpSemgraphSemanticGraph_wordMapFactory)) newSet];
  for (EduStanfordNlpLingIndexedWord * __strong v in nil_chk([self vertexSet])) {
    if ([self outDegreeWithEduStanfordNlpLingIndexedWord:v] == 0) {
      [((id<JavaUtilSet>) nil_chk(result)) addWithId:v];
    }
  }
  return result;
}

- (jint)size {
  return [((id<JavaUtilSet>) nil_chk([self vertexSet])) size];
}

- (id<JavaUtilSet>)getSubgraphVerticesWithEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)root {
  id<JavaUtilSet> result = [((EduStanfordNlpUtilMapFactory *) nil_chk(EduStanfordNlpSemgraphSemanticGraph_wordMapFactory)) newSet];
  [((id<JavaUtilSet>) nil_chk(result)) addWithId:root];
  id<JavaUtilList> queue = EduStanfordNlpUtilGenerics_newLinkedList();
  [((id<JavaUtilList>) nil_chk(queue)) addWithId:root];
  while (![queue isEmpty]) {
    EduStanfordNlpLingIndexedWord *current = [queue removeWithInt:0];
    for (EduStanfordNlpLingIndexedWord * __strong child in nil_chk([self getChildrenWithEduStanfordNlpLingIndexedWord:current])) {
      if (![result containsWithId:child]) {
        [result addWithId:child];
        [queue addWithId:child];
      }
    }
  }
  return result;
}

- (jboolean)isDag {
  id<JavaUtilSet> unused = [((EduStanfordNlpUtilMapFactory *) nil_chk(EduStanfordNlpSemgraphSemanticGraph_wordMapFactory)) newSet];
  [((id<JavaUtilSet>) nil_chk(unused)) addAllWithJavaUtilCollection:[self vertexSet]];
  while (![unused isEmpty]) {
    EduStanfordNlpLingIndexedWord *arbitrary = [((id<JavaUtilIterator>) nil_chk([unused iterator])) next];
    jboolean result = EduStanfordNlpSemgraphSemanticGraph_isDagHelperWithEduStanfordNlpLingIndexedWord_withJavaUtilSet_withJavaUtilSet_(self, arbitrary, unused, [EduStanfordNlpSemgraphSemanticGraph_wordMapFactory newSet]);
    if (result) {
      return false;
    }
  }
  return true;
}

- (jboolean)isDagWithEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)root {
  id<JavaUtilSet> unused = [((EduStanfordNlpUtilMapFactory *) nil_chk(EduStanfordNlpSemgraphSemanticGraph_wordMapFactory)) newSet];
  [((id<JavaUtilSet>) nil_chk(unused)) addAllWithJavaUtilCollection:[self getSubgraphVerticesWithEduStanfordNlpLingIndexedWord:root]];
  while (![unused isEmpty]) {
    EduStanfordNlpLingIndexedWord *arbitrary = [((id<JavaUtilIterator>) nil_chk([unused iterator])) next];
    jboolean result = EduStanfordNlpSemgraphSemanticGraph_isDagHelperWithEduStanfordNlpLingIndexedWord_withJavaUtilSet_withJavaUtilSet_(self, arbitrary, unused, [EduStanfordNlpSemgraphSemanticGraph_wordMapFactory newSet]);
    if (result) {
      return false;
    }
  }
  return true;
}

- (jboolean)isDagHelperWithEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)current
                                         withJavaUtilSet:(id<JavaUtilSet>)unused
                                         withJavaUtilSet:(id<JavaUtilSet>)trail {
  return EduStanfordNlpSemgraphSemanticGraph_isDagHelperWithEduStanfordNlpLingIndexedWord_withJavaUtilSet_withJavaUtilSet_(self, current, unused, trail);
}

- (NSString *)description {
  return [self toStringWithEduStanfordNlpLingCoreLabel_OutputFormat:JreLoadEnum(EduStanfordNlpLingCoreLabel_OutputFormat, VALUE_TAG)];
}

- (NSString *)toStringWithEduStanfordNlpLingCoreLabel_OutputFormat:(EduStanfordNlpLingCoreLabel_OutputFormat *)wordFormat {
  id<JavaUtilCollection> rootNodes = [self getRoots];
  if ([((id<JavaUtilCollection>) nil_chk(rootNodes)) isEmpty]) {
    return [self toStringWithEduStanfordNlpSemgraphSemanticGraph_OutputFormat:JreLoadEnum(EduStanfordNlpSemgraphSemanticGraph_OutputFormat, READABLE)];
  }
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  id<JavaUtilSet> used = [((EduStanfordNlpUtilMapFactory *) nil_chk(EduStanfordNlpSemgraphSemanticGraph_wordMapFactory)) newSet];
  for (EduStanfordNlpLingIndexedWord * __strong root in rootNodes) {
    (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"-> "])) appendWithNSString:[((EduStanfordNlpLingIndexedWord *) nil_chk(root)) toStringWithEduStanfordNlpLingCoreLabel_OutputFormat:wordFormat]])) appendWithNSString:@" (root)\n"];
    EduStanfordNlpSemgraphSemanticGraph_recToStringWithEduStanfordNlpLingIndexedWord_withEduStanfordNlpLingCoreLabel_OutputFormat_withJavaLangStringBuilder_withInt_withJavaUtilSet_(self, root, wordFormat, sb, 1, used);
  }
  id<JavaUtilSet> nodes = [EduStanfordNlpSemgraphSemanticGraph_wordMapFactory newSet];
  [((id<JavaUtilSet>) nil_chk(nodes)) addAllWithJavaUtilCollection:[self vertexSet]];
  [nodes removeAllWithJavaUtilCollection:used];
  while (![nodes isEmpty]) {
    EduStanfordNlpLingIndexedWord *node = [((id<JavaUtilIterator>) nil_chk([nodes iterator])) next];
    (void) [((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:[((EduStanfordNlpLingIndexedWord *) nil_chk(node)) toStringWithEduStanfordNlpLingCoreLabel_OutputFormat:wordFormat]])) appendWithNSString:@"\n"];
    EduStanfordNlpSemgraphSemanticGraph_recToStringWithEduStanfordNlpLingIndexedWord_withEduStanfordNlpLingCoreLabel_OutputFormat_withJavaLangStringBuilder_withInt_withJavaUtilSet_(self, node, wordFormat, sb, 1, used);
    [nodes removeAllWithJavaUtilCollection:used];
  }
  return [sb description];
}

- (void)recToStringWithEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)curr
        withEduStanfordNlpLingCoreLabel_OutputFormat:(EduStanfordNlpLingCoreLabel_OutputFormat *)wordFormat
                           withJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                                             withInt:(jint)offset
                                     withJavaUtilSet:(id<JavaUtilSet>)used {
  EduStanfordNlpSemgraphSemanticGraph_recToStringWithEduStanfordNlpLingIndexedWord_withEduStanfordNlpLingCoreLabel_OutputFormat_withJavaLangStringBuilder_withInt_withJavaUtilSet_(self, curr, wordFormat, sb, offset, used);
}

+ (NSString *)spaceWithInt:(jint)width {
  return EduStanfordNlpSemgraphSemanticGraph_spaceWithInt_(width);
}

- (NSString *)toRecoveredSentenceString {
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  jboolean pastFirst = false;
  for (EduStanfordNlpLingIndexedWord * __strong word in nil_chk([self vertexListSorted])) {
    if (pastFirst) {
      (void) [sb appendWithChar:' '];
    }
    pastFirst = true;
    (void) [sb appendWithNSString:[((EduStanfordNlpLingIndexedWord *) nil_chk(word)) word]];
  }
  return [sb description];
}

- (NSString *)toRecoveredSentenceStringWithIndexMarking {
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  jboolean pastFirst = false;
  jint index = 0;
  for (EduStanfordNlpLingIndexedWord * __strong word in nil_chk([self vertexListSorted])) {
    if (pastFirst) {
      (void) [sb appendWithChar:' '];
    }
    pastFirst = true;
    (void) [sb appendWithNSString:[((EduStanfordNlpLingIndexedWord *) nil_chk(word)) word]];
    (void) [sb appendWithNSString:@"("];
    (void) [sb appendWithInt:index++];
    (void) [sb appendWithNSString:@")"];
  }
  return [sb description];
}

- (NSString *)toEnUncollapsedSentenceString {
  id<JavaUtilList> uncompressedList = EduStanfordNlpUtilGenerics_newLinkedListWithJavaUtilCollection_([self vertexSet]);
  id<JavaUtilList> specifics = EduStanfordNlpUtilGenerics_newArrayList();
  for (EduStanfordNlpLingIndexedWord * __strong word in nil_chk([self vertexSet])) {
    for (EduStanfordNlpSemgraphSemanticGraphEdge * __strong edge in nil_chk([self getIncomingEdgesSortedWithEduStanfordNlpLingIndexedWord:word])) {
      EduStanfordNlpTreesGrammaticalRelation *relation = [((EduStanfordNlpSemgraphSemanticGraphEdge *) nil_chk(edge)) getRelation];
      NSString *specific = [((EduStanfordNlpTreesGrammaticalRelation *) nil_chk(relation)) getSpecific];
      if (specific == nil) {
        if ([((EduStanfordNlpTreesGrammaticalRelation *) nil_chk([edge getRelation])) isEqual:JreLoadStatic(EduStanfordNlpTreesEnglishGrammaticalRelations, AGENT)]) {
          specific = @"by";
        }
      }
      if (specific != nil) {
        EduStanfordNlpUtilPair *specPair = new_EduStanfordNlpUtilPair_initWithId_withId_(specific, word);
        [((id<JavaUtilList>) nil_chk(specifics)) addWithId:specPair];
      }
    }
  }
  for (EduStanfordNlpUtilPair * __strong tuple in nil_chk(specifics)) {
    EduStanfordNlpSemgraphSemanticGraph_insertSpecificIntoListWithNSString_withEduStanfordNlpLingIndexedWord_withJavaUtilList_(self, [((EduStanfordNlpUtilPair *) nil_chk(tuple)) first], [tuple second], uncompressedList);
  }
  return EduStanfordNlpUtilStringUtils_joinWithJavaLangIterable_withNSString_(uncompressedList, @" ");
}

- (void)insertSpecificIntoListWithNSString:(NSString *)specific
         withEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)relnTgtNode
                          withJavaUtilList:(id<JavaUtilList>)tgtList {
  EduStanfordNlpSemgraphSemanticGraph_insertSpecificIntoListWithNSString_withEduStanfordNlpLingIndexedWord_withJavaUtilList_(self, specific, relnTgtNode, tgtList);
}

- (NSString *)toStringWithEduStanfordNlpSemgraphSemanticGraph_OutputFormat:(EduStanfordNlpSemgraphSemanticGraph_OutputFormat *)format {
  switch ([format ordinal]) {
    case EduStanfordNlpSemgraphSemanticGraph_OutputFormat_Enum_XML:
    return EduStanfordNlpSemgraphSemanticGraph_toXMLString(self);
    case EduStanfordNlpSemgraphSemanticGraph_OutputFormat_Enum_READABLE:
    return EduStanfordNlpSemgraphSemanticGraph_toReadableString(self);
    case EduStanfordNlpSemgraphSemanticGraph_OutputFormat_Enum_LIST:
    return [self toList];
    case EduStanfordNlpSemgraphSemanticGraph_OutputFormat_Enum_RECURSIVE:
    return [self description];
    default:
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"Unsupported format ", format));
  }
}

- (NSString *)toList {
  JavaLangStringBuilder *buf = new_JavaLangStringBuilder_init();
  for (EduStanfordNlpLingIndexedWord * __strong root in nil_chk([self getRoots])) {
    (void) [buf appendWithNSString:@"root(ROOT-0, "];
    (void) [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:[((EduStanfordNlpLingIndexedWord *) nil_chk(root)) toStringWithEduStanfordNlpLingCoreLabel_OutputFormat:JreLoadEnum(EduStanfordNlpLingCoreLabel_OutputFormat, VALUE_INDEX)]])) appendWithNSString:@")\n"];
  }
  for (EduStanfordNlpSemgraphSemanticGraphEdge * __strong edge in nil_chk([self edgeListSorted])) {
    (void) [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:[((EduStanfordNlpTreesGrammaticalRelation *) nil_chk([((EduStanfordNlpSemgraphSemanticGraphEdge *) nil_chk(edge)) getRelation])) description]])) appendWithNSString:@"("];
    (void) [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:[((EduStanfordNlpLingIndexedWord *) nil_chk([edge getSource])) toStringWithEduStanfordNlpLingCoreLabel_OutputFormat:JreLoadEnum(EduStanfordNlpLingCoreLabel_OutputFormat, VALUE_INDEX)]])) appendWithNSString:@", "];
    (void) [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:[((EduStanfordNlpLingIndexedWord *) nil_chk([edge getTarget])) toStringWithEduStanfordNlpLingCoreLabel_OutputFormat:JreLoadEnum(EduStanfordNlpLingCoreLabel_OutputFormat, VALUE_INDEX)]])) appendWithNSString:@")\n"];
  }
  return [buf description];
}

- (NSString *)toPOSList {
  JavaLangStringBuilder *buf = new_JavaLangStringBuilder_init();
  for (EduStanfordNlpSemgraphSemanticGraphEdge * __strong edge in nil_chk([self edgeListSorted])) {
    (void) [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:[((EduStanfordNlpTreesGrammaticalRelation *) nil_chk([((EduStanfordNlpSemgraphSemanticGraphEdge *) nil_chk(edge)) getRelation])) description]])) appendWithNSString:@"("];
    (void) [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:[((EduStanfordNlpLingIndexedWord *) nil_chk([edge getSource])) description]])) appendWithNSString:@","];
    (void) [((JavaLangStringBuilder *) nil_chk([buf appendWithId:[edge getTarget]])) appendWithNSString:@")\n"];
  }
  return [buf description];
}

- (NSString *)toReadableString {
  return EduStanfordNlpSemgraphSemanticGraph_toReadableString(self);
}

- (NSString *)toXMLString {
  return EduStanfordNlpSemgraphSemanticGraph_toXMLString(self);
}

- (NSString *)toCompactString {
  return [self toCompactStringWithBoolean:false];
}

- (NSString *)toCompactStringWithBoolean:(jboolean)showTags {
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  id<JavaUtilSet> used = [((EduStanfordNlpUtilMapFactory *) nil_chk(EduStanfordNlpSemgraphSemanticGraph_wordMapFactory)) newSet];
  id<JavaUtilCollection> roots = [self getRoots];
  if ([((id<JavaUtilCollection>) nil_chk(roots)) isEmpty]) {
    if ([self size] == 0) {
      return @"[EMPTY_SEMANTIC_GRAPH]";
    }
    else {
      return @"[UNROOTED_SEMANTIC_GRAPH]";
    }
  }
  for (EduStanfordNlpLingIndexedWord * __strong root in roots) {
    EduStanfordNlpSemgraphSemanticGraph_toCompactStringHelperWithEduStanfordNlpLingIndexedWord_withJavaLangStringBuilder_withJavaUtilSet_withBoolean_(self, root, sb, used, showTags);
  }
  return [sb description];
}

- (void)toCompactStringHelperWithEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)node
                                     withJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                                               withJavaUtilSet:(id<JavaUtilSet>)used
                                                   withBoolean:(jboolean)showTags {
  EduStanfordNlpSemgraphSemanticGraph_toCompactStringHelperWithEduStanfordNlpLingIndexedWord_withJavaLangStringBuilder_withJavaUtilSet_withBoolean_(self, node, sb, used, showTags);
}

- (NSString *)toFormattedString {
  return [((EduStanfordNlpSemgraphSemanticGraphFormatter *) nil_chk(EduStanfordNlpSemgraphSemanticGraph_formatter)) formatSemanticGraphWithEduStanfordNlpSemgraphSemanticGraph:self];
}

- (NSString *)toFormattedStringWithEduStanfordNlpSemgraphSemanticGraphFormatter:(EduStanfordNlpSemgraphSemanticGraphFormatter *)formatter {
  return [((EduStanfordNlpSemgraphSemanticGraphFormatter *) nil_chk(formatter)) formatSemanticGraphWithEduStanfordNlpSemgraphSemanticGraph:self];
}

- (void)prettyPrintWithEduStanfordNlpSemgraphSemanticGraphFormatter:(EduStanfordNlpSemgraphSemanticGraphFormatter *)formatter {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:[((EduStanfordNlpSemgraphSemanticGraphFormatter *) nil_chk(formatter)) formatSemanticGraphWithEduStanfordNlpSemgraphSemanticGraph:self]];
}

- (void)prettyPrint {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:[((EduStanfordNlpSemgraphSemanticGraphFormatter *) nil_chk(EduStanfordNlpSemgraphSemanticGraph_formatter)) formatSemanticGraphWithEduStanfordNlpSemgraphSemanticGraph:self]];
}

- (NSString *)toDotFormat {
  return [self toDotFormatWithNSString:@""];
}

- (NSString *)toDotFormatWithNSString:(NSString *)graphname {
  return [self toDotFormatWithNSString:graphname withEduStanfordNlpLingCoreLabel_OutputFormat:JreLoadEnum(EduStanfordNlpLingCoreLabel_OutputFormat, VALUE_TAG_INDEX)];
}

- (NSString *)toDotFormatWithNSString:(NSString *)graphname
withEduStanfordNlpLingCoreLabel_OutputFormat:(EduStanfordNlpLingCoreLabel_OutputFormat *)indexedWordFormat {
  JavaLangStringBuilder *output = new_JavaLangStringBuilder_init();
  (void) [output appendWithNSString:JreStrcat("$$$", @"digraph ", graphname, @" {\n")];
  for (EduStanfordNlpLingIndexedWord * __strong word in nil_chk([((EduStanfordNlpGraphDirectedMultiGraph *) nil_chk(graph_)) getAllVertices])) {
    (void) [output appendWithNSString:JreStrcat("$I$$$", @"  N_", [((EduStanfordNlpLingIndexedWord *) nil_chk(word)) index], @" [label=\"", [word toStringWithEduStanfordNlpLingCoreLabel_OutputFormat:indexedWordFormat], @"\"];\n")];
  }
  for (EduStanfordNlpSemgraphSemanticGraphEdge * __strong edge in nil_chk([graph_ edgeIterable])) {
    (void) [output appendWithNSString:JreStrcat("$I$I$@$", @"  N_", [((EduStanfordNlpLingIndexedWord *) nil_chk([((EduStanfordNlpSemgraphSemanticGraphEdge *) nil_chk(edge)) getSource])) index], @" -> N_", [((EduStanfordNlpLingIndexedWord *) nil_chk([edge getTarget])) index], @" [label=\"", [edge getRelation], @"\"];\n")];
  }
  (void) [output appendWithNSString:@"}\n"];
  return [output description];
}

- (EduStanfordNlpSemgraphSemanticGraphEdge *)addEdgeWithEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)s
                                                    withEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)d
                                           withEduStanfordNlpTreesGrammaticalRelation:(EduStanfordNlpTreesGrammaticalRelation *)reln
                                                                           withDouble:(jdouble)weight
                                                                          withBoolean:(jboolean)isExtra {
  EduStanfordNlpSemgraphSemanticGraphEdge *newEdge = new_EduStanfordNlpSemgraphSemanticGraphEdge_initWithEduStanfordNlpLingIndexedWord_withEduStanfordNlpLingIndexedWord_withEduStanfordNlpTreesGrammaticalRelation_withDouble_withBoolean_(s, d, reln, weight, isExtra);
  [((EduStanfordNlpGraphDirectedMultiGraph *) nil_chk(graph_)) addWithId:s withId:d withId:newEdge];
  return newEdge;
}

- (EduStanfordNlpSemgraphSemanticGraphEdge *)addEdgeWithEduStanfordNlpSemgraphSemanticGraphEdge:(EduStanfordNlpSemgraphSemanticGraphEdge *)edge {
  EduStanfordNlpSemgraphSemanticGraphEdge *newEdge = new_EduStanfordNlpSemgraphSemanticGraphEdge_initWithEduStanfordNlpLingIndexedWord_withEduStanfordNlpLingIndexedWord_withEduStanfordNlpTreesGrammaticalRelation_withDouble_withBoolean_([((EduStanfordNlpSemgraphSemanticGraphEdge *) nil_chk(edge)) getGovernor], [edge getDependent], [edge getRelation], [edge getWeight], [edge isExtra]);
  [((EduStanfordNlpGraphDirectedMultiGraph *) nil_chk(graph_)) addWithId:[edge getGovernor] withId:[edge getDependent] withId:newEdge];
  return newEdge;
}

+ (EduStanfordNlpSemgraphSemanticGraph *)valueOfWithNSString:(NSString *)s {
  return EduStanfordNlpSemgraphSemanticGraph_valueOfWithNSString_(s);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpSemgraphSemanticGraph_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithEduStanfordNlpSemgraphSemanticGraph:(EduStanfordNlpSemgraphSemanticGraph *)g {
  EduStanfordNlpSemgraphSemanticGraph_initWithEduStanfordNlpSemgraphSemanticGraph_(self, g);
  return self;
}

- (instancetype)initWithEduStanfordNlpSemgraphSemanticGraph:(EduStanfordNlpSemgraphSemanticGraph *)g
                                            withJavaUtilMap:(id<JavaUtilMap>)prevToNewMap {
  EduStanfordNlpSemgraphSemanticGraph_initWithEduStanfordNlpSemgraphSemanticGraph_withJavaUtilMap_(self, g, prevToNewMap);
  return self;
}

- (instancetype)initWithJavaUtilCollection:(id<JavaUtilCollection>)dependencies {
  EduStanfordNlpSemgraphSemanticGraph_initWithJavaUtilCollection_(self, dependencies);
  return self;
}

- (id<JavaUtilList>)getShortestUndirectedPathNodesWithEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)source
                                                  withEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)target {
  return [((EduStanfordNlpGraphDirectedMultiGraph *) nil_chk(graph_)) getShortestPathWithId:source withId:target withBoolean:false];
}

- (id<JavaUtilList>)getShortestUndirectedPathEdgesWithEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)source
                                                  withEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)target {
  return [((EduStanfordNlpGraphDirectedMultiGraph *) nil_chk(graph_)) getShortestPathEdgesWithId:source withId:target withBoolean:false];
}

- (id<JavaUtilList>)getShortestDirectedPathNodesWithEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)source
                                                withEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)target {
  return [((EduStanfordNlpGraphDirectedMultiGraph *) nil_chk(graph_)) getShortestPathWithId:source withId:target withBoolean:true];
}

- (id<JavaUtilList>)getShortestDirectedPathEdgesWithEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)source
                                                withEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)target {
  return [((EduStanfordNlpGraphDirectedMultiGraph *) nil_chk(graph_)) getShortestPathEdgesWithId:source withId:target withBoolean:true];
}

- (EduStanfordNlpSemgraphSemanticGraph *)makeSoftCopy {
  EduStanfordNlpSemgraphSemanticGraph *newSg = new_EduStanfordNlpSemgraphSemanticGraph_init();
  if (![((id<JavaUtilCollection>) nil_chk(self->roots_)) isEmpty]) [newSg setRootWithEduStanfordNlpLingIndexedWord:[self getFirstRoot]];
  for (EduStanfordNlpSemgraphSemanticGraphEdge * __strong edge in nil_chk([self edgeIterable])) {
    (void) [newSg addEdgeWithEduStanfordNlpLingIndexedWord:[((EduStanfordNlpSemgraphSemanticGraphEdge *) nil_chk(edge)) getSource] withEduStanfordNlpLingIndexedWord:[edge getTarget] withEduStanfordNlpTreesGrammaticalRelation:[edge getRelation] withDouble:[edge getWeight] withBoolean:[edge isExtra]];
  }
  return newSg;
}

- (jboolean)isEqual:(id)o {
  if (o == self) {
    return true;
  }
  if (!([o isKindOfClass:[EduStanfordNlpSemgraphSemanticGraph class]])) {
    return false;
  }
  EduStanfordNlpSemgraphSemanticGraph *g = (EduStanfordNlpSemgraphSemanticGraph *) cast_chk(o, [EduStanfordNlpSemgraphSemanticGraph class]);
  return [((EduStanfordNlpGraphDirectedMultiGraph *) nil_chk(graph_)) isEqual:((EduStanfordNlpSemgraphSemanticGraph *) nil_chk(g))->graph_] && [((id<JavaUtilCollection>) nil_chk(roots_)) isEqual:g->roots_];
}

- (NSUInteger)hash {
  return ((jint) [((EduStanfordNlpGraphDirectedMultiGraph *) nil_chk(graph_)) hash]);
}

- (id<JavaUtilList>)findAllRelnsWithEduStanfordNlpTreesGrammaticalRelation:(EduStanfordNlpTreesGrammaticalRelation *)tgtRelation {
  JavaUtilArrayList *relns = new_JavaUtilArrayList_init();
  for (EduStanfordNlpSemgraphSemanticGraphEdge * __strong edge in nil_chk([self edgeIterable])) {
    EduStanfordNlpTreesGrammaticalRelation *edgeRelation = [((EduStanfordNlpSemgraphSemanticGraphEdge *) nil_chk(edge)) getRelation];
    if ((edgeRelation != nil) && ([((EduStanfordNlpTreesGrammaticalRelation *) nil_chk(edgeRelation)) isEqual:tgtRelation])) {
      [relns addWithId:edge];
    }
  }
  return relns;
}

- (void)deleteDuplicateEdges {
  [((EduStanfordNlpGraphDirectedMultiGraph *) nil_chk(graph_)) deleteDuplicateEdges];
}

- (id<JavaUtilCollection>)typedDependencies {
  id<JavaUtilCollection> dependencies = new_JavaUtilArrayList_init();
  EduStanfordNlpLingIndexedWord *root = nil;
  for (EduStanfordNlpLingIndexedWord * __strong node in nil_chk(roots_)) {
    if (root == nil) {
      root = new_EduStanfordNlpLingIndexedWord_initWithNSString_withInt_withInt_([((EduStanfordNlpLingIndexedWord *) nil_chk(node)) docID], [node sentIndex], 0);
      [root setValueWithNSString:@"ROOT"];
    }
    EduStanfordNlpTreesTypedDependency *dependency = new_EduStanfordNlpTreesTypedDependency_initWithEduStanfordNlpTreesGrammaticalRelation_withEduStanfordNlpLingIndexedWord_withEduStanfordNlpLingIndexedWord_(JreLoadStatic(EduStanfordNlpTreesGrammaticalRelation, ROOT), root, node);
    [dependencies addWithId:dependency];
  }
  for (EduStanfordNlpSemgraphSemanticGraphEdge * __strong e in nil_chk([self edgeIterable])) {
    EduStanfordNlpTreesTypedDependency *dependency = new_EduStanfordNlpTreesTypedDependency_initWithEduStanfordNlpTreesGrammaticalRelation_withEduStanfordNlpLingIndexedWord_withEduStanfordNlpLingIndexedWord_([((EduStanfordNlpSemgraphSemanticGraphEdge *) nil_chk(e)) getRelation], [e getGovernor], [e getDependent]);
    if ([e isExtra]) {
      [dependency setExtra];
    }
    [dependencies addWithId:dependency];
  }
  return dependencies;
}

- (EduStanfordNlpUtilPair *)yieldSpanWithEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)word {
  jint min = JavaLangInteger_MAX_VALUE;
  jint max = JavaLangInteger_MIN_VALUE;
  JavaUtilStack *fringe = new_JavaUtilStack_init();
  (void) [fringe pushWithId:word];
  while (![fringe isEmpty]) {
    EduStanfordNlpLingIndexedWord *parent = [fringe pop];
    min = JavaLangMath_minWithInt_withInt_(min, [((EduStanfordNlpLingIndexedWord *) nil_chk(parent)) index] - 1);
    max = JavaLangMath_maxWithInt_withInt_(max, [parent index]);
    for (EduStanfordNlpSemgraphSemanticGraphEdge * __strong edge in nil_chk([self outgoingEdgeIterableWithEduStanfordNlpLingIndexedWord:parent])) {
      if (![((EduStanfordNlpSemgraphSemanticGraphEdge *) nil_chk(edge)) isExtra]) {
        (void) [fringe pushWithId:[edge getDependent]];
      }
    }
  }
  return EduStanfordNlpUtilPair_makePairWithId_withId_(JavaLangInteger_valueOfWithInt_(min), JavaLangInteger_valueOfWithInt_(max));
}

- (void)addCommentWithNSString:(NSString *)comment {
  [((JavaUtilLinkedList *) nil_chk(self->comments_)) addWithId:comment];
}

- (id<JavaUtilList>)getComments {
  return self->comments_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "LEduStanfordNlpSemgraphSemanticGraphEdge;", 0x1, 6, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 8, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 9, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 11, -1, -1 },
    { NULL, "Z", 0x1, 12, 10, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 13, 1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 14, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 15, -1, -1 },
    { NULL, "LJavaLangIterable;", 0x1, -1, -1, -1, 16, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, 17, 1, -1, 18, -1, -1 },
    { NULL, "LJavaLangIterable;", 0x1, 19, 1, -1, 20, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, 21, 1, -1, 18, -1, -1 },
    { NULL, "LJavaLangIterable;", 0x1, 22, 1, -1, 20, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 23, 1, -1, 24, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 25, 1, -1, 24, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 26, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 27, 4, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingIndexedWord;", 0x1, 28, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 29, 30, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 29, 31, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 32, 1, -1, 33, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, 34, 1, -1, 35, -1, -1 },
    { NULL, "Z", 0x1, 36, 1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 37, 1, -1, 24, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 38, 1, -1, 24, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 39, 1, -1, 33, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, 40, 1, -1, 35, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, 41, 1, -1, 42, -1, -1 },
    { NULL, "LJavaUtilList;", 0x2, 43, 44, -1, 45, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 43, 1, -1, 33, -1, -1 },
    { NULL, "LEduStanfordNlpLingIndexedWord;", 0x1, 46, 1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingIndexedWord;", 0x1, 47, 48, 49, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingIndexedWord;", 0x1, 50, 48, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingIndexedWord;", 0x1, 51, 52, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 53, 52, -1, 54, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 55, 52, -1, 54, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, 56, 1, -1, 35, -1, -1 },
    { NULL, "V", 0x2, 57, 58, -1, 59, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 60, 1, -1, 61, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 62, 1, -1, 61, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, 63, 1, -1, 64, -1, -1 },
    { NULL, "LEduStanfordNlpTreesGrammaticalRelation;", 0x1, 65, 4, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, 66, 1, -1, 64, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, -1, -1, -1, 67, -1, -1 },
    { NULL, "LJavaUtilList;", 0x2, -1, -1, -1, 14, -1, -1 },
    { NULL, "LEduStanfordNlpLingIndexedWord;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 68, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 69, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 70, 71, -1, 72, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 14, -1, -1 },
    { NULL, "V", 0x2, 73, 74, -1, 75, -1, -1 },
    { NULL, "Z", 0x1, 76, 77, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 78, 79, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 80, 79, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingIndexedWord;", 0x1, 81, 79, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, 82, 79, -1, 83, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, 84, 79, -1, 83, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, 85, 86, -1, 87, -1, -1 },
    { NULL, "LEduStanfordNlpSemgraphSemanticGraphEdge;", 0x1, 6, 88, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 89, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 90, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 91, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 92, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 93, 1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 11, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, 94, 1, -1, 35, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 95, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 96, 97, -1, 98, -1, -1 },
    { NULL, "LNSString;", 0x1, 99, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 99, 100, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 101, 102, -1, 103, -1, -1 },
    { NULL, "LNSString;", 0xa, 104, 48, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 105, 106, -1, 107, -1, -1 },
    { NULL, "LNSString;", 0x1, 99, 108, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 109, 110, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 111, 112, -1, 113, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 114, 115, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 116, 115, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 117, 52, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 117, 118, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpSemgraphSemanticGraphEdge;", 0x1, 119, 120, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpSemgraphSemanticGraphEdge;", 0x1, 119, 10, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpSemgraphSemanticGraph;", 0x9, 121, 52, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 122, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 123, -1, 124, -1, -1 },
    { NULL, NULL, 0x1, -1, 71, -1, 125, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 126, 4, -1, 127, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 128, 4, -1, 5, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 129, 4, -1, 127, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 130, 4, -1, 5, -1, -1 },
    { NULL, "LEduStanfordNlpSemgraphSemanticGraph;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 131, 132, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 133, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 134, 135, -1, 136, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, -1, -1, -1, 137, -1, -1 },
    { NULL, "LEduStanfordNlpUtilPair;", 0x1, 138, 1, -1, 139, -1, -1 },
    { NULL, "V", 0x1, 140, 52, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 141, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(edgeCount);
  methods[1].selector = @selector(outDegreeWithEduStanfordNlpLingIndexedWord:);
  methods[2].selector = @selector(inDegreeWithEduStanfordNlpLingIndexedWord:);
  methods[3].selector = @selector(getAllEdgesWithEduStanfordNlpLingIndexedWord:withEduStanfordNlpLingIndexedWord:);
  methods[4].selector = @selector(getEdgeWithEduStanfordNlpLingIndexedWord:withEduStanfordNlpLingIndexedWord:);
  methods[5].selector = @selector(addVertexWithEduStanfordNlpLingIndexedWord:);
  methods[6].selector = @selector(containsVertexWithEduStanfordNlpLingIndexedWord:);
  methods[7].selector = @selector(containsEdgeWithEduStanfordNlpLingIndexedWord:withEduStanfordNlpLingIndexedWord:);
  methods[8].selector = @selector(containsEdgeWithEduStanfordNlpSemgraphSemanticGraphEdge:);
  methods[9].selector = @selector(vertexSet);
  methods[10].selector = @selector(removeEdgeWithEduStanfordNlpSemgraphSemanticGraphEdge:);
  methods[11].selector = @selector(removeVertexWithEduStanfordNlpLingIndexedWord:);
  methods[12].selector = @selector(vertexListSorted);
  methods[13].selector = @selector(edgeListSorted);
  methods[14].selector = @selector(edgeIterable);
  methods[15].selector = @selector(outgoingEdgeIteratorWithEduStanfordNlpLingIndexedWord:);
  methods[16].selector = @selector(outgoingEdgeIterableWithEduStanfordNlpLingIndexedWord:);
  methods[17].selector = @selector(incomingEdgeIteratorWithEduStanfordNlpLingIndexedWord:);
  methods[18].selector = @selector(incomingEdgeIterableWithEduStanfordNlpLingIndexedWord:);
  methods[19].selector = @selector(outgoingEdgeListWithEduStanfordNlpLingIndexedWord:);
  methods[20].selector = @selector(incomingEdgeListWithEduStanfordNlpLingIndexedWord:);
  methods[21].selector = @selector(isEmpty);
  methods[22].selector = @selector(isAncestorWithEduStanfordNlpLingIndexedWord:withEduStanfordNlpLingIndexedWord:);
  methods[23].selector = @selector(commonAncestorWithEduStanfordNlpLingIndexedWord:withEduStanfordNlpLingIndexedWord:);
  methods[24].selector = @selector(getCommonAncestorWithEduStanfordNlpLingIndexedWord:withEduStanfordNlpLingIndexedWord:);
  methods[25].selector = @selector(matchPatternToVertexWithNSString:withEduStanfordNlpLingIndexedWord:withBoolean:);
  methods[26].selector = @selector(matchPatternToVertexWithNSString:withEduStanfordNlpLingIndexedWord:);
  methods[27].selector = @selector(getChildListWithEduStanfordNlpLingIndexedWord:);
  methods[28].selector = @selector(getChildrenWithEduStanfordNlpLingIndexedWord:);
  methods[29].selector = @selector(hasChildrenWithEduStanfordNlpLingIndexedWord:);
  methods[30].selector = @selector(getIncomingEdgesSortedWithEduStanfordNlpLingIndexedWord:);
  methods[31].selector = @selector(getOutEdgesSortedWithEduStanfordNlpLingIndexedWord:);
  methods[32].selector = @selector(getParentListWithEduStanfordNlpLingIndexedWord:);
  methods[33].selector = @selector(getParentsWithEduStanfordNlpLingIndexedWord:);
  methods[34].selector = @selector(getSiblingsWithEduStanfordNlpLingIndexedWord:);
  methods[35].selector = @selector(getPathToRootWithEduStanfordNlpLingIndexedWord:withJavaUtilList:);
  methods[36].selector = @selector(getPathToRootWithEduStanfordNlpLingIndexedWord:);
  methods[37].selector = @selector(getParentWithEduStanfordNlpLingIndexedWord:);
  methods[38].selector = @selector(getNodeByIndexWithInt:);
  methods[39].selector = @selector(getNodeByIndexSafeWithInt:);
  methods[40].selector = @selector(getNodeByWordPatternWithNSString:);
  methods[41].selector = @selector(getAllNodesByWordPatternWithNSString:);
  methods[42].selector = @selector(getAllNodesByPartOfSpeechPatternWithNSString:);
  methods[43].selector = @selector(descendantsWithEduStanfordNlpLingIndexedWord:);
  methods[44].selector = @selector(descendantsHelperWithEduStanfordNlpLingIndexedWord:withJavaUtilSet:);
  methods[45].selector = @selector(childPairsWithEduStanfordNlpLingIndexedWord:);
  methods[46].selector = @selector(parentPairsWithEduStanfordNlpLingIndexedWord:);
  methods[47].selector = @selector(relnsWithEduStanfordNlpLingIndexedWord:);
  methods[48].selector = @selector(relnWithEduStanfordNlpLingIndexedWord:withEduStanfordNlpLingIndexedWord:);
  methods[49].selector = @selector(childRelnsWithEduStanfordNlpLingIndexedWord:);
  methods[50].selector = @selector(getRoots);
  methods[51].selector = @selector(getVerticesWithoutParents);
  methods[52].selector = @selector(getFirstRoot);
  methods[53].selector = @selector(addRootWithEduStanfordNlpLingIndexedWord:);
  methods[54].selector = @selector(resetRoots);
  methods[55].selector = @selector(setRootWithEduStanfordNlpLingIndexedWord:);
  methods[56].selector = @selector(setRootsWithJavaUtilCollection:);
  methods[57].selector = @selector(topologicalSort);
  methods[58].selector = @selector(topologicalSortHelperWithEduStanfordNlpLingIndexedWord:withJavaUtilSet:withJavaUtilSet:withJavaUtilList:);
  methods[59].selector = @selector(hasChildWithEduStanfordNlpLingIndexedWord:withEduStanfordNlpTreesGrammaticalRelation:withNSString:);
  methods[60].selector = @selector(hasChildWithRelnWithEduStanfordNlpLingIndexedWord:withEduStanfordNlpTreesGrammaticalRelation:);
  methods[61].selector = @selector(hasParentWithRelnWithEduStanfordNlpLingIndexedWord:withEduStanfordNlpTreesGrammaticalRelation:);
  methods[62].selector = @selector(getChildWithRelnWithEduStanfordNlpLingIndexedWord:withEduStanfordNlpTreesGrammaticalRelation:);
  methods[63].selector = @selector(getParentsWithRelnWithEduStanfordNlpLingIndexedWord:withEduStanfordNlpTreesGrammaticalRelation:);
  methods[64].selector = @selector(getChildrenWithRelnWithEduStanfordNlpLingIndexedWord:withEduStanfordNlpTreesGrammaticalRelation:);
  methods[65].selector = @selector(getChildrenWithRelnsWithEduStanfordNlpLingIndexedWord:withJavaUtilCollection:);
  methods[66].selector = @selector(getEdgeWithEduStanfordNlpLingIndexedWord:withEduStanfordNlpLingIndexedWord:withEduStanfordNlpTreesGrammaticalRelation:);
  methods[67].selector = @selector(isNegatedVertexWithEduStanfordNlpLingIndexedWord:);
  methods[68].selector = @selector(isNegatedVerbWithEduStanfordNlpLingIndexedWord:);
  methods[69].selector = @selector(isInConditionalContextWithEduStanfordNlpLingIndexedWord:);
  methods[70].selector = @selector(attachedNegatedVerbWithEduStanfordNlpLingIndexedWord:);
  methods[71].selector = @selector(isAuxiliaryVerbWithEduStanfordNlpLingIndexedWord:);
  methods[72].selector = @selector(getLeafVertices);
  methods[73].selector = @selector(size);
  methods[74].selector = @selector(getSubgraphVerticesWithEduStanfordNlpLingIndexedWord:);
  methods[75].selector = @selector(isDag);
  methods[76].selector = @selector(isDagWithEduStanfordNlpLingIndexedWord:);
  methods[77].selector = @selector(isDagHelperWithEduStanfordNlpLingIndexedWord:withJavaUtilSet:withJavaUtilSet:);
  methods[78].selector = @selector(description);
  methods[79].selector = @selector(toStringWithEduStanfordNlpLingCoreLabel_OutputFormat:);
  methods[80].selector = @selector(recToStringWithEduStanfordNlpLingIndexedWord:withEduStanfordNlpLingCoreLabel_OutputFormat:withJavaLangStringBuilder:withInt:withJavaUtilSet:);
  methods[81].selector = @selector(spaceWithInt:);
  methods[82].selector = @selector(toRecoveredSentenceString);
  methods[83].selector = @selector(toRecoveredSentenceStringWithIndexMarking);
  methods[84].selector = @selector(toEnUncollapsedSentenceString);
  methods[85].selector = @selector(insertSpecificIntoListWithNSString:withEduStanfordNlpLingIndexedWord:withJavaUtilList:);
  methods[86].selector = @selector(toStringWithEduStanfordNlpSemgraphSemanticGraph_OutputFormat:);
  methods[87].selector = @selector(toList);
  methods[88].selector = @selector(toPOSList);
  methods[89].selector = @selector(toReadableString);
  methods[90].selector = @selector(toXMLString);
  methods[91].selector = @selector(toCompactString);
  methods[92].selector = @selector(toCompactStringWithBoolean:);
  methods[93].selector = @selector(toCompactStringHelperWithEduStanfordNlpLingIndexedWord:withJavaLangStringBuilder:withJavaUtilSet:withBoolean:);
  methods[94].selector = @selector(toFormattedString);
  methods[95].selector = @selector(toFormattedStringWithEduStanfordNlpSemgraphSemanticGraphFormatter:);
  methods[96].selector = @selector(prettyPrintWithEduStanfordNlpSemgraphSemanticGraphFormatter:);
  methods[97].selector = @selector(prettyPrint);
  methods[98].selector = @selector(toDotFormat);
  methods[99].selector = @selector(toDotFormatWithNSString:);
  methods[100].selector = @selector(toDotFormatWithNSString:withEduStanfordNlpLingCoreLabel_OutputFormat:);
  methods[101].selector = @selector(addEdgeWithEduStanfordNlpLingIndexedWord:withEduStanfordNlpLingIndexedWord:withEduStanfordNlpTreesGrammaticalRelation:withDouble:withBoolean:);
  methods[102].selector = @selector(addEdgeWithEduStanfordNlpSemgraphSemanticGraphEdge:);
  methods[103].selector = @selector(valueOfWithNSString:);
  methods[104].selector = @selector(init);
  methods[105].selector = @selector(initWithEduStanfordNlpSemgraphSemanticGraph:);
  methods[106].selector = @selector(initWithEduStanfordNlpSemgraphSemanticGraph:withJavaUtilMap:);
  methods[107].selector = @selector(initWithJavaUtilCollection:);
  methods[108].selector = @selector(getShortestUndirectedPathNodesWithEduStanfordNlpLingIndexedWord:withEduStanfordNlpLingIndexedWord:);
  methods[109].selector = @selector(getShortestUndirectedPathEdgesWithEduStanfordNlpLingIndexedWord:withEduStanfordNlpLingIndexedWord:);
  methods[110].selector = @selector(getShortestDirectedPathNodesWithEduStanfordNlpLingIndexedWord:withEduStanfordNlpLingIndexedWord:);
  methods[111].selector = @selector(getShortestDirectedPathEdgesWithEduStanfordNlpLingIndexedWord:withEduStanfordNlpLingIndexedWord:);
  methods[112].selector = @selector(makeSoftCopy);
  methods[113].selector = @selector(isEqual:);
  methods[114].selector = @selector(hash);
  methods[115].selector = @selector(findAllRelnsWithEduStanfordNlpTreesGrammaticalRelation:);
  methods[116].selector = @selector(deleteDuplicateEdges);
  methods[117].selector = @selector(typedDependencies);
  methods[118].selector = @selector(yieldSpanWithEduStanfordNlpLingIndexedWord:);
  methods[119].selector = @selector(addCommentWithNSString:);
  methods[120].selector = @selector(getComments);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "addSRLArcs", "Z", .constantValue.asBOOL = EduStanfordNlpSemgraphSemanticGraph_addSRLArcs, 0x19, -1, -1, -1, -1 },
    { "formatter", "LEduStanfordNlpSemgraphSemanticGraphFormatter;", .constantValue.asLong = 0, 0x1a, -1, 142, -1, -1 },
    { "roots_", "LJavaUtilCollection;", .constantValue.asLong = 0, 0x12, -1, -1, 143, -1 },
    { "graph_", "LEduStanfordNlpGraphDirectedMultiGraph;", .constantValue.asLong = 0, 0x12, -1, -1, 144, -1 },
    { "outerMapFactory", "LEduStanfordNlpUtilMapFactory;", .constantValue.asLong = 0, 0x1a, -1, 145, 146, -1 },
    { "innerMapFactory", "LEduStanfordNlpUtilMapFactory;", .constantValue.asLong = 0, 0x1a, -1, 147, 148, -1 },
    { "wordMapFactory", "LEduStanfordNlpUtilMapFactory;", .constantValue.asLong = 0, 0x1a, -1, 149, 150, -1 },
    { "comments_", "LJavaUtilLinkedList;", .constantValue.asLong = 0, 0x2, -1, -1, 151, -1 },
    { "WORD_AND_INDEX_PATTERN", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 152, -1, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpSemgraphSemanticGraph_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "outDegree", "LEduStanfordNlpLingIndexedWord;", "inDegree", "getAllEdges", "LEduStanfordNlpLingIndexedWord;LEduStanfordNlpLingIndexedWord;", "(Ledu/stanford/nlp/ling/IndexedWord;Ledu/stanford/nlp/ling/IndexedWord;)Ljava/util/List<Ledu/stanford/nlp/semgraph/SemanticGraphEdge;>;", "getEdge", "addVertex", "containsVertex", "containsEdge", "LEduStanfordNlpSemgraphSemanticGraphEdge;", "()Ljava/util/Set<Ledu/stanford/nlp/ling/IndexedWord;>;", "removeEdge", "removeVertex", "()Ljava/util/List<Ledu/stanford/nlp/ling/IndexedWord;>;", "()Ljava/util/List<Ledu/stanford/nlp/semgraph/SemanticGraphEdge;>;", "()Ljava/lang/Iterable<Ledu/stanford/nlp/semgraph/SemanticGraphEdge;>;", "outgoingEdgeIterator", "(Ledu/stanford/nlp/ling/IndexedWord;)Ljava/util/Iterator<Ledu/stanford/nlp/semgraph/SemanticGraphEdge;>;", "outgoingEdgeIterable", "(Ledu/stanford/nlp/ling/IndexedWord;)Ljava/lang/Iterable<Ledu/stanford/nlp/semgraph/SemanticGraphEdge;>;", "incomingEdgeIterator", "incomingEdgeIterable", "outgoingEdgeList", "(Ledu/stanford/nlp/ling/IndexedWord;)Ljava/util/List<Ledu/stanford/nlp/semgraph/SemanticGraphEdge;>;", "incomingEdgeList", "isAncestor", "commonAncestor", "getCommonAncestor", "matchPatternToVertex", "LNSString;LEduStanfordNlpLingIndexedWord;Z", "LNSString;LEduStanfordNlpLingIndexedWord;", "getChildList", "(Ledu/stanford/nlp/ling/IndexedWord;)Ljava/util/List<Ledu/stanford/nlp/ling/IndexedWord;>;", "getChildren", "(Ledu/stanford/nlp/ling/IndexedWord;)Ljava/util/Set<Ledu/stanford/nlp/ling/IndexedWord;>;", "hasChildren", "getIncomingEdgesSorted", "getOutEdgesSorted", "getParentList", "getParents", "getSiblings", "(Ledu/stanford/nlp/ling/IndexedWord;)Ljava/util/Collection<Ledu/stanford/nlp/ling/IndexedWord;>;", "getPathToRoot", "LEduStanfordNlpLingIndexedWord;LJavaUtilList;", "(Ledu/stanford/nlp/ling/IndexedWord;Ljava/util/List<Ledu/stanford/nlp/ling/IndexedWord;>;)Ljava/util/List<Ledu/stanford/nlp/ling/IndexedWord;>;", "getParent", "getNodeByIndex", "I", "LJavaLangIllegalArgumentException;", "getNodeByIndexSafe", "getNodeByWordPattern", "LNSString;", "getAllNodesByWordPattern", "(Ljava/lang/String;)Ljava/util/List<Ledu/stanford/nlp/ling/IndexedWord;>;", "getAllNodesByPartOfSpeechPattern", "descendants", "descendantsHelper", "LEduStanfordNlpLingIndexedWord;LJavaUtilSet;", "(Ledu/stanford/nlp/ling/IndexedWord;Ljava/util/Set<Ledu/stanford/nlp/ling/IndexedWord;>;)V", "childPairs", "(Ledu/stanford/nlp/ling/IndexedWord;)Ljava/util/List<Ledu/stanford/nlp/util/Pair<Ledu/stanford/nlp/trees/GrammaticalRelation;Ledu/stanford/nlp/ling/IndexedWord;>;>;", "parentPairs", "relns", "(Ledu/stanford/nlp/ling/IndexedWord;)Ljava/util/Set<Ledu/stanford/nlp/trees/GrammaticalRelation;>;", "reln", "childRelns", "()Ljava/util/Collection<Ledu/stanford/nlp/ling/IndexedWord;>;", "addRoot", "setRoot", "setRoots", "LJavaUtilCollection;", "(Ljava/util/Collection<Ledu/stanford/nlp/ling/IndexedWord;>;)V", "topologicalSortHelper", "LEduStanfordNlpLingIndexedWord;LJavaUtilSet;LJavaUtilSet;LJavaUtilList;", "(Ledu/stanford/nlp/ling/IndexedWord;Ljava/util/Set<Ledu/stanford/nlp/ling/IndexedWord;>;Ljava/util/Set<Ledu/stanford/nlp/ling/IndexedWord;>;Ljava/util/List<Ledu/stanford/nlp/ling/IndexedWord;>;)V", "hasChild", "LEduStanfordNlpLingIndexedWord;LEduStanfordNlpTreesGrammaticalRelation;LNSString;", "hasChildWithReln", "LEduStanfordNlpLingIndexedWord;LEduStanfordNlpTreesGrammaticalRelation;", "hasParentWithReln", "getChildWithReln", "getParentsWithReln", "(Ledu/stanford/nlp/ling/IndexedWord;Ledu/stanford/nlp/trees/GrammaticalRelation;)Ljava/util/Set<Ledu/stanford/nlp/ling/IndexedWord;>;", "getChildrenWithReln", "getChildrenWithRelns", "LEduStanfordNlpLingIndexedWord;LJavaUtilCollection;", "(Ledu/stanford/nlp/ling/IndexedWord;Ljava/util/Collection<Ledu/stanford/nlp/trees/GrammaticalRelation;>;)Ljava/util/Set<Ledu/stanford/nlp/ling/IndexedWord;>;", "LEduStanfordNlpLingIndexedWord;LEduStanfordNlpLingIndexedWord;LEduStanfordNlpTreesGrammaticalRelation;", "isNegatedVertex", "isNegatedVerb", "isInConditionalContext", "attachedNegatedVerb", "isAuxiliaryVerb", "getSubgraphVertices", "isDag", "isDagHelper", "LEduStanfordNlpLingIndexedWord;LJavaUtilSet;LJavaUtilSet;", "(Ledu/stanford/nlp/ling/IndexedWord;Ljava/util/Set<Ledu/stanford/nlp/ling/IndexedWord;>;Ljava/util/Set<Ledu/stanford/nlp/ling/IndexedWord;>;)Z", "toString", "LEduStanfordNlpLingCoreLabel_OutputFormat;", "recToString", "LEduStanfordNlpLingIndexedWord;LEduStanfordNlpLingCoreLabel_OutputFormat;LJavaLangStringBuilder;ILJavaUtilSet;", "(Ledu/stanford/nlp/ling/IndexedWord;Ledu/stanford/nlp/ling/CoreLabel$OutputFormat;Ljava/lang/StringBuilder;ILjava/util/Set<Ledu/stanford/nlp/ling/IndexedWord;>;)V", "space", "insertSpecificIntoList", "LNSString;LEduStanfordNlpLingIndexedWord;LJavaUtilList;", "(Ljava/lang/String;Ledu/stanford/nlp/ling/IndexedWord;Ljava/util/List<Ledu/stanford/nlp/ling/IndexedWord;>;)V", "LEduStanfordNlpSemgraphSemanticGraph_OutputFormat;", "toCompactString", "Z", "toCompactStringHelper", "LEduStanfordNlpLingIndexedWord;LJavaLangStringBuilder;LJavaUtilSet;Z", "(Ledu/stanford/nlp/ling/IndexedWord;Ljava/lang/StringBuilder;Ljava/util/Set<Ledu/stanford/nlp/ling/IndexedWord;>;Z)V", "toFormattedString", "LEduStanfordNlpSemgraphSemanticGraphFormatter;", "prettyPrint", "toDotFormat", "LNSString;LEduStanfordNlpLingCoreLabel_OutputFormat;", "addEdge", "LEduStanfordNlpLingIndexedWord;LEduStanfordNlpLingIndexedWord;LEduStanfordNlpTreesGrammaticalRelation;DZ", "valueOf", "LEduStanfordNlpSemgraphSemanticGraph;", "LEduStanfordNlpSemgraphSemanticGraph;LJavaUtilMap;", "(Ledu/stanford/nlp/semgraph/SemanticGraph;Ljava/util/Map<Ledu/stanford/nlp/ling/IndexedWord;Ledu/stanford/nlp/ling/IndexedWord;>;)V", "(Ljava/util/Collection<Ledu/stanford/nlp/trees/TypedDependency;>;)V", "getShortestUndirectedPathNodes", "(Ledu/stanford/nlp/ling/IndexedWord;Ledu/stanford/nlp/ling/IndexedWord;)Ljava/util/List<Ledu/stanford/nlp/ling/IndexedWord;>;", "getShortestUndirectedPathEdges", "getShortestDirectedPathNodes", "getShortestDirectedPathEdges", "equals", "LNSObject;", "hashCode", "findAllRelns", "LEduStanfordNlpTreesGrammaticalRelation;", "(Ledu/stanford/nlp/trees/GrammaticalRelation;)Ljava/util/List<Ledu/stanford/nlp/semgraph/SemanticGraphEdge;>;", "()Ljava/util/Collection<Ledu/stanford/nlp/trees/TypedDependency;>;", "yieldSpan", "(Ledu/stanford/nlp/ling/IndexedWord;)Ledu/stanford/nlp/util/Pair<Ljava/lang/Integer;Ljava/lang/Integer;>;", "addComment", "()Ljava/util/List<Ljava/lang/String;>;", &EduStanfordNlpSemgraphSemanticGraph_formatter, "Ljava/util/Collection<Ledu/stanford/nlp/ling/IndexedWord;>;", "Ledu/stanford/nlp/graph/DirectedMultiGraph<Ledu/stanford/nlp/ling/IndexedWord;Ledu/stanford/nlp/semgraph/SemanticGraphEdge;>;", &EduStanfordNlpSemgraphSemanticGraph_outerMapFactory, "Ledu/stanford/nlp/util/MapFactory<Ledu/stanford/nlp/ling/IndexedWord;Ljava/util/Map<Ledu/stanford/nlp/ling/IndexedWord;Ljava/util/List<Ledu/stanford/nlp/semgraph/SemanticGraphEdge;>;>;>;", &EduStanfordNlpSemgraphSemanticGraph_innerMapFactory, "Ledu/stanford/nlp/util/MapFactory<Ledu/stanford/nlp/ling/IndexedWord;Ljava/util/List<Ledu/stanford/nlp/semgraph/SemanticGraphEdge;>;>;", &EduStanfordNlpSemgraphSemanticGraph_wordMapFactory, "Ledu/stanford/nlp/util/MapFactory<Ledu/stanford/nlp/ling/IndexedWord;Ledu/stanford/nlp/ling/IndexedWord;>;", "Ljava/util/LinkedList<Ljava/lang/String;>;", &EduStanfordNlpSemgraphSemanticGraph_WORD_AND_INDEX_PATTERN, "LEduStanfordNlpSemgraphSemanticGraph_OutputFormat;LEduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask;" };
  static const J2ObjcClassInfo _EduStanfordNlpSemgraphSemanticGraph = { "SemanticGraph", "edu.stanford.nlp.semgraph", ptrTable, methods, fields, 7, 0x1, 121, 10, -1, 153, -1, -1, -1 };
  return &_EduStanfordNlpSemgraphSemanticGraph;
}

+ (void)initialize {
  if (self == [EduStanfordNlpSemgraphSemanticGraph class]) {
    EduStanfordNlpSemgraphSemanticGraph_formatter = new_EduStanfordNlpSemgraphSemanticGraphFormatter_init();
    EduStanfordNlpSemgraphSemanticGraph_outerMapFactory = EduStanfordNlpUtilMapFactory_hashMapFactory();
    EduStanfordNlpSemgraphSemanticGraph_innerMapFactory = EduStanfordNlpUtilMapFactory_hashMapFactory();
    EduStanfordNlpSemgraphSemanticGraph_wordMapFactory = EduStanfordNlpUtilMapFactory_hashMapFactory();
    EduStanfordNlpSemgraphSemanticGraph_WORD_AND_INDEX_PATTERN = JavaUtilRegexPattern_compileWithNSString_(@"([^-]+)-([0-9]+)");
    J2OBJC_SET_INITIALIZED(EduStanfordNlpSemgraphSemanticGraph)
  }
}

@end

id<JavaUtilList> EduStanfordNlpSemgraphSemanticGraph_getPathToRootWithEduStanfordNlpLingIndexedWord_withJavaUtilList_(EduStanfordNlpSemgraphSemanticGraph *self, EduStanfordNlpLingIndexedWord *vertex, id<JavaUtilList> used) {
  [((id<JavaUtilList>) nil_chk(used)) addWithId:vertex];
  id<JavaUtilList> parents = [self getParentListWithEduStanfordNlpLingIndexedWord:vertex];
  [((id<JavaUtilList>) nil_chk(parents)) removeAllWithJavaUtilCollection:used];
  if ([((id<JavaUtilCollection>) nil_chk(self->roots_)) containsWithId:vertex] || ([parents isEmpty])) {
    (void) [used removeWithInt:[used size] - 1];
    if ([self->roots_ containsWithId:vertex]) return EduStanfordNlpUtilGenerics_newArrayList();
    else return nil;
  }
  for (EduStanfordNlpLingIndexedWord * __strong parent in parents) {
    id<JavaUtilList> path = EduStanfordNlpSemgraphSemanticGraph_getPathToRootWithEduStanfordNlpLingIndexedWord_withJavaUtilList_(self, parent, used);
    if (path != nil) {
      [path addWithId:parent];
      (void) [used removeWithInt:[used size] - 1];
      return path;
    }
  }
  (void) [used removeWithInt:[used size] - 1];
  return nil;
}

void EduStanfordNlpSemgraphSemanticGraph_descendantsHelperWithEduStanfordNlpLingIndexedWord_withJavaUtilSet_(EduStanfordNlpSemgraphSemanticGraph *self, EduStanfordNlpLingIndexedWord *curr, id<JavaUtilSet> descendantSet) {
  if ([((id<JavaUtilSet>) nil_chk(descendantSet)) containsWithId:curr]) {
    return;
  }
  [descendantSet addWithId:curr];
  for (EduStanfordNlpLingIndexedWord * __strong child in nil_chk([self getChildrenWithEduStanfordNlpLingIndexedWord:curr])) {
    EduStanfordNlpSemgraphSemanticGraph_descendantsHelperWithEduStanfordNlpLingIndexedWord_withJavaUtilSet_(self, child, descendantSet);
  }
}

id<JavaUtilList> EduStanfordNlpSemgraphSemanticGraph_getVerticesWithoutParents(EduStanfordNlpSemgraphSemanticGraph *self) {
  id<JavaUtilList> result = new_JavaUtilArrayList_init();
  for (EduStanfordNlpLingIndexedWord * __strong v in nil_chk([self vertexSet])) {
    jint inDegree = [self inDegreeWithEduStanfordNlpLingIndexedWord:v];
    if (inDegree == 0) {
      [result addWithId:v];
    }
  }
  JavaUtilCollections_sortWithJavaUtilList_(result);
  return result;
}

void EduStanfordNlpSemgraphSemanticGraph_topologicalSortHelperWithEduStanfordNlpLingIndexedWord_withJavaUtilSet_withJavaUtilSet_withJavaUtilList_(EduStanfordNlpSemgraphSemanticGraph *self, EduStanfordNlpLingIndexedWord *vertex, id<JavaUtilSet> temporary, id<JavaUtilSet> permanent, id<JavaUtilList> result) {
  [((id<JavaUtilSet>) nil_chk(temporary)) addWithId:vertex];
  for (EduStanfordNlpSemgraphSemanticGraphEdge * __strong edge in nil_chk([self outgoingEdgeIterableWithEduStanfordNlpLingIndexedWord:vertex])) {
    EduStanfordNlpLingIndexedWord *target = [((EduStanfordNlpSemgraphSemanticGraphEdge *) nil_chk(edge)) getTarget];
    if ([((id<JavaUtilSet>) nil_chk(permanent)) containsWithId:target]) {
      continue;
    }
    if ([temporary containsWithId:target]) {
      @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$", @"This graph has cycles. Topological sort not possible: ", [self description]));
    }
    EduStanfordNlpSemgraphSemanticGraph_topologicalSortHelperWithEduStanfordNlpLingIndexedWord_withJavaUtilSet_withJavaUtilSet_withJavaUtilList_(self, target, temporary, permanent, result);
  }
  [((id<JavaUtilList>) nil_chk(result)) addWithId:vertex];
  [((id<JavaUtilSet>) nil_chk(permanent)) addWithId:vertex];
}

jboolean EduStanfordNlpSemgraphSemanticGraph_isNegatedVerbWithEduStanfordNlpLingIndexedWord_(EduStanfordNlpSemgraphSemanticGraph *self, EduStanfordNlpLingIndexedWord *vertex) {
  if (![self containsVertexWithEduStanfordNlpLingIndexedWord:vertex]) {
    @throw new_JavaLangIllegalArgumentException_init();
  }
  return ([((NSString *) nil_chk([((EduStanfordNlpLingIndexedWord *) nil_chk(vertex)) tag])) hasPrefix:@"VB"] && [self isNegatedVertexWithEduStanfordNlpLingIndexedWord:vertex]);
}

jboolean EduStanfordNlpSemgraphSemanticGraph_isDagHelperWithEduStanfordNlpLingIndexedWord_withJavaUtilSet_withJavaUtilSet_(EduStanfordNlpSemgraphSemanticGraph *self, EduStanfordNlpLingIndexedWord *current, id<JavaUtilSet> unused, id<JavaUtilSet> trail) {
  if ([((id<JavaUtilSet>) nil_chk(trail)) containsWithId:current]) {
    return true;
  }
  else if (![((id<JavaUtilSet>) nil_chk(unused)) containsWithId:current]) {
    return false;
  }
  [unused removeWithId:current];
  [trail addWithId:current];
  for (EduStanfordNlpLingIndexedWord * __strong child in nil_chk([self getChildrenWithEduStanfordNlpLingIndexedWord:current])) {
    jboolean result = EduStanfordNlpSemgraphSemanticGraph_isDagHelperWithEduStanfordNlpLingIndexedWord_withJavaUtilSet_withJavaUtilSet_(self, child, unused, trail);
    if (result) {
      return true;
    }
  }
  [trail removeWithId:current];
  return false;
}

void EduStanfordNlpSemgraphSemanticGraph_recToStringWithEduStanfordNlpLingIndexedWord_withEduStanfordNlpLingCoreLabel_OutputFormat_withJavaLangStringBuilder_withInt_withJavaUtilSet_(EduStanfordNlpSemgraphSemanticGraph *self, EduStanfordNlpLingIndexedWord *curr, EduStanfordNlpLingCoreLabel_OutputFormat *wordFormat, JavaLangStringBuilder *sb, jint offset, id<JavaUtilSet> used) {
  [((id<JavaUtilSet>) nil_chk(used)) addWithId:curr];
  id<JavaUtilList> edges = [self outgoingEdgeListWithEduStanfordNlpLingIndexedWord:curr];
  JavaUtilCollections_sortWithJavaUtilList_(edges);
  for (EduStanfordNlpSemgraphSemanticGraphEdge * __strong edge in nil_chk(edges)) {
    EduStanfordNlpLingIndexedWord *target = [((EduStanfordNlpSemgraphSemanticGraphEdge *) nil_chk(edge)) getTarget];
    (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:EduStanfordNlpSemgraphSemanticGraph_spaceWithInt_(2 * offset)])) appendWithNSString:@"-> "])) appendWithNSString:[((EduStanfordNlpLingIndexedWord *) nil_chk(target)) toStringWithEduStanfordNlpLingCoreLabel_OutputFormat:wordFormat]])) appendWithNSString:@" ("])) appendWithId:[edge getRelation]])) appendWithNSString:@")\n"];
    if (![used containsWithId:target]) {
      EduStanfordNlpSemgraphSemanticGraph_recToStringWithEduStanfordNlpLingIndexedWord_withEduStanfordNlpLingCoreLabel_OutputFormat_withJavaLangStringBuilder_withInt_withJavaUtilSet_(self, target, wordFormat, sb, offset + 1, used);
    }
  }
}

NSString *EduStanfordNlpSemgraphSemanticGraph_spaceWithInt_(jint width) {
  EduStanfordNlpSemgraphSemanticGraph_initialize();
  JavaLangStringBuilder *b = new_JavaLangStringBuilder_init();
  for (jint i = 0; i < width; i++) {
    (void) [b appendWithChar:' '];
  }
  return [b description];
}

void EduStanfordNlpSemgraphSemanticGraph_insertSpecificIntoListWithNSString_withEduStanfordNlpLingIndexedWord_withJavaUtilList_(EduStanfordNlpSemgraphSemanticGraph *self, NSString *specific, EduStanfordNlpLingIndexedWord *relnTgtNode, id<JavaUtilList> tgtList) {
  jint currIndex = [((id<JavaUtilList>) nil_chk(tgtList)) indexOfWithId:relnTgtNode];
  id<JavaUtilSet> descendants = [self descendantsWithEduStanfordNlpLingIndexedWord:relnTgtNode];
  EduStanfordNlpLingIndexedWord *specificNode = new_EduStanfordNlpLingIndexedWord_init();
  (void) [specificNode setWithIOSClass:EduStanfordNlpLingCoreAnnotations_LemmaAnnotation_class_() withId:specific];
  (void) [specificNode setWithIOSClass:EduStanfordNlpLingCoreAnnotations_TextAnnotation_class_() withId:specific];
  (void) [specificNode setWithIOSClass:EduStanfordNlpLingCoreAnnotations_OriginalTextAnnotation_class_() withId:specific];
  while ((currIndex >= 1) && [((id<JavaUtilSet>) nil_chk(descendants)) containsWithId:[tgtList getWithInt:currIndex - 1]]) {
    currIndex--;
  }
  [tgtList addWithInt:currIndex withId:specificNode];
}

NSString *EduStanfordNlpSemgraphSemanticGraph_toReadableString(EduStanfordNlpSemgraphSemanticGraph *self) {
  JavaLangStringBuilder *buf = new_JavaLangStringBuilder_init();
  (void) [buf appendWithNSString:NSString_formatWithNSString_withNSObjectArray_(@"%-20s%-20s%-20s%n", [IOSObjectArray newArrayWithObjects:(id[]){ @"dep", @"reln", @"gov" } count:3 type:NSObject_class_()])];
  (void) [buf appendWithNSString:NSString_formatWithNSString_withNSObjectArray_(@"%-20s%-20s%-20s%n", [IOSObjectArray newArrayWithObjects:(id[]){ @"---", @"----", @"---" } count:3 type:NSObject_class_()])];
  for (EduStanfordNlpLingIndexedWord * __strong root in nil_chk([self getRoots])) {
    (void) [buf appendWithNSString:NSString_formatWithNSString_withNSObjectArray_(@"%-20s%-20s%-20s%n", [IOSObjectArray newArrayWithObjects:(id[]){ [((EduStanfordNlpLingIndexedWord *) nil_chk(root)) toStringWithEduStanfordNlpLingCoreLabel_OutputFormat:JreLoadEnum(EduStanfordNlpLingCoreLabel_OutputFormat, VALUE_TAG_INDEX)], @"root", @"root" } count:3 type:NSObject_class_()])];
  }
  for (EduStanfordNlpSemgraphSemanticGraphEdge * __strong edge in nil_chk([self edgeListSorted])) {
    (void) [buf appendWithNSString:NSString_formatWithNSString_withNSObjectArray_(@"%-20s%-20s%-20s%n", [IOSObjectArray newArrayWithObjects:(id[]){ [((EduStanfordNlpLingIndexedWord *) nil_chk([((EduStanfordNlpSemgraphSemanticGraphEdge *) nil_chk(edge)) getTarget])) toStringWithEduStanfordNlpLingCoreLabel_OutputFormat:JreLoadEnum(EduStanfordNlpLingCoreLabel_OutputFormat, VALUE_TAG_INDEX)], [((EduStanfordNlpTreesGrammaticalRelation *) nil_chk([edge getRelation])) description], [((EduStanfordNlpLingIndexedWord *) nil_chk([edge getSource])) toStringWithEduStanfordNlpLingCoreLabel_OutputFormat:JreLoadEnum(EduStanfordNlpLingCoreLabel_OutputFormat, VALUE_TAG_INDEX)] } count:3 type:NSObject_class_()])];
  }
  return [buf description];
}

NSString *EduStanfordNlpSemgraphSemanticGraph_toXMLString(EduStanfordNlpSemgraphSemanticGraph *self) {
  JavaLangStringBuilder *buf = new_JavaLangStringBuilder_initWithNSString_(@"<dependencies style=\"typed\">\n");
  for (EduStanfordNlpSemgraphSemanticGraphEdge * __strong edge in nil_chk([self edgeListSorted])) {
    NSString *reln = [((EduStanfordNlpTreesGrammaticalRelation *) nil_chk([((EduStanfordNlpSemgraphSemanticGraphEdge *) nil_chk(edge)) getRelation])) description];
    NSString *gov = [((EduStanfordNlpLingIndexedWord *) nil_chk(([edge getSource]))) word];
    jint govIdx = [((EduStanfordNlpLingIndexedWord *) nil_chk(([edge getSource]))) index];
    NSString *dep = [((EduStanfordNlpLingIndexedWord *) nil_chk(([edge getTarget]))) word];
    jint depIdx = [((EduStanfordNlpLingIndexedWord *) nil_chk(([edge getTarget]))) index];
    (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"  <dep type=\""])) appendWithNSString:reln])) appendWithNSString:@"\">\n"];
    (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"    <governor idx=\""])) appendWithInt:govIdx])) appendWithNSString:@"\">"])) appendWithNSString:gov])) appendWithNSString:@"</governor>\n"];
    (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"    <dependent idx=\""])) appendWithInt:depIdx])) appendWithNSString:@"\">"])) appendWithNSString:dep])) appendWithNSString:@"</dependent>\n"];
    (void) [buf appendWithNSString:@"  </dep>\n"];
  }
  (void) [buf appendWithNSString:@"</dependencies>\n"];
  return [buf description];
}

void EduStanfordNlpSemgraphSemanticGraph_toCompactStringHelperWithEduStanfordNlpLingIndexedWord_withJavaLangStringBuilder_withJavaUtilSet_withBoolean_(EduStanfordNlpSemgraphSemanticGraph *self, EduStanfordNlpLingIndexedWord *node, JavaLangStringBuilder *sb, id<JavaUtilSet> used, jboolean showTags) {
  [((id<JavaUtilSet>) nil_chk(used)) addWithId:node];
  @try {
    jboolean isntLeaf = ([self outDegreeWithEduStanfordNlpLingIndexedWord:node] > 0);
    if (isntLeaf) {
      (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"["];
    }
    (void) [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:[((EduStanfordNlpLingIndexedWord *) nil_chk(node)) word]];
    if (showTags) {
      (void) [sb appendWithNSString:@"/"];
      (void) [sb appendWithNSString:[node tag]];
    }
    for (EduStanfordNlpSemgraphSemanticGraphEdge * __strong edge in nil_chk([self getOutEdgesSortedWithEduStanfordNlpLingIndexedWord:node])) {
      EduStanfordNlpLingIndexedWord *target = [((EduStanfordNlpSemgraphSemanticGraphEdge *) nil_chk(edge)) getTarget];
      (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@" "])) appendWithId:[edge getRelation]])) appendWithNSString:@">"];
      if (![used containsWithId:target]) {
        EduStanfordNlpSemgraphSemanticGraph_toCompactStringHelperWithEduStanfordNlpLingIndexedWord_withJavaLangStringBuilder_withJavaUtilSet_withBoolean_(self, target, sb, used, showTags);
      }
      else {
        (void) [sb appendWithNSString:[((EduStanfordNlpLingIndexedWord *) nil_chk(target)) word]];
        if (showTags) {
          (void) [sb appendWithNSString:@"/"];
          (void) [sb appendWithNSString:[target tag]];
        }
      }
    }
    if (isntLeaf) {
      (void) [sb appendWithNSString:@"]"];
    }
  }
  @catch (JavaLangIllegalArgumentException *e) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$@", @"WHOA!  SemanticGraph.toCompactStringHelper() ran into problems at node ", node)];
    @throw new_JavaLangIllegalArgumentException_initWithNSException_(e);
  }
}

EduStanfordNlpSemgraphSemanticGraph *EduStanfordNlpSemgraphSemanticGraph_valueOfWithNSString_(NSString *s) {
  EduStanfordNlpSemgraphSemanticGraph_initialize();
  return [(new_EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask_initWithNSString_(s)) parse];
}

void EduStanfordNlpSemgraphSemanticGraph_init(EduStanfordNlpSemgraphSemanticGraph *self) {
  NSObject_init(self);
  self->comments_ = new_JavaUtilLinkedList_init();
  self->graph_ = new_EduStanfordNlpGraphDirectedMultiGraph_initWithEduStanfordNlpUtilMapFactory_withEduStanfordNlpUtilMapFactory_(EduStanfordNlpSemgraphSemanticGraph_outerMapFactory, EduStanfordNlpSemgraphSemanticGraph_innerMapFactory);
  self->roots_ = [((EduStanfordNlpUtilMapFactory *) nil_chk(EduStanfordNlpSemgraphSemanticGraph_wordMapFactory)) newSet];
}

EduStanfordNlpSemgraphSemanticGraph *new_EduStanfordNlpSemgraphSemanticGraph_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpSemgraphSemanticGraph, init)
}

EduStanfordNlpSemgraphSemanticGraph *create_EduStanfordNlpSemgraphSemanticGraph_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpSemgraphSemanticGraph, init)
}

void EduStanfordNlpSemgraphSemanticGraph_initWithEduStanfordNlpSemgraphSemanticGraph_(EduStanfordNlpSemgraphSemanticGraph *self, EduStanfordNlpSemgraphSemanticGraph *g) {
  NSObject_init(self);
  self->comments_ = new_JavaUtilLinkedList_init();
  self->graph_ = new_EduStanfordNlpGraphDirectedMultiGraph_initWithEduStanfordNlpGraphDirectedMultiGraph_(((EduStanfordNlpSemgraphSemanticGraph *) nil_chk(g))->graph_);
  self->roots_ = [((EduStanfordNlpUtilMapFactory *) nil_chk(EduStanfordNlpSemgraphSemanticGraph_wordMapFactory)) newSetWithJavaUtilCollection:g->roots_];
}

EduStanfordNlpSemgraphSemanticGraph *new_EduStanfordNlpSemgraphSemanticGraph_initWithEduStanfordNlpSemgraphSemanticGraph_(EduStanfordNlpSemgraphSemanticGraph *g) {
  J2OBJC_NEW_IMPL(EduStanfordNlpSemgraphSemanticGraph, initWithEduStanfordNlpSemgraphSemanticGraph_, g)
}

EduStanfordNlpSemgraphSemanticGraph *create_EduStanfordNlpSemgraphSemanticGraph_initWithEduStanfordNlpSemgraphSemanticGraph_(EduStanfordNlpSemgraphSemanticGraph *g) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpSemgraphSemanticGraph, initWithEduStanfordNlpSemgraphSemanticGraph_, g)
}

void EduStanfordNlpSemgraphSemanticGraph_initWithEduStanfordNlpSemgraphSemanticGraph_withJavaUtilMap_(EduStanfordNlpSemgraphSemanticGraph *self, EduStanfordNlpSemgraphSemanticGraph *g, id<JavaUtilMap> prevToNewMap) {
  NSObject_init(self);
  self->comments_ = new_JavaUtilLinkedList_init();
  self->graph_ = new_EduStanfordNlpGraphDirectedMultiGraph_initWithEduStanfordNlpUtilMapFactory_withEduStanfordNlpUtilMapFactory_(EduStanfordNlpSemgraphSemanticGraph_outerMapFactory, EduStanfordNlpSemgraphSemanticGraph_innerMapFactory);
  if (prevToNewMap == nil) {
    prevToNewMap = [((EduStanfordNlpUtilMapFactory *) nil_chk(EduStanfordNlpSemgraphSemanticGraph_wordMapFactory)) newMap];
  }
  id<JavaUtilSet> vertexes = [((EduStanfordNlpSemgraphSemanticGraph *) nil_chk(g)) vertexSet];
  for (EduStanfordNlpLingIndexedWord * __strong vertex in nil_chk(vertexes)) {
    EduStanfordNlpLingIndexedWord *newVertex = new_EduStanfordNlpLingIndexedWord_initWithEduStanfordNlpLingLabel_(vertex);
    [newVertex setCopyCountWithInt:[((EduStanfordNlpLingIndexedWord *) nil_chk(vertex)) copyCount]];
    [self addVertexWithEduStanfordNlpLingIndexedWord:newVertex];
    (void) [((id<JavaUtilMap>) nil_chk(prevToNewMap)) putWithId:vertex withId:newVertex];
  }
  self->roots_ = [((EduStanfordNlpUtilMapFactory *) nil_chk(EduStanfordNlpSemgraphSemanticGraph_wordMapFactory)) newSet];
  for (EduStanfordNlpLingIndexedWord * __strong oldRoot in nil_chk([g getRoots])) {
    [((id<JavaUtilCollection>) nil_chk(self->roots_)) addWithId:[((id<JavaUtilMap>) nil_chk(prevToNewMap)) getWithId:oldRoot]];
  }
  for (EduStanfordNlpSemgraphSemanticGraphEdge * __strong edge in nil_chk([g edgeIterable])) {
    EduStanfordNlpLingIndexedWord *newGov = [((id<JavaUtilMap>) nil_chk(prevToNewMap)) getWithId:[((EduStanfordNlpSemgraphSemanticGraphEdge *) nil_chk(edge)) getGovernor]];
    EduStanfordNlpLingIndexedWord *newDep = [prevToNewMap getWithId:[edge getDependent]];
    (void) [self addEdgeWithEduStanfordNlpLingIndexedWord:newGov withEduStanfordNlpLingIndexedWord:newDep withEduStanfordNlpTreesGrammaticalRelation:[edge getRelation] withDouble:[edge getWeight] withBoolean:[edge isExtra]];
  }
}

EduStanfordNlpSemgraphSemanticGraph *new_EduStanfordNlpSemgraphSemanticGraph_initWithEduStanfordNlpSemgraphSemanticGraph_withJavaUtilMap_(EduStanfordNlpSemgraphSemanticGraph *g, id<JavaUtilMap> prevToNewMap) {
  J2OBJC_NEW_IMPL(EduStanfordNlpSemgraphSemanticGraph, initWithEduStanfordNlpSemgraphSemanticGraph_withJavaUtilMap_, g, prevToNewMap)
}

EduStanfordNlpSemgraphSemanticGraph *create_EduStanfordNlpSemgraphSemanticGraph_initWithEduStanfordNlpSemgraphSemanticGraph_withJavaUtilMap_(EduStanfordNlpSemgraphSemanticGraph *g, id<JavaUtilMap> prevToNewMap) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpSemgraphSemanticGraph, initWithEduStanfordNlpSemgraphSemanticGraph_withJavaUtilMap_, g, prevToNewMap)
}

void EduStanfordNlpSemgraphSemanticGraph_initWithJavaUtilCollection_(EduStanfordNlpSemgraphSemanticGraph *self, id<JavaUtilCollection> dependencies) {
  NSObject_init(self);
  self->comments_ = new_JavaUtilLinkedList_init();
  self->graph_ = new_EduStanfordNlpGraphDirectedMultiGraph_initWithEduStanfordNlpUtilMapFactory_withEduStanfordNlpUtilMapFactory_(EduStanfordNlpSemgraphSemanticGraph_outerMapFactory, EduStanfordNlpSemgraphSemanticGraph_innerMapFactory);
  self->roots_ = [((EduStanfordNlpUtilMapFactory *) nil_chk(EduStanfordNlpSemgraphSemanticGraph_wordMapFactory)) newSet];
  for (EduStanfordNlpTreesTypedDependency * __strong d in nil_chk(dependencies)) {
    EduStanfordNlpLingIndexedWord *gov = [((EduStanfordNlpTreesTypedDependency *) nil_chk(d)) gov];
    EduStanfordNlpLingIndexedWord *dep = [d dep];
    EduStanfordNlpTreesGrammaticalRelation *reln = [d reln];
    if (reln != JreLoadStatic(EduStanfordNlpTreesGrammaticalRelation, ROOT)) {
      (void) [self addEdgeWithEduStanfordNlpLingIndexedWord:gov withEduStanfordNlpLingIndexedWord:dep withEduStanfordNlpTreesGrammaticalRelation:reln withDouble:JavaLangDouble_NEGATIVE_INFINITY withBoolean:[d extra]];
    }
    else {
      [self addVertexWithEduStanfordNlpLingIndexedWord:dep];
      [((id<JavaUtilCollection>) nil_chk(self->roots_)) addWithId:dep];
    }
  }
}

EduStanfordNlpSemgraphSemanticGraph *new_EduStanfordNlpSemgraphSemanticGraph_initWithJavaUtilCollection_(id<JavaUtilCollection> dependencies) {
  J2OBJC_NEW_IMPL(EduStanfordNlpSemgraphSemanticGraph, initWithJavaUtilCollection_, dependencies)
}

EduStanfordNlpSemgraphSemanticGraph *create_EduStanfordNlpSemgraphSemanticGraph_initWithJavaUtilCollection_(id<JavaUtilCollection> dependencies) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpSemgraphSemanticGraph, initWithJavaUtilCollection_, dependencies)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpSemgraphSemanticGraph)

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpSemgraphSemanticGraph_OutputFormat)

EduStanfordNlpSemgraphSemanticGraph_OutputFormat *EduStanfordNlpSemgraphSemanticGraph_OutputFormat_values_[4];

@implementation EduStanfordNlpSemgraphSemanticGraph_OutputFormat

+ (IOSObjectArray *)values {
  return EduStanfordNlpSemgraphSemanticGraph_OutputFormat_values();
}

+ (EduStanfordNlpSemgraphSemanticGraph_OutputFormat *)valueOfWithNSString:(NSString *)name {
  return EduStanfordNlpSemgraphSemanticGraph_OutputFormat_valueOfWithNSString_(name);
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LEduStanfordNlpSemgraphSemanticGraph_OutputFormat;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpSemgraphSemanticGraph_OutputFormat;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "LIST", "LEduStanfordNlpSemgraphSemanticGraph_OutputFormat;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "XML", "LEduStanfordNlpSemgraphSemanticGraph_OutputFormat;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "READABLE", "LEduStanfordNlpSemgraphSemanticGraph_OutputFormat;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "RECURSIVE", "LEduStanfordNlpSemgraphSemanticGraph_OutputFormat;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(EduStanfordNlpSemgraphSemanticGraph_OutputFormat, LIST), &JreEnum(EduStanfordNlpSemgraphSemanticGraph_OutputFormat, XML), &JreEnum(EduStanfordNlpSemgraphSemanticGraph_OutputFormat, READABLE), &JreEnum(EduStanfordNlpSemgraphSemanticGraph_OutputFormat, RECURSIVE), "LEduStanfordNlpSemgraphSemanticGraph;", "Ljava/lang/Enum<Ledu/stanford/nlp/semgraph/SemanticGraph$OutputFormat;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpSemgraphSemanticGraph_OutputFormat = { "OutputFormat", "edu.stanford.nlp.semgraph", ptrTable, methods, fields, 7, 0x4019, 2, 4, 6, -1, -1, 7, -1 };
  return &_EduStanfordNlpSemgraphSemanticGraph_OutputFormat;
}

+ (void)initialize {
  if (self == [EduStanfordNlpSemgraphSemanticGraph_OutputFormat class]) {
    JreEnum(EduStanfordNlpSemgraphSemanticGraph_OutputFormat, LIST) = new_EduStanfordNlpSemgraphSemanticGraph_OutputFormat_initWithNSString_withInt_(@"LIST", 0);
    JreEnum(EduStanfordNlpSemgraphSemanticGraph_OutputFormat, XML) = new_EduStanfordNlpSemgraphSemanticGraph_OutputFormat_initWithNSString_withInt_(@"XML", 1);
    JreEnum(EduStanfordNlpSemgraphSemanticGraph_OutputFormat, READABLE) = new_EduStanfordNlpSemgraphSemanticGraph_OutputFormat_initWithNSString_withInt_(@"READABLE", 2);
    JreEnum(EduStanfordNlpSemgraphSemanticGraph_OutputFormat, RECURSIVE) = new_EduStanfordNlpSemgraphSemanticGraph_OutputFormat_initWithNSString_withInt_(@"RECURSIVE", 3);
    J2OBJC_SET_INITIALIZED(EduStanfordNlpSemgraphSemanticGraph_OutputFormat)
  }
}

@end

void EduStanfordNlpSemgraphSemanticGraph_OutputFormat_initWithNSString_withInt_(EduStanfordNlpSemgraphSemanticGraph_OutputFormat *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

EduStanfordNlpSemgraphSemanticGraph_OutputFormat *new_EduStanfordNlpSemgraphSemanticGraph_OutputFormat_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  J2OBJC_NEW_IMPL(EduStanfordNlpSemgraphSemanticGraph_OutputFormat, initWithNSString_withInt_, __name, __ordinal)
}

IOSObjectArray *EduStanfordNlpSemgraphSemanticGraph_OutputFormat_values() {
  EduStanfordNlpSemgraphSemanticGraph_OutputFormat_initialize();
  return [IOSObjectArray arrayWithObjects:EduStanfordNlpSemgraphSemanticGraph_OutputFormat_values_ count:4 type:EduStanfordNlpSemgraphSemanticGraph_OutputFormat_class_()];
}

EduStanfordNlpSemgraphSemanticGraph_OutputFormat *EduStanfordNlpSemgraphSemanticGraph_OutputFormat_valueOfWithNSString_(NSString *name) {
  EduStanfordNlpSemgraphSemanticGraph_OutputFormat_initialize();
  for (int i = 0; i < 4; i++) {
    EduStanfordNlpSemgraphSemanticGraph_OutputFormat *e = EduStanfordNlpSemgraphSemanticGraph_OutputFormat_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

EduStanfordNlpSemgraphSemanticGraph_OutputFormat *EduStanfordNlpSemgraphSemanticGraph_OutputFormat_fromOrdinal(NSUInteger ordinal) {
  EduStanfordNlpSemgraphSemanticGraph_OutputFormat_initialize();
  if (ordinal >= 4) {
    return nil;
  }
  return EduStanfordNlpSemgraphSemanticGraph_OutputFormat_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpSemgraphSemanticGraph_OutputFormat)

@implementation EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask

- (instancetype)initWithNSString:(NSString *)s {
  EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask_initWithNSString_(self, s);
  return self;
}

- (EduStanfordNlpSemgraphSemanticGraph *)parse {
  sg_ = new_EduStanfordNlpSemgraphSemanticGraph_init();
  @try {
    [self readWhiteSpace];
    if (!EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask_isLeftBracketWithChar_([self peek])) return nil;
    EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask_readDepWithEduStanfordNlpLingIndexedWord_withNSString_(self, nil, nil);
    return sg_;
  }
  @catch (EduStanfordNlpUtilStringParsingTask_ParserException *e) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$", @"SemanticGraphParser warning: ", [((EduStanfordNlpUtilStringParsingTask_ParserException *) nil_chk(e)) getMessage])];
    return nil;
  }
}

- (void)readDepWithEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)gov
                                    withNSString:(NSString *)reln {
  EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask_readDepWithEduStanfordNlpLingIndexedWord_withNSString_(self, gov, reln);
}

- (EduStanfordNlpLingIndexedWord *)makeVertexWithNSString:(NSString *)word {
  return EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask_makeVertexWithNSString_(self, word);
}

+ (EduStanfordNlpUtilPair *)readWordAndIndexWithNSString:(NSString *)word {
  return EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask_readWordAndIndexWithNSString_(word);
}

- (JavaLangInteger *)getNextFreeIndex {
  return EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask_getNextFreeIndex(self);
}

- (void)readLeftBracket {
  EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask_readLeftBracket(self);
}

- (void)readRightBracket {
  EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask_readRightBracket(self);
}

- (void)readRelnSeparator {
  EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask_readRelnSeparator(self);
}

+ (jboolean)isLeftBracketWithChar:(jchar)ch {
  return EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask_isLeftBracketWithChar_(ch);
}

+ (jboolean)isRightBracketWithChar:(jchar)ch {
  return EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask_isRightBracketWithChar_(ch);
}

+ (jboolean)isRelnSeparatorWithChar:(jchar)ch {
  return EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask_isRelnSeparatorWithChar_(ch);
}

- (jboolean)isPunctWithChar:(jchar)ch {
  return EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask_isLeftBracketWithChar_(ch) || EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask_isRightBracketWithChar_(ch) || EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask_isRelnSeparatorWithChar_(ch);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpSemgraphSemanticGraph;", 0x1, -1, -1, -1, 1, -1, -1 },
    { NULL, "V", 0x2, 2, 3, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingIndexedWord;", 0x2, 4, 0, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpUtilPair;", 0xa, 5, 0, -1, 6, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 7, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 9, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 10, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 11, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(parse);
  methods[2].selector = @selector(readDepWithEduStanfordNlpLingIndexedWord:withNSString:);
  methods[3].selector = @selector(makeVertexWithNSString:);
  methods[4].selector = @selector(readWordAndIndexWithNSString:);
  methods[5].selector = @selector(getNextFreeIndex);
  methods[6].selector = @selector(readLeftBracket);
  methods[7].selector = @selector(readRightBracket);
  methods[8].selector = @selector(readRelnSeparator);
  methods[9].selector = @selector(isLeftBracketWithChar:);
  methods[10].selector = @selector(isRightBracketWithChar:);
  methods[11].selector = @selector(isRelnSeparatorWithChar:);
  methods[12].selector = @selector(isPunctWithChar:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "sg_", "LEduStanfordNlpSemgraphSemanticGraph;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "indexesUsed_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x2, -1, -1, 12, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "()Ledu/stanford/nlp/semgraph/SemanticGraph;", "readDep", "LEduStanfordNlpLingIndexedWord;LNSString;", "makeVertex", "readWordAndIndex", "(Ljava/lang/String;)Ledu/stanford/nlp/util/Pair<Ljava/lang/String;Ljava/lang/Integer;>;", "isLeftBracket", "C", "isRightBracket", "isRelnSeparator", "isPunct", "Ljava/util/Set<Ljava/lang/Integer;>;", "LEduStanfordNlpSemgraphSemanticGraph;", "Ledu/stanford/nlp/util/StringParsingTask<Ledu/stanford/nlp/semgraph/SemanticGraph;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask = { "SemanticGraphParsingTask", "edu.stanford.nlp.semgraph", ptrTable, methods, fields, 7, 0xa, 13, 2, 13, -1, -1, 14, -1 };
  return &_EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask;
}

@end

void EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask_initWithNSString_(EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask *self, NSString *s) {
  EduStanfordNlpUtilStringParsingTask_initWithNSString_(self, s);
  self->indexesUsed_ = EduStanfordNlpUtilGenerics_newHashSet();
}

EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask *new_EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask_initWithNSString_(NSString *s) {
  J2OBJC_NEW_IMPL(EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask, initWithNSString_, s)
}

EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask *create_EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask_initWithNSString_(NSString *s) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask, initWithNSString_, s)
}

void EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask_readDepWithEduStanfordNlpLingIndexedWord_withNSString_(EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask *self, EduStanfordNlpLingIndexedWord *gov, NSString *reln) {
  [self readWhiteSpace];
  if (!EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask_isLeftBracketWithChar_([self peek])) {
    NSString *label = [self readName];
    EduStanfordNlpLingIndexedWord *dep = EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask_makeVertexWithNSString_(self, label);
    [((EduStanfordNlpSemgraphSemanticGraph *) nil_chk(self->sg_)) addVertexWithEduStanfordNlpLingIndexedWord:dep];
    if (gov == nil) [((id<JavaUtilCollection>) nil_chk(((EduStanfordNlpSemgraphSemanticGraph *) nil_chk(self->sg_))->roots_)) addWithId:dep];
    (void) [((EduStanfordNlpSemgraphSemanticGraph *) nil_chk(self->sg_)) addEdgeWithEduStanfordNlpLingIndexedWord:gov withEduStanfordNlpLingIndexedWord:dep withEduStanfordNlpTreesGrammaticalRelation:EduStanfordNlpTreesGrammaticalRelation_valueOfWithNSString_(reln) withDouble:JavaLangDouble_NEGATIVE_INFINITY withBoolean:false];
  }
  else {
    EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask_readLeftBracket(self);
    NSString *label = [self readName];
    EduStanfordNlpLingIndexedWord *dep = EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask_makeVertexWithNSString_(self, label);
    [((EduStanfordNlpSemgraphSemanticGraph *) nil_chk(self->sg_)) addVertexWithEduStanfordNlpLingIndexedWord:dep];
    if (gov == nil) [((id<JavaUtilCollection>) nil_chk(((EduStanfordNlpSemgraphSemanticGraph *) nil_chk(self->sg_))->roots_)) addWithId:dep];
    if (gov != nil && reln != nil) {
      (void) [((EduStanfordNlpSemgraphSemanticGraph *) nil_chk(self->sg_)) addEdgeWithEduStanfordNlpLingIndexedWord:gov withEduStanfordNlpLingIndexedWord:dep withEduStanfordNlpTreesGrammaticalRelation:EduStanfordNlpTreesGrammaticalRelation_valueOfWithNSString_(reln) withDouble:JavaLangDouble_NEGATIVE_INFINITY withBoolean:false];
    }
    [self readWhiteSpace];
    while (!EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask_isRightBracketWithChar_([self peek]) && !self->isEOF_) {
      reln = [self readName];
      EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask_readRelnSeparator(self);
      EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask_readDepWithEduStanfordNlpLingIndexedWord_withNSString_(self, dep, reln);
      [self readWhiteSpace];
    }
    EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask_readRightBracket(self);
  }
}

EduStanfordNlpLingIndexedWord *EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask_makeVertexWithNSString_(EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask *self, NSString *word) {
  JavaLangInteger *index;
  EduStanfordNlpUtilPair *wordAndIndex = EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask_readWordAndIndexWithNSString_(word);
  if (wordAndIndex != nil) {
    word = [wordAndIndex first];
    index = [wordAndIndex second];
  }
  else {
    index = EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask_getNextFreeIndex(self);
  }
  [((id<JavaUtilSet>) nil_chk(self->indexesUsed_)) addWithId:index];
  EduStanfordNlpLingIndexedWord *ifl = new_EduStanfordNlpLingIndexedWord_initWithNSString_withInt_withInt_(nil, 0, [((JavaLangInteger *) nil_chk(index)) intValue]);
  IOSObjectArray *wordAndTag = [((NSString *) nil_chk(word)) split:@"/"];
  (void) [ifl setWithIOSClass:EduStanfordNlpLingCoreAnnotations_TextAnnotation_class_() withId:IOSObjectArray_Get(nil_chk(wordAndTag), 0)];
  (void) [ifl setWithIOSClass:EduStanfordNlpLingCoreAnnotations_ValueAnnotation_class_() withId:IOSObjectArray_Get(wordAndTag, 0)];
  if (wordAndTag->size_ > 1) (void) [ifl setWithIOSClass:EduStanfordNlpLingCoreAnnotations_PartOfSpeechAnnotation_class_() withId:IOSObjectArray_Get(wordAndTag, 1)];
  return ifl;
}

EduStanfordNlpUtilPair *EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask_readWordAndIndexWithNSString_(NSString *word) {
  EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask_initialize();
  JavaUtilRegexMatcher *matcher = [((JavaUtilRegexPattern *) nil_chk(JreLoadStatic(EduStanfordNlpSemgraphSemanticGraph, WORD_AND_INDEX_PATTERN))) matcherWithJavaLangCharSequence:word];
  if (![((JavaUtilRegexMatcher *) nil_chk(matcher)) matches]) {
    return nil;
  }
  else {
    word = [matcher groupWithInt:1];
    JavaLangInteger *index = JavaLangInteger_valueOfWithNSString_([matcher groupWithInt:2]);
    return new_EduStanfordNlpUtilPair_initWithId_withId_(word, index);
  }
}

JavaLangInteger *EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask_getNextFreeIndex(EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask *self) {
  jint i = 0;
  while ([((id<JavaUtilSet>) nil_chk(self->indexesUsed_)) containsWithId:JavaLangInteger_valueOfWithInt_(i)]) i++;
  return JavaLangInteger_valueOfWithInt_(i);
}

void EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask_readLeftBracket(EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask *self) {
  [self readWhiteSpace];
  jchar ch = [self read];
  if (!EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask_isLeftBracketWithChar_(ch)) @throw new_EduStanfordNlpUtilStringParsingTask_ParserException_initWithNSString_(@"Expected left paren!");
}

void EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask_readRightBracket(EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask *self) {
  [self readWhiteSpace];
  jchar ch = [self read];
  if (!EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask_isRightBracketWithChar_(ch)) @throw new_EduStanfordNlpUtilStringParsingTask_ParserException_initWithNSString_(@"Expected right paren!");
}

void EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask_readRelnSeparator(EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask *self) {
  [self readWhiteSpace];
  if (EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask_isRelnSeparatorWithChar_([self peek])) [self read];
}

jboolean EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask_isLeftBracketWithChar_(jchar ch) {
  EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask_initialize();
  return ch == '[';
}

jboolean EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask_isRightBracketWithChar_(jchar ch) {
  EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask_initialize();
  return ch == ']';
}

jboolean EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask_isRelnSeparatorWithChar_(jchar ch) {
  EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask_initialize();
  return ch == '>';
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpSemgraphSemanticGraph_SemanticGraphParsingTask)
