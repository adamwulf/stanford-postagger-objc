//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/io/ExtensionFileFilter.java
//

#include "J2ObjC_source.h"
#include "edu/stanford/nlp/io/ExtensionFileFilter.h"
#include "java/io/File.h"

@interface EduStanfordNlpIoExtensionFileFilter () {
 @public
  NSString *extension_;
  jboolean recursively_;
}

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpIoExtensionFileFilter, extension_, NSString *)

@implementation EduStanfordNlpIoExtensionFileFilter

- (instancetype)initWithNSString:(NSString *)ext
                     withBoolean:(jboolean)recurse {
  EduStanfordNlpIoExtensionFileFilter_initWithNSString_withBoolean_(self, ext, recurse);
  return self;
}

- (instancetype)initWithNSString:(NSString *)ext {
  EduStanfordNlpIoExtensionFileFilter_initWithNSString_(self, ext);
  return self;
}

- (jboolean)acceptWithJavaIoFile:(JavaIoFile *)file {
  if ([((JavaIoFile *) nil_chk(file)) isDirectory]) {
    return recursively_;
  }
  else if (extension_ == nil) {
    return true;
  }
  else {
    return [((NSString *) nil_chk([file getName])) hasSuffix:extension_];
  }
}

- (NSString *)getDescription {
  NSString *ucExt = [((NSString *) nil_chk([((NSString *) nil_chk(extension_)) substring:1])) uppercaseString];
  return (JreStrcat("$$$C", ucExt, @" Files (*", extension_, ')'));
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withBoolean:);
  methods[1].selector = @selector(initWithNSString:);
  methods[2].selector = @selector(acceptWithJavaIoFile:);
  methods[3].selector = @selector(getDescription);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "extension_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "recursively_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;Z", "LNSString;", "accept", "LJavaIoFile;" };
  static const J2ObjcClassInfo _EduStanfordNlpIoExtensionFileFilter = { "ExtensionFileFilter", "edu.stanford.nlp.io", ptrTable, methods, fields, 7, 0x1, 4, 2, -1, -1, -1, -1, -1 };
  return &_EduStanfordNlpIoExtensionFileFilter;
}

@end

void EduStanfordNlpIoExtensionFileFilter_initWithNSString_withBoolean_(EduStanfordNlpIoExtensionFileFilter *self, NSString *ext, jboolean recurse) {
  NSObject_init(self);
  if (ext != nil) {
    if ([ext hasPrefix:@"."]) {
      self->extension_ = ext;
    }
    else {
      self->extension_ = JreStrcat("C$", '.', ext);
    }
  }
  self->recursively_ = recurse;
}

EduStanfordNlpIoExtensionFileFilter *new_EduStanfordNlpIoExtensionFileFilter_initWithNSString_withBoolean_(NSString *ext, jboolean recurse) {
  J2OBJC_NEW_IMPL(EduStanfordNlpIoExtensionFileFilter, initWithNSString_withBoolean_, ext, recurse)
}

EduStanfordNlpIoExtensionFileFilter *create_EduStanfordNlpIoExtensionFileFilter_initWithNSString_withBoolean_(NSString *ext, jboolean recurse) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpIoExtensionFileFilter, initWithNSString_withBoolean_, ext, recurse)
}

void EduStanfordNlpIoExtensionFileFilter_initWithNSString_(EduStanfordNlpIoExtensionFileFilter *self, NSString *ext) {
  EduStanfordNlpIoExtensionFileFilter_initWithNSString_withBoolean_(self, ext, true);
}

EduStanfordNlpIoExtensionFileFilter *new_EduStanfordNlpIoExtensionFileFilter_initWithNSString_(NSString *ext) {
  J2OBJC_NEW_IMPL(EduStanfordNlpIoExtensionFileFilter, initWithNSString_, ext)
}

EduStanfordNlpIoExtensionFileFilter *create_EduStanfordNlpIoExtensionFileFilter_initWithNSString_(NSString *ext) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpIoExtensionFileFilter, initWithNSString_, ext)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpIoExtensionFileFilter)
