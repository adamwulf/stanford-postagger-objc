//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/io/IOUtils.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_EduStanfordNlpIoIOUtils")
#ifdef RESTRICT_EduStanfordNlpIoIOUtils
#define INCLUDE_ALL_EduStanfordNlpIoIOUtils 0
#else
#define INCLUDE_ALL_EduStanfordNlpIoIOUtils 1
#endif
#undef RESTRICT_EduStanfordNlpIoIOUtils

#if !defined (EduStanfordNlpIoIOUtils_) && (INCLUDE_ALL_EduStanfordNlpIoIOUtils || defined(INCLUDE_EduStanfordNlpIoIOUtils))
#define EduStanfordNlpIoIOUtils_

@class IOSCharArray;
@class IOSClass;
@class IOSObjectArray;
@class JavaIoBufferedReader;
@class JavaIoDataInputStream;
@class JavaIoDataOutputStream;
@class JavaIoFile;
@class JavaIoInputStream;
@class JavaIoObjectInputStream;
@class JavaIoObjectOutputStream;
@class JavaIoOutputStream;
@class JavaIoPrintWriter;
@class JavaIoReader;
@class JavaIoWriter;
@class JavaNetURL;
@class JavaNetURLConnection;
@class JavaUtilLinkedList;
@class JavaUtilOptional;
@class JavaUtilRegexPattern;
@protocol JavaIoCloseable;
@protocol JavaLangIterable;
@protocol JavaUtilFunctionConsumer;
@protocol JavaUtilList;
@protocol JavaUtilMap;
@protocol JavaUtilSet;

@interface EduStanfordNlpIoIOUtils : NSObject

#pragma mark Public

+ (JavaIoFile *)backupFileWithJavaIoFile:(JavaIoFile *)file;

+ (NSString *)backupNameWithNSString:(NSString *)filename;

+ (void)closeIgnoringExceptionsWithJavaIoCloseable:(id<JavaIoCloseable>)c;

+ (void)consoleWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)callback;

+ (void)consoleWithNSString:(NSString *)prompt
withJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)callback;

+ (void)cpWithJavaIoFile:(JavaIoFile *)source
          withJavaIoFile:(JavaIoFile *)target;

+ (void)cpWithJavaIoFile:(JavaIoFile *)source
          withJavaIoFile:(JavaIoFile *)target
             withBoolean:(jboolean)recursive;

+ (jboolean)deleteDirRecursivelyWithJavaIoFile:(JavaIoFile *)dir;

+ (void)deleteRecursivelyWithJavaIoFile:(JavaIoFile *)file;

+ (JavaIoReader *)encodedInputStreamReaderWithJavaIoInputStream:(JavaIoInputStream *)stream
                                                   withNSString:(NSString *)encoding;

+ (JavaIoPrintWriter *)encodedOutputStreamPrintWriterWithJavaIoOutputStream:(JavaIoOutputStream *)stream
                                                               withNSString:(NSString *)encoding
                                                                withBoolean:(jboolean)autoFlush;

+ (JavaIoWriter *)encodedOutputStreamWriterWithJavaIoOutputStream:(JavaIoOutputStream *)stream
                                                     withNSString:(NSString *)encoding;

+ (JavaIoFile *)ensureDirWithJavaIoFile:(JavaIoFile *)tgtDir;

+ (jboolean)existsInClasspathOrFileSystemWithNSString:(NSString *)name;

+ (JavaIoBufferedReader *)getBufferedFileReaderWithNSString:(NSString *)filename;

+ (JavaIoBufferedReader *)getBufferedReaderFromClasspathOrFileSystemWithNSString:(NSString *)filename;

+ (JavaIoDataInputStream *)getDataInputStreamWithNSString:(NSString *)filenameUrlOrClassPath;

+ (JavaIoDataOutputStream *)getDataOutputStreamWithNSString:(NSString *)filename;

+ (NSString *)getExtensionWithNSString:(NSString *)fileName;

+ (JavaIoInputStream *)getFileInputStreamWithNSString:(NSString *)filename;

+ (JavaIoOutputStream *)getFileOutputStreamWithNSString:(NSString *)filename;

+ (JavaIoOutputStream *)getFileOutputStreamWithNSString:(NSString *)filename
                                            withBoolean:(jboolean)append;

+ (JavaIoInputStream *)getInputStreamFromURLOrClasspathOrFileSystemWithNSString:(NSString *)textFileOrUrl;

+ (JavaIoFile *)getJNLPLocalScratch;

+ (id<JavaLangIterable>)getLineIterableWithJavaIoReader:(JavaIoReader *)r
                                            withBoolean:(jboolean)includeEol;

+ (id<JavaLangIterable>)getLineIterableWithJavaIoReader:(JavaIoReader *)r
                                                withInt:(jint)bufferSize
                                            withBoolean:(jboolean)includeEol;

+ (JavaIoPrintWriter *)getPrintWriterWithJavaIoFile:(JavaIoFile *)textFile;

+ (JavaIoPrintWriter *)getPrintWriterWithJavaIoFile:(JavaIoFile *)textFile
                                       withNSString:(NSString *)encoding;

+ (JavaIoPrintWriter *)getPrintWriterWithNSString:(NSString *)filename;

+ (JavaIoPrintWriter *)getPrintWriterWithNSString:(NSString *)filename
                                     withNSString:(NSString *)encoding;

+ (JavaIoPrintWriter *)getPrintWriterIgnoringExceptionsWithNSString:(NSString *)filename;

+ (JavaIoPrintWriter *)getPrintWriterOrDieWithNSString:(NSString *)filename;

+ (NSString *)getUrlEncodingWithJavaNetURLConnection:(JavaNetURLConnection *)connection;

+ (JavaIoInputStream *)inputStreamFromFileWithJavaIoFile:(JavaIoFile *)file;

+ (id<JavaLangIterable>)iterFilesRecursiveWithJavaIoFile:(JavaIoFile *)dir;

+ (id<JavaLangIterable>)iterFilesRecursiveWithJavaIoFile:(JavaIoFile *)dir
                                withJavaUtilRegexPattern:(JavaUtilRegexPattern *)pattern;

+ (id<JavaLangIterable>)iterFilesRecursiveWithJavaIoFile:(JavaIoFile *)dir
                                            withNSString:(NSString *)ext;

+ (jint)lineCountWithNSString:(NSString *)textFileOrUrl;

+ (id<JavaUtilList>)linesFromFileWithNSString:(NSString *)filename;

+ (id<JavaUtilList>)linesFromFileWithNSString:(NSString *)filename
                                 withNSString:(NSString *)encoding;

+ (id<JavaUtilList>)linesFromFileWithNSString:(NSString *)filename
                                 withNSString:(NSString *)encoding
                                  withBoolean:(jboolean)ignoreHeader;

+ (NSString *)promptUserInputWithJavaUtilOptional:(JavaUtilOptional *)prompt;

+ (id<JavaUtilSet>)readColumnSetWithNSString:(NSString *)infile
                                     withInt:(jint)field;

+ (JavaUtilLinkedList *)readCSVStrictlyWithCharArray:(IOSCharArray *)csvContents
                                             withInt:(jint)numColumns;

+ (JavaUtilLinkedList *)readCSVStrictlyWithNSString:(NSString *)filename
                                            withInt:(jint)numColumns;

+ (id<JavaUtilList>)readCSVWithHeaderWithNSString:(NSString *)path;

+ (id<JavaUtilList>)readCSVWithHeaderWithNSString:(NSString *)path
                                         withChar:(jchar)quoteChar
                                         withChar:(jchar)escapeChar;

+ (JavaIoBufferedReader *)readerFromFileWithJavaIoFile:(JavaIoFile *)file;

+ (JavaIoBufferedReader *)readerFromFileWithJavaIoFile:(JavaIoFile *)file
                                          withNSString:(NSString *)encoding;

+ (JavaIoBufferedReader *)readerFromStdin;

+ (JavaIoBufferedReader *)readerFromStdinWithNSString:(NSString *)encoding;

+ (JavaIoBufferedReader *)readerFromStringWithNSString:(NSString *)textFileOrUrl;

+ (JavaIoBufferedReader *)readerFromStringWithNSString:(NSString *)textFileOrUrl
                                          withNSString:(NSString *)encoding;

+ (id<JavaLangIterable>)readLinesWithJavaIoFile:(JavaIoFile *)file;

+ (id<JavaLangIterable>)readLinesWithJavaIoFile:(JavaIoFile *)file
                                   withIOSClass:(IOSClass *)fileInputStreamWrapper;

+ (id<JavaLangIterable>)readLinesWithJavaIoFile:(JavaIoFile *)file
                                   withIOSClass:(IOSClass *)fileInputStreamWrapper
                                   withNSString:(NSString *)encoding;

+ (id<JavaLangIterable>)readLinesWithNSString:(NSString *)path;

+ (id<JavaLangIterable>)readLinesWithNSString:(NSString *)path
                                 withNSString:(NSString *)encoding;

+ (id<JavaUtilMap>)readMapWithNSString:(NSString *)filename;

+ (id)readObjectAnnouncingTimingFromURLOrClasspathOrFileSystemWithNSString:(NSString *)msg
                                                              withNSString:(NSString *)path;

+ (id<JavaUtilList>)readObjectFromColumnsWithIOSClass:(IOSClass *)objClass
                                         withNSString:(NSString *)filename
                                    withNSStringArray:(IOSObjectArray *)fieldNames
                                         withNSString:(NSString *)delimiter;

+ (id)readObjectFromFileWithJavaIoFile:(JavaIoFile *)file;

+ (id)readObjectFromFileWithNSString:(NSString *)filename;

+ (id)readObjectFromFileNoExceptionsWithJavaIoFile:(JavaIoFile *)file;

+ (id)readObjectFromObjectStreamWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)ois;

+ (id)readObjectFromURLOrClasspathOrFileSystemWithNSString:(NSString *)filename;

+ (JavaIoObjectInputStream *)readStreamFromStringWithNSString:(NSString *)filenameOrUrl;

+ (jboolean)renameToBackupNameWithJavaIoFile:(JavaIoFile *)file;

+ (NSString *)slurpFileWithJavaIoFile:(JavaIoFile *)file;

+ (NSString *)slurpFileWithJavaIoFile:(JavaIoFile *)file
                         withNSString:(NSString *)encoding;

+ (NSString *)slurpFileWithNSString:(NSString *)filename;

+ (NSString *)slurpFileWithNSString:(NSString *)filename
                       withNSString:(NSString *)encoding;

+ (NSString *)slurpFileNoExceptionsWithJavaIoFile:(JavaIoFile *)file;

+ (NSString *)slurpFileNoExceptionsWithNSString:(NSString *)filename;

+ (NSString *)slurpFileNoExceptionsWithNSString:(NSString *)filename
                                   withNSString:(NSString *)encoding;

+ (NSString *)slurpGZippedFileWithJavaIoFile:(JavaIoFile *)file;

+ (NSString *)slurpGZippedFileWithNSString:(NSString *)filename;

+ (NSString *)slurpInputStreamWithJavaIoInputStream:(JavaIoInputStream *)input
                                       withNSString:(NSString *)encoding;

+ (NSString *)slurpReaderWithJavaIoReader:(JavaIoReader *)reader;

+ (NSString *)slurpURLWithNSString:(NSString *)path;

+ (NSString *)slurpURLWithJavaNetURL:(JavaNetURL *)u;

+ (NSString *)slurpURLWithJavaNetURL:(JavaNetURL *)u
                        withNSString:(NSString *)encoding;

+ (NSString *)slurpURLNoExceptionsWithNSString:(NSString *)path;

+ (NSString *)slurpURLNoExceptionsWithJavaNetURL:(JavaNetURL *)u;

+ (NSString *)slurpURLNoExceptionsWithJavaNetURL:(JavaNetURL *)u
                                    withNSString:(NSString *)encoding;

+ (NSString *)stringFromFileWithNSString:(NSString *)filename;

+ (NSString *)stringFromFileWithNSString:(NSString *)filename
                            withNSString:(NSString *)encoding;

+ (IOSObjectArray *)tailWithJavaIoFile:(JavaIoFile *)f
                               withInt:(jint)n;

+ (IOSObjectArray *)tailWithJavaIoFile:(JavaIoFile *)f
                               withInt:(jint)n
                          withNSString:(NSString *)encoding;

+ (JavaIoFile *)writeObjectToFileWithId:(id)o
                         withJavaIoFile:(JavaIoFile *)file;

+ (JavaIoFile *)writeObjectToFileWithId:(id)o
                         withJavaIoFile:(JavaIoFile *)file
                            withBoolean:(jboolean)append;

+ (JavaIoFile *)writeObjectToFileWithId:(id)o
                           withNSString:(NSString *)filename;

+ (JavaIoFile *)writeObjectToFileNoExceptionsWithId:(id)o
                                       withNSString:(NSString *)filename;

+ (JavaIoFile *)writeObjectToTempFileWithId:(id)o
                               withNSString:(NSString *)filename;

+ (JavaIoFile *)writeObjectToTempFileNoExceptionsWithId:(id)o
                                           withNSString:(NSString *)filename;

+ (JavaIoObjectOutputStream *)writeStreamFromStringWithNSString:(NSString *)serializePath;

+ (void)writeStreamToStreamWithJavaIoInputStream:(JavaIoInputStream *)input
                          withJavaIoOutputStream:(JavaIoOutputStream *)output;

+ (void)writeStringToFileWithNSString:(NSString *)contents
                         withNSString:(NSString *)path
                         withNSString:(NSString *)encoding;

+ (void)writeStringToFileNoExceptionsWithNSString:(NSString *)contents
                                     withNSString:(NSString *)path
                                     withNSString:(NSString *)encoding;

+ (void)writeStringToTempFileWithNSString:(NSString *)contents
                             withNSString:(NSString *)path;

+ (JavaIoFile *)writeStringToTempFileWithNSString:(NSString *)contents
                                     withNSString:(NSString *)path
                                     withNSString:(NSString *)encoding;

+ (void)writeStringToTempFileNoExceptionsWithNSString:(NSString *)contents
                                         withNSString:(NSString *)path;

+ (JavaIoFile *)writeStringToTempFileNoExceptionsWithNSString:(NSString *)contents
                                                 withNSString:(NSString *)path
                                                 withNSString:(NSString *)encoding;

@end

J2OBJC_STATIC_INIT(EduStanfordNlpIoIOUtils)

inline NSString *EduStanfordNlpIoIOUtils_get_eolChar();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *EduStanfordNlpIoIOUtils_eolChar;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpIoIOUtils, eolChar, NSString *)

inline NSString *EduStanfordNlpIoIOUtils_get_defaultEncoding();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *EduStanfordNlpIoIOUtils_defaultEncoding;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpIoIOUtils, defaultEncoding, NSString *)

FOUNDATION_EXPORT JavaIoFile *EduStanfordNlpIoIOUtils_writeObjectToFileWithId_withNSString_(id o, NSString *filename);

FOUNDATION_EXPORT JavaIoFile *EduStanfordNlpIoIOUtils_writeObjectToFileWithId_withJavaIoFile_(id o, JavaIoFile *file);

FOUNDATION_EXPORT JavaIoFile *EduStanfordNlpIoIOUtils_writeObjectToFileWithId_withJavaIoFile_withBoolean_(id o, JavaIoFile *file, jboolean append);

FOUNDATION_EXPORT JavaIoFile *EduStanfordNlpIoIOUtils_writeObjectToFileNoExceptionsWithId_withNSString_(id o, NSString *filename);

FOUNDATION_EXPORT JavaIoFile *EduStanfordNlpIoIOUtils_writeObjectToTempFileWithId_withNSString_(id o, NSString *filename);

FOUNDATION_EXPORT JavaIoFile *EduStanfordNlpIoIOUtils_writeObjectToTempFileNoExceptionsWithId_withNSString_(id o, NSString *filename);

FOUNDATION_EXPORT void EduStanfordNlpIoIOUtils_writeStringToFileWithNSString_withNSString_withNSString_(NSString *contents, NSString *path, NSString *encoding);

FOUNDATION_EXPORT void EduStanfordNlpIoIOUtils_writeStringToFileNoExceptionsWithNSString_withNSString_withNSString_(NSString *contents, NSString *path, NSString *encoding);

FOUNDATION_EXPORT JavaIoFile *EduStanfordNlpIoIOUtils_writeStringToTempFileWithNSString_withNSString_withNSString_(NSString *contents, NSString *path, NSString *encoding);

FOUNDATION_EXPORT void EduStanfordNlpIoIOUtils_writeStringToTempFileWithNSString_withNSString_(NSString *contents, NSString *path);

FOUNDATION_EXPORT JavaIoFile *EduStanfordNlpIoIOUtils_writeStringToTempFileNoExceptionsWithNSString_withNSString_withNSString_(NSString *contents, NSString *path, NSString *encoding);

FOUNDATION_EXPORT void EduStanfordNlpIoIOUtils_writeStringToTempFileNoExceptionsWithNSString_withNSString_(NSString *contents, NSString *path);

FOUNDATION_EXPORT id EduStanfordNlpIoIOUtils_readObjectFromFileWithJavaIoFile_(JavaIoFile *file);

FOUNDATION_EXPORT JavaIoDataInputStream *EduStanfordNlpIoIOUtils_getDataInputStreamWithNSString_(NSString *filenameUrlOrClassPath);

FOUNDATION_EXPORT JavaIoDataOutputStream *EduStanfordNlpIoIOUtils_getDataOutputStreamWithNSString_(NSString *filename);

FOUNDATION_EXPORT id EduStanfordNlpIoIOUtils_readObjectFromURLOrClasspathOrFileSystemWithNSString_(NSString *filename);

FOUNDATION_EXPORT id EduStanfordNlpIoIOUtils_readObjectAnnouncingTimingFromURLOrClasspathOrFileSystemWithNSString_withNSString_(NSString *msg, NSString *path);

FOUNDATION_EXPORT id EduStanfordNlpIoIOUtils_readObjectFromObjectStreamWithJavaIoObjectInputStream_(JavaIoObjectInputStream *ois);

FOUNDATION_EXPORT id EduStanfordNlpIoIOUtils_readObjectFromFileWithNSString_(NSString *filename);

FOUNDATION_EXPORT id EduStanfordNlpIoIOUtils_readObjectFromFileNoExceptionsWithJavaIoFile_(JavaIoFile *file);

FOUNDATION_EXPORT jint EduStanfordNlpIoIOUtils_lineCountWithNSString_(NSString *textFileOrUrl);

FOUNDATION_EXPORT JavaIoObjectOutputStream *EduStanfordNlpIoIOUtils_writeStreamFromStringWithNSString_(NSString *serializePath);

FOUNDATION_EXPORT JavaIoObjectInputStream *EduStanfordNlpIoIOUtils_readStreamFromStringWithNSString_(NSString *filenameOrUrl);

FOUNDATION_EXPORT jboolean EduStanfordNlpIoIOUtils_existsInClasspathOrFileSystemWithNSString_(NSString *name);

FOUNDATION_EXPORT JavaIoInputStream *EduStanfordNlpIoIOUtils_getInputStreamFromURLOrClasspathOrFileSystemWithNSString_(NSString *textFileOrUrl);

FOUNDATION_EXPORT JavaIoInputStream *EduStanfordNlpIoIOUtils_inputStreamFromFileWithJavaIoFile_(JavaIoFile *file);

FOUNDATION_EXPORT JavaIoBufferedReader *EduStanfordNlpIoIOUtils_readerFromFileWithJavaIoFile_(JavaIoFile *file);

FOUNDATION_EXPORT JavaIoBufferedReader *EduStanfordNlpIoIOUtils_readerFromFileWithJavaIoFile_withNSString_(JavaIoFile *file, NSString *encoding);

FOUNDATION_EXPORT JavaIoBufferedReader *EduStanfordNlpIoIOUtils_readerFromStdin();

FOUNDATION_EXPORT JavaIoBufferedReader *EduStanfordNlpIoIOUtils_readerFromStdinWithNSString_(NSString *encoding);

FOUNDATION_EXPORT JavaIoBufferedReader *EduStanfordNlpIoIOUtils_readerFromStringWithNSString_(NSString *textFileOrUrl);

FOUNDATION_EXPORT JavaIoBufferedReader *EduStanfordNlpIoIOUtils_readerFromStringWithNSString_withNSString_(NSString *textFileOrUrl, NSString *encoding);

FOUNDATION_EXPORT id<JavaLangIterable> EduStanfordNlpIoIOUtils_readLinesWithNSString_(NSString *path);

FOUNDATION_EXPORT id<JavaLangIterable> EduStanfordNlpIoIOUtils_readLinesWithNSString_withNSString_(NSString *path, NSString *encoding);

FOUNDATION_EXPORT id<JavaLangIterable> EduStanfordNlpIoIOUtils_readLinesWithJavaIoFile_(JavaIoFile *file);

FOUNDATION_EXPORT id<JavaLangIterable> EduStanfordNlpIoIOUtils_readLinesWithJavaIoFile_withIOSClass_(JavaIoFile *file, IOSClass *fileInputStreamWrapper);

FOUNDATION_EXPORT id<JavaLangIterable> EduStanfordNlpIoIOUtils_readLinesWithJavaIoFile_withIOSClass_withNSString_(JavaIoFile *file, IOSClass *fileInputStreamWrapper, NSString *encoding);

FOUNDATION_EXPORT id<JavaLangIterable> EduStanfordNlpIoIOUtils_getLineIterableWithJavaIoReader_withBoolean_(JavaIoReader *r, jboolean includeEol);

FOUNDATION_EXPORT id<JavaLangIterable> EduStanfordNlpIoIOUtils_getLineIterableWithJavaIoReader_withInt_withBoolean_(JavaIoReader *r, jint bufferSize, jboolean includeEol);

FOUNDATION_EXPORT void EduStanfordNlpIoIOUtils_closeIgnoringExceptionsWithJavaIoCloseable_(id<JavaIoCloseable> c);

FOUNDATION_EXPORT id<JavaLangIterable> EduStanfordNlpIoIOUtils_iterFilesRecursiveWithJavaIoFile_(JavaIoFile *dir);

FOUNDATION_EXPORT id<JavaLangIterable> EduStanfordNlpIoIOUtils_iterFilesRecursiveWithJavaIoFile_withNSString_(JavaIoFile *dir, NSString *ext);

FOUNDATION_EXPORT id<JavaLangIterable> EduStanfordNlpIoIOUtils_iterFilesRecursiveWithJavaIoFile_withJavaUtilRegexPattern_(JavaIoFile *dir, JavaUtilRegexPattern *pattern);

FOUNDATION_EXPORT NSString *EduStanfordNlpIoIOUtils_slurpFileWithJavaIoFile_(JavaIoFile *file);

FOUNDATION_EXPORT NSString *EduStanfordNlpIoIOUtils_slurpFileWithJavaIoFile_withNSString_(JavaIoFile *file, NSString *encoding);

FOUNDATION_EXPORT NSString *EduStanfordNlpIoIOUtils_slurpGZippedFileWithNSString_(NSString *filename);

FOUNDATION_EXPORT NSString *EduStanfordNlpIoIOUtils_slurpGZippedFileWithJavaIoFile_(JavaIoFile *file);

FOUNDATION_EXPORT NSString *EduStanfordNlpIoIOUtils_slurpFileWithNSString_withNSString_(NSString *filename, NSString *encoding);

FOUNDATION_EXPORT NSString *EduStanfordNlpIoIOUtils_slurpFileNoExceptionsWithNSString_withNSString_(NSString *filename, NSString *encoding);

FOUNDATION_EXPORT NSString *EduStanfordNlpIoIOUtils_slurpFileWithNSString_(NSString *filename);

FOUNDATION_EXPORT NSString *EduStanfordNlpIoIOUtils_slurpURLNoExceptionsWithJavaNetURL_withNSString_(JavaNetURL *u, NSString *encoding);

FOUNDATION_EXPORT NSString *EduStanfordNlpIoIOUtils_slurpURLWithJavaNetURL_withNSString_(JavaNetURL *u, NSString *encoding);

FOUNDATION_EXPORT NSString *EduStanfordNlpIoIOUtils_getUrlEncodingWithJavaNetURLConnection_(JavaNetURLConnection *connection);

FOUNDATION_EXPORT NSString *EduStanfordNlpIoIOUtils_slurpURLWithJavaNetURL_(JavaNetURL *u);

FOUNDATION_EXPORT NSString *EduStanfordNlpIoIOUtils_slurpURLNoExceptionsWithJavaNetURL_(JavaNetURL *u);

FOUNDATION_EXPORT NSString *EduStanfordNlpIoIOUtils_slurpURLWithNSString_(NSString *path);

FOUNDATION_EXPORT NSString *EduStanfordNlpIoIOUtils_slurpURLNoExceptionsWithNSString_(NSString *path);

FOUNDATION_EXPORT NSString *EduStanfordNlpIoIOUtils_slurpFileNoExceptionsWithJavaIoFile_(JavaIoFile *file);

FOUNDATION_EXPORT NSString *EduStanfordNlpIoIOUtils_slurpFileNoExceptionsWithNSString_(NSString *filename);

FOUNDATION_EXPORT NSString *EduStanfordNlpIoIOUtils_slurpReaderWithJavaIoReader_(JavaIoReader *reader);

FOUNDATION_EXPORT NSString *EduStanfordNlpIoIOUtils_slurpInputStreamWithJavaIoInputStream_withNSString_(JavaIoInputStream *input, NSString *encoding);

FOUNDATION_EXPORT void EduStanfordNlpIoIOUtils_writeStreamToStreamWithJavaIoInputStream_withJavaIoOutputStream_(JavaIoInputStream *input, JavaIoOutputStream *output);

FOUNDATION_EXPORT id<JavaUtilList> EduStanfordNlpIoIOUtils_readCSVWithHeaderWithNSString_withChar_withChar_(NSString *path, jchar quoteChar, jchar escapeChar);

FOUNDATION_EXPORT id<JavaUtilList> EduStanfordNlpIoIOUtils_readCSVWithHeaderWithNSString_(NSString *path);

FOUNDATION_EXPORT JavaUtilLinkedList *EduStanfordNlpIoIOUtils_readCSVStrictlyWithCharArray_withInt_(IOSCharArray *csvContents, jint numColumns);

FOUNDATION_EXPORT JavaUtilLinkedList *EduStanfordNlpIoIOUtils_readCSVStrictlyWithNSString_withInt_(NSString *filename, jint numColumns);

FOUNDATION_EXPORT JavaIoInputStream *EduStanfordNlpIoIOUtils_getFileInputStreamWithNSString_(NSString *filename);

FOUNDATION_EXPORT JavaIoOutputStream *EduStanfordNlpIoIOUtils_getFileOutputStreamWithNSString_(NSString *filename);

FOUNDATION_EXPORT JavaIoOutputStream *EduStanfordNlpIoIOUtils_getFileOutputStreamWithNSString_withBoolean_(NSString *filename, jboolean append);

FOUNDATION_EXPORT JavaIoBufferedReader *EduStanfordNlpIoIOUtils_getBufferedFileReaderWithNSString_(NSString *filename);

FOUNDATION_EXPORT JavaIoBufferedReader *EduStanfordNlpIoIOUtils_getBufferedReaderFromClasspathOrFileSystemWithNSString_(NSString *filename);

FOUNDATION_EXPORT JavaIoPrintWriter *EduStanfordNlpIoIOUtils_getPrintWriterWithJavaIoFile_(JavaIoFile *textFile);

FOUNDATION_EXPORT JavaIoPrintWriter *EduStanfordNlpIoIOUtils_getPrintWriterWithJavaIoFile_withNSString_(JavaIoFile *textFile, NSString *encoding);

FOUNDATION_EXPORT JavaIoPrintWriter *EduStanfordNlpIoIOUtils_getPrintWriterWithNSString_(NSString *filename);

FOUNDATION_EXPORT JavaIoPrintWriter *EduStanfordNlpIoIOUtils_getPrintWriterIgnoringExceptionsWithNSString_(NSString *filename);

FOUNDATION_EXPORT JavaIoPrintWriter *EduStanfordNlpIoIOUtils_getPrintWriterOrDieWithNSString_(NSString *filename);

FOUNDATION_EXPORT JavaIoPrintWriter *EduStanfordNlpIoIOUtils_getPrintWriterWithNSString_withNSString_(NSString *filename, NSString *encoding);

FOUNDATION_EXPORT id<JavaUtilSet> EduStanfordNlpIoIOUtils_readColumnSetWithNSString_withInt_(NSString *infile, jint field);

FOUNDATION_EXPORT id<JavaUtilList> EduStanfordNlpIoIOUtils_readObjectFromColumnsWithIOSClass_withNSString_withNSStringArray_withNSString_(IOSClass *objClass, NSString *filename, IOSObjectArray *fieldNames, NSString *delimiter);

FOUNDATION_EXPORT id<JavaUtilMap> EduStanfordNlpIoIOUtils_readMapWithNSString_(NSString *filename);

FOUNDATION_EXPORT NSString *EduStanfordNlpIoIOUtils_stringFromFileWithNSString_(NSString *filename);

FOUNDATION_EXPORT NSString *EduStanfordNlpIoIOUtils_stringFromFileWithNSString_withNSString_(NSString *filename, NSString *encoding);

FOUNDATION_EXPORT id<JavaUtilList> EduStanfordNlpIoIOUtils_linesFromFileWithNSString_(NSString *filename);

FOUNDATION_EXPORT id<JavaUtilList> EduStanfordNlpIoIOUtils_linesFromFileWithNSString_withNSString_(NSString *filename, NSString *encoding);

FOUNDATION_EXPORT id<JavaUtilList> EduStanfordNlpIoIOUtils_linesFromFileWithNSString_withNSString_withBoolean_(NSString *filename, NSString *encoding, jboolean ignoreHeader);

FOUNDATION_EXPORT NSString *EduStanfordNlpIoIOUtils_backupNameWithNSString_(NSString *filename);

FOUNDATION_EXPORT JavaIoFile *EduStanfordNlpIoIOUtils_backupFileWithJavaIoFile_(JavaIoFile *file);

FOUNDATION_EXPORT jboolean EduStanfordNlpIoIOUtils_renameToBackupNameWithJavaIoFile_(JavaIoFile *file);

FOUNDATION_EXPORT JavaIoFile *EduStanfordNlpIoIOUtils_getJNLPLocalScratch();

FOUNDATION_EXPORT JavaIoFile *EduStanfordNlpIoIOUtils_ensureDirWithJavaIoFile_(JavaIoFile *tgtDir);

FOUNDATION_EXPORT jboolean EduStanfordNlpIoIOUtils_deleteDirRecursivelyWithJavaIoFile_(JavaIoFile *dir);

FOUNDATION_EXPORT NSString *EduStanfordNlpIoIOUtils_getExtensionWithNSString_(NSString *fileName);

FOUNDATION_EXPORT JavaIoReader *EduStanfordNlpIoIOUtils_encodedInputStreamReaderWithJavaIoInputStream_withNSString_(JavaIoInputStream *stream, NSString *encoding);

FOUNDATION_EXPORT JavaIoWriter *EduStanfordNlpIoIOUtils_encodedOutputStreamWriterWithJavaIoOutputStream_withNSString_(JavaIoOutputStream *stream, NSString *encoding);

FOUNDATION_EXPORT JavaIoPrintWriter *EduStanfordNlpIoIOUtils_encodedOutputStreamPrintWriterWithJavaIoOutputStream_withNSString_withBoolean_(JavaIoOutputStream *stream, NSString *encoding, jboolean autoFlush);

FOUNDATION_EXPORT void EduStanfordNlpIoIOUtils_cpWithJavaIoFile_withJavaIoFile_withBoolean_(JavaIoFile *source, JavaIoFile *target, jboolean recursive);

FOUNDATION_EXPORT void EduStanfordNlpIoIOUtils_cpWithJavaIoFile_withJavaIoFile_(JavaIoFile *source, JavaIoFile *target);

FOUNDATION_EXPORT IOSObjectArray *EduStanfordNlpIoIOUtils_tailWithJavaIoFile_withInt_withNSString_(JavaIoFile *f, jint n, NSString *encoding);

FOUNDATION_EXPORT IOSObjectArray *EduStanfordNlpIoIOUtils_tailWithJavaIoFile_withInt_(JavaIoFile *f, jint n);

FOUNDATION_EXPORT void EduStanfordNlpIoIOUtils_deleteRecursivelyWithJavaIoFile_(JavaIoFile *file);

FOUNDATION_EXPORT void EduStanfordNlpIoIOUtils_consoleWithNSString_withJavaUtilFunctionConsumer_(NSString *prompt, id<JavaUtilFunctionConsumer> callback);

FOUNDATION_EXPORT NSString *EduStanfordNlpIoIOUtils_promptUserInputWithJavaUtilOptional_(JavaUtilOptional *prompt);

FOUNDATION_EXPORT void EduStanfordNlpIoIOUtils_consoleWithJavaUtilFunctionConsumer_(id<JavaUtilFunctionConsumer> callback);

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpIoIOUtils)

#endif

#if !defined (EduStanfordNlpIoIOUtils_GetLinesIterable_) && (INCLUDE_ALL_EduStanfordNlpIoIOUtils || defined(INCLUDE_EduStanfordNlpIoIOUtils_GetLinesIterable))
#define EduStanfordNlpIoIOUtils_GetLinesIterable_

#define RESTRICT_JavaLangIterable 1
#define INCLUDE_JavaLangIterable 1
#include "java/lang/Iterable.h"

@class IOSClass;
@class JavaIoFile;
@protocol JavaUtilFunctionConsumer;
@protocol JavaUtilIterator;
@protocol JavaUtilSpliterator;

@interface EduStanfordNlpIoIOUtils_GetLinesIterable : NSObject < JavaLangIterable > {
 @public
  JavaIoFile *file_;
  NSString *path_;
  IOSClass *fileInputStreamWrapper_;
  NSString *encoding_;
}

#pragma mark Public

- (id<JavaUtilIterator>)iterator;

#pragma mark Package-Private

- (instancetype)initWithJavaIoFile:(JavaIoFile *)file
                      withIOSClass:(IOSClass *)fileInputStreamWrapper
                      withNSString:(NSString *)encoding;

- (instancetype)initWithNSString:(NSString *)path
                    withIOSClass:(IOSClass *)fileInputStreamWrapper
                    withNSString:(NSString *)encoding;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpIoIOUtils_GetLinesIterable)

J2OBJC_FIELD_SETTER(EduStanfordNlpIoIOUtils_GetLinesIterable, file_, JavaIoFile *)
J2OBJC_FIELD_SETTER(EduStanfordNlpIoIOUtils_GetLinesIterable, path_, NSString *)
J2OBJC_FIELD_SETTER(EduStanfordNlpIoIOUtils_GetLinesIterable, fileInputStreamWrapper_, IOSClass *)
J2OBJC_FIELD_SETTER(EduStanfordNlpIoIOUtils_GetLinesIterable, encoding_, NSString *)

FOUNDATION_EXPORT void EduStanfordNlpIoIOUtils_GetLinesIterable_initWithJavaIoFile_withIOSClass_withNSString_(EduStanfordNlpIoIOUtils_GetLinesIterable *self, JavaIoFile *file, IOSClass *fileInputStreamWrapper, NSString *encoding);

FOUNDATION_EXPORT EduStanfordNlpIoIOUtils_GetLinesIterable *new_EduStanfordNlpIoIOUtils_GetLinesIterable_initWithJavaIoFile_withIOSClass_withNSString_(JavaIoFile *file, IOSClass *fileInputStreamWrapper, NSString *encoding) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EduStanfordNlpIoIOUtils_GetLinesIterable *create_EduStanfordNlpIoIOUtils_GetLinesIterable_initWithJavaIoFile_withIOSClass_withNSString_(JavaIoFile *file, IOSClass *fileInputStreamWrapper, NSString *encoding);

FOUNDATION_EXPORT void EduStanfordNlpIoIOUtils_GetLinesIterable_initWithNSString_withIOSClass_withNSString_(EduStanfordNlpIoIOUtils_GetLinesIterable *self, NSString *path, IOSClass *fileInputStreamWrapper, NSString *encoding);

FOUNDATION_EXPORT EduStanfordNlpIoIOUtils_GetLinesIterable *new_EduStanfordNlpIoIOUtils_GetLinesIterable_initWithNSString_withIOSClass_withNSString_(NSString *path, IOSClass *fileInputStreamWrapper, NSString *encoding) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EduStanfordNlpIoIOUtils_GetLinesIterable *create_EduStanfordNlpIoIOUtils_GetLinesIterable_initWithNSString_withIOSClass_withNSString_(NSString *path, IOSClass *fileInputStreamWrapper, NSString *encoding);

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpIoIOUtils_GetLinesIterable)

#endif

#pragma pop_macro("INCLUDE_ALL_EduStanfordNlpIoIOUtils")
