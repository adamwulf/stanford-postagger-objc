//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/io/ReaderInputStream.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/io/ReaderInputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/Reader.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"

@interface EduStanfordNlpIoReaderInputStream () {
 @public
  JavaIoReader *in_;
  NSString *encoding_;
  IOSByteArray *slack_;
  jint begin_;
}

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpIoReaderInputStream, in_, JavaIoReader *)
J2OBJC_FIELD_SETTER(EduStanfordNlpIoReaderInputStream, encoding_, NSString *)
J2OBJC_FIELD_SETTER(EduStanfordNlpIoReaderInputStream, slack_, IOSByteArray *)

@implementation EduStanfordNlpIoReaderInputStream

- (instancetype)initWithJavaIoReader:(JavaIoReader *)reader {
  EduStanfordNlpIoReaderInputStream_initWithJavaIoReader_(self, reader);
  return self;
}

- (instancetype)initWithJavaIoReader:(JavaIoReader *)reader
                        withNSString:(NSString *)encoding {
  EduStanfordNlpIoReaderInputStream_initWithJavaIoReader_withNSString_(self, reader, encoding);
  return self;
}

- (jint)read {
  @synchronized(self) {
    if (in_ == nil) {
      @throw new_JavaIoIOException_initWithNSString_(@"Stream Closed");
    }
    jbyte result;
    if (slack_ != nil && begin_ < slack_->size_) {
      result = IOSByteArray_Get(slack_, begin_);
      if (++begin_ == slack_->size_) {
        slack_ = nil;
      }
    }
    else {
      IOSByteArray *buf = [IOSByteArray newArrayWithLength:1];
      if ([self readWithByteArray:buf withInt:0 withInt:1] <= 0) {
        result = -1;
      }
      result = IOSByteArray_Get(buf, 0);
    }
    if (result < -1) {
      result += 256;
    }
    return result;
  }
}

- (jint)readWithByteArray:(IOSByteArray *)b
                  withInt:(jint)off
                  withInt:(jint)len {
  @synchronized(self) {
    if (in_ == nil) {
      @throw new_JavaIoIOException_initWithNSString_(@"Stream Closed");
    }
    while (slack_ == nil) {
      IOSCharArray *buf = [IOSCharArray newArrayWithLength:len];
      jint n = [((JavaIoReader *) nil_chk(in_)) readWithCharArray:buf];
      if (n == -1) {
        return -1;
      }
      if (n > 0) {
        slack_ = [[NSString stringWithCharacters:buf offset:0 length:n] getBytesWithCharsetName:encoding_];
        begin_ = 0;
      }
    }
    if (len > slack_->size_ - begin_) {
      len = slack_->size_ - begin_;
    }
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(slack_, begin_, b, off, len);
    if ((begin_ += len) >= ((IOSByteArray *) nil_chk(slack_))->size_) {
      slack_ = nil;
    }
    return len;
  }
}

- (void)markWithInt:(jint)limit {
  @synchronized(self) {
    @try {
      [((JavaIoReader *) nil_chk(in_)) markWithInt:limit];
    }
    @catch (JavaIoIOException *ioe) {
      @throw new_JavaLangRuntimeException_initWithNSString_([((JavaIoIOException *) nil_chk(ioe)) getMessage]);
    }
  }
}

- (jint)available {
  @synchronized(self) {
    if (in_ == nil) {
      @throw new_JavaIoIOException_initWithNSString_(@"Stream Closed");
    }
    if (slack_ != nil) {
      return slack_->size_ - begin_;
    }
    if ([in_ ready]) {
      return 1;
    }
    else {
      return 0;
    }
  }
}

- (jboolean)markSupported {
  return false;
}

- (void)reset {
  @synchronized(self) {
    if (in_ == nil) {
      @throw new_JavaIoIOException_initWithNSString_(@"Stream Closed");
    }
    slack_ = nil;
    [in_ reset];
  }
}

- (void)close {
  @synchronized(self) {
    if (in_ != nil) {
      [in_ close];
      slack_ = nil;
      in_ = nil;
    }
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x21, -1, -1, 2, -1, -1, -1 },
    { NULL, "I", 0x21, 3, 4, 2, -1, -1, -1 },
    { NULL, "V", 0x21, 5, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x21, -1, -1, 2, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaIoReader:);
  methods[1].selector = @selector(initWithJavaIoReader:withNSString:);
  methods[2].selector = @selector(read);
  methods[3].selector = @selector(readWithByteArray:withInt:withInt:);
  methods[4].selector = @selector(markWithInt:);
  methods[5].selector = @selector(available);
  methods[6].selector = @selector(markSupported);
  methods[7].selector = @selector(reset);
  methods[8].selector = @selector(close);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "in_", "LJavaIoReader;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "encoding_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "slack_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "begin_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoReader;", "LJavaIoReader;LNSString;", "LJavaIoIOException;", "read", "[BII", "mark", "I" };
  static const J2ObjcClassInfo _EduStanfordNlpIoReaderInputStream = { "ReaderInputStream", "edu.stanford.nlp.io", ptrTable, methods, fields, 7, 0x1, 9, 4, -1, -1, -1, -1, -1 };
  return &_EduStanfordNlpIoReaderInputStream;
}

@end

void EduStanfordNlpIoReaderInputStream_initWithJavaIoReader_(EduStanfordNlpIoReaderInputStream *self, JavaIoReader *reader) {
  JavaIoInputStream_init(self);
  self->encoding_ = JavaLangSystem_getPropertyWithNSString_(@"file.encoding");
  self->in_ = reader;
}

EduStanfordNlpIoReaderInputStream *new_EduStanfordNlpIoReaderInputStream_initWithJavaIoReader_(JavaIoReader *reader) {
  J2OBJC_NEW_IMPL(EduStanfordNlpIoReaderInputStream, initWithJavaIoReader_, reader)
}

EduStanfordNlpIoReaderInputStream *create_EduStanfordNlpIoReaderInputStream_initWithJavaIoReader_(JavaIoReader *reader) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpIoReaderInputStream, initWithJavaIoReader_, reader)
}

void EduStanfordNlpIoReaderInputStream_initWithJavaIoReader_withNSString_(EduStanfordNlpIoReaderInputStream *self, JavaIoReader *reader, NSString *encoding) {
  EduStanfordNlpIoReaderInputStream_initWithJavaIoReader_(self, reader);
  if (encoding == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"encoding must not be null");
  }
  else {
    self->encoding_ = encoding;
  }
}

EduStanfordNlpIoReaderInputStream *new_EduStanfordNlpIoReaderInputStream_initWithJavaIoReader_withNSString_(JavaIoReader *reader, NSString *encoding) {
  J2OBJC_NEW_IMPL(EduStanfordNlpIoReaderInputStream, initWithJavaIoReader_withNSString_, reader, encoding)
}

EduStanfordNlpIoReaderInputStream *create_EduStanfordNlpIoReaderInputStream_initWithJavaIoReader_withNSString_(JavaIoReader *reader, NSString *encoding) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpIoReaderInputStream, initWithJavaIoReader_withNSString_, reader, encoding)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpIoReaderInputStream)
