//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/io/NumberRangesFileFilter.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/io/NumberRangesFileFilter.h"
#include "edu/stanford/nlp/util/Pair.h"
#include "java/io/File.h"
#include "java/lang/Character.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"

@interface EduStanfordNlpIoNumberRangesFileFilter () {
 @public
  id<JavaUtilList> ranges_;
  jboolean recursively_;
}

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpIoNumberRangesFileFilter, ranges_, id<JavaUtilList>)

@implementation EduStanfordNlpIoNumberRangesFileFilter

- (instancetype)initWithNSString:(NSString *)ranges
                     withBoolean:(jboolean)recurse {
  EduStanfordNlpIoNumberRangesFileFilter_initWithNSString_withBoolean_(self, ranges, recurse);
  return self;
}

- (jboolean)acceptWithJavaIoFile:(JavaIoFile *)file {
  if ([((JavaIoFile *) nil_chk(file)) isDirectory]) {
    return recursively_;
  }
  else {
    NSString *filename = [file getName];
    return [self acceptWithNSString:filename];
  }
}

- (jboolean)acceptWithNSString:(NSString *)str {
  jint k = ((jint) [((NSString *) nil_chk(str)) length]) - 1;
  jchar c = [str charAtWithInt:k];
  while (k >= 0 && !JavaLangCharacter_isDigitWithChar_(c)) {
    k--;
    if (k >= 0) {
      c = [str charAtWithInt:k];
    }
  }
  if (k < 0) {
    return false;
  }
  jint j = k;
  c = [str charAtWithInt:j];
  while (j >= 0 && JavaLangCharacter_isDigitWithChar_(c)) {
    j--;
    if (j >= 0) {
      c = [str charAtWithInt:j];
    }
  }
  j++;
  k++;
  NSString *theNumber = [str substring:j endIndex:k];
  jint number = JavaLangInteger_parseIntWithNSString_(theNumber);
  for (EduStanfordNlpUtilPair * __strong p in nil_chk(ranges_)) {
    jint low = [((JavaLangInteger *) nil_chk([((EduStanfordNlpUtilPair *) nil_chk(p)) first])) intValue];
    jint high = [((JavaLangInteger *) nil_chk([p second])) intValue];
    if (number >= low && number <= high) {
      return true;
    }
  }
  return false;
}

- (NSString *)description {
  JavaLangStringBuilder *sb;
  if (recursively_) {
    sb = new_JavaLangStringBuilder_initWithNSString_(@"recursively ");
  }
  else {
    sb = new_JavaLangStringBuilder_init();
  }
  for (id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk(ranges_)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    EduStanfordNlpUtilPair *p = [it next];
    jint low = [((JavaLangInteger *) nil_chk([((EduStanfordNlpUtilPair *) nil_chk(p)) first])) intValue];
    jint high = [((JavaLangInteger *) nil_chk([p second])) intValue];
    if (low == high) {
      (void) [sb appendWithInt:low];
    }
    else {
      (void) [sb appendWithInt:low];
      (void) [sb appendWithChar:'-'];
      (void) [sb appendWithInt:high];
    }
    if ([it hasNext]) {
      (void) [sb appendWithChar:','];
    }
  }
  return [sb description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withBoolean:);
  methods[1].selector = @selector(acceptWithJavaIoFile:);
  methods[2].selector = @selector(acceptWithNSString:);
  methods[3].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ranges_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 5, -1 },
    { "recursively_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;Z", "accept", "LJavaIoFile;", "LNSString;", "toString", "Ljava/util/List<Ledu/stanford/nlp/util/Pair<Ljava/lang/Integer;Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpIoNumberRangesFileFilter = { "NumberRangesFileFilter", "edu.stanford.nlp.io", ptrTable, methods, fields, 7, 0x1, 4, 2, -1, -1, -1, -1, -1 };
  return &_EduStanfordNlpIoNumberRangesFileFilter;
}

@end

void EduStanfordNlpIoNumberRangesFileFilter_initWithNSString_withBoolean_(EduStanfordNlpIoNumberRangesFileFilter *self, NSString *ranges, jboolean recurse) {
  NSObject_init(self);
  self->ranges_ = new_JavaUtilArrayList_init();
  self->recursively_ = recurse;
  @try {
    IOSObjectArray *ra = [((NSString *) nil_chk(ranges)) split:@","];
    {
      IOSObjectArray *a__ = ra;
      NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      NSString * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        NSString *range = *b__++;
        IOSObjectArray *one = [((NSString *) nil_chk(range)) split:@"-"];
        if (((IOSObjectArray *) nil_chk(one))->size_ > 2) {
          @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Constructor argument not valid list of number ranges (too many hyphens): ");
        }
        else {
          jint low = JavaLangInteger_parseIntWithNSString_([((NSString *) nil_chk(IOSObjectArray_Get(one, 0))) trim]);
          jint high;
          if (one->size_ == 2) {
            high = JavaLangInteger_parseIntWithNSString_([((NSString *) nil_chk(IOSObjectArray_Get(one, 1))) trim]);
          }
          else {
            high = low;
          }
          EduStanfordNlpUtilPair *p = new_EduStanfordNlpUtilPair_initWithId_withId_(JavaLangInteger_valueOfWithInt_(low), JavaLangInteger_valueOfWithInt_(high));
          [((id<JavaUtilList>) nil_chk(self->ranges_)) addWithId:p];
        }
      }
    }
  }
  @catch (JavaLangException *e) {
    JavaLangIllegalArgumentException *iae = new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Constructor argument not valid list of number ranges: ", ranges));
    (void) [iae initCauseWithNSException:e];
    @throw iae;
  }
}

EduStanfordNlpIoNumberRangesFileFilter *new_EduStanfordNlpIoNumberRangesFileFilter_initWithNSString_withBoolean_(NSString *ranges, jboolean recurse) {
  J2OBJC_NEW_IMPL(EduStanfordNlpIoNumberRangesFileFilter, initWithNSString_withBoolean_, ranges, recurse)
}

EduStanfordNlpIoNumberRangesFileFilter *create_EduStanfordNlpIoNumberRangesFileFilter_initWithNSString_withBoolean_(NSString *ranges, jboolean recurse) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpIoNumberRangesFileFilter, initWithNSString_withBoolean_, ranges, recurse)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpIoNumberRangesFileFilter)
