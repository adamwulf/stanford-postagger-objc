//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/io/IOUtils.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/io/EncodingFileReader.h"
#include "edu/stanford/nlp/io/IOUtils.h"
#include "edu/stanford/nlp/io/RuntimeIOException.h"
#include "edu/stanford/nlp/util/AbstractIterator.h"
#include "edu/stanford/nlp/util/ErasureUtils.h"
#include "edu/stanford/nlp/util/Generics.h"
#include "edu/stanford/nlp/util/StringUtils.h"
#include "edu/stanford/nlp/util/Timing.h"
#include "java/io/BufferedInputStream.h"
#include "java/io/BufferedOutputStream.h"
#include "java/io/BufferedReader.h"
#include "java/io/BufferedWriter.h"
#include "java/io/Closeable.h"
#include "java/io/DataInputStream.h"
#include "java/io/DataOutputStream.h"
#include "java/io/File.h"
#include "java/io/FileInputStream.h"
#include "java/io/FileNotFoundException.h"
#include "java/io/FileOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/InputStreamReader.h"
#include "java/io/ObjectInputStream.h"
#include "java/io/ObjectOutputStream.h"
#include "java/io/OutputStream.h"
#include "java/io/OutputStreamWriter.h"
#include "java/io/PrintStream.h"
#include "java/io/PrintWriter.h"
#include "java/io/RandomAccessFile.h"
#include "java/io/Reader.h"
#include "java/io/Writer.h"
#include "java/lang/AssertionError.h"
#include "java/lang/Byte.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Iterable.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/lang/annotation/Annotation.h"
#include "java/lang/reflect/Constructor.h"
#include "java/net/InetAddress.h"
#include "java/net/SocketTimeoutException.h"
#include "java/net/URL.h"
#include "java/net/URLConnection.h"
#include "java/nio/ByteBuffer.h"
#include "java/nio/CharBuffer.h"
#include "java/nio/channels/FileChannel.h"
#include "java/nio/charset/Charset.h"
#include "java/nio/charset/CharsetDecoder.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collections.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/NoSuchElementException.h"
#include "java/util/Optional.h"
#include "java/util/Queue.h"
#include "java/util/Set.h"
#include "java/util/Spliterator.h"
#include "java/util/function/Consumer.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"
#include "java/util/zip/GZIPInputStream.h"
#include "java/util/zip/GZIPOutputStream.h"
#include "java/util/zip/ZipException.h"

@interface EduStanfordNlpIoIOUtils ()

- (instancetype)init;

+ (JavaIoOutputStream *)getBufferedOutputStreamWithNSString:(NSString *)path;

+ (JavaIoInputStream *)findStreamInClasspathOrFileSystemWithNSString:(NSString *)name;

+ (void)copyFileWithJavaIoFile:(JavaIoFile *)source
                withJavaIoFile:(JavaIoFile *)target OBJC_METHOD_FAMILY_NONE;

@end

inline jint EduStanfordNlpIoIOUtils_get_SLURP_BUFFER_SIZE();
#define EduStanfordNlpIoIOUtils_SLURP_BUFFER_SIZE 16384
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpIoIOUtils, SLURP_BUFFER_SIZE, jint)

inline JavaUtilRegexPattern *EduStanfordNlpIoIOUtils_get_tab();
static JavaUtilRegexPattern *EduStanfordNlpIoIOUtils_tab;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpIoIOUtils, tab, JavaUtilRegexPattern *)

inline id<JavaUtilSet> EduStanfordNlpIoIOUtils_get_blacklistedPathsToRemove();
inline id<JavaUtilSet> EduStanfordNlpIoIOUtils_set_blacklistedPathsToRemove(id<JavaUtilSet> value);
static id<JavaUtilSet> EduStanfordNlpIoIOUtils_blacklistedPathsToRemove;
J2OBJC_STATIC_FIELD_OBJ(EduStanfordNlpIoIOUtils, blacklistedPathsToRemove, id<JavaUtilSet>)

__attribute__((unused)) static void EduStanfordNlpIoIOUtils_init(EduStanfordNlpIoIOUtils *self);

__attribute__((unused)) static EduStanfordNlpIoIOUtils *new_EduStanfordNlpIoIOUtils_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpIoIOUtils *create_EduStanfordNlpIoIOUtils_init();

__attribute__((unused)) static JavaIoOutputStream *EduStanfordNlpIoIOUtils_getBufferedOutputStreamWithNSString_(NSString *path);

__attribute__((unused)) static JavaIoInputStream *EduStanfordNlpIoIOUtils_findStreamInClasspathOrFileSystemWithNSString_(NSString *name);

__attribute__((unused)) static void EduStanfordNlpIoIOUtils_copyFileWithJavaIoFile_withJavaIoFile_(JavaIoFile *source, JavaIoFile *target);

__attribute__((unused)) static IOSObjectArray *EduStanfordNlpIoIOUtils__Annotations$0();

__attribute__((unused)) static IOSObjectArray *EduStanfordNlpIoIOUtils__Annotations$1();

@interface EduStanfordNlpIoIOUtils_GetLinesIterable ()

- (JavaIoInputStream *)getStream;

@end

__attribute__((unused)) static JavaIoInputStream *EduStanfordNlpIoIOUtils_GetLinesIterable_getStream(EduStanfordNlpIoIOUtils_GetLinesIterable *self);

@interface EduStanfordNlpIoIOUtils_GetLinesIterable_$1 : NSObject < JavaUtilIterator > {
 @public
  EduStanfordNlpIoIOUtils_GetLinesIterable *this$0_;
  JavaIoBufferedReader *reader_;
  NSString *line_;
}

- (jboolean)hasNext;

- (NSString *)next;

- (NSString *)getLine;

- (JavaIoBufferedReader *)getReader;

- (void)remove;

- (instancetype)initWithEduStanfordNlpIoIOUtils_GetLinesIterable:(EduStanfordNlpIoIOUtils_GetLinesIterable *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpIoIOUtils_GetLinesIterable_$1)

J2OBJC_FIELD_SETTER(EduStanfordNlpIoIOUtils_GetLinesIterable_$1, this$0_, EduStanfordNlpIoIOUtils_GetLinesIterable *)
J2OBJC_FIELD_SETTER(EduStanfordNlpIoIOUtils_GetLinesIterable_$1, reader_, JavaIoBufferedReader *)
J2OBJC_FIELD_SETTER(EduStanfordNlpIoIOUtils_GetLinesIterable_$1, line_, NSString *)

__attribute__((unused)) static void EduStanfordNlpIoIOUtils_GetLinesIterable_$1_initWithEduStanfordNlpIoIOUtils_GetLinesIterable_(EduStanfordNlpIoIOUtils_GetLinesIterable_$1 *self, EduStanfordNlpIoIOUtils_GetLinesIterable *outer$);

__attribute__((unused)) static EduStanfordNlpIoIOUtils_GetLinesIterable_$1 *new_EduStanfordNlpIoIOUtils_GetLinesIterable_$1_initWithEduStanfordNlpIoIOUtils_GetLinesIterable_(EduStanfordNlpIoIOUtils_GetLinesIterable *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpIoIOUtils_GetLinesIterable_$1 *create_EduStanfordNlpIoIOUtils_GetLinesIterable_$1_initWithEduStanfordNlpIoIOUtils_GetLinesIterable_(EduStanfordNlpIoIOUtils_GetLinesIterable *outer$);

@interface EduStanfordNlpIoIOUtils_LineReaderIterable : NSObject < JavaLangIterable > {
 @public
  JavaIoBufferedReader *reader_;
}

- (instancetype)initWithJavaIoBufferedReader:(JavaIoBufferedReader *)reader;

- (id<JavaUtilIterator>)iterator;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpIoIOUtils_LineReaderIterable)

J2OBJC_FIELD_SETTER(EduStanfordNlpIoIOUtils_LineReaderIterable, reader_, JavaIoBufferedReader *)

__attribute__((unused)) static void EduStanfordNlpIoIOUtils_LineReaderIterable_initWithJavaIoBufferedReader_(EduStanfordNlpIoIOUtils_LineReaderIterable *self, JavaIoBufferedReader *reader);

__attribute__((unused)) static EduStanfordNlpIoIOUtils_LineReaderIterable *new_EduStanfordNlpIoIOUtils_LineReaderIterable_initWithJavaIoBufferedReader_(JavaIoBufferedReader *reader) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpIoIOUtils_LineReaderIterable *create_EduStanfordNlpIoIOUtils_LineReaderIterable_initWithJavaIoBufferedReader_(JavaIoBufferedReader *reader);

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpIoIOUtils_LineReaderIterable)

@interface EduStanfordNlpIoIOUtils_LineReaderIterable_$1 : NSObject < JavaUtilIterator > {
 @public
  EduStanfordNlpIoIOUtils_LineReaderIterable *this$0_;
  NSString *next_;
}

- (NSString *)getNext;

- (jboolean)hasNext;

- (NSString *)next;

- (void)remove;

- (instancetype)initWithEduStanfordNlpIoIOUtils_LineReaderIterable:(EduStanfordNlpIoIOUtils_LineReaderIterable *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpIoIOUtils_LineReaderIterable_$1)

J2OBJC_FIELD_SETTER(EduStanfordNlpIoIOUtils_LineReaderIterable_$1, this$0_, EduStanfordNlpIoIOUtils_LineReaderIterable *)
J2OBJC_FIELD_SETTER(EduStanfordNlpIoIOUtils_LineReaderIterable_$1, next_, NSString *)

__attribute__((unused)) static NSString *EduStanfordNlpIoIOUtils_LineReaderIterable_$1_getNext(EduStanfordNlpIoIOUtils_LineReaderIterable_$1 *self);

__attribute__((unused)) static void EduStanfordNlpIoIOUtils_LineReaderIterable_$1_initWithEduStanfordNlpIoIOUtils_LineReaderIterable_(EduStanfordNlpIoIOUtils_LineReaderIterable_$1 *self, EduStanfordNlpIoIOUtils_LineReaderIterable *outer$);

__attribute__((unused)) static EduStanfordNlpIoIOUtils_LineReaderIterable_$1 *new_EduStanfordNlpIoIOUtils_LineReaderIterable_$1_initWithEduStanfordNlpIoIOUtils_LineReaderIterable_(EduStanfordNlpIoIOUtils_LineReaderIterable *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpIoIOUtils_LineReaderIterable_$1 *create_EduStanfordNlpIoIOUtils_LineReaderIterable_$1_initWithEduStanfordNlpIoIOUtils_LineReaderIterable_(EduStanfordNlpIoIOUtils_LineReaderIterable *outer$);

@interface EduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable : NSObject < JavaLangIterable > {
 @public
  JavaIoReader *reader_;
  jint bufferSize_;
}

- (instancetype)initWithJavaIoReader:(JavaIoReader *)reader;

- (instancetype)initWithJavaIoReader:(JavaIoReader *)reader
                             withInt:(jint)bufferSize;

- (id<JavaUtilIterator>)iterator;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable)

J2OBJC_FIELD_SETTER(EduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable, reader_, JavaIoReader *)

__attribute__((unused)) static void EduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable_initWithJavaIoReader_(EduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable *self, JavaIoReader *reader);

__attribute__((unused)) static EduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable *new_EduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable_initWithJavaIoReader_(JavaIoReader *reader) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable *create_EduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable_initWithJavaIoReader_(JavaIoReader *reader);

__attribute__((unused)) static void EduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable_initWithJavaIoReader_withInt_(EduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable *self, JavaIoReader *reader, jint bufferSize);

__attribute__((unused)) static EduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable *new_EduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable_initWithJavaIoReader_withInt_(JavaIoReader *reader, jint bufferSize) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable *create_EduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable_initWithJavaIoReader_withInt_(JavaIoReader *reader, jint bufferSize);

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable)

@interface EduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable_$1 : NSObject < JavaUtilIterator > {
 @public
  EduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable *this$0_;
  NSString *next_;
  jboolean done_;
  JavaLangStringBuilder *sb_;
  IOSCharArray *charBuffer_;
  jint charBufferPos_;
  jint charsInBuffer_;
  jboolean lastWasLF_;
}

- (NSString *)getNext;

- (jboolean)copyUntilEol OBJC_METHOD_FAMILY_NONE;

- (jboolean)hasNext;

- (NSString *)next;

- (void)remove;

- (instancetype)initWithEduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable:(EduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable_$1)

J2OBJC_FIELD_SETTER(EduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable_$1, this$0_, EduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable *)
J2OBJC_FIELD_SETTER(EduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable_$1, next_, NSString *)
J2OBJC_FIELD_SETTER(EduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable_$1, sb_, JavaLangStringBuilder *)
J2OBJC_FIELD_SETTER(EduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable_$1, charBuffer_, IOSCharArray *)

__attribute__((unused)) static NSString *EduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable_$1_getNext(EduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable_$1 *self);

__attribute__((unused)) static jboolean EduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable_$1_copyUntilEol(EduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable_$1 *self);

__attribute__((unused)) static void EduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable_$1_initWithEduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable_(EduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable_$1 *self, EduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable *outer$);

__attribute__((unused)) static EduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable_$1 *new_EduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable_$1_initWithEduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable_(EduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable_$1 *create_EduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable_$1_initWithEduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable_(EduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable *outer$);

@interface EduStanfordNlpIoIOUtils_$2 : NSObject < JavaLangIterable > {
 @public
  JavaIoFile *val$dir_;
  JavaUtilRegexPattern *val$pattern_;
}

- (id<JavaUtilIterator>)iterator;

- (instancetype)initWithJavaIoFile:(JavaIoFile *)capture$0
          withJavaUtilRegexPattern:(JavaUtilRegexPattern *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpIoIOUtils_$2)

J2OBJC_FIELD_SETTER(EduStanfordNlpIoIOUtils_$2, val$dir_, JavaIoFile *)
J2OBJC_FIELD_SETTER(EduStanfordNlpIoIOUtils_$2, val$pattern_, JavaUtilRegexPattern *)

__attribute__((unused)) static void EduStanfordNlpIoIOUtils_$2_initWithJavaIoFile_withJavaUtilRegexPattern_(EduStanfordNlpIoIOUtils_$2 *self, JavaIoFile *capture$0, JavaUtilRegexPattern *capture$1);

__attribute__((unused)) static EduStanfordNlpIoIOUtils_$2 *new_EduStanfordNlpIoIOUtils_$2_initWithJavaIoFile_withJavaUtilRegexPattern_(JavaIoFile *capture$0, JavaUtilRegexPattern *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpIoIOUtils_$2 *create_EduStanfordNlpIoIOUtils_$2_initWithJavaIoFile_withJavaUtilRegexPattern_(JavaIoFile *capture$0, JavaUtilRegexPattern *capture$1);

@interface EduStanfordNlpIoIOUtils_$2_$1 : EduStanfordNlpUtilAbstractIterator {
 @public
  EduStanfordNlpIoIOUtils_$2 *this$0_;
  id<JavaUtilQueue> files_;
  JavaIoFile *file_;
}

- (jboolean)hasNext;

- (JavaIoFile *)next;

- (JavaIoFile *)findNext;

- (instancetype)initWithEduStanfordNlpIoIOUtils_$2:(EduStanfordNlpIoIOUtils_$2 *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpIoIOUtils_$2_$1)

J2OBJC_FIELD_SETTER(EduStanfordNlpIoIOUtils_$2_$1, this$0_, EduStanfordNlpIoIOUtils_$2 *)
J2OBJC_FIELD_SETTER(EduStanfordNlpIoIOUtils_$2_$1, files_, id<JavaUtilQueue>)
J2OBJC_FIELD_SETTER(EduStanfordNlpIoIOUtils_$2_$1, file_, JavaIoFile *)

__attribute__((unused)) static JavaIoFile *EduStanfordNlpIoIOUtils_$2_$1_findNext(EduStanfordNlpIoIOUtils_$2_$1 *self);

__attribute__((unused)) static void EduStanfordNlpIoIOUtils_$2_$1_initWithEduStanfordNlpIoIOUtils_$2_(EduStanfordNlpIoIOUtils_$2_$1 *self, EduStanfordNlpIoIOUtils_$2 *outer$);

__attribute__((unused)) static EduStanfordNlpIoIOUtils_$2_$1 *new_EduStanfordNlpIoIOUtils_$2_$1_initWithEduStanfordNlpIoIOUtils_$2_(EduStanfordNlpIoIOUtils_$2 *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpIoIOUtils_$2_$1 *create_EduStanfordNlpIoIOUtils_$2_$1_initWithEduStanfordNlpIoIOUtils_$2_(EduStanfordNlpIoIOUtils_$2 *outer$);

@interface EduStanfordNlpIoIOUtils_$1 : JavaUtilHashSet

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpIoIOUtils_$1)

__attribute__((unused)) static void EduStanfordNlpIoIOUtils_$1_init(EduStanfordNlpIoIOUtils_$1 *self);

__attribute__((unused)) static EduStanfordNlpIoIOUtils_$1 *new_EduStanfordNlpIoIOUtils_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpIoIOUtils_$1 *create_EduStanfordNlpIoIOUtils_$1_init();

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpIoIOUtils)

NSString *EduStanfordNlpIoIOUtils_eolChar;
NSString *EduStanfordNlpIoIOUtils_defaultEncoding = @"utf-8";

@implementation EduStanfordNlpIoIOUtils

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpIoIOUtils_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (JavaIoFile *)writeObjectToFileWithId:(id)o
                           withNSString:(NSString *)filename {
  return EduStanfordNlpIoIOUtils_writeObjectToFileWithId_withNSString_(o, filename);
}

+ (JavaIoFile *)writeObjectToFileWithId:(id)o
                         withJavaIoFile:(JavaIoFile *)file {
  return EduStanfordNlpIoIOUtils_writeObjectToFileWithId_withJavaIoFile_(o, file);
}

+ (JavaIoFile *)writeObjectToFileWithId:(id)o
                         withJavaIoFile:(JavaIoFile *)file
                            withBoolean:(jboolean)append {
  return EduStanfordNlpIoIOUtils_writeObjectToFileWithId_withJavaIoFile_withBoolean_(o, file, append);
}

+ (JavaIoFile *)writeObjectToFileNoExceptionsWithId:(id)o
                                       withNSString:(NSString *)filename {
  return EduStanfordNlpIoIOUtils_writeObjectToFileNoExceptionsWithId_withNSString_(o, filename);
}

+ (JavaIoFile *)writeObjectToTempFileWithId:(id)o
                               withNSString:(NSString *)filename {
  return EduStanfordNlpIoIOUtils_writeObjectToTempFileWithId_withNSString_(o, filename);
}

+ (JavaIoFile *)writeObjectToTempFileNoExceptionsWithId:(id)o
                                           withNSString:(NSString *)filename {
  return EduStanfordNlpIoIOUtils_writeObjectToTempFileNoExceptionsWithId_withNSString_(o, filename);
}

+ (JavaIoOutputStream *)getBufferedOutputStreamWithNSString:(NSString *)path {
  return EduStanfordNlpIoIOUtils_getBufferedOutputStreamWithNSString_(path);
}

+ (void)writeStringToFileWithNSString:(NSString *)contents
                         withNSString:(NSString *)path
                         withNSString:(NSString *)encoding {
  EduStanfordNlpIoIOUtils_writeStringToFileWithNSString_withNSString_withNSString_(contents, path, encoding);
}

+ (void)writeStringToFileNoExceptionsWithNSString:(NSString *)contents
                                     withNSString:(NSString *)path
                                     withNSString:(NSString *)encoding {
  EduStanfordNlpIoIOUtils_writeStringToFileNoExceptionsWithNSString_withNSString_withNSString_(contents, path, encoding);
}

+ (JavaIoFile *)writeStringToTempFileWithNSString:(NSString *)contents
                                     withNSString:(NSString *)path
                                     withNSString:(NSString *)encoding {
  return EduStanfordNlpIoIOUtils_writeStringToTempFileWithNSString_withNSString_withNSString_(contents, path, encoding);
}

+ (void)writeStringToTempFileWithNSString:(NSString *)contents
                             withNSString:(NSString *)path {
  EduStanfordNlpIoIOUtils_writeStringToTempFileWithNSString_withNSString_(contents, path);
}

+ (JavaIoFile *)writeStringToTempFileNoExceptionsWithNSString:(NSString *)contents
                                                 withNSString:(NSString *)path
                                                 withNSString:(NSString *)encoding {
  return EduStanfordNlpIoIOUtils_writeStringToTempFileNoExceptionsWithNSString_withNSString_withNSString_(contents, path, encoding);
}

+ (void)writeStringToTempFileNoExceptionsWithNSString:(NSString *)contents
                                         withNSString:(NSString *)path {
  EduStanfordNlpIoIOUtils_writeStringToTempFileNoExceptionsWithNSString_withNSString_(contents, path);
}

+ (id)readObjectFromFileWithJavaIoFile:(JavaIoFile *)file {
  return EduStanfordNlpIoIOUtils_readObjectFromFileWithJavaIoFile_(file);
}

+ (JavaIoDataInputStream *)getDataInputStreamWithNSString:(NSString *)filenameUrlOrClassPath {
  return EduStanfordNlpIoIOUtils_getDataInputStreamWithNSString_(filenameUrlOrClassPath);
}

+ (JavaIoDataOutputStream *)getDataOutputStreamWithNSString:(NSString *)filename {
  return EduStanfordNlpIoIOUtils_getDataOutputStreamWithNSString_(filename);
}

+ (id)readObjectFromURLOrClasspathOrFileSystemWithNSString:(NSString *)filename {
  return EduStanfordNlpIoIOUtils_readObjectFromURLOrClasspathOrFileSystemWithNSString_(filename);
}

+ (id)readObjectAnnouncingTimingFromURLOrClasspathOrFileSystemWithNSString:(NSString *)msg
                                                              withNSString:(NSString *)path {
  return EduStanfordNlpIoIOUtils_readObjectAnnouncingTimingFromURLOrClasspathOrFileSystemWithNSString_withNSString_(msg, path);
}

+ (id)readObjectFromObjectStreamWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)ois {
  return EduStanfordNlpIoIOUtils_readObjectFromObjectStreamWithJavaIoObjectInputStream_(ois);
}

+ (id)readObjectFromFileWithNSString:(NSString *)filename {
  return EduStanfordNlpIoIOUtils_readObjectFromFileWithNSString_(filename);
}

+ (id)readObjectFromFileNoExceptionsWithJavaIoFile:(JavaIoFile *)file {
  return EduStanfordNlpIoIOUtils_readObjectFromFileNoExceptionsWithJavaIoFile_(file);
}

+ (jint)lineCountWithNSString:(NSString *)textFileOrUrl {
  return EduStanfordNlpIoIOUtils_lineCountWithNSString_(textFileOrUrl);
}

+ (JavaIoObjectOutputStream *)writeStreamFromStringWithNSString:(NSString *)serializePath {
  return EduStanfordNlpIoIOUtils_writeStreamFromStringWithNSString_(serializePath);
}

+ (JavaIoObjectInputStream *)readStreamFromStringWithNSString:(NSString *)filenameOrUrl {
  return EduStanfordNlpIoIOUtils_readStreamFromStringWithNSString_(filenameOrUrl);
}

+ (JavaIoInputStream *)findStreamInClasspathOrFileSystemWithNSString:(NSString *)name {
  return EduStanfordNlpIoIOUtils_findStreamInClasspathOrFileSystemWithNSString_(name);
}

+ (jboolean)existsInClasspathOrFileSystemWithNSString:(NSString *)name {
  return EduStanfordNlpIoIOUtils_existsInClasspathOrFileSystemWithNSString_(name);
}

+ (JavaIoInputStream *)getInputStreamFromURLOrClasspathOrFileSystemWithNSString:(NSString *)textFileOrUrl {
  return EduStanfordNlpIoIOUtils_getInputStreamFromURLOrClasspathOrFileSystemWithNSString_(textFileOrUrl);
}

+ (JavaIoInputStream *)inputStreamFromFileWithJavaIoFile:(JavaIoFile *)file {
  return EduStanfordNlpIoIOUtils_inputStreamFromFileWithJavaIoFile_(file);
}

+ (JavaIoBufferedReader *)readerFromFileWithJavaIoFile:(JavaIoFile *)file {
  return EduStanfordNlpIoIOUtils_readerFromFileWithJavaIoFile_(file);
}

+ (JavaIoBufferedReader *)readerFromFileWithJavaIoFile:(JavaIoFile *)file
                                          withNSString:(NSString *)encoding {
  return EduStanfordNlpIoIOUtils_readerFromFileWithJavaIoFile_withNSString_(file, encoding);
}

+ (JavaIoBufferedReader *)readerFromStdin {
  return EduStanfordNlpIoIOUtils_readerFromStdin();
}

+ (JavaIoBufferedReader *)readerFromStdinWithNSString:(NSString *)encoding {
  return EduStanfordNlpIoIOUtils_readerFromStdinWithNSString_(encoding);
}

+ (JavaIoBufferedReader *)readerFromStringWithNSString:(NSString *)textFileOrUrl {
  return EduStanfordNlpIoIOUtils_readerFromStringWithNSString_(textFileOrUrl);
}

+ (JavaIoBufferedReader *)readerFromStringWithNSString:(NSString *)textFileOrUrl
                                          withNSString:(NSString *)encoding {
  return EduStanfordNlpIoIOUtils_readerFromStringWithNSString_withNSString_(textFileOrUrl, encoding);
}

+ (id<JavaLangIterable>)readLinesWithNSString:(NSString *)path {
  return EduStanfordNlpIoIOUtils_readLinesWithNSString_(path);
}

+ (id<JavaLangIterable>)readLinesWithNSString:(NSString *)path
                                 withNSString:(NSString *)encoding {
  return EduStanfordNlpIoIOUtils_readLinesWithNSString_withNSString_(path, encoding);
}

+ (id<JavaLangIterable>)readLinesWithJavaIoFile:(JavaIoFile *)file {
  return EduStanfordNlpIoIOUtils_readLinesWithJavaIoFile_(file);
}

+ (id<JavaLangIterable>)readLinesWithJavaIoFile:(JavaIoFile *)file
                                   withIOSClass:(IOSClass *)fileInputStreamWrapper {
  return EduStanfordNlpIoIOUtils_readLinesWithJavaIoFile_withIOSClass_(file, fileInputStreamWrapper);
}

+ (id<JavaLangIterable>)readLinesWithJavaIoFile:(JavaIoFile *)file
                                   withIOSClass:(IOSClass *)fileInputStreamWrapper
                                   withNSString:(NSString *)encoding {
  return EduStanfordNlpIoIOUtils_readLinesWithJavaIoFile_withIOSClass_withNSString_(file, fileInputStreamWrapper, encoding);
}

+ (id<JavaLangIterable>)getLineIterableWithJavaIoReader:(JavaIoReader *)r
                                            withBoolean:(jboolean)includeEol {
  return EduStanfordNlpIoIOUtils_getLineIterableWithJavaIoReader_withBoolean_(r, includeEol);
}

+ (id<JavaLangIterable>)getLineIterableWithJavaIoReader:(JavaIoReader *)r
                                                withInt:(jint)bufferSize
                                            withBoolean:(jboolean)includeEol {
  return EduStanfordNlpIoIOUtils_getLineIterableWithJavaIoReader_withInt_withBoolean_(r, bufferSize, includeEol);
}

+ (void)closeIgnoringExceptionsWithJavaIoCloseable:(id<JavaIoCloseable>)c {
  EduStanfordNlpIoIOUtils_closeIgnoringExceptionsWithJavaIoCloseable_(c);
}

+ (id<JavaLangIterable>)iterFilesRecursiveWithJavaIoFile:(JavaIoFile *)dir {
  return EduStanfordNlpIoIOUtils_iterFilesRecursiveWithJavaIoFile_(dir);
}

+ (id<JavaLangIterable>)iterFilesRecursiveWithJavaIoFile:(JavaIoFile *)dir
                                            withNSString:(NSString *)ext {
  return EduStanfordNlpIoIOUtils_iterFilesRecursiveWithJavaIoFile_withNSString_(dir, ext);
}

+ (id<JavaLangIterable>)iterFilesRecursiveWithJavaIoFile:(JavaIoFile *)dir
                                withJavaUtilRegexPattern:(JavaUtilRegexPattern *)pattern {
  return EduStanfordNlpIoIOUtils_iterFilesRecursiveWithJavaIoFile_withJavaUtilRegexPattern_(dir, pattern);
}

+ (NSString *)slurpFileWithJavaIoFile:(JavaIoFile *)file {
  return EduStanfordNlpIoIOUtils_slurpFileWithJavaIoFile_(file);
}

+ (NSString *)slurpFileWithJavaIoFile:(JavaIoFile *)file
                         withNSString:(NSString *)encoding {
  return EduStanfordNlpIoIOUtils_slurpFileWithJavaIoFile_withNSString_(file, encoding);
}

+ (NSString *)slurpGZippedFileWithNSString:(NSString *)filename {
  return EduStanfordNlpIoIOUtils_slurpGZippedFileWithNSString_(filename);
}

+ (NSString *)slurpGZippedFileWithJavaIoFile:(JavaIoFile *)file {
  return EduStanfordNlpIoIOUtils_slurpGZippedFileWithJavaIoFile_(file);
}

+ (NSString *)slurpFileWithNSString:(NSString *)filename
                       withNSString:(NSString *)encoding {
  return EduStanfordNlpIoIOUtils_slurpFileWithNSString_withNSString_(filename, encoding);
}

+ (NSString *)slurpFileNoExceptionsWithNSString:(NSString *)filename
                                   withNSString:(NSString *)encoding {
  return EduStanfordNlpIoIOUtils_slurpFileNoExceptionsWithNSString_withNSString_(filename, encoding);
}

+ (NSString *)slurpFileWithNSString:(NSString *)filename {
  return EduStanfordNlpIoIOUtils_slurpFileWithNSString_(filename);
}

+ (NSString *)slurpURLNoExceptionsWithJavaNetURL:(JavaNetURL *)u
                                    withNSString:(NSString *)encoding {
  return EduStanfordNlpIoIOUtils_slurpURLNoExceptionsWithJavaNetURL_withNSString_(u, encoding);
}

+ (NSString *)slurpURLWithJavaNetURL:(JavaNetURL *)u
                        withNSString:(NSString *)encoding {
  return EduStanfordNlpIoIOUtils_slurpURLWithJavaNetURL_withNSString_(u, encoding);
}

+ (NSString *)getUrlEncodingWithJavaNetURLConnection:(JavaNetURLConnection *)connection {
  return EduStanfordNlpIoIOUtils_getUrlEncodingWithJavaNetURLConnection_(connection);
}

+ (NSString *)slurpURLWithJavaNetURL:(JavaNetURL *)u {
  return EduStanfordNlpIoIOUtils_slurpURLWithJavaNetURL_(u);
}

+ (NSString *)slurpURLNoExceptionsWithJavaNetURL:(JavaNetURL *)u {
  return EduStanfordNlpIoIOUtils_slurpURLNoExceptionsWithJavaNetURL_(u);
}

+ (NSString *)slurpURLWithNSString:(NSString *)path {
  return EduStanfordNlpIoIOUtils_slurpURLWithNSString_(path);
}

+ (NSString *)slurpURLNoExceptionsWithNSString:(NSString *)path {
  return EduStanfordNlpIoIOUtils_slurpURLNoExceptionsWithNSString_(path);
}

+ (NSString *)slurpFileNoExceptionsWithJavaIoFile:(JavaIoFile *)file {
  return EduStanfordNlpIoIOUtils_slurpFileNoExceptionsWithJavaIoFile_(file);
}

+ (NSString *)slurpFileNoExceptionsWithNSString:(NSString *)filename {
  return EduStanfordNlpIoIOUtils_slurpFileNoExceptionsWithNSString_(filename);
}

+ (NSString *)slurpReaderWithJavaIoReader:(JavaIoReader *)reader {
  return EduStanfordNlpIoIOUtils_slurpReaderWithJavaIoReader_(reader);
}

+ (NSString *)slurpInputStreamWithJavaIoInputStream:(JavaIoInputStream *)input
                                       withNSString:(NSString *)encoding {
  return EduStanfordNlpIoIOUtils_slurpInputStreamWithJavaIoInputStream_withNSString_(input, encoding);
}

+ (void)writeStreamToStreamWithJavaIoInputStream:(JavaIoInputStream *)input
                          withJavaIoOutputStream:(JavaIoOutputStream *)output {
  EduStanfordNlpIoIOUtils_writeStreamToStreamWithJavaIoInputStream_withJavaIoOutputStream_(input, output);
}

+ (id<JavaUtilList>)readCSVWithHeaderWithNSString:(NSString *)path
                                         withChar:(jchar)quoteChar
                                         withChar:(jchar)escapeChar {
  return EduStanfordNlpIoIOUtils_readCSVWithHeaderWithNSString_withChar_withChar_(path, quoteChar, escapeChar);
}

+ (id<JavaUtilList>)readCSVWithHeaderWithNSString:(NSString *)path {
  return EduStanfordNlpIoIOUtils_readCSVWithHeaderWithNSString_(path);
}

+ (JavaUtilLinkedList *)readCSVStrictlyWithCharArray:(IOSCharArray *)csvContents
                                             withInt:(jint)numColumns {
  return EduStanfordNlpIoIOUtils_readCSVStrictlyWithCharArray_withInt_(csvContents, numColumns);
}

+ (JavaUtilLinkedList *)readCSVStrictlyWithNSString:(NSString *)filename
                                            withInt:(jint)numColumns {
  return EduStanfordNlpIoIOUtils_readCSVStrictlyWithNSString_withInt_(filename, numColumns);
}

+ (JavaIoInputStream *)getFileInputStreamWithNSString:(NSString *)filename {
  return EduStanfordNlpIoIOUtils_getFileInputStreamWithNSString_(filename);
}

+ (JavaIoOutputStream *)getFileOutputStreamWithNSString:(NSString *)filename {
  return EduStanfordNlpIoIOUtils_getFileOutputStreamWithNSString_(filename);
}

+ (JavaIoOutputStream *)getFileOutputStreamWithNSString:(NSString *)filename
                                            withBoolean:(jboolean)append {
  return EduStanfordNlpIoIOUtils_getFileOutputStreamWithNSString_withBoolean_(filename, append);
}

+ (JavaIoBufferedReader *)getBufferedFileReaderWithNSString:(NSString *)filename {
  return EduStanfordNlpIoIOUtils_getBufferedFileReaderWithNSString_(filename);
}

+ (JavaIoBufferedReader *)getBufferedReaderFromClasspathOrFileSystemWithNSString:(NSString *)filename {
  return EduStanfordNlpIoIOUtils_getBufferedReaderFromClasspathOrFileSystemWithNSString_(filename);
}

+ (JavaIoPrintWriter *)getPrintWriterWithJavaIoFile:(JavaIoFile *)textFile {
  return EduStanfordNlpIoIOUtils_getPrintWriterWithJavaIoFile_(textFile);
}

+ (JavaIoPrintWriter *)getPrintWriterWithJavaIoFile:(JavaIoFile *)textFile
                                       withNSString:(NSString *)encoding {
  return EduStanfordNlpIoIOUtils_getPrintWriterWithJavaIoFile_withNSString_(textFile, encoding);
}

+ (JavaIoPrintWriter *)getPrintWriterWithNSString:(NSString *)filename {
  return EduStanfordNlpIoIOUtils_getPrintWriterWithNSString_(filename);
}

+ (JavaIoPrintWriter *)getPrintWriterIgnoringExceptionsWithNSString:(NSString *)filename {
  return EduStanfordNlpIoIOUtils_getPrintWriterIgnoringExceptionsWithNSString_(filename);
}

+ (JavaIoPrintWriter *)getPrintWriterOrDieWithNSString:(NSString *)filename {
  return EduStanfordNlpIoIOUtils_getPrintWriterOrDieWithNSString_(filename);
}

+ (JavaIoPrintWriter *)getPrintWriterWithNSString:(NSString *)filename
                                     withNSString:(NSString *)encoding {
  return EduStanfordNlpIoIOUtils_getPrintWriterWithNSString_withNSString_(filename, encoding);
}

+ (id<JavaUtilSet>)readColumnSetWithNSString:(NSString *)infile
                                     withInt:(jint)field {
  return EduStanfordNlpIoIOUtils_readColumnSetWithNSString_withInt_(infile, field);
}

+ (id<JavaUtilList>)readObjectFromColumnsWithIOSClass:(IOSClass *)objClass
                                         withNSString:(NSString *)filename
                                    withNSStringArray:(IOSObjectArray *)fieldNames
                                         withNSString:(NSString *)delimiter {
  return EduStanfordNlpIoIOUtils_readObjectFromColumnsWithIOSClass_withNSString_withNSStringArray_withNSString_(objClass, filename, fieldNames, delimiter);
}

+ (id<JavaUtilMap>)readMapWithNSString:(NSString *)filename {
  return EduStanfordNlpIoIOUtils_readMapWithNSString_(filename);
}

+ (NSString *)stringFromFileWithNSString:(NSString *)filename {
  return EduStanfordNlpIoIOUtils_stringFromFileWithNSString_(filename);
}

+ (NSString *)stringFromFileWithNSString:(NSString *)filename
                            withNSString:(NSString *)encoding {
  return EduStanfordNlpIoIOUtils_stringFromFileWithNSString_withNSString_(filename, encoding);
}

+ (id<JavaUtilList>)linesFromFileWithNSString:(NSString *)filename {
  return EduStanfordNlpIoIOUtils_linesFromFileWithNSString_(filename);
}

+ (id<JavaUtilList>)linesFromFileWithNSString:(NSString *)filename
                                 withNSString:(NSString *)encoding {
  return EduStanfordNlpIoIOUtils_linesFromFileWithNSString_withNSString_(filename, encoding);
}

+ (id<JavaUtilList>)linesFromFileWithNSString:(NSString *)filename
                                 withNSString:(NSString *)encoding
                                  withBoolean:(jboolean)ignoreHeader {
  return EduStanfordNlpIoIOUtils_linesFromFileWithNSString_withNSString_withBoolean_(filename, encoding, ignoreHeader);
}

+ (NSString *)backupNameWithNSString:(NSString *)filename {
  return EduStanfordNlpIoIOUtils_backupNameWithNSString_(filename);
}

+ (JavaIoFile *)backupFileWithJavaIoFile:(JavaIoFile *)file {
  return EduStanfordNlpIoIOUtils_backupFileWithJavaIoFile_(file);
}

+ (jboolean)renameToBackupNameWithJavaIoFile:(JavaIoFile *)file {
  return EduStanfordNlpIoIOUtils_renameToBackupNameWithJavaIoFile_(file);
}

+ (JavaIoFile *)getJNLPLocalScratch {
  return EduStanfordNlpIoIOUtils_getJNLPLocalScratch();
}

+ (JavaIoFile *)ensureDirWithJavaIoFile:(JavaIoFile *)tgtDir {
  return EduStanfordNlpIoIOUtils_ensureDirWithJavaIoFile_(tgtDir);
}

+ (jboolean)deleteDirRecursivelyWithJavaIoFile:(JavaIoFile *)dir {
  return EduStanfordNlpIoIOUtils_deleteDirRecursivelyWithJavaIoFile_(dir);
}

+ (NSString *)getExtensionWithNSString:(NSString *)fileName {
  return EduStanfordNlpIoIOUtils_getExtensionWithNSString_(fileName);
}

+ (JavaIoReader *)encodedInputStreamReaderWithJavaIoInputStream:(JavaIoInputStream *)stream
                                                   withNSString:(NSString *)encoding {
  return EduStanfordNlpIoIOUtils_encodedInputStreamReaderWithJavaIoInputStream_withNSString_(stream, encoding);
}

+ (JavaIoWriter *)encodedOutputStreamWriterWithJavaIoOutputStream:(JavaIoOutputStream *)stream
                                                     withNSString:(NSString *)encoding {
  return EduStanfordNlpIoIOUtils_encodedOutputStreamWriterWithJavaIoOutputStream_withNSString_(stream, encoding);
}

+ (JavaIoPrintWriter *)encodedOutputStreamPrintWriterWithJavaIoOutputStream:(JavaIoOutputStream *)stream
                                                               withNSString:(NSString *)encoding
                                                                withBoolean:(jboolean)autoFlush {
  return EduStanfordNlpIoIOUtils_encodedOutputStreamPrintWriterWithJavaIoOutputStream_withNSString_withBoolean_(stream, encoding, autoFlush);
}

+ (void)copyFileWithJavaIoFile:(JavaIoFile *)source
                withJavaIoFile:(JavaIoFile *)target {
  EduStanfordNlpIoIOUtils_copyFileWithJavaIoFile_withJavaIoFile_(source, target);
}

+ (void)cpWithJavaIoFile:(JavaIoFile *)source
          withJavaIoFile:(JavaIoFile *)target
             withBoolean:(jboolean)recursive {
  EduStanfordNlpIoIOUtils_cpWithJavaIoFile_withJavaIoFile_withBoolean_(source, target, recursive);
}

+ (void)cpWithJavaIoFile:(JavaIoFile *)source
          withJavaIoFile:(JavaIoFile *)target {
  EduStanfordNlpIoIOUtils_cpWithJavaIoFile_withJavaIoFile_(source, target);
}

+ (IOSObjectArray *)tailWithJavaIoFile:(JavaIoFile *)f
                               withInt:(jint)n
                          withNSString:(NSString *)encoding {
  return EduStanfordNlpIoIOUtils_tailWithJavaIoFile_withInt_withNSString_(f, n, encoding);
}

+ (IOSObjectArray *)tailWithJavaIoFile:(JavaIoFile *)f
                               withInt:(jint)n {
  return EduStanfordNlpIoIOUtils_tailWithJavaIoFile_withInt_(f, n);
}

+ (void)deleteRecursivelyWithJavaIoFile:(JavaIoFile *)file {
  EduStanfordNlpIoIOUtils_deleteRecursivelyWithJavaIoFile_(file);
}

+ (void)consoleWithNSString:(NSString *)prompt
withJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)callback {
  EduStanfordNlpIoIOUtils_consoleWithNSString_withJavaUtilFunctionConsumer_(prompt, callback);
}

+ (NSString *)promptUserInputWithJavaUtilOptional:(JavaUtilOptional *)prompt {
  return EduStanfordNlpIoIOUtils_promptUserInputWithJavaUtilOptional_(prompt);
}

+ (void)consoleWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)callback {
  EduStanfordNlpIoIOUtils_consoleWithJavaUtilFunctionConsumer_(callback);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x9, 0, 1, 2, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x9, 0, 3, 2, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x9, 0, 4, 2, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x9, 5, 1, -1, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x9, 6, 1, 2, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x9, 7, 1, -1, -1, -1, -1 },
    { NULL, "LJavaIoOutputStream;", 0xa, 8, 9, 2, -1, -1, -1 },
    { NULL, "V", 0x9, 10, 11, 2, -1, -1, -1 },
    { NULL, "V", 0x9, 12, 11, -1, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x9, 13, 11, 2, -1, -1, -1 },
    { NULL, "V", 0x9, 13, 14, 2, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x9, 15, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 15, 14, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x9, 16, 17, 18, 19, -1, -1 },
    { NULL, "LJavaIoDataInputStream;", 0x9, 20, 9, 2, -1, -1, -1 },
    { NULL, "LJavaIoDataOutputStream;", 0x9, 21, 9, 2, -1, -1, -1 },
    { NULL, "LNSObject;", 0x9, 22, 9, 18, 23, -1, -1 },
    { NULL, "LNSObject;", 0x9, 24, 14, -1, 25, -1, -1 },
    { NULL, "LNSObject;", 0x9, 26, 27, 18, 28, -1, -1 },
    { NULL, "LNSObject;", 0x9, 16, 9, 18, 23, -1, -1 },
    { NULL, "LNSObject;", 0x9, 29, 17, -1, 19, -1, -1 },
    { NULL, "I", 0x9, 30, 9, 2, -1, -1, -1 },
    { NULL, "LJavaIoObjectOutputStream;", 0x9, 31, 9, 2, -1, -1, -1 },
    { NULL, "LJavaIoObjectInputStream;", 0x9, 32, 9, 2, -1, -1, -1 },
    { NULL, "LJavaIoInputStream;", 0xa, 33, 9, 34, -1, -1, -1 },
    { NULL, "Z", 0x9, 35, 9, -1, -1, -1, -1 },
    { NULL, "LJavaIoInputStream;", 0x9, 36, 9, 2, -1, -1, -1 },
    { NULL, "LJavaIoInputStream;", 0x9, 37, 17, 38, -1, -1, -1 },
    { NULL, "LJavaIoBufferedReader;", 0x9, 39, 17, -1, -1, -1, -1 },
    { NULL, "LJavaIoBufferedReader;", 0x9, 39, 40, -1, -1, -1, -1 },
    { NULL, "LJavaIoBufferedReader;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaIoBufferedReader;", 0x9, 41, 9, 2, -1, -1, -1 },
    { NULL, "LJavaIoBufferedReader;", 0x9, 42, 9, 2, -1, -1, -1 },
    { NULL, "LJavaIoBufferedReader;", 0x9, 42, 14, 2, -1, -1, -1 },
    { NULL, "LJavaLangIterable;", 0x9, 43, 9, -1, 44, -1, -1 },
    { NULL, "LJavaLangIterable;", 0x9, 43, 14, -1, 45, -1, -1 },
    { NULL, "LJavaLangIterable;", 0x9, 43, 17, -1, 46, -1, -1 },
    { NULL, "LJavaLangIterable;", 0x9, 43, 47, -1, 48, -1, -1 },
    { NULL, "LJavaLangIterable;", 0x9, 43, 49, -1, 50, -1, -1 },
    { NULL, "LJavaLangIterable;", 0x9, 51, 52, -1, 53, -1, -1 },
    { NULL, "LJavaLangIterable;", 0x9, 51, 54, -1, 55, -1, -1 },
    { NULL, "V", 0x9, 56, 57, -1, -1, -1, -1 },
    { NULL, "LJavaLangIterable;", 0x9, 58, 17, -1, 59, -1, -1 },
    { NULL, "LJavaLangIterable;", 0x9, 58, 40, -1, 60, -1, -1 },
    { NULL, "LJavaLangIterable;", 0x9, 58, 61, -1, 62, -1, -1 },
    { NULL, "LNSString;", 0x9, 63, 17, 2, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 63, 40, 2, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 64, 9, 2, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 64, 17, 2, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 63, 14, 2, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 65, 14, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 63, 9, 2, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 66, 67, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 68, 67, 2, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 69, 70, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 68, 71, 2, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 66, 71, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 68, 9, 72, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 66, 9, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 65, 17, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 65, 9, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 73, 74, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 75, 76, 77, -1, -1, -1 },
    { NULL, "V", 0x9, 78, 79, 2, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 80, 81, 2, 82, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 80, 9, 2, 83, -1, -1 },
    { NULL, "LJavaUtilLinkedList;", 0x9, 84, 85, -1, 86, -1, -1 },
    { NULL, "LJavaUtilLinkedList;", 0x9, 84, 87, 2, 88, -1, -1 },
    { NULL, "LJavaIoInputStream;", 0x9, 89, 9, 2, -1, -1, -1 },
    { NULL, "LJavaIoOutputStream;", 0x9, 90, 9, 2, -1, -1, -1 },
    { NULL, "LJavaIoOutputStream;", 0x9, 90, 91, 2, -1, -1, -1 },
    { NULL, "LJavaIoBufferedReader;", 0x9, 92, 9, 2, -1, 93, -1 },
    { NULL, "LJavaIoBufferedReader;", 0x9, 94, 9, 2, -1, 95, -1 },
    { NULL, "LJavaIoPrintWriter;", 0x9, 96, 17, 2, -1, -1, -1 },
    { NULL, "LJavaIoPrintWriter;", 0x9, 96, 40, 2, -1, -1, -1 },
    { NULL, "LJavaIoPrintWriter;", 0x9, 96, 9, 2, -1, -1, -1 },
    { NULL, "LJavaIoPrintWriter;", 0x9, 97, 9, -1, -1, -1, -1 },
    { NULL, "LJavaIoPrintWriter;", 0x9, 98, 9, -1, -1, -1, -1 },
    { NULL, "LJavaIoPrintWriter;", 0x9, 96, 14, 2, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x9, 99, 87, 2, 100, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 101, 102, 103, 104, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x9, 105, 9, 2, 106, -1, -1 },
    { NULL, "LNSString;", 0x9, 107, 9, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 107, 14, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 108, 9, -1, 109, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 108, 14, -1, 110, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 108, 111, -1, 112, -1, -1 },
    { NULL, "LNSString;", 0x9, 113, 9, -1, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x9, 114, 17, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 115, 17, -1, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x9, 116, 17, 2, -1, -1, -1 },
    { NULL, "Z", 0x9, 117, 17, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 118, 9, -1, -1, -1, -1 },
    { NULL, "LJavaIoReader;", 0x9, 119, 76, 2, -1, -1, -1 },
    { NULL, "LJavaIoWriter;", 0x9, 120, 121, 2, -1, -1, -1 },
    { NULL, "LJavaIoPrintWriter;", 0x9, 122, 123, 2, -1, -1, -1 },
    { NULL, "V", 0xa, 124, 125, 2, -1, -1, -1 },
    { NULL, "V", 0x9, 126, 127, 2, -1, -1, -1 },
    { NULL, "V", 0x9, 126, 125, 2, -1, -1, -1 },
    { NULL, "[LNSString;", 0x9, 128, 129, 2, -1, -1, -1 },
    { NULL, "[LNSString;", 0x9, 128, 130, 2, -1, -1, -1 },
    { NULL, "V", 0x9, 131, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 132, 133, 2, 134, -1, -1 },
    { NULL, "LNSString;", 0x9, 135, 136, 2, 137, -1, -1 },
    { NULL, "V", 0x9, 132, 138, 2, 139, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(writeObjectToFileWithId:withNSString:);
  methods[2].selector = @selector(writeObjectToFileWithId:withJavaIoFile:);
  methods[3].selector = @selector(writeObjectToFileWithId:withJavaIoFile:withBoolean:);
  methods[4].selector = @selector(writeObjectToFileNoExceptionsWithId:withNSString:);
  methods[5].selector = @selector(writeObjectToTempFileWithId:withNSString:);
  methods[6].selector = @selector(writeObjectToTempFileNoExceptionsWithId:withNSString:);
  methods[7].selector = @selector(getBufferedOutputStreamWithNSString:);
  methods[8].selector = @selector(writeStringToFileWithNSString:withNSString:withNSString:);
  methods[9].selector = @selector(writeStringToFileNoExceptionsWithNSString:withNSString:withNSString:);
  methods[10].selector = @selector(writeStringToTempFileWithNSString:withNSString:withNSString:);
  methods[11].selector = @selector(writeStringToTempFileWithNSString:withNSString:);
  methods[12].selector = @selector(writeStringToTempFileNoExceptionsWithNSString:withNSString:withNSString:);
  methods[13].selector = @selector(writeStringToTempFileNoExceptionsWithNSString:withNSString:);
  methods[14].selector = @selector(readObjectFromFileWithJavaIoFile:);
  methods[15].selector = @selector(getDataInputStreamWithNSString:);
  methods[16].selector = @selector(getDataOutputStreamWithNSString:);
  methods[17].selector = @selector(readObjectFromURLOrClasspathOrFileSystemWithNSString:);
  methods[18].selector = @selector(readObjectAnnouncingTimingFromURLOrClasspathOrFileSystemWithNSString:withNSString:);
  methods[19].selector = @selector(readObjectFromObjectStreamWithJavaIoObjectInputStream:);
  methods[20].selector = @selector(readObjectFromFileWithNSString:);
  methods[21].selector = @selector(readObjectFromFileNoExceptionsWithJavaIoFile:);
  methods[22].selector = @selector(lineCountWithNSString:);
  methods[23].selector = @selector(writeStreamFromStringWithNSString:);
  methods[24].selector = @selector(readStreamFromStringWithNSString:);
  methods[25].selector = @selector(findStreamInClasspathOrFileSystemWithNSString:);
  methods[26].selector = @selector(existsInClasspathOrFileSystemWithNSString:);
  methods[27].selector = @selector(getInputStreamFromURLOrClasspathOrFileSystemWithNSString:);
  methods[28].selector = @selector(inputStreamFromFileWithJavaIoFile:);
  methods[29].selector = @selector(readerFromFileWithJavaIoFile:);
  methods[30].selector = @selector(readerFromFileWithJavaIoFile:withNSString:);
  methods[31].selector = @selector(readerFromStdin);
  methods[32].selector = @selector(readerFromStdinWithNSString:);
  methods[33].selector = @selector(readerFromStringWithNSString:);
  methods[34].selector = @selector(readerFromStringWithNSString:withNSString:);
  methods[35].selector = @selector(readLinesWithNSString:);
  methods[36].selector = @selector(readLinesWithNSString:withNSString:);
  methods[37].selector = @selector(readLinesWithJavaIoFile:);
  methods[38].selector = @selector(readLinesWithJavaIoFile:withIOSClass:);
  methods[39].selector = @selector(readLinesWithJavaIoFile:withIOSClass:withNSString:);
  methods[40].selector = @selector(getLineIterableWithJavaIoReader:withBoolean:);
  methods[41].selector = @selector(getLineIterableWithJavaIoReader:withInt:withBoolean:);
  methods[42].selector = @selector(closeIgnoringExceptionsWithJavaIoCloseable:);
  methods[43].selector = @selector(iterFilesRecursiveWithJavaIoFile:);
  methods[44].selector = @selector(iterFilesRecursiveWithJavaIoFile:withNSString:);
  methods[45].selector = @selector(iterFilesRecursiveWithJavaIoFile:withJavaUtilRegexPattern:);
  methods[46].selector = @selector(slurpFileWithJavaIoFile:);
  methods[47].selector = @selector(slurpFileWithJavaIoFile:withNSString:);
  methods[48].selector = @selector(slurpGZippedFileWithNSString:);
  methods[49].selector = @selector(slurpGZippedFileWithJavaIoFile:);
  methods[50].selector = @selector(slurpFileWithNSString:withNSString:);
  methods[51].selector = @selector(slurpFileNoExceptionsWithNSString:withNSString:);
  methods[52].selector = @selector(slurpFileWithNSString:);
  methods[53].selector = @selector(slurpURLNoExceptionsWithJavaNetURL:withNSString:);
  methods[54].selector = @selector(slurpURLWithJavaNetURL:withNSString:);
  methods[55].selector = @selector(getUrlEncodingWithJavaNetURLConnection:);
  methods[56].selector = @selector(slurpURLWithJavaNetURL:);
  methods[57].selector = @selector(slurpURLNoExceptionsWithJavaNetURL:);
  methods[58].selector = @selector(slurpURLWithNSString:);
  methods[59].selector = @selector(slurpURLNoExceptionsWithNSString:);
  methods[60].selector = @selector(slurpFileNoExceptionsWithJavaIoFile:);
  methods[61].selector = @selector(slurpFileNoExceptionsWithNSString:);
  methods[62].selector = @selector(slurpReaderWithJavaIoReader:);
  methods[63].selector = @selector(slurpInputStreamWithJavaIoInputStream:withNSString:);
  methods[64].selector = @selector(writeStreamToStreamWithJavaIoInputStream:withJavaIoOutputStream:);
  methods[65].selector = @selector(readCSVWithHeaderWithNSString:withChar:withChar:);
  methods[66].selector = @selector(readCSVWithHeaderWithNSString:);
  methods[67].selector = @selector(readCSVStrictlyWithCharArray:withInt:);
  methods[68].selector = @selector(readCSVStrictlyWithNSString:withInt:);
  methods[69].selector = @selector(getFileInputStreamWithNSString:);
  methods[70].selector = @selector(getFileOutputStreamWithNSString:);
  methods[71].selector = @selector(getFileOutputStreamWithNSString:withBoolean:);
  methods[72].selector = @selector(getBufferedFileReaderWithNSString:);
  methods[73].selector = @selector(getBufferedReaderFromClasspathOrFileSystemWithNSString:);
  methods[74].selector = @selector(getPrintWriterWithJavaIoFile:);
  methods[75].selector = @selector(getPrintWriterWithJavaIoFile:withNSString:);
  methods[76].selector = @selector(getPrintWriterWithNSString:);
  methods[77].selector = @selector(getPrintWriterIgnoringExceptionsWithNSString:);
  methods[78].selector = @selector(getPrintWriterOrDieWithNSString:);
  methods[79].selector = @selector(getPrintWriterWithNSString:withNSString:);
  methods[80].selector = @selector(readColumnSetWithNSString:withInt:);
  methods[81].selector = @selector(readObjectFromColumnsWithIOSClass:withNSString:withNSStringArray:withNSString:);
  methods[82].selector = @selector(readMapWithNSString:);
  methods[83].selector = @selector(stringFromFileWithNSString:);
  methods[84].selector = @selector(stringFromFileWithNSString:withNSString:);
  methods[85].selector = @selector(linesFromFileWithNSString:);
  methods[86].selector = @selector(linesFromFileWithNSString:withNSString:);
  methods[87].selector = @selector(linesFromFileWithNSString:withNSString:withBoolean:);
  methods[88].selector = @selector(backupNameWithNSString:);
  methods[89].selector = @selector(backupFileWithJavaIoFile:);
  methods[90].selector = @selector(renameToBackupNameWithJavaIoFile:);
  methods[91].selector = @selector(getJNLPLocalScratch);
  methods[92].selector = @selector(ensureDirWithJavaIoFile:);
  methods[93].selector = @selector(deleteDirRecursivelyWithJavaIoFile:);
  methods[94].selector = @selector(getExtensionWithNSString:);
  methods[95].selector = @selector(encodedInputStreamReaderWithJavaIoInputStream:withNSString:);
  methods[96].selector = @selector(encodedOutputStreamWriterWithJavaIoOutputStream:withNSString:);
  methods[97].selector = @selector(encodedOutputStreamPrintWriterWithJavaIoOutputStream:withNSString:withBoolean:);
  methods[98].selector = @selector(copyFileWithJavaIoFile:withJavaIoFile:);
  methods[99].selector = @selector(cpWithJavaIoFile:withJavaIoFile:withBoolean:);
  methods[100].selector = @selector(cpWithJavaIoFile:withJavaIoFile:);
  methods[101].selector = @selector(tailWithJavaIoFile:withInt:withNSString:);
  methods[102].selector = @selector(tailWithJavaIoFile:withInt:);
  methods[103].selector = @selector(deleteRecursivelyWithJavaIoFile:);
  methods[104].selector = @selector(consoleWithNSString:withJavaUtilFunctionConsumer:);
  methods[105].selector = @selector(promptUserInputWithJavaUtilOptional:);
  methods[106].selector = @selector(consoleWithJavaUtilFunctionConsumer:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "SLURP_BUFFER_SIZE", "I", .constantValue.asInt = EduStanfordNlpIoIOUtils_SLURP_BUFFER_SIZE, 0x1a, -1, -1, -1, -1 },
    { "eolChar", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 140, -1, -1 },
    { "defaultEncoding", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 141, -1, -1 },
    { "tab", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 142, -1, -1 },
    { "blacklistedPathsToRemove", "LJavaUtilSet;", .constantValue.asLong = 0, 0xa, -1, 143, 144, -1 },
  };
  static const void *ptrTable[] = { "writeObjectToFile", "LNSObject;LNSString;", "LJavaIoIOException;", "LNSObject;LJavaIoFile;", "LNSObject;LJavaIoFile;Z", "writeObjectToFileNoExceptions", "writeObjectToTempFile", "writeObjectToTempFileNoExceptions", "getBufferedOutputStream", "LNSString;", "writeStringToFile", "LNSString;LNSString;LNSString;", "writeStringToFileNoExceptions", "writeStringToTempFile", "LNSString;LNSString;", "writeStringToTempFileNoExceptions", "readObjectFromFile", "LJavaIoFile;", "LJavaIoIOException;LJavaLangClassNotFoundException;", "<T:Ljava/lang/Object;>(Ljava/io/File;)TT;", "getDataInputStream", "getDataOutputStream", "readObjectFromURLOrClasspathOrFileSystem", "<T:Ljava/lang/Object;>(Ljava/lang/String;)TT;", "readObjectAnnouncingTimingFromURLOrClasspathOrFileSystem", "<T:Ljava/lang/Object;>(Ljava/lang/String;Ljava/lang/String;)TT;", "readObjectFromObjectStream", "LJavaIoObjectInputStream;", "<T:Ljava/lang/Object;>(Ljava/io/ObjectInputStream;)TT;", "readObjectFromFileNoExceptions", "lineCount", "writeStreamFromString", "readStreamFromString", "findStreamInClasspathOrFileSystem", "LJavaIoFileNotFoundException;", "existsInClasspathOrFileSystem", "getInputStreamFromURLOrClasspathOrFileSystem", "inputStreamFromFile", "LEduStanfordNlpIoRuntimeIOException;", "readerFromFile", "LJavaIoFile;LNSString;", "readerFromStdin", "readerFromString", "readLines", "(Ljava/lang/String;)Ljava/lang/Iterable<Ljava/lang/String;>;", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Iterable<Ljava/lang/String;>;", "(Ljava/io/File;)Ljava/lang/Iterable<Ljava/lang/String;>;", "LJavaIoFile;LIOSClass;", "(Ljava/io/File;Ljava/lang/Class<+Ljava/io/InputStream;>;)Ljava/lang/Iterable<Ljava/lang/String;>;", "LJavaIoFile;LIOSClass;LNSString;", "(Ljava/io/File;Ljava/lang/Class<+Ljava/io/InputStream;>;Ljava/lang/String;)Ljava/lang/Iterable<Ljava/lang/String;>;", "getLineIterable", "LJavaIoReader;Z", "(Ljava/io/Reader;Z)Ljava/lang/Iterable<Ljava/lang/String;>;", "LJavaIoReader;IZ", "(Ljava/io/Reader;IZ)Ljava/lang/Iterable<Ljava/lang/String;>;", "closeIgnoringExceptions", "LJavaIoCloseable;", "iterFilesRecursive", "(Ljava/io/File;)Ljava/lang/Iterable<Ljava/io/File;>;", "(Ljava/io/File;Ljava/lang/String;)Ljava/lang/Iterable<Ljava/io/File;>;", "LJavaIoFile;LJavaUtilRegexPattern;", "(Ljava/io/File;Ljava/util/regex/Pattern;)Ljava/lang/Iterable<Ljava/io/File;>;", "slurpFile", "slurpGZippedFile", "slurpFileNoExceptions", "slurpURLNoExceptions", "LJavaNetURL;LNSString;", "slurpURL", "getUrlEncoding", "LJavaNetURLConnection;", "LJavaNetURL;", "LJavaLangException;", "slurpReader", "LJavaIoReader;", "slurpInputStream", "LJavaIoInputStream;LNSString;", "LJavaNioCharsetCharacterCodingException;", "writeStreamToStream", "LJavaIoInputStream;LJavaIoOutputStream;", "readCSVWithHeader", "LNSString;CC", "(Ljava/lang/String;CC)Ljava/util/List<Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;>;", "(Ljava/lang/String;)Ljava/util/List<Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;>;", "readCSVStrictly", "[CI", "([CI)Ljava/util/LinkedList<[Ljava/lang/String;>;", "LNSString;I", "(Ljava/lang/String;I)Ljava/util/LinkedList<[Ljava/lang/String;>;", "getFileInputStream", "getFileOutputStream", "LNSString;Z", "getBufferedFileReader", (void *)&EduStanfordNlpIoIOUtils__Annotations$0, "getBufferedReaderFromClasspathOrFileSystem", (void *)&EduStanfordNlpIoIOUtils__Annotations$1, "getPrintWriter", "getPrintWriterIgnoringExceptions", "getPrintWriterOrDie", "readColumnSet", "(Ljava/lang/String;I)Ljava/util/Set<Ljava/lang/String;>;", "readObjectFromColumns", "LIOSClass;LNSString;[LNSString;LNSString;", "LJavaIoIOException;LJavaLangInstantiationException;LJavaLangIllegalAccessException;LJavaLangNoSuchFieldException;LJavaLangNoSuchMethodException;LJavaLangReflectInvocationTargetException;", "<C:Ljava/lang/Object;>(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)Ljava/util/List<TC;>;", "readMap", "(Ljava/lang/String;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", "stringFromFile", "linesFromFile", "(Ljava/lang/String;)Ljava/util/List<Ljava/lang/String;>;", "(Ljava/lang/String;Ljava/lang/String;)Ljava/util/List<Ljava/lang/String;>;", "LNSString;LNSString;Z", "(Ljava/lang/String;Ljava/lang/String;Z)Ljava/util/List<Ljava/lang/String;>;", "backupName", "backupFile", "renameToBackupName", "ensureDir", "deleteDirRecursively", "getExtension", "encodedInputStreamReader", "encodedOutputStreamWriter", "LJavaIoOutputStream;LNSString;", "encodedOutputStreamPrintWriter", "LJavaIoOutputStream;LNSString;Z", "copyFile", "LJavaIoFile;LJavaIoFile;", "cp", "LJavaIoFile;LJavaIoFile;Z", "tail", "LJavaIoFile;ILNSString;", "LJavaIoFile;I", "deleteRecursively", "console", "LNSString;LJavaUtilFunctionConsumer;", "(Ljava/lang/String;Ljava/util/function/Consumer<Ljava/lang/String;>;)V", "promptUserInput", "LJavaUtilOptional;", "(Ljava/util/Optional<Ljava/lang/String;>;)Ljava/lang/String;", "LJavaUtilFunctionConsumer;", "(Ljava/util/function/Consumer<Ljava/lang/String;>;)V", &EduStanfordNlpIoIOUtils_eolChar, &EduStanfordNlpIoIOUtils_defaultEncoding, &EduStanfordNlpIoIOUtils_tab, &EduStanfordNlpIoIOUtils_blacklistedPathsToRemove, "Ljava/util/Set<Ljava/lang/String;>;", "LEduStanfordNlpIoIOUtils_GetLinesIterable;LEduStanfordNlpIoIOUtils_LineReaderIterable;LEduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable;" };
  static const J2ObjcClassInfo _EduStanfordNlpIoIOUtils = { "IOUtils", "edu.stanford.nlp.io", ptrTable, methods, fields, 7, 0x1, 107, 5, -1, 145, -1, -1, -1 };
  return &_EduStanfordNlpIoIOUtils;
}

+ (void)initialize {
  if (self == [EduStanfordNlpIoIOUtils class]) {
    EduStanfordNlpIoIOUtils_eolChar = JavaLangSystem_getPropertyWithNSString_(@"line.separator");
    EduStanfordNlpIoIOUtils_tab = JavaUtilRegexPattern_compileWithNSString_(@"\t");
    EduStanfordNlpIoIOUtils_blacklistedPathsToRemove = new_EduStanfordNlpIoIOUtils_$1_init();
    J2OBJC_SET_INITIALIZED(EduStanfordNlpIoIOUtils)
  }
}

@end

void EduStanfordNlpIoIOUtils_init(EduStanfordNlpIoIOUtils *self) {
  NSObject_init(self);
}

EduStanfordNlpIoIOUtils *new_EduStanfordNlpIoIOUtils_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpIoIOUtils, init)
}

EduStanfordNlpIoIOUtils *create_EduStanfordNlpIoIOUtils_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpIoIOUtils, init)
}

JavaIoFile *EduStanfordNlpIoIOUtils_writeObjectToFileWithId_withNSString_(id o, NSString *filename) {
  EduStanfordNlpIoIOUtils_initialize();
  return EduStanfordNlpIoIOUtils_writeObjectToFileWithId_withJavaIoFile_(o, new_JavaIoFile_initWithNSString_(filename));
}

JavaIoFile *EduStanfordNlpIoIOUtils_writeObjectToFileWithId_withJavaIoFile_(id o, JavaIoFile *file) {
  EduStanfordNlpIoIOUtils_initialize();
  return EduStanfordNlpIoIOUtils_writeObjectToFileWithId_withJavaIoFile_withBoolean_(o, file, false);
}

JavaIoFile *EduStanfordNlpIoIOUtils_writeObjectToFileWithId_withJavaIoFile_withBoolean_(id o, JavaIoFile *file, jboolean append) {
  EduStanfordNlpIoIOUtils_initialize();
  JavaIoOutputStream *os = new_JavaIoFileOutputStream_initWithJavaIoFile_withBoolean_(file, append);
  if ([((NSString *) nil_chk([((JavaIoFile *) nil_chk(file)) getName])) hasSuffix:@".gz"]) {
    os = new_JavaUtilZipGZIPOutputStream_initWithJavaIoOutputStream_(os);
  }
  os = new_JavaIoBufferedOutputStream_initWithJavaIoOutputStream_(os);
  JavaIoObjectOutputStream *oos = new_JavaIoObjectOutputStream_initWithJavaIoOutputStream_(os);
  [oos writeObjectWithId:o];
  [oos close];
  return file;
}

JavaIoFile *EduStanfordNlpIoIOUtils_writeObjectToFileNoExceptionsWithId_withNSString_(id o, NSString *filename) {
  EduStanfordNlpIoIOUtils_initialize();
  JavaIoFile *file = nil;
  JavaIoObjectOutputStream *oos = nil;
  @try {
    file = new_JavaIoFile_initWithNSString_(filename);
    oos = new_JavaIoObjectOutputStream_initWithJavaIoOutputStream_(new_JavaIoBufferedOutputStream_initWithJavaIoOutputStream_(new_JavaUtilZipGZIPOutputStream_initWithJavaIoOutputStream_(new_JavaIoFileOutputStream_initWithJavaIoFile_(file))));
    [oos writeObjectWithId:o];
    [oos close];
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
  }
  @finally {
    EduStanfordNlpIoIOUtils_closeIgnoringExceptionsWithJavaIoCloseable_(oos);
  }
  return file;
}

JavaIoFile *EduStanfordNlpIoIOUtils_writeObjectToTempFileWithId_withNSString_(id o, NSString *filename) {
  EduStanfordNlpIoIOUtils_initialize();
  JavaIoFile *file = JavaIoFile_createTempFileWithNSString_withNSString_(filename, @".tmp");
  [((JavaIoFile *) nil_chk(file)) deleteOnExit];
  (void) EduStanfordNlpIoIOUtils_writeObjectToFileWithId_withJavaIoFile_(o, file);
  return file;
}

JavaIoFile *EduStanfordNlpIoIOUtils_writeObjectToTempFileNoExceptionsWithId_withNSString_(id o, NSString *filename) {
  EduStanfordNlpIoIOUtils_initialize();
  @try {
    return EduStanfordNlpIoIOUtils_writeObjectToTempFileWithId_withNSString_(o, filename);
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    return nil;
  }
}

JavaIoOutputStream *EduStanfordNlpIoIOUtils_getBufferedOutputStreamWithNSString_(NSString *path) {
  EduStanfordNlpIoIOUtils_initialize();
  JavaIoOutputStream *os = new_JavaIoBufferedOutputStream_initWithJavaIoOutputStream_(new_JavaIoFileOutputStream_initWithNSString_(path));
  if ([((NSString *) nil_chk(path)) hasSuffix:@".gz"]) {
    os = new_JavaUtilZipGZIPOutputStream_initWithJavaIoOutputStream_(os);
  }
  return os;
}

void EduStanfordNlpIoIOUtils_writeStringToFileWithNSString_withNSString_withNSString_(NSString *contents, NSString *path, NSString *encoding) {
  EduStanfordNlpIoIOUtils_initialize();
  JavaIoOutputStream *writer = EduStanfordNlpIoIOUtils_getBufferedOutputStreamWithNSString_(path);
  [((JavaIoOutputStream *) nil_chk(writer)) writeWithByteArray:[((NSString *) nil_chk(contents)) getBytesWithCharsetName:encoding]];
  [writer close];
}

void EduStanfordNlpIoIOUtils_writeStringToFileNoExceptionsWithNSString_withNSString_withNSString_(NSString *contents, NSString *path, NSString *encoding) {
  EduStanfordNlpIoIOUtils_initialize();
  JavaIoOutputStream *writer = nil;
  @try {
    if ([((NSString *) nil_chk(path)) hasSuffix:@".gz"]) {
      writer = new_JavaUtilZipGZIPOutputStream_initWithJavaIoOutputStream_(new_JavaIoFileOutputStream_initWithNSString_(path));
    }
    else {
      writer = new_JavaIoBufferedOutputStream_initWithJavaIoOutputStream_(new_JavaIoFileOutputStream_initWithNSString_(path));
    }
    [writer writeWithByteArray:[((NSString *) nil_chk(contents)) getBytesWithCharsetName:encoding]];
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
  }
  @finally {
    if (writer != nil) {
      EduStanfordNlpIoIOUtils_closeIgnoringExceptionsWithJavaIoCloseable_(writer);
    }
  }
}

JavaIoFile *EduStanfordNlpIoIOUtils_writeStringToTempFileWithNSString_withNSString_withNSString_(NSString *contents, NSString *path, NSString *encoding) {
  EduStanfordNlpIoIOUtils_initialize();
  JavaIoOutputStream *writer;
  JavaIoFile *tmp = JavaIoFile_createTempFileWithNSString_withNSString_(path, @".tmp");
  if ([((NSString *) nil_chk(path)) hasSuffix:@".gz"]) {
    writer = new_JavaUtilZipGZIPOutputStream_initWithJavaIoOutputStream_(new_JavaIoFileOutputStream_initWithJavaIoFile_(tmp));
  }
  else {
    writer = new_JavaIoBufferedOutputStream_initWithJavaIoOutputStream_(new_JavaIoFileOutputStream_initWithJavaIoFile_(tmp));
  }
  [writer writeWithByteArray:[((NSString *) nil_chk(contents)) getBytesWithCharsetName:encoding]];
  return tmp;
}

void EduStanfordNlpIoIOUtils_writeStringToTempFileWithNSString_withNSString_(NSString *contents, NSString *path) {
  EduStanfordNlpIoIOUtils_initialize();
  (void) EduStanfordNlpIoIOUtils_writeStringToTempFileWithNSString_withNSString_withNSString_(contents, path, @"UTF-8");
}

JavaIoFile *EduStanfordNlpIoIOUtils_writeStringToTempFileNoExceptionsWithNSString_withNSString_withNSString_(NSString *contents, NSString *path, NSString *encoding) {
  EduStanfordNlpIoIOUtils_initialize();
  JavaIoOutputStream *writer = nil;
  JavaIoFile *tmp = nil;
  @try {
    tmp = JavaIoFile_createTempFileWithNSString_withNSString_(path, @".tmp");
    if ([((NSString *) nil_chk(path)) hasSuffix:@".gz"]) {
      writer = new_JavaUtilZipGZIPOutputStream_initWithJavaIoOutputStream_(new_JavaIoFileOutputStream_initWithJavaIoFile_(tmp));
    }
    else {
      writer = new_JavaIoBufferedOutputStream_initWithJavaIoOutputStream_(new_JavaIoFileOutputStream_initWithJavaIoFile_(tmp));
    }
    [writer writeWithByteArray:[((NSString *) nil_chk(contents)) getBytesWithCharsetName:encoding]];
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
  }
  @finally {
    EduStanfordNlpIoIOUtils_closeIgnoringExceptionsWithJavaIoCloseable_(writer);
  }
  return tmp;
}

void EduStanfordNlpIoIOUtils_writeStringToTempFileNoExceptionsWithNSString_withNSString_(NSString *contents, NSString *path) {
  EduStanfordNlpIoIOUtils_initialize();
  (void) EduStanfordNlpIoIOUtils_writeStringToTempFileNoExceptionsWithNSString_withNSString_withNSString_(contents, path, @"UTF-8");
}

id EduStanfordNlpIoIOUtils_readObjectFromFileWithJavaIoFile_(JavaIoFile *file) {
  EduStanfordNlpIoIOUtils_initialize();
  @try {
    JavaIoObjectInputStream *ois = new_JavaIoObjectInputStream_initWithJavaIoInputStream_(new_JavaIoBufferedInputStream_initWithJavaIoInputStream_(new_JavaUtilZipGZIPInputStream_initWithJavaIoInputStream_(new_JavaIoFileInputStream_initWithJavaIoFile_(file))));
    id o = [ois readObject];
    [ois close];
    return EduStanfordNlpUtilErasureUtils_uncheckedCastWithId_(o);
  }
  @catch (JavaUtilZipZipException *e) {
    JavaIoObjectInputStream *ois = new_JavaIoObjectInputStream_initWithJavaIoInputStream_(new_JavaIoBufferedInputStream_initWithJavaIoInputStream_(new_JavaIoFileInputStream_initWithJavaIoFile_(file)));
    id o = [ois readObject];
    [ois close];
    return EduStanfordNlpUtilErasureUtils_uncheckedCastWithId_(o);
  }
}

JavaIoDataInputStream *EduStanfordNlpIoIOUtils_getDataInputStreamWithNSString_(NSString *filenameUrlOrClassPath) {
  EduStanfordNlpIoIOUtils_initialize();
  return new_JavaIoDataInputStream_initWithJavaIoInputStream_(EduStanfordNlpIoIOUtils_getInputStreamFromURLOrClasspathOrFileSystemWithNSString_(filenameUrlOrClassPath));
}

JavaIoDataOutputStream *EduStanfordNlpIoIOUtils_getDataOutputStreamWithNSString_(NSString *filename) {
  EduStanfordNlpIoIOUtils_initialize();
  return new_JavaIoDataOutputStream_initWithJavaIoOutputStream_(EduStanfordNlpIoIOUtils_getBufferedOutputStreamWithNSString_((filename)));
}

id EduStanfordNlpIoIOUtils_readObjectFromURLOrClasspathOrFileSystemWithNSString_(NSString *filename) {
  EduStanfordNlpIoIOUtils_initialize();
  JavaIoObjectInputStream *ois = new_JavaIoObjectInputStream_initWithJavaIoInputStream_(EduStanfordNlpIoIOUtils_getInputStreamFromURLOrClasspathOrFileSystemWithNSString_(filename));
  id o = [ois readObject];
  [ois close];
  return EduStanfordNlpUtilErasureUtils_uncheckedCastWithId_(o);
}

id EduStanfordNlpIoIOUtils_readObjectAnnouncingTimingFromURLOrClasspathOrFileSystemWithNSString_withNSString_(NSString *msg, NSString *path) {
  EduStanfordNlpIoIOUtils_initialize();
  id obj;
  @try {
    EduStanfordNlpUtilTiming *timing = new_EduStanfordNlpUtilTiming_init();
    obj = EduStanfordNlpIoIOUtils_readObjectFromURLOrClasspathOrFileSystemWithNSString_(path);
    [timing done];
  }
  @catch (JavaIoIOException *e) {
    @throw new_EduStanfordNlpIoRuntimeIOException_initWithNSException_(e);
  }
  @catch (JavaLangClassNotFoundException *e) {
    @throw new_EduStanfordNlpIoRuntimeIOException_initWithNSException_(e);
  }
  return obj;
}

id EduStanfordNlpIoIOUtils_readObjectFromObjectStreamWithJavaIoObjectInputStream_(JavaIoObjectInputStream *ois) {
  EduStanfordNlpIoIOUtils_initialize();
  id o = [((JavaIoObjectInputStream *) nil_chk(ois)) readObject];
  return EduStanfordNlpUtilErasureUtils_uncheckedCastWithId_(o);
}

id EduStanfordNlpIoIOUtils_readObjectFromFileWithNSString_(NSString *filename) {
  EduStanfordNlpIoIOUtils_initialize();
  return EduStanfordNlpUtilErasureUtils_uncheckedCastWithId_(EduStanfordNlpIoIOUtils_readObjectFromFileWithJavaIoFile_(new_JavaIoFile_initWithNSString_(filename)));
}

id EduStanfordNlpIoIOUtils_readObjectFromFileNoExceptionsWithJavaIoFile_(JavaIoFile *file) {
  EduStanfordNlpIoIOUtils_initialize();
  id o = nil;
  @try {
    JavaIoObjectInputStream *ois = new_JavaIoObjectInputStream_initWithJavaIoInputStream_(new_JavaIoBufferedInputStream_initWithJavaIoInputStream_(new_JavaUtilZipGZIPInputStream_initWithJavaIoInputStream_(new_JavaIoFileInputStream_initWithJavaIoFile_(file))));
    o = [ois readObject];
    [ois close];
  }
  @catch (JavaIoIOException *e) {
    [((JavaIoIOException *) nil_chk(e)) printStackTrace];
  }
  @catch (JavaLangClassNotFoundException *e) {
    [((JavaLangClassNotFoundException *) nil_chk(e)) printStackTrace];
  }
  return EduStanfordNlpUtilErasureUtils_uncheckedCastWithId_(o);
}

jint EduStanfordNlpIoIOUtils_lineCountWithNSString_(NSString *textFileOrUrl) {
  EduStanfordNlpIoIOUtils_initialize();
  JavaIoBufferedReader *r = EduStanfordNlpIoIOUtils_readerFromStringWithNSString_(textFileOrUrl);
  jint numLines = 0;
  while ([((JavaIoBufferedReader *) nil_chk(r)) readLine] != nil) {
    numLines++;
  }
  return numLines;
}

JavaIoObjectOutputStream *EduStanfordNlpIoIOUtils_writeStreamFromStringWithNSString_(NSString *serializePath) {
  EduStanfordNlpIoIOUtils_initialize();
  JavaIoObjectOutputStream *oos;
  if ([((NSString *) nil_chk(serializePath)) hasSuffix:@".gz"]) {
    oos = new_JavaIoObjectOutputStream_initWithJavaIoOutputStream_(new_JavaIoBufferedOutputStream_initWithJavaIoOutputStream_(new_JavaUtilZipGZIPOutputStream_initWithJavaIoOutputStream_(new_JavaIoFileOutputStream_initWithNSString_(serializePath))));
  }
  else {
    oos = new_JavaIoObjectOutputStream_initWithJavaIoOutputStream_(new_JavaIoBufferedOutputStream_initWithJavaIoOutputStream_(new_JavaIoFileOutputStream_initWithNSString_(serializePath)));
  }
  return oos;
}

JavaIoObjectInputStream *EduStanfordNlpIoIOUtils_readStreamFromStringWithNSString_(NSString *filenameOrUrl) {
  EduStanfordNlpIoIOUtils_initialize();
  JavaIoInputStream *is = EduStanfordNlpIoIOUtils_getInputStreamFromURLOrClasspathOrFileSystemWithNSString_(filenameOrUrl);
  return new_JavaIoObjectInputStream_initWithJavaIoInputStream_(is);
}

JavaIoInputStream *EduStanfordNlpIoIOUtils_findStreamInClasspathOrFileSystemWithNSString_(NSString *name) {
  EduStanfordNlpIoIOUtils_initialize();
  JavaIoInputStream *is = [((JavaLangClassLoader *) nil_chk([EduStanfordNlpIoIOUtils_class_() getClassLoader])) getResourceAsStreamWithNSString:name];
  if (is == nil) {
    is = [((JavaLangClassLoader *) nil_chk([EduStanfordNlpIoIOUtils_class_() getClassLoader])) getResourceAsStreamWithNSString:[((NSString *) nil_chk(name)) replaceAll:@"\\\\" withReplacement:@"/"]];
    if (is == nil) {
      is = [((JavaLangClassLoader *) nil_chk([EduStanfordNlpIoIOUtils_class_() getClassLoader])) getResourceAsStreamWithNSString:[((NSString *) nil_chk([name replaceAll:@"\\\\" withReplacement:@"/"])) replaceAll:@"/+" withReplacement:@"/"]];
    }
  }
  if (is == nil) {
    is = new_JavaIoFileInputStream_initWithNSString_(name);
  }
  return is;
}

jboolean EduStanfordNlpIoIOUtils_existsInClasspathOrFileSystemWithNSString_(NSString *name) {
  EduStanfordNlpIoIOUtils_initialize();
  JavaIoInputStream *is = [((JavaLangClassLoader *) nil_chk([EduStanfordNlpIoIOUtils_class_() getClassLoader])) getResourceAsStreamWithNSString:name];
  if (is == nil) {
    is = [((JavaLangClassLoader *) nil_chk([EduStanfordNlpIoIOUtils_class_() getClassLoader])) getResourceAsStreamWithNSString:[((NSString *) nil_chk(name)) replaceAll:@"\\\\" withReplacement:@"/"]];
    if (is == nil) {
      is = [((JavaLangClassLoader *) nil_chk([EduStanfordNlpIoIOUtils_class_() getClassLoader])) getResourceAsStreamWithNSString:[((NSString *) nil_chk([name replaceAll:@"\\\\" withReplacement:@"/"])) replaceAll:@"/+" withReplacement:@"/"]];
    }
  }
  return is != nil || [new_JavaIoFile_initWithNSString_(name) exists];
}

JavaIoInputStream *EduStanfordNlpIoIOUtils_getInputStreamFromURLOrClasspathOrFileSystemWithNSString_(NSString *textFileOrUrl) {
  EduStanfordNlpIoIOUtils_initialize();
  JavaIoInputStream *in;
  if ([((NSString *) nil_chk(textFileOrUrl)) matches:@"https?://.*"]) {
    JavaNetURL *u = new_JavaNetURL_initWithNSString_(textFileOrUrl);
    JavaNetURLConnection *uc = [u openConnection];
    in = [((JavaNetURLConnection *) nil_chk(uc)) getInputStream];
  }
  else {
    @try {
      in = EduStanfordNlpIoIOUtils_findStreamInClasspathOrFileSystemWithNSString_(textFileOrUrl);
    }
    @catch (JavaIoFileNotFoundException *e) {
      @try {
        JavaNetURL *u = new_JavaNetURL_initWithNSString_(textFileOrUrl);
        JavaNetURLConnection *uc = [u openConnection];
        in = [((JavaNetURLConnection *) nil_chk(uc)) getInputStream];
      }
      @catch (JavaIoIOException *e2) {
        @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$$$", @"Unable to open \"", textFileOrUrl, @"\" as class path, filename or URL"));
      }
    }
  }
  if ([textFileOrUrl hasSuffix:@".gz"]) {
    @try {
      in = new_JavaUtilZipGZIPInputStream_initWithJavaIoInputStream_(in);
    }
    @catch (JavaIoIOException *e) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$", @"Resource or file looks like a gzip file, but is not: ", textFileOrUrl)];
    }
  }
  in = new_JavaIoBufferedInputStream_initWithJavaIoInputStream_(in);
  return in;
}

JavaIoInputStream *EduStanfordNlpIoIOUtils_inputStreamFromFileWithJavaIoFile_(JavaIoFile *file) {
  EduStanfordNlpIoIOUtils_initialize();
  @try {
    JavaIoInputStream *is = new_JavaIoBufferedInputStream_initWithJavaIoInputStream_(new_JavaIoFileInputStream_initWithJavaIoFile_(file));
    if ([((NSString *) nil_chk([((JavaIoFile *) nil_chk(file)) getName])) hasSuffix:@".gz"]) {
      is = new_JavaUtilZipGZIPInputStream_initWithJavaIoInputStream_(is);
    }
    return is;
  }
  @catch (JavaIoIOException *e) {
    @throw new_EduStanfordNlpIoRuntimeIOException_initWithNSException_(e);
  }
}

JavaIoBufferedReader *EduStanfordNlpIoIOUtils_readerFromFileWithJavaIoFile_(JavaIoFile *file) {
  EduStanfordNlpIoIOUtils_initialize();
  JavaIoInputStream *is = nil;
  @try {
    is = EduStanfordNlpIoIOUtils_inputStreamFromFileWithJavaIoFile_(file);
    return new_JavaIoBufferedReader_initWithJavaIoReader_(new_JavaIoInputStreamReader_initWithJavaIoInputStream_withNSString_(is, @"UTF-8"));
  }
  @catch (JavaIoIOException *ioe) {
    EduStanfordNlpIoIOUtils_closeIgnoringExceptionsWithJavaIoCloseable_(is);
    @throw new_EduStanfordNlpIoRuntimeIOException_initWithNSException_(ioe);
  }
}

JavaIoBufferedReader *EduStanfordNlpIoIOUtils_readerFromFileWithJavaIoFile_withNSString_(JavaIoFile *file, NSString *encoding) {
  EduStanfordNlpIoIOUtils_initialize();
  JavaIoInputStream *is = nil;
  @try {
    is = EduStanfordNlpIoIOUtils_inputStreamFromFileWithJavaIoFile_(file);
    if (encoding == nil) {
      return new_JavaIoBufferedReader_initWithJavaIoReader_(new_JavaIoInputStreamReader_initWithJavaIoInputStream_(is));
    }
    else {
      return new_JavaIoBufferedReader_initWithJavaIoReader_(new_JavaIoInputStreamReader_initWithJavaIoInputStream_withNSString_(is, encoding));
    }
  }
  @catch (JavaIoIOException *ioe) {
    EduStanfordNlpIoIOUtils_closeIgnoringExceptionsWithJavaIoCloseable_(is);
    @throw new_EduStanfordNlpIoRuntimeIOException_initWithNSException_(ioe);
  }
}

JavaIoBufferedReader *EduStanfordNlpIoIOUtils_readerFromStdin() {
  EduStanfordNlpIoIOUtils_initialize();
  return new_JavaIoBufferedReader_initWithJavaIoReader_(new_JavaIoInputStreamReader_initWithJavaIoInputStream_(JreLoadStatic(JavaLangSystem, in)));
}

JavaIoBufferedReader *EduStanfordNlpIoIOUtils_readerFromStdinWithNSString_(NSString *encoding) {
  EduStanfordNlpIoIOUtils_initialize();
  if (encoding == nil) {
    return new_JavaIoBufferedReader_initWithJavaIoReader_(new_JavaIoInputStreamReader_initWithJavaIoInputStream_(JreLoadStatic(JavaLangSystem, in)));
  }
  return new_JavaIoBufferedReader_initWithJavaIoReader_(new_JavaIoInputStreamReader_initWithJavaIoInputStream_withNSString_(JreLoadStatic(JavaLangSystem, in), encoding));
}

JavaIoBufferedReader *EduStanfordNlpIoIOUtils_readerFromStringWithNSString_(NSString *textFileOrUrl) {
  EduStanfordNlpIoIOUtils_initialize();
  return new_JavaIoBufferedReader_initWithJavaIoReader_(new_JavaIoInputStreamReader_initWithJavaIoInputStream_withNSString_(EduStanfordNlpIoIOUtils_getInputStreamFromURLOrClasspathOrFileSystemWithNSString_(textFileOrUrl), @"UTF-8"));
}

JavaIoBufferedReader *EduStanfordNlpIoIOUtils_readerFromStringWithNSString_withNSString_(NSString *textFileOrUrl, NSString *encoding) {
  EduStanfordNlpIoIOUtils_initialize();
  JavaIoInputStream *is = EduStanfordNlpIoIOUtils_getInputStreamFromURLOrClasspathOrFileSystemWithNSString_(textFileOrUrl);
  if (encoding == nil) {
    return new_JavaIoBufferedReader_initWithJavaIoReader_(new_JavaIoInputStreamReader_initWithJavaIoInputStream_(is));
  }
  return new_JavaIoBufferedReader_initWithJavaIoReader_(new_JavaIoInputStreamReader_initWithJavaIoInputStream_withNSString_(is, encoding));
}

id<JavaLangIterable> EduStanfordNlpIoIOUtils_readLinesWithNSString_(NSString *path) {
  EduStanfordNlpIoIOUtils_initialize();
  return EduStanfordNlpIoIOUtils_readLinesWithNSString_withNSString_(path, nil);
}

id<JavaLangIterable> EduStanfordNlpIoIOUtils_readLinesWithNSString_withNSString_(NSString *path, NSString *encoding) {
  EduStanfordNlpIoIOUtils_initialize();
  return new_EduStanfordNlpIoIOUtils_GetLinesIterable_initWithNSString_withIOSClass_withNSString_(path, nil, encoding);
}

id<JavaLangIterable> EduStanfordNlpIoIOUtils_readLinesWithJavaIoFile_(JavaIoFile *file) {
  EduStanfordNlpIoIOUtils_initialize();
  return EduStanfordNlpIoIOUtils_readLinesWithJavaIoFile_withIOSClass_withNSString_(file, nil, nil);
}

id<JavaLangIterable> EduStanfordNlpIoIOUtils_readLinesWithJavaIoFile_withIOSClass_(JavaIoFile *file, IOSClass *fileInputStreamWrapper) {
  EduStanfordNlpIoIOUtils_initialize();
  return EduStanfordNlpIoIOUtils_readLinesWithJavaIoFile_withIOSClass_withNSString_(file, fileInputStreamWrapper, nil);
}

id<JavaLangIterable> EduStanfordNlpIoIOUtils_readLinesWithJavaIoFile_withIOSClass_withNSString_(JavaIoFile *file, IOSClass *fileInputStreamWrapper, NSString *encoding) {
  EduStanfordNlpIoIOUtils_initialize();
  return new_EduStanfordNlpIoIOUtils_GetLinesIterable_initWithJavaIoFile_withIOSClass_withNSString_(file, fileInputStreamWrapper, encoding);
}

id<JavaLangIterable> EduStanfordNlpIoIOUtils_getLineIterableWithJavaIoReader_withBoolean_(JavaIoReader *r, jboolean includeEol) {
  EduStanfordNlpIoIOUtils_initialize();
  if (includeEol) {
    return new_EduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable_initWithJavaIoReader_(r);
  }
  else {
    return new_EduStanfordNlpIoIOUtils_LineReaderIterable_initWithJavaIoBufferedReader_(([r isKindOfClass:[JavaIoBufferedReader class]]) ? (JavaIoBufferedReader *) cast_chk(r, [JavaIoBufferedReader class]) : new_JavaIoBufferedReader_initWithJavaIoReader_(r));
  }
}

id<JavaLangIterable> EduStanfordNlpIoIOUtils_getLineIterableWithJavaIoReader_withInt_withBoolean_(JavaIoReader *r, jint bufferSize, jboolean includeEol) {
  EduStanfordNlpIoIOUtils_initialize();
  if (includeEol) {
    return new_EduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable_initWithJavaIoReader_withInt_(r, bufferSize);
  }
  else {
    return new_EduStanfordNlpIoIOUtils_LineReaderIterable_initWithJavaIoBufferedReader_(([r isKindOfClass:[JavaIoBufferedReader class]]) ? (JavaIoBufferedReader *) cast_chk(r, [JavaIoBufferedReader class]) : new_JavaIoBufferedReader_initWithJavaIoReader_withInt_(r, bufferSize));
  }
}

void EduStanfordNlpIoIOUtils_closeIgnoringExceptionsWithJavaIoCloseable_(id<JavaIoCloseable> c) {
  EduStanfordNlpIoIOUtils_initialize();
  if (c != nil) {
    @try {
      [c close];
    }
    @catch (JavaIoIOException *ioe) {
    }
  }
}

id<JavaLangIterable> EduStanfordNlpIoIOUtils_iterFilesRecursiveWithJavaIoFile_(JavaIoFile *dir) {
  EduStanfordNlpIoIOUtils_initialize();
  return EduStanfordNlpIoIOUtils_iterFilesRecursiveWithJavaIoFile_withJavaUtilRegexPattern_(dir, nil);
}

id<JavaLangIterable> EduStanfordNlpIoIOUtils_iterFilesRecursiveWithJavaIoFile_withNSString_(JavaIoFile *dir, NSString *ext) {
  EduStanfordNlpIoIOUtils_initialize();
  return EduStanfordNlpIoIOUtils_iterFilesRecursiveWithJavaIoFile_withJavaUtilRegexPattern_(dir, JavaUtilRegexPattern_compileWithNSString_(JreStrcat("$C", JavaUtilRegexPattern_quoteWithNSString_(ext), '$')));
}

id<JavaLangIterable> EduStanfordNlpIoIOUtils_iterFilesRecursiveWithJavaIoFile_withJavaUtilRegexPattern_(JavaIoFile *dir, JavaUtilRegexPattern *pattern) {
  EduStanfordNlpIoIOUtils_initialize();
  return new_EduStanfordNlpIoIOUtils_$2_initWithJavaIoFile_withJavaUtilRegexPattern_(dir, pattern);
}

NSString *EduStanfordNlpIoIOUtils_slurpFileWithJavaIoFile_(JavaIoFile *file) {
  EduStanfordNlpIoIOUtils_initialize();
  return EduStanfordNlpIoIOUtils_slurpFileWithJavaIoFile_withNSString_(file, nil);
}

NSString *EduStanfordNlpIoIOUtils_slurpFileWithJavaIoFile_withNSString_(JavaIoFile *file, NSString *encoding) {
  EduStanfordNlpIoIOUtils_initialize();
  return EduStanfordNlpIoIOUtils_slurpReaderWithJavaIoReader_(EduStanfordNlpIoIOUtils_encodedInputStreamReaderWithJavaIoInputStream_withNSString_(new_JavaIoFileInputStream_initWithJavaIoFile_(file), encoding));
}

NSString *EduStanfordNlpIoIOUtils_slurpGZippedFileWithNSString_(NSString *filename) {
  EduStanfordNlpIoIOUtils_initialize();
  JavaIoReader *r = EduStanfordNlpIoIOUtils_encodedInputStreamReaderWithJavaIoInputStream_withNSString_(new_JavaUtilZipGZIPInputStream_initWithJavaIoInputStream_(new_JavaIoFileInputStream_initWithNSString_(filename)), nil);
  return EduStanfordNlpIoIOUtils_slurpReaderWithJavaIoReader_(r);
}

NSString *EduStanfordNlpIoIOUtils_slurpGZippedFileWithJavaIoFile_(JavaIoFile *file) {
  EduStanfordNlpIoIOUtils_initialize();
  JavaIoReader *r = EduStanfordNlpIoIOUtils_encodedInputStreamReaderWithJavaIoInputStream_withNSString_(new_JavaUtilZipGZIPInputStream_initWithJavaIoInputStream_(new_JavaIoFileInputStream_initWithJavaIoFile_(file)), nil);
  return EduStanfordNlpIoIOUtils_slurpReaderWithJavaIoReader_(r);
}

NSString *EduStanfordNlpIoIOUtils_slurpFileWithNSString_withNSString_(NSString *filename, NSString *encoding) {
  EduStanfordNlpIoIOUtils_initialize();
  JavaIoReader *r = EduStanfordNlpIoIOUtils_readerFromStringWithNSString_withNSString_(filename, encoding);
  return EduStanfordNlpIoIOUtils_slurpReaderWithJavaIoReader_(r);
}

NSString *EduStanfordNlpIoIOUtils_slurpFileNoExceptionsWithNSString_withNSString_(NSString *filename, NSString *encoding) {
  EduStanfordNlpIoIOUtils_initialize();
  @try {
    return EduStanfordNlpIoIOUtils_slurpFileWithNSString_withNSString_(filename, encoding);
  }
  @catch (JavaIoIOException *e) {
    @throw new_EduStanfordNlpIoRuntimeIOException_initWithNSString_withNSException_(@"slurpFile IO problem", e);
  }
}

NSString *EduStanfordNlpIoIOUtils_slurpFileWithNSString_(NSString *filename) {
  EduStanfordNlpIoIOUtils_initialize();
  return EduStanfordNlpIoIOUtils_slurpFileWithNSString_withNSString_(filename, EduStanfordNlpIoIOUtils_defaultEncoding);
}

NSString *EduStanfordNlpIoIOUtils_slurpURLNoExceptionsWithJavaNetURL_withNSString_(JavaNetURL *u, NSString *encoding) {
  EduStanfordNlpIoIOUtils_initialize();
  @try {
    return EduStanfordNlpIoIOUtils_slurpURLWithJavaNetURL_withNSString_(u, encoding);
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    return nil;
  }
}

NSString *EduStanfordNlpIoIOUtils_slurpURLWithJavaNetURL_withNSString_(JavaNetURL *u, NSString *encoding) {
  EduStanfordNlpIoIOUtils_initialize();
  NSString *lineSeparator = JavaLangSystem_getPropertyWithNSString_(@"line.separator");
  JavaNetURLConnection *uc = [((JavaNetURL *) nil_chk(u)) openConnection];
  [((JavaNetURLConnection *) nil_chk(uc)) setReadTimeoutWithInt:30000];
  JavaIoInputStream *is;
  @try {
    is = [uc getInputStream];
  }
  @catch (JavaNetSocketTimeoutException *e) {
    return @"";
  }
  JavaIoBufferedReader *br = new_JavaIoBufferedReader_initWithJavaIoReader_(new_JavaIoInputStreamReader_initWithJavaIoInputStream_withNSString_(is, encoding));
  JavaLangStringBuilder *buff = new_JavaLangStringBuilder_initWithInt_(EduStanfordNlpIoIOUtils_SLURP_BUFFER_SIZE);
  for (NSString *temp; (temp = [br readLine]) != nil; ) {
    (void) [buff appendWithNSString:temp];
    (void) [buff appendWithNSString:lineSeparator];
  }
  [br close];
  return [buff description];
}

NSString *EduStanfordNlpIoIOUtils_getUrlEncodingWithJavaNetURLConnection_(JavaNetURLConnection *connection) {
  EduStanfordNlpIoIOUtils_initialize();
  NSString *contentType = [((JavaNetURLConnection *) nil_chk(connection)) getContentType];
  IOSObjectArray *values = [((NSString *) nil_chk(contentType)) split:@";"];
  NSString *charset = EduStanfordNlpIoIOUtils_defaultEncoding;
  {
    IOSObjectArray *a__ = values;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *value = *b__++;
      value = [((NSString *) nil_chk(value)) trim];
      if ([((NSString *) nil_chk([((NSString *) nil_chk(value)) lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, ENGLISH)])) hasPrefix:@"charset="]) {
        charset = [value substring:((jint) [@"charset=" length])];
      }
    }
  }
  return charset;
}

NSString *EduStanfordNlpIoIOUtils_slurpURLWithJavaNetURL_(JavaNetURL *u) {
  EduStanfordNlpIoIOUtils_initialize();
  NSString *lineSeparator = JavaLangSystem_getPropertyWithNSString_(@"line.separator");
  JavaNetURLConnection *uc = [((JavaNetURL *) nil_chk(u)) openConnection];
  NSString *encoding = EduStanfordNlpIoIOUtils_getUrlEncodingWithJavaNetURLConnection_(uc);
  JavaIoInputStream *is = [((JavaNetURLConnection *) nil_chk(uc)) getInputStream];
  JavaIoBufferedReader *br = new_JavaIoBufferedReader_initWithJavaIoReader_(new_JavaIoInputStreamReader_initWithJavaIoInputStream_withNSString_(is, encoding));
  JavaLangStringBuilder *buff = new_JavaLangStringBuilder_initWithInt_(EduStanfordNlpIoIOUtils_SLURP_BUFFER_SIZE);
  for (NSString *temp; (temp = [br readLine]) != nil; ) {
    (void) [buff appendWithNSString:temp];
    (void) [buff appendWithNSString:lineSeparator];
  }
  [br close];
  return [buff description];
}

NSString *EduStanfordNlpIoIOUtils_slurpURLNoExceptionsWithJavaNetURL_(JavaNetURL *u) {
  EduStanfordNlpIoIOUtils_initialize();
  @try {
    return EduStanfordNlpIoIOUtils_slurpURLWithJavaNetURL_(u);
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    return nil;
  }
}

NSString *EduStanfordNlpIoIOUtils_slurpURLWithNSString_(NSString *path) {
  EduStanfordNlpIoIOUtils_initialize();
  return EduStanfordNlpIoIOUtils_slurpURLWithJavaNetURL_(new_JavaNetURL_initWithNSString_(path));
}

NSString *EduStanfordNlpIoIOUtils_slurpURLNoExceptionsWithNSString_(NSString *path) {
  EduStanfordNlpIoIOUtils_initialize();
  @try {
    return EduStanfordNlpIoIOUtils_slurpURLWithNSString_(path);
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    return nil;
  }
}

NSString *EduStanfordNlpIoIOUtils_slurpFileNoExceptionsWithJavaIoFile_(JavaIoFile *file) {
  EduStanfordNlpIoIOUtils_initialize();
  @try {
    return EduStanfordNlpIoIOUtils_slurpReaderWithJavaIoReader_(EduStanfordNlpIoIOUtils_encodedInputStreamReaderWithJavaIoInputStream_withNSString_(new_JavaIoFileInputStream_initWithJavaIoFile_(file), nil));
  }
  @catch (JavaIoIOException *e) {
    @throw new_EduStanfordNlpIoRuntimeIOException_initWithNSException_(e);
  }
}

NSString *EduStanfordNlpIoIOUtils_slurpFileNoExceptionsWithNSString_(NSString *filename) {
  EduStanfordNlpIoIOUtils_initialize();
  @try {
    return EduStanfordNlpIoIOUtils_slurpFileWithNSString_(filename);
  }
  @catch (JavaIoIOException *e) {
    @throw new_EduStanfordNlpIoRuntimeIOException_initWithNSException_(e);
  }
}

NSString *EduStanfordNlpIoIOUtils_slurpReaderWithJavaIoReader_(JavaIoReader *reader) {
  EduStanfordNlpIoIOUtils_initialize();
  JavaIoBufferedReader *r = new_JavaIoBufferedReader_initWithJavaIoReader_(reader);
  JavaLangStringBuilder *buff = new_JavaLangStringBuilder_init();
  @try {
    IOSCharArray *chars = [IOSCharArray newArrayWithLength:EduStanfordNlpIoIOUtils_SLURP_BUFFER_SIZE];
    while (true) {
      jint amountRead = [r readWithCharArray:chars withInt:0 withInt:EduStanfordNlpIoIOUtils_SLURP_BUFFER_SIZE];
      if (amountRead < 0) {
        break;
      }
      (void) [buff appendWithCharArray:chars withInt:0 withInt:amountRead];
    }
    [r close];
  }
  @catch (JavaLangException *e) {
    @throw new_EduStanfordNlpIoRuntimeIOException_initWithNSString_withNSException_(@"slurpReader IO problem", e);
  }
  return [buff description];
}

NSString *EduStanfordNlpIoIOUtils_slurpInputStreamWithJavaIoInputStream_withNSString_(JavaIoInputStream *input, NSString *encoding) {
  EduStanfordNlpIoIOUtils_initialize();
  JavaLangStringBuilder *buff = new_JavaLangStringBuilder_init();
  JavaNioCharsetCharsetDecoder *decoder = [((JavaNioCharsetCharset *) nil_chk(JavaNioCharsetCharset_forNameWithNSString_(encoding))) newDecoder];
  @try {
    IOSByteArray *chars = [IOSByteArray newArrayWithLength:EduStanfordNlpIoIOUtils_SLURP_BUFFER_SIZE];
    while (true) {
      jint amountRead = [((JavaIoInputStream *) nil_chk(input)) readWithByteArray:chars withInt:0 withInt:EduStanfordNlpIoIOUtils_SLURP_BUFFER_SIZE];
      if (amountRead < 0) {
        break;
      }
      JavaNioCharBuffer *chunk = [((JavaNioCharsetCharsetDecoder *) nil_chk(decoder)) decodeWithJavaNioByteBuffer:JavaNioByteBuffer_wrapWithByteArray_(chars)];
      (void) [buff appendWithCharArray:[((JavaNioCharBuffer *) nil_chk(chunk)) array] withInt:0 withInt:amountRead];
    }
    [((JavaIoInputStream *) nil_chk(input)) close];
  }
  @catch (JavaIoIOException *e) {
    @throw new_EduStanfordNlpIoRuntimeIOException_initWithNSString_withNSException_(@"slurpReader IO problem", e);
  }
  return [buff description];
}

void EduStanfordNlpIoIOUtils_writeStreamToStreamWithJavaIoInputStream_withJavaIoOutputStream_(JavaIoInputStream *input, JavaIoOutputStream *output) {
  EduStanfordNlpIoIOUtils_initialize();
  IOSByteArray *buffer = [IOSByteArray newArrayWithLength:4096];
  while (true) {
    jint len = [((JavaIoInputStream *) nil_chk(input)) readWithByteArray:buffer];
    if (len == -1) {
      break;
    }
    [((JavaIoOutputStream *) nil_chk(output)) writeWithByteArray:buffer withInt:0 withInt:len];
  }
}

id<JavaUtilList> EduStanfordNlpIoIOUtils_readCSVWithHeaderWithNSString_withChar_withChar_(NSString *path, jchar quoteChar, jchar escapeChar) {
  EduStanfordNlpIoIOUtils_initialize();
  IOSObjectArray *labels = nil;
  id<JavaUtilList> rows = EduStanfordNlpUtilGenerics_newArrayList();
  for (NSString * __strong line in nil_chk(EduStanfordNlpIoIOUtils_readLinesWithNSString_(path))) {
    if (labels == nil) {
      labels = EduStanfordNlpUtilStringUtils_splitOnCharWithQuotingWithNSString_withChar_withChar_withChar_(line, ',', '"', escapeChar);
    }
    else {
      IOSObjectArray *cells = EduStanfordNlpUtilStringUtils_splitOnCharWithQuotingWithNSString_withChar_withChar_withChar_(line, ',', quoteChar, escapeChar);
      JreAssert((((IOSObjectArray *) nil_chk(cells))->size_ == labels->size_), (@"edu/stanford/nlp/io/IOUtils.java:1387 condition failed: assert(cells.length == labels.length);"));
      id<JavaUtilMap> cellMap = EduStanfordNlpUtilGenerics_newHashMap();
      for (jint i = 0; i < labels->size_; i++) (void) [((id<JavaUtilMap>) nil_chk(cellMap)) putWithId:IOSObjectArray_Get(labels, i) withId:IOSObjectArray_Get(cells, i)];
      [((id<JavaUtilList>) nil_chk(rows)) addWithId:cellMap];
    }
  }
  return rows;
}

id<JavaUtilList> EduStanfordNlpIoIOUtils_readCSVWithHeaderWithNSString_(NSString *path) {
  EduStanfordNlpIoIOUtils_initialize();
  return EduStanfordNlpIoIOUtils_readCSVWithHeaderWithNSString_withChar_withChar_(path, '"', '"');
}

JavaUtilLinkedList *EduStanfordNlpIoIOUtils_readCSVStrictlyWithCharArray_withInt_(IOSCharArray *csvContents, jint numColumns) {
  EduStanfordNlpIoIOUtils_initialize();
  IOSObjectArray *buffer = [IOSObjectArray newArrayWithLength:numColumns type:JavaLangStringBuilder_class_()];
  (void) IOSObjectArray_SetAndConsume(buffer, 0, new_JavaLangStringBuilder_init());
  JavaUtilLinkedList *lines = new_JavaUtilLinkedList_init();
  jboolean inQuotes = false;
  jboolean nextIsEscaped = false;
  jint columnI = 0;
  for (jint offset = 0; offset < ((IOSCharArray *) nil_chk(csvContents))->size_; offset++) {
    if (nextIsEscaped) {
      (void) [((JavaLangStringBuilder *) nil_chk(IOSObjectArray_Get(buffer, columnI))) appendWithChar:IOSCharArray_Get(csvContents, offset)];
      nextIsEscaped = false;
    }
    else {
      switch (IOSCharArray_Get(csvContents, offset)) {
        case '"':
        inQuotes = !inQuotes;
        break;
        case ',':
        if (inQuotes) {
          (void) [((JavaLangStringBuilder *) nil_chk(IOSObjectArray_Get(buffer, columnI))) appendWithChar:','];
        }
        else {
          columnI += 1;
          if (columnI >= numColumns) {
            @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$ICI$IC", @"Too many columns: ", columnI, '/', numColumns, @" (offset: ", offset, ')'));
          }
          (void) IOSObjectArray_SetAndConsume(buffer, columnI, new_JavaLangStringBuilder_init());
        }
        break;
        case 0x000a:
        if (inQuotes) {
          (void) [((JavaLangStringBuilder *) nil_chk(IOSObjectArray_Get(buffer, columnI))) appendWithChar:0x000a];
        }
        else {
          if (columnI != numColumns - 1) {
            @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$ICI$IC", @"Too few columns: ", columnI, '/', numColumns, @" (offset: ", offset, ')'));
          }
          IOSObjectArray *rtn = [IOSObjectArray newArrayWithLength:buffer->size_ type:NSString_class_()];
          for (jint i = 0; i < buffer->size_; i++) {
            (void) IOSObjectArray_Set(rtn, i, [((JavaLangStringBuilder *) nil_chk(IOSObjectArray_Get(buffer, i))) description]);
          }
          [lines addWithId:rtn];
          columnI = 0;
          (void) IOSObjectArray_SetAndConsume(buffer, columnI, new_JavaLangStringBuilder_init());
        }
        break;
        case '\\':
        nextIsEscaped = true;
        break;
        default:
        (void) [((JavaLangStringBuilder *) nil_chk(IOSObjectArray_Get(buffer, columnI))) appendWithChar:IOSCharArray_Get(csvContents, offset)];
      }
    }
  }
  return lines;
}

JavaUtilLinkedList *EduStanfordNlpIoIOUtils_readCSVStrictlyWithNSString_withInt_(NSString *filename, jint numColumns) {
  EduStanfordNlpIoIOUtils_initialize();
  return EduStanfordNlpIoIOUtils_readCSVStrictlyWithCharArray_withInt_([((NSString *) nil_chk(EduStanfordNlpIoIOUtils_slurpFileWithNSString_(filename))) toCharArray], numColumns);
}

JavaIoInputStream *EduStanfordNlpIoIOUtils_getFileInputStreamWithNSString_(NSString *filename) {
  EduStanfordNlpIoIOUtils_initialize();
  JavaIoInputStream *in = new_JavaIoFileInputStream_initWithNSString_(filename);
  if ([((NSString *) nil_chk(filename)) hasSuffix:@".gz"]) {
    in = new_JavaUtilZipGZIPInputStream_initWithJavaIoInputStream_(in);
  }
  return in;
}

JavaIoOutputStream *EduStanfordNlpIoIOUtils_getFileOutputStreamWithNSString_(NSString *filename) {
  EduStanfordNlpIoIOUtils_initialize();
  JavaIoOutputStream *out = new_JavaIoFileOutputStream_initWithNSString_(filename);
  if ([((NSString *) nil_chk(filename)) hasSuffix:@".gz"]) {
    out = new_JavaUtilZipGZIPOutputStream_initWithJavaIoOutputStream_(out);
  }
  return out;
}

JavaIoOutputStream *EduStanfordNlpIoIOUtils_getFileOutputStreamWithNSString_withBoolean_(NSString *filename, jboolean append) {
  EduStanfordNlpIoIOUtils_initialize();
  JavaIoOutputStream *out = new_JavaIoFileOutputStream_initWithNSString_withBoolean_(filename, append);
  if ([((NSString *) nil_chk(filename)) hasSuffix:@".gz"]) {
    out = new_JavaUtilZipGZIPOutputStream_initWithJavaIoOutputStream_(out);
  }
  return out;
}

JavaIoBufferedReader *EduStanfordNlpIoIOUtils_getBufferedFileReaderWithNSString_(NSString *filename) {
  EduStanfordNlpIoIOUtils_initialize();
  return EduStanfordNlpIoIOUtils_readerFromStringWithNSString_withNSString_(filename, EduStanfordNlpIoIOUtils_defaultEncoding);
}

JavaIoBufferedReader *EduStanfordNlpIoIOUtils_getBufferedReaderFromClasspathOrFileSystemWithNSString_(NSString *filename) {
  EduStanfordNlpIoIOUtils_initialize();
  return EduStanfordNlpIoIOUtils_readerFromStringWithNSString_withNSString_(filename, EduStanfordNlpIoIOUtils_defaultEncoding);
}

JavaIoPrintWriter *EduStanfordNlpIoIOUtils_getPrintWriterWithJavaIoFile_(JavaIoFile *textFile) {
  EduStanfordNlpIoIOUtils_initialize();
  return EduStanfordNlpIoIOUtils_getPrintWriterWithJavaIoFile_withNSString_(textFile, nil);
}

JavaIoPrintWriter *EduStanfordNlpIoIOUtils_getPrintWriterWithJavaIoFile_withNSString_(JavaIoFile *textFile, NSString *encoding) {
  EduStanfordNlpIoIOUtils_initialize();
  JavaIoFile *f = [((JavaIoFile *) nil_chk(textFile)) getAbsoluteFile];
  if (encoding == nil) {
    encoding = EduStanfordNlpIoIOUtils_defaultEncoding;
  }
  return new_JavaIoPrintWriter_initWithJavaIoWriter_withBoolean_(new_JavaIoBufferedWriter_initWithJavaIoWriter_(new_JavaIoOutputStreamWriter_initWithJavaIoOutputStream_withNSString_(new_JavaIoFileOutputStream_initWithJavaIoFile_(f), encoding)), true);
}

JavaIoPrintWriter *EduStanfordNlpIoIOUtils_getPrintWriterWithNSString_(NSString *filename) {
  EduStanfordNlpIoIOUtils_initialize();
  return EduStanfordNlpIoIOUtils_getPrintWriterWithNSString_withNSString_(filename, EduStanfordNlpIoIOUtils_defaultEncoding);
}

JavaIoPrintWriter *EduStanfordNlpIoIOUtils_getPrintWriterIgnoringExceptionsWithNSString_(NSString *filename) {
  EduStanfordNlpIoIOUtils_initialize();
  @try {
    return EduStanfordNlpIoIOUtils_getPrintWriterWithNSString_withNSString_(filename, EduStanfordNlpIoIOUtils_defaultEncoding);
  }
  @catch (JavaIoIOException *ioe) {
    return nil;
  }
}

JavaIoPrintWriter *EduStanfordNlpIoIOUtils_getPrintWriterOrDieWithNSString_(NSString *filename) {
  EduStanfordNlpIoIOUtils_initialize();
  @try {
    return EduStanfordNlpIoIOUtils_getPrintWriterWithNSString_withNSString_(filename, EduStanfordNlpIoIOUtils_defaultEncoding);
  }
  @catch (JavaIoIOException *ioe) {
    @throw new_EduStanfordNlpIoRuntimeIOException_initWithNSException_(ioe);
  }
}

JavaIoPrintWriter *EduStanfordNlpIoIOUtils_getPrintWriterWithNSString_withNSString_(NSString *filename, NSString *encoding) {
  EduStanfordNlpIoIOUtils_initialize();
  JavaIoOutputStream *out = EduStanfordNlpIoIOUtils_getFileOutputStreamWithNSString_(filename);
  if (encoding == nil) {
    encoding = EduStanfordNlpIoIOUtils_defaultEncoding;
  }
  return new_JavaIoPrintWriter_initWithJavaIoWriter_withBoolean_(new_JavaIoBufferedWriter_initWithJavaIoWriter_(new_JavaIoOutputStreamWriter_initWithJavaIoOutputStream_withNSString_(out, encoding)), true);
}

id<JavaUtilSet> EduStanfordNlpIoIOUtils_readColumnSetWithNSString_withInt_(NSString *infile, jint field) {
  EduStanfordNlpIoIOUtils_initialize();
  JavaIoBufferedReader *br = EduStanfordNlpIoIOUtils_getBufferedFileReaderWithNSString_(infile);
  NSString *line;
  id<JavaUtilSet> set = EduStanfordNlpUtilGenerics_newHashSet();
  while ((line = [((JavaIoBufferedReader *) nil_chk(br)) readLine]) != nil) {
    line = [((NSString *) nil_chk(line)) trim];
    if (((jint) [((NSString *) nil_chk(line)) length]) > 0) {
      if (field < 0) {
        [((id<JavaUtilSet>) nil_chk(set)) addWithId:line];
      }
      else {
        IOSObjectArray *fields = [((JavaUtilRegexPattern *) nil_chk(EduStanfordNlpIoIOUtils_tab)) splitWithJavaLangCharSequence:line];
        if (field < ((IOSObjectArray *) nil_chk(fields))->size_) {
          [((id<JavaUtilSet>) nil_chk(set)) addWithId:IOSObjectArray_Get(fields, field)];
        }
      }
    }
  }
  [br close];
  return set;
}

id<JavaUtilList> EduStanfordNlpIoIOUtils_readObjectFromColumnsWithIOSClass_withNSString_withNSStringArray_withNSString_(IOSClass *objClass, NSString *filename, IOSObjectArray *fieldNames, NSString *delimiter) {
  EduStanfordNlpIoIOUtils_initialize();
  JavaUtilRegexPattern *delimiterPattern = JavaUtilRegexPattern_compileWithNSString_(delimiter);
  id<JavaUtilList> list = new_JavaUtilArrayList_init();
  JavaIoBufferedReader *br = EduStanfordNlpIoIOUtils_getBufferedFileReaderWithNSString_(filename);
  NSString *line;
  while ((line = [((JavaIoBufferedReader *) nil_chk(br)) readLine]) != nil) {
    line = [((NSString *) nil_chk(line)) trim];
    if (((jint) [((NSString *) nil_chk(line)) length]) > 0) {
      id item = EduStanfordNlpUtilStringUtils_columnStringToObjectWithIOSClass_withNSString_withJavaUtilRegexPattern_withNSStringArray_(objClass, line, delimiterPattern, fieldNames);
      [list addWithId:item];
    }
  }
  [br close];
  return list;
}

id<JavaUtilMap> EduStanfordNlpIoIOUtils_readMapWithNSString_(NSString *filename) {
  EduStanfordNlpIoIOUtils_initialize();
  id<JavaUtilMap> map = EduStanfordNlpUtilGenerics_newHashMap();
  @try {
    JavaIoBufferedReader *br = EduStanfordNlpIoIOUtils_getBufferedFileReaderWithNSString_(filename);
    NSString *line;
    while ((line = [((JavaIoBufferedReader *) nil_chk(br)) readLine]) != nil) {
      IOSObjectArray *fields = [((JavaUtilRegexPattern *) nil_chk(EduStanfordNlpIoIOUtils_tab)) splitWithJavaLangCharSequence:line withInt:2];
      (void) [((id<JavaUtilMap>) nil_chk(map)) putWithId:IOSObjectArray_Get(nil_chk(fields), 0) withId:IOSObjectArray_Get(fields, 1)];
    }
    [br close];
  }
  @catch (JavaIoIOException *ex) {
    @throw new_JavaLangRuntimeException_initWithNSException_(ex);
  }
  return map;
}

NSString *EduStanfordNlpIoIOUtils_stringFromFileWithNSString_(NSString *filename) {
  EduStanfordNlpIoIOUtils_initialize();
  return EduStanfordNlpIoIOUtils_stringFromFileWithNSString_withNSString_(filename, EduStanfordNlpIoIOUtils_defaultEncoding);
}

NSString *EduStanfordNlpIoIOUtils_stringFromFileWithNSString_withNSString_(NSString *filename, NSString *encoding) {
  EduStanfordNlpIoIOUtils_initialize();
  @try {
    JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
    JavaIoBufferedReader *in = new_JavaIoBufferedReader_initWithJavaIoReader_(new_EduStanfordNlpIoEncodingFileReader_initWithNSString_withNSString_(filename, encoding));
    NSString *line;
    while ((line = [in readLine]) != nil) {
      (void) [sb appendWithNSString:line];
      (void) [sb appendWithNSString:EduStanfordNlpIoIOUtils_eolChar];
    }
    [in close];
    return [sb description];
  }
  @catch (JavaIoIOException *e) {
    [((JavaIoIOException *) nil_chk(e)) printStackTrace];
    return nil;
  }
}

id<JavaUtilList> EduStanfordNlpIoIOUtils_linesFromFileWithNSString_(NSString *filename) {
  EduStanfordNlpIoIOUtils_initialize();
  return EduStanfordNlpIoIOUtils_linesFromFileWithNSString_withNSString_(filename, EduStanfordNlpIoIOUtils_defaultEncoding);
}

id<JavaUtilList> EduStanfordNlpIoIOUtils_linesFromFileWithNSString_withNSString_(NSString *filename, NSString *encoding) {
  EduStanfordNlpIoIOUtils_initialize();
  return EduStanfordNlpIoIOUtils_linesFromFileWithNSString_withNSString_withBoolean_(filename, encoding, false);
}

id<JavaUtilList> EduStanfordNlpIoIOUtils_linesFromFileWithNSString_withNSString_withBoolean_(NSString *filename, NSString *encoding, jboolean ignoreHeader) {
  EduStanfordNlpIoIOUtils_initialize();
  @try {
    id<JavaUtilList> lines = new_JavaUtilArrayList_init();
    JavaIoBufferedReader *in = EduStanfordNlpIoIOUtils_readerFromStringWithNSString_withNSString_(filename, encoding);
    NSString *line;
    jint i = 0;
    while ((line = [((JavaIoBufferedReader *) nil_chk(in)) readLine]) != nil) {
      i++;
      if (ignoreHeader && i == 1) continue;
      [lines addWithId:line];
    }
    [in close];
    return lines;
  }
  @catch (JavaIoIOException *e) {
    [((JavaIoIOException *) nil_chk(e)) printStackTrace];
    return nil;
  }
}

NSString *EduStanfordNlpIoIOUtils_backupNameWithNSString_(NSString *filename) {
  EduStanfordNlpIoIOUtils_initialize();
  return [((JavaIoFile *) nil_chk(EduStanfordNlpIoIOUtils_backupFileWithJavaIoFile_(new_JavaIoFile_initWithNSString_(filename)))) description];
}

JavaIoFile *EduStanfordNlpIoIOUtils_backupFileWithJavaIoFile_(JavaIoFile *file) {
  EduStanfordNlpIoIOUtils_initialize();
  jint max = 1000;
  NSString *filename = [((JavaIoFile *) nil_chk(file)) description];
  JavaIoFile *backup = new_JavaIoFile_initWithNSString_(JreStrcat("$C", filename, '~'));
  if (![backup exists]) {
    return backup;
  }
  for (jint i = 1; i <= max; i++) {
    backup = new_JavaIoFile_initWithNSString_(JreStrcat("$$I$", filename, @".~", i, @".~"));
    if (![backup exists]) {
      return backup;
    }
  }
  return nil;
}

jboolean EduStanfordNlpIoIOUtils_renameToBackupNameWithJavaIoFile_(JavaIoFile *file) {
  EduStanfordNlpIoIOUtils_initialize();
  return [((JavaIoFile *) nil_chk(file)) renameToWithJavaIoFile:EduStanfordNlpIoIOUtils_backupFileWithJavaIoFile_(file)];
}

JavaIoFile *EduStanfordNlpIoIOUtils_getJNLPLocalScratch() {
  EduStanfordNlpIoIOUtils_initialize();
  @try {
    NSString *machineName = IOSObjectArray_Get(nil_chk([((NSString *) nil_chk([((JavaNetInetAddress *) nil_chk(JavaNetInetAddress_getLocalHost())) getHostName])) split:@"\\."]), 0);
    NSString *username = JavaLangSystem_getPropertyWithNSString_(@"user.name");
    return new_JavaIoFile_initWithNSString_(JreStrcat("C$$$", '/', machineName, @"/scr1/", username));
  }
  @catch (JavaLangException *e) {
    return new_JavaIoFile_initWithNSString_(@"./scr/");
  }
}

JavaIoFile *EduStanfordNlpIoIOUtils_ensureDirWithJavaIoFile_(JavaIoFile *tgtDir) {
  EduStanfordNlpIoIOUtils_initialize();
  if ([((JavaIoFile *) nil_chk(tgtDir)) exists]) {
    if ([tgtDir isDirectory]) {
      return tgtDir;
    }
    else {
      @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$$$", @"Could not create directory ", [tgtDir getAbsolutePath], @", as a file already exists at that path."));
    }
  }
  else {
    if (![tgtDir mkdirs]) {
      @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$$", @"Could not create directory ", [tgtDir getAbsolutePath]));
    }
    return tgtDir;
  }
}

jboolean EduStanfordNlpIoIOUtils_deleteDirRecursivelyWithJavaIoFile_(JavaIoFile *dir) {
  EduStanfordNlpIoIOUtils_initialize();
  if ([((JavaIoFile *) nil_chk(dir)) isDirectory]) {
    {
      IOSObjectArray *a__ = [dir listFiles];
      JavaIoFile * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      JavaIoFile * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        JavaIoFile *f = *b__++;
        jboolean success = EduStanfordNlpIoIOUtils_deleteDirRecursivelyWithJavaIoFile_(f);
        if (!success) return false;
      }
    }
  }
  return [dir delete__];
}

NSString *EduStanfordNlpIoIOUtils_getExtensionWithNSString_(NSString *fileName) {
  EduStanfordNlpIoIOUtils_initialize();
  if (![((NSString *) nil_chk(fileName)) contains:@"."]) return nil;
  jint idx = [fileName lastIndexOf:'.'];
  return [fileName substring:idx + 1];
}

JavaIoReader *EduStanfordNlpIoIOUtils_encodedInputStreamReaderWithJavaIoInputStream_withNSString_(JavaIoInputStream *stream, NSString *encoding) {
  EduStanfordNlpIoIOUtils_initialize();
  if (encoding == nil) {
    return new_JavaIoInputStreamReader_initWithJavaIoInputStream_(stream);
  }
  else {
    return new_JavaIoInputStreamReader_initWithJavaIoInputStream_withNSString_(stream, encoding);
  }
}

JavaIoWriter *EduStanfordNlpIoIOUtils_encodedOutputStreamWriterWithJavaIoOutputStream_withNSString_(JavaIoOutputStream *stream, NSString *encoding) {
  EduStanfordNlpIoIOUtils_initialize();
  if (encoding == nil) {
    return new_JavaIoOutputStreamWriter_initWithJavaIoOutputStream_(stream);
  }
  else {
    return new_JavaIoOutputStreamWriter_initWithJavaIoOutputStream_withNSString_(stream, encoding);
  }
}

JavaIoPrintWriter *EduStanfordNlpIoIOUtils_encodedOutputStreamPrintWriterWithJavaIoOutputStream_withNSString_withBoolean_(JavaIoOutputStream *stream, NSString *encoding, jboolean autoFlush) {
  EduStanfordNlpIoIOUtils_initialize();
  if (encoding == nil) {
    return new_JavaIoPrintWriter_initWithJavaIoOutputStream_withBoolean_(stream, autoFlush);
  }
  else {
    return new_JavaIoPrintWriter_initWithJavaIoWriter_withBoolean_(new_JavaIoOutputStreamWriter_initWithJavaIoOutputStream_withNSString_(stream, encoding), autoFlush);
  }
}

void EduStanfordNlpIoIOUtils_copyFileWithJavaIoFile_withJavaIoFile_(JavaIoFile *source, JavaIoFile *target) {
  EduStanfordNlpIoIOUtils_initialize();
  JavaNioChannelsFileChannel *sourceChannel = [new_JavaIoFileInputStream_initWithJavaIoFile_(source) getChannel];
  JavaNioChannelsFileChannel *targetChannel = [new_JavaIoFileOutputStream_initWithJavaIoFile_(target) getChannel];
  jlong pos = 0;
  jlong toCopy = [((JavaNioChannelsFileChannel *) nil_chk(sourceChannel)) size];
  while (toCopy > 0) {
    jlong bytes = [sourceChannel transferToWithLong:pos withLong:toCopy withJavaNioChannelsWritableByteChannel:targetChannel];
    pos += bytes;
    toCopy -= bytes;
  }
  [sourceChannel close];
  [((JavaNioChannelsFileChannel *) nil_chk(targetChannel)) close];
}

void EduStanfordNlpIoIOUtils_cpWithJavaIoFile_withJavaIoFile_withBoolean_(JavaIoFile *source, JavaIoFile *target, jboolean recursive) {
  EduStanfordNlpIoIOUtils_initialize();
  if ([((JavaIoFile *) nil_chk(source)) isDirectory] && !recursive) {
    @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$@", @"cp: omitting directory: ", source));
  }
  if (![((JavaIoFile *) nil_chk([((JavaIoFile *) nil_chk(target)) getParentFile])) exists]) {
    @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$Z$", @"cp: cannot copy to directory: ", recursive, @" (parent doesn't exist)"));
  }
  if (![((JavaIoFile *) nil_chk([target getParentFile])) isDirectory]) {
    @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$Z$", @"cp: cannot copy to directory: ", recursive, @" (parent isn't a directory)"));
  }
  JavaIoFile *trueTarget;
  if ([target exists] && [target isDirectory]) {
    trueTarget = new_JavaIoFile_initWithNSString_(JreStrcat("$$$", [target getPath], JreLoadStatic(JavaIoFile, separator), [source getName]));
  }
  else {
    trueTarget = target;
  }
  if ([source isFile]) {
    EduStanfordNlpIoIOUtils_copyFileWithJavaIoFile_withJavaIoFile_(source, trueTarget);
  }
  else if ([source isDirectory]) {
    IOSObjectArray *children = [source listFiles];
    if (children == nil) {
      @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$@", @"cp: could not list files in source: ", source));
    }
    if ([target exists]) {
      if (![target isDirectory]) {
        @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$@", @"cp: cannot copy directory into regular file: ", target));
      }
      if ([trueTarget exists] && ![trueTarget isDirectory]) {
        @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$@", @"cp: overwriting a file with a directory: ", trueTarget));
      }
      if (![trueTarget exists] && ![trueTarget mkdir]) {
        @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$@", @"cp: could not create directory: ", trueTarget));
      }
    }
    else {
      JreAssert((trueTarget == target), (@"edu/stanford/nlp/io/IOUtils.java:1922 condition failed: assert trueTarget == target;"));
      if (![trueTarget mkdir]) {
        @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$@", @"cp: could not create target directory: ", trueTarget));
      }
    }
    {
      IOSObjectArray *a__ = children;
      JavaIoFile * const *b__ = a__->buffer_;
      JavaIoFile * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        JavaIoFile *child = *b__++;
        JavaIoFile *childTarget = new_JavaIoFile_initWithNSString_(JreStrcat("$$$", [trueTarget getPath], JreLoadStatic(JavaIoFile, separator), [((JavaIoFile *) nil_chk(child)) getName]));
        EduStanfordNlpIoIOUtils_cpWithJavaIoFile_withJavaIoFile_withBoolean_(child, childTarget, recursive);
      }
    }
  }
  else {
    @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$@", @"cp: unknown file type: ", source));
  }
}

void EduStanfordNlpIoIOUtils_cpWithJavaIoFile_withJavaIoFile_(JavaIoFile *source, JavaIoFile *target) {
  EduStanfordNlpIoIOUtils_initialize();
  EduStanfordNlpIoIOUtils_cpWithJavaIoFile_withJavaIoFile_withBoolean_(source, target, false);
}

IOSObjectArray *EduStanfordNlpIoIOUtils_tailWithJavaIoFile_withInt_withNSString_(JavaIoFile *f, jint n, NSString *encoding) {
  EduStanfordNlpIoIOUtils_initialize();
  if (n == 0) {
    return [IOSObjectArray newArrayWithLength:0 type:NSString_class_()];
  }
  JavaIoRandomAccessFile *raf = new_JavaIoRandomAccessFile_initWithJavaIoFile_withNSString_(f, @"r");
  jint linesRead = 0;
  id<JavaUtilList> bytes = new_JavaUtilArrayList_init();
  id<JavaUtilList> linesReversed = new_JavaUtilArrayList_init();
  jlong length = [raf length] - 1;
  [raf seekWithLong:length];
  for (jlong seek = length; seek >= 0; --seek) {
    [raf seekWithLong:seek];
    jbyte c = [raf readByte];
    if (c == 0x000a) {
      IOSByteArray *str = [IOSByteArray newArrayWithLength:[bytes size]];
      for (jint i = 0; i < str->size_; ++i) {
        *IOSByteArray_GetRef(str, i) = [((JavaLangByte *) nil_chk([bytes getWithInt:str->size_ - i - 1])) charValue];
      }
      [linesReversed addWithId:[NSString stringWithBytes:str charsetName:encoding]];
      bytes = new_JavaUtilArrayList_init();
      linesRead += 1;
      if (linesRead == n) {
        break;
      }
    }
    else {
      [bytes addWithId:JavaLangByte_valueOfWithByte_(c)];
    }
  }
  if (linesRead < n && [bytes size] > 0) {
    IOSByteArray *str = [IOSByteArray newArrayWithLength:[bytes size]];
    for (jint i = 0; i < str->size_; ++i) {
      *IOSByteArray_GetRef(str, i) = [((JavaLangByte *) nil_chk([bytes getWithInt:str->size_ - i - 1])) charValue];
    }
    [linesReversed addWithId:[NSString stringWithBytes:str charsetName:encoding]];
  }
  IOSObjectArray *rtn = [IOSObjectArray newArrayWithLength:[linesReversed size] type:NSString_class_()];
  for (jint i = 0; i < rtn->size_; ++i) {
    (void) IOSObjectArray_Set(rtn, i, [linesReversed getWithInt:rtn->size_ - i - 1]);
  }
  [raf close];
  return rtn;
}

IOSObjectArray *EduStanfordNlpIoIOUtils_tailWithJavaIoFile_withInt_(JavaIoFile *f, jint n) {
  EduStanfordNlpIoIOUtils_initialize();
  return EduStanfordNlpIoIOUtils_tailWithJavaIoFile_withInt_withNSString_(f, n, @"utf-8");
}

void EduStanfordNlpIoIOUtils_deleteRecursivelyWithJavaIoFile_(JavaIoFile *file) {
  EduStanfordNlpIoIOUtils_initialize();
  if ([((id<JavaUtilSet>) nil_chk(EduStanfordNlpIoIOUtils_blacklistedPathsToRemove)) containsWithId:[((JavaIoFile *) nil_chk(file)) getPath]]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@$", @"You're trying to delete ", file, @"! I _really_ don't think you want to do that..."));
  }
  jint count = 0;
  jlong size = 0;
  for (JavaIoFile * __strong f in nil_chk(EduStanfordNlpIoIOUtils_iterFilesRecursiveWithJavaIoFile_(file))) {
    count += 1;
    size += [((JavaIoFile *) nil_chk(f)) length];
  }
  if (count > 100) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Deleting more than 100 files; you should do this manually");
  }
  if (size > 10000000000LL) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Deleting more than 10GB; you should do this manually");
  }
  if ([file isDirectory]) {
    IOSObjectArray *children = [file listFiles];
    if (children != nil) {
      {
        IOSObjectArray *a__ = children;
        JavaIoFile * const *b__ = a__->buffer_;
        JavaIoFile * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          JavaIoFile *child = *b__++;
          EduStanfordNlpIoIOUtils_deleteRecursivelyWithJavaIoFile_(child);
        }
      }
    }
  }
  [file delete__];
}

void EduStanfordNlpIoIOUtils_consoleWithNSString_withJavaUtilFunctionConsumer_(NSString *prompt, id<JavaUtilFunctionConsumer> callback) {
  EduStanfordNlpIoIOUtils_initialize();
  JavaIoBufferedReader *reader = new_JavaIoBufferedReader_initWithJavaIoReader_(new_JavaIoInputStreamReader_initWithJavaIoInputStream_(JreLoadStatic(JavaLangSystem, in)));
  NSString *line;
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printWithNSString:prompt];
  while ((line = [reader readLine]) != nil) {
    switch (JreIndexOfStr([((NSString *) nil_chk(line)) lowercaseString], (id[]){ @"exit", @"quit", @"q" }, 3)) {
      case 0:
      case 1:
      case 2:
      return;
      default:
      [((id<JavaUtilFunctionConsumer>) nil_chk(callback)) acceptWithId:line];
    }
    [JreLoadStatic(JavaLangSystem, out) printWithNSString:prompt];
  }
}

NSString *EduStanfordNlpIoIOUtils_promptUserInputWithJavaUtilOptional_(JavaUtilOptional *prompt) {
  EduStanfordNlpIoIOUtils_initialize();
  JavaIoBufferedReader *reader = new_JavaIoBufferedReader_initWithJavaIoReader_(new_JavaIoInputStreamReader_initWithJavaIoInputStream_(JreLoadStatic(JavaLangSystem, in)));
  NSString *line;
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printWithNSString:[((JavaUtilOptional *) nil_chk(prompt)) orElseWithId:@"> "]];
  return [reader readLine];
}

void EduStanfordNlpIoIOUtils_consoleWithJavaUtilFunctionConsumer_(id<JavaUtilFunctionConsumer> callback) {
  EduStanfordNlpIoIOUtils_initialize();
  EduStanfordNlpIoIOUtils_consoleWithNSString_withJavaUtilFunctionConsumer_(@"> ", callback);
}

IOSObjectArray *EduStanfordNlpIoIOUtils__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *EduStanfordNlpIoIOUtils__Annotations$1() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpIoIOUtils)

@implementation EduStanfordNlpIoIOUtils_GetLinesIterable

- (instancetype)initWithJavaIoFile:(JavaIoFile *)file
                      withIOSClass:(IOSClass *)fileInputStreamWrapper
                      withNSString:(NSString *)encoding {
  EduStanfordNlpIoIOUtils_GetLinesIterable_initWithJavaIoFile_withIOSClass_withNSString_(self, file, fileInputStreamWrapper, encoding);
  return self;
}

- (instancetype)initWithNSString:(NSString *)path
                    withIOSClass:(IOSClass *)fileInputStreamWrapper
                    withNSString:(NSString *)encoding {
  EduStanfordNlpIoIOUtils_GetLinesIterable_initWithNSString_withIOSClass_withNSString_(self, path, fileInputStreamWrapper, encoding);
  return self;
}

- (JavaIoInputStream *)getStream {
  return EduStanfordNlpIoIOUtils_GetLinesIterable_getStream(self);
}

- (id<JavaUtilIterator>)iterator {
  return new_EduStanfordNlpIoIOUtils_GetLinesIterable_$1_initWithEduStanfordNlpIoIOUtils_GetLinesIterable_(self);
}

- (void)forEachWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaLangIterable_forEachWithJavaUtilFunctionConsumer_(self, arg0);
}

- (id<JavaUtilSpliterator>)spliterator {
  return JavaLangIterable_spliterator(self);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, 3, -1, -1 },
    { NULL, "LJavaIoInputStream;", 0x2, -1, -1, 4, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaIoFile:withIOSClass:withNSString:);
  methods[1].selector = @selector(initWithNSString:withIOSClass:withNSString:);
  methods[2].selector = @selector(getStream);
  methods[3].selector = @selector(iterator);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "file_", "LJavaIoFile;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "path_", "LNSString;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "fileInputStreamWrapper_", "LIOSClass;", .constantValue.asLong = 0, 0x10, -1, -1, 6, -1 },
    { "encoding_", "LNSString;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoFile;LIOSClass;LNSString;", "(Ljava/io/File;Ljava/lang/Class<+Ljava/io/InputStream;>;Ljava/lang/String;)V", "LNSString;LIOSClass;LNSString;", "(Ljava/lang/String;Ljava/lang/Class<+Ljava/io/InputStream;>;Ljava/lang/String;)V", "LJavaIoIOException;", "()Ljava/util/Iterator<Ljava/lang/String;>;", "Ljava/lang/Class<+Ljava/io/InputStream;>;", "LEduStanfordNlpIoIOUtils;", "Ljava/lang/Object;Ljava/lang/Iterable<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpIoIOUtils_GetLinesIterable = { "GetLinesIterable", "edu.stanford.nlp.io", ptrTable, methods, fields, 7, 0x8, 4, 4, 7, -1, -1, 8, -1 };
  return &_EduStanfordNlpIoIOUtils_GetLinesIterable;
}

@end

void EduStanfordNlpIoIOUtils_GetLinesIterable_initWithJavaIoFile_withIOSClass_withNSString_(EduStanfordNlpIoIOUtils_GetLinesIterable *self, JavaIoFile *file, IOSClass *fileInputStreamWrapper, NSString *encoding) {
  NSObject_init(self);
  self->file_ = file;
  self->path_ = nil;
  self->fileInputStreamWrapper_ = fileInputStreamWrapper;
  self->encoding_ = encoding;
}

EduStanfordNlpIoIOUtils_GetLinesIterable *new_EduStanfordNlpIoIOUtils_GetLinesIterable_initWithJavaIoFile_withIOSClass_withNSString_(JavaIoFile *file, IOSClass *fileInputStreamWrapper, NSString *encoding) {
  J2OBJC_NEW_IMPL(EduStanfordNlpIoIOUtils_GetLinesIterable, initWithJavaIoFile_withIOSClass_withNSString_, file, fileInputStreamWrapper, encoding)
}

EduStanfordNlpIoIOUtils_GetLinesIterable *create_EduStanfordNlpIoIOUtils_GetLinesIterable_initWithJavaIoFile_withIOSClass_withNSString_(JavaIoFile *file, IOSClass *fileInputStreamWrapper, NSString *encoding) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpIoIOUtils_GetLinesIterable, initWithJavaIoFile_withIOSClass_withNSString_, file, fileInputStreamWrapper, encoding)
}

void EduStanfordNlpIoIOUtils_GetLinesIterable_initWithNSString_withIOSClass_withNSString_(EduStanfordNlpIoIOUtils_GetLinesIterable *self, NSString *path, IOSClass *fileInputStreamWrapper, NSString *encoding) {
  NSObject_init(self);
  self->file_ = nil;
  self->path_ = path;
  self->fileInputStreamWrapper_ = fileInputStreamWrapper;
  self->encoding_ = encoding;
}

EduStanfordNlpIoIOUtils_GetLinesIterable *new_EduStanfordNlpIoIOUtils_GetLinesIterable_initWithNSString_withIOSClass_withNSString_(NSString *path, IOSClass *fileInputStreamWrapper, NSString *encoding) {
  J2OBJC_NEW_IMPL(EduStanfordNlpIoIOUtils_GetLinesIterable, initWithNSString_withIOSClass_withNSString_, path, fileInputStreamWrapper, encoding)
}

EduStanfordNlpIoIOUtils_GetLinesIterable *create_EduStanfordNlpIoIOUtils_GetLinesIterable_initWithNSString_withIOSClass_withNSString_(NSString *path, IOSClass *fileInputStreamWrapper, NSString *encoding) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpIoIOUtils_GetLinesIterable, initWithNSString_withIOSClass_withNSString_, path, fileInputStreamWrapper, encoding)
}

JavaIoInputStream *EduStanfordNlpIoIOUtils_GetLinesIterable_getStream(EduStanfordNlpIoIOUtils_GetLinesIterable *self) {
  if (self->file_ != nil) {
    return EduStanfordNlpIoIOUtils_inputStreamFromFileWithJavaIoFile_(self->file_);
  }
  else if (self->path_ != nil) {
    return EduStanfordNlpIoIOUtils_getInputStreamFromURLOrClasspathOrFileSystemWithNSString_(self->path_);
  }
  else {
    @throw new_JavaLangAssertionError_initWithId_(@"No known path to read");
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpIoIOUtils_GetLinesIterable)

@implementation EduStanfordNlpIoIOUtils_GetLinesIterable_$1

- (jboolean)hasNext {
  return self->line_ != nil;
}

- (NSString *)next {
  NSString *nextLine = self->line_;
  if (nextLine == nil) {
    @throw new_JavaUtilNoSuchElementException_init();
  }
  line_ = [self getLine];
  return nextLine;
}

- (NSString *)getLine {
  @try {
    NSString *result = [((JavaIoBufferedReader *) nil_chk(self->reader_)) readLine];
    if (result == nil) {
      [((JavaIoBufferedReader *) nil_chk(self->reader_)) close];
    }
    return result;
  }
  @catch (JavaIoIOException *e) {
    @throw new_EduStanfordNlpIoRuntimeIOException_initWithNSException_(e);
  }
}

- (JavaIoBufferedReader *)getReader {
  @try {
    JavaIoInputStream *stream = EduStanfordNlpIoIOUtils_GetLinesIterable_getStream(this$0_);
    if (this$0_->fileInputStreamWrapper_ != nil) {
      stream = [((JavaLangReflectConstructor *) nil_chk([this$0_->fileInputStreamWrapper_ getConstructor:[IOSObjectArray newArrayWithObjects:(id[]){ JavaIoInputStream_class_() } count:1 type:IOSClass_class_()]])) newInstanceWithNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ stream } count:1 type:NSObject_class_()]];
    }
    if (this$0_->encoding_ == nil) {
      return new_JavaIoBufferedReader_initWithJavaIoReader_(new_JavaIoInputStreamReader_initWithJavaIoInputStream_(stream));
    }
    else {
      return new_JavaIoBufferedReader_initWithJavaIoReader_(new_JavaIoInputStreamReader_initWithJavaIoInputStream_withNSString_(stream, this$0_->encoding_));
    }
  }
  @catch (JavaLangException *e) {
    @throw new_EduStanfordNlpIoRuntimeIOException_initWithNSException_(e);
  }
}

- (void)remove {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (instancetype)initWithEduStanfordNlpIoIOUtils_GetLinesIterable:(EduStanfordNlpIoIOUtils_GetLinesIterable *)outer$ {
  EduStanfordNlpIoIOUtils_GetLinesIterable_$1_initWithEduStanfordNlpIoIOUtils_GetLinesIterable_(self, outer$);
  return self;
}

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaUtilIterator_forEachRemainingWithJavaUtilFunctionConsumer_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaIoBufferedReader;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(hasNext);
  methods[1].selector = @selector(next);
  methods[2].selector = @selector(getLine);
  methods[3].selector = @selector(getReader);
  methods[4].selector = @selector(remove);
  methods[5].selector = @selector(initWithEduStanfordNlpIoIOUtils_GetLinesIterable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LEduStanfordNlpIoIOUtils_GetLinesIterable;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "reader_", "LJavaIoBufferedReader;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "line_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpIoIOUtils_GetLinesIterable;", "iterator", "Ljava/lang/Object;Ljava/util/Iterator<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpIoIOUtils_GetLinesIterable_$1 = { "", "edu.stanford.nlp.io", ptrTable, methods, fields, 7, 0x8008, 6, 3, 0, -1, 1, 2, -1 };
  return &_EduStanfordNlpIoIOUtils_GetLinesIterable_$1;
}

@end

void EduStanfordNlpIoIOUtils_GetLinesIterable_$1_initWithEduStanfordNlpIoIOUtils_GetLinesIterable_(EduStanfordNlpIoIOUtils_GetLinesIterable_$1 *self, EduStanfordNlpIoIOUtils_GetLinesIterable *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
  self->reader_ = [self getReader];
  self->line_ = [self getLine];
}

EduStanfordNlpIoIOUtils_GetLinesIterable_$1 *new_EduStanfordNlpIoIOUtils_GetLinesIterable_$1_initWithEduStanfordNlpIoIOUtils_GetLinesIterable_(EduStanfordNlpIoIOUtils_GetLinesIterable *outer$) {
  J2OBJC_NEW_IMPL(EduStanfordNlpIoIOUtils_GetLinesIterable_$1, initWithEduStanfordNlpIoIOUtils_GetLinesIterable_, outer$)
}

EduStanfordNlpIoIOUtils_GetLinesIterable_$1 *create_EduStanfordNlpIoIOUtils_GetLinesIterable_$1_initWithEduStanfordNlpIoIOUtils_GetLinesIterable_(EduStanfordNlpIoIOUtils_GetLinesIterable *outer$) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpIoIOUtils_GetLinesIterable_$1, initWithEduStanfordNlpIoIOUtils_GetLinesIterable_, outer$)
}

@implementation EduStanfordNlpIoIOUtils_LineReaderIterable

- (instancetype)initWithJavaIoBufferedReader:(JavaIoBufferedReader *)reader {
  EduStanfordNlpIoIOUtils_LineReaderIterable_initWithJavaIoBufferedReader_(self, reader);
  return self;
}

- (id<JavaUtilIterator>)iterator {
  return new_EduStanfordNlpIoIOUtils_LineReaderIterable_$1_initWithEduStanfordNlpIoIOUtils_LineReaderIterable_(self);
}

- (void)forEachWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaLangIterable_forEachWithJavaUtilFunctionConsumer_(self, arg0);
}

- (id<JavaUtilSpliterator>)spliterator {
  return JavaLangIterable_spliterator(self);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaIoBufferedReader:);
  methods[1].selector = @selector(iterator);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "reader_", "LJavaIoBufferedReader;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoBufferedReader;", "()Ljava/util/Iterator<Ljava/lang/String;>;", "LEduStanfordNlpIoIOUtils;", "Ljava/lang/Object;Ljava/lang/Iterable<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpIoIOUtils_LineReaderIterable = { "LineReaderIterable", "edu.stanford.nlp.io", ptrTable, methods, fields, 7, 0x1a, 2, 1, 2, -1, -1, 3, -1 };
  return &_EduStanfordNlpIoIOUtils_LineReaderIterable;
}

@end

void EduStanfordNlpIoIOUtils_LineReaderIterable_initWithJavaIoBufferedReader_(EduStanfordNlpIoIOUtils_LineReaderIterable *self, JavaIoBufferedReader *reader) {
  NSObject_init(self);
  self->reader_ = reader;
}

EduStanfordNlpIoIOUtils_LineReaderIterable *new_EduStanfordNlpIoIOUtils_LineReaderIterable_initWithJavaIoBufferedReader_(JavaIoBufferedReader *reader) {
  J2OBJC_NEW_IMPL(EduStanfordNlpIoIOUtils_LineReaderIterable, initWithJavaIoBufferedReader_, reader)
}

EduStanfordNlpIoIOUtils_LineReaderIterable *create_EduStanfordNlpIoIOUtils_LineReaderIterable_initWithJavaIoBufferedReader_(JavaIoBufferedReader *reader) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpIoIOUtils_LineReaderIterable, initWithJavaIoBufferedReader_, reader)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpIoIOUtils_LineReaderIterable)

@implementation EduStanfordNlpIoIOUtils_LineReaderIterable_$1

- (NSString *)getNext {
  return EduStanfordNlpIoIOUtils_LineReaderIterable_$1_getNext(self);
}

- (jboolean)hasNext {
  return self->next_ != nil;
}

- (NSString *)next {
  NSString *nextLine = self->next_;
  if (nextLine == nil) {
    @throw new_JavaUtilNoSuchElementException_init();
  }
  next_ = EduStanfordNlpIoIOUtils_LineReaderIterable_$1_getNext(self);
  return nextLine;
}

- (void)remove {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (instancetype)initWithEduStanfordNlpIoIOUtils_LineReaderIterable:(EduStanfordNlpIoIOUtils_LineReaderIterable *)outer$ {
  EduStanfordNlpIoIOUtils_LineReaderIterable_$1_initWithEduStanfordNlpIoIOUtils_LineReaderIterable_(self, outer$);
  return self;
}

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaUtilIterator_forEachRemainingWithJavaUtilFunctionConsumer_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(getNext);
  methods[1].selector = @selector(hasNext);
  methods[2].selector = @selector(next);
  methods[3].selector = @selector(remove);
  methods[4].selector = @selector(initWithEduStanfordNlpIoIOUtils_LineReaderIterable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LEduStanfordNlpIoIOUtils_LineReaderIterable;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "next_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpIoIOUtils_LineReaderIterable;", "iterator", "Ljava/lang/Object;Ljava/util/Iterator<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpIoIOUtils_LineReaderIterable_$1 = { "", "edu.stanford.nlp.io", ptrTable, methods, fields, 7, 0x8008, 5, 2, 0, -1, 1, 2, -1 };
  return &_EduStanfordNlpIoIOUtils_LineReaderIterable_$1;
}

@end

NSString *EduStanfordNlpIoIOUtils_LineReaderIterable_$1_getNext(EduStanfordNlpIoIOUtils_LineReaderIterable_$1 *self) {
  @try {
    return [((JavaIoBufferedReader *) nil_chk(self->this$0_->reader_)) readLine];
  }
  @catch (JavaIoIOException *ex) {
    @throw new_EduStanfordNlpIoRuntimeIOException_initWithNSException_(ex);
  }
}

void EduStanfordNlpIoIOUtils_LineReaderIterable_$1_initWithEduStanfordNlpIoIOUtils_LineReaderIterable_(EduStanfordNlpIoIOUtils_LineReaderIterable_$1 *self, EduStanfordNlpIoIOUtils_LineReaderIterable *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
  self->next_ = EduStanfordNlpIoIOUtils_LineReaderIterable_$1_getNext(self);
}

EduStanfordNlpIoIOUtils_LineReaderIterable_$1 *new_EduStanfordNlpIoIOUtils_LineReaderIterable_$1_initWithEduStanfordNlpIoIOUtils_LineReaderIterable_(EduStanfordNlpIoIOUtils_LineReaderIterable *outer$) {
  J2OBJC_NEW_IMPL(EduStanfordNlpIoIOUtils_LineReaderIterable_$1, initWithEduStanfordNlpIoIOUtils_LineReaderIterable_, outer$)
}

EduStanfordNlpIoIOUtils_LineReaderIterable_$1 *create_EduStanfordNlpIoIOUtils_LineReaderIterable_$1_initWithEduStanfordNlpIoIOUtils_LineReaderIterable_(EduStanfordNlpIoIOUtils_LineReaderIterable *outer$) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpIoIOUtils_LineReaderIterable_$1, initWithEduStanfordNlpIoIOUtils_LineReaderIterable_, outer$)
}

@implementation EduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable

- (instancetype)initWithJavaIoReader:(JavaIoReader *)reader {
  EduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable_initWithJavaIoReader_(self, reader);
  return self;
}

- (instancetype)initWithJavaIoReader:(JavaIoReader *)reader
                             withInt:(jint)bufferSize {
  EduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable_initWithJavaIoReader_withInt_(self, reader, bufferSize);
  return self;
}

- (id<JavaUtilIterator>)iterator {
  return new_EduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable_$1_initWithEduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable_(self);
}

- (void)forEachWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaLangIterable_forEachWithJavaUtilFunctionConsumer_(self, arg0);
}

- (id<JavaUtilSpliterator>)spliterator {
  return JavaLangIterable_spliterator(self);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaIoReader:);
  methods[1].selector = @selector(initWithJavaIoReader:withInt:);
  methods[2].selector = @selector(iterator);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "reader_", "LJavaIoReader;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "bufferSize_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoReader;", "LJavaIoReader;I", "()Ljava/util/Iterator<Ljava/lang/String;>;", "LEduStanfordNlpIoIOUtils;", "Ljava/lang/Object;Ljava/lang/Iterable<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable = { "EolPreservingLineReaderIterable", "edu.stanford.nlp.io", ptrTable, methods, fields, 7, 0x1a, 3, 2, 3, -1, -1, 4, -1 };
  return &_EduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable;
}

@end

void EduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable_initWithJavaIoReader_(EduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable *self, JavaIoReader *reader) {
  EduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable_initWithJavaIoReader_withInt_(self, reader, EduStanfordNlpIoIOUtils_SLURP_BUFFER_SIZE);
}

EduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable *new_EduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable_initWithJavaIoReader_(JavaIoReader *reader) {
  J2OBJC_NEW_IMPL(EduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable, initWithJavaIoReader_, reader)
}

EduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable *create_EduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable_initWithJavaIoReader_(JavaIoReader *reader) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable, initWithJavaIoReader_, reader)
}

void EduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable_initWithJavaIoReader_withInt_(EduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable *self, JavaIoReader *reader, jint bufferSize) {
  NSObject_init(self);
  self->reader_ = reader;
  self->bufferSize_ = bufferSize;
}

EduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable *new_EduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable_initWithJavaIoReader_withInt_(JavaIoReader *reader, jint bufferSize) {
  J2OBJC_NEW_IMPL(EduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable, initWithJavaIoReader_withInt_, reader, bufferSize)
}

EduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable *create_EduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable_initWithJavaIoReader_withInt_(JavaIoReader *reader, jint bufferSize) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable, initWithJavaIoReader_withInt_, reader, bufferSize)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable)

@implementation EduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable_$1

- (NSString *)getNext {
  return EduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable_$1_getNext(self);
}

- (jboolean)copyUntilEol {
  return EduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable_$1_copyUntilEol(self);
}

- (jboolean)hasNext {
  if (done_) return false;
  if (next_ == nil) {
    next_ = EduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable_$1_getNext(self);
  }
  if (next_ == nil) {
    done_ = true;
  }
  return !done_;
}

- (NSString *)next {
  if (![self hasNext]) {
    @throw new_JavaUtilNoSuchElementException_init();
  }
  NSString *res = next_;
  next_ = nil;
  return res;
}

- (void)remove {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (instancetype)initWithEduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable:(EduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable *)outer$ {
  EduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable_$1_initWithEduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable_(self, outer$);
  return self;
}

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaUtilIterator_forEachRemainingWithJavaUtilFunctionConsumer_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(getNext);
  methods[1].selector = @selector(copyUntilEol);
  methods[2].selector = @selector(hasNext);
  methods[3].selector = @selector(next);
  methods[4].selector = @selector(remove);
  methods[5].selector = @selector(initWithEduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LEduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "next_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "sb_", "LJavaLangStringBuilder;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "charBuffer_", "[C", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "charBufferPos_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "charsInBuffer_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "lastWasLF_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable;", "iterator", "Ljava/lang/Object;Ljava/util/Iterator<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable_$1 = { "", "edu.stanford.nlp.io", ptrTable, methods, fields, 7, 0x8008, 6, 8, 0, -1, 1, 2, -1 };
  return &_EduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable_$1;
}

@end

NSString *EduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable_$1_getNext(EduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable_$1 *self) {
  @try {
    while (true) {
      if (self->charBufferPos_ < 0) {
        self->charsInBuffer_ = [((JavaIoReader *) nil_chk(self->this$0_->reader_)) readWithCharArray:self->charBuffer_];
        if (self->charsInBuffer_ < 0) {
          if ([((JavaLangStringBuilder *) nil_chk(self->sb_)) length] > 0) {
            NSString *line = [((JavaLangStringBuilder *) nil_chk(self->sb_)) description];
            [((JavaLangStringBuilder *) nil_chk(self->sb_)) setLengthWithInt:0];
            return line;
          }
          else {
            return nil;
          }
        }
        self->charBufferPos_ = 0;
      }
      jboolean eolReached = EduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable_$1_copyUntilEol(self);
      if (eolReached) {
        NSString *line = [((JavaLangStringBuilder *) nil_chk(self->sb_)) description];
        [((JavaLangStringBuilder *) nil_chk(self->sb_)) setLengthWithInt:0];
        return line;
      }
    }
  }
  @catch (JavaIoIOException *ex) {
    @throw new_EduStanfordNlpIoRuntimeIOException_initWithNSException_(ex);
  }
}

jboolean EduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable_$1_copyUntilEol(EduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable_$1 *self) {
  for (jint i = self->charBufferPos_; i < self->charsInBuffer_; i++) {
    if (IOSCharArray_Get(nil_chk(self->charBuffer_), i) == 0x000a) {
      (void) [((JavaLangStringBuilder *) nil_chk(self->sb_)) appendWithCharArray:self->charBuffer_ withInt:self->charBufferPos_ withInt:i - self->charBufferPos_ + 1];
      self->charBufferPos_ = i + 1;
      self->lastWasLF_ = false;
      return true;
    }
    else if (self->lastWasLF_) {
      if (i > self->charBufferPos_) {
        (void) [((JavaLangStringBuilder *) nil_chk(self->sb_)) appendWithCharArray:self->charBuffer_ withInt:self->charBufferPos_ withInt:i - self->charBufferPos_];
        self->charBufferPos_ = i;
        self->lastWasLF_ = false;
        return true;
      }
    }
    self->lastWasLF_ = (IOSCharArray_Get(self->charBuffer_, i) == 0x000d);
  }
  (void) [((JavaLangStringBuilder *) nil_chk(self->sb_)) appendWithCharArray:self->charBuffer_ withInt:self->charBufferPos_ withInt:self->charsInBuffer_ - self->charBufferPos_];
  self->charBufferPos_ = -1;
  return false;
}

void EduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable_$1_initWithEduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable_(EduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable_$1 *self, EduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
  self->done_ = false;
  self->sb_ = new_JavaLangStringBuilder_initWithInt_(80);
  self->charBuffer_ = [IOSCharArray newArrayWithLength:outer$->bufferSize_];
  self->charBufferPos_ = -1;
  self->charsInBuffer_ = 0;
  self->lastWasLF_ = false;
}

EduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable_$1 *new_EduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable_$1_initWithEduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable_(EduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable *outer$) {
  J2OBJC_NEW_IMPL(EduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable_$1, initWithEduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable_, outer$)
}

EduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable_$1 *create_EduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable_$1_initWithEduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable_(EduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable *outer$) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable_$1, initWithEduStanfordNlpIoIOUtils_EolPreservingLineReaderIterable_, outer$)
}

@implementation EduStanfordNlpIoIOUtils_$2

- (id<JavaUtilIterator>)iterator {
  return new_EduStanfordNlpIoIOUtils_$2_$1_initWithEduStanfordNlpIoIOUtils_$2_(self);
}

- (instancetype)initWithJavaIoFile:(JavaIoFile *)capture$0
          withJavaUtilRegexPattern:(JavaUtilRegexPattern *)capture$1 {
  EduStanfordNlpIoIOUtils_$2_initWithJavaIoFile_withJavaUtilRegexPattern_(self, capture$0, capture$1);
  return self;
}

- (void)forEachWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaLangIterable_forEachWithJavaUtilFunctionConsumer_(self, arg0);
}

- (id<JavaUtilSpliterator>)spliterator {
  return JavaLangIterable_spliterator(self);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(iterator);
  methods[1].selector = @selector(initWithJavaIoFile:withJavaUtilRegexPattern:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$dir_", "LJavaIoFile;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$pattern_", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Iterator<Ljava/io/File;>;", "LJavaIoFile;LJavaUtilRegexPattern;", "LEduStanfordNlpIoIOUtils;", "iterFilesRecursiveWithJavaIoFile:withJavaUtilRegexPattern:", "Ljava/lang/Object;Ljava/lang/Iterable<Ljava/io/File;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpIoIOUtils_$2 = { "", "edu.stanford.nlp.io", ptrTable, methods, fields, 7, 0x8008, 2, 2, 2, -1, 3, 4, -1 };
  return &_EduStanfordNlpIoIOUtils_$2;
}

@end

void EduStanfordNlpIoIOUtils_$2_initWithJavaIoFile_withJavaUtilRegexPattern_(EduStanfordNlpIoIOUtils_$2 *self, JavaIoFile *capture$0, JavaUtilRegexPattern *capture$1) {
  self->val$dir_ = capture$0;
  self->val$pattern_ = capture$1;
  NSObject_init(self);
}

EduStanfordNlpIoIOUtils_$2 *new_EduStanfordNlpIoIOUtils_$2_initWithJavaIoFile_withJavaUtilRegexPattern_(JavaIoFile *capture$0, JavaUtilRegexPattern *capture$1) {
  J2OBJC_NEW_IMPL(EduStanfordNlpIoIOUtils_$2, initWithJavaIoFile_withJavaUtilRegexPattern_, capture$0, capture$1)
}

EduStanfordNlpIoIOUtils_$2 *create_EduStanfordNlpIoIOUtils_$2_initWithJavaIoFile_withJavaUtilRegexPattern_(JavaIoFile *capture$0, JavaUtilRegexPattern *capture$1) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpIoIOUtils_$2, initWithJavaIoFile_withJavaUtilRegexPattern_, capture$0, capture$1)
}

@implementation EduStanfordNlpIoIOUtils_$2_$1

- (jboolean)hasNext {
  return self->file_ != nil;
}

- (JavaIoFile *)next {
  JavaIoFile *result = self->file_;
  if (result == nil) {
    @throw new_JavaUtilNoSuchElementException_init();
  }
  self->file_ = EduStanfordNlpIoIOUtils_$2_$1_findNext(self);
  return result;
}

- (JavaIoFile *)findNext {
  return EduStanfordNlpIoIOUtils_$2_$1_findNext(self);
}

- (instancetype)initWithEduStanfordNlpIoIOUtils_$2:(EduStanfordNlpIoIOUtils_$2 *)outer$ {
  EduStanfordNlpIoIOUtils_$2_$1_initWithEduStanfordNlpIoIOUtils_$2_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaIoFile;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(hasNext);
  methods[1].selector = @selector(next);
  methods[2].selector = @selector(findNext);
  methods[3].selector = @selector(initWithEduStanfordNlpIoIOUtils_$2:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LEduStanfordNlpIoIOUtils_$2;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "files_", "LJavaUtilQueue;", .constantValue.asLong = 0, 0x12, -1, -1, 2, -1 },
    { "file_", "LJavaIoFile;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/io/File;", "LEduStanfordNlpIoIOUtils_$2;", "Ljava/util/Queue<Ljava/io/File;>;", "iterator", "Ledu/stanford/nlp/util/AbstractIterator<Ljava/io/File;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpIoIOUtils_$2_$1 = { "", "edu.stanford.nlp.io", ptrTable, methods, fields, 7, 0x8008, 4, 3, 1, -1, 3, 4, -1 };
  return &_EduStanfordNlpIoIOUtils_$2_$1;
}

@end

JavaIoFile *EduStanfordNlpIoIOUtils_$2_$1_findNext(EduStanfordNlpIoIOUtils_$2_$1 *self) {
  JavaIoFile *next = nil;
  while (![((id<JavaUtilQueue>) nil_chk(self->files_)) isEmpty] && next == nil) {
    next = [self->files_ remove];
    if ([((JavaIoFile *) nil_chk(next)) isDirectory]) {
      [self->files_ addAllWithJavaUtilCollection:JavaUtilArrays_asListWithNSObjectArray_([next listFiles])];
      next = nil;
    }
    else if (self->this$0_->val$pattern_ != nil) {
      if (![((JavaUtilRegexMatcher *) nil_chk([self->this$0_->val$pattern_ matcherWithJavaLangCharSequence:[next getPath]])) find]) {
        next = nil;
      }
    }
  }
  return next;
}

void EduStanfordNlpIoIOUtils_$2_$1_initWithEduStanfordNlpIoIOUtils_$2_(EduStanfordNlpIoIOUtils_$2_$1 *self, EduStanfordNlpIoIOUtils_$2 *outer$) {
  self->this$0_ = outer$;
  EduStanfordNlpUtilAbstractIterator_init(self);
  self->files_ = new_JavaUtilLinkedList_initWithJavaUtilCollection_(JavaUtilCollections_singletonWithId_(outer$->val$dir_));
  self->file_ = EduStanfordNlpIoIOUtils_$2_$1_findNext(self);
}

EduStanfordNlpIoIOUtils_$2_$1 *new_EduStanfordNlpIoIOUtils_$2_$1_initWithEduStanfordNlpIoIOUtils_$2_(EduStanfordNlpIoIOUtils_$2 *outer$) {
  J2OBJC_NEW_IMPL(EduStanfordNlpIoIOUtils_$2_$1, initWithEduStanfordNlpIoIOUtils_$2_, outer$)
}

EduStanfordNlpIoIOUtils_$2_$1 *create_EduStanfordNlpIoIOUtils_$2_$1_initWithEduStanfordNlpIoIOUtils_$2_(EduStanfordNlpIoIOUtils_$2 *outer$) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpIoIOUtils_$2_$1, initWithEduStanfordNlpIoIOUtils_$2_, outer$)
}

@implementation EduStanfordNlpIoIOUtils_$1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpIoIOUtils_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LEduStanfordNlpIoIOUtils;", "Ljava/util/HashSet<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpIoIOUtils_$1 = { "", "edu.stanford.nlp.io", ptrTable, methods, NULL, 7, 0x8008, 1, 0, 0, -1, -1, 1, -1 };
  return &_EduStanfordNlpIoIOUtils_$1;
}

@end

void EduStanfordNlpIoIOUtils_$1_init(EduStanfordNlpIoIOUtils_$1 *self) {
  JavaUtilHashSet_init(self);
  {
    [self addWithId:@"/"];
    [self addWithId:@"/u"];
    [self addWithId:@"/u/"];
    [self addWithId:@"/u/nlp"];
    [self addWithId:@"/u/nlp/"];
    [self addWithId:@"/u/nlp/data"];
    [self addWithId:@"/u/nlp/data/"];
    [self addWithId:@"/scr"];
    [self addWithId:@"/scr/"];
    [self addWithId:@"/scr/nlp/data"];
    [self addWithId:@"/scr/nlp/data/"];
  }
}

EduStanfordNlpIoIOUtils_$1 *new_EduStanfordNlpIoIOUtils_$1_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpIoIOUtils_$1, init)
}

EduStanfordNlpIoIOUtils_$1 *create_EduStanfordNlpIoIOUtils_$1_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpIoIOUtils_$1, init)
}
