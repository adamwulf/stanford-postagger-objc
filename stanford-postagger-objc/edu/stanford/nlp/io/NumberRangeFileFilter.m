//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/io/NumberRangeFileFilter.java
//

#include "J2ObjC_source.h"
#include "edu/stanford/nlp/io/NumberRangeFileFilter.h"
#include "java/io/File.h"
#include "java/lang/Integer.h"

@interface EduStanfordNlpIoNumberRangeFileFilter () {
 @public
  jint minimum_;
  jint maximum_;
  jboolean recursively_;
}

@end

@implementation EduStanfordNlpIoNumberRangeFileFilter

- (instancetype)initWithInt:(jint)min
                    withInt:(jint)max
                withBoolean:(jboolean)recurse {
  EduStanfordNlpIoNumberRangeFileFilter_initWithInt_withInt_withBoolean_(self, min, max, recurse);
  return self;
}

- (jboolean)acceptWithJavaIoFile:(JavaIoFile *)file {
  if ([((JavaIoFile *) nil_chk(file)) isDirectory]) {
    return recursively_;
  }
  else {
    NSString *filename = [file getName];
    jint k = ((jint) [((NSString *) nil_chk(filename)) length]) - 1;
    jchar c = [filename charAtWithInt:k];
    while (k >= 0 && (c < '0' || c > '9')) {
      k--;
      if (k >= 0) {
        c = [filename charAtWithInt:k];
      }
    }
    if (k < 0) {
      return false;
    }
    jint j = k;
    c = [filename charAtWithInt:j];
    while (j >= 0 && (c >= '0' && c <= '9')) {
      j--;
      if (j >= 0) {
        c = [filename charAtWithInt:j];
      }
    }
    j++;
    k++;
    NSString *theNumber = [filename substring:j endIndex:k];
    jint number = JavaLangInteger_parseIntWithNSString_(theNumber);
    return (number >= minimum_) && (number <= maximum_);
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:withInt:withBoolean:);
  methods[1].selector = @selector(acceptWithJavaIoFile:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "minimum_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "maximum_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "recursively_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "IIZ", "accept", "LJavaIoFile;" };
  static const J2ObjcClassInfo _EduStanfordNlpIoNumberRangeFileFilter = { "NumberRangeFileFilter", "edu.stanford.nlp.io", ptrTable, methods, fields, 7, 0x1, 2, 3, -1, -1, -1, -1, -1 };
  return &_EduStanfordNlpIoNumberRangeFileFilter;
}

@end

void EduStanfordNlpIoNumberRangeFileFilter_initWithInt_withInt_withBoolean_(EduStanfordNlpIoNumberRangeFileFilter *self, jint min, jint max, jboolean recurse) {
  NSObject_init(self);
  self->minimum_ = min;
  self->maximum_ = max;
  self->recursively_ = recurse;
}

EduStanfordNlpIoNumberRangeFileFilter *new_EduStanfordNlpIoNumberRangeFileFilter_initWithInt_withInt_withBoolean_(jint min, jint max, jboolean recurse) {
  J2OBJC_NEW_IMPL(EduStanfordNlpIoNumberRangeFileFilter, initWithInt_withInt_withBoolean_, min, max, recurse)
}

EduStanfordNlpIoNumberRangeFileFilter *create_EduStanfordNlpIoNumberRangeFileFilter_initWithInt_withInt_withBoolean_(jint min, jint max, jboolean recurse) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpIoNumberRangeFileFilter, initWithInt_withInt_withBoolean_, min, max, recurse)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpIoNumberRangeFileFilter)
