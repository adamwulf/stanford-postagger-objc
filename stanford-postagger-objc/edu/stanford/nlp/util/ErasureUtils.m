//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/util/ErasureUtils.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/util/ErasureUtils.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/reflect/Array.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/List.h"

@interface EduStanfordNlpUtilErasureUtils ()

- (instancetype)init;

@end

__attribute__((unused)) static void EduStanfordNlpUtilErasureUtils_init(EduStanfordNlpUtilErasureUtils *self);

__attribute__((unused)) static EduStanfordNlpUtilErasureUtils *new_EduStanfordNlpUtilErasureUtils_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpUtilErasureUtils *create_EduStanfordNlpUtilErasureUtils_init();

@implementation EduStanfordNlpUtilErasureUtils

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpUtilErasureUtils_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (id)uncheckedCastWithId:(id)o {
  return EduStanfordNlpUtilErasureUtils_uncheckedCastWithId_(o);
}

+ (void)noopWithId:(id)o {
  EduStanfordNlpUtilErasureUtils_noopWithId_(o);
}

+ (IOSObjectArray *)mkTArrayWithIOSClass:(IOSClass *)klass
                                 withInt:(jint)size {
  return EduStanfordNlpUtilErasureUtils_mkTArrayWithIOSClass_withInt_(klass, size);
}

+ (IOSObjectArray *)mkT2DArrayWithIOSClass:(IOSClass *)klass
                              withIntArray:(IOSIntArray *)dim {
  return EduStanfordNlpUtilErasureUtils_mkT2DArrayWithIOSClass_withIntArray_(klass, dim);
}

+ (id<JavaUtilList>)sortedIfPossibleWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  return EduStanfordNlpUtilErasureUtils_sortedIfPossibleWithJavaUtilCollection_(collection);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x9, 0, 1, -1, 2, -1, -1 },
    { NULL, "V", 0x9, 3, 1, -1, -1, -1, -1 },
    { NULL, "[LNSObject;", 0x9, 4, 5, -1, 6, -1, -1 },
    { NULL, "[[LNSObject;", 0x9, 7, 8, -1, 9, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 10, 11, -1, 12, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(uncheckedCastWithId:);
  methods[2].selector = @selector(noopWithId:);
  methods[3].selector = @selector(mkTArrayWithIOSClass:withInt:);
  methods[4].selector = @selector(mkT2DArrayWithIOSClass:withIntArray:);
  methods[5].selector = @selector(sortedIfPossibleWithJavaUtilCollection:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "uncheckedCast", "LNSObject;", "<T:Ljava/lang/Object;>(Ljava/lang/Object;)TT;", "noop", "mkTArray", "LIOSClass;I", "<T:Ljava/lang/Object;>(Ljava/lang/Class<*>;I)[TT;", "mkT2DArray", "LIOSClass;[I", "<T:Ljava/lang/Object;>(Ljava/lang/Class<*>;[I)[[TT;", "sortedIfPossible", "LJavaUtilCollection;", "<T:Ljava/lang/Object;>(Ljava/util/Collection<TT;>;)Ljava/util/List<TT;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilErasureUtils = { "ErasureUtils", "edu.stanford.nlp.util", ptrTable, methods, NULL, 7, 0x1, 6, 0, -1, -1, -1, -1, -1 };
  return &_EduStanfordNlpUtilErasureUtils;
}

@end

void EduStanfordNlpUtilErasureUtils_init(EduStanfordNlpUtilErasureUtils *self) {
  NSObject_init(self);
}

EduStanfordNlpUtilErasureUtils *new_EduStanfordNlpUtilErasureUtils_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilErasureUtils, init)
}

EduStanfordNlpUtilErasureUtils *create_EduStanfordNlpUtilErasureUtils_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilErasureUtils, init)
}

id EduStanfordNlpUtilErasureUtils_uncheckedCastWithId_(id o) {
  EduStanfordNlpUtilErasureUtils_initialize();
  return o;
}

void EduStanfordNlpUtilErasureUtils_noopWithId_(id o) {
  EduStanfordNlpUtilErasureUtils_initialize();
}

IOSObjectArray *EduStanfordNlpUtilErasureUtils_mkTArrayWithIOSClass_withInt_(IOSClass *klass, jint size) {
  EduStanfordNlpUtilErasureUtils_initialize();
  return (IOSObjectArray *) cast_check((JavaLangReflectArray_newInstanceWithIOSClass_withInt_(klass, size)), IOSClass_arrayType(NSObject_class_(), 1));
}

IOSObjectArray *EduStanfordNlpUtilErasureUtils_mkT2DArrayWithIOSClass_withIntArray_(IOSClass *klass, IOSIntArray *dim) {
  EduStanfordNlpUtilErasureUtils_initialize();
  if (((IOSIntArray *) nil_chk(dim))->size_ != 2) @throw new_JavaLangRuntimeException_initWithNSString_(@"dim should be an array of size 2.");
  return (IOSObjectArray *) cast_check((JavaLangReflectArray_newInstanceWithIOSClass_withIntArray_(klass, dim)), IOSClass_arrayType(NSObject_class_(), 2));
}

id<JavaUtilList> EduStanfordNlpUtilErasureUtils_sortedIfPossibleWithJavaUtilCollection_(id<JavaUtilCollection> collection) {
  EduStanfordNlpUtilErasureUtils_initialize();
  id<JavaUtilList> result = new_JavaUtilArrayList_initWithJavaUtilCollection_(collection);
  @try {
    JavaUtilCollections_sortWithJavaUtilList_(result);
  }
  @catch (JavaLangClassCastException *e) {
  }
  @catch (JavaLangNullPointerException *npe) {
  }
  return result;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpUtilErasureUtils)
