//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/util/CollectionValuedMap.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/util/CollectionFactory.h"
#include "edu/stanford/nlp/util/CollectionValuedMap.h"
#include "edu/stanford/nlp/util/DeltaCollectionValuedMap.h"
#include "edu/stanford/nlp/util/DeltaMap.h"
#include "edu/stanford/nlp/util/ErasureUtils.h"
#include "edu/stanford/nlp/util/MapFactory.h"
#include "java/io/PrintStream.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/Integer.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "java/util/Random.h"
#include "java/util/Set.h"
#include "java/util/function/BiConsumer.h"
#include "java/util/function/BiFunction.h"
#include "java/util/function/Function.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface EduStanfordNlpUtilCollectionValuedMap () {
 @public
  id<JavaUtilMap> map_;
  jboolean treatCollectionsAsImmutable_;
  id<JavaUtilCollection> emptyValue_;
}

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpUtilCollectionValuedMap, map_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(EduStanfordNlpUtilCollectionValuedMap, emptyValue_, id<JavaUtilCollection>)

inline jlong EduStanfordNlpUtilCollectionValuedMap_get_serialVersionUID();
#define EduStanfordNlpUtilCollectionValuedMap_serialVersionUID -9064664153962599076LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpUtilCollectionValuedMap, serialVersionUID, jlong)

@implementation EduStanfordNlpUtilCollectionValuedMap

- (id<JavaUtilCollection>)putWithId:(id)key
                             withId:(id<JavaUtilCollection>)collection {
  return [((id<JavaUtilMap>) nil_chk(map_)) putWithId:key withId:collection];
}

- (void)putAllWithJavaUtilMap:(id<JavaUtilMap>)m {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id<JavaUtilCollection>)getWithId:(id)key {
  id<JavaUtilCollection> c = [((id<JavaUtilMap>) nil_chk(map_)) getWithId:key];
  if (c == nil) {
    c = emptyValue_;
  }
  return c;
}

- (void)addWithId:(id)key
           withId:(id)value {
  if (treatCollectionsAsImmutable_) {
    id<JavaUtilCollection> newC = [((EduStanfordNlpUtilCollectionFactory *) nil_chk(cf_)) newCollection];
    id<JavaUtilCollection> c = [((id<JavaUtilMap>) nil_chk(map_)) getWithId:key];
    if (c != nil) {
      [((id<JavaUtilCollection>) nil_chk(newC)) addAllWithJavaUtilCollection:c];
    }
    [((id<JavaUtilCollection>) nil_chk(newC)) addWithId:value];
    (void) [((id<JavaUtilMap>) nil_chk(map_)) putWithId:key withId:newC];
  }
  else {
    id<JavaUtilCollection> c = [((id<JavaUtilMap>) nil_chk(map_)) getWithId:key];
    if (c == nil) {
      c = [((EduStanfordNlpUtilCollectionFactory *) nil_chk(cf_)) newCollection];
      (void) [((id<JavaUtilMap>) nil_chk(map_)) putWithId:key withId:c];
    }
    [((id<JavaUtilCollection>) nil_chk(c)) addWithId:value];
  }
}

- (void)addAllWithId:(id)key
withJavaUtilCollection:(id<JavaUtilCollection>)values {
  if (treatCollectionsAsImmutable_) {
    id<JavaUtilCollection> newC = [((EduStanfordNlpUtilCollectionFactory *) nil_chk(cf_)) newCollection];
    id<JavaUtilCollection> c = [((id<JavaUtilMap>) nil_chk(map_)) getWithId:key];
    if (c != nil) {
      [((id<JavaUtilCollection>) nil_chk(newC)) addAllWithJavaUtilCollection:c];
    }
    [((id<JavaUtilCollection>) nil_chk(newC)) addAllWithJavaUtilCollection:values];
    (void) [((id<JavaUtilMap>) nil_chk(map_)) putWithId:key withId:newC];
  }
  else {
    id<JavaUtilCollection> c = [((id<JavaUtilMap>) nil_chk(map_)) getWithId:key];
    if (c == nil) {
      c = [((EduStanfordNlpUtilCollectionFactory *) nil_chk(cf_)) newCollection];
      (void) [((id<JavaUtilMap>) nil_chk(map_)) putWithId:key withId:c];
    }
    [((id<JavaUtilCollection>) nil_chk(c)) addAllWithJavaUtilCollection:values];
  }
}

- (void)addKeyWithId:(id)key {
  id<JavaUtilCollection> c = [((id<JavaUtilMap>) nil_chk(map_)) getWithId:key];
  if (c == nil) {
    c = [((EduStanfordNlpUtilCollectionFactory *) nil_chk(cf_)) newCollection];
    (void) [((id<JavaUtilMap>) nil_chk(map_)) putWithId:key withId:c];
  }
}

- (void)addAllWithJavaUtilMap:(id<JavaUtilMap>)m {
  if ([m isKindOfClass:[EduStanfordNlpUtilCollectionValuedMap class]]) {
    @throw new_JavaLangUnsupportedOperationException_init();
  }
  for (id<JavaUtilMap_Entry> __strong e in nil_chk([((id<JavaUtilMap>) nil_chk(m)) entrySet])) {
    [self addWithId:[((id<JavaUtilMap_Entry>) nil_chk(e)) getKey] withId:[e getValue]];
  }
}

- (void)addAllWithEduStanfordNlpUtilCollectionValuedMap:(EduStanfordNlpUtilCollectionValuedMap *)cvm {
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((EduStanfordNlpUtilCollectionValuedMap *) nil_chk(cvm)) entrySet])) {
    id key = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey];
    id<JavaUtilCollection> currentCollection = [self getWithId:key];
    id<JavaUtilCollection> newValues = [entry_ getValue];
    if (treatCollectionsAsImmutable_) {
      id<JavaUtilCollection> newCollection = [((EduStanfordNlpUtilCollectionFactory *) nil_chk(cf_)) newCollection];
      if (currentCollection != nil) {
        [((id<JavaUtilCollection>) nil_chk(newCollection)) addAllWithJavaUtilCollection:currentCollection];
      }
      [((id<JavaUtilCollection>) nil_chk(newCollection)) addAllWithJavaUtilCollection:newValues];
      (void) [((id<JavaUtilMap>) nil_chk(map_)) putWithId:key withId:newCollection];
    }
    else {
      jboolean needToAdd = false;
      if (currentCollection == emptyValue_) {
        currentCollection = [((EduStanfordNlpUtilCollectionFactory *) nil_chk(cf_)) newCollection];
        needToAdd = true;
      }
      [((id<JavaUtilCollection>) nil_chk(currentCollection)) addAllWithJavaUtilCollection:newValues];
      if (needToAdd) {
        (void) [((id<JavaUtilMap>) nil_chk(map_)) putWithId:key withId:currentCollection];
      }
    }
  }
}

- (id<JavaUtilCollection>)removeWithId:(id)key {
  return [((id<JavaUtilMap>) nil_chk(map_)) removeWithId:key];
}

- (void)removeAllWithJavaUtilCollection:(id<JavaUtilCollection>)keys {
  for (id __strong k in nil_chk(keys)) {
    (void) [self removeWithId:k];
  }
}

- (void)removeMappingWithId:(id)key
                     withId:(id)value {
  if (treatCollectionsAsImmutable_) {
    id<JavaUtilCollection> c = [((id<JavaUtilMap>) nil_chk(map_)) getWithId:key];
    if (c != nil) {
      id<JavaUtilCollection> newC = [((EduStanfordNlpUtilCollectionFactory *) nil_chk(cf_)) newCollection];
      [((id<JavaUtilCollection>) nil_chk(newC)) addAllWithJavaUtilCollection:c];
      [newC removeWithId:value];
      (void) [((id<JavaUtilMap>) nil_chk(map_)) putWithId:key withId:newC];
    }
  }
  else {
    id<JavaUtilCollection> c = [self getWithId:key];
    [((id<JavaUtilCollection>) nil_chk(c)) removeWithId:value];
  }
}

- (void)clear {
  [((id<JavaUtilMap>) nil_chk(map_)) clear];
}

- (jboolean)containsKeyWithId:(id)key {
  return [((id<JavaUtilMap>) nil_chk(map_)) containsKeyWithId:key];
}

- (jboolean)containsValueWithId:(id)value {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (jboolean)isEmpty {
  return [((id<JavaUtilMap>) nil_chk(map_)) isEmpty];
}

- (id<JavaUtilSet>)entrySet {
  return [((id<JavaUtilMap>) nil_chk(map_)) entrySet];
}

- (id<JavaUtilSet>)keySet {
  return [((id<JavaUtilMap>) nil_chk(map_)) keySet];
}

- (jint)size {
  return [((id<JavaUtilMap>) nil_chk(map_)) size];
}

- (id<JavaUtilCollection>)values {
  return [((id<JavaUtilMap>) nil_chk(map_)) values];
}

- (id<JavaUtilCollection>)allValues {
  id<JavaUtilCollection> c = [((EduStanfordNlpUtilCollectionFactory *) nil_chk(cf_)) newCollection];
  for (id<JavaUtilCollection> __strong c1 in nil_chk([((id<JavaUtilMap>) nil_chk(map_)) values])) {
    [((id<JavaUtilCollection>) nil_chk(c)) addAllWithJavaUtilCollection:c1];
  }
  return c;
}

- (jboolean)isEqual:(id)o {
  if (self == o) {
    return true;
  }
  if (!([o isKindOfClass:[EduStanfordNlpUtilCollectionValuedMap class]])) {
    return false;
  }
  EduStanfordNlpUtilCollectionValuedMap *other = EduStanfordNlpUtilErasureUtils_uncheckedCastWithId_(o);
  if ([((EduStanfordNlpUtilCollectionValuedMap *) nil_chk(other)) size] != [self size]) {
    return false;
  }
  @try {
    for (id<JavaUtilMap_Entry> __strong e in nil_chk([self entrySet])) {
      id key = [((id<JavaUtilMap_Entry>) nil_chk(e)) getKey];
      id<JavaUtilCollection> value = [e getValue];
      if (value == nil) {
        if (!([other getWithId:key] == nil && [other containsKeyWithId:key])) {
          return false;
        }
      }
      else {
        if (![value isEqual:[other getWithId:key]]) {
          return false;
        }
      }
    }
  }
  @catch (JavaLangClassCastException *unused) {
    return false;
  }
  @catch (JavaLangNullPointerException *unused) {
    return false;
  }
  return true;
}

- (NSUInteger)hash {
  return ((jint) [((id<JavaUtilMap>) nil_chk(map_)) hash]);
}

- (EduStanfordNlpUtilCollectionValuedMap *)deltaClone {
  EduStanfordNlpUtilCollectionValuedMap *result = new_EduStanfordNlpUtilCollectionValuedMap_initWithEduStanfordNlpUtilMapFactory_withEduStanfordNlpUtilCollectionFactory_withBoolean_(nil, cf_, true);
  result->map_ = new_EduStanfordNlpUtilDeltaMap_initWithJavaUtilMap_(self->map_);
  return result;
}

- (EduStanfordNlpUtilCollectionValuedMap *)clone {
  EduStanfordNlpUtilCollectionValuedMap *result = new_EduStanfordNlpUtilCollectionValuedMap_initWithEduStanfordNlpUtilCollectionValuedMap_(self);
  return result;
}

- (NSString *)description {
  JavaLangStringBuilder *buf = new_JavaLangStringBuilder_init();
  (void) [buf appendWithChar:'{'];
  id<JavaUtilIterator> i = [((id<JavaUtilSet>) nil_chk([self entrySet])) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(i)) hasNext]) {
    id<JavaUtilMap_Entry> e = [i next];
    id key = [((id<JavaUtilMap_Entry>) nil_chk(e)) getKey];
    id<JavaUtilCollection> value = [e getValue];
    (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithId:key == (id) self ? @"(this Map)" : (id) key])) appendWithChar:'='])) appendWithId:value == (id) self ? @"(this Map)" : (id) value];
    if ([i hasNext]) {
      (void) [buf appendWithNSString:@", "];
    }
  }
  (void) [buf appendWithChar:'}'];
  return [buf description];
}

- (instancetype)initWithEduStanfordNlpUtilMapFactory:(EduStanfordNlpUtilMapFactory *)mf
             withEduStanfordNlpUtilCollectionFactory:(EduStanfordNlpUtilCollectionFactory *)cf
                                         withBoolean:(jboolean)treatCollectionsAsImmutable {
  EduStanfordNlpUtilCollectionValuedMap_initWithEduStanfordNlpUtilMapFactory_withEduStanfordNlpUtilCollectionFactory_withBoolean_(self, mf, cf, treatCollectionsAsImmutable);
  return self;
}

- (instancetype)initWithEduStanfordNlpUtilCollectionValuedMap:(EduStanfordNlpUtilCollectionValuedMap *)cvm {
  EduStanfordNlpUtilCollectionValuedMap_initWithEduStanfordNlpUtilCollectionValuedMap_(self, cvm);
  return self;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpUtilCollectionValuedMap_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithEduStanfordNlpUtilCollectionFactory:(EduStanfordNlpUtilCollectionFactory *)cf {
  EduStanfordNlpUtilCollectionValuedMap_initWithEduStanfordNlpUtilCollectionFactory_(self, cf);
  return self;
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  EduStanfordNlpUtilCollectionValuedMap_mainWithNSStringArray_(args);
}

- (id<JavaUtilCollection>)computeWithId:(id)arg0
         withJavaUtilFunctionBiFunction:(id<JavaUtilFunctionBiFunction>)arg1 {
  return JavaUtilMap_computeWithId_withJavaUtilFunctionBiFunction_(self, arg0, arg1);
}

- (id<JavaUtilCollection>)computeIfAbsentWithId:(id)arg0
                   withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg1 {
  return JavaUtilMap_computeIfAbsentWithId_withJavaUtilFunctionFunction_(self, arg0, arg1);
}

- (id<JavaUtilCollection>)computeIfPresentWithId:(id)arg0
                  withJavaUtilFunctionBiFunction:(id<JavaUtilFunctionBiFunction>)arg1 {
  return JavaUtilMap_computeIfPresentWithId_withJavaUtilFunctionBiFunction_(self, arg0, arg1);
}

- (void)forEachWithJavaUtilFunctionBiConsumer:(id<JavaUtilFunctionBiConsumer>)arg0 {
  JavaUtilMap_forEachWithJavaUtilFunctionBiConsumer_(self, arg0);
}

- (id<JavaUtilCollection>)getOrDefaultWithId:(id)arg0
                                      withId:(id<JavaUtilCollection>)arg1 {
  return JavaUtilMap_getOrDefaultWithId_withId_(self, arg0, arg1);
}

- (id<JavaUtilCollection>)mergeWithId:(id)arg0
                               withId:(id<JavaUtilCollection>)arg1
       withJavaUtilFunctionBiFunction:(id<JavaUtilFunctionBiFunction>)arg2 {
  return JavaUtilMap_mergeWithId_withId_withJavaUtilFunctionBiFunction_(self, arg0, arg1, arg2);
}

- (id<JavaUtilCollection>)putIfAbsentWithId:(id)arg0
                                     withId:(id<JavaUtilCollection>)arg1 {
  return JavaUtilMap_putIfAbsentWithId_withId_(self, arg0, arg1);
}

- (jboolean)removeWithId:(id)arg0
                  withId:(id)arg1 {
  return JavaUtilMap_removeWithId_withId_(self, arg0, arg1);
}

- (id<JavaUtilCollection>)replaceWithId:(id)arg0
                                 withId:(id<JavaUtilCollection>)arg1 {
  return JavaUtilMap_replaceWithId_withId_(self, arg0, arg1);
}

- (jboolean)replaceWithId:(id)arg0
                   withId:(id<JavaUtilCollection>)arg1
                   withId:(id<JavaUtilCollection>)arg2 {
  return JavaUtilMap_replaceWithId_withId_withId_(self, arg0, arg1, arg2);
}

- (void)replaceAllWithJavaUtilFunctionBiFunction:(id<JavaUtilFunctionBiFunction>)arg0 {
  JavaUtilMap_replaceAllWithJavaUtilFunctionBiFunction_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaUtilCollection;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, 6, 7, -1, 8, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, 11, -1, -1 },
    { NULL, "V", 0x1, 12, 1, -1, 13, -1, -1 },
    { NULL, "V", 0x1, 14, 7, -1, 15, -1, -1 },
    { NULL, "V", 0x1, 12, 4, -1, 16, -1, -1 },
    { NULL, "V", 0x1, 12, 17, -1, 18, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, 19, 7, -1, 8, -1, -1 },
    { NULL, "V", 0x1, 20, 21, -1, 22, -1, -1 },
    { NULL, "V", 0x1, 23, 10, -1, 11, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 24, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 25, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 26, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 27, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, -1, -1, -1, 28, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, -1, -1, -1, 29, -1, -1 },
    { NULL, "Z", 0x1, 30, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 31, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpUtilCollectionValuedMap;", 0x1, -1, -1, -1, 32, -1, -1 },
    { NULL, "LEduStanfordNlpUtilCollectionValuedMap;", 0x1, -1, -1, -1, 32, -1, -1 },
    { NULL, "LNSString;", 0x1, 33, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 34, -1, 35, -1, -1 },
    { NULL, NULL, 0x1, -1, 17, -1, 18, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 36, -1, 37, -1, -1 },
    { NULL, "V", 0x9, 38, 39, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(putWithId:withId:);
  methods[1].selector = @selector(putAllWithJavaUtilMap:);
  methods[2].selector = @selector(getWithId:);
  methods[3].selector = @selector(addWithId:withId:);
  methods[4].selector = @selector(addAllWithId:withJavaUtilCollection:);
  methods[5].selector = @selector(addKeyWithId:);
  methods[6].selector = @selector(addAllWithJavaUtilMap:);
  methods[7].selector = @selector(addAllWithEduStanfordNlpUtilCollectionValuedMap:);
  methods[8].selector = @selector(removeWithId:);
  methods[9].selector = @selector(removeAllWithJavaUtilCollection:);
  methods[10].selector = @selector(removeMappingWithId:withId:);
  methods[11].selector = @selector(clear);
  methods[12].selector = @selector(containsKeyWithId:);
  methods[13].selector = @selector(containsValueWithId:);
  methods[14].selector = @selector(isEmpty);
  methods[15].selector = @selector(entrySet);
  methods[16].selector = @selector(keySet);
  methods[17].selector = @selector(size);
  methods[18].selector = @selector(values);
  methods[19].selector = @selector(allValues);
  methods[20].selector = @selector(isEqual:);
  methods[21].selector = @selector(hash);
  methods[22].selector = @selector(deltaClone);
  methods[23].selector = @selector(clone);
  methods[24].selector = @selector(description);
  methods[25].selector = @selector(initWithEduStanfordNlpUtilMapFactory:withEduStanfordNlpUtilCollectionFactory:withBoolean:);
  methods[26].selector = @selector(initWithEduStanfordNlpUtilCollectionValuedMap:);
  methods[27].selector = @selector(init);
  methods[28].selector = @selector(initWithEduStanfordNlpUtilCollectionFactory:);
  methods[29].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpUtilCollectionValuedMap_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "map_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 40, -1 },
    { "cf_", "LEduStanfordNlpUtilCollectionFactory;", .constantValue.asLong = 0, 0x4, -1, -1, 41, -1 },
    { "treatCollectionsAsImmutable_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mf_", "LEduStanfordNlpUtilMapFactory;", .constantValue.asLong = 0, 0x4, -1, -1, 42, -1 },
    { "emptyValue_", "LJavaUtilCollection;", .constantValue.asLong = 0, 0x12, -1, -1, 43, -1 },
  };
  static const void *ptrTable[] = { "put", "LNSObject;LJavaUtilCollection;", "(TK;Ljava/util/Collection<TV;>;)Ljava/util/Collection<TV;>;", "putAll", "LJavaUtilMap;", "(Ljava/util/Map<+TK;+Ljava/util/Collection<TV;>;>;)V", "get", "LNSObject;", "(Ljava/lang/Object;)Ljava/util/Collection<TV;>;", "add", "LNSObject;LNSObject;", "(TK;TV;)V", "addAll", "(TK;Ljava/util/Collection<TV;>;)V", "addKey", "(TK;)V", "(Ljava/util/Map<TK;TV;>;)V", "LEduStanfordNlpUtilCollectionValuedMap;", "(Ledu/stanford/nlp/util/CollectionValuedMap<TK;TV;>;)V", "remove", "removeAll", "LJavaUtilCollection;", "(Ljava/util/Collection<TK;>;)V", "removeMapping", "containsKey", "containsValue", "()Ljava/util/Set<Ljava/util/Map$Entry<TK;Ljava/util/Collection<TV;>;>;>;", "()Ljava/util/Set<TK;>;", "()Ljava/util/Collection<Ljava/util/Collection<TV;>;>;", "()Ljava/util/Collection<TV;>;", "equals", "hashCode", "()Ledu/stanford/nlp/util/CollectionValuedMap<TK;TV;>;", "toString", "LEduStanfordNlpUtilMapFactory;LEduStanfordNlpUtilCollectionFactory;Z", "(Ledu/stanford/nlp/util/MapFactory<TK;Ljava/util/Collection<TV;>;>;Ledu/stanford/nlp/util/CollectionFactory<TV;>;Z)V", "LEduStanfordNlpUtilCollectionFactory;", "(Ledu/stanford/nlp/util/CollectionFactory<TV;>;)V", "main", "[LNSString;", "Ljava/util/Map<TK;Ljava/util/Collection<TV;>;>;", "Ledu/stanford/nlp/util/CollectionFactory<TV;>;", "Ledu/stanford/nlp/util/MapFactory<TK;Ljava/util/Collection<TV;>;>;", "Ljava/util/Collection<TV;>;", "<K:Ljava/lang/Object;V:Ljava/lang/Object;>Ljava/lang/Object;Ljava/util/Map<TK;Ljava/util/Collection<TV;>;>;Ljava/io/Serializable;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilCollectionValuedMap = { "CollectionValuedMap", "edu.stanford.nlp.util", ptrTable, methods, fields, 7, 0x1, 30, 6, -1, -1, -1, 44, -1 };
  return &_EduStanfordNlpUtilCollectionValuedMap;
}

@end

void EduStanfordNlpUtilCollectionValuedMap_initWithEduStanfordNlpUtilMapFactory_withEduStanfordNlpUtilCollectionFactory_withBoolean_(EduStanfordNlpUtilCollectionValuedMap *self, EduStanfordNlpUtilMapFactory *mf, EduStanfordNlpUtilCollectionFactory *cf, jboolean treatCollectionsAsImmutable) {
  NSObject_init(self);
  self->mf_ = mf;
  self->cf_ = cf;
  self->treatCollectionsAsImmutable_ = treatCollectionsAsImmutable;
  self->emptyValue_ = [((EduStanfordNlpUtilCollectionFactory *) nil_chk(cf)) newEmptyCollection];
  if (mf != nil) {
    self->map_ = JavaUtilCollections_synchronizedMapWithJavaUtilMap_([mf newMap]);
  }
}

EduStanfordNlpUtilCollectionValuedMap *new_EduStanfordNlpUtilCollectionValuedMap_initWithEduStanfordNlpUtilMapFactory_withEduStanfordNlpUtilCollectionFactory_withBoolean_(EduStanfordNlpUtilMapFactory *mf, EduStanfordNlpUtilCollectionFactory *cf, jboolean treatCollectionsAsImmutable) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilCollectionValuedMap, initWithEduStanfordNlpUtilMapFactory_withEduStanfordNlpUtilCollectionFactory_withBoolean_, mf, cf, treatCollectionsAsImmutable)
}

EduStanfordNlpUtilCollectionValuedMap *create_EduStanfordNlpUtilCollectionValuedMap_initWithEduStanfordNlpUtilMapFactory_withEduStanfordNlpUtilCollectionFactory_withBoolean_(EduStanfordNlpUtilMapFactory *mf, EduStanfordNlpUtilCollectionFactory *cf, jboolean treatCollectionsAsImmutable) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilCollectionValuedMap, initWithEduStanfordNlpUtilMapFactory_withEduStanfordNlpUtilCollectionFactory_withBoolean_, mf, cf, treatCollectionsAsImmutable)
}

void EduStanfordNlpUtilCollectionValuedMap_initWithEduStanfordNlpUtilCollectionValuedMap_(EduStanfordNlpUtilCollectionValuedMap *self, EduStanfordNlpUtilCollectionValuedMap *cvm) {
  NSObject_init(self);
  self->mf_ = ((EduStanfordNlpUtilCollectionValuedMap *) nil_chk(cvm))->mf_;
  self->cf_ = cvm->cf_;
  self->treatCollectionsAsImmutable_ = cvm->treatCollectionsAsImmutable_;
  self->emptyValue_ = cvm->emptyValue_;
  self->map_ = JavaUtilCollections_synchronizedMapWithJavaUtilMap_([((EduStanfordNlpUtilMapFactory *) nil_chk(self->mf_)) newMap]);
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((id<JavaUtilMap>) nil_chk(cvm->map_)) entrySet])) {
    id key = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey];
    id<JavaUtilCollection> c = [entry_ getValue];
    for (id __strong value in nil_chk(c)) {
      [self addWithId:key withId:value];
    }
  }
}

EduStanfordNlpUtilCollectionValuedMap *new_EduStanfordNlpUtilCollectionValuedMap_initWithEduStanfordNlpUtilCollectionValuedMap_(EduStanfordNlpUtilCollectionValuedMap *cvm) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilCollectionValuedMap, initWithEduStanfordNlpUtilCollectionValuedMap_, cvm)
}

EduStanfordNlpUtilCollectionValuedMap *create_EduStanfordNlpUtilCollectionValuedMap_initWithEduStanfordNlpUtilCollectionValuedMap_(EduStanfordNlpUtilCollectionValuedMap *cvm) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilCollectionValuedMap, initWithEduStanfordNlpUtilCollectionValuedMap_, cvm)
}

void EduStanfordNlpUtilCollectionValuedMap_init(EduStanfordNlpUtilCollectionValuedMap *self) {
  EduStanfordNlpUtilCollectionValuedMap_initWithEduStanfordNlpUtilMapFactory_withEduStanfordNlpUtilCollectionFactory_withBoolean_(self, EduStanfordNlpUtilMapFactory_hashMapFactory(), EduStanfordNlpUtilCollectionFactory_hashSetFactory(), false);
}

EduStanfordNlpUtilCollectionValuedMap *new_EduStanfordNlpUtilCollectionValuedMap_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilCollectionValuedMap, init)
}

EduStanfordNlpUtilCollectionValuedMap *create_EduStanfordNlpUtilCollectionValuedMap_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilCollectionValuedMap, init)
}

void EduStanfordNlpUtilCollectionValuedMap_initWithEduStanfordNlpUtilCollectionFactory_(EduStanfordNlpUtilCollectionValuedMap *self, EduStanfordNlpUtilCollectionFactory *cf) {
  EduStanfordNlpUtilCollectionValuedMap_initWithEduStanfordNlpUtilMapFactory_withEduStanfordNlpUtilCollectionFactory_withBoolean_(self, EduStanfordNlpUtilMapFactory_hashMapFactory(), cf, false);
}

EduStanfordNlpUtilCollectionValuedMap *new_EduStanfordNlpUtilCollectionValuedMap_initWithEduStanfordNlpUtilCollectionFactory_(EduStanfordNlpUtilCollectionFactory *cf) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilCollectionValuedMap, initWithEduStanfordNlpUtilCollectionFactory_, cf)
}

EduStanfordNlpUtilCollectionValuedMap *create_EduStanfordNlpUtilCollectionValuedMap_initWithEduStanfordNlpUtilCollectionFactory_(EduStanfordNlpUtilCollectionFactory *cf) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilCollectionValuedMap, initWithEduStanfordNlpUtilCollectionFactory_, cf)
}

void EduStanfordNlpUtilCollectionValuedMap_mainWithNSStringArray_(IOSObjectArray *args) {
  EduStanfordNlpUtilCollectionValuedMap_initialize();
  EduStanfordNlpUtilCollectionValuedMap *originalMap = new_EduStanfordNlpUtilCollectionValuedMap_init();
  JavaUtilRandom *r = new_JavaUtilRandom_init();
  for (jint i = 0; i < 800; i++) {
    JavaLangInteger *rInt1 = JavaLangInteger_valueOfWithInt_([r nextIntWithInt:400]);
    JavaLangInteger *rInt2 = JavaLangInteger_valueOfWithInt_([r nextIntWithInt:400]);
    [originalMap addWithId:rInt1 withId:rInt2];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@C@", @"Adding ", rInt1, ' ', rInt2)];
  }
  EduStanfordNlpUtilCollectionValuedMap *originalCopyMap = new_EduStanfordNlpUtilCollectionValuedMap_initWithEduStanfordNlpUtilCollectionValuedMap_(originalMap);
  EduStanfordNlpUtilCollectionValuedMap *deltaCopyMap = new_EduStanfordNlpUtilCollectionValuedMap_initWithEduStanfordNlpUtilCollectionValuedMap_(originalMap);
  EduStanfordNlpUtilCollectionValuedMap *deltaMap = new_EduStanfordNlpUtilDeltaCollectionValuedMap_initWithEduStanfordNlpUtilCollectionValuedMap_(originalMap);
  for (jint i = 0; i < 400; i++) {
    JavaLangInteger *rInt1 = JavaLangInteger_valueOfWithInt_([r nextIntWithInt:400]);
    JavaLangInteger *rInt2 = JavaLangInteger_valueOfWithInt_([r nextIntWithInt:400] + 1000);
    [deltaMap addWithId:rInt1 withId:rInt2];
    [deltaCopyMap addWithId:rInt1 withId:rInt2];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@C@", @"Adding ", rInt1, ' ', rInt2)];
  }
  for (jint i = 0; i < 400; i++) {
    JavaLangInteger *rInt1 = JavaLangInteger_valueOfWithInt_([r nextIntWithInt:1400]);
    JavaLangInteger *rInt2 = JavaLangInteger_valueOfWithInt_([r nextIntWithInt:1400]);
    [deltaMap removeMappingWithId:rInt1 withId:rInt2];
    [deltaCopyMap removeMappingWithId:rInt1 withId:rInt2];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@C@", @"Removing ", rInt1, ' ', rInt2)];
  }
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@", @"original: ", originalMap)];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$@", @"copy: ", deltaCopyMap)];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$@", @"delta: ", deltaMap)];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$Z", @"Original preserved? ", [originalCopyMap isEqual:originalMap])];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$Z", @"Delta accurate? ", [deltaMap isEqual:deltaCopyMap])];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpUtilCollectionValuedMap)
