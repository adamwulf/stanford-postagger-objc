//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/util/DeltaMap.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/util/ConcatenationIterator.h"
#include "edu/stanford/nlp/util/DeltaMap.h"
#include "edu/stanford/nlp/util/ErasureUtils.h"
#include "edu/stanford/nlp/util/FilteredIterator.h"
#include "edu/stanford/nlp/util/Generics.h"
#include "edu/stanford/nlp/util/MapFactory.h"
#include "java/io/PrintStream.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/AbstractMap.h"
#include "java/util/AbstractSet.h"
#include "java/util/Collections.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "java/util/Random.h"
#include "java/util/Set.h"
#include "java/util/function/Consumer.h"
#include "java/util/function/Predicate.h"

@interface EduStanfordNlpUtilDeltaMap () {
 @public
  id<JavaUtilMap> originalMap_;
  id<JavaUtilMap> deltaMap_;
}

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpUtilDeltaMap, originalMap_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(EduStanfordNlpUtilDeltaMap, deltaMap_, id<JavaUtilMap>)

inline id EduStanfordNlpUtilDeltaMap_get_nullValue();
inline id EduStanfordNlpUtilDeltaMap_set_nullValue(id value);
static id EduStanfordNlpUtilDeltaMap_nullValue;
J2OBJC_STATIC_FIELD_OBJ(EduStanfordNlpUtilDeltaMap, nullValue, id)

inline id EduStanfordNlpUtilDeltaMap_get_removedValue();
inline id EduStanfordNlpUtilDeltaMap_set_removedValue(id value);
static id EduStanfordNlpUtilDeltaMap_removedValue;
J2OBJC_STATIC_FIELD_OBJ(EduStanfordNlpUtilDeltaMap, removedValue, id)

@interface EduStanfordNlpUtilDeltaMap_SimpleEntry ()

+ (jboolean)eqWithId:(id)o1
              withId:(id)o2;

@end

__attribute__((unused)) static jboolean EduStanfordNlpUtilDeltaMap_SimpleEntry_eqWithId_withId_(id o1, id o2);

@interface EduStanfordNlpUtilDeltaMap_$1 : JavaUtilAbstractSet {
 @public
  EduStanfordNlpUtilDeltaMap *this$0_;
}

- (id<JavaUtilIterator>)iterator;

- (jint)size;

- (instancetype)initWithEduStanfordNlpUtilDeltaMap:(EduStanfordNlpUtilDeltaMap *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpUtilDeltaMap_$1)

J2OBJC_FIELD_SETTER(EduStanfordNlpUtilDeltaMap_$1, this$0_, EduStanfordNlpUtilDeltaMap *)

__attribute__((unused)) static void EduStanfordNlpUtilDeltaMap_$1_initWithEduStanfordNlpUtilDeltaMap_(EduStanfordNlpUtilDeltaMap_$1 *self, EduStanfordNlpUtilDeltaMap *outer$);

__attribute__((unused)) static EduStanfordNlpUtilDeltaMap_$1 *new_EduStanfordNlpUtilDeltaMap_$1_initWithEduStanfordNlpUtilDeltaMap_(EduStanfordNlpUtilDeltaMap *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpUtilDeltaMap_$1 *create_EduStanfordNlpUtilDeltaMap_$1_initWithEduStanfordNlpUtilDeltaMap_(EduStanfordNlpUtilDeltaMap *outer$);

@interface EduStanfordNlpUtilDeltaMap_$1_1NullingIterator : NSObject < JavaUtilIterator > {
 @public
  id<JavaUtilIterator> i_;
}

- (instancetype)initWithJavaUtilIterator:(id<JavaUtilIterator>)i;

- (jboolean)hasNext;

- (id<JavaUtilMap_Entry>)next;

- (void)remove;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpUtilDeltaMap_$1_1NullingIterator)

J2OBJC_FIELD_SETTER(EduStanfordNlpUtilDeltaMap_$1_1NullingIterator, i_, id<JavaUtilIterator>)

__attribute__((unused)) static void EduStanfordNlpUtilDeltaMap_$1_1NullingIterator_initWithJavaUtilIterator_(EduStanfordNlpUtilDeltaMap_$1_1NullingIterator *self, id<JavaUtilIterator> i);

__attribute__((unused)) static EduStanfordNlpUtilDeltaMap_$1_1NullingIterator *new_EduStanfordNlpUtilDeltaMap_$1_1NullingIterator_initWithJavaUtilIterator_(id<JavaUtilIterator> i) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpUtilDeltaMap_$1_1NullingIterator *create_EduStanfordNlpUtilDeltaMap_$1_1NullingIterator_initWithJavaUtilIterator_(id<JavaUtilIterator> i);

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpUtilDeltaMap_$1_1NullingIterator)

@interface EduStanfordNlpUtilDeltaMap_$1_$1 : NSObject < JavaUtilFunctionPredicate > {
 @public
  EduStanfordNlpUtilDeltaMap_$1 *this$0_;
}

- (jboolean)testWithId:(id<JavaUtilMap_Entry>)e;

- (instancetype)initWithEduStanfordNlpUtilDeltaMap_$1:(EduStanfordNlpUtilDeltaMap_$1 *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpUtilDeltaMap_$1_$1)

J2OBJC_FIELD_SETTER(EduStanfordNlpUtilDeltaMap_$1_$1, this$0_, EduStanfordNlpUtilDeltaMap_$1 *)

inline jlong EduStanfordNlpUtilDeltaMap_$1_$1_get_serialVersionUID();
#define EduStanfordNlpUtilDeltaMap_$1_$1_serialVersionUID 1LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpUtilDeltaMap_$1_$1, serialVersionUID, jlong)

__attribute__((unused)) static void EduStanfordNlpUtilDeltaMap_$1_$1_initWithEduStanfordNlpUtilDeltaMap_$1_(EduStanfordNlpUtilDeltaMap_$1_$1 *self, EduStanfordNlpUtilDeltaMap_$1 *outer$);

__attribute__((unused)) static EduStanfordNlpUtilDeltaMap_$1_$1 *new_EduStanfordNlpUtilDeltaMap_$1_$1_initWithEduStanfordNlpUtilDeltaMap_$1_(EduStanfordNlpUtilDeltaMap_$1 *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpUtilDeltaMap_$1_$1 *create_EduStanfordNlpUtilDeltaMap_$1_$1_initWithEduStanfordNlpUtilDeltaMap_$1_(EduStanfordNlpUtilDeltaMap_$1 *outer$);

@interface EduStanfordNlpUtilDeltaMap_$1_$2 : NSObject < JavaUtilFunctionPredicate >

- (jboolean)testWithId:(id<JavaUtilMap_Entry>)e;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpUtilDeltaMap_$1_$2)

inline jlong EduStanfordNlpUtilDeltaMap_$1_$2_get_serialVersionUID();
#define EduStanfordNlpUtilDeltaMap_$1_$2_serialVersionUID 1LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpUtilDeltaMap_$1_$2, serialVersionUID, jlong)

__attribute__((unused)) static void EduStanfordNlpUtilDeltaMap_$1_$2_init(EduStanfordNlpUtilDeltaMap_$1_$2 *self);

__attribute__((unused)) static EduStanfordNlpUtilDeltaMap_$1_$2 *new_EduStanfordNlpUtilDeltaMap_$1_$2_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpUtilDeltaMap_$1_$2 *create_EduStanfordNlpUtilDeltaMap_$1_$2_init();

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpUtilDeltaMap)

@implementation EduStanfordNlpUtilDeltaMap

- (jboolean)containsKeyWithId:(id)key {
  id value = [((id<JavaUtilMap>) nil_chk(deltaMap_)) getWithId:key];
  if (value == nil) {
    return [((id<JavaUtilMap>) nil_chk(originalMap_)) containsKeyWithId:key];
  }
  if (value == EduStanfordNlpUtilDeltaMap_removedValue) {
    return false;
  }
  return true;
}

- (id)getWithId:(id)key {
  id deltaResult = [((id<JavaUtilMap>) nil_chk(deltaMap_)) getWithId:key];
  if (deltaResult == nil) {
    return [((id<JavaUtilMap>) nil_chk(originalMap_)) getWithId:key];
  }
  if (deltaResult == EduStanfordNlpUtilDeltaMap_nullValue) {
    return nil;
  }
  if (deltaResult == EduStanfordNlpUtilDeltaMap_removedValue) {
    return nil;
  }
  return deltaResult;
}

- (id)putWithId:(id)key
         withId:(id)value {
  if (value == nil) {
    return [self putWithId:key withId:EduStanfordNlpUtilDeltaMap_nullValue];
  }
  id result = [((id<JavaUtilMap>) nil_chk(deltaMap_)) putWithId:key withId:value];
  if (result == nil) {
    return [((id<JavaUtilMap>) nil_chk(originalMap_)) getWithId:key];
  }
  if (result == EduStanfordNlpUtilDeltaMap_nullValue) {
    return nil;
  }
  if (result == EduStanfordNlpUtilDeltaMap_removedValue) {
    return nil;
  }
  return result;
}

- (id)removeWithId:(id)key {
  return [self putWithId:key withId:EduStanfordNlpUtilDeltaMap_removedValue];
}

- (void)clear {
  for (id __strong key in nil_chk([((id<JavaUtilMap>) nil_chk(originalMap_)) keySet])) {
    (void) [((id<JavaUtilMap>) nil_chk(deltaMap_)) putWithId:key withId:EduStanfordNlpUtilDeltaMap_removedValue];
  }
}

- (id<JavaUtilSet>)entrySet {
  return new_EduStanfordNlpUtilDeltaMap_$1_initWithEduStanfordNlpUtilDeltaMap_(self);
}

- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)originalMap
   withEduStanfordNlpUtilMapFactory:(EduStanfordNlpUtilMapFactory *)mf {
  EduStanfordNlpUtilDeltaMap_initWithJavaUtilMap_withEduStanfordNlpUtilMapFactory_(self, originalMap, mf);
  return self;
}

- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)originalMap {
  EduStanfordNlpUtilDeltaMap_initWithJavaUtilMap_(self, originalMap);
  return self;
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  EduStanfordNlpUtilDeltaMap_mainWithNSStringArray_(args);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 2, 1, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "LNSObject;", 0x1, 7, 1, -1, 3, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 8, -1, -1 },
    { NULL, NULL, 0x1, -1, 9, -1, 10, -1, -1 },
    { NULL, NULL, 0x1, -1, 11, -1, 12, -1, -1 },
    { NULL, "V", 0x9, 13, 14, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(containsKeyWithId:);
  methods[1].selector = @selector(getWithId:);
  methods[2].selector = @selector(putWithId:withId:);
  methods[3].selector = @selector(removeWithId:);
  methods[4].selector = @selector(clear);
  methods[5].selector = @selector(entrySet);
  methods[6].selector = @selector(initWithJavaUtilMap:withEduStanfordNlpUtilMapFactory:);
  methods[7].selector = @selector(initWithJavaUtilMap:);
  methods[8].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "originalMap_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 15, -1 },
    { "deltaMap_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 15, -1 },
    { "nullValue", "LNSObject;", .constantValue.asLong = 0, 0xa, -1, 16, -1, -1 },
    { "removedValue", "LNSObject;", .constantValue.asLong = 0, 0xa, -1, 17, -1, -1 },
  };
  static const void *ptrTable[] = { "containsKey", "LNSObject;", "get", "(Ljava/lang/Object;)TV;", "put", "LNSObject;LNSObject;", "(TK;TV;)TV;", "remove", "()Ljava/util/Set<Ljava/util/Map$Entry<TK;TV;>;>;", "LJavaUtilMap;LEduStanfordNlpUtilMapFactory;", "(Ljava/util/Map<TK;TV;>;Ledu/stanford/nlp/util/MapFactory<TK;TV;>;)V", "LJavaUtilMap;", "(Ljava/util/Map<TK;TV;>;)V", "main", "[LNSString;", "Ljava/util/Map<TK;TV;>;", &EduStanfordNlpUtilDeltaMap_nullValue, &EduStanfordNlpUtilDeltaMap_removedValue, "LEduStanfordNlpUtilDeltaMap_SimpleEntry;", "<K:Ljava/lang/Object;V:Ljava/lang/Object;>Ljava/util/AbstractMap<TK;TV;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilDeltaMap = { "DeltaMap", "edu.stanford.nlp.util", ptrTable, methods, fields, 7, 0x1, 9, 4, -1, 18, -1, 19, -1 };
  return &_EduStanfordNlpUtilDeltaMap;
}

+ (void)initialize {
  if (self == [EduStanfordNlpUtilDeltaMap class]) {
    EduStanfordNlpUtilDeltaMap_nullValue = new_NSObject_init();
    EduStanfordNlpUtilDeltaMap_removedValue = new_NSObject_init();
    J2OBJC_SET_INITIALIZED(EduStanfordNlpUtilDeltaMap)
  }
}

@end

void EduStanfordNlpUtilDeltaMap_initWithJavaUtilMap_withEduStanfordNlpUtilMapFactory_(EduStanfordNlpUtilDeltaMap *self, id<JavaUtilMap> originalMap, EduStanfordNlpUtilMapFactory *mf) {
  JavaUtilAbstractMap_init(self);
  self->originalMap_ = JavaUtilCollections_unmodifiableMapWithJavaUtilMap_(originalMap);
  self->deltaMap_ = [((EduStanfordNlpUtilMapFactory *) nil_chk(mf)) newMap];
}

EduStanfordNlpUtilDeltaMap *new_EduStanfordNlpUtilDeltaMap_initWithJavaUtilMap_withEduStanfordNlpUtilMapFactory_(id<JavaUtilMap> originalMap, EduStanfordNlpUtilMapFactory *mf) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilDeltaMap, initWithJavaUtilMap_withEduStanfordNlpUtilMapFactory_, originalMap, mf)
}

EduStanfordNlpUtilDeltaMap *create_EduStanfordNlpUtilDeltaMap_initWithJavaUtilMap_withEduStanfordNlpUtilMapFactory_(id<JavaUtilMap> originalMap, EduStanfordNlpUtilMapFactory *mf) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilDeltaMap, initWithJavaUtilMap_withEduStanfordNlpUtilMapFactory_, originalMap, mf)
}

void EduStanfordNlpUtilDeltaMap_initWithJavaUtilMap_(EduStanfordNlpUtilDeltaMap *self, id<JavaUtilMap> originalMap) {
  EduStanfordNlpUtilDeltaMap_initWithJavaUtilMap_withEduStanfordNlpUtilMapFactory_(self, originalMap, JreLoadStatic(EduStanfordNlpUtilMapFactory, HASH_MAP_FACTORY));
}

EduStanfordNlpUtilDeltaMap *new_EduStanfordNlpUtilDeltaMap_initWithJavaUtilMap_(id<JavaUtilMap> originalMap) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilDeltaMap, initWithJavaUtilMap_, originalMap)
}

EduStanfordNlpUtilDeltaMap *create_EduStanfordNlpUtilDeltaMap_initWithJavaUtilMap_(id<JavaUtilMap> originalMap) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilDeltaMap, initWithJavaUtilMap_, originalMap)
}

void EduStanfordNlpUtilDeltaMap_mainWithNSStringArray_(IOSObjectArray *args) {
  EduStanfordNlpUtilDeltaMap_initialize();
  id<JavaUtilMap> originalMap = EduStanfordNlpUtilGenerics_newHashMap();
  JavaUtilRandom *r = new_JavaUtilRandom_init();
  for (jint i = 0; i < 1000; i++) {
    (void) [((id<JavaUtilMap>) nil_chk(originalMap)) putWithId:JavaLangInteger_valueOfWithInt_(i) withId:JavaLangInteger_valueOfWithInt_([r nextIntWithInt:1000])];
  }
  id<JavaUtilMap> originalCopyMap = EduStanfordNlpUtilGenerics_newHashMapWithJavaUtilMap_(originalMap);
  id<JavaUtilMap> deltaCopyMap = EduStanfordNlpUtilGenerics_newHashMapWithJavaUtilMap_(originalMap);
  id<JavaUtilMap> deltaMap = new_EduStanfordNlpUtilDeltaMap_initWithJavaUtilMap_(originalMap);
  for (jint i = 900; i < 1100; i++) {
    JavaLangInteger *rInt = JavaLangInteger_valueOfWithInt_([r nextIntWithInt:1000]);
    (void) [deltaMap putWithId:JavaLangInteger_valueOfWithInt_(i) withId:rInt];
    (void) [((id<JavaUtilMap>) nil_chk(deltaCopyMap)) putWithId:JavaLangInteger_valueOfWithInt_(i) withId:rInt];
  }
  for (jint i = 0; i < 100; i++) {
    JavaLangInteger *rInt = JavaLangInteger_valueOfWithInt_([r nextIntWithInt:1100]);
    (void) [deltaMap removeWithId:rInt];
    (void) [((id<JavaUtilMap>) nil_chk(deltaCopyMap)) removeWithId:rInt];
  }
  for (jint i = 0; i < 100; i++) {
    JavaLangInteger *rInt = JavaLangInteger_valueOfWithInt_([r nextIntWithInt:1100]);
    (void) [deltaMap putWithId:rInt withId:nil];
    (void) [((id<JavaUtilMap>) nil_chk(deltaCopyMap)) putWithId:rInt withId:nil];
  }
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$Z", @"Original preserved? ", [((id<JavaUtilMap>) nil_chk(originalCopyMap)) isEqual:originalMap])];
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$Z", @"Delta accurate? ", [deltaMap isEqual:deltaCopyMap])];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpUtilDeltaMap)

@implementation EduStanfordNlpUtilDeltaMap_SimpleEntry

- (instancetype)initWithId:(id)key
                    withId:(id)value {
  EduStanfordNlpUtilDeltaMap_SimpleEntry_initWithId_withId_(self, key, value);
  return self;
}

- (instancetype)initWithJavaUtilMap_Entry:(id<JavaUtilMap_Entry>)e {
  EduStanfordNlpUtilDeltaMap_SimpleEntry_initWithJavaUtilMap_Entry_(self, e);
  return self;
}

- (id)getKey {
  return key_;
}

- (id)getValue {
  return value_;
}

- (id)setValueWithId:(id)value {
  id oldValue = self->value_;
  self->value_ = value;
  return oldValue;
}

- (jboolean)isEqual:(id)o {
  if (!([JavaUtilMap_Entry_class_() isInstance:o])) {
    return false;
  }
  id<JavaUtilMap_Entry> e = (id<JavaUtilMap_Entry>) cast_check(o, JavaUtilMap_Entry_class_());
  return EduStanfordNlpUtilDeltaMap_SimpleEntry_eqWithId_withId_(key_, [((id<JavaUtilMap_Entry>) nil_chk(e)) getKey]) && EduStanfordNlpUtilDeltaMap_SimpleEntry_eqWithId_withId_(value_, [e getValue]);
}

- (NSUInteger)hash {
  return ((key_ == nil) ? 0 : ((jint) [nil_chk(key_) hash])) ^ ((value_ == nil) ? 0 : ((jint) [nil_chk(value_) hash]));
}

- (NSString *)description {
  return JreStrcat("@C@", key_, '=', value_);
}

+ (jboolean)eqWithId:(id)o1
              withId:(id)o2 {
  return EduStanfordNlpUtilDeltaMap_SimpleEntry_eqWithId_withId_(o1, o2);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 4, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 5, -1, -1 },
    { NULL, "LNSObject;", 0x1, 6, 7, -1, 8, -1, -1 },
    { NULL, "Z", 0x1, 9, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 10, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 11, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 12, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithId:withId:);
  methods[1].selector = @selector(initWithJavaUtilMap_Entry:);
  methods[2].selector = @selector(getKey);
  methods[3].selector = @selector(getValue);
  methods[4].selector = @selector(setValueWithId:);
  methods[5].selector = @selector(isEqual:);
  methods[6].selector = @selector(hash);
  methods[7].selector = @selector(description);
  methods[8].selector = @selector(eqWithId:withId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "key_", "LNSObject;", .constantValue.asLong = 0, 0x0, -1, -1, 13, -1 },
    { "value_", "LNSObject;", .constantValue.asLong = 0, 0x0, -1, -1, 14, -1 },
  };
  static const void *ptrTable[] = { "LNSObject;LNSObject;", "(TK;TV;)V", "LJavaUtilMap_Entry;", "(Ljava/util/Map$Entry<TK;TV;>;)V", "()TK;", "()TV;", "setValue", "LNSObject;", "(TV;)TV;", "equals", "hashCode", "toString", "eq", "TK;", "TV;", "LEduStanfordNlpUtilDeltaMap;", "<K:Ljava/lang/Object;V:Ljava/lang/Object;>Ljava/lang/Object;Ljava/util/Map$Entry<TK;TV;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilDeltaMap_SimpleEntry = { "SimpleEntry", "edu.stanford.nlp.util", ptrTable, methods, fields, 7, 0x8, 9, 2, 15, -1, -1, 16, -1 };
  return &_EduStanfordNlpUtilDeltaMap_SimpleEntry;
}

@end

void EduStanfordNlpUtilDeltaMap_SimpleEntry_initWithId_withId_(EduStanfordNlpUtilDeltaMap_SimpleEntry *self, id key, id value) {
  NSObject_init(self);
  self->key_ = key;
  self->value_ = value;
}

EduStanfordNlpUtilDeltaMap_SimpleEntry *new_EduStanfordNlpUtilDeltaMap_SimpleEntry_initWithId_withId_(id key, id value) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilDeltaMap_SimpleEntry, initWithId_withId_, key, value)
}

EduStanfordNlpUtilDeltaMap_SimpleEntry *create_EduStanfordNlpUtilDeltaMap_SimpleEntry_initWithId_withId_(id key, id value) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilDeltaMap_SimpleEntry, initWithId_withId_, key, value)
}

void EduStanfordNlpUtilDeltaMap_SimpleEntry_initWithJavaUtilMap_Entry_(EduStanfordNlpUtilDeltaMap_SimpleEntry *self, id<JavaUtilMap_Entry> e) {
  NSObject_init(self);
  self->key_ = [((id<JavaUtilMap_Entry>) nil_chk(e)) getKey];
  self->value_ = [e getValue];
}

EduStanfordNlpUtilDeltaMap_SimpleEntry *new_EduStanfordNlpUtilDeltaMap_SimpleEntry_initWithJavaUtilMap_Entry_(id<JavaUtilMap_Entry> e) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilDeltaMap_SimpleEntry, initWithJavaUtilMap_Entry_, e)
}

EduStanfordNlpUtilDeltaMap_SimpleEntry *create_EduStanfordNlpUtilDeltaMap_SimpleEntry_initWithJavaUtilMap_Entry_(id<JavaUtilMap_Entry> e) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilDeltaMap_SimpleEntry, initWithJavaUtilMap_Entry_, e)
}

jboolean EduStanfordNlpUtilDeltaMap_SimpleEntry_eqWithId_withId_(id o1, id o2) {
  EduStanfordNlpUtilDeltaMap_SimpleEntry_initialize();
  return (o1 == nil ? o2 == nil : [o1 isEqual:o2]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpUtilDeltaMap_SimpleEntry)

@implementation EduStanfordNlpUtilDeltaMap_$1

- (id<JavaUtilIterator>)iterator {
  id<JavaUtilFunctionPredicate> filter1 = new_EduStanfordNlpUtilDeltaMap_$1_$1_initWithEduStanfordNlpUtilDeltaMap_$1_(self);
  id<JavaUtilIterator> iter1 = new_EduStanfordNlpUtilFilteredIterator_initWithJavaUtilIterator_withJavaUtilFunctionPredicate_([((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(this$0_->originalMap_)) entrySet])) iterator], filter1);
  id<JavaUtilFunctionPredicate> filter2 = new_EduStanfordNlpUtilDeltaMap_$1_$2_init();
  id<JavaUtilIterator> iter2 = new_EduStanfordNlpUtilFilteredIterator_initWithJavaUtilIterator_withJavaUtilFunctionPredicate_(new_EduStanfordNlpUtilDeltaMap_$1_1NullingIterator_initWithJavaUtilIterator_([((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(this$0_->deltaMap_)) entrySet])) iterator]), filter2);
  return new_EduStanfordNlpUtilConcatenationIterator_initWithJavaUtilIterator_withJavaUtilIterator_(iter1, iter2);
}

- (jint)size {
  jint size = 0;
  for (id<JavaUtilMap_Entry> __strong kvEntry in self) {
    EduStanfordNlpUtilErasureUtils_noopWithId_(kvEntry);
    size++;
  }
  return size;
}

- (instancetype)initWithEduStanfordNlpUtilDeltaMap:(EduStanfordNlpUtilDeltaMap *)outer$ {
  EduStanfordNlpUtilDeltaMap_$1_initWithEduStanfordNlpUtilDeltaMap_(self, outer$);
  return self;
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(iterator);
  methods[1].selector = @selector(size);
  methods[2].selector = @selector(initWithEduStanfordNlpUtilDeltaMap:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LEduStanfordNlpUtilDeltaMap;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Iterator<Ljava/util/Map$Entry<TK;TV;>;>;", "LEduStanfordNlpUtilDeltaMap;", "entrySet", "Ljava/util/AbstractSet<Ljava/util/Map$Entry<TK;TV;>;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilDeltaMap_$1 = { "", "edu.stanford.nlp.util", ptrTable, methods, fields, 7, 0x8008, 3, 1, 1, -1, 2, 3, -1 };
  return &_EduStanfordNlpUtilDeltaMap_$1;
}

@end

void EduStanfordNlpUtilDeltaMap_$1_initWithEduStanfordNlpUtilDeltaMap_(EduStanfordNlpUtilDeltaMap_$1 *self, EduStanfordNlpUtilDeltaMap *outer$) {
  self->this$0_ = outer$;
  JavaUtilAbstractSet_init(self);
}

EduStanfordNlpUtilDeltaMap_$1 *new_EduStanfordNlpUtilDeltaMap_$1_initWithEduStanfordNlpUtilDeltaMap_(EduStanfordNlpUtilDeltaMap *outer$) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilDeltaMap_$1, initWithEduStanfordNlpUtilDeltaMap_, outer$)
}

EduStanfordNlpUtilDeltaMap_$1 *create_EduStanfordNlpUtilDeltaMap_$1_initWithEduStanfordNlpUtilDeltaMap_(EduStanfordNlpUtilDeltaMap *outer$) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilDeltaMap_$1, initWithEduStanfordNlpUtilDeltaMap_, outer$)
}

@implementation EduStanfordNlpUtilDeltaMap_$1_1NullingIterator

- (instancetype)initWithJavaUtilIterator:(id<JavaUtilIterator>)i {
  EduStanfordNlpUtilDeltaMap_$1_1NullingIterator_initWithJavaUtilIterator_(self, i);
  return self;
}

- (jboolean)hasNext {
  return [((id<JavaUtilIterator>) nil_chk(i_)) hasNext];
}

- (id<JavaUtilMap_Entry>)next {
  id<JavaUtilMap_Entry> e = [((id<JavaUtilIterator>) nil_chk(i_)) next];
  id o = [((id<JavaUtilMap_Entry>) nil_chk(e)) getValue];
  if (o == JreLoadStatic(EduStanfordNlpUtilDeltaMap, nullValue)) {
    return new_EduStanfordNlpUtilDeltaMap_SimpleEntry_initWithId_withId_([e getKey], nil);
  }
  return e;
}

- (void)remove {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaUtilIterator_forEachRemainingWithJavaUtilFunctionConsumer_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap_Entry;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilIterator:);
  methods[1].selector = @selector(hasNext);
  methods[2].selector = @selector(next);
  methods[3].selector = @selector(remove);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "i_", "LJavaUtilIterator;", .constantValue.asLong = 0, 0x2, -1, -1, 3, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilIterator;", "(Ljava/util/Iterator<Ljava/util/Map$Entry<TK;TV;>;>;)V", "()Ljava/util/Map$Entry<TK;TV;>;", "Ljava/util/Iterator<Ljava/util/Map$Entry<TK;TV;>;>;", "LEduStanfordNlpUtilDeltaMap_$1;", "iterator", "<K:Ljava/lang/Object;V:Ljava/lang/Object;>Ljava/lang/Object;Ljava/util/Iterator<Ljava/util/Map$Entry<TK;TV;>;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilDeltaMap_$1_1NullingIterator = { "NullingIterator", "edu.stanford.nlp.util", ptrTable, methods, fields, 7, 0x0, 4, 1, 4, -1, 5, 6, -1 };
  return &_EduStanfordNlpUtilDeltaMap_$1_1NullingIterator;
}

@end

void EduStanfordNlpUtilDeltaMap_$1_1NullingIterator_initWithJavaUtilIterator_(EduStanfordNlpUtilDeltaMap_$1_1NullingIterator *self, id<JavaUtilIterator> i) {
  NSObject_init(self);
  self->i_ = i;
}

EduStanfordNlpUtilDeltaMap_$1_1NullingIterator *new_EduStanfordNlpUtilDeltaMap_$1_1NullingIterator_initWithJavaUtilIterator_(id<JavaUtilIterator> i) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilDeltaMap_$1_1NullingIterator, initWithJavaUtilIterator_, i)
}

EduStanfordNlpUtilDeltaMap_$1_1NullingIterator *create_EduStanfordNlpUtilDeltaMap_$1_1NullingIterator_initWithJavaUtilIterator_(id<JavaUtilIterator> i) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilDeltaMap_$1_1NullingIterator, initWithJavaUtilIterator_, i)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpUtilDeltaMap_$1_1NullingIterator)

@implementation EduStanfordNlpUtilDeltaMap_$1_$1

- (jboolean)testWithId:(id<JavaUtilMap_Entry>)e {
  id key = [((id<JavaUtilMap_Entry>) nil_chk(e)) getKey];
  return ![((id<JavaUtilMap>) nil_chk(this$0_->this$0_->deltaMap_)) containsKeyWithId:key];
}

- (instancetype)initWithEduStanfordNlpUtilDeltaMap_$1:(EduStanfordNlpUtilDeltaMap_$1 *)outer$ {
  EduStanfordNlpUtilDeltaMap_$1_$1_initWithEduStanfordNlpUtilDeltaMap_$1_(self, outer$);
  return self;
}

- (id<JavaUtilFunctionPredicate>)and__WithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)arg0 {
  return JavaUtilFunctionPredicate_and__WithJavaUtilFunctionPredicate_(self, arg0);
}

- (id<JavaUtilFunctionPredicate>)negate {
  return JavaUtilFunctionPredicate_negate(self);
}

- (id<JavaUtilFunctionPredicate>)or__WithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)arg0 {
  return JavaUtilFunctionPredicate_or__WithJavaUtilFunctionPredicate_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testWithId:);
  methods[1].selector = @selector(initWithEduStanfordNlpUtilDeltaMap_$1:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LEduStanfordNlpUtilDeltaMap_$1;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpUtilDeltaMap_$1_$1_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "test", "LJavaUtilMap_Entry;", "(Ljava/util/Map$Entry<TK;TV;>;)Z", "LEduStanfordNlpUtilDeltaMap_$1;", "iterator", "Ljava/lang/Object;Ljava/util/function/Predicate<Ljava/util/Map$Entry<TK;TV;>;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilDeltaMap_$1_$1 = { "", "edu.stanford.nlp.util", ptrTable, methods, fields, 7, 0x8008, 2, 2, 3, -1, 4, 5, -1 };
  return &_EduStanfordNlpUtilDeltaMap_$1_$1;
}

@end

void EduStanfordNlpUtilDeltaMap_$1_$1_initWithEduStanfordNlpUtilDeltaMap_$1_(EduStanfordNlpUtilDeltaMap_$1_$1 *self, EduStanfordNlpUtilDeltaMap_$1 *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
}

EduStanfordNlpUtilDeltaMap_$1_$1 *new_EduStanfordNlpUtilDeltaMap_$1_$1_initWithEduStanfordNlpUtilDeltaMap_$1_(EduStanfordNlpUtilDeltaMap_$1 *outer$) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilDeltaMap_$1_$1, initWithEduStanfordNlpUtilDeltaMap_$1_, outer$)
}

EduStanfordNlpUtilDeltaMap_$1_$1 *create_EduStanfordNlpUtilDeltaMap_$1_$1_initWithEduStanfordNlpUtilDeltaMap_$1_(EduStanfordNlpUtilDeltaMap_$1 *outer$) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilDeltaMap_$1_$1, initWithEduStanfordNlpUtilDeltaMap_$1_, outer$)
}

@implementation EduStanfordNlpUtilDeltaMap_$1_$2

- (jboolean)testWithId:(id<JavaUtilMap_Entry>)e {
  id value = [((id<JavaUtilMap_Entry>) nil_chk(e)) getValue];
  if (value == JreLoadStatic(EduStanfordNlpUtilDeltaMap, removedValue)) {
    return false;
  }
  return true;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpUtilDeltaMap_$1_$2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilFunctionPredicate>)and__WithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)arg0 {
  return JavaUtilFunctionPredicate_and__WithJavaUtilFunctionPredicate_(self, arg0);
}

- (id<JavaUtilFunctionPredicate>)negate {
  return JavaUtilFunctionPredicate_negate(self);
}

- (id<JavaUtilFunctionPredicate>)or__WithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)arg0 {
  return JavaUtilFunctionPredicate_or__WithJavaUtilFunctionPredicate_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpUtilDeltaMap_$1_$2_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "test", "LJavaUtilMap_Entry;", "(Ljava/util/Map$Entry<TK;TV;>;)Z", "LEduStanfordNlpUtilDeltaMap_$1;", "iterator", "Ljava/lang/Object;Ljava/util/function/Predicate<Ljava/util/Map$Entry<TK;TV;>;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilDeltaMap_$1_$2 = { "", "edu.stanford.nlp.util", ptrTable, methods, fields, 7, 0x8008, 2, 1, 3, -1, 4, 5, -1 };
  return &_EduStanfordNlpUtilDeltaMap_$1_$2;
}

@end

void EduStanfordNlpUtilDeltaMap_$1_$2_init(EduStanfordNlpUtilDeltaMap_$1_$2 *self) {
  NSObject_init(self);
}

EduStanfordNlpUtilDeltaMap_$1_$2 *new_EduStanfordNlpUtilDeltaMap_$1_$2_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilDeltaMap_$1_$2, init)
}

EduStanfordNlpUtilDeltaMap_$1_$2 *create_EduStanfordNlpUtilDeltaMap_$1_$2_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilDeltaMap_$1_$2, init)
}
