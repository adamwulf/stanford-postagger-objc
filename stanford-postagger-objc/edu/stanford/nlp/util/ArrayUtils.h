//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/util/ArrayUtils.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_EduStanfordNlpUtilArrayUtils")
#ifdef RESTRICT_EduStanfordNlpUtilArrayUtils
#define INCLUDE_ALL_EduStanfordNlpUtilArrayUtils 0
#else
#define INCLUDE_ALL_EduStanfordNlpUtilArrayUtils 1
#endif
#undef RESTRICT_EduStanfordNlpUtilArrayUtils

#if !defined (EduStanfordNlpUtilArrayUtils_) && (INCLUDE_ALL_EduStanfordNlpUtilArrayUtils || defined(INCLUDE_EduStanfordNlpUtilArrayUtils))
#define EduStanfordNlpUtilArrayUtils_

@class IOSBooleanArray;
@class IOSByteArray;
@class IOSCharArray;
@class IOSDoubleArray;
@class IOSFloatArray;
@class IOSIntArray;
@class IOSLongArray;
@class IOSObjectArray;
@class IOSShortArray;
@protocol JavaUtilCollection;
@protocol JavaUtilFunctionFunction;
@protocol JavaUtilFunctionPredicate;
@protocol JavaUtilList;
@protocol JavaUtilSet;

@interface EduStanfordNlpUtilArrayUtils : NSObject

#pragma mark Public

+ (id<JavaUtilSet>)asImmutableSetWithNSObjectArray:(IOSObjectArray *)a;

+ (id<JavaUtilList>)asListWithIntArray:(IOSIntArray *)array;

+ (IOSDoubleArray *)asPrimitiveDoubleArrayWithJavaUtilCollection:(id<JavaUtilCollection>)d;

+ (IOSIntArray *)asPrimitiveIntArrayWithJavaUtilCollection:(id<JavaUtilCollection>)d;

+ (id<JavaUtilSet>)asSetWithNSObjectArray:(IOSObjectArray *)a;

+ (jint)compareArraysWithJavaLangComparableArray:(IOSObjectArray *)first
                     withJavaLangComparableArray:(IOSObjectArray *)second;

+ (jint)compareBooleanArraysWithBooleanArray:(IOSBooleanArray *)a1
                            withBooleanArray:(IOSBooleanArray *)a2;

+ (IOSObjectArray *)concatenateWithNSObjectArray:(IOSObjectArray *)first
                               withNSObjectArray:(IOSObjectArray *)second;

+ (jboolean)containsWithNSObjectArray:(IOSObjectArray *)a
                               withId:(id)o;

+ (IOSDoubleArray *)copy__WithDoubleArray:(IOSDoubleArray *)d OBJC_METHOD_FAMILY_NONE;

+ (IOSObjectArray *)copy__WithDoubleArray2:(IOSObjectArray *)d OBJC_METHOD_FAMILY_NONE;

+ (IOSObjectArray *)copy__WithDoubleArray3:(IOSObjectArray *)d OBJC_METHOD_FAMILY_NONE;

+ (IOSFloatArray *)copy__WithFloatArray:(IOSFloatArray *)d OBJC_METHOD_FAMILY_NONE;

+ (IOSObjectArray *)copy__WithFloatArray2:(IOSObjectArray *)d OBJC_METHOD_FAMILY_NONE;

+ (IOSObjectArray *)copy__WithFloatArray3:(IOSObjectArray *)d OBJC_METHOD_FAMILY_NONE;

+ (IOSIntArray *)copy__WithIntArray:(IOSIntArray *)i OBJC_METHOD_FAMILY_NONE;

+ (IOSObjectArray *)copy__WithIntArray2:(IOSObjectArray *)i OBJC_METHOD_FAMILY_NONE;

+ (IOSLongArray *)copy__WithLongArray:(IOSLongArray *)arr OBJC_METHOD_FAMILY_NONE;

+ (IOSIntArray *)deltaDecodeWithByteArray:(IOSByteArray *)deltaEncoded;

+ (IOSIntArray *)deltaDecodeWithByteArray:(IOSByteArray *)deltaEncoded
                                  withInt:(jint)startIndex
                                  withInt:(jint)endIndex;

+ (id<JavaUtilList>)deltaDecodeListWithByteArray:(IOSByteArray *)deltaEncoded;

+ (id<JavaUtilList>)deltaDecodeListWithByteArray:(IOSByteArray *)deltaEncoded
                                         withInt:(jint)startIndex
                                         withInt:(jint)endIndex;

+ (IOSByteArray *)deltaEncodeWithIntArray:(IOSIntArray *)orig;

+ (id<JavaUtilList>)deltaEncodeListWithIntArray:(IOSIntArray *)orig;

+ (jboolean)equalContentsWithIntArray:(IOSIntArray *)xs
                         withIntArray:(IOSIntArray *)ys;

+ (jboolean)equalContentsWithIntArray2:(IOSObjectArray *)xs
                         withIntArray2:(IOSObjectArray *)ys;

+ (jboolean)equalsWithBooleanArray2:(IOSObjectArray *)xs
                  withBooleanArray2:(IOSObjectArray *)ys;

+ (jboolean)equalsWithDoubleArray2:(IOSObjectArray *)xs
                  withDoubleArray2:(IOSObjectArray *)ys;

+ (void)fillWithBooleanArray2:(IOSObjectArray *)d
                  withBoolean:(jboolean)val;

+ (void)fillWithBooleanArray3:(IOSObjectArray *)d
                  withBoolean:(jboolean)val;

+ (void)fillWithBooleanArray4:(IOSObjectArray *)d
                  withBoolean:(jboolean)val;

+ (void)fillWithDoubleArray2:(IOSObjectArray *)d
                  withDouble:(jdouble)val;

+ (void)fillWithDoubleArray3:(IOSObjectArray *)d
                  withDouble:(jdouble)val;

+ (void)fillWithDoubleArray4:(IOSObjectArray *)d
                  withDouble:(jdouble)val;

+ (IOSObjectArray *)filterWithNSObjectArray:(IOSObjectArray *)original
              withJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)filter;

+ (IOSDoubleArray *)flattenWithDoubleArray2:(IOSObjectArray *)array;

+ (IOSIntArray *)gapDecodeWithByteArray:(IOSByteArray *)gapEncoded;

+ (IOSIntArray *)gapDecodeWithByteArray:(IOSByteArray *)gapEncoded
                                withInt:(jint)startIndex
                                withInt:(jint)endIndex;

+ (id<JavaUtilList>)gapDecodeListWithByteArray:(IOSByteArray *)gapEncoded;

+ (id<JavaUtilList>)gapDecodeListWithByteArray:(IOSByteArray *)gapEncoded
                                       withInt:(jint)startIndex
                                       withInt:(jint)endIndex;

+ (IOSByteArray *)gapEncodeWithIntArray:(IOSIntArray *)orig;

+ (id<JavaUtilList>)gapEncodeListWithIntArray:(IOSIntArray *)orig;

+ (id<JavaUtilList>)getSubListIndexWithNSObjectArray:(IOSObjectArray *)tofind
                                   withNSObjectArray:(IOSObjectArray *)tokens;

+ (id<JavaUtilList>)getSubListIndexWithNSObjectArray:(IOSObjectArray *)tofind
                                   withNSObjectArray:(IOSObjectArray *)tokens
                        withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)matchingFunction;

+ (IOSDoubleArray *)normalizeWithDoubleArray:(IOSDoubleArray *)ar;

+ (IOSDoubleArray *)removeAtWithDoubleArray:(IOSDoubleArray *)array
                                    withInt:(jint)index;

+ (IOSObjectArray *)removeAtWithNSObjectArray:(IOSObjectArray *)array
                                      withInt:(jint)index;

+ (IOSObjectArray *)subArrayWithNSObjectArray:(IOSObjectArray *)arr
                                      withInt:(jint)startindexInclusive
                                      withInt:(jint)endindexExclusive;

+ (IOSObjectArray *)to2DWithDoubleArray:(IOSDoubleArray *)array
                                withInt:(jint)dim1Size;

+ (IOSObjectArray *)to2DWithDoubleArray:(IOSDoubleArray *)array
                                withInt:(jint)dim1Size
                                withInt:(jint)dim2Size;

+ (IOSDoubleArray *)toDoubleWithFloatArray:(IOSFloatArray *)a;

+ (IOSDoubleArray *)toDoubleWithIntArray:(IOSIntArray *)array;

+ (IOSDoubleArray *)toDoubleArrayWithNSStringArray:(IOSObjectArray *)inArg;

+ (IOSCharArray *)toPrimitiveWithJavaLangCharacterArray:(IOSObjectArray *)inArg;

+ (IOSCharArray *)toPrimitiveWithJavaLangCharacterArray:(IOSObjectArray *)inArg
                                               withChar:(jchar)valueForNull;

+ (IOSDoubleArray *)toPrimitiveWithJavaLangDoubleArray:(IOSObjectArray *)inArg;

+ (IOSDoubleArray *)toPrimitiveWithJavaLangDoubleArray:(IOSObjectArray *)inArg
                                            withDouble:(jdouble)valueForNull;

+ (IOSIntArray *)toPrimitiveWithJavaLangIntegerArray:(IOSObjectArray *)inArg;

+ (IOSIntArray *)toPrimitiveWithJavaLangIntegerArray:(IOSObjectArray *)inArg
                                             withInt:(jint)valueForNull;

+ (IOSLongArray *)toPrimitiveWithJavaLangLongArray:(IOSObjectArray *)inArg;

+ (IOSLongArray *)toPrimitiveWithJavaLangLongArray:(IOSObjectArray *)inArg
                                          withLong:(jlong)valueForNull;

+ (IOSShortArray *)toPrimitiveWithJavaLangShortArray:(IOSObjectArray *)inArg;

+ (IOSShortArray *)toPrimitiveWithJavaLangShortArray:(IOSObjectArray *)inArg
                                           withShort:(jshort)valueForNull;

+ (NSString *)toStringWithBooleanArray2:(IOSObjectArray *)b;

+ (NSString *)toStringWithDoubleArray:(IOSDoubleArray *)doubles
                         withNSString:(NSString *)glue;

+ (NSString *)toStringWithDoubleArray2:(IOSObjectArray *)b;

+ (NSString *)toStringWithIntArray2:(IOSObjectArray *)a;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpUtilArrayUtils)

FOUNDATION_EXPORT IOSByteArray *EduStanfordNlpUtilArrayUtils_gapEncodeWithIntArray_(IOSIntArray *orig);

FOUNDATION_EXPORT id<JavaUtilList> EduStanfordNlpUtilArrayUtils_gapEncodeListWithIntArray_(IOSIntArray *orig);

FOUNDATION_EXPORT IOSIntArray *EduStanfordNlpUtilArrayUtils_gapDecodeWithByteArray_(IOSByteArray *gapEncoded);

FOUNDATION_EXPORT IOSIntArray *EduStanfordNlpUtilArrayUtils_gapDecodeWithByteArray_withInt_withInt_(IOSByteArray *gapEncoded, jint startIndex, jint endIndex);

FOUNDATION_EXPORT id<JavaUtilList> EduStanfordNlpUtilArrayUtils_gapDecodeListWithByteArray_(IOSByteArray *gapEncoded);

FOUNDATION_EXPORT id<JavaUtilList> EduStanfordNlpUtilArrayUtils_gapDecodeListWithByteArray_withInt_withInt_(IOSByteArray *gapEncoded, jint startIndex, jint endIndex);

FOUNDATION_EXPORT IOSByteArray *EduStanfordNlpUtilArrayUtils_deltaEncodeWithIntArray_(IOSIntArray *orig);

FOUNDATION_EXPORT id<JavaUtilList> EduStanfordNlpUtilArrayUtils_deltaEncodeListWithIntArray_(IOSIntArray *orig);

FOUNDATION_EXPORT IOSIntArray *EduStanfordNlpUtilArrayUtils_deltaDecodeWithByteArray_(IOSByteArray *deltaEncoded);

FOUNDATION_EXPORT IOSIntArray *EduStanfordNlpUtilArrayUtils_deltaDecodeWithByteArray_withInt_withInt_(IOSByteArray *deltaEncoded, jint startIndex, jint endIndex);

FOUNDATION_EXPORT id<JavaUtilList> EduStanfordNlpUtilArrayUtils_deltaDecodeListWithByteArray_(IOSByteArray *deltaEncoded);

FOUNDATION_EXPORT id<JavaUtilList> EduStanfordNlpUtilArrayUtils_deltaDecodeListWithByteArray_withInt_withInt_(IOSByteArray *deltaEncoded, jint startIndex, jint endIndex);

FOUNDATION_EXPORT IOSDoubleArray *EduStanfordNlpUtilArrayUtils_flattenWithDoubleArray2_(IOSObjectArray *array);

FOUNDATION_EXPORT IOSObjectArray *EduStanfordNlpUtilArrayUtils_to2DWithDoubleArray_withInt_(IOSDoubleArray *array, jint dim1Size);

FOUNDATION_EXPORT IOSObjectArray *EduStanfordNlpUtilArrayUtils_to2DWithDoubleArray_withInt_withInt_(IOSDoubleArray *array, jint dim1Size, jint dim2Size);

FOUNDATION_EXPORT IOSDoubleArray *EduStanfordNlpUtilArrayUtils_removeAtWithDoubleArray_withInt_(IOSDoubleArray *array, jint index);

FOUNDATION_EXPORT IOSObjectArray *EduStanfordNlpUtilArrayUtils_removeAtWithNSObjectArray_withInt_(IOSObjectArray *array, jint index);

FOUNDATION_EXPORT NSString *EduStanfordNlpUtilArrayUtils_toStringWithIntArray2_(IOSObjectArray *a);

FOUNDATION_EXPORT jboolean EduStanfordNlpUtilArrayUtils_equalContentsWithIntArray2_withIntArray2_(IOSObjectArray *xs, IOSObjectArray *ys);

FOUNDATION_EXPORT jboolean EduStanfordNlpUtilArrayUtils_equalsWithDoubleArray2_withDoubleArray2_(IOSObjectArray *xs, IOSObjectArray *ys);

FOUNDATION_EXPORT jboolean EduStanfordNlpUtilArrayUtils_equalContentsWithIntArray_withIntArray_(IOSIntArray *xs, IOSIntArray *ys);

FOUNDATION_EXPORT jboolean EduStanfordNlpUtilArrayUtils_equalsWithBooleanArray2_withBooleanArray2_(IOSObjectArray *xs, IOSObjectArray *ys);

FOUNDATION_EXPORT jboolean EduStanfordNlpUtilArrayUtils_containsWithNSObjectArray_withId_(IOSObjectArray *a, id o);

FOUNDATION_EXPORT IOSObjectArray *EduStanfordNlpUtilArrayUtils_concatenateWithNSObjectArray_withNSObjectArray_(IOSObjectArray *first, IOSObjectArray *second);

FOUNDATION_EXPORT IOSObjectArray *EduStanfordNlpUtilArrayUtils_filterWithNSObjectArray_withJavaUtilFunctionPredicate_(IOSObjectArray *original, id<JavaUtilFunctionPredicate> filter);

FOUNDATION_EXPORT id<JavaUtilSet> EduStanfordNlpUtilArrayUtils_asSetWithNSObjectArray_(IOSObjectArray *a);

FOUNDATION_EXPORT id<JavaUtilSet> EduStanfordNlpUtilArrayUtils_asImmutableSetWithNSObjectArray_(IOSObjectArray *a);

FOUNDATION_EXPORT void EduStanfordNlpUtilArrayUtils_fillWithDoubleArray2_withDouble_(IOSObjectArray *d, jdouble val);

FOUNDATION_EXPORT void EduStanfordNlpUtilArrayUtils_fillWithDoubleArray3_withDouble_(IOSObjectArray *d, jdouble val);

FOUNDATION_EXPORT void EduStanfordNlpUtilArrayUtils_fillWithDoubleArray4_withDouble_(IOSObjectArray *d, jdouble val);

FOUNDATION_EXPORT void EduStanfordNlpUtilArrayUtils_fillWithBooleanArray2_withBoolean_(IOSObjectArray *d, jboolean val);

FOUNDATION_EXPORT void EduStanfordNlpUtilArrayUtils_fillWithBooleanArray3_withBoolean_(IOSObjectArray *d, jboolean val);

FOUNDATION_EXPORT void EduStanfordNlpUtilArrayUtils_fillWithBooleanArray4_withBoolean_(IOSObjectArray *d, jboolean val);

FOUNDATION_EXPORT IOSDoubleArray *EduStanfordNlpUtilArrayUtils_toDoubleWithFloatArray_(IOSFloatArray *a);

FOUNDATION_EXPORT IOSDoubleArray *EduStanfordNlpUtilArrayUtils_toDoubleWithIntArray_(IOSIntArray *array);

FOUNDATION_EXPORT id<JavaUtilList> EduStanfordNlpUtilArrayUtils_asListWithIntArray_(IOSIntArray *array);

FOUNDATION_EXPORT IOSDoubleArray *EduStanfordNlpUtilArrayUtils_asPrimitiveDoubleArrayWithJavaUtilCollection_(id<JavaUtilCollection> d);

FOUNDATION_EXPORT IOSIntArray *EduStanfordNlpUtilArrayUtils_asPrimitiveIntArrayWithJavaUtilCollection_(id<JavaUtilCollection> d);

FOUNDATION_EXPORT IOSLongArray *EduStanfordNlpUtilArrayUtils_copy__WithLongArray_(IOSLongArray *arr);

FOUNDATION_EXPORT IOSIntArray *EduStanfordNlpUtilArrayUtils_copy__WithIntArray_(IOSIntArray *i);

FOUNDATION_EXPORT IOSObjectArray *EduStanfordNlpUtilArrayUtils_copy__WithIntArray2_(IOSObjectArray *i);

FOUNDATION_EXPORT IOSDoubleArray *EduStanfordNlpUtilArrayUtils_copy__WithDoubleArray_(IOSDoubleArray *d);

FOUNDATION_EXPORT IOSObjectArray *EduStanfordNlpUtilArrayUtils_copy__WithDoubleArray2_(IOSObjectArray *d);

FOUNDATION_EXPORT IOSObjectArray *EduStanfordNlpUtilArrayUtils_copy__WithDoubleArray3_(IOSObjectArray *d);

FOUNDATION_EXPORT IOSFloatArray *EduStanfordNlpUtilArrayUtils_copy__WithFloatArray_(IOSFloatArray *d);

FOUNDATION_EXPORT IOSObjectArray *EduStanfordNlpUtilArrayUtils_copy__WithFloatArray2_(IOSObjectArray *d);

FOUNDATION_EXPORT IOSObjectArray *EduStanfordNlpUtilArrayUtils_copy__WithFloatArray3_(IOSObjectArray *d);

FOUNDATION_EXPORT NSString *EduStanfordNlpUtilArrayUtils_toStringWithDoubleArray2_(IOSObjectArray *b);

FOUNDATION_EXPORT NSString *EduStanfordNlpUtilArrayUtils_toStringWithBooleanArray2_(IOSObjectArray *b);

FOUNDATION_EXPORT IOSLongArray *EduStanfordNlpUtilArrayUtils_toPrimitiveWithJavaLangLongArray_(IOSObjectArray *inArg);

FOUNDATION_EXPORT IOSIntArray *EduStanfordNlpUtilArrayUtils_toPrimitiveWithJavaLangIntegerArray_(IOSObjectArray *inArg);

FOUNDATION_EXPORT IOSShortArray *EduStanfordNlpUtilArrayUtils_toPrimitiveWithJavaLangShortArray_(IOSObjectArray *inArg);

FOUNDATION_EXPORT IOSCharArray *EduStanfordNlpUtilArrayUtils_toPrimitiveWithJavaLangCharacterArray_(IOSObjectArray *inArg);

FOUNDATION_EXPORT IOSDoubleArray *EduStanfordNlpUtilArrayUtils_toPrimitiveWithJavaLangDoubleArray_(IOSObjectArray *inArg);

FOUNDATION_EXPORT IOSLongArray *EduStanfordNlpUtilArrayUtils_toPrimitiveWithJavaLangLongArray_withLong_(IOSObjectArray *inArg, jlong valueForNull);

FOUNDATION_EXPORT IOSIntArray *EduStanfordNlpUtilArrayUtils_toPrimitiveWithJavaLangIntegerArray_withInt_(IOSObjectArray *inArg, jint valueForNull);

FOUNDATION_EXPORT IOSShortArray *EduStanfordNlpUtilArrayUtils_toPrimitiveWithJavaLangShortArray_withShort_(IOSObjectArray *inArg, jshort valueForNull);

FOUNDATION_EXPORT IOSCharArray *EduStanfordNlpUtilArrayUtils_toPrimitiveWithJavaLangCharacterArray_withChar_(IOSObjectArray *inArg, jchar valueForNull);

FOUNDATION_EXPORT IOSDoubleArray *EduStanfordNlpUtilArrayUtils_toDoubleArrayWithNSStringArray_(IOSObjectArray *inArg);

FOUNDATION_EXPORT IOSDoubleArray *EduStanfordNlpUtilArrayUtils_toPrimitiveWithJavaLangDoubleArray_withDouble_(IOSObjectArray *inArg, jdouble valueForNull);

FOUNDATION_EXPORT jint EduStanfordNlpUtilArrayUtils_compareArraysWithJavaLangComparableArray_withJavaLangComparableArray_(IOSObjectArray *first, IOSObjectArray *second);

FOUNDATION_EXPORT id<JavaUtilList> EduStanfordNlpUtilArrayUtils_getSubListIndexWithNSObjectArray_withNSObjectArray_(IOSObjectArray *tofind, IOSObjectArray *tokens);

FOUNDATION_EXPORT id<JavaUtilList> EduStanfordNlpUtilArrayUtils_getSubListIndexWithNSObjectArray_withNSObjectArray_withJavaUtilFunctionFunction_(IOSObjectArray *tofind, IOSObjectArray *tokens, id<JavaUtilFunctionFunction> matchingFunction);

FOUNDATION_EXPORT IOSDoubleArray *EduStanfordNlpUtilArrayUtils_normalizeWithDoubleArray_(IOSDoubleArray *ar);

FOUNDATION_EXPORT IOSObjectArray *EduStanfordNlpUtilArrayUtils_subArrayWithNSObjectArray_withInt_withInt_(IOSObjectArray *arr, jint startindexInclusive, jint endindexExclusive);

FOUNDATION_EXPORT jint EduStanfordNlpUtilArrayUtils_compareBooleanArraysWithBooleanArray_withBooleanArray_(IOSBooleanArray *a1, IOSBooleanArray *a2);

FOUNDATION_EXPORT NSString *EduStanfordNlpUtilArrayUtils_toStringWithDoubleArray_withNSString_(IOSDoubleArray *doubles, NSString *glue);

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpUtilArrayUtils)

#endif

#pragma pop_macro("INCLUDE_ALL_EduStanfordNlpUtilArrayUtils")
