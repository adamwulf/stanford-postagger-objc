//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/util/CacheMap.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/util/CacheMap.h"
#include "edu/stanford/nlp/util/ErasureUtils.h"
#include "java/io/FileInputStream.h"
#include "java/io/FileNotFoundException.h"
#include "java/io/FileOutputStream.h"
#include "java/io/ObjectInputStream.h"
#include "java/io/ObjectOutputStream.h"
#include "java/io/PrintStream.h"
#include "java/lang/Exception.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/Map.h"

@interface EduStanfordNlpUtilCacheMap () {
 @public
  jint CACHE_ENTRIES_;
  jint entriesSinceLastWritten_;
  jint frequencyToWrite_;
  jint hits_;
  jint misses_;
  jint puts_;
}

@end

inline jlong EduStanfordNlpUtilCacheMap_get_serialVersionUID();
#define EduStanfordNlpUtilCacheMap_serialVersionUID 1LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpUtilCacheMap, serialVersionUID, jlong)

@implementation EduStanfordNlpUtilCacheMap

- (instancetype)initWithInt:(jint)numEntries
                  withFloat:(jfloat)loadFactor
                withBoolean:(jboolean)accessOrder
               withNSString:(NSString *)backingFile {
  EduStanfordNlpUtilCacheMap_initWithInt_withFloat_withBoolean_withNSString_(self, numEntries, loadFactor, accessOrder, backingFile);
  return self;
}

- (instancetype)initWithInt:(jint)numEntries
                  withFloat:(jfloat)loadFactor
                withBoolean:(jboolean)accessOrder {
  EduStanfordNlpUtilCacheMap_initWithInt_withFloat_withBoolean_(self, numEntries, loadFactor, accessOrder);
  return self;
}

- (instancetype)initWithInt:(jint)numEntries
                  withFloat:(jfloat)loadFactor {
  EduStanfordNlpUtilCacheMap_initWithInt_withFloat_(self, numEntries, loadFactor);
  return self;
}

- (instancetype)initWithInt:(jint)numEntries {
  EduStanfordNlpUtilCacheMap_initWithInt_(self, numEntries);
  return self;
}

+ (EduStanfordNlpUtilCacheMap *)createWithInt:(jint)numEntries
                                    withFloat:(jfloat)loadFactor
                                  withBoolean:(jboolean)accessOrder
                                 withNSString:(NSString *)file
                                  withBoolean:(jboolean)useFileParams {
  return EduStanfordNlpUtilCacheMap_createWithInt_withFloat_withBoolean_withNSString_withBoolean_(numEntries, loadFactor, accessOrder, file, useFileParams);
}

+ (EduStanfordNlpUtilCacheMap *)createWithInt:(jint)numEntries
                                    withFloat:(jfloat)loadFactor
                                 withNSString:(NSString *)file
                                  withBoolean:(jboolean)useFileParams {
  return EduStanfordNlpUtilCacheMap_createWithInt_withFloat_withNSString_withBoolean_(numEntries, loadFactor, file, useFileParams);
}

+ (EduStanfordNlpUtilCacheMap *)createWithInt:(jint)numEntries
                                 withNSString:(NSString *)file
                                  withBoolean:(jboolean)useFileParams {
  return EduStanfordNlpUtilCacheMap_createWithInt_withNSString_withBoolean_(numEntries, file, useFileParams);
}

+ (EduStanfordNlpUtilCacheMap *)createWithNSString:(NSString *)file
                                       withBoolean:(jboolean)useFileParams {
  return EduStanfordNlpUtilCacheMap_createWithNSString_withBoolean_(file, useFileParams);
}

- (void)write {
  entriesSinceLastWritten_ = 0;
  if (frequencyToWrite_ < CACHE_ENTRIES_ / 4) frequencyToWrite_ *= 2;
  if (backingFile_ == nil) return;
  @try {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$I$$", @"Writing cache (size: ", [self size], @") to ", backingFile_)];
    JavaIoObjectOutputStream *oos = new_JavaIoObjectOutputStream_initWithJavaIoOutputStream_(new_JavaIoFileOutputStream_initWithNSString_(backingFile_));
    [oos writeObjectWithId:self];
  }
  @catch (JavaLangException *ex) {
    [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:JreStrcat("$$C", @"Error writing cache to file: ", backingFile_, '!')];
    [JreLoadStatic(JavaLangSystem, err) printlnWithId:ex];
  }
}

- (jboolean)removeEldestEntryWithJavaUtilMap_Entry:(id<JavaUtilMap_Entry>)eldest {
  if ([self size] > CACHE_ENTRIES_) {
    return true;
  }
  else {
    return false;
  }
}

- (id)getWithId:(id)key {
  id result = [super getWithId:key];
  if (result == nil) misses_++;
  else hits_++;
  return result;
}

- (id)putWithId:(id)key
         withId:(id)value {
  id result = [super putWithId:key withId:value];
  puts_++;
  if (++entriesSinceLastWritten_ >= frequencyToWrite_) {
    [self write];
  }
  return result;
}

- (void)printStatsWithJavaIoPrintStream:(JavaIoPrintStream *)outArg {
  [((JavaIoPrintStream *) nil_chk(outArg)) printlnWithNSString:JreStrcat("$I$I$I$I$F$F", @"cache stats: size: ", [self size], @", hits: ", hits_, @", misses: ", misses_, @", puts: ", puts_, @", hit % (using misses): ", ((jfloat) hits_) / (hits_ + misses_), @", hit % (using puts): ", ((jfloat) hits_) / (hits_ + puts_))];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpUtilCacheMap;", 0x9, 4, 5, -1, 6, -1, -1 },
    { NULL, "LEduStanfordNlpUtilCacheMap;", 0x9, 4, 7, -1, 8, -1, -1 },
    { NULL, "LEduStanfordNlpUtilCacheMap;", 0x9, 4, 9, -1, 10, -1, -1 },
    { NULL, "LEduStanfordNlpUtilCacheMap;", 0x9, 4, 11, -1, 12, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 13, 14, -1, 15, -1, -1 },
    { NULL, "LNSObject;", 0x1, 16, 17, -1, 18, -1, -1 },
    { NULL, "LNSObject;", 0x1, 19, 20, -1, 21, -1, -1 },
    { NULL, "V", 0x1, 22, 23, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:withFloat:withBoolean:withNSString:);
  methods[1].selector = @selector(initWithInt:withFloat:withBoolean:);
  methods[2].selector = @selector(initWithInt:withFloat:);
  methods[3].selector = @selector(initWithInt:);
  methods[4].selector = @selector(createWithInt:withFloat:withBoolean:withNSString:withBoolean:);
  methods[5].selector = @selector(createWithInt:withFloat:withNSString:withBoolean:);
  methods[6].selector = @selector(createWithInt:withNSString:withBoolean:);
  methods[7].selector = @selector(createWithNSString:withBoolean:);
  methods[8].selector = @selector(write);
  methods[9].selector = @selector(removeEldestEntryWithJavaUtilMap_Entry:);
  methods[10].selector = @selector(getWithId:);
  methods[11].selector = @selector(putWithId:withId:);
  methods[12].selector = @selector(printStatsWithJavaIoPrintStream:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpUtilCacheMap_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "backingFile_", "LNSString;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "CACHE_ENTRIES_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "entriesSinceLastWritten_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "frequencyToWrite_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "hits_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "misses_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "puts_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "IFZLNSString;", "IFZ", "IF", "I", "create", "IFZLNSString;Z", "<K:Ljava/lang/Object;V:Ljava/lang/Object;>(IFZLjava/lang/String;Z)Ledu/stanford/nlp/util/CacheMap<TK;TV;>;", "IFLNSString;Z", "<K:Ljava/lang/Object;V:Ljava/lang/Object;>(IFLjava/lang/String;Z)Ledu/stanford/nlp/util/CacheMap<TK;TV;>;", "ILNSString;Z", "<K:Ljava/lang/Object;V:Ljava/lang/Object;>(ILjava/lang/String;Z)Ledu/stanford/nlp/util/CacheMap<TK;TV;>;", "LNSString;Z", "<K:Ljava/lang/Object;V:Ljava/lang/Object;>(Ljava/lang/String;Z)Ledu/stanford/nlp/util/CacheMap<TK;TV;>;", "removeEldestEntry", "LJavaUtilMap_Entry;", "(Ljava/util/Map$Entry<TK;TV;>;)Z", "get", "LNSObject;", "(Ljava/lang/Object;)TV;", "put", "LNSObject;LNSObject;", "(TK;TV;)TV;", "printStats", "LJavaIoPrintStream;", "<K:Ljava/lang/Object;V:Ljava/lang/Object;>Ljava/util/LinkedHashMap<TK;TV;>;Ljava/util/Map<TK;TV;>;Ljava/lang/Cloneable;Ljava/io/Serializable;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilCacheMap = { "CacheMap", "edu.stanford.nlp.util", ptrTable, methods, fields, 7, 0x1, 13, 8, -1, -1, -1, 24, -1 };
  return &_EduStanfordNlpUtilCacheMap;
}

@end

void EduStanfordNlpUtilCacheMap_initWithInt_withFloat_withBoolean_withNSString_(EduStanfordNlpUtilCacheMap *self, jint numEntries, jfloat loadFactor, jboolean accessOrder, NSString *backingFile) {
  JavaUtilLinkedHashMap_initWithInt_withFloat_withBoolean_(self, JreFpToInt(JavaLangMath_ceilWithDouble_((numEntries + 1) / loadFactor)), loadFactor, accessOrder);
  self->CACHE_ENTRIES_ = numEntries;
  self->backingFile_ = backingFile;
  self->entriesSinceLastWritten_ = 0;
  self->frequencyToWrite_ = numEntries / 128 + 1;
  self->hits_ = self->misses_ = self->puts_ = 0;
}

EduStanfordNlpUtilCacheMap *new_EduStanfordNlpUtilCacheMap_initWithInt_withFloat_withBoolean_withNSString_(jint numEntries, jfloat loadFactor, jboolean accessOrder, NSString *backingFile) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilCacheMap, initWithInt_withFloat_withBoolean_withNSString_, numEntries, loadFactor, accessOrder, backingFile)
}

EduStanfordNlpUtilCacheMap *create_EduStanfordNlpUtilCacheMap_initWithInt_withFloat_withBoolean_withNSString_(jint numEntries, jfloat loadFactor, jboolean accessOrder, NSString *backingFile) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilCacheMap, initWithInt_withFloat_withBoolean_withNSString_, numEntries, loadFactor, accessOrder, backingFile)
}

void EduStanfordNlpUtilCacheMap_initWithInt_withFloat_withBoolean_(EduStanfordNlpUtilCacheMap *self, jint numEntries, jfloat loadFactor, jboolean accessOrder) {
  EduStanfordNlpUtilCacheMap_initWithInt_withFloat_withBoolean_withNSString_(self, numEntries, loadFactor, accessOrder, nil);
}

EduStanfordNlpUtilCacheMap *new_EduStanfordNlpUtilCacheMap_initWithInt_withFloat_withBoolean_(jint numEntries, jfloat loadFactor, jboolean accessOrder) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilCacheMap, initWithInt_withFloat_withBoolean_, numEntries, loadFactor, accessOrder)
}

EduStanfordNlpUtilCacheMap *create_EduStanfordNlpUtilCacheMap_initWithInt_withFloat_withBoolean_(jint numEntries, jfloat loadFactor, jboolean accessOrder) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilCacheMap, initWithInt_withFloat_withBoolean_, numEntries, loadFactor, accessOrder)
}

void EduStanfordNlpUtilCacheMap_initWithInt_withFloat_(EduStanfordNlpUtilCacheMap *self, jint numEntries, jfloat loadFactor) {
  EduStanfordNlpUtilCacheMap_initWithInt_withFloat_withBoolean_withNSString_(self, numEntries, loadFactor, false, nil);
}

EduStanfordNlpUtilCacheMap *new_EduStanfordNlpUtilCacheMap_initWithInt_withFloat_(jint numEntries, jfloat loadFactor) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilCacheMap, initWithInt_withFloat_, numEntries, loadFactor)
}

EduStanfordNlpUtilCacheMap *create_EduStanfordNlpUtilCacheMap_initWithInt_withFloat_(jint numEntries, jfloat loadFactor) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilCacheMap, initWithInt_withFloat_, numEntries, loadFactor)
}

void EduStanfordNlpUtilCacheMap_initWithInt_(EduStanfordNlpUtilCacheMap *self, jint numEntries) {
  EduStanfordNlpUtilCacheMap_initWithInt_withFloat_withBoolean_withNSString_(self, numEntries, 0.75f, false, nil);
}

EduStanfordNlpUtilCacheMap *new_EduStanfordNlpUtilCacheMap_initWithInt_(jint numEntries) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilCacheMap, initWithInt_, numEntries)
}

EduStanfordNlpUtilCacheMap *create_EduStanfordNlpUtilCacheMap_initWithInt_(jint numEntries) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilCacheMap, initWithInt_, numEntries)
}

EduStanfordNlpUtilCacheMap *EduStanfordNlpUtilCacheMap_createWithInt_withFloat_withBoolean_withNSString_withBoolean_(jint numEntries, jfloat loadFactor, jboolean accessOrder, NSString *file, jboolean useFileParams) {
  EduStanfordNlpUtilCacheMap_initialize();
  @try {
    JavaIoObjectInputStream *ois = new_JavaIoObjectInputStream_initWithJavaIoInputStream_(new_JavaIoFileInputStream_initWithNSString_(file));
    EduStanfordNlpUtilCacheMap *c = EduStanfordNlpUtilErasureUtils_uncheckedCastWithId_([ois readObject]);
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$$I$$", @"Read cache from ", file, @", contains ", [((EduStanfordNlpUtilCacheMap *) nil_chk(c)) size], @" entries.  Backing file is ", c->backingFile_)];
    if (!useFileParams) {
      c->backingFile_ = file;
      c->hits_ = c->misses_ = c->puts_ = 0;
      c->CACHE_ENTRIES_ = numEntries;
    }
    return c;
  }
  @catch (JavaIoFileNotFoundException *ex) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$$", @"Cache file ", file, @" has not been created yet.  Making new one.")];
    return new_EduStanfordNlpUtilCacheMap_initWithInt_withFloat_withBoolean_withNSString_(numEntries, loadFactor, accessOrder, file);
  }
  @catch (JavaLangException *ex) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$$", @"Error reading cache file ", file, @".  Making a new cache and NOT backing to file.")];
    return new_EduStanfordNlpUtilCacheMap_initWithInt_withFloat_withBoolean_(numEntries, loadFactor, accessOrder);
  }
}

EduStanfordNlpUtilCacheMap *EduStanfordNlpUtilCacheMap_createWithInt_withFloat_withNSString_withBoolean_(jint numEntries, jfloat loadFactor, NSString *file, jboolean useFileParams) {
  EduStanfordNlpUtilCacheMap_initialize();
  return EduStanfordNlpUtilCacheMap_createWithInt_withFloat_withBoolean_withNSString_withBoolean_(numEntries, loadFactor, false, file, useFileParams);
}

EduStanfordNlpUtilCacheMap *EduStanfordNlpUtilCacheMap_createWithInt_withNSString_withBoolean_(jint numEntries, NSString *file, jboolean useFileParams) {
  EduStanfordNlpUtilCacheMap_initialize();
  return EduStanfordNlpUtilCacheMap_createWithInt_withFloat_withBoolean_withNSString_withBoolean_(numEntries, .75f, false, file, useFileParams);
}

EduStanfordNlpUtilCacheMap *EduStanfordNlpUtilCacheMap_createWithNSString_withBoolean_(NSString *file, jboolean useFileParams) {
  EduStanfordNlpUtilCacheMap_initialize();
  return EduStanfordNlpUtilCacheMap_createWithInt_withFloat_withBoolean_withNSString_withBoolean_(1000, .75f, false, file, useFileParams);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpUtilCacheMap)
