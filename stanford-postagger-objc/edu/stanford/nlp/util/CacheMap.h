//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/util/CacheMap.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_EduStanfordNlpUtilCacheMap")
#ifdef RESTRICT_EduStanfordNlpUtilCacheMap
#define INCLUDE_ALL_EduStanfordNlpUtilCacheMap 0
#else
#define INCLUDE_ALL_EduStanfordNlpUtilCacheMap 1
#endif
#undef RESTRICT_EduStanfordNlpUtilCacheMap

#if !defined (EduStanfordNlpUtilCacheMap_) && (INCLUDE_ALL_EduStanfordNlpUtilCacheMap || defined(INCLUDE_EduStanfordNlpUtilCacheMap))
#define EduStanfordNlpUtilCacheMap_

#define RESTRICT_JavaUtilLinkedHashMap 1
#define INCLUDE_JavaUtilLinkedHashMap 1
#include "java/util/LinkedHashMap.h"

#define RESTRICT_JavaUtilMap 1
#define INCLUDE_JavaUtilMap 1
#include "java/util/Map.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class JavaIoPrintStream;
@protocol JavaUtilMap_Entry;

@interface EduStanfordNlpUtilCacheMap : JavaUtilLinkedHashMap < JavaUtilMap, NSCopying, JavaIoSerializable > {
 @public
  NSString *backingFile_;
}

#pragma mark Public

- (instancetype)initWithInt:(jint)numEntries;

- (instancetype)initWithInt:(jint)numEntries
                  withFloat:(jfloat)loadFactor;

- (instancetype)initWithInt:(jint)numEntries
                  withFloat:(jfloat)loadFactor
                withBoolean:(jboolean)accessOrder;

- (instancetype)initWithInt:(jint)numEntries
                  withFloat:(jfloat)loadFactor
                withBoolean:(jboolean)accessOrder
               withNSString:(NSString *)backingFile;

+ (EduStanfordNlpUtilCacheMap *)createWithInt:(jint)numEntries
                                    withFloat:(jfloat)loadFactor
                                  withBoolean:(jboolean)accessOrder
                                 withNSString:(NSString *)file
                                  withBoolean:(jboolean)useFileParams;

+ (EduStanfordNlpUtilCacheMap *)createWithInt:(jint)numEntries
                                    withFloat:(jfloat)loadFactor
                                 withNSString:(NSString *)file
                                  withBoolean:(jboolean)useFileParams;

+ (EduStanfordNlpUtilCacheMap *)createWithInt:(jint)numEntries
                                 withNSString:(NSString *)file
                                  withBoolean:(jboolean)useFileParams;

+ (EduStanfordNlpUtilCacheMap *)createWithNSString:(NSString *)file
                                       withBoolean:(jboolean)useFileParams;

- (id)getWithId:(id)key;

- (void)printStatsWithJavaIoPrintStream:(JavaIoPrintStream *)outArg;

- (id)putWithId:(id)key
         withId:(id)value;

- (void)write;

#pragma mark Protected

- (jboolean)removeEldestEntryWithJavaUtilMap_Entry:(id<JavaUtilMap_Entry>)eldest;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpUtilCacheMap)

J2OBJC_FIELD_SETTER(EduStanfordNlpUtilCacheMap, backingFile_, NSString *)

FOUNDATION_EXPORT void EduStanfordNlpUtilCacheMap_initWithInt_withFloat_withBoolean_withNSString_(EduStanfordNlpUtilCacheMap *self, jint numEntries, jfloat loadFactor, jboolean accessOrder, NSString *backingFile);

FOUNDATION_EXPORT EduStanfordNlpUtilCacheMap *new_EduStanfordNlpUtilCacheMap_initWithInt_withFloat_withBoolean_withNSString_(jint numEntries, jfloat loadFactor, jboolean accessOrder, NSString *backingFile) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EduStanfordNlpUtilCacheMap *create_EduStanfordNlpUtilCacheMap_initWithInt_withFloat_withBoolean_withNSString_(jint numEntries, jfloat loadFactor, jboolean accessOrder, NSString *backingFile);

FOUNDATION_EXPORT void EduStanfordNlpUtilCacheMap_initWithInt_withFloat_withBoolean_(EduStanfordNlpUtilCacheMap *self, jint numEntries, jfloat loadFactor, jboolean accessOrder);

FOUNDATION_EXPORT EduStanfordNlpUtilCacheMap *new_EduStanfordNlpUtilCacheMap_initWithInt_withFloat_withBoolean_(jint numEntries, jfloat loadFactor, jboolean accessOrder) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EduStanfordNlpUtilCacheMap *create_EduStanfordNlpUtilCacheMap_initWithInt_withFloat_withBoolean_(jint numEntries, jfloat loadFactor, jboolean accessOrder);

FOUNDATION_EXPORT void EduStanfordNlpUtilCacheMap_initWithInt_withFloat_(EduStanfordNlpUtilCacheMap *self, jint numEntries, jfloat loadFactor);

FOUNDATION_EXPORT EduStanfordNlpUtilCacheMap *new_EduStanfordNlpUtilCacheMap_initWithInt_withFloat_(jint numEntries, jfloat loadFactor) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EduStanfordNlpUtilCacheMap *create_EduStanfordNlpUtilCacheMap_initWithInt_withFloat_(jint numEntries, jfloat loadFactor);

FOUNDATION_EXPORT void EduStanfordNlpUtilCacheMap_initWithInt_(EduStanfordNlpUtilCacheMap *self, jint numEntries);

FOUNDATION_EXPORT EduStanfordNlpUtilCacheMap *new_EduStanfordNlpUtilCacheMap_initWithInt_(jint numEntries) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EduStanfordNlpUtilCacheMap *create_EduStanfordNlpUtilCacheMap_initWithInt_(jint numEntries);

FOUNDATION_EXPORT EduStanfordNlpUtilCacheMap *EduStanfordNlpUtilCacheMap_createWithInt_withFloat_withBoolean_withNSString_withBoolean_(jint numEntries, jfloat loadFactor, jboolean accessOrder, NSString *file, jboolean useFileParams);

FOUNDATION_EXPORT EduStanfordNlpUtilCacheMap *EduStanfordNlpUtilCacheMap_createWithInt_withFloat_withNSString_withBoolean_(jint numEntries, jfloat loadFactor, NSString *file, jboolean useFileParams);

FOUNDATION_EXPORT EduStanfordNlpUtilCacheMap *EduStanfordNlpUtilCacheMap_createWithInt_withNSString_withBoolean_(jint numEntries, NSString *file, jboolean useFileParams);

FOUNDATION_EXPORT EduStanfordNlpUtilCacheMap *EduStanfordNlpUtilCacheMap_createWithNSString_withBoolean_(NSString *file, jboolean useFileParams);

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpUtilCacheMap)

#endif

#pragma pop_macro("INCLUDE_ALL_EduStanfordNlpUtilCacheMap")
