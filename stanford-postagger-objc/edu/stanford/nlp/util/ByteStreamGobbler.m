//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/util/ByteStreamGobbler.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/util/ByteStreamGobbler.h"
#include "java/io/BufferedInputStream.h"
#include "java/io/BufferedOutputStream.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/io/PrintStream.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"

@implementation EduStanfordNlpUtilByteStreamGobbler

- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)is
                   withJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  EduStanfordNlpUtilByteStreamGobbler_initWithJavaIoInputStream_withJavaIoOutputStream_(self, is, outArg);
  return self;
}

- (instancetype)initWithNSString:(NSString *)name
           withJavaIoInputStream:(JavaIoInputStream *)is
          withJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  EduStanfordNlpUtilByteStreamGobbler_initWithNSString_withJavaIoInputStream_withJavaIoOutputStream_(self, name, is, outArg);
  return self;
}

- (instancetype)initWithNSString:(NSString *)name
           withJavaIoInputStream:(JavaIoInputStream *)is
          withJavaIoOutputStream:(JavaIoOutputStream *)outArg
                         withInt:(jint)bufferSize {
  EduStanfordNlpUtilByteStreamGobbler_initWithNSString_withJavaIoInputStream_withJavaIoOutputStream_withInt_(self, name, is, outArg, bufferSize);
  return self;
}

- (JavaIoInputStream *)getInputStream {
  return inStream_;
}

- (JavaIoOutputStream *)getOutputStream {
  return outStream_;
}

- (void)run {
  @try {
    IOSByteArray *b = [IOSByteArray newArrayWithLength:bufferSize_];
    jint bytesRead;
    while ((bytesRead = [((JavaIoInputStream *) nil_chk(inStream_)) readWithByteArray:b]) >= 0) {
      if (bytesRead > 0) {
        [((JavaIoOutputStream *) nil_chk(outStream_)) writeWithByteArray:b withInt:0 withInt:bytesRead];
      }
    }
    [((JavaIoInputStream *) nil_chk(inStream_)) close];
  }
  @catch (JavaLangException *ex) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$C@", @"Problem reading stream :", [[((JavaIoInputStream *) nil_chk(inStream_)) getClass] getCanonicalName], ' ', ex)];
    [((JavaLangException *) nil_chk(ex)) printStackTrace];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "LJavaIoInputStream;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaIoOutputStream;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaIoInputStream:withJavaIoOutputStream:);
  methods[1].selector = @selector(initWithNSString:withJavaIoInputStream:withJavaIoOutputStream:);
  methods[2].selector = @selector(initWithNSString:withJavaIoInputStream:withJavaIoOutputStream:withInt:);
  methods[3].selector = @selector(getInputStream);
  methods[4].selector = @selector(getOutputStream);
  methods[5].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "inStream_", "LJavaIoInputStream;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "outStream_", "LJavaIoOutputStream;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "bufferSize_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoInputStream;LJavaIoOutputStream;", "LNSString;LJavaIoInputStream;LJavaIoOutputStream;", "LNSString;LJavaIoInputStream;LJavaIoOutputStream;I" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilByteStreamGobbler = { "ByteStreamGobbler", "edu.stanford.nlp.util", ptrTable, methods, fields, 7, 0x1, 6, 3, -1, -1, -1, -1, -1 };
  return &_EduStanfordNlpUtilByteStreamGobbler;
}

@end

void EduStanfordNlpUtilByteStreamGobbler_initWithJavaIoInputStream_withJavaIoOutputStream_(EduStanfordNlpUtilByteStreamGobbler *self, JavaIoInputStream *is, JavaIoOutputStream *outArg) {
  JavaLangThread_init(self);
  self->bufferSize_ = 4096;
  self->inStream_ = new_JavaIoBufferedInputStream_initWithJavaIoInputStream_(is);
  self->outStream_ = new_JavaIoBufferedOutputStream_initWithJavaIoOutputStream_(outArg);
}

EduStanfordNlpUtilByteStreamGobbler *new_EduStanfordNlpUtilByteStreamGobbler_initWithJavaIoInputStream_withJavaIoOutputStream_(JavaIoInputStream *is, JavaIoOutputStream *outArg) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilByteStreamGobbler, initWithJavaIoInputStream_withJavaIoOutputStream_, is, outArg)
}

EduStanfordNlpUtilByteStreamGobbler *create_EduStanfordNlpUtilByteStreamGobbler_initWithJavaIoInputStream_withJavaIoOutputStream_(JavaIoInputStream *is, JavaIoOutputStream *outArg) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilByteStreamGobbler, initWithJavaIoInputStream_withJavaIoOutputStream_, is, outArg)
}

void EduStanfordNlpUtilByteStreamGobbler_initWithNSString_withJavaIoInputStream_withJavaIoOutputStream_(EduStanfordNlpUtilByteStreamGobbler *self, NSString *name, JavaIoInputStream *is, JavaIoOutputStream *outArg) {
  JavaLangThread_initWithNSString_(self, name);
  self->bufferSize_ = 4096;
  self->inStream_ = new_JavaIoBufferedInputStream_initWithJavaIoInputStream_(is);
  self->outStream_ = new_JavaIoBufferedOutputStream_initWithJavaIoOutputStream_(outArg);
}

EduStanfordNlpUtilByteStreamGobbler *new_EduStanfordNlpUtilByteStreamGobbler_initWithNSString_withJavaIoInputStream_withJavaIoOutputStream_(NSString *name, JavaIoInputStream *is, JavaIoOutputStream *outArg) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilByteStreamGobbler, initWithNSString_withJavaIoInputStream_withJavaIoOutputStream_, name, is, outArg)
}

EduStanfordNlpUtilByteStreamGobbler *create_EduStanfordNlpUtilByteStreamGobbler_initWithNSString_withJavaIoInputStream_withJavaIoOutputStream_(NSString *name, JavaIoInputStream *is, JavaIoOutputStream *outArg) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilByteStreamGobbler, initWithNSString_withJavaIoInputStream_withJavaIoOutputStream_, name, is, outArg)
}

void EduStanfordNlpUtilByteStreamGobbler_initWithNSString_withJavaIoInputStream_withJavaIoOutputStream_withInt_(EduStanfordNlpUtilByteStreamGobbler *self, NSString *name, JavaIoInputStream *is, JavaIoOutputStream *outArg, jint bufferSize) {
  JavaLangThread_initWithNSString_(self, name);
  self->bufferSize_ = 4096;
  self->inStream_ = new_JavaIoBufferedInputStream_initWithJavaIoInputStream_(is);
  self->outStream_ = new_JavaIoBufferedOutputStream_initWithJavaIoOutputStream_(outArg);
  if (bufferSize <= 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$", @"Invalid buffer size ", bufferSize, @": must be larger than 0"));
  }
  self->bufferSize_ = bufferSize;
}

EduStanfordNlpUtilByteStreamGobbler *new_EduStanfordNlpUtilByteStreamGobbler_initWithNSString_withJavaIoInputStream_withJavaIoOutputStream_withInt_(NSString *name, JavaIoInputStream *is, JavaIoOutputStream *outArg, jint bufferSize) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilByteStreamGobbler, initWithNSString_withJavaIoInputStream_withJavaIoOutputStream_withInt_, name, is, outArg, bufferSize)
}

EduStanfordNlpUtilByteStreamGobbler *create_EduStanfordNlpUtilByteStreamGobbler_initWithNSString_withJavaIoInputStream_withJavaIoOutputStream_withInt_(NSString *name, JavaIoInputStream *is, JavaIoOutputStream *outArg, jint bufferSize) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilByteStreamGobbler, initWithNSString_withJavaIoInputStream_withJavaIoOutputStream_withInt_, name, is, outArg, bufferSize)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpUtilByteStreamGobbler)
