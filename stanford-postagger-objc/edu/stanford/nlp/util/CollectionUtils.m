//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/util/CollectionUtils.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/stats/ClassicCounter.h"
#include "edu/stanford/nlp/stats/Counter.h"
#include "edu/stanford/nlp/stats/Counters.h"
#include "edu/stanford/nlp/util/CollectionFactory.h"
#include "edu/stanford/nlp/util/CollectionUtils.h"
#include "edu/stanford/nlp/util/Generics.h"
#include "edu/stanford/nlp/util/HasInterval.h"
#include "edu/stanford/nlp/util/Interval.h"
#include "edu/stanford/nlp/util/IterableIterator.h"
#include "edu/stanford/nlp/util/MapFactory.h"
#include "edu/stanford/nlp/util/Pair.h"
#include "java/io/BufferedReader.h"
#include "java/io/File.h"
#include "java/io/FileReader.h"
#include "java/io/PrintStream.h"
#include "java/lang/Comparable.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/Integer.h"
#include "java/lang/Iterable.h"
#include "java/lang/Math.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/SafeVarargs.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/annotation/Annotation.h"
#include "java/lang/reflect/Constructor.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/Comparator.h"
#include "java/util/Enumeration.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Random.h"
#include "java/util/Set.h"
#include "java/util/function/Consumer.h"
#include "java/util/function/Function.h"
#include "java/util/function/Predicate.h"
#include "java/util/function/ToDoubleFunction.h"
#include "java/util/function/ToIntFunction.h"
#include "java/util/function/ToLongFunction.h"

@interface EduStanfordNlpUtilCollectionUtils ()

- (instancetype)init;

@end

__attribute__((unused)) static void EduStanfordNlpUtilCollectionUtils_init(EduStanfordNlpUtilCollectionUtils *self);

__attribute__((unused)) static EduStanfordNlpUtilCollectionUtils *new_EduStanfordNlpUtilCollectionUtils_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpUtilCollectionUtils *create_EduStanfordNlpUtilCollectionUtils_init();

__attribute__((unused)) static IOSObjectArray *EduStanfordNlpUtilCollectionUtils__Annotations$0();

__attribute__((unused)) static IOSObjectArray *EduStanfordNlpUtilCollectionUtils__Annotations$1();

__attribute__((unused)) static IOSObjectArray *EduStanfordNlpUtilCollectionUtils__Annotations$2();

__attribute__((unused)) static IOSObjectArray *EduStanfordNlpUtilCollectionUtils__Annotations$3();

@interface EduStanfordNlpUtilCollectionUtils_$Lambda$1 : NSObject < JavaUtilComparator >

- (jint)compareWithId:(id<JavaUtilList>)a
               withId:(id<JavaUtilList>)b;

@end

J2OBJC_STATIC_INIT(EduStanfordNlpUtilCollectionUtils_$Lambda$1)

inline EduStanfordNlpUtilCollectionUtils_$Lambda$1 *EduStanfordNlpUtilCollectionUtils_$Lambda$1_get_instance();
static EduStanfordNlpUtilCollectionUtils_$Lambda$1 *EduStanfordNlpUtilCollectionUtils_$Lambda$1_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpUtilCollectionUtils_$Lambda$1, instance, EduStanfordNlpUtilCollectionUtils_$Lambda$1 *)

__attribute__((unused)) static void EduStanfordNlpUtilCollectionUtils_$Lambda$1_init(EduStanfordNlpUtilCollectionUtils_$Lambda$1 *self);

__attribute__((unused)) static EduStanfordNlpUtilCollectionUtils_$Lambda$1 *new_EduStanfordNlpUtilCollectionUtils_$Lambda$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpUtilCollectionUtils_$Lambda$1 *create_EduStanfordNlpUtilCollectionUtils_$Lambda$1_init();

@interface EduStanfordNlpUtilCollectionUtils_$1 : NSObject < JavaUtilIterator > {
 @public
  id<JavaUtilIterator> lastIter_;
  id<JavaUtilList> iters_;
}

- (jboolean)hasNext;

- (id)next;

- (void)remove;

- (instancetype)initWithJavaUtilIteratorArray:(IOSObjectArray *)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpUtilCollectionUtils_$1)

J2OBJC_FIELD_SETTER(EduStanfordNlpUtilCollectionUtils_$1, lastIter_, id<JavaUtilIterator>)
J2OBJC_FIELD_SETTER(EduStanfordNlpUtilCollectionUtils_$1, iters_, id<JavaUtilList>)

__attribute__((unused)) static void EduStanfordNlpUtilCollectionUtils_$1_initWithJavaUtilIteratorArray_(EduStanfordNlpUtilCollectionUtils_$1 *self, IOSObjectArray *capture$0);

__attribute__((unused)) static EduStanfordNlpUtilCollectionUtils_$1 *new_EduStanfordNlpUtilCollectionUtils_$1_initWithJavaUtilIteratorArray_(IOSObjectArray *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpUtilCollectionUtils_$1 *create_EduStanfordNlpUtilCollectionUtils_$1_initWithJavaUtilIteratorArray_(IOSObjectArray *capture$0);

@interface EduStanfordNlpUtilCollectionUtils_$2 : NSObject < JavaUtilIterator > {
 @public
  id<JavaUtilEnumeration> lst_;
}

- (jboolean)hasNext;

- (id)next;

- (instancetype)initWithJavaUtilEnumeration:(id<JavaUtilEnumeration>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpUtilCollectionUtils_$2)

J2OBJC_FIELD_SETTER(EduStanfordNlpUtilCollectionUtils_$2, lst_, id<JavaUtilEnumeration>)

__attribute__((unused)) static void EduStanfordNlpUtilCollectionUtils_$2_initWithJavaUtilEnumeration_(EduStanfordNlpUtilCollectionUtils_$2 *self, id<JavaUtilEnumeration> capture$0);

__attribute__((unused)) static EduStanfordNlpUtilCollectionUtils_$2 *new_EduStanfordNlpUtilCollectionUtils_$2_initWithJavaUtilEnumeration_(id<JavaUtilEnumeration> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpUtilCollectionUtils_$2 *create_EduStanfordNlpUtilCollectionUtils_$2_initWithJavaUtilEnumeration_(id<JavaUtilEnumeration> capture$0);

@implementation EduStanfordNlpUtilCollectionUtils

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpUtilCollectionUtils_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (id<JavaUtilList>)asListWithIntArray:(IOSIntArray *)a {
  return EduStanfordNlpUtilCollectionUtils_asListWithIntArray_(a);
}

+ (id<JavaUtilList>)asListWithDoubleArray:(IOSDoubleArray *)a {
  return EduStanfordNlpUtilCollectionUtils_asListWithDoubleArray_(a);
}

+ (IOSIntArray *)asIntArrayWithJavaUtilCollection:(id<JavaUtilCollection>)coll {
  return EduStanfordNlpUtilCollectionUtils_asIntArrayWithJavaUtilCollection_(coll);
}

+ (IOSDoubleArray *)asDoubleArrayWithJavaUtilCollection:(id<JavaUtilCollection>)coll {
  return EduStanfordNlpUtilCollectionUtils_asDoubleArrayWithJavaUtilCollection_(coll);
}

+ (id<JavaUtilList>)makeListWithNSObjectArray:(IOSObjectArray *)items {
  return EduStanfordNlpUtilCollectionUtils_makeListWithNSObjectArray_(items);
}

+ (id<JavaUtilSet>)asSetWithNSObjectArray:(IOSObjectArray *)o {
  return EduStanfordNlpUtilCollectionUtils_asSetWithNSObjectArray_(o);
}

+ (id<JavaUtilSet>)intersectionWithJavaUtilSet:(id<JavaUtilSet>)set1
                               withJavaUtilSet:(id<JavaUtilSet>)set2 {
  return EduStanfordNlpUtilCollectionUtils_intersectionWithJavaUtilSet_withJavaUtilSet_(set1, set2);
}

+ (id<JavaUtilCollection>)union__WithJavaUtilCollection:(id<JavaUtilCollection>)set1
                                 withJavaUtilCollection:(id<JavaUtilCollection>)set2 {
  return EduStanfordNlpUtilCollectionUtils_union__WithJavaUtilCollection_withJavaUtilCollection_(set1, set2);
}

+ (id<JavaUtilSet>)unionAsSetWithJavaUtilCollection:(id<JavaUtilCollection>)set1
                             withJavaUtilCollection:(id<JavaUtilCollection>)set2 {
  return EduStanfordNlpUtilCollectionUtils_unionAsSetWithJavaUtilCollection_withJavaUtilCollection_(set1, set2);
}

+ (id<JavaUtilSet>)unionAsSetWithJavaUtilCollectionArray:(IOSObjectArray *)sets {
  return EduStanfordNlpUtilCollectionUtils_unionAsSetWithJavaUtilCollectionArray_(sets);
}

+ (id<JavaUtilCollection>)diffWithJavaUtilCollection:(id<JavaUtilCollection>)list1
                              withJavaUtilCollection:(id<JavaUtilCollection>)list2 {
  return EduStanfordNlpUtilCollectionUtils_diffWithJavaUtilCollection_withJavaUtilCollection_(list1, list2);
}

+ (id<JavaUtilSet>)diffAsSetWithJavaUtilCollection:(id<JavaUtilCollection>)list1
                            withJavaUtilCollection:(id<JavaUtilCollection>)list2 {
  return EduStanfordNlpUtilCollectionUtils_diffAsSetWithJavaUtilCollection_withJavaUtilCollection_(list1, list2);
}

+ (id<JavaUtilCollection>)loadCollectionWithNSString:(NSString *)filename
                                        withIOSClass:(IOSClass *)c
             withEduStanfordNlpUtilCollectionFactory:(EduStanfordNlpUtilCollectionFactory *)cf {
  return EduStanfordNlpUtilCollectionUtils_loadCollectionWithNSString_withIOSClass_withEduStanfordNlpUtilCollectionFactory_(filename, c, cf);
}

+ (id<JavaUtilCollection>)loadCollectionWithJavaIoFile:(JavaIoFile *)file
                                          withIOSClass:(IOSClass *)c
               withEduStanfordNlpUtilCollectionFactory:(EduStanfordNlpUtilCollectionFactory *)cf {
  return EduStanfordNlpUtilCollectionUtils_loadCollectionWithJavaIoFile_withIOSClass_withEduStanfordNlpUtilCollectionFactory_(file, c, cf);
}

+ (void)loadCollectionWithNSString:(NSString *)fileName
                      withIOSClass:(IOSClass *)itemClass
            withJavaUtilCollection:(id<JavaUtilCollection>)collection {
  EduStanfordNlpUtilCollectionUtils_loadCollectionWithNSString_withIOSClass_withJavaUtilCollection_(fileName, itemClass, collection);
}

+ (void)loadCollectionWithJavaIoFile:(JavaIoFile *)file
                        withIOSClass:(IOSClass *)itemClass
              withJavaUtilCollection:(id<JavaUtilCollection>)collection {
  EduStanfordNlpUtilCollectionUtils_loadCollectionWithJavaIoFile_withIOSClass_withJavaUtilCollection_(file, itemClass, collection);
}

+ (id<JavaUtilMap>)getMapFromStringWithNSString:(NSString *)s
                                   withIOSClass:(IOSClass *)keyClass
                                   withIOSClass:(IOSClass *)valueClass
               withEduStanfordNlpUtilMapFactory:(EduStanfordNlpUtilMapFactory *)mapFactory {
  return EduStanfordNlpUtilCollectionUtils_getMapFromStringWithNSString_withIOSClass_withIOSClass_withEduStanfordNlpUtilMapFactory_(s, keyClass, valueClass, mapFactory);
}

+ (jboolean)containsObjectWithJavaUtilCollection:(id<JavaUtilCollection>)c
                                          withId:(id)o {
  return EduStanfordNlpUtilCollectionUtils_containsObjectWithJavaUtilCollection_withId_(c, o);
}

+ (jboolean)removeObjectWithJavaUtilList:(id<JavaUtilList>)l
                                  withId:(id)o {
  return EduStanfordNlpUtilCollectionUtils_removeObjectWithJavaUtilList_withId_(l, o);
}

+ (jint)getIndexWithJavaUtilList:(id<JavaUtilList>)l
                          withId:(id)o {
  return EduStanfordNlpUtilCollectionUtils_getIndexWithJavaUtilList_withId_(l, o);
}

+ (jint)getIndexWithJavaUtilList:(id<JavaUtilList>)l
                          withId:(id)o
                         withInt:(jint)fromIndex {
  return EduStanfordNlpUtilCollectionUtils_getIndexWithJavaUtilList_withId_withInt_(l, o, fromIndex);
}

+ (id<JavaUtilCollection>)sampleWithoutReplacementWithJavaUtilCollection:(id<JavaUtilCollection>)c
                                                                 withInt:(jint)n {
  return EduStanfordNlpUtilCollectionUtils_sampleWithoutReplacementWithJavaUtilCollection_withInt_(c, n);
}

+ (id<JavaUtilCollection>)sampleWithoutReplacementWithJavaUtilCollection:(id<JavaUtilCollection>)c
                                                                 withInt:(jint)n
                                                      withJavaUtilRandom:(JavaUtilRandom *)r {
  return EduStanfordNlpUtilCollectionUtils_sampleWithoutReplacementWithJavaUtilCollection_withInt_withJavaUtilRandom_(c, n, r);
}

+ (id)sampleWithJavaUtilList:(id<JavaUtilList>)l
          withJavaUtilRandom:(JavaUtilRandom *)r {
  return EduStanfordNlpUtilCollectionUtils_sampleWithJavaUtilList_withJavaUtilRandom_(l, r);
}

+ (id<JavaUtilCollection>)sampleWithReplacementWithJavaUtilCollection:(id<JavaUtilCollection>)c
                                                              withInt:(jint)n {
  return EduStanfordNlpUtilCollectionUtils_sampleWithReplacementWithJavaUtilCollection_withInt_(c, n);
}

+ (id<JavaUtilCollection>)sampleWithReplacementWithJavaUtilCollection:(id<JavaUtilCollection>)c
                                                              withInt:(jint)n
                                                   withJavaUtilRandom:(JavaUtilRandom *)r {
  return EduStanfordNlpUtilCollectionUtils_sampleWithReplacementWithJavaUtilCollection_withInt_withJavaUtilRandom_(c, n, r);
}

+ (jboolean)isSubListWithJavaUtilList:(id<JavaUtilList>)l1
                     withJavaUtilList:(id<JavaUtilList>)l {
  return EduStanfordNlpUtilCollectionUtils_isSubListWithJavaUtilList_withJavaUtilList_(l1, l);
}

+ (NSString *)toVerticalStringWithJavaUtilMap:(id<JavaUtilMap>)m {
  return EduStanfordNlpUtilCollectionUtils_toVerticalStringWithJavaUtilMap_(m);
}

+ (jint)compareListsWithJavaUtilList:(id<JavaUtilList>)list1
                    withJavaUtilList:(id<JavaUtilList>)list2 {
  return EduStanfordNlpUtilCollectionUtils_compareListsWithJavaUtilList_withJavaUtilList_(list1, list2);
}

+ (id<JavaUtilComparator>)getListComparator {
  return EduStanfordNlpUtilCollectionUtils_getListComparator();
}

+ (id<JavaUtilList>)sortedWithJavaLangIterable:(id<JavaLangIterable>)items {
  return EduStanfordNlpUtilCollectionUtils_sortedWithJavaLangIterable_(items);
}

+ (id<JavaUtilList>)sortedWithJavaLangIterable:(id<JavaLangIterable>)items
                        withJavaUtilComparator:(id<JavaUtilComparator>)comparator {
  return EduStanfordNlpUtilCollectionUtils_sortedWithJavaLangIterable_withJavaUtilComparator_(items, comparator);
}

+ (id<JavaUtilList>)toListWithJavaLangIterable:(id<JavaLangIterable>)items {
  return EduStanfordNlpUtilCollectionUtils_toListWithJavaLangIterable_(items);
}

+ (id<JavaUtilSet>)toSetWithJavaLangIterable:(id<JavaLangIterable>)items {
  return EduStanfordNlpUtilCollectionUtils_toSetWithJavaLangIterable_(items);
}

+ (void)addAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection
                withJavaLangIterable:(id<JavaLangIterable>)items {
  EduStanfordNlpUtilCollectionUtils_addAllWithJavaUtilCollection_withJavaLangIterable_(collection, items);
}

+ (id<JavaUtilList>)getNGramsWithJavaUtilList:(id<JavaUtilList>)items
                                      withInt:(jint)minSize
                                      withInt:(jint)maxSize {
  return EduStanfordNlpUtilCollectionUtils_getNGramsWithJavaUtilList_withInt_withInt_(items, minSize, maxSize);
}

+ (id<JavaUtilList>)getPrefixesAndSuffixesWithJavaUtilList:(id<JavaUtilList>)items
                                                   withInt:(jint)minSize
                                                   withInt:(jint)maxSize
                                                    withId:(id)paddingSymbol
                                               withBoolean:(jboolean)includePrefixes
                                               withBoolean:(jboolean)includeSuffixes {
  return EduStanfordNlpUtilCollectionUtils_getPrefixesAndSuffixesWithJavaUtilList_withInt_withInt_withId_withBoolean_withBoolean_(items, minSize, maxSize, paddingSymbol, includePrefixes, includeSuffixes);
}

+ (id<JavaUtilList>)mergeListWithJavaUtilList:(id<JavaUtilList>)list
                       withJavaUtilCollection:(id<JavaUtilCollection>)matched
                 withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)toIntervalFunc
                 withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)aggregator {
  return EduStanfordNlpUtilCollectionUtils_mergeListWithJavaUtilList_withJavaUtilCollection_withJavaUtilFunctionFunction_withJavaUtilFunctionFunction_(list, matched, toIntervalFunc, aggregator);
}

+ (id<JavaUtilList>)mergeListWithJavaUtilList:(id<JavaUtilList>)list
                             withJavaUtilList:(id<JavaUtilList>)matched
                 withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)aggregator {
  return EduStanfordNlpUtilCollectionUtils_mergeListWithJavaUtilList_withJavaUtilList_withJavaUtilFunctionFunction_(list, matched, aggregator);
}

+ (id<JavaUtilList>)mergeListWithSortedMatchedWithJavaUtilList:(id<JavaUtilList>)list
                                              withJavaUtilList:(id<JavaUtilList>)matched
                                  withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)aggregator {
  return EduStanfordNlpUtilCollectionUtils_mergeListWithSortedMatchedWithJavaUtilList_withJavaUtilList_withJavaUtilFunctionFunction_(list, matched, aggregator);
}

+ (id<JavaUtilList>)mergeListWithSortedMatchedPreAggregatedWithJavaUtilList:(id<JavaUtilList>)list
                                                           withJavaUtilList:(id<JavaUtilList>)matched
                                               withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)toIntervalFunc {
  return EduStanfordNlpUtilCollectionUtils_mergeListWithSortedMatchedPreAggregatedWithJavaUtilList_withJavaUtilList_withJavaUtilFunctionFunction_(list, matched, toIntervalFunc);
}

+ (id<JavaUtilList>)flattenWithJavaUtilCollection:(id<JavaUtilCollection>)nestedList {
  return EduStanfordNlpUtilCollectionUtils_flattenWithJavaUtilCollection_(nestedList);
}

+ (id<JavaUtilCollection>)uniqueNonhashableObjectsWithJavaUtilCollection:(id<JavaUtilCollection>)objects
                                            withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)customHasher {
  return EduStanfordNlpUtilCollectionUtils_uniqueNonhashableObjectsWithJavaUtilCollection_withJavaUtilFunctionFunction_(objects, customHasher);
}

+ (jboolean)containsAnyWithJavaUtilCollection:(id<JavaUtilCollection>)collection
                       withJavaUtilCollection:(id<JavaUtilCollection>)toCheck {
  return EduStanfordNlpUtilCollectionUtils_containsAnyWithJavaUtilCollection_withJavaUtilCollection_(collection, toCheck);
}

+ (id<JavaUtilList>)partitionIntoFoldsWithJavaUtilList:(id<JavaUtilList>)values
                                               withInt:(jint)numFolds {
  return EduStanfordNlpUtilCollectionUtils_partitionIntoFoldsWithJavaUtilList_withInt_(values, numFolds);
}

+ (id<JavaUtilCollection>)trainTestFoldsForCVWithJavaUtilList:(id<JavaUtilList>)values
                                                      withInt:(jint)numFolds {
  return EduStanfordNlpUtilCollectionUtils_trainTestFoldsForCVWithJavaUtilList_withInt_(values, numFolds);
}

+ (id<JavaUtilSet>)modesWithJavaUtilCollection:(id<JavaUtilCollection>)values {
  return EduStanfordNlpUtilCollectionUtils_modesWithJavaUtilCollection_(values);
}

+ (id)modeWithJavaUtilCollection:(id<JavaUtilCollection>)values {
  return EduStanfordNlpUtilCollectionUtils_modeWithJavaUtilCollection_(values);
}

+ (id<JavaUtilSet>)transformAsSetWithJavaUtilCollection:(id<JavaUtilCollection>)original
                           withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)f {
  return EduStanfordNlpUtilCollectionUtils_transformAsSetWithJavaUtilCollection_withJavaUtilFunctionFunction_(original, f);
}

+ (id<JavaUtilList>)transformAsListWithJavaUtilCollection:(id<JavaUtilCollection>)original
                             withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)f {
  return EduStanfordNlpUtilCollectionUtils_transformAsListWithJavaUtilCollection_withJavaUtilFunctionFunction_(original, f);
}

+ (id<JavaUtilList>)filterAsListWithJavaUtilCollection:(id<JavaUtilCollection>)original
                         withJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)f {
  return EduStanfordNlpUtilCollectionUtils_filterAsListWithJavaUtilCollection_withJavaUtilFunctionPredicate_(original, f);
}

+ (id<JavaUtilList>)getAllWithJavaUtilMap:(id<JavaUtilMap>)map
                   withJavaUtilCollection:(id<JavaUtilCollection>)indices {
  return EduStanfordNlpUtilCollectionUtils_getAllWithJavaUtilMap_withJavaUtilCollection_(map, indices);
}

+ (jint)maxIndexWithJavaUtilList:(id<JavaUtilList>)list {
  return EduStanfordNlpUtilCollectionUtils_maxIndexWithJavaUtilList_(list);
}

+ (id<JavaUtilIterator>)concatIteratorsWithJavaUtilIteratorArray:(IOSObjectArray *)iterators {
  return EduStanfordNlpUtilCollectionUtils_concatIteratorsWithJavaUtilIteratorArray_(iterators);
}

+ (id<JavaUtilIterator>)iteratorFromEnumeratorWithJavaUtilEnumeration:(id<JavaUtilEnumeration>)lst_ {
  return EduStanfordNlpUtilCollectionUtils_iteratorFromEnumeratorWithJavaUtilEnumeration_(lst_);
}

+ (id<JavaLangIterable>)iterableFromEnumeratorWithJavaUtilEnumeration:(id<JavaUtilEnumeration>)lst {
  return EduStanfordNlpUtilCollectionUtils_iterableFromEnumeratorWithJavaUtilEnumeration_(lst);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 0, 1, -1, 2, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 0, 3, -1, 4, -1, -1 },
    { NULL, "[I", 0x9, 5, 6, -1, 7, -1, -1 },
    { NULL, "[D", 0x9, 8, 6, -1, 9, -1, -1 },
    { NULL, "LJavaUtilList;", 0x89, 10, 11, -1, 12, 13, -1 },
    { NULL, "LJavaUtilSet;", 0x89, 14, 11, -1, 15, 16, -1 },
    { NULL, "LJavaUtilSet;", 0x9, 17, 18, -1, 19, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x9, 20, 21, -1, 22, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x9, 23, 21, -1, 24, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x89, 23, 25, -1, 26, 27, -1 },
    { NULL, "LJavaUtilCollection;", 0x9, 28, 21, -1, 22, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x9, 29, 21, -1, 24, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x9, 30, 31, 32, 33, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x9, 30, 34, 32, 35, -1, -1 },
    { NULL, "V", 0x9, 30, 36, 37, 38, -1, -1 },
    { NULL, "V", 0x9, 30, 39, 37, 40, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x9, 41, 42, 43, 44, -1, -1 },
    { NULL, "Z", 0x9, 45, 46, -1, 47, -1, -1 },
    { NULL, "Z", 0x9, 48, 49, -1, 50, -1, -1 },
    { NULL, "I", 0x9, 51, 49, -1, 52, -1, -1 },
    { NULL, "I", 0x9, 51, 53, -1, 54, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x9, 55, 56, -1, 57, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x9, 55, 58, -1, 59, -1, -1 },
    { NULL, "LNSObject;", 0x9, 60, 61, -1, 62, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x9, 63, 56, -1, 57, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x9, 63, 58, -1, 59, -1, -1 },
    { NULL, "Z", 0x9, 64, 65, -1, 66, -1, -1 },
    { NULL, "LNSString;", 0x9, 67, 68, -1, 69, -1, -1 },
    { NULL, "I", 0x9, 70, 65, -1, 71, -1, -1 },
    { NULL, "LJavaUtilComparator;", 0x9, -1, -1, -1, 72, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 73, 74, -1, 75, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 73, 76, -1, 77, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 78, 74, -1, 79, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x9, 80, 74, -1, 81, -1, -1 },
    { NULL, "V", 0x9, 82, 83, -1, 84, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 85, 86, -1, 87, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 88, 89, -1, 90, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 91, 92, -1, 93, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 91, 94, -1, 95, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 96, 94, -1, 95, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 97, 94, -1, 98, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 99, 6, -1, 100, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x9, 101, 102, -1, 103, -1, -1 },
    { NULL, "Z", 0x9, 104, 21, -1, 105, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 106, 107, -1, 108, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x9, 109, 107, -1, 110, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x9, 111, 6, -1, 112, -1, -1 },
    { NULL, "LNSObject;", 0x9, 113, 6, -1, 114, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x9, 115, 102, -1, 116, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 117, 102, -1, 118, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 119, 120, -1, 121, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 122, 123, -1, 124, -1, -1 },
    { NULL, "I", 0x9, 125, 126, -1, 127, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x89, 128, 129, -1, 130, 131, -1 },
    { NULL, "LJavaUtilIterator;", 0x9, 132, 133, -1, 134, -1, -1 },
    { NULL, "LJavaLangIterable;", 0x9, 135, 133, -1, 136, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(asListWithIntArray:);
  methods[2].selector = @selector(asListWithDoubleArray:);
  methods[3].selector = @selector(asIntArrayWithJavaUtilCollection:);
  methods[4].selector = @selector(asDoubleArrayWithJavaUtilCollection:);
  methods[5].selector = @selector(makeListWithNSObjectArray:);
  methods[6].selector = @selector(asSetWithNSObjectArray:);
  methods[7].selector = @selector(intersectionWithJavaUtilSet:withJavaUtilSet:);
  methods[8].selector = @selector(union__WithJavaUtilCollection:withJavaUtilCollection:);
  methods[9].selector = @selector(unionAsSetWithJavaUtilCollection:withJavaUtilCollection:);
  methods[10].selector = @selector(unionAsSetWithJavaUtilCollectionArray:);
  methods[11].selector = @selector(diffWithJavaUtilCollection:withJavaUtilCollection:);
  methods[12].selector = @selector(diffAsSetWithJavaUtilCollection:withJavaUtilCollection:);
  methods[13].selector = @selector(loadCollectionWithNSString:withIOSClass:withEduStanfordNlpUtilCollectionFactory:);
  methods[14].selector = @selector(loadCollectionWithJavaIoFile:withIOSClass:withEduStanfordNlpUtilCollectionFactory:);
  methods[15].selector = @selector(loadCollectionWithNSString:withIOSClass:withJavaUtilCollection:);
  methods[16].selector = @selector(loadCollectionWithJavaIoFile:withIOSClass:withJavaUtilCollection:);
  methods[17].selector = @selector(getMapFromStringWithNSString:withIOSClass:withIOSClass:withEduStanfordNlpUtilMapFactory:);
  methods[18].selector = @selector(containsObjectWithJavaUtilCollection:withId:);
  methods[19].selector = @selector(removeObjectWithJavaUtilList:withId:);
  methods[20].selector = @selector(getIndexWithJavaUtilList:withId:);
  methods[21].selector = @selector(getIndexWithJavaUtilList:withId:withInt:);
  methods[22].selector = @selector(sampleWithoutReplacementWithJavaUtilCollection:withInt:);
  methods[23].selector = @selector(sampleWithoutReplacementWithJavaUtilCollection:withInt:withJavaUtilRandom:);
  methods[24].selector = @selector(sampleWithJavaUtilList:withJavaUtilRandom:);
  methods[25].selector = @selector(sampleWithReplacementWithJavaUtilCollection:withInt:);
  methods[26].selector = @selector(sampleWithReplacementWithJavaUtilCollection:withInt:withJavaUtilRandom:);
  methods[27].selector = @selector(isSubListWithJavaUtilList:withJavaUtilList:);
  methods[28].selector = @selector(toVerticalStringWithJavaUtilMap:);
  methods[29].selector = @selector(compareListsWithJavaUtilList:withJavaUtilList:);
  methods[30].selector = @selector(getListComparator);
  methods[31].selector = @selector(sortedWithJavaLangIterable:);
  methods[32].selector = @selector(sortedWithJavaLangIterable:withJavaUtilComparator:);
  methods[33].selector = @selector(toListWithJavaLangIterable:);
  methods[34].selector = @selector(toSetWithJavaLangIterable:);
  methods[35].selector = @selector(addAllWithJavaUtilCollection:withJavaLangIterable:);
  methods[36].selector = @selector(getNGramsWithJavaUtilList:withInt:withInt:);
  methods[37].selector = @selector(getPrefixesAndSuffixesWithJavaUtilList:withInt:withInt:withId:withBoolean:withBoolean:);
  methods[38].selector = @selector(mergeListWithJavaUtilList:withJavaUtilCollection:withJavaUtilFunctionFunction:withJavaUtilFunctionFunction:);
  methods[39].selector = @selector(mergeListWithJavaUtilList:withJavaUtilList:withJavaUtilFunctionFunction:);
  methods[40].selector = @selector(mergeListWithSortedMatchedWithJavaUtilList:withJavaUtilList:withJavaUtilFunctionFunction:);
  methods[41].selector = @selector(mergeListWithSortedMatchedPreAggregatedWithJavaUtilList:withJavaUtilList:withJavaUtilFunctionFunction:);
  methods[42].selector = @selector(flattenWithJavaUtilCollection:);
  methods[43].selector = @selector(uniqueNonhashableObjectsWithJavaUtilCollection:withJavaUtilFunctionFunction:);
  methods[44].selector = @selector(containsAnyWithJavaUtilCollection:withJavaUtilCollection:);
  methods[45].selector = @selector(partitionIntoFoldsWithJavaUtilList:withInt:);
  methods[46].selector = @selector(trainTestFoldsForCVWithJavaUtilList:withInt:);
  methods[47].selector = @selector(modesWithJavaUtilCollection:);
  methods[48].selector = @selector(modeWithJavaUtilCollection:);
  methods[49].selector = @selector(transformAsSetWithJavaUtilCollection:withJavaUtilFunctionFunction:);
  methods[50].selector = @selector(transformAsListWithJavaUtilCollection:withJavaUtilFunctionFunction:);
  methods[51].selector = @selector(filterAsListWithJavaUtilCollection:withJavaUtilFunctionPredicate:);
  methods[52].selector = @selector(getAllWithJavaUtilMap:withJavaUtilCollection:);
  methods[53].selector = @selector(maxIndexWithJavaUtilList:);
  methods[54].selector = @selector(concatIteratorsWithJavaUtilIteratorArray:);
  methods[55].selector = @selector(iteratorFromEnumeratorWithJavaUtilEnumeration:);
  methods[56].selector = @selector(iterableFromEnumeratorWithJavaUtilEnumeration:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "asList", "[I", "([I)Ljava/util/List<Ljava/lang/Integer;>;", "[D", "([D)Ljava/util/List<Ljava/lang/Double;>;", "asIntArray", "LJavaUtilCollection;", "(Ljava/util/Collection<Ljava/lang/Integer;>;)[I", "asDoubleArray", "(Ljava/util/Collection<Ljava/lang/Double;>;)[D", "makeList", "[LNSObject;", "<T:Ljava/lang/Object;>([TT;)Ljava/util/List<TT;>;", (void *)&EduStanfordNlpUtilCollectionUtils__Annotations$0, "asSet", "<T:Ljava/lang/Object;>([TT;)Ljava/util/Set<TT;>;", (void *)&EduStanfordNlpUtilCollectionUtils__Annotations$1, "intersection", "LJavaUtilSet;LJavaUtilSet;", "<T:Ljava/lang/Object;>(Ljava/util/Set<TT;>;Ljava/util/Set<TT;>;)Ljava/util/Set<TT;>;", "union", "LJavaUtilCollection;LJavaUtilCollection;", "<T:Ljava/lang/Object;>(Ljava/util/Collection<TT;>;Ljava/util/Collection<TT;>;)Ljava/util/Collection<TT;>;", "unionAsSet", "<T:Ljava/lang/Object;>(Ljava/util/Collection<TT;>;Ljava/util/Collection<TT;>;)Ljava/util/Set<TT;>;", "[LJavaUtilCollection;", "<T:Ljava/lang/Object;>([Ljava/util/Collection<TT;>;)Ljava/util/Set<TT;>;", (void *)&EduStanfordNlpUtilCollectionUtils__Annotations$2, "diff", "diffAsSet", "loadCollection", "LNSString;LIOSClass;LEduStanfordNlpUtilCollectionFactory;", "LJavaLangException;", "<T:Ljava/lang/Object;>(Ljava/lang/String;Ljava/lang/Class<TT;>;Ledu/stanford/nlp/util/CollectionFactory<TT;>;)Ljava/util/Collection<TT;>;", "LJavaIoFile;LIOSClass;LEduStanfordNlpUtilCollectionFactory;", "<T:Ljava/lang/Object;>(Ljava/io/File;Ljava/lang/Class<TT;>;Ledu/stanford/nlp/util/CollectionFactory<TT;>;)Ljava/util/Collection<TT;>;", "LNSString;LIOSClass;LJavaUtilCollection;", "LJavaLangNoSuchMethodException;LJavaLangInstantiationException;LJavaLangIllegalAccessException;LJavaLangReflectInvocationTargetException;LJavaIoIOException;", "<T:Ljava/lang/Object;>(Ljava/lang/String;Ljava/lang/Class<TT;>;Ljava/util/Collection<TT;>;)V", "LJavaIoFile;LIOSClass;LJavaUtilCollection;", "<T:Ljava/lang/Object;>(Ljava/io/File;Ljava/lang/Class<TT;>;Ljava/util/Collection<TT;>;)V", "getMapFromString", "LNSString;LIOSClass;LIOSClass;LEduStanfordNlpUtilMapFactory;", "LJavaLangClassNotFoundException;LJavaLangNoSuchMethodException;LJavaLangIllegalAccessException;LJavaLangReflectInvocationTargetException;LJavaLangInstantiationException;", "<K:Ljava/lang/Object;V:Ljava/lang/Object;>(Ljava/lang/String;Ljava/lang/Class<TK;>;Ljava/lang/Class<TV;>;Ledu/stanford/nlp/util/MapFactory<TK;TV;>;)Ljava/util/Map<TK;TV;>;", "containsObject", "LJavaUtilCollection;LNSObject;", "<T:Ljava/lang/Object;>(Ljava/util/Collection<TT;>;TT;)Z", "removeObject", "LJavaUtilList;LNSObject;", "<T:Ljava/lang/Object;>(Ljava/util/List<TT;>;TT;)Z", "getIndex", "<T:Ljava/lang/Object;>(Ljava/util/List<TT;>;TT;)I", "LJavaUtilList;LNSObject;I", "<T:Ljava/lang/Object;>(Ljava/util/List<TT;>;TT;I)I", "sampleWithoutReplacement", "LJavaUtilCollection;I", "<E:Ljava/lang/Object;>(Ljava/util/Collection<TE;>;I)Ljava/util/Collection<TE;>;", "LJavaUtilCollection;ILJavaUtilRandom;", "<E:Ljava/lang/Object;>(Ljava/util/Collection<TE;>;ILjava/util/Random;)Ljava/util/Collection<TE;>;", "sample", "LJavaUtilList;LJavaUtilRandom;", "<E:Ljava/lang/Object;>(Ljava/util/List<TE;>;Ljava/util/Random;)TE;", "sampleWithReplacement", "isSubList", "LJavaUtilList;LJavaUtilList;", "<T:Ljava/lang/Object;>(Ljava/util/List<TT;>;Ljava/util/List<-TT;>;)Z", "toVerticalString", "LJavaUtilMap;", "<K:Ljava/lang/Object;V:Ljava/lang/Object;>(Ljava/util/Map<TK;TV;>;)Ljava/lang/String;", "compareLists", "<T::Ljava/lang/Comparable<TT;>;>(Ljava/util/List<TT;>;Ljava/util/List<TT;>;)I", "<C::Ljava/lang/Comparable<TC;>;>()Ljava/util/Comparator<Ljava/util/List<TC;>;>;", "sorted", "LJavaLangIterable;", "<T::Ljava/lang/Comparable<TT;>;>(Ljava/lang/Iterable<TT;>;)Ljava/util/List<TT;>;", "LJavaLangIterable;LJavaUtilComparator;", "<T:Ljava/lang/Object;>(Ljava/lang/Iterable<TT;>;Ljava/util/Comparator<TT;>;)Ljava/util/List<TT;>;", "toList", "<T:Ljava/lang/Object;>(Ljava/lang/Iterable<TT;>;)Ljava/util/List<TT;>;", "toSet", "<T:Ljava/lang/Object;>(Ljava/lang/Iterable<TT;>;)Ljava/util/Set<TT;>;", "addAll", "LJavaUtilCollection;LJavaLangIterable;", "<T:Ljava/lang/Object;>(Ljava/util/Collection<TT;>;Ljava/lang/Iterable<+TT;>;)V", "getNGrams", "LJavaUtilList;II", "<T:Ljava/lang/Object;>(Ljava/util/List<TT;>;II)Ljava/util/List<Ljava/util/List<TT;>;>;", "getPrefixesAndSuffixes", "LJavaUtilList;IILNSObject;ZZ", "<T:Ljava/lang/Object;>(Ljava/util/List<TT;>;IITT;ZZ)Ljava/util/List<Ljava/util/List<TT;>;>;", "mergeList", "LJavaUtilList;LJavaUtilCollection;LJavaUtilFunctionFunction;LJavaUtilFunctionFunction;", "<T:Ljava/lang/Object;M:Ljava/lang/Object;>(Ljava/util/List<+TT;>;Ljava/util/Collection<TM;>;Ljava/util/function/Function<TM;Ledu/stanford/nlp/util/Interval<Ljava/lang/Integer;>;>;Ljava/util/function/Function<Ljava/util/List<+TT;>;TT;>;)Ljava/util/List<TT;>;", "LJavaUtilList;LJavaUtilList;LJavaUtilFunctionFunction;", "<T:Ljava/lang/Object;>(Ljava/util/List<+TT;>;Ljava/util/List<+Ledu/stanford/nlp/util/HasInterval<Ljava/lang/Integer;>;>;Ljava/util/function/Function<Ljava/util/List<+TT;>;TT;>;)Ljava/util/List<TT;>;", "mergeListWithSortedMatched", "mergeListWithSortedMatchedPreAggregated", "<T:Ljava/lang/Object;>(Ljava/util/List<+TT;>;Ljava/util/List<+TT;>;Ljava/util/function/Function<TT;Ledu/stanford/nlp/util/Interval<Ljava/lang/Integer;>;>;)Ljava/util/List<TT;>;", "flatten", "<T:Ljava/lang/Object;>(Ljava/util/Collection<Ljava/util/List<TT;>;>;)Ljava/util/List<TT;>;", "uniqueNonhashableObjects", "LJavaUtilCollection;LJavaUtilFunctionFunction;", "<ObjType:Ljava/lang/Object;Hashable:Ljava/lang/Object;>(Ljava/util/Collection<TObjType;>;Ljava/util/function/Function<TObjType;THashable;>;)Ljava/util/Collection<TObjType;>;", "containsAny", "<T:Ljava/lang/Object;>(Ljava/util/Collection<TT;>;Ljava/util/Collection<TT;>;)Z", "partitionIntoFolds", "LJavaUtilList;I", "<T:Ljava/lang/Object;>(Ljava/util/List<TT;>;I)Ljava/util/List<Ljava/util/List<TT;>;>;", "trainTestFoldsForCV", "<T:Ljava/lang/Object;>(Ljava/util/List<TT;>;I)Ljava/util/Collection<Ledu/stanford/nlp/util/Pair<Ljava/util/Collection<TT;>;Ljava/util/Collection<TT;>;>;>;", "modes", "<T:Ljava/lang/Object;>(Ljava/util/Collection<TT;>;)Ljava/util/Set<TT;>;", "mode", "<T:Ljava/lang/Object;>(Ljava/util/Collection<TT;>;)TT;", "transformAsSet", "<T1:Ljava/lang/Object;T2:Ljava/lang/Object;>(Ljava/util/Collection<+TT1;>;Ljava/util/function/Function<TT1;+TT2;>;)Ljava/util/Set<TT2;>;", "transformAsList", "<T1:Ljava/lang/Object;T2:Ljava/lang/Object;>(Ljava/util/Collection<+TT1;>;Ljava/util/function/Function<TT1;+TT2;>;)Ljava/util/List<TT2;>;", "filterAsList", "LJavaUtilCollection;LJavaUtilFunctionPredicate;", "<T:Ljava/lang/Object;>(Ljava/util/Collection<+TT;>;Ljava/util/function/Predicate<-TT;>;)Ljava/util/List<TT;>;", "getAll", "LJavaUtilMap;LJavaUtilCollection;", "<T:Ljava/lang/Object;V:Ljava/lang/Object;>(Ljava/util/Map<TT;TV;>;Ljava/util/Collection<TT;>;)Ljava/util/List<TV;>;", "maxIndex", "LJavaUtilList;", "<T::Ljava/lang/Comparable<-TT;>;>(Ljava/util/List<TT;>;)I", "concatIterators", "[LJavaUtilIterator;", "<E:Ljava/lang/Object;>([Ljava/util/Iterator<TE;>;)Ljava/util/Iterator<TE;>;", (void *)&EduStanfordNlpUtilCollectionUtils__Annotations$3, "iteratorFromEnumerator", "LJavaUtilEnumeration;", "<E:Ljava/lang/Object;>(Ljava/util/Enumeration<TE;>;)Ljava/util/Iterator<TE;>;", "iterableFromEnumerator", "<E:Ljava/lang/Object;>(Ljava/util/Enumeration<TE;>;)Ljava/lang/Iterable<TE;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilCollectionUtils = { "CollectionUtils", "edu.stanford.nlp.util", ptrTable, methods, NULL, 7, 0x1, 57, 0, -1, -1, -1, -1, -1 };
  return &_EduStanfordNlpUtilCollectionUtils;
}

@end

void EduStanfordNlpUtilCollectionUtils_init(EduStanfordNlpUtilCollectionUtils *self) {
  NSObject_init(self);
}

EduStanfordNlpUtilCollectionUtils *new_EduStanfordNlpUtilCollectionUtils_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilCollectionUtils, init)
}

EduStanfordNlpUtilCollectionUtils *create_EduStanfordNlpUtilCollectionUtils_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilCollectionUtils, init)
}

id<JavaUtilList> EduStanfordNlpUtilCollectionUtils_asListWithIntArray_(IOSIntArray *a) {
  EduStanfordNlpUtilCollectionUtils_initialize();
  id<JavaUtilList> result = new_JavaUtilArrayList_initWithInt_(((IOSIntArray *) nil_chk(a))->size_);
  {
    IOSIntArray *a__ = a;
    jint const *b__ = a__->buffer_;
    jint const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jint j = *b__++;
      [result addWithId:JavaLangInteger_valueOfWithInt_(j)];
    }
  }
  return result;
}

id<JavaUtilList> EduStanfordNlpUtilCollectionUtils_asListWithDoubleArray_(IOSDoubleArray *a) {
  EduStanfordNlpUtilCollectionUtils_initialize();
  id<JavaUtilList> result = new_JavaUtilArrayList_initWithInt_(((IOSDoubleArray *) nil_chk(a))->size_);
  {
    IOSDoubleArray *a__ = a;
    jdouble const *b__ = a__->buffer_;
    jdouble const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jdouble v = *b__++;
      [result addWithId:new_JavaLangDouble_initWithDouble_(v)];
    }
  }
  return result;
}

IOSIntArray *EduStanfordNlpUtilCollectionUtils_asIntArrayWithJavaUtilCollection_(id<JavaUtilCollection> coll) {
  EduStanfordNlpUtilCollectionUtils_initialize();
  IOSIntArray *result = [IOSIntArray newArrayWithLength:[((id<JavaUtilCollection>) nil_chk(coll)) size]];
  jint index = 0;
  for (JavaLangInteger * __strong element in coll) {
    *IOSIntArray_GetRef(result, index) = [((JavaLangInteger *) nil_chk(element)) intValue];
    index++;
  }
  return result;
}

IOSDoubleArray *EduStanfordNlpUtilCollectionUtils_asDoubleArrayWithJavaUtilCollection_(id<JavaUtilCollection> coll) {
  EduStanfordNlpUtilCollectionUtils_initialize();
  IOSDoubleArray *result = [IOSDoubleArray newArrayWithLength:[((id<JavaUtilCollection>) nil_chk(coll)) size]];
  jint index = 0;
  for (JavaLangDouble * __strong element in coll) {
    *IOSDoubleArray_GetRef(result, index) = [((JavaLangDouble *) nil_chk(element)) doubleValue];
    index++;
  }
  return result;
}

id<JavaUtilList> EduStanfordNlpUtilCollectionUtils_makeListWithNSObjectArray_(IOSObjectArray *items) {
  EduStanfordNlpUtilCollectionUtils_initialize();
  return new_JavaUtilArrayList_initWithJavaUtilCollection_(JavaUtilArrays_asListWithNSObjectArray_(items));
}

id<JavaUtilSet> EduStanfordNlpUtilCollectionUtils_asSetWithNSObjectArray_(IOSObjectArray *o) {
  EduStanfordNlpUtilCollectionUtils_initialize();
  return EduStanfordNlpUtilGenerics_newHashSetWithJavaUtilCollection_(JavaUtilArrays_asListWithNSObjectArray_(o));
}

id<JavaUtilSet> EduStanfordNlpUtilCollectionUtils_intersectionWithJavaUtilSet_withJavaUtilSet_(id<JavaUtilSet> set1, id<JavaUtilSet> set2) {
  EduStanfordNlpUtilCollectionUtils_initialize();
  id<JavaUtilSet> intersect = EduStanfordNlpUtilGenerics_newHashSet();
  for (id __strong t in nil_chk(set1)) {
    if ([((id<JavaUtilSet>) nil_chk(set2)) containsWithId:t]) {
      [((id<JavaUtilSet>) nil_chk(intersect)) addWithId:t];
    }
  }
  return intersect;
}

id<JavaUtilCollection> EduStanfordNlpUtilCollectionUtils_union__WithJavaUtilCollection_withJavaUtilCollection_(id<JavaUtilCollection> set1, id<JavaUtilCollection> set2) {
  EduStanfordNlpUtilCollectionUtils_initialize();
  id<JavaUtilCollection> union_ = new_JavaUtilArrayList_init();
  for (id __strong t in nil_chk(set1)) {
    [union_ addWithId:t];
  }
  for (id __strong t in nil_chk(set2)) {
    [union_ addWithId:t];
  }
  return union_;
}

id<JavaUtilSet> EduStanfordNlpUtilCollectionUtils_unionAsSetWithJavaUtilCollection_withJavaUtilCollection_(id<JavaUtilCollection> set1, id<JavaUtilCollection> set2) {
  EduStanfordNlpUtilCollectionUtils_initialize();
  id<JavaUtilSet> union_ = EduStanfordNlpUtilGenerics_newHashSet();
  for (id __strong t in nil_chk(set1)) {
    [((id<JavaUtilSet>) nil_chk(union_)) addWithId:t];
  }
  for (id __strong t in nil_chk(set2)) {
    [((id<JavaUtilSet>) nil_chk(union_)) addWithId:t];
  }
  return union_;
}

id<JavaUtilSet> EduStanfordNlpUtilCollectionUtils_unionAsSetWithJavaUtilCollectionArray_(IOSObjectArray *sets) {
  EduStanfordNlpUtilCollectionUtils_initialize();
  id<JavaUtilSet> union_ = EduStanfordNlpUtilGenerics_newHashSet();
  {
    IOSObjectArray *a__ = sets;
    id<JavaUtilCollection> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id<JavaUtilCollection> const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id<JavaUtilCollection> set = *b__++;
      for (id __strong t in nil_chk(set)) {
        [((id<JavaUtilSet>) nil_chk(union_)) addWithId:t];
      }
    }
  }
  return union_;
}

id<JavaUtilCollection> EduStanfordNlpUtilCollectionUtils_diffWithJavaUtilCollection_withJavaUtilCollection_(id<JavaUtilCollection> list1, id<JavaUtilCollection> list2) {
  EduStanfordNlpUtilCollectionUtils_initialize();
  id<JavaUtilCollection> diff = new_JavaUtilArrayList_init();
  for (id __strong t in nil_chk(list1)) {
    if (![((id<JavaUtilCollection>) nil_chk(list2)) containsWithId:t]) {
      [diff addWithId:t];
    }
  }
  return diff;
}

id<JavaUtilSet> EduStanfordNlpUtilCollectionUtils_diffAsSetWithJavaUtilCollection_withJavaUtilCollection_(id<JavaUtilCollection> list1, id<JavaUtilCollection> list2) {
  EduStanfordNlpUtilCollectionUtils_initialize();
  id<JavaUtilSet> diff = new_JavaUtilHashSet_init();
  for (id __strong t in nil_chk(list1)) {
    if (![((id<JavaUtilCollection>) nil_chk(list2)) containsWithId:t]) {
      [diff addWithId:t];
    }
  }
  return diff;
}

id<JavaUtilCollection> EduStanfordNlpUtilCollectionUtils_loadCollectionWithNSString_withIOSClass_withEduStanfordNlpUtilCollectionFactory_(NSString *filename, IOSClass *c, EduStanfordNlpUtilCollectionFactory *cf) {
  EduStanfordNlpUtilCollectionUtils_initialize();
  return EduStanfordNlpUtilCollectionUtils_loadCollectionWithJavaIoFile_withIOSClass_withEduStanfordNlpUtilCollectionFactory_(new_JavaIoFile_initWithNSString_(filename), c, cf);
}

id<JavaUtilCollection> EduStanfordNlpUtilCollectionUtils_loadCollectionWithJavaIoFile_withIOSClass_withEduStanfordNlpUtilCollectionFactory_(JavaIoFile *file, IOSClass *c, EduStanfordNlpUtilCollectionFactory *cf) {
  EduStanfordNlpUtilCollectionUtils_initialize();
  JavaLangReflectConstructor *m = [((IOSClass *) nil_chk(c)) getConstructor:[IOSObjectArray newArrayWithObjects:(id[]){ NSString_class_() } count:1 type:IOSClass_class_()]];
  id<JavaUtilCollection> result = [((EduStanfordNlpUtilCollectionFactory *) nil_chk(cf)) newCollection];
  JavaIoBufferedReader *in = new_JavaIoBufferedReader_initWithJavaIoReader_(new_JavaIoFileReader_initWithJavaIoFile_(file));
  NSString *line = [in readLine];
  while (line != nil && ((jint) [line length]) > 0) {
    @try {
      id o = [((JavaLangReflectConstructor *) nil_chk(m)) newInstanceWithNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ line } count:1 type:NSObject_class_()]];
      [((id<JavaUtilCollection>) nil_chk(result)) addWithId:o];
    }
    @catch (JavaLangException *e) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$", @"Couldn't build object from line: ", line)];
      [((JavaLangException *) nil_chk(e)) printStackTrace];
    }
    line = [in readLine];
  }
  [in close];
  return result;
}

void EduStanfordNlpUtilCollectionUtils_loadCollectionWithNSString_withIOSClass_withJavaUtilCollection_(NSString *fileName, IOSClass *itemClass, id<JavaUtilCollection> collection) {
  EduStanfordNlpUtilCollectionUtils_initialize();
  EduStanfordNlpUtilCollectionUtils_loadCollectionWithJavaIoFile_withIOSClass_withJavaUtilCollection_(new_JavaIoFile_initWithNSString_(fileName), itemClass, collection);
}

void EduStanfordNlpUtilCollectionUtils_loadCollectionWithJavaIoFile_withIOSClass_withJavaUtilCollection_(JavaIoFile *file, IOSClass *itemClass, id<JavaUtilCollection> collection) {
  EduStanfordNlpUtilCollectionUtils_initialize();
  JavaLangReflectConstructor *itemConstructor = [((IOSClass *) nil_chk(itemClass)) getConstructor:[IOSObjectArray newArrayWithObjects:(id[]){ NSString_class_() } count:1 type:IOSClass_class_()]];
  JavaIoBufferedReader *in = new_JavaIoBufferedReader_initWithJavaIoReader_(new_JavaIoFileReader_initWithJavaIoFile_(file));
  NSString *line = [in readLine];
  while (line != nil && ((jint) [line length]) > 0) {
    id t = [((JavaLangReflectConstructor *) nil_chk(itemConstructor)) newInstanceWithNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ line } count:1 type:NSObject_class_()]];
    [((id<JavaUtilCollection>) nil_chk(collection)) addWithId:t];
    line = [in readLine];
  }
  [in close];
}

id<JavaUtilMap> EduStanfordNlpUtilCollectionUtils_getMapFromStringWithNSString_withIOSClass_withIOSClass_withEduStanfordNlpUtilMapFactory_(NSString *s, IOSClass *keyClass, IOSClass *valueClass, EduStanfordNlpUtilMapFactory *mapFactory) {
  EduStanfordNlpUtilCollectionUtils_initialize();
  JavaLangReflectConstructor *keyC = [((IOSClass *) nil_chk(keyClass)) getConstructor:[IOSObjectArray newArrayWithObjects:(id[]){ NSString_class_() } count:1 type:IOSClass_class_()]];
  JavaLangReflectConstructor *valueC = [((IOSClass *) nil_chk(valueClass)) getConstructor:[IOSObjectArray newArrayWithObjects:(id[]){ NSString_class_() } count:1 type:IOSClass_class_()]];
  if ([((NSString *) nil_chk(s)) charAtWithInt:0] != '{') @throw new_JavaLangRuntimeException_initWithNSString_(@"");
  s = [s substring:1];
  IOSObjectArray *fields = [((NSString *) nil_chk(s)) split:@"\\s+"];
  id<JavaUtilMap> m = [((EduStanfordNlpUtilMapFactory *) nil_chk(mapFactory)) newMap];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(fields))->size_; i++) {
    (void) IOSObjectArray_Set(fields, i, [((NSString *) nil_chk(IOSObjectArray_Get(fields, i))) substring:0 endIndex:((jint) [((NSString *) nil_chk(IOSObjectArray_Get(fields, i))) length]) - 1]);
    IOSObjectArray *a = [((NSString *) nil_chk(IOSObjectArray_Get(fields, i))) split:@"="];
    id key = [((JavaLangReflectConstructor *) nil_chk(keyC)) newInstanceWithNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ IOSObjectArray_Get(nil_chk(a), 0) } count:1 type:NSObject_class_()]];
    id value;
    if (a->size_ > 1) {
      value = [((JavaLangReflectConstructor *) nil_chk(valueC)) newInstanceWithNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ IOSObjectArray_Get(a, 1) } count:1 type:NSObject_class_()]];
    }
    else {
      value = [((JavaLangReflectConstructor *) nil_chk(valueC)) newInstanceWithNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"" } count:1 type:NSObject_class_()]];
    }
    (void) [((id<JavaUtilMap>) nil_chk(m)) putWithId:key withId:value];
  }
  return m;
}

jboolean EduStanfordNlpUtilCollectionUtils_containsObjectWithJavaUtilCollection_withId_(id<JavaUtilCollection> c, id o) {
  EduStanfordNlpUtilCollectionUtils_initialize();
  for (id __strong o1 in nil_chk(c)) {
    if (o == o1) {
      return true;
    }
  }
  return false;
}

jboolean EduStanfordNlpUtilCollectionUtils_removeObjectWithJavaUtilList_withId_(id<JavaUtilList> l, id o) {
  EduStanfordNlpUtilCollectionUtils_initialize();
  jint i = 0;
  for (id __strong o1 in nil_chk(l)) {
    if (o == o1) {
      (void) [l removeWithInt:i];
      return true;
    }
    else i++;
  }
  return false;
}

jint EduStanfordNlpUtilCollectionUtils_getIndexWithJavaUtilList_withId_(id<JavaUtilList> l, id o) {
  EduStanfordNlpUtilCollectionUtils_initialize();
  jint i = 0;
  for (id __strong o1 in nil_chk(l)) {
    if (o == o1) return i;
    else i++;
  }
  return -1;
}

jint EduStanfordNlpUtilCollectionUtils_getIndexWithJavaUtilList_withId_withInt_(id<JavaUtilList> l, id o, jint fromIndex) {
  EduStanfordNlpUtilCollectionUtils_initialize();
  jint i = -1;
  for (id __strong o1 in nil_chk(l)) {
    i++;
    if (i < fromIndex) {
      continue;
    }
    if ([nil_chk(o) isEqual:o1]) {
      return i;
    }
  }
  return -1;
}

id<JavaUtilCollection> EduStanfordNlpUtilCollectionUtils_sampleWithoutReplacementWithJavaUtilCollection_withInt_(id<JavaUtilCollection> c, jint n) {
  EduStanfordNlpUtilCollectionUtils_initialize();
  return EduStanfordNlpUtilCollectionUtils_sampleWithoutReplacementWithJavaUtilCollection_withInt_withJavaUtilRandom_(c, n, new_JavaUtilRandom_init());
}

id<JavaUtilCollection> EduStanfordNlpUtilCollectionUtils_sampleWithoutReplacementWithJavaUtilCollection_withInt_withJavaUtilRandom_(id<JavaUtilCollection> c, jint n, JavaUtilRandom *r) {
  EduStanfordNlpUtilCollectionUtils_initialize();
  if (n < 0) @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"n < 0: ", n));
  if (n > [((id<JavaUtilCollection>) nil_chk(c)) size]) @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$I", @"n > size of collection: ", n, @", ", [c size]));
  id<JavaUtilList> copy_ = new_JavaUtilArrayList_initWithInt_([c size]);
  [copy_ addAllWithJavaUtilCollection:c];
  id<JavaUtilCollection> result = new_JavaUtilArrayList_initWithInt_(n);
  for (jint k = 0; k < n; k++) {
    jdouble d = [((JavaUtilRandom *) nil_chk(r)) nextDouble];
    jint x = JreFpToInt((d * [copy_ size]));
    [result addWithId:[copy_ removeWithInt:x]];
  }
  return result;
}

id EduStanfordNlpUtilCollectionUtils_sampleWithJavaUtilList_withJavaUtilRandom_(id<JavaUtilList> l, JavaUtilRandom *r) {
  EduStanfordNlpUtilCollectionUtils_initialize();
  jint i = [((JavaUtilRandom *) nil_chk(r)) nextIntWithInt:[((id<JavaUtilList>) nil_chk(l)) size]];
  return [l getWithInt:i];
}

id<JavaUtilCollection> EduStanfordNlpUtilCollectionUtils_sampleWithReplacementWithJavaUtilCollection_withInt_(id<JavaUtilCollection> c, jint n) {
  EduStanfordNlpUtilCollectionUtils_initialize();
  return EduStanfordNlpUtilCollectionUtils_sampleWithReplacementWithJavaUtilCollection_withInt_withJavaUtilRandom_(c, n, new_JavaUtilRandom_init());
}

id<JavaUtilCollection> EduStanfordNlpUtilCollectionUtils_sampleWithReplacementWithJavaUtilCollection_withInt_withJavaUtilRandom_(id<JavaUtilCollection> c, jint n, JavaUtilRandom *r) {
  EduStanfordNlpUtilCollectionUtils_initialize();
  if (n < 0) @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"n < 0: ", n));
  id<JavaUtilList> copy_ = new_JavaUtilArrayList_initWithInt_([((id<JavaUtilCollection>) nil_chk(c)) size]);
  [copy_ addAllWithJavaUtilCollection:c];
  id<JavaUtilCollection> result = new_JavaUtilArrayList_initWithInt_(n);
  for (jint k = 0; k < n; k++) {
    jdouble d = [((JavaUtilRandom *) nil_chk(r)) nextDouble];
    jint x = JreFpToInt((d * [copy_ size]));
    [result addWithId:[copy_ getWithInt:x]];
  }
  return result;
}

jboolean EduStanfordNlpUtilCollectionUtils_isSubListWithJavaUtilList_withJavaUtilList_(id<JavaUtilList> l1, id<JavaUtilList> l) {
  EduStanfordNlpUtilCollectionUtils_initialize();
  id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk(l)) iterator];
  for (id __strong o1 in nil_chk(l1)) {
    if (![((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      return false;
    }
    id o = [it next];
    while ((o == nil && !(o1 == nil)) || (o != nil && ![o isEqual:o1])) {
      if (![it hasNext]) {
        return false;
      }
      o = [it next];
    }
  }
  return true;
}

NSString *EduStanfordNlpUtilCollectionUtils_toVerticalStringWithJavaUtilMap_(id<JavaUtilMap> m) {
  EduStanfordNlpUtilCollectionUtils_initialize();
  JavaLangStringBuilder *b = new_JavaLangStringBuilder_init();
  id<JavaUtilSet> entries = [((id<JavaUtilMap>) nil_chk(m)) entrySet];
  for (id<JavaUtilMap_Entry> __strong e in nil_chk(entries)) {
    (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([b appendWithId:[((id<JavaUtilMap_Entry>) nil_chk(e)) getKey]])) appendWithChar:'='])) appendWithId:[e getValue]])) appendWithChar:0x000a];
  }
  return [b description];
}

jint EduStanfordNlpUtilCollectionUtils_compareListsWithJavaUtilList_withJavaUtilList_(id<JavaUtilList> list1, id<JavaUtilList> list2) {
  EduStanfordNlpUtilCollectionUtils_initialize();
  if (list1 == nil && list2 == nil) return 0;
  if (list1 == nil || list2 == nil) {
    @throw new_JavaLangIllegalArgumentException_init();
  }
  jint size1 = [list1 size];
  jint size2 = [list2 size];
  jint size = JavaLangMath_minWithInt_withInt_(size1, size2);
  for (jint i = 0; i < size; i++) {
    jint c = [((id<JavaLangComparable>) nil_chk([list1 getWithInt:i])) compareToWithId:[list2 getWithInt:i]];
    if (c != 0) return c;
  }
  if (size1 < size2) return -1;
  if (size1 > size2) return 1;
  return 0;
}

id<JavaUtilComparator> EduStanfordNlpUtilCollectionUtils_getListComparator() {
  EduStanfordNlpUtilCollectionUtils_initialize();
  return JreLoadStatic(EduStanfordNlpUtilCollectionUtils_$Lambda$1, instance);
}

id<JavaUtilList> EduStanfordNlpUtilCollectionUtils_sortedWithJavaLangIterable_(id<JavaLangIterable> items) {
  EduStanfordNlpUtilCollectionUtils_initialize();
  id<JavaUtilList> result = EduStanfordNlpUtilCollectionUtils_toListWithJavaLangIterable_(items);
  JavaUtilCollections_sortWithJavaUtilList_(result);
  return result;
}

id<JavaUtilList> EduStanfordNlpUtilCollectionUtils_sortedWithJavaLangIterable_withJavaUtilComparator_(id<JavaLangIterable> items, id<JavaUtilComparator> comparator) {
  EduStanfordNlpUtilCollectionUtils_initialize();
  id<JavaUtilList> result = EduStanfordNlpUtilCollectionUtils_toListWithJavaLangIterable_(items);
  JavaUtilCollections_sortWithJavaUtilList_withJavaUtilComparator_(result, comparator);
  return result;
}

id<JavaUtilList> EduStanfordNlpUtilCollectionUtils_toListWithJavaLangIterable_(id<JavaLangIterable> items) {
  EduStanfordNlpUtilCollectionUtils_initialize();
  id<JavaUtilList> list = new_JavaUtilArrayList_init();
  EduStanfordNlpUtilCollectionUtils_addAllWithJavaUtilCollection_withJavaLangIterable_(list, items);
  return list;
}

id<JavaUtilSet> EduStanfordNlpUtilCollectionUtils_toSetWithJavaLangIterable_(id<JavaLangIterable> items) {
  EduStanfordNlpUtilCollectionUtils_initialize();
  id<JavaUtilSet> set = EduStanfordNlpUtilGenerics_newHashSet();
  EduStanfordNlpUtilCollectionUtils_addAllWithJavaUtilCollection_withJavaLangIterable_(set, items);
  return set;
}

void EduStanfordNlpUtilCollectionUtils_addAllWithJavaUtilCollection_withJavaLangIterable_(id<JavaUtilCollection> collection, id<JavaLangIterable> items) {
  EduStanfordNlpUtilCollectionUtils_initialize();
  for (id __strong item in nil_chk(items)) {
    [((id<JavaUtilCollection>) nil_chk(collection)) addWithId:item];
  }
}

id<JavaUtilList> EduStanfordNlpUtilCollectionUtils_getNGramsWithJavaUtilList_withInt_withInt_(id<JavaUtilList> items, jint minSize, jint maxSize) {
  EduStanfordNlpUtilCollectionUtils_initialize();
  id<JavaUtilList> ngrams = new_JavaUtilArrayList_init();
  jint listSize = [((id<JavaUtilList>) nil_chk(items)) size];
  for (jint i = 0; i < listSize; ++i) {
    for (jint ngramSize = minSize; ngramSize <= maxSize; ++ngramSize) {
      if (i + ngramSize <= listSize) {
        id<JavaUtilList> ngram = new_JavaUtilArrayList_init();
        for (jint j = i; j < i + ngramSize; ++j) {
          [ngram addWithId:[items getWithInt:j]];
        }
        [ngrams addWithId:ngram];
      }
    }
  }
  return ngrams;
}

id<JavaUtilList> EduStanfordNlpUtilCollectionUtils_getPrefixesAndSuffixesWithJavaUtilList_withInt_withInt_withId_withBoolean_withBoolean_(id<JavaUtilList> items, jint minSize, jint maxSize, id paddingSymbol, jboolean includePrefixes, jboolean includeSuffixes) {
  EduStanfordNlpUtilCollectionUtils_initialize();
  JreAssert((minSize > 0), (@"edu/stanford/nlp/util/CollectionUtils.java:621 condition failed: assert minSize > 0;"));
  JreAssert((maxSize >= minSize), (@"edu/stanford/nlp/util/CollectionUtils.java:622 condition failed: assert maxSize >= minSize;"));
  JreAssert((includePrefixes || includeSuffixes), (@"edu/stanford/nlp/util/CollectionUtils.java:623 condition failed: assert includePrefixes || includeSuffixes;"));
  id<JavaUtilList> prefixesAndSuffixes = new_JavaUtilArrayList_init();
  for (jint span = minSize - 1; span < maxSize; span++) {
    id<JavaUtilList> indices = new_JavaUtilArrayList_init();
    id<JavaUtilList> seq = new_JavaUtilArrayList_init();
    if (includePrefixes) {
      for (jint i = 0; i <= span; i++) {
        [indices addWithId:JavaLangInteger_valueOfWithInt_(i)];
      }
    }
    if (includeSuffixes) {
      jint maxIndex = [((id<JavaUtilList>) nil_chk(items)) size] - 1;
      for (jint i = span; i >= 0; i--) {
        [indices addWithId:JavaLangInteger_valueOfWithInt_(maxIndex - i)];
      }
    }
    for (JavaLangInteger *boxed__ in indices) {
      jint i = [((JavaLangInteger *) nil_chk(boxed__)) intValue];
      @try {
        [seq addWithId:[((id<JavaUtilList>) nil_chk(items)) getWithInt:i]];
      }
      @catch (JavaLangIndexOutOfBoundsException *ioobe) {
        [seq addWithId:paddingSymbol];
      }
    }
    [prefixesAndSuffixes addWithId:seq];
  }
  return prefixesAndSuffixes;
}

id<JavaUtilList> EduStanfordNlpUtilCollectionUtils_mergeListWithJavaUtilList_withJavaUtilCollection_withJavaUtilFunctionFunction_withJavaUtilFunctionFunction_(id<JavaUtilList> list, id<JavaUtilCollection> matched, id<JavaUtilFunctionFunction> toIntervalFunc, id<JavaUtilFunctionFunction> aggregator) {
  EduStanfordNlpUtilCollectionUtils_initialize();
  id<JavaUtilList> matchedIntervals = new_JavaUtilArrayList_initWithInt_([((id<JavaUtilCollection>) nil_chk(matched)) size]);
  for (id __strong m in matched) {
    [matchedIntervals addWithId:[((id<JavaUtilFunctionFunction>) nil_chk(toIntervalFunc)) applyWithId:m]];
  }
  return EduStanfordNlpUtilCollectionUtils_mergeListWithJavaUtilList_withJavaUtilList_withJavaUtilFunctionFunction_(list, matchedIntervals, aggregator);
}

id<JavaUtilList> EduStanfordNlpUtilCollectionUtils_mergeListWithJavaUtilList_withJavaUtilList_withJavaUtilFunctionFunction_(id<JavaUtilList> list, id<JavaUtilList> matched, id<JavaUtilFunctionFunction> aggregator) {
  EduStanfordNlpUtilCollectionUtils_initialize();
  JavaUtilCollections_sortWithJavaUtilList_withJavaUtilComparator_(matched, JreLoadStatic(EduStanfordNlpUtilHasInterval, ENDPOINTS_COMPARATOR));
  return EduStanfordNlpUtilCollectionUtils_mergeListWithSortedMatchedWithJavaUtilList_withJavaUtilList_withJavaUtilFunctionFunction_(list, matched, aggregator);
}

id<JavaUtilList> EduStanfordNlpUtilCollectionUtils_mergeListWithSortedMatchedWithJavaUtilList_withJavaUtilList_withJavaUtilFunctionFunction_(id<JavaUtilList> list, id<JavaUtilList> matched, id<JavaUtilFunctionFunction> aggregator) {
  EduStanfordNlpUtilCollectionUtils_initialize();
  id<JavaUtilList> merged = new_JavaUtilArrayList_initWithInt_([((id<JavaUtilList>) nil_chk(list)) size]);
  jint last = 0;
  for (id<EduStanfordNlpUtilHasInterval> __strong m in nil_chk(matched)) {
    EduStanfordNlpUtilInterval *interval = [((id<EduStanfordNlpUtilHasInterval>) nil_chk(m)) getInterval];
    jint start = [((JavaLangInteger *) nil_chk([((EduStanfordNlpUtilInterval *) nil_chk(interval)) getBegin])) intValue];
    jint end = [((JavaLangInteger *) nil_chk([interval getEnd])) intValue];
    if (start >= last) {
      [merged addAllWithJavaUtilCollection:[list subListWithInt:last withInt:start]];
      id t = [((id<JavaUtilFunctionFunction>) nil_chk(aggregator)) applyWithId:[list subListWithInt:start withInt:end]];
      [merged addWithId:t];
      last = end;
    }
  }
  if (last < [list size]) {
    [merged addAllWithJavaUtilCollection:[list subListWithInt:last withInt:[list size]]];
  }
  return merged;
}

id<JavaUtilList> EduStanfordNlpUtilCollectionUtils_mergeListWithSortedMatchedPreAggregatedWithJavaUtilList_withJavaUtilList_withJavaUtilFunctionFunction_(id<JavaUtilList> list, id<JavaUtilList> matched, id<JavaUtilFunctionFunction> toIntervalFunc) {
  EduStanfordNlpUtilCollectionUtils_initialize();
  id<JavaUtilList> merged = new_JavaUtilArrayList_initWithInt_([((id<JavaUtilList>) nil_chk(list)) size]);
  jint last = 0;
  for (id __strong m in nil_chk(matched)) {
    EduStanfordNlpUtilInterval *interval = [((id<JavaUtilFunctionFunction>) nil_chk(toIntervalFunc)) applyWithId:m];
    jint start = [((JavaLangInteger *) nil_chk([((EduStanfordNlpUtilInterval *) nil_chk(interval)) getBegin])) intValue];
    jint end = [((JavaLangInteger *) nil_chk([interval getEnd])) intValue];
    if (start >= last) {
      [merged addAllWithJavaUtilCollection:[list subListWithInt:last withInt:start]];
      [merged addWithId:m];
      last = end;
    }
  }
  if (last < [list size]) {
    [merged addAllWithJavaUtilCollection:[list subListWithInt:last withInt:[list size]]];
  }
  return merged;
}

id<JavaUtilList> EduStanfordNlpUtilCollectionUtils_flattenWithJavaUtilCollection_(id<JavaUtilCollection> nestedList) {
  EduStanfordNlpUtilCollectionUtils_initialize();
  id<JavaUtilList> result = new_JavaUtilArrayList_init();
  for (id<JavaUtilList> __strong list in nil_chk(nestedList)) {
    [result addAllWithJavaUtilCollection:list];
  }
  return result;
}

id<JavaUtilCollection> EduStanfordNlpUtilCollectionUtils_uniqueNonhashableObjectsWithJavaUtilCollection_withJavaUtilFunctionFunction_(id<JavaUtilCollection> objects, id<JavaUtilFunctionFunction> customHasher) {
  EduStanfordNlpUtilCollectionUtils_initialize();
  id<JavaUtilMap> hashesToObjects = EduStanfordNlpUtilGenerics_newHashMap();
  for (id __strong object in nil_chk(objects)) {
    (void) [((id<JavaUtilMap>) nil_chk(hashesToObjects)) putWithId:[((id<JavaUtilFunctionFunction>) nil_chk(customHasher)) applyWithId:object] withId:object];
  }
  return [((id<JavaUtilMap>) nil_chk(hashesToObjects)) values];
}

jboolean EduStanfordNlpUtilCollectionUtils_containsAnyWithJavaUtilCollection_withJavaUtilCollection_(id<JavaUtilCollection> collection, id<JavaUtilCollection> toCheck) {
  EduStanfordNlpUtilCollectionUtils_initialize();
  for (id __strong c in nil_chk(toCheck)) {
    if ([((id<JavaUtilCollection>) nil_chk(collection)) containsWithId:c]) return true;
  }
  return false;
}

id<JavaUtilList> EduStanfordNlpUtilCollectionUtils_partitionIntoFoldsWithJavaUtilList_withInt_(id<JavaUtilList> values, jint numFolds) {
  EduStanfordNlpUtilCollectionUtils_initialize();
  id<JavaUtilList> folds = EduStanfordNlpUtilGenerics_newArrayList();
  jint numValues = [((id<JavaUtilList>) nil_chk(values)) size];
  jint foldSize = numValues / numFolds;
  jint remainder = numValues % numFolds;
  jint start = 0;
  jint end = foldSize;
  for (jint foldNum = 0; foldNum < numFolds; foldNum++) {
    if (foldNum < remainder) {
      end++;
    }
    [((id<JavaUtilList>) nil_chk(folds)) addWithId:[values subListWithInt:start withInt:end]];
    start = end;
    end += foldSize;
  }
  return folds;
}

id<JavaUtilCollection> EduStanfordNlpUtilCollectionUtils_trainTestFoldsForCVWithJavaUtilList_withInt_(id<JavaUtilList> values, jint numFolds) {
  EduStanfordNlpUtilCollectionUtils_initialize();
  id<JavaUtilCollection> trainTestPairs = new_JavaUtilArrayList_init();
  id<JavaUtilList> folds = EduStanfordNlpUtilCollectionUtils_partitionIntoFoldsWithJavaUtilList_withInt_(values, numFolds);
  for (jint splitNum = 0; splitNum < numFolds; splitNum++) {
    id<JavaUtilCollection> test = [((id<JavaUtilList>) nil_chk(folds)) getWithInt:splitNum];
    id<JavaUtilCollection> train = new_JavaUtilArrayList_init();
    for (jint foldNum = 0; foldNum < numFolds; foldNum++) {
      if (foldNum != splitNum) {
        [train addAllWithJavaUtilCollection:[folds getWithInt:foldNum]];
      }
    }
    [trainTestPairs addWithId:new_EduStanfordNlpUtilPair_initWithId_withId_(train, test)];
  }
  return trainTestPairs;
}

id<JavaUtilSet> EduStanfordNlpUtilCollectionUtils_modesWithJavaUtilCollection_(id<JavaUtilCollection> values) {
  EduStanfordNlpUtilCollectionUtils_initialize();
  id<EduStanfordNlpStatsCounter> counter = new_EduStanfordNlpStatsClassicCounter_initWithJavaUtilCollection_(values);
  id<JavaUtilList> sortedCounts = EduStanfordNlpUtilCollectionUtils_sortedWithJavaLangIterable_([counter values]);
  JavaLangDouble *highestCount = [((id<JavaUtilList>) nil_chk(sortedCounts)) getWithInt:[sortedCounts size] - 1];
  (void) EduStanfordNlpStatsCounters_retainAboveWithEduStanfordNlpStatsCounter_withDouble_(counter, [((JavaLangDouble *) nil_chk(highestCount)) doubleValue]);
  return [counter keySet];
}

id EduStanfordNlpUtilCollectionUtils_modeWithJavaUtilCollection_(id<JavaUtilCollection> values) {
  EduStanfordNlpUtilCollectionUtils_initialize();
  id<JavaUtilSet> modes = EduStanfordNlpUtilCollectionUtils_modesWithJavaUtilCollection_(values);
  return [((id<JavaUtilIterator>) nil_chk([((id<JavaUtilSet>) nil_chk(modes)) iterator])) next];
}

id<JavaUtilSet> EduStanfordNlpUtilCollectionUtils_transformAsSetWithJavaUtilCollection_withJavaUtilFunctionFunction_(id<JavaUtilCollection> original, id<JavaUtilFunctionFunction> f) {
  EduStanfordNlpUtilCollectionUtils_initialize();
  id<JavaUtilSet> transformed = EduStanfordNlpUtilGenerics_newHashSet();
  for (id __strong t in nil_chk(original)) {
    [((id<JavaUtilSet>) nil_chk(transformed)) addWithId:[((id<JavaUtilFunctionFunction>) nil_chk(f)) applyWithId:t]];
  }
  return transformed;
}

id<JavaUtilList> EduStanfordNlpUtilCollectionUtils_transformAsListWithJavaUtilCollection_withJavaUtilFunctionFunction_(id<JavaUtilCollection> original, id<JavaUtilFunctionFunction> f) {
  EduStanfordNlpUtilCollectionUtils_initialize();
  id<JavaUtilList> transformed = new_JavaUtilArrayList_init();
  for (id __strong t in nil_chk(original)) {
    [transformed addWithId:[((id<JavaUtilFunctionFunction>) nil_chk(f)) applyWithId:t]];
  }
  return transformed;
}

id<JavaUtilList> EduStanfordNlpUtilCollectionUtils_filterAsListWithJavaUtilCollection_withJavaUtilFunctionPredicate_(id<JavaUtilCollection> original, id<JavaUtilFunctionPredicate> f) {
  EduStanfordNlpUtilCollectionUtils_initialize();
  id<JavaUtilList> transformed = new_JavaUtilArrayList_init();
  for (id __strong t in nil_chk(original)) {
    if ([((id<JavaUtilFunctionPredicate>) nil_chk(f)) testWithId:t]) {
      [transformed addWithId:t];
    }
  }
  return transformed;
}

id<JavaUtilList> EduStanfordNlpUtilCollectionUtils_getAllWithJavaUtilMap_withJavaUtilCollection_(id<JavaUtilMap> map, id<JavaUtilCollection> indices) {
  EduStanfordNlpUtilCollectionUtils_initialize();
  id<JavaUtilList> result = new_JavaUtilArrayList_init();
  for (id __strong i in nil_chk(indices)) if ([((id<JavaUtilMap>) nil_chk(map)) containsKeyWithId:i]) {
    [result addWithId:[map getWithId:i]];
  }
  return result;
}

jint EduStanfordNlpUtilCollectionUtils_maxIndexWithJavaUtilList_(id<JavaUtilList> list) {
  EduStanfordNlpUtilCollectionUtils_initialize();
  id<JavaLangComparable> max = nil;
  jint i = 0;
  jint maxIndex = -1;
  for (id<JavaLangComparable> __strong t in nil_chk(list)) {
    if (max == nil || [((id<JavaLangComparable>) nil_chk(t)) compareToWithId:max] > 0) {
      max = t;
      maxIndex = i;
    }
    i++;
  }
  return maxIndex;
}

id<JavaUtilIterator> EduStanfordNlpUtilCollectionUtils_concatIteratorsWithJavaUtilIteratorArray_(IOSObjectArray *iterators) {
  EduStanfordNlpUtilCollectionUtils_initialize();
  return new_EduStanfordNlpUtilCollectionUtils_$1_initWithJavaUtilIteratorArray_(iterators);
}

id<JavaUtilIterator> EduStanfordNlpUtilCollectionUtils_iteratorFromEnumeratorWithJavaUtilEnumeration_(id<JavaUtilEnumeration> lst_) {
  EduStanfordNlpUtilCollectionUtils_initialize();
  return new_EduStanfordNlpUtilCollectionUtils_$2_initWithJavaUtilEnumeration_(lst_);
}

id<JavaLangIterable> EduStanfordNlpUtilCollectionUtils_iterableFromEnumeratorWithJavaUtilEnumeration_(id<JavaUtilEnumeration> lst) {
  EduStanfordNlpUtilCollectionUtils_initialize();
  return new_EduStanfordNlpUtilIterableIterator_initWithJavaUtilIterator_(EduStanfordNlpUtilCollectionUtils_iteratorFromEnumeratorWithJavaUtilEnumeration_(lst));
}

IOSObjectArray *EduStanfordNlpUtilCollectionUtils__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangSafeVarargs() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *EduStanfordNlpUtilCollectionUtils__Annotations$1() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangSafeVarargs() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *EduStanfordNlpUtilCollectionUtils__Annotations$2() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangSafeVarargs() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *EduStanfordNlpUtilCollectionUtils__Annotations$3() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangSafeVarargs() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpUtilCollectionUtils)

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpUtilCollectionUtils_$Lambda$1)

@implementation EduStanfordNlpUtilCollectionUtils_$Lambda$1

- (jint)compareWithId:(id<JavaUtilList>)a
               withId:(id<JavaUtilList>)b {
  return EduStanfordNlpUtilCollectionUtils_compareListsWithJavaUtilList_withJavaUtilList_(a, b);
}

- (id<JavaUtilComparator>)reversed {
  return JavaUtilComparator_reversed(self);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilComparator:(id<JavaUtilComparator>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilComparator_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0
                                             withJavaUtilComparator:(id<JavaUtilComparator>)arg1 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_withJavaUtilComparator_(self, arg0, arg1);
}

- (id<JavaUtilComparator>)thenComparingDoubleWithJavaUtilFunctionToDoubleFunction:(id<JavaUtilFunctionToDoubleFunction>)arg0 {
  return JavaUtilComparator_thenComparingDoubleWithJavaUtilFunctionToDoubleFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingIntWithJavaUtilFunctionToIntFunction:(id<JavaUtilFunctionToIntFunction>)arg0 {
  return JavaUtilComparator_thenComparingIntWithJavaUtilFunctionToIntFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingLongWithJavaUtilFunctionToLongFunction:(id<JavaUtilFunctionToLongFunction>)arg0 {
  return JavaUtilComparator_thenComparingLongWithJavaUtilFunctionToLongFunction_(self, arg0);
}

+ (void)initialize {
  if (self == [EduStanfordNlpUtilCollectionUtils_$Lambda$1 class]) {
    EduStanfordNlpUtilCollectionUtils_$Lambda$1_instance = new_EduStanfordNlpUtilCollectionUtils_$Lambda$1_init();
    J2OBJC_SET_INITIALIZED(EduStanfordNlpUtilCollectionUtils_$Lambda$1)
  }
}

@end

void EduStanfordNlpUtilCollectionUtils_$Lambda$1_init(EduStanfordNlpUtilCollectionUtils_$Lambda$1 *self) {
  NSObject_init(self);
}

EduStanfordNlpUtilCollectionUtils_$Lambda$1 *new_EduStanfordNlpUtilCollectionUtils_$Lambda$1_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilCollectionUtils_$Lambda$1, init)
}

EduStanfordNlpUtilCollectionUtils_$Lambda$1 *create_EduStanfordNlpUtilCollectionUtils_$Lambda$1_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilCollectionUtils_$Lambda$1, init)
}

@implementation EduStanfordNlpUtilCollectionUtils_$1

- (jboolean)hasNext {
  return ![((id<JavaUtilList>) nil_chk(iters_)) isEmpty] && [((id<JavaUtilIterator>) nil_chk([((id<JavaUtilList>) nil_chk(iters_)) getWithInt:0])) hasNext];
}

- (id)next {
  if (![self hasNext]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Iterator is empty!");
  }
  id next = [((id<JavaUtilIterator>) nil_chk([((id<JavaUtilList>) nil_chk(iters_)) getWithInt:0])) next];
  lastIter_ = [((id<JavaUtilList>) nil_chk(iters_)) getWithInt:0];
  while (![((id<JavaUtilList>) nil_chk(iters_)) isEmpty] && ![((id<JavaUtilIterator>) nil_chk([((id<JavaUtilList>) nil_chk(iters_)) getWithInt:0])) hasNext]) {
    (void) [((id<JavaUtilList>) nil_chk(iters_)) removeWithInt:0];
  }
  return next;
}

- (void)remove {
  if (lastIter_ == nil) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Call next() before calling remove()!");
  }
  [lastIter_ remove];
}

- (instancetype)initWithJavaUtilIteratorArray:(IOSObjectArray *)capture$0 {
  EduStanfordNlpUtilCollectionUtils_$1_initWithJavaUtilIteratorArray_(self, capture$0);
  return self;
}

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaUtilIterator_forEachRemainingWithJavaUtilFunctionConsumer_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(hasNext);
  methods[1].selector = @selector(next);
  methods[2].selector = @selector(remove);
  methods[3].selector = @selector(initWithJavaUtilIteratorArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "lastIter_", "LJavaUtilIterator;", .constantValue.asLong = 0, 0x0, -1, -1, 2, -1 },
    { "iters_", "LJavaUtilList;", .constantValue.asLong = 0, 0x0, -1, -1, 3, -1 },
  };
  static const void *ptrTable[] = { "()TE;", "[LJavaUtilIterator;", "Ljava/util/Iterator<TE;>;", "Ljava/util/List<Ljava/util/Iterator<TE;>;>;", "LEduStanfordNlpUtilCollectionUtils;", "concatIteratorsWithJavaUtilIteratorArray:", "Ljava/lang/Object;Ljava/util/Iterator<TE;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilCollectionUtils_$1 = { "", "edu.stanford.nlp.util", ptrTable, methods, fields, 7, 0x8008, 4, 2, 4, -1, 5, 6, -1 };
  return &_EduStanfordNlpUtilCollectionUtils_$1;
}

@end

void EduStanfordNlpUtilCollectionUtils_$1_initWithJavaUtilIteratorArray_(EduStanfordNlpUtilCollectionUtils_$1 *self, IOSObjectArray *capture$0) {
  NSObject_init(self);
  self->lastIter_ = nil;
  self->iters_ = new_JavaUtilLinkedList_initWithJavaUtilCollection_(JavaUtilArrays_asListWithNSObjectArray_(capture$0));
}

EduStanfordNlpUtilCollectionUtils_$1 *new_EduStanfordNlpUtilCollectionUtils_$1_initWithJavaUtilIteratorArray_(IOSObjectArray *capture$0) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilCollectionUtils_$1, initWithJavaUtilIteratorArray_, capture$0)
}

EduStanfordNlpUtilCollectionUtils_$1 *create_EduStanfordNlpUtilCollectionUtils_$1_initWithJavaUtilIteratorArray_(IOSObjectArray *capture$0) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilCollectionUtils_$1, initWithJavaUtilIteratorArray_, capture$0)
}

@implementation EduStanfordNlpUtilCollectionUtils_$2

- (jboolean)hasNext {
  return [((id<JavaUtilEnumeration>) nil_chk(lst_)) hasMoreElements];
}

- (id)next {
  return [((id<JavaUtilEnumeration>) nil_chk(lst_)) nextElement];
}

- (instancetype)initWithJavaUtilEnumeration:(id<JavaUtilEnumeration>)capture$0 {
  EduStanfordNlpUtilCollectionUtils_$2_initWithJavaUtilEnumeration_(self, capture$0);
  return self;
}

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaUtilIterator_forEachRemainingWithJavaUtilFunctionConsumer_(self, arg0);
}

- (void)remove {
  JavaUtilIterator_remove(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(hasNext);
  methods[1].selector = @selector(next);
  methods[2].selector = @selector(initWithJavaUtilEnumeration:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "lst_", "LJavaUtilEnumeration;", .constantValue.asLong = 0, 0x12, -1, -1, 3, -1 },
  };
  static const void *ptrTable[] = { "()TE;", "LJavaUtilEnumeration;", "(Ljava/util/Enumeration<TE;>;)V", "Ljava/util/Enumeration<TE;>;", "LEduStanfordNlpUtilCollectionUtils;", "iteratorFromEnumeratorWithJavaUtilEnumeration:", "Ljava/lang/Object;Ljava/util/Iterator<TE;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilCollectionUtils_$2 = { "", "edu.stanford.nlp.util", ptrTable, methods, fields, 7, 0x8008, 3, 1, 4, -1, 5, 6, -1 };
  return &_EduStanfordNlpUtilCollectionUtils_$2;
}

@end

void EduStanfordNlpUtilCollectionUtils_$2_initWithJavaUtilEnumeration_(EduStanfordNlpUtilCollectionUtils_$2 *self, id<JavaUtilEnumeration> capture$0) {
  NSObject_init(self);
  self->lst_ = capture$0;
}

EduStanfordNlpUtilCollectionUtils_$2 *new_EduStanfordNlpUtilCollectionUtils_$2_initWithJavaUtilEnumeration_(id<JavaUtilEnumeration> capture$0) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilCollectionUtils_$2, initWithJavaUtilEnumeration_, capture$0)
}

EduStanfordNlpUtilCollectionUtils_$2 *create_EduStanfordNlpUtilCollectionUtils_$2_initWithJavaUtilEnumeration_(id<JavaUtilEnumeration> capture$0) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilCollectionUtils_$2, initWithJavaUtilEnumeration_, capture$0)
}
