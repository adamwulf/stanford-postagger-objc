//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/util/Interval.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_EduStanfordNlpUtilInterval")
#ifdef RESTRICT_EduStanfordNlpUtilInterval
#define INCLUDE_ALL_EduStanfordNlpUtilInterval 0
#else
#define INCLUDE_ALL_EduStanfordNlpUtilInterval 1
#endif
#undef RESTRICT_EduStanfordNlpUtilInterval

#if !defined (EduStanfordNlpUtilInterval_) && (INCLUDE_ALL_EduStanfordNlpUtilInterval || defined(INCLUDE_EduStanfordNlpUtilInterval))
#define EduStanfordNlpUtilInterval_

#define RESTRICT_EduStanfordNlpUtilPair 1
#define INCLUDE_EduStanfordNlpUtilPair 1
#include "edu/stanford/nlp/util/Pair.h"

#define RESTRICT_EduStanfordNlpUtilHasInterval 1
#define INCLUDE_EduStanfordNlpUtilHasInterval 1
#include "edu/stanford/nlp/util/HasInterval.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class EduStanfordNlpUtilInterval_RelType;
@protocol JavaLangComparable;
@protocol JavaUtilComparator;
@protocol JavaUtilFunctionFunction;

@interface EduStanfordNlpUtilInterval : EduStanfordNlpUtilPair < EduStanfordNlpUtilHasInterval, JavaIoSerializable >

#pragma mark Public

+ (jboolean)checkFlagExclusiveSetWithInt:(jint)flags
                                 withInt:(jint)flag
                                 withInt:(jint)mask;

+ (jboolean)checkFlagSetWithInt:(jint)flags
                        withInt:(jint)flag;

+ (jboolean)checkMultipleBitSetWithInt:(jint)flags;

- (jint)compareIntervalOrderWithEduStanfordNlpUtilInterval:(EduStanfordNlpUtilInterval *)other;

- (jboolean)containsWithJavaLangComparable:(id<JavaLangComparable>)p;

- (jboolean)containsWithEduStanfordNlpUtilInterval:(EduStanfordNlpUtilInterval *)other;

- (jboolean)containsOpenWithJavaLangComparable:(id<JavaLangComparable>)p;

- (jboolean)isEqual:(id)o;

- (EduStanfordNlpUtilInterval *)expandWithEduStanfordNlpUtilInterval:(EduStanfordNlpUtilInterval *)other;

+ (jint)extractRelationSubflagsWithInt:(jint)flags
                               withInt:(jint)shift;

- (id<JavaLangComparable>)first;

- (id<JavaLangComparable>)getBegin;

- (id<JavaLangComparable>)getEnd;

- (EduStanfordNlpUtilInterval *)getInterval;

+ (jdouble)getMidPointWithEduStanfordNlpUtilInterval:(EduStanfordNlpUtilInterval *)interval;

+ (jdouble)getRadiusWithEduStanfordNlpUtilInterval:(EduStanfordNlpUtilInterval *)interval;

- (EduStanfordNlpUtilInterval_RelType *)getRelationWithEduStanfordNlpUtilInterval:(EduStanfordNlpUtilInterval *)other;

- (jint)getRelationFlagsWithEduStanfordNlpUtilInterval:(EduStanfordNlpUtilInterval *)other;

- (NSUInteger)hash;

- (jboolean)includesBegin;

- (jboolean)includesEnd;

- (EduStanfordNlpUtilInterval *)intersectWithEduStanfordNlpUtilInterval:(EduStanfordNlpUtilInterval *)other;

- (jboolean)isIntervalComparableWithEduStanfordNlpUtilInterval:(EduStanfordNlpUtilInterval *)other;

+ (id<JavaUtilComparator>)lengthEndpointsComparator;

+ (id<JavaUtilFunctionFunction>)lengthScorer;

- (jboolean)overlapsWithEduStanfordNlpUtilInterval:(EduStanfordNlpUtilInterval *)other;

- (id<JavaLangComparable>)second;

+ (EduStanfordNlpUtilInterval *)toIntervalWithJavaLangComparable:(id<JavaLangComparable>)a
                                          withJavaLangComparable:(id<JavaLangComparable>)b;

+ (EduStanfordNlpUtilInterval *)toIntervalWithJavaLangComparable:(id<JavaLangComparable>)a
                                          withJavaLangComparable:(id<JavaLangComparable>)b
                                                         withInt:(jint)flags;

+ (EduStanfordNlpUtilInterval *)toValidIntervalWithJavaLangComparable:(id<JavaLangComparable>)a
                                               withJavaLangComparable:(id<JavaLangComparable>)b;

+ (EduStanfordNlpUtilInterval *)toValidIntervalWithJavaLangComparable:(id<JavaLangComparable>)a
                                               withJavaLangComparable:(id<JavaLangComparable>)b
                                                              withInt:(jint)flags;

#pragma mark Protected

- (instancetype)initWithJavaLangComparable:(id<JavaLangComparable>)a
                    withJavaLangComparable:(id<JavaLangComparable>)b
                                   withInt:(jint)flags;

+ (jint)addIntervalRelationFlagsWithInt:(jint)flags
                            withBoolean:(jboolean)checkFuzzy;

+ (id<JavaLangComparable>)maxWithJavaLangComparable:(id<JavaLangComparable>)a
                             withJavaLangComparable:(id<JavaLangComparable>)b;

+ (id<JavaLangComparable>)minWithJavaLangComparable:(id<JavaLangComparable>)a
                             withJavaLangComparable:(id<JavaLangComparable>)b;

+ (jint)toRelFlagsWithInt:(jint)comp
                  withInt:(jint)shift;

@end

J2OBJC_STATIC_INIT(EduStanfordNlpUtilInterval)

inline jint EduStanfordNlpUtilInterval_get_INTERVAL_OPEN_BEGIN();
#define EduStanfordNlpUtilInterval_INTERVAL_OPEN_BEGIN 1
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpUtilInterval, INTERVAL_OPEN_BEGIN, jint)

inline jint EduStanfordNlpUtilInterval_get_INTERVAL_OPEN_END();
#define EduStanfordNlpUtilInterval_INTERVAL_OPEN_END 2
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpUtilInterval, INTERVAL_OPEN_END, jint)

inline jint EduStanfordNlpUtilInterval_get_REL_FLAGS_SAME();
#define EduStanfordNlpUtilInterval_REL_FLAGS_SAME 1
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpUtilInterval, REL_FLAGS_SAME, jint)

inline jint EduStanfordNlpUtilInterval_get_REL_FLAGS_BEFORE();
#define EduStanfordNlpUtilInterval_REL_FLAGS_BEFORE 2
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpUtilInterval, REL_FLAGS_BEFORE, jint)

inline jint EduStanfordNlpUtilInterval_get_REL_FLAGS_AFTER();
#define EduStanfordNlpUtilInterval_REL_FLAGS_AFTER 4
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpUtilInterval, REL_FLAGS_AFTER, jint)

inline jint EduStanfordNlpUtilInterval_get_REL_FLAGS_UNKNOWN();
#define EduStanfordNlpUtilInterval_REL_FLAGS_UNKNOWN 7
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpUtilInterval, REL_FLAGS_UNKNOWN, jint)

inline jint EduStanfordNlpUtilInterval_get_REL_FLAGS_SS_SHIFT();
#define EduStanfordNlpUtilInterval_REL_FLAGS_SS_SHIFT 0
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpUtilInterval, REL_FLAGS_SS_SHIFT, jint)

inline jint EduStanfordNlpUtilInterval_get_REL_FLAGS_SE_SHIFT();
#define EduStanfordNlpUtilInterval_REL_FLAGS_SE_SHIFT 4
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpUtilInterval, REL_FLAGS_SE_SHIFT, jint)

inline jint EduStanfordNlpUtilInterval_get_REL_FLAGS_ES_SHIFT();
#define EduStanfordNlpUtilInterval_REL_FLAGS_ES_SHIFT 8
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpUtilInterval, REL_FLAGS_ES_SHIFT, jint)

inline jint EduStanfordNlpUtilInterval_get_REL_FLAGS_EE_SHIFT();
#define EduStanfordNlpUtilInterval_REL_FLAGS_EE_SHIFT 12
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpUtilInterval, REL_FLAGS_EE_SHIFT, jint)

inline jint EduStanfordNlpUtilInterval_get_REL_FLAGS_SS_SAME();
#define EduStanfordNlpUtilInterval_REL_FLAGS_SS_SAME 1
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpUtilInterval, REL_FLAGS_SS_SAME, jint)

inline jint EduStanfordNlpUtilInterval_get_REL_FLAGS_SS_BEFORE();
#define EduStanfordNlpUtilInterval_REL_FLAGS_SS_BEFORE 2
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpUtilInterval, REL_FLAGS_SS_BEFORE, jint)

inline jint EduStanfordNlpUtilInterval_get_REL_FLAGS_SS_AFTER();
#define EduStanfordNlpUtilInterval_REL_FLAGS_SS_AFTER 4
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpUtilInterval, REL_FLAGS_SS_AFTER, jint)

inline jint EduStanfordNlpUtilInterval_get_REL_FLAGS_SS_UNKNOWN();
#define EduStanfordNlpUtilInterval_REL_FLAGS_SS_UNKNOWN 7
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpUtilInterval, REL_FLAGS_SS_UNKNOWN, jint)

inline jint EduStanfordNlpUtilInterval_get_REL_FLAGS_SE_SAME();
#define EduStanfordNlpUtilInterval_REL_FLAGS_SE_SAME 16
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpUtilInterval, REL_FLAGS_SE_SAME, jint)

inline jint EduStanfordNlpUtilInterval_get_REL_FLAGS_SE_BEFORE();
#define EduStanfordNlpUtilInterval_REL_FLAGS_SE_BEFORE 32
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpUtilInterval, REL_FLAGS_SE_BEFORE, jint)

inline jint EduStanfordNlpUtilInterval_get_REL_FLAGS_SE_AFTER();
#define EduStanfordNlpUtilInterval_REL_FLAGS_SE_AFTER 64
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpUtilInterval, REL_FLAGS_SE_AFTER, jint)

inline jint EduStanfordNlpUtilInterval_get_REL_FLAGS_SE_UNKNOWN();
#define EduStanfordNlpUtilInterval_REL_FLAGS_SE_UNKNOWN 112
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpUtilInterval, REL_FLAGS_SE_UNKNOWN, jint)

inline jint EduStanfordNlpUtilInterval_get_REL_FLAGS_ES_SAME();
#define EduStanfordNlpUtilInterval_REL_FLAGS_ES_SAME 256
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpUtilInterval, REL_FLAGS_ES_SAME, jint)

inline jint EduStanfordNlpUtilInterval_get_REL_FLAGS_ES_BEFORE();
#define EduStanfordNlpUtilInterval_REL_FLAGS_ES_BEFORE 512
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpUtilInterval, REL_FLAGS_ES_BEFORE, jint)

inline jint EduStanfordNlpUtilInterval_get_REL_FLAGS_ES_AFTER();
#define EduStanfordNlpUtilInterval_REL_FLAGS_ES_AFTER 1024
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpUtilInterval, REL_FLAGS_ES_AFTER, jint)

inline jint EduStanfordNlpUtilInterval_get_REL_FLAGS_ES_UNKNOWN();
#define EduStanfordNlpUtilInterval_REL_FLAGS_ES_UNKNOWN 1792
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpUtilInterval, REL_FLAGS_ES_UNKNOWN, jint)

inline jint EduStanfordNlpUtilInterval_get_REL_FLAGS_EE_SAME();
#define EduStanfordNlpUtilInterval_REL_FLAGS_EE_SAME 4096
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpUtilInterval, REL_FLAGS_EE_SAME, jint)

inline jint EduStanfordNlpUtilInterval_get_REL_FLAGS_EE_BEFORE();
#define EduStanfordNlpUtilInterval_REL_FLAGS_EE_BEFORE 8192
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpUtilInterval, REL_FLAGS_EE_BEFORE, jint)

inline jint EduStanfordNlpUtilInterval_get_REL_FLAGS_EE_AFTER();
#define EduStanfordNlpUtilInterval_REL_FLAGS_EE_AFTER 16384
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpUtilInterval, REL_FLAGS_EE_AFTER, jint)

inline jint EduStanfordNlpUtilInterval_get_REL_FLAGS_EE_UNKNOWN();
#define EduStanfordNlpUtilInterval_REL_FLAGS_EE_UNKNOWN 28672
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpUtilInterval, REL_FLAGS_EE_UNKNOWN, jint)

inline jint EduStanfordNlpUtilInterval_get_REL_FLAGS_INTERVAL_SAME();
#define EduStanfordNlpUtilInterval_REL_FLAGS_INTERVAL_SAME 65536
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpUtilInterval, REL_FLAGS_INTERVAL_SAME, jint)

inline jint EduStanfordNlpUtilInterval_get_REL_FLAGS_INTERVAL_BEFORE();
#define EduStanfordNlpUtilInterval_REL_FLAGS_INTERVAL_BEFORE 131072
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpUtilInterval, REL_FLAGS_INTERVAL_BEFORE, jint)

inline jint EduStanfordNlpUtilInterval_get_REL_FLAGS_INTERVAL_AFTER();
#define EduStanfordNlpUtilInterval_REL_FLAGS_INTERVAL_AFTER 262144
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpUtilInterval, REL_FLAGS_INTERVAL_AFTER, jint)

inline jint EduStanfordNlpUtilInterval_get_REL_FLAGS_INTERVAL_OVERLAP();
#define EduStanfordNlpUtilInterval_REL_FLAGS_INTERVAL_OVERLAP 1048576
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpUtilInterval, REL_FLAGS_INTERVAL_OVERLAP, jint)

inline jint EduStanfordNlpUtilInterval_get_REL_FLAGS_INTERVAL_INSIDE();
#define EduStanfordNlpUtilInterval_REL_FLAGS_INTERVAL_INSIDE 2097152
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpUtilInterval, REL_FLAGS_INTERVAL_INSIDE, jint)

inline jint EduStanfordNlpUtilInterval_get_REL_FLAGS_INTERVAL_CONTAIN();
#define EduStanfordNlpUtilInterval_REL_FLAGS_INTERVAL_CONTAIN 4194304
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpUtilInterval, REL_FLAGS_INTERVAL_CONTAIN, jint)

inline jint EduStanfordNlpUtilInterval_get_REL_FLAGS_INTERVAL_UNKNOWN();
#define EduStanfordNlpUtilInterval_REL_FLAGS_INTERVAL_UNKNOWN 7798784
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpUtilInterval, REL_FLAGS_INTERVAL_UNKNOWN, jint)

inline jint EduStanfordNlpUtilInterval_get_REL_FLAGS_INTERVAL_ALMOST_SAME();
#define EduStanfordNlpUtilInterval_REL_FLAGS_INTERVAL_ALMOST_SAME 16777216
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpUtilInterval, REL_FLAGS_INTERVAL_ALMOST_SAME, jint)

inline jint EduStanfordNlpUtilInterval_get_REL_FLAGS_INTERVAL_ALMOST_BEFORE();
#define EduStanfordNlpUtilInterval_REL_FLAGS_INTERVAL_ALMOST_BEFORE 16777216
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpUtilInterval, REL_FLAGS_INTERVAL_ALMOST_BEFORE, jint)

inline jint EduStanfordNlpUtilInterval_get_REL_FLAGS_INTERVAL_ALMOST_AFTER();
#define EduStanfordNlpUtilInterval_REL_FLAGS_INTERVAL_ALMOST_AFTER 16777216
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpUtilInterval, REL_FLAGS_INTERVAL_ALMOST_AFTER, jint)

inline jint EduStanfordNlpUtilInterval_get_REL_FLAGS_INTERVAL_FUZZY();
#define EduStanfordNlpUtilInterval_REL_FLAGS_INTERVAL_FUZZY ((jint) 0x80000000)
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpUtilInterval, REL_FLAGS_INTERVAL_FUZZY, jint)

inline id<JavaUtilFunctionFunction> EduStanfordNlpUtilInterval_get_LENGTH_SCORER();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<JavaUtilFunctionFunction> EduStanfordNlpUtilInterval_LENGTH_SCORER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpUtilInterval, LENGTH_SCORER, id<JavaUtilFunctionFunction>)

FOUNDATION_EXPORT void EduStanfordNlpUtilInterval_initWithJavaLangComparable_withJavaLangComparable_withInt_(EduStanfordNlpUtilInterval *self, id<JavaLangComparable> a, id<JavaLangComparable> b, jint flags);

FOUNDATION_EXPORT EduStanfordNlpUtilInterval *new_EduStanfordNlpUtilInterval_initWithJavaLangComparable_withJavaLangComparable_withInt_(id<JavaLangComparable> a, id<JavaLangComparable> b, jint flags) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EduStanfordNlpUtilInterval *create_EduStanfordNlpUtilInterval_initWithJavaLangComparable_withJavaLangComparable_withInt_(id<JavaLangComparable> a, id<JavaLangComparable> b, jint flags);

FOUNDATION_EXPORT EduStanfordNlpUtilInterval *EduStanfordNlpUtilInterval_toIntervalWithJavaLangComparable_withJavaLangComparable_(id<JavaLangComparable> a, id<JavaLangComparable> b);

FOUNDATION_EXPORT EduStanfordNlpUtilInterval *EduStanfordNlpUtilInterval_toIntervalWithJavaLangComparable_withJavaLangComparable_withInt_(id<JavaLangComparable> a, id<JavaLangComparable> b, jint flags);

FOUNDATION_EXPORT EduStanfordNlpUtilInterval *EduStanfordNlpUtilInterval_toValidIntervalWithJavaLangComparable_withJavaLangComparable_(id<JavaLangComparable> a, id<JavaLangComparable> b);

FOUNDATION_EXPORT EduStanfordNlpUtilInterval *EduStanfordNlpUtilInterval_toValidIntervalWithJavaLangComparable_withJavaLangComparable_withInt_(id<JavaLangComparable> a, id<JavaLangComparable> b, jint flags);

FOUNDATION_EXPORT id<JavaLangComparable> EduStanfordNlpUtilInterval_maxWithJavaLangComparable_withJavaLangComparable_(id<JavaLangComparable> a, id<JavaLangComparable> b);

FOUNDATION_EXPORT id<JavaLangComparable> EduStanfordNlpUtilInterval_minWithJavaLangComparable_withJavaLangComparable_(id<JavaLangComparable> a, id<JavaLangComparable> b);

FOUNDATION_EXPORT jint EduStanfordNlpUtilInterval_toRelFlagsWithInt_withInt_(jint comp, jint shift);

FOUNDATION_EXPORT jint EduStanfordNlpUtilInterval_addIntervalRelationFlagsWithInt_withBoolean_(jint flags, jboolean checkFuzzy);

FOUNDATION_EXPORT jint EduStanfordNlpUtilInterval_extractRelationSubflagsWithInt_withInt_(jint flags, jint shift);

FOUNDATION_EXPORT jboolean EduStanfordNlpUtilInterval_checkMultipleBitSetWithInt_(jint flags);

FOUNDATION_EXPORT jboolean EduStanfordNlpUtilInterval_checkFlagSetWithInt_withInt_(jint flags, jint flag);

FOUNDATION_EXPORT jboolean EduStanfordNlpUtilInterval_checkFlagExclusiveSetWithInt_withInt_withInt_(jint flags, jint flag, jint mask);

FOUNDATION_EXPORT jdouble EduStanfordNlpUtilInterval_getMidPointWithEduStanfordNlpUtilInterval_(EduStanfordNlpUtilInterval *interval);

FOUNDATION_EXPORT jdouble EduStanfordNlpUtilInterval_getRadiusWithEduStanfordNlpUtilInterval_(EduStanfordNlpUtilInterval *interval);

FOUNDATION_EXPORT id<JavaUtilComparator> EduStanfordNlpUtilInterval_lengthEndpointsComparator();

FOUNDATION_EXPORT id<JavaUtilFunctionFunction> EduStanfordNlpUtilInterval_lengthScorer();

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpUtilInterval)

#endif

#if !defined (EduStanfordNlpUtilInterval_RelType_) && (INCLUDE_ALL_EduStanfordNlpUtilInterval || defined(INCLUDE_EduStanfordNlpUtilInterval_RelType))
#define EduStanfordNlpUtilInterval_RelType_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, EduStanfordNlpUtilInterval_RelType_Enum) {
  EduStanfordNlpUtilInterval_RelType_Enum_BEFORE = 0,
  EduStanfordNlpUtilInterval_RelType_Enum_AFTER = 1,
  EduStanfordNlpUtilInterval_RelType_Enum_EQUAL = 2,
  EduStanfordNlpUtilInterval_RelType_Enum_BEGIN_MEET_END = 3,
  EduStanfordNlpUtilInterval_RelType_Enum_END_MEET_BEGIN = 4,
  EduStanfordNlpUtilInterval_RelType_Enum_CONTAIN = 5,
  EduStanfordNlpUtilInterval_RelType_Enum_INSIDE = 6,
  EduStanfordNlpUtilInterval_RelType_Enum_OVERLAP = 7,
  EduStanfordNlpUtilInterval_RelType_Enum_UNKNOWN = 8,
  EduStanfordNlpUtilInterval_RelType_Enum_NONE = 9,
};

@interface EduStanfordNlpUtilInterval_RelType : JavaLangEnum < NSCopying >

#pragma mark Public

+ (EduStanfordNlpUtilInterval_RelType *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (id)copyWithZone:(NSZone *)zone;

@end

J2OBJC_STATIC_INIT(EduStanfordNlpUtilInterval_RelType)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT EduStanfordNlpUtilInterval_RelType *EduStanfordNlpUtilInterval_RelType_values_[];

inline EduStanfordNlpUtilInterval_RelType *EduStanfordNlpUtilInterval_RelType_get_BEFORE();
J2OBJC_ENUM_CONSTANT(EduStanfordNlpUtilInterval_RelType, BEFORE)

inline EduStanfordNlpUtilInterval_RelType *EduStanfordNlpUtilInterval_RelType_get_AFTER();
J2OBJC_ENUM_CONSTANT(EduStanfordNlpUtilInterval_RelType, AFTER)

inline EduStanfordNlpUtilInterval_RelType *EduStanfordNlpUtilInterval_RelType_get_EQUAL();
J2OBJC_ENUM_CONSTANT(EduStanfordNlpUtilInterval_RelType, EQUAL)

inline EduStanfordNlpUtilInterval_RelType *EduStanfordNlpUtilInterval_RelType_get_BEGIN_MEET_END();
J2OBJC_ENUM_CONSTANT(EduStanfordNlpUtilInterval_RelType, BEGIN_MEET_END)

inline EduStanfordNlpUtilInterval_RelType *EduStanfordNlpUtilInterval_RelType_get_END_MEET_BEGIN();
J2OBJC_ENUM_CONSTANT(EduStanfordNlpUtilInterval_RelType, END_MEET_BEGIN)

inline EduStanfordNlpUtilInterval_RelType *EduStanfordNlpUtilInterval_RelType_get_CONTAIN();
J2OBJC_ENUM_CONSTANT(EduStanfordNlpUtilInterval_RelType, CONTAIN)

inline EduStanfordNlpUtilInterval_RelType *EduStanfordNlpUtilInterval_RelType_get_INSIDE();
J2OBJC_ENUM_CONSTANT(EduStanfordNlpUtilInterval_RelType, INSIDE)

inline EduStanfordNlpUtilInterval_RelType *EduStanfordNlpUtilInterval_RelType_get_OVERLAP();
J2OBJC_ENUM_CONSTANT(EduStanfordNlpUtilInterval_RelType, OVERLAP)

inline EduStanfordNlpUtilInterval_RelType *EduStanfordNlpUtilInterval_RelType_get_UNKNOWN();
J2OBJC_ENUM_CONSTANT(EduStanfordNlpUtilInterval_RelType, UNKNOWN)

inline EduStanfordNlpUtilInterval_RelType *EduStanfordNlpUtilInterval_RelType_get_NONE();
J2OBJC_ENUM_CONSTANT(EduStanfordNlpUtilInterval_RelType, NONE)

FOUNDATION_EXPORT IOSObjectArray *EduStanfordNlpUtilInterval_RelType_values();

FOUNDATION_EXPORT EduStanfordNlpUtilInterval_RelType *EduStanfordNlpUtilInterval_RelType_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT EduStanfordNlpUtilInterval_RelType *EduStanfordNlpUtilInterval_RelType_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpUtilInterval_RelType)

#endif

#pragma pop_macro("INCLUDE_ALL_EduStanfordNlpUtilInterval")
