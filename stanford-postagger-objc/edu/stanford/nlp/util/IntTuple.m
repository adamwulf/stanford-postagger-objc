//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/util/IntTuple.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/util/IntPair.h"
#include "edu/stanford/nlp/util/IntQuadruple.h"
#include "edu/stanford/nlp/util/IntTriple.h"
#include "edu/stanford/nlp/util/IntTuple.h"
#include "edu/stanford/nlp/util/IntUni.h"
#include "java/io/PrintStream.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/List.h"

inline jlong EduStanfordNlpUtilIntTuple_get_serialVersionUID();
#define EduStanfordNlpUtilIntTuple_serialVersionUID 7266305463893511982LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpUtilIntTuple, serialVersionUID, jlong)

@implementation EduStanfordNlpUtilIntTuple

- (instancetype)initWithIntArray:(IOSIntArray *)arr {
  EduStanfordNlpUtilIntTuple_initWithIntArray_(self, arr);
  return self;
}

- (instancetype)initWithInt:(jint)num {
  EduStanfordNlpUtilIntTuple_initWithInt_(self, num);
  return self;
}

- (jint)compareToWithId:(EduStanfordNlpUtilIntTuple *)o {
  (void) cast_chk(o, [EduStanfordNlpUtilIntTuple class]);
  jint commonLen = JavaLangMath_minWithInt_withInt_([((EduStanfordNlpUtilIntTuple *) nil_chk(o)) length], [self length]);
  for (jint i = 0; i < commonLen; i++) {
    jint a = [self getWithInt:i];
    jint b = [o getWithInt:i];
    if (a < b) return -1;
    if (b < a) return 1;
  }
  if ([o length] == [self length]) {
    return 0;
  }
  else {
    return ([self length] < [o length]) ? -1 : 1;
  }
}

- (jint)getWithInt:(jint)num {
  return IOSIntArray_Get(nil_chk(elements_), num);
}

- (void)setWithInt:(jint)num
           withInt:(jint)val {
  *IOSIntArray_GetRef(nil_chk(elements_), num) = val;
}

- (void)shiftLeft {
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(elements_, 1, elements_, 0, ((IOSIntArray *) nil_chk(elements_))->size_ - 1);
  *IOSIntArray_GetRef(elements_, elements_->size_ - 1) = 0;
}

- (EduStanfordNlpUtilIntTuple *)getCopy {
  EduStanfordNlpUtilIntTuple *copy_ = EduStanfordNlpUtilIntTuple_getIntTupleWithInt_(((IOSIntArray *) nil_chk(elements_))->size_);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(elements_, 0, ((EduStanfordNlpUtilIntTuple *) nil_chk(copy_))->elements_, 0, elements_->size_);
  return copy_;
}

- (IOSIntArray *)elems {
  return elements_;
}

- (jboolean)isEqual:(id)iO {
  if (!([iO isKindOfClass:[EduStanfordNlpUtilIntTuple class]])) {
    return false;
  }
  EduStanfordNlpUtilIntTuple *i = (EduStanfordNlpUtilIntTuple *) cast_chk(iO, [EduStanfordNlpUtilIntTuple class]);
  if (((IOSIntArray *) nil_chk(((EduStanfordNlpUtilIntTuple *) nil_chk(i))->elements_))->size_ != elements_->size_) {
    return false;
  }
  for (jint j = 0; j < elements_->size_; j++) {
    if (IOSIntArray_Get(elements_, j) != [i getWithInt:j]) {
      return false;
    }
  }
  return true;
}

- (NSUInteger)hash {
  jint sum = 0;
  {
    IOSIntArray *a__ = elements_;
    jint const *b__ = ((IOSIntArray *) nil_chk(a__))->buffer_;
    jint const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jint element = *b__++;
      sum = sum * 17 + element;
    }
  }
  return sum;
}

- (jint)length {
  return ((IOSIntArray *) nil_chk(elements_))->size_;
}

+ (EduStanfordNlpUtilIntTuple *)getIntTupleWithInt:(jint)num {
  return EduStanfordNlpUtilIntTuple_getIntTupleWithInt_(num);
}

+ (EduStanfordNlpUtilIntTuple *)getIntTupleWithJavaUtilList:(id<JavaUtilList>)integers {
  return EduStanfordNlpUtilIntTuple_getIntTupleWithJavaUtilList_(integers);
}

- (NSString *)description {
  JavaLangStringBuilder *name = new_JavaLangStringBuilder_init();
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(elements_))->size_; i++) {
    (void) [name appendWithInt:[self getWithInt:i]];
    if (i < elements_->size_ - 1) {
      (void) [name appendWithChar:' '];
    }
  }
  return [name description];
}

+ (EduStanfordNlpUtilIntTuple *)concatWithEduStanfordNlpUtilIntTuple:(EduStanfordNlpUtilIntTuple *)t1
                                      withEduStanfordNlpUtilIntTuple:(EduStanfordNlpUtilIntTuple *)t2 {
  return EduStanfordNlpUtilIntTuple_concatWithEduStanfordNlpUtilIntTuple_withEduStanfordNlpUtilIntTuple_(t1, t2);
}

- (void)print {
  NSString *s = [self description];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printWithNSString:s];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 4, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpUtilIntTuple;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 9, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpUtilIntTuple;", 0x9, 10, 1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpUtilIntTuple;", 0x9, 10, 11, -1, 12, -1, -1 },
    { NULL, "LNSString;", 0x1, 13, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpUtilIntTuple;", 0x9, 14, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIntArray:);
  methods[1].selector = @selector(initWithInt:);
  methods[2].selector = @selector(compareToWithId:);
  methods[3].selector = @selector(getWithInt:);
  methods[4].selector = @selector(setWithInt:withInt:);
  methods[5].selector = @selector(shiftLeft);
  methods[6].selector = @selector(getCopy);
  methods[7].selector = @selector(elems);
  methods[8].selector = @selector(isEqual:);
  methods[9].selector = @selector(hash);
  methods[10].selector = @selector(length);
  methods[11].selector = @selector(getIntTupleWithInt:);
  methods[12].selector = @selector(getIntTupleWithJavaUtilList:);
  methods[13].selector = @selector(description);
  methods[14].selector = @selector(concatWithEduStanfordNlpUtilIntTuple:withEduStanfordNlpUtilIntTuple:);
  methods[15].selector = @selector(print);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "elements_", "[I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpUtilIntTuple_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[I", "I", "compareTo", "LEduStanfordNlpUtilIntTuple;", "get", "set", "II", "equals", "LNSObject;", "hashCode", "getIntTuple", "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/Integer;>;)Ledu/stanford/nlp/util/IntTuple;", "toString", "concat", "LEduStanfordNlpUtilIntTuple;LEduStanfordNlpUtilIntTuple;", "Ljava/lang/Object;Ljava/io/Serializable;Ljava/lang/Comparable<Ledu/stanford/nlp/util/IntTuple;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilIntTuple = { "IntTuple", "edu.stanford.nlp.util", ptrTable, methods, fields, 7, 0x1, 16, 2, -1, -1, -1, 16, -1 };
  return &_EduStanfordNlpUtilIntTuple;
}

@end

void EduStanfordNlpUtilIntTuple_initWithIntArray_(EduStanfordNlpUtilIntTuple *self, IOSIntArray *arr) {
  NSObject_init(self);
  self->elements_ = arr;
}

EduStanfordNlpUtilIntTuple *new_EduStanfordNlpUtilIntTuple_initWithIntArray_(IOSIntArray *arr) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilIntTuple, initWithIntArray_, arr)
}

EduStanfordNlpUtilIntTuple *create_EduStanfordNlpUtilIntTuple_initWithIntArray_(IOSIntArray *arr) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilIntTuple, initWithIntArray_, arr)
}

void EduStanfordNlpUtilIntTuple_initWithInt_(EduStanfordNlpUtilIntTuple *self, jint num) {
  NSObject_init(self);
  self->elements_ = [IOSIntArray newArrayWithLength:num];
}

EduStanfordNlpUtilIntTuple *new_EduStanfordNlpUtilIntTuple_initWithInt_(jint num) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilIntTuple, initWithInt_, num)
}

EduStanfordNlpUtilIntTuple *create_EduStanfordNlpUtilIntTuple_initWithInt_(jint num) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilIntTuple, initWithInt_, num)
}

EduStanfordNlpUtilIntTuple *EduStanfordNlpUtilIntTuple_getIntTupleWithInt_(jint num) {
  EduStanfordNlpUtilIntTuple_initialize();
  if (num == 1) {
    return new_EduStanfordNlpUtilIntUni_init();
  }
  if (num == 2) {
    return new_EduStanfordNlpUtilIntPair_init();
  }
  if (num == 3) {
    return new_EduStanfordNlpUtilIntTriple_init();
  }
  if (num == 4) {
    return new_EduStanfordNlpUtilIntQuadruple_init();
  }
  else {
    return new_EduStanfordNlpUtilIntTuple_initWithInt_(num);
  }
}

EduStanfordNlpUtilIntTuple *EduStanfordNlpUtilIntTuple_getIntTupleWithJavaUtilList_(id<JavaUtilList> integers) {
  EduStanfordNlpUtilIntTuple_initialize();
  EduStanfordNlpUtilIntTuple *t = EduStanfordNlpUtilIntTuple_getIntTupleWithInt_([((id<JavaUtilList>) nil_chk(integers)) size]);
  for (jint i = 0; i < [((EduStanfordNlpUtilIntTuple *) nil_chk(t)) length]; i++) {
    [t setWithInt:i withInt:[((JavaLangInteger *) nil_chk([integers getWithInt:i])) intValue]];
  }
  return t;
}

EduStanfordNlpUtilIntTuple *EduStanfordNlpUtilIntTuple_concatWithEduStanfordNlpUtilIntTuple_withEduStanfordNlpUtilIntTuple_(EduStanfordNlpUtilIntTuple *t1, EduStanfordNlpUtilIntTuple *t2) {
  EduStanfordNlpUtilIntTuple_initialize();
  jint n1 = [((EduStanfordNlpUtilIntTuple *) nil_chk(t1)) length];
  jint n2 = [((EduStanfordNlpUtilIntTuple *) nil_chk(t2)) length];
  EduStanfordNlpUtilIntTuple *res = EduStanfordNlpUtilIntTuple_getIntTupleWithInt_(n1 + n2);
  for (jint j = 0; j < n1; j++) {
    [((EduStanfordNlpUtilIntTuple *) nil_chk(res)) setWithInt:j withInt:[t1 getWithInt:j]];
  }
  for (jint i = 0; i < n2; i++) {
    [((EduStanfordNlpUtilIntTuple *) nil_chk(res)) setWithInt:n1 + i withInt:[t2 getWithInt:i]];
  }
  return res;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpUtilIntTuple)
