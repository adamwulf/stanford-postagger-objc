//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/util/XMLUtils.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/io/IOUtils.h"
#include "edu/stanford/nlp/util/Generics.h"
#include "edu/stanford/nlp/util/XMLUtils.h"
#include "java/io/File.h"
#include "java/io/FileReader.h"
#include "java/io/IOException.h"
#include "java/io/PrintStream.h"
#include "java/io/Reader.h"
#include "java/io/StringReader.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"
#include "javax/xml/XMLConstants.h"
#include "javax/xml/parsers/DocumentBuilder.h"
#include "javax/xml/parsers/DocumentBuilderFactory.h"
#include "javax/xml/parsers/ParserConfigurationException.h"
#include "javax/xml/validation/Schema.h"
#include "javax/xml/validation/SchemaFactory.h"
#include "org/w3c/dom/Document.h"
#include "org/w3c/dom/Element.h"
#include "org/w3c/dom/Node.h"
#include "org/w3c/dom/NodeList.h"
#include "org/xml/sax/ErrorHandler.h"
#include "org/xml/sax/InputSource.h"
#include "org/xml/sax/SAXException.h"
#include "org/xml/sax/SAXParseException.h"

@interface EduStanfordNlpUtilXMLUtils ()

- (instancetype)init;

+ (jchar)translateWithNSString:(NSString *)s;

@end

inline id<JavaUtilSet> EduStanfordNlpUtilXMLUtils_get_breakingTags();
static id<JavaUtilSet> EduStanfordNlpUtilXMLUtils_breakingTags;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpUtilXMLUtils, breakingTags, id<JavaUtilSet>)

__attribute__((unused)) static void EduStanfordNlpUtilXMLUtils_init(EduStanfordNlpUtilXMLUtils *self);

__attribute__((unused)) static EduStanfordNlpUtilXMLUtils *new_EduStanfordNlpUtilXMLUtils_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpUtilXMLUtils *create_EduStanfordNlpUtilXMLUtils_init();

__attribute__((unused)) static jchar EduStanfordNlpUtilXMLUtils_translateWithNSString_(NSString *s);

@interface EduStanfordNlpUtilXMLUtils_SAXErrorHandler : NSObject < OrgXmlSaxErrorHandler >

+ (NSString *)makeBetterErrorStringWithNSString:(NSString *)msg
                 withOrgXmlSaxSAXParseException:(OrgXmlSaxSAXParseException *)ex;

- (void)warningWithOrgXmlSaxSAXParseException:(OrgXmlSaxSAXParseException *)exception;

- (void)errorWithOrgXmlSaxSAXParseException:(OrgXmlSaxSAXParseException *)exception;

- (void)fatalErrorWithOrgXmlSaxSAXParseException:(OrgXmlSaxSAXParseException *)ex;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpUtilXMLUtils_SAXErrorHandler)

__attribute__((unused)) static NSString *EduStanfordNlpUtilXMLUtils_SAXErrorHandler_makeBetterErrorStringWithNSString_withOrgXmlSaxSAXParseException_(NSString *msg, OrgXmlSaxSAXParseException *ex);

__attribute__((unused)) static void EduStanfordNlpUtilXMLUtils_SAXErrorHandler_init(EduStanfordNlpUtilXMLUtils_SAXErrorHandler *self);

__attribute__((unused)) static EduStanfordNlpUtilXMLUtils_SAXErrorHandler *new_EduStanfordNlpUtilXMLUtils_SAXErrorHandler_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpUtilXMLUtils_SAXErrorHandler *create_EduStanfordNlpUtilXMLUtils_SAXErrorHandler_init();

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpUtilXMLUtils_SAXErrorHandler)

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpUtilXMLUtils)

JavaUtilRegexPattern *EduStanfordNlpUtilXMLUtils_xmlEscapingPattern;

@implementation EduStanfordNlpUtilXMLUtils

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpUtilXMLUtils_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (id<JavaUtilList>)getTextContentFromTagsFromFileWithJavaIoFile:(JavaIoFile *)f
                                                    withNSString:(NSString *)tag {
  return EduStanfordNlpUtilXMLUtils_getTextContentFromTagsFromFileWithJavaIoFile_withNSString_(f, tag);
}

+ (id<JavaUtilList>)getTextContentFromTagsFromFileSAXExceptionWithJavaIoFile:(JavaIoFile *)f
                                                                withNSString:(NSString *)tag {
  return EduStanfordNlpUtilXMLUtils_getTextContentFromTagsFromFileSAXExceptionWithJavaIoFile_withNSString_(f, tag);
}

+ (id<JavaUtilList>)getTagElementsFromFileWithJavaIoFile:(JavaIoFile *)f
                                            withNSString:(NSString *)tag {
  return EduStanfordNlpUtilXMLUtils_getTagElementsFromFileWithJavaIoFile_withNSString_(f, tag);
}

+ (id<JavaUtilList>)getTagElementsFromFileSAXExceptionWithJavaIoFile:(JavaIoFile *)f
                                                        withNSString:(NSString *)tag {
  return EduStanfordNlpUtilXMLUtils_getTagElementsFromFileSAXExceptionWithJavaIoFile_withNSString_(f, tag);
}

+ (JavaxXmlParsersDocumentBuilder *)getXmlParser {
  return EduStanfordNlpUtilXMLUtils_getXmlParser();
}

+ (JavaxXmlParsersDocumentBuilder *)getValidatingXmlParserWithJavaIoFile:(JavaIoFile *)schemaFile {
  return EduStanfordNlpUtilXMLUtils_getValidatingXmlParserWithJavaIoFile_(schemaFile);
}

+ (NSString *)stripTagsWithJavaIoReader:(JavaIoReader *)r
                       withJavaUtilList:(id<JavaUtilList>)mapBack
                            withBoolean:(jboolean)markLineBreaks {
  return EduStanfordNlpUtilXMLUtils_stripTagsWithJavaIoReader_withJavaUtilList_withBoolean_(r, mapBack, markLineBreaks);
}

+ (jboolean)isBreakingWithNSString:(NSString *)tag {
  return EduStanfordNlpUtilXMLUtils_isBreakingWithNSString_(tag);
}

+ (jboolean)isBreakingWithEduStanfordNlpUtilXMLUtils_XMLTag:(EduStanfordNlpUtilXMLUtils_XMLTag *)tag {
  return EduStanfordNlpUtilXMLUtils_isBreakingWithEduStanfordNlpUtilXMLUtils_XMLTag_(tag);
}

+ (NSString *)readUntilTagWithJavaIoReader:(JavaIoReader *)r {
  return EduStanfordNlpUtilXMLUtils_readUntilTagWithJavaIoReader_(r);
}

+ (EduStanfordNlpUtilXMLUtils_XMLTag *)readAndParseTagWithJavaIoReader:(JavaIoReader *)r {
  return EduStanfordNlpUtilXMLUtils_readAndParseTagWithJavaIoReader_(r);
}

+ (NSString *)unescapeStringForXMLWithNSString:(NSString *)s {
  return EduStanfordNlpUtilXMLUtils_unescapeStringForXMLWithNSString_(s);
}

+ (jchar)translateWithNSString:(NSString *)s {
  return EduStanfordNlpUtilXMLUtils_translateWithNSString_(s);
}

+ (NSString *)escapeXMLWithNSString:(NSString *)inArg {
  return EduStanfordNlpUtilXMLUtils_escapeXMLWithNSString_(inArg);
}

+ (NSString *)escapeElementXMLWithNSString:(NSString *)inArg {
  return EduStanfordNlpUtilXMLUtils_escapeElementXMLWithNSString_(inArg);
}

+ (NSString *)escapeAttributeXMLWithNSString:(NSString *)inArg {
  return EduStanfordNlpUtilXMLUtils_escapeAttributeXMLWithNSString_(inArg);
}

+ (NSString *)escapeTextAroundXMLTagsWithNSString:(NSString *)s {
  return EduStanfordNlpUtilXMLUtils_escapeTextAroundXMLTagsWithNSString_(s);
}

+ (jint)findSpaceWithNSString:(NSString *)haystack
                      withInt:(jint)begin {
  return EduStanfordNlpUtilXMLUtils_findSpaceWithNSString_withInt_(haystack, begin);
}

+ (NSString *)readTagWithJavaIoReader:(JavaIoReader *)r {
  return EduStanfordNlpUtilXMLUtils_readTagWithJavaIoReader_(r);
}

+ (EduStanfordNlpUtilXMLUtils_XMLTag *)parseTagWithNSString:(NSString *)tagString {
  return EduStanfordNlpUtilXMLUtils_parseTagWithNSString_(tagString);
}

+ (id<OrgW3cDomDocument>)readDocumentFromFileWithNSString:(NSString *)filename {
  return EduStanfordNlpUtilXMLUtils_readDocumentFromFileWithNSString_(filename);
}

+ (id<OrgW3cDomDocument>)readDocumentFromStringWithNSString:(NSString *)s {
  return EduStanfordNlpUtilXMLUtils_readDocumentFromStringWithNSString_(s);
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  EduStanfordNlpUtilXMLUtils_mainWithNSStringArray_(args);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 0, 1, -1, 2, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 3, 1, 4, 2, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 5, 1, -1, 6, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 7, 1, 4, 6, -1, -1 },
    { NULL, "LJavaxXmlParsersDocumentBuilder;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxXmlParsersDocumentBuilder;", 0x9, 8, 9, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 10, 11, -1, 12, -1, -1 },
    { NULL, "Z", 0x9, 13, 14, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 13, 15, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 16, 17, 18, -1, -1, -1 },
    { NULL, "LEduStanfordNlpUtilXMLUtils_XMLTag;", 0x9, 19, 17, 18, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 20, 14, -1, -1, -1, -1 },
    { NULL, "C", 0xa, 21, 14, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 22, 14, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 23, 14, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 24, 14, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 25, 14, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 26, 27, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 28, 17, 18, -1, -1, -1 },
    { NULL, "LEduStanfordNlpUtilXMLUtils_XMLTag;", 0x9, 29, 14, -1, -1, -1, -1 },
    { NULL, "LOrgW3cDomDocument;", 0x9, 30, 14, 31, -1, -1, -1 },
    { NULL, "LOrgW3cDomDocument;", 0x9, 32, 14, 31, -1, -1, -1 },
    { NULL, "V", 0x9, 33, 34, 31, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getTextContentFromTagsFromFileWithJavaIoFile:withNSString:);
  methods[2].selector = @selector(getTextContentFromTagsFromFileSAXExceptionWithJavaIoFile:withNSString:);
  methods[3].selector = @selector(getTagElementsFromFileWithJavaIoFile:withNSString:);
  methods[4].selector = @selector(getTagElementsFromFileSAXExceptionWithJavaIoFile:withNSString:);
  methods[5].selector = @selector(getXmlParser);
  methods[6].selector = @selector(getValidatingXmlParserWithJavaIoFile:);
  methods[7].selector = @selector(stripTagsWithJavaIoReader:withJavaUtilList:withBoolean:);
  methods[8].selector = @selector(isBreakingWithNSString:);
  methods[9].selector = @selector(isBreakingWithEduStanfordNlpUtilXMLUtils_XMLTag:);
  methods[10].selector = @selector(readUntilTagWithJavaIoReader:);
  methods[11].selector = @selector(readAndParseTagWithJavaIoReader:);
  methods[12].selector = @selector(unescapeStringForXMLWithNSString:);
  methods[13].selector = @selector(translateWithNSString:);
  methods[14].selector = @selector(escapeXMLWithNSString:);
  methods[15].selector = @selector(escapeElementXMLWithNSString:);
  methods[16].selector = @selector(escapeAttributeXMLWithNSString:);
  methods[17].selector = @selector(escapeTextAroundXMLTagsWithNSString:);
  methods[18].selector = @selector(findSpaceWithNSString:withInt:);
  methods[19].selector = @selector(readTagWithJavaIoReader:);
  methods[20].selector = @selector(parseTagWithNSString:);
  methods[21].selector = @selector(readDocumentFromFileWithNSString:);
  methods[22].selector = @selector(readDocumentFromStringWithNSString:);
  methods[23].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "breakingTags", "LJavaUtilSet;", .constantValue.asLong = 0, 0x1a, -1, 35, 36, -1 },
    { "xmlEscapingPattern", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x18, -1, 37, -1, -1 },
  };
  static const void *ptrTable[] = { "getTextContentFromTagsFromFile", "LJavaIoFile;LNSString;", "(Ljava/io/File;Ljava/lang/String;)Ljava/util/List<Ljava/lang/String;>;", "getTextContentFromTagsFromFileSAXException", "LOrgXmlSaxSAXException;", "getTagElementsFromFile", "(Ljava/io/File;Ljava/lang/String;)Ljava/util/List<Lorg/w3c/dom/Element;>;", "getTagElementsFromFileSAXException", "getValidatingXmlParser", "LJavaIoFile;", "stripTags", "LJavaIoReader;LJavaUtilList;Z", "(Ljava/io/Reader;Ljava/util/List<Ljava/lang/Integer;>;Z)Ljava/lang/String;", "isBreaking", "LNSString;", "LEduStanfordNlpUtilXMLUtils_XMLTag;", "readUntilTag", "LJavaIoReader;", "LJavaIoIOException;", "readAndParseTag", "unescapeStringForXML", "translate", "escapeXML", "escapeElementXML", "escapeAttributeXML", "escapeTextAroundXMLTags", "findSpace", "LNSString;I", "readTag", "parseTag", "readDocumentFromFile", "LJavaLangException;", "readDocumentFromString", "main", "[LNSString;", &EduStanfordNlpUtilXMLUtils_breakingTags, "Ljava/util/Set<Ljava/lang/String;>;", &EduStanfordNlpUtilXMLUtils_xmlEscapingPattern, "LEduStanfordNlpUtilXMLUtils_XMLTag;LEduStanfordNlpUtilXMLUtils_SAXErrorHandler;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilXMLUtils = { "XMLUtils", "edu.stanford.nlp.util", ptrTable, methods, fields, 7, 0x1, 24, 2, -1, 38, -1, -1, -1 };
  return &_EduStanfordNlpUtilXMLUtils;
}

+ (void)initialize {
  if (self == [EduStanfordNlpUtilXMLUtils class]) {
    EduStanfordNlpUtilXMLUtils_breakingTags = EduStanfordNlpUtilGenerics_newHashSetWithJavaUtilCollection_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ @"blockquote", @"br", @"div", @"h1", @"h2", @"h3", @"h4", @"h5", @"h6", @"hr", @"li", @"ol", @"p", @"pre", @"ul", @"tr", @"td" } count:17 type:NSString_class_()]));
    EduStanfordNlpUtilXMLUtils_xmlEscapingPattern = JavaUtilRegexPattern_compileWithNSString_(@"\\&.+?;");
    J2OBJC_SET_INITIALIZED(EduStanfordNlpUtilXMLUtils)
  }
}

@end

void EduStanfordNlpUtilXMLUtils_init(EduStanfordNlpUtilXMLUtils *self) {
  NSObject_init(self);
}

EduStanfordNlpUtilXMLUtils *new_EduStanfordNlpUtilXMLUtils_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilXMLUtils, init)
}

EduStanfordNlpUtilXMLUtils *create_EduStanfordNlpUtilXMLUtils_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilXMLUtils, init)
}

id<JavaUtilList> EduStanfordNlpUtilXMLUtils_getTextContentFromTagsFromFileWithJavaIoFile_withNSString_(JavaIoFile *f, NSString *tag) {
  EduStanfordNlpUtilXMLUtils_initialize();
  id<JavaUtilList> sents = EduStanfordNlpUtilGenerics_newArrayList();
  @try {
    sents = EduStanfordNlpUtilXMLUtils_getTextContentFromTagsFromFileSAXExceptionWithJavaIoFile_withNSString_(f, tag);
  }
  @catch (OrgXmlSaxSAXException *e) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithId:e];
  }
  return sents;
}

id<JavaUtilList> EduStanfordNlpUtilXMLUtils_getTextContentFromTagsFromFileSAXExceptionWithJavaIoFile_withNSString_(JavaIoFile *f, NSString *tag) {
  EduStanfordNlpUtilXMLUtils_initialize();
  id<JavaUtilList> sents = EduStanfordNlpUtilGenerics_newArrayList();
  @try {
    JavaxXmlParsersDocumentBuilderFactory *dbf = JavaxXmlParsersDocumentBuilderFactory_newInstance();
    JavaxXmlParsersDocumentBuilder *db = [((JavaxXmlParsersDocumentBuilderFactory *) nil_chk(dbf)) newDocumentBuilder];
    id<OrgW3cDomDocument> doc = [((JavaxXmlParsersDocumentBuilder *) nil_chk(db)) parseWithJavaIoFile:f];
    [((id<OrgW3cDomElement>) nil_chk([((id<OrgW3cDomDocument>) nil_chk(doc)) getDocumentElement])) normalize];
    id<OrgW3cDomNodeList> nodeList = [doc getElementsByTagNameWithNSString:tag];
    for (jint i = 0; i < [((id<OrgW3cDomNodeList>) nil_chk(nodeList)) getLength]; i++) {
      id<OrgW3cDomElement> element = (id<OrgW3cDomElement>) cast_check([nodeList itemWithInt:i], OrgW3cDomElement_class_());
      NSString *raw = [((id<OrgW3cDomElement>) nil_chk(element)) getTextContent];
      JavaLangStringBuilder *builtUp = new_JavaLangStringBuilder_init();
      jboolean inTag = false;
      for (jint j = 0; j < ((jint) [((NSString *) nil_chk(raw)) length]); j++) {
        if ([raw charAtWithInt:j] == '<') {
          inTag = true;
        }
        if (!inTag) {
          (void) [builtUp appendWithChar:[raw charAtWithInt:j]];
        }
        if ([raw charAtWithInt:j] == '>') {
          inTag = false;
        }
      }
      [((id<JavaUtilList>) nil_chk(sents)) addWithId:[builtUp description]];
    }
  }
  @catch (JavaIoIOException *e) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithId:e];
  }
  @catch (JavaxXmlParsersParserConfigurationException *e) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithId:e];
  }
  return sents;
}

id<JavaUtilList> EduStanfordNlpUtilXMLUtils_getTagElementsFromFileWithJavaIoFile_withNSString_(JavaIoFile *f, NSString *tag) {
  EduStanfordNlpUtilXMLUtils_initialize();
  id<JavaUtilList> sents = EduStanfordNlpUtilGenerics_newArrayList();
  @try {
    sents = EduStanfordNlpUtilXMLUtils_getTagElementsFromFileSAXExceptionWithJavaIoFile_withNSString_(f, tag);
  }
  @catch (OrgXmlSaxSAXException *e) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithId:e];
  }
  return sents;
}

id<JavaUtilList> EduStanfordNlpUtilXMLUtils_getTagElementsFromFileSAXExceptionWithJavaIoFile_withNSString_(JavaIoFile *f, NSString *tag) {
  EduStanfordNlpUtilXMLUtils_initialize();
  id<JavaUtilList> sents = EduStanfordNlpUtilGenerics_newArrayList();
  @try {
    JavaxXmlParsersDocumentBuilderFactory *dbf = JavaxXmlParsersDocumentBuilderFactory_newInstance();
    JavaxXmlParsersDocumentBuilder *db = [((JavaxXmlParsersDocumentBuilderFactory *) nil_chk(dbf)) newDocumentBuilder];
    id<OrgW3cDomDocument> doc = [((JavaxXmlParsersDocumentBuilder *) nil_chk(db)) parseWithJavaIoFile:f];
    [((id<OrgW3cDomElement>) nil_chk([((id<OrgW3cDomDocument>) nil_chk(doc)) getDocumentElement])) normalize];
    id<OrgW3cDomNodeList> nodeList = [doc getElementsByTagNameWithNSString:tag];
    for (jint i = 0; i < [((id<OrgW3cDomNodeList>) nil_chk(nodeList)) getLength]; i++) {
      id<OrgW3cDomElement> element = (id<OrgW3cDomElement>) cast_check([nodeList itemWithInt:i], OrgW3cDomElement_class_());
      [((id<JavaUtilList>) nil_chk(sents)) addWithId:element];
    }
  }
  @catch (JavaIoIOException *e) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithId:e];
  }
  @catch (JavaxXmlParsersParserConfigurationException *e) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithId:e];
  }
  return sents;
}

JavaxXmlParsersDocumentBuilder *EduStanfordNlpUtilXMLUtils_getXmlParser() {
  EduStanfordNlpUtilXMLUtils_initialize();
  JavaxXmlParsersDocumentBuilder *db = nil;
  @try {
    JavaxXmlParsersDocumentBuilderFactory *dbf = JavaxXmlParsersDocumentBuilderFactory_newInstance();
    [((JavaxXmlParsersDocumentBuilderFactory *) nil_chk(dbf)) setValidatingWithBoolean:false];
    [dbf setFeatureWithNSString:@"http://apache.org/xml/features/nonvalidating/load-dtd-grammar" withBoolean:false];
    [dbf setFeatureWithNSString:@"http://apache.org/xml/features/nonvalidating/load-external-dtd" withBoolean:false];
    db = [dbf newDocumentBuilder];
    [((JavaxXmlParsersDocumentBuilder *) nil_chk(db)) setErrorHandlerWithOrgXmlSaxErrorHandler:new_EduStanfordNlpUtilXMLUtils_SAXErrorHandler_init()];
  }
  @catch (JavaxXmlParsersParserConfigurationException *e) {
    (void) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printfWithNSString:@"%s: Unable to create XML parser\n" withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ [EduStanfordNlpUtilXMLUtils_class_() getName] } count:1 type:NSObject_class_()]];
    [((JavaxXmlParsersParserConfigurationException *) nil_chk(e)) printStackTrace];
  }
  @catch (JavaLangUnsupportedOperationException *e) {
    (void) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printfWithNSString:@"%s: API error while setting up XML parser. Check your JAXP version\n" withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ [EduStanfordNlpUtilXMLUtils_class_() getName] } count:1 type:NSObject_class_()]];
    [((JavaLangUnsupportedOperationException *) nil_chk(e)) printStackTrace];
  }
  return db;
}

JavaxXmlParsersDocumentBuilder *EduStanfordNlpUtilXMLUtils_getValidatingXmlParserWithJavaIoFile_(JavaIoFile *schemaFile) {
  EduStanfordNlpUtilXMLUtils_initialize();
  JavaxXmlParsersDocumentBuilder *db = nil;
  @try {
    JavaxXmlParsersDocumentBuilderFactory *dbf = JavaxXmlParsersDocumentBuilderFactory_newInstance();
    JavaxXmlValidationSchemaFactory *factory = JavaxXmlValidationSchemaFactory_newInstanceWithNSString_(JavaxXmlXMLConstants_W3C_XML_SCHEMA_NS_URI);
    JavaxXmlValidationSchema *schema = [((JavaxXmlValidationSchemaFactory *) nil_chk(factory)) newSchemaWithJavaIoFile:schemaFile];
    [((JavaxXmlParsersDocumentBuilderFactory *) nil_chk(dbf)) setSchemaWithJavaxXmlValidationSchema:schema];
    db = [dbf newDocumentBuilder];
    [((JavaxXmlParsersDocumentBuilder *) nil_chk(db)) setErrorHandlerWithOrgXmlSaxErrorHandler:new_EduStanfordNlpUtilXMLUtils_SAXErrorHandler_init()];
  }
  @catch (JavaxXmlParsersParserConfigurationException *e) {
    (void) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printfWithNSString:@"%s: Unable to create XML parser\n" withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ [EduStanfordNlpUtilXMLUtils_class_() getName] } count:1 type:NSObject_class_()]];
    [((JavaxXmlParsersParserConfigurationException *) nil_chk(e)) printStackTrace];
  }
  @catch (OrgXmlSaxSAXException *e) {
    (void) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printfWithNSString:@"%s: XML parsing exception while loading schema %s\n" withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ [EduStanfordNlpUtilXMLUtils_class_() getName], [((JavaIoFile *) nil_chk(schemaFile)) getPath] } count:2 type:NSObject_class_()]];
    [((OrgXmlSaxSAXException *) nil_chk(e)) printStackTrace];
  }
  @catch (JavaLangUnsupportedOperationException *e) {
    (void) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printfWithNSString:@"%s: API error while setting up XML parser. Check your JAXP version\n" withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ [EduStanfordNlpUtilXMLUtils_class_() getName] } count:1 type:NSObject_class_()]];
    [((JavaLangUnsupportedOperationException *) nil_chk(e)) printStackTrace];
  }
  return db;
}

NSString *EduStanfordNlpUtilXMLUtils_stripTagsWithJavaIoReader_withJavaUtilList_withBoolean_(JavaIoReader *r, id<JavaUtilList> mapBack, jboolean markLineBreaks) {
  EduStanfordNlpUtilXMLUtils_initialize();
  if (mapBack != nil) {
    [mapBack clear];
  }
  JavaLangStringBuilder *result = new_JavaLangStringBuilder_init();
  @try {
    jint position = 0;
    do {
      NSString *text = EduStanfordNlpUtilXMLUtils_readUntilTagWithJavaIoReader_(r);
      if (((jint) [((NSString *) nil_chk(text)) length]) > 0) {
        for (jint i = 0; i < ((jint) [text length]); i++) {
          (void) [result appendWithChar:[text charAtWithInt:i]];
          if (mapBack != nil) {
            [mapBack addWithId:JavaLangInteger_valueOfWithInt_(position + i)];
          }
        }
        position += ((jint) [text length]);
      }
      NSString *tag = EduStanfordNlpUtilXMLUtils_readTagWithJavaIoReader_(r);
      if (tag == nil) {
        break;
      }
      if (markLineBreaks && EduStanfordNlpUtilXMLUtils_isBreakingWithEduStanfordNlpUtilXMLUtils_XMLTag_(EduStanfordNlpUtilXMLUtils_parseTagWithNSString_(tag))) {
        (void) [result appendWithNSString:@"\n"];
        if (mapBack != nil) {
          [mapBack addWithId:JavaLangInteger_valueOfWithInt_(-position)];
        }
      }
      position += ((jint) [tag length]);
    }
    while (true);
  }
  @catch (JavaIoIOException *e) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"Error reading string"];
    [((JavaIoIOException *) nil_chk(e)) printStackTrace];
  }
  return [result description];
}

jboolean EduStanfordNlpUtilXMLUtils_isBreakingWithNSString_(NSString *tag) {
  EduStanfordNlpUtilXMLUtils_initialize();
  return [((id<JavaUtilSet>) nil_chk(EduStanfordNlpUtilXMLUtils_breakingTags)) containsWithId:tag];
}

jboolean EduStanfordNlpUtilXMLUtils_isBreakingWithEduStanfordNlpUtilXMLUtils_XMLTag_(EduStanfordNlpUtilXMLUtils_XMLTag *tag) {
  EduStanfordNlpUtilXMLUtils_initialize();
  return [((id<JavaUtilSet>) nil_chk(EduStanfordNlpUtilXMLUtils_breakingTags)) containsWithId:((EduStanfordNlpUtilXMLUtils_XMLTag *) nil_chk(tag))->name_];
}

NSString *EduStanfordNlpUtilXMLUtils_readUntilTagWithJavaIoReader_(JavaIoReader *r) {
  EduStanfordNlpUtilXMLUtils_initialize();
  if (![((JavaIoReader *) nil_chk(r)) ready]) {
    return @"";
  }
  JavaLangStringBuilder *b = new_JavaLangStringBuilder_init();
  jint c = [r read];
  while (c >= 0 && c != '<') {
    (void) [b appendWithChar:(jchar) c];
    c = [r read];
  }
  return [b description];
}

EduStanfordNlpUtilXMLUtils_XMLTag *EduStanfordNlpUtilXMLUtils_readAndParseTagWithJavaIoReader_(JavaIoReader *r) {
  EduStanfordNlpUtilXMLUtils_initialize();
  NSString *s = EduStanfordNlpUtilXMLUtils_readTagWithJavaIoReader_(r);
  if (s == nil) {
    return nil;
  }
  EduStanfordNlpUtilXMLUtils_XMLTag *ret = nil;
  @try {
    ret = new_EduStanfordNlpUtilXMLUtils_XMLTag_initWithNSString_(s);
  }
  @catch (JavaLangException *e) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$C", @"Failed to handle |", s, '|')];
  }
  return ret;
}

NSString *EduStanfordNlpUtilXMLUtils_unescapeStringForXMLWithNSString_(NSString *s) {
  EduStanfordNlpUtilXMLUtils_initialize();
  JavaLangStringBuilder *result = new_JavaLangStringBuilder_init();
  JavaUtilRegexMatcher *m = [((JavaUtilRegexPattern *) nil_chk(EduStanfordNlpUtilXMLUtils_xmlEscapingPattern)) matcherWithJavaLangCharSequence:s];
  jint end = 0;
  while ([((JavaUtilRegexMatcher *) nil_chk(m)) find]) {
    jint start = [m start];
    (void) [result appendWithNSString:[((NSString *) nil_chk(s)) substring:end endIndex:start]];
    end = [m end];
    (void) [result appendWithChar:EduStanfordNlpUtilXMLUtils_translateWithNSString_([s substring:start endIndex:end])];
  }
  (void) [result appendWithNSString:[((NSString *) nil_chk(s)) substring:end endIndex:((jint) [s length])]];
  return [result description];
}

jchar EduStanfordNlpUtilXMLUtils_translateWithNSString_(NSString *s) {
  EduStanfordNlpUtilXMLUtils_initialize();
  switch (JreIndexOfStr(s, (id[]){ @"&amp;", @"&lt;", @"&Lt;", @"&gt;", @"&Gt;", @"&quot;", @"&apos;", @"&ast;", @"&sharp;", @"&equals;", @"&nbsp;", @"&iexcl;", @"&cent;", @"&shilling;", @"&pound;", @"&curren;", @"&yen;", @"&brvbar;", @"&sect;", @"&uml;", @"&copy;", @"&ordf;", @"&laquo; ", @"&not;", @"&shy; ", @"&reg;", @"&macr;", @"&deg;", @"&plusmn;", @"&sup2;", @"&sup3;", @"&acute;", @"&micro;", @"&middot;", @"&cedil;", @"&sup1;", @"&ordm;", @"&raquo;", @"&frac14; ", @"&frac12;", @"&frac34; ", @"&iquest;", @"&Agrave;", @"&Aacute;", @"&Acirc;", @"&Atilde;", @"&Auml;", @"&Aring;", @"&AElig;", @"&Ccedil;", @"&Egrave;", @"&Eacute;", @"&Ecirc;", @"&Euml;", @"&Igrave;", @"&Iacute;", @"&Icirc;", @"&Iuml;", @"&ETH;", @"&Ntilde;", @"&Ograve;", @"&Oacute;", @"&Ocirc;", @"&Otilde;", @"&Ouml;", @"&times;", @"&Oslash;", @"&Ugrave;", @"&Uacute;", @"&Ucirc;", @"&Uuml;", @"&Yacute;", @"&THORN;", @"&szlig;", @"&agrave;", @"&aacute;", @"&acirc;", @"&atilde;", @"&auml;", @"&aring;", @"&aelig;", @"&ccedil;", @"&egrave;", @"&eacute;", @"&ecirc;", @"&euml; ", @"&igrave;", @"&iacute;", @"&icirc;", @"&iuml;", @"&eth;", @"&ntilde;", @"&ograve;", @"&oacute;", @"&ocirc;", @"&otilde;", @"&ouml;", @"&divide;", @"&oslash;", @"&ugrave;", @"&uacute;", @"&ucirc;", @"&uuml;", @"&yacute;", @"&thorn;", @"&yuml;", @"&OElig;", @"&oelig;", @"&Scaron;", @"&scaron;", @"&Yuml;", @"&circ;", @"&tilde;", @"&lrm;", @"&rlm;", @"&ndash;", @"&mdash;", @"&lsquo;", @"&rsquo;", @"&sbquo;", @"&ldquo;", @"&bquo;", @"&bq;", @"&rdquo;", @"&equo;", @"&bdquo;", @"&sim;", @"&radic;", @"&le;", @"&ge;", @"&larr;", @"&darr;", @"&rarr;", @"&hellip;", @"&prime;", @"&Prime;", @"&ins;", @"&trade;", @"&Alpha;", @"&Agr;", @"&Beta;", @"&Bgr;", @"&Gamma;", @"&Ggr;", @"&Delta;", @"&Dgr;", @"&Epsilon;", @"&Egr;", @"&Zeta;", @"&Zgr;", @"&Eta;", @"&Theta;", @"&THgr;", @"&Iota;", @"&Igr;", @"&Kappa;", @"&Kgr;", @"&Lambda;", @"&Lgr;", @"&Mu;", @"&Mgr;", @"&Nu;", @"&Ngr;", @"&Xi;", @"&Xgr;", @"&Omicron;", @"&Ogr;", @"&Pi;", @"&Pgr;", @"&Rho;", @"&Rgr;", @"&Sigma;", @"&Sgr;", @"&Tau;", @"&Tgr;", @"&Upsilon;", @"&Ugr;", @"&Phi;", @"&PHgr;", @"&Chi;", @"&KHgr;", @"&Psi;", @"&PSgr;", @"&Omega;", @"&OHgr;", @"&alpha;", @"&agr;", @"&beta;", @"&bgr;", @"&gamma;", @"&ggr;", @"&delta;", @"&dgr;", @"&epsilon;", @"&egr;", @"&zeta;", @"&zgr;", @"&eta;", @"&eegr;", @"&theta;", @"&thgr;", @"&iota;", @"&igr;", @"&kappa;", @"&kgr;", @"&lambda;", @"&lgr;", @"&mu;", @"&mgr;", @"&nu;", @"&ngr;", @"&xi;", @"&xgr;", @"&omicron;", @"&ogr;", @"&pi;", @"&pgr;", @"&rho;", @"&rgr;", @"&sigma;", @"&sgr;", @"&tau;", @"&tgr;", @"&upsilon;", @"&ugr;", @"&phi;", @"&phgr;", @"&chi;", @"&khgr;", @"&psi;", @"&psgr;", @"&omega;", @"&ohgr;", @"&bull;", @"&percnt;", @"&plus;", @"&dash;", @"&abreve;", @"&amacr;", @"&ape;", @"&aogon;", @"&Amacr;", @"&cacute;", @"&ccaron;", @"&ccirc;", @"&Ccaron;", @"&dcaron;", @"&ecaron;", @"&emacr;", @"&eogon;", @"&Emacr;", @"&Ecaron;", @"&lacute;", @"&Lacute;", @"&nacute;", @"&ncaron;", @"&ncedil;", @"&rcaron;", @"&racute;", @"&Rcaron;", @"&omacr;", @"&imacr;", @"&sacute;", @"&scedil;", @"&scirc;", @"&Sacute", @"&Scedil;", @"&tcaron;", @"&tcedil;", @"&umacr;", @"&uring;", @"&wcirc;", @"&Ycirc;", @"&ycirc;", @"&zcaron;", @"&zacute;", @"&Zcaron;", @"&hearts;", @"&infin;", @"&dollar;", @"&sub;", @"&lcub;", @"&sup;", @"&rcub;", @"&lsqb;", @"&rsqb;" }, 286)) {
    case 0:
    return '&';
    case 1:
    case 2:
    return '<';
    case 3:
    case 4:
    return '>';
    case 5:
    return '"';
    case 6:
    return '\'';
    case 7:
    case 8:
    return '-';
    case 9:
    return '=';
    case 10:
    return (jchar) (jint) 0xA0;
    case 11:
    return (jchar) (jint) 0xA1;
    case 12:
    case 13:
    return (jchar) (jint) 0xA2;
    case 14:
    return (jchar) (jint) 0xA3;
    case 15:
    return (jchar) (jint) 0xA4;
    case 16:
    return (jchar) (jint) 0xA5;
    case 17:
    return (jchar) (jint) 0xA6;
    case 18:
    return (jchar) (jint) 0xA7;
    case 19:
    return (jchar) (jint) 0xA8;
    case 20:
    return (jchar) (jint) 0xA9;
    case 21:
    return (jchar) (jint) 0xAA;
    case 22:
    return (jchar) (jint) 0xAB;
    case 23:
    return (jchar) (jint) 0xAC;
    case 24:
    return (jchar) (jint) 0xAD;
    case 25:
    return (jchar) (jint) 0xAE;
    case 26:
    return (jchar) (jint) 0xAF;
    case 27:
    return (jchar) (jint) 0xB0;
    case 28:
    return (jchar) (jint) 0xB1;
    case 29:
    return (jchar) (jint) 0xB2;
    case 30:
    return (jchar) (jint) 0xB3;
    case 31:
    return (jchar) (jint) 0xB4;
    case 32:
    return (jchar) (jint) 0xB5;
    case 33:
    return (jchar) (jint) 0xB7;
    case 34:
    return (jchar) (jint) 0xB8;
    case 35:
    return (jchar) (jint) 0xB9;
    case 36:
    return (jchar) (jint) 0xBA;
    case 37:
    return (jchar) (jint) 0xBB;
    case 38:
    return (jchar) (jint) 0xBC;
    case 39:
    return (jchar) (jint) 0xBD;
    case 40:
    return (jchar) (jint) 0xBE;
    case 41:
    return (jchar) (jint) 0xBF;
    case 42:
    return (jchar) (jint) 0xC0;
    case 43:
    return (jchar) (jint) 0xC1;
    case 44:
    return (jchar) (jint) 0xC2;
    case 45:
    return (jchar) (jint) 0xC3;
    case 46:
    return (jchar) (jint) 0xC4;
    case 47:
    return (jchar) (jint) 0xC5;
    case 48:
    return (jchar) (jint) 0xC6;
    case 49:
    return (jchar) (jint) 0xC7;
    case 50:
    return (jchar) (jint) 0xC8;
    case 51:
    return (jchar) (jint) 0xC9;
    case 52:
    return (jchar) (jint) 0xCA;
    case 53:
    return (jchar) (jint) 0xCB;
    case 54:
    return (jchar) (jint) 0xCC;
    case 55:
    return (jchar) (jint) 0xCD;
    case 56:
    return (jchar) (jint) 0xCE;
    case 57:
    return (jchar) (jint) 0xCF;
    case 58:
    return (jchar) (jint) 0xD0;
    case 59:
    return (jchar) (jint) 0xD1;
    case 60:
    return (jchar) (jint) 0xD2;
    case 61:
    return (jchar) (jint) 0xD3;
    case 62:
    return (jchar) (jint) 0xD4;
    case 63:
    return (jchar) (jint) 0xD5;
    case 64:
    return (jchar) (jint) 0xD6;
    case 65:
    return (jchar) (jint) 0xD7;
    case 66:
    return (jchar) (jint) 0xD8;
    case 67:
    return (jchar) (jint) 0xD9;
    case 68:
    return (jchar) (jint) 0xDA;
    case 69:
    return (jchar) (jint) 0xDB;
    case 70:
    return (jchar) (jint) 0xDC;
    case 71:
    return (jchar) (jint) 0xDD;
    case 72:
    return (jchar) (jint) 0xDE;
    case 73:
    return (jchar) (jint) 0xDF;
    case 74:
    return (jchar) (jint) 0xE0;
    case 75:
    return (jchar) (jint) 0xE1;
    case 76:
    return (jchar) (jint) 0xE2;
    case 77:
    return (jchar) (jint) 0xE3;
    case 78:
    return (jchar) (jint) 0xE4;
    case 79:
    return (jchar) (jint) 0xE5;
    case 80:
    return (jchar) (jint) 0xE6;
    case 81:
    return (jchar) (jint) 0xE7;
    case 82:
    return (jchar) (jint) 0xE8;
    case 83:
    return (jchar) (jint) 0xE9;
    case 84:
    return (jchar) (jint) 0xEA;
    case 85:
    return (jchar) (jint) 0xEB;
    case 86:
    return (jchar) (jint) 0xEC;
    case 87:
    return (jchar) (jint) 0xED;
    case 88:
    return (jchar) (jint) 0xEE;
    case 89:
    return (jint) 0xEF;
    case 90:
    return (jchar) (jint) 0xF0;
    case 91:
    return (jchar) (jint) 0xF1;
    case 92:
    return (jchar) (jint) 0xF2;
    case 93:
    return (jchar) (jint) 0xF3;
    case 94:
    return (jchar) (jint) 0xF4;
    case 95:
    return (jchar) (jint) 0xF5;
    case 96:
    return (jchar) (jint) 0xF6;
    case 97:
    return (jchar) (jint) 0xF7;
    case 98:
    return (jchar) (jint) 0xF8;
    case 99:
    return (jchar) (jint) 0xF9;
    case 100:
    return (jchar) (jint) 0xFA;
    case 101:
    return (jchar) (jint) 0xFB;
    case 102:
    return (jchar) (jint) 0xFC;
    case 103:
    return (jchar) (jint) 0xFD;
    case 104:
    return (jchar) (jint) 0xFE;
    case 105:
    return (jchar) (jint) 0xFF;
    case 106:
    return (jchar) (jint) 0x152;
    case 107:
    return (jchar) (jint) 0x153;
    case 108:
    return (jchar) (jint) 0x160;
    case 109:
    return (jchar) (jint) 0x161;
    case 110:
    return (jchar) (jint) 0x178;
    case 111:
    return (jchar) (jint) 0x2C6;
    case 112:
    return (jchar) (jint) 0x2DC;
    case 113:
    return (jchar) (jint) 0x200E;
    case 114:
    return (jchar) (jint) 0x200F;
    case 115:
    return (jchar) (jint) 0x2013;
    case 116:
    return (jchar) (jint) 0x2014;
    case 117:
    return (jchar) (jint) 0x2018;
    case 118:
    return (jchar) (jint) 0x2019;
    case 119:
    return (jchar) (jint) 0x201A;
    case 120:
    case 121:
    case 122:
    return (jchar) (jint) 0x201C;
    case 123:
    case 124:
    return (jchar) 0X201D;
    case 125:
    return (jchar) (jint) 0x201E;
    case 126:
    return (jchar) (jint) 0x223C;
    case 127:
    return (jchar) (jint) 0x221A;
    case 128:
    return (jchar) (jint) 0x2264;
    case 129:
    return (jchar) (jint) 0x2265;
    case 130:
    return (jchar) (jint) 0x2190;
    case 131:
    return (jchar) (jint) 0x2193;
    case 132:
    return (jchar) (jint) 0x2192;
    case 133:
    return (jchar) (jint) 0x2026;
    case 134:
    return (jchar) (jint) 0x2032;
    case 135:
    case 136:
    return (jchar) (jint) 0x2033;
    case 137:
    return (jchar) (jint) 0x2122;
    case 138:
    case 139:
    return (jchar) (jint) 0x391;
    case 140:
    case 141:
    return (jchar) (jint) 0x392;
    case 142:
    case 143:
    return (jchar) (jint) 0x393;
    case 144:
    case 145:
    return (jchar) (jint) 0x394;
    case 146:
    case 147:
    return (jchar) (jint) 0x395;
    case 148:
    case 149:
    return (jchar) (jint) 0x396;
    case 150:
    return (jchar) (jint) 0x397;
    case 151:
    case 152:
    return (jchar) (jint) 0x398;
    case 153:
    case 154:
    return (jchar) (jint) 0x399;
    case 155:
    case 156:
    return (jchar) (jint) 0x39A;
    case 157:
    case 158:
    return (jchar) (jint) 0x39B;
    case 159:
    case 160:
    return (jchar) (jint) 0x39C;
    case 161:
    case 162:
    return (jchar) (jint) 0x39D;
    case 163:
    case 164:
    return (jchar) (jint) 0x39E;
    case 165:
    case 166:
    return (jchar) (jint) 0x39F;
    case 167:
    case 168:
    return (jchar) (jint) 0x3A0;
    case 169:
    case 170:
    return (jchar) (jint) 0x3A1;
    case 171:
    case 172:
    return (jchar) (jint) 0x3A3;
    case 173:
    case 174:
    return (jchar) (jint) 0x3A4;
    case 175:
    case 176:
    return (jchar) (jint) 0x3A5;
    case 177:
    case 178:
    return (jchar) (jint) 0x3A6;
    case 179:
    case 180:
    return (jchar) (jint) 0x3A7;
    case 181:
    case 182:
    return (jchar) (jint) 0x3A8;
    case 183:
    case 184:
    return (jchar) (jint) 0x3A9;
    case 185:
    case 186:
    return (jchar) (jint) 0x3B1;
    case 187:
    case 188:
    return (jchar) (jint) 0x3B2;
    case 189:
    case 190:
    return (jchar) (jint) 0x3B3;
    case 191:
    case 192:
    return (jchar) (jint) 0x3B4;
    case 193:
    case 194:
    return (jchar) (jint) 0x3B5;
    case 195:
    case 196:
    return (jchar) (jint) 0x3B6;
    case 197:
    case 198:
    return (jchar) (jint) 0x3B7;
    case 199:
    case 200:
    return (jchar) (jint) 0x3B8;
    case 201:
    case 202:
    return (jchar) (jint) 0x3B9;
    case 203:
    case 204:
    return (jchar) (jint) 0x3BA;
    case 205:
    case 206:
    return (jchar) (jint) 0x3BB;
    case 207:
    case 208:
    return (jchar) (jint) 0x3BC;
    case 209:
    case 210:
    return (jchar) (jint) 0x3BD;
    case 211:
    case 212:
    return (jchar) (jint) 0x3BE;
    case 213:
    case 214:
    return (jchar) (jint) 0x3BF;
    case 215:
    case 216:
    return (jchar) (jint) 0x3C0;
    case 217:
    case 218:
    return (jchar) (jint) 0x3C1;
    case 219:
    case 220:
    return (jchar) (jint) 0x3C3;
    case 221:
    case 222:
    return (jchar) (jint) 0x3C4;
    case 223:
    case 224:
    return (jchar) (jint) 0x3C5;
    case 225:
    case 226:
    return (jchar) (jint) 0x3C6;
    case 227:
    case 228:
    return (jchar) (jint) 0x3C7;
    case 229:
    case 230:
    return (jchar) (jint) 0x3C8;
    case 231:
    case 232:
    return (jchar) (jint) 0x3C9;
    case 233:
    return (jchar) (jint) 0x2022;
    case 234:
    return '%';
    case 235:
    return '+';
    case 236:
    return '-';
    case 237:
    case 238:
    case 239:
    case 240:
    return 'a';
    case 241:
    return 'A';
    case 242:
    case 243:
    case 244:
    return 'c';
    case 245:
    return 'C';
    case 246:
    return 'd';
    case 247:
    case 248:
    case 249:
    return 'e';
    case 250:
    case 251:
    return 'E';
    case 252:
    return 'l';
    case 253:
    return 'L';
    case 254:
    case 255:
    case 256:
    return 'n';
    case 257:
    case 258:
    return 'r';
    case 259:
    return 'R';
    case 260:
    return 'o';
    case 261:
    return 'i';
    case 262:
    case 263:
    case 264:
    return 's';
    case 265:
    case 266:
    return 'S';
    case 267:
    case 268:
    return 't';
    case 269:
    case 270:
    return 'u';
    case 271:
    return 'w';
    case 272:
    return 'Y';
    case 273:
    return 'y';
    case 274:
    case 275:
    return 'z';
    case 276:
    return 'Z';
    case 277:
    return (jchar) (jint) 0x2665;
    case 278:
    return (jchar) (jint) 0x221E;
    case 279:
    return '$';
    case 280:
    case 281:
    return (jchar) (jint) 0x2282;
    case 282:
    case 283:
    return (jchar) (jint) 0x2283;
    case 284:
    return '[';
    case 285:
    return ']';
    default:
    return ' ';
  }
}

NSString *EduStanfordNlpUtilXMLUtils_escapeXMLWithNSString_(NSString *inArg) {
  EduStanfordNlpUtilXMLUtils_initialize();
  jint leng = ((jint) [((NSString *) nil_chk(inArg)) length]);
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_initWithInt_(leng);
  for (jint i = 0; i < leng; i++) {
    jchar c = [inArg charAtWithInt:i];
    if (c == '&') {
      (void) [sb appendWithNSString:@"&amp;"];
    }
    else if (c == '<') {
      (void) [sb appendWithNSString:@"&lt;"];
    }
    else if (c == '>') {
      (void) [sb appendWithNSString:@"&gt;"];
    }
    else if (c == '"') {
      (void) [sb appendWithNSString:@"&quot;"];
    }
    else if (c == '\'') {
      (void) [sb appendWithNSString:@"&apos;"];
    }
    else {
      (void) [sb appendWithChar:c];
    }
  }
  return [sb description];
}

NSString *EduStanfordNlpUtilXMLUtils_escapeElementXMLWithNSString_(NSString *inArg) {
  EduStanfordNlpUtilXMLUtils_initialize();
  jint leng = ((jint) [((NSString *) nil_chk(inArg)) length]);
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_initWithInt_(leng);
  for (jint i = 0; i < leng; i++) {
    jchar c = [inArg charAtWithInt:i];
    if (c == '&') {
      (void) [sb appendWithNSString:@"&amp;"];
    }
    else if (c == '<') {
      (void) [sb appendWithNSString:@"&lt;"];
    }
    else if (c == '>') {
      (void) [sb appendWithNSString:@"&gt;"];
    }
    else {
      (void) [sb appendWithChar:c];
    }
  }
  return [sb description];
}

NSString *EduStanfordNlpUtilXMLUtils_escapeAttributeXMLWithNSString_(NSString *inArg) {
  EduStanfordNlpUtilXMLUtils_initialize();
  jint leng = ((jint) [((NSString *) nil_chk(inArg)) length]);
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_initWithInt_(leng);
  for (jint i = 0; i < leng; i++) {
    jchar c = [inArg charAtWithInt:i];
    if (c == '&') {
      (void) [sb appendWithNSString:@"&amp;"];
    }
    else if (c == '"') {
      (void) [sb appendWithNSString:@"&quot;"];
    }
    else {
      (void) [sb appendWithChar:c];
    }
  }
  return [sb description];
}

NSString *EduStanfordNlpUtilXMLUtils_escapeTextAroundXMLTagsWithNSString_(NSString *s) {
  EduStanfordNlpUtilXMLUtils_initialize();
  JavaLangStringBuilder *result = new_JavaLangStringBuilder_init();
  JavaIoReader *r = new_JavaIoStringReader_initWithNSString_(s);
  @try {
    do {
      NSString *text = EduStanfordNlpUtilXMLUtils_readUntilTagWithJavaIoReader_(r);
      (void) [result appendWithNSString:EduStanfordNlpUtilXMLUtils_escapeXMLWithNSString_(text)];
      EduStanfordNlpUtilXMLUtils_XMLTag *tag = EduStanfordNlpUtilXMLUtils_readAndParseTagWithJavaIoReader_(r);
      if (tag == nil) {
        break;
      }
      (void) [result appendWithNSString:[tag description]];
    }
    while (true);
  }
  @catch (JavaIoIOException *e) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"Error reading string"];
    [((JavaIoIOException *) nil_chk(e)) printStackTrace];
  }
  return [result description];
}

jint EduStanfordNlpUtilXMLUtils_findSpaceWithNSString_withInt_(NSString *haystack, jint begin) {
  EduStanfordNlpUtilXMLUtils_initialize();
  jint space = [((NSString *) nil_chk(haystack)) indexOf:' ' fromIndex:begin];
  jint nbsp = [haystack indexOf:0x00a0 fromIndex:begin];
  if (space == -1 && nbsp == -1) {
    return -1;
  }
  else if (space >= 0 && nbsp >= 0) {
    return JavaLangMath_minWithInt_withInt_(space, nbsp);
  }
  else {
    return JavaLangMath_maxWithInt_withInt_(space, nbsp);
  }
}

NSString *EduStanfordNlpUtilXMLUtils_readTagWithJavaIoReader_(JavaIoReader *r) {
  EduStanfordNlpUtilXMLUtils_initialize();
  if (![((JavaIoReader *) nil_chk(r)) ready]) {
    return nil;
  }
  JavaLangStringBuilder *b = new_JavaLangStringBuilder_initWithNSString_(@"<");
  jint c = [r read];
  while (c >= 0) {
    (void) [b appendWithChar:(jchar) c];
    if (c == '>') {
      break;
    }
    c = [r read];
  }
  if ([b length] == 1) {
    return nil;
  }
  return [b description];
}

EduStanfordNlpUtilXMLUtils_XMLTag *EduStanfordNlpUtilXMLUtils_parseTagWithNSString_(NSString *tagString) {
  EduStanfordNlpUtilXMLUtils_initialize();
  if (tagString == nil || [tagString isEmpty]) {
    return nil;
  }
  if ([tagString charAtWithInt:0] != '<' || [tagString charAtWithInt:((jint) [tagString length]) - 1] != '>') {
    return nil;
  }
  return new_EduStanfordNlpUtilXMLUtils_XMLTag_initWithNSString_(tagString);
}

id<OrgW3cDomDocument> EduStanfordNlpUtilXMLUtils_readDocumentFromFileWithNSString_(NSString *filename) {
  EduStanfordNlpUtilXMLUtils_initialize();
  OrgXmlSaxInputSource *in = new_OrgXmlSaxInputSource_initWithJavaIoReader_(new_JavaIoFileReader_initWithNSString_(filename));
  JavaxXmlParsersDocumentBuilderFactory *factory = JavaxXmlParsersDocumentBuilderFactory_newInstance();
  [((JavaxXmlParsersDocumentBuilderFactory *) nil_chk(factory)) setNamespaceAwareWithBoolean:false];
  JavaxXmlParsersDocumentBuilder *db = [factory newDocumentBuilder];
  [((JavaxXmlParsersDocumentBuilder *) nil_chk(db)) setErrorHandlerWithOrgXmlSaxErrorHandler:new_EduStanfordNlpUtilXMLUtils_SAXErrorHandler_init()];
  return [db parseWithOrgXmlSaxInputSource:in];
}

id<OrgW3cDomDocument> EduStanfordNlpUtilXMLUtils_readDocumentFromStringWithNSString_(NSString *s) {
  EduStanfordNlpUtilXMLUtils_initialize();
  OrgXmlSaxInputSource *in = new_OrgXmlSaxInputSource_initWithJavaIoReader_(new_JavaIoStringReader_initWithNSString_(s));
  JavaxXmlParsersDocumentBuilderFactory *factory = JavaxXmlParsersDocumentBuilderFactory_newInstance();
  [((JavaxXmlParsersDocumentBuilderFactory *) nil_chk(factory)) setNamespaceAwareWithBoolean:false];
  return [((JavaxXmlParsersDocumentBuilder *) nil_chk([factory newDocumentBuilder])) parseWithOrgXmlSaxInputSource:in];
}

void EduStanfordNlpUtilXMLUtils_mainWithNSStringArray_(IOSObjectArray *args) {
  EduStanfordNlpUtilXMLUtils_initialize();
  if ([((NSString *) nil_chk(IOSObjectArray_Get(nil_chk(args), 0))) isEqual:@"-readDoc"]) {
    id<OrgW3cDomDocument> doc = EduStanfordNlpUtilXMLUtils_readDocumentFromFileWithNSString_(IOSObjectArray_Get(args, 1));
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithId:doc];
  }
  else {
    NSString *s = EduStanfordNlpIoIOUtils_slurpFileWithNSString_(IOSObjectArray_Get(args, 0));
    JavaIoReader *r = new_JavaIoStringReader_initWithNSString_(s);
    NSString *tag = EduStanfordNlpUtilXMLUtils_readTagWithJavaIoReader_(r);
    while (tag != nil && ((jint) [tag length]) > 0) {
      (void) EduStanfordNlpUtilXMLUtils_readUntilTagWithJavaIoReader_(r);
      tag = EduStanfordNlpUtilXMLUtils_readTagWithJavaIoReader_(r);
      if (tag == nil || [tag isEmpty]) {
        break;
      }
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@", @"got tag=", new_EduStanfordNlpUtilXMLUtils_XMLTag_initWithNSString_(tag))];
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpUtilXMLUtils)

@implementation EduStanfordNlpUtilXMLUtils_XMLTag

- (instancetype)initWithNSString:(NSString *)tag {
  EduStanfordNlpUtilXMLUtils_XMLTag_initWithNSString_(self, tag);
  return self;
}

- (NSString *)description {
  return text_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "text_", "LNSString;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "name_", "LNSString;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "attributes_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x1, -1, -1, 2, -1 },
    { "isEndTag_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "isSingleTag_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "toString", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", "LEduStanfordNlpUtilXMLUtils;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilXMLUtils_XMLTag = { "XMLTag", "edu.stanford.nlp.util", ptrTable, methods, fields, 7, 0x9, 2, 5, 3, -1, -1, -1, -1 };
  return &_EduStanfordNlpUtilXMLUtils_XMLTag;
}

@end

void EduStanfordNlpUtilXMLUtils_XMLTag_initWithNSString_(EduStanfordNlpUtilXMLUtils_XMLTag *self, NSString *tag) {
  NSObject_init(self);
  if (tag == nil || ((jint) [tag length]) == 0) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"Attempted to parse empty/null tag");
  }
  if ([tag charAtWithInt:0] != '<') {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Tag did not start with <");
  }
  if ([tag charAtWithInt:((jint) [tag length]) - 1] != '>') {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Tag did not end with >");
  }
  self->text_ = tag;
  jint begin = 1;
  if ([tag charAtWithInt:1] == '/') {
    begin = 2;
    self->isEndTag_ = true;
  }
  else {
    self->isEndTag_ = false;
  }
  jint end = ((jint) [tag length]) - 1;
  if ([tag charAtWithInt:((jint) [tag length]) - 2] == '/') {
    end = ((jint) [tag length]) - 2;
    self->isSingleTag_ = true;
  }
  else {
    self->isSingleTag_ = false;
  }
  tag = [tag substring:begin endIndex:end];
  self->attributes_ = EduStanfordNlpUtilGenerics_newHashMap();
  begin = 0;
  end = EduStanfordNlpUtilXMLUtils_findSpaceWithNSString_withInt_(tag, 0);
  if (end < 0) {
    self->name_ = tag;
  }
  else {
    self->name_ = [((NSString *) nil_chk(tag)) substring:begin endIndex:end];
    do {
      begin = end + 1;
      while (begin < ((jint) [tag length]) && [tag charAtWithInt:begin] < (jint) 0x21) {
        begin++;
      }
      if (begin == ((jint) [tag length])) {
        break;
      }
      end = [tag indexOf:'=' fromIndex:begin];
      if (end < 0) {
        NSString *att = [tag substring:begin];
        (void) [((id<JavaUtilMap>) nil_chk(self->attributes_)) putWithId:att withId:@""];
        break;
      }
      NSString *att = [((NSString *) nil_chk([tag substring:begin endIndex:end])) trim];
      begin = end + 1;
      NSString *value = nil;
      if (((jint) [tag length]) > begin) {
        while (begin < ((jint) [tag length]) && [tag charAtWithInt:begin] < (jint) 0x21) {
          begin++;
        }
        if (begin < ((jint) [tag length]) && [tag charAtWithInt:begin] == '"') {
          begin++;
          end = [tag indexOf:'"' fromIndex:begin];
          if (end < 0) {
            break;
          }
          value = [tag substring:begin endIndex:end];
          end++;
        }
        else {
          end = EduStanfordNlpUtilXMLUtils_findSpaceWithNSString_withInt_(tag, begin);
          if (end < 0) {
            end = ((jint) [tag length]);
          }
          value = [tag substring:begin endIndex:end];
        }
      }
      (void) [((id<JavaUtilMap>) nil_chk(self->attributes_)) putWithId:att withId:value];
    }
    while (end < ((jint) [tag length]) - 3);
  }
}

EduStanfordNlpUtilXMLUtils_XMLTag *new_EduStanfordNlpUtilXMLUtils_XMLTag_initWithNSString_(NSString *tag) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilXMLUtils_XMLTag, initWithNSString_, tag)
}

EduStanfordNlpUtilXMLUtils_XMLTag *create_EduStanfordNlpUtilXMLUtils_XMLTag_initWithNSString_(NSString *tag) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilXMLUtils_XMLTag, initWithNSString_, tag)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpUtilXMLUtils_XMLTag)

@implementation EduStanfordNlpUtilXMLUtils_SAXErrorHandler

+ (NSString *)makeBetterErrorStringWithNSString:(NSString *)msg
                 withOrgXmlSaxSAXParseException:(OrgXmlSaxSAXParseException *)ex {
  return EduStanfordNlpUtilXMLUtils_SAXErrorHandler_makeBetterErrorStringWithNSString_withOrgXmlSaxSAXParseException_(msg, ex);
}

- (void)warningWithOrgXmlSaxSAXParseException:(OrgXmlSaxSAXParseException *)exception {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:EduStanfordNlpUtilXMLUtils_SAXErrorHandler_makeBetterErrorStringWithNSString_withOrgXmlSaxSAXParseException_(@"Warning", exception)];
}

- (void)errorWithOrgXmlSaxSAXParseException:(OrgXmlSaxSAXParseException *)exception {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:EduStanfordNlpUtilXMLUtils_SAXErrorHandler_makeBetterErrorStringWithNSString_withOrgXmlSaxSAXParseException_(@"Error", exception)];
}

- (void)fatalErrorWithOrgXmlSaxSAXParseException:(OrgXmlSaxSAXParseException *)ex {
  @throw new_OrgXmlSaxSAXParseException_initWithNSString_withNSString_withNSString_withInt_withInt_(EduStanfordNlpUtilXMLUtils_SAXErrorHandler_makeBetterErrorStringWithNSString_withOrgXmlSaxSAXParseException_(@"Fatal Error", ex), [((OrgXmlSaxSAXParseException *) nil_chk(ex)) getPublicId], [ex getSystemId], [ex getLineNumber], [ex getColumnNumber]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpUtilXMLUtils_SAXErrorHandler_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 3, 3, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(makeBetterErrorStringWithNSString:withOrgXmlSaxSAXParseException:);
  methods[1].selector = @selector(warningWithOrgXmlSaxSAXParseException:);
  methods[2].selector = @selector(errorWithOrgXmlSaxSAXParseException:);
  methods[3].selector = @selector(fatalErrorWithOrgXmlSaxSAXParseException:);
  methods[4].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "makeBetterErrorString", "LNSString;LOrgXmlSaxSAXParseException;", "warning", "LOrgXmlSaxSAXParseException;", "error", "fatalError", "LEduStanfordNlpUtilXMLUtils;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilXMLUtils_SAXErrorHandler = { "SAXErrorHandler", "edu.stanford.nlp.util", ptrTable, methods, NULL, 7, 0xa, 5, 0, 6, -1, -1, -1, -1 };
  return &_EduStanfordNlpUtilXMLUtils_SAXErrorHandler;
}

@end

NSString *EduStanfordNlpUtilXMLUtils_SAXErrorHandler_makeBetterErrorStringWithNSString_withOrgXmlSaxSAXParseException_(NSString *msg, OrgXmlSaxSAXParseException *ex) {
  EduStanfordNlpUtilXMLUtils_SAXErrorHandler_initialize();
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_initWithNSString_(msg);
  (void) [sb appendWithNSString:@": "];
  NSString *str = [((OrgXmlSaxSAXParseException *) nil_chk(ex)) getMessage];
  if ([((NSString *) nil_chk(str)) lastIndexOf:'.'] == ((jint) [str length]) - 1) {
    str = [str substring:0 endIndex:((jint) [str length]) - 1];
  }
  (void) [sb appendWithNSString:str];
  (void) [((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@" at document line "])) appendWithInt:[ex getLineNumber]];
  (void) [((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@", column "])) appendWithInt:[ex getColumnNumber]];
  if ([ex getSystemId] != nil) {
    (void) [((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@" in entity from systemID "])) appendWithNSString:[ex getSystemId]];
  }
  else if ([ex getPublicId] != nil) {
    (void) [((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@" in entity from publicID "])) appendWithNSString:[ex getPublicId]];
  }
  (void) [sb appendWithNSString:@"."];
  return [sb description];
}

void EduStanfordNlpUtilXMLUtils_SAXErrorHandler_init(EduStanfordNlpUtilXMLUtils_SAXErrorHandler *self) {
  NSObject_init(self);
}

EduStanfordNlpUtilXMLUtils_SAXErrorHandler *new_EduStanfordNlpUtilXMLUtils_SAXErrorHandler_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilXMLUtils_SAXErrorHandler, init)
}

EduStanfordNlpUtilXMLUtils_SAXErrorHandler *create_EduStanfordNlpUtilXMLUtils_SAXErrorHandler_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilXMLUtils_SAXErrorHandler, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpUtilXMLUtils_SAXErrorHandler)
