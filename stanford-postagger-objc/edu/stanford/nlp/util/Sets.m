//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/util/Sets.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/util/Generics.h"
#include "edu/stanford/nlp/util/Pair.h"
#include "edu/stanford/nlp/util/Sets.h"
#include "java/io/PrintStream.h"
#include "java/lang/System.h"
#include "java/util/Collections.h"
#include "java/util/Iterator.h"
#include "java/util/Set.h"

@interface EduStanfordNlpUtilSets ()

- (instancetype)init;

@end

__attribute__((unused)) static void EduStanfordNlpUtilSets_init(EduStanfordNlpUtilSets *self);

__attribute__((unused)) static EduStanfordNlpUtilSets *new_EduStanfordNlpUtilSets_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpUtilSets *create_EduStanfordNlpUtilSets_init();

@implementation EduStanfordNlpUtilSets

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpUtilSets_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (id<JavaUtilSet>)crossWithJavaUtilSet:(id<JavaUtilSet>)s1
                        withJavaUtilSet:(id<JavaUtilSet>)s2 {
  return EduStanfordNlpUtilSets_crossWithJavaUtilSet_withJavaUtilSet_(s1, s2);
}

+ (id<JavaUtilSet>)diffWithJavaUtilSet:(id<JavaUtilSet>)s1
                       withJavaUtilSet:(id<JavaUtilSet>)s2 {
  return EduStanfordNlpUtilSets_diffWithJavaUtilSet_withJavaUtilSet_(s1, s2);
}

+ (id<JavaUtilSet>)symmetricDiffWithJavaUtilSet:(id<JavaUtilSet>)s1
                                withJavaUtilSet:(id<JavaUtilSet>)s2 {
  return EduStanfordNlpUtilSets_symmetricDiffWithJavaUtilSet_withJavaUtilSet_(s1, s2);
}

+ (id<JavaUtilSet>)union__WithJavaUtilSet:(id<JavaUtilSet>)s1
                          withJavaUtilSet:(id<JavaUtilSet>)s2 {
  return EduStanfordNlpUtilSets_union__WithJavaUtilSet_withJavaUtilSet_(s1, s2);
}

+ (id<JavaUtilSet>)intersectionWithJavaUtilSet:(id<JavaUtilSet>)s1
                               withJavaUtilSet:(id<JavaUtilSet>)s2 {
  return EduStanfordNlpUtilSets_intersectionWithJavaUtilSet_withJavaUtilSet_(s1, s2);
}

+ (jboolean)intersectsWithJavaUtilSet:(id<JavaUtilSet>)s1
                      withJavaUtilSet:(id<JavaUtilSet>)s2 {
  return EduStanfordNlpUtilSets_intersectsWithJavaUtilSet_withJavaUtilSet_(s1, s2);
}

+ (id<JavaUtilSet>)powerSetWithJavaUtilSet:(id<JavaUtilSet>)s {
  return EduStanfordNlpUtilSets_powerSetWithJavaUtilSet_(s);
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  EduStanfordNlpUtilSets_mainWithNSStringArray_(args);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x9, 0, 1, -1, 2, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x9, 3, 1, -1, 4, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x9, 5, 1, -1, 4, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x9, 6, 1, -1, 4, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x9, 7, 1, -1, 4, -1, -1 },
    { NULL, "Z", 0x9, 8, 1, -1, 9, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x9, 10, 11, -1, 12, -1, -1 },
    { NULL, "V", 0x9, 13, 14, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(crossWithJavaUtilSet:withJavaUtilSet:);
  methods[2].selector = @selector(diffWithJavaUtilSet:withJavaUtilSet:);
  methods[3].selector = @selector(symmetricDiffWithJavaUtilSet:withJavaUtilSet:);
  methods[4].selector = @selector(union__WithJavaUtilSet:withJavaUtilSet:);
  methods[5].selector = @selector(intersectionWithJavaUtilSet:withJavaUtilSet:);
  methods[6].selector = @selector(intersectsWithJavaUtilSet:withJavaUtilSet:);
  methods[7].selector = @selector(powerSetWithJavaUtilSet:);
  methods[8].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "cross", "LJavaUtilSet;LJavaUtilSet;", "<E:Ljava/lang/Object;F:Ljava/lang/Object;>(Ljava/util/Set<TE;>;Ljava/util/Set<TF;>;)Ljava/util/Set<Ledu/stanford/nlp/util/Pair<TE;TF;>;>;", "diff", "<E:Ljava/lang/Object;>(Ljava/util/Set<TE;>;Ljava/util/Set<TE;>;)Ljava/util/Set<TE;>;", "symmetricDiff", "union", "intersection", "intersects", "<E:Ljava/lang/Object;>(Ljava/util/Set<TE;>;Ljava/util/Set<TE;>;)Z", "powerSet", "LJavaUtilSet;", "<E:Ljava/lang/Object;>(Ljava/util/Set<TE;>;)Ljava/util/Set<Ljava/util/Set<TE;>;>;", "main", "[LNSString;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilSets = { "Sets", "edu.stanford.nlp.util", ptrTable, methods, NULL, 7, 0x1, 9, 0, -1, -1, -1, -1, -1 };
  return &_EduStanfordNlpUtilSets;
}

@end

void EduStanfordNlpUtilSets_init(EduStanfordNlpUtilSets *self) {
  NSObject_init(self);
}

EduStanfordNlpUtilSets *new_EduStanfordNlpUtilSets_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilSets, init)
}

EduStanfordNlpUtilSets *create_EduStanfordNlpUtilSets_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilSets, init)
}

id<JavaUtilSet> EduStanfordNlpUtilSets_crossWithJavaUtilSet_withJavaUtilSet_(id<JavaUtilSet> s1, id<JavaUtilSet> s2) {
  EduStanfordNlpUtilSets_initialize();
  id<JavaUtilSet> s = EduStanfordNlpUtilGenerics_newHashSet();
  for (id __strong o1 in nil_chk(s1)) {
    for (id __strong o2 in nil_chk(s2)) {
      [((id<JavaUtilSet>) nil_chk(s)) addWithId:new_EduStanfordNlpUtilPair_initWithId_withId_(o1, o2)];
    }
  }
  return s;
}

id<JavaUtilSet> EduStanfordNlpUtilSets_diffWithJavaUtilSet_withJavaUtilSet_(id<JavaUtilSet> s1, id<JavaUtilSet> s2) {
  EduStanfordNlpUtilSets_initialize();
  id<JavaUtilSet> s = EduStanfordNlpUtilGenerics_newHashSet();
  for (id __strong o in nil_chk(s1)) {
    if (![((id<JavaUtilSet>) nil_chk(s2)) containsWithId:o]) {
      [((id<JavaUtilSet>) nil_chk(s)) addWithId:o];
    }
  }
  return s;
}

id<JavaUtilSet> EduStanfordNlpUtilSets_symmetricDiffWithJavaUtilSet_withJavaUtilSet_(id<JavaUtilSet> s1, id<JavaUtilSet> s2) {
  EduStanfordNlpUtilSets_initialize();
  id<JavaUtilSet> s = EduStanfordNlpUtilGenerics_newHashSet();
  for (id __strong o in nil_chk(s1)) {
    if (![((id<JavaUtilSet>) nil_chk(s2)) containsWithId:o]) {
      [((id<JavaUtilSet>) nil_chk(s)) addWithId:o];
    }
  }
  for (id __strong o in nil_chk(s2)) {
    if (![s1 containsWithId:o]) {
      [((id<JavaUtilSet>) nil_chk(s)) addWithId:o];
    }
  }
  return s;
}

id<JavaUtilSet> EduStanfordNlpUtilSets_union__WithJavaUtilSet_withJavaUtilSet_(id<JavaUtilSet> s1, id<JavaUtilSet> s2) {
  EduStanfordNlpUtilSets_initialize();
  id<JavaUtilSet> s = EduStanfordNlpUtilGenerics_newHashSet();
  [((id<JavaUtilSet>) nil_chk(s)) addAllWithJavaUtilCollection:s1];
  [s addAllWithJavaUtilCollection:s2];
  return s;
}

id<JavaUtilSet> EduStanfordNlpUtilSets_intersectionWithJavaUtilSet_withJavaUtilSet_(id<JavaUtilSet> s1, id<JavaUtilSet> s2) {
  EduStanfordNlpUtilSets_initialize();
  id<JavaUtilSet> s = EduStanfordNlpUtilGenerics_newHashSet();
  [((id<JavaUtilSet>) nil_chk(s)) addAllWithJavaUtilCollection:s1];
  [s retainAllWithJavaUtilCollection:s2];
  return s;
}

jboolean EduStanfordNlpUtilSets_intersectsWithJavaUtilSet_withJavaUtilSet_(id<JavaUtilSet> s1, id<JavaUtilSet> s2) {
  EduStanfordNlpUtilSets_initialize();
  return !JavaUtilCollections_disjointWithJavaUtilCollection_withJavaUtilCollection_(s1, s2);
}

id<JavaUtilSet> EduStanfordNlpUtilSets_powerSetWithJavaUtilSet_(id<JavaUtilSet> s) {
  EduStanfordNlpUtilSets_initialize();
  if ([((id<JavaUtilSet>) nil_chk(s)) isEmpty]) {
    id<JavaUtilSet> h = EduStanfordNlpUtilGenerics_newHashSet();
    id<JavaUtilSet> h0 = EduStanfordNlpUtilGenerics_newHashSetWithInt_(0);
    [((id<JavaUtilSet>) nil_chk(h)) addWithId:h0];
    return h;
  }
  else {
    id<JavaUtilIterator> i = [s iterator];
    id elt = [((id<JavaUtilIterator>) nil_chk(i)) next];
    [s removeWithId:elt];
    id<JavaUtilSet> pow = EduStanfordNlpUtilSets_powerSetWithJavaUtilSet_(s);
    id<JavaUtilSet> pow1 = EduStanfordNlpUtilSets_powerSetWithJavaUtilSet_(s);
    for (id<JavaUtilSet> __strong t in nil_chk(pow1)) {
      [((id<JavaUtilSet>) nil_chk(t)) addWithId:elt];
      [((id<JavaUtilSet>) nil_chk(pow)) addWithId:t];
    }
    [s addWithId:elt];
    return pow;
  }
}

void EduStanfordNlpUtilSets_mainWithNSStringArray_(IOSObjectArray *args) {
  EduStanfordNlpUtilSets_initialize();
  id<JavaUtilSet> h = EduStanfordNlpUtilGenerics_newHashSet();
  [((id<JavaUtilSet>) nil_chk(h)) addWithId:@"a"];
  [h addWithId:@"b"];
  [h addWithId:@"c"];
  id<JavaUtilSet> pow = EduStanfordNlpUtilSets_powerSetWithJavaUtilSet_(h);
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithId:pow];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpUtilSets)
