//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/util/FilteredIterator.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/util/FilteredIterator.h"
#include "java/io/PrintStream.h"
#include "java/lang/System.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/function/Consumer.h"
#include "java/util/function/Predicate.h"

@interface EduStanfordNlpUtilFilteredIterator_$1 : NSObject < JavaUtilFunctionPredicate >

- (jboolean)testWithId:(NSString *)o;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpUtilFilteredIterator_$1)

inline jlong EduStanfordNlpUtilFilteredIterator_$1_get_serialVersionUID();
#define EduStanfordNlpUtilFilteredIterator_$1_serialVersionUID 1LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpUtilFilteredIterator_$1, serialVersionUID, jlong)

__attribute__((unused)) static void EduStanfordNlpUtilFilteredIterator_$1_init(EduStanfordNlpUtilFilteredIterator_$1 *self);

__attribute__((unused)) static EduStanfordNlpUtilFilteredIterator_$1 *new_EduStanfordNlpUtilFilteredIterator_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpUtilFilteredIterator_$1 *create_EduStanfordNlpUtilFilteredIterator_$1_init();

@implementation EduStanfordNlpUtilFilteredIterator

- (id)currentCandidate {
  return current_;
}

- (void)advanceCandidate {
  if (![((id<JavaUtilIterator>) nil_chk(iterator_)) hasNext]) {
    hasCurrent_ = false;
    current_ = nil;
    return;
  }
  hasCurrent_ = true;
  current_ = [((id<JavaUtilIterator>) nil_chk(iterator_)) next];
}

- (jboolean)hasCurrentCandidate {
  return hasCurrent_;
}

- (jboolean)currentCandidateIsAcceptable {
  return [((id<JavaUtilFunctionPredicate>) nil_chk(filter_)) testWithId:[self currentCandidate]];
}

- (void)skipUnacceptableCandidates {
  while ([self hasCurrentCandidate] && ![self currentCandidateIsAcceptable]) {
    [self advanceCandidate];
  }
}

- (jboolean)hasNext {
  return [self hasCurrentCandidate];
}

- (id)next {
  id result = [self currentCandidate];
  [self advanceCandidate];
  [self skipUnacceptableCandidates];
  return result;
}

- (void)remove {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (instancetype)initWithJavaUtilIterator:(id<JavaUtilIterator>)iterator
           withJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)filter {
  EduStanfordNlpUtilFilteredIterator_initWithJavaUtilIterator_withJavaUtilFunctionPredicate_(self, iterator, filter);
  return self;
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  EduStanfordNlpUtilFilteredIterator_mainWithNSStringArray_(args);
}

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaUtilIterator_forEachRemainingWithJavaUtilFunctionConsumer_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x0, -1, -1, -1, 0, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, 2, -1, -1 },
    { NULL, "V", 0x9, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(currentCandidate);
  methods[1].selector = @selector(advanceCandidate);
  methods[2].selector = @selector(hasCurrentCandidate);
  methods[3].selector = @selector(currentCandidateIsAcceptable);
  methods[4].selector = @selector(skipUnacceptableCandidates);
  methods[5].selector = @selector(hasNext);
  methods[6].selector = @selector(next);
  methods[7].selector = @selector(remove);
  methods[8].selector = @selector(initWithJavaUtilIterator:withJavaUtilFunctionPredicate:);
  methods[9].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "iterator_", "LJavaUtilIterator;", .constantValue.asLong = 0, 0x0, -1, -1, 5, -1 },
    { "filter_", "LJavaUtilFunctionPredicate;", .constantValue.asLong = 0, 0x0, -1, -1, 6, -1 },
    { "current_", "LNSObject;", .constantValue.asLong = 0, 0x0, -1, -1, 7, -1 },
    { "hasCurrent_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "()TT;", "LJavaUtilIterator;LJavaUtilFunctionPredicate;", "(Ljava/util/Iterator<TT;>;Ljava/util/function/Predicate<TT;>;)V", "main", "[LNSString;", "Ljava/util/Iterator<TT;>;", "Ljava/util/function/Predicate<TT;>;", "TT;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Ljava/util/Iterator<TT;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilFilteredIterator = { "FilteredIterator", "edu.stanford.nlp.util", ptrTable, methods, fields, 7, 0x1, 10, 4, -1, -1, -1, 8, -1 };
  return &_EduStanfordNlpUtilFilteredIterator;
}

@end

void EduStanfordNlpUtilFilteredIterator_initWithJavaUtilIterator_withJavaUtilFunctionPredicate_(EduStanfordNlpUtilFilteredIterator *self, id<JavaUtilIterator> iterator, id<JavaUtilFunctionPredicate> filter) {
  NSObject_init(self);
  self->iterator_ = nil;
  self->filter_ = nil;
  self->current_ = nil;
  self->hasCurrent_ = false;
  self->iterator_ = iterator;
  self->filter_ = filter;
  [self advanceCandidate];
  [self skipUnacceptableCandidates];
}

EduStanfordNlpUtilFilteredIterator *new_EduStanfordNlpUtilFilteredIterator_initWithJavaUtilIterator_withJavaUtilFunctionPredicate_(id<JavaUtilIterator> iterator, id<JavaUtilFunctionPredicate> filter) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilFilteredIterator, initWithJavaUtilIterator_withJavaUtilFunctionPredicate_, iterator, filter)
}

EduStanfordNlpUtilFilteredIterator *create_EduStanfordNlpUtilFilteredIterator_initWithJavaUtilIterator_withJavaUtilFunctionPredicate_(id<JavaUtilIterator> iterator, id<JavaUtilFunctionPredicate> filter) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilFilteredIterator, initWithJavaUtilIterator_withJavaUtilFunctionPredicate_, iterator, filter)
}

void EduStanfordNlpUtilFilteredIterator_mainWithNSStringArray_(IOSObjectArray *args) {
  EduStanfordNlpUtilFilteredIterator_initialize();
  id<JavaUtilCollection> c = JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ @"a", @"aa", @"b", @"bb", @"cc" } count:5 type:NSString_class_()]);
  id<JavaUtilIterator> i = new_EduStanfordNlpUtilFilteredIterator_initWithJavaUtilIterator_withJavaUtilFunctionPredicate_([((id<JavaUtilCollection>) nil_chk(c)) iterator], new_EduStanfordNlpUtilFilteredIterator_$1_init());
  while ([i hasNext]) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"Accepted: ", [i next])];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpUtilFilteredIterator)

@implementation EduStanfordNlpUtilFilteredIterator_$1

- (jboolean)testWithId:(NSString *)o {
  return ((jint) [((NSString *) nil_chk(o)) length]) == 1;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpUtilFilteredIterator_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilFunctionPredicate>)and__WithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)arg0 {
  return JavaUtilFunctionPredicate_and__WithJavaUtilFunctionPredicate_(self, arg0);
}

- (id<JavaUtilFunctionPredicate>)negate {
  return JavaUtilFunctionPredicate_negate(self);
}

- (id<JavaUtilFunctionPredicate>)or__WithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)arg0 {
  return JavaUtilFunctionPredicate_or__WithJavaUtilFunctionPredicate_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(testWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpUtilFilteredIterator_$1_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "test", "LNSString;", "LEduStanfordNlpUtilFilteredIterator;", "mainWithNSStringArray:", "Ljava/lang/Object;Ljava/util/function/Predicate<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilFilteredIterator_$1 = { "", "edu.stanford.nlp.util", ptrTable, methods, fields, 7, 0x8008, 2, 1, 2, -1, 3, 4, -1 };
  return &_EduStanfordNlpUtilFilteredIterator_$1;
}

@end

void EduStanfordNlpUtilFilteredIterator_$1_init(EduStanfordNlpUtilFilteredIterator_$1 *self) {
  NSObject_init(self);
}

EduStanfordNlpUtilFilteredIterator_$1 *new_EduStanfordNlpUtilFilteredIterator_$1_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilFilteredIterator_$1, init)
}

EduStanfordNlpUtilFilteredIterator_$1 *create_EduStanfordNlpUtilFilteredIterator_$1_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilFilteredIterator_$1, init)
}
