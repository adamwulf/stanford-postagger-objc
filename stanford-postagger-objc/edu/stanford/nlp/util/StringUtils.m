//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/util/StringUtils.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/io/IOUtils.h"
#include "edu/stanford/nlp/io/RuntimeIOException.h"
#include "edu/stanford/nlp/ling/CoreAnnotations.h"
#include "edu/stanford/nlp/ling/CoreLabel.h"
#include "edu/stanford/nlp/ling/HasWord.h"
#include "edu/stanford/nlp/math/SloppyMath.h"
#include "edu/stanford/nlp/util/CollectionUtils.h"
#include "edu/stanford/nlp/util/CoreMap.h"
#include "edu/stanford/nlp/util/ErasureUtils.h"
#include "edu/stanford/nlp/util/Generics.h"
#include "edu/stanford/nlp/util/StringUtils.h"
#include "java/io/BufferedInputStream.h"
#include "java/io/BufferedReader.h"
#include "java/io/File.h"
#include "java/io/FileInputStream.h"
#include "java/io/FileOutputStream.h"
#include "java/io/FileWriter.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStreamWriter.h"
#include "java/io/PrintStream.h"
#include "java/io/PrintWriter.h"
#include "java/io/StringWriter.h"
#include "java/io/Writer.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Character.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalAccessException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Iterable.h"
#include "java/lang/Math.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/reflect/Field.h"
#include "java/lang/reflect/Method.h"
#include "java/text/Normalizer.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/Date.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Properties.h"
#include "java/util/Set.h"
#include "java/util/StringTokenizer.h"
#include "java/util/function/Function.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"
#include "java/util/stream/Stream.h"

@interface EduStanfordNlpUtilStringUtils ()

- (instancetype)init;

+ (NSString *)makeAsciiTableCellWithId:(id)obj
                               withInt:(jint)padLeft
                               withInt:(jint)padRight
                           withBoolean:(jboolean)tsv;

@end

inline NSString *EduStanfordNlpUtilStringUtils_get_PROP();
static NSString *EduStanfordNlpUtilStringUtils_PROP = @"prop";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpUtilStringUtils, PROP, NSString *)

inline NSString *EduStanfordNlpUtilStringUtils_get_PROPS();
static NSString *EduStanfordNlpUtilStringUtils_PROPS = @"props";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpUtilStringUtils, PROPS, NSString *)

inline NSString *EduStanfordNlpUtilStringUtils_get_PROPERTIES();
static NSString *EduStanfordNlpUtilStringUtils_PROPERTIES = @"properties";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpUtilStringUtils, PROPERTIES, NSString *)

inline NSString *EduStanfordNlpUtilStringUtils_get_ARGS();
static NSString *EduStanfordNlpUtilStringUtils_ARGS = @"args";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpUtilStringUtils, ARGS, NSString *)

inline NSString *EduStanfordNlpUtilStringUtils_get_ARGUMENTS();
static NSString *EduStanfordNlpUtilStringUtils_ARGUMENTS = @"arguments";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpUtilStringUtils, ARGUMENTS, NSString *)

inline JavaUtilRegexPattern *EduStanfordNlpUtilStringUtils_get_diacriticalMarksPattern();
inline JavaUtilRegexPattern *EduStanfordNlpUtilStringUtils_set_diacriticalMarksPattern(JavaUtilRegexPattern *value);
static JavaUtilRegexPattern *EduStanfordNlpUtilStringUtils_diacriticalMarksPattern;
J2OBJC_STATIC_FIELD_OBJ(EduStanfordNlpUtilStringUtils, diacriticalMarksPattern, JavaUtilRegexPattern *)

inline IOSObjectArray *EduStanfordNlpUtilStringUtils_get_HTML_ESCAPES();
static IOSObjectArray *EduStanfordNlpUtilStringUtils_HTML_ESCAPES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpUtilStringUtils, HTML_ESCAPES, IOSObjectArray *)

inline JavaUtilHashMap *EduStanfordNlpUtilStringUtils_get_htmlUnescapeLookupMap();
static JavaUtilHashMap *EduStanfordNlpUtilStringUtils_htmlUnescapeLookupMap;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpUtilStringUtils, htmlUnescapeLookupMap, JavaUtilHashMap *)

__attribute__((unused)) static void EduStanfordNlpUtilStringUtils_init(EduStanfordNlpUtilStringUtils *self);

__attribute__((unused)) static EduStanfordNlpUtilStringUtils *new_EduStanfordNlpUtilStringUtils_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpUtilStringUtils *create_EduStanfordNlpUtilStringUtils_init();

__attribute__((unused)) static NSString *EduStanfordNlpUtilStringUtils_makeAsciiTableCellWithId_withInt_withInt_withBoolean_(id obj, jint padLeft, jint padRight, jboolean tsv);

@interface EduStanfordNlpUtilStringUtils_$Lambda$1 : NSObject < JavaUtilFunctionFunction >

- (id)applyWithId:(id<EduStanfordNlpLingHasWord>)inArg;

@end

J2OBJC_STATIC_INIT(EduStanfordNlpUtilStringUtils_$Lambda$1)

inline EduStanfordNlpUtilStringUtils_$Lambda$1 *EduStanfordNlpUtilStringUtils_$Lambda$1_get_instance();
static EduStanfordNlpUtilStringUtils_$Lambda$1 *EduStanfordNlpUtilStringUtils_$Lambda$1_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpUtilStringUtils_$Lambda$1, instance, EduStanfordNlpUtilStringUtils_$Lambda$1 *)

__attribute__((unused)) static void EduStanfordNlpUtilStringUtils_$Lambda$1_init(EduStanfordNlpUtilStringUtils_$Lambda$1 *self);

__attribute__((unused)) static EduStanfordNlpUtilStringUtils_$Lambda$1 *new_EduStanfordNlpUtilStringUtils_$Lambda$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpUtilStringUtils_$Lambda$1 *create_EduStanfordNlpUtilStringUtils_$Lambda$1_init();

@interface EduStanfordNlpUtilStringUtils_$Lambda$2 : NSObject < JavaUtilFunctionFunction >

- (id)applyWithId:(id)a;

@end

J2OBJC_STATIC_INIT(EduStanfordNlpUtilStringUtils_$Lambda$2)

inline EduStanfordNlpUtilStringUtils_$Lambda$2 *EduStanfordNlpUtilStringUtils_$Lambda$2_get_instance();
static EduStanfordNlpUtilStringUtils_$Lambda$2 *EduStanfordNlpUtilStringUtils_$Lambda$2_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpUtilStringUtils_$Lambda$2, instance, EduStanfordNlpUtilStringUtils_$Lambda$2 *)

__attribute__((unused)) static void EduStanfordNlpUtilStringUtils_$Lambda$2_init(EduStanfordNlpUtilStringUtils_$Lambda$2 *self);

__attribute__((unused)) static EduStanfordNlpUtilStringUtils_$Lambda$2 *new_EduStanfordNlpUtilStringUtils_$Lambda$2_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpUtilStringUtils_$Lambda$2 *create_EduStanfordNlpUtilStringUtils_$Lambda$2_init();

@interface EduStanfordNlpUtilStringUtils_$1 : NSObject < JavaUtilFunctionFunction >

- (NSString *)applyWithId:(id)inArg;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpUtilStringUtils_$1)

__attribute__((unused)) static void EduStanfordNlpUtilStringUtils_$1_init(EduStanfordNlpUtilStringUtils_$1 *self);

__attribute__((unused)) static EduStanfordNlpUtilStringUtils_$1 *new_EduStanfordNlpUtilStringUtils_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpUtilStringUtils_$1 *create_EduStanfordNlpUtilStringUtils_$1_init();

@interface EduStanfordNlpUtilStringUtils_$2 : NSObject < JavaUtilFunctionFunction > {
 @public
  IOSClass *val$field_;
  id<JavaUtilFunctionFunction> val$toStringFunc_;
  NSString *val$defaultFieldValue_;
}

- (NSString *)applyWithId:(id<EduStanfordNlpUtilCoreMap>)inArg;

- (instancetype)initWithIOSClass:(IOSClass *)capture$0
    withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)capture$1
                    withNSString:(NSString *)capture$2;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpUtilStringUtils_$2)

J2OBJC_FIELD_SETTER(EduStanfordNlpUtilStringUtils_$2, val$field_, IOSClass *)
J2OBJC_FIELD_SETTER(EduStanfordNlpUtilStringUtils_$2, val$toStringFunc_, id<JavaUtilFunctionFunction>)
J2OBJC_FIELD_SETTER(EduStanfordNlpUtilStringUtils_$2, val$defaultFieldValue_, NSString *)

__attribute__((unused)) static void EduStanfordNlpUtilStringUtils_$2_initWithIOSClass_withJavaUtilFunctionFunction_withNSString_(EduStanfordNlpUtilStringUtils_$2 *self, IOSClass *capture$0, id<JavaUtilFunctionFunction> capture$1, NSString *capture$2);

__attribute__((unused)) static EduStanfordNlpUtilStringUtils_$2 *new_EduStanfordNlpUtilStringUtils_$2_initWithIOSClass_withJavaUtilFunctionFunction_withNSString_(IOSClass *capture$0, id<JavaUtilFunctionFunction> capture$1, NSString *capture$2) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpUtilStringUtils_$2 *create_EduStanfordNlpUtilStringUtils_$2_initWithIOSClass_withJavaUtilFunctionFunction_withNSString_(IOSClass *capture$0, id<JavaUtilFunctionFunction> capture$1, NSString *capture$2);

@interface EduStanfordNlpUtilStringUtils_$3 : NSObject < JavaUtilFunctionFunction > {
 @public
  IOSObjectArray *val$fields_;
  NSString *val$fieldGlue_;
  id<JavaUtilFunctionFunction> val$toStringFunc_;
  NSString *val$defaultFieldValue_;
}

- (NSString *)applyWithId:(id<EduStanfordNlpUtilCoreMap>)inArg;

- (instancetype)initWithIOSClassArray:(IOSObjectArray *)capture$0
                         withNSString:(NSString *)capture$1
         withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)capture$2
                         withNSString:(NSString *)capture$3;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpUtilStringUtils_$3)

J2OBJC_FIELD_SETTER(EduStanfordNlpUtilStringUtils_$3, val$fields_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(EduStanfordNlpUtilStringUtils_$3, val$fieldGlue_, NSString *)
J2OBJC_FIELD_SETTER(EduStanfordNlpUtilStringUtils_$3, val$toStringFunc_, id<JavaUtilFunctionFunction>)
J2OBJC_FIELD_SETTER(EduStanfordNlpUtilStringUtils_$3, val$defaultFieldValue_, NSString *)

__attribute__((unused)) static void EduStanfordNlpUtilStringUtils_$3_initWithIOSClassArray_withNSString_withJavaUtilFunctionFunction_withNSString_(EduStanfordNlpUtilStringUtils_$3 *self, IOSObjectArray *capture$0, NSString *capture$1, id<JavaUtilFunctionFunction> capture$2, NSString *capture$3);

__attribute__((unused)) static EduStanfordNlpUtilStringUtils_$3 *new_EduStanfordNlpUtilStringUtils_$3_initWithIOSClassArray_withNSString_withJavaUtilFunctionFunction_withNSString_(IOSObjectArray *capture$0, NSString *capture$1, id<JavaUtilFunctionFunction> capture$2, NSString *capture$3) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpUtilStringUtils_$3 *create_EduStanfordNlpUtilStringUtils_$3_initWithIOSClassArray_withNSString_withJavaUtilFunctionFunction_withNSString_(IOSObjectArray *capture$0, NSString *capture$1, id<JavaUtilFunctionFunction> capture$2, NSString *capture$3);

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpUtilStringUtils)

IOSObjectArray *EduStanfordNlpUtilStringUtils_EMPTY_STRING_ARRAY;
id<JavaUtilFunctionFunction> EduStanfordNlpUtilStringUtils_DEFAULT_TOSTRING;

@implementation EduStanfordNlpUtilStringUtils

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpUtilStringUtils_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jboolean)findWithNSString:(NSString *)str
                withNSString:(NSString *)regex {
  return EduStanfordNlpUtilStringUtils_findWithNSString_withNSString_(str, regex);
}

+ (jboolean)containsIgnoreCaseWithJavaUtilCollection:(id<JavaUtilCollection>)c
                                        withNSString:(NSString *)s {
  return EduStanfordNlpUtilStringUtils_containsIgnoreCaseWithJavaUtilCollection_withNSString_(c, s);
}

+ (jboolean)lookingAtWithNSString:(NSString *)str
                     withNSString:(NSString *)regex {
  return EduStanfordNlpUtilStringUtils_lookingAtWithNSString_withNSString_(str, regex);
}

+ (IOSObjectArray *)mapStringToArrayWithNSString:(NSString *)map {
  return EduStanfordNlpUtilStringUtils_mapStringToArrayWithNSString_(map);
}

+ (id<JavaUtilMap>)mapStringToMapWithNSString:(NSString *)map {
  return EduStanfordNlpUtilStringUtils_mapStringToMapWithNSString_(map);
}

+ (id<JavaUtilList>)regexesToPatternsWithJavaLangIterable:(id<JavaLangIterable>)regexes {
  return EduStanfordNlpUtilStringUtils_regexesToPatternsWithJavaLangIterable_(regexes);
}

+ (id<JavaUtilList>)regexGroupsWithJavaUtilRegexPattern:(JavaUtilRegexPattern *)regex
                                           withNSString:(NSString *)str {
  return EduStanfordNlpUtilStringUtils_regexGroupsWithJavaUtilRegexPattern_withNSString_(regex, str);
}

+ (jboolean)matchesWithNSString:(NSString *)str
                   withNSString:(NSString *)regex {
  return EduStanfordNlpUtilStringUtils_matchesWithNSString_withNSString_(str, regex);
}

+ (id<JavaUtilSet>)stringToSetWithNSString:(NSString *)str
                              withNSString:(NSString *)delimiter {
  return EduStanfordNlpUtilStringUtils_stringToSetWithNSString_withNSString_(str, delimiter);
}

+ (NSString *)joinWordsWithJavaLangIterable:(id<JavaLangIterable>)l
                               withNSString:(NSString *)glue {
  return EduStanfordNlpUtilStringUtils_joinWordsWithJavaLangIterable_withNSString_(l, glue);
}

+ (NSString *)joinWithJavaUtilList:(id<JavaUtilList>)l
                      withNSString:(NSString *)glue
      withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)toStringFunc
                           withInt:(jint)start
                           withInt:(jint)end {
  return EduStanfordNlpUtilStringUtils_joinWithJavaUtilList_withNSString_withJavaUtilFunctionFunction_withInt_withInt_(l, glue, toStringFunc, start, end);
}

+ (NSString *)joinWordsWithJavaUtilList:(id<JavaUtilList>)l
                           withNSString:(NSString *)glue
                                withInt:(jint)start
                                withInt:(jint)end {
  return EduStanfordNlpUtilStringUtils_joinWordsWithJavaUtilList_withNSString_withInt_withInt_(l, glue, start, end);
}

+ (NSString *)joinFieldsWithJavaUtilList:(id<JavaUtilList>)l
                            withIOSClass:(IOSClass *)field
                            withNSString:(NSString *)defaultFieldValue
                            withNSString:(NSString *)glue
                                 withInt:(jint)start
                                 withInt:(jint)end
            withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)toStringFunc {
  return EduStanfordNlpUtilStringUtils_joinFieldsWithJavaUtilList_withIOSClass_withNSString_withNSString_withInt_withInt_withJavaUtilFunctionFunction_(l, field, defaultFieldValue, glue, start, end, toStringFunc);
}

+ (NSString *)joinFieldsWithJavaUtilList:(id<JavaUtilList>)l
                            withIOSClass:(IOSClass *)field
                            withNSString:(NSString *)defaultFieldValue
                            withNSString:(NSString *)glue
                                 withInt:(jint)start
                                 withInt:(jint)end {
  return EduStanfordNlpUtilStringUtils_joinFieldsWithJavaUtilList_withIOSClass_withNSString_withNSString_withInt_withInt_(l, field, defaultFieldValue, glue, start, end);
}

+ (NSString *)joinFieldsWithJavaUtilList:(id<JavaUtilList>)l
                            withIOSClass:(IOSClass *)field
            withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)toStringFunc {
  return EduStanfordNlpUtilStringUtils_joinFieldsWithJavaUtilList_withIOSClass_withJavaUtilFunctionFunction_(l, field, toStringFunc);
}

+ (NSString *)joinFieldsWithJavaUtilList:(id<JavaUtilList>)l
                            withIOSClass:(IOSClass *)field {
  return EduStanfordNlpUtilStringUtils_joinFieldsWithJavaUtilList_withIOSClass_(l, field);
}

+ (NSString *)joinMultipleFieldsWithJavaUtilList:(id<JavaUtilList>)l
                               withIOSClassArray:(IOSObjectArray *)fields
                                    withNSString:(NSString *)defaultFieldValue
                                    withNSString:(NSString *)fieldGlue
                                    withNSString:(NSString *)glue
                                         withInt:(jint)start
                                         withInt:(jint)end
                    withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)toStringFunc {
  return EduStanfordNlpUtilStringUtils_joinMultipleFieldsWithJavaUtilList_withIOSClassArray_withNSString_withNSString_withNSString_withInt_withInt_withJavaUtilFunctionFunction_(l, fields, defaultFieldValue, fieldGlue, glue, start, end, toStringFunc);
}

+ (NSString *)joinMultipleFieldsWithJavaUtilList:(id<JavaUtilList>)l
                               withIOSClassArray:(IOSObjectArray *)fields
                    withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)toStringFunc {
  return EduStanfordNlpUtilStringUtils_joinMultipleFieldsWithJavaUtilList_withIOSClassArray_withJavaUtilFunctionFunction_(l, fields, toStringFunc);
}

+ (NSString *)joinMultipleFieldsWithJavaUtilList:(id<JavaUtilList>)l
                               withIOSClassArray:(IOSObjectArray *)fields
                                    withNSString:(NSString *)defaultFieldValue
                                    withNSString:(NSString *)fieldGlue
                                    withNSString:(NSString *)glue
                                         withInt:(jint)start
                                         withInt:(jint)end {
  return EduStanfordNlpUtilStringUtils_joinMultipleFieldsWithJavaUtilList_withIOSClassArray_withNSString_withNSString_withNSString_withInt_withInt_(l, fields, defaultFieldValue, fieldGlue, glue, start, end);
}

+ (NSString *)joinMultipleFieldsWithJavaUtilList:(id<JavaUtilList>)l
                               withIOSClassArray:(IOSObjectArray *)fields {
  return EduStanfordNlpUtilStringUtils_joinMultipleFieldsWithJavaUtilList_withIOSClassArray_(l, fields);
}

+ (NSString *)joinWithOriginalWhiteSpaceWithJavaUtilList:(id<JavaUtilList>)tokens {
  return EduStanfordNlpUtilStringUtils_joinWithOriginalWhiteSpaceWithJavaUtilList_(tokens);
}

+ (NSString *)joinWithJavaLangIterable:(id<JavaLangIterable>)l
                          withNSString:(NSString *)glue {
  return EduStanfordNlpUtilStringUtils_joinWithJavaLangIterable_withNSString_(l, glue);
}

+ (NSString *)joinWithJavaUtilStreamStream:(id<JavaUtilStreamStream>)l
                              withNSString:(NSString *)glue {
  return EduStanfordNlpUtilStringUtils_joinWithJavaUtilStreamStream_withNSString_(l, glue);
}

+ (NSString *)joinWithNSObjectArray:(IOSObjectArray *)elements
                       withNSString:(NSString *)glue {
  return EduStanfordNlpUtilStringUtils_joinWithNSObjectArray_withNSString_(elements, glue);
}

+ (NSString *)joinWithNSObjectArray:(IOSObjectArray *)elements
                            withInt:(jint)start
                            withInt:(jint)end
                       withNSString:(NSString *)glue {
  return EduStanfordNlpUtilStringUtils_joinWithNSObjectArray_withInt_withInt_withNSString_(elements, start, end, glue);
}

+ (NSString *)joinWithJavaLangIterable:(id<JavaLangIterable>)l {
  return EduStanfordNlpUtilStringUtils_joinWithJavaLangIterable_(l);
}

+ (NSString *)joinWithNSObjectArray:(IOSObjectArray *)elements {
  return EduStanfordNlpUtilStringUtils_joinWithNSObjectArray_(elements);
}

+ (id<JavaUtilList>)splitWithNSString:(NSString *)s {
  return EduStanfordNlpUtilStringUtils_splitWithNSString_(s);
}

+ (id<JavaUtilList>)splitWithNSString:(NSString *)str
                         withNSString:(NSString *)regex {
  return EduStanfordNlpUtilStringUtils_splitWithNSString_withNSString_(str, regex);
}

+ (IOSObjectArray *)splitOnCharWithNSString:(NSString *)input
                                   withChar:(jchar)delimiter {
  return EduStanfordNlpUtilStringUtils_splitOnCharWithNSString_withChar_(input, delimiter);
}

+ (id<JavaUtilList>)splitFieldsFastWithNSString:(NSString *)str
                                   withNSString:(NSString *)delimiter {
  return EduStanfordNlpUtilStringUtils_splitFieldsFastWithNSString_withNSString_(str, delimiter);
}

+ (id<JavaUtilList>)valueSplitWithNSString:(NSString *)str
                              withNSString:(NSString *)valueRegex
                              withNSString:(NSString *)separatorRegex {
  return EduStanfordNlpUtilStringUtils_valueSplitWithNSString_withNSString_withNSString_(str, valueRegex, separatorRegex);
}

+ (NSString *)padWithNSString:(NSString *)str
                      withInt:(jint)totalChars {
  return EduStanfordNlpUtilStringUtils_padWithNSString_withInt_(str, totalChars);
}

+ (NSString *)padWithId:(id)obj
                withInt:(jint)totalChars {
  return EduStanfordNlpUtilStringUtils_padWithId_withInt_(obj, totalChars);
}

+ (NSString *)padOrTrimWithNSString:(NSString *)str
                            withInt:(jint)num {
  return EduStanfordNlpUtilStringUtils_padOrTrimWithNSString_withInt_(str, num);
}

+ (NSString *)padLeftOrTrimWithNSString:(NSString *)str
                                withInt:(jint)num {
  return EduStanfordNlpUtilStringUtils_padLeftOrTrimWithNSString_withInt_(str, num);
}

+ (NSString *)padOrTrimWithId:(id)obj
                      withInt:(jint)totalChars {
  return EduStanfordNlpUtilStringUtils_padOrTrimWithId_withInt_(obj, totalChars);
}

+ (NSString *)padLeftWithNSString:(NSString *)str
                          withInt:(jint)totalChars
                         withChar:(jchar)ch {
  return EduStanfordNlpUtilStringUtils_padLeftWithNSString_withInt_withChar_(str, totalChars, ch);
}

+ (NSString *)padLeftWithNSString:(NSString *)str
                          withInt:(jint)totalChars {
  return EduStanfordNlpUtilStringUtils_padLeftWithNSString_withInt_(str, totalChars);
}

+ (NSString *)padLeftWithId:(id)obj
                    withInt:(jint)totalChars {
  return EduStanfordNlpUtilStringUtils_padLeftWithId_withInt_(obj, totalChars);
}

+ (NSString *)padLeftWithInt:(jint)i
                     withInt:(jint)totalChars {
  return EduStanfordNlpUtilStringUtils_padLeftWithInt_withInt_(i, totalChars);
}

+ (NSString *)padLeftWithDouble:(jdouble)d
                        withInt:(jint)totalChars {
  return EduStanfordNlpUtilStringUtils_padLeftWithDouble_withInt_(d, totalChars);
}

+ (NSString *)trimWithNSString:(NSString *)s
                       withInt:(jint)maxWidth {
  return EduStanfordNlpUtilStringUtils_trimWithNSString_withInt_(s, maxWidth);
}

+ (NSString *)trimWithId:(id)obj
                 withInt:(jint)maxWidth {
  return EduStanfordNlpUtilStringUtils_trimWithId_withInt_(obj, maxWidth);
}

+ (NSString *)repeatWithNSString:(NSString *)s
                         withInt:(jint)times {
  return EduStanfordNlpUtilStringUtils_repeatWithNSString_withInt_(s, times);
}

+ (NSString *)repeatWithChar:(jchar)ch
                     withInt:(jint)times {
  return EduStanfordNlpUtilStringUtils_repeatWithChar_withInt_(ch, times);
}

+ (NSString *)fileNameCleanWithNSString:(NSString *)s {
  return EduStanfordNlpUtilStringUtils_fileNameCleanWithNSString_(s);
}

+ (jint)nthIndexWithNSString:(NSString *)s
                    withChar:(jchar)ch
                     withInt:(jint)n {
  return EduStanfordNlpUtilStringUtils_nthIndexWithNSString_withChar_withInt_(s, ch, n);
}

+ (NSString *)truncateWithInt:(jint)n
                      withInt:(jint)smallestDigit
                      withInt:(jint)biggestDigit {
  return EduStanfordNlpUtilStringUtils_truncateWithInt_withInt_withInt_(n, smallestDigit, biggestDigit);
}

+ (id<JavaUtilMap>)argsToMapWithNSStringArray:(IOSObjectArray *)args {
  return EduStanfordNlpUtilStringUtils_argsToMapWithNSStringArray_(args);
}

+ (id<JavaUtilMap>)argsToMapWithNSStringArray:(IOSObjectArray *)args
                              withJavaUtilMap:(id<JavaUtilMap>)flagsToNumArgs {
  return EduStanfordNlpUtilStringUtils_argsToMapWithNSStringArray_withJavaUtilMap_(args, flagsToNumArgs);
}

+ (JavaUtilProperties *)argsToPropertiesWithNSStringArray:(IOSObjectArray *)args {
  return EduStanfordNlpUtilStringUtils_argsToPropertiesWithNSStringArray_(args);
}

+ (JavaUtilProperties *)argsToPropertiesWithNSStringArray:(IOSObjectArray *)args
                                          withJavaUtilMap:(id<JavaUtilMap>)flagsToNumArgs {
  return EduStanfordNlpUtilStringUtils_argsToPropertiesWithNSStringArray_withJavaUtilMap_(args, flagsToNumArgs);
}

+ (JavaUtilProperties *)propFileToPropertiesWithNSString:(NSString *)filename {
  return EduStanfordNlpUtilStringUtils_propFileToPropertiesWithNSString_(filename);
}

+ (JavaUtilProperties *)stringToPropertiesWithNSString:(NSString *)str {
  return EduStanfordNlpUtilStringUtils_stringToPropertiesWithNSString_(str);
}

+ (JavaUtilProperties *)stringToPropertiesWithNSString:(NSString *)str
                                withJavaUtilProperties:(JavaUtilProperties *)props {
  return EduStanfordNlpUtilStringUtils_stringToPropertiesWithNSString_withJavaUtilProperties_(str, props);
}

+ (NSString *)checkRequiredPropertiesWithJavaUtilProperties:(JavaUtilProperties *)props
                                          withNSStringArray:(IOSObjectArray *)requiredProps {
  return EduStanfordNlpUtilStringUtils_checkRequiredPropertiesWithJavaUtilProperties_withNSStringArray_(props, requiredProps);
}

+ (void)printToFileWithJavaIoFile:(JavaIoFile *)file
                     withNSString:(NSString *)message
                      withBoolean:(jboolean)append
                      withBoolean:(jboolean)printLn
                     withNSString:(NSString *)encoding {
  EduStanfordNlpUtilStringUtils_printToFileWithJavaIoFile_withNSString_withBoolean_withBoolean_withNSString_(file, message, append, printLn, encoding);
}

+ (void)printToFileLnWithJavaIoFile:(JavaIoFile *)file
                       withNSString:(NSString *)message
                        withBoolean:(jboolean)append {
  EduStanfordNlpUtilStringUtils_printToFileLnWithJavaIoFile_withNSString_withBoolean_(file, message, append);
}

+ (void)printToFileWithJavaIoFile:(JavaIoFile *)file
                     withNSString:(NSString *)message
                      withBoolean:(jboolean)append {
  EduStanfordNlpUtilStringUtils_printToFileWithJavaIoFile_withNSString_withBoolean_(file, message, append);
}

+ (void)printToFileWithJavaIoFile:(JavaIoFile *)file
                     withNSString:(NSString *)message {
  EduStanfordNlpUtilStringUtils_printToFileWithJavaIoFile_withNSString_(file, message);
}

+ (void)printToFileWithNSString:(NSString *)filename
                   withNSString:(NSString *)message
                    withBoolean:(jboolean)append {
  EduStanfordNlpUtilStringUtils_printToFileWithNSString_withNSString_withBoolean_(filename, message, append);
}

+ (void)printToFileLnWithNSString:(NSString *)filename
                     withNSString:(NSString *)message
                      withBoolean:(jboolean)append {
  EduStanfordNlpUtilStringUtils_printToFileLnWithNSString_withNSString_withBoolean_(filename, message, append);
}

+ (void)printToFileWithNSString:(NSString *)filename
                   withNSString:(NSString *)message {
  EduStanfordNlpUtilStringUtils_printToFileWithNSString_withNSString_(filename, message);
}

+ (id<JavaUtilMap>)parseCommandLineArgumentsWithNSStringArray:(IOSObjectArray *)args {
  return EduStanfordNlpUtilStringUtils_parseCommandLineArgumentsWithNSStringArray_(args);
}

+ (id<JavaUtilMap>)parseCommandLineArgumentsWithNSStringArray:(IOSObjectArray *)args
                                                  withBoolean:(jboolean)parseNumbers {
  return EduStanfordNlpUtilStringUtils_parseCommandLineArgumentsWithNSStringArray_withBoolean_(args, parseNumbers);
}

+ (NSString *)stripNonAlphaNumericsWithNSString:(NSString *)orig {
  return EduStanfordNlpUtilStringUtils_stripNonAlphaNumericsWithNSString_(orig);
}

+ (NSString *)stripSGMLWithNSString:(NSString *)orig {
  return EduStanfordNlpUtilStringUtils_stripSGMLWithNSString_(orig);
}

+ (void)printStringOneCharPerLineWithNSString:(NSString *)s {
  EduStanfordNlpUtilStringUtils_printStringOneCharPerLineWithNSString_(s);
}

+ (NSString *)escapeStringWithNSString:(NSString *)s
                         withCharArray:(IOSCharArray *)charsToEscape
                              withChar:(jchar)escapeChar {
  return EduStanfordNlpUtilStringUtils_escapeStringWithNSString_withCharArray_withChar_(s, charsToEscape, escapeChar);
}

+ (IOSObjectArray *)splitOnCharWithQuotingWithNSString:(NSString *)s
                                              withChar:(jchar)splitChar
                                              withChar:(jchar)quoteChar
                                              withChar:(jchar)escapeChar {
  return EduStanfordNlpUtilStringUtils_splitOnCharWithQuotingWithNSString_withChar_withChar_withChar_(s, splitChar, quoteChar, escapeChar);
}

+ (jint)longestCommonSubstringWithNSString:(NSString *)s
                              withNSString:(NSString *)t {
  return EduStanfordNlpUtilStringUtils_longestCommonSubstringWithNSString_withNSString_(s, t);
}

+ (jint)longestCommonContiguousSubstringWithNSString:(NSString *)s
                                        withNSString:(NSString *)t {
  return EduStanfordNlpUtilStringUtils_longestCommonContiguousSubstringWithNSString_withNSString_(s, t);
}

+ (jint)editDistanceWithNSString:(NSString *)s
                    withNSString:(NSString *)t {
  return EduStanfordNlpUtilStringUtils_editDistanceWithNSString_withNSString_(s, t);
}

+ (NSString *)pennPOSToWordnetPOSWithNSString:(NSString *)s {
  return EduStanfordNlpUtilStringUtils_pennPOSToWordnetPOSWithNSString_(s);
}

+ (NSString *)getShortClassNameWithId:(id)o {
  return EduStanfordNlpUtilStringUtils_getShortClassNameWithId_(o);
}

+ (id)columnStringToObjectWithIOSClass:(IOSClass *)objClass
                          withNSString:(NSString *)str
                          withNSString:(NSString *)delimiterRegex
                     withNSStringArray:(IOSObjectArray *)fieldNames {
  return EduStanfordNlpUtilStringUtils_columnStringToObjectWithIOSClass_withNSString_withNSString_withNSStringArray_(objClass, str, delimiterRegex, fieldNames);
}

+ (id)columnStringToObjectWithIOSClass:(IOSClass *)objClass
                          withNSString:(NSString *)str
              withJavaUtilRegexPattern:(JavaUtilRegexPattern *)delimiterPattern
                     withNSStringArray:(IOSObjectArray *)fieldNames {
  return EduStanfordNlpUtilStringUtils_columnStringToObjectWithIOSClass_withNSString_withJavaUtilRegexPattern_withNSStringArray_(objClass, str, delimiterPattern, fieldNames);
}

+ (NSString *)objectToColumnStringWithId:(id)object
                            withNSString:(NSString *)delimiter
                       withNSStringArray:(IOSObjectArray *)fieldNames {
  return EduStanfordNlpUtilStringUtils_objectToColumnStringWithId_withNSString_withNSStringArray_(object, delimiter, fieldNames);
}

+ (NSString *)capitalizeWithNSString:(NSString *)s {
  return EduStanfordNlpUtilStringUtils_capitalizeWithNSString_(s);
}

+ (jboolean)isCapitalizedWithNSString:(NSString *)s {
  return EduStanfordNlpUtilStringUtils_isCapitalizedWithNSString_(s);
}

+ (NSString *)searchAndReplaceWithNSString:(NSString *)text
                              withNSString:(NSString *)from
                              withNSString:(NSString *)to {
  return EduStanfordNlpUtilStringUtils_searchAndReplaceWithNSString_withNSString_withNSString_(text, from, to);
}

+ (NSString *)makeHTMLTableWithNSStringArray2:(IOSObjectArray *)table
                            withNSStringArray:(IOSObjectArray *)rowLabels
                            withNSStringArray:(IOSObjectArray *)colLabels {
  return EduStanfordNlpUtilStringUtils_makeHTMLTableWithNSStringArray2_withNSStringArray_withNSStringArray_(table, rowLabels, colLabels);
}

+ (NSString *)makeTextTableWithNSObjectArray2:(IOSObjectArray *)table
                            withNSObjectArray:(IOSObjectArray *)rowLabels
                            withNSObjectArray:(IOSObjectArray *)colLabels
                                      withInt:(jint)padLeft
                                      withInt:(jint)padRight
                                  withBoolean:(jboolean)tsv {
  return EduStanfordNlpUtilStringUtils_makeTextTableWithNSObjectArray2_withNSObjectArray_withNSObjectArray_withInt_withInt_withBoolean_(table, rowLabels, colLabels, padLeft, padRight, tsv);
}

+ (NSString *)makeAsciiTableCellWithId:(id)obj
                               withInt:(jint)padLeft
                               withInt:(jint)padRight
                           withBoolean:(jboolean)tsv {
  return EduStanfordNlpUtilStringUtils_makeAsciiTableCellWithId_withInt_withInt_withBoolean_(obj, padLeft, padRight, tsv);
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  EduStanfordNlpUtilStringUtils_mainWithNSStringArray_(args);
}

+ (NSString *)toAsciiWithNSString:(NSString *)s {
  return EduStanfordNlpUtilStringUtils_toAsciiWithNSString_(s);
}

+ (NSString *)toCSVStringWithNSStringArray:(IOSObjectArray *)fields {
  return EduStanfordNlpUtilStringUtils_toCSVStringWithNSStringArray_(fields);
}

+ (NSString *)trWithNSString:(NSString *)input
                withNSString:(NSString *)from
                withNSString:(NSString *)to {
  return EduStanfordNlpUtilStringUtils_trWithNSString_withNSString_withNSString_(input, from, to);
}

+ (NSString *)chompWithNSString:(NSString *)s {
  return EduStanfordNlpUtilStringUtils_chompWithNSString_(s);
}

+ (NSString *)chompWithId:(id)o {
  return EduStanfordNlpUtilStringUtils_chompWithId_(o);
}

+ (void)printErrInvocationStringWithNSString:(NSString *)cls
                           withNSStringArray:(IOSObjectArray *)args {
  EduStanfordNlpUtilStringUtils_printErrInvocationStringWithNSString_withNSStringArray_(cls, args);
}

+ (NSString *)toInvocationStringWithNSString:(NSString *)cls
                           withNSStringArray:(IOSObjectArray *)args {
  return EduStanfordNlpUtilStringUtils_toInvocationStringWithNSString_withNSStringArray_(cls, args);
}

+ (NSString *)getBaseNameWithNSString:(NSString *)fileName {
  return EduStanfordNlpUtilStringUtils_getBaseNameWithNSString_(fileName);
}

+ (NSString *)getBaseNameWithNSString:(NSString *)fileName
                         withNSString:(NSString *)suffix {
  return EduStanfordNlpUtilStringUtils_getBaseNameWithNSString_withNSString_(fileName, suffix);
}

+ (jboolean)isAlphaWithNSString:(NSString *)s {
  return EduStanfordNlpUtilStringUtils_isAlphaWithNSString_(s);
}

+ (jboolean)isNumericWithNSString:(NSString *)s {
  return EduStanfordNlpUtilStringUtils_isNumericWithNSString_(s);
}

+ (jboolean)isAlphanumericWithNSString:(NSString *)s {
  return EduStanfordNlpUtilStringUtils_isAlphanumericWithNSString_(s);
}

+ (jboolean)isPunctWithNSString:(NSString *)s {
  return EduStanfordNlpUtilStringUtils_isPunctWithNSString_(s);
}

+ (jboolean)isAcronymWithNSString:(NSString *)s {
  return EduStanfordNlpUtilStringUtils_isAcronymWithNSString_(s);
}

+ (NSString *)getNotNullStringWithNSString:(NSString *)s {
  return EduStanfordNlpUtilStringUtils_getNotNullStringWithNSString_(s);
}

+ (NSString *)resolveVarsWithNSString:(NSString *)str
                      withJavaUtilMap:(id<JavaUtilMap>)props {
  return EduStanfordNlpUtilStringUtils_resolveVarsWithNSString_withJavaUtilMap_(str, props);
}

+ (JavaUtilProperties *)argsToPropertiesWithResolveWithNSStringArray:(IOSObjectArray *)args {
  return EduStanfordNlpUtilStringUtils_argsToPropertiesWithResolveWithNSStringArray_(args);
}

+ (JavaUtilLinkedHashMap *)propFileToLinkedHashMapWithNSString:(NSString *)filename
                                               withJavaUtilMap:(id<JavaUtilMap>)existingArgs {
  return EduStanfordNlpUtilStringUtils_propFileToLinkedHashMapWithNSString_withJavaUtilMap_(filename, existingArgs);
}

+ (id<JavaUtilCollection>)getNgramsWithJavaUtilList:(id<JavaUtilList>)words
                                            withInt:(jint)minSize
                                            withInt:(jint)maxSize {
  return EduStanfordNlpUtilStringUtils_getNgramsWithJavaUtilList_withInt_withInt_(words, minSize, maxSize);
}

+ (id<JavaUtilCollection>)getNgramsFromTokensWithJavaUtilList:(id<JavaUtilList>)words
                                                      withInt:(jint)minSize
                                                      withInt:(jint)maxSize {
  return EduStanfordNlpUtilStringUtils_getNgramsFromTokensWithJavaUtilList_withInt_withInt_(words, minSize, maxSize);
}

+ (id<JavaUtilCollection>)getNgramsStringWithNSString:(NSString *)s
                                              withInt:(jint)minSize
                                              withInt:(jint)maxSize {
  return EduStanfordNlpUtilStringUtils_getNgramsStringWithNSString_withInt_withInt_(s, minSize, maxSize);
}

+ (id<JavaUtilCollection>)getCharacterNgramsWithNSString:(NSString *)s
                                                 withInt:(jint)minSize
                                                 withInt:(jint)maxSize {
  return EduStanfordNlpUtilStringUtils_getCharacterNgramsWithNSString_withInt_withInt_(s, minSize, maxSize);
}

+ (NSString *)normalizeWithNSString:(NSString *)s {
  return EduStanfordNlpUtilStringUtils_normalizeWithNSString_(s);
}

+ (NSString *)toStringWithJavaUtilList:(id<JavaUtilList>)words {
  return EduStanfordNlpUtilStringUtils_toStringWithJavaUtilList_(words);
}

+ (NSString *)toStringWithEduStanfordNlpUtilCoreMap:(id<EduStanfordNlpUtilCoreMap>)sentence {
  return EduStanfordNlpUtilStringUtils_toStringWithEduStanfordNlpUtilCoreMap_(sentence);
}

+ (jint)levenshteinDistanceWithNSString:(NSString *)s1
                           withNSString:(NSString *)s2 {
  return EduStanfordNlpUtilStringUtils_levenshteinDistanceWithNSString_withNSString_(s1, s2);
}

+ (jint)levenshteinDistanceWithNSObjectArray:(IOSObjectArray *)s1
                           withNSObjectArray:(IOSObjectArray *)s2 {
  return EduStanfordNlpUtilStringUtils_levenshteinDistanceWithNSObjectArray_withNSObjectArray_(s1, s2);
}

+ (NSString *)unescapeHtml3WithNSString:(NSString *)input {
  return EduStanfordNlpUtilStringUtils_unescapeHtml3WithNSString_(input);
}

+ (IOSObjectArray *)decodeArrayWithNSString:(NSString *)encoded {
  return EduStanfordNlpUtilStringUtils_decodeArrayWithNSString_(encoded);
}

+ (id<JavaUtilMap>)decodeMapWithNSString:(NSString *)encoded {
  return EduStanfordNlpUtilStringUtils_decodeMapWithNSString_(encoded);
}

+ (NSString *)expandEnvironmentVariablesWithNSString:(NSString *)raw
                                     withJavaUtilMap:(id<JavaUtilMap>)env {
  return EduStanfordNlpUtilStringUtils_expandEnvironmentVariablesWithNSString_withJavaUtilMap_(raw, env);
}

+ (NSString *)expandEnvironmentVariablesWithNSString:(NSString *)raw {
  return EduStanfordNlpUtilStringUtils_expandEnvironmentVariablesWithNSString_(raw);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 2, 3, -1, 4, -1, -1 },
    { NULL, "Z", 0x9, 5, 1, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x9, 6, 7, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x9, 8, 7, -1, 9, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 10, 11, -1, 12, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 13, 14, -1, 15, -1, -1 },
    { NULL, "Z", 0x9, 16, 1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x9, 17, 1, -1, 18, -1, -1 },
    { NULL, "LNSString;", 0x9, 19, 20, -1, 21, -1, -1 },
    { NULL, "LNSString;", 0x9, 22, 23, -1, 24, -1, -1 },
    { NULL, "LNSString;", 0x9, 19, 25, -1, 26, -1, -1 },
    { NULL, "LNSString;", 0x9, 27, 28, -1, 29, -1, -1 },
    { NULL, "LNSString;", 0x9, 27, 30, -1, 31, -1, -1 },
    { NULL, "LNSString;", 0x9, 27, 32, -1, 33, -1, -1 },
    { NULL, "LNSString;", 0x9, 27, 34, -1, 35, -1, -1 },
    { NULL, "LNSString;", 0x9, 36, 37, -1, 38, -1, -1 },
    { NULL, "LNSString;", 0x9, 36, 39, -1, 40, -1, -1 },
    { NULL, "LNSString;", 0x9, 36, 41, -1, 42, -1, -1 },
    { NULL, "LNSString;", 0x9, 36, 43, -1, 44, -1, -1 },
    { NULL, "LNSString;", 0x9, 45, 46, -1, 47, -1, -1 },
    { NULL, "LNSString;", 0x9, 22, 20, -1, 48, -1, -1 },
    { NULL, "LNSString;", 0x9, 22, 49, -1, 50, -1, -1 },
    { NULL, "LNSString;", 0x9, 22, 51, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 22, 52, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 22, 11, -1, 53, -1, -1 },
    { NULL, "LNSString;", 0x9, 22, 54, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 55, 7, -1, 56, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 55, 1, -1, 57, -1, -1 },
    { NULL, "[LNSString;", 0x9, 58, 59, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 60, 1, -1, 61, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 62, 63, -1, 64, -1, -1 },
    { NULL, "LNSString;", 0x9, 65, 66, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 65, 67, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 68, 66, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 69, 66, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 68, 67, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 70, 71, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 70, 66, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 70, 67, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 70, 72, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 70, 73, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 74, 66, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 74, 67, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 75, 66, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 75, 76, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 77, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 78, 79, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 80, 81, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x9, 82, 83, -1, 84, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x9, 82, 85, -1, 86, -1, -1 },
    { NULL, "LJavaUtilProperties;", 0x89, 87, 83, -1, -1, -1, -1 },
    { NULL, "LJavaUtilProperties;", 0x9, 87, 85, -1, 88, -1, -1 },
    { NULL, "LJavaUtilProperties;", 0x9, 89, 7, -1, -1, -1, -1 },
    { NULL, "LJavaUtilProperties;", 0x9, 90, 7, -1, -1, -1, -1 },
    { NULL, "LJavaUtilProperties;", 0x9, 90, 91, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x89, 92, 93, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 94, 95, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 96, 97, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 94, 97, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 94, 98, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 94, 99, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 96, 99, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 94, 1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x9, 100, 83, -1, 101, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x9, 100, 102, -1, 103, -1, -1 },
    { NULL, "LNSString;", 0x9, 104, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 105, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 106, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 107, 108, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x9, 109, 110, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 111, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 112, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 113, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 114, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 115, 116, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x9, 117, 118, 119, 120, -1, -1 },
    { NULL, "LNSObject;", 0x9, 117, 121, 122, 123, -1, -1 },
    { NULL, "LNSString;", 0x9, 124, 125, 126, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 127, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 128, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 129, 63, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 130, 131, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 132, 133, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 134, 135, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 136, 83, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 137, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 138, 83, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 139, 63, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 140, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 140, 116, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 141, 142, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 143, 142, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 144, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 144, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 145, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 146, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 147, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 148, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 149, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 150, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 151, 152, -1, -1, -1, -1 },
    { NULL, "LJavaUtilProperties;", 0x9, 153, 83, -1, -1, -1, -1 },
    { NULL, "LJavaUtilLinkedHashMap;", 0x9, 154, 152, -1, 155, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x9, 156, 157, -1, 158, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x9, 159, 157, -1, 160, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x9, 161, 162, -1, 163, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x9, 164, 162, -1, 163, -1, -1 },
    { NULL, "LNSString;", 0x9, 165, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 166, 46, -1, 47, -1, -1 },
    { NULL, "LNSString;", 0x9, 166, 167, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 168, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 168, 169, -1, 170, -1, -1 },
    { NULL, "LNSString;", 0x9, 171, 7, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x9, 172, 7, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x9, 173, 7, -1, 9, -1, -1 },
    { NULL, "LNSString;", 0x9, 174, 152, -1, 175, -1, -1 },
    { NULL, "LNSString;", 0x9, 174, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(findWithNSString:withNSString:);
  methods[2].selector = @selector(containsIgnoreCaseWithJavaUtilCollection:withNSString:);
  methods[3].selector = @selector(lookingAtWithNSString:withNSString:);
  methods[4].selector = @selector(mapStringToArrayWithNSString:);
  methods[5].selector = @selector(mapStringToMapWithNSString:);
  methods[6].selector = @selector(regexesToPatternsWithJavaLangIterable:);
  methods[7].selector = @selector(regexGroupsWithJavaUtilRegexPattern:withNSString:);
  methods[8].selector = @selector(matchesWithNSString:withNSString:);
  methods[9].selector = @selector(stringToSetWithNSString:withNSString:);
  methods[10].selector = @selector(joinWordsWithJavaLangIterable:withNSString:);
  methods[11].selector = @selector(joinWithJavaUtilList:withNSString:withJavaUtilFunctionFunction:withInt:withInt:);
  methods[12].selector = @selector(joinWordsWithJavaUtilList:withNSString:withInt:withInt:);
  methods[13].selector = @selector(joinFieldsWithJavaUtilList:withIOSClass:withNSString:withNSString:withInt:withInt:withJavaUtilFunctionFunction:);
  methods[14].selector = @selector(joinFieldsWithJavaUtilList:withIOSClass:withNSString:withNSString:withInt:withInt:);
  methods[15].selector = @selector(joinFieldsWithJavaUtilList:withIOSClass:withJavaUtilFunctionFunction:);
  methods[16].selector = @selector(joinFieldsWithJavaUtilList:withIOSClass:);
  methods[17].selector = @selector(joinMultipleFieldsWithJavaUtilList:withIOSClassArray:withNSString:withNSString:withNSString:withInt:withInt:withJavaUtilFunctionFunction:);
  methods[18].selector = @selector(joinMultipleFieldsWithJavaUtilList:withIOSClassArray:withJavaUtilFunctionFunction:);
  methods[19].selector = @selector(joinMultipleFieldsWithJavaUtilList:withIOSClassArray:withNSString:withNSString:withNSString:withInt:withInt:);
  methods[20].selector = @selector(joinMultipleFieldsWithJavaUtilList:withIOSClassArray:);
  methods[21].selector = @selector(joinWithOriginalWhiteSpaceWithJavaUtilList:);
  methods[22].selector = @selector(joinWithJavaLangIterable:withNSString:);
  methods[23].selector = @selector(joinWithJavaUtilStreamStream:withNSString:);
  methods[24].selector = @selector(joinWithNSObjectArray:withNSString:);
  methods[25].selector = @selector(joinWithNSObjectArray:withInt:withInt:withNSString:);
  methods[26].selector = @selector(joinWithJavaLangIterable:);
  methods[27].selector = @selector(joinWithNSObjectArray:);
  methods[28].selector = @selector(splitWithNSString:);
  methods[29].selector = @selector(splitWithNSString:withNSString:);
  methods[30].selector = @selector(splitOnCharWithNSString:withChar:);
  methods[31].selector = @selector(splitFieldsFastWithNSString:withNSString:);
  methods[32].selector = @selector(valueSplitWithNSString:withNSString:withNSString:);
  methods[33].selector = @selector(padWithNSString:withInt:);
  methods[34].selector = @selector(padWithId:withInt:);
  methods[35].selector = @selector(padOrTrimWithNSString:withInt:);
  methods[36].selector = @selector(padLeftOrTrimWithNSString:withInt:);
  methods[37].selector = @selector(padOrTrimWithId:withInt:);
  methods[38].selector = @selector(padLeftWithNSString:withInt:withChar:);
  methods[39].selector = @selector(padLeftWithNSString:withInt:);
  methods[40].selector = @selector(padLeftWithId:withInt:);
  methods[41].selector = @selector(padLeftWithInt:withInt:);
  methods[42].selector = @selector(padLeftWithDouble:withInt:);
  methods[43].selector = @selector(trimWithNSString:withInt:);
  methods[44].selector = @selector(trimWithId:withInt:);
  methods[45].selector = @selector(repeatWithNSString:withInt:);
  methods[46].selector = @selector(repeatWithChar:withInt:);
  methods[47].selector = @selector(fileNameCleanWithNSString:);
  methods[48].selector = @selector(nthIndexWithNSString:withChar:withInt:);
  methods[49].selector = @selector(truncateWithInt:withInt:withInt:);
  methods[50].selector = @selector(argsToMapWithNSStringArray:);
  methods[51].selector = @selector(argsToMapWithNSStringArray:withJavaUtilMap:);
  methods[52].selector = @selector(argsToPropertiesWithNSStringArray:);
  methods[53].selector = @selector(argsToPropertiesWithNSStringArray:withJavaUtilMap:);
  methods[54].selector = @selector(propFileToPropertiesWithNSString:);
  methods[55].selector = @selector(stringToPropertiesWithNSString:);
  methods[56].selector = @selector(stringToPropertiesWithNSString:withJavaUtilProperties:);
  methods[57].selector = @selector(checkRequiredPropertiesWithJavaUtilProperties:withNSStringArray:);
  methods[58].selector = @selector(printToFileWithJavaIoFile:withNSString:withBoolean:withBoolean:withNSString:);
  methods[59].selector = @selector(printToFileLnWithJavaIoFile:withNSString:withBoolean:);
  methods[60].selector = @selector(printToFileWithJavaIoFile:withNSString:withBoolean:);
  methods[61].selector = @selector(printToFileWithJavaIoFile:withNSString:);
  methods[62].selector = @selector(printToFileWithNSString:withNSString:withBoolean:);
  methods[63].selector = @selector(printToFileLnWithNSString:withNSString:withBoolean:);
  methods[64].selector = @selector(printToFileWithNSString:withNSString:);
  methods[65].selector = @selector(parseCommandLineArgumentsWithNSStringArray:);
  methods[66].selector = @selector(parseCommandLineArgumentsWithNSStringArray:withBoolean:);
  methods[67].selector = @selector(stripNonAlphaNumericsWithNSString:);
  methods[68].selector = @selector(stripSGMLWithNSString:);
  methods[69].selector = @selector(printStringOneCharPerLineWithNSString:);
  methods[70].selector = @selector(escapeStringWithNSString:withCharArray:withChar:);
  methods[71].selector = @selector(splitOnCharWithQuotingWithNSString:withChar:withChar:withChar:);
  methods[72].selector = @selector(longestCommonSubstringWithNSString:withNSString:);
  methods[73].selector = @selector(longestCommonContiguousSubstringWithNSString:withNSString:);
  methods[74].selector = @selector(editDistanceWithNSString:withNSString:);
  methods[75].selector = @selector(pennPOSToWordnetPOSWithNSString:);
  methods[76].selector = @selector(getShortClassNameWithId:);
  methods[77].selector = @selector(columnStringToObjectWithIOSClass:withNSString:withNSString:withNSStringArray:);
  methods[78].selector = @selector(columnStringToObjectWithIOSClass:withNSString:withJavaUtilRegexPattern:withNSStringArray:);
  methods[79].selector = @selector(objectToColumnStringWithId:withNSString:withNSStringArray:);
  methods[80].selector = @selector(capitalizeWithNSString:);
  methods[81].selector = @selector(isCapitalizedWithNSString:);
  methods[82].selector = @selector(searchAndReplaceWithNSString:withNSString:withNSString:);
  methods[83].selector = @selector(makeHTMLTableWithNSStringArray2:withNSStringArray:withNSStringArray:);
  methods[84].selector = @selector(makeTextTableWithNSObjectArray2:withNSObjectArray:withNSObjectArray:withInt:withInt:withBoolean:);
  methods[85].selector = @selector(makeAsciiTableCellWithId:withInt:withInt:withBoolean:);
  methods[86].selector = @selector(mainWithNSStringArray:);
  methods[87].selector = @selector(toAsciiWithNSString:);
  methods[88].selector = @selector(toCSVStringWithNSStringArray:);
  methods[89].selector = @selector(trWithNSString:withNSString:withNSString:);
  methods[90].selector = @selector(chompWithNSString:);
  methods[91].selector = @selector(chompWithId:);
  methods[92].selector = @selector(printErrInvocationStringWithNSString:withNSStringArray:);
  methods[93].selector = @selector(toInvocationStringWithNSString:withNSStringArray:);
  methods[94].selector = @selector(getBaseNameWithNSString:);
  methods[95].selector = @selector(getBaseNameWithNSString:withNSString:);
  methods[96].selector = @selector(isAlphaWithNSString:);
  methods[97].selector = @selector(isNumericWithNSString:);
  methods[98].selector = @selector(isAlphanumericWithNSString:);
  methods[99].selector = @selector(isPunctWithNSString:);
  methods[100].selector = @selector(isAcronymWithNSString:);
  methods[101].selector = @selector(getNotNullStringWithNSString:);
  methods[102].selector = @selector(resolveVarsWithNSString:withJavaUtilMap:);
  methods[103].selector = @selector(argsToPropertiesWithResolveWithNSStringArray:);
  methods[104].selector = @selector(propFileToLinkedHashMapWithNSString:withJavaUtilMap:);
  methods[105].selector = @selector(getNgramsWithJavaUtilList:withInt:withInt:);
  methods[106].selector = @selector(getNgramsFromTokensWithJavaUtilList:withInt:withInt:);
  methods[107].selector = @selector(getNgramsStringWithNSString:withInt:withInt:);
  methods[108].selector = @selector(getCharacterNgramsWithNSString:withInt:withInt:);
  methods[109].selector = @selector(normalizeWithNSString:);
  methods[110].selector = @selector(toStringWithJavaUtilList:);
  methods[111].selector = @selector(toStringWithEduStanfordNlpUtilCoreMap:);
  methods[112].selector = @selector(levenshteinDistanceWithNSString:withNSString:);
  methods[113].selector = @selector(levenshteinDistanceWithNSObjectArray:withNSObjectArray:);
  methods[114].selector = @selector(unescapeHtml3WithNSString:);
  methods[115].selector = @selector(decodeArrayWithNSString:);
  methods[116].selector = @selector(decodeMapWithNSString:);
  methods[117].selector = @selector(expandEnvironmentVariablesWithNSString:withJavaUtilMap:);
  methods[118].selector = @selector(expandEnvironmentVariablesWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "EMPTY_STRING_ARRAY", "[LNSString;", .constantValue.asLong = 0, 0x19, -1, 176, -1, -1 },
    { "PROP", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 177, -1, -1 },
    { "PROPS", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 178, -1, -1 },
    { "PROPERTIES", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 179, -1, -1 },
    { "ARGS", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 180, -1, -1 },
    { "ARGUMENTS", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 181, -1, -1 },
    { "DEFAULT_TOSTRING", "LJavaUtilFunctionFunction;", .constantValue.asLong = 0, 0x19, -1, 182, 183, -1 },
    { "diacriticalMarksPattern", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0xa, -1, 184, -1, -1 },
    { "HTML_ESCAPES", "[[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 185, -1, -1 },
    { "htmlUnescapeLookupMap", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x1a, -1, 186, 187, -1 },
  };
  static const void *ptrTable[] = { "find", "LNSString;LNSString;", "containsIgnoreCase", "LJavaUtilCollection;LNSString;", "(Ljava/util/Collection<Ljava/lang/String;>;Ljava/lang/String;)Z", "lookingAt", "mapStringToArray", "LNSString;", "mapStringToMap", "(Ljava/lang/String;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", "regexesToPatterns", "LJavaLangIterable;", "(Ljava/lang/Iterable<Ljava/lang/String;>;)Ljava/util/List<Ljava/util/regex/Pattern;>;", "regexGroups", "LJavaUtilRegexPattern;LNSString;", "(Ljava/util/regex/Pattern;Ljava/lang/String;)Ljava/util/List<Ljava/lang/String;>;", "matches", "stringToSet", "(Ljava/lang/String;Ljava/lang/String;)Ljava/util/Set<Ljava/lang/String;>;", "joinWords", "LJavaLangIterable;LNSString;", "(Ljava/lang/Iterable<+Ledu/stanford/nlp/ling/HasWord;>;Ljava/lang/String;)Ljava/lang/String;", "join", "LJavaUtilList;LNSString;LJavaUtilFunctionFunction;II", "<E:Ljava/lang/Object;>(Ljava/util/List<+TE;>;Ljava/lang/String;Ljava/util/function/Function<TE;Ljava/lang/String;>;II)Ljava/lang/String;", "LJavaUtilList;LNSString;II", "(Ljava/util/List<+Ledu/stanford/nlp/ling/HasWord;>;Ljava/lang/String;II)Ljava/lang/String;", "joinFields", "LJavaUtilList;LIOSClass;LNSString;LNSString;IILJavaUtilFunctionFunction;", "(Ljava/util/List<+Ledu/stanford/nlp/util/CoreMap;>;Ljava/lang/Class;Ljava/lang/String;Ljava/lang/String;IILjava/util/function/Function<Ljava/lang/Object;Ljava/lang/String;>;)Ljava/lang/String;", "LJavaUtilList;LIOSClass;LNSString;LNSString;II", "(Ljava/util/List<+Ledu/stanford/nlp/util/CoreMap;>;Ljava/lang/Class;Ljava/lang/String;Ljava/lang/String;II)Ljava/lang/String;", "LJavaUtilList;LIOSClass;LJavaUtilFunctionFunction;", "(Ljava/util/List<+Ledu/stanford/nlp/util/CoreMap;>;Ljava/lang/Class;Ljava/util/function/Function<Ljava/lang/Object;Ljava/lang/String;>;)Ljava/lang/String;", "LJavaUtilList;LIOSClass;", "(Ljava/util/List<+Ledu/stanford/nlp/util/CoreMap;>;Ljava/lang/Class;)Ljava/lang/String;", "joinMultipleFields", "LJavaUtilList;[LIOSClass;LNSString;LNSString;LNSString;IILJavaUtilFunctionFunction;", "(Ljava/util/List<+Ledu/stanford/nlp/util/CoreMap;>;[Ljava/lang/Class;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IILjava/util/function/Function<Ljava/lang/Object;Ljava/lang/String;>;)Ljava/lang/String;", "LJavaUtilList;[LIOSClass;LJavaUtilFunctionFunction;", "(Ljava/util/List<+Ledu/stanford/nlp/util/CoreMap;>;[Ljava/lang/Class;Ljava/util/function/Function<Ljava/lang/Object;Ljava/lang/String;>;)Ljava/lang/String;", "LJavaUtilList;[LIOSClass;LNSString;LNSString;LNSString;II", "(Ljava/util/List<+Ledu/stanford/nlp/util/CoreMap;>;[Ljava/lang/Class;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;II)Ljava/lang/String;", "LJavaUtilList;[LIOSClass;", "(Ljava/util/List<+Ledu/stanford/nlp/util/CoreMap;>;[Ljava/lang/Class;)Ljava/lang/String;", "joinWithOriginalWhiteSpace", "LJavaUtilList;", "(Ljava/util/List<Ledu/stanford/nlp/ling/CoreLabel;>;)Ljava/lang/String;", "<X:Ljava/lang/Object;>(Ljava/lang/Iterable<TX;>;Ljava/lang/String;)Ljava/lang/String;", "LJavaUtilStreamStream;LNSString;", "<X:Ljava/lang/Object;>(Ljava/util/stream/Stream<TX;>;Ljava/lang/String;)Ljava/lang/String;", "[LNSObject;LNSString;", "[LNSObject;IILNSString;", "(Ljava/lang/Iterable<*>;)Ljava/lang/String;", "[LNSObject;", "split", "(Ljava/lang/String;)Ljava/util/List<Ljava/lang/String;>;", "(Ljava/lang/String;Ljava/lang/String;)Ljava/util/List<Ljava/lang/String;>;", "splitOnChar", "LNSString;C", "splitFieldsFast", "(Ljava/lang/String;Ljava/lang/String;)Ljava/util/List<Ljava/util/List<Ljava/lang/String;>;>;", "valueSplit", "LNSString;LNSString;LNSString;", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/util/List<Ljava/lang/String;>;", "pad", "LNSString;I", "LNSObject;I", "padOrTrim", "padLeftOrTrim", "padLeft", "LNSString;IC", "II", "DI", "trim", "repeat", "CI", "fileNameClean", "nthIndex", "LNSString;CI", "truncate", "III", "argsToMap", "[LNSString;", "([Ljava/lang/String;)Ljava/util/Map<Ljava/lang/String;[Ljava/lang/String;>;", "[LNSString;LJavaUtilMap;", "([Ljava/lang/String;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;)Ljava/util/Map<Ljava/lang/String;[Ljava/lang/String;>;", "argsToProperties", "([Ljava/lang/String;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;)Ljava/util/Properties;", "propFileToProperties", "stringToProperties", "LNSString;LJavaUtilProperties;", "checkRequiredProperties", "LJavaUtilProperties;[LNSString;", "printToFile", "LJavaIoFile;LNSString;ZZLNSString;", "printToFileLn", "LJavaIoFile;LNSString;Z", "LJavaIoFile;LNSString;", "LNSString;LNSString;Z", "parseCommandLineArguments", "([Ljava/lang/String;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", "[LNSString;Z", "([Ljava/lang/String;Z)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "stripNonAlphaNumerics", "stripSGML", "printStringOneCharPerLine", "escapeString", "LNSString;[CC", "splitOnCharWithQuoting", "LNSString;CCC", "longestCommonSubstring", "longestCommonContiguousSubstring", "editDistance", "pennPOSToWordnetPOS", "getShortClassName", "LNSObject;", "columnStringToObject", "LIOSClass;LNSString;LNSString;[LNSString;", "LJavaLangInstantiationException;LJavaLangIllegalAccessException;LJavaLangNoSuchFieldException;LJavaLangNoSuchMethodException;LJavaLangReflectInvocationTargetException;", "<T:Ljava/lang/Object;>(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)TT;", "LIOSClass;LNSString;LJavaUtilRegexPattern;[LNSString;", "LJavaLangInstantiationException;LJavaLangIllegalAccessException;LJavaLangNoSuchMethodException;LJavaLangNoSuchFieldException;LJavaLangReflectInvocationTargetException;", "<T:Ljava/lang/Object;>(Ljava/lang/Class<*>;Ljava/lang/String;Ljava/util/regex/Pattern;[Ljava/lang/String;)TT;", "objectToColumnString", "LNSObject;LNSString;[LNSString;", "LJavaLangIllegalAccessException;LJavaLangNoSuchFieldException;LJavaLangNoSuchMethodException;LJavaLangReflectInvocationTargetException;", "capitalize", "isCapitalized", "searchAndReplace", "makeHTMLTable", "[[LNSString;[LNSString;[LNSString;", "makeTextTable", "[[LNSObject;[LNSObject;[LNSObject;IIZ", "makeAsciiTableCell", "LNSObject;IIZ", "main", "toAscii", "toCSVString", "tr", "chomp", "printErrInvocationString", "LNSString;[LNSString;", "toInvocationString", "getBaseName", "isAlpha", "isNumeric", "isAlphanumeric", "isPunct", "isAcronym", "getNotNullString", "resolveVars", "LNSString;LJavaUtilMap;", "argsToPropertiesWithResolve", "propFileToLinkedHashMap", "(Ljava/lang/String;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)Ljava/util/LinkedHashMap<Ljava/lang/String;Ljava/lang/String;>;", "getNgrams", "LJavaUtilList;II", "(Ljava/util/List<Ljava/lang/String;>;II)Ljava/util/Collection<Ljava/lang/String;>;", "getNgramsFromTokens", "(Ljava/util/List<Ledu/stanford/nlp/ling/CoreLabel;>;II)Ljava/util/Collection<Ljava/lang/String;>;", "getNgramsString", "LNSString;II", "(Ljava/lang/String;II)Ljava/util/Collection<Ljava/lang/String;>;", "getCharacterNgrams", "normalize", "toString", "LEduStanfordNlpUtilCoreMap;", "levenshteinDistance", "[LNSObject;[LNSObject;", "<E:Ljava/lang/Object;>([TE;[TE;)I", "unescapeHtml3", "decodeArray", "decodeMap", "expandEnvironmentVariables", "(Ljava/lang/String;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)Ljava/lang/String;", &EduStanfordNlpUtilStringUtils_EMPTY_STRING_ARRAY, &EduStanfordNlpUtilStringUtils_PROP, &EduStanfordNlpUtilStringUtils_PROPS, &EduStanfordNlpUtilStringUtils_PROPERTIES, &EduStanfordNlpUtilStringUtils_ARGS, &EduStanfordNlpUtilStringUtils_ARGUMENTS, &EduStanfordNlpUtilStringUtils_DEFAULT_TOSTRING, "Ljava/util/function/Function<Ljava/lang/Object;Ljava/lang/String;>;", &EduStanfordNlpUtilStringUtils_diacriticalMarksPattern, &EduStanfordNlpUtilStringUtils_HTML_ESCAPES, &EduStanfordNlpUtilStringUtils_htmlUnescapeLookupMap, "Ljava/util/HashMap<Ljava/lang/String;Ljava/lang/CharSequence;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilStringUtils = { "StringUtils", "edu.stanford.nlp.util", ptrTable, methods, fields, 7, 0x1, 119, 10, -1, -1, -1, -1, -1 };
  return &_EduStanfordNlpUtilStringUtils;
}

+ (void)initialize {
  if (self == [EduStanfordNlpUtilStringUtils class]) {
    EduStanfordNlpUtilStringUtils_EMPTY_STRING_ARRAY = [IOSObjectArray newArrayWithLength:0 type:NSString_class_()];
    EduStanfordNlpUtilStringUtils_DEFAULT_TOSTRING = new_EduStanfordNlpUtilStringUtils_$1_init();
    EduStanfordNlpUtilStringUtils_diacriticalMarksPattern = JavaUtilRegexPattern_compileWithNSString_(@"\\p{InCombiningDiacriticalMarks}");
    EduStanfordNlpUtilStringUtils_HTML_ESCAPES = [IOSObjectArray newArrayWithObjects:(id[]){ [IOSObjectArray newArrayWithObjects:(id[]){ @"\"", @"quot" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"&", @"amp" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"<", @"lt" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @">", @"gt" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"-", @"ndash" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00a0", @"nbsp" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00a1", @"iexcl" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00a2", @"cent" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00a3", @"pound" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00a4", @"curren" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00a5", @"yen" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00a6", @"brvbar" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00a7", @"sect" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00a8", @"uml" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00a9", @"copy" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00aa", @"ordf" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00ab", @"laquo" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00ac", @"not" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00ad", @"shy" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00ae", @"reg" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00af", @"macr" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00b0", @"deg" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00b1", @"plusmn" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00b2", @"sup2" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00b3", @"sup3" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00b4", @"acute" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00b5", @"micro" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00b6", @"para" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00b7", @"middot" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00b8", @"cedil" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00b9", @"sup1" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00ba", @"ordm" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00bb", @"raquo" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00bc", @"frac14" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00bd", @"frac12" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00be", @"frac34" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00bf", @"iquest" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00c0", @"Agrave" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00c1", @"Aacute" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00c2", @"Acirc" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00c3", @"Atilde" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00c4", @"Auml" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00c5", @"Aring" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00c6", @"AElig" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00c7", @"Ccedil" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00c8", @"Egrave" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00c9", @"Eacute" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00ca", @"Ecirc" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00cb", @"Euml" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00cc", @"Igrave" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00cd", @"Iacute" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00ce", @"Icirc" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00cf", @"Iuml" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00d0", @"ETH" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00d1", @"Ntilde" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00d2", @"Ograve" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00d3", @"Oacute" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00d4", @"Ocirc" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00d5", @"Otilde" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00d6", @"Ouml" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00d7", @"times" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00d8", @"Oslash" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00d9", @"Ugrave" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00da", @"Uacute" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00db", @"Ucirc" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00dc", @"Uuml" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00dd", @"Yacute" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00de", @"THORN" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00df", @"szlig" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00e0", @"agrave" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00e1", @"aacute" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00e2", @"acirc" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00e3", @"atilde" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00e4", @"auml" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00e5", @"aring" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00e6", @"aelig" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00e7", @"ccedil" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00e8", @"egrave" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00e9", @"eacute" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00ea", @"ecirc" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00eb", @"euml" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00ec", @"igrave" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00ed", @"iacute" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00ee", @"icirc" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00ef", @"iuml" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00f0", @"eth" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00f1", @"ntilde" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00f2", @"ograve" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00f3", @"oacute" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00f4", @"ocirc" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00f5", @"otilde" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00f6", @"ouml" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00f7", @"divide" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00f8", @"oslash" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00f9", @"ugrave" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00fa", @"uacute" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00fb", @"ucirc" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00fc", @"uuml" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00fd", @"yacute" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00fe", @"thorn" } count:2 type:NSString_class_()], [IOSObjectArray newArrayWithObjects:(id[]){ @"\u00ff", @"yuml" } count:2 type:NSString_class_()] } count:101 type:IOSClass_arrayType(NSString_class_(), 1)];
    {
      EduStanfordNlpUtilStringUtils_htmlUnescapeLookupMap = new_JavaUtilHashMap_init();
      {
        IOSObjectArray *a__ = EduStanfordNlpUtilStringUtils_HTML_ESCAPES;
        IOSObjectArray * const *b__ = a__->buffer_;
        IOSObjectArray * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          IOSObjectArray *seq = *b__++;
          (void) [EduStanfordNlpUtilStringUtils_htmlUnescapeLookupMap putWithId:[((id<JavaLangCharSequence>) nil_chk(IOSObjectArray_Get(nil_chk(seq), 1))) description] withId:IOSObjectArray_Get(seq, 0)];
        }
      }
    }
    J2OBJC_SET_INITIALIZED(EduStanfordNlpUtilStringUtils)
  }
}

@end

void EduStanfordNlpUtilStringUtils_init(EduStanfordNlpUtilStringUtils *self) {
  NSObject_init(self);
}

EduStanfordNlpUtilStringUtils *new_EduStanfordNlpUtilStringUtils_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilStringUtils, init)
}

EduStanfordNlpUtilStringUtils *create_EduStanfordNlpUtilStringUtils_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilStringUtils, init)
}

jboolean EduStanfordNlpUtilStringUtils_findWithNSString_withNSString_(NSString *str, NSString *regex) {
  EduStanfordNlpUtilStringUtils_initialize();
  return [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(JavaUtilRegexPattern_compileWithNSString_(regex))) matcherWithJavaLangCharSequence:str])) find];
}

jboolean EduStanfordNlpUtilStringUtils_containsIgnoreCaseWithJavaUtilCollection_withNSString_(id<JavaUtilCollection> c, NSString *s) {
  EduStanfordNlpUtilStringUtils_initialize();
  for (NSString * __strong squote in nil_chk(c)) {
    if ([((NSString *) nil_chk(squote)) equalsIgnoreCase:s]) return true;
  }
  return false;
}

jboolean EduStanfordNlpUtilStringUtils_lookingAtWithNSString_withNSString_(NSString *str, NSString *regex) {
  EduStanfordNlpUtilStringUtils_initialize();
  return [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(JavaUtilRegexPattern_compileWithNSString_(regex))) matcherWithJavaLangCharSequence:str])) lookingAt];
}

IOSObjectArray *EduStanfordNlpUtilStringUtils_mapStringToArrayWithNSString_(NSString *map) {
  EduStanfordNlpUtilStringUtils_initialize();
  IOSObjectArray *m = [((NSString *) nil_chk(map)) split:@"[,;]"];
  jint maxIndex = 0;
  IOSObjectArray *keys = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(m))->size_ type:NSString_class_()];
  IOSIntArray *indices = [IOSIntArray newArrayWithLength:m->size_];
  for (jint i = 0; i < m->size_; i++) {
    jint index = [((NSString *) nil_chk(IOSObjectArray_Get(m, i))) lastIndexOf:'='];
    (void) IOSObjectArray_Set(keys, i, [((NSString *) nil_chk(IOSObjectArray_Get(m, i))) substring:0 endIndex:index]);
    *IOSIntArray_GetRef(indices, i) = JavaLangInteger_parseIntWithNSString_([((NSString *) nil_chk(IOSObjectArray_Get(m, i))) substring:index + 1]);
    if (IOSIntArray_Get(indices, i) > maxIndex) {
      maxIndex = IOSIntArray_Get(indices, i);
    }
  }
  IOSObjectArray *mapArr = [IOSObjectArray newArrayWithLength:maxIndex + 1 type:NSString_class_()];
  JavaUtilArrays_fillWithNSObjectArray_withId_(mapArr, nil);
  for (jint i = 0; i < m->size_; i++) {
    (void) IOSObjectArray_Set(mapArr, IOSIntArray_Get(indices, i), IOSObjectArray_Get(keys, i));
  }
  return mapArr;
}

id<JavaUtilMap> EduStanfordNlpUtilStringUtils_mapStringToMapWithNSString_(NSString *map) {
  EduStanfordNlpUtilStringUtils_initialize();
  IOSObjectArray *m = [((NSString *) nil_chk(map)) split:@"[,;]"];
  id<JavaUtilMap> res = EduStanfordNlpUtilGenerics_newHashMap();
  {
    IOSObjectArray *a__ = m;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *str = *b__++;
      jint index = [((NSString *) nil_chk(str)) lastIndexOf:'='];
      NSString *key = [str substring:0 endIndex:index];
      NSString *val = [str substring:index + 1];
      (void) [((id<JavaUtilMap>) nil_chk(res)) putWithId:[((NSString *) nil_chk(key)) trim] withId:[((NSString *) nil_chk(val)) trim]];
    }
  }
  return res;
}

id<JavaUtilList> EduStanfordNlpUtilStringUtils_regexesToPatternsWithJavaLangIterable_(id<JavaLangIterable> regexes) {
  EduStanfordNlpUtilStringUtils_initialize();
  id<JavaUtilList> patterns = new_JavaUtilArrayList_init();
  for (NSString * __strong regex in nil_chk(regexes)) {
    [patterns addWithId:JavaUtilRegexPattern_compileWithNSString_(regex)];
  }
  return patterns;
}

id<JavaUtilList> EduStanfordNlpUtilStringUtils_regexGroupsWithJavaUtilRegexPattern_withNSString_(JavaUtilRegexPattern *regex, NSString *str) {
  EduStanfordNlpUtilStringUtils_initialize();
  if (str == nil) {
    return nil;
  }
  JavaUtilRegexMatcher *matcher = [((JavaUtilRegexPattern *) nil_chk(regex)) matcherWithJavaLangCharSequence:str];
  if (![((JavaUtilRegexMatcher *) nil_chk(matcher)) find]) {
    return nil;
  }
  id<JavaUtilList> groups = new_JavaUtilArrayList_init();
  for (jint index = 1; index <= [matcher groupCount]; index++) {
    [groups addWithId:[matcher groupWithInt:index]];
  }
  return groups;
}

jboolean EduStanfordNlpUtilStringUtils_matchesWithNSString_withNSString_(NSString *str, NSString *regex) {
  EduStanfordNlpUtilStringUtils_initialize();
  return [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(JavaUtilRegexPattern_compileWithNSString_(regex))) matcherWithJavaLangCharSequence:str])) matches];
}

id<JavaUtilSet> EduStanfordNlpUtilStringUtils_stringToSetWithNSString_withNSString_(NSString *str, NSString *delimiter) {
  EduStanfordNlpUtilStringUtils_initialize();
  id<JavaUtilSet> ret = nil;
  if (str != nil) {
    IOSObjectArray *fields = [str split:delimiter];
    ret = EduStanfordNlpUtilGenerics_newHashSetWithInt_(((IOSObjectArray *) nil_chk(fields))->size_);
    {
      IOSObjectArray *a__ = fields;
      NSString * const *b__ = a__->buffer_;
      NSString * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        NSString *field = *b__++;
        field = [((NSString *) nil_chk(field)) trim];
        [((id<JavaUtilSet>) nil_chk(ret)) addWithId:field];
      }
    }
  }
  return ret;
}

NSString *EduStanfordNlpUtilStringUtils_joinWordsWithJavaLangIterable_withNSString_(id<JavaLangIterable> l, NSString *glue) {
  EduStanfordNlpUtilStringUtils_initialize();
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_initWithInt_([JavaUtilCollection_class_() isInstance:l] ? [((id<JavaUtilCollection>) nil_chk(((id<JavaUtilCollection>) cast_check(l, JavaUtilCollection_class_())))) size] : 64);
  jboolean first = true;
  for (id<EduStanfordNlpLingHasWord> __strong o in nil_chk(l)) {
    if (!first) {
      (void) [sb appendWithNSString:glue];
    }
    else {
      first = false;
    }
    (void) [sb appendWithNSString:[((id<EduStanfordNlpLingHasWord>) nil_chk(o)) word]];
  }
  return [sb description];
}

NSString *EduStanfordNlpUtilStringUtils_joinWithJavaUtilList_withNSString_withJavaUtilFunctionFunction_withInt_withInt_(id<JavaUtilList> l, NSString *glue, id<JavaUtilFunctionFunction> toStringFunc, jint start, jint end) {
  EduStanfordNlpUtilStringUtils_initialize();
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  jboolean first = true;
  start = JavaLangMath_maxWithInt_withInt_(start, 0);
  end = JavaLangMath_minWithInt_withInt_(end, [((id<JavaUtilList>) nil_chk(l)) size]);
  for (jint i = start; i < end; i++) {
    if (!first) {
      (void) [sb appendWithNSString:glue];
    }
    else {
      first = false;
    }
    (void) [sb appendWithNSString:[((id<JavaUtilFunctionFunction>) nil_chk(toStringFunc)) applyWithId:[l getWithInt:i]]];
  }
  return [sb description];
}

NSString *EduStanfordNlpUtilStringUtils_joinWordsWithJavaUtilList_withNSString_withInt_withInt_(id<JavaUtilList> l, NSString *glue, jint start, jint end) {
  EduStanfordNlpUtilStringUtils_initialize();
  return EduStanfordNlpUtilStringUtils_joinWithJavaUtilList_withNSString_withJavaUtilFunctionFunction_withInt_withInt_(l, glue, JreLoadStatic(EduStanfordNlpUtilStringUtils_$Lambda$1, instance), start, end);
}

NSString *EduStanfordNlpUtilStringUtils_joinFieldsWithJavaUtilList_withIOSClass_withNSString_withNSString_withInt_withInt_withJavaUtilFunctionFunction_(id<JavaUtilList> l, IOSClass *field, NSString *defaultFieldValue, NSString *glue, jint start, jint end, id<JavaUtilFunctionFunction> toStringFunc) {
  EduStanfordNlpUtilStringUtils_initialize();
  return EduStanfordNlpUtilStringUtils_joinWithJavaUtilList_withNSString_withJavaUtilFunctionFunction_withInt_withInt_(l, glue, new_EduStanfordNlpUtilStringUtils_$2_initWithIOSClass_withJavaUtilFunctionFunction_withNSString_(field, toStringFunc, defaultFieldValue), start, end);
}

NSString *EduStanfordNlpUtilStringUtils_joinFieldsWithJavaUtilList_withIOSClass_withNSString_withNSString_withInt_withInt_(id<JavaUtilList> l, IOSClass *field, NSString *defaultFieldValue, NSString *glue, jint start, jint end) {
  EduStanfordNlpUtilStringUtils_initialize();
  return EduStanfordNlpUtilStringUtils_joinFieldsWithJavaUtilList_withIOSClass_withNSString_withNSString_withInt_withInt_withJavaUtilFunctionFunction_(l, field, defaultFieldValue, glue, start, end, EduStanfordNlpUtilStringUtils_DEFAULT_TOSTRING);
}

NSString *EduStanfordNlpUtilStringUtils_joinFieldsWithJavaUtilList_withIOSClass_withJavaUtilFunctionFunction_(id<JavaUtilList> l, IOSClass *field, id<JavaUtilFunctionFunction> toStringFunc) {
  EduStanfordNlpUtilStringUtils_initialize();
  return EduStanfordNlpUtilStringUtils_joinFieldsWithJavaUtilList_withIOSClass_withNSString_withNSString_withInt_withInt_withJavaUtilFunctionFunction_(l, field, @"-", @" ", 0, [((id<JavaUtilList>) nil_chk(l)) size], toStringFunc);
}

NSString *EduStanfordNlpUtilStringUtils_joinFieldsWithJavaUtilList_withIOSClass_(id<JavaUtilList> l, IOSClass *field) {
  EduStanfordNlpUtilStringUtils_initialize();
  return EduStanfordNlpUtilStringUtils_joinFieldsWithJavaUtilList_withIOSClass_withNSString_withNSString_withInt_withInt_(l, field, @"-", @" ", 0, [((id<JavaUtilList>) nil_chk(l)) size]);
}

NSString *EduStanfordNlpUtilStringUtils_joinMultipleFieldsWithJavaUtilList_withIOSClassArray_withNSString_withNSString_withNSString_withInt_withInt_withJavaUtilFunctionFunction_(id<JavaUtilList> l, IOSObjectArray *fields, NSString *defaultFieldValue, NSString *fieldGlue, NSString *glue, jint start, jint end, id<JavaUtilFunctionFunction> toStringFunc) {
  EduStanfordNlpUtilStringUtils_initialize();
  return EduStanfordNlpUtilStringUtils_joinWithJavaUtilList_withNSString_withJavaUtilFunctionFunction_withInt_withInt_(l, glue, new_EduStanfordNlpUtilStringUtils_$3_initWithIOSClassArray_withNSString_withJavaUtilFunctionFunction_withNSString_(fields, fieldGlue, toStringFunc, defaultFieldValue), start, end);
}

NSString *EduStanfordNlpUtilStringUtils_joinMultipleFieldsWithJavaUtilList_withIOSClassArray_withJavaUtilFunctionFunction_(id<JavaUtilList> l, IOSObjectArray *fields, id<JavaUtilFunctionFunction> toStringFunc) {
  EduStanfordNlpUtilStringUtils_initialize();
  return EduStanfordNlpUtilStringUtils_joinMultipleFieldsWithJavaUtilList_withIOSClassArray_withNSString_withNSString_withNSString_withInt_withInt_withJavaUtilFunctionFunction_(l, fields, @"-", @"/", @" ", 0, [((id<JavaUtilList>) nil_chk(l)) size], toStringFunc);
}

NSString *EduStanfordNlpUtilStringUtils_joinMultipleFieldsWithJavaUtilList_withIOSClassArray_withNSString_withNSString_withNSString_withInt_withInt_(id<JavaUtilList> l, IOSObjectArray *fields, NSString *defaultFieldValue, NSString *fieldGlue, NSString *glue, jint start, jint end) {
  EduStanfordNlpUtilStringUtils_initialize();
  return EduStanfordNlpUtilStringUtils_joinMultipleFieldsWithJavaUtilList_withIOSClassArray_withNSString_withNSString_withNSString_withInt_withInt_withJavaUtilFunctionFunction_(l, fields, defaultFieldValue, fieldGlue, glue, start, end, EduStanfordNlpUtilStringUtils_DEFAULT_TOSTRING);
}

NSString *EduStanfordNlpUtilStringUtils_joinMultipleFieldsWithJavaUtilList_withIOSClassArray_(id<JavaUtilList> l, IOSObjectArray *fields) {
  EduStanfordNlpUtilStringUtils_initialize();
  return EduStanfordNlpUtilStringUtils_joinMultipleFieldsWithJavaUtilList_withIOSClassArray_withNSString_withNSString_withNSString_withInt_withInt_(l, fields, @"-", @"/", @" ", 0, [((id<JavaUtilList>) nil_chk(l)) size]);
}

NSString *EduStanfordNlpUtilStringUtils_joinWithOriginalWhiteSpaceWithJavaUtilList_(id<JavaUtilList> tokens) {
  EduStanfordNlpUtilStringUtils_initialize();
  if ([((id<JavaUtilList>) nil_chk(tokens)) isEmpty]) {
    return @"";
  }
  EduStanfordNlpLingCoreLabel *lastToken = [tokens getWithInt:0];
  JavaLangStringBuilder *buffer = new_JavaLangStringBuilder_initWithNSString_([((EduStanfordNlpLingCoreLabel *) nil_chk(lastToken)) word]);
  for (jint i = 1; i < [tokens size]; i++) {
    EduStanfordNlpLingCoreLabel *currentToken = [tokens getWithInt:i];
    jint numSpaces = [((EduStanfordNlpLingCoreLabel *) nil_chk(currentToken)) beginPosition] - [lastToken endPosition];
    if (numSpaces < 0) {
      numSpaces = 0;
    }
    (void) [((JavaLangStringBuilder *) nil_chk([buffer appendWithNSString:EduStanfordNlpUtilStringUtils_repeatWithChar_withInt_(' ', numSpaces)])) appendWithNSString:[currentToken word]];
    lastToken = currentToken;
  }
  return [buffer description];
}

NSString *EduStanfordNlpUtilStringUtils_joinWithJavaLangIterable_withNSString_(id<JavaLangIterable> l, NSString *glue) {
  EduStanfordNlpUtilStringUtils_initialize();
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  jboolean first = true;
  for (id __strong o in nil_chk(l)) {
    if (!first) {
      (void) [sb appendWithNSString:glue];
    }
    else {
      first = false;
    }
    (void) [sb appendWithId:o];
  }
  return [sb description];
}

NSString *EduStanfordNlpUtilStringUtils_joinWithJavaUtilStreamStream_withNSString_(id<JavaUtilStreamStream> l, NSString *glue) {
  EduStanfordNlpUtilStringUtils_initialize();
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  jboolean first = true;
  id<JavaUtilIterator> iter = [((id<JavaUtilStreamStream>) nil_chk(l)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(iter)) hasNext]) {
    if (!first) {
      (void) [sb appendWithNSString:glue];
    }
    else {
      first = false;
    }
    (void) [sb appendWithId:[iter next]];
  }
  return [sb description];
}

NSString *EduStanfordNlpUtilStringUtils_joinWithNSObjectArray_withNSString_(IOSObjectArray *elements, NSString *glue) {
  EduStanfordNlpUtilStringUtils_initialize();
  return (EduStanfordNlpUtilStringUtils_joinWithJavaLangIterable_withNSString_(JavaUtilArrays_asListWithNSObjectArray_(elements), glue));
}

NSString *EduStanfordNlpUtilStringUtils_joinWithNSObjectArray_withInt_withInt_withNSString_(IOSObjectArray *elements, jint start, jint end, NSString *glue) {
  EduStanfordNlpUtilStringUtils_initialize();
  JavaLangStringBuilder *b = new_JavaLangStringBuilder_initWithInt_(127);
  jboolean isFirst = true;
  for (jint i = start; i < end; ++i) {
    if (isFirst) {
      (void) [b appendWithNSString:[nil_chk(IOSObjectArray_Get(nil_chk(elements), i)) description]];
      isFirst = false;
    }
    else {
      (void) [((JavaLangStringBuilder *) nil_chk([b appendWithNSString:glue])) appendWithNSString:[nil_chk(IOSObjectArray_Get(nil_chk(elements), i)) description]];
    }
  }
  return [b description];
}

NSString *EduStanfordNlpUtilStringUtils_joinWithJavaLangIterable_(id<JavaLangIterable> l) {
  EduStanfordNlpUtilStringUtils_initialize();
  return EduStanfordNlpUtilStringUtils_joinWithJavaLangIterable_withNSString_(l, @" ");
}

NSString *EduStanfordNlpUtilStringUtils_joinWithNSObjectArray_(IOSObjectArray *elements) {
  EduStanfordNlpUtilStringUtils_initialize();
  return (EduStanfordNlpUtilStringUtils_joinWithNSObjectArray_withNSString_(elements, @" "));
}

id<JavaUtilList> EduStanfordNlpUtilStringUtils_splitWithNSString_(NSString *s) {
  EduStanfordNlpUtilStringUtils_initialize();
  return EduStanfordNlpUtilStringUtils_splitWithNSString_withNSString_(s, @"\\s+");
}

id<JavaUtilList> EduStanfordNlpUtilStringUtils_splitWithNSString_withNSString_(NSString *str, NSString *regex) {
  EduStanfordNlpUtilStringUtils_initialize();
  return (JavaUtilArrays_asListWithNSObjectArray_([((NSString *) nil_chk(str)) split:regex]));
}

IOSObjectArray *EduStanfordNlpUtilStringUtils_splitOnCharWithNSString_withChar_(NSString *input, jchar delimiter) {
  EduStanfordNlpUtilStringUtils_initialize();
  IOSObjectArray *out = [IOSObjectArray newArrayWithLength:((jint) [((NSString *) nil_chk(input)) length]) + 1 type:NSString_class_()];
  jint nextIndex = 0;
  jint lastDelimiterIndex = -1;
  IOSCharArray *chars = [input toCharArray];
  for (jint i = 0; i <= ((IOSCharArray *) nil_chk(chars))->size_; ++i) {
    if (i >= chars->size_ || IOSCharArray_Get(chars, i) == delimiter) {
      IOSCharArray *tokenChars = [IOSCharArray newArrayWithLength:i - (lastDelimiterIndex + 1)];
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(chars, lastDelimiterIndex + 1, tokenChars, 0, tokenChars->size_);
      (void) IOSObjectArray_Set(out, nextIndex, [NSString stringWithCharacters:tokenChars]);
      nextIndex += 1;
      lastDelimiterIndex = i;
    }
  }
  IOSObjectArray *trimmedOut = [IOSObjectArray newArrayWithLength:nextIndex type:NSString_class_()];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(out, 0, trimmedOut, 0, trimmedOut->size_);
  return trimmedOut;
}

id<JavaUtilList> EduStanfordNlpUtilStringUtils_splitFieldsFastWithNSString_withNSString_(NSString *str, NSString *delimiter) {
  EduStanfordNlpUtilStringUtils_initialize();
  id<JavaUtilList> fields = EduStanfordNlpUtilGenerics_newArrayList();
  JavaUtilStringTokenizer *tokenizer = new_JavaUtilStringTokenizer_initWithNSString_([((NSString *) nil_chk(str)) trim]);
  id<JavaUtilList> currentField = EduStanfordNlpUtilGenerics_newArrayList();
  while ([tokenizer hasMoreTokens]) {
    NSString *token = [tokenizer nextToken];
    if ([((NSString *) nil_chk(token)) isEqual:delimiter]) {
      [((id<JavaUtilList>) nil_chk(fields)) addWithId:currentField];
      currentField = EduStanfordNlpUtilGenerics_newArrayList();
    }
    else {
      [((id<JavaUtilList>) nil_chk(currentField)) addWithId:[token trim]];
    }
  }
  if ([((id<JavaUtilList>) nil_chk(currentField)) size] > 0) {
    [((id<JavaUtilList>) nil_chk(fields)) addWithId:currentField];
  }
  return fields;
}

id<JavaUtilList> EduStanfordNlpUtilStringUtils_valueSplitWithNSString_withNSString_withNSString_(NSString *str, NSString *valueRegex, NSString *separatorRegex) {
  EduStanfordNlpUtilStringUtils_initialize();
  JavaUtilRegexPattern *vPat = JavaUtilRegexPattern_compileWithNSString_(valueRegex);
  JavaUtilRegexPattern *sPat = JavaUtilRegexPattern_compileWithNSString_(separatorRegex);
  id<JavaUtilList> ret = new_JavaUtilArrayList_init();
  while (((jint) [((NSString *) nil_chk(str)) length]) > 0) {
    JavaUtilRegexMatcher *vm = [((JavaUtilRegexPattern *) nil_chk(vPat)) matcherWithJavaLangCharSequence:str];
    if ([((JavaUtilRegexMatcher *) nil_chk(vm)) lookingAt]) {
      [ret addWithId:[vm group]];
      str = [str substring:[vm end]];
    }
    else {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$$", @"valueSplit: ", valueRegex, @" doesn't match ", str));
    }
    if (((jint) [((NSString *) nil_chk(str)) length]) > 0) {
      JavaUtilRegexMatcher *sm = [((JavaUtilRegexPattern *) nil_chk(sPat)) matcherWithJavaLangCharSequence:str];
      if ([((JavaUtilRegexMatcher *) nil_chk(sm)) lookingAt]) {
        str = [str substring:[sm end]];
      }
      else {
        @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$$", @"valueSplit: ", separatorRegex, @" doesn't match ", str));
      }
    }
  }
  return ret;
}

NSString *EduStanfordNlpUtilStringUtils_padWithNSString_withInt_(NSString *str, jint totalChars) {
  EduStanfordNlpUtilStringUtils_initialize();
  if (str == nil) {
    str = @"null";
  }
  jint slen = ((jint) [str length]);
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_initWithNSString_(str);
  for (jint i = 0; i < totalChars - slen; i++) {
    (void) [sb appendWithChar:' '];
  }
  return [sb description];
}

NSString *EduStanfordNlpUtilStringUtils_padWithId_withInt_(id obj, jint totalChars) {
  EduStanfordNlpUtilStringUtils_initialize();
  return EduStanfordNlpUtilStringUtils_padWithNSString_withInt_([nil_chk(obj) description], totalChars);
}

NSString *EduStanfordNlpUtilStringUtils_padOrTrimWithNSString_withInt_(NSString *str, jint num) {
  EduStanfordNlpUtilStringUtils_initialize();
  if (str == nil) {
    str = @"null";
  }
  jint leng = ((jint) [str length]);
  if (leng < num) {
    JavaLangStringBuilder *sb = new_JavaLangStringBuilder_initWithNSString_(str);
    for (jint i = 0; i < num - leng; i++) {
      (void) [sb appendWithChar:' '];
    }
    return [sb description];
  }
  else if (leng > num) {
    return [str substring:0 endIndex:num];
  }
  else {
    return str;
  }
}

NSString *EduStanfordNlpUtilStringUtils_padLeftOrTrimWithNSString_withInt_(NSString *str, jint num) {
  EduStanfordNlpUtilStringUtils_initialize();
  if (str == nil) {
    str = @"null";
  }
  jint leng = ((jint) [str length]);
  if (leng < num) {
    JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
    for (jint i = 0; i < num - leng; i++) {
      (void) [sb appendWithChar:' '];
    }
    (void) [sb appendWithNSString:str];
    return [sb description];
  }
  else if (leng > num) {
    return [str substring:((jint) [str length]) - num];
  }
  else {
    return str;
  }
}

NSString *EduStanfordNlpUtilStringUtils_padOrTrimWithId_withInt_(id obj, jint totalChars) {
  EduStanfordNlpUtilStringUtils_initialize();
  return EduStanfordNlpUtilStringUtils_padOrTrimWithNSString_withInt_([nil_chk(obj) description], totalChars);
}

NSString *EduStanfordNlpUtilStringUtils_padLeftWithNSString_withInt_withChar_(NSString *str, jint totalChars, jchar ch) {
  EduStanfordNlpUtilStringUtils_initialize();
  if (str == nil) {
    str = @"null";
  }
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  for (jint i = 0, num = totalChars - ((jint) [str length]); i < num; i++) {
    (void) [sb appendWithChar:ch];
  }
  (void) [sb appendWithNSString:str];
  return [sb description];
}

NSString *EduStanfordNlpUtilStringUtils_padLeftWithNSString_withInt_(NSString *str, jint totalChars) {
  EduStanfordNlpUtilStringUtils_initialize();
  return EduStanfordNlpUtilStringUtils_padLeftWithNSString_withInt_withChar_(str, totalChars, ' ');
}

NSString *EduStanfordNlpUtilStringUtils_padLeftWithId_withInt_(id obj, jint totalChars) {
  EduStanfordNlpUtilStringUtils_initialize();
  return EduStanfordNlpUtilStringUtils_padLeftWithNSString_withInt_([nil_chk(obj) description], totalChars);
}

NSString *EduStanfordNlpUtilStringUtils_padLeftWithInt_withInt_(jint i, jint totalChars) {
  EduStanfordNlpUtilStringUtils_initialize();
  return EduStanfordNlpUtilStringUtils_padLeftWithId_withInt_(JavaLangInteger_valueOfWithInt_(i), totalChars);
}

NSString *EduStanfordNlpUtilStringUtils_padLeftWithDouble_withInt_(jdouble d, jint totalChars) {
  EduStanfordNlpUtilStringUtils_initialize();
  return EduStanfordNlpUtilStringUtils_padLeftWithId_withInt_(new_JavaLangDouble_initWithDouble_(d), totalChars);
}

NSString *EduStanfordNlpUtilStringUtils_trimWithNSString_withInt_(NSString *s, jint maxWidth) {
  EduStanfordNlpUtilStringUtils_initialize();
  if (((jint) [((NSString *) nil_chk(s)) length]) <= maxWidth) {
    return (s);
  }
  return ([s substring:0 endIndex:maxWidth]);
}

NSString *EduStanfordNlpUtilStringUtils_trimWithId_withInt_(id obj, jint maxWidth) {
  EduStanfordNlpUtilStringUtils_initialize();
  return EduStanfordNlpUtilStringUtils_trimWithNSString_withInt_([nil_chk(obj) description], maxWidth);
}

NSString *EduStanfordNlpUtilStringUtils_repeatWithNSString_withInt_(NSString *s, jint times) {
  EduStanfordNlpUtilStringUtils_initialize();
  if (times == 0) {
    return @"";
  }
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_initWithInt_(times * ((jint) [((NSString *) nil_chk(s)) length]));
  for (jint i = 0; i < times; i++) {
    (void) [sb appendWithNSString:s];
  }
  return [sb description];
}

NSString *EduStanfordNlpUtilStringUtils_repeatWithChar_withInt_(jchar ch, jint times) {
  EduStanfordNlpUtilStringUtils_initialize();
  if (times == 0) {
    return @"";
  }
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_initWithInt_(times);
  for (jint i = 0; i < times; i++) {
    (void) [sb appendWithChar:ch];
  }
  return [sb description];
}

NSString *EduStanfordNlpUtilStringUtils_fileNameCleanWithNSString_(NSString *s) {
  EduStanfordNlpUtilStringUtils_initialize();
  IOSCharArray *chars = [((NSString *) nil_chk(s)) toCharArray];
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  {
    IOSCharArray *a__ = chars;
    jchar const *b__ = ((IOSCharArray *) nil_chk(a__))->buffer_;
    jchar const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jchar c = *b__++;
      if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || (c >= '0' && c <= '9') || (c == '_')) {
        (void) [sb appendWithChar:c];
      }
      else {
        if (c == ' ' || c == '-') {
          (void) [sb appendWithChar:'_'];
        }
        else {
          (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithChar:'x'])) appendWithInt:(jint) c])) appendWithChar:'x'];
        }
      }
    }
  }
  return [sb description];
}

jint EduStanfordNlpUtilStringUtils_nthIndexWithNSString_withChar_withInt_(NSString *s, jchar ch, jint n) {
  EduStanfordNlpUtilStringUtils_initialize();
  jint index = 0;
  for (jint i = 0; i < n; i++) {
    if (index == ((jint) [((NSString *) nil_chk(s)) length]) - 1) {
      return -1;
    }
    index = [s indexOf:ch fromIndex:index + 1];
    if (index == -1) {
      return (-1);
    }
  }
  return index;
}

NSString *EduStanfordNlpUtilStringUtils_truncateWithInt_withInt_withInt_(jint n, jint smallestDigit, jint biggestDigit) {
  EduStanfordNlpUtilStringUtils_initialize();
  jint numDigits = biggestDigit - smallestDigit + 1;
  IOSCharArray *result = [IOSCharArray newArrayWithLength:numDigits];
  for (jint j = 1; j < smallestDigit; j++) {
    n = n / 10;
  }
  for (jint j = numDigits - 1; j >= 0; j--) {
    *IOSCharArray_GetRef(result, j) = JavaLangCharacter_forDigitWithInt_withInt_(n % 10, 10);
    n = n / 10;
  }
  return [NSString stringWithCharacters:result];
}

id<JavaUtilMap> EduStanfordNlpUtilStringUtils_argsToMapWithNSStringArray_(IOSObjectArray *args) {
  EduStanfordNlpUtilStringUtils_initialize();
  return EduStanfordNlpUtilStringUtils_argsToMapWithNSStringArray_withJavaUtilMap_(args, JavaUtilCollections_emptyMap());
}

id<JavaUtilMap> EduStanfordNlpUtilStringUtils_argsToMapWithNSStringArray_withJavaUtilMap_(IOSObjectArray *args, id<JavaUtilMap> flagsToNumArgs) {
  EduStanfordNlpUtilStringUtils_initialize();
  id<JavaUtilMap> result = EduStanfordNlpUtilGenerics_newHashMap();
  id<JavaUtilList> remainingArgs = new_JavaUtilArrayList_init();
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(args))->size_; i++) {
    NSString *key = IOSObjectArray_Get(args, i);
    if ([((NSString *) nil_chk(key)) charAtWithInt:0] == '-') {
      JavaLangInteger *numFlagArgs = [((id<JavaUtilMap>) nil_chk(flagsToNumArgs)) getWithId:key];
      jint max = numFlagArgs == nil ? 1 : [numFlagArgs intValue];
      jint min = numFlagArgs == nil ? 0 : [numFlagArgs intValue];
      id<JavaUtilList> flagArgs = new_JavaUtilArrayList_init();
      for (jint j = 0; j < max && i + 1 < args->size_ && (j < min || ((jint) [((NSString *) nil_chk(IOSObjectArray_Get(args, i + 1))) length]) == 0 || [((NSString *) nil_chk(IOSObjectArray_Get(args, i + 1))) charAtWithInt:0] != '-'); i++, j++) {
        [flagArgs addWithId:IOSObjectArray_Get(args, i + 1)];
      }
      if ([((id<JavaUtilMap>) nil_chk(result)) containsKeyWithId:key]) {
        IOSObjectArray *newFlagArg = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk([result getWithId:key]))->size_ + [((JavaLangInteger *) nil_chk([flagsToNumArgs getWithId:key])) intValue] type:NSString_class_()];
        jint oldNumArgs = ((IOSObjectArray *) nil_chk([result getWithId:key]))->size_;
        JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([result getWithId:key], 0, newFlagArg, 0, oldNumArgs);
        for (jint j = 0; j < [flagArgs size]; j++) {
          (void) IOSObjectArray_Set(newFlagArg, j + oldNumArgs, [flagArgs getWithInt:j]);
        }
        (void) [result putWithId:key withId:newFlagArg];
      }
      else {
        (void) [result putWithId:key withId:[flagArgs toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:[flagArgs size] type:NSString_class_()]]];
      }
    }
    else {
      [remainingArgs addWithId:IOSObjectArray_Get(args, i)];
    }
  }
  (void) [((id<JavaUtilMap>) nil_chk(result)) putWithId:nil withId:[remainingArgs toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:[remainingArgs size] type:NSString_class_()]]];
  return result;
}

JavaUtilProperties *EduStanfordNlpUtilStringUtils_argsToPropertiesWithNSStringArray_(IOSObjectArray *args) {
  EduStanfordNlpUtilStringUtils_initialize();
  return EduStanfordNlpUtilStringUtils_argsToPropertiesWithNSStringArray_withJavaUtilMap_(args, JavaUtilCollections_emptyMap());
}

JavaUtilProperties *EduStanfordNlpUtilStringUtils_argsToPropertiesWithNSStringArray_withJavaUtilMap_(IOSObjectArray *args, id<JavaUtilMap> flagsToNumArgs) {
  EduStanfordNlpUtilStringUtils_initialize();
  JavaUtilProperties *result = new_JavaUtilProperties_init();
  id<JavaUtilList> remainingArgs = new_JavaUtilArrayList_init();
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(args))->size_; i++) {
    NSString *key = IOSObjectArray_Get(args, i);
    if (((jint) [((NSString *) nil_chk(key)) length]) > 0 && [key charAtWithInt:0] == '-') {
      if (((jint) [key length]) > 1 && [key charAtWithInt:1] == '-') key = [key substring:2];
      else key = [key substring:1];
      JavaLangInteger *maxFlagArgs = [((id<JavaUtilMap>) nil_chk(flagsToNumArgs)) getWithId:key];
      jint max = maxFlagArgs == nil ? 1 : [maxFlagArgs intValue];
      jint min = maxFlagArgs == nil ? 0 : [maxFlagArgs intValue];
      if (maxFlagArgs != nil && [maxFlagArgs intValue] == 0 && i < args->size_ - 1 && ([@"true" equalsIgnoreCase:IOSObjectArray_Get(args, i + 1)] || [@"false" equalsIgnoreCase:IOSObjectArray_Get(args, i + 1)])) {
        max = 1;
      }
      id<JavaUtilList> flagArgs = new_JavaUtilArrayList_init();
      for (jint j = 0; j < max && i + 1 < args->size_ && (j < min || [((NSString *) nil_chk(IOSObjectArray_Get(args, i + 1))) isEmpty] || [((NSString *) nil_chk(IOSObjectArray_Get(args, i + 1))) charAtWithInt:0] != '-'); i++, j++) {
        [flagArgs addWithId:IOSObjectArray_Get(args, i + 1)];
      }
      if ([flagArgs isEmpty]) {
        (void) [result setPropertyWithNSString:key withNSString:@"true"];
      }
      else {
        (void) [result setPropertyWithNSString:key withNSString:EduStanfordNlpUtilStringUtils_joinWithJavaLangIterable_withNSString_(flagArgs, @" ")];
        if ([((NSString *) nil_chk(key)) equalsIgnoreCase:EduStanfordNlpUtilStringUtils_PROP] || [key equalsIgnoreCase:EduStanfordNlpUtilStringUtils_PROPS] || [key equalsIgnoreCase:EduStanfordNlpUtilStringUtils_PROPERTIES] || [key equalsIgnoreCase:EduStanfordNlpUtilStringUtils_ARGUMENTS] || [key equalsIgnoreCase:EduStanfordNlpUtilStringUtils_ARGS]) {
          @try {
            JavaIoBufferedReader *reader = EduStanfordNlpIoIOUtils_readerFromStringWithNSString_([result getPropertyWithNSString:key]);
            (void) [result removeWithId:key];
            [result load__WithJavaIoReader:reader];
            for (NSString * __strong propKey in nil_chk([result stringPropertyNames])) {
              NSString *newVal = [result getPropertyWithNSString:propKey];
              (void) [result setPropertyWithNSString:propKey withNSString:[((NSString *) nil_chk(newVal)) trim]];
            }
            [((JavaIoBufferedReader *) nil_chk(reader)) close];
          }
          @catch (JavaIoIOException *e) {
            NSString *msg = JreStrcat("$$", @"argsToProperties could not read properties file: ", [result getPropertyWithNSString:key]);
            (void) [result removeWithId:key];
            @throw new_EduStanfordNlpIoRuntimeIOException_initWithNSString_withNSException_(msg, e);
          }
        }
      }
    }
    else {
      [remainingArgs addWithId:IOSObjectArray_Get(args, i)];
    }
  }
  if (![remainingArgs isEmpty]) {
    (void) [result setPropertyWithNSString:@"" withNSString:EduStanfordNlpUtilStringUtils_joinWithJavaLangIterable_withNSString_(remainingArgs, @" ")];
  }
  if ([result containsKeyWithId:EduStanfordNlpUtilStringUtils_PROP]) {
    NSString *file = [result getPropertyWithNSString:EduStanfordNlpUtilStringUtils_PROP];
    (void) [result removeWithId:EduStanfordNlpUtilStringUtils_PROP];
    JavaUtilProperties *toAdd = EduStanfordNlpUtilStringUtils_argsToPropertiesWithNSStringArray_([IOSObjectArray newArrayWithObjects:(id[]){ @"-prop", file } count:2 type:NSString_class_()]);
    for (NSString * __strong key in nil_chk([((JavaUtilProperties *) nil_chk(toAdd)) stringPropertyNames])) {
      NSString *val = [toAdd getPropertyWithNSString:key];
      if (![result containsKeyWithId:key]) {
        (void) [result setPropertyWithNSString:key withNSString:val];
      }
    }
  }
  return result;
}

JavaUtilProperties *EduStanfordNlpUtilStringUtils_propFileToPropertiesWithNSString_(NSString *filename) {
  EduStanfordNlpUtilStringUtils_initialize();
  JavaUtilProperties *result = new_JavaUtilProperties_init();
  @try {
    JavaIoInputStream *is = new_JavaIoBufferedInputStream_initWithJavaIoInputStream_(new_JavaIoFileInputStream_initWithNSString_(filename));
    [result load__WithJavaIoInputStream:is];
    for (NSString * __strong propKey in nil_chk([result stringPropertyNames])) {
      NSString *newVal = [result getPropertyWithNSString:propKey];
      (void) [result setPropertyWithNSString:propKey withNSString:[((NSString *) nil_chk(newVal)) trim]];
    }
    [is close];
    return result;
  }
  @catch (JavaIoIOException *e) {
    @throw new_EduStanfordNlpIoRuntimeIOException_initWithNSString_withNSException_(JreStrcat("$$", @"propFileToProperties could not read properties file: ", filename), e);
  }
}

JavaUtilProperties *EduStanfordNlpUtilStringUtils_stringToPropertiesWithNSString_(NSString *str) {
  EduStanfordNlpUtilStringUtils_initialize();
  JavaUtilProperties *result = new_JavaUtilProperties_init();
  return EduStanfordNlpUtilStringUtils_stringToPropertiesWithNSString_withJavaUtilProperties_(str, result);
}

JavaUtilProperties *EduStanfordNlpUtilStringUtils_stringToPropertiesWithNSString_withJavaUtilProperties_(NSString *str, JavaUtilProperties *props) {
  EduStanfordNlpUtilStringUtils_initialize();
  IOSObjectArray *propsStr = [((NSString *) nil_chk([((NSString *) nil_chk(str)) trim])) split:@",\\s*"];
  {
    IOSObjectArray *a__ = propsStr;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *term = *b__++;
      jint divLoc = [((NSString *) nil_chk(term)) indexOf:'='];
      NSString *key;
      NSString *value;
      if (divLoc >= 0) {
        key = [((NSString *) nil_chk([term substring:0 endIndex:divLoc])) trim];
        value = [((NSString *) nil_chk([term substring:divLoc + 1])) trim];
      }
      else {
        key = [term trim];
        value = @"true";
      }
      (void) [((JavaUtilProperties *) nil_chk(props)) setPropertyWithNSString:key withNSString:value];
    }
  }
  return props;
}

NSString *EduStanfordNlpUtilStringUtils_checkRequiredPropertiesWithJavaUtilProperties_withNSStringArray_(JavaUtilProperties *props, IOSObjectArray *requiredProps) {
  EduStanfordNlpUtilStringUtils_initialize();
  {
    IOSObjectArray *a__ = requiredProps;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *required = *b__++;
      if ([((JavaUtilProperties *) nil_chk(props)) getPropertyWithNSString:required] == nil) {
        return required;
      }
    }
  }
  return nil;
}

void EduStanfordNlpUtilStringUtils_printToFileWithJavaIoFile_withNSString_withBoolean_withBoolean_withNSString_(JavaIoFile *file, NSString *message, jboolean append, jboolean printLn, NSString *encoding) {
  EduStanfordNlpUtilStringUtils_initialize();
  JavaIoPrintWriter *pw = nil;
  @try {
    JavaIoWriter *fw;
    if (encoding != nil) {
      fw = new_JavaIoOutputStreamWriter_initWithJavaIoOutputStream_withNSString_(new_JavaIoFileOutputStream_initWithJavaIoFile_withBoolean_(file, append), encoding);
    }
    else {
      fw = new_JavaIoFileWriter_initWithJavaIoFile_withBoolean_(file, append);
    }
    pw = new_JavaIoPrintWriter_initWithJavaIoWriter_(fw);
    if (printLn) {
      [pw printlnWithNSString:message];
    }
    else {
      [pw printWithNSString:message];
    }
  }
  @catch (JavaLangException *e) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$", @"Exception: in printToFile ", [((JavaIoFile *) nil_chk(file)) getAbsolutePath])];
    [((JavaLangException *) nil_chk(e)) printStackTrace];
  }
  @finally {
    if (pw != nil) {
      [pw flush];
      [pw close];
    }
  }
}

void EduStanfordNlpUtilStringUtils_printToFileLnWithJavaIoFile_withNSString_withBoolean_(JavaIoFile *file, NSString *message, jboolean append) {
  EduStanfordNlpUtilStringUtils_initialize();
  JavaIoPrintWriter *pw = nil;
  @try {
    JavaIoWriter *fw = new_JavaIoFileWriter_initWithJavaIoFile_withBoolean_(file, append);
    pw = new_JavaIoPrintWriter_initWithJavaIoWriter_(fw);
    [pw printlnWithNSString:message];
  }
  @catch (JavaLangException *e) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$C$", @"Exception: in printToFileLn ", [((JavaIoFile *) nil_chk(file)) getAbsolutePath], ' ', message)];
    [((JavaLangException *) nil_chk(e)) printStackTrace];
  }
  @finally {
    if (pw != nil) {
      [pw flush];
      [pw close];
    }
  }
}

void EduStanfordNlpUtilStringUtils_printToFileWithJavaIoFile_withNSString_withBoolean_(JavaIoFile *file, NSString *message, jboolean append) {
  EduStanfordNlpUtilStringUtils_initialize();
  JavaIoPrintWriter *pw = nil;
  @try {
    JavaIoWriter *fw = new_JavaIoFileWriter_initWithJavaIoFile_withBoolean_(file, append);
    pw = new_JavaIoPrintWriter_initWithJavaIoWriter_(fw);
    [pw printWithNSString:message];
  }
  @catch (JavaLangException *e) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$", @"Exception: in printToFile ", [((JavaIoFile *) nil_chk(file)) getAbsolutePath])];
    [((JavaLangException *) nil_chk(e)) printStackTrace];
  }
  @finally {
    if (pw != nil) {
      [pw flush];
      [pw close];
    }
  }
}

void EduStanfordNlpUtilStringUtils_printToFileWithJavaIoFile_withNSString_(JavaIoFile *file, NSString *message) {
  EduStanfordNlpUtilStringUtils_initialize();
  EduStanfordNlpUtilStringUtils_printToFileWithJavaIoFile_withNSString_withBoolean_(file, message, false);
}

void EduStanfordNlpUtilStringUtils_printToFileWithNSString_withNSString_withBoolean_(NSString *filename, NSString *message, jboolean append) {
  EduStanfordNlpUtilStringUtils_initialize();
  EduStanfordNlpUtilStringUtils_printToFileWithJavaIoFile_withNSString_withBoolean_(new_JavaIoFile_initWithNSString_(filename), message, append);
}

void EduStanfordNlpUtilStringUtils_printToFileLnWithNSString_withNSString_withBoolean_(NSString *filename, NSString *message, jboolean append) {
  EduStanfordNlpUtilStringUtils_initialize();
  EduStanfordNlpUtilStringUtils_printToFileLnWithJavaIoFile_withNSString_withBoolean_(new_JavaIoFile_initWithNSString_(filename), message, append);
}

void EduStanfordNlpUtilStringUtils_printToFileWithNSString_withNSString_(NSString *filename, NSString *message) {
  EduStanfordNlpUtilStringUtils_initialize();
  EduStanfordNlpUtilStringUtils_printToFileWithJavaIoFile_withNSString_withBoolean_(new_JavaIoFile_initWithNSString_(filename), message, false);
}

id<JavaUtilMap> EduStanfordNlpUtilStringUtils_parseCommandLineArgumentsWithNSStringArray_(IOSObjectArray *args) {
  EduStanfordNlpUtilStringUtils_initialize();
  return EduStanfordNlpUtilStringUtils_parseCommandLineArgumentsWithNSStringArray_withBoolean_(args, false);
}

id<JavaUtilMap> EduStanfordNlpUtilStringUtils_parseCommandLineArgumentsWithNSStringArray_withBoolean_(IOSObjectArray *args, jboolean parseNumbers) {
  EduStanfordNlpUtilStringUtils_initialize();
  id<JavaUtilMap> result = EduStanfordNlpUtilGenerics_newHashMap();
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(args))->size_; i++) {
    NSString *key = IOSObjectArray_Get(args, i);
    if ([((NSString *) nil_chk(key)) charAtWithInt:0] == '-') {
      if (i + 1 < args->size_) {
        NSString *value = IOSObjectArray_Get(args, i + 1);
        if ([((NSString *) nil_chk(value)) charAtWithInt:0] != '-') {
          if (parseNumbers) {
            id numericValue = value;
            @try {
              numericValue = JavaLangDouble_valueOfWithDouble_(JavaLangDouble_parseDoubleWithNSString_(value));
            }
            @catch (JavaLangNumberFormatException *e2) {
            }
            (void) [((id<JavaUtilMap>) nil_chk(result)) putWithId:key withId:numericValue];
          }
          else {
            (void) [((id<JavaUtilMap>) nil_chk(result)) putWithId:key withId:value];
          }
          i++;
        }
        else {
          (void) [((id<JavaUtilMap>) nil_chk(result)) putWithId:key withId:nil];
        }
      }
      else {
        (void) [((id<JavaUtilMap>) nil_chk(result)) putWithId:key withId:nil];
      }
    }
  }
  return result;
}

NSString *EduStanfordNlpUtilStringUtils_stripNonAlphaNumericsWithNSString_(NSString *orig) {
  EduStanfordNlpUtilStringUtils_initialize();
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  for (jint i = 0; i < ((jint) [((NSString *) nil_chk(orig)) length]); i++) {
    jchar c = [orig charAtWithInt:i];
    if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9')) {
      (void) [sb appendWithChar:c];
    }
  }
  return [sb description];
}

NSString *EduStanfordNlpUtilStringUtils_stripSGMLWithNSString_(NSString *orig) {
  EduStanfordNlpUtilStringUtils_initialize();
  JavaUtilRegexPattern *sgmlPattern = JavaUtilRegexPattern_compileWithNSString_withInt_(@"<.*?>", JavaUtilRegexPattern_DOTALL);
  JavaUtilRegexMatcher *sgmlMatcher = [((JavaUtilRegexPattern *) nil_chk(sgmlPattern)) matcherWithJavaLangCharSequence:orig];
  return [((JavaUtilRegexMatcher *) nil_chk(sgmlMatcher)) replaceAllWithNSString:@""];
}

void EduStanfordNlpUtilStringUtils_printStringOneCharPerLineWithNSString_(NSString *s) {
  EduStanfordNlpUtilStringUtils_initialize();
  for (jint i = 0; i < ((jint) [((NSString *) nil_chk(s)) length]); i++) {
    jint c = [s charAtWithInt:i];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("I$C$", c, @" '", (jchar) c, @"' ")];
  }
}

NSString *EduStanfordNlpUtilStringUtils_escapeStringWithNSString_withCharArray_withChar_(NSString *s, IOSCharArray *charsToEscape, jchar escapeChar) {
  EduStanfordNlpUtilStringUtils_initialize();
  JavaLangStringBuilder *result = new_JavaLangStringBuilder_init();
  for (jint i = 0; i < ((jint) [((NSString *) nil_chk(s)) length]); i++) {
    jchar c = [s charAtWithInt:i];
    if (c == escapeChar) {
      (void) [result appendWithChar:escapeChar];
    }
    else {
      {
        IOSCharArray *a__ = charsToEscape;
        jchar const *b__ = ((IOSCharArray *) nil_chk(a__))->buffer_;
        jchar const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          jchar charToEscape = *b__++;
          if (c == charToEscape) {
            (void) [result appendWithChar:escapeChar];
            break;
          }
        }
      }
    }
    (void) [result appendWithChar:c];
  }
  return [result description];
}

IOSObjectArray *EduStanfordNlpUtilStringUtils_splitOnCharWithQuotingWithNSString_withChar_withChar_withChar_(NSString *s, jchar splitChar, jchar quoteChar, jchar escapeChar) {
  EduStanfordNlpUtilStringUtils_initialize();
  id<JavaUtilList> result = new_JavaUtilArrayList_init();
  jint i = 0;
  jint length = ((jint) [((NSString *) nil_chk(s)) length]);
  JavaLangStringBuilder *b = new_JavaLangStringBuilder_init();
  while (i < length) {
    jchar curr = [s charAtWithInt:i];
    if (curr == splitChar) {
      [result addWithId:[b description]];
      b = new_JavaLangStringBuilder_init();
      i++;
    }
    else if (curr == quoteChar) {
      i++;
      while (i < length) {
        curr = [s charAtWithInt:i];
        if ((curr == escapeChar) && (i + 1 < length) && ([s charAtWithInt:i + 1] == quoteChar)) {
          (void) [b appendWithChar:[s charAtWithInt:i + 1]];
          i += 2;
        }
        else if (curr == quoteChar) {
          i++;
          break;
        }
        else {
          (void) [b appendWithChar:[s charAtWithInt:i]];
          i++;
        }
      }
    }
    else {
      (void) [b appendWithChar:curr];
      i++;
    }
  }
  if ([b length] > 0) {
    [result addWithId:[b description]];
  }
  return [result toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:[result size] type:NSString_class_()]];
}

jint EduStanfordNlpUtilStringUtils_longestCommonSubstringWithNSString_withNSString_(NSString *s, NSString *t) {
  EduStanfordNlpUtilStringUtils_initialize();
  IOSObjectArray *d;
  jint n;
  jint m;
  jint i;
  jint j;
  n = ((jint) [((NSString *) nil_chk(s)) length]);
  m = ((jint) [((NSString *) nil_chk(t)) length]);
  if (n == 0) {
    return 0;
  }
  if (m == 0) {
    return 0;
  }
  d = [IOSIntArray newArrayWithDimensions:2 lengths:(jint[]){ n + 1, m + 1 }];
  for (i = 0; i <= n; i++) {
    *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(d, i)), 0) = 0;
  }
  for (j = 0; j <= m; j++) {
    *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(d, 0)), j) = 0;
  }
  for (i = 1; i <= n; i++) {
    jchar s_i = [s charAtWithInt:i - 1];
    for (j = 1; j <= m; j++) {
      jchar t_j = [t charAtWithInt:j - 1];
      if (s_i == t_j) {
        *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(d, i)), j) = EduStanfordNlpMathSloppyMath_maxWithInt_withInt_withInt_(IOSIntArray_Get(nil_chk(IOSObjectArray_Get(d, i - 1)), j), IOSIntArray_Get(nil_chk(IOSObjectArray_Get(d, i)), j - 1), IOSIntArray_Get(nil_chk(IOSObjectArray_Get(d, i - 1)), j - 1) + 1);
      }
      else {
        *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(d, i)), j) = JavaLangMath_maxWithInt_withInt_(IOSIntArray_Get(nil_chk(IOSObjectArray_Get(d, i - 1)), j), IOSIntArray_Get(nil_chk(IOSObjectArray_Get(d, i)), j - 1));
      }
    }
  }
  return IOSIntArray_Get(nil_chk(IOSObjectArray_Get(d, n)), m);
}

jint EduStanfordNlpUtilStringUtils_longestCommonContiguousSubstringWithNSString_withNSString_(NSString *s, NSString *t) {
  EduStanfordNlpUtilStringUtils_initialize();
  if ([((NSString *) nil_chk(s)) isEmpty] || [((NSString *) nil_chk(t)) isEmpty]) {
    return 0;
  }
  jint M = ((jint) [s length]);
  jint N = ((jint) [((NSString *) nil_chk(t)) length]);
  IOSObjectArray *d = [IOSIntArray newArrayWithDimensions:2 lengths:(jint[]){ M + 1, N + 1 }];
  for (jint j = 0; j <= N; j++) {
    *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(d, 0)), j) = 0;
  }
  for (jint i = 0; i <= M; i++) {
    *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(d, i)), 0) = 0;
  }
  jint max = 0;
  for (jint i = 1; i <= M; i++) {
    for (jint j = 1; j <= N; j++) {
      if ([s charAtWithInt:i - 1] == [t charAtWithInt:j - 1]) {
        *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(d, i)), j) = IOSIntArray_Get(nil_chk(IOSObjectArray_Get(d, i - 1)), j - 1) + 1;
      }
      else {
        *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(d, i)), j) = 0;
      }
      if (IOSIntArray_Get(nil_chk(IOSObjectArray_Get(d, i)), j) > max) {
        max = IOSIntArray_Get(nil_chk(IOSObjectArray_Get(d, i)), j);
      }
    }
  }
  return max;
}

jint EduStanfordNlpUtilStringUtils_editDistanceWithNSString_withNSString_(NSString *s, NSString *t) {
  EduStanfordNlpUtilStringUtils_initialize();
  jint n = ((jint) [((NSString *) nil_chk(s)) length]);
  jint m = ((jint) [((NSString *) nil_chk(t)) length]);
  if (n == 0) {
    return m;
  }
  if (m == 0) {
    return n;
  }
  IOSObjectArray *d = [IOSIntArray newArrayWithDimensions:2 lengths:(jint[]){ n + 1, m + 1 }];
  for (jint i = 0; i <= n; i++) {
    *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(d, i)), 0) = i;
  }
  for (jint j = 0; j <= m; j++) {
    *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(d, 0)), j) = j;
  }
  for (jint i = 1; i <= n; i++) {
    jchar s_i = [s charAtWithInt:i - 1];
    for (jint j = 1; j <= m; j++) {
      jchar t_j = [t charAtWithInt:j - 1];
      jint cost;
      if (s_i == t_j) {
        cost = 0;
      }
      else {
        cost = 1;
      }
      *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(d, i)), j) = EduStanfordNlpMathSloppyMath_minWithInt_withInt_withInt_(IOSIntArray_Get(nil_chk(IOSObjectArray_Get(d, i - 1)), j) + 1, IOSIntArray_Get(nil_chk(IOSObjectArray_Get(d, i)), j - 1) + 1, IOSIntArray_Get(nil_chk(IOSObjectArray_Get(d, i - 1)), j - 1) + cost);
    }
  }
  return IOSIntArray_Get(nil_chk(IOSObjectArray_Get(d, n)), m);
}

NSString *EduStanfordNlpUtilStringUtils_pennPOSToWordnetPOSWithNSString_(NSString *s) {
  EduStanfordNlpUtilStringUtils_initialize();
  if ([((NSString *) nil_chk(s)) matches:@"NN|NNP|NNS|NNPS"]) {
    return @"noun";
  }
  if ([s matches:@"VB|VBD|VBG|VBN|VBZ|VBP|MD"]) {
    return @"verb";
  }
  if ([s matches:@"JJ|JJR|JJS|CD"]) {
    return @"adjective";
  }
  if ([s matches:@"RB|RBR|RBS|RP|WRB"]) {
    return @"adverb";
  }
  return nil;
}

NSString *EduStanfordNlpUtilStringUtils_getShortClassNameWithId_(id o) {
  EduStanfordNlpUtilStringUtils_initialize();
  if (o == nil) {
    return @"null";
  }
  NSString *name = [[o getClass] getName];
  jint index = [((NSString *) nil_chk(name)) lastIndexOf:'.'];
  if (index >= 0) {
    name = [name substring:index + 1];
  }
  return name;
}

id EduStanfordNlpUtilStringUtils_columnStringToObjectWithIOSClass_withNSString_withNSString_withNSStringArray_(IOSClass *objClass, NSString *str, NSString *delimiterRegex, IOSObjectArray *fieldNames) {
  EduStanfordNlpUtilStringUtils_initialize();
  JavaUtilRegexPattern *delimiterPattern = JavaUtilRegexPattern_compileWithNSString_(delimiterRegex);
  return EduStanfordNlpUtilStringUtils_columnStringToObjectWithIOSClass_withNSString_withJavaUtilRegexPattern_withNSStringArray_(objClass, str, delimiterPattern, fieldNames);
}

id EduStanfordNlpUtilStringUtils_columnStringToObjectWithIOSClass_withNSString_withJavaUtilRegexPattern_withNSStringArray_(IOSClass *objClass, NSString *str, JavaUtilRegexPattern *delimiterPattern, IOSObjectArray *fieldNames) {
  EduStanfordNlpUtilStringUtils_initialize();
  IOSObjectArray *fields = [((JavaUtilRegexPattern *) nil_chk(delimiterPattern)) splitWithJavaLangCharSequence:str];
  id item = EduStanfordNlpUtilErasureUtils_uncheckedCastWithId_([((IOSClass *) nil_chk(objClass)) newInstance]);
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(fields))->size_; i++) {
    @try {
      JavaLangReflectField *field = [objClass getDeclaredField:IOSObjectArray_Get(nil_chk(fieldNames), i)];
      [((JavaLangReflectField *) nil_chk(field)) setWithId:item withId:IOSObjectArray_Get(fields, i)];
    }
    @catch (JavaLangIllegalAccessException *ex) {
      JavaLangReflectMethod *method = [objClass getDeclaredMethod:JreStrcat("$$", @"set", EduStanfordNlpUtilStringUtils_capitalizeWithNSString_(IOSObjectArray_Get(fieldNames, i))) parameterTypes:[IOSObjectArray newArrayWithObjects:(id[]){ NSString_class_() } count:1 type:IOSClass_class_()]];
      (void) [((JavaLangReflectMethod *) nil_chk(method)) invokeWithId:item withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ IOSObjectArray_Get(fields, i) } count:1 type:NSObject_class_()]];
    }
  }
  return item;
}

NSString *EduStanfordNlpUtilStringUtils_objectToColumnStringWithId_withNSString_withNSStringArray_(id object, NSString *delimiter, IOSObjectArray *fieldNames) {
  EduStanfordNlpUtilStringUtils_initialize();
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  {
    IOSObjectArray *a__ = fieldNames;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *fieldName = *b__++;
      if ([sb length] > 0) {
        (void) [sb appendWithNSString:delimiter];
      }
      @try {
        JavaLangReflectField *field = [[nil_chk(object) getClass] getDeclaredField:fieldName];
        (void) [sb appendWithId:[((JavaLangReflectField *) nil_chk(field)) getWithId:object]];
      }
      @catch (JavaLangIllegalAccessException *ex) {
        JavaLangReflectMethod *method = [[object getClass] getDeclaredMethod:JreStrcat("$$", @"get", EduStanfordNlpUtilStringUtils_capitalizeWithNSString_(fieldName)) parameterTypes:[IOSObjectArray newArrayWithLength:0 type:IOSClass_class_()]];
        (void) [sb appendWithId:[((JavaLangReflectMethod *) nil_chk(method)) invokeWithId:object withNSObjectArray:[IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]]];
      }
    }
  }
  return [sb description];
}

NSString *EduStanfordNlpUtilStringUtils_capitalizeWithNSString_(NSString *s) {
  EduStanfordNlpUtilStringUtils_initialize();
  if (JavaLangCharacter_isLowerCaseWithChar_([((NSString *) nil_chk(s)) charAtWithInt:0])) {
    return JreStrcat("C$", JavaLangCharacter_toUpperCaseWithChar_([s charAtWithInt:0]), [s substring:1]);
  }
  else {
    return s;
  }
}

jboolean EduStanfordNlpUtilStringUtils_isCapitalizedWithNSString_(NSString *s) {
  EduStanfordNlpUtilStringUtils_initialize();
  return (JavaLangCharacter_isUpperCaseWithChar_([((NSString *) nil_chk(s)) charAtWithInt:0]));
}

NSString *EduStanfordNlpUtilStringUtils_searchAndReplaceWithNSString_withNSString_withNSString_(NSString *text, NSString *from, NSString *to) {
  EduStanfordNlpUtilStringUtils_initialize();
  from = EduStanfordNlpUtilStringUtils_escapeStringWithNSString_withCharArray_withChar_(from, [IOSCharArray newArrayWithChars:(jchar[]){ '.', '[', ']', '\\' } count:4], '\\');
  JavaUtilRegexPattern *p = JavaUtilRegexPattern_compileWithNSString_(from);
  JavaUtilRegexMatcher *m = [((JavaUtilRegexPattern *) nil_chk(p)) matcherWithJavaLangCharSequence:text];
  return [((JavaUtilRegexMatcher *) nil_chk(m)) replaceAllWithNSString:to];
}

NSString *EduStanfordNlpUtilStringUtils_makeHTMLTableWithNSStringArray2_withNSStringArray_withNSStringArray_(IOSObjectArray *table, IOSObjectArray *rowLabels, IOSObjectArray *colLabels) {
  EduStanfordNlpUtilStringUtils_initialize();
  JavaLangStringBuilder *buff = new_JavaLangStringBuilder_init();
  (void) [buff appendWithNSString:@"<table class=\"auto\" border=\"1\" cellspacing=\"0\">\n"];
  (void) [buff appendWithNSString:@"<tr>\n"];
  (void) [buff appendWithNSString:@"<td></td>\n"];
  for (jint j = 0; j < ((IOSObjectArray *) nil_chk(IOSObjectArray_Get(nil_chk(table), 0)))->size_; j++) {
    (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buff appendWithNSString:@"<td class=\"label\">"])) appendWithNSString:IOSObjectArray_Get(nil_chk(colLabels), j)])) appendWithNSString:@"</td>\n"];
  }
  (void) [buff appendWithNSString:@"</tr>\n"];
  for (jint i = 0; i < table->size_; i++) {
    (void) [buff appendWithNSString:@"<tr>\n"];
    (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buff appendWithNSString:@"<td class=\"label\">"])) appendWithNSString:IOSObjectArray_Get(nil_chk(rowLabels), i)])) appendWithNSString:@"</td>\n"];
    for (jint j = 0; j < ((IOSObjectArray *) nil_chk(IOSObjectArray_Get(table, i)))->size_; j++) {
      (void) [buff appendWithNSString:@"<td class=\"data\">"];
      (void) [buff appendWithNSString:((IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(table, i)), j) != nil) ? IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(table, i)), j) : @"")];
      (void) [buff appendWithNSString:@"</td>\n"];
    }
    (void) [buff appendWithNSString:@"</tr>\n"];
  }
  (void) [buff appendWithNSString:@"</table>"];
  return [buff description];
}

NSString *EduStanfordNlpUtilStringUtils_makeTextTableWithNSObjectArray2_withNSObjectArray_withNSObjectArray_withInt_withInt_withBoolean_(IOSObjectArray *table, IOSObjectArray *rowLabels, IOSObjectArray *colLabels, jint padLeft, jint padRight, jboolean tsv) {
  EduStanfordNlpUtilStringUtils_initialize();
  JavaLangStringBuilder *buff = new_JavaLangStringBuilder_init();
  if (colLabels != nil) {
    (void) [buff appendWithNSString:EduStanfordNlpUtilStringUtils_makeAsciiTableCellWithId_withInt_withInt_withBoolean_(@"", padLeft, padRight, tsv)];
    for (jint j = 0; j < ((IOSObjectArray *) nil_chk(IOSObjectArray_Get(nil_chk(table), 0)))->size_; j++) {
      (void) [buff appendWithNSString:EduStanfordNlpUtilStringUtils_makeAsciiTableCellWithId_withInt_withInt_withBoolean_(IOSObjectArray_Get(colLabels, j), padLeft, padRight, (j != ((IOSObjectArray *) nil_chk(IOSObjectArray_Get(table, 0)))->size_ - 1) && tsv)];
    }
    (void) [buff appendWithChar:0x000a];
  }
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(table))->size_; i++) {
    if (rowLabels != nil) {
      (void) [buff appendWithNSString:EduStanfordNlpUtilStringUtils_makeAsciiTableCellWithId_withInt_withInt_withBoolean_(IOSObjectArray_Get(rowLabels, i), padLeft, padRight, tsv)];
    }
    for (jint j = 0; j < ((IOSObjectArray *) nil_chk(IOSObjectArray_Get(table, i)))->size_; j++) {
      (void) [buff appendWithNSString:EduStanfordNlpUtilStringUtils_makeAsciiTableCellWithId_withInt_withInt_withBoolean_(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(table, i)), j), padLeft, padRight, (j != ((IOSObjectArray *) nil_chk(IOSObjectArray_Get(table, 0)))->size_ - 1) && tsv)];
    }
    (void) [buff appendWithChar:0x000a];
  }
  return [buff description];
}

NSString *EduStanfordNlpUtilStringUtils_makeAsciiTableCellWithId_withInt_withInt_withBoolean_(id obj, jint padLeft, jint padRight, jboolean tsv) {
  EduStanfordNlpUtilStringUtils_initialize();
  NSString *result = [nil_chk(obj) description];
  if (padLeft > 0) {
    result = EduStanfordNlpUtilStringUtils_padLeftWithNSString_withInt_(result, padLeft);
  }
  if (padRight > 0) {
    result = EduStanfordNlpUtilStringUtils_padWithNSString_withInt_(result, padRight);
  }
  if (tsv) {
    result = JreStrcat("$C", result, 0x0009);
  }
  return result;
}

void EduStanfordNlpUtilStringUtils_mainWithNSStringArray_(IOSObjectArray *args) {
  EduStanfordNlpUtilStringUtils_initialize();
  IOSObjectArray *s = [IOSObjectArray newArrayWithObjects:(id[]){ @"there once was a man", @"this one is a manic", @"hey there", @"there once was a mane", @"once in a manger.", @"where is one match?", @"Jo3seph Smarr!", @"Joseph R Smarr" } count:8 type:NSString_class_()];
  for (jint i = 0; i < 8; i++) {
    for (jint j = 0; j < 8; j++) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"s1: ", IOSObjectArray_Get(s, i))];
      [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$$", @"s2: ", IOSObjectArray_Get(s, j))];
      [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$I", @"edit distance: ", EduStanfordNlpUtilStringUtils_editDistanceWithNSString_withNSString_(IOSObjectArray_Get(s, i), IOSObjectArray_Get(s, j)))];
      [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$I", @"LCS:           ", EduStanfordNlpUtilStringUtils_longestCommonSubstringWithNSString_withNSString_(IOSObjectArray_Get(s, i), IOSObjectArray_Get(s, j)))];
      [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$I", @"LCCS:          ", EduStanfordNlpUtilStringUtils_longestCommonContiguousSubstringWithNSString_withNSString_(IOSObjectArray_Get(s, i), IOSObjectArray_Get(s, j)))];
      [JreLoadStatic(JavaLangSystem, out) println];
    }
  }
}

NSString *EduStanfordNlpUtilStringUtils_toAsciiWithNSString_(NSString *s) {
  EduStanfordNlpUtilStringUtils_initialize();
  JavaLangStringBuilder *b = new_JavaLangStringBuilder_init();
  for (jint i = 0; i < ((jint) [((NSString *) nil_chk(s)) length]); i++) {
    jchar c = [s charAtWithInt:i];
    if (c > 127) {
      NSString *result = @"?";
      if (c >= (jint) 0x00c0 && c <= (jint) 0x00c5) {
        result = @"A";
      }
      else if (c == (jint) 0x00c6) {
        result = @"AE";
      }
      else if (c == (jint) 0x00c7) {
        result = @"C";
      }
      else if (c >= (jint) 0x00c8 && c <= (jint) 0x00cb) {
        result = @"E";
      }
      else if (c >= (jint) 0x00cc && c <= (jint) 0x00cf) {
        result = @"F";
      }
      else if (c == (jint) 0x00d0) {
        result = @"D";
      }
      else if (c == (jint) 0x00d1) {
        result = @"N";
      }
      else if (c >= (jint) 0x00d2 && c <= (jint) 0x00d6) {
        result = @"O";
      }
      else if (c == (jint) 0x00d7) {
        result = @"x";
      }
      else if (c == (jint) 0x00d8) {
        result = @"O";
      }
      else if (c >= (jint) 0x00d9 && c <= (jint) 0x00dc) {
        result = @"U";
      }
      else if (c == (jint) 0x00dd) {
        result = @"Y";
      }
      else if (c >= (jint) 0x00e0 && c <= (jint) 0x00e5) {
        result = @"a";
      }
      else if (c == (jint) 0x00e6) {
        result = @"ae";
      }
      else if (c == (jint) 0x00e7) {
        result = @"c";
      }
      else if (c >= (jint) 0x00e8 && c <= (jint) 0x00eb) {
        result = @"e";
      }
      else if (c >= (jint) 0x00ec && c <= (jint) 0x00ef) {
        result = @"i";
      }
      else if (c == (jint) 0x00f1) {
        result = @"n";
      }
      else if (c >= (jint) 0x00f2 && c <= (jint) 0x00f8) {
        result = @"o";
      }
      else if (c >= (jint) 0x00f9 && c <= (jint) 0x00fc) {
        result = @"u";
      }
      else if (c >= (jint) 0x00fd && c <= (jint) 0x00ff) {
        result = @"y";
      }
      else if (c >= (jint) 0x2018 && c <= (jint) 0x2019) {
        result = @"'";
      }
      else if (c >= (jint) 0x201c && c <= (jint) 0x201e) {
        result = @"\"";
      }
      else if (c >= (jint) 0x0213 && c <= (jint) 0x2014) {
        result = @"-";
      }
      else if (c >= (jint) 0x00A2 && c <= (jint) 0x00A5) {
        result = @"$";
      }
      else if (c == (jint) 0x2026) {
        result = @".";
      }
      (void) [b appendWithNSString:result];
    }
    else {
      (void) [b appendWithChar:c];
    }
  }
  return [b description];
}

NSString *EduStanfordNlpUtilStringUtils_toCSVStringWithNSStringArray_(IOSObjectArray *fields) {
  EduStanfordNlpUtilStringUtils_initialize();
  JavaLangStringBuilder *b = new_JavaLangStringBuilder_init();
  {
    IOSObjectArray *a__ = fields;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *fld = *b__++;
      if ([b length] > 0) {
        (void) [b appendWithChar:','];
      }
      NSString *field = EduStanfordNlpUtilStringUtils_escapeStringWithNSString_withCharArray_withChar_(fld, [IOSCharArray newArrayWithChars:(jchar[]){ '"' } count:1], '"');
      (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([b appendWithChar:'"'])) appendWithNSString:field])) appendWithChar:'"'];
    }
  }
  return [b description];
}

NSString *EduStanfordNlpUtilStringUtils_trWithNSString_withNSString_withNSString_(NSString *input, NSString *from, NSString *to) {
  EduStanfordNlpUtilStringUtils_initialize();
  JreAssert((((jint) [((NSString *) nil_chk(from)) length]) == ((jint) [((NSString *) nil_chk(to)) length])), (@"edu/stanford/nlp/util/StringUtils.java:1825 condition failed: assert from.length() == to.length();"));
  JavaLangStringBuilder *sb = nil;
  jint len = ((jint) [((NSString *) nil_chk(input)) length]);
  for (jint i = 0; i < len; i++) {
    jint ind = [from indexOf:[input charAtWithInt:i]];
    if (ind >= 0) {
      if (sb == nil) {
        sb = new_JavaLangStringBuilder_initWithNSString_(input);
      }
      [sb setCharAtWithInt:i withChar:[to charAtWithInt:ind]];
    }
  }
  if (sb == nil) {
    return input;
  }
  else {
    return [sb description];
  }
}

NSString *EduStanfordNlpUtilStringUtils_chompWithNSString_(NSString *s) {
  EduStanfordNlpUtilStringUtils_initialize();
  if (((jint) [((NSString *) nil_chk(s)) length]) == 0) return s;
  jint l_1 = ((jint) [s length]) - 1;
  if ([s charAtWithInt:l_1] == 0x000a) {
    return [s substring:0 endIndex:l_1];
  }
  return s;
}

NSString *EduStanfordNlpUtilStringUtils_chompWithId_(id o) {
  EduStanfordNlpUtilStringUtils_initialize();
  return EduStanfordNlpUtilStringUtils_chompWithNSString_([nil_chk(o) description]);
}

void EduStanfordNlpUtilStringUtils_printErrInvocationStringWithNSString_withNSStringArray_(NSString *cls, IOSObjectArray *args) {
  EduStanfordNlpUtilStringUtils_initialize();
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:EduStanfordNlpUtilStringUtils_toInvocationStringWithNSString_withNSStringArray_(cls, args)];
}

NSString *EduStanfordNlpUtilStringUtils_toInvocationStringWithNSString_withNSStringArray_(NSString *cls, IOSObjectArray *args) {
  EduStanfordNlpUtilStringUtils_initialize();
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:cls])) appendWithNSString:@" invoked on "])) appendWithId:new_JavaUtilDate_init()];
  (void) [sb appendWithNSString:@" with arguments:\n  "];
  {
    IOSObjectArray *a__ = args;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *arg = *b__++;
      (void) [((JavaLangStringBuilder *) nil_chk([sb appendWithChar:' '])) appendWithNSString:arg];
    }
  }
  return [sb description];
}

NSString *EduStanfordNlpUtilStringUtils_getBaseNameWithNSString_(NSString *fileName) {
  EduStanfordNlpUtilStringUtils_initialize();
  return EduStanfordNlpUtilStringUtils_getBaseNameWithNSString_withNSString_(fileName, @"");
}

NSString *EduStanfordNlpUtilStringUtils_getBaseNameWithNSString_withNSString_(NSString *fileName, NSString *suffix) {
  EduStanfordNlpUtilStringUtils_initialize();
  IOSObjectArray *elts = [((NSString *) nil_chk(fileName)) split:@"/"];
  NSString *lastElt = IOSObjectArray_Get(elts, ((IOSObjectArray *) nil_chk(elts))->size_ - 1);
  if ([((NSString *) nil_chk(lastElt)) hasSuffix:suffix]) {
    lastElt = [lastElt substring:0 endIndex:((jint) [lastElt length]) - ((jint) [((NSString *) nil_chk(suffix)) length])];
  }
  return lastElt;
}

jboolean EduStanfordNlpUtilStringUtils_isAlphaWithNSString_(NSString *s) {
  EduStanfordNlpUtilStringUtils_initialize();
  JavaUtilRegexPattern *p = JavaUtilRegexPattern_compileWithNSString_(@"^[\\p{Alpha}\\s]+$");
  JavaUtilRegexMatcher *m = [((JavaUtilRegexPattern *) nil_chk(p)) matcherWithJavaLangCharSequence:s];
  return [((JavaUtilRegexMatcher *) nil_chk(m)) matches];
}

jboolean EduStanfordNlpUtilStringUtils_isNumericWithNSString_(NSString *s) {
  EduStanfordNlpUtilStringUtils_initialize();
  JavaUtilRegexPattern *p = JavaUtilRegexPattern_compileWithNSString_(@"^[\\p{Digit}\\s\\.]+$");
  JavaUtilRegexMatcher *m = [((JavaUtilRegexPattern *) nil_chk(p)) matcherWithJavaLangCharSequence:s];
  return [((JavaUtilRegexMatcher *) nil_chk(m)) matches];
}

jboolean EduStanfordNlpUtilStringUtils_isAlphanumericWithNSString_(NSString *s) {
  EduStanfordNlpUtilStringUtils_initialize();
  JavaUtilRegexPattern *p = JavaUtilRegexPattern_compileWithNSString_(@"^[\\p{Alnum}\\s\\.]+$");
  JavaUtilRegexMatcher *m = [((JavaUtilRegexPattern *) nil_chk(p)) matcherWithJavaLangCharSequence:s];
  return [((JavaUtilRegexMatcher *) nil_chk(m)) matches];
}

jboolean EduStanfordNlpUtilStringUtils_isPunctWithNSString_(NSString *s) {
  EduStanfordNlpUtilStringUtils_initialize();
  JavaUtilRegexPattern *p = JavaUtilRegexPattern_compileWithNSString_(@"^[\\p{Punct}]+$");
  JavaUtilRegexMatcher *m = [((JavaUtilRegexPattern *) nil_chk(p)) matcherWithJavaLangCharSequence:s];
  return [((JavaUtilRegexMatcher *) nil_chk(m)) matches];
}

jboolean EduStanfordNlpUtilStringUtils_isAcronymWithNSString_(NSString *s) {
  EduStanfordNlpUtilStringUtils_initialize();
  JavaUtilRegexPattern *p = JavaUtilRegexPattern_compileWithNSString_(@"^[\\p{Upper}]+$");
  JavaUtilRegexMatcher *m = [((JavaUtilRegexPattern *) nil_chk(p)) matcherWithJavaLangCharSequence:s];
  return [((JavaUtilRegexMatcher *) nil_chk(m)) matches];
}

NSString *EduStanfordNlpUtilStringUtils_getNotNullStringWithNSString_(NSString *s) {
  EduStanfordNlpUtilStringUtils_initialize();
  if (s == nil) return @"";
  else return s;
}

NSString *EduStanfordNlpUtilStringUtils_resolveVarsWithNSString_withJavaUtilMap_(NSString *str, id<JavaUtilMap> props) {
  EduStanfordNlpUtilStringUtils_initialize();
  if (str == nil) return nil;
  JavaUtilRegexPattern *p = JavaUtilRegexPattern_compileWithNSString_(@"\\$\\{(\\w+)\\}");
  JavaUtilRegexMatcher *m = [((JavaUtilRegexPattern *) nil_chk(p)) matcherWithJavaLangCharSequence:str];
  JavaLangStringBuffer *sb = new_JavaLangStringBuffer_init();
  while ([((JavaUtilRegexMatcher *) nil_chk(m)) find]) {
    NSString *varName = nil == [m groupWithInt:1] ? [m groupWithInt:2] : [m groupWithInt:1];
    NSString *vrValue;
    if ([((id<JavaUtilMap>) nil_chk(props)) containsKeyWithId:varName]) {
      vrValue = ((NSString *) cast_chk([props getWithId:varName], [NSString class]));
    }
    else {
      vrValue = JavaLangSystem_getenvWithNSString_(varName);
    }
    (void) [m appendReplacementWithJavaLangStringBuffer:sb withNSString:nil == vrValue ? @"" : vrValue];
  }
  (void) [m appendTailWithJavaLangStringBuffer:sb];
  return [sb description];
}

JavaUtilProperties *EduStanfordNlpUtilStringUtils_argsToPropertiesWithResolveWithNSStringArray_(IOSObjectArray *args) {
  EduStanfordNlpUtilStringUtils_initialize();
  JavaUtilLinkedHashMap *result = new_JavaUtilLinkedHashMap_init();
  id<JavaUtilMap> existingArgs = new_JavaUtilLinkedHashMap_init();
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(args))->size_; i++) {
    NSString *key = IOSObjectArray_Get(args, i);
    if (((jint) [((NSString *) nil_chk(key)) length]) > 0 && [key charAtWithInt:0] == '-') {
      if (((jint) [key length]) > 1 && [key charAtWithInt:1] == '-') key = [key substring:2];
      else key = [key substring:1];
      jint max = 1;
      jint min = 0;
      id<JavaUtilList> flagArgs = new_JavaUtilArrayList_init();
      for (jint j = 0; j < max && i + 1 < args->size_ && (j < min || ((jint) [((NSString *) nil_chk(IOSObjectArray_Get(args, i + 1))) length]) == 0 || [((NSString *) nil_chk(IOSObjectArray_Get(args, i + 1))) charAtWithInt:0] != '-'); i++, j++) {
        [flagArgs addWithId:IOSObjectArray_Get(args, i + 1)];
      }
      if ([flagArgs isEmpty]) {
        (void) [existingArgs putWithId:key withId:@"true"];
      }
      else {
        if ([((NSString *) nil_chk(key)) equalsIgnoreCase:EduStanfordNlpUtilStringUtils_PROP] || [key equalsIgnoreCase:EduStanfordNlpUtilStringUtils_PROPS] || [key equalsIgnoreCase:EduStanfordNlpUtilStringUtils_PROPERTIES] || [key equalsIgnoreCase:EduStanfordNlpUtilStringUtils_ARGUMENTS] || [key equalsIgnoreCase:EduStanfordNlpUtilStringUtils_ARGS]) {
          for (NSString * __strong flagArg in flagArgs) [result putAllWithJavaUtilMap:EduStanfordNlpUtilStringUtils_propFileToLinkedHashMapWithNSString_withJavaUtilMap_(flagArg, existingArgs)];
          [existingArgs clear];
        }
        else (void) [existingArgs putWithId:key withId:EduStanfordNlpUtilStringUtils_joinWithJavaLangIterable_withNSString_(flagArgs, @" ")];
      }
    }
  }
  [result putAllWithJavaUtilMap:existingArgs];
  for (id<JavaUtilMap_Entry> __strong o in nil_chk([result entrySet])) {
    NSString *val = EduStanfordNlpUtilStringUtils_resolveVarsWithNSString_withJavaUtilMap_([((id<JavaUtilMap_Entry>) nil_chk(o)) getValue], result);
    (void) [result putWithId:[o getKey] withId:val];
  }
  JavaUtilProperties *props = new_JavaUtilProperties_init();
  [props putAllWithJavaUtilMap:result];
  return props;
}

JavaUtilLinkedHashMap *EduStanfordNlpUtilStringUtils_propFileToLinkedHashMapWithNSString_withJavaUtilMap_(NSString *filename, id<JavaUtilMap> existingArgs) {
  EduStanfordNlpUtilStringUtils_initialize();
  JavaUtilLinkedHashMap *result = new_JavaUtilLinkedHashMap_init();
  [result putAllWithJavaUtilMap:existingArgs];
  for (NSString * __strong l in nil_chk(EduStanfordNlpIoIOUtils_readLinesWithNSString_(filename))) {
    l = [((NSString *) nil_chk(l)) trim];
    if ([((NSString *) nil_chk(l)) isEmpty] || [l hasPrefix:@"#"]) continue;
    jint index = [l indexOf:'='];
    if (index == -1) (void) [result putWithId:l withId:@"true"];
    else (void) [result putWithId:[((NSString *) nil_chk([l substring:0 endIndex:index])) trim] withId:[((NSString *) nil_chk([l substring:index + 1])) trim]];
  }
  return result;
}

id<JavaUtilCollection> EduStanfordNlpUtilStringUtils_getNgramsWithJavaUtilList_withInt_withInt_(id<JavaUtilList> words, jint minSize, jint maxSize) {
  EduStanfordNlpUtilStringUtils_initialize();
  id<JavaUtilList> ng = EduStanfordNlpUtilCollectionUtils_getNGramsWithJavaUtilList_withInt_withInt_(words, minSize, maxSize);
  id<JavaUtilCollection> ngrams = new_JavaUtilArrayList_init();
  for (id<JavaUtilList> __strong n in nil_chk(ng)) [ngrams addWithId:EduStanfordNlpUtilStringUtils_joinWithJavaLangIterable_withNSString_(n, @" ")];
  return ngrams;
}

id<JavaUtilCollection> EduStanfordNlpUtilStringUtils_getNgramsFromTokensWithJavaUtilList_withInt_withInt_(id<JavaUtilList> words, jint minSize, jint maxSize) {
  EduStanfordNlpUtilStringUtils_initialize();
  id<JavaUtilList> wordsStr = new_JavaUtilArrayList_init();
  for (EduStanfordNlpLingCoreLabel * __strong l in nil_chk(words)) [wordsStr addWithId:[((EduStanfordNlpLingCoreLabel *) nil_chk(l)) word]];
  id<JavaUtilList> ng = EduStanfordNlpUtilCollectionUtils_getNGramsWithJavaUtilList_withInt_withInt_(wordsStr, minSize, maxSize);
  id<JavaUtilCollection> ngrams = new_JavaUtilArrayList_init();
  for (id<JavaUtilList> __strong n in nil_chk(ng)) [ngrams addWithId:EduStanfordNlpUtilStringUtils_joinWithJavaLangIterable_withNSString_(n, @" ")];
  return ngrams;
}

id<JavaUtilCollection> EduStanfordNlpUtilStringUtils_getNgramsStringWithNSString_withInt_withInt_(NSString *s, jint minSize, jint maxSize) {
  EduStanfordNlpUtilStringUtils_initialize();
  return EduStanfordNlpUtilStringUtils_getNgramsWithJavaUtilList_withInt_withInt_(JavaUtilArrays_asListWithNSObjectArray_([((NSString *) nil_chk(s)) split:@"\\s+"]), minSize, maxSize);
}

id<JavaUtilCollection> EduStanfordNlpUtilStringUtils_getCharacterNgramsWithNSString_withInt_withInt_(NSString *s, jint minSize, jint maxSize) {
  EduStanfordNlpUtilStringUtils_initialize();
  id<JavaUtilCollection> ngrams = new_JavaUtilArrayList_init();
  jint len = ((jint) [((NSString *) nil_chk(s)) length]);
  for (jint i = 0; i < len; i++) {
    for (jint ngramSize = minSize; ngramSize > 0 && ngramSize <= maxSize && i + ngramSize <= len; ngramSize++) {
      [ngrams addWithId:[s substring:i endIndex:i + ngramSize]];
    }
  }
  return ngrams;
}

NSString *EduStanfordNlpUtilStringUtils_normalizeWithNSString_(NSString *s) {
  EduStanfordNlpUtilStringUtils_initialize();
  NSString *d = JavaTextNormalizer_normalizeWithJavaLangCharSequence_withJavaTextNormalizer_Form_(s, JreLoadEnum(JavaTextNormalizer_Form, NFKD));
  d = [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(EduStanfordNlpUtilStringUtils_diacriticalMarksPattern)) matcherWithJavaLangCharSequence:d])) replaceAllWithNSString:@""];
  return JavaTextNormalizer_normalizeWithJavaLangCharSequence_withJavaTextNormalizer_Form_(d, JreLoadEnum(JavaTextNormalizer_Form, NFKC));
}

NSString *EduStanfordNlpUtilStringUtils_toStringWithJavaUtilList_(id<JavaUtilList> words) {
  EduStanfordNlpUtilStringUtils_initialize();
  return EduStanfordNlpUtilStringUtils_joinWithJavaUtilStreamStream_withNSString_([((id<JavaUtilStreamStream>) nil_chk([((id<JavaUtilList>) nil_chk(words)) stream])) mapWithJavaUtilFunctionFunction:JreLoadStatic(EduStanfordNlpUtilStringUtils_$Lambda$2, instance)], @" ");
}

NSString *EduStanfordNlpUtilStringUtils_toStringWithEduStanfordNlpUtilCoreMap_(id<EduStanfordNlpUtilCoreMap> sentence) {
  EduStanfordNlpUtilStringUtils_initialize();
  return EduStanfordNlpUtilStringUtils_toStringWithJavaUtilList_([((id<EduStanfordNlpUtilCoreMap>) nil_chk(sentence)) getWithIOSClass:EduStanfordNlpLingCoreAnnotations_TokensAnnotation_class_()]);
}

jint EduStanfordNlpUtilStringUtils_levenshteinDistanceWithNSString_withNSString_(NSString *s1, NSString *s2) {
  EduStanfordNlpUtilStringUtils_initialize();
  s1 = [((NSString *) nil_chk(s1)) lowercaseString];
  s2 = [((NSString *) nil_chk(s2)) lowercaseString];
  IOSIntArray *costs = [IOSIntArray newArrayWithLength:((jint) [((NSString *) nil_chk(s2)) length]) + 1];
  for (jint i = 0; i <= ((jint) [((NSString *) nil_chk(s1)) length]); i++) {
    jint lastValue = i;
    for (jint j = 0; j <= ((jint) [s2 length]); j++) {
      if (i == 0) *IOSIntArray_GetRef(costs, j) = j;
      else {
        if (j > 0) {
          jint newValue = IOSIntArray_Get(costs, j - 1);
          if ([s1 charAtWithInt:i - 1] != [s2 charAtWithInt:j - 1]) newValue = JavaLangMath_minWithInt_withInt_(JavaLangMath_minWithInt_withInt_(newValue, lastValue), IOSIntArray_Get(costs, j)) + 1;
          *IOSIntArray_GetRef(costs, j - 1) = lastValue;
          lastValue = newValue;
        }
      }
    }
    if (i > 0) *IOSIntArray_GetRef(costs, ((jint) [s2 length])) = lastValue;
  }
  return IOSIntArray_Get(costs, ((jint) [s2 length]));
}

jint EduStanfordNlpUtilStringUtils_levenshteinDistanceWithNSObjectArray_withNSObjectArray_(IOSObjectArray *s1, IOSObjectArray *s2) {
  EduStanfordNlpUtilStringUtils_initialize();
  IOSIntArray *costs = [IOSIntArray newArrayWithLength:((IOSObjectArray *) nil_chk(s2))->size_ + 1];
  for (jint i = 0; i <= ((IOSObjectArray *) nil_chk(s1))->size_; i++) {
    jint lastValue = i;
    for (jint j = 0; j <= s2->size_; j++) {
      if (i == 0) *IOSIntArray_GetRef(costs, j) = j;
      else {
        if (j > 0) {
          jint newValue = IOSIntArray_Get(costs, j - 1);
          if (![nil_chk(IOSObjectArray_Get(s1, i - 1)) isEqual:IOSObjectArray_Get(s2, j - 1)]) newValue = JavaLangMath_minWithInt_withInt_(JavaLangMath_minWithInt_withInt_(newValue, lastValue), IOSIntArray_Get(costs, j)) + 1;
          *IOSIntArray_GetRef(costs, j - 1) = lastValue;
          lastValue = newValue;
        }
      }
    }
    if (i > 0) *IOSIntArray_GetRef(costs, s2->size_) = lastValue;
  }
  return IOSIntArray_Get(costs, s2->size_);
}

NSString *EduStanfordNlpUtilStringUtils_unescapeHtml3WithNSString_(NSString *input) {
  EduStanfordNlpUtilStringUtils_initialize();
  JavaIoStringWriter *writer = nil;
  jint len = ((jint) [((NSString *) nil_chk(input)) length]);
  jint i = 1;
  jint st = 0;
  while (true) {
    while (i < len && [input charAtWithInt:i - 1] != '&') i++;
    if (i >= len) break;
    jint j = i;
    while (j < len && j < i + 6 + 1 && [input charAtWithInt:j] != ';') j++;
    if (j == len || j < i + 2 || j == i + 6 + 1) {
      i++;
      continue;
    }
    if ([input charAtWithInt:i] == '#') {
      jint k = i + 1;
      jint radix = 10;
      jchar firstChar = [input charAtWithInt:k];
      if (firstChar == 'x' || firstChar == 'X') {
        k++;
        radix = 16;
      }
      @try {
        jint entityValue = JavaLangInteger_parseIntWithNSString_withInt_([input substring:k endIndex:j], radix);
        if (writer == nil) writer = new_JavaIoStringWriter_initWithInt_(((jint) [input length]));
        (void) [writer appendWithJavaLangCharSequence:[input substring:st endIndex:i - 1]];
        if (entityValue > (jint) 0xFFFF) {
          IOSCharArray *chrs = JavaLangCharacter_toCharsWithInt_(entityValue);
          [writer writeWithInt:IOSCharArray_Get(nil_chk(chrs), 0)];
          [writer writeWithInt:IOSCharArray_Get(chrs, 1)];
        }
        else {
          [writer writeWithInt:entityValue];
        }
      }
      @catch (JavaLangNumberFormatException *ex) {
        i++;
        continue;
      }
    }
    else {
      id<JavaLangCharSequence> value = [((JavaUtilHashMap *) nil_chk(EduStanfordNlpUtilStringUtils_htmlUnescapeLookupMap)) getWithId:[input substring:i endIndex:j]];
      if (value == nil) {
        i++;
        continue;
      }
      if (writer == nil) writer = new_JavaIoStringWriter_initWithInt_(((jint) [input length]));
      (void) [writer appendWithJavaLangCharSequence:[input substring:st endIndex:i - 1]];
      (void) [writer appendWithJavaLangCharSequence:value];
    }
    st = j + 1;
    i = st;
  }
  if (writer != nil) {
    (void) [writer appendWithJavaLangCharSequence:[input substring:st endIndex:len]];
    return [writer description];
  }
  return input;
}

IOSObjectArray *EduStanfordNlpUtilStringUtils_decodeArrayWithNSString_(NSString *encoded) {
  EduStanfordNlpUtilStringUtils_initialize();
  if (((jint) [((NSString *) nil_chk(encoded)) length]) == 0) return [IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()];
  IOSCharArray *chars = [((NSString *) nil_chk([encoded trim])) toCharArray];
  jchar quoteCloseChar = (jchar) 0;
  id<JavaUtilList> terms = new_JavaUtilLinkedList_init();
  JavaLangStringBuilder *current = new_JavaLangStringBuilder_init();
  jint start = 0;
  jint end = ((IOSCharArray *) nil_chk(chars))->size_;
  if (IOSCharArray_Get(chars, 0) == '(') {
    start += 1;
    end -= 1;
    if (IOSCharArray_Get(chars, end) != ')') @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Unclosed paren in encoded array: ", encoded));
  }
  if (IOSCharArray_Get(chars, 0) == '[') {
    start += 1;
    end -= 1;
    if (IOSCharArray_Get(chars, end) != ']') @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Unclosed bracket in encoded array: ", encoded));
  }
  if (IOSCharArray_Get(chars, 0) == '{') {
    start += 1;
    end -= 1;
    if (IOSCharArray_Get(chars, end) != '}') @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Unclosed bracket in encoded array: ", encoded));
  }
  for (jint i = start; i < end; i++) {
    if (IOSCharArray_Get(chars, i) == 0x000d) {
      continue;
    }
    else if (IOSCharArray_Get(chars, i) == '\\') {
      if (i == chars->size_ - 1) @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Last character of encoded pair is escape character: ", encoded));
      (void) [current appendWithChar:IOSCharArray_Get(chars, i + 1)];
      i += 1;
    }
    else if (quoteCloseChar != 0) {
      if (IOSCharArray_Get(chars, i) == quoteCloseChar) {
        quoteCloseChar = (jchar) 0;
      }
      else {
        (void) [current appendWithChar:IOSCharArray_Get(chars, i)];
      }
    }
    else {
      if (IOSCharArray_Get(chars, i) == '"') {
        quoteCloseChar = '"';
      }
      else if (IOSCharArray_Get(chars, i) == '\'') {
        quoteCloseChar = '\'';
      }
      else if (IOSCharArray_Get(chars, i) == ',' || IOSCharArray_Get(chars, i) == ';' || IOSCharArray_Get(chars, i) == ' ' || IOSCharArray_Get(chars, i) == 0x0009 || IOSCharArray_Get(chars, i) == 0x000a) {
        if ([current length] > 0) {
          [terms addWithId:current];
        }
        current = new_JavaLangStringBuilder_init();
      }
      else {
        (void) [current appendWithChar:IOSCharArray_Get(chars, i)];
      }
    }
  }
  if ([current length] > 0) [terms addWithId:current];
  IOSObjectArray *rtn = [IOSObjectArray newArrayWithLength:[terms size] type:NSString_class_()];
  jint i = 0;
  for (JavaLangStringBuilder * __strong b in terms) {
    (void) IOSObjectArray_Set(rtn, i, [((NSString *) nil_chk([((JavaLangStringBuilder *) nil_chk(b)) description])) trim]);
    i += 1;
  }
  return rtn;
}

id<JavaUtilMap> EduStanfordNlpUtilStringUtils_decodeMapWithNSString_(NSString *encoded) {
  EduStanfordNlpUtilStringUtils_initialize();
  if (((jint) [((NSString *) nil_chk(encoded)) length]) == 0) return new_JavaUtilHashMap_init();
  IOSCharArray *chars = [((NSString *) nil_chk([encoded trim])) toCharArray];
  jchar quoteCloseChar = (jchar) 0;
  id<JavaUtilMap> map = new_JavaUtilHashMap_init();
  NSString *key = @"";
  NSString *value = @"";
  jboolean onKey = true;
  JavaLangStringBuilder *current = new_JavaLangStringBuilder_init();
  jint start = 0;
  jint end = ((IOSCharArray *) nil_chk(chars))->size_;
  if (IOSCharArray_Get(chars, 0) == '(') {
    start += 1;
    end -= 1;
    if (IOSCharArray_Get(chars, end) != ')') @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Unclosed paren in encoded map: ", encoded));
  }
  if (IOSCharArray_Get(chars, 0) == '[') {
    start += 1;
    end -= 1;
    if (IOSCharArray_Get(chars, end) != ']') @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Unclosed bracket in encoded map: ", encoded));
  }
  if (IOSCharArray_Get(chars, 0) == '{') {
    start += 1;
    end -= 1;
    if (IOSCharArray_Get(chars, end) != '}') @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Unclosed bracket in encoded map: ", encoded));
  }
  for (jint i = start; i < end; i++) {
    if (IOSCharArray_Get(chars, i) == 0x000d) {
      continue;
    }
    else if (IOSCharArray_Get(chars, i) == '\\') {
      if (i == chars->size_ - 1) {
        @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Last character of encoded pair is escape character: ", encoded));
      }
      (void) [current appendWithChar:IOSCharArray_Get(chars, i + 1)];
      i += 1;
    }
    else if (quoteCloseChar != 0) {
      if (IOSCharArray_Get(chars, i) == quoteCloseChar) {
        quoteCloseChar = (jchar) 0;
      }
      else {
        (void) [current appendWithChar:IOSCharArray_Get(chars, i)];
      }
    }
    else {
      if (IOSCharArray_Get(chars, i) == '"') {
        quoteCloseChar = '"';
      }
      else if (IOSCharArray_Get(chars, i) == '\'') {
        quoteCloseChar = '\'';
      }
      else if (IOSCharArray_Get(chars, i) == 0x000a && [current length] == 0) {
        (void) [current appendWithNSString:@""];
      }
      else if (IOSCharArray_Get(chars, i) == ',' || IOSCharArray_Get(chars, i) == ';' || IOSCharArray_Get(chars, i) == 0x0009 || IOSCharArray_Get(chars, i) == 0x000a) {
        if (onKey) {
          @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Encountered key without value");
        }
        if ([current length] > 0) {
          value = [((NSString *) nil_chk([current description])) trim];
        }
        current = new_JavaLangStringBuilder_init();
        onKey = true;
        (void) [map putWithId:key withId:value];
      }
      else if ((IOSCharArray_Get(chars, i) == '-' || IOSCharArray_Get(chars, i) == '=') && (i < chars->size_ - 1 && IOSCharArray_Get(chars, i + 1) == '>')) {
        if (!onKey) {
          @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Encountered a value without a key");
        }
        if ([current length] > 0) {
          key = [((NSString *) nil_chk([current description])) trim];
        }
        current = new_JavaLangStringBuilder_init();
        onKey = false;
        i += 1;
      }
      else if (IOSCharArray_Get(chars, i) == ':') {
        if (!onKey) {
          @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Encountered a value without a key");
        }
        if ([current length] > 0) {
          key = [((NSString *) nil_chk([current description])) trim];
        }
        current = new_JavaLangStringBuilder_init();
        onKey = false;
      }
      else {
        (void) [current appendWithChar:IOSCharArray_Get(chars, i)];
      }
    }
  }
  if (((jint) [((NSString *) nil_chk([((NSString *) nil_chk([current description])) trim])) length]) > 0 && !onKey) {
    (void) [map putWithId:[((NSString *) nil_chk(key)) trim] withId:[((NSString *) nil_chk([current description])) trim]];
  }
  return map;
}

NSString *EduStanfordNlpUtilStringUtils_expandEnvironmentVariablesWithNSString_withJavaUtilMap_(NSString *raw, id<JavaUtilMap> env) {
  EduStanfordNlpUtilStringUtils_initialize();
  NSString *pattern = @"\\$\\{?([a-zA-Z_]+[a-zA-Z0-9_]*)\\}?";
  JavaUtilRegexPattern *expr = JavaUtilRegexPattern_compileWithNSString_(pattern);
  NSString *text = raw;
  JavaUtilRegexMatcher *matcher = [((JavaUtilRegexPattern *) nil_chk(expr)) matcherWithJavaLangCharSequence:text];
  while ([((JavaUtilRegexMatcher *) nil_chk(matcher)) find]) {
    NSString *envValue = [((id<JavaUtilMap>) nil_chk(env)) getWithId:[matcher groupWithInt:1]];
    if (envValue == nil) {
      envValue = @"";
    }
    else {
      envValue = [envValue replace:@"\\" withSequence:@"\\\\"];
    }
    JavaUtilRegexPattern *subexpr = JavaUtilRegexPattern_compileWithNSString_(JavaUtilRegexPattern_quoteWithNSString_([matcher groupWithInt:0]));
    text = [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(subexpr)) matcherWithJavaLangCharSequence:text])) replaceAllWithNSString:envValue];
  }
  return text;
}

NSString *EduStanfordNlpUtilStringUtils_expandEnvironmentVariablesWithNSString_(NSString *raw) {
  EduStanfordNlpUtilStringUtils_initialize();
  return EduStanfordNlpUtilStringUtils_expandEnvironmentVariablesWithNSString_withJavaUtilMap_(raw, JavaLangSystem_getenv());
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpUtilStringUtils)

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpUtilStringUtils_$Lambda$1)

@implementation EduStanfordNlpUtilStringUtils_$Lambda$1

- (id)applyWithId:(id<EduStanfordNlpLingHasWord>)inArg {
  return [((id<EduStanfordNlpLingHasWord>) nil_chk(inArg)) word];
}

- (id<JavaUtilFunctionFunction>)andThenWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_andThenWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilFunctionFunction>)composeWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_composeWithJavaUtilFunctionFunction_(self, arg0);
}

+ (void)initialize {
  if (self == [EduStanfordNlpUtilStringUtils_$Lambda$1 class]) {
    EduStanfordNlpUtilStringUtils_$Lambda$1_instance = new_EduStanfordNlpUtilStringUtils_$Lambda$1_init();
    J2OBJC_SET_INITIALIZED(EduStanfordNlpUtilStringUtils_$Lambda$1)
  }
}

@end

void EduStanfordNlpUtilStringUtils_$Lambda$1_init(EduStanfordNlpUtilStringUtils_$Lambda$1 *self) {
  NSObject_init(self);
}

EduStanfordNlpUtilStringUtils_$Lambda$1 *new_EduStanfordNlpUtilStringUtils_$Lambda$1_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilStringUtils_$Lambda$1, init)
}

EduStanfordNlpUtilStringUtils_$Lambda$1 *create_EduStanfordNlpUtilStringUtils_$Lambda$1_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilStringUtils_$Lambda$1, init)
}

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpUtilStringUtils_$Lambda$2)

@implementation EduStanfordNlpUtilStringUtils_$Lambda$2

- (id)applyWithId:(id)a {
  return [nil_chk(a) word];
}

- (id<JavaUtilFunctionFunction>)andThenWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_andThenWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilFunctionFunction>)composeWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_composeWithJavaUtilFunctionFunction_(self, arg0);
}

+ (void)initialize {
  if (self == [EduStanfordNlpUtilStringUtils_$Lambda$2 class]) {
    EduStanfordNlpUtilStringUtils_$Lambda$2_instance = new_EduStanfordNlpUtilStringUtils_$Lambda$2_init();
    J2OBJC_SET_INITIALIZED(EduStanfordNlpUtilStringUtils_$Lambda$2)
  }
}

@end

void EduStanfordNlpUtilStringUtils_$Lambda$2_init(EduStanfordNlpUtilStringUtils_$Lambda$2 *self) {
  NSObject_init(self);
}

EduStanfordNlpUtilStringUtils_$Lambda$2 *new_EduStanfordNlpUtilStringUtils_$Lambda$2_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilStringUtils_$Lambda$2, init)
}

EduStanfordNlpUtilStringUtils_$Lambda$2 *create_EduStanfordNlpUtilStringUtils_$Lambda$2_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilStringUtils_$Lambda$2, init)
}

@implementation EduStanfordNlpUtilStringUtils_$1

- (NSString *)applyWithId:(id)inArg {
  return [nil_chk(inArg) description];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpUtilStringUtils_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilFunctionFunction>)andThenWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_andThenWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilFunctionFunction>)composeWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_composeWithJavaUtilFunctionFunction_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(applyWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "apply", "LNSObject;", "LEduStanfordNlpUtilStringUtils;", "Ljava/lang/Object;Ljava/util/function/Function<Ljava/lang/Object;Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilStringUtils_$1 = { "", "edu.stanford.nlp.util", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, -1, 3, -1 };
  return &_EduStanfordNlpUtilStringUtils_$1;
}

@end

void EduStanfordNlpUtilStringUtils_$1_init(EduStanfordNlpUtilStringUtils_$1 *self) {
  NSObject_init(self);
}

EduStanfordNlpUtilStringUtils_$1 *new_EduStanfordNlpUtilStringUtils_$1_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilStringUtils_$1, init)
}

EduStanfordNlpUtilStringUtils_$1 *create_EduStanfordNlpUtilStringUtils_$1_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilStringUtils_$1, init)
}

@implementation EduStanfordNlpUtilStringUtils_$2

- (NSString *)applyWithId:(id<EduStanfordNlpUtilCoreMap>)inArg {
  id val = [((id<EduStanfordNlpUtilCoreMap>) nil_chk(inArg)) getWithIOSClass:val$field_];
  return (val != nil) ? [((id<JavaUtilFunctionFunction>) nil_chk(val$toStringFunc_)) applyWithId:val] : val$defaultFieldValue_;
}

- (instancetype)initWithIOSClass:(IOSClass *)capture$0
    withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)capture$1
                    withNSString:(NSString *)capture$2 {
  EduStanfordNlpUtilStringUtils_$2_initWithIOSClass_withJavaUtilFunctionFunction_withNSString_(self, capture$0, capture$1, capture$2);
  return self;
}

- (id<JavaUtilFunctionFunction>)andThenWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_andThenWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilFunctionFunction>)composeWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_composeWithJavaUtilFunctionFunction_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(applyWithId:);
  methods[1].selector = @selector(initWithIOSClass:withJavaUtilFunctionFunction:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$field_", "LIOSClass;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$toStringFunc_", "LJavaUtilFunctionFunction;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
    { "val$defaultFieldValue_", "LNSString;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "apply", "LEduStanfordNlpUtilCoreMap;", "LIOSClass;LJavaUtilFunctionFunction;LNSString;", "(Ljava/lang/Class;Ljava/util/function/Function<Ljava/lang/Object;Ljava/lang/String;>;Ljava/lang/String;)V", "Ljava/util/function/Function<Ljava/lang/Object;Ljava/lang/String;>;", "LEduStanfordNlpUtilStringUtils;", "joinFieldsWithJavaUtilList:withIOSClass:withNSString:withNSString:withInt:withInt:withJavaUtilFunctionFunction:", "Ljava/lang/Object;Ljava/util/function/Function<Ledu/stanford/nlp/util/CoreMap;Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilStringUtils_$2 = { "", "edu.stanford.nlp.util", ptrTable, methods, fields, 7, 0x8008, 2, 3, 5, -1, 6, 7, -1 };
  return &_EduStanfordNlpUtilStringUtils_$2;
}

@end

void EduStanfordNlpUtilStringUtils_$2_initWithIOSClass_withJavaUtilFunctionFunction_withNSString_(EduStanfordNlpUtilStringUtils_$2 *self, IOSClass *capture$0, id<JavaUtilFunctionFunction> capture$1, NSString *capture$2) {
  self->val$field_ = capture$0;
  self->val$toStringFunc_ = capture$1;
  self->val$defaultFieldValue_ = capture$2;
  NSObject_init(self);
}

EduStanfordNlpUtilStringUtils_$2 *new_EduStanfordNlpUtilStringUtils_$2_initWithIOSClass_withJavaUtilFunctionFunction_withNSString_(IOSClass *capture$0, id<JavaUtilFunctionFunction> capture$1, NSString *capture$2) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilStringUtils_$2, initWithIOSClass_withJavaUtilFunctionFunction_withNSString_, capture$0, capture$1, capture$2)
}

EduStanfordNlpUtilStringUtils_$2 *create_EduStanfordNlpUtilStringUtils_$2_initWithIOSClass_withJavaUtilFunctionFunction_withNSString_(IOSClass *capture$0, id<JavaUtilFunctionFunction> capture$1, NSString *capture$2) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilStringUtils_$2, initWithIOSClass_withJavaUtilFunctionFunction_withNSString_, capture$0, capture$1, capture$2)
}

@implementation EduStanfordNlpUtilStringUtils_$3

- (NSString *)applyWithId:(id<EduStanfordNlpUtilCoreMap>)inArg {
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  {
    IOSObjectArray *a__ = val$fields_;
    IOSClass * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    IOSClass * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      IOSClass *field = *b__++;
      if ([sb length] > 0) {
        (void) [sb appendWithNSString:val$fieldGlue_];
      }
      id val = [((id<EduStanfordNlpUtilCoreMap>) nil_chk(inArg)) getWithIOSClass:field];
      NSString *str = (val != nil) ? [((id<JavaUtilFunctionFunction>) nil_chk(val$toStringFunc_)) applyWithId:val] : val$defaultFieldValue_;
      (void) [sb appendWithNSString:str];
    }
  }
  return [sb description];
}

- (instancetype)initWithIOSClassArray:(IOSObjectArray *)capture$0
                         withNSString:(NSString *)capture$1
         withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)capture$2
                         withNSString:(NSString *)capture$3 {
  EduStanfordNlpUtilStringUtils_$3_initWithIOSClassArray_withNSString_withJavaUtilFunctionFunction_withNSString_(self, capture$0, capture$1, capture$2, capture$3);
  return self;
}

- (id<JavaUtilFunctionFunction>)andThenWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_andThenWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilFunctionFunction>)composeWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_composeWithJavaUtilFunctionFunction_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(applyWithId:);
  methods[1].selector = @selector(initWithIOSClassArray:withNSString:withJavaUtilFunctionFunction:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$fields_", "[LIOSClass;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$fieldGlue_", "LNSString;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$toStringFunc_", "LJavaUtilFunctionFunction;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
    { "val$defaultFieldValue_", "LNSString;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "apply", "LEduStanfordNlpUtilCoreMap;", "[LIOSClass;LNSString;LJavaUtilFunctionFunction;LNSString;", "([Ljava/lang/Class;Ljava/lang/String;Ljava/util/function/Function<Ljava/lang/Object;Ljava/lang/String;>;Ljava/lang/String;)V", "Ljava/util/function/Function<Ljava/lang/Object;Ljava/lang/String;>;", "LEduStanfordNlpUtilStringUtils;", "joinMultipleFieldsWithJavaUtilList:withIOSClassArray:withNSString:withNSString:withNSString:withInt:withInt:withJavaUtilFunctionFunction:", "Ljava/lang/Object;Ljava/util/function/Function<Ledu/stanford/nlp/util/CoreMap;Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilStringUtils_$3 = { "", "edu.stanford.nlp.util", ptrTable, methods, fields, 7, 0x8008, 2, 4, 5, -1, 6, 7, -1 };
  return &_EduStanfordNlpUtilStringUtils_$3;
}

@end

void EduStanfordNlpUtilStringUtils_$3_initWithIOSClassArray_withNSString_withJavaUtilFunctionFunction_withNSString_(EduStanfordNlpUtilStringUtils_$3 *self, IOSObjectArray *capture$0, NSString *capture$1, id<JavaUtilFunctionFunction> capture$2, NSString *capture$3) {
  self->val$fields_ = capture$0;
  self->val$fieldGlue_ = capture$1;
  self->val$toStringFunc_ = capture$2;
  self->val$defaultFieldValue_ = capture$3;
  NSObject_init(self);
}

EduStanfordNlpUtilStringUtils_$3 *new_EduStanfordNlpUtilStringUtils_$3_initWithIOSClassArray_withNSString_withJavaUtilFunctionFunction_withNSString_(IOSObjectArray *capture$0, NSString *capture$1, id<JavaUtilFunctionFunction> capture$2, NSString *capture$3) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilStringUtils_$3, initWithIOSClassArray_withNSString_withJavaUtilFunctionFunction_withNSString_, capture$0, capture$1, capture$2, capture$3)
}

EduStanfordNlpUtilStringUtils_$3 *create_EduStanfordNlpUtilStringUtils_$3_initWithIOSClassArray_withNSString_withJavaUtilFunctionFunction_withNSString_(IOSObjectArray *capture$0, NSString *capture$1, id<JavaUtilFunctionFunction> capture$2, NSString *capture$3) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilStringUtils_$3, initWithIOSClassArray_withNSString_withJavaUtilFunctionFunction_withNSString_, capture$0, capture$1, capture$2, capture$3)
}
