//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/util/ConfusionMatrix.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/util/ConfusionMatrix.h"
#include "edu/stanford/nlp/util/ErasureUtils.h"
#include "edu/stanford/nlp/util/Generics.h"
#include "edu/stanford/nlp/util/Pair.h"
#include "edu/stanford/nlp/util/StringUtils.h"
#include "java/io/StringWriter.h"
#include "java/lang/Comparable.h"
#include "java/lang/Integer.h"
#include "java/text/DecimalFormat.h"
#include "java/text/DecimalFormatSymbols.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Set.h"
#include "java/util/concurrent/ConcurrentHashMap.h"

@interface EduStanfordNlpUtilConfusionMatrix () {
 @public
  jint leftPadSize_;
  jint delimPadSize_;
  jboolean useRealLabels_;
  JavaUtilConcurrentConcurrentHashMap *confTable_;
}

- (id<JavaUtilList>)sortKeys;

- (JavaLangInteger *)goldMarginalWithId:(id)gold;

- (JavaLangInteger *)guessMarginalWithId:(id)guess;

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpUtilConfusionMatrix, confTable_, JavaUtilConcurrentConcurrentHashMap *)

inline NSString *EduStanfordNlpUtilConfusionMatrix_get_CLASS_PREFIX();
static NSString *EduStanfordNlpUtilConfusionMatrix_CLASS_PREFIX = @"C";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpUtilConfusionMatrix, CLASS_PREFIX, NSString *)

inline NSString *EduStanfordNlpUtilConfusionMatrix_get_FORMAT();
static NSString *EduStanfordNlpUtilConfusionMatrix_FORMAT = @"#.#####";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpUtilConfusionMatrix, FORMAT, NSString *)

__attribute__((unused)) static id<JavaUtilList> EduStanfordNlpUtilConfusionMatrix_sortKeys(EduStanfordNlpUtilConfusionMatrix *self);

__attribute__((unused)) static JavaLangInteger *EduStanfordNlpUtilConfusionMatrix_goldMarginalWithId_(EduStanfordNlpUtilConfusionMatrix *self, id gold);

__attribute__((unused)) static JavaLangInteger *EduStanfordNlpUtilConfusionMatrix_guessMarginalWithId_(EduStanfordNlpUtilConfusionMatrix *self, id guess);

@interface EduStanfordNlpUtilConfusionMatrix_Contingency () {
 @public
  EduStanfordNlpUtilConfusionMatrix *this$0_;
  jdouble tp_;
  jdouble fp_;
  jdouble tn_;
  jdouble fn_;
  jdouble prec_;
  jdouble recall_;
  jdouble spec_;
  jdouble f1_;
}

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpUtilConfusionMatrix_Contingency, this$0_, EduStanfordNlpUtilConfusionMatrix *)

@implementation EduStanfordNlpUtilConfusionMatrix

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpUtilConfusionMatrix_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithJavaUtilLocale:(JavaUtilLocale *)locale {
  EduStanfordNlpUtilConfusionMatrix_initWithJavaUtilLocale_(self, locale);
  return self;
}

- (NSString *)description {
  return [self printTable];
}

- (void)setLeftPadSizeWithInt:(jint)newPadSize {
  self->leftPadSize_ = newPadSize;
}

- (void)setDelimPadSizeWithInt:(jint)newPadSize {
  self->delimPadSize_ = newPadSize;
}

- (void)setUseRealLabelsWithBoolean:(jboolean)useRealLabels {
  self->useRealLabels_ = useRealLabels;
}

- (void)addWithId:(id)guess
           withId:(id)gold {
  [self addWithId:guess withId:gold withInt:1];
}

- (void)addWithId:(id)guess
           withId:(id)gold
          withInt:(jint)increment {
  @synchronized(self) {
    EduStanfordNlpUtilPair *pair = new_EduStanfordNlpUtilPair_initWithId_withId_(guess, gold);
    if ([((JavaUtilConcurrentConcurrentHashMap *) nil_chk(confTable_)) containsKeyWithId:pair]) {
      (void) [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(confTable_)) putWithId:pair withId:JavaLangInteger_valueOfWithInt_([((JavaLangInteger *) nil_chk([confTable_ getWithId:pair])) intValue] + increment)];
    }
    else {
      (void) [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(confTable_)) putWithId:pair withId:JavaLangInteger_valueOfWithInt_(increment)];
    }
  }
}

- (JavaLangInteger *)getWithId:(id)guess
                        withId:(id)gold {
  EduStanfordNlpUtilPair *pair = new_EduStanfordNlpUtilPair_initWithId_withId_(guess, gold);
  if ([((JavaUtilConcurrentConcurrentHashMap *) nil_chk(confTable_)) containsKeyWithId:pair]) {
    return [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(confTable_)) getWithId:pair];
  }
  else {
    return JavaLangInteger_valueOfWithInt_(0);
  }
}

- (id<JavaUtilSet>)uniqueLabels {
  JavaUtilHashSet *ret = new_JavaUtilHashSet_init();
  for (EduStanfordNlpUtilPair * __strong pair in nil_chk([((JavaUtilConcurrentConcurrentHashMap *) nil_chk(confTable_)) keySet])) {
    [ret addWithId:[((EduStanfordNlpUtilPair *) nil_chk(pair)) first]];
    [ret addWithId:[pair second]];
  }
  return ret;
}

- (EduStanfordNlpUtilConfusionMatrix_Contingency *)getContingencyWithId:(id)positiveLabel {
  jint tp = 0;
  jint fp = 0;
  jint tn = 0;
  jint fn = 0;
  for (EduStanfordNlpUtilPair * __strong pair in nil_chk([((JavaUtilConcurrentConcurrentHashMap *) nil_chk(confTable_)) keySet])) {
    jint count = [((JavaLangInteger *) nil_chk([((JavaUtilConcurrentConcurrentHashMap *) nil_chk(confTable_)) getWithId:pair])) intValue];
    id guess = [((EduStanfordNlpUtilPair *) nil_chk(pair)) first];
    id gold = [pair second];
    jboolean guessP = [nil_chk(guess) isEqual:positiveLabel];
    jboolean goldP = [nil_chk(gold) isEqual:positiveLabel];
    if (guessP && goldP) {
      tp += count;
    }
    else if (!guessP && goldP) {
      fn += count;
    }
    else if (guessP && !goldP) {
      fp += count;
    }
    else {
      tn += count;
    }
  }
  return new_EduStanfordNlpUtilConfusionMatrix_Contingency_initWithEduStanfordNlpUtilConfusionMatrix_withInt_withInt_withInt_withInt_(self, tp, fp, tn, fn);
}

- (id<JavaUtilList>)sortKeys {
  return EduStanfordNlpUtilConfusionMatrix_sortKeys(self);
}

- (JavaLangInteger *)goldMarginalWithId:(id)gold {
  return EduStanfordNlpUtilConfusionMatrix_goldMarginalWithId_(self, gold);
}

- (JavaLangInteger *)guessMarginalWithId:(id)guess {
  return EduStanfordNlpUtilConfusionMatrix_guessMarginalWithId_(self, guess);
}

- (NSString *)getPlaceHolderWithInt:(jint)index
                             withId:(id)label {
  if (useRealLabels_) {
    return [nil_chk(label) description];
  }
  else {
    return JreStrcat("$I", EduStanfordNlpUtilConfusionMatrix_CLASS_PREFIX, (index + 1));
  }
}

- (NSString *)printTable {
  id<JavaUtilList> sortedLabels = EduStanfordNlpUtilConfusionMatrix_sortKeys(self);
  if ([((JavaUtilConcurrentConcurrentHashMap *) nil_chk(confTable_)) size] == 0) {
    return @"Empty table!";
  }
  JavaIoStringWriter *ret = new_JavaIoStringWriter_init();
  [ret writeWithNSString:EduStanfordNlpUtilStringUtils_padLeftWithNSString_withInt_(@"Guess/Gold", leftPadSize_)];
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(sortedLabels)) size]; i++) {
    NSString *placeHolder = [self getPlaceHolderWithInt:i withId:[sortedLabels getWithInt:i]];
    [ret writeWithNSString:EduStanfordNlpUtilStringUtils_padLeftWithNSString_withInt_(placeHolder, delimPadSize_)];
  }
  [ret writeWithNSString:@"    Marg. (Guess)"];
  [ret writeWithNSString:@"\n"];
  for (jint guessI = 0; guessI < [sortedLabels size]; guessI++) {
    NSString *placeHolder = [self getPlaceHolderWithInt:guessI withId:[sortedLabels getWithInt:guessI]];
    [ret writeWithNSString:EduStanfordNlpUtilStringUtils_padLeftWithNSString_withInt_(placeHolder, leftPadSize_)];
    id guess = [sortedLabels getWithInt:guessI];
    for (id __strong gold in sortedLabels) {
      JavaLangInteger *value = [self getWithId:guess withId:gold];
      [ret writeWithNSString:EduStanfordNlpUtilStringUtils_padLeftWithNSString_withInt_([((JavaLangInteger *) nil_chk(value)) description], delimPadSize_)];
    }
    [ret writeWithNSString:EduStanfordNlpUtilStringUtils_padLeftWithNSString_withInt_([((JavaLangInteger *) nil_chk(EduStanfordNlpUtilConfusionMatrix_guessMarginalWithId_(self, guess))) description], delimPadSize_)];
    [ret writeWithNSString:@"\n"];
  }
  [ret writeWithNSString:EduStanfordNlpUtilStringUtils_padLeftWithNSString_withInt_(@"Marg. (Gold)", leftPadSize_)];
  for (id __strong gold in sortedLabels) {
    [ret writeWithNSString:EduStanfordNlpUtilStringUtils_padLeftWithNSString_withInt_([((JavaLangInteger *) nil_chk(EduStanfordNlpUtilConfusionMatrix_goldMarginalWithId_(self, gold))) description], delimPadSize_)];
  }
  [ret writeWithNSString:@"\n\n"];
  for (jint labelI = 0; labelI < [sortedLabels size]; labelI++) {
    id classLabel = [sortedLabels getWithInt:labelI];
    NSString *placeHolder = [self getPlaceHolderWithInt:labelI withId:classLabel];
    [ret writeWithNSString:EduStanfordNlpUtilStringUtils_padLeftWithNSString_withInt_(placeHolder, leftPadSize_)];
    if (!useRealLabels_) {
      [ret writeWithNSString:@" = "];
      [ret writeWithNSString:[nil_chk(classLabel) description]];
    }
    [ret writeWithNSString:EduStanfordNlpUtilStringUtils_padLeftWithNSString_withInt_(@"", delimPadSize_)];
    EduStanfordNlpUtilConfusionMatrix_Contingency *contingency = [self getContingencyWithId:classLabel];
    [ret writeWithNSString:[((EduStanfordNlpUtilConfusionMatrix_Contingency *) nil_chk(contingency)) description]];
    [ret writeWithNSString:@"\n"];
  }
  return [ret description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, 9, -1, -1 },
    { NULL, "V", 0x21, 7, 10, -1, 11, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, 12, 8, -1, 13, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 14, -1, -1 },
    { NULL, "LEduStanfordNlpUtilConfusionMatrix_Contingency;", 0x1, 15, 16, -1, 17, -1, -1 },
    { NULL, "LJavaUtilList;", 0x2, -1, -1, -1, 18, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x2, 19, 16, -1, 20, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x2, 21, 16, -1, 20, -1, -1 },
    { NULL, "LNSString;", 0x1, 22, 23, -1, 24, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithJavaUtilLocale:);
  methods[2].selector = @selector(description);
  methods[3].selector = @selector(setLeftPadSizeWithInt:);
  methods[4].selector = @selector(setDelimPadSizeWithInt:);
  methods[5].selector = @selector(setUseRealLabelsWithBoolean:);
  methods[6].selector = @selector(addWithId:withId:);
  methods[7].selector = @selector(addWithId:withId:withInt:);
  methods[8].selector = @selector(getWithId:withId:);
  methods[9].selector = @selector(uniqueLabels);
  methods[10].selector = @selector(getContingencyWithId:);
  methods[11].selector = @selector(sortKeys);
  methods[12].selector = @selector(goldMarginalWithId:);
  methods[13].selector = @selector(guessMarginalWithId:);
  methods[14].selector = @selector(getPlaceHolderWithInt:withId:);
  methods[15].selector = @selector(printTable);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "CLASS_PREFIX", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 25, -1, -1 },
    { "FORMAT", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 26, -1, -1 },
    { "format_", "LJavaTextDecimalFormat;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "leftPadSize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "delimPadSize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "useRealLabels_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "confTable_", "LJavaUtilConcurrentConcurrentHashMap;", .constantValue.asLong = 0, 0x2, -1, -1, 27, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilLocale;", "toString", "setLeftPadSize", "I", "setDelimPadSize", "setUseRealLabels", "Z", "add", "LNSObject;LNSObject;", "(TU;TU;)V", "LNSObject;LNSObject;I", "(TU;TU;I)V", "get", "(TU;TU;)Ljava/lang/Integer;", "()Ljava/util/Set<TU;>;", "getContingency", "LNSObject;", "(TU;)Ledu/stanford/nlp/util/ConfusionMatrix$Contingency;", "()Ljava/util/List<TU;>;", "goldMarginal", "(TU;)Ljava/lang/Integer;", "guessMarginal", "getPlaceHolder", "ILNSObject;", "(ITU;)Ljava/lang/String;", &EduStanfordNlpUtilConfusionMatrix_CLASS_PREFIX, &EduStanfordNlpUtilConfusionMatrix_FORMAT, "Ljava/util/concurrent/ConcurrentHashMap<Ledu/stanford/nlp/util/Pair<TU;TU;>;Ljava/lang/Integer;>;", "LEduStanfordNlpUtilConfusionMatrix_Contingency;", "<U:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilConfusionMatrix = { "ConfusionMatrix", "edu.stanford.nlp.util", ptrTable, methods, fields, 7, 0x1, 16, 7, -1, 28, -1, 29, -1 };
  return &_EduStanfordNlpUtilConfusionMatrix;
}

@end

void EduStanfordNlpUtilConfusionMatrix_init(EduStanfordNlpUtilConfusionMatrix *self) {
  NSObject_init(self);
  self->leftPadSize_ = 16;
  self->delimPadSize_ = 8;
  self->useRealLabels_ = false;
  self->confTable_ = new_JavaUtilConcurrentConcurrentHashMap_init();
  self->format_ = new_JavaTextDecimalFormat_initWithNSString_(EduStanfordNlpUtilConfusionMatrix_FORMAT);
}

EduStanfordNlpUtilConfusionMatrix *new_EduStanfordNlpUtilConfusionMatrix_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilConfusionMatrix, init)
}

EduStanfordNlpUtilConfusionMatrix *create_EduStanfordNlpUtilConfusionMatrix_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilConfusionMatrix, init)
}

void EduStanfordNlpUtilConfusionMatrix_initWithJavaUtilLocale_(EduStanfordNlpUtilConfusionMatrix *self, JavaUtilLocale *locale) {
  NSObject_init(self);
  self->leftPadSize_ = 16;
  self->delimPadSize_ = 8;
  self->useRealLabels_ = false;
  self->confTable_ = new_JavaUtilConcurrentConcurrentHashMap_init();
  self->format_ = new_JavaTextDecimalFormat_initWithNSString_withJavaTextDecimalFormatSymbols_(EduStanfordNlpUtilConfusionMatrix_FORMAT, new_JavaTextDecimalFormatSymbols_initWithJavaUtilLocale_(locale));
}

EduStanfordNlpUtilConfusionMatrix *new_EduStanfordNlpUtilConfusionMatrix_initWithJavaUtilLocale_(JavaUtilLocale *locale) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilConfusionMatrix, initWithJavaUtilLocale_, locale)
}

EduStanfordNlpUtilConfusionMatrix *create_EduStanfordNlpUtilConfusionMatrix_initWithJavaUtilLocale_(JavaUtilLocale *locale) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilConfusionMatrix, initWithJavaUtilLocale_, locale)
}

id<JavaUtilList> EduStanfordNlpUtilConfusionMatrix_sortKeys(EduStanfordNlpUtilConfusionMatrix *self) {
  id<JavaUtilSet> labels = [self uniqueLabels];
  if ([((id<JavaUtilSet>) nil_chk(labels)) size] == 0) {
    return JavaUtilCollections_emptyList();
  }
  jboolean comparable = true;
  for (id __strong label in labels) {
    if (!([JavaLangComparable_class_() isInstance:label])) {
      comparable = false;
      break;
    }
  }
  if (comparable) {
    id<JavaUtilList> sorted = EduStanfordNlpUtilGenerics_newArrayList();
    for (id __strong label in labels) {
      [((id<JavaUtilList>) nil_chk(sorted)) addWithId:EduStanfordNlpUtilErasureUtils_uncheckedCastWithId_(label)];
    }
    JavaUtilCollections_sortWithJavaUtilList_(sorted);
    id<JavaUtilList> ret = EduStanfordNlpUtilGenerics_newArrayList();
    for (id __strong o in nil_chk(sorted)) {
      [((id<JavaUtilList>) nil_chk(ret)) addWithId:EduStanfordNlpUtilErasureUtils_uncheckedCastWithId_(o)];
    }
    return ret;
  }
  else {
    JavaUtilArrayList *names = new_JavaUtilArrayList_init();
    JavaUtilHashMap *lookup = new_JavaUtilHashMap_init();
    for (id __strong label in labels) {
      [names addWithId:[nil_chk(label) description]];
      (void) [lookup putWithId:[label description] withId:label];
    }
    JavaUtilCollections_sortWithJavaUtilList_(names);
    JavaUtilArrayList *ret = new_JavaUtilArrayList_init();
    for (NSString * __strong name in names) {
      [ret addWithId:[lookup getWithId:name]];
    }
    return ret;
  }
}

JavaLangInteger *EduStanfordNlpUtilConfusionMatrix_goldMarginalWithId_(EduStanfordNlpUtilConfusionMatrix *self, id gold) {
  JavaLangInteger *sum = JavaLangInteger_valueOfWithInt_(0);
  id<JavaUtilSet> labels = [self uniqueLabels];
  for (id __strong guess in nil_chk(labels)) {
    (void) JreBoxedPlusAssignStrongInt(&sum, [((JavaLangInteger *) nil_chk([self getWithId:guess withId:gold])) intValue]);
  }
  return sum;
}

JavaLangInteger *EduStanfordNlpUtilConfusionMatrix_guessMarginalWithId_(EduStanfordNlpUtilConfusionMatrix *self, id guess) {
  JavaLangInteger *sum = JavaLangInteger_valueOfWithInt_(0);
  id<JavaUtilSet> labels = [self uniqueLabels];
  for (id __strong gold in nil_chk(labels)) {
    (void) JreBoxedPlusAssignStrongInt(&sum, [((JavaLangInteger *) nil_chk([self getWithId:guess withId:gold])) intValue]);
  }
  return sum;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpUtilConfusionMatrix)

@implementation EduStanfordNlpUtilConfusionMatrix_Contingency

- (instancetype)initWithEduStanfordNlpUtilConfusionMatrix:(EduStanfordNlpUtilConfusionMatrix *)outer$
                                                  withInt:(jint)tp_Arg
                                                  withInt:(jint)fp_Arg
                                                  withInt:(jint)tn_Arg
                                                  withInt:(jint)fn_Arg {
  EduStanfordNlpUtilConfusionMatrix_Contingency_initWithEduStanfordNlpUtilConfusionMatrix_withInt_withInt_withInt_withInt_(self, outer$, tp_Arg, fp_Arg, tn_Arg, fn_Arg);
  return self;
}

- (NSString *)description {
  return EduStanfordNlpUtilStringUtils_joinWithJavaLangIterable_withNSString_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ JreStrcat("$$", @"prec=", (((tp_ + fp_) > 0) ? [((JavaTextDecimalFormat *) nil_chk(this$0_->format_)) formatWithDouble:prec_] : @"n/a")), JreStrcat("$$", @"recall=", (((tp_ + fn_) > 0) ? [((JavaTextDecimalFormat *) nil_chk(this$0_->format_)) formatWithDouble:recall_] : @"n/a")), JreStrcat("$$", @"spec=", (((fp_ + tn_) > 0) ? [((JavaTextDecimalFormat *) nil_chk(this$0_->format_)) formatWithDouble:spec_] : @"n/a")), JreStrcat("$$", @"f1=", (((prec_ + recall_) > 0) ? [((JavaTextDecimalFormat *) nil_chk(this$0_->format_)) formatWithDouble:f1_] : @"n/a")) } count:4 type:NSString_class_()]), @", ");
}

- (jdouble)f1 {
  return f1_;
}

- (jdouble)precision {
  return prec_;
}

- (jdouble)recall {
  return recall_;
}

- (jdouble)spec {
  return spec_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpUtilConfusionMatrix:withInt:withInt:withInt:withInt:);
  methods[1].selector = @selector(description);
  methods[2].selector = @selector(f1);
  methods[3].selector = @selector(precision);
  methods[4].selector = @selector(recall);
  methods[5].selector = @selector(spec);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LEduStanfordNlpUtilConfusionMatrix;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "tp_", "D", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "fp_", "D", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "tn_", "D", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "fn_", "D", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "prec_", "D", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "recall_", "D", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "spec_", "D", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "f1_", "D", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpUtilConfusionMatrix;IIII", "toString", "LEduStanfordNlpUtilConfusionMatrix;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilConfusionMatrix_Contingency = { "Contingency", "edu.stanford.nlp.util", ptrTable, methods, fields, 7, 0x1, 6, 9, 2, -1, -1, -1, -1 };
  return &_EduStanfordNlpUtilConfusionMatrix_Contingency;
}

@end

void EduStanfordNlpUtilConfusionMatrix_Contingency_initWithEduStanfordNlpUtilConfusionMatrix_withInt_withInt_withInt_withInt_(EduStanfordNlpUtilConfusionMatrix_Contingency *self, EduStanfordNlpUtilConfusionMatrix *outer$, jint tp_Arg, jint fp_Arg, jint tn_Arg, jint fn_Arg) {
  self->this$0_ = outer$;
  NSObject_init(self);
  self->tp_ = 0;
  self->fp_ = 0;
  self->tn_ = 0;
  self->fn_ = 0;
  self->prec_ = 0.0;
  self->recall_ = 0.0;
  self->spec_ = 0.0;
  self->f1_ = 0.0;
  self->tp_ = tp_Arg;
  self->fp_ = fp_Arg;
  self->tn_ = tn_Arg;
  self->fn_ = fn_Arg;
  self->prec_ = self->tp_ / (self->tp_ + self->fp_);
  self->recall_ = self->tp_ / (self->tp_ + self->fn_);
  self->spec_ = self->tn_ / (self->fp_ + self->tn_);
  self->f1_ = (2 * self->prec_ * self->recall_) / (self->prec_ + self->recall_);
}

EduStanfordNlpUtilConfusionMatrix_Contingency *new_EduStanfordNlpUtilConfusionMatrix_Contingency_initWithEduStanfordNlpUtilConfusionMatrix_withInt_withInt_withInt_withInt_(EduStanfordNlpUtilConfusionMatrix *outer$, jint tp_Arg, jint fp_Arg, jint tn_Arg, jint fn_Arg) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilConfusionMatrix_Contingency, initWithEduStanfordNlpUtilConfusionMatrix_withInt_withInt_withInt_withInt_, outer$, tp_Arg, fp_Arg, tn_Arg, fn_Arg)
}

EduStanfordNlpUtilConfusionMatrix_Contingency *create_EduStanfordNlpUtilConfusionMatrix_Contingency_initWithEduStanfordNlpUtilConfusionMatrix_withInt_withInt_withInt_withInt_(EduStanfordNlpUtilConfusionMatrix *outer$, jint tp_Arg, jint fp_Arg, jint tn_Arg, jint fn_Arg) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilConfusionMatrix_Contingency, initWithEduStanfordNlpUtilConfusionMatrix_withInt_withInt_withInt_withInt_, outer$, tp_Arg, fp_Arg, tn_Arg, fn_Arg)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpUtilConfusionMatrix_Contingency)
