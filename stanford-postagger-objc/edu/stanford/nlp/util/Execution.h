//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/util/Execution.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_EduStanfordNlpUtilExecution")
#ifdef RESTRICT_EduStanfordNlpUtilExecution
#define INCLUDE_ALL_EduStanfordNlpUtilExecution 0
#else
#define INCLUDE_ALL_EduStanfordNlpUtilExecution 1
#endif
#undef RESTRICT_EduStanfordNlpUtilExecution

#if !defined (EduStanfordNlpUtilExecution_) && (INCLUDE_ALL_EduStanfordNlpUtilExecution || defined(INCLUDE_EduStanfordNlpUtilExecution))
#define EduStanfordNlpUtilExecution_

@class IOSClass;
@class IOSObjectArray;
@class JavaUtilProperties;
@protocol JavaLangRunnable;
@protocol JavaUtilMap;

@interface EduStanfordNlpUtilExecution : NSObject

#pragma mark Public

- (instancetype)init;

+ (void)execWithJavaLangRunnable:(id<JavaLangRunnable>)toRun;

+ (void)execWithJavaLangRunnable:(id<JavaLangRunnable>)toRun
               withIOSClassArray:(IOSObjectArray *)optionClasses;

+ (void)execWithJavaLangRunnable:(id<JavaLangRunnable>)toRun
          withJavaUtilProperties:(JavaUtilProperties *)options;

+ (void)execWithJavaLangRunnable:(id<JavaLangRunnable>)toRun
          withJavaUtilProperties:(JavaUtilProperties *)options
                     withBoolean:(jboolean)exit;

+ (void)execWithJavaLangRunnable:(id<JavaLangRunnable>)toRun
               withNSStringArray:(IOSObjectArray *)args;

+ (void)execWithJavaLangRunnable:(id<JavaLangRunnable>)toRun
               withNSStringArray:(IOSObjectArray *)args
                     withBoolean:(jboolean)exit;

+ (void)execWithJavaLangRunnable:(id<JavaLangRunnable>)toRun
               withNSStringArray:(IOSObjectArray *)args
               withIOSClassArray:(IOSObjectArray *)optionClasses;

+ (void)execWithJavaLangRunnable:(id<JavaLangRunnable>)toRun
               withNSStringArray:(IOSObjectArray *)args
               withIOSClassArray:(IOSObjectArray *)optionClasses
                     withBoolean:(jboolean)exit;

+ (void)fillOptionsWithIOSClass:(IOSClass *)clazz
         withJavaUtilProperties:(JavaUtilProperties *)options;

+ (void)fillOptionsWithIOSClass:(IOSClass *)clazz
              withNSStringArray:(IOSObjectArray *)args;

+ (void)fillOptionsWithIOSClassArray:(IOSObjectArray *)classes
              withJavaUtilProperties:(JavaUtilProperties *)options;

+ (void)fillOptionsWithIOSClassArray:(IOSObjectArray *)optionClasses
              withJavaUtilProperties:(JavaUtilProperties *)props
                   withNSStringArray:(IOSObjectArray *)args;

+ (void)fillOptionsWithIOSClassArray:(IOSObjectArray *)classes
                   withNSStringArray:(IOSObjectArray *)args;

+ (void)fillOptionsWithId:(id)instance
   withJavaUtilProperties:(JavaUtilProperties *)options;

+ (void)fillOptionsWithId:(id)instance
        withNSStringArray:(IOSObjectArray *)args;

+ (void)fillOptionsWithNSObjectArray:(IOSObjectArray *)instances
              withJavaUtilProperties:(JavaUtilProperties *)options;

+ (void)fillOptionsWithNSObjectArray:(IOSObjectArray *)instances
                   withNSStringArray:(IOSObjectArray *)args;

+ (void)fillOptionsWithJavaUtilProperties:(JavaUtilProperties *)props;

+ (void)fillOptionsWithJavaUtilProperties:(JavaUtilProperties *)props
                        withNSStringArray:(IOSObjectArray *)args;

+ (IOSObjectArray *)getVisibleClasses;

+ (void)usageAndExitWithJavaUtilMap:(id<JavaUtilMap>)argToFlagsMap;

+ (void)usageAndExitWithNSStringArray:(IOSObjectArray *)expectedArgs;

#pragma mark Protected

+ (id<JavaUtilMap>)fillOptionsImplWithNSObjectArray:(IOSObjectArray *)instances
                                  withIOSClassArray:(IOSObjectArray *)classes
                             withJavaUtilProperties:(JavaUtilProperties *)options;

+ (id<JavaUtilMap>)fillOptionsImplWithNSObjectArray:(IOSObjectArray *)instances
                                  withIOSClassArray:(IOSObjectArray *)classes
                             withJavaUtilProperties:(JavaUtilProperties *)options
                                        withBoolean:(jboolean)ensureAllOptions;

@end

J2OBJC_STATIC_INIT(EduStanfordNlpUtilExecution)

inline IOSObjectArray *EduStanfordNlpUtilExecution_get_optionClasses();
inline IOSObjectArray *EduStanfordNlpUtilExecution_set_optionClasses(IOSObjectArray *value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *EduStanfordNlpUtilExecution_optionClasses;
J2OBJC_STATIC_FIELD_OBJ(EduStanfordNlpUtilExecution, optionClasses, IOSObjectArray *)

inline jint EduStanfordNlpUtilExecution_get_threads();
inline jint EduStanfordNlpUtilExecution_set_threads(jint value);
inline jint *EduStanfordNlpUtilExecution_getRef_threads();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jint EduStanfordNlpUtilExecution_threads;
J2OBJC_STATIC_FIELD_PRIMITIVE(EduStanfordNlpUtilExecution, threads, jint)

inline NSString *EduStanfordNlpUtilExecution_get_host();
inline NSString *EduStanfordNlpUtilExecution_set_host(NSString *value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *EduStanfordNlpUtilExecution_host;
J2OBJC_STATIC_FIELD_OBJ(EduStanfordNlpUtilExecution, host, NSString *)

FOUNDATION_EXPORT IOSObjectArray *EduStanfordNlpUtilExecution_getVisibleClasses();

FOUNDATION_EXPORT id<JavaUtilMap> EduStanfordNlpUtilExecution_fillOptionsImplWithNSObjectArray_withIOSClassArray_withJavaUtilProperties_withBoolean_(IOSObjectArray *instances, IOSObjectArray *classes, JavaUtilProperties *options, jboolean ensureAllOptions);

FOUNDATION_EXPORT id<JavaUtilMap> EduStanfordNlpUtilExecution_fillOptionsImplWithNSObjectArray_withIOSClassArray_withJavaUtilProperties_(IOSObjectArray *instances, IOSObjectArray *classes, JavaUtilProperties *options);

FOUNDATION_EXPORT void EduStanfordNlpUtilExecution_fillOptionsWithIOSClassArray_withJavaUtilProperties_(IOSObjectArray *classes, JavaUtilProperties *options);

FOUNDATION_EXPORT void EduStanfordNlpUtilExecution_fillOptionsWithIOSClass_withJavaUtilProperties_(IOSClass *clazz, JavaUtilProperties *options);

FOUNDATION_EXPORT void EduStanfordNlpUtilExecution_fillOptionsWithJavaUtilProperties_withNSStringArray_(JavaUtilProperties *props, IOSObjectArray *args);

FOUNDATION_EXPORT void EduStanfordNlpUtilExecution_fillOptionsWithIOSClassArray_withJavaUtilProperties_withNSStringArray_(IOSObjectArray *optionClasses, JavaUtilProperties *props, IOSObjectArray *args);

FOUNDATION_EXPORT void EduStanfordNlpUtilExecution_fillOptionsWithJavaUtilProperties_(JavaUtilProperties *props);

FOUNDATION_EXPORT void EduStanfordNlpUtilExecution_fillOptionsWithIOSClassArray_withNSStringArray_(IOSObjectArray *classes, IOSObjectArray *args);

FOUNDATION_EXPORT void EduStanfordNlpUtilExecution_fillOptionsWithIOSClass_withNSStringArray_(IOSClass *clazz, IOSObjectArray *args);

FOUNDATION_EXPORT void EduStanfordNlpUtilExecution_fillOptionsWithNSObjectArray_withJavaUtilProperties_(IOSObjectArray *instances, JavaUtilProperties *options);

FOUNDATION_EXPORT void EduStanfordNlpUtilExecution_fillOptionsWithId_withJavaUtilProperties_(id instance, JavaUtilProperties *options);

FOUNDATION_EXPORT void EduStanfordNlpUtilExecution_fillOptionsWithNSObjectArray_withNSStringArray_(IOSObjectArray *instances, IOSObjectArray *args);

FOUNDATION_EXPORT void EduStanfordNlpUtilExecution_fillOptionsWithId_withNSStringArray_(id instance, IOSObjectArray *args);

FOUNDATION_EXPORT void EduStanfordNlpUtilExecution_execWithJavaLangRunnable_(id<JavaLangRunnable> toRun);

FOUNDATION_EXPORT void EduStanfordNlpUtilExecution_execWithJavaLangRunnable_withIOSClassArray_(id<JavaLangRunnable> toRun, IOSObjectArray *optionClasses);

FOUNDATION_EXPORT void EduStanfordNlpUtilExecution_execWithJavaLangRunnable_withNSStringArray_(id<JavaLangRunnable> toRun, IOSObjectArray *args);

FOUNDATION_EXPORT void EduStanfordNlpUtilExecution_execWithJavaLangRunnable_withNSStringArray_withIOSClassArray_(id<JavaLangRunnable> toRun, IOSObjectArray *args, IOSObjectArray *optionClasses);

FOUNDATION_EXPORT void EduStanfordNlpUtilExecution_execWithJavaLangRunnable_withNSStringArray_withIOSClassArray_withBoolean_(id<JavaLangRunnable> toRun, IOSObjectArray *args, IOSObjectArray *optionClasses, jboolean exit);

FOUNDATION_EXPORT void EduStanfordNlpUtilExecution_execWithJavaLangRunnable_withNSStringArray_withBoolean_(id<JavaLangRunnable> toRun, IOSObjectArray *args, jboolean exit);

FOUNDATION_EXPORT void EduStanfordNlpUtilExecution_execWithJavaLangRunnable_withJavaUtilProperties_(id<JavaLangRunnable> toRun, JavaUtilProperties *options);

FOUNDATION_EXPORT void EduStanfordNlpUtilExecution_execWithJavaLangRunnable_withJavaUtilProperties_withBoolean_(id<JavaLangRunnable> toRun, JavaUtilProperties *options, jboolean exit);

FOUNDATION_EXPORT void EduStanfordNlpUtilExecution_usageAndExitWithNSStringArray_(IOSObjectArray *expectedArgs);

FOUNDATION_EXPORT void EduStanfordNlpUtilExecution_usageAndExitWithJavaUtilMap_(id<JavaUtilMap> argToFlagsMap);

FOUNDATION_EXPORT void EduStanfordNlpUtilExecution_init(EduStanfordNlpUtilExecution *self);

FOUNDATION_EXPORT EduStanfordNlpUtilExecution *new_EduStanfordNlpUtilExecution_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EduStanfordNlpUtilExecution *create_EduStanfordNlpUtilExecution_init();

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpUtilExecution)

#endif

#if !defined (EduStanfordNlpUtilExecution_Option_) && (INCLUDE_ALL_EduStanfordNlpUtilExecution || defined(INCLUDE_EduStanfordNlpUtilExecution_Option))
#define EduStanfordNlpUtilExecution_Option_

#define RESTRICT_JavaLangAnnotationAnnotation 1
#define INCLUDE_JavaLangAnnotationAnnotation 1
#include "java/lang/annotation/Annotation.h"

@class IOSClass;

@protocol EduStanfordNlpUtilExecution_Option < JavaLangAnnotationAnnotation >

@property (readonly) NSString *name;
@property (readonly) NSString *gloss;
@property (readonly) jboolean required;
@property (readonly) NSString *alt;

@end

@interface EduStanfordNlpUtilExecution_Option : NSObject < EduStanfordNlpUtilExecution_Option > {
 @public
  NSString *name_;
  NSString *gloss_;
  jboolean required_;
  NSString *alt_;
}

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpUtilExecution_Option)

FOUNDATION_EXPORT id<EduStanfordNlpUtilExecution_Option> create_EduStanfordNlpUtilExecution_Option(NSString *alt, NSString *gloss, NSString *name, jboolean required);

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpUtilExecution_Option)

#endif

#if !defined (EduStanfordNlpUtilExecution_LazyFileIterator_) && (INCLUDE_ALL_EduStanfordNlpUtilExecution || defined(INCLUDE_EduStanfordNlpUtilExecution_LazyFileIterator))
#define EduStanfordNlpUtilExecution_LazyFileIterator_

#define RESTRICT_JavaUtilIterator 1
#define INCLUDE_JavaUtilIterator 1
#include "java/util/Iterator.h"

@class JavaIoFile;
@protocol JavaIoFilenameFilter;
@protocol JavaUtilFunctionConsumer;

@interface EduStanfordNlpUtilExecution_LazyFileIterator : NSObject < JavaUtilIterator >

#pragma mark Public

- (instancetype)initWithJavaIoFile:(JavaIoFile *)dir
          withJavaIoFilenameFilter:(id<JavaIoFilenameFilter>)filter;

- (instancetype)initWithJavaIoFile:(JavaIoFile *)path
                      withNSString:(NSString *)filter;

- (jboolean)hasNext;

- (JavaIoFile *)next;

- (void)remove;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpUtilExecution_LazyFileIterator)

FOUNDATION_EXPORT void EduStanfordNlpUtilExecution_LazyFileIterator_initWithJavaIoFile_withNSString_(EduStanfordNlpUtilExecution_LazyFileIterator *self, JavaIoFile *path, NSString *filter);

FOUNDATION_EXPORT EduStanfordNlpUtilExecution_LazyFileIterator *new_EduStanfordNlpUtilExecution_LazyFileIterator_initWithJavaIoFile_withNSString_(JavaIoFile *path, NSString *filter) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EduStanfordNlpUtilExecution_LazyFileIterator *create_EduStanfordNlpUtilExecution_LazyFileIterator_initWithJavaIoFile_withNSString_(JavaIoFile *path, NSString *filter);

FOUNDATION_EXPORT void EduStanfordNlpUtilExecution_LazyFileIterator_initWithJavaIoFile_withJavaIoFilenameFilter_(EduStanfordNlpUtilExecution_LazyFileIterator *self, JavaIoFile *dir, id<JavaIoFilenameFilter> filter);

FOUNDATION_EXPORT EduStanfordNlpUtilExecution_LazyFileIterator *new_EduStanfordNlpUtilExecution_LazyFileIterator_initWithJavaIoFile_withJavaIoFilenameFilter_(JavaIoFile *dir, id<JavaIoFilenameFilter> filter) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EduStanfordNlpUtilExecution_LazyFileIterator *create_EduStanfordNlpUtilExecution_LazyFileIterator_initWithJavaIoFile_withJavaIoFilenameFilter_(JavaIoFile *dir, id<JavaIoFilenameFilter> filter);

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpUtilExecution_LazyFileIterator)

#endif

#pragma pop_macro("INCLUDE_ALL_EduStanfordNlpUtilExecution")
