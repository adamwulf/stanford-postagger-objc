//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/util/IntPair.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/util/IntPair.h"
#include "edu/stanford/nlp/util/IntTuple.h"

inline jlong EduStanfordNlpUtilIntPair_get_serialVersionUID();
#define EduStanfordNlpUtilIntPair_serialVersionUID 1LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpUtilIntPair, serialVersionUID, jlong)

@implementation EduStanfordNlpUtilIntPair

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpUtilIntPair_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithInt:(jint)src
                    withInt:(jint)trgt {
  EduStanfordNlpUtilIntPair_initWithInt_withInt_(self, src, trgt);
  return self;
}

- (jint)getSource {
  return [self getWithInt:0];
}

- (jint)getTarget {
  return [self getWithInt:1];
}

- (EduStanfordNlpUtilIntTuple *)getCopy {
  return new_EduStanfordNlpUtilIntPair_initWithInt_withInt_(IOSIntArray_Get(nil_chk(elements_), 0), IOSIntArray_Get(elements_, 1));
}

- (jboolean)isEqual:(id)iO {
  if (!([iO isKindOfClass:[EduStanfordNlpUtilIntPair class]])) {
    return false;
  }
  EduStanfordNlpUtilIntPair *i = (EduStanfordNlpUtilIntPair *) cast_chk(iO, [EduStanfordNlpUtilIntPair class]);
  return IOSIntArray_Get(nil_chk(elements_), 0) == [((EduStanfordNlpUtilIntPair *) nil_chk(i)) getWithInt:0] && IOSIntArray_Get(elements_, 1) == [i getWithInt:1];
}

- (NSUInteger)hash {
  return IOSIntArray_Get(nil_chk(elements_), 0) * 17 + IOSIntArray_Get(elements_, 1);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpUtilIntTuple;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithInt:withInt:);
  methods[2].selector = @selector(getSource);
  methods[3].selector = @selector(getTarget);
  methods[4].selector = @selector(getCopy);
  methods[5].selector = @selector(isEqual:);
  methods[6].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpUtilIntPair_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "II", "equals", "LNSObject;", "hashCode" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilIntPair = { "IntPair", "edu.stanford.nlp.util", ptrTable, methods, fields, 7, 0x1, 7, 1, -1, -1, -1, -1, -1 };
  return &_EduStanfordNlpUtilIntPair;
}

@end

void EduStanfordNlpUtilIntPair_init(EduStanfordNlpUtilIntPair *self) {
  EduStanfordNlpUtilIntTuple_initWithInt_(self, 2);
}

EduStanfordNlpUtilIntPair *new_EduStanfordNlpUtilIntPair_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilIntPair, init)
}

EduStanfordNlpUtilIntPair *create_EduStanfordNlpUtilIntPair_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilIntPair, init)
}

void EduStanfordNlpUtilIntPair_initWithInt_withInt_(EduStanfordNlpUtilIntPair *self, jint src, jint trgt) {
  EduStanfordNlpUtilIntTuple_initWithInt_(self, 2);
  *IOSIntArray_GetRef(nil_chk(self->elements_), 0) = src;
  *IOSIntArray_GetRef(self->elements_, 1) = trgt;
}

EduStanfordNlpUtilIntPair *new_EduStanfordNlpUtilIntPair_initWithInt_withInt_(jint src, jint trgt) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilIntPair, initWithInt_withInt_, src, trgt)
}

EduStanfordNlpUtilIntPair *create_EduStanfordNlpUtilIntPair_initWithInt_withInt_(jint src, jint trgt) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilIntPair, initWithInt_withInt_, src, trgt)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpUtilIntPair)
