//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/util/Timing.java
//

#include "J2ObjC_source.h"
#include "edu/stanford/nlp/util/Timing.h"
#include "java/io/PrintStream.h"
#include "java/io/PrintWriter.h"
#include "java/lang/System.h"
#include "java/text/DecimalFormat.h"
#include "java/text/NumberFormat.h"

@interface EduStanfordNlpUtilTiming () {
 @public
  jlong start_;
}

@end

inline jlong EduStanfordNlpUtilTiming_get_MILLISECONDS_TO_SECONDS();
#define EduStanfordNlpUtilTiming_MILLISECONDS_TO_SECONDS 1000LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpUtilTiming, MILLISECONDS_TO_SECONDS, jlong)

inline jlong EduStanfordNlpUtilTiming_get_SECOND_DIVISOR();
#define EduStanfordNlpUtilTiming_SECOND_DIVISOR 1000000000LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpUtilTiming, SECOND_DIVISOR, jlong)

inline jlong EduStanfordNlpUtilTiming_get_MILLISECOND_DIVISOR();
#define EduStanfordNlpUtilTiming_MILLISECOND_DIVISOR 1000000LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpUtilTiming, MILLISECOND_DIVISOR, jlong)

inline jlong EduStanfordNlpUtilTiming_get_startTime_();
inline jlong EduStanfordNlpUtilTiming_set_startTime_(jlong value);
inline jlong *EduStanfordNlpUtilTiming_getRef_startTime_();
static jlong EduStanfordNlpUtilTiming_startTime_;
J2OBJC_STATIC_FIELD_PRIMITIVE(EduStanfordNlpUtilTiming, startTime_, jlong)

inline JavaTextNumberFormat *EduStanfordNlpUtilTiming_get_nf();
static JavaTextNumberFormat *EduStanfordNlpUtilTiming_nf;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpUtilTiming, nf, JavaTextNumberFormat *)

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpUtilTiming)

@implementation EduStanfordNlpUtilTiming

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpUtilTiming_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)start {
  start_ = JavaLangSystem_nanoTime();
}

- (void)startWithNSString:(NSString *)msg
    withJavaIoPrintStream:(JavaIoPrintStream *)stream {
  start_ = JavaLangSystem_nanoTime();
  [((JavaIoPrintStream *) nil_chk(stream)) printlnWithNSString:msg];
}

- (void)startWithNSString:(NSString *)msg {
  [self startWithNSString:msg withJavaIoPrintStream:JreLoadStatic(JavaLangSystem, err)];
}

- (jlong)report {
  return (JavaLangSystem_nanoTime() - start_) / EduStanfordNlpUtilTiming_MILLISECOND_DIVISOR;
}

- (jlong)reportNano {
  return JavaLangSystem_nanoTime() - start_;
}

- (jlong)reportWithNSString:(NSString *)str
      withJavaIoPrintStream:(JavaIoPrintStream *)stream {
  jlong elapsed = [self report];
  [((JavaIoPrintStream *) nil_chk(stream)) printlnWithNSString:JreStrcat("$$J$", str, @" Time elapsed: ", elapsed, @" ms")];
  return elapsed;
}

- (jlong)reportWithNSString:(NSString *)str {
  return [self reportWithNSString:str withJavaIoPrintStream:JreLoadStatic(JavaLangSystem, err)];
}

- (jlong)reportWithNSString:(NSString *)str
      withJavaIoPrintWriter:(JavaIoPrintWriter *)writer {
  jlong elapsed = [self report];
  [((JavaIoPrintWriter *) nil_chk(writer)) printlnWithNSString:JreStrcat("$$J$", str, @" Time elapsed: ", (elapsed), @" ms")];
  return elapsed;
}

- (NSString *)toSecondsString {
  return EduStanfordNlpUtilTiming_toSecondsStringWithLong_([self report]);
}

+ (NSString *)toSecondsStringWithLong:(jlong)elapsed {
  return EduStanfordNlpUtilTiming_toSecondsStringWithLong_(elapsed);
}

+ (NSString *)toMilliSecondsStringWithLong:(jlong)elapsed {
  return EduStanfordNlpUtilTiming_toMilliSecondsStringWithLong_(elapsed);
}

- (jlong)restart {
  jlong elapsed = [self report];
  [self start];
  return elapsed;
}

- (jlong)restartWithNSString:(NSString *)str
       withJavaIoPrintStream:(JavaIoPrintStream *)stream {
  jlong elapsed = [self reportWithNSString:str withJavaIoPrintStream:stream];
  [self start];
  return elapsed;
}

- (jlong)restartWithNSString:(NSString *)str {
  return [self restartWithNSString:str withJavaIoPrintStream:JreLoadStatic(JavaLangSystem, err)];
}

- (jlong)restartWithNSString:(NSString *)str
       withJavaIoPrintWriter:(JavaIoPrintWriter *)writer {
  jlong elapsed = [self reportWithNSString:str withJavaIoPrintWriter:writer];
  [self start];
  return elapsed;
}

- (void)endWithNSString:(NSString *)msg {
  jlong elapsed = JavaLangSystem_nanoTime() - start_;
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$$$", msg, @" done [", [((JavaTextNumberFormat *) nil_chk(EduStanfordNlpUtilTiming_nf)) formatWithDouble:((jdouble) elapsed) / EduStanfordNlpUtilTiming_SECOND_DIVISOR], @" sec].")];
  [self start];
}

- (jlong)stop {
  jlong elapsed = [self report];
  self->start_ = 0;
  return elapsed;
}

- (jlong)stopWithNSString:(NSString *)str
    withJavaIoPrintStream:(JavaIoPrintStream *)stream {
  [self reportWithNSString:str withJavaIoPrintStream:stream];
  return [self stop];
}

- (jlong)stopWithNSString:(NSString *)str {
  return [self stopWithNSString:str withJavaIoPrintStream:JreLoadStatic(JavaLangSystem, err)];
}

- (jlong)stopWithNSString:(NSString *)str
    withJavaIoPrintWriter:(JavaIoPrintWriter *)writer {
  [self reportWithNSString:str withJavaIoPrintWriter:writer];
  return [self stop];
}

+ (void)startTime {
  EduStanfordNlpUtilTiming_startTime();
}

+ (jlong)endTime {
  return EduStanfordNlpUtilTiming_endTime();
}

+ (jlong)endTimeWithNSString:(NSString *)str
       withJavaIoPrintStream:(JavaIoPrintStream *)stream {
  return EduStanfordNlpUtilTiming_endTimeWithNSString_withJavaIoPrintStream_(str, stream);
}

+ (jlong)endTimeWithNSString:(NSString *)str {
  return EduStanfordNlpUtilTiming_endTimeWithNSString_(str);
}

- (void)doingWithNSString:(NSString *)str {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printWithNSString:str];
  [JreLoadStatic(JavaLangSystem, err) printWithNSString:@" ... "];
  [JreLoadStatic(JavaLangSystem, err) flush];
  [self start];
}

- (void)done {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$$", @"done [", [self toSecondsString], @" sec].")];
}

- (void)doneWithNSString:(NSString *)msg {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$$$", msg, @" done [", [self toSecondsString], @" sec].")];
}

+ (void)startDoingWithNSString:(NSString *)str {
  EduStanfordNlpUtilTiming_startDoingWithNSString_(str);
}

+ (void)endDoing {
  EduStanfordNlpUtilTiming_endDoing();
}

+ (void)endDoingWithNSString:(NSString *)msg {
  EduStanfordNlpUtilTiming_endDoingWithNSString_(msg);
}

+ (jlong)tick {
  return EduStanfordNlpUtilTiming_tick();
}

+ (jlong)tickWithNSString:(NSString *)str
    withJavaIoPrintStream:(JavaIoPrintStream *)stream {
  return EduStanfordNlpUtilTiming_tickWithNSString_withJavaIoPrintStream_(str, stream);
}

+ (jlong)tickWithNSString:(NSString *)str {
  return EduStanfordNlpUtilTiming_tickWithNSString_(str);
}

- (NSString *)description {
  return JreStrcat("$JC", @"Timing[start=", EduStanfordNlpUtilTiming_startTime_, ']');
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 2, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 3, 1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 5, 6, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 7, 6, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 8, 1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 8, 2, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 8, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 2, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 10, 1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 10, 2, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 10, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 11, 1, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 11, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 14, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 15, 2, -1, -1, -1, -1 },
    { NULL, "J", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 16, 1, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 16, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 17, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(start);
  methods[2].selector = @selector(startWithNSString:withJavaIoPrintStream:);
  methods[3].selector = @selector(startWithNSString:);
  methods[4].selector = @selector(report);
  methods[5].selector = @selector(reportNano);
  methods[6].selector = @selector(reportWithNSString:withJavaIoPrintStream:);
  methods[7].selector = @selector(reportWithNSString:);
  methods[8].selector = @selector(reportWithNSString:withJavaIoPrintWriter:);
  methods[9].selector = @selector(toSecondsString);
  methods[10].selector = @selector(toSecondsStringWithLong:);
  methods[11].selector = @selector(toMilliSecondsStringWithLong:);
  methods[12].selector = @selector(restart);
  methods[13].selector = @selector(restartWithNSString:withJavaIoPrintStream:);
  methods[14].selector = @selector(restartWithNSString:);
  methods[15].selector = @selector(restartWithNSString:withJavaIoPrintWriter:);
  methods[16].selector = @selector(endWithNSString:);
  methods[17].selector = @selector(stop);
  methods[18].selector = @selector(stopWithNSString:withJavaIoPrintStream:);
  methods[19].selector = @selector(stopWithNSString:);
  methods[20].selector = @selector(stopWithNSString:withJavaIoPrintWriter:);
  methods[21].selector = @selector(startTime);
  methods[22].selector = @selector(endTime);
  methods[23].selector = @selector(endTimeWithNSString:withJavaIoPrintStream:);
  methods[24].selector = @selector(endTimeWithNSString:);
  methods[25].selector = @selector(doingWithNSString:);
  methods[26].selector = @selector(done);
  methods[27].selector = @selector(doneWithNSString:);
  methods[28].selector = @selector(startDoingWithNSString:);
  methods[29].selector = @selector(endDoing);
  methods[30].selector = @selector(endDoingWithNSString:);
  methods[31].selector = @selector(tick);
  methods[32].selector = @selector(tickWithNSString:withJavaIoPrintStream:);
  methods[33].selector = @selector(tickWithNSString:);
  methods[34].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "MILLISECONDS_TO_SECONDS", "J", .constantValue.asLong = EduStanfordNlpUtilTiming_MILLISECONDS_TO_SECONDS, 0x1a, -1, -1, -1, -1 },
    { "SECOND_DIVISOR", "J", .constantValue.asLong = EduStanfordNlpUtilTiming_SECOND_DIVISOR, 0x1a, -1, -1, -1, -1 },
    { "MILLISECOND_DIVISOR", "J", .constantValue.asLong = EduStanfordNlpUtilTiming_MILLISECOND_DIVISOR, 0x1a, -1, -1, -1, -1 },
    { "start_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "startTime_", "J", .constantValue.asLong = 0, 0xa, 18, 19, -1, -1 },
    { "nf", "LJavaTextNumberFormat;", .constantValue.asLong = 0, 0x1a, -1, 20, -1, -1 },
  };
  static const void *ptrTable[] = { "start", "LNSString;LJavaIoPrintStream;", "LNSString;", "report", "LNSString;LJavaIoPrintWriter;", "toSecondsString", "J", "toMilliSecondsString", "restart", "end", "stop", "endTime", "doing", "done", "startDoing", "endDoing", "tick", "toString", "startTime", &EduStanfordNlpUtilTiming_startTime_, &EduStanfordNlpUtilTiming_nf };
  static const J2ObjcClassInfo _EduStanfordNlpUtilTiming = { "Timing", "edu.stanford.nlp.util", ptrTable, methods, fields, 7, 0x1, 35, 6, -1, -1, -1, -1, -1 };
  return &_EduStanfordNlpUtilTiming;
}

+ (void)initialize {
  if (self == [EduStanfordNlpUtilTiming class]) {
    EduStanfordNlpUtilTiming_startTime_ = JavaLangSystem_nanoTime();
    EduStanfordNlpUtilTiming_nf = new_JavaTextDecimalFormat_initWithNSString_(@"0.0");
    J2OBJC_SET_INITIALIZED(EduStanfordNlpUtilTiming)
  }
}

@end

void EduStanfordNlpUtilTiming_init(EduStanfordNlpUtilTiming *self) {
  NSObject_init(self);
  [self start];
}

EduStanfordNlpUtilTiming *new_EduStanfordNlpUtilTiming_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilTiming, init)
}

EduStanfordNlpUtilTiming *create_EduStanfordNlpUtilTiming_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilTiming, init)
}

NSString *EduStanfordNlpUtilTiming_toSecondsStringWithLong_(jlong elapsed) {
  EduStanfordNlpUtilTiming_initialize();
  return [((JavaTextNumberFormat *) nil_chk(EduStanfordNlpUtilTiming_nf)) formatWithDouble:((jdouble) elapsed) / EduStanfordNlpUtilTiming_MILLISECONDS_TO_SECONDS];
}

NSString *EduStanfordNlpUtilTiming_toMilliSecondsStringWithLong_(jlong elapsed) {
  EduStanfordNlpUtilTiming_initialize();
  return [((JavaTextNumberFormat *) nil_chk(EduStanfordNlpUtilTiming_nf)) formatWithLong:elapsed];
}

void EduStanfordNlpUtilTiming_startTime() {
  EduStanfordNlpUtilTiming_initialize();
  EduStanfordNlpUtilTiming_startTime_ = JavaLangSystem_nanoTime();
}

jlong EduStanfordNlpUtilTiming_endTime() {
  EduStanfordNlpUtilTiming_initialize();
  return (JavaLangSystem_nanoTime() - EduStanfordNlpUtilTiming_startTime_) / EduStanfordNlpUtilTiming_MILLISECOND_DIVISOR;
}

jlong EduStanfordNlpUtilTiming_endTimeWithNSString_withJavaIoPrintStream_(NSString *str, JavaIoPrintStream *stream) {
  EduStanfordNlpUtilTiming_initialize();
  jlong elapsed = EduStanfordNlpUtilTiming_endTime();
  [((JavaIoPrintStream *) nil_chk(stream)) printlnWithNSString:JreStrcat("$$J$", str, @" Time elapsed: ", (elapsed), @" ms")];
  return elapsed;
}

jlong EduStanfordNlpUtilTiming_endTimeWithNSString_(NSString *str) {
  EduStanfordNlpUtilTiming_initialize();
  return EduStanfordNlpUtilTiming_endTimeWithNSString_withJavaIoPrintStream_(str, JreLoadStatic(JavaLangSystem, err));
}

void EduStanfordNlpUtilTiming_startDoingWithNSString_(NSString *str) {
  EduStanfordNlpUtilTiming_initialize();
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printWithNSString:str];
  [JreLoadStatic(JavaLangSystem, err) printWithNSString:@" ... "];
  [JreLoadStatic(JavaLangSystem, err) flush];
  EduStanfordNlpUtilTiming_startTime();
}

void EduStanfordNlpUtilTiming_endDoing() {
  EduStanfordNlpUtilTiming_initialize();
  jlong elapsed = JavaLangSystem_nanoTime() - EduStanfordNlpUtilTiming_startTime_;
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$$", @"done [", [((JavaTextNumberFormat *) nil_chk(EduStanfordNlpUtilTiming_nf)) formatWithDouble:((jdouble) elapsed) / EduStanfordNlpUtilTiming_SECOND_DIVISOR], @" sec].")];
}

void EduStanfordNlpUtilTiming_endDoingWithNSString_(NSString *msg) {
  EduStanfordNlpUtilTiming_initialize();
  jlong elapsed = JavaLangSystem_nanoTime() - EduStanfordNlpUtilTiming_startTime_;
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$$$", msg, @" done [", [((JavaTextNumberFormat *) nil_chk(EduStanfordNlpUtilTiming_nf)) formatWithDouble:((jdouble) elapsed) / EduStanfordNlpUtilTiming_SECOND_DIVISOR], @" sec].")];
}

jlong EduStanfordNlpUtilTiming_tick() {
  EduStanfordNlpUtilTiming_initialize();
  jlong elapsed = (JavaLangSystem_nanoTime() - EduStanfordNlpUtilTiming_startTime_) / EduStanfordNlpUtilTiming_MILLISECOND_DIVISOR;
  EduStanfordNlpUtilTiming_startTime();
  return elapsed;
}

jlong EduStanfordNlpUtilTiming_tickWithNSString_withJavaIoPrintStream_(NSString *str, JavaIoPrintStream *stream) {
  EduStanfordNlpUtilTiming_initialize();
  jlong elapsed = EduStanfordNlpUtilTiming_tick();
  [((JavaIoPrintStream *) nil_chk(stream)) printlnWithNSString:JreStrcat("$$J$", str, @" Time elapsed: ", (elapsed), @" ms")];
  return elapsed;
}

jlong EduStanfordNlpUtilTiming_tickWithNSString_(NSString *str) {
  EduStanfordNlpUtilTiming_initialize();
  return EduStanfordNlpUtilTiming_tickWithNSString_withJavaIoPrintStream_(str, JreLoadStatic(JavaLangSystem, err));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpUtilTiming)
