//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/util/Iterables.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/util/CollectionFactory.h"
#include "edu/stanford/nlp/util/Generics.h"
#include "edu/stanford/nlp/util/Iterables.h"
#include "edu/stanford/nlp/util/Pair.h"
#include "edu/stanford/nlp/util/Triple.h"
#include "java/io/PrintStream.h"
#include "java/lang/Boolean.h"
#include "java/lang/IllegalAccessError.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Iterable.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/Comparator.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "java/util/Random.h"
#include "java/util/Set.h"
#include "java/util/Spliterator.h"
#include "java/util/function/Consumer.h"
#include "java/util/function/Function.h"

@interface EduStanfordNlpUtilIterables_IncrementComparator : NSObject

@end

@interface EduStanfordNlpUtilIterables_$Lambda$1 : NSObject < EduStanfordNlpUtilIterables_IncrementComparator > {
 @public
  id<JavaUtilComparator> val$comparator_;
}

- (jint)compareWithId:(id)a
               withId:(id)b;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpUtilIterables_$Lambda$1)

J2OBJC_FIELD_SETTER(EduStanfordNlpUtilIterables_$Lambda$1, val$comparator_, id<JavaUtilComparator>)

__attribute__((unused)) static void EduStanfordNlpUtilIterables_$Lambda$1_initWithJavaUtilComparator_(EduStanfordNlpUtilIterables_$Lambda$1 *self, id<JavaUtilComparator> capture$0);

__attribute__((unused)) static EduStanfordNlpUtilIterables_$Lambda$1 *new_EduStanfordNlpUtilIterables_$Lambda$1_initWithJavaUtilComparator_(id<JavaUtilComparator> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpUtilIterables_$Lambda$1 *create_EduStanfordNlpUtilIterables_$Lambda$1_initWithJavaUtilComparator_(id<JavaUtilComparator> capture$0);

@interface EduStanfordNlpUtilIterables_$Lambda$2 : NSObject < JavaUtilFunctionFunction >

- (id)applyWithId:(EduStanfordNlpUtilPair *)inArg;

@end

J2OBJC_STATIC_INIT(EduStanfordNlpUtilIterables_$Lambda$2)

inline EduStanfordNlpUtilIterables_$Lambda$2 *EduStanfordNlpUtilIterables_$Lambda$2_get_instance();
static EduStanfordNlpUtilIterables_$Lambda$2 *EduStanfordNlpUtilIterables_$Lambda$2_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpUtilIterables_$Lambda$2, instance, EduStanfordNlpUtilIterables_$Lambda$2 *)

__attribute__((unused)) static void EduStanfordNlpUtilIterables_$Lambda$2_init(EduStanfordNlpUtilIterables_$Lambda$2 *self);

__attribute__((unused)) static EduStanfordNlpUtilIterables_$Lambda$2 *new_EduStanfordNlpUtilIterables_$Lambda$2_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpUtilIterables_$Lambda$2 *create_EduStanfordNlpUtilIterables_$Lambda$2_init();

@interface EduStanfordNlpUtilIterables_$Lambda$3 : NSObject < EduStanfordNlpUtilIterables_IncrementComparator > {
 @public
  id<JavaUtilComparator> val$comparator_;
}

- (jint)compareWithId:(id)a
               withId:(id)b;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpUtilIterables_$Lambda$3)

J2OBJC_FIELD_SETTER(EduStanfordNlpUtilIterables_$Lambda$3, val$comparator_, id<JavaUtilComparator>)

__attribute__((unused)) static void EduStanfordNlpUtilIterables_$Lambda$3_initWithJavaUtilComparator_(EduStanfordNlpUtilIterables_$Lambda$3 *self, id<JavaUtilComparator> capture$0);

__attribute__((unused)) static EduStanfordNlpUtilIterables_$Lambda$3 *new_EduStanfordNlpUtilIterables_$Lambda$3_initWithJavaUtilComparator_(id<JavaUtilComparator> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpUtilIterables_$Lambda$3 *create_EduStanfordNlpUtilIterables_$Lambda$3_initWithJavaUtilComparator_(id<JavaUtilComparator> capture$0);

@interface EduStanfordNlpUtilIterables_$1 : NSObject < JavaLangIterable > {
 @public
  id<JavaLangIterable> val$iterable_;
  id<JavaUtilFunctionFunction> val$function_;
}

- (id<JavaUtilIterator>)iterator;

- (instancetype)initWithJavaLangIterable:(id<JavaLangIterable>)capture$0
            withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpUtilIterables_$1)

J2OBJC_FIELD_SETTER(EduStanfordNlpUtilIterables_$1, val$iterable_, id<JavaLangIterable>)
J2OBJC_FIELD_SETTER(EduStanfordNlpUtilIterables_$1, val$function_, id<JavaUtilFunctionFunction>)

__attribute__((unused)) static void EduStanfordNlpUtilIterables_$1_initWithJavaLangIterable_withJavaUtilFunctionFunction_(EduStanfordNlpUtilIterables_$1 *self, id<JavaLangIterable> capture$0, id<JavaUtilFunctionFunction> capture$1);

__attribute__((unused)) static EduStanfordNlpUtilIterables_$1 *new_EduStanfordNlpUtilIterables_$1_initWithJavaLangIterable_withJavaUtilFunctionFunction_(id<JavaLangIterable> capture$0, id<JavaUtilFunctionFunction> capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpUtilIterables_$1 *create_EduStanfordNlpUtilIterables_$1_initWithJavaLangIterable_withJavaUtilFunctionFunction_(id<JavaLangIterable> capture$0, id<JavaUtilFunctionFunction> capture$1);

@interface EduStanfordNlpUtilIterables_$1_$1 : NSObject < JavaUtilIterator > {
 @public
  EduStanfordNlpUtilIterables_$1 *this$0_;
  id<JavaUtilIterator> inner_;
}

- (jboolean)hasNext;

- (id)next;

- (void)remove;

- (instancetype)initWithEduStanfordNlpUtilIterables_$1:(EduStanfordNlpUtilIterables_$1 *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpUtilIterables_$1_$1)

J2OBJC_FIELD_SETTER(EduStanfordNlpUtilIterables_$1_$1, this$0_, EduStanfordNlpUtilIterables_$1 *)
J2OBJC_FIELD_SETTER(EduStanfordNlpUtilIterables_$1_$1, inner_, id<JavaUtilIterator>)

__attribute__((unused)) static void EduStanfordNlpUtilIterables_$1_$1_initWithEduStanfordNlpUtilIterables_$1_(EduStanfordNlpUtilIterables_$1_$1 *self, EduStanfordNlpUtilIterables_$1 *outer$);

__attribute__((unused)) static EduStanfordNlpUtilIterables_$1_$1 *new_EduStanfordNlpUtilIterables_$1_$1_initWithEduStanfordNlpUtilIterables_$1_(EduStanfordNlpUtilIterables_$1 *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpUtilIterables_$1_$1 *create_EduStanfordNlpUtilIterables_$1_$1_initWithEduStanfordNlpUtilIterables_$1_(EduStanfordNlpUtilIterables_$1 *outer$);

@interface EduStanfordNlpUtilIterables_$2 : NSObject < JavaLangIterable > {
 @public
  id<JavaLangIterable> val$iterable_;
  id<JavaUtilFunctionFunction> val$accept_;
}

- (id<JavaUtilIterator>)iterator;

- (instancetype)initWithJavaLangIterable:(id<JavaLangIterable>)capture$0
            withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpUtilIterables_$2)

J2OBJC_FIELD_SETTER(EduStanfordNlpUtilIterables_$2, val$iterable_, id<JavaLangIterable>)
J2OBJC_FIELD_SETTER(EduStanfordNlpUtilIterables_$2, val$accept_, id<JavaUtilFunctionFunction>)

__attribute__((unused)) static void EduStanfordNlpUtilIterables_$2_initWithJavaLangIterable_withJavaUtilFunctionFunction_(EduStanfordNlpUtilIterables_$2 *self, id<JavaLangIterable> capture$0, id<JavaUtilFunctionFunction> capture$1);

__attribute__((unused)) static EduStanfordNlpUtilIterables_$2 *new_EduStanfordNlpUtilIterables_$2_initWithJavaLangIterable_withJavaUtilFunctionFunction_(id<JavaLangIterable> capture$0, id<JavaUtilFunctionFunction> capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpUtilIterables_$2 *create_EduStanfordNlpUtilIterables_$2_initWithJavaLangIterable_withJavaUtilFunctionFunction_(id<JavaLangIterable> capture$0, id<JavaUtilFunctionFunction> capture$1);

@interface EduStanfordNlpUtilIterables_$2_$1 : NSObject < JavaUtilIterator > {
 @public
  EduStanfordNlpUtilIterables_$2 *this$0_;
  id<JavaUtilIterator> inner_;
  jboolean queued_;
  id next_;
}

- (jboolean)hasNext;

- (id)next;

- (void)prepare;

- (void)remove;

- (instancetype)initWithEduStanfordNlpUtilIterables_$2:(EduStanfordNlpUtilIterables_$2 *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpUtilIterables_$2_$1)

J2OBJC_FIELD_SETTER(EduStanfordNlpUtilIterables_$2_$1, this$0_, EduStanfordNlpUtilIterables_$2 *)
J2OBJC_FIELD_SETTER(EduStanfordNlpUtilIterables_$2_$1, inner_, id<JavaUtilIterator>)
J2OBJC_FIELD_SETTER(EduStanfordNlpUtilIterables_$2_$1, next_, id)

__attribute__((unused)) static void EduStanfordNlpUtilIterables_$2_$1_initWithEduStanfordNlpUtilIterables_$2_(EduStanfordNlpUtilIterables_$2_$1 *self, EduStanfordNlpUtilIterables_$2 *outer$);

__attribute__((unused)) static EduStanfordNlpUtilIterables_$2_$1 *new_EduStanfordNlpUtilIterables_$2_$1_initWithEduStanfordNlpUtilIterables_$2_(EduStanfordNlpUtilIterables_$2 *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpUtilIterables_$2_$1 *create_EduStanfordNlpUtilIterables_$2_$1_initWithEduStanfordNlpUtilIterables_$2_(EduStanfordNlpUtilIterables_$2 *outer$);

@interface EduStanfordNlpUtilIterables_$3 : NSObject < JavaLangIterable > {
 @public
  id<JavaLangIterable> val$iterable_;
  IOSClass *val$type_;
}

- (id<JavaUtilIterator>)iterator;

- (instancetype)initWithJavaLangIterable:(id<JavaLangIterable>)capture$0
                            withIOSClass:(IOSClass *)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpUtilIterables_$3)

J2OBJC_FIELD_SETTER(EduStanfordNlpUtilIterables_$3, val$iterable_, id<JavaLangIterable>)
J2OBJC_FIELD_SETTER(EduStanfordNlpUtilIterables_$3, val$type_, IOSClass *)

__attribute__((unused)) static void EduStanfordNlpUtilIterables_$3_initWithJavaLangIterable_withIOSClass_(EduStanfordNlpUtilIterables_$3 *self, id<JavaLangIterable> capture$0, IOSClass *capture$1);

__attribute__((unused)) static EduStanfordNlpUtilIterables_$3 *new_EduStanfordNlpUtilIterables_$3_initWithJavaLangIterable_withIOSClass_(id<JavaLangIterable> capture$0, IOSClass *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpUtilIterables_$3 *create_EduStanfordNlpUtilIterables_$3_initWithJavaLangIterable_withIOSClass_(id<JavaLangIterable> capture$0, IOSClass *capture$1);

@interface EduStanfordNlpUtilIterables_$3_$1 : NSObject < JavaUtilIterator > {
 @public
  EduStanfordNlpUtilIterables_$3 *this$0_;
  id<JavaUtilIterator> inner_;
}

- (jboolean)hasNext;

- (id)next;

- (void)remove;

- (instancetype)initWithEduStanfordNlpUtilIterables_$3:(EduStanfordNlpUtilIterables_$3 *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpUtilIterables_$3_$1)

J2OBJC_FIELD_SETTER(EduStanfordNlpUtilIterables_$3_$1, this$0_, EduStanfordNlpUtilIterables_$3 *)
J2OBJC_FIELD_SETTER(EduStanfordNlpUtilIterables_$3_$1, inner_, id<JavaUtilIterator>)

__attribute__((unused)) static void EduStanfordNlpUtilIterables_$3_$1_initWithEduStanfordNlpUtilIterables_$3_(EduStanfordNlpUtilIterables_$3_$1 *self, EduStanfordNlpUtilIterables_$3 *outer$);

__attribute__((unused)) static EduStanfordNlpUtilIterables_$3_$1 *new_EduStanfordNlpUtilIterables_$3_$1_initWithEduStanfordNlpUtilIterables_$3_(EduStanfordNlpUtilIterables_$3 *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpUtilIterables_$3_$1 *create_EduStanfordNlpUtilIterables_$3_$1_initWithEduStanfordNlpUtilIterables_$3_(EduStanfordNlpUtilIterables_$3 *outer$);

@interface EduStanfordNlpUtilIterables_$4 : NSObject < JavaLangIterable > {
 @public
  id<JavaUtilIterator> iterator_;
  jint val$max_;
}

- (id<JavaUtilIterator>)iterator;

- (instancetype)initWithJavaLangIterable:(id<JavaLangIterable>)capture$0
                                 withInt:(jint)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpUtilIterables_$4)

J2OBJC_FIELD_SETTER(EduStanfordNlpUtilIterables_$4, iterator_, id<JavaUtilIterator>)

__attribute__((unused)) static void EduStanfordNlpUtilIterables_$4_initWithJavaLangIterable_withInt_(EduStanfordNlpUtilIterables_$4 *self, id<JavaLangIterable> capture$0, jint capture$1);

__attribute__((unused)) static EduStanfordNlpUtilIterables_$4 *new_EduStanfordNlpUtilIterables_$4_initWithJavaLangIterable_withInt_(id<JavaLangIterable> capture$0, jint capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpUtilIterables_$4 *create_EduStanfordNlpUtilIterables_$4_initWithJavaLangIterable_withInt_(id<JavaLangIterable> capture$0, jint capture$1);

@interface EduStanfordNlpUtilIterables_$4_$1 : NSObject < JavaUtilIterator > {
 @public
  EduStanfordNlpUtilIterables_$4 *this$0_;
  jint i_;
}

- (jboolean)hasNext;

- (id)next;

- (void)remove;

- (instancetype)initWithEduStanfordNlpUtilIterables_$4:(EduStanfordNlpUtilIterables_$4 *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpUtilIterables_$4_$1)

J2OBJC_FIELD_SETTER(EduStanfordNlpUtilIterables_$4_$1, this$0_, EduStanfordNlpUtilIterables_$4 *)

__attribute__((unused)) static void EduStanfordNlpUtilIterables_$4_$1_initWithEduStanfordNlpUtilIterables_$4_(EduStanfordNlpUtilIterables_$4_$1 *self, EduStanfordNlpUtilIterables_$4 *outer$);

__attribute__((unused)) static EduStanfordNlpUtilIterables_$4_$1 *new_EduStanfordNlpUtilIterables_$4_$1_initWithEduStanfordNlpUtilIterables_$4_(EduStanfordNlpUtilIterables_$4 *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpUtilIterables_$4_$1 *create_EduStanfordNlpUtilIterables_$4_$1_initWithEduStanfordNlpUtilIterables_$4_(EduStanfordNlpUtilIterables_$4 *outer$);

@interface EduStanfordNlpUtilIterables_$5 : NSObject < JavaLangIterable > {
 @public
  id<JavaUtilIterator> iterator_;
  jint val$toDrop_;
}

- (id<JavaUtilIterator>)iterator;

- (instancetype)initWithJavaLangIterable:(id<JavaLangIterable>)capture$0
                                 withInt:(jint)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpUtilIterables_$5)

J2OBJC_FIELD_SETTER(EduStanfordNlpUtilIterables_$5, iterator_, id<JavaUtilIterator>)

__attribute__((unused)) static void EduStanfordNlpUtilIterables_$5_initWithJavaLangIterable_withInt_(EduStanfordNlpUtilIterables_$5 *self, id<JavaLangIterable> capture$0, jint capture$1);

__attribute__((unused)) static EduStanfordNlpUtilIterables_$5 *new_EduStanfordNlpUtilIterables_$5_initWithJavaLangIterable_withInt_(id<JavaLangIterable> capture$0, jint capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpUtilIterables_$5 *create_EduStanfordNlpUtilIterables_$5_initWithJavaLangIterable_withInt_(id<JavaLangIterable> capture$0, jint capture$1);

@interface EduStanfordNlpUtilIterables_$5_$1 : NSObject < JavaUtilIterator > {
 @public
  EduStanfordNlpUtilIterables_$5 *this$0_;
  jint skipped_;
}

- (jboolean)hasNext;

- (id)next;

- (void)remove;

- (instancetype)initWithEduStanfordNlpUtilIterables_$5:(EduStanfordNlpUtilIterables_$5 *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpUtilIterables_$5_$1)

J2OBJC_FIELD_SETTER(EduStanfordNlpUtilIterables_$5_$1, this$0_, EduStanfordNlpUtilIterables_$5 *)

__attribute__((unused)) static void EduStanfordNlpUtilIterables_$5_$1_initWithEduStanfordNlpUtilIterables_$5_(EduStanfordNlpUtilIterables_$5_$1 *self, EduStanfordNlpUtilIterables_$5 *outer$);

__attribute__((unused)) static EduStanfordNlpUtilIterables_$5_$1 *new_EduStanfordNlpUtilIterables_$5_$1_initWithEduStanfordNlpUtilIterables_$5_(EduStanfordNlpUtilIterables_$5 *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpUtilIterables_$5_$1 *create_EduStanfordNlpUtilIterables_$5_$1_initWithEduStanfordNlpUtilIterables_$5_(EduStanfordNlpUtilIterables_$5 *outer$);

@interface EduStanfordNlpUtilIterables_$6 : NSObject < JavaLangIterable > {
 @public
  id<JavaLangIterable> val$iterables_;
}

- (id<JavaUtilIterator>)iterator;

- (instancetype)initWithJavaLangIterable:(id<JavaLangIterable>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpUtilIterables_$6)

J2OBJC_FIELD_SETTER(EduStanfordNlpUtilIterables_$6, val$iterables_, id<JavaLangIterable>)

__attribute__((unused)) static void EduStanfordNlpUtilIterables_$6_initWithJavaLangIterable_(EduStanfordNlpUtilIterables_$6 *self, id<JavaLangIterable> capture$0);

__attribute__((unused)) static EduStanfordNlpUtilIterables_$6 *new_EduStanfordNlpUtilIterables_$6_initWithJavaLangIterable_(id<JavaLangIterable> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpUtilIterables_$6 *create_EduStanfordNlpUtilIterables_$6_initWithJavaLangIterable_(id<JavaLangIterable> capture$0);

@interface EduStanfordNlpUtilIterables_$6_$1 : NSObject < JavaUtilIterator > {
 @public
  id<JavaUtilIterator> current_;
  id<JavaUtilIterator> val$iterators_;
}

- (jboolean)hasNext;

- (id)next;

- (void)remove;

- (instancetype)initWithJavaUtilIterator:(id<JavaUtilIterator>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpUtilIterables_$6_$1)

J2OBJC_FIELD_SETTER(EduStanfordNlpUtilIterables_$6_$1, current_, id<JavaUtilIterator>)
J2OBJC_FIELD_SETTER(EduStanfordNlpUtilIterables_$6_$1, val$iterators_, id<JavaUtilIterator>)

__attribute__((unused)) static void EduStanfordNlpUtilIterables_$6_$1_initWithJavaUtilIterator_(EduStanfordNlpUtilIterables_$6_$1 *self, id<JavaUtilIterator> capture$0);

__attribute__((unused)) static EduStanfordNlpUtilIterables_$6_$1 *new_EduStanfordNlpUtilIterables_$6_$1_initWithJavaUtilIterator_(id<JavaUtilIterator> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpUtilIterables_$6_$1 *create_EduStanfordNlpUtilIterables_$6_$1_initWithJavaUtilIterator_(id<JavaUtilIterator> capture$0);

@interface EduStanfordNlpUtilIterables_$7 : NSObject < JavaLangIterable > {
 @public
  id<JavaLangIterable> val$iter1_;
  id<JavaLangIterable> val$iter2_;
}

- (id<JavaUtilIterator>)iterator;

- (instancetype)initWithJavaLangIterable:(id<JavaLangIterable>)capture$0
                    withJavaLangIterable:(id<JavaLangIterable>)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpUtilIterables_$7)

J2OBJC_FIELD_SETTER(EduStanfordNlpUtilIterables_$7, val$iter1_, id<JavaLangIterable>)
J2OBJC_FIELD_SETTER(EduStanfordNlpUtilIterables_$7, val$iter2_, id<JavaLangIterable>)

__attribute__((unused)) static void EduStanfordNlpUtilIterables_$7_initWithJavaLangIterable_withJavaLangIterable_(EduStanfordNlpUtilIterables_$7 *self, id<JavaLangIterable> capture$0, id<JavaLangIterable> capture$1);

__attribute__((unused)) static EduStanfordNlpUtilIterables_$7 *new_EduStanfordNlpUtilIterables_$7_initWithJavaLangIterable_withJavaLangIterable_(id<JavaLangIterable> capture$0, id<JavaLangIterable> capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpUtilIterables_$7 *create_EduStanfordNlpUtilIterables_$7_initWithJavaLangIterable_withJavaLangIterable_(id<JavaLangIterable> capture$0, id<JavaLangIterable> capture$1);

@interface EduStanfordNlpUtilIterables_$8 : NSObject < JavaUtilIterator > {
 @public
  id<JavaUtilIterator> val$iter1_;
  id<JavaUtilIterator> val$iter2_;
}

- (jboolean)hasNext;

- (EduStanfordNlpUtilPair *)next;

- (void)remove;

- (instancetype)initWithJavaUtilIterator:(id<JavaUtilIterator>)capture$0
                    withJavaUtilIterator:(id<JavaUtilIterator>)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpUtilIterables_$8)

J2OBJC_FIELD_SETTER(EduStanfordNlpUtilIterables_$8, val$iter1_, id<JavaUtilIterator>)
J2OBJC_FIELD_SETTER(EduStanfordNlpUtilIterables_$8, val$iter2_, id<JavaUtilIterator>)

__attribute__((unused)) static void EduStanfordNlpUtilIterables_$8_initWithJavaUtilIterator_withJavaUtilIterator_(EduStanfordNlpUtilIterables_$8 *self, id<JavaUtilIterator> capture$0, id<JavaUtilIterator> capture$1);

__attribute__((unused)) static EduStanfordNlpUtilIterables_$8 *new_EduStanfordNlpUtilIterables_$8_initWithJavaUtilIterator_withJavaUtilIterator_(id<JavaUtilIterator> capture$0, id<JavaUtilIterator> capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpUtilIterables_$8 *create_EduStanfordNlpUtilIterables_$8_initWithJavaUtilIterator_withJavaUtilIterator_(id<JavaUtilIterator> capture$0, id<JavaUtilIterator> capture$1);

@interface EduStanfordNlpUtilIterables_$9 : NSObject < JavaLangIterable > {
 @public
  id<JavaUtilIterator> iterA_;
  id<JavaUtilIterator> iterB_;
  id<EduStanfordNlpUtilIterables_IncrementComparator> val$comparator_;
}

- (id<JavaUtilIterator>)iterator;

- (instancetype)initWithJavaLangIterable:(id<JavaLangIterable>)capture$0
                    withJavaLangIterable:(id<JavaLangIterable>)capture$1
withEduStanfordNlpUtilIterables_IncrementComparator:(id<EduStanfordNlpUtilIterables_IncrementComparator>)capture$2;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpUtilIterables_$9)

J2OBJC_FIELD_SETTER(EduStanfordNlpUtilIterables_$9, iterA_, id<JavaUtilIterator>)
J2OBJC_FIELD_SETTER(EduStanfordNlpUtilIterables_$9, iterB_, id<JavaUtilIterator>)
J2OBJC_FIELD_SETTER(EduStanfordNlpUtilIterables_$9, val$comparator_, id<EduStanfordNlpUtilIterables_IncrementComparator>)

__attribute__((unused)) static void EduStanfordNlpUtilIterables_$9_initWithJavaLangIterable_withJavaLangIterable_withEduStanfordNlpUtilIterables_IncrementComparator_(EduStanfordNlpUtilIterables_$9 *self, id<JavaLangIterable> capture$0, id<JavaLangIterable> capture$1, id<EduStanfordNlpUtilIterables_IncrementComparator> capture$2);

__attribute__((unused)) static EduStanfordNlpUtilIterables_$9 *new_EduStanfordNlpUtilIterables_$9_initWithJavaLangIterable_withJavaLangIterable_withEduStanfordNlpUtilIterables_IncrementComparator_(id<JavaLangIterable> capture$0, id<JavaLangIterable> capture$1, id<EduStanfordNlpUtilIterables_IncrementComparator> capture$2) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpUtilIterables_$9 *create_EduStanfordNlpUtilIterables_$9_initWithJavaLangIterable_withJavaLangIterable_withEduStanfordNlpUtilIterables_IncrementComparator_(id<JavaLangIterable> capture$0, id<JavaLangIterable> capture$1, id<EduStanfordNlpUtilIterables_IncrementComparator> capture$2);

@interface EduStanfordNlpUtilIterables_$9_$1 : NSObject < JavaUtilIterator > {
 @public
  EduStanfordNlpUtilIterables_$9 *this$0_;
  jboolean ready_;
  EduStanfordNlpUtilPair *pending_;
}

- (jboolean)hasNext;

- (EduStanfordNlpUtilPair *)next;

- (void)remove;

- (EduStanfordNlpUtilPair *)nextPair;

- (instancetype)initWithEduStanfordNlpUtilIterables_$9:(EduStanfordNlpUtilIterables_$9 *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpUtilIterables_$9_$1)

J2OBJC_FIELD_SETTER(EduStanfordNlpUtilIterables_$9_$1, this$0_, EduStanfordNlpUtilIterables_$9 *)
J2OBJC_FIELD_SETTER(EduStanfordNlpUtilIterables_$9_$1, pending_, EduStanfordNlpUtilPair *)

__attribute__((unused)) static EduStanfordNlpUtilPair *EduStanfordNlpUtilIterables_$9_$1_nextPair(EduStanfordNlpUtilIterables_$9_$1 *self);

__attribute__((unused)) static void EduStanfordNlpUtilIterables_$9_$1_initWithEduStanfordNlpUtilIterables_$9_(EduStanfordNlpUtilIterables_$9_$1 *self, EduStanfordNlpUtilIterables_$9 *outer$);

__attribute__((unused)) static EduStanfordNlpUtilIterables_$9_$1 *new_EduStanfordNlpUtilIterables_$9_$1_initWithEduStanfordNlpUtilIterables_$9_(EduStanfordNlpUtilIterables_$9 *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpUtilIterables_$9_$1 *create_EduStanfordNlpUtilIterables_$9_$1_initWithEduStanfordNlpUtilIterables_$9_(EduStanfordNlpUtilIterables_$9 *outer$);

@interface EduStanfordNlpUtilIterables_$10 : NSObject < EduStanfordNlpUtilIterables_IncrementComparator > {
 @public
  id<EduStanfordNlpUtilIterables_IncrementComparator> val$comparatorB_;
}

- (jint)compareWithId:(EduStanfordNlpUtilPair *)a
               withId:(id)b;

- (instancetype)initWithEduStanfordNlpUtilIterables_IncrementComparator:(id<EduStanfordNlpUtilIterables_IncrementComparator>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpUtilIterables_$10)

J2OBJC_FIELD_SETTER(EduStanfordNlpUtilIterables_$10, val$comparatorB_, id<EduStanfordNlpUtilIterables_IncrementComparator>)

__attribute__((unused)) static void EduStanfordNlpUtilIterables_$10_initWithEduStanfordNlpUtilIterables_IncrementComparator_(EduStanfordNlpUtilIterables_$10 *self, id<EduStanfordNlpUtilIterables_IncrementComparator> capture$0);

__attribute__((unused)) static EduStanfordNlpUtilIterables_$10 *new_EduStanfordNlpUtilIterables_$10_initWithEduStanfordNlpUtilIterables_IncrementComparator_(id<EduStanfordNlpUtilIterables_IncrementComparator> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpUtilIterables_$10 *create_EduStanfordNlpUtilIterables_$10_initWithEduStanfordNlpUtilIterables_IncrementComparator_(id<EduStanfordNlpUtilIterables_IncrementComparator> capture$0);

@interface EduStanfordNlpUtilIterables_$11 : NSObject < JavaLangIterable > {
 @public
  id<JavaLangIterable> val$iterable_;
  id<JavaUtilComparator> val$comparator_;
}

- (id<JavaUtilIterator>)iterator;

- (instancetype)initWithJavaLangIterable:(id<JavaLangIterable>)capture$0
                  withJavaUtilComparator:(id<JavaUtilComparator>)capture$1;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpUtilIterables_$11)

J2OBJC_FIELD_SETTER(EduStanfordNlpUtilIterables_$11, val$iterable_, id<JavaLangIterable>)
J2OBJC_FIELD_SETTER(EduStanfordNlpUtilIterables_$11, val$comparator_, id<JavaUtilComparator>)

__attribute__((unused)) static void EduStanfordNlpUtilIterables_$11_initWithJavaLangIterable_withJavaUtilComparator_(EduStanfordNlpUtilIterables_$11 *self, id<JavaLangIterable> capture$0, id<JavaUtilComparator> capture$1);

__attribute__((unused)) static EduStanfordNlpUtilIterables_$11 *new_EduStanfordNlpUtilIterables_$11_initWithJavaLangIterable_withJavaUtilComparator_(id<JavaLangIterable> capture$0, id<JavaUtilComparator> capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpUtilIterables_$11 *create_EduStanfordNlpUtilIterables_$11_initWithJavaLangIterable_withJavaUtilComparator_(id<JavaLangIterable> capture$0, id<JavaUtilComparator> capture$1);

@interface EduStanfordNlpUtilIterables_$11_$1 : NSObject < JavaUtilIterator > {
 @public
  EduStanfordNlpUtilIterables_$11 *this$0_;
  id<JavaUtilIterator> it_;
  id next_;
}

- (jboolean)hasNext;

- (id<JavaLangIterable>)next;

- (void)remove;

- (instancetype)initWithEduStanfordNlpUtilIterables_$11:(EduStanfordNlpUtilIterables_$11 *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpUtilIterables_$11_$1)

J2OBJC_FIELD_SETTER(EduStanfordNlpUtilIterables_$11_$1, this$0_, EduStanfordNlpUtilIterables_$11 *)
J2OBJC_FIELD_SETTER(EduStanfordNlpUtilIterables_$11_$1, it_, id<JavaUtilIterator>)
J2OBJC_FIELD_SETTER(EduStanfordNlpUtilIterables_$11_$1, next_, id)

__attribute__((unused)) static void EduStanfordNlpUtilIterables_$11_$1_initWithEduStanfordNlpUtilIterables_$11_(EduStanfordNlpUtilIterables_$11_$1 *self, EduStanfordNlpUtilIterables_$11 *outer$);

__attribute__((unused)) static EduStanfordNlpUtilIterables_$11_$1 *new_EduStanfordNlpUtilIterables_$11_$1_initWithEduStanfordNlpUtilIterables_$11_(EduStanfordNlpUtilIterables_$11 *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpUtilIterables_$11_$1 *create_EduStanfordNlpUtilIterables_$11_$1_initWithEduStanfordNlpUtilIterables_$11_(EduStanfordNlpUtilIterables_$11 *outer$);

@interface EduStanfordNlpUtilIterables_$11_$1_$Lambda$1 : NSObject < JavaLangIterable > {
 @public
  EduStanfordNlpUtilIterables_$11_$1 *this$0_;
}

- (id<JavaUtilIterator>)iterator;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpUtilIterables_$11_$1_$Lambda$1)

J2OBJC_FIELD_SETTER(EduStanfordNlpUtilIterables_$11_$1_$Lambda$1, this$0_, EduStanfordNlpUtilIterables_$11_$1 *)

__attribute__((unused)) static void EduStanfordNlpUtilIterables_$11_$1_$Lambda$1_initWithEduStanfordNlpUtilIterables_$11_$1_(EduStanfordNlpUtilIterables_$11_$1_$Lambda$1 *self, EduStanfordNlpUtilIterables_$11_$1 *outer$);

__attribute__((unused)) static EduStanfordNlpUtilIterables_$11_$1_$Lambda$1 *new_EduStanfordNlpUtilIterables_$11_$1_$Lambda$1_initWithEduStanfordNlpUtilIterables_$11_$1_(EduStanfordNlpUtilIterables_$11_$1 *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpUtilIterables_$11_$1_$Lambda$1 *create_EduStanfordNlpUtilIterables_$11_$1_$Lambda$1_initWithEduStanfordNlpUtilIterables_$11_$1_(EduStanfordNlpUtilIterables_$11_$1 *outer$);

@interface EduStanfordNlpUtilIterables_$11_$1_$1 : NSObject < JavaUtilIterator > {
 @public
  EduStanfordNlpUtilIterables_$11_$1 *this$0_;
  id last_;
}

- (jboolean)hasNext;

- (id)next;

- (void)remove;

- (instancetype)initWithEduStanfordNlpUtilIterables_$11_$1:(EduStanfordNlpUtilIterables_$11_$1 *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpUtilIterables_$11_$1_$1)

J2OBJC_FIELD_SETTER(EduStanfordNlpUtilIterables_$11_$1_$1, this$0_, EduStanfordNlpUtilIterables_$11_$1 *)
J2OBJC_FIELD_SETTER(EduStanfordNlpUtilIterables_$11_$1_$1, last_, id)

__attribute__((unused)) static void EduStanfordNlpUtilIterables_$11_$1_$1_initWithEduStanfordNlpUtilIterables_$11_$1_(EduStanfordNlpUtilIterables_$11_$1_$1 *self, EduStanfordNlpUtilIterables_$11_$1 *outer$);

__attribute__((unused)) static EduStanfordNlpUtilIterables_$11_$1_$1 *new_EduStanfordNlpUtilIterables_$11_$1_$1_initWithEduStanfordNlpUtilIterables_$11_$1_(EduStanfordNlpUtilIterables_$11_$1 *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpUtilIterables_$11_$1_$1 *create_EduStanfordNlpUtilIterables_$11_$1_$1_initWithEduStanfordNlpUtilIterables_$11_$1_(EduStanfordNlpUtilIterables_$11_$1 *outer$);

@interface EduStanfordNlpUtilIterables_$12 : NSObject < JavaUtilFunctionFunction > {
 @public
  jint index_;
  id<JavaUtilSet> val$indexSet_;
}

- (JavaLangBoolean *)applyWithId:(id)item;

- (instancetype)initWithJavaUtilSet:(id<JavaUtilSet>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpUtilIterables_$12)

J2OBJC_FIELD_SETTER(EduStanfordNlpUtilIterables_$12, val$indexSet_, id<JavaUtilSet>)

__attribute__((unused)) static void EduStanfordNlpUtilIterables_$12_initWithJavaUtilSet_(EduStanfordNlpUtilIterables_$12 *self, id<JavaUtilSet> capture$0);

__attribute__((unused)) static EduStanfordNlpUtilIterables_$12 *new_EduStanfordNlpUtilIterables_$12_initWithJavaUtilSet_(id<JavaUtilSet> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpUtilIterables_$12 *create_EduStanfordNlpUtilIterables_$12_initWithJavaUtilSet_(id<JavaUtilSet> capture$0);

@implementation EduStanfordNlpUtilIterables

+ (id<JavaLangIterable>)transformWithJavaLangIterable:(id<JavaLangIterable>)iterable
                         withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)function {
  return EduStanfordNlpUtilIterables_transformWithJavaLangIterable_withJavaUtilFunctionFunction_(iterable, function);
}

+ (id<JavaLangIterable>)filterWithJavaLangIterable:(id<JavaLangIterable>)iterable
                      withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)accept {
  return EduStanfordNlpUtilIterables_filterWithJavaLangIterable_withJavaUtilFunctionFunction_(iterable, accept);
}

+ (id<JavaLangIterable>)castWithJavaLangIterable:(id<JavaLangIterable>)iterable
                                    withIOSClass:(IOSClass *)type {
  return EduStanfordNlpUtilIterables_castWithJavaLangIterable_withIOSClass_(iterable, type);
}

+ (id<JavaLangIterable>)takeWithNSObjectArray:(IOSObjectArray *)array
                                      withInt:(jint)max {
  return EduStanfordNlpUtilIterables_takeWithNSObjectArray_withInt_(array, max);
}

+ (id<JavaLangIterable>)takeWithJavaLangIterable:(id<JavaLangIterable>)iterable
                                         withInt:(jint)max {
  return EduStanfordNlpUtilIterables_takeWithJavaLangIterable_withInt_(iterable, max);
}

+ (id<JavaLangIterable>)dropWithNSObjectArray:(IOSObjectArray *)array
                                      withInt:(jint)toDrop {
  return EduStanfordNlpUtilIterables_dropWithNSObjectArray_withInt_(array, toDrop);
}

+ (id<JavaLangIterable>)dropWithJavaLangIterable:(id<JavaLangIterable>)iterable
                                         withInt:(jint)toDrop {
  return EduStanfordNlpUtilIterables_dropWithJavaLangIterable_withInt_(iterable, toDrop);
}

+ (id<JavaLangIterable>)flatMapWithJavaLangIterable:(id<JavaLangIterable>)iterables
                       withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)trans {
  return EduStanfordNlpUtilIterables_flatMapWithJavaLangIterable_withJavaUtilFunctionFunction_(iterables, trans);
}

+ (id<JavaLangIterable>)chainWithJavaLangIterable:(id<JavaLangIterable>)iterables {
  return EduStanfordNlpUtilIterables_chainWithJavaLangIterable_(iterables);
}

+ (id<JavaLangIterable>)chainWithJavaLangIterableArray:(IOSObjectArray *)iterables {
  return EduStanfordNlpUtilIterables_chainWithJavaLangIterableArray_(iterables);
}

+ (id<JavaLangIterable>)chainWithNSObjectArray2:(IOSObjectArray *)arrays {
  return EduStanfordNlpUtilIterables_chainWithNSObjectArray2_(arrays);
}

+ (id<JavaLangIterable>)zipWithJavaLangIterable:(id<JavaLangIterable>)iter1
                           withJavaLangIterable:(id<JavaLangIterable>)iter2 {
  return EduStanfordNlpUtilIterables_zipWithJavaLangIterable_withJavaLangIterable_(iter1, iter2);
}

+ (id<JavaLangIterable>)zipWithJavaLangIterable:(id<JavaLangIterable>)iter
                              withNSObjectArray:(IOSObjectArray *)array {
  return EduStanfordNlpUtilIterables_zipWithJavaLangIterable_withNSObjectArray_(iter, array);
}

+ (id<JavaLangIterable>)zipWithNSObjectArray:(IOSObjectArray *)array
                        withJavaLangIterable:(id<JavaLangIterable>)iter {
  return EduStanfordNlpUtilIterables_zipWithNSObjectArray_withJavaLangIterable_(array, iter);
}

+ (id<JavaLangIterable>)zipWithNSObjectArray:(IOSObjectArray *)array1
                           withNSObjectArray:(IOSObjectArray *)array2 {
  return EduStanfordNlpUtilIterables_zipWithNSObjectArray_withNSObjectArray_(array1, array2);
}

+ (id<JavaUtilIterator>)zipWithJavaUtilIterator:(id<JavaUtilIterator>)iter1
                           withJavaUtilIterator:(id<JavaUtilIterator>)iter2 {
  return EduStanfordNlpUtilIterables_zipWithJavaUtilIterator_withJavaUtilIterator_(iter1, iter2);
}

+ (id<JavaLangIterable>)mergeWithJavaLangIterable:(id<JavaLangIterable>)iter1
                             withJavaLangIterable:(id<JavaLangIterable>)iter2
withEduStanfordNlpUtilIterables_IncrementComparator:(id<EduStanfordNlpUtilIterables_IncrementComparator>)comparator {
  return EduStanfordNlpUtilIterables_mergeWithJavaLangIterable_withJavaLangIterable_withEduStanfordNlpUtilIterables_IncrementComparator_(iter1, iter2, comparator);
}

+ (id<JavaLangIterable>)mergeWithJavaLangIterable:(id<JavaLangIterable>)iter1
                             withJavaLangIterable:(id<JavaLangIterable>)iter2
                           withJavaUtilComparator:(id<JavaUtilComparator>)comparator {
  return EduStanfordNlpUtilIterables_mergeWithJavaLangIterable_withJavaLangIterable_withJavaUtilComparator_(iter1, iter2, comparator);
}

+ (id<JavaLangIterable>)mergeWithJavaLangIterable:(id<JavaLangIterable>)iter1
                             withJavaLangIterable:(id<JavaLangIterable>)iter2
                             withJavaLangIterable:(id<JavaLangIterable>)iter3
withEduStanfordNlpUtilIterables_IncrementComparator:(id<EduStanfordNlpUtilIterables_IncrementComparator>)comparatorA
withEduStanfordNlpUtilIterables_IncrementComparator:(id<EduStanfordNlpUtilIterables_IncrementComparator>)comparatorB {
  return EduStanfordNlpUtilIterables_mergeWithJavaLangIterable_withJavaLangIterable_withJavaLangIterable_withEduStanfordNlpUtilIterables_IncrementComparator_withEduStanfordNlpUtilIterables_IncrementComparator_(iter1, iter2, iter3, comparatorA, comparatorB);
}

+ (id<JavaLangIterable>)mergeWithJavaLangIterable:(id<JavaLangIterable>)iter1
                             withJavaLangIterable:(id<JavaLangIterable>)iter2
                             withJavaLangIterable:(id<JavaLangIterable>)iter3
                           withJavaUtilComparator:(id<JavaUtilComparator>)comparator {
  return EduStanfordNlpUtilIterables_mergeWithJavaLangIterable_withJavaLangIterable_withJavaLangIterable_withJavaUtilComparator_(iter1, iter2, iter3, comparator);
}

+ (id<JavaLangIterable>)groupWithJavaLangIterable:(id<JavaLangIterable>)iterable
                           withJavaUtilComparator:(id<JavaUtilComparator>)comparator {
  return EduStanfordNlpUtilIterables_groupWithJavaLangIterable_withJavaUtilComparator_(iterable, comparator);
}

+ (NSString *)toStringWithJavaLangIterable:(id<JavaLangIterable>)iter
                              withNSString:(NSString *)glue {
  return EduStanfordNlpUtilIterables_toStringWithJavaLangIterable_withNSString_(iter, glue);
}

+ (id<JavaLangIterable>)sampleWithJavaLangIterable:(id<JavaLangIterable>)items
                                           withInt:(jint)n
                                           withInt:(jint)k
                                withJavaUtilRandom:(JavaUtilRandom *)random {
  return EduStanfordNlpUtilIterables_sampleWithJavaLangIterable_withInt_withInt_withJavaUtilRandom_(items, n, k, random);
}

+ (JavaUtilArrayList *)asArrayListWithJavaUtilIterator:(id<JavaUtilIterator>)iter {
  return EduStanfordNlpUtilIterables_asArrayListWithJavaUtilIterator_(iter);
}

+ (JavaUtilHashSet *)asHashSetWithJavaUtilIterator:(id<JavaUtilIterator>)iter {
  return EduStanfordNlpUtilIterables_asHashSetWithJavaUtilIterator_(iter);
}

+ (id<JavaUtilCollection>)asCollectionWithJavaUtilIterator:(id<JavaUtilIterator>)iter
                   withEduStanfordNlpUtilCollectionFactory:(EduStanfordNlpUtilCollectionFactory *)cf {
  return EduStanfordNlpUtilIterables_asCollectionWithJavaUtilIterator_withEduStanfordNlpUtilCollectionFactory_(iter, cf);
}

+ (id<JavaUtilCollection>)addAllWithJavaUtilIterator:(id<JavaUtilIterator>)iter
                              withJavaUtilCollection:(id<JavaUtilCollection>)c {
  return EduStanfordNlpUtilIterables_addAllWithJavaUtilIterator_withJavaUtilCollection_(iter, c);
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  EduStanfordNlpUtilIterables_mainWithNSStringArray_(args);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpUtilIterables_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangIterable;", 0x9, 0, 1, -1, 2, -1, -1 },
    { NULL, "LJavaLangIterable;", 0x9, 3, 1, -1, 4, -1, -1 },
    { NULL, "LJavaLangIterable;", 0x9, 5, 6, -1, 7, -1, -1 },
    { NULL, "LJavaLangIterable;", 0x9, 8, 9, -1, 10, -1, -1 },
    { NULL, "LJavaLangIterable;", 0x9, 8, 11, -1, 12, -1, -1 },
    { NULL, "LJavaLangIterable;", 0x9, 13, 9, -1, 10, -1, -1 },
    { NULL, "LJavaLangIterable;", 0x9, 13, 11, -1, 12, -1, -1 },
    { NULL, "LJavaLangIterable;", 0x9, 14, 1, -1, 15, -1, -1 },
    { NULL, "LJavaLangIterable;", 0x9, 16, 17, -1, 18, -1, -1 },
    { NULL, "LJavaLangIterable;", 0x89, 16, 19, -1, 20, -1, -1 },
    { NULL, "LJavaLangIterable;", 0x89, 16, 21, -1, 22, -1, -1 },
    { NULL, "LJavaLangIterable;", 0x9, 23, 24, -1, 25, -1, -1 },
    { NULL, "LJavaLangIterable;", 0x9, 23, 26, -1, 27, -1, -1 },
    { NULL, "LJavaLangIterable;", 0x9, 23, 28, -1, 29, -1, -1 },
    { NULL, "LJavaLangIterable;", 0x9, 23, 30, -1, 31, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x9, 23, 32, -1, 33, -1, -1 },
    { NULL, "LJavaLangIterable;", 0x9, 34, 35, -1, 36, -1, -1 },
    { NULL, "LJavaLangIterable;", 0x9, 34, 37, -1, 38, -1, -1 },
    { NULL, "LJavaLangIterable;", 0x9, 34, 39, -1, 40, -1, -1 },
    { NULL, "LJavaLangIterable;", 0x9, 34, 41, -1, 42, -1, -1 },
    { NULL, "LJavaLangIterable;", 0x9, 43, 44, -1, 45, -1, -1 },
    { NULL, "LNSString;", 0x9, 46, 47, -1, 48, -1, -1 },
    { NULL, "LJavaLangIterable;", 0x9, 49, 50, -1, 51, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x9, 52, 53, -1, 54, -1, -1 },
    { NULL, "LJavaUtilHashSet;", 0x9, 55, 53, -1, 56, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x9, 57, 58, -1, 59, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x9, 60, 61, -1, 62, -1, -1 },
    { NULL, "V", 0x9, 63, 64, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(transformWithJavaLangIterable:withJavaUtilFunctionFunction:);
  methods[1].selector = @selector(filterWithJavaLangIterable:withJavaUtilFunctionFunction:);
  methods[2].selector = @selector(castWithJavaLangIterable:withIOSClass:);
  methods[3].selector = @selector(takeWithNSObjectArray:withInt:);
  methods[4].selector = @selector(takeWithJavaLangIterable:withInt:);
  methods[5].selector = @selector(dropWithNSObjectArray:withInt:);
  methods[6].selector = @selector(dropWithJavaLangIterable:withInt:);
  methods[7].selector = @selector(flatMapWithJavaLangIterable:withJavaUtilFunctionFunction:);
  methods[8].selector = @selector(chainWithJavaLangIterable:);
  methods[9].selector = @selector(chainWithJavaLangIterableArray:);
  methods[10].selector = @selector(chainWithNSObjectArray2:);
  methods[11].selector = @selector(zipWithJavaLangIterable:withJavaLangIterable:);
  methods[12].selector = @selector(zipWithJavaLangIterable:withNSObjectArray:);
  methods[13].selector = @selector(zipWithNSObjectArray:withJavaLangIterable:);
  methods[14].selector = @selector(zipWithNSObjectArray:withNSObjectArray:);
  methods[15].selector = @selector(zipWithJavaUtilIterator:withJavaUtilIterator:);
  methods[16].selector = @selector(mergeWithJavaLangIterable:withJavaLangIterable:withEduStanfordNlpUtilIterables_IncrementComparator:);
  methods[17].selector = @selector(mergeWithJavaLangIterable:withJavaLangIterable:withJavaUtilComparator:);
  methods[18].selector = @selector(mergeWithJavaLangIterable:withJavaLangIterable:withJavaLangIterable:withEduStanfordNlpUtilIterables_IncrementComparator:withEduStanfordNlpUtilIterables_IncrementComparator:);
  methods[19].selector = @selector(mergeWithJavaLangIterable:withJavaLangIterable:withJavaLangIterable:withJavaUtilComparator:);
  methods[20].selector = @selector(groupWithJavaLangIterable:withJavaUtilComparator:);
  methods[21].selector = @selector(toStringWithJavaLangIterable:withNSString:);
  methods[22].selector = @selector(sampleWithJavaLangIterable:withInt:withInt:withJavaUtilRandom:);
  methods[23].selector = @selector(asArrayListWithJavaUtilIterator:);
  methods[24].selector = @selector(asHashSetWithJavaUtilIterator:);
  methods[25].selector = @selector(asCollectionWithJavaUtilIterator:withEduStanfordNlpUtilCollectionFactory:);
  methods[26].selector = @selector(addAllWithJavaUtilIterator:withJavaUtilCollection:);
  methods[27].selector = @selector(mainWithNSStringArray:);
  methods[28].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "transform", "LJavaLangIterable;LJavaUtilFunctionFunction;", "<K:Ljava/lang/Object;V:Ljava/lang/Object;>(Ljava/lang/Iterable<TK;>;Ljava/util/function/Function<-TK;+TV;>;)Ljava/lang/Iterable<TV;>;", "filter", "<T:Ljava/lang/Object;>(Ljava/lang/Iterable<TT;>;Ljava/util/function/Function<TT;Ljava/lang/Boolean;>;)Ljava/lang/Iterable<TT;>;", "cast", "LJavaLangIterable;LIOSClass;", "<T:Ljava/lang/Object;>(Ljava/lang/Iterable<*>;Ljava/lang/Class<+TT;>;)Ljava/lang/Iterable<TT;>;", "take", "[LNSObject;I", "<T:Ljava/lang/Object;>([TT;I)Ljava/lang/Iterable<TT;>;", "LJavaLangIterable;I", "<T:Ljava/lang/Object;>(Ljava/lang/Iterable<TT;>;I)Ljava/lang/Iterable<TT;>;", "drop", "flatMap", "<T:Ljava/lang/Object;U:Ljava/lang/Object;>(Ljava/lang/Iterable<+Ljava/lang/Iterable<TT;>;>;Ljava/util/function/Function<-TT;TU;>;)Ljava/lang/Iterable<TU;>;", "chain", "LJavaLangIterable;", "<T:Ljava/lang/Object;>(Ljava/lang/Iterable<+Ljava/lang/Iterable<TT;>;>;)Ljava/lang/Iterable<TT;>;", "[LJavaLangIterable;", "<T:Ljava/lang/Object;>([Ljava/lang/Iterable<TT;>;)Ljava/lang/Iterable<TT;>;", "[[LNSObject;", "<T:Ljava/lang/Object;>([[TT;)Ljava/lang/Iterable<TT;>;", "zip", "LJavaLangIterable;LJavaLangIterable;", "<T1:Ljava/lang/Object;T2:Ljava/lang/Object;>(Ljava/lang/Iterable<TT1;>;Ljava/lang/Iterable<TT2;>;)Ljava/lang/Iterable<Ledu/stanford/nlp/util/Pair<TT1;TT2;>;>;", "LJavaLangIterable;[LNSObject;", "<T1:Ljava/lang/Object;T2:Ljava/lang/Object;>(Ljava/lang/Iterable<TT1;>;[TT2;)Ljava/lang/Iterable<Ledu/stanford/nlp/util/Pair<TT1;TT2;>;>;", "[LNSObject;LJavaLangIterable;", "<T1:Ljava/lang/Object;T2:Ljava/lang/Object;>([TT1;Ljava/lang/Iterable<TT2;>;)Ljava/lang/Iterable<Ledu/stanford/nlp/util/Pair<TT1;TT2;>;>;", "[LNSObject;[LNSObject;", "<T1:Ljava/lang/Object;T2:Ljava/lang/Object;>([TT1;[TT2;)Ljava/lang/Iterable<Ledu/stanford/nlp/util/Pair<TT1;TT2;>;>;", "LJavaUtilIterator;LJavaUtilIterator;", "<T1:Ljava/lang/Object;T2:Ljava/lang/Object;>(Ljava/util/Iterator<TT1;>;Ljava/util/Iterator<TT2;>;)Ljava/util/Iterator<Ledu/stanford/nlp/util/Pair<TT1;TT2;>;>;", "merge", "LJavaLangIterable;LJavaLangIterable;LEduStanfordNlpUtilIterables_IncrementComparator;", "<V1:Ljava/lang/Object;V2:Ljava/lang/Object;>(Ljava/lang/Iterable<TV1;>;Ljava/lang/Iterable<TV2;>;Ledu/stanford/nlp/util/Iterables$IncrementComparator<TV1;TV2;>;)Ljava/lang/Iterable<Ledu/stanford/nlp/util/Pair<TV1;TV2;>;>;", "LJavaLangIterable;LJavaLangIterable;LJavaUtilComparator;", "<V:Ljava/lang/Object;>(Ljava/lang/Iterable<TV;>;Ljava/lang/Iterable<TV;>;Ljava/util/Comparator<TV;>;)Ljava/lang/Iterable<Ledu/stanford/nlp/util/Pair<TV;TV;>;>;", "LJavaLangIterable;LJavaLangIterable;LJavaLangIterable;LEduStanfordNlpUtilIterables_IncrementComparator;LEduStanfordNlpUtilIterables_IncrementComparator;", "<V1:Ljava/lang/Object;V2:Ljava/lang/Object;V3:Ljava/lang/Object;>(Ljava/lang/Iterable<TV1;>;Ljava/lang/Iterable<TV2;>;Ljava/lang/Iterable<TV3;>;Ledu/stanford/nlp/util/Iterables$IncrementComparator<TV1;TV2;>;Ledu/stanford/nlp/util/Iterables$IncrementComparator<TV1;TV3;>;)Ljava/lang/Iterable<Ledu/stanford/nlp/util/Triple<TV1;TV2;TV3;>;>;", "LJavaLangIterable;LJavaLangIterable;LJavaLangIterable;LJavaUtilComparator;", "<V:Ljava/lang/Object;>(Ljava/lang/Iterable<TV;>;Ljava/lang/Iterable<TV;>;Ljava/lang/Iterable<TV;>;Ljava/util/Comparator<TV;>;)Ljava/lang/Iterable<Ledu/stanford/nlp/util/Triple<TV;TV;TV;>;>;", "group", "LJavaLangIterable;LJavaUtilComparator;", "<V:Ljava/lang/Object;>(Ljava/lang/Iterable<TV;>;Ljava/util/Comparator<TV;>;)Ljava/lang/Iterable<Ljava/lang/Iterable<TV;>;>;", "toString", "LJavaLangIterable;LNSString;", "<E:Ljava/lang/Object;>(Ljava/lang/Iterable<TE;>;Ljava/lang/String;)Ljava/lang/String;", "sample", "LJavaLangIterable;IILJavaUtilRandom;", "<T:Ljava/lang/Object;>(Ljava/lang/Iterable<TT;>;IILjava/util/Random;)Ljava/lang/Iterable<TT;>;", "asArrayList", "LJavaUtilIterator;", "<T:Ljava/lang/Object;>(Ljava/util/Iterator<+TT;>;)Ljava/util/ArrayList<TT;>;", "asHashSet", "<T:Ljava/lang/Object;>(Ljava/util/Iterator<+TT;>;)Ljava/util/HashSet<TT;>;", "asCollection", "LJavaUtilIterator;LEduStanfordNlpUtilCollectionFactory;", "<E:Ljava/lang/Object;>(Ljava/util/Iterator<+TE;>;Ledu/stanford/nlp/util/CollectionFactory<TE;>;)Ljava/util/Collection<TE;>;", "addAll", "LJavaUtilIterator;LJavaUtilCollection;", "<T:Ljava/lang/Object;>(Ljava/util/Iterator<+TT;>;Ljava/util/Collection<TT;>;)Ljava/util/Collection<TT;>;", "main", "[LNSString;", "LEduStanfordNlpUtilIterables_IncrementComparator;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilIterables = { "Iterables", "edu.stanford.nlp.util", ptrTable, methods, NULL, 7, 0x1, 29, 0, -1, 65, -1, -1, -1 };
  return &_EduStanfordNlpUtilIterables;
}

@end

id<JavaLangIterable> EduStanfordNlpUtilIterables_transformWithJavaLangIterable_withJavaUtilFunctionFunction_(id<JavaLangIterable> iterable, id<JavaUtilFunctionFunction> function) {
  EduStanfordNlpUtilIterables_initialize();
  return new_EduStanfordNlpUtilIterables_$1_initWithJavaLangIterable_withJavaUtilFunctionFunction_(iterable, function);
}

id<JavaLangIterable> EduStanfordNlpUtilIterables_filterWithJavaLangIterable_withJavaUtilFunctionFunction_(id<JavaLangIterable> iterable, id<JavaUtilFunctionFunction> accept) {
  EduStanfordNlpUtilIterables_initialize();
  return new_EduStanfordNlpUtilIterables_$2_initWithJavaLangIterable_withJavaUtilFunctionFunction_(iterable, accept);
}

id<JavaLangIterable> EduStanfordNlpUtilIterables_castWithJavaLangIterable_withIOSClass_(id<JavaLangIterable> iterable, IOSClass *type) {
  EduStanfordNlpUtilIterables_initialize();
  return new_EduStanfordNlpUtilIterables_$3_initWithJavaLangIterable_withIOSClass_(iterable, type);
}

id<JavaLangIterable> EduStanfordNlpUtilIterables_takeWithNSObjectArray_withInt_(IOSObjectArray *array, jint max) {
  EduStanfordNlpUtilIterables_initialize();
  return EduStanfordNlpUtilIterables_takeWithJavaLangIterable_withInt_(JavaUtilArrays_asListWithNSObjectArray_(array), max);
}

id<JavaLangIterable> EduStanfordNlpUtilIterables_takeWithJavaLangIterable_withInt_(id<JavaLangIterable> iterable, jint max) {
  EduStanfordNlpUtilIterables_initialize();
  return new_EduStanfordNlpUtilIterables_$4_initWithJavaLangIterable_withInt_(iterable, max);
}

id<JavaLangIterable> EduStanfordNlpUtilIterables_dropWithNSObjectArray_withInt_(IOSObjectArray *array, jint toDrop) {
  EduStanfordNlpUtilIterables_initialize();
  return EduStanfordNlpUtilIterables_dropWithJavaLangIterable_withInt_(JavaUtilArrays_asListWithNSObjectArray_(array), toDrop);
}

id<JavaLangIterable> EduStanfordNlpUtilIterables_dropWithJavaLangIterable_withInt_(id<JavaLangIterable> iterable, jint toDrop) {
  EduStanfordNlpUtilIterables_initialize();
  return new_EduStanfordNlpUtilIterables_$5_initWithJavaLangIterable_withInt_(iterable, toDrop);
}

id<JavaLangIterable> EduStanfordNlpUtilIterables_flatMapWithJavaLangIterable_withJavaUtilFunctionFunction_(id<JavaLangIterable> iterables, id<JavaUtilFunctionFunction> trans) {
  EduStanfordNlpUtilIterables_initialize();
  return EduStanfordNlpUtilIterables_transformWithJavaLangIterable_withJavaUtilFunctionFunction_(EduStanfordNlpUtilIterables_chainWithJavaLangIterable_(iterables), trans);
}

id<JavaLangIterable> EduStanfordNlpUtilIterables_chainWithJavaLangIterable_(id<JavaLangIterable> iterables) {
  EduStanfordNlpUtilIterables_initialize();
  return new_EduStanfordNlpUtilIterables_$6_initWithJavaLangIterable_(iterables);
}

id<JavaLangIterable> EduStanfordNlpUtilIterables_chainWithJavaLangIterableArray_(IOSObjectArray *iterables) {
  EduStanfordNlpUtilIterables_initialize();
  return EduStanfordNlpUtilIterables_chainWithJavaLangIterable_(JavaUtilArrays_asListWithNSObjectArray_(iterables));
}

id<JavaLangIterable> EduStanfordNlpUtilIterables_chainWithNSObjectArray2_(IOSObjectArray *arrays) {
  EduStanfordNlpUtilIterables_initialize();
  JavaUtilLinkedList *iterables = new_JavaUtilLinkedList_init();
  {
    IOSObjectArray *a__ = arrays;
    IOSObjectArray * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    IOSObjectArray * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      IOSObjectArray *array = *b__++;
      [iterables addWithId:JavaUtilArrays_asListWithNSObjectArray_(array)];
    }
  }
  return EduStanfordNlpUtilIterables_chainWithJavaLangIterable_(iterables);
}

id<JavaLangIterable> EduStanfordNlpUtilIterables_zipWithJavaLangIterable_withJavaLangIterable_(id<JavaLangIterable> iter1, id<JavaLangIterable> iter2) {
  EduStanfordNlpUtilIterables_initialize();
  return new_EduStanfordNlpUtilIterables_$7_initWithJavaLangIterable_withJavaLangIterable_(iter1, iter2);
}

id<JavaLangIterable> EduStanfordNlpUtilIterables_zipWithJavaLangIterable_withNSObjectArray_(id<JavaLangIterable> iter, IOSObjectArray *array) {
  EduStanfordNlpUtilIterables_initialize();
  return EduStanfordNlpUtilIterables_zipWithJavaLangIterable_withJavaLangIterable_(iter, JavaUtilArrays_asListWithNSObjectArray_(array));
}

id<JavaLangIterable> EduStanfordNlpUtilIterables_zipWithNSObjectArray_withJavaLangIterable_(IOSObjectArray *array, id<JavaLangIterable> iter) {
  EduStanfordNlpUtilIterables_initialize();
  return EduStanfordNlpUtilIterables_zipWithJavaLangIterable_withJavaLangIterable_(JavaUtilArrays_asListWithNSObjectArray_(array), iter);
}

id<JavaLangIterable> EduStanfordNlpUtilIterables_zipWithNSObjectArray_withNSObjectArray_(IOSObjectArray *array1, IOSObjectArray *array2) {
  EduStanfordNlpUtilIterables_initialize();
  return EduStanfordNlpUtilIterables_zipWithJavaLangIterable_withJavaLangIterable_(JavaUtilArrays_asListWithNSObjectArray_(array1), JavaUtilArrays_asListWithNSObjectArray_(array2));
}

id<JavaUtilIterator> EduStanfordNlpUtilIterables_zipWithJavaUtilIterator_withJavaUtilIterator_(id<JavaUtilIterator> iter1, id<JavaUtilIterator> iter2) {
  EduStanfordNlpUtilIterables_initialize();
  return new_EduStanfordNlpUtilIterables_$8_initWithJavaUtilIterator_withJavaUtilIterator_(iter1, iter2);
}

id<JavaLangIterable> EduStanfordNlpUtilIterables_mergeWithJavaLangIterable_withJavaLangIterable_withEduStanfordNlpUtilIterables_IncrementComparator_(id<JavaLangIterable> iter1, id<JavaLangIterable> iter2, id<EduStanfordNlpUtilIterables_IncrementComparator> comparator) {
  EduStanfordNlpUtilIterables_initialize();
  return new_EduStanfordNlpUtilIterables_$9_initWithJavaLangIterable_withJavaLangIterable_withEduStanfordNlpUtilIterables_IncrementComparator_(iter1, iter2, comparator);
}

id<JavaLangIterable> EduStanfordNlpUtilIterables_mergeWithJavaLangIterable_withJavaLangIterable_withJavaUtilComparator_(id<JavaLangIterable> iter1, id<JavaLangIterable> iter2, id<JavaUtilComparator> comparator) {
  EduStanfordNlpUtilIterables_initialize();
  id<EduStanfordNlpUtilIterables_IncrementComparator> inc = new_EduStanfordNlpUtilIterables_$Lambda$1_initWithJavaUtilComparator_(comparator);
  return EduStanfordNlpUtilIterables_mergeWithJavaLangIterable_withJavaLangIterable_withEduStanfordNlpUtilIterables_IncrementComparator_(iter1, iter2, inc);
}

id<JavaLangIterable> EduStanfordNlpUtilIterables_mergeWithJavaLangIterable_withJavaLangIterable_withJavaLangIterable_withEduStanfordNlpUtilIterables_IncrementComparator_withEduStanfordNlpUtilIterables_IncrementComparator_(id<JavaLangIterable> iter1, id<JavaLangIterable> iter2, id<JavaLangIterable> iter3, id<EduStanfordNlpUtilIterables_IncrementComparator> comparatorA, id<EduStanfordNlpUtilIterables_IncrementComparator> comparatorB) {
  EduStanfordNlpUtilIterables_initialize();
  id<JavaLangIterable> partial = EduStanfordNlpUtilIterables_mergeWithJavaLangIterable_withJavaLangIterable_withEduStanfordNlpUtilIterables_IncrementComparator_(iter1, iter2, comparatorA);
  id<EduStanfordNlpUtilIterables_IncrementComparator> inc = new_EduStanfordNlpUtilIterables_$10_initWithEduStanfordNlpUtilIterables_IncrementComparator_(comparatorB);
  id<JavaUtilFunctionFunction> flatten = JreLoadStatic(EduStanfordNlpUtilIterables_$Lambda$2, instance);
  return EduStanfordNlpUtilIterables_transformWithJavaLangIterable_withJavaUtilFunctionFunction_(EduStanfordNlpUtilIterables_mergeWithJavaLangIterable_withJavaLangIterable_withEduStanfordNlpUtilIterables_IncrementComparator_(partial, iter3, inc), flatten);
}

id<JavaLangIterable> EduStanfordNlpUtilIterables_mergeWithJavaLangIterable_withJavaLangIterable_withJavaLangIterable_withJavaUtilComparator_(id<JavaLangIterable> iter1, id<JavaLangIterable> iter2, id<JavaLangIterable> iter3, id<JavaUtilComparator> comparator) {
  EduStanfordNlpUtilIterables_initialize();
  id<EduStanfordNlpUtilIterables_IncrementComparator> inc = new_EduStanfordNlpUtilIterables_$Lambda$3_initWithJavaUtilComparator_(comparator);
  return EduStanfordNlpUtilIterables_mergeWithJavaLangIterable_withJavaLangIterable_withJavaLangIterable_withEduStanfordNlpUtilIterables_IncrementComparator_withEduStanfordNlpUtilIterables_IncrementComparator_(iter1, iter2, iter3, inc, inc);
}

id<JavaLangIterable> EduStanfordNlpUtilIterables_groupWithJavaLangIterable_withJavaUtilComparator_(id<JavaLangIterable> iterable, id<JavaUtilComparator> comparator) {
  EduStanfordNlpUtilIterables_initialize();
  return new_EduStanfordNlpUtilIterables_$11_initWithJavaLangIterable_withJavaUtilComparator_(iterable, comparator);
}

NSString *EduStanfordNlpUtilIterables_toStringWithJavaLangIterable_withNSString_(id<JavaLangIterable> iter, NSString *glue) {
  EduStanfordNlpUtilIterables_initialize();
  JavaLangStringBuilder *builder = new_JavaLangStringBuilder_init();
  for (id<JavaUtilIterator> it = [((id<JavaLangIterable>) nil_chk(iter)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    (void) [builder appendWithId:[it next]];
    if ([it hasNext]) {
      (void) [builder appendWithNSString:glue];
    }
  }
  return [builder description];
}

id<JavaLangIterable> EduStanfordNlpUtilIterables_sampleWithJavaLangIterable_withInt_withInt_withJavaUtilRandom_(id<JavaLangIterable> items, jint n, jint k, JavaUtilRandom *random) {
  EduStanfordNlpUtilIterables_initialize();
  id<JavaUtilList> indexes = new_JavaUtilArrayList_init();
  for (jint i = 0; i < n; ++i) {
    [indexes addWithId:JavaLangInteger_valueOfWithInt_(i)];
  }
  JavaUtilCollections_shuffleWithJavaUtilList_withJavaUtilRandom_(indexes, random);
  id<JavaUtilSet> indexSet = EduStanfordNlpUtilGenerics_newHashSetWithJavaUtilCollection_([indexes subListWithInt:0 withInt:k]);
  return EduStanfordNlpUtilIterables_filterWithJavaLangIterable_withJavaUtilFunctionFunction_(items, new_EduStanfordNlpUtilIterables_$12_initWithJavaUtilSet_(indexSet));
}

JavaUtilArrayList *EduStanfordNlpUtilIterables_asArrayListWithJavaUtilIterator_(id<JavaUtilIterator> iter) {
  EduStanfordNlpUtilIterables_initialize();
  JavaUtilArrayList *al = new_JavaUtilArrayList_init();
  return (JavaUtilArrayList *) cast_chk(EduStanfordNlpUtilIterables_addAllWithJavaUtilIterator_withJavaUtilCollection_(iter, al), [JavaUtilArrayList class]);
}

JavaUtilHashSet *EduStanfordNlpUtilIterables_asHashSetWithJavaUtilIterator_(id<JavaUtilIterator> iter) {
  EduStanfordNlpUtilIterables_initialize();
  JavaUtilHashSet *hs = new_JavaUtilHashSet_init();
  return (JavaUtilHashSet *) cast_chk(EduStanfordNlpUtilIterables_addAllWithJavaUtilIterator_withJavaUtilCollection_(iter, hs), [JavaUtilHashSet class]);
}

id<JavaUtilCollection> EduStanfordNlpUtilIterables_asCollectionWithJavaUtilIterator_withEduStanfordNlpUtilCollectionFactory_(id<JavaUtilIterator> iter, EduStanfordNlpUtilCollectionFactory *cf) {
  EduStanfordNlpUtilIterables_initialize();
  id<JavaUtilCollection> c = [((EduStanfordNlpUtilCollectionFactory *) nil_chk(cf)) newCollection];
  return EduStanfordNlpUtilIterables_addAllWithJavaUtilIterator_withJavaUtilCollection_(iter, c);
}

id<JavaUtilCollection> EduStanfordNlpUtilIterables_addAllWithJavaUtilIterator_withJavaUtilCollection_(id<JavaUtilIterator> iter, id<JavaUtilCollection> c) {
  EduStanfordNlpUtilIterables_initialize();
  while ([((id<JavaUtilIterator>) nil_chk(iter)) hasNext]) {
    [((id<JavaUtilCollection>) nil_chk(c)) addWithId:[iter next]];
  }
  return c;
}

void EduStanfordNlpUtilIterables_mainWithNSStringArray_(IOSObjectArray *args) {
  EduStanfordNlpUtilIterables_initialize();
  IOSObjectArray *test = [IOSObjectArray newArrayWithObjects:(id[]){ @"a", @"b", @"c" } count:3 type:NSString_class_()];
  id<JavaUtilList> l = JavaUtilArrays_asListWithNSObjectArray_(test);
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithId:EduStanfordNlpUtilIterables_asArrayListWithJavaUtilIterator_([((id<JavaUtilList>) nil_chk(l)) iterator])];
  [JreLoadStatic(JavaLangSystem, out) printlnWithId:EduStanfordNlpUtilIterables_asHashSetWithJavaUtilIterator_([l iterator])];
  [JreLoadStatic(JavaLangSystem, out) printlnWithId:EduStanfordNlpUtilIterables_asCollectionWithJavaUtilIterator_withEduStanfordNlpUtilCollectionFactory_([l iterator], EduStanfordNlpUtilCollectionFactory_hashSetFactory())];
  JavaUtilArrayList *al = new_JavaUtilArrayList_init();
  [al addWithId:@"d"];
  [JreLoadStatic(JavaLangSystem, out) printlnWithId:EduStanfordNlpUtilIterables_addAllWithJavaUtilIterator_withJavaUtilCollection_([l iterator], al)];
}

void EduStanfordNlpUtilIterables_init(EduStanfordNlpUtilIterables *self) {
  NSObject_init(self);
}

EduStanfordNlpUtilIterables *new_EduStanfordNlpUtilIterables_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilIterables, init)
}

EduStanfordNlpUtilIterables *create_EduStanfordNlpUtilIterables_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilIterables, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpUtilIterables)

@implementation EduStanfordNlpUtilIterables_IncrementComparator

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "I", 0x401, 0, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(compareWithId:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "compare", "LNSObject;LNSObject;", "(TV1;TV2;)I", "LEduStanfordNlpUtilIterables;", "<V1:Ljava/lang/Object;V2:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilIterables_IncrementComparator = { "IncrementComparator", "edu.stanford.nlp.util", ptrTable, methods, NULL, 7, 0x609, 1, 0, 3, -1, -1, 4, -1 };
  return &_EduStanfordNlpUtilIterables_IncrementComparator;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(EduStanfordNlpUtilIterables_IncrementComparator)

@implementation EduStanfordNlpUtilIterables_$Lambda$1

- (jint)compareWithId:(id)a
               withId:(id)b {
  return [((id<JavaUtilComparator>) nil_chk(val$comparator_)) compareWithId:a withId:b];
}

@end

void EduStanfordNlpUtilIterables_$Lambda$1_initWithJavaUtilComparator_(EduStanfordNlpUtilIterables_$Lambda$1 *self, id<JavaUtilComparator> capture$0) {
  self->val$comparator_ = capture$0;
  NSObject_init(self);
}

EduStanfordNlpUtilIterables_$Lambda$1 *new_EduStanfordNlpUtilIterables_$Lambda$1_initWithJavaUtilComparator_(id<JavaUtilComparator> capture$0) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilIterables_$Lambda$1, initWithJavaUtilComparator_, capture$0)
}

EduStanfordNlpUtilIterables_$Lambda$1 *create_EduStanfordNlpUtilIterables_$Lambda$1_initWithJavaUtilComparator_(id<JavaUtilComparator> capture$0) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilIterables_$Lambda$1, initWithJavaUtilComparator_, capture$0)
}

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpUtilIterables_$Lambda$2)

@implementation EduStanfordNlpUtilIterables_$Lambda$2

- (id)applyWithId:(EduStanfordNlpUtilPair *)inArg {
  return new_EduStanfordNlpUtilTriple_initWithId_withId_withId_(((EduStanfordNlpUtilPair *) nil_chk(((EduStanfordNlpUtilPair *) nil_chk(inArg))->first_))->first_, ((EduStanfordNlpUtilPair *) inArg->first_)->second_, inArg->second_);
}

- (id<JavaUtilFunctionFunction>)andThenWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_andThenWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilFunctionFunction>)composeWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_composeWithJavaUtilFunctionFunction_(self, arg0);
}

+ (void)initialize {
  if (self == [EduStanfordNlpUtilIterables_$Lambda$2 class]) {
    EduStanfordNlpUtilIterables_$Lambda$2_instance = new_EduStanfordNlpUtilIterables_$Lambda$2_init();
    J2OBJC_SET_INITIALIZED(EduStanfordNlpUtilIterables_$Lambda$2)
  }
}

@end

void EduStanfordNlpUtilIterables_$Lambda$2_init(EduStanfordNlpUtilIterables_$Lambda$2 *self) {
  NSObject_init(self);
}

EduStanfordNlpUtilIterables_$Lambda$2 *new_EduStanfordNlpUtilIterables_$Lambda$2_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilIterables_$Lambda$2, init)
}

EduStanfordNlpUtilIterables_$Lambda$2 *create_EduStanfordNlpUtilIterables_$Lambda$2_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilIterables_$Lambda$2, init)
}

@implementation EduStanfordNlpUtilIterables_$Lambda$3

- (jint)compareWithId:(id)a
               withId:(id)b {
  return [((id<JavaUtilComparator>) nil_chk(val$comparator_)) compareWithId:a withId:b];
}

@end

void EduStanfordNlpUtilIterables_$Lambda$3_initWithJavaUtilComparator_(EduStanfordNlpUtilIterables_$Lambda$3 *self, id<JavaUtilComparator> capture$0) {
  self->val$comparator_ = capture$0;
  NSObject_init(self);
}

EduStanfordNlpUtilIterables_$Lambda$3 *new_EduStanfordNlpUtilIterables_$Lambda$3_initWithJavaUtilComparator_(id<JavaUtilComparator> capture$0) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilIterables_$Lambda$3, initWithJavaUtilComparator_, capture$0)
}

EduStanfordNlpUtilIterables_$Lambda$3 *create_EduStanfordNlpUtilIterables_$Lambda$3_initWithJavaUtilComparator_(id<JavaUtilComparator> capture$0) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilIterables_$Lambda$3, initWithJavaUtilComparator_, capture$0)
}

@implementation EduStanfordNlpUtilIterables_$1

- (id<JavaUtilIterator>)iterator {
  return new_EduStanfordNlpUtilIterables_$1_$1_initWithEduStanfordNlpUtilIterables_$1_(self);
}

- (instancetype)initWithJavaLangIterable:(id<JavaLangIterable>)capture$0
            withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)capture$1 {
  EduStanfordNlpUtilIterables_$1_initWithJavaLangIterable_withJavaUtilFunctionFunction_(self, capture$0, capture$1);
  return self;
}

- (void)forEachWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaLangIterable_forEachWithJavaUtilFunctionConsumer_(self, arg0);
}

- (id<JavaUtilSpliterator>)spliterator {
  return JavaLangIterable_spliterator(self);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(iterator);
  methods[1].selector = @selector(initWithJavaLangIterable:withJavaUtilFunctionFunction:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$iterable_", "LJavaLangIterable;", .constantValue.asLong = 0, 0x1012, -1, -1, 3, -1 },
    { "val$function_", "LJavaUtilFunctionFunction;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Iterator<TV;>;", "LJavaLangIterable;LJavaUtilFunctionFunction;", "(Ljava/lang/Iterable<TK;>;Ljava/util/function/Function<-TK;+TV;>;)V", "Ljava/lang/Iterable<TK;>;", "Ljava/util/function/Function<-TK;+TV;>;", "LEduStanfordNlpUtilIterables;", "transformWithJavaLangIterable:withJavaUtilFunctionFunction:", "Ljava/lang/Object;Ljava/lang/Iterable<TV;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilIterables_$1 = { "", "edu.stanford.nlp.util", ptrTable, methods, fields, 7, 0x8008, 2, 2, 5, -1, 6, 7, -1 };
  return &_EduStanfordNlpUtilIterables_$1;
}

@end

void EduStanfordNlpUtilIterables_$1_initWithJavaLangIterable_withJavaUtilFunctionFunction_(EduStanfordNlpUtilIterables_$1 *self, id<JavaLangIterable> capture$0, id<JavaUtilFunctionFunction> capture$1) {
  self->val$iterable_ = capture$0;
  self->val$function_ = capture$1;
  NSObject_init(self);
}

EduStanfordNlpUtilIterables_$1 *new_EduStanfordNlpUtilIterables_$1_initWithJavaLangIterable_withJavaUtilFunctionFunction_(id<JavaLangIterable> capture$0, id<JavaUtilFunctionFunction> capture$1) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilIterables_$1, initWithJavaLangIterable_withJavaUtilFunctionFunction_, capture$0, capture$1)
}

EduStanfordNlpUtilIterables_$1 *create_EduStanfordNlpUtilIterables_$1_initWithJavaLangIterable_withJavaUtilFunctionFunction_(id<JavaLangIterable> capture$0, id<JavaUtilFunctionFunction> capture$1) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilIterables_$1, initWithJavaLangIterable_withJavaUtilFunctionFunction_, capture$0, capture$1)
}

@implementation EduStanfordNlpUtilIterables_$1_$1

- (jboolean)hasNext {
  return [((id<JavaUtilIterator>) nil_chk(inner_)) hasNext];
}

- (id)next {
  return [((id<JavaUtilFunctionFunction>) nil_chk(this$0_->val$function_)) applyWithId:[((id<JavaUtilIterator>) nil_chk(inner_)) next]];
}

- (void)remove {
  [((id<JavaUtilIterator>) nil_chk(inner_)) remove];
}

- (instancetype)initWithEduStanfordNlpUtilIterables_$1:(EduStanfordNlpUtilIterables_$1 *)outer$ {
  EduStanfordNlpUtilIterables_$1_$1_initWithEduStanfordNlpUtilIterables_$1_(self, outer$);
  return self;
}

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaUtilIterator_forEachRemainingWithJavaUtilFunctionConsumer_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(hasNext);
  methods[1].selector = @selector(next);
  methods[2].selector = @selector(remove);
  methods[3].selector = @selector(initWithEduStanfordNlpUtilIterables_$1:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LEduStanfordNlpUtilIterables_$1;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "inner_", "LJavaUtilIterator;", .constantValue.asLong = 0, 0x0, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "()TV;", "LEduStanfordNlpUtilIterables_$1;", "Ljava/util/Iterator<TK;>;", "iterator", "Ljava/lang/Object;Ljava/util/Iterator<TV;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilIterables_$1_$1 = { "", "edu.stanford.nlp.util", ptrTable, methods, fields, 7, 0x8008, 4, 2, 1, -1, 3, 4, -1 };
  return &_EduStanfordNlpUtilIterables_$1_$1;
}

@end

void EduStanfordNlpUtilIterables_$1_$1_initWithEduStanfordNlpUtilIterables_$1_(EduStanfordNlpUtilIterables_$1_$1 *self, EduStanfordNlpUtilIterables_$1 *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
  self->inner_ = [((id<JavaLangIterable>) nil_chk(outer$->val$iterable_)) iterator];
}

EduStanfordNlpUtilIterables_$1_$1 *new_EduStanfordNlpUtilIterables_$1_$1_initWithEduStanfordNlpUtilIterables_$1_(EduStanfordNlpUtilIterables_$1 *outer$) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilIterables_$1_$1, initWithEduStanfordNlpUtilIterables_$1_, outer$)
}

EduStanfordNlpUtilIterables_$1_$1 *create_EduStanfordNlpUtilIterables_$1_$1_initWithEduStanfordNlpUtilIterables_$1_(EduStanfordNlpUtilIterables_$1 *outer$) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilIterables_$1_$1, initWithEduStanfordNlpUtilIterables_$1_, outer$)
}

@implementation EduStanfordNlpUtilIterables_$2

- (id<JavaUtilIterator>)iterator {
  return new_EduStanfordNlpUtilIterables_$2_$1_initWithEduStanfordNlpUtilIterables_$2_(self);
}

- (instancetype)initWithJavaLangIterable:(id<JavaLangIterable>)capture$0
            withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)capture$1 {
  EduStanfordNlpUtilIterables_$2_initWithJavaLangIterable_withJavaUtilFunctionFunction_(self, capture$0, capture$1);
  return self;
}

- (void)forEachWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaLangIterable_forEachWithJavaUtilFunctionConsumer_(self, arg0);
}

- (id<JavaUtilSpliterator>)spliterator {
  return JavaLangIterable_spliterator(self);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(iterator);
  methods[1].selector = @selector(initWithJavaLangIterable:withJavaUtilFunctionFunction:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$iterable_", "LJavaLangIterable;", .constantValue.asLong = 0, 0x1012, -1, -1, 3, -1 },
    { "val$accept_", "LJavaUtilFunctionFunction;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Iterator<TT;>;", "LJavaLangIterable;LJavaUtilFunctionFunction;", "(Ljava/lang/Iterable<TT;>;Ljava/util/function/Function<TT;Ljava/lang/Boolean;>;)V", "Ljava/lang/Iterable<TT;>;", "Ljava/util/function/Function<TT;Ljava/lang/Boolean;>;", "LEduStanfordNlpUtilIterables;", "filterWithJavaLangIterable:withJavaUtilFunctionFunction:", "Ljava/lang/Object;Ljava/lang/Iterable<TT;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilIterables_$2 = { "", "edu.stanford.nlp.util", ptrTable, methods, fields, 7, 0x8008, 2, 2, 5, -1, 6, 7, -1 };
  return &_EduStanfordNlpUtilIterables_$2;
}

@end

void EduStanfordNlpUtilIterables_$2_initWithJavaLangIterable_withJavaUtilFunctionFunction_(EduStanfordNlpUtilIterables_$2 *self, id<JavaLangIterable> capture$0, id<JavaUtilFunctionFunction> capture$1) {
  self->val$iterable_ = capture$0;
  self->val$accept_ = capture$1;
  NSObject_init(self);
}

EduStanfordNlpUtilIterables_$2 *new_EduStanfordNlpUtilIterables_$2_initWithJavaLangIterable_withJavaUtilFunctionFunction_(id<JavaLangIterable> capture$0, id<JavaUtilFunctionFunction> capture$1) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilIterables_$2, initWithJavaLangIterable_withJavaUtilFunctionFunction_, capture$0, capture$1)
}

EduStanfordNlpUtilIterables_$2 *create_EduStanfordNlpUtilIterables_$2_initWithJavaLangIterable_withJavaUtilFunctionFunction_(id<JavaLangIterable> capture$0, id<JavaUtilFunctionFunction> capture$1) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilIterables_$2, initWithJavaLangIterable_withJavaUtilFunctionFunction_, capture$0, capture$1)
}

@implementation EduStanfordNlpUtilIterables_$2_$1

- (jboolean)hasNext {
  [self prepare];
  return queued_;
}

- (id)next {
  [self prepare];
  if (!queued_) {
    @throw new_JavaLangRuntimeException_initWithNSString_(@"Filter .next() called with no next");
  }
  id rv = next_;
  next_ = nil;
  queued_ = false;
  return rv;
}

- (void)prepare {
  if (queued_) {
    return;
  }
  while ([((id<JavaUtilIterator>) nil_chk(inner_)) hasNext]) {
    id next = [((id<JavaUtilIterator>) nil_chk(inner_)) next];
    if ([((JavaLangBoolean *) nil_chk([((id<JavaUtilFunctionFunction>) nil_chk(this$0_->val$accept_)) applyWithId:next])) booleanValue]) {
      self->next_ = next;
      self->queued_ = true;
      return;
    }
  }
}

- (void)remove {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (instancetype)initWithEduStanfordNlpUtilIterables_$2:(EduStanfordNlpUtilIterables_$2 *)outer$ {
  EduStanfordNlpUtilIterables_$2_$1_initWithEduStanfordNlpUtilIterables_$2_(self, outer$);
  return self;
}

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaUtilIterator_forEachRemainingWithJavaUtilFunctionConsumer_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(hasNext);
  methods[1].selector = @selector(next);
  methods[2].selector = @selector(prepare);
  methods[3].selector = @selector(remove);
  methods[4].selector = @selector(initWithEduStanfordNlpUtilIterables_$2:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LEduStanfordNlpUtilIterables_$2;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "inner_", "LJavaUtilIterator;", .constantValue.asLong = 0, 0x0, -1, -1, 2, -1 },
    { "queued_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "next_", "LNSObject;", .constantValue.asLong = 0, 0x0, -1, -1, 3, -1 },
  };
  static const void *ptrTable[] = { "()TT;", "LEduStanfordNlpUtilIterables_$2;", "Ljava/util/Iterator<TT;>;", "TT;", "iterator", "Ljava/lang/Object;Ljava/util/Iterator<TT;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilIterables_$2_$1 = { "", "edu.stanford.nlp.util", ptrTable, methods, fields, 7, 0x8008, 5, 4, 1, -1, 4, 5, -1 };
  return &_EduStanfordNlpUtilIterables_$2_$1;
}

@end

void EduStanfordNlpUtilIterables_$2_$1_initWithEduStanfordNlpUtilIterables_$2_(EduStanfordNlpUtilIterables_$2_$1 *self, EduStanfordNlpUtilIterables_$2 *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
  self->inner_ = [((id<JavaLangIterable>) nil_chk(outer$->val$iterable_)) iterator];
  self->queued_ = false;
  self->next_ = nil;
}

EduStanfordNlpUtilIterables_$2_$1 *new_EduStanfordNlpUtilIterables_$2_$1_initWithEduStanfordNlpUtilIterables_$2_(EduStanfordNlpUtilIterables_$2 *outer$) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilIterables_$2_$1, initWithEduStanfordNlpUtilIterables_$2_, outer$)
}

EduStanfordNlpUtilIterables_$2_$1 *create_EduStanfordNlpUtilIterables_$2_$1_initWithEduStanfordNlpUtilIterables_$2_(EduStanfordNlpUtilIterables_$2 *outer$) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilIterables_$2_$1, initWithEduStanfordNlpUtilIterables_$2_, outer$)
}

@implementation EduStanfordNlpUtilIterables_$3

- (id<JavaUtilIterator>)iterator {
  return new_EduStanfordNlpUtilIterables_$3_$1_initWithEduStanfordNlpUtilIterables_$3_(self);
}

- (instancetype)initWithJavaLangIterable:(id<JavaLangIterable>)capture$0
                            withIOSClass:(IOSClass *)capture$1 {
  EduStanfordNlpUtilIterables_$3_initWithJavaLangIterable_withIOSClass_(self, capture$0, capture$1);
  return self;
}

- (void)forEachWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaLangIterable_forEachWithJavaUtilFunctionConsumer_(self, arg0);
}

- (id<JavaUtilSpliterator>)spliterator {
  return JavaLangIterable_spliterator(self);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(iterator);
  methods[1].selector = @selector(initWithJavaLangIterable:withIOSClass:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$iterable_", "LJavaLangIterable;", .constantValue.asLong = 0, 0x1012, -1, -1, 3, -1 },
    { "val$type_", "LIOSClass;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Iterator<TT;>;", "LJavaLangIterable;LIOSClass;", "(Ljava/lang/Iterable<*>;Ljava/lang/Class<+TT;>;)V", "Ljava/lang/Iterable<*>;", "Ljava/lang/Class<+TT;>;", "LEduStanfordNlpUtilIterables;", "castWithJavaLangIterable:withIOSClass:", "Ljava/lang/Object;Ljava/lang/Iterable<TT;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilIterables_$3 = { "", "edu.stanford.nlp.util", ptrTable, methods, fields, 7, 0x8008, 2, 2, 5, -1, 6, 7, -1 };
  return &_EduStanfordNlpUtilIterables_$3;
}

@end

void EduStanfordNlpUtilIterables_$3_initWithJavaLangIterable_withIOSClass_(EduStanfordNlpUtilIterables_$3 *self, id<JavaLangIterable> capture$0, IOSClass *capture$1) {
  self->val$iterable_ = capture$0;
  self->val$type_ = capture$1;
  NSObject_init(self);
}

EduStanfordNlpUtilIterables_$3 *new_EduStanfordNlpUtilIterables_$3_initWithJavaLangIterable_withIOSClass_(id<JavaLangIterable> capture$0, IOSClass *capture$1) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilIterables_$3, initWithJavaLangIterable_withIOSClass_, capture$0, capture$1)
}

EduStanfordNlpUtilIterables_$3 *create_EduStanfordNlpUtilIterables_$3_initWithJavaLangIterable_withIOSClass_(id<JavaLangIterable> capture$0, IOSClass *capture$1) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilIterables_$3, initWithJavaLangIterable_withIOSClass_, capture$0, capture$1)
}

@implementation EduStanfordNlpUtilIterables_$3_$1

- (jboolean)hasNext {
  return [((id<JavaUtilIterator>) nil_chk(inner_)) hasNext];
}

- (id)next {
  return [((IOSClass *) nil_chk(this$0_->val$type_)) cast:[((id<JavaUtilIterator>) nil_chk(inner_)) next]];
}

- (void)remove {
  [((id<JavaUtilIterator>) nil_chk(inner_)) remove];
}

- (instancetype)initWithEduStanfordNlpUtilIterables_$3:(EduStanfordNlpUtilIterables_$3 *)outer$ {
  EduStanfordNlpUtilIterables_$3_$1_initWithEduStanfordNlpUtilIterables_$3_(self, outer$);
  return self;
}

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaUtilIterator_forEachRemainingWithJavaUtilFunctionConsumer_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(hasNext);
  methods[1].selector = @selector(next);
  methods[2].selector = @selector(remove);
  methods[3].selector = @selector(initWithEduStanfordNlpUtilIterables_$3:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LEduStanfordNlpUtilIterables_$3;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "inner_", "LJavaUtilIterator;", .constantValue.asLong = 0, 0x0, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "()TT;", "LEduStanfordNlpUtilIterables_$3;", "Ljava/util/Iterator<*>;", "iterator", "Ljava/lang/Object;Ljava/util/Iterator<TT;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilIterables_$3_$1 = { "", "edu.stanford.nlp.util", ptrTable, methods, fields, 7, 0x8008, 4, 2, 1, -1, 3, 4, -1 };
  return &_EduStanfordNlpUtilIterables_$3_$1;
}

@end

void EduStanfordNlpUtilIterables_$3_$1_initWithEduStanfordNlpUtilIterables_$3_(EduStanfordNlpUtilIterables_$3_$1 *self, EduStanfordNlpUtilIterables_$3 *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
  self->inner_ = [((id<JavaLangIterable>) nil_chk(outer$->val$iterable_)) iterator];
}

EduStanfordNlpUtilIterables_$3_$1 *new_EduStanfordNlpUtilIterables_$3_$1_initWithEduStanfordNlpUtilIterables_$3_(EduStanfordNlpUtilIterables_$3 *outer$) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilIterables_$3_$1, initWithEduStanfordNlpUtilIterables_$3_, outer$)
}

EduStanfordNlpUtilIterables_$3_$1 *create_EduStanfordNlpUtilIterables_$3_$1_initWithEduStanfordNlpUtilIterables_$3_(EduStanfordNlpUtilIterables_$3 *outer$) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilIterables_$3_$1, initWithEduStanfordNlpUtilIterables_$3_, outer$)
}

@implementation EduStanfordNlpUtilIterables_$4

- (id<JavaUtilIterator>)iterator {
  return new_EduStanfordNlpUtilIterables_$4_$1_initWithEduStanfordNlpUtilIterables_$4_(self);
}

- (instancetype)initWithJavaLangIterable:(id<JavaLangIterable>)capture$0
                                 withInt:(jint)capture$1 {
  EduStanfordNlpUtilIterables_$4_initWithJavaLangIterable_withInt_(self, capture$0, capture$1);
  return self;
}

- (void)forEachWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaLangIterable_forEachWithJavaUtilFunctionConsumer_(self, arg0);
}

- (id<JavaUtilSpliterator>)spliterator {
  return JavaLangIterable_spliterator(self);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(iterator);
  methods[1].selector = @selector(initWithJavaLangIterable:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "iterator_", "LJavaUtilIterator;", .constantValue.asLong = 0, 0x10, -1, -1, 3, -1 },
    { "val$max_", "I", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Iterator<TT;>;", "LJavaLangIterable;I", "(Ljava/lang/Iterable<TT;>;I)V", "Ljava/util/Iterator<TT;>;", "LEduStanfordNlpUtilIterables;", "takeWithJavaLangIterable:withInt:", "Ljava/lang/Object;Ljava/lang/Iterable<TT;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilIterables_$4 = { "", "edu.stanford.nlp.util", ptrTable, methods, fields, 7, 0x8008, 2, 2, 4, -1, 5, 6, -1 };
  return &_EduStanfordNlpUtilIterables_$4;
}

@end

void EduStanfordNlpUtilIterables_$4_initWithJavaLangIterable_withInt_(EduStanfordNlpUtilIterables_$4 *self, id<JavaLangIterable> capture$0, jint capture$1) {
  self->val$max_ = capture$1;
  NSObject_init(self);
  self->iterator_ = [((id<JavaLangIterable>) nil_chk(capture$0)) iterator];
}

EduStanfordNlpUtilIterables_$4 *new_EduStanfordNlpUtilIterables_$4_initWithJavaLangIterable_withInt_(id<JavaLangIterable> capture$0, jint capture$1) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilIterables_$4, initWithJavaLangIterable_withInt_, capture$0, capture$1)
}

EduStanfordNlpUtilIterables_$4 *create_EduStanfordNlpUtilIterables_$4_initWithJavaLangIterable_withInt_(id<JavaLangIterable> capture$0, jint capture$1) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilIterables_$4, initWithJavaLangIterable_withInt_, capture$0, capture$1)
}

@implementation EduStanfordNlpUtilIterables_$4_$1

- (jboolean)hasNext {
  return i_ < this$0_->val$max_ && [((id<JavaUtilIterator>) nil_chk(this$0_->iterator_)) hasNext];
}

- (id)next {
  i_++;
  return [((id<JavaUtilIterator>) nil_chk(this$0_->iterator_)) next];
}

- (void)remove {
  [((id<JavaUtilIterator>) nil_chk(this$0_->iterator_)) remove];
}

- (instancetype)initWithEduStanfordNlpUtilIterables_$4:(EduStanfordNlpUtilIterables_$4 *)outer$ {
  EduStanfordNlpUtilIterables_$4_$1_initWithEduStanfordNlpUtilIterables_$4_(self, outer$);
  return self;
}

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaUtilIterator_forEachRemainingWithJavaUtilFunctionConsumer_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(hasNext);
  methods[1].selector = @selector(next);
  methods[2].selector = @selector(remove);
  methods[3].selector = @selector(initWithEduStanfordNlpUtilIterables_$4:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LEduStanfordNlpUtilIterables_$4;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "i_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "()TT;", "LEduStanfordNlpUtilIterables_$4;", "iterator", "Ljava/lang/Object;Ljava/util/Iterator<TT;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilIterables_$4_$1 = { "", "edu.stanford.nlp.util", ptrTable, methods, fields, 7, 0x8008, 4, 2, 1, -1, 2, 3, -1 };
  return &_EduStanfordNlpUtilIterables_$4_$1;
}

@end

void EduStanfordNlpUtilIterables_$4_$1_initWithEduStanfordNlpUtilIterables_$4_(EduStanfordNlpUtilIterables_$4_$1 *self, EduStanfordNlpUtilIterables_$4 *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
  self->i_ = 0;
}

EduStanfordNlpUtilIterables_$4_$1 *new_EduStanfordNlpUtilIterables_$4_$1_initWithEduStanfordNlpUtilIterables_$4_(EduStanfordNlpUtilIterables_$4 *outer$) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilIterables_$4_$1, initWithEduStanfordNlpUtilIterables_$4_, outer$)
}

EduStanfordNlpUtilIterables_$4_$1 *create_EduStanfordNlpUtilIterables_$4_$1_initWithEduStanfordNlpUtilIterables_$4_(EduStanfordNlpUtilIterables_$4 *outer$) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilIterables_$4_$1, initWithEduStanfordNlpUtilIterables_$4_, outer$)
}

@implementation EduStanfordNlpUtilIterables_$5

- (id<JavaUtilIterator>)iterator {
  return new_EduStanfordNlpUtilIterables_$5_$1_initWithEduStanfordNlpUtilIterables_$5_(self);
}

- (instancetype)initWithJavaLangIterable:(id<JavaLangIterable>)capture$0
                                 withInt:(jint)capture$1 {
  EduStanfordNlpUtilIterables_$5_initWithJavaLangIterable_withInt_(self, capture$0, capture$1);
  return self;
}

- (void)forEachWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaLangIterable_forEachWithJavaUtilFunctionConsumer_(self, arg0);
}

- (id<JavaUtilSpliterator>)spliterator {
  return JavaLangIterable_spliterator(self);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(iterator);
  methods[1].selector = @selector(initWithJavaLangIterable:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "iterator_", "LJavaUtilIterator;", .constantValue.asLong = 0, 0x10, -1, -1, 3, -1 },
    { "val$toDrop_", "I", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Iterator<TT;>;", "LJavaLangIterable;I", "(Ljava/lang/Iterable<TT;>;I)V", "Ljava/util/Iterator<TT;>;", "LEduStanfordNlpUtilIterables;", "dropWithJavaLangIterable:withInt:", "Ljava/lang/Object;Ljava/lang/Iterable<TT;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilIterables_$5 = { "", "edu.stanford.nlp.util", ptrTable, methods, fields, 7, 0x8008, 2, 2, 4, -1, 5, 6, -1 };
  return &_EduStanfordNlpUtilIterables_$5;
}

@end

void EduStanfordNlpUtilIterables_$5_initWithJavaLangIterable_withInt_(EduStanfordNlpUtilIterables_$5 *self, id<JavaLangIterable> capture$0, jint capture$1) {
  self->val$toDrop_ = capture$1;
  NSObject_init(self);
  self->iterator_ = [((id<JavaLangIterable>) nil_chk(capture$0)) iterator];
}

EduStanfordNlpUtilIterables_$5 *new_EduStanfordNlpUtilIterables_$5_initWithJavaLangIterable_withInt_(id<JavaLangIterable> capture$0, jint capture$1) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilIterables_$5, initWithJavaLangIterable_withInt_, capture$0, capture$1)
}

EduStanfordNlpUtilIterables_$5 *create_EduStanfordNlpUtilIterables_$5_initWithJavaLangIterable_withInt_(id<JavaLangIterable> capture$0, jint capture$1) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilIterables_$5, initWithJavaLangIterable_withInt_, capture$0, capture$1)
}

@implementation EduStanfordNlpUtilIterables_$5_$1

- (jboolean)hasNext {
  while (skipped_ < this$0_->val$toDrop_ && [((id<JavaUtilIterator>) nil_chk(this$0_->iterator_)) hasNext]) {
    (void) [((id<JavaUtilIterator>) nil_chk(this$0_->iterator_)) next];
    skipped_ += 1;
  }
  return [((id<JavaUtilIterator>) nil_chk(this$0_->iterator_)) hasNext];
}

- (id)next {
  while (skipped_ < this$0_->val$toDrop_ && [((id<JavaUtilIterator>) nil_chk(this$0_->iterator_)) hasNext]) {
    (void) [((id<JavaUtilIterator>) nil_chk(this$0_->iterator_)) next];
    skipped_ += 1;
  }
  return [((id<JavaUtilIterator>) nil_chk(this$0_->iterator_)) next];
}

- (void)remove {
  [((id<JavaUtilIterator>) nil_chk(this$0_->iterator_)) remove];
}

- (instancetype)initWithEduStanfordNlpUtilIterables_$5:(EduStanfordNlpUtilIterables_$5 *)outer$ {
  EduStanfordNlpUtilIterables_$5_$1_initWithEduStanfordNlpUtilIterables_$5_(self, outer$);
  return self;
}

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaUtilIterator_forEachRemainingWithJavaUtilFunctionConsumer_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(hasNext);
  methods[1].selector = @selector(next);
  methods[2].selector = @selector(remove);
  methods[3].selector = @selector(initWithEduStanfordNlpUtilIterables_$5:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LEduStanfordNlpUtilIterables_$5;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "skipped_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "()TT;", "LEduStanfordNlpUtilIterables_$5;", "iterator", "Ljava/lang/Object;Ljava/util/Iterator<TT;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilIterables_$5_$1 = { "", "edu.stanford.nlp.util", ptrTable, methods, fields, 7, 0x8008, 4, 2, 1, -1, 2, 3, -1 };
  return &_EduStanfordNlpUtilIterables_$5_$1;
}

@end

void EduStanfordNlpUtilIterables_$5_$1_initWithEduStanfordNlpUtilIterables_$5_(EduStanfordNlpUtilIterables_$5_$1 *self, EduStanfordNlpUtilIterables_$5 *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
  self->skipped_ = 0;
}

EduStanfordNlpUtilIterables_$5_$1 *new_EduStanfordNlpUtilIterables_$5_$1_initWithEduStanfordNlpUtilIterables_$5_(EduStanfordNlpUtilIterables_$5 *outer$) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilIterables_$5_$1, initWithEduStanfordNlpUtilIterables_$5_, outer$)
}

EduStanfordNlpUtilIterables_$5_$1 *create_EduStanfordNlpUtilIterables_$5_$1_initWithEduStanfordNlpUtilIterables_$5_(EduStanfordNlpUtilIterables_$5 *outer$) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilIterables_$5_$1, initWithEduStanfordNlpUtilIterables_$5_, outer$)
}

@implementation EduStanfordNlpUtilIterables_$6

- (id<JavaUtilIterator>)iterator {
  id<JavaUtilIterator> iterators = [((id<JavaLangIterable>) nil_chk(val$iterables_)) iterator];
  return new_EduStanfordNlpUtilIterables_$6_$1_initWithJavaUtilIterator_(iterators);
}

- (instancetype)initWithJavaLangIterable:(id<JavaLangIterable>)capture$0 {
  EduStanfordNlpUtilIterables_$6_initWithJavaLangIterable_(self, capture$0);
  return self;
}

- (void)forEachWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaLangIterable_forEachWithJavaUtilFunctionConsumer_(self, arg0);
}

- (id<JavaUtilSpliterator>)spliterator {
  return JavaLangIterable_spliterator(self);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(iterator);
  methods[1].selector = @selector(initWithJavaLangIterable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$iterables_", "LJavaLangIterable;", .constantValue.asLong = 0, 0x1012, -1, -1, 3, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Iterator<TT;>;", "LJavaLangIterable;", "(Ljava/lang/Iterable<+Ljava/lang/Iterable<TT;>;>;)V", "Ljava/lang/Iterable<+Ljava/lang/Iterable<TT;>;>;", "LEduStanfordNlpUtilIterables;", "chainWithJavaLangIterable:", "Ljava/lang/Object;Ljava/lang/Iterable<TT;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilIterables_$6 = { "", "edu.stanford.nlp.util", ptrTable, methods, fields, 7, 0x8008, 2, 1, 4, -1, 5, 6, -1 };
  return &_EduStanfordNlpUtilIterables_$6;
}

@end

void EduStanfordNlpUtilIterables_$6_initWithJavaLangIterable_(EduStanfordNlpUtilIterables_$6 *self, id<JavaLangIterable> capture$0) {
  self->val$iterables_ = capture$0;
  NSObject_init(self);
}

EduStanfordNlpUtilIterables_$6 *new_EduStanfordNlpUtilIterables_$6_initWithJavaLangIterable_(id<JavaLangIterable> capture$0) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilIterables_$6, initWithJavaLangIterable_, capture$0)
}

EduStanfordNlpUtilIterables_$6 *create_EduStanfordNlpUtilIterables_$6_initWithJavaLangIterable_(id<JavaLangIterable> capture$0) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilIterables_$6, initWithJavaLangIterable_, capture$0)
}

@implementation EduStanfordNlpUtilIterables_$6_$1

- (jboolean)hasNext {
  while (current_ == nil || ![current_ hasNext]) {
    if ([((id<JavaUtilIterator>) nil_chk(val$iterators_)) hasNext]) {
      current_ = [((id<JavaLangIterable>) nil_chk([val$iterators_ next])) iterator];
    }
    else {
      return false;
    }
  }
  return true;
}

- (id)next {
  return [((id<JavaUtilIterator>) nil_chk(current_)) next];
}

- (void)remove {
  [((id<JavaUtilIterator>) nil_chk(current_)) remove];
}

- (instancetype)initWithJavaUtilIterator:(id<JavaUtilIterator>)capture$0 {
  EduStanfordNlpUtilIterables_$6_$1_initWithJavaUtilIterator_(self, capture$0);
  return self;
}

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaUtilIterator_forEachRemainingWithJavaUtilFunctionConsumer_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(hasNext);
  methods[1].selector = @selector(next);
  methods[2].selector = @selector(remove);
  methods[3].selector = @selector(initWithJavaUtilIterator:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "current_", "LJavaUtilIterator;", .constantValue.asLong = 0, 0x2, -1, -1, 3, -1 },
    { "val$iterators_", "LJavaUtilIterator;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "()TT;", "LJavaUtilIterator;", "(Ljava/util/Iterator<+Ljava/lang/Iterable<TT;>;>;)V", "Ljava/util/Iterator<TT;>;", "Ljava/util/Iterator<+Ljava/lang/Iterable<TT;>;>;", "LEduStanfordNlpUtilIterables_$6;", "iterator", "Ljava/lang/Object;Ljava/util/Iterator<TT;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilIterables_$6_$1 = { "", "edu.stanford.nlp.util", ptrTable, methods, fields, 7, 0x8008, 4, 2, 5, -1, 6, 7, -1 };
  return &_EduStanfordNlpUtilIterables_$6_$1;
}

@end

void EduStanfordNlpUtilIterables_$6_$1_initWithJavaUtilIterator_(EduStanfordNlpUtilIterables_$6_$1 *self, id<JavaUtilIterator> capture$0) {
  self->val$iterators_ = capture$0;
  NSObject_init(self);
  self->current_ = nil;
}

EduStanfordNlpUtilIterables_$6_$1 *new_EduStanfordNlpUtilIterables_$6_$1_initWithJavaUtilIterator_(id<JavaUtilIterator> capture$0) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilIterables_$6_$1, initWithJavaUtilIterator_, capture$0)
}

EduStanfordNlpUtilIterables_$6_$1 *create_EduStanfordNlpUtilIterables_$6_$1_initWithJavaUtilIterator_(id<JavaUtilIterator> capture$0) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilIterables_$6_$1, initWithJavaUtilIterator_, capture$0)
}

@implementation EduStanfordNlpUtilIterables_$7

- (id<JavaUtilIterator>)iterator {
  return EduStanfordNlpUtilIterables_zipWithJavaUtilIterator_withJavaUtilIterator_([((id<JavaLangIterable>) nil_chk(val$iter1_)) iterator], [((id<JavaLangIterable>) nil_chk(val$iter2_)) iterator]);
}

- (instancetype)initWithJavaLangIterable:(id<JavaLangIterable>)capture$0
                    withJavaLangIterable:(id<JavaLangIterable>)capture$1 {
  EduStanfordNlpUtilIterables_$7_initWithJavaLangIterable_withJavaLangIterable_(self, capture$0, capture$1);
  return self;
}

- (void)forEachWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaLangIterable_forEachWithJavaUtilFunctionConsumer_(self, arg0);
}

- (id<JavaUtilSpliterator>)spliterator {
  return JavaLangIterable_spliterator(self);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(iterator);
  methods[1].selector = @selector(initWithJavaLangIterable:withJavaLangIterable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$iter1_", "LJavaLangIterable;", .constantValue.asLong = 0, 0x1012, -1, -1, 3, -1 },
    { "val$iter2_", "LJavaLangIterable;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Iterator<Ledu/stanford/nlp/util/Pair<TT1;TT2;>;>;", "LJavaLangIterable;LJavaLangIterable;", "(Ljava/lang/Iterable<TT1;>;Ljava/lang/Iterable<TT2;>;)V", "Ljava/lang/Iterable<TT1;>;", "Ljava/lang/Iterable<TT2;>;", "LEduStanfordNlpUtilIterables;", "zipWithJavaLangIterable:withJavaLangIterable:", "Ljava/lang/Object;Ljava/lang/Iterable<Ledu/stanford/nlp/util/Pair<TT1;TT2;>;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilIterables_$7 = { "", "edu.stanford.nlp.util", ptrTable, methods, fields, 7, 0x8008, 2, 2, 5, -1, 6, 7, -1 };
  return &_EduStanfordNlpUtilIterables_$7;
}

@end

void EduStanfordNlpUtilIterables_$7_initWithJavaLangIterable_withJavaLangIterable_(EduStanfordNlpUtilIterables_$7 *self, id<JavaLangIterable> capture$0, id<JavaLangIterable> capture$1) {
  self->val$iter1_ = capture$0;
  self->val$iter2_ = capture$1;
  NSObject_init(self);
}

EduStanfordNlpUtilIterables_$7 *new_EduStanfordNlpUtilIterables_$7_initWithJavaLangIterable_withJavaLangIterable_(id<JavaLangIterable> capture$0, id<JavaLangIterable> capture$1) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilIterables_$7, initWithJavaLangIterable_withJavaLangIterable_, capture$0, capture$1)
}

EduStanfordNlpUtilIterables_$7 *create_EduStanfordNlpUtilIterables_$7_initWithJavaLangIterable_withJavaLangIterable_(id<JavaLangIterable> capture$0, id<JavaLangIterable> capture$1) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilIterables_$7, initWithJavaLangIterable_withJavaLangIterable_, capture$0, capture$1)
}

@implementation EduStanfordNlpUtilIterables_$8

- (jboolean)hasNext {
  return [((id<JavaUtilIterator>) nil_chk(val$iter1_)) hasNext] && [((id<JavaUtilIterator>) nil_chk(val$iter2_)) hasNext];
}

- (EduStanfordNlpUtilPair *)next {
  return new_EduStanfordNlpUtilPair_initWithId_withId_([((id<JavaUtilIterator>) nil_chk(val$iter1_)) next], [((id<JavaUtilIterator>) nil_chk(val$iter2_)) next]);
}

- (void)remove {
  [((id<JavaUtilIterator>) nil_chk(val$iter1_)) remove];
  [((id<JavaUtilIterator>) nil_chk(val$iter2_)) remove];
}

- (instancetype)initWithJavaUtilIterator:(id<JavaUtilIterator>)capture$0
                    withJavaUtilIterator:(id<JavaUtilIterator>)capture$1 {
  EduStanfordNlpUtilIterables_$8_initWithJavaUtilIterator_withJavaUtilIterator_(self, capture$0, capture$1);
  return self;
}

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaUtilIterator_forEachRemainingWithJavaUtilFunctionConsumer_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpUtilPair;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(hasNext);
  methods[1].selector = @selector(next);
  methods[2].selector = @selector(remove);
  methods[3].selector = @selector(initWithJavaUtilIterator:withJavaUtilIterator:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$iter1_", "LJavaUtilIterator;", .constantValue.asLong = 0, 0x1012, -1, -1, 3, -1 },
    { "val$iter2_", "LJavaUtilIterator;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "()Ledu/stanford/nlp/util/Pair<TT1;TT2;>;", "LJavaUtilIterator;LJavaUtilIterator;", "(Ljava/util/Iterator<TT1;>;Ljava/util/Iterator<TT2;>;)V", "Ljava/util/Iterator<TT1;>;", "Ljava/util/Iterator<TT2;>;", "LEduStanfordNlpUtilIterables;", "zipWithJavaUtilIterator:withJavaUtilIterator:", "Ljava/lang/Object;Ljava/util/Iterator<Ledu/stanford/nlp/util/Pair<TT1;TT2;>;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilIterables_$8 = { "", "edu.stanford.nlp.util", ptrTable, methods, fields, 7, 0x8008, 4, 2, 5, -1, 6, 7, -1 };
  return &_EduStanfordNlpUtilIterables_$8;
}

@end

void EduStanfordNlpUtilIterables_$8_initWithJavaUtilIterator_withJavaUtilIterator_(EduStanfordNlpUtilIterables_$8 *self, id<JavaUtilIterator> capture$0, id<JavaUtilIterator> capture$1) {
  self->val$iter1_ = capture$0;
  self->val$iter2_ = capture$1;
  NSObject_init(self);
}

EduStanfordNlpUtilIterables_$8 *new_EduStanfordNlpUtilIterables_$8_initWithJavaUtilIterator_withJavaUtilIterator_(id<JavaUtilIterator> capture$0, id<JavaUtilIterator> capture$1) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilIterables_$8, initWithJavaUtilIterator_withJavaUtilIterator_, capture$0, capture$1)
}

EduStanfordNlpUtilIterables_$8 *create_EduStanfordNlpUtilIterables_$8_initWithJavaUtilIterator_withJavaUtilIterator_(id<JavaUtilIterator> capture$0, id<JavaUtilIterator> capture$1) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilIterables_$8, initWithJavaUtilIterator_withJavaUtilIterator_, capture$0, capture$1)
}

@implementation EduStanfordNlpUtilIterables_$9

- (id<JavaUtilIterator>)iterator {
  return new_EduStanfordNlpUtilIterables_$9_$1_initWithEduStanfordNlpUtilIterables_$9_(self);
}

- (instancetype)initWithJavaLangIterable:(id<JavaLangIterable>)capture$0
                    withJavaLangIterable:(id<JavaLangIterable>)capture$1
withEduStanfordNlpUtilIterables_IncrementComparator:(id<EduStanfordNlpUtilIterables_IncrementComparator>)capture$2 {
  EduStanfordNlpUtilIterables_$9_initWithJavaLangIterable_withJavaLangIterable_withEduStanfordNlpUtilIterables_IncrementComparator_(self, capture$0, capture$1, capture$2);
  return self;
}

- (void)forEachWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaLangIterable_forEachWithJavaUtilFunctionConsumer_(self, arg0);
}

- (id<JavaUtilSpliterator>)spliterator {
  return JavaLangIterable_spliterator(self);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(iterator);
  methods[1].selector = @selector(initWithJavaLangIterable:withJavaLangIterable:withEduStanfordNlpUtilIterables_IncrementComparator:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "iterA_", "LJavaUtilIterator;", .constantValue.asLong = 0, 0x0, -1, -1, 3, -1 },
    { "iterB_", "LJavaUtilIterator;", .constantValue.asLong = 0, 0x0, -1, -1, 4, -1 },
    { "val$comparator_", "LEduStanfordNlpUtilIterables_IncrementComparator;", .constantValue.asLong = 0, 0x1012, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Iterator<Ledu/stanford/nlp/util/Pair<TV1;TV2;>;>;", "LJavaLangIterable;LJavaLangIterable;LEduStanfordNlpUtilIterables_IncrementComparator;", "(Ljava/lang/Iterable<TV1;>;Ljava/lang/Iterable<TV2;>;Ledu/stanford/nlp/util/Iterables$IncrementComparator<TV1;TV2;>;)V", "Ljava/util/Iterator<TV1;>;", "Ljava/util/Iterator<TV2;>;", "Ledu/stanford/nlp/util/Iterables$IncrementComparator<TV1;TV2;>;", "LEduStanfordNlpUtilIterables;", "mergeWithJavaLangIterable:withJavaLangIterable:withEduStanfordNlpUtilIterables_IncrementComparator:", "Ljava/lang/Object;Ljava/lang/Iterable<Ledu/stanford/nlp/util/Pair<TV1;TV2;>;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilIterables_$9 = { "", "edu.stanford.nlp.util", ptrTable, methods, fields, 7, 0x8008, 2, 3, 6, -1, 7, 8, -1 };
  return &_EduStanfordNlpUtilIterables_$9;
}

@end

void EduStanfordNlpUtilIterables_$9_initWithJavaLangIterable_withJavaLangIterable_withEduStanfordNlpUtilIterables_IncrementComparator_(EduStanfordNlpUtilIterables_$9 *self, id<JavaLangIterable> capture$0, id<JavaLangIterable> capture$1, id<EduStanfordNlpUtilIterables_IncrementComparator> capture$2) {
  self->val$comparator_ = capture$2;
  NSObject_init(self);
  self->iterA_ = [((id<JavaLangIterable>) nil_chk(capture$0)) iterator];
  self->iterB_ = [((id<JavaLangIterable>) nil_chk(capture$1)) iterator];
}

EduStanfordNlpUtilIterables_$9 *new_EduStanfordNlpUtilIterables_$9_initWithJavaLangIterable_withJavaLangIterable_withEduStanfordNlpUtilIterables_IncrementComparator_(id<JavaLangIterable> capture$0, id<JavaLangIterable> capture$1, id<EduStanfordNlpUtilIterables_IncrementComparator> capture$2) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilIterables_$9, initWithJavaLangIterable_withJavaLangIterable_withEduStanfordNlpUtilIterables_IncrementComparator_, capture$0, capture$1, capture$2)
}

EduStanfordNlpUtilIterables_$9 *create_EduStanfordNlpUtilIterables_$9_initWithJavaLangIterable_withJavaLangIterable_withEduStanfordNlpUtilIterables_IncrementComparator_(id<JavaLangIterable> capture$0, id<JavaLangIterable> capture$1, id<EduStanfordNlpUtilIterables_IncrementComparator> capture$2) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilIterables_$9, initWithJavaLangIterable_withJavaLangIterable_withEduStanfordNlpUtilIterables_IncrementComparator_, capture$0, capture$1, capture$2)
}

@implementation EduStanfordNlpUtilIterables_$9_$1

- (jboolean)hasNext {
  if (!ready_) {
    pending_ = EduStanfordNlpUtilIterables_$9_$1_nextPair(self);
    ready_ = true;
  }
  return pending_ != nil;
}

- (EduStanfordNlpUtilPair *)next {
  if (!ready_ && ![self hasNext]) {
    @throw new_JavaLangIllegalAccessError_initWithNSString_(@"Called next without hasNext");
  }
  ready_ = false;
  return pending_;
}

- (void)remove {
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"Cannot remove pairs from a merged iterator");
}

- (EduStanfordNlpUtilPair *)nextPair {
  return EduStanfordNlpUtilIterables_$9_$1_nextPair(self);
}

- (instancetype)initWithEduStanfordNlpUtilIterables_$9:(EduStanfordNlpUtilIterables_$9 *)outer$ {
  EduStanfordNlpUtilIterables_$9_$1_initWithEduStanfordNlpUtilIterables_$9_(self, outer$);
  return self;
}

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaUtilIterator_forEachRemainingWithJavaUtilFunctionConsumer_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpUtilPair;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpUtilPair;", 0x2, -1, -1, -1, 0, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(hasNext);
  methods[1].selector = @selector(next);
  methods[2].selector = @selector(remove);
  methods[3].selector = @selector(nextPair);
  methods[4].selector = @selector(initWithEduStanfordNlpUtilIterables_$9:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LEduStanfordNlpUtilIterables_$9;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "ready_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "pending_", "LEduStanfordNlpUtilPair;", .constantValue.asLong = 0, 0x0, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "()Ledu/stanford/nlp/util/Pair<TV1;TV2;>;", "LEduStanfordNlpUtilIterables_$9;", "Ledu/stanford/nlp/util/Pair<TV1;TV2;>;", "iterator", "Ljava/lang/Object;Ljava/util/Iterator<Ledu/stanford/nlp/util/Pair<TV1;TV2;>;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilIterables_$9_$1 = { "", "edu.stanford.nlp.util", ptrTable, methods, fields, 7, 0x8008, 5, 3, 1, -1, 3, 4, -1 };
  return &_EduStanfordNlpUtilIterables_$9_$1;
}

@end

EduStanfordNlpUtilPair *EduStanfordNlpUtilIterables_$9_$1_nextPair(EduStanfordNlpUtilIterables_$9_$1 *self) {
  id nextA = nil;
  id nextB = nil;
  while ([((id<JavaUtilIterator>) nil_chk(self->this$0_->iterA_)) hasNext] && [((id<JavaUtilIterator>) nil_chk(self->this$0_->iterB_)) hasNext]) {
    if (nextA == nil) {
      nextA = [((id<JavaUtilIterator>) nil_chk(self->this$0_->iterA_)) next];
    }
    if (nextB == nil) {
      nextB = [((id<JavaUtilIterator>) nil_chk(self->this$0_->iterB_)) next];
    }
    jint cmp = [((id<EduStanfordNlpUtilIterables_IncrementComparator>) nil_chk(self->this$0_->val$comparator_)) compareWithId:nextA withId:nextB];
    if (cmp < 0) {
      nextA = nil;
    }
    else if (cmp > 0) {
      nextB = nil;
    }
    else {
      return new_EduStanfordNlpUtilPair_initWithId_withId_(nextA, nextB);
    }
  }
  return nil;
}

void EduStanfordNlpUtilIterables_$9_$1_initWithEduStanfordNlpUtilIterables_$9_(EduStanfordNlpUtilIterables_$9_$1 *self, EduStanfordNlpUtilIterables_$9 *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
  self->ready_ = false;
  self->pending_ = nil;
}

EduStanfordNlpUtilIterables_$9_$1 *new_EduStanfordNlpUtilIterables_$9_$1_initWithEduStanfordNlpUtilIterables_$9_(EduStanfordNlpUtilIterables_$9 *outer$) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilIterables_$9_$1, initWithEduStanfordNlpUtilIterables_$9_, outer$)
}

EduStanfordNlpUtilIterables_$9_$1 *create_EduStanfordNlpUtilIterables_$9_$1_initWithEduStanfordNlpUtilIterables_$9_(EduStanfordNlpUtilIterables_$9 *outer$) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilIterables_$9_$1, initWithEduStanfordNlpUtilIterables_$9_, outer$)
}

@implementation EduStanfordNlpUtilIterables_$10

- (jint)compareWithId:(EduStanfordNlpUtilPair *)a
               withId:(id)b {
  return [((id<EduStanfordNlpUtilIterables_IncrementComparator>) nil_chk(val$comparatorB_)) compareWithId:((EduStanfordNlpUtilPair *) nil_chk(a))->first_ withId:b];
}

- (instancetype)initWithEduStanfordNlpUtilIterables_IncrementComparator:(id<EduStanfordNlpUtilIterables_IncrementComparator>)capture$0 {
  EduStanfordNlpUtilIterables_$10_initWithEduStanfordNlpUtilIterables_IncrementComparator_(self, capture$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "I", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(compareWithId:withId:);
  methods[1].selector = @selector(initWithEduStanfordNlpUtilIterables_IncrementComparator:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$comparatorB_", "LEduStanfordNlpUtilIterables_IncrementComparator;", .constantValue.asLong = 0, 0x1012, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "compare", "LEduStanfordNlpUtilPair;LNSObject;", "(Ledu/stanford/nlp/util/Pair<TV1;TV2;>;TV3;)I", "LEduStanfordNlpUtilIterables_IncrementComparator;", "(Ledu/stanford/nlp/util/Iterables$IncrementComparator<TV1;TV3;>;)V", "Ledu/stanford/nlp/util/Iterables$IncrementComparator<TV1;TV3;>;", "LEduStanfordNlpUtilIterables;", "mergeWithJavaLangIterable:withJavaLangIterable:withJavaLangIterable:withEduStanfordNlpUtilIterables_IncrementComparator:withEduStanfordNlpUtilIterables_IncrementComparator:", "Ljava/lang/Object;Ledu/stanford/nlp/util/Iterables$IncrementComparator<Ledu/stanford/nlp/util/Pair<TV1;TV2;>;TV3;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilIterables_$10 = { "", "edu.stanford.nlp.util", ptrTable, methods, fields, 7, 0x8008, 2, 1, 6, -1, 7, 8, -1 };
  return &_EduStanfordNlpUtilIterables_$10;
}

@end

void EduStanfordNlpUtilIterables_$10_initWithEduStanfordNlpUtilIterables_IncrementComparator_(EduStanfordNlpUtilIterables_$10 *self, id<EduStanfordNlpUtilIterables_IncrementComparator> capture$0) {
  self->val$comparatorB_ = capture$0;
  NSObject_init(self);
}

EduStanfordNlpUtilIterables_$10 *new_EduStanfordNlpUtilIterables_$10_initWithEduStanfordNlpUtilIterables_IncrementComparator_(id<EduStanfordNlpUtilIterables_IncrementComparator> capture$0) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilIterables_$10, initWithEduStanfordNlpUtilIterables_IncrementComparator_, capture$0)
}

EduStanfordNlpUtilIterables_$10 *create_EduStanfordNlpUtilIterables_$10_initWithEduStanfordNlpUtilIterables_IncrementComparator_(id<EduStanfordNlpUtilIterables_IncrementComparator> capture$0) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilIterables_$10, initWithEduStanfordNlpUtilIterables_IncrementComparator_, capture$0)
}

@implementation EduStanfordNlpUtilIterables_$11

- (id<JavaUtilIterator>)iterator {
  return new_EduStanfordNlpUtilIterables_$11_$1_initWithEduStanfordNlpUtilIterables_$11_(self);
}

- (instancetype)initWithJavaLangIterable:(id<JavaLangIterable>)capture$0
                  withJavaUtilComparator:(id<JavaUtilComparator>)capture$1 {
  EduStanfordNlpUtilIterables_$11_initWithJavaLangIterable_withJavaUtilComparator_(self, capture$0, capture$1);
  return self;
}

- (void)forEachWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaLangIterable_forEachWithJavaUtilFunctionConsumer_(self, arg0);
}

- (id<JavaUtilSpliterator>)spliterator {
  return JavaLangIterable_spliterator(self);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(iterator);
  methods[1].selector = @selector(initWithJavaLangIterable:withJavaUtilComparator:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$iterable_", "LJavaLangIterable;", .constantValue.asLong = 0, 0x1012, -1, -1, 3, -1 },
    { "val$comparator_", "LJavaUtilComparator;", .constantValue.asLong = 0, 0x1012, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Iterator<Ljava/lang/Iterable<TV;>;>;", "LJavaLangIterable;LJavaUtilComparator;", "(Ljava/lang/Iterable<TV;>;Ljava/util/Comparator<TV;>;)V", "Ljava/lang/Iterable<TV;>;", "Ljava/util/Comparator<TV;>;", "LEduStanfordNlpUtilIterables;", "groupWithJavaLangIterable:withJavaUtilComparator:", "Ljava/lang/Object;Ljava/lang/Iterable<Ljava/lang/Iterable<TV;>;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilIterables_$11 = { "", "edu.stanford.nlp.util", ptrTable, methods, fields, 7, 0x8008, 2, 2, 5, -1, 6, 7, -1 };
  return &_EduStanfordNlpUtilIterables_$11;
}

@end

void EduStanfordNlpUtilIterables_$11_initWithJavaLangIterable_withJavaUtilComparator_(EduStanfordNlpUtilIterables_$11 *self, id<JavaLangIterable> capture$0, id<JavaUtilComparator> capture$1) {
  self->val$iterable_ = capture$0;
  self->val$comparator_ = capture$1;
  NSObject_init(self);
}

EduStanfordNlpUtilIterables_$11 *new_EduStanfordNlpUtilIterables_$11_initWithJavaLangIterable_withJavaUtilComparator_(id<JavaLangIterable> capture$0, id<JavaUtilComparator> capture$1) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilIterables_$11, initWithJavaLangIterable_withJavaUtilComparator_, capture$0, capture$1)
}

EduStanfordNlpUtilIterables_$11 *create_EduStanfordNlpUtilIterables_$11_initWithJavaLangIterable_withJavaUtilComparator_(id<JavaLangIterable> capture$0, id<JavaUtilComparator> capture$1) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilIterables_$11, initWithJavaLangIterable_withJavaUtilComparator_, capture$0, capture$1)
}

@implementation EduStanfordNlpUtilIterables_$11_$1

- (jboolean)hasNext {
  return next_ != nil || [((id<JavaUtilIterator>) nil_chk(it_)) hasNext];
}

- (id<JavaLangIterable>)next {
  return new_EduStanfordNlpUtilIterables_$11_$1_$Lambda$1_initWithEduStanfordNlpUtilIterables_$11_$1_(self);
}

- (void)remove {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (instancetype)initWithEduStanfordNlpUtilIterables_$11:(EduStanfordNlpUtilIterables_$11 *)outer$ {
  EduStanfordNlpUtilIterables_$11_$1_initWithEduStanfordNlpUtilIterables_$11_(self, outer$);
  return self;
}

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaUtilIterator_forEachRemainingWithJavaUtilFunctionConsumer_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangIterable;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(hasNext);
  methods[1].selector = @selector(next);
  methods[2].selector = @selector(remove);
  methods[3].selector = @selector(initWithEduStanfordNlpUtilIterables_$11:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LEduStanfordNlpUtilIterables_$11;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "it_", "LJavaUtilIterator;", .constantValue.asLong = 0, 0x0, -1, -1, 2, -1 },
    { "next_", "LNSObject;", .constantValue.asLong = 0, 0x0, -1, -1, 3, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/lang/Iterable<TV;>;", "LEduStanfordNlpUtilIterables_$11;", "Ljava/util/Iterator<TV;>;", "TV;", "iterator", "Ljava/lang/Object;Ljava/util/Iterator<Ljava/lang/Iterable<TV;>;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilIterables_$11_$1 = { "", "edu.stanford.nlp.util", ptrTable, methods, fields, 7, 0x8008, 4, 3, 1, -1, 4, 5, -1 };
  return &_EduStanfordNlpUtilIterables_$11_$1;
}

@end

void EduStanfordNlpUtilIterables_$11_$1_initWithEduStanfordNlpUtilIterables_$11_(EduStanfordNlpUtilIterables_$11_$1 *self, EduStanfordNlpUtilIterables_$11 *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
  self->it_ = [((id<JavaLangIterable>) nil_chk(outer$->val$iterable_)) iterator];
}

EduStanfordNlpUtilIterables_$11_$1 *new_EduStanfordNlpUtilIterables_$11_$1_initWithEduStanfordNlpUtilIterables_$11_(EduStanfordNlpUtilIterables_$11 *outer$) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilIterables_$11_$1, initWithEduStanfordNlpUtilIterables_$11_, outer$)
}

EduStanfordNlpUtilIterables_$11_$1 *create_EduStanfordNlpUtilIterables_$11_$1_initWithEduStanfordNlpUtilIterables_$11_(EduStanfordNlpUtilIterables_$11 *outer$) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilIterables_$11_$1, initWithEduStanfordNlpUtilIterables_$11_, outer$)
}

@implementation EduStanfordNlpUtilIterables_$11_$1_$Lambda$1

- (id<JavaUtilIterator>)iterator {
  return new_EduStanfordNlpUtilIterables_$11_$1_$1_initWithEduStanfordNlpUtilIterables_$11_$1_(this$0_);
}

- (void)forEachWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaLangIterable_forEachWithJavaUtilFunctionConsumer_(self, arg0);
}

- (id<JavaUtilSpliterator>)spliterator {
  return JavaLangIterable_spliterator(self);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

@end

void EduStanfordNlpUtilIterables_$11_$1_$Lambda$1_initWithEduStanfordNlpUtilIterables_$11_$1_(EduStanfordNlpUtilIterables_$11_$1_$Lambda$1 *self, EduStanfordNlpUtilIterables_$11_$1 *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
}

EduStanfordNlpUtilIterables_$11_$1_$Lambda$1 *new_EduStanfordNlpUtilIterables_$11_$1_$Lambda$1_initWithEduStanfordNlpUtilIterables_$11_$1_(EduStanfordNlpUtilIterables_$11_$1 *outer$) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilIterables_$11_$1_$Lambda$1, initWithEduStanfordNlpUtilIterables_$11_$1_, outer$)
}

EduStanfordNlpUtilIterables_$11_$1_$Lambda$1 *create_EduStanfordNlpUtilIterables_$11_$1_$Lambda$1_initWithEduStanfordNlpUtilIterables_$11_$1_(EduStanfordNlpUtilIterables_$11_$1 *outer$) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilIterables_$11_$1_$Lambda$1, initWithEduStanfordNlpUtilIterables_$11_$1_, outer$)
}

@implementation EduStanfordNlpUtilIterables_$11_$1_$1

- (jboolean)hasNext {
  if (this$0_->next_ == nil && [((id<JavaUtilIterator>) nil_chk(this$0_->it_)) hasNext]) {
    this$0_->next_ = [((id<JavaUtilIterator>) nil_chk(this$0_->it_)) next];
  }
  if (last_ != nil && this$0_->next_ != nil) {
    return [((id<JavaUtilComparator>) nil_chk(this$0_->this$0_->val$comparator_)) compareWithId:last_ withId:this$0_->next_] == 0;
  }
  return this$0_->next_ != nil;
}

- (id)next {
  if (![self hasNext]) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Didn't have next");
  }
  id rv = this$0_->next_;
  last_ = this$0_->next_;
  this$0_->next_ = nil;
  return rv;
}

- (void)remove {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (instancetype)initWithEduStanfordNlpUtilIterables_$11_$1:(EduStanfordNlpUtilIterables_$11_$1 *)outer$ {
  EduStanfordNlpUtilIterables_$11_$1_$1_initWithEduStanfordNlpUtilIterables_$11_$1_(self, outer$);
  return self;
}

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaUtilIterator_forEachRemainingWithJavaUtilFunctionConsumer_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(hasNext);
  methods[1].selector = @selector(next);
  methods[2].selector = @selector(remove);
  methods[3].selector = @selector(initWithEduStanfordNlpUtilIterables_$11_$1:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LEduStanfordNlpUtilIterables_$11_$1;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "last_", "LNSObject;", .constantValue.asLong = 0, 0x0, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "()TV;", "LEduStanfordNlpUtilIterables_$11_$1;", "TV;", "lambda$4WithJavaUtilComparator:", "Ljava/lang/Object;Ljava/util/Iterator<TV;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilIterables_$11_$1_$1 = { "", "edu.stanford.nlp.util", ptrTable, methods, fields, 7, 0x8008, 4, 2, 1, -1, 3, 4, -1 };
  return &_EduStanfordNlpUtilIterables_$11_$1_$1;
}

@end

void EduStanfordNlpUtilIterables_$11_$1_$1_initWithEduStanfordNlpUtilIterables_$11_$1_(EduStanfordNlpUtilIterables_$11_$1_$1 *self, EduStanfordNlpUtilIterables_$11_$1 *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
  self->last_ = nil;
}

EduStanfordNlpUtilIterables_$11_$1_$1 *new_EduStanfordNlpUtilIterables_$11_$1_$1_initWithEduStanfordNlpUtilIterables_$11_$1_(EduStanfordNlpUtilIterables_$11_$1 *outer$) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilIterables_$11_$1_$1, initWithEduStanfordNlpUtilIterables_$11_$1_, outer$)
}

EduStanfordNlpUtilIterables_$11_$1_$1 *create_EduStanfordNlpUtilIterables_$11_$1_$1_initWithEduStanfordNlpUtilIterables_$11_$1_(EduStanfordNlpUtilIterables_$11_$1 *outer$) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilIterables_$11_$1_$1, initWithEduStanfordNlpUtilIterables_$11_$1_, outer$)
}

@implementation EduStanfordNlpUtilIterables_$12

- (JavaLangBoolean *)applyWithId:(id)item {
  ++self->index_;
  return JavaLangBoolean_valueOfWithBoolean_([((id<JavaUtilSet>) nil_chk(val$indexSet_)) containsWithId:JavaLangInteger_valueOfWithInt_(self->index_)]);
}

- (instancetype)initWithJavaUtilSet:(id<JavaUtilSet>)capture$0 {
  EduStanfordNlpUtilIterables_$12_initWithJavaUtilSet_(self, capture$0);
  return self;
}

- (id<JavaUtilFunctionFunction>)andThenWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_andThenWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilFunctionFunction>)composeWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_composeWithJavaUtilFunctionFunction_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangBoolean;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(applyWithId:);
  methods[1].selector = @selector(initWithJavaUtilSet:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "index_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "val$indexSet_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x1012, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "apply", "LNSObject;", "(TT;)Ljava/lang/Boolean;", "LJavaUtilSet;", "(Ljava/util/Set<Ljava/lang/Integer;>;)V", "Ljava/util/Set<Ljava/lang/Integer;>;", "LEduStanfordNlpUtilIterables;", "sampleWithJavaLangIterable:withInt:withInt:withJavaUtilRandom:", "Ljava/lang/Object;Ljava/util/function/Function<TT;Ljava/lang/Boolean;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilIterables_$12 = { "", "edu.stanford.nlp.util", ptrTable, methods, fields, 7, 0x8008, 2, 2, 6, -1, 7, 8, -1 };
  return &_EduStanfordNlpUtilIterables_$12;
}

@end

void EduStanfordNlpUtilIterables_$12_initWithJavaUtilSet_(EduStanfordNlpUtilIterables_$12 *self, id<JavaUtilSet> capture$0) {
  self->val$indexSet_ = capture$0;
  NSObject_init(self);
  self->index_ = -1;
}

EduStanfordNlpUtilIterables_$12 *new_EduStanfordNlpUtilIterables_$12_initWithJavaUtilSet_(id<JavaUtilSet> capture$0) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilIterables_$12, initWithJavaUtilSet_, capture$0)
}

EduStanfordNlpUtilIterables_$12 *create_EduStanfordNlpUtilIterables_$12_initWithJavaUtilSet_(id<JavaUtilSet> capture$0) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilIterables_$12, initWithJavaUtilSet_, capture$0)
}
