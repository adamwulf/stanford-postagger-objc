//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/util/Filters.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/util/Filters.h"
#include "edu/stanford/nlp/util/Generics.h"
#include "java/io/Serializable.h"
#include "java/lang/SafeVarargs.h"
#include "java/lang/annotation/Annotation.h"
#include "java/lang/reflect/Array.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Random.h"
#include "java/util/Set.h"
#include "java/util/function/Predicate.h"

@interface EduStanfordNlpUtilFilters ()

- (instancetype)init;

@end

__attribute__((unused)) static void EduStanfordNlpUtilFilters_init(EduStanfordNlpUtilFilters *self);

__attribute__((unused)) static EduStanfordNlpUtilFilters *new_EduStanfordNlpUtilFilters_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpUtilFilters *create_EduStanfordNlpUtilFilters_init();

@interface EduStanfordNlpUtilFilters_CategoricalFilter : NSObject < JavaUtilFunctionPredicate, JavaIoSerializable > {
 @public
  jboolean judgment_;
}

- (instancetype)initWithBoolean:(jboolean)judgment;

- (jboolean)testWithId:(id)obj;

- (NSString *)description;

- (NSUInteger)hash;

- (jboolean)isEqual:(id)other;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpUtilFilters_CategoricalFilter)

inline jlong EduStanfordNlpUtilFilters_CategoricalFilter_get_serialVersionUID();
#define EduStanfordNlpUtilFilters_CategoricalFilter_serialVersionUID 7501774666726883656LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpUtilFilters_CategoricalFilter, serialVersionUID, jlong)

__attribute__((unused)) static void EduStanfordNlpUtilFilters_CategoricalFilter_initWithBoolean_(EduStanfordNlpUtilFilters_CategoricalFilter *self, jboolean judgment);

__attribute__((unused)) static EduStanfordNlpUtilFilters_CategoricalFilter *new_EduStanfordNlpUtilFilters_CategoricalFilter_initWithBoolean_(jboolean judgment) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpUtilFilters_CategoricalFilter *create_EduStanfordNlpUtilFilters_CategoricalFilter_initWithBoolean_(jboolean judgment);

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpUtilFilters_CategoricalFilter)

@interface EduStanfordNlpUtilFilters_CollectionAcceptFilter : NSObject < JavaUtilFunctionPredicate, JavaIoSerializable > {
 @public
  id<JavaUtilCollection> args_;
  jboolean judgment_;
}

- (instancetype)initWithJavaUtilCollection:(id<JavaUtilCollection>)c
                               withBoolean:(jboolean)judgment;

- (jboolean)testWithId:(id)obj;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpUtilFilters_CollectionAcceptFilter)

J2OBJC_FIELD_SETTER(EduStanfordNlpUtilFilters_CollectionAcceptFilter, args_, id<JavaUtilCollection>)

inline jlong EduStanfordNlpUtilFilters_CollectionAcceptFilter_get_serialVersionUID();
#define EduStanfordNlpUtilFilters_CollectionAcceptFilter_serialVersionUID -8870550963937943540LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpUtilFilters_CollectionAcceptFilter, serialVersionUID, jlong)

__attribute__((unused)) static void EduStanfordNlpUtilFilters_CollectionAcceptFilter_initWithJavaUtilCollection_withBoolean_(EduStanfordNlpUtilFilters_CollectionAcceptFilter *self, id<JavaUtilCollection> c, jboolean judgment);

__attribute__((unused)) static EduStanfordNlpUtilFilters_CollectionAcceptFilter *new_EduStanfordNlpUtilFilters_CollectionAcceptFilter_initWithJavaUtilCollection_withBoolean_(id<JavaUtilCollection> c, jboolean judgment) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpUtilFilters_CollectionAcceptFilter *create_EduStanfordNlpUtilFilters_CollectionAcceptFilter_initWithJavaUtilCollection_withBoolean_(id<JavaUtilCollection> c, jboolean judgment);

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpUtilFilters_CollectionAcceptFilter)

@interface EduStanfordNlpUtilFilters_CombinedFilter : NSObject < JavaUtilFunctionPredicate, JavaIoSerializable > {
 @public
  id<JavaUtilFunctionPredicate> f1_, f2_;
  jboolean conjunction_;
}

- (instancetype)initWithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)f1
                    withJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)f2
                                      withBoolean:(jboolean)conjunction;

- (jboolean)testWithId:(id)o;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpUtilFilters_CombinedFilter)

J2OBJC_FIELD_SETTER(EduStanfordNlpUtilFilters_CombinedFilter, f1_, id<JavaUtilFunctionPredicate>)
J2OBJC_FIELD_SETTER(EduStanfordNlpUtilFilters_CombinedFilter, f2_, id<JavaUtilFunctionPredicate>)

inline jlong EduStanfordNlpUtilFilters_CombinedFilter_get_serialVersionUID();
#define EduStanfordNlpUtilFilters_CombinedFilter_serialVersionUID -2988241258905198687LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpUtilFilters_CombinedFilter, serialVersionUID, jlong)

__attribute__((unused)) static void EduStanfordNlpUtilFilters_CombinedFilter_initWithJavaUtilFunctionPredicate_withJavaUtilFunctionPredicate_withBoolean_(EduStanfordNlpUtilFilters_CombinedFilter *self, id<JavaUtilFunctionPredicate> f1, id<JavaUtilFunctionPredicate> f2, jboolean conjunction);

__attribute__((unused)) static EduStanfordNlpUtilFilters_CombinedFilter *new_EduStanfordNlpUtilFilters_CombinedFilter_initWithJavaUtilFunctionPredicate_withJavaUtilFunctionPredicate_withBoolean_(id<JavaUtilFunctionPredicate> f1, id<JavaUtilFunctionPredicate> f2, jboolean conjunction) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpUtilFilters_CombinedFilter *create_EduStanfordNlpUtilFilters_CombinedFilter_initWithJavaUtilFunctionPredicate_withJavaUtilFunctionPredicate_withBoolean_(id<JavaUtilFunctionPredicate> f1, id<JavaUtilFunctionPredicate> f2, jboolean conjunction);

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpUtilFilters_CombinedFilter)

@interface EduStanfordNlpUtilFilters_DisjFilter () {
 @public
  id<JavaUtilList> filters_;
}

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpUtilFilters_DisjFilter, filters_, id<JavaUtilList>)

inline jlong EduStanfordNlpUtilFilters_DisjFilter_get_serialVersionUID();
#define EduStanfordNlpUtilFilters_DisjFilter_serialVersionUID 1LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpUtilFilters_DisjFilter, serialVersionUID, jlong)

__attribute__((unused)) static IOSObjectArray *EduStanfordNlpUtilFilters_DisjFilter__Annotations$0();

@interface EduStanfordNlpUtilFilters_ConjFilter () {
 @public
  id<JavaUtilList> filters_;
}

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpUtilFilters_ConjFilter, filters_, id<JavaUtilList>)

inline jlong EduStanfordNlpUtilFilters_ConjFilter_get_serialVersionUID();
#define EduStanfordNlpUtilFilters_ConjFilter_serialVersionUID 1LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpUtilFilters_ConjFilter, serialVersionUID, jlong)

__attribute__((unused)) static IOSObjectArray *EduStanfordNlpUtilFilters_ConjFilter__Annotations$0();

@interface EduStanfordNlpUtilFilters_NegatedFilter : NSObject < JavaUtilFunctionPredicate, JavaIoSerializable > {
 @public
  id<JavaUtilFunctionPredicate> filter_;
  jboolean negated_;
}

- (instancetype)initWithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)filter
                                      withBoolean:(jboolean)negated;

- (instancetype)initWithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)filter;

- (jboolean)testWithId:(id)o;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpUtilFilters_NegatedFilter)

J2OBJC_FIELD_SETTER(EduStanfordNlpUtilFilters_NegatedFilter, filter_, id<JavaUtilFunctionPredicate>)

inline jlong EduStanfordNlpUtilFilters_NegatedFilter_get_serialVersionUID();
#define EduStanfordNlpUtilFilters_NegatedFilter_serialVersionUID -1599556783677718177LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpUtilFilters_NegatedFilter, serialVersionUID, jlong)

__attribute__((unused)) static void EduStanfordNlpUtilFilters_NegatedFilter_initWithJavaUtilFunctionPredicate_withBoolean_(EduStanfordNlpUtilFilters_NegatedFilter *self, id<JavaUtilFunctionPredicate> filter, jboolean negated);

__attribute__((unused)) static EduStanfordNlpUtilFilters_NegatedFilter *new_EduStanfordNlpUtilFilters_NegatedFilter_initWithJavaUtilFunctionPredicate_withBoolean_(id<JavaUtilFunctionPredicate> filter, jboolean negated) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpUtilFilters_NegatedFilter *create_EduStanfordNlpUtilFilters_NegatedFilter_initWithJavaUtilFunctionPredicate_withBoolean_(id<JavaUtilFunctionPredicate> filter, jboolean negated);

__attribute__((unused)) static void EduStanfordNlpUtilFilters_NegatedFilter_initWithJavaUtilFunctionPredicate_(EduStanfordNlpUtilFilters_NegatedFilter *self, id<JavaUtilFunctionPredicate> filter);

__attribute__((unused)) static EduStanfordNlpUtilFilters_NegatedFilter *new_EduStanfordNlpUtilFilters_NegatedFilter_initWithJavaUtilFunctionPredicate_(id<JavaUtilFunctionPredicate> filter) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpUtilFilters_NegatedFilter *create_EduStanfordNlpUtilFilters_NegatedFilter_initWithJavaUtilFunctionPredicate_(id<JavaUtilFunctionPredicate> filter);

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpUtilFilters_NegatedFilter)

@interface EduStanfordNlpUtilFilters_RandomFilter () {
 @public
  JavaUtilRandom *random_;
  jdouble fraction_;
}

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpUtilFilters_RandomFilter, random_, JavaUtilRandom *)

inline jlong EduStanfordNlpUtilFilters_RandomFilter_get_serialVersionUID();
#define EduStanfordNlpUtilFilters_RandomFilter_serialVersionUID -4885773582960355425LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpUtilFilters_RandomFilter, serialVersionUID, jlong)

@implementation EduStanfordNlpUtilFilters

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpUtilFilters_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (id<JavaUtilFunctionPredicate>)acceptFilter {
  return EduStanfordNlpUtilFilters_acceptFilter();
}

+ (id<JavaUtilFunctionPredicate>)rejectFilter {
  return EduStanfordNlpUtilFilters_rejectFilter();
}

+ (id<JavaUtilFunctionPredicate>)collectionAcceptFilterWithNSObjectArray:(IOSObjectArray *)objs {
  return EduStanfordNlpUtilFilters_collectionAcceptFilterWithNSObjectArray_(objs);
}

+ (id<JavaUtilFunctionPredicate>)collectionAcceptFilterWithJavaUtilCollection:(id<JavaUtilCollection>)objs {
  return EduStanfordNlpUtilFilters_collectionAcceptFilterWithJavaUtilCollection_(objs);
}

+ (id<JavaUtilFunctionPredicate>)collectionRejectFilterWithNSObjectArray:(IOSObjectArray *)objs {
  return EduStanfordNlpUtilFilters_collectionRejectFilterWithNSObjectArray_(objs);
}

+ (id<JavaUtilFunctionPredicate>)collectionRejectFilterWithJavaUtilCollection:(id<JavaUtilCollection>)objs {
  return EduStanfordNlpUtilFilters_collectionRejectFilterWithJavaUtilCollection_(objs);
}

+ (id<JavaUtilFunctionPredicate>)andFilterWithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)f1
                                          withJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)f2 {
  return EduStanfordNlpUtilFilters_andFilterWithJavaUtilFunctionPredicate_withJavaUtilFunctionPredicate_(f1, f2);
}

+ (id<JavaUtilFunctionPredicate>)orFilterWithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)f1
                                         withJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)f2 {
  return EduStanfordNlpUtilFilters_orFilterWithJavaUtilFunctionPredicate_withJavaUtilFunctionPredicate_(f1, f2);
}

+ (id<JavaUtilFunctionPredicate>)notFilterWithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)filter {
  return EduStanfordNlpUtilFilters_notFilterWithJavaUtilFunctionPredicate_(filter);
}

+ (id<JavaUtilFunctionPredicate>)switchedFilterWithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)filter
                                                                 withBoolean:(jboolean)negated {
  return EduStanfordNlpUtilFilters_switchedFilterWithJavaUtilFunctionPredicate_withBoolean_(filter, negated);
}

+ (IOSObjectArray *)filterWithNSObjectArray:(IOSObjectArray *)elems
              withJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)filter {
  return EduStanfordNlpUtilFilters_filterWithNSObjectArray_withJavaUtilFunctionPredicate_(elems, filter);
}

+ (void)retainAllWithJavaUtilCollection:(id<JavaUtilCollection>)elems
          withJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)filter {
  EduStanfordNlpUtilFilters_retainAllWithJavaUtilCollection_withJavaUtilFunctionPredicate_(elems, filter);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilFunctionPredicate;", 0x9, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaUtilFunctionPredicate;", 0x9, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaUtilFunctionPredicate;", 0x9, 1, 2, -1, 3, -1, -1 },
    { NULL, "LJavaUtilFunctionPredicate;", 0x9, 1, 4, -1, 5, -1, -1 },
    { NULL, "LJavaUtilFunctionPredicate;", 0x9, 6, 2, -1, 3, -1, -1 },
    { NULL, "LJavaUtilFunctionPredicate;", 0x9, 6, 4, -1, 5, -1, -1 },
    { NULL, "LJavaUtilFunctionPredicate;", 0x9, 7, 8, -1, 9, -1, -1 },
    { NULL, "LJavaUtilFunctionPredicate;", 0x9, 10, 8, -1, 9, -1, -1 },
    { NULL, "LJavaUtilFunctionPredicate;", 0x9, 11, 12, -1, 13, -1, -1 },
    { NULL, "LJavaUtilFunctionPredicate;", 0x9, 14, 15, -1, 16, -1, -1 },
    { NULL, "[LNSObject;", 0x9, 17, 18, -1, 19, -1, -1 },
    { NULL, "V", 0x9, 20, 21, -1, 22, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(acceptFilter);
  methods[2].selector = @selector(rejectFilter);
  methods[3].selector = @selector(collectionAcceptFilterWithNSObjectArray:);
  methods[4].selector = @selector(collectionAcceptFilterWithJavaUtilCollection:);
  methods[5].selector = @selector(collectionRejectFilterWithNSObjectArray:);
  methods[6].selector = @selector(collectionRejectFilterWithJavaUtilCollection:);
  methods[7].selector = @selector(andFilterWithJavaUtilFunctionPredicate:withJavaUtilFunctionPredicate:);
  methods[8].selector = @selector(orFilterWithJavaUtilFunctionPredicate:withJavaUtilFunctionPredicate:);
  methods[9].selector = @selector(notFilterWithJavaUtilFunctionPredicate:);
  methods[10].selector = @selector(switchedFilterWithJavaUtilFunctionPredicate:withBoolean:);
  methods[11].selector = @selector(filterWithNSObjectArray:withJavaUtilFunctionPredicate:);
  methods[12].selector = @selector(retainAllWithJavaUtilCollection:withJavaUtilFunctionPredicate:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "<T:Ljava/lang/Object;>()Ljava/util/function/Predicate<TT;>;", "collectionAcceptFilter", "[LNSObject;", "<E:Ljava/lang/Object;>([TE;)Ljava/util/function/Predicate<TE;>;", "LJavaUtilCollection;", "<E:Ljava/lang/Object;>(Ljava/util/Collection<TE;>;)Ljava/util/function/Predicate<TE;>;", "collectionRejectFilter", "andFilter", "LJavaUtilFunctionPredicate;LJavaUtilFunctionPredicate;", "<E:Ljava/lang/Object;>(Ljava/util/function/Predicate<TE;>;Ljava/util/function/Predicate<TE;>;)Ljava/util/function/Predicate<TE;>;", "orFilter", "notFilter", "LJavaUtilFunctionPredicate;", "<E:Ljava/lang/Object;>(Ljava/util/function/Predicate<TE;>;)Ljava/util/function/Predicate<TE;>;", "switchedFilter", "LJavaUtilFunctionPredicate;Z", "<E:Ljava/lang/Object;>(Ljava/util/function/Predicate<TE;>;Z)Ljava/util/function/Predicate<TE;>;", "filter", "[LNSObject;LJavaUtilFunctionPredicate;", "<E:Ljava/lang/Object;>([TE;Ljava/util/function/Predicate<TE;>;)[TE;", "retainAll", "LJavaUtilCollection;LJavaUtilFunctionPredicate;", "<E:Ljava/lang/Object;>(Ljava/util/Collection<TE;>;Ljava/util/function/Predicate<-TE;>;)V", "LEduStanfordNlpUtilFilters_CategoricalFilter;LEduStanfordNlpUtilFilters_CollectionAcceptFilter;LEduStanfordNlpUtilFilters_CombinedFilter;LEduStanfordNlpUtilFilters_DisjFilter;LEduStanfordNlpUtilFilters_ConjFilter;LEduStanfordNlpUtilFilters_NegatedFilter;LEduStanfordNlpUtilFilters_RandomFilter;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilFilters = { "Filters", "edu.stanford.nlp.util", ptrTable, methods, NULL, 7, 0x1, 13, 0, -1, 23, -1, -1, -1 };
  return &_EduStanfordNlpUtilFilters;
}

@end

void EduStanfordNlpUtilFilters_init(EduStanfordNlpUtilFilters *self) {
  NSObject_init(self);
}

EduStanfordNlpUtilFilters *new_EduStanfordNlpUtilFilters_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilFilters, init)
}

EduStanfordNlpUtilFilters *create_EduStanfordNlpUtilFilters_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilFilters, init)
}

id<JavaUtilFunctionPredicate> EduStanfordNlpUtilFilters_acceptFilter() {
  EduStanfordNlpUtilFilters_initialize();
  return new_EduStanfordNlpUtilFilters_CategoricalFilter_initWithBoolean_(true);
}

id<JavaUtilFunctionPredicate> EduStanfordNlpUtilFilters_rejectFilter() {
  EduStanfordNlpUtilFilters_initialize();
  return new_EduStanfordNlpUtilFilters_CategoricalFilter_initWithBoolean_(false);
}

id<JavaUtilFunctionPredicate> EduStanfordNlpUtilFilters_collectionAcceptFilterWithNSObjectArray_(IOSObjectArray *objs) {
  EduStanfordNlpUtilFilters_initialize();
  return new_EduStanfordNlpUtilFilters_CollectionAcceptFilter_initWithJavaUtilCollection_withBoolean_(JavaUtilArrays_asListWithNSObjectArray_(objs), true);
}

id<JavaUtilFunctionPredicate> EduStanfordNlpUtilFilters_collectionAcceptFilterWithJavaUtilCollection_(id<JavaUtilCollection> objs) {
  EduStanfordNlpUtilFilters_initialize();
  return new_EduStanfordNlpUtilFilters_CollectionAcceptFilter_initWithJavaUtilCollection_withBoolean_(objs, true);
}

id<JavaUtilFunctionPredicate> EduStanfordNlpUtilFilters_collectionRejectFilterWithNSObjectArray_(IOSObjectArray *objs) {
  EduStanfordNlpUtilFilters_initialize();
  return new_EduStanfordNlpUtilFilters_CollectionAcceptFilter_initWithJavaUtilCollection_withBoolean_(JavaUtilArrays_asListWithNSObjectArray_(objs), false);
}

id<JavaUtilFunctionPredicate> EduStanfordNlpUtilFilters_collectionRejectFilterWithJavaUtilCollection_(id<JavaUtilCollection> objs) {
  EduStanfordNlpUtilFilters_initialize();
  return new_EduStanfordNlpUtilFilters_CollectionAcceptFilter_initWithJavaUtilCollection_withBoolean_(objs, false);
}

id<JavaUtilFunctionPredicate> EduStanfordNlpUtilFilters_andFilterWithJavaUtilFunctionPredicate_withJavaUtilFunctionPredicate_(id<JavaUtilFunctionPredicate> f1, id<JavaUtilFunctionPredicate> f2) {
  EduStanfordNlpUtilFilters_initialize();
  return (new_EduStanfordNlpUtilFilters_CombinedFilter_initWithJavaUtilFunctionPredicate_withJavaUtilFunctionPredicate_withBoolean_(f1, f2, true));
}

id<JavaUtilFunctionPredicate> EduStanfordNlpUtilFilters_orFilterWithJavaUtilFunctionPredicate_withJavaUtilFunctionPredicate_(id<JavaUtilFunctionPredicate> f1, id<JavaUtilFunctionPredicate> f2) {
  EduStanfordNlpUtilFilters_initialize();
  return (new_EduStanfordNlpUtilFilters_CombinedFilter_initWithJavaUtilFunctionPredicate_withJavaUtilFunctionPredicate_withBoolean_(f1, f2, false));
}

id<JavaUtilFunctionPredicate> EduStanfordNlpUtilFilters_notFilterWithJavaUtilFunctionPredicate_(id<JavaUtilFunctionPredicate> filter) {
  EduStanfordNlpUtilFilters_initialize();
  return (new_EduStanfordNlpUtilFilters_NegatedFilter_initWithJavaUtilFunctionPredicate_(filter));
}

id<JavaUtilFunctionPredicate> EduStanfordNlpUtilFilters_switchedFilterWithJavaUtilFunctionPredicate_withBoolean_(id<JavaUtilFunctionPredicate> filter, jboolean negated) {
  EduStanfordNlpUtilFilters_initialize();
  return new_EduStanfordNlpUtilFilters_NegatedFilter_initWithJavaUtilFunctionPredicate_withBoolean_(filter, negated);
}

IOSObjectArray *EduStanfordNlpUtilFilters_filterWithNSObjectArray_withJavaUtilFunctionPredicate_(IOSObjectArray *elems, id<JavaUtilFunctionPredicate> filter) {
  EduStanfordNlpUtilFilters_initialize();
  id<JavaUtilList> filtered = new_JavaUtilArrayList_init();
  {
    IOSObjectArray *a__ = elems;
    id const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id elem = *b__++;
      if ([((id<JavaUtilFunctionPredicate>) nil_chk(filter)) testWithId:elem]) {
        [filtered addWithId:elem];
      }
    }
  }
  return ([filtered toArrayWithNSObjectArray:(IOSObjectArray *) cast_check(JavaLangReflectArray_newInstanceWithIOSClass_withInt_([[((IOSObjectArray *) nil_chk(elems)) getClass] getComponentType], [filtered size]), IOSClass_arrayType(NSObject_class_(), 1))]);
}

void EduStanfordNlpUtilFilters_retainAllWithJavaUtilCollection_withJavaUtilFunctionPredicate_(id<JavaUtilCollection> elems, id<JavaUtilFunctionPredicate> filter) {
  EduStanfordNlpUtilFilters_initialize();
  for (id<JavaUtilIterator> iter = [((id<JavaUtilCollection>) nil_chk(elems)) iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) {
    id elem = [iter next];
    if (![((id<JavaUtilFunctionPredicate>) nil_chk(filter)) testWithId:elem]) {
      [iter remove];
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpUtilFilters)

@implementation EduStanfordNlpUtilFilters_CategoricalFilter

- (instancetype)initWithBoolean:(jboolean)judgment {
  EduStanfordNlpUtilFilters_CategoricalFilter_initWithBoolean_(self, judgment);
  return self;
}

- (jboolean)testWithId:(id)obj {
  return judgment_;
}

- (NSString *)description {
  return JreStrcat("$ZC", @"CategoricalFilter(", judgment_, ')');
}

- (NSUInteger)hash {
  return ((jint) [((NSString *) nil_chk([self description])) hash]);
}

- (jboolean)isEqual:(id)other {
  if (other == self) {
    return true;
  }
  if (!([other isKindOfClass:[EduStanfordNlpUtilFilters_CategoricalFilter class]])) {
    return false;
  }
  return ((EduStanfordNlpUtilFilters_CategoricalFilter *) nil_chk(((EduStanfordNlpUtilFilters_CategoricalFilter *) cast_chk(other, [EduStanfordNlpUtilFilters_CategoricalFilter class]))))->judgment_ == self->judgment_;
}

- (id<JavaUtilFunctionPredicate>)and__WithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)arg0 {
  return JavaUtilFunctionPredicate_and__WithJavaUtilFunctionPredicate_(self, arg0);
}

- (id<JavaUtilFunctionPredicate>)negate {
  return JavaUtilFunctionPredicate_negate(self);
}

- (id<JavaUtilFunctionPredicate>)or__WithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)arg0 {
  return JavaUtilFunctionPredicate_or__WithJavaUtilFunctionPredicate_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, 3, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 5, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithBoolean:);
  methods[1].selector = @selector(testWithId:);
  methods[2].selector = @selector(description);
  methods[3].selector = @selector(hash);
  methods[4].selector = @selector(isEqual:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "judgment_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpUtilFilters_CategoricalFilter_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "Z", "test", "LNSObject;", "(TT;)Z", "toString", "hashCode", "equals", "LEduStanfordNlpUtilFilters;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Ljava/util/function/Predicate<TT;>;Ljava/io/Serializable;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilFilters_CategoricalFilter = { "CategoricalFilter", "edu.stanford.nlp.util", ptrTable, methods, fields, 7, 0x1a, 5, 2, 7, -1, -1, 8, -1 };
  return &_EduStanfordNlpUtilFilters_CategoricalFilter;
}

@end

void EduStanfordNlpUtilFilters_CategoricalFilter_initWithBoolean_(EduStanfordNlpUtilFilters_CategoricalFilter *self, jboolean judgment) {
  NSObject_init(self);
  self->judgment_ = judgment;
}

EduStanfordNlpUtilFilters_CategoricalFilter *new_EduStanfordNlpUtilFilters_CategoricalFilter_initWithBoolean_(jboolean judgment) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilFilters_CategoricalFilter, initWithBoolean_, judgment)
}

EduStanfordNlpUtilFilters_CategoricalFilter *create_EduStanfordNlpUtilFilters_CategoricalFilter_initWithBoolean_(jboolean judgment) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilFilters_CategoricalFilter, initWithBoolean_, judgment)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpUtilFilters_CategoricalFilter)

@implementation EduStanfordNlpUtilFilters_CollectionAcceptFilter

- (instancetype)initWithJavaUtilCollection:(id<JavaUtilCollection>)c
                               withBoolean:(jboolean)judgment {
  EduStanfordNlpUtilFilters_CollectionAcceptFilter_initWithJavaUtilCollection_withBoolean_(self, c, judgment);
  return self;
}

- (jboolean)testWithId:(id)obj {
  if ([((id<JavaUtilCollection>) nil_chk(args_)) containsWithId:obj]) {
    return judgment_;
  }
  return !judgment_;
}

- (NSString *)description {
  return JreStrcat("CZC@C", '(', judgment_, ':', args_, ')');
}

- (id<JavaUtilFunctionPredicate>)and__WithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)arg0 {
  return JavaUtilFunctionPredicate_and__WithJavaUtilFunctionPredicate_(self, arg0);
}

- (id<JavaUtilFunctionPredicate>)negate {
  return JavaUtilFunctionPredicate_negate(self);
}

- (id<JavaUtilFunctionPredicate>)or__WithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)arg0 {
  return JavaUtilFunctionPredicate_or__WithJavaUtilFunctionPredicate_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, 1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilCollection:withBoolean:);
  methods[1].selector = @selector(testWithId:);
  methods[2].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "args_", "LJavaUtilCollection;", .constantValue.asLong = 0, 0x12, -1, -1, 6, -1 },
    { "judgment_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpUtilFilters_CollectionAcceptFilter_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilCollection;Z", "(Ljava/util/Collection<TE;>;Z)V", "test", "LNSObject;", "(TE;)Z", "toString", "Ljava/util/Collection<TE;>;", "LEduStanfordNlpUtilFilters;", "<E:Ljava/lang/Object;>Ljava/lang/Object;Ljava/util/function/Predicate<TE;>;Ljava/io/Serializable;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilFilters_CollectionAcceptFilter = { "CollectionAcceptFilter", "edu.stanford.nlp.util", ptrTable, methods, fields, 7, 0x1a, 3, 3, 7, -1, -1, 8, -1 };
  return &_EduStanfordNlpUtilFilters_CollectionAcceptFilter;
}

@end

void EduStanfordNlpUtilFilters_CollectionAcceptFilter_initWithJavaUtilCollection_withBoolean_(EduStanfordNlpUtilFilters_CollectionAcceptFilter *self, id<JavaUtilCollection> c, jboolean judgment) {
  NSObject_init(self);
  self->args_ = EduStanfordNlpUtilGenerics_newHashSetWithJavaUtilCollection_(c);
  self->judgment_ = judgment;
}

EduStanfordNlpUtilFilters_CollectionAcceptFilter *new_EduStanfordNlpUtilFilters_CollectionAcceptFilter_initWithJavaUtilCollection_withBoolean_(id<JavaUtilCollection> c, jboolean judgment) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilFilters_CollectionAcceptFilter, initWithJavaUtilCollection_withBoolean_, c, judgment)
}

EduStanfordNlpUtilFilters_CollectionAcceptFilter *create_EduStanfordNlpUtilFilters_CollectionAcceptFilter_initWithJavaUtilCollection_withBoolean_(id<JavaUtilCollection> c, jboolean judgment) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilFilters_CollectionAcceptFilter, initWithJavaUtilCollection_withBoolean_, c, judgment)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpUtilFilters_CollectionAcceptFilter)

@implementation EduStanfordNlpUtilFilters_CombinedFilter

- (instancetype)initWithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)f1
                    withJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)f2
                                      withBoolean:(jboolean)conjunction {
  EduStanfordNlpUtilFilters_CombinedFilter_initWithJavaUtilFunctionPredicate_withJavaUtilFunctionPredicate_withBoolean_(self, f1, f2, conjunction);
  return self;
}

- (jboolean)testWithId:(id)o {
  if (conjunction_) {
    return ([((id<JavaUtilFunctionPredicate>) nil_chk(f1_)) testWithId:o] && [((id<JavaUtilFunctionPredicate>) nil_chk(f2_)) testWithId:o]);
  }
  return ([((id<JavaUtilFunctionPredicate>) nil_chk(f1_)) testWithId:o] || [((id<JavaUtilFunctionPredicate>) nil_chk(f2_)) testWithId:o]);
}

- (id<JavaUtilFunctionPredicate>)and__WithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)arg0 {
  return JavaUtilFunctionPredicate_and__WithJavaUtilFunctionPredicate_(self, arg0);
}

- (id<JavaUtilFunctionPredicate>)negate {
  return JavaUtilFunctionPredicate_negate(self);
}

- (id<JavaUtilFunctionPredicate>)or__WithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)arg0 {
  return JavaUtilFunctionPredicate_or__WithJavaUtilFunctionPredicate_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilFunctionPredicate:withJavaUtilFunctionPredicate:withBoolean:);
  methods[1].selector = @selector(testWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "f1_", "LJavaUtilFunctionPredicate;", .constantValue.asLong = 0, 0x12, -1, -1, 5, -1 },
    { "f2_", "LJavaUtilFunctionPredicate;", .constantValue.asLong = 0, 0x12, -1, -1, 5, -1 },
    { "conjunction_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpUtilFilters_CombinedFilter_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilFunctionPredicate;LJavaUtilFunctionPredicate;Z", "(Ljava/util/function/Predicate<TE;>;Ljava/util/function/Predicate<TE;>;Z)V", "test", "LNSObject;", "(TE;)Z", "Ljava/util/function/Predicate<TE;>;", "LEduStanfordNlpUtilFilters;", "<E:Ljava/lang/Object;>Ljava/lang/Object;Ljava/util/function/Predicate<TE;>;Ljava/io/Serializable;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilFilters_CombinedFilter = { "CombinedFilter", "edu.stanford.nlp.util", ptrTable, methods, fields, 7, 0xa, 2, 4, 6, -1, -1, 7, -1 };
  return &_EduStanfordNlpUtilFilters_CombinedFilter;
}

@end

void EduStanfordNlpUtilFilters_CombinedFilter_initWithJavaUtilFunctionPredicate_withJavaUtilFunctionPredicate_withBoolean_(EduStanfordNlpUtilFilters_CombinedFilter *self, id<JavaUtilFunctionPredicate> f1, id<JavaUtilFunctionPredicate> f2, jboolean conjunction) {
  NSObject_init(self);
  self->f1_ = f1;
  self->f2_ = f2;
  self->conjunction_ = conjunction;
}

EduStanfordNlpUtilFilters_CombinedFilter *new_EduStanfordNlpUtilFilters_CombinedFilter_initWithJavaUtilFunctionPredicate_withJavaUtilFunctionPredicate_withBoolean_(id<JavaUtilFunctionPredicate> f1, id<JavaUtilFunctionPredicate> f2, jboolean conjunction) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilFilters_CombinedFilter, initWithJavaUtilFunctionPredicate_withJavaUtilFunctionPredicate_withBoolean_, f1, f2, conjunction)
}

EduStanfordNlpUtilFilters_CombinedFilter *create_EduStanfordNlpUtilFilters_CombinedFilter_initWithJavaUtilFunctionPredicate_withJavaUtilFunctionPredicate_withBoolean_(id<JavaUtilFunctionPredicate> f1, id<JavaUtilFunctionPredicate> f2, jboolean conjunction) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilFilters_CombinedFilter, initWithJavaUtilFunctionPredicate_withJavaUtilFunctionPredicate_withBoolean_, f1, f2, conjunction)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpUtilFilters_CombinedFilter)

@implementation EduStanfordNlpUtilFilters_DisjFilter

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)filters {
  EduStanfordNlpUtilFilters_DisjFilter_initWithJavaUtilList_(self, filters);
  return self;
}

- (instancetype)initWithJavaUtilFunctionPredicateArray:(IOSObjectArray *)filters {
  EduStanfordNlpUtilFilters_DisjFilter_initWithJavaUtilFunctionPredicateArray_(self, filters);
  return self;
}

- (void)addFilterWithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)filter {
  [((id<JavaUtilList>) nil_chk(filters_)) addWithId:filter];
}

- (jboolean)testWithId:(id)obj {
  for (id<JavaUtilFunctionPredicate> __strong f in nil_chk(filters_)) {
    if ([((id<JavaUtilFunctionPredicate>) nil_chk(f)) testWithId:obj]) return true;
  }
  return false;
}

- (id<JavaUtilFunctionPredicate>)and__WithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)arg0 {
  return JavaUtilFunctionPredicate_and__WithJavaUtilFunctionPredicate_(self, arg0);
}

- (id<JavaUtilFunctionPredicate>)negate {
  return JavaUtilFunctionPredicate_negate(self);
}

- (id<JavaUtilFunctionPredicate>)or__WithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)arg0 {
  return JavaUtilFunctionPredicate_or__WithJavaUtilFunctionPredicate_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, NULL, 0x81, -1, 2, -1, -1, 3, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "Z", 0x1, 7, 8, -1, 9, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilList:);
  methods[1].selector = @selector(initWithJavaUtilFunctionPredicateArray:);
  methods[2].selector = @selector(addFilterWithJavaUtilFunctionPredicate:);
  methods[3].selector = @selector(testWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "filters_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 10, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpUtilFilters_DisjFilter_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilList;", "(Ljava/util/List<Ljava/util/function/Predicate<TT;>;>;)V", "[LJavaUtilFunctionPredicate;", (void *)&EduStanfordNlpUtilFilters_DisjFilter__Annotations$0, "addFilter", "LJavaUtilFunctionPredicate;", "(Ljava/util/function/Predicate<TT;>;)V", "test", "LNSObject;", "(TT;)Z", "Ljava/util/List<Ljava/util/function/Predicate<TT;>;>;", "LEduStanfordNlpUtilFilters;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Ljava/util/function/Predicate<TT;>;Ljava/io/Serializable;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilFilters_DisjFilter = { "DisjFilter", "edu.stanford.nlp.util", ptrTable, methods, fields, 7, 0x9, 4, 2, 11, -1, -1, 12, -1 };
  return &_EduStanfordNlpUtilFilters_DisjFilter;
}

@end

void EduStanfordNlpUtilFilters_DisjFilter_initWithJavaUtilList_(EduStanfordNlpUtilFilters_DisjFilter *self, id<JavaUtilList> filters) {
  NSObject_init(self);
  self->filters_ = filters;
}

EduStanfordNlpUtilFilters_DisjFilter *new_EduStanfordNlpUtilFilters_DisjFilter_initWithJavaUtilList_(id<JavaUtilList> filters) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilFilters_DisjFilter, initWithJavaUtilList_, filters)
}

EduStanfordNlpUtilFilters_DisjFilter *create_EduStanfordNlpUtilFilters_DisjFilter_initWithJavaUtilList_(id<JavaUtilList> filters) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilFilters_DisjFilter, initWithJavaUtilList_, filters)
}

void EduStanfordNlpUtilFilters_DisjFilter_initWithJavaUtilFunctionPredicateArray_(EduStanfordNlpUtilFilters_DisjFilter *self, IOSObjectArray *filters) {
  NSObject_init(self);
  self->filters_ = new_JavaUtilArrayList_init();
  [self->filters_ addAllWithJavaUtilCollection:JavaUtilArrays_asListWithNSObjectArray_(filters)];
}

EduStanfordNlpUtilFilters_DisjFilter *new_EduStanfordNlpUtilFilters_DisjFilter_initWithJavaUtilFunctionPredicateArray_(IOSObjectArray *filters) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilFilters_DisjFilter, initWithJavaUtilFunctionPredicateArray_, filters)
}

EduStanfordNlpUtilFilters_DisjFilter *create_EduStanfordNlpUtilFilters_DisjFilter_initWithJavaUtilFunctionPredicateArray_(IOSObjectArray *filters) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilFilters_DisjFilter, initWithJavaUtilFunctionPredicateArray_, filters)
}

IOSObjectArray *EduStanfordNlpUtilFilters_DisjFilter__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangSafeVarargs() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpUtilFilters_DisjFilter)

@implementation EduStanfordNlpUtilFilters_ConjFilter

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)filters {
  EduStanfordNlpUtilFilters_ConjFilter_initWithJavaUtilList_(self, filters);
  return self;
}

- (instancetype)initWithJavaUtilFunctionPredicateArray:(IOSObjectArray *)filters {
  EduStanfordNlpUtilFilters_ConjFilter_initWithJavaUtilFunctionPredicateArray_(self, filters);
  return self;
}

- (void)addFilterWithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)filter {
  [((id<JavaUtilList>) nil_chk(filters_)) addWithId:filter];
}

- (jboolean)testWithId:(id)obj {
  for (id<JavaUtilFunctionPredicate> __strong f in nil_chk(filters_)) {
    if (![((id<JavaUtilFunctionPredicate>) nil_chk(f)) testWithId:obj]) return false;
  }
  return true;
}

- (id<JavaUtilFunctionPredicate>)and__WithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)arg0 {
  return JavaUtilFunctionPredicate_and__WithJavaUtilFunctionPredicate_(self, arg0);
}

- (id<JavaUtilFunctionPredicate>)negate {
  return JavaUtilFunctionPredicate_negate(self);
}

- (id<JavaUtilFunctionPredicate>)or__WithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)arg0 {
  return JavaUtilFunctionPredicate_or__WithJavaUtilFunctionPredicate_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, NULL, 0x81, -1, 2, -1, -1, 3, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "Z", 0x1, 7, 8, -1, 9, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilList:);
  methods[1].selector = @selector(initWithJavaUtilFunctionPredicateArray:);
  methods[2].selector = @selector(addFilterWithJavaUtilFunctionPredicate:);
  methods[3].selector = @selector(testWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "filters_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 10, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpUtilFilters_ConjFilter_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilList;", "(Ljava/util/List<Ljava/util/function/Predicate<TT;>;>;)V", "[LJavaUtilFunctionPredicate;", (void *)&EduStanfordNlpUtilFilters_ConjFilter__Annotations$0, "addFilter", "LJavaUtilFunctionPredicate;", "(Ljava/util/function/Predicate<TT;>;)V", "test", "LNSObject;", "(TT;)Z", "Ljava/util/List<Ljava/util/function/Predicate<TT;>;>;", "LEduStanfordNlpUtilFilters;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Ljava/util/function/Predicate<TT;>;Ljava/io/Serializable;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilFilters_ConjFilter = { "ConjFilter", "edu.stanford.nlp.util", ptrTable, methods, fields, 7, 0x9, 4, 2, 11, -1, -1, 12, -1 };
  return &_EduStanfordNlpUtilFilters_ConjFilter;
}

@end

void EduStanfordNlpUtilFilters_ConjFilter_initWithJavaUtilList_(EduStanfordNlpUtilFilters_ConjFilter *self, id<JavaUtilList> filters) {
  NSObject_init(self);
  self->filters_ = filters;
}

EduStanfordNlpUtilFilters_ConjFilter *new_EduStanfordNlpUtilFilters_ConjFilter_initWithJavaUtilList_(id<JavaUtilList> filters) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilFilters_ConjFilter, initWithJavaUtilList_, filters)
}

EduStanfordNlpUtilFilters_ConjFilter *create_EduStanfordNlpUtilFilters_ConjFilter_initWithJavaUtilList_(id<JavaUtilList> filters) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilFilters_ConjFilter, initWithJavaUtilList_, filters)
}

void EduStanfordNlpUtilFilters_ConjFilter_initWithJavaUtilFunctionPredicateArray_(EduStanfordNlpUtilFilters_ConjFilter *self, IOSObjectArray *filters) {
  NSObject_init(self);
  self->filters_ = new_JavaUtilArrayList_init();
  [self->filters_ addAllWithJavaUtilCollection:JavaUtilArrays_asListWithNSObjectArray_(filters)];
}

EduStanfordNlpUtilFilters_ConjFilter *new_EduStanfordNlpUtilFilters_ConjFilter_initWithJavaUtilFunctionPredicateArray_(IOSObjectArray *filters) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilFilters_ConjFilter, initWithJavaUtilFunctionPredicateArray_, filters)
}

EduStanfordNlpUtilFilters_ConjFilter *create_EduStanfordNlpUtilFilters_ConjFilter_initWithJavaUtilFunctionPredicateArray_(IOSObjectArray *filters) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilFilters_ConjFilter, initWithJavaUtilFunctionPredicateArray_, filters)
}

IOSObjectArray *EduStanfordNlpUtilFilters_ConjFilter__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangSafeVarargs() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpUtilFilters_ConjFilter)

@implementation EduStanfordNlpUtilFilters_NegatedFilter

- (instancetype)initWithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)filter
                                      withBoolean:(jboolean)negated {
  EduStanfordNlpUtilFilters_NegatedFilter_initWithJavaUtilFunctionPredicate_withBoolean_(self, filter, negated);
  return self;
}

- (instancetype)initWithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)filter {
  EduStanfordNlpUtilFilters_NegatedFilter_initWithJavaUtilFunctionPredicate_(self, filter);
  return self;
}

- (jboolean)testWithId:(id)o {
  return (negated_ ^ [((id<JavaUtilFunctionPredicate>) nil_chk(filter_)) testWithId:o]);
}

- (NSString *)description {
  return JreStrcat("$$C", @"NOT(", [((id<JavaUtilFunctionPredicate>) nil_chk(filter_)) description], ')');
}

- (id<JavaUtilFunctionPredicate>)and__WithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)arg0 {
  return JavaUtilFunctionPredicate_and__WithJavaUtilFunctionPredicate_(self, arg0);
}

- (id<JavaUtilFunctionPredicate>)negate {
  return JavaUtilFunctionPredicate_negate(self);
}

- (id<JavaUtilFunctionPredicate>)or__WithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)arg0 {
  return JavaUtilFunctionPredicate_or__WithJavaUtilFunctionPredicate_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, 3, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "LNSString;", 0x1, 7, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilFunctionPredicate:withBoolean:);
  methods[1].selector = @selector(initWithJavaUtilFunctionPredicate:);
  methods[2].selector = @selector(testWithId:);
  methods[3].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "filter_", "LJavaUtilFunctionPredicate;", .constantValue.asLong = 0, 0x12, -1, -1, 8, -1 },
    { "negated_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpUtilFilters_NegatedFilter_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilFunctionPredicate;Z", "(Ljava/util/function/Predicate<TE;>;Z)V", "LJavaUtilFunctionPredicate;", "(Ljava/util/function/Predicate<TE;>;)V", "test", "LNSObject;", "(TE;)Z", "toString", "Ljava/util/function/Predicate<TE;>;", "LEduStanfordNlpUtilFilters;", "<E:Ljava/lang/Object;>Ljava/lang/Object;Ljava/util/function/Predicate<TE;>;Ljava/io/Serializable;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilFilters_NegatedFilter = { "NegatedFilter", "edu.stanford.nlp.util", ptrTable, methods, fields, 7, 0xa, 4, 3, 9, -1, -1, 10, -1 };
  return &_EduStanfordNlpUtilFilters_NegatedFilter;
}

@end

void EduStanfordNlpUtilFilters_NegatedFilter_initWithJavaUtilFunctionPredicate_withBoolean_(EduStanfordNlpUtilFilters_NegatedFilter *self, id<JavaUtilFunctionPredicate> filter, jboolean negated) {
  NSObject_init(self);
  self->filter_ = filter;
  self->negated_ = negated;
}

EduStanfordNlpUtilFilters_NegatedFilter *new_EduStanfordNlpUtilFilters_NegatedFilter_initWithJavaUtilFunctionPredicate_withBoolean_(id<JavaUtilFunctionPredicate> filter, jboolean negated) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilFilters_NegatedFilter, initWithJavaUtilFunctionPredicate_withBoolean_, filter, negated)
}

EduStanfordNlpUtilFilters_NegatedFilter *create_EduStanfordNlpUtilFilters_NegatedFilter_initWithJavaUtilFunctionPredicate_withBoolean_(id<JavaUtilFunctionPredicate> filter, jboolean negated) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilFilters_NegatedFilter, initWithJavaUtilFunctionPredicate_withBoolean_, filter, negated)
}

void EduStanfordNlpUtilFilters_NegatedFilter_initWithJavaUtilFunctionPredicate_(EduStanfordNlpUtilFilters_NegatedFilter *self, id<JavaUtilFunctionPredicate> filter) {
  EduStanfordNlpUtilFilters_NegatedFilter_initWithJavaUtilFunctionPredicate_withBoolean_(self, filter, true);
}

EduStanfordNlpUtilFilters_NegatedFilter *new_EduStanfordNlpUtilFilters_NegatedFilter_initWithJavaUtilFunctionPredicate_(id<JavaUtilFunctionPredicate> filter) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilFilters_NegatedFilter, initWithJavaUtilFunctionPredicate_, filter)
}

EduStanfordNlpUtilFilters_NegatedFilter *create_EduStanfordNlpUtilFilters_NegatedFilter_initWithJavaUtilFunctionPredicate_(id<JavaUtilFunctionPredicate> filter) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilFilters_NegatedFilter, initWithJavaUtilFunctionPredicate_, filter)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpUtilFilters_NegatedFilter)

@implementation EduStanfordNlpUtilFilters_RandomFilter

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpUtilFilters_RandomFilter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithDouble:(jdouble)fraction {
  EduStanfordNlpUtilFilters_RandomFilter_initWithDouble_(self, fraction);
  return self;
}

- (instancetype)initWithDouble:(jdouble)fraction
            withJavaUtilRandom:(JavaUtilRandom *)random {
  EduStanfordNlpUtilFilters_RandomFilter_initWithDouble_withJavaUtilRandom_(self, fraction, random);
  return self;
}

- (jboolean)testWithId:(id)o {
  return ([((JavaUtilRandom *) nil_chk(random_)) nextDouble] < fraction_);
}

- (id<JavaUtilFunctionPredicate>)and__WithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)arg0 {
  return JavaUtilFunctionPredicate_and__WithJavaUtilFunctionPredicate_(self, arg0);
}

- (id<JavaUtilFunctionPredicate>)negate {
  return JavaUtilFunctionPredicate_negate(self);
}

- (id<JavaUtilFunctionPredicate>)or__WithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)arg0 {
  return JavaUtilFunctionPredicate_or__WithJavaUtilFunctionPredicate_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithDouble:);
  methods[2].selector = @selector(initWithDouble:withJavaUtilRandom:);
  methods[3].selector = @selector(testWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpUtilFilters_RandomFilter_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "random_", "LJavaUtilRandom;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "fraction_", "D", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "D", "DLJavaUtilRandom;", "test", "LNSObject;", "(TE;)Z", "LEduStanfordNlpUtilFilters;", "<E:Ljava/lang/Object;>Ljava/lang/Object;Ljava/util/function/Predicate<TE;>;Ljava/io/Serializable;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilFilters_RandomFilter = { "RandomFilter", "edu.stanford.nlp.util", ptrTable, methods, fields, 7, 0x9, 4, 3, 5, -1, -1, 6, -1 };
  return &_EduStanfordNlpUtilFilters_RandomFilter;
}

@end

void EduStanfordNlpUtilFilters_RandomFilter_init(EduStanfordNlpUtilFilters_RandomFilter *self) {
  EduStanfordNlpUtilFilters_RandomFilter_initWithDouble_withJavaUtilRandom_(self, 0.1, new_JavaUtilRandom_init());
}

EduStanfordNlpUtilFilters_RandomFilter *new_EduStanfordNlpUtilFilters_RandomFilter_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilFilters_RandomFilter, init)
}

EduStanfordNlpUtilFilters_RandomFilter *create_EduStanfordNlpUtilFilters_RandomFilter_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilFilters_RandomFilter, init)
}

void EduStanfordNlpUtilFilters_RandomFilter_initWithDouble_(EduStanfordNlpUtilFilters_RandomFilter *self, jdouble fraction) {
  EduStanfordNlpUtilFilters_RandomFilter_initWithDouble_withJavaUtilRandom_(self, fraction, new_JavaUtilRandom_init());
}

EduStanfordNlpUtilFilters_RandomFilter *new_EduStanfordNlpUtilFilters_RandomFilter_initWithDouble_(jdouble fraction) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilFilters_RandomFilter, initWithDouble_, fraction)
}

EduStanfordNlpUtilFilters_RandomFilter *create_EduStanfordNlpUtilFilters_RandomFilter_initWithDouble_(jdouble fraction) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilFilters_RandomFilter, initWithDouble_, fraction)
}

void EduStanfordNlpUtilFilters_RandomFilter_initWithDouble_withJavaUtilRandom_(EduStanfordNlpUtilFilters_RandomFilter *self, jdouble fraction, JavaUtilRandom *random) {
  NSObject_init(self);
  self->fraction_ = fraction;
  self->random_ = random;
}

EduStanfordNlpUtilFilters_RandomFilter *new_EduStanfordNlpUtilFilters_RandomFilter_initWithDouble_withJavaUtilRandom_(jdouble fraction, JavaUtilRandom *random) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilFilters_RandomFilter, initWithDouble_withJavaUtilRandom_, fraction, random)
}

EduStanfordNlpUtilFilters_RandomFilter *create_EduStanfordNlpUtilFilters_RandomFilter_initWithDouble_withJavaUtilRandom_(jdouble fraction, JavaUtilRandom *random) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilFilters_RandomFilter, initWithDouble_withJavaUtilRandom_, fraction, random)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpUtilFilters_RandomFilter)
