//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/util/ArrayMap.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/util/ArrayMap.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/System.h"
#include "java/util/AbstractMap.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

@interface EduStanfordNlpUtilArrayMap () {
 @public
  IOSObjectArray *entryArray_;
  jint capacity_;
  jint size_;
}

- (void)resize;

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpUtilArrayMap, entryArray_, IOSObjectArray *)

inline jlong EduStanfordNlpUtilArrayMap_get_serialVersionUID();
#define EduStanfordNlpUtilArrayMap_serialVersionUID 1LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpUtilArrayMap, serialVersionUID, jlong)

__attribute__((unused)) static void EduStanfordNlpUtilArrayMap_resize(EduStanfordNlpUtilArrayMap *self);

@interface EduStanfordNlpUtilArrayMap_Entry () {
 @public
  id key_;
  id value_;
}

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpUtilArrayMap_Entry, key_, id)
J2OBJC_FIELD_SETTER(EduStanfordNlpUtilArrayMap_Entry, value_, id)

inline jlong EduStanfordNlpUtilArrayMap_Entry_get_serialVersionUID();
#define EduStanfordNlpUtilArrayMap_Entry_serialVersionUID 1LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpUtilArrayMap_Entry, serialVersionUID, jlong)

@interface EduStanfordNlpUtilArrayMap_$1 : JavaUtilHashSet {
 @public
  EduStanfordNlpUtilArrayMap *this$0_;
}

- (jboolean)removeWithId:(id)o;

- (void)clear;

- (instancetype)initWithEduStanfordNlpUtilArrayMap:(EduStanfordNlpUtilArrayMap *)outer$
                            withJavaUtilCollection:(id<JavaUtilCollection>)arg$0;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpUtilArrayMap_$1)

J2OBJC_FIELD_SETTER(EduStanfordNlpUtilArrayMap_$1, this$0_, EduStanfordNlpUtilArrayMap *)

inline jlong EduStanfordNlpUtilArrayMap_$1_get_serialVersionUID();
#define EduStanfordNlpUtilArrayMap_$1_serialVersionUID 2746535724049192751LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpUtilArrayMap_$1, serialVersionUID, jlong)

__attribute__((unused)) static void EduStanfordNlpUtilArrayMap_$1_initWithEduStanfordNlpUtilArrayMap_withJavaUtilCollection_(EduStanfordNlpUtilArrayMap_$1 *self, EduStanfordNlpUtilArrayMap *outer$, id<JavaUtilCollection> arg$0);

__attribute__((unused)) static EduStanfordNlpUtilArrayMap_$1 *new_EduStanfordNlpUtilArrayMap_$1_initWithEduStanfordNlpUtilArrayMap_withJavaUtilCollection_(EduStanfordNlpUtilArrayMap *outer$, id<JavaUtilCollection> arg$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpUtilArrayMap_$1 *create_EduStanfordNlpUtilArrayMap_$1_initWithEduStanfordNlpUtilArrayMap_withJavaUtilCollection_(EduStanfordNlpUtilArrayMap *outer$, id<JavaUtilCollection> arg$0);

@implementation EduStanfordNlpUtilArrayMap

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpUtilArrayMap_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithInt:(jint)capacity {
  EduStanfordNlpUtilArrayMap_initWithInt_(self, capacity);
  return self;
}

- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)m {
  EduStanfordNlpUtilArrayMap_initWithJavaUtilMap_(self, m);
  return self;
}

- (instancetype)initWithNSObjectArray:(IOSObjectArray *)keys
                    withNSObjectArray:(IOSObjectArray *)values {
  EduStanfordNlpUtilArrayMap_initWithNSObjectArray_withNSObjectArray_(self, keys, values);
  return self;
}

+ (EduStanfordNlpUtilArrayMap *)newArrayMap {
  return EduStanfordNlpUtilArrayMap_newArrayMap();
}

+ (EduStanfordNlpUtilArrayMap *)newArrayMapWithInt:(jint)capacity {
  return EduStanfordNlpUtilArrayMap_newArrayMapWithInt_(capacity);
}

- (id<JavaUtilSet>)entrySet {
  return new_EduStanfordNlpUtilArrayMap_$1_initWithEduStanfordNlpUtilArrayMap_withJavaUtilCollection_(self, [((id<JavaUtilList>) nil_chk(JavaUtilArrays_asListWithNSObjectArray_(entryArray_))) subListWithInt:0 withInt:size_]);
}

- (jint)size {
  return size_;
}

- (jboolean)isEmpty {
  return size_ == 0;
}

- (void)resize {
  EduStanfordNlpUtilArrayMap_resize(self);
}

- (void)clear {
  size_ = 0;
}

- (id)putWithId:(id)key
         withId:(id)val {
  for (jint i = 0; i < size_; i++) {
    if ([nil_chk(key) isEqual:[((EduStanfordNlpUtilArrayMap_Entry *) nil_chk(IOSObjectArray_Get(nil_chk(entryArray_), i))) getKey]]) {
      return [((EduStanfordNlpUtilArrayMap_Entry *) nil_chk(IOSObjectArray_Get(nil_chk(entryArray_), i))) setValueWithId:val];
    }
  }
  if (capacity_ <= size_) {
    EduStanfordNlpUtilArrayMap_resize(self);
  }
  (void) IOSObjectArray_SetAndConsume(nil_chk(entryArray_), size_, new_EduStanfordNlpUtilArrayMap_Entry_initWithId_withId_(key, val));
  size_++;
  return nil;
}

- (id)getWithId:(id)key {
  for (jint i = 0; i < size_; i++) {
    if (key == nil ? [((EduStanfordNlpUtilArrayMap_Entry *) nil_chk(IOSObjectArray_Get(nil_chk(entryArray_), i))) getKey] == nil : [key isEqual:[((EduStanfordNlpUtilArrayMap_Entry *) nil_chk(IOSObjectArray_Get(nil_chk(entryArray_), i))) getKey]]) {
      return [((EduStanfordNlpUtilArrayMap_Entry *) nil_chk(IOSObjectArray_Get(nil_chk(entryArray_), i))) getValue];
    }
  }
  return nil;
}

- (id)removeWithId:(id)key {
  for (jint i = 0; i < size_; i++) {
    if (key == nil ? [((EduStanfordNlpUtilArrayMap_Entry *) nil_chk(IOSObjectArray_Get(nil_chk(entryArray_), i))) getKey] == nil : [key isEqual:[((EduStanfordNlpUtilArrayMap_Entry *) nil_chk(IOSObjectArray_Get(nil_chk(entryArray_), i))) getKey]]) {
      id value = [((EduStanfordNlpUtilArrayMap_Entry *) nil_chk(IOSObjectArray_Get(nil_chk(entryArray_), i))) getValue];
      if (size_ > 1) {
        (void) IOSObjectArray_Set(nil_chk(entryArray_), i, IOSObjectArray_Get(entryArray_, size_ - 1));
      }
      size_--;
      return value;
    }
  }
  return nil;
}

- (NSUInteger)hash {
  if (hashCodeCache_ == 0) {
    jint hashCode = 5381;
    for (jint i = 0; i < size_; i++) {
      hashCode = hashCode * 33 + ((jint) [((EduStanfordNlpUtilArrayMap_Entry *) nil_chk(IOSObjectArray_Get(nil_chk(entryArray_), i))) hash]);
    }
    hashCodeCache_ = hashCode;
  }
  return hashCodeCache_;
}

- (jboolean)isEqual:(id)o {
  if (self == o) {
    return true;
  }
  if (!([JavaUtilMap_class_() isInstance:o])) {
    return false;
  }
  id<JavaUtilMap> m = (id<JavaUtilMap>) cast_check(o, JavaUtilMap_class_());
  for (jint i = 0; i < size_; i++) {
    id mVal = [((id<JavaUtilMap>) nil_chk(m)) getWithId:[((EduStanfordNlpUtilArrayMap_Entry *) nil_chk(IOSObjectArray_Get(nil_chk(entryArray_), i))) getKey]];
    if (mVal == nil) {
      if (IOSObjectArray_Get(nil_chk(entryArray_), i) != nil) {
        return false;
      }
      else {
        continue;
      }
    }
    if (![nil_chk([m getWithId:[((EduStanfordNlpUtilArrayMap_Entry *) nil_chk(IOSObjectArray_Get(nil_chk(entryArray_), i))) getKey]]) isEqual:[((EduStanfordNlpUtilArrayMap_Entry *) nil_chk(IOSObjectArray_Get(nil_chk(entryArray_), i))) getValue]]) {
      return false;
    }
  }
  return true;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpUtilArrayMap;", 0x9, -1, -1, -1, 4, -1, -1 },
    { NULL, "LEduStanfordNlpUtilArrayMap;", 0x9, 5, 0, -1, 6, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 7, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 8, 9, -1, 10, -1, -1 },
    { NULL, "LNSObject;", 0x1, 11, 12, -1, 13, -1, -1 },
    { NULL, "LNSObject;", 0x1, 14, 12, -1, 13, -1, -1 },
    { NULL, "I", 0x1, 15, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 16, 12, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithInt:);
  methods[2].selector = @selector(initWithJavaUtilMap:);
  methods[3].selector = @selector(initWithNSObjectArray:withNSObjectArray:);
  methods[4].selector = @selector(newArrayMap);
  methods[5].selector = @selector(newArrayMapWithInt:);
  methods[6].selector = @selector(entrySet);
  methods[7].selector = @selector(size);
  methods[8].selector = @selector(isEmpty);
  methods[9].selector = @selector(resize);
  methods[10].selector = @selector(clear);
  methods[11].selector = @selector(putWithId:withId:);
  methods[12].selector = @selector(getWithId:);
  methods[13].selector = @selector(removeWithId:);
  methods[14].selector = @selector(hash);
  methods[15].selector = @selector(isEqual:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpUtilArrayMap_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "entryArray_", "[LEduStanfordNlpUtilArrayMap_Entry;", .constantValue.asLong = 0, 0x2, -1, -1, 17, -1 },
    { "capacity_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "size_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "hashCodeCache_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "LJavaUtilMap;", "(Ljava/util/Map<+TK;+TV;>;)V", "[LNSObject;[LNSObject;", "<K:Ljava/lang/Object;V:Ljava/lang/Object;>()Ledu/stanford/nlp/util/ArrayMap<TK;TV;>;", "newArrayMap", "<K:Ljava/lang/Object;V:Ljava/lang/Object;>(I)Ledu/stanford/nlp/util/ArrayMap<TK;TV;>;", "()Ljava/util/Set<Ljava/util/Map$Entry<TK;TV;>;>;", "put", "LNSObject;LNSObject;", "(TK;TV;)TV;", "get", "LNSObject;", "(Ljava/lang/Object;)TV;", "remove", "hashCode", "equals", "[Ledu/stanford/nlp/util/ArrayMap$Entry<TK;TV;>;", "LEduStanfordNlpUtilArrayMap_Entry;", "<K:Ljava/lang/Object;V:Ljava/lang/Object;>Ljava/util/AbstractMap<TK;TV;>;Ljava/io/Serializable;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilArrayMap = { "ArrayMap", "edu.stanford.nlp.util", ptrTable, methods, fields, 7, 0x11, 16, 5, -1, 18, -1, 19, -1 };
  return &_EduStanfordNlpUtilArrayMap;
}

@end

void EduStanfordNlpUtilArrayMap_init(EduStanfordNlpUtilArrayMap *self) {
  JavaUtilAbstractMap_init(self);
  self->size_ = 0;
  self->capacity_ = 2;
  self->entryArray_ = [IOSObjectArray newArrayWithLength:2 type:EduStanfordNlpUtilArrayMap_Entry_class_()];
}

EduStanfordNlpUtilArrayMap *new_EduStanfordNlpUtilArrayMap_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilArrayMap, init)
}

EduStanfordNlpUtilArrayMap *create_EduStanfordNlpUtilArrayMap_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilArrayMap, init)
}

void EduStanfordNlpUtilArrayMap_initWithInt_(EduStanfordNlpUtilArrayMap *self, jint capacity) {
  JavaUtilAbstractMap_init(self);
  self->size_ = 0;
  self->capacity_ = capacity;
  self->entryArray_ = [IOSObjectArray newArrayWithLength:capacity type:EduStanfordNlpUtilArrayMap_Entry_class_()];
}

EduStanfordNlpUtilArrayMap *new_EduStanfordNlpUtilArrayMap_initWithInt_(jint capacity) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilArrayMap, initWithInt_, capacity)
}

EduStanfordNlpUtilArrayMap *create_EduStanfordNlpUtilArrayMap_initWithInt_(jint capacity) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilArrayMap, initWithInt_, capacity)
}

void EduStanfordNlpUtilArrayMap_initWithJavaUtilMap_(EduStanfordNlpUtilArrayMap *self, id<JavaUtilMap> m) {
  JavaUtilAbstractMap_init(self);
  self->size_ = 0;
  self->capacity_ = [((id<JavaUtilMap>) nil_chk(m)) size];
  self->entryArray_ = [IOSObjectArray newArrayWithLength:[m size] type:EduStanfordNlpUtilArrayMap_Entry_class_()];
  [self putAllWithJavaUtilMap:m];
}

EduStanfordNlpUtilArrayMap *new_EduStanfordNlpUtilArrayMap_initWithJavaUtilMap_(id<JavaUtilMap> m) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilArrayMap, initWithJavaUtilMap_, m)
}

EduStanfordNlpUtilArrayMap *create_EduStanfordNlpUtilArrayMap_initWithJavaUtilMap_(id<JavaUtilMap> m) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilArrayMap, initWithJavaUtilMap_, m)
}

void EduStanfordNlpUtilArrayMap_initWithNSObjectArray_withNSObjectArray_(EduStanfordNlpUtilArrayMap *self, IOSObjectArray *keys, IOSObjectArray *values) {
  JavaUtilAbstractMap_init(self);
  if (((IOSObjectArray *) nil_chk(keys))->size_ != ((IOSObjectArray *) nil_chk(values))->size_) @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"different number of keys and values.");
  self->size_ = keys->size_;
  self->capacity_ = self->size_;
  self->entryArray_ = [IOSObjectArray newArrayWithLength:self->size_ type:EduStanfordNlpUtilArrayMap_Entry_class_()];
  for (jint i = 0; i < keys->size_; i++) {
    (void) IOSObjectArray_SetAndConsume(nil_chk(self->entryArray_), i, new_EduStanfordNlpUtilArrayMap_Entry_initWithId_withId_(IOSObjectArray_Get(keys, i), IOSObjectArray_Get(values, i)));
  }
}

EduStanfordNlpUtilArrayMap *new_EduStanfordNlpUtilArrayMap_initWithNSObjectArray_withNSObjectArray_(IOSObjectArray *keys, IOSObjectArray *values) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilArrayMap, initWithNSObjectArray_withNSObjectArray_, keys, values)
}

EduStanfordNlpUtilArrayMap *create_EduStanfordNlpUtilArrayMap_initWithNSObjectArray_withNSObjectArray_(IOSObjectArray *keys, IOSObjectArray *values) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilArrayMap, initWithNSObjectArray_withNSObjectArray_, keys, values)
}

EduStanfordNlpUtilArrayMap *EduStanfordNlpUtilArrayMap_newArrayMap() {
  EduStanfordNlpUtilArrayMap_initialize();
  return new_EduStanfordNlpUtilArrayMap_init();
}

EduStanfordNlpUtilArrayMap *EduStanfordNlpUtilArrayMap_newArrayMapWithInt_(jint capacity) {
  EduStanfordNlpUtilArrayMap_initialize();
  return new_EduStanfordNlpUtilArrayMap_initWithInt_(capacity);
}

void EduStanfordNlpUtilArrayMap_resize(EduStanfordNlpUtilArrayMap *self) {
  IOSObjectArray *oldEntryArray = self->entryArray_;
  jint newCapacity = 2 * self->size_;
  if (newCapacity == 0) newCapacity = 1;
  self->entryArray_ = [IOSObjectArray newArrayWithLength:newCapacity type:EduStanfordNlpUtilArrayMap_Entry_class_()];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(oldEntryArray, 0, self->entryArray_, 0, self->size_);
  self->capacity_ = newCapacity;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpUtilArrayMap)

@implementation EduStanfordNlpUtilArrayMap_Entry

- (id)getKey {
  return key_;
}

- (id)getValue {
  return value_;
}

- (id)setValueWithId:(id)o {
  id old = value_;
  value_ = o;
  return old;
}

- (NSUInteger)hash {
  return ([self getKey] == nil ? 0 : ((jint) [nil_chk([self getKey]) hash])) ^ ([self getValue] == nil ? 0 : ((jint) [nil_chk([self getValue]) hash]));
}

- (jboolean)isEqual:(id)o {
  if (self == o) {
    return true;
  }
  if (!([o isKindOfClass:[EduStanfordNlpUtilArrayMap_Entry class]])) {
    return false;
  }
  EduStanfordNlpUtilArrayMap_Entry *e = (EduStanfordNlpUtilArrayMap_Entry *) cast_chk(o, [EduStanfordNlpUtilArrayMap_Entry class]);
  return ([self getKey] == nil ? [((EduStanfordNlpUtilArrayMap_Entry *) nil_chk(e)) getKey] == nil : [nil_chk([self getKey]) isEqual:[((EduStanfordNlpUtilArrayMap_Entry *) nil_chk(e)) getKey]]) && ([self getValue] == nil ? [e getValue] == nil : [nil_chk([self getValue]) isEqual:[e getValue]]);
}

- (instancetype)initWithId:(id)key
                    withId:(id)value {
  EduStanfordNlpUtilArrayMap_Entry_initWithId_withId_(self, key, value);
  return self;
}

- (NSString *)description {
  return JreStrcat("@C@", key_, '=', value_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "I", 0x1, 5, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 7, -1, 8, -1, -1 },
    { NULL, "LNSString;", 0x1, 9, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(getKey);
  methods[1].selector = @selector(getValue);
  methods[2].selector = @selector(setValueWithId:);
  methods[3].selector = @selector(hash);
  methods[4].selector = @selector(isEqual:);
  methods[5].selector = @selector(initWithId:withId:);
  methods[6].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpUtilArrayMap_Entry_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "key_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, 10, -1 },
    { "value_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, 11, -1 },
  };
  static const void *ptrTable[] = { "()TK;", "()TV;", "setValue", "LNSObject;", "(TV;)TV;", "hashCode", "equals", "LNSObject;LNSObject;", "(TK;TV;)V", "toString", "TK;", "TV;", "LEduStanfordNlpUtilArrayMap;", "<K:Ljava/lang/Object;V:Ljava/lang/Object;>Ljava/lang/Object;Ljava/util/Map$Entry<TK;TV;>;Ljava/io/Serializable;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilArrayMap_Entry = { "Entry", "edu.stanford.nlp.util", ptrTable, methods, fields, 7, 0x18, 7, 3, 12, -1, -1, 13, -1 };
  return &_EduStanfordNlpUtilArrayMap_Entry;
}

@end

void EduStanfordNlpUtilArrayMap_Entry_initWithId_withId_(EduStanfordNlpUtilArrayMap_Entry *self, id key, id value) {
  NSObject_init(self);
  self->key_ = key;
  self->value_ = value;
}

EduStanfordNlpUtilArrayMap_Entry *new_EduStanfordNlpUtilArrayMap_Entry_initWithId_withId_(id key, id value) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilArrayMap_Entry, initWithId_withId_, key, value)
}

EduStanfordNlpUtilArrayMap_Entry *create_EduStanfordNlpUtilArrayMap_Entry_initWithId_withId_(id key, id value) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilArrayMap_Entry, initWithId_withId_, key, value)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpUtilArrayMap_Entry)

@implementation EduStanfordNlpUtilArrayMap_$1

- (jboolean)removeWithId:(id)o {
  if ([JavaUtilMap_Entry_class_() isInstance:o]) {
    id<JavaUtilMap_Entry> entry_ = (id<JavaUtilMap_Entry>) cast_check(o, JavaUtilMap_Entry_class_());
    (void) [this$0_ removeWithId:[((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey]];
    return [super removeWithId:o];
  }
  else {
    return false;
  }
}

- (void)clear {
  [super clear];
  [this$0_ clear];
}

- (instancetype)initWithEduStanfordNlpUtilArrayMap:(EduStanfordNlpUtilArrayMap *)outer$
                            withJavaUtilCollection:(id<JavaUtilCollection>)arg$0 {
  EduStanfordNlpUtilArrayMap_$1_initWithEduStanfordNlpUtilArrayMap_withJavaUtilCollection_(self, outer$, arg$0);
  return self;
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(removeWithId:);
  methods[1].selector = @selector(clear);
  methods[2].selector = @selector(initWithEduStanfordNlpUtilArrayMap:withJavaUtilCollection:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LEduStanfordNlpUtilArrayMap;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpUtilArrayMap_$1_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "remove", "LNSObject;", "LEduStanfordNlpUtilArrayMap;LJavaUtilCollection;", "(Ledu/stanford/nlp/util/ArrayMap;Ljava/util/Collection<+Ljava/util/Map$Entry<TK;TV;>;>;)V", "LEduStanfordNlpUtilArrayMap;", "entrySet", "Ljava/util/HashSet<Ljava/util/Map$Entry<TK;TV;>;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilArrayMap_$1 = { "", "edu.stanford.nlp.util", ptrTable, methods, fields, 7, 0x8008, 3, 2, 4, -1, 5, 6, -1 };
  return &_EduStanfordNlpUtilArrayMap_$1;
}

@end

void EduStanfordNlpUtilArrayMap_$1_initWithEduStanfordNlpUtilArrayMap_withJavaUtilCollection_(EduStanfordNlpUtilArrayMap_$1 *self, EduStanfordNlpUtilArrayMap *outer$, id<JavaUtilCollection> arg$0) {
  self->this$0_ = outer$;
  JavaUtilHashSet_initWithJavaUtilCollection_(self, arg$0);
}

EduStanfordNlpUtilArrayMap_$1 *new_EduStanfordNlpUtilArrayMap_$1_initWithEduStanfordNlpUtilArrayMap_withJavaUtilCollection_(EduStanfordNlpUtilArrayMap *outer$, id<JavaUtilCollection> arg$0) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilArrayMap_$1, initWithEduStanfordNlpUtilArrayMap_withJavaUtilCollection_, outer$, arg$0)
}

EduStanfordNlpUtilArrayMap_$1 *create_EduStanfordNlpUtilArrayMap_$1_initWithEduStanfordNlpUtilArrayMap_withJavaUtilCollection_(EduStanfordNlpUtilArrayMap *outer$, id<JavaUtilCollection> arg$0) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilArrayMap_$1, initWithEduStanfordNlpUtilArrayMap_withJavaUtilCollection_, outer$, arg$0)
}
