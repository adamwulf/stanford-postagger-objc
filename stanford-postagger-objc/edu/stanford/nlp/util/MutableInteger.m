//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/util/MutableInteger.java
//

#include "J2ObjC_source.h"
#include "edu/stanford/nlp/util/MutableInteger.h"
#include "java/lang/Integer.h"

@interface EduStanfordNlpUtilMutableInteger () {
 @public
  jint i_;
}

@end

inline jlong EduStanfordNlpUtilMutableInteger_get_serialVersionUID();
#define EduStanfordNlpUtilMutableInteger_serialVersionUID 624465615824626762LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpUtilMutableInteger, serialVersionUID, jlong)

@implementation EduStanfordNlpUtilMutableInteger

- (void)setWithInt:(jint)i {
  self->i_ = i;
}

- (NSUInteger)hash {
  return i_;
}

- (jboolean)isEqual:(id)obj {
  if ([obj isKindOfClass:[EduStanfordNlpUtilMutableInteger class]]) {
    return i_ == ((EduStanfordNlpUtilMutableInteger *) nil_chk(((EduStanfordNlpUtilMutableInteger *) cast_chk(obj, [EduStanfordNlpUtilMutableInteger class]))))->i_;
  }
  return false;
}

- (NSString *)description {
  return JavaLangInteger_toStringWithInt_(i_);
}

- (jint)compareToWithId:(EduStanfordNlpUtilMutableInteger *)anotherMutableInteger {
  (void) cast_chk(anotherMutableInteger, [EduStanfordNlpUtilMutableInteger class]);
  jint thisVal = self->i_;
  jint anotherVal = ((EduStanfordNlpUtilMutableInteger *) nil_chk(anotherMutableInteger))->i_;
  return (thisVal < anotherVal ? -1 : (thisVal == anotherVal ? 0 : 1));
}

- (jint)intValue {
  return i_;
}

- (jlong)longLongValue {
  return i_;
}

- (jshort)shortValue {
  return (jshort) i_;
}

- (jbyte)charValue {
  return (jbyte) i_;
}

- (jfloat)floatValue {
  return i_;
}

- (jdouble)doubleValue {
  return i_;
}

- (void)incValueWithInt:(jint)val {
  i_ += val;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpUtilMutableInteger_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)initWithInt:(jint)i {
  EduStanfordNlpUtilMutableInteger_initWithInt_(self, i);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 8, -1, -1, -1, -1, -1 },
    { NULL, "S", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "B", 0x1, 9, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(setWithInt:);
  methods[1].selector = @selector(hash);
  methods[2].selector = @selector(isEqual:);
  methods[3].selector = @selector(description);
  methods[4].selector = @selector(compareToWithId:);
  methods[5].selector = @selector(intValue);
  methods[6].selector = @selector(longLongValue);
  methods[7].selector = @selector(shortValue);
  methods[8].selector = @selector(charValue);
  methods[9].selector = @selector(floatValue);
  methods[10].selector = @selector(doubleValue);
  methods[11].selector = @selector(incValueWithInt:);
  methods[12].selector = @selector(init);
  methods[13].selector = @selector(initWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "i_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpUtilMutableInteger_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "set", "I", "hashCode", "equals", "LNSObject;", "toString", "compareTo", "LEduStanfordNlpUtilMutableInteger;", "longValue", "byteValue", "incValue", "Ljava/lang/Number;Ljava/lang/Comparable<Ledu/stanford/nlp/util/MutableInteger;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilMutableInteger = { "MutableInteger", "edu.stanford.nlp.util", ptrTable, methods, fields, 7, 0x11, 14, 2, -1, -1, -1, 11, -1 };
  return &_EduStanfordNlpUtilMutableInteger;
}

@end

void EduStanfordNlpUtilMutableInteger_init(EduStanfordNlpUtilMutableInteger *self) {
  EduStanfordNlpUtilMutableInteger_initWithInt_(self, 0);
}

EduStanfordNlpUtilMutableInteger *new_EduStanfordNlpUtilMutableInteger_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilMutableInteger, init)
}

EduStanfordNlpUtilMutableInteger *create_EduStanfordNlpUtilMutableInteger_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilMutableInteger, init)
}

void EduStanfordNlpUtilMutableInteger_initWithInt_(EduStanfordNlpUtilMutableInteger *self, jint i) {
  NSNumber_init(self);
  self->i_ = i;
}

EduStanfordNlpUtilMutableInteger *new_EduStanfordNlpUtilMutableInteger_initWithInt_(jint i) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilMutableInteger, initWithInt_, i)
}

EduStanfordNlpUtilMutableInteger *create_EduStanfordNlpUtilMutableInteger_initWithInt_(jint i) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilMutableInteger, initWithInt_, i)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpUtilMutableInteger)
