//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/util/StringParsingTask.java
//

#include "J2ObjC_source.h"
#include "edu/stanford/nlp/util/StringParsingTask.h"
#include "java/lang/Character.h"
#include "java/lang/Exception.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"

inline jlong EduStanfordNlpUtilStringParsingTask_ParserException_get_serialVersionUID();
#define EduStanfordNlpUtilStringParsingTask_ParserException_serialVersionUID 1LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpUtilStringParsingTask_ParserException, serialVersionUID, jlong)

@implementation EduStanfordNlpUtilStringParsingTask

- (instancetype)initWithNSString:(NSString *)s {
  EduStanfordNlpUtilStringParsingTask_initWithNSString_(self, s);
  return self;
}

- (id)parse {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)readName {
  [self readWhiteSpace];
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  jchar ch = [self read];
  while (![self isWhiteSpaceWithChar:ch] && ![self isPunctWithChar:ch] && !isEOF_) {
    (void) [sb appendWithChar:ch];
    ch = [self read];
  }
  [self unread];
  return [((NSString *) nil_chk([sb description])) intern];
}

- (NSString *)readJavaIdentifier {
  [self readWhiteSpace];
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  jchar ch = [self read];
  if (JavaLangCharacter_isJavaIdentifierStartWithChar_(ch) && !isEOF_) {
    (void) [sb appendWithChar:ch];
    ch = [self read];
    while (JavaLangCharacter_isJavaIdentifierPartWithChar_(ch) && !isEOF_) {
      (void) [sb appendWithChar:ch];
      ch = [self read];
    }
  }
  [self unread];
  return [((NSString *) nil_chk([sb description])) intern];
}

- (void)readLeftParen {
  [self readWhiteSpace];
  jchar ch = [self read];
  if (![self isLeftParenWithChar:ch]) @throw new_EduStanfordNlpUtilStringParsingTask_ParserException_initWithNSString_(@"Expected left paren!");
}

- (void)readRightParen {
  [self readWhiteSpace];
  jchar ch = [self read];
  if (![self isRightParenWithChar:ch]) @throw new_EduStanfordNlpUtilStringParsingTask_ParserException_initWithNSString_(@"Expected right paren!");
}

- (void)readDot {
  [self readWhiteSpace];
  if ([self isDotWithChar:[self peek]]) [self read];
}

- (void)readWhiteSpace {
  jchar ch = [self read];
  while ([self isWhiteSpaceWithChar:ch] && ![self isEOF]) {
    ch = [self read];
  }
  [self unread];
}

- (jchar)read {
  if (index_ >= ((jint) [((NSString *) nil_chk(s_)) length]) || index_ < 0) {
    isEOF_ = true;
    return ' ';
  }
  return [((NSString *) nil_chk(s_)) charAtWithInt:index_++];
}

- (void)unread {
  index_--;
}

- (jchar)peek {
  jchar ch = [self read];
  [self unread];
  return ch;
}

- (jboolean)isEOF {
  return isEOF_;
}

- (jboolean)isWhiteSpaceWithChar:(jchar)ch {
  return (ch == ' ' || ch == 0x0009 || ch == 0x000c || ch == 0x000d || ch == 0x000a);
}

- (jboolean)isPunctWithChar:(jchar)ch {
  return [self isLeftParenWithChar:ch] || [self isRightParenWithChar:ch];
}

- (jboolean)isLeftParenWithChar:(jchar)ch {
  return ch == '(';
}

- (jboolean)isRightParenWithChar:(jchar)ch {
  return ch == ')';
}

- (jboolean)isDotWithChar:(jchar)ch {
  return ch == '.';
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x401, -1, -1, -1, 1, -1, -1 },
    { NULL, "LNSString;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "C", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "C", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 4, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 5, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 6, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 7, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(parse);
  methods[2].selector = @selector(readName);
  methods[3].selector = @selector(readJavaIdentifier);
  methods[4].selector = @selector(readLeftParen);
  methods[5].selector = @selector(readRightParen);
  methods[6].selector = @selector(readDot);
  methods[7].selector = @selector(readWhiteSpace);
  methods[8].selector = @selector(read);
  methods[9].selector = @selector(unread);
  methods[10].selector = @selector(peek);
  methods[11].selector = @selector(isEOF);
  methods[12].selector = @selector(isWhiteSpaceWithChar:);
  methods[13].selector = @selector(isPunctWithChar:);
  methods[14].selector = @selector(isLeftParenWithChar:);
  methods[15].selector = @selector(isRightParenWithChar:);
  methods[16].selector = @selector(isDotWithChar:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "s_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "index_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "isEOF_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "()TE;", "isWhiteSpace", "C", "isPunct", "isLeftParen", "isRightParen", "isDot", "LEduStanfordNlpUtilStringParsingTask_ParserException;", "<E:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilStringParsingTask = { "StringParsingTask", "edu.stanford.nlp.util", ptrTable, methods, fields, 7, 0x401, 17, 3, -1, 8, -1, 9, -1 };
  return &_EduStanfordNlpUtilStringParsingTask;
}

@end

void EduStanfordNlpUtilStringParsingTask_initWithNSString_(EduStanfordNlpUtilStringParsingTask *self, NSString *s) {
  NSObject_init(self);
  self->index_ = 0;
  self->isEOF_ = false;
  self->s_ = s;
  self->index_ = 0;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpUtilStringParsingTask)

@implementation EduStanfordNlpUtilStringParsingTask_ParserException

- (instancetype)initWithJavaLangException:(JavaLangException *)e {
  EduStanfordNlpUtilStringParsingTask_ParserException_initWithJavaLangException_(self, e);
  return self;
}

- (instancetype)initWithNSString:(NSString *)message {
  EduStanfordNlpUtilStringParsingTask_ParserException_initWithNSString_(self, message);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaLangException:);
  methods[1].selector = @selector(initWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpUtilStringParsingTask_ParserException_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangException;", "LNSString;", "LEduStanfordNlpUtilStringParsingTask;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilStringParsingTask_ParserException = { "ParserException", "edu.stanford.nlp.util", ptrTable, methods, fields, 7, 0x9, 2, 1, 2, -1, -1, -1, -1 };
  return &_EduStanfordNlpUtilStringParsingTask_ParserException;
}

@end

void EduStanfordNlpUtilStringParsingTask_ParserException_initWithJavaLangException_(EduStanfordNlpUtilStringParsingTask_ParserException *self, JavaLangException *e) {
  JavaLangRuntimeException_initWithNSException_(self, e);
}

EduStanfordNlpUtilStringParsingTask_ParserException *new_EduStanfordNlpUtilStringParsingTask_ParserException_initWithJavaLangException_(JavaLangException *e) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilStringParsingTask_ParserException, initWithJavaLangException_, e)
}

EduStanfordNlpUtilStringParsingTask_ParserException *create_EduStanfordNlpUtilStringParsingTask_ParserException_initWithJavaLangException_(JavaLangException *e) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilStringParsingTask_ParserException, initWithJavaLangException_, e)
}

void EduStanfordNlpUtilStringParsingTask_ParserException_initWithNSString_(EduStanfordNlpUtilStringParsingTask_ParserException *self, NSString *message) {
  JavaLangRuntimeException_initWithNSString_(self, message);
}

EduStanfordNlpUtilStringParsingTask_ParserException *new_EduStanfordNlpUtilStringParsingTask_ParserException_initWithNSString_(NSString *message) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilStringParsingTask_ParserException, initWithNSString_, message)
}

EduStanfordNlpUtilStringParsingTask_ParserException *create_EduStanfordNlpUtilStringParsingTask_ParserException_initWithNSString_(NSString *message) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilStringParsingTask_ParserException, initWithNSString_, message)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpUtilStringParsingTask_ParserException)
