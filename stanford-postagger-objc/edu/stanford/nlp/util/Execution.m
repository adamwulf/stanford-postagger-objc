//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/util/Execution.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/util/Execution.h"
#include "edu/stanford/nlp/util/MetaClass.h"
#include "edu/stanford/nlp/util/Pair.h"
#include "edu/stanford/nlp/util/StringUtils.h"
#include "edu/stanford/nlp/util/logging/Redwood.h"
#include "edu/stanford/nlp/util/logging/StanfordRedwoodConfiguration.h"
#include "java/io/File.h"
#include "java/io/FilenameFilter.h"
#include "java/io/IOException.h"
#include "java/io/PrintStream.h"
#include "java/lang/Boolean.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalAccessException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/NoClassDefFoundError.h"
#include "java/lang/Runnable.h"
#include "java/lang/Runtime.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StackTraceElement.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/lang/annotation/Annotation.h"
#include "java/lang/annotation/Documented.h"
#include "java/lang/annotation/ElementType.h"
#include "java/lang/annotation/Retention.h"
#include "java/lang/annotation/RetentionPolicy.h"
#include "java/lang/annotation/Target.h"
#include "java/lang/reflect/Array.h"
#include "java/lang/reflect/Field.h"
#include "java/lang/reflect/Modifier.h"
#include "java/lang/reflect/Type.h"
#include "java/net/InetAddress.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Enumeration.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Properties.h"
#include "java/util/Set.h"
#include "java/util/Stack.h"
#include "java/util/function/Consumer.h"
#include "java/util/jar/JarEntry.h"
#include "java/util/jar/JarFile.h"

@interface EduStanfordNlpUtilExecution ()

+ (void)fillFieldWithId:(id)instance
withJavaLangReflectField:(JavaLangReflectField *)f
           withNSString:(NSString *)value;

+ (IOSClass *)filePathToClassWithNSString:(NSString *)cpEntry
                             withNSString:(NSString *)path;

+ (jboolean)isIgnoredWithNSString:(NSString *)path;

+ (IOSObjectArray *)scrapeFieldsWithIOSClass:(IOSClass *)clazz;

+ (NSString *)threadRootClass;

@end

inline IOSObjectArray *EduStanfordNlpUtilExecution_get_IGNORED_JARS();
static IOSObjectArray *EduStanfordNlpUtilExecution_IGNORED_JARS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpUtilExecution, IGNORED_JARS, IOSObjectArray *)

inline IOSObjectArray *EduStanfordNlpUtilExecution_get_BOOTSTRAP_CLASSES();
static IOSObjectArray *EduStanfordNlpUtilExecution_BOOTSTRAP_CLASSES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpUtilExecution, BOOTSTRAP_CLASSES, IOSObjectArray *)

inline jboolean EduStanfordNlpUtilExecution_get_strict();
inline jboolean EduStanfordNlpUtilExecution_set_strict(jboolean value);
inline jboolean *EduStanfordNlpUtilExecution_getRef_strict();
static jboolean EduStanfordNlpUtilExecution_strict = false;
J2OBJC_STATIC_FIELD_PRIMITIVE(EduStanfordNlpUtilExecution, strict, jboolean)

inline jboolean EduStanfordNlpUtilExecution_get_verbose();
inline jboolean EduStanfordNlpUtilExecution_set_verbose(jboolean value);
inline jboolean *EduStanfordNlpUtilExecution_getRef_verbose();
static jboolean EduStanfordNlpUtilExecution_verbose = false;
J2OBJC_STATIC_FIELD_PRIMITIVE(EduStanfordNlpUtilExecution, verbose, jboolean)

__attribute__((unused)) static void EduStanfordNlpUtilExecution_fillFieldWithId_withJavaLangReflectField_withNSString_(id instance, JavaLangReflectField *f, NSString *value);

__attribute__((unused)) static IOSClass *EduStanfordNlpUtilExecution_filePathToClassWithNSString_withNSString_(NSString *cpEntry, NSString *path);

__attribute__((unused)) static jboolean EduStanfordNlpUtilExecution_isIgnoredWithNSString_(NSString *path);

__attribute__((unused)) static IOSObjectArray *EduStanfordNlpUtilExecution_scrapeFieldsWithIOSClass_(IOSClass *clazz);

__attribute__((unused)) static NSString *EduStanfordNlpUtilExecution_threadRootClass();

__attribute__((unused)) static IOSObjectArray *EduStanfordNlpUtilExecution__Annotations$0();

__attribute__((unused)) static IOSObjectArray *EduStanfordNlpUtilExecution__Annotations$1();

__attribute__((unused)) static IOSObjectArray *EduStanfordNlpUtilExecution__Annotations$2();

__attribute__((unused)) static IOSObjectArray *EduStanfordNlpUtilExecution__Annotations$3();

__attribute__((unused)) static IOSObjectArray *EduStanfordNlpUtilExecution__Annotations$4();

__attribute__((unused)) static IOSObjectArray *EduStanfordNlpUtilExecution_Option__Annotations$0();

@interface EduStanfordNlpUtilExecution_LazyFileIterator () {
 @public
  id<JavaIoFilenameFilter> filter_;
  IOSObjectArray *dir_;
  JavaUtilStack *parents_;
  JavaUtilStack *indices_;
  jint toReturn_;
}

- (void)enqueue;

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpUtilExecution_LazyFileIterator, filter_, id<JavaIoFilenameFilter>)
J2OBJC_FIELD_SETTER(EduStanfordNlpUtilExecution_LazyFileIterator, dir_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(EduStanfordNlpUtilExecution_LazyFileIterator, parents_, JavaUtilStack *)
J2OBJC_FIELD_SETTER(EduStanfordNlpUtilExecution_LazyFileIterator, indices_, JavaUtilStack *)

__attribute__((unused)) static void EduStanfordNlpUtilExecution_LazyFileIterator_enqueue(EduStanfordNlpUtilExecution_LazyFileIterator *self);

@interface EduStanfordNlpUtilExecution_LazyFileIterator_$Lambda$1 : NSObject < JavaIoFilenameFilter > {
 @public
  NSString *val$filter_;
}

- (jboolean)acceptWithJavaIoFile:(JavaIoFile *)file
                    withNSString:(NSString *)name;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpUtilExecution_LazyFileIterator_$Lambda$1)

J2OBJC_FIELD_SETTER(EduStanfordNlpUtilExecution_LazyFileIterator_$Lambda$1, val$filter_, NSString *)

__attribute__((unused)) static void EduStanfordNlpUtilExecution_LazyFileIterator_$Lambda$1_initWithNSString_(EduStanfordNlpUtilExecution_LazyFileIterator_$Lambda$1 *self, NSString *capture$0);

__attribute__((unused)) static EduStanfordNlpUtilExecution_LazyFileIterator_$Lambda$1 *new_EduStanfordNlpUtilExecution_LazyFileIterator_$Lambda$1_initWithNSString_(NSString *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpUtilExecution_LazyFileIterator_$Lambda$1 *create_EduStanfordNlpUtilExecution_LazyFileIterator_$Lambda$1_initWithNSString_(NSString *capture$0);

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpUtilExecution)

IOSObjectArray *EduStanfordNlpUtilExecution_optionClasses;
jint EduStanfordNlpUtilExecution_threads;
NSString *EduStanfordNlpUtilExecution_host = @"(unknown)";

@implementation EduStanfordNlpUtilExecution

+ (void)fillFieldWithId:(id)instance
withJavaLangReflectField:(JavaLangReflectField *)f
           withNSString:(NSString *)value {
  EduStanfordNlpUtilExecution_fillFieldWithId_withJavaLangReflectField_withNSString_(instance, f, value);
}

+ (IOSClass *)filePathToClassWithNSString:(NSString *)cpEntry
                             withNSString:(NSString *)path {
  return EduStanfordNlpUtilExecution_filePathToClassWithNSString_withNSString_(cpEntry, path);
}

+ (jboolean)isIgnoredWithNSString:(NSString *)path {
  return EduStanfordNlpUtilExecution_isIgnoredWithNSString_(path);
}

+ (IOSObjectArray *)getVisibleClasses {
  return EduStanfordNlpUtilExecution_getVisibleClasses();
}

+ (IOSObjectArray *)scrapeFieldsWithIOSClass:(IOSClass *)clazz {
  return EduStanfordNlpUtilExecution_scrapeFieldsWithIOSClass_(clazz);
}

+ (id<JavaUtilMap>)fillOptionsImplWithNSObjectArray:(IOSObjectArray *)instances
                                  withIOSClassArray:(IOSObjectArray *)classes
                             withJavaUtilProperties:(JavaUtilProperties *)options
                                        withBoolean:(jboolean)ensureAllOptions {
  return EduStanfordNlpUtilExecution_fillOptionsImplWithNSObjectArray_withIOSClassArray_withJavaUtilProperties_withBoolean_(instances, classes, options, ensureAllOptions);
}

+ (id<JavaUtilMap>)fillOptionsImplWithNSObjectArray:(IOSObjectArray *)instances
                                  withIOSClassArray:(IOSObjectArray *)classes
                             withJavaUtilProperties:(JavaUtilProperties *)options {
  return EduStanfordNlpUtilExecution_fillOptionsImplWithNSObjectArray_withIOSClassArray_withJavaUtilProperties_(instances, classes, options);
}

+ (void)fillOptionsWithIOSClassArray:(IOSObjectArray *)classes
              withJavaUtilProperties:(JavaUtilProperties *)options {
  EduStanfordNlpUtilExecution_fillOptionsWithIOSClassArray_withJavaUtilProperties_(classes, options);
}

+ (void)fillOptionsWithIOSClass:(IOSClass *)clazz
         withJavaUtilProperties:(JavaUtilProperties *)options {
  EduStanfordNlpUtilExecution_fillOptionsWithIOSClass_withJavaUtilProperties_(clazz, options);
}

+ (void)fillOptionsWithJavaUtilProperties:(JavaUtilProperties *)props
                        withNSStringArray:(IOSObjectArray *)args {
  EduStanfordNlpUtilExecution_fillOptionsWithJavaUtilProperties_withNSStringArray_(props, args);
}

+ (void)fillOptionsWithIOSClassArray:(IOSObjectArray *)optionClasses
              withJavaUtilProperties:(JavaUtilProperties *)props
                   withNSStringArray:(IOSObjectArray *)args {
  EduStanfordNlpUtilExecution_fillOptionsWithIOSClassArray_withJavaUtilProperties_withNSStringArray_(optionClasses, props, args);
}

+ (void)fillOptionsWithJavaUtilProperties:(JavaUtilProperties *)props {
  EduStanfordNlpUtilExecution_fillOptionsWithJavaUtilProperties_(props);
}

+ (void)fillOptionsWithIOSClassArray:(IOSObjectArray *)classes
                   withNSStringArray:(IOSObjectArray *)args {
  EduStanfordNlpUtilExecution_fillOptionsWithIOSClassArray_withNSStringArray_(classes, args);
}

+ (void)fillOptionsWithIOSClass:(IOSClass *)clazz
              withNSStringArray:(IOSObjectArray *)args {
  EduStanfordNlpUtilExecution_fillOptionsWithIOSClass_withNSStringArray_(clazz, args);
}

+ (void)fillOptionsWithNSObjectArray:(IOSObjectArray *)instances
              withJavaUtilProperties:(JavaUtilProperties *)options {
  EduStanfordNlpUtilExecution_fillOptionsWithNSObjectArray_withJavaUtilProperties_(instances, options);
}

+ (void)fillOptionsWithId:(id)instance
   withJavaUtilProperties:(JavaUtilProperties *)options {
  EduStanfordNlpUtilExecution_fillOptionsWithId_withJavaUtilProperties_(instance, options);
}

+ (void)fillOptionsWithNSObjectArray:(IOSObjectArray *)instances
                   withNSStringArray:(IOSObjectArray *)args {
  EduStanfordNlpUtilExecution_fillOptionsWithNSObjectArray_withNSStringArray_(instances, args);
}

+ (void)fillOptionsWithId:(id)instance
        withNSStringArray:(IOSObjectArray *)args {
  EduStanfordNlpUtilExecution_fillOptionsWithId_withNSStringArray_(instance, args);
}

+ (void)execWithJavaLangRunnable:(id<JavaLangRunnable>)toRun {
  EduStanfordNlpUtilExecution_execWithJavaLangRunnable_(toRun);
}

+ (void)execWithJavaLangRunnable:(id<JavaLangRunnable>)toRun
               withIOSClassArray:(IOSObjectArray *)optionClasses {
  EduStanfordNlpUtilExecution_execWithJavaLangRunnable_withIOSClassArray_(toRun, optionClasses);
}

+ (void)execWithJavaLangRunnable:(id<JavaLangRunnable>)toRun
               withNSStringArray:(IOSObjectArray *)args {
  EduStanfordNlpUtilExecution_execWithJavaLangRunnable_withNSStringArray_(toRun, args);
}

+ (void)execWithJavaLangRunnable:(id<JavaLangRunnable>)toRun
               withNSStringArray:(IOSObjectArray *)args
               withIOSClassArray:(IOSObjectArray *)optionClasses {
  EduStanfordNlpUtilExecution_execWithJavaLangRunnable_withNSStringArray_withIOSClassArray_(toRun, args, optionClasses);
}

+ (void)execWithJavaLangRunnable:(id<JavaLangRunnable>)toRun
               withNSStringArray:(IOSObjectArray *)args
               withIOSClassArray:(IOSObjectArray *)optionClasses
                     withBoolean:(jboolean)exit {
  EduStanfordNlpUtilExecution_execWithJavaLangRunnable_withNSStringArray_withIOSClassArray_withBoolean_(toRun, args, optionClasses, exit);
}

+ (void)execWithJavaLangRunnable:(id<JavaLangRunnable>)toRun
               withNSStringArray:(IOSObjectArray *)args
                     withBoolean:(jboolean)exit {
  EduStanfordNlpUtilExecution_execWithJavaLangRunnable_withNSStringArray_withBoolean_(toRun, args, exit);
}

+ (void)execWithJavaLangRunnable:(id<JavaLangRunnable>)toRun
          withJavaUtilProperties:(JavaUtilProperties *)options {
  EduStanfordNlpUtilExecution_execWithJavaLangRunnable_withJavaUtilProperties_(toRun, options);
}

+ (void)execWithJavaLangRunnable:(id<JavaLangRunnable>)toRun
          withJavaUtilProperties:(JavaUtilProperties *)options
                     withBoolean:(jboolean)exit {
  EduStanfordNlpUtilExecution_execWithJavaLangRunnable_withJavaUtilProperties_withBoolean_(toRun, options, exit);
}

+ (NSString *)threadRootClass {
  return EduStanfordNlpUtilExecution_threadRootClass();
}

+ (void)usageAndExitWithNSStringArray:(IOSObjectArray *)expectedArgs {
  EduStanfordNlpUtilExecution_usageAndExitWithNSStringArray_(expectedArgs);
}

+ (void)usageAndExitWithJavaUtilMap:(id<JavaUtilMap>)argToFlagsMap {
  EduStanfordNlpUtilExecution_usageAndExitWithJavaUtilMap_(argToFlagsMap);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpUtilExecution_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0xa, 0, 1, -1, -1, -1, -1 },
    { NULL, "LIOSClass;", 0xa, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 4, 5, -1, -1, -1, -1 },
    { NULL, "[LIOSClass;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LJavaLangReflectField;", 0xa, 6, 7, 8, 9, -1, -1 },
    { NULL, "LJavaUtilMap;", 0xc, 10, 11, -1, 12, -1, -1 },
    { NULL, "LJavaUtilMap;", 0xc, 10, 13, -1, 14, -1, -1 },
    { NULL, "V", 0x9, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 15, 17, -1, 18, -1, -1 },
    { NULL, "V", 0x9, 15, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 15, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 15, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 15, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 15, 23, -1, 24, -1, -1 },
    { NULL, "V", 0x9, 15, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 15, 26, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 15, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 15, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 29, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 29, 31, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 29, 32, -1, -1, -1, -1 },
    { NULL, "V", 0x89, 29, 33, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 29, 34, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 29, 35, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 29, 36, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 29, 37, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 38, 39, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 38, 40, -1, 41, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(fillFieldWithId:withJavaLangReflectField:withNSString:);
  methods[1].selector = @selector(filePathToClassWithNSString:withNSString:);
  methods[2].selector = @selector(isIgnoredWithNSString:);
  methods[3].selector = @selector(getVisibleClasses);
  methods[4].selector = @selector(scrapeFieldsWithIOSClass:);
  methods[5].selector = @selector(fillOptionsImplWithNSObjectArray:withIOSClassArray:withJavaUtilProperties:withBoolean:);
  methods[6].selector = @selector(fillOptionsImplWithNSObjectArray:withIOSClassArray:withJavaUtilProperties:);
  methods[7].selector = @selector(fillOptionsWithIOSClassArray:withJavaUtilProperties:);
  methods[8].selector = @selector(fillOptionsWithIOSClass:withJavaUtilProperties:);
  methods[9].selector = @selector(fillOptionsWithJavaUtilProperties:withNSStringArray:);
  methods[10].selector = @selector(fillOptionsWithIOSClassArray:withJavaUtilProperties:withNSStringArray:);
  methods[11].selector = @selector(fillOptionsWithJavaUtilProperties:);
  methods[12].selector = @selector(fillOptionsWithIOSClassArray:withNSStringArray:);
  methods[13].selector = @selector(fillOptionsWithIOSClass:withNSStringArray:);
  methods[14].selector = @selector(fillOptionsWithNSObjectArray:withJavaUtilProperties:);
  methods[15].selector = @selector(fillOptionsWithId:withJavaUtilProperties:);
  methods[16].selector = @selector(fillOptionsWithNSObjectArray:withNSStringArray:);
  methods[17].selector = @selector(fillOptionsWithId:withNSStringArray:);
  methods[18].selector = @selector(execWithJavaLangRunnable:);
  methods[19].selector = @selector(execWithJavaLangRunnable:withIOSClassArray:);
  methods[20].selector = @selector(execWithJavaLangRunnable:withNSStringArray:);
  methods[21].selector = @selector(execWithJavaLangRunnable:withNSStringArray:withIOSClassArray:);
  methods[22].selector = @selector(execWithJavaLangRunnable:withNSStringArray:withIOSClassArray:withBoolean:);
  methods[23].selector = @selector(execWithJavaLangRunnable:withNSStringArray:withBoolean:);
  methods[24].selector = @selector(execWithJavaLangRunnable:withJavaUtilProperties:);
  methods[25].selector = @selector(execWithJavaLangRunnable:withJavaUtilProperties:withBoolean:);
  methods[26].selector = @selector(threadRootClass);
  methods[27].selector = @selector(usageAndExitWithNSStringArray:);
  methods[28].selector = @selector(usageAndExitWithJavaUtilMap:);
  methods[29].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "IGNORED_JARS", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 42, -1, -1 },
    { "BOOTSTRAP_CLASSES", "[LIOSClass;", .constantValue.asLong = 0, 0x1a, -1, 43, -1, -1 },
    { "optionClasses", "[LIOSClass;", .constantValue.asLong = 0, 0x9, -1, 44, 45, 46 },
    { "threads", "I", .constantValue.asLong = 0, 0x9, -1, 47, -1, 48 },
    { "host", "LNSString;", .constantValue.asLong = 0, 0x9, -1, 49, -1, 50 },
    { "strict", "Z", .constantValue.asLong = 0, 0xa, -1, 51, -1, 52 },
    { "verbose", "Z", .constantValue.asLong = 0, 0xa, -1, 53, -1, 54 },
  };
  static const void *ptrTable[] = { "fillField", "LNSObject;LJavaLangReflectField;LNSString;", "filePathToClass", "LNSString;LNSString;", "isIgnored", "LNSString;", "scrapeFields", "LIOSClass;", "LJavaLangException;", "(Ljava/lang/Class<*>;)[Ljava/lang/reflect/Field;", "fillOptionsImpl", "[LNSObject;[LIOSClass;LJavaUtilProperties;Z", "([Ljava/lang/Object;[Ljava/lang/Class<*>;Ljava/util/Properties;Z)Ljava/util/Map<Ljava/lang/String;Ljava/lang/reflect/Field;>;", "[LNSObject;[LIOSClass;LJavaUtilProperties;", "([Ljava/lang/Object;[Ljava/lang/Class<*>;Ljava/util/Properties;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/reflect/Field;>;", "fillOptions", "[LIOSClass;LJavaUtilProperties;", "LIOSClass;LJavaUtilProperties;", "(Ljava/lang/Class<*>;Ljava/util/Properties;)V", "LJavaUtilProperties;[LNSString;", "[LIOSClass;LJavaUtilProperties;[LNSString;", "LJavaUtilProperties;", "[LIOSClass;[LNSString;", "LIOSClass;[LNSString;", "(Ljava/lang/Class<*>;[Ljava/lang/String;)V", "[LNSObject;LJavaUtilProperties;", "LNSObject;LJavaUtilProperties;", "[LNSObject;[LNSString;", "LNSObject;[LNSString;", "exec", "LJavaLangRunnable;", "LJavaLangRunnable;[LIOSClass;", "LJavaLangRunnable;[LNSString;", "LJavaLangRunnable;[LNSString;[LIOSClass;", "LJavaLangRunnable;[LNSString;[LIOSClass;Z", "LJavaLangRunnable;[LNSString;Z", "LJavaLangRunnable;LJavaUtilProperties;", "LJavaLangRunnable;LJavaUtilProperties;Z", "usageAndExit", "[LNSString;", "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;[Ljava/lang/String;>;)V", &EduStanfordNlpUtilExecution_IGNORED_JARS, &EduStanfordNlpUtilExecution_BOOTSTRAP_CLASSES, &EduStanfordNlpUtilExecution_optionClasses, "[Ljava/lang/Class<*>;", (void *)&EduStanfordNlpUtilExecution__Annotations$0, &EduStanfordNlpUtilExecution_threads, (void *)&EduStanfordNlpUtilExecution__Annotations$1, &EduStanfordNlpUtilExecution_host, (void *)&EduStanfordNlpUtilExecution__Annotations$2, &EduStanfordNlpUtilExecution_strict, (void *)&EduStanfordNlpUtilExecution__Annotations$3, &EduStanfordNlpUtilExecution_verbose, (void *)&EduStanfordNlpUtilExecution__Annotations$4, "LEduStanfordNlpUtilExecution_Option;LEduStanfordNlpUtilExecution_LazyFileIterator;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilExecution = { "Execution", "edu.stanford.nlp.util", ptrTable, methods, fields, 7, 0x1, 30, 7, -1, 55, -1, -1, -1 };
  return &_EduStanfordNlpUtilExecution;
}

+ (void)initialize {
  if (self == [EduStanfordNlpUtilExecution class]) {
    EduStanfordNlpUtilExecution_IGNORED_JARS = [IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()];
    EduStanfordNlpUtilExecution_BOOTSTRAP_CLASSES = [IOSObjectArray newArrayWithObjects:(id[]){ EduStanfordNlpUtilExecution_class_() } count:1 type:IOSClass_class_()];
    EduStanfordNlpUtilExecution_optionClasses = nil;
    EduStanfordNlpUtilExecution_threads = [((JavaLangRuntime *) nil_chk(JavaLangRuntime_getRuntime())) availableProcessors];
    {
      @try {
        EduStanfordNlpUtilExecution_host = [((JavaNetInetAddress *) nil_chk(JavaNetInetAddress_getLocalHost())) getHostName];
      }
      @catch (JavaLangException *ignored) {
      }
    }
    J2OBJC_SET_INITIALIZED(EduStanfordNlpUtilExecution)
  }
}

@end

void EduStanfordNlpUtilExecution_fillFieldWithId_withJavaLangReflectField_withNSString_(id instance, JavaLangReflectField *f, NSString *value) {
  EduStanfordNlpUtilExecution_initialize();
  if (EduStanfordNlpUtilExecution_verbose) {
    id<EduStanfordNlpUtilExecution_Option> opt = ((id<EduStanfordNlpUtilExecution_Option>) [((JavaLangReflectField *) nil_chk(f)) getAnnotationWithIOSClass:EduStanfordNlpUtilExecution_Option_class_()]);
    JavaLangStringBuilder *b = [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([new_JavaLangStringBuilder_initWithNSString_(@"setting ") appendWithNSString:[((IOSClass *) nil_chk([f getDeclaringClass])) getName]])) appendWithNSString:@"#"])) appendWithNSString:[f getName]])) appendWithNSString:@" "];
    if (opt != nil) {
      (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(b)) appendWithNSString:@"["])) appendWithNSString:[opt name]])) appendWithNSString:@"] "];
    }
    (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(b)) appendWithNSString:@"to: "])) appendWithNSString:value];
    EduStanfordNlpUtilLoggingRedwood_Util_logWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ [b description] } count:1 type:NSObject_class_()]);
  }
  @try {
    jboolean accessState = true;
    if (JavaLangReflectModifier_isFinalWithInt_([((JavaLangReflectField *) nil_chk(f)) getModifiers])) {
      EduStanfordNlpUtilLoggingRedwood_Util_runtimeExceptionWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ JreStrcat("$@", @"Option cannot be final: ", f) } count:1 type:NSObject_class_()]);
    }
    if (![f isAccessible]) {
      accessState = false;
      [f setAccessibleWithBoolean:true];
    }
    id objVal = EduStanfordNlpUtilMetaClass_castWithNSString_withJavaLangReflectType_(value, [f getGenericType]);
    if (objVal != nil) {
      if ([[objVal getClass] isArray]) {
        IOSObjectArray *array = (IOSObjectArray *) cast_check(objVal, IOSClass_arrayType(NSObject_class_(), 1));
        if (![((IOSClass *) nil_chk([f getType])) isArray]) {
          EduStanfordNlpUtilLoggingRedwood_Util_runtimeExceptionWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ JreStrcat("$@$$$$", @"Setting an array to a non-array field. field: ", f, @" value: ", JavaUtilArrays_toStringWithNSObjectArray_(array), @" src: ", value) } count:1 type:NSObject_class_()]);
        }
        id toSet = JavaLangReflectArray_newInstanceWithIOSClass_withInt_([((IOSClass *) nil_chk([f getType])) getComponentType], array->size_);
        for (jint i = 0; i < array->size_; i++) {
          JavaLangReflectArray_setWithId_withInt_withId_(toSet, i, IOSObjectArray_Get(array, i));
        }
        [f setWithId:instance withId:toSet];
      }
      else {
        [f setWithId:instance withId:objVal];
      }
    }
    else {
      EduStanfordNlpUtilLoggingRedwood_Util_runtimeExceptionWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ JreStrcat("$@$$$", @"Cannot assign option field: ", f, @" value: ", value, @"; invalid type") } count:1 type:NSObject_class_()]);
    }
    if (!accessState) {
      [f setAccessibleWithBoolean:false];
    }
  }
  @catch (JavaLangIllegalArgumentException *e) {
    EduStanfordNlpUtilLoggingRedwood_Util_errWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ e } count:1 type:NSObject_class_()]);
    EduStanfordNlpUtilLoggingRedwood_Util_runtimeExceptionWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ JreStrcat("$$C$$$$$", @"Cannot assign option field: ", [((IOSClass *) nil_chk([f getDeclaringClass])) getCanonicalName], '.', [f getName], @" value: ", value, @" cause: ", [((JavaLangIllegalArgumentException *) nil_chk(e)) getMessage]) } count:1 type:NSObject_class_()]);
  }
  @catch (JavaLangIllegalAccessException *e) {
    EduStanfordNlpUtilLoggingRedwood_Util_errWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ e } count:1 type:NSObject_class_()]);
    EduStanfordNlpUtilLoggingRedwood_Util_runtimeExceptionWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ JreStrcat("$$C$", @"Cannot access option field: ", [((IOSClass *) nil_chk([f getDeclaringClass])) getCanonicalName], '.', [f getName]) } count:1 type:NSObject_class_()]);
  }
  @catch (JavaLangException *e) {
    EduStanfordNlpUtilLoggingRedwood_Util_errWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ e } count:1 type:NSObject_class_()]);
    EduStanfordNlpUtilLoggingRedwood_Util_runtimeExceptionWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ JreStrcat("$$C$$$$$", @"Cannot assign option field: ", [((IOSClass *) nil_chk([f getDeclaringClass])) getCanonicalName], '.', [f getName], @" value: ", value, @" cause: ", [((JavaLangException *) nil_chk(e)) getMessage]) } count:1 type:NSObject_class_()]);
  }
}

IOSClass *EduStanfordNlpUtilExecution_filePathToClassWithNSString_withNSString_(NSString *cpEntry, NSString *path) {
  EduStanfordNlpUtilExecution_initialize();
  if (((jint) [((NSString *) nil_chk(path)) length]) <= ((jint) [((NSString *) nil_chk(cpEntry)) length])) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$$", @"Illegal path: cp=", cpEntry, @" path=", path));
  }
  if ([path charAtWithInt:((jint) [cpEntry length])] != '/') {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$$", @"Illegal path: cp=", cpEntry, @" path=", path));
  }
  path = [path substring:((jint) [cpEntry length]) + 1];
  path = [((NSString *) nil_chk([((NSString *) nil_chk(path)) replaceAll:@"/" withReplacement:@"."])) substring:0 endIndex:((jint) [path length]) - 6];
  @try {
    return IOSClass_forName_initialize_classLoader_(path, false, JavaLangClassLoader_getSystemClassLoader());
  }
  @catch (JavaLangClassNotFoundException *e) {
    @throw EduStanfordNlpUtilLoggingRedwood_Util_failWithId_(JreStrcat("$$", @"Could not load class at path: ", path));
  }
  @catch (JavaLangNoClassDefFoundError *ex) {
    EduStanfordNlpUtilLoggingRedwood_Util_warnWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ JreStrcat("$$$", @"Class at path ", path, @" is unloadable") } count:1 type:NSObject_class_()]);
    return nil;
  }
}

jboolean EduStanfordNlpUtilExecution_isIgnoredWithNSString_(NSString *path) {
  EduStanfordNlpUtilExecution_initialize();
  {
    IOSObjectArray *a__ = EduStanfordNlpUtilExecution_IGNORED_JARS;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *ignore = *b__++;
      if ([((NSString *) nil_chk(path)) hasSuffix:ignore]) {
        return true;
      }
    }
  }
  return false;
}

IOSObjectArray *EduStanfordNlpUtilExecution_getVisibleClasses() {
  EduStanfordNlpUtilExecution_initialize();
  id<JavaUtilList> classes = new_JavaUtilArrayList_init();
  NSString *pathSep = JavaLangSystem_getPropertyWithNSString_(@"path.separator");
  IOSObjectArray *cp = [((NSString *) nil_chk([((JavaUtilProperties *) nil_chk(JavaLangSystem_getProperties())) getPropertyWithNSString:@"java.class.path" withNSString:nil])) split:pathSep];
  {
    IOSObjectArray *a__ = cp;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *entry_ = *b__++;
      EduStanfordNlpUtilLoggingRedwood_Util_logWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ JreStrcat("$$", @"Checking cp ", entry_) } count:1 type:NSObject_class_()]);
      if ([((NSString *) nil_chk(entry_)) isEqual:@"."] || ((jint) [((NSString *) nil_chk([entry_ trim])) length]) == 0) {
        continue;
      }
      JavaIoFile *f = new_JavaIoFile_initWithNSString_(entry_);
      if ([f isDirectory]) {
        EduStanfordNlpUtilExecution_LazyFileIterator *iter = new_EduStanfordNlpUtilExecution_LazyFileIterator_initWithJavaIoFile_withNSString_(f, @".*class$");
        while ([iter hasNext]) {
          IOSClass *clazz = EduStanfordNlpUtilExecution_filePathToClassWithNSString_withNSString_(entry_, [((JavaIoFile *) nil_chk([iter next])) getPath]);
          if (clazz != nil) {
            [classes addWithId:clazz];
          }
        }
      }
      else if (!EduStanfordNlpUtilExecution_isIgnoredWithNSString_(entry_)) {
        @try {
          JavaUtilJarJarFile *jar = new_JavaUtilJarJarFile_initWithJavaIoFile_(f);
          id<JavaUtilEnumeration> e = [jar entries];
          while ([((id<JavaUtilEnumeration>) nil_chk(e)) hasMoreElements]) {
            JavaUtilJarJarEntry *jarEntry = [e nextElement];
            NSString *clazz = [((JavaUtilJarJarEntry *) nil_chk(jarEntry)) getName];
            if ([((NSString *) nil_chk(clazz)) matches:@".*class$"]) {
              clazz = [((NSString *) nil_chk([clazz substring:0 endIndex:((jint) [clazz length]) - 6])) replaceAll:@"/" withReplacement:@"."];
              @try {
                [classes addWithId:IOSClass_forName_initialize_classLoader_(clazz, false, JavaLangClassLoader_getSystemClassLoader())];
              }
              @catch (JavaLangClassNotFoundException *ex) {
                EduStanfordNlpUtilLoggingRedwood_Util_warnWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ JreStrcat("$@$$", @"Could not load class in jar: ", f, @" at path: ", clazz) } count:1 type:NSObject_class_()]);
              }
              @catch (JavaLangNoClassDefFoundError *ex) {
                EduStanfordNlpUtilLoggingRedwood_Util_debugWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ JreStrcat("$$$@C", @"Could not scan class: ", clazz, @" (in jar: ", f, ')') } count:1 type:NSObject_class_()]);
              }
            }
          }
        }
        @catch (JavaIoIOException *e) {
          EduStanfordNlpUtilLoggingRedwood_Util_warnWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ JreStrcat("$@$", @"Could not open jar file: ", f, @"(are you sure the file exists?)") } count:1 type:NSObject_class_()]);
        }
      }
      else {
      }
    }
  }
  return [classes toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:[classes size] type:IOSClass_class_()]];
}

IOSObjectArray *EduStanfordNlpUtilExecution_scrapeFieldsWithIOSClass_(IOSClass *clazz) {
  EduStanfordNlpUtilExecution_initialize();
  id<JavaUtilList> fields = new_JavaUtilArrayList_init();
  while (clazz != nil && ![clazz isEqual:NSObject_class_()]) {
    [fields addAllWithJavaUtilCollection:JavaUtilArrays_asListWithNSObjectArray_([clazz getDeclaredFields])];
    clazz = [clazz getSuperclass];
  }
  return [fields toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:[fields size] type:JavaLangReflectField_class_()]];
}

id<JavaUtilMap> EduStanfordNlpUtilExecution_fillOptionsImplWithNSObjectArray_withIOSClassArray_withJavaUtilProperties_withBoolean_(IOSObjectArray *instances, IOSObjectArray *classes, JavaUtilProperties *options, jboolean ensureAllOptions) {
  EduStanfordNlpUtilExecution_initialize();
  id<JavaUtilMap> class2object = new_JavaUtilHashMap_init();
  if (instances != nil) {
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(classes))->size_; ++i) {
      JreAssert(([nil_chk(IOSObjectArray_Get(instances, i)) getClass] == IOSObjectArray_Get(classes, i)), (@"edu/stanford/nlp/util/Execution.java:384 condition failed: assert instances[i].getClass() == classes[i];"));
      (void) [class2object putWithId:IOSObjectArray_Get(classes, i) withId:IOSObjectArray_Get(instances, i)];
      IOSClass *mySuper = [[nil_chk(IOSObjectArray_Get(instances, i)) getClass] getSuperclass];
      while (mySuper != nil && ![mySuper isEqual:NSObject_class_()]) {
        if (![class2object containsKeyWithId:mySuper]) {
          (void) [class2object putWithId:mySuper withId:IOSObjectArray_Get(instances, i)];
        }
        mySuper = [mySuper getSuperclass];
      }
    }
  }
  id<JavaUtilMap> canFill = new_JavaUtilHashMap_init();
  id<JavaUtilMap> required = new_JavaUtilHashMap_init();
  id<JavaUtilMap> interner = new_JavaUtilHashMap_init();
  {
    IOSObjectArray *a__ = classes;
    IOSClass * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    IOSClass * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      IOSClass *c = *b__++;
      IOSObjectArray *fields;
      @try {
        fields = EduStanfordNlpUtilExecution_scrapeFieldsWithIOSClass_(c);
      }
      @catch (NSException *e) {
        EduStanfordNlpUtilLoggingRedwood_Util_debugWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ JreStrcat("$$$@$$C", @"Could not check fields for class: ", [((IOSClass *) nil_chk(c)) getName], @"  (caused by ", [((NSException *) nil_chk(e)) getClass], @": ", [e getMessage], ')') } count:1 type:NSObject_class_()]);
        continue;
      }
      jboolean someOptionFilled = false;
      jboolean someOptionFound = false;
      {
        IOSObjectArray *a__ = fields;
        JavaLangReflectField * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
        JavaLangReflectField * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          JavaLangReflectField *f = *b__++;
          id<EduStanfordNlpUtilExecution_Option> o = ((id<EduStanfordNlpUtilExecution_Option>) [((JavaLangReflectField *) nil_chk(f)) getAnnotationWithIOSClass:EduStanfordNlpUtilExecution_Option_class_()]);
          if (o != nil) {
            someOptionFound = true;
            if (([f getModifiers] & JavaLangReflectModifier_STATIC) == 0 && instances == nil) {
              continue;
            }
            someOptionFilled = true;
            EduStanfordNlpUtilPair *mark = EduStanfordNlpUtilPair_makePairWithId_withId_(JavaLangBoolean_valueOfWithBoolean_(false), JavaLangBoolean_valueOfWithBoolean_(false));
            if ([o required]) {
              mark = EduStanfordNlpUtilPair_makePairWithId_withId_(JavaLangBoolean_valueOfWithBoolean_(true), JavaLangBoolean_valueOfWithBoolean_(false));
            }
            NSString *name = [((NSString *) nil_chk([o name])) lowercaseString];
            if ([((NSString *) nil_chk(name)) isEqual:@""]) {
              name = [((NSString *) nil_chk([f getName])) lowercaseString];
            }
            if ([canFill containsKeyWithId:name]) {
              NSString *name1 = JreStrcat("$C$", [((IOSClass *) nil_chk([((JavaLangReflectField *) nil_chk([canFill getWithId:name])) getDeclaringClass])) getCanonicalName], '.', [((JavaLangReflectField *) nil_chk([canFill getWithId:name])) getName]);
              NSString *name2 = JreStrcat("$C$", [((IOSClass *) nil_chk([f getDeclaringClass])) getCanonicalName], '.', [f getName]);
              if (![name1 isEqual:name2]) {
                EduStanfordNlpUtilLoggingRedwood_Util_runtimeExceptionWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ JreStrcat("$$$$$$", @"Multiple declarations of option ", name, @": ", name1, @" and ", name2) } count:1 type:NSObject_class_()]);
              }
              else {
                EduStanfordNlpUtilLoggingRedwood_Util_errWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ JreStrcat("$$", @"Class is in classpath multiple times: ", [((IOSClass *) nil_chk([((JavaLangReflectField *) nil_chk([canFill getWithId:name])) getDeclaringClass])) getCanonicalName]) } count:1 type:NSObject_class_()]);
              }
            }
            (void) [canFill putWithId:name withId:f];
            (void) [required putWithId:name withId:mark];
            (void) [interner putWithId:name withId:name];
            if (![((NSString *) nil_chk([o alt])) isEqual:@""]) {
              {
                IOSObjectArray *a__ = [((NSString *) nil_chk([o alt])) split:@" *, *"];
                NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
                NSString * const *e__ = b__ + a__->size_;
                while (b__ < e__) {
                  NSString *alt = *b__++;
                  alt = [((NSString *) nil_chk(alt)) lowercaseString];
                  if ([canFill containsKeyWithId:alt] && ![((NSString *) nil_chk(alt)) isEqual:name]) @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$@$@", @"Multiple declarations of option ", alt, @": ", [canFill getWithId:alt], @" and ", f));
                  (void) [canFill putWithId:alt withId:f];
                  if ([((JavaLangBoolean *) nil_chk(((EduStanfordNlpUtilPair *) nil_chk(mark))->first_)) booleanValue]) (void) [required putWithId:alt withId:mark];
                  (void) [interner putWithId:alt withId:name];
                }
              }
            }
          }
        }
      }
      if (someOptionFound && !someOptionFilled) {
        EduStanfordNlpUtilLoggingRedwood_Util_warnWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ JreStrcat("$@$", @"found @Option annotations in class ", c, @", but didn't set any of them (all options were instance variables and no instance given?)") } count:1 type:NSObject_class_()]);
      }
    }
  }
  for (id __strong rawKey in nil_chk([((JavaUtilProperties *) nil_chk(options)) keySet])) {
    NSString *rawKeyStr = [nil_chk(rawKey) description];
    NSString *key = [((NSString *) nil_chk([rawKey description])) lowercaseString];
    NSString *value = [nil_chk([options getWithId:rawKey]) description];
    JreAssert((value != nil), (@"edu/stanford/nlp/util/Execution.java:467 condition failed: assert value != null;"));
    JavaLangReflectField *target = [canFill getWithId:key];
    EduStanfordNlpUtilPair *mark = [required getWithId:key];
    if (mark != nil && [((JavaLangBoolean *) nil_chk(mark->first_)) booleanValue]) {
      (void) [required putWithId:key withId:EduStanfordNlpUtilPair_makePairWithId_withId_(JavaLangBoolean_valueOfWithBoolean_(true), JavaLangBoolean_valueOfWithBoolean_(true))];
    }
    if (target != nil) {
      EduStanfordNlpUtilExecution_fillFieldWithId_withJavaLangReflectField_withNSString_([class2object getWithId:[target getDeclaringClass]], target, value);
    }
    else if (ensureAllOptions) {
      jint lastDotIndex = [((NSString *) nil_chk(rawKeyStr)) lastIndexOf:'.'];
      if (lastDotIndex < 0) {
        EduStanfordNlpUtilLoggingRedwood_Util_errWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ JreStrcat("$$", @"Unrecognized option: ", key) } count:1 type:NSObject_class_()]);
        continue;
      }
      if (![rawKeyStr hasPrefix:@"log."]) {
        NSString *className_ = [rawKeyStr substring:0 endIndex:lastDotIndex];
        NSString *fieldName = [rawKeyStr substring:lastDotIndex + 1];
        IOSClass *clazz = nil;
        @try {
          clazz = [((JavaLangClassLoader *) nil_chk(JavaLangClassLoader_getSystemClassLoader())) loadClassWithNSString:className_];
        }
        @catch (JavaLangException *e) {
          EduStanfordNlpUtilLoggingRedwood_Util_errWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ JreStrcat("$@$$$", @"Could not set option: ", rawKey, @"; either the option is mistyped, not defined, or the class ", className_, @" does not exist.") } count:1 type:NSObject_class_()]);
        }
        if (clazz != nil) {
          @try {
            target = [clazz getField:fieldName];
          }
          @catch (JavaLangException *e) {
            EduStanfordNlpUtilLoggingRedwood_Util_errWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ JreStrcat("$@$$$$", @"Could not set option: ", rawKey, @"; no such field: ", fieldName, @" in class: ", className_) } count:1 type:NSObject_class_()]);
          }
          if (target != nil) {
            EduStanfordNlpUtilLoggingRedwood_Util_logWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ JreStrcat("$@$$C", @"option overrides ", target, @" to '", value, '\'') } count:1 type:NSObject_class_()]);
            EduStanfordNlpUtilExecution_fillFieldWithId_withJavaLangReflectField_withNSString_([class2object getWithId:[target getDeclaringClass]], target, value);
          }
          else {
            EduStanfordNlpUtilLoggingRedwood_Util_errWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ JreStrcat("$@$$$$", @"Could not set option: ", rawKey, @"; no such field: ", fieldName, @" in class: ", className_) } count:1 type:NSObject_class_()]);
          }
        }
      }
    }
  }
  jboolean good = true;
  for (NSString * __strong key in nil_chk([required keySet])) {
    EduStanfordNlpUtilPair *mark = [required getWithId:key];
    if ([((JavaLangBoolean *) nil_chk(((EduStanfordNlpUtilPair *) nil_chk(mark))->first_)) booleanValue] && ![((JavaLangBoolean *) nil_chk(mark->second_)) booleanValue]) {
      EduStanfordNlpUtilLoggingRedwood_Util_errWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ JreStrcat("$$$@C", @"Missing required option: ", [interner getWithId:key], @"   <in class: ", [((JavaLangReflectField *) nil_chk([canFill getWithId:key])) getDeclaringClass], '>') } count:1 type:NSObject_class_()]);
      (void) [required putWithId:key withId:EduStanfordNlpUtilPair_makePairWithId_withId_(JavaLangBoolean_valueOfWithBoolean_(true), JavaLangBoolean_valueOfWithBoolean_(true))];
      good = false;
    }
  }
  if (!good) {
    @throw new_JavaLangRuntimeException_initWithNSString_(@"not able to parse properties!!!!");
  }
  return canFill;
}

id<JavaUtilMap> EduStanfordNlpUtilExecution_fillOptionsImplWithNSObjectArray_withIOSClassArray_withJavaUtilProperties_(IOSObjectArray *instances, IOSObjectArray *classes, JavaUtilProperties *options) {
  EduStanfordNlpUtilExecution_initialize();
  return EduStanfordNlpUtilExecution_fillOptionsImplWithNSObjectArray_withIOSClassArray_withJavaUtilProperties_withBoolean_(instances, classes, options, EduStanfordNlpUtilExecution_strict);
}

void EduStanfordNlpUtilExecution_fillOptionsWithIOSClassArray_withJavaUtilProperties_(IOSObjectArray *classes, JavaUtilProperties *options) {
  EduStanfordNlpUtilExecution_initialize();
  (void) EduStanfordNlpUtilExecution_fillOptionsImplWithNSObjectArray_withIOSClassArray_withJavaUtilProperties_(nil, classes, options);
}

void EduStanfordNlpUtilExecution_fillOptionsWithIOSClass_withJavaUtilProperties_(IOSClass *clazz, JavaUtilProperties *options) {
  EduStanfordNlpUtilExecution_initialize();
  (void) EduStanfordNlpUtilExecution_fillOptionsImplWithNSObjectArray_withIOSClassArray_withJavaUtilProperties_(nil, [IOSObjectArray newArrayWithObjects:(id[]){ clazz } count:1 type:IOSClass_class_()], options);
}

void EduStanfordNlpUtilExecution_fillOptionsWithJavaUtilProperties_withNSStringArray_(JavaUtilProperties *props, IOSObjectArray *args) {
  EduStanfordNlpUtilExecution_initialize();
  JavaUtilProperties *options = EduStanfordNlpUtilStringUtils_argsToPropertiesWithNSStringArray_(args);
  for (NSString * __strong key in nil_chk([((JavaUtilProperties *) nil_chk(props)) stringPropertyNames])) {
    (void) [((JavaUtilProperties *) nil_chk(options)) setPropertyWithNSString:key withNSString:[props getPropertyWithNSString:key]];
  }
  id<JavaUtilMap> bootstrapMap = EduStanfordNlpUtilExecution_fillOptionsImplWithNSObjectArray_withIOSClassArray_withJavaUtilProperties_withBoolean_(nil, EduStanfordNlpUtilExecution_BOOTSTRAP_CLASSES, options, false);
  for (NSString * __strong key in nil_chk([((id<JavaUtilMap>) nil_chk(bootstrapMap)) keySet])) {
    (void) [((JavaUtilProperties *) nil_chk(options)) removeWithId:key];
  }
  IOSObjectArray *visibleClasses = EduStanfordNlpUtilExecution_optionClasses;
  if (visibleClasses == nil) visibleClasses = EduStanfordNlpUtilExecution_getVisibleClasses();
  (void) EduStanfordNlpUtilExecution_fillOptionsImplWithNSObjectArray_withIOSClassArray_withJavaUtilProperties_(nil, visibleClasses, options);
}

void EduStanfordNlpUtilExecution_fillOptionsWithIOSClassArray_withJavaUtilProperties_withNSStringArray_(IOSObjectArray *optionClasses, JavaUtilProperties *props, IOSObjectArray *args) {
  EduStanfordNlpUtilExecution_initialize();
  EduStanfordNlpUtilExecution_optionClasses = optionClasses;
  EduStanfordNlpUtilExecution_fillOptionsWithJavaUtilProperties_withNSStringArray_(props, args);
}

void EduStanfordNlpUtilExecution_fillOptionsWithJavaUtilProperties_(JavaUtilProperties *props) {
  EduStanfordNlpUtilExecution_initialize();
  EduStanfordNlpUtilExecution_fillOptionsWithJavaUtilProperties_withNSStringArray_(props, [IOSObjectArray newArrayWithLength:0 type:NSString_class_()]);
}

void EduStanfordNlpUtilExecution_fillOptionsWithIOSClassArray_withNSStringArray_(IOSObjectArray *classes, IOSObjectArray *args) {
  EduStanfordNlpUtilExecution_initialize();
  JavaUtilProperties *options = EduStanfordNlpUtilStringUtils_argsToPropertiesWithNSStringArray_(args);
  (void) EduStanfordNlpUtilExecution_fillOptionsImplWithNSObjectArray_withIOSClassArray_withJavaUtilProperties_withBoolean_(nil, EduStanfordNlpUtilExecution_BOOTSTRAP_CLASSES, options, false);
  (void) EduStanfordNlpUtilExecution_fillOptionsImplWithNSObjectArray_withIOSClassArray_withJavaUtilProperties_(nil, classes, options);
}

void EduStanfordNlpUtilExecution_fillOptionsWithIOSClass_withNSStringArray_(IOSClass *clazz, IOSObjectArray *args) {
  EduStanfordNlpUtilExecution_initialize();
  IOSObjectArray *classes = [IOSObjectArray newArrayWithLength:1 type:IOSClass_class_()];
  (void) IOSObjectArray_Set(classes, 0, clazz);
  EduStanfordNlpUtilExecution_fillOptionsWithIOSClassArray_withNSStringArray_(classes, args);
}

void EduStanfordNlpUtilExecution_fillOptionsWithNSObjectArray_withJavaUtilProperties_(IOSObjectArray *instances, JavaUtilProperties *options) {
  EduStanfordNlpUtilExecution_initialize();
  IOSObjectArray *classes = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(instances))->size_ type:IOSClass_class_()];
  for (jint i = 0; i < classes->size_; ++i) {
    (void) IOSObjectArray_Set(classes, i, [nil_chk(IOSObjectArray_Get(instances, i)) getClass]);
  }
  (void) EduStanfordNlpUtilExecution_fillOptionsImplWithNSObjectArray_withIOSClassArray_withJavaUtilProperties_(instances, classes, options);
}

void EduStanfordNlpUtilExecution_fillOptionsWithId_withJavaUtilProperties_(id instance, JavaUtilProperties *options) {
  EduStanfordNlpUtilExecution_initialize();
  EduStanfordNlpUtilExecution_fillOptionsWithNSObjectArray_withJavaUtilProperties_([IOSObjectArray newArrayWithObjects:(id[]){ instance } count:1 type:NSObject_class_()], options);
}

void EduStanfordNlpUtilExecution_fillOptionsWithNSObjectArray_withNSStringArray_(IOSObjectArray *instances, IOSObjectArray *args) {
  EduStanfordNlpUtilExecution_initialize();
  JavaUtilProperties *options = EduStanfordNlpUtilStringUtils_argsToPropertiesWithNSStringArray_(args);
  (void) EduStanfordNlpUtilExecution_fillOptionsImplWithNSObjectArray_withIOSClassArray_withJavaUtilProperties_withBoolean_(nil, EduStanfordNlpUtilExecution_BOOTSTRAP_CLASSES, options, false);
  IOSObjectArray *classes = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(instances))->size_ type:IOSClass_class_()];
  for (jint i = 0; i < classes->size_; ++i) {
    (void) IOSObjectArray_Set(classes, i, [nil_chk(IOSObjectArray_Get(instances, i)) getClass]);
  }
  (void) EduStanfordNlpUtilExecution_fillOptionsImplWithNSObjectArray_withIOSClassArray_withJavaUtilProperties_(instances, classes, options);
}

void EduStanfordNlpUtilExecution_fillOptionsWithId_withNSStringArray_(id instance, IOSObjectArray *args) {
  EduStanfordNlpUtilExecution_initialize();
  EduStanfordNlpUtilExecution_fillOptionsWithNSObjectArray_withNSStringArray_([IOSObjectArray newArrayWithObjects:(id[]){ instance } count:1 type:NSObject_class_()], args);
}

void EduStanfordNlpUtilExecution_execWithJavaLangRunnable_(id<JavaLangRunnable> toRun) {
  EduStanfordNlpUtilExecution_initialize();
  EduStanfordNlpUtilExecution_execWithJavaLangRunnable_withNSStringArray_(toRun, [IOSObjectArray newArrayWithLength:0 type:NSString_class_()]);
}

void EduStanfordNlpUtilExecution_execWithJavaLangRunnable_withIOSClassArray_(id<JavaLangRunnable> toRun, IOSObjectArray *optionClasses) {
  EduStanfordNlpUtilExecution_initialize();
  EduStanfordNlpUtilExecution_optionClasses = optionClasses;
  EduStanfordNlpUtilExecution_execWithJavaLangRunnable_withNSStringArray_(toRun, [IOSObjectArray newArrayWithLength:0 type:NSString_class_()]);
}

void EduStanfordNlpUtilExecution_execWithJavaLangRunnable_withNSStringArray_(id<JavaLangRunnable> toRun, IOSObjectArray *args) {
  EduStanfordNlpUtilExecution_initialize();
  EduStanfordNlpUtilExecution_execWithJavaLangRunnable_withNSStringArray_withBoolean_(toRun, args, false);
}

void EduStanfordNlpUtilExecution_execWithJavaLangRunnable_withNSStringArray_withIOSClassArray_(id<JavaLangRunnable> toRun, IOSObjectArray *args, IOSObjectArray *optionClasses) {
  EduStanfordNlpUtilExecution_initialize();
  EduStanfordNlpUtilExecution_optionClasses = optionClasses;
  EduStanfordNlpUtilExecution_execWithJavaLangRunnable_withNSStringArray_withBoolean_(toRun, args, false);
}

void EduStanfordNlpUtilExecution_execWithJavaLangRunnable_withNSStringArray_withIOSClassArray_withBoolean_(id<JavaLangRunnable> toRun, IOSObjectArray *args, IOSObjectArray *optionClasses, jboolean exit) {
  EduStanfordNlpUtilExecution_initialize();
  EduStanfordNlpUtilExecution_optionClasses = optionClasses;
  EduStanfordNlpUtilExecution_execWithJavaLangRunnable_withJavaUtilProperties_withBoolean_(toRun, EduStanfordNlpUtilStringUtils_argsToPropertiesWithNSStringArray_(args), exit);
}

void EduStanfordNlpUtilExecution_execWithJavaLangRunnable_withNSStringArray_withBoolean_(id<JavaLangRunnable> toRun, IOSObjectArray *args, jboolean exit) {
  EduStanfordNlpUtilExecution_initialize();
  EduStanfordNlpUtilExecution_execWithJavaLangRunnable_withJavaUtilProperties_withBoolean_(toRun, EduStanfordNlpUtilStringUtils_argsToPropertiesWithNSStringArray_(args), exit);
}

void EduStanfordNlpUtilExecution_execWithJavaLangRunnable_withJavaUtilProperties_(id<JavaLangRunnable> toRun, JavaUtilProperties *options) {
  EduStanfordNlpUtilExecution_initialize();
  EduStanfordNlpUtilExecution_execWithJavaLangRunnable_withJavaUtilProperties_withBoolean_(toRun, options, false);
}

void EduStanfordNlpUtilExecution_execWithJavaLangRunnable_withJavaUtilProperties_withBoolean_(id<JavaLangRunnable> toRun, JavaUtilProperties *options, jboolean exit) {
  EduStanfordNlpUtilExecution_initialize();
  id<JavaUtilMap> bootstrapMap = EduStanfordNlpUtilExecution_fillOptionsImplWithNSObjectArray_withIOSClassArray_withJavaUtilProperties_withBoolean_(nil, EduStanfordNlpUtilExecution_BOOTSTRAP_CLASSES, options, false);
  for (NSString * __strong key in nil_chk([((id<JavaUtilMap>) nil_chk(bootstrapMap)) keySet])) {
    (void) [((JavaUtilProperties *) nil_chk(options)) removeWithId:key];
  }
  EduStanfordNlpUtilLoggingRedwood_Util_startTrackWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ @"init" } count:1 type:NSObject_class_()]);
  IOSObjectArray *visibleClasses = EduStanfordNlpUtilExecution_optionClasses;
  if (visibleClasses == nil) visibleClasses = EduStanfordNlpUtilExecution_getVisibleClasses();
  (void) EduStanfordNlpUtilExecution_fillOptionsImplWithNSObjectArray_withIOSClassArray_withJavaUtilProperties_(nil, visibleClasses, options);
  EduStanfordNlpUtilLoggingRedwood_Util_endTrackWithNSString_(@"init");
  EduStanfordNlpUtilLoggingStanfordRedwoodConfiguration_applyWithJavaUtilProperties_(options);
  jint exitCode = 0;
  EduStanfordNlpUtilLoggingRedwood_Util_startTrackWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ @"main" } count:1 type:NSObject_class_()]);
  @try {
    [((id<JavaLangRunnable>) nil_chk(toRun)) run];
  }
  @catch (NSException *t) {
    EduStanfordNlpUtilLoggingRedwood_Util_logWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ JreLoadStatic(EduStanfordNlpUtilLoggingRedwood_Util, FORCE), t } count:2 type:NSObject_class_()]);
    exitCode = 1;
  }
  EduStanfordNlpUtilLoggingRedwood_Util_endTracksToWithNSString_(@"main");
  if (exit) {
    @throw new_JavaLangRuntimeException_initWithNSString_(@"not able to parse properties!!!");
  }
}

NSString *EduStanfordNlpUtilExecution_threadRootClass() {
  EduStanfordNlpUtilExecution_initialize();
  IOSObjectArray *trace = [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getStackTrace];
  JavaLangStackTraceElement *elem = IOSObjectArray_Get(trace, ((IOSObjectArray *) nil_chk(trace))->size_ - 1);
  return [((JavaLangStackTraceElement *) nil_chk(elem)) getClassName];
}

void EduStanfordNlpUtilExecution_usageAndExitWithNSStringArray_(IOSObjectArray *expectedArgs) {
  EduStanfordNlpUtilExecution_initialize();
  NSString *clazz = EduStanfordNlpUtilExecution_threadRootClass();
  JavaLangStringBuilder *b = new_JavaLangStringBuilder_init();
  (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([b appendWithNSString:@"USAGE: "])) appendWithNSString:clazz])) appendWithNSString:@" "];
  {
    IOSObjectArray *a__ = expectedArgs;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *arg = *b__++;
      (void) [((JavaLangStringBuilder *) nil_chk([b appendWithNSString:arg])) appendWithNSString:@" "];
    }
  }
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:[b description]];
  JavaLangSystem_exitWithInt_(0);
}

void EduStanfordNlpUtilExecution_usageAndExitWithJavaUtilMap_(id<JavaUtilMap> argToFlagsMap) {
  EduStanfordNlpUtilExecution_initialize();
  NSString *clazz = EduStanfordNlpUtilExecution_threadRootClass();
  JavaLangStringBuilder *b = new_JavaLangStringBuilder_init();
  (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([b appendWithNSString:@"USAGE: "])) appendWithNSString:clazz])) appendWithNSString:@"\n\t"];
  for (NSString * __strong arg in nil_chk([((id<JavaUtilMap>) nil_chk(argToFlagsMap)) keySet])) {
    IOSObjectArray *flags = [argToFlagsMap getWithId:arg];
    if (flags == nil || flags->size_ == 0) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"No flags registered for arg: ", arg));
    }
    (void) [b appendWithNSString:@"{"];
    for (jint i = 0; i < flags->size_ - 1; i++) {
      (void) [((JavaLangStringBuilder *) nil_chk([b appendWithNSString:IOSObjectArray_Get(flags, i)])) appendWithNSString:@","];
    }
    (void) [((JavaLangStringBuilder *) nil_chk([b appendWithNSString:IOSObjectArray_Get(flags, flags->size_ - 1)])) appendWithNSString:@"}"];
  }
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:[b description]];
  JavaLangSystem_exitWithInt_(0);
}

void EduStanfordNlpUtilExecution_init(EduStanfordNlpUtilExecution *self) {
  NSObject_init(self);
}

EduStanfordNlpUtilExecution *new_EduStanfordNlpUtilExecution_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilExecution, init)
}

EduStanfordNlpUtilExecution *create_EduStanfordNlpUtilExecution_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilExecution, init)
}

IOSObjectArray *EduStanfordNlpUtilExecution__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_EduStanfordNlpUtilExecution_Option(@"", @"Fill options from these classes", @"option_classes", false) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *EduStanfordNlpUtilExecution__Annotations$1() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_EduStanfordNlpUtilExecution_Option(@"", @"Number of threads on machine", @"threads", false) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *EduStanfordNlpUtilExecution__Annotations$2() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_EduStanfordNlpUtilExecution_Option(@"", @"Name of computer we are running on", @"host", false) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *EduStanfordNlpUtilExecution__Annotations$3() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_EduStanfordNlpUtilExecution_Option(@"", @"If true, make sure that all options passed in are used somewhere", @"strict", false) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *EduStanfordNlpUtilExecution__Annotations$4() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_EduStanfordNlpUtilExecution_Option(@"", @"If true, print options as they are set.", @"exec.verbose", false) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpUtilExecution)

@implementation EduStanfordNlpUtilExecution_Option

@synthesize name = name_;
@synthesize gloss = gloss_;
@synthesize required = required_;
@synthesize alt = alt_;

+ (NSString *)nameDefault {
  return @"";
}

+ (NSString *)glossDefault {
  return @"";
}

+ (jboolean)requiredDefault {
  return false;
}

+ (NSString *)altDefault {
  return @"";
}

- (IOSClass *)annotationType {
  return EduStanfordNlpUtilExecution_Option_class_();
}

- (NSString *)description {
  return @"@edu.stanford.nlp.util.Execution$Option()";
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(name);
  methods[1].selector = @selector(gloss);
  methods[2].selector = @selector(required);
  methods[3].selector = @selector(alt);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LEduStanfordNlpUtilExecution;", (void *)&EduStanfordNlpUtilExecution_Option__Annotations$0 };
  static const J2ObjcClassInfo _EduStanfordNlpUtilExecution_Option = { "Option", "edu.stanford.nlp.util", ptrTable, methods, NULL, 7, 0x2609, 4, 0, 0, -1, -1, -1, 1 };
  return &_EduStanfordNlpUtilExecution_Option;
}

@end

id<EduStanfordNlpUtilExecution_Option> create_EduStanfordNlpUtilExecution_Option(NSString *alt, NSString *gloss, NSString *name, jboolean required) {
  EduStanfordNlpUtilExecution_Option *self = AUTORELEASE([[EduStanfordNlpUtilExecution_Option alloc] init]);
  self->alt_ = RETAIN_(alt);
  self->gloss_ = RETAIN_(gloss);
  self->name_ = RETAIN_(name);
  self->required_ = required;
  return self;
}

IOSObjectArray *EduStanfordNlpUtilExecution_Option__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangAnnotationDocumented(), create_JavaLangAnnotationRetention(JreLoadEnum(JavaLangAnnotationRetentionPolicy, RUNTIME)), create_JavaLangAnnotationTarget([IOSObjectArray newArrayWithObjects:(id[]){ JreLoadEnum(JavaLangAnnotationElementType, FIELD) } count:1 type:NSObject_class_()]) } count:3 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(EduStanfordNlpUtilExecution_Option)

@implementation EduStanfordNlpUtilExecution_LazyFileIterator

- (instancetype)initWithJavaIoFile:(JavaIoFile *)path
                      withNSString:(NSString *)filter {
  EduStanfordNlpUtilExecution_LazyFileIterator_initWithJavaIoFile_withNSString_(self, path, filter);
  return self;
}

- (instancetype)initWithJavaIoFile:(JavaIoFile *)dir
          withJavaIoFilenameFilter:(id<JavaIoFilenameFilter>)filter {
  EduStanfordNlpUtilExecution_LazyFileIterator_initWithJavaIoFile_withJavaIoFilenameFilter_(self, dir, filter);
  return self;
}

- (void)enqueue {
  EduStanfordNlpUtilExecution_LazyFileIterator_enqueue(self);
}

- (jboolean)hasNext {
  return toReturn_ >= 0;
}

- (JavaIoFile *)next {
  if (toReturn_ >= ((IOSObjectArray *) nil_chk(dir_))->size_ || toReturn_ < 0) @throw new_JavaLangIllegalStateException_initWithNSString_(@"No more elements!");
  JavaIoFile *rtn = IOSObjectArray_Get(dir_, toReturn_);
  EduStanfordNlpUtilExecution_LazyFileIterator_enqueue(self);
  return rtn;
}

- (void)remove {
  @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"NOT IMPLEMENTED");
}

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaUtilIterator_forEachRemainingWithJavaUtilFunctionConsumer_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaIoFile:withNSString:);
  methods[1].selector = @selector(initWithJavaIoFile:withJavaIoFilenameFilter:);
  methods[2].selector = @selector(enqueue);
  methods[3].selector = @selector(hasNext);
  methods[4].selector = @selector(next);
  methods[5].selector = @selector(remove);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "filter_", "LJavaIoFilenameFilter;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "dir_", "[LJavaIoFile;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "parents_", "LJavaUtilStack;", .constantValue.asLong = 0, 0x2, -1, -1, 2, -1 },
    { "indices_", "LJavaUtilStack;", .constantValue.asLong = 0, 0x2, -1, -1, 3, -1 },
    { "toReturn_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoFile;LNSString;", "LJavaIoFile;LJavaIoFilenameFilter;", "Ljava/util/Stack<[Ljava/io/File;>;", "Ljava/util/Stack<Ljava/lang/Integer;>;", "LEduStanfordNlpUtilExecution;", "Ljava/lang/Object;Ljava/util/Iterator<Ljava/io/File;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilExecution_LazyFileIterator = { "LazyFileIterator", "edu.stanford.nlp.util", ptrTable, methods, fields, 7, 0x9, 6, 5, 4, -1, -1, 5, -1 };
  return &_EduStanfordNlpUtilExecution_LazyFileIterator;
}

@end

void EduStanfordNlpUtilExecution_LazyFileIterator_initWithJavaIoFile_withNSString_(EduStanfordNlpUtilExecution_LazyFileIterator *self, JavaIoFile *path, NSString *filter) {
  EduStanfordNlpUtilExecution_LazyFileIterator_initWithJavaIoFile_withJavaIoFilenameFilter_(self, path, new_EduStanfordNlpUtilExecution_LazyFileIterator_$Lambda$1_initWithNSString_(filter));
}

EduStanfordNlpUtilExecution_LazyFileIterator *new_EduStanfordNlpUtilExecution_LazyFileIterator_initWithJavaIoFile_withNSString_(JavaIoFile *path, NSString *filter) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilExecution_LazyFileIterator, initWithJavaIoFile_withNSString_, path, filter)
}

EduStanfordNlpUtilExecution_LazyFileIterator *create_EduStanfordNlpUtilExecution_LazyFileIterator_initWithJavaIoFile_withNSString_(JavaIoFile *path, NSString *filter) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilExecution_LazyFileIterator, initWithJavaIoFile_withNSString_, path, filter)
}

void EduStanfordNlpUtilExecution_LazyFileIterator_initWithJavaIoFile_withJavaIoFilenameFilter_(EduStanfordNlpUtilExecution_LazyFileIterator *self, JavaIoFile *dir, id<JavaIoFilenameFilter> filter) {
  NSObject_init(self);
  self->parents_ = new_JavaUtilStack_init();
  self->indices_ = new_JavaUtilStack_init();
  self->toReturn_ = -1;
  if (![((JavaIoFile *) nil_chk(dir)) exists]) @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Could not find directory: ", [dir getPath]));
  if (![dir isDirectory]) @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Not a directory: ", [dir getPath]));
  self->filter_ = filter;
  self->dir_ = [dir listFilesWithJavaIoFilenameFilter:filter];
  EduStanfordNlpUtilExecution_LazyFileIterator_enqueue(self);
}

EduStanfordNlpUtilExecution_LazyFileIterator *new_EduStanfordNlpUtilExecution_LazyFileIterator_initWithJavaIoFile_withJavaIoFilenameFilter_(JavaIoFile *dir, id<JavaIoFilenameFilter> filter) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilExecution_LazyFileIterator, initWithJavaIoFile_withJavaIoFilenameFilter_, dir, filter)
}

EduStanfordNlpUtilExecution_LazyFileIterator *create_EduStanfordNlpUtilExecution_LazyFileIterator_initWithJavaIoFile_withJavaIoFilenameFilter_(JavaIoFile *dir, id<JavaIoFilenameFilter> filter) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilExecution_LazyFileIterator, initWithJavaIoFile_withJavaIoFilenameFilter_, dir, filter)
}

void EduStanfordNlpUtilExecution_LazyFileIterator_enqueue(EduStanfordNlpUtilExecution_LazyFileIterator *self) {
  self->toReturn_ += 1;
  jboolean good = (self->toReturn_ < ((IOSObjectArray *) nil_chk(self->dir_))->size_ && ![((JavaIoFile *) nil_chk(IOSObjectArray_Get(self->dir_, self->toReturn_))) isDirectory]);
  while (!good) {
    if (self->toReturn_ >= ((IOSObjectArray *) nil_chk(self->dir_))->size_) {
      if ([((JavaUtilStack *) nil_chk(self->parents_)) isEmpty]) {
        self->toReturn_ = -1;
        return;
      }
      else {
        self->dir_ = [((JavaUtilStack *) nil_chk(self->parents_)) pop];
        self->toReturn_ = [((JavaLangInteger *) nil_chk([((JavaUtilStack *) nil_chk(self->indices_)) pop])) intValue];
      }
    }
    else if ([((JavaIoFile *) nil_chk(IOSObjectArray_Get(self->dir_, self->toReturn_))) isDirectory]) {
      (void) [((JavaUtilStack *) nil_chk(self->parents_)) pushWithId:self->dir_];
      (void) [((JavaUtilStack *) nil_chk(self->indices_)) pushWithId:JavaLangInteger_valueOfWithInt_(self->toReturn_ + 1)];
      self->dir_ = [((JavaIoFile *) nil_chk(IOSObjectArray_Get(nil_chk(self->dir_), self->toReturn_))) listFilesWithJavaIoFilenameFilter:self->filter_];
      self->toReturn_ = 0;
    }
    else {
      @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@", @"File is invalid, but in range and not a directory: ", IOSObjectArray_Get(nil_chk(self->dir_), self->toReturn_)));
    }
    good = (self->toReturn_ < ((IOSObjectArray *) nil_chk(self->dir_))->size_ && ![((JavaIoFile *) nil_chk(IOSObjectArray_Get(self->dir_, self->toReturn_))) isDirectory]);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpUtilExecution_LazyFileIterator)

@implementation EduStanfordNlpUtilExecution_LazyFileIterator_$Lambda$1

- (jboolean)acceptWithJavaIoFile:(JavaIoFile *)file
                    withNSString:(NSString *)name {
  NSString *filePath = (JreStrcat("$C$", [((JavaIoFile *) nil_chk(file)) getPath], '/', name));
  return [new_JavaIoFile_initWithNSString_(filePath) isDirectory] || [filePath matches:val$filter_];
}

@end

void EduStanfordNlpUtilExecution_LazyFileIterator_$Lambda$1_initWithNSString_(EduStanfordNlpUtilExecution_LazyFileIterator_$Lambda$1 *self, NSString *capture$0) {
  self->val$filter_ = capture$0;
  NSObject_init(self);
}

EduStanfordNlpUtilExecution_LazyFileIterator_$Lambda$1 *new_EduStanfordNlpUtilExecution_LazyFileIterator_$Lambda$1_initWithNSString_(NSString *capture$0) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilExecution_LazyFileIterator_$Lambda$1, initWithNSString_, capture$0)
}

EduStanfordNlpUtilExecution_LazyFileIterator_$Lambda$1 *create_EduStanfordNlpUtilExecution_LazyFileIterator_$Lambda$1_initWithNSString_(NSString *capture$0) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilExecution_LazyFileIterator_$Lambda$1, initWithNSString_, capture$0)
}
