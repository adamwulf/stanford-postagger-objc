//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/util/XMLUtils.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_EduStanfordNlpUtilXMLUtils")
#ifdef RESTRICT_EduStanfordNlpUtilXMLUtils
#define INCLUDE_ALL_EduStanfordNlpUtilXMLUtils 0
#else
#define INCLUDE_ALL_EduStanfordNlpUtilXMLUtils 1
#endif
#undef RESTRICT_EduStanfordNlpUtilXMLUtils

#if !defined (EduStanfordNlpUtilXMLUtils_) && (INCLUDE_ALL_EduStanfordNlpUtilXMLUtils || defined(INCLUDE_EduStanfordNlpUtilXMLUtils))
#define EduStanfordNlpUtilXMLUtils_

@class EduStanfordNlpUtilXMLUtils_XMLTag;
@class IOSObjectArray;
@class JavaIoFile;
@class JavaIoReader;
@class JavaUtilRegexPattern;
@class JavaxXmlParsersDocumentBuilder;
@protocol JavaUtilList;
@protocol OrgW3cDomDocument;

@interface EduStanfordNlpUtilXMLUtils : NSObject

#pragma mark Public

+ (NSString *)escapeAttributeXMLWithNSString:(NSString *)inArg;

+ (NSString *)escapeElementXMLWithNSString:(NSString *)inArg;

+ (NSString *)escapeTextAroundXMLTagsWithNSString:(NSString *)s;

+ (NSString *)escapeXMLWithNSString:(NSString *)inArg;

+ (jint)findSpaceWithNSString:(NSString *)haystack
                      withInt:(jint)begin;

+ (id<JavaUtilList>)getTagElementsFromFileWithJavaIoFile:(JavaIoFile *)f
                                            withNSString:(NSString *)tag;

+ (id<JavaUtilList>)getTagElementsFromFileSAXExceptionWithJavaIoFile:(JavaIoFile *)f
                                                        withNSString:(NSString *)tag;

+ (id<JavaUtilList>)getTextContentFromTagsFromFileWithJavaIoFile:(JavaIoFile *)f
                                                    withNSString:(NSString *)tag;

+ (id<JavaUtilList>)getTextContentFromTagsFromFileSAXExceptionWithJavaIoFile:(JavaIoFile *)f
                                                                withNSString:(NSString *)tag;

+ (JavaxXmlParsersDocumentBuilder *)getValidatingXmlParserWithJavaIoFile:(JavaIoFile *)schemaFile;

+ (JavaxXmlParsersDocumentBuilder *)getXmlParser;

+ (jboolean)isBreakingWithNSString:(NSString *)tag;

+ (jboolean)isBreakingWithEduStanfordNlpUtilXMLUtils_XMLTag:(EduStanfordNlpUtilXMLUtils_XMLTag *)tag;

+ (void)mainWithNSStringArray:(IOSObjectArray *)args;

+ (EduStanfordNlpUtilXMLUtils_XMLTag *)parseTagWithNSString:(NSString *)tagString;

+ (EduStanfordNlpUtilXMLUtils_XMLTag *)readAndParseTagWithJavaIoReader:(JavaIoReader *)r;

+ (id<OrgW3cDomDocument>)readDocumentFromFileWithNSString:(NSString *)filename;

+ (id<OrgW3cDomDocument>)readDocumentFromStringWithNSString:(NSString *)s;

+ (NSString *)readTagWithJavaIoReader:(JavaIoReader *)r;

+ (NSString *)readUntilTagWithJavaIoReader:(JavaIoReader *)r;

+ (NSString *)stripTagsWithJavaIoReader:(JavaIoReader *)r
                       withJavaUtilList:(id<JavaUtilList>)mapBack
                            withBoolean:(jboolean)markLineBreaks;

+ (NSString *)unescapeStringForXMLWithNSString:(NSString *)s;

@end

J2OBJC_STATIC_INIT(EduStanfordNlpUtilXMLUtils)

inline JavaUtilRegexPattern *EduStanfordNlpUtilXMLUtils_get_xmlEscapingPattern();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaUtilRegexPattern *EduStanfordNlpUtilXMLUtils_xmlEscapingPattern;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpUtilXMLUtils, xmlEscapingPattern, JavaUtilRegexPattern *)

FOUNDATION_EXPORT id<JavaUtilList> EduStanfordNlpUtilXMLUtils_getTextContentFromTagsFromFileWithJavaIoFile_withNSString_(JavaIoFile *f, NSString *tag);

FOUNDATION_EXPORT id<JavaUtilList> EduStanfordNlpUtilXMLUtils_getTextContentFromTagsFromFileSAXExceptionWithJavaIoFile_withNSString_(JavaIoFile *f, NSString *tag);

FOUNDATION_EXPORT id<JavaUtilList> EduStanfordNlpUtilXMLUtils_getTagElementsFromFileWithJavaIoFile_withNSString_(JavaIoFile *f, NSString *tag);

FOUNDATION_EXPORT id<JavaUtilList> EduStanfordNlpUtilXMLUtils_getTagElementsFromFileSAXExceptionWithJavaIoFile_withNSString_(JavaIoFile *f, NSString *tag);

FOUNDATION_EXPORT JavaxXmlParsersDocumentBuilder *EduStanfordNlpUtilXMLUtils_getXmlParser();

FOUNDATION_EXPORT JavaxXmlParsersDocumentBuilder *EduStanfordNlpUtilXMLUtils_getValidatingXmlParserWithJavaIoFile_(JavaIoFile *schemaFile);

FOUNDATION_EXPORT NSString *EduStanfordNlpUtilXMLUtils_stripTagsWithJavaIoReader_withJavaUtilList_withBoolean_(JavaIoReader *r, id<JavaUtilList> mapBack, jboolean markLineBreaks);

FOUNDATION_EXPORT jboolean EduStanfordNlpUtilXMLUtils_isBreakingWithNSString_(NSString *tag);

FOUNDATION_EXPORT jboolean EduStanfordNlpUtilXMLUtils_isBreakingWithEduStanfordNlpUtilXMLUtils_XMLTag_(EduStanfordNlpUtilXMLUtils_XMLTag *tag);

FOUNDATION_EXPORT NSString *EduStanfordNlpUtilXMLUtils_readUntilTagWithJavaIoReader_(JavaIoReader *r);

FOUNDATION_EXPORT EduStanfordNlpUtilXMLUtils_XMLTag *EduStanfordNlpUtilXMLUtils_readAndParseTagWithJavaIoReader_(JavaIoReader *r);

FOUNDATION_EXPORT NSString *EduStanfordNlpUtilXMLUtils_unescapeStringForXMLWithNSString_(NSString *s);

FOUNDATION_EXPORT NSString *EduStanfordNlpUtilXMLUtils_escapeXMLWithNSString_(NSString *inArg);

FOUNDATION_EXPORT NSString *EduStanfordNlpUtilXMLUtils_escapeElementXMLWithNSString_(NSString *inArg);

FOUNDATION_EXPORT NSString *EduStanfordNlpUtilXMLUtils_escapeAttributeXMLWithNSString_(NSString *inArg);

FOUNDATION_EXPORT NSString *EduStanfordNlpUtilXMLUtils_escapeTextAroundXMLTagsWithNSString_(NSString *s);

FOUNDATION_EXPORT jint EduStanfordNlpUtilXMLUtils_findSpaceWithNSString_withInt_(NSString *haystack, jint begin);

FOUNDATION_EXPORT NSString *EduStanfordNlpUtilXMLUtils_readTagWithJavaIoReader_(JavaIoReader *r);

FOUNDATION_EXPORT EduStanfordNlpUtilXMLUtils_XMLTag *EduStanfordNlpUtilXMLUtils_parseTagWithNSString_(NSString *tagString);

FOUNDATION_EXPORT id<OrgW3cDomDocument> EduStanfordNlpUtilXMLUtils_readDocumentFromFileWithNSString_(NSString *filename);

FOUNDATION_EXPORT id<OrgW3cDomDocument> EduStanfordNlpUtilXMLUtils_readDocumentFromStringWithNSString_(NSString *s);

FOUNDATION_EXPORT void EduStanfordNlpUtilXMLUtils_mainWithNSStringArray_(IOSObjectArray *args);

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpUtilXMLUtils)

#endif

#if !defined (EduStanfordNlpUtilXMLUtils_XMLTag_) && (INCLUDE_ALL_EduStanfordNlpUtilXMLUtils || defined(INCLUDE_EduStanfordNlpUtilXMLUtils_XMLTag))
#define EduStanfordNlpUtilXMLUtils_XMLTag_

@protocol JavaUtilMap;

@interface EduStanfordNlpUtilXMLUtils_XMLTag : NSObject {
 @public
  NSString *text_;
  NSString *name_;
  id<JavaUtilMap> attributes_;
  jboolean isEndTag_;
  jboolean isSingleTag_;
}

#pragma mark Public

- (instancetype)initWithNSString:(NSString *)tag;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpUtilXMLUtils_XMLTag)

J2OBJC_FIELD_SETTER(EduStanfordNlpUtilXMLUtils_XMLTag, text_, NSString *)
J2OBJC_FIELD_SETTER(EduStanfordNlpUtilXMLUtils_XMLTag, name_, NSString *)
J2OBJC_FIELD_SETTER(EduStanfordNlpUtilXMLUtils_XMLTag, attributes_, id<JavaUtilMap>)

FOUNDATION_EXPORT void EduStanfordNlpUtilXMLUtils_XMLTag_initWithNSString_(EduStanfordNlpUtilXMLUtils_XMLTag *self, NSString *tag);

FOUNDATION_EXPORT EduStanfordNlpUtilXMLUtils_XMLTag *new_EduStanfordNlpUtilXMLUtils_XMLTag_initWithNSString_(NSString *tag) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EduStanfordNlpUtilXMLUtils_XMLTag *create_EduStanfordNlpUtilXMLUtils_XMLTag_initWithNSString_(NSString *tag);

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpUtilXMLUtils_XMLTag)

#endif

#pragma pop_macro("INCLUDE_ALL_EduStanfordNlpUtilXMLUtils")
