//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/util/FixedPrioritiesPriorityQueue.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/util/ErasureUtils.h"
#include "edu/stanford/nlp/util/FixedPrioritiesPriorityQueue.h"
#include "java/lang/AssertionError.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/Double.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/AbstractSet.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/NoSuchElementException.h"
#include "java/util/function/Consumer.h"

@interface EduStanfordNlpUtilFixedPrioritiesPriorityQueue () {
 @public
  jint size_;
  jint capacity_;
  id<JavaUtilList> elements_;
  IOSDoubleArray *priorities_;
}

- (void)growWithInt:(jint)newCapacity;

+ (jint)parentWithInt:(jint)loc;

+ (jint)leftChildWithInt:(jint)loc;

+ (jint)rightChildWithInt:(jint)loc;

- (void)heapifyUpWithInt:(jint)loc;

- (void)heapifyDownWithInt:(jint)loc;

- (void)swapWithInt:(jint)loc1
            withInt:(jint)loc2;

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpUtilFixedPrioritiesPriorityQueue, elements_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(EduStanfordNlpUtilFixedPrioritiesPriorityQueue, priorities_, IOSDoubleArray *)

inline jlong EduStanfordNlpUtilFixedPrioritiesPriorityQueue_get_serialVersionUID();
#define EduStanfordNlpUtilFixedPrioritiesPriorityQueue_serialVersionUID 1LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpUtilFixedPrioritiesPriorityQueue, serialVersionUID, jlong)

__attribute__((unused)) static void EduStanfordNlpUtilFixedPrioritiesPriorityQueue_growWithInt_(EduStanfordNlpUtilFixedPrioritiesPriorityQueue *self, jint newCapacity);

__attribute__((unused)) static jint EduStanfordNlpUtilFixedPrioritiesPriorityQueue_parentWithInt_(jint loc);

__attribute__((unused)) static jint EduStanfordNlpUtilFixedPrioritiesPriorityQueue_leftChildWithInt_(jint loc);

__attribute__((unused)) static jint EduStanfordNlpUtilFixedPrioritiesPriorityQueue_rightChildWithInt_(jint loc);

__attribute__((unused)) static void EduStanfordNlpUtilFixedPrioritiesPriorityQueue_heapifyUpWithInt_(EduStanfordNlpUtilFixedPrioritiesPriorityQueue *self, jint loc);

__attribute__((unused)) static void EduStanfordNlpUtilFixedPrioritiesPriorityQueue_heapifyDownWithInt_(EduStanfordNlpUtilFixedPrioritiesPriorityQueue *self, jint loc);

__attribute__((unused)) static void EduStanfordNlpUtilFixedPrioritiesPriorityQueue_swapWithInt_withInt_(EduStanfordNlpUtilFixedPrioritiesPriorityQueue *self, jint loc1, jint loc2);

@implementation EduStanfordNlpUtilFixedPrioritiesPriorityQueue

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpUtilFixedPrioritiesPriorityQueue_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithInt:(jint)capacity {
  EduStanfordNlpUtilFixedPrioritiesPriorityQueue_initWithInt_(self, capacity);
  return self;
}

- (jboolean)hasNext {
  return ![self isEmpty];
}

- (id)next {
  return [self removeFirst];
}

- (void)remove {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (jboolean)addWithId:(id)key
           withDouble:(jdouble)priority {
  if (size_ == capacity_) {
    EduStanfordNlpUtilFixedPrioritiesPriorityQueue_growWithInt_(self, 2 * capacity_ + 1);
  }
  [((id<JavaUtilList>) nil_chk(elements_)) addWithId:key];
  *IOSDoubleArray_GetRef(nil_chk(priorities_), size_) = priority;
  EduStanfordNlpUtilFixedPrioritiesPriorityQueue_heapifyUpWithInt_(self, size_);
  size_++;
  return true;
}

- (jboolean)changePriorityWithId:(id)key
                      withDouble:(jdouble)priority {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id)getFirst {
  if ([self size] > 0) return [((id<JavaUtilList>) nil_chk(elements_)) getWithInt:0];
  @throw new_JavaUtilNoSuchElementException_init();
}

- (jdouble)getPriorityWithId:(id)key {
  for (jint i = 0, sz = [((id<JavaUtilList>) nil_chk(elements_)) size]; i < sz; i++) {
    if ([nil_chk([((id<JavaUtilList>) nil_chk(elements_)) getWithInt:i]) isEqual:key]) {
      return IOSDoubleArray_Get(nil_chk(priorities_), i);
    }
  }
  @throw new_JavaUtilNoSuchElementException_init();
}

- (jdouble)getPriority {
  if ([self size] > 0) return IOSDoubleArray_Get(nil_chk(priorities_), 0);
  @throw new_JavaUtilNoSuchElementException_init();
}

- (jboolean)relaxPriorityWithId:(id)key
                     withDouble:(jdouble)priority {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id)removeFirst {
  id first = [self getFirst];
  EduStanfordNlpUtilFixedPrioritiesPriorityQueue_swapWithInt_withInt_(self, 0, size_ - 1);
  size_--;
  (void) [((id<JavaUtilList>) nil_chk(elements_)) removeWithInt:size_];
  EduStanfordNlpUtilFixedPrioritiesPriorityQueue_heapifyDownWithInt_(self, 0);
  return first;
}

- (id<JavaUtilList>)toSortedList {
  id<JavaUtilList> list = new_JavaUtilArrayList_init();
  while ([self hasNext]) {
    [list addWithId:[self next]];
  }
  return list;
}

- (jint)size {
  return size_;
}

- (void)clear {
  size_ = 0;
  EduStanfordNlpUtilFixedPrioritiesPriorityQueue_growWithInt_(self, 15);
}

- (id<JavaUtilIterator>)iterator {
  return [((id<JavaUtilCollection>) nil_chk(JavaUtilCollections_unmodifiableCollectionWithJavaUtilCollection_([self toSortedList]))) iterator];
}

- (void)growWithInt:(jint)newCapacity {
  EduStanfordNlpUtilFixedPrioritiesPriorityQueue_growWithInt_(self, newCapacity);
}

+ (jint)parentWithInt:(jint)loc {
  return EduStanfordNlpUtilFixedPrioritiesPriorityQueue_parentWithInt_(loc);
}

+ (jint)leftChildWithInt:(jint)loc {
  return EduStanfordNlpUtilFixedPrioritiesPriorityQueue_leftChildWithInt_(loc);
}

+ (jint)rightChildWithInt:(jint)loc {
  return EduStanfordNlpUtilFixedPrioritiesPriorityQueue_rightChildWithInt_(loc);
}

- (void)heapifyUpWithInt:(jint)loc {
  EduStanfordNlpUtilFixedPrioritiesPriorityQueue_heapifyUpWithInt_(self, loc);
}

- (void)heapifyDownWithInt:(jint)loc {
  EduStanfordNlpUtilFixedPrioritiesPriorityQueue_heapifyDownWithInt_(self, loc);
}

- (void)swapWithInt:(jint)loc1
            withInt:(jint)loc2 {
  EduStanfordNlpUtilFixedPrioritiesPriorityQueue_swapWithInt_withInt_(self, loc1, loc2);
}

- (NSString *)description {
  return [self toStringWithInt:[self size] withNSString:nil];
}

- (NSString *)toStringWithInt:(jint)maxKeysToPrint {
  return [self toStringWithInt:maxKeysToPrint withNSString:@"%.3f"];
}

- (NSString *)toStringWithInt:(jint)maxKeysToPrint
                 withNSString:(NSString *)dblFmt {
  if (maxKeysToPrint <= 0) maxKeysToPrint = JavaLangInteger_MAX_VALUE;
  EduStanfordNlpUtilFixedPrioritiesPriorityQueue *pq = [self clone];
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_initWithNSString_(@"[");
  jint numKeysPrinted = 0;
  while (numKeysPrinted < maxKeysToPrint && [((EduStanfordNlpUtilFixedPrioritiesPriorityQueue *) nil_chk(pq)) hasNext]) {
    jdouble priority = [((EduStanfordNlpUtilFixedPrioritiesPriorityQueue *) nil_chk(pq)) getPriority];
    id element = [pq next];
    (void) [sb appendWithId:element];
    (void) [sb appendWithChar:'='];
    if (dblFmt == nil) {
      (void) [sb appendWithDouble:priority];
    }
    else {
      (void) [sb appendWithNSString:NSString_formatWithNSString_withNSObjectArray_(dblFmt, [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_(priority) } count:1 type:NSObject_class_()])];
    }
    if (numKeysPrinted < [self size] - 1) (void) [sb appendWithNSString:@", "];
    numKeysPrinted++;
  }
  if (numKeysPrinted < [self size]) {
    (void) [sb appendWithNSString:@"..."];
  }
  (void) [sb appendWithNSString:@"]"];
  return [sb description];
}

- (EduStanfordNlpUtilFixedPrioritiesPriorityQueue *)clone {
  EduStanfordNlpUtilFixedPrioritiesPriorityQueue *clonePQ;
  @try {
    clonePQ = EduStanfordNlpUtilErasureUtils_uncheckedCastWithId_([super clone]);
  }
  @catch (JavaLangCloneNotSupportedException *cnse) {
    @throw new_JavaLangAssertionError_initWithId_(@"Should be able to clone.");
  }
  ((EduStanfordNlpUtilFixedPrioritiesPriorityQueue *) nil_chk(clonePQ))->elements_ = new_JavaUtilArrayList_initWithInt_(capacity_);
  clonePQ->priorities_ = [IOSDoubleArray newArrayWithLength:capacity_];
  if ([self size] > 0) {
    [((id<JavaUtilList>) nil_chk(clonePQ->elements_)) addAllWithJavaUtilCollection:elements_];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(priorities_, 0, clonePQ->priorities_, 0, [self size]);
  }
  return clonePQ;
}

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaUtilIterator_forEachRemainingWithJavaUtilFunctionConsumer_(self, arg0);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, 1, 2, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "Z", 0x1, 6, 4, -1, 5, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "D", 0x1, 7, 8, -1, 9, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 10, 4, -1, 5, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, 1, 2, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 11, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 12, -1, -1 },
    { NULL, "V", 0x2, 13, 0, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 14, 0, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 15, 0, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 16, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 17, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 18, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 19, 20, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 21, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 21, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 21, 22, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpUtilFixedPrioritiesPriorityQueue;", 0x11, -1, -1, -1, 23, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithInt:);
  methods[2].selector = @selector(hasNext);
  methods[3].selector = @selector(next);
  methods[4].selector = @selector(remove);
  methods[5].selector = @selector(addWithId:withDouble:);
  methods[6].selector = @selector(changePriorityWithId:withDouble:);
  methods[7].selector = @selector(getFirst);
  methods[8].selector = @selector(getPriorityWithId:);
  methods[9].selector = @selector(getPriority);
  methods[10].selector = @selector(relaxPriorityWithId:withDouble:);
  methods[11].selector = @selector(removeFirst);
  methods[12].selector = @selector(toSortedList);
  methods[13].selector = @selector(size);
  methods[14].selector = @selector(clear);
  methods[15].selector = @selector(iterator);
  methods[16].selector = @selector(growWithInt:);
  methods[17].selector = @selector(parentWithInt:);
  methods[18].selector = @selector(leftChildWithInt:);
  methods[19].selector = @selector(rightChildWithInt:);
  methods[20].selector = @selector(heapifyUpWithInt:);
  methods[21].selector = @selector(heapifyDownWithInt:);
  methods[22].selector = @selector(swapWithInt:withInt:);
  methods[23].selector = @selector(description);
  methods[24].selector = @selector(toStringWithInt:);
  methods[25].selector = @selector(toStringWithInt:withNSString:);
  methods[26].selector = @selector(clone);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpUtilFixedPrioritiesPriorityQueue_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "size_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "capacity_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "elements_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 24, -1 },
    { "priorities_", "[D", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "LJavaUtilNoSuchElementException;", "()TE;", "add", "LNSObject;D", "(TE;D)Z", "changePriority", "getPriority", "LNSObject;", "(Ljava/lang/Object;)D", "relaxPriority", "()Ljava/util/List<TE;>;", "()Ljava/util/Iterator<TE;>;", "grow", "parent", "leftChild", "rightChild", "heapifyUp", "heapifyDown", "swap", "II", "toString", "ILNSString;", "()Ledu/stanford/nlp/util/FixedPrioritiesPriorityQueue<TE;>;", "Ljava/util/List<TE;>;", "<E:Ljava/lang/Object;>Ljava/util/AbstractSet<TE;>;Ledu/stanford/nlp/util/PriorityQueue<TE;>;Ljava/util/Iterator<TE;>;Ljava/io/Serializable;Ljava/lang/Cloneable;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilFixedPrioritiesPriorityQueue = { "FixedPrioritiesPriorityQueue", "edu.stanford.nlp.util", ptrTable, methods, fields, 7, 0x1, 27, 5, -1, -1, -1, 25, -1 };
  return &_EduStanfordNlpUtilFixedPrioritiesPriorityQueue;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self clone];
}

@end

void EduStanfordNlpUtilFixedPrioritiesPriorityQueue_init(EduStanfordNlpUtilFixedPrioritiesPriorityQueue *self) {
  EduStanfordNlpUtilFixedPrioritiesPriorityQueue_initWithInt_(self, 15);
}

EduStanfordNlpUtilFixedPrioritiesPriorityQueue *new_EduStanfordNlpUtilFixedPrioritiesPriorityQueue_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilFixedPrioritiesPriorityQueue, init)
}

EduStanfordNlpUtilFixedPrioritiesPriorityQueue *create_EduStanfordNlpUtilFixedPrioritiesPriorityQueue_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilFixedPrioritiesPriorityQueue, init)
}

void EduStanfordNlpUtilFixedPrioritiesPriorityQueue_initWithInt_(EduStanfordNlpUtilFixedPrioritiesPriorityQueue *self, jint capacity) {
  JavaUtilAbstractSet_init(self);
  jint legalCapacity = 0;
  while (legalCapacity < capacity) {
    legalCapacity = 2 * legalCapacity + 1;
  }
  EduStanfordNlpUtilFixedPrioritiesPriorityQueue_growWithInt_(self, legalCapacity);
}

EduStanfordNlpUtilFixedPrioritiesPriorityQueue *new_EduStanfordNlpUtilFixedPrioritiesPriorityQueue_initWithInt_(jint capacity) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilFixedPrioritiesPriorityQueue, initWithInt_, capacity)
}

EduStanfordNlpUtilFixedPrioritiesPriorityQueue *create_EduStanfordNlpUtilFixedPrioritiesPriorityQueue_initWithInt_(jint capacity) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilFixedPrioritiesPriorityQueue, initWithInt_, capacity)
}

void EduStanfordNlpUtilFixedPrioritiesPriorityQueue_growWithInt_(EduStanfordNlpUtilFixedPrioritiesPriorityQueue *self, jint newCapacity) {
  id<JavaUtilList> newElements = new_JavaUtilArrayList_initWithInt_(newCapacity);
  IOSDoubleArray *newPriorities = [IOSDoubleArray newArrayWithLength:newCapacity];
  if (self->size_ > 0) {
    [newElements addAllWithJavaUtilCollection:self->elements_];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->priorities_, 0, newPriorities, 0, ((IOSDoubleArray *) nil_chk(self->priorities_))->size_);
  }
  self->elements_ = newElements;
  self->priorities_ = newPriorities;
  self->capacity_ = newCapacity;
}

jint EduStanfordNlpUtilFixedPrioritiesPriorityQueue_parentWithInt_(jint loc) {
  EduStanfordNlpUtilFixedPrioritiesPriorityQueue_initialize();
  return (loc - 1) / 2;
}

jint EduStanfordNlpUtilFixedPrioritiesPriorityQueue_leftChildWithInt_(jint loc) {
  EduStanfordNlpUtilFixedPrioritiesPriorityQueue_initialize();
  return 2 * loc + 1;
}

jint EduStanfordNlpUtilFixedPrioritiesPriorityQueue_rightChildWithInt_(jint loc) {
  EduStanfordNlpUtilFixedPrioritiesPriorityQueue_initialize();
  return 2 * loc + 2;
}

void EduStanfordNlpUtilFixedPrioritiesPriorityQueue_heapifyUpWithInt_(EduStanfordNlpUtilFixedPrioritiesPriorityQueue *self, jint loc) {
  if (loc == 0) return;
  jint parent = EduStanfordNlpUtilFixedPrioritiesPriorityQueue_parentWithInt_(loc);
  if (IOSDoubleArray_Get(nil_chk(self->priorities_), loc) > IOSDoubleArray_Get(self->priorities_, parent)) {
    EduStanfordNlpUtilFixedPrioritiesPriorityQueue_swapWithInt_withInt_(self, loc, parent);
    EduStanfordNlpUtilFixedPrioritiesPriorityQueue_heapifyUpWithInt_(self, parent);
  }
}

void EduStanfordNlpUtilFixedPrioritiesPriorityQueue_heapifyDownWithInt_(EduStanfordNlpUtilFixedPrioritiesPriorityQueue *self, jint loc) {
  jint max = loc;
  jint leftChild = EduStanfordNlpUtilFixedPrioritiesPriorityQueue_leftChildWithInt_(loc);
  if (leftChild < [self size]) {
    jdouble priority = IOSDoubleArray_Get(nil_chk(self->priorities_), loc);
    jdouble leftChildPriority = IOSDoubleArray_Get(self->priorities_, leftChild);
    if (leftChildPriority > priority) max = leftChild;
    jint rightChild = EduStanfordNlpUtilFixedPrioritiesPriorityQueue_rightChildWithInt_(loc);
    if (rightChild < [self size]) {
      jdouble rightChildPriority = IOSDoubleArray_Get(nil_chk(self->priorities_), EduStanfordNlpUtilFixedPrioritiesPriorityQueue_rightChildWithInt_(loc));
      if (rightChildPriority > priority && rightChildPriority > leftChildPriority) max = rightChild;
    }
  }
  if (max == loc) return;
  EduStanfordNlpUtilFixedPrioritiesPriorityQueue_swapWithInt_withInt_(self, loc, max);
  EduStanfordNlpUtilFixedPrioritiesPriorityQueue_heapifyDownWithInt_(self, max);
}

void EduStanfordNlpUtilFixedPrioritiesPriorityQueue_swapWithInt_withInt_(EduStanfordNlpUtilFixedPrioritiesPriorityQueue *self, jint loc1, jint loc2) {
  jdouble tempPriority = IOSDoubleArray_Get(nil_chk(self->priorities_), loc1);
  id tempElement = [((id<JavaUtilList>) nil_chk(self->elements_)) getWithInt:loc1];
  *IOSDoubleArray_GetRef(nil_chk(self->priorities_), loc1) = IOSDoubleArray_Get(self->priorities_, loc2);
  (void) [((id<JavaUtilList>) nil_chk(self->elements_)) setWithInt:loc1 withId:[self->elements_ getWithInt:loc2]];
  *IOSDoubleArray_GetRef(nil_chk(self->priorities_), loc2) = tempPriority;
  (void) [((id<JavaUtilList>) nil_chk(self->elements_)) setWithInt:loc2 withId:tempElement];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpUtilFixedPrioritiesPriorityQueue)
