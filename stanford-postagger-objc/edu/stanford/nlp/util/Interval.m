//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/util/Interval.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/util/ErasureUtils.h"
#include "edu/stanford/nlp/util/HasInterval.h"
#include "edu/stanford/nlp/util/Interval.h"
#include "edu/stanford/nlp/util/Pair.h"
#include "java/lang/Comparable.h"
#include "java/lang/Double.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/util/Comparator.h"
#include "java/util/function/Function.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface EduStanfordNlpUtilInterval () {
 @public
  jint flags_;
}

@end

inline jlong EduStanfordNlpUtilInterval_get_serialVersionUID();
#define EduStanfordNlpUtilInterval_serialVersionUID 1LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpUtilInterval, serialVersionUID, jlong)

__attribute__((unused)) static void EduStanfordNlpUtilInterval_RelType_initWithNSString_withInt_(EduStanfordNlpUtilInterval_RelType *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static EduStanfordNlpUtilInterval_RelType *new_EduStanfordNlpUtilInterval_RelType_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

@interface EduStanfordNlpUtilInterval_$Lambda$1 : NSObject < JavaUtilFunctionFunction >

- (id)applyWithId:(id<EduStanfordNlpUtilHasInterval>)inArg;

@end

J2OBJC_STATIC_INIT(EduStanfordNlpUtilInterval_$Lambda$1)

inline EduStanfordNlpUtilInterval_$Lambda$1 *EduStanfordNlpUtilInterval_$Lambda$1_get_instance();
static EduStanfordNlpUtilInterval_$Lambda$1 *EduStanfordNlpUtilInterval_$Lambda$1_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpUtilInterval_$Lambda$1, instance, EduStanfordNlpUtilInterval_$Lambda$1 *)

__attribute__((unused)) static void EduStanfordNlpUtilInterval_$Lambda$1_init(EduStanfordNlpUtilInterval_$Lambda$1 *self);

__attribute__((unused)) static EduStanfordNlpUtilInterval_$Lambda$1 *new_EduStanfordNlpUtilInterval_$Lambda$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpUtilInterval_$Lambda$1 *create_EduStanfordNlpUtilInterval_$Lambda$1_init();

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpUtilInterval)

id<JavaUtilFunctionFunction> EduStanfordNlpUtilInterval_LENGTH_SCORER;

@implementation EduStanfordNlpUtilInterval

- (instancetype)initWithJavaLangComparable:(id<JavaLangComparable>)a
                    withJavaLangComparable:(id<JavaLangComparable>)b
                                   withInt:(jint)flags {
  EduStanfordNlpUtilInterval_initWithJavaLangComparable_withJavaLangComparable_withInt_(self, a, b, flags);
  return self;
}

+ (EduStanfordNlpUtilInterval *)toIntervalWithJavaLangComparable:(id<JavaLangComparable>)a
                                          withJavaLangComparable:(id<JavaLangComparable>)b {
  return EduStanfordNlpUtilInterval_toIntervalWithJavaLangComparable_withJavaLangComparable_(a, b);
}

+ (EduStanfordNlpUtilInterval *)toIntervalWithJavaLangComparable:(id<JavaLangComparable>)a
                                          withJavaLangComparable:(id<JavaLangComparable>)b
                                                         withInt:(jint)flags {
  return EduStanfordNlpUtilInterval_toIntervalWithJavaLangComparable_withJavaLangComparable_withInt_(a, b, flags);
}

+ (EduStanfordNlpUtilInterval *)toValidIntervalWithJavaLangComparable:(id<JavaLangComparable>)a
                                               withJavaLangComparable:(id<JavaLangComparable>)b {
  return EduStanfordNlpUtilInterval_toValidIntervalWithJavaLangComparable_withJavaLangComparable_(a, b);
}

+ (EduStanfordNlpUtilInterval *)toValidIntervalWithJavaLangComparable:(id<JavaLangComparable>)a
                                               withJavaLangComparable:(id<JavaLangComparable>)b
                                                              withInt:(jint)flags {
  return EduStanfordNlpUtilInterval_toValidIntervalWithJavaLangComparable_withJavaLangComparable_withInt_(a, b, flags);
}

- (EduStanfordNlpUtilInterval *)getInterval {
  return self;
}

- (id<JavaLangComparable>)getBegin {
  return first_;
}

- (id<JavaLangComparable>)getEnd {
  return second_;
}

+ (id<JavaLangComparable>)maxWithJavaLangComparable:(id<JavaLangComparable>)a
                             withJavaLangComparable:(id<JavaLangComparable>)b {
  return EduStanfordNlpUtilInterval_maxWithJavaLangComparable_withJavaLangComparable_(a, b);
}

+ (id<JavaLangComparable>)minWithJavaLangComparable:(id<JavaLangComparable>)a
                             withJavaLangComparable:(id<JavaLangComparable>)b {
  return EduStanfordNlpUtilInterval_minWithJavaLangComparable_withJavaLangComparable_(a, b);
}

- (jboolean)containsWithJavaLangComparable:(id<JavaLangComparable>)p {
  jboolean check1 = ([self includesBegin]) ? ([((id<JavaLangComparable>) nil_chk(first_)) compareToWithId:p] <= 0) : ([((id<JavaLangComparable>) nil_chk(first_)) compareToWithId:p] < 0);
  jboolean check2 = ([self includesEnd]) ? ([((id<JavaLangComparable>) nil_chk(second_)) compareToWithId:p] >= 0) : ([((id<JavaLangComparable>) nil_chk(second_)) compareToWithId:p] > 0);
  return (check1 && check2);
}

- (jboolean)containsOpenWithJavaLangComparable:(id<JavaLangComparable>)p {
  jboolean check1 = [((id<JavaLangComparable>) nil_chk(first_)) compareToWithId:p] <= 0;
  jboolean check2 = [((id<JavaLangComparable>) nil_chk(second_)) compareToWithId:p] >= 0;
  return (check1 && check2);
}

- (jboolean)containsWithEduStanfordNlpUtilInterval:(EduStanfordNlpUtilInterval *)other {
  jboolean containsOtherBegin = ([((EduStanfordNlpUtilInterval *) nil_chk(other)) includesBegin]) ? [self containsWithJavaLangComparable:[other getBegin]] : [self containsOpenWithJavaLangComparable:[other getBegin]];
  jboolean containsOtherEnd = ([other includesEnd]) ? [self containsWithJavaLangComparable:[other getEnd]] : [self containsOpenWithJavaLangComparable:[other getEnd]];
  return (containsOtherBegin && containsOtherEnd);
}

- (EduStanfordNlpUtilInterval *)expandWithEduStanfordNlpUtilInterval:(EduStanfordNlpUtilInterval *)other {
  if (other == nil) return self;
  id<JavaLangComparable> a = ((id<JavaLangComparable>) EduStanfordNlpUtilInterval_minWithJavaLangComparable_withJavaLangComparable_(self->first_, other->first_));
  id<JavaLangComparable> b = ((id<JavaLangComparable>) EduStanfordNlpUtilInterval_maxWithJavaLangComparable_withJavaLangComparable_(self->second_, other->second_));
  return EduStanfordNlpUtilInterval_toIntervalWithJavaLangComparable_withJavaLangComparable_(a, b);
}

- (EduStanfordNlpUtilInterval *)intersectWithEduStanfordNlpUtilInterval:(EduStanfordNlpUtilInterval *)other {
  if (other == nil) return nil;
  id<JavaLangComparable> a = ((id<JavaLangComparable>) EduStanfordNlpUtilInterval_maxWithJavaLangComparable_withJavaLangComparable_(self->first_, other->first_));
  id<JavaLangComparable> b = ((id<JavaLangComparable>) EduStanfordNlpUtilInterval_minWithJavaLangComparable_withJavaLangComparable_(self->second_, other->second_));
  return EduStanfordNlpUtilInterval_toIntervalWithJavaLangComparable_withJavaLangComparable_(a, b);
}

- (jboolean)overlapsWithEduStanfordNlpUtilInterval:(EduStanfordNlpUtilInterval *)other {
  if (other == nil) return false;
  jint comp12 = [((id<JavaLangComparable>) nil_chk(self->first_)) compareToWithId:((id<JavaLangComparable>) [other second])];
  jint comp21 = [((id<JavaLangComparable>) nil_chk(self->second_)) compareToWithId:((id<JavaLangComparable>) [other first])];
  if (comp12 > 0 || comp21 < 0) {
    return false;
  }
  else {
    if (comp12 == 0) {
      if (![self includesBegin] || ![other includesEnd]) {
        return false;
      }
    }
    if (comp21 == 0) {
      if (![self includesEnd] || ![other includesBegin]) {
        return false;
      }
    }
    return true;
  }
}

- (jboolean)includesBegin {
  return (flags_ & EduStanfordNlpUtilInterval_INTERVAL_OPEN_BEGIN) == 0;
}

- (jboolean)includesEnd {
  return (flags_ & EduStanfordNlpUtilInterval_INTERVAL_OPEN_END) == 0;
}

- (jboolean)isIntervalComparableWithEduStanfordNlpUtilInterval:(EduStanfordNlpUtilInterval *)other {
  jint flags = [self getRelationFlagsWithEduStanfordNlpUtilInterval:other];
  if (EduStanfordNlpUtilInterval_checkMultipleBitSetWithInt_(flags & EduStanfordNlpUtilInterval_REL_FLAGS_INTERVAL_UNKNOWN)) {
    return false;
  }
  return EduStanfordNlpUtilInterval_checkFlagSetWithInt_withInt_(flags, EduStanfordNlpUtilInterval_REL_FLAGS_INTERVAL_BEFORE) || EduStanfordNlpUtilInterval_checkFlagSetWithInt_withInt_(flags, EduStanfordNlpUtilInterval_REL_FLAGS_INTERVAL_AFTER);
}

- (jint)compareIntervalOrderWithEduStanfordNlpUtilInterval:(EduStanfordNlpUtilInterval *)other {
  jint flags = [self getRelationFlagsWithEduStanfordNlpUtilInterval:other];
  if (EduStanfordNlpUtilInterval_checkFlagExclusiveSetWithInt_withInt_withInt_(flags, EduStanfordNlpUtilInterval_REL_FLAGS_INTERVAL_BEFORE, EduStanfordNlpUtilInterval_REL_FLAGS_INTERVAL_UNKNOWN)) {
    return -1;
  }
  else if (EduStanfordNlpUtilInterval_checkFlagExclusiveSetWithInt_withInt_withInt_(flags, EduStanfordNlpUtilInterval_REL_FLAGS_INTERVAL_AFTER, EduStanfordNlpUtilInterval_REL_FLAGS_INTERVAL_UNKNOWN)) {
    return 1;
  }
  else {
    return 0;
  }
}

+ (jint)toRelFlagsWithInt:(jint)comp
                  withInt:(jint)shift {
  return EduStanfordNlpUtilInterval_toRelFlagsWithInt_withInt_(comp, shift);
}

- (jint)getRelationFlagsWithEduStanfordNlpUtilInterval:(EduStanfordNlpUtilInterval *)other {
  if (other == nil) return 0;
  jint flags = 0;
  jint comp11 = [((id<JavaLangComparable>) nil_chk(self->first_)) compareToWithId:((id<JavaLangComparable>) [other first])];
  flags |= EduStanfordNlpUtilInterval_toRelFlagsWithInt_withInt_(comp11, EduStanfordNlpUtilInterval_REL_FLAGS_SS_SHIFT);
  jint comp22 = [((id<JavaLangComparable>) nil_chk(self->second_)) compareToWithId:((id<JavaLangComparable>) [other second])];
  flags |= EduStanfordNlpUtilInterval_toRelFlagsWithInt_withInt_(comp22, EduStanfordNlpUtilInterval_REL_FLAGS_EE_SHIFT);
  jint comp12 = [((id<JavaLangComparable>) nil_chk(self->first_)) compareToWithId:((id<JavaLangComparable>) [other second])];
  flags |= EduStanfordNlpUtilInterval_toRelFlagsWithInt_withInt_(comp12, EduStanfordNlpUtilInterval_REL_FLAGS_SE_SHIFT);
  jint comp21 = [((id<JavaLangComparable>) nil_chk(self->second_)) compareToWithId:((id<JavaLangComparable>) [other first])];
  flags |= EduStanfordNlpUtilInterval_toRelFlagsWithInt_withInt_(comp21, EduStanfordNlpUtilInterval_REL_FLAGS_ES_SHIFT);
  flags = EduStanfordNlpUtilInterval_addIntervalRelationFlagsWithInt_withBoolean_(flags, false);
  return flags;
}

+ (jint)addIntervalRelationFlagsWithInt:(jint)flags
                            withBoolean:(jboolean)checkFuzzy {
  return EduStanfordNlpUtilInterval_addIntervalRelationFlagsWithInt_withBoolean_(flags, checkFuzzy);
}

+ (jint)extractRelationSubflagsWithInt:(jint)flags
                               withInt:(jint)shift {
  return EduStanfordNlpUtilInterval_extractRelationSubflagsWithInt_withInt_(flags, shift);
}

+ (jboolean)checkMultipleBitSetWithInt:(jint)flags {
  return EduStanfordNlpUtilInterval_checkMultipleBitSetWithInt_(flags);
}

+ (jboolean)checkFlagSetWithInt:(jint)flags
                        withInt:(jint)flag {
  return EduStanfordNlpUtilInterval_checkFlagSetWithInt_withInt_(flags, flag);
}

+ (jboolean)checkFlagExclusiveSetWithInt:(jint)flags
                                 withInt:(jint)flag
                                 withInt:(jint)mask {
  return EduStanfordNlpUtilInterval_checkFlagExclusiveSetWithInt_withInt_withInt_(flags, flag, mask);
}

- (EduStanfordNlpUtilInterval_RelType *)getRelationWithEduStanfordNlpUtilInterval:(EduStanfordNlpUtilInterval *)other {
  if (other == nil) return JreLoadEnum(EduStanfordNlpUtilInterval_RelType, NONE);
  jint comp11 = [((id<JavaLangComparable>) nil_chk(self->first_)) compareToWithId:((id<JavaLangComparable>) [other first])];
  jint comp22 = [((id<JavaLangComparable>) nil_chk(self->second_)) compareToWithId:((id<JavaLangComparable>) [other second])];
  if (comp11 == 0) {
    if (comp22 == 0) {
      return JreLoadEnum(EduStanfordNlpUtilInterval_RelType, EQUAL);
    }
    if (comp22 < 0) {
      return JreLoadEnum(EduStanfordNlpUtilInterval_RelType, INSIDE);
    }
    else {
      return JreLoadEnum(EduStanfordNlpUtilInterval_RelType, CONTAIN);
    }
  }
  else if (comp22 == 0) {
    if (comp11 < 0) {
      return JreLoadEnum(EduStanfordNlpUtilInterval_RelType, CONTAIN);
    }
    else {
      return JreLoadEnum(EduStanfordNlpUtilInterval_RelType, INSIDE);
    }
  }
  else if (comp11 > 0 && comp22 < 0) {
    return JreLoadEnum(EduStanfordNlpUtilInterval_RelType, INSIDE);
  }
  else if (comp11 < 0 && comp22 > 0) {
    return JreLoadEnum(EduStanfordNlpUtilInterval_RelType, CONTAIN);
  }
  else {
    jint comp12 = [((id<JavaLangComparable>) nil_chk(self->first_)) compareToWithId:((id<JavaLangComparable>) [other second])];
    jint comp21 = [((id<JavaLangComparable>) nil_chk(self->second_)) compareToWithId:((id<JavaLangComparable>) [other first])];
    if (comp12 > 0) {
      return JreLoadEnum(EduStanfordNlpUtilInterval_RelType, AFTER);
    }
    else if (comp21 < 0) {
      return JreLoadEnum(EduStanfordNlpUtilInterval_RelType, BEFORE);
    }
    else if (comp12 == 0) {
      return JreLoadEnum(EduStanfordNlpUtilInterval_RelType, BEGIN_MEET_END);
    }
    else if (comp21 == 0) {
      return JreLoadEnum(EduStanfordNlpUtilInterval_RelType, END_MEET_BEGIN);
    }
    else {
      return JreLoadEnum(EduStanfordNlpUtilInterval_RelType, OVERLAP);
    }
  }
}

- (jboolean)isEqual:(id)o {
  if (self == o) {
    return true;
  }
  if (o == nil || [self getClass] != (id) [o getClass]) {
    return false;
  }
  if (![super isEqual:o]) {
    return false;
  }
  EduStanfordNlpUtilInterval *interval = (EduStanfordNlpUtilInterval *) cast_chk(o, [EduStanfordNlpUtilInterval class]);
  if (flags_ != interval->flags_) {
    return false;
  }
  return true;
}

- (NSUInteger)hash {
  jint result = ((jint) [super hash]);
  result = 31 * result + flags_;
  return result;
}

+ (jdouble)getMidPointWithEduStanfordNlpUtilInterval:(EduStanfordNlpUtilInterval *)interval {
  return EduStanfordNlpUtilInterval_getMidPointWithEduStanfordNlpUtilInterval_(interval);
}

+ (jdouble)getRadiusWithEduStanfordNlpUtilInterval:(EduStanfordNlpUtilInterval *)interval {
  return EduStanfordNlpUtilInterval_getRadiusWithEduStanfordNlpUtilInterval_(interval);
}

+ (id<JavaUtilComparator>)lengthEndpointsComparator {
  return EduStanfordNlpUtilInterval_lengthEndpointsComparator();
}

+ (id<JavaUtilFunctionFunction>)lengthScorer {
  return EduStanfordNlpUtilInterval_lengthScorer();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, 1, -1, -1 },
    { NULL, "LEduStanfordNlpUtilInterval;", 0x9, 2, 3, -1, 4, -1, -1 },
    { NULL, "LEduStanfordNlpUtilInterval;", 0x9, 2, 0, -1, 5, -1, -1 },
    { NULL, "LEduStanfordNlpUtilInterval;", 0x9, 6, 3, -1, 4, -1, -1 },
    { NULL, "LEduStanfordNlpUtilInterval;", 0x9, 6, 0, -1, 5, -1, -1 },
    { NULL, "LEduStanfordNlpUtilInterval;", 0x1, -1, -1, -1, 7, -1, -1 },
    { NULL, "LJavaLangComparable;", 0x1, -1, -1, -1, 8, -1, -1 },
    { NULL, "LJavaLangComparable;", 0x1, -1, -1, -1, 8, -1, -1 },
    { NULL, "LJavaLangComparable;", 0xc, 9, 3, -1, 10, -1, -1 },
    { NULL, "LJavaLangComparable;", 0xc, 11, 3, -1, 10, -1, -1 },
    { NULL, "Z", 0x1, 12, 13, -1, 14, -1, -1 },
    { NULL, "Z", 0x1, 15, 13, -1, 14, -1, -1 },
    { NULL, "Z", 0x1, 12, 16, -1, 17, -1, -1 },
    { NULL, "LEduStanfordNlpUtilInterval;", 0x1, 18, 16, -1, 19, -1, -1 },
    { NULL, "LEduStanfordNlpUtilInterval;", 0x1, 20, 16, -1, 19, -1, -1 },
    { NULL, "Z", 0x1, 21, 16, -1, 17, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 22, 16, -1, 17, -1, -1 },
    { NULL, "I", 0x1, 23, 16, -1, 24, -1, -1 },
    { NULL, "I", 0xc, 25, 26, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 27, 16, -1, 24, -1, -1 },
    { NULL, "I", 0xc, 28, 29, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 30, 26, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 31, 32, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 33, 26, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 34, 35, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpUtilInterval_RelType;", 0x1, 36, 16, -1, 37, -1, -1 },
    { NULL, "Z", 0x1, 38, 39, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 40, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 41, 16, -1, 42, -1, -1 },
    { NULL, "D", 0x9, 43, 16, -1, 42, -1, -1 },
    { NULL, "LJavaUtilComparator;", 0x9, -1, -1, -1, 44, -1, -1 },
    { NULL, "LJavaUtilFunctionFunction;", 0x9, -1, -1, -1, 45, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaLangComparable:withJavaLangComparable:withInt:);
  methods[1].selector = @selector(toIntervalWithJavaLangComparable:withJavaLangComparable:);
  methods[2].selector = @selector(toIntervalWithJavaLangComparable:withJavaLangComparable:withInt:);
  methods[3].selector = @selector(toValidIntervalWithJavaLangComparable:withJavaLangComparable:);
  methods[4].selector = @selector(toValidIntervalWithJavaLangComparable:withJavaLangComparable:withInt:);
  methods[5].selector = @selector(getInterval);
  methods[6].selector = @selector(getBegin);
  methods[7].selector = @selector(getEnd);
  methods[8].selector = @selector(maxWithJavaLangComparable:withJavaLangComparable:);
  methods[9].selector = @selector(minWithJavaLangComparable:withJavaLangComparable:);
  methods[10].selector = @selector(containsWithJavaLangComparable:);
  methods[11].selector = @selector(containsOpenWithJavaLangComparable:);
  methods[12].selector = @selector(containsWithEduStanfordNlpUtilInterval:);
  methods[13].selector = @selector(expandWithEduStanfordNlpUtilInterval:);
  methods[14].selector = @selector(intersectWithEduStanfordNlpUtilInterval:);
  methods[15].selector = @selector(overlapsWithEduStanfordNlpUtilInterval:);
  methods[16].selector = @selector(includesBegin);
  methods[17].selector = @selector(includesEnd);
  methods[18].selector = @selector(isIntervalComparableWithEduStanfordNlpUtilInterval:);
  methods[19].selector = @selector(compareIntervalOrderWithEduStanfordNlpUtilInterval:);
  methods[20].selector = @selector(toRelFlagsWithInt:withInt:);
  methods[21].selector = @selector(getRelationFlagsWithEduStanfordNlpUtilInterval:);
  methods[22].selector = @selector(addIntervalRelationFlagsWithInt:withBoolean:);
  methods[23].selector = @selector(extractRelationSubflagsWithInt:withInt:);
  methods[24].selector = @selector(checkMultipleBitSetWithInt:);
  methods[25].selector = @selector(checkFlagSetWithInt:withInt:);
  methods[26].selector = @selector(checkFlagExclusiveSetWithInt:withInt:withInt:);
  methods[27].selector = @selector(getRelationWithEduStanfordNlpUtilInterval:);
  methods[28].selector = @selector(isEqual:);
  methods[29].selector = @selector(hash);
  methods[30].selector = @selector(getMidPointWithEduStanfordNlpUtilInterval:);
  methods[31].selector = @selector(getRadiusWithEduStanfordNlpUtilInterval:);
  methods[32].selector = @selector(lengthEndpointsComparator);
  methods[33].selector = @selector(lengthScorer);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INTERVAL_OPEN_BEGIN", "I", .constantValue.asInt = EduStanfordNlpUtilInterval_INTERVAL_OPEN_BEGIN, 0x19, -1, -1, -1, -1 },
    { "INTERVAL_OPEN_END", "I", .constantValue.asInt = EduStanfordNlpUtilInterval_INTERVAL_OPEN_END, 0x19, -1, -1, -1, -1 },
    { "flags_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "REL_FLAGS_SAME", "I", .constantValue.asInt = EduStanfordNlpUtilInterval_REL_FLAGS_SAME, 0x1c, -1, -1, -1, -1 },
    { "REL_FLAGS_BEFORE", "I", .constantValue.asInt = EduStanfordNlpUtilInterval_REL_FLAGS_BEFORE, 0x1c, -1, -1, -1, -1 },
    { "REL_FLAGS_AFTER", "I", .constantValue.asInt = EduStanfordNlpUtilInterval_REL_FLAGS_AFTER, 0x1c, -1, -1, -1, -1 },
    { "REL_FLAGS_UNKNOWN", "I", .constantValue.asInt = EduStanfordNlpUtilInterval_REL_FLAGS_UNKNOWN, 0x1c, -1, -1, -1, -1 },
    { "REL_FLAGS_SS_SHIFT", "I", .constantValue.asInt = EduStanfordNlpUtilInterval_REL_FLAGS_SS_SHIFT, 0x1c, -1, -1, -1, -1 },
    { "REL_FLAGS_SE_SHIFT", "I", .constantValue.asInt = EduStanfordNlpUtilInterval_REL_FLAGS_SE_SHIFT, 0x1c, -1, -1, -1, -1 },
    { "REL_FLAGS_ES_SHIFT", "I", .constantValue.asInt = EduStanfordNlpUtilInterval_REL_FLAGS_ES_SHIFT, 0x1c, -1, -1, -1, -1 },
    { "REL_FLAGS_EE_SHIFT", "I", .constantValue.asInt = EduStanfordNlpUtilInterval_REL_FLAGS_EE_SHIFT, 0x1c, -1, -1, -1, -1 },
    { "REL_FLAGS_SS_SAME", "I", .constantValue.asInt = EduStanfordNlpUtilInterval_REL_FLAGS_SS_SAME, 0x19, -1, -1, -1, -1 },
    { "REL_FLAGS_SS_BEFORE", "I", .constantValue.asInt = EduStanfordNlpUtilInterval_REL_FLAGS_SS_BEFORE, 0x19, -1, -1, -1, -1 },
    { "REL_FLAGS_SS_AFTER", "I", .constantValue.asInt = EduStanfordNlpUtilInterval_REL_FLAGS_SS_AFTER, 0x19, -1, -1, -1, -1 },
    { "REL_FLAGS_SS_UNKNOWN", "I", .constantValue.asInt = EduStanfordNlpUtilInterval_REL_FLAGS_SS_UNKNOWN, 0x19, -1, -1, -1, -1 },
    { "REL_FLAGS_SE_SAME", "I", .constantValue.asInt = EduStanfordNlpUtilInterval_REL_FLAGS_SE_SAME, 0x19, -1, -1, -1, -1 },
    { "REL_FLAGS_SE_BEFORE", "I", .constantValue.asInt = EduStanfordNlpUtilInterval_REL_FLAGS_SE_BEFORE, 0x19, -1, -1, -1, -1 },
    { "REL_FLAGS_SE_AFTER", "I", .constantValue.asInt = EduStanfordNlpUtilInterval_REL_FLAGS_SE_AFTER, 0x19, -1, -1, -1, -1 },
    { "REL_FLAGS_SE_UNKNOWN", "I", .constantValue.asInt = EduStanfordNlpUtilInterval_REL_FLAGS_SE_UNKNOWN, 0x19, -1, -1, -1, -1 },
    { "REL_FLAGS_ES_SAME", "I", .constantValue.asInt = EduStanfordNlpUtilInterval_REL_FLAGS_ES_SAME, 0x19, -1, -1, -1, -1 },
    { "REL_FLAGS_ES_BEFORE", "I", .constantValue.asInt = EduStanfordNlpUtilInterval_REL_FLAGS_ES_BEFORE, 0x19, -1, -1, -1, -1 },
    { "REL_FLAGS_ES_AFTER", "I", .constantValue.asInt = EduStanfordNlpUtilInterval_REL_FLAGS_ES_AFTER, 0x19, -1, -1, -1, -1 },
    { "REL_FLAGS_ES_UNKNOWN", "I", .constantValue.asInt = EduStanfordNlpUtilInterval_REL_FLAGS_ES_UNKNOWN, 0x19, -1, -1, -1, -1 },
    { "REL_FLAGS_EE_SAME", "I", .constantValue.asInt = EduStanfordNlpUtilInterval_REL_FLAGS_EE_SAME, 0x19, -1, -1, -1, -1 },
    { "REL_FLAGS_EE_BEFORE", "I", .constantValue.asInt = EduStanfordNlpUtilInterval_REL_FLAGS_EE_BEFORE, 0x19, -1, -1, -1, -1 },
    { "REL_FLAGS_EE_AFTER", "I", .constantValue.asInt = EduStanfordNlpUtilInterval_REL_FLAGS_EE_AFTER, 0x19, -1, -1, -1, -1 },
    { "REL_FLAGS_EE_UNKNOWN", "I", .constantValue.asInt = EduStanfordNlpUtilInterval_REL_FLAGS_EE_UNKNOWN, 0x19, -1, -1, -1, -1 },
    { "REL_FLAGS_INTERVAL_SAME", "I", .constantValue.asInt = EduStanfordNlpUtilInterval_REL_FLAGS_INTERVAL_SAME, 0x19, -1, -1, -1, -1 },
    { "REL_FLAGS_INTERVAL_BEFORE", "I", .constantValue.asInt = EduStanfordNlpUtilInterval_REL_FLAGS_INTERVAL_BEFORE, 0x19, -1, -1, -1, -1 },
    { "REL_FLAGS_INTERVAL_AFTER", "I", .constantValue.asInt = EduStanfordNlpUtilInterval_REL_FLAGS_INTERVAL_AFTER, 0x19, -1, -1, -1, -1 },
    { "REL_FLAGS_INTERVAL_OVERLAP", "I", .constantValue.asInt = EduStanfordNlpUtilInterval_REL_FLAGS_INTERVAL_OVERLAP, 0x19, -1, -1, -1, -1 },
    { "REL_FLAGS_INTERVAL_INSIDE", "I", .constantValue.asInt = EduStanfordNlpUtilInterval_REL_FLAGS_INTERVAL_INSIDE, 0x19, -1, -1, -1, -1 },
    { "REL_FLAGS_INTERVAL_CONTAIN", "I", .constantValue.asInt = EduStanfordNlpUtilInterval_REL_FLAGS_INTERVAL_CONTAIN, 0x19, -1, -1, -1, -1 },
    { "REL_FLAGS_INTERVAL_UNKNOWN", "I", .constantValue.asInt = EduStanfordNlpUtilInterval_REL_FLAGS_INTERVAL_UNKNOWN, 0x19, -1, -1, -1, -1 },
    { "REL_FLAGS_INTERVAL_ALMOST_SAME", "I", .constantValue.asInt = EduStanfordNlpUtilInterval_REL_FLAGS_INTERVAL_ALMOST_SAME, 0x19, -1, -1, -1, -1 },
    { "REL_FLAGS_INTERVAL_ALMOST_BEFORE", "I", .constantValue.asInt = EduStanfordNlpUtilInterval_REL_FLAGS_INTERVAL_ALMOST_BEFORE, 0x19, -1, -1, -1, -1 },
    { "REL_FLAGS_INTERVAL_ALMOST_AFTER", "I", .constantValue.asInt = EduStanfordNlpUtilInterval_REL_FLAGS_INTERVAL_ALMOST_AFTER, 0x19, -1, -1, -1, -1 },
    { "REL_FLAGS_INTERVAL_FUZZY", "I", .constantValue.asInt = EduStanfordNlpUtilInterval_REL_FLAGS_INTERVAL_FUZZY, 0x19, -1, -1, -1, -1 },
    { "LENGTH_SCORER", "LJavaUtilFunctionFunction;", .constantValue.asLong = 0, 0x19, -1, 46, 47, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpUtilInterval_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangComparable;LJavaLangComparable;I", "(TE;TE;I)V", "toInterval", "LJavaLangComparable;LJavaLangComparable;", "<E::Ljava/lang/Comparable<TE;>;>(TE;TE;)Ledu/stanford/nlp/util/Interval<TE;>;", "<E::Ljava/lang/Comparable<TE;>;>(TE;TE;I)Ledu/stanford/nlp/util/Interval<TE;>;", "toValidInterval", "()Ledu/stanford/nlp/util/Interval<TE;>;", "()TE;", "max", "<E::Ljava/lang/Comparable<TE;>;>(TE;TE;)TE;", "min", "contains", "LJavaLangComparable;", "(TE;)Z", "containsOpen", "LEduStanfordNlpUtilInterval;", "(Ledu/stanford/nlp/util/Interval<TE;>;)Z", "expand", "(Ledu/stanford/nlp/util/Interval<TE;>;)Ledu/stanford/nlp/util/Interval;", "intersect", "overlaps", "isIntervalComparable", "compareIntervalOrder", "(Ledu/stanford/nlp/util/Interval<TE;>;)I", "toRelFlags", "II", "getRelationFlags", "addIntervalRelationFlags", "IZ", "extractRelationSubflags", "checkMultipleBitSet", "I", "checkFlagSet", "checkFlagExclusiveSet", "III", "getRelation", "(Ledu/stanford/nlp/util/Interval<TE;>;)Ledu/stanford/nlp/util/Interval$RelType;", "equals", "LNSObject;", "hashCode", "getMidPoint", "(Ledu/stanford/nlp/util/Interval<Ljava/lang/Integer;>;)D", "getRadius", "<T::Ledu/stanford/nlp/util/HasInterval<Ljava/lang/Integer;>;>()Ljava/util/Comparator<TT;>;", "<T::Ledu/stanford/nlp/util/HasInterval<Ljava/lang/Integer;>;>()Ljava/util/function/Function<TT;Ljava/lang/Double;>;", &EduStanfordNlpUtilInterval_LENGTH_SCORER, "Ljava/util/function/Function<Ledu/stanford/nlp/util/HasInterval<Ljava/lang/Integer;>;Ljava/lang/Double;>;", "LEduStanfordNlpUtilInterval_RelType;", "<E::Ljava/lang/Comparable<TE;>;>Ledu/stanford/nlp/util/Pair<TE;TE;>;Ledu/stanford/nlp/util/HasInterval<TE;>;Ljava/io/Serializable;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilInterval = { "Interval", "edu.stanford.nlp.util", ptrTable, methods, fields, 7, 0x1, 34, 40, -1, 48, -1, 49, -1 };
  return &_EduStanfordNlpUtilInterval;
}

+ (void)initialize {
  if (self == [EduStanfordNlpUtilInterval class]) {
    EduStanfordNlpUtilInterval_LENGTH_SCORER = JreLoadStatic(EduStanfordNlpUtilInterval_$Lambda$1, instance);
    J2OBJC_SET_INITIALIZED(EduStanfordNlpUtilInterval)
  }
}

@end

void EduStanfordNlpUtilInterval_initWithJavaLangComparable_withJavaLangComparable_withInt_(EduStanfordNlpUtilInterval *self, id<JavaLangComparable> a, id<JavaLangComparable> b, jint flags) {
  EduStanfordNlpUtilPair_initWithId_withId_(self, a, b);
  self->flags_ = flags;
  jint comp = [((id<JavaLangComparable>) nil_chk(a)) compareToWithId:b];
  if (comp > 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@C@", @"Invalid interval: ", a, ',', b));
  }
}

EduStanfordNlpUtilInterval *new_EduStanfordNlpUtilInterval_initWithJavaLangComparable_withJavaLangComparable_withInt_(id<JavaLangComparable> a, id<JavaLangComparable> b, jint flags) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilInterval, initWithJavaLangComparable_withJavaLangComparable_withInt_, a, b, flags)
}

EduStanfordNlpUtilInterval *create_EduStanfordNlpUtilInterval_initWithJavaLangComparable_withJavaLangComparable_withInt_(id<JavaLangComparable> a, id<JavaLangComparable> b, jint flags) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilInterval, initWithJavaLangComparable_withJavaLangComparable_withInt_, a, b, flags)
}

EduStanfordNlpUtilInterval *EduStanfordNlpUtilInterval_toIntervalWithJavaLangComparable_withJavaLangComparable_(id<JavaLangComparable> a, id<JavaLangComparable> b) {
  EduStanfordNlpUtilInterval_initialize();
  return EduStanfordNlpUtilInterval_toIntervalWithJavaLangComparable_withJavaLangComparable_withInt_(a, b, 0);
}

EduStanfordNlpUtilInterval *EduStanfordNlpUtilInterval_toIntervalWithJavaLangComparable_withJavaLangComparable_withInt_(id<JavaLangComparable> a, id<JavaLangComparable> b, jint flags) {
  EduStanfordNlpUtilInterval_initialize();
  jint comp = [((id<JavaLangComparable>) nil_chk(a)) compareToWithId:b];
  if (comp <= 0) {
    return new_EduStanfordNlpUtilInterval_initWithJavaLangComparable_withJavaLangComparable_withInt_(a, b, flags);
  }
  else {
    return nil;
  }
}

EduStanfordNlpUtilInterval *EduStanfordNlpUtilInterval_toValidIntervalWithJavaLangComparable_withJavaLangComparable_(id<JavaLangComparable> a, id<JavaLangComparable> b) {
  EduStanfordNlpUtilInterval_initialize();
  return EduStanfordNlpUtilInterval_toValidIntervalWithJavaLangComparable_withJavaLangComparable_withInt_(a, b, 0);
}

EduStanfordNlpUtilInterval *EduStanfordNlpUtilInterval_toValidIntervalWithJavaLangComparable_withJavaLangComparable_withInt_(id<JavaLangComparable> a, id<JavaLangComparable> b, jint flags) {
  EduStanfordNlpUtilInterval_initialize();
  jint comp = [((id<JavaLangComparable>) nil_chk(a)) compareToWithId:b];
  if (comp <= 0) {
    return new_EduStanfordNlpUtilInterval_initWithJavaLangComparable_withJavaLangComparable_withInt_(a, b, flags);
  }
  else {
    return new_EduStanfordNlpUtilInterval_initWithJavaLangComparable_withJavaLangComparable_withInt_(b, a, flags);
  }
}

id<JavaLangComparable> EduStanfordNlpUtilInterval_maxWithJavaLangComparable_withJavaLangComparable_(id<JavaLangComparable> a, id<JavaLangComparable> b) {
  EduStanfordNlpUtilInterval_initialize();
  jint comp = [((id<JavaLangComparable>) nil_chk(a)) compareToWithId:b];
  return (comp > 0) ? a : b;
}

id<JavaLangComparable> EduStanfordNlpUtilInterval_minWithJavaLangComparable_withJavaLangComparable_(id<JavaLangComparable> a, id<JavaLangComparable> b) {
  EduStanfordNlpUtilInterval_initialize();
  jint comp = [((id<JavaLangComparable>) nil_chk(a)) compareToWithId:b];
  return (comp < 0) ? a : b;
}

jint EduStanfordNlpUtilInterval_toRelFlagsWithInt_withInt_(jint comp, jint shift) {
  EduStanfordNlpUtilInterval_initialize();
  jint flags = 0;
  if (comp == 0) {
    flags = EduStanfordNlpUtilInterval_REL_FLAGS_SAME;
  }
  else if (comp > 0) {
    flags = EduStanfordNlpUtilInterval_REL_FLAGS_AFTER;
  }
  else {
    flags = EduStanfordNlpUtilInterval_REL_FLAGS_BEFORE;
  }
  flags = JreLShift32(flags, shift);
  return flags;
}

jint EduStanfordNlpUtilInterval_addIntervalRelationFlagsWithInt_withBoolean_(jint flags, jboolean checkFuzzy) {
  EduStanfordNlpUtilInterval_initialize();
  jint f11 = EduStanfordNlpUtilInterval_extractRelationSubflagsWithInt_withInt_(flags, EduStanfordNlpUtilInterval_REL_FLAGS_SS_SHIFT);
  jint f22 = EduStanfordNlpUtilInterval_extractRelationSubflagsWithInt_withInt_(flags, EduStanfordNlpUtilInterval_REL_FLAGS_EE_SHIFT);
  jint f12 = EduStanfordNlpUtilInterval_extractRelationSubflagsWithInt_withInt_(flags, EduStanfordNlpUtilInterval_REL_FLAGS_SE_SHIFT);
  jint f21 = EduStanfordNlpUtilInterval_extractRelationSubflagsWithInt_withInt_(flags, EduStanfordNlpUtilInterval_REL_FLAGS_ES_SHIFT);
  if (checkFuzzy) {
    jboolean isFuzzy = EduStanfordNlpUtilInterval_checkMultipleBitSetWithInt_(f11) || EduStanfordNlpUtilInterval_checkMultipleBitSetWithInt_(f12) || EduStanfordNlpUtilInterval_checkMultipleBitSetWithInt_(f21) || EduStanfordNlpUtilInterval_checkMultipleBitSetWithInt_(f22);
    if (isFuzzy) {
      flags |= EduStanfordNlpUtilInterval_REL_FLAGS_INTERVAL_FUZZY;
    }
  }
  if (((f11 & EduStanfordNlpUtilInterval_REL_FLAGS_SAME) != 0) && ((f22 & EduStanfordNlpUtilInterval_REL_FLAGS_SAME) != 0)) {
    flags |= EduStanfordNlpUtilInterval_REL_FLAGS_INTERVAL_SAME;
  }
  if (((f21 & EduStanfordNlpUtilInterval_REL_FLAGS_BEFORE) != 0)) {
    flags |= EduStanfordNlpUtilInterval_REL_FLAGS_INTERVAL_BEFORE;
  }
  if (((f12 & EduStanfordNlpUtilInterval_REL_FLAGS_AFTER) != 0)) {
    flags |= EduStanfordNlpUtilInterval_REL_FLAGS_INTERVAL_AFTER;
  }
  if (((f11 & (EduStanfordNlpUtilInterval_REL_FLAGS_SAME | EduStanfordNlpUtilInterval_REL_FLAGS_AFTER)) != 0) && ((f12 & (EduStanfordNlpUtilInterval_REL_FLAGS_SAME | EduStanfordNlpUtilInterval_REL_FLAGS_BEFORE)) != 0)) {
    flags |= EduStanfordNlpUtilInterval_REL_FLAGS_INTERVAL_OVERLAP;
  }
  if (((f11 & (EduStanfordNlpUtilInterval_REL_FLAGS_SAME | EduStanfordNlpUtilInterval_REL_FLAGS_BEFORE)) != 0) && ((f21 & (EduStanfordNlpUtilInterval_REL_FLAGS_SAME | EduStanfordNlpUtilInterval_REL_FLAGS_AFTER)) != 0)) {
    flags |= EduStanfordNlpUtilInterval_REL_FLAGS_INTERVAL_OVERLAP;
  }
  if (((f11 & (EduStanfordNlpUtilInterval_REL_FLAGS_SAME | EduStanfordNlpUtilInterval_REL_FLAGS_AFTER)) != 0) && ((f22 & (EduStanfordNlpUtilInterval_REL_FLAGS_SAME | EduStanfordNlpUtilInterval_REL_FLAGS_BEFORE)) != 0)) {
    flags |= EduStanfordNlpUtilInterval_REL_FLAGS_INTERVAL_INSIDE;
  }
  if (((f11 & (EduStanfordNlpUtilInterval_REL_FLAGS_SAME | EduStanfordNlpUtilInterval_REL_FLAGS_BEFORE)) != 0) && ((f22 & (EduStanfordNlpUtilInterval_REL_FLAGS_SAME | EduStanfordNlpUtilInterval_REL_FLAGS_AFTER)) != 0)) {
    flags |= EduStanfordNlpUtilInterval_REL_FLAGS_INTERVAL_CONTAIN;
  }
  return flags;
}

jint EduStanfordNlpUtilInterval_extractRelationSubflagsWithInt_withInt_(jint flags, jint shift) {
  EduStanfordNlpUtilInterval_initialize();
  return (JreRShift32(flags, shift)) & (jint) 0xf;
}

jboolean EduStanfordNlpUtilInterval_checkMultipleBitSetWithInt_(jint flags) {
  EduStanfordNlpUtilInterval_initialize();
  jboolean set = false;
  while (flags != 0) {
    if ((flags & (jint) 0x01) != 0) {
      if (set) {
        return false;
      }
      else {
        set = true;
      }
    }
    flags = JreRShift32(flags, 1);
  }
  return false;
}

jboolean EduStanfordNlpUtilInterval_checkFlagSetWithInt_withInt_(jint flags, jint flag) {
  EduStanfordNlpUtilInterval_initialize();
  return ((flags & flag) != 0);
}

jboolean EduStanfordNlpUtilInterval_checkFlagExclusiveSetWithInt_withInt_withInt_(jint flags, jint flag, jint mask) {
  EduStanfordNlpUtilInterval_initialize();
  jint f = flags & flag;
  if (f != 0) {
    return (flags & mask & ~flag) == 0;
  }
  else {
    return false;
  }
}

jdouble EduStanfordNlpUtilInterval_getMidPointWithEduStanfordNlpUtilInterval_(EduStanfordNlpUtilInterval *interval) {
  EduStanfordNlpUtilInterval_initialize();
  return ([((JavaLangInteger *) nil_chk([((EduStanfordNlpUtilInterval *) nil_chk(interval)) getBegin])) intValue] + [((JavaLangInteger *) nil_chk([interval getEnd])) intValue]) / 2.0;
}

jdouble EduStanfordNlpUtilInterval_getRadiusWithEduStanfordNlpUtilInterval_(EduStanfordNlpUtilInterval *interval) {
  EduStanfordNlpUtilInterval_initialize();
  return ([((JavaLangInteger *) nil_chk([((EduStanfordNlpUtilInterval *) nil_chk(interval)) getEnd])) intValue] - [((JavaLangInteger *) nil_chk([interval getBegin])) intValue]) / 2.0;
}

id<JavaUtilComparator> EduStanfordNlpUtilInterval_lengthEndpointsComparator() {
  EduStanfordNlpUtilInterval_initialize();
  return EduStanfordNlpUtilErasureUtils_uncheckedCastWithId_(JreLoadStatic(EduStanfordNlpUtilHasInterval, LENGTH_ENDPOINTS_COMPARATOR));
}

id<JavaUtilFunctionFunction> EduStanfordNlpUtilInterval_lengthScorer() {
  EduStanfordNlpUtilInterval_initialize();
  return EduStanfordNlpUtilErasureUtils_uncheckedCastWithId_(EduStanfordNlpUtilInterval_LENGTH_SCORER);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpUtilInterval)

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpUtilInterval_RelType)

EduStanfordNlpUtilInterval_RelType *EduStanfordNlpUtilInterval_RelType_values_[10];

@implementation EduStanfordNlpUtilInterval_RelType

+ (IOSObjectArray *)values {
  return EduStanfordNlpUtilInterval_RelType_values();
}

+ (EduStanfordNlpUtilInterval_RelType *)valueOfWithNSString:(NSString *)name {
  return EduStanfordNlpUtilInterval_RelType_valueOfWithNSString_(name);
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LEduStanfordNlpUtilInterval_RelType;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpUtilInterval_RelType;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "BEFORE", "LEduStanfordNlpUtilInterval_RelType;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "AFTER", "LEduStanfordNlpUtilInterval_RelType;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "EQUAL", "LEduStanfordNlpUtilInterval_RelType;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "BEGIN_MEET_END", "LEduStanfordNlpUtilInterval_RelType;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
    { "END_MEET_BEGIN", "LEduStanfordNlpUtilInterval_RelType;", .constantValue.asLong = 0, 0x4019, -1, 6, -1, -1 },
    { "CONTAIN", "LEduStanfordNlpUtilInterval_RelType;", .constantValue.asLong = 0, 0x4019, -1, 7, -1, -1 },
    { "INSIDE", "LEduStanfordNlpUtilInterval_RelType;", .constantValue.asLong = 0, 0x4019, -1, 8, -1, -1 },
    { "OVERLAP", "LEduStanfordNlpUtilInterval_RelType;", .constantValue.asLong = 0, 0x4019, -1, 9, -1, -1 },
    { "UNKNOWN", "LEduStanfordNlpUtilInterval_RelType;", .constantValue.asLong = 0, 0x4019, -1, 10, -1, -1 },
    { "NONE", "LEduStanfordNlpUtilInterval_RelType;", .constantValue.asLong = 0, 0x4019, -1, 11, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(EduStanfordNlpUtilInterval_RelType, BEFORE), &JreEnum(EduStanfordNlpUtilInterval_RelType, AFTER), &JreEnum(EduStanfordNlpUtilInterval_RelType, EQUAL), &JreEnum(EduStanfordNlpUtilInterval_RelType, BEGIN_MEET_END), &JreEnum(EduStanfordNlpUtilInterval_RelType, END_MEET_BEGIN), &JreEnum(EduStanfordNlpUtilInterval_RelType, CONTAIN), &JreEnum(EduStanfordNlpUtilInterval_RelType, INSIDE), &JreEnum(EduStanfordNlpUtilInterval_RelType, OVERLAP), &JreEnum(EduStanfordNlpUtilInterval_RelType, UNKNOWN), &JreEnum(EduStanfordNlpUtilInterval_RelType, NONE), "LEduStanfordNlpUtilInterval;", "Ljava/lang/Enum<Ledu/stanford/nlp/util/Interval$RelType;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilInterval_RelType = { "RelType", "edu.stanford.nlp.util", ptrTable, methods, fields, 7, 0x4019, 2, 10, 12, -1, -1, 13, -1 };
  return &_EduStanfordNlpUtilInterval_RelType;
}

+ (void)initialize {
  if (self == [EduStanfordNlpUtilInterval_RelType class]) {
    JreEnum(EduStanfordNlpUtilInterval_RelType, BEFORE) = new_EduStanfordNlpUtilInterval_RelType_initWithNSString_withInt_(@"BEFORE", 0);
    JreEnum(EduStanfordNlpUtilInterval_RelType, AFTER) = new_EduStanfordNlpUtilInterval_RelType_initWithNSString_withInt_(@"AFTER", 1);
    JreEnum(EduStanfordNlpUtilInterval_RelType, EQUAL) = new_EduStanfordNlpUtilInterval_RelType_initWithNSString_withInt_(@"EQUAL", 2);
    JreEnum(EduStanfordNlpUtilInterval_RelType, BEGIN_MEET_END) = new_EduStanfordNlpUtilInterval_RelType_initWithNSString_withInt_(@"BEGIN_MEET_END", 3);
    JreEnum(EduStanfordNlpUtilInterval_RelType, END_MEET_BEGIN) = new_EduStanfordNlpUtilInterval_RelType_initWithNSString_withInt_(@"END_MEET_BEGIN", 4);
    JreEnum(EduStanfordNlpUtilInterval_RelType, CONTAIN) = new_EduStanfordNlpUtilInterval_RelType_initWithNSString_withInt_(@"CONTAIN", 5);
    JreEnum(EduStanfordNlpUtilInterval_RelType, INSIDE) = new_EduStanfordNlpUtilInterval_RelType_initWithNSString_withInt_(@"INSIDE", 6);
    JreEnum(EduStanfordNlpUtilInterval_RelType, OVERLAP) = new_EduStanfordNlpUtilInterval_RelType_initWithNSString_withInt_(@"OVERLAP", 7);
    JreEnum(EduStanfordNlpUtilInterval_RelType, UNKNOWN) = new_EduStanfordNlpUtilInterval_RelType_initWithNSString_withInt_(@"UNKNOWN", 8);
    JreEnum(EduStanfordNlpUtilInterval_RelType, NONE) = new_EduStanfordNlpUtilInterval_RelType_initWithNSString_withInt_(@"NONE", 9);
    J2OBJC_SET_INITIALIZED(EduStanfordNlpUtilInterval_RelType)
  }
}

@end

void EduStanfordNlpUtilInterval_RelType_initWithNSString_withInt_(EduStanfordNlpUtilInterval_RelType *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

EduStanfordNlpUtilInterval_RelType *new_EduStanfordNlpUtilInterval_RelType_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilInterval_RelType, initWithNSString_withInt_, __name, __ordinal)
}

IOSObjectArray *EduStanfordNlpUtilInterval_RelType_values() {
  EduStanfordNlpUtilInterval_RelType_initialize();
  return [IOSObjectArray arrayWithObjects:EduStanfordNlpUtilInterval_RelType_values_ count:10 type:EduStanfordNlpUtilInterval_RelType_class_()];
}

EduStanfordNlpUtilInterval_RelType *EduStanfordNlpUtilInterval_RelType_valueOfWithNSString_(NSString *name) {
  EduStanfordNlpUtilInterval_RelType_initialize();
  for (int i = 0; i < 10; i++) {
    EduStanfordNlpUtilInterval_RelType *e = EduStanfordNlpUtilInterval_RelType_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

EduStanfordNlpUtilInterval_RelType *EduStanfordNlpUtilInterval_RelType_fromOrdinal(NSUInteger ordinal) {
  EduStanfordNlpUtilInterval_RelType_initialize();
  if (ordinal >= 10) {
    return nil;
  }
  return EduStanfordNlpUtilInterval_RelType_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpUtilInterval_RelType)

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpUtilInterval_$Lambda$1)

@implementation EduStanfordNlpUtilInterval_$Lambda$1

- (id)applyWithId:(id<EduStanfordNlpUtilHasInterval>)inArg {
  EduStanfordNlpUtilInterval *interval = [((id<EduStanfordNlpUtilHasInterval>) nil_chk(inArg)) getInterval];
  return JavaLangDouble_valueOfWithDouble_((jdouble) ([((JavaLangInteger *) nil_chk([((EduStanfordNlpUtilInterval *) nil_chk(interval)) getEnd])) intValue] - [((JavaLangInteger *) nil_chk([interval getBegin])) intValue]));
}

- (id<JavaUtilFunctionFunction>)andThenWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_andThenWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilFunctionFunction>)composeWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_composeWithJavaUtilFunctionFunction_(self, arg0);
}

+ (void)initialize {
  if (self == [EduStanfordNlpUtilInterval_$Lambda$1 class]) {
    EduStanfordNlpUtilInterval_$Lambda$1_instance = new_EduStanfordNlpUtilInterval_$Lambda$1_init();
    J2OBJC_SET_INITIALIZED(EduStanfordNlpUtilInterval_$Lambda$1)
  }
}

@end

void EduStanfordNlpUtilInterval_$Lambda$1_init(EduStanfordNlpUtilInterval_$Lambda$1 *self) {
  NSObject_init(self);
}

EduStanfordNlpUtilInterval_$Lambda$1 *new_EduStanfordNlpUtilInterval_$Lambda$1_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilInterval_$Lambda$1, init)
}

EduStanfordNlpUtilInterval_$Lambda$1 *create_EduStanfordNlpUtilInterval_$Lambda$1_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilInterval_$Lambda$1, init)
}
