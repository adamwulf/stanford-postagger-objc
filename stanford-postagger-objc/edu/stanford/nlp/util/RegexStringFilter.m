//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/util/RegexStringFilter.java
//

#include "J2ObjC_source.h"
#include "edu/stanford/nlp/util/RegexStringFilter.h"
#include "java/util/function/Predicate.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"

@implementation EduStanfordNlpUtilRegexStringFilter

- (instancetype)initWithNSString:(NSString *)pattern {
  EduStanfordNlpUtilRegexStringFilter_initWithNSString_(self, pattern);
  return self;
}

- (jboolean)testWithId:(NSString *)text {
  return [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(pattern_)) matcherWithJavaLangCharSequence:text])) matches];
}

- (NSUInteger)hash {
  return ((jint) [((JavaUtilRegexPattern *) nil_chk(pattern_)) hash]);
}

- (jboolean)isEqual:(id)other {
  if (other == self) {
    return true;
  }
  if (!([other isKindOfClass:[EduStanfordNlpUtilRegexStringFilter class]])) {
    return false;
  }
  return [((JavaUtilRegexPattern *) nil_chk(((EduStanfordNlpUtilRegexStringFilter *) nil_chk(((EduStanfordNlpUtilRegexStringFilter *) cast_chk(other, [EduStanfordNlpUtilRegexStringFilter class]))))->pattern_)) isEqual:pattern_];
}

- (id<JavaUtilFunctionPredicate>)and__WithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)arg0 {
  return JavaUtilFunctionPredicate_and__WithJavaUtilFunctionPredicate_(self, arg0);
}

- (id<JavaUtilFunctionPredicate>)negate {
  return JavaUtilFunctionPredicate_negate(self);
}

- (id<JavaUtilFunctionPredicate>)or__WithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)arg0 {
  return JavaUtilFunctionPredicate_or__WithJavaUtilFunctionPredicate_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(testWithId:);
  methods[2].selector = @selector(hash);
  methods[3].selector = @selector(isEqual:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "pattern_", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "test", "hashCode", "equals", "LNSObject;", "Ljava/lang/Object;Ljava/util/function/Predicate<Ljava/lang/String;>;Ljava/io/Serializable;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilRegexStringFilter = { "RegexStringFilter", "edu.stanford.nlp.util", ptrTable, methods, fields, 7, 0x1, 4, 1, -1, -1, -1, 5, -1 };
  return &_EduStanfordNlpUtilRegexStringFilter;
}

@end

void EduStanfordNlpUtilRegexStringFilter_initWithNSString_(EduStanfordNlpUtilRegexStringFilter *self, NSString *pattern) {
  NSObject_init(self);
  self->pattern_ = JavaUtilRegexPattern_compileWithNSString_(pattern);
}

EduStanfordNlpUtilRegexStringFilter *new_EduStanfordNlpUtilRegexStringFilter_initWithNSString_(NSString *pattern) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilRegexStringFilter, initWithNSString_, pattern)
}

EduStanfordNlpUtilRegexStringFilter *create_EduStanfordNlpUtilRegexStringFilter_initWithNSString_(NSString *pattern) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilRegexStringFilter, initWithNSString_, pattern)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpUtilRegexStringFilter)
