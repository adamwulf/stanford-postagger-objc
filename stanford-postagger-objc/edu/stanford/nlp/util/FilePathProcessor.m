//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/util/FilePathProcessor.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/io/ExtensionFileFilter.h"
#include "edu/stanford/nlp/util/FilePathProcessor.h"
#include "edu/stanford/nlp/util/FileProcessor.h"
#include "java/io/File.h"
#include "java/io/FileFilter.h"
#include "java/lang/IllegalArgumentException.h"

@interface EduStanfordNlpUtilFilePathProcessor ()

- (instancetype)init;

@end

__attribute__((unused)) static void EduStanfordNlpUtilFilePathProcessor_init(EduStanfordNlpUtilFilePathProcessor *self);

__attribute__((unused)) static EduStanfordNlpUtilFilePathProcessor *new_EduStanfordNlpUtilFilePathProcessor_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpUtilFilePathProcessor *create_EduStanfordNlpUtilFilePathProcessor_init();

@implementation EduStanfordNlpUtilFilePathProcessor

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpUtilFilePathProcessor_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)processPathWithNSString:(NSString *)pathStr
                   withNSString:(NSString *)suffix
                    withBoolean:(jboolean)recursively
withEduStanfordNlpUtilFileProcessor:(id<EduStanfordNlpUtilFileProcessor>)processor {
  EduStanfordNlpUtilFilePathProcessor_processPathWithNSString_withNSString_withBoolean_withEduStanfordNlpUtilFileProcessor_(pathStr, suffix, recursively, processor);
}

+ (void)processPathWithJavaIoFile:(JavaIoFile *)path
                     withNSString:(NSString *)suffix
                      withBoolean:(jboolean)recursively
withEduStanfordNlpUtilFileProcessor:(id<EduStanfordNlpUtilFileProcessor>)processor {
  EduStanfordNlpUtilFilePathProcessor_processPathWithJavaIoFile_withNSString_withBoolean_withEduStanfordNlpUtilFileProcessor_(path, suffix, recursively, processor);
}

+ (void)processPathWithJavaIoFile:(JavaIoFile *)path
             withJavaIoFileFilter:(id<JavaIoFileFilter>)filter
withEduStanfordNlpUtilFileProcessor:(id<EduStanfordNlpUtilFileProcessor>)processor {
  EduStanfordNlpUtilFilePathProcessor_processPathWithJavaIoFile_withJavaIoFileFilter_withEduStanfordNlpUtilFileProcessor_(path, filter, processor);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(processPathWithNSString:withNSString:withBoolean:withEduStanfordNlpUtilFileProcessor:);
  methods[2].selector = @selector(processPathWithJavaIoFile:withNSString:withBoolean:withEduStanfordNlpUtilFileProcessor:);
  methods[3].selector = @selector(processPathWithJavaIoFile:withJavaIoFileFilter:withEduStanfordNlpUtilFileProcessor:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "processPath", "LNSString;LNSString;ZLEduStanfordNlpUtilFileProcessor;", "LJavaIoFile;LNSString;ZLEduStanfordNlpUtilFileProcessor;", "LJavaIoFile;LJavaIoFileFilter;LEduStanfordNlpUtilFileProcessor;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilFilePathProcessor = { "FilePathProcessor", "edu.stanford.nlp.util", ptrTable, methods, NULL, 7, 0x1, 4, 0, -1, -1, -1, -1, -1 };
  return &_EduStanfordNlpUtilFilePathProcessor;
}

@end

void EduStanfordNlpUtilFilePathProcessor_init(EduStanfordNlpUtilFilePathProcessor *self) {
  NSObject_init(self);
}

EduStanfordNlpUtilFilePathProcessor *new_EduStanfordNlpUtilFilePathProcessor_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilFilePathProcessor, init)
}

EduStanfordNlpUtilFilePathProcessor *create_EduStanfordNlpUtilFilePathProcessor_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilFilePathProcessor, init)
}

void EduStanfordNlpUtilFilePathProcessor_processPathWithNSString_withNSString_withBoolean_withEduStanfordNlpUtilFileProcessor_(NSString *pathStr, NSString *suffix, jboolean recursively, id<EduStanfordNlpUtilFileProcessor> processor) {
  EduStanfordNlpUtilFilePathProcessor_initialize();
  EduStanfordNlpUtilFilePathProcessor_processPathWithJavaIoFile_withJavaIoFileFilter_withEduStanfordNlpUtilFileProcessor_(new_JavaIoFile_initWithNSString_(pathStr), new_EduStanfordNlpIoExtensionFileFilter_initWithNSString_withBoolean_(suffix, recursively), processor);
}

void EduStanfordNlpUtilFilePathProcessor_processPathWithJavaIoFile_withNSString_withBoolean_withEduStanfordNlpUtilFileProcessor_(JavaIoFile *path, NSString *suffix, jboolean recursively, id<EduStanfordNlpUtilFileProcessor> processor) {
  EduStanfordNlpUtilFilePathProcessor_initialize();
  EduStanfordNlpUtilFilePathProcessor_processPathWithJavaIoFile_withJavaIoFileFilter_withEduStanfordNlpUtilFileProcessor_(path, new_EduStanfordNlpIoExtensionFileFilter_initWithNSString_withBoolean_(suffix, recursively), processor);
}

void EduStanfordNlpUtilFilePathProcessor_processPathWithJavaIoFile_withJavaIoFileFilter_withEduStanfordNlpUtilFileProcessor_(JavaIoFile *path, id<JavaIoFileFilter> filter, id<EduStanfordNlpUtilFileProcessor> processor) {
  EduStanfordNlpUtilFilePathProcessor_initialize();
  if ([((JavaIoFile *) nil_chk(path)) isDirectory]) {
    IOSObjectArray *directoryListing = [path listFilesWithJavaIoFileFilter:filter];
    if (directoryListing == nil) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"Directory access problem for: ", path));
    }
    {
      IOSObjectArray *a__ = directoryListing;
      JavaIoFile * const *b__ = a__->buffer_;
      JavaIoFile * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        JavaIoFile *file = *b__++;
        EduStanfordNlpUtilFilePathProcessor_processPathWithJavaIoFile_withJavaIoFileFilter_withEduStanfordNlpUtilFileProcessor_(file, filter, processor);
      }
    }
  }
  else {
    [((id<EduStanfordNlpUtilFileProcessor>) nil_chk(processor)) processFileWithJavaIoFile:path];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpUtilFilePathProcessor)
