//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/util/ArraySet.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/util/ArraySet.h"
#include "java/lang/SafeVarargs.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/AbstractSet.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"

@interface EduStanfordNlpUtilArraySet () {
 @public
  JavaUtilArrayList *backer_;
}

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpUtilArraySet, backer_, JavaUtilArrayList *)

inline jlong EduStanfordNlpUtilArraySet_get_serialVersionUID();
#define EduStanfordNlpUtilArraySet_serialVersionUID 1LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpUtilArraySet, serialVersionUID, jlong)

__attribute__((unused)) static IOSObjectArray *EduStanfordNlpUtilArraySet__Annotations$0();

@implementation EduStanfordNlpUtilArraySet

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpUtilArraySet_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithInt:(jint)initialSize {
  EduStanfordNlpUtilArraySet_initWithInt_(self, initialSize);
  return self;
}

- (instancetype)initWithNSObjectArray:(IOSObjectArray *)elements {
  EduStanfordNlpUtilArraySet_initWithNSObjectArray_(self, elements);
  return self;
}

- (id<JavaUtilIterator>)iterator {
  return [((JavaUtilArrayList *) nil_chk(backer_)) iterator];
}

- (jboolean)addWithId:(id)e {
  if ([((JavaUtilArrayList *) nil_chk(backer_)) containsWithId:e]) return false;
  else return [backer_ addWithId:e];
}

- (jint)size {
  return [((JavaUtilArrayList *) nil_chk(backer_)) size];
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x81, -1, 1, -1, -1, 2, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithInt:);
  methods[2].selector = @selector(initWithNSObjectArray:);
  methods[3].selector = @selector(iterator);
  methods[4].selector = @selector(addWithId:);
  methods[5].selector = @selector(size);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "backer_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x12, -1, -1, 7, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpUtilArraySet_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "[LNSObject;", (void *)&EduStanfordNlpUtilArraySet__Annotations$0, "()Ljava/util/Iterator<TE;>;", "add", "LNSObject;", "(TE;)Z", "Ljava/util/ArrayList<TE;>;", "<E:Ljava/lang/Object;>Ljava/util/AbstractSet<TE;>;Ljava/io/Serializable;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilArraySet = { "ArraySet", "edu.stanford.nlp.util", ptrTable, methods, fields, 7, 0x1, 6, 2, -1, -1, -1, 8, -1 };
  return &_EduStanfordNlpUtilArraySet;
}

@end

void EduStanfordNlpUtilArraySet_init(EduStanfordNlpUtilArraySet *self) {
  EduStanfordNlpUtilArraySet_initWithInt_(self, 10);
}

EduStanfordNlpUtilArraySet *new_EduStanfordNlpUtilArraySet_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilArraySet, init)
}

EduStanfordNlpUtilArraySet *create_EduStanfordNlpUtilArraySet_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilArraySet, init)
}

void EduStanfordNlpUtilArraySet_initWithInt_(EduStanfordNlpUtilArraySet *self, jint initialSize) {
  JavaUtilAbstractSet_init(self);
  self->backer_ = new_JavaUtilArrayList_initWithInt_(initialSize);
}

EduStanfordNlpUtilArraySet *new_EduStanfordNlpUtilArraySet_initWithInt_(jint initialSize) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilArraySet, initWithInt_, initialSize)
}

EduStanfordNlpUtilArraySet *create_EduStanfordNlpUtilArraySet_initWithInt_(jint initialSize) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilArraySet, initWithInt_, initialSize)
}

void EduStanfordNlpUtilArraySet_initWithNSObjectArray_(EduStanfordNlpUtilArraySet *self, IOSObjectArray *elements) {
  EduStanfordNlpUtilArraySet_initWithInt_(self, ((IOSObjectArray *) nil_chk(elements))->size_);
  {
    IOSObjectArray *a__ = elements;
    id const *b__ = a__->buffer_;
    id const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id element = *b__++;
      [self addWithId:element];
    }
  }
}

EduStanfordNlpUtilArraySet *new_EduStanfordNlpUtilArraySet_initWithNSObjectArray_(IOSObjectArray *elements) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilArraySet, initWithNSObjectArray_, elements)
}

EduStanfordNlpUtilArraySet *create_EduStanfordNlpUtilArraySet_initWithNSObjectArray_(IOSObjectArray *elements) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilArraySet, initWithNSObjectArray_, elements)
}

IOSObjectArray *EduStanfordNlpUtilArraySet__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangSafeVarargs() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpUtilArraySet)
