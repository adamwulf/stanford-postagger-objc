//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/util/Triple.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/util/CollectionUtils.h"
#include "edu/stanford/nlp/util/Triple.h"
#include "edu/stanford/nlp/util/logging/PrettyLogger.h"
#include "edu/stanford/nlp/util/logging/Redwood.h"
#include "java/lang/Comparable.h"
#include "java/util/List.h"

inline jlong EduStanfordNlpUtilTriple_get_serialVersionUID();
#define EduStanfordNlpUtilTriple_serialVersionUID -4182871682751645440LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpUtilTriple, serialVersionUID, jlong)

@implementation EduStanfordNlpUtilTriple

- (instancetype)initWithId:(id)first
                    withId:(id)second
                    withId:(id)third {
  EduStanfordNlpUtilTriple_initWithId_withId_withId_(self, first, second, third);
  return self;
}

- (id)first {
  return first_;
}

- (id)second {
  return second_;
}

- (id)third {
  return third_;
}

- (void)setFirstWithId:(id)o {
  first_ = o;
}

- (void)setSecondWithId:(id)o {
  second_ = o;
}

- (void)setThirdWithId:(id)o {
  third_ = o;
}

- (jboolean)isEqual:(id)o {
  if (self == o) {
    return true;
  }
  if (!([o isKindOfClass:[EduStanfordNlpUtilTriple class]])) {
    return false;
  }
  EduStanfordNlpUtilTriple *triple = (EduStanfordNlpUtilTriple *) cast_chk(o, [EduStanfordNlpUtilTriple class]);
  if (first_ != nil ? ![first_ isEqual:((EduStanfordNlpUtilTriple *) nil_chk(triple))->first_] : ((EduStanfordNlpUtilTriple *) nil_chk(triple))->first_ != nil) {
    return false;
  }
  if (second_ != nil ? ![second_ isEqual:triple->second_] : triple->second_ != nil) {
    return false;
  }
  if (third_ != nil ? ![third_ isEqual:triple->third_] : triple->third_ != nil) {
    return false;
  }
  return true;
}

- (NSUInteger)hash {
  jint result;
  result = (first_ != nil ? ((jint) [first_ hash]) : 0);
  result = 29 * result + (second_ != nil ? ((jint) [second_ hash]) : 0);
  result = 29 * result + (third_ != nil ? ((jint) [third_ hash]) : 0);
  return result;
}

- (NSString *)description {
  return JreStrcat("C@C@C@C", '(', first_, ',', second_, ',', third_, ')');
}

- (id<JavaUtilList>)asList {
  return EduStanfordNlpUtilCollectionUtils_makeListWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ first_, second_, third_ } count:3 type:NSObject_class_()]);
}

+ (EduStanfordNlpUtilTriple *)makeTripleWithId:(id)x
                                        withId:(id)y
                                        withId:(id)z {
  return EduStanfordNlpUtilTriple_makeTripleWithId_withId_withId_(x, y, z);
}

- (void)prettyLogWithEduStanfordNlpUtilLoggingRedwood_RedwoodChannels:(EduStanfordNlpUtilLoggingRedwood_RedwoodChannels *)channels
                                                         withNSString:(NSString *)description_ {
  EduStanfordNlpUtilLoggingPrettyLogger_logWithEduStanfordNlpUtilLoggingRedwood_RedwoodChannels_withNSString_withId_(channels, description_, [self asList]);
}

- (jint)compareToWithId:(EduStanfordNlpUtilTriple *)another {
  (void) cast_chk(another, [EduStanfordNlpUtilTriple class]);
  jint comp = [((id<JavaLangComparable>) nil_chk(((id<JavaLangComparable>) cast_check([self first], JavaLangComparable_class_())))) compareToWithId:[((EduStanfordNlpUtilTriple *) nil_chk(another)) first]];
  if (comp != 0) {
    return comp;
  }
  else {
    comp = [((id<JavaLangComparable>) nil_chk(((id<JavaLangComparable>) cast_check([self second], JavaLangComparable_class_())))) compareToWithId:[another second]];
    if (comp != 0) {
      return comp;
    }
    else {
      return [((id<JavaLangComparable>) nil_chk(((id<JavaLangComparable>) cast_check([self third], JavaLangComparable_class_())))) compareToWithId:[another third]];
    }
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 4, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, 7, -1, -1 },
    { NULL, "V", 0x1, 8, 6, -1, 9, -1, -1 },
    { NULL, "V", 0x1, 10, 6, -1, 11, -1, -1 },
    { NULL, "Z", 0x1, 12, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 13, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 14, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 15, -1, -1 },
    { NULL, "LEduStanfordNlpUtilTriple;", 0x9, 16, 0, -1, 17, -1, -1 },
    { NULL, "V", 0x1, 18, 19, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 20, 21, -1, 22, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithId:withId:withId:);
  methods[1].selector = @selector(first);
  methods[2].selector = @selector(second);
  methods[3].selector = @selector(third);
  methods[4].selector = @selector(setFirstWithId:);
  methods[5].selector = @selector(setSecondWithId:);
  methods[6].selector = @selector(setThirdWithId:);
  methods[7].selector = @selector(isEqual:);
  methods[8].selector = @selector(hash);
  methods[9].selector = @selector(description);
  methods[10].selector = @selector(asList);
  methods[11].selector = @selector(makeTripleWithId:withId:withId:);
  methods[12].selector = @selector(prettyLogWithEduStanfordNlpUtilLoggingRedwood_RedwoodChannels:withNSString:);
  methods[13].selector = @selector(compareToWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpUtilTriple_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "first_", "LNSObject;", .constantValue.asLong = 0, 0x1, -1, -1, 23, -1 },
    { "second_", "LNSObject;", .constantValue.asLong = 0, 0x1, -1, -1, 24, -1 },
    { "third_", "LNSObject;", .constantValue.asLong = 0, 0x1, -1, -1, 25, -1 },
  };
  static const void *ptrTable[] = { "LNSObject;LNSObject;LNSObject;", "(TT1;TT2;TT3;)V", "()TT1;", "()TT2;", "()TT3;", "setFirst", "LNSObject;", "(TT1;)V", "setSecond", "(TT2;)V", "setThird", "(TT3;)V", "equals", "hashCode", "toString", "()Ljava/util/List<Ljava/lang/Object;>;", "makeTriple", "<X:Ljava/lang/Object;Y:Ljava/lang/Object;Z:Ljava/lang/Object;>(TX;TY;TZ;)Ledu/stanford/nlp/util/Triple<TX;TY;TZ;>;", "prettyLog", "LEduStanfordNlpUtilLoggingRedwood_RedwoodChannels;LNSString;", "compareTo", "LEduStanfordNlpUtilTriple;", "(Ledu/stanford/nlp/util/Triple<TT1;TT2;TT3;>;)I", "TT1;", "TT2;", "TT3;", "<T1:Ljava/lang/Object;T2:Ljava/lang/Object;T3:Ljava/lang/Object;>Ljava/lang/Object;Ljava/lang/Comparable<Ledu/stanford/nlp/util/Triple<TT1;TT2;TT3;>;>;Ljava/io/Serializable;Ledu/stanford/nlp/util/logging/PrettyLoggable;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilTriple = { "Triple", "edu.stanford.nlp.util", ptrTable, methods, fields, 7, 0x1, 14, 4, -1, -1, -1, 26, -1 };
  return &_EduStanfordNlpUtilTriple;
}

@end

void EduStanfordNlpUtilTriple_initWithId_withId_withId_(EduStanfordNlpUtilTriple *self, id first, id second, id third) {
  NSObject_init(self);
  self->first_ = first;
  self->second_ = second;
  self->third_ = third;
}

EduStanfordNlpUtilTriple *new_EduStanfordNlpUtilTriple_initWithId_withId_withId_(id first, id second, id third) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilTriple, initWithId_withId_withId_, first, second, third)
}

EduStanfordNlpUtilTriple *create_EduStanfordNlpUtilTriple_initWithId_withId_withId_(id first, id second, id third) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilTriple, initWithId_withId_withId_, first, second, third)
}

EduStanfordNlpUtilTriple *EduStanfordNlpUtilTriple_makeTripleWithId_withId_withId_(id x, id y, id z) {
  EduStanfordNlpUtilTriple_initialize();
  return new_EduStanfordNlpUtilTriple_initWithId_withId_withId_(x, y, z);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpUtilTriple)
