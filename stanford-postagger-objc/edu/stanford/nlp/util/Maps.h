//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/util/Maps.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_EduStanfordNlpUtilMaps")
#ifdef RESTRICT_EduStanfordNlpUtilMaps
#define INCLUDE_ALL_EduStanfordNlpUtilMaps 0
#else
#define INCLUDE_ALL_EduStanfordNlpUtilMaps 1
#endif
#undef RESTRICT_EduStanfordNlpUtilMaps

#if !defined (EduStanfordNlpUtilMaps_) && (INCLUDE_ALL_EduStanfordNlpUtilMaps || defined(INCLUDE_EduStanfordNlpUtilMaps))
#define EduStanfordNlpUtilMaps_

@class EduStanfordNlpUtilCollectionFactory;
@class IOSObjectArray;
@class JavaLangStringBuilder;
@protocol JavaUtilCollection;
@protocol JavaUtilFunctionFunction;
@protocol JavaUtilList;
@protocol JavaUtilMap;

@interface EduStanfordNlpUtilMaps : NSObject

#pragma mark Public

+ (void)addAllWithJavaUtilMap:(id<JavaUtilMap>)to
              withJavaUtilMap:(id<JavaUtilMap>)from
 withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)function;

+ (id<JavaUtilMap>)composeWithJavaUtilMap:(id<JavaUtilMap>)map1
                          withJavaUtilMap:(id<JavaUtilMap>)map2;

+ (id<JavaUtilMap>)getAllWithJavaUtilMap:(id<JavaUtilMap>)map
                  withJavaUtilCollection:(id<JavaUtilCollection>)indices;

+ (id<JavaUtilMap>)invertWithJavaUtilMap:(id<JavaUtilMap>)map;

+ (id<JavaUtilMap>)invertSetWithJavaUtilMap:(id<JavaUtilMap>)map;

+ (void)mainWithNSStringArray:(IOSObjectArray *)args;

+ (void)putIntoValueArrayListWithJavaUtilMap:(id<JavaUtilMap>)map
                                      withId:(id)key
                                      withId:(id)value;

+ (void)putIntoValueCollectionWithJavaUtilMap:(id<JavaUtilMap>)map
                                       withId:(id)key
                                       withId:(id)value
      withEduStanfordNlpUtilCollectionFactory:(EduStanfordNlpUtilCollectionFactory *)cf;

+ (void)putIntoValueHashSetWithJavaUtilMap:(id<JavaUtilMap>)map
                                    withId:(id)key
                                    withId:(id)value;

+ (void)removeKeysWithJavaUtilMap:(id<JavaUtilMap>)map
           withJavaUtilCollection:(id<JavaUtilCollection>)removekeys;

+ (id<JavaUtilList>)sortedEntriesWithJavaUtilCollection:(id<JavaUtilCollection>)entries;

+ (id<JavaUtilList>)sortedEntriesWithJavaUtilMap:(id<JavaUtilMap>)map;

+ (NSString *)toStringWithJavaUtilMap:(id<JavaUtilMap>)map
                         withNSString:(NSString *)preAppend
                         withNSString:(NSString *)postAppend
                         withNSString:(NSString *)keyValSeparator
                         withNSString:(NSString *)itemSeparator;

+ (NSString *)toStringSortedWithJavaUtilMap:(id<JavaUtilMap>)map;

+ (void)toStringSortedWithJavaUtilMap:(id<JavaUtilMap>)map
            withJavaLangStringBuilder:(JavaLangStringBuilder *)builder;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpUtilMaps)

FOUNDATION_EXPORT void EduStanfordNlpUtilMaps_putIntoValueHashSetWithJavaUtilMap_withId_withId_(id<JavaUtilMap> map, id key, id value);

FOUNDATION_EXPORT void EduStanfordNlpUtilMaps_putIntoValueArrayListWithJavaUtilMap_withId_withId_(id<JavaUtilMap> map, id key, id value);

FOUNDATION_EXPORT void EduStanfordNlpUtilMaps_putIntoValueCollectionWithJavaUtilMap_withId_withId_withEduStanfordNlpUtilCollectionFactory_(id<JavaUtilMap> map, id key, id value, EduStanfordNlpUtilCollectionFactory *cf);

FOUNDATION_EXPORT id<JavaUtilMap> EduStanfordNlpUtilMaps_composeWithJavaUtilMap_withJavaUtilMap_(id<JavaUtilMap> map1, id<JavaUtilMap> map2);

FOUNDATION_EXPORT id<JavaUtilMap> EduStanfordNlpUtilMaps_invertWithJavaUtilMap_(id<JavaUtilMap> map);

FOUNDATION_EXPORT id<JavaUtilMap> EduStanfordNlpUtilMaps_invertSetWithJavaUtilMap_(id<JavaUtilMap> map);

FOUNDATION_EXPORT id<JavaUtilList> EduStanfordNlpUtilMaps_sortedEntriesWithJavaUtilCollection_(id<JavaUtilCollection> entries);

FOUNDATION_EXPORT id<JavaUtilList> EduStanfordNlpUtilMaps_sortedEntriesWithJavaUtilMap_(id<JavaUtilMap> map);

FOUNDATION_EXPORT void EduStanfordNlpUtilMaps_toStringSortedWithJavaUtilMap_withJavaLangStringBuilder_(id<JavaUtilMap> map, JavaLangStringBuilder *builder);

FOUNDATION_EXPORT NSString *EduStanfordNlpUtilMaps_toStringSortedWithJavaUtilMap_(id<JavaUtilMap> map);

FOUNDATION_EXPORT void EduStanfordNlpUtilMaps_removeKeysWithJavaUtilMap_withJavaUtilCollection_(id<JavaUtilMap> map, id<JavaUtilCollection> removekeys);

FOUNDATION_EXPORT void EduStanfordNlpUtilMaps_addAllWithJavaUtilMap_withJavaUtilMap_withJavaUtilFunctionFunction_(id<JavaUtilMap> to, id<JavaUtilMap> from, id<JavaUtilFunctionFunction> function);

FOUNDATION_EXPORT id<JavaUtilMap> EduStanfordNlpUtilMaps_getAllWithJavaUtilMap_withJavaUtilCollection_(id<JavaUtilMap> map, id<JavaUtilCollection> indices);

FOUNDATION_EXPORT NSString *EduStanfordNlpUtilMaps_toStringWithJavaUtilMap_withNSString_withNSString_withNSString_withNSString_(id<JavaUtilMap> map, NSString *preAppend, NSString *postAppend, NSString *keyValSeparator, NSString *itemSeparator);

FOUNDATION_EXPORT void EduStanfordNlpUtilMaps_mainWithNSStringArray_(IOSObjectArray *args);

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpUtilMaps)

#endif

#pragma pop_macro("INCLUDE_ALL_EduStanfordNlpUtilMaps")
