//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/util/ArrayUtils.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/util/ArrayUtils.h"
#include "edu/stanford/nlp/util/CollectionUtils.h"
#include "edu/stanford/nlp/util/Generics.h"
#include "edu/stanford/nlp/util/Pair.h"
#include "java/lang/Boolean.h"
#include "java/lang/Byte.h"
#include "java/lang/Character.h"
#include "java/lang/Double.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/Short.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/reflect/Array.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/BitSet.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "java/util/function/Function.h"
#include "java/util/function/Predicate.h"

@interface EduStanfordNlpUtilArrayUtils ()

- (instancetype)init;

+ (IOSByteArray *)bitSetToByteArrayWithJavaUtilBitSet:(JavaUtilBitSet *)bitSet;

+ (JavaUtilBitSet *)byteArrayToBitSetWithByteArray:(IOSByteArray *)array;

@end

__attribute__((unused)) static void EduStanfordNlpUtilArrayUtils_init(EduStanfordNlpUtilArrayUtils *self);

__attribute__((unused)) static EduStanfordNlpUtilArrayUtils *new_EduStanfordNlpUtilArrayUtils_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpUtilArrayUtils *create_EduStanfordNlpUtilArrayUtils_init();

__attribute__((unused)) static IOSByteArray *EduStanfordNlpUtilArrayUtils_bitSetToByteArrayWithJavaUtilBitSet_(JavaUtilBitSet *bitSet);

__attribute__((unused)) static JavaUtilBitSet *EduStanfordNlpUtilArrayUtils_byteArrayToBitSetWithByteArray_(IOSByteArray *array);

@interface EduStanfordNlpUtilArrayUtils_$Lambda$1 : NSObject < JavaUtilFunctionFunction >

- (id)applyWithId:(EduStanfordNlpUtilPair *)o1;

@end

J2OBJC_STATIC_INIT(EduStanfordNlpUtilArrayUtils_$Lambda$1)

inline EduStanfordNlpUtilArrayUtils_$Lambda$1 *EduStanfordNlpUtilArrayUtils_$Lambda$1_get_instance();
static EduStanfordNlpUtilArrayUtils_$Lambda$1 *EduStanfordNlpUtilArrayUtils_$Lambda$1_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpUtilArrayUtils_$Lambda$1, instance, EduStanfordNlpUtilArrayUtils_$Lambda$1 *)

__attribute__((unused)) static void EduStanfordNlpUtilArrayUtils_$Lambda$1_init(EduStanfordNlpUtilArrayUtils_$Lambda$1 *self);

__attribute__((unused)) static EduStanfordNlpUtilArrayUtils_$Lambda$1 *new_EduStanfordNlpUtilArrayUtils_$Lambda$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpUtilArrayUtils_$Lambda$1 *create_EduStanfordNlpUtilArrayUtils_$Lambda$1_init();

@implementation EduStanfordNlpUtilArrayUtils

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpUtilArrayUtils_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (IOSByteArray *)gapEncodeWithIntArray:(IOSIntArray *)orig {
  return EduStanfordNlpUtilArrayUtils_gapEncodeWithIntArray_(orig);
}

+ (id<JavaUtilList>)gapEncodeListWithIntArray:(IOSIntArray *)orig {
  return EduStanfordNlpUtilArrayUtils_gapEncodeListWithIntArray_(orig);
}

+ (IOSIntArray *)gapDecodeWithByteArray:(IOSByteArray *)gapEncoded {
  return EduStanfordNlpUtilArrayUtils_gapDecodeWithByteArray_(gapEncoded);
}

+ (IOSIntArray *)gapDecodeWithByteArray:(IOSByteArray *)gapEncoded
                                withInt:(jint)startIndex
                                withInt:(jint)endIndex {
  return EduStanfordNlpUtilArrayUtils_gapDecodeWithByteArray_withInt_withInt_(gapEncoded, startIndex, endIndex);
}

+ (id<JavaUtilList>)gapDecodeListWithByteArray:(IOSByteArray *)gapEncoded {
  return EduStanfordNlpUtilArrayUtils_gapDecodeListWithByteArray_(gapEncoded);
}

+ (id<JavaUtilList>)gapDecodeListWithByteArray:(IOSByteArray *)gapEncoded
                                       withInt:(jint)startIndex
                                       withInt:(jint)endIndex {
  return EduStanfordNlpUtilArrayUtils_gapDecodeListWithByteArray_withInt_withInt_(gapEncoded, startIndex, endIndex);
}

+ (IOSByteArray *)deltaEncodeWithIntArray:(IOSIntArray *)orig {
  return EduStanfordNlpUtilArrayUtils_deltaEncodeWithIntArray_(orig);
}

+ (id<JavaUtilList>)deltaEncodeListWithIntArray:(IOSIntArray *)orig {
  return EduStanfordNlpUtilArrayUtils_deltaEncodeListWithIntArray_(orig);
}

+ (IOSIntArray *)deltaDecodeWithByteArray:(IOSByteArray *)deltaEncoded {
  return EduStanfordNlpUtilArrayUtils_deltaDecodeWithByteArray_(deltaEncoded);
}

+ (IOSIntArray *)deltaDecodeWithByteArray:(IOSByteArray *)deltaEncoded
                                  withInt:(jint)startIndex
                                  withInt:(jint)endIndex {
  return EduStanfordNlpUtilArrayUtils_deltaDecodeWithByteArray_withInt_withInt_(deltaEncoded, startIndex, endIndex);
}

+ (id<JavaUtilList>)deltaDecodeListWithByteArray:(IOSByteArray *)deltaEncoded {
  return EduStanfordNlpUtilArrayUtils_deltaDecodeListWithByteArray_(deltaEncoded);
}

+ (id<JavaUtilList>)deltaDecodeListWithByteArray:(IOSByteArray *)deltaEncoded
                                         withInt:(jint)startIndex
                                         withInt:(jint)endIndex {
  return EduStanfordNlpUtilArrayUtils_deltaDecodeListWithByteArray_withInt_withInt_(deltaEncoded, startIndex, endIndex);
}

+ (IOSByteArray *)bitSetToByteArrayWithJavaUtilBitSet:(JavaUtilBitSet *)bitSet {
  return EduStanfordNlpUtilArrayUtils_bitSetToByteArrayWithJavaUtilBitSet_(bitSet);
}

+ (JavaUtilBitSet *)byteArrayToBitSetWithByteArray:(IOSByteArray *)array {
  return EduStanfordNlpUtilArrayUtils_byteArrayToBitSetWithByteArray_(array);
}

+ (IOSDoubleArray *)flattenWithDoubleArray2:(IOSObjectArray *)array {
  return EduStanfordNlpUtilArrayUtils_flattenWithDoubleArray2_(array);
}

+ (IOSObjectArray *)to2DWithDoubleArray:(IOSDoubleArray *)array
                                withInt:(jint)dim1Size {
  return EduStanfordNlpUtilArrayUtils_to2DWithDoubleArray_withInt_(array, dim1Size);
}

+ (IOSObjectArray *)to2DWithDoubleArray:(IOSDoubleArray *)array
                                withInt:(jint)dim1Size
                                withInt:(jint)dim2Size {
  return EduStanfordNlpUtilArrayUtils_to2DWithDoubleArray_withInt_withInt_(array, dim1Size, dim2Size);
}

+ (IOSDoubleArray *)removeAtWithDoubleArray:(IOSDoubleArray *)array
                                    withInt:(jint)index {
  return EduStanfordNlpUtilArrayUtils_removeAtWithDoubleArray_withInt_(array, index);
}

+ (IOSObjectArray *)removeAtWithNSObjectArray:(IOSObjectArray *)array
                                      withInt:(jint)index {
  return EduStanfordNlpUtilArrayUtils_removeAtWithNSObjectArray_withInt_(array, index);
}

+ (NSString *)toStringWithIntArray2:(IOSObjectArray *)a {
  return EduStanfordNlpUtilArrayUtils_toStringWithIntArray2_(a);
}

+ (jboolean)equalContentsWithIntArray2:(IOSObjectArray *)xs
                         withIntArray2:(IOSObjectArray *)ys {
  return EduStanfordNlpUtilArrayUtils_equalContentsWithIntArray2_withIntArray2_(xs, ys);
}

+ (jboolean)equalsWithDoubleArray2:(IOSObjectArray *)xs
                  withDoubleArray2:(IOSObjectArray *)ys {
  return EduStanfordNlpUtilArrayUtils_equalsWithDoubleArray2_withDoubleArray2_(xs, ys);
}

+ (jboolean)equalContentsWithIntArray:(IOSIntArray *)xs
                         withIntArray:(IOSIntArray *)ys {
  return EduStanfordNlpUtilArrayUtils_equalContentsWithIntArray_withIntArray_(xs, ys);
}

+ (jboolean)equalsWithBooleanArray2:(IOSObjectArray *)xs
                  withBooleanArray2:(IOSObjectArray *)ys {
  return EduStanfordNlpUtilArrayUtils_equalsWithBooleanArray2_withBooleanArray2_(xs, ys);
}

+ (jboolean)containsWithNSObjectArray:(IOSObjectArray *)a
                               withId:(id)o {
  return EduStanfordNlpUtilArrayUtils_containsWithNSObjectArray_withId_(a, o);
}

+ (IOSObjectArray *)concatenateWithNSObjectArray:(IOSObjectArray *)first
                               withNSObjectArray:(IOSObjectArray *)second {
  return EduStanfordNlpUtilArrayUtils_concatenateWithNSObjectArray_withNSObjectArray_(first, second);
}

+ (IOSObjectArray *)filterWithNSObjectArray:(IOSObjectArray *)original
              withJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)filter {
  return EduStanfordNlpUtilArrayUtils_filterWithNSObjectArray_withJavaUtilFunctionPredicate_(original, filter);
}

+ (id<JavaUtilSet>)asSetWithNSObjectArray:(IOSObjectArray *)a {
  return EduStanfordNlpUtilArrayUtils_asSetWithNSObjectArray_(a);
}

+ (id<JavaUtilSet>)asImmutableSetWithNSObjectArray:(IOSObjectArray *)a {
  return EduStanfordNlpUtilArrayUtils_asImmutableSetWithNSObjectArray_(a);
}

+ (void)fillWithDoubleArray2:(IOSObjectArray *)d
                  withDouble:(jdouble)val {
  EduStanfordNlpUtilArrayUtils_fillWithDoubleArray2_withDouble_(d, val);
}

+ (void)fillWithDoubleArray3:(IOSObjectArray *)d
                  withDouble:(jdouble)val {
  EduStanfordNlpUtilArrayUtils_fillWithDoubleArray3_withDouble_(d, val);
}

+ (void)fillWithDoubleArray4:(IOSObjectArray *)d
                  withDouble:(jdouble)val {
  EduStanfordNlpUtilArrayUtils_fillWithDoubleArray4_withDouble_(d, val);
}

+ (void)fillWithBooleanArray2:(IOSObjectArray *)d
                  withBoolean:(jboolean)val {
  EduStanfordNlpUtilArrayUtils_fillWithBooleanArray2_withBoolean_(d, val);
}

+ (void)fillWithBooleanArray3:(IOSObjectArray *)d
                  withBoolean:(jboolean)val {
  EduStanfordNlpUtilArrayUtils_fillWithBooleanArray3_withBoolean_(d, val);
}

+ (void)fillWithBooleanArray4:(IOSObjectArray *)d
                  withBoolean:(jboolean)val {
  EduStanfordNlpUtilArrayUtils_fillWithBooleanArray4_withBoolean_(d, val);
}

+ (IOSDoubleArray *)toDoubleWithFloatArray:(IOSFloatArray *)a {
  return EduStanfordNlpUtilArrayUtils_toDoubleWithFloatArray_(a);
}

+ (IOSDoubleArray *)toDoubleWithIntArray:(IOSIntArray *)array {
  return EduStanfordNlpUtilArrayUtils_toDoubleWithIntArray_(array);
}

+ (id<JavaUtilList>)asListWithIntArray:(IOSIntArray *)array {
  return EduStanfordNlpUtilArrayUtils_asListWithIntArray_(array);
}

+ (IOSDoubleArray *)asPrimitiveDoubleArrayWithJavaUtilCollection:(id<JavaUtilCollection>)d {
  return EduStanfordNlpUtilArrayUtils_asPrimitiveDoubleArrayWithJavaUtilCollection_(d);
}

+ (IOSIntArray *)asPrimitiveIntArrayWithJavaUtilCollection:(id<JavaUtilCollection>)d {
  return EduStanfordNlpUtilArrayUtils_asPrimitiveIntArrayWithJavaUtilCollection_(d);
}

+ (IOSLongArray *)copy__WithLongArray:(IOSLongArray *)arr {
  return EduStanfordNlpUtilArrayUtils_copy__WithLongArray_(arr);
}

+ (IOSIntArray *)copy__WithIntArray:(IOSIntArray *)i {
  return EduStanfordNlpUtilArrayUtils_copy__WithIntArray_(i);
}

+ (IOSObjectArray *)copy__WithIntArray2:(IOSObjectArray *)i {
  return EduStanfordNlpUtilArrayUtils_copy__WithIntArray2_(i);
}

+ (IOSDoubleArray *)copy__WithDoubleArray:(IOSDoubleArray *)d {
  return EduStanfordNlpUtilArrayUtils_copy__WithDoubleArray_(d);
}

+ (IOSObjectArray *)copy__WithDoubleArray2:(IOSObjectArray *)d {
  return EduStanfordNlpUtilArrayUtils_copy__WithDoubleArray2_(d);
}

+ (IOSObjectArray *)copy__WithDoubleArray3:(IOSObjectArray *)d {
  return EduStanfordNlpUtilArrayUtils_copy__WithDoubleArray3_(d);
}

+ (IOSFloatArray *)copy__WithFloatArray:(IOSFloatArray *)d {
  return EduStanfordNlpUtilArrayUtils_copy__WithFloatArray_(d);
}

+ (IOSObjectArray *)copy__WithFloatArray2:(IOSObjectArray *)d {
  return EduStanfordNlpUtilArrayUtils_copy__WithFloatArray2_(d);
}

+ (IOSObjectArray *)copy__WithFloatArray3:(IOSObjectArray *)d {
  return EduStanfordNlpUtilArrayUtils_copy__WithFloatArray3_(d);
}

+ (NSString *)toStringWithDoubleArray2:(IOSObjectArray *)b {
  return EduStanfordNlpUtilArrayUtils_toStringWithDoubleArray2_(b);
}

+ (NSString *)toStringWithBooleanArray2:(IOSObjectArray *)b {
  return EduStanfordNlpUtilArrayUtils_toStringWithBooleanArray2_(b);
}

+ (IOSLongArray *)toPrimitiveWithJavaLangLongArray:(IOSObjectArray *)inArg {
  return EduStanfordNlpUtilArrayUtils_toPrimitiveWithJavaLangLongArray_(inArg);
}

+ (IOSIntArray *)toPrimitiveWithJavaLangIntegerArray:(IOSObjectArray *)inArg {
  return EduStanfordNlpUtilArrayUtils_toPrimitiveWithJavaLangIntegerArray_(inArg);
}

+ (IOSShortArray *)toPrimitiveWithJavaLangShortArray:(IOSObjectArray *)inArg {
  return EduStanfordNlpUtilArrayUtils_toPrimitiveWithJavaLangShortArray_(inArg);
}

+ (IOSCharArray *)toPrimitiveWithJavaLangCharacterArray:(IOSObjectArray *)inArg {
  return EduStanfordNlpUtilArrayUtils_toPrimitiveWithJavaLangCharacterArray_(inArg);
}

+ (IOSDoubleArray *)toPrimitiveWithJavaLangDoubleArray:(IOSObjectArray *)inArg {
  return EduStanfordNlpUtilArrayUtils_toPrimitiveWithJavaLangDoubleArray_(inArg);
}

+ (IOSLongArray *)toPrimitiveWithJavaLangLongArray:(IOSObjectArray *)inArg
                                          withLong:(jlong)valueForNull {
  return EduStanfordNlpUtilArrayUtils_toPrimitiveWithJavaLangLongArray_withLong_(inArg, valueForNull);
}

+ (IOSIntArray *)toPrimitiveWithJavaLangIntegerArray:(IOSObjectArray *)inArg
                                             withInt:(jint)valueForNull {
  return EduStanfordNlpUtilArrayUtils_toPrimitiveWithJavaLangIntegerArray_withInt_(inArg, valueForNull);
}

+ (IOSShortArray *)toPrimitiveWithJavaLangShortArray:(IOSObjectArray *)inArg
                                           withShort:(jshort)valueForNull {
  return EduStanfordNlpUtilArrayUtils_toPrimitiveWithJavaLangShortArray_withShort_(inArg, valueForNull);
}

+ (IOSCharArray *)toPrimitiveWithJavaLangCharacterArray:(IOSObjectArray *)inArg
                                               withChar:(jchar)valueForNull {
  return EduStanfordNlpUtilArrayUtils_toPrimitiveWithJavaLangCharacterArray_withChar_(inArg, valueForNull);
}

+ (IOSDoubleArray *)toDoubleArrayWithNSStringArray:(IOSObjectArray *)inArg {
  return EduStanfordNlpUtilArrayUtils_toDoubleArrayWithNSStringArray_(inArg);
}

+ (IOSDoubleArray *)toPrimitiveWithJavaLangDoubleArray:(IOSObjectArray *)inArg
                                            withDouble:(jdouble)valueForNull {
  return EduStanfordNlpUtilArrayUtils_toPrimitiveWithJavaLangDoubleArray_withDouble_(inArg, valueForNull);
}

+ (jint)compareArraysWithJavaLangComparableArray:(IOSObjectArray *)first
                     withJavaLangComparableArray:(IOSObjectArray *)second {
  return EduStanfordNlpUtilArrayUtils_compareArraysWithJavaLangComparableArray_withJavaLangComparableArray_(first, second);
}

+ (id<JavaUtilList>)getSubListIndexWithNSObjectArray:(IOSObjectArray *)tofind
                                   withNSObjectArray:(IOSObjectArray *)tokens {
  return EduStanfordNlpUtilArrayUtils_getSubListIndexWithNSObjectArray_withNSObjectArray_(tofind, tokens);
}

+ (id<JavaUtilList>)getSubListIndexWithNSObjectArray:(IOSObjectArray *)tofind
                                   withNSObjectArray:(IOSObjectArray *)tokens
                        withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)matchingFunction {
  return EduStanfordNlpUtilArrayUtils_getSubListIndexWithNSObjectArray_withNSObjectArray_withJavaUtilFunctionFunction_(tofind, tokens, matchingFunction);
}

+ (IOSDoubleArray *)normalizeWithDoubleArray:(IOSDoubleArray *)ar {
  return EduStanfordNlpUtilArrayUtils_normalizeWithDoubleArray_(ar);
}

+ (IOSObjectArray *)subArrayWithNSObjectArray:(IOSObjectArray *)arr
                                      withInt:(jint)startindexInclusive
                                      withInt:(jint)endindexExclusive {
  return EduStanfordNlpUtilArrayUtils_subArrayWithNSObjectArray_withInt_withInt_(arr, startindexInclusive, endindexExclusive);
}

+ (jint)compareBooleanArraysWithBooleanArray:(IOSBooleanArray *)a1
                            withBooleanArray:(IOSBooleanArray *)a2 {
  return EduStanfordNlpUtilArrayUtils_compareBooleanArraysWithBooleanArray_withBooleanArray_(a1, a2);
}

+ (NSString *)toStringWithDoubleArray:(IOSDoubleArray *)doubles
                         withNSString:(NSString *)glue {
  return EduStanfordNlpUtilArrayUtils_toStringWithDoubleArray_withNSString_(doubles, glue);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 2, 1, -1, 3, -1, -1 },
    { NULL, "[I", 0x9, 4, 5, -1, -1, -1, -1 },
    { NULL, "[I", 0x9, 4, 6, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 7, 5, -1, 8, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 7, 6, -1, 9, -1, -1 },
    { NULL, "[B", 0x9, 10, 1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 11, 1, -1, 3, -1, -1 },
    { NULL, "[I", 0x9, 12, 5, -1, -1, -1, -1 },
    { NULL, "[I", 0x9, 12, 6, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 13, 5, -1, 8, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 13, 6, -1, 9, -1, -1 },
    { NULL, "[B", 0xa, 14, 15, -1, -1, -1, -1 },
    { NULL, "LJavaUtilBitSet;", 0xa, 16, 5, -1, -1, -1, -1 },
    { NULL, "[D", 0x9, 17, 18, -1, -1, -1, -1 },
    { NULL, "[[D", 0x9, 19, 20, -1, -1, -1, -1 },
    { NULL, "[[D", 0x9, 19, 21, -1, -1, -1, -1 },
    { NULL, "[D", 0x9, 22, 20, -1, -1, -1, -1 },
    { NULL, "[LNSObject;", 0x9, 22, 23, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 24, 25, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 26, 27, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 28, 29, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 26, 30, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 28, 31, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 32, 33, -1, 34, -1, -1 },
    { NULL, "[LNSObject;", 0x9, 35, 36, -1, 37, -1, -1 },
    { NULL, "[LNSObject;", 0x9, 38, 39, -1, 40, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x9, 41, 42, -1, 43, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x9, 44, 42, -1, 43, -1, -1 },
    { NULL, "V", 0x9, 45, 46, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 45, 47, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 45, 48, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 45, 49, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 45, 50, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 45, 51, -1, -1, -1, -1 },
    { NULL, "[D", 0x9, 52, 53, -1, -1, -1, -1 },
    { NULL, "[D", 0x9, 52, 1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 54, 1, -1, 55, -1, -1 },
    { NULL, "[D", 0x9, 56, 57, -1, 58, -1, -1 },
    { NULL, "[I", 0x9, 59, 57, -1, 60, -1, -1 },
    { NULL, "[J", 0x9, 61, 62, -1, -1, -1, -1 },
    { NULL, "[I", 0x9, 61, 1, -1, -1, -1, -1 },
    { NULL, "[[I", 0x9, 61, 25, -1, -1, -1, -1 },
    { NULL, "[D", 0x9, 61, 63, -1, -1, -1, -1 },
    { NULL, "[[D", 0x9, 61, 18, -1, -1, -1, -1 },
    { NULL, "[[[D", 0x9, 61, 64, -1, -1, -1, -1 },
    { NULL, "[F", 0x9, 61, 53, -1, -1, -1, -1 },
    { NULL, "[[F", 0x9, 61, 65, -1, -1, -1, -1 },
    { NULL, "[[[F", 0x9, 61, 66, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 24, 18, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 24, 67, -1, -1, -1, -1 },
    { NULL, "[J", 0x9, 68, 69, -1, -1, -1, -1 },
    { NULL, "[I", 0x9, 68, 70, -1, -1, -1, -1 },
    { NULL, "[S", 0x9, 68, 71, -1, -1, -1, -1 },
    { NULL, "[C", 0x9, 68, 72, -1, -1, -1, -1 },
    { NULL, "[D", 0x9, 68, 73, -1, -1, -1, -1 },
    { NULL, "[J", 0x9, 68, 74, -1, -1, -1, -1 },
    { NULL, "[I", 0x9, 68, 75, -1, -1, -1, -1 },
    { NULL, "[S", 0x9, 68, 76, -1, -1, -1, -1 },
    { NULL, "[C", 0x9, 68, 77, -1, -1, -1, -1 },
    { NULL, "[D", 0x9, 78, 79, -1, -1, -1, -1 },
    { NULL, "[D", 0x9, 68, 80, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 81, 82, -1, 83, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 84, 36, -1, 85, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 84, 86, -1, 87, -1, -1 },
    { NULL, "[D", 0x9, 88, 63, -1, -1, -1, -1 },
    { NULL, "[LNSObject;", 0x9, 89, 90, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 91, 92, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 24, 93, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(gapEncodeWithIntArray:);
  methods[2].selector = @selector(gapEncodeListWithIntArray:);
  methods[3].selector = @selector(gapDecodeWithByteArray:);
  methods[4].selector = @selector(gapDecodeWithByteArray:withInt:withInt:);
  methods[5].selector = @selector(gapDecodeListWithByteArray:);
  methods[6].selector = @selector(gapDecodeListWithByteArray:withInt:withInt:);
  methods[7].selector = @selector(deltaEncodeWithIntArray:);
  methods[8].selector = @selector(deltaEncodeListWithIntArray:);
  methods[9].selector = @selector(deltaDecodeWithByteArray:);
  methods[10].selector = @selector(deltaDecodeWithByteArray:withInt:withInt:);
  methods[11].selector = @selector(deltaDecodeListWithByteArray:);
  methods[12].selector = @selector(deltaDecodeListWithByteArray:withInt:withInt:);
  methods[13].selector = @selector(bitSetToByteArrayWithJavaUtilBitSet:);
  methods[14].selector = @selector(byteArrayToBitSetWithByteArray:);
  methods[15].selector = @selector(flattenWithDoubleArray2:);
  methods[16].selector = @selector(to2DWithDoubleArray:withInt:);
  methods[17].selector = @selector(to2DWithDoubleArray:withInt:withInt:);
  methods[18].selector = @selector(removeAtWithDoubleArray:withInt:);
  methods[19].selector = @selector(removeAtWithNSObjectArray:withInt:);
  methods[20].selector = @selector(toStringWithIntArray2:);
  methods[21].selector = @selector(equalContentsWithIntArray2:withIntArray2:);
  methods[22].selector = @selector(equalsWithDoubleArray2:withDoubleArray2:);
  methods[23].selector = @selector(equalContentsWithIntArray:withIntArray:);
  methods[24].selector = @selector(equalsWithBooleanArray2:withBooleanArray2:);
  methods[25].selector = @selector(containsWithNSObjectArray:withId:);
  methods[26].selector = @selector(concatenateWithNSObjectArray:withNSObjectArray:);
  methods[27].selector = @selector(filterWithNSObjectArray:withJavaUtilFunctionPredicate:);
  methods[28].selector = @selector(asSetWithNSObjectArray:);
  methods[29].selector = @selector(asImmutableSetWithNSObjectArray:);
  methods[30].selector = @selector(fillWithDoubleArray2:withDouble:);
  methods[31].selector = @selector(fillWithDoubleArray3:withDouble:);
  methods[32].selector = @selector(fillWithDoubleArray4:withDouble:);
  methods[33].selector = @selector(fillWithBooleanArray2:withBoolean:);
  methods[34].selector = @selector(fillWithBooleanArray3:withBoolean:);
  methods[35].selector = @selector(fillWithBooleanArray4:withBoolean:);
  methods[36].selector = @selector(toDoubleWithFloatArray:);
  methods[37].selector = @selector(toDoubleWithIntArray:);
  methods[38].selector = @selector(asListWithIntArray:);
  methods[39].selector = @selector(asPrimitiveDoubleArrayWithJavaUtilCollection:);
  methods[40].selector = @selector(asPrimitiveIntArrayWithJavaUtilCollection:);
  methods[41].selector = @selector(copy__WithLongArray:);
  methods[42].selector = @selector(copy__WithIntArray:);
  methods[43].selector = @selector(copy__WithIntArray2:);
  methods[44].selector = @selector(copy__WithDoubleArray:);
  methods[45].selector = @selector(copy__WithDoubleArray2:);
  methods[46].selector = @selector(copy__WithDoubleArray3:);
  methods[47].selector = @selector(copy__WithFloatArray:);
  methods[48].selector = @selector(copy__WithFloatArray2:);
  methods[49].selector = @selector(copy__WithFloatArray3:);
  methods[50].selector = @selector(toStringWithDoubleArray2:);
  methods[51].selector = @selector(toStringWithBooleanArray2:);
  methods[52].selector = @selector(toPrimitiveWithJavaLangLongArray:);
  methods[53].selector = @selector(toPrimitiveWithJavaLangIntegerArray:);
  methods[54].selector = @selector(toPrimitiveWithJavaLangShortArray:);
  methods[55].selector = @selector(toPrimitiveWithJavaLangCharacterArray:);
  methods[56].selector = @selector(toPrimitiveWithJavaLangDoubleArray:);
  methods[57].selector = @selector(toPrimitiveWithJavaLangLongArray:withLong:);
  methods[58].selector = @selector(toPrimitiveWithJavaLangIntegerArray:withInt:);
  methods[59].selector = @selector(toPrimitiveWithJavaLangShortArray:withShort:);
  methods[60].selector = @selector(toPrimitiveWithJavaLangCharacterArray:withChar:);
  methods[61].selector = @selector(toDoubleArrayWithNSStringArray:);
  methods[62].selector = @selector(toPrimitiveWithJavaLangDoubleArray:withDouble:);
  methods[63].selector = @selector(compareArraysWithJavaLangComparableArray:withJavaLangComparableArray:);
  methods[64].selector = @selector(getSubListIndexWithNSObjectArray:withNSObjectArray:);
  methods[65].selector = @selector(getSubListIndexWithNSObjectArray:withNSObjectArray:withJavaUtilFunctionFunction:);
  methods[66].selector = @selector(normalizeWithDoubleArray:);
  methods[67].selector = @selector(subArrayWithNSObjectArray:withInt:withInt:);
  methods[68].selector = @selector(compareBooleanArraysWithBooleanArray:withBooleanArray:);
  methods[69].selector = @selector(toStringWithDoubleArray:withNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "gapEncode", "[I", "gapEncodeList", "([I)Ljava/util/List<Ljava/lang/Byte;>;", "gapDecode", "[B", "[BII", "gapDecodeList", "([B)Ljava/util/List<Ljava/lang/Integer;>;", "([BII)Ljava/util/List<Ljava/lang/Integer;>;", "deltaEncode", "deltaEncodeList", "deltaDecode", "deltaDecodeList", "bitSetToByteArray", "LJavaUtilBitSet;", "byteArrayToBitSet", "flatten", "[[D", "to2D", "[DI", "[DII", "removeAt", "[LNSObject;I", "toString", "[[I", "equalContents", "[[I[[I", "equals", "[[D[[D", "[I[I", "[[Z[[Z", "contains", "[LNSObject;LNSObject;", "<T:Ljava/lang/Object;>([TT;TT;)Z", "concatenate", "[LNSObject;[LNSObject;", "<T:Ljava/lang/Object;>([TT;[TT;)[TT;", "filter", "[LNSObject;LJavaUtilFunctionPredicate;", "<T:Ljava/lang/Object;>([TT;Ljava/util/function/Predicate<-TT;>;)[TT;", "asSet", "[LNSObject;", "<T:Ljava/lang/Object;>([TT;)Ljava/util/Set<TT;>;", "asImmutableSet", "fill", "[[DD", "[[[DD", "[[[[DD", "[[ZZ", "[[[ZZ", "[[[[ZZ", "toDouble", "[F", "asList", "([I)Ljava/util/List<Ljava/lang/Integer;>;", "asPrimitiveDoubleArray", "LJavaUtilCollection;", "(Ljava/util/Collection<Ljava/lang/Double;>;)[D", "asPrimitiveIntArray", "(Ljava/util/Collection<Ljava/lang/Integer;>;)[I", "copy", "[J", "[D", "[[[D", "[[F", "[[[F", "[[Z", "toPrimitive", "[LJavaLangLong;", "[LJavaLangInteger;", "[LJavaLangShort;", "[LJavaLangCharacter;", "[LJavaLangDouble;", "[LJavaLangLong;J", "[LJavaLangInteger;I", "[LJavaLangShort;S", "[LJavaLangCharacter;C", "toDoubleArray", "[LNSString;", "[LJavaLangDouble;D", "compareArrays", "[LJavaLangComparable;[LJavaLangComparable;", "<T::Ljava/lang/Comparable<TT;>;>([TT;[TT;)I", "getSubListIndex", "([Ljava/lang/Object;[Ljava/lang/Object;)Ljava/util/List<Ljava/lang/Integer;>;", "[LNSObject;[LNSObject;LJavaUtilFunctionFunction;", "([Ljava/lang/Object;[Ljava/lang/Object;Ljava/util/function/Function<Ledu/stanford/nlp/util/Pair;Ljava/lang/Boolean;>;)Ljava/util/List<Ljava/lang/Integer;>;", "normalize", "subArray", "[LNSObject;II", "compareBooleanArrays", "[Z[Z", "[DLNSString;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilArrayUtils = { "ArrayUtils", "edu.stanford.nlp.util", ptrTable, methods, NULL, 7, 0x1, 70, 0, -1, -1, -1, -1, -1 };
  return &_EduStanfordNlpUtilArrayUtils;
}

@end

void EduStanfordNlpUtilArrayUtils_init(EduStanfordNlpUtilArrayUtils *self) {
  NSObject_init(self);
}

EduStanfordNlpUtilArrayUtils *new_EduStanfordNlpUtilArrayUtils_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilArrayUtils, init)
}

EduStanfordNlpUtilArrayUtils *create_EduStanfordNlpUtilArrayUtils_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilArrayUtils, init)
}

IOSByteArray *EduStanfordNlpUtilArrayUtils_gapEncodeWithIntArray_(IOSIntArray *orig) {
  EduStanfordNlpUtilArrayUtils_initialize();
  id<JavaUtilList> encodedList = EduStanfordNlpUtilArrayUtils_gapEncodeListWithIntArray_(orig);
  IOSByteArray *arr = [IOSByteArray newArrayWithLength:[((id<JavaUtilList>) nil_chk(encodedList)) size]];
  jint i = 0;
  for (JavaLangByte *boxed__ in encodedList) {
    jbyte b = [((JavaLangByte *) nil_chk(boxed__)) charValue];
    *IOSByteArray_GetRef(arr, i++) = b;
  }
  return arr;
}

id<JavaUtilList> EduStanfordNlpUtilArrayUtils_gapEncodeListWithIntArray_(IOSIntArray *orig) {
  EduStanfordNlpUtilArrayUtils_initialize();
  for (jint i = 1; i < ((IOSIntArray *) nil_chk(orig))->size_; i++) {
    if (IOSIntArray_Get(orig, i) < IOSIntArray_Get(orig, i - 1)) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Array must be sorted!");
    }
  }
  id<JavaUtilList> bytes = new_JavaUtilArrayList_init();
  jint index = 0;
  jint prevNum = 0;
  jbyte currByte = JreLShift32(0, 8);
  {
    IOSIntArray *a__ = orig;
    jint const *b__ = a__->buffer_;
    jint const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jint f = *b__++;
      NSString *n = (f == prevNum ? @"" : JavaLangInteger_toStringWithInt_withInt_(f - prevNum, 2));
      for (jint ii = 0; ii < ((jint) [n length]); ii++) {
        if (index == 8) {
          [bytes addWithId:JavaLangByte_valueOfWithByte_(currByte)];
          currByte = JreLShift32(0, 8);
          index = 0;
        }
        JreLShiftAssignByte(&currByte, 1);
        currByte++;
        index++;
      }
      if (index == 8) {
        [bytes addWithId:JavaLangByte_valueOfWithByte_(currByte)];
        currByte = JreLShift32(0, 8);
        index = 0;
      }
      JreLShiftAssignByte(&currByte, 1);
      index++;
      for (jint i = 1; i < ((jint) [n length]); i++) {
        if (index == 8) {
          [bytes addWithId:JavaLangByte_valueOfWithByte_(currByte)];
          currByte = JreLShift32(0, 8);
          index = 0;
        }
        JreLShiftAssignByte(&currByte, 1);
        if ([n charAtWithInt:i] == '1') {
          currByte++;
        }
        index++;
      }
      prevNum = f;
    }
  }
  while (index > 0 && index < 9) {
    if (index == 8) {
      [bytes addWithId:JavaLangByte_valueOfWithByte_(currByte)];
      break;
    }
    JreLShiftAssignByte(&currByte, 1);
    currByte++;
    index++;
  }
  return bytes;
}

IOSIntArray *EduStanfordNlpUtilArrayUtils_gapDecodeWithByteArray_(IOSByteArray *gapEncoded) {
  EduStanfordNlpUtilArrayUtils_initialize();
  return EduStanfordNlpUtilArrayUtils_gapDecodeWithByteArray_withInt_withInt_(gapEncoded, 0, ((IOSByteArray *) nil_chk(gapEncoded))->size_);
}

IOSIntArray *EduStanfordNlpUtilArrayUtils_gapDecodeWithByteArray_withInt_withInt_(IOSByteArray *gapEncoded, jint startIndex, jint endIndex) {
  EduStanfordNlpUtilArrayUtils_initialize();
  id<JavaUtilList> ints = EduStanfordNlpUtilArrayUtils_gapDecodeListWithByteArray_withInt_withInt_(gapEncoded, startIndex, endIndex);
  IOSIntArray *arr = [IOSIntArray newArrayWithLength:[((id<JavaUtilList>) nil_chk(ints)) size]];
  jint index = 0;
  for (JavaLangInteger *boxed__ in ints) {
    jint i = [((JavaLangInteger *) nil_chk(boxed__)) intValue];
    *IOSIntArray_GetRef(arr, index++) = i;
  }
  return arr;
}

id<JavaUtilList> EduStanfordNlpUtilArrayUtils_gapDecodeListWithByteArray_(IOSByteArray *gapEncoded) {
  EduStanfordNlpUtilArrayUtils_initialize();
  return EduStanfordNlpUtilArrayUtils_gapDecodeListWithByteArray_withInt_withInt_(gapEncoded, 0, ((IOSByteArray *) nil_chk(gapEncoded))->size_);
}

id<JavaUtilList> EduStanfordNlpUtilArrayUtils_gapDecodeListWithByteArray_withInt_withInt_(IOSByteArray *gapEncoded, jint startIndex, jint endIndex) {
  EduStanfordNlpUtilArrayUtils_initialize();
  jboolean gettingSize = true;
  jint size = 0;
  id<JavaUtilList> ints = new_JavaUtilArrayList_init();
  jint gap = 0;
  jint prevNum = 0;
  for (jint i = startIndex; i < endIndex; i++) {
    jbyte b = IOSByteArray_Get(nil_chk(gapEncoded), i);
    for (jint index = 7; index >= 0; index--) {
      jboolean value = ((JreRShift32(b, index)) & 1) == 1;
      if (gettingSize) {
        if (value) {
          size++;
        }
        else {
          if (size == 0) {
            [ints addWithId:JavaLangInteger_valueOfWithInt_(prevNum)];
          }
          else if (size == 1) {
            prevNum++;
            [ints addWithId:JavaLangInteger_valueOfWithInt_(prevNum)];
            size = 0;
          }
          else {
            gettingSize = false;
            gap = 1;
            size--;
          }
        }
      }
      else {
        JreLShiftAssignInt(&gap, 1);
        if (value) {
          gap++;
        }
        size--;
        if (size == 0) {
          prevNum += gap;
          [ints addWithId:JavaLangInteger_valueOfWithInt_(prevNum)];
          gettingSize = true;
        }
      }
    }
  }
  return ints;
}

IOSByteArray *EduStanfordNlpUtilArrayUtils_deltaEncodeWithIntArray_(IOSIntArray *orig) {
  EduStanfordNlpUtilArrayUtils_initialize();
  id<JavaUtilList> encodedList = EduStanfordNlpUtilArrayUtils_deltaEncodeListWithIntArray_(orig);
  IOSByteArray *arr = [IOSByteArray newArrayWithLength:[((id<JavaUtilList>) nil_chk(encodedList)) size]];
  jint i = 0;
  for (JavaLangByte *boxed__ in encodedList) {
    jbyte b = [((JavaLangByte *) nil_chk(boxed__)) charValue];
    *IOSByteArray_GetRef(arr, i++) = b;
  }
  return arr;
}

id<JavaUtilList> EduStanfordNlpUtilArrayUtils_deltaEncodeListWithIntArray_(IOSIntArray *orig) {
  EduStanfordNlpUtilArrayUtils_initialize();
  for (jint i = 1; i < ((IOSIntArray *) nil_chk(orig))->size_; i++) {
    if (IOSIntArray_Get(orig, i) < IOSIntArray_Get(orig, i - 1)) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Array must be sorted!");
    }
  }
  id<JavaUtilList> bytes = new_JavaUtilArrayList_init();
  jint index = 0;
  jint prevNum = 0;
  jbyte currByte = JreLShift32(0, 8);
  {
    IOSIntArray *a__ = orig;
    jint const *b__ = a__->buffer_;
    jint const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jint f = *b__++;
      NSString *n = (f == prevNum ? @"" : JavaLangInteger_toStringWithInt_withInt_(f - prevNum, 2));
      NSString *n1 = ([n isEmpty] ? @"" : JavaLangInteger_toStringWithInt_withInt_(((jint) [n length]), 2));
      for (jint ii = 0; ii < ((jint) [n1 length]); ii++) {
        if (index == 8) {
          [bytes addWithId:JavaLangByte_valueOfWithByte_(currByte)];
          currByte = JreLShift32(0, 8);
          index = 0;
        }
        JreLShiftAssignByte(&currByte, 1);
        currByte++;
        index++;
      }
      if (index == 8) {
        [bytes addWithId:JavaLangByte_valueOfWithByte_(currByte)];
        currByte = JreLShift32(0, 8);
        index = 0;
      }
      JreLShiftAssignByte(&currByte, 1);
      index++;
      for (jint i = 1; i < ((jint) [n1 length]); i++) {
        if (index == 8) {
          [bytes addWithId:JavaLangByte_valueOfWithByte_(currByte)];
          currByte = JreLShift32(0, 8);
          index = 0;
        }
        JreLShiftAssignByte(&currByte, 1);
        if ([n1 charAtWithInt:i] == '1') {
          currByte++;
        }
        index++;
      }
      for (jint i = 1; i < ((jint) [n length]); i++) {
        if (index == 8) {
          [bytes addWithId:JavaLangByte_valueOfWithByte_(currByte)];
          currByte = JreLShift32(0, 8);
          index = 0;
        }
        JreLShiftAssignByte(&currByte, 1);
        if ([n charAtWithInt:i] == '1') {
          currByte++;
        }
        index++;
      }
      prevNum = f;
    }
  }
  while (index > 0 && index < 9) {
    if (index == 8) {
      [bytes addWithId:JavaLangByte_valueOfWithByte_(currByte)];
      break;
    }
    JreLShiftAssignByte(&currByte, 1);
    currByte++;
    index++;
  }
  return bytes;
}

IOSIntArray *EduStanfordNlpUtilArrayUtils_deltaDecodeWithByteArray_(IOSByteArray *deltaEncoded) {
  EduStanfordNlpUtilArrayUtils_initialize();
  return EduStanfordNlpUtilArrayUtils_deltaDecodeWithByteArray_withInt_withInt_(deltaEncoded, 0, ((IOSByteArray *) nil_chk(deltaEncoded))->size_);
}

IOSIntArray *EduStanfordNlpUtilArrayUtils_deltaDecodeWithByteArray_withInt_withInt_(IOSByteArray *deltaEncoded, jint startIndex, jint endIndex) {
  EduStanfordNlpUtilArrayUtils_initialize();
  id<JavaUtilList> ints = EduStanfordNlpUtilArrayUtils_deltaDecodeListWithByteArray_(deltaEncoded);
  IOSIntArray *arr = [IOSIntArray newArrayWithLength:[((id<JavaUtilList>) nil_chk(ints)) size]];
  jint index = 0;
  for (JavaLangInteger *boxed__ in ints) {
    jint i = [((JavaLangInteger *) nil_chk(boxed__)) intValue];
    *IOSIntArray_GetRef(arr, index++) = i;
  }
  return arr;
}

id<JavaUtilList> EduStanfordNlpUtilArrayUtils_deltaDecodeListWithByteArray_(IOSByteArray *deltaEncoded) {
  EduStanfordNlpUtilArrayUtils_initialize();
  return EduStanfordNlpUtilArrayUtils_deltaDecodeListWithByteArray_withInt_withInt_(deltaEncoded, 0, ((IOSByteArray *) nil_chk(deltaEncoded))->size_);
}

id<JavaUtilList> EduStanfordNlpUtilArrayUtils_deltaDecodeListWithByteArray_withInt_withInt_(IOSByteArray *deltaEncoded, jint startIndex, jint endIndex) {
  EduStanfordNlpUtilArrayUtils_initialize();
  jboolean gettingSize1 = true;
  jboolean gettingSize2 = false;
  jint size1 = 0;
  id<JavaUtilList> ints = new_JavaUtilArrayList_init();
  jint gap = 0;
  jint size2 = 0;
  jint prevNum = 0;
  for (jint i = startIndex; i < endIndex; i++) {
    jbyte b = IOSByteArray_Get(nil_chk(deltaEncoded), i);
    for (jint index = 7; index >= 0; index--) {
      jboolean value = ((JreRShift32(b, index)) & 1) == 1;
      if (gettingSize1) {
        if (value) {
          size1++;
        }
        else {
          if (size1 == 0) {
            [ints addWithId:JavaLangInteger_valueOfWithInt_(prevNum)];
          }
          else if (size1 == 1) {
            prevNum++;
            [ints addWithId:JavaLangInteger_valueOfWithInt_(prevNum)];
            size1 = 0;
          }
          else {
            gettingSize1 = false;
            gettingSize2 = true;
            size2 = 1;
            size1--;
          }
        }
      }
      else if (gettingSize2) {
        JreLShiftAssignInt(&size2, 1);
        if (value) {
          size2++;
        }
        size1--;
        if (size1 == 0) {
          gettingSize2 = false;
          gap = 1;
          size2--;
        }
      }
      else {
        JreLShiftAssignInt(&gap, 1);
        if (value) {
          gap++;
        }
        size2--;
        if (size2 == 0) {
          prevNum += gap;
          [ints addWithId:JavaLangInteger_valueOfWithInt_(prevNum)];
          gettingSize1 = true;
        }
      }
    }
  }
  return ints;
}

IOSByteArray *EduStanfordNlpUtilArrayUtils_bitSetToByteArrayWithJavaUtilBitSet_(JavaUtilBitSet *bitSet) {
  EduStanfordNlpUtilArrayUtils_initialize();
  while ([((JavaUtilBitSet *) nil_chk(bitSet)) length] % 8 != 0) {
    [bitSet setWithInt:[bitSet length] withBoolean:true];
  }
  IOSByteArray *array = [IOSByteArray newArrayWithLength:[bitSet length] / 8];
  for (jint i = 0; i < array->size_; i++) {
    jint offset = i * 8;
    jint index = 0;
    for (jint j = 0; j < 8; j++) {
      JreLShiftAssignInt(&index, 1);
      if ([bitSet getWithInt:offset + j]) {
        index++;
      }
    }
    *IOSByteArray_GetRef(array, i) = (jbyte) (index - 128);
  }
  return array;
}

JavaUtilBitSet *EduStanfordNlpUtilArrayUtils_byteArrayToBitSetWithByteArray_(IOSByteArray *array) {
  EduStanfordNlpUtilArrayUtils_initialize();
  JavaUtilBitSet *bitSet = new_JavaUtilBitSet_init();
  jint index = 0;
  {
    IOSByteArray *a__ = array;
    jbyte const *b__ = ((IOSByteArray *) nil_chk(a__))->buffer_;
    jbyte const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jbyte b = *b__++;
      jint b1 = ((jint) b) + 128;
      [bitSet setWithInt:index++ withBoolean:((JreRShift32(b1, 7)) & 1) == 1];
      [bitSet setWithInt:index++ withBoolean:((JreRShift32(b1, 6)) & 1) == 1];
      [bitSet setWithInt:index++ withBoolean:((JreRShift32(b1, 5)) & 1) == 1];
      [bitSet setWithInt:index++ withBoolean:((JreRShift32(b1, 4)) & 1) == 1];
      [bitSet setWithInt:index++ withBoolean:((JreRShift32(b1, 3)) & 1) == 1];
      [bitSet setWithInt:index++ withBoolean:((JreRShift32(b1, 2)) & 1) == 1];
      [bitSet setWithInt:index++ withBoolean:((JreRShift32(b1, 1)) & 1) == 1];
      [bitSet setWithInt:index++ withBoolean:(b1 & 1) == 1];
    }
  }
  return bitSet;
}

IOSDoubleArray *EduStanfordNlpUtilArrayUtils_flattenWithDoubleArray2_(IOSObjectArray *array) {
  EduStanfordNlpUtilArrayUtils_initialize();
  jint size = 0;
  {
    IOSObjectArray *a__ = array;
    IOSDoubleArray * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    IOSDoubleArray * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      IOSDoubleArray *a = *b__++;
      size += ((IOSDoubleArray *) nil_chk(a))->size_;
    }
  }
  IOSDoubleArray *newArray = [IOSDoubleArray newArrayWithLength:size];
  jint i = 0;
  {
    IOSObjectArray *a__ = array;
    IOSDoubleArray * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    IOSDoubleArray * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      IOSDoubleArray *a = *b__++;
      {
        IOSDoubleArray *a__ = a;
        jdouble const *b__ = ((IOSDoubleArray *) nil_chk(a__))->buffer_;
        jdouble const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          jdouble d = *b__++;
          *IOSDoubleArray_GetRef(newArray, i++) = d;
        }
      }
    }
  }
  return newArray;
}

IOSObjectArray *EduStanfordNlpUtilArrayUtils_to2DWithDoubleArray_withInt_(IOSDoubleArray *array, jint dim1Size) {
  EduStanfordNlpUtilArrayUtils_initialize();
  jint dim2Size = ((IOSDoubleArray *) nil_chk(array))->size_ / dim1Size;
  return EduStanfordNlpUtilArrayUtils_to2DWithDoubleArray_withInt_withInt_(array, dim1Size, dim2Size);
}

IOSObjectArray *EduStanfordNlpUtilArrayUtils_to2DWithDoubleArray_withInt_withInt_(IOSDoubleArray *array, jint dim1Size, jint dim2Size) {
  EduStanfordNlpUtilArrayUtils_initialize();
  IOSObjectArray *newArray = [IOSDoubleArray newArrayWithDimensions:2 lengths:(jint[]){ dim1Size, dim2Size }];
  jint k = 0;
  for (jint i = 0; i < newArray->size_; i++) {
    for (jint j = 0; j < ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(newArray, i)))->size_; j++) {
      *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(newArray, i)), j) = IOSDoubleArray_Get(nil_chk(array), k++);
    }
  }
  return newArray;
}

IOSDoubleArray *EduStanfordNlpUtilArrayUtils_removeAtWithDoubleArray_withInt_(IOSDoubleArray *array, jint index) {
  EduStanfordNlpUtilArrayUtils_initialize();
  if (array == nil) {
    return nil;
  }
  if (index < 0 || index >= array->size_) {
    return array;
  }
  IOSDoubleArray *retVal = [IOSDoubleArray newArrayWithLength:array->size_ - 1];
  for (jint i = 0; i < array->size_; i++) {
    if (i < index) {
      *IOSDoubleArray_GetRef(retVal, i) = IOSDoubleArray_Get(array, i);
    }
    else if (i > index) {
      *IOSDoubleArray_GetRef(retVal, i - 1) = IOSDoubleArray_Get(array, i);
    }
  }
  return retVal;
}

IOSObjectArray *EduStanfordNlpUtilArrayUtils_removeAtWithNSObjectArray_withInt_(IOSObjectArray *array, jint index) {
  EduStanfordNlpUtilArrayUtils_initialize();
  if (array == nil) {
    return nil;
  }
  if (index < 0 || index >= array->size_) {
    return array;
  }
  IOSObjectArray *retVal = (IOSObjectArray *) cast_check(JavaLangReflectArray_newInstanceWithIOSClass_withInt_([nil_chk(IOSObjectArray_Get(array, 0)) getClass], array->size_ - 1), IOSClass_arrayType(NSObject_class_(), 1));
  for (jint i = 0; i < array->size_; i++) {
    if (i < index) {
      (void) IOSObjectArray_Set(nil_chk(retVal), i, IOSObjectArray_Get(array, i));
    }
    else if (i > index) {
      (void) IOSObjectArray_Set(nil_chk(retVal), i - 1, IOSObjectArray_Get(array, i));
    }
  }
  return retVal;
}

NSString *EduStanfordNlpUtilArrayUtils_toStringWithIntArray2_(IOSObjectArray *a) {
  EduStanfordNlpUtilArrayUtils_initialize();
  JavaLangStringBuilder *result = new_JavaLangStringBuilder_initWithNSString_(@"[");
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(a))->size_; i++) {
    (void) [result appendWithNSString:JavaUtilArrays_toStringWithIntArray_(IOSObjectArray_Get(a, i))];
    if (i < a->size_ - 1) (void) [result appendWithChar:','];
  }
  (void) [result appendWithChar:']'];
  return [result description];
}

jboolean EduStanfordNlpUtilArrayUtils_equalContentsWithIntArray2_withIntArray2_(IOSObjectArray *xs, IOSObjectArray *ys) {
  EduStanfordNlpUtilArrayUtils_initialize();
  if (xs == nil) return ys == nil;
  if (ys == nil) return false;
  if (xs->size_ != ys->size_) return false;
  for (jint i = xs->size_ - 1; i >= 0; i--) {
    if (!EduStanfordNlpUtilArrayUtils_equalContentsWithIntArray_withIntArray_(IOSObjectArray_Get(xs, i), IOSObjectArray_Get(ys, i))) return false;
  }
  return true;
}

jboolean EduStanfordNlpUtilArrayUtils_equalsWithDoubleArray2_withDoubleArray2_(IOSObjectArray *xs, IOSObjectArray *ys) {
  EduStanfordNlpUtilArrayUtils_initialize();
  if (xs == nil) return ys == nil;
  if (ys == nil) return false;
  if (xs->size_ != ys->size_) return false;
  for (jint i = xs->size_ - 1; i >= 0; i--) {
    if (!JavaUtilArrays_equalsWithDoubleArray_withDoubleArray_(IOSObjectArray_Get(xs, i), IOSObjectArray_Get(ys, i))) return false;
  }
  return true;
}

jboolean EduStanfordNlpUtilArrayUtils_equalContentsWithIntArray_withIntArray_(IOSIntArray *xs, IOSIntArray *ys) {
  EduStanfordNlpUtilArrayUtils_initialize();
  if (((IOSIntArray *) nil_chk(xs))->size_ != ((IOSIntArray *) nil_chk(ys))->size_) return false;
  for (jint i = xs->size_ - 1; i >= 0; i--) {
    if (IOSIntArray_Get(xs, i) != IOSIntArray_Get(ys, i)) return false;
  }
  return true;
}

jboolean EduStanfordNlpUtilArrayUtils_equalsWithBooleanArray2_withBooleanArray2_(IOSObjectArray *xs, IOSObjectArray *ys) {
  EduStanfordNlpUtilArrayUtils_initialize();
  if (xs == nil && ys != nil) return false;
  if (ys == nil) return false;
  if (((IOSObjectArray *) nil_chk(xs))->size_ != ys->size_) return false;
  for (jint i = xs->size_ - 1; i >= 0; i--) {
    if (!JavaUtilArrays_equalsWithBooleanArray_withBooleanArray_(IOSObjectArray_Get(xs, i), IOSObjectArray_Get(ys, i))) return false;
  }
  return true;
}

jboolean EduStanfordNlpUtilArrayUtils_containsWithNSObjectArray_withId_(IOSObjectArray *a, id o) {
  EduStanfordNlpUtilArrayUtils_initialize();
  {
    IOSObjectArray *a__ = a;
    id const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id item = *b__++;
      if ([nil_chk(item) isEqual:o]) return true;
    }
  }
  return false;
}

IOSObjectArray *EduStanfordNlpUtilArrayUtils_concatenateWithNSObjectArray_withNSObjectArray_(IOSObjectArray *first, IOSObjectArray *second) {
  EduStanfordNlpUtilArrayUtils_initialize();
  IOSObjectArray *result = JavaUtilArrays_copyOfWithNSObjectArray_withInt_(first, ((IOSObjectArray *) nil_chk(first))->size_ + ((IOSObjectArray *) nil_chk(second))->size_);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(second, 0, result, first->size_, second->size_);
  return result;
}

IOSObjectArray *EduStanfordNlpUtilArrayUtils_filterWithNSObjectArray_withJavaUtilFunctionPredicate_(IOSObjectArray *original, id<JavaUtilFunctionPredicate> filter) {
  EduStanfordNlpUtilArrayUtils_initialize();
  IOSObjectArray *result = JavaUtilArrays_copyOfWithNSObjectArray_withInt_(original, ((IOSObjectArray *) nil_chk(original))->size_);
  jint size = 0;
  {
    IOSObjectArray *a__ = original;
    id const *b__ = a__->buffer_;
    id const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id value = *b__++;
      if ([((id<JavaUtilFunctionPredicate>) nil_chk(filter)) testWithId:value]) {
        (void) IOSObjectArray_Set(nil_chk(result), size, value);
        size++;
      }
    }
  }
  if (size == original->size_) {
    return result;
  }
  return JavaUtilArrays_copyOfWithNSObjectArray_withInt_(result, size);
}

id<JavaUtilSet> EduStanfordNlpUtilArrayUtils_asSetWithNSObjectArray_(IOSObjectArray *a) {
  EduStanfordNlpUtilArrayUtils_initialize();
  return EduStanfordNlpUtilGenerics_newHashSetWithJavaUtilCollection_(JavaUtilArrays_asListWithNSObjectArray_(a));
}

id<JavaUtilSet> EduStanfordNlpUtilArrayUtils_asImmutableSetWithNSObjectArray_(IOSObjectArray *a) {
  EduStanfordNlpUtilArrayUtils_initialize();
  if (((IOSObjectArray *) nil_chk(a))->size_ == 0) {
    return JavaUtilCollections_emptySet();
  }
  else if (a->size_ == 1) {
    return JavaUtilCollections_singletonWithId_(IOSObjectArray_Get(a, 0));
  }
  else {
    return JavaUtilCollections_unmodifiableSetWithJavaUtilSet_(EduStanfordNlpUtilGenerics_newHashSetWithJavaUtilCollection_(JavaUtilArrays_asListWithNSObjectArray_(a)));
  }
}

void EduStanfordNlpUtilArrayUtils_fillWithDoubleArray2_withDouble_(IOSObjectArray *d, jdouble val) {
  EduStanfordNlpUtilArrayUtils_initialize();
  {
    IOSObjectArray *a__ = d;
    IOSDoubleArray * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    IOSDoubleArray * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      IOSDoubleArray *aD = *b__++;
      JavaUtilArrays_fillWithDoubleArray_withDouble_(aD, val);
    }
  }
}

void EduStanfordNlpUtilArrayUtils_fillWithDoubleArray3_withDouble_(IOSObjectArray *d, jdouble val) {
  EduStanfordNlpUtilArrayUtils_initialize();
  {
    IOSObjectArray *a__ = d;
    IOSObjectArray * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    IOSObjectArray * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      IOSObjectArray *aD = *b__++;
      EduStanfordNlpUtilArrayUtils_fillWithDoubleArray2_withDouble_(aD, val);
    }
  }
}

void EduStanfordNlpUtilArrayUtils_fillWithDoubleArray4_withDouble_(IOSObjectArray *d, jdouble val) {
  EduStanfordNlpUtilArrayUtils_initialize();
  {
    IOSObjectArray *a__ = d;
    IOSObjectArray * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    IOSObjectArray * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      IOSObjectArray *aD = *b__++;
      EduStanfordNlpUtilArrayUtils_fillWithDoubleArray3_withDouble_(aD, val);
    }
  }
}

void EduStanfordNlpUtilArrayUtils_fillWithBooleanArray2_withBoolean_(IOSObjectArray *d, jboolean val) {
  EduStanfordNlpUtilArrayUtils_initialize();
  {
    IOSObjectArray *a__ = d;
    IOSBooleanArray * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    IOSBooleanArray * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      IOSBooleanArray *aD = *b__++;
      JavaUtilArrays_fillWithBooleanArray_withBoolean_(aD, val);
    }
  }
}

void EduStanfordNlpUtilArrayUtils_fillWithBooleanArray3_withBoolean_(IOSObjectArray *d, jboolean val) {
  EduStanfordNlpUtilArrayUtils_initialize();
  {
    IOSObjectArray *a__ = d;
    IOSObjectArray * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    IOSObjectArray * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      IOSObjectArray *aD = *b__++;
      EduStanfordNlpUtilArrayUtils_fillWithBooleanArray2_withBoolean_(aD, val);
    }
  }
}

void EduStanfordNlpUtilArrayUtils_fillWithBooleanArray4_withBoolean_(IOSObjectArray *d, jboolean val) {
  EduStanfordNlpUtilArrayUtils_initialize();
  {
    IOSObjectArray *a__ = d;
    IOSObjectArray * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    IOSObjectArray * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      IOSObjectArray *aD = *b__++;
      EduStanfordNlpUtilArrayUtils_fillWithBooleanArray3_withBoolean_(aD, val);
    }
  }
}

IOSDoubleArray *EduStanfordNlpUtilArrayUtils_toDoubleWithFloatArray_(IOSFloatArray *a) {
  EduStanfordNlpUtilArrayUtils_initialize();
  IOSDoubleArray *d = [IOSDoubleArray newArrayWithLength:((IOSFloatArray *) nil_chk(a))->size_];
  for (jint i = 0; i < a->size_; i++) {
    *IOSDoubleArray_GetRef(d, i) = IOSFloatArray_Get(a, i);
  }
  return d;
}

IOSDoubleArray *EduStanfordNlpUtilArrayUtils_toDoubleWithIntArray_(IOSIntArray *array) {
  EduStanfordNlpUtilArrayUtils_initialize();
  IOSDoubleArray *rv = [IOSDoubleArray newArrayWithLength:((IOSIntArray *) nil_chk(array))->size_];
  for (jint i = 0; i < array->size_; i++) {
    *IOSDoubleArray_GetRef(rv, i) = IOSIntArray_Get(array, i);
  }
  return rv;
}

id<JavaUtilList> EduStanfordNlpUtilArrayUtils_asListWithIntArray_(IOSIntArray *array) {
  EduStanfordNlpUtilArrayUtils_initialize();
  id<JavaUtilList> l = new_JavaUtilArrayList_init();
  {
    IOSIntArray *a__ = array;
    jint const *b__ = ((IOSIntArray *) nil_chk(a__))->buffer_;
    jint const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jint i = *b__++;
      [l addWithId:JavaLangInteger_valueOfWithInt_(i)];
    }
  }
  return l;
}

IOSDoubleArray *EduStanfordNlpUtilArrayUtils_asPrimitiveDoubleArrayWithJavaUtilCollection_(id<JavaUtilCollection> d) {
  EduStanfordNlpUtilArrayUtils_initialize();
  IOSDoubleArray *newD = [IOSDoubleArray newArrayWithLength:[((id<JavaUtilCollection>) nil_chk(d)) size]];
  jint i = 0;
  for (JavaLangDouble * __strong j in d) {
    *IOSDoubleArray_GetRef(newD, i++) = [((JavaLangDouble *) nil_chk(j)) doubleValue];
  }
  return newD;
}

IOSIntArray *EduStanfordNlpUtilArrayUtils_asPrimitiveIntArrayWithJavaUtilCollection_(id<JavaUtilCollection> d) {
  EduStanfordNlpUtilArrayUtils_initialize();
  IOSIntArray *newI = [IOSIntArray newArrayWithLength:[((id<JavaUtilCollection>) nil_chk(d)) size]];
  jint i = 0;
  for (JavaLangInteger * __strong j in d) {
    *IOSIntArray_GetRef(newI, i++) = [((JavaLangInteger *) nil_chk(j)) intValue];
  }
  return newI;
}

IOSLongArray *EduStanfordNlpUtilArrayUtils_copy__WithLongArray_(IOSLongArray *arr) {
  EduStanfordNlpUtilArrayUtils_initialize();
  if (arr == nil) {
    return nil;
  }
  IOSLongArray *newArr = [IOSLongArray newArrayWithLength:arr->size_];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(arr, 0, newArr, 0, arr->size_);
  return newArr;
}

IOSIntArray *EduStanfordNlpUtilArrayUtils_copy__WithIntArray_(IOSIntArray *i) {
  EduStanfordNlpUtilArrayUtils_initialize();
  if (i == nil) {
    return nil;
  }
  IOSIntArray *newI = [IOSIntArray newArrayWithLength:i->size_];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(i, 0, newI, 0, i->size_);
  return newI;
}

IOSObjectArray *EduStanfordNlpUtilArrayUtils_copy__WithIntArray2_(IOSObjectArray *i) {
  EduStanfordNlpUtilArrayUtils_initialize();
  if (i == nil) {
    return nil;
  }
  IOSObjectArray *newI = [IOSObjectArray newArrayWithLength:i->size_ type:IOSClass_intArray(1)];
  for (jint j = 0; j < newI->size_; j++) {
    (void) IOSObjectArray_Set(newI, j, EduStanfordNlpUtilArrayUtils_copy__WithIntArray_(IOSObjectArray_Get(i, j)));
  }
  return newI;
}

IOSDoubleArray *EduStanfordNlpUtilArrayUtils_copy__WithDoubleArray_(IOSDoubleArray *d) {
  EduStanfordNlpUtilArrayUtils_initialize();
  if (d == nil) {
    return nil;
  }
  IOSDoubleArray *newD = [IOSDoubleArray newArrayWithLength:d->size_];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(d, 0, newD, 0, d->size_);
  return newD;
}

IOSObjectArray *EduStanfordNlpUtilArrayUtils_copy__WithDoubleArray2_(IOSObjectArray *d) {
  EduStanfordNlpUtilArrayUtils_initialize();
  if (d == nil) {
    return nil;
  }
  IOSObjectArray *newD = [IOSObjectArray newArrayWithLength:d->size_ type:IOSClass_doubleArray(1)];
  for (jint i = 0; i < newD->size_; i++) {
    (void) IOSObjectArray_Set(newD, i, EduStanfordNlpUtilArrayUtils_copy__WithDoubleArray_(IOSObjectArray_Get(d, i)));
  }
  return newD;
}

IOSObjectArray *EduStanfordNlpUtilArrayUtils_copy__WithDoubleArray3_(IOSObjectArray *d) {
  EduStanfordNlpUtilArrayUtils_initialize();
  if (d == nil) {
    return nil;
  }
  IOSObjectArray *newD = [IOSObjectArray newArrayWithLength:d->size_ type:IOSClass_doubleArray(2)];
  for (jint i = 0; i < newD->size_; i++) {
    (void) IOSObjectArray_Set(newD, i, EduStanfordNlpUtilArrayUtils_copy__WithDoubleArray2_(IOSObjectArray_Get(d, i)));
  }
  return newD;
}

IOSFloatArray *EduStanfordNlpUtilArrayUtils_copy__WithFloatArray_(IOSFloatArray *d) {
  EduStanfordNlpUtilArrayUtils_initialize();
  if (d == nil) {
    return nil;
  }
  IOSFloatArray *newD = [IOSFloatArray newArrayWithLength:d->size_];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(d, 0, newD, 0, d->size_);
  return newD;
}

IOSObjectArray *EduStanfordNlpUtilArrayUtils_copy__WithFloatArray2_(IOSObjectArray *d) {
  EduStanfordNlpUtilArrayUtils_initialize();
  if (d == nil) {
    return nil;
  }
  IOSObjectArray *newD = [IOSObjectArray newArrayWithLength:d->size_ type:IOSClass_floatArray(1)];
  for (jint i = 0; i < newD->size_; i++) {
    (void) IOSObjectArray_Set(newD, i, EduStanfordNlpUtilArrayUtils_copy__WithFloatArray_(IOSObjectArray_Get(d, i)));
  }
  return newD;
}

IOSObjectArray *EduStanfordNlpUtilArrayUtils_copy__WithFloatArray3_(IOSObjectArray *d) {
  EduStanfordNlpUtilArrayUtils_initialize();
  if (d == nil) {
    return nil;
  }
  IOSObjectArray *newD = [IOSObjectArray newArrayWithLength:d->size_ type:IOSClass_floatArray(2)];
  for (jint i = 0; i < newD->size_; i++) {
    (void) IOSObjectArray_Set(newD, i, EduStanfordNlpUtilArrayUtils_copy__WithFloatArray2_(IOSObjectArray_Get(d, i)));
  }
  return newD;
}

NSString *EduStanfordNlpUtilArrayUtils_toStringWithDoubleArray2_(IOSObjectArray *b) {
  EduStanfordNlpUtilArrayUtils_initialize();
  JavaLangStringBuilder *result = new_JavaLangStringBuilder_initWithNSString_(@"[");
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(b))->size_; i++) {
    (void) [result appendWithNSString:JavaUtilArrays_toStringWithDoubleArray_(IOSObjectArray_Get(b, i))];
    if (i < b->size_ - 1) (void) [result appendWithChar:','];
  }
  (void) [result appendWithChar:']'];
  return [result description];
}

NSString *EduStanfordNlpUtilArrayUtils_toStringWithBooleanArray2_(IOSObjectArray *b) {
  EduStanfordNlpUtilArrayUtils_initialize();
  JavaLangStringBuilder *result = new_JavaLangStringBuilder_initWithNSString_(@"[");
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(b))->size_; i++) {
    (void) [result appendWithNSString:JavaUtilArrays_toStringWithBooleanArray_(IOSObjectArray_Get(b, i))];
    if (i < b->size_ - 1) (void) [result appendWithChar:','];
  }
  (void) [result appendWithChar:']'];
  return [result description];
}

IOSLongArray *EduStanfordNlpUtilArrayUtils_toPrimitiveWithJavaLangLongArray_(IOSObjectArray *inArg) {
  EduStanfordNlpUtilArrayUtils_initialize();
  return EduStanfordNlpUtilArrayUtils_toPrimitiveWithJavaLangLongArray_withLong_(inArg, 0LL);
}

IOSIntArray *EduStanfordNlpUtilArrayUtils_toPrimitiveWithJavaLangIntegerArray_(IOSObjectArray *inArg) {
  EduStanfordNlpUtilArrayUtils_initialize();
  return EduStanfordNlpUtilArrayUtils_toPrimitiveWithJavaLangIntegerArray_withInt_(inArg, 0);
}

IOSShortArray *EduStanfordNlpUtilArrayUtils_toPrimitiveWithJavaLangShortArray_(IOSObjectArray *inArg) {
  EduStanfordNlpUtilArrayUtils_initialize();
  return EduStanfordNlpUtilArrayUtils_toPrimitiveWithJavaLangShortArray_withShort_(inArg, (jshort) 0);
}

IOSCharArray *EduStanfordNlpUtilArrayUtils_toPrimitiveWithJavaLangCharacterArray_(IOSObjectArray *inArg) {
  EduStanfordNlpUtilArrayUtils_initialize();
  return EduStanfordNlpUtilArrayUtils_toPrimitiveWithJavaLangCharacterArray_withChar_(inArg, (jchar) 0);
}

IOSDoubleArray *EduStanfordNlpUtilArrayUtils_toPrimitiveWithJavaLangDoubleArray_(IOSObjectArray *inArg) {
  EduStanfordNlpUtilArrayUtils_initialize();
  return EduStanfordNlpUtilArrayUtils_toPrimitiveWithJavaLangDoubleArray_withDouble_(inArg, 0.0);
}

IOSLongArray *EduStanfordNlpUtilArrayUtils_toPrimitiveWithJavaLangLongArray_withLong_(IOSObjectArray *inArg, jlong valueForNull) {
  EduStanfordNlpUtilArrayUtils_initialize();
  if (inArg == nil) return nil;
  IOSLongArray *out = [IOSLongArray newArrayWithLength:inArg->size_];
  for (jint i = 0; i < inArg->size_; i++) {
    JavaLangLong *b = IOSObjectArray_Get(inArg, i);
    *IOSLongArray_GetRef(out, i) = (b == nil ? valueForNull : [b longLongValue]);
  }
  return out;
}

IOSIntArray *EduStanfordNlpUtilArrayUtils_toPrimitiveWithJavaLangIntegerArray_withInt_(IOSObjectArray *inArg, jint valueForNull) {
  EduStanfordNlpUtilArrayUtils_initialize();
  if (inArg == nil) return nil;
  IOSIntArray *out = [IOSIntArray newArrayWithLength:inArg->size_];
  for (jint i = 0; i < inArg->size_; i++) {
    JavaLangInteger *b = IOSObjectArray_Get(inArg, i);
    *IOSIntArray_GetRef(out, i) = (b == nil ? valueForNull : [b intValue]);
  }
  return out;
}

IOSShortArray *EduStanfordNlpUtilArrayUtils_toPrimitiveWithJavaLangShortArray_withShort_(IOSObjectArray *inArg, jshort valueForNull) {
  EduStanfordNlpUtilArrayUtils_initialize();
  if (inArg == nil) return nil;
  IOSShortArray *out = [IOSShortArray newArrayWithLength:inArg->size_];
  for (jint i = 0; i < inArg->size_; i++) {
    JavaLangShort *b = IOSObjectArray_Get(inArg, i);
    *IOSShortArray_GetRef(out, i) = (b == nil ? valueForNull : [b shortValue]);
  }
  return out;
}

IOSCharArray *EduStanfordNlpUtilArrayUtils_toPrimitiveWithJavaLangCharacterArray_withChar_(IOSObjectArray *inArg, jchar valueForNull) {
  EduStanfordNlpUtilArrayUtils_initialize();
  if (inArg == nil) return nil;
  IOSCharArray *out = [IOSCharArray newArrayWithLength:inArg->size_];
  for (jint i = 0; i < inArg->size_; i++) {
    JavaLangCharacter *b = IOSObjectArray_Get(inArg, i);
    *IOSCharArray_GetRef(out, i) = (b == nil ? valueForNull : [b charValue]);
  }
  return out;
}

IOSDoubleArray *EduStanfordNlpUtilArrayUtils_toDoubleArrayWithNSStringArray_(IOSObjectArray *inArg) {
  EduStanfordNlpUtilArrayUtils_initialize();
  IOSDoubleArray *ret = [IOSDoubleArray newArrayWithLength:((IOSObjectArray *) nil_chk(inArg))->size_];
  for (jint i = 0; i < inArg->size_; i++) *IOSDoubleArray_GetRef(ret, i) = JavaLangDouble_parseDoubleWithNSString_(IOSObjectArray_Get(inArg, i));
  return ret;
}

IOSDoubleArray *EduStanfordNlpUtilArrayUtils_toPrimitiveWithJavaLangDoubleArray_withDouble_(IOSObjectArray *inArg, jdouble valueForNull) {
  EduStanfordNlpUtilArrayUtils_initialize();
  if (inArg == nil) return nil;
  IOSDoubleArray *out = [IOSDoubleArray newArrayWithLength:inArg->size_];
  for (jint i = 0; i < inArg->size_; i++) {
    JavaLangDouble *b = IOSObjectArray_Get(inArg, i);
    *IOSDoubleArray_GetRef(out, i) = (b == nil ? valueForNull : [b doubleValue]);
  }
  return out;
}

jint EduStanfordNlpUtilArrayUtils_compareArraysWithJavaLangComparableArray_withJavaLangComparableArray_(IOSObjectArray *first, IOSObjectArray *second) {
  EduStanfordNlpUtilArrayUtils_initialize();
  id<JavaUtilList> firstAsList = JavaUtilArrays_asListWithNSObjectArray_(first);
  id<JavaUtilList> secondAsList = JavaUtilArrays_asListWithNSObjectArray_(second);
  return EduStanfordNlpUtilCollectionUtils_compareListsWithJavaUtilList_withJavaUtilList_(firstAsList, secondAsList);
}

id<JavaUtilList> EduStanfordNlpUtilArrayUtils_getSubListIndexWithNSObjectArray_withNSObjectArray_(IOSObjectArray *tofind, IOSObjectArray *tokens) {
  EduStanfordNlpUtilArrayUtils_initialize();
  return EduStanfordNlpUtilArrayUtils_getSubListIndexWithNSObjectArray_withNSObjectArray_withJavaUtilFunctionFunction_(tofind, tokens, JreLoadStatic(EduStanfordNlpUtilArrayUtils_$Lambda$1, instance));
}

id<JavaUtilList> EduStanfordNlpUtilArrayUtils_getSubListIndexWithNSObjectArray_withNSObjectArray_withJavaUtilFunctionFunction_(IOSObjectArray *tofind, IOSObjectArray *tokens, id<JavaUtilFunctionFunction> matchingFunction) {
  EduStanfordNlpUtilArrayUtils_initialize();
  if (((IOSObjectArray *) nil_chk(tofind))->size_ > ((IOSObjectArray *) nil_chk(tokens))->size_) return nil;
  id<JavaUtilList> allIndices = new_JavaUtilArrayList_init();
  jboolean matched = false;
  jint index = -1;
  jint lastUnmatchedIndex = 0;
  for (jint i = 0; i < tokens->size_; ) {
    for (jint j = 0; j < tofind->size_; ) {
      if ([((JavaLangBoolean *) nil_chk([((id<JavaUtilFunctionFunction>) nil_chk(matchingFunction)) applyWithId:new_EduStanfordNlpUtilPair_initWithId_withId_(IOSObjectArray_Get(tofind, j), IOSObjectArray_Get(tokens, i))])) booleanValue]) {
        index = i;
        i++;
        j++;
        if (j == tofind->size_) {
          matched = true;
          break;
        }
      }
      else {
        j = 0;
        i = lastUnmatchedIndex + 1;
        lastUnmatchedIndex = i;
        index = -1;
        if (lastUnmatchedIndex == tokens->size_) break;
      }
      if (i >= tokens->size_) {
        index = -1;
        break;
      }
    }
    if (i == tokens->size_ || matched) {
      if (index >= 0) [allIndices addWithId:JavaLangInteger_valueOfWithInt_(index - tofind->size_ + 1)];
      matched = false;
      lastUnmatchedIndex = index;
    }
  }
  return allIndices;
}

IOSDoubleArray *EduStanfordNlpUtilArrayUtils_normalizeWithDoubleArray_(IOSDoubleArray *ar) {
  EduStanfordNlpUtilArrayUtils_initialize();
  IOSDoubleArray *ar2 = [IOSDoubleArray newArrayWithLength:((IOSDoubleArray *) nil_chk(ar))->size_];
  jdouble total = 0.0;
  {
    IOSDoubleArray *a__ = ar;
    jdouble const *b__ = a__->buffer_;
    jdouble const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jdouble d = *b__++;
      JrePlusAssignDoubleD(&total, d);
    }
  }
  for (jint i = 0; i < ar->size_; i++) {
    *IOSDoubleArray_GetRef(ar2, i) = IOSDoubleArray_Get(ar, i) / total;
  }
  return ar2;
}

IOSObjectArray *EduStanfordNlpUtilArrayUtils_subArrayWithNSObjectArray_withInt_withInt_(IOSObjectArray *arr, jint startindexInclusive, jint endindexExclusive) {
  EduStanfordNlpUtilArrayUtils_initialize();
  if (arr == nil) return arr;
  IOSClass *type = [[arr getClass] getComponentType];
  if (endindexExclusive < startindexInclusive || startindexInclusive > arr->size_ - 1) return (IOSObjectArray *) cast_check(JavaLangReflectArray_newInstanceWithIOSClass_withInt_(type, 0), IOSClass_arrayType(NSObject_class_(), 1));
  if (endindexExclusive > arr->size_) endindexExclusive = arr->size_;
  if (startindexInclusive < 0) startindexInclusive = 0;
  IOSObjectArray *b = (IOSObjectArray *) cast_check(JavaLangReflectArray_newInstanceWithIOSClass_withInt_(type, endindexExclusive - startindexInclusive), IOSClass_arrayType(NSObject_class_(), 1));
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(arr, startindexInclusive, b, 0, endindexExclusive - startindexInclusive);
  return b;
}

jint EduStanfordNlpUtilArrayUtils_compareBooleanArraysWithBooleanArray_withBooleanArray_(IOSBooleanArray *a1, IOSBooleanArray *a2) {
  EduStanfordNlpUtilArrayUtils_initialize();
  jint len = JavaLangMath_minWithInt_withInt_(((IOSBooleanArray *) nil_chk(a1))->size_, ((IOSBooleanArray *) nil_chk(a2))->size_);
  for (jint i = 0; i < len; i++) {
    if (!IOSBooleanArray_Get(a1, i) && IOSBooleanArray_Get(a2, i)) return -1;
    if (IOSBooleanArray_Get(a1, i) && !IOSBooleanArray_Get(a2, i)) return 1;
  }
  if (a1->size_ < a2->size_) return -1;
  if (a1->size_ > a2->size_) return 1;
  return 0;
}

NSString *EduStanfordNlpUtilArrayUtils_toStringWithDoubleArray_withNSString_(IOSDoubleArray *doubles, NSString *glue) {
  EduStanfordNlpUtilArrayUtils_initialize();
  NSString *s = @"";
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(doubles))->size_; i++) {
    if (i == 0) s = NSString_valueOfDouble_(IOSDoubleArray_Get(doubles, i));
    else (void) JreStrAppendStrong(&s, "$$", glue, NSString_valueOfDouble_(IOSDoubleArray_Get(doubles, i)));
  }
  return s;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpUtilArrayUtils)

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpUtilArrayUtils_$Lambda$1)

@implementation EduStanfordNlpUtilArrayUtils_$Lambda$1

- (id)applyWithId:(EduStanfordNlpUtilPair *)o1 {
  return JavaLangBoolean_valueOfWithBoolean_([nil_chk([((EduStanfordNlpUtilPair *) nil_chk(o1)) first]) isEqual:[o1 second]]);
}

- (id<JavaUtilFunctionFunction>)andThenWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_andThenWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilFunctionFunction>)composeWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_composeWithJavaUtilFunctionFunction_(self, arg0);
}

+ (void)initialize {
  if (self == [EduStanfordNlpUtilArrayUtils_$Lambda$1 class]) {
    EduStanfordNlpUtilArrayUtils_$Lambda$1_instance = new_EduStanfordNlpUtilArrayUtils_$Lambda$1_init();
    J2OBJC_SET_INITIALIZED(EduStanfordNlpUtilArrayUtils_$Lambda$1)
  }
}

@end

void EduStanfordNlpUtilArrayUtils_$Lambda$1_init(EduStanfordNlpUtilArrayUtils_$Lambda$1 *self) {
  NSObject_init(self);
}

EduStanfordNlpUtilArrayUtils_$Lambda$1 *new_EduStanfordNlpUtilArrayUtils_$Lambda$1_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilArrayUtils_$Lambda$1, init)
}

EduStanfordNlpUtilArrayUtils_$Lambda$1 *create_EduStanfordNlpUtilArrayUtils_$Lambda$1_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilArrayUtils_$Lambda$1, init)
}
