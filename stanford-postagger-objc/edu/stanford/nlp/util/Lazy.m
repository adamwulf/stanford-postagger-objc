//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/util/Lazy.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/util/Lazy.h"
#include "java/util/function/Supplier.h"

@interface EduStanfordNlpUtilLazy () {
 @public
  id implOrNull_;
}

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpUtilLazy, implOrNull_, id)

@interface EduStanfordNlpUtilLazy_$1 : EduStanfordNlpUtilLazy {
 @public
  id val$definedElement_;
}

- (id)compute;

- (instancetype)initWithId:(id)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpUtilLazy_$1)

J2OBJC_FIELD_SETTER(EduStanfordNlpUtilLazy_$1, val$definedElement_, id)

__attribute__((unused)) static void EduStanfordNlpUtilLazy_$1_initWithId_(EduStanfordNlpUtilLazy_$1 *self, id capture$0);

__attribute__((unused)) static EduStanfordNlpUtilLazy_$1 *new_EduStanfordNlpUtilLazy_$1_initWithId_(id capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpUtilLazy_$1 *create_EduStanfordNlpUtilLazy_$1_initWithId_(id capture$0);

@interface EduStanfordNlpUtilLazy_$2 : EduStanfordNlpUtilLazy {
 @public
  id<JavaUtilFunctionSupplier> val$fn_;
}

- (id)compute;

- (instancetype)initWithJavaUtilFunctionSupplier:(id<JavaUtilFunctionSupplier>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpUtilLazy_$2)

J2OBJC_FIELD_SETTER(EduStanfordNlpUtilLazy_$2, val$fn_, id<JavaUtilFunctionSupplier>)

__attribute__((unused)) static void EduStanfordNlpUtilLazy_$2_initWithJavaUtilFunctionSupplier_(EduStanfordNlpUtilLazy_$2 *self, id<JavaUtilFunctionSupplier> capture$0);

__attribute__((unused)) static EduStanfordNlpUtilLazy_$2 *new_EduStanfordNlpUtilLazy_$2_initWithJavaUtilFunctionSupplier_(id<JavaUtilFunctionSupplier> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpUtilLazy_$2 *create_EduStanfordNlpUtilLazy_$2_initWithJavaUtilFunctionSupplier_(id<JavaUtilFunctionSupplier> capture$0);

@implementation EduStanfordNlpUtilLazy

- (id)get {
  @synchronized(self) {
    if (implOrNull_ == nil) {
      implOrNull_ = [self compute];
    }
    return implOrNull_;
  }
}

- (id)compute {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id)getIfDefined {
  return implOrNull_;
}

+ (EduStanfordNlpUtilLazy *)fromWithId:(id)definedElement {
  return EduStanfordNlpUtilLazy_fromWithId_(definedElement);
}

+ (EduStanfordNlpUtilLazy *)ofWithJavaUtilFunctionSupplier:(id<JavaUtilFunctionSupplier>)fn {
  return EduStanfordNlpUtilLazy_ofWithJavaUtilFunctionSupplier_(fn);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpUtilLazy_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x21, -1, -1, -1, 0, -1, -1 },
    { NULL, "LNSObject;", 0x404, -1, -1, -1, 0, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LEduStanfordNlpUtilLazy;", 0x9, 1, 2, -1, 3, -1, -1 },
    { NULL, "LEduStanfordNlpUtilLazy;", 0x9, 4, 5, -1, 6, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(get);
  methods[1].selector = @selector(compute);
  methods[2].selector = @selector(getIfDefined);
  methods[3].selector = @selector(fromWithId:);
  methods[4].selector = @selector(ofWithJavaUtilFunctionSupplier:);
  methods[5].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "implOrNull_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, 7, -1 },
  };
  static const void *ptrTable[] = { "()TE;", "from", "LNSObject;", "<E:Ljava/lang/Object;>(TE;)Ledu/stanford/nlp/util/Lazy<TE;>;", "of", "LJavaUtilFunctionSupplier;", "<E:Ljava/lang/Object;>(Ljava/util/function/Supplier<TE;>;)Ledu/stanford/nlp/util/Lazy<TE;>;", "TE;", "<E:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilLazy = { "Lazy", "edu.stanford.nlp.util", ptrTable, methods, fields, 7, 0x401, 6, 1, -1, -1, -1, 8, -1 };
  return &_EduStanfordNlpUtilLazy;
}

@end

EduStanfordNlpUtilLazy *EduStanfordNlpUtilLazy_fromWithId_(id definedElement) {
  EduStanfordNlpUtilLazy_initialize();
  return new_EduStanfordNlpUtilLazy_$1_initWithId_(definedElement);
}

EduStanfordNlpUtilLazy *EduStanfordNlpUtilLazy_ofWithJavaUtilFunctionSupplier_(id<JavaUtilFunctionSupplier> fn) {
  EduStanfordNlpUtilLazy_initialize();
  return new_EduStanfordNlpUtilLazy_$2_initWithJavaUtilFunctionSupplier_(fn);
}

void EduStanfordNlpUtilLazy_init(EduStanfordNlpUtilLazy *self) {
  NSObject_init(self);
  self->implOrNull_ = nil;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpUtilLazy)

@implementation EduStanfordNlpUtilLazy_$1

- (id)compute {
  return val$definedElement_;
}

- (instancetype)initWithId:(id)capture$0 {
  EduStanfordNlpUtilLazy_$1_initWithId_(self, capture$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x4, -1, -1, -1, 0, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(compute);
  methods[1].selector = @selector(initWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$definedElement_", "LNSObject;", .constantValue.asLong = 0, 0x1012, -1, -1, 3, -1 },
  };
  static const void *ptrTable[] = { "()TE;", "LNSObject;", "(TE;)V", "TE;", "LEduStanfordNlpUtilLazy;", "fromWithId:", "Ledu/stanford/nlp/util/Lazy<TE;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilLazy_$1 = { "", "edu.stanford.nlp.util", ptrTable, methods, fields, 7, 0x8008, 2, 1, 4, -1, 5, 6, -1 };
  return &_EduStanfordNlpUtilLazy_$1;
}

@end

void EduStanfordNlpUtilLazy_$1_initWithId_(EduStanfordNlpUtilLazy_$1 *self, id capture$0) {
  self->val$definedElement_ = capture$0;
  EduStanfordNlpUtilLazy_init(self);
}

EduStanfordNlpUtilLazy_$1 *new_EduStanfordNlpUtilLazy_$1_initWithId_(id capture$0) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilLazy_$1, initWithId_, capture$0)
}

EduStanfordNlpUtilLazy_$1 *create_EduStanfordNlpUtilLazy_$1_initWithId_(id capture$0) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilLazy_$1, initWithId_, capture$0)
}

@implementation EduStanfordNlpUtilLazy_$2

- (id)compute {
  return [((id<JavaUtilFunctionSupplier>) nil_chk(val$fn_)) get];
}

- (instancetype)initWithJavaUtilFunctionSupplier:(id<JavaUtilFunctionSupplier>)capture$0 {
  EduStanfordNlpUtilLazy_$2_initWithJavaUtilFunctionSupplier_(self, capture$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x4, -1, -1, -1, 0, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(compute);
  methods[1].selector = @selector(initWithJavaUtilFunctionSupplier:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$fn_", "LJavaUtilFunctionSupplier;", .constantValue.asLong = 0, 0x1012, -1, -1, 3, -1 },
  };
  static const void *ptrTable[] = { "()TE;", "LJavaUtilFunctionSupplier;", "(Ljava/util/function/Supplier<TE;>;)V", "Ljava/util/function/Supplier<TE;>;", "LEduStanfordNlpUtilLazy;", "ofWithJavaUtilFunctionSupplier:", "Ledu/stanford/nlp/util/Lazy<TE;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilLazy_$2 = { "", "edu.stanford.nlp.util", ptrTable, methods, fields, 7, 0x8008, 2, 1, 4, -1, 5, 6, -1 };
  return &_EduStanfordNlpUtilLazy_$2;
}

@end

void EduStanfordNlpUtilLazy_$2_initWithJavaUtilFunctionSupplier_(EduStanfordNlpUtilLazy_$2 *self, id<JavaUtilFunctionSupplier> capture$0) {
  self->val$fn_ = capture$0;
  EduStanfordNlpUtilLazy_init(self);
}

EduStanfordNlpUtilLazy_$2 *new_EduStanfordNlpUtilLazy_$2_initWithJavaUtilFunctionSupplier_(id<JavaUtilFunctionSupplier> capture$0) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilLazy_$2, initWithJavaUtilFunctionSupplier_, capture$0)
}

EduStanfordNlpUtilLazy_$2 *create_EduStanfordNlpUtilLazy_$2_initWithJavaUtilFunctionSupplier_(id<JavaUtilFunctionSupplier> capture$0) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilLazy_$2, initWithJavaUtilFunctionSupplier_, capture$0)
}
