//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/util/ArrayCoreMap.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/util/ArrayCoreMap.h"
#include "edu/stanford/nlp/util/CoreMap.h"
#include "edu/stanford/nlp/util/ErasureUtils.h"
#include "edu/stanford/nlp/util/HashableCoreMap.h"
#include "edu/stanford/nlp/util/IdentityHashSet.h"
#include "edu/stanford/nlp/util/TwoDimensionalMap.h"
#include "edu/stanford/nlp/util/logging/PrettyLogger.h"
#include "edu/stanford/nlp/util/logging/Redwood.h"
#include "java/io/ObjectOutputStream.h"
#include "java/lang/ArrayIndexOutOfBoundsException.h"
#include "java/lang/Boolean.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/ThreadLocal.h"
#include "java/util/AbstractSet.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collections.h"
#include "java/util/Comparator.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/NoSuchElementException.h"
#include "java/util/Set.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "java/util/function/Consumer.h"
#include "java/util/function/Function.h"
#include "java/util/function/ToDoubleFunction.h"
#include "java/util/function/ToIntFunction.h"
#include "java/util/function/ToLongFunction.h"

@interface EduStanfordNlpUtilArrayCoreMap () {
 @public
  IOSObjectArray *keys_;
  IOSObjectArray *values_;
  jint size_;
}

- (jboolean)equalsWithEduStanfordNlpUtilArrayCoreMap:(EduStanfordNlpUtilArrayCoreMap *)other;

- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)outArg;

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpUtilArrayCoreMap, keys_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(EduStanfordNlpUtilArrayCoreMap, values_, IOSObjectArray *)

inline jint EduStanfordNlpUtilArrayCoreMap_get_INITIAL_CAPACITY();
#define EduStanfordNlpUtilArrayCoreMap_INITIAL_CAPACITY 4
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpUtilArrayCoreMap, INITIAL_CAPACITY, jint)

inline JavaLangThreadLocal *EduStanfordNlpUtilArrayCoreMap_get_toStringCalled();
static JavaLangThreadLocal *EduStanfordNlpUtilArrayCoreMap_toStringCalled;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpUtilArrayCoreMap, toStringCalled, JavaLangThreadLocal *)

inline JavaUtilConcurrentConcurrentHashMap *EduStanfordNlpUtilArrayCoreMap_get_shortNames();
static JavaUtilConcurrentConcurrentHashMap *EduStanfordNlpUtilArrayCoreMap_shortNames;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpUtilArrayCoreMap, shortNames, JavaUtilConcurrentConcurrentHashMap *)

inline jint EduStanfordNlpUtilArrayCoreMap_get_SHORTER_STRING_CHARSTRING_START_SIZE();
#define EduStanfordNlpUtilArrayCoreMap_SHORTER_STRING_CHARSTRING_START_SIZE 64
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpUtilArrayCoreMap, SHORTER_STRING_CHARSTRING_START_SIZE, jint)

inline jint EduStanfordNlpUtilArrayCoreMap_get_SHORTER_STRING_MAX_SIZE_BEFORE_HASHING();
#define EduStanfordNlpUtilArrayCoreMap_SHORTER_STRING_MAX_SIZE_BEFORE_HASHING 5
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpUtilArrayCoreMap, SHORTER_STRING_MAX_SIZE_BEFORE_HASHING, jint)

inline JavaLangThreadLocal *EduStanfordNlpUtilArrayCoreMap_get_equalsCalled();
static JavaLangThreadLocal *EduStanfordNlpUtilArrayCoreMap_equalsCalled;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpUtilArrayCoreMap, equalsCalled, JavaLangThreadLocal *)

inline JavaLangThreadLocal *EduStanfordNlpUtilArrayCoreMap_get_hashCodeCalled();
static JavaLangThreadLocal *EduStanfordNlpUtilArrayCoreMap_hashCodeCalled;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpUtilArrayCoreMap, hashCodeCalled, JavaLangThreadLocal *)

inline jlong EduStanfordNlpUtilArrayCoreMap_get_serialVersionUID();
#define EduStanfordNlpUtilArrayCoreMap_serialVersionUID 1LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpUtilArrayCoreMap, serialVersionUID, jlong)

@interface EduStanfordNlpUtilArrayCoreMap_$Lambda$1 : NSObject < JavaUtilComparator >

- (jint)compareWithId:(IOSClass *)a
               withId:(IOSClass *)b;

@end

J2OBJC_STATIC_INIT(EduStanfordNlpUtilArrayCoreMap_$Lambda$1)

inline EduStanfordNlpUtilArrayCoreMap_$Lambda$1 *EduStanfordNlpUtilArrayCoreMap_$Lambda$1_get_instance();
static EduStanfordNlpUtilArrayCoreMap_$Lambda$1 *EduStanfordNlpUtilArrayCoreMap_$Lambda$1_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpUtilArrayCoreMap_$Lambda$1, instance, EduStanfordNlpUtilArrayCoreMap_$Lambda$1 *)

__attribute__((unused)) static void EduStanfordNlpUtilArrayCoreMap_$Lambda$1_init(EduStanfordNlpUtilArrayCoreMap_$Lambda$1 *self);

__attribute__((unused)) static EduStanfordNlpUtilArrayCoreMap_$Lambda$1 *new_EduStanfordNlpUtilArrayCoreMap_$Lambda$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpUtilArrayCoreMap_$Lambda$1 *create_EduStanfordNlpUtilArrayCoreMap_$Lambda$1_init();

@interface EduStanfordNlpUtilArrayCoreMap_$2 : JavaUtilAbstractSet {
 @public
  EduStanfordNlpUtilArrayCoreMap *this$0_;
}

- (id<JavaUtilIterator>)iterator;

- (jint)size;

- (instancetype)initWithEduStanfordNlpUtilArrayCoreMap:(EduStanfordNlpUtilArrayCoreMap *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpUtilArrayCoreMap_$2)

J2OBJC_FIELD_SETTER(EduStanfordNlpUtilArrayCoreMap_$2, this$0_, EduStanfordNlpUtilArrayCoreMap *)

__attribute__((unused)) static void EduStanfordNlpUtilArrayCoreMap_$2_initWithEduStanfordNlpUtilArrayCoreMap_(EduStanfordNlpUtilArrayCoreMap_$2 *self, EduStanfordNlpUtilArrayCoreMap *outer$);

__attribute__((unused)) static EduStanfordNlpUtilArrayCoreMap_$2 *new_EduStanfordNlpUtilArrayCoreMap_$2_initWithEduStanfordNlpUtilArrayCoreMap_(EduStanfordNlpUtilArrayCoreMap *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpUtilArrayCoreMap_$2 *create_EduStanfordNlpUtilArrayCoreMap_$2_initWithEduStanfordNlpUtilArrayCoreMap_(EduStanfordNlpUtilArrayCoreMap *outer$);

@interface EduStanfordNlpUtilArrayCoreMap_$2_$1 : NSObject < JavaUtilIterator > {
 @public
  EduStanfordNlpUtilArrayCoreMap_$2 *this$0_;
  jint i_;
}

- (jboolean)hasNext;

- (IOSClass *)next;

- (void)remove;

- (instancetype)initWithEduStanfordNlpUtilArrayCoreMap_$2:(EduStanfordNlpUtilArrayCoreMap_$2 *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpUtilArrayCoreMap_$2_$1)

J2OBJC_FIELD_SETTER(EduStanfordNlpUtilArrayCoreMap_$2_$1, this$0_, EduStanfordNlpUtilArrayCoreMap_$2 *)

__attribute__((unused)) static void EduStanfordNlpUtilArrayCoreMap_$2_$1_initWithEduStanfordNlpUtilArrayCoreMap_$2_(EduStanfordNlpUtilArrayCoreMap_$2_$1 *self, EduStanfordNlpUtilArrayCoreMap_$2 *outer$);

__attribute__((unused)) static EduStanfordNlpUtilArrayCoreMap_$2_$1 *new_EduStanfordNlpUtilArrayCoreMap_$2_$1_initWithEduStanfordNlpUtilArrayCoreMap_$2_(EduStanfordNlpUtilArrayCoreMap_$2 *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpUtilArrayCoreMap_$2_$1 *create_EduStanfordNlpUtilArrayCoreMap_$2_$1_initWithEduStanfordNlpUtilArrayCoreMap_$2_(EduStanfordNlpUtilArrayCoreMap_$2 *outer$);

@interface EduStanfordNlpUtilArrayCoreMap_$1 : JavaLangThreadLocal

- (EduStanfordNlpUtilIdentityHashSet *)initialValue OBJC_METHOD_FAMILY_NONE;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpUtilArrayCoreMap_$1)

__attribute__((unused)) static void EduStanfordNlpUtilArrayCoreMap_$1_init(EduStanfordNlpUtilArrayCoreMap_$1 *self);

__attribute__((unused)) static EduStanfordNlpUtilArrayCoreMap_$1 *new_EduStanfordNlpUtilArrayCoreMap_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpUtilArrayCoreMap_$1 *create_EduStanfordNlpUtilArrayCoreMap_$1_init();

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpUtilArrayCoreMap)

@implementation EduStanfordNlpUtilArrayCoreMap

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpUtilArrayCoreMap_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithInt:(jint)capacity {
  EduStanfordNlpUtilArrayCoreMap_initWithInt_(self, capacity);
  return self;
}

- (instancetype)initWithEduStanfordNlpUtilArrayCoreMap:(EduStanfordNlpUtilArrayCoreMap *)other {
  EduStanfordNlpUtilArrayCoreMap_initWithEduStanfordNlpUtilArrayCoreMap_(self, other);
  return self;
}

- (instancetype)initWithEduStanfordNlpUtilCoreMap:(id<EduStanfordNlpUtilCoreMap>)other {
  EduStanfordNlpUtilArrayCoreMap_initWithEduStanfordNlpUtilCoreMap_(self, other);
  return self;
}

- (id)getWithIOSClass:(IOSClass *)key {
  for (jint i = 0; i < size_; i++) {
    if (key == IOSObjectArray_Get(nil_chk(keys_), i)) {
      return IOSObjectArray_Get(nil_chk(values_), i);
    }
  }
  return nil;
}

- (jboolean)hasWithIOSClass:(IOSClass *)key {
  for (jint i = 0; i < size_; i++) {
    if (IOSObjectArray_Get(nil_chk(keys_), i) == key) {
      return true;
    }
  }
  return false;
}

- (id)setWithIOSClass:(IOSClass *)key
               withId:(id)value {
  for (jint i = 0; i < size_; i++) {
    if (IOSObjectArray_Get(nil_chk(keys_), i) == key) {
      id rv = IOSObjectArray_Get(nil_chk(values_), i);
      (void) IOSObjectArray_Set(values_, i, value);
      return rv;
    }
  }
  if (size_ >= ((IOSObjectArray *) nil_chk(keys_))->size_) {
    jint capacity = keys_->size_ + (keys_->size_ < 16 ? 4 : 8);
    IOSObjectArray *newKeys = [IOSObjectArray newArrayWithLength:capacity type:IOSClass_class_()];
    IOSObjectArray *newValues = [IOSObjectArray newArrayWithLength:capacity type:NSObject_class_()];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(keys_, 0, newKeys, 0, size_);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(values_, 0, newValues, 0, size_);
    keys_ = newKeys;
    values_ = newValues;
  }
  (void) IOSObjectArray_Set(keys_, size_, key);
  (void) IOSObjectArray_Set(nil_chk(values_), size_, value);
  size_++;
  return nil;
}

- (id<JavaUtilSet>)keySet {
  return new_EduStanfordNlpUtilArrayCoreMap_$2_initWithEduStanfordNlpUtilArrayCoreMap_(self);
}

- (id<JavaUtilSet>)keySetNotNull {
  id<JavaUtilSet> keys = new_EduStanfordNlpUtilIdentityHashSet_init();
  for (jint i = 0; i < [self size]; ++i) {
    if (IOSObjectArray_Get(nil_chk(values_), i) != nil) {
      [keys addWithId:IOSObjectArray_Get(nil_chk(self->keys_), i)];
    }
  }
  return keys;
}

- (id)removeWithIOSClass:(IOSClass *)key {
  id rv = nil;
  for (jint i = 0; i < size_; i++) {
    if (IOSObjectArray_Get(nil_chk(keys_), i) == key) {
      rv = IOSObjectArray_Get(nil_chk(values_), i);
      if (i < size_ - 1) {
        JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(keys_, i + 1, keys_, i, size_ - (i + 1));
        JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(values_, i + 1, values_, i, size_ - (i + 1));
      }
      size_--;
      break;
    }
  }
  return rv;
}

- (jboolean)containsKeyWithIOSClass:(IOSClass *)key {
  for (jint i = 0; i < size_; i++) {
    if (IOSObjectArray_Get(nil_chk(keys_), i) == key) {
      return true;
    }
  }
  return false;
}

- (void)compact {
  if (((IOSObjectArray *) nil_chk(keys_))->size_ > size_) {
    IOSObjectArray *newKeys = [IOSObjectArray newArrayWithLength:size_ type:IOSClass_class_()];
    IOSObjectArray *newValues = [IOSObjectArray newArrayWithLength:size_ type:NSObject_class_()];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(keys_, 0, newKeys, 0, size_);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(values_, 0, newValues, 0, size_);
    keys_ = EduStanfordNlpUtilErasureUtils_uncheckedCastWithId_(newKeys);
    values_ = newValues;
  }
}

- (void)setCapacityWithInt:(jint)newSize {
  if (size_ > newSize) {
    @throw new_JavaLangRuntimeException_initWithNSString_(@"You cannot set capacity to smaller than the current size.");
  }
  IOSObjectArray *newKeys = [IOSObjectArray newArrayWithLength:newSize type:IOSClass_class_()];
  IOSObjectArray *newValues = [IOSObjectArray newArrayWithLength:newSize type:NSObject_class_()];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(keys_, 0, newKeys, 0, size_);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(values_, 0, newValues, 0, size_);
  keys_ = EduStanfordNlpUtilErasureUtils_uncheckedCastWithId_(newKeys);
  values_ = newValues;
}

- (jint)size {
  return size_;
}

- (NSString *)description {
  EduStanfordNlpUtilIdentityHashSet *calledSet = [((JavaLangThreadLocal *) nil_chk(EduStanfordNlpUtilArrayCoreMap_toStringCalled)) get];
  jboolean createdCalledSet = [((EduStanfordNlpUtilIdentityHashSet *) nil_chk(calledSet)) isEmpty];
  if ([calledSet containsWithId:self]) {
    return @"[...]";
  }
  [calledSet addWithId:self];
  JavaLangStringBuilder *s = new_JavaLangStringBuilder_initWithNSString_(@"[");
  for (jint i = 0; i < size_; i++) {
    (void) [s appendWithNSString:[((IOSClass *) nil_chk(IOSObjectArray_Get(nil_chk(keys_), i))) getSimpleName]];
    (void) [s appendWithChar:'='];
    (void) [s appendWithId:IOSObjectArray_Get(nil_chk(values_), i)];
    if (i < size_ - 1) {
      (void) [s appendWithChar:' '];
    }
  }
  (void) [s appendWithChar:']'];
  if (createdCalledSet) {
    [EduStanfordNlpUtilArrayCoreMap_toStringCalled remove];
  }
  else {
    [calledSet removeWithId:self];
  }
  return [s description];
}

- (NSString *)toShorterStringWithNSStringArray:(IOSObjectArray *)what {
  JavaLangStringBuilder *s = new_JavaLangStringBuilder_initWithInt_(EduStanfordNlpUtilArrayCoreMap_SHORTER_STRING_CHARSTRING_START_SIZE);
  (void) [s appendWithChar:'['];
  id<JavaUtilSet> whatSet = nil;
  if (size_ > EduStanfordNlpUtilArrayCoreMap_SHORTER_STRING_MAX_SIZE_BEFORE_HASHING && ((IOSObjectArray *) nil_chk(what))->size_ > EduStanfordNlpUtilArrayCoreMap_SHORTER_STRING_MAX_SIZE_BEFORE_HASHING) {
    whatSet = new_JavaUtilHashSet_initWithJavaUtilCollection_(JavaUtilArrays_asListWithNSObjectArray_(what));
  }
  for (jint i = 0; i < size_; i++) {
    IOSClass *klass = IOSObjectArray_Get(nil_chk(keys_), i);
    NSString *name = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(EduStanfordNlpUtilArrayCoreMap_shortNames)) getWithId:klass];
    if (name == nil) {
      name = [((IOSClass *) nil_chk(klass)) getSimpleName];
      jint annoIdx = [((NSString *) nil_chk(name)) lastIndexOfString:@"Annotation"];
      if (annoIdx >= 0) {
        name = [name substring:0 endIndex:annoIdx];
      }
      (void) [EduStanfordNlpUtilArrayCoreMap_shortNames putWithId:klass withId:name];
    }
    jboolean include;
    if (((IOSObjectArray *) nil_chk(what))->size_ == 0) {
      include = true;
    }
    else if (whatSet != nil) {
      include = [whatSet containsWithId:name];
    }
    else {
      include = false;
      {
        IOSObjectArray *a__ = what;
        NSString * const *b__ = a__->buffer_;
        NSString * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          NSString *item = *b__++;
          if ([((NSString *) nil_chk(item)) isEqual:name]) {
            include = true;
            break;
          }
        }
      }
    }
    if (include) {
      if ([s length] > 1) {
        (void) [s appendWithChar:' '];
      }
      (void) [s appendWithNSString:name];
      (void) [s appendWithChar:'='];
      (void) [s appendWithId:IOSObjectArray_Get(nil_chk(values_), i)];
    }
  }
  (void) [s appendWithChar:']'];
  return [s description];
}

- (NSString *)toShortStringWithNSStringArray:(IOSObjectArray *)what {
  return [self toShortStringWithChar:'/' withNSStringArray:what];
}

- (NSString *)toShortStringWithChar:(jchar)separator
                  withNSStringArray:(IOSObjectArray *)what {
  JavaLangStringBuilder *s = new_JavaLangStringBuilder_init();
  for (jint i = 0; i < size_; i++) {
    jboolean include;
    if (((IOSObjectArray *) nil_chk(what))->size_ > 0) {
      NSString *name = [((IOSClass *) nil_chk(IOSObjectArray_Get(nil_chk(keys_), i))) getSimpleName];
      jint annoIdx = [((NSString *) nil_chk(name)) lastIndexOfString:@"Annotation"];
      if (annoIdx >= 0) {
        name = [name substring:0 endIndex:annoIdx];
      }
      include = false;
      {
        IOSObjectArray *a__ = what;
        NSString * const *b__ = a__->buffer_;
        NSString * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          NSString *item = *b__++;
          if ([((NSString *) nil_chk(item)) isEqual:name]) {
            include = true;
            break;
          }
        }
      }
    }
    else {
      include = true;
    }
    if (include) {
      if ([s length] > 0) {
        (void) [s appendWithChar:separator];
      }
      (void) [s appendWithId:IOSObjectArray_Get(nil_chk(values_), i)];
    }
  }
  NSString *answer = [s description];
  if ([((NSString *) nil_chk(answer)) indexOf:' '] < 0) {
    return answer;
  }
  else {
    return JreStrcat("C$C", '{', answer, '}');
  }
}

- (jboolean)isEqual:(id)obj {
  if (!([EduStanfordNlpUtilCoreMap_class_() isInstance:obj])) {
    return false;
  }
  if ([obj isKindOfClass:[EduStanfordNlpUtilHashableCoreMap class]]) {
    return [nil_chk(obj) isEqual:self];
  }
  if ([obj isKindOfClass:[EduStanfordNlpUtilArrayCoreMap class]]) {
    return [self equalsWithEduStanfordNlpUtilArrayCoreMap:(EduStanfordNlpUtilArrayCoreMap *) cast_chk(obj, [EduStanfordNlpUtilArrayCoreMap class])];
  }
  id<EduStanfordNlpUtilCoreMap> other = (id<EduStanfordNlpUtilCoreMap>) cast_check(obj, EduStanfordNlpUtilCoreMap_class_());
  if (![((id<JavaUtilSet>) nil_chk([self keySet])) isEqual:[((id<EduStanfordNlpUtilCoreMap>) nil_chk(other)) keySet]]) {
    return false;
  }
  for (IOSClass * __strong key in nil_chk([self keySet])) {
    if (![other hasWithIOSClass:key]) {
      return false;
    }
    id thisV = [self getWithIOSClass:key], otherV = [other getWithIOSClass:key];
    if (thisV == otherV) {
      continue;
    }
    if (thisV == nil || otherV == nil) {
      return false;
    }
    if (![thisV isEqual:otherV]) {
      return false;
    }
  }
  return true;
}

- (jboolean)equalsWithEduStanfordNlpUtilArrayCoreMap:(EduStanfordNlpUtilArrayCoreMap *)other {
  EduStanfordNlpUtilTwoDimensionalMap *calledMap = [((JavaLangThreadLocal *) nil_chk(EduStanfordNlpUtilArrayCoreMap_equalsCalled)) get];
  jboolean createdCalledMap = calledMap == nil;
  if (createdCalledMap) {
    calledMap = EduStanfordNlpUtilTwoDimensionalMap_identityHashMap();
    [EduStanfordNlpUtilArrayCoreMap_equalsCalled setWithId:calledMap];
  }
  if ([((EduStanfordNlpUtilTwoDimensionalMap *) nil_chk(calledMap)) containsWithId:self withId:other]) {
    return true;
  }
  jboolean result = true;
  (void) [calledMap putWithId:self withId:other withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [calledMap putWithId:other withId:self withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  if (self->size_ != ((EduStanfordNlpUtilArrayCoreMap *) nil_chk(other))->size_) {
    result = false;
  }
  else {
    for (jint i = 0; i < self->size_; i++) {
      jboolean matched = false;
      for (jint j = 0; j < other->size_; j++) {
        if (IOSObjectArray_Get(nil_chk(self->keys_), i) == IOSObjectArray_Get(other->keys_, j)) {
          if ((IOSObjectArray_Get(nil_chk(self->values_), i) == nil && IOSObjectArray_Get(other->values_, j) != nil) || (IOSObjectArray_Get(self->values_, i) != nil && IOSObjectArray_Get(other->values_, j) == nil)) {
            matched = false;
            break;
          }
          if ((IOSObjectArray_Get(self->values_, i) == nil && IOSObjectArray_Get(other->values_, j) == nil) || ([nil_chk(IOSObjectArray_Get(self->values_, i)) isEqual:IOSObjectArray_Get(other->values_, j)])) {
            matched = true;
            break;
          }
        }
      }
      if (!matched) {
        result = false;
        break;
      }
    }
  }
  if (createdCalledMap) {
    [EduStanfordNlpUtilArrayCoreMap_equalsCalled setWithId:nil];
  }
  return result;
}

- (NSUInteger)hash {
  EduStanfordNlpUtilIdentityHashSet *calledSet = [((JavaLangThreadLocal *) nil_chk(EduStanfordNlpUtilArrayCoreMap_hashCodeCalled)) get];
  jboolean createdCalledSet = calledSet == nil;
  if (createdCalledSet) {
    calledSet = new_EduStanfordNlpUtilIdentityHashSet_init();
    [EduStanfordNlpUtilArrayCoreMap_hashCodeCalled setWithId:calledSet];
  }
  if ([((EduStanfordNlpUtilIdentityHashSet *) nil_chk(calledSet)) containsWithId:self]) {
    return 0;
  }
  [calledSet addWithId:self];
  jint keysCode = 0;
  jint valuesCode = 0;
  for (jint i = 0; i < size_; i++) {
    keysCode += (i < ((IOSObjectArray *) nil_chk(keys_))->size_ && IOSObjectArray_Get(nil_chk(values_), i) != nil ? ((jint) [((IOSClass *) nil_chk(IOSObjectArray_Get(keys_, i))) hash]) : 0);
    valuesCode += (i < ((IOSObjectArray *) nil_chk(values_))->size_ && IOSObjectArray_Get(values_, i) != nil ? ((jint) [nil_chk(IOSObjectArray_Get(values_, i)) hash]) : 0);
  }
  if (createdCalledSet) {
    [EduStanfordNlpUtilArrayCoreMap_hashCodeCalled setWithId:nil];
  }
  else {
    [calledSet removeWithId:self];
  }
  return keysCode * 37 + valuesCode;
}

- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)outArg {
  [self compact];
  [((JavaIoObjectOutputStream *) nil_chk(outArg)) defaultWriteObject];
}

- (void)prettyLogWithEduStanfordNlpUtilLoggingRedwood_RedwoodChannels:(EduStanfordNlpUtilLoggingRedwood_RedwoodChannels *)channels
                                                         withNSString:(NSString *)description_ {
  EduStanfordNlpUtilLoggingRedwood_startTrackWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ description_ } count:1 type:NSObject_class_()]);
  id<JavaUtilList> sortedKeys = new_JavaUtilArrayList_initWithJavaUtilCollection_([self keySet]);
  JavaUtilCollections_sortWithJavaUtilList_withJavaUtilComparator_(sortedKeys, JreLoadStatic(EduStanfordNlpUtilArrayCoreMap_$Lambda$1, instance));
  for (IOSClass * __strong key in sortedKeys) {
    NSString *keyName = [((NSString *) nil_chk([((IOSClass *) nil_chk(key)) getCanonicalName])) replace:@"class " withSequence:@""];
    id value = [self getWithIOSClass:key];
    if (EduStanfordNlpUtilLoggingPrettyLogger_dispatchableWithId_(value)) {
      EduStanfordNlpUtilLoggingPrettyLogger_logWithEduStanfordNlpUtilLoggingRedwood_RedwoodChannels_withNSString_withId_(channels, keyName, value);
    }
    else {
      [((EduStanfordNlpUtilLoggingRedwood_RedwoodChannels *) nil_chk(channels)) logfWithNSString:@"%s = %s" withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ keyName, value } count:2 type:NSObject_class_()]];
    }
  }
  EduStanfordNlpUtilLoggingRedwood_endTrackWithNSString_(description_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "Z", 0x1, 6, 4, -1, 7, -1, -1 },
    { NULL, "LNSObject;", 0x1, 8, 9, -1, 10, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 11, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 11, -1, -1 },
    { NULL, "LNSObject;", 0x1, 12, 4, -1, 5, -1, -1 },
    { NULL, "Z", 0x1, 13, 4, -1, 7, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 15, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x81, 16, 17, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x81, 18, 17, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x81, 18, 19, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 20, 21, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 20, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 22, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 23, 24, 25, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 27, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithInt:);
  methods[2].selector = @selector(initWithEduStanfordNlpUtilArrayCoreMap:);
  methods[3].selector = @selector(initWithEduStanfordNlpUtilCoreMap:);
  methods[4].selector = @selector(getWithIOSClass:);
  methods[5].selector = @selector(hasWithIOSClass:);
  methods[6].selector = @selector(setWithIOSClass:withId:);
  methods[7].selector = @selector(keySet);
  methods[8].selector = @selector(keySetNotNull);
  methods[9].selector = @selector(removeWithIOSClass:);
  methods[10].selector = @selector(containsKeyWithIOSClass:);
  methods[11].selector = @selector(compact);
  methods[12].selector = @selector(setCapacityWithInt:);
  methods[13].selector = @selector(size);
  methods[14].selector = @selector(description);
  methods[15].selector = @selector(toShorterStringWithNSStringArray:);
  methods[16].selector = @selector(toShortStringWithNSStringArray:);
  methods[17].selector = @selector(toShortStringWithChar:withNSStringArray:);
  methods[18].selector = @selector(isEqual:);
  methods[19].selector = @selector(equalsWithEduStanfordNlpUtilArrayCoreMap:);
  methods[20].selector = @selector(hash);
  methods[21].selector = @selector(writeObjectWithJavaIoObjectOutputStream:);
  methods[22].selector = @selector(prettyLogWithEduStanfordNlpUtilLoggingRedwood_RedwoodChannels:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INITIAL_CAPACITY", "I", .constantValue.asInt = EduStanfordNlpUtilArrayCoreMap_INITIAL_CAPACITY, 0x1a, -1, -1, -1, -1 },
    { "keys_", "[LIOSClass;", .constantValue.asLong = 0, 0x2, -1, -1, 28, -1 },
    { "values_", "[LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "size_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "toStringCalled", "LJavaLangThreadLocal;", .constantValue.asLong = 0, 0x1a, -1, 29, 30, -1 },
    { "shortNames", "LJavaUtilConcurrentConcurrentHashMap;", .constantValue.asLong = 0, 0x1a, -1, 31, 32, -1 },
    { "SHORTER_STRING_CHARSTRING_START_SIZE", "I", .constantValue.asInt = EduStanfordNlpUtilArrayCoreMap_SHORTER_STRING_CHARSTRING_START_SIZE, 0x1a, -1, -1, -1, -1 },
    { "SHORTER_STRING_MAX_SIZE_BEFORE_HASHING", "I", .constantValue.asInt = EduStanfordNlpUtilArrayCoreMap_SHORTER_STRING_MAX_SIZE_BEFORE_HASHING, 0x1a, -1, -1, -1, -1 },
    { "equalsCalled", "LJavaLangThreadLocal;", .constantValue.asLong = 0, 0x1a, -1, 33, 34, -1 },
    { "hashCodeCalled", "LJavaLangThreadLocal;", .constantValue.asLong = 0, 0x1a, -1, 35, 30, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpUtilArrayCoreMap_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "LEduStanfordNlpUtilArrayCoreMap;", "LEduStanfordNlpUtilCoreMap;", "get", "LIOSClass;", "<VALUE:Ljava/lang/Object;>(Ljava/lang/Class<+Ledu/stanford/nlp/util/TypesafeMap$Key<TVALUE;>;>;)TVALUE;", "has", "<VALUE:Ljava/lang/Object;>(Ljava/lang/Class<+Ledu/stanford/nlp/util/TypesafeMap$Key<TVALUE;>;>;)Z", "set", "LIOSClass;LNSObject;", "<VALUE:Ljava/lang/Object;>(Ljava/lang/Class<+Ledu/stanford/nlp/util/TypesafeMap$Key<TVALUE;>;>;TVALUE;)TVALUE;", "()Ljava/util/Set<Ljava/lang/Class<*>;>;", "remove", "containsKey", "setCapacity", "toString", "toShorterString", "[LNSString;", "toShortString", "C[LNSString;", "equals", "LNSObject;", "hashCode", "writeObject", "LJavaIoObjectOutputStream;", "LJavaIoIOException;", "prettyLog", "LEduStanfordNlpUtilLoggingRedwood_RedwoodChannels;LNSString;", "[Ljava/lang/Class<+Ledu/stanford/nlp/util/TypesafeMap$Key<*>;>;", &EduStanfordNlpUtilArrayCoreMap_toStringCalled, "Ljava/lang/ThreadLocal<Ledu/stanford/nlp/util/IdentityHashSet<Ledu/stanford/nlp/util/CoreMap;>;>;", &EduStanfordNlpUtilArrayCoreMap_shortNames, "Ljava/util/concurrent/ConcurrentHashMap<Ljava/lang/Class;Ljava/lang/String;>;", &EduStanfordNlpUtilArrayCoreMap_equalsCalled, "Ljava/lang/ThreadLocal<Ledu/stanford/nlp/util/TwoDimensionalMap<Ledu/stanford/nlp/util/CoreMap;Ledu/stanford/nlp/util/CoreMap;Ljava/lang/Boolean;>;>;", &EduStanfordNlpUtilArrayCoreMap_hashCodeCalled };
  static const J2ObjcClassInfo _EduStanfordNlpUtilArrayCoreMap = { "ArrayCoreMap", "edu.stanford.nlp.util", ptrTable, methods, fields, 7, 0x1, 23, 11, -1, -1, -1, -1, -1 };
  return &_EduStanfordNlpUtilArrayCoreMap;
}

+ (void)initialize {
  if (self == [EduStanfordNlpUtilArrayCoreMap class]) {
    EduStanfordNlpUtilArrayCoreMap_toStringCalled = new_EduStanfordNlpUtilArrayCoreMap_$1_init();
    EduStanfordNlpUtilArrayCoreMap_shortNames = new_JavaUtilConcurrentConcurrentHashMap_initWithInt_withFloat_withInt_(12, 0.75f, 1);
    EduStanfordNlpUtilArrayCoreMap_equalsCalled = new_JavaLangThreadLocal_init();
    EduStanfordNlpUtilArrayCoreMap_hashCodeCalled = new_JavaLangThreadLocal_init();
    J2OBJC_SET_INITIALIZED(EduStanfordNlpUtilArrayCoreMap)
  }
}

@end

void EduStanfordNlpUtilArrayCoreMap_init(EduStanfordNlpUtilArrayCoreMap *self) {
  EduStanfordNlpUtilArrayCoreMap_initWithInt_(self, EduStanfordNlpUtilArrayCoreMap_INITIAL_CAPACITY);
}

EduStanfordNlpUtilArrayCoreMap *new_EduStanfordNlpUtilArrayCoreMap_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilArrayCoreMap, init)
}

EduStanfordNlpUtilArrayCoreMap *create_EduStanfordNlpUtilArrayCoreMap_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilArrayCoreMap, init)
}

void EduStanfordNlpUtilArrayCoreMap_initWithInt_(EduStanfordNlpUtilArrayCoreMap *self, jint capacity) {
  NSObject_init(self);
  self->keys_ = EduStanfordNlpUtilErasureUtils_uncheckedCastWithId_([IOSObjectArray newArrayWithLength:capacity type:IOSClass_class_()]);
  self->values_ = [IOSObjectArray newArrayWithLength:capacity type:NSObject_class_()];
}

EduStanfordNlpUtilArrayCoreMap *new_EduStanfordNlpUtilArrayCoreMap_initWithInt_(jint capacity) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilArrayCoreMap, initWithInt_, capacity)
}

EduStanfordNlpUtilArrayCoreMap *create_EduStanfordNlpUtilArrayCoreMap_initWithInt_(jint capacity) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilArrayCoreMap, initWithInt_, capacity)
}

void EduStanfordNlpUtilArrayCoreMap_initWithEduStanfordNlpUtilArrayCoreMap_(EduStanfordNlpUtilArrayCoreMap *self, EduStanfordNlpUtilArrayCoreMap *other) {
  NSObject_init(self);
  self->size_ = ((EduStanfordNlpUtilArrayCoreMap *) nil_chk(other))->size_;
  self->keys_ = JavaUtilArrays_copyOfWithNSObjectArray_withInt_(other->keys_, self->size_);
  self->values_ = JavaUtilArrays_copyOfWithNSObjectArray_withInt_(other->values_, self->size_);
}

EduStanfordNlpUtilArrayCoreMap *new_EduStanfordNlpUtilArrayCoreMap_initWithEduStanfordNlpUtilArrayCoreMap_(EduStanfordNlpUtilArrayCoreMap *other) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilArrayCoreMap, initWithEduStanfordNlpUtilArrayCoreMap_, other)
}

EduStanfordNlpUtilArrayCoreMap *create_EduStanfordNlpUtilArrayCoreMap_initWithEduStanfordNlpUtilArrayCoreMap_(EduStanfordNlpUtilArrayCoreMap *other) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilArrayCoreMap, initWithEduStanfordNlpUtilArrayCoreMap_, other)
}

void EduStanfordNlpUtilArrayCoreMap_initWithEduStanfordNlpUtilCoreMap_(EduStanfordNlpUtilArrayCoreMap *self, id<EduStanfordNlpUtilCoreMap> other) {
  NSObject_init(self);
  id<JavaUtilSet> otherKeys = [((id<EduStanfordNlpUtilCoreMap>) nil_chk(other)) keySet];
  self->size_ = [((id<JavaUtilSet>) nil_chk(otherKeys)) size];
  self->keys_ = [IOSObjectArray newArrayWithLength:self->size_ type:IOSClass_class_()];
  self->values_ = [IOSObjectArray newArrayWithLength:self->size_ type:NSObject_class_()];
  jint i = 0;
  for (IOSClass * __strong key in otherKeys) {
    (void) IOSObjectArray_Set(nil_chk(self->keys_), i, key);
    (void) IOSObjectArray_Set(nil_chk(self->values_), i, [other getWithIOSClass:key]);
    i++;
  }
}

EduStanfordNlpUtilArrayCoreMap *new_EduStanfordNlpUtilArrayCoreMap_initWithEduStanfordNlpUtilCoreMap_(id<EduStanfordNlpUtilCoreMap> other) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilArrayCoreMap, initWithEduStanfordNlpUtilCoreMap_, other)
}

EduStanfordNlpUtilArrayCoreMap *create_EduStanfordNlpUtilArrayCoreMap_initWithEduStanfordNlpUtilCoreMap_(id<EduStanfordNlpUtilCoreMap> other) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilArrayCoreMap, initWithEduStanfordNlpUtilCoreMap_, other)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpUtilArrayCoreMap)

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpUtilArrayCoreMap_$Lambda$1)

@implementation EduStanfordNlpUtilArrayCoreMap_$Lambda$1

- (jint)compareWithId:(IOSClass *)a
               withId:(IOSClass *)b {
  return [((NSString *) nil_chk([((IOSClass *) nil_chk(a)) getCanonicalName])) compareToWithId:[((IOSClass *) nil_chk(b)) getCanonicalName]];
}

- (id<JavaUtilComparator>)reversed {
  return JavaUtilComparator_reversed(self);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilComparator:(id<JavaUtilComparator>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilComparator_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0
                                             withJavaUtilComparator:(id<JavaUtilComparator>)arg1 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_withJavaUtilComparator_(self, arg0, arg1);
}

- (id<JavaUtilComparator>)thenComparingDoubleWithJavaUtilFunctionToDoubleFunction:(id<JavaUtilFunctionToDoubleFunction>)arg0 {
  return JavaUtilComparator_thenComparingDoubleWithJavaUtilFunctionToDoubleFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingIntWithJavaUtilFunctionToIntFunction:(id<JavaUtilFunctionToIntFunction>)arg0 {
  return JavaUtilComparator_thenComparingIntWithJavaUtilFunctionToIntFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingLongWithJavaUtilFunctionToLongFunction:(id<JavaUtilFunctionToLongFunction>)arg0 {
  return JavaUtilComparator_thenComparingLongWithJavaUtilFunctionToLongFunction_(self, arg0);
}

+ (void)initialize {
  if (self == [EduStanfordNlpUtilArrayCoreMap_$Lambda$1 class]) {
    EduStanfordNlpUtilArrayCoreMap_$Lambda$1_instance = new_EduStanfordNlpUtilArrayCoreMap_$Lambda$1_init();
    J2OBJC_SET_INITIALIZED(EduStanfordNlpUtilArrayCoreMap_$Lambda$1)
  }
}

@end

void EduStanfordNlpUtilArrayCoreMap_$Lambda$1_init(EduStanfordNlpUtilArrayCoreMap_$Lambda$1 *self) {
  NSObject_init(self);
}

EduStanfordNlpUtilArrayCoreMap_$Lambda$1 *new_EduStanfordNlpUtilArrayCoreMap_$Lambda$1_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilArrayCoreMap_$Lambda$1, init)
}

EduStanfordNlpUtilArrayCoreMap_$Lambda$1 *create_EduStanfordNlpUtilArrayCoreMap_$Lambda$1_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilArrayCoreMap_$Lambda$1, init)
}

@implementation EduStanfordNlpUtilArrayCoreMap_$2

- (id<JavaUtilIterator>)iterator {
  return new_EduStanfordNlpUtilArrayCoreMap_$2_$1_initWithEduStanfordNlpUtilArrayCoreMap_$2_(self);
}

- (jint)size {
  return this$0_->size_;
}

- (instancetype)initWithEduStanfordNlpUtilArrayCoreMap:(EduStanfordNlpUtilArrayCoreMap *)outer$ {
  EduStanfordNlpUtilArrayCoreMap_$2_initWithEduStanfordNlpUtilArrayCoreMap_(self, outer$);
  return self;
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(iterator);
  methods[1].selector = @selector(size);
  methods[2].selector = @selector(initWithEduStanfordNlpUtilArrayCoreMap:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LEduStanfordNlpUtilArrayCoreMap;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Iterator<Ljava/lang/Class<*>;>;", "LEduStanfordNlpUtilArrayCoreMap;", "keySet", "Ljava/util/AbstractSet<Ljava/lang/Class<*>;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilArrayCoreMap_$2 = { "", "edu.stanford.nlp.util", ptrTable, methods, fields, 7, 0x8008, 3, 1, 1, -1, 2, 3, -1 };
  return &_EduStanfordNlpUtilArrayCoreMap_$2;
}

@end

void EduStanfordNlpUtilArrayCoreMap_$2_initWithEduStanfordNlpUtilArrayCoreMap_(EduStanfordNlpUtilArrayCoreMap_$2 *self, EduStanfordNlpUtilArrayCoreMap *outer$) {
  self->this$0_ = outer$;
  JavaUtilAbstractSet_init(self);
}

EduStanfordNlpUtilArrayCoreMap_$2 *new_EduStanfordNlpUtilArrayCoreMap_$2_initWithEduStanfordNlpUtilArrayCoreMap_(EduStanfordNlpUtilArrayCoreMap *outer$) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilArrayCoreMap_$2, initWithEduStanfordNlpUtilArrayCoreMap_, outer$)
}

EduStanfordNlpUtilArrayCoreMap_$2 *create_EduStanfordNlpUtilArrayCoreMap_$2_initWithEduStanfordNlpUtilArrayCoreMap_(EduStanfordNlpUtilArrayCoreMap *outer$) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilArrayCoreMap_$2, initWithEduStanfordNlpUtilArrayCoreMap_, outer$)
}

@implementation EduStanfordNlpUtilArrayCoreMap_$2_$1

- (jboolean)hasNext {
  return i_ < this$0_->this$0_->size_;
}

- (IOSClass *)next {
  @try {
    return IOSObjectArray_Get(nil_chk(this$0_->this$0_->keys_), i_++);
  }
  @catch (JavaLangArrayIndexOutOfBoundsException *aioobe) {
    @throw new_JavaUtilNoSuchElementException_initWithNSString_(@"ArrayCoreMap keySet iterator exhausted");
  }
}

- (void)remove {
  (void) [this$0_->this$0_ removeWithIOSClass:IOSObjectArray_Get(nil_chk(this$0_->this$0_->keys_), i_)];
}

- (instancetype)initWithEduStanfordNlpUtilArrayCoreMap_$2:(EduStanfordNlpUtilArrayCoreMap_$2 *)outer$ {
  EduStanfordNlpUtilArrayCoreMap_$2_$1_initWithEduStanfordNlpUtilArrayCoreMap_$2_(self, outer$);
  return self;
}

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaUtilIterator_forEachRemainingWithJavaUtilFunctionConsumer_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LIOSClass;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(hasNext);
  methods[1].selector = @selector(next);
  methods[2].selector = @selector(remove);
  methods[3].selector = @selector(initWithEduStanfordNlpUtilArrayCoreMap_$2:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LEduStanfordNlpUtilArrayCoreMap_$2;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "i_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/lang/Class<*>;", "LEduStanfordNlpUtilArrayCoreMap_$2;", "iterator", "Ljava/lang/Object;Ljava/util/Iterator<Ljava/lang/Class<*>;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilArrayCoreMap_$2_$1 = { "", "edu.stanford.nlp.util", ptrTable, methods, fields, 7, 0x8008, 4, 2, 1, -1, 2, 3, -1 };
  return &_EduStanfordNlpUtilArrayCoreMap_$2_$1;
}

@end

void EduStanfordNlpUtilArrayCoreMap_$2_$1_initWithEduStanfordNlpUtilArrayCoreMap_$2_(EduStanfordNlpUtilArrayCoreMap_$2_$1 *self, EduStanfordNlpUtilArrayCoreMap_$2 *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
}

EduStanfordNlpUtilArrayCoreMap_$2_$1 *new_EduStanfordNlpUtilArrayCoreMap_$2_$1_initWithEduStanfordNlpUtilArrayCoreMap_$2_(EduStanfordNlpUtilArrayCoreMap_$2 *outer$) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilArrayCoreMap_$2_$1, initWithEduStanfordNlpUtilArrayCoreMap_$2_, outer$)
}

EduStanfordNlpUtilArrayCoreMap_$2_$1 *create_EduStanfordNlpUtilArrayCoreMap_$2_$1_initWithEduStanfordNlpUtilArrayCoreMap_$2_(EduStanfordNlpUtilArrayCoreMap_$2 *outer$) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilArrayCoreMap_$2_$1, initWithEduStanfordNlpUtilArrayCoreMap_$2_, outer$)
}

@implementation EduStanfordNlpUtilArrayCoreMap_$1

- (EduStanfordNlpUtilIdentityHashSet *)initialValue {
  return new_EduStanfordNlpUtilIdentityHashSet_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpUtilArrayCoreMap_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LEduStanfordNlpUtilIdentityHashSet;", 0x4, -1, -1, -1, 0, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initialValue);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "()Ledu/stanford/nlp/util/IdentityHashSet<Ledu/stanford/nlp/util/CoreMap;>;", "LEduStanfordNlpUtilArrayCoreMap;", "Ljava/lang/ThreadLocal<Ledu/stanford/nlp/util/IdentityHashSet<Ledu/stanford/nlp/util/CoreMap;>;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilArrayCoreMap_$1 = { "", "edu.stanford.nlp.util", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 1, -1, -1, 2, -1 };
  return &_EduStanfordNlpUtilArrayCoreMap_$1;
}

@end

void EduStanfordNlpUtilArrayCoreMap_$1_init(EduStanfordNlpUtilArrayCoreMap_$1 *self) {
  JavaLangThreadLocal_init(self);
}

EduStanfordNlpUtilArrayCoreMap_$1 *new_EduStanfordNlpUtilArrayCoreMap_$1_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilArrayCoreMap_$1, init)
}

EduStanfordNlpUtilArrayCoreMap_$1 *create_EduStanfordNlpUtilArrayCoreMap_$1_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilArrayCoreMap_$1, init)
}
