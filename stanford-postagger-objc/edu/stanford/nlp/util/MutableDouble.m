//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/util/MutableDouble.java
//

#include "J2ObjC_source.h"
#include "edu/stanford/nlp/util/MutableDouble.h"
#include "java/lang/Double.h"

@interface EduStanfordNlpUtilMutableDouble () {
 @public
  jdouble d_;
}

@end

inline jlong EduStanfordNlpUtilMutableDouble_get_serialVersionUID();
#define EduStanfordNlpUtilMutableDouble_serialVersionUID 624465615824626762LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpUtilMutableDouble, serialVersionUID, jlong)

@implementation EduStanfordNlpUtilMutableDouble

- (void)setWithDouble:(jdouble)d {
  self->d_ = d;
}

- (NSUInteger)hash {
  jlong bits = JavaLangDouble_doubleToLongBitsWithDouble_(d_);
  return (jint) (bits ^ (JreURShift64(bits, 32)));
}

- (jboolean)isEqual:(id)obj {
  return [obj isKindOfClass:[EduStanfordNlpUtilMutableDouble class]] && d_ == ((EduStanfordNlpUtilMutableDouble *) nil_chk(((EduStanfordNlpUtilMutableDouble *) cast_chk(obj, [EduStanfordNlpUtilMutableDouble class]))))->d_;
}

- (NSString *)description {
  return JavaLangDouble_toStringWithDouble_(d_);
}

- (jint)compareToWithId:(EduStanfordNlpUtilMutableDouble *)anotherMutableDouble {
  (void) cast_chk(anotherMutableDouble, [EduStanfordNlpUtilMutableDouble class]);
  jdouble thisVal = self->d_;
  jdouble anotherVal = ((EduStanfordNlpUtilMutableDouble *) nil_chk(anotherMutableDouble))->d_;
  return (thisVal < anotherVal ? -1 : (thisVal == anotherVal ? 0 : 1));
}

- (jint)intValue {
  return JreFpToInt(d_);
}

- (jlong)longLongValue {
  return JreFpToLong(d_);
}

- (jshort)shortValue {
  return (jshort) JreFpToInt(d_);
}

- (jbyte)charValue {
  return (jbyte) JreFpToInt(d_);
}

- (jfloat)floatValue {
  return (jfloat) d_;
}

- (jdouble)doubleValue {
  return d_;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpUtilMutableDouble_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)initWithDouble:(jdouble)d {
  EduStanfordNlpUtilMutableDouble_initWithDouble_(self, d);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithNSNumber:(NSNumber *)num {
  EduStanfordNlpUtilMutableDouble_initWithNSNumber_(self, num);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 8, -1, -1, -1, -1, -1 },
    { NULL, "S", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "B", 0x1, 9, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 10, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(setWithDouble:);
  methods[1].selector = @selector(hash);
  methods[2].selector = @selector(isEqual:);
  methods[3].selector = @selector(description);
  methods[4].selector = @selector(compareToWithId:);
  methods[5].selector = @selector(intValue);
  methods[6].selector = @selector(longLongValue);
  methods[7].selector = @selector(shortValue);
  methods[8].selector = @selector(charValue);
  methods[9].selector = @selector(floatValue);
  methods[10].selector = @selector(doubleValue);
  methods[11].selector = @selector(init);
  methods[12].selector = @selector(initWithDouble:);
  methods[13].selector = @selector(initWithNSNumber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "d_", "D", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpUtilMutableDouble_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "set", "D", "hashCode", "equals", "LNSObject;", "toString", "compareTo", "LEduStanfordNlpUtilMutableDouble;", "longValue", "byteValue", "LNSNumber;", "Ljava/lang/Number;Ljava/lang/Comparable<Ledu/stanford/nlp/util/MutableDouble;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilMutableDouble = { "MutableDouble", "edu.stanford.nlp.util", ptrTable, methods, fields, 7, 0x11, 14, 2, -1, -1, -1, 11, -1 };
  return &_EduStanfordNlpUtilMutableDouble;
}

@end

void EduStanfordNlpUtilMutableDouble_init(EduStanfordNlpUtilMutableDouble *self) {
  EduStanfordNlpUtilMutableDouble_initWithDouble_(self, 0.0);
}

EduStanfordNlpUtilMutableDouble *new_EduStanfordNlpUtilMutableDouble_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilMutableDouble, init)
}

EduStanfordNlpUtilMutableDouble *create_EduStanfordNlpUtilMutableDouble_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilMutableDouble, init)
}

void EduStanfordNlpUtilMutableDouble_initWithDouble_(EduStanfordNlpUtilMutableDouble *self, jdouble d) {
  NSNumber_init(self);
  self->d_ = d;
}

EduStanfordNlpUtilMutableDouble *new_EduStanfordNlpUtilMutableDouble_initWithDouble_(jdouble d) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilMutableDouble, initWithDouble_, d)
}

EduStanfordNlpUtilMutableDouble *create_EduStanfordNlpUtilMutableDouble_initWithDouble_(jdouble d) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilMutableDouble, initWithDouble_, d)
}

void EduStanfordNlpUtilMutableDouble_initWithNSNumber_(EduStanfordNlpUtilMutableDouble *self, NSNumber *num) {
  NSNumber_init(self);
  self->d_ = [((NSNumber *) nil_chk(num)) doubleValue];
}

EduStanfordNlpUtilMutableDouble *new_EduStanfordNlpUtilMutableDouble_initWithNSNumber_(NSNumber *num) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilMutableDouble, initWithNSNumber_, num)
}

EduStanfordNlpUtilMutableDouble *create_EduStanfordNlpUtilMutableDouble_initWithNSNumber_(NSNumber *num) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilMutableDouble, initWithNSNumber_, num)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpUtilMutableDouble)
