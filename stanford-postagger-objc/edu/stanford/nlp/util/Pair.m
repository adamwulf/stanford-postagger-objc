//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/util/Pair.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/util/CollectionUtils.h"
#include "edu/stanford/nlp/util/Pair.h"
#include "edu/stanford/nlp/util/logging/PrettyLogger.h"
#include "edu/stanford/nlp/util/logging/Redwood.h"
#include "java/io/DataInputStream.h"
#include "java/io/DataOutputStream.h"
#include "java/lang/AssertionError.h"
#include "java/lang/Comparable.h"
#include "java/lang/Exception.h"
#include "java/util/Comparator.h"
#include "java/util/List.h"
#include "java/util/function/Function.h"
#include "java/util/function/ToDoubleFunction.h"
#include "java/util/function/ToIntFunction.h"
#include "java/util/function/ToLongFunction.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

inline jlong EduStanfordNlpUtilPair_get_serialVersionUID();
#define EduStanfordNlpUtilPair_serialVersionUID 1360822168806852921LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpUtilPair, serialVersionUID, jlong)

@interface EduStanfordNlpUtilPair_MutableInternedPair ()

- (instancetype)initWithEduStanfordNlpUtilPair:(EduStanfordNlpUtilPair *)p;

- (instancetype)initWithNSString:(NSString *)first
                    withNSString:(NSString *)second;

- (void)internStrings;

@end

inline jlong EduStanfordNlpUtilPair_MutableInternedPair_get_serialVersionUID();
#define EduStanfordNlpUtilPair_MutableInternedPair_serialVersionUID 1360822168806852922LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpUtilPair_MutableInternedPair, serialVersionUID, jlong)

__attribute__((unused)) static void EduStanfordNlpUtilPair_MutableInternedPair_initWithEduStanfordNlpUtilPair_(EduStanfordNlpUtilPair_MutableInternedPair *self, EduStanfordNlpUtilPair *p);

__attribute__((unused)) static EduStanfordNlpUtilPair_MutableInternedPair *new_EduStanfordNlpUtilPair_MutableInternedPair_initWithEduStanfordNlpUtilPair_(EduStanfordNlpUtilPair *p) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpUtilPair_MutableInternedPair *create_EduStanfordNlpUtilPair_MutableInternedPair_initWithEduStanfordNlpUtilPair_(EduStanfordNlpUtilPair *p);

__attribute__((unused)) static void EduStanfordNlpUtilPair_MutableInternedPair_initWithNSString_withNSString_(EduStanfordNlpUtilPair_MutableInternedPair *self, NSString *first, NSString *second);

__attribute__((unused)) static EduStanfordNlpUtilPair_MutableInternedPair *new_EduStanfordNlpUtilPair_MutableInternedPair_initWithNSString_withNSString_(NSString *first, NSString *second) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpUtilPair_MutableInternedPair *create_EduStanfordNlpUtilPair_MutableInternedPair_initWithNSString_withNSString_(NSString *first, NSString *second);

__attribute__((unused)) static void EduStanfordNlpUtilPair_MutableInternedPair_internStrings(EduStanfordNlpUtilPair_MutableInternedPair *self);

@implementation EduStanfordNlpUtilPair

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpUtilPair_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithId:(id)first
                    withId:(id)second {
  EduStanfordNlpUtilPair_initWithId_withId_(self, first, second);
  return self;
}

- (id)first {
  return first_;
}

- (id)second {
  return second_;
}

- (void)setFirstWithId:(id)o {
  first_ = o;
}

- (void)setSecondWithId:(id)o {
  second_ = o;
}

- (NSString *)description {
  return JreStrcat("C@C@C", '(', first_, ',', second_, ')');
}

- (jboolean)isEqual:(id)o {
  if ([o isKindOfClass:[EduStanfordNlpUtilPair class]]) {
    EduStanfordNlpUtilPair *p = (EduStanfordNlpUtilPair *) cast_chk(o, [EduStanfordNlpUtilPair class]);
    return (first_ == nil ? [((EduStanfordNlpUtilPair *) nil_chk(p)) first] == nil : [first_ isEqual:[((EduStanfordNlpUtilPair *) nil_chk(p)) first]]) && (second_ == nil ? [p second] == nil : [second_ isEqual:[p second]]);
  }
  else {
    return false;
  }
}

- (NSUInteger)hash {
  jint firstHash = (first_ == nil ? 0 : ((jint) [first_ hash]));
  jint secondHash = (second_ == nil ? 0 : ((jint) [second_ hash]));
  return firstHash * 31 + secondHash;
}

- (id<JavaUtilList>)asList {
  return EduStanfordNlpUtilCollectionUtils_makeListWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ first_, second_ } count:2 type:NSObject_class_()]);
}

+ (EduStanfordNlpUtilPair *)readStringPairWithJavaIoDataInputStream:(JavaIoDataInputStream *)inArg {
  return EduStanfordNlpUtilPair_readStringPairWithJavaIoDataInputStream_(inArg);
}

+ (EduStanfordNlpUtilPair *)makePairWithId:(id)x
                                    withId:(id)y {
  return EduStanfordNlpUtilPair_makePairWithId_withId_(x, y);
}

- (void)saveWithJavaIoDataOutputStream:(JavaIoDataOutputStream *)outArg {
  @try {
    [((JavaIoDataOutputStream *) nil_chk(outArg)) writeUTFWithNSString:[nil_chk(first_) description]];
    [outArg writeUTFWithNSString:[nil_chk(second_) description]];
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
  }
}

- (jint)compareToWithId:(EduStanfordNlpUtilPair *)another {
  (void) cast_chk(another, [EduStanfordNlpUtilPair class]);
  if ([JavaLangComparable_class_() isInstance:[self first]]) {
    jint comp = [((id<JavaLangComparable>) nil_chk(((id<JavaLangComparable>) cast_check([self first], JavaLangComparable_class_())))) compareToWithId:[((EduStanfordNlpUtilPair *) nil_chk(another)) first]];
    if (comp != 0) {
      return comp;
    }
  }
  if ([JavaLangComparable_class_() isInstance:[self second]]) {
    return [((id<JavaLangComparable>) nil_chk(((id<JavaLangComparable>) cast_check([self second], JavaLangComparable_class_())))) compareToWithId:[((EduStanfordNlpUtilPair *) nil_chk(another)) second]];
  }
  if ((!([JavaLangComparable_class_() isInstance:[self first]])) && (!([JavaLangComparable_class_() isInstance:[self second]]))) {
    @throw new_JavaLangAssertionError_initWithId_(@"Neither element of pair comparable");
  }
  return 0;
}

+ (EduStanfordNlpUtilPair *)stringInternWithEduStanfordNlpUtilPair:(EduStanfordNlpUtilPair *)p {
  return EduStanfordNlpUtilPair_stringInternWithEduStanfordNlpUtilPair_(p);
}

+ (EduStanfordNlpUtilPair *)internedStringPairWithNSString:(NSString *)first
                                              withNSString:(NSString *)second {
  return EduStanfordNlpUtilPair_internedStringPairWithNSString_withNSString_(first, second);
}

- (void)prettyLogWithEduStanfordNlpUtilLoggingRedwood_RedwoodChannels:(EduStanfordNlpUtilLoggingRedwood_RedwoodChannels *)channels
                                                         withNSString:(NSString *)description_ {
  EduStanfordNlpUtilLoggingPrettyLogger_logWithEduStanfordNlpUtilLoggingRedwood_RedwoodChannels_withNSString_withId_(channels, description_, [self asList]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 5, -1, 8, -1, -1 },
    { NULL, "LNSString;", 0x1, 9, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 10, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 11, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 12, -1, -1 },
    { NULL, "LEduStanfordNlpUtilPair;", 0x9, 13, 14, -1, 15, -1, -1 },
    { NULL, "LEduStanfordNlpUtilPair;", 0x9, 16, 0, -1, 17, -1, -1 },
    { NULL, "V", 0x1, 18, 19, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 20, 21, -1, 22, -1, -1 },
    { NULL, "LEduStanfordNlpUtilPair;", 0x9, 23, 21, -1, 24, -1, -1 },
    { NULL, "LEduStanfordNlpUtilPair;", 0x9, 25, 26, -1, 27, -1, -1 },
    { NULL, "V", 0x1, 28, 29, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithId:withId:);
  methods[2].selector = @selector(first);
  methods[3].selector = @selector(second);
  methods[4].selector = @selector(setFirstWithId:);
  methods[5].selector = @selector(setSecondWithId:);
  methods[6].selector = @selector(description);
  methods[7].selector = @selector(isEqual:);
  methods[8].selector = @selector(hash);
  methods[9].selector = @selector(asList);
  methods[10].selector = @selector(readStringPairWithJavaIoDataInputStream:);
  methods[11].selector = @selector(makePairWithId:withId:);
  methods[12].selector = @selector(saveWithJavaIoDataOutputStream:);
  methods[13].selector = @selector(compareToWithId:);
  methods[14].selector = @selector(stringInternWithEduStanfordNlpUtilPair:);
  methods[15].selector = @selector(internedStringPairWithNSString:withNSString:);
  methods[16].selector = @selector(prettyLogWithEduStanfordNlpUtilLoggingRedwood_RedwoodChannels:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "first_", "LNSObject;", .constantValue.asLong = 0, 0x1, -1, -1, 30, -1 },
    { "second_", "LNSObject;", .constantValue.asLong = 0, 0x1, -1, -1, 31, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpUtilPair_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSObject;LNSObject;", "(TT1;TT2;)V", "()TT1;", "()TT2;", "setFirst", "LNSObject;", "(TT1;)V", "setSecond", "(TT2;)V", "toString", "equals", "hashCode", "()Ljava/util/List<Ljava/lang/Object;>;", "readStringPair", "LJavaIoDataInputStream;", "(Ljava/io/DataInputStream;)Ledu/stanford/nlp/util/Pair<Ljava/lang/String;Ljava/lang/String;>;", "makePair", "<X:Ljava/lang/Object;Y:Ljava/lang/Object;>(TX;TY;)Ledu/stanford/nlp/util/Pair<TX;TY;>;", "save", "LJavaIoDataOutputStream;", "compareTo", "LEduStanfordNlpUtilPair;", "(Ledu/stanford/nlp/util/Pair<TT1;TT2;>;)I", "stringIntern", "(Ledu/stanford/nlp/util/Pair<Ljava/lang/String;Ljava/lang/String;>;)Ledu/stanford/nlp/util/Pair<Ljava/lang/String;Ljava/lang/String;>;", "internedStringPair", "LNSString;LNSString;", "(Ljava/lang/String;Ljava/lang/String;)Ledu/stanford/nlp/util/Pair<Ljava/lang/String;Ljava/lang/String;>;", "prettyLog", "LEduStanfordNlpUtilLoggingRedwood_RedwoodChannels;LNSString;", "TT1;", "TT2;", "LEduStanfordNlpUtilPair_MutableInternedPair;LEduStanfordNlpUtilPair_ByFirstPairComparator;LEduStanfordNlpUtilPair_ByFirstReversePairComparator;LEduStanfordNlpUtilPair_BySecondPairComparator;LEduStanfordNlpUtilPair_BySecondReversePairComparator;", "<T1:Ljava/lang/Object;T2:Ljava/lang/Object;>Ljava/lang/Object;Ljava/lang/Comparable<Ledu/stanford/nlp/util/Pair<TT1;TT2;>;>;Ljava/io/Serializable;Ledu/stanford/nlp/util/logging/PrettyLoggable;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilPair = { "Pair", "edu.stanford.nlp.util", ptrTable, methods, fields, 7, 0x1, 17, 3, -1, 32, -1, 33, -1 };
  return &_EduStanfordNlpUtilPair;
}

@end

void EduStanfordNlpUtilPair_init(EduStanfordNlpUtilPair *self) {
  NSObject_init(self);
}

EduStanfordNlpUtilPair *new_EduStanfordNlpUtilPair_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilPair, init)
}

EduStanfordNlpUtilPair *create_EduStanfordNlpUtilPair_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilPair, init)
}

void EduStanfordNlpUtilPair_initWithId_withId_(EduStanfordNlpUtilPair *self, id first, id second) {
  NSObject_init(self);
  self->first_ = first;
  self->second_ = second;
}

EduStanfordNlpUtilPair *new_EduStanfordNlpUtilPair_initWithId_withId_(id first, id second) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilPair, initWithId_withId_, first, second)
}

EduStanfordNlpUtilPair *create_EduStanfordNlpUtilPair_initWithId_withId_(id first, id second) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilPair, initWithId_withId_, first, second)
}

EduStanfordNlpUtilPair *EduStanfordNlpUtilPair_readStringPairWithJavaIoDataInputStream_(JavaIoDataInputStream *inArg) {
  EduStanfordNlpUtilPair_initialize();
  EduStanfordNlpUtilPair *p = new_EduStanfordNlpUtilPair_init();
  @try {
    p->first_ = [((JavaIoDataInputStream *) nil_chk(inArg)) readUTF];
    p->second_ = [inArg readUTF];
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
  }
  return p;
}

EduStanfordNlpUtilPair *EduStanfordNlpUtilPair_makePairWithId_withId_(id x, id y) {
  EduStanfordNlpUtilPair_initialize();
  return new_EduStanfordNlpUtilPair_initWithId_withId_(x, y);
}

EduStanfordNlpUtilPair *EduStanfordNlpUtilPair_stringInternWithEduStanfordNlpUtilPair_(EduStanfordNlpUtilPair *p) {
  EduStanfordNlpUtilPair_initialize();
  return new_EduStanfordNlpUtilPair_MutableInternedPair_initWithEduStanfordNlpUtilPair_(p);
}

EduStanfordNlpUtilPair *EduStanfordNlpUtilPair_internedStringPairWithNSString_withNSString_(NSString *first, NSString *second) {
  EduStanfordNlpUtilPair_initialize();
  return new_EduStanfordNlpUtilPair_MutableInternedPair_initWithNSString_withNSString_(first, second);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpUtilPair)

@implementation EduStanfordNlpUtilPair_MutableInternedPair

- (instancetype)initWithEduStanfordNlpUtilPair:(EduStanfordNlpUtilPair *)p {
  EduStanfordNlpUtilPair_MutableInternedPair_initWithEduStanfordNlpUtilPair_(self, p);
  return self;
}

- (instancetype)initWithNSString:(NSString *)first
                    withNSString:(NSString *)second {
  EduStanfordNlpUtilPair_MutableInternedPair_initWithNSString_withNSString_(self, first, second);
  return self;
}

- (id)readResolve {
  EduStanfordNlpUtilPair_MutableInternedPair_internStrings(self);
  return self;
}

- (void)internStrings {
  EduStanfordNlpUtilPair_MutableInternedPair_internStrings(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, 1, -1, -1 },
    { NULL, NULL, 0x2, -1, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpUtilPair:);
  methods[1].selector = @selector(initWithNSString:withNSString:);
  methods[2].selector = @selector(readResolve);
  methods[3].selector = @selector(internStrings);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpUtilPair_MutableInternedPair_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpUtilPair;", "(Ledu/stanford/nlp/util/Pair<Ljava/lang/String;Ljava/lang/String;>;)V", "LNSString;LNSString;", "Ledu/stanford/nlp/util/Pair<Ljava/lang/String;Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilPair_MutableInternedPair = { "MutableInternedPair", "edu.stanford.nlp.util", ptrTable, methods, fields, 7, 0x8, 4, 1, 0, -1, -1, 3, -1 };
  return &_EduStanfordNlpUtilPair_MutableInternedPair;
}

@end

void EduStanfordNlpUtilPair_MutableInternedPair_initWithEduStanfordNlpUtilPair_(EduStanfordNlpUtilPair_MutableInternedPair *self, EduStanfordNlpUtilPair *p) {
  EduStanfordNlpUtilPair_initWithId_withId_(self, ((EduStanfordNlpUtilPair *) nil_chk(p))->first_, p->second_);
  EduStanfordNlpUtilPair_MutableInternedPair_internStrings(self);
}

EduStanfordNlpUtilPair_MutableInternedPair *new_EduStanfordNlpUtilPair_MutableInternedPair_initWithEduStanfordNlpUtilPair_(EduStanfordNlpUtilPair *p) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilPair_MutableInternedPair, initWithEduStanfordNlpUtilPair_, p)
}

EduStanfordNlpUtilPair_MutableInternedPair *create_EduStanfordNlpUtilPair_MutableInternedPair_initWithEduStanfordNlpUtilPair_(EduStanfordNlpUtilPair *p) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilPair_MutableInternedPair, initWithEduStanfordNlpUtilPair_, p)
}

void EduStanfordNlpUtilPair_MutableInternedPair_initWithNSString_withNSString_(EduStanfordNlpUtilPair_MutableInternedPair *self, NSString *first, NSString *second) {
  EduStanfordNlpUtilPair_initWithId_withId_(self, first, second);
  EduStanfordNlpUtilPair_MutableInternedPair_internStrings(self);
}

EduStanfordNlpUtilPair_MutableInternedPair *new_EduStanfordNlpUtilPair_MutableInternedPair_initWithNSString_withNSString_(NSString *first, NSString *second) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilPair_MutableInternedPair, initWithNSString_withNSString_, first, second)
}

EduStanfordNlpUtilPair_MutableInternedPair *create_EduStanfordNlpUtilPair_MutableInternedPair_initWithNSString_withNSString_(NSString *first, NSString *second) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilPair_MutableInternedPair, initWithNSString_withNSString_, first, second)
}

void EduStanfordNlpUtilPair_MutableInternedPair_internStrings(EduStanfordNlpUtilPair_MutableInternedPair *self) {
  if (self->first_ != nil) {
    self->first_ = [((NSString *) self->first_) intern];
  }
  if (self->second_ != nil) {
    self->second_ = [((NSString *) self->second_) intern];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpUtilPair_MutableInternedPair)

@implementation EduStanfordNlpUtilPair_ByFirstPairComparator

- (jint)compareWithId:(EduStanfordNlpUtilPair *)pair1
               withId:(EduStanfordNlpUtilPair *)pair2 {
  return [((id<JavaLangComparable>) nil_chk(((id<JavaLangComparable>) cast_check([((EduStanfordNlpUtilPair *) nil_chk(pair1)) first], JavaLangComparable_class_())))) compareToWithId:[((EduStanfordNlpUtilPair *) nil_chk(pair2)) first]];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpUtilPair_ByFirstPairComparator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilComparator>)reversed {
  return JavaUtilComparator_reversed(self);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilComparator:(id<JavaUtilComparator>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilComparator_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0
                                             withJavaUtilComparator:(id<JavaUtilComparator>)arg1 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_withJavaUtilComparator_(self, arg0, arg1);
}

- (id<JavaUtilComparator>)thenComparingDoubleWithJavaUtilFunctionToDoubleFunction:(id<JavaUtilFunctionToDoubleFunction>)arg0 {
  return JavaUtilComparator_thenComparingDoubleWithJavaUtilFunctionToDoubleFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingIntWithJavaUtilFunctionToIntFunction:(id<JavaUtilFunctionToIntFunction>)arg0 {
  return JavaUtilComparator_thenComparingIntWithJavaUtilFunctionToIntFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingLongWithJavaUtilFunctionToLongFunction:(id<JavaUtilFunctionToLongFunction>)arg0 {
  return JavaUtilComparator_thenComparingLongWithJavaUtilFunctionToLongFunction_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "I", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(compareWithId:withId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "compare", "LEduStanfordNlpUtilPair;LEduStanfordNlpUtilPair;", "(Ledu/stanford/nlp/util/Pair<TT1;TT2;>;Ledu/stanford/nlp/util/Pair<TT1;TT2;>;)I", "LEduStanfordNlpUtilPair;", "<T1:Ljava/lang/Object;T2:Ljava/lang/Object;>Ljava/lang/Object;Ljava/util/Comparator<Ledu/stanford/nlp/util/Pair<TT1;TT2;>;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilPair_ByFirstPairComparator = { "ByFirstPairComparator", "edu.stanford.nlp.util", ptrTable, methods, NULL, 7, 0x9, 2, 0, 3, -1, -1, 4, -1 };
  return &_EduStanfordNlpUtilPair_ByFirstPairComparator;
}

@end

void EduStanfordNlpUtilPair_ByFirstPairComparator_init(EduStanfordNlpUtilPair_ByFirstPairComparator *self) {
  NSObject_init(self);
}

EduStanfordNlpUtilPair_ByFirstPairComparator *new_EduStanfordNlpUtilPair_ByFirstPairComparator_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilPair_ByFirstPairComparator, init)
}

EduStanfordNlpUtilPair_ByFirstPairComparator *create_EduStanfordNlpUtilPair_ByFirstPairComparator_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilPair_ByFirstPairComparator, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpUtilPair_ByFirstPairComparator)

@implementation EduStanfordNlpUtilPair_ByFirstReversePairComparator

- (jint)compareWithId:(EduStanfordNlpUtilPair *)pair1
               withId:(EduStanfordNlpUtilPair *)pair2 {
  return -[((id<JavaLangComparable>) nil_chk(((id<JavaLangComparable>) cast_check([((EduStanfordNlpUtilPair *) nil_chk(pair1)) first], JavaLangComparable_class_())))) compareToWithId:[((EduStanfordNlpUtilPair *) nil_chk(pair2)) first]];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpUtilPair_ByFirstReversePairComparator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilComparator>)reversed {
  return JavaUtilComparator_reversed(self);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilComparator:(id<JavaUtilComparator>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilComparator_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0
                                             withJavaUtilComparator:(id<JavaUtilComparator>)arg1 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_withJavaUtilComparator_(self, arg0, arg1);
}

- (id<JavaUtilComparator>)thenComparingDoubleWithJavaUtilFunctionToDoubleFunction:(id<JavaUtilFunctionToDoubleFunction>)arg0 {
  return JavaUtilComparator_thenComparingDoubleWithJavaUtilFunctionToDoubleFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingIntWithJavaUtilFunctionToIntFunction:(id<JavaUtilFunctionToIntFunction>)arg0 {
  return JavaUtilComparator_thenComparingIntWithJavaUtilFunctionToIntFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingLongWithJavaUtilFunctionToLongFunction:(id<JavaUtilFunctionToLongFunction>)arg0 {
  return JavaUtilComparator_thenComparingLongWithJavaUtilFunctionToLongFunction_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "I", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(compareWithId:withId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "compare", "LEduStanfordNlpUtilPair;LEduStanfordNlpUtilPair;", "(Ledu/stanford/nlp/util/Pair<TT1;TT2;>;Ledu/stanford/nlp/util/Pair<TT1;TT2;>;)I", "LEduStanfordNlpUtilPair;", "<T1:Ljava/lang/Object;T2:Ljava/lang/Object;>Ljava/lang/Object;Ljava/util/Comparator<Ledu/stanford/nlp/util/Pair<TT1;TT2;>;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilPair_ByFirstReversePairComparator = { "ByFirstReversePairComparator", "edu.stanford.nlp.util", ptrTable, methods, NULL, 7, 0x9, 2, 0, 3, -1, -1, 4, -1 };
  return &_EduStanfordNlpUtilPair_ByFirstReversePairComparator;
}

@end

void EduStanfordNlpUtilPair_ByFirstReversePairComparator_init(EduStanfordNlpUtilPair_ByFirstReversePairComparator *self) {
  NSObject_init(self);
}

EduStanfordNlpUtilPair_ByFirstReversePairComparator *new_EduStanfordNlpUtilPair_ByFirstReversePairComparator_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilPair_ByFirstReversePairComparator, init)
}

EduStanfordNlpUtilPair_ByFirstReversePairComparator *create_EduStanfordNlpUtilPair_ByFirstReversePairComparator_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilPair_ByFirstReversePairComparator, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpUtilPair_ByFirstReversePairComparator)

@implementation EduStanfordNlpUtilPair_BySecondPairComparator

- (jint)compareWithId:(EduStanfordNlpUtilPair *)pair1
               withId:(EduStanfordNlpUtilPair *)pair2 {
  return [((id<JavaLangComparable>) nil_chk(((id<JavaLangComparable>) cast_check([((EduStanfordNlpUtilPair *) nil_chk(pair1)) second], JavaLangComparable_class_())))) compareToWithId:[((EduStanfordNlpUtilPair *) nil_chk(pair2)) second]];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpUtilPair_BySecondPairComparator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilComparator>)reversed {
  return JavaUtilComparator_reversed(self);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilComparator:(id<JavaUtilComparator>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilComparator_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0
                                             withJavaUtilComparator:(id<JavaUtilComparator>)arg1 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_withJavaUtilComparator_(self, arg0, arg1);
}

- (id<JavaUtilComparator>)thenComparingDoubleWithJavaUtilFunctionToDoubleFunction:(id<JavaUtilFunctionToDoubleFunction>)arg0 {
  return JavaUtilComparator_thenComparingDoubleWithJavaUtilFunctionToDoubleFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingIntWithJavaUtilFunctionToIntFunction:(id<JavaUtilFunctionToIntFunction>)arg0 {
  return JavaUtilComparator_thenComparingIntWithJavaUtilFunctionToIntFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingLongWithJavaUtilFunctionToLongFunction:(id<JavaUtilFunctionToLongFunction>)arg0 {
  return JavaUtilComparator_thenComparingLongWithJavaUtilFunctionToLongFunction_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "I", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(compareWithId:withId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "compare", "LEduStanfordNlpUtilPair;LEduStanfordNlpUtilPair;", "(Ledu/stanford/nlp/util/Pair<TT1;TT2;>;Ledu/stanford/nlp/util/Pair<TT1;TT2;>;)I", "LEduStanfordNlpUtilPair;", "<T1:Ljava/lang/Object;T2:Ljava/lang/Object;>Ljava/lang/Object;Ljava/util/Comparator<Ledu/stanford/nlp/util/Pair<TT1;TT2;>;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilPair_BySecondPairComparator = { "BySecondPairComparator", "edu.stanford.nlp.util", ptrTable, methods, NULL, 7, 0x9, 2, 0, 3, -1, -1, 4, -1 };
  return &_EduStanfordNlpUtilPair_BySecondPairComparator;
}

@end

void EduStanfordNlpUtilPair_BySecondPairComparator_init(EduStanfordNlpUtilPair_BySecondPairComparator *self) {
  NSObject_init(self);
}

EduStanfordNlpUtilPair_BySecondPairComparator *new_EduStanfordNlpUtilPair_BySecondPairComparator_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilPair_BySecondPairComparator, init)
}

EduStanfordNlpUtilPair_BySecondPairComparator *create_EduStanfordNlpUtilPair_BySecondPairComparator_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilPair_BySecondPairComparator, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpUtilPair_BySecondPairComparator)

@implementation EduStanfordNlpUtilPair_BySecondReversePairComparator

- (jint)compareWithId:(EduStanfordNlpUtilPair *)pair1
               withId:(EduStanfordNlpUtilPair *)pair2 {
  return -[((id<JavaLangComparable>) nil_chk(((id<JavaLangComparable>) cast_check([((EduStanfordNlpUtilPair *) nil_chk(pair1)) second], JavaLangComparable_class_())))) compareToWithId:[((EduStanfordNlpUtilPair *) nil_chk(pair2)) second]];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpUtilPair_BySecondReversePairComparator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilComparator>)reversed {
  return JavaUtilComparator_reversed(self);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilComparator:(id<JavaUtilComparator>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilComparator_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0
                                             withJavaUtilComparator:(id<JavaUtilComparator>)arg1 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_withJavaUtilComparator_(self, arg0, arg1);
}

- (id<JavaUtilComparator>)thenComparingDoubleWithJavaUtilFunctionToDoubleFunction:(id<JavaUtilFunctionToDoubleFunction>)arg0 {
  return JavaUtilComparator_thenComparingDoubleWithJavaUtilFunctionToDoubleFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingIntWithJavaUtilFunctionToIntFunction:(id<JavaUtilFunctionToIntFunction>)arg0 {
  return JavaUtilComparator_thenComparingIntWithJavaUtilFunctionToIntFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingLongWithJavaUtilFunctionToLongFunction:(id<JavaUtilFunctionToLongFunction>)arg0 {
  return JavaUtilComparator_thenComparingLongWithJavaUtilFunctionToLongFunction_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "I", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(compareWithId:withId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "compare", "LEduStanfordNlpUtilPair;LEduStanfordNlpUtilPair;", "(Ledu/stanford/nlp/util/Pair<TT1;TT2;>;Ledu/stanford/nlp/util/Pair<TT1;TT2;>;)I", "LEduStanfordNlpUtilPair;", "<T1:Ljava/lang/Object;T2:Ljava/lang/Object;>Ljava/lang/Object;Ljava/util/Comparator<Ledu/stanford/nlp/util/Pair<TT1;TT2;>;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilPair_BySecondReversePairComparator = { "BySecondReversePairComparator", "edu.stanford.nlp.util", ptrTable, methods, NULL, 7, 0x9, 2, 0, 3, -1, -1, 4, -1 };
  return &_EduStanfordNlpUtilPair_BySecondReversePairComparator;
}

@end

void EduStanfordNlpUtilPair_BySecondReversePairComparator_init(EduStanfordNlpUtilPair_BySecondReversePairComparator *self) {
  NSObject_init(self);
}

EduStanfordNlpUtilPair_BySecondReversePairComparator *new_EduStanfordNlpUtilPair_BySecondReversePairComparator_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilPair_BySecondReversePairComparator, init)
}

EduStanfordNlpUtilPair_BySecondReversePairComparator *create_EduStanfordNlpUtilPair_BySecondReversePairComparator_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilPair_BySecondReversePairComparator, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpUtilPair_BySecondReversePairComparator)
