//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/util/ArrayStringFilter.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/util/ArrayStringFilter.h"
#include "edu/stanford/nlp/util/StringUtils.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/System.h"
#include "java/util/Arrays.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "java/util/function/Predicate.h"

@interface EduStanfordNlpUtilArrayStringFilter () {
 @public
  IOSObjectArray *words_;
  jint length_;
  EduStanfordNlpUtilArrayStringFilter_Mode *mode_;
}

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpUtilArrayStringFilter, words_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(EduStanfordNlpUtilArrayStringFilter, mode_, EduStanfordNlpUtilArrayStringFilter_Mode *)

inline jlong EduStanfordNlpUtilArrayStringFilter_get_serialVersionUID();
#define EduStanfordNlpUtilArrayStringFilter_serialVersionUID 1LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpUtilArrayStringFilter, serialVersionUID, jlong)

__attribute__((unused)) static void EduStanfordNlpUtilArrayStringFilter_Mode_initWithNSString_withInt_(EduStanfordNlpUtilArrayStringFilter_Mode *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static EduStanfordNlpUtilArrayStringFilter_Mode *new_EduStanfordNlpUtilArrayStringFilter_Mode_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

@implementation EduStanfordNlpUtilArrayStringFilter

- (instancetype)initWithEduStanfordNlpUtilArrayStringFilter_Mode:(EduStanfordNlpUtilArrayStringFilter_Mode *)mode
                                               withNSStringArray:(IOSObjectArray *)words {
  EduStanfordNlpUtilArrayStringFilter_initWithEduStanfordNlpUtilArrayStringFilter_Mode_withNSStringArray_(self, mode, words);
  return self;
}

- (jboolean)testWithId:(NSString *)input {
  switch ([mode_ ordinal]) {
    case EduStanfordNlpUtilArrayStringFilter_Mode_Enum_EXACT:
    for (jint i = 0; i < length_; ++i) {
      if ([((NSString *) nil_chk(IOSObjectArray_Get(nil_chk(words_), i))) isEqual:input]) {
        return true;
      }
    }
    return false;
    case EduStanfordNlpUtilArrayStringFilter_Mode_Enum_PREFIX:
    if (input == nil) {
      return false;
    }
    for (jint i = 0; i < length_; ++i) {
      if ([input hasPrefix:IOSObjectArray_Get(nil_chk(words_), i)]) {
        return true;
      }
    }
    return false;
    case EduStanfordNlpUtilArrayStringFilter_Mode_Enum_CASE_INSENSITIVE:
    for (jint i = 0; i < length_; ++i) {
      if ([((NSString *) nil_chk(IOSObjectArray_Get(nil_chk(words_), i))) equalsIgnoreCase:input]) {
        return true;
      }
    }
    return false;
    default:
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"Unknown mode ", mode_));
  }
}

- (NSString *)description {
  return JreStrcat("$C$", [((EduStanfordNlpUtilArrayStringFilter_Mode *) nil_chk(mode_)) description], ':', EduStanfordNlpUtilStringUtils_joinWithNSObjectArray_withNSString_(words_, @","));
}

- (NSUInteger)hash {
  jint result = 1;
  {
    IOSObjectArray *a__ = words_;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *word = *b__++;
      result += ((jint) [((NSString *) nil_chk(word)) hash]);
    }
  }
  return result;
}

- (jboolean)isEqual:(id)other {
  if (other == self) {
    return true;
  }
  if (!([other isKindOfClass:[EduStanfordNlpUtilArrayStringFilter class]])) {
    return false;
  }
  EduStanfordNlpUtilArrayStringFilter *filter = (EduStanfordNlpUtilArrayStringFilter *) cast_chk(other, [EduStanfordNlpUtilArrayStringFilter class]);
  if (((EduStanfordNlpUtilArrayStringFilter *) nil_chk(filter))->mode_ != self->mode_ || filter->length_ != self->length_) {
    return false;
  }
  id<JavaUtilSet> myWords = new_JavaUtilHashSet_initWithJavaUtilCollection_(JavaUtilArrays_asListWithNSObjectArray_(self->words_));
  id<JavaUtilSet> otherWords = new_JavaUtilHashSet_initWithJavaUtilCollection_(JavaUtilArrays_asListWithNSObjectArray_(filter->words_));
  return [myWords isEqual:otherWords];
}

- (id<JavaUtilFunctionPredicate>)and__WithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)arg0 {
  return JavaUtilFunctionPredicate_and__WithJavaUtilFunctionPredicate_(self, arg0);
}

- (id<JavaUtilFunctionPredicate>)negate {
  return JavaUtilFunctionPredicate_negate(self);
}

- (id<JavaUtilFunctionPredicate>)or__WithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)arg0 {
  return JavaUtilFunctionPredicate_or__WithJavaUtilFunctionPredicate_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x81, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 4, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 5, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpUtilArrayStringFilter_Mode:withNSStringArray:);
  methods[1].selector = @selector(testWithId:);
  methods[2].selector = @selector(description);
  methods[3].selector = @selector(hash);
  methods[4].selector = @selector(isEqual:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "words_", "[LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "length_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mode_", "LEduStanfordNlpUtilArrayStringFilter_Mode;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpUtilArrayStringFilter_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpUtilArrayStringFilter_Mode;[LNSString;", "test", "LNSString;", "toString", "hashCode", "equals", "LNSObject;", "LEduStanfordNlpUtilArrayStringFilter_Mode;", "Ljava/lang/Object;Ljava/util/function/Predicate<Ljava/lang/String;>;Ljava/io/Serializable;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilArrayStringFilter = { "ArrayStringFilter", "edu.stanford.nlp.util", ptrTable, methods, fields, 7, 0x1, 5, 4, -1, 7, -1, 8, -1 };
  return &_EduStanfordNlpUtilArrayStringFilter;
}

@end

void EduStanfordNlpUtilArrayStringFilter_initWithEduStanfordNlpUtilArrayStringFilter_Mode_withNSStringArray_(EduStanfordNlpUtilArrayStringFilter *self, EduStanfordNlpUtilArrayStringFilter_Mode *mode, IOSObjectArray *words) {
  NSObject_init(self);
  if (mode == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"Cannot handle null mode");
  }
  self->mode_ = mode;
  self->words_ = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(words))->size_ type:NSString_class_()];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(words, 0, self->words_, 0, words->size_);
  self->length_ = words->size_;
}

EduStanfordNlpUtilArrayStringFilter *new_EduStanfordNlpUtilArrayStringFilter_initWithEduStanfordNlpUtilArrayStringFilter_Mode_withNSStringArray_(EduStanfordNlpUtilArrayStringFilter_Mode *mode, IOSObjectArray *words) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilArrayStringFilter, initWithEduStanfordNlpUtilArrayStringFilter_Mode_withNSStringArray_, mode, words)
}

EduStanfordNlpUtilArrayStringFilter *create_EduStanfordNlpUtilArrayStringFilter_initWithEduStanfordNlpUtilArrayStringFilter_Mode_withNSStringArray_(EduStanfordNlpUtilArrayStringFilter_Mode *mode, IOSObjectArray *words) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilArrayStringFilter, initWithEduStanfordNlpUtilArrayStringFilter_Mode_withNSStringArray_, mode, words)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpUtilArrayStringFilter)

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpUtilArrayStringFilter_Mode)

EduStanfordNlpUtilArrayStringFilter_Mode *EduStanfordNlpUtilArrayStringFilter_Mode_values_[3];

@implementation EduStanfordNlpUtilArrayStringFilter_Mode

+ (IOSObjectArray *)values {
  return EduStanfordNlpUtilArrayStringFilter_Mode_values();
}

+ (EduStanfordNlpUtilArrayStringFilter_Mode *)valueOfWithNSString:(NSString *)name {
  return EduStanfordNlpUtilArrayStringFilter_Mode_valueOfWithNSString_(name);
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LEduStanfordNlpUtilArrayStringFilter_Mode;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpUtilArrayStringFilter_Mode;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "EXACT", "LEduStanfordNlpUtilArrayStringFilter_Mode;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "PREFIX", "LEduStanfordNlpUtilArrayStringFilter_Mode;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "CASE_INSENSITIVE", "LEduStanfordNlpUtilArrayStringFilter_Mode;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(EduStanfordNlpUtilArrayStringFilter_Mode, EXACT), &JreEnum(EduStanfordNlpUtilArrayStringFilter_Mode, PREFIX), &JreEnum(EduStanfordNlpUtilArrayStringFilter_Mode, CASE_INSENSITIVE), "LEduStanfordNlpUtilArrayStringFilter;", "Ljava/lang/Enum<Ledu/stanford/nlp/util/ArrayStringFilter$Mode;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilArrayStringFilter_Mode = { "Mode", "edu.stanford.nlp.util", ptrTable, methods, fields, 7, 0x4019, 2, 3, 5, -1, -1, 6, -1 };
  return &_EduStanfordNlpUtilArrayStringFilter_Mode;
}

+ (void)initialize {
  if (self == [EduStanfordNlpUtilArrayStringFilter_Mode class]) {
    JreEnum(EduStanfordNlpUtilArrayStringFilter_Mode, EXACT) = new_EduStanfordNlpUtilArrayStringFilter_Mode_initWithNSString_withInt_(@"EXACT", 0);
    JreEnum(EduStanfordNlpUtilArrayStringFilter_Mode, PREFIX) = new_EduStanfordNlpUtilArrayStringFilter_Mode_initWithNSString_withInt_(@"PREFIX", 1);
    JreEnum(EduStanfordNlpUtilArrayStringFilter_Mode, CASE_INSENSITIVE) = new_EduStanfordNlpUtilArrayStringFilter_Mode_initWithNSString_withInt_(@"CASE_INSENSITIVE", 2);
    J2OBJC_SET_INITIALIZED(EduStanfordNlpUtilArrayStringFilter_Mode)
  }
}

@end

void EduStanfordNlpUtilArrayStringFilter_Mode_initWithNSString_withInt_(EduStanfordNlpUtilArrayStringFilter_Mode *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

EduStanfordNlpUtilArrayStringFilter_Mode *new_EduStanfordNlpUtilArrayStringFilter_Mode_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilArrayStringFilter_Mode, initWithNSString_withInt_, __name, __ordinal)
}

IOSObjectArray *EduStanfordNlpUtilArrayStringFilter_Mode_values() {
  EduStanfordNlpUtilArrayStringFilter_Mode_initialize();
  return [IOSObjectArray arrayWithObjects:EduStanfordNlpUtilArrayStringFilter_Mode_values_ count:3 type:EduStanfordNlpUtilArrayStringFilter_Mode_class_()];
}

EduStanfordNlpUtilArrayStringFilter_Mode *EduStanfordNlpUtilArrayStringFilter_Mode_valueOfWithNSString_(NSString *name) {
  EduStanfordNlpUtilArrayStringFilter_Mode_initialize();
  for (int i = 0; i < 3; i++) {
    EduStanfordNlpUtilArrayStringFilter_Mode *e = EduStanfordNlpUtilArrayStringFilter_Mode_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

EduStanfordNlpUtilArrayStringFilter_Mode *EduStanfordNlpUtilArrayStringFilter_Mode_fromOrdinal(NSUInteger ordinal) {
  EduStanfordNlpUtilArrayStringFilter_Mode_initialize();
  if (ordinal >= 3) {
    return nil;
  }
  return EduStanfordNlpUtilArrayStringFilter_Mode_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpUtilArrayStringFilter_Mode)
