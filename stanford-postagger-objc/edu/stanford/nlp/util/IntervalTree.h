//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/util/IntervalTree.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_EduStanfordNlpUtilIntervalTree")
#ifdef RESTRICT_EduStanfordNlpUtilIntervalTree
#define INCLUDE_ALL_EduStanfordNlpUtilIntervalTree 0
#else
#define INCLUDE_ALL_EduStanfordNlpUtilIntervalTree 1
#endif
#undef RESTRICT_EduStanfordNlpUtilIntervalTree

#if !defined (EduStanfordNlpUtilIntervalTree_) && (INCLUDE_ALL_EduStanfordNlpUtilIntervalTree || defined(INCLUDE_EduStanfordNlpUtilIntervalTree))
#define EduStanfordNlpUtilIntervalTree_

#define RESTRICT_JavaUtilAbstractCollection 1
#define INCLUDE_JavaUtilAbstractCollection 1
#include "java/util/AbstractCollection.h"

@class EduStanfordNlpUtilInterval;
@class EduStanfordNlpUtilIntervalTree_TreeNode;
@protocol EduStanfordNlpUtilHasInterval;
@protocol JavaLangComparable;
@protocol JavaUtilCollection;
@protocol JavaUtilComparator;
@protocol JavaUtilFunctionFunction;
@protocol JavaUtilIterator;
@protocol JavaUtilList;

@interface EduStanfordNlpUtilIntervalTree : JavaUtilAbstractCollection

#pragma mark Public

- (instancetype)init;

- (jboolean)addWithId:(id<EduStanfordNlpUtilHasInterval>)target;

- (jboolean)addWithEduStanfordNlpUtilIntervalTree_TreeNode:(EduStanfordNlpUtilIntervalTree_TreeNode *)node
                         withEduStanfordNlpUtilHasInterval:(id<EduStanfordNlpUtilHasInterval>)target;

- (jboolean)addWithEduStanfordNlpUtilIntervalTree_TreeNode:(EduStanfordNlpUtilIntervalTree_TreeNode *)node
                         withEduStanfordNlpUtilHasInterval:(id<EduStanfordNlpUtilHasInterval>)target
                                                withDouble:(jdouble)alpha;

- (jboolean)addNonNestedWithEduStanfordNlpUtilHasInterval:(id<EduStanfordNlpUtilHasInterval>)target;

- (jboolean)addNonOverlappingWithEduStanfordNlpUtilHasInterval:(id<EduStanfordNlpUtilHasInterval>)target;

- (void)balance;

- (EduStanfordNlpUtilIntervalTree_TreeNode *)balanceWithEduStanfordNlpUtilIntervalTree_TreeNode:(EduStanfordNlpUtilIntervalTree_TreeNode *)node;

- (void)check;

- (void)checkWithEduStanfordNlpUtilIntervalTree_TreeNode:(EduStanfordNlpUtilIntervalTree_TreeNode *)treeNode;

- (void)clear;

- (jboolean)containsWithId:(id)o;

- (jboolean)containsWithEduStanfordNlpUtilHasInterval:(id<EduStanfordNlpUtilHasInterval>)target;

+ (jboolean)containsIntervalWithEduStanfordNlpUtilIntervalTree:(EduStanfordNlpUtilIntervalTree *)n
                                        withJavaLangComparable:(id<JavaLangComparable>)p
                                                   withBoolean:(jboolean)exact;

+ (jboolean)containsIntervalWithEduStanfordNlpUtilIntervalTree:(EduStanfordNlpUtilIntervalTree *)node
                                withEduStanfordNlpUtilInterval:(EduStanfordNlpUtilInterval *)target
                                                   withBoolean:(jboolean)exact;

- (jboolean)containsIntervalWithEduStanfordNlpUtilHasInterval:(id<EduStanfordNlpUtilHasInterval>)target
                                                  withBoolean:(jboolean)exact;

+ (jboolean)containsValueWithEduStanfordNlpUtilIntervalTree:(EduStanfordNlpUtilIntervalTree *)node
                          withEduStanfordNlpUtilHasInterval:(id<EduStanfordNlpUtilHasInterval>)target;

- (EduStanfordNlpUtilIntervalTree_TreeNode *)getLeftmostNodeWithEduStanfordNlpUtilIntervalTree_TreeNode:(EduStanfordNlpUtilIntervalTree_TreeNode *)node;

- (EduStanfordNlpUtilIntervalTree_TreeNode *)getNodeWithEduStanfordNlpUtilIntervalTree_TreeNode:(EduStanfordNlpUtilIntervalTree_TreeNode *)node
                                                                                        withInt:(jint)nodeIndex;

+ (id<JavaUtilList>)getNonNestedWithJavaUtilList:(id<JavaUtilList>)items
                    withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)toIntervalFunc
                          withJavaUtilComparator:(id<JavaUtilComparator>)compareFunc;

+ (id<JavaUtilList>)getNonOverlappingWithJavaUtilList:(id<JavaUtilList>)items;

+ (id<JavaUtilList>)getNonOverlappingWithJavaUtilList:(id<JavaUtilList>)items
                               withJavaUtilComparator:(id<JavaUtilComparator>)compareFunc;

+ (id<JavaUtilList>)getNonOverlappingWithJavaUtilList:(id<JavaUtilList>)items
                         withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)toIntervalFunc;

+ (id<JavaUtilList>)getNonOverlappingWithJavaUtilList:(id<JavaUtilList>)items
                         withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)toIntervalFunc
                               withJavaUtilComparator:(id<JavaUtilComparator>)compareFunc;

+ (id<JavaUtilList>)getNonOverlappingMaxScoreWithJavaUtilList:(id<JavaUtilList>)items
                                 withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)scoreFunc;

+ (id<JavaUtilList>)getNonOverlappingMaxScoreWithJavaUtilList:(id<JavaUtilList>)items
                                 withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)toIntervalFunc
                                 withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)scoreFunc;

- (id<JavaUtilList>)getOverlappingWithEduStanfordNlpUtilHasInterval:(id<EduStanfordNlpUtilHasInterval>)target;

+ (id<JavaUtilList>)getOverlappingWithEduStanfordNlpUtilIntervalTree_TreeNode:(EduStanfordNlpUtilIntervalTree_TreeNode *)n
                                                       withJavaLangComparable:(id<JavaLangComparable>)p;

+ (void)getOverlappingWithEduStanfordNlpUtilIntervalTree_TreeNode:(EduStanfordNlpUtilIntervalTree_TreeNode *)n
                                           withJavaLangComparable:(id<JavaLangComparable>)p
                                                 withJavaUtilList:(id<JavaUtilList>)result;

+ (id<JavaUtilList>)getOverlappingWithEduStanfordNlpUtilIntervalTree_TreeNode:(EduStanfordNlpUtilIntervalTree_TreeNode *)n
                                               withEduStanfordNlpUtilInterval:(EduStanfordNlpUtilInterval *)target;

+ (void)getOverlappingWithEduStanfordNlpUtilIntervalTree_TreeNode:(EduStanfordNlpUtilIntervalTree_TreeNode *)node
                                   withEduStanfordNlpUtilInterval:(EduStanfordNlpUtilInterval *)target
                                                 withJavaUtilList:(id<JavaUtilList>)result;

- (EduStanfordNlpUtilIntervalTree_TreeNode *)getRightmostNodeWithEduStanfordNlpUtilIntervalTree_TreeNode:(EduStanfordNlpUtilIntervalTree_TreeNode *)node;

- (jint)height;

- (jint)heightWithEduStanfordNlpUtilIntervalTree_TreeNode:(EduStanfordNlpUtilIntervalTree_TreeNode *)node;

- (jboolean)isAlphaBalancedWithEduStanfordNlpUtilIntervalTree_TreeNode:(EduStanfordNlpUtilIntervalTree_TreeNode *)node
                                                            withDouble:(jdouble)alpha;

- (jboolean)isEmpty;

- (id<JavaUtilIterator>)iterator;

- (EduStanfordNlpUtilIntervalTree_TreeNode *)leftRotateWithEduStanfordNlpUtilIntervalTree_TreeNode:(EduStanfordNlpUtilIntervalTree_TreeNode *)oldRoot;

- (jboolean)overlapsWithEduStanfordNlpUtilHasInterval:(id<EduStanfordNlpUtilHasInterval>)target;

+ (jboolean)overlapsWithEduStanfordNlpUtilIntervalTree_TreeNode:(EduStanfordNlpUtilIntervalTree_TreeNode *)n
                                         withJavaLangComparable:(id<JavaLangComparable>)p;

+ (jboolean)overlapsWithEduStanfordNlpUtilIntervalTree_TreeNode:(EduStanfordNlpUtilIntervalTree_TreeNode *)node
                                 withEduStanfordNlpUtilInterval:(EduStanfordNlpUtilInterval *)target;

- (jboolean)removeWithId:(id)o;

- (jboolean)removeWithEduStanfordNlpUtilHasInterval:(id<EduStanfordNlpUtilHasInterval>)target;

- (jboolean)removeWithEduStanfordNlpUtilIntervalTree_TreeNode:(EduStanfordNlpUtilIntervalTree_TreeNode *)node
                            withEduStanfordNlpUtilHasInterval:(id<EduStanfordNlpUtilHasInterval>)target;

- (jboolean)removeAllWithJavaUtilCollection:(id<JavaUtilCollection>)c;

- (jboolean)retainAllWithJavaUtilCollection:(id<JavaUtilCollection>)c;

- (EduStanfordNlpUtilIntervalTree_TreeNode *)rightRotateWithEduStanfordNlpUtilIntervalTree_TreeNode:(EduStanfordNlpUtilIntervalTree_TreeNode *)oldRoot;

- (void)rotateUpWithEduStanfordNlpUtilIntervalTree_TreeNode:(EduStanfordNlpUtilIntervalTree_TreeNode *)node
                withEduStanfordNlpUtilIntervalTree_TreeNode:(EduStanfordNlpUtilIntervalTree_TreeNode *)target;

- (jint)size;

- (NSString *)description;

#pragma mark Package-Private

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpUtilIntervalTree)

FOUNDATION_EXPORT id<JavaUtilList> EduStanfordNlpUtilIntervalTree_getOverlappingWithEduStanfordNlpUtilIntervalTree_TreeNode_withJavaLangComparable_(EduStanfordNlpUtilIntervalTree_TreeNode *n, id<JavaLangComparable> p);

FOUNDATION_EXPORT id<JavaUtilList> EduStanfordNlpUtilIntervalTree_getOverlappingWithEduStanfordNlpUtilIntervalTree_TreeNode_withEduStanfordNlpUtilInterval_(EduStanfordNlpUtilIntervalTree_TreeNode *n, EduStanfordNlpUtilInterval *target);

FOUNDATION_EXPORT void EduStanfordNlpUtilIntervalTree_getOverlappingWithEduStanfordNlpUtilIntervalTree_TreeNode_withJavaLangComparable_withJavaUtilList_(EduStanfordNlpUtilIntervalTree_TreeNode *n, id<JavaLangComparable> p, id<JavaUtilList> result);

FOUNDATION_EXPORT void EduStanfordNlpUtilIntervalTree_getOverlappingWithEduStanfordNlpUtilIntervalTree_TreeNode_withEduStanfordNlpUtilInterval_withJavaUtilList_(EduStanfordNlpUtilIntervalTree_TreeNode *node, EduStanfordNlpUtilInterval *target, id<JavaUtilList> result);

FOUNDATION_EXPORT jboolean EduStanfordNlpUtilIntervalTree_overlapsWithEduStanfordNlpUtilIntervalTree_TreeNode_withJavaLangComparable_(EduStanfordNlpUtilIntervalTree_TreeNode *n, id<JavaLangComparable> p);

FOUNDATION_EXPORT jboolean EduStanfordNlpUtilIntervalTree_overlapsWithEduStanfordNlpUtilIntervalTree_TreeNode_withEduStanfordNlpUtilInterval_(EduStanfordNlpUtilIntervalTree_TreeNode *node, EduStanfordNlpUtilInterval *target);

FOUNDATION_EXPORT jboolean EduStanfordNlpUtilIntervalTree_containsIntervalWithEduStanfordNlpUtilIntervalTree_withJavaLangComparable_withBoolean_(EduStanfordNlpUtilIntervalTree *n, id<JavaLangComparable> p, jboolean exact);

FOUNDATION_EXPORT jboolean EduStanfordNlpUtilIntervalTree_containsIntervalWithEduStanfordNlpUtilIntervalTree_withEduStanfordNlpUtilInterval_withBoolean_(EduStanfordNlpUtilIntervalTree *node, EduStanfordNlpUtilInterval *target, jboolean exact);

FOUNDATION_EXPORT jboolean EduStanfordNlpUtilIntervalTree_containsValueWithEduStanfordNlpUtilIntervalTree_withEduStanfordNlpUtilHasInterval_(EduStanfordNlpUtilIntervalTree *node, id<EduStanfordNlpUtilHasInterval> target);

FOUNDATION_EXPORT id<JavaUtilList> EduStanfordNlpUtilIntervalTree_getNonOverlappingWithJavaUtilList_withJavaUtilFunctionFunction_(id<JavaUtilList> items, id<JavaUtilFunctionFunction> toIntervalFunc);

FOUNDATION_EXPORT id<JavaUtilList> EduStanfordNlpUtilIntervalTree_getNonOverlappingWithJavaUtilList_withJavaUtilFunctionFunction_withJavaUtilComparator_(id<JavaUtilList> items, id<JavaUtilFunctionFunction> toIntervalFunc, id<JavaUtilComparator> compareFunc);

FOUNDATION_EXPORT id<JavaUtilList> EduStanfordNlpUtilIntervalTree_getNonOverlappingWithJavaUtilList_withJavaUtilComparator_(id<JavaUtilList> items, id<JavaUtilComparator> compareFunc);

FOUNDATION_EXPORT id<JavaUtilList> EduStanfordNlpUtilIntervalTree_getNonOverlappingWithJavaUtilList_(id<JavaUtilList> items);

FOUNDATION_EXPORT id<JavaUtilList> EduStanfordNlpUtilIntervalTree_getNonOverlappingMaxScoreWithJavaUtilList_withJavaUtilFunctionFunction_withJavaUtilFunctionFunction_(id<JavaUtilList> items, id<JavaUtilFunctionFunction> toIntervalFunc, id<JavaUtilFunctionFunction> scoreFunc);

FOUNDATION_EXPORT id<JavaUtilList> EduStanfordNlpUtilIntervalTree_getNonOverlappingMaxScoreWithJavaUtilList_withJavaUtilFunctionFunction_(id<JavaUtilList> items, id<JavaUtilFunctionFunction> scoreFunc);

FOUNDATION_EXPORT id<JavaUtilList> EduStanfordNlpUtilIntervalTree_getNonNestedWithJavaUtilList_withJavaUtilFunctionFunction_withJavaUtilComparator_(id<JavaUtilList> items, id<JavaUtilFunctionFunction> toIntervalFunc, id<JavaUtilComparator> compareFunc);

FOUNDATION_EXPORT void EduStanfordNlpUtilIntervalTree_init(EduStanfordNlpUtilIntervalTree *self);

FOUNDATION_EXPORT EduStanfordNlpUtilIntervalTree *new_EduStanfordNlpUtilIntervalTree_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EduStanfordNlpUtilIntervalTree *create_EduStanfordNlpUtilIntervalTree_init();

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpUtilIntervalTree)

#endif

#if !defined (EduStanfordNlpUtilIntervalTree_TreeNode_) && (INCLUDE_ALL_EduStanfordNlpUtilIntervalTree || defined(INCLUDE_EduStanfordNlpUtilIntervalTree_TreeNode))
#define EduStanfordNlpUtilIntervalTree_TreeNode_

@protocol EduStanfordNlpUtilHasInterval;
@protocol JavaLangComparable;

@interface EduStanfordNlpUtilIntervalTree_TreeNode : NSObject {
 @public
  id<EduStanfordNlpUtilHasInterval> value_;
  id<JavaLangComparable> maxEnd_;
  jint size_;
  EduStanfordNlpUtilIntervalTree_TreeNode *left_;
  EduStanfordNlpUtilIntervalTree_TreeNode *right_;
  EduStanfordNlpUtilIntervalTree_TreeNode *parent_;
}

#pragma mark Public

- (instancetype)init;

- (void)clear;

- (jboolean)isEmpty;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpUtilIntervalTree_TreeNode)

J2OBJC_FIELD_SETTER(EduStanfordNlpUtilIntervalTree_TreeNode, value_, id<EduStanfordNlpUtilHasInterval>)
J2OBJC_FIELD_SETTER(EduStanfordNlpUtilIntervalTree_TreeNode, maxEnd_, id<JavaLangComparable>)
J2OBJC_FIELD_SETTER(EduStanfordNlpUtilIntervalTree_TreeNode, left_, EduStanfordNlpUtilIntervalTree_TreeNode *)
J2OBJC_FIELD_SETTER(EduStanfordNlpUtilIntervalTree_TreeNode, right_, EduStanfordNlpUtilIntervalTree_TreeNode *)
J2OBJC_FIELD_SETTER(EduStanfordNlpUtilIntervalTree_TreeNode, parent_, EduStanfordNlpUtilIntervalTree_TreeNode *)

FOUNDATION_EXPORT void EduStanfordNlpUtilIntervalTree_TreeNode_init(EduStanfordNlpUtilIntervalTree_TreeNode *self);

FOUNDATION_EXPORT EduStanfordNlpUtilIntervalTree_TreeNode *new_EduStanfordNlpUtilIntervalTree_TreeNode_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EduStanfordNlpUtilIntervalTree_TreeNode *create_EduStanfordNlpUtilIntervalTree_TreeNode_init();

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpUtilIntervalTree_TreeNode)

#endif

#pragma pop_macro("INCLUDE_ALL_EduStanfordNlpUtilIntervalTree")
