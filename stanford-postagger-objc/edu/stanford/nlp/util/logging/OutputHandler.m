//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/util/logging/OutputHandler.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/math/SloppyMath.h"
#include "edu/stanford/nlp/util/Generics.h"
#include "edu/stanford/nlp/util/logging/Color.h"
#include "edu/stanford/nlp/util/logging/LogRecordHandler.h"
#include "edu/stanford/nlp/util/logging/OutputHandler.h"
#include "edu/stanford/nlp/util/logging/Redwood.h"
#include "edu/stanford/nlp/util/logging/Style.h"
#include "java/io/PrintStream.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/StackTraceElement.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/Stack.h"
#include "java/util/function/Supplier.h"

@interface EduStanfordNlpUtilLoggingOutputHandler () {
 @public
  jboolean missingOpenBracket_;
}

- (void)writeContentWithInt:(jint)depth
                     withId:(id)content
  withJavaLangStringBuilder:(JavaLangStringBuilder *)b;

- (void)updateTracksWithInt:(jint)untilDepth;

@end

__attribute__((unused)) static void EduStanfordNlpUtilLoggingOutputHandler_writeContentWithInt_withId_withJavaLangStringBuilder_(EduStanfordNlpUtilLoggingOutputHandler *self, jint depth, id content, JavaLangStringBuilder *b);

__attribute__((unused)) static void EduStanfordNlpUtilLoggingOutputHandler_updateTracksWithInt_(EduStanfordNlpUtilLoggingOutputHandler *self, jint untilDepth);

@interface EduStanfordNlpUtilLoggingOutputHandler_TrackInfo ()

- (instancetype)initWithNSString:(NSString *)name
                        withLong:(jlong)timestamp;

@end

__attribute__((unused)) static void EduStanfordNlpUtilLoggingOutputHandler_TrackInfo_initWithNSString_withLong_(EduStanfordNlpUtilLoggingOutputHandler_TrackInfo *self, NSString *name, jlong timestamp);

__attribute__((unused)) static EduStanfordNlpUtilLoggingOutputHandler_TrackInfo *new_EduStanfordNlpUtilLoggingOutputHandler_TrackInfo_initWithNSString_withLong_(NSString *name, jlong timestamp) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpUtilLoggingOutputHandler_TrackInfo *create_EduStanfordNlpUtilLoggingOutputHandler_TrackInfo_initWithNSString_withLong_(NSString *name, jlong timestamp);

@implementation EduStanfordNlpUtilLoggingOutputHandler

- (void)printWithNSObjectArray:(IOSObjectArray *)channel
                  withNSString:(NSString *)line {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)colorChannelWithNSString:(NSString *)channel
withEduStanfordNlpUtilLoggingColor:(EduStanfordNlpUtilLoggingColor *)color {
  if (self->channelColors_ == nil) {
    self->channelColors_ = EduStanfordNlpUtilGenerics_newHashMap();
  }
  (void) [((id<JavaUtilMap>) nil_chk(self->channelColors_)) putWithId:[((NSString *) nil_chk(channel)) lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, ENGLISH)] withId:color];
}

- (void)styleChannelWithNSString:(NSString *)channel
withEduStanfordNlpUtilLoggingStyle:(EduStanfordNlpUtilLoggingStyle *)style {
  if (self->channelStyles_ == nil) {
    self->channelStyles_ = EduStanfordNlpUtilGenerics_newHashMap();
  }
  (void) [((id<JavaUtilMap>) nil_chk(self->channelStyles_)) putWithId:[((NSString *) nil_chk(channel)) lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, ENGLISH)] withId:style];
}

- (void)setColorChannelsWithBoolean:(jboolean)colorChannels {
  self->addRandomColors_ = colorChannels;
  if (colorChannels) {
    self->channelColors_ = EduStanfordNlpUtilGenerics_newHashMap();
  }
}

- (JavaLangStringBuilder *)styleWithJavaLangStringBuilder:(JavaLangStringBuilder *)b
                                             withNSString:(NSString *)line
                       withEduStanfordNlpUtilLoggingColor:(EduStanfordNlpUtilLoggingColor *)color
                       withEduStanfordNlpUtilLoggingStyle:(EduStanfordNlpUtilLoggingStyle *)style {
  if (color != JreLoadEnum(EduStanfordNlpUtilLoggingColor, NONE) || style != JreLoadEnum(EduStanfordNlpUtilLoggingStyle, NONE)) {
    if (JreLoadStatic(EduStanfordNlpUtilLoggingRedwood, supportsAnsi) && [self supportsAnsi]) {
      (void) [((JavaLangStringBuilder *) nil_chk(b)) appendWithNSString:((EduStanfordNlpUtilLoggingColor *) nil_chk(color))->ansiCode_];
      (void) [b appendWithNSString:((EduStanfordNlpUtilLoggingStyle *) nil_chk(style))->ansiCode_];
    }
    (void) [((JavaLangStringBuilder *) nil_chk(b)) appendWithNSString:line];
    if (JreLoadStatic(EduStanfordNlpUtilLoggingRedwood, supportsAnsi) && [self supportsAnsi]) {
      (void) [b appendWithNSString:@"\x1b[0m"];
    }
  }
  else {
    (void) [((JavaLangStringBuilder *) nil_chk(b)) appendWithNSString:line];
  }
  return b;
}

- (jboolean)supportsAnsi {
  return false;
}

- (jboolean)formatChannelWithJavaLangStringBuilder:(JavaLangStringBuilder *)b
                                      withNSString:(NSString *)channelStr
                                            withId:(id)channel {
  if (self->channelColors_ == nil && self->channelStyles_ == nil) {
    (void) [((JavaLangStringBuilder *) nil_chk(b)) appendWithNSString:channelStr];
  }
  else {
    NSString *channelToString = [((NSString *) nil_chk([nil_chk(channel) description])) lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, ENGLISH)];
    EduStanfordNlpUtilLoggingColor *color = JreLoadEnum(EduStanfordNlpUtilLoggingColor, NONE);
    EduStanfordNlpUtilLoggingStyle *style = JreLoadEnum(EduStanfordNlpUtilLoggingStyle, NONE);
    if (self->channelColors_ != nil) {
      EduStanfordNlpUtilLoggingColor *candColor = [self->channelColors_ getWithId:channelToString];
      if (candColor != nil) {
        color = candColor;
      }
      else if (addRandomColors_) {
        color = IOSObjectArray_Get(nil_chk(EduStanfordNlpUtilLoggingColor_values()), EduStanfordNlpMathSloppyMath_pythonModWithInt_withInt_(((jint) [((NSString *) nil_chk(channelToString)) hash]), (((IOSObjectArray *) nil_chk(EduStanfordNlpUtilLoggingColor_values()))->size_ - 3)) + 3);
        if ([channelToString isEqual:[((NSString *) nil_chk([((EduStanfordNlpUtilLoggingRedwood_Flag *) nil_chk(JreLoadStatic(EduStanfordNlpUtilLoggingRedwood, ERR))) description])) lowercaseString]]) {
          color = JreLoadEnum(EduStanfordNlpUtilLoggingColor, RED);
        }
        else if ([channelToString isEqual:[((NSString *) nil_chk([((EduStanfordNlpUtilLoggingRedwood_Flag *) nil_chk(JreLoadStatic(EduStanfordNlpUtilLoggingRedwood, WARN))) description])) lowercaseString]]) {
          color = JreLoadEnum(EduStanfordNlpUtilLoggingColor, YELLOW);
        }
        (void) [((id<JavaUtilMap>) nil_chk(self->channelColors_)) putWithId:channelToString withId:color];
      }
    }
    if (self->channelStyles_ != nil) {
      EduStanfordNlpUtilLoggingStyle *candStyle = [self->channelStyles_ getWithId:channelToString];
      if (candStyle != nil) {
        style = candStyle;
      }
    }
    (void) [self styleWithJavaLangStringBuilder:b withNSString:channelStr withEduStanfordNlpUtilLoggingColor:color withEduStanfordNlpUtilLoggingStyle:style];
  }
  return true;
}

- (void)writeContentWithInt:(jint)depth
                     withId:(id)content
  withJavaLangStringBuilder:(JavaLangStringBuilder *)b {
  EduStanfordNlpUtilLoggingOutputHandler_writeContentWithInt_withId_withJavaLangStringBuilder_(self, depth, content, b);
}

- (void)updateTracksWithInt:(jint)untilDepth {
  EduStanfordNlpUtilLoggingOutputHandler_updateTracksWithInt_(self, untilDepth);
}

- (id<JavaUtilList>)handleWithEduStanfordNlpUtilLoggingRedwood_Record:(EduStanfordNlpUtilLoggingRedwood_Record *)record {
  JavaLangStringBuilder *b = new_JavaLangStringBuilder_initWithInt_(1024);
  IOSObjectArray *content;
  if ([((EduStanfordNlpUtilLoggingRedwood_Record *) nil_chk(record))->content_ isKindOfClass:[NSException class]]) {
    id<JavaUtilList> lines = new_JavaUtilArrayList_init();
    IOSObjectArray *trace = nil;
    JavaLangStackTraceElement *topTraceElement = nil;
    NSException *exception = (NSException *) cast_chk(record->content_, [NSException class]);
    [lines addWithId:[nil_chk(record->content_) description]];
    trace = [((NSException *) nil_chk(exception)) getStackTrace];
    topTraceElement = ((IOSObjectArray *) nil_chk(trace))->size_ > 0 ? IOSObjectArray_Get(trace, 0) : nil;
    {
      IOSObjectArray *a__ = [exception getStackTrace];
      JavaLangStackTraceElement * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      JavaLangStackTraceElement * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        JavaLangStackTraceElement *e = *b__++;
        [lines addWithId:JreStrcat("$$", tab_, [((JavaLangStackTraceElement *) nil_chk(e)) description])];
      }
    }
    while ([exception getCause] != nil) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@", @"TOP ELEMENT: ", topTraceElement)];
      exception = [exception getCause];
      trace = [((NSException *) nil_chk(exception)) getStackTrace];
      [lines addWithId:JreStrcat("$@$$", @"Caused by: ", [exception getClass], @": ", [exception getMessage])];
      for (jint i = 0; i < ((IOSObjectArray *) nil_chk(trace))->size_; i++) {
        JavaLangStackTraceElement *e = IOSObjectArray_Get(trace, i);
        [lines addWithId:JreStrcat("$$", tab_, [((JavaLangStackTraceElement *) nil_chk(e)) description])];
        if (topTraceElement != nil && [((NSString *) nil_chk([e getClassName])) isEqual:[topTraceElement getClassName]] && [((NSString *) nil_chk([e getMethodName])) isEqual:[topTraceElement getMethodName]]) {
          [lines addWithId:JreStrcat("$$I$", tab_, @"...", (trace->size_ - i - 1), @" more")];
          break;
        }
      }
      topTraceElement = trace->size_ > 0 ? IOSObjectArray_Get(trace, 0) : nil;
    }
    content = [IOSObjectArray newArrayWithLength:[lines size] type:NSString_class_()];
    content = [lines toArrayWithNSObjectArray:content];
  }
  else if (record->content_ == nil) {
    content = [IOSObjectArray newArrayWithObjects:(id[]){ @"null" } count:1 type:NSString_class_()];
  }
  else {
    NSString *toStr;
    if ([JavaUtilFunctionSupplier_class_() isInstance:record->content_]) {
      toStr = [nil_chk([((id<JavaUtilFunctionSupplier>) cast_check(record->content_, JavaUtilFunctionSupplier_class_())) get]) description];
    }
    else {
      toStr = [record->content_ description];
    }
    if (toStr == nil) {
      content = [IOSObjectArray newArrayWithObjects:(id[]){ @"<null toString()>" } count:1 type:NSString_class_()];
    }
    else {
      content = [toStr split:@"\n"];
    }
  }
  EduStanfordNlpUtilLoggingOutputHandler_updateTracksWithInt_(self, record->depth_);
  if (self->missingOpenBracket_) {
    (void) [self styleWithJavaLangStringBuilder:b withNSString:@"{\n" withEduStanfordNlpUtilLoggingColor:trackColor_ withEduStanfordNlpUtilLoggingStyle:trackStyle_];
    self->missingOpenBracket_ = false;
  }
  jint cursorPos = 0;
  jint contentLinesPrinted = 0;
  EduStanfordNlpUtilLoggingColor *color = JreLoadEnum(EduStanfordNlpUtilLoggingColor, NONE);
  EduStanfordNlpUtilLoggingStyle *style = JreLoadEnum(EduStanfordNlpUtilLoggingStyle, NONE);
  JavaUtilArrayList *printableChannels = new_JavaUtilArrayList_init();
  {
    IOSObjectArray *a__ = [record channels];
    id const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id chan = *b__++;
      if ([chan isKindOfClass:[EduStanfordNlpUtilLoggingColor class]]) {
        color = (EduStanfordNlpUtilLoggingColor *) cast_chk(chan, [EduStanfordNlpUtilLoggingColor class]);
      }
      else if ([chan isKindOfClass:[EduStanfordNlpUtilLoggingStyle class]]) {
        style = (EduStanfordNlpUtilLoggingStyle *) cast_chk(chan, [EduStanfordNlpUtilLoggingStyle class]);
      }
      else if (chan != JreLoadStatic(EduStanfordNlpUtilLoggingRedwood, FORCE)) {
        [printableChannels addWithId:chan];
      }
    }
  }
  if (leftMargin_ > 2) {
    (void) [b appendWithNSString:@"["];
    cursorPos += 1;
    id lastChan = nil;
    jboolean wasAnyChannelPrinted = false;
    for (jint i = 0; i < [printableChannels size]; i++) {
      id chan = [printableChannels getWithInt:i];
      if ([nil_chk(chan) isEqual:lastChan]) {
        continue;
      }
      lastChan = chan;
      NSString *toPrint = [chan description];
      if (((jint) [((NSString *) nil_chk(toPrint)) length]) > leftMargin_ - 1) {
        toPrint = [toPrint substring:0 endIndex:leftMargin_ - 2];
      }
      if (cursorPos + ((jint) [((NSString *) nil_chk(toPrint)) length]) >= leftMargin_) {
        while (cursorPos < leftMargin_) {
          (void) [b appendWithNSString:@" "];
          cursorPos += 1;
        }
        if (contentLinesPrinted < ((IOSObjectArray *) nil_chk(content))->size_) {
          EduStanfordNlpUtilLoggingOutputHandler_writeContentWithInt_withId_withJavaLangStringBuilder_(self, record->depth_, [((JavaLangStringBuilder *) nil_chk([self styleWithJavaLangStringBuilder:new_JavaLangStringBuilder_init() withNSString:IOSObjectArray_Get(content, contentLinesPrinted) withEduStanfordNlpUtilLoggingColor:color withEduStanfordNlpUtilLoggingStyle:style])) description], b);
          contentLinesPrinted += 1;
        }
        (void) [b appendWithNSString:@"\n "];
        cursorPos = 1;
      }
      jboolean wasChannelPrinted = [self formatChannelWithJavaLangStringBuilder:b withNSString:toPrint withId:chan];
      wasAnyChannelPrinted = (wasAnyChannelPrinted || wasChannelPrinted);
      if (wasChannelPrinted && i < [printableChannels size] - 1) {
        (void) [b appendWithChar:channelSeparatorChar_];
        cursorPos += 1;
      }
      cursorPos += ((jint) [toPrint length]);
    }
    if (wasAnyChannelPrinted) {
      (void) [b appendWithNSString:@"]"];
      cursorPos += 1;
    }
    else {
      [b setLengthWithInt:[b length] - 1];
      cursorPos -= 1;
    }
  }
  while (contentLinesPrinted < ((IOSObjectArray *) nil_chk(content))->size_) {
    while (cursorPos < leftMargin_) {
      (void) [b appendWithNSString:@" "];
      cursorPos += 1;
    }
    EduStanfordNlpUtilLoggingOutputHandler_writeContentWithInt_withId_withJavaLangStringBuilder_(self, record->depth_, [((JavaLangStringBuilder *) nil_chk([self styleWithJavaLangStringBuilder:new_JavaLangStringBuilder_init() withNSString:IOSObjectArray_Get(content, contentLinesPrinted) withEduStanfordNlpUtilLoggingColor:color withEduStanfordNlpUtilLoggingStyle:style])) description], b);
    contentLinesPrinted += 1;
    if (contentLinesPrinted < content->size_) {
      (void) [b appendWithNSString:@"\n"];
      cursorPos = 0;
    }
  }
  if ([b length] == 0 || [b charAtWithInt:[b length] - 1] != 0x000a) {
    (void) [b appendWithNSString:@"\n"];
  }
  [self printWithNSObjectArray:[record channels] withNSString:[b description]];
  if (info_ != nil) {
    info_->numElementsPrinted_ += 1;
  }
  JavaUtilArrayList *rtn = new_JavaUtilArrayList_init();
  [rtn addWithId:record];
  return rtn;
}

- (id<JavaUtilList>)signalStartTrackWithEduStanfordNlpUtilLoggingRedwood_Record:(EduStanfordNlpUtilLoggingRedwood_Record *)signal {
  [((JavaUtilLinkedList *) nil_chk(self->queuedTracks_)) addLastWithId:signal];
  if (info_ != nil) {
    (void) [((JavaUtilStack *) nil_chk(self->trackStack_)) pushWithId:info_];
  }
  info_ = new_EduStanfordNlpUtilLoggingOutputHandler_TrackInfo_initWithNSString_withLong_([nil_chk(((EduStanfordNlpUtilLoggingRedwood_Record *) nil_chk(signal))->content_) description], signal->timesstamp_);
  if ([signal force]) {
    EduStanfordNlpUtilLoggingOutputHandler_updateTracksWithInt_(self, signal->depth_ + 1);
  }
  return JreLoadStatic(EduStanfordNlpUtilLoggingLogRecordHandler, EMPTY);
}

- (id<JavaUtilList>)signalEndTrackWithInt:(jint)newDepth
                                 withLong:(jlong)timeOfEnd {
  EduStanfordNlpUtilLoggingOutputHandler_TrackInfo *childInfo = self->info_;
  if (childInfo == nil) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"OutputHandler received endTrack() without matching startTrack() --are your handlers mis-configured?");
  }
  if ([((JavaUtilStack *) nil_chk(trackStack_)) empty]) {
    self->info_ = nil;
  }
  else {
    self->info_ = [((JavaUtilStack *) nil_chk(self->trackStack_)) pop];
    ((EduStanfordNlpUtilLoggingOutputHandler_TrackInfo *) nil_chk(self->info_))->numElementsPrinted_ += childInfo->numElementsPrinted_;
  }
  if ([((JavaUtilLinkedList *) nil_chk(self->queuedTracks_)) isEmpty]) {
    JavaLangStringBuilder *b = new_JavaLangStringBuilder_init();
    if (!self->missingOpenBracket_) {
      for (jint i = 0; i < self->leftMargin_; i++) {
        (void) [b appendWithChar:' '];
      }
      EduStanfordNlpUtilLoggingOutputHandler_writeContentWithInt_withId_withJavaLangStringBuilder_(self, newDepth, @"", b);
      (void) [b appendWithNSString:@"} "];
    }
    self->missingOpenBracket_ = false;
    if (childInfo->numElementsPrinted_ > self->minLineCountForTrackNameReminder_) {
      (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([b appendWithNSString:@"<< "])) appendWithNSString:childInfo->name_])) appendWithChar:' '];
    }
    if (timeOfEnd - childInfo->beginTime_ > 100) {
      (void) [b appendWithChar:'['];
      EduStanfordNlpUtilLoggingRedwood_formatTimeDifferenceWithLong_withJavaLangStringBuilder_(timeOfEnd - childInfo->beginTime_, b);
      (void) [b appendWithChar:']'];
    }
    (void) [b appendWithChar:0x000a];
    [self printWithNSObjectArray:nil withNSString:[((JavaLangStringBuilder *) nil_chk([self styleWithJavaLangStringBuilder:new_JavaLangStringBuilder_init() withNSString:[b description] withEduStanfordNlpUtilLoggingColor:trackColor_ withEduStanfordNlpUtilLoggingStyle:trackStyle_])) description]];
  }
  else {
    (void) [((JavaUtilLinkedList *) nil_chk(self->queuedTracks_)) removeLast];
  }
  return JreLoadStatic(EduStanfordNlpUtilLoggingLogRecordHandler, EMPTY);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpUtilLoggingOutputHandler_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LJavaLangStringBuilder;", 0x4, 8, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 14, 15, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 16, 17, -1, 18, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 19, 17, -1, 18, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 20, 21, -1, 22, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(printWithNSObjectArray:withNSString:);
  methods[1].selector = @selector(colorChannelWithNSString:withEduStanfordNlpUtilLoggingColor:);
  methods[2].selector = @selector(styleChannelWithNSString:withEduStanfordNlpUtilLoggingStyle:);
  methods[3].selector = @selector(setColorChannelsWithBoolean:);
  methods[4].selector = @selector(styleWithJavaLangStringBuilder:withNSString:withEduStanfordNlpUtilLoggingColor:withEduStanfordNlpUtilLoggingStyle:);
  methods[5].selector = @selector(supportsAnsi);
  methods[6].selector = @selector(formatChannelWithJavaLangStringBuilder:withNSString:withId:);
  methods[7].selector = @selector(writeContentWithInt:withId:withJavaLangStringBuilder:);
  methods[8].selector = @selector(updateTracksWithInt:);
  methods[9].selector = @selector(handleWithEduStanfordNlpUtilLoggingRedwood_Record:);
  methods[10].selector = @selector(signalStartTrackWithEduStanfordNlpUtilLoggingRedwood_Record:);
  methods[11].selector = @selector(signalEndTrackWithInt:withLong:);
  methods[12].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "queuedTracks_", "LJavaUtilLinkedList;", .constantValue.asLong = 0, 0x4, -1, -1, 23, -1 },
    { "trackStack_", "LJavaUtilStack;", .constantValue.asLong = 0, 0x4, -1, -1, 24, -1 },
    { "info_", "LEduStanfordNlpUtilLoggingOutputHandler_TrackInfo;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "tab_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "channelSeparatorChar_", "C", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "leftMargin_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "minLineCountForTrackNameReminder_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "missingOpenBracket_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "trackColor_", "LEduStanfordNlpUtilLoggingColor;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "channelColors_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x4, -1, -1, 25, -1 },
    { "addRandomColors_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "trackStyle_", "LEduStanfordNlpUtilLoggingStyle;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "channelStyles_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x4, -1, -1, 26, -1 },
  };
  static const void *ptrTable[] = { "print", "[LNSObject;LNSString;", "colorChannel", "LNSString;LEduStanfordNlpUtilLoggingColor;", "styleChannel", "LNSString;LEduStanfordNlpUtilLoggingStyle;", "setColorChannels", "Z", "style", "LJavaLangStringBuilder;LNSString;LEduStanfordNlpUtilLoggingColor;LEduStanfordNlpUtilLoggingStyle;", "formatChannel", "LJavaLangStringBuilder;LNSString;LNSObject;", "writeContent", "ILNSObject;LJavaLangStringBuilder;", "updateTracks", "I", "handle", "LEduStanfordNlpUtilLoggingRedwood_Record;", "(Ledu/stanford/nlp/util/logging/Redwood$Record;)Ljava/util/List<Ledu/stanford/nlp/util/logging/Redwood$Record;>;", "signalStartTrack", "signalEndTrack", "IJ", "(IJ)Ljava/util/List<Ledu/stanford/nlp/util/logging/Redwood$Record;>;", "Ljava/util/LinkedList<Ledu/stanford/nlp/util/logging/Redwood$Record;>;", "Ljava/util/Stack<Ledu/stanford/nlp/util/logging/OutputHandler$TrackInfo;>;", "Ljava/util/Map<Ljava/lang/String;Ledu/stanford/nlp/util/logging/Color;>;", "Ljava/util/Map<Ljava/lang/String;Ledu/stanford/nlp/util/logging/Style;>;", "LEduStanfordNlpUtilLoggingOutputHandler_TrackInfo;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilLoggingOutputHandler = { "OutputHandler", "edu.stanford.nlp.util.logging", ptrTable, methods, fields, 7, 0x401, 13, 13, -1, 27, -1, -1, -1 };
  return &_EduStanfordNlpUtilLoggingOutputHandler;
}

@end

void EduStanfordNlpUtilLoggingOutputHandler_writeContentWithInt_withId_withJavaLangStringBuilder_(EduStanfordNlpUtilLoggingOutputHandler *self, jint depth, id content, JavaLangStringBuilder *b) {
  if (self->leftMargin_ > 2) {
    (void) [((JavaLangStringBuilder *) nil_chk(b)) appendWithNSString:self->tab_];
  }
  for (jint i = 0; i < depth; i++) {
    (void) [((JavaLangStringBuilder *) nil_chk(b)) appendWithNSString:self->tab_];
  }
  (void) [((JavaLangStringBuilder *) nil_chk(b)) appendWithNSString:[nil_chk(content) description]];
}

void EduStanfordNlpUtilLoggingOutputHandler_updateTracksWithInt_(EduStanfordNlpUtilLoggingOutputHandler *self, jint untilDepth) {
  while (![((JavaUtilLinkedList *) nil_chk(self->queuedTracks_)) isEmpty]) {
    EduStanfordNlpUtilLoggingRedwood_Record *signal = [((JavaUtilLinkedList *) nil_chk(self->queuedTracks_)) removeFirst];
    if (((EduStanfordNlpUtilLoggingRedwood_Record *) nil_chk(signal))->depth_ >= untilDepth) {
      [((JavaUtilLinkedList *) nil_chk(self->queuedTracks_)) addWithId:signal];
      return;
    }
    JavaLangStringBuilder *b = new_JavaLangStringBuilder_init();
    if (self->missingOpenBracket_) {
      (void) [b appendWithNSString:@"{\n"];
    }
    for (jint i = 0; i < self->leftMargin_; i++) {
      (void) [b appendWithNSString:@" "];
    }
    EduStanfordNlpUtilLoggingOutputHandler_writeContentWithInt_withId_withJavaLangStringBuilder_(self, signal->depth_, signal->content_, b);
    if (((jint) [((NSString *) nil_chk([nil_chk(signal->content_) description])) length]) > 0) {
      (void) [b appendWithNSString:@" "];
    }
    [self printWithNSObjectArray:nil withNSString:[((JavaLangStringBuilder *) nil_chk([self styleWithJavaLangStringBuilder:new_JavaLangStringBuilder_init() withNSString:[b description] withEduStanfordNlpUtilLoggingColor:self->trackColor_ withEduStanfordNlpUtilLoggingStyle:self->trackStyle_])) description]];
    self->missingOpenBracket_ = true;
    if (self->info_ != nil) {
      self->info_->numElementsPrinted_ += 1;
    }
  }
}

void EduStanfordNlpUtilLoggingOutputHandler_init(EduStanfordNlpUtilLoggingOutputHandler *self) {
  EduStanfordNlpUtilLoggingLogRecordHandler_init(self);
  self->queuedTracks_ = new_JavaUtilLinkedList_init();
  self->trackStack_ = new_JavaUtilStack_init();
  self->tab_ = @"  ";
  self->channelSeparatorChar_ = ' ';
  self->leftMargin_ = 0;
  self->minLineCountForTrackNameReminder_ = 50;
  self->missingOpenBracket_ = false;
  self->trackColor_ = JreLoadEnum(EduStanfordNlpUtilLoggingColor, NONE);
  self->channelColors_ = nil;
  self->addRandomColors_ = false;
  self->trackStyle_ = JreLoadEnum(EduStanfordNlpUtilLoggingStyle, NONE);
  self->channelStyles_ = nil;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpUtilLoggingOutputHandler)

@implementation EduStanfordNlpUtilLoggingOutputHandler_TrackInfo

- (instancetype)initWithNSString:(NSString *)name
                        withLong:(jlong)timestamp {
  EduStanfordNlpUtilLoggingOutputHandler_TrackInfo_initWithNSString_withLong_(self, name, timestamp);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "beginTime_", "J", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "name_", "LNSString;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "numElementsPrinted_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;J", "LEduStanfordNlpUtilLoggingOutputHandler;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilLoggingOutputHandler_TrackInfo = { "TrackInfo", "edu.stanford.nlp.util.logging", ptrTable, methods, fields, 7, 0xa, 1, 3, 1, -1, -1, -1, -1 };
  return &_EduStanfordNlpUtilLoggingOutputHandler_TrackInfo;
}

@end

void EduStanfordNlpUtilLoggingOutputHandler_TrackInfo_initWithNSString_withLong_(EduStanfordNlpUtilLoggingOutputHandler_TrackInfo *self, NSString *name, jlong timestamp) {
  NSObject_init(self);
  self->numElementsPrinted_ = 0;
  self->name_ = name;
  self->beginTime_ = timestamp;
}

EduStanfordNlpUtilLoggingOutputHandler_TrackInfo *new_EduStanfordNlpUtilLoggingOutputHandler_TrackInfo_initWithNSString_withLong_(NSString *name, jlong timestamp) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilLoggingOutputHandler_TrackInfo, initWithNSString_withLong_, name, timestamp)
}

EduStanfordNlpUtilLoggingOutputHandler_TrackInfo *create_EduStanfordNlpUtilLoggingOutputHandler_TrackInfo_initWithNSString_withLong_(NSString *name, jlong timestamp) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilLoggingOutputHandler_TrackInfo, initWithNSString_withLong_, name, timestamp)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpUtilLoggingOutputHandler_TrackInfo)
