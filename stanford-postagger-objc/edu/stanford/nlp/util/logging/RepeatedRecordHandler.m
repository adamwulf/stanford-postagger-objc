//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/util/logging/RepeatedRecordHandler.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/util/logging/LogRecordHandler.h"
#include "edu/stanford/nlp/util/logging/Redwood.h"
#include "edu/stanford/nlp/util/logging/RepeatedRecordHandler.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"
#include "java/util/Stack.h"

@interface EduStanfordNlpUtilLoggingRepeatedRecordHandler () {
 @public
  JavaUtilStack *stack_;
  id<EduStanfordNlpUtilLoggingRepeatedRecordHandler_RepeatSemantics> repeatSemantics_;
}

- (void)flushWithEduStanfordNlpUtilLoggingRepeatedRecordHandler_RepeatedRecordInfo:(EduStanfordNlpUtilLoggingRepeatedRecordHandler_RepeatedRecordInfo *)info
                                                                  withJavaUtilList:(id<JavaUtilList>)willReturn;

- (void)flushParentsWithJavaUtilList:(id<JavaUtilList>)willReturn;

- (jboolean)recordVerdictWithEduStanfordNlpUtilLoggingRedwood_Record:(EduStanfordNlpUtilLoggingRedwood_Record *)r
                                                         withBoolean:(jboolean)isRepeat
                                                         withBoolean:(jboolean)shouldPrint
                                                    withJavaUtilList:(id<JavaUtilList>)willReturn;

- (jboolean)internalHandleWithEduStanfordNlpUtilLoggingRedwood_Record:(EduStanfordNlpUtilLoggingRedwood_Record *)record
                                                     withJavaUtilList:(id<JavaUtilList>)willReturn;

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpUtilLoggingRepeatedRecordHandler, stack_, JavaUtilStack *)
J2OBJC_FIELD_SETTER(EduStanfordNlpUtilLoggingRepeatedRecordHandler, repeatSemantics_, id<EduStanfordNlpUtilLoggingRepeatedRecordHandler_RepeatSemantics>)

__attribute__((unused)) static void EduStanfordNlpUtilLoggingRepeatedRecordHandler_flushWithEduStanfordNlpUtilLoggingRepeatedRecordHandler_RepeatedRecordInfo_withJavaUtilList_(EduStanfordNlpUtilLoggingRepeatedRecordHandler *self, EduStanfordNlpUtilLoggingRepeatedRecordHandler_RepeatedRecordInfo *info, id<JavaUtilList> willReturn);

__attribute__((unused)) static void EduStanfordNlpUtilLoggingRepeatedRecordHandler_flushParentsWithJavaUtilList_(EduStanfordNlpUtilLoggingRepeatedRecordHandler *self, id<JavaUtilList> willReturn);

__attribute__((unused)) static jboolean EduStanfordNlpUtilLoggingRepeatedRecordHandler_recordVerdictWithEduStanfordNlpUtilLoggingRedwood_Record_withBoolean_withBoolean_withJavaUtilList_(EduStanfordNlpUtilLoggingRepeatedRecordHandler *self, EduStanfordNlpUtilLoggingRedwood_Record *r, jboolean isRepeat, jboolean shouldPrint, id<JavaUtilList> willReturn);

__attribute__((unused)) static jboolean EduStanfordNlpUtilLoggingRepeatedRecordHandler_internalHandleWithEduStanfordNlpUtilLoggingRedwood_Record_withJavaUtilList_(EduStanfordNlpUtilLoggingRepeatedRecordHandler *self, EduStanfordNlpUtilLoggingRedwood_Record *record, id<JavaUtilList> willReturn);

typedef NS_ENUM(NSUInteger, EduStanfordNlpUtilLoggingRepeatedRecordHandler_PendingType_Enum) {
  EduStanfordNlpUtilLoggingRepeatedRecordHandler_PendingType_Enum_NONE = 0,
  EduStanfordNlpUtilLoggingRepeatedRecordHandler_PendingType_Enum_PRINTING = 1,
  EduStanfordNlpUtilLoggingRepeatedRecordHandler_PendingType_Enum_SEEN = 2,
};

@interface EduStanfordNlpUtilLoggingRepeatedRecordHandler_PendingType : JavaLangEnum < NSCopying >

+ (IOSObjectArray *)values;

+ (EduStanfordNlpUtilLoggingRepeatedRecordHandler_PendingType *)valueOfWithNSString:(NSString *)name;

- (id)copyWithZone:(NSZone *)zone;

@end

J2OBJC_STATIC_INIT(EduStanfordNlpUtilLoggingRepeatedRecordHandler_PendingType)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT EduStanfordNlpUtilLoggingRepeatedRecordHandler_PendingType *EduStanfordNlpUtilLoggingRepeatedRecordHandler_PendingType_values_[];

inline EduStanfordNlpUtilLoggingRepeatedRecordHandler_PendingType *EduStanfordNlpUtilLoggingRepeatedRecordHandler_PendingType_get_NONE();
J2OBJC_ENUM_CONSTANT(EduStanfordNlpUtilLoggingRepeatedRecordHandler_PendingType, NONE)

inline EduStanfordNlpUtilLoggingRepeatedRecordHandler_PendingType *EduStanfordNlpUtilLoggingRepeatedRecordHandler_PendingType_get_PRINTING();
J2OBJC_ENUM_CONSTANT(EduStanfordNlpUtilLoggingRepeatedRecordHandler_PendingType, PRINTING)

inline EduStanfordNlpUtilLoggingRepeatedRecordHandler_PendingType *EduStanfordNlpUtilLoggingRepeatedRecordHandler_PendingType_get_SEEN();
J2OBJC_ENUM_CONSTANT(EduStanfordNlpUtilLoggingRepeatedRecordHandler_PendingType, SEEN)

__attribute__((unused)) static void EduStanfordNlpUtilLoggingRepeatedRecordHandler_PendingType_initWithNSString_withInt_(EduStanfordNlpUtilLoggingRepeatedRecordHandler_PendingType *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static EduStanfordNlpUtilLoggingRepeatedRecordHandler_PendingType *new_EduStanfordNlpUtilLoggingRepeatedRecordHandler_PendingType_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

__attribute__((unused)) static IOSObjectArray *EduStanfordNlpUtilLoggingRepeatedRecordHandler_PendingType_values();

__attribute__((unused)) static EduStanfordNlpUtilLoggingRepeatedRecordHandler_PendingType *EduStanfordNlpUtilLoggingRepeatedRecordHandler_PendingType_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT EduStanfordNlpUtilLoggingRepeatedRecordHandler_PendingType *EduStanfordNlpUtilLoggingRepeatedRecordHandler_PendingType_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpUtilLoggingRepeatedRecordHandler_PendingType)

@interface EduStanfordNlpUtilLoggingRepeatedRecordHandler_RepeatedRecordInfo () {
 @public
  EduStanfordNlpUtilLoggingRedwood_Record *lastRecord_;
  jint timesSeen_;
  jint timesPrinted_;
  jlong timeOfLastPrintedRecord_;
  jboolean suppressRecord_;
  jboolean somethingPrinted_;
  EduStanfordNlpUtilLoggingRepeatedRecordHandler_PendingType *trackCountPending_;
}

- (instancetype)init;

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpUtilLoggingRepeatedRecordHandler_RepeatedRecordInfo, lastRecord_, EduStanfordNlpUtilLoggingRedwood_Record *)
J2OBJC_FIELD_SETTER(EduStanfordNlpUtilLoggingRepeatedRecordHandler_RepeatedRecordInfo, trackCountPending_, EduStanfordNlpUtilLoggingRepeatedRecordHandler_PendingType *)

__attribute__((unused)) static void EduStanfordNlpUtilLoggingRepeatedRecordHandler_RepeatedRecordInfo_init(EduStanfordNlpUtilLoggingRepeatedRecordHandler_RepeatedRecordInfo *self);

__attribute__((unused)) static EduStanfordNlpUtilLoggingRepeatedRecordHandler_RepeatedRecordInfo *new_EduStanfordNlpUtilLoggingRepeatedRecordHandler_RepeatedRecordInfo_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpUtilLoggingRepeatedRecordHandler_RepeatedRecordInfo *create_EduStanfordNlpUtilLoggingRepeatedRecordHandler_RepeatedRecordInfo_init();

@interface EduStanfordNlpUtilLoggingRepeatedRecordHandler_RepeatSemantics : NSObject

@end

@interface EduStanfordNlpUtilLoggingRepeatedRecordHandler_ApproximateRepeatSemantics ()

+ (jboolean)sameMessageWithNSString:(NSString *)last
                       withNSString:(NSString *)current;

@end

__attribute__((unused)) static jboolean EduStanfordNlpUtilLoggingRepeatedRecordHandler_ApproximateRepeatSemantics_sameMessageWithNSString_withNSString_(NSString *last, NSString *current);

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpUtilLoggingRepeatedRecordHandler)

EduStanfordNlpUtilLoggingRepeatedRecordHandler_ApproximateRepeatSemantics *EduStanfordNlpUtilLoggingRepeatedRecordHandler_APPROXIMATE;
EduStanfordNlpUtilLoggingRepeatedRecordHandler_ExactRepeatSemantics *EduStanfordNlpUtilLoggingRepeatedRecordHandler_EXACT;

@implementation EduStanfordNlpUtilLoggingRepeatedRecordHandler

- (instancetype)initWithEduStanfordNlpUtilLoggingRepeatedRecordHandler_RepeatSemantics:(id<EduStanfordNlpUtilLoggingRepeatedRecordHandler_RepeatSemantics>)repeatSemantics {
  EduStanfordNlpUtilLoggingRepeatedRecordHandler_initWithEduStanfordNlpUtilLoggingRepeatedRecordHandler_RepeatSemantics_(self, repeatSemantics);
  return self;
}

- (void)flushWithEduStanfordNlpUtilLoggingRepeatedRecordHandler_RepeatedRecordInfo:(EduStanfordNlpUtilLoggingRepeatedRecordHandler_RepeatedRecordInfo *)info
                                                                  withJavaUtilList:(id<JavaUtilList>)willReturn {
  EduStanfordNlpUtilLoggingRepeatedRecordHandler_flushWithEduStanfordNlpUtilLoggingRepeatedRecordHandler_RepeatedRecordInfo_withJavaUtilList_(self, info, willReturn);
}

- (void)flushParentsWithJavaUtilList:(id<JavaUtilList>)willReturn {
  EduStanfordNlpUtilLoggingRepeatedRecordHandler_flushParentsWithJavaUtilList_(self, willReturn);
}

- (jboolean)recordVerdictWithEduStanfordNlpUtilLoggingRedwood_Record:(EduStanfordNlpUtilLoggingRedwood_Record *)r
                                                         withBoolean:(jboolean)isRepeat
                                                         withBoolean:(jboolean)shouldPrint
                                                    withJavaUtilList:(id<JavaUtilList>)willReturn {
  return EduStanfordNlpUtilLoggingRepeatedRecordHandler_recordVerdictWithEduStanfordNlpUtilLoggingRedwood_Record_withBoolean_withBoolean_withJavaUtilList_(self, r, isRepeat, shouldPrint, willReturn);
}

- (jboolean)internalHandleWithEduStanfordNlpUtilLoggingRedwood_Record:(EduStanfordNlpUtilLoggingRedwood_Record *)record
                                                     withJavaUtilList:(id<JavaUtilList>)willReturn {
  return EduStanfordNlpUtilLoggingRepeatedRecordHandler_internalHandleWithEduStanfordNlpUtilLoggingRedwood_Record_withJavaUtilList_(self, record, willReturn);
}

- (id<JavaUtilList>)handleWithEduStanfordNlpUtilLoggingRedwood_Record:(EduStanfordNlpUtilLoggingRedwood_Record *)record {
  id<JavaUtilList> willReturn = new_JavaUtilArrayList_init();
  if (EduStanfordNlpUtilLoggingRepeatedRecordHandler_internalHandleWithEduStanfordNlpUtilLoggingRedwood_Record_withJavaUtilList_(self, record, willReturn)) {
    [willReturn addWithId:record];
  }
  return willReturn;
}

- (id<JavaUtilList>)signalStartTrackWithEduStanfordNlpUtilLoggingRedwood_Record:(EduStanfordNlpUtilLoggingRedwood_Record *)signal {
  id<JavaUtilList> willReturn = new_JavaUtilArrayList_init();
  jboolean isPrinting = EduStanfordNlpUtilLoggingRepeatedRecordHandler_internalHandleWithEduStanfordNlpUtilLoggingRedwood_Record_withJavaUtilList_(self, signal, willReturn);
  if (![((EduStanfordNlpUtilLoggingRedwood_Record *) nil_chk(signal)) force]) {
    if (isPrinting) {
      ((EduStanfordNlpUtilLoggingRepeatedRecordHandler_RepeatedRecordInfo *) nil_chk(current_))->trackCountPending_ = JreLoadEnum(EduStanfordNlpUtilLoggingRepeatedRecordHandler_PendingType, PRINTING);
      current_->timesPrinted_ -= 1;
    }
    else {
      ((EduStanfordNlpUtilLoggingRepeatedRecordHandler_RepeatedRecordInfo *) nil_chk(current_))->trackCountPending_ = JreLoadEnum(EduStanfordNlpUtilLoggingRepeatedRecordHandler_PendingType, SEEN);
    }
    current_->timesSeen_ -= 1;
  }
  (void) [((JavaUtilStack *) nil_chk(stack_)) pushWithId:current_];
  current_ = new_EduStanfordNlpUtilLoggingRepeatedRecordHandler_RepeatedRecordInfo_init();
  if (!isPrinting) {
    current_->suppressRecord_ = true;
  }
  return willReturn;
}

- (id<JavaUtilList>)signalEndTrackWithInt:(jint)newDepth
                                 withLong:(jlong)timeEnded {
  id<JavaUtilList> willReturn = new_JavaUtilArrayList_init();
  jboolean trackWasNonempty = ((EduStanfordNlpUtilLoggingRepeatedRecordHandler_RepeatedRecordInfo *) nil_chk(current_))->somethingPrinted_;
  EduStanfordNlpUtilLoggingRepeatedRecordHandler_flushWithEduStanfordNlpUtilLoggingRepeatedRecordHandler_RepeatedRecordInfo_withJavaUtilList_(self, current_, willReturn);
  current_ = [((JavaUtilStack *) nil_chk(stack_)) pop];
  if (trackWasNonempty) {
    if (((EduStanfordNlpUtilLoggingRepeatedRecordHandler_RepeatedRecordInfo *) nil_chk(current_))->trackCountPending_ == JreLoadEnum(EduStanfordNlpUtilLoggingRepeatedRecordHandler_PendingType, PRINTING)) {
      current_->timesPrinted_ += 1;
    }
    if (current_->trackCountPending_ != JreLoadEnum(EduStanfordNlpUtilLoggingRepeatedRecordHandler_PendingType, NONE)) {
      current_->timesSeen_ += 1;
    }
    current_->somethingPrinted_ = true;
  }
  ((EduStanfordNlpUtilLoggingRepeatedRecordHandler_RepeatedRecordInfo *) nil_chk(current_))->trackCountPending_ = JreLoadEnum(EduStanfordNlpUtilLoggingRepeatedRecordHandler_PendingType, NONE);
  return willReturn;
}

- (id<JavaUtilList>)signalShutdown {
  id<JavaUtilList> willReturn = new_JavaUtilArrayList_init();
  EduStanfordNlpUtilLoggingRepeatedRecordHandler_flushWithEduStanfordNlpUtilLoggingRepeatedRecordHandler_RepeatedRecordInfo_withJavaUtilList_(self, current_, willReturn);
  return willReturn;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 1, 2, -1, 3, -1, -1 },
    { NULL, "V", 0x2, 4, 5, -1, 6, -1, -1 },
    { NULL, "Z", 0x2, 7, 8, -1, 9, -1, -1 },
    { NULL, "Z", 0x2, 10, 11, -1, 12, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 13, 14, -1, 15, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 16, 14, -1, 15, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 17, 18, -1, 19, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 20, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpUtilLoggingRepeatedRecordHandler_RepeatSemantics:);
  methods[1].selector = @selector(flushWithEduStanfordNlpUtilLoggingRepeatedRecordHandler_RepeatedRecordInfo:withJavaUtilList:);
  methods[2].selector = @selector(flushParentsWithJavaUtilList:);
  methods[3].selector = @selector(recordVerdictWithEduStanfordNlpUtilLoggingRedwood_Record:withBoolean:withBoolean:withJavaUtilList:);
  methods[4].selector = @selector(internalHandleWithEduStanfordNlpUtilLoggingRedwood_Record:withJavaUtilList:);
  methods[5].selector = @selector(handleWithEduStanfordNlpUtilLoggingRedwood_Record:);
  methods[6].selector = @selector(signalStartTrackWithEduStanfordNlpUtilLoggingRedwood_Record:);
  methods[7].selector = @selector(signalEndTrackWithInt:withLong:);
  methods[8].selector = @selector(signalShutdown);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "stack_", "LJavaUtilStack;", .constantValue.asLong = 0, 0x12, -1, -1, 21, -1 },
    { "current_", "LEduStanfordNlpUtilLoggingRepeatedRecordHandler_RepeatedRecordInfo;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "repeatSemantics_", "LEduStanfordNlpUtilLoggingRepeatedRecordHandler_RepeatSemantics;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "APPROXIMATE", "LEduStanfordNlpUtilLoggingRepeatedRecordHandler_ApproximateRepeatSemantics;", .constantValue.asLong = 0, 0x19, -1, 22, -1, -1 },
    { "EXACT", "LEduStanfordNlpUtilLoggingRepeatedRecordHandler_ExactRepeatSemantics;", .constantValue.asLong = 0, 0x19, -1, 23, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpUtilLoggingRepeatedRecordHandler_RepeatSemantics;", "flush", "LEduStanfordNlpUtilLoggingRepeatedRecordHandler_RepeatedRecordInfo;LJavaUtilList;", "(Ledu/stanford/nlp/util/logging/RepeatedRecordHandler$RepeatedRecordInfo;Ljava/util/List<Ledu/stanford/nlp/util/logging/Redwood$Record;>;)V", "flushParents", "LJavaUtilList;", "(Ljava/util/List<Ledu/stanford/nlp/util/logging/Redwood$Record;>;)V", "recordVerdict", "LEduStanfordNlpUtilLoggingRedwood_Record;ZZLJavaUtilList;", "(Ledu/stanford/nlp/util/logging/Redwood$Record;ZZLjava/util/List<Ledu/stanford/nlp/util/logging/Redwood$Record;>;)Z", "internalHandle", "LEduStanfordNlpUtilLoggingRedwood_Record;LJavaUtilList;", "(Ledu/stanford/nlp/util/logging/Redwood$Record;Ljava/util/List<Ledu/stanford/nlp/util/logging/Redwood$Record;>;)Z", "handle", "LEduStanfordNlpUtilLoggingRedwood_Record;", "(Ledu/stanford/nlp/util/logging/Redwood$Record;)Ljava/util/List<Ledu/stanford/nlp/util/logging/Redwood$Record;>;", "signalStartTrack", "signalEndTrack", "IJ", "(IJ)Ljava/util/List<Ledu/stanford/nlp/util/logging/Redwood$Record;>;", "()Ljava/util/List<Ledu/stanford/nlp/util/logging/Redwood$Record;>;", "Ljava/util/Stack<Ledu/stanford/nlp/util/logging/RepeatedRecordHandler$RepeatedRecordInfo;>;", &EduStanfordNlpUtilLoggingRepeatedRecordHandler_APPROXIMATE, &EduStanfordNlpUtilLoggingRepeatedRecordHandler_EXACT, "LEduStanfordNlpUtilLoggingRepeatedRecordHandler_PendingType;LEduStanfordNlpUtilLoggingRepeatedRecordHandler_RepeatedRecordInfo;LEduStanfordNlpUtilLoggingRepeatedRecordHandler_RepeatSemantics;LEduStanfordNlpUtilLoggingRepeatedRecordHandler_ApproximateRepeatSemantics;LEduStanfordNlpUtilLoggingRepeatedRecordHandler_ExactRepeatSemantics;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilLoggingRepeatedRecordHandler = { "RepeatedRecordHandler", "edu.stanford.nlp.util.logging", ptrTable, methods, fields, 7, 0x1, 9, 5, -1, 24, -1, -1, -1 };
  return &_EduStanfordNlpUtilLoggingRepeatedRecordHandler;
}

+ (void)initialize {
  if (self == [EduStanfordNlpUtilLoggingRepeatedRecordHandler class]) {
    EduStanfordNlpUtilLoggingRepeatedRecordHandler_APPROXIMATE = new_EduStanfordNlpUtilLoggingRepeatedRecordHandler_ApproximateRepeatSemantics_init();
    EduStanfordNlpUtilLoggingRepeatedRecordHandler_EXACT = new_EduStanfordNlpUtilLoggingRepeatedRecordHandler_ExactRepeatSemantics_init();
    J2OBJC_SET_INITIALIZED(EduStanfordNlpUtilLoggingRepeatedRecordHandler)
  }
}

@end

void EduStanfordNlpUtilLoggingRepeatedRecordHandler_initWithEduStanfordNlpUtilLoggingRepeatedRecordHandler_RepeatSemantics_(EduStanfordNlpUtilLoggingRepeatedRecordHandler *self, id<EduStanfordNlpUtilLoggingRepeatedRecordHandler_RepeatSemantics> repeatSemantics) {
  EduStanfordNlpUtilLoggingLogRecordHandler_init(self);
  self->stack_ = new_JavaUtilStack_init();
  self->current_ = new_EduStanfordNlpUtilLoggingRepeatedRecordHandler_RepeatedRecordInfo_init();
  self->repeatSemantics_ = repeatSemantics;
}

EduStanfordNlpUtilLoggingRepeatedRecordHandler *new_EduStanfordNlpUtilLoggingRepeatedRecordHandler_initWithEduStanfordNlpUtilLoggingRepeatedRecordHandler_RepeatSemantics_(id<EduStanfordNlpUtilLoggingRepeatedRecordHandler_RepeatSemantics> repeatSemantics) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilLoggingRepeatedRecordHandler, initWithEduStanfordNlpUtilLoggingRepeatedRecordHandler_RepeatSemantics_, repeatSemantics)
}

EduStanfordNlpUtilLoggingRepeatedRecordHandler *create_EduStanfordNlpUtilLoggingRepeatedRecordHandler_initWithEduStanfordNlpUtilLoggingRepeatedRecordHandler_RepeatSemantics_(id<EduStanfordNlpUtilLoggingRepeatedRecordHandler_RepeatSemantics> repeatSemantics) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilLoggingRepeatedRecordHandler, initWithEduStanfordNlpUtilLoggingRepeatedRecordHandler_RepeatSemantics_, repeatSemantics)
}

void EduStanfordNlpUtilLoggingRepeatedRecordHandler_flushWithEduStanfordNlpUtilLoggingRepeatedRecordHandler_RepeatedRecordInfo_withJavaUtilList_(EduStanfordNlpUtilLoggingRepeatedRecordHandler *self, EduStanfordNlpUtilLoggingRepeatedRecordHandler_RepeatedRecordInfo *info, id<JavaUtilList> willReturn) {
  if (((EduStanfordNlpUtilLoggingRepeatedRecordHandler_RepeatedRecordInfo *) nil_chk(info))->suppressRecord_) {
    return;
  }
  jint repeatedRecordCount = info->timesSeen_ - info->timesPrinted_;
  if (repeatedRecordCount > 0) {
    IOSObjectArray *newTags = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk([((EduStanfordNlpUtilLoggingRedwood_Record *) nil_chk(info->lastRecord_)) channels]))->size_ + 1 type:NSObject_class_()];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([((EduStanfordNlpUtilLoggingRedwood_Record *) nil_chk(info->lastRecord_)) channels], 0, newTags, 1, ((IOSObjectArray *) nil_chk([((EduStanfordNlpUtilLoggingRedwood_Record *) nil_chk(info->lastRecord_)) channels]))->size_);
    (void) IOSObjectArray_Set(newTags, 0, JreLoadStatic(EduStanfordNlpUtilLoggingRedwood, FORCE));
    EduStanfordNlpUtilLoggingRedwood_Record *newRecord = new_EduStanfordNlpUtilLoggingRedwood_Record_initWithId_withNSObjectArray_withInt_withLong_([((id<EduStanfordNlpUtilLoggingRepeatedRecordHandler_RepeatSemantics>) nil_chk(self->repeatSemantics_)) messageWithInt:repeatedRecordCount], newTags, ((EduStanfordNlpUtilLoggingRedwood_Record *) nil_chk(info->lastRecord_))->depth_, info->lastRecord_->timesstamp_);
    [((id<JavaUtilList>) nil_chk(willReturn)) addWithId:newRecord];
    info->timesSeen_ = 0;
    info->timesPrinted_ = 0;
  }
}

void EduStanfordNlpUtilLoggingRepeatedRecordHandler_flushParentsWithJavaUtilList_(EduStanfordNlpUtilLoggingRepeatedRecordHandler *self, id<JavaUtilList> willReturn) {
  JavaUtilStack *reverseStack = new_JavaUtilStack_init();
  while (![((JavaUtilStack *) nil_chk(self->stack_)) isEmpty]) {
    (void) [reverseStack pushWithId:[self->stack_ pop]];
  }
  while (![reverseStack isEmpty]) {
    EduStanfordNlpUtilLoggingRepeatedRecordHandler_RepeatedRecordInfo *info = [reverseStack pop];
    ((EduStanfordNlpUtilLoggingRepeatedRecordHandler_RepeatedRecordInfo *) nil_chk(info))->timesSeen_ -= 1;
    EduStanfordNlpUtilLoggingRepeatedRecordHandler_flushWithEduStanfordNlpUtilLoggingRepeatedRecordHandler_RepeatedRecordInfo_withJavaUtilList_(self, info, willReturn);
    (void) [self->stack_ pushWithId:info];
  }
}

jboolean EduStanfordNlpUtilLoggingRepeatedRecordHandler_recordVerdictWithEduStanfordNlpUtilLoggingRedwood_Record_withBoolean_withBoolean_withJavaUtilList_(EduStanfordNlpUtilLoggingRepeatedRecordHandler *self, EduStanfordNlpUtilLoggingRedwood_Record *r, jboolean isRepeat, jboolean shouldPrint, id<JavaUtilList> willReturn) {
  if ([((EduStanfordNlpUtilLoggingRedwood_Record *) nil_chk(r)) force]) {
    EduStanfordNlpUtilLoggingRepeatedRecordHandler_flushParentsWithJavaUtilList_(self, willReturn);
    if (isRepeat) {
      EduStanfordNlpUtilLoggingRepeatedRecordHandler_flushWithEduStanfordNlpUtilLoggingRepeatedRecordHandler_RepeatedRecordInfo_withJavaUtilList_(self, self->current_, willReturn);
    }
    shouldPrint = true;
  }
  if (!isRepeat) {
    EduStanfordNlpUtilLoggingRepeatedRecordHandler_flushWithEduStanfordNlpUtilLoggingRepeatedRecordHandler_RepeatedRecordInfo_withJavaUtilList_(self, self->current_, willReturn);
    ((EduStanfordNlpUtilLoggingRepeatedRecordHandler_RepeatedRecordInfo *) nil_chk(self->current_))->lastRecord_ = r;
  }
  if (shouldPrint) {
    ((EduStanfordNlpUtilLoggingRepeatedRecordHandler_RepeatedRecordInfo *) nil_chk(self->current_))->timeOfLastPrintedRecord_ = r->timesstamp_;
    self->current_->timesPrinted_ += 1;
  }
  ((EduStanfordNlpUtilLoggingRepeatedRecordHandler_RepeatedRecordInfo *) nil_chk(self->current_))->timesSeen_ += 1;
  self->current_->somethingPrinted_ = true;
  return shouldPrint;
}

jboolean EduStanfordNlpUtilLoggingRepeatedRecordHandler_internalHandleWithEduStanfordNlpUtilLoggingRedwood_Record_withJavaUtilList_(EduStanfordNlpUtilLoggingRepeatedRecordHandler *self, EduStanfordNlpUtilLoggingRedwood_Record *record, id<JavaUtilList> willReturn) {
  if (((EduStanfordNlpUtilLoggingRepeatedRecordHandler_RepeatedRecordInfo *) nil_chk(self->current_))->suppressRecord_) {
    return EduStanfordNlpUtilLoggingRepeatedRecordHandler_recordVerdictWithEduStanfordNlpUtilLoggingRedwood_Record_withBoolean_withBoolean_withJavaUtilList_(self, record, false, false, willReturn);
  }
  if (self->current_->lastRecord_ == nil) {
    return EduStanfordNlpUtilLoggingRepeatedRecordHandler_recordVerdictWithEduStanfordNlpUtilLoggingRedwood_Record_withBoolean_withBoolean_withJavaUtilList_(self, record, false, true, willReturn);
  }
  if ([((id<EduStanfordNlpUtilLoggingRepeatedRecordHandler_RepeatSemantics>) nil_chk(self->repeatSemantics_)) equalsWithEduStanfordNlpUtilLoggingRedwood_Record:self->current_->lastRecord_ withEduStanfordNlpUtilLoggingRedwood_Record:record]) {
    jlong currentTime = ((EduStanfordNlpUtilLoggingRedwood_Record *) nil_chk(record))->timesstamp_;
    if (currentTime - ((EduStanfordNlpUtilLoggingRepeatedRecordHandler_RepeatedRecordInfo *) nil_chk(self->current_))->timeOfLastPrintedRecord_ > [self->repeatSemantics_ maxWaitTimeInMillis]) {
      return EduStanfordNlpUtilLoggingRepeatedRecordHandler_recordVerdictWithEduStanfordNlpUtilLoggingRedwood_Record_withBoolean_withBoolean_withJavaUtilList_(self, record, true, true, willReturn);
    }
    if (((EduStanfordNlpUtilLoggingRepeatedRecordHandler_RepeatedRecordInfo *) nil_chk(self->current_))->timesSeen_ < [self->repeatSemantics_ numToForcePrint]) {
      return EduStanfordNlpUtilLoggingRepeatedRecordHandler_recordVerdictWithEduStanfordNlpUtilLoggingRedwood_Record_withBoolean_withBoolean_withJavaUtilList_(self, record, true, true, willReturn);
    }
    else {
      return EduStanfordNlpUtilLoggingRepeatedRecordHandler_recordVerdictWithEduStanfordNlpUtilLoggingRedwood_Record_withBoolean_withBoolean_withJavaUtilList_(self, record, true, false, willReturn);
    }
  }
  else {
    return EduStanfordNlpUtilLoggingRepeatedRecordHandler_recordVerdictWithEduStanfordNlpUtilLoggingRedwood_Record_withBoolean_withBoolean_withJavaUtilList_(self, record, false, true, willReturn);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpUtilLoggingRepeatedRecordHandler)

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpUtilLoggingRepeatedRecordHandler_PendingType)

EduStanfordNlpUtilLoggingRepeatedRecordHandler_PendingType *EduStanfordNlpUtilLoggingRepeatedRecordHandler_PendingType_values_[3];

@implementation EduStanfordNlpUtilLoggingRepeatedRecordHandler_PendingType

+ (IOSObjectArray *)values {
  return EduStanfordNlpUtilLoggingRepeatedRecordHandler_PendingType_values();
}

+ (EduStanfordNlpUtilLoggingRepeatedRecordHandler_PendingType *)valueOfWithNSString:(NSString *)name {
  return EduStanfordNlpUtilLoggingRepeatedRecordHandler_PendingType_valueOfWithNSString_(name);
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LEduStanfordNlpUtilLoggingRepeatedRecordHandler_PendingType;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpUtilLoggingRepeatedRecordHandler_PendingType;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "NONE", "LEduStanfordNlpUtilLoggingRepeatedRecordHandler_PendingType;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "PRINTING", "LEduStanfordNlpUtilLoggingRepeatedRecordHandler_PendingType;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "SEEN", "LEduStanfordNlpUtilLoggingRepeatedRecordHandler_PendingType;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(EduStanfordNlpUtilLoggingRepeatedRecordHandler_PendingType, NONE), &JreEnum(EduStanfordNlpUtilLoggingRepeatedRecordHandler_PendingType, PRINTING), &JreEnum(EduStanfordNlpUtilLoggingRepeatedRecordHandler_PendingType, SEEN), "LEduStanfordNlpUtilLoggingRepeatedRecordHandler;", "Ljava/lang/Enum<Ledu/stanford/nlp/util/logging/RepeatedRecordHandler$PendingType;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilLoggingRepeatedRecordHandler_PendingType = { "PendingType", "edu.stanford.nlp.util.logging", ptrTable, methods, fields, 7, 0x401a, 2, 3, 5, -1, -1, 6, -1 };
  return &_EduStanfordNlpUtilLoggingRepeatedRecordHandler_PendingType;
}

+ (void)initialize {
  if (self == [EduStanfordNlpUtilLoggingRepeatedRecordHandler_PendingType class]) {
    JreEnum(EduStanfordNlpUtilLoggingRepeatedRecordHandler_PendingType, NONE) = new_EduStanfordNlpUtilLoggingRepeatedRecordHandler_PendingType_initWithNSString_withInt_(@"NONE", 0);
    JreEnum(EduStanfordNlpUtilLoggingRepeatedRecordHandler_PendingType, PRINTING) = new_EduStanfordNlpUtilLoggingRepeatedRecordHandler_PendingType_initWithNSString_withInt_(@"PRINTING", 1);
    JreEnum(EduStanfordNlpUtilLoggingRepeatedRecordHandler_PendingType, SEEN) = new_EduStanfordNlpUtilLoggingRepeatedRecordHandler_PendingType_initWithNSString_withInt_(@"SEEN", 2);
    J2OBJC_SET_INITIALIZED(EduStanfordNlpUtilLoggingRepeatedRecordHandler_PendingType)
  }
}

@end

void EduStanfordNlpUtilLoggingRepeatedRecordHandler_PendingType_initWithNSString_withInt_(EduStanfordNlpUtilLoggingRepeatedRecordHandler_PendingType *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

EduStanfordNlpUtilLoggingRepeatedRecordHandler_PendingType *new_EduStanfordNlpUtilLoggingRepeatedRecordHandler_PendingType_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilLoggingRepeatedRecordHandler_PendingType, initWithNSString_withInt_, __name, __ordinal)
}

IOSObjectArray *EduStanfordNlpUtilLoggingRepeatedRecordHandler_PendingType_values() {
  EduStanfordNlpUtilLoggingRepeatedRecordHandler_PendingType_initialize();
  return [IOSObjectArray arrayWithObjects:EduStanfordNlpUtilLoggingRepeatedRecordHandler_PendingType_values_ count:3 type:EduStanfordNlpUtilLoggingRepeatedRecordHandler_PendingType_class_()];
}

EduStanfordNlpUtilLoggingRepeatedRecordHandler_PendingType *EduStanfordNlpUtilLoggingRepeatedRecordHandler_PendingType_valueOfWithNSString_(NSString *name) {
  EduStanfordNlpUtilLoggingRepeatedRecordHandler_PendingType_initialize();
  for (int i = 0; i < 3; i++) {
    EduStanfordNlpUtilLoggingRepeatedRecordHandler_PendingType *e = EduStanfordNlpUtilLoggingRepeatedRecordHandler_PendingType_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

EduStanfordNlpUtilLoggingRepeatedRecordHandler_PendingType *EduStanfordNlpUtilLoggingRepeatedRecordHandler_PendingType_fromOrdinal(NSUInteger ordinal) {
  EduStanfordNlpUtilLoggingRepeatedRecordHandler_PendingType_initialize();
  if (ordinal >= 3) {
    return nil;
  }
  return EduStanfordNlpUtilLoggingRepeatedRecordHandler_PendingType_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpUtilLoggingRepeatedRecordHandler_PendingType)

@implementation EduStanfordNlpUtilLoggingRepeatedRecordHandler_RepeatedRecordInfo

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpUtilLoggingRepeatedRecordHandler_RepeatedRecordInfo_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "lastRecord_", "LEduStanfordNlpUtilLoggingRedwood_Record;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "timesSeen_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "timesPrinted_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "timeOfLastPrintedRecord_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "suppressRecord_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "somethingPrinted_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "trackCountPending_", "LEduStanfordNlpUtilLoggingRepeatedRecordHandler_PendingType;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpUtilLoggingRepeatedRecordHandler;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilLoggingRepeatedRecordHandler_RepeatedRecordInfo = { "RepeatedRecordInfo", "edu.stanford.nlp.util.logging", ptrTable, methods, fields, 7, 0xa, 1, 7, 0, -1, -1, -1, -1 };
  return &_EduStanfordNlpUtilLoggingRepeatedRecordHandler_RepeatedRecordInfo;
}

@end

void EduStanfordNlpUtilLoggingRepeatedRecordHandler_RepeatedRecordInfo_init(EduStanfordNlpUtilLoggingRepeatedRecordHandler_RepeatedRecordInfo *self) {
  NSObject_init(self);
  self->lastRecord_ = nil;
  self->timesSeen_ = 0;
  self->timesPrinted_ = 0;
  self->timeOfLastPrintedRecord_ = 0LL;
  self->suppressRecord_ = false;
  self->somethingPrinted_ = false;
  self->trackCountPending_ = JreLoadEnum(EduStanfordNlpUtilLoggingRepeatedRecordHandler_PendingType, NONE);
}

EduStanfordNlpUtilLoggingRepeatedRecordHandler_RepeatedRecordInfo *new_EduStanfordNlpUtilLoggingRepeatedRecordHandler_RepeatedRecordInfo_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilLoggingRepeatedRecordHandler_RepeatedRecordInfo, init)
}

EduStanfordNlpUtilLoggingRepeatedRecordHandler_RepeatedRecordInfo *create_EduStanfordNlpUtilLoggingRepeatedRecordHandler_RepeatedRecordInfo_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilLoggingRepeatedRecordHandler_RepeatedRecordInfo, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpUtilLoggingRepeatedRecordHandler_RepeatedRecordInfo)

@implementation EduStanfordNlpUtilLoggingRepeatedRecordHandler_RepeatSemantics

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x401, 0, 1, -1, -1, -1, -1 },
    { NULL, "J", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(equalsWithEduStanfordNlpUtilLoggingRedwood_Record:withEduStanfordNlpUtilLoggingRedwood_Record:);
  methods[1].selector = @selector(maxWaitTimeInMillis);
  methods[2].selector = @selector(numToForcePrint);
  methods[3].selector = @selector(messageWithInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "equals", "LEduStanfordNlpUtilLoggingRedwood_Record;LEduStanfordNlpUtilLoggingRedwood_Record;", "message", "I", "LEduStanfordNlpUtilLoggingRepeatedRecordHandler;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilLoggingRepeatedRecordHandler_RepeatSemantics = { "RepeatSemantics", "edu.stanford.nlp.util.logging", ptrTable, methods, NULL, 7, 0x609, 4, 0, 4, -1, -1, -1, -1 };
  return &_EduStanfordNlpUtilLoggingRepeatedRecordHandler_RepeatSemantics;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(EduStanfordNlpUtilLoggingRepeatedRecordHandler_RepeatSemantics)

@implementation EduStanfordNlpUtilLoggingRepeatedRecordHandler_ApproximateRepeatSemantics

+ (jboolean)sameMessageWithNSString:(NSString *)last
                       withNSString:(NSString *)current {
  return EduStanfordNlpUtilLoggingRepeatedRecordHandler_ApproximateRepeatSemantics_sameMessageWithNSString_withNSString_(last, current);
}

- (jboolean)equalsWithEduStanfordNlpUtilLoggingRedwood_Record:(EduStanfordNlpUtilLoggingRedwood_Record *)lastRecord
                  withEduStanfordNlpUtilLoggingRedwood_Record:(EduStanfordNlpUtilLoggingRedwood_Record *)record {
  return JavaUtilArrays_equalsWithNSObjectArray_withNSObjectArray_([((EduStanfordNlpUtilLoggingRedwood_Record *) nil_chk(record)) channels], [((EduStanfordNlpUtilLoggingRedwood_Record *) nil_chk(lastRecord)) channels]) && EduStanfordNlpUtilLoggingRepeatedRecordHandler_ApproximateRepeatSemantics_sameMessageWithNSString_withNSString_(lastRecord->content_ == nil ? @"null" : [lastRecord->content_ description], record->content_ == nil ? @"null" : [record->content_ description]);
}

- (jlong)maxWaitTimeInMillis {
  return 1000;
}

- (jint)numToForcePrint {
  return 3;
}

- (NSString *)messageWithInt:(jint)linesOmitted {
  return JreStrcat("$I$", @"... ", linesOmitted, @" similar messages");
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpUtilLoggingRepeatedRecordHandler_ApproximateRepeatSemantics_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0xa, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(sameMessageWithNSString:withNSString:);
  methods[1].selector = @selector(equalsWithEduStanfordNlpUtilLoggingRedwood_Record:withEduStanfordNlpUtilLoggingRedwood_Record:);
  methods[2].selector = @selector(maxWaitTimeInMillis);
  methods[3].selector = @selector(numToForcePrint);
  methods[4].selector = @selector(messageWithInt:);
  methods[5].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "sameMessage", "LNSString;LNSString;", "equals", "LEduStanfordNlpUtilLoggingRedwood_Record;LEduStanfordNlpUtilLoggingRedwood_Record;", "message", "I", "LEduStanfordNlpUtilLoggingRepeatedRecordHandler;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilLoggingRepeatedRecordHandler_ApproximateRepeatSemantics = { "ApproximateRepeatSemantics", "edu.stanford.nlp.util.logging", ptrTable, methods, NULL, 7, 0x9, 6, 0, 6, -1, -1, -1, -1 };
  return &_EduStanfordNlpUtilLoggingRepeatedRecordHandler_ApproximateRepeatSemantics;
}

@end

jboolean EduStanfordNlpUtilLoggingRepeatedRecordHandler_ApproximateRepeatSemantics_sameMessageWithNSString_withNSString_(NSString *last, NSString *current) {
  EduStanfordNlpUtilLoggingRepeatedRecordHandler_ApproximateRepeatSemantics_initialize();
  NSString *lastNoNumbers = [((NSString *) nil_chk(last)) replaceAll:@"[0-9\\.\\-]+" withReplacement:@"#"];
  NSString *currentNoNumbers = [((NSString *) nil_chk(current)) replaceAll:@"[0-9\\.\\-]+" withReplacement:@"#"];
  return [((NSString *) nil_chk(lastNoNumbers)) hasPrefix:[((NSString *) nil_chk(currentNoNumbers)) substring:0 endIndex:JavaLangMath_minWithInt_withInt_(7, ((jint) [currentNoNumbers length]))]];
}

void EduStanfordNlpUtilLoggingRepeatedRecordHandler_ApproximateRepeatSemantics_init(EduStanfordNlpUtilLoggingRepeatedRecordHandler_ApproximateRepeatSemantics *self) {
  NSObject_init(self);
}

EduStanfordNlpUtilLoggingRepeatedRecordHandler_ApproximateRepeatSemantics *new_EduStanfordNlpUtilLoggingRepeatedRecordHandler_ApproximateRepeatSemantics_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilLoggingRepeatedRecordHandler_ApproximateRepeatSemantics, init)
}

EduStanfordNlpUtilLoggingRepeatedRecordHandler_ApproximateRepeatSemantics *create_EduStanfordNlpUtilLoggingRepeatedRecordHandler_ApproximateRepeatSemantics_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilLoggingRepeatedRecordHandler_ApproximateRepeatSemantics, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpUtilLoggingRepeatedRecordHandler_ApproximateRepeatSemantics)

@implementation EduStanfordNlpUtilLoggingRepeatedRecordHandler_ExactRepeatSemantics

- (jboolean)equalsWithEduStanfordNlpUtilLoggingRedwood_Record:(EduStanfordNlpUtilLoggingRedwood_Record *)lastRecord
                  withEduStanfordNlpUtilLoggingRedwood_Record:(EduStanfordNlpUtilLoggingRedwood_Record *)record {
  return JavaUtilArrays_equalsWithNSObjectArray_withNSObjectArray_([((EduStanfordNlpUtilLoggingRedwood_Record *) nil_chk(record)) channels], [((EduStanfordNlpUtilLoggingRedwood_Record *) nil_chk(lastRecord)) channels]) && ((record->content_ == nil && lastRecord->content_ == nil) || (record->content_ != nil && [record->content_ isEqual:lastRecord->content_]));
}

- (jlong)maxWaitTimeInMillis {
  return JavaLangLong_MAX_VALUE;
}

- (jint)numToForcePrint {
  return 1;
}

- (NSString *)messageWithInt:(jint)linesOmitted {
  return JreStrcat("$I$", @"(last message repeated ", linesOmitted, @" times)");
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpUtilLoggingRepeatedRecordHandler_ExactRepeatSemantics_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(equalsWithEduStanfordNlpUtilLoggingRedwood_Record:withEduStanfordNlpUtilLoggingRedwood_Record:);
  methods[1].selector = @selector(maxWaitTimeInMillis);
  methods[2].selector = @selector(numToForcePrint);
  methods[3].selector = @selector(messageWithInt:);
  methods[4].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "equals", "LEduStanfordNlpUtilLoggingRedwood_Record;LEduStanfordNlpUtilLoggingRedwood_Record;", "message", "I", "LEduStanfordNlpUtilLoggingRepeatedRecordHandler;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilLoggingRepeatedRecordHandler_ExactRepeatSemantics = { "ExactRepeatSemantics", "edu.stanford.nlp.util.logging", ptrTable, methods, NULL, 7, 0x9, 5, 0, 4, -1, -1, -1, -1 };
  return &_EduStanfordNlpUtilLoggingRepeatedRecordHandler_ExactRepeatSemantics;
}

@end

void EduStanfordNlpUtilLoggingRepeatedRecordHandler_ExactRepeatSemantics_init(EduStanfordNlpUtilLoggingRepeatedRecordHandler_ExactRepeatSemantics *self) {
  NSObject_init(self);
}

EduStanfordNlpUtilLoggingRepeatedRecordHandler_ExactRepeatSemantics *new_EduStanfordNlpUtilLoggingRepeatedRecordHandler_ExactRepeatSemantics_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilLoggingRepeatedRecordHandler_ExactRepeatSemantics, init)
}

EduStanfordNlpUtilLoggingRepeatedRecordHandler_ExactRepeatSemantics *create_EduStanfordNlpUtilLoggingRepeatedRecordHandler_ExactRepeatSemantics_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilLoggingRepeatedRecordHandler_ExactRepeatSemantics, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpUtilLoggingRepeatedRecordHandler_ExactRepeatSemantics)
