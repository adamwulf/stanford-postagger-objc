//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/util/logging/Redwood.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/util/Execution.h"
#include "edu/stanford/nlp/util/Generics.h"
#include "edu/stanford/nlp/util/IterableIterator.h"
#include "edu/stanford/nlp/util/RuntimeInterruptedException.h"
#include "edu/stanford/nlp/util/logging/Color.h"
#include "edu/stanford/nlp/util/logging/LogRecordHandler.h"
#include "edu/stanford/nlp/util/logging/OutputHandler.h"
#include "edu/stanford/nlp/util/logging/PrettyLogger.h"
#include "edu/stanford/nlp/util/logging/Redwood.h"
#include "edu/stanford/nlp/util/logging/RedwoodConfiguration.h"
#include "edu/stanford/nlp/util/logging/RedwoodPrintStream.h"
#include "edu/stanford/nlp/util/logging/Style.h"
#include "edu/stanford/nlp/util/logging/VisibilityHandler.h"
#include "java/io/BufferedWriter.h"
#include "java/io/FileOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/OutputStreamWriter.h"
#include "java/io/PrintStream.h"
#include "java/io/PrintWriter.h"
#include "java/lang/AssertionError.h"
#include "java/lang/Boolean.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Enum.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Iterable.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/Runnable.h"
#include "java/lang/Runtime.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/Comparator.h"
#include "java/util/Formatter.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Queue.h"
#include "java/util/Set.h"
#include "java/util/Spliterator.h"
#include "java/util/Stack.h"
#include "java/util/concurrent/ExecutorService.h"
#include "java/util/concurrent/Executors.h"
#include "java/util/concurrent/Future.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/concurrent/locks/ReentrantLock.h"
#include "java/util/function/Consumer.h"
#include "java/util/function/Function.h"
#include "java/util/function/Supplier.h"
#include "java/util/function/ToDoubleFunction.h"
#include "java/util/function/ToIntFunction.h"
#include "java/util/function/ToLongFunction.h"

@interface EduStanfordNlpUtilLoggingRedwood ()

- (instancetype)init;

+ (void)queueTaskWithLong:(jlong)threadId
     withJavaLangRunnable:(id<JavaLangRunnable>)toRun;

+ (void)releaseThreadControlWithLong:(jlong)threadId;

+ (void)attemptThreadControlWithLong:(jlong)threadId
                withJavaLangRunnable:(id<JavaLangRunnable>)r;

+ (void)attemptThreadControlThreadsafeWithLong:(jlong)threadId;

+ (EduStanfordNlpUtilLoggingLogRecordHandler *)getHandlerWithIOSClass:(IOSClass *)clazz;

@end

inline EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree *EduStanfordNlpUtilLoggingRedwood_get_handlers();
inline EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree *EduStanfordNlpUtilLoggingRedwood_set_handlers(EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree *value);
static EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree *EduStanfordNlpUtilLoggingRedwood_handlers;
J2OBJC_STATIC_FIELD_OBJ(EduStanfordNlpUtilLoggingRedwood, handlers, EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree *)

inline jint EduStanfordNlpUtilLoggingRedwood_get_depth();
inline jint EduStanfordNlpUtilLoggingRedwood_set_depth(jint value);
inline jint *EduStanfordNlpUtilLoggingRedwood_getRef_depth();
static jint EduStanfordNlpUtilLoggingRedwood_depth = 0;
J2OBJC_STATIC_FIELD_PRIMITIVE(EduStanfordNlpUtilLoggingRedwood, depth, jint)

inline JavaUtilStack *EduStanfordNlpUtilLoggingRedwood_get_titleStack();
static JavaUtilStack *EduStanfordNlpUtilLoggingRedwood_titleStack;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpUtilLoggingRedwood, titleStack, JavaUtilStack *)

inline jboolean EduStanfordNlpUtilLoggingRedwood_get_isClosed();
inline jboolean EduStanfordNlpUtilLoggingRedwood_set_isClosed(jboolean value);
inline jboolean *EduStanfordNlpUtilLoggingRedwood_getRef_isClosed();
static jboolean EduStanfordNlpUtilLoggingRedwood_isClosed = false;
J2OBJC_STATIC_FIELD_PRIMITIVE(EduStanfordNlpUtilLoggingRedwood, isClosed, jboolean)

inline id<JavaUtilMap> EduStanfordNlpUtilLoggingRedwood_get_threadedLogQueue();
static id<JavaUtilMap> EduStanfordNlpUtilLoggingRedwood_threadedLogQueue;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpUtilLoggingRedwood, threadedLogQueue, id<JavaUtilMap>)

inline jlong EduStanfordNlpUtilLoggingRedwood_get_currentThread();
inline jlong EduStanfordNlpUtilLoggingRedwood_set_currentThread(jlong value);
inline jlong *EduStanfordNlpUtilLoggingRedwood_getRef_currentThread();
static jlong EduStanfordNlpUtilLoggingRedwood_currentThread = -1;
J2OBJC_STATIC_FIELD_PRIMITIVE(EduStanfordNlpUtilLoggingRedwood, currentThread, jlong)

inline id<JavaUtilQueue> EduStanfordNlpUtilLoggingRedwood_get_threadsWaiting();
static id<JavaUtilQueue> EduStanfordNlpUtilLoggingRedwood_threadsWaiting;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpUtilLoggingRedwood, threadsWaiting, id<JavaUtilQueue>)

inline jboolean EduStanfordNlpUtilLoggingRedwood_get_isThreaded();
inline jboolean EduStanfordNlpUtilLoggingRedwood_set_isThreaded(jboolean value);
inline jboolean *EduStanfordNlpUtilLoggingRedwood_getRef_isThreaded();
static jboolean EduStanfordNlpUtilLoggingRedwood_isThreaded = false;
J2OBJC_STATIC_FIELD_PRIMITIVE(EduStanfordNlpUtilLoggingRedwood, isThreaded, jboolean)

inline JavaUtilConcurrentLocksReentrantLock *EduStanfordNlpUtilLoggingRedwood_get_control();
static JavaUtilConcurrentLocksReentrantLock *EduStanfordNlpUtilLoggingRedwood_control;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpUtilLoggingRedwood, control, JavaUtilConcurrentLocksReentrantLock *)

__attribute__((unused)) static void EduStanfordNlpUtilLoggingRedwood_init(EduStanfordNlpUtilLoggingRedwood *self);

__attribute__((unused)) static EduStanfordNlpUtilLoggingRedwood *new_EduStanfordNlpUtilLoggingRedwood_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpUtilLoggingRedwood *create_EduStanfordNlpUtilLoggingRedwood_init();

__attribute__((unused)) static void EduStanfordNlpUtilLoggingRedwood_queueTaskWithLong_withJavaLangRunnable_(jlong threadId, id<JavaLangRunnable> toRun);

__attribute__((unused)) static void EduStanfordNlpUtilLoggingRedwood_releaseThreadControlWithLong_(jlong threadId);

__attribute__((unused)) static void EduStanfordNlpUtilLoggingRedwood_attemptThreadControlWithLong_withJavaLangRunnable_(jlong threadId, id<JavaLangRunnable> r);

__attribute__((unused)) static void EduStanfordNlpUtilLoggingRedwood_attemptThreadControlThreadsafeWithLong_(jlong threadId);

__attribute__((unused)) static EduStanfordNlpUtilLoggingLogRecordHandler *EduStanfordNlpUtilLoggingRedwood_getHandlerWithIOSClass_(IOSClass *clazz);

__attribute__((unused)) static IOSObjectArray *EduStanfordNlpUtilLoggingRedwood__Annotations$0();

typedef NS_ENUM(NSUInteger, EduStanfordNlpUtilLoggingRedwood_MessageType_Enum) {
  EduStanfordNlpUtilLoggingRedwood_MessageType_Enum_SIMPLE = 0,
  EduStanfordNlpUtilLoggingRedwood_MessageType_Enum_START_TRACK = 1,
  EduStanfordNlpUtilLoggingRedwood_MessageType_Enum_SHUTDOWN = 2,
  EduStanfordNlpUtilLoggingRedwood_MessageType_Enum_END_TRACK = 3,
};

@interface EduStanfordNlpUtilLoggingRedwood_MessageType : JavaLangEnum < NSCopying >

+ (IOSObjectArray *)values;

+ (EduStanfordNlpUtilLoggingRedwood_MessageType *)valueOfWithNSString:(NSString *)name;

- (id)copyWithZone:(NSZone *)zone;

@end

J2OBJC_STATIC_INIT(EduStanfordNlpUtilLoggingRedwood_MessageType)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT EduStanfordNlpUtilLoggingRedwood_MessageType *EduStanfordNlpUtilLoggingRedwood_MessageType_values_[];

inline EduStanfordNlpUtilLoggingRedwood_MessageType *EduStanfordNlpUtilLoggingRedwood_MessageType_get_SIMPLE();
J2OBJC_ENUM_CONSTANT(EduStanfordNlpUtilLoggingRedwood_MessageType, SIMPLE)

inline EduStanfordNlpUtilLoggingRedwood_MessageType *EduStanfordNlpUtilLoggingRedwood_MessageType_get_START_TRACK();
J2OBJC_ENUM_CONSTANT(EduStanfordNlpUtilLoggingRedwood_MessageType, START_TRACK)

inline EduStanfordNlpUtilLoggingRedwood_MessageType *EduStanfordNlpUtilLoggingRedwood_MessageType_get_SHUTDOWN();
J2OBJC_ENUM_CONSTANT(EduStanfordNlpUtilLoggingRedwood_MessageType, SHUTDOWN)

inline EduStanfordNlpUtilLoggingRedwood_MessageType *EduStanfordNlpUtilLoggingRedwood_MessageType_get_END_TRACK();
J2OBJC_ENUM_CONSTANT(EduStanfordNlpUtilLoggingRedwood_MessageType, END_TRACK)

__attribute__((unused)) static void EduStanfordNlpUtilLoggingRedwood_MessageType_initWithNSString_withInt_(EduStanfordNlpUtilLoggingRedwood_MessageType *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static EduStanfordNlpUtilLoggingRedwood_MessageType *new_EduStanfordNlpUtilLoggingRedwood_MessageType_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

__attribute__((unused)) static IOSObjectArray *EduStanfordNlpUtilLoggingRedwood_MessageType_values();

__attribute__((unused)) static EduStanfordNlpUtilLoggingRedwood_MessageType *EduStanfordNlpUtilLoggingRedwood_MessageType_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT EduStanfordNlpUtilLoggingRedwood_MessageType *EduStanfordNlpUtilLoggingRedwood_MessageType_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpUtilLoggingRedwood_MessageType)

@interface EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree () {
 @public
  jboolean isRoot_;
  EduStanfordNlpUtilLoggingLogRecordHandler *head_;
  id<JavaUtilList> children_;
}

+ (id<JavaUtilList>)appendWithJavaUtilList:(id<JavaUtilList>)lst
withEduStanfordNlpUtilLoggingRedwood_Record:(EduStanfordNlpUtilLoggingRedwood_Record *)toAppend;

- (void)processWithEduStanfordNlpUtilLoggingRedwood_Record:(EduStanfordNlpUtilLoggingRedwood_Record *)toPass
          withEduStanfordNlpUtilLoggingRedwood_MessageType:(EduStanfordNlpUtilLoggingRedwood_MessageType *)type
                                                   withInt:(jint)newDepth
                                                  withLong:(jlong)timestamp;

- (JavaLangStringBuilder *)toStringHelperWithJavaLangStringBuilder:(JavaLangStringBuilder *)b
                                                           withInt:(jint)depth;

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree, head_, EduStanfordNlpUtilLoggingLogRecordHandler *)
J2OBJC_FIELD_SETTER(EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree, children_, id<JavaUtilList>)

__attribute__((unused)) static id<JavaUtilList> EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree_appendWithJavaUtilList_withEduStanfordNlpUtilLoggingRedwood_Record_(id<JavaUtilList> lst, EduStanfordNlpUtilLoggingRedwood_Record *toAppend);

__attribute__((unused)) static void EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree_processWithEduStanfordNlpUtilLoggingRedwood_Record_withEduStanfordNlpUtilLoggingRedwood_MessageType_withInt_withLong_(EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree *self, EduStanfordNlpUtilLoggingRedwood_Record *toPass, EduStanfordNlpUtilLoggingRedwood_MessageType *type, jint newDepth, jlong timestamp);

__attribute__((unused)) static JavaLangStringBuilder *EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree_toStringHelperWithJavaLangStringBuilder_withInt_(EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree *self, JavaLangStringBuilder *b, jint depth);

@interface EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree_$1 : NSObject < JavaUtilIterator > {
 @public
  EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree *this$0_;
  jboolean seenHead_;
  id<JavaUtilIterator> childrenIter_;
  EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree *childOnPrix_;
  id<JavaUtilIterator> childIter_;
  EduStanfordNlpUtilLoggingLogRecordHandler *lastReturned_;
}

- (jboolean)hasNext;

- (EduStanfordNlpUtilLoggingLogRecordHandler *)next;

- (void)remove;

- (instancetype)initWithEduStanfordNlpUtilLoggingRedwood_RecordHandlerTree:(EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree_$1)

J2OBJC_FIELD_SETTER(EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree_$1, this$0_, EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree *)
J2OBJC_FIELD_SETTER(EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree_$1, childrenIter_, id<JavaUtilIterator>)
J2OBJC_FIELD_SETTER(EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree_$1, childOnPrix_, EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree *)
J2OBJC_FIELD_SETTER(EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree_$1, childIter_, id<JavaUtilIterator>)
J2OBJC_FIELD_SETTER(EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree_$1, lastReturned_, EduStanfordNlpUtilLoggingLogRecordHandler *)

__attribute__((unused)) static void EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree_$1_initWithEduStanfordNlpUtilLoggingRedwood_RecordHandlerTree_(EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree_$1 *self, EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree *outer$);

__attribute__((unused)) static EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree_$1 *new_EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree_$1_initWithEduStanfordNlpUtilLoggingRedwood_RecordHandlerTree_(EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree_$1 *create_EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree_$1_initWithEduStanfordNlpUtilLoggingRedwood_RecordHandlerTree_(EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree *outer$);

@interface EduStanfordNlpUtilLoggingRedwood_Record () {
 @public
  IOSObjectArray *channels_;
  jboolean channelsSorted_;
}

- (void)sort;

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpUtilLoggingRedwood_Record, channels_, IOSObjectArray *)

__attribute__((unused)) static void EduStanfordNlpUtilLoggingRedwood_Record_sort(EduStanfordNlpUtilLoggingRedwood_Record *self);

@interface EduStanfordNlpUtilLoggingRedwood_Record_$Lambda$1 : NSObject < JavaUtilComparator >

- (jint)compareWithId:(id)a
               withId:(id)b;

@end

J2OBJC_STATIC_INIT(EduStanfordNlpUtilLoggingRedwood_Record_$Lambda$1)

inline EduStanfordNlpUtilLoggingRedwood_Record_$Lambda$1 *EduStanfordNlpUtilLoggingRedwood_Record_$Lambda$1_get_instance();
static EduStanfordNlpUtilLoggingRedwood_Record_$Lambda$1 *EduStanfordNlpUtilLoggingRedwood_Record_$Lambda$1_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpUtilLoggingRedwood_Record_$Lambda$1, instance, EduStanfordNlpUtilLoggingRedwood_Record_$Lambda$1 *)

__attribute__((unused)) static void EduStanfordNlpUtilLoggingRedwood_Record_$Lambda$1_init(EduStanfordNlpUtilLoggingRedwood_Record_$Lambda$1 *self);

__attribute__((unused)) static EduStanfordNlpUtilLoggingRedwood_Record_$Lambda$1 *new_EduStanfordNlpUtilLoggingRedwood_Record_$Lambda$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpUtilLoggingRedwood_Record_$Lambda$1 *create_EduStanfordNlpUtilLoggingRedwood_Record_$Lambda$1_init();

@interface EduStanfordNlpUtilLoggingRedwood_ConsoleHandler ()

- (instancetype)initWithJavaIoPrintStream:(JavaIoPrintStream *)stream;

@end

__attribute__((unused)) static void EduStanfordNlpUtilLoggingRedwood_ConsoleHandler_initWithJavaIoPrintStream_(EduStanfordNlpUtilLoggingRedwood_ConsoleHandler *self, JavaIoPrintStream *stream);

__attribute__((unused)) static EduStanfordNlpUtilLoggingRedwood_ConsoleHandler *new_EduStanfordNlpUtilLoggingRedwood_ConsoleHandler_initWithJavaIoPrintStream_(JavaIoPrintStream *stream) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpUtilLoggingRedwood_ConsoleHandler *create_EduStanfordNlpUtilLoggingRedwood_ConsoleHandler_initWithJavaIoPrintStream_(JavaIoPrintStream *stream);

@interface EduStanfordNlpUtilLoggingRedwood_FileHandler () {
 @public
  JavaIoPrintWriter *printWriter_;
}

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpUtilLoggingRedwood_FileHandler, printWriter_, JavaIoPrintWriter *)

@interface EduStanfordNlpUtilLoggingRedwood_Util ()

- (instancetype)init;

+ (IOSObjectArray *)revConcatWithNSObjectArray:(IOSObjectArray *)B
                             withNSObjectArray:(IOSObjectArray *)A;

@end

__attribute__((unused)) static void EduStanfordNlpUtilLoggingRedwood_Util_init(EduStanfordNlpUtilLoggingRedwood_Util *self);

__attribute__((unused)) static EduStanfordNlpUtilLoggingRedwood_Util *new_EduStanfordNlpUtilLoggingRedwood_Util_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpUtilLoggingRedwood_Util *create_EduStanfordNlpUtilLoggingRedwood_Util_init();

__attribute__((unused)) static IOSObjectArray *EduStanfordNlpUtilLoggingRedwood_Util_revConcatWithNSObjectArray_withNSObjectArray_(IOSObjectArray *B, IOSObjectArray *A);

@interface EduStanfordNlpUtilLoggingRedwood_Util_$1 : NSObject < JavaUtilIterator > {
 @public
  id<JavaUtilIterator> val$iter_;
  JavaUtilConcurrentAtomicAtomicInteger *val$numPending_;
  JavaUtilConcurrentLocksReentrantLock *val$metaInfoLock_;
  JavaUtilConcurrentAtomicAtomicBoolean *val$haveStarted_;
  NSString *val$title_;
}

- (jboolean)hasNext;

- (id<JavaLangRunnable>)next;

- (void)remove;

- (instancetype)initWithJavaUtilIterator:(id<JavaUtilIterator>)capture$0
withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$1
withJavaUtilConcurrentLocksReentrantLock:(JavaUtilConcurrentLocksReentrantLock *)capture$2
withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$3
                            withNSString:(NSString *)capture$4;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpUtilLoggingRedwood_Util_$1)

J2OBJC_FIELD_SETTER(EduStanfordNlpUtilLoggingRedwood_Util_$1, val$iter_, id<JavaUtilIterator>)
J2OBJC_FIELD_SETTER(EduStanfordNlpUtilLoggingRedwood_Util_$1, val$numPending_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(EduStanfordNlpUtilLoggingRedwood_Util_$1, val$metaInfoLock_, JavaUtilConcurrentLocksReentrantLock *)
J2OBJC_FIELD_SETTER(EduStanfordNlpUtilLoggingRedwood_Util_$1, val$haveStarted_, JavaUtilConcurrentAtomicAtomicBoolean *)
J2OBJC_FIELD_SETTER(EduStanfordNlpUtilLoggingRedwood_Util_$1, val$title_, NSString *)

__attribute__((unused)) static void EduStanfordNlpUtilLoggingRedwood_Util_$1_initWithJavaUtilIterator_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentLocksReentrantLock_withJavaUtilConcurrentAtomicAtomicBoolean_withNSString_(EduStanfordNlpUtilLoggingRedwood_Util_$1 *self, id<JavaUtilIterator> capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1, JavaUtilConcurrentLocksReentrantLock *capture$2, JavaUtilConcurrentAtomicAtomicBoolean *capture$3, NSString *capture$4);

__attribute__((unused)) static EduStanfordNlpUtilLoggingRedwood_Util_$1 *new_EduStanfordNlpUtilLoggingRedwood_Util_$1_initWithJavaUtilIterator_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentLocksReentrantLock_withJavaUtilConcurrentAtomicAtomicBoolean_withNSString_(id<JavaUtilIterator> capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1, JavaUtilConcurrentLocksReentrantLock *capture$2, JavaUtilConcurrentAtomicAtomicBoolean *capture$3, NSString *capture$4) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpUtilLoggingRedwood_Util_$1 *create_EduStanfordNlpUtilLoggingRedwood_Util_$1_initWithJavaUtilIterator_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentLocksReentrantLock_withJavaUtilConcurrentAtomicAtomicBoolean_withNSString_(id<JavaUtilIterator> capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1, JavaUtilConcurrentLocksReentrantLock *capture$2, JavaUtilConcurrentAtomicAtomicBoolean *capture$3, NSString *capture$4);

@interface EduStanfordNlpUtilLoggingRedwood_Util_$1_$1 : NSObject < JavaLangRunnable > {
 @public
  EduStanfordNlpUtilLoggingRedwood_Util_$1 *this$0_;
  id<JavaLangRunnable> val$runnable_;
}

- (void)run;

- (instancetype)initWithEduStanfordNlpUtilLoggingRedwood_Util_$1:(EduStanfordNlpUtilLoggingRedwood_Util_$1 *)outer$
                                            withJavaLangRunnable:(id<JavaLangRunnable>)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpUtilLoggingRedwood_Util_$1_$1)

J2OBJC_FIELD_SETTER(EduStanfordNlpUtilLoggingRedwood_Util_$1_$1, this$0_, EduStanfordNlpUtilLoggingRedwood_Util_$1 *)
J2OBJC_FIELD_SETTER(EduStanfordNlpUtilLoggingRedwood_Util_$1_$1, val$runnable_, id<JavaLangRunnable>)

__attribute__((unused)) static void EduStanfordNlpUtilLoggingRedwood_Util_$1_$1_initWithEduStanfordNlpUtilLoggingRedwood_Util_$1_withJavaLangRunnable_(EduStanfordNlpUtilLoggingRedwood_Util_$1_$1 *self, EduStanfordNlpUtilLoggingRedwood_Util_$1 *outer$, id<JavaLangRunnable> capture$0);

__attribute__((unused)) static EduStanfordNlpUtilLoggingRedwood_Util_$1_$1 *new_EduStanfordNlpUtilLoggingRedwood_Util_$1_$1_initWithEduStanfordNlpUtilLoggingRedwood_Util_$1_withJavaLangRunnable_(EduStanfordNlpUtilLoggingRedwood_Util_$1 *outer$, id<JavaLangRunnable> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpUtilLoggingRedwood_Util_$1_$1 *create_EduStanfordNlpUtilLoggingRedwood_Util_$1_$1_initWithEduStanfordNlpUtilLoggingRedwood_Util_$1_withJavaLangRunnable_(EduStanfordNlpUtilLoggingRedwood_Util_$1 *outer$, id<JavaLangRunnable> capture$0);

@interface EduStanfordNlpUtilLoggingRedwood_RedwoodChannels () {
 @public
  IOSObjectArray *channelNames_;
}

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpUtilLoggingRedwood_RedwoodChannels, channelNames_, IOSObjectArray *)

@interface EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$1 : NSObject < JavaUtilFunctionSupplier > {
 @public
  NSString *val$format_;
  IOSObjectArray *val$args_;
}

- (id)get;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$1)

J2OBJC_FIELD_SETTER(EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$1, val$format_, NSString *)
J2OBJC_FIELD_SETTER(EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$1, val$args_, IOSObjectArray *)

__attribute__((unused)) static void EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$1_initWithNSString_withNSObjectArray_(EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$1 *self, NSString *capture$0, IOSObjectArray *capture$1);

__attribute__((unused)) static EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$1 *new_EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$1_initWithNSString_withNSObjectArray_(NSString *capture$0, IOSObjectArray *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$1 *create_EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$1_initWithNSString_withNSObjectArray_(NSString *capture$0, IOSObjectArray *capture$1);

@interface EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$2 : NSObject < JavaUtilFunctionSupplier > {
 @public
  NSString *val$format_;
  IOSObjectArray *val$args_;
}

- (id)get;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$2)

J2OBJC_FIELD_SETTER(EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$2, val$format_, NSString *)
J2OBJC_FIELD_SETTER(EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$2, val$args_, IOSObjectArray *)

__attribute__((unused)) static void EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$2_initWithNSString_withNSObjectArray_(EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$2 *self, NSString *capture$0, IOSObjectArray *capture$1);

__attribute__((unused)) static EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$2 *new_EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$2_initWithNSString_withNSObjectArray_(NSString *capture$0, IOSObjectArray *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$2 *create_EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$2_initWithNSString_withNSObjectArray_(NSString *capture$0, IOSObjectArray *capture$1);

@interface EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$3 : NSObject < JavaUtilFunctionSupplier > {
 @public
  NSString *val$format_;
  IOSObjectArray *val$args_;
}

- (id)get;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$3)

J2OBJC_FIELD_SETTER(EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$3, val$format_, NSString *)
J2OBJC_FIELD_SETTER(EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$3, val$args_, IOSObjectArray *)

__attribute__((unused)) static void EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$3_initWithNSString_withNSObjectArray_(EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$3 *self, NSString *capture$0, IOSObjectArray *capture$1);

__attribute__((unused)) static EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$3 *new_EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$3_initWithNSString_withNSObjectArray_(NSString *capture$0, IOSObjectArray *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$3 *create_EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$3_initWithNSString_withNSObjectArray_(NSString *capture$0, IOSObjectArray *capture$1);

@interface EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$4 : NSObject < JavaUtilFunctionSupplier > {
 @public
  NSString *val$format_;
  IOSObjectArray *val$args_;
}

- (id)get;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$4)

J2OBJC_FIELD_SETTER(EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$4, val$format_, NSString *)
J2OBJC_FIELD_SETTER(EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$4, val$args_, IOSObjectArray *)

__attribute__((unused)) static void EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$4_initWithNSString_withNSObjectArray_(EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$4 *self, NSString *capture$0, IOSObjectArray *capture$1);

__attribute__((unused)) static EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$4 *new_EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$4_initWithNSString_withNSObjectArray_(NSString *capture$0, IOSObjectArray *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$4 *create_EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$4_initWithNSString_withNSObjectArray_(NSString *capture$0, IOSObjectArray *capture$1);

@interface EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$5 : NSObject < JavaUtilFunctionSupplier > {
 @public
  NSString *val$format_;
  IOSObjectArray *val$args_;
}

- (id)get;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$5)

J2OBJC_FIELD_SETTER(EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$5, val$format_, NSString *)
J2OBJC_FIELD_SETTER(EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$5, val$args_, IOSObjectArray *)

__attribute__((unused)) static void EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$5_initWithNSString_withNSObjectArray_(EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$5 *self, NSString *capture$0, IOSObjectArray *capture$1);

__attribute__((unused)) static EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$5 *new_EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$5_initWithNSString_withNSObjectArray_(NSString *capture$0, IOSObjectArray *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$5 *create_EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$5_initWithNSString_withNSObjectArray_(NSString *capture$0, IOSObjectArray *capture$1);

__attribute__((unused)) static void EduStanfordNlpUtilLoggingRedwood_Flag_initWithNSString_withInt_(EduStanfordNlpUtilLoggingRedwood_Flag *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static EduStanfordNlpUtilLoggingRedwood_Flag *new_EduStanfordNlpUtilLoggingRedwood_Flag_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

@interface EduStanfordNlpUtilLoggingRedwood_$Lambda$1 : NSObject < JavaLangRunnable > {
 @public
  id val$content_;
  IOSObjectArray *val$tags_;
  jlong val$timestamp_;
}

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpUtilLoggingRedwood_$Lambda$1)

J2OBJC_FIELD_SETTER(EduStanfordNlpUtilLoggingRedwood_$Lambda$1, val$content_, id)
J2OBJC_FIELD_SETTER(EduStanfordNlpUtilLoggingRedwood_$Lambda$1, val$tags_, IOSObjectArray *)

__attribute__((unused)) static void EduStanfordNlpUtilLoggingRedwood_$Lambda$1_initWithId_withNSObjectArray_withLong_(EduStanfordNlpUtilLoggingRedwood_$Lambda$1 *self, id capture$0, IOSObjectArray *capture$1, jlong capture$2);

__attribute__((unused)) static EduStanfordNlpUtilLoggingRedwood_$Lambda$1 *new_EduStanfordNlpUtilLoggingRedwood_$Lambda$1_initWithId_withNSObjectArray_withLong_(id capture$0, IOSObjectArray *capture$1, jlong capture$2) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpUtilLoggingRedwood_$Lambda$1 *create_EduStanfordNlpUtilLoggingRedwood_$Lambda$1_initWithId_withNSObjectArray_withLong_(id capture$0, IOSObjectArray *capture$1, jlong capture$2);

@interface EduStanfordNlpUtilLoggingRedwood_$Lambda$2 : NSObject < JavaUtilFunctionSupplier > {
 @public
  NSString *val$format_;
  IOSObjectArray *val$args_;
}

- (id)get;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpUtilLoggingRedwood_$Lambda$2)

J2OBJC_FIELD_SETTER(EduStanfordNlpUtilLoggingRedwood_$Lambda$2, val$format_, NSString *)
J2OBJC_FIELD_SETTER(EduStanfordNlpUtilLoggingRedwood_$Lambda$2, val$args_, IOSObjectArray *)

__attribute__((unused)) static void EduStanfordNlpUtilLoggingRedwood_$Lambda$2_initWithNSString_withNSObjectArray_(EduStanfordNlpUtilLoggingRedwood_$Lambda$2 *self, NSString *capture$0, IOSObjectArray *capture$1);

__attribute__((unused)) static EduStanfordNlpUtilLoggingRedwood_$Lambda$2 *new_EduStanfordNlpUtilLoggingRedwood_$Lambda$2_initWithNSString_withNSObjectArray_(NSString *capture$0, IOSObjectArray *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpUtilLoggingRedwood_$Lambda$2 *create_EduStanfordNlpUtilLoggingRedwood_$Lambda$2_initWithNSString_withNSObjectArray_(NSString *capture$0, IOSObjectArray *capture$1);

@interface EduStanfordNlpUtilLoggingRedwood_$Lambda$3 : NSObject < JavaUtilFunctionSupplier > {
 @public
  NSString *val$format_;
  IOSObjectArray *val$args_;
}

- (id)get;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpUtilLoggingRedwood_$Lambda$3)

J2OBJC_FIELD_SETTER(EduStanfordNlpUtilLoggingRedwood_$Lambda$3, val$format_, NSString *)
J2OBJC_FIELD_SETTER(EduStanfordNlpUtilLoggingRedwood_$Lambda$3, val$args_, IOSObjectArray *)

__attribute__((unused)) static void EduStanfordNlpUtilLoggingRedwood_$Lambda$3_initWithNSString_withNSObjectArray_(EduStanfordNlpUtilLoggingRedwood_$Lambda$3 *self, NSString *capture$0, IOSObjectArray *capture$1);

__attribute__((unused)) static EduStanfordNlpUtilLoggingRedwood_$Lambda$3 *new_EduStanfordNlpUtilLoggingRedwood_$Lambda$3_initWithNSString_withNSObjectArray_(NSString *capture$0, IOSObjectArray *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpUtilLoggingRedwood_$Lambda$3 *create_EduStanfordNlpUtilLoggingRedwood_$Lambda$3_initWithNSString_withNSObjectArray_(NSString *capture$0, IOSObjectArray *capture$1);

@interface EduStanfordNlpUtilLoggingRedwood_$Lambda$4 : NSObject < JavaLangRunnable > {
 @public
  NSString *val$title_;
  jlong val$timestamp_;
}

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpUtilLoggingRedwood_$Lambda$4)

J2OBJC_FIELD_SETTER(EduStanfordNlpUtilLoggingRedwood_$Lambda$4, val$title_, NSString *)

__attribute__((unused)) static void EduStanfordNlpUtilLoggingRedwood_$Lambda$4_initWithNSString_withLong_(EduStanfordNlpUtilLoggingRedwood_$Lambda$4 *self, NSString *capture$0, jlong capture$1);

__attribute__((unused)) static EduStanfordNlpUtilLoggingRedwood_$Lambda$4 *new_EduStanfordNlpUtilLoggingRedwood_$Lambda$4_initWithNSString_withLong_(NSString *capture$0, jlong capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpUtilLoggingRedwood_$Lambda$4 *create_EduStanfordNlpUtilLoggingRedwood_$Lambda$4_initWithNSString_withLong_(NSString *capture$0, jlong capture$1);

@interface EduStanfordNlpUtilLoggingRedwood_$Lambda$5 : NSObject < JavaLangRunnable > {
 @public
  jlong val$threadId_;
}

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpUtilLoggingRedwood_$Lambda$5)

__attribute__((unused)) static void EduStanfordNlpUtilLoggingRedwood_$Lambda$5_initWithLong_(EduStanfordNlpUtilLoggingRedwood_$Lambda$5 *self, jlong capture$0);

__attribute__((unused)) static EduStanfordNlpUtilLoggingRedwood_$Lambda$5 *new_EduStanfordNlpUtilLoggingRedwood_$Lambda$5_initWithLong_(jlong capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpUtilLoggingRedwood_$Lambda$5 *create_EduStanfordNlpUtilLoggingRedwood_$Lambda$5_initWithLong_(jlong capture$0);

@interface EduStanfordNlpUtilLoggingRedwood_$Lambda$6 : NSObject < JavaLangRunnable > {
 @public
  jint val$fI_;
}

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpUtilLoggingRedwood_$Lambda$6)

__attribute__((unused)) static void EduStanfordNlpUtilLoggingRedwood_$Lambda$6_initWithInt_(EduStanfordNlpUtilLoggingRedwood_$Lambda$6 *self, jint capture$0);

__attribute__((unused)) static EduStanfordNlpUtilLoggingRedwood_$Lambda$6 *new_EduStanfordNlpUtilLoggingRedwood_$Lambda$6_initWithInt_(jint capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpUtilLoggingRedwood_$Lambda$6 *create_EduStanfordNlpUtilLoggingRedwood_$Lambda$6_initWithInt_(jint capture$0);

@interface EduStanfordNlpUtilLoggingRedwood_$Lambda$7 : NSObject < JavaLangRunnable > {
 @public
  jint val$theI_;
}

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpUtilLoggingRedwood_$Lambda$7)

__attribute__((unused)) static void EduStanfordNlpUtilLoggingRedwood_$Lambda$7_initWithInt_(EduStanfordNlpUtilLoggingRedwood_$Lambda$7 *self, jint capture$0);

__attribute__((unused)) static EduStanfordNlpUtilLoggingRedwood_$Lambda$7 *new_EduStanfordNlpUtilLoggingRedwood_$Lambda$7_initWithInt_(jint capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpUtilLoggingRedwood_$Lambda$7 *create_EduStanfordNlpUtilLoggingRedwood_$Lambda$7_initWithInt_(jint capture$0);

@interface EduStanfordNlpUtilLoggingRedwood_$1 : NSObject < JavaLangRunnable > {
 @public
  id val$content_;
  IOSObjectArray *val$tags_;
  jlong val$timestamp_;
  IOSObjectArray *val$args_;
  jint val$len_;
}

- (void)run;

- (instancetype)initWithId:(id)capture$0
         withNSObjectArray:(IOSObjectArray *)capture$1
                  withLong:(jlong)capture$2
         withNSObjectArray:(IOSObjectArray *)capture$3
                   withInt:(jint)capture$4;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpUtilLoggingRedwood_$1)

J2OBJC_FIELD_SETTER(EduStanfordNlpUtilLoggingRedwood_$1, val$content_, id)
J2OBJC_FIELD_SETTER(EduStanfordNlpUtilLoggingRedwood_$1, val$tags_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(EduStanfordNlpUtilLoggingRedwood_$1, val$args_, IOSObjectArray *)

__attribute__((unused)) static void EduStanfordNlpUtilLoggingRedwood_$1_initWithId_withNSObjectArray_withLong_withNSObjectArray_withInt_(EduStanfordNlpUtilLoggingRedwood_$1 *self, id capture$0, IOSObjectArray *capture$1, jlong capture$2, IOSObjectArray *capture$3, jint capture$4);

__attribute__((unused)) static EduStanfordNlpUtilLoggingRedwood_$1 *new_EduStanfordNlpUtilLoggingRedwood_$1_initWithId_withNSObjectArray_withLong_withNSObjectArray_withInt_(id capture$0, IOSObjectArray *capture$1, jlong capture$2, IOSObjectArray *capture$3, jint capture$4) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpUtilLoggingRedwood_$1 *create_EduStanfordNlpUtilLoggingRedwood_$1_initWithId_withNSObjectArray_withLong_withNSObjectArray_withInt_(id capture$0, IOSObjectArray *capture$1, jlong capture$2, IOSObjectArray *capture$3, jint capture$4);

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpUtilLoggingRedwood)

EduStanfordNlpUtilLoggingRedwood_Flag *EduStanfordNlpUtilLoggingRedwood_ERR;
EduStanfordNlpUtilLoggingRedwood_Flag *EduStanfordNlpUtilLoggingRedwood_WARN;
EduStanfordNlpUtilLoggingRedwood_Flag *EduStanfordNlpUtilLoggingRedwood_DBG;
EduStanfordNlpUtilLoggingRedwood_Flag *EduStanfordNlpUtilLoggingRedwood_FORCE;
EduStanfordNlpUtilLoggingRedwood_Flag *EduStanfordNlpUtilLoggingRedwood_STDOUT;
EduStanfordNlpUtilLoggingRedwood_Flag *EduStanfordNlpUtilLoggingRedwood_STDERR;
JavaIoPrintStream *EduStanfordNlpUtilLoggingRedwood_realSysOut;
JavaIoPrintStream *EduStanfordNlpUtilLoggingRedwood_realSysErr;
jboolean EduStanfordNlpUtilLoggingRedwood_supportsAnsi;

@implementation EduStanfordNlpUtilLoggingRedwood

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpUtilLoggingRedwood_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)queueTaskWithLong:(jlong)threadId
     withJavaLangRunnable:(id<JavaLangRunnable>)toRun {
  EduStanfordNlpUtilLoggingRedwood_queueTaskWithLong_withJavaLangRunnable_(threadId, toRun);
}

+ (void)releaseThreadControlWithLong:(jlong)threadId {
  EduStanfordNlpUtilLoggingRedwood_releaseThreadControlWithLong_(threadId);
}

+ (void)attemptThreadControlWithLong:(jlong)threadId
                withJavaLangRunnable:(id<JavaLangRunnable>)r {
  EduStanfordNlpUtilLoggingRedwood_attemptThreadControlWithLong_withJavaLangRunnable_(threadId, r);
}

+ (void)attemptThreadControlThreadsafeWithLong:(jlong)threadId {
  EduStanfordNlpUtilLoggingRedwood_attemptThreadControlThreadsafeWithLong_(threadId);
}

+ (EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree *)rootHandler {
  return EduStanfordNlpUtilLoggingRedwood_rootHandler();
}

+ (void)clearHandlers {
  EduStanfordNlpUtilLoggingRedwood_clearHandlers();
}

+ (EduStanfordNlpUtilLoggingLogRecordHandler *)getHandlerWithIOSClass:(IOSClass *)clazz {
  return EduStanfordNlpUtilLoggingRedwood_getHandlerWithIOSClass_(clazz);
}

+ (void)captureSystemStreamsWithBoolean:(jboolean)captureOut
                            withBoolean:(jboolean)captureErr {
  EduStanfordNlpUtilLoggingRedwood_captureSystemStreamsWithBoolean_withBoolean_(captureOut, captureErr);
}

+ (void)restoreSystemStreams {
  EduStanfordNlpUtilLoggingRedwood_restoreSystemStreams();
}

+ (void)logWithNSObjectArray:(IOSObjectArray *)args {
  EduStanfordNlpUtilLoggingRedwood_logWithNSObjectArray_(args);
}

+ (void)logfWithNSString:(NSString *)format
       withNSObjectArray:(IOSObjectArray *)args {
  EduStanfordNlpUtilLoggingRedwood_logfWithNSString_withNSObjectArray_(format, args);
}

+ (void)logfWithEduStanfordNlpUtilLoggingRedwood_Flag:(EduStanfordNlpUtilLoggingRedwood_Flag *)level
                                         withNSString:(NSString *)format
                                    withNSObjectArray:(IOSObjectArray *)args {
  EduStanfordNlpUtilLoggingRedwood_logfWithEduStanfordNlpUtilLoggingRedwood_Flag_withNSString_withNSObjectArray_(level, format, args);
}

+ (void)startTrackWithNSObjectArray:(IOSObjectArray *)args {
  EduStanfordNlpUtilLoggingRedwood_startTrackWithNSObjectArray_(args);
}

+ (void)forceTrackWithId:(id)name {
  EduStanfordNlpUtilLoggingRedwood_forceTrackWithId_(name);
}

+ (void)forceTrack {
  EduStanfordNlpUtilLoggingRedwood_forceTrack();
}

+ (void)endTrackWithNSString:(NSString *)title {
  EduStanfordNlpUtilLoggingRedwood_endTrackWithNSString_(title);
}

+ (void)endTrack {
  EduStanfordNlpUtilLoggingRedwood_endTrack();
}

+ (void)startThreadsWithNSString:(NSString *)title {
  EduStanfordNlpUtilLoggingRedwood_startThreadsWithNSString_(title);
}

+ (void)finishThread {
  EduStanfordNlpUtilLoggingRedwood_finishThread();
}

+ (void)endThreadsWithNSString:(NSString *)check {
  EduStanfordNlpUtilLoggingRedwood_endThreadsWithNSString_(check);
}

+ (EduStanfordNlpUtilLoggingRedwood_RedwoodChannels *)channelsWithNSObjectArray:(IOSObjectArray *)channelNames {
  return EduStanfordNlpUtilLoggingRedwood_channelsWithNSObjectArray_(channelNames);
}

+ (void)hideChannelsEverywhereWithNSObjectArray:(IOSObjectArray *)channels {
  EduStanfordNlpUtilLoggingRedwood_hideChannelsEverywhereWithNSObjectArray_(channels);
}

+ (void)stop {
  EduStanfordNlpUtilLoggingRedwood_stop();
}

+ (void)formatTimeDifferenceWithLong:(jlong)diff
           withJavaLangStringBuilder:(JavaLangStringBuilder *)b {
  EduStanfordNlpUtilLoggingRedwood_formatTimeDifferenceWithLong_withJavaLangStringBuilder_(diff, b);
}

+ (NSString *)formatTimeDifferenceWithLong:(jlong)diff {
  return EduStanfordNlpUtilLoggingRedwood_formatTimeDifferenceWithLong_(diff);
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  EduStanfordNlpUtilLoggingRedwood_mainWithNSStringArray_(args);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 4, 1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 5, 3, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpUtilLoggingRedwood_RecordHandlerTree;", 0xc, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0xc, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpUtilLoggingLogRecordHandler;", 0xa, 6, 7, -1, 8, 9, -1 },
    { NULL, "V", 0xc, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0xc, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x89, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x89, 14, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x89, 14, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x89, 17, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 18, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 20, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 22, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 23, 21, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpUtilLoggingRedwood_RedwoodChannels;", 0x89, 24, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x89, 25, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0xc, 26, 27, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 26, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 28, 29, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(queueTaskWithLong:withJavaLangRunnable:);
  methods[2].selector = @selector(releaseThreadControlWithLong:);
  methods[3].selector = @selector(attemptThreadControlWithLong:withJavaLangRunnable:);
  methods[4].selector = @selector(attemptThreadControlThreadsafeWithLong:);
  methods[5].selector = @selector(rootHandler);
  methods[6].selector = @selector(clearHandlers);
  methods[7].selector = @selector(getHandlerWithIOSClass:);
  methods[8].selector = @selector(captureSystemStreamsWithBoolean:withBoolean:);
  methods[9].selector = @selector(restoreSystemStreams);
  methods[10].selector = @selector(logWithNSObjectArray:);
  methods[11].selector = @selector(logfWithNSString:withNSObjectArray:);
  methods[12].selector = @selector(logfWithEduStanfordNlpUtilLoggingRedwood_Flag:withNSString:withNSObjectArray:);
  methods[13].selector = @selector(startTrackWithNSObjectArray:);
  methods[14].selector = @selector(forceTrackWithId:);
  methods[15].selector = @selector(forceTrack);
  methods[16].selector = @selector(endTrackWithNSString:);
  methods[17].selector = @selector(endTrack);
  methods[18].selector = @selector(startThreadsWithNSString:);
  methods[19].selector = @selector(finishThread);
  methods[20].selector = @selector(endThreadsWithNSString:);
  methods[21].selector = @selector(channelsWithNSObjectArray:);
  methods[22].selector = @selector(hideChannelsEverywhereWithNSObjectArray:);
  methods[23].selector = @selector(stop);
  methods[24].selector = @selector(formatTimeDifferenceWithLong:withJavaLangStringBuilder:);
  methods[25].selector = @selector(formatTimeDifferenceWithLong:);
  methods[26].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ERR", "LEduStanfordNlpUtilLoggingRedwood_Flag;", .constantValue.asLong = 0, 0x19, -1, 30, -1, -1 },
    { "WARN", "LEduStanfordNlpUtilLoggingRedwood_Flag;", .constantValue.asLong = 0, 0x19, -1, 31, -1, -1 },
    { "DBG", "LEduStanfordNlpUtilLoggingRedwood_Flag;", .constantValue.asLong = 0, 0x19, -1, 32, -1, -1 },
    { "FORCE", "LEduStanfordNlpUtilLoggingRedwood_Flag;", .constantValue.asLong = 0, 0x19, -1, 33, -1, -1 },
    { "STDOUT", "LEduStanfordNlpUtilLoggingRedwood_Flag;", .constantValue.asLong = 0, 0x19, -1, 34, -1, -1 },
    { "STDERR", "LEduStanfordNlpUtilLoggingRedwood_Flag;", .constantValue.asLong = 0, 0x19, -1, 35, -1, -1 },
    { "realSysOut", "LJavaIoPrintStream;", .constantValue.asLong = 0, 0x1c, -1, 36, -1, -1 },
    { "realSysErr", "LJavaIoPrintStream;", .constantValue.asLong = 0, 0x1c, -1, 37, -1, -1 },
    { "handlers", "LEduStanfordNlpUtilLoggingRedwood_RecordHandlerTree;", .constantValue.asLong = 0, 0xa, -1, 38, -1, -1 },
    { "depth", "I", .constantValue.asLong = 0, 0xa, -1, 39, -1, -1 },
    { "titleStack", "LJavaUtilStack;", .constantValue.asLong = 0, 0x1a, -1, 40, 41, -1 },
    { "isClosed", "Z", .constantValue.asLong = 0, 0xa, -1, 42, -1, -1 },
    { "threadedLogQueue", "LJavaUtilMap;", .constantValue.asLong = 0, 0x1a, -1, 43, 44, -1 },
    { "currentThread", "J", .constantValue.asLong = 0, 0xa, -1, 45, -1, -1 },
    { "threadsWaiting", "LJavaUtilQueue;", .constantValue.asLong = 0, 0x1a, -1, 46, 47, -1 },
    { "isThreaded", "Z", .constantValue.asLong = 0, 0xa, -1, 48, -1, -1 },
    { "control", "LJavaUtilConcurrentLocksReentrantLock;", .constantValue.asLong = 0, 0x1a, -1, 49, -1, -1 },
    { "supportsAnsi", "Z", .constantValue.asLong = 0, 0x19, -1, 50, -1, -1 },
  };
  static const void *ptrTable[] = { "queueTask", "JLJavaLangRunnable;", "releaseThreadControl", "J", "attemptThreadControl", "attemptThreadControlThreadsafe", "getHandler", "LIOSClass;", "<E:Ledu/stanford/nlp/util/logging/LogRecordHandler;>(Ljava/lang/Class<TE;>;)TE;", (void *)&EduStanfordNlpUtilLoggingRedwood__Annotations$0, "captureSystemStreams", "ZZ", "log", "[LNSObject;", "logf", "LNSString;[LNSObject;", "LEduStanfordNlpUtilLoggingRedwood_Flag;LNSString;[LNSObject;", "startTrack", "forceTrack", "LNSObject;", "endTrack", "LNSString;", "startThreads", "endThreads", "channels", "hideChannelsEverywhere", "formatTimeDifference", "JLJavaLangStringBuilder;", "main", "[LNSString;", &EduStanfordNlpUtilLoggingRedwood_ERR, &EduStanfordNlpUtilLoggingRedwood_WARN, &EduStanfordNlpUtilLoggingRedwood_DBG, &EduStanfordNlpUtilLoggingRedwood_FORCE, &EduStanfordNlpUtilLoggingRedwood_STDOUT, &EduStanfordNlpUtilLoggingRedwood_STDERR, &EduStanfordNlpUtilLoggingRedwood_realSysOut, &EduStanfordNlpUtilLoggingRedwood_realSysErr, &EduStanfordNlpUtilLoggingRedwood_handlers, &EduStanfordNlpUtilLoggingRedwood_depth, &EduStanfordNlpUtilLoggingRedwood_titleStack, "Ljava/util/Stack<Ljava/lang/String;>;", &EduStanfordNlpUtilLoggingRedwood_isClosed, &EduStanfordNlpUtilLoggingRedwood_threadedLogQueue, "Ljava/util/Map<Ljava/lang/Long;Ljava/util/Queue<Ljava/lang/Runnable;>;>;", &EduStanfordNlpUtilLoggingRedwood_currentThread, &EduStanfordNlpUtilLoggingRedwood_threadsWaiting, "Ljava/util/Queue<Ljava/lang/Long;>;", &EduStanfordNlpUtilLoggingRedwood_isThreaded, &EduStanfordNlpUtilLoggingRedwood_control, &EduStanfordNlpUtilLoggingRedwood_supportsAnsi, "LEduStanfordNlpUtilLoggingRedwood_MessageType;LEduStanfordNlpUtilLoggingRedwood_RecordHandlerTree;LEduStanfordNlpUtilLoggingRedwood_Record;LEduStanfordNlpUtilLoggingRedwood_ConsoleHandler;LEduStanfordNlpUtilLoggingRedwood_FileHandler;LEduStanfordNlpUtilLoggingRedwood_Util;LEduStanfordNlpUtilLoggingRedwood_RedwoodChannels;LEduStanfordNlpUtilLoggingRedwood_Flag;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilLoggingRedwood = { "Redwood", "edu.stanford.nlp.util.logging", ptrTable, methods, fields, 7, 0x1, 27, 18, -1, 51, -1, -1, -1 };
  return &_EduStanfordNlpUtilLoggingRedwood;
}

+ (void)initialize {
  if (self == [EduStanfordNlpUtilLoggingRedwood class]) {
    EduStanfordNlpUtilLoggingRedwood_ERR = JreLoadEnum(EduStanfordNlpUtilLoggingRedwood_Flag, ERROR);
    EduStanfordNlpUtilLoggingRedwood_WARN = JreLoadEnum(EduStanfordNlpUtilLoggingRedwood_Flag, WARN);
    EduStanfordNlpUtilLoggingRedwood_DBG = JreLoadEnum(EduStanfordNlpUtilLoggingRedwood_Flag, DEBUG);
    EduStanfordNlpUtilLoggingRedwood_FORCE = JreLoadEnum(EduStanfordNlpUtilLoggingRedwood_Flag, FORCE);
    EduStanfordNlpUtilLoggingRedwood_STDOUT = JreLoadEnum(EduStanfordNlpUtilLoggingRedwood_Flag, STDOUT);
    EduStanfordNlpUtilLoggingRedwood_STDERR = JreLoadEnum(EduStanfordNlpUtilLoggingRedwood_Flag, STDERR);
    EduStanfordNlpUtilLoggingRedwood_realSysOut = JreLoadStatic(JavaLangSystem, out);
    EduStanfordNlpUtilLoggingRedwood_realSysErr = JreLoadStatic(JavaLangSystem, err);
    EduStanfordNlpUtilLoggingRedwood_handlers = new_EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree_init();
    EduStanfordNlpUtilLoggingRedwood_titleStack = new_JavaUtilStack_init();
    EduStanfordNlpUtilLoggingRedwood_threadedLogQueue = EduStanfordNlpUtilGenerics_newHashMap();
    EduStanfordNlpUtilLoggingRedwood_threadsWaiting = new_JavaUtilLinkedList_init();
    EduStanfordNlpUtilLoggingRedwood_control = new_JavaUtilConcurrentLocksReentrantLock_init();
    {
      NSString *os = [((NSString *) nil_chk(JavaLangSystem_getPropertyWithNSString_(@"os.name"))) lowercaseString];
      jboolean isUnix = [((NSString *) nil_chk(os)) contains:@"unix"] || [os contains:@"linux"] || [os contains:@"solaris"];
      EduStanfordNlpUtilLoggingRedwood_supportsAnsi = (JavaLangBoolean_getBooleanWithNSString_(@"Ansi") || isUnix);
    }
    {
      [((EduStanfordNlpUtilLoggingRedwoodConfiguration *) nil_chk(EduStanfordNlpUtilLoggingRedwoodConfiguration_minimal())) apply];
    }
    J2OBJC_SET_INITIALIZED(EduStanfordNlpUtilLoggingRedwood)
  }
}

@end

void EduStanfordNlpUtilLoggingRedwood_init(EduStanfordNlpUtilLoggingRedwood *self) {
  NSObject_init(self);
}

EduStanfordNlpUtilLoggingRedwood *new_EduStanfordNlpUtilLoggingRedwood_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilLoggingRedwood, init)
}

EduStanfordNlpUtilLoggingRedwood *create_EduStanfordNlpUtilLoggingRedwood_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilLoggingRedwood, init)
}

void EduStanfordNlpUtilLoggingRedwood_queueTaskWithLong_withJavaLangRunnable_(jlong threadId, id<JavaLangRunnable> toRun) {
  EduStanfordNlpUtilLoggingRedwood_initialize();
  JreAssert(([((JavaUtilConcurrentLocksReentrantLock *) nil_chk(EduStanfordNlpUtilLoggingRedwood_control)) isHeldByCurrentThread]), (@"edu/stanford/nlp/util/logging/Redwood.java:122 condition failed: assert control.isHeldByCurrentThread();"));
  JreAssert((threadId != EduStanfordNlpUtilLoggingRedwood_currentThread), (@"edu/stanford/nlp/util/logging/Redwood.java:123 condition failed: assert threadId != currentThread;"));
  if (![((id<JavaUtilMap>) nil_chk(EduStanfordNlpUtilLoggingRedwood_threadedLogQueue)) containsKeyWithId:JavaLangLong_valueOfWithLong_(threadId)]) {
    (void) [EduStanfordNlpUtilLoggingRedwood_threadedLogQueue putWithId:JavaLangLong_valueOfWithLong_(threadId) withId:new_JavaUtilLinkedList_init()];
  }
  id<JavaUtilQueue> threadLogQueue = [EduStanfordNlpUtilLoggingRedwood_threadedLogQueue getWithId:JavaLangLong_valueOfWithLong_(threadId)];
  [((id<JavaUtilQueue>) nil_chk(threadLogQueue)) offerWithId:toRun];
  if (![((id<JavaUtilQueue>) nil_chk(EduStanfordNlpUtilLoggingRedwood_threadsWaiting)) containsWithId:JavaLangLong_valueOfWithLong_(threadId)]) {
    [EduStanfordNlpUtilLoggingRedwood_threadsWaiting offerWithId:JavaLangLong_valueOfWithLong_(threadId)];
    JreAssert(([EduStanfordNlpUtilLoggingRedwood_threadedLogQueue getWithId:JavaLangLong_valueOfWithLong_(threadId)] != nil && ![((id<JavaUtilQueue>) nil_chk([EduStanfordNlpUtilLoggingRedwood_threadedLogQueue getWithId:JavaLangLong_valueOfWithLong_(threadId)])) isEmpty]), (@"edu/stanford/nlp/util/logging/Redwood.java:134 condition failed: assert threadedLogQueue.get(threadId) != null && !threadedLogQueue.get(threadId).isEmpty();"));
  }
}

void EduStanfordNlpUtilLoggingRedwood_releaseThreadControlWithLong_(jlong threadId) {
  EduStanfordNlpUtilLoggingRedwood_initialize();
  JreAssert((!EduStanfordNlpUtilLoggingRedwood_isThreaded || [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(EduStanfordNlpUtilLoggingRedwood_control)) isHeldByCurrentThread]), (@"edu/stanford/nlp/util/logging/Redwood.java:139 condition failed: assert !isThreaded || control.isHeldByCurrentThread();"));
  JreAssert((EduStanfordNlpUtilLoggingRedwood_currentThread < 0LL || EduStanfordNlpUtilLoggingRedwood_currentThread == threadId), (@"edu/stanford/nlp/util/logging/Redwood.java:140 condition failed: assert currentThread < 0L || currentThread == threadId;"));
  EduStanfordNlpUtilLoggingRedwood_currentThread = -1LL;
}

void EduStanfordNlpUtilLoggingRedwood_attemptThreadControlWithLong_withJavaLangRunnable_(jlong threadId, id<JavaLangRunnable> r) {
  EduStanfordNlpUtilLoggingRedwood_initialize();
  jboolean tookLock = false;
  if (![((JavaUtilConcurrentLocksReentrantLock *) nil_chk(EduStanfordNlpUtilLoggingRedwood_control)) isHeldByCurrentThread]) {
    [EduStanfordNlpUtilLoggingRedwood_control lock];
    tookLock = true;
  }
  EduStanfordNlpUtilLoggingRedwood_attemptThreadControlThreadsafeWithLong_(threadId);
  if (threadId == EduStanfordNlpUtilLoggingRedwood_currentThread) {
    [((id<JavaLangRunnable>) nil_chk(r)) run];
  }
  else {
    EduStanfordNlpUtilLoggingRedwood_queueTaskWithLong_withJavaLangRunnable_(threadId, r);
  }
  JreAssert(([EduStanfordNlpUtilLoggingRedwood_control isHeldByCurrentThread]), (@"edu/stanford/nlp/util/logging/Redwood.java:160 condition failed: assert control.isHeldByCurrentThread();"));
  if (tookLock) {
    [EduStanfordNlpUtilLoggingRedwood_control unlock];
  }
}

void EduStanfordNlpUtilLoggingRedwood_attemptThreadControlThreadsafeWithLong_(jlong threadId) {
  EduStanfordNlpUtilLoggingRedwood_initialize();
  JreAssert(([((JavaUtilConcurrentLocksReentrantLock *) nil_chk(EduStanfordNlpUtilLoggingRedwood_control)) isHeldByCurrentThread]), (@"edu/stanford/nlp/util/logging/Redwood.java:168 condition failed: assert control.isHeldByCurrentThread();"));
  jboolean hopeless = true;
  if (EduStanfordNlpUtilLoggingRedwood_currentThread < 0LL) {
    if ([((id<JavaUtilQueue>) nil_chk(EduStanfordNlpUtilLoggingRedwood_threadsWaiting)) isEmpty]) {
      EduStanfordNlpUtilLoggingRedwood_currentThread = threadId;
    }
    else {
      EduStanfordNlpUtilLoggingRedwood_currentThread = [((JavaLangLong *) nil_chk([EduStanfordNlpUtilLoggingRedwood_threadsWaiting poll])) longLongValue];
      hopeless = false;
      JreAssert(([((id<JavaUtilMap>) nil_chk(EduStanfordNlpUtilLoggingRedwood_threadedLogQueue)) getWithId:JavaLangLong_valueOfWithLong_(EduStanfordNlpUtilLoggingRedwood_currentThread)] == nil || ![((id<JavaUtilQueue>) nil_chk([EduStanfordNlpUtilLoggingRedwood_threadedLogQueue getWithId:JavaLangLong_valueOfWithLong_(EduStanfordNlpUtilLoggingRedwood_currentThread)])) isEmpty]), (@"edu/stanford/nlp/util/logging/Redwood.java:178 condition failed: assert threadedLogQueue.get(currentThread) == null || !threadedLogQueue.get(currentThread).isEmpty();"));
    }
  }
  else if (EduStanfordNlpUtilLoggingRedwood_currentThread == threadId) {
    [((id<JavaUtilQueue>) nil_chk(EduStanfordNlpUtilLoggingRedwood_threadsWaiting)) removeWithId:JavaLangLong_valueOfWithLong_(EduStanfordNlpUtilLoggingRedwood_currentThread)];
  }
  else if (EduStanfordNlpUtilLoggingRedwood_currentThread >= 0LL) {
    [((id<JavaUtilQueue>) nil_chk(EduStanfordNlpUtilLoggingRedwood_threadsWaiting)) removeWithId:JavaLangLong_valueOfWithLong_(EduStanfordNlpUtilLoggingRedwood_currentThread)];
  }
  else {
    JreAssert((false), (@"edu/stanford/nlp/util/logging/Redwood.java:187 condition failed: assert false;"));
  }
  jlong activeThread = EduStanfordNlpUtilLoggingRedwood_currentThread;
  id<JavaUtilQueue> backlog = [((id<JavaUtilMap>) nil_chk(EduStanfordNlpUtilLoggingRedwood_threadedLogQueue)) getWithId:JavaLangLong_valueOfWithLong_(EduStanfordNlpUtilLoggingRedwood_currentThread)];
  if (backlog != nil) {
    while (![backlog isEmpty] && EduStanfordNlpUtilLoggingRedwood_currentThread >= 0LL) {
      [((id<JavaLangRunnable>) nil_chk([backlog poll])) run];
    }
    if (EduStanfordNlpUtilLoggingRedwood_currentThread < 0LL && ![backlog isEmpty]) {
      [((id<JavaUtilQueue>) nil_chk(EduStanfordNlpUtilLoggingRedwood_threadsWaiting)) offerWithId:JavaLangLong_valueOfWithLong_(activeThread)];
      hopeless = false;
    }
  }
  if (!hopeless && EduStanfordNlpUtilLoggingRedwood_currentThread != threadId) {
    EduStanfordNlpUtilLoggingRedwood_attemptThreadControlThreadsafeWithLong_(threadId);
  }
  JreAssert((![((id<JavaUtilQueue>) nil_chk(EduStanfordNlpUtilLoggingRedwood_threadsWaiting)) containsWithId:JavaLangLong_valueOfWithLong_(EduStanfordNlpUtilLoggingRedwood_currentThread)]), (@"edu/stanford/nlp/util/logging/Redwood.java:207 condition failed: assert !threadsWaiting.contains(currentThread);"));
  JreAssert(([EduStanfordNlpUtilLoggingRedwood_control isHeldByCurrentThread]), (@"edu/stanford/nlp/util/logging/Redwood.java:208 condition failed: assert control.isHeldByCurrentThread();"));
}

EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree *EduStanfordNlpUtilLoggingRedwood_rootHandler() {
  EduStanfordNlpUtilLoggingRedwood_initialize();
  return EduStanfordNlpUtilLoggingRedwood_handlers;
}

void EduStanfordNlpUtilLoggingRedwood_clearHandlers() {
  EduStanfordNlpUtilLoggingRedwood_initialize();
  EduStanfordNlpUtilLoggingRedwood_handlers = new_EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree_init();
}

EduStanfordNlpUtilLoggingLogRecordHandler *EduStanfordNlpUtilLoggingRedwood_getHandlerWithIOSClass_(IOSClass *clazz) {
  EduStanfordNlpUtilLoggingRedwood_initialize();
  for (EduStanfordNlpUtilLoggingLogRecordHandler * __strong cand in nil_chk(EduStanfordNlpUtilLoggingRedwood_handlers)) {
    if (clazz == (id) [((EduStanfordNlpUtilLoggingLogRecordHandler *) nil_chk(cand)) getClass]) {
      return cand;
    }
  }
  return nil;
}

void EduStanfordNlpUtilLoggingRedwood_captureSystemStreamsWithBoolean_withBoolean_(jboolean captureOut, jboolean captureErr) {
  EduStanfordNlpUtilLoggingRedwood_initialize();
  if (captureOut) {
    JavaLangSystem_setOutWithJavaIoPrintStream_(new_EduStanfordNlpUtilLoggingRedwoodPrintStream_initWithEduStanfordNlpUtilLoggingRedwood_Flag_withJavaIoPrintStream_(EduStanfordNlpUtilLoggingRedwood_STDOUT, EduStanfordNlpUtilLoggingRedwood_realSysOut));
  }
  else {
    JavaLangSystem_setOutWithJavaIoPrintStream_(EduStanfordNlpUtilLoggingRedwood_realSysOut);
  }
  if (captureErr) {
    JavaLangSystem_setErrWithJavaIoPrintStream_(new_EduStanfordNlpUtilLoggingRedwoodPrintStream_initWithEduStanfordNlpUtilLoggingRedwood_Flag_withJavaIoPrintStream_(EduStanfordNlpUtilLoggingRedwood_STDERR, EduStanfordNlpUtilLoggingRedwood_realSysErr));
  }
  else {
    JavaLangSystem_setErrWithJavaIoPrintStream_(EduStanfordNlpUtilLoggingRedwood_realSysErr);
  }
}

void EduStanfordNlpUtilLoggingRedwood_restoreSystemStreams() {
  EduStanfordNlpUtilLoggingRedwood_initialize();
  JavaLangSystem_setOutWithJavaIoPrintStream_(EduStanfordNlpUtilLoggingRedwood_realSysOut);
  JavaLangSystem_setErrWithJavaIoPrintStream_(EduStanfordNlpUtilLoggingRedwood_realSysErr);
}

void EduStanfordNlpUtilLoggingRedwood_logWithNSObjectArray_(IOSObjectArray *args) {
  EduStanfordNlpUtilLoggingRedwood_initialize();
  if (((IOSObjectArray *) nil_chk(args))->size_ == 0) {
    return;
  }
  if (EduStanfordNlpUtilLoggingRedwood_isClosed) {
    return;
  }
  id content = IOSObjectArray_Get(args, args->size_ - 1);
  IOSObjectArray *tags = [IOSObjectArray newArrayWithLength:args->size_ - 1 type:NSObject_class_()];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(args, 0, tags, 0, args->size_ - 1);
  jlong timestamp = JavaLangSystem_currentTimeMillis();
  if (EduStanfordNlpUtilLoggingRedwood_isThreaded) {
    id<JavaLangRunnable> log = new_EduStanfordNlpUtilLoggingRedwood_$Lambda$1_initWithId_withNSObjectArray_withLong_(content, tags, timestamp);
    jlong threadId = [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getId];
    EduStanfordNlpUtilLoggingRedwood_attemptThreadControlWithLong_withJavaLangRunnable_(threadId, log);
  }
  else {
    EduStanfordNlpUtilLoggingRedwood_Record *toPass = new_EduStanfordNlpUtilLoggingRedwood_Record_initWithId_withNSObjectArray_withInt_withLong_(content, tags, EduStanfordNlpUtilLoggingRedwood_depth, timestamp);
    EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree_processWithEduStanfordNlpUtilLoggingRedwood_Record_withEduStanfordNlpUtilLoggingRedwood_MessageType_withInt_withLong_(nil_chk(EduStanfordNlpUtilLoggingRedwood_handlers), toPass, JreLoadEnum(EduStanfordNlpUtilLoggingRedwood_MessageType, SIMPLE), EduStanfordNlpUtilLoggingRedwood_depth, toPass->timesstamp_);
  }
}

void EduStanfordNlpUtilLoggingRedwood_logfWithNSString_withNSObjectArray_(NSString *format, IOSObjectArray *args) {
  EduStanfordNlpUtilLoggingRedwood_initialize();
  EduStanfordNlpUtilLoggingRedwood_logWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ create_EduStanfordNlpUtilLoggingRedwood_$Lambda$2_initWithNSString_withNSObjectArray_(format, args) } count:1 type:NSObject_class_()]);
}

void EduStanfordNlpUtilLoggingRedwood_logfWithEduStanfordNlpUtilLoggingRedwood_Flag_withNSString_withNSObjectArray_(EduStanfordNlpUtilLoggingRedwood_Flag *level, NSString *format, IOSObjectArray *args) {
  EduStanfordNlpUtilLoggingRedwood_initialize();
  EduStanfordNlpUtilLoggingRedwood_logWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ level, create_EduStanfordNlpUtilLoggingRedwood_$Lambda$3_initWithNSString_withNSObjectArray_(format, args) } count:2 type:NSObject_class_()]);
}

void EduStanfordNlpUtilLoggingRedwood_startTrackWithNSObjectArray_(IOSObjectArray *args) {
  EduStanfordNlpUtilLoggingRedwood_initialize();
  if (EduStanfordNlpUtilLoggingRedwood_isClosed) {
    return;
  }
  jint len = ((IOSObjectArray *) nil_chk(args))->size_ == 0 ? 0 : args->size_ - 1;
  id content = args->size_ == 0 ? @"" : IOSObjectArray_Get(args, len);
  IOSObjectArray *tags = [IOSObjectArray newArrayWithLength:len type:NSObject_class_()];
  jlong timestamp = JavaLangSystem_currentTimeMillis();
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(args, 0, tags, 0, len);
  id<JavaLangRunnable> startTrack = new_EduStanfordNlpUtilLoggingRedwood_$1_initWithId_withNSObjectArray_withLong_withNSObjectArray_withInt_(content, tags, timestamp, args, len);
  if (EduStanfordNlpUtilLoggingRedwood_isThreaded) {
    jlong threadId = [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getId];
    EduStanfordNlpUtilLoggingRedwood_attemptThreadControlWithLong_withJavaLangRunnable_(threadId, startTrack);
  }
  else {
    [startTrack run];
  }
}

void EduStanfordNlpUtilLoggingRedwood_forceTrackWithId_(id name) {
  EduStanfordNlpUtilLoggingRedwood_initialize();
  EduStanfordNlpUtilLoggingRedwood_startTrackWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ EduStanfordNlpUtilLoggingRedwood_FORCE, name } count:2 type:NSObject_class_()]);
}

void EduStanfordNlpUtilLoggingRedwood_forceTrack() {
  EduStanfordNlpUtilLoggingRedwood_initialize();
  EduStanfordNlpUtilLoggingRedwood_startTrackWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ EduStanfordNlpUtilLoggingRedwood_FORCE, @"" } count:2 type:NSObject_class_()]);
}

void EduStanfordNlpUtilLoggingRedwood_endTrackWithNSString_(NSString *title) {
  EduStanfordNlpUtilLoggingRedwood_initialize();
  if (EduStanfordNlpUtilLoggingRedwood_isClosed) {
    return;
  }
  jlong timestamp = JavaLangSystem_currentTimeMillis();
  id<JavaLangRunnable> endTrack = new_EduStanfordNlpUtilLoggingRedwood_$Lambda$4_initWithNSString_withLong_(title, timestamp);
  if (EduStanfordNlpUtilLoggingRedwood_isThreaded) {
    jlong threadId = [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getId];
    EduStanfordNlpUtilLoggingRedwood_attemptThreadControlWithLong_withJavaLangRunnable_(threadId, endTrack);
  }
  else {
    [endTrack run];
  }
}

void EduStanfordNlpUtilLoggingRedwood_endTrack() {
  EduStanfordNlpUtilLoggingRedwood_initialize();
  EduStanfordNlpUtilLoggingRedwood_endTrackWithNSString_(@"");
}

void EduStanfordNlpUtilLoggingRedwood_startThreadsWithNSString_(NSString *title) {
  EduStanfordNlpUtilLoggingRedwood_initialize();
  if (EduStanfordNlpUtilLoggingRedwood_isThreaded) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Cannot nest Redwood threaded environments");
  }
  EduStanfordNlpUtilLoggingRedwood_startTrackWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ EduStanfordNlpUtilLoggingRedwood_FORCE, JreStrcat("$$$", @"Threads( ", title, @" )") } count:2 type:NSObject_class_()]);
  EduStanfordNlpUtilLoggingRedwood_isThreaded = true;
}

void EduStanfordNlpUtilLoggingRedwood_finishThread() {
  EduStanfordNlpUtilLoggingRedwood_initialize();
  jlong threadId = [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getId];
  id<JavaLangRunnable> finish = new_EduStanfordNlpUtilLoggingRedwood_$Lambda$5_initWithLong_(threadId);
  if (EduStanfordNlpUtilLoggingRedwood_isThreaded) {
    EduStanfordNlpUtilLoggingRedwood_attemptThreadControlWithLong_withJavaLangRunnable_(threadId, finish);
  }
  else {
    EduStanfordNlpUtilLoggingRedwood_logWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ JreLoadEnum(EduStanfordNlpUtilLoggingRedwood_Flag, WARN), @"finishThreads() called outside of threaded environment" } count:2 type:NSObject_class_()]);
  }
}

void EduStanfordNlpUtilLoggingRedwood_endThreadsWithNSString_(NSString *check) {
  EduStanfordNlpUtilLoggingRedwood_initialize();
  EduStanfordNlpUtilLoggingRedwood_isThreaded = false;
  if (EduStanfordNlpUtilLoggingRedwood_currentThread != -1LL) {
    EduStanfordNlpUtilLoggingRedwood_logWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ JreLoadEnum(EduStanfordNlpUtilLoggingRedwood_Flag, WARN), JreStrcat("$J$", @"endThreads() called, but thread ", EduStanfordNlpUtilLoggingRedwood_currentThread, @" has not finished (exception in thread?)") } count:2 type:NSObject_class_()]);
  }
  JreAssert((![((JavaUtilConcurrentLocksReentrantLock *) nil_chk(EduStanfordNlpUtilLoggingRedwood_control)) isHeldByCurrentThread]), (@"edu/stanford/nlp/util/logging/Redwood.java:467 condition failed: assert !control.isHeldByCurrentThread();"));
  jboolean cleanPass = false;
  while (!cleanPass) {
    cleanPass = true;
    for (JavaLangLong *boxed__ in nil_chk([((id<JavaUtilMap>) nil_chk(EduStanfordNlpUtilLoggingRedwood_threadedLogQueue)) keySet])) {
      jlong thread = [((JavaLangLong *) nil_chk(boxed__)) longLongValue];
      JreAssert((EduStanfordNlpUtilLoggingRedwood_currentThread < 0LL), (@"edu/stanford/nlp/util/logging/Redwood.java:473 condition failed: assert currentThread < 0L;"));
      if ([EduStanfordNlpUtilLoggingRedwood_threadedLogQueue getWithId:JavaLangLong_valueOfWithLong_(thread)] != nil && ![((id<JavaUtilQueue>) nil_chk([EduStanfordNlpUtilLoggingRedwood_threadedLogQueue getWithId:JavaLangLong_valueOfWithLong_(thread)])) isEmpty]) {
        cleanPass = false;
        id<JavaUtilQueue> backlog = [EduStanfordNlpUtilLoggingRedwood_threadedLogQueue getWithId:JavaLangLong_valueOfWithLong_(thread)];
        EduStanfordNlpUtilLoggingRedwood_currentThread = thread;
        while (EduStanfordNlpUtilLoggingRedwood_currentThread >= 0) {
          if ([((id<JavaUtilQueue>) nil_chk(backlog)) isEmpty]) {
            EduStanfordNlpUtilLoggingRedwood_logWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ JreLoadEnum(EduStanfordNlpUtilLoggingRedwood_Flag, WARN), JreStrcat("$J", @"Forgot to call finishThread() on thread ", EduStanfordNlpUtilLoggingRedwood_currentThread) } count:2 type:NSObject_class_()]);
          }
          JreAssert((![EduStanfordNlpUtilLoggingRedwood_control isHeldByCurrentThread]), (@"edu/stanford/nlp/util/logging/Redwood.java:483 condition failed: assert !control.isHeldByCurrentThread();"));
          [((id<JavaLangRunnable>) nil_chk([backlog poll])) run];
        }
        [((id<JavaUtilQueue>) nil_chk(EduStanfordNlpUtilLoggingRedwood_threadsWaiting)) removeWithId:JavaLangLong_valueOfWithLong_(thread)];
      }
    }
  }
  while ([((id<JavaUtilQueue>) nil_chk(EduStanfordNlpUtilLoggingRedwood_threadsWaiting)) size] > 0) {
    JreAssert((EduStanfordNlpUtilLoggingRedwood_currentThread < 0LL), (@"edu/stanford/nlp/util/logging/Redwood.java:492 condition failed: assert currentThread < 0L;"));
    JreAssert(([EduStanfordNlpUtilLoggingRedwood_control tryLock]), (@"edu/stanford/nlp/util/logging/Redwood.java:493 condition failed: assert control.tryLock();"));
    JreAssert((![EduStanfordNlpUtilLoggingRedwood_threadsWaiting isEmpty]), (@"edu/stanford/nlp/util/logging/Redwood.java:494 condition failed: assert !threadsWaiting.isEmpty();"));
    [EduStanfordNlpUtilLoggingRedwood_control lock];
    EduStanfordNlpUtilLoggingRedwood_attemptThreadControlThreadsafeWithLong_(-1);
    [EduStanfordNlpUtilLoggingRedwood_control unlock];
  }
  for (id<JavaUtilMap_Entry> __strong longQueueEntry in nil_chk([((id<JavaUtilMap>) nil_chk(EduStanfordNlpUtilLoggingRedwood_threadedLogQueue)) entrySet])) {
    JreAssert(([((id<JavaUtilQueue>) nil_chk([((id<JavaUtilMap_Entry>) nil_chk(longQueueEntry)) getValue])) isEmpty]), (@"edu/stanford/nlp/util/logging/Redwood.java:501 condition failed: assert longQueueEntry.getValue().isEmpty();"));
  }
  JreAssert(([EduStanfordNlpUtilLoggingRedwood_threadsWaiting isEmpty]), (@"edu/stanford/nlp/util/logging/Redwood.java:503 condition failed: assert threadsWaiting.isEmpty();"));
  JreAssert((EduStanfordNlpUtilLoggingRedwood_currentThread == -1LL), (@"edu/stanford/nlp/util/logging/Redwood.java:504 condition failed: assert currentThread == -1L;"));
  EduStanfordNlpUtilLoggingRedwood_endTrackWithNSString_(JreStrcat("$$$", @"Threads( ", check, @" )"));
}

EduStanfordNlpUtilLoggingRedwood_RedwoodChannels *EduStanfordNlpUtilLoggingRedwood_channelsWithNSObjectArray_(IOSObjectArray *channelNames) {
  EduStanfordNlpUtilLoggingRedwood_initialize();
  return new_EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_initWithNSObjectArray_(channelNames);
}

void EduStanfordNlpUtilLoggingRedwood_hideChannelsEverywhereWithNSObjectArray_(IOSObjectArray *channels) {
  EduStanfordNlpUtilLoggingRedwood_initialize();
  for (EduStanfordNlpUtilLoggingLogRecordHandler * __strong handler in nil_chk(EduStanfordNlpUtilLoggingRedwood_handlers)) {
    if ([handler isKindOfClass:[EduStanfordNlpUtilLoggingVisibilityHandler class]]) {
      EduStanfordNlpUtilLoggingVisibilityHandler *visHandler = (EduStanfordNlpUtilLoggingVisibilityHandler *) cast_chk(handler, [EduStanfordNlpUtilLoggingVisibilityHandler class]);
      {
        IOSObjectArray *a__ = channels;
        id const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
        id const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          id channel = *b__++;
          [((EduStanfordNlpUtilLoggingVisibilityHandler *) nil_chk(visHandler)) alsoHideWithId:channel];
        }
      }
    }
  }
}

void EduStanfordNlpUtilLoggingRedwood_stop() {
  EduStanfordNlpUtilLoggingRedwood_initialize();
  EduStanfordNlpUtilLoggingRedwood_isClosed = true;
  JavaLangThread_yield();
  JavaLangThread_yield();
  while (EduStanfordNlpUtilLoggingRedwood_depth > 0) {
    EduStanfordNlpUtilLoggingRedwood_depth -= 1;
    EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree_processWithEduStanfordNlpUtilLoggingRedwood_Record_withEduStanfordNlpUtilLoggingRedwood_MessageType_withInt_withLong_(nil_chk(EduStanfordNlpUtilLoggingRedwood_handlers), nil, JreLoadEnum(EduStanfordNlpUtilLoggingRedwood_MessageType, END_TRACK), EduStanfordNlpUtilLoggingRedwood_depth, JavaLangSystem_currentTimeMillis());
  }
  EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree_processWithEduStanfordNlpUtilLoggingRedwood_Record_withEduStanfordNlpUtilLoggingRedwood_MessageType_withInt_withLong_(nil_chk(EduStanfordNlpUtilLoggingRedwood_handlers), nil, JreLoadEnum(EduStanfordNlpUtilLoggingRedwood_MessageType, SHUTDOWN), 0, JavaLangSystem_currentTimeMillis());
}

void EduStanfordNlpUtilLoggingRedwood_formatTimeDifferenceWithLong_withJavaLangStringBuilder_(jlong diff, JavaLangStringBuilder *b) {
  EduStanfordNlpUtilLoggingRedwood_initialize();
  jint mili = (jint) diff % 1000;
  jlong rest = diff / 1000;
  jint sec = (jint) rest % 60;
  rest = rest / 60;
  jint min = (jint) rest % 60;
  rest = rest / 60;
  jint hr = (jint) rest % 24;
  rest = rest / 24;
  jint day = (jint) rest;
  if (day > 0) (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(b)) appendWithInt:day])) appendWithNSString:day > 1 ? @" days, " : @" day, "];
  if (hr > 0) (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(b)) appendWithInt:hr])) appendWithNSString:hr > 1 ? @" hours, " : @" hour, "];
  if (min > 0) {
    if (min < 10) {
      (void) [((JavaLangStringBuilder *) nil_chk(b)) appendWithNSString:@"0"];
    }
    (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(b)) appendWithInt:min])) appendWithNSString:@":"];
  }
  if (min > 0 && sec < 10) {
    (void) [((JavaLangStringBuilder *) nil_chk(b)) appendWithNSString:@"0"];
  }
  (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(b)) appendWithInt:sec])) appendWithNSString:@"."])) appendWithInt:mili];
  if (min > 0) (void) [b appendWithNSString:@" minutes"];
  else (void) [b appendWithNSString:@" seconds"];
}

NSString *EduStanfordNlpUtilLoggingRedwood_formatTimeDifferenceWithLong_(jlong diff) {
  EduStanfordNlpUtilLoggingRedwood_initialize();
  JavaLangStringBuilder *b = new_JavaLangStringBuilder_init();
  EduStanfordNlpUtilLoggingRedwood_formatTimeDifferenceWithLong_withJavaLangStringBuilder_(diff, b);
  return [b description];
}

void EduStanfordNlpUtilLoggingRedwood_mainWithNSStringArray_(IOSObjectArray *args) {
  EduStanfordNlpUtilLoggingRedwood_initialize();
  EduStanfordNlpUtilLoggingRedwood_logWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ EduStanfordNlpUtilLoggingRedwood_DBG, @"hello world!" } count:2 type:NSObject_class_()]);
  EduStanfordNlpUtilLoggingRedwood_hideChannelsEverywhereWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ EduStanfordNlpUtilLoggingRedwood_DBG } count:1 type:NSObject_class_()]);
  EduStanfordNlpUtilLoggingRedwood_logWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ EduStanfordNlpUtilLoggingRedwood_DBG, @"hello debug!" } count:2 type:NSObject_class_()]);
  JavaLangSystem_exitWithInt_(1);
  JavaUtilLinkedList *tasks = new_JavaUtilLinkedList_init();
  for (jint i = 0; i < 1000; i++) {
    jint fI = i;
    [tasks addWithId:new_EduStanfordNlpUtilLoggingRedwood_$Lambda$6_initWithInt_(fI)];
  }
  EduStanfordNlpUtilLoggingRedwood_startTrackWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ @"Wrapper" } count:1 type:NSObject_class_()]);
  for (jint i = 0; i < 100; i++) {
    EduStanfordNlpUtilLoggingRedwood_Util_threadAndRunWithJavaLangIterable_withInt_(tasks, 100);
  }
  EduStanfordNlpUtilLoggingRedwood_endTrackWithNSString_(@"Wrapper");
  JavaLangSystem_exitWithInt_(1);
  EduStanfordNlpUtilLoggingRedwood_forceTrackWithId_(@"Track 1");
  EduStanfordNlpUtilLoggingRedwood_logWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ @"tag", EduStanfordNlpUtilLoggingRedwood_ERR, @"hello world" } count:3 type:NSObject_class_()]);
  EduStanfordNlpUtilLoggingRedwood_startTrackWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ @"Hidden" } count:1 type:NSObject_class_()]);
  EduStanfordNlpUtilLoggingRedwood_startTrackWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ @"Subhidden" } count:1 type:NSObject_class_()]);
  EduStanfordNlpUtilLoggingRedwood_endTrackWithNSString_(@"Subhidden");
  EduStanfordNlpUtilLoggingRedwood_endTrackWithNSString_(@"Hidden");
  EduStanfordNlpUtilLoggingRedwood_startTrackWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ EduStanfordNlpUtilLoggingRedwood_FORCE, @"Shown" } count:2 type:NSObject_class_()]);
  EduStanfordNlpUtilLoggingRedwood_startTrackWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ EduStanfordNlpUtilLoggingRedwood_FORCE, @"Subshown" } count:2 type:NSObject_class_()]);
  EduStanfordNlpUtilLoggingRedwood_endTrackWithNSString_(@"Subshown");
  EduStanfordNlpUtilLoggingRedwood_endTrackWithNSString_(@"Shown");
  EduStanfordNlpUtilLoggingRedwood_logWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ @"^shown should have appeared above" } count:1 type:NSObject_class_()]);
  EduStanfordNlpUtilLoggingRedwood_startTrackWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ @"Track 1.1" } count:1 type:NSObject_class_()]);
  EduStanfordNlpUtilLoggingRedwood_logWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ EduStanfordNlpUtilLoggingRedwood_WARN, @"some", @"something in 1.1" } count:3 type:NSObject_class_()]);
  EduStanfordNlpUtilLoggingRedwood_logWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ @"some", EduStanfordNlpUtilLoggingRedwood_ERR, @"something in 1.1" } count:3 type:NSObject_class_()]);
  EduStanfordNlpUtilLoggingRedwood_logWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ EduStanfordNlpUtilLoggingRedwood_FORCE, @"some", EduStanfordNlpUtilLoggingRedwood_WARN, @"something in 1.1" } count:4 type:NSObject_class_()]);
  EduStanfordNlpUtilLoggingRedwood_logWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ EduStanfordNlpUtilLoggingRedwood_WARN, EduStanfordNlpUtilLoggingRedwood_FORCE, @"some", @"something in 1.1" } count:4 type:NSObject_class_()]);
  EduStanfordNlpUtilLoggingRedwood_logfWithNSString_withNSObjectArray_(@"format string %s then int %d", [IOSObjectArray newArrayWithObjects:(id[]){ @"hello", JavaLangInteger_valueOfWithInt_(7) } count:2 type:NSObject_class_()]);
  EduStanfordNlpUtilLoggingRedwood_endTrackWithNSString_(@"Track 1.1");
  EduStanfordNlpUtilLoggingRedwood_startTrackWithNSObjectArray_([IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]);
  EduStanfordNlpUtilLoggingRedwood_logWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ @"In an anonymous track" } count:1 type:NSObject_class_()]);
  EduStanfordNlpUtilLoggingRedwood_endTrack();
  EduStanfordNlpUtilLoggingRedwood_endTrackWithNSString_(@"Track 1");
  EduStanfordNlpUtilLoggingRedwood_logWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ @"outside of a track" } count:1 type:NSObject_class_()]);
  EduStanfordNlpUtilLoggingRedwood_logWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ @"these", @"channels", @"should", @"be", @"in", EduStanfordNlpUtilLoggingRedwood_DBG, @"alphabetical", @"order", @"a log item with lots of channels" } count:9 type:NSObject_class_()]);
  EduStanfordNlpUtilLoggingRedwood_logWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ @"these", @"channels", @"should", @"be", @"in", EduStanfordNlpUtilLoggingRedwood_DBG, @"alphabetical", @"order", @"a log item\nthat spans\nmultiple\nlines" } count:9 type:NSObject_class_()]);
  EduStanfordNlpUtilLoggingRedwood_logWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ EduStanfordNlpUtilLoggingRedwood_DBG, @"a last log item" } count:2 type:NSObject_class_()]);
  EduStanfordNlpUtilLoggingRedwood_logWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ EduStanfordNlpUtilLoggingRedwood_ERR, nil } count:2 type:NSObject_class_()]);
  EduStanfordNlpUtilLoggingRedwood_forceTrackWithId_(@"Strict Equality");
  for (jint i = 0; i < 100; i++) {
    EduStanfordNlpUtilLoggingRedwood_logWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ @"this is a message" } count:1 type:NSObject_class_()]);
  }
  EduStanfordNlpUtilLoggingRedwood_endTrackWithNSString_(@"Strict Equality");
  EduStanfordNlpUtilLoggingRedwood_forceTrackWithId_(@"Change");
  for (jint i = 0; i < 10; i++) {
    EduStanfordNlpUtilLoggingRedwood_logWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ @"this is a message" } count:1 type:NSObject_class_()]);
  }
  for (jint i = 0; i < 10; i++) {
    EduStanfordNlpUtilLoggingRedwood_logWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ @"this is a another message" } count:1 type:NSObject_class_()]);
  }
  for (jint i = 0; i < 10; i++) {
    EduStanfordNlpUtilLoggingRedwood_logWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ @"this is a third message" } count:1 type:NSObject_class_()]);
  }
  for (jint i = 0; i < 5; i++) {
    EduStanfordNlpUtilLoggingRedwood_logWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ @"this is a fourth message" } count:1 type:NSObject_class_()]);
  }
  EduStanfordNlpUtilLoggingRedwood_logWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ EduStanfordNlpUtilLoggingRedwood_FORCE, @"this is a fourth message" } count:2 type:NSObject_class_()]);
  for (jint i = 0; i < 5; i++) {
    EduStanfordNlpUtilLoggingRedwood_logWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ @"this is a fourth message" } count:1 type:NSObject_class_()]);
  }
  EduStanfordNlpUtilLoggingRedwood_logWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ @"^middle 'fourth message' was forced" } count:1 type:NSObject_class_()]);
  EduStanfordNlpUtilLoggingRedwood_endTrackWithNSString_(@"Change");
  EduStanfordNlpUtilLoggingRedwood_forceTrackWithId_(@"Repeated Tracks");
  for (jint i = 0; i < 100; i++) {
    EduStanfordNlpUtilLoggingRedwood_startTrackWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ @"Track type 1" } count:1 type:NSObject_class_()]);
    EduStanfordNlpUtilLoggingRedwood_logWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ @"a message" } count:1 type:NSObject_class_()]);
    EduStanfordNlpUtilLoggingRedwood_endTrackWithNSString_(@"Track type 1");
  }
  for (jint i = 0; i < 100; i++) {
    EduStanfordNlpUtilLoggingRedwood_startTrackWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ @"Track type 2" } count:1 type:NSObject_class_()]);
    EduStanfordNlpUtilLoggingRedwood_logWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ @"a message" } count:1 type:NSObject_class_()]);
    EduStanfordNlpUtilLoggingRedwood_endTrackWithNSString_(@"Track type 2");
  }
  for (jint i = 0; i < 100; i++) {
    EduStanfordNlpUtilLoggingRedwood_startTrackWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ @"Track type 3" } count:1 type:NSObject_class_()]);
    EduStanfordNlpUtilLoggingRedwood_logWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ @"a message" } count:1 type:NSObject_class_()]);
    EduStanfordNlpUtilLoggingRedwood_endTrackWithNSString_(@"Track type 3");
  }
  EduStanfordNlpUtilLoggingRedwood_startTrackWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ @"Track type 3" } count:1 type:NSObject_class_()]);
  EduStanfordNlpUtilLoggingRedwood_startTrackWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ @"nested" } count:1 type:NSObject_class_()]);
  EduStanfordNlpUtilLoggingRedwood_logWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ EduStanfordNlpUtilLoggingRedwood_FORCE, @"this should show up" } count:2 type:NSObject_class_()]);
  EduStanfordNlpUtilLoggingRedwood_endTrackWithNSString_(@"nested");
  EduStanfordNlpUtilLoggingRedwood_endTrackWithNSString_(@"Track type 3");
  for (jint i = 0; i < 5; i++) {
    EduStanfordNlpUtilLoggingRedwood_startTrackWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ @"Track type 3" } count:1 type:NSObject_class_()]);
    EduStanfordNlpUtilLoggingRedwood_logWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ EduStanfordNlpUtilLoggingRedwood_FORCE, @"this should show up" } count:2 type:NSObject_class_()]);
    EduStanfordNlpUtilLoggingRedwood_endTrackWithNSString_(@"Track type 3");
  }
  EduStanfordNlpUtilLoggingRedwood_logWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ EduStanfordNlpUtilLoggingRedwood_WARN, @"The log message 'this should show up' should show up 6 (5+1) times above" } count:2 type:NSObject_class_()]);
  EduStanfordNlpUtilLoggingRedwood_endTrackWithNSString_(@"Repeated Tracks");
  EduStanfordNlpUtilLoggingRedwood_forceTrackWithId_(@"Hidden Subtracks");
  for (jint i = 0; i < 100; i++) {
    EduStanfordNlpUtilLoggingRedwood_startTrackWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ @"Only has debug messages" } count:1 type:NSObject_class_()]);
    EduStanfordNlpUtilLoggingRedwood_logWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ EduStanfordNlpUtilLoggingRedwood_DBG, @"You shouldn't see me" } count:2 type:NSObject_class_()]);
    EduStanfordNlpUtilLoggingRedwood_endTrackWithNSString_(@"Only has debug messages");
  }
  EduStanfordNlpUtilLoggingRedwood_logWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ @"You shouldn't see any other messages or 'skipped tracks' here" } count:1 type:NSObject_class_()]);
  EduStanfordNlpUtilLoggingRedwood_endTrackWithNSString_(@"Hidden Subtracks");
  [((EduStanfordNlpUtilLoggingRedwoodConfiguration *) nil_chk(EduStanfordNlpUtilLoggingRedwoodConfiguration_standard())) apply];
  EduStanfordNlpUtilLoggingRedwood_forceTrackWithId_(@"Fuzzy Equality");
  for (jint i = 0; i < 100; i++) {
    EduStanfordNlpUtilLoggingRedwood_logWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ JreStrcat("$I$D", @"iter ", i, @" ended with value ", (-34587292534.0 + JavaLangMath_sqrtWithDouble_(i) * 3000000000.0)) } count:1 type:NSObject_class_()]);
  }
  EduStanfordNlpUtilLoggingRedwood_endTrackWithNSString_(@"Fuzzy Equality");
  EduStanfordNlpUtilLoggingRedwood_forceTrackWithId_(@"Fuzzy Equality (timing)");
  for (jint i = 0; i < 100; i++) {
    EduStanfordNlpUtilLoggingRedwood_logWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ JreStrcat("$I$D", @"iter ", i, @" ended with value ", (-34587292534.0 + JavaLangMath_sqrtWithDouble_(i) * 3000000000.0)) } count:1 type:NSObject_class_()]);
    @try {
      JavaLangThread_sleepWithLong_(50);
    }
    @catch (JavaLangInterruptedException *e) {
      @throw new_EduStanfordNlpUtilRuntimeInterruptedException_initWithJavaLangInterruptedException_(e);
    }
  }
  EduStanfordNlpUtilLoggingRedwood_endTrackWithNSString_(@"Fuzzy Equality (timing)");
  EduStanfordNlpUtilLoggingRedwood_Util_logWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ @"hello world" } count:1 type:NSObject_class_()]);
  EduStanfordNlpUtilLoggingRedwood_Util_logWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ EduStanfordNlpUtilLoggingRedwood_DBG, @"hello world" } count:2 type:NSObject_class_()]);
  EduStanfordNlpUtilLoggingRedwood_Util_debugWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ @"hello world" } count:1 type:NSObject_class_()]);
  EduStanfordNlpUtilLoggingRedwood_Util_debugWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ @"atag", @"hello world" } count:2 type:NSObject_class_()]);
  ((EduStanfordNlpUtilLoggingRedwood_ConsoleHandler *) nil_chk(EduStanfordNlpUtilLoggingRedwood_getHandlerWithIOSClass_(EduStanfordNlpUtilLoggingRedwood_ConsoleHandler_class_())))->minLineCountForTrackNameReminder_ = 5;
  EduStanfordNlpUtilLoggingRedwood_startTrackWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ @"Long Track" } count:1 type:NSObject_class_()]);
  for (jint i = 0; i < 10; i++) {
    EduStanfordNlpUtilLoggingRedwood_logWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ EduStanfordNlpUtilLoggingRedwood_FORCE, @"contents of long track" } count:2 type:NSObject_class_()]);
  }
  EduStanfordNlpUtilLoggingRedwood_endTrackWithNSString_(@"Long TracK");
  EduStanfordNlpUtilLoggingRedwood_startTrackWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ @"Long Track" } count:1 type:NSObject_class_()]);
  EduStanfordNlpUtilLoggingRedwood_startTrackWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ @"But really this is the long one" } count:1 type:NSObject_class_()]);
  @try {
    JavaLangThread_sleepWithLong_(3000);
  }
  @catch (JavaLangInterruptedException *e) {
    @throw new_EduStanfordNlpUtilRuntimeInterruptedException_initWithJavaLangInterruptedException_(e);
  }
  for (jint i = 0; i < 10; i++) {
    EduStanfordNlpUtilLoggingRedwood_logWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ EduStanfordNlpUtilLoggingRedwood_FORCE, @"contents of long track" } count:2 type:NSObject_class_()]);
  }
  EduStanfordNlpUtilLoggingRedwood_endTrackWithNSString_(@"But really this is the long one");
  EduStanfordNlpUtilLoggingRedwood_endTrackWithNSString_(@"Long TracK");
  ((EduStanfordNlpUtilLoggingRedwood_ConsoleHandler *) nil_chk(EduStanfordNlpUtilLoggingRedwood_getHandlerWithIOSClass_(EduStanfordNlpUtilLoggingRedwood_ConsoleHandler_class_())))->minLineCountForTrackNameReminder_ = 50;
  id<JavaUtilConcurrentExecutorService> exec = JavaUtilConcurrentExecutors_newFixedThreadPoolWithInt_(10);
  EduStanfordNlpUtilLoggingRedwood_startThreadsWithNSString_(@"name");
  for (jint i = 0; i < 50; i++) {
    jint theI = i;
    [((id<JavaUtilConcurrentExecutorService>) nil_chk(exec)) executeWithJavaLangRunnable:new_EduStanfordNlpUtilLoggingRedwood_$Lambda$7_initWithInt_(theI)];
  }
  [((id<JavaUtilConcurrentExecutorService>) nil_chk(exec)) shutdown];
  @try {
    [exec awaitTerminationWithLong:JavaLangLong_MAX_VALUE withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  }
  @catch (JavaLangInterruptedException *e) {
    @throw new_EduStanfordNlpUtilRuntimeInterruptedException_initWithJavaLangInterruptedException_(e);
  }
  EduStanfordNlpUtilLoggingRedwood_endThreadsWithNSString_(@"name");
  EduStanfordNlpUtilLoggingRedwood_captureSystemStreamsWithBoolean_withBoolean_(true, true);
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"Hello World"];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"This is an error!"];
  for (jint i = 0; i < 100; i++) {
    EduStanfordNlpUtilLoggingRedwood_logWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ @"stuff!" } count:1 type:NSObject_class_()]);
  }
  EduStanfordNlpUtilLoggingRedwood_Util_exitWithInt_(0);
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@"I'm going to exception soon (on purpose)"];
  [((EduStanfordNlpUtilLoggingRedwoodConfiguration *) nil_chk([((EduStanfordNlpUtilLoggingRedwoodConfiguration *) nil_chk(EduStanfordNlpUtilLoggingRedwoodConfiguration_current())) neatExit])) apply];
  EduStanfordNlpUtilLoggingRedwood_startTrackWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ @"I should close" } count:1 type:NSObject_class_()]);
  EduStanfordNlpUtilLoggingRedwood_logWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ EduStanfordNlpUtilLoggingRedwood_FORCE, @"so I'm nonempty..." } count:2 type:NSObject_class_()]);
  @try {
    JavaLangThread_sleepWithLong_(1000);
  }
  @catch (JavaLangInterruptedException *e) {
    @throw new_EduStanfordNlpUtilRuntimeInterruptedException_initWithJavaLangInterruptedException_(e);
  }
  @throw new_JavaLangIllegalArgumentException_init();
}

IOSObjectArray *EduStanfordNlpUtilLoggingRedwood__Annotations$0() {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpUtilLoggingRedwood)

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpUtilLoggingRedwood_MessageType)

EduStanfordNlpUtilLoggingRedwood_MessageType *EduStanfordNlpUtilLoggingRedwood_MessageType_values_[4];

@implementation EduStanfordNlpUtilLoggingRedwood_MessageType

+ (IOSObjectArray *)values {
  return EduStanfordNlpUtilLoggingRedwood_MessageType_values();
}

+ (EduStanfordNlpUtilLoggingRedwood_MessageType *)valueOfWithNSString:(NSString *)name {
  return EduStanfordNlpUtilLoggingRedwood_MessageType_valueOfWithNSString_(name);
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LEduStanfordNlpUtilLoggingRedwood_MessageType;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpUtilLoggingRedwood_MessageType;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "SIMPLE", "LEduStanfordNlpUtilLoggingRedwood_MessageType;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "START_TRACK", "LEduStanfordNlpUtilLoggingRedwood_MessageType;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "SHUTDOWN", "LEduStanfordNlpUtilLoggingRedwood_MessageType;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "END_TRACK", "LEduStanfordNlpUtilLoggingRedwood_MessageType;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(EduStanfordNlpUtilLoggingRedwood_MessageType, SIMPLE), &JreEnum(EduStanfordNlpUtilLoggingRedwood_MessageType, START_TRACK), &JreEnum(EduStanfordNlpUtilLoggingRedwood_MessageType, SHUTDOWN), &JreEnum(EduStanfordNlpUtilLoggingRedwood_MessageType, END_TRACK), "LEduStanfordNlpUtilLoggingRedwood;", "Ljava/lang/Enum<Ledu/stanford/nlp/util/logging/Redwood$MessageType;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilLoggingRedwood_MessageType = { "MessageType", "edu.stanford.nlp.util.logging", ptrTable, methods, fields, 7, 0x401a, 2, 4, 6, -1, -1, 7, -1 };
  return &_EduStanfordNlpUtilLoggingRedwood_MessageType;
}

+ (void)initialize {
  if (self == [EduStanfordNlpUtilLoggingRedwood_MessageType class]) {
    JreEnum(EduStanfordNlpUtilLoggingRedwood_MessageType, SIMPLE) = new_EduStanfordNlpUtilLoggingRedwood_MessageType_initWithNSString_withInt_(@"SIMPLE", 0);
    JreEnum(EduStanfordNlpUtilLoggingRedwood_MessageType, START_TRACK) = new_EduStanfordNlpUtilLoggingRedwood_MessageType_initWithNSString_withInt_(@"START_TRACK", 1);
    JreEnum(EduStanfordNlpUtilLoggingRedwood_MessageType, SHUTDOWN) = new_EduStanfordNlpUtilLoggingRedwood_MessageType_initWithNSString_withInt_(@"SHUTDOWN", 2);
    JreEnum(EduStanfordNlpUtilLoggingRedwood_MessageType, END_TRACK) = new_EduStanfordNlpUtilLoggingRedwood_MessageType_initWithNSString_withInt_(@"END_TRACK", 3);
    J2OBJC_SET_INITIALIZED(EduStanfordNlpUtilLoggingRedwood_MessageType)
  }
}

@end

void EduStanfordNlpUtilLoggingRedwood_MessageType_initWithNSString_withInt_(EduStanfordNlpUtilLoggingRedwood_MessageType *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

EduStanfordNlpUtilLoggingRedwood_MessageType *new_EduStanfordNlpUtilLoggingRedwood_MessageType_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilLoggingRedwood_MessageType, initWithNSString_withInt_, __name, __ordinal)
}

IOSObjectArray *EduStanfordNlpUtilLoggingRedwood_MessageType_values() {
  EduStanfordNlpUtilLoggingRedwood_MessageType_initialize();
  return [IOSObjectArray arrayWithObjects:EduStanfordNlpUtilLoggingRedwood_MessageType_values_ count:4 type:EduStanfordNlpUtilLoggingRedwood_MessageType_class_()];
}

EduStanfordNlpUtilLoggingRedwood_MessageType *EduStanfordNlpUtilLoggingRedwood_MessageType_valueOfWithNSString_(NSString *name) {
  EduStanfordNlpUtilLoggingRedwood_MessageType_initialize();
  for (int i = 0; i < 4; i++) {
    EduStanfordNlpUtilLoggingRedwood_MessageType *e = EduStanfordNlpUtilLoggingRedwood_MessageType_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

EduStanfordNlpUtilLoggingRedwood_MessageType *EduStanfordNlpUtilLoggingRedwood_MessageType_fromOrdinal(NSUInteger ordinal) {
  EduStanfordNlpUtilLoggingRedwood_MessageType_initialize();
  if (ordinal >= 4) {
    return nil;
  }
  return EduStanfordNlpUtilLoggingRedwood_MessageType_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpUtilLoggingRedwood_MessageType)

@implementation EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithEduStanfordNlpUtilLoggingLogRecordHandler:(EduStanfordNlpUtilLoggingLogRecordHandler *)head {
  EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree_initWithEduStanfordNlpUtilLoggingLogRecordHandler_(self, head);
  return self;
}

- (EduStanfordNlpUtilLoggingLogRecordHandler *)head {
  return head_;
}

- (id<JavaUtilIterator>)children {
  return [((id<JavaUtilList>) nil_chk(children_)) iterator];
}

- (void)addChildWithEduStanfordNlpUtilLoggingLogRecordHandler:(EduStanfordNlpUtilLoggingLogRecordHandler *)handler {
  if (JreLoadStatic(EduStanfordNlpUtilLoggingRedwood, depth) != 0) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Cannot modify Redwood when within a track");
  }
  [((id<JavaUtilList>) nil_chk(children_)) addWithId:new_EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree_initWithEduStanfordNlpUtilLoggingLogRecordHandler_(handler)];
}

- (void)addChildTreeWithEduStanfordNlpUtilLoggingRedwood_RecordHandlerTree:(EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree *)tree {
  if (JreLoadStatic(EduStanfordNlpUtilLoggingRedwood, depth) != 0) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Cannot modify Redwood when within a track");
  }
  [((id<JavaUtilList>) nil_chk(children_)) addWithId:tree];
}

- (EduStanfordNlpUtilLoggingLogRecordHandler *)removeChildWithEduStanfordNlpUtilLoggingLogRecordHandler:(EduStanfordNlpUtilLoggingLogRecordHandler *)handler {
  if (JreLoadStatic(EduStanfordNlpUtilLoggingRedwood, depth) != 0) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Cannot modify Redwood when within a track");
  }
  id<JavaUtilIterator> iter = [self children];
  while ([((id<JavaUtilIterator>) nil_chk(iter)) hasNext]) {
    EduStanfordNlpUtilLoggingLogRecordHandler *cand = [((EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree *) nil_chk([iter next])) head];
    if (cand == handler) {
      [iter remove];
      return cand;
    }
  }
  return nil;
}

- (EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree *)findWithEduStanfordNlpUtilLoggingLogRecordHandler:(EduStanfordNlpUtilLoggingLogRecordHandler *)toFind {
  if (toFind == [self head]) {
    return self;
  }
  else {
    id<JavaUtilIterator> iter = [self children];
    while ([((id<JavaUtilIterator>) nil_chk(iter)) hasNext]) {
      EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree *cand = [((EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree *) nil_chk([iter next])) findWithEduStanfordNlpUtilLoggingLogRecordHandler:toFind];
      if (cand != nil) {
        return cand;
      }
    }
  }
  return nil;
}

- (id<JavaUtilIterator>)iterator {
  return new_EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree_$1_initWithEduStanfordNlpUtilLoggingRedwood_RecordHandlerTree_(self);
}

+ (id<JavaUtilList>)appendWithJavaUtilList:(id<JavaUtilList>)lst
withEduStanfordNlpUtilLoggingRedwood_Record:(EduStanfordNlpUtilLoggingRedwood_Record *)toAppend {
  return EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree_appendWithJavaUtilList_withEduStanfordNlpUtilLoggingRedwood_Record_(lst, toAppend);
}

- (void)processWithEduStanfordNlpUtilLoggingRedwood_Record:(EduStanfordNlpUtilLoggingRedwood_Record *)toPass
          withEduStanfordNlpUtilLoggingRedwood_MessageType:(EduStanfordNlpUtilLoggingRedwood_MessageType *)type
                                                   withInt:(jint)newDepth
                                                  withLong:(jlong)timestamp {
  EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree_processWithEduStanfordNlpUtilLoggingRedwood_Record_withEduStanfordNlpUtilLoggingRedwood_MessageType_withInt_withLong_(self, toPass, type, newDepth, timestamp);
}

- (JavaLangStringBuilder *)toStringHelperWithJavaLangStringBuilder:(JavaLangStringBuilder *)b
                                                           withInt:(jint)depth {
  return EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree_toStringHelperWithJavaLangStringBuilder_withInt_(self, b, depth);
}

- (NSString *)description {
  return [((JavaLangStringBuilder *) nil_chk(EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree_toStringHelperWithJavaLangStringBuilder_withInt_(self, new_JavaLangStringBuilder_init(), 0))) description];
}

- (void)forEachWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaLangIterable_forEachWithJavaUtilFunctionConsumer_(self, arg0);
}

- (id<JavaUtilSpliterator>)spliterator {
  return JavaLangIterable_spliterator(self);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpUtilLoggingLogRecordHandler;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 3, 4, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpUtilLoggingLogRecordHandler;", 0x1, 5, 0, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpUtilLoggingRedwood_RecordHandlerTree;", 0x1, 6, 0, -1, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 7, -1, -1 },
    { NULL, "LJavaUtilList;", 0xa, 8, 9, -1, 10, -1, -1 },
    { NULL, "V", 0x2, 11, 12, -1, -1, -1, -1 },
    { NULL, "LJavaLangStringBuilder;", 0x2, 13, 14, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 15, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithEduStanfordNlpUtilLoggingLogRecordHandler:);
  methods[2].selector = @selector(head);
  methods[3].selector = @selector(children);
  methods[4].selector = @selector(addChildWithEduStanfordNlpUtilLoggingLogRecordHandler:);
  methods[5].selector = @selector(addChildTreeWithEduStanfordNlpUtilLoggingRedwood_RecordHandlerTree:);
  methods[6].selector = @selector(removeChildWithEduStanfordNlpUtilLoggingLogRecordHandler:);
  methods[7].selector = @selector(findWithEduStanfordNlpUtilLoggingLogRecordHandler:);
  methods[8].selector = @selector(iterator);
  methods[9].selector = @selector(appendWithJavaUtilList:withEduStanfordNlpUtilLoggingRedwood_Record:);
  methods[10].selector = @selector(processWithEduStanfordNlpUtilLoggingRedwood_Record:withEduStanfordNlpUtilLoggingRedwood_MessageType:withInt:withLong:);
  methods[11].selector = @selector(toStringHelperWithJavaLangStringBuilder:withInt:);
  methods[12].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "isRoot_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "head_", "LEduStanfordNlpUtilLoggingLogRecordHandler;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "children_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 16, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpUtilLoggingLogRecordHandler;", "()Ljava/util/Iterator<Ledu/stanford/nlp/util/logging/Redwood$RecordHandlerTree;>;", "addChild", "addChildTree", "LEduStanfordNlpUtilLoggingRedwood_RecordHandlerTree;", "removeChild", "find", "()Ljava/util/Iterator<Ledu/stanford/nlp/util/logging/LogRecordHandler;>;", "append", "LJavaUtilList;LEduStanfordNlpUtilLoggingRedwood_Record;", "(Ljava/util/List<Ledu/stanford/nlp/util/logging/Redwood$Record;>;Ledu/stanford/nlp/util/logging/Redwood$Record;)Ljava/util/List<Ledu/stanford/nlp/util/logging/Redwood$Record;>;", "process", "LEduStanfordNlpUtilLoggingRedwood_Record;LEduStanfordNlpUtilLoggingRedwood_MessageType;IJ", "toStringHelper", "LJavaLangStringBuilder;I", "toString", "Ljava/util/List<Ledu/stanford/nlp/util/logging/Redwood$RecordHandlerTree;>;", "LEduStanfordNlpUtilLoggingRedwood;", "Ljava/lang/Object;Ljava/lang/Iterable<Ledu/stanford/nlp/util/logging/LogRecordHandler;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree = { "RecordHandlerTree", "edu.stanford.nlp.util.logging", ptrTable, methods, fields, 7, 0xc, 13, 3, 17, -1, -1, 18, -1 };
  return &_EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree;
}

@end

void EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree_init(EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree *self) {
  NSObject_init(self);
  self->children_ = new_JavaUtilArrayList_init();
  self->isRoot_ = true;
  self->head_ = nil;
}

EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree *new_EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree, init)
}

EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree *create_EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree, init)
}

void EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree_initWithEduStanfordNlpUtilLoggingLogRecordHandler_(EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree *self, EduStanfordNlpUtilLoggingLogRecordHandler *head) {
  NSObject_init(self);
  self->children_ = new_JavaUtilArrayList_init();
  self->isRoot_ = false;
  self->head_ = head;
}

EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree *new_EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree_initWithEduStanfordNlpUtilLoggingLogRecordHandler_(EduStanfordNlpUtilLoggingLogRecordHandler *head) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree, initWithEduStanfordNlpUtilLoggingLogRecordHandler_, head)
}

EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree *create_EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree_initWithEduStanfordNlpUtilLoggingLogRecordHandler_(EduStanfordNlpUtilLoggingLogRecordHandler *head) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree, initWithEduStanfordNlpUtilLoggingLogRecordHandler_, head)
}

id<JavaUtilList> EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree_appendWithJavaUtilList_withEduStanfordNlpUtilLoggingRedwood_Record_(id<JavaUtilList> lst, EduStanfordNlpUtilLoggingRedwood_Record *toAppend) {
  EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree_initialize();
  if (lst == JreLoadStatic(EduStanfordNlpUtilLoggingLogRecordHandler, EMPTY)) {
    lst = new_JavaUtilArrayList_init();
  }
  [((id<JavaUtilList>) nil_chk(lst)) addWithId:toAppend];
  return lst;
}

void EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree_processWithEduStanfordNlpUtilLoggingRedwood_Record_withEduStanfordNlpUtilLoggingRedwood_MessageType_withInt_withLong_(EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree *self, EduStanfordNlpUtilLoggingRedwood_Record *toPass, EduStanfordNlpUtilLoggingRedwood_MessageType *type, jint newDepth, jlong timestamp) {
  id<JavaUtilList> toPassOn;
  if (self->head_ != nil) {
    switch ([type ordinal]) {
      case EduStanfordNlpUtilLoggingRedwood_MessageType_Enum_SIMPLE:
      toPassOn = [self->head_ handleWithEduStanfordNlpUtilLoggingRedwood_Record:toPass];
      break;
      case EduStanfordNlpUtilLoggingRedwood_MessageType_Enum_START_TRACK:
      toPassOn = [self->head_ signalStartTrackWithEduStanfordNlpUtilLoggingRedwood_Record:toPass];
      break;
      case EduStanfordNlpUtilLoggingRedwood_MessageType_Enum_END_TRACK:
      toPassOn = [self->head_ signalEndTrackWithInt:newDepth withLong:timestamp];
      break;
      case EduStanfordNlpUtilLoggingRedwood_MessageType_Enum_SHUTDOWN:
      toPassOn = [self->head_ signalShutdown];
      break;
      default:
      @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@", @"MessageType was non-exhaustive: ", type));
    }
  }
  else {
    toPassOn = new_JavaUtilArrayList_init();
    switch ([type ordinal]) {
      case EduStanfordNlpUtilLoggingRedwood_MessageType_Enum_SIMPLE:
      toPassOn = EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree_appendWithJavaUtilList_withEduStanfordNlpUtilLoggingRedwood_Record_(toPassOn, toPass);
      break;
      case EduStanfordNlpUtilLoggingRedwood_MessageType_Enum_START_TRACK:
      break;
      case EduStanfordNlpUtilLoggingRedwood_MessageType_Enum_END_TRACK:
      break;
      case EduStanfordNlpUtilLoggingRedwood_MessageType_Enum_SHUTDOWN:
      break;
      default:
      @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@", @"MessageType was non-exhaustive: ", type));
    }
  }
  id<JavaUtilIterator> iter = [self children];
  while ([((id<JavaUtilIterator>) nil_chk(iter)) hasNext]) {
    EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree *child = [iter next];
    for (EduStanfordNlpUtilLoggingRedwood_Record * __strong r in nil_chk(toPassOn)) {
      EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree_processWithEduStanfordNlpUtilLoggingRedwood_Record_withEduStanfordNlpUtilLoggingRedwood_MessageType_withInt_withLong_(nil_chk(child), r, JreLoadEnum(EduStanfordNlpUtilLoggingRedwood_MessageType, SIMPLE), newDepth, timestamp);
    }
    switch ([type ordinal]) {
      case EduStanfordNlpUtilLoggingRedwood_MessageType_Enum_START_TRACK:
      case EduStanfordNlpUtilLoggingRedwood_MessageType_Enum_END_TRACK:
      case EduStanfordNlpUtilLoggingRedwood_MessageType_Enum_SHUTDOWN:
      EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree_processWithEduStanfordNlpUtilLoggingRedwood_Record_withEduStanfordNlpUtilLoggingRedwood_MessageType_withInt_withLong_(nil_chk(child), toPass, type, newDepth, timestamp);
      break;
      case EduStanfordNlpUtilLoggingRedwood_MessageType_Enum_SIMPLE:
      break;
      default:
      @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@", @"MessageType was non-exhaustive: ", type));
    }
  }
}

JavaLangStringBuilder *EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree_toStringHelperWithJavaLangStringBuilder_withInt_(EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree *self, JavaLangStringBuilder *b, jint depth) {
  for (jint i = 0; i < depth; i++) {
    (void) [((JavaLangStringBuilder *) nil_chk(b)) appendWithNSString:@"  "];
  }
  (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(b)) appendWithId:self->head_ == nil ? @"ROOT" : (id) self->head_])) appendWithNSString:@"\n"];
  for (EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree * __strong child in nil_chk(self->children_)) {
    (void) EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree_toStringHelperWithJavaLangStringBuilder_withInt_(nil_chk(child), b, depth + 1);
  }
  return b;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree)

@implementation EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree_$1

- (jboolean)hasNext {
  while (childIter_ != nil && ![childIter_ hasNext]) {
    if (![((id<JavaUtilIterator>) nil_chk(childrenIter_)) hasNext]) {
      break;
    }
    else {
      childIter_ = [((EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree *) nil_chk([childrenIter_ next])) iterator];
    }
  }
  return !seenHead_ || (childIter_ != nil && [childIter_ hasNext]);
}

- (EduStanfordNlpUtilLoggingLogRecordHandler *)next {
  if (!seenHead_) {
    seenHead_ = true;
    return [this$0_ head];
  }
  lastReturned_ = [((id<JavaUtilIterator>) nil_chk(childIter_)) next];
  return lastReturned_;
}

- (void)remove {
  if (!seenHead_) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"INTERNAL: this shouldn't happen...");
  }
  if (lastReturned_ == nil) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Called remove() before any elements returned");
  }
  if (childOnPrix_ != nil && lastReturned_ == [childOnPrix_ head]) {
    [((id<JavaUtilIterator>) nil_chk(childrenIter_)) remove];
  }
  else if (childIter_ != nil) {
    [childIter_ remove];
  }
  else {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"INTERNAL: not sure what we're removing");
  }
}

- (instancetype)initWithEduStanfordNlpUtilLoggingRedwood_RecordHandlerTree:(EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree *)outer$ {
  EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree_$1_initWithEduStanfordNlpUtilLoggingRedwood_RecordHandlerTree_(self, outer$);
  return self;
}

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaUtilIterator_forEachRemainingWithJavaUtilFunctionConsumer_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpUtilLoggingLogRecordHandler;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(hasNext);
  methods[1].selector = @selector(next);
  methods[2].selector = @selector(remove);
  methods[3].selector = @selector(initWithEduStanfordNlpUtilLoggingRedwood_RecordHandlerTree:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LEduStanfordNlpUtilLoggingRedwood_RecordHandlerTree;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "seenHead_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "childrenIter_", "LJavaUtilIterator;", .constantValue.asLong = 0, 0x12, -1, -1, 1, -1 },
    { "childOnPrix_", "LEduStanfordNlpUtilLoggingRedwood_RecordHandlerTree;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "childIter_", "LJavaUtilIterator;", .constantValue.asLong = 0, 0x2, -1, -1, 2, -1 },
    { "lastReturned_", "LEduStanfordNlpUtilLoggingLogRecordHandler;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpUtilLoggingRedwood_RecordHandlerTree;", "Ljava/util/Iterator<Ledu/stanford/nlp/util/logging/Redwood$RecordHandlerTree;>;", "Ljava/util/Iterator<Ledu/stanford/nlp/util/logging/LogRecordHandler;>;", "iterator", "Ljava/lang/Object;Ljava/util/Iterator<Ledu/stanford/nlp/util/logging/LogRecordHandler;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree_$1 = { "", "edu.stanford.nlp.util.logging", ptrTable, methods, fields, 7, 0x8008, 4, 6, 0, -1, 3, 4, -1 };
  return &_EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree_$1;
}

@end

void EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree_$1_initWithEduStanfordNlpUtilLoggingRedwood_RecordHandlerTree_(EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree_$1 *self, EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
  self->seenHead_ = outer$->isRoot_;
  self->childrenIter_ = [outer$ children];
  self->childOnPrix_ = [((id<JavaUtilIterator>) nil_chk(self->childrenIter_)) hasNext] ? [self->childrenIter_ next] : nil;
  self->childIter_ = self->childOnPrix_ == nil ? nil : [self->childOnPrix_ iterator];
  self->lastReturned_ = nil;
}

EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree_$1 *new_EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree_$1_initWithEduStanfordNlpUtilLoggingRedwood_RecordHandlerTree_(EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree *outer$) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree_$1, initWithEduStanfordNlpUtilLoggingRedwood_RecordHandlerTree_, outer$)
}

EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree_$1 *create_EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree_$1_initWithEduStanfordNlpUtilLoggingRedwood_RecordHandlerTree_(EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree *outer$) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree_$1, initWithEduStanfordNlpUtilLoggingRedwood_RecordHandlerTree_, outer$)
}

@implementation EduStanfordNlpUtilLoggingRedwood_Record

- (instancetype)initWithId:(id)content
         withNSObjectArray:(IOSObjectArray *)channels
                   withInt:(jint)depth
                  withLong:(jlong)timestamp {
  EduStanfordNlpUtilLoggingRedwood_Record_initWithId_withNSObjectArray_withInt_withLong_(self, content, channels, depth, timestamp);
  return self;
}

- (void)sort {
  EduStanfordNlpUtilLoggingRedwood_Record_sort(self);
}

- (jboolean)force {
  EduStanfordNlpUtilLoggingRedwood_Record_sort(self);
  return ((IOSObjectArray *) nil_chk(self->channels_))->size_ > 0 && IOSObjectArray_Get(self->channels_, 0) == JreLoadStatic(EduStanfordNlpUtilLoggingRedwood, FORCE);
}

- (IOSObjectArray *)channels {
  EduStanfordNlpUtilLoggingRedwood_Record_sort(self);
  return self->channels_;
}

- (NSString *)description {
  return JreStrcat("$@$I$$$J$JC", @"Record [content=", content_, @", depth=", depth_, @", channels=", JavaUtilArrays_toStringWithNSObjectArray_([self channels]), @", thread=", thread_, @", timesstamp=", timesstamp_, ']');
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithId:withNSObjectArray:withInt:withLong:);
  methods[1].selector = @selector(sort);
  methods[2].selector = @selector(force);
  methods[3].selector = @selector(channels);
  methods[4].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "content_", "LNSObject;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "channels_", "[LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "depth_", "I", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "timesstamp_", "J", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "thread_", "J", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "channelsSorted_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSObject;[LNSObject;IJ", "toString", "LEduStanfordNlpUtilLoggingRedwood;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilLoggingRedwood_Record = { "Record", "edu.stanford.nlp.util.logging", ptrTable, methods, fields, 7, 0x9, 5, 6, 2, -1, -1, -1, -1 };
  return &_EduStanfordNlpUtilLoggingRedwood_Record;
}

@end

void EduStanfordNlpUtilLoggingRedwood_Record_initWithId_withNSObjectArray_withInt_withLong_(EduStanfordNlpUtilLoggingRedwood_Record *self, id content, IOSObjectArray *channels, jint depth, jlong timestamp) {
  NSObject_init(self);
  self->thread_ = [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getId];
  self->channelsSorted_ = false;
  self->content_ = content;
  self->channels_ = channels;
  self->depth_ = depth;
  self->timesstamp_ = timestamp;
}

EduStanfordNlpUtilLoggingRedwood_Record *new_EduStanfordNlpUtilLoggingRedwood_Record_initWithId_withNSObjectArray_withInt_withLong_(id content, IOSObjectArray *channels, jint depth, jlong timestamp) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilLoggingRedwood_Record, initWithId_withNSObjectArray_withInt_withLong_, content, channels, depth, timestamp)
}

EduStanfordNlpUtilLoggingRedwood_Record *create_EduStanfordNlpUtilLoggingRedwood_Record_initWithId_withNSObjectArray_withInt_withLong_(id content, IOSObjectArray *channels, jint depth, jlong timestamp) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilLoggingRedwood_Record, initWithId_withNSObjectArray_withInt_withLong_, content, channels, depth, timestamp)
}

void EduStanfordNlpUtilLoggingRedwood_Record_sort(EduStanfordNlpUtilLoggingRedwood_Record *self) {
  if (!self->channelsSorted_ && ((IOSObjectArray *) nil_chk(self->channels_))->size_ == 2) {
    if ([IOSObjectArray_Get(nil_chk(self->channels_), 1) isKindOfClass:[EduStanfordNlpUtilLoggingRedwood_Flag class]] && !([IOSObjectArray_Get(self->channels_, 0) isKindOfClass:[EduStanfordNlpUtilLoggingRedwood_Flag class]])) {
      id tmp = IOSObjectArray_Get(self->channels_, 0);
      (void) IOSObjectArray_Set(self->channels_, 0, IOSObjectArray_Get(self->channels_, 1));
      (void) IOSObjectArray_Set(self->channels_, 1, tmp);
    }
    else if (!([IOSObjectArray_Get(self->channels_, 0) isKindOfClass:[EduStanfordNlpUtilLoggingRedwood_Flag class]]) && !([IOSObjectArray_Get(self->channels_, 1) isKindOfClass:[EduStanfordNlpUtilLoggingRedwood_Flag class]]) && [((NSString *) nil_chk([nil_chk(IOSObjectArray_Get(self->channels_, 0)) description])) compareToWithId:[nil_chk(IOSObjectArray_Get(self->channels_, 1)) description]] > 0) {
      id tmp = IOSObjectArray_Get(self->channels_, 0);
      (void) IOSObjectArray_Set(self->channels_, 0, IOSObjectArray_Get(self->channels_, 1));
      (void) IOSObjectArray_Set(self->channels_, 1, tmp);
    }
  }
  else if (!self->channelsSorted_ && ((IOSObjectArray *) nil_chk(self->channels_))->size_ > 2) {
    JavaUtilArrays_sortWithNSObjectArray_withJavaUtilComparator_(self->channels_, JreLoadStatic(EduStanfordNlpUtilLoggingRedwood_Record_$Lambda$1, instance));
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpUtilLoggingRedwood_Record)

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpUtilLoggingRedwood_Record_$Lambda$1)

@implementation EduStanfordNlpUtilLoggingRedwood_Record_$Lambda$1

- (jint)compareWithId:(id)a
               withId:(id)b {
  if (a == JreLoadStatic(EduStanfordNlpUtilLoggingRedwood, FORCE)) {
    return -1;
  }
  else if (b == JreLoadStatic(EduStanfordNlpUtilLoggingRedwood, FORCE)) {
    return 1;
  }
  else if ([a isKindOfClass:[EduStanfordNlpUtilLoggingRedwood_Flag class]] && !([b isKindOfClass:[EduStanfordNlpUtilLoggingRedwood_Flag class]])) {
    return -1;
  }
  else if ([b isKindOfClass:[EduStanfordNlpUtilLoggingRedwood_Flag class]] && !([a isKindOfClass:[EduStanfordNlpUtilLoggingRedwood_Flag class]])) {
    return 1;
  }
  else {
    return [((NSString *) nil_chk([nil_chk(a) description])) compareToWithId:[nil_chk(b) description]];
  }
}

- (id<JavaUtilComparator>)reversed {
  return JavaUtilComparator_reversed(self);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilComparator:(id<JavaUtilComparator>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilComparator_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0
                                             withJavaUtilComparator:(id<JavaUtilComparator>)arg1 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_withJavaUtilComparator_(self, arg0, arg1);
}

- (id<JavaUtilComparator>)thenComparingDoubleWithJavaUtilFunctionToDoubleFunction:(id<JavaUtilFunctionToDoubleFunction>)arg0 {
  return JavaUtilComparator_thenComparingDoubleWithJavaUtilFunctionToDoubleFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingIntWithJavaUtilFunctionToIntFunction:(id<JavaUtilFunctionToIntFunction>)arg0 {
  return JavaUtilComparator_thenComparingIntWithJavaUtilFunctionToIntFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingLongWithJavaUtilFunctionToLongFunction:(id<JavaUtilFunctionToLongFunction>)arg0 {
  return JavaUtilComparator_thenComparingLongWithJavaUtilFunctionToLongFunction_(self, arg0);
}

+ (void)initialize {
  if (self == [EduStanfordNlpUtilLoggingRedwood_Record_$Lambda$1 class]) {
    EduStanfordNlpUtilLoggingRedwood_Record_$Lambda$1_instance = new_EduStanfordNlpUtilLoggingRedwood_Record_$Lambda$1_init();
    J2OBJC_SET_INITIALIZED(EduStanfordNlpUtilLoggingRedwood_Record_$Lambda$1)
  }
}

@end

void EduStanfordNlpUtilLoggingRedwood_Record_$Lambda$1_init(EduStanfordNlpUtilLoggingRedwood_Record_$Lambda$1 *self) {
  NSObject_init(self);
}

EduStanfordNlpUtilLoggingRedwood_Record_$Lambda$1 *new_EduStanfordNlpUtilLoggingRedwood_Record_$Lambda$1_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilLoggingRedwood_Record_$Lambda$1, init)
}

EduStanfordNlpUtilLoggingRedwood_Record_$Lambda$1 *create_EduStanfordNlpUtilLoggingRedwood_Record_$Lambda$1_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilLoggingRedwood_Record_$Lambda$1, init)
}

@implementation EduStanfordNlpUtilLoggingRedwood_ConsoleHandler

- (instancetype)initWithJavaIoPrintStream:(JavaIoPrintStream *)stream {
  EduStanfordNlpUtilLoggingRedwood_ConsoleHandler_initWithJavaIoPrintStream_(self, stream);
  return self;
}

- (void)printWithNSObjectArray:(IOSObjectArray *)channels
                  withNSString:(NSString *)line {
  [((JavaIoPrintStream *) nil_chk(stream_)) printWithNSString:line];
  [((JavaIoPrintStream *) nil_chk(stream_)) flush];
}

- (jboolean)supportsAnsi {
  return true;
}

+ (EduStanfordNlpUtilLoggingRedwood_ConsoleHandler *)out {
  return EduStanfordNlpUtilLoggingRedwood_ConsoleHandler_out();
}

+ (EduStanfordNlpUtilLoggingRedwood_ConsoleHandler *)err {
  return EduStanfordNlpUtilLoggingRedwood_ConsoleHandler_err();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpUtilLoggingRedwood_ConsoleHandler;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpUtilLoggingRedwood_ConsoleHandler;", 0x9, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaIoPrintStream:);
  methods[1].selector = @selector(printWithNSObjectArray:withNSString:);
  methods[2].selector = @selector(supportsAnsi);
  methods[3].selector = @selector(out);
  methods[4].selector = @selector(err);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "stream_", "LJavaIoPrintStream;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoPrintStream;", "print", "[LNSObject;LNSString;", "LEduStanfordNlpUtilLoggingRedwood;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilLoggingRedwood_ConsoleHandler = { "ConsoleHandler", "edu.stanford.nlp.util.logging", ptrTable, methods, fields, 7, 0x9, 5, 1, 3, -1, -1, -1, -1 };
  return &_EduStanfordNlpUtilLoggingRedwood_ConsoleHandler;
}

@end

void EduStanfordNlpUtilLoggingRedwood_ConsoleHandler_initWithJavaIoPrintStream_(EduStanfordNlpUtilLoggingRedwood_ConsoleHandler *self, JavaIoPrintStream *stream) {
  EduStanfordNlpUtilLoggingOutputHandler_init(self);
  self->stream_ = stream;
}

EduStanfordNlpUtilLoggingRedwood_ConsoleHandler *new_EduStanfordNlpUtilLoggingRedwood_ConsoleHandler_initWithJavaIoPrintStream_(JavaIoPrintStream *stream) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilLoggingRedwood_ConsoleHandler, initWithJavaIoPrintStream_, stream)
}

EduStanfordNlpUtilLoggingRedwood_ConsoleHandler *create_EduStanfordNlpUtilLoggingRedwood_ConsoleHandler_initWithJavaIoPrintStream_(JavaIoPrintStream *stream) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilLoggingRedwood_ConsoleHandler, initWithJavaIoPrintStream_, stream)
}

EduStanfordNlpUtilLoggingRedwood_ConsoleHandler *EduStanfordNlpUtilLoggingRedwood_ConsoleHandler_out() {
  EduStanfordNlpUtilLoggingRedwood_ConsoleHandler_initialize();
  return new_EduStanfordNlpUtilLoggingRedwood_ConsoleHandler_initWithJavaIoPrintStream_(JreLoadStatic(EduStanfordNlpUtilLoggingRedwood, realSysOut));
}

EduStanfordNlpUtilLoggingRedwood_ConsoleHandler *EduStanfordNlpUtilLoggingRedwood_ConsoleHandler_err() {
  EduStanfordNlpUtilLoggingRedwood_ConsoleHandler_initialize();
  return new_EduStanfordNlpUtilLoggingRedwood_ConsoleHandler_initWithJavaIoPrintStream_(JreLoadStatic(EduStanfordNlpUtilLoggingRedwood, realSysErr));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpUtilLoggingRedwood_ConsoleHandler)

@implementation EduStanfordNlpUtilLoggingRedwood_FileHandler

- (instancetype)initWithNSString:(NSString *)filename {
  EduStanfordNlpUtilLoggingRedwood_FileHandler_initWithNSString_(self, filename);
  return self;
}

- (void)printWithNSObjectArray:(IOSObjectArray *)channels
                  withNSString:(NSString *)line {
  [((JavaIoPrintWriter *) nil_chk(printWriter_)) writeWithNSString:line == nil ? @"null" : line];
  [((JavaIoPrintWriter *) nil_chk(printWriter_)) flush];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(printWithNSObjectArray:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "printWriter_", "LJavaIoPrintWriter;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "print", "[LNSObject;LNSString;", "LEduStanfordNlpUtilLoggingRedwood;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilLoggingRedwood_FileHandler = { "FileHandler", "edu.stanford.nlp.util.logging", ptrTable, methods, fields, 7, 0x9, 2, 1, 3, -1, -1, -1, -1 };
  return &_EduStanfordNlpUtilLoggingRedwood_FileHandler;
}

@end

void EduStanfordNlpUtilLoggingRedwood_FileHandler_initWithNSString_(EduStanfordNlpUtilLoggingRedwood_FileHandler *self, NSString *filename) {
  EduStanfordNlpUtilLoggingOutputHandler_init(self);
  @try {
    self->printWriter_ = new_JavaIoPrintWriter_initWithJavaIoWriter_(new_JavaIoBufferedWriter_initWithJavaIoWriter_(new_JavaIoOutputStreamWriter_initWithJavaIoOutputStream_withNSString_(new_JavaIoFileOutputStream_initWithNSString_(filename), @"utf-8")));
  }
  @catch (JavaIoIOException *e) {
    EduStanfordNlpUtilLoggingRedwood_logWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ JreLoadEnum(EduStanfordNlpUtilLoggingRedwood_Flag, ERROR), e } count:2 type:NSObject_class_()]);
  }
}

EduStanfordNlpUtilLoggingRedwood_FileHandler *new_EduStanfordNlpUtilLoggingRedwood_FileHandler_initWithNSString_(NSString *filename) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilLoggingRedwood_FileHandler, initWithNSString_, filename)
}

EduStanfordNlpUtilLoggingRedwood_FileHandler *create_EduStanfordNlpUtilLoggingRedwood_FileHandler_initWithNSString_(NSString *filename) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilLoggingRedwood_FileHandler, initWithNSString_, filename)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpUtilLoggingRedwood_FileHandler)

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpUtilLoggingRedwood_Util)

EduStanfordNlpUtilLoggingRedwood_Flag *EduStanfordNlpUtilLoggingRedwood_Util_ERR;
EduStanfordNlpUtilLoggingRedwood_Flag *EduStanfordNlpUtilLoggingRedwood_Util_WARN;
EduStanfordNlpUtilLoggingRedwood_Flag *EduStanfordNlpUtilLoggingRedwood_Util_DBG;
EduStanfordNlpUtilLoggingRedwood_Flag *EduStanfordNlpUtilLoggingRedwood_Util_FORCE;
EduStanfordNlpUtilLoggingRedwood_Flag *EduStanfordNlpUtilLoggingRedwood_Util_STDOUT;
EduStanfordNlpUtilLoggingRedwood_Flag *EduStanfordNlpUtilLoggingRedwood_Util_STDERR;
EduStanfordNlpUtilLoggingStyle *EduStanfordNlpUtilLoggingRedwood_Util_BOLD;
EduStanfordNlpUtilLoggingStyle *EduStanfordNlpUtilLoggingRedwood_Util_DIM;
EduStanfordNlpUtilLoggingStyle *EduStanfordNlpUtilLoggingRedwood_Util_ITALIC;
EduStanfordNlpUtilLoggingStyle *EduStanfordNlpUtilLoggingRedwood_Util_UNDERLINE;
EduStanfordNlpUtilLoggingStyle *EduStanfordNlpUtilLoggingRedwood_Util_BLINK;
EduStanfordNlpUtilLoggingStyle *EduStanfordNlpUtilLoggingRedwood_Util_CROSS_OUT;
EduStanfordNlpUtilLoggingColor *EduStanfordNlpUtilLoggingRedwood_Util_BLACK;
EduStanfordNlpUtilLoggingColor *EduStanfordNlpUtilLoggingRedwood_Util_RED;
EduStanfordNlpUtilLoggingColor *EduStanfordNlpUtilLoggingRedwood_Util_GREEN;
EduStanfordNlpUtilLoggingColor *EduStanfordNlpUtilLoggingRedwood_Util_YELLOW;
EduStanfordNlpUtilLoggingColor *EduStanfordNlpUtilLoggingRedwood_Util_BLUE;
EduStanfordNlpUtilLoggingColor *EduStanfordNlpUtilLoggingRedwood_Util_MAGENTA;
EduStanfordNlpUtilLoggingColor *EduStanfordNlpUtilLoggingRedwood_Util_CYAN;
EduStanfordNlpUtilLoggingColor *EduStanfordNlpUtilLoggingRedwood_Util_WHITE;

@implementation EduStanfordNlpUtilLoggingRedwood_Util

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpUtilLoggingRedwood_Util_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (IOSObjectArray *)revConcatWithNSObjectArray:(IOSObjectArray *)B
                             withNSObjectArray:(IOSObjectArray *)A {
  return EduStanfordNlpUtilLoggingRedwood_Util_revConcatWithNSObjectArray_withNSObjectArray_(B, A);
}

+ (void)prettyLogWithId:(id)obj {
  EduStanfordNlpUtilLoggingRedwood_Util_prettyLogWithId_(obj);
}

+ (void)prettyLogWithNSString:(NSString *)description_
                       withId:(id)obj {
  EduStanfordNlpUtilLoggingRedwood_Util_prettyLogWithNSString_withId_(description_, obj);
}

+ (void)logWithNSObjectArray:(IOSObjectArray *)objs {
  EduStanfordNlpUtilLoggingRedwood_Util_logWithNSObjectArray_(objs);
}

+ (void)logfWithNSString:(NSString *)format
       withNSObjectArray:(IOSObjectArray *)args {
  EduStanfordNlpUtilLoggingRedwood_Util_logfWithNSString_withNSObjectArray_(format, args);
}

+ (void)warnWithNSObjectArray:(IOSObjectArray *)objs {
  EduStanfordNlpUtilLoggingRedwood_Util_warnWithNSObjectArray_(objs);
}

+ (void)debugWithNSObjectArray:(IOSObjectArray *)objs {
  EduStanfordNlpUtilLoggingRedwood_Util_debugWithNSObjectArray_(objs);
}

+ (void)errWithNSObjectArray:(IOSObjectArray *)objs {
  EduStanfordNlpUtilLoggingRedwood_Util_errWithNSObjectArray_(objs);
}

+ (void)fatalWithNSObjectArray:(IOSObjectArray *)objs {
  EduStanfordNlpUtilLoggingRedwood_Util_fatalWithNSObjectArray_(objs);
}

+ (void)runtimeExceptionWithNSObjectArray:(IOSObjectArray *)objs {
  EduStanfordNlpUtilLoggingRedwood_Util_runtimeExceptionWithNSObjectArray_(objs);
}

+ (void)printlnWithId:(id)o {
  EduStanfordNlpUtilLoggingRedwood_Util_printlnWithId_(o);
}

+ (void)exitWithInt:(jint)exitCode {
  EduStanfordNlpUtilLoggingRedwood_Util_exitWithInt_(exitCode);
}

+ (void)exit {
  EduStanfordNlpUtilLoggingRedwood_Util_exit();
}

+ (JavaLangRuntimeException *)failWithId:(id)msg {
  return EduStanfordNlpUtilLoggingRedwood_Util_failWithId_(msg);
}

+ (JavaLangRuntimeException *)fail {
  return EduStanfordNlpUtilLoggingRedwood_Util_fail();
}

+ (void)startTrackWithNSObjectArray:(IOSObjectArray *)objs {
  EduStanfordNlpUtilLoggingRedwood_Util_startTrackWithNSObjectArray_(objs);
}

+ (void)forceTrackWithNSString:(NSString *)title {
  EduStanfordNlpUtilLoggingRedwood_Util_forceTrackWithNSString_(title);
}

+ (void)endTrackWithNSString:(NSString *)check {
  EduStanfordNlpUtilLoggingRedwood_Util_endTrackWithNSString_(check);
}

+ (void)endTrack {
  EduStanfordNlpUtilLoggingRedwood_Util_endTrack();
}

+ (void)endTrackIfOpenWithNSString:(NSString *)check {
  EduStanfordNlpUtilLoggingRedwood_Util_endTrackIfOpenWithNSString_(check);
}

+ (void)endTracksUntilWithNSString:(NSString *)check {
  EduStanfordNlpUtilLoggingRedwood_Util_endTracksUntilWithNSString_(check);
}

+ (void)endTracksToWithNSString:(NSString *)check {
  EduStanfordNlpUtilLoggingRedwood_Util_endTracksToWithNSString_(check);
}

+ (void)startThreadsWithNSString:(NSString *)title {
  EduStanfordNlpUtilLoggingRedwood_Util_startThreadsWithNSString_(title);
}

+ (void)finishThread {
  EduStanfordNlpUtilLoggingRedwood_Util_finishThread();
}

+ (void)endThreadsWithNSString:(NSString *)check {
  EduStanfordNlpUtilLoggingRedwood_Util_endThreadsWithNSString_(check);
}

+ (EduStanfordNlpUtilLoggingRedwood_RedwoodChannels *)channelsWithNSObjectArray:(IOSObjectArray *)channels {
  return EduStanfordNlpUtilLoggingRedwood_Util_channelsWithNSObjectArray_(channels);
}

+ (id<JavaLangIterable>)threadWithNSString:(NSString *)title
                      withJavaLangIterable:(id<JavaLangIterable>)runnables {
  return EduStanfordNlpUtilLoggingRedwood_Util_threadWithNSString_withJavaLangIterable_(title, runnables);
}

+ (id<JavaLangIterable>)threadWithJavaLangIterable:(id<JavaLangIterable>)runnables {
  return EduStanfordNlpUtilLoggingRedwood_Util_threadWithJavaLangIterable_(runnables);
}

+ (void)threadAndRunWithNSString:(NSString *)title
            withJavaLangIterable:(id<JavaLangIterable>)runnables
                         withInt:(jint)numThreads {
  EduStanfordNlpUtilLoggingRedwood_Util_threadAndRunWithNSString_withJavaLangIterable_withInt_(title, runnables, numThreads);
}

+ (void)threadAndRunWithNSString:(NSString *)title
            withJavaLangIterable:(id<JavaLangIterable>)runnables {
  EduStanfordNlpUtilLoggingRedwood_Util_threadAndRunWithNSString_withJavaLangIterable_(title, runnables);
}

+ (void)threadAndRunWithJavaLangIterable:(id<JavaLangIterable>)runnables
                                 withInt:(jint)numThreads {
  EduStanfordNlpUtilLoggingRedwood_Util_threadAndRunWithJavaLangIterable_withInt_(runnables, numThreads);
}

+ (void)threadAndRunWithJavaLangIterable:(id<JavaLangIterable>)runnables {
  EduStanfordNlpUtilLoggingRedwood_Util_threadAndRunWithJavaLangIterable_(runnables);
}

+ (void)printChannelsWithInt:(jint)width {
  EduStanfordNlpUtilLoggingRedwood_Util_printChannelsWithInt_(width);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LNSObject;", 0x8a, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 2, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x89, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x89, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x89, 9, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x89, 10, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x89, 11, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x89, 12, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x89, 13, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 14, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangRuntimeException;", 0x9, 17, 3, -1, -1, -1, -1 },
    { NULL, "LJavaLangRuntimeException;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x89, 18, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 19, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 21, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 22, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 23, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 24, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 25, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 26, 20, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpUtilLoggingRedwood_RedwoodChannels;", 0x89, 27, 6, -1, -1, -1, -1 },
    { NULL, "LJavaLangIterable;", 0x9, 28, 29, -1, 30, -1, -1 },
    { NULL, "LJavaLangIterable;", 0x9, 28, 31, -1, 32, -1, -1 },
    { NULL, "V", 0x9, 33, 34, -1, 35, -1, -1 },
    { NULL, "V", 0x9, 33, 29, -1, 36, -1, -1 },
    { NULL, "V", 0x9, 33, 37, -1, 38, -1, -1 },
    { NULL, "V", 0x9, 33, 31, -1, 39, -1, -1 },
    { NULL, "V", 0x9, 40, 16, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(revConcatWithNSObjectArray:withNSObjectArray:);
  methods[2].selector = @selector(prettyLogWithId:);
  methods[3].selector = @selector(prettyLogWithNSString:withId:);
  methods[4].selector = @selector(logWithNSObjectArray:);
  methods[5].selector = @selector(logfWithNSString:withNSObjectArray:);
  methods[6].selector = @selector(warnWithNSObjectArray:);
  methods[7].selector = @selector(debugWithNSObjectArray:);
  methods[8].selector = @selector(errWithNSObjectArray:);
  methods[9].selector = @selector(fatalWithNSObjectArray:);
  methods[10].selector = @selector(runtimeExceptionWithNSObjectArray:);
  methods[11].selector = @selector(printlnWithId:);
  methods[12].selector = @selector(exitWithInt:);
  methods[13].selector = @selector(exit);
  methods[14].selector = @selector(failWithId:);
  methods[15].selector = @selector(fail);
  methods[16].selector = @selector(startTrackWithNSObjectArray:);
  methods[17].selector = @selector(forceTrackWithNSString:);
  methods[18].selector = @selector(endTrackWithNSString:);
  methods[19].selector = @selector(endTrack);
  methods[20].selector = @selector(endTrackIfOpenWithNSString:);
  methods[21].selector = @selector(endTracksUntilWithNSString:);
  methods[22].selector = @selector(endTracksToWithNSString:);
  methods[23].selector = @selector(startThreadsWithNSString:);
  methods[24].selector = @selector(finishThread);
  methods[25].selector = @selector(endThreadsWithNSString:);
  methods[26].selector = @selector(channelsWithNSObjectArray:);
  methods[27].selector = @selector(threadWithNSString:withJavaLangIterable:);
  methods[28].selector = @selector(threadWithJavaLangIterable:);
  methods[29].selector = @selector(threadAndRunWithNSString:withJavaLangIterable:withInt:);
  methods[30].selector = @selector(threadAndRunWithNSString:withJavaLangIterable:);
  methods[31].selector = @selector(threadAndRunWithJavaLangIterable:withInt:);
  methods[32].selector = @selector(threadAndRunWithJavaLangIterable:);
  methods[33].selector = @selector(printChannelsWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ERR", "LEduStanfordNlpUtilLoggingRedwood_Flag;", .constantValue.asLong = 0, 0x19, -1, 41, -1, -1 },
    { "WARN", "LEduStanfordNlpUtilLoggingRedwood_Flag;", .constantValue.asLong = 0, 0x19, -1, 42, -1, -1 },
    { "DBG", "LEduStanfordNlpUtilLoggingRedwood_Flag;", .constantValue.asLong = 0, 0x19, -1, 43, -1, -1 },
    { "FORCE", "LEduStanfordNlpUtilLoggingRedwood_Flag;", .constantValue.asLong = 0, 0x19, -1, 44, -1, -1 },
    { "STDOUT", "LEduStanfordNlpUtilLoggingRedwood_Flag;", .constantValue.asLong = 0, 0x19, -1, 45, -1, -1 },
    { "STDERR", "LEduStanfordNlpUtilLoggingRedwood_Flag;", .constantValue.asLong = 0, 0x19, -1, 46, -1, -1 },
    { "BOLD", "LEduStanfordNlpUtilLoggingStyle;", .constantValue.asLong = 0, 0x19, -1, 47, -1, -1 },
    { "DIM", "LEduStanfordNlpUtilLoggingStyle;", .constantValue.asLong = 0, 0x19, -1, 48, -1, -1 },
    { "ITALIC", "LEduStanfordNlpUtilLoggingStyle;", .constantValue.asLong = 0, 0x19, -1, 49, -1, -1 },
    { "UNDERLINE", "LEduStanfordNlpUtilLoggingStyle;", .constantValue.asLong = 0, 0x19, -1, 50, -1, -1 },
    { "BLINK", "LEduStanfordNlpUtilLoggingStyle;", .constantValue.asLong = 0, 0x19, -1, 51, -1, -1 },
    { "CROSS_OUT", "LEduStanfordNlpUtilLoggingStyle;", .constantValue.asLong = 0, 0x19, -1, 52, -1, -1 },
    { "BLACK", "LEduStanfordNlpUtilLoggingColor;", .constantValue.asLong = 0, 0x19, -1, 53, -1, -1 },
    { "RED", "LEduStanfordNlpUtilLoggingColor;", .constantValue.asLong = 0, 0x19, -1, 54, -1, -1 },
    { "GREEN", "LEduStanfordNlpUtilLoggingColor;", .constantValue.asLong = 0, 0x19, -1, 55, -1, -1 },
    { "YELLOW", "LEduStanfordNlpUtilLoggingColor;", .constantValue.asLong = 0, 0x19, -1, 56, -1, -1 },
    { "BLUE", "LEduStanfordNlpUtilLoggingColor;", .constantValue.asLong = 0, 0x19, -1, 57, -1, -1 },
    { "MAGENTA", "LEduStanfordNlpUtilLoggingColor;", .constantValue.asLong = 0, 0x19, -1, 58, -1, -1 },
    { "CYAN", "LEduStanfordNlpUtilLoggingColor;", .constantValue.asLong = 0, 0x19, -1, 59, -1, -1 },
    { "WHITE", "LEduStanfordNlpUtilLoggingColor;", .constantValue.asLong = 0, 0x19, -1, 60, -1, -1 },
  };
  static const void *ptrTable[] = { "revConcat", "[LNSObject;[LNSObject;", "prettyLog", "LNSObject;", "LNSString;LNSObject;", "log", "[LNSObject;", "logf", "LNSString;[LNSObject;", "warn", "debug", "err", "fatal", "runtimeException", "println", "exit", "I", "fail", "startTrack", "forceTrack", "LNSString;", "endTrack", "endTrackIfOpen", "endTracksUntil", "endTracksTo", "startThreads", "endThreads", "channels", "thread", "LNSString;LJavaLangIterable;", "(Ljava/lang/String;Ljava/lang/Iterable<Ljava/lang/Runnable;>;)Ljava/lang/Iterable<Ljava/lang/Runnable;>;", "LJavaLangIterable;", "(Ljava/lang/Iterable<Ljava/lang/Runnable;>;)Ljava/lang/Iterable<Ljava/lang/Runnable;>;", "threadAndRun", "LNSString;LJavaLangIterable;I", "(Ljava/lang/String;Ljava/lang/Iterable<Ljava/lang/Runnable;>;I)V", "(Ljava/lang/String;Ljava/lang/Iterable<Ljava/lang/Runnable;>;)V", "LJavaLangIterable;I", "(Ljava/lang/Iterable<Ljava/lang/Runnable;>;I)V", "(Ljava/lang/Iterable<Ljava/lang/Runnable;>;)V", "printChannels", &EduStanfordNlpUtilLoggingRedwood_Util_ERR, &EduStanfordNlpUtilLoggingRedwood_Util_WARN, &EduStanfordNlpUtilLoggingRedwood_Util_DBG, &EduStanfordNlpUtilLoggingRedwood_Util_FORCE, &EduStanfordNlpUtilLoggingRedwood_Util_STDOUT, &EduStanfordNlpUtilLoggingRedwood_Util_STDERR, &EduStanfordNlpUtilLoggingRedwood_Util_BOLD, &EduStanfordNlpUtilLoggingRedwood_Util_DIM, &EduStanfordNlpUtilLoggingRedwood_Util_ITALIC, &EduStanfordNlpUtilLoggingRedwood_Util_UNDERLINE, &EduStanfordNlpUtilLoggingRedwood_Util_BLINK, &EduStanfordNlpUtilLoggingRedwood_Util_CROSS_OUT, &EduStanfordNlpUtilLoggingRedwood_Util_BLACK, &EduStanfordNlpUtilLoggingRedwood_Util_RED, &EduStanfordNlpUtilLoggingRedwood_Util_GREEN, &EduStanfordNlpUtilLoggingRedwood_Util_YELLOW, &EduStanfordNlpUtilLoggingRedwood_Util_BLUE, &EduStanfordNlpUtilLoggingRedwood_Util_MAGENTA, &EduStanfordNlpUtilLoggingRedwood_Util_CYAN, &EduStanfordNlpUtilLoggingRedwood_Util_WHITE, "LEduStanfordNlpUtilLoggingRedwood;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilLoggingRedwood_Util = { "Util", "edu.stanford.nlp.util.logging", ptrTable, methods, fields, 7, 0x9, 34, 20, 61, -1, -1, -1, -1 };
  return &_EduStanfordNlpUtilLoggingRedwood_Util;
}

+ (void)initialize {
  if (self == [EduStanfordNlpUtilLoggingRedwood_Util class]) {
    EduStanfordNlpUtilLoggingRedwood_Util_ERR = JreLoadEnum(EduStanfordNlpUtilLoggingRedwood_Flag, ERROR);
    EduStanfordNlpUtilLoggingRedwood_Util_WARN = JreLoadEnum(EduStanfordNlpUtilLoggingRedwood_Flag, WARN);
    EduStanfordNlpUtilLoggingRedwood_Util_DBG = JreLoadEnum(EduStanfordNlpUtilLoggingRedwood_Flag, DEBUG);
    EduStanfordNlpUtilLoggingRedwood_Util_FORCE = JreLoadEnum(EduStanfordNlpUtilLoggingRedwood_Flag, FORCE);
    EduStanfordNlpUtilLoggingRedwood_Util_STDOUT = JreLoadEnum(EduStanfordNlpUtilLoggingRedwood_Flag, STDOUT);
    EduStanfordNlpUtilLoggingRedwood_Util_STDERR = JreLoadEnum(EduStanfordNlpUtilLoggingRedwood_Flag, STDERR);
    EduStanfordNlpUtilLoggingRedwood_Util_BOLD = JreLoadEnum(EduStanfordNlpUtilLoggingStyle, BOLD);
    EduStanfordNlpUtilLoggingRedwood_Util_DIM = JreLoadEnum(EduStanfordNlpUtilLoggingStyle, DIM);
    EduStanfordNlpUtilLoggingRedwood_Util_ITALIC = JreLoadEnum(EduStanfordNlpUtilLoggingStyle, ITALIC);
    EduStanfordNlpUtilLoggingRedwood_Util_UNDERLINE = JreLoadEnum(EduStanfordNlpUtilLoggingStyle, UNDERLINE);
    EduStanfordNlpUtilLoggingRedwood_Util_BLINK = JreLoadEnum(EduStanfordNlpUtilLoggingStyle, BLINK);
    EduStanfordNlpUtilLoggingRedwood_Util_CROSS_OUT = JreLoadEnum(EduStanfordNlpUtilLoggingStyle, CROSS_OUT);
    EduStanfordNlpUtilLoggingRedwood_Util_BLACK = JreLoadEnum(EduStanfordNlpUtilLoggingColor, BLACK);
    EduStanfordNlpUtilLoggingRedwood_Util_RED = JreLoadEnum(EduStanfordNlpUtilLoggingColor, RED);
    EduStanfordNlpUtilLoggingRedwood_Util_GREEN = JreLoadEnum(EduStanfordNlpUtilLoggingColor, GREEN);
    EduStanfordNlpUtilLoggingRedwood_Util_YELLOW = JreLoadEnum(EduStanfordNlpUtilLoggingColor, YELLOW);
    EduStanfordNlpUtilLoggingRedwood_Util_BLUE = JreLoadEnum(EduStanfordNlpUtilLoggingColor, BLUE);
    EduStanfordNlpUtilLoggingRedwood_Util_MAGENTA = JreLoadEnum(EduStanfordNlpUtilLoggingColor, MAGENTA);
    EduStanfordNlpUtilLoggingRedwood_Util_CYAN = JreLoadEnum(EduStanfordNlpUtilLoggingColor, CYAN);
    EduStanfordNlpUtilLoggingRedwood_Util_WHITE = JreLoadEnum(EduStanfordNlpUtilLoggingColor, WHITE);
    J2OBJC_SET_INITIALIZED(EduStanfordNlpUtilLoggingRedwood_Util)
  }
}

@end

void EduStanfordNlpUtilLoggingRedwood_Util_init(EduStanfordNlpUtilLoggingRedwood_Util *self) {
  NSObject_init(self);
}

EduStanfordNlpUtilLoggingRedwood_Util *new_EduStanfordNlpUtilLoggingRedwood_Util_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilLoggingRedwood_Util, init)
}

EduStanfordNlpUtilLoggingRedwood_Util *create_EduStanfordNlpUtilLoggingRedwood_Util_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilLoggingRedwood_Util, init)
}

IOSObjectArray *EduStanfordNlpUtilLoggingRedwood_Util_revConcatWithNSObjectArray_withNSObjectArray_(IOSObjectArray *B, IOSObjectArray *A) {
  EduStanfordNlpUtilLoggingRedwood_Util_initialize();
  IOSObjectArray *C = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(A))->size_ + ((IOSObjectArray *) nil_chk(B))->size_ type:NSObject_class_()];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(A, 0, C, 0, A->size_);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(B, 0, C, A->size_, B->size_);
  return C;
}

void EduStanfordNlpUtilLoggingRedwood_Util_prettyLogWithId_(id obj) {
  EduStanfordNlpUtilLoggingRedwood_Util_initialize();
  EduStanfordNlpUtilLoggingPrettyLogger_logWithId_(obj);
}

void EduStanfordNlpUtilLoggingRedwood_Util_prettyLogWithNSString_withId_(NSString *description_, id obj) {
  EduStanfordNlpUtilLoggingRedwood_Util_initialize();
  EduStanfordNlpUtilLoggingPrettyLogger_logWithNSString_withId_(description_, obj);
}

void EduStanfordNlpUtilLoggingRedwood_Util_logWithNSObjectArray_(IOSObjectArray *objs) {
  EduStanfordNlpUtilLoggingRedwood_Util_initialize();
  EduStanfordNlpUtilLoggingRedwood_logWithNSObjectArray_(objs);
}

void EduStanfordNlpUtilLoggingRedwood_Util_logfWithNSString_withNSObjectArray_(NSString *format, IOSObjectArray *args) {
  EduStanfordNlpUtilLoggingRedwood_Util_initialize();
  EduStanfordNlpUtilLoggingRedwood_logfWithNSString_withNSObjectArray_(format, args);
}

void EduStanfordNlpUtilLoggingRedwood_Util_warnWithNSObjectArray_(IOSObjectArray *objs) {
  EduStanfordNlpUtilLoggingRedwood_Util_initialize();
  EduStanfordNlpUtilLoggingRedwood_logWithNSObjectArray_(EduStanfordNlpUtilLoggingRedwood_Util_revConcatWithNSObjectArray_withNSObjectArray_(objs, [IOSObjectArray newArrayWithObjects:(id[]){ EduStanfordNlpUtilLoggingRedwood_Util_WARN } count:1 type:NSObject_class_()]));
}

void EduStanfordNlpUtilLoggingRedwood_Util_debugWithNSObjectArray_(IOSObjectArray *objs) {
  EduStanfordNlpUtilLoggingRedwood_Util_initialize();
  EduStanfordNlpUtilLoggingRedwood_logWithNSObjectArray_(EduStanfordNlpUtilLoggingRedwood_Util_revConcatWithNSObjectArray_withNSObjectArray_(objs, [IOSObjectArray newArrayWithObjects:(id[]){ EduStanfordNlpUtilLoggingRedwood_Util_DBG } count:1 type:NSObject_class_()]));
}

void EduStanfordNlpUtilLoggingRedwood_Util_errWithNSObjectArray_(IOSObjectArray *objs) {
  EduStanfordNlpUtilLoggingRedwood_Util_initialize();
  EduStanfordNlpUtilLoggingRedwood_logWithNSObjectArray_(EduStanfordNlpUtilLoggingRedwood_Util_revConcatWithNSObjectArray_withNSObjectArray_(objs, [IOSObjectArray newArrayWithObjects:(id[]){ EduStanfordNlpUtilLoggingRedwood_Util_ERR, EduStanfordNlpUtilLoggingRedwood_Util_FORCE } count:2 type:NSObject_class_()]));
}

void EduStanfordNlpUtilLoggingRedwood_Util_fatalWithNSObjectArray_(IOSObjectArray *objs) {
  EduStanfordNlpUtilLoggingRedwood_Util_initialize();
  EduStanfordNlpUtilLoggingRedwood_logWithNSObjectArray_(EduStanfordNlpUtilLoggingRedwood_Util_revConcatWithNSObjectArray_withNSObjectArray_(objs, [IOSObjectArray newArrayWithObjects:(id[]){ EduStanfordNlpUtilLoggingRedwood_Util_ERR, EduStanfordNlpUtilLoggingRedwood_Util_FORCE } count:2 type:NSObject_class_()]));
  JavaLangSystem_exitWithInt_(1);
}

void EduStanfordNlpUtilLoggingRedwood_Util_runtimeExceptionWithNSObjectArray_(IOSObjectArray *objs) {
  EduStanfordNlpUtilLoggingRedwood_Util_initialize();
  EduStanfordNlpUtilLoggingRedwood_logWithNSObjectArray_(EduStanfordNlpUtilLoggingRedwood_Util_revConcatWithNSObjectArray_withNSObjectArray_(objs, [IOSObjectArray newArrayWithObjects:(id[]){ EduStanfordNlpUtilLoggingRedwood_Util_ERR, EduStanfordNlpUtilLoggingRedwood_Util_FORCE } count:2 type:NSObject_class_()]));
  @throw new_JavaLangRuntimeException_initWithNSString_([((IOSObjectArray *) nil_chk(objs)) description]);
}

void EduStanfordNlpUtilLoggingRedwood_Util_printlnWithId_(id o) {
  EduStanfordNlpUtilLoggingRedwood_Util_initialize();
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithId:o];
}

void EduStanfordNlpUtilLoggingRedwood_Util_exitWithInt_(jint exitCode) {
  EduStanfordNlpUtilLoggingRedwood_Util_initialize();
  EduStanfordNlpUtilLoggingRedwood_stop();
  JavaLangSystem_exitWithInt_(exitCode);
}

void EduStanfordNlpUtilLoggingRedwood_Util_exit() {
  EduStanfordNlpUtilLoggingRedwood_Util_initialize();
  EduStanfordNlpUtilLoggingRedwood_Util_exitWithInt_(0);
}

JavaLangRuntimeException *EduStanfordNlpUtilLoggingRedwood_Util_failWithId_(id msg) {
  EduStanfordNlpUtilLoggingRedwood_Util_initialize();
  if ([msg isKindOfClass:[NSString class]]) {
    return new_JavaLangRuntimeException_initWithNSString_((NSString *) cast_chk(msg, [NSString class]));
  }
  else if ([msg isKindOfClass:[JavaLangRuntimeException class]]) {
    return (JavaLangRuntimeException *) cast_chk(msg, [JavaLangRuntimeException class]);
  }
  else if ([msg isKindOfClass:[NSException class]]) {
    return new_JavaLangRuntimeException_initWithNSException_((NSException *) cast_chk(msg, [NSException class]));
  }
  else {
    @throw new_JavaLangRuntimeException_initWithNSString_([nil_chk(msg) description]);
  }
}

JavaLangRuntimeException *EduStanfordNlpUtilLoggingRedwood_Util_fail() {
  EduStanfordNlpUtilLoggingRedwood_Util_initialize();
  return new_JavaLangRuntimeException_init();
}

void EduStanfordNlpUtilLoggingRedwood_Util_startTrackWithNSObjectArray_(IOSObjectArray *objs) {
  EduStanfordNlpUtilLoggingRedwood_Util_initialize();
  EduStanfordNlpUtilLoggingRedwood_startTrackWithNSObjectArray_(objs);
}

void EduStanfordNlpUtilLoggingRedwood_Util_forceTrackWithNSString_(NSString *title) {
  EduStanfordNlpUtilLoggingRedwood_Util_initialize();
  EduStanfordNlpUtilLoggingRedwood_startTrackWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ EduStanfordNlpUtilLoggingRedwood_Util_FORCE, title } count:2 type:NSObject_class_()]);
}

void EduStanfordNlpUtilLoggingRedwood_Util_endTrackWithNSString_(NSString *check) {
  EduStanfordNlpUtilLoggingRedwood_Util_initialize();
  EduStanfordNlpUtilLoggingRedwood_endTrackWithNSString_(check);
}

void EduStanfordNlpUtilLoggingRedwood_Util_endTrack() {
  EduStanfordNlpUtilLoggingRedwood_Util_initialize();
  EduStanfordNlpUtilLoggingRedwood_endTrack();
}

void EduStanfordNlpUtilLoggingRedwood_Util_endTrackIfOpenWithNSString_(NSString *check) {
  EduStanfordNlpUtilLoggingRedwood_Util_initialize();
  if (![((JavaUtilStack *) nil_chk(JreLoadStatic(EduStanfordNlpUtilLoggingRedwood, titleStack))) empty] && [((NSString *) nil_chk([JreLoadStatic(EduStanfordNlpUtilLoggingRedwood, titleStack) peek])) isEqual:check]) {
    EduStanfordNlpUtilLoggingRedwood_endTrackWithNSString_(check);
  }
}

void EduStanfordNlpUtilLoggingRedwood_Util_endTracksUntilWithNSString_(NSString *check) {
  EduStanfordNlpUtilLoggingRedwood_Util_initialize();
  while (![((JavaUtilStack *) nil_chk(JreLoadStatic(EduStanfordNlpUtilLoggingRedwood, titleStack))) empty] && ![((NSString *) nil_chk([JreLoadStatic(EduStanfordNlpUtilLoggingRedwood, titleStack) peek])) isEqual:check]) {
    EduStanfordNlpUtilLoggingRedwood_endTrackWithNSString_([JreLoadStatic(EduStanfordNlpUtilLoggingRedwood, titleStack) peek]);
  }
}

void EduStanfordNlpUtilLoggingRedwood_Util_endTracksToWithNSString_(NSString *check) {
  EduStanfordNlpUtilLoggingRedwood_Util_initialize();
  EduStanfordNlpUtilLoggingRedwood_Util_endTracksUntilWithNSString_(check);
  EduStanfordNlpUtilLoggingRedwood_Util_endTrackWithNSString_(check);
}

void EduStanfordNlpUtilLoggingRedwood_Util_startThreadsWithNSString_(NSString *title) {
  EduStanfordNlpUtilLoggingRedwood_Util_initialize();
  EduStanfordNlpUtilLoggingRedwood_startThreadsWithNSString_(title);
}

void EduStanfordNlpUtilLoggingRedwood_Util_finishThread() {
  EduStanfordNlpUtilLoggingRedwood_Util_initialize();
  EduStanfordNlpUtilLoggingRedwood_finishThread();
}

void EduStanfordNlpUtilLoggingRedwood_Util_endThreadsWithNSString_(NSString *check) {
  EduStanfordNlpUtilLoggingRedwood_Util_initialize();
  EduStanfordNlpUtilLoggingRedwood_endThreadsWithNSString_(check);
}

EduStanfordNlpUtilLoggingRedwood_RedwoodChannels *EduStanfordNlpUtilLoggingRedwood_Util_channelsWithNSObjectArray_(IOSObjectArray *channels) {
  EduStanfordNlpUtilLoggingRedwood_Util_initialize();
  return new_EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_initWithNSObjectArray_(channels);
}

id<JavaLangIterable> EduStanfordNlpUtilLoggingRedwood_Util_threadWithNSString_withJavaLangIterable_(NSString *title, id<JavaLangIterable> runnables) {
  EduStanfordNlpUtilLoggingRedwood_Util_initialize();
  JavaUtilConcurrentAtomicAtomicBoolean *haveStarted = new_JavaUtilConcurrentAtomicAtomicBoolean_initWithBoolean_(false);
  JavaUtilConcurrentLocksReentrantLock *metaInfoLock = new_JavaUtilConcurrentLocksReentrantLock_init();
  JavaUtilConcurrentAtomicAtomicInteger *numPending = new_JavaUtilConcurrentAtomicAtomicInteger_initWithInt_(0);
  id<JavaUtilIterator> iter = [((id<JavaLangIterable>) nil_chk(runnables)) iterator];
  return new_EduStanfordNlpUtilIterableIterator_initWithJavaUtilIterator_(new_EduStanfordNlpUtilLoggingRedwood_Util_$1_initWithJavaUtilIterator_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentLocksReentrantLock_withJavaUtilConcurrentAtomicAtomicBoolean_withNSString_(iter, numPending, metaInfoLock, haveStarted, title));
}

id<JavaLangIterable> EduStanfordNlpUtilLoggingRedwood_Util_threadWithJavaLangIterable_(id<JavaLangIterable> runnables) {
  EduStanfordNlpUtilLoggingRedwood_Util_initialize();
  return EduStanfordNlpUtilLoggingRedwood_Util_threadWithNSString_withJavaLangIterable_(@"", runnables);
}

void EduStanfordNlpUtilLoggingRedwood_Util_threadAndRunWithNSString_withJavaLangIterable_withInt_(NSString *title, id<JavaLangIterable> runnables, jint numThreads) {
  EduStanfordNlpUtilLoggingRedwood_Util_initialize();
  if (numThreads <= 1 || JreLoadStatic(EduStanfordNlpUtilLoggingRedwood, isThreaded) || ([JavaUtilCollection_class_() isInstance:runnables] && [((id<JavaUtilCollection>) nil_chk(((id<JavaUtilCollection>) cast_check(runnables, JavaUtilCollection_class_())))) size] <= 1)) {
    EduStanfordNlpUtilLoggingRedwood_Util_startTrackWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ JreStrcat("$$C", @"Threads (", title, ')') } count:1 type:NSObject_class_()]);
    for (id<JavaLangRunnable> __strong toRun in nil_chk(runnables)) {
      [((id<JavaLangRunnable>) nil_chk(toRun)) run];
    }
    EduStanfordNlpUtilLoggingRedwood_Util_endTrackWithNSString_(JreStrcat("$$C", @"Threads (", title, ')'));
    return;
  }
  id<JavaUtilConcurrentExecutorService> exec = JavaUtilConcurrentExecutors_newFixedThreadPoolWithInt_(numThreads);
  for (id<JavaLangRunnable> __strong toRun in nil_chk(EduStanfordNlpUtilLoggingRedwood_Util_threadWithNSString_withJavaLangIterable_(title, runnables))) {
    (void) [((id<JavaUtilConcurrentExecutorService>) nil_chk(exec)) submitWithJavaLangRunnable:toRun];
  }
  [((id<JavaUtilConcurrentExecutorService>) nil_chk(exec)) shutdown];
  @try {
    [exec awaitTerminationWithLong:JavaLangLong_MAX_VALUE withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS)];
  }
  @catch (JavaLangInterruptedException *e) {
    @throw new_EduStanfordNlpUtilRuntimeInterruptedException_initWithJavaLangInterruptedException_(e);
  }
}

void EduStanfordNlpUtilLoggingRedwood_Util_threadAndRunWithNSString_withJavaLangIterable_(NSString *title, id<JavaLangIterable> runnables) {
  EduStanfordNlpUtilLoggingRedwood_Util_initialize();
  EduStanfordNlpUtilLoggingRedwood_Util_threadAndRunWithNSString_withJavaLangIterable_withInt_(title, runnables, [((JavaLangRuntime *) nil_chk(JavaLangRuntime_getRuntime())) availableProcessors]);
}

void EduStanfordNlpUtilLoggingRedwood_Util_threadAndRunWithJavaLangIterable_withInt_(id<JavaLangIterable> runnables, jint numThreads) {
  EduStanfordNlpUtilLoggingRedwood_Util_initialize();
  EduStanfordNlpUtilLoggingRedwood_Util_threadAndRunWithNSString_withJavaLangIterable_withInt_(NSString_valueOfInt_(numThreads), runnables, numThreads);
}

void EduStanfordNlpUtilLoggingRedwood_Util_threadAndRunWithJavaLangIterable_(id<JavaLangIterable> runnables) {
  EduStanfordNlpUtilLoggingRedwood_Util_initialize();
  EduStanfordNlpUtilLoggingRedwood_Util_threadAndRunWithJavaLangIterable_withInt_(runnables, JreLoadStatic(EduStanfordNlpUtilExecution, threads));
}

void EduStanfordNlpUtilLoggingRedwood_Util_printChannelsWithInt_(jint width) {
  EduStanfordNlpUtilLoggingRedwood_Util_initialize();
  for (EduStanfordNlpUtilLoggingLogRecordHandler * __strong handler in nil_chk(JreLoadStatic(EduStanfordNlpUtilLoggingRedwood, handlers))) {
    if ([handler isKindOfClass:[EduStanfordNlpUtilLoggingOutputHandler class]]) {
      ((EduStanfordNlpUtilLoggingOutputHandler *) nil_chk(((EduStanfordNlpUtilLoggingOutputHandler *) cast_chk(handler, [EduStanfordNlpUtilLoggingOutputHandler class]))))->leftMargin_ = width;
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpUtilLoggingRedwood_Util)

@implementation EduStanfordNlpUtilLoggingRedwood_Util_$1

- (jboolean)hasNext {
  @synchronized(val$iter_) {
    return [((id<JavaUtilIterator>) nil_chk(val$iter_)) hasNext];
  }
}

- (id<JavaLangRunnable>)next {
  @synchronized(self) {
    id<JavaLangRunnable> runnable;
    @synchronized(val$iter_) {
      runnable = [((id<JavaUtilIterator>) nil_chk(val$iter_)) next];
    }
    while ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(val$numPending_)) get] > 100) {
      @try {
        JavaLangThread_sleepWithLong_(100);
      }
      @catch (JavaLangInterruptedException *e) {
        @throw new_EduStanfordNlpUtilRuntimeInterruptedException_initWithJavaLangInterruptedException_(e);
      }
    }
    [val$numPending_ incrementAndGet];
    id<JavaLangRunnable> toReturn = new_EduStanfordNlpUtilLoggingRedwood_Util_$1_$1_initWithEduStanfordNlpUtilLoggingRedwood_Util_$1_withJavaLangRunnable_(self, runnable);
    return toReturn;
  }
}

- (void)remove {
  @synchronized(val$iter_) {
    [((id<JavaUtilIterator>) nil_chk(val$iter_)) remove];
  }
}

- (instancetype)initWithJavaUtilIterator:(id<JavaUtilIterator>)capture$0
withJavaUtilConcurrentAtomicAtomicInteger:(JavaUtilConcurrentAtomicAtomicInteger *)capture$1
withJavaUtilConcurrentLocksReentrantLock:(JavaUtilConcurrentLocksReentrantLock *)capture$2
withJavaUtilConcurrentAtomicAtomicBoolean:(JavaUtilConcurrentAtomicAtomicBoolean *)capture$3
                            withNSString:(NSString *)capture$4 {
  EduStanfordNlpUtilLoggingRedwood_Util_$1_initWithJavaUtilIterator_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentLocksReentrantLock_withJavaUtilConcurrentAtomicAtomicBoolean_withNSString_(self, capture$0, capture$1, capture$2, capture$3, capture$4);
  return self;
}

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaUtilIterator_forEachRemainingWithJavaUtilFunctionConsumer_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangRunnable;", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(hasNext);
  methods[1].selector = @selector(next);
  methods[2].selector = @selector(remove);
  methods[3].selector = @selector(initWithJavaUtilIterator:withJavaUtilConcurrentAtomicAtomicInteger:withJavaUtilConcurrentLocksReentrantLock:withJavaUtilConcurrentAtomicAtomicBoolean:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$iter_", "LJavaUtilIterator;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
    { "val$numPending_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$metaInfoLock_", "LJavaUtilConcurrentLocksReentrantLock;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$haveStarted_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$title_", "LNSString;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilIterator;LJavaUtilConcurrentAtomicAtomicInteger;LJavaUtilConcurrentLocksReentrantLock;LJavaUtilConcurrentAtomicAtomicBoolean;LNSString;", "(Ljava/util/Iterator<Ljava/lang/Runnable;>;Ljava/util/concurrent/atomic/AtomicInteger;Ljava/util/concurrent/locks/ReentrantLock;Ljava/util/concurrent/atomic/AtomicBoolean;Ljava/lang/String;)V", "Ljava/util/Iterator<Ljava/lang/Runnable;>;", "LEduStanfordNlpUtilLoggingRedwood_Util;", "threadWithNSString:withJavaLangIterable:", "Ljava/lang/Object;Ljava/util/Iterator<Ljava/lang/Runnable;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilLoggingRedwood_Util_$1 = { "", "edu.stanford.nlp.util.logging", ptrTable, methods, fields, 7, 0x8008, 4, 5, 3, -1, 4, 5, -1 };
  return &_EduStanfordNlpUtilLoggingRedwood_Util_$1;
}

@end

void EduStanfordNlpUtilLoggingRedwood_Util_$1_initWithJavaUtilIterator_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentLocksReentrantLock_withJavaUtilConcurrentAtomicAtomicBoolean_withNSString_(EduStanfordNlpUtilLoggingRedwood_Util_$1 *self, id<JavaUtilIterator> capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1, JavaUtilConcurrentLocksReentrantLock *capture$2, JavaUtilConcurrentAtomicAtomicBoolean *capture$3, NSString *capture$4) {
  self->val$iter_ = capture$0;
  self->val$numPending_ = capture$1;
  self->val$metaInfoLock_ = capture$2;
  self->val$haveStarted_ = capture$3;
  self->val$title_ = capture$4;
  NSObject_init(self);
}

EduStanfordNlpUtilLoggingRedwood_Util_$1 *new_EduStanfordNlpUtilLoggingRedwood_Util_$1_initWithJavaUtilIterator_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentLocksReentrantLock_withJavaUtilConcurrentAtomicAtomicBoolean_withNSString_(id<JavaUtilIterator> capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1, JavaUtilConcurrentLocksReentrantLock *capture$2, JavaUtilConcurrentAtomicAtomicBoolean *capture$3, NSString *capture$4) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilLoggingRedwood_Util_$1, initWithJavaUtilIterator_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentLocksReentrantLock_withJavaUtilConcurrentAtomicAtomicBoolean_withNSString_, capture$0, capture$1, capture$2, capture$3, capture$4)
}

EduStanfordNlpUtilLoggingRedwood_Util_$1 *create_EduStanfordNlpUtilLoggingRedwood_Util_$1_initWithJavaUtilIterator_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentLocksReentrantLock_withJavaUtilConcurrentAtomicAtomicBoolean_withNSString_(id<JavaUtilIterator> capture$0, JavaUtilConcurrentAtomicAtomicInteger *capture$1, JavaUtilConcurrentLocksReentrantLock *capture$2, JavaUtilConcurrentAtomicAtomicBoolean *capture$3, NSString *capture$4) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilLoggingRedwood_Util_$1, initWithJavaUtilIterator_withJavaUtilConcurrentAtomicAtomicInteger_withJavaUtilConcurrentLocksReentrantLock_withJavaUtilConcurrentAtomicAtomicBoolean_withNSString_, capture$0, capture$1, capture$2, capture$3, capture$4)
}

@implementation EduStanfordNlpUtilLoggingRedwood_Util_$1_$1

- (void)run {
  jboolean threadFinished = false;
  @try {
    [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(this$0_->val$metaInfoLock_)) lock];
    if (![((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(this$0_->val$haveStarted_)) getAndSetWithBoolean:true]) {
      EduStanfordNlpUtilLoggingRedwood_Util_startThreadsWithNSString_(this$0_->val$title_);
    }
    [this$0_->val$metaInfoLock_ unlock];
    @try {
      [((id<JavaLangRunnable>) nil_chk(val$runnable_)) run];
    }
    @catch (JavaLangException *e) {
      [((NSException *) nil_chk(e)) printStackTrace];
      JavaLangSystem_exitWithInt_(1);
    }
    @catch (JavaLangAssertionError *e) {
      [((NSException *) nil_chk(e)) printStackTrace];
      JavaLangSystem_exitWithInt_(1);
    }
    EduStanfordNlpUtilLoggingRedwood_Util_finishThread();
    threadFinished = true;
    jint numStillPending = [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(this$0_->val$numPending_)) decrementAndGet];
    @synchronized(this$0_->val$iter_) {
      if (numStillPending <= 0 && ![((id<JavaUtilIterator>) nil_chk(this$0_->val$iter_)) hasNext]) {
        EduStanfordNlpUtilLoggingRedwood_Util_endThreadsWithNSString_(this$0_->val$title_);
      }
    }
  }
  @catch (NSException *t) {
    [((NSException *) nil_chk(t)) printStackTrace];
    if (!threadFinished) {
      EduStanfordNlpUtilLoggingRedwood_Util_finishThread();
    }
  }
}

- (instancetype)initWithEduStanfordNlpUtilLoggingRedwood_Util_$1:(EduStanfordNlpUtilLoggingRedwood_Util_$1 *)outer$
                                            withJavaLangRunnable:(id<JavaLangRunnable>)capture$0 {
  EduStanfordNlpUtilLoggingRedwood_Util_$1_$1_initWithEduStanfordNlpUtilLoggingRedwood_Util_$1_withJavaLangRunnable_(self, outer$, capture$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(run);
  methods[1].selector = @selector(initWithEduStanfordNlpUtilLoggingRedwood_Util_$1:withJavaLangRunnable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LEduStanfordNlpUtilLoggingRedwood_Util_$1;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$runnable_", "LJavaLangRunnable;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpUtilLoggingRedwood_Util_$1;LJavaLangRunnable;", "LEduStanfordNlpUtilLoggingRedwood_Util_$1;", "next" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilLoggingRedwood_Util_$1_$1 = { "", "edu.stanford.nlp.util.logging", ptrTable, methods, fields, 7, 0x8008, 2, 2, 1, -1, 2, -1, -1 };
  return &_EduStanfordNlpUtilLoggingRedwood_Util_$1_$1;
}

@end

void EduStanfordNlpUtilLoggingRedwood_Util_$1_$1_initWithEduStanfordNlpUtilLoggingRedwood_Util_$1_withJavaLangRunnable_(EduStanfordNlpUtilLoggingRedwood_Util_$1_$1 *self, EduStanfordNlpUtilLoggingRedwood_Util_$1 *outer$, id<JavaLangRunnable> capture$0) {
  self->this$0_ = outer$;
  self->val$runnable_ = capture$0;
  NSObject_init(self);
}

EduStanfordNlpUtilLoggingRedwood_Util_$1_$1 *new_EduStanfordNlpUtilLoggingRedwood_Util_$1_$1_initWithEduStanfordNlpUtilLoggingRedwood_Util_$1_withJavaLangRunnable_(EduStanfordNlpUtilLoggingRedwood_Util_$1 *outer$, id<JavaLangRunnable> capture$0) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilLoggingRedwood_Util_$1_$1, initWithEduStanfordNlpUtilLoggingRedwood_Util_$1_withJavaLangRunnable_, outer$, capture$0)
}

EduStanfordNlpUtilLoggingRedwood_Util_$1_$1 *create_EduStanfordNlpUtilLoggingRedwood_Util_$1_$1_initWithEduStanfordNlpUtilLoggingRedwood_Util_$1_withJavaLangRunnable_(EduStanfordNlpUtilLoggingRedwood_Util_$1 *outer$, id<JavaLangRunnable> capture$0) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilLoggingRedwood_Util_$1_$1, initWithEduStanfordNlpUtilLoggingRedwood_Util_$1_withJavaLangRunnable_, outer$, capture$0)
}

@implementation EduStanfordNlpUtilLoggingRedwood_RedwoodChannels

- (instancetype)initWithNSObjectArray:(IOSObjectArray *)channelNames {
  EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_initWithNSObjectArray_(self, channelNames);
  return self;
}

- (EduStanfordNlpUtilLoggingRedwood_RedwoodChannels *)channelsWithNSObjectArray:(IOSObjectArray *)moreChannelNames {
  IOSObjectArray *result = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(channelNames_))->size_ + ((IOSObjectArray *) nil_chk(moreChannelNames))->size_ type:NSObject_class_()];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(channelNames_, 0, result, 0, channelNames_->size_);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(moreChannelNames, 0, result, channelNames_->size_, moreChannelNames->size_);
  return new_EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_initWithNSObjectArray_(result);
}

- (void)logWithNSObjectArray:(IOSObjectArray *)obj {
  IOSObjectArray *newArgs = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(channelNames_))->size_ + ((IOSObjectArray *) nil_chk(obj))->size_ type:NSObject_class_()];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(channelNames_, 0, newArgs, 0, channelNames_->size_);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(obj, 0, newArgs, channelNames_->size_, obj->size_);
  EduStanfordNlpUtilLoggingRedwood_logWithNSObjectArray_(newArgs);
}

- (void)logfWithNSString:(NSString *)format
       withNSObjectArray:(IOSObjectArray *)args {
  [self logWithNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ create_EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$1_initWithNSString_withNSObjectArray_(format, args) } count:1 type:NSObject_class_()]];
}

- (void)logfWithEduStanfordNlpUtilLoggingRedwood_Flag:(EduStanfordNlpUtilLoggingRedwood_Flag *)level
                                         withNSString:(NSString *)format
                                    withNSObjectArray:(IOSObjectArray *)args {
  [self logWithNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ level, create_EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$2_initWithNSString_withNSObjectArray_(format, args) } count:2 type:NSObject_class_()]];
}

- (void)debugfWithNSString:(NSString *)format
         withNSObjectArray:(IOSObjectArray *)args {
  [self debugWithNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ create_EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$3_initWithNSString_withNSObjectArray_(format, args) } count:1 type:NSObject_class_()]];
}

- (void)warnfWithNSString:(NSString *)format
        withNSObjectArray:(IOSObjectArray *)args {
  [self warnWithNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ create_EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$4_initWithNSString_withNSObjectArray_(format, args) } count:1 type:NSObject_class_()]];
}

- (void)errfWithNSString:(NSString *)format
       withNSObjectArray:(IOSObjectArray *)args {
  [self errWithNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ create_EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$5_initWithNSString_withNSObjectArray_(format, args) } count:1 type:NSObject_class_()]];
}

- (void)prettyLogWithId:(id)obj {
  EduStanfordNlpUtilLoggingPrettyLogger_logWithEduStanfordNlpUtilLoggingRedwood_RedwoodChannels_withId_(self, obj);
}

- (void)prettyLogWithNSString:(NSString *)description_
                       withId:(id)obj {
  EduStanfordNlpUtilLoggingPrettyLogger_logWithEduStanfordNlpUtilLoggingRedwood_RedwoodChannels_withNSString_withId_(self, description_, obj);
}

- (void)infoWithNSObjectArray:(IOSObjectArray *)objs {
  [self logWithNSObjectArray:EduStanfordNlpUtilLoggingRedwood_Util_revConcatWithNSObjectArray_withNSObjectArray_(objs, [IOSObjectArray newArrayWithLength:0 type:NSObject_class_()])];
}

- (void)warnWithNSObjectArray:(IOSObjectArray *)objs {
  [self logWithNSObjectArray:EduStanfordNlpUtilLoggingRedwood_Util_revConcatWithNSObjectArray_withNSObjectArray_(objs, [IOSObjectArray newArrayWithObjects:(id[]){ JreLoadStatic(EduStanfordNlpUtilLoggingRedwood, WARN) } count:1 type:NSObject_class_()])];
}

- (void)debugWithNSObjectArray:(IOSObjectArray *)objs {
  [self logWithNSObjectArray:EduStanfordNlpUtilLoggingRedwood_Util_revConcatWithNSObjectArray_withNSObjectArray_(objs, [IOSObjectArray newArrayWithObjects:(id[]){ JreLoadStatic(EduStanfordNlpUtilLoggingRedwood, DBG) } count:1 type:NSObject_class_()])];
}

- (void)errWithNSObjectArray:(IOSObjectArray *)objs {
  [self logWithNSObjectArray:EduStanfordNlpUtilLoggingRedwood_Util_revConcatWithNSObjectArray_withNSObjectArray_(objs, [IOSObjectArray newArrayWithObjects:(id[]){ JreLoadStatic(EduStanfordNlpUtilLoggingRedwood, ERR), JreLoadStatic(EduStanfordNlpUtilLoggingRedwood, FORCE) } count:2 type:NSObject_class_()])];
}

- (void)fatalWithNSObjectArray:(IOSObjectArray *)objs {
  [self logWithNSObjectArray:EduStanfordNlpUtilLoggingRedwood_Util_revConcatWithNSObjectArray_withNSObjectArray_(objs, [IOSObjectArray newArrayWithObjects:(id[]){ JreLoadStatic(EduStanfordNlpUtilLoggingRedwood, ERR), JreLoadStatic(EduStanfordNlpUtilLoggingRedwood, FORCE) } count:2 type:NSObject_class_()])];
  JavaLangSystem_exitWithInt_(1);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x81, -1, 0, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpUtilLoggingRedwood_RedwoodChannels;", 0x81, 1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 2, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 3, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 6, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 7, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 8, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 12, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 13, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 14, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 15, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 16, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSObjectArray:);
  methods[1].selector = @selector(channelsWithNSObjectArray:);
  methods[2].selector = @selector(logWithNSObjectArray:);
  methods[3].selector = @selector(logfWithNSString:withNSObjectArray:);
  methods[4].selector = @selector(logfWithEduStanfordNlpUtilLoggingRedwood_Flag:withNSString:withNSObjectArray:);
  methods[5].selector = @selector(debugfWithNSString:withNSObjectArray:);
  methods[6].selector = @selector(warnfWithNSString:withNSObjectArray:);
  methods[7].selector = @selector(errfWithNSString:withNSObjectArray:);
  methods[8].selector = @selector(prettyLogWithId:);
  methods[9].selector = @selector(prettyLogWithNSString:withId:);
  methods[10].selector = @selector(infoWithNSObjectArray:);
  methods[11].selector = @selector(warnWithNSObjectArray:);
  methods[12].selector = @selector(debugWithNSObjectArray:);
  methods[13].selector = @selector(errWithNSObjectArray:);
  methods[14].selector = @selector(fatalWithNSObjectArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "channelNames_", "[LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[LNSObject;", "channels", "log", "logf", "LNSString;[LNSObject;", "LEduStanfordNlpUtilLoggingRedwood_Flag;LNSString;[LNSObject;", "debugf", "warnf", "errf", "prettyLog", "LNSObject;", "LNSString;LNSObject;", "info", "warn", "debug", "err", "fatal", "LEduStanfordNlpUtilLoggingRedwood;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilLoggingRedwood_RedwoodChannels = { "RedwoodChannels", "edu.stanford.nlp.util.logging", ptrTable, methods, fields, 7, 0x9, 15, 1, 17, -1, -1, -1, -1 };
  return &_EduStanfordNlpUtilLoggingRedwood_RedwoodChannels;
}

@end

void EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_initWithNSObjectArray_(EduStanfordNlpUtilLoggingRedwood_RedwoodChannels *self, IOSObjectArray *channelNames) {
  NSObject_init(self);
  self->channelNames_ = channelNames;
}

EduStanfordNlpUtilLoggingRedwood_RedwoodChannels *new_EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_initWithNSObjectArray_(IOSObjectArray *channelNames) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilLoggingRedwood_RedwoodChannels, initWithNSObjectArray_, channelNames)
}

EduStanfordNlpUtilLoggingRedwood_RedwoodChannels *create_EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_initWithNSObjectArray_(IOSObjectArray *channelNames) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilLoggingRedwood_RedwoodChannels, initWithNSObjectArray_, channelNames)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpUtilLoggingRedwood_RedwoodChannels)

@implementation EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$1

- (id)get {
  return [((JavaUtilFormatter *) nil_chk([new_JavaUtilFormatter_init() formatWithNSString:val$format_ withNSObjectArray:val$args_])) description];
}

@end

void EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$1_initWithNSString_withNSObjectArray_(EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$1 *self, NSString *capture$0, IOSObjectArray *capture$1) {
  self->val$format_ = capture$0;
  self->val$args_ = capture$1;
  NSObject_init(self);
}

EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$1 *new_EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$1_initWithNSString_withNSObjectArray_(NSString *capture$0, IOSObjectArray *capture$1) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$1, initWithNSString_withNSObjectArray_, capture$0, capture$1)
}

EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$1 *create_EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$1_initWithNSString_withNSObjectArray_(NSString *capture$0, IOSObjectArray *capture$1) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$1, initWithNSString_withNSObjectArray_, capture$0, capture$1)
}

@implementation EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$2

- (id)get {
  return [((JavaUtilFormatter *) nil_chk([new_JavaUtilFormatter_init() formatWithNSString:val$format_ withNSObjectArray:val$args_])) description];
}

@end

void EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$2_initWithNSString_withNSObjectArray_(EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$2 *self, NSString *capture$0, IOSObjectArray *capture$1) {
  self->val$format_ = capture$0;
  self->val$args_ = capture$1;
  NSObject_init(self);
}

EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$2 *new_EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$2_initWithNSString_withNSObjectArray_(NSString *capture$0, IOSObjectArray *capture$1) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$2, initWithNSString_withNSObjectArray_, capture$0, capture$1)
}

EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$2 *create_EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$2_initWithNSString_withNSObjectArray_(NSString *capture$0, IOSObjectArray *capture$1) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$2, initWithNSString_withNSObjectArray_, capture$0, capture$1)
}

@implementation EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$3

- (id)get {
  return [((JavaUtilFormatter *) nil_chk([new_JavaUtilFormatter_init() formatWithNSString:val$format_ withNSObjectArray:val$args_])) description];
}

@end

void EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$3_initWithNSString_withNSObjectArray_(EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$3 *self, NSString *capture$0, IOSObjectArray *capture$1) {
  self->val$format_ = capture$0;
  self->val$args_ = capture$1;
  NSObject_init(self);
}

EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$3 *new_EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$3_initWithNSString_withNSObjectArray_(NSString *capture$0, IOSObjectArray *capture$1) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$3, initWithNSString_withNSObjectArray_, capture$0, capture$1)
}

EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$3 *create_EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$3_initWithNSString_withNSObjectArray_(NSString *capture$0, IOSObjectArray *capture$1) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$3, initWithNSString_withNSObjectArray_, capture$0, capture$1)
}

@implementation EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$4

- (id)get {
  return [((JavaUtilFormatter *) nil_chk([new_JavaUtilFormatter_init() formatWithNSString:val$format_ withNSObjectArray:val$args_])) description];
}

@end

void EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$4_initWithNSString_withNSObjectArray_(EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$4 *self, NSString *capture$0, IOSObjectArray *capture$1) {
  self->val$format_ = capture$0;
  self->val$args_ = capture$1;
  NSObject_init(self);
}

EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$4 *new_EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$4_initWithNSString_withNSObjectArray_(NSString *capture$0, IOSObjectArray *capture$1) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$4, initWithNSString_withNSObjectArray_, capture$0, capture$1)
}

EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$4 *create_EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$4_initWithNSString_withNSObjectArray_(NSString *capture$0, IOSObjectArray *capture$1) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$4, initWithNSString_withNSObjectArray_, capture$0, capture$1)
}

@implementation EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$5

- (id)get {
  return [((JavaUtilFormatter *) nil_chk([new_JavaUtilFormatter_init() formatWithNSString:val$format_ withNSObjectArray:val$args_])) description];
}

@end

void EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$5_initWithNSString_withNSObjectArray_(EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$5 *self, NSString *capture$0, IOSObjectArray *capture$1) {
  self->val$format_ = capture$0;
  self->val$args_ = capture$1;
  NSObject_init(self);
}

EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$5 *new_EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$5_initWithNSString_withNSObjectArray_(NSString *capture$0, IOSObjectArray *capture$1) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$5, initWithNSString_withNSObjectArray_, capture$0, capture$1)
}

EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$5 *create_EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$5_initWithNSString_withNSObjectArray_(NSString *capture$0, IOSObjectArray *capture$1) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilLoggingRedwood_RedwoodChannels_$Lambda$5, initWithNSString_withNSObjectArray_, capture$0, capture$1)
}

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpUtilLoggingRedwood_Flag)

EduStanfordNlpUtilLoggingRedwood_Flag *EduStanfordNlpUtilLoggingRedwood_Flag_values_[6];

@implementation EduStanfordNlpUtilLoggingRedwood_Flag

+ (IOSObjectArray *)values {
  return EduStanfordNlpUtilLoggingRedwood_Flag_values();
}

+ (EduStanfordNlpUtilLoggingRedwood_Flag *)valueOfWithNSString:(NSString *)name {
  return EduStanfordNlpUtilLoggingRedwood_Flag_valueOfWithNSString_(name);
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LEduStanfordNlpUtilLoggingRedwood_Flag;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpUtilLoggingRedwood_Flag;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ERROR", "LEduStanfordNlpUtilLoggingRedwood_Flag;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "WARN", "LEduStanfordNlpUtilLoggingRedwood_Flag;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "DEBUG", "LEduStanfordNlpUtilLoggingRedwood_Flag;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "STDOUT", "LEduStanfordNlpUtilLoggingRedwood_Flag;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
    { "STDERR", "LEduStanfordNlpUtilLoggingRedwood_Flag;", .constantValue.asLong = 0, 0x4019, -1, 6, -1, -1 },
    { "FORCE", "LEduStanfordNlpUtilLoggingRedwood_Flag;", .constantValue.asLong = 0, 0x4019, -1, 7, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(EduStanfordNlpUtilLoggingRedwood_Flag, ERROR), &JreEnum(EduStanfordNlpUtilLoggingRedwood_Flag, WARN), &JreEnum(EduStanfordNlpUtilLoggingRedwood_Flag, DEBUG), &JreEnum(EduStanfordNlpUtilLoggingRedwood_Flag, STDOUT), &JreEnum(EduStanfordNlpUtilLoggingRedwood_Flag, STDERR), &JreEnum(EduStanfordNlpUtilLoggingRedwood_Flag, FORCE), "LEduStanfordNlpUtilLoggingRedwood;", "Ljava/lang/Enum<Ledu/stanford/nlp/util/logging/Redwood$Flag;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilLoggingRedwood_Flag = { "Flag", "edu.stanford.nlp.util.logging", ptrTable, methods, fields, 7, 0x401c, 2, 6, 8, -1, -1, 9, -1 };
  return &_EduStanfordNlpUtilLoggingRedwood_Flag;
}

+ (void)initialize {
  if (self == [EduStanfordNlpUtilLoggingRedwood_Flag class]) {
    JreEnum(EduStanfordNlpUtilLoggingRedwood_Flag, ERROR) = new_EduStanfordNlpUtilLoggingRedwood_Flag_initWithNSString_withInt_(@"ERROR", 0);
    JreEnum(EduStanfordNlpUtilLoggingRedwood_Flag, WARN) = new_EduStanfordNlpUtilLoggingRedwood_Flag_initWithNSString_withInt_(@"WARN", 1);
    JreEnum(EduStanfordNlpUtilLoggingRedwood_Flag, DEBUG) = new_EduStanfordNlpUtilLoggingRedwood_Flag_initWithNSString_withInt_(@"DEBUG", 2);
    JreEnum(EduStanfordNlpUtilLoggingRedwood_Flag, STDOUT) = new_EduStanfordNlpUtilLoggingRedwood_Flag_initWithNSString_withInt_(@"STDOUT", 3);
    JreEnum(EduStanfordNlpUtilLoggingRedwood_Flag, STDERR) = new_EduStanfordNlpUtilLoggingRedwood_Flag_initWithNSString_withInt_(@"STDERR", 4);
    JreEnum(EduStanfordNlpUtilLoggingRedwood_Flag, FORCE) = new_EduStanfordNlpUtilLoggingRedwood_Flag_initWithNSString_withInt_(@"FORCE", 5);
    J2OBJC_SET_INITIALIZED(EduStanfordNlpUtilLoggingRedwood_Flag)
  }
}

@end

void EduStanfordNlpUtilLoggingRedwood_Flag_initWithNSString_withInt_(EduStanfordNlpUtilLoggingRedwood_Flag *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

EduStanfordNlpUtilLoggingRedwood_Flag *new_EduStanfordNlpUtilLoggingRedwood_Flag_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilLoggingRedwood_Flag, initWithNSString_withInt_, __name, __ordinal)
}

IOSObjectArray *EduStanfordNlpUtilLoggingRedwood_Flag_values() {
  EduStanfordNlpUtilLoggingRedwood_Flag_initialize();
  return [IOSObjectArray arrayWithObjects:EduStanfordNlpUtilLoggingRedwood_Flag_values_ count:6 type:EduStanfordNlpUtilLoggingRedwood_Flag_class_()];
}

EduStanfordNlpUtilLoggingRedwood_Flag *EduStanfordNlpUtilLoggingRedwood_Flag_valueOfWithNSString_(NSString *name) {
  EduStanfordNlpUtilLoggingRedwood_Flag_initialize();
  for (int i = 0; i < 6; i++) {
    EduStanfordNlpUtilLoggingRedwood_Flag *e = EduStanfordNlpUtilLoggingRedwood_Flag_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

EduStanfordNlpUtilLoggingRedwood_Flag *EduStanfordNlpUtilLoggingRedwood_Flag_fromOrdinal(NSUInteger ordinal) {
  EduStanfordNlpUtilLoggingRedwood_Flag_initialize();
  if (ordinal >= 6) {
    return nil;
  }
  return EduStanfordNlpUtilLoggingRedwood_Flag_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpUtilLoggingRedwood_Flag)

@implementation EduStanfordNlpUtilLoggingRedwood_$Lambda$1

- (void)run {
  JreAssert((!JreLoadStatic(EduStanfordNlpUtilLoggingRedwood, isThreaded) || [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(JreLoadStatic(EduStanfordNlpUtilLoggingRedwood, control))) isHeldByCurrentThread]), (@"edu/stanford/nlp/util/logging/Redwood.java:297 condition failed: assert !isThreaded || control.isHeldByCurrentThread();"));
  EduStanfordNlpUtilLoggingRedwood_Record *toPass = new_EduStanfordNlpUtilLoggingRedwood_Record_initWithId_withNSObjectArray_withInt_withLong_(val$content_, val$tags_, JreLoadStatic(EduStanfordNlpUtilLoggingRedwood, depth), val$timestamp_);
  EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree_processWithEduStanfordNlpUtilLoggingRedwood_Record_withEduStanfordNlpUtilLoggingRedwood_MessageType_withInt_withLong_(nil_chk(JreLoadStatic(EduStanfordNlpUtilLoggingRedwood, handlers)), toPass, JreLoadEnum(EduStanfordNlpUtilLoggingRedwood_MessageType, SIMPLE), JreLoadStatic(EduStanfordNlpUtilLoggingRedwood, depth), toPass->timesstamp_);
  JreAssert((!JreLoadStatic(EduStanfordNlpUtilLoggingRedwood, isThreaded) || [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(JreLoadStatic(EduStanfordNlpUtilLoggingRedwood, control))) isHeldByCurrentThread]), (@"edu/stanford/nlp/util/logging/Redwood.java:300 condition failed: assert !isThreaded || control.isHeldByCurrentThread();"));
}

@end

void EduStanfordNlpUtilLoggingRedwood_$Lambda$1_initWithId_withNSObjectArray_withLong_(EduStanfordNlpUtilLoggingRedwood_$Lambda$1 *self, id capture$0, IOSObjectArray *capture$1, jlong capture$2) {
  self->val$content_ = capture$0;
  self->val$tags_ = capture$1;
  self->val$timestamp_ = capture$2;
  NSObject_init(self);
}

EduStanfordNlpUtilLoggingRedwood_$Lambda$1 *new_EduStanfordNlpUtilLoggingRedwood_$Lambda$1_initWithId_withNSObjectArray_withLong_(id capture$0, IOSObjectArray *capture$1, jlong capture$2) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilLoggingRedwood_$Lambda$1, initWithId_withNSObjectArray_withLong_, capture$0, capture$1, capture$2)
}

EduStanfordNlpUtilLoggingRedwood_$Lambda$1 *create_EduStanfordNlpUtilLoggingRedwood_$Lambda$1_initWithId_withNSObjectArray_withLong_(id capture$0, IOSObjectArray *capture$1, jlong capture$2) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilLoggingRedwood_$Lambda$1, initWithId_withNSObjectArray_withLong_, capture$0, capture$1, capture$2)
}

@implementation EduStanfordNlpUtilLoggingRedwood_$Lambda$2

- (id)get {
  return [((JavaUtilFormatter *) nil_chk([new_JavaUtilFormatter_init() formatWithNSString:val$format_ withNSObjectArray:val$args_])) description];
}

@end

void EduStanfordNlpUtilLoggingRedwood_$Lambda$2_initWithNSString_withNSObjectArray_(EduStanfordNlpUtilLoggingRedwood_$Lambda$2 *self, NSString *capture$0, IOSObjectArray *capture$1) {
  self->val$format_ = capture$0;
  self->val$args_ = capture$1;
  NSObject_init(self);
}

EduStanfordNlpUtilLoggingRedwood_$Lambda$2 *new_EduStanfordNlpUtilLoggingRedwood_$Lambda$2_initWithNSString_withNSObjectArray_(NSString *capture$0, IOSObjectArray *capture$1) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilLoggingRedwood_$Lambda$2, initWithNSString_withNSObjectArray_, capture$0, capture$1)
}

EduStanfordNlpUtilLoggingRedwood_$Lambda$2 *create_EduStanfordNlpUtilLoggingRedwood_$Lambda$2_initWithNSString_withNSObjectArray_(NSString *capture$0, IOSObjectArray *capture$1) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilLoggingRedwood_$Lambda$2, initWithNSString_withNSObjectArray_, capture$0, capture$1)
}

@implementation EduStanfordNlpUtilLoggingRedwood_$Lambda$3

- (id)get {
  return [((JavaUtilFormatter *) nil_chk([new_JavaUtilFormatter_init() formatWithNSString:val$format_ withNSObjectArray:val$args_])) description];
}

@end

void EduStanfordNlpUtilLoggingRedwood_$Lambda$3_initWithNSString_withNSObjectArray_(EduStanfordNlpUtilLoggingRedwood_$Lambda$3 *self, NSString *capture$0, IOSObjectArray *capture$1) {
  self->val$format_ = capture$0;
  self->val$args_ = capture$1;
  NSObject_init(self);
}

EduStanfordNlpUtilLoggingRedwood_$Lambda$3 *new_EduStanfordNlpUtilLoggingRedwood_$Lambda$3_initWithNSString_withNSObjectArray_(NSString *capture$0, IOSObjectArray *capture$1) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilLoggingRedwood_$Lambda$3, initWithNSString_withNSObjectArray_, capture$0, capture$1)
}

EduStanfordNlpUtilLoggingRedwood_$Lambda$3 *create_EduStanfordNlpUtilLoggingRedwood_$Lambda$3_initWithNSString_withNSObjectArray_(NSString *capture$0, IOSObjectArray *capture$1) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilLoggingRedwood_$Lambda$3, initWithNSString_withNSObjectArray_, capture$0, capture$1)
}

@implementation EduStanfordNlpUtilLoggingRedwood_$Lambda$4

- (void)run {
  JreAssert((!JreLoadStatic(EduStanfordNlpUtilLoggingRedwood, isThreaded) || [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(JreLoadStatic(EduStanfordNlpUtilLoggingRedwood, control))) isHeldByCurrentThread]), (@"edu/stanford/nlp/util/logging/Redwood.java:391 condition failed: assert !isThreaded || control.isHeldByCurrentThread();"));
  NSString *expected = [((JavaUtilStack *) nil_chk(JreLoadStatic(EduStanfordNlpUtilLoggingRedwood, titleStack))) pop];
  if (!JreLoadStatic(EduStanfordNlpUtilLoggingRedwood, isThreaded) && ![((NSString *) nil_chk(expected)) equalsIgnoreCase:val$title_]) {
    EduStanfordNlpUtilLoggingRedwood_logWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ JreLoadEnum(EduStanfordNlpUtilLoggingRedwood_Flag, ERROR), JreStrcat("$$$$", @"Track names do not match: expected: ", expected, @" found: ", val$title_) } count:2 type:NSObject_class_()]);
  }
  *JreLoadStaticRef(EduStanfordNlpUtilLoggingRedwood, depth) -= 1;
  EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree_processWithEduStanfordNlpUtilLoggingRedwood_Record_withEduStanfordNlpUtilLoggingRedwood_MessageType_withInt_withLong_(nil_chk(JreLoadStatic(EduStanfordNlpUtilLoggingRedwood, handlers)), nil, JreLoadEnum(EduStanfordNlpUtilLoggingRedwood_MessageType, END_TRACK), JreLoadStatic(EduStanfordNlpUtilLoggingRedwood, depth), val$timestamp_);
  JreAssert((!JreLoadStatic(EduStanfordNlpUtilLoggingRedwood, isThreaded) || [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(JreLoadStatic(EduStanfordNlpUtilLoggingRedwood, control))) isHeldByCurrentThread]), (@"edu/stanford/nlp/util/logging/Redwood.java:402 condition failed: assert !isThreaded || control.isHeldByCurrentThread();"));
}

@end

void EduStanfordNlpUtilLoggingRedwood_$Lambda$4_initWithNSString_withLong_(EduStanfordNlpUtilLoggingRedwood_$Lambda$4 *self, NSString *capture$0, jlong capture$1) {
  self->val$title_ = capture$0;
  self->val$timestamp_ = capture$1;
  NSObject_init(self);
}

EduStanfordNlpUtilLoggingRedwood_$Lambda$4 *new_EduStanfordNlpUtilLoggingRedwood_$Lambda$4_initWithNSString_withLong_(NSString *capture$0, jlong capture$1) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilLoggingRedwood_$Lambda$4, initWithNSString_withLong_, capture$0, capture$1)
}

EduStanfordNlpUtilLoggingRedwood_$Lambda$4 *create_EduStanfordNlpUtilLoggingRedwood_$Lambda$4_initWithNSString_withLong_(NSString *capture$0, jlong capture$1) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilLoggingRedwood_$Lambda$4, initWithNSString_withLong_, capture$0, capture$1)
}

@implementation EduStanfordNlpUtilLoggingRedwood_$Lambda$5

- (void)run {
  EduStanfordNlpUtilLoggingRedwood_releaseThreadControlWithLong_(val$threadId_);
}

@end

void EduStanfordNlpUtilLoggingRedwood_$Lambda$5_initWithLong_(EduStanfordNlpUtilLoggingRedwood_$Lambda$5 *self, jlong capture$0) {
  self->val$threadId_ = capture$0;
  NSObject_init(self);
}

EduStanfordNlpUtilLoggingRedwood_$Lambda$5 *new_EduStanfordNlpUtilLoggingRedwood_$Lambda$5_initWithLong_(jlong capture$0) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilLoggingRedwood_$Lambda$5, initWithLong_, capture$0)
}

EduStanfordNlpUtilLoggingRedwood_$Lambda$5 *create_EduStanfordNlpUtilLoggingRedwood_$Lambda$5_initWithLong_(jlong capture$0) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilLoggingRedwood_$Lambda$5, initWithLong_, capture$0)
}

@implementation EduStanfordNlpUtilLoggingRedwood_$Lambda$6

- (void)run {
  EduStanfordNlpUtilLoggingRedwood_startTrackWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ JreStrcat("$I", @"Runnable ", val$fI_) } count:1 type:NSObject_class_()]);
  EduStanfordNlpUtilLoggingRedwood_logWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ JavaLangLong_valueOfWithLong_([((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getId]) } count:1 type:NSObject_class_()]);
  EduStanfordNlpUtilLoggingRedwood_logWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ JreStrcat("$I$", @"message ", val$fI_, @".1") } count:1 type:NSObject_class_()]);
  EduStanfordNlpUtilLoggingRedwood_logWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ JreStrcat("$I$", @"message ", val$fI_, @".2") } count:1 type:NSObject_class_()]);
  EduStanfordNlpUtilLoggingRedwood_logWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ JreStrcat("$I$", @"message ", val$fI_, @".3") } count:1 type:NSObject_class_()]);
  EduStanfordNlpUtilLoggingRedwood_logWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ JreLoadStatic(EduStanfordNlpUtilLoggingRedwood, FORCE), JreStrcat("$I$", @"message ", val$fI_, @".4") } count:2 type:NSObject_class_()]);
  EduStanfordNlpUtilLoggingRedwood_logWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ JreStrcat("$I$", @"message ", val$fI_, @".5") } count:1 type:NSObject_class_()]);
  EduStanfordNlpUtilLoggingRedwood_forceTrackWithId_(JreStrcat("$I$", @"Runnable ", val$fI_, @".1"));
  EduStanfordNlpUtilLoggingRedwood_endTrackWithNSString_(JreStrcat("$I$", @"Runnable ", val$fI_, @".1"));
  EduStanfordNlpUtilLoggingRedwood_forceTrackWithId_(JreStrcat("$I$", @"Runnable ", val$fI_, @".2"));
  EduStanfordNlpUtilLoggingRedwood_logWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ @"a message" } count:1 type:NSObject_class_()]);
  EduStanfordNlpUtilLoggingRedwood_endTrackWithNSString_(JreStrcat("$I$", @"Runnable ", val$fI_, @".2"));
  EduStanfordNlpUtilLoggingRedwood_forceTrackWithId_(JreStrcat("$I$", @"Runnable ", val$fI_, @".3"));
  EduStanfordNlpUtilLoggingRedwood_logWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ @"a message" } count:1 type:NSObject_class_()]);
  EduStanfordNlpUtilLoggingRedwood_logWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ JreLoadStatic(EduStanfordNlpUtilLoggingRedwood, FORCE), @"A forced message" } count:2 type:NSObject_class_()]);
  EduStanfordNlpUtilLoggingRedwood_endTrackWithNSString_(JreStrcat("$I$", @"Runnable ", val$fI_, @".3"));
  EduStanfordNlpUtilLoggingRedwood_endTrackWithNSString_(JreStrcat("$I", @"Runnable ", val$fI_));
}

@end

void EduStanfordNlpUtilLoggingRedwood_$Lambda$6_initWithInt_(EduStanfordNlpUtilLoggingRedwood_$Lambda$6 *self, jint capture$0) {
  self->val$fI_ = capture$0;
  NSObject_init(self);
}

EduStanfordNlpUtilLoggingRedwood_$Lambda$6 *new_EduStanfordNlpUtilLoggingRedwood_$Lambda$6_initWithInt_(jint capture$0) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilLoggingRedwood_$Lambda$6, initWithInt_, capture$0)
}

EduStanfordNlpUtilLoggingRedwood_$Lambda$6 *create_EduStanfordNlpUtilLoggingRedwood_$Lambda$6_initWithInt_(jint capture$0) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilLoggingRedwood_$Lambda$6, initWithInt_, capture$0)
}

@implementation EduStanfordNlpUtilLoggingRedwood_$Lambda$7

- (void)run {
  EduStanfordNlpUtilLoggingRedwood_startTrackWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ JreStrcat("$I$JC", @"Thread ", val$theI_, @" (", [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getId], ')') } count:1 type:NSObject_class_()]);
  for (jint time = 0; time < 5; time++) {
    EduStanfordNlpUtilLoggingRedwood_logWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ JreStrcat("$I$I$JC", @"tick ", time, @" from ", val$theI_, @" (", [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getId], ')') } count:1 type:NSObject_class_()]);
    @try {
      JavaLangThread_sleepWithLong_(50);
    }
    @catch (JavaLangException *e) {
    }
  }
  EduStanfordNlpUtilLoggingRedwood_endTrackWithNSString_(JreStrcat("$I$JC", @"Thread ", val$theI_, @" (", [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getId], ')'));
  EduStanfordNlpUtilLoggingRedwood_finishThread();
}

@end

void EduStanfordNlpUtilLoggingRedwood_$Lambda$7_initWithInt_(EduStanfordNlpUtilLoggingRedwood_$Lambda$7 *self, jint capture$0) {
  self->val$theI_ = capture$0;
  NSObject_init(self);
}

EduStanfordNlpUtilLoggingRedwood_$Lambda$7 *new_EduStanfordNlpUtilLoggingRedwood_$Lambda$7_initWithInt_(jint capture$0) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilLoggingRedwood_$Lambda$7, initWithInt_, capture$0)
}

EduStanfordNlpUtilLoggingRedwood_$Lambda$7 *create_EduStanfordNlpUtilLoggingRedwood_$Lambda$7_initWithInt_(jint capture$0) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilLoggingRedwood_$Lambda$7, initWithInt_, capture$0)
}

@implementation EduStanfordNlpUtilLoggingRedwood_$1

- (void)run {
  JreAssert((!JreLoadStatic(EduStanfordNlpUtilLoggingRedwood, isThreaded) || [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(JreLoadStatic(EduStanfordNlpUtilLoggingRedwood, control))) isHeldByCurrentThread]), (@"edu/stanford/nlp/util/logging/Redwood.java:348 condition failed: assert !isThreaded || control.isHeldByCurrentThread();"));
  EduStanfordNlpUtilLoggingRedwood_Record *toPass = new_EduStanfordNlpUtilLoggingRedwood_Record_initWithId_withNSObjectArray_withInt_withLong_(val$content_, val$tags_, JreLoadStatic(EduStanfordNlpUtilLoggingRedwood, depth), val$timestamp_);
  *JreLoadStaticRef(EduStanfordNlpUtilLoggingRedwood, depth) += 1;
  (void) [((JavaUtilStack *) nil_chk(JreLoadStatic(EduStanfordNlpUtilLoggingRedwood, titleStack))) pushWithId:((IOSObjectArray *) nil_chk(val$args_))->size_ == 0 ? @"" : [nil_chk(IOSObjectArray_Get(val$args_, val$len_)) description]];
  EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree_processWithEduStanfordNlpUtilLoggingRedwood_Record_withEduStanfordNlpUtilLoggingRedwood_MessageType_withInt_withLong_(nil_chk(JreLoadStatic(EduStanfordNlpUtilLoggingRedwood, handlers)), toPass, JreLoadEnum(EduStanfordNlpUtilLoggingRedwood_MessageType, START_TRACK), JreLoadStatic(EduStanfordNlpUtilLoggingRedwood, depth), toPass->timesstamp_);
  JreAssert((!JreLoadStatic(EduStanfordNlpUtilLoggingRedwood, isThreaded) || [((JavaUtilConcurrentLocksReentrantLock *) nil_chk(JreLoadStatic(EduStanfordNlpUtilLoggingRedwood, control))) isHeldByCurrentThread]), (@"edu/stanford/nlp/util/logging/Redwood.java:353 condition failed: assert !isThreaded || control.isHeldByCurrentThread();"));
}

- (instancetype)initWithId:(id)capture$0
         withNSObjectArray:(IOSObjectArray *)capture$1
                  withLong:(jlong)capture$2
         withNSObjectArray:(IOSObjectArray *)capture$3
                   withInt:(jint)capture$4 {
  EduStanfordNlpUtilLoggingRedwood_$1_initWithId_withNSObjectArray_withLong_withNSObjectArray_withInt_(self, capture$0, capture$1, capture$2, capture$3, capture$4);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(run);
  methods[1].selector = @selector(initWithId:withNSObjectArray:withLong:withNSObjectArray:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$content_", "LNSObject;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$tags_", "[LNSObject;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$timestamp_", "J", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$args_", "[LNSObject;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$len_", "I", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSObject;[LNSObject;J[LNSObject;I", "LEduStanfordNlpUtilLoggingRedwood;", "startTrackWithNSObjectArray:" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilLoggingRedwood_$1 = { "", "edu.stanford.nlp.util.logging", ptrTable, methods, fields, 7, 0x8008, 2, 5, 1, -1, 2, -1, -1 };
  return &_EduStanfordNlpUtilLoggingRedwood_$1;
}

@end

void EduStanfordNlpUtilLoggingRedwood_$1_initWithId_withNSObjectArray_withLong_withNSObjectArray_withInt_(EduStanfordNlpUtilLoggingRedwood_$1 *self, id capture$0, IOSObjectArray *capture$1, jlong capture$2, IOSObjectArray *capture$3, jint capture$4) {
  self->val$content_ = capture$0;
  self->val$tags_ = capture$1;
  self->val$timestamp_ = capture$2;
  self->val$args_ = capture$3;
  self->val$len_ = capture$4;
  NSObject_init(self);
}

EduStanfordNlpUtilLoggingRedwood_$1 *new_EduStanfordNlpUtilLoggingRedwood_$1_initWithId_withNSObjectArray_withLong_withNSObjectArray_withInt_(id capture$0, IOSObjectArray *capture$1, jlong capture$2, IOSObjectArray *capture$3, jint capture$4) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilLoggingRedwood_$1, initWithId_withNSObjectArray_withLong_withNSObjectArray_withInt_, capture$0, capture$1, capture$2, capture$3, capture$4)
}

EduStanfordNlpUtilLoggingRedwood_$1 *create_EduStanfordNlpUtilLoggingRedwood_$1_initWithId_withNSObjectArray_withLong_withNSObjectArray_withInt_(id capture$0, IOSObjectArray *capture$1, jlong capture$2, IOSObjectArray *capture$3, jint capture$4) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilLoggingRedwood_$1, initWithId_withNSObjectArray_withLong_withNSObjectArray_withInt_, capture$0, capture$1, capture$2, capture$3, capture$4)
}
