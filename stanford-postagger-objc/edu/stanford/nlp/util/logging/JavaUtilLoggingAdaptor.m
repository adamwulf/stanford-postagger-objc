//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/util/logging/JavaUtilLoggingAdaptor.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/util/logging/JavaUtilLoggingAdaptor.h"
#include "edu/stanford/nlp/util/logging/RedirectOutputHandler.h"
#include "edu/stanford/nlp/util/logging/Redwood.h"
#include "java/util/logging/ConsoleHandler.h"
#include "java/util/logging/Handler.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/LogRecord.h"
#include "java/util/logging/Logger.h"

@interface EduStanfordNlpUtilLoggingJavaUtilLoggingAdaptor ()

- (instancetype)init;

@end

inline jboolean EduStanfordNlpUtilLoggingJavaUtilLoggingAdaptor_get_addedRedwoodHandler();
inline jboolean EduStanfordNlpUtilLoggingJavaUtilLoggingAdaptor_set_addedRedwoodHandler(jboolean value);
inline jboolean *EduStanfordNlpUtilLoggingJavaUtilLoggingAdaptor_getRef_addedRedwoodHandler();
static jboolean EduStanfordNlpUtilLoggingJavaUtilLoggingAdaptor_addedRedwoodHandler;
J2OBJC_STATIC_FIELD_PRIMITIVE(EduStanfordNlpUtilLoggingJavaUtilLoggingAdaptor, addedRedwoodHandler, jboolean)

__attribute__((unused)) static void EduStanfordNlpUtilLoggingJavaUtilLoggingAdaptor_init(EduStanfordNlpUtilLoggingJavaUtilLoggingAdaptor *self);

__attribute__((unused)) static EduStanfordNlpUtilLoggingJavaUtilLoggingAdaptor *new_EduStanfordNlpUtilLoggingJavaUtilLoggingAdaptor_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpUtilLoggingJavaUtilLoggingAdaptor *create_EduStanfordNlpUtilLoggingJavaUtilLoggingAdaptor_init();

@implementation EduStanfordNlpUtilLoggingJavaUtilLoggingAdaptor

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpUtilLoggingJavaUtilLoggingAdaptor_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)adapt {
  EduStanfordNlpUtilLoggingJavaUtilLoggingAdaptor_adapt();
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  EduStanfordNlpUtilLoggingJavaUtilLoggingAdaptor_mainWithNSStringArray_(args);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(adapt);
  methods[2].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "addedRedwoodHandler", "Z", .constantValue.asLong = 0, 0xa, -1, 2, -1, -1 },
  };
  static const void *ptrTable[] = { "main", "[LNSString;", &EduStanfordNlpUtilLoggingJavaUtilLoggingAdaptor_addedRedwoodHandler, "LEduStanfordNlpUtilLoggingJavaUtilLoggingAdaptor_RedwoodHandler;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilLoggingJavaUtilLoggingAdaptor = { "JavaUtilLoggingAdaptor", "edu.stanford.nlp.util.logging", ptrTable, methods, fields, 7, 0x1, 3, 1, -1, 3, -1, -1, -1 };
  return &_EduStanfordNlpUtilLoggingJavaUtilLoggingAdaptor;
}

@end

void EduStanfordNlpUtilLoggingJavaUtilLoggingAdaptor_init(EduStanfordNlpUtilLoggingJavaUtilLoggingAdaptor *self) {
  NSObject_init(self);
}

EduStanfordNlpUtilLoggingJavaUtilLoggingAdaptor *new_EduStanfordNlpUtilLoggingJavaUtilLoggingAdaptor_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilLoggingJavaUtilLoggingAdaptor, init)
}

EduStanfordNlpUtilLoggingJavaUtilLoggingAdaptor *create_EduStanfordNlpUtilLoggingJavaUtilLoggingAdaptor_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilLoggingJavaUtilLoggingAdaptor, init)
}

void EduStanfordNlpUtilLoggingJavaUtilLoggingAdaptor_adapt() {
  EduStanfordNlpUtilLoggingJavaUtilLoggingAdaptor_initialize();
  JavaUtilLoggingLogger *topLogger = JavaUtilLoggingLogger_getLoggerWithNSString_(@"");
  JavaUtilLoggingHandler *oldConsoleHandler = nil;
  {
    IOSObjectArray *a__ = [((JavaUtilLoggingLogger *) nil_chk(topLogger)) getHandlers];
    JavaUtilLoggingHandler * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    JavaUtilLoggingHandler * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      JavaUtilLoggingHandler *handler = *b__++;
      if ([handler isKindOfClass:[JavaUtilLoggingConsoleHandler class]] && !([handler isKindOfClass:[EduStanfordNlpUtilLoggingJavaUtilLoggingAdaptor_RedwoodHandler class]])) {
        oldConsoleHandler = handler;
        break;
      }
    }
  }
  if (oldConsoleHandler != nil) {
    [topLogger removeHandlerWithJavaUtilLoggingHandler:oldConsoleHandler];
  }
  if (!EduStanfordNlpUtilLoggingJavaUtilLoggingAdaptor_addedRedwoodHandler) {
    JavaUtilLoggingHandler *redwoodHandler = new_EduStanfordNlpUtilLoggingJavaUtilLoggingAdaptor_RedwoodHandler_init();
    [topLogger addHandlerWithJavaUtilLoggingHandler:redwoodHandler];
    EduStanfordNlpUtilLoggingJavaUtilLoggingAdaptor_addedRedwoodHandler = true;
  }
}

void EduStanfordNlpUtilLoggingJavaUtilLoggingAdaptor_mainWithNSStringArray_(IOSObjectArray *args) {
  EduStanfordNlpUtilLoggingJavaUtilLoggingAdaptor_initialize();
  if (((IOSObjectArray *) nil_chk(args))->size_ > 0 && [((NSString *) nil_chk(IOSObjectArray_Get(args, 0))) isEqual:@"redwood"]) {
    EduStanfordNlpUtilLoggingRedwood_logWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ JreLoadStatic(EduStanfordNlpUtilLoggingRedwood, DBG), @"at the top" } count:2 type:NSObject_class_()]);
    EduStanfordNlpUtilLoggingRedwood_startTrackWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ @"Adaptor test controlled by redwood" } count:1 type:NSObject_class_()]);
    JavaUtilLoggingLogger *topLogger = JavaUtilLoggingLogger_getLoggerWithNSString_(JavaUtilLoggingLogger_GLOBAL_LOGGER_NAME);
    [((JavaUtilLoggingLogger *) nil_chk(topLogger)) warningWithNSString:@"I'm warning you!"];
    [topLogger severeWithNSString:@"Now I'm using my severe voice."];
    [topLogger infoWithNSString:@"FYI"];
    EduStanfordNlpUtilLoggingRedwood_logWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ JreLoadStatic(EduStanfordNlpUtilLoggingRedwood, DBG), @"adapting" } count:2 type:NSObject_class_()]);
    EduStanfordNlpUtilLoggingJavaUtilLoggingAdaptor_adapt();
    [topLogger warningWithNSString:@"I'm warning you in Redwood!"];
    EduStanfordNlpUtilLoggingJavaUtilLoggingAdaptor_adapt();
    [topLogger severeWithNSString:@"Now I'm using my severe voice in Redwood!"];
    [topLogger infoWithNSString:@"FYI: Redwood rocks"];
    [topLogger setLevelWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, OFF)];
    [topLogger severeWithNSString:@"We shouldn't see this message."];
    EduStanfordNlpUtilLoggingRedwood_logWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ JreLoadStatic(EduStanfordNlpUtilLoggingRedwood, DBG), @"at the bottom" } count:2 type:NSObject_class_()]);
    EduStanfordNlpUtilLoggingRedwood_endTrackWithNSString_(@"Adaptor test controlled by redwood");
  }
  else {
    JavaUtilLoggingLogger *topLogger = JavaUtilLoggingLogger_getLoggerWithNSString_(JavaUtilLoggingLogger_GLOBAL_LOGGER_NAME);
    JavaUtilLoggingLogger *logger = JavaUtilLoggingLogger_getLoggerWithNSString_([EduStanfordNlpUtilLoggingJavaUtilLoggingAdaptor_class_() getName]);
    [((JavaUtilLoggingLogger *) nil_chk(topLogger)) infoWithNSString:@"Starting test"];
    [((JavaUtilLoggingLogger *) nil_chk(logger)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, INFO) withNSString:@"Hello from the class logger"];
    EduStanfordNlpUtilLoggingRedwood_logWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ @"Hello from Redwood!" } count:1 type:NSObject_class_()]);
    [((EduStanfordNlpUtilLoggingRedwood_RecordHandlerTree *) nil_chk(EduStanfordNlpUtilLoggingRedwood_rootHandler())) addChildWithEduStanfordNlpUtilLoggingLogRecordHandler:EduStanfordNlpUtilLoggingRedirectOutputHandler_fromJavaUtilLoggingWithJavaUtilLoggingLogger_(topLogger)];
    EduStanfordNlpUtilLoggingRedwood_logWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ @"Hello from Redwood -> Java!" } count:1 type:NSObject_class_()]);
    EduStanfordNlpUtilLoggingRedwood_logWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ @"Hello from Redwood -> Java again!" } count:1 type:NSObject_class_()]);
    [logger logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, INFO) withNSString:@"Hello again from the class logger"];
    EduStanfordNlpUtilLoggingRedwood_startTrackWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ @"a track" } count:1 type:NSObject_class_()]);
    EduStanfordNlpUtilLoggingRedwood_logWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ @"Inside a track" } count:1 type:NSObject_class_()]);
    [logger logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, INFO) withNSString:@"Hello a third time from the class logger"];
    EduStanfordNlpUtilLoggingRedwood_endTrackWithNSString_(@"a track");
    [logger logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, INFO) withNSString:@"Hello a fourth time from the class logger"];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpUtilLoggingJavaUtilLoggingAdaptor)

@implementation EduStanfordNlpUtilLoggingJavaUtilLoggingAdaptor_RedwoodHandler

- (void)close {
}

- (void)flush {
}

- (void)publishWithJavaUtilLoggingLogRecord:(JavaUtilLoggingLogRecord *)record {
  NSString *message = [((JavaUtilLoggingLogRecord *) nil_chk(record)) getMessage];
  JavaUtilLoggingLevel *level = [record getLevel];
  id tag = nil;
  if (level == JreLoadStatic(JavaUtilLoggingLevel, WARNING)) {
    tag = JreLoadStatic(EduStanfordNlpUtilLoggingRedwood, WARN);
  }
  else if (level == JreLoadStatic(JavaUtilLoggingLevel, SEVERE)) {
    tag = JreLoadStatic(EduStanfordNlpUtilLoggingRedwood, ERR);
  }
  else if ([((JavaUtilLoggingLevel *) nil_chk(level)) intValue] <= [((JavaUtilLoggingLevel *) nil_chk(JreLoadStatic(JavaUtilLoggingLevel, FINE))) intValue]) {
    tag = JreLoadStatic(EduStanfordNlpUtilLoggingRedwood, DBG);
  }
  if (tag == nil) {
    EduStanfordNlpUtilLoggingRedwood_logWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ message } count:1 type:NSObject_class_()]);
  }
  else {
    EduStanfordNlpUtilLoggingRedwood_logWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ tag, message } count:2 type:NSObject_class_()]);
  }
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpUtilLoggingJavaUtilLoggingAdaptor_RedwoodHandler_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(close);
  methods[1].selector = @selector(flush);
  methods[2].selector = @selector(publishWithJavaUtilLoggingLogRecord:);
  methods[3].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LJavaLangSecurityException;", "publish", "LJavaUtilLoggingLogRecord;", "LEduStanfordNlpUtilLoggingJavaUtilLoggingAdaptor;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilLoggingJavaUtilLoggingAdaptor_RedwoodHandler = { "RedwoodHandler", "edu.stanford.nlp.util.logging", ptrTable, methods, NULL, 7, 0x9, 4, 0, 3, -1, -1, -1, -1 };
  return &_EduStanfordNlpUtilLoggingJavaUtilLoggingAdaptor_RedwoodHandler;
}

@end

void EduStanfordNlpUtilLoggingJavaUtilLoggingAdaptor_RedwoodHandler_init(EduStanfordNlpUtilLoggingJavaUtilLoggingAdaptor_RedwoodHandler *self) {
  JavaUtilLoggingConsoleHandler_init(self);
}

EduStanfordNlpUtilLoggingJavaUtilLoggingAdaptor_RedwoodHandler *new_EduStanfordNlpUtilLoggingJavaUtilLoggingAdaptor_RedwoodHandler_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilLoggingJavaUtilLoggingAdaptor_RedwoodHandler, init)
}

EduStanfordNlpUtilLoggingJavaUtilLoggingAdaptor_RedwoodHandler *create_EduStanfordNlpUtilLoggingJavaUtilLoggingAdaptor_RedwoodHandler_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilLoggingJavaUtilLoggingAdaptor_RedwoodHandler, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpUtilLoggingJavaUtilLoggingAdaptor_RedwoodHandler)
