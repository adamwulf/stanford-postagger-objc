//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/util/TwoDimensionalMap.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/util/Generics.h"
#include "edu/stanford/nlp/util/MapFactory.h"
#include "edu/stanford/nlp/util/TwoDimensionalMap.h"
#include "java/lang/Iterable.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/NoSuchElementException.h"
#include "java/util/Set.h"
#include "java/util/Spliterator.h"
#include "java/util/function/Consumer.h"
#include "java/util/function/Function.h"

@interface EduStanfordNlpUtilTwoDimensionalMap () {
 @public
  EduStanfordNlpUtilMapFactory *mf1_;
  EduStanfordNlpUtilMapFactory *mf2_;
}

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpUtilTwoDimensionalMap, mf1_, EduStanfordNlpUtilMapFactory *)
J2OBJC_FIELD_SETTER(EduStanfordNlpUtilTwoDimensionalMap, mf2_, EduStanfordNlpUtilMapFactory *)

inline jlong EduStanfordNlpUtilTwoDimensionalMap_get_serialVersionUID();
#define EduStanfordNlpUtilTwoDimensionalMap_serialVersionUID 2LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpUtilTwoDimensionalMap, serialVersionUID, jlong)

@interface EduStanfordNlpUtilTwoDimensionalMap_TwoDimensionalMapIterator ()

- (void)primeNext;

@end

__attribute__((unused)) static void EduStanfordNlpUtilTwoDimensionalMap_TwoDimensionalMapIterator_primeNext(EduStanfordNlpUtilTwoDimensionalMap_TwoDimensionalMapIterator *self);

@implementation EduStanfordNlpUtilTwoDimensionalMap

- (jint)size {
  jint size = 0;
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((id<JavaUtilMap>) nil_chk(map_)) entrySet])) {
    size += ([((id<JavaUtilMap>) nil_chk([((id<JavaUtilMap_Entry>) nil_chk(entry_)) getValue])) size]);
  }
  return size;
}

- (jboolean)isEmpty {
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((id<JavaUtilMap>) nil_chk(map_)) entrySet])) {
    if (![((id<JavaUtilMap>) nil_chk([((id<JavaUtilMap_Entry>) nil_chk(entry_)) getValue])) isEmpty]) {
      return false;
    }
  }
  return true;
}

- (id)putWithId:(id)key1
         withId:(id)key2
         withId:(id)value {
  id<JavaUtilMap> m = [self getMapWithId:key1];
  return [((id<JavaUtilMap>) nil_chk(m)) putWithId:key2 withId:value];
}

- (void)putWithId:(id)key1 {
  (void) [((id<JavaUtilMap>) nil_chk(map_)) putWithId:key1 withId:[((EduStanfordNlpUtilMapFactory *) nil_chk(mf2_)) newMap]];
}

- (jboolean)containsWithId:(id)key1
                    withId:(id)key2 {
  if (![self containsKeyWithId:key1]) {
    return false;
  }
  return [((id<JavaUtilMap>) nil_chk([self getMapWithId:key1])) containsKeyWithId:key2];
}

- (id)getWithId:(id)key1
         withId:(id)key2 {
  id<JavaUtilMap> m = [self getMapWithId:key1];
  return [((id<JavaUtilMap>) nil_chk(m)) getWithId:key2];
}

- (id)removeWithId:(id)key1
            withId:(id)key2 {
  return [((id<JavaUtilMap>) nil_chk([self getWithId:key1])) removeWithId:key2];
}

- (void)removeWithId:(id)key1 {
  (void) [((id<JavaUtilMap>) nil_chk(map_)) removeWithId:key1];
}

- (void)clear {
  [((id<JavaUtilMap>) nil_chk(map_)) clear];
}

- (jboolean)containsKeyWithId:(id)key1 {
  return [((id<JavaUtilMap>) nil_chk(map_)) containsKeyWithId:key1];
}

- (id<JavaUtilMap>)getWithId:(id)key1 {
  return [self getMapWithId:key1];
}

- (id<JavaUtilMap>)getMapWithId:(id)key1 {
  id<JavaUtilMap> m = [((id<JavaUtilMap>) nil_chk(map_)) getWithId:key1];
  if (m == nil) {
    m = [((EduStanfordNlpUtilMapFactory *) nil_chk(mf2_)) newMap];
    (void) [((id<JavaUtilMap>) nil_chk(map_)) putWithId:key1 withId:m];
  }
  return m;
}

- (id<JavaUtilCollection>)values {
  id<JavaUtilList> s = EduStanfordNlpUtilGenerics_newArrayList();
  for (id<JavaUtilMap> __strong innerMap in nil_chk([((id<JavaUtilMap>) nil_chk(map_)) values])) {
    [((id<JavaUtilList>) nil_chk(s)) addAllWithJavaUtilCollection:[((id<JavaUtilMap>) nil_chk(innerMap)) values]];
  }
  return s;
}

- (id<JavaUtilSet>)firstKeySet {
  return [((id<JavaUtilMap>) nil_chk(map_)) keySet];
}

- (id<JavaUtilSet>)secondKeySet {
  id<JavaUtilSet> keys = EduStanfordNlpUtilGenerics_newHashSet();
  for (id __strong k1 in nil_chk([((id<JavaUtilMap>) nil_chk(map_)) keySet])) {
    [((id<JavaUtilSet>) nil_chk(keys)) addAllWithJavaUtilCollection:[((id<JavaUtilMap>) nil_chk([self getWithId:k1])) keySet]];
  }
  return keys;
}

- (void)addAllWithEduStanfordNlpUtilTwoDimensionalMap:(EduStanfordNlpUtilTwoDimensionalMap *)other
                         withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)function {
  for (EduStanfordNlpUtilTwoDimensionalMap_Entry * __strong entry_ in nil_chk(other)) {
    (void) [self putWithId:[((EduStanfordNlpUtilTwoDimensionalMap_Entry *) nil_chk(entry_)) getFirstKey] withId:[entry_ getSecondKey] withId:[((id<JavaUtilFunctionFunction>) nil_chk(function)) applyWithId:[entry_ getValue]]];
  }
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpUtilTwoDimensionalMap_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithEduStanfordNlpUtilTwoDimensionalMap:(EduStanfordNlpUtilTwoDimensionalMap *)tdm {
  EduStanfordNlpUtilTwoDimensionalMap_initWithEduStanfordNlpUtilTwoDimensionalMap_(self, tdm);
  return self;
}

- (instancetype)initWithEduStanfordNlpUtilMapFactory:(EduStanfordNlpUtilMapFactory *)mf1
                    withEduStanfordNlpUtilMapFactory:(EduStanfordNlpUtilMapFactory *)mf2 {
  EduStanfordNlpUtilTwoDimensionalMap_initWithEduStanfordNlpUtilMapFactory_withEduStanfordNlpUtilMapFactory_(self, mf1, mf2);
  return self;
}

+ (EduStanfordNlpUtilTwoDimensionalMap *)hashMap {
  return EduStanfordNlpUtilTwoDimensionalMap_hashMap();
}

+ (EduStanfordNlpUtilTwoDimensionalMap *)treeMap {
  return EduStanfordNlpUtilTwoDimensionalMap_treeMap();
}

+ (EduStanfordNlpUtilTwoDimensionalMap *)identityHashMap {
  return EduStanfordNlpUtilTwoDimensionalMap_identityHashMap();
}

- (NSString *)description {
  return [((id<JavaUtilMap>) nil_chk(map_)) description];
}

- (jboolean)isEqual:(id)o {
  if (o == self) {
    return true;
  }
  if (!([o isKindOfClass:[EduStanfordNlpUtilTwoDimensionalMap class]])) {
    return false;
  }
  EduStanfordNlpUtilTwoDimensionalMap *other = (EduStanfordNlpUtilTwoDimensionalMap *) cast_chk(o, [EduStanfordNlpUtilTwoDimensionalMap class]);
  return [((id<JavaUtilMap>) nil_chk(map_)) isEqual:((EduStanfordNlpUtilTwoDimensionalMap *) nil_chk(other))->map_];
}

- (NSUInteger)hash {
  return ((jint) [((id<JavaUtilMap>) nil_chk(map_)) hash]);
}

- (id<JavaUtilIterator>)iterator {
  return new_EduStanfordNlpUtilTwoDimensionalMap_TwoDimensionalMapIterator_initWithEduStanfordNlpUtilTwoDimensionalMap_(self);
}

- (id<JavaUtilIterator>)valueIterator {
  return new_EduStanfordNlpUtilTwoDimensionalMap_TwoDimensionalMapValueIterator_initWithEduStanfordNlpUtilTwoDimensionalMap_(self);
}

- (void)forEachWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaLangIterable_forEachWithJavaUtilFunctionConsumer_(self, arg0);
}

- (id<JavaUtilSpliterator>)spliterator {
  return JavaLangIterable_spliterator(self);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "V", 0x1, 0, 3, -1, 4, -1, -1 },
    { NULL, "Z", 0x1, 5, 6, -1, 7, -1, -1 },
    { NULL, "LNSObject;", 0x1, 8, 6, -1, 9, -1, -1 },
    { NULL, "LNSObject;", 0x1, 10, 6, -1, 9, -1, -1 },
    { NULL, "V", 0x1, 10, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 11, 3, -1, 12, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 8, 3, -1, 13, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 14, 3, -1, 13, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, -1, -1, -1, 15, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 16, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 17, -1, -1 },
    { NULL, "V", 0x1, 18, 19, -1, 20, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 21, -1, 22, -1, -1 },
    { NULL, NULL, 0x1, -1, 23, -1, 24, -1, -1 },
    { NULL, "LEduStanfordNlpUtilTwoDimensionalMap;", 0x9, -1, -1, -1, 25, -1, -1 },
    { NULL, "LEduStanfordNlpUtilTwoDimensionalMap;", 0x9, -1, -1, -1, 25, -1, -1 },
    { NULL, "LEduStanfordNlpUtilTwoDimensionalMap;", 0x9, -1, -1, -1, 25, -1, -1 },
    { NULL, "LNSString;", 0x1, 26, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 27, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 28, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 29, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 30, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(size);
  methods[1].selector = @selector(isEmpty);
  methods[2].selector = @selector(putWithId:withId:withId:);
  methods[3].selector = @selector(putWithId:);
  methods[4].selector = @selector(containsWithId:withId:);
  methods[5].selector = @selector(getWithId:withId:);
  methods[6].selector = @selector(removeWithId:withId:);
  methods[7].selector = @selector(removeWithId:);
  methods[8].selector = @selector(clear);
  methods[9].selector = @selector(containsKeyWithId:);
  methods[10].selector = @selector(getWithId:);
  methods[11].selector = @selector(getMapWithId:);
  methods[12].selector = @selector(values);
  methods[13].selector = @selector(firstKeySet);
  methods[14].selector = @selector(secondKeySet);
  methods[15].selector = @selector(addAllWithEduStanfordNlpUtilTwoDimensionalMap:withJavaUtilFunctionFunction:);
  methods[16].selector = @selector(init);
  methods[17].selector = @selector(initWithEduStanfordNlpUtilTwoDimensionalMap:);
  methods[18].selector = @selector(initWithEduStanfordNlpUtilMapFactory:withEduStanfordNlpUtilMapFactory:);
  methods[19].selector = @selector(hashMap);
  methods[20].selector = @selector(treeMap);
  methods[21].selector = @selector(identityHashMap);
  methods[22].selector = @selector(description);
  methods[23].selector = @selector(isEqual:);
  methods[24].selector = @selector(hash);
  methods[25].selector = @selector(iterator);
  methods[26].selector = @selector(valueIterator);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpUtilTwoDimensionalMap_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "mf1_", "LEduStanfordNlpUtilMapFactory;", .constantValue.asLong = 0, 0x12, -1, -1, 31, -1 },
    { "mf2_", "LEduStanfordNlpUtilMapFactory;", .constantValue.asLong = 0, 0x12, -1, -1, 32, -1 },
    { "map_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x0, -1, -1, 33, -1 },
  };
  static const void *ptrTable[] = { "put", "LNSObject;LNSObject;LNSObject;", "(TK1;TK2;TV;)TV;", "LNSObject;", "(TK1;)V", "contains", "LNSObject;LNSObject;", "(TK1;TK2;)Z", "get", "(TK1;TK2;)TV;", "remove", "containsKey", "(TK1;)Z", "(TK1;)Ljava/util/Map<TK2;TV;>;", "getMap", "()Ljava/util/Collection<TV;>;", "()Ljava/util/Set<TK1;>;", "()Ljava/util/Set<TK2;>;", "addAll", "LEduStanfordNlpUtilTwoDimensionalMap;LJavaUtilFunctionFunction;", "<V2:Ljava/lang/Object;>(Ledu/stanford/nlp/util/TwoDimensionalMap<+TK1;+TK2;+TV2;>;Ljava/util/function/Function<TV2;TV;>;)V", "LEduStanfordNlpUtilTwoDimensionalMap;", "(Ledu/stanford/nlp/util/TwoDimensionalMap<TK1;TK2;TV;>;)V", "LEduStanfordNlpUtilMapFactory;LEduStanfordNlpUtilMapFactory;", "(Ledu/stanford/nlp/util/MapFactory<TK1;Ljava/util/Map<TK2;TV;>;>;Ledu/stanford/nlp/util/MapFactory<TK2;TV;>;)V", "<K1:Ljava/lang/Object;K2:Ljava/lang/Object;V:Ljava/lang/Object;>()Ledu/stanford/nlp/util/TwoDimensionalMap<TK1;TK2;TV;>;", "toString", "equals", "hashCode", "()Ljava/util/Iterator<Ledu/stanford/nlp/util/TwoDimensionalMap$Entry<TK1;TK2;TV;>;>;", "()Ljava/util/Iterator<TV;>;", "Ledu/stanford/nlp/util/MapFactory<TK1;Ljava/util/Map<TK2;TV;>;>;", "Ledu/stanford/nlp/util/MapFactory<TK2;TV;>;", "Ljava/util/Map<TK1;Ljava/util/Map<TK2;TV;>;>;", "LEduStanfordNlpUtilTwoDimensionalMap_TwoDimensionalMapValueIterator;LEduStanfordNlpUtilTwoDimensionalMap_Entry;LEduStanfordNlpUtilTwoDimensionalMap_TwoDimensionalMapIterator;", "<K1:Ljava/lang/Object;K2:Ljava/lang/Object;V:Ljava/lang/Object;>Ljava/lang/Object;Ljava/io/Serializable;Ljava/lang/Iterable<Ledu/stanford/nlp/util/TwoDimensionalMap$Entry<TK1;TK2;TV;>;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilTwoDimensionalMap = { "TwoDimensionalMap", "edu.stanford.nlp.util", ptrTable, methods, fields, 7, 0x1, 27, 4, -1, 34, -1, 35, -1 };
  return &_EduStanfordNlpUtilTwoDimensionalMap;
}

@end

void EduStanfordNlpUtilTwoDimensionalMap_init(EduStanfordNlpUtilTwoDimensionalMap *self) {
  EduStanfordNlpUtilTwoDimensionalMap_initWithEduStanfordNlpUtilMapFactory_withEduStanfordNlpUtilMapFactory_(self, EduStanfordNlpUtilMapFactory_hashMapFactory(), EduStanfordNlpUtilMapFactory_hashMapFactory());
}

EduStanfordNlpUtilTwoDimensionalMap *new_EduStanfordNlpUtilTwoDimensionalMap_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilTwoDimensionalMap, init)
}

EduStanfordNlpUtilTwoDimensionalMap *create_EduStanfordNlpUtilTwoDimensionalMap_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilTwoDimensionalMap, init)
}

void EduStanfordNlpUtilTwoDimensionalMap_initWithEduStanfordNlpUtilTwoDimensionalMap_(EduStanfordNlpUtilTwoDimensionalMap *self, EduStanfordNlpUtilTwoDimensionalMap *tdm) {
  EduStanfordNlpUtilTwoDimensionalMap_initWithEduStanfordNlpUtilMapFactory_withEduStanfordNlpUtilMapFactory_(self, ((EduStanfordNlpUtilTwoDimensionalMap *) nil_chk(tdm))->mf1_, tdm->mf2_);
  for (id __strong k1 in nil_chk([((id<JavaUtilMap>) nil_chk(tdm->map_)) keySet])) {
    id<JavaUtilMap> m = [((id<JavaUtilMap>) nil_chk(tdm->map_)) getWithId:k1];
    id<JavaUtilMap> copy_ = [((EduStanfordNlpUtilMapFactory *) nil_chk(self->mf2_)) newMap];
    [((id<JavaUtilMap>) nil_chk(copy_)) putAllWithJavaUtilMap:m];
    (void) [((id<JavaUtilMap>) nil_chk(self->map_)) putWithId:k1 withId:copy_];
  }
}

EduStanfordNlpUtilTwoDimensionalMap *new_EduStanfordNlpUtilTwoDimensionalMap_initWithEduStanfordNlpUtilTwoDimensionalMap_(EduStanfordNlpUtilTwoDimensionalMap *tdm) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilTwoDimensionalMap, initWithEduStanfordNlpUtilTwoDimensionalMap_, tdm)
}

EduStanfordNlpUtilTwoDimensionalMap *create_EduStanfordNlpUtilTwoDimensionalMap_initWithEduStanfordNlpUtilTwoDimensionalMap_(EduStanfordNlpUtilTwoDimensionalMap *tdm) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilTwoDimensionalMap, initWithEduStanfordNlpUtilTwoDimensionalMap_, tdm)
}

void EduStanfordNlpUtilTwoDimensionalMap_initWithEduStanfordNlpUtilMapFactory_withEduStanfordNlpUtilMapFactory_(EduStanfordNlpUtilTwoDimensionalMap *self, EduStanfordNlpUtilMapFactory *mf1, EduStanfordNlpUtilMapFactory *mf2) {
  NSObject_init(self);
  self->mf1_ = mf1;
  self->mf2_ = mf2;
  self->map_ = [((EduStanfordNlpUtilMapFactory *) nil_chk(mf1)) newMap];
}

EduStanfordNlpUtilTwoDimensionalMap *new_EduStanfordNlpUtilTwoDimensionalMap_initWithEduStanfordNlpUtilMapFactory_withEduStanfordNlpUtilMapFactory_(EduStanfordNlpUtilMapFactory *mf1, EduStanfordNlpUtilMapFactory *mf2) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilTwoDimensionalMap, initWithEduStanfordNlpUtilMapFactory_withEduStanfordNlpUtilMapFactory_, mf1, mf2)
}

EduStanfordNlpUtilTwoDimensionalMap *create_EduStanfordNlpUtilTwoDimensionalMap_initWithEduStanfordNlpUtilMapFactory_withEduStanfordNlpUtilMapFactory_(EduStanfordNlpUtilMapFactory *mf1, EduStanfordNlpUtilMapFactory *mf2) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilTwoDimensionalMap, initWithEduStanfordNlpUtilMapFactory_withEduStanfordNlpUtilMapFactory_, mf1, mf2)
}

EduStanfordNlpUtilTwoDimensionalMap *EduStanfordNlpUtilTwoDimensionalMap_hashMap() {
  EduStanfordNlpUtilTwoDimensionalMap_initialize();
  return new_EduStanfordNlpUtilTwoDimensionalMap_initWithEduStanfordNlpUtilMapFactory_withEduStanfordNlpUtilMapFactory_(EduStanfordNlpUtilMapFactory_hashMapFactory(), EduStanfordNlpUtilMapFactory_hashMapFactory());
}

EduStanfordNlpUtilTwoDimensionalMap *EduStanfordNlpUtilTwoDimensionalMap_treeMap() {
  EduStanfordNlpUtilTwoDimensionalMap_initialize();
  return new_EduStanfordNlpUtilTwoDimensionalMap_initWithEduStanfordNlpUtilMapFactory_withEduStanfordNlpUtilMapFactory_(EduStanfordNlpUtilMapFactory_treeMapFactory(), EduStanfordNlpUtilMapFactory_treeMapFactory());
}

EduStanfordNlpUtilTwoDimensionalMap *EduStanfordNlpUtilTwoDimensionalMap_identityHashMap() {
  EduStanfordNlpUtilTwoDimensionalMap_initialize();
  return new_EduStanfordNlpUtilTwoDimensionalMap_initWithEduStanfordNlpUtilMapFactory_withEduStanfordNlpUtilMapFactory_(EduStanfordNlpUtilMapFactory_identityHashMapFactory(), EduStanfordNlpUtilMapFactory_identityHashMapFactory());
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpUtilTwoDimensionalMap)

@implementation EduStanfordNlpUtilTwoDimensionalMap_TwoDimensionalMapValueIterator

- (instancetype)initWithEduStanfordNlpUtilTwoDimensionalMap:(EduStanfordNlpUtilTwoDimensionalMap *)map {
  EduStanfordNlpUtilTwoDimensionalMap_TwoDimensionalMapValueIterator_initWithEduStanfordNlpUtilTwoDimensionalMap_(self, map);
  return self;
}

- (jboolean)hasNext {
  return [((id<JavaUtilIterator>) nil_chk(entryIterator_)) hasNext];
}

- (id)next {
  EduStanfordNlpUtilTwoDimensionalMap_Entry *next = [((id<JavaUtilIterator>) nil_chk(entryIterator_)) next];
  return [((EduStanfordNlpUtilTwoDimensionalMap_Entry *) nil_chk(next)) getValue];
}

- (void)remove {
  [((id<JavaUtilIterator>) nil_chk(entryIterator_)) remove];
}

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaUtilIterator_forEachRemainingWithJavaUtilFunctionConsumer_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpUtilTwoDimensionalMap:);
  methods[1].selector = @selector(hasNext);
  methods[2].selector = @selector(next);
  methods[3].selector = @selector(remove);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "entryIterator_", "LJavaUtilIterator;", .constantValue.asLong = 0, 0x0, -1, -1, 3, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpUtilTwoDimensionalMap;", "(Ledu/stanford/nlp/util/TwoDimensionalMap<TK1;TK2;TV;>;)V", "()TV;", "Ljava/util/Iterator<Ledu/stanford/nlp/util/TwoDimensionalMap$Entry<TK1;TK2;TV;>;>;", "<K1:Ljava/lang/Object;K2:Ljava/lang/Object;V:Ljava/lang/Object;>Ljava/lang/Object;Ljava/util/Iterator<TV;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilTwoDimensionalMap_TwoDimensionalMapValueIterator = { "TwoDimensionalMapValueIterator", "edu.stanford.nlp.util", ptrTable, methods, fields, 7, 0x8, 4, 1, 0, -1, -1, 4, -1 };
  return &_EduStanfordNlpUtilTwoDimensionalMap_TwoDimensionalMapValueIterator;
}

@end

void EduStanfordNlpUtilTwoDimensionalMap_TwoDimensionalMapValueIterator_initWithEduStanfordNlpUtilTwoDimensionalMap_(EduStanfordNlpUtilTwoDimensionalMap_TwoDimensionalMapValueIterator *self, EduStanfordNlpUtilTwoDimensionalMap *map) {
  NSObject_init(self);
  self->entryIterator_ = [((EduStanfordNlpUtilTwoDimensionalMap *) nil_chk(map)) iterator];
}

EduStanfordNlpUtilTwoDimensionalMap_TwoDimensionalMapValueIterator *new_EduStanfordNlpUtilTwoDimensionalMap_TwoDimensionalMapValueIterator_initWithEduStanfordNlpUtilTwoDimensionalMap_(EduStanfordNlpUtilTwoDimensionalMap *map) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilTwoDimensionalMap_TwoDimensionalMapValueIterator, initWithEduStanfordNlpUtilTwoDimensionalMap_, map)
}

EduStanfordNlpUtilTwoDimensionalMap_TwoDimensionalMapValueIterator *create_EduStanfordNlpUtilTwoDimensionalMap_TwoDimensionalMapValueIterator_initWithEduStanfordNlpUtilTwoDimensionalMap_(EduStanfordNlpUtilTwoDimensionalMap *map) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilTwoDimensionalMap_TwoDimensionalMapValueIterator, initWithEduStanfordNlpUtilTwoDimensionalMap_, map)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpUtilTwoDimensionalMap_TwoDimensionalMapValueIterator)

@implementation EduStanfordNlpUtilTwoDimensionalMap_Entry

- (instancetype)initWithId:(id)k1
                    withId:(id)k2
                    withId:(id)v {
  EduStanfordNlpUtilTwoDimensionalMap_Entry_initWithId_withId_withId_(self, k1, k2, v);
  return self;
}

- (id)getFirstKey {
  return firstKey_;
}

- (id)getSecondKey {
  return secondKey_;
}

- (id)getValue {
  return value_;
}

- (NSString *)description {
  return JreStrcat("C@C@C@C", '(', firstKey_, ',', secondKey_, ',', value_, ')');
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 4, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithId:withId:withId:);
  methods[1].selector = @selector(getFirstKey);
  methods[2].selector = @selector(getSecondKey);
  methods[3].selector = @selector(getValue);
  methods[4].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "firstKey_", "LNSObject;", .constantValue.asLong = 0, 0x0, -1, -1, 6, -1 },
    { "secondKey_", "LNSObject;", .constantValue.asLong = 0, 0x0, -1, -1, 7, -1 },
    { "value_", "LNSObject;", .constantValue.asLong = 0, 0x0, -1, -1, 8, -1 },
  };
  static const void *ptrTable[] = { "LNSObject;LNSObject;LNSObject;", "(TK1;TK2;TV;)V", "()TK1;", "()TK2;", "()TV;", "toString", "TK1;", "TK2;", "TV;", "LEduStanfordNlpUtilTwoDimensionalMap;", "<K1:Ljava/lang/Object;K2:Ljava/lang/Object;V:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilTwoDimensionalMap_Entry = { "Entry", "edu.stanford.nlp.util", ptrTable, methods, fields, 7, 0x9, 5, 3, 9, -1, -1, 10, -1 };
  return &_EduStanfordNlpUtilTwoDimensionalMap_Entry;
}

@end

void EduStanfordNlpUtilTwoDimensionalMap_Entry_initWithId_withId_withId_(EduStanfordNlpUtilTwoDimensionalMap_Entry *self, id k1, id k2, id v) {
  NSObject_init(self);
  self->firstKey_ = k1;
  self->secondKey_ = k2;
  self->value_ = v;
}

EduStanfordNlpUtilTwoDimensionalMap_Entry *new_EduStanfordNlpUtilTwoDimensionalMap_Entry_initWithId_withId_withId_(id k1, id k2, id v) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilTwoDimensionalMap_Entry, initWithId_withId_withId_, k1, k2, v)
}

EduStanfordNlpUtilTwoDimensionalMap_Entry *create_EduStanfordNlpUtilTwoDimensionalMap_Entry_initWithId_withId_withId_(id k1, id k2, id v) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilTwoDimensionalMap_Entry, initWithId_withId_withId_, k1, k2, v)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpUtilTwoDimensionalMap_Entry)

@implementation EduStanfordNlpUtilTwoDimensionalMap_TwoDimensionalMapIterator

- (instancetype)initWithEduStanfordNlpUtilTwoDimensionalMap:(EduStanfordNlpUtilTwoDimensionalMap *)map {
  EduStanfordNlpUtilTwoDimensionalMap_TwoDimensionalMapIterator_initWithEduStanfordNlpUtilTwoDimensionalMap_(self, map);
  return self;
}

- (jboolean)hasNext {
  return next_ != nil;
}

- (EduStanfordNlpUtilTwoDimensionalMap_Entry *)next {
  if (next_ == nil) {
    @throw new_JavaUtilNoSuchElementException_init();
  }
  EduStanfordNlpUtilTwoDimensionalMap_Entry *result = next_;
  EduStanfordNlpUtilTwoDimensionalMap_TwoDimensionalMapIterator_primeNext(self);
  return result;
}

- (void)primeNext {
  EduStanfordNlpUtilTwoDimensionalMap_TwoDimensionalMapIterator_primeNext(self);
}

- (void)remove {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaUtilIterator_forEachRemainingWithJavaUtilFunctionConsumer_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpUtilTwoDimensionalMap_Entry;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpUtilTwoDimensionalMap:);
  methods[1].selector = @selector(hasNext);
  methods[2].selector = @selector(next);
  methods[3].selector = @selector(primeNext);
  methods[4].selector = @selector(remove);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "outerIterator_", "LJavaUtilIterator;", .constantValue.asLong = 0, 0x0, -1, -1, 3, -1 },
    { "innerIterator_", "LJavaUtilIterator;", .constantValue.asLong = 0, 0x0, -1, -1, 4, -1 },
    { "next_", "LEduStanfordNlpUtilTwoDimensionalMap_Entry;", .constantValue.asLong = 0, 0x0, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpUtilTwoDimensionalMap;", "(Ledu/stanford/nlp/util/TwoDimensionalMap<TK1;TK2;TV;>;)V", "()Ledu/stanford/nlp/util/TwoDimensionalMap$Entry<TK1;TK2;TV;>;", "Ljava/util/Iterator<Ljava/util/Map$Entry<TK1;Ljava/util/Map<TK2;TV;>;>;>;", "Ljava/util/Iterator<Ljava/util/Map$Entry<TK2;TV;>;>;", "Ledu/stanford/nlp/util/TwoDimensionalMap$Entry<TK1;TK2;TV;>;", "<K1:Ljava/lang/Object;K2:Ljava/lang/Object;V:Ljava/lang/Object;>Ljava/lang/Object;Ljava/util/Iterator<Ledu/stanford/nlp/util/TwoDimensionalMap$Entry<TK1;TK2;TV;>;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpUtilTwoDimensionalMap_TwoDimensionalMapIterator = { "TwoDimensionalMapIterator", "edu.stanford.nlp.util", ptrTable, methods, fields, 7, 0x8, 5, 3, 0, -1, -1, 6, -1 };
  return &_EduStanfordNlpUtilTwoDimensionalMap_TwoDimensionalMapIterator;
}

@end

void EduStanfordNlpUtilTwoDimensionalMap_TwoDimensionalMapIterator_initWithEduStanfordNlpUtilTwoDimensionalMap_(EduStanfordNlpUtilTwoDimensionalMap_TwoDimensionalMapIterator *self, EduStanfordNlpUtilTwoDimensionalMap *map) {
  NSObject_init(self);
  self->outerIterator_ = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(((EduStanfordNlpUtilTwoDimensionalMap *) nil_chk(map))->map_)) entrySet])) iterator];
  EduStanfordNlpUtilTwoDimensionalMap_TwoDimensionalMapIterator_primeNext(self);
}

EduStanfordNlpUtilTwoDimensionalMap_TwoDimensionalMapIterator *new_EduStanfordNlpUtilTwoDimensionalMap_TwoDimensionalMapIterator_initWithEduStanfordNlpUtilTwoDimensionalMap_(EduStanfordNlpUtilTwoDimensionalMap *map) {
  J2OBJC_NEW_IMPL(EduStanfordNlpUtilTwoDimensionalMap_TwoDimensionalMapIterator, initWithEduStanfordNlpUtilTwoDimensionalMap_, map)
}

EduStanfordNlpUtilTwoDimensionalMap_TwoDimensionalMapIterator *create_EduStanfordNlpUtilTwoDimensionalMap_TwoDimensionalMapIterator_initWithEduStanfordNlpUtilTwoDimensionalMap_(EduStanfordNlpUtilTwoDimensionalMap *map) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpUtilTwoDimensionalMap_TwoDimensionalMapIterator, initWithEduStanfordNlpUtilTwoDimensionalMap_, map)
}

void EduStanfordNlpUtilTwoDimensionalMap_TwoDimensionalMapIterator_primeNext(EduStanfordNlpUtilTwoDimensionalMap_TwoDimensionalMapIterator *self) {
  id k1 = nil;
  if (self->next_ != nil) {
    k1 = [self->next_ getFirstKey];
  }
  while (self->innerIterator_ == nil || ![self->innerIterator_ hasNext]) {
    if (![((id<JavaUtilIterator>) nil_chk(self->outerIterator_)) hasNext]) {
      self->next_ = nil;
      return;
    }
    id<JavaUtilMap_Entry> outerEntry = [((id<JavaUtilIterator>) nil_chk(self->outerIterator_)) next];
    k1 = [((id<JavaUtilMap_Entry>) nil_chk(outerEntry)) getKey];
    self->innerIterator_ = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk([outerEntry getValue])) entrySet])) iterator];
  }
  id<JavaUtilMap_Entry> innerEntry = [self->innerIterator_ next];
  self->next_ = new_EduStanfordNlpUtilTwoDimensionalMap_Entry_initWithId_withId_withId_(k1, [((id<JavaUtilMap_Entry>) nil_chk(innerEntry)) getKey], [innerEntry getValue]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpUtilTwoDimensionalMap_TwoDimensionalMapIterator)
