//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/util/concurrent/MulticoreWrapper.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_EduStanfordNlpUtilConcurrentMulticoreWrapper")
#ifdef RESTRICT_EduStanfordNlpUtilConcurrentMulticoreWrapper
#define INCLUDE_ALL_EduStanfordNlpUtilConcurrentMulticoreWrapper 0
#else
#define INCLUDE_ALL_EduStanfordNlpUtilConcurrentMulticoreWrapper 1
#endif
#undef RESTRICT_EduStanfordNlpUtilConcurrentMulticoreWrapper

#if !defined (EduStanfordNlpUtilConcurrentMulticoreWrapper_) && (INCLUDE_ALL_EduStanfordNlpUtilConcurrentMulticoreWrapper || defined(INCLUDE_EduStanfordNlpUtilConcurrentMulticoreWrapper))
#define EduStanfordNlpUtilConcurrentMulticoreWrapper_

@class JavaLangInteger;
@class JavaUtilConcurrentThreadPoolExecutor;
@protocol EduStanfordNlpUtilConcurrentThreadsafeProcessor;
@protocol JavaUtilConcurrentBlockingQueue;

@interface EduStanfordNlpUtilConcurrentMulticoreWrapper : NSObject {
 @public
  jint nThreads_;
  jint submittedItemCounter_;
  JavaUtilConcurrentThreadPoolExecutor *threadPool_;
  id<JavaUtilConcurrentBlockingQueue> idleProcessors_;
}

#pragma mark Public

- (instancetype)initWithInt:(jint)nThreads
withEduStanfordNlpUtilConcurrentThreadsafeProcessor:(id<EduStanfordNlpUtilConcurrentThreadsafeProcessor>)processor;

- (instancetype)initWithInt:(jint)numThreads
withEduStanfordNlpUtilConcurrentThreadsafeProcessor:(id<EduStanfordNlpUtilConcurrentThreadsafeProcessor>)processor
                withBoolean:(jboolean)orderResults;

- (void)join;

- (void)joinWithBoolean:(jboolean)destroyThreadpool;

- (jint)nThreads;

- (jboolean)peek;

- (id)poll;

- (void)putWithId:(id)item;

- (NSString *)description;

#pragma mark Protected

- (JavaUtilConcurrentThreadPoolExecutor *)buildThreadPoolWithInt:(jint)nThreads;

#pragma mark Package-Private

- (JavaLangInteger *)getProcessor;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpUtilConcurrentMulticoreWrapper)

J2OBJC_FIELD_SETTER(EduStanfordNlpUtilConcurrentMulticoreWrapper, threadPool_, JavaUtilConcurrentThreadPoolExecutor *)
J2OBJC_FIELD_SETTER(EduStanfordNlpUtilConcurrentMulticoreWrapper, idleProcessors_, id<JavaUtilConcurrentBlockingQueue>)

FOUNDATION_EXPORT void EduStanfordNlpUtilConcurrentMulticoreWrapper_initWithInt_withEduStanfordNlpUtilConcurrentThreadsafeProcessor_(EduStanfordNlpUtilConcurrentMulticoreWrapper *self, jint nThreads, id<EduStanfordNlpUtilConcurrentThreadsafeProcessor> processor);

FOUNDATION_EXPORT EduStanfordNlpUtilConcurrentMulticoreWrapper *new_EduStanfordNlpUtilConcurrentMulticoreWrapper_initWithInt_withEduStanfordNlpUtilConcurrentThreadsafeProcessor_(jint nThreads, id<EduStanfordNlpUtilConcurrentThreadsafeProcessor> processor) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EduStanfordNlpUtilConcurrentMulticoreWrapper *create_EduStanfordNlpUtilConcurrentMulticoreWrapper_initWithInt_withEduStanfordNlpUtilConcurrentThreadsafeProcessor_(jint nThreads, id<EduStanfordNlpUtilConcurrentThreadsafeProcessor> processor);

FOUNDATION_EXPORT void EduStanfordNlpUtilConcurrentMulticoreWrapper_initWithInt_withEduStanfordNlpUtilConcurrentThreadsafeProcessor_withBoolean_(EduStanfordNlpUtilConcurrentMulticoreWrapper *self, jint numThreads, id<EduStanfordNlpUtilConcurrentThreadsafeProcessor> processor, jboolean orderResults);

FOUNDATION_EXPORT EduStanfordNlpUtilConcurrentMulticoreWrapper *new_EduStanfordNlpUtilConcurrentMulticoreWrapper_initWithInt_withEduStanfordNlpUtilConcurrentThreadsafeProcessor_withBoolean_(jint numThreads, id<EduStanfordNlpUtilConcurrentThreadsafeProcessor> processor, jboolean orderResults) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EduStanfordNlpUtilConcurrentMulticoreWrapper *create_EduStanfordNlpUtilConcurrentMulticoreWrapper_initWithInt_withEduStanfordNlpUtilConcurrentThreadsafeProcessor_withBoolean_(jint numThreads, id<EduStanfordNlpUtilConcurrentThreadsafeProcessor> processor, jboolean orderResults);

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpUtilConcurrentMulticoreWrapper)

#endif

#if !defined (EduStanfordNlpUtilConcurrentMulticoreWrapper_CallableJob_) && (INCLUDE_ALL_EduStanfordNlpUtilConcurrentMulticoreWrapper || defined(INCLUDE_EduStanfordNlpUtilConcurrentMulticoreWrapper_CallableJob))
#define EduStanfordNlpUtilConcurrentMulticoreWrapper_CallableJob_

#define RESTRICT_JavaUtilConcurrentCallable 1
#define INCLUDE_JavaUtilConcurrentCallable 1
#include "java/util/concurrent/Callable.h"

@class JavaLangInteger;
@protocol EduStanfordNlpUtilConcurrentMulticoreWrapper_JobCallback;
@protocol EduStanfordNlpUtilConcurrentThreadsafeProcessor;

@interface EduStanfordNlpUtilConcurrentMulticoreWrapper_CallableJob : NSObject < JavaUtilConcurrentCallable > {
 @public
  id item_;
}

#pragma mark Public

- (instancetype)initWithId:(id)item
                   withInt:(jint)itemId
withEduStanfordNlpUtilConcurrentThreadsafeProcessor:(id<EduStanfordNlpUtilConcurrentThreadsafeProcessor>)processor
                   withInt:(jint)processorId
withEduStanfordNlpUtilConcurrentMulticoreWrapper_JobCallback:(id<EduStanfordNlpUtilConcurrentMulticoreWrapper_JobCallback>)callback;

- (JavaLangInteger *)call;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpUtilConcurrentMulticoreWrapper_CallableJob)

J2OBJC_FIELD_SETTER(EduStanfordNlpUtilConcurrentMulticoreWrapper_CallableJob, item_, id)

FOUNDATION_EXPORT void EduStanfordNlpUtilConcurrentMulticoreWrapper_CallableJob_initWithId_withInt_withEduStanfordNlpUtilConcurrentThreadsafeProcessor_withInt_withEduStanfordNlpUtilConcurrentMulticoreWrapper_JobCallback_(EduStanfordNlpUtilConcurrentMulticoreWrapper_CallableJob *self, id item, jint itemId, id<EduStanfordNlpUtilConcurrentThreadsafeProcessor> processor, jint processorId, id<EduStanfordNlpUtilConcurrentMulticoreWrapper_JobCallback> callback);

FOUNDATION_EXPORT EduStanfordNlpUtilConcurrentMulticoreWrapper_CallableJob *new_EduStanfordNlpUtilConcurrentMulticoreWrapper_CallableJob_initWithId_withInt_withEduStanfordNlpUtilConcurrentThreadsafeProcessor_withInt_withEduStanfordNlpUtilConcurrentMulticoreWrapper_JobCallback_(id item, jint itemId, id<EduStanfordNlpUtilConcurrentThreadsafeProcessor> processor, jint processorId, id<EduStanfordNlpUtilConcurrentMulticoreWrapper_JobCallback> callback) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EduStanfordNlpUtilConcurrentMulticoreWrapper_CallableJob *create_EduStanfordNlpUtilConcurrentMulticoreWrapper_CallableJob_initWithId_withInt_withEduStanfordNlpUtilConcurrentThreadsafeProcessor_withInt_withEduStanfordNlpUtilConcurrentMulticoreWrapper_JobCallback_(id item, jint itemId, id<EduStanfordNlpUtilConcurrentThreadsafeProcessor> processor, jint processorId, id<EduStanfordNlpUtilConcurrentMulticoreWrapper_JobCallback> callback);

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpUtilConcurrentMulticoreWrapper_CallableJob)

#endif

#pragma pop_macro("INCLUDE_ALL_EduStanfordNlpUtilConcurrentMulticoreWrapper")
