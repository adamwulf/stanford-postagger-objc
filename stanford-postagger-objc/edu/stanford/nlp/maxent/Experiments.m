//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/maxent/Experiments.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/io/IOUtils.h"
#include "edu/stanford/nlp/io/PrintFile.h"
#include "edu/stanford/nlp/maxent/Experiments.h"
#include "edu/stanford/nlp/util/HashIndex.h"
#include "edu/stanford/nlp/util/Index.h"
#include "edu/stanford/nlp/util/IntPair.h"
#include "java/io/BufferedReader.h"
#include "java/io/PrintStream.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"

@interface EduStanfordNlpMaxentExperiments () {
 @public
  JavaUtilArrayList *v_;
}

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpMaxentExperiments, v_, JavaUtilArrayList *)

__attribute__((unused)) static void EduStanfordNlpMaxentExperiments_ptilde(EduStanfordNlpMaxentExperiments *self);

@implementation EduStanfordNlpMaxentExperiments

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpMaxentExperiments_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithIntArray2:(IOSObjectArray *)vArray {
  EduStanfordNlpMaxentExperiments_initWithIntArray2_(self, vArray);
  return self;
}

- (instancetype)initWithIntArray2:(IOSObjectArray *)vArray
                     withIntArray:(IOSIntArray *)maxYs {
  EduStanfordNlpMaxentExperiments_initWithIntArray2_withIntArray_(self, vArray, maxYs);
  return self;
}

- (instancetype)initWithIntArray2:(IOSObjectArray *)vArray
                          withInt:(jint)ySize {
  EduStanfordNlpMaxentExperiments_initWithIntArray2_withInt_(self, vArray, ySize);
  return self;
}

- (id<EduStanfordNlpUtilIndex>)createIndex {
  id<EduStanfordNlpUtilIndex> index = new_EduStanfordNlpUtilHashIndex_init();
  for (jint x = 0; x < ((IOSIntArray *) nil_chk(px_))->size_; x++) {
    jint numberY = [self numYWithInt:x];
    for (jint y = 0; y < numberY; y++) {
      [index addWithId:new_EduStanfordNlpUtilIntPair_initWithInt_withInt_(x, y)];
    }
  }
  return index;
}

- (instancetype)initWithNSString:(NSString *)filename {
  EduStanfordNlpMaxentExperiments_initWithNSString_(self, filename);
  return self;
}

- (void)addWithEduStanfordNlpMaxentExperiments:(EduStanfordNlpMaxentExperiments *)m {
  [((JavaUtilArrayList *) nil_chk(v_)) addWithId:m];
}

- (void)ptilde {
  EduStanfordNlpMaxentExperiments_ptilde(self);
}

- (void)setMaxYWithIntArray:(IOSIntArray *)maxY {
  self->maxY_ = maxY;
}

- (jint)numYWithInt:(jint)x {
  return IOSIntArray_Get(nil_chk(maxY_), x);
}

- (void)ptildeWithInt:(jint)ySize {
  jint maxX = 0;
  jint maxY = 0;
  self->ySize_ = ySize;
  {
    IOSObjectArray *a__ = vArray_;
    IOSIntArray * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    IOSIntArray * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      IOSIntArray *sample = *b__++;
      if (maxX < IOSIntArray_Get(nil_chk(sample), 0)) {
        maxX = IOSIntArray_Get(sample, 0);
      }
      if (maxY < IOSIntArray_Get(sample, 1)) {
        maxY = IOSIntArray_Get(sample, 1);
      }
    }
  }
  px_ = [IOSIntArray newArrayWithLength:maxX + 1];
  maxY = ySize - 1;
  py_ = [IOSIntArray newArrayWithLength:ySize];
  pxy_ = [IOSIntArray newArrayWithDimensions:2 lengths:(jint[]){ maxX + 1, dim_ }];
  xSize_ = maxX + 1;
  ySize = maxY + 1;
  IOSIntArray *yArr = [IOSIntArray newArrayWithLength:dim_];
  {
    IOSObjectArray *a__ = vArray_;
    IOSIntArray * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    IOSIntArray * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      IOSIntArray *sample = *b__++;
      jint xC = IOSIntArray_Get(nil_chk(sample), 0);
      jint yC = IOSIntArray_Get(sample, 1);
      (*IOSIntArray_GetRef(px_, xC))++;
      (*IOSIntArray_GetRef(py_, yC))++;
      for (jint j = 0; j < dim_; j++) {
        *IOSIntArray_GetRef(yArr, j) = IOSIntArray_Get(nil_chk(IOSObjectArray_Get(pxy_, xC)), j) > 0 ? IOSIntArray_Get(nil_chk(IOSObjectArray_Get(pxy_, xC)), j) % ySize : -1;
      }
      for (jint j = 0; j < dim_; j++) {
        if (IOSIntArray_Get(yArr, j) == -1) {
          *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(pxy_, xC)), j) = ySize + yC;
          break;
        }
        if (yC == IOSIntArray_Get(yArr, j)) {
          *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(pxy_, xC)), j) += ySize;
          break;
        }
      }
    }
  }
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I", @"ySize is", ySize)];
  for (jint y = 0; y < ySize; y++) {
    jdouble sum = 0.0;
    for (jint x = 0; x < xSize_; x++) {
      jdouble p1 = [self ptildeXYWithInt:x withInt:y];
      sum = sum + p1;
    }
    if (JavaLangMath_absWithDouble_([self ptildeYWithInt:y] - sum) > 0.00001) {
      [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$I$D$D", @"Experiments error: for y=", y, @", ptildeY(y)=", [self ptildeYWithInt:y], @" but Sum_x ptildeXY(x,y)=", sum)];
    }
    else {
      [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$I$D", @"Experiments: for y ", y, @" Sum_x ptildeXY(x,y)=", sum)];
    }
  }
}

- (jdouble)ptildeXWithInt:(jint)x {
  if (x > xSize_ - 1) {
    return 0.0;
  }
  return IOSIntArray_Get(nil_chk(px_), x) / (jdouble) ((IOSObjectArray *) nil_chk(vArray_))->size_;
}

- (jdouble)ptildeYWithInt:(jint)y {
  if (y > ySize_ - 1) {
    return 0.0;
  }
  return IOSIntArray_Get(nil_chk(py_), y) / (jdouble) [self size];
}

- (jdouble)ptildeXYWithInt:(jint)x
                   withInt:(jint)y {
  for (jint j = 0; j < dim_; j++) {
    if (y == IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(pxy_), x)), j) % ySize_) {
      return (IOSIntArray_Get(nil_chk(IOSObjectArray_Get(pxy_, x)), j) / ySize_) / (jdouble) [self size];
    }
  }
  return 0.0;
}

- (IOSIntArray *)getWithInt:(jint)index {
  return IOSObjectArray_Get(nil_chk(vArray_), index);
}

- (jint)size {
  return ((IOSObjectArray *) nil_chk(vArray_))->size_;
}

- (jint)getNumber {
  return ((IOSObjectArray *) nil_chk(vArray_))->size_;
}

- (void)print {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@" Experiments : "];
  for (jint i = 0; i < [self size]; i++) {
    [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("I$I", IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(vArray_), i)), 0), @" : ", IOSIntArray_Get(nil_chk(IOSObjectArray_Get(vArray_, i)), 1))];
  }
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@" p(x) "];
  for (jint i = 0; i < xSize_; i++) {
    [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("I$D", i, @" : ", [self ptildeXWithInt:i])];
  }
  [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:@" p(y) "];
  for (jint i = 0; i < ySize_; i++) {
    [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("I$D", i, @" : ", [self ptildeYWithInt:i])];
  }
}

- (void)printWithEduStanfordNlpIoPrintFile:(EduStanfordNlpIoPrintFile *)pf {
  [((EduStanfordNlpIoPrintFile *) nil_chk(pf)) printlnWithNSString:@" Experiments : "];
  for (jint i = 0; i < [self size]; i++) {
    [pf printlnWithNSString:JreStrcat("I$I", IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(vArray_), i)), 0), @" : ", IOSIntArray_Get(nil_chk(IOSObjectArray_Get(vArray_, i)), 1))];
  }
  [pf printlnWithNSString:@" p(x) "];
  for (jint i = 0; i < xSize_; i++) {
    [pf printlnWithNSString:JreStrcat("I$D", i, @" : ", [self ptildeXWithInt:i])];
  }
  [pf printlnWithNSString:@" p(y) "];
  for (jint i = 0; i < ySize_; i++) {
    [pf printlnWithNSString:JreStrcat("I$D", i, @" : ", [self ptildeYWithInt:i])];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpUtilIndex;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 10, -1, -1, -1, -1 },
    { NULL, "D", 0x1, 12, 10, -1, -1, -1, -1 },
    { NULL, "D", 0x1, 13, 10, -1, -1, -1, -1 },
    { NULL, "D", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "[I", 0x1, 16, 10, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 18, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithIntArray2:);
  methods[2].selector = @selector(initWithIntArray2:withIntArray:);
  methods[3].selector = @selector(initWithIntArray2:withInt:);
  methods[4].selector = @selector(createIndex);
  methods[5].selector = @selector(initWithNSString:);
  methods[6].selector = @selector(addWithEduStanfordNlpMaxentExperiments:);
  methods[7].selector = @selector(ptilde);
  methods[8].selector = @selector(setMaxYWithIntArray:);
  methods[9].selector = @selector(numYWithInt:);
  methods[10].selector = @selector(ptildeWithInt:);
  methods[11].selector = @selector(ptildeXWithInt:);
  methods[12].selector = @selector(ptildeYWithInt:);
  methods[13].selector = @selector(ptildeXYWithInt:withInt:);
  methods[14].selector = @selector(getWithInt:);
  methods[15].selector = @selector(size);
  methods[16].selector = @selector(getNumber);
  methods[17].selector = @selector(print);
  methods[18].selector = @selector(printWithEduStanfordNlpIoPrintFile:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "vArray_", "[[I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "px_", "[I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "py_", "[I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "maxY_", "[I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "pxy_", "[[I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "xSize_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "ySize_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "v_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x2, -1, -1, 19, -1 },
    { "dim_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "values_", "[[D", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[[I", "[[I[I", "[[II", "()Ledu/stanford/nlp/util/Index<Ledu/stanford/nlp/util/IntPair;>;", "LNSString;", "add", "LEduStanfordNlpMaxentExperiments;", "setMaxY", "[I", "numY", "I", "ptilde", "ptildeX", "ptildeY", "ptildeXY", "II", "get", "print", "LEduStanfordNlpIoPrintFile;", "Ljava/util/ArrayList<Ledu/stanford/nlp/maxent/Experiments;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpMaxentExperiments = { "Experiments", "edu.stanford.nlp.maxent", ptrTable, methods, fields, 7, 0x1, 19, 10, -1, -1, -1, -1, -1 };
  return &_EduStanfordNlpMaxentExperiments;
}

@end

void EduStanfordNlpMaxentExperiments_init(EduStanfordNlpMaxentExperiments *self) {
  NSObject_init(self);
  self->v_ = new_JavaUtilArrayList_init();
  self->dim_ = 7;
}

EduStanfordNlpMaxentExperiments *new_EduStanfordNlpMaxentExperiments_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpMaxentExperiments, init)
}

EduStanfordNlpMaxentExperiments *create_EduStanfordNlpMaxentExperiments_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpMaxentExperiments, init)
}

void EduStanfordNlpMaxentExperiments_initWithIntArray2_(EduStanfordNlpMaxentExperiments *self, IOSObjectArray *vArray) {
  NSObject_init(self);
  self->v_ = new_JavaUtilArrayList_init();
  self->dim_ = 7;
  self->vArray_ = vArray;
  EduStanfordNlpMaxentExperiments_ptilde(self);
}

EduStanfordNlpMaxentExperiments *new_EduStanfordNlpMaxentExperiments_initWithIntArray2_(IOSObjectArray *vArray) {
  J2OBJC_NEW_IMPL(EduStanfordNlpMaxentExperiments, initWithIntArray2_, vArray)
}

EduStanfordNlpMaxentExperiments *create_EduStanfordNlpMaxentExperiments_initWithIntArray2_(IOSObjectArray *vArray) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpMaxentExperiments, initWithIntArray2_, vArray)
}

void EduStanfordNlpMaxentExperiments_initWithIntArray2_withIntArray_(EduStanfordNlpMaxentExperiments *self, IOSObjectArray *vArray, IOSIntArray *maxYs) {
  NSObject_init(self);
  self->v_ = new_JavaUtilArrayList_init();
  self->dim_ = 7;
  self->vArray_ = vArray;
  EduStanfordNlpMaxentExperiments_ptilde(self);
  self->maxY_ = maxYs;
}

EduStanfordNlpMaxentExperiments *new_EduStanfordNlpMaxentExperiments_initWithIntArray2_withIntArray_(IOSObjectArray *vArray, IOSIntArray *maxYs) {
  J2OBJC_NEW_IMPL(EduStanfordNlpMaxentExperiments, initWithIntArray2_withIntArray_, vArray, maxYs)
}

EduStanfordNlpMaxentExperiments *create_EduStanfordNlpMaxentExperiments_initWithIntArray2_withIntArray_(IOSObjectArray *vArray, IOSIntArray *maxYs) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpMaxentExperiments, initWithIntArray2_withIntArray_, vArray, maxYs)
}

void EduStanfordNlpMaxentExperiments_initWithIntArray2_withInt_(EduStanfordNlpMaxentExperiments *self, IOSObjectArray *vArray, jint ySize) {
  NSObject_init(self);
  self->v_ = new_JavaUtilArrayList_init();
  self->dim_ = 7;
  self->vArray_ = vArray;
  self->ySize_ = ySize;
  [self ptildeWithInt:ySize];
}

EduStanfordNlpMaxentExperiments *new_EduStanfordNlpMaxentExperiments_initWithIntArray2_withInt_(IOSObjectArray *vArray, jint ySize) {
  J2OBJC_NEW_IMPL(EduStanfordNlpMaxentExperiments, initWithIntArray2_withInt_, vArray, ySize)
}

EduStanfordNlpMaxentExperiments *create_EduStanfordNlpMaxentExperiments_initWithIntArray2_withInt_(IOSObjectArray *vArray, jint ySize) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpMaxentExperiments, initWithIntArray2_withInt_, vArray, ySize)
}

void EduStanfordNlpMaxentExperiments_initWithNSString_(EduStanfordNlpMaxentExperiments *self, NSString *filename) {
  NSObject_init(self);
  self->v_ = new_JavaUtilArrayList_init();
  self->dim_ = 7;
  @try {
    JavaLangException *e1 = new_JavaLangException_initWithNSString_(@"Incorrect data file format");
    JavaIoBufferedReader *in = EduStanfordNlpIoIOUtils_readerFromStringWithNSString_(filename);
    NSString *head = [((JavaIoBufferedReader *) nil_chk(in)) readLine];
    if (![((NSString *) nil_chk(head)) isEqual:@"<data>"]) {
      @throw e1;
    }
    NSString *xLine = [in readLine];
    if (![((NSString *) nil_chk(xLine)) hasPrefix:@"<xSize>"]) {
      @throw e1;
    }
    if (![xLine hasSuffix:@"</xSize>"]) {
      @throw e1;
    }
    jint index1 = [xLine indexOf:'>'];
    jint index2 = [xLine lastIndexOf:'<'];
    NSString *xSt = [xLine substring:index1 + 1 endIndex:index2];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:xSt];
    self->xSize_ = JavaLangInteger_parseIntWithNSString_(xSt);
    [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$I", @"xSize is ", self->xSize_)];
    NSString *yLine = [in readLine];
    if (![((NSString *) nil_chk(yLine)) hasPrefix:@"<ySize>"]) {
      @throw e1;
    }
    if (![yLine hasSuffix:@"</ySize>"]) {
      @throw e1;
    }
    index1 = [yLine indexOf:'>'];
    index2 = [yLine lastIndexOf:'<'];
    self->ySize_ = JavaLangInteger_parseIntWithNSString_([yLine substring:index1 + 1 endIndex:index2]);
    [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$I", @"ySize is ", self->ySize_)];
    NSString *nLine = [in readLine];
    if (![((NSString *) nil_chk(nLine)) hasPrefix:@"<number>"]) {
      @throw e1;
    }
    if (![nLine hasSuffix:@"</number>"]) {
      @throw e1;
    }
    index1 = [nLine indexOf:'>'];
    index2 = [nLine lastIndexOf:'<'];
    jint number = JavaLangInteger_parseIntWithNSString_([nLine substring:index1 + 1 endIndex:index2]);
    [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$I", @"number is ", number)];
    self->vArray_ = [IOSIntArray newArrayWithDimensions:2 lengths:(jint[]){ number, 2 }];
    jint current = 0;
    while (current < number) {
      NSString *experiment = [in readLine];
      jint index = [((NSString *) nil_chk(experiment)) indexOf:' '];
      jint x = JavaLangInteger_parseIntWithNSString_([experiment substring:0 endIndex:index]);
      jint y = JavaLangInteger_parseIntWithNSString_([experiment substring:index + 1]);
      *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(self->vArray_), current)), 0) = x;
      *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(self->vArray_, current)), 1) = y;
      current++;
    }
    [self ptildeWithInt:self->ySize_];
  }
  @catch (JavaLangException *e) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"Incorrect data file format"];
    [((JavaLangException *) nil_chk(e)) printStackTrace];
  }
}

EduStanfordNlpMaxentExperiments *new_EduStanfordNlpMaxentExperiments_initWithNSString_(NSString *filename) {
  J2OBJC_NEW_IMPL(EduStanfordNlpMaxentExperiments, initWithNSString_, filename)
}

EduStanfordNlpMaxentExperiments *create_EduStanfordNlpMaxentExperiments_initWithNSString_(NSString *filename) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpMaxentExperiments, initWithNSString_, filename)
}

void EduStanfordNlpMaxentExperiments_ptilde(EduStanfordNlpMaxentExperiments *self) {
  jint maxX = 0;
  jint maxY = 0;
  {
    IOSObjectArray *a__ = self->vArray_;
    IOSIntArray * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    IOSIntArray * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      IOSIntArray *sample = *b__++;
      if (maxX < IOSIntArray_Get(nil_chk(sample), 0)) {
        maxX = IOSIntArray_Get(sample, 0);
      }
      if (maxY < IOSIntArray_Get(sample, 1)) {
        maxY = IOSIntArray_Get(sample, 1);
      }
    }
  }
  self->px_ = [IOSIntArray newArrayWithLength:maxX + 1];
  self->py_ = [IOSIntArray newArrayWithLength:maxY + 1];
  self->pxy_ = [IOSIntArray newArrayWithDimensions:2 lengths:(jint[]){ maxX + 1, self->dim_ }];
  self->xSize_ = maxX + 1;
  self->ySize_ = maxY + 1;
  IOSIntArray *yArr = [IOSIntArray newArrayWithLength:self->dim_];
  {
    IOSObjectArray *a__ = self->vArray_;
    IOSIntArray * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    IOSIntArray * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      IOSIntArray *sample = *b__++;
      jint xC = IOSIntArray_Get(nil_chk(sample), 0);
      jint yC = IOSIntArray_Get(sample, 1);
      (*IOSIntArray_GetRef(self->px_, xC))++;
      (*IOSIntArray_GetRef(self->py_, yC))++;
      for (jint j = 0; j < self->dim_; j++) {
        *IOSIntArray_GetRef(yArr, j) = IOSIntArray_Get(nil_chk(IOSObjectArray_Get(self->pxy_, xC)), j) > 0 ? IOSIntArray_Get(nil_chk(IOSObjectArray_Get(self->pxy_, xC)), j) % self->ySize_ : -1;
      }
      for (jint j = 0; j < self->dim_; j++) {
        if (IOSIntArray_Get(yArr, j) == -1) {
          *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(self->pxy_, xC)), j) = self->ySize_ + yC;
          break;
        }
        if (yC == IOSIntArray_Get(yArr, j)) {
          *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(self->pxy_, xC)), j) += self->ySize_;
          break;
        }
      }
    }
  }
  for (jint y = 0; y < self->ySize_; y++) {
    jdouble sum = 0.0;
    for (jint x = 0; x < self->xSize_; x++) {
      jdouble p1 = [self ptildeXYWithInt:x withInt:y];
      sum = sum + p1;
    }
    if (JavaLangMath_absWithDouble_([self ptildeYWithInt:y] - sum) > 0.00001) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I$D$D", @"Experiments error: for y=", y, @", ptildeY(y)=", [self ptildeYWithInt:y], @" but Sum_x ptildeXY(x,y)=", sum)];
    }
  }
  self->maxY_ = [IOSIntArray newArrayWithLength:self->xSize_];
  for (jint j = 0; j < self->xSize_; j++) {
    *IOSIntArray_GetRef(self->maxY_, j) = self->ySize_;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpMaxentExperiments)
