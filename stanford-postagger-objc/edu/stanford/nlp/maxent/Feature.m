//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/maxent/Feature.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/maxent/Experiments.h"
#include "edu/stanford/nlp/maxent/Feature.h"
#include "edu/stanford/nlp/util/Generics.h"
#include "edu/stanford/nlp/util/Index.h"
#include "edu/stanford/nlp/util/IntPair.h"
#include "java/io/PrintStream.h"
#include "java/lang/Double.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

@interface EduStanfordNlpMaxentFeature () {
 @public
  IOSDoubleArray *valuesI_;
  id<JavaUtilMap> hashValues_;
}

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpMaxentFeature, valuesI_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(EduStanfordNlpMaxentFeature, hashValues_, id<JavaUtilMap>)

EduStanfordNlpMaxentExperiments *EduStanfordNlpMaxentFeature_domain;

@implementation EduStanfordNlpMaxentFeature

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpMaxentFeature_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithEduStanfordNlpMaxentExperiments:(EduStanfordNlpMaxentExperiments *)e
                                        withDoubleArray:(IOSDoubleArray *)vals
                            withEduStanfordNlpUtilIndex:(id<EduStanfordNlpUtilIndex>)instanceIndex {
  EduStanfordNlpMaxentFeature_initWithEduStanfordNlpMaxentExperiments_withDoubleArray_withEduStanfordNlpUtilIndex_(self, e, vals, instanceIndex);
  return self;
}

- (jint)indexOfWithInt:(jint)x
               withInt:(jint)y {
  EduStanfordNlpUtilIntPair *iP = new_EduStanfordNlpUtilIntPair_initWithInt_withInt_(x, y);
  return [((id<EduStanfordNlpUtilIndex>) nil_chk(instanceIndex_)) indexOfWithId:iP];
}

- (EduStanfordNlpUtilIntPair *)getPairWithInt:(jint)index {
  return [((id<EduStanfordNlpUtilIndex>) nil_chk(instanceIndex_)) getWithInt:index];
}

- (jint)getXInstanceWithInt:(jint)index {
  EduStanfordNlpUtilIntPair *iP = [self getPairWithInt:index];
  return [((EduStanfordNlpUtilIntPair *) nil_chk(iP)) getWithInt:0];
}

- (jint)getYInstanceWithInt:(jint)index {
  EduStanfordNlpUtilIntPair *iP = [self getPairWithInt:index];
  return [((EduStanfordNlpUtilIntPair *) nil_chk(iP)) getWithInt:1];
}

- (instancetype)initWithEduStanfordNlpMaxentExperiments:(EduStanfordNlpMaxentExperiments *)e
                                       withDoubleArray2:(IOSObjectArray *)vals
                            withEduStanfordNlpUtilIndex:(id<EduStanfordNlpUtilIndex>)instanceIndex {
  EduStanfordNlpMaxentFeature_initWithEduStanfordNlpMaxentExperiments_withDoubleArray2_withEduStanfordNlpUtilIndex_(self, e, vals, instanceIndex);
  return self;
}

- (instancetype)initWithEduStanfordNlpMaxentExperiments:(EduStanfordNlpMaxentExperiments *)e
                                                withInt:(jint)numElems
                            withEduStanfordNlpUtilIndex:(id<EduStanfordNlpUtilIndex>)instanceIndex {
  EduStanfordNlpMaxentFeature_initWithEduStanfordNlpMaxentExperiments_withInt_withEduStanfordNlpUtilIndex_(self, e, numElems, instanceIndex);
  return self;
}

- (instancetype)initWithEduStanfordNlpMaxentExperiments:(EduStanfordNlpMaxentExperiments *)e
                                           withIntArray:(IOSIntArray *)indexes
                                        withDoubleArray:(IOSDoubleArray *)vals
                            withEduStanfordNlpUtilIndex:(id<EduStanfordNlpUtilIndex>)instanceIndex {
  EduStanfordNlpMaxentFeature_initWithEduStanfordNlpMaxentExperiments_withIntArray_withDoubleArray_withEduStanfordNlpUtilIndex_(self, e, indexes, vals, instanceIndex);
  return self;
}

- (void)print {
  [self printWithJavaIoPrintStream:JreLoadStatic(JavaLangSystem, out)];
}

- (void)setValueWithInt:(jint)index
                withInt:(jint)key
             withDouble:(jdouble)value {
  *IOSIntArray_GetRef(nil_chk(indexedValues_), index) = key;
  *IOSDoubleArray_GetRef(nil_chk(valuesI_), index) = value;
}

- (void)printWithJavaIoPrintStream:(JavaIoPrintStream *)pf {
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(indexedValues_))->size_; i++) {
    EduStanfordNlpUtilIntPair *iP = [self getPairWithInt:IOSIntArray_Get(indexedValues_, i)];
    jint x = [((EduStanfordNlpUtilIntPair *) nil_chk(iP)) getWithInt:0];
    jint y = [iP getWithInt:1];
    [((JavaIoPrintStream *) nil_chk(pf)) printlnWithNSString:JreStrcat("I$ICD", x, @", ", y, ' ', IOSDoubleArray_Get(nil_chk(valuesI_), i))];
  }
}

- (jdouble)getValWithInt:(jint)index {
  return IOSDoubleArray_Get(nil_chk(valuesI_), index);
}

- (void)setSum {
  {
    IOSDoubleArray *a__ = valuesI_;
    jdouble const *b__ = ((IOSDoubleArray *) nil_chk(a__))->buffer_;
    jdouble const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jdouble value = *b__++;
      JrePlusAssignDoubleD(&sum_, value);
    }
  }
}

- (jint)len {
  if (indexedValues_ != nil) {
    return indexedValues_->size_;
  }
  else {
    return 0;
  }
}

- (jint)getXWithInt:(jint)index {
  return [self getXInstanceWithInt:IOSIntArray_Get(nil_chk(indexedValues_), index)];
}

- (jint)getYWithInt:(jint)index {
  return [self getYInstanceWithInt:IOSIntArray_Get(nil_chk(indexedValues_), index)];
}

- (jdouble)getValWithInt:(jint)x
                 withInt:(jint)y {
  JavaLangDouble *val = [((id<JavaUtilMap>) nil_chk(hashValues_)) getWithId:JavaLangInteger_valueOfWithInt_([self indexOfWithInt:x withInt:y])];
  if (val == nil) {
    return 0.0;
  }
  else {
    return [val doubleValue];
  }
}

- (void)initHashVals {
  hashValues_ = EduStanfordNlpUtilGenerics_newHashMap();
  for (jint i = 0; i < [self len]; i++) {
    jint x = [self getXWithInt:i];
    jint y = [self getYWithInt:i];
    JavaLangDouble *value = new_JavaLangDouble_initWithDouble_([self getValWithInt:i]);
    (void) [((id<JavaUtilMap>) nil_chk(self->hashValues_)) putWithId:JavaLangInteger_valueOfWithInt_([self indexOfWithInt:x withInt:y]) withId:value];
  }
}

- (jdouble)ftilde {
  jdouble s = 0.0;
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(indexedValues_))->size_; i++) {
    jint x = [self getXInstanceWithInt:IOSIntArray_Get(indexedValues_, i)];
    jint y = [self getYInstanceWithInt:IOSIntArray_Get(nil_chk(indexedValues_), i)];
    s = s + [((EduStanfordNlpMaxentExperiments *) nil_chk(EduStanfordNlpMaxentFeature_domain)) ptildeXYWithInt:x withInt:y] * [self getValWithInt:i];
  }
  return s;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "I", 0x0, 2, 3, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpUtilIntPair;", 0x0, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 6, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 7, 5, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 8, -1, 9, -1, -1 },
    { NULL, NULL, 0x1, -1, 10, -1, 11, -1, -1 },
    { NULL, NULL, 0x1, -1, 12, -1, 13, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "D", 0x1, 18, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 19, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 20, 5, -1, -1, -1, -1 },
    { NULL, "D", 0x1, 18, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithEduStanfordNlpMaxentExperiments:withDoubleArray:withEduStanfordNlpUtilIndex:);
  methods[2].selector = @selector(indexOfWithInt:withInt:);
  methods[3].selector = @selector(getPairWithInt:);
  methods[4].selector = @selector(getXInstanceWithInt:);
  methods[5].selector = @selector(getYInstanceWithInt:);
  methods[6].selector = @selector(initWithEduStanfordNlpMaxentExperiments:withDoubleArray2:withEduStanfordNlpUtilIndex:);
  methods[7].selector = @selector(initWithEduStanfordNlpMaxentExperiments:withInt:withEduStanfordNlpUtilIndex:);
  methods[8].selector = @selector(initWithEduStanfordNlpMaxentExperiments:withIntArray:withDoubleArray:withEduStanfordNlpUtilIndex:);
  methods[9].selector = @selector(print);
  methods[10].selector = @selector(setValueWithInt:withInt:withDouble:);
  methods[11].selector = @selector(printWithJavaIoPrintStream:);
  methods[12].selector = @selector(getValWithInt:);
  methods[13].selector = @selector(setSum);
  methods[14].selector = @selector(len);
  methods[15].selector = @selector(getXWithInt:);
  methods[16].selector = @selector(getYWithInt:);
  methods[17].selector = @selector(getValWithInt:withInt:);
  methods[18].selector = @selector(initHashVals);
  methods[19].selector = @selector(ftilde);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "indexedValues_", "[I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "valuesI_", "[D", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "domain", "LEduStanfordNlpMaxentExperiments;", .constantValue.asLong = 0, 0x8, -1, 21, -1, -1 },
    { "hashValues_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 22, -1 },
    { "sum_", "D", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "instanceIndex_", "LEduStanfordNlpUtilIndex;", .constantValue.asLong = 0, 0x4, -1, -1, 23, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpMaxentExperiments;[DLEduStanfordNlpUtilIndex;", "(Ledu/stanford/nlp/maxent/Experiments;[DLedu/stanford/nlp/util/Index<Ledu/stanford/nlp/util/IntPair;>;)V", "indexOf", "II", "getPair", "I", "getXInstance", "getYInstance", "LEduStanfordNlpMaxentExperiments;[[DLEduStanfordNlpUtilIndex;", "(Ledu/stanford/nlp/maxent/Experiments;[[DLedu/stanford/nlp/util/Index<Ledu/stanford/nlp/util/IntPair;>;)V", "LEduStanfordNlpMaxentExperiments;ILEduStanfordNlpUtilIndex;", "(Ledu/stanford/nlp/maxent/Experiments;ILedu/stanford/nlp/util/Index<Ledu/stanford/nlp/util/IntPair;>;)V", "LEduStanfordNlpMaxentExperiments;[I[DLEduStanfordNlpUtilIndex;", "(Ledu/stanford/nlp/maxent/Experiments;[I[DLedu/stanford/nlp/util/Index<Ledu/stanford/nlp/util/IntPair;>;)V", "setValue", "IID", "print", "LJavaIoPrintStream;", "getVal", "getX", "getY", &EduStanfordNlpMaxentFeature_domain, "Ljava/util/Map<Ljava/lang/Integer;Ljava/lang/Double;>;", "Ledu/stanford/nlp/util/Index<Ledu/stanford/nlp/util/IntPair;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpMaxentFeature = { "Feature", "edu.stanford.nlp.maxent", ptrTable, methods, fields, 7, 0x1, 20, 6, -1, -1, -1, -1, -1 };
  return &_EduStanfordNlpMaxentFeature;
}

@end

void EduStanfordNlpMaxentFeature_init(EduStanfordNlpMaxentFeature *self) {
  NSObject_init(self);
}

EduStanfordNlpMaxentFeature *new_EduStanfordNlpMaxentFeature_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpMaxentFeature, init)
}

EduStanfordNlpMaxentFeature *create_EduStanfordNlpMaxentFeature_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpMaxentFeature, init)
}

void EduStanfordNlpMaxentFeature_initWithEduStanfordNlpMaxentExperiments_withDoubleArray_withEduStanfordNlpUtilIndex_(EduStanfordNlpMaxentFeature *self, EduStanfordNlpMaxentExperiments *e, IOSDoubleArray *vals, id<EduStanfordNlpUtilIndex> instanceIndex) {
  NSObject_init(self);
  self->instanceIndex_ = instanceIndex;
  id<JavaUtilMap> setNonZeros = EduStanfordNlpUtilGenerics_newHashMap();
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(vals))->size_; i++) {
    if (IOSDoubleArray_Get(vals, i) != 0.0) {
      JavaLangInteger *in = JavaLangInteger_valueOfWithInt_([self indexOfWithInt:IOSIntArray_Get(nil_chk([((EduStanfordNlpMaxentExperiments *) nil_chk(e)) getWithInt:i]), 0) withInt:IOSIntArray_Get(nil_chk([e getWithInt:i]), 1)]);
      JavaLangDouble *oldVal = [((id<JavaUtilMap>) nil_chk(setNonZeros)) putWithId:in withId:JavaLangDouble_valueOfWithDouble_(IOSDoubleArray_Get(vals, i))];
      if (oldVal != nil && [oldVal doubleValue] != IOSDoubleArray_Get(vals, i)) {
        @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@$D", @"Incorrect function specification: Feature has two values at one point: ", oldVal, @" and ", IOSDoubleArray_Get(vals, i)));
      }
    }
  }
  IOSObjectArray *keys = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(setNonZeros)) keySet])) toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:[((id<JavaUtilSet>) nil_chk([setNonZeros keySet])) size] type:JavaLangInteger_class_()]];
  self->indexedValues_ = [IOSIntArray newArrayWithLength:((IOSObjectArray *) nil_chk(keys))->size_];
  self->valuesI_ = [IOSDoubleArray newArrayWithLength:keys->size_];
  for (jint j = 0; j < keys->size_; j++) {
    *IOSIntArray_GetRef(nil_chk(self->indexedValues_), j) = [((JavaLangInteger *) nil_chk(IOSObjectArray_Get(keys, j))) intValue];
    *IOSDoubleArray_GetRef(nil_chk(self->valuesI_), j) = [((JavaLangDouble *) nil_chk([setNonZeros getWithId:IOSObjectArray_Get(keys, j)])) doubleValue];
  }
  EduStanfordNlpMaxentFeature_domain = e;
}

EduStanfordNlpMaxentFeature *new_EduStanfordNlpMaxentFeature_initWithEduStanfordNlpMaxentExperiments_withDoubleArray_withEduStanfordNlpUtilIndex_(EduStanfordNlpMaxentExperiments *e, IOSDoubleArray *vals, id<EduStanfordNlpUtilIndex> instanceIndex) {
  J2OBJC_NEW_IMPL(EduStanfordNlpMaxentFeature, initWithEduStanfordNlpMaxentExperiments_withDoubleArray_withEduStanfordNlpUtilIndex_, e, vals, instanceIndex)
}

EduStanfordNlpMaxentFeature *create_EduStanfordNlpMaxentFeature_initWithEduStanfordNlpMaxentExperiments_withDoubleArray_withEduStanfordNlpUtilIndex_(EduStanfordNlpMaxentExperiments *e, IOSDoubleArray *vals, id<EduStanfordNlpUtilIndex> instanceIndex) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpMaxentFeature, initWithEduStanfordNlpMaxentExperiments_withDoubleArray_withEduStanfordNlpUtilIndex_, e, vals, instanceIndex)
}

void EduStanfordNlpMaxentFeature_initWithEduStanfordNlpMaxentExperiments_withDoubleArray2_withEduStanfordNlpUtilIndex_(EduStanfordNlpMaxentFeature *self, EduStanfordNlpMaxentExperiments *e, IOSObjectArray *vals, id<EduStanfordNlpUtilIndex> instanceIndex) {
  NSObject_init(self);
  self->instanceIndex_ = instanceIndex;
  EduStanfordNlpMaxentFeature_domain = e;
  jint num = 0;
  for (jint x = 0; x < ((EduStanfordNlpMaxentExperiments *) nil_chk(e))->xSize_; x++) {
    for (jint y = 0; y < e->ySize_; y++) {
      if (IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(vals), x)), y) != 0) {
        num++;
      }
    }
  }
  self->indexedValues_ = [IOSIntArray newArrayWithLength:num];
  self->valuesI_ = [IOSDoubleArray newArrayWithLength:num];
  jint current = 0;
  for (jint x = 0; x < e->xSize_; x++) {
    for (jint y = 0; y < e->ySize_; y++) {
      if (IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(vals), x)), y) != 0) {
        *IOSIntArray_GetRef(nil_chk(self->indexedValues_), current) = [self indexOfWithInt:x withInt:y];
        *IOSDoubleArray_GetRef(nil_chk(self->valuesI_), current) = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(vals, x)), y);
        current++;
      }
    }
  }
}

EduStanfordNlpMaxentFeature *new_EduStanfordNlpMaxentFeature_initWithEduStanfordNlpMaxentExperiments_withDoubleArray2_withEduStanfordNlpUtilIndex_(EduStanfordNlpMaxentExperiments *e, IOSObjectArray *vals, id<EduStanfordNlpUtilIndex> instanceIndex) {
  J2OBJC_NEW_IMPL(EduStanfordNlpMaxentFeature, initWithEduStanfordNlpMaxentExperiments_withDoubleArray2_withEduStanfordNlpUtilIndex_, e, vals, instanceIndex)
}

EduStanfordNlpMaxentFeature *create_EduStanfordNlpMaxentFeature_initWithEduStanfordNlpMaxentExperiments_withDoubleArray2_withEduStanfordNlpUtilIndex_(EduStanfordNlpMaxentExperiments *e, IOSObjectArray *vals, id<EduStanfordNlpUtilIndex> instanceIndex) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpMaxentFeature, initWithEduStanfordNlpMaxentExperiments_withDoubleArray2_withEduStanfordNlpUtilIndex_, e, vals, instanceIndex)
}

void EduStanfordNlpMaxentFeature_initWithEduStanfordNlpMaxentExperiments_withInt_withEduStanfordNlpUtilIndex_(EduStanfordNlpMaxentFeature *self, EduStanfordNlpMaxentExperiments *e, jint numElems, id<EduStanfordNlpUtilIndex> instanceIndex) {
  NSObject_init(self);
  self->instanceIndex_ = instanceIndex;
  EduStanfordNlpMaxentFeature_domain = e;
  self->indexedValues_ = [IOSIntArray newArrayWithLength:numElems];
  self->valuesI_ = [IOSDoubleArray newArrayWithLength:numElems];
}

EduStanfordNlpMaxentFeature *new_EduStanfordNlpMaxentFeature_initWithEduStanfordNlpMaxentExperiments_withInt_withEduStanfordNlpUtilIndex_(EduStanfordNlpMaxentExperiments *e, jint numElems, id<EduStanfordNlpUtilIndex> instanceIndex) {
  J2OBJC_NEW_IMPL(EduStanfordNlpMaxentFeature, initWithEduStanfordNlpMaxentExperiments_withInt_withEduStanfordNlpUtilIndex_, e, numElems, instanceIndex)
}

EduStanfordNlpMaxentFeature *create_EduStanfordNlpMaxentFeature_initWithEduStanfordNlpMaxentExperiments_withInt_withEduStanfordNlpUtilIndex_(EduStanfordNlpMaxentExperiments *e, jint numElems, id<EduStanfordNlpUtilIndex> instanceIndex) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpMaxentFeature, initWithEduStanfordNlpMaxentExperiments_withInt_withEduStanfordNlpUtilIndex_, e, numElems, instanceIndex)
}

void EduStanfordNlpMaxentFeature_initWithEduStanfordNlpMaxentExperiments_withIntArray_withDoubleArray_withEduStanfordNlpUtilIndex_(EduStanfordNlpMaxentFeature *self, EduStanfordNlpMaxentExperiments *e, IOSIntArray *indexes, IOSDoubleArray *vals, id<EduStanfordNlpUtilIndex> instanceIndex) {
  NSObject_init(self);
  EduStanfordNlpMaxentFeature_domain = e;
  self->indexedValues_ = indexes;
  self->valuesI_ = vals;
  self->instanceIndex_ = instanceIndex;
}

EduStanfordNlpMaxentFeature *new_EduStanfordNlpMaxentFeature_initWithEduStanfordNlpMaxentExperiments_withIntArray_withDoubleArray_withEduStanfordNlpUtilIndex_(EduStanfordNlpMaxentExperiments *e, IOSIntArray *indexes, IOSDoubleArray *vals, id<EduStanfordNlpUtilIndex> instanceIndex) {
  J2OBJC_NEW_IMPL(EduStanfordNlpMaxentFeature, initWithEduStanfordNlpMaxentExperiments_withIntArray_withDoubleArray_withEduStanfordNlpUtilIndex_, e, indexes, vals, instanceIndex)
}

EduStanfordNlpMaxentFeature *create_EduStanfordNlpMaxentFeature_initWithEduStanfordNlpMaxentExperiments_withIntArray_withDoubleArray_withEduStanfordNlpUtilIndex_(EduStanfordNlpMaxentExperiments *e, IOSIntArray *indexes, IOSDoubleArray *vals, id<EduStanfordNlpUtilIndex> instanceIndex) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpMaxentFeature, initWithEduStanfordNlpMaxentExperiments_withIntArray_withDoubleArray_withEduStanfordNlpUtilIndex_, e, indexes, vals, instanceIndex)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpMaxentFeature)
