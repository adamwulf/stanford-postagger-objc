//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/maxent/iis/LambdaSolve.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/io/IOUtils.h"
#include "edu/stanford/nlp/io/PrintFile.h"
#include "edu/stanford/nlp/io/RuntimeIOException.h"
#include "edu/stanford/nlp/math/ArrayMath.h"
#include "edu/stanford/nlp/maxent/Experiments.h"
#include "edu/stanford/nlp/maxent/Feature.h"
#include "edu/stanford/nlp/maxent/Features.h"
#include "edu/stanford/nlp/maxent/Problem.h"
#include "edu/stanford/nlp/maxent/iis/LambdaSolve.h"
#include "edu/stanford/nlp/util/MutableDouble.h"
#include "java/io/DataInputStream.h"
#include "java/io/DataOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/ObjectInputStream.h"
#include "java/io/ObjectOutputStream.h"
#include "java/io/PrintStream.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/text/NumberFormat.h"

@interface EduStanfordNlpMaxentIisLambdaSolve () {
 @public
  jboolean fixedFnumXY_;
  jboolean ASSUME_BINARY_;
  IOSDoubleArray *aux_;
  IOSObjectArray *sum_;
  IOSObjectArray *sub_;
  jboolean convertValues_;
}

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpMaxentIisLambdaSolve, aux_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(EduStanfordNlpMaxentIisLambdaSolve, sum_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(EduStanfordNlpMaxentIisLambdaSolve, sub_, IOSObjectArray *)

inline jboolean EduStanfordNlpMaxentIisLambdaSolve_get_smooth();
#define EduStanfordNlpMaxentIisLambdaSolve_smooth false
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpMaxentIisLambdaSolve, smooth, jboolean)

inline jboolean EduStanfordNlpMaxentIisLambdaSolve_get_VERBOSE();
#define EduStanfordNlpMaxentIisLambdaSolve_VERBOSE false
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpMaxentIisLambdaSolve, VERBOSE, jboolean)

@implementation EduStanfordNlpMaxentIisLambdaSolve

- (instancetype)initWithEduStanfordNlpMaxentProblem:(EduStanfordNlpMaxentProblem *)p1
                                         withDouble:(jdouble)eps1
                                         withDouble:(jdouble)nerr1 {
  EduStanfordNlpMaxentIisLambdaSolve_initWithEduStanfordNlpMaxentProblem_withDouble_withDouble_(self, p1, eps1, nerr1);
  return self;
}

- (instancetype)initWithNSString:(NSString *)filename {
  EduStanfordNlpMaxentIisLambdaSolve_initWithNSString_(self, filename);
  return self;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpMaxentIisLambdaSolve_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setNonBinary {
  ASSUME_BINARY_ = false;
}

- (void)setBinary {
  ASSUME_BINARY_ = true;
}

- (void)transformValues {
  for (jint x = 0; x < ((IOSObjectArray *) nil_chk(((EduStanfordNlpMaxentExperiments *) nil_chk(((EduStanfordNlpMaxentProblem *) nil_chk(p_))->data_))->values_))->size_; x++) {
    jdouble highest = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(p_->data_->values_, x)), 0);
    jdouble sumhighest = 0;
    jdouble sumrest = 0;
    for (jint y = 0; y < ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(p_->data_->values_, x)))->size_; y++) {
      if (IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(p_->data_->values_, x)), y) > highest) {
        highest = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(p_->data_->values_, x)), y);
      }
    }
    for (jint y = 0; y < ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(p_->data_->values_, x)))->size_; y++) {
      if (IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(p_->data_->values_, x)), y) == highest) {
        JrePlusAssignDoubleD(&sumhighest, highest);
      }
      else {
        JrePlusAssignDoubleD(&sumrest, IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(p_->data_->values_, x)), y));
      }
    }
    if (sumrest == 0) {
      continue;
    }
    for (jint y = 0; y < ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(p_->data_->values_, x)))->size_; y++) {
      if (IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(p_->data_->values_, x)), y) == highest) {
        *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(p_->data_->values_, x)), y) = .7 * highest / sumhighest;
      }
      else {
        *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(p_->data_->values_, x)), y) = .3 * IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(p_->data_->values_, x)), y) / sumrest;
      }
    }
  }
}

- (void)initCondsZlambdaEtc {
  for (jint x = 0; x < ((EduStanfordNlpMaxentExperiments *) nil_chk(((EduStanfordNlpMaxentProblem *) nil_chk(p_))->data_))->xSize_; x++) {
    for (jint y = 0; y < ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(nil_chk(probConds_), x)))->size_; y++) {
      *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(probConds_, x)), y) = 1.0 / ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(probConds_, x)))->size_;
    }
  }
  for (jint x = 0; x < p_->data_->xSize_; x++) {
    *IOSDoubleArray_GetRef(nil_chk(zlambda_), x) = ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(nil_chk(probConds_), x)))->size_;
  }
  for (jint i = 0; i < ((EduStanfordNlpMaxentProblem *) nil_chk(p_))->fSize_; i++) {
    *IOSDoubleArray_GetRef(nil_chk(ftildeArr_), i) = [((EduStanfordNlpMaxentFeature *) nil_chk([((EduStanfordNlpMaxentFeatures *) nil_chk(p_->functions_)) getWithInt:i])) ftilde];
    [((EduStanfordNlpMaxentFeature *) nil_chk([((EduStanfordNlpMaxentFeatures *) nil_chk(((EduStanfordNlpMaxentProblem *) nil_chk(p_))->functions_)) getWithInt:i])) setSum];
    EduStanfordNlpMaxentFeature *f = [((EduStanfordNlpMaxentFeatures *) nil_chk(((EduStanfordNlpMaxentProblem *) nil_chk(p_))->functions_)) getWithInt:i];
    for (jint j = 0; j < [((EduStanfordNlpMaxentFeature *) nil_chk(f)) len]; j++) {
      jint x = [f getXWithInt:j];
      jint y = [f getYWithInt:j];
      JrePlusAssignByteD(IOSByteArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(fnumArr_), x)), y), [f getValWithInt:j]);
    }
  }
  jint constAll = IOSByteArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(fnumArr_), 0)), 0);
  fixedFnumXY_ = true;
  for (jint x = 0; x < ((EduStanfordNlpMaxentExperiments *) nil_chk(p_->data_))->xSize_; x++) {
    for (jint y = 0; y < ((IOSByteArray *) nil_chk(IOSObjectArray_Get(fnumArr_, x)))->size_; y++) {
      if (IOSByteArray_Get(nil_chk(IOSObjectArray_Get(fnumArr_, x)), y) != constAll) {
        fixedFnumXY_ = false;
        break;
      }
    }
  }
}

- (void)improvedIterative {
  jboolean flag;
  jint iterations = 0;
  lambda_converged_ = [IOSBooleanArray newArrayWithLength:((EduStanfordNlpMaxentProblem *) nil_chk(p_))->fSize_];
  jint numNConverged = p_->fSize_;
  do {
    flag = false;
    iterations++;
    for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(lambda_))->size_; i++) {
      if (IOSBooleanArray_Get(nil_chk(lambda_converged_), i)) {
        continue;
      }
      EduStanfordNlpUtilMutableDouble *deltaI = new_EduStanfordNlpUtilMutableDouble_init();
      jboolean fl = [self iterateWithInt:i withDouble:eps_ withEduStanfordNlpUtilMutableDouble:deltaI];
      if (fl) {
        flag = true;
        [self updateCondsWithInt:i withDouble:[deltaI doubleValue]];
      }
      else {
        numNConverged--;
      }
    }
  }
  while ((flag) && (iterations < 1000));
}

- (void)improvedIterativeWithInt:(jint)iters {
  jint iterations = 0;
  lambda_converged_ = [IOSBooleanArray newArrayWithLength:((EduStanfordNlpMaxentProblem *) nil_chk(p_))->fSize_];
  jint numNConverged = p_->fSize_;
  do {
    iterations++;
    for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(lambda_))->size_; i++) {
      if (IOSBooleanArray_Get(nil_chk(lambda_converged_), i)) {
        continue;
      }
      EduStanfordNlpUtilMutableDouble *deltaI = new_EduStanfordNlpUtilMutableDouble_init();
      jboolean fl = [self iterateWithInt:i withDouble:eps_ withEduStanfordNlpUtilMutableDouble:deltaI];
      if (fl) {
        [self updateCondsWithInt:i withDouble:[deltaI doubleValue]];
      }
      else {
        numNConverged--;
      }
    }
    if (iterations % 100 == 0) {
      [self save_lambdasWithNSString:JreStrcat("I$", iterations, @".lam")];
    }
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithInt:iterations];
  }
  while (iterations < iters);
}

- (jboolean)iterateWithInt:(jint)index
                withDouble:(jdouble)err
withEduStanfordNlpUtilMutableDouble:(EduStanfordNlpUtilMutableDouble *)ret {
  jdouble deltaL = 0.0;
  deltaL = [self newtonWithDouble:deltaL withInt:index withDouble:err];
  if (JavaLangMath_absWithDouble_(deltaL + IOSDoubleArray_Get(nil_chk(lambda_), index)) > 200) {
    if ((deltaL + IOSDoubleArray_Get(nil_chk(lambda_), index)) > 200) {
      deltaL = 200 - IOSDoubleArray_Get(lambda_, index);
    }
    else {
      deltaL = -IOSDoubleArray_Get(lambda_, index) - 200;
    }
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$D", @"set delta to smth ", deltaL)];
  }
  *IOSDoubleArray_GetRef(nil_chk(lambda_), index) = IOSDoubleArray_Get(lambda_, index) + deltaL;
  if (JavaLangDouble_isNaNWithDouble_(deltaL)) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$ICD", @" NaN ", index, ' ', deltaL)];
  }
  [((EduStanfordNlpUtilMutableDouble *) nil_chk(ret)) setWithDouble:deltaL];
  return (JavaLangMath_absWithDouble_(deltaL) >= eps_);
}

- (jdouble)newtonWithDouble:(jdouble)lambda0
                    withInt:(jint)index
                 withDouble:(jdouble)err {
  jdouble lambdaN = lambda0;
  jint i = 0;
  if (fixedFnumXY_) {
    jdouble plambda = [self fExpectedWithEduStanfordNlpMaxentFeature:[((EduStanfordNlpMaxentFeatures *) nil_chk(((EduStanfordNlpMaxentProblem *) nil_chk(p_))->functions_)) getWithInt:index]];
    return (1 / (jdouble) IOSByteArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(fnumArr_), 0)), 0)) * (JavaLangMath_logWithDouble_(IOSDoubleArray_Get(nil_chk(self->ftildeArr_), index)) - JavaLangMath_logWithDouble_(plambda));
  }
  do {
    i++;
    jdouble lambdaP = lambdaN;
    jdouble gPrimeVal = [self gprimeWithDouble:lambdaP withInt:index];
    if (JavaLangDouble_isNaNWithDouble_(gPrimeVal)) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$DCI$D", @"gPrime of ", lambdaP, ' ', index, @" is NaN ", gPrimeVal)];
    }
    jdouble gVal = [self gWithDouble:lambdaP withInt:index];
    if (gPrimeVal == 0.0) {
      return 0.0;
    }
    lambdaN = lambdaP - gVal / gPrimeVal;
    if (JavaLangDouble_isNaNWithDouble_(lambdaN)) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$DCDCI$D", @"the division of ", gVal, ' ', gPrimeVal, ' ', index, @" is NaN ", lambdaN)];
      return 0;
    }
    if (JavaLangMath_absWithDouble_(lambdaN - lambdaP) < err) {
      return lambdaN;
    }
    if (i > 100) {
      if (JavaLangMath_absWithDouble_(gVal) > 0.01) {
        return 0;
      }
      return lambdaN;
    }
  }
  while (true);
}

- (void)updateCondsWithInt:(jint)index
                withDouble:(jdouble)deltaL {
  for (jint i = 0; i < [((EduStanfordNlpMaxentFeature *) nil_chk([((EduStanfordNlpMaxentFeatures *) nil_chk(((EduStanfordNlpMaxentProblem *) nil_chk(p_))->functions_)) getWithInt:index])) len]; i++) {
    jdouble s = 0;
    jint x = [((EduStanfordNlpMaxentFeature *) nil_chk([((EduStanfordNlpMaxentFeatures *) nil_chk(((EduStanfordNlpMaxentProblem *) nil_chk(p_))->functions_)) getWithInt:index])) getXWithInt:i];
    jint y = [((EduStanfordNlpMaxentFeature *) nil_chk([((EduStanfordNlpMaxentFeatures *) nil_chk(((EduStanfordNlpMaxentProblem *) nil_chk(p_))->functions_)) getWithInt:index])) getYWithInt:i];
    jdouble val = [((EduStanfordNlpMaxentFeature *) nil_chk([((EduStanfordNlpMaxentFeatures *) nil_chk(((EduStanfordNlpMaxentProblem *) nil_chk(p_))->functions_)) getWithInt:index])) getValWithInt:i];
    jdouble zlambdaX = IOSDoubleArray_Get(nil_chk(zlambda_), x) + [self pcondWithInt:y withInt:x] * IOSDoubleArray_Get(nil_chk(zlambda_), x) * (JavaLangMath_expWithDouble_(deltaL * val) - 1);
    for (jint y1 = 0; y1 < ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(nil_chk(probConds_), x)))->size_; y1++) {
      *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(probConds_, x)), y1) = (IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(probConds_, x)), y1) * IOSDoubleArray_Get(nil_chk(zlambda_), x)) / zlambdaX;
      s = s + IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(probConds_, x)), y1);
    }
    s = s - IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(probConds_, x)), y);
    *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(probConds_, x)), y) = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(probConds_, x)), y) * JavaLangMath_expWithDouble_(deltaL * val);
    s = s + IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(probConds_), x)), y);
    *IOSDoubleArray_GetRef(nil_chk(zlambda_), x) = zlambdaX;
    if (JavaLangMath_absWithDouble_(s - 1) > 0.001) {
    }
  }
}

- (jdouble)pcondWithInt:(jint)y
                withInt:(jint)x {
  return IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(probConds_), x)), y);
}

- (jdouble)fnumWithInt:(jint)x
               withInt:(jint)y {
  return IOSByteArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(fnumArr_), x)), y);
}

- (jdouble)gWithDouble:(jdouble)lambdaP
               withInt:(jint)index {
  jdouble s = 0.0;
  for (jint i = 0; i < [((EduStanfordNlpMaxentFeature *) nil_chk([((EduStanfordNlpMaxentFeatures *) nil_chk(((EduStanfordNlpMaxentProblem *) nil_chk(p_))->functions_)) getWithInt:index])) len]; i++) {
    jint y = [((EduStanfordNlpMaxentFeature *) nil_chk([((EduStanfordNlpMaxentFeatures *) nil_chk(((EduStanfordNlpMaxentProblem *) nil_chk(p_))->functions_)) getWithInt:index])) getYWithInt:i];
    jint x = [((EduStanfordNlpMaxentFeature *) nil_chk([((EduStanfordNlpMaxentFeatures *) nil_chk(((EduStanfordNlpMaxentProblem *) nil_chk(p_))->functions_)) getWithInt:index])) getXWithInt:i];
    jdouble exponent = JavaLangMath_expWithDouble_(lambdaP * [self fnumWithInt:x withInt:y]);
    s = s + [((EduStanfordNlpMaxentExperiments *) nil_chk(((EduStanfordNlpMaxentProblem *) nil_chk(p_))->data_)) ptildeXWithInt:x] * [self pcondWithInt:y withInt:x] * [((EduStanfordNlpMaxentFeature *) nil_chk([((EduStanfordNlpMaxentFeatures *) nil_chk(((EduStanfordNlpMaxentProblem *) nil_chk(p_))->functions_)) getWithInt:index])) getValWithInt:i] * exponent;
  }
  s = s - IOSDoubleArray_Get(nil_chk(ftildeArr_), index);
  return s;
}

- (jdouble)gprimeWithDouble:(jdouble)lambdaP
                    withInt:(jint)index {
  jdouble s = 0.0;
  for (jint i = 0; i < [((EduStanfordNlpMaxentFeature *) nil_chk([((EduStanfordNlpMaxentFeatures *) nil_chk(((EduStanfordNlpMaxentProblem *) nil_chk(p_))->functions_)) getWithInt:index])) len]; i++) {
    jint y = [((EduStanfordNlpMaxentFeature *) nil_chk((([((EduStanfordNlpMaxentFeatures *) nil_chk(((EduStanfordNlpMaxentProblem *) nil_chk(p_))->functions_)) getWithInt:index])))) getYWithInt:i];
    jint x = [((EduStanfordNlpMaxentFeature *) nil_chk([((EduStanfordNlpMaxentFeatures *) nil_chk(((EduStanfordNlpMaxentProblem *) nil_chk(p_))->functions_)) getWithInt:index])) getXWithInt:i];
    s = s + [((EduStanfordNlpMaxentExperiments *) nil_chk(((EduStanfordNlpMaxentProblem *) nil_chk(p_))->data_)) ptildeXWithInt:x] * [self pcondWithInt:y withInt:x] * [((EduStanfordNlpMaxentFeature *) nil_chk([((EduStanfordNlpMaxentFeatures *) nil_chk(((EduStanfordNlpMaxentProblem *) nil_chk(p_))->functions_)) getWithInt:index])) getValWithInt:i] * JavaLangMath_expWithDouble_(lambdaP * [self fnumWithInt:x withInt:y]) * [self fnumWithInt:x withInt:y];
  }
  return s;
}

- (jdouble)fExpectedWithEduStanfordNlpMaxentFeature:(EduStanfordNlpMaxentFeature *)f {
  jdouble s = 0.0;
  for (jint i = 0; i < [((EduStanfordNlpMaxentFeature *) nil_chk(f)) len]; i++) {
    jint x = [f getXWithInt:i];
    jint y = [f getYWithInt:i];
    JrePlusAssignDoubleD(&s, [((EduStanfordNlpMaxentExperiments *) nil_chk(((EduStanfordNlpMaxentProblem *) nil_chk(p_))->data_)) ptildeXWithInt:x] * [self pcondWithInt:y withInt:x] * [f getValWithInt:i]);
  }
  return s;
}

- (jboolean)checkCorrectness {
  jboolean flag = true;
  for (jint f = 0; f < ((IOSDoubleArray *) nil_chk(lambda_))->size_; f++) {
    if (JavaLangMath_absWithDouble_(IOSDoubleArray_Get(lambda_, f)) > 100) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$I$D", @"lambda ", f, @" too big ", IOSDoubleArray_Get(nil_chk(lambda_), f))];
      [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:JreStrcat("$D$D", @"empirical ", IOSDoubleArray_Get(nil_chk(ftildeArr_), f), @" expected ", [self fExpectedWithEduStanfordNlpMaxentFeature:[((EduStanfordNlpMaxentFeatures *) nil_chk(((EduStanfordNlpMaxentProblem *) nil_chk(p_))->functions_)) getWithInt:f]])];
    }
  }
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$I$I", @" x size", ((EduStanfordNlpMaxentExperiments *) nil_chk(((EduStanfordNlpMaxentProblem *) nil_chk(p_))->data_))->xSize_, @"  ysize ", p_->data_->ySize_)];
  jdouble summAllExp = 0;
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(ftildeArr_))->size_; i++) {
    jdouble exp = JavaLangMath_absWithDouble_(IOSDoubleArray_Get(ftildeArr_, i) - [self fExpectedWithEduStanfordNlpMaxentFeature:[((EduStanfordNlpMaxentFeatures *) nil_chk(((EduStanfordNlpMaxentProblem *) nil_chk(p_))->functions_)) getWithInt:i]]);
    JrePlusAssignDoubleD(&summAllExp, IOSDoubleArray_Get(nil_chk(ftildeArr_), i));
    if (exp > 0.001) {
      flag = false;
      [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:JreStrcat("$ICDCD$D", @"Constraint not satisfied  ", i, ' ', [self fExpectedWithEduStanfordNlpMaxentFeature:[((EduStanfordNlpMaxentFeatures *) nil_chk(((EduStanfordNlpMaxentProblem *) nil_chk(p_))->functions_)) getWithInt:i]], ' ', IOSDoubleArray_Get(nil_chk(ftildeArr_), i), @" lambda ", IOSDoubleArray_Get(nil_chk(lambda_), i))];
    }
  }
  [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:JreStrcat("$D", @" The sum of all empirical expectations is ", summAllExp)];
  for (jint x = 0; x < ((EduStanfordNlpMaxentExperiments *) nil_chk(((EduStanfordNlpMaxentProblem *) nil_chk(p_))->data_))->xSize_; x++) {
    jdouble s = 0.0;
    for (jint y = 0; y < ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(nil_chk(probConds_), x)))->size_; y++) {
      s = s + IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(probConds_, x)), y);
    }
    if (JavaLangMath_absWithDouble_(s - 1) > 0.0001) {
      for (jint y = 0; y < ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(nil_chk(probConds_), x)))->size_; y++) {
        [JreLoadStatic(JavaLangSystem, err) printlnWithNSString:JreStrcat("$ICF", @"probabilities do not sum to one ", x, ' ', (jfloat) s)];
      }
    }
  }
  return flag;
}

- (jdouble)ZAlfaWithDouble:(jdouble)alfa
withEduStanfordNlpMaxentFeature:(EduStanfordNlpMaxentFeature *)f
                   withInt:(jint)x {
  jdouble s = 0.0;
  for (jint y = 0; y < ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(nil_chk(probConds_), x)))->size_; y++) {
    s = s + [self pcondWithInt:y withInt:x] * JavaLangMath_expWithDouble_(alfa * [((EduStanfordNlpMaxentFeature *) nil_chk(f)) getValWithInt:x withInt:y]);
  }
  return s;
}

- (jdouble)GSFWithDouble:(jdouble)alfa
withEduStanfordNlpMaxentFeature:(EduStanfordNlpMaxentFeature *)f
                 withInt:(jint)index {
  jdouble s = 0.0;
  for (jint x = 0; x < ((EduStanfordNlpMaxentExperiments *) nil_chk(((EduStanfordNlpMaxentProblem *) nil_chk(p_))->data_))->xSize_; x++) {
    s = s - [p_->data_ ptildeXWithInt:x] * JavaLangMath_logWithDouble_([self ZAlfaWithDouble:alfa withEduStanfordNlpMaxentFeature:f withInt:x]);
  }
  return s + alfa * IOSDoubleArray_Get(nil_chk(ftildeArr_), index);
}

- (jdouble)GSFWithDouble:(jdouble)alfa
withEduStanfordNlpMaxentFeature:(EduStanfordNlpMaxentFeature *)f {
  jdouble s = 0.0;
  for (jint x = 0; x < ((EduStanfordNlpMaxentExperiments *) nil_chk(((EduStanfordNlpMaxentProblem *) nil_chk(p_))->data_))->xSize_; x++) {
    s = s - [p_->data_ ptildeXWithInt:x] * JavaLangMath_logWithDouble_([self ZAlfaWithDouble:alfa withEduStanfordNlpMaxentFeature:f withInt:x]);
  }
  return s + alfa * [((EduStanfordNlpMaxentFeature *) nil_chk(f)) ftilde];
}

- (jdouble)pcondFAlfaWithDouble:(jdouble)alfa
                        withInt:(jint)x
                        withInt:(jint)y
withEduStanfordNlpMaxentFeature:(EduStanfordNlpMaxentFeature *)f {
  jdouble s;
  s = (1 / [self ZAlfaWithDouble:alfa withEduStanfordNlpMaxentFeature:f withInt:x]) * [self pcondWithInt:y withInt:x] * JavaLangMath_expWithDouble_(alfa * [((EduStanfordNlpMaxentFeature *) nil_chk(f)) getValWithInt:x withInt:y]);
  return s;
}

- (jdouble)GSFPrimeWithDouble:(jdouble)alfa
withEduStanfordNlpMaxentFeature:(EduStanfordNlpMaxentFeature *)f
                      withInt:(jint)index {
  jdouble s = 0.0;
  s = s + IOSDoubleArray_Get(nil_chk(ftildeArr_), index);
  for (jint x1 = 0; x1 < ((IOSIntArray *) nil_chk(((EduStanfordNlpMaxentFeature *) nil_chk(f))->indexedValues_))->size_; x1++) {
    jdouble s1 = 0.0;
    jint x = [f getXWithInt:x1];
    jint y = [f getYWithInt:x1];
    s1 = s1 + [self pcondFAlfaWithDouble:alfa withInt:x withInt:y withEduStanfordNlpMaxentFeature:f] * [f getValWithInt:x1];
    s = s - [((EduStanfordNlpMaxentExperiments *) nil_chk(((EduStanfordNlpMaxentProblem *) nil_chk(p_))->data_)) ptildeXWithInt:x] * s1;
  }
  return s;
}

- (jdouble)GSFPrimeWithDouble:(jdouble)alfa
withEduStanfordNlpMaxentFeature:(EduStanfordNlpMaxentFeature *)f {
  jdouble s = 0.0;
  s = s + [((EduStanfordNlpMaxentFeature *) nil_chk(f)) ftilde];
  for (jint x1 = 0; x1 < ((IOSIntArray *) nil_chk(f->indexedValues_))->size_; x1++) {
    jdouble s1 = 0.0;
    jint x = [f getXWithInt:x1];
    jint y = [f getYWithInt:x1];
    s1 = s1 + [self pcondFAlfaWithDouble:alfa withInt:x withInt:y withEduStanfordNlpMaxentFeature:f] * [f getValWithInt:x1];
    s = s - [((EduStanfordNlpMaxentExperiments *) nil_chk(((EduStanfordNlpMaxentProblem *) nil_chk(p_))->data_)) ptildeXWithInt:x] * s1;
  }
  return s;
}

- (jdouble)GSFSecondWithDouble:(jdouble)alfa
withEduStanfordNlpMaxentFeature:(EduStanfordNlpMaxentFeature *)f {
  jdouble s = 0.0;
  for (jint x = 0; x < ((EduStanfordNlpMaxentExperiments *) nil_chk(((EduStanfordNlpMaxentProblem *) nil_chk(p_))->data_))->xSize_; x++) {
    jdouble s1 = 0.0;
    jdouble psff = 0.0;
    for (jint y1 = 0; y1 < ((EduStanfordNlpMaxentExperiments *) nil_chk(((EduStanfordNlpMaxentProblem *) nil_chk(p_))->data_))->ySize_; y1++) {
      psff = psff + [self pcondFAlfaWithDouble:alfa withInt:x withInt:y1 withEduStanfordNlpMaxentFeature:f] * [((EduStanfordNlpMaxentFeature *) nil_chk(f)) getValWithInt:x withInt:y1];
    }
    for (jint y = 0; y < ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(nil_chk(probConds_), x)))->size_; y++) {
      s1 = s1 + [self pcondFAlfaWithDouble:alfa withInt:x withInt:y withEduStanfordNlpMaxentFeature:f] * ([((EduStanfordNlpMaxentFeature *) nil_chk(f)) getValWithInt:x withInt:y] - psff) * ([f getValWithInt:x withInt:y] - psff);
    }
    s = s - s1 * [((EduStanfordNlpMaxentExperiments *) nil_chk(((EduStanfordNlpMaxentProblem *) nil_chk(p_))->data_)) ptildeXWithInt:x];
  }
  return s;
}

- (jdouble)GainComputeWithEduStanfordNlpMaxentFeature:(EduStanfordNlpMaxentFeature *)f
                                           withDouble:(jdouble)errorGain {
  jdouble r = ([((EduStanfordNlpMaxentFeature *) nil_chk(f)) ftilde] > [self fExpectedWithEduStanfordNlpMaxentFeature:f] ? 1.0 : -1.0);
  [f initHashVals];
  jint iterations = 0;
  jdouble alfa = 0.0;
  [self GSFWithDouble:alfa withEduStanfordNlpMaxentFeature:f];
  jdouble gsfValNew = 0.0;
  while (iterations < 30) {
    iterations++;
    jdouble alfanext = alfa + r * JavaLangMath_logWithDouble_(1 - r * [self GSFPrimeWithDouble:alfa withEduStanfordNlpMaxentFeature:f] / [self GSFSecondWithDouble:alfa withEduStanfordNlpMaxentFeature:f]);
    gsfValNew = [self GSFWithDouble:alfanext withEduStanfordNlpMaxentFeature:f];
    if (JavaLangMath_absWithDouble_(alfanext - alfa) < errorGain) {
      return gsfValNew;
    }
    alfa = alfanext;
  }
  return gsfValNew;
}

- (void)print {
  for (jint i = 0; i < ((EduStanfordNlpMaxentExperiments *) nil_chk(((EduStanfordNlpMaxentProblem *) nil_chk(p_))->data_))->xSize_; i++) {
    for (jint j = 0; j < ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(nil_chk(probConds_), i)))->size_; j++) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I$I$D", @"P(", j, @" | ", i, @") = ", [self pcondWithInt:j withInt:i])];
    }
  }
}

- (void)save_lambdasWithNSString:(NSString *)filename {
  @try {
    JavaIoDataOutputStream *rf = EduStanfordNlpIoIOUtils_getDataOutputStreamWithNSString_(filename);
    EduStanfordNlpMaxentIisLambdaSolve_save_lambdasWithJavaIoDataOutputStream_withDoubleArray_(rf, lambda_);
    [((JavaIoDataOutputStream *) nil_chk(rf)) close];
  }
  @catch (JavaIoIOException *e) {
    [((JavaIoIOException *) nil_chk(e)) printStackTrace];
  }
}

+ (void)save_lambdasWithJavaIoDataOutputStream:(JavaIoDataOutputStream *)rf
                               withDoubleArray:(IOSDoubleArray *)lambdas {
  EduStanfordNlpMaxentIisLambdaSolve_save_lambdasWithJavaIoDataOutputStream_withDoubleArray_(rf, lambdas);
}

- (void)readLWithNSString:(NSString *)filename {
  @try {
    JavaIoDataInputStream *rf = EduStanfordNlpIoIOUtils_getDataInputStreamWithNSString_(filename);
    lambda_ = EduStanfordNlpMaxentIisLambdaSolve_read_lambdasWithJavaIoDataInputStream_(rf);
    [((JavaIoDataInputStream *) nil_chk(rf)) close];
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
  }
}

+ (IOSDoubleArray *)read_lambdasWithNSString:(NSString *)modelFilename {
  return EduStanfordNlpMaxentIisLambdaSolve_read_lambdasWithNSString_(modelFilename);
}

+ (IOSDoubleArray *)read_lambdasWithJavaIoDataInputStream:(JavaIoDataInputStream *)rf {
  return EduStanfordNlpMaxentIisLambdaSolve_read_lambdasWithJavaIoDataInputStream_(rf);
}

- (void)save_problemWithNSString:(NSString *)filename {
  @try {
    EduStanfordNlpIoPrintFile *pf = new_EduStanfordNlpIoPrintFile_initWithNSString_(filename);
    jint N = ((EduStanfordNlpMaxentExperiments *) nil_chk(((EduStanfordNlpMaxentProblem *) nil_chk(p_))->data_))->xSize_;
    jint M = p_->data_->ySize_;
    jint F = p_->fSize_;
    [pf printlnWithInt:N];
    [pf printlnWithInt:M];
    [pf printlnWithInt:F];
    for (jint i = 0; i < N * M; i++) {
      [pf printWithInt:i + 1];
      [pf printWithNSString:@". "];
      [pf printlnWithDouble:[((EduStanfordNlpMaxentExperiments *) nil_chk(((EduStanfordNlpMaxentProblem *) nil_chk(p_))->data_)) ptildeXWithInt:i / M]];
    }
    for (jint i = 0; i < ((EduStanfordNlpMaxentProblem *) nil_chk(p_))->fSize_; i++) {
      IOSIntArray *values = ((EduStanfordNlpMaxentFeature *) nil_chk([((EduStanfordNlpMaxentFeatures *) nil_chk(p_->functions_)) getWithInt:i]))->indexedValues_;
      {
        IOSIntArray *a__ = values;
        jint const *b__ = ((IOSIntArray *) nil_chk(a__))->buffer_;
        jint const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          jint value = *b__++;
          [pf printWithInt:i + 1];
          [pf printWithNSString:@". "];
          [pf printWithInt:value];
          [pf printWithNSString:@" "];
          [pf printlnWithInt:1];
        }
      }
    }
    for (jint i = 0; i < ((EduStanfordNlpMaxentProblem *) nil_chk(p_))->fSize_; i++) {
      [pf printWithInt:i + 1];
      [pf printWithNSString:@". "];
      [pf printlnWithDouble:IOSDoubleArray_Get(nil_chk(ftildeArr_), i)];
    }
    [pf close];
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
  }
}

- (jdouble)logLikelihood {
  jdouble sum = 0.0;
  jint sz = [((EduStanfordNlpMaxentExperiments *) nil_chk(((EduStanfordNlpMaxentProblem *) nil_chk(p_))->data_)) size];
  for (jint index = 0; index < sz; index++) {
    IOSIntArray *example = [((EduStanfordNlpMaxentExperiments *) nil_chk(((EduStanfordNlpMaxentProblem *) nil_chk(p_))->data_)) getWithInt:index];
    JrePlusAssignDoubleD(&sum, JavaLangMath_logWithDouble_([self pcondWithInt:IOSIntArray_Get(nil_chk(example), 1) withInt:IOSIntArray_Get(example, 0)]));
  }
  return sum / sz;
}

+ (jdouble)divideWithDouble:(jdouble)first
                 withDouble:(jdouble)second {
  return EduStanfordNlpMaxentIisLambdaSolve_divideWithDouble_withDouble_(first, second);
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  EduStanfordNlpMaxentIisLambdaSolve_mainWithNSStringArray_(args);
}

- (jdouble)logLikelihoodNeg {
  jdouble s = 0;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(probConds_))->size_; i++) {
    for (jint j = 0; j < ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(probConds_, i)))->size_; j++) {
      *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(probConds_, i)), j) = 0;
    }
    *IOSDoubleArray_GetRef(nil_chk(zlambda_), i) = 0;
  }
  for (jint fNo = 0, fSize = ((EduStanfordNlpMaxentProblem *) nil_chk(p_))->fSize_; fNo < fSize; fNo++) {
    EduStanfordNlpMaxentFeature *f = [((EduStanfordNlpMaxentFeatures *) nil_chk(((EduStanfordNlpMaxentProblem *) nil_chk(p_))->functions_)) getWithInt:fNo];
    jdouble fLambda = -JavaLangMath_expWithDouble_(IOSDoubleArray_Get(nil_chk(lambda_), fNo));
    jdouble sum = IOSDoubleArray_Get(nil_chk(ftildeArr_), fNo);
    JreTimesAssignDoubleD(&sum, [((EduStanfordNlpMaxentExperiments *) nil_chk(((EduStanfordNlpMaxentProblem *) nil_chk(p_))->data_)) getNumber]);
    JreMinusAssignDoubleD(&s, sum * fLambda);
    if (JavaLangMath_absWithDouble_(fLambda) > 200) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$I$D", @"lambda ", fNo, @" too big: ", fLambda)];
    }
    for (jint i = 0, length = [((EduStanfordNlpMaxentFeature *) nil_chk(f)) len]; i < length; i++) {
      jint x = [f getXWithInt:i];
      jint y = [f getYWithInt:i];
      if (ASSUME_BINARY_) {
        JrePlusAssignDoubleD(IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(probConds_), x)), y), fLambda);
      }
      else {
        jdouble val = [f getValWithInt:i];
        JrePlusAssignDoubleD(IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(probConds_), x)), y), (val * fLambda));
      }
    }
  }
  for (jint x = 0; x < ((IOSObjectArray *) nil_chk(probConds_))->size_; x++) {
    *IOSDoubleArray_GetRef(nil_chk(zlambda_), x) = EduStanfordNlpMathArrayMath_logSumWithDoubleArray_(IOSObjectArray_Get(probConds_, x));
    JrePlusAssignDoubleD(&s, IOSDoubleArray_Get(nil_chk(zlambda_), x) * [((EduStanfordNlpMaxentExperiments *) nil_chk(((EduStanfordNlpMaxentProblem *) nil_chk(p_))->data_)) ptildeXWithInt:x] * [((EduStanfordNlpMaxentExperiments *) nil_chk(((EduStanfordNlpMaxentProblem *) nil_chk(p_))->data_)) getNumber]);
    for (jint y = 0; y < ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(nil_chk(probConds_), x)))->size_; y++) {
      *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(probConds_, x)), y) = EduStanfordNlpMaxentIisLambdaSolve_divideWithDouble_withDouble_(IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(probConds_, x)), y), IOSDoubleArray_Get(nil_chk(zlambda_), x));
    }
  }
  if (s < 0) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$D", @"neg log lik smaller than 0: ", s));
  }
  return s;
}

- (jdouble)logLikelihoodScratch {
  jdouble s = 0;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(probConds_))->size_; i++) {
    for (jint j = 0; j < ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(probConds_, i)))->size_; j++) {
      *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(probConds_, i)), j) = 0;
    }
    *IOSDoubleArray_GetRef(nil_chk(zlambda_), i) = 0;
  }
  EduStanfordNlpMaxentExperiments *exp = ((EduStanfordNlpMaxentProblem *) nil_chk(p_))->data_;
  for (jint fNo = 0, fSize = p_->fSize_; fNo < fSize; fNo++) {
    EduStanfordNlpMaxentFeature *f = [((EduStanfordNlpMaxentFeatures *) nil_chk(((EduStanfordNlpMaxentProblem *) nil_chk(p_))->functions_)) getWithInt:fNo];
    jdouble fLambda = IOSDoubleArray_Get(nil_chk(lambda_), fNo);
    jdouble sum = IOSDoubleArray_Get(nil_chk(ftildeArr_), fNo);
    JreTimesAssignDoubleD(&sum, [((EduStanfordNlpMaxentExperiments *) nil_chk(exp)) getNumber]);
    JreMinusAssignDoubleD(&s, sum * fLambda);
    if (JavaLangMath_absWithDouble_(fLambda) > 200) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$I$D", @"lambda ", fNo, @" too big: ", fLambda)];
    }
    for (jint i = 0, length = [((EduStanfordNlpMaxentFeature *) nil_chk(f)) len]; i < length; i++) {
      jint x = [f getXWithInt:i];
      jint y = [f getYWithInt:i];
      if (ASSUME_BINARY_) {
        JrePlusAssignDoubleD(IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(probConds_), x)), y), fLambda);
      }
      else {
        jdouble val = [f getValWithInt:i];
        JrePlusAssignDoubleD(IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(probConds_), x)), y), (val * fLambda));
      }
    }
  }
  for (jint x = 0; x < ((IOSObjectArray *) nil_chk(probConds_))->size_; x++) {
    *IOSDoubleArray_GetRef(nil_chk(zlambda_), x) = EduStanfordNlpMathArrayMath_logSumWithDoubleArray_(IOSObjectArray_Get(probConds_, x));
    JrePlusAssignDoubleD(&s, IOSDoubleArray_Get(nil_chk(zlambda_), x) * [((EduStanfordNlpMaxentExperiments *) nil_chk(exp)) ptildeXWithInt:x] * [exp getNumber]);
    for (jint y = 0; y < ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(nil_chk(probConds_), x)))->size_; y++) {
      *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(probConds_, x)), y) = EduStanfordNlpMaxentIisLambdaSolve_divideWithDouble_withDouble_(IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(probConds_, x)), y), IOSDoubleArray_Get(nil_chk(zlambda_), x));
    }
  }
  if (s < 0) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$D", @"neg log lik smaller than 0: ", s));
  }
  return s;
}

- (IOSDoubleArray *)getDerivatives {
  IOSDoubleArray *drvs = [IOSDoubleArray newArrayWithLength:((IOSDoubleArray *) nil_chk(lambda_))->size_];
  EduStanfordNlpMaxentExperiments *exp = ((EduStanfordNlpMaxentProblem *) nil_chk(p_))->data_;
  for (jint fNo = 0; fNo < drvs->size_; fNo++) {
    EduStanfordNlpMaxentFeature *f = [((EduStanfordNlpMaxentFeatures *) nil_chk(((EduStanfordNlpMaxentProblem *) nil_chk(p_))->functions_)) getWithInt:fNo];
    jdouble sum = IOSDoubleArray_Get(nil_chk(ftildeArr_), fNo) * [((EduStanfordNlpMaxentExperiments *) nil_chk(exp)) getNumber];
    *IOSDoubleArray_GetRef(drvs, fNo) = -sum;
    for (jint index = 0, length = [((EduStanfordNlpMaxentFeature *) nil_chk(f)) len]; index < length; index++) {
      jint x = [f getXWithInt:index];
      jint y = [f getYWithInt:index];
      if (ASSUME_BINARY_) {
        JrePlusAssignDoubleD(IOSDoubleArray_GetRef(drvs, fNo), IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(probConds_), x)), y) * [exp ptildeXWithInt:x] * [exp getNumber]);
      }
      else {
        jdouble val = [f getValWithInt:index];
        JrePlusAssignDoubleD(IOSDoubleArray_GetRef(drvs, fNo), IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(probConds_), x)), y) * val * [exp ptildeXWithInt:x] * [exp getNumber]);
      }
    }
  }
  return drvs;
}

- (IOSDoubleArray *)getDerivativesNeg {
  IOSDoubleArray *drvs = [IOSDoubleArray newArrayWithLength:((IOSDoubleArray *) nil_chk(lambda_))->size_];
  EduStanfordNlpMaxentExperiments *exp = ((EduStanfordNlpMaxentProblem *) nil_chk(p_))->data_;
  for (jint fNo = 0; fNo < drvs->size_; fNo++) {
    EduStanfordNlpMaxentFeature *f = [((EduStanfordNlpMaxentFeatures *) nil_chk(((EduStanfordNlpMaxentProblem *) nil_chk(p_))->functions_)) getWithInt:fNo];
    jdouble sum = IOSDoubleArray_Get(nil_chk(ftildeArr_), fNo) * [((EduStanfordNlpMaxentExperiments *) nil_chk(exp)) getNumber];
    jdouble lam = -JavaLangMath_expWithDouble_(IOSDoubleArray_Get(nil_chk(lambda_), fNo));
    *IOSDoubleArray_GetRef(drvs, fNo) = -sum * lam;
    for (jint index = 0, length = [((EduStanfordNlpMaxentFeature *) nil_chk(f)) len]; index < length; index++) {
      jint x = [f getXWithInt:index];
      jint y = [f getYWithInt:index];
      if (ASSUME_BINARY_) {
        JrePlusAssignDoubleD(IOSDoubleArray_GetRef(drvs, fNo), IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(probConds_), x)), y) * [exp ptildeXWithInt:x] * [exp getNumber] * lam);
      }
      else {
        jdouble val = [f getValWithInt:index];
        JrePlusAssignDoubleD(IOSDoubleArray_GetRef(drvs, fNo), IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(probConds_), x)), y) * val * [exp ptildeXWithInt:x] * [exp getNumber] * lam);
      }
    }
  }
  return drvs;
}

- (jdouble)expectedValue {
  jdouble s = 0;
  aux_ = [IOSDoubleArray newArrayWithLength:((IOSObjectArray *) nil_chk(probConds_))->size_];
  for (jint i = 0; i < probConds_->size_; i++) {
    for (jint j = 0; j < ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(probConds_, i)))->size_; j++) {
      *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(probConds_, i)), j) = 0;
    }
    *IOSDoubleArray_GetRef(nil_chk(zlambda_), i) = 0;
  }
  for (jint fNo = 0, fSize = ((EduStanfordNlpMaxentProblem *) nil_chk(p_))->fSize_; fNo < fSize; fNo++) {
    EduStanfordNlpMaxentFeature *f = [((EduStanfordNlpMaxentFeatures *) nil_chk(((EduStanfordNlpMaxentProblem *) nil_chk(p_))->functions_)) getWithInt:fNo];
    jdouble fLambda = IOSDoubleArray_Get(nil_chk(lambda_), fNo);
    if (JavaLangMath_absWithDouble_(fLambda) > 200) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$I$D", @"lambda ", fNo, @" too big: ", fLambda)];
    }
    for (jint i = 0, length = [((EduStanfordNlpMaxentFeature *) nil_chk(f)) len]; i < length; i++) {
      jint x = [f getXWithInt:i];
      jint y = [f getYWithInt:i];
      if (ASSUME_BINARY_) {
        JrePlusAssignDoubleD(IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(probConds_), x)), y), fLambda);
      }
      else {
        jdouble val = [f getValWithInt:i];
        JrePlusAssignDoubleD(IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(probConds_), x)), y), (val * fLambda));
      }
    }
  }
  EduStanfordNlpMaxentExperiments *exp = ((EduStanfordNlpMaxentProblem *) nil_chk(p_))->data_;
  for (jint x = 0; x < ((IOSObjectArray *) nil_chk(probConds_))->size_; x++) {
    *IOSDoubleArray_GetRef(nil_chk(zlambda_), x) = EduStanfordNlpMathArrayMath_logSumWithDoubleArray_(IOSObjectArray_Get(probConds_, x));
    for (jint y = 0; y < ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(nil_chk(probConds_), x)))->size_; y++) {
      *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(probConds_, x)), y) = EduStanfordNlpMaxentIisLambdaSolve_divideWithDouble_withDouble_(IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(probConds_, x)), y), IOSDoubleArray_Get(nil_chk(zlambda_), x));
      JreMinusAssignDoubleD(&s, IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(((EduStanfordNlpMaxentExperiments *) nil_chk(exp))->values_), x)), y) * IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(probConds_), x)), y) * [exp ptildeXWithInt:x] * [exp getNumber]);
      JrePlusAssignDoubleD(IOSDoubleArray_GetRef(nil_chk(aux_), x), IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(exp->values_), x)), y) * IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(probConds_), x)), y));
    }
  }
  return s;
}

- (IOSDoubleArray *)getDerivativesExpectedValue {
  IOSDoubleArray *drvs = [IOSDoubleArray newArrayWithLength:((IOSDoubleArray *) nil_chk(lambda_))->size_];
  EduStanfordNlpMaxentExperiments *exp = ((EduStanfordNlpMaxentProblem *) nil_chk(p_))->data_;
  for (jint fNo = 0; fNo < drvs->size_; fNo++) {
    EduStanfordNlpMaxentFeature *f = [((EduStanfordNlpMaxentFeatures *) nil_chk(((EduStanfordNlpMaxentProblem *) nil_chk(p_))->functions_)) getWithInt:fNo];
    for (jint index = 0, length = [((EduStanfordNlpMaxentFeature *) nil_chk(f)) len]; index < length; index++) {
      jint x = [f getXWithInt:index];
      jint y = [f getYWithInt:index];
      jdouble val = [f getValWithInt:index];
      jdouble mult = val * IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(probConds_), x)), y) * [((EduStanfordNlpMaxentExperiments *) nil_chk(exp)) ptildeXWithInt:x] * [exp getNumber];
      JreMinusAssignDoubleD(IOSDoubleArray_GetRef(drvs, fNo), mult * IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(exp->values_), x)), y));
      JrePlusAssignDoubleD(IOSDoubleArray_GetRef(drvs, fNo), mult * IOSDoubleArray_Get(nil_chk(aux_), x));
    }
  }
  return drvs;
}

- (jdouble)lossDomination {
  jdouble s = 0;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(probConds_))->size_; i++) {
    for (jint j = 0; j < ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(probConds_, i)))->size_; j++) {
      *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(probConds_, i)), j) = 0;
    }
    *IOSDoubleArray_GetRef(nil_chk(zlambda_), i) = 0;
  }
  for (jint fNo = 0, fSize = ((EduStanfordNlpMaxentProblem *) nil_chk(p_))->fSize_; fNo < fSize; fNo++) {
    EduStanfordNlpMaxentFeature *f = [((EduStanfordNlpMaxentFeatures *) nil_chk(((EduStanfordNlpMaxentProblem *) nil_chk(p_))->functions_)) getWithInt:fNo];
    jdouble fLambda = IOSDoubleArray_Get(nil_chk(lambda_), fNo);
    if (JavaLangMath_absWithDouble_(fLambda) > 200) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$I$D", @"lambda ", fNo, @" too big: ", fLambda)];
    }
    for (jint i = 0, length = [((EduStanfordNlpMaxentFeature *) nil_chk(f)) len]; i < length; i++) {
      jint x = [f getXWithInt:i];
      jint y = [f getYWithInt:i];
      if (ASSUME_BINARY_) {
        JrePlusAssignDoubleD(IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(probConds_), x)), y), fLambda);
      }
      else {
        jdouble val = [f getValWithInt:i];
        JrePlusAssignDoubleD(IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(probConds_), x)), y), (val * fLambda));
      }
    }
  }
  sum_ = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(probConds_))->size_ type:IOSClass_doubleArray(1)];
  sub_ = [IOSObjectArray newArrayWithLength:probConds_->size_ type:IOSClass_doubleArray(1)];
  for (jint x = 0; x < ((IOSObjectArray *) nil_chk(probConds_))->size_; x++) {
    (void) IOSObjectArray_SetAndConsume(nil_chk(sum_), x, [IOSDoubleArray newArrayWithLength:((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(probConds_, x)))->size_]);
    (void) IOSObjectArray_SetAndConsume(nil_chk(sub_), x, [IOSDoubleArray newArrayWithLength:((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(probConds_, x)))->size_]);
    jdouble localloss = 0;
    for (jint u = 0; u < ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(nil_chk(sum_), x)))->size_; u++) {
      jboolean hasgraph = false;
      for (jint v = 0; v < ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(nil_chk(sum_), x)))->size_; v++) {
        if (IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(((EduStanfordNlpMaxentExperiments *) nil_chk(((EduStanfordNlpMaxentProblem *) nil_chk(p_))->data_))->values_), x)), u) > IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(p_->data_->values_, x)), v)) {
          hasgraph = true;
          JrePlusAssignDoubleD(IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(sum_, x)), u), JavaLangMath_expWithDouble_(IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(probConds_), x)), v) - IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(probConds_, x)), u)));
        }
      }
      JrePlusAssignDoubleD(IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(sum_, x)), u), 1);
      jdouble weight = 1;
      if (weightRanks_) {
        weight = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(((EduStanfordNlpMaxentExperiments *) nil_chk(((EduStanfordNlpMaxentProblem *) nil_chk(p_))->data_))->values_), x)), u);
      }
      if (hasgraph) {
        JrePlusAssignDoubleD(IOSDoubleArray_GetRef(nil_chk(zlambda_), x), weight);
      }
      JrePlusAssignDoubleD(&localloss, weight * JavaLangMath_logWithDouble_(IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(sum_, x)), u)));
    }
    for (jint u = 0; u < ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(sum_, x)))->size_; u++) {
      for (jint v = 0; v < ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(sum_, x)))->size_; v++) {
        if (IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(((EduStanfordNlpMaxentExperiments *) nil_chk(((EduStanfordNlpMaxentProblem *) nil_chk(p_))->data_))->values_), x)), u) > IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(p_->data_->values_, x)), v)) {
          jdouble weight = 1;
          if (weightRanks_) {
            weight = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(p_->data_->values_, x)), u);
          }
          JrePlusAssignDoubleD(IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(sub_), x)), v), weight * JavaLangMath_expWithDouble_(IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(probConds_), x)), v) - IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(probConds_, x)), u)) / IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(sum_), x)), u));
        }
      }
    }
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$I$D", @" for x ", x, @" number graphs ", IOSDoubleArray_Get(nil_chk(zlambda_), x))];
    if (IOSDoubleArray_Get(nil_chk(zlambda_), x) > 0) {
      JreDivideAssignDoubleD(&localloss, IOSDoubleArray_Get(zlambda_, x));
      JrePlusAssignDoubleD(&s, [((EduStanfordNlpMaxentExperiments *) nil_chk(((EduStanfordNlpMaxentProblem *) nil_chk(p_))->data_)) ptildeXWithInt:x] * [((EduStanfordNlpMaxentExperiments *) nil_chk(((EduStanfordNlpMaxentProblem *) nil_chk(p_))->data_)) getNumber] * localloss);
    }
  }
  return s;
}

- (IOSDoubleArray *)getDerivativesLossDomination {
  IOSDoubleArray *drvs = [IOSDoubleArray newArrayWithLength:((IOSDoubleArray *) nil_chk(lambda_))->size_];
  for (jint fNo = 0; fNo < drvs->size_; fNo++) {
    EduStanfordNlpMaxentFeature *f = [((EduStanfordNlpMaxentFeatures *) nil_chk(((EduStanfordNlpMaxentProblem *) nil_chk(p_))->functions_)) getWithInt:fNo];
    for (jint index = 0, length = [((EduStanfordNlpMaxentFeature *) nil_chk(f)) len]; index < length; index++) {
      jint x = [f getXWithInt:index];
      jint y = [f getYWithInt:index];
      jdouble val = [f getValWithInt:index];
      if (IOSDoubleArray_Get(nil_chk(zlambda_), x) == 0) {
        continue;
      }
      jdouble mult = val * [((EduStanfordNlpMaxentExperiments *) nil_chk(((EduStanfordNlpMaxentProblem *) nil_chk(p_))->data_)) ptildeXWithInt:x] * [((EduStanfordNlpMaxentExperiments *) nil_chk(((EduStanfordNlpMaxentProblem *) nil_chk(p_))->data_)) getNumber] * (1 / IOSDoubleArray_Get(nil_chk(zlambda_), x));
      jdouble weight = 1;
      if (weightRanks_) {
        weight = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(((EduStanfordNlpMaxentExperiments *) nil_chk(((EduStanfordNlpMaxentProblem *) nil_chk(p_))->data_))->values_), x)), y);
      }
      JrePlusAssignDoubleD(IOSDoubleArray_GetRef(drvs, fNo), mult * IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(sub_), x)), y));
      JreMinusAssignDoubleD(IOSDoubleArray_GetRef(drvs, fNo), mult * weight * (IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(sum_), x)), y) - 1) / IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(sum_, x)), y));
    }
  }
  return drvs;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 4, 5, -1, -1, -1, -1 },
    { NULL, "D", 0x0, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 8, 9, -1, -1, -1, -1 },
    { NULL, "D", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "D", 0x4, 12, 11, -1, -1, -1, -1 },
    { NULL, "D", 0x0, 13, 14, -1, -1, -1, -1 },
    { NULL, "D", 0x0, 15, 14, -1, -1, -1, -1 },
    { NULL, "D", 0x0, 16, 17, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x0, 18, 19, -1, -1, -1, -1 },
    { NULL, "D", 0x0, 20, 19, -1, -1, -1, -1 },
    { NULL, "D", 0x0, 20, 21, -1, -1, -1, -1 },
    { NULL, "D", 0x0, 22, 23, -1, -1, -1, -1 },
    { NULL, "D", 0x0, 24, 19, -1, -1, -1, -1 },
    { NULL, "D", 0x0, 24, 21, -1, -1, -1, -1 },
    { NULL, "D", 0x0, 25, 21, -1, -1, -1, -1 },
    { NULL, "D", 0x1, 26, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 28, 29, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 30, 1, -1, -1, -1, -1 },
    { NULL, "[D", 0x8, 31, 1, -1, -1, -1, -1 },
    { NULL, "[D", 0x9, 31, 32, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 33, 1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 34, 35, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 36, 37, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[D", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpMaxentProblem:withDouble:withDouble:);
  methods[1].selector = @selector(initWithNSString:);
  methods[2].selector = @selector(init);
  methods[3].selector = @selector(setNonBinary);
  methods[4].selector = @selector(setBinary);
  methods[5].selector = @selector(transformValues);
  methods[6].selector = @selector(initCondsZlambdaEtc);
  methods[7].selector = @selector(improvedIterative);
  methods[8].selector = @selector(improvedIterativeWithInt:);
  methods[9].selector = @selector(iterateWithInt:withDouble:withEduStanfordNlpUtilMutableDouble:);
  methods[10].selector = @selector(newtonWithDouble:withInt:withDouble:);
  methods[11].selector = @selector(updateCondsWithInt:withDouble:);
  methods[12].selector = @selector(pcondWithInt:withInt:);
  methods[13].selector = @selector(fnumWithInt:withInt:);
  methods[14].selector = @selector(gWithDouble:withInt:);
  methods[15].selector = @selector(gprimeWithDouble:withInt:);
  methods[16].selector = @selector(fExpectedWithEduStanfordNlpMaxentFeature:);
  methods[17].selector = @selector(checkCorrectness);
  methods[18].selector = @selector(ZAlfaWithDouble:withEduStanfordNlpMaxentFeature:withInt:);
  methods[19].selector = @selector(GSFWithDouble:withEduStanfordNlpMaxentFeature:withInt:);
  methods[20].selector = @selector(GSFWithDouble:withEduStanfordNlpMaxentFeature:);
  methods[21].selector = @selector(pcondFAlfaWithDouble:withInt:withInt:withEduStanfordNlpMaxentFeature:);
  methods[22].selector = @selector(GSFPrimeWithDouble:withEduStanfordNlpMaxentFeature:withInt:);
  methods[23].selector = @selector(GSFPrimeWithDouble:withEduStanfordNlpMaxentFeature:);
  methods[24].selector = @selector(GSFSecondWithDouble:withEduStanfordNlpMaxentFeature:);
  methods[25].selector = @selector(GainComputeWithEduStanfordNlpMaxentFeature:withDouble:);
  methods[26].selector = @selector(print);
  methods[27].selector = @selector(save_lambdasWithNSString:);
  methods[28].selector = @selector(save_lambdasWithJavaIoDataOutputStream:withDoubleArray:);
  methods[29].selector = @selector(readLWithNSString:);
  methods[30].selector = @selector(read_lambdasWithNSString:);
  methods[31].selector = @selector(read_lambdasWithJavaIoDataInputStream:);
  methods[32].selector = @selector(save_problemWithNSString:);
  methods[33].selector = @selector(logLikelihood);
  methods[34].selector = @selector(divideWithDouble:withDouble:);
  methods[35].selector = @selector(mainWithNSStringArray:);
  methods[36].selector = @selector(logLikelihoodNeg);
  methods[37].selector = @selector(logLikelihoodScratch);
  methods[38].selector = @selector(getDerivatives);
  methods[39].selector = @selector(getDerivativesNeg);
  methods[40].selector = @selector(expectedValue);
  methods[41].selector = @selector(getDerivativesExpectedValue);
  methods[42].selector = @selector(lossDomination);
  methods[43].selector = @selector(getDerivativesLossDomination);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "lambda_", "[D", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "lambda_converged_", "[Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "eps_", "D", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "fixedFnumXY_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "p_", "LEduStanfordNlpMaxentProblem;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "probConds_", "[[D", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "zlambda_", "[D", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "fnumArr_", "[[B", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "ftildeArr_", "[D", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "smooth", "Z", .constantValue.asBOOL = EduStanfordNlpMaxentIisLambdaSolve_smooth, 0x1a, -1, -1, -1, -1 },
    { "VERBOSE", "Z", .constantValue.asBOOL = EduStanfordNlpMaxentIisLambdaSolve_VERBOSE, 0x1a, -1, -1, -1, -1 },
    { "ASSUME_BINARY_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "aux_", "[D", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "sum_", "[[D", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "sub_", "[[D", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "weightRanks_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "convertValues_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpMaxentProblem;DD", "LNSString;", "improvedIterative", "I", "iterate", "IDLEduStanfordNlpUtilMutableDouble;", "newton", "DID", "updateConds", "ID", "pcond", "II", "fnum", "g", "DI", "gprime", "fExpected", "LEduStanfordNlpMaxentFeature;", "ZAlfa", "DLEduStanfordNlpMaxentFeature;I", "GSF", "DLEduStanfordNlpMaxentFeature;", "pcondFAlfa", "DIILEduStanfordNlpMaxentFeature;", "GSFPrime", "GSFSecond", "GainCompute", "LEduStanfordNlpMaxentFeature;D", "save_lambdas", "LJavaIoDataOutputStream;[D", "readL", "read_lambdas", "LJavaIoDataInputStream;", "save_problem", "divide", "DD", "main", "[LNSString;" };
  static const J2ObjcClassInfo _EduStanfordNlpMaxentIisLambdaSolve = { "LambdaSolve", "edu.stanford.nlp.maxent.iis", ptrTable, methods, fields, 7, 0x1, 44, 17, -1, -1, -1, -1, -1 };
  return &_EduStanfordNlpMaxentIisLambdaSolve;
}

@end

void EduStanfordNlpMaxentIisLambdaSolve_initWithEduStanfordNlpMaxentProblem_withDouble_withDouble_(EduStanfordNlpMaxentIisLambdaSolve *self, EduStanfordNlpMaxentProblem *p1, jdouble eps1, jdouble nerr1) {
  NSObject_init(self);
  self->ASSUME_BINARY_ = false;
  self->weightRanks_ = false;
  self->convertValues_ = false;
  self->p_ = p1;
  self->eps_ = eps1;
  self->probConds_ = [IOSObjectArray newArrayWithLength:((EduStanfordNlpMaxentExperiments *) nil_chk(((EduStanfordNlpMaxentProblem *) nil_chk(self->p_))->data_))->xSize_ type:IOSClass_doubleArray(1)];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$I", @"xSize is ", self->p_->data_->xSize_)];
  for (jint i = 0; i < ((EduStanfordNlpMaxentExperiments *) nil_chk(((EduStanfordNlpMaxentProblem *) nil_chk(self->p_))->data_))->xSize_; i++) {
    (void) IOSObjectArray_SetAndConsume(nil_chk(self->probConds_), i, [IOSDoubleArray newArrayWithLength:[self->p_->data_ numYWithInt:i]]);
  }
  self->fnumArr_ = [IOSObjectArray newArrayWithLength:self->p_->data_->xSize_ type:IOSClass_byteArray(1)];
  for (jint i = 0; i < ((EduStanfordNlpMaxentExperiments *) nil_chk(((EduStanfordNlpMaxentProblem *) nil_chk(self->p_))->data_))->xSize_; i++) {
    (void) IOSObjectArray_SetAndConsume(nil_chk(self->fnumArr_), i, [IOSByteArray newArrayWithLength:[self->p_->data_ numYWithInt:i]]);
  }
  self->zlambda_ = [IOSDoubleArray newArrayWithLength:self->p_->data_->xSize_];
  self->ftildeArr_ = [IOSDoubleArray newArrayWithLength:self->p_->fSize_];
  [self initCondsZlambdaEtc];
  if (self->convertValues_) {
    [self transformValues];
  }
}

EduStanfordNlpMaxentIisLambdaSolve *new_EduStanfordNlpMaxentIisLambdaSolve_initWithEduStanfordNlpMaxentProblem_withDouble_withDouble_(EduStanfordNlpMaxentProblem *p1, jdouble eps1, jdouble nerr1) {
  J2OBJC_NEW_IMPL(EduStanfordNlpMaxentIisLambdaSolve, initWithEduStanfordNlpMaxentProblem_withDouble_withDouble_, p1, eps1, nerr1)
}

EduStanfordNlpMaxentIisLambdaSolve *create_EduStanfordNlpMaxentIisLambdaSolve_initWithEduStanfordNlpMaxentProblem_withDouble_withDouble_(EduStanfordNlpMaxentProblem *p1, jdouble eps1, jdouble nerr1) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpMaxentIisLambdaSolve, initWithEduStanfordNlpMaxentProblem_withDouble_withDouble_, p1, eps1, nerr1)
}

void EduStanfordNlpMaxentIisLambdaSolve_initWithNSString_(EduStanfordNlpMaxentIisLambdaSolve *self, NSString *filename) {
  NSObject_init(self);
  self->ASSUME_BINARY_ = false;
  self->weightRanks_ = false;
  self->convertValues_ = false;
  [self readLWithNSString:filename];
}

EduStanfordNlpMaxentIisLambdaSolve *new_EduStanfordNlpMaxentIisLambdaSolve_initWithNSString_(NSString *filename) {
  J2OBJC_NEW_IMPL(EduStanfordNlpMaxentIisLambdaSolve, initWithNSString_, filename)
}

EduStanfordNlpMaxentIisLambdaSolve *create_EduStanfordNlpMaxentIisLambdaSolve_initWithNSString_(NSString *filename) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpMaxentIisLambdaSolve, initWithNSString_, filename)
}

void EduStanfordNlpMaxentIisLambdaSolve_init(EduStanfordNlpMaxentIisLambdaSolve *self) {
  NSObject_init(self);
  self->ASSUME_BINARY_ = false;
  self->weightRanks_ = false;
  self->convertValues_ = false;
}

EduStanfordNlpMaxentIisLambdaSolve *new_EduStanfordNlpMaxentIisLambdaSolve_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpMaxentIisLambdaSolve, init)
}

EduStanfordNlpMaxentIisLambdaSolve *create_EduStanfordNlpMaxentIisLambdaSolve_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpMaxentIisLambdaSolve, init)
}

void EduStanfordNlpMaxentIisLambdaSolve_save_lambdasWithJavaIoDataOutputStream_withDoubleArray_(JavaIoDataOutputStream *rf, IOSDoubleArray *lambdas) {
  EduStanfordNlpMaxentIisLambdaSolve_initialize();
  @try {
    JavaIoObjectOutputStream *oos = new_JavaIoObjectOutputStream_initWithJavaIoOutputStream_(rf);
    [oos writeObjectWithId:lambdas];
    [oos flush];
  }
  @catch (JavaIoIOException *e) {
    [((JavaIoIOException *) nil_chk(e)) printStackTrace];
  }
}

IOSDoubleArray *EduStanfordNlpMaxentIisLambdaSolve_read_lambdasWithNSString_(NSString *modelFilename) {
  EduStanfordNlpMaxentIisLambdaSolve_initialize();
  @try {
    JavaIoDataInputStream *rf = EduStanfordNlpIoIOUtils_getDataInputStreamWithNSString_(modelFilename);
    IOSDoubleArray *lamb = EduStanfordNlpMaxentIisLambdaSolve_read_lambdasWithJavaIoDataInputStream_(rf);
    [((JavaIoDataInputStream *) nil_chk(rf)) close];
    return lamb;
  }
  @catch (JavaIoIOException *e) {
    [((JavaIoIOException *) nil_chk(e)) printStackTrace];
  }
  return nil;
}

IOSDoubleArray *EduStanfordNlpMaxentIisLambdaSolve_read_lambdasWithJavaIoDataInputStream_(JavaIoDataInputStream *rf) {
  EduStanfordNlpMaxentIisLambdaSolve_initialize();
  @try {
    JavaIoObjectInputStream *ois = new_JavaIoObjectInputStream_initWithJavaIoInputStream_(rf);
    id o = [ois readObject];
    if ([o isKindOfClass:[IOSDoubleArray class]]) {
      return (IOSDoubleArray *) cast_chk(o, [IOSDoubleArray class]);
    }
    @throw new_EduStanfordNlpIoRuntimeIOException_initWithNSString_(@"Failed to read lambdas from given input stream");
  }
  @catch (JavaIoIOException *e) {
    @throw new_EduStanfordNlpIoRuntimeIOException_initWithNSException_(e);
  }
  @catch (JavaLangClassNotFoundException *e) {
    @throw new_EduStanfordNlpIoRuntimeIOException_initWithNSException_(e);
  }
}

jdouble EduStanfordNlpMaxentIisLambdaSolve_divideWithDouble_withDouble_(jdouble first, jdouble second) {
  EduStanfordNlpMaxentIisLambdaSolve_initialize();
  return JavaLangMath_expWithDouble_(first - second);
}

void EduStanfordNlpMaxentIisLambdaSolve_mainWithNSStringArray_(IOSObjectArray *args) {
  EduStanfordNlpMaxentIisLambdaSolve_initialize();
  if (((IOSObjectArray *) nil_chk(args))->size_ > 0) {
    JavaTextNumberFormat *nf = JavaTextNumberFormat_getNumberInstance();
    [((JavaTextNumberFormat *) nil_chk(nf)) setMaximumFractionDigitsWithInt:6];
    [nf setMinimumFractionDigitsWithInt:6];
    IOSObjectArray *lambdas = [IOSObjectArray newArrayWithLength:args->size_ type:EduStanfordNlpMaxentIisLambdaSolve_class_()];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printWithNSString:@"           "];
    for (jint i = 0; i < args->size_; i++) {
      (void) IOSObjectArray_SetAndConsume(lambdas, i, new_EduStanfordNlpMaxentIisLambdaSolve_init());
      [((EduStanfordNlpMaxentIisLambdaSolve *) nil_chk(IOSObjectArray_Get(lambdas, i))) readLWithNSString:IOSObjectArray_Get(args, i)];
      [JreLoadStatic(JavaLangSystem, out) printWithNSString:JreStrcat("$$", @"  ", IOSObjectArray_Get(args, i))];
    }
    [JreLoadStatic(JavaLangSystem, out) println];
    jint numLambda = ((IOSDoubleArray *) nil_chk(((EduStanfordNlpMaxentIisLambdaSolve *) nil_chk(IOSObjectArray_Get(lambdas, 0)))->lambda_))->size_;
    for (jint j = 0; j < numLambda; j++) {
      [JreLoadStatic(JavaLangSystem, out) printWithNSString:JreStrcat("$I$", @"lambda[", j, @"] = ")];
      for (jint i = 0; i < args->size_; i++) {
        [JreLoadStatic(JavaLangSystem, out) printWithNSString:JreStrcat("$$", [nf formatWithDouble:IOSDoubleArray_Get(nil_chk(((EduStanfordNlpMaxentIisLambdaSolve *) nil_chk(IOSObjectArray_Get(lambdas, i)))->lambda_), j)], @"  ")];
      }
      [JreLoadStatic(JavaLangSystem, out) println];
    }
  }
  else {
    EduStanfordNlpMaxentIisLambdaSolve *prob = new_EduStanfordNlpMaxentIisLambdaSolve_initWithNSString_(@"trainhuge.txt.holder.prob");
    [prob save_lambdasWithNSString:@"trainhuge.txt.holder.prob"];
    [prob readLWithNSString:@"trainhuge.txt.holder.prob"];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpMaxentIisLambdaSolve)
