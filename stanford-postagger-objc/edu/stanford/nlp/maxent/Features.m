//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/maxent/Features.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/maxent/Experiments.h"
#include "edu/stanford/nlp/maxent/Feature.h"
#include "edu/stanford/nlp/maxent/Features.h"
#include "edu/stanford/nlp/util/Index.h"
#include "edu/stanford/nlp/util/IntPair.h"
#include "java/io/BufferedReader.h"
#include "java/io/FileReader.h"
#include "java/io/PrintStream.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"

@interface EduStanfordNlpMaxentFeatures () {
 @public
  JavaUtilArrayList *f_;
}

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpMaxentFeatures, f_, JavaUtilArrayList *)

inline jint EduStanfordNlpMaxentFeatures_get_maxValue();
inline jint EduStanfordNlpMaxentFeatures_set_maxValue(jint value);
inline jint *EduStanfordNlpMaxentFeatures_getRef_maxValue();
static jint EduStanfordNlpMaxentFeatures_maxValue = 11000000;
J2OBJC_STATIC_FIELD_PRIMITIVE(EduStanfordNlpMaxentFeatures, maxValue, jint)

@implementation EduStanfordNlpMaxentFeatures

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpMaxentFeatures_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)addWithEduStanfordNlpMaxentFeature:(EduStanfordNlpMaxentFeature *)m {
  [((JavaUtilArrayList *) nil_chk(f_)) addWithId:m];
}

- (void)removeLast {
  (void) [((JavaUtilArrayList *) nil_chk(f_)) removeWithInt:[f_ size] - 1];
}

- (EduStanfordNlpMaxentFeature *)getWithInt:(jint)index {
  return [((JavaUtilArrayList *) nil_chk(f_)) getWithInt:index];
}

- (jint)size {
  return [((JavaUtilArrayList *) nil_chk(f_)) size];
}

- (EduStanfordNlpMaxentExperiments *)domain {
  (void) [self getWithInt:0];
  return JreLoadStatic(EduStanfordNlpMaxentFeature, domain);
}

- (void)clean {
}

- (void)print {
  for (jint i = 0; i < [self size]; i++) {
    [((EduStanfordNlpMaxentFeature *) nil_chk([self getWithInt:i])) print];
  }
}

- (instancetype)initWithNSString:(NSString *)filename
withEduStanfordNlpMaxentExperiments:(EduStanfordNlpMaxentExperiments *)domain {
  EduStanfordNlpMaxentFeatures_initWithNSString_withEduStanfordNlpMaxentExperiments_(self, filename, domain);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpMaxentFeature;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpMaxentExperiments;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(addWithEduStanfordNlpMaxentFeature:);
  methods[2].selector = @selector(removeLast);
  methods[3].selector = @selector(getWithInt:);
  methods[4].selector = @selector(size);
  methods[5].selector = @selector(domain);
  methods[6].selector = @selector(clean);
  methods[7].selector = @selector(print);
  methods[8].selector = @selector(initWithNSString:withEduStanfordNlpMaxentExperiments:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "f_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x2, -1, -1, 5, -1 },
    { "maxValue", "I", .constantValue.asLong = 0, 0xa, -1, 6, -1, -1 },
  };
  static const void *ptrTable[] = { "add", "LEduStanfordNlpMaxentFeature;", "get", "I", "LNSString;LEduStanfordNlpMaxentExperiments;", "Ljava/util/ArrayList<Ledu/stanford/nlp/maxent/Feature;>;", &EduStanfordNlpMaxentFeatures_maxValue };
  static const J2ObjcClassInfo _EduStanfordNlpMaxentFeatures = { "Features", "edu.stanford.nlp.maxent", ptrTable, methods, fields, 7, 0x1, 9, 2, -1, -1, -1, -1, -1 };
  return &_EduStanfordNlpMaxentFeatures;
}

@end

void EduStanfordNlpMaxentFeatures_init(EduStanfordNlpMaxentFeatures *self) {
  NSObject_init(self);
  self->f_ = new_JavaUtilArrayList_init();
}

EduStanfordNlpMaxentFeatures *new_EduStanfordNlpMaxentFeatures_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpMaxentFeatures, init)
}

EduStanfordNlpMaxentFeatures *create_EduStanfordNlpMaxentFeatures_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpMaxentFeatures, init)
}

void EduStanfordNlpMaxentFeatures_initWithNSString_withEduStanfordNlpMaxentExperiments_(EduStanfordNlpMaxentFeatures *self, NSString *filename, EduStanfordNlpMaxentExperiments *domain) {
  NSObject_init(self);
  self->f_ = new_JavaUtilArrayList_init();
  JavaLangException *e1 = new_JavaLangException_initWithNSString_(@"Incorrect data file format!");
  id<EduStanfordNlpUtilIndex> instanceIndex = [((EduStanfordNlpMaxentExperiments *) nil_chk(domain)) createIndex];
  @try {
    JavaIoBufferedReader *in = new_JavaIoBufferedReader_initWithJavaIoReader_(new_JavaIoFileReader_initWithNSString_(filename));
    NSString *s;
    while (true) {
      s = [in readLine];
      if ([((NSString *) nil_chk(s)) isEqual:@"<features>"]) {
        break;
      }
    }
    if (s == nil) {
      @throw e1;
    }
    s = [in readLine];
    if (![((NSString *) nil_chk(s)) hasPrefix:@"<fSize>"]) {
      @throw e1;
    }
    if (![s hasSuffix:@"</fSize>"]) {
      @throw e1;
    }
    jint index1 = [s indexOfString:@">"];
    jint index2 = [s lastIndexOfString:@"<"];
    NSString *fSt = [s substring:index1 + 1 endIndex:index2];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:fSt];
    jint number = JavaLangInteger_parseIntWithNSString_(fSt);
    [JreLoadStatic(JavaLangSystem, out) printlnWithNSString:JreStrcat("$I", @"fSize is ", number)];
    IOSIntArray *arrIndexes = [IOSIntArray newArrayWithLength:EduStanfordNlpMaxentFeatures_maxValue];
    IOSDoubleArray *arrValues = [IOSDoubleArray newArrayWithLength:EduStanfordNlpMaxentFeatures_maxValue];
    for (jint f = 0; f < number; f++) {
      NSString *line = [in readLine];
      jint indSp = -1;
      jint current = 0;
      while ((indSp = [((NSString *) nil_chk(line)) indexOfString:@" "]) > -1) {
        jint x = JavaLangInteger_parseIntWithNSString_([line substring:0 endIndex:indSp]);
        line = [line substring:indSp + 1];
        indSp = [((NSString *) nil_chk(line)) indexOfString:@" "];
        if (indSp == -1) {
          indSp = ((jint) [line length]);
        }
        jint y = JavaLangInteger_parseIntWithNSString_([line substring:0 endIndex:indSp]);
        line = [line substring:indSp + 1];
        indSp = [((NSString *) nil_chk(line)) indexOfString:@" "];
        if (indSp == -1) {
          indSp = ((jint) [line length]);
        }
        jdouble val = JavaLangDouble_parseDoubleWithNSString_([line substring:0 endIndex:indSp]);
        if (indSp < ((jint) [line length])) {
          line = [line substring:indSp + 1];
        }
        *IOSIntArray_GetRef(arrIndexes, current) = [((id<EduStanfordNlpUtilIndex>) nil_chk(instanceIndex)) indexOfWithId:new_EduStanfordNlpUtilIntPair_initWithInt_withInt_(x, y)];
        *IOSDoubleArray_GetRef(arrValues, current) = val;
        current++;
      }
      IOSIntArray *indValues = [IOSIntArray newArrayWithLength:current];
      IOSDoubleArray *values = [IOSDoubleArray newArrayWithLength:current];
      for (jint j = 0; j < current; j++) {
        *IOSIntArray_GetRef(indValues, j) = IOSIntArray_Get(arrIndexes, j);
        *IOSDoubleArray_GetRef(values, j) = IOSDoubleArray_Get(arrValues, j);
      }
      EduStanfordNlpMaxentFeature *bf = new_EduStanfordNlpMaxentFeature_initWithEduStanfordNlpMaxentExperiments_withIntArray_withDoubleArray_withEduStanfordNlpUtilIndex_(domain, indValues, values, instanceIndex);
      [self addWithEduStanfordNlpMaxentFeature:bf];
    }
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
  }
}

EduStanfordNlpMaxentFeatures *new_EduStanfordNlpMaxentFeatures_initWithNSString_withEduStanfordNlpMaxentExperiments_(NSString *filename, EduStanfordNlpMaxentExperiments *domain) {
  J2OBJC_NEW_IMPL(EduStanfordNlpMaxentFeatures, initWithNSString_withEduStanfordNlpMaxentExperiments_, filename, domain)
}

EduStanfordNlpMaxentFeatures *create_EduStanfordNlpMaxentFeatures_initWithNSString_withEduStanfordNlpMaxentExperiments_(NSString *filename, EduStanfordNlpMaxentExperiments *domain) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpMaxentFeatures, initWithNSString_withEduStanfordNlpMaxentExperiments_, filename, domain)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpMaxentFeatures)
