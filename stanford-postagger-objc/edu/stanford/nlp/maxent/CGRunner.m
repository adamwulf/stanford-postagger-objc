//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/maxent/CGRunner.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/maxent/CGRunner.h"
#include "edu/stanford/nlp/maxent/iis/LambdaSolve.h"
#include "edu/stanford/nlp/optimization/CGMinimizer.h"
#include "edu/stanford/nlp/optimization/DiffFunction.h"
#include "edu/stanford/nlp/optimization/Function.h"
#include "edu/stanford/nlp/optimization/Minimizer.h"
#include "edu/stanford/nlp/optimization/QNMinimizer.h"
#include "edu/stanford/nlp/util/ReflectionLoading.h"
#include "java/io/PrintStream.h"
#include "java/lang/Double.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/util/Arrays.h"

@class EduStanfordNlpMaxentCGRunner_LikelihoodFunction;
@class EduStanfordNlpMaxentCGRunner_MonitorFunction;

@interface EduStanfordNlpMaxentCGRunner () {
 @public
  EduStanfordNlpMaxentIisLambdaSolve *prob_;
  NSString *filename_;
  jdouble tol_;
  jboolean useGaussianPrior_;
  jdouble priorSigmaS_;
  IOSDoubleArray *sigmaSquareds_;
}

- (void)printOptimizationResultsWithEduStanfordNlpMaxentCGRunner_LikelihoodFunction:(EduStanfordNlpMaxentCGRunner_LikelihoodFunction *)df
                                   withEduStanfordNlpMaxentCGRunner_MonitorFunction:(EduStanfordNlpMaxentCGRunner_MonitorFunction *)monitor;

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpMaxentCGRunner, prob_, EduStanfordNlpMaxentIisLambdaSolve *)
J2OBJC_FIELD_SETTER(EduStanfordNlpMaxentCGRunner, filename_, NSString *)
J2OBJC_FIELD_SETTER(EduStanfordNlpMaxentCGRunner, sigmaSquareds_, IOSDoubleArray *)

inline jboolean EduStanfordNlpMaxentCGRunner_get_SAVE_LAMBDAS_REGULARLY();
#define EduStanfordNlpMaxentCGRunner_SAVE_LAMBDAS_REGULARLY false
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpMaxentCGRunner, SAVE_LAMBDAS_REGULARLY, jboolean)

inline jdouble EduStanfordNlpMaxentCGRunner_get_DEFAULT_TOLERANCE();
#define EduStanfordNlpMaxentCGRunner_DEFAULT_TOLERANCE 1.0E-4
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpMaxentCGRunner, DEFAULT_TOLERANCE, jdouble)

inline jdouble EduStanfordNlpMaxentCGRunner_get_DEFAULT_SIGMASQUARED();
#define EduStanfordNlpMaxentCGRunner_DEFAULT_SIGMASQUARED 0.5
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpMaxentCGRunner, DEFAULT_SIGMASQUARED, jdouble)

__attribute__((unused)) static void EduStanfordNlpMaxentCGRunner_printOptimizationResultsWithEduStanfordNlpMaxentCGRunner_LikelihoodFunction_withEduStanfordNlpMaxentCGRunner_MonitorFunction_(EduStanfordNlpMaxentCGRunner *self, EduStanfordNlpMaxentCGRunner_LikelihoodFunction *df, EduStanfordNlpMaxentCGRunner_MonitorFunction *monitor);

@interface EduStanfordNlpMaxentCGRunner_LikelihoodFunction : NSObject < EduStanfordNlpOptimizationDiffFunction > {
 @public
  EduStanfordNlpMaxentIisLambdaSolve *model_;
  jdouble tol_;
  jboolean useGaussianPrior_;
  IOSDoubleArray *sigmaSquareds_;
  jint valueAtCalls_;
  jdouble likelihood_;
}

- (instancetype)initWithEduStanfordNlpMaxentIisLambdaSolve:(EduStanfordNlpMaxentIisLambdaSolve *)m
                                                withDouble:(jdouble)tol
                                               withBoolean:(jboolean)useGaussianPrior
                                                withDouble:(jdouble)sigmaSquared
                                           withDoubleArray:(IOSDoubleArray *)sigmaSquareds;

- (jint)domainDimension;

- (jdouble)likelihood;

- (jint)numCalls;

- (jdouble)valueAtWithDoubleArray:(IOSDoubleArray *)lambda;

- (IOSDoubleArray *)derivativeAtWithDoubleArray:(IOSDoubleArray *)lambda;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpMaxentCGRunner_LikelihoodFunction)

J2OBJC_FIELD_SETTER(EduStanfordNlpMaxentCGRunner_LikelihoodFunction, model_, EduStanfordNlpMaxentIisLambdaSolve *)
J2OBJC_FIELD_SETTER(EduStanfordNlpMaxentCGRunner_LikelihoodFunction, sigmaSquareds_, IOSDoubleArray *)

__attribute__((unused)) static void EduStanfordNlpMaxentCGRunner_LikelihoodFunction_initWithEduStanfordNlpMaxentIisLambdaSolve_withDouble_withBoolean_withDouble_withDoubleArray_(EduStanfordNlpMaxentCGRunner_LikelihoodFunction *self, EduStanfordNlpMaxentIisLambdaSolve *m, jdouble tol, jboolean useGaussianPrior, jdouble sigmaSquared, IOSDoubleArray *sigmaSquareds);

__attribute__((unused)) static EduStanfordNlpMaxentCGRunner_LikelihoodFunction *new_EduStanfordNlpMaxentCGRunner_LikelihoodFunction_initWithEduStanfordNlpMaxentIisLambdaSolve_withDouble_withBoolean_withDouble_withDoubleArray_(EduStanfordNlpMaxentIisLambdaSolve *m, jdouble tol, jboolean useGaussianPrior, jdouble sigmaSquared, IOSDoubleArray *sigmaSquareds) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpMaxentCGRunner_LikelihoodFunction *create_EduStanfordNlpMaxentCGRunner_LikelihoodFunction_initWithEduStanfordNlpMaxentIisLambdaSolve_withDouble_withBoolean_withDouble_withDoubleArray_(EduStanfordNlpMaxentIisLambdaSolve *m, jdouble tol, jboolean useGaussianPrior, jdouble sigmaSquared, IOSDoubleArray *sigmaSquareds);

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpMaxentCGRunner_LikelihoodFunction)

@interface EduStanfordNlpMaxentCGRunner_MonitorFunction : NSObject < EduStanfordNlpOptimizationFunction > {
 @public
  EduStanfordNlpMaxentIisLambdaSolve *model_;
  EduStanfordNlpMaxentCGRunner_LikelihoodFunction *lf_;
  NSString *filename_;
  jint iterations_;
}

- (instancetype)initWithEduStanfordNlpMaxentIisLambdaSolve:(EduStanfordNlpMaxentIisLambdaSolve *)m
       withEduStanfordNlpMaxentCGRunner_LikelihoodFunction:(EduStanfordNlpMaxentCGRunner_LikelihoodFunction *)lf
                                              withNSString:(NSString *)filename;

- (jdouble)valueAtWithDoubleArray:(IOSDoubleArray *)lambda;

- (NSString *)reportMonitoringWithDouble:(jdouble)likelihood;

- (jint)domainDimension;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpMaxentCGRunner_MonitorFunction)

J2OBJC_FIELD_SETTER(EduStanfordNlpMaxentCGRunner_MonitorFunction, model_, EduStanfordNlpMaxentIisLambdaSolve *)
J2OBJC_FIELD_SETTER(EduStanfordNlpMaxentCGRunner_MonitorFunction, lf_, EduStanfordNlpMaxentCGRunner_LikelihoodFunction *)
J2OBJC_FIELD_SETTER(EduStanfordNlpMaxentCGRunner_MonitorFunction, filename_, NSString *)

__attribute__((unused)) static void EduStanfordNlpMaxentCGRunner_MonitorFunction_initWithEduStanfordNlpMaxentIisLambdaSolve_withEduStanfordNlpMaxentCGRunner_LikelihoodFunction_withNSString_(EduStanfordNlpMaxentCGRunner_MonitorFunction *self, EduStanfordNlpMaxentIisLambdaSolve *m, EduStanfordNlpMaxentCGRunner_LikelihoodFunction *lf, NSString *filename);

__attribute__((unused)) static EduStanfordNlpMaxentCGRunner_MonitorFunction *new_EduStanfordNlpMaxentCGRunner_MonitorFunction_initWithEduStanfordNlpMaxentIisLambdaSolve_withEduStanfordNlpMaxentCGRunner_LikelihoodFunction_withNSString_(EduStanfordNlpMaxentIisLambdaSolve *m, EduStanfordNlpMaxentCGRunner_LikelihoodFunction *lf, NSString *filename) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpMaxentCGRunner_MonitorFunction *create_EduStanfordNlpMaxentCGRunner_MonitorFunction_initWithEduStanfordNlpMaxentIisLambdaSolve_withEduStanfordNlpMaxentCGRunner_LikelihoodFunction_withNSString_(EduStanfordNlpMaxentIisLambdaSolve *m, EduStanfordNlpMaxentCGRunner_LikelihoodFunction *lf, NSString *filename);

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpMaxentCGRunner_MonitorFunction)

@implementation EduStanfordNlpMaxentCGRunner

- (instancetype)initWithEduStanfordNlpMaxentIisLambdaSolve:(EduStanfordNlpMaxentIisLambdaSolve *)prob
                                              withNSString:(NSString *)filename {
  EduStanfordNlpMaxentCGRunner_initWithEduStanfordNlpMaxentIisLambdaSolve_withNSString_(self, prob, filename);
  return self;
}

- (instancetype)initWithEduStanfordNlpMaxentIisLambdaSolve:(EduStanfordNlpMaxentIisLambdaSolve *)prob
                                              withNSString:(NSString *)filename
                                                withDouble:(jdouble)priorSigmaS {
  EduStanfordNlpMaxentCGRunner_initWithEduStanfordNlpMaxentIisLambdaSolve_withNSString_withDouble_(self, prob, filename, priorSigmaS);
  return self;
}

- (instancetype)initWithEduStanfordNlpMaxentIisLambdaSolve:(EduStanfordNlpMaxentIisLambdaSolve *)prob
                                              withNSString:(NSString *)filename
                                                withDouble:(jdouble)tol
                                                withDouble:(jdouble)priorSigmaS {
  EduStanfordNlpMaxentCGRunner_initWithEduStanfordNlpMaxentIisLambdaSolve_withNSString_withDouble_withDouble_(self, prob, filename, tol, priorSigmaS);
  return self;
}

- (instancetype)initWithEduStanfordNlpMaxentIisLambdaSolve:(EduStanfordNlpMaxentIisLambdaSolve *)prob
                                              withNSString:(NSString *)filename
                                                withDouble:(jdouble)tol
                                           withDoubleArray:(IOSDoubleArray *)sigmaSquareds {
  EduStanfordNlpMaxentCGRunner_initWithEduStanfordNlpMaxentIisLambdaSolve_withNSString_withDouble_withDoubleArray_(self, prob, filename, tol, sigmaSquareds);
  return self;
}

- (void)printOptimizationResultsWithEduStanfordNlpMaxentCGRunner_LikelihoodFunction:(EduStanfordNlpMaxentCGRunner_LikelihoodFunction *)df
                                   withEduStanfordNlpMaxentCGRunner_MonitorFunction:(EduStanfordNlpMaxentCGRunner_MonitorFunction *)monitor {
  EduStanfordNlpMaxentCGRunner_printOptimizationResultsWithEduStanfordNlpMaxentCGRunner_LikelihoodFunction_withEduStanfordNlpMaxentCGRunner_MonitorFunction_(self, df, monitor);
}

- (void)solveQN {
  EduStanfordNlpMaxentCGRunner_LikelihoodFunction *df = new_EduStanfordNlpMaxentCGRunner_LikelihoodFunction_initWithEduStanfordNlpMaxentIisLambdaSolve_withDouble_withBoolean_withDouble_withDoubleArray_(prob_, tol_, useGaussianPrior_, priorSigmaS_, sigmaSquareds_);
  EduStanfordNlpMaxentCGRunner_MonitorFunction *monitor = new_EduStanfordNlpMaxentCGRunner_MonitorFunction_initWithEduStanfordNlpMaxentIisLambdaSolve_withEduStanfordNlpMaxentCGRunner_LikelihoodFunction_withNSString_(prob_, df, filename_);
  id<EduStanfordNlpOptimizationMinimizer> cgm = new_EduStanfordNlpOptimizationQNMinimizer_initWithEduStanfordNlpOptimizationFunction_withInt_(monitor, 10);
  ((EduStanfordNlpMaxentIisLambdaSolve *) nil_chk(prob_))->lambda_ = [cgm minimizeWithEduStanfordNlpOptimizationFunction:df withDouble:tol_ withDoubleArray:[IOSDoubleArray newArrayWithLength:[df domainDimension]]];
  EduStanfordNlpMaxentCGRunner_printOptimizationResultsWithEduStanfordNlpMaxentCGRunner_LikelihoodFunction_withEduStanfordNlpMaxentCGRunner_MonitorFunction_(self, df, monitor);
}

- (void)solveOWLQN2WithDouble:(jdouble)weight {
  EduStanfordNlpMaxentCGRunner_LikelihoodFunction *df = new_EduStanfordNlpMaxentCGRunner_LikelihoodFunction_initWithEduStanfordNlpMaxentIisLambdaSolve_withDouble_withBoolean_withDouble_withDoubleArray_(prob_, tol_, useGaussianPrior_, priorSigmaS_, sigmaSquareds_);
  EduStanfordNlpMaxentCGRunner_MonitorFunction *monitor = new_EduStanfordNlpMaxentCGRunner_MonitorFunction_initWithEduStanfordNlpMaxentIisLambdaSolve_withEduStanfordNlpMaxentCGRunner_LikelihoodFunction_withNSString_(prob_, df, filename_);
  id<EduStanfordNlpOptimizationMinimizer> cgm = new_EduStanfordNlpOptimizationQNMinimizer_initWithEduStanfordNlpOptimizationFunction_withInt_(monitor, 10);
  [((EduStanfordNlpOptimizationQNMinimizer *) cast_chk(cgm, [EduStanfordNlpOptimizationQNMinimizer class])) useOWLQNWithBoolean:true withDouble:weight];
  ((EduStanfordNlpMaxentIisLambdaSolve *) nil_chk(prob_))->lambda_ = [cgm minimizeWithEduStanfordNlpOptimizationFunction:df withDouble:tol_ withDoubleArray:[IOSDoubleArray newArrayWithLength:[df domainDimension]]];
  EduStanfordNlpMaxentCGRunner_printOptimizationResultsWithEduStanfordNlpMaxentCGRunner_LikelihoodFunction_withEduStanfordNlpMaxentCGRunner_MonitorFunction_(self, df, monitor);
}

- (void)solveCG {
  EduStanfordNlpMaxentCGRunner_LikelihoodFunction *df = new_EduStanfordNlpMaxentCGRunner_LikelihoodFunction_initWithEduStanfordNlpMaxentIisLambdaSolve_withDouble_withBoolean_withDouble_withDoubleArray_(prob_, tol_, useGaussianPrior_, priorSigmaS_, sigmaSquareds_);
  EduStanfordNlpMaxentCGRunner_MonitorFunction *monitor = new_EduStanfordNlpMaxentCGRunner_MonitorFunction_initWithEduStanfordNlpMaxentIisLambdaSolve_withEduStanfordNlpMaxentCGRunner_LikelihoodFunction_withNSString_(prob_, df, filename_);
  id<EduStanfordNlpOptimizationMinimizer> cgm = new_EduStanfordNlpOptimizationCGMinimizer_initWithEduStanfordNlpOptimizationFunction_(monitor);
  ((EduStanfordNlpMaxentIisLambdaSolve *) nil_chk(prob_))->lambda_ = [cgm minimizeWithEduStanfordNlpOptimizationFunction:df withDouble:tol_ withDoubleArray:[IOSDoubleArray newArrayWithLength:[df domainDimension]]];
  EduStanfordNlpMaxentCGRunner_printOptimizationResultsWithEduStanfordNlpMaxentCGRunner_LikelihoodFunction_withEduStanfordNlpMaxentCGRunner_MonitorFunction_(self, df, monitor);
}

- (void)solveL1WithDouble:(jdouble)weight {
  EduStanfordNlpMaxentCGRunner_LikelihoodFunction *df = new_EduStanfordNlpMaxentCGRunner_LikelihoodFunction_initWithEduStanfordNlpMaxentIisLambdaSolve_withDouble_withBoolean_withDouble_withDoubleArray_(prob_, tol_, useGaussianPrior_, priorSigmaS_, sigmaSquareds_);
  id<EduStanfordNlpOptimizationMinimizer> owl = EduStanfordNlpUtilReflectionLoading_loadByReflectionWithNSString_withNSObjectArray_(@"edu.stanford.nlp.optimization.OWLQNMinimizer", [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_(weight) } count:1 type:NSObject_class_()]);
  ((EduStanfordNlpMaxentIisLambdaSolve *) nil_chk(prob_))->lambda_ = [((id<EduStanfordNlpOptimizationMinimizer>) nil_chk(owl)) minimizeWithEduStanfordNlpOptimizationFunction:df withDouble:tol_ withDoubleArray:[IOSDoubleArray newArrayWithLength:[df domainDimension]]];
  EduStanfordNlpMaxentCGRunner_printOptimizationResultsWithEduStanfordNlpMaxentCGRunner_LikelihoodFunction_withEduStanfordNlpMaxentCGRunner_MonitorFunction_(self, df, nil);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpMaxentIisLambdaSolve:withNSString:);
  methods[1].selector = @selector(initWithEduStanfordNlpMaxentIisLambdaSolve:withNSString:withDouble:);
  methods[2].selector = @selector(initWithEduStanfordNlpMaxentIisLambdaSolve:withNSString:withDouble:withDouble:);
  methods[3].selector = @selector(initWithEduStanfordNlpMaxentIisLambdaSolve:withNSString:withDouble:withDoubleArray:);
  methods[4].selector = @selector(printOptimizationResultsWithEduStanfordNlpMaxentCGRunner_LikelihoodFunction:withEduStanfordNlpMaxentCGRunner_MonitorFunction:);
  methods[5].selector = @selector(solveQN);
  methods[6].selector = @selector(solveOWLQN2WithDouble:);
  methods[7].selector = @selector(solveCG);
  methods[8].selector = @selector(solveL1WithDouble:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "SAVE_LAMBDAS_REGULARLY", "Z", .constantValue.asBOOL = EduStanfordNlpMaxentCGRunner_SAVE_LAMBDAS_REGULARLY, 0x1a, -1, -1, -1, -1 },
    { "prob_", "LEduStanfordNlpMaxentIisLambdaSolve;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "filename_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "tol_", "D", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "useGaussianPrior_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "priorSigmaS_", "D", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "sigmaSquareds_", "[D", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "DEFAULT_TOLERANCE", "D", .constantValue.asDouble = EduStanfordNlpMaxentCGRunner_DEFAULT_TOLERANCE, 0x1a, -1, -1, -1, -1 },
    { "DEFAULT_SIGMASQUARED", "D", .constantValue.asDouble = EduStanfordNlpMaxentCGRunner_DEFAULT_SIGMASQUARED, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpMaxentIisLambdaSolve;LNSString;", "LEduStanfordNlpMaxentIisLambdaSolve;LNSString;D", "LEduStanfordNlpMaxentIisLambdaSolve;LNSString;DD", "LEduStanfordNlpMaxentIisLambdaSolve;LNSString;D[D", "printOptimizationResults", "LEduStanfordNlpMaxentCGRunner_LikelihoodFunction;LEduStanfordNlpMaxentCGRunner_MonitorFunction;", "solveOWLQN2", "D", "solveL1" };
  static const J2ObjcClassInfo _EduStanfordNlpMaxentCGRunner = { "CGRunner", "edu.stanford.nlp.maxent", ptrTable, methods, fields, 7, 0x1, 9, 9, -1, 5, -1, -1, -1 };
  return &_EduStanfordNlpMaxentCGRunner;
}

@end

void EduStanfordNlpMaxentCGRunner_initWithEduStanfordNlpMaxentIisLambdaSolve_withNSString_(EduStanfordNlpMaxentCGRunner *self, EduStanfordNlpMaxentIisLambdaSolve *prob, NSString *filename) {
  EduStanfordNlpMaxentCGRunner_initWithEduStanfordNlpMaxentIisLambdaSolve_withNSString_withDouble_(self, prob, filename, EduStanfordNlpMaxentCGRunner_DEFAULT_SIGMASQUARED);
}

EduStanfordNlpMaxentCGRunner *new_EduStanfordNlpMaxentCGRunner_initWithEduStanfordNlpMaxentIisLambdaSolve_withNSString_(EduStanfordNlpMaxentIisLambdaSolve *prob, NSString *filename) {
  J2OBJC_NEW_IMPL(EduStanfordNlpMaxentCGRunner, initWithEduStanfordNlpMaxentIisLambdaSolve_withNSString_, prob, filename)
}

EduStanfordNlpMaxentCGRunner *create_EduStanfordNlpMaxentCGRunner_initWithEduStanfordNlpMaxentIisLambdaSolve_withNSString_(EduStanfordNlpMaxentIisLambdaSolve *prob, NSString *filename) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpMaxentCGRunner, initWithEduStanfordNlpMaxentIisLambdaSolve_withNSString_, prob, filename)
}

void EduStanfordNlpMaxentCGRunner_initWithEduStanfordNlpMaxentIisLambdaSolve_withNSString_withDouble_(EduStanfordNlpMaxentCGRunner *self, EduStanfordNlpMaxentIisLambdaSolve *prob, NSString *filename, jdouble priorSigmaS) {
  EduStanfordNlpMaxentCGRunner_initWithEduStanfordNlpMaxentIisLambdaSolve_withNSString_withDouble_withDouble_(self, prob, filename, EduStanfordNlpMaxentCGRunner_DEFAULT_TOLERANCE, priorSigmaS);
}

EduStanfordNlpMaxentCGRunner *new_EduStanfordNlpMaxentCGRunner_initWithEduStanfordNlpMaxentIisLambdaSolve_withNSString_withDouble_(EduStanfordNlpMaxentIisLambdaSolve *prob, NSString *filename, jdouble priorSigmaS) {
  J2OBJC_NEW_IMPL(EduStanfordNlpMaxentCGRunner, initWithEduStanfordNlpMaxentIisLambdaSolve_withNSString_withDouble_, prob, filename, priorSigmaS)
}

EduStanfordNlpMaxentCGRunner *create_EduStanfordNlpMaxentCGRunner_initWithEduStanfordNlpMaxentIisLambdaSolve_withNSString_withDouble_(EduStanfordNlpMaxentIisLambdaSolve *prob, NSString *filename, jdouble priorSigmaS) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpMaxentCGRunner, initWithEduStanfordNlpMaxentIisLambdaSolve_withNSString_withDouble_, prob, filename, priorSigmaS)
}

void EduStanfordNlpMaxentCGRunner_initWithEduStanfordNlpMaxentIisLambdaSolve_withNSString_withDouble_withDouble_(EduStanfordNlpMaxentCGRunner *self, EduStanfordNlpMaxentIisLambdaSolve *prob, NSString *filename, jdouble tol, jdouble priorSigmaS) {
  NSObject_init(self);
  self->prob_ = prob;
  self->filename_ = filename;
  self->tol_ = tol;
  self->useGaussianPrior_ = (priorSigmaS != 0.0 && priorSigmaS != JavaLangDouble_POSITIVE_INFINITY);
  self->priorSigmaS_ = priorSigmaS;
  self->sigmaSquareds_ = nil;
}

EduStanfordNlpMaxentCGRunner *new_EduStanfordNlpMaxentCGRunner_initWithEduStanfordNlpMaxentIisLambdaSolve_withNSString_withDouble_withDouble_(EduStanfordNlpMaxentIisLambdaSolve *prob, NSString *filename, jdouble tol, jdouble priorSigmaS) {
  J2OBJC_NEW_IMPL(EduStanfordNlpMaxentCGRunner, initWithEduStanfordNlpMaxentIisLambdaSolve_withNSString_withDouble_withDouble_, prob, filename, tol, priorSigmaS)
}

EduStanfordNlpMaxentCGRunner *create_EduStanfordNlpMaxentCGRunner_initWithEduStanfordNlpMaxentIisLambdaSolve_withNSString_withDouble_withDouble_(EduStanfordNlpMaxentIisLambdaSolve *prob, NSString *filename, jdouble tol, jdouble priorSigmaS) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpMaxentCGRunner, initWithEduStanfordNlpMaxentIisLambdaSolve_withNSString_withDouble_withDouble_, prob, filename, tol, priorSigmaS)
}

void EduStanfordNlpMaxentCGRunner_initWithEduStanfordNlpMaxentIisLambdaSolve_withNSString_withDouble_withDoubleArray_(EduStanfordNlpMaxentCGRunner *self, EduStanfordNlpMaxentIisLambdaSolve *prob, NSString *filename, jdouble tol, IOSDoubleArray *sigmaSquareds) {
  NSObject_init(self);
  self->prob_ = prob;
  self->filename_ = filename;
  self->tol_ = tol;
  self->useGaussianPrior_ = (sigmaSquareds != nil);
  self->sigmaSquareds_ = sigmaSquareds;
  self->priorSigmaS_ = -1.0;
}

EduStanfordNlpMaxentCGRunner *new_EduStanfordNlpMaxentCGRunner_initWithEduStanfordNlpMaxentIisLambdaSolve_withNSString_withDouble_withDoubleArray_(EduStanfordNlpMaxentIisLambdaSolve *prob, NSString *filename, jdouble tol, IOSDoubleArray *sigmaSquareds) {
  J2OBJC_NEW_IMPL(EduStanfordNlpMaxentCGRunner, initWithEduStanfordNlpMaxentIisLambdaSolve_withNSString_withDouble_withDoubleArray_, prob, filename, tol, sigmaSquareds)
}

EduStanfordNlpMaxentCGRunner *create_EduStanfordNlpMaxentCGRunner_initWithEduStanfordNlpMaxentIisLambdaSolve_withNSString_withDouble_withDoubleArray_(EduStanfordNlpMaxentIisLambdaSolve *prob, NSString *filename, jdouble tol, IOSDoubleArray *sigmaSquareds) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpMaxentCGRunner, initWithEduStanfordNlpMaxentIisLambdaSolve_withNSString_withDouble_withDoubleArray_, prob, filename, tol, sigmaSquareds)
}

void EduStanfordNlpMaxentCGRunner_printOptimizationResultsWithEduStanfordNlpMaxentCGRunner_LikelihoodFunction_withEduStanfordNlpMaxentCGRunner_MonitorFunction_(EduStanfordNlpMaxentCGRunner *self, EduStanfordNlpMaxentCGRunner_LikelihoodFunction *df, EduStanfordNlpMaxentCGRunner_MonitorFunction *monitor) {
  jdouble negLogLike = [((EduStanfordNlpMaxentCGRunner_LikelihoodFunction *) nil_chk(df)) valueAtWithDoubleArray:((EduStanfordNlpMaxentIisLambdaSolve *) nil_chk(self->prob_))->lambda_];
  (void) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printfWithNSString:@"After optimization neg (penalized) log cond likelihood: %1.2f%n" withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_(negLogLike) } count:1 type:NSObject_class_()]];
  if (monitor != nil) {
    (void) [monitor reportMonitoringWithDouble:negLogLike];
  }
  jint numNonZero = 0;
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(self->prob_->lambda_))->size_; i++) {
    if (IOSDoubleArray_Get(self->prob_->lambda_, i) != 0.0) {
      numNonZero++;
    }
  }
  (void) [JreLoadStatic(JavaLangSystem, err) printfWithNSString:@"Non-zero parameters: %d/%d (%1.2f%%)%n" withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(numNonZero), JavaLangInteger_valueOfWithInt_(self->prob_->lambda_->size_), JavaLangDouble_valueOfWithDouble_((100.0 * numNonZero) / self->prob_->lambda_->size_) } count:3 type:NSObject_class_()]];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpMaxentCGRunner)

@implementation EduStanfordNlpMaxentCGRunner_LikelihoodFunction

- (instancetype)initWithEduStanfordNlpMaxentIisLambdaSolve:(EduStanfordNlpMaxentIisLambdaSolve *)m
                                                withDouble:(jdouble)tol
                                               withBoolean:(jboolean)useGaussianPrior
                                                withDouble:(jdouble)sigmaSquared
                                           withDoubleArray:(IOSDoubleArray *)sigmaSquareds {
  EduStanfordNlpMaxentCGRunner_LikelihoodFunction_initWithEduStanfordNlpMaxentIisLambdaSolve_withDouble_withBoolean_withDouble_withDoubleArray_(self, m, tol, useGaussianPrior, sigmaSquared, sigmaSquareds);
  return self;
}

- (jint)domainDimension {
  return ((IOSDoubleArray *) nil_chk(((EduStanfordNlpMaxentIisLambdaSolve *) nil_chk(model_))->lambda_))->size_;
}

- (jdouble)likelihood {
  return likelihood_;
}

- (jint)numCalls {
  return valueAtCalls_;
}

- (jdouble)valueAtWithDoubleArray:(IOSDoubleArray *)lambda {
  valueAtCalls_++;
  ((EduStanfordNlpMaxentIisLambdaSolve *) nil_chk(model_))->lambda_ = lambda;
  jdouble lik = [model_ logLikelihoodScratch];
  if (useGaussianPrior_) {
    for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(lambda))->size_; i++) {
      JrePlusAssignDoubleD(&lik, (IOSDoubleArray_Get(lambda, i) * IOSDoubleArray_Get(lambda, i)) / (IOSDoubleArray_Get(nil_chk(sigmaSquareds_), i) + IOSDoubleArray_Get(sigmaSquareds_, i)));
    }
  }
  likelihood_ = lik;
  return lik;
}

- (IOSDoubleArray *)derivativeAtWithDoubleArray:(IOSDoubleArray *)lambda {
  jboolean eq = true;
  for (jint j = 0; j < ((IOSDoubleArray *) nil_chk(lambda))->size_; j++) {
    if (JavaLangMath_absWithDouble_(IOSDoubleArray_Get(lambda, j) - IOSDoubleArray_Get(nil_chk(((EduStanfordNlpMaxentIisLambdaSolve *) nil_chk(model_))->lambda_), j)) > tol_) {
      eq = false;
      break;
    }
  }
  if (!eq) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"derivativeAt: call with different value"];
    [self valueAtWithDoubleArray:lambda];
  }
  IOSDoubleArray *drvs = [((EduStanfordNlpMaxentIisLambdaSolve *) nil_chk(model_)) getDerivatives];
  if (useGaussianPrior_) {
    for (jint j = 0; j < lambda->size_; j++) {
      JrePlusAssignDoubleD(IOSDoubleArray_GetRef(nil_chk(drvs), j), IOSDoubleArray_Get(lambda, j) / IOSDoubleArray_Get(nil_chk(sigmaSquareds_), j));
    }
  }
  return drvs;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "[D", 0x1, 3, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpMaxentIisLambdaSolve:withDouble:withBoolean:withDouble:withDoubleArray:);
  methods[1].selector = @selector(domainDimension);
  methods[2].selector = @selector(likelihood);
  methods[3].selector = @selector(numCalls);
  methods[4].selector = @selector(valueAtWithDoubleArray:);
  methods[5].selector = @selector(derivativeAtWithDoubleArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "model_", "LEduStanfordNlpMaxentIisLambdaSolve;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "tol_", "D", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "useGaussianPrior_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "sigmaSquareds_", "[D", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "valueAtCalls_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "likelihood_", "D", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpMaxentIisLambdaSolve;DZD[D", "valueAt", "[D", "derivativeAt", "LEduStanfordNlpMaxentCGRunner;" };
  static const J2ObjcClassInfo _EduStanfordNlpMaxentCGRunner_LikelihoodFunction = { "LikelihoodFunction", "edu.stanford.nlp.maxent", ptrTable, methods, fields, 7, 0x1a, 6, 6, 4, -1, -1, -1, -1 };
  return &_EduStanfordNlpMaxentCGRunner_LikelihoodFunction;
}

@end

void EduStanfordNlpMaxentCGRunner_LikelihoodFunction_initWithEduStanfordNlpMaxentIisLambdaSolve_withDouble_withBoolean_withDouble_withDoubleArray_(EduStanfordNlpMaxentCGRunner_LikelihoodFunction *self, EduStanfordNlpMaxentIisLambdaSolve *m, jdouble tol, jboolean useGaussianPrior, jdouble sigmaSquared, IOSDoubleArray *sigmaSquareds) {
  NSObject_init(self);
  self->model_ = m;
  self->tol_ = tol;
  self->useGaussianPrior_ = useGaussianPrior;
  if (useGaussianPrior) {
    self->sigmaSquareds_ = [IOSDoubleArray newArrayWithLength:((IOSDoubleArray *) nil_chk(((EduStanfordNlpMaxentIisLambdaSolve *) nil_chk(self->model_))->lambda_))->size_];
    if (sigmaSquareds != nil) {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(sigmaSquareds, 0, self->sigmaSquareds_, 0, sigmaSquareds->size_);
    }
    else {
      JavaUtilArrays_fillWithDoubleArray_withDouble_(self->sigmaSquareds_, sigmaSquared);
    }
  }
  else {
    self->sigmaSquareds_ = nil;
  }
}

EduStanfordNlpMaxentCGRunner_LikelihoodFunction *new_EduStanfordNlpMaxentCGRunner_LikelihoodFunction_initWithEduStanfordNlpMaxentIisLambdaSolve_withDouble_withBoolean_withDouble_withDoubleArray_(EduStanfordNlpMaxentIisLambdaSolve *m, jdouble tol, jboolean useGaussianPrior, jdouble sigmaSquared, IOSDoubleArray *sigmaSquareds) {
  J2OBJC_NEW_IMPL(EduStanfordNlpMaxentCGRunner_LikelihoodFunction, initWithEduStanfordNlpMaxentIisLambdaSolve_withDouble_withBoolean_withDouble_withDoubleArray_, m, tol, useGaussianPrior, sigmaSquared, sigmaSquareds)
}

EduStanfordNlpMaxentCGRunner_LikelihoodFunction *create_EduStanfordNlpMaxentCGRunner_LikelihoodFunction_initWithEduStanfordNlpMaxentIisLambdaSolve_withDouble_withBoolean_withDouble_withDoubleArray_(EduStanfordNlpMaxentIisLambdaSolve *m, jdouble tol, jboolean useGaussianPrior, jdouble sigmaSquared, IOSDoubleArray *sigmaSquareds) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpMaxentCGRunner_LikelihoodFunction, initWithEduStanfordNlpMaxentIisLambdaSolve_withDouble_withBoolean_withDouble_withDoubleArray_, m, tol, useGaussianPrior, sigmaSquared, sigmaSquareds)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpMaxentCGRunner_LikelihoodFunction)

@implementation EduStanfordNlpMaxentCGRunner_MonitorFunction

- (instancetype)initWithEduStanfordNlpMaxentIisLambdaSolve:(EduStanfordNlpMaxentIisLambdaSolve *)m
       withEduStanfordNlpMaxentCGRunner_LikelihoodFunction:(EduStanfordNlpMaxentCGRunner_LikelihoodFunction *)lf
                                              withNSString:(NSString *)filename {
  EduStanfordNlpMaxentCGRunner_MonitorFunction_initWithEduStanfordNlpMaxentIisLambdaSolve_withEduStanfordNlpMaxentCGRunner_LikelihoodFunction_withNSString_(self, m, lf, filename);
  return self;
}

- (jdouble)valueAtWithDoubleArray:(IOSDoubleArray *)lambda {
  jdouble likelihood = [((EduStanfordNlpMaxentCGRunner_LikelihoodFunction *) nil_chk(lf_)) likelihood];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) println];
  [JreLoadStatic(JavaLangSystem, err) printWithNSString:[self reportMonitoringWithDouble:likelihood]];
  if (iterations_ > 0 && iterations_ % 30 == 0) {
    [((EduStanfordNlpMaxentIisLambdaSolve *) nil_chk(model_)) checkCorrectness];
  }
  iterations_++;
  return 42;
}

- (NSString *)reportMonitoringWithDouble:(jdouble)likelihood {
  return JreStrcat("$I$D$I$", @"Iter. ", iterations_, @": neg. log cond. likelihood = ", likelihood, @" [", [((EduStanfordNlpMaxentCGRunner_LikelihoodFunction *) nil_chk(lf_)) numCalls], @" calls to valueAt]");
}

- (jint)domainDimension {
  return [((EduStanfordNlpMaxentCGRunner_LikelihoodFunction *) nil_chk(lf_)) domainDimension];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "D", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpMaxentIisLambdaSolve:withEduStanfordNlpMaxentCGRunner_LikelihoodFunction:withNSString:);
  methods[1].selector = @selector(valueAtWithDoubleArray:);
  methods[2].selector = @selector(reportMonitoringWithDouble:);
  methods[3].selector = @selector(domainDimension);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "model_", "LEduStanfordNlpMaxentIisLambdaSolve;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "lf_", "LEduStanfordNlpMaxentCGRunner_LikelihoodFunction;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "filename_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "iterations_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpMaxentIisLambdaSolve;LEduStanfordNlpMaxentCGRunner_LikelihoodFunction;LNSString;", "valueAt", "[D", "reportMonitoring", "D", "LEduStanfordNlpMaxentCGRunner;" };
  static const J2ObjcClassInfo _EduStanfordNlpMaxentCGRunner_MonitorFunction = { "MonitorFunction", "edu.stanford.nlp.maxent", ptrTable, methods, fields, 7, 0x1a, 4, 4, 5, -1, -1, -1, -1 };
  return &_EduStanfordNlpMaxentCGRunner_MonitorFunction;
}

@end

void EduStanfordNlpMaxentCGRunner_MonitorFunction_initWithEduStanfordNlpMaxentIisLambdaSolve_withEduStanfordNlpMaxentCGRunner_LikelihoodFunction_withNSString_(EduStanfordNlpMaxentCGRunner_MonitorFunction *self, EduStanfordNlpMaxentIisLambdaSolve *m, EduStanfordNlpMaxentCGRunner_LikelihoodFunction *lf, NSString *filename) {
  NSObject_init(self);
  self->model_ = m;
  self->lf_ = lf;
  self->filename_ = filename;
}

EduStanfordNlpMaxentCGRunner_MonitorFunction *new_EduStanfordNlpMaxentCGRunner_MonitorFunction_initWithEduStanfordNlpMaxentIisLambdaSolve_withEduStanfordNlpMaxentCGRunner_LikelihoodFunction_withNSString_(EduStanfordNlpMaxentIisLambdaSolve *m, EduStanfordNlpMaxentCGRunner_LikelihoodFunction *lf, NSString *filename) {
  J2OBJC_NEW_IMPL(EduStanfordNlpMaxentCGRunner_MonitorFunction, initWithEduStanfordNlpMaxentIisLambdaSolve_withEduStanfordNlpMaxentCGRunner_LikelihoodFunction_withNSString_, m, lf, filename)
}

EduStanfordNlpMaxentCGRunner_MonitorFunction *create_EduStanfordNlpMaxentCGRunner_MonitorFunction_initWithEduStanfordNlpMaxentIisLambdaSolve_withEduStanfordNlpMaxentCGRunner_LikelihoodFunction_withNSString_(EduStanfordNlpMaxentIisLambdaSolve *m, EduStanfordNlpMaxentCGRunner_LikelihoodFunction *lf, NSString *filename) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpMaxentCGRunner_MonitorFunction, initWithEduStanfordNlpMaxentIisLambdaSolve_withEduStanfordNlpMaxentCGRunner_LikelihoodFunction_withNSString_, m, lf, filename)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpMaxentCGRunner_MonitorFunction)
