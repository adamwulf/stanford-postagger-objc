//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/ling/tokensregex/SequencePattern.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/ling/tokensregex/BasicSequenceMatchResult.h"
#include "edu/stanford/nlp/ling/tokensregex/ComplexNodePattern.h"
#include "edu/stanford/nlp/ling/tokensregex/CoreMapNodePattern.h"
#include "edu/stanford/nlp/ling/tokensregex/Env.h"
#include "edu/stanford/nlp/ling/tokensregex/MultiCoreMapNodePattern.h"
#include "edu/stanford/nlp/ling/tokensregex/MultiNodePattern.h"
#include "edu/stanford/nlp/ling/tokensregex/NodePattern.h"
#include "edu/stanford/nlp/ling/tokensregex/NodePatternTransformer.h"
#include "edu/stanford/nlp/ling/tokensregex/SequenceMatchAction.h"
#include "edu/stanford/nlp/ling/tokensregex/SequenceMatcher.h"
#include "edu/stanford/nlp/ling/tokensregex/SequencePattern.h"
#include "edu/stanford/nlp/util/ArraySet.h"
#include "edu/stanford/nlp/util/CollectionUtils.h"
#include "edu/stanford/nlp/util/Factory.h"
#include "edu/stanford/nlp/util/HasInterval.h"
#include "edu/stanford/nlp/util/Interval.h"
#include "edu/stanford/nlp/util/Pair.h"
#include "edu/stanford/nlp/util/StringUtils.h"
#include "edu/stanford/nlp/util/ValuedInterval.h"
#include "java/io/ObjectInputStream.h"
#include "java/io/ObjectOutputStream.h"
#include "java/lang/Boolean.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/BitSet.h"
#include "java/util/Collection.h"
#include "java/util/Comparator.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/IdentityHashMap.h"
#include "java/util/LinkedHashSet.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Queue.h"
#include "java/util/Set.h"
#include "java/util/Stack.h"
#include "java/util/function/Function.h"

@interface EduStanfordNlpLingTokensregexSequencePattern () {
 @public
  NSString *patternStr_;
  EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *patternExpr_;
  id<EduStanfordNlpLingTokensregexSequenceMatchAction> action_;
}

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)ois;

- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)oos;

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpLingTokensregexSequencePattern, patternStr_, NSString *)
J2OBJC_FIELD_SETTER(EduStanfordNlpLingTokensregexSequencePattern, patternExpr_, EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *)
J2OBJC_FIELD_SETTER(EduStanfordNlpLingTokensregexSequencePattern, action_, id<EduStanfordNlpLingTokensregexSequenceMatchAction>)

@interface EduStanfordNlpLingTokensregexSequencePattern_Parser : NSObject

@end

@interface EduStanfordNlpLingTokensregexSequencePattern_NodesMatchChecker : NSObject

@end

@interface EduStanfordNlpLingTokensregexSequencePattern_MultiNodePatternExpr () {
 @public
  EduStanfordNlpLingTokensregexMultiNodePattern *multiNodePattern_;
}

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpLingTokensregexSequencePattern_MultiNodePatternExpr, multiNodePattern_, EduStanfordNlpLingTokensregexMultiNodePattern *)

@interface EduStanfordNlpLingTokensregexSequencePattern_SpecialNodePatternExpr () {
 @public
  NSString *name_;
}

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpLingTokensregexSequencePattern_SpecialNodePatternExpr, name_, NSString *)

@interface EduStanfordNlpLingTokensregexSequencePattern_BackRefPatternExpr () {
 @public
  id<EduStanfordNlpLingTokensregexSequencePattern_NodesMatchChecker> matcher_;
  jint captureGroupId_;
}

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpLingTokensregexSequencePattern_BackRefPatternExpr, matcher_, id<EduStanfordNlpLingTokensregexSequencePattern_NodesMatchChecker>)

@interface EduStanfordNlpLingTokensregexSequencePattern_ValuePatternExpr () {
 @public
  EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *expr_;
  id value_;
}

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpLingTokensregexSequencePattern_ValuePatternExpr, expr_, EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *)
J2OBJC_FIELD_SETTER(EduStanfordNlpLingTokensregexSequencePattern_ValuePatternExpr, value_, id)

@interface EduStanfordNlpLingTokensregexSequencePattern_GroupPatternExpr () {
 @public
  EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *pattern_;
  jboolean capture_;
  jint captureGroupId_;
  NSString *varname_;
}

- (instancetype)initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr:(EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *)pattern
                                                                     withBoolean:(jboolean)capture
                                                                         withInt:(jint)captureGroupId
                                                                    withNSString:(NSString *)varname;

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpLingTokensregexSequencePattern_GroupPatternExpr, pattern_, EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *)
J2OBJC_FIELD_SETTER(EduStanfordNlpLingTokensregexSequencePattern_GroupPatternExpr, varname_, NSString *)

__attribute__((unused)) static void EduStanfordNlpLingTokensregexSequencePattern_GroupPatternExpr_initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_withBoolean_withInt_withNSString_(EduStanfordNlpLingTokensregexSequencePattern_GroupPatternExpr *self, EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *pattern, jboolean capture, jint captureGroupId, NSString *varname);

__attribute__((unused)) static EduStanfordNlpLingTokensregexSequencePattern_GroupPatternExpr *new_EduStanfordNlpLingTokensregexSequencePattern_GroupPatternExpr_initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_withBoolean_withInt_withNSString_(EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *pattern, jboolean capture, jint captureGroupId, NSString *varname) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpLingTokensregexSequencePattern_GroupPatternExpr *create_EduStanfordNlpLingTokensregexSequencePattern_GroupPatternExpr_initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_withBoolean_withInt_withNSString_(EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *pattern, jboolean capture, jint captureGroupId, NSString *varname);

@interface EduStanfordNlpLingTokensregexSequencePattern_RepeatPatternExpr () {
 @public
  EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *pattern_;
  jint minMatch_;
  jint maxMatch_;
  jboolean greedyMatch_;
}

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpLingTokensregexSequencePattern_RepeatPatternExpr, pattern_, EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *)

@interface EduStanfordNlpLingTokensregexSequencePattern_OrPatternExpr () {
 @public
  id<JavaUtilList> patterns_;
}

- (EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *)optimizeOr;

- (EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *)optimizeOrStringSeqs;

+ (EduStanfordNlpUtilPair *)_getStringAnnotation_WithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr:(EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *)p;

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpLingTokensregexSequencePattern_OrPatternExpr, patterns_, id<JavaUtilList>)

inline jint EduStanfordNlpLingTokensregexSequencePattern_OrPatternExpr_get_OPTIMIZE_MIN_SIZE();
#define EduStanfordNlpLingTokensregexSequencePattern_OrPatternExpr_OPTIMIZE_MIN_SIZE 5
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpLingTokensregexSequencePattern_OrPatternExpr, OPTIMIZE_MIN_SIZE, jint)

__attribute__((unused)) static EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *EduStanfordNlpLingTokensregexSequencePattern_OrPatternExpr_optimizeOr(EduStanfordNlpLingTokensregexSequencePattern_OrPatternExpr *self);

__attribute__((unused)) static EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *EduStanfordNlpLingTokensregexSequencePattern_OrPatternExpr_optimizeOrStringSeqs(EduStanfordNlpLingTokensregexSequencePattern_OrPatternExpr *self);

__attribute__((unused)) static EduStanfordNlpUtilPair *EduStanfordNlpLingTokensregexSequencePattern_OrPatternExpr__getStringAnnotation_WithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_(EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *p);

@interface EduStanfordNlpLingTokensregexSequencePattern_AndPatternExpr () {
 @public
  id<JavaUtilList> patterns_;
}

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpLingTokensregexSequencePattern_AndPatternExpr, patterns_, id<JavaUtilList>)

@interface EduStanfordNlpLingTokensregexSequencePattern_MatchState : EduStanfordNlpLingTokensregexSequencePattern_State

- (jboolean)matchWithInt:(jint)bid
withEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates:(EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *)matchedStates
             withBoolean:(jboolean)consume
withEduStanfordNlpLingTokensregexSequencePattern_State:(EduStanfordNlpLingTokensregexSequencePattern_State *)prevState;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpLingTokensregexSequencePattern_MatchState)

__attribute__((unused)) static void EduStanfordNlpLingTokensregexSequencePattern_MatchState_init(EduStanfordNlpLingTokensregexSequencePattern_MatchState *self);

__attribute__((unused)) static EduStanfordNlpLingTokensregexSequencePattern_MatchState *new_EduStanfordNlpLingTokensregexSequencePattern_MatchState_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpLingTokensregexSequencePattern_MatchState *create_EduStanfordNlpLingTokensregexSequencePattern_MatchState_init();

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpLingTokensregexSequencePattern_MatchState)

@interface EduStanfordNlpLingTokensregexSequencePattern_ValueState : EduStanfordNlpLingTokensregexSequencePattern_State {
 @public
  id value_;
}

- (instancetype)initWithId:(id)value;

- (id)valueWithInt:(jint)bid
withEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates:(EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *)matchedStates;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpLingTokensregexSequencePattern_ValueState)

J2OBJC_FIELD_SETTER(EduStanfordNlpLingTokensregexSequencePattern_ValueState, value_, id)

__attribute__((unused)) static void EduStanfordNlpLingTokensregexSequencePattern_ValueState_initWithId_(EduStanfordNlpLingTokensregexSequencePattern_ValueState *self, id value);

__attribute__((unused)) static EduStanfordNlpLingTokensregexSequencePattern_ValueState *new_EduStanfordNlpLingTokensregexSequencePattern_ValueState_initWithId_(id value) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpLingTokensregexSequencePattern_ValueState *create_EduStanfordNlpLingTokensregexSequencePattern_ValueState_initWithId_(id value);

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpLingTokensregexSequencePattern_ValueState)

@interface EduStanfordNlpLingTokensregexSequencePattern_NodePatternState : EduStanfordNlpLingTokensregexSequencePattern_State {
 @public
  EduStanfordNlpLingTokensregexNodePattern *pattern_;
}

- (instancetype)initWithEduStanfordNlpLingTokensregexNodePattern:(EduStanfordNlpLingTokensregexNodePattern *)p;

- (jboolean)matchWithInt:(jint)bid
withEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates:(EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *)matchedStates
             withBoolean:(jboolean)consume
withEduStanfordNlpLingTokensregexSequencePattern_State:(EduStanfordNlpLingTokensregexSequencePattern_State *)prevState;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpLingTokensregexSequencePattern_NodePatternState)

J2OBJC_FIELD_SETTER(EduStanfordNlpLingTokensregexSequencePattern_NodePatternState, pattern_, EduStanfordNlpLingTokensregexNodePattern *)

__attribute__((unused)) static void EduStanfordNlpLingTokensregexSequencePattern_NodePatternState_initWithEduStanfordNlpLingTokensregexNodePattern_(EduStanfordNlpLingTokensregexSequencePattern_NodePatternState *self, EduStanfordNlpLingTokensregexNodePattern *p);

__attribute__((unused)) static EduStanfordNlpLingTokensregexSequencePattern_NodePatternState *new_EduStanfordNlpLingTokensregexSequencePattern_NodePatternState_initWithEduStanfordNlpLingTokensregexNodePattern_(EduStanfordNlpLingTokensregexNodePattern *p) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpLingTokensregexSequencePattern_NodePatternState *create_EduStanfordNlpLingTokensregexSequencePattern_NodePatternState_initWithEduStanfordNlpLingTokensregexNodePattern_(EduStanfordNlpLingTokensregexNodePattern *p);

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpLingTokensregexSequencePattern_NodePatternState)

@interface EduStanfordNlpLingTokensregexSequencePattern_MultiNodePatternState : EduStanfordNlpLingTokensregexSequencePattern_State {
 @public
  EduStanfordNlpLingTokensregexMultiNodePattern *pattern_;
}

- (instancetype)initWithEduStanfordNlpLingTokensregexMultiNodePattern:(EduStanfordNlpLingTokensregexMultiNodePattern *)p;

- (jboolean)matchWithInt:(jint)bid
withEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates:(EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *)matchedStates
             withBoolean:(jboolean)consume
withEduStanfordNlpLingTokensregexSequencePattern_State:(EduStanfordNlpLingTokensregexSequencePattern_State *)prevState;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpLingTokensregexSequencePattern_MultiNodePatternState)

J2OBJC_FIELD_SETTER(EduStanfordNlpLingTokensregexSequencePattern_MultiNodePatternState, pattern_, EduStanfordNlpLingTokensregexMultiNodePattern *)

__attribute__((unused)) static void EduStanfordNlpLingTokensregexSequencePattern_MultiNodePatternState_initWithEduStanfordNlpLingTokensregexMultiNodePattern_(EduStanfordNlpLingTokensregexSequencePattern_MultiNodePatternState *self, EduStanfordNlpLingTokensregexMultiNodePattern *p);

__attribute__((unused)) static EduStanfordNlpLingTokensregexSequencePattern_MultiNodePatternState *new_EduStanfordNlpLingTokensregexSequencePattern_MultiNodePatternState_initWithEduStanfordNlpLingTokensregexMultiNodePattern_(EduStanfordNlpLingTokensregexMultiNodePattern *p) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpLingTokensregexSequencePattern_MultiNodePatternState *create_EduStanfordNlpLingTokensregexSequencePattern_MultiNodePatternState_initWithEduStanfordNlpLingTokensregexMultiNodePattern_(EduStanfordNlpLingTokensregexMultiNodePattern *p);

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpLingTokensregexSequencePattern_MultiNodePatternState)

@interface EduStanfordNlpLingTokensregexSequencePattern_RepeatState : EduStanfordNlpLingTokensregexSequencePattern_State {
 @public
  EduStanfordNlpLingTokensregexSequencePattern_State *repeatStart_;
  jint minMatch_;
  jint maxMatch_;
  jboolean greedyMatch_;
}

- (instancetype)initWithEduStanfordNlpLingTokensregexSequencePattern_State:(EduStanfordNlpLingTokensregexSequencePattern_State *)start
                                                                   withInt:(jint)minMatch
                                                                   withInt:(jint)maxMatch
                                                               withBoolean:(jboolean)greedyMatch;

- (jboolean)matchWithInt:(jint)bid
withEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates:(EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *)matchedStates
             withBoolean:(jboolean)consume
withEduStanfordNlpLingTokensregexSequencePattern_State:(EduStanfordNlpLingTokensregexSequencePattern_State *)prevState;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpLingTokensregexSequencePattern_RepeatState)

J2OBJC_FIELD_SETTER(EduStanfordNlpLingTokensregexSequencePattern_RepeatState, repeatStart_, EduStanfordNlpLingTokensregexSequencePattern_State *)

__attribute__((unused)) static void EduStanfordNlpLingTokensregexSequencePattern_RepeatState_initWithEduStanfordNlpLingTokensregexSequencePattern_State_withInt_withInt_withBoolean_(EduStanfordNlpLingTokensregexSequencePattern_RepeatState *self, EduStanfordNlpLingTokensregexSequencePattern_State *start, jint minMatch, jint maxMatch, jboolean greedyMatch);

__attribute__((unused)) static EduStanfordNlpLingTokensregexSequencePattern_RepeatState *new_EduStanfordNlpLingTokensregexSequencePattern_RepeatState_initWithEduStanfordNlpLingTokensregexSequencePattern_State_withInt_withInt_withBoolean_(EduStanfordNlpLingTokensregexSequencePattern_State *start, jint minMatch, jint maxMatch, jboolean greedyMatch) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpLingTokensregexSequencePattern_RepeatState *create_EduStanfordNlpLingTokensregexSequencePattern_RepeatState_initWithEduStanfordNlpLingTokensregexSequencePattern_State_withInt_withInt_withBoolean_(EduStanfordNlpLingTokensregexSequencePattern_State *start, jint minMatch, jint maxMatch, jboolean greedyMatch);

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpLingTokensregexSequencePattern_RepeatState)

@interface EduStanfordNlpLingTokensregexSequencePattern_BackRefState () {
 @public
  id<EduStanfordNlpLingTokensregexSequencePattern_NodesMatchChecker> matcher_;
  jint captureGroupId_;
}

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpLingTokensregexSequencePattern_BackRefState, matcher_, id<EduStanfordNlpLingTokensregexSequencePattern_NodesMatchChecker>)

@interface EduStanfordNlpLingTokensregexSequencePattern_GroupStartState () {
 @public
  jint captureGroupId_;
}

@end

@interface EduStanfordNlpLingTokensregexSequencePattern_GroupEndState () {
 @public
  jint captureGroupId_;
}

@end

@interface EduStanfordNlpLingTokensregexSequencePattern_ConjMatchStateInfo () {
 @public
  jint startBid_;
  jint startPos_;
  jint childCount_;
  IOSObjectArray *reachableChildBids_;
}

- (instancetype)initWithInt:(jint)startBid
                    withInt:(jint)childCount
                    withInt:(jint)startPos;

- (void)addChildBidWithInt:(jint)i
                   withInt:(jint)bid
                   withInt:(jint)pos;

- (jboolean)isAllChildMatched;

- (jboolean)isAllChildMatchedWithInt:(jint)index
                             withInt:(jint)bid
                             withInt:(jint)pos;

- (IOSIntArray *)getAllChildMatchedBidsWithInt:(jint)index
                                       withInt:(jint)bid
                                       withInt:(jint)pos;

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpLingTokensregexSequencePattern_ConjMatchStateInfo, reachableChildBids_, IOSObjectArray *)

__attribute__((unused)) static void EduStanfordNlpLingTokensregexSequencePattern_ConjMatchStateInfo_initWithInt_withInt_withInt_(EduStanfordNlpLingTokensregexSequencePattern_ConjMatchStateInfo *self, jint startBid, jint childCount, jint startPos);

__attribute__((unused)) static EduStanfordNlpLingTokensregexSequencePattern_ConjMatchStateInfo *new_EduStanfordNlpLingTokensregexSequencePattern_ConjMatchStateInfo_initWithInt_withInt_withInt_(jint startBid, jint childCount, jint startPos) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpLingTokensregexSequencePattern_ConjMatchStateInfo *create_EduStanfordNlpLingTokensregexSequencePattern_ConjMatchStateInfo_initWithInt_withInt_withInt_(jint startBid, jint childCount, jint startPos);

__attribute__((unused)) static void EduStanfordNlpLingTokensregexSequencePattern_ConjMatchStateInfo_addChildBidWithInt_withInt_withInt_(EduStanfordNlpLingTokensregexSequencePattern_ConjMatchStateInfo *self, jint i, jint bid, jint pos);

__attribute__((unused)) static IOSIntArray *EduStanfordNlpLingTokensregexSequencePattern_ConjMatchStateInfo_getAllChildMatchedBidsWithInt_withInt_withInt_(EduStanfordNlpLingTokensregexSequencePattern_ConjMatchStateInfo *self, jint index, jint bid, jint pos);

@interface EduStanfordNlpLingTokensregexSequencePattern_ConjStartState () {
 @public
  jint childCount_;
}

@end

@interface EduStanfordNlpLingTokensregexSequencePattern_ConjEndState () {
 @public
  EduStanfordNlpLingTokensregexSequencePattern_ConjStartState *startState_;
  jint childIndex_;
}

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpLingTokensregexSequencePattern_ConjEndState, startState_, EduStanfordNlpLingTokensregexSequencePattern_ConjStartState *)

@interface EduStanfordNlpLingTokensregexSequencePattern_$1 : NSObject < EduStanfordNlpLingTokensregexSequencePattern_NodesMatchChecker >

- (jboolean)matchesWithId:(id)o1
                   withId:(id)o2;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpLingTokensregexSequencePattern_$1)

__attribute__((unused)) static void EduStanfordNlpLingTokensregexSequencePattern_$1_init(EduStanfordNlpLingTokensregexSequencePattern_$1 *self);

__attribute__((unused)) static EduStanfordNlpLingTokensregexSequencePattern_$1 *new_EduStanfordNlpLingTokensregexSequencePattern_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpLingTokensregexSequencePattern_$1 *create_EduStanfordNlpLingTokensregexSequencePattern_$1_init();

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpLingTokensregexSequencePattern)

id<EduStanfordNlpLingTokensregexSequencePattern_NodesMatchChecker> EduStanfordNlpLingTokensregexSequencePattern_NODES_EQUAL_CHECKER;
EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *EduStanfordNlpLingTokensregexSequencePattern_ANY_NODE_PATTERN_EXPR;
EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *EduStanfordNlpLingTokensregexSequencePattern_SEQ_BEGIN_PATTERN_EXPR;
EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *EduStanfordNlpLingTokensregexSequencePattern_SEQ_END_PATTERN_EXPR;
EduStanfordNlpLingTokensregexSequencePattern_State *EduStanfordNlpLingTokensregexSequencePattern_MATCH_STATE;

@implementation EduStanfordNlpLingTokensregexSequencePattern

- (instancetype)initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr:(EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *)nodeSequencePattern {
  EduStanfordNlpLingTokensregexSequencePattern_initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_(self, nodeSequencePattern);
  return self;
}

- (instancetype)initWithNSString:(NSString *)patternStr
withEduStanfordNlpLingTokensregexSequencePattern_PatternExpr:(EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *)nodeSequencePattern {
  EduStanfordNlpLingTokensregexSequencePattern_initWithNSString_withEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_(self, patternStr, nodeSequencePattern);
  return self;
}

- (instancetype)initWithNSString:(NSString *)patternStr
withEduStanfordNlpLingTokensregexSequencePattern_PatternExpr:(EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *)nodeSequencePattern
withEduStanfordNlpLingTokensregexSequenceMatchAction:(id<EduStanfordNlpLingTokensregexSequenceMatchAction>)action {
  EduStanfordNlpLingTokensregexSequencePattern_initWithNSString_withEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_withEduStanfordNlpLingTokensregexSequenceMatchAction_(self, patternStr, nodeSequencePattern, action);
  return self;
}

- (NSString *)description {
  return [self pattern];
}

- (EduStanfordNlpLingTokensregexSequencePattern *)transformWithEduStanfordNlpLingTokensregexNodePatternTransformer:(id<EduStanfordNlpLingTokensregexNodePatternTransformer>)transformer {
  if (action_ != nil) {
    @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"transform on actions not yet implemented");
  }
  EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *transformedPattern = [((EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *) nil_chk(self->patternExpr_)) transformWithEduStanfordNlpLingTokensregexNodePatternTransformer:transformer];
  return new_EduStanfordNlpLingTokensregexSequencePattern_initWithNSString_withEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_withEduStanfordNlpLingTokensregexSequenceMatchAction_(self->patternStr_, transformedPattern, nil);
}

- (NSString *)pattern {
  return patternStr_;
}

- (EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *)getPatternExpr {
  return patternExpr_;
}

- (jdouble)getPriority {
  return priority_;
}

- (void)setPriorityWithDouble:(jdouble)priority {
  self->priority_ = priority;
}

- (jdouble)getWeight {
  return weight_;
}

- (void)setWeightWithDouble:(jdouble)weight {
  self->weight_ = weight;
}

- (id<EduStanfordNlpLingTokensregexSequenceMatchAction>)getAction {
  return action_;
}

- (void)setActionWithEduStanfordNlpLingTokensregexSequenceMatchAction:(id<EduStanfordNlpLingTokensregexSequenceMatchAction>)action {
  self->action_ = action;
}

- (jint)getTotalGroups {
  return totalGroups_;
}

+ (EduStanfordNlpLingTokensregexSequencePattern *)compileWithEduStanfordNlpLingTokensregexEnv:(EduStanfordNlpLingTokensregexEnv *)env
                                                                                 withNSString:(NSString *)string {
  return EduStanfordNlpLingTokensregexSequencePattern_compileWithEduStanfordNlpLingTokensregexEnv_withNSString_(env, string);
}

+ (EduStanfordNlpLingTokensregexSequencePattern *)compileWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr:(EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *)nodeSequencePattern {
  return EduStanfordNlpLingTokensregexSequencePattern_compileWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_(nodeSequencePattern);
}

- (EduStanfordNlpLingTokensregexSequenceMatcher *)getMatcherWithJavaUtilList:(id<JavaUtilList>)tokens {
  return new_EduStanfordNlpLingTokensregexSequenceMatcher_initWithEduStanfordNlpLingTokensregexSequencePattern_withJavaUtilList_(self, tokens);
}

- (id)findNodePatternWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)filter {
  id<JavaUtilQueue> todo = new_JavaUtilLinkedList_init();
  id<JavaUtilSet> seen = new_JavaUtilHashSet_init();
  [todo addWithId:root_];
  [seen addWithId:root_];
  while (![todo isEmpty]) {
    EduStanfordNlpLingTokensregexSequencePattern_State *state = [todo poll];
    if ([state isKindOfClass:[EduStanfordNlpLingTokensregexSequencePattern_NodePatternState class]]) {
      EduStanfordNlpLingTokensregexNodePattern *pattern = ((EduStanfordNlpLingTokensregexSequencePattern_NodePatternState *) nil_chk(((EduStanfordNlpLingTokensregexSequencePattern_NodePatternState *) cast_chk(state, [EduStanfordNlpLingTokensregexSequencePattern_NodePatternState class]))))->pattern_;
      id res = [((id<JavaUtilFunctionFunction>) nil_chk(filter)) applyWithId:pattern];
      if (res != nil) return res;
    }
    if (((EduStanfordNlpLingTokensregexSequencePattern_State *) nil_chk(state))->next_ != nil) {
      for (EduStanfordNlpLingTokensregexSequencePattern_State * __strong s in state->next_) {
        if (![seen containsWithId:s]) {
          [seen addWithId:s];
          [todo addWithId:s];
        }
      }
    }
  }
  return nil;
}

- (id<JavaUtilCollection>)findNodePatternsWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)filter
                                                           withBoolean:(jboolean)allowOptional
                                                           withBoolean:(jboolean)allowBranching {
  id<JavaUtilList> outList = new_JavaUtilArrayList_init();
  id<JavaUtilQueue> todo = new_JavaUtilLinkedList_init();
  id<JavaUtilSet> seen = new_JavaUtilHashSet_init();
  [todo addWithId:root_];
  [seen addWithId:root_];
  while (![todo isEmpty]) {
    EduStanfordNlpLingTokensregexSequencePattern_State *state = [todo poll];
    if ((allowOptional || !((EduStanfordNlpLingTokensregexSequencePattern_State *) nil_chk(state))->isOptional_) && ([state isKindOfClass:[EduStanfordNlpLingTokensregexSequencePattern_NodePatternState class]])) {
      EduStanfordNlpLingTokensregexNodePattern *pattern = ((EduStanfordNlpLingTokensregexSequencePattern_NodePatternState *) nil_chk(((EduStanfordNlpLingTokensregexSequencePattern_NodePatternState *) cast_chk(state, [EduStanfordNlpLingTokensregexSequencePattern_NodePatternState class]))))->pattern_;
      id res = [((id<JavaUtilFunctionFunction>) nil_chk(filter)) applyWithId:pattern];
      if (res != nil) {
        [outList addWithId:res];
      }
    }
    if (((EduStanfordNlpLingTokensregexSequencePattern_State *) nil_chk(state))->next_ != nil) {
      jboolean addNext = allowBranching || [state->next_ size] == 1;
      if (addNext) {
        for (EduStanfordNlpLingTokensregexSequencePattern_State * __strong s in nil_chk(state->next_)) {
          if (![seen containsWithId:s]) {
            [seen addWithId:s];
            [todo addWithId:s];
          }
        }
      }
    }
  }
  return outList;
}

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)ois {
  patternStr_ = (NSString *) cast_chk([((JavaIoObjectInputStream *) nil_chk(ois)) readObject], [NSString class]);
  patternExpr_ = (EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *) cast_chk([ois readObject], [EduStanfordNlpLingTokensregexSequencePattern_PatternExpr class]);
  action_ = (id<EduStanfordNlpLingTokensregexSequenceMatchAction>) cast_check([ois readObject], EduStanfordNlpLingTokensregexSequenceMatchAction_class_());
  patternExpr_ = new_EduStanfordNlpLingTokensregexSequencePattern_GroupPatternExpr_initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_withBoolean_(patternExpr_, true);
  patternExpr_ = [patternExpr_ optimize];
  self->totalGroups_ = [((EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *) nil_chk(patternExpr_)) assignGroupIdsWithInt:0];
  EduStanfordNlpLingTokensregexSequencePattern_Frag *f = [((EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *) nil_chk(patternExpr_)) build];
  [((EduStanfordNlpLingTokensregexSequencePattern_Frag *) nil_chk(f)) connectWithEduStanfordNlpLingTokensregexSequencePattern_State:EduStanfordNlpLingTokensregexSequencePattern_MATCH_STATE];
  self->root_ = f->start_;
  varGroupBindings_ = new_EduStanfordNlpLingTokensregexSequencePattern_VarGroupBindings_initWithInt_(totalGroups_ + 1);
  [((EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *) nil_chk(patternExpr_)) updateBindingsWithEduStanfordNlpLingTokensregexSequencePattern_VarGroupBindings:varGroupBindings_];
}

- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)oos {
  [((JavaIoObjectOutputStream *) nil_chk(oos)) writeObjectWithId:[self description]];
  [oos writeObjectWithId:[self getPatternExpr]];
  [oos writeObjectWithId:[self getAction]];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 2, -1, 3, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexSequencePattern;", 0x1, 5, 6, -1, 7, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexSequencePattern_PatternExpr;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 9, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexSequenceMatchAction;", 0x1, -1, -1, -1, 11, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, 14, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexSequencePattern;", 0x9, 15, 16, -1, 17, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexSequencePattern;", 0xc, 15, 0, -1, 18, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexSequenceMatcher;", 0x1, 19, 20, -1, 21, -1, -1 },
    { NULL, "LNSObject;", 0x1, 22, 23, -1, 24, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, 25, 26, -1, 27, -1, -1 },
    { NULL, "V", 0x2, 28, 29, 30, -1, -1, -1 },
    { NULL, "V", 0x2, 31, 32, 33, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr:);
  methods[1].selector = @selector(initWithNSString:withEduStanfordNlpLingTokensregexSequencePattern_PatternExpr:);
  methods[2].selector = @selector(initWithNSString:withEduStanfordNlpLingTokensregexSequencePattern_PatternExpr:withEduStanfordNlpLingTokensregexSequenceMatchAction:);
  methods[3].selector = @selector(description);
  methods[4].selector = @selector(transformWithEduStanfordNlpLingTokensregexNodePatternTransformer:);
  methods[5].selector = @selector(pattern);
  methods[6].selector = @selector(getPatternExpr);
  methods[7].selector = @selector(getPriority);
  methods[8].selector = @selector(setPriorityWithDouble:);
  methods[9].selector = @selector(getWeight);
  methods[10].selector = @selector(setWeightWithDouble:);
  methods[11].selector = @selector(getAction);
  methods[12].selector = @selector(setActionWithEduStanfordNlpLingTokensregexSequenceMatchAction:);
  methods[13].selector = @selector(getTotalGroups);
  methods[14].selector = @selector(compileWithEduStanfordNlpLingTokensregexEnv:withNSString:);
  methods[15].selector = @selector(compileWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr:);
  methods[16].selector = @selector(getMatcherWithJavaUtilList:);
  methods[17].selector = @selector(findNodePatternWithJavaUtilFunctionFunction:);
  methods[18].selector = @selector(findNodePatternsWithJavaUtilFunctionFunction:withBoolean:withBoolean:);
  methods[19].selector = @selector(readObjectWithJavaIoObjectInputStream:);
  methods[20].selector = @selector(writeObjectWithJavaIoObjectOutputStream:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "patternStr_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "patternExpr_", "LEduStanfordNlpLingTokensregexSequencePattern_PatternExpr;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "action_", "LEduStanfordNlpLingTokensregexSequenceMatchAction;", .constantValue.asLong = 0, 0x2, -1, -1, 34, -1 },
    { "root_", "LEduStanfordNlpLingTokensregexSequencePattern_State;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "totalGroups_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "varGroupBindings_", "LEduStanfordNlpLingTokensregexSequencePattern_VarGroupBindings;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "priority_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "weight_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "NODES_EQUAL_CHECKER", "LEduStanfordNlpLingTokensregexSequencePattern_NodesMatchChecker;", .constantValue.asLong = 0, 0x19, -1, 35, 36, -1 },
    { "ANY_NODE_PATTERN_EXPR", "LEduStanfordNlpLingTokensregexSequencePattern_PatternExpr;", .constantValue.asLong = 0, 0x19, -1, 37, -1, -1 },
    { "SEQ_BEGIN_PATTERN_EXPR", "LEduStanfordNlpLingTokensregexSequencePattern_PatternExpr;", .constantValue.asLong = 0, 0x19, -1, 38, -1, -1 },
    { "SEQ_END_PATTERN_EXPR", "LEduStanfordNlpLingTokensregexSequencePattern_PatternExpr;", .constantValue.asLong = 0, 0x19, -1, 39, -1, -1 },
    { "MATCH_STATE", "LEduStanfordNlpLingTokensregexSequencePattern_State;", .constantValue.asLong = 0, 0x1c, -1, 40, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpLingTokensregexSequencePattern_PatternExpr;", "LNSString;LEduStanfordNlpLingTokensregexSequencePattern_PatternExpr;", "LNSString;LEduStanfordNlpLingTokensregexSequencePattern_PatternExpr;LEduStanfordNlpLingTokensregexSequenceMatchAction;", "(Ljava/lang/String;Ledu/stanford/nlp/ling/tokensregex/SequencePattern$PatternExpr;Ledu/stanford/nlp/ling/tokensregex/SequenceMatchAction<TT;>;)V", "toString", "transform", "LEduStanfordNlpLingTokensregexNodePatternTransformer;", "<T2:Ljava/lang/Object;>(Ledu/stanford/nlp/ling/tokensregex/NodePatternTransformer<TT;TT2;>;)Ledu/stanford/nlp/ling/tokensregex/SequencePattern<TT2;>;", "setPriority", "D", "setWeight", "()Ledu/stanford/nlp/ling/tokensregex/SequenceMatchAction<TT;>;", "setAction", "LEduStanfordNlpLingTokensregexSequenceMatchAction;", "(Ledu/stanford/nlp/ling/tokensregex/SequenceMatchAction<TT;>;)V", "compile", "LEduStanfordNlpLingTokensregexEnv;LNSString;", "<T:Ljava/lang/Object;>(Ledu/stanford/nlp/ling/tokensregex/Env;Ljava/lang/String;)Ledu/stanford/nlp/ling/tokensregex/SequencePattern<TT;>;", "<T:Ljava/lang/Object;>(Ledu/stanford/nlp/ling/tokensregex/SequencePattern$PatternExpr;)Ledu/stanford/nlp/ling/tokensregex/SequencePattern<TT;>;", "getMatcher", "LJavaUtilList;", "(Ljava/util/List<+TT;>;)Ledu/stanford/nlp/ling/tokensregex/SequenceMatcher<TT;>;", "findNodePattern", "LJavaUtilFunctionFunction;", "<OUT:Ljava/lang/Object;>(Ljava/util/function/Function<Ledu/stanford/nlp/ling/tokensregex/NodePattern<TT;>;TOUT;>;)TOUT;", "findNodePatterns", "LJavaUtilFunctionFunction;ZZ", "<OUT:Ljava/lang/Object;>(Ljava/util/function/Function<Ledu/stanford/nlp/ling/tokensregex/NodePattern<TT;>;TOUT;>;ZZ)Ljava/util/Collection<TOUT;>;", "readObject", "LJavaIoObjectInputStream;", "LJavaIoIOException;LJavaLangClassNotFoundException;", "writeObject", "LJavaIoObjectOutputStream;", "LJavaIoIOException;", "Ledu/stanford/nlp/ling/tokensregex/SequenceMatchAction<TT;>;", &EduStanfordNlpLingTokensregexSequencePattern_NODES_EQUAL_CHECKER, "Ledu/stanford/nlp/ling/tokensregex/SequencePattern$NodesMatchChecker<Ljava/lang/Object;>;", &EduStanfordNlpLingTokensregexSequencePattern_ANY_NODE_PATTERN_EXPR, &EduStanfordNlpLingTokensregexSequencePattern_SEQ_BEGIN_PATTERN_EXPR, &EduStanfordNlpLingTokensregexSequencePattern_SEQ_END_PATTERN_EXPR, &EduStanfordNlpLingTokensregexSequencePattern_MATCH_STATE, "LEduStanfordNlpLingTokensregexSequencePattern_Parser;LEduStanfordNlpLingTokensregexSequencePattern_VarGroupBindings;LEduStanfordNlpLingTokensregexSequencePattern_NodesMatchChecker;LEduStanfordNlpLingTokensregexSequencePattern_PatternExpr;LEduStanfordNlpLingTokensregexSequencePattern_NodePatternExpr;LEduStanfordNlpLingTokensregexSequencePattern_MultiNodePatternExpr;LEduStanfordNlpLingTokensregexSequencePattern_SpecialNodePatternExpr;LEduStanfordNlpLingTokensregexSequencePattern_SequenceStartPatternExpr;LEduStanfordNlpLingTokensregexSequencePattern_SequenceEndPatternExpr;LEduStanfordNlpLingTokensregexSequencePattern_SequencePatternExpr;LEduStanfordNlpLingTokensregexSequencePattern_BackRefPatternExpr;LEduStanfordNlpLingTokensregexSequencePattern_ValuePatternExpr;LEduStanfordNlpLingTokensregexSequencePattern_GroupPatternExpr;LEduStanfordNlpLingTokensregexSequencePattern_RepeatPatternExpr;LEduStanfordNlpLingTokensregexSequencePattern_OrPatternExpr;LEduStanfordNlpLingTokensregexSequencePattern_AndPatternExpr;LEduStanfordNlpLingTokensregexSequencePattern_State;LEduStanfordNlpLingTokensregexSequencePattern_MatchState;LEduStanfordNlpLingTokensregexSequencePattern_ValueState;LEduStanfordNlpLingTokensregexSequencePattern_NodePatternState;LEduStanfordNlpLingTokensregexSequencePattern_MultiNodePatternState;LEduStanfordNlpLingTokensregexSequencePattern_RepeatState;LEduStanfordNlpLingTokensregexSequencePattern_BackRefState;LEduStanfordNlpLingTokensregexSequencePattern_GroupStartState;LEduStanfordNlpLingTokensregexSequencePattern_GroupEndState;LEduStanfordNlpLingTokensregexSequencePattern_ConjMatchStateInfo;LEduStanfordNlpLingTokensregexSequencePattern_ConjStartState;LEduStanfordNlpLingTokensregexSequencePattern_ConjEndState;LEduStanfordNlpLingTokensregexSequencePattern_SeqStartState;LEduStanfordNlpLingTokensregexSequencePattern_SeqEndState;LEduStanfordNlpLingTokensregexSequencePattern_Frag;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Ljava/io/Serializable;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexSequencePattern = { "SequencePattern", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, fields, 7, 0x1, 21, 13, -1, 41, -1, 42, -1 };
  return &_EduStanfordNlpLingTokensregexSequencePattern;
}

+ (void)initialize {
  if (self == [EduStanfordNlpLingTokensregexSequencePattern class]) {
    EduStanfordNlpLingTokensregexSequencePattern_NODES_EQUAL_CHECKER = new_EduStanfordNlpLingTokensregexSequencePattern_$1_init();
    EduStanfordNlpLingTokensregexSequencePattern_ANY_NODE_PATTERN_EXPR = new_EduStanfordNlpLingTokensregexSequencePattern_NodePatternExpr_initWithEduStanfordNlpLingTokensregexNodePattern_(JreLoadStatic(EduStanfordNlpLingTokensregexNodePattern, ANY_NODE));
    EduStanfordNlpLingTokensregexSequencePattern_SEQ_BEGIN_PATTERN_EXPR = new_EduStanfordNlpLingTokensregexSequencePattern_SequenceStartPatternExpr_init();
    EduStanfordNlpLingTokensregexSequencePattern_SEQ_END_PATTERN_EXPR = new_EduStanfordNlpLingTokensregexSequencePattern_SequenceEndPatternExpr_init();
    EduStanfordNlpLingTokensregexSequencePattern_MATCH_STATE = new_EduStanfordNlpLingTokensregexSequencePattern_MatchState_init();
    J2OBJC_SET_INITIALIZED(EduStanfordNlpLingTokensregexSequencePattern)
  }
}

@end

void EduStanfordNlpLingTokensregexSequencePattern_initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_(EduStanfordNlpLingTokensregexSequencePattern *self, EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *nodeSequencePattern) {
  EduStanfordNlpLingTokensregexSequencePattern_initWithNSString_withEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_(self, nil, nodeSequencePattern);
}

EduStanfordNlpLingTokensregexSequencePattern *new_EduStanfordNlpLingTokensregexSequencePattern_initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_(EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *nodeSequencePattern) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequencePattern, initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_, nodeSequencePattern)
}

EduStanfordNlpLingTokensregexSequencePattern *create_EduStanfordNlpLingTokensregexSequencePattern_initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_(EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *nodeSequencePattern) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequencePattern, initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_, nodeSequencePattern)
}

void EduStanfordNlpLingTokensregexSequencePattern_initWithNSString_withEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_(EduStanfordNlpLingTokensregexSequencePattern *self, NSString *patternStr, EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *nodeSequencePattern) {
  EduStanfordNlpLingTokensregexSequencePattern_initWithNSString_withEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_withEduStanfordNlpLingTokensregexSequenceMatchAction_(self, patternStr, nodeSequencePattern, nil);
}

EduStanfordNlpLingTokensregexSequencePattern *new_EduStanfordNlpLingTokensregexSequencePattern_initWithNSString_withEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_(NSString *patternStr, EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *nodeSequencePattern) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequencePattern, initWithNSString_withEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_, patternStr, nodeSequencePattern)
}

EduStanfordNlpLingTokensregexSequencePattern *create_EduStanfordNlpLingTokensregexSequencePattern_initWithNSString_withEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_(NSString *patternStr, EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *nodeSequencePattern) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequencePattern, initWithNSString_withEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_, patternStr, nodeSequencePattern)
}

void EduStanfordNlpLingTokensregexSequencePattern_initWithNSString_withEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_withEduStanfordNlpLingTokensregexSequenceMatchAction_(EduStanfordNlpLingTokensregexSequencePattern *self, NSString *patternStr, EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *nodeSequencePattern, id<EduStanfordNlpLingTokensregexSequenceMatchAction> action) {
  NSObject_init(self);
  self->totalGroups_ = 0;
  self->priority_ = 0.0;
  self->weight_ = 0.0;
  self->patternStr_ = patternStr;
  self->patternExpr_ = nodeSequencePattern;
  self->action_ = action;
  nodeSequencePattern = new_EduStanfordNlpLingTokensregexSequencePattern_GroupPatternExpr_initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_withBoolean_(nodeSequencePattern, true);
  nodeSequencePattern = [nodeSequencePattern optimize];
  self->totalGroups_ = [((EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *) nil_chk(nodeSequencePattern)) assignGroupIdsWithInt:0];
  EduStanfordNlpLingTokensregexSequencePattern_Frag *f = [nodeSequencePattern build];
  [((EduStanfordNlpLingTokensregexSequencePattern_Frag *) nil_chk(f)) connectWithEduStanfordNlpLingTokensregexSequencePattern_State:EduStanfordNlpLingTokensregexSequencePattern_MATCH_STATE];
  self->root_ = f->start_;
  self->varGroupBindings_ = new_EduStanfordNlpLingTokensregexSequencePattern_VarGroupBindings_initWithInt_(self->totalGroups_ + 1);
  [nodeSequencePattern updateBindingsWithEduStanfordNlpLingTokensregexSequencePattern_VarGroupBindings:self->varGroupBindings_];
}

EduStanfordNlpLingTokensregexSequencePattern *new_EduStanfordNlpLingTokensregexSequencePattern_initWithNSString_withEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_withEduStanfordNlpLingTokensregexSequenceMatchAction_(NSString *patternStr, EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *nodeSequencePattern, id<EduStanfordNlpLingTokensregexSequenceMatchAction> action) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequencePattern, initWithNSString_withEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_withEduStanfordNlpLingTokensregexSequenceMatchAction_, patternStr, nodeSequencePattern, action)
}

EduStanfordNlpLingTokensregexSequencePattern *create_EduStanfordNlpLingTokensregexSequencePattern_initWithNSString_withEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_withEduStanfordNlpLingTokensregexSequenceMatchAction_(NSString *patternStr, EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *nodeSequencePattern, id<EduStanfordNlpLingTokensregexSequenceMatchAction> action) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequencePattern, initWithNSString_withEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_withEduStanfordNlpLingTokensregexSequenceMatchAction_, patternStr, nodeSequencePattern, action)
}

EduStanfordNlpLingTokensregexSequencePattern *EduStanfordNlpLingTokensregexSequencePattern_compileWithEduStanfordNlpLingTokensregexEnv_withNSString_(EduStanfordNlpLingTokensregexEnv *env, NSString *string) {
  EduStanfordNlpLingTokensregexSequencePattern_initialize();
  @try {
    EduStanfordNlpUtilPair *p = [((id<EduStanfordNlpLingTokensregexSequencePattern_Parser>) nil_chk(((EduStanfordNlpLingTokensregexEnv *) nil_chk(env))->parser_)) parseSequenceWithActionWithEduStanfordNlpLingTokensregexEnv:env withNSString:string];
    return new_EduStanfordNlpLingTokensregexSequencePattern_initWithNSString_withEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_withEduStanfordNlpLingTokensregexSequenceMatchAction_(string, [((EduStanfordNlpUtilPair *) nil_chk(p)) first], [p second]);
  }
  @catch (JavaLangException *ex) {
    @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$$@", @"Error compiling ", string, @" using environment ", env));
  }
}

EduStanfordNlpLingTokensregexSequencePattern *EduStanfordNlpLingTokensregexSequencePattern_compileWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_(EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *nodeSequencePattern) {
  EduStanfordNlpLingTokensregexSequencePattern_initialize();
  return new_EduStanfordNlpLingTokensregexSequencePattern_initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_(nodeSequencePattern);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexSequencePattern)

@implementation EduStanfordNlpLingTokensregexSequencePattern_Parser

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LEduStanfordNlpLingTokensregexSequencePattern_PatternExpr;", 0x401, 0, 1, 2, -1, -1, -1 },
    { NULL, "LEduStanfordNlpUtilPair;", 0x401, 3, 1, 2, 4, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexSequencePattern_PatternExpr;", 0x401, 5, 1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(parseSequenceWithEduStanfordNlpLingTokensregexEnv:withNSString:);
  methods[1].selector = @selector(parseSequenceWithActionWithEduStanfordNlpLingTokensregexEnv:withNSString:);
  methods[2].selector = @selector(parseNodeWithEduStanfordNlpLingTokensregexEnv:withNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "parseSequence", "LEduStanfordNlpLingTokensregexEnv;LNSString;", "LJavaLangException;", "parseSequenceWithAction", "(Ledu/stanford/nlp/ling/tokensregex/Env;Ljava/lang/String;)Ledu/stanford/nlp/util/Pair<Ledu/stanford/nlp/ling/tokensregex/SequencePattern$PatternExpr;Ledu/stanford/nlp/ling/tokensregex/SequenceMatchAction<TT;>;>;", "parseNode", "LEduStanfordNlpLingTokensregexSequencePattern;", "<T:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexSequencePattern_Parser = { "Parser", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, NULL, 7, 0x609, 3, 0, 6, -1, -1, 7, -1 };
  return &_EduStanfordNlpLingTokensregexSequencePattern_Parser;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexSequencePattern_Parser)

@implementation EduStanfordNlpLingTokensregexSequencePattern_VarGroupBindings

- (instancetype)initWithInt:(jint)size {
  EduStanfordNlpLingTokensregexSequencePattern_VarGroupBindings_initWithInt_(self, size);
  return self;
}

- (void)setWithInt:(jint)index
      withNSString:(NSString *)name {
  (void) IOSObjectArray_Set(nil_chk(varnames_), index, name);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(setWithInt:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "varnames_", "[LNSString;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "set", "ILNSString;", "LEduStanfordNlpLingTokensregexSequencePattern;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexSequencePattern_VarGroupBindings = { "VarGroupBindings", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, fields, 7, 0x8, 2, 1, 3, -1, -1, -1, -1 };
  return &_EduStanfordNlpLingTokensregexSequencePattern_VarGroupBindings;
}

@end

void EduStanfordNlpLingTokensregexSequencePattern_VarGroupBindings_initWithInt_(EduStanfordNlpLingTokensregexSequencePattern_VarGroupBindings *self, jint size) {
  NSObject_init(self);
  self->varnames_ = [IOSObjectArray newArrayWithLength:size type:NSString_class_()];
}

EduStanfordNlpLingTokensregexSequencePattern_VarGroupBindings *new_EduStanfordNlpLingTokensregexSequencePattern_VarGroupBindings_initWithInt_(jint size) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequencePattern_VarGroupBindings, initWithInt_, size)
}

EduStanfordNlpLingTokensregexSequencePattern_VarGroupBindings *create_EduStanfordNlpLingTokensregexSequencePattern_VarGroupBindings_initWithInt_(jint size) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequencePattern_VarGroupBindings, initWithInt_, size)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexSequencePattern_VarGroupBindings)

@implementation EduStanfordNlpLingTokensregexSequencePattern_NodesMatchChecker

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x401, 0, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(matchesWithId:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "matches", "LNSObject;LNSObject;", "(TT;TT;)Z", "LEduStanfordNlpLingTokensregexSequencePattern;", "<T:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexSequencePattern_NodesMatchChecker = { "NodesMatchChecker", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, NULL, 7, 0x60c, 1, 0, 3, -1, -1, 4, -1 };
  return &_EduStanfordNlpLingTokensregexSequencePattern_NodesMatchChecker;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexSequencePattern_NodesMatchChecker)

@implementation EduStanfordNlpLingTokensregexSequencePattern_PatternExpr

- (EduStanfordNlpLingTokensregexSequencePattern_Frag *)build {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)assignGroupIdsWithInt:(jint)start {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *)copy__ {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)updateBindingsWithEduStanfordNlpLingTokensregexSequencePattern_VarGroupBindings:(EduStanfordNlpLingTokensregexSequencePattern_VarGroupBindings *)bindings {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (id)value {
  return nil;
}

- (EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *)optimize {
  return self;
}

- (EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *)transformWithEduStanfordNlpLingTokensregexNodePatternTransformer:(id<EduStanfordNlpLingTokensregexNodePatternTransformer>)transformer {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpLingTokensregexSequencePattern_PatternExpr_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LEduStanfordNlpLingTokensregexSequencePattern_Frag;", 0x404, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x404, 0, 1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexSequencePattern_PatternExpr;", 0x404, 2, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x404, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexSequencePattern_PatternExpr;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexSequencePattern_PatternExpr;", 0x404, 5, 6, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(build);
  methods[1].selector = @selector(assignGroupIdsWithInt:);
  methods[2].selector = @selector(copy__);
  methods[3].selector = @selector(updateBindingsWithEduStanfordNlpLingTokensregexSequencePattern_VarGroupBindings:);
  methods[4].selector = @selector(value);
  methods[5].selector = @selector(optimize);
  methods[6].selector = @selector(transformWithEduStanfordNlpLingTokensregexNodePatternTransformer:);
  methods[7].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "assignGroupIds", "I", "copy", "updateBindings", "LEduStanfordNlpLingTokensregexSequencePattern_VarGroupBindings;", "transform", "LEduStanfordNlpLingTokensregexNodePatternTransformer;", "LEduStanfordNlpLingTokensregexSequencePattern;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexSequencePattern_PatternExpr = { "PatternExpr", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, NULL, 7, 0x409, 8, 0, 7, -1, -1, -1, -1 };
  return &_EduStanfordNlpLingTokensregexSequencePattern_PatternExpr;
}

@end

void EduStanfordNlpLingTokensregexSequencePattern_PatternExpr_init(EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexSequencePattern_PatternExpr)

@implementation EduStanfordNlpLingTokensregexSequencePattern_NodePatternExpr

- (instancetype)initWithEduStanfordNlpLingTokensregexNodePattern:(EduStanfordNlpLingTokensregexNodePattern *)nodePattern {
  EduStanfordNlpLingTokensregexSequencePattern_NodePatternExpr_initWithEduStanfordNlpLingTokensregexNodePattern_(self, nodePattern);
  return self;
}

- (EduStanfordNlpLingTokensregexSequencePattern_Frag *)build {
  EduStanfordNlpLingTokensregexSequencePattern_State *s = new_EduStanfordNlpLingTokensregexSequencePattern_NodePatternState_initWithEduStanfordNlpLingTokensregexNodePattern_(nodePattern_);
  return new_EduStanfordNlpLingTokensregexSequencePattern_Frag_initWithEduStanfordNlpLingTokensregexSequencePattern_State_(s);
}

- (EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *)copy__ {
  return new_EduStanfordNlpLingTokensregexSequencePattern_NodePatternExpr_initWithEduStanfordNlpLingTokensregexNodePattern_(nodePattern_);
}

- (jint)assignGroupIdsWithInt:(jint)start {
  return start;
}

- (void)updateBindingsWithEduStanfordNlpLingTokensregexSequencePattern_VarGroupBindings:(EduStanfordNlpLingTokensregexSequencePattern_VarGroupBindings *)bindings {
}

- (EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *)transformWithEduStanfordNlpLingTokensregexNodePatternTransformer:(id<EduStanfordNlpLingTokensregexNodePatternTransformer>)transformer {
  return new_EduStanfordNlpLingTokensregexSequencePattern_NodePatternExpr_initWithEduStanfordNlpLingTokensregexNodePattern_([((id<EduStanfordNlpLingTokensregexNodePatternTransformer>) nil_chk(transformer)) transformWithEduStanfordNlpLingTokensregexNodePattern:nodePattern_]);
}

- (NSString *)description {
  return [((EduStanfordNlpLingTokensregexNodePattern *) nil_chk(nodePattern_)) description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexSequencePattern_Frag;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexSequencePattern_PatternExpr;", 0x4, 1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 4, 5, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexSequencePattern_PatternExpr;", 0x4, 6, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 8, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpLingTokensregexNodePattern:);
  methods[1].selector = @selector(build);
  methods[2].selector = @selector(copy__);
  methods[3].selector = @selector(assignGroupIdsWithInt:);
  methods[4].selector = @selector(updateBindingsWithEduStanfordNlpLingTokensregexSequencePattern_VarGroupBindings:);
  methods[5].selector = @selector(transformWithEduStanfordNlpLingTokensregexNodePatternTransformer:);
  methods[6].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "nodePattern_", "LEduStanfordNlpLingTokensregexNodePattern;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpLingTokensregexNodePattern;", "copy", "assignGroupIds", "I", "updateBindings", "LEduStanfordNlpLingTokensregexSequencePattern_VarGroupBindings;", "transform", "LEduStanfordNlpLingTokensregexNodePatternTransformer;", "toString", "LEduStanfordNlpLingTokensregexSequencePattern;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexSequencePattern_NodePatternExpr = { "NodePatternExpr", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, fields, 7, 0x9, 7, 1, 9, -1, -1, -1, -1 };
  return &_EduStanfordNlpLingTokensregexSequencePattern_NodePatternExpr;
}

@end

void EduStanfordNlpLingTokensregexSequencePattern_NodePatternExpr_initWithEduStanfordNlpLingTokensregexNodePattern_(EduStanfordNlpLingTokensregexSequencePattern_NodePatternExpr *self, EduStanfordNlpLingTokensregexNodePattern *nodePattern) {
  EduStanfordNlpLingTokensregexSequencePattern_PatternExpr_init(self);
  self->nodePattern_ = nodePattern;
}

EduStanfordNlpLingTokensregexSequencePattern_NodePatternExpr *new_EduStanfordNlpLingTokensregexSequencePattern_NodePatternExpr_initWithEduStanfordNlpLingTokensregexNodePattern_(EduStanfordNlpLingTokensregexNodePattern *nodePattern) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequencePattern_NodePatternExpr, initWithEduStanfordNlpLingTokensregexNodePattern_, nodePattern)
}

EduStanfordNlpLingTokensregexSequencePattern_NodePatternExpr *create_EduStanfordNlpLingTokensregexSequencePattern_NodePatternExpr_initWithEduStanfordNlpLingTokensregexNodePattern_(EduStanfordNlpLingTokensregexNodePattern *nodePattern) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequencePattern_NodePatternExpr, initWithEduStanfordNlpLingTokensregexNodePattern_, nodePattern)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexSequencePattern_NodePatternExpr)

@implementation EduStanfordNlpLingTokensregexSequencePattern_MultiNodePatternExpr

- (instancetype)initWithEduStanfordNlpLingTokensregexMultiNodePattern:(EduStanfordNlpLingTokensregexMultiNodePattern *)nodePattern {
  EduStanfordNlpLingTokensregexSequencePattern_MultiNodePatternExpr_initWithEduStanfordNlpLingTokensregexMultiNodePattern_(self, nodePattern);
  return self;
}

- (EduStanfordNlpLingTokensregexSequencePattern_Frag *)build {
  EduStanfordNlpLingTokensregexSequencePattern_State *s = new_EduStanfordNlpLingTokensregexSequencePattern_MultiNodePatternState_initWithEduStanfordNlpLingTokensregexMultiNodePattern_(multiNodePattern_);
  return new_EduStanfordNlpLingTokensregexSequencePattern_Frag_initWithEduStanfordNlpLingTokensregexSequencePattern_State_(s);
}

- (EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *)copy__ {
  return new_EduStanfordNlpLingTokensregexSequencePattern_MultiNodePatternExpr_initWithEduStanfordNlpLingTokensregexMultiNodePattern_(multiNodePattern_);
}

- (jint)assignGroupIdsWithInt:(jint)start {
  return start;
}

- (void)updateBindingsWithEduStanfordNlpLingTokensregexSequencePattern_VarGroupBindings:(EduStanfordNlpLingTokensregexSequencePattern_VarGroupBindings *)bindings {
}

- (EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *)transformWithEduStanfordNlpLingTokensregexNodePatternTransformer:(id<EduStanfordNlpLingTokensregexNodePatternTransformer>)transformer {
  return new_EduStanfordNlpLingTokensregexSequencePattern_MultiNodePatternExpr_initWithEduStanfordNlpLingTokensregexMultiNodePattern_([((id<EduStanfordNlpLingTokensregexNodePatternTransformer>) nil_chk(transformer)) transformWithEduStanfordNlpLingTokensregexMultiNodePattern:multiNodePattern_]);
}

- (NSString *)description {
  return [((EduStanfordNlpLingTokensregexMultiNodePattern *) nil_chk(multiNodePattern_)) description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexSequencePattern_Frag;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexSequencePattern_PatternExpr;", 0x4, 1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 4, 5, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexSequencePattern_PatternExpr;", 0x4, 6, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 8, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpLingTokensregexMultiNodePattern:);
  methods[1].selector = @selector(build);
  methods[2].selector = @selector(copy__);
  methods[3].selector = @selector(assignGroupIdsWithInt:);
  methods[4].selector = @selector(updateBindingsWithEduStanfordNlpLingTokensregexSequencePattern_VarGroupBindings:);
  methods[5].selector = @selector(transformWithEduStanfordNlpLingTokensregexNodePatternTransformer:);
  methods[6].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "multiNodePattern_", "LEduStanfordNlpLingTokensregexMultiNodePattern;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpLingTokensregexMultiNodePattern;", "copy", "assignGroupIds", "I", "updateBindings", "LEduStanfordNlpLingTokensregexSequencePattern_VarGroupBindings;", "transform", "LEduStanfordNlpLingTokensregexNodePatternTransformer;", "toString", "LEduStanfordNlpLingTokensregexSequencePattern;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexSequencePattern_MultiNodePatternExpr = { "MultiNodePatternExpr", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, fields, 7, 0x9, 7, 1, 9, -1, -1, -1, -1 };
  return &_EduStanfordNlpLingTokensregexSequencePattern_MultiNodePatternExpr;
}

@end

void EduStanfordNlpLingTokensregexSequencePattern_MultiNodePatternExpr_initWithEduStanfordNlpLingTokensregexMultiNodePattern_(EduStanfordNlpLingTokensregexSequencePattern_MultiNodePatternExpr *self, EduStanfordNlpLingTokensregexMultiNodePattern *nodePattern) {
  EduStanfordNlpLingTokensregexSequencePattern_PatternExpr_init(self);
  self->multiNodePattern_ = nodePattern;
}

EduStanfordNlpLingTokensregexSequencePattern_MultiNodePatternExpr *new_EduStanfordNlpLingTokensregexSequencePattern_MultiNodePatternExpr_initWithEduStanfordNlpLingTokensregexMultiNodePattern_(EduStanfordNlpLingTokensregexMultiNodePattern *nodePattern) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequencePattern_MultiNodePatternExpr, initWithEduStanfordNlpLingTokensregexMultiNodePattern_, nodePattern)
}

EduStanfordNlpLingTokensregexSequencePattern_MultiNodePatternExpr *create_EduStanfordNlpLingTokensregexSequencePattern_MultiNodePatternExpr_initWithEduStanfordNlpLingTokensregexMultiNodePattern_(EduStanfordNlpLingTokensregexMultiNodePattern *nodePattern) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequencePattern_MultiNodePatternExpr, initWithEduStanfordNlpLingTokensregexMultiNodePattern_, nodePattern)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexSequencePattern_MultiNodePatternExpr)

@implementation EduStanfordNlpLingTokensregexSequencePattern_SpecialNodePatternExpr

- (instancetype)initWithNSString:(NSString *)name {
  EduStanfordNlpLingTokensregexSequencePattern_SpecialNodePatternExpr_initWithNSString_(self, name);
  return self;
}

- (instancetype)initWithNSString:(NSString *)name
   withEduStanfordNlpUtilFactory:(id<EduStanfordNlpUtilFactory>)stateFactory {
  EduStanfordNlpLingTokensregexSequencePattern_SpecialNodePatternExpr_initWithNSString_withEduStanfordNlpUtilFactory_(self, name, stateFactory);
  return self;
}

- (EduStanfordNlpLingTokensregexSequencePattern_Frag *)build {
  EduStanfordNlpLingTokensregexSequencePattern_State *s = [((id<EduStanfordNlpUtilFactory>) nil_chk(stateFactory_)) create];
  return new_EduStanfordNlpLingTokensregexSequencePattern_Frag_initWithEduStanfordNlpLingTokensregexSequencePattern_State_(s);
}

- (EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *)copy__ {
  return new_EduStanfordNlpLingTokensregexSequencePattern_SpecialNodePatternExpr_initWithNSString_withEduStanfordNlpUtilFactory_(name_, stateFactory_);
}

- (jint)assignGroupIdsWithInt:(jint)start {
  return start;
}

- (void)updateBindingsWithEduStanfordNlpLingTokensregexSequencePattern_VarGroupBindings:(EduStanfordNlpLingTokensregexSequencePattern_VarGroupBindings *)bindings {
}

- (EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *)transformWithEduStanfordNlpLingTokensregexNodePatternTransformer:(id<EduStanfordNlpLingTokensregexNodePatternTransformer>)transformer {
  return new_EduStanfordNlpLingTokensregexSequencePattern_SpecialNodePatternExpr_initWithNSString_withEduStanfordNlpUtilFactory_(name_, stateFactory_);
}

- (NSString *)description {
  return name_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, 2, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexSequencePattern_Frag;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexSequencePattern_PatternExpr;", 0x4, 3, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 6, 7, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexSequencePattern_PatternExpr;", 0x4, 8, 9, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 10, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(initWithNSString:withEduStanfordNlpUtilFactory:);
  methods[2].selector = @selector(build);
  methods[3].selector = @selector(copy__);
  methods[4].selector = @selector(assignGroupIdsWithInt:);
  methods[5].selector = @selector(updateBindingsWithEduStanfordNlpLingTokensregexSequencePattern_VarGroupBindings:);
  methods[6].selector = @selector(transformWithEduStanfordNlpLingTokensregexNodePatternTransformer:);
  methods[7].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "name_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "stateFactory_", "LEduStanfordNlpUtilFactory;", .constantValue.asLong = 0, 0x0, -1, -1, 11, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "LNSString;LEduStanfordNlpUtilFactory;", "(Ljava/lang/String;Ledu/stanford/nlp/util/Factory<Ledu/stanford/nlp/ling/tokensregex/SequencePattern$State;>;)V", "copy", "assignGroupIds", "I", "updateBindings", "LEduStanfordNlpLingTokensregexSequencePattern_VarGroupBindings;", "transform", "LEduStanfordNlpLingTokensregexNodePatternTransformer;", "toString", "Ledu/stanford/nlp/util/Factory<Ledu/stanford/nlp/ling/tokensregex/SequencePattern$State;>;", "LEduStanfordNlpLingTokensregexSequencePattern;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexSequencePattern_SpecialNodePatternExpr = { "SpecialNodePatternExpr", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, fields, 7, 0x9, 8, 2, 12, -1, -1, -1, -1 };
  return &_EduStanfordNlpLingTokensregexSequencePattern_SpecialNodePatternExpr;
}

@end

void EduStanfordNlpLingTokensregexSequencePattern_SpecialNodePatternExpr_initWithNSString_(EduStanfordNlpLingTokensregexSequencePattern_SpecialNodePatternExpr *self, NSString *name) {
  EduStanfordNlpLingTokensregexSequencePattern_PatternExpr_init(self);
  self->name_ = name;
}

EduStanfordNlpLingTokensregexSequencePattern_SpecialNodePatternExpr *new_EduStanfordNlpLingTokensregexSequencePattern_SpecialNodePatternExpr_initWithNSString_(NSString *name) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequencePattern_SpecialNodePatternExpr, initWithNSString_, name)
}

EduStanfordNlpLingTokensregexSequencePattern_SpecialNodePatternExpr *create_EduStanfordNlpLingTokensregexSequencePattern_SpecialNodePatternExpr_initWithNSString_(NSString *name) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequencePattern_SpecialNodePatternExpr, initWithNSString_, name)
}

void EduStanfordNlpLingTokensregexSequencePattern_SpecialNodePatternExpr_initWithNSString_withEduStanfordNlpUtilFactory_(EduStanfordNlpLingTokensregexSequencePattern_SpecialNodePatternExpr *self, NSString *name, id<EduStanfordNlpUtilFactory> stateFactory) {
  EduStanfordNlpLingTokensregexSequencePattern_PatternExpr_init(self);
  self->name_ = name;
  self->stateFactory_ = stateFactory;
}

EduStanfordNlpLingTokensregexSequencePattern_SpecialNodePatternExpr *new_EduStanfordNlpLingTokensregexSequencePattern_SpecialNodePatternExpr_initWithNSString_withEduStanfordNlpUtilFactory_(NSString *name, id<EduStanfordNlpUtilFactory> stateFactory) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequencePattern_SpecialNodePatternExpr, initWithNSString_withEduStanfordNlpUtilFactory_, name, stateFactory)
}

EduStanfordNlpLingTokensregexSequencePattern_SpecialNodePatternExpr *create_EduStanfordNlpLingTokensregexSequencePattern_SpecialNodePatternExpr_initWithNSString_withEduStanfordNlpUtilFactory_(NSString *name, id<EduStanfordNlpUtilFactory> stateFactory) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequencePattern_SpecialNodePatternExpr, initWithNSString_withEduStanfordNlpUtilFactory_, name, stateFactory)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexSequencePattern_SpecialNodePatternExpr)

@implementation EduStanfordNlpLingTokensregexSequencePattern_SequenceStartPatternExpr

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpLingTokensregexSequencePattern_SequenceStartPatternExpr_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (EduStanfordNlpLingTokensregexSequencePattern_State *)create {
  return new_EduStanfordNlpLingTokensregexSequencePattern_SeqStartState_init();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexSequencePattern_State;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(create);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LEduStanfordNlpLingTokensregexSequencePattern;", "Ledu/stanford/nlp/ling/tokensregex/SequencePattern$SpecialNodePatternExpr;Ledu/stanford/nlp/util/Factory<Ledu/stanford/nlp/ling/tokensregex/SequencePattern$State;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexSequencePattern_SequenceStartPatternExpr = { "SequenceStartPatternExpr", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, NULL, 7, 0x9, 2, 0, 0, -1, -1, 1, -1 };
  return &_EduStanfordNlpLingTokensregexSequencePattern_SequenceStartPatternExpr;
}

@end

void EduStanfordNlpLingTokensregexSequencePattern_SequenceStartPatternExpr_init(EduStanfordNlpLingTokensregexSequencePattern_SequenceStartPatternExpr *self) {
  EduStanfordNlpLingTokensregexSequencePattern_SpecialNodePatternExpr_initWithNSString_(self, @"SEQ_START");
  self->stateFactory_ = self;
}

EduStanfordNlpLingTokensregexSequencePattern_SequenceStartPatternExpr *new_EduStanfordNlpLingTokensregexSequencePattern_SequenceStartPatternExpr_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequencePattern_SequenceStartPatternExpr, init)
}

EduStanfordNlpLingTokensregexSequencePattern_SequenceStartPatternExpr *create_EduStanfordNlpLingTokensregexSequencePattern_SequenceStartPatternExpr_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequencePattern_SequenceStartPatternExpr, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexSequencePattern_SequenceStartPatternExpr)

@implementation EduStanfordNlpLingTokensregexSequencePattern_SequenceEndPatternExpr

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpLingTokensregexSequencePattern_SequenceEndPatternExpr_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (EduStanfordNlpLingTokensregexSequencePattern_State *)create {
  return new_EduStanfordNlpLingTokensregexSequencePattern_SeqEndState_init();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexSequencePattern_State;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(create);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LEduStanfordNlpLingTokensregexSequencePattern;", "Ledu/stanford/nlp/ling/tokensregex/SequencePattern$SpecialNodePatternExpr;Ledu/stanford/nlp/util/Factory<Ledu/stanford/nlp/ling/tokensregex/SequencePattern$State;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexSequencePattern_SequenceEndPatternExpr = { "SequenceEndPatternExpr", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, NULL, 7, 0x9, 2, 0, 0, -1, -1, 1, -1 };
  return &_EduStanfordNlpLingTokensregexSequencePattern_SequenceEndPatternExpr;
}

@end

void EduStanfordNlpLingTokensregexSequencePattern_SequenceEndPatternExpr_init(EduStanfordNlpLingTokensregexSequencePattern_SequenceEndPatternExpr *self) {
  EduStanfordNlpLingTokensregexSequencePattern_SpecialNodePatternExpr_initWithNSString_(self, @"SEQ_END");
  self->stateFactory_ = self;
}

EduStanfordNlpLingTokensregexSequencePattern_SequenceEndPatternExpr *new_EduStanfordNlpLingTokensregexSequencePattern_SequenceEndPatternExpr_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequencePattern_SequenceEndPatternExpr, init)
}

EduStanfordNlpLingTokensregexSequencePattern_SequenceEndPatternExpr *create_EduStanfordNlpLingTokensregexSequencePattern_SequenceEndPatternExpr_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequencePattern_SequenceEndPatternExpr, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexSequencePattern_SequenceEndPatternExpr)

@implementation EduStanfordNlpLingTokensregexSequencePattern_SequencePatternExpr

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)patterns {
  EduStanfordNlpLingTokensregexSequencePattern_SequencePatternExpr_initWithJavaUtilList_(self, patterns);
  return self;
}

- (instancetype)initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExprArray:(IOSObjectArray *)patterns {
  EduStanfordNlpLingTokensregexSequencePattern_SequencePatternExpr_initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExprArray_(self, patterns);
  return self;
}

- (EduStanfordNlpLingTokensregexSequencePattern_Frag *)build {
  EduStanfordNlpLingTokensregexSequencePattern_Frag *frag = nil;
  if ([((id<JavaUtilList>) nil_chk(patterns_)) size] > 0) {
    EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *first = [patterns_ getWithInt:0];
    frag = [((EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *) nil_chk(first)) build];
    for (jint i = 1; i < [patterns_ size]; i++) {
      EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *pattern = [patterns_ getWithInt:i];
      EduStanfordNlpLingTokensregexSequencePattern_Frag *f = [((EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *) nil_chk(pattern)) build];
      [((EduStanfordNlpLingTokensregexSequencePattern_Frag *) nil_chk(frag)) connectWithEduStanfordNlpLingTokensregexSequencePattern_Frag:f];
    }
  }
  return frag;
}

- (jint)assignGroupIdsWithInt:(jint)start {
  jint nextId = start;
  for (EduStanfordNlpLingTokensregexSequencePattern_PatternExpr * __strong pattern in nil_chk(patterns_)) {
    nextId = [((EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *) nil_chk(pattern)) assignGroupIdsWithInt:nextId];
  }
  return nextId;
}

- (void)updateBindingsWithEduStanfordNlpLingTokensregexSequencePattern_VarGroupBindings:(EduStanfordNlpLingTokensregexSequencePattern_VarGroupBindings *)bindings {
  for (EduStanfordNlpLingTokensregexSequencePattern_PatternExpr * __strong pattern in nil_chk(patterns_)) {
    [((EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *) nil_chk(pattern)) updateBindingsWithEduStanfordNlpLingTokensregexSequencePattern_VarGroupBindings:bindings];
  }
}

- (EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *)copy__ {
  id<JavaUtilList> newPatterns = new_JavaUtilArrayList_initWithInt_([((id<JavaUtilList>) nil_chk(patterns_)) size]);
  for (EduStanfordNlpLingTokensregexSequencePattern_PatternExpr * __strong p in patterns_) {
    [newPatterns addWithId:[((EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *) nil_chk(p)) copy__]];
  }
  return new_EduStanfordNlpLingTokensregexSequencePattern_SequencePatternExpr_initWithJavaUtilList_(newPatterns);
}

- (EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *)optimize {
  id<JavaUtilList> newPatterns = new_JavaUtilArrayList_initWithInt_([((id<JavaUtilList>) nil_chk(patterns_)) size]);
  for (EduStanfordNlpLingTokensregexSequencePattern_PatternExpr * __strong p in patterns_) {
    [newPatterns addWithId:[((EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *) nil_chk(p)) optimize]];
  }
  return new_EduStanfordNlpLingTokensregexSequencePattern_SequencePatternExpr_initWithJavaUtilList_(newPatterns);
}

- (EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *)transformWithEduStanfordNlpLingTokensregexNodePatternTransformer:(id<EduStanfordNlpLingTokensregexNodePatternTransformer>)transformer {
  id<JavaUtilList> newPatterns = new_JavaUtilArrayList_initWithInt_([((id<JavaUtilList>) nil_chk(patterns_)) size]);
  for (EduStanfordNlpLingTokensregexSequencePattern_PatternExpr * __strong p in patterns_) {
    [newPatterns addWithId:[((EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *) nil_chk(p)) transformWithEduStanfordNlpLingTokensregexNodePatternTransformer:transformer]];
  }
  return new_EduStanfordNlpLingTokensregexSequencePattern_SequencePatternExpr_initWithJavaUtilList_(newPatterns);
}

- (NSString *)description {
  return EduStanfordNlpUtilStringUtils_joinWithJavaLangIterable_withNSString_(patterns_, @" ");
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, NULL, 0x81, -1, 2, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexSequencePattern_Frag;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 5, 6, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexSequencePattern_PatternExpr;", 0x4, 7, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexSequencePattern_PatternExpr;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexSequencePattern_PatternExpr;", 0x4, 8, 9, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 10, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilList:);
  methods[1].selector = @selector(initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExprArray:);
  methods[2].selector = @selector(build);
  methods[3].selector = @selector(assignGroupIdsWithInt:);
  methods[4].selector = @selector(updateBindingsWithEduStanfordNlpLingTokensregexSequencePattern_VarGroupBindings:);
  methods[5].selector = @selector(copy__);
  methods[6].selector = @selector(optimize);
  methods[7].selector = @selector(transformWithEduStanfordNlpLingTokensregexNodePatternTransformer:);
  methods[8].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "patterns_", "LJavaUtilList;", .constantValue.asLong = 0, 0x10, -1, -1, 11, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilList;", "(Ljava/util/List<Ledu/stanford/nlp/ling/tokensregex/SequencePattern$PatternExpr;>;)V", "[LEduStanfordNlpLingTokensregexSequencePattern_PatternExpr;", "assignGroupIds", "I", "updateBindings", "LEduStanfordNlpLingTokensregexSequencePattern_VarGroupBindings;", "copy", "transform", "LEduStanfordNlpLingTokensregexNodePatternTransformer;", "toString", "Ljava/util/List<Ledu/stanford/nlp/ling/tokensregex/SequencePattern$PatternExpr;>;", "LEduStanfordNlpLingTokensregexSequencePattern;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexSequencePattern_SequencePatternExpr = { "SequencePatternExpr", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, fields, 7, 0x9, 9, 1, 12, -1, -1, -1, -1 };
  return &_EduStanfordNlpLingTokensregexSequencePattern_SequencePatternExpr;
}

@end

void EduStanfordNlpLingTokensregexSequencePattern_SequencePatternExpr_initWithJavaUtilList_(EduStanfordNlpLingTokensregexSequencePattern_SequencePatternExpr *self, id<JavaUtilList> patterns) {
  EduStanfordNlpLingTokensregexSequencePattern_PatternExpr_init(self);
  self->patterns_ = patterns;
}

EduStanfordNlpLingTokensregexSequencePattern_SequencePatternExpr *new_EduStanfordNlpLingTokensregexSequencePattern_SequencePatternExpr_initWithJavaUtilList_(id<JavaUtilList> patterns) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequencePattern_SequencePatternExpr, initWithJavaUtilList_, patterns)
}

EduStanfordNlpLingTokensregexSequencePattern_SequencePatternExpr *create_EduStanfordNlpLingTokensregexSequencePattern_SequencePatternExpr_initWithJavaUtilList_(id<JavaUtilList> patterns) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequencePattern_SequencePatternExpr, initWithJavaUtilList_, patterns)
}

void EduStanfordNlpLingTokensregexSequencePattern_SequencePatternExpr_initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExprArray_(EduStanfordNlpLingTokensregexSequencePattern_SequencePatternExpr *self, IOSObjectArray *patterns) {
  EduStanfordNlpLingTokensregexSequencePattern_PatternExpr_init(self);
  self->patterns_ = JavaUtilArrays_asListWithNSObjectArray_(patterns);
}

EduStanfordNlpLingTokensregexSequencePattern_SequencePatternExpr *new_EduStanfordNlpLingTokensregexSequencePattern_SequencePatternExpr_initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExprArray_(IOSObjectArray *patterns) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequencePattern_SequencePatternExpr, initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExprArray_, patterns)
}

EduStanfordNlpLingTokensregexSequencePattern_SequencePatternExpr *create_EduStanfordNlpLingTokensregexSequencePattern_SequencePatternExpr_initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExprArray_(IOSObjectArray *patterns) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequencePattern_SequencePatternExpr, initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExprArray_, patterns)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexSequencePattern_SequencePatternExpr)

@implementation EduStanfordNlpLingTokensregexSequencePattern_BackRefPatternExpr

- (instancetype)initWithEduStanfordNlpLingTokensregexSequencePattern_NodesMatchChecker:(id<EduStanfordNlpLingTokensregexSequencePattern_NodesMatchChecker>)matcher
                                                                               withInt:(jint)captureGroupId {
  EduStanfordNlpLingTokensregexSequencePattern_BackRefPatternExpr_initWithEduStanfordNlpLingTokensregexSequencePattern_NodesMatchChecker_withInt_(self, matcher, captureGroupId);
  return self;
}

- (EduStanfordNlpLingTokensregexSequencePattern_Frag *)build {
  EduStanfordNlpLingTokensregexSequencePattern_State *s = new_EduStanfordNlpLingTokensregexSequencePattern_BackRefState_initWithEduStanfordNlpLingTokensregexSequencePattern_NodesMatchChecker_withInt_(matcher_, captureGroupId_);
  return new_EduStanfordNlpLingTokensregexSequencePattern_Frag_initWithEduStanfordNlpLingTokensregexSequencePattern_State_(s);
}

- (jint)assignGroupIdsWithInt:(jint)start {
  return start;
}

- (void)updateBindingsWithEduStanfordNlpLingTokensregexSequencePattern_VarGroupBindings:(EduStanfordNlpLingTokensregexSequencePattern_VarGroupBindings *)bindings {
}

- (EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *)copy__ {
  return new_EduStanfordNlpLingTokensregexSequencePattern_BackRefPatternExpr_initWithEduStanfordNlpLingTokensregexSequencePattern_NodesMatchChecker_withInt_(matcher_, captureGroupId_);
}

- (EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *)transformWithEduStanfordNlpLingTokensregexNodePatternTransformer:(id<EduStanfordNlpLingTokensregexNodePatternTransformer>)transformer {
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"BackRefPatternExpr.transform not implemented yet!!! Please implement me!!!");
}

- (NSString *)description {
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  if (captureGroupId_ >= 0) {
    (void) [((JavaLangStringBuilder *) nil_chk([sb appendWithChar:'\\'])) appendWithInt:captureGroupId_];
  }
  else {
    (void) [sb appendWithChar:'\\'];
  }
  (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithChar:'{'])) appendWithId:matcher_])) appendWithChar:'}'];
  return [sb description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexSequencePattern_Frag;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 3, 4, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexSequencePattern_PatternExpr;", 0x4, 5, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexSequencePattern_PatternExpr;", 0x4, 6, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 8, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpLingTokensregexSequencePattern_NodesMatchChecker:withInt:);
  methods[1].selector = @selector(build);
  methods[2].selector = @selector(assignGroupIdsWithInt:);
  methods[3].selector = @selector(updateBindingsWithEduStanfordNlpLingTokensregexSequencePattern_VarGroupBindings:);
  methods[4].selector = @selector(copy__);
  methods[5].selector = @selector(transformWithEduStanfordNlpLingTokensregexNodePatternTransformer:);
  methods[6].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "matcher_", "LEduStanfordNlpLingTokensregexSequencePattern_NodesMatchChecker;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "captureGroupId_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpLingTokensregexSequencePattern_NodesMatchChecker;I", "assignGroupIds", "I", "updateBindings", "LEduStanfordNlpLingTokensregexSequencePattern_VarGroupBindings;", "copy", "transform", "LEduStanfordNlpLingTokensregexNodePatternTransformer;", "toString", "LEduStanfordNlpLingTokensregexSequencePattern;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexSequencePattern_BackRefPatternExpr = { "BackRefPatternExpr", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, fields, 7, 0x9, 7, 2, 9, -1, -1, -1, -1 };
  return &_EduStanfordNlpLingTokensregexSequencePattern_BackRefPatternExpr;
}

@end

void EduStanfordNlpLingTokensregexSequencePattern_BackRefPatternExpr_initWithEduStanfordNlpLingTokensregexSequencePattern_NodesMatchChecker_withInt_(EduStanfordNlpLingTokensregexSequencePattern_BackRefPatternExpr *self, id<EduStanfordNlpLingTokensregexSequencePattern_NodesMatchChecker> matcher, jint captureGroupId) {
  EduStanfordNlpLingTokensregexSequencePattern_PatternExpr_init(self);
  self->captureGroupId_ = -1;
  if (captureGroupId <= 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"Invalid captureGroupId=", captureGroupId));
  }
  self->captureGroupId_ = captureGroupId;
  self->matcher_ = matcher;
}

EduStanfordNlpLingTokensregexSequencePattern_BackRefPatternExpr *new_EduStanfordNlpLingTokensregexSequencePattern_BackRefPatternExpr_initWithEduStanfordNlpLingTokensregexSequencePattern_NodesMatchChecker_withInt_(id<EduStanfordNlpLingTokensregexSequencePattern_NodesMatchChecker> matcher, jint captureGroupId) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequencePattern_BackRefPatternExpr, initWithEduStanfordNlpLingTokensregexSequencePattern_NodesMatchChecker_withInt_, matcher, captureGroupId)
}

EduStanfordNlpLingTokensregexSequencePattern_BackRefPatternExpr *create_EduStanfordNlpLingTokensregexSequencePattern_BackRefPatternExpr_initWithEduStanfordNlpLingTokensregexSequencePattern_NodesMatchChecker_withInt_(id<EduStanfordNlpLingTokensregexSequencePattern_NodesMatchChecker> matcher, jint captureGroupId) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequencePattern_BackRefPatternExpr, initWithEduStanfordNlpLingTokensregexSequencePattern_NodesMatchChecker_withInt_, matcher, captureGroupId)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexSequencePattern_BackRefPatternExpr)

@implementation EduStanfordNlpLingTokensregexSequencePattern_ValuePatternExpr

- (instancetype)initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr:(EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *)expr
                                                                          withId:(id)value {
  EduStanfordNlpLingTokensregexSequencePattern_ValuePatternExpr_initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_withId_(self, expr, value);
  return self;
}

- (EduStanfordNlpLingTokensregexSequencePattern_Frag *)build {
  EduStanfordNlpLingTokensregexSequencePattern_Frag *frag = [((EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *) nil_chk(expr_)) build];
  [((EduStanfordNlpLingTokensregexSequencePattern_Frag *) nil_chk(frag)) connectWithEduStanfordNlpLingTokensregexSequencePattern_State:new_EduStanfordNlpLingTokensregexSequencePattern_ValueState_initWithId_(value_)];
  return frag;
}

- (jint)assignGroupIdsWithInt:(jint)start {
  return [((EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *) nil_chk(expr_)) assignGroupIdsWithInt:start];
}

- (EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *)copy__ {
  return new_EduStanfordNlpLingTokensregexSequencePattern_ValuePatternExpr_initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_withId_([((EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *) nil_chk(expr_)) copy__], value_);
}

- (EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *)optimize {
  return new_EduStanfordNlpLingTokensregexSequencePattern_ValuePatternExpr_initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_withId_([((EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *) nil_chk(expr_)) optimize], value_);
}

- (EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *)transformWithEduStanfordNlpLingTokensregexNodePatternTransformer:(id<EduStanfordNlpLingTokensregexNodePatternTransformer>)transformer {
  return new_EduStanfordNlpLingTokensregexSequencePattern_ValuePatternExpr_initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_withId_([((EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *) nil_chk(expr_)) transformWithEduStanfordNlpLingTokensregexNodePatternTransformer:transformer], value_);
}

- (void)updateBindingsWithEduStanfordNlpLingTokensregexSequencePattern_VarGroupBindings:(EduStanfordNlpLingTokensregexSequencePattern_VarGroupBindings *)bindings {
  [((EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *) nil_chk(expr_)) updateBindingsWithEduStanfordNlpLingTokensregexSequencePattern_VarGroupBindings:bindings];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexSequencePattern_Frag;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 1, 2, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexSequencePattern_PatternExpr;", 0x4, 3, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexSequencePattern_PatternExpr;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexSequencePattern_PatternExpr;", 0x4, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 6, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr:withId:);
  methods[1].selector = @selector(build);
  methods[2].selector = @selector(assignGroupIdsWithInt:);
  methods[3].selector = @selector(copy__);
  methods[4].selector = @selector(optimize);
  methods[5].selector = @selector(transformWithEduStanfordNlpLingTokensregexNodePatternTransformer:);
  methods[6].selector = @selector(updateBindingsWithEduStanfordNlpLingTokensregexSequencePattern_VarGroupBindings:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "expr_", "LEduStanfordNlpLingTokensregexSequencePattern_PatternExpr;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "value_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpLingTokensregexSequencePattern_PatternExpr;LNSObject;", "assignGroupIds", "I", "copy", "transform", "LEduStanfordNlpLingTokensregexNodePatternTransformer;", "updateBindings", "LEduStanfordNlpLingTokensregexSequencePattern_VarGroupBindings;", "LEduStanfordNlpLingTokensregexSequencePattern;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexSequencePattern_ValuePatternExpr = { "ValuePatternExpr", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, fields, 7, 0x9, 7, 2, 8, -1, -1, -1, -1 };
  return &_EduStanfordNlpLingTokensregexSequencePattern_ValuePatternExpr;
}

@end

void EduStanfordNlpLingTokensregexSequencePattern_ValuePatternExpr_initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_withId_(EduStanfordNlpLingTokensregexSequencePattern_ValuePatternExpr *self, EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *expr, id value) {
  EduStanfordNlpLingTokensregexSequencePattern_PatternExpr_init(self);
  self->expr_ = expr;
  self->value_ = value;
}

EduStanfordNlpLingTokensregexSequencePattern_ValuePatternExpr *new_EduStanfordNlpLingTokensregexSequencePattern_ValuePatternExpr_initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_withId_(EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *expr, id value) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequencePattern_ValuePatternExpr, initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_withId_, expr, value)
}

EduStanfordNlpLingTokensregexSequencePattern_ValuePatternExpr *create_EduStanfordNlpLingTokensregexSequencePattern_ValuePatternExpr_initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_withId_(EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *expr, id value) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequencePattern_ValuePatternExpr, initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_withId_, expr, value)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexSequencePattern_ValuePatternExpr)

@implementation EduStanfordNlpLingTokensregexSequencePattern_GroupPatternExpr

- (instancetype)initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr:(EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *)pattern {
  EduStanfordNlpLingTokensregexSequencePattern_GroupPatternExpr_initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_(self, pattern);
  return self;
}

- (instancetype)initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr:(EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *)pattern
                                                                     withBoolean:(jboolean)capture {
  EduStanfordNlpLingTokensregexSequencePattern_GroupPatternExpr_initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_withBoolean_(self, pattern, capture);
  return self;
}

- (instancetype)initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr:(EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *)pattern
                                                                    withNSString:(NSString *)varname {
  EduStanfordNlpLingTokensregexSequencePattern_GroupPatternExpr_initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_withNSString_(self, pattern, varname);
  return self;
}

- (instancetype)initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr:(EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *)pattern
                                                                     withBoolean:(jboolean)capture
                                                                         withInt:(jint)captureGroupId
                                                                    withNSString:(NSString *)varname {
  EduStanfordNlpLingTokensregexSequencePattern_GroupPatternExpr_initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_withBoolean_withInt_withNSString_(self, pattern, capture, captureGroupId, varname);
  return self;
}

- (EduStanfordNlpLingTokensregexSequencePattern_Frag *)build {
  EduStanfordNlpLingTokensregexSequencePattern_Frag *f = [((EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *) nil_chk(pattern_)) build];
  EduStanfordNlpLingTokensregexSequencePattern_Frag *frag = new_EduStanfordNlpLingTokensregexSequencePattern_Frag_initWithEduStanfordNlpLingTokensregexSequencePattern_State_withJavaUtilSet_(new_EduStanfordNlpLingTokensregexSequencePattern_GroupStartState_initWithInt_withEduStanfordNlpLingTokensregexSequencePattern_State_(captureGroupId_, ((EduStanfordNlpLingTokensregexSequencePattern_Frag *) nil_chk(f))->start_), f->out_);
  [frag connectWithEduStanfordNlpLingTokensregexSequencePattern_State:new_EduStanfordNlpLingTokensregexSequencePattern_GroupEndState_initWithInt_(captureGroupId_)];
  return frag;
}

- (jint)assignGroupIdsWithInt:(jint)start {
  jint nextId = start;
  if (capture_) {
    captureGroupId_ = nextId;
    nextId++;
  }
  return [((EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *) nil_chk(pattern_)) assignGroupIdsWithInt:nextId];
}

- (void)updateBindingsWithEduStanfordNlpLingTokensregexSequencePattern_VarGroupBindings:(EduStanfordNlpLingTokensregexSequencePattern_VarGroupBindings *)bindings {
  if (varname_ != nil) {
    [((EduStanfordNlpLingTokensregexSequencePattern_VarGroupBindings *) nil_chk(bindings)) setWithInt:captureGroupId_ withNSString:varname_];
  }
  [((EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *) nil_chk(pattern_)) updateBindingsWithEduStanfordNlpLingTokensregexSequencePattern_VarGroupBindings:bindings];
}

- (EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *)copy__ {
  return new_EduStanfordNlpLingTokensregexSequencePattern_GroupPatternExpr_initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_withBoolean_withInt_withNSString_([((EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *) nil_chk(pattern_)) copy__], capture_, captureGroupId_, varname_);
}

- (EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *)optimize {
  return new_EduStanfordNlpLingTokensregexSequencePattern_GroupPatternExpr_initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_withBoolean_withInt_withNSString_([((EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *) nil_chk(pattern_)) optimize], capture_, captureGroupId_, varname_);
}

- (EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *)transformWithEduStanfordNlpLingTokensregexNodePatternTransformer:(id<EduStanfordNlpLingTokensregexNodePatternTransformer>)transformer {
  return new_EduStanfordNlpLingTokensregexSequencePattern_GroupPatternExpr_initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_withBoolean_withInt_withNSString_([((EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *) nil_chk(pattern_)) transformWithEduStanfordNlpLingTokensregexNodePatternTransformer:transformer], capture_, captureGroupId_, varname_);
}

- (NSString *)description {
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  (void) [sb appendWithChar:'('];
  if (!capture_) {
    (void) [sb appendWithNSString:@"?: "];
  }
  else if (varname_ != nil) {
    (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithChar:'?'])) appendWithNSString:varname_])) appendWithChar:' '];
  }
  (void) [sb appendWithId:pattern_];
  (void) [sb appendWithChar:')'];
  return [sb description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 3, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexSequencePattern_Frag;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 6, 7, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexSequencePattern_PatternExpr;", 0x4, 8, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexSequencePattern_PatternExpr;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexSequencePattern_PatternExpr;", 0x4, 9, 10, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 11, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr:);
  methods[1].selector = @selector(initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr:withBoolean:);
  methods[2].selector = @selector(initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr:withNSString:);
  methods[3].selector = @selector(initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr:withBoolean:withInt:withNSString:);
  methods[4].selector = @selector(build);
  methods[5].selector = @selector(assignGroupIdsWithInt:);
  methods[6].selector = @selector(updateBindingsWithEduStanfordNlpLingTokensregexSequencePattern_VarGroupBindings:);
  methods[7].selector = @selector(copy__);
  methods[8].selector = @selector(optimize);
  methods[9].selector = @selector(transformWithEduStanfordNlpLingTokensregexNodePatternTransformer:);
  methods[10].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "pattern_", "LEduStanfordNlpLingTokensregexSequencePattern_PatternExpr;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "capture_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "captureGroupId_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "varname_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpLingTokensregexSequencePattern_PatternExpr;", "LEduStanfordNlpLingTokensregexSequencePattern_PatternExpr;Z", "LEduStanfordNlpLingTokensregexSequencePattern_PatternExpr;LNSString;", "LEduStanfordNlpLingTokensregexSequencePattern_PatternExpr;ZILNSString;", "assignGroupIds", "I", "updateBindings", "LEduStanfordNlpLingTokensregexSequencePattern_VarGroupBindings;", "copy", "transform", "LEduStanfordNlpLingTokensregexNodePatternTransformer;", "toString", "LEduStanfordNlpLingTokensregexSequencePattern;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexSequencePattern_GroupPatternExpr = { "GroupPatternExpr", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, fields, 7, 0x9, 11, 4, 12, -1, -1, -1, -1 };
  return &_EduStanfordNlpLingTokensregexSequencePattern_GroupPatternExpr;
}

@end

void EduStanfordNlpLingTokensregexSequencePattern_GroupPatternExpr_initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_(EduStanfordNlpLingTokensregexSequencePattern_GroupPatternExpr *self, EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *pattern) {
  EduStanfordNlpLingTokensregexSequencePattern_GroupPatternExpr_initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_withBoolean_(self, pattern, true);
}

EduStanfordNlpLingTokensregexSequencePattern_GroupPatternExpr *new_EduStanfordNlpLingTokensregexSequencePattern_GroupPatternExpr_initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_(EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *pattern) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequencePattern_GroupPatternExpr, initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_, pattern)
}

EduStanfordNlpLingTokensregexSequencePattern_GroupPatternExpr *create_EduStanfordNlpLingTokensregexSequencePattern_GroupPatternExpr_initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_(EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *pattern) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequencePattern_GroupPatternExpr, initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_, pattern)
}

void EduStanfordNlpLingTokensregexSequencePattern_GroupPatternExpr_initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_withBoolean_(EduStanfordNlpLingTokensregexSequencePattern_GroupPatternExpr *self, EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *pattern, jboolean capture) {
  EduStanfordNlpLingTokensregexSequencePattern_GroupPatternExpr_initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_withBoolean_withInt_withNSString_(self, pattern, capture, -1, nil);
}

EduStanfordNlpLingTokensregexSequencePattern_GroupPatternExpr *new_EduStanfordNlpLingTokensregexSequencePattern_GroupPatternExpr_initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_withBoolean_(EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *pattern, jboolean capture) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequencePattern_GroupPatternExpr, initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_withBoolean_, pattern, capture)
}

EduStanfordNlpLingTokensregexSequencePattern_GroupPatternExpr *create_EduStanfordNlpLingTokensregexSequencePattern_GroupPatternExpr_initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_withBoolean_(EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *pattern, jboolean capture) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequencePattern_GroupPatternExpr, initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_withBoolean_, pattern, capture)
}

void EduStanfordNlpLingTokensregexSequencePattern_GroupPatternExpr_initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_withNSString_(EduStanfordNlpLingTokensregexSequencePattern_GroupPatternExpr *self, EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *pattern, NSString *varname) {
  EduStanfordNlpLingTokensregexSequencePattern_GroupPatternExpr_initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_withBoolean_withInt_withNSString_(self, pattern, true, -1, varname);
}

EduStanfordNlpLingTokensregexSequencePattern_GroupPatternExpr *new_EduStanfordNlpLingTokensregexSequencePattern_GroupPatternExpr_initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_withNSString_(EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *pattern, NSString *varname) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequencePattern_GroupPatternExpr, initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_withNSString_, pattern, varname)
}

EduStanfordNlpLingTokensregexSequencePattern_GroupPatternExpr *create_EduStanfordNlpLingTokensregexSequencePattern_GroupPatternExpr_initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_withNSString_(EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *pattern, NSString *varname) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequencePattern_GroupPatternExpr, initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_withNSString_, pattern, varname)
}

void EduStanfordNlpLingTokensregexSequencePattern_GroupPatternExpr_initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_withBoolean_withInt_withNSString_(EduStanfordNlpLingTokensregexSequencePattern_GroupPatternExpr *self, EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *pattern, jboolean capture, jint captureGroupId, NSString *varname) {
  EduStanfordNlpLingTokensregexSequencePattern_PatternExpr_init(self);
  self->pattern_ = pattern;
  self->capture_ = capture;
  self->captureGroupId_ = captureGroupId;
  self->varname_ = varname;
}

EduStanfordNlpLingTokensregexSequencePattern_GroupPatternExpr *new_EduStanfordNlpLingTokensregexSequencePattern_GroupPatternExpr_initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_withBoolean_withInt_withNSString_(EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *pattern, jboolean capture, jint captureGroupId, NSString *varname) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequencePattern_GroupPatternExpr, initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_withBoolean_withInt_withNSString_, pattern, capture, captureGroupId, varname)
}

EduStanfordNlpLingTokensregexSequencePattern_GroupPatternExpr *create_EduStanfordNlpLingTokensregexSequencePattern_GroupPatternExpr_initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_withBoolean_withInt_withNSString_(EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *pattern, jboolean capture, jint captureGroupId, NSString *varname) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequencePattern_GroupPatternExpr, initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_withBoolean_withInt_withNSString_, pattern, capture, captureGroupId, varname)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexSequencePattern_GroupPatternExpr)

@implementation EduStanfordNlpLingTokensregexSequencePattern_RepeatPatternExpr

- (instancetype)initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr:(EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *)pattern
                                                                         withInt:(jint)minMatch
                                                                         withInt:(jint)maxMatch {
  EduStanfordNlpLingTokensregexSequencePattern_RepeatPatternExpr_initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_withInt_withInt_(self, pattern, minMatch, maxMatch);
  return self;
}

- (instancetype)initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr:(EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *)pattern
                                                                         withInt:(jint)minMatch
                                                                         withInt:(jint)maxMatch
                                                                     withBoolean:(jboolean)greedy {
  EduStanfordNlpLingTokensregexSequencePattern_RepeatPatternExpr_initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_withInt_withInt_withBoolean_(self, pattern, minMatch, maxMatch, greedy);
  return self;
}

- (EduStanfordNlpLingTokensregexSequencePattern_Frag *)build {
  EduStanfordNlpLingTokensregexSequencePattern_Frag *f = [((EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *) nil_chk(pattern_)) build];
  if (minMatch_ == 1 && maxMatch_ == 1) {
    return f;
  }
  else if (minMatch_ <= 5 && maxMatch_ <= 5 && greedyMatch_) {
    if (minMatch_ > 0) {
      for (jint i = 0; i < minMatch_ - 1; i++) {
        EduStanfordNlpLingTokensregexSequencePattern_Frag *f2 = [pattern_ build];
        [((EduStanfordNlpLingTokensregexSequencePattern_Frag *) nil_chk(f)) connectWithEduStanfordNlpLingTokensregexSequencePattern_Frag:f2];
      }
    }
    else {
      f = new_EduStanfordNlpLingTokensregexSequencePattern_Frag_initWithEduStanfordNlpLingTokensregexSequencePattern_State_(new_EduStanfordNlpLingTokensregexSequencePattern_State_init());
    }
    if (maxMatch_ < 0) {
      id<JavaUtilSet> curOut = ((EduStanfordNlpLingTokensregexSequencePattern_Frag *) nil_chk(f))->out_;
      EduStanfordNlpLingTokensregexSequencePattern_Frag *f2 = [pattern_ build];
      [((EduStanfordNlpLingTokensregexSequencePattern_Frag *) nil_chk(f2)) connectWithEduStanfordNlpLingTokensregexSequencePattern_Frag:f2];
      [f connectWithEduStanfordNlpLingTokensregexSequencePattern_Frag:f2];
      [f addWithJavaUtilCollection:curOut];
    }
    else {
      for (jint i = minMatch_; i < maxMatch_; i++) {
        id<JavaUtilSet> curOut = ((EduStanfordNlpLingTokensregexSequencePattern_Frag *) nil_chk(f))->out_;
        EduStanfordNlpLingTokensregexSequencePattern_Frag *f2 = [pattern_ build];
        [f connectWithEduStanfordNlpLingTokensregexSequencePattern_Frag:f2];
        [f addWithJavaUtilCollection:curOut];
      }
    }
    if (minMatch_ == 0) {
      [((EduStanfordNlpLingTokensregexSequencePattern_State *) nil_chk(((EduStanfordNlpLingTokensregexSequencePattern_Frag *) nil_chk(f))->start_)) markOptionalWithBoolean:true];
    }
    return f;
  }
  else {
    EduStanfordNlpLingTokensregexSequencePattern_State *s = new_EduStanfordNlpLingTokensregexSequencePattern_RepeatState_initWithEduStanfordNlpLingTokensregexSequencePattern_State_withInt_withInt_withBoolean_(((EduStanfordNlpLingTokensregexSequencePattern_Frag *) nil_chk(f))->start_, minMatch_, maxMatch_, greedyMatch_);
    [f connectWithEduStanfordNlpLingTokensregexSequencePattern_State:s];
    return new_EduStanfordNlpLingTokensregexSequencePattern_Frag_initWithEduStanfordNlpLingTokensregexSequencePattern_State_(s);
  }
}

- (jint)assignGroupIdsWithInt:(jint)start {
  return [((EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *) nil_chk(pattern_)) assignGroupIdsWithInt:start];
}

- (void)updateBindingsWithEduStanfordNlpLingTokensregexSequencePattern_VarGroupBindings:(EduStanfordNlpLingTokensregexSequencePattern_VarGroupBindings *)bindings {
  [((EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *) nil_chk(pattern_)) updateBindingsWithEduStanfordNlpLingTokensregexSequencePattern_VarGroupBindings:bindings];
}

- (EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *)copy__ {
  return new_EduStanfordNlpLingTokensregexSequencePattern_RepeatPatternExpr_initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_withInt_withInt_withBoolean_([((EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *) nil_chk(pattern_)) copy__], minMatch_, maxMatch_, greedyMatch_);
}

- (EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *)optimize {
  return new_EduStanfordNlpLingTokensregexSequencePattern_RepeatPatternExpr_initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_withInt_withInt_withBoolean_([((EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *) nil_chk(pattern_)) optimize], minMatch_, maxMatch_, greedyMatch_);
}

- (EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *)transformWithEduStanfordNlpLingTokensregexNodePatternTransformer:(id<EduStanfordNlpLingTokensregexNodePatternTransformer>)transformer {
  return new_EduStanfordNlpLingTokensregexSequencePattern_RepeatPatternExpr_initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_withInt_withInt_withBoolean_([((EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *) nil_chk(pattern_)) transformWithEduStanfordNlpLingTokensregexNodePatternTransformer:transformer], minMatch_, maxMatch_, greedyMatch_);
}

- (NSString *)description {
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  (void) [sb appendWithId:pattern_];
  (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithChar:'{'])) appendWithInt:minMatch_])) appendWithChar:','])) appendWithInt:maxMatch_])) appendWithChar:'}'];
  if (!greedyMatch_) {
    (void) [sb appendWithChar:'?'];
  }
  return [sb description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexSequencePattern_Frag;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 4, 5, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexSequencePattern_PatternExpr;", 0x4, 6, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexSequencePattern_PatternExpr;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexSequencePattern_PatternExpr;", 0x4, 7, 8, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 9, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr:withInt:withInt:);
  methods[1].selector = @selector(initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr:withInt:withInt:withBoolean:);
  methods[2].selector = @selector(build);
  methods[3].selector = @selector(assignGroupIdsWithInt:);
  methods[4].selector = @selector(updateBindingsWithEduStanfordNlpLingTokensregexSequencePattern_VarGroupBindings:);
  methods[5].selector = @selector(copy__);
  methods[6].selector = @selector(optimize);
  methods[7].selector = @selector(transformWithEduStanfordNlpLingTokensregexNodePatternTransformer:);
  methods[8].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "pattern_", "LEduStanfordNlpLingTokensregexSequencePattern_PatternExpr;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "minMatch_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "maxMatch_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "greedyMatch_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpLingTokensregexSequencePattern_PatternExpr;II", "LEduStanfordNlpLingTokensregexSequencePattern_PatternExpr;IIZ", "assignGroupIds", "I", "updateBindings", "LEduStanfordNlpLingTokensregexSequencePattern_VarGroupBindings;", "copy", "transform", "LEduStanfordNlpLingTokensregexNodePatternTransformer;", "toString", "LEduStanfordNlpLingTokensregexSequencePattern;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexSequencePattern_RepeatPatternExpr = { "RepeatPatternExpr", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, fields, 7, 0x9, 9, 4, 10, -1, -1, -1, -1 };
  return &_EduStanfordNlpLingTokensregexSequencePattern_RepeatPatternExpr;
}

@end

void EduStanfordNlpLingTokensregexSequencePattern_RepeatPatternExpr_initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_withInt_withInt_(EduStanfordNlpLingTokensregexSequencePattern_RepeatPatternExpr *self, EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *pattern, jint minMatch, jint maxMatch) {
  EduStanfordNlpLingTokensregexSequencePattern_RepeatPatternExpr_initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_withInt_withInt_withBoolean_(self, pattern, minMatch, maxMatch, true);
}

EduStanfordNlpLingTokensregexSequencePattern_RepeatPatternExpr *new_EduStanfordNlpLingTokensregexSequencePattern_RepeatPatternExpr_initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_withInt_withInt_(EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *pattern, jint minMatch, jint maxMatch) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequencePattern_RepeatPatternExpr, initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_withInt_withInt_, pattern, minMatch, maxMatch)
}

EduStanfordNlpLingTokensregexSequencePattern_RepeatPatternExpr *create_EduStanfordNlpLingTokensregexSequencePattern_RepeatPatternExpr_initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_withInt_withInt_(EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *pattern, jint minMatch, jint maxMatch) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequencePattern_RepeatPatternExpr, initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_withInt_withInt_, pattern, minMatch, maxMatch)
}

void EduStanfordNlpLingTokensregexSequencePattern_RepeatPatternExpr_initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_withInt_withInt_withBoolean_(EduStanfordNlpLingTokensregexSequencePattern_RepeatPatternExpr *self, EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *pattern, jint minMatch, jint maxMatch, jboolean greedy) {
  EduStanfordNlpLingTokensregexSequencePattern_PatternExpr_init(self);
  if (minMatch < 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"Invalid minMatch=", minMatch));
  }
  if (maxMatch >= 0 && minMatch > maxMatch) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$I", @"Invalid minMatch=", minMatch, @", maxMatch=", maxMatch));
  }
  self->pattern_ = pattern;
  self->minMatch_ = minMatch;
  self->maxMatch_ = maxMatch;
  self->greedyMatch_ = greedy;
}

EduStanfordNlpLingTokensregexSequencePattern_RepeatPatternExpr *new_EduStanfordNlpLingTokensregexSequencePattern_RepeatPatternExpr_initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_withInt_withInt_withBoolean_(EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *pattern, jint minMatch, jint maxMatch, jboolean greedy) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequencePattern_RepeatPatternExpr, initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_withInt_withInt_withBoolean_, pattern, minMatch, maxMatch, greedy)
}

EduStanfordNlpLingTokensregexSequencePattern_RepeatPatternExpr *create_EduStanfordNlpLingTokensregexSequencePattern_RepeatPatternExpr_initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_withInt_withInt_withBoolean_(EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *pattern, jint minMatch, jint maxMatch, jboolean greedy) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequencePattern_RepeatPatternExpr, initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_withInt_withInt_withBoolean_, pattern, minMatch, maxMatch, greedy)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexSequencePattern_RepeatPatternExpr)

@implementation EduStanfordNlpLingTokensregexSequencePattern_OrPatternExpr

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)patterns {
  EduStanfordNlpLingTokensregexSequencePattern_OrPatternExpr_initWithJavaUtilList_(self, patterns);
  return self;
}

- (instancetype)initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExprArray:(IOSObjectArray *)patterns {
  EduStanfordNlpLingTokensregexSequencePattern_OrPatternExpr_initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExprArray_(self, patterns);
  return self;
}

- (EduStanfordNlpLingTokensregexSequencePattern_Frag *)build {
  EduStanfordNlpLingTokensregexSequencePattern_Frag *frag = new_EduStanfordNlpLingTokensregexSequencePattern_Frag_init();
  frag->start_ = new_EduStanfordNlpLingTokensregexSequencePattern_State_init();
  for (EduStanfordNlpLingTokensregexSequencePattern_PatternExpr * __strong pattern in nil_chk(patterns_)) {
    EduStanfordNlpLingTokensregexSequencePattern_Frag *f = [((EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *) nil_chk(pattern)) build];
    if ([pattern value] != nil) {
      [((EduStanfordNlpLingTokensregexSequencePattern_Frag *) nil_chk(f)) connectWithEduStanfordNlpLingTokensregexSequencePattern_State:new_EduStanfordNlpLingTokensregexSequencePattern_ValueState_initWithId_([pattern value])];
    }
    [((EduStanfordNlpLingTokensregexSequencePattern_State *) nil_chk(frag->start_)) addWithEduStanfordNlpLingTokensregexSequencePattern_State:((EduStanfordNlpLingTokensregexSequencePattern_Frag *) nil_chk(f))->start_];
    [frag addWithJavaUtilCollection:f->out_];
  }
  [frag->start_ markOptionalWithBoolean:true];
  return frag;
}

- (jint)assignGroupIdsWithInt:(jint)start {
  jint nextId = start;
  for (EduStanfordNlpLingTokensregexSequencePattern_PatternExpr * __strong pattern in nil_chk(patterns_)) {
    nextId = [((EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *) nil_chk(pattern)) assignGroupIdsWithInt:nextId];
  }
  return nextId;
}

- (void)updateBindingsWithEduStanfordNlpLingTokensregexSequencePattern_VarGroupBindings:(EduStanfordNlpLingTokensregexSequencePattern_VarGroupBindings *)bindings {
  for (EduStanfordNlpLingTokensregexSequencePattern_PatternExpr * __strong pattern in nil_chk(patterns_)) {
    [((EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *) nil_chk(pattern)) updateBindingsWithEduStanfordNlpLingTokensregexSequencePattern_VarGroupBindings:bindings];
  }
}

- (EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *)copy__ {
  id<JavaUtilList> newPatterns = new_JavaUtilArrayList_initWithInt_([((id<JavaUtilList>) nil_chk(patterns_)) size]);
  for (EduStanfordNlpLingTokensregexSequencePattern_PatternExpr * __strong p in patterns_) {
    [newPatterns addWithId:[((EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *) nil_chk(p)) copy__]];
  }
  return new_EduStanfordNlpLingTokensregexSequencePattern_OrPatternExpr_initWithJavaUtilList_(newPatterns);
}

- (EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *)transformWithEduStanfordNlpLingTokensregexNodePatternTransformer:(id<EduStanfordNlpLingTokensregexNodePatternTransformer>)transformer {
  id<JavaUtilList> newPatterns = new_JavaUtilArrayList_initWithInt_([((id<JavaUtilList>) nil_chk(patterns_)) size]);
  for (EduStanfordNlpLingTokensregexSequencePattern_PatternExpr * __strong p in patterns_) {
    [newPatterns addWithId:[((EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *) nil_chk(p)) transformWithEduStanfordNlpLingTokensregexNodePatternTransformer:transformer]];
  }
  return new_EduStanfordNlpLingTokensregexSequencePattern_OrPatternExpr_initWithJavaUtilList_(newPatterns);
}

- (NSString *)description {
  return EduStanfordNlpUtilStringUtils_joinWithJavaLangIterable_withNSString_(patterns_, @" | ");
}

- (EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *)optimize {
  if ([((id<JavaUtilList>) nil_chk(patterns_)) size] <= EduStanfordNlpLingTokensregexSequencePattern_OrPatternExpr_OPTIMIZE_MIN_SIZE) {
    id<JavaUtilList> newPatterns = new_JavaUtilArrayList_initWithInt_([patterns_ size]);
    for (EduStanfordNlpLingTokensregexSequencePattern_PatternExpr * __strong p in patterns_) {
      [newPatterns addWithId:[((EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *) nil_chk(p)) optimize]];
    }
    return new_EduStanfordNlpLingTokensregexSequencePattern_OrPatternExpr_initWithJavaUtilList_(newPatterns);
  }
  else {
    return EduStanfordNlpLingTokensregexSequencePattern_OrPatternExpr_optimizeOr(self);
  }
}

- (EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *)optimizeOr {
  return EduStanfordNlpLingTokensregexSequencePattern_OrPatternExpr_optimizeOr(self);
}

- (EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *)optimizeOrStringSeqs {
  return EduStanfordNlpLingTokensregexSequencePattern_OrPatternExpr_optimizeOrStringSeqs(self);
}

+ (EduStanfordNlpUtilPair *)_getStringAnnotation_WithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr:(EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *)p {
  return EduStanfordNlpLingTokensregexSequencePattern_OrPatternExpr__getStringAnnotation_WithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_(p);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, NULL, 0x81, -1, 2, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexSequencePattern_Frag;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 5, 6, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexSequencePattern_PatternExpr;", 0x4, 7, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexSequencePattern_PatternExpr;", 0x4, 8, 9, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 10, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexSequencePattern_PatternExpr;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexSequencePattern_PatternExpr;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexSequencePattern_PatternExpr;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpUtilPair;", 0xa, 11, 12, -1, 13, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilList:);
  methods[1].selector = @selector(initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExprArray:);
  methods[2].selector = @selector(build);
  methods[3].selector = @selector(assignGroupIdsWithInt:);
  methods[4].selector = @selector(updateBindingsWithEduStanfordNlpLingTokensregexSequencePattern_VarGroupBindings:);
  methods[5].selector = @selector(copy__);
  methods[6].selector = @selector(transformWithEduStanfordNlpLingTokensregexNodePatternTransformer:);
  methods[7].selector = @selector(description);
  methods[8].selector = @selector(optimize);
  methods[9].selector = @selector(optimizeOr);
  methods[10].selector = @selector(optimizeOrStringSeqs);
  methods[11].selector = @selector(_getStringAnnotation_WithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "patterns_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 14, -1 },
    { "OPTIMIZE_MIN_SIZE", "I", .constantValue.asInt = EduStanfordNlpLingTokensregexSequencePattern_OrPatternExpr_OPTIMIZE_MIN_SIZE, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilList;", "(Ljava/util/List<Ledu/stanford/nlp/ling/tokensregex/SequencePattern$PatternExpr;>;)V", "[LEduStanfordNlpLingTokensregexSequencePattern_PatternExpr;", "assignGroupIds", "I", "updateBindings", "LEduStanfordNlpLingTokensregexSequencePattern_VarGroupBindings;", "copy", "transform", "LEduStanfordNlpLingTokensregexNodePatternTransformer;", "toString", "_getStringAnnotation_", "LEduStanfordNlpLingTokensregexSequencePattern_PatternExpr;", "(Ledu/stanford/nlp/ling/tokensregex/SequencePattern$PatternExpr;)Ledu/stanford/nlp/util/Pair<Ljava/lang/Class;Ledu/stanford/nlp/ling/tokensregex/ComplexNodePattern$StringAnnotationPattern;>;", "Ljava/util/List<Ledu/stanford/nlp/ling/tokensregex/SequencePattern$PatternExpr;>;", "LEduStanfordNlpLingTokensregexSequencePattern;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexSequencePattern_OrPatternExpr = { "OrPatternExpr", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, fields, 7, 0x9, 12, 2, 15, -1, -1, -1, -1 };
  return &_EduStanfordNlpLingTokensregexSequencePattern_OrPatternExpr;
}

@end

void EduStanfordNlpLingTokensregexSequencePattern_OrPatternExpr_initWithJavaUtilList_(EduStanfordNlpLingTokensregexSequencePattern_OrPatternExpr *self, id<JavaUtilList> patterns) {
  EduStanfordNlpLingTokensregexSequencePattern_PatternExpr_init(self);
  self->patterns_ = patterns;
}

EduStanfordNlpLingTokensregexSequencePattern_OrPatternExpr *new_EduStanfordNlpLingTokensregexSequencePattern_OrPatternExpr_initWithJavaUtilList_(id<JavaUtilList> patterns) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequencePattern_OrPatternExpr, initWithJavaUtilList_, patterns)
}

EduStanfordNlpLingTokensregexSequencePattern_OrPatternExpr *create_EduStanfordNlpLingTokensregexSequencePattern_OrPatternExpr_initWithJavaUtilList_(id<JavaUtilList> patterns) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequencePattern_OrPatternExpr, initWithJavaUtilList_, patterns)
}

void EduStanfordNlpLingTokensregexSequencePattern_OrPatternExpr_initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExprArray_(EduStanfordNlpLingTokensregexSequencePattern_OrPatternExpr *self, IOSObjectArray *patterns) {
  EduStanfordNlpLingTokensregexSequencePattern_PatternExpr_init(self);
  self->patterns_ = JavaUtilArrays_asListWithNSObjectArray_(patterns);
}

EduStanfordNlpLingTokensregexSequencePattern_OrPatternExpr *new_EduStanfordNlpLingTokensregexSequencePattern_OrPatternExpr_initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExprArray_(IOSObjectArray *patterns) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequencePattern_OrPatternExpr, initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExprArray_, patterns)
}

EduStanfordNlpLingTokensregexSequencePattern_OrPatternExpr *create_EduStanfordNlpLingTokensregexSequencePattern_OrPatternExpr_initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExprArray_(IOSObjectArray *patterns) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequencePattern_OrPatternExpr, initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExprArray_, patterns)
}

EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *EduStanfordNlpLingTokensregexSequencePattern_OrPatternExpr_optimizeOr(EduStanfordNlpLingTokensregexSequencePattern_OrPatternExpr *self) {
  EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *optimizedStringSeqs = EduStanfordNlpLingTokensregexSequencePattern_OrPatternExpr_optimizeOrStringSeqs(self);
  return optimizedStringSeqs;
}

EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *EduStanfordNlpLingTokensregexSequencePattern_OrPatternExpr_optimizeOrStringSeqs(EduStanfordNlpLingTokensregexSequencePattern_OrPatternExpr *self) {
  id<JavaUtilList> opts = new_JavaUtilArrayList_initWithInt_([((id<JavaUtilList>) nil_chk(self->patterns_)) size]);
  id<JavaUtilMap> stringPatterns = new_JavaUtilHashMap_init();
  id<JavaUtilMap> stringSeqPatterns = new_JavaUtilHashMap_init();
  for (EduStanfordNlpLingTokensregexSequencePattern_PatternExpr * __strong p in self->patterns_) {
    EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *opt = [((EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *) nil_chk(p)) optimize];
    [opts addWithId:opt];
    if ([opt isKindOfClass:[EduStanfordNlpLingTokensregexSequencePattern_NodePatternExpr class]]) {
      EduStanfordNlpUtilPair *pair = EduStanfordNlpLingTokensregexSequencePattern_OrPatternExpr__getStringAnnotation_WithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_(opt);
      if (pair != nil) {
        JavaLangBoolean *ignoreCase = JavaLangBoolean_valueOfWithBoolean_([((EduStanfordNlpLingTokensregexComplexNodePattern_StringAnnotationPattern *) nil_chk(pair->second_)) ignoreCase]);
        NSString *target = ((EduStanfordNlpLingTokensregexComplexNodePattern_StringAnnotationPattern *) nil_chk(pair->second_))->target_;
        EduStanfordNlpUtilPair *key = EduStanfordNlpUtilPair_makePairWithId_withId_(pair->first_, ignoreCase);
        EduStanfordNlpUtilPair *saved = [stringPatterns getWithId:key];
        if (saved == nil) {
          saved = new_EduStanfordNlpUtilPair_initWithId_withId_(new_JavaUtilArrayList_init(), new_JavaUtilHashSet_init());
          (void) [stringPatterns putWithId:key withId:saved];
        }
        [((id<JavaUtilCollection>) nil_chk(saved->first_)) addWithId:opt];
        [((id<JavaUtilSet>) nil_chk(saved->second_)) addWithId:target];
      }
    }
    else if ([opt isKindOfClass:[EduStanfordNlpLingTokensregexSequencePattern_SequencePatternExpr class]]) {
      EduStanfordNlpLingTokensregexSequencePattern_SequencePatternExpr *seq = (EduStanfordNlpLingTokensregexSequencePattern_SequencePatternExpr *) cast_chk(opt, [EduStanfordNlpLingTokensregexSequencePattern_SequencePatternExpr class]);
      if ([((id<JavaUtilList>) nil_chk(((EduStanfordNlpLingTokensregexSequencePattern_SequencePatternExpr *) nil_chk(seq))->patterns_)) size] > 0) {
        jboolean isStringSeq = true;
        EduStanfordNlpUtilPair *key = nil;
        id<JavaUtilList> strings = nil;
        for (EduStanfordNlpLingTokensregexSequencePattern_PatternExpr * __strong sp in seq->patterns_) {
          EduStanfordNlpUtilPair *pair = EduStanfordNlpLingTokensregexSequencePattern_OrPatternExpr__getStringAnnotation_WithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_(sp);
          if (pair != nil) {
            if (key != nil) {
              if ([((IOSClass *) nil_chk(key->first_)) isEqual:pair->first_] && [((JavaLangBoolean *) nil_chk(key->second_)) isEqual:JavaLangBoolean_valueOfWithBoolean_([((EduStanfordNlpLingTokensregexComplexNodePattern_StringAnnotationPattern *) nil_chk(pair->second_)) ignoreCase])]) {
              }
              else {
                isStringSeq = false;
                break;
              }
            }
            else {
              key = EduStanfordNlpUtilPair_makePairWithId_withId_(pair->first_, JavaLangBoolean_valueOfWithBoolean_([((EduStanfordNlpLingTokensregexComplexNodePattern_StringAnnotationPattern *) nil_chk(pair->second_)) ignoreCase]));
              strings = new_JavaUtilArrayList_init();
            }
            [((id<JavaUtilList>) nil_chk(strings)) addWithId:((EduStanfordNlpLingTokensregexComplexNodePattern_StringAnnotationPattern *) nil_chk(pair->second_))->target_];
          }
          else {
            isStringSeq = false;
            break;
          }
        }
        if (isStringSeq) {
          EduStanfordNlpUtilPair *saved = [stringSeqPatterns getWithId:key];
          if (saved == nil) {
            saved = new_EduStanfordNlpUtilPair_initWithId_withId_(new_JavaUtilArrayList_init(), new_JavaUtilHashSet_init());
            (void) [stringSeqPatterns putWithId:key withId:saved];
          }
          [((id<JavaUtilCollection>) nil_chk(saved->first_)) addWithId:opt];
          [((id<JavaUtilSet>) nil_chk(saved->second_)) addWithId:strings];
        }
      }
    }
  }
  id<JavaUtilMap> alreadyOptimized = new_JavaUtilIdentityHashMap_init();
  id<JavaUtilList> finalOptimizedPatterns = new_JavaUtilArrayList_initWithInt_([self->patterns_ size]);
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([stringPatterns entrySet])) {
    EduStanfordNlpUtilPair *saved = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getValue];
    id<JavaUtilSet> set = ((EduStanfordNlpUtilPair *) nil_chk(saved))->second_;
    jint flags = [((JavaLangBoolean *) nil_chk((((EduStanfordNlpUtilPair *) nil_chk([entry_ getKey]))->second_))) booleanValue] ? EduStanfordNlpLingTokensregexNodePattern_CASE_INSENSITIVE : 0;
    if ([((id<JavaUtilSet>) nil_chk(set)) size] > EduStanfordNlpLingTokensregexSequencePattern_OrPatternExpr_OPTIMIZE_MIN_SIZE) {
      EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *optimized = new_EduStanfordNlpLingTokensregexSequencePattern_NodePatternExpr_initWithEduStanfordNlpLingTokensregexNodePattern_(new_EduStanfordNlpLingTokensregexCoreMapNodePattern_initWithIOSClass_withEduStanfordNlpLingTokensregexNodePattern_(((EduStanfordNlpUtilPair *) nil_chk([entry_ getKey]))->first_, new_EduStanfordNlpLingTokensregexComplexNodePattern_StringInSetAnnotationPattern_initWithJavaUtilSet_withInt_(set, flags)));
      [finalOptimizedPatterns addWithId:optimized];
      for (EduStanfordNlpLingTokensregexSequencePattern_PatternExpr * __strong p in nil_chk(saved->first_)) {
        (void) [alreadyOptimized putWithId:p withId:JavaLangBoolean_valueOfWithBoolean_(true)];
      }
    }
  }
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([stringSeqPatterns entrySet])) {
    EduStanfordNlpUtilPair *saved = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getValue];
    id<JavaUtilSet> set = ((EduStanfordNlpUtilPair *) nil_chk(saved))->second_;
    if ([((id<JavaUtilSet>) nil_chk(set)) size] > EduStanfordNlpLingTokensregexSequencePattern_OrPatternExpr_OPTIMIZE_MIN_SIZE) {
      EduStanfordNlpUtilPair *key = [entry_ getKey];
      EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *optimized = new_EduStanfordNlpLingTokensregexSequencePattern_MultiNodePatternExpr_initWithEduStanfordNlpLingTokensregexMultiNodePattern_(new_EduStanfordNlpLingTokensregexMultiCoreMapNodePattern_StringSequenceAnnotationPattern_initWithIOSClass_withJavaUtilSet_withBoolean_([((EduStanfordNlpUtilPair *) nil_chk(key)) first], set, [((JavaLangBoolean *) nil_chk([key second])) booleanValue]));
      [finalOptimizedPatterns addWithId:optimized];
      for (EduStanfordNlpLingTokensregexSequencePattern_PatternExpr * __strong p in nil_chk(saved->first_)) {
        (void) [alreadyOptimized putWithId:p withId:JavaLangBoolean_valueOfWithBoolean_(true)];
      }
    }
  }
  for (EduStanfordNlpLingTokensregexSequencePattern_PatternExpr * __strong p in opts) {
    JavaLangBoolean *included = [alreadyOptimized getWithId:p];
    if (included == nil || ![included booleanValue]) {
      [finalOptimizedPatterns addWithId:p];
    }
  }
  return new_EduStanfordNlpLingTokensregexSequencePattern_OrPatternExpr_initWithJavaUtilList_(finalOptimizedPatterns);
}

EduStanfordNlpUtilPair *EduStanfordNlpLingTokensregexSequencePattern_OrPatternExpr__getStringAnnotation_WithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_(EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *p) {
  EduStanfordNlpLingTokensregexSequencePattern_OrPatternExpr_initialize();
  if ([p isKindOfClass:[EduStanfordNlpLingTokensregexSequencePattern_NodePatternExpr class]]) {
    EduStanfordNlpLingTokensregexNodePattern *nodePattern = ((EduStanfordNlpLingTokensregexSequencePattern_NodePatternExpr *) nil_chk(((EduStanfordNlpLingTokensregexSequencePattern_NodePatternExpr *) cast_chk(p, [EduStanfordNlpLingTokensregexSequencePattern_NodePatternExpr class]))))->nodePattern_;
    if ([nodePattern isKindOfClass:[EduStanfordNlpLingTokensregexCoreMapNodePattern class]]) {
      id<JavaUtilList> annotationPatterns = [((EduStanfordNlpLingTokensregexCoreMapNodePattern *) nil_chk(((EduStanfordNlpLingTokensregexCoreMapNodePattern *) cast_chk(nodePattern, [EduStanfordNlpLingTokensregexCoreMapNodePattern class])))) getAnnotationPatterns];
      if ([((id<JavaUtilList>) nil_chk(annotationPatterns)) size] == 1) {
        EduStanfordNlpUtilPair *pair = [annotationPatterns getWithInt:0];
        if ([((EduStanfordNlpUtilPair *) nil_chk(pair))->second_ isKindOfClass:[EduStanfordNlpLingTokensregexComplexNodePattern_StringAnnotationPattern class]]) {
          return EduStanfordNlpUtilPair_makePairWithId_withId_(pair->first_, (EduStanfordNlpLingTokensregexComplexNodePattern_StringAnnotationPattern *) cast_chk(pair->second_, [EduStanfordNlpLingTokensregexComplexNodePattern_StringAnnotationPattern class]));
        }
      }
    }
  }
  return nil;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexSequencePattern_OrPatternExpr)

@implementation EduStanfordNlpLingTokensregexSequencePattern_AndPatternExpr

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)patterns {
  EduStanfordNlpLingTokensregexSequencePattern_AndPatternExpr_initWithJavaUtilList_(self, patterns);
  return self;
}

- (instancetype)initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExprArray:(IOSObjectArray *)patterns {
  EduStanfordNlpLingTokensregexSequencePattern_AndPatternExpr_initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExprArray_(self, patterns);
  return self;
}

- (EduStanfordNlpLingTokensregexSequencePattern_Frag *)build {
  EduStanfordNlpLingTokensregexSequencePattern_ConjStartState *conjStart = new_EduStanfordNlpLingTokensregexSequencePattern_ConjStartState_initWithInt_([((id<JavaUtilList>) nil_chk(patterns_)) size]);
  EduStanfordNlpLingTokensregexSequencePattern_Frag *frag = new_EduStanfordNlpLingTokensregexSequencePattern_Frag_init();
  frag->start_ = conjStart;
  for (jint i = 0; i < [patterns_ size]; i++) {
    EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *pattern = [patterns_ getWithInt:i];
    EduStanfordNlpLingTokensregexSequencePattern_Frag *f = [((EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *) nil_chk(pattern)) build];
    [((EduStanfordNlpLingTokensregexSequencePattern_State *) nil_chk(frag->start_)) addWithEduStanfordNlpLingTokensregexSequencePattern_State:((EduStanfordNlpLingTokensregexSequencePattern_Frag *) nil_chk(f))->start_];
    [f connectWithEduStanfordNlpLingTokensregexSequencePattern_State:new_EduStanfordNlpLingTokensregexSequencePattern_ConjEndState_initWithEduStanfordNlpLingTokensregexSequencePattern_ConjStartState_withInt_(conjStart, i)];
    [frag addWithJavaUtilCollection:f->out_];
  }
  return frag;
}

- (jint)assignGroupIdsWithInt:(jint)start {
  jint nextId = start;
  for (EduStanfordNlpLingTokensregexSequencePattern_PatternExpr * __strong pattern in nil_chk(patterns_)) {
    nextId = [((EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *) nil_chk(pattern)) assignGroupIdsWithInt:nextId];
  }
  return nextId;
}

- (void)updateBindingsWithEduStanfordNlpLingTokensregexSequencePattern_VarGroupBindings:(EduStanfordNlpLingTokensregexSequencePattern_VarGroupBindings *)bindings {
  for (EduStanfordNlpLingTokensregexSequencePattern_PatternExpr * __strong pattern in nil_chk(patterns_)) {
    [((EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *) nil_chk(pattern)) updateBindingsWithEduStanfordNlpLingTokensregexSequencePattern_VarGroupBindings:bindings];
  }
}

- (EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *)copy__ {
  id<JavaUtilList> newPatterns = new_JavaUtilArrayList_initWithInt_([((id<JavaUtilList>) nil_chk(patterns_)) size]);
  for (EduStanfordNlpLingTokensregexSequencePattern_PatternExpr * __strong p in patterns_) {
    [newPatterns addWithId:[((EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *) nil_chk(p)) copy__]];
  }
  return new_EduStanfordNlpLingTokensregexSequencePattern_AndPatternExpr_initWithJavaUtilList_(newPatterns);
}

- (EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *)optimize {
  id<JavaUtilList> newPatterns = new_JavaUtilArrayList_initWithInt_([((id<JavaUtilList>) nil_chk(patterns_)) size]);
  for (EduStanfordNlpLingTokensregexSequencePattern_PatternExpr * __strong p in patterns_) {
    [newPatterns addWithId:[((EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *) nil_chk(p)) optimize]];
  }
  return new_EduStanfordNlpLingTokensregexSequencePattern_AndPatternExpr_initWithJavaUtilList_(newPatterns);
}

- (EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *)transformWithEduStanfordNlpLingTokensregexNodePatternTransformer:(id<EduStanfordNlpLingTokensregexNodePatternTransformer>)transformer {
  id<JavaUtilList> newPatterns = new_JavaUtilArrayList_initWithInt_([((id<JavaUtilList>) nil_chk(patterns_)) size]);
  for (EduStanfordNlpLingTokensregexSequencePattern_PatternExpr * __strong p in patterns_) {
    [newPatterns addWithId:[((EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *) nil_chk(p)) transformWithEduStanfordNlpLingTokensregexNodePatternTransformer:transformer]];
  }
  return new_EduStanfordNlpLingTokensregexSequencePattern_AndPatternExpr_initWithJavaUtilList_(newPatterns);
}

- (NSString *)description {
  return EduStanfordNlpUtilStringUtils_joinWithJavaLangIterable_withNSString_(patterns_, @" & ");
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, NULL, 0x81, -1, 2, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexSequencePattern_Frag;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 5, 6, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexSequencePattern_PatternExpr;", 0x4, 7, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexSequencePattern_PatternExpr;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexSequencePattern_PatternExpr;", 0x4, 8, 9, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 10, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilList:);
  methods[1].selector = @selector(initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExprArray:);
  methods[2].selector = @selector(build);
  methods[3].selector = @selector(assignGroupIdsWithInt:);
  methods[4].selector = @selector(updateBindingsWithEduStanfordNlpLingTokensregexSequencePattern_VarGroupBindings:);
  methods[5].selector = @selector(copy__);
  methods[6].selector = @selector(optimize);
  methods[7].selector = @selector(transformWithEduStanfordNlpLingTokensregexNodePatternTransformer:);
  methods[8].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "patterns_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 11, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilList;", "(Ljava/util/List<Ledu/stanford/nlp/ling/tokensregex/SequencePattern$PatternExpr;>;)V", "[LEduStanfordNlpLingTokensregexSequencePattern_PatternExpr;", "assignGroupIds", "I", "updateBindings", "LEduStanfordNlpLingTokensregexSequencePattern_VarGroupBindings;", "copy", "transform", "LEduStanfordNlpLingTokensregexNodePatternTransformer;", "toString", "Ljava/util/List<Ledu/stanford/nlp/ling/tokensregex/SequencePattern$PatternExpr;>;", "LEduStanfordNlpLingTokensregexSequencePattern;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexSequencePattern_AndPatternExpr = { "AndPatternExpr", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, fields, 7, 0x9, 9, 1, 12, -1, -1, -1, -1 };
  return &_EduStanfordNlpLingTokensregexSequencePattern_AndPatternExpr;
}

@end

void EduStanfordNlpLingTokensregexSequencePattern_AndPatternExpr_initWithJavaUtilList_(EduStanfordNlpLingTokensregexSequencePattern_AndPatternExpr *self, id<JavaUtilList> patterns) {
  EduStanfordNlpLingTokensregexSequencePattern_PatternExpr_init(self);
  self->patterns_ = patterns;
}

EduStanfordNlpLingTokensregexSequencePattern_AndPatternExpr *new_EduStanfordNlpLingTokensregexSequencePattern_AndPatternExpr_initWithJavaUtilList_(id<JavaUtilList> patterns) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequencePattern_AndPatternExpr, initWithJavaUtilList_, patterns)
}

EduStanfordNlpLingTokensregexSequencePattern_AndPatternExpr *create_EduStanfordNlpLingTokensregexSequencePattern_AndPatternExpr_initWithJavaUtilList_(id<JavaUtilList> patterns) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequencePattern_AndPatternExpr, initWithJavaUtilList_, patterns)
}

void EduStanfordNlpLingTokensregexSequencePattern_AndPatternExpr_initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExprArray_(EduStanfordNlpLingTokensregexSequencePattern_AndPatternExpr *self, IOSObjectArray *patterns) {
  EduStanfordNlpLingTokensregexSequencePattern_PatternExpr_init(self);
  self->patterns_ = JavaUtilArrays_asListWithNSObjectArray_(patterns);
}

EduStanfordNlpLingTokensregexSequencePattern_AndPatternExpr *new_EduStanfordNlpLingTokensregexSequencePattern_AndPatternExpr_initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExprArray_(IOSObjectArray *patterns) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequencePattern_AndPatternExpr, initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExprArray_, patterns)
}

EduStanfordNlpLingTokensregexSequencePattern_AndPatternExpr *create_EduStanfordNlpLingTokensregexSequencePattern_AndPatternExpr_initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExprArray_(IOSObjectArray *patterns) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequencePattern_AndPatternExpr, initWithEduStanfordNlpLingTokensregexSequencePattern_PatternExprArray_, patterns)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexSequencePattern_AndPatternExpr)

@implementation EduStanfordNlpLingTokensregexSequencePattern_State

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpLingTokensregexSequencePattern_State_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)updateOutStatesWithJavaUtilSet:(id<JavaUtilSet>)outArg {
  if (next_ == nil) {
    [((id<JavaUtilSet>) nil_chk(outArg)) addWithId:self];
  }
  else {
    for (EduStanfordNlpLingTokensregexSequencePattern_State * __strong s in next_) {
      [((EduStanfordNlpLingTokensregexSequencePattern_State *) nil_chk(s)) updateOutStatesWithJavaUtilSet:outArg];
    }
  }
}

- (jboolean)match0WithInt:(jint)bid
withEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates:(EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *)matchedStates {
  return [self matchWithInt:bid withEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates:matchedStates withBoolean:false];
}

- (jboolean)matchWithInt:(jint)bid
withEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates:(EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *)matchedStates {
  return [self matchWithInt:bid withEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates:matchedStates withBoolean:true];
}

- (jboolean)matchWithInt:(jint)bid
withEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates:(EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *)matchedStates
             withBoolean:(jboolean)consume {
  return [self matchWithInt:bid withEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates:matchedStates withBoolean:consume withEduStanfordNlpLingTokensregexSequencePattern_State:nil];
}

- (jboolean)matchWithInt:(jint)bid
withEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates:(EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *)matchedStates
             withBoolean:(jboolean)consume
withEduStanfordNlpLingTokensregexSequencePattern_State:(EduStanfordNlpLingTokensregexSequencePattern_State *)prevState {
  jboolean match = false;
  if (next_ != nil) {
    jint i = 0;
    for (EduStanfordNlpLingTokensregexSequencePattern_State * __strong s in next_) {
      i++;
      jboolean m = [((EduStanfordNlpLingTokensregexSequencePattern_State *) nil_chk(s)) matchWithInt:[((EduStanfordNlpLingTokensregexSequenceMatcher_BranchStates *) nil_chk(((EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *) nil_chk(matchedStates))->branchStates_)) getBranchIdWithInt:bid withInt:i withInt:[((id<JavaUtilSet>) nil_chk(next_)) size]] withEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates:matchedStates withBoolean:consume withEduStanfordNlpLingTokensregexSequencePattern_State:self];
      if (m) {
        match = true;
      }
    }
  }
  return match;
}

- (void)addWithEduStanfordNlpLingTokensregexSequencePattern_State:(EduStanfordNlpLingTokensregexSequencePattern_State *)nextState {
  if (next_ == nil) {
    next_ = new_JavaUtilLinkedHashSet_init();
  }
  [next_ addWithId:nextState];
}

- (id)valueWithInt:(jint)bid
withEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates:(EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *)matchedStates {
  if (hasSavedValue_) {
    id<EduStanfordNlpUtilHasInterval> matchedInterval = [((EduStanfordNlpLingTokensregexSequenceMatcher_BranchStates *) nil_chk([((EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *) nil_chk(matchedStates)) getBranchStates])) getMatchedIntervalWithInt:bid withEduStanfordNlpLingTokensregexSequencePattern_State:self];
    if (matchedInterval != nil && [matchedInterval isKindOfClass:[EduStanfordNlpUtilValuedInterval class]]) {
      return [((EduStanfordNlpUtilValuedInterval *) cast_chk(matchedInterval, [EduStanfordNlpUtilValuedInterval class])) getValue];
    }
  }
  return nil;
}

- (void)markOptionalWithBoolean:(jboolean)propagate {
  self->isOptional_ = true;
  if (propagate && next_ != nil) {
    JavaUtilStack *todo = new_JavaUtilStack_init();
    id<JavaUtilSet> seen = new_JavaUtilHashSet_init();
    [todo addAllWithJavaUtilCollection:next_];
    while (![todo empty]) {
      EduStanfordNlpLingTokensregexSequencePattern_State *s = [todo pop];
      ((EduStanfordNlpLingTokensregexSequencePattern_State *) nil_chk(s))->isOptional_ = true;
      [seen addWithId:s];
      if (next_ != nil) {
        for (EduStanfordNlpLingTokensregexSequencePattern_State * __strong n in next_) {
          if (![seen containsWithId:n]) {
            (void) [todo pushWithId:n];
          }
        }
      }
    }
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 0, 1, -1, 2, -1, -1 },
    { NULL, "Z", 0x4, 3, 4, -1, 5, -1, -1 },
    { NULL, "Z", 0x4, 6, 4, -1, 5, -1, -1 },
    { NULL, "Z", 0x4, 6, 7, -1, 8, -1, -1 },
    { NULL, "Z", 0x4, 6, 9, -1, 10, -1, -1 },
    { NULL, "V", 0x4, 11, 12, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 13, 4, -1, 14, -1, -1 },
    { NULL, "V", 0x1, 15, 16, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(updateOutStatesWithJavaUtilSet:);
  methods[2].selector = @selector(match0WithInt:withEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates:);
  methods[3].selector = @selector(matchWithInt:withEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates:);
  methods[4].selector = @selector(matchWithInt:withEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates:withBoolean:);
  methods[5].selector = @selector(matchWithInt:withEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates:withBoolean:withEduStanfordNlpLingTokensregexSequencePattern_State:);
  methods[6].selector = @selector(addWithEduStanfordNlpLingTokensregexSequencePattern_State:);
  methods[7].selector = @selector(valueWithInt:withEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates:);
  methods[8].selector = @selector(markOptionalWithBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "next_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x0, -1, -1, 17, -1 },
    { "hasSavedValue_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "isOptional_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "updateOutStates", "LJavaUtilSet;", "(Ljava/util/Set<Ledu/stanford/nlp/ling/tokensregex/SequencePattern$State;>;)V", "match0", "ILEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates;", "<T:Ljava/lang/Object;>(ILedu/stanford/nlp/ling/tokensregex/SequenceMatcher$MatchedStates<TT;>;)Z", "match", "ILEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates;Z", "<T:Ljava/lang/Object;>(ILedu/stanford/nlp/ling/tokensregex/SequenceMatcher$MatchedStates<TT;>;Z)Z", "ILEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates;ZLEduStanfordNlpLingTokensregexSequencePattern_State;", "<T:Ljava/lang/Object;>(ILedu/stanford/nlp/ling/tokensregex/SequenceMatcher$MatchedStates<TT;>;ZLedu/stanford/nlp/ling/tokensregex/SequencePattern$State;)Z", "add", "LEduStanfordNlpLingTokensregexSequencePattern_State;", "value", "<T:Ljava/lang/Object;>(ILedu/stanford/nlp/ling/tokensregex/SequenceMatcher$MatchedStates<TT;>;)Ljava/lang/Object;", "markOptional", "Z", "Ljava/util/Set<Ledu/stanford/nlp/ling/tokensregex/SequencePattern$State;>;", "LEduStanfordNlpLingTokensregexSequencePattern;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexSequencePattern_State = { "State", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, fields, 7, 0x8, 9, 3, 18, -1, -1, -1, -1 };
  return &_EduStanfordNlpLingTokensregexSequencePattern_State;
}

@end

void EduStanfordNlpLingTokensregexSequencePattern_State_init(EduStanfordNlpLingTokensregexSequencePattern_State *self) {
  NSObject_init(self);
}

EduStanfordNlpLingTokensregexSequencePattern_State *new_EduStanfordNlpLingTokensregexSequencePattern_State_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequencePattern_State, init)
}

EduStanfordNlpLingTokensregexSequencePattern_State *create_EduStanfordNlpLingTokensregexSequencePattern_State_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequencePattern_State, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexSequencePattern_State)

@implementation EduStanfordNlpLingTokensregexSequencePattern_MatchState

- (jboolean)matchWithInt:(jint)bid
withEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates:(EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *)matchedStates
             withBoolean:(jboolean)consume
withEduStanfordNlpLingTokensregexSequencePattern_State:(EduStanfordNlpLingTokensregexSequencePattern_State *)prevState {
  [((EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *) nil_chk(matchedStates)) addStateWithInt:bid withEduStanfordNlpLingTokensregexSequencePattern_State:self];
  return false;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpLingTokensregexSequencePattern_MatchState_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x4, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(matchWithInt:withEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates:withBoolean:withEduStanfordNlpLingTokensregexSequencePattern_State:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "match", "ILEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates;ZLEduStanfordNlpLingTokensregexSequencePattern_State;", "<T:Ljava/lang/Object;>(ILedu/stanford/nlp/ling/tokensregex/SequenceMatcher$MatchedStates<TT;>;ZLedu/stanford/nlp/ling/tokensregex/SequencePattern$State;)Z", "LEduStanfordNlpLingTokensregexSequencePattern;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexSequencePattern_MatchState = { "MatchState", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, NULL, 7, 0xa, 2, 0, 3, -1, -1, -1, -1 };
  return &_EduStanfordNlpLingTokensregexSequencePattern_MatchState;
}

@end

void EduStanfordNlpLingTokensregexSequencePattern_MatchState_init(EduStanfordNlpLingTokensregexSequencePattern_MatchState *self) {
  EduStanfordNlpLingTokensregexSequencePattern_State_init(self);
}

EduStanfordNlpLingTokensregexSequencePattern_MatchState *new_EduStanfordNlpLingTokensregexSequencePattern_MatchState_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequencePattern_MatchState, init)
}

EduStanfordNlpLingTokensregexSequencePattern_MatchState *create_EduStanfordNlpLingTokensregexSequencePattern_MatchState_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequencePattern_MatchState, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexSequencePattern_MatchState)

@implementation EduStanfordNlpLingTokensregexSequencePattern_ValueState

- (instancetype)initWithId:(id)value {
  EduStanfordNlpLingTokensregexSequencePattern_ValueState_initWithId_(self, value);
  return self;
}

- (id)valueWithInt:(jint)bid
withEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates:(EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *)matchedStates {
  return value_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithId:);
  methods[1].selector = @selector(valueWithInt:withEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "value_", "LNSObject;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSObject;", "value", "ILEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates;", "<T:Ljava/lang/Object;>(ILedu/stanford/nlp/ling/tokensregex/SequenceMatcher$MatchedStates<TT;>;)Ljava/lang/Object;", "LEduStanfordNlpLingTokensregexSequencePattern;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexSequencePattern_ValueState = { "ValueState", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, fields, 7, 0xa, 2, 1, 4, -1, -1, -1, -1 };
  return &_EduStanfordNlpLingTokensregexSequencePattern_ValueState;
}

@end

void EduStanfordNlpLingTokensregexSequencePattern_ValueState_initWithId_(EduStanfordNlpLingTokensregexSequencePattern_ValueState *self, id value) {
  EduStanfordNlpLingTokensregexSequencePattern_State_init(self);
  self->value_ = value;
}

EduStanfordNlpLingTokensregexSequencePattern_ValueState *new_EduStanfordNlpLingTokensregexSequencePattern_ValueState_initWithId_(id value) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequencePattern_ValueState, initWithId_, value)
}

EduStanfordNlpLingTokensregexSequencePattern_ValueState *create_EduStanfordNlpLingTokensregexSequencePattern_ValueState_initWithId_(id value) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequencePattern_ValueState, initWithId_, value)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexSequencePattern_ValueState)

@implementation EduStanfordNlpLingTokensregexSequencePattern_NodePatternState

- (instancetype)initWithEduStanfordNlpLingTokensregexNodePattern:(EduStanfordNlpLingTokensregexNodePattern *)p {
  EduStanfordNlpLingTokensregexSequencePattern_NodePatternState_initWithEduStanfordNlpLingTokensregexNodePattern_(self, p);
  return self;
}

- (jboolean)matchWithInt:(jint)bid
withEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates:(EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *)matchedStates
             withBoolean:(jboolean)consume
withEduStanfordNlpLingTokensregexSequencePattern_State:(EduStanfordNlpLingTokensregexSequencePattern_State *)prevState {
  if (consume) {
    id node = [((EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *) nil_chk(matchedStates)) get];
    if (((EduStanfordNlpLingTokensregexSequenceMatcher *) nil_chk(matchedStates->matcher_))->matchWithResult_) {
      id obj = [((EduStanfordNlpLingTokensregexNodePattern *) nil_chk(pattern_)) matchWithResultWithId:node];
      if (obj != nil) {
        if (obj != JreLoadStatic(JavaLangBoolean, TRUE)) {
          [((EduStanfordNlpLingTokensregexSequenceMatcher_BranchStates *) nil_chk(matchedStates->branchStates_)) setMatchedResultWithInt:bid withInt:matchedStates->curPosition_ withId:obj];
        }
        [matchedStates addStatesWithInt:bid withJavaUtilCollection:next_];
        return true;
      }
      else {
        return false;
      }
    }
    else {
      if (node != nil && [((EduStanfordNlpLingTokensregexNodePattern *) nil_chk(pattern_)) matchWithId:node]) {
        [matchedStates addStatesWithInt:bid withJavaUtilCollection:next_];
        return true;
      }
      else {
        return false;
      }
    }
  }
  else {
    [((EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *) nil_chk(matchedStates)) addStateWithInt:bid withEduStanfordNlpLingTokensregexSequencePattern_State:self];
    return false;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpLingTokensregexNodePattern:);
  methods[1].selector = @selector(matchWithInt:withEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates:withBoolean:withEduStanfordNlpLingTokensregexSequencePattern_State:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "pattern_", "LEduStanfordNlpLingTokensregexNodePattern;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpLingTokensregexNodePattern;", "match", "ILEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates;ZLEduStanfordNlpLingTokensregexSequencePattern_State;", "<T:Ljava/lang/Object;>(ILedu/stanford/nlp/ling/tokensregex/SequenceMatcher$MatchedStates<TT;>;ZLedu/stanford/nlp/ling/tokensregex/SequencePattern$State;)Z", "LEduStanfordNlpLingTokensregexSequencePattern;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexSequencePattern_NodePatternState = { "NodePatternState", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, fields, 7, 0xa, 2, 1, 4, -1, -1, -1, -1 };
  return &_EduStanfordNlpLingTokensregexSequencePattern_NodePatternState;
}

@end

void EduStanfordNlpLingTokensregexSequencePattern_NodePatternState_initWithEduStanfordNlpLingTokensregexNodePattern_(EduStanfordNlpLingTokensregexSequencePattern_NodePatternState *self, EduStanfordNlpLingTokensregexNodePattern *p) {
  EduStanfordNlpLingTokensregexSequencePattern_State_init(self);
  self->pattern_ = p;
}

EduStanfordNlpLingTokensregexSequencePattern_NodePatternState *new_EduStanfordNlpLingTokensregexSequencePattern_NodePatternState_initWithEduStanfordNlpLingTokensregexNodePattern_(EduStanfordNlpLingTokensregexNodePattern *p) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequencePattern_NodePatternState, initWithEduStanfordNlpLingTokensregexNodePattern_, p)
}

EduStanfordNlpLingTokensregexSequencePattern_NodePatternState *create_EduStanfordNlpLingTokensregexSequencePattern_NodePatternState_initWithEduStanfordNlpLingTokensregexNodePattern_(EduStanfordNlpLingTokensregexNodePattern *p) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequencePattern_NodePatternState, initWithEduStanfordNlpLingTokensregexNodePattern_, p)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexSequencePattern_NodePatternState)

@implementation EduStanfordNlpLingTokensregexSequencePattern_MultiNodePatternState

- (instancetype)initWithEduStanfordNlpLingTokensregexMultiNodePattern:(EduStanfordNlpLingTokensregexMultiNodePattern *)p {
  EduStanfordNlpLingTokensregexSequencePattern_MultiNodePatternState_initWithEduStanfordNlpLingTokensregexMultiNodePattern_(self, p);
  return self;
}

- (jboolean)matchWithInt:(jint)bid
withEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates:(EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *)matchedStates
             withBoolean:(jboolean)consume
withEduStanfordNlpLingTokensregexSequencePattern_State:(EduStanfordNlpLingTokensregexSequencePattern_State *)prevState {
  if (consume) {
    id<EduStanfordNlpUtilHasInterval> matchedInterval = [((EduStanfordNlpLingTokensregexSequenceMatcher_BranchStates *) nil_chk([((EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *) nil_chk(matchedStates)) getBranchStates])) getMatchedIntervalWithInt:bid withEduStanfordNlpLingTokensregexSequencePattern_State:self];
    jint cur = matchedStates->curPosition_;
    if (matchedInterval == nil) {
      id<JavaUtilList> nodes = [matchedStates elements];
      id<JavaUtilCollection> matched = [((EduStanfordNlpLingTokensregexMultiNodePattern *) nil_chk(pattern_)) matchWithJavaUtilList:nodes withInt:cur];
      if ([pattern_ isGreedyMatch]) {
        matched = EduStanfordNlpUtilCollectionUtils_sortedWithJavaLangIterable_withJavaUtilComparator_(matched, JreLoadStatic(EduStanfordNlpUtilHasInterval, LENGTH_GT_COMPARATOR));
      }
      else {
        matched = EduStanfordNlpUtilCollectionUtils_sortedWithJavaLangIterable_withJavaUtilComparator_(matched, JreLoadStatic(EduStanfordNlpUtilHasInterval, LENGTH_LT_COMPARATOR));
      }
      if (matched != nil && [matched size] > 0) {
        jint nBranches = [matched size];
        jint i = 0;
        for (id<EduStanfordNlpUtilHasInterval> __strong interval in matched) {
          i++;
          jint bid2 = [((EduStanfordNlpLingTokensregexSequenceMatcher_BranchStates *) nil_chk([matchedStates getBranchStates])) getBranchIdWithInt:bid withInt:i withInt:nBranches];
          [((EduStanfordNlpLingTokensregexSequenceMatcher_BranchStates *) nil_chk([matchedStates getBranchStates])) setMatchedIntervalWithInt:bid2 withEduStanfordNlpLingTokensregexSequencePattern_State:self withEduStanfordNlpUtilHasInterval:interval];
          if ([((JavaLangInteger *) nil_chk([((EduStanfordNlpUtilInterval *) nil_chk([((id<EduStanfordNlpUtilHasInterval>) nil_chk(interval)) getInterval])) getEnd])) intValue] - 1 <= cur) {
            [matchedStates addStatesWithInt:bid2 withJavaUtilCollection:next_];
          }
          else {
            [matchedStates addStateWithInt:bid2 withEduStanfordNlpLingTokensregexSequencePattern_State:self];
          }
        }
        return true;
      }
      else {
        return false;
      }
    }
    else {
      if ([((JavaLangInteger *) nil_chk([((EduStanfordNlpUtilInterval *) nil_chk([matchedInterval getInterval])) getEnd])) intValue] - 1 <= cur) {
        [matchedStates addStatesWithInt:bid withJavaUtilCollection:next_];
      }
      else {
        [matchedStates addStateWithInt:bid withEduStanfordNlpLingTokensregexSequencePattern_State:self];
      }
      return true;
    }
  }
  else {
    [((EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *) nil_chk(matchedStates)) addStateWithInt:bid withEduStanfordNlpLingTokensregexSequencePattern_State:self];
    return false;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpLingTokensregexMultiNodePattern:);
  methods[1].selector = @selector(matchWithInt:withEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates:withBoolean:withEduStanfordNlpLingTokensregexSequencePattern_State:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "pattern_", "LEduStanfordNlpLingTokensregexMultiNodePattern;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpLingTokensregexMultiNodePattern;", "match", "ILEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates;ZLEduStanfordNlpLingTokensregexSequencePattern_State;", "<T:Ljava/lang/Object;>(ILedu/stanford/nlp/ling/tokensregex/SequenceMatcher$MatchedStates<TT;>;ZLedu/stanford/nlp/ling/tokensregex/SequencePattern$State;)Z", "LEduStanfordNlpLingTokensregexSequencePattern;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexSequencePattern_MultiNodePatternState = { "MultiNodePatternState", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, fields, 7, 0xa, 2, 1, 4, -1, -1, -1, -1 };
  return &_EduStanfordNlpLingTokensregexSequencePattern_MultiNodePatternState;
}

@end

void EduStanfordNlpLingTokensregexSequencePattern_MultiNodePatternState_initWithEduStanfordNlpLingTokensregexMultiNodePattern_(EduStanfordNlpLingTokensregexSequencePattern_MultiNodePatternState *self, EduStanfordNlpLingTokensregexMultiNodePattern *p) {
  EduStanfordNlpLingTokensregexSequencePattern_State_init(self);
  self->pattern_ = p;
}

EduStanfordNlpLingTokensregexSequencePattern_MultiNodePatternState *new_EduStanfordNlpLingTokensregexSequencePattern_MultiNodePatternState_initWithEduStanfordNlpLingTokensregexMultiNodePattern_(EduStanfordNlpLingTokensregexMultiNodePattern *p) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequencePattern_MultiNodePatternState, initWithEduStanfordNlpLingTokensregexMultiNodePattern_, p)
}

EduStanfordNlpLingTokensregexSequencePattern_MultiNodePatternState *create_EduStanfordNlpLingTokensregexSequencePattern_MultiNodePatternState_initWithEduStanfordNlpLingTokensregexMultiNodePattern_(EduStanfordNlpLingTokensregexMultiNodePattern *p) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequencePattern_MultiNodePatternState, initWithEduStanfordNlpLingTokensregexMultiNodePattern_, p)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexSequencePattern_MultiNodePatternState)

@implementation EduStanfordNlpLingTokensregexSequencePattern_RepeatState

- (instancetype)initWithEduStanfordNlpLingTokensregexSequencePattern_State:(EduStanfordNlpLingTokensregexSequencePattern_State *)start
                                                                   withInt:(jint)minMatch
                                                                   withInt:(jint)maxMatch
                                                               withBoolean:(jboolean)greedyMatch {
  EduStanfordNlpLingTokensregexSequencePattern_RepeatState_initWithEduStanfordNlpLingTokensregexSequencePattern_State_withInt_withInt_withBoolean_(self, start, minMatch, maxMatch, greedyMatch);
  return self;
}

- (jboolean)matchWithInt:(jint)bid
withEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates:(EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *)matchedStates
             withBoolean:(jboolean)consume
withEduStanfordNlpLingTokensregexSequencePattern_State:(EduStanfordNlpLingTokensregexSequencePattern_State *)prevState {
  jint matchedCount = [((EduStanfordNlpLingTokensregexSequenceMatcher_BranchStates *) nil_chk([((EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *) nil_chk(matchedStates)) getBranchStates])) endMatchedCountIncWithInt:bid withEduStanfordNlpLingTokensregexSequencePattern_State:self];
  jint minMatchLeft = minMatch_ - matchedCount;
  if (minMatchLeft < 0) {
    minMatchLeft = 0;
  }
  jint maxMatchLeft;
  if (maxMatch_ < 0) {
    maxMatchLeft = maxMatch_;
  }
  else {
    maxMatchLeft = maxMatch_ - matchedCount;
    if (maxMatch_ < 0) {
      return false;
    }
  }
  jboolean match = false;
  jint totalBranches = 0;
  if (minMatchLeft == 0 && next_ != nil) {
    totalBranches += [next_ size];
  }
  if (maxMatchLeft != 0) {
    totalBranches++;
  }
  jint i = 0;
  if (minMatchLeft == 0 && next_ != nil) {
    for (EduStanfordNlpLingTokensregexSequencePattern_State * __strong s in next_) {
      i++;
      jint pi = (greedyMatch_ && maxMatchLeft != 0) ? i + 1 : i;
      jint bid2 = [((EduStanfordNlpLingTokensregexSequenceMatcher_BranchStates *) nil_chk([matchedStates getBranchStates])) getBranchIdWithInt:bid withInt:pi withInt:totalBranches];
      [((EduStanfordNlpLingTokensregexSequenceMatcher_BranchStates *) nil_chk([matchedStates getBranchStates])) clearMatchedCountWithInt:bid2 withEduStanfordNlpLingTokensregexSequencePattern_State:self];
      jboolean m = [((EduStanfordNlpLingTokensregexSequencePattern_State *) nil_chk(s)) matchWithInt:bid2 withEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates:matchedStates withBoolean:consume];
      if (m) {
        match = true;
      }
    }
  }
  if (maxMatchLeft != 0) {
    i++;
    jint pi = greedyMatch_ ? 1 : i;
    jint bid2 = [((EduStanfordNlpLingTokensregexSequenceMatcher_BranchStates *) nil_chk([matchedStates getBranchStates])) getBranchIdWithInt:bid withInt:pi withInt:totalBranches];
    if (consume) {
      [((EduStanfordNlpLingTokensregexSequenceMatcher_BranchStates *) nil_chk([matchedStates getBranchStates])) startMatchedCountIncWithInt:bid2 withEduStanfordNlpLingTokensregexSequencePattern_State:self];
      jboolean m = [((EduStanfordNlpLingTokensregexSequencePattern_State *) nil_chk(repeatStart_)) matchWithInt:bid2 withEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates:matchedStates withBoolean:consume];
      if (m) {
        match = true;
      }
      else {
        [((EduStanfordNlpLingTokensregexSequenceMatcher_BranchStates *) nil_chk([matchedStates getBranchStates])) startMatchedCountDecWithInt:bid2 withEduStanfordNlpLingTokensregexSequencePattern_State:self];
      }
    }
    else {
      [matchedStates addStateWithInt:bid2 withEduStanfordNlpLingTokensregexSequencePattern_State:self];
    }
  }
  return match;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpLingTokensregexSequencePattern_State:withInt:withInt:withBoolean:);
  methods[1].selector = @selector(matchWithInt:withEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates:withBoolean:withEduStanfordNlpLingTokensregexSequencePattern_State:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "repeatStart_", "LEduStanfordNlpLingTokensregexSequencePattern_State;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "minMatch_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "maxMatch_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "greedyMatch_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpLingTokensregexSequencePattern_State;IIZ", "match", "ILEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates;ZLEduStanfordNlpLingTokensregexSequencePattern_State;", "<T:Ljava/lang/Object;>(ILedu/stanford/nlp/ling/tokensregex/SequenceMatcher$MatchedStates<TT;>;ZLedu/stanford/nlp/ling/tokensregex/SequencePattern$State;)Z", "LEduStanfordNlpLingTokensregexSequencePattern;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexSequencePattern_RepeatState = { "RepeatState", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, fields, 7, 0xa, 2, 4, 4, -1, -1, -1, -1 };
  return &_EduStanfordNlpLingTokensregexSequencePattern_RepeatState;
}

@end

void EduStanfordNlpLingTokensregexSequencePattern_RepeatState_initWithEduStanfordNlpLingTokensregexSequencePattern_State_withInt_withInt_withBoolean_(EduStanfordNlpLingTokensregexSequencePattern_RepeatState *self, EduStanfordNlpLingTokensregexSequencePattern_State *start, jint minMatch, jint maxMatch, jboolean greedyMatch) {
  EduStanfordNlpLingTokensregexSequencePattern_State_init(self);
  self->repeatStart_ = start;
  self->minMatch_ = minMatch;
  self->maxMatch_ = maxMatch;
  self->greedyMatch_ = greedyMatch;
  if (minMatch < 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"Invalid minMatch=", minMatch));
  }
  if (maxMatch >= 0 && minMatch > maxMatch) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$I", @"Invalid minMatch=", minMatch, @", maxMatch=", maxMatch));
  }
  self->isOptional_ = (self->minMatch_ <= 0);
}

EduStanfordNlpLingTokensregexSequencePattern_RepeatState *new_EduStanfordNlpLingTokensregexSequencePattern_RepeatState_initWithEduStanfordNlpLingTokensregexSequencePattern_State_withInt_withInt_withBoolean_(EduStanfordNlpLingTokensregexSequencePattern_State *start, jint minMatch, jint maxMatch, jboolean greedyMatch) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequencePattern_RepeatState, initWithEduStanfordNlpLingTokensregexSequencePattern_State_withInt_withInt_withBoolean_, start, minMatch, maxMatch, greedyMatch)
}

EduStanfordNlpLingTokensregexSequencePattern_RepeatState *create_EduStanfordNlpLingTokensregexSequencePattern_RepeatState_initWithEduStanfordNlpLingTokensregexSequencePattern_State_withInt_withInt_withBoolean_(EduStanfordNlpLingTokensregexSequencePattern_State *start, jint minMatch, jint maxMatch, jboolean greedyMatch) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequencePattern_RepeatState, initWithEduStanfordNlpLingTokensregexSequencePattern_State_withInt_withInt_withBoolean_, start, minMatch, maxMatch, greedyMatch)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexSequencePattern_RepeatState)

@implementation EduStanfordNlpLingTokensregexSequencePattern_BackRefState

- (instancetype)initWithEduStanfordNlpLingTokensregexSequencePattern_NodesMatchChecker:(id<EduStanfordNlpLingTokensregexSequencePattern_NodesMatchChecker>)matcher
                                                                               withInt:(jint)captureGroupId {
  EduStanfordNlpLingTokensregexSequencePattern_BackRefState_initWithEduStanfordNlpLingTokensregexSequencePattern_NodesMatchChecker_withInt_(self, matcher, captureGroupId);
  return self;
}

- (jboolean)matchWithInt:(jint)bid
withEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates:(EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *)matchedStates
withEduStanfordNlpLingTokensregexBasicSequenceMatchResult_MatchedGroup:(EduStanfordNlpLingTokensregexBasicSequenceMatchResult_MatchedGroup *)matchedGroup
                 withInt:(jint)matchedNodes {
  id node = [((EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *) nil_chk(matchedStates)) get];
  if ([((id<EduStanfordNlpLingTokensregexSequencePattern_NodesMatchChecker>) nil_chk(matcher_)) matchesWithId:node withId:[((id<JavaUtilList>) nil_chk([matchedStates elements])) getWithInt:((EduStanfordNlpLingTokensregexBasicSequenceMatchResult_MatchedGroup *) nil_chk(matchedGroup))->matchBegin_ + matchedNodes]]) {
    matchedNodes++;
    [((EduStanfordNlpLingTokensregexSequenceMatcher_BranchStates *) nil_chk([matchedStates getBranchStates])) setMatchStateInfoWithInt:bid withEduStanfordNlpLingTokensregexSequencePattern_State:self withId:new_EduStanfordNlpUtilPair_initWithId_withId_(matchedGroup, JavaLangInteger_valueOfWithInt_(matchedNodes))];
    jint len = matchedGroup->matchEnd_ - matchedGroup->matchBegin_;
    if (len == matchedNodes) {
      [matchedStates addStatesWithInt:bid withJavaUtilCollection:next_];
    }
    else {
      [matchedStates addStateWithInt:bid withEduStanfordNlpLingTokensregexSequencePattern_State:self];
    }
    return true;
  }
  return false;
}

- (jboolean)matchWithInt:(jint)bid
withEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates:(EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *)matchedStates
             withBoolean:(jboolean)consume
withEduStanfordNlpLingTokensregexSequencePattern_State:(EduStanfordNlpLingTokensregexSequencePattern_State *)prevState {
  if (consume) {
    EduStanfordNlpUtilPair *backRefState = (EduStanfordNlpUtilPair *) cast_chk([((EduStanfordNlpLingTokensregexSequenceMatcher_BranchStates *) nil_chk([((EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *) nil_chk(matchedStates)) getBranchStates])) getMatchStateInfoWithInt:bid withEduStanfordNlpLingTokensregexSequencePattern_State:self], [EduStanfordNlpUtilPair class]);
    if (backRefState == nil) {
      EduStanfordNlpLingTokensregexBasicSequenceMatchResult_MatchedGroup *matchedGroup = [((EduStanfordNlpLingTokensregexSequenceMatcher_BranchStates *) nil_chk([matchedStates getBranchStates])) getMatchedGroupWithInt:bid withInt:captureGroupId_];
      if (matchedGroup != nil) {
        if (matchedGroup->matchEnd_ > matchedGroup->matchBegin_) {
          jboolean matched = [self matchWithInt:bid withEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates:matchedStates withEduStanfordNlpLingTokensregexBasicSequenceMatchResult_MatchedGroup:matchedGroup withInt:0];
          return matched;
        }
        else {
          return [super matchWithInt:bid withEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates:matchedStates withBoolean:consume withEduStanfordNlpLingTokensregexSequencePattern_State:prevState];
        }
      }
      return false;
    }
    else {
      EduStanfordNlpLingTokensregexBasicSequenceMatchResult_MatchedGroup *matchedGroup = [backRefState first];
      jint matchedNodes = [((JavaLangInteger *) nil_chk([backRefState second])) intValue];
      jboolean matched = [self matchWithInt:bid withEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates:matchedStates withEduStanfordNlpLingTokensregexBasicSequenceMatchResult_MatchedGroup:matchedGroup withInt:matchedNodes];
      return matched;
    }
  }
  else {
    [((EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *) nil_chk(matchedStates)) addStateWithInt:bid withEduStanfordNlpLingTokensregexSequencePattern_State:self];
    return false;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 1, 2, -1, 3, -1, -1 },
    { NULL, "Z", 0x4, 1, 4, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpLingTokensregexSequencePattern_NodesMatchChecker:withInt:);
  methods[1].selector = @selector(matchWithInt:withEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates:withEduStanfordNlpLingTokensregexBasicSequenceMatchResult_MatchedGroup:withInt:);
  methods[2].selector = @selector(matchWithInt:withEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates:withBoolean:withEduStanfordNlpLingTokensregexSequencePattern_State:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "matcher_", "LEduStanfordNlpLingTokensregexSequencePattern_NodesMatchChecker;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "captureGroupId_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpLingTokensregexSequencePattern_NodesMatchChecker;I", "match", "ILEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates;LEduStanfordNlpLingTokensregexBasicSequenceMatchResult_MatchedGroup;I", "<T:Ljava/lang/Object;>(ILedu/stanford/nlp/ling/tokensregex/SequenceMatcher$MatchedStates<TT;>;Ledu/stanford/nlp/ling/tokensregex/BasicSequenceMatchResult$MatchedGroup;I)Z", "ILEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates;ZLEduStanfordNlpLingTokensregexSequencePattern_State;", "<T:Ljava/lang/Object;>(ILedu/stanford/nlp/ling/tokensregex/SequenceMatcher$MatchedStates<TT;>;ZLedu/stanford/nlp/ling/tokensregex/SequencePattern$State;)Z", "LEduStanfordNlpLingTokensregexSequencePattern;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexSequencePattern_BackRefState = { "BackRefState", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, fields, 7, 0x8, 3, 2, 6, -1, -1, -1, -1 };
  return &_EduStanfordNlpLingTokensregexSequencePattern_BackRefState;
}

@end

void EduStanfordNlpLingTokensregexSequencePattern_BackRefState_initWithEduStanfordNlpLingTokensregexSequencePattern_NodesMatchChecker_withInt_(EduStanfordNlpLingTokensregexSequencePattern_BackRefState *self, id<EduStanfordNlpLingTokensregexSequencePattern_NodesMatchChecker> matcher, jint captureGroupId) {
  EduStanfordNlpLingTokensregexSequencePattern_State_init(self);
  self->matcher_ = matcher;
  self->captureGroupId_ = captureGroupId;
}

EduStanfordNlpLingTokensregexSequencePattern_BackRefState *new_EduStanfordNlpLingTokensregexSequencePattern_BackRefState_initWithEduStanfordNlpLingTokensregexSequencePattern_NodesMatchChecker_withInt_(id<EduStanfordNlpLingTokensregexSequencePattern_NodesMatchChecker> matcher, jint captureGroupId) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequencePattern_BackRefState, initWithEduStanfordNlpLingTokensregexSequencePattern_NodesMatchChecker_withInt_, matcher, captureGroupId)
}

EduStanfordNlpLingTokensregexSequencePattern_BackRefState *create_EduStanfordNlpLingTokensregexSequencePattern_BackRefState_initWithEduStanfordNlpLingTokensregexSequencePattern_NodesMatchChecker_withInt_(id<EduStanfordNlpLingTokensregexSequencePattern_NodesMatchChecker> matcher, jint captureGroupId) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequencePattern_BackRefState, initWithEduStanfordNlpLingTokensregexSequencePattern_NodesMatchChecker_withInt_, matcher, captureGroupId)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexSequencePattern_BackRefState)

@implementation EduStanfordNlpLingTokensregexSequencePattern_GroupStartState

- (instancetype)initWithInt:(jint)captureGroupId
withEduStanfordNlpLingTokensregexSequencePattern_State:(EduStanfordNlpLingTokensregexSequencePattern_State *)startState {
  EduStanfordNlpLingTokensregexSequencePattern_GroupStartState_initWithInt_withEduStanfordNlpLingTokensregexSequencePattern_State_(self, captureGroupId, startState);
  return self;
}

- (jboolean)matchWithInt:(jint)bid
withEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates:(EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *)matchedStates
             withBoolean:(jboolean)consume
withEduStanfordNlpLingTokensregexSequencePattern_State:(EduStanfordNlpLingTokensregexSequencePattern_State *)prevState {
  if (consume) {
    [((EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *) nil_chk(matchedStates)) setGroupStartWithInt:bid withInt:captureGroupId_];
    return [super matchWithInt:bid withEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates:matchedStates withBoolean:consume withEduStanfordNlpLingTokensregexSequencePattern_State:prevState];
  }
  else {
    [((EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *) nil_chk(matchedStates)) addStateWithInt:bid withEduStanfordNlpLingTokensregexSequencePattern_State:self];
    return false;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:withEduStanfordNlpLingTokensregexSequencePattern_State:);
  methods[1].selector = @selector(matchWithInt:withEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates:withBoolean:withEduStanfordNlpLingTokensregexSequencePattern_State:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "captureGroupId_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ILEduStanfordNlpLingTokensregexSequencePattern_State;", "match", "ILEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates;ZLEduStanfordNlpLingTokensregexSequencePattern_State;", "<T:Ljava/lang/Object;>(ILedu/stanford/nlp/ling/tokensregex/SequenceMatcher$MatchedStates<TT;>;ZLedu/stanford/nlp/ling/tokensregex/SequencePattern$State;)Z", "LEduStanfordNlpLingTokensregexSequencePattern;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexSequencePattern_GroupStartState = { "GroupStartState", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, fields, 7, 0x8, 2, 1, 4, -1, -1, -1, -1 };
  return &_EduStanfordNlpLingTokensregexSequencePattern_GroupStartState;
}

@end

void EduStanfordNlpLingTokensregexSequencePattern_GroupStartState_initWithInt_withEduStanfordNlpLingTokensregexSequencePattern_State_(EduStanfordNlpLingTokensregexSequencePattern_GroupStartState *self, jint captureGroupId, EduStanfordNlpLingTokensregexSequencePattern_State *startState) {
  EduStanfordNlpLingTokensregexSequencePattern_State_init(self);
  self->captureGroupId_ = captureGroupId;
  [self addWithEduStanfordNlpLingTokensregexSequencePattern_State:startState];
}

EduStanfordNlpLingTokensregexSequencePattern_GroupStartState *new_EduStanfordNlpLingTokensregexSequencePattern_GroupStartState_initWithInt_withEduStanfordNlpLingTokensregexSequencePattern_State_(jint captureGroupId, EduStanfordNlpLingTokensregexSequencePattern_State *startState) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequencePattern_GroupStartState, initWithInt_withEduStanfordNlpLingTokensregexSequencePattern_State_, captureGroupId, startState)
}

EduStanfordNlpLingTokensregexSequencePattern_GroupStartState *create_EduStanfordNlpLingTokensregexSequencePattern_GroupStartState_initWithInt_withEduStanfordNlpLingTokensregexSequencePattern_State_(jint captureGroupId, EduStanfordNlpLingTokensregexSequencePattern_State *startState) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequencePattern_GroupStartState, initWithInt_withEduStanfordNlpLingTokensregexSequencePattern_State_, captureGroupId, startState)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexSequencePattern_GroupStartState)

@implementation EduStanfordNlpLingTokensregexSequencePattern_GroupEndState

- (instancetype)initWithInt:(jint)captureGroupId {
  EduStanfordNlpLingTokensregexSequencePattern_GroupEndState_initWithInt_(self, captureGroupId);
  return self;
}

- (jboolean)matchWithInt:(jint)bid
withEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates:(EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *)matchedStates
             withBoolean:(jboolean)consume
withEduStanfordNlpLingTokensregexSequencePattern_State:(EduStanfordNlpLingTokensregexSequencePattern_State *)prevState {
  id v = (prevState != nil) ? [((EduStanfordNlpLingTokensregexSequencePattern_State *) nil_chk(prevState)) valueWithInt:bid withEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates:matchedStates] : nil;
  if (consume) {
    [((EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *) nil_chk(matchedStates)) setGroupEndWithInt:bid withInt:captureGroupId_ withInt:matchedStates->curPosition_ - 1 withId:v];
  }
  else {
    [((EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *) nil_chk(matchedStates)) setGroupEndWithInt:bid withInt:captureGroupId_ withId:v];
  }
  return [super matchWithInt:bid withEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates:matchedStates withBoolean:consume withEduStanfordNlpLingTokensregexSequencePattern_State:prevState];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(matchWithInt:withEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates:withBoolean:withEduStanfordNlpLingTokensregexSequencePattern_State:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "captureGroupId_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "match", "ILEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates;ZLEduStanfordNlpLingTokensregexSequencePattern_State;", "<T:Ljava/lang/Object;>(ILedu/stanford/nlp/ling/tokensregex/SequenceMatcher$MatchedStates<TT;>;ZLedu/stanford/nlp/ling/tokensregex/SequencePattern$State;)Z", "LEduStanfordNlpLingTokensregexSequencePattern;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexSequencePattern_GroupEndState = { "GroupEndState", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, fields, 7, 0x8, 2, 1, 4, -1, -1, -1, -1 };
  return &_EduStanfordNlpLingTokensregexSequencePattern_GroupEndState;
}

@end

void EduStanfordNlpLingTokensregexSequencePattern_GroupEndState_initWithInt_(EduStanfordNlpLingTokensregexSequencePattern_GroupEndState *self, jint captureGroupId) {
  EduStanfordNlpLingTokensregexSequencePattern_State_init(self);
  self->captureGroupId_ = captureGroupId;
}

EduStanfordNlpLingTokensregexSequencePattern_GroupEndState *new_EduStanfordNlpLingTokensregexSequencePattern_GroupEndState_initWithInt_(jint captureGroupId) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequencePattern_GroupEndState, initWithInt_, captureGroupId)
}

EduStanfordNlpLingTokensregexSequencePattern_GroupEndState *create_EduStanfordNlpLingTokensregexSequencePattern_GroupEndState_initWithInt_(jint captureGroupId) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequencePattern_GroupEndState, initWithInt_, captureGroupId)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexSequencePattern_GroupEndState)

@implementation EduStanfordNlpLingTokensregexSequencePattern_ConjMatchStateInfo

- (instancetype)initWithInt:(jint)startBid
                    withInt:(jint)childCount
                    withInt:(jint)startPos {
  EduStanfordNlpLingTokensregexSequencePattern_ConjMatchStateInfo_initWithInt_withInt_withInt_(self, startBid, childCount, startPos);
  return self;
}

- (void)addChildBidWithInt:(jint)i
                   withInt:(jint)bid
                   withInt:(jint)pos {
  EduStanfordNlpLingTokensregexSequencePattern_ConjMatchStateInfo_addChildBidWithInt_withInt_withInt_(self, i, bid, pos);
}

- (jboolean)isAllChildMatched {
  {
    IOSObjectArray *a__ = reachableChildBids_;
    id<JavaUtilSet> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id<JavaUtilSet> const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id<JavaUtilSet> v = *b__++;
      if (v == nil || [v isEmpty]) return false;
    }
  }
  return true;
}

- (jboolean)isAllChildMatchedWithInt:(jint)index
                             withInt:(jint)bid
                             withInt:(jint)pos {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(reachableChildBids_))->size_; i++) {
    id<JavaUtilSet> v = IOSObjectArray_Get(reachableChildBids_, i);
    if (v == nil || [v isEmpty]) return false;
    if (i != index) {
      jboolean ok = false;
      for (EduStanfordNlpUtilPair * __strong p in v) {
        if ([((JavaLangInteger *) nil_chk([((EduStanfordNlpUtilPair *) nil_chk(p)) second])) intValue] == pos) {
          ok = true;
          break;
        }
      }
      if (!ok) {
        return false;
      }
    }
  }
  return true;
}

- (IOSIntArray *)getAllChildMatchedBidsWithInt:(jint)index
                                       withInt:(jint)bid
                                       withInt:(jint)pos {
  return EduStanfordNlpLingTokensregexSequencePattern_ConjMatchStateInfo_getAllChildMatchedBidsWithInt_withInt_withInt_(self, index, bid, pos);
}

- (void)updateKeepBidsWithJavaUtilBitSet:(JavaUtilBitSet *)bids {
  {
    IOSObjectArray *a__ = reachableChildBids_;
    id<JavaUtilSet> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id<JavaUtilSet> const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id<JavaUtilSet> v = *b__++;
      if (v != nil) {
        for (EduStanfordNlpUtilPair * __strong p in v) {
          [((JavaUtilBitSet *) nil_chk(bids)) setWithInt:[((JavaLangInteger *) nil_chk([((EduStanfordNlpUtilPair *) nil_chk(p)) first])) intValue]];
        }
      }
    }
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 2, 0, -1, -1, -1, -1 },
    { NULL, "[I", 0x2, 3, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:withInt:withInt:);
  methods[1].selector = @selector(addChildBidWithInt:withInt:withInt:);
  methods[2].selector = @selector(isAllChildMatched);
  methods[3].selector = @selector(isAllChildMatchedWithInt:withInt:withInt:);
  methods[4].selector = @selector(getAllChildMatchedBidsWithInt:withInt:withInt:);
  methods[5].selector = @selector(updateKeepBidsWithJavaUtilBitSet:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "startBid_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "startPos_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "childCount_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "reachableChildBids_", "[LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "III", "addChildBid", "isAllChildMatched", "getAllChildMatchedBids", "updateKeepBids", "LJavaUtilBitSet;", "[Ljava/util/Set<Ledu/stanford/nlp/util/Pair<Ljava/lang/Integer;Ljava/lang/Integer;>;>;", "LEduStanfordNlpLingTokensregexSequencePattern;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexSequencePattern_ConjMatchStateInfo = { "ConjMatchStateInfo", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, fields, 7, 0x8, 6, 4, 7, -1, -1, -1, -1 };
  return &_EduStanfordNlpLingTokensregexSequencePattern_ConjMatchStateInfo;
}

@end

void EduStanfordNlpLingTokensregexSequencePattern_ConjMatchStateInfo_initWithInt_withInt_withInt_(EduStanfordNlpLingTokensregexSequencePattern_ConjMatchStateInfo *self, jint startBid, jint childCount, jint startPos) {
  NSObject_init(self);
  self->startBid_ = startBid;
  self->startPos_ = startPos;
  self->childCount_ = childCount;
  self->reachableChildBids_ = [IOSObjectArray newArrayWithLength:childCount type:JavaUtilSet_class_()];
}

EduStanfordNlpLingTokensregexSequencePattern_ConjMatchStateInfo *new_EduStanfordNlpLingTokensregexSequencePattern_ConjMatchStateInfo_initWithInt_withInt_withInt_(jint startBid, jint childCount, jint startPos) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequencePattern_ConjMatchStateInfo, initWithInt_withInt_withInt_, startBid, childCount, startPos)
}

EduStanfordNlpLingTokensregexSequencePattern_ConjMatchStateInfo *create_EduStanfordNlpLingTokensregexSequencePattern_ConjMatchStateInfo_initWithInt_withInt_withInt_(jint startBid, jint childCount, jint startPos) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequencePattern_ConjMatchStateInfo, initWithInt_withInt_withInt_, startBid, childCount, startPos)
}

void EduStanfordNlpLingTokensregexSequencePattern_ConjMatchStateInfo_addChildBidWithInt_withInt_withInt_(EduStanfordNlpLingTokensregexSequencePattern_ConjMatchStateInfo *self, jint i, jint bid, jint pos) {
  if (IOSObjectArray_Get(nil_chk(self->reachableChildBids_), i) == nil) {
    (void) IOSObjectArray_SetAndConsume(self->reachableChildBids_, i, new_EduStanfordNlpUtilArraySet_init());
  }
  [((id<JavaUtilSet>) nil_chk(IOSObjectArray_Get(self->reachableChildBids_, i))) addWithId:new_EduStanfordNlpUtilPair_initWithId_withId_(JavaLangInteger_valueOfWithInt_(bid), JavaLangInteger_valueOfWithInt_(pos))];
}

IOSIntArray *EduStanfordNlpLingTokensregexSequencePattern_ConjMatchStateInfo_getAllChildMatchedBidsWithInt_withInt_withInt_(EduStanfordNlpLingTokensregexSequencePattern_ConjMatchStateInfo *self, jint index, jint bid, jint pos) {
  IOSIntArray *matchedBids = [IOSIntArray newArrayWithLength:((IOSObjectArray *) nil_chk(self->reachableChildBids_))->size_];
  for (jint i = 0; i < self->reachableChildBids_->size_; i++) {
    id<JavaUtilSet> v = IOSObjectArray_Get(self->reachableChildBids_, i);
    if (v == nil || [v isEmpty]) return nil;
    if (i != index) {
      jboolean ok = false;
      for (EduStanfordNlpUtilPair * __strong p in v) {
        if ([((JavaLangInteger *) nil_chk([((EduStanfordNlpUtilPair *) nil_chk(p)) second])) intValue] == pos) {
          ok = true;
          *IOSIntArray_GetRef(matchedBids, i) = [((JavaLangInteger *) nil_chk([p first])) intValue];
          break;
        }
      }
      if (!ok) {
        return nil;
      }
    }
    else {
      *IOSIntArray_GetRef(matchedBids, i) = bid;
    }
  }
  return matchedBids;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexSequencePattern_ConjMatchStateInfo)

@implementation EduStanfordNlpLingTokensregexSequencePattern_ConjStartState

- (instancetype)initWithInt:(jint)childCount {
  EduStanfordNlpLingTokensregexSequencePattern_ConjStartState_initWithInt_(self, childCount);
  return self;
}

- (jboolean)matchWithInt:(jint)bid
withEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates:(EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *)matchedStates
             withBoolean:(jboolean)consume
withEduStanfordNlpLingTokensregexSequencePattern_State:(EduStanfordNlpLingTokensregexSequencePattern_State *)prevState {
  [((EduStanfordNlpLingTokensregexSequenceMatcher_BranchStates *) nil_chk([((EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *) nil_chk(matchedStates)) getBranchStates])) setMatchStateInfoWithInt:bid withEduStanfordNlpLingTokensregexSequencePattern_State:self withId:new_EduStanfordNlpLingTokensregexSequencePattern_ConjMatchStateInfo_initWithInt_withInt_withInt_(bid, childCount_, matchedStates->curPosition_)];
  jboolean allMatch = true;
  if (next_ != nil) {
    jint i = 0;
    for (EduStanfordNlpLingTokensregexSequencePattern_State * __strong s in next_) {
      i++;
      jboolean m = [((EduStanfordNlpLingTokensregexSequencePattern_State *) nil_chk(s)) matchWithInt:[((EduStanfordNlpLingTokensregexSequenceMatcher_BranchStates *) nil_chk([matchedStates getBranchStates])) getBranchIdWithInt:bid withInt:i withInt:[((id<JavaUtilSet>) nil_chk(next_)) size]] withEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates:matchedStates withBoolean:consume];
      if (!m) {
        allMatch = false;
        break;
      }
    }
  }
  return allMatch;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(matchWithInt:withEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates:withBoolean:withEduStanfordNlpLingTokensregexSequencePattern_State:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "childCount_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "match", "ILEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates;ZLEduStanfordNlpLingTokensregexSequencePattern_State;", "<T:Ljava/lang/Object;>(ILedu/stanford/nlp/ling/tokensregex/SequenceMatcher$MatchedStates<TT;>;ZLedu/stanford/nlp/ling/tokensregex/SequencePattern$State;)Z", "LEduStanfordNlpLingTokensregexSequencePattern;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexSequencePattern_ConjStartState = { "ConjStartState", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, fields, 7, 0x8, 2, 1, 4, -1, -1, -1, -1 };
  return &_EduStanfordNlpLingTokensregexSequencePattern_ConjStartState;
}

@end

void EduStanfordNlpLingTokensregexSequencePattern_ConjStartState_initWithInt_(EduStanfordNlpLingTokensregexSequencePattern_ConjStartState *self, jint childCount) {
  EduStanfordNlpLingTokensregexSequencePattern_State_init(self);
  self->childCount_ = childCount;
}

EduStanfordNlpLingTokensregexSequencePattern_ConjStartState *new_EduStanfordNlpLingTokensregexSequencePattern_ConjStartState_initWithInt_(jint childCount) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequencePattern_ConjStartState, initWithInt_, childCount)
}

EduStanfordNlpLingTokensregexSequencePattern_ConjStartState *create_EduStanfordNlpLingTokensregexSequencePattern_ConjStartState_initWithInt_(jint childCount) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequencePattern_ConjStartState, initWithInt_, childCount)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexSequencePattern_ConjStartState)

@implementation EduStanfordNlpLingTokensregexSequencePattern_ConjEndState

- (instancetype)initWithEduStanfordNlpLingTokensregexSequencePattern_ConjStartState:(EduStanfordNlpLingTokensregexSequencePattern_ConjStartState *)startState
                                                                            withInt:(jint)childIndex {
  EduStanfordNlpLingTokensregexSequencePattern_ConjEndState_initWithEduStanfordNlpLingTokensregexSequencePattern_ConjStartState_withInt_(self, startState, childIndex);
  return self;
}

- (jboolean)matchWithInt:(jint)bid
withEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates:(EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *)matchedStates
             withBoolean:(jboolean)consume
withEduStanfordNlpLingTokensregexSequencePattern_State:(EduStanfordNlpLingTokensregexSequencePattern_State *)prevState {
  if (consume) {
    return false;
  }
  else {
    EduStanfordNlpLingTokensregexSequencePattern_ConjMatchStateInfo *stateInfo = (EduStanfordNlpLingTokensregexSequencePattern_ConjMatchStateInfo *) cast_chk([((EduStanfordNlpLingTokensregexSequenceMatcher_BranchStates *) nil_chk([((EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *) nil_chk(matchedStates)) getBranchStates])) getMatchStateInfoWithInt:bid withEduStanfordNlpLingTokensregexSequencePattern_State:startState_], [EduStanfordNlpLingTokensregexSequencePattern_ConjMatchStateInfo class]);
    if (stateInfo != nil) {
      EduStanfordNlpLingTokensregexSequencePattern_ConjMatchStateInfo_addChildBidWithInt_withInt_withInt_(stateInfo, childIndex_, bid, matchedStates->curPosition_);
      IOSIntArray *matchedBids = EduStanfordNlpLingTokensregexSequencePattern_ConjMatchStateInfo_getAllChildMatchedBidsWithInt_withInt_withInt_(stateInfo, childIndex_, bid, matchedStates->curPosition_);
      if (matchedBids != nil) {
        [((EduStanfordNlpLingTokensregexSequenceMatcher_BranchStates *) nil_chk([matchedStates getBranchStates])) addBidsToCollapseWithInt:bid withIntArray:matchedBids];
        return [super matchWithInt:bid withEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates:matchedStates withBoolean:consume withEduStanfordNlpLingTokensregexSequencePattern_State:prevState];
      }
    }
    return false;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpLingTokensregexSequencePattern_ConjStartState:withInt:);
  methods[1].selector = @selector(matchWithInt:withEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates:withBoolean:withEduStanfordNlpLingTokensregexSequencePattern_State:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "startState_", "LEduStanfordNlpLingTokensregexSequencePattern_ConjStartState;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "childIndex_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpLingTokensregexSequencePattern_ConjStartState;I", "match", "ILEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates;ZLEduStanfordNlpLingTokensregexSequencePattern_State;", "<T:Ljava/lang/Object;>(ILedu/stanford/nlp/ling/tokensregex/SequenceMatcher$MatchedStates<TT;>;ZLedu/stanford/nlp/ling/tokensregex/SequencePattern$State;)Z", "LEduStanfordNlpLingTokensregexSequencePattern;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexSequencePattern_ConjEndState = { "ConjEndState", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, fields, 7, 0x8, 2, 2, 4, -1, -1, -1, -1 };
  return &_EduStanfordNlpLingTokensregexSequencePattern_ConjEndState;
}

@end

void EduStanfordNlpLingTokensregexSequencePattern_ConjEndState_initWithEduStanfordNlpLingTokensregexSequencePattern_ConjStartState_withInt_(EduStanfordNlpLingTokensregexSequencePattern_ConjEndState *self, EduStanfordNlpLingTokensregexSequencePattern_ConjStartState *startState, jint childIndex) {
  EduStanfordNlpLingTokensregexSequencePattern_State_init(self);
  self->startState_ = startState;
  self->childIndex_ = childIndex;
}

EduStanfordNlpLingTokensregexSequencePattern_ConjEndState *new_EduStanfordNlpLingTokensregexSequencePattern_ConjEndState_initWithEduStanfordNlpLingTokensregexSequencePattern_ConjStartState_withInt_(EduStanfordNlpLingTokensregexSequencePattern_ConjStartState *startState, jint childIndex) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequencePattern_ConjEndState, initWithEduStanfordNlpLingTokensregexSequencePattern_ConjStartState_withInt_, startState, childIndex)
}

EduStanfordNlpLingTokensregexSequencePattern_ConjEndState *create_EduStanfordNlpLingTokensregexSequencePattern_ConjEndState_initWithEduStanfordNlpLingTokensregexSequencePattern_ConjStartState_withInt_(EduStanfordNlpLingTokensregexSequencePattern_ConjStartState *startState, jint childIndex) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequencePattern_ConjEndState, initWithEduStanfordNlpLingTokensregexSequencePattern_ConjStartState_withInt_, startState, childIndex)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexSequencePattern_ConjEndState)

@implementation EduStanfordNlpLingTokensregexSequencePattern_SeqStartState

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpLingTokensregexSequencePattern_SeqStartState_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)matchWithInt:(jint)bid
withEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates:(EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *)matchedStates
             withBoolean:(jboolean)consume
withEduStanfordNlpLingTokensregexSequencePattern_State:(EduStanfordNlpLingTokensregexSequencePattern_State *)prevState {
  if (consume) {
    if (((EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *) nil_chk(matchedStates))->curPosition_ == 0) {
      return [super matchWithInt:bid withEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates:matchedStates withBoolean:consume withEduStanfordNlpLingTokensregexSequencePattern_State:self];
    }
  }
  return false;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 0, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(matchWithInt:withEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates:withBoolean:withEduStanfordNlpLingTokensregexSequencePattern_State:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "match", "ILEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates;ZLEduStanfordNlpLingTokensregexSequencePattern_State;", "<T:Ljava/lang/Object;>(ILedu/stanford/nlp/ling/tokensregex/SequenceMatcher$MatchedStates<TT;>;ZLedu/stanford/nlp/ling/tokensregex/SequencePattern$State;)Z", "LEduStanfordNlpLingTokensregexSequencePattern;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexSequencePattern_SeqStartState = { "SeqStartState", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, NULL, 7, 0x8, 2, 0, 3, -1, -1, -1, -1 };
  return &_EduStanfordNlpLingTokensregexSequencePattern_SeqStartState;
}

@end

void EduStanfordNlpLingTokensregexSequencePattern_SeqStartState_init(EduStanfordNlpLingTokensregexSequencePattern_SeqStartState *self) {
  EduStanfordNlpLingTokensregexSequencePattern_State_init(self);
}

EduStanfordNlpLingTokensregexSequencePattern_SeqStartState *new_EduStanfordNlpLingTokensregexSequencePattern_SeqStartState_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequencePattern_SeqStartState, init)
}

EduStanfordNlpLingTokensregexSequencePattern_SeqStartState *create_EduStanfordNlpLingTokensregexSequencePattern_SeqStartState_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequencePattern_SeqStartState, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexSequencePattern_SeqStartState)

@implementation EduStanfordNlpLingTokensregexSequencePattern_SeqEndState

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpLingTokensregexSequencePattern_SeqEndState_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)matchWithInt:(jint)bid
withEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates:(EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *)matchedStates
             withBoolean:(jboolean)consume
withEduStanfordNlpLingTokensregexSequencePattern_State:(EduStanfordNlpLingTokensregexSequencePattern_State *)prevState {
  if (!consume) {
    if (((EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *) nil_chk(matchedStates))->curPosition_ == [((id<JavaUtilList>) nil_chk([matchedStates elements])) size] - 1) {
      return [super matchWithInt:bid withEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates:matchedStates withBoolean:consume withEduStanfordNlpLingTokensregexSequencePattern_State:self];
    }
  }
  return false;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 0, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(matchWithInt:withEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates:withBoolean:withEduStanfordNlpLingTokensregexSequencePattern_State:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "match", "ILEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates;ZLEduStanfordNlpLingTokensregexSequencePattern_State;", "<T:Ljava/lang/Object;>(ILedu/stanford/nlp/ling/tokensregex/SequenceMatcher$MatchedStates<TT;>;ZLedu/stanford/nlp/ling/tokensregex/SequencePattern$State;)Z", "LEduStanfordNlpLingTokensregexSequencePattern;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexSequencePattern_SeqEndState = { "SeqEndState", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, NULL, 7, 0x8, 2, 0, 3, -1, -1, -1, -1 };
  return &_EduStanfordNlpLingTokensregexSequencePattern_SeqEndState;
}

@end

void EduStanfordNlpLingTokensregexSequencePattern_SeqEndState_init(EduStanfordNlpLingTokensregexSequencePattern_SeqEndState *self) {
  EduStanfordNlpLingTokensregexSequencePattern_State_init(self);
}

EduStanfordNlpLingTokensregexSequencePattern_SeqEndState *new_EduStanfordNlpLingTokensregexSequencePattern_SeqEndState_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequencePattern_SeqEndState, init)
}

EduStanfordNlpLingTokensregexSequencePattern_SeqEndState *create_EduStanfordNlpLingTokensregexSequencePattern_SeqEndState_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequencePattern_SeqEndState, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexSequencePattern_SeqEndState)

@implementation EduStanfordNlpLingTokensregexSequencePattern_Frag

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpLingTokensregexSequencePattern_Frag_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithEduStanfordNlpLingTokensregexSequencePattern_State:(EduStanfordNlpLingTokensregexSequencePattern_State *)start {
  EduStanfordNlpLingTokensregexSequencePattern_Frag_initWithEduStanfordNlpLingTokensregexSequencePattern_State_(self, start);
  return self;
}

- (instancetype)initWithEduStanfordNlpLingTokensregexSequencePattern_State:(EduStanfordNlpLingTokensregexSequencePattern_State *)start
                                                           withJavaUtilSet:(id<JavaUtilSet>)outArg {
  EduStanfordNlpLingTokensregexSequencePattern_Frag_initWithEduStanfordNlpLingTokensregexSequencePattern_State_withJavaUtilSet_(self, start, outArg);
  return self;
}

- (void)addWithEduStanfordNlpLingTokensregexSequencePattern_State:(EduStanfordNlpLingTokensregexSequencePattern_State *)outState {
  if (out_ == nil) {
    out_ = new_JavaUtilLinkedHashSet_init();
  }
  [out_ addWithId:outState];
}

- (void)addWithJavaUtilCollection:(id<JavaUtilCollection>)outStates {
  if (out_ == nil) {
    out_ = new_JavaUtilLinkedHashSet_init();
  }
  [out_ addAllWithJavaUtilCollection:outStates];
}

- (void)connectWithEduStanfordNlpLingTokensregexSequencePattern_Frag:(EduStanfordNlpLingTokensregexSequencePattern_Frag *)f {
  for (EduStanfordNlpLingTokensregexSequencePattern_State * __strong s in nil_chk(out_)) {
    [((EduStanfordNlpLingTokensregexSequencePattern_State *) nil_chk(s)) addWithEduStanfordNlpLingTokensregexSequencePattern_State:((EduStanfordNlpLingTokensregexSequencePattern_Frag *) nil_chk(f))->start_];
  }
  out_ = ((EduStanfordNlpLingTokensregexSequencePattern_Frag *) nil_chk(f))->out_;
}

- (void)connectWithEduStanfordNlpLingTokensregexSequencePattern_State:(EduStanfordNlpLingTokensregexSequencePattern_State *)state {
  for (EduStanfordNlpLingTokensregexSequencePattern_State * __strong s in nil_chk(out_)) {
    [((EduStanfordNlpLingTokensregexSequencePattern_State *) nil_chk(s)) addWithEduStanfordNlpLingTokensregexSequencePattern_State:state];
  }
  out_ = new_JavaUtilLinkedHashSet_init();
  [((EduStanfordNlpLingTokensregexSequencePattern_State *) nil_chk(state)) updateOutStatesWithJavaUtilSet:out_];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 1, -1, 2, -1, -1 },
    { NULL, "V", 0x4, 3, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 3, 4, -1, 5, -1, -1 },
    { NULL, "V", 0x4, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 6, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithEduStanfordNlpLingTokensregexSequencePattern_State:);
  methods[2].selector = @selector(initWithEduStanfordNlpLingTokensregexSequencePattern_State:withJavaUtilSet:);
  methods[3].selector = @selector(addWithEduStanfordNlpLingTokensregexSequencePattern_State:);
  methods[4].selector = @selector(addWithJavaUtilCollection:);
  methods[5].selector = @selector(connectWithEduStanfordNlpLingTokensregexSequencePattern_Frag:);
  methods[6].selector = @selector(connectWithEduStanfordNlpLingTokensregexSequencePattern_State:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "start_", "LEduStanfordNlpLingTokensregexSequencePattern_State;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "out_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x0, -1, -1, 8, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpLingTokensregexSequencePattern_State;", "LEduStanfordNlpLingTokensregexSequencePattern_State;LJavaUtilSet;", "(Ledu/stanford/nlp/ling/tokensregex/SequencePattern$State;Ljava/util/Set<Ledu/stanford/nlp/ling/tokensregex/SequencePattern$State;>;)V", "add", "LJavaUtilCollection;", "(Ljava/util/Collection<Ledu/stanford/nlp/ling/tokensregex/SequencePattern$State;>;)V", "connect", "LEduStanfordNlpLingTokensregexSequencePattern_Frag;", "Ljava/util/Set<Ledu/stanford/nlp/ling/tokensregex/SequencePattern$State;>;", "LEduStanfordNlpLingTokensregexSequencePattern;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexSequencePattern_Frag = { "Frag", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, fields, 7, 0xa, 7, 2, 9, -1, -1, -1, -1 };
  return &_EduStanfordNlpLingTokensregexSequencePattern_Frag;
}

@end

void EduStanfordNlpLingTokensregexSequencePattern_Frag_init(EduStanfordNlpLingTokensregexSequencePattern_Frag *self) {
  NSObject_init(self);
}

EduStanfordNlpLingTokensregexSequencePattern_Frag *new_EduStanfordNlpLingTokensregexSequencePattern_Frag_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequencePattern_Frag, init)
}

EduStanfordNlpLingTokensregexSequencePattern_Frag *create_EduStanfordNlpLingTokensregexSequencePattern_Frag_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequencePattern_Frag, init)
}

void EduStanfordNlpLingTokensregexSequencePattern_Frag_initWithEduStanfordNlpLingTokensregexSequencePattern_State_(EduStanfordNlpLingTokensregexSequencePattern_Frag *self, EduStanfordNlpLingTokensregexSequencePattern_State *start) {
  NSObject_init(self);
  self->start_ = start;
  self->out_ = new_JavaUtilLinkedHashSet_init();
  [((EduStanfordNlpLingTokensregexSequencePattern_State *) nil_chk(start)) updateOutStatesWithJavaUtilSet:self->out_];
}

EduStanfordNlpLingTokensregexSequencePattern_Frag *new_EduStanfordNlpLingTokensregexSequencePattern_Frag_initWithEduStanfordNlpLingTokensregexSequencePattern_State_(EduStanfordNlpLingTokensregexSequencePattern_State *start) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequencePattern_Frag, initWithEduStanfordNlpLingTokensregexSequencePattern_State_, start)
}

EduStanfordNlpLingTokensregexSequencePattern_Frag *create_EduStanfordNlpLingTokensregexSequencePattern_Frag_initWithEduStanfordNlpLingTokensregexSequencePattern_State_(EduStanfordNlpLingTokensregexSequencePattern_State *start) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequencePattern_Frag, initWithEduStanfordNlpLingTokensregexSequencePattern_State_, start)
}

void EduStanfordNlpLingTokensregexSequencePattern_Frag_initWithEduStanfordNlpLingTokensregexSequencePattern_State_withJavaUtilSet_(EduStanfordNlpLingTokensregexSequencePattern_Frag *self, EduStanfordNlpLingTokensregexSequencePattern_State *start, id<JavaUtilSet> outArg) {
  NSObject_init(self);
  self->start_ = start;
  self->out_ = outArg;
}

EduStanfordNlpLingTokensregexSequencePattern_Frag *new_EduStanfordNlpLingTokensregexSequencePattern_Frag_initWithEduStanfordNlpLingTokensregexSequencePattern_State_withJavaUtilSet_(EduStanfordNlpLingTokensregexSequencePattern_State *start, id<JavaUtilSet> outArg) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequencePattern_Frag, initWithEduStanfordNlpLingTokensregexSequencePattern_State_withJavaUtilSet_, start, outArg)
}

EduStanfordNlpLingTokensregexSequencePattern_Frag *create_EduStanfordNlpLingTokensregexSequencePattern_Frag_initWithEduStanfordNlpLingTokensregexSequencePattern_State_withJavaUtilSet_(EduStanfordNlpLingTokensregexSequencePattern_State *start, id<JavaUtilSet> outArg) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequencePattern_Frag, initWithEduStanfordNlpLingTokensregexSequencePattern_State_withJavaUtilSet_, start, outArg)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexSequencePattern_Frag)

@implementation EduStanfordNlpLingTokensregexSequencePattern_$1

- (jboolean)matchesWithId:(id)o1
                   withId:(id)o2 {
  return [nil_chk(o1) isEqual:o2];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpLingTokensregexSequencePattern_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(matchesWithId:withId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "matches", "LNSObject;LNSObject;", "LEduStanfordNlpLingTokensregexSequencePattern;", "Ljava/lang/Object;Ledu/stanford/nlp/ling/tokensregex/SequencePattern$NodesMatchChecker<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexSequencePattern_$1 = { "", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, -1, 3, -1 };
  return &_EduStanfordNlpLingTokensregexSequencePattern_$1;
}

@end

void EduStanfordNlpLingTokensregexSequencePattern_$1_init(EduStanfordNlpLingTokensregexSequencePattern_$1 *self) {
  NSObject_init(self);
}

EduStanfordNlpLingTokensregexSequencePattern_$1 *new_EduStanfordNlpLingTokensregexSequencePattern_$1_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequencePattern_$1, init)
}

EduStanfordNlpLingTokensregexSequencePattern_$1 *create_EduStanfordNlpLingTokensregexSequencePattern_$1_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequencePattern_$1, init)
}
