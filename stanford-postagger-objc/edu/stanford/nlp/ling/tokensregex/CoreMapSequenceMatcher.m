//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/ling/tokensregex/CoreMapSequenceMatcher.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/ling/CoreAnnotations.h"
#include "edu/stanford/nlp/ling/tokensregex/CoreMapSequenceMatcher.h"
#include "edu/stanford/nlp/ling/tokensregex/SequenceMatcher.h"
#include "edu/stanford/nlp/ling/tokensregex/SequencePattern.h"
#include "edu/stanford/nlp/pipeline/ChunkAnnotationUtils.h"
#include "edu/stanford/nlp/pipeline/CoreMapAggregator.h"
#include "edu/stanford/nlp/util/CollectionUtils.h"
#include "edu/stanford/nlp/util/CoreMap.h"
#include "java/lang/Integer.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/function/Function.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface EduStanfordNlpLingTokensregexCoreMapSequenceMatcher ()

- (id<EduStanfordNlpUtilCoreMap>)createMergedChunkWithInt:(jint)groupStart
                                                  withInt:(jint)groupEnd;

@end

__attribute__((unused)) static id<EduStanfordNlpUtilCoreMap> EduStanfordNlpLingTokensregexCoreMapSequenceMatcher_createMergedChunkWithInt_withInt_(EduStanfordNlpLingTokensregexCoreMapSequenceMatcher *self, jint groupStart, jint groupEnd);

@interface EduStanfordNlpLingTokensregexCoreMapSequenceMatcher_$Lambda$1 : NSObject < JavaUtilFunctionFunction >

- (id)applyWithId:(id<JavaUtilList>)inArg;

@end

J2OBJC_STATIC_INIT(EduStanfordNlpLingTokensregexCoreMapSequenceMatcher_$Lambda$1)

inline EduStanfordNlpLingTokensregexCoreMapSequenceMatcher_$Lambda$1 *EduStanfordNlpLingTokensregexCoreMapSequenceMatcher_$Lambda$1_get_instance();
static EduStanfordNlpLingTokensregexCoreMapSequenceMatcher_$Lambda$1 *EduStanfordNlpLingTokensregexCoreMapSequenceMatcher_$Lambda$1_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpLingTokensregexCoreMapSequenceMatcher_$Lambda$1, instance, EduStanfordNlpLingTokensregexCoreMapSequenceMatcher_$Lambda$1 *)

__attribute__((unused)) static void EduStanfordNlpLingTokensregexCoreMapSequenceMatcher_$Lambda$1_init(EduStanfordNlpLingTokensregexCoreMapSequenceMatcher_$Lambda$1 *self);

__attribute__((unused)) static EduStanfordNlpLingTokensregexCoreMapSequenceMatcher_$Lambda$1 *new_EduStanfordNlpLingTokensregexCoreMapSequenceMatcher_$Lambda$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpLingTokensregexCoreMapSequenceMatcher_$Lambda$1 *create_EduStanfordNlpLingTokensregexCoreMapSequenceMatcher_$Lambda$1_init();

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpLingTokensregexCoreMapSequenceMatcher)

id<JavaUtilFunctionFunction> EduStanfordNlpLingTokensregexCoreMapSequenceMatcher_COREMAP_LIST_TO_STRING_CONVERTER;

@implementation EduStanfordNlpLingTokensregexCoreMapSequenceMatcher

- (instancetype)initWithEduStanfordNlpLingTokensregexSequencePattern:(EduStanfordNlpLingTokensregexSequencePattern *)pattern
                                                    withJavaUtilList:(id<JavaUtilList>)tokens {
  EduStanfordNlpLingTokensregexCoreMapSequenceMatcher_initWithEduStanfordNlpLingTokensregexSequencePattern_withJavaUtilList_(self, pattern, tokens);
  return self;
}

- (void)annotateGroupWithJavaUtilMap:(id<JavaUtilMap>)attributes {
  [self annotateGroupWithInt:0 withJavaUtilMap:attributes];
}

- (void)annotateGroupWithInt:(jint)group
             withJavaUtilMap:(id<JavaUtilMap>)attributes {
  jint groupStart = [self startWithInt:group];
  if (groupStart >= 0) {
    jint groupEnd = [self endWithInt:group];
    EduStanfordNlpPipelineChunkAnnotationUtils_annotateChunksWithJavaUtilList_withInt_withInt_withJavaUtilMap_(elements_, groupStart, groupEnd, attributes);
  }
}

- (id<JavaUtilList>)getMergedList {
  return [self getMergedListWithIntArray:[IOSIntArray newArrayWithInts:(jint[]){ 0 } count:1]];
}

- (id<JavaUtilList>)getMergedListWithIntArray:(IOSIntArray *)groups {
  id<JavaUtilList> res = new_JavaUtilArrayList_init();
  jint last = 0;
  id<JavaUtilList> orderedGroups = EduStanfordNlpUtilCollectionUtils_asListWithIntArray_(groups);
  JavaUtilCollections_sortWithJavaUtilList_(orderedGroups);
  for (JavaLangInteger *boxed__ in nil_chk(orderedGroups)) {
    jint group = [((JavaLangInteger *) nil_chk(boxed__)) intValue];
    jint groupStart = [self startWithInt:group];
    if (groupStart >= last) {
      [res addAllWithJavaUtilCollection:[((id<JavaUtilList>) nil_chk(elements_)) subListWithInt:last withInt:groupStart]];
      jint groupEnd = [self endWithInt:group];
      if (groupEnd - groupStart >= 1) {
        id<EduStanfordNlpUtilCoreMap> merged = EduStanfordNlpLingTokensregexCoreMapSequenceMatcher_createMergedChunkWithInt_withInt_(self, groupStart, groupEnd);
        [res addWithId:merged];
        last = groupEnd;
      }
    }
  }
  [res addAllWithJavaUtilCollection:[((id<JavaUtilList>) nil_chk(elements_)) subListWithInt:last withInt:[elements_ size]]];
  return res;
}

- (id<EduStanfordNlpUtilCoreMap>)mergeGroup {
  return [self mergeGroupWithInt:0];
}

- (id<EduStanfordNlpUtilCoreMap>)createMergedChunkWithInt:(jint)groupStart
                                                  withInt:(jint)groupEnd {
  return EduStanfordNlpLingTokensregexCoreMapSequenceMatcher_createMergedChunkWithInt_withInt_(self, groupStart, groupEnd);
}

- (id<EduStanfordNlpUtilCoreMap>)mergeGroupWithInt:(jint)group {
  jint groupStart = [self startWithInt:group];
  if (groupStart >= 0) {
    jint groupEnd = [self endWithInt:group];
    if (groupEnd - groupStart >= 1) {
      return EduStanfordNlpLingTokensregexCoreMapSequenceMatcher_createMergedChunkWithInt_withInt_(self, groupStart, groupEnd);
    }
  }
  return nil;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x1, 2, 5, -1, 6, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 7, -1, -1 },
    { NULL, "LJavaUtilList;", 0x81, 8, 9, -1, 10, -1, -1 },
    { NULL, "LEduStanfordNlpUtilCoreMap;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpUtilCoreMap;", 0x2, 11, 12, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpUtilCoreMap;", 0x1, 13, 14, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpLingTokensregexSequencePattern:withJavaUtilList:);
  methods[1].selector = @selector(annotateGroupWithJavaUtilMap:);
  methods[2].selector = @selector(annotateGroupWithInt:withJavaUtilMap:);
  methods[3].selector = @selector(getMergedList);
  methods[4].selector = @selector(getMergedListWithIntArray:);
  methods[5].selector = @selector(mergeGroup);
  methods[6].selector = @selector(createMergedChunkWithInt:withInt:);
  methods[7].selector = @selector(mergeGroupWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "COREMAP_LIST_TO_STRING_CONVERTER", "LJavaUtilFunctionFunction;", .constantValue.asLong = 0, 0x1c, -1, 15, 16, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpLingTokensregexSequencePattern;LJavaUtilList;", "(Ledu/stanford/nlp/ling/tokensregex/SequencePattern<TT;>;Ljava/util/List<+TT;>;)V", "annotateGroup", "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)V", "ILJavaUtilMap;", "(ILjava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)V", "()Ljava/util/List<Ledu/stanford/nlp/util/CoreMap;>;", "getMergedList", "[I", "([I)Ljava/util/List<Ledu/stanford/nlp/util/CoreMap;>;", "createMergedChunk", "II", "mergeGroup", "I", &EduStanfordNlpLingTokensregexCoreMapSequenceMatcher_COREMAP_LIST_TO_STRING_CONVERTER, "Ljava/util/function/Function<Ljava/util/List<+Ledu/stanford/nlp/util/CoreMap;>;Ljava/lang/String;>;", "LEduStanfordNlpLingTokensregexCoreMapSequenceMatcher_BasicCoreMapSequenceMatcher;", "<T::Ledu/stanford/nlp/util/CoreMap;>Ledu/stanford/nlp/ling/tokensregex/SequenceMatcher<TT;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexCoreMapSequenceMatcher = { "CoreMapSequenceMatcher", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, fields, 7, 0x1, 8, 1, -1, 17, -1, 18, -1 };
  return &_EduStanfordNlpLingTokensregexCoreMapSequenceMatcher;
}

+ (void)initialize {
  if (self == [EduStanfordNlpLingTokensregexCoreMapSequenceMatcher class]) {
    EduStanfordNlpLingTokensregexCoreMapSequenceMatcher_COREMAP_LIST_TO_STRING_CONVERTER = JreLoadStatic(EduStanfordNlpLingTokensregexCoreMapSequenceMatcher_$Lambda$1, instance);
    J2OBJC_SET_INITIALIZED(EduStanfordNlpLingTokensregexCoreMapSequenceMatcher)
  }
}

@end

void EduStanfordNlpLingTokensregexCoreMapSequenceMatcher_initWithEduStanfordNlpLingTokensregexSequencePattern_withJavaUtilList_(EduStanfordNlpLingTokensregexCoreMapSequenceMatcher *self, EduStanfordNlpLingTokensregexSequencePattern *pattern, id<JavaUtilList> tokens) {
  EduStanfordNlpLingTokensregexSequenceMatcher_initWithEduStanfordNlpLingTokensregexSequencePattern_withJavaUtilList_(self, pattern, tokens);
}

EduStanfordNlpLingTokensregexCoreMapSequenceMatcher *new_EduStanfordNlpLingTokensregexCoreMapSequenceMatcher_initWithEduStanfordNlpLingTokensregexSequencePattern_withJavaUtilList_(EduStanfordNlpLingTokensregexSequencePattern *pattern, id<JavaUtilList> tokens) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexCoreMapSequenceMatcher, initWithEduStanfordNlpLingTokensregexSequencePattern_withJavaUtilList_, pattern, tokens)
}

EduStanfordNlpLingTokensregexCoreMapSequenceMatcher *create_EduStanfordNlpLingTokensregexCoreMapSequenceMatcher_initWithEduStanfordNlpLingTokensregexSequencePattern_withJavaUtilList_(EduStanfordNlpLingTokensregexSequencePattern *pattern, id<JavaUtilList> tokens) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexCoreMapSequenceMatcher, initWithEduStanfordNlpLingTokensregexSequencePattern_withJavaUtilList_, pattern, tokens)
}

id<EduStanfordNlpUtilCoreMap> EduStanfordNlpLingTokensregexCoreMapSequenceMatcher_createMergedChunkWithInt_withInt_(EduStanfordNlpLingTokensregexCoreMapSequenceMatcher *self, jint groupStart, jint groupEnd) {
  id<EduStanfordNlpUtilCoreMap> merged = nil;
  if (merged == nil) {
    merged = [((EduStanfordNlpPipelineCoreMapAggregator *) nil_chk(EduStanfordNlpPipelineCoreMapAggregator_getDefaultAggregator())) mergeWithJavaUtilList:self->elements_ withInt:groupStart withInt:groupEnd];
  }
  return merged;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexCoreMapSequenceMatcher)

@implementation EduStanfordNlpLingTokensregexCoreMapSequenceMatcher_BasicCoreMapSequenceMatcher

- (instancetype)initWithEduStanfordNlpLingTokensregexSequencePattern:(EduStanfordNlpLingTokensregexSequencePattern *)pattern
                                       withEduStanfordNlpUtilCoreMap:(id<EduStanfordNlpUtilCoreMap>)annotation {
  EduStanfordNlpLingTokensregexCoreMapSequenceMatcher_BasicCoreMapSequenceMatcher_initWithEduStanfordNlpLingTokensregexSequencePattern_withEduStanfordNlpUtilCoreMap_(self, pattern, annotation);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpLingTokensregexSequencePattern:withEduStanfordNlpUtilCoreMap:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "annotation_", "LEduStanfordNlpUtilCoreMap;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpLingTokensregexSequencePattern;LEduStanfordNlpUtilCoreMap;", "(Ledu/stanford/nlp/ling/tokensregex/SequencePattern<Ledu/stanford/nlp/util/CoreMap;>;Ledu/stanford/nlp/util/CoreMap;)V", "LEduStanfordNlpLingTokensregexCoreMapSequenceMatcher;", "Ledu/stanford/nlp/ling/tokensregex/CoreMapSequenceMatcher<Ledu/stanford/nlp/util/CoreMap;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexCoreMapSequenceMatcher_BasicCoreMapSequenceMatcher = { "BasicCoreMapSequenceMatcher", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, fields, 7, 0x9, 1, 1, 2, -1, -1, 3, -1 };
  return &_EduStanfordNlpLingTokensregexCoreMapSequenceMatcher_BasicCoreMapSequenceMatcher;
}

@end

void EduStanfordNlpLingTokensregexCoreMapSequenceMatcher_BasicCoreMapSequenceMatcher_initWithEduStanfordNlpLingTokensregexSequencePattern_withEduStanfordNlpUtilCoreMap_(EduStanfordNlpLingTokensregexCoreMapSequenceMatcher_BasicCoreMapSequenceMatcher *self, EduStanfordNlpLingTokensregexSequencePattern *pattern, id<EduStanfordNlpUtilCoreMap> annotation) {
  EduStanfordNlpLingTokensregexCoreMapSequenceMatcher_initWithEduStanfordNlpLingTokensregexSequencePattern_withJavaUtilList_(self, pattern, [((id<EduStanfordNlpUtilCoreMap>) nil_chk(annotation)) getWithIOSClass:EduStanfordNlpLingCoreAnnotations_TokensAnnotation_class_()]);
  self->annotation_ = annotation;
  self->nodesToStringConverter_ = JreLoadStatic(EduStanfordNlpLingTokensregexCoreMapSequenceMatcher, COREMAP_LIST_TO_STRING_CONVERTER);
}

EduStanfordNlpLingTokensregexCoreMapSequenceMatcher_BasicCoreMapSequenceMatcher *new_EduStanfordNlpLingTokensregexCoreMapSequenceMatcher_BasicCoreMapSequenceMatcher_initWithEduStanfordNlpLingTokensregexSequencePattern_withEduStanfordNlpUtilCoreMap_(EduStanfordNlpLingTokensregexSequencePattern *pattern, id<EduStanfordNlpUtilCoreMap> annotation) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexCoreMapSequenceMatcher_BasicCoreMapSequenceMatcher, initWithEduStanfordNlpLingTokensregexSequencePattern_withEduStanfordNlpUtilCoreMap_, pattern, annotation)
}

EduStanfordNlpLingTokensregexCoreMapSequenceMatcher_BasicCoreMapSequenceMatcher *create_EduStanfordNlpLingTokensregexCoreMapSequenceMatcher_BasicCoreMapSequenceMatcher_initWithEduStanfordNlpLingTokensregexSequencePattern_withEduStanfordNlpUtilCoreMap_(EduStanfordNlpLingTokensregexSequencePattern *pattern, id<EduStanfordNlpUtilCoreMap> annotation) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexCoreMapSequenceMatcher_BasicCoreMapSequenceMatcher, initWithEduStanfordNlpLingTokensregexSequencePattern_withEduStanfordNlpUtilCoreMap_, pattern, annotation)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexCoreMapSequenceMatcher_BasicCoreMapSequenceMatcher)

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpLingTokensregexCoreMapSequenceMatcher_$Lambda$1)

@implementation EduStanfordNlpLingTokensregexCoreMapSequenceMatcher_$Lambda$1

- (id)applyWithId:(id<JavaUtilList>)inArg {
  return (inArg != nil) ? EduStanfordNlpPipelineChunkAnnotationUtils_getTokenTextWithJavaUtilList_withIOSClass_(inArg, EduStanfordNlpLingCoreAnnotations_TextAnnotation_class_()) : nil;
}

- (id<JavaUtilFunctionFunction>)andThenWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_andThenWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilFunctionFunction>)composeWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_composeWithJavaUtilFunctionFunction_(self, arg0);
}

+ (void)initialize {
  if (self == [EduStanfordNlpLingTokensregexCoreMapSequenceMatcher_$Lambda$1 class]) {
    EduStanfordNlpLingTokensregexCoreMapSequenceMatcher_$Lambda$1_instance = new_EduStanfordNlpLingTokensregexCoreMapSequenceMatcher_$Lambda$1_init();
    J2OBJC_SET_INITIALIZED(EduStanfordNlpLingTokensregexCoreMapSequenceMatcher_$Lambda$1)
  }
}

@end

void EduStanfordNlpLingTokensregexCoreMapSequenceMatcher_$Lambda$1_init(EduStanfordNlpLingTokensregexCoreMapSequenceMatcher_$Lambda$1 *self) {
  NSObject_init(self);
}

EduStanfordNlpLingTokensregexCoreMapSequenceMatcher_$Lambda$1 *new_EduStanfordNlpLingTokensregexCoreMapSequenceMatcher_$Lambda$1_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexCoreMapSequenceMatcher_$Lambda$1, init)
}

EduStanfordNlpLingTokensregexCoreMapSequenceMatcher_$Lambda$1 *create_EduStanfordNlpLingTokensregexCoreMapSequenceMatcher_$Lambda$1_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexCoreMapSequenceMatcher_$Lambda$1, init)
}
