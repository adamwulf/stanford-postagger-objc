//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/ling/tokensregex/Env.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/ling/tokensregex/Env.h"
#include "edu/stanford/nlp/ling/tokensregex/NodePattern.h"
#include "edu/stanford/nlp/ling/tokensregex/SequencePattern.h"
#include "edu/stanford/nlp/ling/tokensregex/types/Expressions.h"
#include "edu/stanford/nlp/ling/tokensregex/types/Tags.h"
#include "edu/stanford/nlp/ling/tokensregex/types/Value.h"
#include "edu/stanford/nlp/pipeline/CoreMapAggregator.h"
#include "edu/stanford/nlp/pipeline/CoreMapAttributeAggregator.h"
#include "edu/stanford/nlp/process/CoreLabelTokenFactory.h"
#include "edu/stanford/nlp/util/Pair.h"
#include "java/lang/Error.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/ThreadLocal.h"
#include "java/util/Arrays.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/Stack.h"
#include "java/util/function/Function.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"

@interface EduStanfordNlpLingTokensregexEnv () {
 @public
  EduStanfordNlpPipelineCoreMapAggregator *defaultTokensAggregator_;
}

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpLingTokensregexEnv, defaultTokensAggregator_, EduStanfordNlpPipelineCoreMapAggregator *)

inline JavaUtilRegexPattern *EduStanfordNlpLingTokensregexEnv_get_STRING_REGEX_VAR_NAME_PATTERN();
static JavaUtilRegexPattern *EduStanfordNlpLingTokensregexEnv_STRING_REGEX_VAR_NAME_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpLingTokensregexEnv, STRING_REGEX_VAR_NAME_PATTERN, JavaUtilRegexPattern *)

@interface EduStanfordNlpLingTokensregexEnv_Binder : NSObject

@end

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpLingTokensregexEnv)

@implementation EduStanfordNlpLingTokensregexEnv

- (instancetype)initWithEduStanfordNlpLingTokensregexSequencePattern_Parser:(id<EduStanfordNlpLingTokensregexSequencePattern_Parser>)p {
  EduStanfordNlpLingTokensregexEnv_initWithEduStanfordNlpLingTokensregexSequencePattern_Parser_(self, p);
  return self;
}

- (void)initDefaultBindings {
  [self bindWithNSString:@"FALSE" withId:JreLoadStatic(EduStanfordNlpLingTokensregexTypesExpressions, FALSE)];
  [self bindWithNSString:@"TRUE" withId:JreLoadStatic(EduStanfordNlpLingTokensregexTypesExpressions, TRUE)];
  [self bindWithNSString:@"NIL" withId:JreLoadStatic(EduStanfordNlpLingTokensregexTypesExpressions, NIL)];
  [self bindWithNSString:@"ENV" withId:self];
  [self bindWithNSString:@"tags" withId:EduStanfordNlpLingTokensregexTypesTags_TagsAnnotation_class_()];
}

- (id<JavaUtilMap>)getDefaults {
  return defaults_;
}

- (void)setDefaultsWithJavaUtilMap:(id<JavaUtilMap>)defaults {
  self->defaults_ = defaults;
}

- (id<JavaUtilMap>)getDefaultTokensAggregators {
  return defaultTokensAggregators_;
}

- (void)setDefaultTokensAggregatorsWithJavaUtilMap:(id<JavaUtilMap>)defaultTokensAggregators {
  self->defaultTokensAggregators_ = defaultTokensAggregators;
}

- (EduStanfordNlpPipelineCoreMapAggregator *)getDefaultTokensAggregator {
  if (defaultTokensAggregator_ == nil && (defaultTokensAggregators_ != nil || aggregateToTokens_)) {
    EduStanfordNlpProcessCoreLabelTokenFactory *tokenFactory = (aggregateToTokens_) ? new_EduStanfordNlpProcessCoreLabelTokenFactory_init() : nil;
    id<JavaUtilMap> aggregators = defaultTokensAggregators_;
    if (aggregators == nil) {
      aggregators = JreLoadStatic(EduStanfordNlpPipelineCoreMapAttributeAggregator, DEFAULT_NUMERIC_TOKENS_AGGREGATORS);
    }
    defaultTokensAggregator_ = EduStanfordNlpPipelineCoreMapAggregator_getAggregatorWithJavaUtilMap_withIOSClass_withEduStanfordNlpProcessCoreLabelTokenFactory_(aggregators, nil, tokenFactory);
  }
  return defaultTokensAggregator_;
}

- (IOSClass *)getDefaultTextAnnotationKey {
  return defaultTextAnnotationKey_;
}

- (void)setDefaultTextAnnotationKeyWithIOSClass:(IOSClass *)defaultTextAnnotationKey {
  self->defaultTextAnnotationKey_ = defaultTextAnnotationKey;
}

- (IOSClass *)getDefaultTokensAnnotationKey {
  return defaultTokensAnnotationKey_;
}

- (void)setDefaultTokensAnnotationKeyWithIOSClass:(IOSClass *)defaultTokensAnnotationKey {
  self->defaultTokensAnnotationKey_ = defaultTokensAnnotationKey;
}

- (id<JavaUtilList>)getDefaultTokensResultAnnotationKey {
  return defaultTokensResultAnnotationKey_;
}

- (void)setDefaultTokensResultAnnotationKeyWithIOSClassArray:(IOSObjectArray *)defaultTokensResultAnnotationKey {
  self->defaultTokensResultAnnotationKey_ = JavaUtilArrays_asListWithNSObjectArray_(defaultTokensResultAnnotationKey);
}

- (void)setDefaultTokensResultAnnotationKeyWithJavaUtilList:(id<JavaUtilList>)defaultTokensResultAnnotationKey {
  self->defaultTokensResultAnnotationKey_ = defaultTokensResultAnnotationKey;
}

- (id<JavaUtilList>)getDefaultResultAnnotationKey {
  return defaultResultAnnotationKey_;
}

- (void)setDefaultResultAnnotationKeyWithIOSClassArray:(IOSObjectArray *)defaultResultAnnotationKey {
  self->defaultResultAnnotationKey_ = JavaUtilArrays_asListWithNSObjectArray_(defaultResultAnnotationKey);
}

- (void)setDefaultResultAnnotationKeyWithJavaUtilList:(id<JavaUtilList>)defaultResultAnnotationKey {
  self->defaultResultAnnotationKey_ = defaultResultAnnotationKey;
}

- (IOSClass *)getDefaultNestedResultsAnnotationKey {
  return defaultNestedResultsAnnotationKey_;
}

- (void)setDefaultNestedResultsAnnotationKeyWithIOSClass:(IOSClass *)defaultNestedResultsAnnotationKey {
  self->defaultNestedResultsAnnotationKey_ = defaultNestedResultsAnnotationKey;
}

- (id<JavaUtilFunctionFunction>)getDefaultResultsAnnotationExtractor {
  return defaultResultsAnnotationExtractor_;
}

- (void)setDefaultResultsAnnotationExtractorWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)defaultResultsAnnotationExtractor {
  self->defaultResultsAnnotationExtractor_ = defaultResultsAnnotationExtractor;
}

- (IOSClass *)getSequenceMatchResultExtractor {
  return sequenceMatchResultExtractor_;
}

- (void)setSequenceMatchResultExtractorWithIOSClass:(IOSClass *)sequenceMatchResultExtractor {
  self->sequenceMatchResultExtractor_ = sequenceMatchResultExtractor;
}

- (IOSClass *)getStringMatchResultExtractor {
  return stringMatchResultExtractor_;
}

- (void)setStringMatchResultExtractorWithIOSClass:(IOSClass *)stringMatchResultExtractor {
  self->stringMatchResultExtractor_ = stringMatchResultExtractor;
}

- (id<JavaUtilMap>)getVariables {
  return variables_;
}

- (void)setVariablesWithJavaUtilMap:(id<JavaUtilMap>)variables {
  self->variables_ = variables;
}

- (void)clearVariables {
  [((id<JavaUtilMap>) nil_chk(self->variables_)) clear];
}

- (jint)getDefaultStringPatternFlags {
  return defaultStringPatternFlags_;
}

- (void)setDefaultStringPatternFlagsWithInt:(jint)defaultStringPatternFlags {
  self->defaultStringPatternFlags_ = defaultStringPatternFlags;
}

- (jint)getDefaultStringMatchFlags {
  return defaultStringMatchFlags_;
}

- (void)setDefaultStringMatchFlagsWithInt:(jint)defaultStringMatchFlags {
  self->defaultStringMatchFlags_ = defaultStringMatchFlags;
}

- (void)bindStringRegexWithNSString:(NSString *)var
                       withNSString:(NSString *)regex {
  if (![((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(EduStanfordNlpLingTokensregexEnv_STRING_REGEX_VAR_NAME_PATTERN)) matcherWithJavaLangCharSequence:var])) matches]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"StringRegex binding error: Invalid variable name ", var));
  }
  JavaUtilRegexPattern *varPattern = JavaUtilRegexPattern_compileWithNSString_(JavaUtilRegexPattern_quoteWithNSString_(var));
  NSString *replace = JavaUtilRegexMatcher_quoteReplacementWithNSString_(regex);
  (void) [((id<JavaUtilMap>) nil_chk(stringRegexVariables_)) putWithId:var withId:new_EduStanfordNlpUtilPair_initWithId_withId_(varPattern, replace)];
}

- (NSString *)expandStringRegexWithNSString:(NSString *)regex {
  NSString *expanded = regex;
  for (id<JavaUtilMap_Entry> __strong stringPairEntry in nil_chk([((id<JavaUtilMap>) nil_chk(stringRegexVariables_)) entrySet])) {
    EduStanfordNlpUtilPair *p = [((id<JavaUtilMap_Entry>) nil_chk(stringPairEntry)) getValue];
    expanded = [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk([((EduStanfordNlpUtilPair *) nil_chk(p)) first])) matcherWithJavaLangCharSequence:expanded])) replaceAllWithNSString:[p second]];
  }
  return expanded;
}

- (JavaUtilRegexPattern *)getStringPatternWithNSString:(NSString *)regex {
  NSString *expanded = [self expandStringRegexWithNSString:regex];
  return JavaUtilRegexPattern_compileWithNSString_withInt_(expanded, defaultStringPatternFlags_);
}

- (void)bindWithNSString:(NSString *)name
                  withId:(id)obj {
  if (obj != nil) {
    (void) [((id<JavaUtilMap>) nil_chk(variables_)) putWithId:name withId:obj];
  }
  else {
    (void) [((id<JavaUtilMap>) nil_chk(variables_)) removeWithId:name];
  }
}

- (void)bindWithNSString:(NSString *)name
withEduStanfordNlpLingTokensregexSequencePattern:(EduStanfordNlpLingTokensregexSequencePattern *)pattern {
  [self bindWithNSString:name withId:[((EduStanfordNlpLingTokensregexSequencePattern *) nil_chk(pattern)) getPatternExpr]];
}

- (void)unbindWithNSString:(NSString *)name {
  [self bindWithNSString:name withEduStanfordNlpLingTokensregexSequencePattern:nil];
}

- (EduStanfordNlpLingTokensregexNodePattern *)getNodePatternWithNSString:(NSString *)name {
  id obj = [((id<JavaUtilMap>) nil_chk(variables_)) getWithId:name];
  if (obj != nil) {
    if ([obj isKindOfClass:[EduStanfordNlpLingTokensregexSequencePattern class]]) {
      EduStanfordNlpLingTokensregexSequencePattern *seqPattern = (EduStanfordNlpLingTokensregexSequencePattern *) cast_chk(obj, [EduStanfordNlpLingTokensregexSequencePattern class]);
      if ([[seqPattern getPatternExpr] isKindOfClass:[EduStanfordNlpLingTokensregexSequencePattern_NodePatternExpr class]]) {
        return ((EduStanfordNlpLingTokensregexSequencePattern_NodePatternExpr *) nil_chk(((EduStanfordNlpLingTokensregexSequencePattern_NodePatternExpr *) cast_chk([seqPattern getPatternExpr], [EduStanfordNlpLingTokensregexSequencePattern_NodePatternExpr class]))))->nodePattern_;
      }
      else {
        @throw new_JavaLangError_initWithNSString_(JreStrcat("$@$$", @"Invalid node pattern class: ", [((EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *) nil_chk([seqPattern getPatternExpr])) getClass], @" for variable ", name));
      }
    }
    else if ([obj isKindOfClass:[EduStanfordNlpLingTokensregexSequencePattern_NodePatternExpr class]]) {
      EduStanfordNlpLingTokensregexSequencePattern_NodePatternExpr *pe = (EduStanfordNlpLingTokensregexSequencePattern_NodePatternExpr *) cast_chk(obj, [EduStanfordNlpLingTokensregexSequencePattern_NodePatternExpr class]);
      return pe->nodePattern_;
    }
    else if ([obj isKindOfClass:[EduStanfordNlpLingTokensregexNodePattern class]]) {
      return (EduStanfordNlpLingTokensregexNodePattern *) cast_chk(obj, [EduStanfordNlpLingTokensregexNodePattern class]);
    }
    else if ([obj isKindOfClass:[NSString class]]) {
      @try {
        EduStanfordNlpLingTokensregexSequencePattern_NodePatternExpr *pe = (EduStanfordNlpLingTokensregexSequencePattern_NodePatternExpr *) cast_chk([((id<EduStanfordNlpLingTokensregexSequencePattern_Parser>) nil_chk(parser_)) parseNodeWithEduStanfordNlpLingTokensregexEnv:self withNSString:(NSString *) cast_chk(obj, [NSString class])], [EduStanfordNlpLingTokensregexSequencePattern_NodePatternExpr class]);
        return ((EduStanfordNlpLingTokensregexSequencePattern_NodePatternExpr *) nil_chk(pe))->nodePattern_;
      }
      @catch (JavaLangException *pex) {
        @throw new_JavaLangRuntimeException_initWithNSString_withNSException_(JreStrcat("$@$", @"Error parsing ", obj, @" to node pattern"), pex);
      }
    }
    else {
      @throw new_JavaLangError_initWithNSString_(JreStrcat("$@$$", @"Invalid node pattern variable class: ", [obj getClass], @" for variable ", name));
    }
  }
  return nil;
}

- (EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *)getSequencePatternExprWithNSString:(NSString *)name
                                                                                     withBoolean:(jboolean)copy_ {
  id obj = [((id<JavaUtilMap>) nil_chk(variables_)) getWithId:name];
  if (obj != nil) {
    if ([obj isKindOfClass:[EduStanfordNlpLingTokensregexSequencePattern class]]) {
      EduStanfordNlpLingTokensregexSequencePattern *seqPattern = (EduStanfordNlpLingTokensregexSequencePattern *) cast_chk(obj, [EduStanfordNlpLingTokensregexSequencePattern class]);
      return [seqPattern getPatternExpr];
    }
    else if ([obj isKindOfClass:[EduStanfordNlpLingTokensregexSequencePattern_PatternExpr class]]) {
      EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *pe = (EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *) cast_chk(obj, [EduStanfordNlpLingTokensregexSequencePattern_PatternExpr class]);
      return (copy_) ? [pe copy__] : pe;
    }
    else if ([obj isKindOfClass:[EduStanfordNlpLingTokensregexNodePattern class]]) {
      return new_EduStanfordNlpLingTokensregexSequencePattern_NodePatternExpr_initWithEduStanfordNlpLingTokensregexNodePattern_((EduStanfordNlpLingTokensregexNodePattern *) cast_chk(obj, [EduStanfordNlpLingTokensregexNodePattern class]));
    }
    else if ([obj isKindOfClass:[NSString class]]) {
      @try {
        return [((id<EduStanfordNlpLingTokensregexSequencePattern_Parser>) nil_chk(parser_)) parseSequenceWithEduStanfordNlpLingTokensregexEnv:self withNSString:(NSString *) cast_chk(obj, [NSString class])];
      }
      @catch (JavaLangException *pex) {
        @throw new_JavaLangRuntimeException_initWithNSString_withNSException_(JreStrcat("$@$", @"Error parsing ", obj, @" to sequence pattern"), pex);
      }
    }
    else {
      @throw new_JavaLangError_initWithNSString_(JreStrcat("$@", @"Invalid sequence pattern variable class: ", [obj getClass]));
    }
  }
  return nil;
}

- (id)getWithNSString:(NSString *)name {
  return [((id<JavaUtilMap>) nil_chk(variables_)) getWithId:name];
}

- (void)pushWithNSString:(NSString *)name
                  withId:(id)value {
  id<JavaUtilMap> vars = [((JavaLangThreadLocal *) nil_chk(threadLocalVariables_)) get];
  if (vars == nil) {
    [((JavaLangThreadLocal *) nil_chk(threadLocalVariables_)) setWithId:vars = new_JavaUtilHashMap_init()];
  }
  JavaUtilStack *stack = (JavaUtilStack *) cast_chk([vars getWithId:name], [JavaUtilStack class]);
  if (stack == nil) {
    (void) [vars putWithId:name withId:stack = new_JavaUtilStack_init()];
  }
  (void) [stack pushWithId:value];
}

- (id)popWithNSString:(NSString *)name {
  id<JavaUtilMap> vars = [((JavaLangThreadLocal *) nil_chk(threadLocalVariables_)) get];
  if (vars == nil) return nil;
  JavaUtilStack *stack = (JavaUtilStack *) cast_chk([vars getWithId:name], [JavaUtilStack class]);
  if (stack == nil || [stack isEmpty]) {
    return nil;
  }
  else {
    return [stack pop];
  }
}

- (id)peekWithNSString:(NSString *)name {
  id<JavaUtilMap> vars = [((JavaLangThreadLocal *) nil_chk(threadLocalVariables_)) get];
  if (vars == nil) return nil;
  JavaUtilStack *stack = (JavaUtilStack *) cast_chk([vars getWithId:name], [JavaUtilStack class]);
  if (stack == nil || [stack isEmpty]) {
    return nil;
  }
  else {
    return [stack peek];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 5, -1, -1 },
    { NULL, "V", 0x1, 6, 3, -1, 7, -1, -1 },
    { NULL, "LEduStanfordNlpPipelineCoreMapAggregator;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LIOSClass;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "LIOSClass;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 9, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 11, -1, -1 },
    { NULL, "V", 0x81, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 14, -1, 15, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 11, -1, -1 },
    { NULL, "V", 0x81, 16, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 14, -1, 15, -1, -1 },
    { NULL, "LIOSClass;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 9, -1, -1, -1, -1 },
    { NULL, "LJavaUtilFunctionFunction;", 0x1, -1, -1, -1, 18, -1, -1 },
    { NULL, "V", 0x1, 19, 20, -1, 21, -1, -1 },
    { NULL, "LIOSClass;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 9, -1, -1, -1, -1 },
    { NULL, "LIOSClass;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 9, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 24, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 26, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 27, 26, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 29, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 30, 31, -1, -1, -1, -1 },
    { NULL, "LJavaUtilRegexPattern;", 0x1, 32, 31, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 33, 34, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 33, 35, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 36, 31, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexNodePattern;", 0x1, 37, 31, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexSequencePattern_PatternExpr;", 0x1, 38, 39, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 40, 31, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 41, 34, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 42, 31, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 43, 31, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpLingTokensregexSequencePattern_Parser:);
  methods[1].selector = @selector(initDefaultBindings);
  methods[2].selector = @selector(getDefaults);
  methods[3].selector = @selector(setDefaultsWithJavaUtilMap:);
  methods[4].selector = @selector(getDefaultTokensAggregators);
  methods[5].selector = @selector(setDefaultTokensAggregatorsWithJavaUtilMap:);
  methods[6].selector = @selector(getDefaultTokensAggregator);
  methods[7].selector = @selector(getDefaultTextAnnotationKey);
  methods[8].selector = @selector(setDefaultTextAnnotationKeyWithIOSClass:);
  methods[9].selector = @selector(getDefaultTokensAnnotationKey);
  methods[10].selector = @selector(setDefaultTokensAnnotationKeyWithIOSClass:);
  methods[11].selector = @selector(getDefaultTokensResultAnnotationKey);
  methods[12].selector = @selector(setDefaultTokensResultAnnotationKeyWithIOSClassArray:);
  methods[13].selector = @selector(setDefaultTokensResultAnnotationKeyWithJavaUtilList:);
  methods[14].selector = @selector(getDefaultResultAnnotationKey);
  methods[15].selector = @selector(setDefaultResultAnnotationKeyWithIOSClassArray:);
  methods[16].selector = @selector(setDefaultResultAnnotationKeyWithJavaUtilList:);
  methods[17].selector = @selector(getDefaultNestedResultsAnnotationKey);
  methods[18].selector = @selector(setDefaultNestedResultsAnnotationKeyWithIOSClass:);
  methods[19].selector = @selector(getDefaultResultsAnnotationExtractor);
  methods[20].selector = @selector(setDefaultResultsAnnotationExtractorWithJavaUtilFunctionFunction:);
  methods[21].selector = @selector(getSequenceMatchResultExtractor);
  methods[22].selector = @selector(setSequenceMatchResultExtractorWithIOSClass:);
  methods[23].selector = @selector(getStringMatchResultExtractor);
  methods[24].selector = @selector(setStringMatchResultExtractorWithIOSClass:);
  methods[25].selector = @selector(getVariables);
  methods[26].selector = @selector(setVariablesWithJavaUtilMap:);
  methods[27].selector = @selector(clearVariables);
  methods[28].selector = @selector(getDefaultStringPatternFlags);
  methods[29].selector = @selector(setDefaultStringPatternFlagsWithInt:);
  methods[30].selector = @selector(getDefaultStringMatchFlags);
  methods[31].selector = @selector(setDefaultStringMatchFlagsWithInt:);
  methods[32].selector = @selector(bindStringRegexWithNSString:withNSString:);
  methods[33].selector = @selector(expandStringRegexWithNSString:);
  methods[34].selector = @selector(getStringPatternWithNSString:);
  methods[35].selector = @selector(bindWithNSString:withId:);
  methods[36].selector = @selector(bindWithNSString:withEduStanfordNlpLingTokensregexSequencePattern:);
  methods[37].selector = @selector(unbindWithNSString:);
  methods[38].selector = @selector(getNodePatternWithNSString:);
  methods[39].selector = @selector(getSequencePatternExprWithNSString:withBoolean:);
  methods[40].selector = @selector(getWithNSString:);
  methods[41].selector = @selector(pushWithNSString:withId:);
  methods[42].selector = @selector(popWithNSString:);
  methods[43].selector = @selector(peekWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "parser_", "LEduStanfordNlpLingTokensregexSequencePattern_Parser;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "variables_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x0, -1, -1, 44, -1 },
    { "threadLocalVariables_", "LJavaLangThreadLocal;", .constantValue.asLong = 0, 0x0, -1, -1, 45, -1 },
    { "stringRegexVariables_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x0, -1, -1, 46, -1 },
    { "defaults_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x1, -1, -1, 44, -1 },
    { "defaultStringPatternFlags_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "defaultStringMatchFlags_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "sequenceMatchResultExtractor_", "LIOSClass;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "stringMatchResultExtractor_", "LIOSClass;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "defaultTokensAnnotationKey_", "LIOSClass;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "defaultTextAnnotationKey_", "LIOSClass;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "defaultTokensResultAnnotationKey_", "LJavaUtilList;", .constantValue.asLong = 0, 0x1, -1, -1, 47, -1 },
    { "defaultResultAnnotationKey_", "LJavaUtilList;", .constantValue.asLong = 0, 0x1, -1, -1, 47, -1 },
    { "defaultNestedResultsAnnotationKey_", "LIOSClass;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "defaultTokensAggregators_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x1, -1, -1, 48, -1 },
    { "defaultTokensAggregator_", "LEduStanfordNlpPipelineCoreMapAggregator;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "aggregateToTokens_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "defaultResultsAnnotationExtractor_", "LJavaUtilFunctionFunction;", .constantValue.asLong = 0, 0x0, -1, -1, 49, -1 },
    { "STRING_REGEX_VAR_NAME_PATTERN", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 50, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpLingTokensregexSequencePattern_Parser;", "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "setDefaults", "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "()Ljava/util/Map<Ljava/lang/Class;Ledu/stanford/nlp/pipeline/CoreMapAttributeAggregator;>;", "setDefaultTokensAggregators", "(Ljava/util/Map<Ljava/lang/Class;Ledu/stanford/nlp/pipeline/CoreMapAttributeAggregator;>;)V", "setDefaultTextAnnotationKey", "LIOSClass;", "setDefaultTokensAnnotationKey", "()Ljava/util/List<Ljava/lang/Class;>;", "setDefaultTokensResultAnnotationKey", "[LIOSClass;", "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/Class;>;)V", "setDefaultResultAnnotationKey", "setDefaultNestedResultsAnnotationKey", "()Ljava/util/function/Function<Ledu/stanford/nlp/ling/tokensregex/MatchedExpression;*>;", "setDefaultResultsAnnotationExtractor", "LJavaUtilFunctionFunction;", "(Ljava/util/function/Function<Ledu/stanford/nlp/ling/tokensregex/MatchedExpression;*>;)V", "setSequenceMatchResultExtractor", "setStringMatchResultExtractor", "setVariables", "setDefaultStringPatternFlags", "I", "setDefaultStringMatchFlags", "bindStringRegex", "LNSString;LNSString;", "expandStringRegex", "LNSString;", "getStringPattern", "bind", "LNSString;LNSObject;", "LNSString;LEduStanfordNlpLingTokensregexSequencePattern;", "unbind", "getNodePattern", "getSequencePatternExpr", "LNSString;Z", "get", "push", "pop", "peek", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "Ljava/lang/ThreadLocal<Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;>;", "Ljava/util/Map<Ljava/lang/String;Ledu/stanford/nlp/util/Pair<Ljava/util/regex/Pattern;Ljava/lang/String;>;>;", "Ljava/util/List<Ljava/lang/Class;>;", "Ljava/util/Map<Ljava/lang/Class;Ledu/stanford/nlp/pipeline/CoreMapAttributeAggregator;>;", "Ljava/util/function/Function<Ledu/stanford/nlp/ling/tokensregex/MatchedExpression;*>;", &EduStanfordNlpLingTokensregexEnv_STRING_REGEX_VAR_NAME_PATTERN, "LEduStanfordNlpLingTokensregexEnv_Binder;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexEnv = { "Env", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, fields, 7, 0x1, 44, 19, -1, 51, -1, -1, -1 };
  return &_EduStanfordNlpLingTokensregexEnv;
}

+ (void)initialize {
  if (self == [EduStanfordNlpLingTokensregexEnv class]) {
    EduStanfordNlpLingTokensregexEnv_STRING_REGEX_VAR_NAME_PATTERN = JavaUtilRegexPattern_compileWithNSString_(@"\\$[A-Za-z0-9_]+");
    J2OBJC_SET_INITIALIZED(EduStanfordNlpLingTokensregexEnv)
  }
}

@end

void EduStanfordNlpLingTokensregexEnv_initWithEduStanfordNlpLingTokensregexSequencePattern_Parser_(EduStanfordNlpLingTokensregexEnv *self, id<EduStanfordNlpLingTokensregexSequencePattern_Parser> p) {
  NSObject_init(self);
  self->variables_ = new_JavaUtilHashMap_init();
  self->threadLocalVariables_ = new_JavaLangThreadLocal_init();
  self->stringRegexVariables_ = new_JavaUtilHashMap_init();
  self->defaults_ = new_JavaUtilHashMap_init();
  self->defaultStringPatternFlags_ = 0;
  self->defaultStringMatchFlags_ = 0;
  self->parser_ = p;
}

EduStanfordNlpLingTokensregexEnv *new_EduStanfordNlpLingTokensregexEnv_initWithEduStanfordNlpLingTokensregexSequencePattern_Parser_(id<EduStanfordNlpLingTokensregexSequencePattern_Parser> p) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexEnv, initWithEduStanfordNlpLingTokensregexSequencePattern_Parser_, p)
}

EduStanfordNlpLingTokensregexEnv *create_EduStanfordNlpLingTokensregexEnv_initWithEduStanfordNlpLingTokensregexSequencePattern_Parser_(id<EduStanfordNlpLingTokensregexSequencePattern_Parser> p) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexEnv, initWithEduStanfordNlpLingTokensregexSequencePattern_Parser_, p)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexEnv)

@implementation EduStanfordNlpLingTokensregexEnv_Binder

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init__WithNSString:withJavaUtilProperties:);
  methods[1].selector = @selector(bindWithEduStanfordNlpLingTokensregexEnv:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "init", "LNSString;LJavaUtilProperties;", "bind", "LEduStanfordNlpLingTokensregexEnv;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexEnv_Binder = { "Binder", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, NULL, 7, 0x609, 2, 0, 3, -1, -1, -1, -1 };
  return &_EduStanfordNlpLingTokensregexEnv_Binder;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexEnv_Binder)
