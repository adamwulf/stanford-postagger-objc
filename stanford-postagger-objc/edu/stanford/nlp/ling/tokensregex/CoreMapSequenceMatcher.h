//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/ling/tokensregex/CoreMapSequenceMatcher.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_EduStanfordNlpLingTokensregexCoreMapSequenceMatcher")
#ifdef RESTRICT_EduStanfordNlpLingTokensregexCoreMapSequenceMatcher
#define INCLUDE_ALL_EduStanfordNlpLingTokensregexCoreMapSequenceMatcher 0
#else
#define INCLUDE_ALL_EduStanfordNlpLingTokensregexCoreMapSequenceMatcher 1
#endif
#undef RESTRICT_EduStanfordNlpLingTokensregexCoreMapSequenceMatcher
#ifdef INCLUDE_EduStanfordNlpLingTokensregexCoreMapSequenceMatcher_BasicCoreMapSequenceMatcher
#define INCLUDE_EduStanfordNlpLingTokensregexCoreMapSequenceMatcher 1
#endif

#if !defined (EduStanfordNlpLingTokensregexCoreMapSequenceMatcher_) && (INCLUDE_ALL_EduStanfordNlpLingTokensregexCoreMapSequenceMatcher || defined(INCLUDE_EduStanfordNlpLingTokensregexCoreMapSequenceMatcher))
#define EduStanfordNlpLingTokensregexCoreMapSequenceMatcher_

#define RESTRICT_EduStanfordNlpLingTokensregexSequenceMatcher 1
#define INCLUDE_EduStanfordNlpLingTokensregexSequenceMatcher 1
#include "edu/stanford/nlp/ling/tokensregex/SequenceMatcher.h"

@class EduStanfordNlpLingTokensregexSequencePattern;
@class IOSIntArray;
@protocol EduStanfordNlpUtilCoreMap;
@protocol JavaUtilFunctionFunction;
@protocol JavaUtilList;
@protocol JavaUtilMap;

@interface EduStanfordNlpLingTokensregexCoreMapSequenceMatcher : EduStanfordNlpLingTokensregexSequenceMatcher

#pragma mark Public

- (instancetype)initWithEduStanfordNlpLingTokensregexSequencePattern:(EduStanfordNlpLingTokensregexSequencePattern *)pattern
                                                    withJavaUtilList:(id<JavaUtilList>)tokens;

- (void)annotateGroupWithInt:(jint)group
             withJavaUtilMap:(id<JavaUtilMap>)attributes;

- (void)annotateGroupWithJavaUtilMap:(id<JavaUtilMap>)attributes;

- (id<JavaUtilList>)getMergedList;

- (id<JavaUtilList>)getMergedListWithIntArray:(IOSIntArray *)groups;

- (id<EduStanfordNlpUtilCoreMap>)getWithInt:(jint)arg0;

- (id<EduStanfordNlpUtilCoreMap>)mergeGroup;

- (id<EduStanfordNlpUtilCoreMap>)mergeGroupWithInt:(jint)group;

@end

J2OBJC_STATIC_INIT(EduStanfordNlpLingTokensregexCoreMapSequenceMatcher)

inline id<JavaUtilFunctionFunction> EduStanfordNlpLingTokensregexCoreMapSequenceMatcher_get_COREMAP_LIST_TO_STRING_CONVERTER();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<JavaUtilFunctionFunction> EduStanfordNlpLingTokensregexCoreMapSequenceMatcher_COREMAP_LIST_TO_STRING_CONVERTER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpLingTokensregexCoreMapSequenceMatcher, COREMAP_LIST_TO_STRING_CONVERTER, id<JavaUtilFunctionFunction>)

FOUNDATION_EXPORT void EduStanfordNlpLingTokensregexCoreMapSequenceMatcher_initWithEduStanfordNlpLingTokensregexSequencePattern_withJavaUtilList_(EduStanfordNlpLingTokensregexCoreMapSequenceMatcher *self, EduStanfordNlpLingTokensregexSequencePattern *pattern, id<JavaUtilList> tokens);

FOUNDATION_EXPORT EduStanfordNlpLingTokensregexCoreMapSequenceMatcher *new_EduStanfordNlpLingTokensregexCoreMapSequenceMatcher_initWithEduStanfordNlpLingTokensregexSequencePattern_withJavaUtilList_(EduStanfordNlpLingTokensregexSequencePattern *pattern, id<JavaUtilList> tokens) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EduStanfordNlpLingTokensregexCoreMapSequenceMatcher *create_EduStanfordNlpLingTokensregexCoreMapSequenceMatcher_initWithEduStanfordNlpLingTokensregexSequencePattern_withJavaUtilList_(EduStanfordNlpLingTokensregexSequencePattern *pattern, id<JavaUtilList> tokens);

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpLingTokensregexCoreMapSequenceMatcher)

#endif

#if !defined (EduStanfordNlpLingTokensregexCoreMapSequenceMatcher_BasicCoreMapSequenceMatcher_) && (INCLUDE_ALL_EduStanfordNlpLingTokensregexCoreMapSequenceMatcher || defined(INCLUDE_EduStanfordNlpLingTokensregexCoreMapSequenceMatcher_BasicCoreMapSequenceMatcher))
#define EduStanfordNlpLingTokensregexCoreMapSequenceMatcher_BasicCoreMapSequenceMatcher_

@class EduStanfordNlpLingTokensregexSequencePattern;
@protocol EduStanfordNlpUtilCoreMap;

@interface EduStanfordNlpLingTokensregexCoreMapSequenceMatcher_BasicCoreMapSequenceMatcher : EduStanfordNlpLingTokensregexCoreMapSequenceMatcher {
 @public
  id<EduStanfordNlpUtilCoreMap> annotation_;
}

#pragma mark Public

- (instancetype)initWithEduStanfordNlpLingTokensregexSequencePattern:(EduStanfordNlpLingTokensregexSequencePattern *)pattern
                                       withEduStanfordNlpUtilCoreMap:(id<EduStanfordNlpUtilCoreMap>)annotation;

- (id<EduStanfordNlpUtilCoreMap>)getWithInt:(jint)arg0;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpLingTokensregexCoreMapSequenceMatcher_BasicCoreMapSequenceMatcher)

J2OBJC_FIELD_SETTER(EduStanfordNlpLingTokensregexCoreMapSequenceMatcher_BasicCoreMapSequenceMatcher, annotation_, id<EduStanfordNlpUtilCoreMap>)

FOUNDATION_EXPORT void EduStanfordNlpLingTokensregexCoreMapSequenceMatcher_BasicCoreMapSequenceMatcher_initWithEduStanfordNlpLingTokensregexSequencePattern_withEduStanfordNlpUtilCoreMap_(EduStanfordNlpLingTokensregexCoreMapSequenceMatcher_BasicCoreMapSequenceMatcher *self, EduStanfordNlpLingTokensregexSequencePattern *pattern, id<EduStanfordNlpUtilCoreMap> annotation);

FOUNDATION_EXPORT EduStanfordNlpLingTokensregexCoreMapSequenceMatcher_BasicCoreMapSequenceMatcher *new_EduStanfordNlpLingTokensregexCoreMapSequenceMatcher_BasicCoreMapSequenceMatcher_initWithEduStanfordNlpLingTokensregexSequencePattern_withEduStanfordNlpUtilCoreMap_(EduStanfordNlpLingTokensregexSequencePattern *pattern, id<EduStanfordNlpUtilCoreMap> annotation) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EduStanfordNlpLingTokensregexCoreMapSequenceMatcher_BasicCoreMapSequenceMatcher *create_EduStanfordNlpLingTokensregexCoreMapSequenceMatcher_BasicCoreMapSequenceMatcher_initWithEduStanfordNlpLingTokensregexSequencePattern_withEduStanfordNlpUtilCoreMap_(EduStanfordNlpLingTokensregexSequencePattern *pattern, id<EduStanfordNlpUtilCoreMap> annotation);

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpLingTokensregexCoreMapSequenceMatcher_BasicCoreMapSequenceMatcher)

#endif

#pragma pop_macro("INCLUDE_ALL_EduStanfordNlpLingTokensregexCoreMapSequenceMatcher")
