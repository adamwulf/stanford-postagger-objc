//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/ling/tokensregex/SequenceMatchRules.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/ling/tokensregex/BasicSequenceMatchResult.h"
#include "edu/stanford/nlp/ling/tokensregex/Env.h"
#include "edu/stanford/nlp/ling/tokensregex/EnvLookup.h"
#include "edu/stanford/nlp/ling/tokensregex/MatchedExpression.h"
#include "edu/stanford/nlp/ling/tokensregex/MultiPatternMatcher.h"
#include "edu/stanford/nlp/ling/tokensregex/SequenceMatchResult.h"
#include "edu/stanford/nlp/ling/tokensregex/SequenceMatchRules.h"
#include "edu/stanford/nlp/ling/tokensregex/SequenceMatcher.h"
#include "edu/stanford/nlp/ling/tokensregex/SequencePattern.h"
#include "edu/stanford/nlp/ling/tokensregex/TokenSequencePattern.h"
#include "edu/stanford/nlp/ling/tokensregex/types/AssignableExpression.h"
#include "edu/stanford/nlp/ling/tokensregex/types/Expression.h"
#include "edu/stanford/nlp/ling/tokensregex/types/Expressions.h"
#include "edu/stanford/nlp/ling/tokensregex/types/Value.h"
#include "edu/stanford/nlp/pipeline/CoreMapAggregator.h"
#include "edu/stanford/nlp/util/CoreMap.h"
#include "edu/stanford/nlp/util/Interval.h"
#include "java/lang/Boolean.h"
#include "java/lang/Double.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Objects.h"
#include "java/util/Set.h"
#include "java/util/function/Function.h"
#include "java/util/function/Predicate.h"
#include "java/util/regex/MatchResult.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"

@interface EduStanfordNlpLingTokensregexSequenceMatchRules_Rule : NSObject

@end

@interface EduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule : NSObject

@end

@interface EduStanfordNlpLingTokensregexSequenceMatchRules_CompositeExtractRuleCreator_$Lambda$1 : NSObject < JavaUtilFunctionFunction > {
 @public
  EduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchResultExtractor *val$valueExtractor_;
}

- (id)applyWithId:(EduStanfordNlpLingTokensregexMatchedExpression *)matched;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpLingTokensregexSequenceMatchRules_CompositeExtractRuleCreator_$Lambda$1)

J2OBJC_FIELD_SETTER(EduStanfordNlpLingTokensregexSequenceMatchRules_CompositeExtractRuleCreator_$Lambda$1, val$valueExtractor_, EduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchResultExtractor *)

__attribute__((unused)) static void EduStanfordNlpLingTokensregexSequenceMatchRules_CompositeExtractRuleCreator_$Lambda$1_initWithEduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchResultExtractor_(EduStanfordNlpLingTokensregexSequenceMatchRules_CompositeExtractRuleCreator_$Lambda$1 *self, EduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchResultExtractor *capture$0);

__attribute__((unused)) static EduStanfordNlpLingTokensregexSequenceMatchRules_CompositeExtractRuleCreator_$Lambda$1 *new_EduStanfordNlpLingTokensregexSequenceMatchRules_CompositeExtractRuleCreator_$Lambda$1_initWithEduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchResultExtractor_(EduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchResultExtractor *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpLingTokensregexSequenceMatchRules_CompositeExtractRuleCreator_$Lambda$1 *create_EduStanfordNlpLingTokensregexSequenceMatchRules_CompositeExtractRuleCreator_$Lambda$1_initWithEduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchResultExtractor_(EduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchResultExtractor *capture$0);

@interface EduStanfordNlpLingTokensregexSequenceMatchRules_TokenPatternExtractRuleCreator_$Lambda$1 : NSObject < JavaUtilFunctionFunction > {
 @public
  EduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchResultExtractor *val$valueExtractor_;
}

- (id)applyWithId:(EduStanfordNlpLingTokensregexMatchedExpression *)matched;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpLingTokensregexSequenceMatchRules_TokenPatternExtractRuleCreator_$Lambda$1)

J2OBJC_FIELD_SETTER(EduStanfordNlpLingTokensregexSequenceMatchRules_TokenPatternExtractRuleCreator_$Lambda$1, val$valueExtractor_, EduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchResultExtractor *)

__attribute__((unused)) static void EduStanfordNlpLingTokensregexSequenceMatchRules_TokenPatternExtractRuleCreator_$Lambda$1_initWithEduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchResultExtractor_(EduStanfordNlpLingTokensregexSequenceMatchRules_TokenPatternExtractRuleCreator_$Lambda$1 *self, EduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchResultExtractor *capture$0);

__attribute__((unused)) static EduStanfordNlpLingTokensregexSequenceMatchRules_TokenPatternExtractRuleCreator_$Lambda$1 *new_EduStanfordNlpLingTokensregexSequenceMatchRules_TokenPatternExtractRuleCreator_$Lambda$1_initWithEduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchResultExtractor_(EduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchResultExtractor *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpLingTokensregexSequenceMatchRules_TokenPatternExtractRuleCreator_$Lambda$1 *create_EduStanfordNlpLingTokensregexSequenceMatchRules_TokenPatternExtractRuleCreator_$Lambda$1_initWithEduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchResultExtractor_(EduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchResultExtractor *capture$0);

@interface EduStanfordNlpLingTokensregexSequenceMatchRules_MultiTokenPatternExtractRuleCreator_$Lambda$1 : NSObject < JavaUtilFunctionFunction > {
 @public
  EduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchResultExtractor *val$valueExtractor_;
}

- (id)applyWithId:(EduStanfordNlpLingTokensregexMatchedExpression *)matched;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpLingTokensregexSequenceMatchRules_MultiTokenPatternExtractRuleCreator_$Lambda$1)

J2OBJC_FIELD_SETTER(EduStanfordNlpLingTokensregexSequenceMatchRules_MultiTokenPatternExtractRuleCreator_$Lambda$1, val$valueExtractor_, EduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchResultExtractor *)

__attribute__((unused)) static void EduStanfordNlpLingTokensregexSequenceMatchRules_MultiTokenPatternExtractRuleCreator_$Lambda$1_initWithEduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchResultExtractor_(EduStanfordNlpLingTokensregexSequenceMatchRules_MultiTokenPatternExtractRuleCreator_$Lambda$1 *self, EduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchResultExtractor *capture$0);

__attribute__((unused)) static EduStanfordNlpLingTokensregexSequenceMatchRules_MultiTokenPatternExtractRuleCreator_$Lambda$1 *new_EduStanfordNlpLingTokensregexSequenceMatchRules_MultiTokenPatternExtractRuleCreator_$Lambda$1_initWithEduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchResultExtractor_(EduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchResultExtractor *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpLingTokensregexSequenceMatchRules_MultiTokenPatternExtractRuleCreator_$Lambda$1 *create_EduStanfordNlpLingTokensregexSequenceMatchRules_MultiTokenPatternExtractRuleCreator_$Lambda$1_initWithEduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchResultExtractor_(EduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchResultExtractor *capture$0);

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpLingTokensregexSequenceMatchRules)

NSString *EduStanfordNlpLingTokensregexSequenceMatchRules_COMPOSITE_RULE_TYPE = @"composite";
NSString *EduStanfordNlpLingTokensregexSequenceMatchRules_TOKEN_PATTERN_RULE_TYPE = @"tokens";
NSString *EduStanfordNlpLingTokensregexSequenceMatchRules_TEXT_PATTERN_RULE_TYPE = @"text";
NSString *EduStanfordNlpLingTokensregexSequenceMatchRules_FILTER_RULE_TYPE = @"filter";
EduStanfordNlpLingTokensregexSequenceMatchRules_TokenPatternExtractRuleCreator *EduStanfordNlpLingTokensregexSequenceMatchRules_TOKEN_PATTERN_EXTRACT_RULE_CREATOR;
EduStanfordNlpLingTokensregexSequenceMatchRules_CompositeExtractRuleCreator *EduStanfordNlpLingTokensregexSequenceMatchRules_COMPOSITE_EXTRACT_RULE_CREATOR;
EduStanfordNlpLingTokensregexSequenceMatchRules_TextPatternExtractRuleCreator *EduStanfordNlpLingTokensregexSequenceMatchRules_TEXT_PATTERN_EXTRACT_RULE_CREATOR;
EduStanfordNlpLingTokensregexSequenceMatchRules_MultiTokenPatternExtractRuleCreator *EduStanfordNlpLingTokensregexSequenceMatchRules_MULTI_TOKEN_PATTERN_EXTRACT_RULE_CREATOR;
EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRuleCreator *EduStanfordNlpLingTokensregexSequenceMatchRules_DEFAULT_EXTRACT_RULE_CREATOR;
id<JavaUtilMap> EduStanfordNlpLingTokensregexSequenceMatchRules_registeredRuleTypes;

@implementation EduStanfordNlpLingTokensregexSequenceMatchRules

+ (EduStanfordNlpLingTokensregexSequenceMatchRules_AssignmentRule *)createAssignmentRuleWithEduStanfordNlpLingTokensregexEnv:(EduStanfordNlpLingTokensregexEnv *)env
                                                                  withEduStanfordNlpLingTokensregexTypesAssignableExpression:(id<EduStanfordNlpLingTokensregexTypesAssignableExpression>)var
                                                                            withEduStanfordNlpLingTokensregexTypesExpression:(id<EduStanfordNlpLingTokensregexTypesExpression>)result {
  return EduStanfordNlpLingTokensregexSequenceMatchRules_createAssignmentRuleWithEduStanfordNlpLingTokensregexEnv_withEduStanfordNlpLingTokensregexTypesAssignableExpression_withEduStanfordNlpLingTokensregexTypesExpression_(env, var, result);
}

+ (id<EduStanfordNlpLingTokensregexSequenceMatchRules_Rule>)createRuleWithEduStanfordNlpLingTokensregexEnv:(EduStanfordNlpLingTokensregexEnv *)env
                                          withEduStanfordNlpLingTokensregexTypesExpressions_CompositeValue:(EduStanfordNlpLingTokensregexTypesExpressions_CompositeValue *)cv {
  return EduStanfordNlpLingTokensregexSequenceMatchRules_createRuleWithEduStanfordNlpLingTokensregexEnv_withEduStanfordNlpLingTokensregexTypesExpressions_CompositeValue_(env, cv);
}

+ (EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule *)createExtractionRuleWithEduStanfordNlpLingTokensregexEnv:(EduStanfordNlpLingTokensregexEnv *)env
                                                                                                                    withJavaUtilMap:(id<JavaUtilMap>)attributes {
  return EduStanfordNlpLingTokensregexSequenceMatchRules_createExtractionRuleWithEduStanfordNlpLingTokensregexEnv_withJavaUtilMap_(env, attributes);
}

+ (EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule *)createExtractionRuleWithEduStanfordNlpLingTokensregexEnv:(EduStanfordNlpLingTokensregexEnv *)env
                                                                                                                       withNSString:(NSString *)ruleType
                                                                                                                             withId:(id)pattern
                                                                                   withEduStanfordNlpLingTokensregexTypesExpression:(id<EduStanfordNlpLingTokensregexTypesExpression>)result {
  return EduStanfordNlpLingTokensregexSequenceMatchRules_createExtractionRuleWithEduStanfordNlpLingTokensregexEnv_withNSString_withId_withEduStanfordNlpLingTokensregexTypesExpression_(env, ruleType, pattern, result);
}

+ (EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRuleCreator *)lookupExtractRuleCreatorWithEduStanfordNlpLingTokensregexEnv:(EduStanfordNlpLingTokensregexEnv *)env
                                                                                                                                  withNSString:(NSString *)ruleType {
  return EduStanfordNlpLingTokensregexSequenceMatchRules_lookupExtractRuleCreatorWithEduStanfordNlpLingTokensregexEnv_withNSString_(env, ruleType);
}

+ (EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule *)createTokenPatternRuleWithEduStanfordNlpLingTokensregexEnv:(EduStanfordNlpLingTokensregexEnv *)env
                                                                         withEduStanfordNlpLingTokensregexSequencePattern_PatternExpr:(EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *)expr
                                                                                     withEduStanfordNlpLingTokensregexTypesExpression:(id<EduStanfordNlpLingTokensregexTypesExpression>)result {
  return EduStanfordNlpLingTokensregexSequenceMatchRules_createTokenPatternRuleWithEduStanfordNlpLingTokensregexEnv_withEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_withEduStanfordNlpLingTokensregexTypesExpression_(env, expr, result);
}

+ (EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule *)createTextPatternRuleWithEduStanfordNlpLingTokensregexEnv:(EduStanfordNlpLingTokensregexEnv *)env
                                                                                                                        withNSString:(NSString *)expr
                                                                                    withEduStanfordNlpLingTokensregexTypesExpression:(id<EduStanfordNlpLingTokensregexTypesExpression>)result {
  return EduStanfordNlpLingTokensregexSequenceMatchRules_createTextPatternRuleWithEduStanfordNlpLingTokensregexEnv_withNSString_withEduStanfordNlpLingTokensregexTypesExpression_(env, expr, result);
}

+ (EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule *)createMultiTokenPatternRuleWithEduStanfordNlpLingTokensregexEnv:(EduStanfordNlpLingTokensregexEnv *)env
                                                                 withEduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule:(EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule *)template_
                                                                                                                          withJavaUtilList:(id<JavaUtilList>)patterns {
  return EduStanfordNlpLingTokensregexSequenceMatchRules_createMultiTokenPatternRuleWithEduStanfordNlpLingTokensregexEnv_withEduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule_withJavaUtilList_(env, template_, patterns);
}

+ (EduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor *)createAnnotationExtractorWithEduStanfordNlpLingTokensregexEnv:(EduStanfordNlpLingTokensregexEnv *)env
                                                                  withEduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule:(EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule *)r {
  return EduStanfordNlpLingTokensregexSequenceMatchRules_createAnnotationExtractorWithEduStanfordNlpLingTokensregexEnv_withEduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule_(env, r);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpLingTokensregexSequenceMatchRules_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LEduStanfordNlpLingTokensregexSequenceMatchRules_AssignmentRule;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexSequenceMatchRules_Rule;", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule;", 0xc, 4, 5, -1, 6, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule;", 0x9, 4, 7, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRuleCreator;", 0xc, 8, 9, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule;", 0x9, 10, 11, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule;", 0x9, 12, 13, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule;", 0x9, 14, 15, -1, 16, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor;", 0x9, 17, 18, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(createAssignmentRuleWithEduStanfordNlpLingTokensregexEnv:withEduStanfordNlpLingTokensregexTypesAssignableExpression:withEduStanfordNlpLingTokensregexTypesExpression:);
  methods[1].selector = @selector(createRuleWithEduStanfordNlpLingTokensregexEnv:withEduStanfordNlpLingTokensregexTypesExpressions_CompositeValue:);
  methods[2].selector = @selector(createExtractionRuleWithEduStanfordNlpLingTokensregexEnv:withJavaUtilMap:);
  methods[3].selector = @selector(createExtractionRuleWithEduStanfordNlpLingTokensregexEnv:withNSString:withId:withEduStanfordNlpLingTokensregexTypesExpression:);
  methods[4].selector = @selector(lookupExtractRuleCreatorWithEduStanfordNlpLingTokensregexEnv:withNSString:);
  methods[5].selector = @selector(createTokenPatternRuleWithEduStanfordNlpLingTokensregexEnv:withEduStanfordNlpLingTokensregexSequencePattern_PatternExpr:withEduStanfordNlpLingTokensregexTypesExpression:);
  methods[6].selector = @selector(createTextPatternRuleWithEduStanfordNlpLingTokensregexEnv:withNSString:withEduStanfordNlpLingTokensregexTypesExpression:);
  methods[7].selector = @selector(createMultiTokenPatternRuleWithEduStanfordNlpLingTokensregexEnv:withEduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule:withJavaUtilList:);
  methods[8].selector = @selector(createAnnotationExtractorWithEduStanfordNlpLingTokensregexEnv:withEduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule:);
  methods[9].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "COMPOSITE_RULE_TYPE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 19, -1, -1 },
    { "TOKEN_PATTERN_RULE_TYPE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 20, -1, -1 },
    { "TEXT_PATTERN_RULE_TYPE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 21, -1, -1 },
    { "FILTER_RULE_TYPE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 22, -1, -1 },
    { "TOKEN_PATTERN_EXTRACT_RULE_CREATOR", "LEduStanfordNlpLingTokensregexSequenceMatchRules_TokenPatternExtractRuleCreator;", .constantValue.asLong = 0, 0x19, -1, 23, -1, -1 },
    { "COMPOSITE_EXTRACT_RULE_CREATOR", "LEduStanfordNlpLingTokensregexSequenceMatchRules_CompositeExtractRuleCreator;", .constantValue.asLong = 0, 0x19, -1, 24, -1, -1 },
    { "TEXT_PATTERN_EXTRACT_RULE_CREATOR", "LEduStanfordNlpLingTokensregexSequenceMatchRules_TextPatternExtractRuleCreator;", .constantValue.asLong = 0, 0x19, -1, 25, -1, -1 },
    { "MULTI_TOKEN_PATTERN_EXTRACT_RULE_CREATOR", "LEduStanfordNlpLingTokensregexSequenceMatchRules_MultiTokenPatternExtractRuleCreator;", .constantValue.asLong = 0, 0x19, -1, 26, -1, -1 },
    { "DEFAULT_EXTRACT_RULE_CREATOR", "LEduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRuleCreator;", .constantValue.asLong = 0, 0x19, -1, 27, -1, -1 },
    { "registeredRuleTypes", "LJavaUtilMap;", .constantValue.asLong = 0, 0x18, -1, 28, 29, -1 },
  };
  static const void *ptrTable[] = { "createAssignmentRule", "LEduStanfordNlpLingTokensregexEnv;LEduStanfordNlpLingTokensregexTypesAssignableExpression;LEduStanfordNlpLingTokensregexTypesExpression;", "createRule", "LEduStanfordNlpLingTokensregexEnv;LEduStanfordNlpLingTokensregexTypesExpressions_CompositeValue;", "createExtractionRule", "LEduStanfordNlpLingTokensregexEnv;LJavaUtilMap;", "(Ledu/stanford/nlp/ling/tokensregex/Env;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)Ledu/stanford/nlp/ling/tokensregex/SequenceMatchRules$AnnotationExtractRule;", "LEduStanfordNlpLingTokensregexEnv;LNSString;LNSObject;LEduStanfordNlpLingTokensregexTypesExpression;", "lookupExtractRuleCreator", "LEduStanfordNlpLingTokensregexEnv;LNSString;", "createTokenPatternRule", "LEduStanfordNlpLingTokensregexEnv;LEduStanfordNlpLingTokensregexSequencePattern_PatternExpr;LEduStanfordNlpLingTokensregexTypesExpression;", "createTextPatternRule", "LEduStanfordNlpLingTokensregexEnv;LNSString;LEduStanfordNlpLingTokensregexTypesExpression;", "createMultiTokenPatternRule", "LEduStanfordNlpLingTokensregexEnv;LEduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule;LJavaUtilList;", "(Ledu/stanford/nlp/ling/tokensregex/Env;Ledu/stanford/nlp/ling/tokensregex/SequenceMatchRules$AnnotationExtractRule;Ljava/util/List<Ledu/stanford/nlp/ling/tokensregex/TokenSequencePattern;>;)Ledu/stanford/nlp/ling/tokensregex/SequenceMatchRules$AnnotationExtractRule;", "createAnnotationExtractor", "LEduStanfordNlpLingTokensregexEnv;LEduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule;", &EduStanfordNlpLingTokensregexSequenceMatchRules_COMPOSITE_RULE_TYPE, &EduStanfordNlpLingTokensregexSequenceMatchRules_TOKEN_PATTERN_RULE_TYPE, &EduStanfordNlpLingTokensregexSequenceMatchRules_TEXT_PATTERN_RULE_TYPE, &EduStanfordNlpLingTokensregexSequenceMatchRules_FILTER_RULE_TYPE, &EduStanfordNlpLingTokensregexSequenceMatchRules_TOKEN_PATTERN_EXTRACT_RULE_CREATOR, &EduStanfordNlpLingTokensregexSequenceMatchRules_COMPOSITE_EXTRACT_RULE_CREATOR, &EduStanfordNlpLingTokensregexSequenceMatchRules_TEXT_PATTERN_EXTRACT_RULE_CREATOR, &EduStanfordNlpLingTokensregexSequenceMatchRules_MULTI_TOKEN_PATTERN_EXTRACT_RULE_CREATOR, &EduStanfordNlpLingTokensregexSequenceMatchRules_DEFAULT_EXTRACT_RULE_CREATOR, &EduStanfordNlpLingTokensregexSequenceMatchRules_registeredRuleTypes, "Ljava/util/Map<Ljava/lang/String;Ledu/stanford/nlp/ling/tokensregex/SequenceMatchRules$AnnotationExtractRuleCreator;>;", "LEduStanfordNlpLingTokensregexSequenceMatchRules_Rule;LEduStanfordNlpLingTokensregexSequenceMatchRules_AssignmentRule;LEduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule;LEduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRuleCreator;LEduStanfordNlpLingTokensregexSequenceMatchRules_CompositeExtractRuleCreator;LEduStanfordNlpLingTokensregexSequenceMatchRules_TokenPatternExtractRuleCreator;LEduStanfordNlpLingTokensregexSequenceMatchRules_MultiTokenPatternExtractRuleCreator;LEduStanfordNlpLingTokensregexSequenceMatchRules_TextPatternExtractRuleCreator;LEduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationMatchedFilter;LEduStanfordNlpLingTokensregexSequenceMatchRules_StringMatchResultExtractor;LEduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchResultExtractor;LEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule;LEduStanfordNlpLingTokensregexSequenceMatchRules_FilterExtractRule;LEduStanfordNlpLingTokensregexSequenceMatchRules_ListExtractRule;LEduStanfordNlpLingTokensregexSequenceMatchRules_CoreMapExtractRule;LEduStanfordNlpLingTokensregexSequenceMatchRules_CoreMapToListExtractRule;LEduStanfordNlpLingTokensregexSequenceMatchRules_BasicSequenceExtractRule;LEduStanfordNlpLingTokensregexSequenceMatchRules_SequencePatternExtractRule;LEduStanfordNlpLingTokensregexSequenceMatchRules_MultiSequencePatternExtractRule;LEduStanfordNlpLingTokensregexSequenceMatchRules_StringPatternExtractRule;LEduStanfordNlpLingTokensregexSequenceMatchRules_StringMatchedExpressionExtractor;LEduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchedExpressionExtractor;LEduStanfordNlpLingTokensregexSequenceMatchRules_CoreMapFunctionApplier;LEduStanfordNlpLingTokensregexSequenceMatchRules_CoreMapToListFunctionApplier;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexSequenceMatchRules = { "SequenceMatchRules", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, fields, 7, 0x1, 10, 10, -1, 30, -1, -1, -1 };
  return &_EduStanfordNlpLingTokensregexSequenceMatchRules;
}

+ (void)initialize {
  if (self == [EduStanfordNlpLingTokensregexSequenceMatchRules class]) {
    EduStanfordNlpLingTokensregexSequenceMatchRules_TOKEN_PATTERN_EXTRACT_RULE_CREATOR = new_EduStanfordNlpLingTokensregexSequenceMatchRules_TokenPatternExtractRuleCreator_init();
    EduStanfordNlpLingTokensregexSequenceMatchRules_COMPOSITE_EXTRACT_RULE_CREATOR = new_EduStanfordNlpLingTokensregexSequenceMatchRules_CompositeExtractRuleCreator_init();
    EduStanfordNlpLingTokensregexSequenceMatchRules_TEXT_PATTERN_EXTRACT_RULE_CREATOR = new_EduStanfordNlpLingTokensregexSequenceMatchRules_TextPatternExtractRuleCreator_init();
    EduStanfordNlpLingTokensregexSequenceMatchRules_MULTI_TOKEN_PATTERN_EXTRACT_RULE_CREATOR = new_EduStanfordNlpLingTokensregexSequenceMatchRules_MultiTokenPatternExtractRuleCreator_init();
    EduStanfordNlpLingTokensregexSequenceMatchRules_DEFAULT_EXTRACT_RULE_CREATOR = EduStanfordNlpLingTokensregexSequenceMatchRules_TOKEN_PATTERN_EXTRACT_RULE_CREATOR;
    EduStanfordNlpLingTokensregexSequenceMatchRules_registeredRuleTypes = new_JavaUtilHashMap_init();
    {
      (void) [EduStanfordNlpLingTokensregexSequenceMatchRules_registeredRuleTypes putWithId:EduStanfordNlpLingTokensregexSequenceMatchRules_TOKEN_PATTERN_RULE_TYPE withId:EduStanfordNlpLingTokensregexSequenceMatchRules_TOKEN_PATTERN_EXTRACT_RULE_CREATOR];
      (void) [EduStanfordNlpLingTokensregexSequenceMatchRules_registeredRuleTypes putWithId:EduStanfordNlpLingTokensregexSequenceMatchRules_COMPOSITE_RULE_TYPE withId:EduStanfordNlpLingTokensregexSequenceMatchRules_COMPOSITE_EXTRACT_RULE_CREATOR];
      (void) [EduStanfordNlpLingTokensregexSequenceMatchRules_registeredRuleTypes putWithId:EduStanfordNlpLingTokensregexSequenceMatchRules_TEXT_PATTERN_RULE_TYPE withId:EduStanfordNlpLingTokensregexSequenceMatchRules_TEXT_PATTERN_EXTRACT_RULE_CREATOR];
      (void) [EduStanfordNlpLingTokensregexSequenceMatchRules_registeredRuleTypes putWithId:EduStanfordNlpLingTokensregexSequenceMatchRules_FILTER_RULE_TYPE withId:EduStanfordNlpLingTokensregexSequenceMatchRules_TOKEN_PATTERN_EXTRACT_RULE_CREATOR];
    }
    J2OBJC_SET_INITIALIZED(EduStanfordNlpLingTokensregexSequenceMatchRules)
  }
}

@end

EduStanfordNlpLingTokensregexSequenceMatchRules_AssignmentRule *EduStanfordNlpLingTokensregexSequenceMatchRules_createAssignmentRuleWithEduStanfordNlpLingTokensregexEnv_withEduStanfordNlpLingTokensregexTypesAssignableExpression_withEduStanfordNlpLingTokensregexTypesExpression_(EduStanfordNlpLingTokensregexEnv *env, id<EduStanfordNlpLingTokensregexTypesAssignableExpression> var, id<EduStanfordNlpLingTokensregexTypesExpression> result) {
  EduStanfordNlpLingTokensregexSequenceMatchRules_initialize();
  EduStanfordNlpLingTokensregexSequenceMatchRules_AssignmentRule *ar = new_EduStanfordNlpLingTokensregexSequenceMatchRules_AssignmentRule_initWithEduStanfordNlpLingTokensregexTypesAssignableExpression_withEduStanfordNlpLingTokensregexTypesExpression_(var, result);
  [ar evaluateWithEduStanfordNlpLingTokensregexEnv:env];
  return ar;
}

id<EduStanfordNlpLingTokensregexSequenceMatchRules_Rule> EduStanfordNlpLingTokensregexSequenceMatchRules_createRuleWithEduStanfordNlpLingTokensregexEnv_withEduStanfordNlpLingTokensregexTypesExpressions_CompositeValue_(EduStanfordNlpLingTokensregexEnv *env, EduStanfordNlpLingTokensregexTypesExpressions_CompositeValue *cv) {
  EduStanfordNlpLingTokensregexSequenceMatchRules_initialize();
  id<JavaUtilMap> attributes;
  cv = [((EduStanfordNlpLingTokensregexTypesExpressions_CompositeValue *) nil_chk(cv)) simplifyNoTypeConversionWithEduStanfordNlpLingTokensregexEnv:env withNSObjectArray:[IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]];
  attributes = new_JavaUtilHashMap_init();
  for (NSString * __strong s in nil_chk([((EduStanfordNlpLingTokensregexTypesExpressions_CompositeValue *) nil_chk(cv)) getAttributes])) {
    (void) [attributes putWithId:s withId:[cv getExpressionWithNSString:s]];
  }
  return EduStanfordNlpLingTokensregexSequenceMatchRules_createExtractionRuleWithEduStanfordNlpLingTokensregexEnv_withJavaUtilMap_(env, attributes);
}

EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule *EduStanfordNlpLingTokensregexSequenceMatchRules_createExtractionRuleWithEduStanfordNlpLingTokensregexEnv_withJavaUtilMap_(EduStanfordNlpLingTokensregexEnv *env, id<JavaUtilMap> attributes) {
  EduStanfordNlpLingTokensregexSequenceMatchRules_initialize();
  NSString *ruleType = (NSString *) cast_chk(EduStanfordNlpLingTokensregexTypesExpressions_asObjectWithEduStanfordNlpLingTokensregexEnv_withId_(env, [((id<JavaUtilMap>) nil_chk(attributes)) getWithId:@"ruleType"]), [NSString class]);
  if (ruleType == nil && env != nil) {
    ruleType = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk([env getDefaults])) getWithId:@"ruleType"], [NSString class]);
  }
  EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRuleCreator *ruleCreator = EduStanfordNlpLingTokensregexSequenceMatchRules_lookupExtractRuleCreatorWithEduStanfordNlpLingTokensregexEnv_withNSString_(env, ruleType);
  if (ruleCreator != nil) {
    return [ruleCreator createWithEduStanfordNlpLingTokensregexEnv:env withJavaUtilMap:attributes];
  }
  else {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Unknown rule type: ", ruleType));
  }
}

EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule *EduStanfordNlpLingTokensregexSequenceMatchRules_createExtractionRuleWithEduStanfordNlpLingTokensregexEnv_withNSString_withId_withEduStanfordNlpLingTokensregexTypesExpression_(EduStanfordNlpLingTokensregexEnv *env, NSString *ruleType, id pattern, id<EduStanfordNlpLingTokensregexTypesExpression> result) {
  EduStanfordNlpLingTokensregexSequenceMatchRules_initialize();
  if (ruleType == nil && env != nil) {
    ruleType = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk([env getDefaults])) getWithId:@"ruleType"], [NSString class]);
  }
  EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRuleCreator *ruleCreator = EduStanfordNlpLingTokensregexSequenceMatchRules_lookupExtractRuleCreatorWithEduStanfordNlpLingTokensregexEnv_withNSString_(env, ruleType);
  if (ruleCreator != nil) {
    id<JavaUtilMap> attributes = new_JavaUtilHashMap_init();
    (void) [attributes putWithId:@"ruleType" withId:ruleType];
    (void) [attributes putWithId:@"pattern" withId:pattern];
    (void) [attributes putWithId:@"result" withId:result];
    return [ruleCreator createWithEduStanfordNlpLingTokensregexEnv:env withJavaUtilMap:attributes];
  }
  else {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Unknown rule type: ", ruleType));
  }
}

EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRuleCreator *EduStanfordNlpLingTokensregexSequenceMatchRules_lookupExtractRuleCreatorWithEduStanfordNlpLingTokensregexEnv_withNSString_(EduStanfordNlpLingTokensregexEnv *env, NSString *ruleType) {
  EduStanfordNlpLingTokensregexSequenceMatchRules_initialize();
  if (env != nil) {
    id obj = [env getWithNSString:ruleType];
    if (obj != nil && [obj isKindOfClass:[EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRuleCreator class]]) {
      return (EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRuleCreator *) cast_chk(obj, [EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRuleCreator class]);
    }
  }
  if (ruleType == nil) {
    return EduStanfordNlpLingTokensregexSequenceMatchRules_DEFAULT_EXTRACT_RULE_CREATOR;
  }
  else {
    return [((id<JavaUtilMap>) nil_chk(EduStanfordNlpLingTokensregexSequenceMatchRules_registeredRuleTypes)) getWithId:ruleType];
  }
}

EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule *EduStanfordNlpLingTokensregexSequenceMatchRules_createTokenPatternRuleWithEduStanfordNlpLingTokensregexEnv_withEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_withEduStanfordNlpLingTokensregexTypesExpression_(EduStanfordNlpLingTokensregexEnv *env, EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *expr, id<EduStanfordNlpLingTokensregexTypesExpression> result) {
  EduStanfordNlpLingTokensregexSequenceMatchRules_initialize();
  return [((EduStanfordNlpLingTokensregexSequenceMatchRules_TokenPatternExtractRuleCreator *) nil_chk(EduStanfordNlpLingTokensregexSequenceMatchRules_TOKEN_PATTERN_EXTRACT_RULE_CREATOR)) createWithEduStanfordNlpLingTokensregexEnv:env withEduStanfordNlpLingTokensregexSequencePattern_PatternExpr:expr withEduStanfordNlpLingTokensregexTypesExpression:result];
}

EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule *EduStanfordNlpLingTokensregexSequenceMatchRules_createTextPatternRuleWithEduStanfordNlpLingTokensregexEnv_withNSString_withEduStanfordNlpLingTokensregexTypesExpression_(EduStanfordNlpLingTokensregexEnv *env, NSString *expr, id<EduStanfordNlpLingTokensregexTypesExpression> result) {
  EduStanfordNlpLingTokensregexSequenceMatchRules_initialize();
  return [((EduStanfordNlpLingTokensregexSequenceMatchRules_TextPatternExtractRuleCreator *) nil_chk(EduStanfordNlpLingTokensregexSequenceMatchRules_TEXT_PATTERN_EXTRACT_RULE_CREATOR)) createWithEduStanfordNlpLingTokensregexEnv:env withNSString:expr withEduStanfordNlpLingTokensregexTypesExpression:result];
}

EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule *EduStanfordNlpLingTokensregexSequenceMatchRules_createMultiTokenPatternRuleWithEduStanfordNlpLingTokensregexEnv_withEduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule_withJavaUtilList_(EduStanfordNlpLingTokensregexEnv *env, EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule *template_, id<JavaUtilList> patterns) {
  EduStanfordNlpLingTokensregexSequenceMatchRules_initialize();
  return [((EduStanfordNlpLingTokensregexSequenceMatchRules_MultiTokenPatternExtractRuleCreator *) nil_chk(EduStanfordNlpLingTokensregexSequenceMatchRules_MULTI_TOKEN_PATTERN_EXTRACT_RULE_CREATOR)) createWithEduStanfordNlpLingTokensregexEnv:env withEduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule:template_ withJavaUtilList:patterns];
}

EduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor *EduStanfordNlpLingTokensregexSequenceMatchRules_createAnnotationExtractorWithEduStanfordNlpLingTokensregexEnv_withEduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule_(EduStanfordNlpLingTokensregexEnv *env, EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule *r) {
  EduStanfordNlpLingTokensregexSequenceMatchRules_initialize();
  EduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor *extractor = new_EduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor_init();
  extractor->name_ = ((EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule *) nil_chk(r))->name_;
  extractor->tokensAnnotationField_ = r->tokensAnnotationField_;
  extractor->tokensResultAnnotationField_ = r->tokensResultAnnotationField_;
  extractor->resultAnnotationField_ = r->resultAnnotationField_;
  extractor->resultNestedAnnotationField_ = r->resultNestedAnnotationField_;
  extractor->priority_ = r->priority_;
  extractor->weight_ = r->weight_;
  extractor->includeNested_ = r->includeNested_;
  extractor->resultAnnotationExtractor_ = EduStanfordNlpLingTokensregexEnvLookup_getDefaultResultAnnotationExtractorWithEduStanfordNlpLingTokensregexEnv_(env);
  extractor->tokensAggregator_ = EduStanfordNlpLingTokensregexEnvLookup_getDefaultTokensAggregatorWithEduStanfordNlpLingTokensregexEnv_(env);
  return extractor;
}

void EduStanfordNlpLingTokensregexSequenceMatchRules_init(EduStanfordNlpLingTokensregexSequenceMatchRules *self) {
  NSObject_init(self);
}

EduStanfordNlpLingTokensregexSequenceMatchRules *new_EduStanfordNlpLingTokensregexSequenceMatchRules_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequenceMatchRules, init)
}

EduStanfordNlpLingTokensregexSequenceMatchRules *create_EduStanfordNlpLingTokensregexSequenceMatchRules_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequenceMatchRules, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexSequenceMatchRules)

@implementation EduStanfordNlpLingTokensregexSequenceMatchRules_Rule

+ (const J2ObjcClassInfo *)__metadata {
  static const void *ptrTable[] = { "LEduStanfordNlpLingTokensregexSequenceMatchRules;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexSequenceMatchRules_Rule = { "Rule", "edu.stanford.nlp.ling.tokensregex", ptrTable, NULL, NULL, 7, 0x609, 0, 0, 0, -1, -1, -1, -1 };
  return &_EduStanfordNlpLingTokensregexSequenceMatchRules_Rule;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexSequenceMatchRules_Rule)

@implementation EduStanfordNlpLingTokensregexSequenceMatchRules_AssignmentRule

- (instancetype)initWithEduStanfordNlpLingTokensregexTypesAssignableExpression:(id<EduStanfordNlpLingTokensregexTypesAssignableExpression>)varExpr
                              withEduStanfordNlpLingTokensregexTypesExpression:(id<EduStanfordNlpLingTokensregexTypesExpression>)value {
  EduStanfordNlpLingTokensregexSequenceMatchRules_AssignmentRule_initWithEduStanfordNlpLingTokensregexTypesAssignableExpression_withEduStanfordNlpLingTokensregexTypesExpression_(self, varExpr, value);
  return self;
}

- (void)evaluateWithEduStanfordNlpLingTokensregexEnv:(EduStanfordNlpLingTokensregexEnv *)env {
  (void) [((id<EduStanfordNlpLingTokensregexTypesExpression>) nil_chk(expr_)) evaluateWithEduStanfordNlpLingTokensregexEnv:env withNSObjectArray:[IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpLingTokensregexTypesAssignableExpression:withEduStanfordNlpLingTokensregexTypesExpression:);
  methods[1].selector = @selector(evaluateWithEduStanfordNlpLingTokensregexEnv:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "expr_", "LEduStanfordNlpLingTokensregexTypesExpression;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpLingTokensregexTypesAssignableExpression;LEduStanfordNlpLingTokensregexTypesExpression;", "evaluate", "LEduStanfordNlpLingTokensregexEnv;", "LEduStanfordNlpLingTokensregexSequenceMatchRules;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexSequenceMatchRules_AssignmentRule = { "AssignmentRule", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, fields, 7, 0x9, 2, 1, 3, -1, -1, -1, -1 };
  return &_EduStanfordNlpLingTokensregexSequenceMatchRules_AssignmentRule;
}

@end

void EduStanfordNlpLingTokensregexSequenceMatchRules_AssignmentRule_initWithEduStanfordNlpLingTokensregexTypesAssignableExpression_withEduStanfordNlpLingTokensregexTypesExpression_(EduStanfordNlpLingTokensregexSequenceMatchRules_AssignmentRule *self, id<EduStanfordNlpLingTokensregexTypesAssignableExpression> varExpr, id<EduStanfordNlpLingTokensregexTypesExpression> value) {
  NSObject_init(self);
  self->expr_ = [((id<EduStanfordNlpLingTokensregexTypesAssignableExpression>) nil_chk(varExpr)) assignWithEduStanfordNlpLingTokensregexTypesExpression:value];
}

EduStanfordNlpLingTokensregexSequenceMatchRules_AssignmentRule *new_EduStanfordNlpLingTokensregexSequenceMatchRules_AssignmentRule_initWithEduStanfordNlpLingTokensregexTypesAssignableExpression_withEduStanfordNlpLingTokensregexTypesExpression_(id<EduStanfordNlpLingTokensregexTypesAssignableExpression> varExpr, id<EduStanfordNlpLingTokensregexTypesExpression> value) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequenceMatchRules_AssignmentRule, initWithEduStanfordNlpLingTokensregexTypesAssignableExpression_withEduStanfordNlpLingTokensregexTypesExpression_, varExpr, value)
}

EduStanfordNlpLingTokensregexSequenceMatchRules_AssignmentRule *create_EduStanfordNlpLingTokensregexSequenceMatchRules_AssignmentRule_initWithEduStanfordNlpLingTokensregexTypesAssignableExpression_withEduStanfordNlpLingTokensregexTypesExpression_(id<EduStanfordNlpLingTokensregexTypesAssignableExpression> varExpr, id<EduStanfordNlpLingTokensregexTypesExpression> value) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequenceMatchRules_AssignmentRule, initWithEduStanfordNlpLingTokensregexTypesAssignableExpression_withEduStanfordNlpLingTokensregexTypesExpression_, varExpr, value)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexSequenceMatchRules_AssignmentRule)

@implementation EduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x401, 0, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(extractWithId:withJavaUtilList:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "extract", "LNSObject;LJavaUtilList;", "(TI;Ljava/util/List<TO;>;)Z", "LEduStanfordNlpLingTokensregexSequenceMatchRules;", "<I:Ljava/lang/Object;O:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule = { "ExtractRule", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, NULL, 7, 0x609, 1, 0, 3, -1, -1, 4, -1 };
  return &_EduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule)

@implementation EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule

- (void)updateWithEduStanfordNlpLingTokensregexEnv:(EduStanfordNlpLingTokensregexEnv *)env
                                   withJavaUtilMap:(id<JavaUtilMap>)attributes {
  for (NSString * __strong key in nil_chk([((id<JavaUtilMap>) nil_chk(attributes)) keySet])) {
    id obj = [attributes getWithId:key];
    {
      id annoKey;
      switch (JreIndexOfStr(key, (id[]){ @"name", @"priority", @"stage", @"weight", @"over", @"active", @"ruleType", @"matchFindType", @"matchWithResults", @"matchedExpressionGroup" }, 10)) {
        case 0:
        name_ = (NSString *) cast_chk(EduStanfordNlpLingTokensregexTypesExpressions_asObjectWithEduStanfordNlpLingTokensregexEnv_withId_(env, obj), [NSString class]);
        break;
        case 1:
        priority_ = [((NSNumber *) nil_chk(((NSNumber *) cast_chk(EduStanfordNlpLingTokensregexTypesExpressions_asObjectWithEduStanfordNlpLingTokensregexEnv_withId_(env, obj), [NSNumber class])))) doubleValue];
        break;
        case 2:
        stage_ = [((NSNumber *) nil_chk(((NSNumber *) cast_chk(EduStanfordNlpLingTokensregexTypesExpressions_asObjectWithEduStanfordNlpLingTokensregexEnv_withId_(env, obj), [NSNumber class])))) intValue];
        break;
        case 3:
        weight_ = [((NSNumber *) nil_chk(((NSNumber *) cast_chk(EduStanfordNlpLingTokensregexTypesExpressions_asObjectWithEduStanfordNlpLingTokensregexEnv_withId_(env, obj), [NSNumber class])))) doubleValue];
        break;
        case 4:
        annoKey = EduStanfordNlpLingTokensregexTypesExpressions_asObjectWithEduStanfordNlpLingTokensregexEnv_withId_(env, obj);
        if ([annoKey isKindOfClass:[IOSClass class]]) {
          annotationField_ = (IOSClass *) cast_chk(annoKey, [IOSClass class]);
        }
        else if ([annoKey isKindOfClass:[NSString class]]) {
          annotationField_ = EduStanfordNlpLingTokensregexEnvLookup_lookupAnnotationKeyWithClassnameWithEduStanfordNlpLingTokensregexEnv_withNSString_(env, (NSString *) cast_chk(annoKey, [NSString class]));
        }
        else if (annotationField_ == nil) {
          annotationField_ = EduStanfordNlpUtilCoreMap_class_();
        }
        else {
          @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"Invalid annotation key ", annoKey));
        }
        break;
        case 5:
        active_ = [((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(EduStanfordNlpLingTokensregexTypesExpressions_asObjectWithEduStanfordNlpLingTokensregexEnv_withId_(env, obj), [JavaLangBoolean class]))) booleanValue];
        break;
        case 6:
        ruleType_ = (NSString *) cast_chk(EduStanfordNlpLingTokensregexTypesExpressions_asObjectWithEduStanfordNlpLingTokensregexEnv_withId_(env, obj), [NSString class]);
        break;
        case 7:
        matchFindType_ = EduStanfordNlpLingTokensregexSequenceMatcher_FindType_valueOfWithNSString_((NSString *) cast_chk(EduStanfordNlpLingTokensregexTypesExpressions_asObjectWithEduStanfordNlpLingTokensregexEnv_withId_(env, obj), [NSString class]));
        break;
        case 8:
        matchWithResults_ = [((JavaLangBoolean *) nil_chk(((JavaLangBoolean *) cast_chk(EduStanfordNlpLingTokensregexTypesExpressions_asObjectWithEduStanfordNlpLingTokensregexEnv_withId_(env, obj), [JavaLangBoolean class])))) booleanValue];
        break;
        case 9:
        matchedExpressionGroup_ = [((NSNumber *) nil_chk(((NSNumber *) cast_chk(EduStanfordNlpLingTokensregexTypesExpressions_asObjectWithEduStanfordNlpLingTokensregexEnv_withId_(env, obj), [NSNumber class])))) intValue];
        break;
      }
    }
  }
}

- (jboolean)extractWithId:(id)inArg
         withJavaUtilList:(id<JavaUtilList>)outArg {
  return [((id<EduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule>) nil_chk(extractRule_)) extractWithId:inArg withJavaUtilList:outArg];
}

- (jboolean)testWithId:(EduStanfordNlpLingTokensregexMatchedExpression *)obj {
  return [((id<JavaUtilFunctionPredicate>) nil_chk(filterRule_)) testWithId:obj];
}

- (jboolean)isMostlyCompatibleWithEduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule:(EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule *)aer {
  return (stage_ == ((EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule *) nil_chk(aer))->stage_ && JavaUtilObjects_equalsWithId_withId_(annotationField_, aer->annotationField_) && JavaUtilObjects_equalsWithId_withId_(tokensAnnotationField_, aer->tokensAnnotationField_) && matchedExpressionGroup_ == 0 && aer->matchedExpressionGroup_ == 0 && matchWithResults_ == aer->matchWithResults_ && JavaUtilObjects_equalsWithId_withId_(ruleType_, aer->ruleType_) && isComposite_ == aer->isComposite_ && active_ == aer->active_ && JavaUtilObjects_equalsWithId_withId_(result_, aer->result_));
}

- (jboolean)hasTokensRegexPattern {
  return pattern_ != nil && [pattern_ isKindOfClass:[EduStanfordNlpLingTokensregexTokenSequencePattern class]];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilFunctionPredicate>)and__WithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)arg0 {
  return JavaUtilFunctionPredicate_and__WithJavaUtilFunctionPredicate_(self, arg0);
}

- (id<JavaUtilFunctionPredicate>)negate {
  return JavaUtilFunctionPredicate_negate(self);
}

- (id<JavaUtilFunctionPredicate>)or__WithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)arg0 {
  return JavaUtilFunctionPredicate_or__WithJavaUtilFunctionPredicate_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "Z", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "Z", 0x1, 6, 7, -1, 8, -1, -1 },
    { NULL, "Z", 0x1, 9, 10, -1, 11, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(updateWithEduStanfordNlpLingTokensregexEnv:withJavaUtilMap:);
  methods[1].selector = @selector(extractWithId:withJavaUtilList:);
  methods[2].selector = @selector(testWithId:);
  methods[3].selector = @selector(isMostlyCompatibleWithEduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule:);
  methods[4].selector = @selector(hasTokensRegexPattern);
  methods[5].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "name_", "LNSString;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "stage_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "priority_", "D", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "weight_", "D", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "annotationField_", "LIOSClass;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "tokensAnnotationField_", "LIOSClass;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "tokensResultAnnotationField_", "LJavaUtilList;", .constantValue.asLong = 0, 0x1, -1, -1, 12, -1 },
    { "resultAnnotationField_", "LJavaUtilList;", .constantValue.asLong = 0, 0x1, -1, -1, 12, -1 },
    { "resultNestedAnnotationField_", "LIOSClass;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "matchFindType_", "LEduStanfordNlpLingTokensregexSequenceMatcher_FindType;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "matchedExpressionGroup_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "matchWithResults_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "ruleType_", "LNSString;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "isComposite_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "includeNested_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "active_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "extractRule_", "LEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule;", .constantValue.asLong = 0, 0x1, -1, -1, 13, -1 },
    { "filterRule_", "LJavaUtilFunctionPredicate;", .constantValue.asLong = 0, 0x1, -1, -1, 14, -1 },
    { "pattern_", "LNSObject;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "result_", "LEduStanfordNlpLingTokensregexTypesExpression;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "update", "LEduStanfordNlpLingTokensregexEnv;LJavaUtilMap;", "(Ledu/stanford/nlp/ling/tokensregex/Env;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "extract", "LNSObject;LJavaUtilList;", "(TS;Ljava/util/List<TT;>;)Z", "test", "LEduStanfordNlpLingTokensregexMatchedExpression;", "(TT;)Z", "isMostlyCompatible", "LEduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule;", "(Ledu/stanford/nlp/ling/tokensregex/SequenceMatchRules$AnnotationExtractRule<TS;TT;>;)Z", "Ljava/util/List<Ljava/lang/Class;>;", "Ledu/stanford/nlp/ling/tokensregex/SequenceMatchRules$ExtractRule<TS;TT;>;", "Ljava/util/function/Predicate<TT;>;", "LEduStanfordNlpLingTokensregexSequenceMatchRules;", "<S:Ljava/lang/Object;T:Ledu/stanford/nlp/ling/tokensregex/MatchedExpression;>Ljava/lang/Object;Ledu/stanford/nlp/ling/tokensregex/SequenceMatchRules$Rule;Ledu/stanford/nlp/ling/tokensregex/SequenceMatchRules$ExtractRule<TS;TT;>;Ljava/util/function/Predicate<TT;>;Ljava/io/Serializable;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule = { "AnnotationExtractRule", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, fields, 7, 0x9, 6, 20, 15, -1, -1, 16, -1 };
  return &_EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule;
}

@end

void EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule_init(EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule *self) {
  NSObject_init(self);
  self->stage_ = 1;
  self->includeNested_ = true;
  self->active_ = true;
}

EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule *new_EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule, init)
}

EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule *create_EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule)

@implementation EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRuleCreator

- (EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule *)createWithEduStanfordNlpLingTokensregexEnv:(EduStanfordNlpLingTokensregexEnv *)env {
  EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule *r = new_EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule_init();
  r->resultAnnotationField_ = EduStanfordNlpLingTokensregexEnvLookup_getDefaultResultAnnotationKeyWithEduStanfordNlpLingTokensregexEnv_(env);
  r->resultNestedAnnotationField_ = EduStanfordNlpLingTokensregexEnvLookup_getDefaultNestedResultsAnnotationKeyWithEduStanfordNlpLingTokensregexEnv_(env);
  r->tokensAnnotationField_ = EduStanfordNlpLingTokensregexEnvLookup_getDefaultTokensAnnotationKeyWithEduStanfordNlpLingTokensregexEnv_(env);
  r->tokensResultAnnotationField_ = EduStanfordNlpLingTokensregexEnvLookup_getDefaultTokensResultAnnotationKeyWithEduStanfordNlpLingTokensregexEnv_(env);
  if (env != nil) {
    [r updateWithEduStanfordNlpLingTokensregexEnv:env withJavaUtilMap:[env getDefaults]];
  }
  return r;
}

- (EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule *)createWithEduStanfordNlpLingTokensregexEnv:(EduStanfordNlpLingTokensregexEnv *)env
                                                                                                      withJavaUtilMap:(id<JavaUtilMap>)attributes {
  EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule *r = [self createWithEduStanfordNlpLingTokensregexEnv:env];
  if (attributes != nil) {
    [((EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule *) nil_chk(r)) updateWithEduStanfordNlpLingTokensregexEnv:env withJavaUtilMap:attributes];
  }
  return r;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRuleCreator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LEduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule;", 0x1, 0, 2, -1, 3, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(createWithEduStanfordNlpLingTokensregexEnv:);
  methods[1].selector = @selector(createWithEduStanfordNlpLingTokensregexEnv:withJavaUtilMap:);
  methods[2].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "create", "LEduStanfordNlpLingTokensregexEnv;", "LEduStanfordNlpLingTokensregexEnv;LJavaUtilMap;", "(Ledu/stanford/nlp/ling/tokensregex/Env;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)Ledu/stanford/nlp/ling/tokensregex/SequenceMatchRules$AnnotationExtractRule;", "LEduStanfordNlpLingTokensregexSequenceMatchRules;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRuleCreator = { "AnnotationExtractRuleCreator", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, NULL, 7, 0x9, 3, 0, 4, -1, -1, -1, -1 };
  return &_EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRuleCreator;
}

@end

void EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRuleCreator_init(EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRuleCreator *self) {
  NSObject_init(self);
}

EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRuleCreator *new_EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRuleCreator_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRuleCreator, init)
}

EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRuleCreator *create_EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRuleCreator_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRuleCreator, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRuleCreator)

@implementation EduStanfordNlpLingTokensregexSequenceMatchRules_CompositeExtractRuleCreator

- (void)updateExtractRuleWithEduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule:(EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule *)r
                                                              withEduStanfordNlpLingTokensregexEnv:(EduStanfordNlpLingTokensregexEnv *)env
                                      withEduStanfordNlpLingTokensregexSequencePattern_PatternExpr:(EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *)expr
                                                  withEduStanfordNlpLingTokensregexTypesExpression:(id<EduStanfordNlpLingTokensregexTypesExpression>)action
                                                  withEduStanfordNlpLingTokensregexTypesExpression:(id<EduStanfordNlpLingTokensregexTypesExpression>)result {
  EduStanfordNlpLingTokensregexTokenSequencePattern *pattern = EduStanfordNlpLingTokensregexTokenSequencePattern_compileWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_(expr);
  [self updateExtractRuleWithEduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule:r withEduStanfordNlpLingTokensregexEnv:env withEduStanfordNlpLingTokensregexTokenSequencePattern:pattern withEduStanfordNlpLingTokensregexTypesExpression:action withEduStanfordNlpLingTokensregexTypesExpression:result];
}

- (void)updateExtractRuleWithEduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule:(EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule *)r
                                                              withEduStanfordNlpLingTokensregexEnv:(EduStanfordNlpLingTokensregexEnv *)env
                                             withEduStanfordNlpLingTokensregexTokenSequencePattern:(EduStanfordNlpLingTokensregexTokenSequencePattern *)pattern
                                                  withEduStanfordNlpLingTokensregexTypesExpression:(id<EduStanfordNlpLingTokensregexTypesExpression>)action
                                                  withEduStanfordNlpLingTokensregexTypesExpression:(id<EduStanfordNlpLingTokensregexTypesExpression>)result {
  EduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor *annotationExtractor = EduStanfordNlpLingTokensregexSequenceMatchRules_createAnnotationExtractorWithEduStanfordNlpLingTokensregexEnv_withEduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule_(env, r);
  EduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchResultExtractor *valueExtractor = new_EduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchResultExtractor_initWithEduStanfordNlpLingTokensregexEnv_withEduStanfordNlpLingTokensregexTypesExpression_withEduStanfordNlpLingTokensregexTypesExpression_(env, action, result);
  EduStanfordNlpLingTokensregexSequenceMatchRules_SequencePatternExtractRule *valueExtractRule = new_EduStanfordNlpLingTokensregexSequenceMatchRules_SequencePatternExtractRule_initWithEduStanfordNlpLingTokensregexSequencePattern_withJavaUtilFunctionFunction_withEduStanfordNlpLingTokensregexSequenceMatcher_FindType_withBoolean_(pattern, valueExtractor, ((EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule *) nil_chk(r))->matchFindType_, r->matchWithResults_);
  EduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchedExpressionExtractor *exprExtractor = new_EduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchedExpressionExtractor_initWithEduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor_withInt_(annotationExtractor, r->matchedExpressionGroup_);
  EduStanfordNlpLingTokensregexSequenceMatchRules_SequencePatternExtractRule *exprExtractRule = new_EduStanfordNlpLingTokensregexSequenceMatchRules_SequencePatternExtractRule_initWithEduStanfordNlpLingTokensregexSequencePattern_withJavaUtilFunctionFunction_withEduStanfordNlpLingTokensregexSequenceMatcher_FindType_withBoolean_(pattern, exprExtractor, r->matchFindType_, r->matchWithResults_);
  ((EduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor *) nil_chk(annotationExtractor))->expressionToValue_ = new_EduStanfordNlpLingTokensregexSequenceMatchRules_CompositeExtractRuleCreator_$Lambda$1_initWithEduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchResultExtractor_(valueExtractor);
  annotationExtractor->valueExtractor_ = new_EduStanfordNlpLingTokensregexSequenceMatchRules_CoreMapFunctionApplier_initWithEduStanfordNlpLingTokensregexEnv_withIOSClass_withJavaUtilFunctionFunction_(env, r->annotationField_, valueExtractRule);
  r->extractRule_ = exprExtractRule;
  r->filterRule_ = new_EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationMatchedFilter_initWithEduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor_(annotationExtractor);
  r->pattern_ = pattern;
  r->result_ = result;
  ((EduStanfordNlpLingTokensregexTokenSequencePattern *) nil_chk(pattern))->weight_ = r->weight_;
  pattern->priority_ = r->priority_;
}

- (EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule *)createWithEduStanfordNlpLingTokensregexEnv:(EduStanfordNlpLingTokensregexEnv *)env
                                                         withEduStanfordNlpLingTokensregexSequencePattern_PatternExpr:(EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *)expr
                                                                     withEduStanfordNlpLingTokensregexTypesExpression:(id<EduStanfordNlpLingTokensregexTypesExpression>)result {
  EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule *r = [super createWithEduStanfordNlpLingTokensregexEnv:env withJavaUtilMap:nil];
  ((EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule *) nil_chk(r))->isComposite_ = true;
  if (r->annotationField_ == nil) {
    r->annotationField_ = r->resultNestedAnnotationField_;
  }
  if (r->annotationField_ == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Error creating composite rule: no annotation field");
  }
  r->ruleType_ = EduStanfordNlpLingTokensregexSequenceMatchRules_TOKEN_PATTERN_RULE_TYPE;
  [self updateExtractRuleWithEduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule:r withEduStanfordNlpLingTokensregexEnv:env withEduStanfordNlpLingTokensregexSequencePattern_PatternExpr:expr withEduStanfordNlpLingTokensregexTypesExpression:nil withEduStanfordNlpLingTokensregexTypesExpression:result];
  return r;
}

- (EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule *)createWithEduStanfordNlpLingTokensregexEnv:(EduStanfordNlpLingTokensregexEnv *)env
                                                                                                      withJavaUtilMap:(id<JavaUtilMap>)attributes {
  EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule *r = [super createWithEduStanfordNlpLingTokensregexEnv:env withJavaUtilMap:attributes];
  ((EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule *) nil_chk(r))->isComposite_ = true;
  if (r->annotationField_ == nil) {
    r->annotationField_ = r->resultNestedAnnotationField_;
  }
  if (r->annotationField_ == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Error creating composite rule: no annotation field");
  }
  if (r->ruleType_ == nil) {
    r->ruleType_ = EduStanfordNlpLingTokensregexSequenceMatchRules_TOKEN_PATTERN_RULE_TYPE;
  }
  EduStanfordNlpLingTokensregexTokenSequencePattern *expr = (EduStanfordNlpLingTokensregexTokenSequencePattern *) cast_chk(EduStanfordNlpLingTokensregexTypesExpressions_asObjectWithEduStanfordNlpLingTokensregexEnv_withId_(env, [((id<JavaUtilMap>) nil_chk(attributes)) getWithId:@"pattern"]), [EduStanfordNlpLingTokensregexTokenSequencePattern class]);
  id<EduStanfordNlpLingTokensregexTypesExpression> action = EduStanfordNlpLingTokensregexTypesExpressions_asExpressionWithEduStanfordNlpLingTokensregexEnv_withId_(env, [attributes getWithId:@"action"]);
  id<EduStanfordNlpLingTokensregexTypesExpression> result = EduStanfordNlpLingTokensregexTypesExpressions_asExpressionWithEduStanfordNlpLingTokensregexEnv_withId_(env, [attributes getWithId:@"result"]);
  [self updateExtractRuleWithEduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule:r withEduStanfordNlpLingTokensregexEnv:env withEduStanfordNlpLingTokensregexTokenSequencePattern:expr withEduStanfordNlpLingTokensregexTypesExpression:action withEduStanfordNlpLingTokensregexTypesExpression:result];
  return r;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpLingTokensregexSequenceMatchRules_CompositeExtractRuleCreator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x4, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 0, 2, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule;", 0x4, 3, 4, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule;", 0x1, 3, 5, -1, 6, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(updateExtractRuleWithEduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule:withEduStanfordNlpLingTokensregexEnv:withEduStanfordNlpLingTokensregexSequencePattern_PatternExpr:withEduStanfordNlpLingTokensregexTypesExpression:withEduStanfordNlpLingTokensregexTypesExpression:);
  methods[1].selector = @selector(updateExtractRuleWithEduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule:withEduStanfordNlpLingTokensregexEnv:withEduStanfordNlpLingTokensregexTokenSequencePattern:withEduStanfordNlpLingTokensregexTypesExpression:withEduStanfordNlpLingTokensregexTypesExpression:);
  methods[2].selector = @selector(createWithEduStanfordNlpLingTokensregexEnv:withEduStanfordNlpLingTokensregexSequencePattern_PatternExpr:withEduStanfordNlpLingTokensregexTypesExpression:);
  methods[3].selector = @selector(createWithEduStanfordNlpLingTokensregexEnv:withJavaUtilMap:);
  methods[4].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "updateExtractRule", "LEduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule;LEduStanfordNlpLingTokensregexEnv;LEduStanfordNlpLingTokensregexSequencePattern_PatternExpr;LEduStanfordNlpLingTokensregexTypesExpression;LEduStanfordNlpLingTokensregexTypesExpression;", "LEduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule;LEduStanfordNlpLingTokensregexEnv;LEduStanfordNlpLingTokensregexTokenSequencePattern;LEduStanfordNlpLingTokensregexTypesExpression;LEduStanfordNlpLingTokensregexTypesExpression;", "create", "LEduStanfordNlpLingTokensregexEnv;LEduStanfordNlpLingTokensregexSequencePattern_PatternExpr;LEduStanfordNlpLingTokensregexTypesExpression;", "LEduStanfordNlpLingTokensregexEnv;LJavaUtilMap;", "(Ledu/stanford/nlp/ling/tokensregex/Env;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)Ledu/stanford/nlp/ling/tokensregex/SequenceMatchRules$AnnotationExtractRule;", "LEduStanfordNlpLingTokensregexSequenceMatchRules;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexSequenceMatchRules_CompositeExtractRuleCreator = { "CompositeExtractRuleCreator", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, NULL, 7, 0x9, 5, 0, 7, -1, -1, -1, -1 };
  return &_EduStanfordNlpLingTokensregexSequenceMatchRules_CompositeExtractRuleCreator;
}

@end

void EduStanfordNlpLingTokensregexSequenceMatchRules_CompositeExtractRuleCreator_init(EduStanfordNlpLingTokensregexSequenceMatchRules_CompositeExtractRuleCreator *self) {
  EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRuleCreator_init(self);
}

EduStanfordNlpLingTokensregexSequenceMatchRules_CompositeExtractRuleCreator *new_EduStanfordNlpLingTokensregexSequenceMatchRules_CompositeExtractRuleCreator_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequenceMatchRules_CompositeExtractRuleCreator, init)
}

EduStanfordNlpLingTokensregexSequenceMatchRules_CompositeExtractRuleCreator *create_EduStanfordNlpLingTokensregexSequenceMatchRules_CompositeExtractRuleCreator_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequenceMatchRules_CompositeExtractRuleCreator, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexSequenceMatchRules_CompositeExtractRuleCreator)

@implementation EduStanfordNlpLingTokensregexSequenceMatchRules_CompositeExtractRuleCreator_$Lambda$1

- (id)applyWithId:(EduStanfordNlpLingTokensregexMatchedExpression *)matched {
  if (matched != nil && matched->context_ != nil && [EduStanfordNlpLingTokensregexSequenceMatchResult_class_() isInstance:matched->context_]) {
    return [((EduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchResultExtractor *) nil_chk(val$valueExtractor_)) applyWithId:(id<EduStanfordNlpLingTokensregexSequenceMatchResult>) cast_check(matched->context_, EduStanfordNlpLingTokensregexSequenceMatchResult_class_())];
  }
  else return nil;
}

- (id<JavaUtilFunctionFunction>)andThenWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_andThenWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilFunctionFunction>)composeWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_composeWithJavaUtilFunctionFunction_(self, arg0);
}

@end

void EduStanfordNlpLingTokensregexSequenceMatchRules_CompositeExtractRuleCreator_$Lambda$1_initWithEduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchResultExtractor_(EduStanfordNlpLingTokensregexSequenceMatchRules_CompositeExtractRuleCreator_$Lambda$1 *self, EduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchResultExtractor *capture$0) {
  self->val$valueExtractor_ = capture$0;
  NSObject_init(self);
}

EduStanfordNlpLingTokensregexSequenceMatchRules_CompositeExtractRuleCreator_$Lambda$1 *new_EduStanfordNlpLingTokensregexSequenceMatchRules_CompositeExtractRuleCreator_$Lambda$1_initWithEduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchResultExtractor_(EduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchResultExtractor *capture$0) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequenceMatchRules_CompositeExtractRuleCreator_$Lambda$1, initWithEduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchResultExtractor_, capture$0)
}

EduStanfordNlpLingTokensregexSequenceMatchRules_CompositeExtractRuleCreator_$Lambda$1 *create_EduStanfordNlpLingTokensregexSequenceMatchRules_CompositeExtractRuleCreator_$Lambda$1_initWithEduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchResultExtractor_(EduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchResultExtractor *capture$0) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequenceMatchRules_CompositeExtractRuleCreator_$Lambda$1, initWithEduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchResultExtractor_, capture$0)
}

@implementation EduStanfordNlpLingTokensregexSequenceMatchRules_TokenPatternExtractRuleCreator

- (void)updateExtractRuleWithEduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule:(EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule *)r
                                                              withEduStanfordNlpLingTokensregexEnv:(EduStanfordNlpLingTokensregexEnv *)env
                                      withEduStanfordNlpLingTokensregexSequencePattern_PatternExpr:(EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *)expr
                                                  withEduStanfordNlpLingTokensregexTypesExpression:(id<EduStanfordNlpLingTokensregexTypesExpression>)action
                                                  withEduStanfordNlpLingTokensregexTypesExpression:(id<EduStanfordNlpLingTokensregexTypesExpression>)result {
  EduStanfordNlpLingTokensregexTokenSequencePattern *pattern = EduStanfordNlpLingTokensregexTokenSequencePattern_compileWithEduStanfordNlpLingTokensregexSequencePattern_PatternExpr_(expr);
  [self updateExtractRuleWithEduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule:r withEduStanfordNlpLingTokensregexEnv:env withEduStanfordNlpLingTokensregexTokenSequencePattern:pattern withEduStanfordNlpLingTokensregexTypesExpression:action withEduStanfordNlpLingTokensregexTypesExpression:result];
}

- (void)updateExtractRuleWithEduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule:(EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule *)r
                                                              withEduStanfordNlpLingTokensregexEnv:(EduStanfordNlpLingTokensregexEnv *)env
                                             withEduStanfordNlpLingTokensregexTokenSequencePattern:(EduStanfordNlpLingTokensregexTokenSequencePattern *)pattern
                                                  withEduStanfordNlpLingTokensregexTypesExpression:(id<EduStanfordNlpLingTokensregexTypesExpression>)action
                                                  withEduStanfordNlpLingTokensregexTypesExpression:(id<EduStanfordNlpLingTokensregexTypesExpression>)result {
  EduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor *annotationExtractor = EduStanfordNlpLingTokensregexSequenceMatchRules_createAnnotationExtractorWithEduStanfordNlpLingTokensregexEnv_withEduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule_(env, r);
  EduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchResultExtractor *valueExtractor = new_EduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchResultExtractor_initWithEduStanfordNlpLingTokensregexEnv_withEduStanfordNlpLingTokensregexTypesExpression_withEduStanfordNlpLingTokensregexTypesExpression_(env, action, result);
  EduStanfordNlpLingTokensregexSequenceMatchRules_SequencePatternExtractRule *valueExtractRule = new_EduStanfordNlpLingTokensregexSequenceMatchRules_SequencePatternExtractRule_initWithEduStanfordNlpLingTokensregexSequencePattern_withJavaUtilFunctionFunction_withEduStanfordNlpLingTokensregexSequenceMatcher_FindType_withBoolean_(pattern, valueExtractor, ((EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule *) nil_chk(r))->matchFindType_, r->matchWithResults_);
  EduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchedExpressionExtractor *exprExtractor = new_EduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchedExpressionExtractor_initWithEduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor_withInt_(annotationExtractor, r->matchedExpressionGroup_);
  EduStanfordNlpLingTokensregexSequenceMatchRules_SequencePatternExtractRule *exprExtractRule = new_EduStanfordNlpLingTokensregexSequenceMatchRules_SequencePatternExtractRule_initWithEduStanfordNlpLingTokensregexSequencePattern_withJavaUtilFunctionFunction_withEduStanfordNlpLingTokensregexSequenceMatcher_FindType_withBoolean_(pattern, exprExtractor, r->matchFindType_, r->matchWithResults_);
  ((EduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor *) nil_chk(annotationExtractor))->expressionToValue_ = new_EduStanfordNlpLingTokensregexSequenceMatchRules_TokenPatternExtractRuleCreator_$Lambda$1_initWithEduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchResultExtractor_(valueExtractor);
  if (r->annotationField_ != nil && r->annotationField_ != EduStanfordNlpUtilCoreMap_class_()) {
    annotationExtractor->valueExtractor_ = new_EduStanfordNlpLingTokensregexSequenceMatchRules_CoreMapFunctionApplier_initWithEduStanfordNlpLingTokensregexEnv_withIOSClass_withJavaUtilFunctionFunction_(env, r->annotationField_, valueExtractRule);
    r->extractRule_ = new_EduStanfordNlpLingTokensregexSequenceMatchRules_CoreMapExtractRule_initWithEduStanfordNlpLingTokensregexEnv_withIOSClass_withEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule_(env, r->annotationField_, exprExtractRule);
  }
  else {
    annotationExtractor->valueExtractor_ = new_EduStanfordNlpLingTokensregexSequenceMatchRules_CoreMapToListFunctionApplier_initWithEduStanfordNlpLingTokensregexEnv_withJavaUtilFunctionFunction_(env, valueExtractRule);
    r->extractRule_ = new_EduStanfordNlpLingTokensregexSequenceMatchRules_CoreMapToListExtractRule_initWithEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule_(exprExtractRule);
  }
  r->filterRule_ = new_EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationMatchedFilter_initWithEduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor_(annotationExtractor);
  r->pattern_ = pattern;
  r->result_ = result;
  ((EduStanfordNlpLingTokensregexTokenSequencePattern *) nil_chk(pattern))->weight_ = r->weight_;
  pattern->priority_ = r->priority_;
}

- (EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule *)createWithEduStanfordNlpLingTokensregexEnv:(EduStanfordNlpLingTokensregexEnv *)env
                                                         withEduStanfordNlpLingTokensregexSequencePattern_PatternExpr:(EduStanfordNlpLingTokensregexSequencePattern_PatternExpr *)expr
                                                                     withEduStanfordNlpLingTokensregexTypesExpression:(id<EduStanfordNlpLingTokensregexTypesExpression>)result {
  EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule *r = [super createWithEduStanfordNlpLingTokensregexEnv:env withJavaUtilMap:nil];
  if (((EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule *) nil_chk(r))->annotationField_ == nil) {
    r->annotationField_ = r->tokensAnnotationField_;
  }
  r->ruleType_ = EduStanfordNlpLingTokensregexSequenceMatchRules_TOKEN_PATTERN_RULE_TYPE;
  [self updateExtractRuleWithEduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule:r withEduStanfordNlpLingTokensregexEnv:env withEduStanfordNlpLingTokensregexSequencePattern_PatternExpr:expr withEduStanfordNlpLingTokensregexTypesExpression:nil withEduStanfordNlpLingTokensregexTypesExpression:result];
  return r;
}

- (EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule *)createWithEduStanfordNlpLingTokensregexEnv:(EduStanfordNlpLingTokensregexEnv *)env
                                                                                                      withJavaUtilMap:(id<JavaUtilMap>)attributes {
  EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule *r = [super createWithEduStanfordNlpLingTokensregexEnv:env withJavaUtilMap:attributes];
  if (((EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule *) nil_chk(r))->annotationField_ == nil) {
    r->annotationField_ = r->tokensAnnotationField_;
  }
  if (r->ruleType_ == nil) {
    r->ruleType_ = EduStanfordNlpLingTokensregexSequenceMatchRules_TOKEN_PATTERN_RULE_TYPE;
  }
  EduStanfordNlpLingTokensregexTokenSequencePattern *expr = (EduStanfordNlpLingTokensregexTokenSequencePattern *) cast_chk(EduStanfordNlpLingTokensregexTypesExpressions_asObjectWithEduStanfordNlpLingTokensregexEnv_withId_(env, [((id<JavaUtilMap>) nil_chk(attributes)) getWithId:@"pattern"]), [EduStanfordNlpLingTokensregexTokenSequencePattern class]);
  id<EduStanfordNlpLingTokensregexTypesExpression> action = EduStanfordNlpLingTokensregexTypesExpressions_asExpressionWithEduStanfordNlpLingTokensregexEnv_withId_(env, [attributes getWithId:@"action"]);
  id<EduStanfordNlpLingTokensregexTypesExpression> result = EduStanfordNlpLingTokensregexTypesExpressions_asExpressionWithEduStanfordNlpLingTokensregexEnv_withId_(env, [attributes getWithId:@"result"]);
  [self updateExtractRuleWithEduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule:r withEduStanfordNlpLingTokensregexEnv:env withEduStanfordNlpLingTokensregexTokenSequencePattern:expr withEduStanfordNlpLingTokensregexTypesExpression:action withEduStanfordNlpLingTokensregexTypesExpression:result];
  return r;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpLingTokensregexSequenceMatchRules_TokenPatternExtractRuleCreator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x4, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 0, 2, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule;", 0x4, 3, 4, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule;", 0x1, 3, 5, -1, 6, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(updateExtractRuleWithEduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule:withEduStanfordNlpLingTokensregexEnv:withEduStanfordNlpLingTokensregexSequencePattern_PatternExpr:withEduStanfordNlpLingTokensregexTypesExpression:withEduStanfordNlpLingTokensregexTypesExpression:);
  methods[1].selector = @selector(updateExtractRuleWithEduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule:withEduStanfordNlpLingTokensregexEnv:withEduStanfordNlpLingTokensregexTokenSequencePattern:withEduStanfordNlpLingTokensregexTypesExpression:withEduStanfordNlpLingTokensregexTypesExpression:);
  methods[2].selector = @selector(createWithEduStanfordNlpLingTokensregexEnv:withEduStanfordNlpLingTokensregexSequencePattern_PatternExpr:withEduStanfordNlpLingTokensregexTypesExpression:);
  methods[3].selector = @selector(createWithEduStanfordNlpLingTokensregexEnv:withJavaUtilMap:);
  methods[4].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "updateExtractRule", "LEduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule;LEduStanfordNlpLingTokensregexEnv;LEduStanfordNlpLingTokensregexSequencePattern_PatternExpr;LEduStanfordNlpLingTokensregexTypesExpression;LEduStanfordNlpLingTokensregexTypesExpression;", "LEduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule;LEduStanfordNlpLingTokensregexEnv;LEduStanfordNlpLingTokensregexTokenSequencePattern;LEduStanfordNlpLingTokensregexTypesExpression;LEduStanfordNlpLingTokensregexTypesExpression;", "create", "LEduStanfordNlpLingTokensregexEnv;LEduStanfordNlpLingTokensregexSequencePattern_PatternExpr;LEduStanfordNlpLingTokensregexTypesExpression;", "LEduStanfordNlpLingTokensregexEnv;LJavaUtilMap;", "(Ledu/stanford/nlp/ling/tokensregex/Env;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)Ledu/stanford/nlp/ling/tokensregex/SequenceMatchRules$AnnotationExtractRule;", "LEduStanfordNlpLingTokensregexSequenceMatchRules;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexSequenceMatchRules_TokenPatternExtractRuleCreator = { "TokenPatternExtractRuleCreator", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, NULL, 7, 0x9, 5, 0, 7, -1, -1, -1, -1 };
  return &_EduStanfordNlpLingTokensregexSequenceMatchRules_TokenPatternExtractRuleCreator;
}

@end

void EduStanfordNlpLingTokensregexSequenceMatchRules_TokenPatternExtractRuleCreator_init(EduStanfordNlpLingTokensregexSequenceMatchRules_TokenPatternExtractRuleCreator *self) {
  EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRuleCreator_init(self);
}

EduStanfordNlpLingTokensregexSequenceMatchRules_TokenPatternExtractRuleCreator *new_EduStanfordNlpLingTokensregexSequenceMatchRules_TokenPatternExtractRuleCreator_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequenceMatchRules_TokenPatternExtractRuleCreator, init)
}

EduStanfordNlpLingTokensregexSequenceMatchRules_TokenPatternExtractRuleCreator *create_EduStanfordNlpLingTokensregexSequenceMatchRules_TokenPatternExtractRuleCreator_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequenceMatchRules_TokenPatternExtractRuleCreator, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexSequenceMatchRules_TokenPatternExtractRuleCreator)

@implementation EduStanfordNlpLingTokensregexSequenceMatchRules_TokenPatternExtractRuleCreator_$Lambda$1

- (id)applyWithId:(EduStanfordNlpLingTokensregexMatchedExpression *)matched {
  if (matched != nil && matched->context_ != nil && [EduStanfordNlpLingTokensregexSequenceMatchResult_class_() isInstance:matched->context_]) {
    return [((EduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchResultExtractor *) nil_chk(val$valueExtractor_)) applyWithId:(id<EduStanfordNlpLingTokensregexSequenceMatchResult>) cast_check(matched->context_, EduStanfordNlpLingTokensregexSequenceMatchResult_class_())];
  }
  else return nil;
}

- (id<JavaUtilFunctionFunction>)andThenWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_andThenWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilFunctionFunction>)composeWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_composeWithJavaUtilFunctionFunction_(self, arg0);
}

@end

void EduStanfordNlpLingTokensregexSequenceMatchRules_TokenPatternExtractRuleCreator_$Lambda$1_initWithEduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchResultExtractor_(EduStanfordNlpLingTokensregexSequenceMatchRules_TokenPatternExtractRuleCreator_$Lambda$1 *self, EduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchResultExtractor *capture$0) {
  self->val$valueExtractor_ = capture$0;
  NSObject_init(self);
}

EduStanfordNlpLingTokensregexSequenceMatchRules_TokenPatternExtractRuleCreator_$Lambda$1 *new_EduStanfordNlpLingTokensregexSequenceMatchRules_TokenPatternExtractRuleCreator_$Lambda$1_initWithEduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchResultExtractor_(EduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchResultExtractor *capture$0) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequenceMatchRules_TokenPatternExtractRuleCreator_$Lambda$1, initWithEduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchResultExtractor_, capture$0)
}

EduStanfordNlpLingTokensregexSequenceMatchRules_TokenPatternExtractRuleCreator_$Lambda$1 *create_EduStanfordNlpLingTokensregexSequenceMatchRules_TokenPatternExtractRuleCreator_$Lambda$1_initWithEduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchResultExtractor_(EduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchResultExtractor *capture$0) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequenceMatchRules_TokenPatternExtractRuleCreator_$Lambda$1, initWithEduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchResultExtractor_, capture$0)
}

@implementation EduStanfordNlpLingTokensregexSequenceMatchRules_MultiTokenPatternExtractRuleCreator

- (void)updateExtractRuleWithEduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule:(EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule *)r
                                                              withEduStanfordNlpLingTokensregexEnv:(EduStanfordNlpLingTokensregexEnv *)env
                                              withEduStanfordNlpLingTokensregexMultiPatternMatcher:(EduStanfordNlpLingTokensregexMultiPatternMatcher *)pattern
                                                  withEduStanfordNlpLingTokensregexTypesExpression:(id<EduStanfordNlpLingTokensregexTypesExpression>)action
                                                  withEduStanfordNlpLingTokensregexTypesExpression:(id<EduStanfordNlpLingTokensregexTypesExpression>)result {
  EduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor *annotationExtractor = EduStanfordNlpLingTokensregexSequenceMatchRules_createAnnotationExtractorWithEduStanfordNlpLingTokensregexEnv_withEduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule_(env, r);
  EduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchResultExtractor *valueExtractor = new_EduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchResultExtractor_initWithEduStanfordNlpLingTokensregexEnv_withEduStanfordNlpLingTokensregexTypesExpression_withEduStanfordNlpLingTokensregexTypesExpression_(env, action, result);
  EduStanfordNlpLingTokensregexSequenceMatchRules_MultiSequencePatternExtractRule *valueExtractRule = new_EduStanfordNlpLingTokensregexSequenceMatchRules_MultiSequencePatternExtractRule_initWithEduStanfordNlpLingTokensregexMultiPatternMatcher_withJavaUtilFunctionFunction_(pattern, valueExtractor);
  EduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchedExpressionExtractor *exprExtractor = new_EduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchedExpressionExtractor_initWithEduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor_withInt_(annotationExtractor, ((EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule *) nil_chk(r))->matchedExpressionGroup_);
  EduStanfordNlpLingTokensregexSequenceMatchRules_MultiSequencePatternExtractRule *exprExtractRule = new_EduStanfordNlpLingTokensregexSequenceMatchRules_MultiSequencePatternExtractRule_initWithEduStanfordNlpLingTokensregexMultiPatternMatcher_withJavaUtilFunctionFunction_(pattern, exprExtractor);
  ((EduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor *) nil_chk(annotationExtractor))->expressionToValue_ = new_EduStanfordNlpLingTokensregexSequenceMatchRules_MultiTokenPatternExtractRuleCreator_$Lambda$1_initWithEduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchResultExtractor_(valueExtractor);
  if (r->annotationField_ != nil && r->annotationField_ != EduStanfordNlpUtilCoreMap_class_()) {
    annotationExtractor->valueExtractor_ = new_EduStanfordNlpLingTokensregexSequenceMatchRules_CoreMapFunctionApplier_initWithEduStanfordNlpLingTokensregexEnv_withIOSClass_withJavaUtilFunctionFunction_(env, r->annotationField_, valueExtractRule);
    r->extractRule_ = new_EduStanfordNlpLingTokensregexSequenceMatchRules_CoreMapExtractRule_initWithEduStanfordNlpLingTokensregexEnv_withIOSClass_withEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule_(env, r->annotationField_, exprExtractRule);
  }
  else {
    annotationExtractor->valueExtractor_ = new_EduStanfordNlpLingTokensregexSequenceMatchRules_CoreMapToListFunctionApplier_initWithEduStanfordNlpLingTokensregexEnv_withJavaUtilFunctionFunction_(env, valueExtractRule);
    r->extractRule_ = new_EduStanfordNlpLingTokensregexSequenceMatchRules_CoreMapToListExtractRule_initWithEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule_(exprExtractRule);
  }
  r->filterRule_ = new_EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationMatchedFilter_initWithEduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor_(annotationExtractor);
  r->pattern_ = pattern;
  r->result_ = result;
}

- (EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule *)createWithEduStanfordNlpLingTokensregexEnv:(EduStanfordNlpLingTokensregexEnv *)env
                                            withEduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule:(EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule *)aerTemplate
                                                                                                     withJavaUtilList:(id<JavaUtilList>)patterns {
  EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule *r = new_EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule_init();
  r->stage_ = ((EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule *) nil_chk(aerTemplate))->stage_;
  r->active_ = aerTemplate->active_;
  r->priority_ = JavaLangDouble_NaN;
  r->weight_ = JavaLangDouble_NaN;
  r->annotationField_ = aerTemplate->annotationField_;
  r->tokensAnnotationField_ = aerTemplate->tokensAnnotationField_;
  r->tokensResultAnnotationField_ = aerTemplate->tokensResultAnnotationField_;
  r->resultAnnotationField_ = aerTemplate->resultAnnotationField_;
  r->resultNestedAnnotationField_ = aerTemplate->resultNestedAnnotationField_;
  r->matchFindType_ = aerTemplate->matchFindType_;
  r->matchedExpressionGroup_ = aerTemplate->matchedExpressionGroup_;
  r->matchWithResults_ = aerTemplate->matchWithResults_;
  r->ruleType_ = aerTemplate->ruleType_;
  r->isComposite_ = aerTemplate->isComposite_;
  r->includeNested_ = aerTemplate->includeNested_;
  r->active_ = aerTemplate->active_;
  r->result_ = aerTemplate->result_;
  if (r->annotationField_ == nil) {
    r->annotationField_ = r->tokensAnnotationField_;
  }
  r->ruleType_ = EduStanfordNlpLingTokensregexSequenceMatchRules_TOKEN_PATTERN_RULE_TYPE;
  EduStanfordNlpLingTokensregexMultiPatternMatcher *multiPatternMatcher = EduStanfordNlpLingTokensregexTokenSequencePattern_getMultiPatternMatcherWithJavaUtilCollection_(patterns);
  [((EduStanfordNlpLingTokensregexMultiPatternMatcher *) nil_chk(multiPatternMatcher)) setMatchWithResultWithBoolean:r->matchWithResults_];
  [self updateExtractRuleWithEduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule:r withEduStanfordNlpLingTokensregexEnv:env withEduStanfordNlpLingTokensregexMultiPatternMatcher:multiPatternMatcher withEduStanfordNlpLingTokensregexTypesExpression:nil withEduStanfordNlpLingTokensregexTypesExpression:r->result_];
  return r;
}

- (EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule *)createWithEduStanfordNlpLingTokensregexEnv:(EduStanfordNlpLingTokensregexEnv *)env
                                                                                                      withJavaUtilMap:(id<JavaUtilMap>)attributes {
  @throw new_JavaLangUnsupportedOperationException_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpLingTokensregexSequenceMatchRules_MultiTokenPatternExtractRuleCreator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x4, 0, 1, -1, 2, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule;", 0x4, 3, 4, -1, 5, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule;", 0x1, 3, 6, -1, 7, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(updateExtractRuleWithEduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule:withEduStanfordNlpLingTokensregexEnv:withEduStanfordNlpLingTokensregexMultiPatternMatcher:withEduStanfordNlpLingTokensregexTypesExpression:withEduStanfordNlpLingTokensregexTypesExpression:);
  methods[1].selector = @selector(createWithEduStanfordNlpLingTokensregexEnv:withEduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule:withJavaUtilList:);
  methods[2].selector = @selector(createWithEduStanfordNlpLingTokensregexEnv:withJavaUtilMap:);
  methods[3].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "updateExtractRule", "LEduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule;LEduStanfordNlpLingTokensregexEnv;LEduStanfordNlpLingTokensregexMultiPatternMatcher;LEduStanfordNlpLingTokensregexTypesExpression;LEduStanfordNlpLingTokensregexTypesExpression;", "(Ledu/stanford/nlp/ling/tokensregex/SequenceMatchRules$AnnotationExtractRule;Ledu/stanford/nlp/ling/tokensregex/Env;Ledu/stanford/nlp/ling/tokensregex/MultiPatternMatcher<Ledu/stanford/nlp/util/CoreMap;>;Ledu/stanford/nlp/ling/tokensregex/types/Expression;Ledu/stanford/nlp/ling/tokensregex/types/Expression;)V", "create", "LEduStanfordNlpLingTokensregexEnv;LEduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule;LJavaUtilList;", "(Ledu/stanford/nlp/ling/tokensregex/Env;Ledu/stanford/nlp/ling/tokensregex/SequenceMatchRules$AnnotationExtractRule;Ljava/util/List<Ledu/stanford/nlp/ling/tokensregex/TokenSequencePattern;>;)Ledu/stanford/nlp/ling/tokensregex/SequenceMatchRules$AnnotationExtractRule;", "LEduStanfordNlpLingTokensregexEnv;LJavaUtilMap;", "(Ledu/stanford/nlp/ling/tokensregex/Env;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)Ledu/stanford/nlp/ling/tokensregex/SequenceMatchRules$AnnotationExtractRule;", "LEduStanfordNlpLingTokensregexSequenceMatchRules;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexSequenceMatchRules_MultiTokenPatternExtractRuleCreator = { "MultiTokenPatternExtractRuleCreator", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, NULL, 7, 0x9, 4, 0, 8, -1, -1, -1, -1 };
  return &_EduStanfordNlpLingTokensregexSequenceMatchRules_MultiTokenPatternExtractRuleCreator;
}

@end

void EduStanfordNlpLingTokensregexSequenceMatchRules_MultiTokenPatternExtractRuleCreator_init(EduStanfordNlpLingTokensregexSequenceMatchRules_MultiTokenPatternExtractRuleCreator *self) {
  EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRuleCreator_init(self);
}

EduStanfordNlpLingTokensregexSequenceMatchRules_MultiTokenPatternExtractRuleCreator *new_EduStanfordNlpLingTokensregexSequenceMatchRules_MultiTokenPatternExtractRuleCreator_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequenceMatchRules_MultiTokenPatternExtractRuleCreator, init)
}

EduStanfordNlpLingTokensregexSequenceMatchRules_MultiTokenPatternExtractRuleCreator *create_EduStanfordNlpLingTokensregexSequenceMatchRules_MultiTokenPatternExtractRuleCreator_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequenceMatchRules_MultiTokenPatternExtractRuleCreator, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexSequenceMatchRules_MultiTokenPatternExtractRuleCreator)

@implementation EduStanfordNlpLingTokensregexSequenceMatchRules_MultiTokenPatternExtractRuleCreator_$Lambda$1

- (id)applyWithId:(EduStanfordNlpLingTokensregexMatchedExpression *)matched {
  if (matched != nil && matched->context_ != nil && [EduStanfordNlpLingTokensregexSequenceMatchResult_class_() isInstance:matched->context_]) {
    return [((EduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchResultExtractor *) nil_chk(val$valueExtractor_)) applyWithId:(id<EduStanfordNlpLingTokensregexSequenceMatchResult>) cast_check(matched->context_, EduStanfordNlpLingTokensregexSequenceMatchResult_class_())];
  }
  else return nil;
}

- (id<JavaUtilFunctionFunction>)andThenWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_andThenWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilFunctionFunction>)composeWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_composeWithJavaUtilFunctionFunction_(self, arg0);
}

@end

void EduStanfordNlpLingTokensregexSequenceMatchRules_MultiTokenPatternExtractRuleCreator_$Lambda$1_initWithEduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchResultExtractor_(EduStanfordNlpLingTokensregexSequenceMatchRules_MultiTokenPatternExtractRuleCreator_$Lambda$1 *self, EduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchResultExtractor *capture$0) {
  self->val$valueExtractor_ = capture$0;
  NSObject_init(self);
}

EduStanfordNlpLingTokensregexSequenceMatchRules_MultiTokenPatternExtractRuleCreator_$Lambda$1 *new_EduStanfordNlpLingTokensregexSequenceMatchRules_MultiTokenPatternExtractRuleCreator_$Lambda$1_initWithEduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchResultExtractor_(EduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchResultExtractor *capture$0) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequenceMatchRules_MultiTokenPatternExtractRuleCreator_$Lambda$1, initWithEduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchResultExtractor_, capture$0)
}

EduStanfordNlpLingTokensregexSequenceMatchRules_MultiTokenPatternExtractRuleCreator_$Lambda$1 *create_EduStanfordNlpLingTokensregexSequenceMatchRules_MultiTokenPatternExtractRuleCreator_$Lambda$1_initWithEduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchResultExtractor_(EduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchResultExtractor *capture$0) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequenceMatchRules_MultiTokenPatternExtractRuleCreator_$Lambda$1, initWithEduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchResultExtractor_, capture$0)
}

@implementation EduStanfordNlpLingTokensregexSequenceMatchRules_TextPatternExtractRuleCreator

- (void)updateExtractRuleWithEduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule:(EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule *)r
                                                              withEduStanfordNlpLingTokensregexEnv:(EduStanfordNlpLingTokensregexEnv *)env
                                                                                      withNSString:(NSString *)expr
                                                  withEduStanfordNlpLingTokensregexTypesExpression:(id<EduStanfordNlpLingTokensregexTypesExpression>)action
                                                  withEduStanfordNlpLingTokensregexTypesExpression:(id<EduStanfordNlpLingTokensregexTypesExpression>)result {
  EduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor *annotationExtractor = EduStanfordNlpLingTokensregexSequenceMatchRules_createAnnotationExtractorWithEduStanfordNlpLingTokensregexEnv_withEduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule_(env, r);
  JavaUtilRegexPattern *pattern = [((EduStanfordNlpLingTokensregexEnv *) nil_chk(env)) getStringPatternWithNSString:expr];
  EduStanfordNlpLingTokensregexSequenceMatchRules_StringMatchResultExtractor *valueExtractor = new_EduStanfordNlpLingTokensregexSequenceMatchRules_StringMatchResultExtractor_initWithEduStanfordNlpLingTokensregexEnv_withEduStanfordNlpLingTokensregexTypesExpression_withEduStanfordNlpLingTokensregexTypesExpression_(env, action, result);
  EduStanfordNlpLingTokensregexSequenceMatchRules_StringPatternExtractRule *valueExtractRule = new_EduStanfordNlpLingTokensregexSequenceMatchRules_StringPatternExtractRule_initWithJavaUtilRegexPattern_withJavaUtilFunctionFunction_(pattern, valueExtractor);
  EduStanfordNlpLingTokensregexSequenceMatchRules_StringMatchedExpressionExtractor *exprExtractor = new_EduStanfordNlpLingTokensregexSequenceMatchRules_StringMatchedExpressionExtractor_initWithEduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor_withInt_(annotationExtractor, ((EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule *) nil_chk(r))->matchedExpressionGroup_);
  EduStanfordNlpLingTokensregexSequenceMatchRules_StringPatternExtractRule *exprExtractRule = new_EduStanfordNlpLingTokensregexSequenceMatchRules_StringPatternExtractRule_initWithJavaUtilRegexPattern_withJavaUtilFunctionFunction_(pattern, exprExtractor);
  ((EduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor *) nil_chk(annotationExtractor))->valueExtractor_ = new_EduStanfordNlpLingTokensregexSequenceMatchRules_CoreMapFunctionApplier_initWithEduStanfordNlpLingTokensregexEnv_withIOSClass_withJavaUtilFunctionFunction_(env, r->annotationField_, valueExtractRule);
  r->extractRule_ = new_EduStanfordNlpLingTokensregexSequenceMatchRules_CoreMapExtractRule_initWithEduStanfordNlpLingTokensregexEnv_withIOSClass_withEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule_(env, r->annotationField_, exprExtractRule);
  r->filterRule_ = new_EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationMatchedFilter_initWithEduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor_(annotationExtractor);
  r->pattern_ = pattern;
  r->result_ = result;
}

- (EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule *)createWithEduStanfordNlpLingTokensregexEnv:(EduStanfordNlpLingTokensregexEnv *)env
                                                                                                         withNSString:(NSString *)expr
                                                                     withEduStanfordNlpLingTokensregexTypesExpression:(id<EduStanfordNlpLingTokensregexTypesExpression>)result {
  EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule *r = [super createWithEduStanfordNlpLingTokensregexEnv:env withJavaUtilMap:nil];
  if (((EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule *) nil_chk(r))->annotationField_ == nil) {
    r->annotationField_ = EduStanfordNlpLingTokensregexEnvLookup_getDefaultTextAnnotationKeyWithEduStanfordNlpLingTokensregexEnv_(env);
  }
  r->ruleType_ = EduStanfordNlpLingTokensregexSequenceMatchRules_TEXT_PATTERN_RULE_TYPE;
  [self updateExtractRuleWithEduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule:r withEduStanfordNlpLingTokensregexEnv:env withNSString:expr withEduStanfordNlpLingTokensregexTypesExpression:nil withEduStanfordNlpLingTokensregexTypesExpression:result];
  return r;
}

- (EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule *)createWithEduStanfordNlpLingTokensregexEnv:(EduStanfordNlpLingTokensregexEnv *)env
                                                                                                      withJavaUtilMap:(id<JavaUtilMap>)attributes {
  EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule *r = [super createWithEduStanfordNlpLingTokensregexEnv:env withJavaUtilMap:attributes];
  if (((EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule *) nil_chk(r))->annotationField_ == nil) {
    r->annotationField_ = EduStanfordNlpLingTokensregexEnvLookup_getDefaultTextAnnotationKeyWithEduStanfordNlpLingTokensregexEnv_(env);
  }
  if (r->ruleType_ == nil) {
    r->ruleType_ = EduStanfordNlpLingTokensregexSequenceMatchRules_TEXT_PATTERN_RULE_TYPE;
  }
  NSString *expr = (NSString *) cast_chk(EduStanfordNlpLingTokensregexTypesExpressions_asObjectWithEduStanfordNlpLingTokensregexEnv_withId_(env, [((id<JavaUtilMap>) nil_chk(attributes)) getWithId:@"pattern"]), [NSString class]);
  id<EduStanfordNlpLingTokensregexTypesExpression> action = EduStanfordNlpLingTokensregexTypesExpressions_asExpressionWithEduStanfordNlpLingTokensregexEnv_withId_(env, [attributes getWithId:@"action"]);
  id<EduStanfordNlpLingTokensregexTypesExpression> result = EduStanfordNlpLingTokensregexTypesExpressions_asExpressionWithEduStanfordNlpLingTokensregexEnv_withId_(env, [attributes getWithId:@"result"]);
  [self updateExtractRuleWithEduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule:r withEduStanfordNlpLingTokensregexEnv:env withNSString:expr withEduStanfordNlpLingTokensregexTypesExpression:action withEduStanfordNlpLingTokensregexTypesExpression:result];
  return r;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpLingTokensregexSequenceMatchRules_TextPatternExtractRuleCreator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x4, 0, 1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule;", 0x4, 2, 3, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule;", 0x1, 2, 4, -1, 5, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(updateExtractRuleWithEduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule:withEduStanfordNlpLingTokensregexEnv:withNSString:withEduStanfordNlpLingTokensregexTypesExpression:withEduStanfordNlpLingTokensregexTypesExpression:);
  methods[1].selector = @selector(createWithEduStanfordNlpLingTokensregexEnv:withNSString:withEduStanfordNlpLingTokensregexTypesExpression:);
  methods[2].selector = @selector(createWithEduStanfordNlpLingTokensregexEnv:withJavaUtilMap:);
  methods[3].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "updateExtractRule", "LEduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule;LEduStanfordNlpLingTokensregexEnv;LNSString;LEduStanfordNlpLingTokensregexTypesExpression;LEduStanfordNlpLingTokensregexTypesExpression;", "create", "LEduStanfordNlpLingTokensregexEnv;LNSString;LEduStanfordNlpLingTokensregexTypesExpression;", "LEduStanfordNlpLingTokensregexEnv;LJavaUtilMap;", "(Ledu/stanford/nlp/ling/tokensregex/Env;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)Ledu/stanford/nlp/ling/tokensregex/SequenceMatchRules$AnnotationExtractRule;", "LEduStanfordNlpLingTokensregexSequenceMatchRules;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexSequenceMatchRules_TextPatternExtractRuleCreator = { "TextPatternExtractRuleCreator", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, NULL, 7, 0x9, 4, 0, 6, -1, -1, -1, -1 };
  return &_EduStanfordNlpLingTokensregexSequenceMatchRules_TextPatternExtractRuleCreator;
}

@end

void EduStanfordNlpLingTokensregexSequenceMatchRules_TextPatternExtractRuleCreator_init(EduStanfordNlpLingTokensregexSequenceMatchRules_TextPatternExtractRuleCreator *self) {
  EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRuleCreator_init(self);
}

EduStanfordNlpLingTokensregexSequenceMatchRules_TextPatternExtractRuleCreator *new_EduStanfordNlpLingTokensregexSequenceMatchRules_TextPatternExtractRuleCreator_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequenceMatchRules_TextPatternExtractRuleCreator, init)
}

EduStanfordNlpLingTokensregexSequenceMatchRules_TextPatternExtractRuleCreator *create_EduStanfordNlpLingTokensregexSequenceMatchRules_TextPatternExtractRuleCreator_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequenceMatchRules_TextPatternExtractRuleCreator, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexSequenceMatchRules_TextPatternExtractRuleCreator)

@implementation EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationMatchedFilter

- (instancetype)initWithEduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor:(EduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor *)extractor {
  EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationMatchedFilter_initWithEduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor_(self, extractor);
  return self;
}

- (jboolean)testWithId:(EduStanfordNlpLingTokensregexMatchedExpression *)me {
  id<EduStanfordNlpUtilCoreMap> cm = [((EduStanfordNlpLingTokensregexMatchedExpression *) nil_chk(me)) getAnnotation];
  id<EduStanfordNlpLingTokensregexTypesValue> v = [((EduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor *) nil_chk(extractor_)) applyWithId:cm];
  if (v != nil) {
    if ([v get] == nil) {
      return true;
    }
    else {
      [((EduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor *) nil_chk(extractor_)) annotateWithEduStanfordNlpLingTokensregexMatchedExpression:me];
      return false;
    }
  }
  else {
    return false;
  }
}

- (id<JavaUtilFunctionPredicate>)and__WithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)arg0 {
  return JavaUtilFunctionPredicate_and__WithJavaUtilFunctionPredicate_(self, arg0);
}

- (id<JavaUtilFunctionPredicate>)negate {
  return JavaUtilFunctionPredicate_negate(self);
}

- (id<JavaUtilFunctionPredicate>)or__WithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)arg0 {
  return JavaUtilFunctionPredicate_or__WithJavaUtilFunctionPredicate_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor:);
  methods[1].selector = @selector(testWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "extractor_", "LEduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor;", "test", "LEduStanfordNlpLingTokensregexMatchedExpression;", "LEduStanfordNlpLingTokensregexSequenceMatchRules;", "Ljava/lang/Object;Ljava/util/function/Predicate<Ledu/stanford/nlp/ling/tokensregex/MatchedExpression;>;Ljava/io/Serializable;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationMatchedFilter = { "AnnotationMatchedFilter", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, fields, 7, 0x9, 2, 1, 3, -1, -1, 4, -1 };
  return &_EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationMatchedFilter;
}

@end

void EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationMatchedFilter_initWithEduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor_(EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationMatchedFilter *self, EduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor *extractor) {
  NSObject_init(self);
  self->extractor_ = extractor;
}

EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationMatchedFilter *new_EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationMatchedFilter_initWithEduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor_(EduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor *extractor) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationMatchedFilter, initWithEduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor_, extractor)
}

EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationMatchedFilter *create_EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationMatchedFilter_initWithEduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor_(EduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor *extractor) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationMatchedFilter, initWithEduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor_, extractor)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationMatchedFilter)

@implementation EduStanfordNlpLingTokensregexSequenceMatchRules_StringMatchResultExtractor

- (instancetype)initWithEduStanfordNlpLingTokensregexEnv:(EduStanfordNlpLingTokensregexEnv *)env
        withEduStanfordNlpLingTokensregexTypesExpression:(id<EduStanfordNlpLingTokensregexTypesExpression>)action
        withEduStanfordNlpLingTokensregexTypesExpression:(id<EduStanfordNlpLingTokensregexTypesExpression>)result {
  EduStanfordNlpLingTokensregexSequenceMatchRules_StringMatchResultExtractor_initWithEduStanfordNlpLingTokensregexEnv_withEduStanfordNlpLingTokensregexTypesExpression_withEduStanfordNlpLingTokensregexTypesExpression_(self, env, action, result);
  return self;
}

- (instancetype)initWithEduStanfordNlpLingTokensregexEnv:(EduStanfordNlpLingTokensregexEnv *)env
        withEduStanfordNlpLingTokensregexTypesExpression:(id<EduStanfordNlpLingTokensregexTypesExpression>)result {
  EduStanfordNlpLingTokensregexSequenceMatchRules_StringMatchResultExtractor_initWithEduStanfordNlpLingTokensregexEnv_withEduStanfordNlpLingTokensregexTypesExpression_(self, env, result);
  return self;
}

- (id<EduStanfordNlpLingTokensregexTypesValue>)applyWithId:(id<JavaUtilRegexMatchResult>)matchResult {
  id<EduStanfordNlpLingTokensregexTypesValue> v = nil;
  if (action_ != nil) {
    (void) [action_ evaluateWithEduStanfordNlpLingTokensregexEnv:env_ withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ matchResult } count:1 type:NSObject_class_()]];
  }
  if (result_ != nil) {
    v = [result_ evaluateWithEduStanfordNlpLingTokensregexEnv:env_ withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ matchResult } count:1 type:NSObject_class_()]];
  }
  return v;
}

- (id<JavaUtilFunctionFunction>)andThenWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_andThenWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilFunctionFunction>)composeWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_composeWithJavaUtilFunctionFunction_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexTypesValue;", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpLingTokensregexEnv:withEduStanfordNlpLingTokensregexTypesExpression:withEduStanfordNlpLingTokensregexTypesExpression:);
  methods[1].selector = @selector(initWithEduStanfordNlpLingTokensregexEnv:withEduStanfordNlpLingTokensregexTypesExpression:);
  methods[2].selector = @selector(applyWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "env_", "LEduStanfordNlpLingTokensregexEnv;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "action_", "LEduStanfordNlpLingTokensregexTypesExpression;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "result_", "LEduStanfordNlpLingTokensregexTypesExpression;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpLingTokensregexEnv;LEduStanfordNlpLingTokensregexTypesExpression;LEduStanfordNlpLingTokensregexTypesExpression;", "LEduStanfordNlpLingTokensregexEnv;LEduStanfordNlpLingTokensregexTypesExpression;", "apply", "LJavaUtilRegexMatchResult;", "LEduStanfordNlpLingTokensregexSequenceMatchRules;", "Ljava/lang/Object;Ljava/util/function/Function<Ljava/util/regex/MatchResult;Ledu/stanford/nlp/ling/tokensregex/types/Value;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexSequenceMatchRules_StringMatchResultExtractor = { "StringMatchResultExtractor", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, fields, 7, 0x9, 3, 3, 4, -1, -1, 5, -1 };
  return &_EduStanfordNlpLingTokensregexSequenceMatchRules_StringMatchResultExtractor;
}

@end

void EduStanfordNlpLingTokensregexSequenceMatchRules_StringMatchResultExtractor_initWithEduStanfordNlpLingTokensregexEnv_withEduStanfordNlpLingTokensregexTypesExpression_withEduStanfordNlpLingTokensregexTypesExpression_(EduStanfordNlpLingTokensregexSequenceMatchRules_StringMatchResultExtractor *self, EduStanfordNlpLingTokensregexEnv *env, id<EduStanfordNlpLingTokensregexTypesExpression> action, id<EduStanfordNlpLingTokensregexTypesExpression> result) {
  NSObject_init(self);
  self->env_ = env;
  self->action_ = action;
  self->result_ = result;
}

EduStanfordNlpLingTokensregexSequenceMatchRules_StringMatchResultExtractor *new_EduStanfordNlpLingTokensregexSequenceMatchRules_StringMatchResultExtractor_initWithEduStanfordNlpLingTokensregexEnv_withEduStanfordNlpLingTokensregexTypesExpression_withEduStanfordNlpLingTokensregexTypesExpression_(EduStanfordNlpLingTokensregexEnv *env, id<EduStanfordNlpLingTokensregexTypesExpression> action, id<EduStanfordNlpLingTokensregexTypesExpression> result) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequenceMatchRules_StringMatchResultExtractor, initWithEduStanfordNlpLingTokensregexEnv_withEduStanfordNlpLingTokensregexTypesExpression_withEduStanfordNlpLingTokensregexTypesExpression_, env, action, result)
}

EduStanfordNlpLingTokensregexSequenceMatchRules_StringMatchResultExtractor *create_EduStanfordNlpLingTokensregexSequenceMatchRules_StringMatchResultExtractor_initWithEduStanfordNlpLingTokensregexEnv_withEduStanfordNlpLingTokensregexTypesExpression_withEduStanfordNlpLingTokensregexTypesExpression_(EduStanfordNlpLingTokensregexEnv *env, id<EduStanfordNlpLingTokensregexTypesExpression> action, id<EduStanfordNlpLingTokensregexTypesExpression> result) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequenceMatchRules_StringMatchResultExtractor, initWithEduStanfordNlpLingTokensregexEnv_withEduStanfordNlpLingTokensregexTypesExpression_withEduStanfordNlpLingTokensregexTypesExpression_, env, action, result)
}

void EduStanfordNlpLingTokensregexSequenceMatchRules_StringMatchResultExtractor_initWithEduStanfordNlpLingTokensregexEnv_withEduStanfordNlpLingTokensregexTypesExpression_(EduStanfordNlpLingTokensregexSequenceMatchRules_StringMatchResultExtractor *self, EduStanfordNlpLingTokensregexEnv *env, id<EduStanfordNlpLingTokensregexTypesExpression> result) {
  NSObject_init(self);
  self->env_ = env;
  self->result_ = result;
}

EduStanfordNlpLingTokensregexSequenceMatchRules_StringMatchResultExtractor *new_EduStanfordNlpLingTokensregexSequenceMatchRules_StringMatchResultExtractor_initWithEduStanfordNlpLingTokensregexEnv_withEduStanfordNlpLingTokensregexTypesExpression_(EduStanfordNlpLingTokensregexEnv *env, id<EduStanfordNlpLingTokensregexTypesExpression> result) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequenceMatchRules_StringMatchResultExtractor, initWithEduStanfordNlpLingTokensregexEnv_withEduStanfordNlpLingTokensregexTypesExpression_, env, result)
}

EduStanfordNlpLingTokensregexSequenceMatchRules_StringMatchResultExtractor *create_EduStanfordNlpLingTokensregexSequenceMatchRules_StringMatchResultExtractor_initWithEduStanfordNlpLingTokensregexEnv_withEduStanfordNlpLingTokensregexTypesExpression_(EduStanfordNlpLingTokensregexEnv *env, id<EduStanfordNlpLingTokensregexTypesExpression> result) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequenceMatchRules_StringMatchResultExtractor, initWithEduStanfordNlpLingTokensregexEnv_withEduStanfordNlpLingTokensregexTypesExpression_, env, result)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexSequenceMatchRules_StringMatchResultExtractor)

@implementation EduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchResultExtractor

- (instancetype)initWithEduStanfordNlpLingTokensregexEnv:(EduStanfordNlpLingTokensregexEnv *)env
        withEduStanfordNlpLingTokensregexTypesExpression:(id<EduStanfordNlpLingTokensregexTypesExpression>)action
        withEduStanfordNlpLingTokensregexTypesExpression:(id<EduStanfordNlpLingTokensregexTypesExpression>)result {
  EduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchResultExtractor_initWithEduStanfordNlpLingTokensregexEnv_withEduStanfordNlpLingTokensregexTypesExpression_withEduStanfordNlpLingTokensregexTypesExpression_(self, env, action, result);
  return self;
}

- (instancetype)initWithEduStanfordNlpLingTokensregexEnv:(EduStanfordNlpLingTokensregexEnv *)env
        withEduStanfordNlpLingTokensregexTypesExpression:(id<EduStanfordNlpLingTokensregexTypesExpression>)result {
  EduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchResultExtractor_initWithEduStanfordNlpLingTokensregexEnv_withEduStanfordNlpLingTokensregexTypesExpression_(self, env, result);
  return self;
}

- (id<EduStanfordNlpLingTokensregexTypesValue>)applyWithId:(id<EduStanfordNlpLingTokensregexSequenceMatchResult>)matchResult {
  id<EduStanfordNlpLingTokensregexTypesValue> v = nil;
  if (action_ != nil) {
    (void) [action_ evaluateWithEduStanfordNlpLingTokensregexEnv:env_ withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ matchResult } count:1 type:NSObject_class_()]];
  }
  if (result_ != nil) {
    v = [result_ evaluateWithEduStanfordNlpLingTokensregexEnv:env_ withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ matchResult } count:1 type:NSObject_class_()]];
  }
  return v;
}

- (id<JavaUtilFunctionFunction>)andThenWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_andThenWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilFunctionFunction>)composeWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_composeWithJavaUtilFunctionFunction_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexTypesValue;", 0x1, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpLingTokensregexEnv:withEduStanfordNlpLingTokensregexTypesExpression:withEduStanfordNlpLingTokensregexTypesExpression:);
  methods[1].selector = @selector(initWithEduStanfordNlpLingTokensregexEnv:withEduStanfordNlpLingTokensregexTypesExpression:);
  methods[2].selector = @selector(applyWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "env_", "LEduStanfordNlpLingTokensregexEnv;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "action_", "LEduStanfordNlpLingTokensregexTypesExpression;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "result_", "LEduStanfordNlpLingTokensregexTypesExpression;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpLingTokensregexEnv;LEduStanfordNlpLingTokensregexTypesExpression;LEduStanfordNlpLingTokensregexTypesExpression;", "LEduStanfordNlpLingTokensregexEnv;LEduStanfordNlpLingTokensregexTypesExpression;", "apply", "LEduStanfordNlpLingTokensregexSequenceMatchResult;", "(Ledu/stanford/nlp/ling/tokensregex/SequenceMatchResult<TT;>;)Ledu/stanford/nlp/ling/tokensregex/types/Value;", "LEduStanfordNlpLingTokensregexSequenceMatchRules;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Ljava/util/function/Function<Ledu/stanford/nlp/ling/tokensregex/SequenceMatchResult<TT;>;Ledu/stanford/nlp/ling/tokensregex/types/Value;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchResultExtractor = { "SequenceMatchResultExtractor", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, fields, 7, 0x9, 3, 3, 5, -1, -1, 6, -1 };
  return &_EduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchResultExtractor;
}

@end

void EduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchResultExtractor_initWithEduStanfordNlpLingTokensregexEnv_withEduStanfordNlpLingTokensregexTypesExpression_withEduStanfordNlpLingTokensregexTypesExpression_(EduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchResultExtractor *self, EduStanfordNlpLingTokensregexEnv *env, id<EduStanfordNlpLingTokensregexTypesExpression> action, id<EduStanfordNlpLingTokensregexTypesExpression> result) {
  NSObject_init(self);
  self->env_ = env;
  self->action_ = action;
  self->result_ = result;
}

EduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchResultExtractor *new_EduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchResultExtractor_initWithEduStanfordNlpLingTokensregexEnv_withEduStanfordNlpLingTokensregexTypesExpression_withEduStanfordNlpLingTokensregexTypesExpression_(EduStanfordNlpLingTokensregexEnv *env, id<EduStanfordNlpLingTokensregexTypesExpression> action, id<EduStanfordNlpLingTokensregexTypesExpression> result) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchResultExtractor, initWithEduStanfordNlpLingTokensregexEnv_withEduStanfordNlpLingTokensregexTypesExpression_withEduStanfordNlpLingTokensregexTypesExpression_, env, action, result)
}

EduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchResultExtractor *create_EduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchResultExtractor_initWithEduStanfordNlpLingTokensregexEnv_withEduStanfordNlpLingTokensregexTypesExpression_withEduStanfordNlpLingTokensregexTypesExpression_(EduStanfordNlpLingTokensregexEnv *env, id<EduStanfordNlpLingTokensregexTypesExpression> action, id<EduStanfordNlpLingTokensregexTypesExpression> result) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchResultExtractor, initWithEduStanfordNlpLingTokensregexEnv_withEduStanfordNlpLingTokensregexTypesExpression_withEduStanfordNlpLingTokensregexTypesExpression_, env, action, result)
}

void EduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchResultExtractor_initWithEduStanfordNlpLingTokensregexEnv_withEduStanfordNlpLingTokensregexTypesExpression_(EduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchResultExtractor *self, EduStanfordNlpLingTokensregexEnv *env, id<EduStanfordNlpLingTokensregexTypesExpression> result) {
  NSObject_init(self);
  self->env_ = env;
  self->result_ = result;
}

EduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchResultExtractor *new_EduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchResultExtractor_initWithEduStanfordNlpLingTokensregexEnv_withEduStanfordNlpLingTokensregexTypesExpression_(EduStanfordNlpLingTokensregexEnv *env, id<EduStanfordNlpLingTokensregexTypesExpression> result) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchResultExtractor, initWithEduStanfordNlpLingTokensregexEnv_withEduStanfordNlpLingTokensregexTypesExpression_, env, result)
}

EduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchResultExtractor *create_EduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchResultExtractor_initWithEduStanfordNlpLingTokensregexEnv_withEduStanfordNlpLingTokensregexTypesExpression_(EduStanfordNlpLingTokensregexEnv *env, id<EduStanfordNlpLingTokensregexTypesExpression> result) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchResultExtractor, initWithEduStanfordNlpLingTokensregexEnv_withEduStanfordNlpLingTokensregexTypesExpression_, env, result)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchResultExtractor)

@implementation EduStanfordNlpLingTokensregexSequenceMatchRules_FilterExtractRule

- (instancetype)initWithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)filter
withEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule:(id<EduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule>)rule {
  EduStanfordNlpLingTokensregexSequenceMatchRules_FilterExtractRule_initWithJavaUtilFunctionPredicate_withEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule_(self, filter, rule);
  return self;
}

- (instancetype)initWithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)filter
withEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRuleArray:(IOSObjectArray *)rules {
  EduStanfordNlpLingTokensregexSequenceMatchRules_FilterExtractRule_initWithJavaUtilFunctionPredicate_withEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRuleArray_(self, filter, rules);
  return self;
}

- (jboolean)extractWithId:(id)inArg
         withJavaUtilList:(id<JavaUtilList>)outArg {
  if ([((id<JavaUtilFunctionPredicate>) nil_chk(filter_)) testWithId:inArg]) {
    return [((id<EduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule>) nil_chk(rule_)) extractWithId:inArg withJavaUtilList:outArg];
  }
  else {
    return false;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, NULL, 0x81, -1, 2, -1, 3, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, 6, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilFunctionPredicate:withEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule:);
  methods[1].selector = @selector(initWithJavaUtilFunctionPredicate:withEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRuleArray:);
  methods[2].selector = @selector(extractWithId:withJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "filter_", "LJavaUtilFunctionPredicate;", .constantValue.asLong = 0, 0x0, -1, -1, 7, -1 },
    { "rule_", "LEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule;", .constantValue.asLong = 0, 0x0, -1, -1, 8, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilFunctionPredicate;LEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule;", "(Ljava/util/function/Predicate<TI;>;Ledu/stanford/nlp/ling/tokensregex/SequenceMatchRules$ExtractRule<TI;TO;>;)V", "LJavaUtilFunctionPredicate;[LEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule;", "(Ljava/util/function/Predicate<TI;>;[Ledu/stanford/nlp/ling/tokensregex/SequenceMatchRules$ExtractRule<TI;TO;>;)V", "extract", "LNSObject;LJavaUtilList;", "(TI;Ljava/util/List<TO;>;)Z", "Ljava/util/function/Predicate<TI;>;", "Ledu/stanford/nlp/ling/tokensregex/SequenceMatchRules$ExtractRule<TI;TO;>;", "LEduStanfordNlpLingTokensregexSequenceMatchRules;", "<I:Ljava/lang/Object;O:Ljava/lang/Object;>Ljava/lang/Object;Ledu/stanford/nlp/ling/tokensregex/SequenceMatchRules$ExtractRule<TI;TO;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexSequenceMatchRules_FilterExtractRule = { "FilterExtractRule", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, fields, 7, 0x9, 3, 2, 9, -1, -1, 10, -1 };
  return &_EduStanfordNlpLingTokensregexSequenceMatchRules_FilterExtractRule;
}

@end

void EduStanfordNlpLingTokensregexSequenceMatchRules_FilterExtractRule_initWithJavaUtilFunctionPredicate_withEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule_(EduStanfordNlpLingTokensregexSequenceMatchRules_FilterExtractRule *self, id<JavaUtilFunctionPredicate> filter, id<EduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule> rule) {
  NSObject_init(self);
  self->filter_ = filter;
  self->rule_ = rule;
}

EduStanfordNlpLingTokensregexSequenceMatchRules_FilterExtractRule *new_EduStanfordNlpLingTokensregexSequenceMatchRules_FilterExtractRule_initWithJavaUtilFunctionPredicate_withEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule_(id<JavaUtilFunctionPredicate> filter, id<EduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule> rule) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequenceMatchRules_FilterExtractRule, initWithJavaUtilFunctionPredicate_withEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule_, filter, rule)
}

EduStanfordNlpLingTokensregexSequenceMatchRules_FilterExtractRule *create_EduStanfordNlpLingTokensregexSequenceMatchRules_FilterExtractRule_initWithJavaUtilFunctionPredicate_withEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule_(id<JavaUtilFunctionPredicate> filter, id<EduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule> rule) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequenceMatchRules_FilterExtractRule, initWithJavaUtilFunctionPredicate_withEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule_, filter, rule)
}

void EduStanfordNlpLingTokensregexSequenceMatchRules_FilterExtractRule_initWithJavaUtilFunctionPredicate_withEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRuleArray_(EduStanfordNlpLingTokensregexSequenceMatchRules_FilterExtractRule *self, id<JavaUtilFunctionPredicate> filter, IOSObjectArray *rules) {
  NSObject_init(self);
  self->filter_ = filter;
  self->rule_ = new_EduStanfordNlpLingTokensregexSequenceMatchRules_ListExtractRule_initWithEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRuleArray_([IOSObjectArray newArrayWithObjects:(id[]){ rules } count:1 type:EduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule_class_()]);
}

EduStanfordNlpLingTokensregexSequenceMatchRules_FilterExtractRule *new_EduStanfordNlpLingTokensregexSequenceMatchRules_FilterExtractRule_initWithJavaUtilFunctionPredicate_withEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRuleArray_(id<JavaUtilFunctionPredicate> filter, IOSObjectArray *rules) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequenceMatchRules_FilterExtractRule, initWithJavaUtilFunctionPredicate_withEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRuleArray_, filter, rules)
}

EduStanfordNlpLingTokensregexSequenceMatchRules_FilterExtractRule *create_EduStanfordNlpLingTokensregexSequenceMatchRules_FilterExtractRule_initWithJavaUtilFunctionPredicate_withEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRuleArray_(id<JavaUtilFunctionPredicate> filter, IOSObjectArray *rules) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequenceMatchRules_FilterExtractRule, initWithJavaUtilFunctionPredicate_withEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRuleArray_, filter, rules)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexSequenceMatchRules_FilterExtractRule)

@implementation EduStanfordNlpLingTokensregexSequenceMatchRules_ListExtractRule

- (instancetype)initWithJavaUtilCollection:(id<JavaUtilCollection>)rules {
  EduStanfordNlpLingTokensregexSequenceMatchRules_ListExtractRule_initWithJavaUtilCollection_(self, rules);
  return self;
}

- (instancetype)initWithEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRuleArray:(IOSObjectArray *)rules {
  EduStanfordNlpLingTokensregexSequenceMatchRules_ListExtractRule_initWithEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRuleArray_(self, rules);
  return self;
}

- (jboolean)extractWithId:(id)inArg
         withJavaUtilList:(id<JavaUtilList>)outArg {
  jboolean extracted = false;
  for (id<EduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule> __strong rule in nil_chk(rules_)) {
    if ([((id<EduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule>) nil_chk(rule)) extractWithId:inArg withJavaUtilList:outArg]) {
      extracted = true;
    }
  }
  return extracted;
}

- (void)addRulesWithEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRuleArray:(IOSObjectArray *)rules {
  {
    IOSObjectArray *a__ = rules;
    id<EduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id<EduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule> const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id<EduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule> rule = *b__++;
      [((id<JavaUtilList>) nil_chk(self->rules_)) addWithId:rule];
    }
  }
}

- (void)addRulesWithJavaUtilCollection:(id<JavaUtilCollection>)rules {
  [((id<JavaUtilList>) nil_chk(self->rules_)) addAllWithJavaUtilCollection:rules];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, NULL, 0x81, -1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "V", 0x81, 6, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilCollection:);
  methods[1].selector = @selector(initWithEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRuleArray:);
  methods[2].selector = @selector(extractWithId:withJavaUtilList:);
  methods[3].selector = @selector(addRulesWithEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRuleArray:);
  methods[4].selector = @selector(addRulesWithJavaUtilCollection:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "rules_", "LJavaUtilList;", .constantValue.asLong = 0, 0x0, -1, -1, 7, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilCollection;", "(Ljava/util/Collection<Ledu/stanford/nlp/ling/tokensregex/SequenceMatchRules$ExtractRule<TI;TO;>;>;)V", "[LEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule;", "extract", "LNSObject;LJavaUtilList;", "(TI;Ljava/util/List<TO;>;)Z", "addRules", "Ljava/util/List<Ledu/stanford/nlp/ling/tokensregex/SequenceMatchRules$ExtractRule<TI;TO;>;>;", "LEduStanfordNlpLingTokensregexSequenceMatchRules;", "<I:Ljava/lang/Object;O:Ljava/lang/Object;>Ljava/lang/Object;Ledu/stanford/nlp/ling/tokensregex/SequenceMatchRules$ExtractRule<TI;TO;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexSequenceMatchRules_ListExtractRule = { "ListExtractRule", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, fields, 7, 0x9, 5, 1, 8, -1, -1, 9, -1 };
  return &_EduStanfordNlpLingTokensregexSequenceMatchRules_ListExtractRule;
}

@end

void EduStanfordNlpLingTokensregexSequenceMatchRules_ListExtractRule_initWithJavaUtilCollection_(EduStanfordNlpLingTokensregexSequenceMatchRules_ListExtractRule *self, id<JavaUtilCollection> rules) {
  NSObject_init(self);
  self->rules_ = new_JavaUtilArrayList_initWithJavaUtilCollection_(rules);
}

EduStanfordNlpLingTokensregexSequenceMatchRules_ListExtractRule *new_EduStanfordNlpLingTokensregexSequenceMatchRules_ListExtractRule_initWithJavaUtilCollection_(id<JavaUtilCollection> rules) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequenceMatchRules_ListExtractRule, initWithJavaUtilCollection_, rules)
}

EduStanfordNlpLingTokensregexSequenceMatchRules_ListExtractRule *create_EduStanfordNlpLingTokensregexSequenceMatchRules_ListExtractRule_initWithJavaUtilCollection_(id<JavaUtilCollection> rules) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequenceMatchRules_ListExtractRule, initWithJavaUtilCollection_, rules)
}

void EduStanfordNlpLingTokensregexSequenceMatchRules_ListExtractRule_initWithEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRuleArray_(EduStanfordNlpLingTokensregexSequenceMatchRules_ListExtractRule *self, IOSObjectArray *rules) {
  NSObject_init(self);
  self->rules_ = new_JavaUtilArrayList_initWithInt_(((IOSObjectArray *) nil_chk(rules))->size_);
  {
    IOSObjectArray *a__ = rules;
    id<EduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule> const *b__ = a__->buffer_;
    id<EduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule> const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id<EduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule> rule = *b__++;
      [((id<JavaUtilList>) nil_chk(self->rules_)) addWithId:rule];
    }
  }
}

EduStanfordNlpLingTokensregexSequenceMatchRules_ListExtractRule *new_EduStanfordNlpLingTokensregexSequenceMatchRules_ListExtractRule_initWithEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRuleArray_(IOSObjectArray *rules) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequenceMatchRules_ListExtractRule, initWithEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRuleArray_, rules)
}

EduStanfordNlpLingTokensregexSequenceMatchRules_ListExtractRule *create_EduStanfordNlpLingTokensregexSequenceMatchRules_ListExtractRule_initWithEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRuleArray_(IOSObjectArray *rules) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequenceMatchRules_ListExtractRule, initWithEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRuleArray_, rules)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexSequenceMatchRules_ListExtractRule)

@implementation EduStanfordNlpLingTokensregexSequenceMatchRules_CoreMapExtractRule

- (instancetype)initWithEduStanfordNlpLingTokensregexEnv:(EduStanfordNlpLingTokensregexEnv *)env
                                            withIOSClass:(IOSClass *)annotationField
withEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule:(id<EduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule>)extractRule {
  EduStanfordNlpLingTokensregexSequenceMatchRules_CoreMapExtractRule_initWithEduStanfordNlpLingTokensregexEnv_withIOSClass_withEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule_(self, env, annotationField, extractRule);
  return self;
}

- (jboolean)extractWithId:(id<EduStanfordNlpUtilCoreMap>)cm
         withJavaUtilList:(id<JavaUtilList>)outArg {
  [((EduStanfordNlpLingTokensregexEnv *) nil_chk(env_)) pushWithNSString:EduStanfordNlpLingTokensregexTypesExpressions_VAR_SELF withId:cm];
  id field = [((id<EduStanfordNlpUtilCoreMap>) nil_chk(cm)) getWithIOSClass:annotationField_];
  jboolean res = [((id<EduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule>) nil_chk(extractRule_)) extractWithId:field withJavaUtilList:outArg];
  (void) [((EduStanfordNlpLingTokensregexEnv *) nil_chk(env_)) popWithNSString:EduStanfordNlpLingTokensregexTypesExpressions_VAR_SELF];
  return res;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpLingTokensregexEnv:withIOSClass:withEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule:);
  methods[1].selector = @selector(extractWithId:withJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "env_", "LEduStanfordNlpLingTokensregexEnv;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "annotationField_", "LIOSClass;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "extractRule_", "LEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule;", .constantValue.asLong = 0, 0x0, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpLingTokensregexEnv;LIOSClass;LEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule;", "(Ledu/stanford/nlp/ling/tokensregex/Env;Ljava/lang/Class;Ledu/stanford/nlp/ling/tokensregex/SequenceMatchRules$ExtractRule<TT;TO;>;)V", "extract", "LEduStanfordNlpUtilCoreMap;LJavaUtilList;", "(Ledu/stanford/nlp/util/CoreMap;Ljava/util/List<TO;>;)Z", "Ledu/stanford/nlp/ling/tokensregex/SequenceMatchRules$ExtractRule<TT;TO;>;", "LEduStanfordNlpLingTokensregexSequenceMatchRules;", "<T:Ljava/lang/Object;O:Ljava/lang/Object;>Ljava/lang/Object;Ledu/stanford/nlp/ling/tokensregex/SequenceMatchRules$ExtractRule<Ledu/stanford/nlp/util/CoreMap;TO;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexSequenceMatchRules_CoreMapExtractRule = { "CoreMapExtractRule", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, fields, 7, 0x9, 2, 3, 6, -1, -1, 7, -1 };
  return &_EduStanfordNlpLingTokensregexSequenceMatchRules_CoreMapExtractRule;
}

@end

void EduStanfordNlpLingTokensregexSequenceMatchRules_CoreMapExtractRule_initWithEduStanfordNlpLingTokensregexEnv_withIOSClass_withEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule_(EduStanfordNlpLingTokensregexSequenceMatchRules_CoreMapExtractRule *self, EduStanfordNlpLingTokensregexEnv *env, IOSClass *annotationField, id<EduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule> extractRule) {
  NSObject_init(self);
  self->annotationField_ = annotationField;
  self->extractRule_ = extractRule;
  self->env_ = env;
}

EduStanfordNlpLingTokensregexSequenceMatchRules_CoreMapExtractRule *new_EduStanfordNlpLingTokensregexSequenceMatchRules_CoreMapExtractRule_initWithEduStanfordNlpLingTokensregexEnv_withIOSClass_withEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule_(EduStanfordNlpLingTokensregexEnv *env, IOSClass *annotationField, id<EduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule> extractRule) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequenceMatchRules_CoreMapExtractRule, initWithEduStanfordNlpLingTokensregexEnv_withIOSClass_withEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule_, env, annotationField, extractRule)
}

EduStanfordNlpLingTokensregexSequenceMatchRules_CoreMapExtractRule *create_EduStanfordNlpLingTokensregexSequenceMatchRules_CoreMapExtractRule_initWithEduStanfordNlpLingTokensregexEnv_withIOSClass_withEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule_(EduStanfordNlpLingTokensregexEnv *env, IOSClass *annotationField, id<EduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule> extractRule) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequenceMatchRules_CoreMapExtractRule, initWithEduStanfordNlpLingTokensregexEnv_withIOSClass_withEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule_, env, annotationField, extractRule)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexSequenceMatchRules_CoreMapExtractRule)

@implementation EduStanfordNlpLingTokensregexSequenceMatchRules_CoreMapToListExtractRule

- (instancetype)initWithEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule:(id<EduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule>)extractRule {
  EduStanfordNlpLingTokensregexSequenceMatchRules_CoreMapToListExtractRule_initWithEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule_(self, extractRule);
  return self;
}

- (jboolean)extractWithId:(id<EduStanfordNlpUtilCoreMap>)cm
         withJavaUtilList:(id<JavaUtilList>)outArg {
  return [((id<EduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule>) nil_chk(extractRule_)) extractWithId:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ cm } count:1 type:EduStanfordNlpUtilCoreMap_class_()]) withJavaUtilList:outArg];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule:);
  methods[1].selector = @selector(extractWithId:withJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "extractRule_", "LEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule;", .constantValue.asLong = 0, 0x0, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule;", "(Ledu/stanford/nlp/ling/tokensregex/SequenceMatchRules$ExtractRule<Ljava/util/List<+Ledu/stanford/nlp/util/CoreMap;>;TO;>;)V", "extract", "LEduStanfordNlpUtilCoreMap;LJavaUtilList;", "(Ledu/stanford/nlp/util/CoreMap;Ljava/util/List<TO;>;)Z", "Ledu/stanford/nlp/ling/tokensregex/SequenceMatchRules$ExtractRule<Ljava/util/List<+Ledu/stanford/nlp/util/CoreMap;>;TO;>;", "LEduStanfordNlpLingTokensregexSequenceMatchRules;", "<O:Ljava/lang/Object;>Ljava/lang/Object;Ledu/stanford/nlp/ling/tokensregex/SequenceMatchRules$ExtractRule<Ledu/stanford/nlp/util/CoreMap;TO;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexSequenceMatchRules_CoreMapToListExtractRule = { "CoreMapToListExtractRule", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, fields, 7, 0x9, 2, 1, 6, -1, -1, 7, -1 };
  return &_EduStanfordNlpLingTokensregexSequenceMatchRules_CoreMapToListExtractRule;
}

@end

void EduStanfordNlpLingTokensregexSequenceMatchRules_CoreMapToListExtractRule_initWithEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule_(EduStanfordNlpLingTokensregexSequenceMatchRules_CoreMapToListExtractRule *self, id<EduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule> extractRule) {
  NSObject_init(self);
  self->extractRule_ = extractRule;
}

EduStanfordNlpLingTokensregexSequenceMatchRules_CoreMapToListExtractRule *new_EduStanfordNlpLingTokensregexSequenceMatchRules_CoreMapToListExtractRule_initWithEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule_(id<EduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule> extractRule) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequenceMatchRules_CoreMapToListExtractRule, initWithEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule_, extractRule)
}

EduStanfordNlpLingTokensregexSequenceMatchRules_CoreMapToListExtractRule *create_EduStanfordNlpLingTokensregexSequenceMatchRules_CoreMapToListExtractRule_initWithEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule_(id<EduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule> extractRule) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequenceMatchRules_CoreMapToListExtractRule, initWithEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule_, extractRule)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexSequenceMatchRules_CoreMapToListExtractRule)

@implementation EduStanfordNlpLingTokensregexSequenceMatchRules_BasicSequenceExtractRule

- (instancetype)initWithEduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor:(EduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor *)extractor {
  EduStanfordNlpLingTokensregexSequenceMatchRules_BasicSequenceExtractRule_initWithEduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor_(self, extractor);
  return self;
}

- (jboolean)extractWithId:(id<JavaUtilList>)seq
         withJavaUtilList:(id<JavaUtilList>)outArg {
  jboolean extracted = false;
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(seq)) size]; i++) {
    id<EduStanfordNlpUtilCoreMap> t = [seq getWithInt:i];
    id<EduStanfordNlpLingTokensregexTypesValue> v = [((EduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor *) nil_chk(extractor_)) applyWithId:t];
    if (v != nil) {
      EduStanfordNlpLingTokensregexMatchedExpression *te = [((EduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor *) nil_chk(extractor_)) createMatchedExpressionWithEduStanfordNlpUtilInterval:EduStanfordNlpUtilInterval_toIntervalWithJavaLangComparable_withJavaLangComparable_withInt_(JavaLangInteger_valueOfWithInt_(i), JavaLangInteger_valueOfWithInt_(i + 1), EduStanfordNlpUtilInterval_INTERVAL_OPEN_END) withEduStanfordNlpUtilInterval:nil];
      [((id<JavaUtilList>) nil_chk(outArg)) addWithId:te];
      extracted = true;
    }
  }
  return extracted;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor:);
  methods[1].selector = @selector(extractWithId:withJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "extractor_", "LEduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor;", "extract", "LJavaUtilList;LJavaUtilList;", "(Ljava/util/List<+Ledu/stanford/nlp/util/CoreMap;>;Ljava/util/List<Ledu/stanford/nlp/ling/tokensregex/MatchedExpression;>;)Z", "LEduStanfordNlpLingTokensregexSequenceMatchRules;", "Ljava/lang/Object;Ledu/stanford/nlp/ling/tokensregex/SequenceMatchRules$ExtractRule<Ljava/util/List<+Ledu/stanford/nlp/util/CoreMap;>;Ledu/stanford/nlp/ling/tokensregex/MatchedExpression;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexSequenceMatchRules_BasicSequenceExtractRule = { "BasicSequenceExtractRule", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, fields, 7, 0x9, 2, 1, 4, -1, -1, 5, -1 };
  return &_EduStanfordNlpLingTokensregexSequenceMatchRules_BasicSequenceExtractRule;
}

@end

void EduStanfordNlpLingTokensregexSequenceMatchRules_BasicSequenceExtractRule_initWithEduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor_(EduStanfordNlpLingTokensregexSequenceMatchRules_BasicSequenceExtractRule *self, EduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor *extractor) {
  NSObject_init(self);
  self->extractor_ = extractor;
}

EduStanfordNlpLingTokensregexSequenceMatchRules_BasicSequenceExtractRule *new_EduStanfordNlpLingTokensregexSequenceMatchRules_BasicSequenceExtractRule_initWithEduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor_(EduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor *extractor) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequenceMatchRules_BasicSequenceExtractRule, initWithEduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor_, extractor)
}

EduStanfordNlpLingTokensregexSequenceMatchRules_BasicSequenceExtractRule *create_EduStanfordNlpLingTokensregexSequenceMatchRules_BasicSequenceExtractRule_initWithEduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor_(EduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor *extractor) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequenceMatchRules_BasicSequenceExtractRule, initWithEduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor_, extractor)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexSequenceMatchRules_BasicSequenceExtractRule)

@implementation EduStanfordNlpLingTokensregexSequenceMatchRules_SequencePatternExtractRule

- (instancetype)initWithEduStanfordNlpLingTokensregexEnv:(EduStanfordNlpLingTokensregexEnv *)env
                                            withNSString:(NSString *)regex
                            withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)extractor {
  EduStanfordNlpLingTokensregexSequenceMatchRules_SequencePatternExtractRule_initWithEduStanfordNlpLingTokensregexEnv_withNSString_withJavaUtilFunctionFunction_(self, env, regex, extractor);
  return self;
}

- (instancetype)initWithEduStanfordNlpLingTokensregexSequencePattern:(EduStanfordNlpLingTokensregexSequencePattern *)p
                                        withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)extractor {
  EduStanfordNlpLingTokensregexSequenceMatchRules_SequencePatternExtractRule_initWithEduStanfordNlpLingTokensregexSequencePattern_withJavaUtilFunctionFunction_(self, p, extractor);
  return self;
}

- (instancetype)initWithEduStanfordNlpLingTokensregexSequencePattern:(EduStanfordNlpLingTokensregexSequencePattern *)p
                                        withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)extractor
           withEduStanfordNlpLingTokensregexSequenceMatcher_FindType:(EduStanfordNlpLingTokensregexSequenceMatcher_FindType *)findType
                                                         withBoolean:(jboolean)matchWithResult {
  EduStanfordNlpLingTokensregexSequenceMatchRules_SequencePatternExtractRule_initWithEduStanfordNlpLingTokensregexSequencePattern_withJavaUtilFunctionFunction_withEduStanfordNlpLingTokensregexSequenceMatcher_FindType_withBoolean_(self, p, extractor, findType, matchWithResult);
  return self;
}

- (jboolean)extractWithId:(id<JavaUtilList>)seq
         withJavaUtilList:(id<JavaUtilList>)outArg {
  if (seq == nil) return false;
  jboolean extracted = false;
  EduStanfordNlpLingTokensregexSequenceMatcher *m = [((EduStanfordNlpLingTokensregexSequencePattern *) nil_chk(pattern_)) getMatcherWithJavaUtilList:seq];
  if (findType_ != nil) {
    [((EduStanfordNlpLingTokensregexSequenceMatcher *) nil_chk(m)) setFindTypeWithEduStanfordNlpLingTokensregexSequenceMatcher_FindType:findType_];
  }
  [((EduStanfordNlpLingTokensregexSequenceMatcher *) nil_chk(m)) setMatchWithResultWithBoolean:matchWithResult_];
  while ([m find]) {
    [((id<JavaUtilList>) nil_chk(outArg)) addWithId:[((id<JavaUtilFunctionFunction>) nil_chk(extractor_)) applyWithId:m]];
    extracted = true;
  }
  return extracted;
}

- (id)applyWithId:(id<JavaUtilList>)seq {
  if (seq == nil) return nil;
  EduStanfordNlpLingTokensregexSequenceMatcher *m = [((EduStanfordNlpLingTokensregexSequencePattern *) nil_chk(pattern_)) getMatcherWithJavaUtilList:seq];
  [((EduStanfordNlpLingTokensregexSequenceMatcher *) nil_chk(m)) setMatchWithResultWithBoolean:matchWithResult_];
  if ([m matches]) {
    return [((id<JavaUtilFunctionFunction>) nil_chk(extractor_)) applyWithId:m];
  }
  else {
    return nil;
  }
}

- (id<JavaUtilFunctionFunction>)andThenWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_andThenWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilFunctionFunction>)composeWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_composeWithJavaUtilFunctionFunction_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, 3, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, -1, 5, -1, -1 },
    { NULL, "Z", 0x1, 6, 7, -1, 8, -1, -1 },
    { NULL, "LNSObject;", 0x1, 9, 10, -1, 11, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpLingTokensregexEnv:withNSString:withJavaUtilFunctionFunction:);
  methods[1].selector = @selector(initWithEduStanfordNlpLingTokensregexSequencePattern:withJavaUtilFunctionFunction:);
  methods[2].selector = @selector(initWithEduStanfordNlpLingTokensregexSequencePattern:withJavaUtilFunctionFunction:withEduStanfordNlpLingTokensregexSequenceMatcher_FindType:withBoolean:);
  methods[3].selector = @selector(extractWithId:withJavaUtilList:);
  methods[4].selector = @selector(applyWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "pattern_", "LEduStanfordNlpLingTokensregexSequencePattern;", .constantValue.asLong = 0, 0x0, -1, -1, 12, -1 },
    { "extractor_", "LJavaUtilFunctionFunction;", .constantValue.asLong = 0, 0x0, -1, -1, 13, -1 },
    { "findType_", "LEduStanfordNlpLingTokensregexSequenceMatcher_FindType;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "matchWithResult_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpLingTokensregexEnv;LNSString;LJavaUtilFunctionFunction;", "(Ledu/stanford/nlp/ling/tokensregex/Env;Ljava/lang/String;Ljava/util/function/Function<Ledu/stanford/nlp/ling/tokensregex/SequenceMatchResult<TT;>;TO;>;)V", "LEduStanfordNlpLingTokensregexSequencePattern;LJavaUtilFunctionFunction;", "(Ledu/stanford/nlp/ling/tokensregex/SequencePattern<TT;>;Ljava/util/function/Function<Ledu/stanford/nlp/ling/tokensregex/SequenceMatchResult<TT;>;TO;>;)V", "LEduStanfordNlpLingTokensregexSequencePattern;LJavaUtilFunctionFunction;LEduStanfordNlpLingTokensregexSequenceMatcher_FindType;Z", "(Ledu/stanford/nlp/ling/tokensregex/SequencePattern<TT;>;Ljava/util/function/Function<Ledu/stanford/nlp/ling/tokensregex/SequenceMatchResult<TT;>;TO;>;Ledu/stanford/nlp/ling/tokensregex/SequenceMatcher$FindType;Z)V", "extract", "LJavaUtilList;LJavaUtilList;", "(Ljava/util/List<+TT;>;Ljava/util/List<TO;>;)Z", "apply", "LJavaUtilList;", "(Ljava/util/List<+TT;>;)TO;", "Ledu/stanford/nlp/ling/tokensregex/SequencePattern<TT;>;", "Ljava/util/function/Function<Ledu/stanford/nlp/ling/tokensregex/SequenceMatchResult<TT;>;TO;>;", "LEduStanfordNlpLingTokensregexSequenceMatchRules;", "<T:Ljava/lang/Object;O:Ljava/lang/Object;>Ljava/lang/Object;Ledu/stanford/nlp/ling/tokensregex/SequenceMatchRules$ExtractRule<Ljava/util/List<+TT;>;TO;>;Ljava/util/function/Function<Ljava/util/List<+TT;>;TO;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexSequenceMatchRules_SequencePatternExtractRule = { "SequencePatternExtractRule", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, fields, 7, 0x9, 5, 4, 14, -1, -1, 15, -1 };
  return &_EduStanfordNlpLingTokensregexSequenceMatchRules_SequencePatternExtractRule;
}

@end

void EduStanfordNlpLingTokensregexSequenceMatchRules_SequencePatternExtractRule_initWithEduStanfordNlpLingTokensregexEnv_withNSString_withJavaUtilFunctionFunction_(EduStanfordNlpLingTokensregexSequenceMatchRules_SequencePatternExtractRule *self, EduStanfordNlpLingTokensregexEnv *env, NSString *regex, id<JavaUtilFunctionFunction> extractor) {
  NSObject_init(self);
  self->findType_ = nil;
  self->matchWithResult_ = false;
  self->extractor_ = extractor;
  self->pattern_ = EduStanfordNlpLingTokensregexSequencePattern_compileWithEduStanfordNlpLingTokensregexEnv_withNSString_(env, regex);
}

EduStanfordNlpLingTokensregexSequenceMatchRules_SequencePatternExtractRule *new_EduStanfordNlpLingTokensregexSequenceMatchRules_SequencePatternExtractRule_initWithEduStanfordNlpLingTokensregexEnv_withNSString_withJavaUtilFunctionFunction_(EduStanfordNlpLingTokensregexEnv *env, NSString *regex, id<JavaUtilFunctionFunction> extractor) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequenceMatchRules_SequencePatternExtractRule, initWithEduStanfordNlpLingTokensregexEnv_withNSString_withJavaUtilFunctionFunction_, env, regex, extractor)
}

EduStanfordNlpLingTokensregexSequenceMatchRules_SequencePatternExtractRule *create_EduStanfordNlpLingTokensregexSequenceMatchRules_SequencePatternExtractRule_initWithEduStanfordNlpLingTokensregexEnv_withNSString_withJavaUtilFunctionFunction_(EduStanfordNlpLingTokensregexEnv *env, NSString *regex, id<JavaUtilFunctionFunction> extractor) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequenceMatchRules_SequencePatternExtractRule, initWithEduStanfordNlpLingTokensregexEnv_withNSString_withJavaUtilFunctionFunction_, env, regex, extractor)
}

void EduStanfordNlpLingTokensregexSequenceMatchRules_SequencePatternExtractRule_initWithEduStanfordNlpLingTokensregexSequencePattern_withJavaUtilFunctionFunction_(EduStanfordNlpLingTokensregexSequenceMatchRules_SequencePatternExtractRule *self, EduStanfordNlpLingTokensregexSequencePattern *p, id<JavaUtilFunctionFunction> extractor) {
  NSObject_init(self);
  self->findType_ = nil;
  self->matchWithResult_ = false;
  self->extractor_ = extractor;
  self->pattern_ = p;
}

EduStanfordNlpLingTokensregexSequenceMatchRules_SequencePatternExtractRule *new_EduStanfordNlpLingTokensregexSequenceMatchRules_SequencePatternExtractRule_initWithEduStanfordNlpLingTokensregexSequencePattern_withJavaUtilFunctionFunction_(EduStanfordNlpLingTokensregexSequencePattern *p, id<JavaUtilFunctionFunction> extractor) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequenceMatchRules_SequencePatternExtractRule, initWithEduStanfordNlpLingTokensregexSequencePattern_withJavaUtilFunctionFunction_, p, extractor)
}

EduStanfordNlpLingTokensregexSequenceMatchRules_SequencePatternExtractRule *create_EduStanfordNlpLingTokensregexSequenceMatchRules_SequencePatternExtractRule_initWithEduStanfordNlpLingTokensregexSequencePattern_withJavaUtilFunctionFunction_(EduStanfordNlpLingTokensregexSequencePattern *p, id<JavaUtilFunctionFunction> extractor) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequenceMatchRules_SequencePatternExtractRule, initWithEduStanfordNlpLingTokensregexSequencePattern_withJavaUtilFunctionFunction_, p, extractor)
}

void EduStanfordNlpLingTokensregexSequenceMatchRules_SequencePatternExtractRule_initWithEduStanfordNlpLingTokensregexSequencePattern_withJavaUtilFunctionFunction_withEduStanfordNlpLingTokensregexSequenceMatcher_FindType_withBoolean_(EduStanfordNlpLingTokensregexSequenceMatchRules_SequencePatternExtractRule *self, EduStanfordNlpLingTokensregexSequencePattern *p, id<JavaUtilFunctionFunction> extractor, EduStanfordNlpLingTokensregexSequenceMatcher_FindType *findType, jboolean matchWithResult) {
  NSObject_init(self);
  self->findType_ = nil;
  self->matchWithResult_ = false;
  self->extractor_ = extractor;
  self->pattern_ = p;
  self->findType_ = findType;
  self->matchWithResult_ = matchWithResult;
}

EduStanfordNlpLingTokensregexSequenceMatchRules_SequencePatternExtractRule *new_EduStanfordNlpLingTokensregexSequenceMatchRules_SequencePatternExtractRule_initWithEduStanfordNlpLingTokensregexSequencePattern_withJavaUtilFunctionFunction_withEduStanfordNlpLingTokensregexSequenceMatcher_FindType_withBoolean_(EduStanfordNlpLingTokensregexSequencePattern *p, id<JavaUtilFunctionFunction> extractor, EduStanfordNlpLingTokensregexSequenceMatcher_FindType *findType, jboolean matchWithResult) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequenceMatchRules_SequencePatternExtractRule, initWithEduStanfordNlpLingTokensregexSequencePattern_withJavaUtilFunctionFunction_withEduStanfordNlpLingTokensregexSequenceMatcher_FindType_withBoolean_, p, extractor, findType, matchWithResult)
}

EduStanfordNlpLingTokensregexSequenceMatchRules_SequencePatternExtractRule *create_EduStanfordNlpLingTokensregexSequenceMatchRules_SequencePatternExtractRule_initWithEduStanfordNlpLingTokensregexSequencePattern_withJavaUtilFunctionFunction_withEduStanfordNlpLingTokensregexSequenceMatcher_FindType_withBoolean_(EduStanfordNlpLingTokensregexSequencePattern *p, id<JavaUtilFunctionFunction> extractor, EduStanfordNlpLingTokensregexSequenceMatcher_FindType *findType, jboolean matchWithResult) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequenceMatchRules_SequencePatternExtractRule, initWithEduStanfordNlpLingTokensregexSequencePattern_withJavaUtilFunctionFunction_withEduStanfordNlpLingTokensregexSequenceMatcher_FindType_withBoolean_, p, extractor, findType, matchWithResult)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexSequenceMatchRules_SequencePatternExtractRule)

@implementation EduStanfordNlpLingTokensregexSequenceMatchRules_MultiSequencePatternExtractRule

- (instancetype)initWithEduStanfordNlpLingTokensregexMultiPatternMatcher:(EduStanfordNlpLingTokensregexMultiPatternMatcher *)matcher
                                            withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)extractor {
  EduStanfordNlpLingTokensregexSequenceMatchRules_MultiSequencePatternExtractRule_initWithEduStanfordNlpLingTokensregexMultiPatternMatcher_withJavaUtilFunctionFunction_(self, matcher, extractor);
  return self;
}

- (jboolean)extractWithId:(id<JavaUtilList>)seq
         withJavaUtilList:(id<JavaUtilList>)outArg {
  if (seq == nil) return false;
  jboolean extracted = false;
  id<JavaUtilList> matched = [((EduStanfordNlpLingTokensregexMultiPatternMatcher *) nil_chk(matcher_)) findNonOverlappingMaxScoreWithJavaUtilList:seq];
  for (id<EduStanfordNlpLingTokensregexSequenceMatchResult> __strong m in nil_chk(matched)) {
    [((id<JavaUtilList>) nil_chk(outArg)) addWithId:[((id<JavaUtilFunctionFunction>) nil_chk(extractor_)) applyWithId:m]];
    extracted = true;
  }
  return extracted;
}

- (id)applyWithId:(id<JavaUtilList>)seq {
  if (seq == nil) return nil;
  id<JavaUtilList> matched = [((EduStanfordNlpLingTokensregexMultiPatternMatcher *) nil_chk(matcher_)) findNonOverlappingMaxScoreWithJavaUtilList:seq];
  if ([((id<JavaUtilList>) nil_chk(matched)) size] > 0) {
    return [((id<JavaUtilFunctionFunction>) nil_chk(extractor_)) applyWithId:[matched getWithInt:0]];
  }
  else {
    return nil;
  }
}

- (id<JavaUtilFunctionFunction>)andThenWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_andThenWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilFunctionFunction>)composeWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_composeWithJavaUtilFunctionFunction_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "LNSObject;", 0x1, 5, 6, -1, 7, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpLingTokensregexMultiPatternMatcher:withJavaUtilFunctionFunction:);
  methods[1].selector = @selector(extractWithId:withJavaUtilList:);
  methods[2].selector = @selector(applyWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "matcher_", "LEduStanfordNlpLingTokensregexMultiPatternMatcher;", .constantValue.asLong = 0, 0x0, -1, -1, 8, -1 },
    { "extractor_", "LJavaUtilFunctionFunction;", .constantValue.asLong = 0, 0x0, -1, -1, 9, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpLingTokensregexMultiPatternMatcher;LJavaUtilFunctionFunction;", "(Ledu/stanford/nlp/ling/tokensregex/MultiPatternMatcher<TT;>;Ljava/util/function/Function<Ledu/stanford/nlp/ling/tokensregex/SequenceMatchResult<TT;>;TO;>;)V", "extract", "LJavaUtilList;LJavaUtilList;", "(Ljava/util/List<+TT;>;Ljava/util/List<TO;>;)Z", "apply", "LJavaUtilList;", "(Ljava/util/List<+TT;>;)TO;", "Ledu/stanford/nlp/ling/tokensregex/MultiPatternMatcher<TT;>;", "Ljava/util/function/Function<Ledu/stanford/nlp/ling/tokensregex/SequenceMatchResult<TT;>;TO;>;", "LEduStanfordNlpLingTokensregexSequenceMatchRules;", "<T:Ljava/lang/Object;O:Ljava/lang/Object;>Ljava/lang/Object;Ledu/stanford/nlp/ling/tokensregex/SequenceMatchRules$ExtractRule<Ljava/util/List<+TT;>;TO;>;Ljava/util/function/Function<Ljava/util/List<+TT;>;TO;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexSequenceMatchRules_MultiSequencePatternExtractRule = { "MultiSequencePatternExtractRule", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, fields, 7, 0x9, 3, 2, 10, -1, -1, 11, -1 };
  return &_EduStanfordNlpLingTokensregexSequenceMatchRules_MultiSequencePatternExtractRule;
}

@end

void EduStanfordNlpLingTokensregexSequenceMatchRules_MultiSequencePatternExtractRule_initWithEduStanfordNlpLingTokensregexMultiPatternMatcher_withJavaUtilFunctionFunction_(EduStanfordNlpLingTokensregexSequenceMatchRules_MultiSequencePatternExtractRule *self, EduStanfordNlpLingTokensregexMultiPatternMatcher *matcher, id<JavaUtilFunctionFunction> extractor) {
  NSObject_init(self);
  self->extractor_ = extractor;
  self->matcher_ = matcher;
}

EduStanfordNlpLingTokensregexSequenceMatchRules_MultiSequencePatternExtractRule *new_EduStanfordNlpLingTokensregexSequenceMatchRules_MultiSequencePatternExtractRule_initWithEduStanfordNlpLingTokensregexMultiPatternMatcher_withJavaUtilFunctionFunction_(EduStanfordNlpLingTokensregexMultiPatternMatcher *matcher, id<JavaUtilFunctionFunction> extractor) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequenceMatchRules_MultiSequencePatternExtractRule, initWithEduStanfordNlpLingTokensregexMultiPatternMatcher_withJavaUtilFunctionFunction_, matcher, extractor)
}

EduStanfordNlpLingTokensregexSequenceMatchRules_MultiSequencePatternExtractRule *create_EduStanfordNlpLingTokensregexSequenceMatchRules_MultiSequencePatternExtractRule_initWithEduStanfordNlpLingTokensregexMultiPatternMatcher_withJavaUtilFunctionFunction_(EduStanfordNlpLingTokensregexMultiPatternMatcher *matcher, id<JavaUtilFunctionFunction> extractor) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequenceMatchRules_MultiSequencePatternExtractRule, initWithEduStanfordNlpLingTokensregexMultiPatternMatcher_withJavaUtilFunctionFunction_, matcher, extractor)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexSequenceMatchRules_MultiSequencePatternExtractRule)

@implementation EduStanfordNlpLingTokensregexSequenceMatchRules_StringPatternExtractRule

- (instancetype)initWithJavaUtilRegexPattern:(JavaUtilRegexPattern *)pattern
                withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)extractor {
  EduStanfordNlpLingTokensregexSequenceMatchRules_StringPatternExtractRule_initWithJavaUtilRegexPattern_withJavaUtilFunctionFunction_(self, pattern, extractor);
  return self;
}

- (instancetype)initWithEduStanfordNlpLingTokensregexEnv:(EduStanfordNlpLingTokensregexEnv *)env
                                            withNSString:(NSString *)regex
                            withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)extractor {
  EduStanfordNlpLingTokensregexSequenceMatchRules_StringPatternExtractRule_initWithEduStanfordNlpLingTokensregexEnv_withNSString_withJavaUtilFunctionFunction_(self, env, regex, extractor);
  return self;
}

- (instancetype)initWithNSString:(NSString *)regex
    withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)extractor {
  EduStanfordNlpLingTokensregexSequenceMatchRules_StringPatternExtractRule_initWithNSString_withJavaUtilFunctionFunction_(self, regex, extractor);
  return self;
}

- (instancetype)initWithEduStanfordNlpLingTokensregexEnv:(EduStanfordNlpLingTokensregexEnv *)env
                                            withNSString:(NSString *)regex
                            withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)extractor
                                             withBoolean:(jboolean)addWordBoundaries {
  EduStanfordNlpLingTokensregexSequenceMatchRules_StringPatternExtractRule_initWithEduStanfordNlpLingTokensregexEnv_withNSString_withJavaUtilFunctionFunction_withBoolean_(self, env, regex, extractor, addWordBoundaries);
  return self;
}

- (jboolean)extractWithId:(NSString *)str
         withJavaUtilList:(id<JavaUtilList>)outArg {
  if (str == nil) return false;
  jboolean extracted = false;
  JavaUtilRegexMatcher *m = [((JavaUtilRegexPattern *) nil_chk(pattern_)) matcherWithJavaLangCharSequence:str];
  while ([((JavaUtilRegexMatcher *) nil_chk(m)) find]) {
    [((id<JavaUtilList>) nil_chk(outArg)) addWithId:[((id<JavaUtilFunctionFunction>) nil_chk(extractor_)) applyWithId:m]];
    extracted = true;
  }
  return extracted;
}

- (id)applyWithId:(NSString *)str {
  if (str == nil) return nil;
  JavaUtilRegexMatcher *m = [((JavaUtilRegexPattern *) nil_chk(pattern_)) matcherWithJavaLangCharSequence:str];
  if ([((JavaUtilRegexMatcher *) nil_chk(m)) matches]) {
    return [((id<JavaUtilFunctionFunction>) nil_chk(extractor_)) applyWithId:m];
  }
  else {
    return nil;
  }
}

- (id<JavaUtilFunctionFunction>)andThenWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_andThenWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilFunctionFunction>)composeWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_composeWithJavaUtilFunctionFunction_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, 3, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, -1, 5, -1, -1 },
    { NULL, NULL, 0x1, -1, 6, -1, 7, -1, -1 },
    { NULL, "Z", 0x1, 8, 9, -1, 10, -1, -1 },
    { NULL, "LNSObject;", 0x1, 11, 12, -1, 13, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilRegexPattern:withJavaUtilFunctionFunction:);
  methods[1].selector = @selector(initWithEduStanfordNlpLingTokensregexEnv:withNSString:withJavaUtilFunctionFunction:);
  methods[2].selector = @selector(initWithNSString:withJavaUtilFunctionFunction:);
  methods[3].selector = @selector(initWithEduStanfordNlpLingTokensregexEnv:withNSString:withJavaUtilFunctionFunction:withBoolean:);
  methods[4].selector = @selector(extractWithId:withJavaUtilList:);
  methods[5].selector = @selector(applyWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "pattern_", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "extractor_", "LJavaUtilFunctionFunction;", .constantValue.asLong = 0, 0x0, -1, -1, 14, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilRegexPattern;LJavaUtilFunctionFunction;", "(Ljava/util/regex/Pattern;Ljava/util/function/Function<Ljava/util/regex/MatchResult;TO;>;)V", "LEduStanfordNlpLingTokensregexEnv;LNSString;LJavaUtilFunctionFunction;", "(Ledu/stanford/nlp/ling/tokensregex/Env;Ljava/lang/String;Ljava/util/function/Function<Ljava/util/regex/MatchResult;TO;>;)V", "LNSString;LJavaUtilFunctionFunction;", "(Ljava/lang/String;Ljava/util/function/Function<Ljava/util/regex/MatchResult;TO;>;)V", "LEduStanfordNlpLingTokensregexEnv;LNSString;LJavaUtilFunctionFunction;Z", "(Ledu/stanford/nlp/ling/tokensregex/Env;Ljava/lang/String;Ljava/util/function/Function<Ljava/util/regex/MatchResult;TO;>;Z)V", "extract", "LNSString;LJavaUtilList;", "(Ljava/lang/String;Ljava/util/List<TO;>;)Z", "apply", "LNSString;", "(Ljava/lang/String;)TO;", "Ljava/util/function/Function<Ljava/util/regex/MatchResult;TO;>;", "LEduStanfordNlpLingTokensregexSequenceMatchRules;", "<O:Ljava/lang/Object;>Ljava/lang/Object;Ledu/stanford/nlp/ling/tokensregex/SequenceMatchRules$ExtractRule<Ljava/lang/String;TO;>;Ljava/util/function/Function<Ljava/lang/String;TO;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexSequenceMatchRules_StringPatternExtractRule = { "StringPatternExtractRule", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, fields, 7, 0x9, 6, 2, 15, -1, -1, 16, -1 };
  return &_EduStanfordNlpLingTokensregexSequenceMatchRules_StringPatternExtractRule;
}

@end

void EduStanfordNlpLingTokensregexSequenceMatchRules_StringPatternExtractRule_initWithJavaUtilRegexPattern_withJavaUtilFunctionFunction_(EduStanfordNlpLingTokensregexSequenceMatchRules_StringPatternExtractRule *self, JavaUtilRegexPattern *pattern, id<JavaUtilFunctionFunction> extractor) {
  NSObject_init(self);
  self->pattern_ = pattern;
  self->extractor_ = extractor;
}

EduStanfordNlpLingTokensregexSequenceMatchRules_StringPatternExtractRule *new_EduStanfordNlpLingTokensregexSequenceMatchRules_StringPatternExtractRule_initWithJavaUtilRegexPattern_withJavaUtilFunctionFunction_(JavaUtilRegexPattern *pattern, id<JavaUtilFunctionFunction> extractor) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequenceMatchRules_StringPatternExtractRule, initWithJavaUtilRegexPattern_withJavaUtilFunctionFunction_, pattern, extractor)
}

EduStanfordNlpLingTokensregexSequenceMatchRules_StringPatternExtractRule *create_EduStanfordNlpLingTokensregexSequenceMatchRules_StringPatternExtractRule_initWithJavaUtilRegexPattern_withJavaUtilFunctionFunction_(JavaUtilRegexPattern *pattern, id<JavaUtilFunctionFunction> extractor) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequenceMatchRules_StringPatternExtractRule, initWithJavaUtilRegexPattern_withJavaUtilFunctionFunction_, pattern, extractor)
}

void EduStanfordNlpLingTokensregexSequenceMatchRules_StringPatternExtractRule_initWithEduStanfordNlpLingTokensregexEnv_withNSString_withJavaUtilFunctionFunction_(EduStanfordNlpLingTokensregexSequenceMatchRules_StringPatternExtractRule *self, EduStanfordNlpLingTokensregexEnv *env, NSString *regex, id<JavaUtilFunctionFunction> extractor) {
  EduStanfordNlpLingTokensregexSequenceMatchRules_StringPatternExtractRule_initWithEduStanfordNlpLingTokensregexEnv_withNSString_withJavaUtilFunctionFunction_withBoolean_(self, env, regex, extractor, false);
}

EduStanfordNlpLingTokensregexSequenceMatchRules_StringPatternExtractRule *new_EduStanfordNlpLingTokensregexSequenceMatchRules_StringPatternExtractRule_initWithEduStanfordNlpLingTokensregexEnv_withNSString_withJavaUtilFunctionFunction_(EduStanfordNlpLingTokensregexEnv *env, NSString *regex, id<JavaUtilFunctionFunction> extractor) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequenceMatchRules_StringPatternExtractRule, initWithEduStanfordNlpLingTokensregexEnv_withNSString_withJavaUtilFunctionFunction_, env, regex, extractor)
}

EduStanfordNlpLingTokensregexSequenceMatchRules_StringPatternExtractRule *create_EduStanfordNlpLingTokensregexSequenceMatchRules_StringPatternExtractRule_initWithEduStanfordNlpLingTokensregexEnv_withNSString_withJavaUtilFunctionFunction_(EduStanfordNlpLingTokensregexEnv *env, NSString *regex, id<JavaUtilFunctionFunction> extractor) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequenceMatchRules_StringPatternExtractRule, initWithEduStanfordNlpLingTokensregexEnv_withNSString_withJavaUtilFunctionFunction_, env, regex, extractor)
}

void EduStanfordNlpLingTokensregexSequenceMatchRules_StringPatternExtractRule_initWithNSString_withJavaUtilFunctionFunction_(EduStanfordNlpLingTokensregexSequenceMatchRules_StringPatternExtractRule *self, NSString *regex, id<JavaUtilFunctionFunction> extractor) {
  EduStanfordNlpLingTokensregexSequenceMatchRules_StringPatternExtractRule_initWithEduStanfordNlpLingTokensregexEnv_withNSString_withJavaUtilFunctionFunction_withBoolean_(self, nil, regex, extractor, false);
}

EduStanfordNlpLingTokensregexSequenceMatchRules_StringPatternExtractRule *new_EduStanfordNlpLingTokensregexSequenceMatchRules_StringPatternExtractRule_initWithNSString_withJavaUtilFunctionFunction_(NSString *regex, id<JavaUtilFunctionFunction> extractor) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequenceMatchRules_StringPatternExtractRule, initWithNSString_withJavaUtilFunctionFunction_, regex, extractor)
}

EduStanfordNlpLingTokensregexSequenceMatchRules_StringPatternExtractRule *create_EduStanfordNlpLingTokensregexSequenceMatchRules_StringPatternExtractRule_initWithNSString_withJavaUtilFunctionFunction_(NSString *regex, id<JavaUtilFunctionFunction> extractor) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequenceMatchRules_StringPatternExtractRule, initWithNSString_withJavaUtilFunctionFunction_, regex, extractor)
}

void EduStanfordNlpLingTokensregexSequenceMatchRules_StringPatternExtractRule_initWithEduStanfordNlpLingTokensregexEnv_withNSString_withJavaUtilFunctionFunction_withBoolean_(EduStanfordNlpLingTokensregexSequenceMatchRules_StringPatternExtractRule *self, EduStanfordNlpLingTokensregexEnv *env, NSString *regex, id<JavaUtilFunctionFunction> extractor, jboolean addWordBoundaries) {
  NSObject_init(self);
  self->extractor_ = extractor;
  if (addWordBoundaries) {
    regex = JreStrcat("$$$", @"\\b", regex, @"\\b");
  }
  if (env != nil) {
    self->pattern_ = [env getStringPatternWithNSString:regex];
  }
  else {
    self->pattern_ = JavaUtilRegexPattern_compileWithNSString_(regex);
  }
}

EduStanfordNlpLingTokensregexSequenceMatchRules_StringPatternExtractRule *new_EduStanfordNlpLingTokensregexSequenceMatchRules_StringPatternExtractRule_initWithEduStanfordNlpLingTokensregexEnv_withNSString_withJavaUtilFunctionFunction_withBoolean_(EduStanfordNlpLingTokensregexEnv *env, NSString *regex, id<JavaUtilFunctionFunction> extractor, jboolean addWordBoundaries) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequenceMatchRules_StringPatternExtractRule, initWithEduStanfordNlpLingTokensregexEnv_withNSString_withJavaUtilFunctionFunction_withBoolean_, env, regex, extractor, addWordBoundaries)
}

EduStanfordNlpLingTokensregexSequenceMatchRules_StringPatternExtractRule *create_EduStanfordNlpLingTokensregexSequenceMatchRules_StringPatternExtractRule_initWithEduStanfordNlpLingTokensregexEnv_withNSString_withJavaUtilFunctionFunction_withBoolean_(EduStanfordNlpLingTokensregexEnv *env, NSString *regex, id<JavaUtilFunctionFunction> extractor, jboolean addWordBoundaries) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequenceMatchRules_StringPatternExtractRule, initWithEduStanfordNlpLingTokensregexEnv_withNSString_withJavaUtilFunctionFunction_withBoolean_, env, regex, extractor, addWordBoundaries)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexSequenceMatchRules_StringPatternExtractRule)

@implementation EduStanfordNlpLingTokensregexSequenceMatchRules_StringMatchedExpressionExtractor

- (instancetype)initWithEduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor:(EduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor *)extractor
                                                                                         withInt:(jint)group {
  EduStanfordNlpLingTokensregexSequenceMatchRules_StringMatchedExpressionExtractor_initWithEduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor_withInt_(self, extractor, group);
  return self;
}

- (EduStanfordNlpLingTokensregexMatchedExpression *)applyWithId:(id<JavaUtilRegexMatchResult>)matched {
  EduStanfordNlpLingTokensregexMatchedExpression *te = [((EduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor *) nil_chk(extractor_)) createMatchedExpressionWithEduStanfordNlpUtilInterval:EduStanfordNlpUtilInterval_toIntervalWithJavaLangComparable_withJavaLangComparable_withInt_(JavaLangInteger_valueOfWithInt_([((id<JavaUtilRegexMatchResult>) nil_chk(matched)) startWithInt:group_]), JavaLangInteger_valueOfWithInt_([matched endWithInt:group_]), EduStanfordNlpUtilInterval_INTERVAL_OPEN_END) withEduStanfordNlpUtilInterval:nil];
  return te;
}

- (id<JavaUtilFunctionFunction>)andThenWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_andThenWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilFunctionFunction>)composeWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_composeWithJavaUtilFunctionFunction_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexMatchedExpression;", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor:withInt:);
  methods[1].selector = @selector(applyWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "extractor_", "LEduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "group_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor;I", "apply", "LJavaUtilRegexMatchResult;", "LEduStanfordNlpLingTokensregexSequenceMatchRules;", "Ljava/lang/Object;Ljava/util/function/Function<Ljava/util/regex/MatchResult;Ledu/stanford/nlp/ling/tokensregex/MatchedExpression;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexSequenceMatchRules_StringMatchedExpressionExtractor = { "StringMatchedExpressionExtractor", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, fields, 7, 0x9, 2, 2, 3, -1, -1, 4, -1 };
  return &_EduStanfordNlpLingTokensregexSequenceMatchRules_StringMatchedExpressionExtractor;
}

@end

void EduStanfordNlpLingTokensregexSequenceMatchRules_StringMatchedExpressionExtractor_initWithEduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor_withInt_(EduStanfordNlpLingTokensregexSequenceMatchRules_StringMatchedExpressionExtractor *self, EduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor *extractor, jint group) {
  NSObject_init(self);
  self->group_ = 0;
  self->extractor_ = extractor;
  self->group_ = group;
}

EduStanfordNlpLingTokensregexSequenceMatchRules_StringMatchedExpressionExtractor *new_EduStanfordNlpLingTokensregexSequenceMatchRules_StringMatchedExpressionExtractor_initWithEduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor_withInt_(EduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor *extractor, jint group) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequenceMatchRules_StringMatchedExpressionExtractor, initWithEduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor_withInt_, extractor, group)
}

EduStanfordNlpLingTokensregexSequenceMatchRules_StringMatchedExpressionExtractor *create_EduStanfordNlpLingTokensregexSequenceMatchRules_StringMatchedExpressionExtractor_initWithEduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor_withInt_(EduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor *extractor, jint group) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequenceMatchRules_StringMatchedExpressionExtractor, initWithEduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor_withInt_, extractor, group)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexSequenceMatchRules_StringMatchedExpressionExtractor)

@implementation EduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchedExpressionExtractor

- (instancetype)initWithEduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor:(EduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor *)extractor
                                                                                         withInt:(jint)group {
  EduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchedExpressionExtractor_initWithEduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor_withInt_(self, extractor, group);
  return self;
}

- (EduStanfordNlpLingTokensregexMatchedExpression *)applyWithId:(id<EduStanfordNlpLingTokensregexSequenceMatchResult>)matched {
  EduStanfordNlpLingTokensregexMatchedExpression *te = [((EduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor *) nil_chk(extractor_)) createMatchedExpressionWithEduStanfordNlpUtilInterval:nil withEduStanfordNlpUtilInterval:EduStanfordNlpUtilInterval_toIntervalWithJavaLangComparable_withJavaLangComparable_withInt_(JavaLangInteger_valueOfWithInt_([((id<EduStanfordNlpLingTokensregexSequenceMatchResult>) nil_chk(matched)) startWithInt:group_]), JavaLangInteger_valueOfWithInt_([matched endWithInt:group_]), EduStanfordNlpUtilInterval_INTERVAL_OPEN_END)];
  if (JavaLangDouble_isNaNWithDouble_(((EduStanfordNlpLingTokensregexMatchedExpression *) nil_chk(te))->priority_)) {
    te->priority_ = [matched priority];
  }
  if (JavaLangDouble_isNaNWithDouble_(te->weight_)) {
    te->weight_ = [matched score];
  }
  if (self->group_ != 0) {
    te->context_ = [matched toBasicSequenceMatchResult];
  }
  return te;
}

- (id<JavaUtilFunctionFunction>)andThenWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_andThenWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilFunctionFunction>)composeWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_composeWithJavaUtilFunctionFunction_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexMatchedExpression;", 0x1, 1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor:withInt:);
  methods[1].selector = @selector(applyWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "extractor_", "LEduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "group_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor;I", "apply", "LEduStanfordNlpLingTokensregexSequenceMatchResult;", "(Ledu/stanford/nlp/ling/tokensregex/SequenceMatchResult<Ledu/stanford/nlp/util/CoreMap;>;)Ledu/stanford/nlp/ling/tokensregex/MatchedExpression;", "LEduStanfordNlpLingTokensregexSequenceMatchRules;", "Ljava/lang/Object;Ljava/util/function/Function<Ledu/stanford/nlp/ling/tokensregex/SequenceMatchResult<Ledu/stanford/nlp/util/CoreMap;>;Ledu/stanford/nlp/ling/tokensregex/MatchedExpression;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchedExpressionExtractor = { "SequenceMatchedExpressionExtractor", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, fields, 7, 0x9, 2, 2, 4, -1, -1, 5, -1 };
  return &_EduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchedExpressionExtractor;
}

@end

void EduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchedExpressionExtractor_initWithEduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor_withInt_(EduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchedExpressionExtractor *self, EduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor *extractor, jint group) {
  NSObject_init(self);
  self->group_ = 0;
  self->extractor_ = extractor;
  self->group_ = group;
}

EduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchedExpressionExtractor *new_EduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchedExpressionExtractor_initWithEduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor_withInt_(EduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor *extractor, jint group) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchedExpressionExtractor, initWithEduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor_withInt_, extractor, group)
}

EduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchedExpressionExtractor *create_EduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchedExpressionExtractor_initWithEduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor_withInt_(EduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor *extractor, jint group) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchedExpressionExtractor, initWithEduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor_withInt_, extractor, group)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexSequenceMatchRules_SequenceMatchedExpressionExtractor)

@implementation EduStanfordNlpLingTokensregexSequenceMatchRules_CoreMapFunctionApplier

- (instancetype)initWithEduStanfordNlpLingTokensregexEnv:(EduStanfordNlpLingTokensregexEnv *)env
                                            withIOSClass:(IOSClass *)annotationField
                            withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)func {
  EduStanfordNlpLingTokensregexSequenceMatchRules_CoreMapFunctionApplier_initWithEduStanfordNlpLingTokensregexEnv_withIOSClass_withJavaUtilFunctionFunction_(self, env, annotationField, func);
  return self;
}

- (id)applyWithId:(id<EduStanfordNlpUtilCoreMap>)cm {
  if (env_ != nil) {
    [env_ pushWithNSString:EduStanfordNlpLingTokensregexTypesExpressions_VAR_SELF withId:cm];
  }
  id field = [((id<EduStanfordNlpUtilCoreMap>) nil_chk(cm)) getWithIOSClass:annotationField_];
  id res = [((id<JavaUtilFunctionFunction>) nil_chk(func_)) applyWithId:field];
  if (env_ != nil) {
    (void) [env_ popWithNSString:EduStanfordNlpLingTokensregexTypesExpressions_VAR_SELF];
  }
  return res;
}

- (id<JavaUtilFunctionFunction>)andThenWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_andThenWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilFunctionFunction>)composeWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_composeWithJavaUtilFunctionFunction_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpLingTokensregexEnv:withIOSClass:withJavaUtilFunctionFunction:);
  methods[1].selector = @selector(applyWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "env_", "LEduStanfordNlpLingTokensregexEnv;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "annotationField_", "LIOSClass;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "func_", "LJavaUtilFunctionFunction;", .constantValue.asLong = 0, 0x0, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpLingTokensregexEnv;LIOSClass;LJavaUtilFunctionFunction;", "(Ledu/stanford/nlp/ling/tokensregex/Env;Ljava/lang/Class;Ljava/util/function/Function<TT;TO;>;)V", "apply", "LEduStanfordNlpUtilCoreMap;", "(Ledu/stanford/nlp/util/CoreMap;)TO;", "Ljava/util/function/Function<TT;TO;>;", "LEduStanfordNlpLingTokensregexSequenceMatchRules;", "<T:Ljava/lang/Object;O:Ljava/lang/Object;>Ljava/lang/Object;Ljava/util/function/Function<Ledu/stanford/nlp/util/CoreMap;TO;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexSequenceMatchRules_CoreMapFunctionApplier = { "CoreMapFunctionApplier", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, fields, 7, 0x9, 2, 3, 6, -1, -1, 7, -1 };
  return &_EduStanfordNlpLingTokensregexSequenceMatchRules_CoreMapFunctionApplier;
}

@end

void EduStanfordNlpLingTokensregexSequenceMatchRules_CoreMapFunctionApplier_initWithEduStanfordNlpLingTokensregexEnv_withIOSClass_withJavaUtilFunctionFunction_(EduStanfordNlpLingTokensregexSequenceMatchRules_CoreMapFunctionApplier *self, EduStanfordNlpLingTokensregexEnv *env, IOSClass *annotationField, id<JavaUtilFunctionFunction> func) {
  NSObject_init(self);
  self->annotationField_ = annotationField;
  if (annotationField == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Annotation field cannot be null");
  }
  self->func_ = func;
  self->env_ = env;
}

EduStanfordNlpLingTokensregexSequenceMatchRules_CoreMapFunctionApplier *new_EduStanfordNlpLingTokensregexSequenceMatchRules_CoreMapFunctionApplier_initWithEduStanfordNlpLingTokensregexEnv_withIOSClass_withJavaUtilFunctionFunction_(EduStanfordNlpLingTokensregexEnv *env, IOSClass *annotationField, id<JavaUtilFunctionFunction> func) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequenceMatchRules_CoreMapFunctionApplier, initWithEduStanfordNlpLingTokensregexEnv_withIOSClass_withJavaUtilFunctionFunction_, env, annotationField, func)
}

EduStanfordNlpLingTokensregexSequenceMatchRules_CoreMapFunctionApplier *create_EduStanfordNlpLingTokensregexSequenceMatchRules_CoreMapFunctionApplier_initWithEduStanfordNlpLingTokensregexEnv_withIOSClass_withJavaUtilFunctionFunction_(EduStanfordNlpLingTokensregexEnv *env, IOSClass *annotationField, id<JavaUtilFunctionFunction> func) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequenceMatchRules_CoreMapFunctionApplier, initWithEduStanfordNlpLingTokensregexEnv_withIOSClass_withJavaUtilFunctionFunction_, env, annotationField, func)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexSequenceMatchRules_CoreMapFunctionApplier)

@implementation EduStanfordNlpLingTokensregexSequenceMatchRules_CoreMapToListFunctionApplier

- (instancetype)initWithEduStanfordNlpLingTokensregexEnv:(EduStanfordNlpLingTokensregexEnv *)env
                            withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)func {
  EduStanfordNlpLingTokensregexSequenceMatchRules_CoreMapToListFunctionApplier_initWithEduStanfordNlpLingTokensregexEnv_withJavaUtilFunctionFunction_(self, env, func);
  return self;
}

- (id)applyWithId:(id<EduStanfordNlpUtilCoreMap>)cm {
  if (env_ != nil) {
    [env_ pushWithNSString:EduStanfordNlpLingTokensregexTypesExpressions_VAR_SELF withId:cm];
  }
  id res = [((id<JavaUtilFunctionFunction>) nil_chk(func_)) applyWithId:JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ cm } count:1 type:EduStanfordNlpUtilCoreMap_class_()])];
  if (env_ != nil) {
    (void) [env_ popWithNSString:EduStanfordNlpLingTokensregexTypesExpressions_VAR_SELF];
  }
  return res;
}

- (id<JavaUtilFunctionFunction>)andThenWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_andThenWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilFunctionFunction>)composeWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_composeWithJavaUtilFunctionFunction_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpLingTokensregexEnv:withJavaUtilFunctionFunction:);
  methods[1].selector = @selector(applyWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "env_", "LEduStanfordNlpLingTokensregexEnv;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "func_", "LJavaUtilFunctionFunction;", .constantValue.asLong = 0, 0x0, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpLingTokensregexEnv;LJavaUtilFunctionFunction;", "(Ledu/stanford/nlp/ling/tokensregex/Env;Ljava/util/function/Function<Ljava/util/List<+Ledu/stanford/nlp/util/CoreMap;>;TO;>;)V", "apply", "LEduStanfordNlpUtilCoreMap;", "(Ledu/stanford/nlp/util/CoreMap;)TO;", "Ljava/util/function/Function<Ljava/util/List<+Ledu/stanford/nlp/util/CoreMap;>;TO;>;", "LEduStanfordNlpLingTokensregexSequenceMatchRules;", "<O:Ljava/lang/Object;>Ljava/lang/Object;Ljava/util/function/Function<Ledu/stanford/nlp/util/CoreMap;TO;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexSequenceMatchRules_CoreMapToListFunctionApplier = { "CoreMapToListFunctionApplier", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, fields, 7, 0x9, 2, 2, 6, -1, -1, 7, -1 };
  return &_EduStanfordNlpLingTokensregexSequenceMatchRules_CoreMapToListFunctionApplier;
}

@end

void EduStanfordNlpLingTokensregexSequenceMatchRules_CoreMapToListFunctionApplier_initWithEduStanfordNlpLingTokensregexEnv_withJavaUtilFunctionFunction_(EduStanfordNlpLingTokensregexSequenceMatchRules_CoreMapToListFunctionApplier *self, EduStanfordNlpLingTokensregexEnv *env, id<JavaUtilFunctionFunction> func) {
  NSObject_init(self);
  self->func_ = func;
  self->env_ = env;
}

EduStanfordNlpLingTokensregexSequenceMatchRules_CoreMapToListFunctionApplier *new_EduStanfordNlpLingTokensregexSequenceMatchRules_CoreMapToListFunctionApplier_initWithEduStanfordNlpLingTokensregexEnv_withJavaUtilFunctionFunction_(EduStanfordNlpLingTokensregexEnv *env, id<JavaUtilFunctionFunction> func) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequenceMatchRules_CoreMapToListFunctionApplier, initWithEduStanfordNlpLingTokensregexEnv_withJavaUtilFunctionFunction_, env, func)
}

EduStanfordNlpLingTokensregexSequenceMatchRules_CoreMapToListFunctionApplier *create_EduStanfordNlpLingTokensregexSequenceMatchRules_CoreMapToListFunctionApplier_initWithEduStanfordNlpLingTokensregexEnv_withJavaUtilFunctionFunction_(EduStanfordNlpLingTokensregexEnv *env, id<JavaUtilFunctionFunction> func) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequenceMatchRules_CoreMapToListFunctionApplier, initWithEduStanfordNlpLingTokensregexEnv_withJavaUtilFunctionFunction_, env, func)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexSequenceMatchRules_CoreMapToListFunctionApplier)
