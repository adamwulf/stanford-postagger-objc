//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/ling/tokensregex/SequenceMatcher.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/ling/tokensregex/BasicSequenceMatchResult.h"
#include "edu/stanford/nlp/ling/tokensregex/SequenceMatchResult.h"
#include "edu/stanford/nlp/ling/tokensregex/SequenceMatcher.h"
#include "edu/stanford/nlp/ling/tokensregex/SequencePattern.h"
#include "edu/stanford/nlp/util/ArraySet.h"
#include "edu/stanford/nlp/util/HasInterval.h"
#include "edu/stanford/nlp/util/HashIndex.h"
#include "edu/stanford/nlp/util/IterableIterator.h"
#include "edu/stanford/nlp/util/Pair.h"
#include "edu/stanford/nlp/util/RuntimeInterruptedException.h"
#include "java/lang/Boolean.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/Integer.h"
#include "java/lang/Iterable.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/Thread.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/BitSet.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/Comparator.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/LinkedHashSet.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/NoSuchElementException.h"
#include "java/util/Set.h"
#include "java/util/Stack.h"
#include "java/util/function/Consumer.h"
#include "java/util/function/Function.h"
#include "java/util/function/ToDoubleFunction.h"
#include "java/util/function/ToIntFunction.h"
#include "java/util/function/ToLongFunction.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"

@interface EduStanfordNlpLingTokensregexSequenceMatcher ()

- (jboolean)findNextNonOverlapping;

- (jboolean)findNextAll;

- (void)clearMatched;

- (NSString *)getStateMessage;

- (EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *)getStartStates;

- (NSString *)getMatchedSignature;

@end

inline JavaUtilLoggingLogger *EduStanfordNlpLingTokensregexSequenceMatcher_get_logger();
static JavaUtilLoggingLogger *EduStanfordNlpLingTokensregexSequenceMatcher_logger;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpLingTokensregexSequenceMatcher, logger, JavaUtilLoggingLogger *)

__attribute__((unused)) static jboolean EduStanfordNlpLingTokensregexSequenceMatcher_findNextNonOverlapping(EduStanfordNlpLingTokensregexSequenceMatcher *self);

__attribute__((unused)) static jboolean EduStanfordNlpLingTokensregexSequenceMatcher_findNextAll(EduStanfordNlpLingTokensregexSequenceMatcher *self);

__attribute__((unused)) static void EduStanfordNlpLingTokensregexSequenceMatcher_clearMatched(EduStanfordNlpLingTokensregexSequenceMatcher *self);

__attribute__((unused)) static NSString *EduStanfordNlpLingTokensregexSequenceMatcher_getStateMessage(EduStanfordNlpLingTokensregexSequenceMatcher *self);

__attribute__((unused)) static EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *EduStanfordNlpLingTokensregexSequenceMatcher_getStartStates(EduStanfordNlpLingTokensregexSequenceMatcher *self);

__attribute__((unused)) static NSString *EduStanfordNlpLingTokensregexSequenceMatcher_getMatchedSignature(EduStanfordNlpLingTokensregexSequenceMatcher *self);

__attribute__((unused)) static void EduStanfordNlpLingTokensregexSequenceMatcher_FindType_initWithNSString_withInt_(EduStanfordNlpLingTokensregexSequenceMatcher_FindType *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static EduStanfordNlpLingTokensregexSequenceMatcher_FindType *new_EduStanfordNlpLingTokensregexSequenceMatcher_FindType_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

@interface EduStanfordNlpLingTokensregexSequenceMatcher_MatchReplacement : NSObject

@end

@interface EduStanfordNlpLingTokensregexSequenceMatcher_BranchState ()

- (void)updateKeepBidsWithJavaUtilBitSet:(JavaUtilBitSet *)bids;

- (void)addBidsToCollapseWithIntArray:(IOSIntArray *)bids;

- (void)addMatchedGroupsWithJavaUtilMap:(id<JavaUtilMap>)g;

- (void)addMatchedResultsWithJavaUtilMap:(id<JavaUtilMap>)res;

@end

__attribute__((unused)) static void EduStanfordNlpLingTokensregexSequenceMatcher_BranchState_updateKeepBidsWithJavaUtilBitSet_(EduStanfordNlpLingTokensregexSequenceMatcher_BranchState *self, JavaUtilBitSet *bids);

__attribute__((unused)) static void EduStanfordNlpLingTokensregexSequenceMatcher_BranchState_addBidsToCollapseWithIntArray_(EduStanfordNlpLingTokensregexSequenceMatcher_BranchState *self, IOSIntArray *bids);

__attribute__((unused)) static void EduStanfordNlpLingTokensregexSequenceMatcher_BranchState_addMatchedGroupsWithJavaUtilMap_(EduStanfordNlpLingTokensregexSequenceMatcher_BranchState *self, id<JavaUtilMap> g);

__attribute__((unused)) static void EduStanfordNlpLingTokensregexSequenceMatcher_BranchState_addMatchedResultsWithJavaUtilMap_(EduStanfordNlpLingTokensregexSequenceMatcher_BranchState *self, id<JavaUtilMap> res);

@interface EduStanfordNlpLingTokensregexSequenceMatcher_State : NSObject {
 @public
  jint bid_;
  EduStanfordNlpLingTokensregexSequencePattern_State *tstate_;
}

- (instancetype)initWithInt:(jint)bid
withEduStanfordNlpLingTokensregexSequencePattern_State:(EduStanfordNlpLingTokensregexSequencePattern_State *)tstate;

- (jboolean)isEqual:(id)o;

- (NSUInteger)hash;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpLingTokensregexSequenceMatcher_State)

J2OBJC_FIELD_SETTER(EduStanfordNlpLingTokensregexSequenceMatcher_State, tstate_, EduStanfordNlpLingTokensregexSequencePattern_State *)

__attribute__((unused)) static void EduStanfordNlpLingTokensregexSequenceMatcher_State_initWithInt_withEduStanfordNlpLingTokensregexSequencePattern_State_(EduStanfordNlpLingTokensregexSequenceMatcher_State *self, jint bid, EduStanfordNlpLingTokensregexSequencePattern_State *tstate);

__attribute__((unused)) static EduStanfordNlpLingTokensregexSequenceMatcher_State *new_EduStanfordNlpLingTokensregexSequenceMatcher_State_initWithInt_withEduStanfordNlpLingTokensregexSequencePattern_State_(jint bid, EduStanfordNlpLingTokensregexSequencePattern_State *tstate) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpLingTokensregexSequenceMatcher_State *create_EduStanfordNlpLingTokensregexSequenceMatcher_State_initWithInt_withEduStanfordNlpLingTokensregexSequencePattern_State_(jint bid, EduStanfordNlpLingTokensregexSequencePattern_State *tstate);

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpLingTokensregexSequenceMatcher_State)

@interface EduStanfordNlpLingTokensregexSequenceMatcher_BranchStates ()

- (void)linkWithEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates:(EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *)s;

- (void)unlinkWithEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates:(EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *)s;

- (void)condense;

- (id<JavaUtilList>)getParentsWithInt:(jint)bid;

- (void)mergeBranchStatesWithEduStanfordNlpLingTokensregexSequenceMatcher_BranchState:(EduStanfordNlpLingTokensregexSequenceMatcher_BranchState *)bs;

@end

__attribute__((unused)) static void EduStanfordNlpLingTokensregexSequenceMatcher_BranchStates_linkWithEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_(EduStanfordNlpLingTokensregexSequenceMatcher_BranchStates *self, EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *s);

__attribute__((unused)) static void EduStanfordNlpLingTokensregexSequenceMatcher_BranchStates_unlinkWithEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_(EduStanfordNlpLingTokensregexSequenceMatcher_BranchStates *self, EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *s);

__attribute__((unused)) static void EduStanfordNlpLingTokensregexSequenceMatcher_BranchStates_condense(EduStanfordNlpLingTokensregexSequenceMatcher_BranchStates *self);

__attribute__((unused)) static id<JavaUtilList> EduStanfordNlpLingTokensregexSequenceMatcher_BranchStates_getParentsWithInt_(EduStanfordNlpLingTokensregexSequenceMatcher_BranchStates *self, jint bid);

__attribute__((unused)) static void EduStanfordNlpLingTokensregexSequenceMatcher_BranchStates_mergeBranchStatesWithEduStanfordNlpLingTokensregexSequenceMatcher_BranchState_(EduStanfordNlpLingTokensregexSequenceMatcher_BranchStates *self, EduStanfordNlpLingTokensregexSequenceMatcher_BranchState *bs);

@interface EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates ()

- (instancetype)initWithEduStanfordNlpLingTokensregexSequenceMatcher:(EduStanfordNlpLingTokensregexSequenceMatcher *)matcher
       withEduStanfordNlpLingTokensregexSequenceMatcher_BranchStates:(EduStanfordNlpLingTokensregexSequenceMatcher_BranchStates *)branchStates;

- (void)swap;

- (void)swapAndClear;

- (jboolean)matchWithInt:(jint)position;

- (jint)getMatchIndex;

- (id<JavaUtilCollection>)getMatchIndices;

- (jint)selectMatchIndex;

- (void)completeMatch;

- (void)setMatchedGroupsWithInt:(jint)matchStateIndex;

- (jboolean)isAllMatch;

- (jboolean)isMatch;

- (void)clean;

@end

__attribute__((unused)) static void EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_initWithEduStanfordNlpLingTokensregexSequenceMatcher_withEduStanfordNlpLingTokensregexSequenceMatcher_BranchStates_(EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *self, EduStanfordNlpLingTokensregexSequenceMatcher *matcher, EduStanfordNlpLingTokensregexSequenceMatcher_BranchStates *branchStates);

__attribute__((unused)) static EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *new_EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_initWithEduStanfordNlpLingTokensregexSequenceMatcher_withEduStanfordNlpLingTokensregexSequenceMatcher_BranchStates_(EduStanfordNlpLingTokensregexSequenceMatcher *matcher, EduStanfordNlpLingTokensregexSequenceMatcher_BranchStates *branchStates) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *create_EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_initWithEduStanfordNlpLingTokensregexSequenceMatcher_withEduStanfordNlpLingTokensregexSequenceMatcher_BranchStates_(EduStanfordNlpLingTokensregexSequenceMatcher *matcher, EduStanfordNlpLingTokensregexSequenceMatcher_BranchStates *branchStates);

__attribute__((unused)) static void EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_swap(EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *self);

__attribute__((unused)) static void EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_swapAndClear(EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *self);

__attribute__((unused)) static jboolean EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_matchWithInt_(EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *self, jint position);

__attribute__((unused)) static jint EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_getMatchIndex(EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *self);

__attribute__((unused)) static id<JavaUtilCollection> EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_getMatchIndices(EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *self);

__attribute__((unused)) static jint EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_selectMatchIndex(EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *self);

__attribute__((unused)) static void EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_completeMatch(EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *self);

__attribute__((unused)) static void EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_setMatchedGroupsWithInt_(EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *self, jint matchStateIndex);

__attribute__((unused)) static jboolean EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_isAllMatch(EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *self);

__attribute__((unused)) static jboolean EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_isMatch(EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *self);

__attribute__((unused)) static void EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_clean(EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *self);

@interface EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_$Lambda$1 : NSObject < JavaUtilComparator > {
 @public
  EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *this$0_;
}

- (jint)compareWithId:(JavaLangInteger *)o1
               withId:(JavaLangInteger *)o2;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_$Lambda$1)

J2OBJC_FIELD_SETTER(EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_$Lambda$1, this$0_, EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *)

__attribute__((unused)) static void EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_$Lambda$1_initWithEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_(EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_$Lambda$1 *self, EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *outer$);

__attribute__((unused)) static EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_$Lambda$1 *new_EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_$Lambda$1_initWithEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_(EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_$Lambda$1 *create_EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_$Lambda$1_initWithEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_(EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *outer$);

@interface EduStanfordNlpLingTokensregexSequenceMatcher_$1 : NSObject < JavaUtilIterator > {
 @public
  EduStanfordNlpLingTokensregexSequenceMatcher *this$0_;
  id<EduStanfordNlpLingTokensregexSequenceMatchResult> next_;
}

- (id<EduStanfordNlpLingTokensregexSequenceMatchResult>)getNext;

- (jboolean)hasNext;

- (id<EduStanfordNlpLingTokensregexSequenceMatchResult>)next;

- (void)remove;

- (instancetype)initWithEduStanfordNlpLingTokensregexSequenceMatcher:(EduStanfordNlpLingTokensregexSequenceMatcher *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpLingTokensregexSequenceMatcher_$1)

J2OBJC_FIELD_SETTER(EduStanfordNlpLingTokensregexSequenceMatcher_$1, this$0_, EduStanfordNlpLingTokensregexSequenceMatcher *)
J2OBJC_FIELD_SETTER(EduStanfordNlpLingTokensregexSequenceMatcher_$1, next_, id<EduStanfordNlpLingTokensregexSequenceMatchResult>)

__attribute__((unused)) static id<EduStanfordNlpLingTokensregexSequenceMatchResult> EduStanfordNlpLingTokensregexSequenceMatcher_$1_getNext(EduStanfordNlpLingTokensregexSequenceMatcher_$1 *self);

__attribute__((unused)) static void EduStanfordNlpLingTokensregexSequenceMatcher_$1_initWithEduStanfordNlpLingTokensregexSequenceMatcher_(EduStanfordNlpLingTokensregexSequenceMatcher_$1 *self, EduStanfordNlpLingTokensregexSequenceMatcher *outer$);

__attribute__((unused)) static EduStanfordNlpLingTokensregexSequenceMatcher_$1 *new_EduStanfordNlpLingTokensregexSequenceMatcher_$1_initWithEduStanfordNlpLingTokensregexSequenceMatcher_(EduStanfordNlpLingTokensregexSequenceMatcher *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpLingTokensregexSequenceMatcher_$1 *create_EduStanfordNlpLingTokensregexSequenceMatcher_$1_initWithEduStanfordNlpLingTokensregexSequenceMatcher_(EduStanfordNlpLingTokensregexSequenceMatcher *outer$);

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpLingTokensregexSequenceMatcher)

@implementation EduStanfordNlpLingTokensregexSequenceMatcher

- (instancetype)initWithEduStanfordNlpLingTokensregexSequencePattern:(EduStanfordNlpLingTokensregexSequencePattern *)pattern
                                                    withJavaUtilList:(id<JavaUtilList>)elements {
  EduStanfordNlpLingTokensregexSequenceMatcher_initWithEduStanfordNlpLingTokensregexSequencePattern_withJavaUtilList_(self, pattern, elements);
  return self;
}

- (void)setBranchLimitWithInt:(jint)blimit {
  self->branchLimit_ = blimit;
}

- (id<JavaUtilList>)replaceAllExtendedWithJavaUtilList:(id<JavaUtilList>)replacement {
  id<JavaUtilList> res = new_JavaUtilArrayList_init();
  EduStanfordNlpLingTokensregexSequenceMatcher_FindType *oldFindType = findType_;
  findType_ = JreLoadEnum(EduStanfordNlpLingTokensregexSequenceMatcher_FindType, FIND_NONOVERLAPPING);
  jint index = 0;
  while ([self find]) {
    [res addAllWithJavaUtilCollection:[((id<JavaUtilList>) nil_chk([self elements])) subListWithInt:index withInt:[self start]]];
    for (id<EduStanfordNlpLingTokensregexSequenceMatcher_MatchReplacement> __strong r in nil_chk(replacement)) {
      [((id<EduStanfordNlpLingTokensregexSequenceMatcher_MatchReplacement>) nil_chk(r)) appendWithEduStanfordNlpLingTokensregexSequenceMatchResult:self withJavaUtilList:res];
    }
    index = [self end];
  }
  [res addAllWithJavaUtilCollection:[((id<JavaUtilList>) nil_chk([self elements])) subListWithInt:index withInt:[((id<JavaUtilList>) nil_chk([self elements])) size]]];
  findType_ = oldFindType;
  return res;
}

- (id<JavaUtilList>)replaceFirstExtendedWithJavaUtilList:(id<JavaUtilList>)replacement {
  id<JavaUtilList> res = new_JavaUtilArrayList_init();
  EduStanfordNlpLingTokensregexSequenceMatcher_FindType *oldFindType = findType_;
  findType_ = JreLoadEnum(EduStanfordNlpLingTokensregexSequenceMatcher_FindType, FIND_NONOVERLAPPING);
  jint index = 0;
  if ([self find]) {
    [res addAllWithJavaUtilCollection:[((id<JavaUtilList>) nil_chk([self elements])) subListWithInt:index withInt:[self start]]];
    for (id<EduStanfordNlpLingTokensregexSequenceMatcher_MatchReplacement> __strong r in nil_chk(replacement)) {
      [((id<EduStanfordNlpLingTokensregexSequenceMatcher_MatchReplacement>) nil_chk(r)) appendWithEduStanfordNlpLingTokensregexSequenceMatchResult:self withJavaUtilList:res];
    }
    index = [self end];
  }
  [res addAllWithJavaUtilCollection:[((id<JavaUtilList>) nil_chk([self elements])) subListWithInt:index withInt:[((id<JavaUtilList>) nil_chk([self elements])) size]]];
  findType_ = oldFindType;
  return res;
}

- (id<JavaUtilList>)replaceAllWithJavaUtilList:(id<JavaUtilList>)replacement {
  id<JavaUtilList> res = new_JavaUtilArrayList_init();
  EduStanfordNlpLingTokensregexSequenceMatcher_FindType *oldFindType = findType_;
  findType_ = JreLoadEnum(EduStanfordNlpLingTokensregexSequenceMatcher_FindType, FIND_NONOVERLAPPING);
  jint index = 0;
  while ([self find]) {
    [res addAllWithJavaUtilCollection:[((id<JavaUtilList>) nil_chk([self elements])) subListWithInt:index withInt:[self start]]];
    [res addAllWithJavaUtilCollection:replacement];
    index = [self end];
  }
  [res addAllWithJavaUtilCollection:[((id<JavaUtilList>) nil_chk([self elements])) subListWithInt:index withInt:[((id<JavaUtilList>) nil_chk([self elements])) size]]];
  findType_ = oldFindType;
  return res;
}

- (id<JavaUtilList>)replaceFirstWithJavaUtilList:(id<JavaUtilList>)replacement {
  id<JavaUtilList> res = new_JavaUtilArrayList_init();
  EduStanfordNlpLingTokensregexSequenceMatcher_FindType *oldFindType = findType_;
  findType_ = JreLoadEnum(EduStanfordNlpLingTokensregexSequenceMatcher_FindType, FIND_NONOVERLAPPING);
  jint index = 0;
  if ([self find]) {
    [res addAllWithJavaUtilCollection:[((id<JavaUtilList>) nil_chk([self elements])) subListWithInt:index withInt:[self start]]];
    [res addAllWithJavaUtilCollection:replacement];
    index = [self end];
  }
  [res addAllWithJavaUtilCollection:[((id<JavaUtilList>) nil_chk([self elements])) subListWithInt:index withInt:[((id<JavaUtilList>) nil_chk([self elements])) size]]];
  findType_ = oldFindType;
  return res;
}

- (EduStanfordNlpLingTokensregexSequenceMatcher_FindType *)getFindType {
  return findType_;
}

- (void)setFindTypeWithEduStanfordNlpLingTokensregexSequenceMatcher_FindType:(EduStanfordNlpLingTokensregexSequenceMatcher_FindType *)findType {
  self->findType_ = findType;
}

- (jboolean)isMatchWithResult {
  return matchWithResult_;
}

- (void)setMatchWithResultWithBoolean:(jboolean)matchWithResult {
  self->matchWithResult_ = matchWithResult;
}

- (jboolean)findWithInt:(jint)start {
  if (start < 0 || start > [((id<JavaUtilList>) nil_chk(elements_)) size]) {
    @throw new_JavaLangIndexOutOfBoundsException_initWithNSString_(JreStrcat("$I$I", @"Invalid region start=", start, @", need to be between 0 and ", [((id<JavaUtilList>) nil_chk(elements_)) size]));
  }
  [self reset];
  return [self findWithInt:start withBoolean:false];
}

- (jboolean)findWithInt:(jint)start
            withBoolean:(jboolean)matchStart {
  jboolean done = false;
  while (!done) {
    jboolean res = [self find0WithInt:start withBoolean:matchStart];
    if (res) {
      jboolean empty = [((NSString *) nil_chk([self group])) isEmpty];
      if (!empty || includeEmptyMatches_) return res;
      else {
        start = start + 1;
      }
    }
    done = !res;
  }
  return false;
}

- (jboolean)find0WithInt:(jint)start
             withBoolean:(jboolean)matchStart {
  jboolean match = false;
  matched_ = false;
  matchingCompleted_ = false;
  if (matchStart) {
    match = [self findMatchStartWithInt:start withBoolean:false];
  }
  else {
    for (jint i = start; i < regionEnd_; i++) {
      match = [self findMatchStartWithInt:i withBoolean:false];
      if (match) {
        break;
      }
    }
  }
  matched_ = match;
  matchingCompleted_ = true;
  if (matched_) {
    nextMatchStart_ = (findType_ == JreLoadEnum(EduStanfordNlpLingTokensregexSequenceMatcher_FindType, FIND_NONOVERLAPPING)) ? [self end] : [self start] + 1;
  }
  else {
    nextMatchStart_ = -1;
  }
  return match;
}

- (jboolean)findNextNonOverlapping {
  return EduStanfordNlpLingTokensregexSequenceMatcher_findNextNonOverlapping(self);
}

- (jboolean)findNextAll {
  return EduStanfordNlpLingTokensregexSequenceMatcher_findNextAll(self);
}

- (id<JavaLangIterable>)findAllNonOverlapping {
  id<JavaUtilIterator> iter = new_EduStanfordNlpLingTokensregexSequenceMatcher_$1_initWithEduStanfordNlpLingTokensregexSequenceMatcher_(self);
  return new_EduStanfordNlpUtilIterableIterator_initWithJavaUtilIterator_(iter);
}

- (jboolean)find {
  switch ([findType_ ordinal]) {
    case EduStanfordNlpLingTokensregexSequenceMatcher_FindType_Enum_FIND_NONOVERLAPPING:
    return EduStanfordNlpLingTokensregexSequenceMatcher_findNextNonOverlapping(self);
    case EduStanfordNlpLingTokensregexSequenceMatcher_FindType_Enum_FIND_ALL:
    return EduStanfordNlpLingTokensregexSequenceMatcher_findNextAll(self);
    default:
    @throw new_JavaLangUnsupportedOperationException_initWithNSString_(JreStrcat("$@", @"Unsupported findType ", findType_));
  }
}

- (jboolean)findMatchStartWithInt:(jint)start
                      withBoolean:(jboolean)matchAllTokens {
  switch ([findType_ ordinal]) {
    case EduStanfordNlpLingTokensregexSequenceMatcher_FindType_Enum_FIND_NONOVERLAPPING:
    return [self findMatchStartBacktrackingWithInt:start withBoolean:matchAllTokens];
    case EduStanfordNlpLingTokensregexSequenceMatcher_FindType_Enum_FIND_ALL:
    return [self findMatchStartNoBacktrackingWithInt:start withBoolean:matchAllTokens];
    default:
    @throw new_JavaLangUnsupportedOperationException_initWithNSString_(JreStrcat("$@", @"Unsupported findType ", findType_));
  }
}

- (jboolean)findMatchStartNoBacktrackingWithInt:(jint)start
                                    withBoolean:(jboolean)matchAllTokens {
  jboolean matchAll = true;
  EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *cStates = EduStanfordNlpLingTokensregexSequenceMatcher_getStartStates(self);
  curMatchStates_ = cStates;
  for (jint i = start; i < regionEnd_; i++) {
    jboolean match = EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_matchWithInt_(nil_chk(cStates), i);
    if (cStates == nil || [cStates size] == 0) {
      break;
    }
    if (!matchAllTokens) {
      if ((matchAll && EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_isAllMatch(cStates)) || (!matchAll && EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_isMatch(cStates))) {
        EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_completeMatch(cStates);
        return true;
      }
    }
  }
  EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_completeMatch(nil_chk(cStates));
  return EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_isMatch(cStates);
}

- (jboolean)findMatchStartBacktrackingWithInt:(jint)start
                                  withBoolean:(jboolean)matchAllTokens {
  jboolean matchAll = true;
  JavaUtilStack *todo = new_JavaUtilStack_init();
  EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *cStates = EduStanfordNlpLingTokensregexSequenceMatcher_getStartStates(self);
  ((EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *) nil_chk(cStates))->curPosition_ = start - 1;
  (void) [todo pushWithId:cStates];
  while (![todo empty]) {
    cStates = [todo pop];
    jint s = ((EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *) nil_chk(cStates))->curPosition_ + 1;
    for (jint i = s; i < regionEnd_; i++) {
      if (JavaLangThread_interrupted()) {
        @throw new_EduStanfordNlpUtilRuntimeInterruptedException_init();
      }
      jboolean match = EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_matchWithInt_(cStates, i);
      if (cStates == nil || [cStates size] == 0) {
        break;
      }
      if (!matchAllTokens) {
        if ((matchAll && EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_isAllMatch(cStates)) || (!matchAll && EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_isMatch(cStates))) {
          EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_completeMatch(cStates);
          return true;
        }
      }
      if (branchLimit_ >= 0 && [cStates branchSize] > branchLimit_) {
        EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *s2 = [cStates splitWithInt:branchLimit_];
        (void) [todo pushWithId:s2];
      }
    }
    if (EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_isMatch(cStates)) {
      EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_completeMatch(cStates);
      return true;
    }
    EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_clean(cStates);
  }
  return false;
}

- (jboolean)matches {
  matched_ = false;
  matchingCompleted_ = false;
  jboolean status = [self findMatchStartWithInt:0 withBoolean:true];
  if (status) {
    status = ((((EduStanfordNlpLingTokensregexBasicSequenceMatchResult_MatchedGroup *) nil_chk(IOSObjectArray_Get(nil_chk(matchedGroups_), 0)))->matchBegin_ == regionStart_) && (((EduStanfordNlpLingTokensregexBasicSequenceMatchResult_MatchedGroup *) nil_chk(IOSObjectArray_Get(matchedGroups_, 0)))->matchEnd_ == regionEnd_));
  }
  matchingCompleted_ = true;
  matched_ = status;
  return status;
}

- (void)clearMatched {
  EduStanfordNlpLingTokensregexSequenceMatcher_clearMatched(self);
}

- (NSString *)getStateMessage {
  return EduStanfordNlpLingTokensregexSequenceMatcher_getStateMessage(self);
}

- (void)regionWithInt:(jint)start
              withInt:(jint)end {
  if (start < 0 || start > [((id<JavaUtilList>) nil_chk(elements_)) size]) {
    @throw new_JavaLangIndexOutOfBoundsException_initWithNSString_(JreStrcat("$I$I", @"Invalid region start=", start, @", need to be between 0 and ", [((id<JavaUtilList>) nil_chk(elements_)) size]));
  }
  if (end < 0 || end > [((id<JavaUtilList>) nil_chk(elements_)) size]) {
    @throw new_JavaLangIndexOutOfBoundsException_initWithNSString_(JreStrcat("$I$I", @"Invalid region end=", end, @", need to be between 0 and ", [((id<JavaUtilList>) nil_chk(elements_)) size]));
  }
  if (start > end) {
    @throw new_JavaLangIndexOutOfBoundsException_initWithNSString_(JreStrcat("$I$I", @"Invalid region end=", end, @", need to be larger then start=", start));
  }
  self->regionStart_ = start;
  self->nextMatchStart_ = start;
  self->regionEnd_ = end;
}

- (jint)regionEnd {
  return regionEnd_;
}

- (jint)regionStart {
  return regionStart_;
}

- (EduStanfordNlpLingTokensregexBasicSequenceMatchResult *)toBasicSequenceMatchResult {
  if (matchingCompleted_ && matched_) {
    return [super toBasicSequenceMatchResult];
  }
  else {
    NSString *message = EduStanfordNlpLingTokensregexSequenceMatcher_getStateMessage(self);
    @throw new_JavaLangIllegalStateException_initWithNSString_(message);
  }
}

- (jint)startWithInt:(jint)group {
  if (matchingCompleted_ && matched_) {
    return [super startWithInt:group];
  }
  else {
    NSString *message = EduStanfordNlpLingTokensregexSequenceMatcher_getStateMessage(self);
    @throw new_JavaLangIllegalStateException_initWithNSString_(message);
  }
}

- (jint)endWithInt:(jint)group {
  if (matchingCompleted_ && matched_) {
    return [super endWithInt:group];
  }
  else {
    NSString *message = EduStanfordNlpLingTokensregexSequenceMatcher_getStateMessage(self);
    @throw new_JavaLangIllegalStateException_initWithNSString_(message);
  }
}

- (id<JavaUtilList>)groupNodesWithInt:(jint)group {
  if (matchingCompleted_ && matched_) {
    return [super groupNodesWithInt:group];
  }
  else {
    NSString *message = EduStanfordNlpLingTokensregexSequenceMatcher_getStateMessage(self);
    @throw new_JavaLangIllegalStateException_initWithNSString_(message);
  }
}

- (id)groupValueWithInt:(jint)group {
  if (matchingCompleted_ && matched_) {
    return [super groupValueWithInt:group];
  }
  else {
    NSString *message = EduStanfordNlpLingTokensregexSequenceMatcher_getStateMessage(self);
    @throw new_JavaLangIllegalStateException_initWithNSString_(message);
  }
}

- (EduStanfordNlpLingTokensregexSequenceMatchResult_MatchedGroupInfo *)groupInfoWithInt:(jint)group {
  if (matchingCompleted_ && matched_) {
    return [super groupInfoWithInt:group];
  }
  else {
    NSString *message = EduStanfordNlpLingTokensregexSequenceMatcher_getStateMessage(self);
    @throw new_JavaLangIllegalStateException_initWithNSString_(message);
  }
}

- (id<JavaUtilList>)groupMatchResultsWithInt:(jint)group {
  if (matchingCompleted_ && matched_) {
    return [super groupMatchResultsWithInt:group];
  }
  else {
    NSString *message = EduStanfordNlpLingTokensregexSequenceMatcher_getStateMessage(self);
    @throw new_JavaLangIllegalStateException_initWithNSString_(message);
  }
}

- (id)groupMatchResultWithInt:(jint)group
                      withInt:(jint)index {
  if (matchingCompleted_ && matched_) {
    return [super groupMatchResultWithInt:group withInt:index];
  }
  else {
    NSString *message = EduStanfordNlpLingTokensregexSequenceMatcher_getStateMessage(self);
    @throw new_JavaLangIllegalStateException_initWithNSString_(message);
  }
}

- (id)nodeMatchResultWithInt:(jint)index {
  if (matchingCompleted_ && matched_) {
    return [super nodeMatchResultWithInt:index];
  }
  else {
    NSString *message = EduStanfordNlpLingTokensregexSequenceMatcher_getStateMessage(self);
    @throw new_JavaLangIllegalStateException_initWithNSString_(message);
  }
}

- (void)reset {
  regionStart_ = 0;
  regionEnd_ = [((id<JavaUtilList>) nil_chk(elements_)) size];
  nextMatchStart_ = 0;
  matchingCompleted_ = false;
  matched_ = false;
  EduStanfordNlpLingTokensregexSequenceMatcher_clearMatched(self);
  [((id<JavaUtilSet>) nil_chk(prevMatchedSignatures_)) clear];
  curMatchIter_ = nil;
  curMatchStates_ = nil;
}

- (id)getWithInt:(jint)i {
  return [((id<JavaUtilList>) nil_chk(elements_)) getWithInt:i];
}

- (EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *)getStartStates {
  return EduStanfordNlpLingTokensregexSequenceMatcher_getStartStates(self);
}

- (NSString *)getMatchedSignature {
  return EduStanfordNlpLingTokensregexSequenceMatcher_getMatchedSignature(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 7, 5, -1, 6, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 8, 5, -1, 9, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 10, 5, -1, 9, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexSequenceMatcher_FindType;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 15, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 15, 16, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 17, 16, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangIterable;", 0x1, -1, -1, -1, 18, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 19, 16, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 20, 16, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 21, 16, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 23, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexBasicSequenceMatchResult;", 0x1, -1, -1, -1, 24, -1, -1 },
    { NULL, "I", 0x1, 25, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 26, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 27, 3, -1, 28, -1, -1 },
    { NULL, "LNSObject;", 0x1, 29, 3, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexSequenceMatchResult_MatchedGroupInfo;", 0x1, 30, 3, -1, 31, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 32, 3, -1, 33, -1, -1 },
    { NULL, "LNSObject;", 0x1, 34, 23, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 35, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 36, 3, -1, 37, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates;", 0x2, -1, -1, -1, 38, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpLingTokensregexSequencePattern:withJavaUtilList:);
  methods[1].selector = @selector(setBranchLimitWithInt:);
  methods[2].selector = @selector(replaceAllExtendedWithJavaUtilList:);
  methods[3].selector = @selector(replaceFirstExtendedWithJavaUtilList:);
  methods[4].selector = @selector(replaceAllWithJavaUtilList:);
  methods[5].selector = @selector(replaceFirstWithJavaUtilList:);
  methods[6].selector = @selector(getFindType);
  methods[7].selector = @selector(setFindTypeWithEduStanfordNlpLingTokensregexSequenceMatcher_FindType:);
  methods[8].selector = @selector(isMatchWithResult);
  methods[9].selector = @selector(setMatchWithResultWithBoolean:);
  methods[10].selector = @selector(findWithInt:);
  methods[11].selector = @selector(findWithInt:withBoolean:);
  methods[12].selector = @selector(find0WithInt:withBoolean:);
  methods[13].selector = @selector(findNextNonOverlapping);
  methods[14].selector = @selector(findNextAll);
  methods[15].selector = @selector(findAllNonOverlapping);
  methods[16].selector = @selector(find);
  methods[17].selector = @selector(findMatchStartWithInt:withBoolean:);
  methods[18].selector = @selector(findMatchStartNoBacktrackingWithInt:withBoolean:);
  methods[19].selector = @selector(findMatchStartBacktrackingWithInt:withBoolean:);
  methods[20].selector = @selector(matches);
  methods[21].selector = @selector(clearMatched);
  methods[22].selector = @selector(getStateMessage);
  methods[23].selector = @selector(regionWithInt:withInt:);
  methods[24].selector = @selector(regionEnd);
  methods[25].selector = @selector(regionStart);
  methods[26].selector = @selector(toBasicSequenceMatchResult);
  methods[27].selector = @selector(startWithInt:);
  methods[28].selector = @selector(endWithInt:);
  methods[29].selector = @selector(groupNodesWithInt:);
  methods[30].selector = @selector(groupValueWithInt:);
  methods[31].selector = @selector(groupInfoWithInt:);
  methods[32].selector = @selector(groupMatchResultsWithInt:);
  methods[33].selector = @selector(groupMatchResultWithInt:withInt:);
  methods[34].selector = @selector(nodeMatchResultWithInt:);
  methods[35].selector = @selector(reset);
  methods[36].selector = @selector(getWithInt:);
  methods[37].selector = @selector(getStartStates);
  methods[38].selector = @selector(getMatchedSignature);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "logger", "LJavaUtilLoggingLogger;", .constantValue.asLong = 0, 0x1a, -1, 39, -1, -1 },
    { "includeEmptyMatches_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "matchingCompleted_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "matched_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "matchWithResult_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "nextMatchStart_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "regionStart_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "regionEnd_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "findType_", "LEduStanfordNlpLingTokensregexSequenceMatcher_FindType;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "curMatchIter_", "LJavaUtilIterator;", .constantValue.asLong = 0, 0x0, -1, -1, 40, -1 },
    { "curMatchStates_", "LEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates;", .constantValue.asLong = 0, 0x0, -1, -1, 41, -1 },
    { "prevMatchedSignatures_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x0, -1, -1, 42, -1 },
    { "branchLimit_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpLingTokensregexSequencePattern;LJavaUtilList;", "(Ledu/stanford/nlp/ling/tokensregex/SequencePattern<TT;>;Ljava/util/List<+TT;>;)V", "setBranchLimit", "I", "replaceAllExtended", "LJavaUtilList;", "(Ljava/util/List<Ledu/stanford/nlp/ling/tokensregex/SequenceMatcher$MatchReplacement<TT;>;>;)Ljava/util/List<TT;>;", "replaceFirstExtended", "replaceAll", "(Ljava/util/List<TT;>;)Ljava/util/List<TT;>;", "replaceFirst", "setFindType", "LEduStanfordNlpLingTokensregexSequenceMatcher_FindType;", "setMatchWithResult", "Z", "find", "IZ", "find0", "()Ljava/lang/Iterable<Ledu/stanford/nlp/ling/tokensregex/SequenceMatchResult<TT;>;>;", "findMatchStart", "findMatchStartNoBacktracking", "findMatchStartBacktracking", "region", "II", "()Ledu/stanford/nlp/ling/tokensregex/BasicSequenceMatchResult<TT;>;", "start", "end", "groupNodes", "(I)Ljava/util/List<TT;>;", "groupValue", "groupInfo", "(I)Ledu/stanford/nlp/ling/tokensregex/SequenceMatchResult$MatchedGroupInfo<TT;>;", "groupMatchResults", "(I)Ljava/util/List<Ljava/lang/Object;>;", "groupMatchResult", "nodeMatchResult", "get", "(I)TT;", "()Ledu/stanford/nlp/ling/tokensregex/SequenceMatcher$MatchedStates<TT;>;", &EduStanfordNlpLingTokensregexSequenceMatcher_logger, "Ljava/util/Iterator<Ljava/lang/Integer;>;", "Ledu/stanford/nlp/ling/tokensregex/SequenceMatcher$MatchedStates<TT;>;", "Ljava/util/Set<Ljava/lang/String;>;", "LEduStanfordNlpLingTokensregexSequenceMatcher_FindType;LEduStanfordNlpLingTokensregexSequenceMatcher_MatchReplacement;LEduStanfordNlpLingTokensregexSequenceMatcher_BasicMatchReplacement;LEduStanfordNlpLingTokensregexSequenceMatcher_NamedGroupMatchReplacement;LEduStanfordNlpLingTokensregexSequenceMatcher_GroupMatchReplacement;LEduStanfordNlpLingTokensregexSequenceMatcher_BranchState;LEduStanfordNlpLingTokensregexSequenceMatcher_State;LEduStanfordNlpLingTokensregexSequenceMatcher_BranchStates;LEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates;", "<T:Ljava/lang/Object;>Ledu/stanford/nlp/ling/tokensregex/BasicSequenceMatchResult<TT;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexSequenceMatcher = { "SequenceMatcher", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, fields, 7, 0x1, 39, 13, -1, 43, -1, 44, -1 };
  return &_EduStanfordNlpLingTokensregexSequenceMatcher;
}

+ (void)initialize {
  if (self == [EduStanfordNlpLingTokensregexSequenceMatcher class]) {
    EduStanfordNlpLingTokensregexSequenceMatcher_logger = JavaUtilLoggingLogger_getLoggerWithNSString_([EduStanfordNlpLingTokensregexSequenceMatcher_class_() getName]);
    J2OBJC_SET_INITIALIZED(EduStanfordNlpLingTokensregexSequenceMatcher)
  }
}

@end

void EduStanfordNlpLingTokensregexSequenceMatcher_initWithEduStanfordNlpLingTokensregexSequencePattern_withJavaUtilList_(EduStanfordNlpLingTokensregexSequenceMatcher *self, EduStanfordNlpLingTokensregexSequencePattern *pattern, id<JavaUtilList> elements) {
  EduStanfordNlpLingTokensregexBasicSequenceMatchResult_init(self);
  self->includeEmptyMatches_ = false;
  self->matchingCompleted_ = false;
  self->matched_ = false;
  self->matchWithResult_ = false;
  self->nextMatchStart_ = 0;
  self->regionStart_ = 0;
  self->regionEnd_ = -1;
  self->findType_ = JreLoadEnum(EduStanfordNlpLingTokensregexSequenceMatcher_FindType, FIND_NONOVERLAPPING);
  self->curMatchIter_ = nil;
  self->curMatchStates_ = nil;
  self->prevMatchedSignatures_ = new_JavaUtilHashSet_init();
  self->branchLimit_ = 2;
  self->pattern_ = pattern;
  self->elements_ = elements;
  if (elements == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Cannot match against null elements");
  }
  self->regionEnd_ = [elements size];
  self->priority_ = ((EduStanfordNlpLingTokensregexSequencePattern *) nil_chk(pattern))->priority_;
  self->score_ = pattern->weight_;
  self->varGroupBindings_ = pattern->varGroupBindings_;
  self->matchedGroups_ = [IOSObjectArray newArrayWithLength:pattern->totalGroups_ type:EduStanfordNlpLingTokensregexBasicSequenceMatchResult_MatchedGroup_class_()];
}

EduStanfordNlpLingTokensregexSequenceMatcher *new_EduStanfordNlpLingTokensregexSequenceMatcher_initWithEduStanfordNlpLingTokensregexSequencePattern_withJavaUtilList_(EduStanfordNlpLingTokensregexSequencePattern *pattern, id<JavaUtilList> elements) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequenceMatcher, initWithEduStanfordNlpLingTokensregexSequencePattern_withJavaUtilList_, pattern, elements)
}

EduStanfordNlpLingTokensregexSequenceMatcher *create_EduStanfordNlpLingTokensregexSequenceMatcher_initWithEduStanfordNlpLingTokensregexSequencePattern_withJavaUtilList_(EduStanfordNlpLingTokensregexSequencePattern *pattern, id<JavaUtilList> elements) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequenceMatcher, initWithEduStanfordNlpLingTokensregexSequencePattern_withJavaUtilList_, pattern, elements)
}

jboolean EduStanfordNlpLingTokensregexSequenceMatcher_findNextNonOverlapping(EduStanfordNlpLingTokensregexSequenceMatcher *self) {
  if (self->nextMatchStart_ < 0) {
    return false;
  }
  return [self findWithInt:self->nextMatchStart_ withBoolean:false];
}

jboolean EduStanfordNlpLingTokensregexSequenceMatcher_findNextAll(EduStanfordNlpLingTokensregexSequenceMatcher *self) {
  if (self->curMatchIter_ != nil && [self->curMatchIter_ hasNext]) {
    while ([((id<JavaUtilIterator>) nil_chk(self->curMatchIter_)) hasNext]) {
      jint next = [((JavaLangInteger *) nil_chk([((id<JavaUtilIterator>) nil_chk(self->curMatchIter_)) next])) intValue];
      EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_setMatchedGroupsWithInt_(nil_chk(self->curMatchStates_), next);
      NSString *sig = EduStanfordNlpLingTokensregexSequenceMatcher_getMatchedSignature(self);
      if (![((id<JavaUtilSet>) nil_chk(self->prevMatchedSignatures_)) containsWithId:sig]) {
        [((id<JavaUtilSet>) nil_chk(self->prevMatchedSignatures_)) addWithId:sig];
        return true;
      }
    }
  }
  if (self->nextMatchStart_ < 0) {
    return false;
  }
  [((id<JavaUtilSet>) nil_chk(self->prevMatchedSignatures_)) clear];
  jboolean matched = [self findWithInt:self->nextMatchStart_ withBoolean:false];
  if (matched) {
    id<JavaUtilCollection> matchedBranches = EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_getMatchIndices(nil_chk(self->curMatchStates_));
    self->curMatchIter_ = [((id<JavaUtilCollection>) nil_chk(matchedBranches)) iterator];
    jint next = [((JavaLangInteger *) nil_chk([((id<JavaUtilIterator>) nil_chk(self->curMatchIter_)) next])) intValue];
    EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_setMatchedGroupsWithInt_(nil_chk(self->curMatchStates_), next);
    [((id<JavaUtilSet>) nil_chk(self->prevMatchedSignatures_)) addWithId:EduStanfordNlpLingTokensregexSequenceMatcher_getMatchedSignature(self)];
  }
  return matched;
}

void EduStanfordNlpLingTokensregexSequenceMatcher_clearMatched(EduStanfordNlpLingTokensregexSequenceMatcher *self) {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(self->matchedGroups_))->size_; i++) {
    (void) IOSObjectArray_Set(self->matchedGroups_, i, nil);
  }
  if (self->matchedResults_ != nil) {
    for (jint i = 0; i < self->matchedResults_->size_; i++) {
      (void) IOSObjectArray_Set(self->matchedResults_, i, nil);
    }
  }
}

NSString *EduStanfordNlpLingTokensregexSequenceMatcher_getStateMessage(EduStanfordNlpLingTokensregexSequenceMatcher *self) {
  if (!self->matchingCompleted_) {
    return @"Matching not completed";
  }
  else if (!self->matched_) {
    return @"No match found";
  }
  else {
    return @"Match successful";
  }
}

EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *EduStanfordNlpLingTokensregexSequenceMatcher_getStartStates(EduStanfordNlpLingTokensregexSequenceMatcher *self) {
  return new_EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_initWithEduStanfordNlpLingTokensregexSequenceMatcher_withEduStanfordNlpLingTokensregexSequencePattern_State_(self, ((EduStanfordNlpLingTokensregexSequencePattern *) nil_chk(self->pattern_))->root_);
}

NSString *EduStanfordNlpLingTokensregexSequenceMatcher_getMatchedSignature(EduStanfordNlpLingTokensregexSequenceMatcher *self) {
  if (self->matchedGroups_ == nil) return nil;
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  {
    IOSObjectArray *a__ = self->matchedGroups_;
    EduStanfordNlpLingTokensregexBasicSequenceMatchResult_MatchedGroup * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    EduStanfordNlpLingTokensregexBasicSequenceMatchResult_MatchedGroup * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      EduStanfordNlpLingTokensregexBasicSequenceMatchResult_MatchedGroup *g = *b__++;
      (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"("])) appendWithInt:((EduStanfordNlpLingTokensregexBasicSequenceMatchResult_MatchedGroup *) nil_chk(g))->matchBegin_])) appendWithNSString:@","])) appendWithInt:g->matchEnd_])) appendWithNSString:@")"];
    }
  }
  return [sb description];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexSequenceMatcher)

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpLingTokensregexSequenceMatcher_FindType)

EduStanfordNlpLingTokensregexSequenceMatcher_FindType *EduStanfordNlpLingTokensregexSequenceMatcher_FindType_values_[2];

@implementation EduStanfordNlpLingTokensregexSequenceMatcher_FindType

+ (IOSObjectArray *)values {
  return EduStanfordNlpLingTokensregexSequenceMatcher_FindType_values();
}

+ (EduStanfordNlpLingTokensregexSequenceMatcher_FindType *)valueOfWithNSString:(NSString *)name {
  return EduStanfordNlpLingTokensregexSequenceMatcher_FindType_valueOfWithNSString_(name);
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LEduStanfordNlpLingTokensregexSequenceMatcher_FindType;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexSequenceMatcher_FindType;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "FIND_NONOVERLAPPING", "LEduStanfordNlpLingTokensregexSequenceMatcher_FindType;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "FIND_ALL", "LEduStanfordNlpLingTokensregexSequenceMatcher_FindType;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(EduStanfordNlpLingTokensregexSequenceMatcher_FindType, FIND_NONOVERLAPPING), &JreEnum(EduStanfordNlpLingTokensregexSequenceMatcher_FindType, FIND_ALL), "LEduStanfordNlpLingTokensregexSequenceMatcher;", "Ljava/lang/Enum<Ledu/stanford/nlp/ling/tokensregex/SequenceMatcher$FindType;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexSequenceMatcher_FindType = { "FindType", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, fields, 7, 0x4019, 2, 2, 4, -1, -1, 5, -1 };
  return &_EduStanfordNlpLingTokensregexSequenceMatcher_FindType;
}

+ (void)initialize {
  if (self == [EduStanfordNlpLingTokensregexSequenceMatcher_FindType class]) {
    JreEnum(EduStanfordNlpLingTokensregexSequenceMatcher_FindType, FIND_NONOVERLAPPING) = new_EduStanfordNlpLingTokensregexSequenceMatcher_FindType_initWithNSString_withInt_(@"FIND_NONOVERLAPPING", 0);
    JreEnum(EduStanfordNlpLingTokensregexSequenceMatcher_FindType, FIND_ALL) = new_EduStanfordNlpLingTokensregexSequenceMatcher_FindType_initWithNSString_withInt_(@"FIND_ALL", 1);
    J2OBJC_SET_INITIALIZED(EduStanfordNlpLingTokensregexSequenceMatcher_FindType)
  }
}

@end

void EduStanfordNlpLingTokensregexSequenceMatcher_FindType_initWithNSString_withInt_(EduStanfordNlpLingTokensregexSequenceMatcher_FindType *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

EduStanfordNlpLingTokensregexSequenceMatcher_FindType *new_EduStanfordNlpLingTokensregexSequenceMatcher_FindType_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequenceMatcher_FindType, initWithNSString_withInt_, __name, __ordinal)
}

IOSObjectArray *EduStanfordNlpLingTokensregexSequenceMatcher_FindType_values() {
  EduStanfordNlpLingTokensregexSequenceMatcher_FindType_initialize();
  return [IOSObjectArray arrayWithObjects:EduStanfordNlpLingTokensregexSequenceMatcher_FindType_values_ count:2 type:EduStanfordNlpLingTokensregexSequenceMatcher_FindType_class_()];
}

EduStanfordNlpLingTokensregexSequenceMatcher_FindType *EduStanfordNlpLingTokensregexSequenceMatcher_FindType_valueOfWithNSString_(NSString *name) {
  EduStanfordNlpLingTokensregexSequenceMatcher_FindType_initialize();
  for (int i = 0; i < 2; i++) {
    EduStanfordNlpLingTokensregexSequenceMatcher_FindType *e = EduStanfordNlpLingTokensregexSequenceMatcher_FindType_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

EduStanfordNlpLingTokensregexSequenceMatcher_FindType *EduStanfordNlpLingTokensregexSequenceMatcher_FindType_fromOrdinal(NSUInteger ordinal) {
  EduStanfordNlpLingTokensregexSequenceMatcher_FindType_initialize();
  if (ordinal >= 2) {
    return nil;
  }
  return EduStanfordNlpLingTokensregexSequenceMatcher_FindType_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexSequenceMatcher_FindType)

@implementation EduStanfordNlpLingTokensregexSequenceMatcher_MatchReplacement

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(appendWithEduStanfordNlpLingTokensregexSequenceMatchResult:withJavaUtilList:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "append", "LEduStanfordNlpLingTokensregexSequenceMatchResult;LJavaUtilList;", "(Ledu/stanford/nlp/ling/tokensregex/SequenceMatchResult<TT;>;Ljava/util/List;)V", "LEduStanfordNlpLingTokensregexSequenceMatcher;", "<T:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexSequenceMatcher_MatchReplacement = { "MatchReplacement", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, NULL, 7, 0x609, 1, 0, 3, -1, -1, 4, -1 };
  return &_EduStanfordNlpLingTokensregexSequenceMatcher_MatchReplacement;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexSequenceMatcher_MatchReplacement)

@implementation EduStanfordNlpLingTokensregexSequenceMatcher_BasicMatchReplacement

- (instancetype)initWithNSObjectArray:(IOSObjectArray *)replacement {
  EduStanfordNlpLingTokensregexSequenceMatcher_BasicMatchReplacement_initWithNSObjectArray_(self, replacement);
  return self;
}

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)replacement {
  EduStanfordNlpLingTokensregexSequenceMatcher_BasicMatchReplacement_initWithJavaUtilList_(self, replacement);
  return self;
}

- (void)appendWithEduStanfordNlpLingTokensregexSequenceMatchResult:(id<EduStanfordNlpLingTokensregexSequenceMatchResult>)match
                                                  withJavaUtilList:(id<JavaUtilList>)list {
  [((id<JavaUtilList>) nil_chk(list)) addAllWithJavaUtilCollection:replacement_];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x81, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, 2, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSObjectArray:);
  methods[1].selector = @selector(initWithJavaUtilList:);
  methods[2].selector = @selector(appendWithEduStanfordNlpLingTokensregexSequenceMatchResult:withJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "replacement_", "LJavaUtilList;", .constantValue.asLong = 0, 0x0, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "[LNSObject;", "LJavaUtilList;", "(Ljava/util/List<TT;>;)V", "append", "LEduStanfordNlpLingTokensregexSequenceMatchResult;LJavaUtilList;", "(Ledu/stanford/nlp/ling/tokensregex/SequenceMatchResult<TT;>;Ljava/util/List;)V", "Ljava/util/List<TT;>;", "LEduStanfordNlpLingTokensregexSequenceMatcher;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Ledu/stanford/nlp/ling/tokensregex/SequenceMatcher$MatchReplacement<TT;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexSequenceMatcher_BasicMatchReplacement = { "BasicMatchReplacement", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, fields, 7, 0x9, 3, 1, 7, -1, -1, 8, -1 };
  return &_EduStanfordNlpLingTokensregexSequenceMatcher_BasicMatchReplacement;
}

@end

void EduStanfordNlpLingTokensregexSequenceMatcher_BasicMatchReplacement_initWithNSObjectArray_(EduStanfordNlpLingTokensregexSequenceMatcher_BasicMatchReplacement *self, IOSObjectArray *replacement) {
  NSObject_init(self);
  self->replacement_ = JavaUtilArrays_asListWithNSObjectArray_(replacement);
}

EduStanfordNlpLingTokensregexSequenceMatcher_BasicMatchReplacement *new_EduStanfordNlpLingTokensregexSequenceMatcher_BasicMatchReplacement_initWithNSObjectArray_(IOSObjectArray *replacement) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequenceMatcher_BasicMatchReplacement, initWithNSObjectArray_, replacement)
}

EduStanfordNlpLingTokensregexSequenceMatcher_BasicMatchReplacement *create_EduStanfordNlpLingTokensregexSequenceMatcher_BasicMatchReplacement_initWithNSObjectArray_(IOSObjectArray *replacement) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequenceMatcher_BasicMatchReplacement, initWithNSObjectArray_, replacement)
}

void EduStanfordNlpLingTokensregexSequenceMatcher_BasicMatchReplacement_initWithJavaUtilList_(EduStanfordNlpLingTokensregexSequenceMatcher_BasicMatchReplacement *self, id<JavaUtilList> replacement) {
  NSObject_init(self);
  self->replacement_ = replacement;
}

EduStanfordNlpLingTokensregexSequenceMatcher_BasicMatchReplacement *new_EduStanfordNlpLingTokensregexSequenceMatcher_BasicMatchReplacement_initWithJavaUtilList_(id<JavaUtilList> replacement) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequenceMatcher_BasicMatchReplacement, initWithJavaUtilList_, replacement)
}

EduStanfordNlpLingTokensregexSequenceMatcher_BasicMatchReplacement *create_EduStanfordNlpLingTokensregexSequenceMatcher_BasicMatchReplacement_initWithJavaUtilList_(id<JavaUtilList> replacement) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequenceMatcher_BasicMatchReplacement, initWithJavaUtilList_, replacement)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexSequenceMatcher_BasicMatchReplacement)

@implementation EduStanfordNlpLingTokensregexSequenceMatcher_NamedGroupMatchReplacement

- (instancetype)initWithNSString:(NSString *)groupName {
  EduStanfordNlpLingTokensregexSequenceMatcher_NamedGroupMatchReplacement_initWithNSString_(self, groupName);
  return self;
}

- (void)appendWithEduStanfordNlpLingTokensregexSequenceMatchResult:(id<EduStanfordNlpLingTokensregexSequenceMatchResult>)match
                                                  withJavaUtilList:(id<JavaUtilList>)list {
  [((id<JavaUtilList>) nil_chk(list)) addAllWithJavaUtilCollection:[((id<EduStanfordNlpLingTokensregexSequenceMatchResult>) nil_chk(match)) groupNodesWithNSString:groupName_]];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(appendWithEduStanfordNlpLingTokensregexSequenceMatchResult:withJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "groupName_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "append", "LEduStanfordNlpLingTokensregexSequenceMatchResult;LJavaUtilList;", "(Ledu/stanford/nlp/ling/tokensregex/SequenceMatchResult<TT;>;Ljava/util/List;)V", "LEduStanfordNlpLingTokensregexSequenceMatcher;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Ledu/stanford/nlp/ling/tokensregex/SequenceMatcher$MatchReplacement<TT;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexSequenceMatcher_NamedGroupMatchReplacement = { "NamedGroupMatchReplacement", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, fields, 7, 0x9, 2, 1, 4, -1, -1, 5, -1 };
  return &_EduStanfordNlpLingTokensregexSequenceMatcher_NamedGroupMatchReplacement;
}

@end

void EduStanfordNlpLingTokensregexSequenceMatcher_NamedGroupMatchReplacement_initWithNSString_(EduStanfordNlpLingTokensregexSequenceMatcher_NamedGroupMatchReplacement *self, NSString *groupName) {
  NSObject_init(self);
  self->groupName_ = groupName;
}

EduStanfordNlpLingTokensregexSequenceMatcher_NamedGroupMatchReplacement *new_EduStanfordNlpLingTokensregexSequenceMatcher_NamedGroupMatchReplacement_initWithNSString_(NSString *groupName) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequenceMatcher_NamedGroupMatchReplacement, initWithNSString_, groupName)
}

EduStanfordNlpLingTokensregexSequenceMatcher_NamedGroupMatchReplacement *create_EduStanfordNlpLingTokensregexSequenceMatcher_NamedGroupMatchReplacement_initWithNSString_(NSString *groupName) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequenceMatcher_NamedGroupMatchReplacement, initWithNSString_, groupName)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexSequenceMatcher_NamedGroupMatchReplacement)

@implementation EduStanfordNlpLingTokensregexSequenceMatcher_GroupMatchReplacement

- (instancetype)initWithInt:(jint)group {
  EduStanfordNlpLingTokensregexSequenceMatcher_GroupMatchReplacement_initWithInt_(self, group);
  return self;
}

- (void)appendWithEduStanfordNlpLingTokensregexSequenceMatchResult:(id<EduStanfordNlpLingTokensregexSequenceMatchResult>)match
                                                  withJavaUtilList:(id<JavaUtilList>)list {
  [((id<JavaUtilList>) nil_chk(list)) addAllWithJavaUtilCollection:[((id<EduStanfordNlpLingTokensregexSequenceMatchResult>) nil_chk(match)) groupNodesWithInt:group_]];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(appendWithEduStanfordNlpLingTokensregexSequenceMatchResult:withJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "group_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "append", "LEduStanfordNlpLingTokensregexSequenceMatchResult;LJavaUtilList;", "(Ledu/stanford/nlp/ling/tokensregex/SequenceMatchResult<TT;>;Ljava/util/List;)V", "LEduStanfordNlpLingTokensregexSequenceMatcher;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Ledu/stanford/nlp/ling/tokensregex/SequenceMatcher$MatchReplacement<TT;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexSequenceMatcher_GroupMatchReplacement = { "GroupMatchReplacement", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, fields, 7, 0x9, 2, 1, 4, -1, -1, 5, -1 };
  return &_EduStanfordNlpLingTokensregexSequenceMatcher_GroupMatchReplacement;
}

@end

void EduStanfordNlpLingTokensregexSequenceMatcher_GroupMatchReplacement_initWithInt_(EduStanfordNlpLingTokensregexSequenceMatcher_GroupMatchReplacement *self, jint group) {
  NSObject_init(self);
  self->group_ = group;
}

EduStanfordNlpLingTokensregexSequenceMatcher_GroupMatchReplacement *new_EduStanfordNlpLingTokensregexSequenceMatcher_GroupMatchReplacement_initWithInt_(jint group) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequenceMatcher_GroupMatchReplacement, initWithInt_, group)
}

EduStanfordNlpLingTokensregexSequenceMatcher_GroupMatchReplacement *create_EduStanfordNlpLingTokensregexSequenceMatcher_GroupMatchReplacement_initWithInt_(jint group) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequenceMatcher_GroupMatchReplacement, initWithInt_, group)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexSequenceMatcher_GroupMatchReplacement)

@implementation EduStanfordNlpLingTokensregexSequenceMatcher_BranchState

- (instancetype)initWithInt:(jint)bid {
  EduStanfordNlpLingTokensregexSequenceMatcher_BranchState_initWithInt_(self, bid);
  return self;
}

- (instancetype)initWithInt:(jint)bid
withEduStanfordNlpLingTokensregexSequenceMatcher_BranchState:(EduStanfordNlpLingTokensregexSequenceMatcher_BranchState *)parent {
  EduStanfordNlpLingTokensregexSequenceMatcher_BranchState_initWithInt_withEduStanfordNlpLingTokensregexSequenceMatcher_BranchState_(self, bid, parent);
  return self;
}

- (void)updateKeepBidsWithJavaUtilBitSet:(JavaUtilBitSet *)bids {
  EduStanfordNlpLingTokensregexSequenceMatcher_BranchState_updateKeepBidsWithJavaUtilBitSet_(self, bids);
}

- (void)addBidsToCollapseWithIntArray:(IOSIntArray *)bids {
  EduStanfordNlpLingTokensregexSequenceMatcher_BranchState_addBidsToCollapseWithIntArray_(self, bids);
}

- (void)addMatchedGroupsWithJavaUtilMap:(id<JavaUtilMap>)g {
  EduStanfordNlpLingTokensregexSequenceMatcher_BranchState_addMatchedGroupsWithJavaUtilMap_(self, g);
}

- (void)addMatchedResultsWithJavaUtilMap:(id<JavaUtilMap>)res {
  EduStanfordNlpLingTokensregexSequenceMatcher_BranchState_addMatchedResultsWithJavaUtilMap_(self, res);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 6, 7, -1, 8, -1, -1 },
    { NULL, "V", 0x2, 9, 7, -1, 10, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(initWithInt:withEduStanfordNlpLingTokensregexSequenceMatcher_BranchState:);
  methods[2].selector = @selector(updateKeepBidsWithJavaUtilBitSet:);
  methods[3].selector = @selector(addBidsToCollapseWithIntArray:);
  methods[4].selector = @selector(addMatchedGroupsWithJavaUtilMap:);
  methods[5].selector = @selector(addMatchedResultsWithJavaUtilMap:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "bid_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "parent_", "LEduStanfordNlpLingTokensregexSequenceMatcher_BranchState;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "matchedGroups_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x0, -1, -1, 11, -1 },
    { "matchedResults_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x0, -1, -1, 12, -1 },
    { "matchStateInfo_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x0, -1, -1, 13, -1 },
    { "bidsToCollapse_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x0, -1, -1, 14, -1 },
    { "collapsedBids_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x0, -1, -1, 14, -1 },
  };
  static const void *ptrTable[] = { "I", "ILEduStanfordNlpLingTokensregexSequenceMatcher_BranchState;", "updateKeepBids", "LJavaUtilBitSet;", "addBidsToCollapse", "[I", "addMatchedGroups", "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/Integer;Ledu/stanford/nlp/ling/tokensregex/BasicSequenceMatchResult$MatchedGroup;>;)V", "addMatchedResults", "(Ljava/util/Map<Ljava/lang/Integer;Ljava/lang/Object;>;)V", "Ljava/util/Map<Ljava/lang/Integer;Ledu/stanford/nlp/ling/tokensregex/BasicSequenceMatchResult$MatchedGroup;>;", "Ljava/util/Map<Ljava/lang/Integer;Ljava/lang/Object;>;", "Ljava/util/Map<Ledu/stanford/nlp/ling/tokensregex/SequencePattern$State;Ljava/lang/Object;>;", "Ljava/util/Set<Ljava/lang/Integer;>;", "LEduStanfordNlpLingTokensregexSequenceMatcher;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexSequenceMatcher_BranchState = { "BranchState", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, fields, 7, 0xa, 6, 7, 15, -1, -1, -1, -1 };
  return &_EduStanfordNlpLingTokensregexSequenceMatcher_BranchState;
}

@end

void EduStanfordNlpLingTokensregexSequenceMatcher_BranchState_initWithInt_(EduStanfordNlpLingTokensregexSequenceMatcher_BranchState *self, jint bid) {
  EduStanfordNlpLingTokensregexSequenceMatcher_BranchState_initWithInt_withEduStanfordNlpLingTokensregexSequenceMatcher_BranchState_(self, bid, nil);
}

EduStanfordNlpLingTokensregexSequenceMatcher_BranchState *new_EduStanfordNlpLingTokensregexSequenceMatcher_BranchState_initWithInt_(jint bid) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequenceMatcher_BranchState, initWithInt_, bid)
}

EduStanfordNlpLingTokensregexSequenceMatcher_BranchState *create_EduStanfordNlpLingTokensregexSequenceMatcher_BranchState_initWithInt_(jint bid) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequenceMatcher_BranchState, initWithInt_, bid)
}

void EduStanfordNlpLingTokensregexSequenceMatcher_BranchState_initWithInt_withEduStanfordNlpLingTokensregexSequenceMatcher_BranchState_(EduStanfordNlpLingTokensregexSequenceMatcher_BranchState *self, jint bid, EduStanfordNlpLingTokensregexSequenceMatcher_BranchState *parent) {
  NSObject_init(self);
  self->bid_ = bid;
  self->parent_ = parent;
  if (parent != nil) {
    if (parent->matchedGroups_ != nil) {
      self->matchedGroups_ = new_JavaUtilLinkedHashMap_initWithJavaUtilMap_(parent->matchedGroups_);
    }
    if (parent->matchedResults_ != nil) {
      self->matchedResults_ = new_JavaUtilLinkedHashMap_initWithJavaUtilMap_(parent->matchedResults_);
    }
    if (parent->matchStateInfo_ != nil) {
      self->matchStateInfo_ = new_JavaUtilLinkedHashMap_initWithJavaUtilMap_(parent->matchStateInfo_);
    }
    if (parent->bidsToCollapse_ != nil) {
      self->bidsToCollapse_ = new_EduStanfordNlpUtilArraySet_initWithInt_([parent->bidsToCollapse_ size]);
      [self->bidsToCollapse_ addAllWithJavaUtilCollection:parent->bidsToCollapse_];
    }
    if (parent->collapsedBids_ != nil) {
      self->collapsedBids_ = new_EduStanfordNlpUtilArraySet_initWithInt_([parent->collapsedBids_ size]);
      [self->collapsedBids_ addAllWithJavaUtilCollection:parent->collapsedBids_];
    }
  }
}

EduStanfordNlpLingTokensregexSequenceMatcher_BranchState *new_EduStanfordNlpLingTokensregexSequenceMatcher_BranchState_initWithInt_withEduStanfordNlpLingTokensregexSequenceMatcher_BranchState_(jint bid, EduStanfordNlpLingTokensregexSequenceMatcher_BranchState *parent) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequenceMatcher_BranchState, initWithInt_withEduStanfordNlpLingTokensregexSequenceMatcher_BranchState_, bid, parent)
}

EduStanfordNlpLingTokensregexSequenceMatcher_BranchState *create_EduStanfordNlpLingTokensregexSequenceMatcher_BranchState_initWithInt_withEduStanfordNlpLingTokensregexSequenceMatcher_BranchState_(jint bid, EduStanfordNlpLingTokensregexSequenceMatcher_BranchState *parent) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequenceMatcher_BranchState, initWithInt_withEduStanfordNlpLingTokensregexSequenceMatcher_BranchState_, bid, parent)
}

void EduStanfordNlpLingTokensregexSequenceMatcher_BranchState_updateKeepBidsWithJavaUtilBitSet_(EduStanfordNlpLingTokensregexSequenceMatcher_BranchState *self, JavaUtilBitSet *bids) {
  if (self->matchStateInfo_ != nil) {
    for (EduStanfordNlpLingTokensregexSequencePattern_State * __strong s in nil_chk([self->matchStateInfo_ keySet])) {
      if ([s isKindOfClass:[EduStanfordNlpLingTokensregexSequencePattern_ConjStartState class]]) {
        EduStanfordNlpLingTokensregexSequencePattern_ConjMatchStateInfo *info = (EduStanfordNlpLingTokensregexSequencePattern_ConjMatchStateInfo *) cast_chk([((id<JavaUtilMap>) nil_chk(self->matchStateInfo_)) getWithId:s], [EduStanfordNlpLingTokensregexSequencePattern_ConjMatchStateInfo class]);
        [((EduStanfordNlpLingTokensregexSequencePattern_ConjMatchStateInfo *) nil_chk(info)) updateKeepBidsWithJavaUtilBitSet:bids];
      }
    }
  }
}

void EduStanfordNlpLingTokensregexSequenceMatcher_BranchState_addBidsToCollapseWithIntArray_(EduStanfordNlpLingTokensregexSequenceMatcher_BranchState *self, IOSIntArray *bids) {
  if (self->bidsToCollapse_ == nil) {
    self->bidsToCollapse_ = new_EduStanfordNlpUtilArraySet_initWithInt_(((IOSIntArray *) nil_chk(bids))->size_);
  }
  {
    IOSIntArray *a__ = bids;
    jint const *b__ = ((IOSIntArray *) nil_chk(a__))->buffer_;
    jint const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jint b = *b__++;
      if (b != self->bid_) {
        [((id<JavaUtilSet>) nil_chk(self->bidsToCollapse_)) addWithId:JavaLangInteger_valueOfWithInt_(b)];
      }
    }
  }
}

void EduStanfordNlpLingTokensregexSequenceMatcher_BranchState_addMatchedGroupsWithJavaUtilMap_(EduStanfordNlpLingTokensregexSequenceMatcher_BranchState *self, id<JavaUtilMap> g) {
  for (JavaLangInteger * __strong k in nil_chk([((id<JavaUtilMap>) nil_chk(g)) keySet])) {
    if (![((id<JavaUtilMap>) nil_chk(self->matchedGroups_)) containsKeyWithId:k]) {
      (void) [((id<JavaUtilMap>) nil_chk(self->matchedGroups_)) putWithId:k withId:[g getWithId:k]];
    }
  }
}

void EduStanfordNlpLingTokensregexSequenceMatcher_BranchState_addMatchedResultsWithJavaUtilMap_(EduStanfordNlpLingTokensregexSequenceMatcher_BranchState *self, id<JavaUtilMap> res) {
  if (res != nil) {
    for (JavaLangInteger * __strong k in nil_chk([res keySet])) {
      if (![((id<JavaUtilMap>) nil_chk(self->matchedResults_)) containsKeyWithId:k]) {
        (void) [((id<JavaUtilMap>) nil_chk(self->matchedResults_)) putWithId:k withId:[res getWithId:k]];
      }
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexSequenceMatcher_BranchState)

@implementation EduStanfordNlpLingTokensregexSequenceMatcher_State

- (instancetype)initWithInt:(jint)bid
withEduStanfordNlpLingTokensregexSequencePattern_State:(EduStanfordNlpLingTokensregexSequencePattern_State *)tstate {
  EduStanfordNlpLingTokensregexSequenceMatcher_State_initWithInt_withEduStanfordNlpLingTokensregexSequencePattern_State_(self, bid, tstate);
  return self;
}

- (jboolean)isEqual:(id)o {
  if (self == o) {
    return true;
  }
  if (o == nil || [self getClass] != (id) [o getClass]) {
    return false;
  }
  EduStanfordNlpLingTokensregexSequenceMatcher_State *state = (EduStanfordNlpLingTokensregexSequenceMatcher_State *) cast_chk(o, [EduStanfordNlpLingTokensregexSequenceMatcher_State class]);
  if (bid_ != state->bid_) {
    return false;
  }
  if (tstate_ != nil ? ![tstate_ isEqual:state->tstate_] : state->tstate_ != nil) {
    return false;
  }
  return true;
}

- (NSUInteger)hash {
  jint result = bid_;
  result = 31 * result + (tstate_ != nil ? ((jint) [tstate_ hash]) : 0);
  return result;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:withEduStanfordNlpLingTokensregexSequencePattern_State:);
  methods[1].selector = @selector(isEqual:);
  methods[2].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "bid_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "tstate_", "LEduStanfordNlpLingTokensregexSequencePattern_State;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ILEduStanfordNlpLingTokensregexSequencePattern_State;", "equals", "LNSObject;", "hashCode", "LEduStanfordNlpLingTokensregexSequenceMatcher;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexSequenceMatcher_State = { "State", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, fields, 7, 0xa, 3, 2, 4, -1, -1, -1, -1 };
  return &_EduStanfordNlpLingTokensregexSequenceMatcher_State;
}

@end

void EduStanfordNlpLingTokensregexSequenceMatcher_State_initWithInt_withEduStanfordNlpLingTokensregexSequencePattern_State_(EduStanfordNlpLingTokensregexSequenceMatcher_State *self, jint bid, EduStanfordNlpLingTokensregexSequencePattern_State *tstate) {
  NSObject_init(self);
  self->bid_ = bid;
  self->tstate_ = tstate;
}

EduStanfordNlpLingTokensregexSequenceMatcher_State *new_EduStanfordNlpLingTokensregexSequenceMatcher_State_initWithInt_withEduStanfordNlpLingTokensregexSequencePattern_State_(jint bid, EduStanfordNlpLingTokensregexSequencePattern_State *tstate) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequenceMatcher_State, initWithInt_withEduStanfordNlpLingTokensregexSequencePattern_State_, bid, tstate)
}

EduStanfordNlpLingTokensregexSequenceMatcher_State *create_EduStanfordNlpLingTokensregexSequenceMatcher_State_initWithInt_withEduStanfordNlpLingTokensregexSequencePattern_State_(jint bid, EduStanfordNlpLingTokensregexSequencePattern_State *tstate) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequenceMatcher_State, initWithInt_withEduStanfordNlpLingTokensregexSequencePattern_State_, bid, tstate)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexSequenceMatcher_State)

@implementation EduStanfordNlpLingTokensregexSequenceMatcher_BranchStates

- (void)linkWithEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates:(EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *)s {
  EduStanfordNlpLingTokensregexSequenceMatcher_BranchStates_linkWithEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_(self, s);
}

- (void)unlinkWithEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates:(EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *)s {
  EduStanfordNlpLingTokensregexSequenceMatcher_BranchStates_unlinkWithEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_(self, s);
}

- (jint)getBidWithInt:(jint)parent
              withInt:(jint)child {
  return [((EduStanfordNlpUtilHashIndex *) nil_chk(bidIndex_)) indexOfWithId:new_EduStanfordNlpUtilPair_initWithId_withId_(JavaLangInteger_valueOfWithInt_(parent), JavaLangInteger_valueOfWithInt_(child))];
}

- (jint)newBidWithInt:(jint)parent
              withInt:(jint)child {
  return [((EduStanfordNlpUtilHashIndex *) nil_chk(bidIndex_)) addToIndexUnsafeWithId:new_EduStanfordNlpUtilPair_initWithId_withId_(JavaLangInteger_valueOfWithInt_(parent), JavaLangInteger_valueOfWithInt_(child))];
}

- (jint)size {
  return [((id<JavaUtilMap>) nil_chk(branchStates_)) size];
}

- (void)condense {
  EduStanfordNlpLingTokensregexSequenceMatcher_BranchStates_condense(self);
}

- (id<JavaUtilList>)getParentsWithInt:(jint)bid {
  return EduStanfordNlpLingTokensregexSequenceMatcher_BranchStates_getParentsWithInt_(self, bid);
}

- (EduStanfordNlpLingTokensregexSequenceMatcher_BranchState *)getBranchStateWithInt:(jint)bid {
  EduStanfordNlpLingTokensregexSequenceMatcher_BranchState *bs = [((id<JavaUtilMap>) nil_chk(branchStates_)) getWithId:JavaLangInteger_valueOfWithInt_(bid)];
  if (bs == nil) {
    EduStanfordNlpLingTokensregexSequenceMatcher_BranchState *pbs = nil;
    jint id_ = bid;
    while (pbs == nil && id_ >= 0) {
      EduStanfordNlpUtilPair *p = [((EduStanfordNlpUtilHashIndex *) nil_chk(bidIndex_)) getWithInt:id_];
      id_ = [((JavaLangInteger *) nil_chk(((EduStanfordNlpUtilPair *) nil_chk(p))->first_)) intValue];
      pbs = [((id<JavaUtilMap>) nil_chk(branchStates_)) getWithId:JavaLangInteger_valueOfWithInt_(id_)];
    }
    bs = pbs;
  }
  return bs;
}

- (EduStanfordNlpLingTokensregexSequenceMatcher_BranchState *)getBranchStateWithInt:(jint)bid
                                                                        withBoolean:(jboolean)add {
  EduStanfordNlpLingTokensregexSequenceMatcher_BranchState *bs = [self getBranchStateWithInt:bid];
  if (add) {
    if (bs == nil) {
      bs = new_EduStanfordNlpLingTokensregexSequenceMatcher_BranchState_initWithInt_(bid);
    }
    else if (bs->bid_ != bid) {
      bs = new_EduStanfordNlpLingTokensregexSequenceMatcher_BranchState_initWithInt_withEduStanfordNlpLingTokensregexSequenceMatcher_BranchState_(bid, bs);
    }
    (void) [((id<JavaUtilMap>) nil_chk(branchStates_)) putWithId:JavaLangInteger_valueOfWithInt_(bid) withId:bs];
  }
  return bs;
}

- (id<JavaUtilMap>)getMatchedGroupsWithInt:(jint)bid
                               withBoolean:(jboolean)add {
  EduStanfordNlpLingTokensregexSequenceMatcher_BranchState *bs = [self getBranchStateWithInt:bid withBoolean:add];
  if (bs == nil) {
    return nil;
  }
  if (add && bs->matchedGroups_ == nil) {
    bs->matchedGroups_ = new_JavaUtilLinkedHashMap_init();
  }
  return bs->matchedGroups_;
}

- (EduStanfordNlpLingTokensregexBasicSequenceMatchResult_MatchedGroup *)getMatchedGroupWithInt:(jint)bid
                                                                                       withInt:(jint)groupId {
  id<JavaUtilMap> map = [self getMatchedGroupsWithInt:bid withBoolean:false];
  if (map != nil) {
    return [map getWithId:JavaLangInteger_valueOfWithInt_(groupId)];
  }
  else {
    return nil;
  }
}

- (void)setGroupStartWithInt:(jint)bid
                     withInt:(jint)captureGroupId
                     withInt:(jint)curPosition {
  if (captureGroupId >= 0) {
    id<JavaUtilMap> matchedGroups = [self getMatchedGroupsWithInt:bid withBoolean:true];
    EduStanfordNlpLingTokensregexBasicSequenceMatchResult_MatchedGroup *mg = [((id<JavaUtilMap>) nil_chk(matchedGroups)) getWithId:JavaLangInteger_valueOfWithInt_(captureGroupId)];
    if (mg != nil) {
      [((JavaUtilLoggingLogger *) nil_chk(JreLoadStatic(EduStanfordNlpLingTokensregexSequenceMatcher, logger))) fineWithNSString:JreStrcat("$I$I$@", @"Setting matchBegin=", curPosition, @": Capture group ", captureGroupId, @" already exists: ", mg)];
    }
    (void) [matchedGroups putWithId:JavaLangInteger_valueOfWithInt_(captureGroupId) withId:new_EduStanfordNlpLingTokensregexBasicSequenceMatchResult_MatchedGroup_initWithInt_withInt_withId_(curPosition, -1, nil)];
  }
}

- (void)setGroupEndWithInt:(jint)bid
                   withInt:(jint)captureGroupId
                   withInt:(jint)curPosition
                    withId:(id)value {
  if (captureGroupId >= 0) {
    id<JavaUtilMap> matchedGroups = [self getMatchedGroupsWithInt:bid withBoolean:true];
    EduStanfordNlpLingTokensregexBasicSequenceMatchResult_MatchedGroup *mg = [((id<JavaUtilMap>) nil_chk(matchedGroups)) getWithId:JavaLangInteger_valueOfWithInt_(captureGroupId)];
    jint end = curPosition + 1;
    if (mg != nil) {
      if (mg->matchEnd_ == -1) {
        (void) [matchedGroups putWithId:JavaLangInteger_valueOfWithInt_(captureGroupId) withId:new_EduStanfordNlpLingTokensregexBasicSequenceMatchResult_MatchedGroup_initWithInt_withInt_withId_(mg->matchBegin_, end, value)];
      }
      else {
        if (mg->matchEnd_ != end) {
          [((JavaUtilLoggingLogger *) nil_chk(JreLoadStatic(EduStanfordNlpLingTokensregexSequenceMatcher, logger))) warningWithNSString:JreStrcat("$I$I$@", @"Cannot set matchEnd=", end, @": Capture group ", captureGroupId, @" already ended: ", mg)];
        }
      }
    }
    else {
      [((JavaUtilLoggingLogger *) nil_chk(JreLoadStatic(EduStanfordNlpLingTokensregexSequenceMatcher, logger))) warningWithNSString:JreStrcat("$I$I$", @"Cannot set matchEnd=", end, @": Capture group ", captureGroupId, @" is null")];
    }
  }
}

- (void)clearGroupStartWithInt:(jint)bid
                       withInt:(jint)captureGroupId {
  if (captureGroupId >= 0) {
    id<JavaUtilMap> matchedGroups = [self getMatchedGroupsWithInt:bid withBoolean:false];
    if (matchedGroups != nil) {
      (void) [matchedGroups removeWithId:JavaLangInteger_valueOfWithInt_(captureGroupId)];
    }
  }
}

- (id<JavaUtilMap>)getMatchedResultsWithInt:(jint)bid
                                withBoolean:(jboolean)add {
  EduStanfordNlpLingTokensregexSequenceMatcher_BranchState *bs = [self getBranchStateWithInt:bid withBoolean:add];
  if (bs == nil) {
    return nil;
  }
  if (add && bs->matchedResults_ == nil) {
    bs->matchedResults_ = new_JavaUtilLinkedHashMap_init();
  }
  return bs->matchedResults_;
}

- (id)getMatchedResultWithInt:(jint)bid
                      withInt:(jint)index {
  id<JavaUtilMap> map = [self getMatchedResultsWithInt:bid withBoolean:false];
  if (map != nil) {
    return [map getWithId:JavaLangInteger_valueOfWithInt_(index)];
  }
  else {
    return nil;
  }
}

- (void)setMatchedResultWithInt:(jint)bid
                        withInt:(jint)index
                         withId:(id)obj {
  if (index >= 0) {
    id<JavaUtilMap> matchedResults = [self getMatchedResultsWithInt:bid withBoolean:true];
    id oldObj = [((id<JavaUtilMap>) nil_chk(matchedResults)) getWithId:JavaLangInteger_valueOfWithInt_(index)];
    if (oldObj != nil) {
      [((JavaUtilLoggingLogger *) nil_chk(JreLoadStatic(EduStanfordNlpLingTokensregexSequenceMatcher, logger))) warningWithNSString:JreStrcat("$@$I$@", @"Setting matchedResult=", obj, @": index ", index, @" already exists: ", oldObj)];
    }
    (void) [matchedResults putWithId:JavaLangInteger_valueOfWithInt_(index) withId:obj];
  }
}

- (jint)getBranchIdWithInt:(jint)bid
                   withInt:(jint)nextBranchIndex
                   withInt:(jint)nextTotal {
  if (nextBranchIndex <= 0 || nextBranchIndex > nextTotal) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$I", @"Invalid nextBranchIndex=", nextBranchIndex, @", nextTotal=", nextTotal));
  }
  if (nextTotal == 1) {
    return bid;
  }
  else {
    EduStanfordNlpUtilPair *p = new_EduStanfordNlpUtilPair_initWithId_withId_(JavaLangInteger_valueOfWithInt_(bid), JavaLangInteger_valueOfWithInt_(nextBranchIndex));
    jint i = [((EduStanfordNlpUtilHashIndex *) nil_chk(bidIndex_)) indexOfWithId:p];
    if (i < 0) {
      for (jint j = 0; j < nextTotal; j++) {
        [((EduStanfordNlpUtilHashIndex *) nil_chk(bidIndex_)) addWithId:new_EduStanfordNlpUtilPair_initWithId_withId_(JavaLangInteger_valueOfWithInt_(bid), JavaLangInteger_valueOfWithInt_(j + 1))];
      }
      i = [((EduStanfordNlpUtilHashIndex *) nil_chk(bidIndex_)) indexOfWithId:p];
    }
    return i;
  }
}

- (id<JavaUtilMap>)getMatchStateInfoWithInt:(jint)bid
                                withBoolean:(jboolean)add {
  EduStanfordNlpLingTokensregexSequenceMatcher_BranchState *bs = [self getBranchStateWithInt:bid withBoolean:add];
  if (bs == nil) {
    return nil;
  }
  if (add && bs->matchStateInfo_ == nil) {
    bs->matchStateInfo_ = new_JavaUtilLinkedHashMap_init();
  }
  return bs->matchStateInfo_;
}

- (id)getMatchStateInfoWithInt:(jint)bid
withEduStanfordNlpLingTokensregexSequencePattern_State:(EduStanfordNlpLingTokensregexSequencePattern_State *)node {
  id<JavaUtilMap> matchStateInfo = [self getMatchStateInfoWithInt:bid withBoolean:false];
  return (matchStateInfo != nil) ? [((id<JavaUtilMap>) nil_chk(matchStateInfo)) getWithId:node] : nil;
}

- (void)removeMatchStateInfoWithInt:(jint)bid
withEduStanfordNlpLingTokensregexSequencePattern_State:(EduStanfordNlpLingTokensregexSequencePattern_State *)node {
  id obj = [self getMatchStateInfoWithInt:bid withEduStanfordNlpLingTokensregexSequencePattern_State:node];
  if (obj != nil) {
    id<JavaUtilMap> matchStateInfo = [self getMatchStateInfoWithInt:bid withBoolean:true];
    (void) [((id<JavaUtilMap>) nil_chk(matchStateInfo)) removeWithId:node];
  }
}

- (void)setMatchStateInfoWithInt:(jint)bid
withEduStanfordNlpLingTokensregexSequencePattern_State:(EduStanfordNlpLingTokensregexSequencePattern_State *)node
                          withId:(id)obj {
  id<JavaUtilMap> matchStateInfo = [self getMatchStateInfoWithInt:bid withBoolean:true];
  (void) [((id<JavaUtilMap>) nil_chk(matchStateInfo)) putWithId:node withId:obj];
}

- (void)startMatchedCountIncWithInt:(jint)bid
withEduStanfordNlpLingTokensregexSequencePattern_State:(EduStanfordNlpLingTokensregexSequencePattern_State *)node {
  [self startMatchedCountIncWithInt:bid withEduStanfordNlpLingTokensregexSequencePattern_State:node withInt:1 withInt:1];
}

- (void)startMatchedCountDecWithInt:(jint)bid
withEduStanfordNlpLingTokensregexSequencePattern_State:(EduStanfordNlpLingTokensregexSequencePattern_State *)node {
  [self startMatchedCountIncWithInt:bid withEduStanfordNlpLingTokensregexSequencePattern_State:node withInt:0 withInt:-1];
}

- (void)startMatchedCountIncWithInt:(jint)bid
withEduStanfordNlpLingTokensregexSequencePattern_State:(EduStanfordNlpLingTokensregexSequencePattern_State *)node
                            withInt:(jint)initialValue
                            withInt:(jint)delta {
  id<JavaUtilMap> matchStateCount = [self getMatchStateInfoWithInt:bid withBoolean:true];
  EduStanfordNlpUtilPair *p = (EduStanfordNlpUtilPair *) cast_chk([((id<JavaUtilMap>) nil_chk(matchStateCount)) getWithId:node], [EduStanfordNlpUtilPair class]);
  if (p == nil) {
    (void) [matchStateCount putWithId:node withId:new_EduStanfordNlpUtilPair_initWithId_withId_(JavaLangInteger_valueOfWithInt_(initialValue), JavaLangBoolean_valueOfWithBoolean_(false))];
  }
  else {
    (void) [matchStateCount putWithId:node withId:new_EduStanfordNlpUtilPair_initWithId_withId_(JavaLangInteger_valueOfWithInt_([((JavaLangInteger *) nil_chk([p first])) intValue] + delta), JavaLangBoolean_valueOfWithBoolean_(false))];
  }
}

- (jint)endMatchedCountIncWithInt:(jint)bid
withEduStanfordNlpLingTokensregexSequencePattern_State:(EduStanfordNlpLingTokensregexSequencePattern_State *)node {
  id<JavaUtilMap> matchStateCount = [self getMatchStateInfoWithInt:bid withBoolean:false];
  if (matchStateCount == nil) {
    return 0;
  }
  matchStateCount = [self getMatchStateInfoWithInt:bid withBoolean:true];
  EduStanfordNlpUtilPair *p = (EduStanfordNlpUtilPair *) cast_chk([((id<JavaUtilMap>) nil_chk(matchStateCount)) getWithId:node], [EduStanfordNlpUtilPair class]);
  if (p != nil) {
    jint v = [((JavaLangInteger *) nil_chk([p first])) intValue];
    (void) [matchStateCount putWithId:node withId:new_EduStanfordNlpUtilPair_initWithId_withId_(JavaLangInteger_valueOfWithInt_(v), JavaLangBoolean_valueOfWithBoolean_(true))];
    return v;
  }
  else {
    return 0;
  }
}

- (void)clearMatchedCountWithInt:(jint)bid
withEduStanfordNlpLingTokensregexSequencePattern_State:(EduStanfordNlpLingTokensregexSequencePattern_State *)node {
  [self removeMatchStateInfoWithInt:bid withEduStanfordNlpLingTokensregexSequencePattern_State:node];
}

- (void)setMatchedIntervalWithInt:(jint)bid
withEduStanfordNlpLingTokensregexSequencePattern_State:(EduStanfordNlpLingTokensregexSequencePattern_State *)node
withEduStanfordNlpUtilHasInterval:(id<EduStanfordNlpUtilHasInterval>)interval {
  id<JavaUtilMap> matchStateInfo = [self getMatchStateInfoWithInt:bid withBoolean:true];
  id<EduStanfordNlpUtilHasInterval> p = (id<EduStanfordNlpUtilHasInterval>) cast_check([((id<JavaUtilMap>) nil_chk(matchStateInfo)) getWithId:node], EduStanfordNlpUtilHasInterval_class_());
  if (p == nil) {
    (void) [matchStateInfo putWithId:node withId:interval];
  }
  else {
    [((JavaUtilLoggingLogger *) nil_chk(JreLoadStatic(EduStanfordNlpLingTokensregexSequenceMatcher, logger))) warningWithNSString:JreStrcat("$I", @"Interval already exists for bid=", bid)];
  }
}

- (id<EduStanfordNlpUtilHasInterval>)getMatchedIntervalWithInt:(jint)bid
        withEduStanfordNlpLingTokensregexSequencePattern_State:(EduStanfordNlpLingTokensregexSequencePattern_State *)node {
  id<JavaUtilMap> matchStateInfo = [self getMatchStateInfoWithInt:bid withBoolean:true];
  id<EduStanfordNlpUtilHasInterval> p = (id<EduStanfordNlpUtilHasInterval>) cast_check([((id<JavaUtilMap>) nil_chk(matchStateInfo)) getWithId:node], EduStanfordNlpUtilHasInterval_class_());
  return p;
}

- (void)addBidsToCollapseWithInt:(jint)bid
                    withIntArray:(IOSIntArray *)bids {
  EduStanfordNlpLingTokensregexSequenceMatcher_BranchState *bs = [self getBranchStateWithInt:bid withBoolean:true];
  EduStanfordNlpLingTokensregexSequenceMatcher_BranchState_addBidsToCollapseWithIntArray_(nil_chk(bs), bids);
}

- (void)mergeBranchStatesWithEduStanfordNlpLingTokensregexSequenceMatcher_BranchState:(EduStanfordNlpLingTokensregexSequenceMatcher_BranchState *)bs {
  EduStanfordNlpLingTokensregexSequenceMatcher_BranchStates_mergeBranchStatesWithEduStanfordNlpLingTokensregexSequenceMatcher_BranchState_(self, bs);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpLingTokensregexSequenceMatcher_BranchStates_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x2, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 2, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 5, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x2, 6, 7, -1, 8, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexSequenceMatcher_BranchState;", 0x4, 9, 7, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexSequenceMatcher_BranchState;", 0x4, 9, 10, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x4, 11, 10, -1, 12, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexBasicSequenceMatchResult_MatchedGroup;", 0x4, 13, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 14, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 18, 4, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x4, 19, 10, -1, 20, -1, -1 },
    { NULL, "LNSObject;", 0x4, 21, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 22, 23, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 24, 15, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x4, 25, 10, -1, 26, -1, -1 },
    { NULL, "LNSObject;", 0x4, 25, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 28, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 29, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 31, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 32, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 31, 33, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 34, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 35, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 36, 37, -1, 38, -1, -1 },
    { NULL, "LEduStanfordNlpUtilHasInterval;", 0x4, 39, 27, -1, 40, -1, -1 },
    { NULL, "V", 0x4, 41, 42, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 43, 44, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(linkWithEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates:);
  methods[1].selector = @selector(unlinkWithEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates:);
  methods[2].selector = @selector(getBidWithInt:withInt:);
  methods[3].selector = @selector(newBidWithInt:withInt:);
  methods[4].selector = @selector(size);
  methods[5].selector = @selector(condense);
  methods[6].selector = @selector(getParentsWithInt:);
  methods[7].selector = @selector(getBranchStateWithInt:);
  methods[8].selector = @selector(getBranchStateWithInt:withBoolean:);
  methods[9].selector = @selector(getMatchedGroupsWithInt:withBoolean:);
  methods[10].selector = @selector(getMatchedGroupWithInt:withInt:);
  methods[11].selector = @selector(setGroupStartWithInt:withInt:withInt:);
  methods[12].selector = @selector(setGroupEndWithInt:withInt:withInt:withId:);
  methods[13].selector = @selector(clearGroupStartWithInt:withInt:);
  methods[14].selector = @selector(getMatchedResultsWithInt:withBoolean:);
  methods[15].selector = @selector(getMatchedResultWithInt:withInt:);
  methods[16].selector = @selector(setMatchedResultWithInt:withInt:withId:);
  methods[17].selector = @selector(getBranchIdWithInt:withInt:withInt:);
  methods[18].selector = @selector(getMatchStateInfoWithInt:withBoolean:);
  methods[19].selector = @selector(getMatchStateInfoWithInt:withEduStanfordNlpLingTokensregexSequencePattern_State:);
  methods[20].selector = @selector(removeMatchStateInfoWithInt:withEduStanfordNlpLingTokensregexSequencePattern_State:);
  methods[21].selector = @selector(setMatchStateInfoWithInt:withEduStanfordNlpLingTokensregexSequencePattern_State:withId:);
  methods[22].selector = @selector(startMatchedCountIncWithInt:withEduStanfordNlpLingTokensregexSequencePattern_State:);
  methods[23].selector = @selector(startMatchedCountDecWithInt:withEduStanfordNlpLingTokensregexSequencePattern_State:);
  methods[24].selector = @selector(startMatchedCountIncWithInt:withEduStanfordNlpLingTokensregexSequencePattern_State:withInt:withInt:);
  methods[25].selector = @selector(endMatchedCountIncWithInt:withEduStanfordNlpLingTokensregexSequencePattern_State:);
  methods[26].selector = @selector(clearMatchedCountWithInt:withEduStanfordNlpLingTokensregexSequencePattern_State:);
  methods[27].selector = @selector(setMatchedIntervalWithInt:withEduStanfordNlpLingTokensregexSequencePattern_State:withEduStanfordNlpUtilHasInterval:);
  methods[28].selector = @selector(getMatchedIntervalWithInt:withEduStanfordNlpLingTokensregexSequencePattern_State:);
  methods[29].selector = @selector(addBidsToCollapseWithInt:withIntArray:);
  methods[30].selector = @selector(mergeBranchStatesWithEduStanfordNlpLingTokensregexSequenceMatcher_BranchState:);
  methods[31].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "bidIndex_", "LEduStanfordNlpUtilHashIndex;", .constantValue.asLong = 0, 0x0, -1, -1, 45, -1 },
    { "branchStates_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x0, -1, -1, 46, -1 },
    { "activeMatchedStates_", "LJavaUtilCollection;", .constantValue.asLong = 0, 0x0, -1, -1, 47, -1 },
  };
  static const void *ptrTable[] = { "link", "LEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates;", "unlink", "getBid", "II", "newBid", "getParents", "I", "(I)Ljava/util/List<Ljava/lang/Integer;>;", "getBranchState", "IZ", "getMatchedGroups", "(IZ)Ljava/util/Map<Ljava/lang/Integer;Ledu/stanford/nlp/ling/tokensregex/BasicSequenceMatchResult$MatchedGroup;>;", "getMatchedGroup", "setGroupStart", "III", "setGroupEnd", "IIILNSObject;", "clearGroupStart", "getMatchedResults", "(IZ)Ljava/util/Map<Ljava/lang/Integer;Ljava/lang/Object;>;", "getMatchedResult", "setMatchedResult", "IILNSObject;", "getBranchId", "getMatchStateInfo", "(IZ)Ljava/util/Map<Ledu/stanford/nlp/ling/tokensregex/SequencePattern$State;Ljava/lang/Object;>;", "ILEduStanfordNlpLingTokensregexSequencePattern_State;", "removeMatchStateInfo", "setMatchStateInfo", "ILEduStanfordNlpLingTokensregexSequencePattern_State;LNSObject;", "startMatchedCountInc", "startMatchedCountDec", "ILEduStanfordNlpLingTokensregexSequencePattern_State;II", "endMatchedCountInc", "clearMatchedCount", "setMatchedInterval", "ILEduStanfordNlpLingTokensregexSequencePattern_State;LEduStanfordNlpUtilHasInterval;", "(ILedu/stanford/nlp/ling/tokensregex/SequencePattern$State;Ledu/stanford/nlp/util/HasInterval<Ljava/lang/Integer;>;)V", "getMatchedInterval", "(ILedu/stanford/nlp/ling/tokensregex/SequencePattern$State;)Ledu/stanford/nlp/util/HasInterval<Ljava/lang/Integer;>;", "addBidsToCollapse", "I[I", "mergeBranchStates", "LEduStanfordNlpLingTokensregexSequenceMatcher_BranchState;", "Ledu/stanford/nlp/util/HashIndex<Ledu/stanford/nlp/util/Pair<Ljava/lang/Integer;Ljava/lang/Integer;>;>;", "Ljava/util/Map<Ljava/lang/Integer;Ledu/stanford/nlp/ling/tokensregex/SequenceMatcher$BranchState;>;", "Ljava/util/Collection<Ledu/stanford/nlp/ling/tokensregex/SequenceMatcher$MatchedStates;>;", "LEduStanfordNlpLingTokensregexSequenceMatcher;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexSequenceMatcher_BranchStates = { "BranchStates", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, fields, 7, 0x8, 32, 3, 48, -1, -1, -1, -1 };
  return &_EduStanfordNlpLingTokensregexSequenceMatcher_BranchStates;
}

@end

void EduStanfordNlpLingTokensregexSequenceMatcher_BranchStates_linkWithEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_(EduStanfordNlpLingTokensregexSequenceMatcher_BranchStates *self, EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *s) {
  [((id<JavaUtilCollection>) nil_chk(self->activeMatchedStates_)) addWithId:s];
}

void EduStanfordNlpLingTokensregexSequenceMatcher_BranchStates_unlinkWithEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_(EduStanfordNlpLingTokensregexSequenceMatcher_BranchStates *self, EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *s) {
  while ([((id<JavaUtilCollection>) nil_chk(self->activeMatchedStates_)) removeWithId:s]) {
  }
}

void EduStanfordNlpLingTokensregexSequenceMatcher_BranchStates_condense(EduStanfordNlpLingTokensregexSequenceMatcher_BranchStates *self) {
  JavaUtilBitSet *keepBidStates = new_JavaUtilBitSet_init();
  for (EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates * __strong ms in nil_chk(self->activeMatchedStates_)) {
    id<JavaUtilList> states = ((EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *) nil_chk(ms))->states_;
    if ([((JavaUtilLoggingLogger *) nil_chk(JreLoadStatic(EduStanfordNlpLingTokensregexSequenceMatcher, logger))) isLoggableWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINEST)]) {
      [JreLoadStatic(EduStanfordNlpLingTokensregexSequenceMatcher, logger) finestWithNSString:JreStrcat("$I$I$I", @"Condense matched state: curPosition=", ms->curPosition_, @", totalTokens=", [((id<JavaUtilList>) nil_chk(((EduStanfordNlpLingTokensregexSequenceMatcher *) nil_chk(ms->matcher_))->elements_)) size], @", nStates=", [((id<JavaUtilList>) nil_chk(states)) size])];
    }
    for (EduStanfordNlpLingTokensregexSequenceMatcher_State * __strong state in nil_chk(states)) {
      [keepBidStates setWithInt:((EduStanfordNlpLingTokensregexSequenceMatcher_State *) nil_chk(state))->bid_];
    }
  }
  for (EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates * __strong ms in self->activeMatchedStates_) {
    for (EduStanfordNlpLingTokensregexSequenceMatcher_State * __strong state in nil_chk(((EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *) nil_chk(ms))->states_)) {
      jint bid = ((EduStanfordNlpLingTokensregexSequenceMatcher_State *) nil_chk(state))->bid_;
      EduStanfordNlpLingTokensregexSequenceMatcher_BranchState *bs = [self getBranchStateWithInt:bid];
      if (bs != nil) {
        [keepBidStates setWithInt:bs->bid_];
        EduStanfordNlpLingTokensregexSequenceMatcher_BranchState_updateKeepBidsWithJavaUtilBitSet_(bs, keepBidStates);
        if (bs->bidsToCollapse_ != nil) {
          EduStanfordNlpLingTokensregexSequenceMatcher_BranchStates_mergeBranchStatesWithEduStanfordNlpLingTokensregexSequenceMatcher_BranchState_(self, bs);
        }
      }
    }
  }
  id<JavaUtilIterator> iter = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(self->branchStates_)) keySet])) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(iter)) hasNext]) {
    jint bid = [((JavaLangInteger *) nil_chk([iter next])) intValue];
    if (![keepBidStates getWithInt:bid]) {
      if ([((JavaUtilLoggingLogger *) nil_chk(JreLoadStatic(EduStanfordNlpLingTokensregexSequenceMatcher, logger))) isLoggableWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINEST)]) {
        [JreLoadStatic(EduStanfordNlpLingTokensregexSequenceMatcher, logger) finestWithNSString:JreStrcat("$I", @"Remove state for bid=", bid)];
      }
      [iter remove];
    }
  }
}

id<JavaUtilList> EduStanfordNlpLingTokensregexSequenceMatcher_BranchStates_getParentsWithInt_(EduStanfordNlpLingTokensregexSequenceMatcher_BranchStates *self, jint bid) {
  id<JavaUtilList> pids = new_JavaUtilArrayList_init();
  EduStanfordNlpUtilPair *p = [((EduStanfordNlpUtilHashIndex *) nil_chk(self->bidIndex_)) getWithInt:bid];
  while (p != nil && [((JavaLangInteger *) nil_chk([p first])) intValue] >= 0) {
    [pids addWithId:[p first]];
    p = [((EduStanfordNlpUtilHashIndex *) nil_chk(self->bidIndex_)) getWithInt:[((JavaLangInteger *) nil_chk([p first])) intValue]];
  }
  JavaUtilCollections_reverseWithJavaUtilList_(pids);
  return pids;
}

void EduStanfordNlpLingTokensregexSequenceMatcher_BranchStates_mergeBranchStatesWithEduStanfordNlpLingTokensregexSequenceMatcher_BranchState_(EduStanfordNlpLingTokensregexSequenceMatcher_BranchStates *self, EduStanfordNlpLingTokensregexSequenceMatcher_BranchState *bs) {
  if (((EduStanfordNlpLingTokensregexSequenceMatcher_BranchState *) nil_chk(bs))->bidsToCollapse_ != nil && [bs->bidsToCollapse_ size] > 0) {
    for (JavaLangInteger *boxed__ in bs->bidsToCollapse_) {
      jint cbid = [((JavaLangInteger *) nil_chk(boxed__)) intValue];
      if (cbid != bs->bid_) {
        EduStanfordNlpLingTokensregexSequenceMatcher_BranchState *cbs = [self getBranchStateWithInt:cbid];
        if (cbs != nil) {
          EduStanfordNlpLingTokensregexSequenceMatcher_BranchState_addMatchedGroupsWithJavaUtilMap_(bs, cbs->matchedGroups_);
          EduStanfordNlpLingTokensregexSequenceMatcher_BranchState_addMatchedResultsWithJavaUtilMap_(bs, cbs->matchedResults_);
        }
        else {
          [((JavaUtilLoggingLogger *) nil_chk(JreLoadStatic(EduStanfordNlpLingTokensregexSequenceMatcher, logger))) finestWithNSString:JreStrcat("$I", @"Unable to find state info for bid=", cbid)];
        }
      }
    }
    if (bs->collapsedBids_ == nil) {
      bs->collapsedBids_ = bs->bidsToCollapse_;
    }
    else {
      [bs->collapsedBids_ addAllWithJavaUtilCollection:bs->bidsToCollapse_];
    }
    bs->bidsToCollapse_ = nil;
  }
}

void EduStanfordNlpLingTokensregexSequenceMatcher_BranchStates_init(EduStanfordNlpLingTokensregexSequenceMatcher_BranchStates *self) {
  NSObject_init(self);
  self->bidIndex_ = new_EduStanfordNlpUtilHashIndex_initWithInt_(4);
  self->branchStates_ = new_JavaUtilHashMap_init();
  self->activeMatchedStates_ = new_JavaUtilArrayList_init();
}

EduStanfordNlpLingTokensregexSequenceMatcher_BranchStates *new_EduStanfordNlpLingTokensregexSequenceMatcher_BranchStates_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequenceMatcher_BranchStates, init)
}

EduStanfordNlpLingTokensregexSequenceMatcher_BranchStates *create_EduStanfordNlpLingTokensregexSequenceMatcher_BranchStates_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequenceMatcher_BranchStates, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexSequenceMatcher_BranchStates)

@implementation EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates

- (instancetype)initWithEduStanfordNlpLingTokensregexSequenceMatcher:(EduStanfordNlpLingTokensregexSequenceMatcher *)matcher
              withEduStanfordNlpLingTokensregexSequencePattern_State:(EduStanfordNlpLingTokensregexSequencePattern_State *)state {
  EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_initWithEduStanfordNlpLingTokensregexSequenceMatcher_withEduStanfordNlpLingTokensregexSequencePattern_State_(self, matcher, state);
  return self;
}

- (instancetype)initWithEduStanfordNlpLingTokensregexSequenceMatcher:(EduStanfordNlpLingTokensregexSequenceMatcher *)matcher
       withEduStanfordNlpLingTokensregexSequenceMatcher_BranchStates:(EduStanfordNlpLingTokensregexSequenceMatcher_BranchStates *)branchStates {
  EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_initWithEduStanfordNlpLingTokensregexSequenceMatcher_withEduStanfordNlpLingTokensregexSequenceMatcher_BranchStates_(self, matcher, branchStates);
  return self;
}

- (EduStanfordNlpLingTokensregexSequenceMatcher_BranchStates *)getBranchStates {
  return branchStates_;
}

- (EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *)splitWithInt:(jint)branchLimit {
  id<JavaUtilSet> curBidSet = new_JavaUtilHashSet_init();
  for (EduStanfordNlpLingTokensregexSequenceMatcher_State * __strong state in nil_chk(states_)) {
    [curBidSet addWithId:JavaLangInteger_valueOfWithInt_(((EduStanfordNlpLingTokensregexSequenceMatcher_State *) nil_chk(state))->bid_)];
  }
  id<JavaUtilList> bids = new_JavaUtilArrayList_initWithJavaUtilCollection_(curBidSet);
  JavaUtilCollections_sortWithJavaUtilList_withJavaUtilComparator_(bids, new_EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_$Lambda$1_initWithEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_(self));
  EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *newStates = new_EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_initWithEduStanfordNlpLingTokensregexSequenceMatcher_withEduStanfordNlpLingTokensregexSequenceMatcher_BranchStates_(matcher_, branchStates_);
  jint v = JavaLangMath_minWithInt_withInt_(branchLimit, ([bids size] + 1) / 2);
  id<JavaUtilSet> keepBidSet = new_JavaUtilHashSet_init();
  [keepBidSet addAllWithJavaUtilCollection:[bids subListWithInt:0 withInt:v]];
  EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_swapAndClear(self);
  for (EduStanfordNlpLingTokensregexSequenceMatcher_State * __strong s in nil_chk(oldStates_)) {
    if ([keepBidSet containsWithId:JavaLangInteger_valueOfWithInt_(((EduStanfordNlpLingTokensregexSequenceMatcher_State *) nil_chk(s))->bid_)]) {
      [((id<JavaUtilList>) nil_chk(states_)) addWithId:s];
    }
    else {
      [((id<JavaUtilList>) nil_chk(newStates->states_)) addWithId:s];
    }
  }
  newStates->curPosition_ = curPosition_;
  EduStanfordNlpLingTokensregexSequenceMatcher_BranchStates_condense(nil_chk(branchStates_));
  return newStates;
}

- (id<JavaUtilList>)elements {
  return ((EduStanfordNlpLingTokensregexSequenceMatcher *) nil_chk(matcher_))->elements_;
}

- (id)get {
  return [((EduStanfordNlpLingTokensregexSequenceMatcher *) nil_chk(matcher_)) getWithInt:curPosition_];
}

- (jint)size {
  return [((id<JavaUtilList>) nil_chk(states_)) size];
}

- (jint)branchSize {
  return [((EduStanfordNlpLingTokensregexSequenceMatcher_BranchStates *) nil_chk(branchStates_)) size];
}

- (void)swap {
  EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_swap(self);
}

- (void)swapAndClear {
  EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_swapAndClear(self);
}

- (jboolean)matchWithInt:(jint)position {
  return EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_matchWithInt_(self, position);
}

- (jint)compareMatchesWithInt:(jint)bid1
                      withInt:(jint)bid2 {
  if (bid1 == bid2) return 0;
  id<JavaUtilList> p1 = EduStanfordNlpLingTokensregexSequenceMatcher_BranchStates_getParentsWithInt_(nil_chk(branchStates_), bid1);
  [((id<JavaUtilList>) nil_chk(p1)) addWithId:JavaLangInteger_valueOfWithInt_(bid1)];
  id<JavaUtilList> p2 = EduStanfordNlpLingTokensregexSequenceMatcher_BranchStates_getParentsWithInt_(nil_chk(branchStates_), bid2);
  [((id<JavaUtilList>) nil_chk(p2)) addWithId:JavaLangInteger_valueOfWithInt_(bid2)];
  jint n = JavaLangMath_minWithInt_withInt_([p1 size], [p2 size]);
  for (jint i = 0; i < n; i++) {
    if ([((JavaLangInteger *) nil_chk([p1 getWithInt:i])) intValue] < [((JavaLangInteger *) nil_chk([p2 getWithInt:i])) intValue]) return -1;
    if ([((JavaLangInteger *) nil_chk([p1 getWithInt:i])) intValue] > [((JavaLangInteger *) nil_chk([p2 getWithInt:i])) intValue]) return 1;
  }
  if ([p1 size] < [p2 size]) return -1;
  if ([p1 size] > [p2 size]) return 1;
  return 0;
}

- (jint)getMatchIndex {
  return EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_getMatchIndex(self);
}

- (id<JavaUtilCollection>)getMatchIndices {
  return EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_getMatchIndices(self);
}

- (jint)selectMatchIndex {
  return EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_selectMatchIndex(self);
}

- (void)completeMatch {
  EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_completeMatch(self);
}

- (void)setMatchedGroupsWithInt:(jint)matchStateIndex {
  EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_setMatchedGroupsWithInt_(self, matchStateIndex);
}

- (jboolean)isAllMatch {
  return EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_isAllMatch(self);
}

- (jboolean)isMatch {
  return EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_isMatch(self);
}

- (void)addStatesWithInt:(jint)bid
  withJavaUtilCollection:(id<JavaUtilCollection>)newStates {
  jint i = 0;
  for (EduStanfordNlpLingTokensregexSequencePattern_State * __strong s in nil_chk(newStates)) {
    i++;
    jint id_ = [((EduStanfordNlpLingTokensregexSequenceMatcher_BranchStates *) nil_chk(branchStates_)) getBranchIdWithInt:bid withInt:i withInt:[newStates size]];
    [((id<JavaUtilList>) nil_chk(states_)) addWithId:new_EduStanfordNlpLingTokensregexSequenceMatcher_State_initWithInt_withEduStanfordNlpLingTokensregexSequencePattern_State_(id_, s)];
  }
}

- (void)addStateWithInt:(jint)bid
withEduStanfordNlpLingTokensregexSequencePattern_State:(EduStanfordNlpLingTokensregexSequencePattern_State *)state {
  [((id<JavaUtilList>) nil_chk(self->states_)) addWithId:new_EduStanfordNlpLingTokensregexSequenceMatcher_State_initWithInt_withEduStanfordNlpLingTokensregexSequencePattern_State_(bid, state)];
}

- (void)clean {
  EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_clean(self);
}

- (void)setGroupStartWithInt:(jint)bid
                     withInt:(jint)captureGroupId {
  [((EduStanfordNlpLingTokensregexSequenceMatcher_BranchStates *) nil_chk(branchStates_)) setGroupStartWithInt:bid withInt:captureGroupId withInt:curPosition_];
}

- (void)setGroupEndWithInt:(jint)bid
                   withInt:(jint)captureGroupId
                    withId:(id)value {
  [((EduStanfordNlpLingTokensregexSequenceMatcher_BranchStates *) nil_chk(branchStates_)) setGroupEndWithInt:bid withInt:captureGroupId withInt:curPosition_ withId:value];
}

- (void)setGroupEndWithInt:(jint)bid
                   withInt:(jint)captureGroupId
                   withInt:(jint)position
                    withId:(id)value {
  [((EduStanfordNlpLingTokensregexSequenceMatcher_BranchStates *) nil_chk(branchStates_)) setGroupEndWithInt:bid withInt:captureGroupId withInt:position withId:value];
}

- (void)clearGroupStartWithInt:(jint)bid
                       withInt:(jint)captureGroupId {
  [((EduStanfordNlpLingTokensregexSequenceMatcher_BranchStates *) nil_chk(branchStates_)) clearGroupStartWithInt:bid withInt:captureGroupId];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, 1, -1, -1 },
    { NULL, NULL, 0x2, -1, 2, -1, 3, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexSequenceMatcher_BranchStates;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates;", 0x4, 4, 5, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x4, -1, -1, -1, 6, -1, -1 },
    { NULL, "LNSObject;", 0x4, -1, -1, -1, 7, -1, -1 },
    { NULL, "I", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 8, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 9, 10, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x2, -1, -1, -1, 11, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 12, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 13, 14, -1, 15, -1, -1 },
    { NULL, "V", 0x4, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 18, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 19, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 19, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 22, 10, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpLingTokensregexSequenceMatcher:withEduStanfordNlpLingTokensregexSequencePattern_State:);
  methods[1].selector = @selector(initWithEduStanfordNlpLingTokensregexSequenceMatcher:withEduStanfordNlpLingTokensregexSequenceMatcher_BranchStates:);
  methods[2].selector = @selector(getBranchStates);
  methods[3].selector = @selector(splitWithInt:);
  methods[4].selector = @selector(elements);
  methods[5].selector = @selector(get);
  methods[6].selector = @selector(size);
  methods[7].selector = @selector(branchSize);
  methods[8].selector = @selector(swap);
  methods[9].selector = @selector(swapAndClear);
  methods[10].selector = @selector(matchWithInt:);
  methods[11].selector = @selector(compareMatchesWithInt:withInt:);
  methods[12].selector = @selector(getMatchIndex);
  methods[13].selector = @selector(getMatchIndices);
  methods[14].selector = @selector(selectMatchIndex);
  methods[15].selector = @selector(completeMatch);
  methods[16].selector = @selector(setMatchedGroupsWithInt:);
  methods[17].selector = @selector(isAllMatch);
  methods[18].selector = @selector(isMatch);
  methods[19].selector = @selector(addStatesWithInt:withJavaUtilCollection:);
  methods[20].selector = @selector(addStateWithInt:withEduStanfordNlpLingTokensregexSequencePattern_State:);
  methods[21].selector = @selector(clean);
  methods[22].selector = @selector(setGroupStartWithInt:withInt:);
  methods[23].selector = @selector(setGroupEndWithInt:withInt:withId:);
  methods[24].selector = @selector(setGroupEndWithInt:withInt:withInt:withId:);
  methods[25].selector = @selector(clearGroupStartWithInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "matcher_", "LEduStanfordNlpLingTokensregexSequenceMatcher;", .constantValue.asLong = 0, 0x10, -1, -1, 23, -1 },
    { "branchStates_", "LEduStanfordNlpLingTokensregexSequenceMatcher_BranchStates;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "oldStates_", "LJavaUtilList;", .constantValue.asLong = 0, 0x0, -1, -1, 24, -1 },
    { "states_", "LJavaUtilList;", .constantValue.asLong = 0, 0x0, -1, -1, 24, -1 },
    { "curPosition_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpLingTokensregexSequenceMatcher;LEduStanfordNlpLingTokensregexSequencePattern_State;", "(Ledu/stanford/nlp/ling/tokensregex/SequenceMatcher<TT;>;Ledu/stanford/nlp/ling/tokensregex/SequencePattern$State;)V", "LEduStanfordNlpLingTokensregexSequenceMatcher;LEduStanfordNlpLingTokensregexSequenceMatcher_BranchStates;", "(Ledu/stanford/nlp/ling/tokensregex/SequenceMatcher<TT;>;Ledu/stanford/nlp/ling/tokensregex/SequenceMatcher$BranchStates;)V", "split", "I", "()Ljava/util/List<+TT;>;", "()TT;", "match", "compareMatches", "II", "()Ljava/util/Collection<Ljava/lang/Integer;>;", "setMatchedGroups", "addStates", "ILJavaUtilCollection;", "(ILjava/util/Collection<Ledu/stanford/nlp/ling/tokensregex/SequencePattern$State;>;)V", "addState", "ILEduStanfordNlpLingTokensregexSequencePattern_State;", "setGroupStart", "setGroupEnd", "IILNSObject;", "IIILNSObject;", "clearGroupStart", "Ledu/stanford/nlp/ling/tokensregex/SequenceMatcher<TT;>;", "Ljava/util/List<Ledu/stanford/nlp/ling/tokensregex/SequenceMatcher$State;>;", "LEduStanfordNlpLingTokensregexSequenceMatcher;", "<T:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates = { "MatchedStates", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, fields, 7, 0x8, 26, 5, 25, -1, -1, 26, -1 };
  return &_EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates;
}

@end

void EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_initWithEduStanfordNlpLingTokensregexSequenceMatcher_withEduStanfordNlpLingTokensregexSequencePattern_State_(EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *self, EduStanfordNlpLingTokensregexSequenceMatcher *matcher, EduStanfordNlpLingTokensregexSequencePattern_State *state) {
  EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_initWithEduStanfordNlpLingTokensregexSequenceMatcher_withEduStanfordNlpLingTokensregexSequenceMatcher_BranchStates_(self, matcher, new_EduStanfordNlpLingTokensregexSequenceMatcher_BranchStates_init());
  jint bid = [((EduStanfordNlpLingTokensregexSequenceMatcher_BranchStates *) nil_chk(self->branchStates_)) newBidWithInt:-1 withInt:0];
  [((id<JavaUtilList>) nil_chk(self->states_)) addWithId:new_EduStanfordNlpLingTokensregexSequenceMatcher_State_initWithInt_withEduStanfordNlpLingTokensregexSequencePattern_State_(bid, state)];
}

EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *new_EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_initWithEduStanfordNlpLingTokensregexSequenceMatcher_withEduStanfordNlpLingTokensregexSequencePattern_State_(EduStanfordNlpLingTokensregexSequenceMatcher *matcher, EduStanfordNlpLingTokensregexSequencePattern_State *state) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates, initWithEduStanfordNlpLingTokensregexSequenceMatcher_withEduStanfordNlpLingTokensregexSequencePattern_State_, matcher, state)
}

EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *create_EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_initWithEduStanfordNlpLingTokensregexSequenceMatcher_withEduStanfordNlpLingTokensregexSequencePattern_State_(EduStanfordNlpLingTokensregexSequenceMatcher *matcher, EduStanfordNlpLingTokensregexSequencePattern_State *state) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates, initWithEduStanfordNlpLingTokensregexSequenceMatcher_withEduStanfordNlpLingTokensregexSequencePattern_State_, matcher, state)
}

void EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_initWithEduStanfordNlpLingTokensregexSequenceMatcher_withEduStanfordNlpLingTokensregexSequenceMatcher_BranchStates_(EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *self, EduStanfordNlpLingTokensregexSequenceMatcher *matcher, EduStanfordNlpLingTokensregexSequenceMatcher_BranchStates *branchStates) {
  NSObject_init(self);
  self->curPosition_ = -1;
  self->matcher_ = matcher;
  self->states_ = new_JavaUtilArrayList_init();
  self->oldStates_ = new_JavaUtilArrayList_init();
  self->branchStates_ = branchStates;
  EduStanfordNlpLingTokensregexSequenceMatcher_BranchStates_linkWithEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_(nil_chk(branchStates), self);
}

EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *new_EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_initWithEduStanfordNlpLingTokensregexSequenceMatcher_withEduStanfordNlpLingTokensregexSequenceMatcher_BranchStates_(EduStanfordNlpLingTokensregexSequenceMatcher *matcher, EduStanfordNlpLingTokensregexSequenceMatcher_BranchStates *branchStates) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates, initWithEduStanfordNlpLingTokensregexSequenceMatcher_withEduStanfordNlpLingTokensregexSequenceMatcher_BranchStates_, matcher, branchStates)
}

EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *create_EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_initWithEduStanfordNlpLingTokensregexSequenceMatcher_withEduStanfordNlpLingTokensregexSequenceMatcher_BranchStates_(EduStanfordNlpLingTokensregexSequenceMatcher *matcher, EduStanfordNlpLingTokensregexSequenceMatcher_BranchStates *branchStates) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates, initWithEduStanfordNlpLingTokensregexSequenceMatcher_withEduStanfordNlpLingTokensregexSequenceMatcher_BranchStates_, matcher, branchStates)
}

void EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_swap(EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *self) {
  id<JavaUtilList> tmpStates = self->oldStates_;
  self->oldStates_ = self->states_;
  self->states_ = tmpStates;
}

void EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_swapAndClear(EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *self) {
  EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_swap(self);
  [((id<JavaUtilList>) nil_chk(self->states_)) clear];
}

jboolean EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_matchWithInt_(EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *self, jint position) {
  self->curPosition_ = position;
  jboolean matched = false;
  EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_swapAndClear(self);
  for (EduStanfordNlpLingTokensregexSequenceMatcher_State * __strong state in nil_chk(self->oldStates_)) {
    if ([((EduStanfordNlpLingTokensregexSequencePattern_State *) nil_chk(((EduStanfordNlpLingTokensregexSequenceMatcher_State *) nil_chk(state))->tstate_)) matchWithInt:state->bid_ withEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates:self]) {
      matched = true;
    }
  }
  jboolean done = false;
  while (!done) {
    EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_swapAndClear(self);
    jboolean matched0 = false;
    for (EduStanfordNlpLingTokensregexSequenceMatcher_State * __strong state in nil_chk(self->oldStates_)) {
      if ([((EduStanfordNlpLingTokensregexSequencePattern_State *) nil_chk(((EduStanfordNlpLingTokensregexSequenceMatcher_State *) nil_chk(state))->tstate_)) match0WithInt:state->bid_ withEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates:self]) {
        matched0 = true;
      }
    }
    done = !matched0;
  }
  EduStanfordNlpLingTokensregexSequenceMatcher_BranchStates_condense(nil_chk(self->branchStates_));
  return matched;
}

jint EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_getMatchIndex(EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *self) {
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(self->states_)) size]; i++) {
    EduStanfordNlpLingTokensregexSequenceMatcher_State *state = [((id<JavaUtilList>) nil_chk(self->states_)) getWithInt:i];
    if ([((EduStanfordNlpLingTokensregexSequencePattern_State *) nil_chk(((EduStanfordNlpLingTokensregexSequenceMatcher_State *) nil_chk(state))->tstate_)) isEqual:JreLoadStatic(EduStanfordNlpLingTokensregexSequencePattern, MATCH_STATE)]) {
      return i;
    }
  }
  return -1;
}

id<JavaUtilCollection> EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_getMatchIndices(EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *self) {
  JavaUtilHashSet *allMatchIndices = new_JavaUtilLinkedHashSet_init();
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(self->states_)) size]; i++) {
    EduStanfordNlpLingTokensregexSequenceMatcher_State *state = [((id<JavaUtilList>) nil_chk(self->states_)) getWithInt:i];
    if ([((EduStanfordNlpLingTokensregexSequencePattern_State *) nil_chk(((EduStanfordNlpLingTokensregexSequenceMatcher_State *) nil_chk(state))->tstate_)) isEqual:JreLoadStatic(EduStanfordNlpLingTokensregexSequencePattern, MATCH_STATE)]) {
      [allMatchIndices addWithId:JavaLangInteger_valueOfWithInt_(i)];
    }
  }
  return allMatchIndices;
}

jint EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_selectMatchIndex(EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *self) {
  jint best = -1;
  jint bestbid = -1;
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(self->states_)) size]; i++) {
    EduStanfordNlpLingTokensregexSequenceMatcher_State *state = [((id<JavaUtilList>) nil_chk(self->states_)) getWithInt:i];
    if ([((EduStanfordNlpLingTokensregexSequencePattern_State *) nil_chk(((EduStanfordNlpLingTokensregexSequenceMatcher_State *) nil_chk(state))->tstate_)) isEqual:JreLoadStatic(EduStanfordNlpLingTokensregexSequencePattern, MATCH_STATE)]) {
      if (best < 0) {
        best = i;
        bestbid = state->bid_;
      }
      else {
        jint bid = state->bid_;
        if ([self compareMatchesWithInt:bestbid withInt:bid] > 0) {
          bestbid = bid;
          best = i;
        }
      }
    }
  }
  return best;
}

void EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_completeMatch(EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *self) {
  jint matchStateIndex = EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_selectMatchIndex(self);
  EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_setMatchedGroupsWithInt_(self, matchStateIndex);
}

void EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_setMatchedGroupsWithInt_(EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *self, jint matchStateIndex) {
  EduStanfordNlpLingTokensregexSequenceMatcher_clearMatched(nil_chk(self->matcher_));
  if (matchStateIndex >= 0) {
    EduStanfordNlpLingTokensregexSequenceMatcher_State *state = [((id<JavaUtilList>) nil_chk(self->states_)) getWithInt:matchStateIndex];
    jint bid = ((EduStanfordNlpLingTokensregexSequenceMatcher_State *) nil_chk(state))->bid_;
    EduStanfordNlpLingTokensregexSequenceMatcher_BranchState *bs = [((EduStanfordNlpLingTokensregexSequenceMatcher_BranchStates *) nil_chk(self->branchStates_)) getBranchStateWithInt:bid];
    if (bs != nil) {
      EduStanfordNlpLingTokensregexSequenceMatcher_BranchStates_mergeBranchStatesWithEduStanfordNlpLingTokensregexSequenceMatcher_BranchState_(nil_chk(self->branchStates_), bs);
      id<JavaUtilMap> matchedGroups = bs->matchedGroups_;
      if (matchedGroups != nil) {
        for (JavaLangInteger *boxed__ in nil_chk([matchedGroups keySet])) {
          jint group = [((JavaLangInteger *) nil_chk(boxed__)) intValue];
          (void) IOSObjectArray_Set(nil_chk(self->matcher_->matchedGroups_), group, [matchedGroups getWithId:JavaLangInteger_valueOfWithInt_(group)]);
        }
      }
      id<JavaUtilMap> matchedResults = bs->matchedResults_;
      if (matchedResults != nil) {
        if (self->matcher_->matchedResults_ == nil) {
          self->matcher_->matchedResults_ = [IOSObjectArray newArrayWithLength:[((id<JavaUtilList>) nil_chk([self->matcher_ elements])) size] type:NSObject_class_()];
        }
        for (JavaLangInteger *boxed__ in nil_chk([matchedResults keySet])) {
          jint index = [((JavaLangInteger *) nil_chk(boxed__)) intValue];
          (void) IOSObjectArray_Set(nil_chk(self->matcher_->matchedResults_), index, [matchedResults getWithId:JavaLangInteger_valueOfWithInt_(index)]);
        }
      }
    }
  }
}

jboolean EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_isAllMatch(EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *self) {
  jboolean allMatch = true;
  if ([((id<JavaUtilList>) nil_chk(self->states_)) size] > 0) {
    for (EduStanfordNlpLingTokensregexSequenceMatcher_State * __strong state in nil_chk(self->states_)) {
      if (![((EduStanfordNlpLingTokensregexSequencePattern_State *) nil_chk(((EduStanfordNlpLingTokensregexSequenceMatcher_State *) nil_chk(state))->tstate_)) isEqual:JreLoadStatic(EduStanfordNlpLingTokensregexSequencePattern, MATCH_STATE)]) {
        allMatch = false;
        break;
      }
    }
  }
  else {
    allMatch = false;
  }
  return allMatch;
}

jboolean EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_isMatch(EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *self) {
  jint matchStateIndex = EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_getMatchIndex(self);
  return (matchStateIndex >= 0);
}

void EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_clean(EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *self) {
  EduStanfordNlpLingTokensregexSequenceMatcher_BranchStates_unlinkWithEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_(nil_chk(self->branchStates_), self);
  self->branchStates_ = nil;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates)

@implementation EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_$Lambda$1

- (jint)compareWithId:(JavaLangInteger *)o1
               withId:(JavaLangInteger *)o2 {
  jint res = [this$0_ compareMatchesWithInt:[((JavaLangInteger *) nil_chk(o1)) intValue] withInt:[((JavaLangInteger *) nil_chk(o2)) intValue]];
  return res;
}

- (id<JavaUtilComparator>)reversed {
  return JavaUtilComparator_reversed(self);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilComparator:(id<JavaUtilComparator>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilComparator_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0
                                             withJavaUtilComparator:(id<JavaUtilComparator>)arg1 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_withJavaUtilComparator_(self, arg0, arg1);
}

- (id<JavaUtilComparator>)thenComparingDoubleWithJavaUtilFunctionToDoubleFunction:(id<JavaUtilFunctionToDoubleFunction>)arg0 {
  return JavaUtilComparator_thenComparingDoubleWithJavaUtilFunctionToDoubleFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingIntWithJavaUtilFunctionToIntFunction:(id<JavaUtilFunctionToIntFunction>)arg0 {
  return JavaUtilComparator_thenComparingIntWithJavaUtilFunctionToIntFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingLongWithJavaUtilFunctionToLongFunction:(id<JavaUtilFunctionToLongFunction>)arg0 {
  return JavaUtilComparator_thenComparingLongWithJavaUtilFunctionToLongFunction_(self, arg0);
}

@end

void EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_$Lambda$1_initWithEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_(EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_$Lambda$1 *self, EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
}

EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_$Lambda$1 *new_EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_$Lambda$1_initWithEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_(EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *outer$) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_$Lambda$1, initWithEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_, outer$)
}

EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_$Lambda$1 *create_EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_$Lambda$1_initWithEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_(EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates *outer$) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_$Lambda$1, initWithEduStanfordNlpLingTokensregexSequenceMatcher_MatchedStates_, outer$)
}

@implementation EduStanfordNlpLingTokensregexSequenceMatcher_$1

- (id<EduStanfordNlpLingTokensregexSequenceMatchResult>)getNext {
  return EduStanfordNlpLingTokensregexSequenceMatcher_$1_getNext(self);
}

- (jboolean)hasNext {
  if (next_ == nil) {
    next_ = EduStanfordNlpLingTokensregexSequenceMatcher_$1_getNext(self);
    return (next_ != nil);
  }
  else {
    return true;
  }
}

- (id<EduStanfordNlpLingTokensregexSequenceMatchResult>)next {
  if (![self hasNext]) {
    @throw new_JavaUtilNoSuchElementException_init();
  }
  id<EduStanfordNlpLingTokensregexSequenceMatchResult> res = next_;
  next_ = nil;
  return res;
}

- (void)remove {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (instancetype)initWithEduStanfordNlpLingTokensregexSequenceMatcher:(EduStanfordNlpLingTokensregexSequenceMatcher *)outer$ {
  EduStanfordNlpLingTokensregexSequenceMatcher_$1_initWithEduStanfordNlpLingTokensregexSequenceMatcher_(self, outer$);
  return self;
}

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaUtilIterator_forEachRemainingWithJavaUtilFunctionConsumer_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LEduStanfordNlpLingTokensregexSequenceMatchResult;", 0x2, -1, -1, -1, 0, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexSequenceMatchResult;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(getNext);
  methods[1].selector = @selector(hasNext);
  methods[2].selector = @selector(next);
  methods[3].selector = @selector(remove);
  methods[4].selector = @selector(initWithEduStanfordNlpLingTokensregexSequenceMatcher:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LEduStanfordNlpLingTokensregexSequenceMatcher;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "next_", "LEduStanfordNlpLingTokensregexSequenceMatchResult;", .constantValue.asLong = 0, 0x0, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "()Ledu/stanford/nlp/ling/tokensregex/SequenceMatchResult<TT;>;", "LEduStanfordNlpLingTokensregexSequenceMatcher;", "Ledu/stanford/nlp/ling/tokensregex/SequenceMatchResult<TT;>;", "findAllNonOverlapping", "Ljava/lang/Object;Ljava/util/Iterator<Ledu/stanford/nlp/ling/tokensregex/SequenceMatchResult<TT;>;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexSequenceMatcher_$1 = { "", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, fields, 7, 0x8008, 5, 2, 1, -1, 3, 4, -1 };
  return &_EduStanfordNlpLingTokensregexSequenceMatcher_$1;
}

@end

id<EduStanfordNlpLingTokensregexSequenceMatchResult> EduStanfordNlpLingTokensregexSequenceMatcher_$1_getNext(EduStanfordNlpLingTokensregexSequenceMatcher_$1 *self) {
  jboolean found = [self->this$0_ find];
  if (found) {
    return [self->this$0_ toBasicSequenceMatchResult];
  }
  else {
    return nil;
  }
}

void EduStanfordNlpLingTokensregexSequenceMatcher_$1_initWithEduStanfordNlpLingTokensregexSequenceMatcher_(EduStanfordNlpLingTokensregexSequenceMatcher_$1 *self, EduStanfordNlpLingTokensregexSequenceMatcher *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
}

EduStanfordNlpLingTokensregexSequenceMatcher_$1 *new_EduStanfordNlpLingTokensregexSequenceMatcher_$1_initWithEduStanfordNlpLingTokensregexSequenceMatcher_(EduStanfordNlpLingTokensregexSequenceMatcher *outer$) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequenceMatcher_$1, initWithEduStanfordNlpLingTokensregexSequenceMatcher_, outer$)
}

EduStanfordNlpLingTokensregexSequenceMatcher_$1 *create_EduStanfordNlpLingTokensregexSequenceMatcher_$1_initWithEduStanfordNlpLingTokensregexSequenceMatcher_(EduStanfordNlpLingTokensregexSequenceMatcher *outer$) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequenceMatcher_$1, initWithEduStanfordNlpLingTokensregexSequenceMatcher_, outer$)
}
