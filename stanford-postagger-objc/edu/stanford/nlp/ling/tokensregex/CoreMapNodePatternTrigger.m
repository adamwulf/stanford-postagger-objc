//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/ling/tokensregex/CoreMapNodePatternTrigger.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/ling/CoreAnnotations.h"
#include "edu/stanford/nlp/ling/tokensregex/ComplexNodePattern.h"
#include "edu/stanford/nlp/ling/tokensregex/CoreMapNodePattern.h"
#include "edu/stanford/nlp/ling/tokensregex/CoreMapNodePatternTrigger.h"
#include "edu/stanford/nlp/ling/tokensregex/NodePattern.h"
#include "edu/stanford/nlp/ling/tokensregex/SequencePattern.h"
#include "edu/stanford/nlp/util/CoreMap.h"
#include "edu/stanford/nlp/util/Pair.h"
#include "edu/stanford/nlp/util/TwoDimensionalCollectionValuedMap.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/Comparator.h"
#include "java/util/LinkedHashSet.h"
#include "java/util/List.h"
#include "java/util/Optional.h"
#include "java/util/Set.h"
#include "java/util/function/Function.h"
#include "java/util/function/ToDoubleFunction.h"
#include "java/util/function/ToIntFunction.h"
#include "java/util/function/ToLongFunction.h"
#include "java/util/stream/Stream.h"

inline id<JavaUtilComparator> EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_get_STRING_TRIGGER_CANDIDATE_COMPARATOR();
static id<JavaUtilComparator> EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_STRING_TRIGGER_CANDIDATE_COMPARATOR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger, STRING_TRIGGER_CANDIDATE_COMPARATOR, id<JavaUtilComparator>)

@interface EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_StringTriggerCandidate : NSObject {
 @public
  IOSClass *key_;
  NSString *value_;
  jboolean ignoreCase_;
  jint keyLevel_;
  jint effectiveValueLength_;
}

- (instancetype)initWithIOSClass:(IOSClass *)key
                    withNSString:(NSString *)value
                     withBoolean:(jboolean)ignoreCase;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_StringTriggerCandidate)

J2OBJC_FIELD_SETTER(EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_StringTriggerCandidate, key_, IOSClass *)
J2OBJC_FIELD_SETTER(EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_StringTriggerCandidate, value_, NSString *)

__attribute__((unused)) static void EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_StringTriggerCandidate_initWithIOSClass_withNSString_withBoolean_(EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_StringTriggerCandidate *self, IOSClass *key, NSString *value, jboolean ignoreCase);

__attribute__((unused)) static EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_StringTriggerCandidate *new_EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_StringTriggerCandidate_initWithIOSClass_withNSString_withBoolean_(IOSClass *key, NSString *value, jboolean ignoreCase) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_StringTriggerCandidate *create_EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_StringTriggerCandidate_initWithIOSClass_withNSString_withBoolean_(IOSClass *key, NSString *value, jboolean ignoreCase);

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_StringTriggerCandidate)

@interface EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_$Lambda$1 : NSObject < JavaUtilFunctionFunction >

- (id)applyWithId:(EduStanfordNlpLingTokensregexNodePattern *)inArg;

@end

J2OBJC_STATIC_INIT(EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_$Lambda$1)

inline EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_$Lambda$1 *EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_$Lambda$1_get_instance();
static EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_$Lambda$1 *EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_$Lambda$1_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_$Lambda$1, instance, EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_$Lambda$1 *)

__attribute__((unused)) static void EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_$Lambda$1_init(EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_$Lambda$1 *self);

__attribute__((unused)) static EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_$Lambda$1 *new_EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_$Lambda$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_$Lambda$1 *create_EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_$Lambda$1_init();

@interface EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_$1 : NSObject < JavaUtilComparator >

- (jint)compareWithId:(EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_StringTriggerCandidate *)o1
               withId:(EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_StringTriggerCandidate *)o2;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_$1)

__attribute__((unused)) static void EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_$1_init(EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_$1 *self);

__attribute__((unused)) static EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_$1 *new_EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_$1 *create_EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_$1_init();

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger)

@implementation EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger

- (instancetype)initWithEduStanfordNlpLingTokensregexSequencePatternArray:(IOSObjectArray *)patterns {
  EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_initWithEduStanfordNlpLingTokensregexSequencePatternArray_(self, patterns);
  return self;
}

- (instancetype)initWithJavaUtilCollection:(id<JavaUtilCollection>)patterns {
  EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_initWithJavaUtilCollection_(self, patterns);
  return self;
}

- (id<JavaUtilCollection>)applyWithId:(id<EduStanfordNlpUtilCoreMap>)inArg {
  id<JavaUtilSet> triggeredPatterns = new_JavaUtilLinkedHashSet_init();
  [triggeredPatterns addAllWithJavaUtilCollection:alwaysTriggered_];
  for (IOSClass * __strong key in nil_chk([((EduStanfordNlpUtilTwoDimensionalCollectionValuedMap *) nil_chk(annotationTriggers_)) firstKeySet])) {
    id value = [((id<EduStanfordNlpUtilCoreMap>) nil_chk(inArg)) getWithIOSClass:key];
    if (value != nil) {
      id<JavaUtilCollection> triggered = [((EduStanfordNlpUtilTwoDimensionalCollectionValuedMap *) nil_chk(annotationTriggers_)) getWithId:key withId:value];
      if (triggered != nil) {
        [triggeredPatterns addAllWithJavaUtilCollection:triggered];
      }
    }
  }
  for (IOSClass * __strong key in nil_chk([((EduStanfordNlpUtilTwoDimensionalCollectionValuedMap *) nil_chk(lowercaseStringTriggers_)) firstKeySet])) {
    id value = [((id<EduStanfordNlpUtilCoreMap>) nil_chk(inArg)) getWithIOSClass:key];
    if (value != nil && [value isKindOfClass:[NSString class]]) {
      id<JavaUtilCollection> triggered = [((EduStanfordNlpUtilTwoDimensionalCollectionValuedMap *) nil_chk(lowercaseStringTriggers_)) getWithId:key withId:[((NSString *) cast_chk(value, [NSString class])) lowercaseString]];
      if (triggered != nil) {
        [triggeredPatterns addAllWithJavaUtilCollection:triggered];
      }
    }
  }
  return triggeredPatterns;
}

- (id<JavaUtilFunctionFunction>)andThenWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_andThenWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilFunctionFunction>)composeWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_composeWithJavaUtilFunctionFunction_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x81, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, 2, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, 3, 4, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpLingTokensregexSequencePatternArray:);
  methods[1].selector = @selector(initWithJavaUtilCollection:);
  methods[2].selector = @selector(applyWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "patterns_", "LJavaUtilCollection;", .constantValue.asLong = 0, 0x0, -1, -1, 6, -1 },
    { "alwaysTriggered_", "LJavaUtilCollection;", .constantValue.asLong = 0, 0x0, -1, -1, 7, -1 },
    { "annotationTriggers_", "LEduStanfordNlpUtilTwoDimensionalCollectionValuedMap;", .constantValue.asLong = 0, 0x0, -1, -1, 8, -1 },
    { "lowercaseStringTriggers_", "LEduStanfordNlpUtilTwoDimensionalCollectionValuedMap;", .constantValue.asLong = 0, 0x0, -1, -1, 9, -1 },
    { "STRING_TRIGGER_CANDIDATE_COMPARATOR", "LJavaUtilComparator;", .constantValue.asLong = 0, 0x1a, -1, 10, 11, -1 },
  };
  static const void *ptrTable[] = { "[LEduStanfordNlpLingTokensregexSequencePattern;", "LJavaUtilCollection;", "(Ljava/util/Collection<+Ledu/stanford/nlp/ling/tokensregex/SequencePattern<Ledu/stanford/nlp/util/CoreMap;>;>;)V", "apply", "LEduStanfordNlpUtilCoreMap;", "(Ledu/stanford/nlp/util/CoreMap;)Ljava/util/Collection<Ledu/stanford/nlp/ling/tokensregex/SequencePattern<Ledu/stanford/nlp/util/CoreMap;>;>;", "Ljava/util/Collection<+Ledu/stanford/nlp/ling/tokensregex/SequencePattern<Ledu/stanford/nlp/util/CoreMap;>;>;", "Ljava/util/Collection<Ledu/stanford/nlp/ling/tokensregex/SequencePattern<Ledu/stanford/nlp/util/CoreMap;>;>;", "Ledu/stanford/nlp/util/TwoDimensionalCollectionValuedMap<Ljava/lang/Class;Ljava/lang/Object;Ledu/stanford/nlp/ling/tokensregex/SequencePattern<Ledu/stanford/nlp/util/CoreMap;>;>;", "Ledu/stanford/nlp/util/TwoDimensionalCollectionValuedMap<Ljava/lang/Class;Ljava/lang/String;Ledu/stanford/nlp/ling/tokensregex/SequencePattern<Ledu/stanford/nlp/util/CoreMap;>;>;", &EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_STRING_TRIGGER_CANDIDATE_COMPARATOR, "Ljava/util/Comparator<Ledu/stanford/nlp/ling/tokensregex/CoreMapNodePatternTrigger$StringTriggerCandidate;>;", "LEduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_StringTriggerCandidate;", "Ljava/lang/Object;Ledu/stanford/nlp/ling/tokensregex/MultiPatternMatcher$NodePatternTrigger<Ledu/stanford/nlp/util/CoreMap;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger = { "CoreMapNodePatternTrigger", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, fields, 7, 0x1, 3, 5, -1, 12, -1, 13, -1 };
  return &_EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger;
}

+ (void)initialize {
  if (self == [EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger class]) {
    EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_STRING_TRIGGER_CANDIDATE_COMPARATOR = new_EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_$1_init();
    J2OBJC_SET_INITIALIZED(EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger)
  }
}

@end

void EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_initWithEduStanfordNlpLingTokensregexSequencePatternArray_(EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger *self, IOSObjectArray *patterns) {
  EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_initWithJavaUtilCollection_(self, JavaUtilArrays_asListWithNSObjectArray_(patterns));
}

EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger *new_EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_initWithEduStanfordNlpLingTokensregexSequencePatternArray_(IOSObjectArray *patterns) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger, initWithEduStanfordNlpLingTokensregexSequencePatternArray_, patterns)
}

EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger *create_EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_initWithEduStanfordNlpLingTokensregexSequencePatternArray_(IOSObjectArray *patterns) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger, initWithEduStanfordNlpLingTokensregexSequencePatternArray_, patterns)
}

void EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_initWithJavaUtilCollection_(EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger *self, id<JavaUtilCollection> patterns) {
  NSObject_init(self);
  self->alwaysTriggered_ = new_JavaUtilLinkedHashSet_init();
  self->annotationTriggers_ = new_EduStanfordNlpUtilTwoDimensionalCollectionValuedMap_init();
  self->lowercaseStringTriggers_ = new_EduStanfordNlpUtilTwoDimensionalCollectionValuedMap_init();
  self->patterns_ = patterns;
  id<JavaUtilFunctionFunction> stringTriggerFilter = JreLoadStatic(EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_$Lambda$1, instance);
  for (EduStanfordNlpLingTokensregexSequencePattern * __strong pattern in nil_chk(patterns)) {
    id<JavaUtilCollection> triggerCandidates = [((EduStanfordNlpLingTokensregexSequencePattern *) nil_chk(pattern)) findNodePatternsWithJavaUtilFunctionFunction:stringTriggerFilter withBoolean:false withBoolean:true];
    EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_StringTriggerCandidate *trigger = [((JavaUtilOptional *) nil_chk([((id<JavaUtilStreamStream>) nil_chk([((id<JavaUtilCollection>) nil_chk(triggerCandidates)) stream])) maxWithJavaUtilComparator:EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_STRING_TRIGGER_CANDIDATE_COMPARATOR])) orElseWithId:nil];
    if (![triggerCandidates isEmpty]) {
      if (((EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_StringTriggerCandidate *) nil_chk(trigger))->ignoreCase_) {
        [((EduStanfordNlpUtilTwoDimensionalCollectionValuedMap *) nil_chk(self->lowercaseStringTriggers_)) addWithId:trigger->key_ withId:[((NSString *) nil_chk(trigger->value_)) lowercaseString] withId:pattern];
      }
      else {
        [((EduStanfordNlpUtilTwoDimensionalCollectionValuedMap *) nil_chk(self->annotationTriggers_)) addWithId:trigger->key_ withId:trigger->value_ withId:pattern];
      }
    }
    else {
      [((id<JavaUtilCollection>) nil_chk(self->alwaysTriggered_)) addWithId:pattern];
    }
  }
}

EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger *new_EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_initWithJavaUtilCollection_(id<JavaUtilCollection> patterns) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger, initWithJavaUtilCollection_, patterns)
}

EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger *create_EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_initWithJavaUtilCollection_(id<JavaUtilCollection> patterns) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger, initWithJavaUtilCollection_, patterns)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger)

@implementation EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_StringTriggerCandidate

- (instancetype)initWithIOSClass:(IOSClass *)key
                    withNSString:(NSString *)value
                     withBoolean:(jboolean)ignoreCase {
  EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_StringTriggerCandidate_initWithIOSClass_withNSString_withBoolean_(self, key, value, ignoreCase);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIOSClass:withNSString:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "key_", "LIOSClass;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "value_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "ignoreCase_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "keyLevel_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "effectiveValueLength_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIOSClass;LNSString;Z", "LEduStanfordNlpLingTokensregexCoreMapNodePatternTrigger;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_StringTriggerCandidate = { "StringTriggerCandidate", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, fields, 7, 0xa, 1, 5, 1, -1, -1, -1, -1 };
  return &_EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_StringTriggerCandidate;
}

@end

void EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_StringTriggerCandidate_initWithIOSClass_withNSString_withBoolean_(EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_StringTriggerCandidate *self, IOSClass *key, NSString *value, jboolean ignoreCase) {
  NSObject_init(self);
  self->key_ = key;
  self->value_ = value;
  self->ignoreCase_ = ignoreCase;
  self->keyLevel_ = ([EduStanfordNlpLingCoreAnnotations_TextAnnotation_class_() isEqual:key] || [EduStanfordNlpLingCoreAnnotations_LemmaAnnotation_class_() isEqual:key]) ? 1 : 0;
  self->effectiveValueLength_ = ([@"-LRB-" isEqual:value] || [@"-RRB-" isEqual:value]) ? 1 : ((jint) [((NSString *) nil_chk(value)) length]);
}

EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_StringTriggerCandidate *new_EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_StringTriggerCandidate_initWithIOSClass_withNSString_withBoolean_(IOSClass *key, NSString *value, jboolean ignoreCase) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_StringTriggerCandidate, initWithIOSClass_withNSString_withBoolean_, key, value, ignoreCase)
}

EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_StringTriggerCandidate *create_EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_StringTriggerCandidate_initWithIOSClass_withNSString_withBoolean_(IOSClass *key, NSString *value, jboolean ignoreCase) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_StringTriggerCandidate, initWithIOSClass_withNSString_withBoolean_, key, value, ignoreCase)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_StringTriggerCandidate)

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_$Lambda$1)

@implementation EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_$Lambda$1

- (id)applyWithId:(EduStanfordNlpLingTokensregexNodePattern *)inArg {
  if ([inArg isKindOfClass:[EduStanfordNlpLingTokensregexCoreMapNodePattern class]]) {
    EduStanfordNlpLingTokensregexCoreMapNodePattern *p = (EduStanfordNlpLingTokensregexCoreMapNodePattern *) cast_chk(inArg, [EduStanfordNlpLingTokensregexCoreMapNodePattern class]);
    for (EduStanfordNlpUtilPair * __strong v in nil_chk([((EduStanfordNlpLingTokensregexCoreMapNodePattern *) nil_chk(p)) getAnnotationPatterns])) {
      if ([((EduStanfordNlpUtilPair *) nil_chk(v))->second_ isKindOfClass:[EduStanfordNlpLingTokensregexComplexNodePattern_StringAnnotationPattern class]]) {
        return new_EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_StringTriggerCandidate_initWithIOSClass_withNSString_withBoolean_(v->first_, ((EduStanfordNlpLingTokensregexComplexNodePattern_StringAnnotationPattern *) nil_chk(((EduStanfordNlpLingTokensregexComplexNodePattern_StringAnnotationPattern *) cast_chk(v->second_, [EduStanfordNlpLingTokensregexComplexNodePattern_StringAnnotationPattern class]))))->target_, [((EduStanfordNlpLingTokensregexComplexNodePattern_StringAnnotationPattern *) nil_chk(((EduStanfordNlpLingTokensregexComplexNodePattern_StringAnnotationPattern *) cast_chk(v->second_, [EduStanfordNlpLingTokensregexComplexNodePattern_StringAnnotationPattern class])))) ignoreCase]);
      }
    }
  }
  return nil;
}

- (id<JavaUtilFunctionFunction>)andThenWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_andThenWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilFunctionFunction>)composeWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_composeWithJavaUtilFunctionFunction_(self, arg0);
}

+ (void)initialize {
  if (self == [EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_$Lambda$1 class]) {
    EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_$Lambda$1_instance = new_EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_$Lambda$1_init();
    J2OBJC_SET_INITIALIZED(EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_$Lambda$1)
  }
}

@end

void EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_$Lambda$1_init(EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_$Lambda$1 *self) {
  NSObject_init(self);
}

EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_$Lambda$1 *new_EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_$Lambda$1_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_$Lambda$1, init)
}

EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_$Lambda$1 *create_EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_$Lambda$1_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_$Lambda$1, init)
}

@implementation EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_$1

- (jint)compareWithId:(EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_StringTriggerCandidate *)o1
               withId:(EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_StringTriggerCandidate *)o2 {
  if (((EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_StringTriggerCandidate *) nil_chk(o1))->keyLevel_ != ((EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_StringTriggerCandidate *) nil_chk(o2))->keyLevel_) {
    return (o1->keyLevel_ < o2->keyLevel_) ? -1 : 1;
  }
  else {
    jint v1 = o1->effectiveValueLength_;
    jint v2 = o2->effectiveValueLength_;
    if (v1 != v2) return (v1 < v2) ? -1 : 1;
    else return 0;
  }
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilComparator>)reversed {
  return JavaUtilComparator_reversed(self);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilComparator:(id<JavaUtilComparator>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilComparator_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0
                                             withJavaUtilComparator:(id<JavaUtilComparator>)arg1 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_withJavaUtilComparator_(self, arg0, arg1);
}

- (id<JavaUtilComparator>)thenComparingDoubleWithJavaUtilFunctionToDoubleFunction:(id<JavaUtilFunctionToDoubleFunction>)arg0 {
  return JavaUtilComparator_thenComparingDoubleWithJavaUtilFunctionToDoubleFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingIntWithJavaUtilFunctionToIntFunction:(id<JavaUtilFunctionToIntFunction>)arg0 {
  return JavaUtilComparator_thenComparingIntWithJavaUtilFunctionToIntFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingLongWithJavaUtilFunctionToLongFunction:(id<JavaUtilFunctionToLongFunction>)arg0 {
  return JavaUtilComparator_thenComparingLongWithJavaUtilFunctionToLongFunction_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "I", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(compareWithId:withId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "compare", "LEduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_StringTriggerCandidate;LEduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_StringTriggerCandidate;", "LEduStanfordNlpLingTokensregexCoreMapNodePatternTrigger;", "Ljava/lang/Object;Ljava/util/Comparator<Ledu/stanford/nlp/ling/tokensregex/CoreMapNodePatternTrigger$StringTriggerCandidate;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_$1 = { "", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, -1, 3, -1 };
  return &_EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_$1;
}

@end

void EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_$1_init(EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_$1 *self) {
  NSObject_init(self);
}

EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_$1 *new_EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_$1_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_$1, init)
}

EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_$1 *create_EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_$1_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexCoreMapNodePatternTrigger_$1, init)
}
