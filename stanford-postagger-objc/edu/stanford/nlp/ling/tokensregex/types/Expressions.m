//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/ling/tokensregex/types/Expressions.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/ling/tokensregex/Env.h"
#include "edu/stanford/nlp/ling/tokensregex/EnvLookup.h"
#include "edu/stanford/nlp/ling/tokensregex/SequenceMatchResult.h"
#include "edu/stanford/nlp/ling/tokensregex/types/Expression.h"
#include "edu/stanford/nlp/ling/tokensregex/types/Expressions.h"
#include "edu/stanford/nlp/ling/tokensregex/types/Tags.h"
#include "edu/stanford/nlp/ling/tokensregex/types/Value.h"
#include "edu/stanford/nlp/ling/tokensregex/types/ValueFunction.h"
#include "edu/stanford/nlp/ling/tokensregex/types/ValueFunctions.h"
#include "edu/stanford/nlp/util/CoreMap.h"
#include "edu/stanford/nlp/util/MetaClass.h"
#include "edu/stanford/nlp/util/Pair.h"
#include "edu/stanford/nlp/util/StringUtils.h"
#include "java/io/PrintStream.h"
#include "java/lang/Boolean.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalAccessException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/InstantiationException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/NoSuchFieldException.h"
#include "java/lang/NoSuchMethodException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/lang/reflect/Constructor.h"
#include "java/lang/reflect/Field.h"
#include "java/lang/reflect/InvocationTargetException.h"
#include "java/lang/reflect/Method.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/regex/MatchResult.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"

#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface EduStanfordNlpLingTokensregexTypesExpressions ()

- (instancetype)init;

+ (jboolean)isArgTypesCompatibleWithIOSClassArray:(IOSObjectArray *)paramTypes
                                withIOSClassArray:(IOSObjectArray *)targetParamTypes;

@end

inline JavaUtilRegexPattern *EduStanfordNlpLingTokensregexTypesExpressions_get_DIGITS_PATTERN();
static JavaUtilRegexPattern *EduStanfordNlpLingTokensregexTypesExpressions_DIGITS_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpLingTokensregexTypesExpressions, DIGITS_PATTERN, JavaUtilRegexPattern *)

__attribute__((unused)) static void EduStanfordNlpLingTokensregexTypesExpressions_init(EduStanfordNlpLingTokensregexTypesExpressions *self);

__attribute__((unused)) static EduStanfordNlpLingTokensregexTypesExpressions *new_EduStanfordNlpLingTokensregexTypesExpressions_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpLingTokensregexTypesExpressions *create_EduStanfordNlpLingTokensregexTypesExpressions_init();

__attribute__((unused)) static jboolean EduStanfordNlpLingTokensregexTypesExpressions_isArgTypesCompatibleWithIOSClassArray_withIOSClassArray_(IOSObjectArray *paramTypes, IOSObjectArray *targetParamTypes);

inline jlong EduStanfordNlpLingTokensregexTypesExpressions_TypedExpression_get_serialVersionUID();
#define EduStanfordNlpLingTokensregexTypesExpressions_TypedExpression_serialVersionUID 2LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpLingTokensregexTypesExpressions_TypedExpression, serialVersionUID, jlong)

@interface EduStanfordNlpLingTokensregexTypesExpressions_CompositeValue ()

- (jboolean)checkValue;

+ (id)toCompatibleObjectWithJavaLangReflectField:(JavaLangReflectField *)f
                                          withId:(id)value;

+ (id<EduStanfordNlpLingTokensregexTypesValue>)attemptTypeConversionWithEduStanfordNlpLingTokensregexTypesExpressions_CompositeValue:(EduStanfordNlpLingTokensregexTypesExpressions_CompositeValue *)cv
                                                                                                withEduStanfordNlpLingTokensregexEnv:(EduStanfordNlpLingTokensregexEnv *)env
                                                                                                                   withNSObjectArray:(IOSObjectArray *)args;

- (EduStanfordNlpLingTokensregexTypesExpressions_CompositeValue *)evaluateNoTypeConversionWithEduStanfordNlpLingTokensregexEnv:(EduStanfordNlpLingTokensregexEnv *)env
                                                                                                             withNSObjectArray:(IOSObjectArray *)args;

@end

__attribute__((unused)) static jboolean EduStanfordNlpLingTokensregexTypesExpressions_CompositeValue_checkValue(EduStanfordNlpLingTokensregexTypesExpressions_CompositeValue *self);

__attribute__((unused)) static id EduStanfordNlpLingTokensregexTypesExpressions_CompositeValue_toCompatibleObjectWithJavaLangReflectField_withId_(JavaLangReflectField *f, id value);

__attribute__((unused)) static id<EduStanfordNlpLingTokensregexTypesValue> EduStanfordNlpLingTokensregexTypesExpressions_CompositeValue_attemptTypeConversionWithEduStanfordNlpLingTokensregexTypesExpressions_CompositeValue_withEduStanfordNlpLingTokensregexEnv_withNSObjectArray_(EduStanfordNlpLingTokensregexTypesExpressions_CompositeValue *cv, EduStanfordNlpLingTokensregexEnv *env, IOSObjectArray *args);

__attribute__((unused)) static EduStanfordNlpLingTokensregexTypesExpressions_CompositeValue *EduStanfordNlpLingTokensregexTypesExpressions_CompositeValue_evaluateNoTypeConversionWithEduStanfordNlpLingTokensregexEnv_withNSObjectArray_(EduStanfordNlpLingTokensregexTypesExpressions_CompositeValue *self, EduStanfordNlpLingTokensregexEnv *env, IOSObjectArray *args);

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpLingTokensregexTypesExpressions)

NSString *EduStanfordNlpLingTokensregexTypesExpressions_TYPE_VAR = @"VAR";
NSString *EduStanfordNlpLingTokensregexTypesExpressions_TYPE_FUNCTION = @"FUNCTION";
NSString *EduStanfordNlpLingTokensregexTypesExpressions_TYPE_REGEX = @"REGEX";
NSString *EduStanfordNlpLingTokensregexTypesExpressions_TYPE_STRING_REGEX = @"STRING_REGEX";
NSString *EduStanfordNlpLingTokensregexTypesExpressions_TYPE_TOKEN_REGEX = @"TOKEN_REGEX";
NSString *EduStanfordNlpLingTokensregexTypesExpressions_TYPE_REGEXMATCHVAR = @"REGEXMATCHVAR";
NSString *EduStanfordNlpLingTokensregexTypesExpressions_TYPE_STRING = @"STRING";
NSString *EduStanfordNlpLingTokensregexTypesExpressions_TYPE_NUMBER = @"NUMBER";
NSString *EduStanfordNlpLingTokensregexTypesExpressions_TYPE_COMPOSITE = @"COMPOSITE";
NSString *EduStanfordNlpLingTokensregexTypesExpressions_TYPE_LIST = @"LIST";
NSString *EduStanfordNlpLingTokensregexTypesExpressions_TYPE_SET = @"SET";
NSString *EduStanfordNlpLingTokensregexTypesExpressions_TYPE_ANNOTATION_KEY = @"ANNOKEY";
NSString *EduStanfordNlpLingTokensregexTypesExpressions_TYPE_CLASS = @"CLASS";
NSString *EduStanfordNlpLingTokensregexTypesExpressions_TYPE_TOKENS = @"TOKENS";
NSString *EduStanfordNlpLingTokensregexTypesExpressions_TYPE_BOOLEAN = @"BOOLEAN";
NSString *EduStanfordNlpLingTokensregexTypesExpressions_VAR_SELF = @"_";
id<EduStanfordNlpLingTokensregexTypesValue> EduStanfordNlpLingTokensregexTypesExpressions_TRUE;
id<EduStanfordNlpLingTokensregexTypesValue> EduStanfordNlpLingTokensregexTypesExpressions_FALSE;
id<EduStanfordNlpLingTokensregexTypesValue> EduStanfordNlpLingTokensregexTypesExpressions_NIL;
NSString *EduStanfordNlpLingTokensregexTypesExpressions_NEWLINE;

@implementation EduStanfordNlpLingTokensregexTypesExpressions

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpLingTokensregexTypesExpressions_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (JavaLangBoolean *)convertValueToBooleanWithEduStanfordNlpLingTokensregexTypesValue:(id<EduStanfordNlpLingTokensregexTypesValue>)v
                                                                          withBoolean:(jboolean)keepNull {
  return EduStanfordNlpLingTokensregexTypesExpressions_convertValueToBooleanWithEduStanfordNlpLingTokensregexTypesValue_withBoolean_(v, keepNull);
}

+ (id<EduStanfordNlpLingTokensregexTypesValue>)convertValueToBooleanValueWithEduStanfordNlpLingTokensregexTypesValue:(id<EduStanfordNlpLingTokensregexTypesValue>)v
                                                                                                         withBoolean:(jboolean)keepNull {
  return EduStanfordNlpLingTokensregexTypesExpressions_convertValueToBooleanValueWithEduStanfordNlpLingTokensregexTypesValue_withBoolean_(v, keepNull);
}

+ (id)asObjectWithEduStanfordNlpLingTokensregexEnv:(EduStanfordNlpLingTokensregexEnv *)env
                                            withId:(id)v {
  return EduStanfordNlpLingTokensregexTypesExpressions_asObjectWithEduStanfordNlpLingTokensregexEnv_withId_(env, v);
}

+ (id<EduStanfordNlpLingTokensregexTypesExpression>)asExpressionWithEduStanfordNlpLingTokensregexEnv:(EduStanfordNlpLingTokensregexEnv *)env
                                                                                              withId:(id)v {
  return EduStanfordNlpLingTokensregexTypesExpressions_asExpressionWithEduStanfordNlpLingTokensregexEnv_withId_(env, v);
}

+ (id<EduStanfordNlpLingTokensregexTypesValue>)asValueWithEduStanfordNlpLingTokensregexEnv:(EduStanfordNlpLingTokensregexEnv *)env
                                                                                    withId:(id)v {
  return EduStanfordNlpLingTokensregexTypesExpressions_asValueWithEduStanfordNlpLingTokensregexEnv_withId_(env, v);
}

+ (id<EduStanfordNlpLingTokensregexTypesValue>)createValueWithNSString:(NSString *)typename_
                                                                withId:(id)value
                                                     withNSStringArray:(IOSObjectArray *)tags {
  return EduStanfordNlpLingTokensregexTypesExpressions_createValueWithNSString_withId_withNSStringArray_(typename_, value, tags);
}

+ (jboolean)isArgTypesCompatibleWithIOSClassArray:(IOSObjectArray *)paramTypes
                                withIOSClassArray:(IOSObjectArray *)targetParamTypes {
  return EduStanfordNlpLingTokensregexTypesExpressions_isArgTypesCompatibleWithIOSClassArray_withIOSClassArray_(paramTypes, targetParamTypes);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangBoolean;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexTypesValue;", 0x9, 2, 1, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x9, 4, 5, -1, 6, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexTypesExpression;", 0x9, 7, 5, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexTypesValue;", 0x9, 8, 5, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexTypesValue;", 0x89, 9, 10, -1, 11, -1, -1 },
    { NULL, "Z", 0x1a, 12, 13, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(convertValueToBooleanWithEduStanfordNlpLingTokensregexTypesValue:withBoolean:);
  methods[2].selector = @selector(convertValueToBooleanValueWithEduStanfordNlpLingTokensregexTypesValue:withBoolean:);
  methods[3].selector = @selector(asObjectWithEduStanfordNlpLingTokensregexEnv:withId:);
  methods[4].selector = @selector(asExpressionWithEduStanfordNlpLingTokensregexEnv:withId:);
  methods[5].selector = @selector(asValueWithEduStanfordNlpLingTokensregexEnv:withId:);
  methods[6].selector = @selector(createValueWithNSString:withId:withNSStringArray:);
  methods[7].selector = @selector(isArgTypesCompatibleWithIOSClassArray:withIOSClassArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TYPE_VAR", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 14, -1, -1 },
    { "TYPE_FUNCTION", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 15, -1, -1 },
    { "TYPE_REGEX", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 16, -1, -1 },
    { "TYPE_STRING_REGEX", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 17, -1, -1 },
    { "TYPE_TOKEN_REGEX", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 18, -1, -1 },
    { "TYPE_REGEXMATCHVAR", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 19, -1, -1 },
    { "TYPE_STRING", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 20, -1, -1 },
    { "TYPE_NUMBER", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 21, -1, -1 },
    { "TYPE_COMPOSITE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 22, -1, -1 },
    { "TYPE_LIST", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 23, -1, -1 },
    { "TYPE_SET", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 24, -1, -1 },
    { "TYPE_ANNOTATION_KEY", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 25, -1, -1 },
    { "TYPE_CLASS", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 26, -1, -1 },
    { "TYPE_TOKENS", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 27, -1, -1 },
    { "TYPE_BOOLEAN", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 28, -1, -1 },
    { "VAR_SELF", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 29, -1, -1 },
    { "TRUE", "LEduStanfordNlpLingTokensregexTypesValue;", .constantValue.asLong = 0, 0x19, -1, 30, 31, -1 },
    { "FALSE", "LEduStanfordNlpLingTokensregexTypesValue;", .constantValue.asLong = 0, 0x19, -1, 32, 31, -1 },
    { "NIL", "LEduStanfordNlpLingTokensregexTypesValue;", .constantValue.asLong = 0, 0x19, -1, 33, -1, -1 },
    { "DIGITS_PATTERN", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 34, -1, -1 },
    { "NEWLINE", "LNSString;", .constantValue.asLong = 0, 0x1c, -1, 35, -1, -1 },
  };
  static const void *ptrTable[] = { "convertValueToBoolean", "LEduStanfordNlpLingTokensregexTypesValue;Z", "convertValueToBooleanValue", "(Ledu/stanford/nlp/ling/tokensregex/types/Value;Z)Ledu/stanford/nlp/ling/tokensregex/types/Value<Ljava/lang/Boolean;>;", "asObject", "LEduStanfordNlpLingTokensregexEnv;LNSObject;", "<C:Ljava/lang/Object;>(Ledu/stanford/nlp/ling/tokensregex/Env;Ljava/lang/Object;)TC;", "asExpression", "asValue", "createValue", "LNSString;LNSObject;[LNSString;", "<T:Ljava/lang/Object;>(Ljava/lang/String;TT;[Ljava/lang/String;)Ledu/stanford/nlp/ling/tokensregex/types/Value;", "isArgTypesCompatible", "[LIOSClass;[LIOSClass;", &EduStanfordNlpLingTokensregexTypesExpressions_TYPE_VAR, &EduStanfordNlpLingTokensregexTypesExpressions_TYPE_FUNCTION, &EduStanfordNlpLingTokensregexTypesExpressions_TYPE_REGEX, &EduStanfordNlpLingTokensregexTypesExpressions_TYPE_STRING_REGEX, &EduStanfordNlpLingTokensregexTypesExpressions_TYPE_TOKEN_REGEX, &EduStanfordNlpLingTokensregexTypesExpressions_TYPE_REGEXMATCHVAR, &EduStanfordNlpLingTokensregexTypesExpressions_TYPE_STRING, &EduStanfordNlpLingTokensregexTypesExpressions_TYPE_NUMBER, &EduStanfordNlpLingTokensregexTypesExpressions_TYPE_COMPOSITE, &EduStanfordNlpLingTokensregexTypesExpressions_TYPE_LIST, &EduStanfordNlpLingTokensregexTypesExpressions_TYPE_SET, &EduStanfordNlpLingTokensregexTypesExpressions_TYPE_ANNOTATION_KEY, &EduStanfordNlpLingTokensregexTypesExpressions_TYPE_CLASS, &EduStanfordNlpLingTokensregexTypesExpressions_TYPE_TOKENS, &EduStanfordNlpLingTokensregexTypesExpressions_TYPE_BOOLEAN, &EduStanfordNlpLingTokensregexTypesExpressions_VAR_SELF, &EduStanfordNlpLingTokensregexTypesExpressions_TRUE, "Ledu/stanford/nlp/ling/tokensregex/types/Value<Ljava/lang/Boolean;>;", &EduStanfordNlpLingTokensregexTypesExpressions_FALSE, &EduStanfordNlpLingTokensregexTypesExpressions_NIL, &EduStanfordNlpLingTokensregexTypesExpressions_DIGITS_PATTERN, &EduStanfordNlpLingTokensregexTypesExpressions_NEWLINE, "LEduStanfordNlpLingTokensregexTypesExpressions_WrappedExpression;LEduStanfordNlpLingTokensregexTypesExpressions_TypedExpression;LEduStanfordNlpLingTokensregexTypesExpressions_SimpleExpression;LEduStanfordNlpLingTokensregexTypesExpressions_SimpleCachedExpression;LEduStanfordNlpLingTokensregexTypesExpressions_SimpleValue;LEduStanfordNlpLingTokensregexTypesExpressions_RegexValue;LEduStanfordNlpLingTokensregexTypesExpressions_VarAssignmentExpression;LEduStanfordNlpLingTokensregexTypesExpressions_VarExpression;LEduStanfordNlpLingTokensregexTypesExpressions_RegexMatchVarExpression;LEduStanfordNlpLingTokensregexTypesExpressions_RegexMatchResultVarExpression;LEduStanfordNlpLingTokensregexTypesExpressions_AssignableFunctionCallExpression;LEduStanfordNlpLingTokensregexTypesExpressions_IndexedExpression;LEduStanfordNlpLingTokensregexTypesExpressions_FieldExpression;LEduStanfordNlpLingTokensregexTypesExpressions_OrExpression;LEduStanfordNlpLingTokensregexTypesExpressions_AndExpression;LEduStanfordNlpLingTokensregexTypesExpressions_NotExpression;LEduStanfordNlpLingTokensregexTypesExpressions_IfExpression;LEduStanfordNlpLingTokensregexTypesExpressions_CaseExpression;LEduStanfordNlpLingTokensregexTypesExpressions_ConditionalExpression;LEduStanfordNlpLingTokensregexTypesExpressions_ListExpression;LEduStanfordNlpLingTokensregexTypesExpressions_FunctionCallExpression;LEduStanfordNlpLingTokensregexTypesExpressions_MethodCallExpression;LEduStanfordNlpLingTokensregexTypesExpressions_PrimitiveValue;LEduStanfordNlpLingTokensregexTypesExpressions_CompositeValue;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexTypesExpressions = { "Expressions", "edu.stanford.nlp.ling.tokensregex.types", ptrTable, methods, fields, 7, 0x1, 8, 21, -1, 36, -1, -1, -1 };
  return &_EduStanfordNlpLingTokensregexTypesExpressions;
}

+ (void)initialize {
  if (self == [EduStanfordNlpLingTokensregexTypesExpressions class]) {
    EduStanfordNlpLingTokensregexTypesExpressions_TRUE = new_EduStanfordNlpLingTokensregexTypesExpressions_PrimitiveValue_initWithNSString_withId_withNSStringArray_(EduStanfordNlpLingTokensregexTypesExpressions_TYPE_BOOLEAN, JavaLangBoolean_valueOfWithBoolean_(true), [IOSObjectArray newArrayWithLength:0 type:NSString_class_()]);
    EduStanfordNlpLingTokensregexTypesExpressions_FALSE = new_EduStanfordNlpLingTokensregexTypesExpressions_PrimitiveValue_initWithNSString_withId_withNSStringArray_(EduStanfordNlpLingTokensregexTypesExpressions_TYPE_BOOLEAN, JavaLangBoolean_valueOfWithBoolean_(false), [IOSObjectArray newArrayWithLength:0 type:NSString_class_()]);
    EduStanfordNlpLingTokensregexTypesExpressions_NIL = new_EduStanfordNlpLingTokensregexTypesExpressions_PrimitiveValue_initWithNSString_withId_withNSStringArray_(@"NIL", nil, [IOSObjectArray newArrayWithLength:0 type:NSString_class_()]);
    EduStanfordNlpLingTokensregexTypesExpressions_DIGITS_PATTERN = JavaUtilRegexPattern_compileWithNSString_(@"\\d+");
    EduStanfordNlpLingTokensregexTypesExpressions_NEWLINE = JavaLangSystem_getPropertyWithNSString_(@"line.separator");
    J2OBJC_SET_INITIALIZED(EduStanfordNlpLingTokensregexTypesExpressions)
  }
}

@end

void EduStanfordNlpLingTokensregexTypesExpressions_init(EduStanfordNlpLingTokensregexTypesExpressions *self) {
  NSObject_init(self);
}

EduStanfordNlpLingTokensregexTypesExpressions *new_EduStanfordNlpLingTokensregexTypesExpressions_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexTypesExpressions, init)
}

EduStanfordNlpLingTokensregexTypesExpressions *create_EduStanfordNlpLingTokensregexTypesExpressions_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexTypesExpressions, init)
}

JavaLangBoolean *EduStanfordNlpLingTokensregexTypesExpressions_convertValueToBooleanWithEduStanfordNlpLingTokensregexTypesValue_withBoolean_(id<EduStanfordNlpLingTokensregexTypesValue> v, jboolean keepNull) {
  EduStanfordNlpLingTokensregexTypesExpressions_initialize();
  JavaLangBoolean *res = nil;
  if (v != nil) {
    id obj = [v get];
    if (obj != nil) {
      if ([obj isKindOfClass:[JavaLangBoolean class]]) {
        res = JavaLangBoolean_valueOfWithBoolean_([((JavaLangBoolean *) cast_chk(obj, [JavaLangBoolean class])) booleanValue]);
      }
      else if ([obj isKindOfClass:[JavaLangInteger class]]) {
        res = JavaLangBoolean_valueOfWithBoolean_(([((JavaLangInteger *) cast_chk(obj, [JavaLangInteger class])) intValue] != 0));
      }
      else {
        res = JavaLangBoolean_valueOfWithBoolean_(true);
      }
      return res;
    }
  }
  return JavaLangBoolean_valueOfWithBoolean_((keepNull) ? [((JavaLangBoolean *) nil_chk(res)) booleanValue] : false);
}

id<EduStanfordNlpLingTokensregexTypesValue> EduStanfordNlpLingTokensregexTypesExpressions_convertValueToBooleanValueWithEduStanfordNlpLingTokensregexTypesValue_withBoolean_(id<EduStanfordNlpLingTokensregexTypesValue> v, jboolean keepNull) {
  EduStanfordNlpLingTokensregexTypesExpressions_initialize();
  if (v != nil) {
    id obj = [v get];
    if ([obj isKindOfClass:[JavaLangBoolean class]]) {
      return v;
    }
    else {
      return new_EduStanfordNlpLingTokensregexTypesExpressions_PrimitiveValue_initWithNSString_withId_withNSStringArray_(EduStanfordNlpLingTokensregexTypesExpressions_TYPE_BOOLEAN, EduStanfordNlpLingTokensregexTypesExpressions_convertValueToBooleanWithEduStanfordNlpLingTokensregexTypesValue_withBoolean_(v, keepNull), [IOSObjectArray newArrayWithLength:0 type:NSString_class_()]);
    }
  }
  else {
    return keepNull ? nil : EduStanfordNlpLingTokensregexTypesExpressions_FALSE;
  }
}

id EduStanfordNlpLingTokensregexTypesExpressions_asObjectWithEduStanfordNlpLingTokensregexEnv_withId_(EduStanfordNlpLingTokensregexEnv *env, id v) {
  EduStanfordNlpLingTokensregexTypesExpressions_initialize();
  if ([EduStanfordNlpLingTokensregexTypesExpression_class_() isInstance:v]) {
    return [((id<EduStanfordNlpLingTokensregexTypesValue>) nil_chk([((id<EduStanfordNlpLingTokensregexTypesExpression>) nil_chk(((id<EduStanfordNlpLingTokensregexTypesExpression>) cast_check(v, EduStanfordNlpLingTokensregexTypesExpression_class_())))) evaluateWithEduStanfordNlpLingTokensregexEnv:env withNSObjectArray:[IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]])) get];
  }
  else {
    return v;
  }
}

id<EduStanfordNlpLingTokensregexTypesExpression> EduStanfordNlpLingTokensregexTypesExpressions_asExpressionWithEduStanfordNlpLingTokensregexEnv_withId_(EduStanfordNlpLingTokensregexEnv *env, id v) {
  EduStanfordNlpLingTokensregexTypesExpressions_initialize();
  if ([EduStanfordNlpLingTokensregexTypesExpression_class_() isInstance:v]) {
    return (id<EduStanfordNlpLingTokensregexTypesExpression>) cast_check(v, EduStanfordNlpLingTokensregexTypesExpression_class_());
  }
  else {
    return EduStanfordNlpLingTokensregexTypesExpressions_createValueWithNSString_withId_withNSStringArray_(nil, v, [IOSObjectArray newArrayWithLength:0 type:NSString_class_()]);
  }
}

id<EduStanfordNlpLingTokensregexTypesValue> EduStanfordNlpLingTokensregexTypesExpressions_asValueWithEduStanfordNlpLingTokensregexEnv_withId_(EduStanfordNlpLingTokensregexEnv *env, id v) {
  EduStanfordNlpLingTokensregexTypesExpressions_initialize();
  if ([EduStanfordNlpLingTokensregexTypesValue_class_() isInstance:v]) {
    return (id<EduStanfordNlpLingTokensregexTypesValue>) cast_check(v, EduStanfordNlpLingTokensregexTypesValue_class_());
  }
  else {
    return EduStanfordNlpLingTokensregexTypesExpressions_createValueWithNSString_withId_withNSStringArray_(nil, v, [IOSObjectArray newArrayWithLength:0 type:NSString_class_()]);
  }
}

id<EduStanfordNlpLingTokensregexTypesValue> EduStanfordNlpLingTokensregexTypesExpressions_createValueWithNSString_withId_withNSStringArray_(NSString *typename_, id value, IOSObjectArray *tags) {
  EduStanfordNlpLingTokensregexTypesExpressions_initialize();
  if ([EduStanfordNlpLingTokensregexTypesValue_class_() isInstance:value]) {
    return (id<EduStanfordNlpLingTokensregexTypesValue>) cast_check(value, EduStanfordNlpLingTokensregexTypesValue_class_());
  }
  else {
    if (typename_ == nil && value != nil) {
      typename_ = [[value getClass] getName];
    }
    return new_EduStanfordNlpLingTokensregexTypesExpressions_PrimitiveValue_initWithNSString_withId_withNSStringArray_(typename_, value, tags);
  }
}

jboolean EduStanfordNlpLingTokensregexTypesExpressions_isArgTypesCompatibleWithIOSClassArray_withIOSClassArray_(IOSObjectArray *paramTypes, IOSObjectArray *targetParamTypes) {
  EduStanfordNlpLingTokensregexTypesExpressions_initialize();
  jboolean compatible = true;
  if (((IOSObjectArray *) nil_chk(targetParamTypes))->size_ == ((IOSObjectArray *) nil_chk(paramTypes))->size_) {
    for (jint i = 0; i < targetParamTypes->size_; i++) {
      if ([((IOSClass *) nil_chk(IOSObjectArray_Get(targetParamTypes, i))) isPrimitive]) {
        compatible = false;
        if (IOSObjectArray_Get(paramTypes, i) != nil) {
          @try {
            IOSClass *type = (IOSClass *) cast_chk([((JavaLangReflectField *) nil_chk([((IOSClass *) nil_chk(IOSObjectArray_Get(paramTypes, i))) getField:@"TYPE"])) getWithId:nil], [IOSClass class]);
            if ([((IOSClass *) nil_chk(type)) isEqual:IOSObjectArray_Get(targetParamTypes, i)]) {
              compatible = true;
            }
          }
          @catch (JavaLangNoSuchFieldException *ex2) {
          }
          @catch (JavaLangIllegalAccessException *ex2) {
          }
        }
        if (!compatible) break;
      }
      else {
        if (IOSObjectArray_Get(paramTypes, i) != nil && ![((IOSClass *) nil_chk(IOSObjectArray_Get(targetParamTypes, i))) isAssignableFrom:IOSObjectArray_Get(paramTypes, i)]) {
          compatible = false;
          break;
        }
      }
    }
  }
  else {
    compatible = false;
  }
  return compatible;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexTypesExpressions)

@implementation EduStanfordNlpLingTokensregexTypesExpressions_WrappedExpression

- (EduStanfordNlpLingTokensregexTypesTags *)getTags {
  return [((id<EduStanfordNlpLingTokensregexTypesExpression>) nil_chk(expr_)) getTags];
}

- (void)setTagsWithEduStanfordNlpLingTokensregexTypesTags:(EduStanfordNlpLingTokensregexTypesTags *)tags {
  [((id<EduStanfordNlpLingTokensregexTypesExpression>) nil_chk(expr_)) setTagsWithEduStanfordNlpLingTokensregexTypesTags:tags];
}

- (NSString *)getType {
  return [((id<EduStanfordNlpLingTokensregexTypesExpression>) nil_chk(expr_)) getType];
}

- (id<EduStanfordNlpLingTokensregexTypesExpression>)simplifyWithEduStanfordNlpLingTokensregexEnv:(EduStanfordNlpLingTokensregexEnv *)env {
  return [((id<EduStanfordNlpLingTokensregexTypesExpression>) nil_chk(expr_)) simplifyWithEduStanfordNlpLingTokensregexEnv:env];
}

- (jboolean)hasValue {
  return [((id<EduStanfordNlpLingTokensregexTypesExpression>) nil_chk(expr_)) hasValue];
}

- (id<EduStanfordNlpLingTokensregexTypesValue>)evaluateWithEduStanfordNlpLingTokensregexEnv:(EduStanfordNlpLingTokensregexEnv *)env
                                                                          withNSObjectArray:(IOSObjectArray *)args {
  return [((id<EduStanfordNlpLingTokensregexTypesExpression>) nil_chk(expr_)) evaluateWithEduStanfordNlpLingTokensregexEnv:env withNSObjectArray:args];
}

- (jboolean)isEqual:(id)o {
  if (self == o) return true;
  if (!([o isKindOfClass:[EduStanfordNlpLingTokensregexTypesExpressions_WrappedExpression class]])) return false;
  EduStanfordNlpLingTokensregexTypesExpressions_WrappedExpression *that = (EduStanfordNlpLingTokensregexTypesExpressions_WrappedExpression *) cast_chk(o, [EduStanfordNlpLingTokensregexTypesExpressions_WrappedExpression class]);
  if (expr_ != nil ? ![expr_ isEqual:((EduStanfordNlpLingTokensregexTypesExpressions_WrappedExpression *) nil_chk(that))->expr_] : ((EduStanfordNlpLingTokensregexTypesExpressions_WrappedExpression *) nil_chk(that))->expr_ != nil) return false;
  return true;
}

- (NSUInteger)hash {
  return expr_ != nil ? ((jint) [expr_ hash]) : 0;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpLingTokensregexTypesExpressions_WrappedExpression_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LEduStanfordNlpLingTokensregexTypesTags;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexTypesExpression;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexTypesValue;", 0x81, 4, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 8, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(getTags);
  methods[1].selector = @selector(setTagsWithEduStanfordNlpLingTokensregexTypesTags:);
  methods[2].selector = @selector(getType);
  methods[3].selector = @selector(simplifyWithEduStanfordNlpLingTokensregexEnv:);
  methods[4].selector = @selector(hasValue);
  methods[5].selector = @selector(evaluateWithEduStanfordNlpLingTokensregexEnv:withNSObjectArray:);
  methods[6].selector = @selector(isEqual:);
  methods[7].selector = @selector(hash);
  methods[8].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "expr_", "LEduStanfordNlpLingTokensregexTypesExpression;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setTags", "LEduStanfordNlpLingTokensregexTypesTags;", "simplify", "LEduStanfordNlpLingTokensregexEnv;", "evaluate", "LEduStanfordNlpLingTokensregexEnv;[LNSObject;", "equals", "LNSObject;", "hashCode", "LEduStanfordNlpLingTokensregexTypesExpressions;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexTypesExpressions_WrappedExpression = { "WrappedExpression", "edu.stanford.nlp.ling.tokensregex.types", ptrTable, methods, fields, 7, 0x409, 9, 1, 9, -1, -1, -1, -1 };
  return &_EduStanfordNlpLingTokensregexTypesExpressions_WrappedExpression;
}

@end

void EduStanfordNlpLingTokensregexTypesExpressions_WrappedExpression_init(EduStanfordNlpLingTokensregexTypesExpressions_WrappedExpression *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexTypesExpressions_WrappedExpression)

@implementation EduStanfordNlpLingTokensregexTypesExpressions_TypedExpression

- (instancetype)initWithNSString:(NSString *)typename_
               withNSStringArray:(IOSObjectArray *)tags {
  EduStanfordNlpLingTokensregexTypesExpressions_TypedExpression_initWithNSString_withNSStringArray_(self, typename_, tags);
  return self;
}

- (EduStanfordNlpLingTokensregexTypesTags *)getTags {
  return tags_;
}

- (void)setTagsWithEduStanfordNlpLingTokensregexTypesTags:(EduStanfordNlpLingTokensregexTypesTags *)tags {
  self->tags_ = tags;
}

- (NSString *)getType {
  return typename__;
}

- (id<EduStanfordNlpLingTokensregexTypesExpression>)simplifyWithEduStanfordNlpLingTokensregexEnv:(EduStanfordNlpLingTokensregexEnv *)env {
  return self;
}

- (jboolean)hasValue {
  return false;
}

- (jboolean)isEqual:(id)o {
  if (self == o) return true;
  if (!([o isKindOfClass:[EduStanfordNlpLingTokensregexTypesExpressions_TypedExpression class]])) return false;
  EduStanfordNlpLingTokensregexTypesExpressions_TypedExpression *that = (EduStanfordNlpLingTokensregexTypesExpressions_TypedExpression *) cast_chk(o, [EduStanfordNlpLingTokensregexTypesExpressions_TypedExpression class]);
  if (tags_ != nil ? ![tags_ isEqual:((EduStanfordNlpLingTokensregexTypesExpressions_TypedExpression *) nil_chk(that))->tags_] : ((EduStanfordNlpLingTokensregexTypesExpressions_TypedExpression *) nil_chk(that))->tags_ != nil) return false;
  if (typename__ != nil ? ![typename__ isEqual:that->typename__] : that->typename__ != nil) return false;
  return true;
}

- (NSUInteger)hash {
  jint result = typename__ != nil ? ((jint) [typename__ hash]) : 0;
  result = 31 * result + (tags_ != nil ? ((jint) [tags_ hash]) : 0);
  return result;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x81, -1, 0, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexTypesTags;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexTypesExpression;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 7, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withNSStringArray:);
  methods[1].selector = @selector(getTags);
  methods[2].selector = @selector(setTagsWithEduStanfordNlpLingTokensregexTypesTags:);
  methods[3].selector = @selector(getType);
  methods[4].selector = @selector(simplifyWithEduStanfordNlpLingTokensregexEnv:);
  methods[5].selector = @selector(hasValue);
  methods[6].selector = @selector(isEqual:);
  methods[7].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "typename__", "LNSString;", .constantValue.asLong = 0, 0x0, 8, -1, -1, -1 },
    { "tags_", "LEduStanfordNlpLingTokensregexTypesTags;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpLingTokensregexTypesExpressions_TypedExpression_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;[LNSString;", "setTags", "LEduStanfordNlpLingTokensregexTypesTags;", "simplify", "LEduStanfordNlpLingTokensregexEnv;", "equals", "LNSObject;", "hashCode", "typename", "LEduStanfordNlpLingTokensregexTypesExpressions;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexTypesExpressions_TypedExpression = { "TypedExpression", "edu.stanford.nlp.ling.tokensregex.types", ptrTable, methods, fields, 7, 0x409, 8, 3, 9, -1, -1, -1, -1 };
  return &_EduStanfordNlpLingTokensregexTypesExpressions_TypedExpression;
}

@end

void EduStanfordNlpLingTokensregexTypesExpressions_TypedExpression_initWithNSString_withNSStringArray_(EduStanfordNlpLingTokensregexTypesExpressions_TypedExpression *self, NSString *typename_, IOSObjectArray *tags) {
  NSObject_init(self);
  self->typename__ = typename_;
  if (tags != nil) {
    self->tags_ = new_EduStanfordNlpLingTokensregexTypesTags_initWithNSStringArray_(tags);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexTypesExpressions_TypedExpression)

@implementation EduStanfordNlpLingTokensregexTypesExpressions_SimpleExpression

- (instancetype)initWithNSString:(NSString *)typename_
                          withId:(id)value
               withNSStringArray:(IOSObjectArray *)tags {
  EduStanfordNlpLingTokensregexTypesExpressions_SimpleExpression_initWithNSString_withId_withNSStringArray_(self, typename_, value, tags);
  return self;
}

- (id)get {
  return value_;
}

- (NSString *)description {
  return JreStrcat("$C@C", [self getType], '(', value_, ')');
}

- (jboolean)isEqual:(id)o {
  if (self == o) return true;
  if (!([o isKindOfClass:[EduStanfordNlpLingTokensregexTypesExpressions_SimpleExpression class]])) return false;
  if (![super isEqual:o]) return false;
  EduStanfordNlpLingTokensregexTypesExpressions_SimpleExpression *that = (EduStanfordNlpLingTokensregexTypesExpressions_SimpleExpression *) cast_chk(o, [EduStanfordNlpLingTokensregexTypesExpressions_SimpleExpression class]);
  if (value_ != nil ? ![value_ isEqual:((EduStanfordNlpLingTokensregexTypesExpressions_SimpleExpression *) nil_chk(that))->value_] : ((EduStanfordNlpLingTokensregexTypesExpressions_SimpleExpression *) nil_chk(that))->value_ != nil) return false;
  return true;
}

- (NSUInteger)hash {
  jint result = ((jint) [super hash]);
  result = 31 * result + (value_ != nil ? ((jint) [value_ hash]) : 0);
  return result;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x84, -1, 0, -1, 1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 6, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withId:withNSStringArray:);
  methods[1].selector = @selector(get);
  methods[2].selector = @selector(description);
  methods[3].selector = @selector(isEqual:);
  methods[4].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "value_", "LNSObject;", .constantValue.asLong = 0, 0x0, -1, -1, 7, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LNSObject;[LNSString;", "(Ljava/lang/String;TT;[Ljava/lang/String;)V", "()TT;", "toString", "equals", "LNSObject;", "hashCode", "TT;", "LEduStanfordNlpLingTokensregexTypesExpressions;", "<T:Ljava/lang/Object;>Ledu/stanford/nlp/ling/tokensregex/types/Expressions$TypedExpression;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexTypesExpressions_SimpleExpression = { "SimpleExpression", "edu.stanford.nlp.ling.tokensregex.types", ptrTable, methods, fields, 7, 0x409, 5, 1, 8, -1, -1, 9, -1 };
  return &_EduStanfordNlpLingTokensregexTypesExpressions_SimpleExpression;
}

@end

void EduStanfordNlpLingTokensregexTypesExpressions_SimpleExpression_initWithNSString_withId_withNSStringArray_(EduStanfordNlpLingTokensregexTypesExpressions_SimpleExpression *self, NSString *typename_, id value, IOSObjectArray *tags) {
  EduStanfordNlpLingTokensregexTypesExpressions_TypedExpression_initWithNSString_withNSStringArray_(self, typename_, tags);
  self->value_ = value;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexTypesExpressions_SimpleExpression)

@implementation EduStanfordNlpLingTokensregexTypesExpressions_SimpleCachedExpression

- (instancetype)initWithNSString:(NSString *)typename_
                          withId:(id)value
               withNSStringArray:(IOSObjectArray *)tags {
  EduStanfordNlpLingTokensregexTypesExpressions_SimpleCachedExpression_initWithNSString_withId_withNSStringArray_(self, typename_, value, tags);
  return self;
}

- (id<EduStanfordNlpLingTokensregexTypesValue>)doEvaluationWithEduStanfordNlpLingTokensregexEnv:(EduStanfordNlpLingTokensregexEnv *)env
                                                                              withNSObjectArray:(IOSObjectArray *)args {
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(JreStrcat("$$", @"Cannot evaluate type: ", typename__));
}

- (id<EduStanfordNlpLingTokensregexTypesValue>)evaluateWithEduStanfordNlpLingTokensregexEnv:(EduStanfordNlpLingTokensregexEnv *)env
                                                                          withNSObjectArray:(IOSObjectArray *)args {
  if (args != nil) {
    return [self doEvaluationWithEduStanfordNlpLingTokensregexEnv:env withNSObjectArray:args];
  }
  if (evaluated_ == nil || disableCaching_) {
    evaluated_ = [self doEvaluationWithEduStanfordNlpLingTokensregexEnv:env withNSObjectArray:args];
  }
  return evaluated_;
}

- (jboolean)hasValue {
  return (evaluated_ != nil);
}

- (jboolean)isEqual:(id)o {
  if (self == o) return true;
  if (!([o isKindOfClass:[EduStanfordNlpLingTokensregexTypesExpressions_SimpleCachedExpression class]])) return false;
  EduStanfordNlpLingTokensregexTypesExpressions_SimpleCachedExpression *that = (EduStanfordNlpLingTokensregexTypesExpressions_SimpleCachedExpression *) cast_chk(o, [EduStanfordNlpLingTokensregexTypesExpressions_SimpleCachedExpression class]);
  if (disableCaching_ != ((EduStanfordNlpLingTokensregexTypesExpressions_SimpleCachedExpression *) nil_chk(that))->disableCaching_) return false;
  if (evaluated_ != nil ? ![evaluated_ isEqual:that->evaluated_] : that->evaluated_ != nil) return false;
  return true;
}

- (NSUInteger)hash {
  jint result = evaluated_ != nil ? ((jint) [evaluated_ hash]) : 0;
  result = 31 * result + (disableCaching_ ? 1 : 0);
  return result;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x84, -1, 0, -1, 1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexTypesValue;", 0x84, 2, 3, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexTypesValue;", 0x81, 4, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 7, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withId:withNSStringArray:);
  methods[1].selector = @selector(doEvaluationWithEduStanfordNlpLingTokensregexEnv:withNSObjectArray:);
  methods[2].selector = @selector(evaluateWithEduStanfordNlpLingTokensregexEnv:withNSObjectArray:);
  methods[3].selector = @selector(hasValue);
  methods[4].selector = @selector(isEqual:);
  methods[5].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "evaluated_", "LEduStanfordNlpLingTokensregexTypesValue;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "disableCaching_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LNSObject;[LNSString;", "(Ljava/lang/String;TT;[Ljava/lang/String;)V", "doEvaluation", "LEduStanfordNlpLingTokensregexEnv;[LNSObject;", "evaluate", "equals", "LNSObject;", "hashCode", "LEduStanfordNlpLingTokensregexTypesExpressions;", "<T:Ljava/lang/Object;>Ledu/stanford/nlp/ling/tokensregex/types/Expressions$SimpleExpression<TT;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexTypesExpressions_SimpleCachedExpression = { "SimpleCachedExpression", "edu.stanford.nlp.ling.tokensregex.types", ptrTable, methods, fields, 7, 0x9, 6, 2, 8, -1, -1, 9, -1 };
  return &_EduStanfordNlpLingTokensregexTypesExpressions_SimpleCachedExpression;
}

@end

void EduStanfordNlpLingTokensregexTypesExpressions_SimpleCachedExpression_initWithNSString_withId_withNSStringArray_(EduStanfordNlpLingTokensregexTypesExpressions_SimpleCachedExpression *self, NSString *typename_, id value, IOSObjectArray *tags) {
  EduStanfordNlpLingTokensregexTypesExpressions_SimpleExpression_initWithNSString_withId_withNSStringArray_(self, typename_, value, tags);
  self->disableCaching_ = false;
}

EduStanfordNlpLingTokensregexTypesExpressions_SimpleCachedExpression *new_EduStanfordNlpLingTokensregexTypesExpressions_SimpleCachedExpression_initWithNSString_withId_withNSStringArray_(NSString *typename_, id value, IOSObjectArray *tags) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexTypesExpressions_SimpleCachedExpression, initWithNSString_withId_withNSStringArray_, typename_, value, tags)
}

EduStanfordNlpLingTokensregexTypesExpressions_SimpleCachedExpression *create_EduStanfordNlpLingTokensregexTypesExpressions_SimpleCachedExpression_initWithNSString_withId_withNSStringArray_(NSString *typename_, id value, IOSObjectArray *tags) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexTypesExpressions_SimpleCachedExpression, initWithNSString_withId_withNSStringArray_, typename_, value, tags)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexTypesExpressions_SimpleCachedExpression)

@implementation EduStanfordNlpLingTokensregexTypesExpressions_SimpleValue

- (instancetype)initWithNSString:(NSString *)typename_
                          withId:(id)value
               withNSStringArray:(IOSObjectArray *)tags {
  EduStanfordNlpLingTokensregexTypesExpressions_SimpleValue_initWithNSString_withId_withNSStringArray_(self, typename_, value, tags);
  return self;
}

- (id)get {
  return value_;
}

- (id<EduStanfordNlpLingTokensregexTypesValue>)evaluateWithEduStanfordNlpLingTokensregexEnv:(EduStanfordNlpLingTokensregexEnv *)env
                                                                          withNSObjectArray:(IOSObjectArray *)args {
  return self;
}

- (NSString *)description {
  return JreStrcat("$C@C", [self getType], '(', value_, ')');
}

- (jboolean)hasValue {
  return true;
}

- (jboolean)isEqual:(id)o {
  if (self == o) return true;
  if (!([o isKindOfClass:[EduStanfordNlpLingTokensregexTypesExpressions_SimpleValue class]])) return false;
  if (![super isEqual:o]) return false;
  EduStanfordNlpLingTokensregexTypesExpressions_SimpleValue *that = (EduStanfordNlpLingTokensregexTypesExpressions_SimpleValue *) cast_chk(o, [EduStanfordNlpLingTokensregexTypesExpressions_SimpleValue class]);
  if (value_ != nil ? ![value_ isEqual:((EduStanfordNlpLingTokensregexTypesExpressions_SimpleValue *) nil_chk(that))->value_] : ((EduStanfordNlpLingTokensregexTypesExpressions_SimpleValue *) nil_chk(that))->value_ != nil) return false;
  return true;
}

- (NSUInteger)hash {
  jint result = ((jint) [super hash]);
  result = 31 * result + (value_ != nil ? ((jint) [value_ hash]) : 0);
  return result;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x84, -1, 0, -1, 1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexTypesValue;", 0x81, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 8, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withId:withNSStringArray:);
  methods[1].selector = @selector(get);
  methods[2].selector = @selector(evaluateWithEduStanfordNlpLingTokensregexEnv:withNSObjectArray:);
  methods[3].selector = @selector(description);
  methods[4].selector = @selector(hasValue);
  methods[5].selector = @selector(isEqual:);
  methods[6].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "value_", "LNSObject;", .constantValue.asLong = 0, 0x0, -1, -1, 9, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LNSObject;[LNSString;", "(Ljava/lang/String;TT;[Ljava/lang/String;)V", "()TT;", "evaluate", "LEduStanfordNlpLingTokensregexEnv;[LNSObject;", "toString", "equals", "LNSObject;", "hashCode", "TT;", "LEduStanfordNlpLingTokensregexTypesExpressions;", "<T:Ljava/lang/Object;>Ledu/stanford/nlp/ling/tokensregex/types/Expressions$TypedExpression;Ledu/stanford/nlp/ling/tokensregex/types/Value<TT;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexTypesExpressions_SimpleValue = { "SimpleValue", "edu.stanford.nlp.ling.tokensregex.types", ptrTable, methods, fields, 7, 0x9, 7, 1, 10, -1, -1, 11, -1 };
  return &_EduStanfordNlpLingTokensregexTypesExpressions_SimpleValue;
}

@end

void EduStanfordNlpLingTokensregexTypesExpressions_SimpleValue_initWithNSString_withId_withNSStringArray_(EduStanfordNlpLingTokensregexTypesExpressions_SimpleValue *self, NSString *typename_, id value, IOSObjectArray *tags) {
  EduStanfordNlpLingTokensregexTypesExpressions_TypedExpression_initWithNSString_withNSStringArray_(self, typename_, tags);
  self->value_ = value;
}

EduStanfordNlpLingTokensregexTypesExpressions_SimpleValue *new_EduStanfordNlpLingTokensregexTypesExpressions_SimpleValue_initWithNSString_withId_withNSStringArray_(NSString *typename_, id value, IOSObjectArray *tags) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexTypesExpressions_SimpleValue, initWithNSString_withId_withNSStringArray_, typename_, value, tags)
}

EduStanfordNlpLingTokensregexTypesExpressions_SimpleValue *create_EduStanfordNlpLingTokensregexTypesExpressions_SimpleValue_initWithNSString_withId_withNSStringArray_(NSString *typename_, id value, IOSObjectArray *tags) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexTypesExpressions_SimpleValue, initWithNSString_withId_withNSStringArray_, typename_, value, tags)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexTypesExpressions_SimpleValue)

@implementation EduStanfordNlpLingTokensregexTypesExpressions_RegexValue

- (instancetype)initWithNSString:(NSString *)regex
               withNSStringArray:(IOSObjectArray *)tags {
  EduStanfordNlpLingTokensregexTypesExpressions_RegexValue_initWithNSString_withNSStringArray_(self, regex, tags);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x81, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withNSStringArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;[LNSString;", "LEduStanfordNlpLingTokensregexTypesExpressions;", "Ledu/stanford/nlp/ling/tokensregex/types/Expressions$SimpleValue<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexTypesExpressions_RegexValue = { "RegexValue", "edu.stanford.nlp.ling.tokensregex.types", ptrTable, methods, NULL, 7, 0x9, 1, 0, 1, -1, -1, 2, -1 };
  return &_EduStanfordNlpLingTokensregexTypesExpressions_RegexValue;
}

@end

void EduStanfordNlpLingTokensregexTypesExpressions_RegexValue_initWithNSString_withNSStringArray_(EduStanfordNlpLingTokensregexTypesExpressions_RegexValue *self, NSString *regex, IOSObjectArray *tags) {
  EduStanfordNlpLingTokensregexTypesExpressions_SimpleValue_initWithNSString_withId_withNSStringArray_(self, EduStanfordNlpLingTokensregexTypesExpressions_TYPE_REGEX, regex, tags);
}

EduStanfordNlpLingTokensregexTypesExpressions_RegexValue *new_EduStanfordNlpLingTokensregexTypesExpressions_RegexValue_initWithNSString_withNSStringArray_(NSString *regex, IOSObjectArray *tags) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexTypesExpressions_RegexValue, initWithNSString_withNSStringArray_, regex, tags)
}

EduStanfordNlpLingTokensregexTypesExpressions_RegexValue *create_EduStanfordNlpLingTokensregexTypesExpressions_RegexValue_initWithNSString_withNSStringArray_(NSString *regex, IOSObjectArray *tags) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexTypesExpressions_RegexValue, initWithNSString_withNSStringArray_, regex, tags)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexTypesExpressions_RegexValue)

@implementation EduStanfordNlpLingTokensregexTypesExpressions_VarAssignmentExpression

- (instancetype)initWithNSString:(NSString *)varName
withEduStanfordNlpLingTokensregexTypesExpression:(id<EduStanfordNlpLingTokensregexTypesExpression>)valueExpr
                     withBoolean:(jboolean)bindAsValue {
  EduStanfordNlpLingTokensregexTypesExpressions_VarAssignmentExpression_initWithNSString_withEduStanfordNlpLingTokensregexTypesExpression_withBoolean_(self, varName, valueExpr, bindAsValue);
  return self;
}

- (id<EduStanfordNlpLingTokensregexTypesValue>)evaluateWithEduStanfordNlpLingTokensregexEnv:(EduStanfordNlpLingTokensregexEnv *)env
                                                                          withNSObjectArray:(IOSObjectArray *)args {
  id<EduStanfordNlpLingTokensregexTypesValue> value = [((id<EduStanfordNlpLingTokensregexTypesExpression>) nil_chk(valueExpr_)) evaluateWithEduStanfordNlpLingTokensregexEnv:env withNSObjectArray:args];
  if (args != nil) {
    if (args->size_ == 1 && [EduStanfordNlpUtilCoreMap_class_() isInstance:IOSObjectArray_Get(args, 0)]) {
      id<EduStanfordNlpUtilCoreMap> cm = (id<EduStanfordNlpUtilCoreMap>) cast_check(IOSObjectArray_Get(args, 0), EduStanfordNlpUtilCoreMap_class_());
      IOSClass *annotationKey = EduStanfordNlpLingTokensregexEnvLookup_lookupAnnotationKeyWithEduStanfordNlpLingTokensregexEnv_withNSString_(env, varName_);
      if (annotationKey != nil) {
        (void) [((id<EduStanfordNlpUtilCoreMap>) nil_chk(cm)) setWithIOSClass:annotationKey withId:(value != nil) ? [((id<EduStanfordNlpLingTokensregexTypesValue>) nil_chk(value)) get] : nil];
        return value;
      }
    }
  }
  if (bindAsValue_) {
    [((EduStanfordNlpLingTokensregexEnv *) nil_chk(env)) bindWithNSString:varName_ withId:value];
  }
  else {
    [((EduStanfordNlpLingTokensregexEnv *) nil_chk(env)) bindWithNSString:varName_ withId:(value != nil) ? [((id<EduStanfordNlpLingTokensregexTypesValue>) nil_chk(value)) get] : nil];
    if (EduStanfordNlpLingTokensregexTypesExpressions_TYPE_REGEX == [((id<EduStanfordNlpLingTokensregexTypesValue>) nil_chk(value)) getType]) {
      @try {
        id vobj = [value get];
        if ([vobj isKindOfClass:[NSString class]]) {
          [env bindStringRegexWithNSString:varName_ withNSString:(NSString *) cast_chk(vobj, [NSString class])];
        }
        else if ([vobj isKindOfClass:[JavaUtilRegexPattern class]]) {
          [env bindStringRegexWithNSString:varName_ withNSString:[((JavaUtilRegexPattern *) nil_chk(((JavaUtilRegexPattern *) cast_chk(vobj, [JavaUtilRegexPattern class])))) pattern]];
        }
      }
      @catch (JavaLangException *ex) {
      }
    }
  }
  return value;
}

- (jboolean)isEqual:(id)o {
  if (self == o) return true;
  if (!([o isKindOfClass:[EduStanfordNlpLingTokensregexTypesExpressions_VarAssignmentExpression class]])) return false;
  if (![super isEqual:o]) return false;
  EduStanfordNlpLingTokensregexTypesExpressions_VarAssignmentExpression *that = (EduStanfordNlpLingTokensregexTypesExpressions_VarAssignmentExpression *) cast_chk(o, [EduStanfordNlpLingTokensregexTypesExpressions_VarAssignmentExpression class]);
  if (bindAsValue_ != ((EduStanfordNlpLingTokensregexTypesExpressions_VarAssignmentExpression *) nil_chk(that))->bindAsValue_) return false;
  if (valueExpr_ != nil ? ![valueExpr_ isEqual:that->valueExpr_] : that->valueExpr_ != nil) return false;
  if (varName_ != nil ? ![varName_ isEqual:that->varName_] : that->varName_ != nil) return false;
  return true;
}

- (NSUInteger)hash {
  jint result = ((jint) [super hash]);
  result = 31 * result + (varName_ != nil ? ((jint) [varName_ hash]) : 0);
  result = 31 * result + (valueExpr_ != nil ? ((jint) [valueExpr_ hash]) : 0);
  result = 31 * result + (bindAsValue_ ? 1 : 0);
  return result;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexTypesValue;", 0x81, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 5, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withEduStanfordNlpLingTokensregexTypesExpression:withBoolean:);
  methods[1].selector = @selector(evaluateWithEduStanfordNlpLingTokensregexEnv:withNSObjectArray:);
  methods[2].selector = @selector(isEqual:);
  methods[3].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "varName_", "LNSString;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "valueExpr_", "LEduStanfordNlpLingTokensregexTypesExpression;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "bindAsValue_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LEduStanfordNlpLingTokensregexTypesExpression;Z", "evaluate", "LEduStanfordNlpLingTokensregexEnv;[LNSObject;", "equals", "LNSObject;", "hashCode", "LEduStanfordNlpLingTokensregexTypesExpressions;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexTypesExpressions_VarAssignmentExpression = { "VarAssignmentExpression", "edu.stanford.nlp.ling.tokensregex.types", ptrTable, methods, fields, 7, 0x9, 4, 3, 6, -1, -1, -1, -1 };
  return &_EduStanfordNlpLingTokensregexTypesExpressions_VarAssignmentExpression;
}

@end

void EduStanfordNlpLingTokensregexTypesExpressions_VarAssignmentExpression_initWithNSString_withEduStanfordNlpLingTokensregexTypesExpression_withBoolean_(EduStanfordNlpLingTokensregexTypesExpressions_VarAssignmentExpression *self, NSString *varName, id<EduStanfordNlpLingTokensregexTypesExpression> valueExpr, jboolean bindAsValue) {
  EduStanfordNlpLingTokensregexTypesExpressions_TypedExpression_initWithNSString_withNSStringArray_(self, @"VAR_ASSIGNMENT", [IOSObjectArray newArrayWithLength:0 type:NSString_class_()]);
  self->varName_ = varName;
  self->valueExpr_ = valueExpr;
  self->bindAsValue_ = bindAsValue;
}

EduStanfordNlpLingTokensregexTypesExpressions_VarAssignmentExpression *new_EduStanfordNlpLingTokensregexTypesExpressions_VarAssignmentExpression_initWithNSString_withEduStanfordNlpLingTokensregexTypesExpression_withBoolean_(NSString *varName, id<EduStanfordNlpLingTokensregexTypesExpression> valueExpr, jboolean bindAsValue) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexTypesExpressions_VarAssignmentExpression, initWithNSString_withEduStanfordNlpLingTokensregexTypesExpression_withBoolean_, varName, valueExpr, bindAsValue)
}

EduStanfordNlpLingTokensregexTypesExpressions_VarAssignmentExpression *create_EduStanfordNlpLingTokensregexTypesExpressions_VarAssignmentExpression_initWithNSString_withEduStanfordNlpLingTokensregexTypesExpression_withBoolean_(NSString *varName, id<EduStanfordNlpLingTokensregexTypesExpression> valueExpr, jboolean bindAsValue) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexTypesExpressions_VarAssignmentExpression, initWithNSString_withEduStanfordNlpLingTokensregexTypesExpression_withBoolean_, varName, valueExpr, bindAsValue)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexTypesExpressions_VarAssignmentExpression)

@implementation EduStanfordNlpLingTokensregexTypesExpressions_VarExpression

- (instancetype)initWithNSString:(NSString *)varname
               withNSStringArray:(IOSObjectArray *)tags {
  EduStanfordNlpLingTokensregexTypesExpressions_VarExpression_initWithNSString_withNSStringArray_(self, varname, tags);
  return self;
}

- (id<EduStanfordNlpLingTokensregexTypesValue>)evaluateWithEduStanfordNlpLingTokensregexEnv:(EduStanfordNlpLingTokensregexEnv *)env
                                                                          withNSObjectArray:(IOSObjectArray *)args {
  id<EduStanfordNlpLingTokensregexTypesExpression> exp = nil;
  NSString *varName = value_;
  if (args != nil) {
    if (args->size_ == 1 && [EduStanfordNlpUtilCoreMap_class_() isInstance:IOSObjectArray_Get(args, 0)]) {
      id<EduStanfordNlpUtilCoreMap> cm = (id<EduStanfordNlpUtilCoreMap>) cast_check(IOSObjectArray_Get(args, 0), EduStanfordNlpUtilCoreMap_class_());
      if ([((NSString *) nil_chk(EduStanfordNlpLingTokensregexTypesExpressions_VAR_SELF)) isEqual:varName]) {
        return EduStanfordNlpLingTokensregexTypesExpressions_createValueWithNSString_withId_withNSStringArray_(varName, cm, [IOSObjectArray newArrayWithLength:0 type:NSString_class_()]);
      }
      IOSClass *annotationKey = EduStanfordNlpLingTokensregexEnvLookup_lookupAnnotationKeyWithEduStanfordNlpLingTokensregexEnv_withNSString_(env, varName);
      if (annotationKey != nil) {
        return EduStanfordNlpLingTokensregexTypesExpressions_createValueWithNSString_withId_withNSStringArray_(varName, [((id<EduStanfordNlpUtilCoreMap>) nil_chk(cm)) getWithIOSClass:annotationKey], [IOSObjectArray newArrayWithLength:0 type:NSString_class_()]);
      }
    }
  }
  if ([((NSString *) nil_chk(EduStanfordNlpLingTokensregexTypesExpressions_VAR_SELF)) isEqual:varName]) {
    return EduStanfordNlpLingTokensregexTypesExpressions_createValueWithNSString_withId_withNSStringArray_(varName, [((EduStanfordNlpLingTokensregexEnv *) nil_chk(env)) peekWithNSString:varName], [IOSObjectArray newArrayWithLength:0 type:NSString_class_()]);
  }
  id obj = [((EduStanfordNlpLingTokensregexEnv *) nil_chk(env)) getWithNSString:varName];
  if (obj != nil) {
    exp = EduStanfordNlpLingTokensregexTypesExpressions_asExpressionWithEduStanfordNlpLingTokensregexEnv_withId_(env, obj);
  }
  id<EduStanfordNlpLingTokensregexTypesValue> v = exp != nil ? [exp evaluateWithEduStanfordNlpLingTokensregexEnv:env withNSObjectArray:args] : nil;
  if (v == nil) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$", @"Unknown variable: ", varName)];
  }
  return v;
}

- (id<EduStanfordNlpLingTokensregexTypesExpression>)assignWithEduStanfordNlpLingTokensregexTypesExpression:(id<EduStanfordNlpLingTokensregexTypesExpression>)expr {
  return new_EduStanfordNlpLingTokensregexTypesExpressions_VarAssignmentExpression_initWithNSString_withEduStanfordNlpLingTokensregexTypesExpression_withBoolean_(value_, expr, true);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x81, -1, 0, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexTypesValue;", 0x81, 1, 2, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexTypesExpression;", 0x1, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withNSStringArray:);
  methods[1].selector = @selector(evaluateWithEduStanfordNlpLingTokensregexEnv:withNSObjectArray:);
  methods[2].selector = @selector(assignWithEduStanfordNlpLingTokensregexTypesExpression:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;[LNSString;", "evaluate", "LEduStanfordNlpLingTokensregexEnv;[LNSObject;", "assign", "LEduStanfordNlpLingTokensregexTypesExpression;", "LEduStanfordNlpLingTokensregexTypesExpressions;", "Ledu/stanford/nlp/ling/tokensregex/types/Expressions$SimpleExpression<Ljava/lang/String;>;Ledu/stanford/nlp/ling/tokensregex/types/AssignableExpression;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexTypesExpressions_VarExpression = { "VarExpression", "edu.stanford.nlp.ling.tokensregex.types", ptrTable, methods, NULL, 7, 0x9, 3, 0, 5, -1, -1, 6, -1 };
  return &_EduStanfordNlpLingTokensregexTypesExpressions_VarExpression;
}

@end

void EduStanfordNlpLingTokensregexTypesExpressions_VarExpression_initWithNSString_withNSStringArray_(EduStanfordNlpLingTokensregexTypesExpressions_VarExpression *self, NSString *varname, IOSObjectArray *tags) {
  EduStanfordNlpLingTokensregexTypesExpressions_SimpleExpression_initWithNSString_withId_withNSStringArray_(self, EduStanfordNlpLingTokensregexTypesExpressions_TYPE_VAR, varname, tags);
}

EduStanfordNlpLingTokensregexTypesExpressions_VarExpression *new_EduStanfordNlpLingTokensregexTypesExpressions_VarExpression_initWithNSString_withNSStringArray_(NSString *varname, IOSObjectArray *tags) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexTypesExpressions_VarExpression, initWithNSString_withNSStringArray_, varname, tags)
}

EduStanfordNlpLingTokensregexTypesExpressions_VarExpression *create_EduStanfordNlpLingTokensregexTypesExpressions_VarExpression_initWithNSString_withNSStringArray_(NSString *varname, IOSObjectArray *tags) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexTypesExpressions_VarExpression, initWithNSString_withNSStringArray_, varname, tags)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexTypesExpressions_VarExpression)

@implementation EduStanfordNlpLingTokensregexTypesExpressions_RegexMatchVarExpression

- (instancetype)initWithNSString:(NSString *)groupname
               withNSStringArray:(IOSObjectArray *)tags {
  EduStanfordNlpLingTokensregexTypesExpressions_RegexMatchVarExpression_initWithNSString_withNSStringArray_(self, groupname, tags);
  return self;
}

- (instancetype)initWithJavaLangInteger:(JavaLangInteger *)groupid
                      withNSStringArray:(IOSObjectArray *)tags {
  EduStanfordNlpLingTokensregexTypesExpressions_RegexMatchVarExpression_initWithJavaLangInteger_withNSStringArray_(self, groupid, tags);
  return self;
}

+ (EduStanfordNlpLingTokensregexTypesExpressions_RegexMatchVarExpression *)valueOfWithNSString:(NSString *)group {
  return EduStanfordNlpLingTokensregexTypesExpressions_RegexMatchVarExpression_valueOfWithNSString_(group);
}

- (id<EduStanfordNlpLingTokensregexTypesValue>)evaluateWithEduStanfordNlpLingTokensregexEnv:(EduStanfordNlpLingTokensregexEnv *)env
                                                                          withNSObjectArray:(IOSObjectArray *)args {
  if (args != nil && args->size_ > 0) {
    if ([EduStanfordNlpLingTokensregexSequenceMatchResult_class_() isInstance:IOSObjectArray_Get(args, 0)]) {
      id<EduStanfordNlpLingTokensregexSequenceMatchResult> mr = (id<EduStanfordNlpLingTokensregexSequenceMatchResult>) cast_check(IOSObjectArray_Get(args, 0), EduStanfordNlpLingTokensregexSequenceMatchResult_class_());
      id v = [self get];
      if ([v isKindOfClass:[NSString class]]) {
        return new_EduStanfordNlpLingTokensregexTypesExpressions_PrimitiveValue_initWithNSString_withId_withNSStringArray_(EduStanfordNlpLingTokensregexTypesExpressions_TYPE_TOKENS, [((id<EduStanfordNlpLingTokensregexSequenceMatchResult>) nil_chk(mr)) groupNodesWithNSString:(NSString *) cast_chk(v, [NSString class])], [IOSObjectArray newArrayWithLength:0 type:NSString_class_()]);
      }
      else if ([v isKindOfClass:[JavaLangInteger class]]) {
        return new_EduStanfordNlpLingTokensregexTypesExpressions_PrimitiveValue_initWithNSString_withId_withNSStringArray_(EduStanfordNlpLingTokensregexTypesExpressions_TYPE_TOKENS, [((id<EduStanfordNlpLingTokensregexSequenceMatchResult>) nil_chk(mr)) groupNodesWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(v, [JavaLangInteger class]))) intValue]], [IOSObjectArray newArrayWithLength:0 type:NSString_class_()]);
      }
      else {
        @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"String match result must be referred to by group id");
      }
    }
    else if ([JavaUtilRegexMatchResult_class_() isInstance:IOSObjectArray_Get(args, 0)]) {
      id<JavaUtilRegexMatchResult> mr = (id<JavaUtilRegexMatchResult>) cast_check(IOSObjectArray_Get(args, 0), JavaUtilRegexMatchResult_class_());
      id v = [self get];
      if ([v isKindOfClass:[JavaLangInteger class]]) {
        NSString *str = [((id<JavaUtilRegexMatchResult>) nil_chk(mr)) groupWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([self get], [JavaLangInteger class]))) intValue]];
        return new_EduStanfordNlpLingTokensregexTypesExpressions_PrimitiveValue_initWithNSString_withId_withNSStringArray_(EduStanfordNlpLingTokensregexTypesExpressions_TYPE_STRING, str, [IOSObjectArray newArrayWithLength:0 type:NSString_class_()]);
      }
      else {
        @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"String match result must be referred to by group id");
      }
    }
  }
  return nil;
}

- (id<EduStanfordNlpLingTokensregexTypesExpression>)assignWithEduStanfordNlpLingTokensregexTypesExpression:(id<EduStanfordNlpLingTokensregexTypesExpression>)expr {
  return new_EduStanfordNlpLingTokensregexTypesExpressions_VarAssignmentExpression_initWithNSString_withEduStanfordNlpLingTokensregexTypesExpression_withBoolean_([nil_chk(value_) description], expr, false);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x81, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x81, -1, 1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexTypesExpressions_RegexMatchVarExpression;", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexTypesValue;", 0x81, 4, 5, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexTypesExpression;", 0x1, 6, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withNSStringArray:);
  methods[1].selector = @selector(initWithJavaLangInteger:withNSStringArray:);
  methods[2].selector = @selector(valueOfWithNSString:);
  methods[3].selector = @selector(evaluateWithEduStanfordNlpLingTokensregexEnv:withNSObjectArray:);
  methods[4].selector = @selector(assignWithEduStanfordNlpLingTokensregexTypesExpression:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;[LNSString;", "LJavaLangInteger;[LNSString;", "valueOf", "LNSString;", "evaluate", "LEduStanfordNlpLingTokensregexEnv;[LNSObject;", "assign", "LEduStanfordNlpLingTokensregexTypesExpression;", "LEduStanfordNlpLingTokensregexTypesExpressions;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexTypesExpressions_RegexMatchVarExpression = { "RegexMatchVarExpression", "edu.stanford.nlp.ling.tokensregex.types", ptrTable, methods, NULL, 7, 0x9, 5, 0, 8, -1, -1, -1, -1 };
  return &_EduStanfordNlpLingTokensregexTypesExpressions_RegexMatchVarExpression;
}

@end

void EduStanfordNlpLingTokensregexTypesExpressions_RegexMatchVarExpression_initWithNSString_withNSStringArray_(EduStanfordNlpLingTokensregexTypesExpressions_RegexMatchVarExpression *self, NSString *groupname, IOSObjectArray *tags) {
  EduStanfordNlpLingTokensregexTypesExpressions_SimpleExpression_initWithNSString_withId_withNSStringArray_(self, EduStanfordNlpLingTokensregexTypesExpressions_TYPE_REGEXMATCHVAR, groupname, tags);
}

EduStanfordNlpLingTokensregexTypesExpressions_RegexMatchVarExpression *new_EduStanfordNlpLingTokensregexTypesExpressions_RegexMatchVarExpression_initWithNSString_withNSStringArray_(NSString *groupname, IOSObjectArray *tags) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexTypesExpressions_RegexMatchVarExpression, initWithNSString_withNSStringArray_, groupname, tags)
}

EduStanfordNlpLingTokensregexTypesExpressions_RegexMatchVarExpression *create_EduStanfordNlpLingTokensregexTypesExpressions_RegexMatchVarExpression_initWithNSString_withNSStringArray_(NSString *groupname, IOSObjectArray *tags) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexTypesExpressions_RegexMatchVarExpression, initWithNSString_withNSStringArray_, groupname, tags)
}

void EduStanfordNlpLingTokensregexTypesExpressions_RegexMatchVarExpression_initWithJavaLangInteger_withNSStringArray_(EduStanfordNlpLingTokensregexTypesExpressions_RegexMatchVarExpression *self, JavaLangInteger *groupid, IOSObjectArray *tags) {
  EduStanfordNlpLingTokensregexTypesExpressions_SimpleExpression_initWithNSString_withId_withNSStringArray_(self, EduStanfordNlpLingTokensregexTypesExpressions_TYPE_REGEXMATCHVAR, groupid, tags);
}

EduStanfordNlpLingTokensregexTypesExpressions_RegexMatchVarExpression *new_EduStanfordNlpLingTokensregexTypesExpressions_RegexMatchVarExpression_initWithJavaLangInteger_withNSStringArray_(JavaLangInteger *groupid, IOSObjectArray *tags) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexTypesExpressions_RegexMatchVarExpression, initWithJavaLangInteger_withNSStringArray_, groupid, tags)
}

EduStanfordNlpLingTokensregexTypesExpressions_RegexMatchVarExpression *create_EduStanfordNlpLingTokensregexTypesExpressions_RegexMatchVarExpression_initWithJavaLangInteger_withNSStringArray_(JavaLangInteger *groupid, IOSObjectArray *tags) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexTypesExpressions_RegexMatchVarExpression, initWithJavaLangInteger_withNSStringArray_, groupid, tags)
}

EduStanfordNlpLingTokensregexTypesExpressions_RegexMatchVarExpression *EduStanfordNlpLingTokensregexTypesExpressions_RegexMatchVarExpression_valueOfWithNSString_(NSString *group) {
  EduStanfordNlpLingTokensregexTypesExpressions_RegexMatchVarExpression_initialize();
  if ([((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(JreLoadStatic(EduStanfordNlpLingTokensregexTypesExpressions, DIGITS_PATTERN))) matcherWithJavaLangCharSequence:group])) matches]) {
    JavaLangInteger *n = JavaLangInteger_valueOfWithNSString_(group);
    return new_EduStanfordNlpLingTokensregexTypesExpressions_RegexMatchVarExpression_initWithJavaLangInteger_withNSStringArray_(n, [IOSObjectArray newArrayWithLength:0 type:NSString_class_()]);
  }
  else {
    return new_EduStanfordNlpLingTokensregexTypesExpressions_RegexMatchVarExpression_initWithNSString_withNSStringArray_(group, [IOSObjectArray newArrayWithLength:0 type:NSString_class_()]);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexTypesExpressions_RegexMatchVarExpression)

@implementation EduStanfordNlpLingTokensregexTypesExpressions_RegexMatchResultVarExpression

- (instancetype)initWithNSString:(NSString *)groupname
               withNSStringArray:(IOSObjectArray *)tags {
  EduStanfordNlpLingTokensregexTypesExpressions_RegexMatchResultVarExpression_initWithNSString_withNSStringArray_(self, groupname, tags);
  return self;
}

- (instancetype)initWithJavaLangInteger:(JavaLangInteger *)groupid
                      withNSStringArray:(IOSObjectArray *)tags {
  EduStanfordNlpLingTokensregexTypesExpressions_RegexMatchResultVarExpression_initWithJavaLangInteger_withNSStringArray_(self, groupid, tags);
  return self;
}

+ (EduStanfordNlpLingTokensregexTypesExpressions_RegexMatchResultVarExpression *)valueOfWithNSString:(NSString *)group {
  return EduStanfordNlpLingTokensregexTypesExpressions_RegexMatchResultVarExpression_valueOfWithNSString_(group);
}

- (id<EduStanfordNlpLingTokensregexTypesValue>)evaluateWithEduStanfordNlpLingTokensregexEnv:(EduStanfordNlpLingTokensregexEnv *)env
                                                                          withNSObjectArray:(IOSObjectArray *)args {
  if (args != nil && args->size_ > 0) {
    if ([EduStanfordNlpLingTokensregexSequenceMatchResult_class_() isInstance:IOSObjectArray_Get(args, 0)]) {
      id<EduStanfordNlpLingTokensregexSequenceMatchResult> mr = (id<EduStanfordNlpLingTokensregexSequenceMatchResult>) cast_check(IOSObjectArray_Get(args, 0), EduStanfordNlpLingTokensregexSequenceMatchResult_class_());
      id v = [self get];
      if ([v isKindOfClass:[NSString class]]) {
        return new_EduStanfordNlpLingTokensregexTypesExpressions_PrimitiveValue_initWithNSString_withId_withNSStringArray_(@"MATCHED_GROUP_INFO", [((id<EduStanfordNlpLingTokensregexSequenceMatchResult>) nil_chk(mr)) groupInfoWithNSString:(NSString *) cast_chk(v, [NSString class])], [IOSObjectArray newArrayWithLength:0 type:NSString_class_()]);
      }
      else if ([v isKindOfClass:[JavaLangInteger class]]) {
        return new_EduStanfordNlpLingTokensregexTypesExpressions_PrimitiveValue_initWithNSString_withId_withNSStringArray_(@"MATCHED_GROUP_INFO", [((id<EduStanfordNlpLingTokensregexSequenceMatchResult>) nil_chk(mr)) groupInfoWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(v, [JavaLangInteger class]))) intValue]], [IOSObjectArray newArrayWithLength:0 type:NSString_class_()]);
      }
      else {
        @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"String match result must be referred to by group id");
      }
    }
  }
  return nil;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x81, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x81, -1, 1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexTypesExpressions_RegexMatchResultVarExpression;", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexTypesValue;", 0x81, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withNSStringArray:);
  methods[1].selector = @selector(initWithJavaLangInteger:withNSStringArray:);
  methods[2].selector = @selector(valueOfWithNSString:);
  methods[3].selector = @selector(evaluateWithEduStanfordNlpLingTokensregexEnv:withNSObjectArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;[LNSString;", "LJavaLangInteger;[LNSString;", "valueOf", "LNSString;", "evaluate", "LEduStanfordNlpLingTokensregexEnv;[LNSObject;", "LEduStanfordNlpLingTokensregexTypesExpressions;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexTypesExpressions_RegexMatchResultVarExpression = { "RegexMatchResultVarExpression", "edu.stanford.nlp.ling.tokensregex.types", ptrTable, methods, NULL, 7, 0x9, 4, 0, 6, -1, -1, -1, -1 };
  return &_EduStanfordNlpLingTokensregexTypesExpressions_RegexMatchResultVarExpression;
}

@end

void EduStanfordNlpLingTokensregexTypesExpressions_RegexMatchResultVarExpression_initWithNSString_withNSStringArray_(EduStanfordNlpLingTokensregexTypesExpressions_RegexMatchResultVarExpression *self, NSString *groupname, IOSObjectArray *tags) {
  EduStanfordNlpLingTokensregexTypesExpressions_SimpleExpression_initWithNSString_withId_withNSStringArray_(self, EduStanfordNlpLingTokensregexTypesExpressions_TYPE_REGEXMATCHVAR, groupname, tags);
}

EduStanfordNlpLingTokensregexTypesExpressions_RegexMatchResultVarExpression *new_EduStanfordNlpLingTokensregexTypesExpressions_RegexMatchResultVarExpression_initWithNSString_withNSStringArray_(NSString *groupname, IOSObjectArray *tags) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexTypesExpressions_RegexMatchResultVarExpression, initWithNSString_withNSStringArray_, groupname, tags)
}

EduStanfordNlpLingTokensregexTypesExpressions_RegexMatchResultVarExpression *create_EduStanfordNlpLingTokensregexTypesExpressions_RegexMatchResultVarExpression_initWithNSString_withNSStringArray_(NSString *groupname, IOSObjectArray *tags) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexTypesExpressions_RegexMatchResultVarExpression, initWithNSString_withNSStringArray_, groupname, tags)
}

void EduStanfordNlpLingTokensregexTypesExpressions_RegexMatchResultVarExpression_initWithJavaLangInteger_withNSStringArray_(EduStanfordNlpLingTokensregexTypesExpressions_RegexMatchResultVarExpression *self, JavaLangInteger *groupid, IOSObjectArray *tags) {
  EduStanfordNlpLingTokensregexTypesExpressions_SimpleExpression_initWithNSString_withId_withNSStringArray_(self, EduStanfordNlpLingTokensregexTypesExpressions_TYPE_REGEXMATCHVAR, groupid, tags);
}

EduStanfordNlpLingTokensregexTypesExpressions_RegexMatchResultVarExpression *new_EduStanfordNlpLingTokensregexTypesExpressions_RegexMatchResultVarExpression_initWithJavaLangInteger_withNSStringArray_(JavaLangInteger *groupid, IOSObjectArray *tags) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexTypesExpressions_RegexMatchResultVarExpression, initWithJavaLangInteger_withNSStringArray_, groupid, tags)
}

EduStanfordNlpLingTokensregexTypesExpressions_RegexMatchResultVarExpression *create_EduStanfordNlpLingTokensregexTypesExpressions_RegexMatchResultVarExpression_initWithJavaLangInteger_withNSStringArray_(JavaLangInteger *groupid, IOSObjectArray *tags) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexTypesExpressions_RegexMatchResultVarExpression, initWithJavaLangInteger_withNSStringArray_, groupid, tags)
}

EduStanfordNlpLingTokensregexTypesExpressions_RegexMatchResultVarExpression *EduStanfordNlpLingTokensregexTypesExpressions_RegexMatchResultVarExpression_valueOfWithNSString_(NSString *group) {
  EduStanfordNlpLingTokensregexTypesExpressions_RegexMatchResultVarExpression_initialize();
  if ([((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(JreLoadStatic(EduStanfordNlpLingTokensregexTypesExpressions, DIGITS_PATTERN))) matcherWithJavaLangCharSequence:group])) matches]) {
    JavaLangInteger *n = JavaLangInteger_valueOfWithNSString_(group);
    return new_EduStanfordNlpLingTokensregexTypesExpressions_RegexMatchResultVarExpression_initWithJavaLangInteger_withNSStringArray_(n, [IOSObjectArray newArrayWithLength:0 type:NSString_class_()]);
  }
  else {
    return new_EduStanfordNlpLingTokensregexTypesExpressions_RegexMatchResultVarExpression_initWithNSString_withNSStringArray_(group, [IOSObjectArray newArrayWithLength:0 type:NSString_class_()]);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexTypesExpressions_RegexMatchResultVarExpression)

@implementation EduStanfordNlpLingTokensregexTypesExpressions_FunctionCallExpression

- (instancetype)initWithNSString:(NSString *)function
                withJavaUtilList:(id<JavaUtilList>)params
               withNSStringArray:(IOSObjectArray *)tags {
  EduStanfordNlpLingTokensregexTypesExpressions_FunctionCallExpression_initWithNSString_withJavaUtilList_withNSStringArray_(self, function, params, tags);
  return self;
}

- (NSString *)description {
  return JreStrcat("$C$C", function_, '(', EduStanfordNlpUtilStringUtils_joinWithJavaLangIterable_withNSString_(params_, @", "), ')');
}

- (id<EduStanfordNlpLingTokensregexTypesExpression>)simplifyWithEduStanfordNlpLingTokensregexEnv:(EduStanfordNlpLingTokensregexEnv *)env {
  jboolean paramsAllHasValue = true;
  id<JavaUtilList> simplifiedParams = new_JavaUtilArrayList_initWithInt_([((id<JavaUtilList>) nil_chk(params_)) size]);
  for (id<EduStanfordNlpLingTokensregexTypesExpression> __strong param in params_) {
    id<EduStanfordNlpLingTokensregexTypesExpression> simplified = [((id<EduStanfordNlpLingTokensregexTypesExpression>) nil_chk(param)) simplifyWithEduStanfordNlpLingTokensregexEnv:env];
    [simplifiedParams addWithId:simplified];
    if (!([((id<EduStanfordNlpLingTokensregexTypesExpression>) nil_chk(simplified)) hasValue])) {
      paramsAllHasValue = false;
    }
  }
  id<EduStanfordNlpLingTokensregexTypesExpression> res = new_EduStanfordNlpLingTokensregexTypesExpressions_FunctionCallExpression_initWithNSString_withJavaUtilList_withNSStringArray_(function_, simplifiedParams, [IOSObjectArray newArrayWithLength:0 type:NSString_class_()]);
  if (paramsAllHasValue) {
    return [res evaluateWithEduStanfordNlpLingTokensregexEnv:env withNSObjectArray:[IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]];
  }
  else {
    return res;
  }
}

- (id<EduStanfordNlpLingTokensregexTypesValue>)evaluateWithEduStanfordNlpLingTokensregexEnv:(EduStanfordNlpLingTokensregexEnv *)env
                                                                          withNSObjectArray:(IOSObjectArray *)args {
  id funcValue = EduStanfordNlpLingTokensregexTypesValueFunctions_lookupFunctionObjectWithEduStanfordNlpLingTokensregexEnv_withNSString_(env, function_);
  if (funcValue == nil) {
    @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$", @"Unknown function ", function_));
  }
  if ([EduStanfordNlpLingTokensregexTypesValue_class_() isInstance:funcValue]) {
    funcValue = [((id<EduStanfordNlpLingTokensregexTypesValue>) nil_chk([((id<EduStanfordNlpLingTokensregexTypesValue>) cast_check(funcValue, EduStanfordNlpLingTokensregexTypesValue_class_())) evaluateWithEduStanfordNlpLingTokensregexEnv:env withNSObjectArray:args])) get];
  }
  if ([EduStanfordNlpLingTokensregexTypesValueFunction_class_() isInstance:funcValue]) {
    id<EduStanfordNlpLingTokensregexTypesValueFunction> f = (id<EduStanfordNlpLingTokensregexTypesValueFunction>) cast_check(funcValue, EduStanfordNlpLingTokensregexTypesValueFunction_class_());
    id<JavaUtilList> evaled = new_JavaUtilArrayList_init();
    for (id<EduStanfordNlpLingTokensregexTypesExpression> __strong param in nil_chk(params_)) {
      [evaled addWithId:[((id<EduStanfordNlpLingTokensregexTypesExpression>) nil_chk(param)) evaluateWithEduStanfordNlpLingTokensregexEnv:env withNSObjectArray:args]];
    }
    return [((id<EduStanfordNlpLingTokensregexTypesValueFunction>) nil_chk(f)) applyWithEduStanfordNlpLingTokensregexEnv:env withJavaUtilList:evaled];
  }
  else if ([JavaUtilCollection_class_() isInstance:funcValue]) {
    id<JavaUtilList> evaled = new_JavaUtilArrayList_init();
    for (id<EduStanfordNlpLingTokensregexTypesExpression> __strong param in nil_chk(params_)) {
      [evaled addWithId:[((id<EduStanfordNlpLingTokensregexTypesExpression>) nil_chk(param)) evaluateWithEduStanfordNlpLingTokensregexEnv:env withNSObjectArray:args]];
    }
    id<JavaUtilCollection> fs = (id<JavaUtilCollection>) cast_check(funcValue, JavaUtilCollection_class_());
    for (id<EduStanfordNlpLingTokensregexTypesValueFunction> __strong f in nil_chk(fs)) {
      if ([((id<EduStanfordNlpLingTokensregexTypesValueFunction>) nil_chk(f)) checkArgsWithJavaUtilList:evaled]) {
        return [f applyWithEduStanfordNlpLingTokensregexEnv:env withJavaUtilList:evaled];
      }
    }
    JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
    (void) [sb appendWithNSString:JreStrcat("$$$", @"Cannot find function matching args: ", function_, JreLoadStatic(EduStanfordNlpLingTokensregexTypesExpressions, NEWLINE))];
    (void) [sb appendWithNSString:JreStrcat("$$$", @"Args are: ", EduStanfordNlpUtilStringUtils_joinWithJavaLangIterable_withNSString_(evaled, @","), JreLoadStatic(EduStanfordNlpLingTokensregexTypesExpressions, NEWLINE))];
    if ([fs size] > 0) {
      (void) [sb appendWithNSString:JreStrcat("$$", @"Options are:\n", EduStanfordNlpUtilStringUtils_joinWithJavaLangIterable_withNSString_(fs, JreLoadStatic(EduStanfordNlpLingTokensregexTypesExpressions, NEWLINE)))];
    }
    else {
      (void) [sb appendWithNSString:@"No options"];
    }
    @throw new_JavaLangRuntimeException_initWithNSString_([sb description]);
  }
  else if ([funcValue isKindOfClass:[IOSClass class]]) {
    IOSClass *c = (IOSClass *) cast_chk(funcValue, [IOSClass class]);
    id<JavaUtilList> evaled = new_JavaUtilArrayList_init();
    for (id<EduStanfordNlpLingTokensregexTypesExpression> __strong param in nil_chk(params_)) {
      [evaled addWithId:[((id<EduStanfordNlpLingTokensregexTypesExpression>) nil_chk(param)) evaluateWithEduStanfordNlpLingTokensregexEnv:env withNSObjectArray:args]];
    }
    IOSObjectArray *paramTypes = [IOSObjectArray newArrayWithLength:[params_ size] type:IOSClass_class_()];
    IOSObjectArray *objs = [IOSObjectArray newArrayWithLength:[params_ size] type:NSObject_class_()];
    jboolean paramsNotNull = true;
    for (jint i = 0; i < [params_ size]; i++) {
      id<EduStanfordNlpLingTokensregexTypesValue> v = [evaled getWithInt:i];
      if (v != nil) {
        (void) IOSObjectArray_Set(objs, i, [v get]);
        if (IOSObjectArray_Get(objs, i) != nil) {
          (void) IOSObjectArray_Set(paramTypes, i, [nil_chk(IOSObjectArray_Get(objs, i)) getClass]);
        }
        else {
          (void) IOSObjectArray_Set(paramTypes, i, nil);
          paramsNotNull = false;
        }
      }
      else {
        (void) IOSObjectArray_Set(objs, i, nil);
        (void) IOSObjectArray_Set(paramTypes, i, nil);
        paramsNotNull = false;
      }
    }
    if (paramsNotNull) {
      id obj = [((EduStanfordNlpUtilMetaClass *) nil_chk(EduStanfordNlpUtilMetaClass_createWithIOSClass_(c))) createInstanceWithNSObjectArray:objs];
      if (obj != nil) {
        return new_EduStanfordNlpLingTokensregexTypesExpressions_PrimitiveValue_initWithNSString_withId_withNSStringArray_(function_, obj, [IOSObjectArray newArrayWithLength:0 type:NSString_class_()]);
      }
    }
    @try {
      JavaLangReflectConstructor *constructor = nil;
      @try {
        constructor = [((IOSClass *) nil_chk(c)) getConstructor:paramTypes];
      }
      @catch (JavaLangNoSuchMethodException *ex) {
        IOSObjectArray *constructors = [c getConstructors];
        {
          IOSObjectArray *a__ = constructors;
          JavaLangReflectConstructor * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
          JavaLangReflectConstructor * const *e__ = b__ + a__->size_;
          while (b__ < e__) {
            JavaLangReflectConstructor *cons = *b__++;
            IOSObjectArray *consParamTypes = [((JavaLangReflectConstructor *) nil_chk(cons)) getParameterTypes];
            jboolean compatible = EduStanfordNlpLingTokensregexTypesExpressions_isArgTypesCompatibleWithIOSClassArray_withIOSClassArray_(paramTypes, consParamTypes);
            if (compatible) {
              constructor = cons;
              break;
            }
          }
        }
        if (constructor == nil) {
          @throw new_JavaLangRuntimeException_initWithNSString_withNSException_(JreStrcat("$@", @"Cannot instantiate ", c), ex);
        }
      }
      id obj = [((JavaLangReflectConstructor *) nil_chk(constructor)) newInstanceWithNSObjectArray:objs];
      return new_EduStanfordNlpLingTokensregexTypesExpressions_PrimitiveValue_initWithNSString_withId_withNSStringArray_(function_, obj, [IOSObjectArray newArrayWithLength:0 type:NSString_class_()]);
    }
    @catch (JavaLangReflectInvocationTargetException *ex) {
      @throw new_JavaLangRuntimeException_initWithNSString_withNSException_(JreStrcat("$@", @"Cannot instantiate ", c), ex);
    }
    @catch (JavaLangInstantiationException *ex) {
      @throw new_JavaLangRuntimeException_initWithNSString_withNSException_(JreStrcat("$@", @"Cannot instantiate ", c), ex);
    }
    @catch (JavaLangIllegalAccessException *ex) {
      @throw new_JavaLangRuntimeException_initWithNSString_withNSException_(JreStrcat("$@", @"Cannot instantiate ", c), ex);
    }
  }
  else {
    @throw new_JavaLangUnsupportedOperationException_initWithNSString_(JreStrcat("$@", @"Unsupported function value ", funcValue));
  }
}

- (jboolean)isEqual:(id)o {
  if (self == o) return true;
  if (!([o isKindOfClass:[EduStanfordNlpLingTokensregexTypesExpressions_FunctionCallExpression class]])) return false;
  EduStanfordNlpLingTokensregexTypesExpressions_FunctionCallExpression *that = (EduStanfordNlpLingTokensregexTypesExpressions_FunctionCallExpression *) cast_chk(o, [EduStanfordNlpLingTokensregexTypesExpressions_FunctionCallExpression class]);
  if (function_ != nil ? ![function_ isEqual:((EduStanfordNlpLingTokensregexTypesExpressions_FunctionCallExpression *) nil_chk(that))->function_] : ((EduStanfordNlpLingTokensregexTypesExpressions_FunctionCallExpression *) nil_chk(that))->function_ != nil) return false;
  if (params_ != nil ? ![params_ isEqual:that->params_] : that->params_ != nil) return false;
  return true;
}

- (NSUInteger)hash {
  jint result = function_ != nil ? ((jint) [function_ hash]) : 0;
  result = 31 * result + (params_ != nil ? ((jint) [params_ hash]) : 0);
  return result;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x81, -1, 0, -1, 1, -1, -1 },
    { NULL, "LNSString;", 0x1, 2, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexTypesExpression;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexTypesValue;", 0x81, 5, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 9, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withJavaUtilList:withNSStringArray:);
  methods[1].selector = @selector(description);
  methods[2].selector = @selector(simplifyWithEduStanfordNlpLingTokensregexEnv:);
  methods[3].selector = @selector(evaluateWithEduStanfordNlpLingTokensregexEnv:withNSObjectArray:);
  methods[4].selector = @selector(isEqual:);
  methods[5].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "function_", "LNSString;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "params_", "LJavaUtilList;", .constantValue.asLong = 0, 0x10, -1, -1, 10, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LJavaUtilList;[LNSString;", "(Ljava/lang/String;Ljava/util/List<+Ledu/stanford/nlp/ling/tokensregex/types/Expression;>;[Ljava/lang/String;)V", "toString", "simplify", "LEduStanfordNlpLingTokensregexEnv;", "evaluate", "LEduStanfordNlpLingTokensregexEnv;[LNSObject;", "equals", "LNSObject;", "hashCode", "Ljava/util/List<+Ledu/stanford/nlp/ling/tokensregex/types/Expression;>;", "LEduStanfordNlpLingTokensregexTypesExpressions;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexTypesExpressions_FunctionCallExpression = { "FunctionCallExpression", "edu.stanford.nlp.ling.tokensregex.types", ptrTable, methods, fields, 7, 0x9, 6, 2, 11, -1, -1, -1, -1 };
  return &_EduStanfordNlpLingTokensregexTypesExpressions_FunctionCallExpression;
}

@end

void EduStanfordNlpLingTokensregexTypesExpressions_FunctionCallExpression_initWithNSString_withJavaUtilList_withNSStringArray_(EduStanfordNlpLingTokensregexTypesExpressions_FunctionCallExpression *self, NSString *function, id<JavaUtilList> params, IOSObjectArray *tags) {
  EduStanfordNlpLingTokensregexTypesExpressions_TypedExpression_initWithNSString_withNSStringArray_(self, EduStanfordNlpLingTokensregexTypesExpressions_TYPE_FUNCTION, tags);
  self->function_ = function;
  self->params_ = params;
}

EduStanfordNlpLingTokensregexTypesExpressions_FunctionCallExpression *new_EduStanfordNlpLingTokensregexTypesExpressions_FunctionCallExpression_initWithNSString_withJavaUtilList_withNSStringArray_(NSString *function, id<JavaUtilList> params, IOSObjectArray *tags) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexTypesExpressions_FunctionCallExpression, initWithNSString_withJavaUtilList_withNSStringArray_, function, params, tags)
}

EduStanfordNlpLingTokensregexTypesExpressions_FunctionCallExpression *create_EduStanfordNlpLingTokensregexTypesExpressions_FunctionCallExpression_initWithNSString_withJavaUtilList_withNSStringArray_(NSString *function, id<JavaUtilList> params, IOSObjectArray *tags) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexTypesExpressions_FunctionCallExpression, initWithNSString_withJavaUtilList_withNSStringArray_, function, params, tags)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexTypesExpressions_FunctionCallExpression)

@implementation EduStanfordNlpLingTokensregexTypesExpressions_AssignableFunctionCallExpression

- (instancetype)initWithNSString:(NSString *)function
                withJavaUtilList:(id<JavaUtilList>)params
               withNSStringArray:(IOSObjectArray *)tags {
  EduStanfordNlpLingTokensregexTypesExpressions_AssignableFunctionCallExpression_initWithNSString_withJavaUtilList_withNSStringArray_(self, function, params, tags);
  return self;
}

- (id<EduStanfordNlpLingTokensregexTypesExpression>)assignWithEduStanfordNlpLingTokensregexTypesExpression:(id<EduStanfordNlpLingTokensregexTypesExpression>)expr {
  id<JavaUtilList> newParams = new_JavaUtilArrayList_initWithJavaUtilCollection_(params_);
  [newParams addWithId:expr];
  id<EduStanfordNlpLingTokensregexTypesExpression> res = new_EduStanfordNlpLingTokensregexTypesExpressions_FunctionCallExpression_initWithNSString_withJavaUtilList_withNSStringArray_(function_, newParams, [IOSObjectArray newArrayWithLength:0 type:NSString_class_()]);
  [res setTagsWithEduStanfordNlpLingTokensregexTypesTags:tags_];
  return res;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x81, -1, 0, -1, 1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexTypesExpression;", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withJavaUtilList:withNSStringArray:);
  methods[1].selector = @selector(assignWithEduStanfordNlpLingTokensregexTypesExpression:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;LJavaUtilList;[LNSString;", "(Ljava/lang/String;Ljava/util/List<Ledu/stanford/nlp/ling/tokensregex/types/Expression;>;[Ljava/lang/String;)V", "assign", "LEduStanfordNlpLingTokensregexTypesExpression;", "LEduStanfordNlpLingTokensregexTypesExpressions;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexTypesExpressions_AssignableFunctionCallExpression = { "AssignableFunctionCallExpression", "edu.stanford.nlp.ling.tokensregex.types", ptrTable, methods, NULL, 7, 0x9, 2, 0, 4, -1, -1, -1, -1 };
  return &_EduStanfordNlpLingTokensregexTypesExpressions_AssignableFunctionCallExpression;
}

@end

void EduStanfordNlpLingTokensregexTypesExpressions_AssignableFunctionCallExpression_initWithNSString_withJavaUtilList_withNSStringArray_(EduStanfordNlpLingTokensregexTypesExpressions_AssignableFunctionCallExpression *self, NSString *function, id<JavaUtilList> params, IOSObjectArray *tags) {
  EduStanfordNlpLingTokensregexTypesExpressions_FunctionCallExpression_initWithNSString_withJavaUtilList_withNSStringArray_(self, function, params, tags);
}

EduStanfordNlpLingTokensregexTypesExpressions_AssignableFunctionCallExpression *new_EduStanfordNlpLingTokensregexTypesExpressions_AssignableFunctionCallExpression_initWithNSString_withJavaUtilList_withNSStringArray_(NSString *function, id<JavaUtilList> params, IOSObjectArray *tags) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexTypesExpressions_AssignableFunctionCallExpression, initWithNSString_withJavaUtilList_withNSStringArray_, function, params, tags)
}

EduStanfordNlpLingTokensregexTypesExpressions_AssignableFunctionCallExpression *create_EduStanfordNlpLingTokensregexTypesExpressions_AssignableFunctionCallExpression_initWithNSString_withJavaUtilList_withNSStringArray_(NSString *function, id<JavaUtilList> params, IOSObjectArray *tags) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexTypesExpressions_AssignableFunctionCallExpression, initWithNSString_withJavaUtilList_withNSStringArray_, function, params, tags)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexTypesExpressions_AssignableFunctionCallExpression)

@implementation EduStanfordNlpLingTokensregexTypesExpressions_IndexedExpression

- (instancetype)initWithEduStanfordNlpLingTokensregexTypesExpression:(id<EduStanfordNlpLingTokensregexTypesExpression>)expr
                                                             withInt:(jint)index {
  EduStanfordNlpLingTokensregexTypesExpressions_IndexedExpression_initWithEduStanfordNlpLingTokensregexTypesExpression_withInt_(self, expr, index);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpLingTokensregexTypesExpression:withInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LEduStanfordNlpLingTokensregexTypesExpression;I", "LEduStanfordNlpLingTokensregexTypesExpressions;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexTypesExpressions_IndexedExpression = { "IndexedExpression", "edu.stanford.nlp.ling.tokensregex.types", ptrTable, methods, NULL, 7, 0x9, 1, 0, 1, -1, -1, -1, -1 };
  return &_EduStanfordNlpLingTokensregexTypesExpressions_IndexedExpression;
}

@end

void EduStanfordNlpLingTokensregexTypesExpressions_IndexedExpression_initWithEduStanfordNlpLingTokensregexTypesExpression_withInt_(EduStanfordNlpLingTokensregexTypesExpressions_IndexedExpression *self, id<EduStanfordNlpLingTokensregexTypesExpression> expr, jint index) {
  EduStanfordNlpLingTokensregexTypesExpressions_AssignableFunctionCallExpression_initWithNSString_withJavaUtilList_withNSStringArray_(self, @"ListSelect", JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ expr, create_EduStanfordNlpLingTokensregexTypesExpressions_PrimitiveValue_initWithNSString_withId_withNSStringArray_(@"Integer", JavaLangInteger_valueOfWithInt_(index), [IOSObjectArray newArrayWithLength:0 type:NSString_class_()]) } count:2 type:EduStanfordNlpLingTokensregexTypesExpression_class_()]), [IOSObjectArray newArrayWithLength:0 type:NSString_class_()]);
}

EduStanfordNlpLingTokensregexTypesExpressions_IndexedExpression *new_EduStanfordNlpLingTokensregexTypesExpressions_IndexedExpression_initWithEduStanfordNlpLingTokensregexTypesExpression_withInt_(id<EduStanfordNlpLingTokensregexTypesExpression> expr, jint index) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexTypesExpressions_IndexedExpression, initWithEduStanfordNlpLingTokensregexTypesExpression_withInt_, expr, index)
}

EduStanfordNlpLingTokensregexTypesExpressions_IndexedExpression *create_EduStanfordNlpLingTokensregexTypesExpressions_IndexedExpression_initWithEduStanfordNlpLingTokensregexTypesExpression_withInt_(id<EduStanfordNlpLingTokensregexTypesExpression> expr, jint index) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexTypesExpressions_IndexedExpression, initWithEduStanfordNlpLingTokensregexTypesExpression_withInt_, expr, index)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexTypesExpressions_IndexedExpression)

@implementation EduStanfordNlpLingTokensregexTypesExpressions_FieldExpression

- (instancetype)initWithEduStanfordNlpLingTokensregexTypesExpression:(id<EduStanfordNlpLingTokensregexTypesExpression>)expr
                                                        withNSString:(NSString *)field {
  EduStanfordNlpLingTokensregexTypesExpressions_FieldExpression_initWithEduStanfordNlpLingTokensregexTypesExpression_withNSString_(self, expr, field);
  return self;
}

- (instancetype)initWithEduStanfordNlpLingTokensregexTypesExpression:(id<EduStanfordNlpLingTokensregexTypesExpression>)expr
                    withEduStanfordNlpLingTokensregexTypesExpression:(id<EduStanfordNlpLingTokensregexTypesExpression>)field {
  EduStanfordNlpLingTokensregexTypesExpressions_FieldExpression_initWithEduStanfordNlpLingTokensregexTypesExpression_withEduStanfordNlpLingTokensregexTypesExpression_(self, expr, field);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpLingTokensregexTypesExpression:withNSString:);
  methods[1].selector = @selector(initWithEduStanfordNlpLingTokensregexTypesExpression:withEduStanfordNlpLingTokensregexTypesExpression:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LEduStanfordNlpLingTokensregexTypesExpression;LNSString;", "LEduStanfordNlpLingTokensregexTypesExpression;LEduStanfordNlpLingTokensregexTypesExpression;", "LEduStanfordNlpLingTokensregexTypesExpressions;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexTypesExpressions_FieldExpression = { "FieldExpression", "edu.stanford.nlp.ling.tokensregex.types", ptrTable, methods, NULL, 7, 0x9, 2, 0, 2, -1, -1, -1, -1 };
  return &_EduStanfordNlpLingTokensregexTypesExpressions_FieldExpression;
}

@end

void EduStanfordNlpLingTokensregexTypesExpressions_FieldExpression_initWithEduStanfordNlpLingTokensregexTypesExpression_withNSString_(EduStanfordNlpLingTokensregexTypesExpressions_FieldExpression *self, id<EduStanfordNlpLingTokensregexTypesExpression> expr, NSString *field) {
  EduStanfordNlpLingTokensregexTypesExpressions_AssignableFunctionCallExpression_initWithNSString_withJavaUtilList_withNSStringArray_(self, @"Select", JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ expr, create_EduStanfordNlpLingTokensregexTypesExpressions_PrimitiveValue_initWithNSString_withId_withNSStringArray_(EduStanfordNlpLingTokensregexTypesExpressions_TYPE_STRING, field, [IOSObjectArray newArrayWithLength:0 type:NSString_class_()]) } count:2 type:EduStanfordNlpLingTokensregexTypesExpression_class_()]), [IOSObjectArray newArrayWithLength:0 type:NSString_class_()]);
}

EduStanfordNlpLingTokensregexTypesExpressions_FieldExpression *new_EduStanfordNlpLingTokensregexTypesExpressions_FieldExpression_initWithEduStanfordNlpLingTokensregexTypesExpression_withNSString_(id<EduStanfordNlpLingTokensregexTypesExpression> expr, NSString *field) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexTypesExpressions_FieldExpression, initWithEduStanfordNlpLingTokensregexTypesExpression_withNSString_, expr, field)
}

EduStanfordNlpLingTokensregexTypesExpressions_FieldExpression *create_EduStanfordNlpLingTokensregexTypesExpressions_FieldExpression_initWithEduStanfordNlpLingTokensregexTypesExpression_withNSString_(id<EduStanfordNlpLingTokensregexTypesExpression> expr, NSString *field) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexTypesExpressions_FieldExpression, initWithEduStanfordNlpLingTokensregexTypesExpression_withNSString_, expr, field)
}

void EduStanfordNlpLingTokensregexTypesExpressions_FieldExpression_initWithEduStanfordNlpLingTokensregexTypesExpression_withEduStanfordNlpLingTokensregexTypesExpression_(EduStanfordNlpLingTokensregexTypesExpressions_FieldExpression *self, id<EduStanfordNlpLingTokensregexTypesExpression> expr, id<EduStanfordNlpLingTokensregexTypesExpression> field) {
  EduStanfordNlpLingTokensregexTypesExpressions_AssignableFunctionCallExpression_initWithNSString_withJavaUtilList_withNSStringArray_(self, @"Select", JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ expr, field } count:2 type:EduStanfordNlpLingTokensregexTypesExpression_class_()]), [IOSObjectArray newArrayWithLength:0 type:NSString_class_()]);
}

EduStanfordNlpLingTokensregexTypesExpressions_FieldExpression *new_EduStanfordNlpLingTokensregexTypesExpressions_FieldExpression_initWithEduStanfordNlpLingTokensregexTypesExpression_withEduStanfordNlpLingTokensregexTypesExpression_(id<EduStanfordNlpLingTokensregexTypesExpression> expr, id<EduStanfordNlpLingTokensregexTypesExpression> field) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexTypesExpressions_FieldExpression, initWithEduStanfordNlpLingTokensregexTypesExpression_withEduStanfordNlpLingTokensregexTypesExpression_, expr, field)
}

EduStanfordNlpLingTokensregexTypesExpressions_FieldExpression *create_EduStanfordNlpLingTokensregexTypesExpressions_FieldExpression_initWithEduStanfordNlpLingTokensregexTypesExpression_withEduStanfordNlpLingTokensregexTypesExpression_(id<EduStanfordNlpLingTokensregexTypesExpression> expr, id<EduStanfordNlpLingTokensregexTypesExpression> field) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexTypesExpressions_FieldExpression, initWithEduStanfordNlpLingTokensregexTypesExpression_withEduStanfordNlpLingTokensregexTypesExpression_, expr, field)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexTypesExpressions_FieldExpression)

@implementation EduStanfordNlpLingTokensregexTypesExpressions_OrExpression

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)children {
  EduStanfordNlpLingTokensregexTypesExpressions_OrExpression_initWithJavaUtilList_(self, children);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilList:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LJavaUtilList;", "(Ljava/util/List<Ledu/stanford/nlp/ling/tokensregex/types/Expression;>;)V", "LEduStanfordNlpLingTokensregexTypesExpressions;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexTypesExpressions_OrExpression = { "OrExpression", "edu.stanford.nlp.ling.tokensregex.types", ptrTable, methods, NULL, 7, 0x9, 1, 0, 2, -1, -1, -1, -1 };
  return &_EduStanfordNlpLingTokensregexTypesExpressions_OrExpression;
}

@end

void EduStanfordNlpLingTokensregexTypesExpressions_OrExpression_initWithJavaUtilList_(EduStanfordNlpLingTokensregexTypesExpressions_OrExpression *self, id<JavaUtilList> children) {
  EduStanfordNlpLingTokensregexTypesExpressions_FunctionCallExpression_initWithNSString_withJavaUtilList_withNSStringArray_(self, @"Or", children, [IOSObjectArray newArrayWithLength:0 type:NSString_class_()]);
}

EduStanfordNlpLingTokensregexTypesExpressions_OrExpression *new_EduStanfordNlpLingTokensregexTypesExpressions_OrExpression_initWithJavaUtilList_(id<JavaUtilList> children) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexTypesExpressions_OrExpression, initWithJavaUtilList_, children)
}

EduStanfordNlpLingTokensregexTypesExpressions_OrExpression *create_EduStanfordNlpLingTokensregexTypesExpressions_OrExpression_initWithJavaUtilList_(id<JavaUtilList> children) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexTypesExpressions_OrExpression, initWithJavaUtilList_, children)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexTypesExpressions_OrExpression)

@implementation EduStanfordNlpLingTokensregexTypesExpressions_AndExpression

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)children {
  EduStanfordNlpLingTokensregexTypesExpressions_AndExpression_initWithJavaUtilList_(self, children);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilList:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LJavaUtilList;", "(Ljava/util/List<Ledu/stanford/nlp/ling/tokensregex/types/Expression;>;)V", "LEduStanfordNlpLingTokensregexTypesExpressions;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexTypesExpressions_AndExpression = { "AndExpression", "edu.stanford.nlp.ling.tokensregex.types", ptrTable, methods, NULL, 7, 0x9, 1, 0, 2, -1, -1, -1, -1 };
  return &_EduStanfordNlpLingTokensregexTypesExpressions_AndExpression;
}

@end

void EduStanfordNlpLingTokensregexTypesExpressions_AndExpression_initWithJavaUtilList_(EduStanfordNlpLingTokensregexTypesExpressions_AndExpression *self, id<JavaUtilList> children) {
  EduStanfordNlpLingTokensregexTypesExpressions_FunctionCallExpression_initWithNSString_withJavaUtilList_withNSStringArray_(self, @"And", children, [IOSObjectArray newArrayWithLength:0 type:NSString_class_()]);
}

EduStanfordNlpLingTokensregexTypesExpressions_AndExpression *new_EduStanfordNlpLingTokensregexTypesExpressions_AndExpression_initWithJavaUtilList_(id<JavaUtilList> children) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexTypesExpressions_AndExpression, initWithJavaUtilList_, children)
}

EduStanfordNlpLingTokensregexTypesExpressions_AndExpression *create_EduStanfordNlpLingTokensregexTypesExpressions_AndExpression_initWithJavaUtilList_(id<JavaUtilList> children) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexTypesExpressions_AndExpression, initWithJavaUtilList_, children)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexTypesExpressions_AndExpression)

@implementation EduStanfordNlpLingTokensregexTypesExpressions_NotExpression

- (instancetype)initWithEduStanfordNlpLingTokensregexTypesExpression:(id<EduStanfordNlpLingTokensregexTypesExpression>)expr {
  EduStanfordNlpLingTokensregexTypesExpressions_NotExpression_initWithEduStanfordNlpLingTokensregexTypesExpression_(self, expr);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpLingTokensregexTypesExpression:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LEduStanfordNlpLingTokensregexTypesExpression;", "LEduStanfordNlpLingTokensregexTypesExpressions;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexTypesExpressions_NotExpression = { "NotExpression", "edu.stanford.nlp.ling.tokensregex.types", ptrTable, methods, NULL, 7, 0x9, 1, 0, 1, -1, -1, -1, -1 };
  return &_EduStanfordNlpLingTokensregexTypesExpressions_NotExpression;
}

@end

void EduStanfordNlpLingTokensregexTypesExpressions_NotExpression_initWithEduStanfordNlpLingTokensregexTypesExpression_(EduStanfordNlpLingTokensregexTypesExpressions_NotExpression *self, id<EduStanfordNlpLingTokensregexTypesExpression> expr) {
  EduStanfordNlpLingTokensregexTypesExpressions_FunctionCallExpression_initWithNSString_withJavaUtilList_withNSStringArray_(self, @"Not", JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ expr } count:1 type:EduStanfordNlpLingTokensregexTypesExpression_class_()]), [IOSObjectArray newArrayWithLength:0 type:NSString_class_()]);
}

EduStanfordNlpLingTokensregexTypesExpressions_NotExpression *new_EduStanfordNlpLingTokensregexTypesExpressions_NotExpression_initWithEduStanfordNlpLingTokensregexTypesExpression_(id<EduStanfordNlpLingTokensregexTypesExpression> expr) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexTypesExpressions_NotExpression, initWithEduStanfordNlpLingTokensregexTypesExpression_, expr)
}

EduStanfordNlpLingTokensregexTypesExpressions_NotExpression *create_EduStanfordNlpLingTokensregexTypesExpressions_NotExpression_initWithEduStanfordNlpLingTokensregexTypesExpression_(id<EduStanfordNlpLingTokensregexTypesExpression> expr) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexTypesExpressions_NotExpression, initWithEduStanfordNlpLingTokensregexTypesExpression_, expr)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexTypesExpressions_NotExpression)

@implementation EduStanfordNlpLingTokensregexTypesExpressions_IfExpression

- (instancetype)initWithEduStanfordNlpLingTokensregexTypesExpression:(id<EduStanfordNlpLingTokensregexTypesExpression>)cond
                    withEduStanfordNlpLingTokensregexTypesExpression:(id<EduStanfordNlpLingTokensregexTypesExpression>)vt
                    withEduStanfordNlpLingTokensregexTypesExpression:(id<EduStanfordNlpLingTokensregexTypesExpression>)vf {
  EduStanfordNlpLingTokensregexTypesExpressions_IfExpression_initWithEduStanfordNlpLingTokensregexTypesExpression_withEduStanfordNlpLingTokensregexTypesExpression_withEduStanfordNlpLingTokensregexTypesExpression_(self, cond, vt, vf);
  return self;
}

- (id<EduStanfordNlpLingTokensregexTypesValue>)evaluateWithEduStanfordNlpLingTokensregexEnv:(EduStanfordNlpLingTokensregexEnv *)env
                                                                          withNSObjectArray:(IOSObjectArray *)args {
  id<EduStanfordNlpLingTokensregexTypesValue> condValue = [((id<EduStanfordNlpLingTokensregexTypesExpression>) nil_chk(condExpr_)) evaluateWithEduStanfordNlpLingTokensregexEnv:env withNSObjectArray:args];
  JavaLangBoolean *cond = (JavaLangBoolean *) cast_chk([((id<EduStanfordNlpLingTokensregexTypesValue>) nil_chk(condValue)) get], [JavaLangBoolean class]);
  if ([((JavaLangBoolean *) nil_chk(cond)) booleanValue]) {
    return [((id<EduStanfordNlpLingTokensregexTypesExpression>) nil_chk(trueExpr_)) evaluateWithEduStanfordNlpLingTokensregexEnv:env withNSObjectArray:args];
  }
  else {
    return [((id<EduStanfordNlpLingTokensregexTypesExpression>) nil_chk(falseExpr_)) evaluateWithEduStanfordNlpLingTokensregexEnv:env withNSObjectArray:args];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexTypesValue;", 0x81, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpLingTokensregexTypesExpression:withEduStanfordNlpLingTokensregexTypesExpression:withEduStanfordNlpLingTokensregexTypesExpression:);
  methods[1].selector = @selector(evaluateWithEduStanfordNlpLingTokensregexEnv:withNSObjectArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "condExpr_", "LEduStanfordNlpLingTokensregexTypesExpression;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "trueExpr_", "LEduStanfordNlpLingTokensregexTypesExpression;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "falseExpr_", "LEduStanfordNlpLingTokensregexTypesExpression;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpLingTokensregexTypesExpression;LEduStanfordNlpLingTokensregexTypesExpression;LEduStanfordNlpLingTokensregexTypesExpression;", "evaluate", "LEduStanfordNlpLingTokensregexEnv;[LNSObject;", "LEduStanfordNlpLingTokensregexTypesExpressions;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexTypesExpressions_IfExpression = { "IfExpression", "edu.stanford.nlp.ling.tokensregex.types", ptrTable, methods, fields, 7, 0x9, 2, 3, 3, -1, -1, -1, -1 };
  return &_EduStanfordNlpLingTokensregexTypesExpressions_IfExpression;
}

@end

void EduStanfordNlpLingTokensregexTypesExpressions_IfExpression_initWithEduStanfordNlpLingTokensregexTypesExpression_withEduStanfordNlpLingTokensregexTypesExpression_withEduStanfordNlpLingTokensregexTypesExpression_(EduStanfordNlpLingTokensregexTypesExpressions_IfExpression *self, id<EduStanfordNlpLingTokensregexTypesExpression> cond, id<EduStanfordNlpLingTokensregexTypesExpression> vt, id<EduStanfordNlpLingTokensregexTypesExpression> vf) {
  EduStanfordNlpLingTokensregexTypesExpressions_TypedExpression_initWithNSString_withNSStringArray_(self, @"If", [IOSObjectArray newArrayWithLength:0 type:NSString_class_()]);
  self->condExpr_ = cond;
  self->trueExpr_ = vt;
  self->falseExpr_ = vf;
}

EduStanfordNlpLingTokensregexTypesExpressions_IfExpression *new_EduStanfordNlpLingTokensregexTypesExpressions_IfExpression_initWithEduStanfordNlpLingTokensregexTypesExpression_withEduStanfordNlpLingTokensregexTypesExpression_withEduStanfordNlpLingTokensregexTypesExpression_(id<EduStanfordNlpLingTokensregexTypesExpression> cond, id<EduStanfordNlpLingTokensregexTypesExpression> vt, id<EduStanfordNlpLingTokensregexTypesExpression> vf) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexTypesExpressions_IfExpression, initWithEduStanfordNlpLingTokensregexTypesExpression_withEduStanfordNlpLingTokensregexTypesExpression_withEduStanfordNlpLingTokensregexTypesExpression_, cond, vt, vf)
}

EduStanfordNlpLingTokensregexTypesExpressions_IfExpression *create_EduStanfordNlpLingTokensregexTypesExpressions_IfExpression_initWithEduStanfordNlpLingTokensregexTypesExpression_withEduStanfordNlpLingTokensregexTypesExpression_withEduStanfordNlpLingTokensregexTypesExpression_(id<EduStanfordNlpLingTokensregexTypesExpression> cond, id<EduStanfordNlpLingTokensregexTypesExpression> vt, id<EduStanfordNlpLingTokensregexTypesExpression> vf) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexTypesExpressions_IfExpression, initWithEduStanfordNlpLingTokensregexTypesExpression_withEduStanfordNlpLingTokensregexTypesExpression_withEduStanfordNlpLingTokensregexTypesExpression_, cond, vt, vf)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexTypesExpressions_IfExpression)

@implementation EduStanfordNlpLingTokensregexTypesExpressions_CaseExpression

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)conds
withEduStanfordNlpLingTokensregexTypesExpression:(id<EduStanfordNlpLingTokensregexTypesExpression>)elseExpr {
  EduStanfordNlpLingTokensregexTypesExpressions_CaseExpression_initWithJavaUtilList_withEduStanfordNlpLingTokensregexTypesExpression_(self, conds, elseExpr);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilList:withEduStanfordNlpLingTokensregexTypesExpression:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LJavaUtilList;LEduStanfordNlpLingTokensregexTypesExpression;", "(Ljava/util/List<Ledu/stanford/nlp/util/Pair<Ledu/stanford/nlp/ling/tokensregex/types/Expression;Ledu/stanford/nlp/ling/tokensregex/types/Expression;>;>;Ledu/stanford/nlp/ling/tokensregex/types/Expression;)V", "LEduStanfordNlpLingTokensregexTypesExpressions;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexTypesExpressions_CaseExpression = { "CaseExpression", "edu.stanford.nlp.ling.tokensregex.types", ptrTable, methods, NULL, 7, 0x9, 1, 0, 2, -1, -1, -1, -1 };
  return &_EduStanfordNlpLingTokensregexTypesExpressions_CaseExpression;
}

@end

void EduStanfordNlpLingTokensregexTypesExpressions_CaseExpression_initWithJavaUtilList_withEduStanfordNlpLingTokensregexTypesExpression_(EduStanfordNlpLingTokensregexTypesExpressions_CaseExpression *self, id<JavaUtilList> conds, id<EduStanfordNlpLingTokensregexTypesExpression> elseExpr) {
  EduStanfordNlpLingTokensregexTypesExpressions_WrappedExpression_init(self);
  if ([((id<JavaUtilList>) nil_chk(conds)) size] == 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"No conditions!");
  }
  else {
    self->expr_ = elseExpr;
    for (jint i = [conds size] - 1; i >= 0; i--) {
      EduStanfordNlpUtilPair *p = [conds getWithInt:i];
      self->expr_ = new_EduStanfordNlpLingTokensregexTypesExpressions_IfExpression_initWithEduStanfordNlpLingTokensregexTypesExpression_withEduStanfordNlpLingTokensregexTypesExpression_withEduStanfordNlpLingTokensregexTypesExpression_([((EduStanfordNlpUtilPair *) nil_chk(p)) first], [p second], self->expr_);
    }
  }
}

EduStanfordNlpLingTokensregexTypesExpressions_CaseExpression *new_EduStanfordNlpLingTokensregexTypesExpressions_CaseExpression_initWithJavaUtilList_withEduStanfordNlpLingTokensregexTypesExpression_(id<JavaUtilList> conds, id<EduStanfordNlpLingTokensregexTypesExpression> elseExpr) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexTypesExpressions_CaseExpression, initWithJavaUtilList_withEduStanfordNlpLingTokensregexTypesExpression_, conds, elseExpr)
}

EduStanfordNlpLingTokensregexTypesExpressions_CaseExpression *create_EduStanfordNlpLingTokensregexTypesExpressions_CaseExpression_initWithJavaUtilList_withEduStanfordNlpLingTokensregexTypesExpression_(id<JavaUtilList> conds, id<EduStanfordNlpLingTokensregexTypesExpression> elseExpr) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexTypesExpressions_CaseExpression, initWithJavaUtilList_withEduStanfordNlpLingTokensregexTypesExpression_, conds, elseExpr)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexTypesExpressions_CaseExpression)

@implementation EduStanfordNlpLingTokensregexTypesExpressions_ConditionalExpression

- (instancetype)initWithEduStanfordNlpLingTokensregexTypesExpression:(id<EduStanfordNlpLingTokensregexTypesExpression>)expr {
  EduStanfordNlpLingTokensregexTypesExpressions_ConditionalExpression_initWithEduStanfordNlpLingTokensregexTypesExpression_(self, expr);
  return self;
}

- (instancetype)initWithNSString:(NSString *)op
withEduStanfordNlpLingTokensregexTypesExpression:(id<EduStanfordNlpLingTokensregexTypesExpression>)expr1
withEduStanfordNlpLingTokensregexTypesExpression:(id<EduStanfordNlpLingTokensregexTypesExpression>)expr2 {
  EduStanfordNlpLingTokensregexTypesExpressions_ConditionalExpression_initWithNSString_withEduStanfordNlpLingTokensregexTypesExpression_withEduStanfordNlpLingTokensregexTypesExpression_(self, op, expr1, expr2);
  return self;
}

- (NSString *)getType {
  return EduStanfordNlpLingTokensregexTypesExpressions_TYPE_BOOLEAN;
}

- (id<EduStanfordNlpLingTokensregexTypesExpression>)simplifyWithEduStanfordNlpLingTokensregexEnv:(EduStanfordNlpLingTokensregexEnv *)env {
  return self;
}

- (id<EduStanfordNlpLingTokensregexTypesValue>)evaluateWithEduStanfordNlpLingTokensregexEnv:(EduStanfordNlpLingTokensregexEnv *)env
                                                                          withNSObjectArray:(IOSObjectArray *)args {
  id<EduStanfordNlpLingTokensregexTypesValue> v = [((id<EduStanfordNlpLingTokensregexTypesExpression>) nil_chk(expr_)) evaluateWithEduStanfordNlpLingTokensregexEnv:env withNSObjectArray:args];
  return EduStanfordNlpLingTokensregexTypesExpressions_convertValueToBooleanValueWithEduStanfordNlpLingTokensregexTypesValue_withBoolean_(v, false);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexTypesExpression;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexTypesValue;", 0x81, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpLingTokensregexTypesExpression:);
  methods[1].selector = @selector(initWithNSString:withEduStanfordNlpLingTokensregexTypesExpression:withEduStanfordNlpLingTokensregexTypesExpression:);
  methods[2].selector = @selector(getType);
  methods[3].selector = @selector(simplifyWithEduStanfordNlpLingTokensregexEnv:);
  methods[4].selector = @selector(evaluateWithEduStanfordNlpLingTokensregexEnv:withNSObjectArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LEduStanfordNlpLingTokensregexTypesExpression;", "LNSString;LEduStanfordNlpLingTokensregexTypesExpression;LEduStanfordNlpLingTokensregexTypesExpression;", "simplify", "LEduStanfordNlpLingTokensregexEnv;", "evaluate", "LEduStanfordNlpLingTokensregexEnv;[LNSObject;", "LEduStanfordNlpLingTokensregexTypesExpressions;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexTypesExpressions_ConditionalExpression = { "ConditionalExpression", "edu.stanford.nlp.ling.tokensregex.types", ptrTable, methods, NULL, 7, 0x9, 5, 0, 6, -1, -1, -1, -1 };
  return &_EduStanfordNlpLingTokensregexTypesExpressions_ConditionalExpression;
}

@end

void EduStanfordNlpLingTokensregexTypesExpressions_ConditionalExpression_initWithEduStanfordNlpLingTokensregexTypesExpression_(EduStanfordNlpLingTokensregexTypesExpressions_ConditionalExpression *self, id<EduStanfordNlpLingTokensregexTypesExpression> expr) {
  EduStanfordNlpLingTokensregexTypesExpressions_WrappedExpression_init(self);
  self->expr_ = expr;
}

EduStanfordNlpLingTokensregexTypesExpressions_ConditionalExpression *new_EduStanfordNlpLingTokensregexTypesExpressions_ConditionalExpression_initWithEduStanfordNlpLingTokensregexTypesExpression_(id<EduStanfordNlpLingTokensregexTypesExpression> expr) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexTypesExpressions_ConditionalExpression, initWithEduStanfordNlpLingTokensregexTypesExpression_, expr)
}

EduStanfordNlpLingTokensregexTypesExpressions_ConditionalExpression *create_EduStanfordNlpLingTokensregexTypesExpressions_ConditionalExpression_initWithEduStanfordNlpLingTokensregexTypesExpression_(id<EduStanfordNlpLingTokensregexTypesExpression> expr) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexTypesExpressions_ConditionalExpression, initWithEduStanfordNlpLingTokensregexTypesExpression_, expr)
}

void EduStanfordNlpLingTokensregexTypesExpressions_ConditionalExpression_initWithNSString_withEduStanfordNlpLingTokensregexTypesExpression_withEduStanfordNlpLingTokensregexTypesExpression_(EduStanfordNlpLingTokensregexTypesExpressions_ConditionalExpression *self, NSString *op, id<EduStanfordNlpLingTokensregexTypesExpression> expr1, id<EduStanfordNlpLingTokensregexTypesExpression> expr2) {
  EduStanfordNlpLingTokensregexTypesExpressions_WrappedExpression_init(self);
  switch (JreIndexOfStr(op, (id[]){ @">=", @"<=", @">", @"<", @"==", @"!=", @"=~", @"!~" }, 8)) {
    case 0:
    self->expr_ = new_EduStanfordNlpLingTokensregexTypesExpressions_FunctionCallExpression_initWithNSString_withJavaUtilList_withNSStringArray_(@"GE", JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ expr1, expr2 } count:2 type:EduStanfordNlpLingTokensregexTypesExpression_class_()]), [IOSObjectArray newArrayWithLength:0 type:NSString_class_()]);
    break;
    case 1:
    self->expr_ = new_EduStanfordNlpLingTokensregexTypesExpressions_FunctionCallExpression_initWithNSString_withJavaUtilList_withNSStringArray_(@"LE", JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ expr1, expr2 } count:2 type:EduStanfordNlpLingTokensregexTypesExpression_class_()]), [IOSObjectArray newArrayWithLength:0 type:NSString_class_()]);
    break;
    case 2:
    self->expr_ = new_EduStanfordNlpLingTokensregexTypesExpressions_FunctionCallExpression_initWithNSString_withJavaUtilList_withNSStringArray_(@"GT", JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ expr1, expr2 } count:2 type:EduStanfordNlpLingTokensregexTypesExpression_class_()]), [IOSObjectArray newArrayWithLength:0 type:NSString_class_()]);
    break;
    case 3:
    self->expr_ = new_EduStanfordNlpLingTokensregexTypesExpressions_FunctionCallExpression_initWithNSString_withJavaUtilList_withNSStringArray_(@"LT", JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ expr1, expr2 } count:2 type:EduStanfordNlpLingTokensregexTypesExpression_class_()]), [IOSObjectArray newArrayWithLength:0 type:NSString_class_()]);
    break;
    case 4:
    self->expr_ = new_EduStanfordNlpLingTokensregexTypesExpressions_FunctionCallExpression_initWithNSString_withJavaUtilList_withNSStringArray_(@"EQ", JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ expr1, expr2 } count:2 type:EduStanfordNlpLingTokensregexTypesExpression_class_()]), [IOSObjectArray newArrayWithLength:0 type:NSString_class_()]);
    break;
    case 5:
    self->expr_ = new_EduStanfordNlpLingTokensregexTypesExpressions_FunctionCallExpression_initWithNSString_withJavaUtilList_withNSStringArray_(@"NE", JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ expr1, expr2 } count:2 type:EduStanfordNlpLingTokensregexTypesExpression_class_()]), [IOSObjectArray newArrayWithLength:0 type:NSString_class_()]);
    break;
    case 6:
    self->expr_ = new_EduStanfordNlpLingTokensregexTypesExpressions_FunctionCallExpression_initWithNSString_withJavaUtilList_withNSStringArray_(@"Match", JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ expr1, expr2 } count:2 type:EduStanfordNlpLingTokensregexTypesExpression_class_()]), [IOSObjectArray newArrayWithLength:0 type:NSString_class_()]);
    break;
    case 7:
    self->expr_ = new_EduStanfordNlpLingTokensregexTypesExpressions_NotExpression_initWithEduStanfordNlpLingTokensregexTypesExpression_(new_EduStanfordNlpLingTokensregexTypesExpressions_FunctionCallExpression_initWithNSString_withJavaUtilList_withNSStringArray_(@"Match", JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ expr1, expr2 } count:2 type:EduStanfordNlpLingTokensregexTypesExpression_class_()]), [IOSObjectArray newArrayWithLength:0 type:NSString_class_()]));
    break;
  }
}

EduStanfordNlpLingTokensregexTypesExpressions_ConditionalExpression *new_EduStanfordNlpLingTokensregexTypesExpressions_ConditionalExpression_initWithNSString_withEduStanfordNlpLingTokensregexTypesExpression_withEduStanfordNlpLingTokensregexTypesExpression_(NSString *op, id<EduStanfordNlpLingTokensregexTypesExpression> expr1, id<EduStanfordNlpLingTokensregexTypesExpression> expr2) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexTypesExpressions_ConditionalExpression, initWithNSString_withEduStanfordNlpLingTokensregexTypesExpression_withEduStanfordNlpLingTokensregexTypesExpression_, op, expr1, expr2)
}

EduStanfordNlpLingTokensregexTypesExpressions_ConditionalExpression *create_EduStanfordNlpLingTokensregexTypesExpressions_ConditionalExpression_initWithNSString_withEduStanfordNlpLingTokensregexTypesExpression_withEduStanfordNlpLingTokensregexTypesExpression_(NSString *op, id<EduStanfordNlpLingTokensregexTypesExpression> expr1, id<EduStanfordNlpLingTokensregexTypesExpression> expr2) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexTypesExpressions_ConditionalExpression, initWithNSString_withEduStanfordNlpLingTokensregexTypesExpression_withEduStanfordNlpLingTokensregexTypesExpression_, op, expr1, expr2)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexTypesExpressions_ConditionalExpression)

@implementation EduStanfordNlpLingTokensregexTypesExpressions_ListExpression

- (instancetype)initWithNSString:(NSString *)typename_
               withNSStringArray:(IOSObjectArray *)tags {
  EduStanfordNlpLingTokensregexTypesExpressions_ListExpression_initWithNSString_withNSStringArray_(self, typename_, tags);
  return self;
}

- (instancetype)initWithNSString:(NSString *)typename_
                withJavaUtilList:(id<JavaUtilList>)exprs
               withNSStringArray:(IOSObjectArray *)tags {
  EduStanfordNlpLingTokensregexTypesExpressions_ListExpression_initWithNSString_withJavaUtilList_withNSStringArray_(self, typename_, exprs, tags);
  return self;
}

- (void)addAllWithJavaUtilList:(id<JavaUtilList>)exprs {
  if (exprs != nil) {
    [((id<JavaUtilList>) nil_chk(self->exprs_)) addAllWithJavaUtilCollection:exprs];
  }
}

- (void)addWithEduStanfordNlpLingTokensregexTypesExpression:(id<EduStanfordNlpLingTokensregexTypesExpression>)expr {
  [((id<JavaUtilList>) nil_chk(self->exprs_)) addWithId:expr];
}

- (id<EduStanfordNlpLingTokensregexTypesValue>)evaluateWithEduStanfordNlpLingTokensregexEnv:(EduStanfordNlpLingTokensregexEnv *)env
                                                                          withNSObjectArray:(IOSObjectArray *)args {
  id<JavaUtilList> values = new_JavaUtilArrayList_initWithInt_([((id<JavaUtilList>) nil_chk(exprs_)) size]);
  for (id<EduStanfordNlpLingTokensregexTypesExpression> __strong s in nil_chk(exprs_)) {
    [values addWithId:[((id<EduStanfordNlpLingTokensregexTypesExpression>) nil_chk(s)) evaluateWithEduStanfordNlpLingTokensregexEnv:env withNSObjectArray:args]];
  }
  ;
  return new_EduStanfordNlpLingTokensregexTypesExpressions_PrimitiveValue_initWithNSString_withId_withNSStringArray_(typename__, values, [IOSObjectArray newArrayWithLength:0 type:NSString_class_()]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x81, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x81, -1, 1, -1, 2, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexTypesValue;", 0x81, 8, 9, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withNSStringArray:);
  methods[1].selector = @selector(initWithNSString:withJavaUtilList:withNSStringArray:);
  methods[2].selector = @selector(addAllWithJavaUtilList:);
  methods[3].selector = @selector(addWithEduStanfordNlpLingTokensregexTypesExpression:);
  methods[4].selector = @selector(evaluateWithEduStanfordNlpLingTokensregexEnv:withNSObjectArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "exprs_", "LJavaUtilList;", .constantValue.asLong = 0, 0x0, -1, -1, 10, -1 },
  };
  static const void *ptrTable[] = { "LNSString;[LNSString;", "LNSString;LJavaUtilList;[LNSString;", "(Ljava/lang/String;Ljava/util/List<Ledu/stanford/nlp/ling/tokensregex/types/Expression;>;[Ljava/lang/String;)V", "addAll", "LJavaUtilList;", "(Ljava/util/List<Ledu/stanford/nlp/ling/tokensregex/types/Expression;>;)V", "add", "LEduStanfordNlpLingTokensregexTypesExpression;", "evaluate", "LEduStanfordNlpLingTokensregexEnv;[LNSObject;", "Ljava/util/List<Ledu/stanford/nlp/ling/tokensregex/types/Expression;>;", "LEduStanfordNlpLingTokensregexTypesExpressions;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexTypesExpressions_ListExpression = { "ListExpression", "edu.stanford.nlp.ling.tokensregex.types", ptrTable, methods, fields, 7, 0x9, 5, 1, 11, -1, -1, -1, -1 };
  return &_EduStanfordNlpLingTokensregexTypesExpressions_ListExpression;
}

@end

void EduStanfordNlpLingTokensregexTypesExpressions_ListExpression_initWithNSString_withNSStringArray_(EduStanfordNlpLingTokensregexTypesExpressions_ListExpression *self, NSString *typename_, IOSObjectArray *tags) {
  EduStanfordNlpLingTokensregexTypesExpressions_TypedExpression_initWithNSString_withNSStringArray_(self, typename_, tags);
  self->exprs_ = new_JavaUtilArrayList_init();
}

EduStanfordNlpLingTokensregexTypesExpressions_ListExpression *new_EduStanfordNlpLingTokensregexTypesExpressions_ListExpression_initWithNSString_withNSStringArray_(NSString *typename_, IOSObjectArray *tags) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexTypesExpressions_ListExpression, initWithNSString_withNSStringArray_, typename_, tags)
}

EduStanfordNlpLingTokensregexTypesExpressions_ListExpression *create_EduStanfordNlpLingTokensregexTypesExpressions_ListExpression_initWithNSString_withNSStringArray_(NSString *typename_, IOSObjectArray *tags) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexTypesExpressions_ListExpression, initWithNSString_withNSStringArray_, typename_, tags)
}

void EduStanfordNlpLingTokensregexTypesExpressions_ListExpression_initWithNSString_withJavaUtilList_withNSStringArray_(EduStanfordNlpLingTokensregexTypesExpressions_ListExpression *self, NSString *typename_, id<JavaUtilList> exprs, IOSObjectArray *tags) {
  EduStanfordNlpLingTokensregexTypesExpressions_TypedExpression_initWithNSString_withNSStringArray_(self, typename_, tags);
  self->exprs_ = new_JavaUtilArrayList_initWithJavaUtilCollection_(exprs);
}

EduStanfordNlpLingTokensregexTypesExpressions_ListExpression *new_EduStanfordNlpLingTokensregexTypesExpressions_ListExpression_initWithNSString_withJavaUtilList_withNSStringArray_(NSString *typename_, id<JavaUtilList> exprs, IOSObjectArray *tags) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexTypesExpressions_ListExpression, initWithNSString_withJavaUtilList_withNSStringArray_, typename_, exprs, tags)
}

EduStanfordNlpLingTokensregexTypesExpressions_ListExpression *create_EduStanfordNlpLingTokensregexTypesExpressions_ListExpression_initWithNSString_withJavaUtilList_withNSStringArray_(NSString *typename_, id<JavaUtilList> exprs, IOSObjectArray *tags) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexTypesExpressions_ListExpression, initWithNSString_withJavaUtilList_withNSStringArray_, typename_, exprs, tags)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexTypesExpressions_ListExpression)

@implementation EduStanfordNlpLingTokensregexTypesExpressions_MethodCallExpression

- (instancetype)initWithNSString:(NSString *)function
withEduStanfordNlpLingTokensregexTypesExpression:(id<EduStanfordNlpLingTokensregexTypesExpression>)object
                withJavaUtilList:(id<JavaUtilList>)params
               withNSStringArray:(IOSObjectArray *)tags {
  EduStanfordNlpLingTokensregexTypesExpressions_MethodCallExpression_initWithNSString_withEduStanfordNlpLingTokensregexTypesExpression_withJavaUtilList_withNSStringArray_(self, function, object, params, tags);
  return self;
}

- (NSString *)description {
  return JreStrcat("@C$C$C", object_, '.', function_, '(', EduStanfordNlpUtilStringUtils_joinWithJavaLangIterable_withNSString_(params_, @", "), ')');
}

- (id<EduStanfordNlpLingTokensregexTypesExpression>)simplifyWithEduStanfordNlpLingTokensregexEnv:(EduStanfordNlpLingTokensregexEnv *)env {
  jboolean paramsAllHasValue = true;
  id<JavaUtilList> simplifiedParams = new_JavaUtilArrayList_initWithInt_([((id<JavaUtilList>) nil_chk(params_)) size]);
  for (id<EduStanfordNlpLingTokensregexTypesExpression> __strong param in nil_chk(params_)) {
    id<EduStanfordNlpLingTokensregexTypesExpression> simplified = [((id<EduStanfordNlpLingTokensregexTypesExpression>) nil_chk(param)) simplifyWithEduStanfordNlpLingTokensregexEnv:env];
    [simplifiedParams addWithId:simplified];
    if (!([((id<EduStanfordNlpLingTokensregexTypesExpression>) nil_chk(simplified)) hasValue])) {
      paramsAllHasValue = false;
    }
  }
  id<EduStanfordNlpLingTokensregexTypesExpression> simplifiedObject = [((id<EduStanfordNlpLingTokensregexTypesExpression>) nil_chk(object_)) simplifyWithEduStanfordNlpLingTokensregexEnv:env];
  id<EduStanfordNlpLingTokensregexTypesExpression> res = new_EduStanfordNlpLingTokensregexTypesExpressions_MethodCallExpression_initWithNSString_withEduStanfordNlpLingTokensregexTypesExpression_withJavaUtilList_withNSStringArray_(function_, simplifiedObject, simplifiedParams, [IOSObjectArray newArrayWithLength:0 type:NSString_class_()]);
  if (paramsAllHasValue && [((id<EduStanfordNlpLingTokensregexTypesExpression>) nil_chk(object_)) hasValue]) {
    return [res evaluateWithEduStanfordNlpLingTokensregexEnv:env withNSObjectArray:[IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]];
  }
  else {
    return res;
  }
}

- (id<EduStanfordNlpLingTokensregexTypesValue>)evaluateWithEduStanfordNlpLingTokensregexEnv:(EduStanfordNlpLingTokensregexEnv *)env
                                                                          withNSObjectArray:(IOSObjectArray *)args {
  id<EduStanfordNlpLingTokensregexTypesValue> evaledObj = [((id<EduStanfordNlpLingTokensregexTypesExpression>) nil_chk(object_)) evaluateWithEduStanfordNlpLingTokensregexEnv:env withNSObjectArray:args];
  if (evaledObj == nil || [evaledObj get] == nil) return nil;
  id mainObj = [evaledObj get];
  IOSClass *c = [nil_chk(mainObj) getClass];
  id<JavaUtilList> evaled = new_JavaUtilArrayList_init();
  for (id<EduStanfordNlpLingTokensregexTypesExpression> __strong param in nil_chk(params_)) {
    [evaled addWithId:[((id<EduStanfordNlpLingTokensregexTypesExpression>) nil_chk(param)) evaluateWithEduStanfordNlpLingTokensregexEnv:env withNSObjectArray:args]];
  }
  IOSObjectArray *paramTypes = [IOSObjectArray newArrayWithLength:[params_ size] type:IOSClass_class_()];
  IOSObjectArray *objs = [IOSObjectArray newArrayWithLength:[((id<JavaUtilList>) nil_chk(params_)) size] type:NSObject_class_()];
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(params_)) size]; i++) {
    id<EduStanfordNlpLingTokensregexTypesValue> v = [evaled getWithInt:i];
    if (v != nil) {
      (void) IOSObjectArray_Set(objs, i, [v get]);
      if (IOSObjectArray_Get(objs, i) != nil) {
        (void) IOSObjectArray_Set(paramTypes, i, [nil_chk(IOSObjectArray_Get(objs, i)) getClass]);
      }
      else {
        (void) IOSObjectArray_Set(paramTypes, i, nil);
      }
    }
    else {
      (void) IOSObjectArray_Set(objs, i, nil);
      (void) IOSObjectArray_Set(paramTypes, i, nil);
    }
  }
  JavaLangReflectMethod *method = nil;
  @try {
    method = [c getMethod:function_ parameterTypes:paramTypes];
  }
  @catch (JavaLangNoSuchMethodException *ex) {
    IOSObjectArray *methods = [c getMethods];
    {
      IOSObjectArray *a__ = methods;
      JavaLangReflectMethod * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      JavaLangReflectMethod * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        JavaLangReflectMethod *m = *b__++;
        if ([((NSString *) nil_chk([((JavaLangReflectMethod *) nil_chk(m)) getName])) isEqual:function_]) {
          IOSObjectArray *mParamTypes = [m getParameterTypes];
          if (((IOSObjectArray *) nil_chk(mParamTypes))->size_ == paramTypes->size_) {
            jboolean compatible = EduStanfordNlpLingTokensregexTypesExpressions_isArgTypesCompatibleWithIOSClassArray_withIOSClassArray_(paramTypes, mParamTypes);
            if (compatible) {
              method = m;
              break;
            }
          }
        }
      }
    }
    if (method == nil) {
      @throw new_JavaLangRuntimeException_initWithNSString_withNSException_(JreStrcat("$$$@", @"Cannot find method ", function_, @" on object of class ", c), ex);
    }
  }
  @try {
    id res = [((JavaLangReflectMethod *) nil_chk(method)) invokeWithId:mainObj withNSObjectArray:objs];
    return new_EduStanfordNlpLingTokensregexTypesExpressions_PrimitiveValue_initWithNSString_withId_withNSStringArray_(function_, res, [IOSObjectArray newArrayWithLength:0 type:NSString_class_()]);
  }
  @catch (JavaLangReflectInvocationTargetException *ex) {
    @throw new_JavaLangRuntimeException_initWithNSString_withNSException_(JreStrcat("$$$@", @"Cannot evaluate method ", function_, @" on object ", mainObj), ex);
  }
  @catch (JavaLangIllegalAccessException *ex) {
    @throw new_JavaLangRuntimeException_initWithNSString_withNSException_(JreStrcat("$$$@", @"Cannot evaluate method ", function_, @" on object ", mainObj), ex);
  }
}

- (jboolean)isEqual:(id)o {
  if (self == o) return true;
  if (!([o isKindOfClass:[EduStanfordNlpLingTokensregexTypesExpressions_MethodCallExpression class]])) return false;
  if (![super isEqual:o]) return false;
  EduStanfordNlpLingTokensregexTypesExpressions_MethodCallExpression *that = (EduStanfordNlpLingTokensregexTypesExpressions_MethodCallExpression *) cast_chk(o, [EduStanfordNlpLingTokensregexTypesExpressions_MethodCallExpression class]);
  if (function_ != nil ? ![function_ isEqual:((EduStanfordNlpLingTokensregexTypesExpressions_MethodCallExpression *) nil_chk(that))->function_] : ((EduStanfordNlpLingTokensregexTypesExpressions_MethodCallExpression *) nil_chk(that))->function_ != nil) return false;
  if (object_ != nil ? ![object_ isEqual:that->object_] : that->object_ != nil) return false;
  if (params_ != nil ? ![params_ isEqual:that->params_] : that->params_ != nil) return false;
  return true;
}

- (NSUInteger)hash {
  jint result = ((jint) [super hash]);
  result = 31 * result + (function_ != nil ? ((jint) [function_ hash]) : 0);
  result = 31 * result + (object_ != nil ? ((jint) [object_ hash]) : 0);
  result = 31 * result + (params_ != nil ? ((jint) [params_ hash]) : 0);
  return result;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x81, -1, 0, -1, 1, -1, -1 },
    { NULL, "LNSString;", 0x1, 2, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexTypesExpression;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexTypesValue;", 0x81, 5, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 9, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withEduStanfordNlpLingTokensregexTypesExpression:withJavaUtilList:withNSStringArray:);
  methods[1].selector = @selector(description);
  methods[2].selector = @selector(simplifyWithEduStanfordNlpLingTokensregexEnv:);
  methods[3].selector = @selector(evaluateWithEduStanfordNlpLingTokensregexEnv:withNSObjectArray:);
  methods[4].selector = @selector(isEqual:);
  methods[5].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "function_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "object_", "LEduStanfordNlpLingTokensregexTypesExpression;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "params_", "LJavaUtilList;", .constantValue.asLong = 0, 0x0, -1, -1, 10, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LEduStanfordNlpLingTokensregexTypesExpression;LJavaUtilList;[LNSString;", "(Ljava/lang/String;Ledu/stanford/nlp/ling/tokensregex/types/Expression;Ljava/util/List<Ledu/stanford/nlp/ling/tokensregex/types/Expression;>;[Ljava/lang/String;)V", "toString", "simplify", "LEduStanfordNlpLingTokensregexEnv;", "evaluate", "LEduStanfordNlpLingTokensregexEnv;[LNSObject;", "equals", "LNSObject;", "hashCode", "Ljava/util/List<Ledu/stanford/nlp/ling/tokensregex/types/Expression;>;", "LEduStanfordNlpLingTokensregexTypesExpressions;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexTypesExpressions_MethodCallExpression = { "MethodCallExpression", "edu.stanford.nlp.ling.tokensregex.types", ptrTable, methods, fields, 7, 0x9, 6, 3, 11, -1, -1, -1, -1 };
  return &_EduStanfordNlpLingTokensregexTypesExpressions_MethodCallExpression;
}

@end

void EduStanfordNlpLingTokensregexTypesExpressions_MethodCallExpression_initWithNSString_withEduStanfordNlpLingTokensregexTypesExpression_withJavaUtilList_withNSStringArray_(EduStanfordNlpLingTokensregexTypesExpressions_MethodCallExpression *self, NSString *function, id<EduStanfordNlpLingTokensregexTypesExpression> object, id<JavaUtilList> params, IOSObjectArray *tags) {
  EduStanfordNlpLingTokensregexTypesExpressions_TypedExpression_initWithNSString_withNSStringArray_(self, EduStanfordNlpLingTokensregexTypesExpressions_TYPE_FUNCTION, tags);
  self->function_ = function;
  self->object_ = object;
  self->params_ = params;
}

EduStanfordNlpLingTokensregexTypesExpressions_MethodCallExpression *new_EduStanfordNlpLingTokensregexTypesExpressions_MethodCallExpression_initWithNSString_withEduStanfordNlpLingTokensregexTypesExpression_withJavaUtilList_withNSStringArray_(NSString *function, id<EduStanfordNlpLingTokensregexTypesExpression> object, id<JavaUtilList> params, IOSObjectArray *tags) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexTypesExpressions_MethodCallExpression, initWithNSString_withEduStanfordNlpLingTokensregexTypesExpression_withJavaUtilList_withNSStringArray_, function, object, params, tags)
}

EduStanfordNlpLingTokensregexTypesExpressions_MethodCallExpression *create_EduStanfordNlpLingTokensregexTypesExpressions_MethodCallExpression_initWithNSString_withEduStanfordNlpLingTokensregexTypesExpression_withJavaUtilList_withNSStringArray_(NSString *function, id<EduStanfordNlpLingTokensregexTypesExpression> object, id<JavaUtilList> params, IOSObjectArray *tags) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexTypesExpressions_MethodCallExpression, initWithNSString_withEduStanfordNlpLingTokensregexTypesExpression_withJavaUtilList_withNSStringArray_, function, object, params, tags)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexTypesExpressions_MethodCallExpression)

@implementation EduStanfordNlpLingTokensregexTypesExpressions_PrimitiveValue

- (instancetype)initWithNSString:(NSString *)typename_
                          withId:(id)value
               withNSStringArray:(IOSObjectArray *)tags {
  EduStanfordNlpLingTokensregexTypesExpressions_PrimitiveValue_initWithNSString_withId_withNSStringArray_(self, typename_, value, tags);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x81, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withId:withNSStringArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;LNSObject;[LNSString;", "(Ljava/lang/String;TT;[Ljava/lang/String;)V", "LEduStanfordNlpLingTokensregexTypesExpressions;", "<T:Ljava/lang/Object;>Ledu/stanford/nlp/ling/tokensregex/types/Expressions$SimpleValue<TT;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexTypesExpressions_PrimitiveValue = { "PrimitiveValue", "edu.stanford.nlp.ling.tokensregex.types", ptrTable, methods, NULL, 7, 0x9, 1, 0, 2, -1, -1, 3, -1 };
  return &_EduStanfordNlpLingTokensregexTypesExpressions_PrimitiveValue;
}

@end

void EduStanfordNlpLingTokensregexTypesExpressions_PrimitiveValue_initWithNSString_withId_withNSStringArray_(EduStanfordNlpLingTokensregexTypesExpressions_PrimitiveValue *self, NSString *typename_, id value, IOSObjectArray *tags) {
  EduStanfordNlpLingTokensregexTypesExpressions_SimpleValue_initWithNSString_withId_withNSStringArray_(self, typename_, value, tags);
}

EduStanfordNlpLingTokensregexTypesExpressions_PrimitiveValue *new_EduStanfordNlpLingTokensregexTypesExpressions_PrimitiveValue_initWithNSString_withId_withNSStringArray_(NSString *typename_, id value, IOSObjectArray *tags) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexTypesExpressions_PrimitiveValue, initWithNSString_withId_withNSStringArray_, typename_, value, tags)
}

EduStanfordNlpLingTokensregexTypesExpressions_PrimitiveValue *create_EduStanfordNlpLingTokensregexTypesExpressions_PrimitiveValue_initWithNSString_withId_withNSStringArray_(NSString *typename_, id value, IOSObjectArray *tags) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexTypesExpressions_PrimitiveValue, initWithNSString_withId_withNSStringArray_, typename_, value, tags)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexTypesExpressions_PrimitiveValue)

@implementation EduStanfordNlpLingTokensregexTypesExpressions_CompositeValue

- (instancetype)initWithNSStringArray:(IOSObjectArray *)tags {
  EduStanfordNlpLingTokensregexTypesExpressions_CompositeValue_initWithNSStringArray_(self, tags);
  return self;
}

- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)m
                        withBoolean:(jboolean)isEvaluated
                  withNSStringArray:(IOSObjectArray *)tags {
  EduStanfordNlpLingTokensregexTypesExpressions_CompositeValue_initWithJavaUtilMap_withBoolean_withNSStringArray_(self, m, isEvaluated, tags);
  return self;
}

- (jboolean)checkValue {
  return EduStanfordNlpLingTokensregexTypesExpressions_CompositeValue_checkValue(self);
}

- (id<JavaUtilSet>)getAttributes {
  return [((id<JavaUtilMap>) nil_chk(value_)) keySet];
}

- (id<EduStanfordNlpLingTokensregexTypesExpression>)getExpressionWithNSString:(NSString *)attr {
  return [((id<JavaUtilMap>) nil_chk(value_)) getWithId:attr];
}

- (id<EduStanfordNlpLingTokensregexTypesValue>)getValueWithNSString:(NSString *)attr {
  id<EduStanfordNlpLingTokensregexTypesExpression> expr = [((id<JavaUtilMap>) nil_chk(value_)) getWithId:attr];
  if (expr == nil) return nil;
  if ([EduStanfordNlpLingTokensregexTypesValue_class_() isInstance:expr]) {
    return (id<EduStanfordNlpLingTokensregexTypesValue>) cast_check(expr, EduStanfordNlpLingTokensregexTypesValue_class_());
  }
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"Expression was not evaluated....");
}

- (id)getWithNSString:(NSString *)attr {
  id<EduStanfordNlpLingTokensregexTypesExpression> expr = [((id<JavaUtilMap>) nil_chk(value_)) getWithId:attr];
  if (expr == nil) return nil;
  if ([EduStanfordNlpLingTokensregexTypesValue_class_() isInstance:expr]) {
    return [((id<EduStanfordNlpLingTokensregexTypesValue>) cast_check(expr, EduStanfordNlpLingTokensregexTypesValue_class_())) get];
  }
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"Expression was not evaluated....");
}

- (void)setWithNSString:(NSString *)attr
                 withId:(id)obj {
  if ([EduStanfordNlpLingTokensregexTypesExpression_class_() isInstance:obj]) {
    (void) [((id<JavaUtilMap>) nil_chk(value_)) putWithId:attr withId:(id<EduStanfordNlpLingTokensregexTypesExpression>) cast_check(obj, EduStanfordNlpLingTokensregexTypesExpression_class_())];
  }
  else {
    (void) [((id<JavaUtilMap>) nil_chk(value_)) putWithId:attr withId:EduStanfordNlpLingTokensregexTypesExpressions_createValueWithNSString_withId_withNSStringArray_(nil, obj, [IOSObjectArray newArrayWithLength:0 type:NSString_class_()])];
  }
  evaluated_ = nil;
}

+ (id)toCompatibleObjectWithJavaLangReflectField:(JavaLangReflectField *)f
                                          withId:(id)value {
  return EduStanfordNlpLingTokensregexTypesExpressions_CompositeValue_toCompatibleObjectWithJavaLangReflectField_withId_(f, value);
}

+ (id<EduStanfordNlpLingTokensregexTypesValue>)attemptTypeConversionWithEduStanfordNlpLingTokensregexTypesExpressions_CompositeValue:(EduStanfordNlpLingTokensregexTypesExpressions_CompositeValue *)cv
                                                                                                withEduStanfordNlpLingTokensregexEnv:(EduStanfordNlpLingTokensregexEnv *)env
                                                                                                                   withNSObjectArray:(IOSObjectArray *)args {
  return EduStanfordNlpLingTokensregexTypesExpressions_CompositeValue_attemptTypeConversionWithEduStanfordNlpLingTokensregexTypesExpressions_CompositeValue_withEduStanfordNlpLingTokensregexEnv_withNSObjectArray_(cv, env, args);
}

- (EduStanfordNlpLingTokensregexTypesExpressions_CompositeValue *)simplifyNoTypeConversionWithEduStanfordNlpLingTokensregexEnv:(EduStanfordNlpLingTokensregexEnv *)env
                                                                                                             withNSObjectArray:(IOSObjectArray *)args {
  id<JavaUtilMap> m = value_;
  id<JavaUtilMap> res = new_JavaUtilHashMap_initWithInt_([((id<JavaUtilMap>) nil_chk(m)) size]);
  for (id<JavaUtilMap_Entry> __strong stringExpressionEntry in nil_chk([m entrySet])) {
    (void) [res putWithId:[((id<JavaUtilMap_Entry>) nil_chk(stringExpressionEntry)) getKey] withId:[((id<EduStanfordNlpLingTokensregexTypesExpression>) nil_chk([stringExpressionEntry getValue])) simplifyWithEduStanfordNlpLingTokensregexEnv:env]];
  }
  return new_EduStanfordNlpLingTokensregexTypesExpressions_CompositeValue_initWithJavaUtilMap_withBoolean_withNSStringArray_(res, true, [IOSObjectArray newArrayWithLength:0 type:NSString_class_()]);
}

- (EduStanfordNlpLingTokensregexTypesExpressions_CompositeValue *)evaluateNoTypeConversionWithEduStanfordNlpLingTokensregexEnv:(EduStanfordNlpLingTokensregexEnv *)env
                                                                                                             withNSObjectArray:(IOSObjectArray *)args {
  return EduStanfordNlpLingTokensregexTypesExpressions_CompositeValue_evaluateNoTypeConversionWithEduStanfordNlpLingTokensregexEnv_withNSObjectArray_(self, env, args);
}

- (id<EduStanfordNlpLingTokensregexTypesValue>)doEvaluationWithEduStanfordNlpLingTokensregexEnv:(EduStanfordNlpLingTokensregexEnv *)env
                                                                              withNSObjectArray:(IOSObjectArray *)args {
  id<EduStanfordNlpLingTokensregexTypesValue> v = EduStanfordNlpLingTokensregexTypesExpressions_CompositeValue_attemptTypeConversionWithEduStanfordNlpLingTokensregexTypesExpressions_CompositeValue_withEduStanfordNlpLingTokensregexEnv_withNSObjectArray_(self, env, args);
  if (v != nil) return v;
  id<JavaUtilMap> m = value_;
  id<JavaUtilMap> res = new_JavaUtilHashMap_initWithInt_([((id<JavaUtilMap>) nil_chk(m)) size]);
  for (id<JavaUtilMap_Entry> __strong stringExpressionEntry in nil_chk([m entrySet])) {
    (void) [res putWithId:[((id<JavaUtilMap_Entry>) nil_chk(stringExpressionEntry)) getKey] withId:[((id<EduStanfordNlpLingTokensregexTypesExpression>) nil_chk([stringExpressionEntry getValue])) evaluateWithEduStanfordNlpLingTokensregexEnv:env withNSObjectArray:args]];
  }
  disableCaching_ = !EduStanfordNlpLingTokensregexTypesExpressions_CompositeValue_checkValue(self);
  return new_EduStanfordNlpLingTokensregexTypesExpressions_CompositeValue_initWithJavaUtilMap_withBoolean_withNSStringArray_(res, true, [IOSObjectArray newArrayWithLength:0 type:NSString_class_()]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x81, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x81, -1, 1, -1, 2, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexTypesExpression;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexTypesValue;", 0x1, 6, 5, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 7, 5, -1, 8, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0xa, 11, 12, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexTypesValue;", 0x8a, 13, 14, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexTypesExpressions_CompositeValue;", 0x81, 15, 16, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexTypesExpressions_CompositeValue;", 0x82, 17, 16, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexTypesValue;", 0x81, 18, 16, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSStringArray:);
  methods[1].selector = @selector(initWithJavaUtilMap:withBoolean:withNSStringArray:);
  methods[2].selector = @selector(checkValue);
  methods[3].selector = @selector(getAttributes);
  methods[4].selector = @selector(getExpressionWithNSString:);
  methods[5].selector = @selector(getValueWithNSString:);
  methods[6].selector = @selector(getWithNSString:);
  methods[7].selector = @selector(setWithNSString:withId:);
  methods[8].selector = @selector(toCompatibleObjectWithJavaLangReflectField:withId:);
  methods[9].selector = @selector(attemptTypeConversionWithEduStanfordNlpLingTokensregexTypesExpressions_CompositeValue:withEduStanfordNlpLingTokensregexEnv:withNSObjectArray:);
  methods[10].selector = @selector(simplifyNoTypeConversionWithEduStanfordNlpLingTokensregexEnv:withNSObjectArray:);
  methods[11].selector = @selector(evaluateNoTypeConversionWithEduStanfordNlpLingTokensregexEnv:withNSObjectArray:);
  methods[12].selector = @selector(doEvaluationWithEduStanfordNlpLingTokensregexEnv:withNSObjectArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "[LNSString;", "LJavaUtilMap;Z[LNSString;", "(Ljava/util/Map<Ljava/lang/String;Ledu/stanford/nlp/ling/tokensregex/types/Expression;>;Z[Ljava/lang/String;)V", "()Ljava/util/Set<Ljava/lang/String;>;", "getExpression", "LNSString;", "getValue", "get", "<T:Ljava/lang/Object;>(Ljava/lang/String;)TT;", "set", "LNSString;LNSObject;", "toCompatibleObject", "LJavaLangReflectField;LNSObject;", "attemptTypeConversion", "LEduStanfordNlpLingTokensregexTypesExpressions_CompositeValue;LEduStanfordNlpLingTokensregexEnv;[LNSObject;", "simplifyNoTypeConversion", "LEduStanfordNlpLingTokensregexEnv;[LNSObject;", "evaluateNoTypeConversion", "doEvaluation", "LEduStanfordNlpLingTokensregexTypesExpressions;", "Ledu/stanford/nlp/ling/tokensregex/types/Expressions$SimpleCachedExpression<Ljava/util/Map<Ljava/lang/String;Ledu/stanford/nlp/ling/tokensregex/types/Expression;>;>;Ledu/stanford/nlp/ling/tokensregex/types/Value<Ljava/util/Map<Ljava/lang/String;Ledu/stanford/nlp/ling/tokensregex/types/Expression;>;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexTypesExpressions_CompositeValue = { "CompositeValue", "edu.stanford.nlp.ling.tokensregex.types", ptrTable, methods, NULL, 7, 0x9, 13, 0, 19, -1, -1, 20, -1 };
  return &_EduStanfordNlpLingTokensregexTypesExpressions_CompositeValue;
}

@end

void EduStanfordNlpLingTokensregexTypesExpressions_CompositeValue_initWithNSStringArray_(EduStanfordNlpLingTokensregexTypesExpressions_CompositeValue *self, IOSObjectArray *tags) {
  EduStanfordNlpLingTokensregexTypesExpressions_SimpleCachedExpression_initWithNSString_withId_withNSStringArray_(self, EduStanfordNlpLingTokensregexTypesExpressions_TYPE_COMPOSITE, new_JavaUtilHashMap_init(), tags);
}

EduStanfordNlpLingTokensregexTypesExpressions_CompositeValue *new_EduStanfordNlpLingTokensregexTypesExpressions_CompositeValue_initWithNSStringArray_(IOSObjectArray *tags) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexTypesExpressions_CompositeValue, initWithNSStringArray_, tags)
}

EduStanfordNlpLingTokensregexTypesExpressions_CompositeValue *create_EduStanfordNlpLingTokensregexTypesExpressions_CompositeValue_initWithNSStringArray_(IOSObjectArray *tags) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexTypesExpressions_CompositeValue, initWithNSStringArray_, tags)
}

void EduStanfordNlpLingTokensregexTypesExpressions_CompositeValue_initWithJavaUtilMap_withBoolean_withNSStringArray_(EduStanfordNlpLingTokensregexTypesExpressions_CompositeValue *self, id<JavaUtilMap> m, jboolean isEvaluated, IOSObjectArray *tags) {
  EduStanfordNlpLingTokensregexTypesExpressions_SimpleCachedExpression_initWithNSString_withId_withNSStringArray_(self, EduStanfordNlpLingTokensregexTypesExpressions_TYPE_COMPOSITE, m, tags);
  if (isEvaluated) {
    self->evaluated_ = self;
    self->disableCaching_ = !EduStanfordNlpLingTokensregexTypesExpressions_CompositeValue_checkValue(self);
  }
}

EduStanfordNlpLingTokensregexTypesExpressions_CompositeValue *new_EduStanfordNlpLingTokensregexTypesExpressions_CompositeValue_initWithJavaUtilMap_withBoolean_withNSStringArray_(id<JavaUtilMap> m, jboolean isEvaluated, IOSObjectArray *tags) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexTypesExpressions_CompositeValue, initWithJavaUtilMap_withBoolean_withNSStringArray_, m, isEvaluated, tags)
}

EduStanfordNlpLingTokensregexTypesExpressions_CompositeValue *create_EduStanfordNlpLingTokensregexTypesExpressions_CompositeValue_initWithJavaUtilMap_withBoolean_withNSStringArray_(id<JavaUtilMap> m, jboolean isEvaluated, IOSObjectArray *tags) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexTypesExpressions_CompositeValue, initWithJavaUtilMap_withBoolean_withNSStringArray_, m, isEvaluated, tags)
}

jboolean EduStanfordNlpLingTokensregexTypesExpressions_CompositeValue_checkValue(EduStanfordNlpLingTokensregexTypesExpressions_CompositeValue *self) {
  jboolean ok = true;
  for (NSString * __strong key in nil_chk([((id<JavaUtilMap>) nil_chk(self->value_)) keySet])) {
    id<EduStanfordNlpLingTokensregexTypesExpression> expr = [((id<JavaUtilMap>) nil_chk(self->value_)) getWithId:key];
    if (expr != nil && ![expr hasValue]) {
      ok = false;
    }
  }
  return ok;
}

id EduStanfordNlpLingTokensregexTypesExpressions_CompositeValue_toCompatibleObjectWithJavaLangReflectField_withId_(JavaLangReflectField *f, id value) {
  EduStanfordNlpLingTokensregexTypesExpressions_CompositeValue_initialize();
  if (value == nil) return value;
  if (![((IOSClass *) nil_chk([((JavaLangReflectField *) nil_chk(f)) getDeclaringClass])) isAssignableFrom:[value getClass]]) {
    if ([NSNumber_class_() isAssignableFrom:[value getClass]]) {
      NSNumber *number = (NSNumber *) cast_chk(value, [NSNumber class]);
      if ([((IOSClass *) nil_chk([f getType])) isAssignableFrom:JavaLangDouble_class_()]) {
        return JavaLangDouble_valueOfWithDouble_([number doubleValue]);
      }
      else if ([((IOSClass *) nil_chk([f getType])) isAssignableFrom:JavaLangFloat_class_()]) {
        return JavaLangFloat_valueOfWithFloat_([number floatValue]);
      }
      else if ([((IOSClass *) nil_chk([f getType])) isAssignableFrom:JavaLangLong_class_()]) {
        return JavaLangLong_valueOfWithLong_([number longLongValue]);
      }
      else if ([((IOSClass *) nil_chk([f getType])) isAssignableFrom:JavaLangInteger_class_()]) {
        return JavaLangInteger_valueOfWithInt_([number intValue]);
      }
    }
  }
  return value;
}

id<EduStanfordNlpLingTokensregexTypesValue> EduStanfordNlpLingTokensregexTypesExpressions_CompositeValue_attemptTypeConversionWithEduStanfordNlpLingTokensregexTypesExpressions_CompositeValue_withEduStanfordNlpLingTokensregexEnv_withNSObjectArray_(EduStanfordNlpLingTokensregexTypesExpressions_CompositeValue *cv, EduStanfordNlpLingTokensregexEnv *env, IOSObjectArray *args) {
  EduStanfordNlpLingTokensregexTypesExpressions_CompositeValue_initialize();
  id<EduStanfordNlpLingTokensregexTypesExpression> typeFieldExpr = [((id<JavaUtilMap>) nil_chk(((EduStanfordNlpLingTokensregexTypesExpressions_CompositeValue *) nil_chk(cv))->value_)) getWithId:@"type"];
  if (typeFieldExpr != nil) {
    id<EduStanfordNlpLingTokensregexTypesValue> typeValue = [typeFieldExpr evaluateWithEduStanfordNlpLingTokensregexEnv:env withNSObjectArray:args];
    if ([typeFieldExpr isKindOfClass:[EduStanfordNlpLingTokensregexTypesExpressions_VarExpression class]]) {
      EduStanfordNlpLingTokensregexTypesExpressions_VarExpression *varExpr = (EduStanfordNlpLingTokensregexTypesExpressions_VarExpression *) cast_chk(typeFieldExpr, [EduStanfordNlpLingTokensregexTypesExpressions_VarExpression class]);
      NSString *typeName = [varExpr get];
      if (typeValue != nil) {
        if ([((NSString *) nil_chk(EduStanfordNlpLingTokensregexTypesExpressions_TYPE_CLASS)) isEqual:[typeValue getType]]) {
          IOSClass *c = (IOSClass *) cast_chk([typeValue get], [IOSClass class]);
          @try {
            id obj = [((IOSClass *) nil_chk(c)) newInstance];
            for (NSString * __strong s in nil_chk([((id<JavaUtilMap>) nil_chk(cv->value_)) keySet])) {
              if (![@"type" isEqual:s]) {
                id<EduStanfordNlpLingTokensregexTypesValue> v = [((id<EduStanfordNlpLingTokensregexTypesExpression>) nil_chk([((id<JavaUtilMap>) nil_chk(cv->value_)) getWithId:s])) evaluateWithEduStanfordNlpLingTokensregexEnv:env withNSObjectArray:args];
                @try {
                  JavaLangReflectField *f = [c getField:s];
                  id objVal = EduStanfordNlpLingTokensregexTypesExpressions_CompositeValue_toCompatibleObjectWithJavaLangReflectField_withId_(f, [((id<EduStanfordNlpLingTokensregexTypesValue>) nil_chk(v)) get]);
                  [((JavaLangReflectField *) nil_chk(f)) setWithId:obj withId:objVal];
                }
                @catch (JavaLangNoSuchFieldException *ex) {
                  @throw new_JavaLangRuntimeException_initWithNSString_withNSException_(JreStrcat("$$$$$@", @"Unknown field ", s, @" for type ", typeName, @", trying to set to ", v), ex);
                }
                @catch (JavaLangIllegalArgumentException *ex) {
                  @throw new_JavaLangRuntimeException_initWithNSString_withNSException_(JreStrcat("$$$$$@", @"Incompatible type ", s, @" for type ", typeName, @", trying to set to ", v), ex);
                }
              }
            }
            return new_EduStanfordNlpLingTokensregexTypesExpressions_PrimitiveValue_initWithNSString_withId_withNSStringArray_(typeName, obj, [IOSObjectArray newArrayWithLength:0 type:NSString_class_()]);
          }
          @catch (JavaLangInstantiationException *ex) {
            @throw new_JavaLangRuntimeException_initWithNSString_withNSException_(JreStrcat("$@", @"Cannot instantiate ", c), ex);
          }
          @catch (JavaLangIllegalAccessException *ex) {
            @throw new_JavaLangRuntimeException_initWithNSString_withNSException_(JreStrcat("$@", @"Cannot instantiate ", c), ex);
          }
        }
        else if ([typeValue get] != nil) {
          IOSClass *c = [nil_chk([typeValue get]) getClass];
          @try {
            JavaLangReflectMethod *m = [c getMethod:@"create" parameterTypes:[IOSObjectArray newArrayWithObjects:(id[]){ EduStanfordNlpLingTokensregexTypesExpressions_CompositeValue_class_() } count:1 type:IOSClass_class_()]];
            EduStanfordNlpLingTokensregexTypesExpressions_CompositeValue *evaluatedCv = EduStanfordNlpLingTokensregexTypesExpressions_CompositeValue_evaluateNoTypeConversionWithEduStanfordNlpLingTokensregexEnv_withNSObjectArray_(cv, env, args);
            @try {
              return new_EduStanfordNlpLingTokensregexTypesExpressions_PrimitiveValue_initWithNSString_withId_withNSStringArray_(typeName, [((JavaLangReflectMethod *) nil_chk(m)) invokeWithId:[typeValue get] withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ evaluatedCv } count:1 type:NSObject_class_()]], [IOSObjectArray newArrayWithLength:0 type:NSString_class_()]);
            }
            @catch (JavaLangReflectInvocationTargetException *ex) {
              @throw new_JavaLangRuntimeException_initWithNSString_withNSException_(JreStrcat("$@", @"Cannot instantiate ", c), ex);
            }
            @catch (JavaLangIllegalAccessException *ex) {
              @throw new_JavaLangRuntimeException_initWithNSString_withNSException_(JreStrcat("$@", @"Cannot instantiate ", c), ex);
            }
          }
          @catch (JavaLangNoSuchMethodException *ex) {
          }
        }
      }
    }
    else if (typeValue != nil && [[typeValue get] isKindOfClass:[NSString class]]) {
      NSString *typeName = (NSString *) cast_chk([typeValue get], [NSString class]);
      id<EduStanfordNlpLingTokensregexTypesExpression> valueField = [((id<JavaUtilMap>) nil_chk(cv->value_)) getWithId:@"value"];
      id<EduStanfordNlpLingTokensregexTypesValue> value = [((id<EduStanfordNlpLingTokensregexTypesExpression>) nil_chk(valueField)) evaluateWithEduStanfordNlpLingTokensregexEnv:env withNSObjectArray:args];
      switch (JreIndexOfStr(typeName, (id[]){ EduStanfordNlpLingTokensregexTypesExpressions_TYPE_ANNOTATION_KEY, EduStanfordNlpLingTokensregexTypesExpressions_TYPE_CLASS, EduStanfordNlpLingTokensregexTypesExpressions_TYPE_STRING, EduStanfordNlpLingTokensregexTypesExpressions_TYPE_REGEX, EduStanfordNlpLingTokensregexTypesExpressions_TYPE_NUMBER }, 5)) {
        case 0:
        {
          NSString *className_ = (NSString *) cast_chk([((id<EduStanfordNlpLingTokensregexTypesValue>) nil_chk(value)) get], [NSString class]);
          @try {
            return new_EduStanfordNlpLingTokensregexTypesExpressions_PrimitiveValue_initWithNSString_withId_withNSStringArray_(EduStanfordNlpLingTokensregexTypesExpressions_TYPE_ANNOTATION_KEY, IOSClass_forName_(className_), [IOSObjectArray newArrayWithLength:0 type:NSString_class_()]);
          }
          @catch (JavaLangClassNotFoundException *ex) {
            @throw new_JavaLangRuntimeException_initWithNSString_withNSException_(JreStrcat("$$", @"Unknown class ", className_), ex);
          }
        }
        case 1:
        {
          NSString *className_ = (NSString *) cast_chk([((id<EduStanfordNlpLingTokensregexTypesValue>) nil_chk(value)) get], [NSString class]);
          @try {
            return new_EduStanfordNlpLingTokensregexTypesExpressions_PrimitiveValue_initWithNSString_withId_withNSStringArray_(EduStanfordNlpLingTokensregexTypesExpressions_TYPE_CLASS, IOSClass_forName_(className_), [IOSObjectArray newArrayWithLength:0 type:NSString_class_()]);
          }
          @catch (JavaLangClassNotFoundException *ex) {
            @throw new_JavaLangRuntimeException_initWithNSString_withNSException_(JreStrcat("$$", @"Unknown class ", className_), ex);
          }
        }
        case 2:
        return new_EduStanfordNlpLingTokensregexTypesExpressions_PrimitiveValue_initWithNSString_withId_withNSStringArray_(EduStanfordNlpLingTokensregexTypesExpressions_TYPE_STRING, (NSString *) cast_chk([((id<EduStanfordNlpLingTokensregexTypesValue>) nil_chk(value)) get], [NSString class]), [IOSObjectArray newArrayWithLength:0 type:NSString_class_()]);
        case 3:
        return new_EduStanfordNlpLingTokensregexTypesExpressions_RegexValue_initWithNSString_withNSStringArray_((NSString *) cast_chk([((id<EduStanfordNlpLingTokensregexTypesValue>) nil_chk(value)) get], [NSString class]), [IOSObjectArray newArrayWithLength:0 type:NSString_class_()]);
        case 4:
        if ([[((id<EduStanfordNlpLingTokensregexTypesValue>) nil_chk(value)) get] isKindOfClass:[NSNumber class]]) {
          return new_EduStanfordNlpLingTokensregexTypesExpressions_PrimitiveValue_initWithNSString_withId_withNSStringArray_(EduStanfordNlpLingTokensregexTypesExpressions_TYPE_NUMBER, (NSNumber *) cast_chk([value get], [NSNumber class]), [IOSObjectArray newArrayWithLength:0 type:NSString_class_()]);
        }
        else if ([[value get] isKindOfClass:[NSString class]]) {
          NSString *str = (NSString *) cast_chk([value get], [NSString class]);
          if ([((NSString *) nil_chk(str)) contains:@"."]) {
            return new_EduStanfordNlpLingTokensregexTypesExpressions_PrimitiveValue_initWithNSString_withId_withNSStringArray_(EduStanfordNlpLingTokensregexTypesExpressions_TYPE_NUMBER, JavaLangDouble_valueOfWithNSString_(str), [IOSObjectArray newArrayWithLength:0 type:NSString_class_()]);
          }
          else {
            return new_EduStanfordNlpLingTokensregexTypesExpressions_PrimitiveValue_initWithNSString_withId_withNSStringArray_(EduStanfordNlpLingTokensregexTypesExpressions_TYPE_NUMBER, JavaLangLong_valueOfWithNSString_(str), [IOSObjectArray newArrayWithLength:0 type:NSString_class_()]);
          }
        }
        else {
          @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@$$", @"Invalid value ", value, @" for type ", typeName));
        }
        default:
        return new_EduStanfordNlpLingTokensregexTypesExpressions_PrimitiveValue_initWithNSString_withId_withNSStringArray_(typeName, [((id<EduStanfordNlpLingTokensregexTypesValue>) nil_chk(value)) get], [IOSObjectArray newArrayWithLength:0 type:NSString_class_()]);
      }
    }
  }
  return nil;
}

EduStanfordNlpLingTokensregexTypesExpressions_CompositeValue *EduStanfordNlpLingTokensregexTypesExpressions_CompositeValue_evaluateNoTypeConversionWithEduStanfordNlpLingTokensregexEnv_withNSObjectArray_(EduStanfordNlpLingTokensregexTypesExpressions_CompositeValue *self, EduStanfordNlpLingTokensregexEnv *env, IOSObjectArray *args) {
  id<JavaUtilMap> m = self->value_;
  id<JavaUtilMap> res = new_JavaUtilHashMap_initWithInt_([((id<JavaUtilMap>) nil_chk(m)) size]);
  for (id<JavaUtilMap_Entry> __strong stringExpressionEntry in nil_chk([m entrySet])) {
    (void) [res putWithId:[((id<JavaUtilMap_Entry>) nil_chk(stringExpressionEntry)) getKey] withId:[((id<EduStanfordNlpLingTokensregexTypesExpression>) nil_chk([stringExpressionEntry getValue])) evaluateWithEduStanfordNlpLingTokensregexEnv:env withNSObjectArray:args]];
  }
  return new_EduStanfordNlpLingTokensregexTypesExpressions_CompositeValue_initWithJavaUtilMap_withBoolean_withNSStringArray_(res, true, [IOSObjectArray newArrayWithLength:0 type:NSString_class_()]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexTypesExpressions_CompositeValue)
