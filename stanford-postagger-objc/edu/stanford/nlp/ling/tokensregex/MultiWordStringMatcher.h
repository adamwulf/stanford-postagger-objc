//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/ling/tokensregex/MultiWordStringMatcher.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_EduStanfordNlpLingTokensregexMultiWordStringMatcher")
#ifdef RESTRICT_EduStanfordNlpLingTokensregexMultiWordStringMatcher
#define INCLUDE_ALL_EduStanfordNlpLingTokensregexMultiWordStringMatcher 0
#else
#define INCLUDE_ALL_EduStanfordNlpLingTokensregexMultiWordStringMatcher 1
#endif
#undef RESTRICT_EduStanfordNlpLingTokensregexMultiWordStringMatcher

#if !defined (EduStanfordNlpLingTokensregexMultiWordStringMatcher_) && (INCLUDE_ALL_EduStanfordNlpLingTokensregexMultiWordStringMatcher || defined(INCLUDE_EduStanfordNlpLingTokensregexMultiWordStringMatcher))
#define EduStanfordNlpLingTokensregexMultiWordStringMatcher_

@class EduStanfordNlpLingTokensregexMultiWordStringMatcher_MatchType;
@class IOSObjectArray;
@class JavaUtilRegexPattern;
@protocol JavaUtilComparator;
@protocol JavaUtilList;

@interface EduStanfordNlpLingTokensregexMultiWordStringMatcher : NSObject {
 @public
  EduStanfordNlpLingTokensregexMultiWordStringMatcher_MatchType *matchType_;
}

#pragma mark Public

- (instancetype)initWithEduStanfordNlpLingTokensregexMultiWordStringMatcher_MatchType:(EduStanfordNlpLingTokensregexMultiWordStringMatcher_MatchType *)matchType;

- (instancetype)initWithNSString:(NSString *)matchTypeStr;

- (JavaUtilRegexPattern *)createPatternWithNSString:(NSString *)targetString;

+ (id<JavaUtilList>)findOffsetsWithJavaUtilRegexPattern:(JavaUtilRegexPattern *)pattern
                                           withNSString:(NSString *)text;

+ (id<JavaUtilList>)findOffsetsWithJavaUtilRegexPattern:(JavaUtilRegexPattern *)pattern
                                           withNSString:(NSString *)text
                                                withInt:(jint)start
                                                withInt:(jint)end;

- (id<JavaUtilList>)findTargetStringOffsetsWithNSString:(NSString *)text
                                           withNSString:(NSString *)targetString;

- (id<JavaUtilList>)findTargetStringOffsetsWithNSString:(NSString *)text
                                           withNSString:(NSString *)targetString
                                                withInt:(jint)start
                                                withInt:(jint)end;

- (NSString *)getExctWsRegexWithNSString:(NSString *)targetString;

- (NSString *)getLnrmRegexWithNSString:(NSString *)targetString;

- (NSString *)getLWsRegexWithNSString:(NSString *)targetString;

- (EduStanfordNlpLingTokensregexMultiWordStringMatcher_MatchType *)getMatchType;

- (JavaUtilRegexPattern *)getPatternWithNSString:(NSString *)targetString;

- (JavaUtilRegexPattern *)getPatternWithNSStringArray:(IOSObjectArray *)targetStrings;

- (NSString *)getRegexWithNSString:(NSString *)targetString;

- (NSString *)getRegexWithNSStringArray:(IOSObjectArray *)targetStrings;

- (NSString *)putSpacesAroundTargetStringWithNSString:(NSString *)text
                                         withNSString:(NSString *)targetString;

- (void)setMatchTypeWithEduStanfordNlpLingTokensregexMultiWordStringMatcher_MatchType:(EduStanfordNlpLingTokensregexMultiWordStringMatcher_MatchType *)matchType;

#pragma mark Protected

- (id<JavaUtilList>)findTargetStringOffsetsExctWithNSString:(NSString *)text
                                               withNSString:(NSString *)targetString
                                                    withInt:(jint)start
                                                    withInt:(jint)end;

- (id<JavaUtilList>)findTargetStringOffsetsRegexWithNSString:(NSString *)text
                                                withNSString:(NSString *)targetString
                                                     withInt:(jint)start
                                                     withInt:(jint)end;

- (NSString *)markTargetStringWithNSString:(NSString *)text
                              withNSString:(NSString *)targetString
                              withNSString:(NSString *)beginMark
                              withNSString:(NSString *)endMark
                               withBoolean:(jboolean)markOnlyIfSpace;

@end

J2OBJC_STATIC_INIT(EduStanfordNlpLingTokensregexMultiWordStringMatcher)

J2OBJC_FIELD_SETTER(EduStanfordNlpLingTokensregexMultiWordStringMatcher, matchType_, EduStanfordNlpLingTokensregexMultiWordStringMatcher_MatchType *)

inline id<JavaUtilComparator> EduStanfordNlpLingTokensregexMultiWordStringMatcher_get_LONGEST_STRING_COMPARATOR();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<JavaUtilComparator> EduStanfordNlpLingTokensregexMultiWordStringMatcher_LONGEST_STRING_COMPARATOR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpLingTokensregexMultiWordStringMatcher, LONGEST_STRING_COMPARATOR, id<JavaUtilComparator>)

FOUNDATION_EXPORT void EduStanfordNlpLingTokensregexMultiWordStringMatcher_initWithEduStanfordNlpLingTokensregexMultiWordStringMatcher_MatchType_(EduStanfordNlpLingTokensregexMultiWordStringMatcher *self, EduStanfordNlpLingTokensregexMultiWordStringMatcher_MatchType *matchType);

FOUNDATION_EXPORT EduStanfordNlpLingTokensregexMultiWordStringMatcher *new_EduStanfordNlpLingTokensregexMultiWordStringMatcher_initWithEduStanfordNlpLingTokensregexMultiWordStringMatcher_MatchType_(EduStanfordNlpLingTokensregexMultiWordStringMatcher_MatchType *matchType) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EduStanfordNlpLingTokensregexMultiWordStringMatcher *create_EduStanfordNlpLingTokensregexMultiWordStringMatcher_initWithEduStanfordNlpLingTokensregexMultiWordStringMatcher_MatchType_(EduStanfordNlpLingTokensregexMultiWordStringMatcher_MatchType *matchType);

FOUNDATION_EXPORT void EduStanfordNlpLingTokensregexMultiWordStringMatcher_initWithNSString_(EduStanfordNlpLingTokensregexMultiWordStringMatcher *self, NSString *matchTypeStr);

FOUNDATION_EXPORT EduStanfordNlpLingTokensregexMultiWordStringMatcher *new_EduStanfordNlpLingTokensregexMultiWordStringMatcher_initWithNSString_(NSString *matchTypeStr) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EduStanfordNlpLingTokensregexMultiWordStringMatcher *create_EduStanfordNlpLingTokensregexMultiWordStringMatcher_initWithNSString_(NSString *matchTypeStr);

FOUNDATION_EXPORT id<JavaUtilList> EduStanfordNlpLingTokensregexMultiWordStringMatcher_findOffsetsWithJavaUtilRegexPattern_withNSString_(JavaUtilRegexPattern *pattern, NSString *text);

FOUNDATION_EXPORT id<JavaUtilList> EduStanfordNlpLingTokensregexMultiWordStringMatcher_findOffsetsWithJavaUtilRegexPattern_withNSString_withInt_withInt_(JavaUtilRegexPattern *pattern, NSString *text, jint start, jint end);

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpLingTokensregexMultiWordStringMatcher)

#endif

#if !defined (EduStanfordNlpLingTokensregexMultiWordStringMatcher_MatchType_) && (INCLUDE_ALL_EduStanfordNlpLingTokensregexMultiWordStringMatcher || defined(INCLUDE_EduStanfordNlpLingTokensregexMultiWordStringMatcher_MatchType))
#define EduStanfordNlpLingTokensregexMultiWordStringMatcher_MatchType_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, EduStanfordNlpLingTokensregexMultiWordStringMatcher_MatchType_Enum) {
  EduStanfordNlpLingTokensregexMultiWordStringMatcher_MatchType_Enum_EXCT = 0,
  EduStanfordNlpLingTokensregexMultiWordStringMatcher_MatchType_Enum_EXCTWS = 1,
  EduStanfordNlpLingTokensregexMultiWordStringMatcher_MatchType_Enum_LWS = 2,
  EduStanfordNlpLingTokensregexMultiWordStringMatcher_MatchType_Enum_LNRM = 3,
  EduStanfordNlpLingTokensregexMultiWordStringMatcher_MatchType_Enum_REGEX = 4,
};

@interface EduStanfordNlpLingTokensregexMultiWordStringMatcher_MatchType : JavaLangEnum < NSCopying >

#pragma mark Public

+ (EduStanfordNlpLingTokensregexMultiWordStringMatcher_MatchType *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (id)copyWithZone:(NSZone *)zone;

@end

J2OBJC_STATIC_INIT(EduStanfordNlpLingTokensregexMultiWordStringMatcher_MatchType)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT EduStanfordNlpLingTokensregexMultiWordStringMatcher_MatchType *EduStanfordNlpLingTokensregexMultiWordStringMatcher_MatchType_values_[];

inline EduStanfordNlpLingTokensregexMultiWordStringMatcher_MatchType *EduStanfordNlpLingTokensregexMultiWordStringMatcher_MatchType_get_EXCT();
J2OBJC_ENUM_CONSTANT(EduStanfordNlpLingTokensregexMultiWordStringMatcher_MatchType, EXCT)

inline EduStanfordNlpLingTokensregexMultiWordStringMatcher_MatchType *EduStanfordNlpLingTokensregexMultiWordStringMatcher_MatchType_get_EXCTWS();
J2OBJC_ENUM_CONSTANT(EduStanfordNlpLingTokensregexMultiWordStringMatcher_MatchType, EXCTWS)

inline EduStanfordNlpLingTokensregexMultiWordStringMatcher_MatchType *EduStanfordNlpLingTokensregexMultiWordStringMatcher_MatchType_get_LWS();
J2OBJC_ENUM_CONSTANT(EduStanfordNlpLingTokensregexMultiWordStringMatcher_MatchType, LWS)

inline EduStanfordNlpLingTokensregexMultiWordStringMatcher_MatchType *EduStanfordNlpLingTokensregexMultiWordStringMatcher_MatchType_get_LNRM();
J2OBJC_ENUM_CONSTANT(EduStanfordNlpLingTokensregexMultiWordStringMatcher_MatchType, LNRM)

inline EduStanfordNlpLingTokensregexMultiWordStringMatcher_MatchType *EduStanfordNlpLingTokensregexMultiWordStringMatcher_MatchType_get_REGEX();
J2OBJC_ENUM_CONSTANT(EduStanfordNlpLingTokensregexMultiWordStringMatcher_MatchType, REGEX)

FOUNDATION_EXPORT IOSObjectArray *EduStanfordNlpLingTokensregexMultiWordStringMatcher_MatchType_values();

FOUNDATION_EXPORT EduStanfordNlpLingTokensregexMultiWordStringMatcher_MatchType *EduStanfordNlpLingTokensregexMultiWordStringMatcher_MatchType_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT EduStanfordNlpLingTokensregexMultiWordStringMatcher_MatchType *EduStanfordNlpLingTokensregexMultiWordStringMatcher_MatchType_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpLingTokensregexMultiWordStringMatcher_MatchType)

#endif

#if !defined (EduStanfordNlpLingTokensregexMultiWordStringMatcher_LongestStringComparator_) && (INCLUDE_ALL_EduStanfordNlpLingTokensregexMultiWordStringMatcher || defined(INCLUDE_EduStanfordNlpLingTokensregexMultiWordStringMatcher_LongestStringComparator))
#define EduStanfordNlpLingTokensregexMultiWordStringMatcher_LongestStringComparator_

#define RESTRICT_JavaUtilComparator 1
#define INCLUDE_JavaUtilComparator 1
#include "java/util/Comparator.h"

@protocol JavaUtilFunctionFunction;
@protocol JavaUtilFunctionToDoubleFunction;
@protocol JavaUtilFunctionToIntFunction;
@protocol JavaUtilFunctionToLongFunction;

@interface EduStanfordNlpLingTokensregexMultiWordStringMatcher_LongestStringComparator : NSObject < JavaUtilComparator >

#pragma mark Public

- (instancetype)init;

- (jint)compareWithId:(NSString *)o1
               withId:(NSString *)o2;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpLingTokensregexMultiWordStringMatcher_LongestStringComparator)

FOUNDATION_EXPORT void EduStanfordNlpLingTokensregexMultiWordStringMatcher_LongestStringComparator_init(EduStanfordNlpLingTokensregexMultiWordStringMatcher_LongestStringComparator *self);

FOUNDATION_EXPORT EduStanfordNlpLingTokensregexMultiWordStringMatcher_LongestStringComparator *new_EduStanfordNlpLingTokensregexMultiWordStringMatcher_LongestStringComparator_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EduStanfordNlpLingTokensregexMultiWordStringMatcher_LongestStringComparator *create_EduStanfordNlpLingTokensregexMultiWordStringMatcher_LongestStringComparator_init();

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpLingTokensregexMultiWordStringMatcher_LongestStringComparator)

#endif

#pragma pop_macro("INCLUDE_ALL_EduStanfordNlpLingTokensregexMultiWordStringMatcher")
