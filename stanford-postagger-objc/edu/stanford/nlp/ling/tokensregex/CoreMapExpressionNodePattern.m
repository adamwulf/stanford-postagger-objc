//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/ling/tokensregex/CoreMapExpressionNodePattern.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/ling/tokensregex/CoreMapExpressionNodePattern.h"
#include "edu/stanford/nlp/ling/tokensregex/Env.h"
#include "edu/stanford/nlp/ling/tokensregex/NodePattern.h"
#include "edu/stanford/nlp/ling/tokensregex/types/Expression.h"
#include "edu/stanford/nlp/ling/tokensregex/types/Expressions.h"
#include "edu/stanford/nlp/ling/tokensregex/types/Value.h"
#include "edu/stanford/nlp/util/CoreMap.h"
#include "java/lang/Boolean.h"

@implementation EduStanfordNlpLingTokensregexCoreMapExpressionNodePattern

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpLingTokensregexCoreMapExpressionNodePattern_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithEduStanfordNlpLingTokensregexEnv:(EduStanfordNlpLingTokensregexEnv *)env
        withEduStanfordNlpLingTokensregexTypesExpression:(id<EduStanfordNlpLingTokensregexTypesExpression>)expression {
  EduStanfordNlpLingTokensregexCoreMapExpressionNodePattern_initWithEduStanfordNlpLingTokensregexEnv_withEduStanfordNlpLingTokensregexTypesExpression_(self, env, expression);
  return self;
}

+ (EduStanfordNlpLingTokensregexCoreMapExpressionNodePattern *)valueOfWithEduStanfordNlpLingTokensregexTypesExpression:(id<EduStanfordNlpLingTokensregexTypesExpression>)expression {
  return EduStanfordNlpLingTokensregexCoreMapExpressionNodePattern_valueOfWithEduStanfordNlpLingTokensregexTypesExpression_(expression);
}

+ (EduStanfordNlpLingTokensregexCoreMapExpressionNodePattern *)valueOfWithEduStanfordNlpLingTokensregexEnv:(EduStanfordNlpLingTokensregexEnv *)env
                                                          withEduStanfordNlpLingTokensregexTypesExpression:(id<EduStanfordNlpLingTokensregexTypesExpression>)expression {
  return EduStanfordNlpLingTokensregexCoreMapExpressionNodePattern_valueOfWithEduStanfordNlpLingTokensregexEnv_withEduStanfordNlpLingTokensregexTypesExpression_(env, expression);
}

- (jboolean)matchWithId:(id<EduStanfordNlpUtilCoreMap>)token {
  id<EduStanfordNlpLingTokensregexTypesValue> v = [((id<EduStanfordNlpLingTokensregexTypesExpression>) nil_chk(expression_)) evaluateWithEduStanfordNlpLingTokensregexEnv:env_ withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ token } count:1 type:NSObject_class_()]];
  JavaLangBoolean *matched = EduStanfordNlpLingTokensregexTypesExpressions_convertValueToBooleanWithEduStanfordNlpLingTokensregexTypesValue_withBoolean_(v, false);
  return (matched != nil) ? [((JavaLangBoolean *) nil_chk(matched)) booleanValue] : false;
}

- (NSString *)description {
  return [((id<EduStanfordNlpLingTokensregexTypesExpression>) nil_chk(expression_)) description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexCoreMapExpressionNodePattern;", 0x9, 1, 2, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexCoreMapExpressionNodePattern;", 0x9, 1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "LNSString;", 0x1, 6, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithEduStanfordNlpLingTokensregexEnv:withEduStanfordNlpLingTokensregexTypesExpression:);
  methods[2].selector = @selector(valueOfWithEduStanfordNlpLingTokensregexTypesExpression:);
  methods[3].selector = @selector(valueOfWithEduStanfordNlpLingTokensregexEnv:withEduStanfordNlpLingTokensregexTypesExpression:);
  methods[4].selector = @selector(matchWithId:);
  methods[5].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "env_", "LEduStanfordNlpLingTokensregexEnv;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "expression_", "LEduStanfordNlpLingTokensregexTypesExpression;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpLingTokensregexEnv;LEduStanfordNlpLingTokensregexTypesExpression;", "valueOf", "LEduStanfordNlpLingTokensregexTypesExpression;", "match", "LEduStanfordNlpUtilCoreMap;", "(Ledu/stanford/nlp/util/CoreMap;)Z", "toString", "Ledu/stanford/nlp/ling/tokensregex/NodePattern<Ledu/stanford/nlp/util/CoreMap;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexCoreMapExpressionNodePattern = { "CoreMapExpressionNodePattern", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, fields, 7, 0x1, 6, 2, -1, -1, -1, 7, -1 };
  return &_EduStanfordNlpLingTokensregexCoreMapExpressionNodePattern;
}

@end

void EduStanfordNlpLingTokensregexCoreMapExpressionNodePattern_init(EduStanfordNlpLingTokensregexCoreMapExpressionNodePattern *self) {
  EduStanfordNlpLingTokensregexNodePattern_init(self);
}

EduStanfordNlpLingTokensregexCoreMapExpressionNodePattern *new_EduStanfordNlpLingTokensregexCoreMapExpressionNodePattern_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexCoreMapExpressionNodePattern, init)
}

EduStanfordNlpLingTokensregexCoreMapExpressionNodePattern *create_EduStanfordNlpLingTokensregexCoreMapExpressionNodePattern_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexCoreMapExpressionNodePattern, init)
}

void EduStanfordNlpLingTokensregexCoreMapExpressionNodePattern_initWithEduStanfordNlpLingTokensregexEnv_withEduStanfordNlpLingTokensregexTypesExpression_(EduStanfordNlpLingTokensregexCoreMapExpressionNodePattern *self, EduStanfordNlpLingTokensregexEnv *env, id<EduStanfordNlpLingTokensregexTypesExpression> expression) {
  EduStanfordNlpLingTokensregexNodePattern_init(self);
  self->env_ = env;
  self->expression_ = expression;
}

EduStanfordNlpLingTokensregexCoreMapExpressionNodePattern *new_EduStanfordNlpLingTokensregexCoreMapExpressionNodePattern_initWithEduStanfordNlpLingTokensregexEnv_withEduStanfordNlpLingTokensregexTypesExpression_(EduStanfordNlpLingTokensregexEnv *env, id<EduStanfordNlpLingTokensregexTypesExpression> expression) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexCoreMapExpressionNodePattern, initWithEduStanfordNlpLingTokensregexEnv_withEduStanfordNlpLingTokensregexTypesExpression_, env, expression)
}

EduStanfordNlpLingTokensregexCoreMapExpressionNodePattern *create_EduStanfordNlpLingTokensregexCoreMapExpressionNodePattern_initWithEduStanfordNlpLingTokensregexEnv_withEduStanfordNlpLingTokensregexTypesExpression_(EduStanfordNlpLingTokensregexEnv *env, id<EduStanfordNlpLingTokensregexTypesExpression> expression) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexCoreMapExpressionNodePattern, initWithEduStanfordNlpLingTokensregexEnv_withEduStanfordNlpLingTokensregexTypesExpression_, env, expression)
}

EduStanfordNlpLingTokensregexCoreMapExpressionNodePattern *EduStanfordNlpLingTokensregexCoreMapExpressionNodePattern_valueOfWithEduStanfordNlpLingTokensregexTypesExpression_(id<EduStanfordNlpLingTokensregexTypesExpression> expression) {
  EduStanfordNlpLingTokensregexCoreMapExpressionNodePattern_initialize();
  return EduStanfordNlpLingTokensregexCoreMapExpressionNodePattern_valueOfWithEduStanfordNlpLingTokensregexEnv_withEduStanfordNlpLingTokensregexTypesExpression_(nil, expression);
}

EduStanfordNlpLingTokensregexCoreMapExpressionNodePattern *EduStanfordNlpLingTokensregexCoreMapExpressionNodePattern_valueOfWithEduStanfordNlpLingTokensregexEnv_withEduStanfordNlpLingTokensregexTypesExpression_(EduStanfordNlpLingTokensregexEnv *env, id<EduStanfordNlpLingTokensregexTypesExpression> expression) {
  EduStanfordNlpLingTokensregexCoreMapExpressionNodePattern_initialize();
  EduStanfordNlpLingTokensregexCoreMapExpressionNodePattern *p = new_EduStanfordNlpLingTokensregexCoreMapExpressionNodePattern_initWithEduStanfordNlpLingTokensregexEnv_withEduStanfordNlpLingTokensregexTypesExpression_(env, expression);
  return p;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexCoreMapExpressionNodePattern)
