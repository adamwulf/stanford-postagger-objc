//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/ling/tokensregex/MatchedExpression.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/ling/CoreAnnotations.h"
#include "edu/stanford/nlp/ling/tokensregex/Env.h"
#include "edu/stanford/nlp/ling/tokensregex/MatchedExpression.h"
#include "edu/stanford/nlp/ling/tokensregex/types/Value.h"
#include "edu/stanford/nlp/pipeline/ChunkAnnotationUtils.h"
#include "edu/stanford/nlp/pipeline/CoreMapAggregator.h"
#include "edu/stanford/nlp/util/Comparators.h"
#include "edu/stanford/nlp/util/CoreMap.h"
#include "edu/stanford/nlp/util/Interval.h"
#include "edu/stanford/nlp/util/IntervalTree.h"
#include "java/lang/Double.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/RuntimeException.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/Comparator.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/function/Function.h"
#include "java/util/function/ToDoubleFunction.h"
#include "java/util/function/ToIntFunction.h"
#include "java/util/function/ToLongFunction.h"

@interface EduStanfordNlpLingTokensregexMatchedExpression ()

- (jboolean)extractAnnotationWithEduStanfordNlpUtilCoreMap:(id<EduStanfordNlpUtilCoreMap>)sourceAnnotation
               withEduStanfordNlpPipelineCoreMapAggregator:(EduStanfordNlpPipelineCoreMapAggregator *)aggregator;

@end

__attribute__((unused)) static jboolean EduStanfordNlpLingTokensregexMatchedExpression_extractAnnotationWithEduStanfordNlpUtilCoreMap_withEduStanfordNlpPipelineCoreMapAggregator_(EduStanfordNlpLingTokensregexMatchedExpression *self, id<EduStanfordNlpUtilCoreMap> sourceAnnotation, EduStanfordNlpPipelineCoreMapAggregator *aggregator);

@interface EduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor ()

+ (void)setAnnotationsWithEduStanfordNlpUtilCoreMap:(id<EduStanfordNlpUtilCoreMap>)cm
                                   withJavaUtilList:(id<JavaUtilList>)annotationKeys
                                             withId:(id)obj;

@end

__attribute__((unused)) static void EduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor_setAnnotationsWithEduStanfordNlpUtilCoreMap_withJavaUtilList_withId_(id<EduStanfordNlpUtilCoreMap> cm, id<JavaUtilList> annotationKeys, id obj);

@interface EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$1 : NSObject < JavaUtilFunctionFunction >

- (id)applyWithId:(id<EduStanfordNlpUtilCoreMap>)inArg;

@end

J2OBJC_STATIC_INIT(EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$1)

inline EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$1 *EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$1_get_instance();
static EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$1 *EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$1_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$1, instance, EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$1 *)

__attribute__((unused)) static void EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$1_init(EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$1 *self);

__attribute__((unused)) static EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$1 *new_EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$1 *create_EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$1_init();

@interface EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$2 : NSObject < JavaUtilFunctionFunction >

- (id)applyWithId:(id<EduStanfordNlpUtilCoreMap>)inArg;

@end

J2OBJC_STATIC_INIT(EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$2)

inline EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$2 *EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$2_get_instance();
static EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$2 *EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$2_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$2, instance, EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$2 *)

__attribute__((unused)) static void EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$2_init(EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$2 *self);

__attribute__((unused)) static EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$2 *new_EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$2_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$2 *create_EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$2_init();

@interface EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$3 : NSObject < JavaUtilComparator >

- (jint)compareWithId:(EduStanfordNlpLingTokensregexMatchedExpression *)e1
               withId:(EduStanfordNlpLingTokensregexMatchedExpression *)e2;

@end

J2OBJC_STATIC_INIT(EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$3)

inline EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$3 *EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$3_get_instance();
static EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$3 *EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$3_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$3, instance, EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$3 *)

__attribute__((unused)) static void EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$3_init(EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$3 *self);

__attribute__((unused)) static EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$3 *new_EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$3_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$3 *create_EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$3_init();

@interface EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$4 : NSObject < JavaUtilComparator >

- (jint)compareWithId:(EduStanfordNlpLingTokensregexMatchedExpression *)e1
               withId:(EduStanfordNlpLingTokensregexMatchedExpression *)e2;

@end

J2OBJC_STATIC_INIT(EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$4)

inline EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$4 *EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$4_get_instance();
static EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$4 *EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$4_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$4, instance, EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$4 *)

__attribute__((unused)) static void EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$4_init(EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$4 *self);

__attribute__((unused)) static EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$4 *new_EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$4_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$4 *create_EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$4_init();

@interface EduStanfordNlpLingTokensregexMatchedExpression_$1 : NSObject < JavaUtilFunctionFunction >

- (EduStanfordNlpUtilInterval *)applyWithId:(EduStanfordNlpLingTokensregexMatchedExpression *)inArg;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpLingTokensregexMatchedExpression_$1)

__attribute__((unused)) static void EduStanfordNlpLingTokensregexMatchedExpression_$1_init(EduStanfordNlpLingTokensregexMatchedExpression_$1 *self);

__attribute__((unused)) static EduStanfordNlpLingTokensregexMatchedExpression_$1 *new_EduStanfordNlpLingTokensregexMatchedExpression_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpLingTokensregexMatchedExpression_$1 *create_EduStanfordNlpLingTokensregexMatchedExpression_$1_init();

@interface EduStanfordNlpLingTokensregexMatchedExpression_$2 : NSObject < JavaUtilComparator >

- (jint)compareWithId:(EduStanfordNlpLingTokensregexMatchedExpression *)e1
               withId:(EduStanfordNlpLingTokensregexMatchedExpression *)e2;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpLingTokensregexMatchedExpression_$2)

__attribute__((unused)) static void EduStanfordNlpLingTokensregexMatchedExpression_$2_init(EduStanfordNlpLingTokensregexMatchedExpression_$2 *self);

__attribute__((unused)) static EduStanfordNlpLingTokensregexMatchedExpression_$2 *new_EduStanfordNlpLingTokensregexMatchedExpression_$2_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpLingTokensregexMatchedExpression_$2 *create_EduStanfordNlpLingTokensregexMatchedExpression_$2_init();

@interface EduStanfordNlpLingTokensregexMatchedExpression_$3 : NSObject < JavaUtilComparator >

- (jint)compareWithId:(EduStanfordNlpLingTokensregexMatchedExpression *)e1
               withId:(EduStanfordNlpLingTokensregexMatchedExpression *)e2;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpLingTokensregexMatchedExpression_$3)

__attribute__((unused)) static void EduStanfordNlpLingTokensregexMatchedExpression_$3_init(EduStanfordNlpLingTokensregexMatchedExpression_$3 *self);

__attribute__((unused)) static EduStanfordNlpLingTokensregexMatchedExpression_$3 *new_EduStanfordNlpLingTokensregexMatchedExpression_$3_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpLingTokensregexMatchedExpression_$3 *create_EduStanfordNlpLingTokensregexMatchedExpression_$3_init();

@interface EduStanfordNlpLingTokensregexMatchedExpression_$4 : NSObject < JavaUtilComparator >

- (jint)compareWithId:(EduStanfordNlpLingTokensregexMatchedExpression *)e1
               withId:(EduStanfordNlpLingTokensregexMatchedExpression *)e2;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpLingTokensregexMatchedExpression_$4)

__attribute__((unused)) static void EduStanfordNlpLingTokensregexMatchedExpression_$4_init(EduStanfordNlpLingTokensregexMatchedExpression_$4 *self);

__attribute__((unused)) static EduStanfordNlpLingTokensregexMatchedExpression_$4 *new_EduStanfordNlpLingTokensregexMatchedExpression_$4_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpLingTokensregexMatchedExpression_$4 *create_EduStanfordNlpLingTokensregexMatchedExpression_$4_init();

@interface EduStanfordNlpLingTokensregexMatchedExpression_$5 : NSObject < JavaUtilFunctionFunction >

- (JavaLangDouble *)applyWithId:(EduStanfordNlpLingTokensregexMatchedExpression *)inArg;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpLingTokensregexMatchedExpression_$5)

__attribute__((unused)) static void EduStanfordNlpLingTokensregexMatchedExpression_$5_init(EduStanfordNlpLingTokensregexMatchedExpression_$5 *self);

__attribute__((unused)) static EduStanfordNlpLingTokensregexMatchedExpression_$5 *new_EduStanfordNlpLingTokensregexMatchedExpression_$5_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpLingTokensregexMatchedExpression_$5 *create_EduStanfordNlpLingTokensregexMatchedExpression_$5_init();

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpLingTokensregexMatchedExpression)

id<JavaUtilFunctionFunction> EduStanfordNlpLingTokensregexMatchedExpression_COREMAP_TO_TOKEN_OFFSETS_INTERVAL_FUNC;
id<JavaUtilFunctionFunction> EduStanfordNlpLingTokensregexMatchedExpression_COREMAP_TO_CHAR_OFFSETS_INTERVAL_FUNC;
id<JavaUtilFunctionFunction> EduStanfordNlpLingTokensregexMatchedExpression_EXPR_TO_TOKEN_OFFSETS_INTERVAL_FUNC;
id<JavaUtilComparator> EduStanfordNlpLingTokensregexMatchedExpression_EXPR_PRIORITY_COMPARATOR;
id<JavaUtilComparator> EduStanfordNlpLingTokensregexMatchedExpression_EXPR_ORDER_COMPARATOR;
id<JavaUtilComparator> EduStanfordNlpLingTokensregexMatchedExpression_EXPR_LENGTH_COMPARATOR;
id<JavaUtilComparator> EduStanfordNlpLingTokensregexMatchedExpression_EXPR_TOKEN_OFFSET_COMPARATOR;
id<JavaUtilComparator> EduStanfordNlpLingTokensregexMatchedExpression_EXPR_TOKEN_OFFSETS_NESTED_FIRST_COMPARATOR;
id<JavaUtilComparator> EduStanfordNlpLingTokensregexMatchedExpression_EXPR_PRIORITY_LENGTH_COMPARATOR;
id<JavaUtilComparator> EduStanfordNlpLingTokensregexMatchedExpression_EXPR_LENGTH_PRIORITY_COMPARATOR;
id<JavaUtilFunctionFunction> EduStanfordNlpLingTokensregexMatchedExpression_EXPR_WEIGHT_SCORER;

@implementation EduStanfordNlpLingTokensregexMatchedExpression

- (instancetype)initWithEduStanfordNlpLingTokensregexMatchedExpression:(EduStanfordNlpLingTokensregexMatchedExpression *)me {
  EduStanfordNlpLingTokensregexMatchedExpression_initWithEduStanfordNlpLingTokensregexMatchedExpression_(self, me);
  return self;
}

- (instancetype)initWithEduStanfordNlpUtilInterval:(EduStanfordNlpUtilInterval *)charOffsets
                    withEduStanfordNlpUtilInterval:(EduStanfordNlpUtilInterval *)tokenOffsets
withEduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor:(EduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor *)extractFunc
                                        withDouble:(jdouble)priority
                                        withDouble:(jdouble)weight {
  EduStanfordNlpLingTokensregexMatchedExpression_initWithEduStanfordNlpUtilInterval_withEduStanfordNlpUtilInterval_withEduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor_withDouble_withDouble_(self, charOffsets, tokenOffsets, extractFunc, priority, weight);
  return self;
}

- (jboolean)extractAnnotationWithEduStanfordNlpLingTokensregexEnv:(EduStanfordNlpLingTokensregexEnv *)env
                                    withEduStanfordNlpUtilCoreMap:(id<EduStanfordNlpUtilCoreMap>)sourceAnnotation {
  return EduStanfordNlpLingTokensregexMatchedExpression_extractAnnotationWithEduStanfordNlpUtilCoreMap_withEduStanfordNlpPipelineCoreMapAggregator_(self, sourceAnnotation, ((EduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor *) nil_chk(extractFunc_))->tokensAggregator_);
}

- (jboolean)extractAnnotationWithEduStanfordNlpUtilCoreMap:(id<EduStanfordNlpUtilCoreMap>)sourceAnnotation
               withEduStanfordNlpPipelineCoreMapAggregator:(EduStanfordNlpPipelineCoreMapAggregator *)aggregator {
  return EduStanfordNlpLingTokensregexMatchedExpression_extractAnnotationWithEduStanfordNlpUtilCoreMap_withEduStanfordNlpPipelineCoreMapAggregator_(self, sourceAnnotation, aggregator);
}

- (jboolean)extractAnnotationWithEduStanfordNlpLingTokensregexEnv:(EduStanfordNlpLingTokensregexEnv *)env
                                                 withJavaUtilList:(id<JavaUtilList>)source {
  return [self extractAnnotationWithJavaUtilList:source withEduStanfordNlpPipelineCoreMapAggregator:EduStanfordNlpPipelineCoreMapAggregator_getDefaultAggregator()];
}

- (jboolean)extractAnnotationWithJavaUtilList:(id<JavaUtilList>)source
  withEduStanfordNlpPipelineCoreMapAggregator:(EduStanfordNlpPipelineCoreMapAggregator *)aggregator {
  annotation_ = [((EduStanfordNlpPipelineCoreMapAggregator *) nil_chk(aggregator)) mergeWithJavaUtilList:source withInt:[((JavaLangInteger *) nil_chk([((EduStanfordNlpUtilInterval *) nil_chk(chunkOffsets_)) getBegin])) intValue] withInt:[((JavaLangInteger *) nil_chk([((EduStanfordNlpUtilInterval *) nil_chk(chunkOffsets_)) getEnd])) intValue]];
  charOffsets_ = EduStanfordNlpUtilInterval_toIntervalWithJavaLangComparable_withJavaLangComparable_withInt_([((id<EduStanfordNlpUtilCoreMap>) nil_chk(annotation_)) getWithIOSClass:EduStanfordNlpLingCoreAnnotations_CharacterOffsetBeginAnnotation_class_()], [((id<EduStanfordNlpUtilCoreMap>) nil_chk(annotation_)) getWithIOSClass:EduStanfordNlpLingCoreAnnotations_CharacterOffsetEndAnnotation_class_()], EduStanfordNlpUtilInterval_INTERVAL_OPEN_END);
  tokenOffsets_ = EduStanfordNlpUtilInterval_toIntervalWithJavaLangComparable_withJavaLangComparable_withInt_([((id<EduStanfordNlpUtilCoreMap>) nil_chk(annotation_)) getWithIOSClass:EduStanfordNlpLingCoreAnnotations_TokenBeginAnnotation_class_()], [((id<EduStanfordNlpUtilCoreMap>) nil_chk(annotation_)) getWithIOSClass:EduStanfordNlpLingCoreAnnotations_TokenEndAnnotation_class_()], EduStanfordNlpUtilInterval_INTERVAL_OPEN_END);
  text_ = [((id<EduStanfordNlpUtilCoreMap>) nil_chk(annotation_)) getWithIOSClass:EduStanfordNlpLingCoreAnnotations_TextAnnotation_class_()];
  [((EduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor *) nil_chk(extractFunc_)) annotateWithEduStanfordNlpLingTokensregexMatchedExpression:self withJavaUtilList:[((id<JavaUtilList>) nil_chk(source)) subListWithInt:[((JavaLangInteger *) nil_chk([((EduStanfordNlpUtilInterval *) nil_chk(chunkOffsets_)) getBegin])) intValue] withInt:[((JavaLangInteger *) nil_chk([((EduStanfordNlpUtilInterval *) nil_chk(chunkOffsets_)) getEnd])) intValue]]];
  return true;
}

- (EduStanfordNlpUtilInterval *)getCharOffsets {
  return charOffsets_;
}

- (EduStanfordNlpUtilInterval *)getTokenOffsets {
  return tokenOffsets_;
}

- (EduStanfordNlpUtilInterval *)getChunkOffsets {
  return chunkOffsets_;
}

- (jdouble)getPriority {
  return priority_;
}

- (jdouble)getWeight {
  return weight_;
}

- (jint)getOrder {
  return order_;
}

- (jboolean)isIncludeNested {
  return ((EduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor *) nil_chk(extractFunc_))->includeNested_;
}

- (void)setIncludeNestedWithBoolean:(jboolean)includeNested {
  ((EduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor *) nil_chk(extractFunc_))->includeNested_ = includeNested;
}

- (NSString *)getText {
  return text_;
}

- (id<EduStanfordNlpUtilCoreMap>)getAnnotation {
  return annotation_;
}

- (id<EduStanfordNlpLingTokensregexTypesValue>)getValue {
  return value_;
}

- (NSString *)description {
  return text_;
}

+ (id<JavaUtilList>)replaceMergedWithJavaUtilList:(id<JavaUtilList>)list
                                 withJavaUtilList:(id<JavaUtilList>)matchedExprs {
  return EduStanfordNlpLingTokensregexMatchedExpression_replaceMergedWithJavaUtilList_withJavaUtilList_(list, matchedExprs);
}

+ (id<JavaUtilList>)replaceMergedUsingTokenOffsetsWithJavaUtilList:(id<JavaUtilList>)list
                                                  withJavaUtilList:(id<JavaUtilList>)matchedExprs {
  return EduStanfordNlpLingTokensregexMatchedExpression_replaceMergedUsingTokenOffsetsWithJavaUtilList_withJavaUtilList_(list, matchedExprs);
}

+ (id<JavaUtilList>)removeNullValuesWithJavaUtilList:(id<JavaUtilList>)chunks {
  return EduStanfordNlpLingTokensregexMatchedExpression_removeNullValuesWithJavaUtilList_(chunks);
}

+ (id<JavaUtilList>)removeNestedWithJavaUtilList:(id<JavaUtilList>)chunks {
  return EduStanfordNlpLingTokensregexMatchedExpression_removeNestedWithJavaUtilList_(chunks);
}

+ (id<JavaUtilList>)removeOverlappingWithJavaUtilList:(id<JavaUtilList>)chunks {
  return EduStanfordNlpLingTokensregexMatchedExpression_removeOverlappingWithJavaUtilList_(chunks);
}

+ (EduStanfordNlpLingTokensregexMatchedExpression *)getBestMatchedWithJavaUtilList:(id<JavaUtilList>)matches
                                                      withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)scorer {
  return EduStanfordNlpLingTokensregexMatchedExpression_getBestMatchedWithJavaUtilList_withJavaUtilFunctionFunction_(matches, scorer);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, 2, -1, -1 },
    { NULL, "Z", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 3, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 6, -1, 7, -1, -1 },
    { NULL, "Z", 0x4, 3, 8, -1, 9, -1, -1 },
    { NULL, "LEduStanfordNlpUtilInterval;", 0x1, -1, -1, -1, 10, -1, -1 },
    { NULL, "LEduStanfordNlpUtilInterval;", 0x1, -1, -1, -1, 10, -1, -1 },
    { NULL, "LEduStanfordNlpUtilInterval;", 0x1, -1, -1, -1, 10, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpUtilCoreMap;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexTypesValue;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 13, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 14, 15, -1, 16, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 17, 15, -1, 16, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 18, 19, -1, 20, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 21, 19, -1, 20, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 22, 19, -1, 20, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexMatchedExpression;", 0x9, 23, 24, -1, 25, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpLingTokensregexMatchedExpression:);
  methods[1].selector = @selector(initWithEduStanfordNlpUtilInterval:withEduStanfordNlpUtilInterval:withEduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor:withDouble:withDouble:);
  methods[2].selector = @selector(extractAnnotationWithEduStanfordNlpLingTokensregexEnv:withEduStanfordNlpUtilCoreMap:);
  methods[3].selector = @selector(extractAnnotationWithEduStanfordNlpUtilCoreMap:withEduStanfordNlpPipelineCoreMapAggregator:);
  methods[4].selector = @selector(extractAnnotationWithEduStanfordNlpLingTokensregexEnv:withJavaUtilList:);
  methods[5].selector = @selector(extractAnnotationWithJavaUtilList:withEduStanfordNlpPipelineCoreMapAggregator:);
  methods[6].selector = @selector(getCharOffsets);
  methods[7].selector = @selector(getTokenOffsets);
  methods[8].selector = @selector(getChunkOffsets);
  methods[9].selector = @selector(getPriority);
  methods[10].selector = @selector(getWeight);
  methods[11].selector = @selector(getOrder);
  methods[12].selector = @selector(isIncludeNested);
  methods[13].selector = @selector(setIncludeNestedWithBoolean:);
  methods[14].selector = @selector(getText);
  methods[15].selector = @selector(getAnnotation);
  methods[16].selector = @selector(getValue);
  methods[17].selector = @selector(description);
  methods[18].selector = @selector(replaceMergedWithJavaUtilList:withJavaUtilList:);
  methods[19].selector = @selector(replaceMergedUsingTokenOffsetsWithJavaUtilList:withJavaUtilList:);
  methods[20].selector = @selector(removeNullValuesWithJavaUtilList:);
  methods[21].selector = @selector(removeNestedWithJavaUtilList:);
  methods[22].selector = @selector(removeOverlappingWithJavaUtilList:);
  methods[23].selector = @selector(getBestMatchedWithJavaUtilList:withJavaUtilFunctionFunction:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "text_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "charOffsets_", "LEduStanfordNlpUtilInterval;", .constantValue.asLong = 0, 0x4, -1, -1, 26, -1 },
    { "tokenOffsets_", "LEduStanfordNlpUtilInterval;", .constantValue.asLong = 0, 0x4, -1, -1, 26, -1 },
    { "chunkOffsets_", "LEduStanfordNlpUtilInterval;", .constantValue.asLong = 0, 0x4, -1, -1, 26, -1 },
    { "annotation_", "LEduStanfordNlpUtilCoreMap;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "context_", "LNSObject;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "extractFunc_", "LEduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "value_", "LEduStanfordNlpLingTokensregexTypesValue;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "priority_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "weight_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "order_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "COREMAP_TO_TOKEN_OFFSETS_INTERVAL_FUNC", "LJavaUtilFunctionFunction;", .constantValue.asLong = 0, 0x19, -1, 27, 28, -1 },
    { "COREMAP_TO_CHAR_OFFSETS_INTERVAL_FUNC", "LJavaUtilFunctionFunction;", .constantValue.asLong = 0, 0x19, -1, 29, 28, -1 },
    { "EXPR_TO_TOKEN_OFFSETS_INTERVAL_FUNC", "LJavaUtilFunctionFunction;", .constantValue.asLong = 0, 0x19, -1, 30, 31, -1 },
    { "EXPR_PRIORITY_COMPARATOR", "LJavaUtilComparator;", .constantValue.asLong = 0, 0x19, -1, 32, 33, -1 },
    { "EXPR_ORDER_COMPARATOR", "LJavaUtilComparator;", .constantValue.asLong = 0, 0x19, -1, 34, 33, -1 },
    { "EXPR_LENGTH_COMPARATOR", "LJavaUtilComparator;", .constantValue.asLong = 0, 0x19, -1, 35, 33, -1 },
    { "EXPR_TOKEN_OFFSET_COMPARATOR", "LJavaUtilComparator;", .constantValue.asLong = 0, 0x19, -1, 36, 33, -1 },
    { "EXPR_TOKEN_OFFSETS_NESTED_FIRST_COMPARATOR", "LJavaUtilComparator;", .constantValue.asLong = 0, 0x19, -1, 37, 33, -1 },
    { "EXPR_PRIORITY_LENGTH_COMPARATOR", "LJavaUtilComparator;", .constantValue.asLong = 0, 0x19, -1, 38, 33, -1 },
    { "EXPR_LENGTH_PRIORITY_COMPARATOR", "LJavaUtilComparator;", .constantValue.asLong = 0, 0x19, -1, 39, 33, -1 },
    { "EXPR_WEIGHT_SCORER", "LJavaUtilFunctionFunction;", .constantValue.asLong = 0, 0x19, -1, 40, 41, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpLingTokensregexMatchedExpression;", "LEduStanfordNlpUtilInterval;LEduStanfordNlpUtilInterval;LEduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor;DD", "(Ledu/stanford/nlp/util/Interval<Ljava/lang/Integer;>;Ledu/stanford/nlp/util/Interval<Ljava/lang/Integer;>;Ledu/stanford/nlp/ling/tokensregex/MatchedExpression$SingleAnnotationExtractor;DD)V", "extractAnnotation", "LEduStanfordNlpLingTokensregexEnv;LEduStanfordNlpUtilCoreMap;", "LEduStanfordNlpUtilCoreMap;LEduStanfordNlpPipelineCoreMapAggregator;", "LEduStanfordNlpLingTokensregexEnv;LJavaUtilList;", "(Ledu/stanford/nlp/ling/tokensregex/Env;Ljava/util/List<+Ledu/stanford/nlp/util/CoreMap;>;)Z", "LJavaUtilList;LEduStanfordNlpPipelineCoreMapAggregator;", "(Ljava/util/List<+Ledu/stanford/nlp/util/CoreMap;>;Ledu/stanford/nlp/pipeline/CoreMapAggregator;)Z", "()Ledu/stanford/nlp/util/Interval<Ljava/lang/Integer;>;", "setIncludeNested", "Z", "toString", "replaceMerged", "LJavaUtilList;LJavaUtilList;", "(Ljava/util/List<+Ledu/stanford/nlp/util/CoreMap;>;Ljava/util/List<+Ledu/stanford/nlp/ling/tokensregex/MatchedExpression;>;)Ljava/util/List<+Ledu/stanford/nlp/util/CoreMap;>;", "replaceMergedUsingTokenOffsets", "removeNullValues", "LJavaUtilList;", "<T:Ledu/stanford/nlp/ling/tokensregex/MatchedExpression;>(Ljava/util/List<TT;>;)Ljava/util/List<TT;>;", "removeNested", "removeOverlapping", "getBestMatched", "LJavaUtilList;LJavaUtilFunctionFunction;", "<T:Ledu/stanford/nlp/ling/tokensregex/MatchedExpression;>(Ljava/util/List<TT;>;Ljava/util/function/Function<Ledu/stanford/nlp/ling/tokensregex/MatchedExpression;Ljava/lang/Double;>;)TT;", "Ledu/stanford/nlp/util/Interval<Ljava/lang/Integer;>;", &EduStanfordNlpLingTokensregexMatchedExpression_COREMAP_TO_TOKEN_OFFSETS_INTERVAL_FUNC, "Ljava/util/function/Function<Ledu/stanford/nlp/util/CoreMap;Ledu/stanford/nlp/util/Interval<Ljava/lang/Integer;>;>;", &EduStanfordNlpLingTokensregexMatchedExpression_COREMAP_TO_CHAR_OFFSETS_INTERVAL_FUNC, &EduStanfordNlpLingTokensregexMatchedExpression_EXPR_TO_TOKEN_OFFSETS_INTERVAL_FUNC, "Ljava/util/function/Function<Ledu/stanford/nlp/ling/tokensregex/MatchedExpression;Ledu/stanford/nlp/util/Interval<Ljava/lang/Integer;>;>;", &EduStanfordNlpLingTokensregexMatchedExpression_EXPR_PRIORITY_COMPARATOR, "Ljava/util/Comparator<Ledu/stanford/nlp/ling/tokensregex/MatchedExpression;>;", &EduStanfordNlpLingTokensregexMatchedExpression_EXPR_ORDER_COMPARATOR, &EduStanfordNlpLingTokensregexMatchedExpression_EXPR_LENGTH_COMPARATOR, &EduStanfordNlpLingTokensregexMatchedExpression_EXPR_TOKEN_OFFSET_COMPARATOR, &EduStanfordNlpLingTokensregexMatchedExpression_EXPR_TOKEN_OFFSETS_NESTED_FIRST_COMPARATOR, &EduStanfordNlpLingTokensregexMatchedExpression_EXPR_PRIORITY_LENGTH_COMPARATOR, &EduStanfordNlpLingTokensregexMatchedExpression_EXPR_LENGTH_PRIORITY_COMPARATOR, &EduStanfordNlpLingTokensregexMatchedExpression_EXPR_WEIGHT_SCORER, "Ljava/util/function/Function<Ledu/stanford/nlp/ling/tokensregex/MatchedExpression;Ljava/lang/Double;>;", "LEduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexMatchedExpression = { "MatchedExpression", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, fields, 7, 0x1, 24, 22, -1, 42, -1, -1, -1 };
  return &_EduStanfordNlpLingTokensregexMatchedExpression;
}

+ (void)initialize {
  if (self == [EduStanfordNlpLingTokensregexMatchedExpression class]) {
    EduStanfordNlpLingTokensregexMatchedExpression_COREMAP_TO_TOKEN_OFFSETS_INTERVAL_FUNC = JreLoadStatic(EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$1, instance);
    EduStanfordNlpLingTokensregexMatchedExpression_COREMAP_TO_CHAR_OFFSETS_INTERVAL_FUNC = JreLoadStatic(EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$2, instance);
    EduStanfordNlpLingTokensregexMatchedExpression_EXPR_TO_TOKEN_OFFSETS_INTERVAL_FUNC = new_EduStanfordNlpLingTokensregexMatchedExpression_$1_init();
    EduStanfordNlpLingTokensregexMatchedExpression_EXPR_PRIORITY_COMPARATOR = JreLoadStatic(EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$3, instance);
    EduStanfordNlpLingTokensregexMatchedExpression_EXPR_ORDER_COMPARATOR = JreLoadStatic(EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$4, instance);
    EduStanfordNlpLingTokensregexMatchedExpression_EXPR_LENGTH_COMPARATOR = new_EduStanfordNlpLingTokensregexMatchedExpression_$2_init();
    EduStanfordNlpLingTokensregexMatchedExpression_EXPR_TOKEN_OFFSET_COMPARATOR = new_EduStanfordNlpLingTokensregexMatchedExpression_$3_init();
    EduStanfordNlpLingTokensregexMatchedExpression_EXPR_TOKEN_OFFSETS_NESTED_FIRST_COMPARATOR = new_EduStanfordNlpLingTokensregexMatchedExpression_$4_init();
    EduStanfordNlpLingTokensregexMatchedExpression_EXPR_PRIORITY_LENGTH_COMPARATOR = EduStanfordNlpUtilComparators_chainWithJavaUtilComparatorArray_([IOSObjectArray newArrayWithObjects:(id[]){ EduStanfordNlpLingTokensregexMatchedExpression_EXPR_PRIORITY_COMPARATOR, EduStanfordNlpLingTokensregexMatchedExpression_EXPR_LENGTH_COMPARATOR, EduStanfordNlpLingTokensregexMatchedExpression_EXPR_ORDER_COMPARATOR, EduStanfordNlpLingTokensregexMatchedExpression_EXPR_TOKEN_OFFSET_COMPARATOR } count:4 type:JavaUtilComparator_class_()]);
    EduStanfordNlpLingTokensregexMatchedExpression_EXPR_LENGTH_PRIORITY_COMPARATOR = EduStanfordNlpUtilComparators_chainWithJavaUtilComparatorArray_([IOSObjectArray newArrayWithObjects:(id[]){ EduStanfordNlpLingTokensregexMatchedExpression_EXPR_LENGTH_COMPARATOR, EduStanfordNlpLingTokensregexMatchedExpression_EXPR_PRIORITY_COMPARATOR, EduStanfordNlpLingTokensregexMatchedExpression_EXPR_ORDER_COMPARATOR, EduStanfordNlpLingTokensregexMatchedExpression_EXPR_TOKEN_OFFSET_COMPARATOR } count:4 type:JavaUtilComparator_class_()]);
    EduStanfordNlpLingTokensregexMatchedExpression_EXPR_WEIGHT_SCORER = new_EduStanfordNlpLingTokensregexMatchedExpression_$5_init();
    J2OBJC_SET_INITIALIZED(EduStanfordNlpLingTokensregexMatchedExpression)
  }
}

@end

void EduStanfordNlpLingTokensregexMatchedExpression_initWithEduStanfordNlpLingTokensregexMatchedExpression_(EduStanfordNlpLingTokensregexMatchedExpression *self, EduStanfordNlpLingTokensregexMatchedExpression *me) {
  NSObject_init(self);
  self->annotation_ = ((EduStanfordNlpLingTokensregexMatchedExpression *) nil_chk(me))->annotation_;
  self->extractFunc_ = me->extractFunc_;
  self->text_ = me->text_;
  self->value_ = me->value_;
  self->priority_ = me->priority_;
  self->weight_ = me->weight_;
  self->order_ = me->order_;
  self->charOffsets_ = me->charOffsets_;
  self->tokenOffsets_ = me->tokenOffsets_;
  self->chunkOffsets_ = me->tokenOffsets_;
}

EduStanfordNlpLingTokensregexMatchedExpression *new_EduStanfordNlpLingTokensregexMatchedExpression_initWithEduStanfordNlpLingTokensregexMatchedExpression_(EduStanfordNlpLingTokensregexMatchedExpression *me) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexMatchedExpression, initWithEduStanfordNlpLingTokensregexMatchedExpression_, me)
}

EduStanfordNlpLingTokensregexMatchedExpression *create_EduStanfordNlpLingTokensregexMatchedExpression_initWithEduStanfordNlpLingTokensregexMatchedExpression_(EduStanfordNlpLingTokensregexMatchedExpression *me) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexMatchedExpression, initWithEduStanfordNlpLingTokensregexMatchedExpression_, me)
}

void EduStanfordNlpLingTokensregexMatchedExpression_initWithEduStanfordNlpUtilInterval_withEduStanfordNlpUtilInterval_withEduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor_withDouble_withDouble_(EduStanfordNlpLingTokensregexMatchedExpression *self, EduStanfordNlpUtilInterval *charOffsets, EduStanfordNlpUtilInterval *tokenOffsets, EduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor *extractFunc, jdouble priority, jdouble weight) {
  NSObject_init(self);
  self->charOffsets_ = charOffsets;
  self->tokenOffsets_ = tokenOffsets;
  self->chunkOffsets_ = tokenOffsets;
  self->extractFunc_ = extractFunc;
  self->priority_ = priority;
  self->weight_ = weight;
}

EduStanfordNlpLingTokensregexMatchedExpression *new_EduStanfordNlpLingTokensregexMatchedExpression_initWithEduStanfordNlpUtilInterval_withEduStanfordNlpUtilInterval_withEduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor_withDouble_withDouble_(EduStanfordNlpUtilInterval *charOffsets, EduStanfordNlpUtilInterval *tokenOffsets, EduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor *extractFunc, jdouble priority, jdouble weight) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexMatchedExpression, initWithEduStanfordNlpUtilInterval_withEduStanfordNlpUtilInterval_withEduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor_withDouble_withDouble_, charOffsets, tokenOffsets, extractFunc, priority, weight)
}

EduStanfordNlpLingTokensregexMatchedExpression *create_EduStanfordNlpLingTokensregexMatchedExpression_initWithEduStanfordNlpUtilInterval_withEduStanfordNlpUtilInterval_withEduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor_withDouble_withDouble_(EduStanfordNlpUtilInterval *charOffsets, EduStanfordNlpUtilInterval *tokenOffsets, EduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor *extractFunc, jdouble priority, jdouble weight) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexMatchedExpression, initWithEduStanfordNlpUtilInterval_withEduStanfordNlpUtilInterval_withEduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor_withDouble_withDouble_, charOffsets, tokenOffsets, extractFunc, priority, weight)
}

jboolean EduStanfordNlpLingTokensregexMatchedExpression_extractAnnotationWithEduStanfordNlpUtilCoreMap_withEduStanfordNlpPipelineCoreMapAggregator_(EduStanfordNlpLingTokensregexMatchedExpression *self, id<EduStanfordNlpUtilCoreMap> sourceAnnotation, EduStanfordNlpPipelineCoreMapAggregator *aggregator) {
  IOSClass *tokensAnnotationKey = ((EduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor *) nil_chk(self->extractFunc_))->tokensAnnotationField_;
  if (self->chunkOffsets_ != nil) {
    self->annotation_ = [((EduStanfordNlpPipelineCoreMapAggregator *) nil_chk(aggregator)) mergeWithJavaUtilList:(id<JavaUtilList>) cast_check([((id<EduStanfordNlpUtilCoreMap>) nil_chk(sourceAnnotation)) getWithIOSClass:tokensAnnotationKey], JavaUtilList_class_()) withInt:[((JavaLangInteger *) nil_chk([((EduStanfordNlpUtilInterval *) nil_chk(self->chunkOffsets_)) getBegin])) intValue] withInt:[((JavaLangInteger *) nil_chk([((EduStanfordNlpUtilInterval *) nil_chk(self->chunkOffsets_)) getEnd])) intValue]];
    if ([sourceAnnotation containsKeyWithIOSClass:EduStanfordNlpLingCoreAnnotations_TextAnnotation_class_()]) {
      EduStanfordNlpPipelineChunkAnnotationUtils_annotateChunkTextWithEduStanfordNlpUtilCoreMap_withEduStanfordNlpUtilCoreMap_(self->annotation_, sourceAnnotation);
    }
    if (self->tokenOffsets_ != nil) {
      if ([((id<EduStanfordNlpUtilCoreMap>) nil_chk(self->annotation_)) getWithIOSClass:EduStanfordNlpLingCoreAnnotations_TokenBeginAnnotation_class_()] == nil) {
        (void) [((id<EduStanfordNlpUtilCoreMap>) nil_chk(self->annotation_)) setWithIOSClass:EduStanfordNlpLingCoreAnnotations_TokenBeginAnnotation_class_() withId:((JavaLangInteger *) [((EduStanfordNlpUtilInterval *) nil_chk(self->tokenOffsets_)) getBegin])];
      }
      if ([((id<EduStanfordNlpUtilCoreMap>) nil_chk(self->annotation_)) getWithIOSClass:EduStanfordNlpLingCoreAnnotations_TokenEndAnnotation_class_()] == nil) {
        (void) [((id<EduStanfordNlpUtilCoreMap>) nil_chk(self->annotation_)) setWithIOSClass:EduStanfordNlpLingCoreAnnotations_TokenEndAnnotation_class_() withId:((JavaLangInteger *) [((EduStanfordNlpUtilInterval *) nil_chk(self->tokenOffsets_)) getEnd])];
      }
    }
    self->charOffsets_ = EduStanfordNlpUtilInterval_toIntervalWithJavaLangComparable_withJavaLangComparable_([((id<EduStanfordNlpUtilCoreMap>) nil_chk(self->annotation_)) getWithIOSClass:EduStanfordNlpLingCoreAnnotations_CharacterOffsetBeginAnnotation_class_()], [((id<EduStanfordNlpUtilCoreMap>) nil_chk(self->annotation_)) getWithIOSClass:EduStanfordNlpLingCoreAnnotations_CharacterOffsetEndAnnotation_class_()]);
    self->tokenOffsets_ = EduStanfordNlpUtilInterval_toIntervalWithJavaLangComparable_withJavaLangComparable_withInt_([((id<EduStanfordNlpUtilCoreMap>) nil_chk(self->annotation_)) getWithIOSClass:EduStanfordNlpLingCoreAnnotations_TokenBeginAnnotation_class_()], [((id<EduStanfordNlpUtilCoreMap>) nil_chk(self->annotation_)) getWithIOSClass:EduStanfordNlpLingCoreAnnotations_TokenEndAnnotation_class_()], EduStanfordNlpUtilInterval_INTERVAL_OPEN_END);
  }
  else {
    JavaLangInteger *baseCharOffset = [((id<EduStanfordNlpUtilCoreMap>) nil_chk(sourceAnnotation)) getWithIOSClass:EduStanfordNlpLingCoreAnnotations_CharacterOffsetBeginAnnotation_class_()];
    if (baseCharOffset == nil) {
      baseCharOffset = JavaLangInteger_valueOfWithInt_(0);
    }
    self->chunkOffsets_ = EduStanfordNlpPipelineChunkAnnotationUtils_getChunkOffsetsUsingCharOffsetsWithJavaUtilList_withInt_withInt_((id<JavaUtilList>) cast_check([sourceAnnotation getWithIOSClass:tokensAnnotationKey], JavaUtilList_class_()), [((JavaLangInteger *) nil_chk([((EduStanfordNlpUtilInterval *) nil_chk(self->charOffsets_)) getBegin])) intValue] + [baseCharOffset intValue], [((JavaLangInteger *) nil_chk([((EduStanfordNlpUtilInterval *) nil_chk(self->charOffsets_)) getEnd])) intValue] + [baseCharOffset intValue]);
    id<EduStanfordNlpUtilCoreMap> annotation2 = [((EduStanfordNlpPipelineCoreMapAggregator *) nil_chk(aggregator)) mergeWithJavaUtilList:(id<JavaUtilList>) cast_check([sourceAnnotation getWithIOSClass:tokensAnnotationKey], JavaUtilList_class_()) withInt:[((JavaLangInteger *) nil_chk([((EduStanfordNlpUtilInterval *) nil_chk(self->chunkOffsets_)) getBegin])) intValue] withInt:[((JavaLangInteger *) nil_chk([((EduStanfordNlpUtilInterval *) nil_chk(self->chunkOffsets_)) getEnd])) intValue]];
    self->annotation_ = EduStanfordNlpPipelineChunkAnnotationUtils_getAnnotatedChunkUsingCharOffsetsWithEduStanfordNlpUtilCoreMap_withInt_withInt_(sourceAnnotation, [((JavaLangInteger *) nil_chk([((EduStanfordNlpUtilInterval *) nil_chk(self->charOffsets_)) getBegin])) intValue], [((JavaLangInteger *) nil_chk([((EduStanfordNlpUtilInterval *) nil_chk(self->charOffsets_)) getEnd])) intValue]);
    self->tokenOffsets_ = EduStanfordNlpUtilInterval_toIntervalWithJavaLangComparable_withJavaLangComparable_withInt_([((id<EduStanfordNlpUtilCoreMap>) nil_chk(self->annotation_)) getWithIOSClass:EduStanfordNlpLingCoreAnnotations_TokenBeginAnnotation_class_()], [((id<EduStanfordNlpUtilCoreMap>) nil_chk(self->annotation_)) getWithIOSClass:EduStanfordNlpLingCoreAnnotations_TokenEndAnnotation_class_()], EduStanfordNlpUtilInterval_INTERVAL_OPEN_END);
    (void) [((id<EduStanfordNlpUtilCoreMap>) nil_chk(self->annotation_)) setWithIOSClass:tokensAnnotationKey withId:[((id<EduStanfordNlpUtilCoreMap>) nil_chk(annotation2)) getWithIOSClass:tokensAnnotationKey]];
  }
  self->text_ = [((id<EduStanfordNlpUtilCoreMap>) nil_chk(self->annotation_)) getWithIOSClass:EduStanfordNlpLingCoreAnnotations_TextAnnotation_class_()];
  [((EduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor *) nil_chk(self->extractFunc_)) annotateWithEduStanfordNlpLingTokensregexMatchedExpression:self withJavaUtilList:(id<JavaUtilList>) cast_check([((id<EduStanfordNlpUtilCoreMap>) nil_chk(self->annotation_)) getWithIOSClass:tokensAnnotationKey], JavaUtilList_class_())];
  return true;
}

id<JavaUtilList> EduStanfordNlpLingTokensregexMatchedExpression_replaceMergedWithJavaUtilList_withJavaUtilList_(id<JavaUtilList> list, id<JavaUtilList> matchedExprs) {
  EduStanfordNlpLingTokensregexMatchedExpression_initialize();
  if (matchedExprs == nil) return list;
  JavaUtilCollections_sortWithJavaUtilList_withJavaUtilComparator_(matchedExprs, EduStanfordNlpLingTokensregexMatchedExpression_EXPR_TOKEN_OFFSET_COMPARATOR);
  id<JavaUtilList> merged = new_JavaUtilArrayList_initWithInt_([((id<JavaUtilList>) nil_chk(list)) size]);
  jint last = 0;
  for (EduStanfordNlpLingTokensregexMatchedExpression * __strong expr in matchedExprs) {
    jint start = [((JavaLangInteger *) nil_chk([((EduStanfordNlpUtilInterval *) nil_chk(((EduStanfordNlpLingTokensregexMatchedExpression *) nil_chk(expr))->chunkOffsets_)) first])) intValue];
    jint end = [((JavaLangInteger *) nil_chk([((EduStanfordNlpUtilInterval *) nil_chk(expr->chunkOffsets_)) second])) intValue];
    if (start >= last) {
      [merged addAllWithJavaUtilCollection:[list subListWithInt:last withInt:start]];
      id<EduStanfordNlpUtilCoreMap> m = [expr getAnnotation];
      [merged addWithId:m];
      last = end;
    }
  }
  if (last < [list size]) {
    [merged addAllWithJavaUtilCollection:[list subListWithInt:last withInt:[list size]]];
  }
  return merged;
}

id<JavaUtilList> EduStanfordNlpLingTokensregexMatchedExpression_replaceMergedUsingTokenOffsetsWithJavaUtilList_withJavaUtilList_(id<JavaUtilList> list, id<JavaUtilList> matchedExprs) {
  EduStanfordNlpLingTokensregexMatchedExpression_initialize();
  if (matchedExprs == nil) return list;
  id<JavaUtilMap> tokenBeginToListIndexMap = new_JavaUtilHashMap_init();
  id<JavaUtilMap> tokenEndToListIndexMap = new_JavaUtilHashMap_init();
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(list)) size]; i++) {
    id<EduStanfordNlpUtilCoreMap> cm = [list getWithInt:i];
    if ([((id<EduStanfordNlpUtilCoreMap>) nil_chk(cm)) hasWithIOSClass:EduStanfordNlpLingCoreAnnotations_TokenBeginAnnotation_class_()] && [cm hasWithIOSClass:EduStanfordNlpLingCoreAnnotations_TokenEndAnnotation_class_()]) {
      (void) [tokenBeginToListIndexMap putWithId:[cm getWithIOSClass:EduStanfordNlpLingCoreAnnotations_TokenBeginAnnotation_class_()] withId:JavaLangInteger_valueOfWithInt_(i)];
      (void) [tokenEndToListIndexMap putWithId:[cm getWithIOSClass:EduStanfordNlpLingCoreAnnotations_TokenEndAnnotation_class_()] withId:JavaLangInteger_valueOfWithInt_(i + 1)];
    }
    else {
      (void) [tokenBeginToListIndexMap putWithId:JavaLangInteger_valueOfWithInt_(i) withId:JavaLangInteger_valueOfWithInt_(i)];
      (void) [tokenEndToListIndexMap putWithId:JavaLangInteger_valueOfWithInt_(i + 1) withId:JavaLangInteger_valueOfWithInt_(i + 1)];
    }
  }
  JavaUtilCollections_sortWithJavaUtilList_withJavaUtilComparator_(matchedExprs, EduStanfordNlpLingTokensregexMatchedExpression_EXPR_TOKEN_OFFSET_COMPARATOR);
  id<JavaUtilList> merged = new_JavaUtilArrayList_initWithInt_([list size]);
  jint last = 0;
  for (EduStanfordNlpLingTokensregexMatchedExpression * __strong expr in matchedExprs) {
    jint start = [((JavaLangInteger *) nil_chk([((EduStanfordNlpUtilInterval *) nil_chk(((EduStanfordNlpLingTokensregexMatchedExpression *) nil_chk(expr))->tokenOffsets_)) first])) intValue];
    jint end = [((JavaLangInteger *) nil_chk([((EduStanfordNlpUtilInterval *) nil_chk(expr->tokenOffsets_)) second])) intValue];
    JavaLangInteger *istart = [tokenBeginToListIndexMap getWithId:JavaLangInteger_valueOfWithInt_(start)];
    JavaLangInteger *iend = [tokenEndToListIndexMap getWithId:JavaLangInteger_valueOfWithInt_(end)];
    if (istart != nil && iend != nil) {
      if ([istart intValue] >= last) {
        [merged addAllWithJavaUtilCollection:[list subListWithInt:last withInt:[istart intValue]]];
        id<EduStanfordNlpUtilCoreMap> m = [expr getAnnotation];
        [merged addWithId:m];
        last = [iend intValue];
      }
    }
  }
  if (last < [list size]) {
    [merged addAllWithJavaUtilCollection:[list subListWithInt:last withInt:[list size]]];
  }
  return merged;
}

id<JavaUtilList> EduStanfordNlpLingTokensregexMatchedExpression_removeNullValuesWithJavaUtilList_(id<JavaUtilList> chunks) {
  EduStanfordNlpLingTokensregexMatchedExpression_initialize();
  id<JavaUtilList> okayChunks = new_JavaUtilArrayList_initWithInt_([((id<JavaUtilList>) nil_chk(chunks)) size]);
  for (EduStanfordNlpLingTokensregexMatchedExpression * __strong chunk in chunks) {
    id<EduStanfordNlpLingTokensregexTypesValue> v = ((EduStanfordNlpLingTokensregexMatchedExpression *) nil_chk(chunk))->value_;
    if (v == nil || [v get] == nil) {
    }
    else {
      [okayChunks addWithId:chunk];
    }
  }
  return okayChunks;
}

id<JavaUtilList> EduStanfordNlpLingTokensregexMatchedExpression_removeNestedWithJavaUtilList_(id<JavaUtilList> chunks) {
  EduStanfordNlpLingTokensregexMatchedExpression_initialize();
  if ([((id<JavaUtilList>) nil_chk(chunks)) size] > 1) {
    for (jint i = 0; i < [chunks size]; i++) {
      ((EduStanfordNlpLingTokensregexMatchedExpression *) nil_chk([chunks getWithInt:i]))->order_ = i;
    }
    return EduStanfordNlpUtilIntervalTree_getNonNestedWithJavaUtilList_withJavaUtilFunctionFunction_withJavaUtilComparator_(chunks, EduStanfordNlpLingTokensregexMatchedExpression_EXPR_TO_TOKEN_OFFSETS_INTERVAL_FUNC, EduStanfordNlpLingTokensregexMatchedExpression_EXPR_LENGTH_PRIORITY_COMPARATOR);
  }
  else {
    return chunks;
  }
}

id<JavaUtilList> EduStanfordNlpLingTokensregexMatchedExpression_removeOverlappingWithJavaUtilList_(id<JavaUtilList> chunks) {
  EduStanfordNlpLingTokensregexMatchedExpression_initialize();
  if ([((id<JavaUtilList>) nil_chk(chunks)) size] > 1) {
    for (jint i = 0; i < [chunks size]; i++) {
      ((EduStanfordNlpLingTokensregexMatchedExpression *) nil_chk([chunks getWithInt:i]))->order_ = i;
    }
    return EduStanfordNlpUtilIntervalTree_getNonOverlappingWithJavaUtilList_withJavaUtilFunctionFunction_withJavaUtilComparator_(chunks, EduStanfordNlpLingTokensregexMatchedExpression_EXPR_TO_TOKEN_OFFSETS_INTERVAL_FUNC, EduStanfordNlpLingTokensregexMatchedExpression_EXPR_PRIORITY_LENGTH_COMPARATOR);
  }
  else {
    return chunks;
  }
}

EduStanfordNlpLingTokensregexMatchedExpression *EduStanfordNlpLingTokensregexMatchedExpression_getBestMatchedWithJavaUtilList_withJavaUtilFunctionFunction_(id<JavaUtilList> matches, id<JavaUtilFunctionFunction> scorer) {
  EduStanfordNlpLingTokensregexMatchedExpression_initialize();
  if (matches == nil || [matches isEmpty]) return nil;
  EduStanfordNlpLingTokensregexMatchedExpression *best = nil;
  jdouble bestScore = JavaLangDouble_NEGATIVE_INFINITY;
  for (EduStanfordNlpLingTokensregexMatchedExpression * __strong m in matches) {
    jdouble s = [((JavaLangDouble *) nil_chk([((id<JavaUtilFunctionFunction>) nil_chk(scorer)) applyWithId:m])) doubleValue];
    if (best == nil || s > bestScore) {
      best = m;
      bestScore = s;
    }
  }
  return best;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexMatchedExpression)

@implementation EduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor

- (id<EduStanfordNlpLingTokensregexTypesValue>)applyWithId:(id<EduStanfordNlpUtilCoreMap>)inArg {
  return [((id<JavaUtilFunctionFunction>) nil_chk(valueExtractor_)) applyWithId:inArg];
}

+ (void)setAnnotationsWithEduStanfordNlpUtilCoreMap:(id<EduStanfordNlpUtilCoreMap>)cm
                                   withJavaUtilList:(id<JavaUtilList>)annotationKeys
                                             withId:(id)obj {
  EduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor_setAnnotationsWithEduStanfordNlpUtilCoreMap_withJavaUtilList_withId_(cm, annotationKeys, obj);
}

- (void)annotateWithEduStanfordNlpLingTokensregexMatchedExpression:(EduStanfordNlpLingTokensregexMatchedExpression *)matchedExpression
                                                  withJavaUtilList:(id<JavaUtilList>)nested {
  if (resultNestedAnnotationField_ != nil) {
    (void) [((id<EduStanfordNlpUtilCoreMap>) nil_chk(((EduStanfordNlpLingTokensregexMatchedExpression *) nil_chk(matchedExpression))->annotation_)) setWithIOSClass:resultNestedAnnotationField_ withId:nested];
  }
  [self annotateWithEduStanfordNlpLingTokensregexMatchedExpression:matchedExpression];
}

- (void)annotateWithEduStanfordNlpLingTokensregexMatchedExpression:(EduStanfordNlpLingTokensregexMatchedExpression *)matchedExpression {
  id<EduStanfordNlpLingTokensregexTypesValue> ev = nil;
  if (expressionToValue_ != nil) {
    ev = [expressionToValue_ applyWithId:matchedExpression];
  }
  ((EduStanfordNlpLingTokensregexMatchedExpression *) nil_chk(matchedExpression))->value_ = (ev != nil) ? ev : [((id<JavaUtilFunctionFunction>) nil_chk(valueExtractor_)) applyWithId:matchedExpression->annotation_];
  if (resultAnnotationField_ != nil) {
    if (resultAnnotationExtractor_ != nil) {
      id result = [resultAnnotationExtractor_ applyWithId:matchedExpression];
      EduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor_setAnnotationsWithEduStanfordNlpUtilCoreMap_withJavaUtilList_withId_(matchedExpression->annotation_, resultAnnotationField_, result);
    }
    else {
      id<EduStanfordNlpLingTokensregexTypesValue> v = [matchedExpression getValue];
      EduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor_setAnnotationsWithEduStanfordNlpUtilCoreMap_withJavaUtilList_withId_(matchedExpression->annotation_, resultAnnotationField_, (v != nil) ? [((id<EduStanfordNlpLingTokensregexTypesValue>) nil_chk(v)) get] : nil);
    }
  }
  if (tokensResultAnnotationField_ != nil) {
    id<JavaUtilList> tokens = (id<JavaUtilList>) cast_check([((id<EduStanfordNlpUtilCoreMap>) nil_chk(matchedExpression->annotation_)) getWithIOSClass:tokensAnnotationField_], JavaUtilList_class_());
    if (resultAnnotationExtractor_ != nil) {
      id result = [resultAnnotationExtractor_ applyWithId:matchedExpression];
      for (id<EduStanfordNlpUtilCoreMap> __strong cm in nil_chk(tokens)) {
        EduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor_setAnnotationsWithEduStanfordNlpUtilCoreMap_withJavaUtilList_withId_(cm, tokensResultAnnotationField_, result);
      }
    }
    else {
      id<EduStanfordNlpLingTokensregexTypesValue> v = [matchedExpression getValue];
      for (id<EduStanfordNlpUtilCoreMap> __strong cm in nil_chk(tokens)) {
        EduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor_setAnnotationsWithEduStanfordNlpUtilCoreMap_withJavaUtilList_withId_(cm, tokensResultAnnotationField_, (v != nil) ? [((id<EduStanfordNlpLingTokensregexTypesValue>) nil_chk(v)) get] : nil);
      }
    }
  }
}

- (EduStanfordNlpLingTokensregexMatchedExpression *)createMatchedExpressionWithEduStanfordNlpUtilInterval:(EduStanfordNlpUtilInterval *)charOffsets
                                                                           withEduStanfordNlpUtilInterval:(EduStanfordNlpUtilInterval *)tokenOffsets {
  EduStanfordNlpLingTokensregexMatchedExpression *me = new_EduStanfordNlpLingTokensregexMatchedExpression_initWithEduStanfordNlpUtilInterval_withEduStanfordNlpUtilInterval_withEduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor_withDouble_withDouble_(charOffsets, tokenOffsets, self, priority_, weight_);
  return me;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilFunctionFunction>)andThenWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_andThenWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilFunctionFunction>)composeWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_composeWithJavaUtilFunctionFunction_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LEduStanfordNlpLingTokensregexTypesValue;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 2, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, 7, -1, -1 },
    { NULL, "V", 0x1, 5, 8, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexMatchedExpression;", 0x1, 9, 10, -1, 11, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(applyWithId:);
  methods[1].selector = @selector(setAnnotationsWithEduStanfordNlpUtilCoreMap:withJavaUtilList:withId:);
  methods[2].selector = @selector(annotateWithEduStanfordNlpLingTokensregexMatchedExpression:withJavaUtilList:);
  methods[3].selector = @selector(annotateWithEduStanfordNlpLingTokensregexMatchedExpression:);
  methods[4].selector = @selector(createMatchedExpressionWithEduStanfordNlpUtilInterval:withEduStanfordNlpUtilInterval:);
  methods[5].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "name_", "LNSString;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "priority_", "D", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "weight_", "D", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "tokensAnnotationField_", "LIOSClass;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "tokensResultAnnotationField_", "LJavaUtilList;", .constantValue.asLong = 0, 0x1, -1, -1, 12, -1 },
    { "resultAnnotationField_", "LJavaUtilList;", .constantValue.asLong = 0, 0x1, -1, -1, 12, -1 },
    { "resultNestedAnnotationField_", "LIOSClass;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "includeNested_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "valueExtractor_", "LJavaUtilFunctionFunction;", .constantValue.asLong = 0, 0x1, -1, -1, 13, -1 },
    { "expressionToValue_", "LJavaUtilFunctionFunction;", .constantValue.asLong = 0, 0x1, -1, -1, 14, -1 },
    { "resultAnnotationExtractor_", "LJavaUtilFunctionFunction;", .constantValue.asLong = 0, 0x1, -1, -1, 15, -1 },
    { "tokensAggregator_", "LEduStanfordNlpPipelineCoreMapAggregator;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "apply", "LEduStanfordNlpUtilCoreMap;", "setAnnotations", "LEduStanfordNlpUtilCoreMap;LJavaUtilList;LNSObject;", "(Ledu/stanford/nlp/util/CoreMap;Ljava/util/List<Ljava/lang/Class;>;Ljava/lang/Object;)V", "annotate", "LEduStanfordNlpLingTokensregexMatchedExpression;LJavaUtilList;", "(Ledu/stanford/nlp/ling/tokensregex/MatchedExpression;Ljava/util/List<+Ledu/stanford/nlp/util/CoreMap;>;)V", "LEduStanfordNlpLingTokensregexMatchedExpression;", "createMatchedExpression", "LEduStanfordNlpUtilInterval;LEduStanfordNlpUtilInterval;", "(Ledu/stanford/nlp/util/Interval<Ljava/lang/Integer;>;Ledu/stanford/nlp/util/Interval<Ljava/lang/Integer;>;)Ledu/stanford/nlp/ling/tokensregex/MatchedExpression;", "Ljava/util/List<Ljava/lang/Class;>;", "Ljava/util/function/Function<Ledu/stanford/nlp/util/CoreMap;Ledu/stanford/nlp/ling/tokensregex/types/Value;>;", "Ljava/util/function/Function<Ledu/stanford/nlp/ling/tokensregex/MatchedExpression;Ledu/stanford/nlp/ling/tokensregex/types/Value;>;", "Ljava/util/function/Function<Ledu/stanford/nlp/ling/tokensregex/MatchedExpression;*>;", "Ljava/lang/Object;Ljava/util/function/Function<Ledu/stanford/nlp/util/CoreMap;Ledu/stanford/nlp/ling/tokensregex/types/Value;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor = { "SingleAnnotationExtractor", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, fields, 7, 0x9, 6, 12, 8, -1, -1, 16, -1 };
  return &_EduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor;
}

@end

void EduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor_setAnnotationsWithEduStanfordNlpUtilCoreMap_withJavaUtilList_withId_(id<EduStanfordNlpUtilCoreMap> cm, id<JavaUtilList> annotationKeys, id obj) {
  EduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor_initialize();
  if ([((id<JavaUtilList>) nil_chk(annotationKeys)) size] > 1 && [JavaUtilList_class_() isInstance:obj]) {
    id<JavaUtilList> list = (id<JavaUtilList>) cast_check(obj, JavaUtilList_class_());
    jint n = JavaLangMath_minWithInt_withInt_([((id<JavaUtilList>) nil_chk(list)) size], [annotationKeys size]);
    for (jint i = 0; i < n; i++) {
      id v = [list getWithInt:i];
      IOSClass *key = [annotationKeys getWithInt:i];
      if (key == nil) {
        @throw new_JavaLangRuntimeException_initWithNSString_(@"Invalid null annotation key");
      }
      if ([EduStanfordNlpLingTokensregexTypesValue_class_() isInstance:v]) {
        (void) [((id<EduStanfordNlpUtilCoreMap>) nil_chk(cm)) setWithIOSClass:key withId:[((id<EduStanfordNlpLingTokensregexTypesValue>) nil_chk(((id<EduStanfordNlpLingTokensregexTypesValue>) cast_check(v, EduStanfordNlpLingTokensregexTypesValue_class_())))) get]];
      }
      else {
        (void) [((id<EduStanfordNlpUtilCoreMap>) nil_chk(cm)) setWithIOSClass:key withId:v];
      }
    }
  }
  else {
    for (IOSClass * __strong key in annotationKeys) {
      if (key == nil) {
        @throw new_JavaLangRuntimeException_initWithNSString_(@"Invalid null annotation key");
      }
      (void) [((id<EduStanfordNlpUtilCoreMap>) nil_chk(cm)) setWithIOSClass:key withId:obj];
    }
  }
}

void EduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor_init(EduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor *self) {
  NSObject_init(self);
  self->tokensAnnotationField_ = EduStanfordNlpLingCoreAnnotations_TokensAnnotation_class_();
  self->includeNested_ = false;
}

EduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor *new_EduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor, init)
}

EduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor *create_EduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexMatchedExpression_SingleAnnotationExtractor)

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$1)

@implementation EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$1

- (id)applyWithId:(id<EduStanfordNlpUtilCoreMap>)inArg {
  return EduStanfordNlpUtilInterval_toIntervalWithJavaLangComparable_withJavaLangComparable_([((id<EduStanfordNlpUtilCoreMap>) nil_chk(inArg)) getWithIOSClass:EduStanfordNlpLingCoreAnnotations_TokenBeginAnnotation_class_()], [inArg getWithIOSClass:EduStanfordNlpLingCoreAnnotations_TokenEndAnnotation_class_()]);
}

- (id<JavaUtilFunctionFunction>)andThenWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_andThenWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilFunctionFunction>)composeWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_composeWithJavaUtilFunctionFunction_(self, arg0);
}

+ (void)initialize {
  if (self == [EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$1 class]) {
    EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$1_instance = new_EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$1_init();
    J2OBJC_SET_INITIALIZED(EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$1)
  }
}

@end

void EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$1_init(EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$1 *self) {
  NSObject_init(self);
}

EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$1 *new_EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$1_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$1, init)
}

EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$1 *create_EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$1_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$1, init)
}

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$2)

@implementation EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$2

- (id)applyWithId:(id<EduStanfordNlpUtilCoreMap>)inArg {
  return EduStanfordNlpUtilInterval_toIntervalWithJavaLangComparable_withJavaLangComparable_([((id<EduStanfordNlpUtilCoreMap>) nil_chk(inArg)) getWithIOSClass:EduStanfordNlpLingCoreAnnotations_CharacterOffsetBeginAnnotation_class_()], [inArg getWithIOSClass:EduStanfordNlpLingCoreAnnotations_CharacterOffsetEndAnnotation_class_()]);
}

- (id<JavaUtilFunctionFunction>)andThenWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_andThenWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilFunctionFunction>)composeWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_composeWithJavaUtilFunctionFunction_(self, arg0);
}

+ (void)initialize {
  if (self == [EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$2 class]) {
    EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$2_instance = new_EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$2_init();
    J2OBJC_SET_INITIALIZED(EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$2)
  }
}

@end

void EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$2_init(EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$2 *self) {
  NSObject_init(self);
}

EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$2 *new_EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$2_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$2, init)
}

EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$2 *create_EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$2_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$2, init)
}

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$3)

@implementation EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$3

- (jint)compareWithId:(EduStanfordNlpLingTokensregexMatchedExpression *)e1
               withId:(EduStanfordNlpLingTokensregexMatchedExpression *)e2 {
  jdouble s1 = [((EduStanfordNlpLingTokensregexMatchedExpression *) nil_chk(e1)) getPriority];
  jdouble s2 = [((EduStanfordNlpLingTokensregexMatchedExpression *) nil_chk(e2)) getPriority];
  if (s1 == s2) {
    return 0;
  }
  else {
    return (s1 > s2) ? -1 : 1;
  }
}

- (id<JavaUtilComparator>)reversed {
  return JavaUtilComparator_reversed(self);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilComparator:(id<JavaUtilComparator>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilComparator_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0
                                             withJavaUtilComparator:(id<JavaUtilComparator>)arg1 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_withJavaUtilComparator_(self, arg0, arg1);
}

- (id<JavaUtilComparator>)thenComparingDoubleWithJavaUtilFunctionToDoubleFunction:(id<JavaUtilFunctionToDoubleFunction>)arg0 {
  return JavaUtilComparator_thenComparingDoubleWithJavaUtilFunctionToDoubleFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingIntWithJavaUtilFunctionToIntFunction:(id<JavaUtilFunctionToIntFunction>)arg0 {
  return JavaUtilComparator_thenComparingIntWithJavaUtilFunctionToIntFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingLongWithJavaUtilFunctionToLongFunction:(id<JavaUtilFunctionToLongFunction>)arg0 {
  return JavaUtilComparator_thenComparingLongWithJavaUtilFunctionToLongFunction_(self, arg0);
}

+ (void)initialize {
  if (self == [EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$3 class]) {
    EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$3_instance = new_EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$3_init();
    J2OBJC_SET_INITIALIZED(EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$3)
  }
}

@end

void EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$3_init(EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$3 *self) {
  NSObject_init(self);
}

EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$3 *new_EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$3_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$3, init)
}

EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$3 *create_EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$3_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$3, init)
}

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$4)

@implementation EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$4

- (jint)compareWithId:(EduStanfordNlpLingTokensregexMatchedExpression *)e1
               withId:(EduStanfordNlpLingTokensregexMatchedExpression *)e2 {
  jint s1 = [((EduStanfordNlpLingTokensregexMatchedExpression *) nil_chk(e1)) getOrder];
  jint s2 = [((EduStanfordNlpLingTokensregexMatchedExpression *) nil_chk(e2)) getOrder];
  if (s1 == s2) {
    return 0;
  }
  else {
    return (s1 < s2) ? -1 : 1;
  }
}

- (id<JavaUtilComparator>)reversed {
  return JavaUtilComparator_reversed(self);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilComparator:(id<JavaUtilComparator>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilComparator_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0
                                             withJavaUtilComparator:(id<JavaUtilComparator>)arg1 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_withJavaUtilComparator_(self, arg0, arg1);
}

- (id<JavaUtilComparator>)thenComparingDoubleWithJavaUtilFunctionToDoubleFunction:(id<JavaUtilFunctionToDoubleFunction>)arg0 {
  return JavaUtilComparator_thenComparingDoubleWithJavaUtilFunctionToDoubleFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingIntWithJavaUtilFunctionToIntFunction:(id<JavaUtilFunctionToIntFunction>)arg0 {
  return JavaUtilComparator_thenComparingIntWithJavaUtilFunctionToIntFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingLongWithJavaUtilFunctionToLongFunction:(id<JavaUtilFunctionToLongFunction>)arg0 {
  return JavaUtilComparator_thenComparingLongWithJavaUtilFunctionToLongFunction_(self, arg0);
}

+ (void)initialize {
  if (self == [EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$4 class]) {
    EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$4_instance = new_EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$4_init();
    J2OBJC_SET_INITIALIZED(EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$4)
  }
}

@end

void EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$4_init(EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$4 *self) {
  NSObject_init(self);
}

EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$4 *new_EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$4_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$4, init)
}

EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$4 *create_EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$4_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexMatchedExpression_$Lambda$4, init)
}

@implementation EduStanfordNlpLingTokensregexMatchedExpression_$1

- (EduStanfordNlpUtilInterval *)applyWithId:(EduStanfordNlpLingTokensregexMatchedExpression *)inArg {
  return ((EduStanfordNlpLingTokensregexMatchedExpression *) nil_chk(inArg))->tokenOffsets_;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpLingTokensregexMatchedExpression_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilFunctionFunction>)andThenWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_andThenWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilFunctionFunction>)composeWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_composeWithJavaUtilFunctionFunction_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LEduStanfordNlpUtilInterval;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(applyWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "apply", "LEduStanfordNlpLingTokensregexMatchedExpression;", "(Ledu/stanford/nlp/ling/tokensregex/MatchedExpression;)Ledu/stanford/nlp/util/Interval<Ljava/lang/Integer;>;", "Ljava/lang/Object;Ljava/util/function/Function<Ledu/stanford/nlp/ling/tokensregex/MatchedExpression;Ledu/stanford/nlp/util/Interval<Ljava/lang/Integer;>;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexMatchedExpression_$1 = { "", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 1, -1, -1, 3, -1 };
  return &_EduStanfordNlpLingTokensregexMatchedExpression_$1;
}

@end

void EduStanfordNlpLingTokensregexMatchedExpression_$1_init(EduStanfordNlpLingTokensregexMatchedExpression_$1 *self) {
  NSObject_init(self);
}

EduStanfordNlpLingTokensregexMatchedExpression_$1 *new_EduStanfordNlpLingTokensregexMatchedExpression_$1_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexMatchedExpression_$1, init)
}

EduStanfordNlpLingTokensregexMatchedExpression_$1 *create_EduStanfordNlpLingTokensregexMatchedExpression_$1_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexMatchedExpression_$1, init)
}

@implementation EduStanfordNlpLingTokensregexMatchedExpression_$2

- (jint)compareWithId:(EduStanfordNlpLingTokensregexMatchedExpression *)e1
               withId:(EduStanfordNlpLingTokensregexMatchedExpression *)e2 {
  if ([((EduStanfordNlpLingTokensregexMatchedExpression *) nil_chk(e1)) getValue] == nil && [((EduStanfordNlpLingTokensregexMatchedExpression *) nil_chk(e2)) getValue] != nil) {
    return 1;
  }
  if ([e1 getValue] != nil && [((EduStanfordNlpLingTokensregexMatchedExpression *) nil_chk(e2)) getValue] == nil) {
    return -1;
  }
  jint len1 = [((JavaLangInteger *) nil_chk([((EduStanfordNlpUtilInterval *) nil_chk(e1->tokenOffsets_)) getEnd])) intValue] - [((JavaLangInteger *) nil_chk([((EduStanfordNlpUtilInterval *) nil_chk(e1->tokenOffsets_)) getBegin])) intValue];
  jint len2 = [((JavaLangInteger *) nil_chk([((EduStanfordNlpUtilInterval *) nil_chk(((EduStanfordNlpLingTokensregexMatchedExpression *) nil_chk(e2))->tokenOffsets_)) getEnd])) intValue] - [((JavaLangInteger *) nil_chk([((EduStanfordNlpUtilInterval *) nil_chk(e2->tokenOffsets_)) getBegin])) intValue];
  if (len1 == len2) {
    return 0;
  }
  else {
    return (len1 > len2) ? -1 : 1;
  }
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpLingTokensregexMatchedExpression_$2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilComparator>)reversed {
  return JavaUtilComparator_reversed(self);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilComparator:(id<JavaUtilComparator>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilComparator_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0
                                             withJavaUtilComparator:(id<JavaUtilComparator>)arg1 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_withJavaUtilComparator_(self, arg0, arg1);
}

- (id<JavaUtilComparator>)thenComparingDoubleWithJavaUtilFunctionToDoubleFunction:(id<JavaUtilFunctionToDoubleFunction>)arg0 {
  return JavaUtilComparator_thenComparingDoubleWithJavaUtilFunctionToDoubleFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingIntWithJavaUtilFunctionToIntFunction:(id<JavaUtilFunctionToIntFunction>)arg0 {
  return JavaUtilComparator_thenComparingIntWithJavaUtilFunctionToIntFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingLongWithJavaUtilFunctionToLongFunction:(id<JavaUtilFunctionToLongFunction>)arg0 {
  return JavaUtilComparator_thenComparingLongWithJavaUtilFunctionToLongFunction_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "I", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(compareWithId:withId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "compare", "LEduStanfordNlpLingTokensregexMatchedExpression;LEduStanfordNlpLingTokensregexMatchedExpression;", "LEduStanfordNlpLingTokensregexMatchedExpression;", "Ljava/lang/Object;Ljava/util/Comparator<Ledu/stanford/nlp/ling/tokensregex/MatchedExpression;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexMatchedExpression_$2 = { "", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, -1, 3, -1 };
  return &_EduStanfordNlpLingTokensregexMatchedExpression_$2;
}

@end

void EduStanfordNlpLingTokensregexMatchedExpression_$2_init(EduStanfordNlpLingTokensregexMatchedExpression_$2 *self) {
  NSObject_init(self);
}

EduStanfordNlpLingTokensregexMatchedExpression_$2 *new_EduStanfordNlpLingTokensregexMatchedExpression_$2_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexMatchedExpression_$2, init)
}

EduStanfordNlpLingTokensregexMatchedExpression_$2 *create_EduStanfordNlpLingTokensregexMatchedExpression_$2_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexMatchedExpression_$2, init)
}

@implementation EduStanfordNlpLingTokensregexMatchedExpression_$3

- (jint)compareWithId:(EduStanfordNlpLingTokensregexMatchedExpression *)e1
               withId:(EduStanfordNlpLingTokensregexMatchedExpression *)e2 {
  return ([((EduStanfordNlpUtilInterval *) nil_chk(((EduStanfordNlpLingTokensregexMatchedExpression *) nil_chk(e1))->tokenOffsets_)) compareToWithId:((EduStanfordNlpLingTokensregexMatchedExpression *) nil_chk(e2))->tokenOffsets_]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpLingTokensregexMatchedExpression_$3_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilComparator>)reversed {
  return JavaUtilComparator_reversed(self);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilComparator:(id<JavaUtilComparator>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilComparator_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0
                                             withJavaUtilComparator:(id<JavaUtilComparator>)arg1 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_withJavaUtilComparator_(self, arg0, arg1);
}

- (id<JavaUtilComparator>)thenComparingDoubleWithJavaUtilFunctionToDoubleFunction:(id<JavaUtilFunctionToDoubleFunction>)arg0 {
  return JavaUtilComparator_thenComparingDoubleWithJavaUtilFunctionToDoubleFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingIntWithJavaUtilFunctionToIntFunction:(id<JavaUtilFunctionToIntFunction>)arg0 {
  return JavaUtilComparator_thenComparingIntWithJavaUtilFunctionToIntFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingLongWithJavaUtilFunctionToLongFunction:(id<JavaUtilFunctionToLongFunction>)arg0 {
  return JavaUtilComparator_thenComparingLongWithJavaUtilFunctionToLongFunction_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "I", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(compareWithId:withId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "compare", "LEduStanfordNlpLingTokensregexMatchedExpression;LEduStanfordNlpLingTokensregexMatchedExpression;", "LEduStanfordNlpLingTokensregexMatchedExpression;", "Ljava/lang/Object;Ljava/util/Comparator<Ledu/stanford/nlp/ling/tokensregex/MatchedExpression;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexMatchedExpression_$3 = { "", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, -1, 3, -1 };
  return &_EduStanfordNlpLingTokensregexMatchedExpression_$3;
}

@end

void EduStanfordNlpLingTokensregexMatchedExpression_$3_init(EduStanfordNlpLingTokensregexMatchedExpression_$3 *self) {
  NSObject_init(self);
}

EduStanfordNlpLingTokensregexMatchedExpression_$3 *new_EduStanfordNlpLingTokensregexMatchedExpression_$3_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexMatchedExpression_$3, init)
}

EduStanfordNlpLingTokensregexMatchedExpression_$3 *create_EduStanfordNlpLingTokensregexMatchedExpression_$3_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexMatchedExpression_$3, init)
}

@implementation EduStanfordNlpLingTokensregexMatchedExpression_$4

- (jint)compareWithId:(EduStanfordNlpLingTokensregexMatchedExpression *)e1
               withId:(EduStanfordNlpLingTokensregexMatchedExpression *)e2 {
  EduStanfordNlpUtilInterval_RelType *rel = [((EduStanfordNlpUtilInterval *) nil_chk(((EduStanfordNlpLingTokensregexMatchedExpression *) nil_chk(e1))->tokenOffsets_)) getRelationWithEduStanfordNlpUtilInterval:((EduStanfordNlpLingTokensregexMatchedExpression *) nil_chk(e2))->tokenOffsets_];
  if ([((EduStanfordNlpUtilInterval_RelType *) nil_chk(rel)) isEqual:JreLoadEnum(EduStanfordNlpUtilInterval_RelType, CONTAIN)]) {
    return 1;
  }
  else if ([rel isEqual:JreLoadEnum(EduStanfordNlpUtilInterval_RelType, INSIDE)]) {
    return -1;
  }
  else {
    return ([((EduStanfordNlpUtilInterval *) nil_chk(e1->tokenOffsets_)) compareToWithId:e2->tokenOffsets_]);
  }
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpLingTokensregexMatchedExpression_$4_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilComparator>)reversed {
  return JavaUtilComparator_reversed(self);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilComparator:(id<JavaUtilComparator>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilComparator_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0
                                             withJavaUtilComparator:(id<JavaUtilComparator>)arg1 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_withJavaUtilComparator_(self, arg0, arg1);
}

- (id<JavaUtilComparator>)thenComparingDoubleWithJavaUtilFunctionToDoubleFunction:(id<JavaUtilFunctionToDoubleFunction>)arg0 {
  return JavaUtilComparator_thenComparingDoubleWithJavaUtilFunctionToDoubleFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingIntWithJavaUtilFunctionToIntFunction:(id<JavaUtilFunctionToIntFunction>)arg0 {
  return JavaUtilComparator_thenComparingIntWithJavaUtilFunctionToIntFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingLongWithJavaUtilFunctionToLongFunction:(id<JavaUtilFunctionToLongFunction>)arg0 {
  return JavaUtilComparator_thenComparingLongWithJavaUtilFunctionToLongFunction_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "I", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(compareWithId:withId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "compare", "LEduStanfordNlpLingTokensregexMatchedExpression;LEduStanfordNlpLingTokensregexMatchedExpression;", "LEduStanfordNlpLingTokensregexMatchedExpression;", "Ljava/lang/Object;Ljava/util/Comparator<Ledu/stanford/nlp/ling/tokensregex/MatchedExpression;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexMatchedExpression_$4 = { "", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 2, -1, -1, 3, -1 };
  return &_EduStanfordNlpLingTokensregexMatchedExpression_$4;
}

@end

void EduStanfordNlpLingTokensregexMatchedExpression_$4_init(EduStanfordNlpLingTokensregexMatchedExpression_$4 *self) {
  NSObject_init(self);
}

EduStanfordNlpLingTokensregexMatchedExpression_$4 *new_EduStanfordNlpLingTokensregexMatchedExpression_$4_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexMatchedExpression_$4, init)
}

EduStanfordNlpLingTokensregexMatchedExpression_$4 *create_EduStanfordNlpLingTokensregexMatchedExpression_$4_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexMatchedExpression_$4, init)
}

@implementation EduStanfordNlpLingTokensregexMatchedExpression_$5

- (JavaLangDouble *)applyWithId:(EduStanfordNlpLingTokensregexMatchedExpression *)inArg {
  return JavaLangDouble_valueOfWithDouble_(((EduStanfordNlpLingTokensregexMatchedExpression *) nil_chk(inArg))->weight_);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpLingTokensregexMatchedExpression_$5_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilFunctionFunction>)andThenWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_andThenWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilFunctionFunction>)composeWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_composeWithJavaUtilFunctionFunction_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangDouble;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(applyWithId:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "apply", "LEduStanfordNlpLingTokensregexMatchedExpression;", "Ljava/lang/Object;Ljava/util/function/Function<Ledu/stanford/nlp/ling/tokensregex/MatchedExpression;Ljava/lang/Double;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexMatchedExpression_$5 = { "", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, NULL, 7, 0x8008, 2, 0, 1, -1, -1, 2, -1 };
  return &_EduStanfordNlpLingTokensregexMatchedExpression_$5;
}

@end

void EduStanfordNlpLingTokensregexMatchedExpression_$5_init(EduStanfordNlpLingTokensregexMatchedExpression_$5 *self) {
  NSObject_init(self);
}

EduStanfordNlpLingTokensregexMatchedExpression_$5 *new_EduStanfordNlpLingTokensregexMatchedExpression_$5_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexMatchedExpression_$5, init)
}

EduStanfordNlpLingTokensregexMatchedExpression_$5 *create_EduStanfordNlpLingTokensregexMatchedExpression_$5_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexMatchedExpression_$5, init)
}
