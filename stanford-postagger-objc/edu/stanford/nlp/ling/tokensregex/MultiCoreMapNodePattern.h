//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/ling/tokensregex/MultiCoreMapNodePattern.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_EduStanfordNlpLingTokensregexMultiCoreMapNodePattern")
#ifdef RESTRICT_EduStanfordNlpLingTokensregexMultiCoreMapNodePattern
#define INCLUDE_ALL_EduStanfordNlpLingTokensregexMultiCoreMapNodePattern 0
#else
#define INCLUDE_ALL_EduStanfordNlpLingTokensregexMultiCoreMapNodePattern 1
#endif
#undef RESTRICT_EduStanfordNlpLingTokensregexMultiCoreMapNodePattern

#if !defined (EduStanfordNlpLingTokensregexMultiCoreMapNodePattern_) && (INCLUDE_ALL_EduStanfordNlpLingTokensregexMultiCoreMapNodePattern || defined(INCLUDE_EduStanfordNlpLingTokensregexMultiCoreMapNodePattern))
#define EduStanfordNlpLingTokensregexMultiCoreMapNodePattern_

#define RESTRICT_EduStanfordNlpLingTokensregexMultiNodePattern 1
#define INCLUDE_EduStanfordNlpLingTokensregexMultiNodePattern 1
#include "edu/stanford/nlp/ling/tokensregex/MultiNodePattern.h"

@class EduStanfordNlpLingTokensregexNodePattern;
@protocol JavaUtilCollection;
@protocol JavaUtilList;
@protocol JavaUtilMap;

@interface EduStanfordNlpLingTokensregexMultiCoreMapNodePattern : EduStanfordNlpLingTokensregexMultiNodePattern {
 @public
  id<JavaUtilMap> aggregators_;
  EduStanfordNlpLingTokensregexNodePattern *nodePattern_;
}

#pragma mark Public

- (instancetype)init;

- (instancetype)initWithEduStanfordNlpLingTokensregexNodePattern:(EduStanfordNlpLingTokensregexNodePattern *)nodePattern;

- (instancetype)initWithEduStanfordNlpLingTokensregexNodePattern:(EduStanfordNlpLingTokensregexNodePattern *)nodePattern
                                                 withJavaUtilMap:(id<JavaUtilMap>)aggregators;

#pragma mark Protected

- (id<JavaUtilCollection>)matchWithJavaUtilList:(id<JavaUtilList>)nodes
                                        withInt:(jint)start;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpLingTokensregexMultiCoreMapNodePattern)

J2OBJC_FIELD_SETTER(EduStanfordNlpLingTokensregexMultiCoreMapNodePattern, aggregators_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(EduStanfordNlpLingTokensregexMultiCoreMapNodePattern, nodePattern_, EduStanfordNlpLingTokensregexNodePattern *)

FOUNDATION_EXPORT void EduStanfordNlpLingTokensregexMultiCoreMapNodePattern_init(EduStanfordNlpLingTokensregexMultiCoreMapNodePattern *self);

FOUNDATION_EXPORT EduStanfordNlpLingTokensregexMultiCoreMapNodePattern *new_EduStanfordNlpLingTokensregexMultiCoreMapNodePattern_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EduStanfordNlpLingTokensregexMultiCoreMapNodePattern *create_EduStanfordNlpLingTokensregexMultiCoreMapNodePattern_init();

FOUNDATION_EXPORT void EduStanfordNlpLingTokensregexMultiCoreMapNodePattern_initWithEduStanfordNlpLingTokensregexNodePattern_(EduStanfordNlpLingTokensregexMultiCoreMapNodePattern *self, EduStanfordNlpLingTokensregexNodePattern *nodePattern);

FOUNDATION_EXPORT EduStanfordNlpLingTokensregexMultiCoreMapNodePattern *new_EduStanfordNlpLingTokensregexMultiCoreMapNodePattern_initWithEduStanfordNlpLingTokensregexNodePattern_(EduStanfordNlpLingTokensregexNodePattern *nodePattern) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EduStanfordNlpLingTokensregexMultiCoreMapNodePattern *create_EduStanfordNlpLingTokensregexMultiCoreMapNodePattern_initWithEduStanfordNlpLingTokensregexNodePattern_(EduStanfordNlpLingTokensregexNodePattern *nodePattern);

FOUNDATION_EXPORT void EduStanfordNlpLingTokensregexMultiCoreMapNodePattern_initWithEduStanfordNlpLingTokensregexNodePattern_withJavaUtilMap_(EduStanfordNlpLingTokensregexMultiCoreMapNodePattern *self, EduStanfordNlpLingTokensregexNodePattern *nodePattern, id<JavaUtilMap> aggregators);

FOUNDATION_EXPORT EduStanfordNlpLingTokensregexMultiCoreMapNodePattern *new_EduStanfordNlpLingTokensregexMultiCoreMapNodePattern_initWithEduStanfordNlpLingTokensregexNodePattern_withJavaUtilMap_(EduStanfordNlpLingTokensregexNodePattern *nodePattern, id<JavaUtilMap> aggregators) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EduStanfordNlpLingTokensregexMultiCoreMapNodePattern *create_EduStanfordNlpLingTokensregexMultiCoreMapNodePattern_initWithEduStanfordNlpLingTokensregexNodePattern_withJavaUtilMap_(EduStanfordNlpLingTokensregexNodePattern *nodePattern, id<JavaUtilMap> aggregators);

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpLingTokensregexMultiCoreMapNodePattern)

#endif

#if !defined (EduStanfordNlpLingTokensregexMultiCoreMapNodePattern_StringSequenceAnnotationPattern_) && (INCLUDE_ALL_EduStanfordNlpLingTokensregexMultiCoreMapNodePattern || defined(INCLUDE_EduStanfordNlpLingTokensregexMultiCoreMapNodePattern_StringSequenceAnnotationPattern))
#define EduStanfordNlpLingTokensregexMultiCoreMapNodePattern_StringSequenceAnnotationPattern_

#define RESTRICT_EduStanfordNlpLingTokensregexMultiNodePattern 1
#define INCLUDE_EduStanfordNlpLingTokensregexMultiNodePattern 1
#include "edu/stanford/nlp/ling/tokensregex/MultiNodePattern.h"

@class EduStanfordNlpLingTokensregexPhraseTable;
@class IOSClass;
@protocol JavaUtilCollection;
@protocol JavaUtilList;
@protocol JavaUtilMap;
@protocol JavaUtilSet;

@interface EduStanfordNlpLingTokensregexMultiCoreMapNodePattern_StringSequenceAnnotationPattern : EduStanfordNlpLingTokensregexMultiNodePattern {
 @public
  IOSClass *textKey_;
  EduStanfordNlpLingTokensregexPhraseTable *phraseTable_;
}

#pragma mark Public

- (instancetype)initWithIOSClass:(IOSClass *)textKey
                 withJavaUtilMap:(id<JavaUtilMap>)targets;

- (instancetype)initWithIOSClass:(IOSClass *)textKey
                 withJavaUtilMap:(id<JavaUtilMap>)targets
                     withBoolean:(jboolean)ignoreCase;

- (instancetype)initWithIOSClass:(IOSClass *)textKey
                 withJavaUtilSet:(id<JavaUtilSet>)targets;

- (instancetype)initWithIOSClass:(IOSClass *)textKey
                 withJavaUtilSet:(id<JavaUtilSet>)targets
                     withBoolean:(jboolean)ignoreCase;

- (NSString *)description;

#pragma mark Protected

- (id<JavaUtilCollection>)matchWithJavaUtilList:(id<JavaUtilList>)nodes
                                        withInt:(jint)start;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpLingTokensregexMultiCoreMapNodePattern_StringSequenceAnnotationPattern)

J2OBJC_FIELD_SETTER(EduStanfordNlpLingTokensregexMultiCoreMapNodePattern_StringSequenceAnnotationPattern, textKey_, IOSClass *)
J2OBJC_FIELD_SETTER(EduStanfordNlpLingTokensregexMultiCoreMapNodePattern_StringSequenceAnnotationPattern, phraseTable_, EduStanfordNlpLingTokensregexPhraseTable *)

FOUNDATION_EXPORT void EduStanfordNlpLingTokensregexMultiCoreMapNodePattern_StringSequenceAnnotationPattern_initWithIOSClass_withJavaUtilSet_withBoolean_(EduStanfordNlpLingTokensregexMultiCoreMapNodePattern_StringSequenceAnnotationPattern *self, IOSClass *textKey, id<JavaUtilSet> targets, jboolean ignoreCase);

FOUNDATION_EXPORT EduStanfordNlpLingTokensregexMultiCoreMapNodePattern_StringSequenceAnnotationPattern *new_EduStanfordNlpLingTokensregexMultiCoreMapNodePattern_StringSequenceAnnotationPattern_initWithIOSClass_withJavaUtilSet_withBoolean_(IOSClass *textKey, id<JavaUtilSet> targets, jboolean ignoreCase) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EduStanfordNlpLingTokensregexMultiCoreMapNodePattern_StringSequenceAnnotationPattern *create_EduStanfordNlpLingTokensregexMultiCoreMapNodePattern_StringSequenceAnnotationPattern_initWithIOSClass_withJavaUtilSet_withBoolean_(IOSClass *textKey, id<JavaUtilSet> targets, jboolean ignoreCase);

FOUNDATION_EXPORT void EduStanfordNlpLingTokensregexMultiCoreMapNodePattern_StringSequenceAnnotationPattern_initWithIOSClass_withJavaUtilSet_(EduStanfordNlpLingTokensregexMultiCoreMapNodePattern_StringSequenceAnnotationPattern *self, IOSClass *textKey, id<JavaUtilSet> targets);

FOUNDATION_EXPORT EduStanfordNlpLingTokensregexMultiCoreMapNodePattern_StringSequenceAnnotationPattern *new_EduStanfordNlpLingTokensregexMultiCoreMapNodePattern_StringSequenceAnnotationPattern_initWithIOSClass_withJavaUtilSet_(IOSClass *textKey, id<JavaUtilSet> targets) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EduStanfordNlpLingTokensregexMultiCoreMapNodePattern_StringSequenceAnnotationPattern *create_EduStanfordNlpLingTokensregexMultiCoreMapNodePattern_StringSequenceAnnotationPattern_initWithIOSClass_withJavaUtilSet_(IOSClass *textKey, id<JavaUtilSet> targets);

FOUNDATION_EXPORT void EduStanfordNlpLingTokensregexMultiCoreMapNodePattern_StringSequenceAnnotationPattern_initWithIOSClass_withJavaUtilMap_withBoolean_(EduStanfordNlpLingTokensregexMultiCoreMapNodePattern_StringSequenceAnnotationPattern *self, IOSClass *textKey, id<JavaUtilMap> targets, jboolean ignoreCase);

FOUNDATION_EXPORT EduStanfordNlpLingTokensregexMultiCoreMapNodePattern_StringSequenceAnnotationPattern *new_EduStanfordNlpLingTokensregexMultiCoreMapNodePattern_StringSequenceAnnotationPattern_initWithIOSClass_withJavaUtilMap_withBoolean_(IOSClass *textKey, id<JavaUtilMap> targets, jboolean ignoreCase) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EduStanfordNlpLingTokensregexMultiCoreMapNodePattern_StringSequenceAnnotationPattern *create_EduStanfordNlpLingTokensregexMultiCoreMapNodePattern_StringSequenceAnnotationPattern_initWithIOSClass_withJavaUtilMap_withBoolean_(IOSClass *textKey, id<JavaUtilMap> targets, jboolean ignoreCase);

FOUNDATION_EXPORT void EduStanfordNlpLingTokensregexMultiCoreMapNodePattern_StringSequenceAnnotationPattern_initWithIOSClass_withJavaUtilMap_(EduStanfordNlpLingTokensregexMultiCoreMapNodePattern_StringSequenceAnnotationPattern *self, IOSClass *textKey, id<JavaUtilMap> targets);

FOUNDATION_EXPORT EduStanfordNlpLingTokensregexMultiCoreMapNodePattern_StringSequenceAnnotationPattern *new_EduStanfordNlpLingTokensregexMultiCoreMapNodePattern_StringSequenceAnnotationPattern_initWithIOSClass_withJavaUtilMap_(IOSClass *textKey, id<JavaUtilMap> targets) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EduStanfordNlpLingTokensregexMultiCoreMapNodePattern_StringSequenceAnnotationPattern *create_EduStanfordNlpLingTokensregexMultiCoreMapNodePattern_StringSequenceAnnotationPattern_initWithIOSClass_withJavaUtilMap_(IOSClass *textKey, id<JavaUtilMap> targets);

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpLingTokensregexMultiCoreMapNodePattern_StringSequenceAnnotationPattern)

#endif

#pragma pop_macro("INCLUDE_ALL_EduStanfordNlpLingTokensregexMultiCoreMapNodePattern")
