//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/ling/tokensregex/BasicSequenceMatchResult.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/ling/tokensregex/BasicSequenceMatchResult.h"
#include "edu/stanford/nlp/ling/tokensregex/SequenceMatchResult.h"
#include "edu/stanford/nlp/ling/tokensregex/SequencePattern.h"
#include "edu/stanford/nlp/util/Interval.h"
#include "edu/stanford/nlp/util/StringUtils.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"
#include "java/util/function/Function.h"

@interface EduStanfordNlpLingTokensregexBasicSequenceMatchResult ()

- (jint)getFirstVarGroupWithNSString:(NSString *)v;

@end

__attribute__((unused)) static jint EduStanfordNlpLingTokensregexBasicSequenceMatchResult_getFirstVarGroupWithNSString_(EduStanfordNlpLingTokensregexBasicSequenceMatchResult *self, NSString *v);

@implementation EduStanfordNlpLingTokensregexBasicSequenceMatchResult

- (id<JavaUtilList>)elements {
  return elements_;
}

- (EduStanfordNlpLingTokensregexSequencePattern *)pattern {
  return pattern_;
}

- (EduStanfordNlpLingTokensregexBasicSequenceMatchResult *)toBasicSequenceMatchResult {
  return [self copy__];
}

- (EduStanfordNlpLingTokensregexBasicSequenceMatchResult *)copy__ {
  EduStanfordNlpLingTokensregexBasicSequenceMatchResult *res = new_EduStanfordNlpLingTokensregexBasicSequenceMatchResult_init();
  res->pattern_ = pattern_;
  res->elements_ = elements_;
  res->matchedGroups_ = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(matchedGroups_))->size_ type:EduStanfordNlpLingTokensregexBasicSequenceMatchResult_MatchedGroup_class_()];
  res->nodesToStringConverter_ = nodesToStringConverter_;
  res->score_ = score_;
  res->priority_ = priority_;
  res->order_ = order_;
  res->varGroupBindings_ = varGroupBindings_;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(matchedGroups_))->size_; i++) {
    if (IOSObjectArray_Get(matchedGroups_, i) != nil) {
      (void) IOSObjectArray_SetAndConsume(res->matchedGroups_, i, new_EduStanfordNlpLingTokensregexBasicSequenceMatchResult_MatchedGroup_initWithEduStanfordNlpLingTokensregexBasicSequenceMatchResult_MatchedGroup_(IOSObjectArray_Get(matchedGroups_, i)));
    }
  }
  if (matchedResults_ != nil) {
    res->matchedResults_ = [IOSObjectArray newArrayWithLength:matchedResults_->size_ type:NSObject_class_()];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(res->matchedResults_, 0, matchedResults_, 0, matchedResults_->size_);
  }
  return res;
}

- (EduStanfordNlpUtilInterval *)getInterval {
  return [((EduStanfordNlpLingTokensregexSequenceMatchResult_GroupToIntervalFunc *) nil_chk(JreLoadStatic(EduStanfordNlpLingTokensregexSequenceMatchResult, TO_INTERVAL))) applyWithId:self];
}

- (jint)getOrder {
  return order_;
}

- (void)setOrderWithInt:(jint)order {
  self->order_ = order;
}

- (jdouble)priority {
  return priority_;
}

- (jdouble)score {
  return score_;
}

- (jint)start {
  return [self startWithInt:0];
}

- (jint)startWithInt:(jint)group {
  if (group == EduStanfordNlpLingTokensregexSequenceMatchResult_GROUP_BEFORE_MATCH) {
    return 0;
  }
  else if (group == EduStanfordNlpLingTokensregexSequenceMatchResult_GROUP_AFTER_MATCH) {
    return ((EduStanfordNlpLingTokensregexBasicSequenceMatchResult_MatchedGroup *) nil_chk(IOSObjectArray_Get(nil_chk(matchedGroups_), 0)))->matchEnd_;
  }
  if (IOSObjectArray_Get(nil_chk(matchedGroups_), group) != nil) {
    return ((EduStanfordNlpLingTokensregexBasicSequenceMatchResult_MatchedGroup *) nil_chk(IOSObjectArray_Get(matchedGroups_, group)))->matchBegin_;
  }
  else {
    return -1;
  }
}

- (jint)startWithNSString:(NSString *)var {
  jint g = EduStanfordNlpLingTokensregexBasicSequenceMatchResult_getFirstVarGroupWithNSString_(self, var);
  if (g >= 0) {
    return [self startWithInt:g];
  }
  else {
    return -1;
  }
}

- (jint)end {
  return [self endWithInt:0];
}

- (jint)endWithInt:(jint)group {
  if (group == EduStanfordNlpLingTokensregexSequenceMatchResult_GROUP_BEFORE_MATCH) {
    return ((EduStanfordNlpLingTokensregexBasicSequenceMatchResult_MatchedGroup *) nil_chk(IOSObjectArray_Get(nil_chk(matchedGroups_), 0)))->matchBegin_;
  }
  else if (group == EduStanfordNlpLingTokensregexSequenceMatchResult_GROUP_AFTER_MATCH) {
    return [((id<JavaUtilList>) nil_chk(elements_)) size];
  }
  if (IOSObjectArray_Get(nil_chk(matchedGroups_), group) != nil) {
    return ((EduStanfordNlpLingTokensregexBasicSequenceMatchResult_MatchedGroup *) nil_chk(IOSObjectArray_Get(matchedGroups_, group)))->matchEnd_;
  }
  else {
    return -1;
  }
}

- (jint)endWithNSString:(NSString *)var {
  jint g = EduStanfordNlpLingTokensregexBasicSequenceMatchResult_getFirstVarGroupWithNSString_(self, var);
  if (g >= 0) {
    return [self endWithInt:g];
  }
  else {
    return -1;
  }
}

- (NSString *)group {
  return [self groupWithInt:0];
}

- (NSString *)groupWithInt:(jint)group {
  id<JavaUtilList> groupTokens = [self groupNodesWithInt:group];
  if (nodesToStringConverter_ == nil) {
    return (groupTokens != nil) ? EduStanfordNlpUtilStringUtils_joinWithJavaLangIterable_withNSString_(groupTokens, @" ") : nil;
  }
  else {
    return [nodesToStringConverter_ applyWithId:groupTokens];
  }
}

- (NSString *)groupWithNSString:(NSString *)var {
  jint g = EduStanfordNlpLingTokensregexBasicSequenceMatchResult_getFirstVarGroupWithNSString_(self, var);
  if (g >= 0) {
    return [self groupWithInt:g];
  }
  else {
    return nil;
  }
}

- (id<JavaUtilList>)groupNodes {
  return [self groupNodesWithInt:0];
}

- (id<JavaUtilList>)groupNodesWithInt:(jint)group {
  if (group == EduStanfordNlpLingTokensregexSequenceMatchResult_GROUP_BEFORE_MATCH || group == EduStanfordNlpLingTokensregexSequenceMatchResult_GROUP_AFTER_MATCH) {
    return new_JavaUtilArrayList_initWithJavaUtilCollection_([((id<JavaUtilList>) nil_chk(elements_)) subListWithInt:[self startWithInt:group] withInt:[self endWithInt:group]]);
  }
  if (IOSObjectArray_Get(nil_chk(matchedGroups_), group) != nil) {
    return new_JavaUtilArrayList_initWithJavaUtilCollection_([((id<JavaUtilList>) nil_chk(elements_)) subListWithInt:((EduStanfordNlpLingTokensregexBasicSequenceMatchResult_MatchedGroup *) nil_chk(IOSObjectArray_Get(matchedGroups_, group)))->matchBegin_ withInt:((EduStanfordNlpLingTokensregexBasicSequenceMatchResult_MatchedGroup *) nil_chk(IOSObjectArray_Get(matchedGroups_, group)))->matchEnd_]);
  }
  else {
    return nil;
  }
}

- (id<JavaUtilList>)groupNodesWithNSString:(NSString *)var {
  jint g = EduStanfordNlpLingTokensregexBasicSequenceMatchResult_getFirstVarGroupWithNSString_(self, var);
  if (g >= 0) {
    return [self groupNodesWithInt:g];
  }
  else {
    return nil;
  }
}

- (id)groupValue {
  return [self groupValueWithInt:0];
}

- (id)groupValueWithInt:(jint)group {
  if (group == EduStanfordNlpLingTokensregexSequenceMatchResult_GROUP_BEFORE_MATCH || group == EduStanfordNlpLingTokensregexSequenceMatchResult_GROUP_AFTER_MATCH) {
    return new_JavaUtilArrayList_initWithJavaUtilCollection_([((id<JavaUtilList>) nil_chk(elements_)) subListWithInt:[self startWithInt:group] withInt:[self endWithInt:group]]);
  }
  if (IOSObjectArray_Get(nil_chk(matchedGroups_), group) != nil) {
    return ((EduStanfordNlpLingTokensregexBasicSequenceMatchResult_MatchedGroup *) nil_chk(IOSObjectArray_Get(matchedGroups_, group)))->value_;
  }
  else {
    return nil;
  }
}

- (id)groupValueWithNSString:(NSString *)var {
  jint g = EduStanfordNlpLingTokensregexBasicSequenceMatchResult_getFirstVarGroupWithNSString_(self, var);
  if (g >= 0) {
    return [self groupValueWithInt:g];
  }
  else {
    return nil;
  }
}

- (EduStanfordNlpLingTokensregexSequenceMatchResult_MatchedGroupInfo *)groupInfo {
  return [self groupInfoWithInt:0];
}

- (EduStanfordNlpLingTokensregexSequenceMatchResult_MatchedGroupInfo *)groupInfoWithInt:(jint)group {
  id<JavaUtilList> nodes = [self groupNodesWithInt:group];
  if (nodes != nil) {
    id value = [self groupValueWithInt:group];
    NSString *text = [self groupWithInt:group];
    id<JavaUtilList> matchedResults = [self groupMatchResultsWithInt:group];
    NSString *varName = group >= ((IOSObjectArray *) nil_chk(((EduStanfordNlpLingTokensregexSequencePattern_VarGroupBindings *) nil_chk(self->varGroupBindings_))->varnames_))->size_ ? nil : IOSObjectArray_Get(self->varGroupBindings_->varnames_, group);
    return new_EduStanfordNlpLingTokensregexSequenceMatchResult_MatchedGroupInfo_initWithNSString_withJavaUtilList_withJavaUtilList_withId_withNSString_(text, nodes, matchedResults, value, varName);
  }
  else {
    return nil;
  }
}

- (EduStanfordNlpLingTokensregexSequenceMatchResult_MatchedGroupInfo *)groupInfoWithNSString:(NSString *)var {
  jint g = EduStanfordNlpLingTokensregexBasicSequenceMatchResult_getFirstVarGroupWithNSString_(self, var);
  if (g >= 0) {
    return [self groupInfoWithInt:g];
  }
  else {
    return nil;
  }
}

- (jint)groupCount {
  return ((IOSObjectArray *) nil_chk(matchedGroups_))->size_ - 1;
}

- (id<JavaUtilList>)groupMatchResults {
  return [self groupMatchResultsWithInt:0];
}

- (id<JavaUtilList>)groupMatchResultsWithInt:(jint)group {
  if (matchedResults_ == nil) return nil;
  if (group == EduStanfordNlpLingTokensregexSequenceMatchResult_GROUP_BEFORE_MATCH || group == EduStanfordNlpLingTokensregexSequenceMatchResult_GROUP_AFTER_MATCH) {
    return JavaUtilArrays_asListWithNSObjectArray_(JavaUtilArrays_copyOfRangeWithNSObjectArray_withInt_withInt_(matchedResults_, [self startWithInt:group], [self endWithInt:group]));
  }
  if (IOSObjectArray_Get(nil_chk(matchedGroups_), group) != nil) {
    return JavaUtilArrays_asListWithNSObjectArray_(JavaUtilArrays_copyOfRangeWithNSObjectArray_withInt_withInt_(matchedResults_, ((EduStanfordNlpLingTokensregexBasicSequenceMatchResult_MatchedGroup *) nil_chk(IOSObjectArray_Get(matchedGroups_, group)))->matchBegin_, ((EduStanfordNlpLingTokensregexBasicSequenceMatchResult_MatchedGroup *) nil_chk(IOSObjectArray_Get(matchedGroups_, group)))->matchEnd_));
  }
  else {
    return nil;
  }
}

- (id<JavaUtilList>)groupMatchResultsWithNSString:(NSString *)var {
  jint g = EduStanfordNlpLingTokensregexBasicSequenceMatchResult_getFirstVarGroupWithNSString_(self, var);
  if (g >= 0) {
    return [self groupMatchResultsWithInt:g];
  }
  else {
    return nil;
  }
}

- (id)nodeMatchResultWithInt:(jint)index {
  if (matchedResults_ != nil) {
    return IOSObjectArray_Get(matchedResults_, index);
  }
  else {
    return nil;
  }
}

- (id)groupMatchResultWithInt:(jint)group
                      withInt:(jint)index {
  if (matchedResults_ != nil) {
    jint s = [self startWithInt:group];
    jint e = [self endWithInt:group];
    if (s >= 0 && e > s) {
      jint d = e - s;
      if (index >= 0 && index < d) {
        return IOSObjectArray_Get(nil_chk(matchedResults_), s + index);
      }
    }
  }
  return nil;
}

- (id)groupMatchResultWithNSString:(NSString *)var
                           withInt:(jint)index {
  jint g = EduStanfordNlpLingTokensregexBasicSequenceMatchResult_getFirstVarGroupWithNSString_(self, var);
  if (g >= 0) {
    return [self groupMatchResultWithInt:g withInt:index];
  }
  else {
    return nil;
  }
}

- (jint)getFirstVarGroupWithNSString:(NSString *)v {
  return EduStanfordNlpLingTokensregexBasicSequenceMatchResult_getFirstVarGroupWithNSString_(self, v);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpLingTokensregexBasicSequenceMatchResult_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexSequencePattern;", 0x1, -1, -1, -1, 1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexBasicSequenceMatchResult;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexBasicSequenceMatchResult;", 0x1, 3, -1, -1, 2, -1, -1 },
    { NULL, "LEduStanfordNlpUtilInterval;", 0x1, -1, -1, -1, 4, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 7, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 9, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 9, 8, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 10, 6, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 10, 8, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 11, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 12, 6, -1, 13, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 12, 8, -1, 14, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 15, 6, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 15, 8, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexSequenceMatchResult_MatchedGroupInfo;", 0x1, -1, -1, -1, 16, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexSequenceMatchResult_MatchedGroupInfo;", 0x1, 17, 6, -1, 18, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexSequenceMatchResult_MatchedGroupInfo;", 0x1, 17, 8, -1, 19, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 20, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 21, 6, -1, 22, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 21, 8, -1, 23, -1, -1 },
    { NULL, "LNSObject;", 0x1, 24, 6, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 25, 26, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 25, 27, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 28, 8, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(elements);
  methods[1].selector = @selector(pattern);
  methods[2].selector = @selector(toBasicSequenceMatchResult);
  methods[3].selector = @selector(copy__);
  methods[4].selector = @selector(getInterval);
  methods[5].selector = @selector(getOrder);
  methods[6].selector = @selector(setOrderWithInt:);
  methods[7].selector = @selector(priority);
  methods[8].selector = @selector(score);
  methods[9].selector = @selector(start);
  methods[10].selector = @selector(startWithInt:);
  methods[11].selector = @selector(startWithNSString:);
  methods[12].selector = @selector(end);
  methods[13].selector = @selector(endWithInt:);
  methods[14].selector = @selector(endWithNSString:);
  methods[15].selector = @selector(group);
  methods[16].selector = @selector(groupWithInt:);
  methods[17].selector = @selector(groupWithNSString:);
  methods[18].selector = @selector(groupNodes);
  methods[19].selector = @selector(groupNodesWithInt:);
  methods[20].selector = @selector(groupNodesWithNSString:);
  methods[21].selector = @selector(groupValue);
  methods[22].selector = @selector(groupValueWithInt:);
  methods[23].selector = @selector(groupValueWithNSString:);
  methods[24].selector = @selector(groupInfo);
  methods[25].selector = @selector(groupInfoWithInt:);
  methods[26].selector = @selector(groupInfoWithNSString:);
  methods[27].selector = @selector(groupCount);
  methods[28].selector = @selector(groupMatchResults);
  methods[29].selector = @selector(groupMatchResultsWithInt:);
  methods[30].selector = @selector(groupMatchResultsWithNSString:);
  methods[31].selector = @selector(nodeMatchResultWithInt:);
  methods[32].selector = @selector(groupMatchResultWithInt:withInt:);
  methods[33].selector = @selector(groupMatchResultWithNSString:withInt:);
  methods[34].selector = @selector(getFirstVarGroupWithNSString:);
  methods[35].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "pattern_", "LEduStanfordNlpLingTokensregexSequencePattern;", .constantValue.asLong = 0, 0x0, -1, -1, 29, -1 },
    { "elements_", "LJavaUtilList;", .constantValue.asLong = 0, 0x0, -1, -1, 30, -1 },
    { "matchedGroups_", "[LEduStanfordNlpLingTokensregexBasicSequenceMatchResult_MatchedGroup;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "matchedResults_", "[LNSObject;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "nodesToStringConverter_", "LJavaUtilFunctionFunction;", .constantValue.asLong = 0, 0x0, -1, -1, 31, -1 },
    { "varGroupBindings_", "LEduStanfordNlpLingTokensregexSequencePattern_VarGroupBindings;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "score_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "priority_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "order_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/List<+TT;>;", "()Ledu/stanford/nlp/ling/tokensregex/SequencePattern<TT;>;", "()Ledu/stanford/nlp/ling/tokensregex/BasicSequenceMatchResult<TT;>;", "copy", "()Ledu/stanford/nlp/util/Interval<Ljava/lang/Integer;>;", "setOrder", "I", "start", "LNSString;", "end", "group", "()Ljava/util/List<TT;>;", "groupNodes", "(I)Ljava/util/List<TT;>;", "(Ljava/lang/String;)Ljava/util/List<+TT;>;", "groupValue", "()Ledu/stanford/nlp/ling/tokensregex/SequenceMatchResult$MatchedGroupInfo<TT;>;", "groupInfo", "(I)Ledu/stanford/nlp/ling/tokensregex/SequenceMatchResult$MatchedGroupInfo<TT;>;", "(Ljava/lang/String;)Ledu/stanford/nlp/ling/tokensregex/SequenceMatchResult$MatchedGroupInfo<TT;>;", "()Ljava/util/List<Ljava/lang/Object;>;", "groupMatchResults", "(I)Ljava/util/List<Ljava/lang/Object;>;", "(Ljava/lang/String;)Ljava/util/List<Ljava/lang/Object;>;", "nodeMatchResult", "groupMatchResult", "II", "LNSString;I", "getFirstVarGroup", "Ledu/stanford/nlp/ling/tokensregex/SequencePattern<TT;>;", "Ljava/util/List<+TT;>;", "Ljava/util/function/Function<Ljava/util/List<+TT;>;Ljava/lang/String;>;", "LEduStanfordNlpLingTokensregexBasicSequenceMatchResult_MatchedGroup;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Ledu/stanford/nlp/ling/tokensregex/SequenceMatchResult<TT;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexBasicSequenceMatchResult = { "BasicSequenceMatchResult", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, fields, 7, 0x1, 36, 9, -1, 32, -1, 33, -1 };
  return &_EduStanfordNlpLingTokensregexBasicSequenceMatchResult;
}

@end

jint EduStanfordNlpLingTokensregexBasicSequenceMatchResult_getFirstVarGroupWithNSString_(EduStanfordNlpLingTokensregexBasicSequenceMatchResult *self, NSString *v) {
  v = [((NSString *) nil_chk(v)) trim];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(((EduStanfordNlpLingTokensregexSequencePattern_VarGroupBindings *) nil_chk(self->varGroupBindings_))->varnames_))->size_; i++) {
    NSString *s = IOSObjectArray_Get(self->varGroupBindings_->varnames_, i);
    if ([((NSString *) nil_chk(v)) isEqual:s]) {
      if (IOSObjectArray_Get(nil_chk(self->matchedGroups_), i) != nil) {
        return i;
      }
    }
  }
  return -1;
}

void EduStanfordNlpLingTokensregexBasicSequenceMatchResult_init(EduStanfordNlpLingTokensregexBasicSequenceMatchResult *self) {
  NSObject_init(self);
  self->score_ = 0.0;
  self->priority_ = 0.0;
}

EduStanfordNlpLingTokensregexBasicSequenceMatchResult *new_EduStanfordNlpLingTokensregexBasicSequenceMatchResult_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexBasicSequenceMatchResult, init)
}

EduStanfordNlpLingTokensregexBasicSequenceMatchResult *create_EduStanfordNlpLingTokensregexBasicSequenceMatchResult_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexBasicSequenceMatchResult, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexBasicSequenceMatchResult)

@implementation EduStanfordNlpLingTokensregexBasicSequenceMatchResult_MatchedGroup

- (instancetype)initWithEduStanfordNlpLingTokensregexBasicSequenceMatchResult_MatchedGroup:(EduStanfordNlpLingTokensregexBasicSequenceMatchResult_MatchedGroup *)mg {
  EduStanfordNlpLingTokensregexBasicSequenceMatchResult_MatchedGroup_initWithEduStanfordNlpLingTokensregexBasicSequenceMatchResult_MatchedGroup_(self, mg);
  return self;
}

- (instancetype)initWithInt:(jint)matchBegin
                    withInt:(jint)matchEnd
                     withId:(id)value {
  EduStanfordNlpLingTokensregexBasicSequenceMatchResult_MatchedGroup_initWithInt_withInt_withId_(self, matchBegin, matchEnd, value);
  return self;
}

- (NSString *)description {
  return JreStrcat("CICIC", '(', matchBegin_, ',', matchEnd_, ')');
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 2, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpLingTokensregexBasicSequenceMatchResult_MatchedGroup:);
  methods[1].selector = @selector(initWithInt:withInt:withId:);
  methods[2].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "matchBegin_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "matchEnd_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "value_", "LNSObject;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpLingTokensregexBasicSequenceMatchResult_MatchedGroup;", "IILNSObject;", "toString", "LEduStanfordNlpLingTokensregexBasicSequenceMatchResult;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexBasicSequenceMatchResult_MatchedGroup = { "MatchedGroup", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, fields, 7, 0xc, 3, 3, 3, -1, -1, -1, -1 };
  return &_EduStanfordNlpLingTokensregexBasicSequenceMatchResult_MatchedGroup;
}

@end

void EduStanfordNlpLingTokensregexBasicSequenceMatchResult_MatchedGroup_initWithEduStanfordNlpLingTokensregexBasicSequenceMatchResult_MatchedGroup_(EduStanfordNlpLingTokensregexBasicSequenceMatchResult_MatchedGroup *self, EduStanfordNlpLingTokensregexBasicSequenceMatchResult_MatchedGroup *mg) {
  NSObject_init(self);
  self->matchBegin_ = -1;
  self->matchEnd_ = -1;
  self->value_ = nil;
  self->matchBegin_ = ((EduStanfordNlpLingTokensregexBasicSequenceMatchResult_MatchedGroup *) nil_chk(mg))->matchBegin_;
  self->matchEnd_ = mg->matchEnd_;
  self->value_ = mg->value_;
}

EduStanfordNlpLingTokensregexBasicSequenceMatchResult_MatchedGroup *new_EduStanfordNlpLingTokensregexBasicSequenceMatchResult_MatchedGroup_initWithEduStanfordNlpLingTokensregexBasicSequenceMatchResult_MatchedGroup_(EduStanfordNlpLingTokensregexBasicSequenceMatchResult_MatchedGroup *mg) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexBasicSequenceMatchResult_MatchedGroup, initWithEduStanfordNlpLingTokensregexBasicSequenceMatchResult_MatchedGroup_, mg)
}

EduStanfordNlpLingTokensregexBasicSequenceMatchResult_MatchedGroup *create_EduStanfordNlpLingTokensregexBasicSequenceMatchResult_MatchedGroup_initWithEduStanfordNlpLingTokensregexBasicSequenceMatchResult_MatchedGroup_(EduStanfordNlpLingTokensregexBasicSequenceMatchResult_MatchedGroup *mg) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexBasicSequenceMatchResult_MatchedGroup, initWithEduStanfordNlpLingTokensregexBasicSequenceMatchResult_MatchedGroup_, mg)
}

void EduStanfordNlpLingTokensregexBasicSequenceMatchResult_MatchedGroup_initWithInt_withInt_withId_(EduStanfordNlpLingTokensregexBasicSequenceMatchResult_MatchedGroup *self, jint matchBegin, jint matchEnd, id value) {
  NSObject_init(self);
  self->matchBegin_ = -1;
  self->matchEnd_ = -1;
  self->value_ = nil;
  self->matchBegin_ = matchBegin;
  self->matchEnd_ = matchEnd;
  self->value_ = value;
}

EduStanfordNlpLingTokensregexBasicSequenceMatchResult_MatchedGroup *new_EduStanfordNlpLingTokensregexBasicSequenceMatchResult_MatchedGroup_initWithInt_withInt_withId_(jint matchBegin, jint matchEnd, id value) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexBasicSequenceMatchResult_MatchedGroup, initWithInt_withInt_withId_, matchBegin, matchEnd, value)
}

EduStanfordNlpLingTokensregexBasicSequenceMatchResult_MatchedGroup *create_EduStanfordNlpLingTokensregexBasicSequenceMatchResult_MatchedGroup_initWithInt_withInt_withId_(jint matchBegin, jint matchEnd, id value) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexBasicSequenceMatchResult_MatchedGroup, initWithInt_withInt_withId_, matchBegin, matchEnd, value)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexBasicSequenceMatchResult_MatchedGroup)
