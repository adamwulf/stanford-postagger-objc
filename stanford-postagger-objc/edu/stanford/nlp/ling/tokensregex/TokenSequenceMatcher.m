//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/ling/tokensregex/TokenSequenceMatcher.java
//

#include "J2ObjC_source.h"
#include "edu/stanford/nlp/ling/tokensregex/CoreMapSequenceMatcher.h"
#include "edu/stanford/nlp/ling/tokensregex/SequencePattern.h"
#include "edu/stanford/nlp/ling/tokensregex/TokenSequenceMatcher.h"
#include "java/util/List.h"
#include "java/util/function/Function.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@implementation EduStanfordNlpLingTokensregexTokenSequenceMatcher

- (instancetype)initWithEduStanfordNlpLingTokensregexSequencePattern:(EduStanfordNlpLingTokensregexSequencePattern *)pattern
                                                    withJavaUtilList:(id<JavaUtilList>)tokens {
  EduStanfordNlpLingTokensregexTokenSequenceMatcher_initWithEduStanfordNlpLingTokensregexSequencePattern_withJavaUtilList_(self, pattern, tokens);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpLingTokensregexSequencePattern:withJavaUtilList:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LEduStanfordNlpLingTokensregexSequencePattern;LJavaUtilList;", "(Ledu/stanford/nlp/ling/tokensregex/SequencePattern<Ledu/stanford/nlp/util/CoreMap;>;Ljava/util/List<+Ledu/stanford/nlp/util/CoreMap;>;)V", "Ledu/stanford/nlp/ling/tokensregex/CoreMapSequenceMatcher<Ledu/stanford/nlp/util/CoreMap;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexTokenSequenceMatcher = { "TokenSequenceMatcher", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, NULL, 7, 0x1, 1, 0, -1, -1, -1, 2, -1 };
  return &_EduStanfordNlpLingTokensregexTokenSequenceMatcher;
}

@end

void EduStanfordNlpLingTokensregexTokenSequenceMatcher_initWithEduStanfordNlpLingTokensregexSequencePattern_withJavaUtilList_(EduStanfordNlpLingTokensregexTokenSequenceMatcher *self, EduStanfordNlpLingTokensregexSequencePattern *pattern, id<JavaUtilList> tokens) {
  EduStanfordNlpLingTokensregexCoreMapSequenceMatcher_initWithEduStanfordNlpLingTokensregexSequencePattern_withJavaUtilList_(self, pattern, tokens);
  self->nodesToStringConverter_ = JreLoadStatic(EduStanfordNlpLingTokensregexCoreMapSequenceMatcher, COREMAP_LIST_TO_STRING_CONVERTER);
}

EduStanfordNlpLingTokensregexTokenSequenceMatcher *new_EduStanfordNlpLingTokensregexTokenSequenceMatcher_initWithEduStanfordNlpLingTokensregexSequencePattern_withJavaUtilList_(EduStanfordNlpLingTokensregexSequencePattern *pattern, id<JavaUtilList> tokens) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexTokenSequenceMatcher, initWithEduStanfordNlpLingTokensregexSequencePattern_withJavaUtilList_, pattern, tokens)
}

EduStanfordNlpLingTokensregexTokenSequenceMatcher *create_EduStanfordNlpLingTokensregexTokenSequenceMatcher_initWithEduStanfordNlpLingTokensregexSequencePattern_withJavaUtilList_(EduStanfordNlpLingTokensregexSequencePattern *pattern, id<JavaUtilList> tokens) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexTokenSequenceMatcher, initWithEduStanfordNlpLingTokensregexSequencePattern_withJavaUtilList_, pattern, tokens)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexTokenSequenceMatcher)
