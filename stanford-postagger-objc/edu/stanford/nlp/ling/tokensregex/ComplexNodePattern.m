//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/ling/tokensregex/ComplexNodePattern.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/ling/tokensregex/BasicSequenceMatchResult.h"
#include "edu/stanford/nlp/ling/tokensregex/ComplexNodePattern.h"
#include "edu/stanford/nlp/ling/tokensregex/Env.h"
#include "edu/stanford/nlp/ling/tokensregex/NodePattern.h"
#include "edu/stanford/nlp/ling/tokensregex/SequenceMatcher.h"
#include "edu/stanford/nlp/ling/tokensregex/SequencePattern.h"
#include "edu/stanford/nlp/util/CollectionUtils.h"
#include "edu/stanford/nlp/util/Pair.h"
#include "edu/stanford/nlp/util/StringUtils.h"
#include "java/lang/Double.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/function/BiFunction.h"
#include "java/util/function/Function.h"
#include "java/util/regex/MatchResult.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"

@interface EduStanfordNlpLingTokensregexComplexNodePattern () {
 @public
  id<JavaUtilList> annotationPatterns_;
  id<JavaUtilFunctionBiFunction> getter_;
}

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpLingTokensregexComplexNodePattern, annotationPatterns_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(EduStanfordNlpLingTokensregexComplexNodePattern, getter_, id<JavaUtilFunctionBiFunction>)

inline JavaUtilRegexPattern *EduStanfordNlpLingTokensregexComplexNodePattern_get_LITERAL_PATTERN();
static JavaUtilRegexPattern *EduStanfordNlpLingTokensregexComplexNodePattern_LITERAL_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpLingTokensregexComplexNodePattern, LITERAL_PATTERN, JavaUtilRegexPattern *)

__attribute__((unused)) static void EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_initWithNSString_withInt_(EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType *new_EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

@interface EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$1 : EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType < NSCopying >

- (jboolean)acceptWithDouble:(jdouble)v1
                  withDouble:(jdouble)v2;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$1)

__attribute__((unused)) static void EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$1_initWithNSString_withInt_(EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$1 *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$1 *new_EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$1_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

@interface EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$2 : EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType < NSCopying >

- (jboolean)acceptWithDouble:(jdouble)v1
                  withDouble:(jdouble)v2;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$2)

__attribute__((unused)) static void EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$2_initWithNSString_withInt_(EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$2 *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$2 *new_EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$2_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

@interface EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$3 : EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType < NSCopying >

- (jboolean)acceptWithDouble:(jdouble)v1
                  withDouble:(jdouble)v2;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$3)

__attribute__((unused)) static void EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$3_initWithNSString_withInt_(EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$3 *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$3 *new_EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$3_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

@interface EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$4 : EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType < NSCopying >

- (jboolean)acceptWithDouble:(jdouble)v1
                  withDouble:(jdouble)v2;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$4)

__attribute__((unused)) static void EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$4_initWithNSString_withInt_(EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$4 *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$4 *new_EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$4_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

@interface EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$5 : EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType < NSCopying >

- (jboolean)acceptWithDouble:(jdouble)v1
                  withDouble:(jdouble)v2;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$5)

__attribute__((unused)) static void EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$5_initWithNSString_withInt_(EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$5 *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$5 *new_EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$5_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

@interface EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$6 : EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType < NSCopying >

- (jboolean)acceptWithDouble:(jdouble)v1
                  withDouble:(jdouble)v2;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$6)

__attribute__((unused)) static void EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$6_initWithNSString_withInt_(EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$6 *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$6 *new_EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$6_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

@interface EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$7 : EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType < NSCopying >

- (jboolean)acceptWithDouble:(jdouble)v1
                  withDouble:(jdouble)v2;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$7)

__attribute__((unused)) static void EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$7_initWithNSString_withInt_(EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$7 *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$7 *new_EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$7_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpLingTokensregexComplexNodePattern)

@implementation EduStanfordNlpLingTokensregexComplexNodePattern

- (instancetype)initWithJavaUtilFunctionBiFunction:(id<JavaUtilFunctionBiFunction>)getter
                                  withJavaUtilList:(id<JavaUtilList>)annotationPatterns {
  EduStanfordNlpLingTokensregexComplexNodePattern_initWithJavaUtilFunctionBiFunction_withJavaUtilList_(self, getter, annotationPatterns);
  return self;
}

- (instancetype)initWithJavaUtilFunctionBiFunction:(id<JavaUtilFunctionBiFunction>)getter
                   withEduStanfordNlpUtilPairArray:(IOSObjectArray *)annotationPatterns {
  EduStanfordNlpLingTokensregexComplexNodePattern_initWithJavaUtilFunctionBiFunction_withEduStanfordNlpUtilPairArray_(self, getter, annotationPatterns);
  return self;
}

- (instancetype)initWithJavaUtilFunctionBiFunction:(id<JavaUtilFunctionBiFunction>)getter
                                            withId:(id)key
      withEduStanfordNlpLingTokensregexNodePattern:(EduStanfordNlpLingTokensregexNodePattern *)pattern {
  EduStanfordNlpLingTokensregexComplexNodePattern_initWithJavaUtilFunctionBiFunction_withId_withEduStanfordNlpLingTokensregexNodePattern_(self, getter, key, pattern);
  return self;
}

- (id<JavaUtilList>)getAnnotationPatterns {
  return JavaUtilCollections_unmodifiableListWithJavaUtilList_(annotationPatterns_);
}

+ (EduStanfordNlpLingTokensregexNodePattern *)newStringRegexPatternWithNSString:(NSString *)regex
                                                                        withInt:(jint)flags {
  return EduStanfordNlpLingTokensregexComplexNodePattern_newStringRegexPatternWithNSString_withInt_(regex, flags);
}

+ (EduStanfordNlpLingTokensregexComplexNodePattern *)valueOfWithEduStanfordNlpLingTokensregexEnv:(EduStanfordNlpLingTokensregexEnv *)env
                                                                                 withJavaUtilMap:(id<JavaUtilMap>)attributes
                                                                  withJavaUtilFunctionBiFunction:(id<JavaUtilFunctionBiFunction>)getter
                                                                    withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)getKey {
  return EduStanfordNlpLingTokensregexComplexNodePattern_valueOfWithEduStanfordNlpLingTokensregexEnv_withJavaUtilMap_withJavaUtilFunctionBiFunction_withJavaUtilFunctionFunction_(env, attributes, getter, getKey);
}

- (void)populateWithEduStanfordNlpLingTokensregexEnv:(EduStanfordNlpLingTokensregexEnv *)env
                                     withJavaUtilMap:(id<JavaUtilMap>)attributes
                        withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)getKey {
  EduStanfordNlpLingTokensregexComplexNodePattern *p = self;
  for (NSString * __strong attr in nil_chk([((id<JavaUtilMap>) nil_chk(attributes)) keySet])) {
    NSString *value = [attributes getWithId:attr];
    id c = [((id<JavaUtilFunctionFunction>) nil_chk(getKey)) applyWithId:EduStanfordNlpUtilPair_makePairWithId_withId_(env, attr)];
    if (c != nil) {
      if ([((NSString *) nil_chk(value)) hasPrefix:@"\""] && [value hasSuffix:@"\""]) {
        value = [value substring:1 endIndex:((jint) [value length]) - 1];
        value = [((NSString *) nil_chk(value)) replaceAll:@"\\\\\"" withReplacement:@"\""];
        [p addWithId:c withEduStanfordNlpLingTokensregexNodePattern:new_EduStanfordNlpLingTokensregexComplexNodePattern_StringAnnotationPattern_initWithNSString_withInt_(value, ((EduStanfordNlpLingTokensregexEnv *) nil_chk(env))->defaultStringMatchFlags_)];
      }
      else if ([value hasPrefix:@"/"] && [value hasSuffix:@"/"]) {
        value = [value substring:1 endIndex:((jint) [value length]) - 1];
        value = [((NSString *) nil_chk(value)) replaceAll:@"\\\\/" withReplacement:@"/"];
        NSString *regex = (env != nil) ? [((EduStanfordNlpLingTokensregexEnv *) nil_chk(env)) expandStringRegexWithNSString:value] : value;
        jint flags = (env != nil) ? ((EduStanfordNlpLingTokensregexEnv *) nil_chk(env))->defaultStringPatternFlags_ : 0;
        [p addWithId:c withEduStanfordNlpLingTokensregexNodePattern:EduStanfordNlpLingTokensregexComplexNodePattern_newStringRegexPatternWithNSString_withInt_(regex, flags)];
      }
      else if ([value hasPrefix:@"::"]) {
        {
          jboolean ok;
          switch (JreIndexOfStr(value, (id[]){ @"::IS_NIL", @"::NOT_EXISTS", @"::EXISTS", @"::NOT_NIL", @"::IS_NUM" }, 5)) {
            case 0:
            case 1:
            [p addWithId:c withEduStanfordNlpLingTokensregexNodePattern:new_EduStanfordNlpLingTokensregexComplexNodePattern_NilAnnotationPattern_init()];
            break;
            case 2:
            case 3:
            [p addWithId:c withEduStanfordNlpLingTokensregexNodePattern:new_EduStanfordNlpLingTokensregexComplexNodePattern_NotNilAnnotationPattern_init()];
            break;
            case 4:
            [p addWithId:c withEduStanfordNlpLingTokensregexNodePattern:new_EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_initWithDouble_withEduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_(0, JreLoadEnum(EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType, IS_NUM))];
            break;
            default:
            ok = false;
            if (env != nil) {
              id custom = [env getWithNSString:value];
              if (custom != nil) {
                [p addWithId:c withEduStanfordNlpLingTokensregexNodePattern:(EduStanfordNlpLingTokensregexNodePattern *) cast_chk(custom, [EduStanfordNlpLingTokensregexNodePattern class])];
                ok = true;
              }
            }
            if (!ok) {
              @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$$", @"Invalid value ", value, @" for key: ", attr));
            }
            break;
          }
        }
      }
      else if ([value hasPrefix:@"<="]) {
        JavaLangDouble *v = JavaLangDouble_valueOfWithDouble_(JavaLangDouble_parseDoubleWithNSString_([value substring:2]));
        [p addWithId:c withEduStanfordNlpLingTokensregexNodePattern:new_EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_initWithDouble_withEduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_([v doubleValue], JreLoadEnum(EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType, LE))];
      }
      else if ([value hasPrefix:@">="]) {
        JavaLangDouble *v = JavaLangDouble_valueOfWithDouble_(JavaLangDouble_parseDoubleWithNSString_([value substring:2]));
        [p addWithId:c withEduStanfordNlpLingTokensregexNodePattern:new_EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_initWithDouble_withEduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_([v doubleValue], JreLoadEnum(EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType, GE))];
      }
      else if ([value hasPrefix:@"=="]) {
        JavaLangDouble *v = JavaLangDouble_valueOfWithDouble_(JavaLangDouble_parseDoubleWithNSString_([value substring:2]));
        [p addWithId:c withEduStanfordNlpLingTokensregexNodePattern:new_EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_initWithDouble_withEduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_([v doubleValue], JreLoadEnum(EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType, EQ))];
      }
      else if ([value hasPrefix:@"!="]) {
        JavaLangDouble *v = JavaLangDouble_valueOfWithDouble_(JavaLangDouble_parseDoubleWithNSString_([value substring:2]));
        [p addWithId:c withEduStanfordNlpLingTokensregexNodePattern:new_EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_initWithDouble_withEduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_([v doubleValue], JreLoadEnum(EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType, NE))];
      }
      else if ([value hasPrefix:@">"]) {
        JavaLangDouble *v = JavaLangDouble_valueOfWithDouble_(JavaLangDouble_parseDoubleWithNSString_([value substring:1]));
        [p addWithId:c withEduStanfordNlpLingTokensregexNodePattern:new_EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_initWithDouble_withEduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_([v doubleValue], JreLoadEnum(EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType, GT))];
      }
      else if ([value hasPrefix:@"<"]) {
        JavaLangDouble *v = JavaLangDouble_valueOfWithDouble_(JavaLangDouble_parseDoubleWithNSString_([value substring:1]));
        [p addWithId:c withEduStanfordNlpLingTokensregexNodePattern:new_EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_initWithDouble_withEduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_([v doubleValue], JreLoadEnum(EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType, LT))];
      }
      else if ([value matches:@"[A-Za-z0-9_+-.]+"]) {
        [p addWithId:c withEduStanfordNlpLingTokensregexNodePattern:new_EduStanfordNlpLingTokensregexComplexNodePattern_StringAnnotationPattern_initWithNSString_withInt_(value, ((EduStanfordNlpLingTokensregexEnv *) nil_chk(env))->defaultStringMatchFlags_)];
      }
      else {
        @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$$", @"Invalid value ", value, @" for key: ", attr));
      }
    }
    else {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Unknown annotation key: ", attr));
    }
  }
}

- (void)addWithId:(id)c
withEduStanfordNlpLingTokensregexNodePattern:(EduStanfordNlpLingTokensregexNodePattern *)pattern {
  [((id<JavaUtilList>) nil_chk(annotationPatterns_)) addWithId:EduStanfordNlpUtilPair_makePairWithId_withId_(c, pattern)];
}

- (jboolean)matchWithId:(id)token {
  jboolean matched = true;
  for (EduStanfordNlpUtilPair * __strong entry_ in nil_chk(annotationPatterns_)) {
    EduStanfordNlpLingTokensregexNodePattern *annoPattern = ((EduStanfordNlpUtilPair *) nil_chk(entry_))->second_;
    id anno = [((id<JavaUtilFunctionBiFunction>) nil_chk(getter_)) applyWithId:token withId:entry_->first_];
    if (![((EduStanfordNlpLingTokensregexNodePattern *) nil_chk(annoPattern)) matchWithId:anno]) {
      matched = false;
      break;
    }
  }
  return matched;
}

- (id)matchWithResultWithId:(id)token {
  id<JavaUtilMap> matchResults = new_JavaUtilHashMap_init();
  if ([self matchWithId:token withJavaUtilMap:matchResults]) {
    return matchResults;
  }
  else {
    return nil;
  }
}

- (jboolean)matchWithId:(id)token
        withJavaUtilMap:(id<JavaUtilMap>)matchResults {
  jboolean matched = true;
  for (EduStanfordNlpUtilPair * __strong entry_ in nil_chk(annotationPatterns_)) {
    EduStanfordNlpLingTokensregexNodePattern *annoPattern = ((EduStanfordNlpUtilPair *) nil_chk(entry_))->second_;
    id anno = [((id<JavaUtilFunctionBiFunction>) nil_chk(getter_)) applyWithId:token withId:entry_->first_];
    id matchResult = [((EduStanfordNlpLingTokensregexNodePattern *) nil_chk(annoPattern)) matchWithResultWithId:anno];
    if (matchResult != nil) {
      (void) [((id<JavaUtilMap>) nil_chk(matchResults)) putWithId:entry_->first_ withId:matchResult];
    }
    else {
      matched = false;
      break;
    }
  }
  return matched;
}

- (NSString *)description {
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  for (EduStanfordNlpUtilPair * __strong entry_ in nil_chk(annotationPatterns_)) {
    if ([sb length] > 0) {
      (void) [sb appendWithNSString:@", "];
    }
    (void) [((JavaLangStringBuilder *) nil_chk([sb appendWithId:((EduStanfordNlpUtilPair *) nil_chk(entry_))->first_])) appendWithId:entry_->second_];
  }
  return [sb description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, NULL, 0x81, -1, 2, -1, 3, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, -1, 5, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 6, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexNodePattern;", 0x9, 7, 8, -1, 9, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexComplexNodePattern;", 0x9, 10, 11, -1, 12, -1, -1 },
    { NULL, "V", 0x4, 13, 14, -1, 15, -1, -1 },
    { NULL, "V", 0x1, 16, 17, -1, 18, -1, -1 },
    { NULL, "Z", 0x1, 19, 20, -1, 21, -1, -1 },
    { NULL, "LNSObject;", 0x1, 22, 20, -1, 23, -1, -1 },
    { NULL, "Z", 0x4, 19, 24, -1, 25, -1, -1 },
    { NULL, "LNSString;", 0x1, 26, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilFunctionBiFunction:withJavaUtilList:);
  methods[1].selector = @selector(initWithJavaUtilFunctionBiFunction:withEduStanfordNlpUtilPairArray:);
  methods[2].selector = @selector(initWithJavaUtilFunctionBiFunction:withId:withEduStanfordNlpLingTokensregexNodePattern:);
  methods[3].selector = @selector(getAnnotationPatterns);
  methods[4].selector = @selector(newStringRegexPatternWithNSString:withInt:);
  methods[5].selector = @selector(valueOfWithEduStanfordNlpLingTokensregexEnv:withJavaUtilMap:withJavaUtilFunctionBiFunction:withJavaUtilFunctionFunction:);
  methods[6].selector = @selector(populateWithEduStanfordNlpLingTokensregexEnv:withJavaUtilMap:withJavaUtilFunctionFunction:);
  methods[7].selector = @selector(addWithId:withEduStanfordNlpLingTokensregexNodePattern:);
  methods[8].selector = @selector(matchWithId:);
  methods[9].selector = @selector(matchWithResultWithId:);
  methods[10].selector = @selector(matchWithId:withJavaUtilMap:);
  methods[11].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "annotationPatterns_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 27, -1 },
    { "getter_", "LJavaUtilFunctionBiFunction;", .constantValue.asLong = 0, 0x12, -1, -1, 28, -1 },
    { "LITERAL_PATTERN", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 29, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilFunctionBiFunction;LJavaUtilList;", "(Ljava/util/function/BiFunction<TM;TK;Ljava/lang/Object;>;Ljava/util/List<Ledu/stanford/nlp/util/Pair<TK;Ledu/stanford/nlp/ling/tokensregex/NodePattern;>;>;)V", "LJavaUtilFunctionBiFunction;[LEduStanfordNlpUtilPair;", "(Ljava/util/function/BiFunction<TM;TK;Ljava/lang/Object;>;[Ledu/stanford/nlp/util/Pair<TK;Ledu/stanford/nlp/ling/tokensregex/NodePattern;>;)V", "LJavaUtilFunctionBiFunction;LNSObject;LEduStanfordNlpLingTokensregexNodePattern;", "(Ljava/util/function/BiFunction<TM;TK;Ljava/lang/Object;>;TK;Ledu/stanford/nlp/ling/tokensregex/NodePattern;)V", "()Ljava/util/List<Ledu/stanford/nlp/util/Pair<TK;Ledu/stanford/nlp/ling/tokensregex/NodePattern;>;>;", "newStringRegexPattern", "LNSString;I", "(Ljava/lang/String;I)Ledu/stanford/nlp/ling/tokensregex/NodePattern<Ljava/lang/String;>;", "valueOf", "LEduStanfordNlpLingTokensregexEnv;LJavaUtilMap;LJavaUtilFunctionBiFunction;LJavaUtilFunctionFunction;", "<M:Ljava/lang/Object;K:Ljava/lang/Object;>(Ledu/stanford/nlp/ling/tokensregex/Env;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;Ljava/util/function/BiFunction<TM;TK;Ljava/lang/Object;>;Ljava/util/function/Function<Ledu/stanford/nlp/util/Pair<Ledu/stanford/nlp/ling/tokensregex/Env;Ljava/lang/String;>;TK;>;)Ledu/stanford/nlp/ling/tokensregex/ComplexNodePattern;", "populate", "LEduStanfordNlpLingTokensregexEnv;LJavaUtilMap;LJavaUtilFunctionFunction;", "(Ledu/stanford/nlp/ling/tokensregex/Env;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;Ljava/util/function/Function<Ledu/stanford/nlp/util/Pair<Ledu/stanford/nlp/ling/tokensregex/Env;Ljava/lang/String;>;TK;>;)V", "add", "LNSObject;LEduStanfordNlpLingTokensregexNodePattern;", "(TK;Ledu/stanford/nlp/ling/tokensregex/NodePattern;)V", "match", "LNSObject;", "(TM;)Z", "matchWithResult", "(TM;)Ljava/lang/Object;", "LNSObject;LJavaUtilMap;", "(TM;Ljava/util/Map<TK;Ljava/lang/Object;>;)Z", "toString", "Ljava/util/List<Ledu/stanford/nlp/util/Pair<TK;Ledu/stanford/nlp/ling/tokensregex/NodePattern;>;>;", "Ljava/util/function/BiFunction<TM;TK;Ljava/lang/Object;>;", &EduStanfordNlpLingTokensregexComplexNodePattern_LITERAL_PATTERN, "LEduStanfordNlpLingTokensregexComplexNodePattern_NilAnnotationPattern;LEduStanfordNlpLingTokensregexComplexNodePattern_NotNilAnnotationPattern;LEduStanfordNlpLingTokensregexComplexNodePattern_SequenceRegexPattern;LEduStanfordNlpLingTokensregexComplexNodePattern_StringAnnotationRegexPattern;LEduStanfordNlpLingTokensregexComplexNodePattern_AbstractStringAnnotationPattern;LEduStanfordNlpLingTokensregexComplexNodePattern_StringAnnotationPattern;LEduStanfordNlpLingTokensregexComplexNodePattern_StringInSetAnnotationPattern;LEduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern;LEduStanfordNlpLingTokensregexComplexNodePattern_AttributesEqualMatchChecker;LEduStanfordNlpLingTokensregexComplexNodePattern_IntegerAnnotationPattern;", "<M:Ljava/lang/Object;K:Ljava/lang/Object;>Ledu/stanford/nlp/ling/tokensregex/NodePattern<TM;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexComplexNodePattern = { "ComplexNodePattern", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, fields, 7, 0x1, 12, 3, -1, 30, -1, 31, -1 };
  return &_EduStanfordNlpLingTokensregexComplexNodePattern;
}

+ (void)initialize {
  if (self == [EduStanfordNlpLingTokensregexComplexNodePattern class]) {
    EduStanfordNlpLingTokensregexComplexNodePattern_LITERAL_PATTERN = JavaUtilRegexPattern_compileWithNSString_(@"[A-Za-z0-9_\\-']*");
    J2OBJC_SET_INITIALIZED(EduStanfordNlpLingTokensregexComplexNodePattern)
  }
}

@end

void EduStanfordNlpLingTokensregexComplexNodePattern_initWithJavaUtilFunctionBiFunction_withJavaUtilList_(EduStanfordNlpLingTokensregexComplexNodePattern *self, id<JavaUtilFunctionBiFunction> getter, id<JavaUtilList> annotationPatterns) {
  EduStanfordNlpLingTokensregexNodePattern_init(self);
  self->annotationPatterns_ = annotationPatterns;
  self->getter_ = getter;
}

EduStanfordNlpLingTokensregexComplexNodePattern *new_EduStanfordNlpLingTokensregexComplexNodePattern_initWithJavaUtilFunctionBiFunction_withJavaUtilList_(id<JavaUtilFunctionBiFunction> getter, id<JavaUtilList> annotationPatterns) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexComplexNodePattern, initWithJavaUtilFunctionBiFunction_withJavaUtilList_, getter, annotationPatterns)
}

EduStanfordNlpLingTokensregexComplexNodePattern *create_EduStanfordNlpLingTokensregexComplexNodePattern_initWithJavaUtilFunctionBiFunction_withJavaUtilList_(id<JavaUtilFunctionBiFunction> getter, id<JavaUtilList> annotationPatterns) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexComplexNodePattern, initWithJavaUtilFunctionBiFunction_withJavaUtilList_, getter, annotationPatterns)
}

void EduStanfordNlpLingTokensregexComplexNodePattern_initWithJavaUtilFunctionBiFunction_withEduStanfordNlpUtilPairArray_(EduStanfordNlpLingTokensregexComplexNodePattern *self, id<JavaUtilFunctionBiFunction> getter, IOSObjectArray *annotationPatterns) {
  EduStanfordNlpLingTokensregexNodePattern_init(self);
  self->annotationPatterns_ = JavaUtilArrays_asListWithNSObjectArray_(annotationPatterns);
  self->getter_ = getter;
}

EduStanfordNlpLingTokensregexComplexNodePattern *new_EduStanfordNlpLingTokensregexComplexNodePattern_initWithJavaUtilFunctionBiFunction_withEduStanfordNlpUtilPairArray_(id<JavaUtilFunctionBiFunction> getter, IOSObjectArray *annotationPatterns) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexComplexNodePattern, initWithJavaUtilFunctionBiFunction_withEduStanfordNlpUtilPairArray_, getter, annotationPatterns)
}

EduStanfordNlpLingTokensregexComplexNodePattern *create_EduStanfordNlpLingTokensregexComplexNodePattern_initWithJavaUtilFunctionBiFunction_withEduStanfordNlpUtilPairArray_(id<JavaUtilFunctionBiFunction> getter, IOSObjectArray *annotationPatterns) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexComplexNodePattern, initWithJavaUtilFunctionBiFunction_withEduStanfordNlpUtilPairArray_, getter, annotationPatterns)
}

void EduStanfordNlpLingTokensregexComplexNodePattern_initWithJavaUtilFunctionBiFunction_withId_withEduStanfordNlpLingTokensregexNodePattern_(EduStanfordNlpLingTokensregexComplexNodePattern *self, id<JavaUtilFunctionBiFunction> getter, id key, EduStanfordNlpLingTokensregexNodePattern *pattern) {
  EduStanfordNlpLingTokensregexComplexNodePattern_initWithJavaUtilFunctionBiFunction_withEduStanfordNlpUtilPairArray_(self, getter, [IOSObjectArray newArrayWithObjects:(id[]){ EduStanfordNlpUtilPair_makePairWithId_withId_(key, pattern) } count:1 type:EduStanfordNlpUtilPair_class_()]);
}

EduStanfordNlpLingTokensregexComplexNodePattern *new_EduStanfordNlpLingTokensregexComplexNodePattern_initWithJavaUtilFunctionBiFunction_withId_withEduStanfordNlpLingTokensregexNodePattern_(id<JavaUtilFunctionBiFunction> getter, id key, EduStanfordNlpLingTokensregexNodePattern *pattern) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexComplexNodePattern, initWithJavaUtilFunctionBiFunction_withId_withEduStanfordNlpLingTokensregexNodePattern_, getter, key, pattern)
}

EduStanfordNlpLingTokensregexComplexNodePattern *create_EduStanfordNlpLingTokensregexComplexNodePattern_initWithJavaUtilFunctionBiFunction_withId_withEduStanfordNlpLingTokensregexNodePattern_(id<JavaUtilFunctionBiFunction> getter, id key, EduStanfordNlpLingTokensregexNodePattern *pattern) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexComplexNodePattern, initWithJavaUtilFunctionBiFunction_withId_withEduStanfordNlpLingTokensregexNodePattern_, getter, key, pattern)
}

EduStanfordNlpLingTokensregexNodePattern *EduStanfordNlpLingTokensregexComplexNodePattern_newStringRegexPatternWithNSString_withInt_(NSString *regex, jint flags) {
  EduStanfordNlpLingTokensregexComplexNodePattern_initialize();
  jboolean isLiteral = ((flags & JavaUtilRegexPattern_LITERAL) != 0) || [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(EduStanfordNlpLingTokensregexComplexNodePattern_LITERAL_PATTERN)) matcherWithJavaLangCharSequence:regex])) matches];
  if (isLiteral) {
    jboolean caseInsensitive = (flags & JavaUtilRegexPattern_CASE_INSENSITIVE) != 0;
    jint stringMatchFlags = (caseInsensitive) ? EduStanfordNlpLingTokensregexNodePattern_CASE_INSENSITIVE : 0;
    return new_EduStanfordNlpLingTokensregexComplexNodePattern_StringAnnotationPattern_initWithNSString_withInt_(regex, stringMatchFlags);
  }
  else {
    return new_EduStanfordNlpLingTokensregexComplexNodePattern_StringAnnotationRegexPattern_initWithNSString_withInt_(regex, flags);
  }
}

EduStanfordNlpLingTokensregexComplexNodePattern *EduStanfordNlpLingTokensregexComplexNodePattern_valueOfWithEduStanfordNlpLingTokensregexEnv_withJavaUtilMap_withJavaUtilFunctionBiFunction_withJavaUtilFunctionFunction_(EduStanfordNlpLingTokensregexEnv *env, id<JavaUtilMap> attributes, id<JavaUtilFunctionBiFunction> getter, id<JavaUtilFunctionFunction> getKey) {
  EduStanfordNlpLingTokensregexComplexNodePattern_initialize();
  EduStanfordNlpLingTokensregexComplexNodePattern *p = new_EduStanfordNlpLingTokensregexComplexNodePattern_initWithJavaUtilFunctionBiFunction_withJavaUtilList_(getter, new_JavaUtilArrayList_initWithInt_([((id<JavaUtilMap>) nil_chk(attributes)) size]));
  [p populateWithEduStanfordNlpLingTokensregexEnv:env withJavaUtilMap:attributes withJavaUtilFunctionFunction:getKey];
  return p;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexComplexNodePattern)

@implementation EduStanfordNlpLingTokensregexComplexNodePattern_NilAnnotationPattern

- (jboolean)matchWithId:(id)obj {
  return obj == nil;
}

- (NSString *)description {
  return @"::IS_NIL";
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpLingTokensregexComplexNodePattern_NilAnnotationPattern_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(matchWithId:);
  methods[1].selector = @selector(description);
  methods[2].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "match", "LNSObject;", "(Ljava/lang/Object;)Z", "toString", "LEduStanfordNlpLingTokensregexComplexNodePattern;", "Ledu/stanford/nlp/ling/tokensregex/NodePattern<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexComplexNodePattern_NilAnnotationPattern = { "NilAnnotationPattern", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, NULL, 7, 0x9, 3, 0, 4, -1, -1, 5, -1 };
  return &_EduStanfordNlpLingTokensregexComplexNodePattern_NilAnnotationPattern;
}

@end

void EduStanfordNlpLingTokensregexComplexNodePattern_NilAnnotationPattern_init(EduStanfordNlpLingTokensregexComplexNodePattern_NilAnnotationPattern *self) {
  EduStanfordNlpLingTokensregexNodePattern_init(self);
}

EduStanfordNlpLingTokensregexComplexNodePattern_NilAnnotationPattern *new_EduStanfordNlpLingTokensregexComplexNodePattern_NilAnnotationPattern_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexComplexNodePattern_NilAnnotationPattern, init)
}

EduStanfordNlpLingTokensregexComplexNodePattern_NilAnnotationPattern *create_EduStanfordNlpLingTokensregexComplexNodePattern_NilAnnotationPattern_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexComplexNodePattern_NilAnnotationPattern, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexComplexNodePattern_NilAnnotationPattern)

@implementation EduStanfordNlpLingTokensregexComplexNodePattern_NotNilAnnotationPattern

- (jboolean)matchWithId:(id)obj {
  return obj != nil;
}

- (NSString *)description {
  return @"::NOT_NIL";
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpLingTokensregexComplexNodePattern_NotNilAnnotationPattern_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(matchWithId:);
  methods[1].selector = @selector(description);
  methods[2].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "match", "LNSObject;", "(Ljava/lang/Object;)Z", "toString", "LEduStanfordNlpLingTokensregexComplexNodePattern;", "Ledu/stanford/nlp/ling/tokensregex/NodePattern<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexComplexNodePattern_NotNilAnnotationPattern = { "NotNilAnnotationPattern", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, NULL, 7, 0x9, 3, 0, 4, -1, -1, 5, -1 };
  return &_EduStanfordNlpLingTokensregexComplexNodePattern_NotNilAnnotationPattern;
}

@end

void EduStanfordNlpLingTokensregexComplexNodePattern_NotNilAnnotationPattern_init(EduStanfordNlpLingTokensregexComplexNodePattern_NotNilAnnotationPattern *self) {
  EduStanfordNlpLingTokensregexNodePattern_init(self);
}

EduStanfordNlpLingTokensregexComplexNodePattern_NotNilAnnotationPattern *new_EduStanfordNlpLingTokensregexComplexNodePattern_NotNilAnnotationPattern_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexComplexNodePattern_NotNilAnnotationPattern, init)
}

EduStanfordNlpLingTokensregexComplexNodePattern_NotNilAnnotationPattern *create_EduStanfordNlpLingTokensregexComplexNodePattern_NotNilAnnotationPattern_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexComplexNodePattern_NotNilAnnotationPattern, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexComplexNodePattern_NotNilAnnotationPattern)

@implementation EduStanfordNlpLingTokensregexComplexNodePattern_SequenceRegexPattern

- (instancetype)initWithEduStanfordNlpLingTokensregexSequencePattern:(EduStanfordNlpLingTokensregexSequencePattern *)pattern {
  EduStanfordNlpLingTokensregexComplexNodePattern_SequenceRegexPattern_initWithEduStanfordNlpLingTokensregexSequencePattern_(self, pattern);
  return self;
}

- (EduStanfordNlpLingTokensregexSequencePattern *)getPattern {
  return pattern_;
}

- (EduStanfordNlpLingTokensregexSequenceMatcher *)matcherWithJavaUtilList:(id<JavaUtilList>)list {
  return [((EduStanfordNlpLingTokensregexSequencePattern *) nil_chk(pattern_)) getMatcherWithJavaUtilList:list];
}

- (jboolean)matchWithId:(id<JavaUtilList>)list {
  return [((EduStanfordNlpLingTokensregexSequenceMatcher *) nil_chk([((EduStanfordNlpLingTokensregexSequencePattern *) nil_chk(pattern_)) getMatcherWithJavaUtilList:list])) matches];
}

- (id)matchWithResultWithId:(id<JavaUtilList>)list {
  EduStanfordNlpLingTokensregexSequenceMatcher *m = [((EduStanfordNlpLingTokensregexSequencePattern *) nil_chk(pattern_)) getMatcherWithJavaUtilList:list];
  if ([((EduStanfordNlpLingTokensregexSequenceMatcher *) nil_chk(m)) matches]) {
    return [m toBasicSequenceMatchResult];
  }
  else {
    return nil;
  }
}

- (NSString *)description {
  return JreStrcat("C$", ':', [((EduStanfordNlpLingTokensregexSequencePattern *) nil_chk(pattern_)) description]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexSequencePattern;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexSequenceMatcher;", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "Z", 0x1, 6, 4, -1, 7, -1, -1 },
    { NULL, "LNSObject;", 0x1, 8, 4, -1, 9, -1, -1 },
    { NULL, "LNSString;", 0x1, 10, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpLingTokensregexSequencePattern:);
  methods[1].selector = @selector(getPattern);
  methods[2].selector = @selector(matcherWithJavaUtilList:);
  methods[3].selector = @selector(matchWithId:);
  methods[4].selector = @selector(matchWithResultWithId:);
  methods[5].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "pattern_", "LEduStanfordNlpLingTokensregexSequencePattern;", .constantValue.asLong = 0, 0x0, -1, -1, 11, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpLingTokensregexSequencePattern;", "(Ledu/stanford/nlp/ling/tokensregex/SequencePattern<TT;>;)V", "()Ledu/stanford/nlp/ling/tokensregex/SequencePattern<TT;>;", "matcher", "LJavaUtilList;", "(Ljava/util/List<TT;>;)Ledu/stanford/nlp/ling/tokensregex/SequenceMatcher<TT;>;", "match", "(Ljava/util/List<TT;>;)Z", "matchWithResult", "(Ljava/util/List<TT;>;)Ljava/lang/Object;", "toString", "Ledu/stanford/nlp/ling/tokensregex/SequencePattern<TT;>;", "LEduStanfordNlpLingTokensregexComplexNodePattern;", "<T:Ljava/lang/Object;>Ledu/stanford/nlp/ling/tokensregex/NodePattern<Ljava/util/List<TT;>;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexComplexNodePattern_SequenceRegexPattern = { "SequenceRegexPattern", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, fields, 7, 0x9, 6, 1, 12, -1, -1, 13, -1 };
  return &_EduStanfordNlpLingTokensregexComplexNodePattern_SequenceRegexPattern;
}

@end

void EduStanfordNlpLingTokensregexComplexNodePattern_SequenceRegexPattern_initWithEduStanfordNlpLingTokensregexSequencePattern_(EduStanfordNlpLingTokensregexComplexNodePattern_SequenceRegexPattern *self, EduStanfordNlpLingTokensregexSequencePattern *pattern) {
  EduStanfordNlpLingTokensregexNodePattern_init(self);
  self->pattern_ = pattern;
}

EduStanfordNlpLingTokensregexComplexNodePattern_SequenceRegexPattern *new_EduStanfordNlpLingTokensregexComplexNodePattern_SequenceRegexPattern_initWithEduStanfordNlpLingTokensregexSequencePattern_(EduStanfordNlpLingTokensregexSequencePattern *pattern) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexComplexNodePattern_SequenceRegexPattern, initWithEduStanfordNlpLingTokensregexSequencePattern_, pattern)
}

EduStanfordNlpLingTokensregexComplexNodePattern_SequenceRegexPattern *create_EduStanfordNlpLingTokensregexComplexNodePattern_SequenceRegexPattern_initWithEduStanfordNlpLingTokensregexSequencePattern_(EduStanfordNlpLingTokensregexSequencePattern *pattern) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexComplexNodePattern_SequenceRegexPattern, initWithEduStanfordNlpLingTokensregexSequencePattern_, pattern)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexComplexNodePattern_SequenceRegexPattern)

@implementation EduStanfordNlpLingTokensregexComplexNodePattern_StringAnnotationRegexPattern

- (instancetype)initWithJavaUtilRegexPattern:(JavaUtilRegexPattern *)pattern {
  EduStanfordNlpLingTokensregexComplexNodePattern_StringAnnotationRegexPattern_initWithJavaUtilRegexPattern_(self, pattern);
  return self;
}

- (instancetype)initWithNSString:(NSString *)regex
                         withInt:(jint)flags {
  EduStanfordNlpLingTokensregexComplexNodePattern_StringAnnotationRegexPattern_initWithNSString_withInt_(self, regex, flags);
  return self;
}

- (JavaUtilRegexPattern *)getPattern {
  return pattern_;
}

- (JavaUtilRegexMatcher *)matcherWithNSString:(NSString *)str {
  return [((JavaUtilRegexPattern *) nil_chk(pattern_)) matcherWithJavaLangCharSequence:str];
}

- (jboolean)matchWithId:(NSString *)str {
  if (str == nil) {
    return false;
  }
  else {
    return [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(pattern_)) matcherWithJavaLangCharSequence:str])) matches];
  }
}

- (id)matchWithResultWithId:(NSString *)str {
  if (str == nil) return nil;
  JavaUtilRegexMatcher *m = [((JavaUtilRegexPattern *) nil_chk(pattern_)) matcherWithJavaLangCharSequence:str];
  if ([((JavaUtilRegexMatcher *) nil_chk(m)) matches]) {
    return [m toMatchResult];
  }
  else {
    return nil;
  }
}

- (NSString *)description {
  return JreStrcat("$$C", @":/", [((JavaUtilRegexPattern *) nil_chk(pattern_)) pattern], '/');
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilRegexPattern;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilRegexMatcher;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 3, -1, 5, -1, -1 },
    { NULL, "LNSObject;", 0x1, 6, 3, -1, 7, -1, -1 },
    { NULL, "LNSString;", 0x1, 8, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilRegexPattern:);
  methods[1].selector = @selector(initWithNSString:withInt:);
  methods[2].selector = @selector(getPattern);
  methods[3].selector = @selector(matcherWithNSString:);
  methods[4].selector = @selector(matchWithId:);
  methods[5].selector = @selector(matchWithResultWithId:);
  methods[6].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "pattern_", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilRegexPattern;", "LNSString;I", "matcher", "LNSString;", "match", "(Ljava/lang/String;)Z", "matchWithResult", "(Ljava/lang/String;)Ljava/lang/Object;", "toString", "LEduStanfordNlpLingTokensregexComplexNodePattern;", "Ledu/stanford/nlp/ling/tokensregex/NodePattern<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexComplexNodePattern_StringAnnotationRegexPattern = { "StringAnnotationRegexPattern", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, fields, 7, 0x9, 7, 1, 9, -1, -1, 10, -1 };
  return &_EduStanfordNlpLingTokensregexComplexNodePattern_StringAnnotationRegexPattern;
}

@end

void EduStanfordNlpLingTokensregexComplexNodePattern_StringAnnotationRegexPattern_initWithJavaUtilRegexPattern_(EduStanfordNlpLingTokensregexComplexNodePattern_StringAnnotationRegexPattern *self, JavaUtilRegexPattern *pattern) {
  EduStanfordNlpLingTokensregexNodePattern_init(self);
  self->pattern_ = pattern;
}

EduStanfordNlpLingTokensregexComplexNodePattern_StringAnnotationRegexPattern *new_EduStanfordNlpLingTokensregexComplexNodePattern_StringAnnotationRegexPattern_initWithJavaUtilRegexPattern_(JavaUtilRegexPattern *pattern) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexComplexNodePattern_StringAnnotationRegexPattern, initWithJavaUtilRegexPattern_, pattern)
}

EduStanfordNlpLingTokensregexComplexNodePattern_StringAnnotationRegexPattern *create_EduStanfordNlpLingTokensregexComplexNodePattern_StringAnnotationRegexPattern_initWithJavaUtilRegexPattern_(JavaUtilRegexPattern *pattern) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexComplexNodePattern_StringAnnotationRegexPattern, initWithJavaUtilRegexPattern_, pattern)
}

void EduStanfordNlpLingTokensregexComplexNodePattern_StringAnnotationRegexPattern_initWithNSString_withInt_(EduStanfordNlpLingTokensregexComplexNodePattern_StringAnnotationRegexPattern *self, NSString *regex, jint flags) {
  EduStanfordNlpLingTokensregexNodePattern_init(self);
  self->pattern_ = JavaUtilRegexPattern_compileWithNSString_withInt_(regex, flags);
}

EduStanfordNlpLingTokensregexComplexNodePattern_StringAnnotationRegexPattern *new_EduStanfordNlpLingTokensregexComplexNodePattern_StringAnnotationRegexPattern_initWithNSString_withInt_(NSString *regex, jint flags) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexComplexNodePattern_StringAnnotationRegexPattern, initWithNSString_withInt_, regex, flags)
}

EduStanfordNlpLingTokensregexComplexNodePattern_StringAnnotationRegexPattern *create_EduStanfordNlpLingTokensregexComplexNodePattern_StringAnnotationRegexPattern_initWithNSString_withInt_(NSString *regex, jint flags) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexComplexNodePattern_StringAnnotationRegexPattern, initWithNSString_withInt_, regex, flags)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexComplexNodePattern_StringAnnotationRegexPattern)

@implementation EduStanfordNlpLingTokensregexComplexNodePattern_AbstractStringAnnotationPattern

- (jboolean)ignoreCase {
  return (flags_ & EduStanfordNlpLingTokensregexNodePattern_CASE_INSENSITIVE) != 0;
}

- (jboolean)normalize {
  return (flags_ & EduStanfordNlpLingTokensregexNodePattern_NORMALIZE) != 0;
}

- (NSString *)getNormalizedWithNSString:(NSString *)str {
  if ([self normalize]) {
    str = EduStanfordNlpUtilStringUtils_normalizeWithNSString_(str);
  }
  if ([self ignoreCase]) {
    str = [((NSString *) nil_chk(str)) lowercaseString];
  }
  return str;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpLingTokensregexComplexNodePattern_AbstractStringAnnotationPattern_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(ignoreCase);
  methods[1].selector = @selector(normalize);
  methods[2].selector = @selector(getNormalizedWithNSString:);
  methods[3].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "flags_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "getNormalized", "LNSString;", "LEduStanfordNlpLingTokensregexComplexNodePattern;", "Ledu/stanford/nlp/ling/tokensregex/NodePattern<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexComplexNodePattern_AbstractStringAnnotationPattern = { "AbstractStringAnnotationPattern", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, fields, 7, 0x409, 4, 1, 2, -1, -1, 3, -1 };
  return &_EduStanfordNlpLingTokensregexComplexNodePattern_AbstractStringAnnotationPattern;
}

@end

void EduStanfordNlpLingTokensregexComplexNodePattern_AbstractStringAnnotationPattern_init(EduStanfordNlpLingTokensregexComplexNodePattern_AbstractStringAnnotationPattern *self) {
  EduStanfordNlpLingTokensregexNodePattern_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexComplexNodePattern_AbstractStringAnnotationPattern)

@implementation EduStanfordNlpLingTokensregexComplexNodePattern_StringAnnotationPattern

- (instancetype)initWithNSString:(NSString *)str
                         withInt:(jint)flags {
  EduStanfordNlpLingTokensregexComplexNodePattern_StringAnnotationPattern_initWithNSString_withInt_(self, str, flags);
  return self;
}

- (instancetype)initWithNSString:(NSString *)str {
  EduStanfordNlpLingTokensregexComplexNodePattern_StringAnnotationPattern_initWithNSString_(self, str);
  return self;
}

- (NSString *)getString {
  return target_;
}

- (jboolean)matchWithId:(NSString *)str {
  if ([self normalize]) {
    str = [self getNormalizedWithNSString:str];
  }
  if ([self ignoreCase]) {
    return [((NSString *) nil_chk(target_)) equalsIgnoreCase:str];
  }
  else {
    return [((NSString *) nil_chk(target_)) isEqual:str];
  }
}

- (NSString *)description {
  return JreStrcat("C$", ':', target_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withInt:);
  methods[1].selector = @selector(initWithNSString:);
  methods[2].selector = @selector(getString);
  methods[3].selector = @selector(matchWithId:);
  methods[4].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "target_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;I", "LNSString;", "match", "toString", "LEduStanfordNlpLingTokensregexComplexNodePattern;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexComplexNodePattern_StringAnnotationPattern = { "StringAnnotationPattern", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, fields, 7, 0x9, 5, 1, 4, -1, -1, -1, -1 };
  return &_EduStanfordNlpLingTokensregexComplexNodePattern_StringAnnotationPattern;
}

@end

void EduStanfordNlpLingTokensregexComplexNodePattern_StringAnnotationPattern_initWithNSString_withInt_(EduStanfordNlpLingTokensregexComplexNodePattern_StringAnnotationPattern *self, NSString *str, jint flags) {
  EduStanfordNlpLingTokensregexComplexNodePattern_AbstractStringAnnotationPattern_init(self);
  self->target_ = str;
  self->flags_ = flags;
}

EduStanfordNlpLingTokensregexComplexNodePattern_StringAnnotationPattern *new_EduStanfordNlpLingTokensregexComplexNodePattern_StringAnnotationPattern_initWithNSString_withInt_(NSString *str, jint flags) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexComplexNodePattern_StringAnnotationPattern, initWithNSString_withInt_, str, flags)
}

EduStanfordNlpLingTokensregexComplexNodePattern_StringAnnotationPattern *create_EduStanfordNlpLingTokensregexComplexNodePattern_StringAnnotationPattern_initWithNSString_withInt_(NSString *str, jint flags) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexComplexNodePattern_StringAnnotationPattern, initWithNSString_withInt_, str, flags)
}

void EduStanfordNlpLingTokensregexComplexNodePattern_StringAnnotationPattern_initWithNSString_(EduStanfordNlpLingTokensregexComplexNodePattern_StringAnnotationPattern *self, NSString *str) {
  EduStanfordNlpLingTokensregexComplexNodePattern_AbstractStringAnnotationPattern_init(self);
  self->target_ = str;
}

EduStanfordNlpLingTokensregexComplexNodePattern_StringAnnotationPattern *new_EduStanfordNlpLingTokensregexComplexNodePattern_StringAnnotationPattern_initWithNSString_(NSString *str) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexComplexNodePattern_StringAnnotationPattern, initWithNSString_, str)
}

EduStanfordNlpLingTokensregexComplexNodePattern_StringAnnotationPattern *create_EduStanfordNlpLingTokensregexComplexNodePattern_StringAnnotationPattern_initWithNSString_(NSString *str) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexComplexNodePattern_StringAnnotationPattern, initWithNSString_, str)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexComplexNodePattern_StringAnnotationPattern)

@implementation EduStanfordNlpLingTokensregexComplexNodePattern_StringInSetAnnotationPattern

- (instancetype)initWithJavaUtilSet:(id<JavaUtilSet>)targets
                            withInt:(jint)flags {
  EduStanfordNlpLingTokensregexComplexNodePattern_StringInSetAnnotationPattern_initWithJavaUtilSet_withInt_(self, targets, flags);
  return self;
}

- (instancetype)initWithJavaUtilSet:(id<JavaUtilSet>)targets {
  EduStanfordNlpLingTokensregexComplexNodePattern_StringInSetAnnotationPattern_initWithJavaUtilSet_(self, targets);
  return self;
}

- (id<JavaUtilSet>)getTargets {
  return targets_;
}

- (jboolean)matchWithId:(NSString *)str {
  return [((id<JavaUtilSet>) nil_chk(targets_)) containsWithId:[self getNormalizedWithNSString:str]];
}

- (NSString *)description {
  return JreStrcat("C@", ':', targets_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, 3, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 4, -1, -1 },
    { NULL, "Z", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 7, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilSet:withInt:);
  methods[1].selector = @selector(initWithJavaUtilSet:);
  methods[2].selector = @selector(getTargets);
  methods[3].selector = @selector(matchWithId:);
  methods[4].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "targets_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x0, -1, -1, 8, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilSet;I", "(Ljava/util/Set<Ljava/lang/String;>;I)V", "LJavaUtilSet;", "(Ljava/util/Set<Ljava/lang/String;>;)V", "()Ljava/util/Set<Ljava/lang/String;>;", "match", "LNSString;", "toString", "Ljava/util/Set<Ljava/lang/String;>;", "LEduStanfordNlpLingTokensregexComplexNodePattern;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexComplexNodePattern_StringInSetAnnotationPattern = { "StringInSetAnnotationPattern", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, fields, 7, 0x9, 5, 1, 9, -1, -1, -1, -1 };
  return &_EduStanfordNlpLingTokensregexComplexNodePattern_StringInSetAnnotationPattern;
}

@end

void EduStanfordNlpLingTokensregexComplexNodePattern_StringInSetAnnotationPattern_initWithJavaUtilSet_withInt_(EduStanfordNlpLingTokensregexComplexNodePattern_StringInSetAnnotationPattern *self, id<JavaUtilSet> targets, jint flags) {
  EduStanfordNlpLingTokensregexComplexNodePattern_AbstractStringAnnotationPattern_init(self);
  self->flags_ = flags;
  self->targets_ = new_JavaUtilHashSet_initWithInt_([((id<JavaUtilSet>) nil_chk(targets)) size]);
  for (NSString * __strong target in targets) {
    [((id<JavaUtilSet>) nil_chk(self->targets_)) addWithId:[self getNormalizedWithNSString:target]];
  }
}

EduStanfordNlpLingTokensregexComplexNodePattern_StringInSetAnnotationPattern *new_EduStanfordNlpLingTokensregexComplexNodePattern_StringInSetAnnotationPattern_initWithJavaUtilSet_withInt_(id<JavaUtilSet> targets, jint flags) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexComplexNodePattern_StringInSetAnnotationPattern, initWithJavaUtilSet_withInt_, targets, flags)
}

EduStanfordNlpLingTokensregexComplexNodePattern_StringInSetAnnotationPattern *create_EduStanfordNlpLingTokensregexComplexNodePattern_StringInSetAnnotationPattern_initWithJavaUtilSet_withInt_(id<JavaUtilSet> targets, jint flags) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexComplexNodePattern_StringInSetAnnotationPattern, initWithJavaUtilSet_withInt_, targets, flags)
}

void EduStanfordNlpLingTokensregexComplexNodePattern_StringInSetAnnotationPattern_initWithJavaUtilSet_(EduStanfordNlpLingTokensregexComplexNodePattern_StringInSetAnnotationPattern *self, id<JavaUtilSet> targets) {
  EduStanfordNlpLingTokensregexComplexNodePattern_StringInSetAnnotationPattern_initWithJavaUtilSet_withInt_(self, targets, 0);
}

EduStanfordNlpLingTokensregexComplexNodePattern_StringInSetAnnotationPattern *new_EduStanfordNlpLingTokensregexComplexNodePattern_StringInSetAnnotationPattern_initWithJavaUtilSet_(id<JavaUtilSet> targets) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexComplexNodePattern_StringInSetAnnotationPattern, initWithJavaUtilSet_, targets)
}

EduStanfordNlpLingTokensregexComplexNodePattern_StringInSetAnnotationPattern *create_EduStanfordNlpLingTokensregexComplexNodePattern_StringInSetAnnotationPattern_initWithJavaUtilSet_(id<JavaUtilSet> targets) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexComplexNodePattern_StringInSetAnnotationPattern, initWithJavaUtilSet_, targets)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexComplexNodePattern_StringInSetAnnotationPattern)

@implementation EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern

- (instancetype)initWithDouble:(jdouble)value
withEduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType:(EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType *)cmpType {
  EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_initWithDouble_withEduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_(self, value, cmpType);
  return self;
}

- (jboolean)matchWithId:(id)node {
  if ([node isKindOfClass:[NSString class]]) {
    return [self matchWithNSString:(NSString *) cast_chk(node, [NSString class])];
  }
  else if ([node isKindOfClass:[NSNumber class]]) {
    return [self matchWithNSNumber:(NSNumber *) cast_chk(node, [NSNumber class])];
  }
  else {
    return false;
  }
}

- (jboolean)matchWithNSNumber:(NSNumber *)number {
  if (number != nil) {
    return [((EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType *) nil_chk(cmpType_)) acceptWithDouble:[number doubleValue] withDouble:value_];
  }
  else {
    return false;
  }
}

- (jboolean)matchWithNSString:(NSString *)str {
  if (str != nil) {
    @try {
      jdouble v = JavaLangDouble_parseDoubleWithNSString_(str);
      return [((EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType *) nil_chk(cmpType_)) acceptWithDouble:v withDouble:value_];
    }
    @catch (JavaLangNumberFormatException *ex) {
    }
  }
  return false;
}

- (NSString *)description {
  return JreStrcat("C@CD", ' ', cmpType_, ' ', value_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, 3, -1, -1 },
    { NULL, "Z", 0x1, 1, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 5, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 6, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithDouble:withEduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType:);
  methods[1].selector = @selector(matchWithId:);
  methods[2].selector = @selector(matchWithNSNumber:);
  methods[3].selector = @selector(matchWithNSString:);
  methods[4].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "cmpType_", "LEduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "value_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "DLEduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType;", "match", "LNSObject;", "(Ljava/lang/Object;)Z", "LNSNumber;", "LNSString;", "toString", "LEduStanfordNlpLingTokensregexComplexNodePattern;", "LEduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType;", "Ledu/stanford/nlp/ling/tokensregex/NodePattern<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern = { "NumericAnnotationPattern", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, fields, 7, 0x9, 5, 2, 7, 8, -1, 9, -1 };
  return &_EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern;
}

@end

void EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_initWithDouble_withEduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_(EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern *self, jdouble value, EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType *cmpType) {
  EduStanfordNlpLingTokensregexNodePattern_init(self);
  self->value_ = value;
  self->cmpType_ = cmpType;
}

EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern *new_EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_initWithDouble_withEduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_(jdouble value, EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType *cmpType) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern, initWithDouble_withEduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_, value, cmpType)
}

EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern *create_EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_initWithDouble_withEduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_(jdouble value, EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType *cmpType) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern, initWithDouble_withEduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_, value, cmpType)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern)

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType)

EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType *EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_values_[7];

@implementation EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType

- (jboolean)acceptWithDouble:(jdouble)v1
                  withDouble:(jdouble)v2 {
  return false;
}

+ (IOSObjectArray *)values {
  return EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_values();
}

+ (EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType *)valueOfWithNSString:(NSString *)name {
  return EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_valueOfWithNSString_(name);
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x0, 0, 1, -1, -1, -1, -1 },
    { NULL, "[LEduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType;", 0x9, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(acceptWithDouble:withDouble:);
  methods[1].selector = @selector(values);
  methods[2].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "IS_NUM", "LEduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "EQ", "LEduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
    { "NE", "LEduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType;", .constantValue.asLong = 0, 0x4019, -1, 6, -1, -1 },
    { "GT", "LEduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType;", .constantValue.asLong = 0, 0x4019, -1, 7, -1, -1 },
    { "GE", "LEduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType;", .constantValue.asLong = 0, 0x4019, -1, 8, -1, -1 },
    { "LT", "LEduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType;", .constantValue.asLong = 0, 0x4019, -1, 9, -1, -1 },
    { "LE", "LEduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType;", .constantValue.asLong = 0, 0x4019, -1, 10, -1, -1 },
  };
  static const void *ptrTable[] = { "accept", "DD", "valueOf", "LNSString;", &JreEnum(EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType, IS_NUM), &JreEnum(EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType, EQ), &JreEnum(EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType, NE), &JreEnum(EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType, GT), &JreEnum(EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType, GE), &JreEnum(EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType, LT), &JreEnum(EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType, LE), "LEduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern;", "Ljava/lang/Enum<Ledu/stanford/nlp/ling/tokensregex/ComplexNodePattern$NumericAnnotationPattern$CmpType;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType = { "CmpType", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, fields, 7, 0x4008, 3, 7, 11, -1, -1, 12, -1 };
  return &_EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType;
}

+ (void)initialize {
  if (self == [EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType class]) {
    JreEnum(EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType, IS_NUM) = new_EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$1_initWithNSString_withInt_(@"IS_NUM", 0);
    JreEnum(EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType, EQ) = new_EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$2_initWithNSString_withInt_(@"EQ", 1);
    JreEnum(EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType, NE) = new_EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$3_initWithNSString_withInt_(@"NE", 2);
    JreEnum(EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType, GT) = new_EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$4_initWithNSString_withInt_(@"GT", 3);
    JreEnum(EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType, GE) = new_EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$5_initWithNSString_withInt_(@"GE", 4);
    JreEnum(EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType, LT) = new_EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$6_initWithNSString_withInt_(@"LT", 5);
    JreEnum(EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType, LE) = new_EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$7_initWithNSString_withInt_(@"LE", 6);
    J2OBJC_SET_INITIALIZED(EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType)
  }
}

@end

void EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_initWithNSString_withInt_(EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType *new_EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType, initWithNSString_withInt_, __name, __ordinal)
}

IOSObjectArray *EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_values() {
  EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_initialize();
  return [IOSObjectArray arrayWithObjects:EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_values_ count:7 type:EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_class_()];
}

EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType *EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_valueOfWithNSString_(NSString *name) {
  EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_initialize();
  for (int i = 0; i < 7; i++) {
    EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType *e = EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType *EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_fromOrdinal(NSUInteger ordinal) {
  EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_initialize();
  if (ordinal >= 7) {
    return nil;
  }
  return EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType)

@implementation EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$1

- (jboolean)acceptWithDouble:(jdouble)v1
                  withDouble:(jdouble)v2 {
  return true;
}

- (void)dealloc {
  JreCheckFinalize(self, [EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$1 class]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x0, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(acceptWithDouble:withDouble:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "accept", "DD", "LEduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$1 = { "", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, NULL, 7, 0xc018, 1, 0, 2, -1, -1, -1, -1 };
  return &_EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$1;
}

@end

void EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$1_initWithNSString_withInt_(EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$1 *self, NSString *__name, jint __ordinal) {
  EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_initWithNSString_withInt_(self, __name, __ordinal);
}

EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$1 *new_EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$1_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$1, initWithNSString_withInt_, __name, __ordinal)
}

@implementation EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$2

- (jboolean)acceptWithDouble:(jdouble)v1
                  withDouble:(jdouble)v2 {
  return v1 == v2;
}

- (void)dealloc {
  JreCheckFinalize(self, [EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$2 class]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x0, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(acceptWithDouble:withDouble:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "accept", "DD", "LEduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$2 = { "", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, NULL, 7, 0xc018, 1, 0, 2, -1, -1, -1, -1 };
  return &_EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$2;
}

@end

void EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$2_initWithNSString_withInt_(EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$2 *self, NSString *__name, jint __ordinal) {
  EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_initWithNSString_withInt_(self, __name, __ordinal);
}

EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$2 *new_EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$2_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$2, initWithNSString_withInt_, __name, __ordinal)
}

@implementation EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$3

- (jboolean)acceptWithDouble:(jdouble)v1
                  withDouble:(jdouble)v2 {
  return v1 != v2;
}

- (void)dealloc {
  JreCheckFinalize(self, [EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$3 class]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x0, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(acceptWithDouble:withDouble:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "accept", "DD", "LEduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$3 = { "", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, NULL, 7, 0xc018, 1, 0, 2, -1, -1, -1, -1 };
  return &_EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$3;
}

@end

void EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$3_initWithNSString_withInt_(EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$3 *self, NSString *__name, jint __ordinal) {
  EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_initWithNSString_withInt_(self, __name, __ordinal);
}

EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$3 *new_EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$3_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$3, initWithNSString_withInt_, __name, __ordinal)
}

@implementation EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$4

- (jboolean)acceptWithDouble:(jdouble)v1
                  withDouble:(jdouble)v2 {
  return v1 > v2;
}

- (void)dealloc {
  JreCheckFinalize(self, [EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$4 class]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x0, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(acceptWithDouble:withDouble:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "accept", "DD", "LEduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$4 = { "", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, NULL, 7, 0xc018, 1, 0, 2, -1, -1, -1, -1 };
  return &_EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$4;
}

@end

void EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$4_initWithNSString_withInt_(EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$4 *self, NSString *__name, jint __ordinal) {
  EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_initWithNSString_withInt_(self, __name, __ordinal);
}

EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$4 *new_EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$4_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$4, initWithNSString_withInt_, __name, __ordinal)
}

@implementation EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$5

- (jboolean)acceptWithDouble:(jdouble)v1
                  withDouble:(jdouble)v2 {
  return v1 >= v2;
}

- (void)dealloc {
  JreCheckFinalize(self, [EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$5 class]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x0, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(acceptWithDouble:withDouble:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "accept", "DD", "LEduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$5 = { "", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, NULL, 7, 0xc018, 1, 0, 2, -1, -1, -1, -1 };
  return &_EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$5;
}

@end

void EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$5_initWithNSString_withInt_(EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$5 *self, NSString *__name, jint __ordinal) {
  EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_initWithNSString_withInt_(self, __name, __ordinal);
}

EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$5 *new_EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$5_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$5, initWithNSString_withInt_, __name, __ordinal)
}

@implementation EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$6

- (jboolean)acceptWithDouble:(jdouble)v1
                  withDouble:(jdouble)v2 {
  return v1 < v2;
}

- (void)dealloc {
  JreCheckFinalize(self, [EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$6 class]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x0, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(acceptWithDouble:withDouble:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "accept", "DD", "LEduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$6 = { "", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, NULL, 7, 0xc018, 1, 0, 2, -1, -1, -1, -1 };
  return &_EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$6;
}

@end

void EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$6_initWithNSString_withInt_(EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$6 *self, NSString *__name, jint __ordinal) {
  EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_initWithNSString_withInt_(self, __name, __ordinal);
}

EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$6 *new_EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$6_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$6, initWithNSString_withInt_, __name, __ordinal)
}

@implementation EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$7

- (jboolean)acceptWithDouble:(jdouble)v1
                  withDouble:(jdouble)v2 {
  return v1 <= v2;
}

- (void)dealloc {
  JreCheckFinalize(self, [EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$7 class]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x0, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(acceptWithDouble:withDouble:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "accept", "DD", "LEduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$7 = { "", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, NULL, 7, 0xc018, 1, 0, 2, -1, -1, -1, -1 };
  return &_EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$7;
}

@end

void EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$7_initWithNSString_withInt_(EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$7 *self, NSString *__name, jint __ordinal) {
  EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_initWithNSString_withInt_(self, __name, __ordinal);
}

EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$7 *new_EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$7_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexComplexNodePattern_NumericAnnotationPattern_CmpType_$7, initWithNSString_withInt_, __name, __ordinal)
}

@implementation EduStanfordNlpLingTokensregexComplexNodePattern_AttributesEqualMatchChecker

- (instancetype)initWithNSObjectArray:(IOSObjectArray *)keys {
  EduStanfordNlpLingTokensregexComplexNodePattern_AttributesEqualMatchChecker_initWithNSObjectArray_(self, keys);
  return self;
}

- (jboolean)matchesWithId:(id<JavaUtilMap>)o1
                   withId:(id<JavaUtilMap>)o2 {
  for (id __strong key in nil_chk(keys_)) {
    id v1 = [((id<JavaUtilMap>) nil_chk(o1)) getWithId:key];
    id v2 = [((id<JavaUtilMap>) nil_chk(o2)) getWithId:key];
    if (v1 != nil) {
      if (![v1 isEqual:v2]) {
        return false;
      }
    }
    else {
      if (v2 != nil) return false;
    }
  }
  return true;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x81, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSObjectArray:);
  methods[1].selector = @selector(matchesWithId:withId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "keys_", "LJavaUtilCollection;", .constantValue.asLong = 0, 0x0, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "[LNSObject;", "matches", "LJavaUtilMap;LJavaUtilMap;", "(Ljava/util/Map<TK;Ljava/lang/Object;>;Ljava/util/Map<TK;Ljava/lang/Object;>;)Z", "Ljava/util/Collection<TK;>;", "LEduStanfordNlpLingTokensregexComplexNodePattern;", "<K:Ljava/lang/Object;>Ljava/lang/Object;Ledu/stanford/nlp/ling/tokensregex/SequencePattern$NodesMatchChecker<Ljava/util/Map<TK;Ljava/lang/Object;>;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexComplexNodePattern_AttributesEqualMatchChecker = { "AttributesEqualMatchChecker", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, fields, 7, 0x9, 2, 1, 5, -1, -1, 6, -1 };
  return &_EduStanfordNlpLingTokensregexComplexNodePattern_AttributesEqualMatchChecker;
}

@end

void EduStanfordNlpLingTokensregexComplexNodePattern_AttributesEqualMatchChecker_initWithNSObjectArray_(EduStanfordNlpLingTokensregexComplexNodePattern_AttributesEqualMatchChecker *self, IOSObjectArray *keys) {
  NSObject_init(self);
  self->keys_ = EduStanfordNlpUtilCollectionUtils_asSetWithNSObjectArray_(keys);
}

EduStanfordNlpLingTokensregexComplexNodePattern_AttributesEqualMatchChecker *new_EduStanfordNlpLingTokensregexComplexNodePattern_AttributesEqualMatchChecker_initWithNSObjectArray_(IOSObjectArray *keys) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexComplexNodePattern_AttributesEqualMatchChecker, initWithNSObjectArray_, keys)
}

EduStanfordNlpLingTokensregexComplexNodePattern_AttributesEqualMatchChecker *create_EduStanfordNlpLingTokensregexComplexNodePattern_AttributesEqualMatchChecker_initWithNSObjectArray_(IOSObjectArray *keys) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexComplexNodePattern_AttributesEqualMatchChecker, initWithNSObjectArray_, keys)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexComplexNodePattern_AttributesEqualMatchChecker)

@implementation EduStanfordNlpLingTokensregexComplexNodePattern_IntegerAnnotationPattern

- (instancetype)initWithInt:(jint)v {
  EduStanfordNlpLingTokensregexComplexNodePattern_IntegerAnnotationPattern_initWithInt_(self, v);
  return self;
}

- (jboolean)matchWithId:(JavaLangInteger *)node {
  return value_ == [((JavaLangInteger *) nil_chk(node)) intValue];
}

- (jint)getValue {
  return value_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, 3, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(matchWithId:);
  methods[2].selector = @selector(getValue);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "value_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "match", "LJavaLangInteger;", "(Ljava/lang/Integer;)Z", "LEduStanfordNlpLingTokensregexComplexNodePattern;", "Ledu/stanford/nlp/ling/tokensregex/NodePattern<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexComplexNodePattern_IntegerAnnotationPattern = { "IntegerAnnotationPattern", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, fields, 7, 0x9, 3, 1, 4, -1, -1, 5, -1 };
  return &_EduStanfordNlpLingTokensregexComplexNodePattern_IntegerAnnotationPattern;
}

@end

void EduStanfordNlpLingTokensregexComplexNodePattern_IntegerAnnotationPattern_initWithInt_(EduStanfordNlpLingTokensregexComplexNodePattern_IntegerAnnotationPattern *self, jint v) {
  EduStanfordNlpLingTokensregexNodePattern_init(self);
  self->value_ = v;
}

EduStanfordNlpLingTokensregexComplexNodePattern_IntegerAnnotationPattern *new_EduStanfordNlpLingTokensregexComplexNodePattern_IntegerAnnotationPattern_initWithInt_(jint v) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexComplexNodePattern_IntegerAnnotationPattern, initWithInt_, v)
}

EduStanfordNlpLingTokensregexComplexNodePattern_IntegerAnnotationPattern *create_EduStanfordNlpLingTokensregexComplexNodePattern_IntegerAnnotationPattern_initWithInt_(jint v) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexComplexNodePattern_IntegerAnnotationPattern, initWithInt_, v)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexComplexNodePattern_IntegerAnnotationPattern)
