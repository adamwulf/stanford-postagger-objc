//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/ling/tokensregex/NodePatternTransformer.java
//

#include "J2ObjC_source.h"
#include "edu/stanford/nlp/ling/tokensregex/NodePatternTransformer.h"

@interface EduStanfordNlpLingTokensregexNodePatternTransformer : NSObject

@end

@implementation EduStanfordNlpLingTokensregexNodePatternTransformer

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LEduStanfordNlpLingTokensregexNodePattern;", 0x401, 0, 1, -1, 2, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexMultiNodePattern;", 0x401, 0, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(transformWithEduStanfordNlpLingTokensregexNodePattern:);
  methods[1].selector = @selector(transformWithEduStanfordNlpLingTokensregexMultiNodePattern:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "transform", "LEduStanfordNlpLingTokensregexNodePattern;", "(Ledu/stanford/nlp/ling/tokensregex/NodePattern<TT1;>;)Ledu/stanford/nlp/ling/tokensregex/NodePattern<TT2;>;", "LEduStanfordNlpLingTokensregexMultiNodePattern;", "(Ledu/stanford/nlp/ling/tokensregex/MultiNodePattern<TT1;>;)Ledu/stanford/nlp/ling/tokensregex/MultiNodePattern<TT2;>;", "<T1:Ljava/lang/Object;T2:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexNodePatternTransformer = { "NodePatternTransformer", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, NULL, 7, 0x609, 2, 0, -1, -1, -1, 5, -1 };
  return &_EduStanfordNlpLingTokensregexNodePatternTransformer;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexNodePatternTransformer)
