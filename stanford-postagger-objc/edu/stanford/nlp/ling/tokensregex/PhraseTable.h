//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/ling/tokensregex/PhraseTable.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_EduStanfordNlpLingTokensregexPhraseTable")
#ifdef RESTRICT_EduStanfordNlpLingTokensregexPhraseTable
#define INCLUDE_ALL_EduStanfordNlpLingTokensregexPhraseTable 0
#else
#define INCLUDE_ALL_EduStanfordNlpLingTokensregexPhraseTable 1
#endif
#undef RESTRICT_EduStanfordNlpLingTokensregexPhraseTable
#ifdef INCLUDE_EduStanfordNlpLingTokensregexPhraseTable_StringList
#define INCLUDE_EduStanfordNlpLingTokensregexPhraseTable_WordList 1
#endif
#ifdef INCLUDE_EduStanfordNlpLingTokensregexPhraseTable_TokenList
#define INCLUDE_EduStanfordNlpLingTokensregexPhraseTable_WordList 1
#endif

#if !defined (EduStanfordNlpLingTokensregexPhraseTable_) && (INCLUDE_ALL_EduStanfordNlpLingTokensregexPhraseTable || defined(INCLUDE_EduStanfordNlpLingTokensregexPhraseTable))
#define EduStanfordNlpLingTokensregexPhraseTable_

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class EduStanfordNlpLingTokensregexPhraseTable_Phrase;
@class EduStanfordNlpUtilCacheMap;
@class IOSObjectArray;
@class JavaUtilRegexPattern;
@protocol EduStanfordNlpLingTokensregexPhraseTable_WordList;
@protocol EduStanfordNlpPipelineAnnotator;
@protocol JavaUtilCollection;
@protocol JavaUtilComparator;
@protocol JavaUtilIterator;
@protocol JavaUtilList;
@protocol JavaUtilMap;

@interface EduStanfordNlpLingTokensregexPhraseTable : NSObject < JavaIoSerializable > {
 @public
  id<JavaUtilMap> rootTree_;
  jboolean normalize_;
  jboolean caseInsensitive_;
  jboolean ignorePunctuation_;
  jboolean ignorePunctuationTokens_;
  id<EduStanfordNlpPipelineAnnotator> tokenizer_;
  jint nPhrases_;
  jint nStrings_;
  EduStanfordNlpUtilCacheMap *normalizedCache_;
}

#pragma mark Public

- (instancetype)init;

- (instancetype)initWithBoolean:(jboolean)normalize
                    withBoolean:(jboolean)caseInsensitive
                    withBoolean:(jboolean)ignorePunctuation;

- (instancetype)initWithInt:(jint)initSize;

- (jboolean)addPhraseWithJavaUtilList:(id<JavaUtilList>)tokens;

- (jboolean)addPhraseWithJavaUtilList:(id<JavaUtilList>)tokens
                         withNSString:(NSString *)tag;

- (jboolean)addPhraseWithJavaUtilList:(id<JavaUtilList>)tokens
                         withNSString:(NSString *)tag
                               withId:(id)phraseData;

- (jboolean)addPhraseWithNSString:(NSString *)phraseText;

- (jboolean)addPhraseWithNSString:(NSString *)phraseText
                     withNSString:(NSString *)tag;

- (jboolean)addPhraseWithNSString:(NSString *)phraseText
                     withNSString:(NSString *)tag
                           withId:(id)phraseData;

- (void)addPhrasesWithJavaUtilCollection:(id<JavaUtilCollection>)phraseTexts;

- (void)addPhrasesWithJavaUtilMap:(id<JavaUtilMap>)taggedPhraseTexts;

- (void)clear;

- (jboolean)containsKeyWithId:(id)key;

- (id<JavaUtilList>)findAllMatchesWithJavaUtilList:(id<JavaUtilList>)acceptablePhrases
                                      withNSString:(NSString *)text;

- (id<JavaUtilList>)findAllMatchesWithJavaUtilList:(id<JavaUtilList>)acceptablePhrases
withEduStanfordNlpLingTokensregexPhraseTable_WordList:(id<EduStanfordNlpLingTokensregexPhraseTable_WordList>)tokens;

- (id<JavaUtilList>)findAllMatchesWithJavaUtilList:(id<JavaUtilList>)acceptablePhrases
withEduStanfordNlpLingTokensregexPhraseTable_WordList:(id<EduStanfordNlpLingTokensregexPhraseTable_WordList>)tokens
                                           withInt:(jint)tokenStart
                                           withInt:(jint)tokenEnd
                                       withBoolean:(jboolean)needNormalization;

- (id<JavaUtilList>)findAllMatchesWithNSString:(NSString *)text;

- (id<JavaUtilList>)findAllMatchesWithEduStanfordNlpLingTokensregexPhraseTable_WordList:(id<EduStanfordNlpLingTokensregexPhraseTable_WordList>)tokens;

- (id<JavaUtilList>)findAllMatchesWithEduStanfordNlpLingTokensregexPhraseTable_WordList:(id<EduStanfordNlpLingTokensregexPhraseTable_WordList>)tokens
                                                                                withInt:(jint)tokenStart
                                                                                withInt:(jint)tokenEnd
                                                                            withBoolean:(jboolean)needNormalization;

- (id<JavaUtilList>)findMatchesWithNSString:(NSString *)text;

- (id<JavaUtilList>)findMatchesWithNSString:(NSString *)text
                                    withInt:(jint)tokenStart
                                    withInt:(jint)tokenEnd
                                withBoolean:(jboolean)needNormalization;

- (id<JavaUtilList>)findMatchesWithEduStanfordNlpLingTokensregexPhraseTable_WordList:(id<EduStanfordNlpLingTokensregexPhraseTable_WordList>)tokens;

- (id<JavaUtilList>)findMatchesWithEduStanfordNlpLingTokensregexPhraseTable_WordList:(id<EduStanfordNlpLingTokensregexPhraseTable_WordList>)tokens
                                                                             withInt:(jint)tokenStart
                                                                             withInt:(jint)tokenEnd
                                                                         withBoolean:(jboolean)needNormalization;

- (id<JavaUtilList>)findNonOverlappingPhrasesWithJavaUtilList:(id<JavaUtilList>)phraseMatches;

- (EduStanfordNlpLingTokensregexPhraseTable_Phrase *)getWithId:(id)key;

+ (EduStanfordNlpLingTokensregexPhraseTable_Phrase *)getLongestPhraseWithJavaUtilList:(id<JavaUtilList>)phrases;

- (NSString *)getNormalizedFormWithNSString:(NSString *)word;

- (jboolean)isEmpty;

- (id<JavaUtilIterator>)iterator;

- (EduStanfordNlpLingTokensregexPhraseTable_Phrase *)lookupWithNSString:(NSString *)phrase;

- (EduStanfordNlpLingTokensregexPhraseTable_Phrase *)lookupWithEduStanfordNlpLingTokensregexPhraseTable_WordList:(id<EduStanfordNlpLingTokensregexPhraseTable_WordList>)wordList;

- (EduStanfordNlpLingTokensregexPhraseTable_Phrase *)lookupNormalizedWithNSString:(NSString *)phrase;

- (void)readPhrasesWithNSString:(NSString *)filename
                    withBoolean:(jboolean)checkTag;

- (void)readPhrasesWithNSString:(NSString *)filename
                    withBoolean:(jboolean)checkTag
       withJavaUtilRegexPattern:(JavaUtilRegexPattern *)delimiterPattern;

- (void)readPhrasesWithNSString:(NSString *)filename
                    withBoolean:(jboolean)checkTag
                   withNSString:(NSString *)delimiterRegex;

- (void)readPhrasesWithNSString:(NSString *)filename
                        withInt:(jint)phraseColIndex
                        withInt:(jint)tagColIndex;

- (void)readPhrasesWithTagScoresWithNSString:(NSString *)filename;

- (void)readPhrasesWithTagScoresWithNSString:(NSString *)filename
                    withJavaUtilRegexPattern:(JavaUtilRegexPattern *)fieldDelimiterPattern
                    withJavaUtilRegexPattern:(JavaUtilRegexPattern *)countDelimiterPattern;

- (void)readPhrasesWithTagScoresWithNSString:(NSString *)filename
                                withNSString:(NSString *)fieldDelimiterRegex
                                withNSString:(NSString *)countDelimiterRegex;

- (void)setNormalizationCacheSizeWithInt:(jint)cacheSize;

- (IOSObjectArray *)splitTextWithNSString:(NSString *)phraseText;

- (id<EduStanfordNlpLingTokensregexPhraseTable_WordList>)toNormalizedWordListWithNSString:(NSString *)phraseText;

+ (NSString *)toStringWithEduStanfordNlpLingTokensregexPhraseTable_WordList:(id<EduStanfordNlpLingTokensregexPhraseTable_WordList>)wordList;

- (id<EduStanfordNlpLingTokensregexPhraseTable_WordList>)toWordListWithNSString:(NSString *)phraseText;

#pragma mark Protected

- (jint)checkWordListMatchWithEduStanfordNlpLingTokensregexPhraseTable_Phrase:(EduStanfordNlpLingTokensregexPhraseTable_Phrase *)phrase
                        withEduStanfordNlpLingTokensregexPhraseTable_WordList:(id<EduStanfordNlpLingTokensregexPhraseTable_WordList>)tokens
                                                                      withInt:(jint)tokenStart
                                                                      withInt:(jint)tokenEnd
                                                                      withInt:(jint)checkStart
                                                                  withBoolean:(jboolean)matchEnd;

- (id<JavaUtilList>)findMatchesWithJavaUtilCollection:(id<JavaUtilCollection>)acceptablePhrases
withEduStanfordNlpLingTokensregexPhraseTable_WordList:(id<EduStanfordNlpLingTokensregexPhraseTable_WordList>)tokens
                                              withInt:(jint)tokenStart
                                              withInt:(jint)tokenEnd
                                          withBoolean:(jboolean)needNormalization
                                          withBoolean:(jboolean)findAll
                                          withBoolean:(jboolean)matchEnd;

- (id<JavaUtilList>)findMatchesNormalizedWithJavaUtilCollection:(id<JavaUtilCollection>)acceptablePhrases
          withEduStanfordNlpLingTokensregexPhraseTable_WordList:(id<EduStanfordNlpLingTokensregexPhraseTable_WordList>)tokens
                                                        withInt:(jint)tokenStart
                                                        withInt:(jint)tokenEnd
                                                    withBoolean:(jboolean)findAll
                                                    withBoolean:(jboolean)matchEnd;

@end

J2OBJC_STATIC_INIT(EduStanfordNlpLingTokensregexPhraseTable)

J2OBJC_FIELD_SETTER(EduStanfordNlpLingTokensregexPhraseTable, rootTree_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(EduStanfordNlpLingTokensregexPhraseTable, tokenizer_, id<EduStanfordNlpPipelineAnnotator>)
J2OBJC_FIELD_SETTER(EduStanfordNlpLingTokensregexPhraseTable, normalizedCache_, EduStanfordNlpUtilCacheMap *)

inline id<JavaUtilComparator> EduStanfordNlpLingTokensregexPhraseTable_get_PHRASEMATCH_LENGTH_ENDPOINTS_COMPARATOR();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<JavaUtilComparator> EduStanfordNlpLingTokensregexPhraseTable_PHRASEMATCH_LENGTH_ENDPOINTS_COMPARATOR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpLingTokensregexPhraseTable, PHRASEMATCH_LENGTH_ENDPOINTS_COMPARATOR, id<JavaUtilComparator>)

FOUNDATION_EXPORT void EduStanfordNlpLingTokensregexPhraseTable_init(EduStanfordNlpLingTokensregexPhraseTable *self);

FOUNDATION_EXPORT EduStanfordNlpLingTokensregexPhraseTable *new_EduStanfordNlpLingTokensregexPhraseTable_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EduStanfordNlpLingTokensregexPhraseTable *create_EduStanfordNlpLingTokensregexPhraseTable_init();

FOUNDATION_EXPORT void EduStanfordNlpLingTokensregexPhraseTable_initWithInt_(EduStanfordNlpLingTokensregexPhraseTable *self, jint initSize);

FOUNDATION_EXPORT EduStanfordNlpLingTokensregexPhraseTable *new_EduStanfordNlpLingTokensregexPhraseTable_initWithInt_(jint initSize) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EduStanfordNlpLingTokensregexPhraseTable *create_EduStanfordNlpLingTokensregexPhraseTable_initWithInt_(jint initSize);

FOUNDATION_EXPORT void EduStanfordNlpLingTokensregexPhraseTable_initWithBoolean_withBoolean_withBoolean_(EduStanfordNlpLingTokensregexPhraseTable *self, jboolean normalize, jboolean caseInsensitive, jboolean ignorePunctuation);

FOUNDATION_EXPORT EduStanfordNlpLingTokensregexPhraseTable *new_EduStanfordNlpLingTokensregexPhraseTable_initWithBoolean_withBoolean_withBoolean_(jboolean normalize, jboolean caseInsensitive, jboolean ignorePunctuation) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EduStanfordNlpLingTokensregexPhraseTable *create_EduStanfordNlpLingTokensregexPhraseTable_initWithBoolean_withBoolean_withBoolean_(jboolean normalize, jboolean caseInsensitive, jboolean ignorePunctuation);

FOUNDATION_EXPORT EduStanfordNlpLingTokensregexPhraseTable_Phrase *EduStanfordNlpLingTokensregexPhraseTable_getLongestPhraseWithJavaUtilList_(id<JavaUtilList> phrases);

FOUNDATION_EXPORT NSString *EduStanfordNlpLingTokensregexPhraseTable_toStringWithEduStanfordNlpLingTokensregexPhraseTable_WordList_(id<EduStanfordNlpLingTokensregexPhraseTable_WordList> wordList);

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpLingTokensregexPhraseTable)

#endif

#if !defined (EduStanfordNlpLingTokensregexPhraseTable_Phrase_) && (INCLUDE_ALL_EduStanfordNlpLingTokensregexPhraseTable || defined(INCLUDE_EduStanfordNlpLingTokensregexPhraseTable_Phrase))
#define EduStanfordNlpLingTokensregexPhraseTable_Phrase_

@protocol EduStanfordNlpLingTokensregexPhraseTable_WordList;
@protocol JavaUtilCollection;

@interface EduStanfordNlpLingTokensregexPhraseTable_Phrase : NSObject {
 @public
  id<EduStanfordNlpLingTokensregexPhraseTable_WordList> wordList_;
  NSString *text_;
  NSString *tag_;
  id data_;
}

#pragma mark Public

- (instancetype)initWithEduStanfordNlpLingTokensregexPhraseTable_WordList:(id<EduStanfordNlpLingTokensregexPhraseTable_WordList>)wordList
                                                             withNSString:(NSString *)text
                                                             withNSString:(NSString *)tag
                                                                   withId:(id)data;

- (jboolean)addFormWithNSString:(NSString *)form;

- (id<JavaUtilCollection>)getAlternateForms;

- (id)getData;

- (NSString *)getTag;

- (NSString *)getText;

- (id<EduStanfordNlpLingTokensregexPhraseTable_WordList>)getWordList;

- (jboolean)isLongerWithEduStanfordNlpLingTokensregexPhraseTable_Phrase:(EduStanfordNlpLingTokensregexPhraseTable_Phrase *)phrase;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpLingTokensregexPhraseTable_Phrase)

J2OBJC_FIELD_SETTER(EduStanfordNlpLingTokensregexPhraseTable_Phrase, wordList_, id<EduStanfordNlpLingTokensregexPhraseTable_WordList>)
J2OBJC_FIELD_SETTER(EduStanfordNlpLingTokensregexPhraseTable_Phrase, text_, NSString *)
J2OBJC_FIELD_SETTER(EduStanfordNlpLingTokensregexPhraseTable_Phrase, tag_, NSString *)
J2OBJC_FIELD_SETTER(EduStanfordNlpLingTokensregexPhraseTable_Phrase, data_, id)

FOUNDATION_EXPORT void EduStanfordNlpLingTokensregexPhraseTable_Phrase_initWithEduStanfordNlpLingTokensregexPhraseTable_WordList_withNSString_withNSString_withId_(EduStanfordNlpLingTokensregexPhraseTable_Phrase *self, id<EduStanfordNlpLingTokensregexPhraseTable_WordList> wordList, NSString *text, NSString *tag, id data);

FOUNDATION_EXPORT EduStanfordNlpLingTokensregexPhraseTable_Phrase *new_EduStanfordNlpLingTokensregexPhraseTable_Phrase_initWithEduStanfordNlpLingTokensregexPhraseTable_WordList_withNSString_withNSString_withId_(id<EduStanfordNlpLingTokensregexPhraseTable_WordList> wordList, NSString *text, NSString *tag, id data) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EduStanfordNlpLingTokensregexPhraseTable_Phrase *create_EduStanfordNlpLingTokensregexPhraseTable_Phrase_initWithEduStanfordNlpLingTokensregexPhraseTable_WordList_withNSString_withNSString_withId_(id<EduStanfordNlpLingTokensregexPhraseTable_WordList> wordList, NSString *text, NSString *tag, id data);

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpLingTokensregexPhraseTable_Phrase)

#endif

#if !defined (EduStanfordNlpLingTokensregexPhraseTable_PhraseMatch_) && (INCLUDE_ALL_EduStanfordNlpLingTokensregexPhraseTable || defined(INCLUDE_EduStanfordNlpLingTokensregexPhraseTable_PhraseMatch))
#define EduStanfordNlpLingTokensregexPhraseTable_PhraseMatch_

#define RESTRICT_EduStanfordNlpUtilHasInterval 1
#define INCLUDE_EduStanfordNlpUtilHasInterval 1
#include "edu/stanford/nlp/util/HasInterval.h"

@class EduStanfordNlpLingTokensregexPhraseTable_Phrase;
@class EduStanfordNlpUtilInterval;

@interface EduStanfordNlpLingTokensregexPhraseTable_PhraseMatch : NSObject < EduStanfordNlpUtilHasInterval > {
 @public
  EduStanfordNlpLingTokensregexPhraseTable_Phrase *phrase_;
  jint tokenBegin_;
  jint tokenEnd_;
  EduStanfordNlpUtilInterval *span_;
}

#pragma mark Public

- (instancetype)initWithEduStanfordNlpLingTokensregexPhraseTable_Phrase:(EduStanfordNlpLingTokensregexPhraseTable_Phrase *)phrase
                                                                withInt:(jint)tokenBegin
                                                                withInt:(jint)tokenEnd;

- (EduStanfordNlpUtilInterval *)getInterval;

- (EduStanfordNlpLingTokensregexPhraseTable_Phrase *)getPhrase;

- (jint)getTokenBegin;

- (jint)getTokenEnd;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpLingTokensregexPhraseTable_PhraseMatch)

J2OBJC_FIELD_SETTER(EduStanfordNlpLingTokensregexPhraseTable_PhraseMatch, phrase_, EduStanfordNlpLingTokensregexPhraseTable_Phrase *)
J2OBJC_FIELD_SETTER(EduStanfordNlpLingTokensregexPhraseTable_PhraseMatch, span_, EduStanfordNlpUtilInterval *)

FOUNDATION_EXPORT void EduStanfordNlpLingTokensregexPhraseTable_PhraseMatch_initWithEduStanfordNlpLingTokensregexPhraseTable_Phrase_withInt_withInt_(EduStanfordNlpLingTokensregexPhraseTable_PhraseMatch *self, EduStanfordNlpLingTokensregexPhraseTable_Phrase *phrase, jint tokenBegin, jint tokenEnd);

FOUNDATION_EXPORT EduStanfordNlpLingTokensregexPhraseTable_PhraseMatch *new_EduStanfordNlpLingTokensregexPhraseTable_PhraseMatch_initWithEduStanfordNlpLingTokensregexPhraseTable_Phrase_withInt_withInt_(EduStanfordNlpLingTokensregexPhraseTable_Phrase *phrase, jint tokenBegin, jint tokenEnd) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EduStanfordNlpLingTokensregexPhraseTable_PhraseMatch *create_EduStanfordNlpLingTokensregexPhraseTable_PhraseMatch_initWithEduStanfordNlpLingTokensregexPhraseTable_Phrase_withInt_withInt_(EduStanfordNlpLingTokensregexPhraseTable_Phrase *phrase, jint tokenBegin, jint tokenEnd);

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpLingTokensregexPhraseTable_PhraseMatch)

#endif

#if !defined (EduStanfordNlpLingTokensregexPhraseTable_WordList_) && (INCLUDE_ALL_EduStanfordNlpLingTokensregexPhraseTable || defined(INCLUDE_EduStanfordNlpLingTokensregexPhraseTable_WordList))
#define EduStanfordNlpLingTokensregexPhraseTable_WordList_

@protocol EduStanfordNlpLingTokensregexPhraseTable_WordList < JavaObject >

- (NSString *)getWordWithInt:(jint)i;

- (jint)size;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpLingTokensregexPhraseTable_WordList)

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpLingTokensregexPhraseTable_WordList)

#endif

#if !defined (EduStanfordNlpLingTokensregexPhraseTable_TokenList_) && (INCLUDE_ALL_EduStanfordNlpLingTokensregexPhraseTable || defined(INCLUDE_EduStanfordNlpLingTokensregexPhraseTable_TokenList))
#define EduStanfordNlpLingTokensregexPhraseTable_TokenList_

@class IOSClass;
@protocol JavaUtilList;

@interface EduStanfordNlpLingTokensregexPhraseTable_TokenList : NSObject < EduStanfordNlpLingTokensregexPhraseTable_WordList >

#pragma mark Public

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)tokens
                        withIOSClass:(IOSClass *)key;

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)tokens;

- (NSString *)getWordWithInt:(jint)i;

- (jint)size;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpLingTokensregexPhraseTable_TokenList)

FOUNDATION_EXPORT void EduStanfordNlpLingTokensregexPhraseTable_TokenList_initWithJavaUtilList_(EduStanfordNlpLingTokensregexPhraseTable_TokenList *self, id<JavaUtilList> tokens);

FOUNDATION_EXPORT EduStanfordNlpLingTokensregexPhraseTable_TokenList *new_EduStanfordNlpLingTokensregexPhraseTable_TokenList_initWithJavaUtilList_(id<JavaUtilList> tokens) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EduStanfordNlpLingTokensregexPhraseTable_TokenList *create_EduStanfordNlpLingTokensregexPhraseTable_TokenList_initWithJavaUtilList_(id<JavaUtilList> tokens);

FOUNDATION_EXPORT void EduStanfordNlpLingTokensregexPhraseTable_TokenList_initWithJavaUtilList_withIOSClass_(EduStanfordNlpLingTokensregexPhraseTable_TokenList *self, id<JavaUtilList> tokens, IOSClass *key);

FOUNDATION_EXPORT EduStanfordNlpLingTokensregexPhraseTable_TokenList *new_EduStanfordNlpLingTokensregexPhraseTable_TokenList_initWithJavaUtilList_withIOSClass_(id<JavaUtilList> tokens, IOSClass *key) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EduStanfordNlpLingTokensregexPhraseTable_TokenList *create_EduStanfordNlpLingTokensregexPhraseTable_TokenList_initWithJavaUtilList_withIOSClass_(id<JavaUtilList> tokens, IOSClass *key);

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpLingTokensregexPhraseTable_TokenList)

#endif

#if !defined (EduStanfordNlpLingTokensregexPhraseTable_StringList_) && (INCLUDE_ALL_EduStanfordNlpLingTokensregexPhraseTable || defined(INCLUDE_EduStanfordNlpLingTokensregexPhraseTable_StringList))
#define EduStanfordNlpLingTokensregexPhraseTable_StringList_

@class IOSObjectArray;
@protocol JavaUtilList;

@interface EduStanfordNlpLingTokensregexPhraseTable_StringList : NSObject < EduStanfordNlpLingTokensregexPhraseTable_WordList >

#pragma mark Public

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)words;

- (instancetype)initWithNSStringArray:(IOSObjectArray *)wordsArray;

- (NSString *)getWordWithInt:(jint)i;

- (jint)size;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpLingTokensregexPhraseTable_StringList)

FOUNDATION_EXPORT void EduStanfordNlpLingTokensregexPhraseTable_StringList_initWithJavaUtilList_(EduStanfordNlpLingTokensregexPhraseTable_StringList *self, id<JavaUtilList> words);

FOUNDATION_EXPORT EduStanfordNlpLingTokensregexPhraseTable_StringList *new_EduStanfordNlpLingTokensregexPhraseTable_StringList_initWithJavaUtilList_(id<JavaUtilList> words) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EduStanfordNlpLingTokensregexPhraseTable_StringList *create_EduStanfordNlpLingTokensregexPhraseTable_StringList_initWithJavaUtilList_(id<JavaUtilList> words);

FOUNDATION_EXPORT void EduStanfordNlpLingTokensregexPhraseTable_StringList_initWithNSStringArray_(EduStanfordNlpLingTokensregexPhraseTable_StringList *self, IOSObjectArray *wordsArray);

FOUNDATION_EXPORT EduStanfordNlpLingTokensregexPhraseTable_StringList *new_EduStanfordNlpLingTokensregexPhraseTable_StringList_initWithNSStringArray_(IOSObjectArray *wordsArray) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EduStanfordNlpLingTokensregexPhraseTable_StringList *create_EduStanfordNlpLingTokensregexPhraseTable_StringList_initWithNSStringArray_(IOSObjectArray *wordsArray);

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpLingTokensregexPhraseTable_StringList)

#endif

#if !defined (EduStanfordNlpLingTokensregexPhraseTable_PhraseStringCollection_) && (INCLUDE_ALL_EduStanfordNlpLingTokensregexPhraseTable || defined(INCLUDE_EduStanfordNlpLingTokensregexPhraseTable_PhraseStringCollection))
#define EduStanfordNlpLingTokensregexPhraseTable_PhraseStringCollection_

#define RESTRICT_JavaUtilCollection 1
#define INCLUDE_JavaUtilCollection 1
#include "java/util/Collection.h"

@class EduStanfordNlpLingTokensregexPhraseTable;
@class IOSObjectArray;
@protocol JavaUtilFunctionConsumer;
@protocol JavaUtilFunctionPredicate;
@protocol JavaUtilIterator;
@protocol JavaUtilSpliterator;
@protocol JavaUtilStreamStream;

@interface EduStanfordNlpLingTokensregexPhraseTable_PhraseStringCollection : NSObject < JavaUtilCollection > {
 @public
  EduStanfordNlpLingTokensregexPhraseTable *phraseTable_;
  jboolean useNormalizedLookup_;
}

#pragma mark Public

- (instancetype)initWithEduStanfordNlpLingTokensregexPhraseTable:(EduStanfordNlpLingTokensregexPhraseTable *)phraseTable
                                                     withBoolean:(jboolean)useNormalizedLookup;

- (jboolean)addWithId:(NSString *)s;

- (jboolean)addAllWithJavaUtilCollection:(id<JavaUtilCollection>)c;

- (void)clear;

- (jboolean)containsWithId:(id)o;

- (jboolean)containsAllWithJavaUtilCollection:(id<JavaUtilCollection>)c;

- (jboolean)isEmpty;

- (id<JavaUtilIterator>)iterator;

- (jboolean)removeWithId:(id)o;

- (jboolean)removeAllWithJavaUtilCollection:(id<JavaUtilCollection>)c;

- (jboolean)retainAllWithJavaUtilCollection:(id<JavaUtilCollection>)c;

- (jint)size;

- (IOSObjectArray *)toArray;

- (IOSObjectArray *)toArrayWithNSObjectArray:(IOSObjectArray *)a;

#pragma mark Package-Private

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpLingTokensregexPhraseTable_PhraseStringCollection)

J2OBJC_FIELD_SETTER(EduStanfordNlpLingTokensregexPhraseTable_PhraseStringCollection, phraseTable_, EduStanfordNlpLingTokensregexPhraseTable *)

FOUNDATION_EXPORT void EduStanfordNlpLingTokensregexPhraseTable_PhraseStringCollection_initWithEduStanfordNlpLingTokensregexPhraseTable_withBoolean_(EduStanfordNlpLingTokensregexPhraseTable_PhraseStringCollection *self, EduStanfordNlpLingTokensregexPhraseTable *phraseTable, jboolean useNormalizedLookup);

FOUNDATION_EXPORT EduStanfordNlpLingTokensregexPhraseTable_PhraseStringCollection *new_EduStanfordNlpLingTokensregexPhraseTable_PhraseStringCollection_initWithEduStanfordNlpLingTokensregexPhraseTable_withBoolean_(EduStanfordNlpLingTokensregexPhraseTable *phraseTable, jboolean useNormalizedLookup) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EduStanfordNlpLingTokensregexPhraseTable_PhraseStringCollection *create_EduStanfordNlpLingTokensregexPhraseTable_PhraseStringCollection_initWithEduStanfordNlpLingTokensregexPhraseTable_withBoolean_(EduStanfordNlpLingTokensregexPhraseTable *phraseTable, jboolean useNormalizedLookup);

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpLingTokensregexPhraseTable_PhraseStringCollection)

#endif

#pragma pop_macro("INCLUDE_ALL_EduStanfordNlpLingTokensregexPhraseTable")
