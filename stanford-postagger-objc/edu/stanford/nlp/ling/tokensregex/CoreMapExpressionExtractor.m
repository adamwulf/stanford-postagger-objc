//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/ling/tokensregex/CoreMapExpressionExtractor.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/io/IOUtils.h"
#include "edu/stanford/nlp/ling/CoreAnnotations.h"
#include "edu/stanford/nlp/ling/tokensregex/CoreMapExpressionExtractor.h"
#include "edu/stanford/nlp/ling/tokensregex/Env.h"
#include "edu/stanford/nlp/ling/tokensregex/EnvLookup.h"
#include "edu/stanford/nlp/ling/tokensregex/MatchedExpression.h"
#include "edu/stanford/nlp/ling/tokensregex/SequenceMatchRules.h"
#include "edu/stanford/nlp/ling/tokensregex/TokenSequencePattern.h"
#include "edu/stanford/nlp/ling/tokensregex/parser/TokenSequenceParser.h"
#include "edu/stanford/nlp/ling/tokensregex/types/Expression.h"
#include "edu/stanford/nlp/ling/tokensregex/types/Tags.h"
#include "edu/stanford/nlp/ling/tokensregex/types/Value.h"
#include "edu/stanford/nlp/util/CollectionUtils.h"
#include "edu/stanford/nlp/util/CoreMap.h"
#include "edu/stanford/nlp/util/Filters.h"
#include "edu/stanford/nlp/util/Interval.h"
#include "edu/stanford/nlp/util/Pair.h"
#include "java/io/BufferedReader.h"
#include "java/io/PrintStream.h"
#include "java/io/StringReader.h"
#include "java/lang/Boolean.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/Comparator.h"
#include "java/util/HashMap.h"
#include "java/util/IdentityHashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Objects.h"
#include "java/util/Set.h"
#include "java/util/function/Function.h"
#include "java/util/function/Predicate.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"

@interface EduStanfordNlpLingTokensregexCoreMapExpressionExtractor () {
 @public
  JavaUtilLoggingLogger *logger_;
  EduStanfordNlpLingTokensregexEnv *env_;
  jboolean keepTags_;
  jboolean collapseExtractionRules_;
  IOSClass *tokensAnnotationKey_;
  id<JavaUtilMap> stages_;
}

- (EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule *)createMergedRuleWithEduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule:(EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule *)aerTemplate
                                                                                                                                                    withJavaUtilList:(id<JavaUtilList>)patterns;

- (id<JavaUtilList>)collapseWithJavaUtilList:(id<JavaUtilList>)rules;

- (void)cleanupTagsWithJavaUtilCollection:(id<JavaUtilCollection>)objs
                          withJavaUtilMap:(id<JavaUtilMap>)cleaned;

- (void)cleanupTagsWithEduStanfordNlpUtilCoreMap:(id<EduStanfordNlpUtilCoreMap>)cm;

- (void)cleanupTagsWithEduStanfordNlpUtilCoreMap:(id<EduStanfordNlpUtilCoreMap>)cm
                                 withJavaUtilMap:(id<JavaUtilMap>)cleaned;

- (void)annotateExpressionsWithEduStanfordNlpUtilCoreMap:(id<EduStanfordNlpUtilCoreMap>)annotation
                                        withJavaUtilList:(id<JavaUtilList>)expressions;

- (void)annotateExpressionsWithJavaUtilList:(id<JavaUtilList>)chunks
                           withJavaUtilList:(id<JavaUtilList>)expressions;

- (id<JavaUtilList>)filterInvalidExpressionsWithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)filterRule
                                                         withJavaUtilList:(id<JavaUtilList>)expressions;

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpLingTokensregexCoreMapExpressionExtractor, logger_, JavaUtilLoggingLogger *)
J2OBJC_FIELD_SETTER(EduStanfordNlpLingTokensregexCoreMapExpressionExtractor, env_, EduStanfordNlpLingTokensregexEnv *)
J2OBJC_FIELD_SETTER(EduStanfordNlpLingTokensregexCoreMapExpressionExtractor, tokensAnnotationKey_, IOSClass *)
J2OBJC_FIELD_SETTER(EduStanfordNlpLingTokensregexCoreMapExpressionExtractor, stages_, id<JavaUtilMap>)

__attribute__((unused)) static EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule *EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_createMergedRuleWithEduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule_withJavaUtilList_(EduStanfordNlpLingTokensregexCoreMapExpressionExtractor *self, EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule *aerTemplate, id<JavaUtilList> patterns);

__attribute__((unused)) static id<JavaUtilList> EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_collapseWithJavaUtilList_(EduStanfordNlpLingTokensregexCoreMapExpressionExtractor *self, id<JavaUtilList> rules);

__attribute__((unused)) static void EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_cleanupTagsWithJavaUtilCollection_withJavaUtilMap_(EduStanfordNlpLingTokensregexCoreMapExpressionExtractor *self, id<JavaUtilCollection> objs, id<JavaUtilMap> cleaned);

__attribute__((unused)) static void EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_cleanupTagsWithEduStanfordNlpUtilCoreMap_(EduStanfordNlpLingTokensregexCoreMapExpressionExtractor *self, id<EduStanfordNlpUtilCoreMap> cm);

__attribute__((unused)) static void EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_cleanupTagsWithEduStanfordNlpUtilCoreMap_withJavaUtilMap_(EduStanfordNlpLingTokensregexCoreMapExpressionExtractor *self, id<EduStanfordNlpUtilCoreMap> cm, id<JavaUtilMap> cleaned);

__attribute__((unused)) static void EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_annotateExpressionsWithEduStanfordNlpUtilCoreMap_withJavaUtilList_(EduStanfordNlpLingTokensregexCoreMapExpressionExtractor *self, id<EduStanfordNlpUtilCoreMap> annotation, id<JavaUtilList> expressions);

__attribute__((unused)) static void EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_annotateExpressionsWithJavaUtilList_withJavaUtilList_(EduStanfordNlpLingTokensregexCoreMapExpressionExtractor *self, id<JavaUtilList> chunks, id<JavaUtilList> expressions);

__attribute__((unused)) static id<JavaUtilList> EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_filterInvalidExpressionsWithJavaUtilFunctionPredicate_withJavaUtilList_(EduStanfordNlpLingTokensregexCoreMapExpressionExtractor *self, id<JavaUtilFunctionPredicate> filterRule, id<JavaUtilList> expressions);

@interface EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_Stage ()

+ (id<EduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule>)addRuleWithEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule:(id<EduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule>)origRule
                                                                          withEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule:(id<EduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule>)rule;

- (void)addCompositeRuleWithEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule:(id<EduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule>)rule;

- (void)addBasicRuleWithEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule:(id<EduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule>)rule;

- (void)addFilterRuleWithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)rule;

@end

__attribute__((unused)) static id<EduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule> EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_Stage_addRuleWithEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule_withEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule_(id<EduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule> origRule, id<EduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule> rule);

__attribute__((unused)) static void EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_Stage_addCompositeRuleWithEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule_(EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_Stage *self, id<EduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule> rule);

__attribute__((unused)) static void EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_Stage_addBasicRuleWithEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule_(EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_Stage *self, id<EduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule> rule);

__attribute__((unused)) static void EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_Stage_addFilterRuleWithJavaUtilFunctionPredicate_(EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_Stage *self, id<JavaUtilFunctionPredicate> rule);

@interface EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_CompositeMatchState : NSObject {
 @public
  id<JavaUtilList> merged_;
  id<JavaUtilList> matched_;
  jint iters_;
}

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)merged
                    withJavaUtilList:(id<JavaUtilList>)matched
                             withInt:(jint)iters;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_CompositeMatchState)

J2OBJC_FIELD_SETTER(EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_CompositeMatchState, merged_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_CompositeMatchState, matched_, id<JavaUtilList>)

__attribute__((unused)) static void EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_CompositeMatchState_initWithJavaUtilList_withJavaUtilList_withInt_(EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_CompositeMatchState *self, id<JavaUtilList> merged, id<JavaUtilList> matched, jint iters);

__attribute__((unused)) static EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_CompositeMatchState *new_EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_CompositeMatchState_initWithJavaUtilList_withJavaUtilList_withInt_(id<JavaUtilList> merged, id<JavaUtilList> matched, jint iters) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_CompositeMatchState *create_EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_CompositeMatchState_initWithJavaUtilList_withJavaUtilList_withInt_(id<JavaUtilList> merged, id<JavaUtilList> matched, jint iters);

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_CompositeMatchState)

@interface EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_$Lambda$1 : NSObject < JavaUtilFunctionFunction > {
 @public
  JavaLangInteger *val$startTokenOffsetFinal_;
}

- (id)applyWithId:(id<EduStanfordNlpUtilCoreMap>)inArg;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_$Lambda$1)

J2OBJC_FIELD_SETTER(EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_$Lambda$1, val$startTokenOffsetFinal_, JavaLangInteger *)

__attribute__((unused)) static void EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_$Lambda$1_initWithJavaLangInteger_(EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_$Lambda$1 *self, JavaLangInteger *capture$0);

__attribute__((unused)) static EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_$Lambda$1 *new_EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_$Lambda$1_initWithJavaLangInteger_(JavaLangInteger *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_$Lambda$1 *create_EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_$Lambda$1_initWithJavaLangInteger_(JavaLangInteger *capture$0);

@implementation EduStanfordNlpLingTokensregexCoreMapExpressionExtractor

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithEduStanfordNlpLingTokensregexEnv:(EduStanfordNlpLingTokensregexEnv *)env {
  EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_initWithEduStanfordNlpLingTokensregexEnv_(self, env);
  return self;
}

- (instancetype)initWithEduStanfordNlpLingTokensregexEnv:(EduStanfordNlpLingTokensregexEnv *)env
                                        withJavaUtilList:(id<JavaUtilList>)rules {
  EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_initWithEduStanfordNlpLingTokensregexEnv_withJavaUtilList_(self, env, rules);
  return self;
}

- (void)appendRulesWithJavaUtilList:(id<JavaUtilList>)rules {
  [((JavaUtilLoggingLogger *) nil_chk(logger_)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, INFO) withNSString:JreStrcat("$I$", @"Read ", [((id<JavaUtilList>) nil_chk(rules)) size], @" rules")];
  if (collapseExtractionRules_) {
    rules = EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_collapseWithJavaUtilList_(self, rules);
    [((JavaUtilLoggingLogger *) nil_chk(logger_)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, INFO) withNSString:JreStrcat("$I$", @"Collapsing into ", [((id<JavaUtilList>) nil_chk(rules)) size], @" rules")];
  }
  for (id<EduStanfordNlpLingTokensregexSequenceMatchRules_Rule> __strong r in rules) {
    if ([r isKindOfClass:[EduStanfordNlpLingTokensregexSequenceMatchRules_AssignmentRule class]]) {
      [((EduStanfordNlpLingTokensregexSequenceMatchRules_AssignmentRule *) nil_chk(((EduStanfordNlpLingTokensregexSequenceMatchRules_AssignmentRule *) cast_chk(r, [EduStanfordNlpLingTokensregexSequenceMatchRules_AssignmentRule class])))) evaluateWithEduStanfordNlpLingTokensregexEnv:env_];
    }
    else if ([r isKindOfClass:[EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule class]]) {
      EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule *aer = (EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule *) cast_chk(r, [EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule class]);
      EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_Stage *stage = [((id<JavaUtilMap>) nil_chk(stages_)) getWithId:JavaLangInteger_valueOfWithInt_(((EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule *) nil_chk(aer))->stage_)];
      if (stage == nil) {
        (void) [stages_ putWithId:JavaLangInteger_valueOfWithInt_(aer->stage_) withId:stage = new_EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_Stage_init()];
        stage->stageId_ = aer->stage_;
        JavaLangBoolean *clearMatched = (JavaLangBoolean *) cast_chk([((id<JavaUtilMap>) nil_chk([((EduStanfordNlpLingTokensregexEnv *) nil_chk(env_)) getDefaults])) getWithId:@"stage.clearMatched"], [JavaLangBoolean class]);
        if (clearMatched != nil) {
          stage->clearMatched_ = [clearMatched booleanValue];
        }
        JavaLangInteger *limitIters = (JavaLangInteger *) cast_chk([((id<JavaUtilMap>) nil_chk([env_ getDefaults])) getWithId:@"stage.limitIters"], [JavaLangInteger class]);
        if (limitIters != nil) {
          stage->limitIters_ = [limitIters intValue];
        }
      }
      if (aer->active_) {
        if ([((NSString *) nil_chk(EduStanfordNlpLingTokensregexSequenceMatchRules_FILTER_RULE_TYPE)) isEqual:aer->ruleType_]) {
          EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_Stage_addFilterRuleWithJavaUtilFunctionPredicate_(stage, aer);
        }
        else {
          if (aer->isComposite_) {
            EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_Stage_addCompositeRuleWithEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule_(stage, aer);
          }
          else {
            EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_Stage_addBasicRuleWithEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule_(stage, aer);
          }
        }
      }
      else {
        [((JavaUtilLoggingLogger *) nil_chk(logger_)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINE) withNSString:JreStrcat("$$", @"Ignoring inactive rule: ", aer->name_)];
      }
    }
  }
}

- (EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule *)createMergedRuleWithEduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule:(EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule *)aerTemplate
                                                                                                                                                    withJavaUtilList:(id<JavaUtilList>)patterns {
  return EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_createMergedRuleWithEduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule_withJavaUtilList_(self, aerTemplate, patterns);
}

- (id<JavaUtilList>)collapseWithJavaUtilList:(id<JavaUtilList>)rules {
  return EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_collapseWithJavaUtilList_(self, rules);
}

- (EduStanfordNlpLingTokensregexEnv *)getEnv {
  return env_;
}

- (void)setLoggerWithJavaUtilLoggingLogger:(JavaUtilLoggingLogger *)logger {
  self->logger_ = logger;
}

- (void)setExtractRulesWithEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule:(id<EduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule>)basicExtractRule
                       withEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule:(id<EduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule>)compositeExtractRule
                                                         withJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)filterRule {
  EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_Stage *stage = new_EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_Stage_init();
  stage->basicExtractRule_ = basicExtractRule;
  stage->compositeExtractRule_ = compositeExtractRule;
  stage->filterRule_ = filterRule;
  [((id<JavaUtilMap>) nil_chk(self->stages_)) clear];
  (void) [self->stages_ putWithId:JavaLangInteger_valueOfWithInt_(1) withId:stage];
}

+ (EduStanfordNlpLingTokensregexCoreMapExpressionExtractor *)createExtractorFromFilesWithEduStanfordNlpLingTokensregexEnv:(EduStanfordNlpLingTokensregexEnv *)env
                                                                                                        withNSStringArray:(IOSObjectArray *)filenames {
  return EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_createExtractorFromFilesWithEduStanfordNlpLingTokensregexEnv_withNSStringArray_(env, filenames);
}

+ (EduStanfordNlpLingTokensregexCoreMapExpressionExtractor *)createExtractorFromFilesWithEduStanfordNlpLingTokensregexEnv:(EduStanfordNlpLingTokensregexEnv *)env
                                                                                                         withJavaUtilList:(id<JavaUtilList>)filenames {
  return EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_createExtractorFromFilesWithEduStanfordNlpLingTokensregexEnv_withJavaUtilList_(env, filenames);
}

+ (EduStanfordNlpLingTokensregexCoreMapExpressionExtractor *)createExtractorFromFileWithEduStanfordNlpLingTokensregexEnv:(EduStanfordNlpLingTokensregexEnv *)env
                                                                                                            withNSString:(NSString *)filename {
  return EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_createExtractorFromFileWithEduStanfordNlpLingTokensregexEnv_withNSString_(env, filename);
}

+ (EduStanfordNlpLingTokensregexCoreMapExpressionExtractor *)createExtractorFromStringWithEduStanfordNlpLingTokensregexEnv:(EduStanfordNlpLingTokensregexEnv *)env
                                                                                                              withNSString:(NSString *)str {
  return EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_createExtractorFromStringWithEduStanfordNlpLingTokensregexEnv_withNSString_(env, str);
}

- (id<EduStanfordNlpLingTokensregexTypesValue>)getValueWithNSString:(NSString *)varname {
  id<EduStanfordNlpLingTokensregexTypesExpression> expr = (id<EduStanfordNlpLingTokensregexTypesExpression>) cast_check([((EduStanfordNlpLingTokensregexEnv *) nil_chk(env_)) getWithNSString:varname], EduStanfordNlpLingTokensregexTypesExpression_class_());
  if (expr != nil) {
    return [expr evaluateWithEduStanfordNlpLingTokensregexEnv:env_ withNSObjectArray:[IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]];
  }
  else {
    @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$", @"Unable get expression for variable ", varname));
  }
}

- (id<JavaUtilList>)extractCoreMapsToListWithJavaUtilList:(id<JavaUtilList>)res
                            withEduStanfordNlpUtilCoreMap:(id<EduStanfordNlpUtilCoreMap>)annotation {
  id<JavaUtilList> exprs = [self extractExpressionsWithEduStanfordNlpUtilCoreMap:annotation];
  for (EduStanfordNlpLingTokensregexMatchedExpression * __strong expr in nil_chk(exprs)) {
    [((id<JavaUtilList>) nil_chk(res)) addWithId:[((EduStanfordNlpLingTokensregexMatchedExpression *) nil_chk(expr)) getAnnotation]];
  }
  return res;
}

- (id<JavaUtilList>)extractCoreMapsWithEduStanfordNlpUtilCoreMap:(id<EduStanfordNlpUtilCoreMap>)annotation {
  id<JavaUtilList> res = new_JavaUtilArrayList_init();
  return [self extractCoreMapsToListWithJavaUtilList:res withEduStanfordNlpUtilCoreMap:annotation];
}

- (id<JavaUtilList>)extractCoreMapsMergedWithTokensWithEduStanfordNlpUtilCoreMap:(id<EduStanfordNlpUtilCoreMap>)annotation {
  id<JavaUtilList> res = [self extractCoreMapsWithEduStanfordNlpUtilCoreMap:annotation];
  JavaLangInteger *startTokenOffset = [((id<EduStanfordNlpUtilCoreMap>) nil_chk(annotation)) getWithIOSClass:EduStanfordNlpLingCoreAnnotations_TokenBeginAnnotation_class_()];
  if (startTokenOffset == nil) {
    startTokenOffset = JavaLangInteger_valueOfWithInt_(0);
  }
  JavaLangInteger *startTokenOffsetFinal = startTokenOffset;
  id<JavaUtilList> merged = EduStanfordNlpUtilCollectionUtils_mergeListWithSortedMatchedPreAggregatedWithJavaUtilList_withJavaUtilList_withJavaUtilFunctionFunction_((id<JavaUtilList>) cast_check([annotation getWithIOSClass:tokensAnnotationKey_], JavaUtilList_class_()), res, new_EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_$Lambda$1_initWithJavaLangInteger_(startTokenOffsetFinal));
  return merged;
}

- (id<JavaUtilList>)flattenWithJavaUtilList:(id<JavaUtilList>)cms {
  return EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_flattenWithJavaUtilList_withIOSClass_(cms, tokensAnnotationKey_);
}

+ (id<JavaUtilList>)flattenWithJavaUtilList:(id<JavaUtilList>)cms
                               withIOSClass:(IOSClass *)key {
  return EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_flattenWithJavaUtilList_withIOSClass_(cms, key);
}

- (void)cleanupTagsWithJavaUtilCollection:(id<JavaUtilCollection>)objs
                          withJavaUtilMap:(id<JavaUtilMap>)cleaned {
  EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_cleanupTagsWithJavaUtilCollection_withJavaUtilMap_(self, objs, cleaned);
}

- (void)cleanupTagsWithEduStanfordNlpUtilCoreMap:(id<EduStanfordNlpUtilCoreMap>)cm {
  EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_cleanupTagsWithEduStanfordNlpUtilCoreMap_(self, cm);
}

- (void)cleanupTagsWithEduStanfordNlpUtilCoreMap:(id<EduStanfordNlpUtilCoreMap>)cm
                                 withJavaUtilMap:(id<JavaUtilMap>)cleaned {
  EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_cleanupTagsWithEduStanfordNlpUtilCoreMap_withJavaUtilMap_(self, cm, cleaned);
}

- (EduStanfordNlpUtilPair *)applyCompositeRuleWithEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule:(id<EduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule>)compositeExtractRule
                                                                                             withJavaUtilList:(id<JavaUtilList>)merged
                                                                                             withJavaUtilList:(id<JavaUtilList>)matchedExpressions
                                                                                                      withInt:(jint)limit {
  jboolean done = false;
  jint maxIters = limit;
  jint iters = 0;
  while (!done) {
    id<JavaUtilList> newExprs = new_JavaUtilArrayList_init();
    jboolean extracted = [((id<EduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule>) nil_chk(compositeExtractRule)) extractWithId:merged withJavaUtilList:newExprs];
    if (extracted) {
      EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_annotateExpressionsWithJavaUtilList_withJavaUtilList_(self, merged, newExprs);
      newExprs = EduStanfordNlpLingTokensregexMatchedExpression_removeNullValuesWithJavaUtilList_(newExprs);
      if ([((id<JavaUtilList>) nil_chk(newExprs)) size] > 0) {
        newExprs = EduStanfordNlpLingTokensregexMatchedExpression_removeNestedWithJavaUtilList_(newExprs);
        newExprs = EduStanfordNlpLingTokensregexMatchedExpression_removeOverlappingWithJavaUtilList_(newExprs);
        merged = EduStanfordNlpLingTokensregexMatchedExpression_replaceMergedWithJavaUtilList_withJavaUtilList_(merged, newExprs);
        [((id<JavaUtilList>) nil_chk(newExprs)) addAllWithJavaUtilCollection:matchedExpressions];
        matchedExpressions = EduStanfordNlpLingTokensregexMatchedExpression_removeNestedWithJavaUtilList_(newExprs);
        matchedExpressions = EduStanfordNlpLingTokensregexMatchedExpression_removeOverlappingWithJavaUtilList_(matchedExpressions);
      }
      else {
        extracted = false;
      }
    }
    done = !extracted;
    iters++;
    if (maxIters > 0 && iters >= maxIters) {
      [((JavaUtilLoggingLogger *) nil_chk(logger_)) warningWithNSString:JreStrcat("$I$", @"Aborting application of composite rules: Maximum iteration ", maxIters, @" reached")];
      break;
    }
  }
  return new_EduStanfordNlpUtilPair_initWithId_withId_(merged, matchedExpressions);
}

- (id<JavaUtilList>)extractExpressionsWithEduStanfordNlpUtilCoreMap:(id<EduStanfordNlpUtilCoreMap>)annotation {
  id<JavaUtilList> matchedExpressions = new_JavaUtilArrayList_init();
  id<JavaUtilList> stageIds = new_JavaUtilArrayList_initWithJavaUtilCollection_([((id<JavaUtilMap>) nil_chk(stages_)) keySet]);
  JavaUtilCollections_sortWithJavaUtilList_(stageIds);
  for (JavaLangInteger *boxed__ in stageIds) {
    jint stageId = [((JavaLangInteger *) nil_chk(boxed__)) intValue];
    EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_Stage *stage = [stages_ getWithId:JavaLangInteger_valueOfWithInt_(stageId)];
    id<EduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule> basicExtractRule = ((EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_Stage *) nil_chk(stage))->basicExtractRule_;
    if (stage->clearMatched_) {
      [((id<JavaUtilList>) nil_chk(matchedExpressions)) clear];
    }
    if (basicExtractRule != nil) {
      [basicExtractRule extractWithId:annotation withJavaUtilList:matchedExpressions];
      EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_annotateExpressionsWithEduStanfordNlpUtilCoreMap_withJavaUtilList_(self, annotation, matchedExpressions);
      matchedExpressions = EduStanfordNlpLingTokensregexMatchedExpression_removeNullValuesWithJavaUtilList_(matchedExpressions);
      matchedExpressions = EduStanfordNlpLingTokensregexMatchedExpression_removeNestedWithJavaUtilList_(matchedExpressions);
      matchedExpressions = EduStanfordNlpLingTokensregexMatchedExpression_removeOverlappingWithJavaUtilList_(matchedExpressions);
    }
    id<JavaUtilList> merged = EduStanfordNlpLingTokensregexMatchedExpression_replaceMergedUsingTokenOffsetsWithJavaUtilList_withJavaUtilList_((id<JavaUtilList>) cast_check([((id<EduStanfordNlpUtilCoreMap>) nil_chk(annotation)) getWithIOSClass:tokensAnnotationKey_], JavaUtilList_class_()), matchedExpressions);
    id<EduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule> compositeExtractRule = stage->compositeExtractRule_;
    if (compositeExtractRule != nil) {
      EduStanfordNlpUtilPair *p = [self applyCompositeRuleWithEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule:compositeExtractRule withJavaUtilList:merged withJavaUtilList:matchedExpressions withInt:stage->limitIters_];
      merged = [((EduStanfordNlpUtilPair *) nil_chk(p)) first];
      matchedExpressions = [p second];
    }
    matchedExpressions = EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_filterInvalidExpressionsWithJavaUtilFunctionPredicate_withJavaUtilList_(self, stage->filterRule_, matchedExpressions);
  }
  JavaUtilCollections_sortWithJavaUtilList_withJavaUtilComparator_(matchedExpressions, JreLoadStatic(EduStanfordNlpLingTokensregexMatchedExpression, EXPR_TOKEN_OFFSETS_NESTED_FIRST_COMPARATOR));
  if (!keepTags_) {
    EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_cleanupTagsWithEduStanfordNlpUtilCoreMap_(self, annotation);
  }
  return matchedExpressions;
}

- (void)annotateExpressionsWithEduStanfordNlpUtilCoreMap:(id<EduStanfordNlpUtilCoreMap>)annotation
                                        withJavaUtilList:(id<JavaUtilList>)expressions {
  EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_annotateExpressionsWithEduStanfordNlpUtilCoreMap_withJavaUtilList_(self, annotation, expressions);
}

- (void)annotateExpressionsWithJavaUtilList:(id<JavaUtilList>)chunks
                           withJavaUtilList:(id<JavaUtilList>)expressions {
  EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_annotateExpressionsWithJavaUtilList_withJavaUtilList_(self, chunks, expressions);
}

- (id<JavaUtilList>)filterInvalidExpressionsWithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)filterRule
                                                         withJavaUtilList:(id<JavaUtilList>)expressions {
  return EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_filterInvalidExpressionsWithJavaUtilFunctionPredicate_withJavaUtilList_(self, filterRule, expressions);
}

- (EduStanfordNlpLingTokensregexCoreMapExpressionExtractor *)keepTemporaryTags {
  self->keepTags_ = true;
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, 2, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule;", 0x2, 6, 7, -1, 8, -1, -1 },
    { NULL, "LJavaUtilList;", 0x2, 9, 4, -1, 10, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexEnv;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, 15, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexCoreMapExpressionExtractor;", 0x89, 16, 17, 18, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexCoreMapExpressionExtractor;", 0x9, 16, 1, 18, 19, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexCoreMapExpressionExtractor;", 0x9, 20, 21, 18, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexCoreMapExpressionExtractor;", 0x9, 22, 21, 23, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexTypesValue;", 0x1, 24, 25, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 26, 27, -1, 28, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 29, 30, -1, 31, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 32, 30, -1, 31, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 33, 4, -1, 34, -1, -1 },
    { NULL, "LJavaUtilList;", 0x8, 33, 35, -1, 36, -1, -1 },
    { NULL, "V", 0x2, 37, 38, -1, 39, -1, -1 },
    { NULL, "V", 0x2, 37, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 37, 40, -1, 41, -1, -1 },
    { NULL, "LEduStanfordNlpUtilPair;", 0x1, 42, 43, -1, 44, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 45, 30, -1, 46, -1, -1 },
    { NULL, "V", 0x2, 47, 48, -1, 49, -1, -1 },
    { NULL, "V", 0x2, 47, 50, -1, 51, -1, -1 },
    { NULL, "LJavaUtilList;", 0x2, 52, 53, -1, 54, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexCoreMapExpressionExtractor;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithEduStanfordNlpLingTokensregexEnv:);
  methods[2].selector = @selector(initWithEduStanfordNlpLingTokensregexEnv:withJavaUtilList:);
  methods[3].selector = @selector(appendRulesWithJavaUtilList:);
  methods[4].selector = @selector(createMergedRuleWithEduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule:withJavaUtilList:);
  methods[5].selector = @selector(collapseWithJavaUtilList:);
  methods[6].selector = @selector(getEnv);
  methods[7].selector = @selector(setLoggerWithJavaUtilLoggingLogger:);
  methods[8].selector = @selector(setExtractRulesWithEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule:withEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule:withJavaUtilFunctionPredicate:);
  methods[9].selector = @selector(createExtractorFromFilesWithEduStanfordNlpLingTokensregexEnv:withNSStringArray:);
  methods[10].selector = @selector(createExtractorFromFilesWithEduStanfordNlpLingTokensregexEnv:withJavaUtilList:);
  methods[11].selector = @selector(createExtractorFromFileWithEduStanfordNlpLingTokensregexEnv:withNSString:);
  methods[12].selector = @selector(createExtractorFromStringWithEduStanfordNlpLingTokensregexEnv:withNSString:);
  methods[13].selector = @selector(getValueWithNSString:);
  methods[14].selector = @selector(extractCoreMapsToListWithJavaUtilList:withEduStanfordNlpUtilCoreMap:);
  methods[15].selector = @selector(extractCoreMapsWithEduStanfordNlpUtilCoreMap:);
  methods[16].selector = @selector(extractCoreMapsMergedWithTokensWithEduStanfordNlpUtilCoreMap:);
  methods[17].selector = @selector(flattenWithJavaUtilList:);
  methods[18].selector = @selector(flattenWithJavaUtilList:withIOSClass:);
  methods[19].selector = @selector(cleanupTagsWithJavaUtilCollection:withJavaUtilMap:);
  methods[20].selector = @selector(cleanupTagsWithEduStanfordNlpUtilCoreMap:);
  methods[21].selector = @selector(cleanupTagsWithEduStanfordNlpUtilCoreMap:withJavaUtilMap:);
  methods[22].selector = @selector(applyCompositeRuleWithEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule:withJavaUtilList:withJavaUtilList:withInt:);
  methods[23].selector = @selector(extractExpressionsWithEduStanfordNlpUtilCoreMap:);
  methods[24].selector = @selector(annotateExpressionsWithEduStanfordNlpUtilCoreMap:withJavaUtilList:);
  methods[25].selector = @selector(annotateExpressionsWithJavaUtilList:withJavaUtilList:);
  methods[26].selector = @selector(filterInvalidExpressionsWithJavaUtilFunctionPredicate:withJavaUtilList:);
  methods[27].selector = @selector(keepTemporaryTags);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "logger_", "LJavaUtilLoggingLogger;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "env_", "LEduStanfordNlpLingTokensregexEnv;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "keepTags_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "collapseExtractionRules_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "tokensAnnotationKey_", "LIOSClass;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "stages_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 55, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpLingTokensregexEnv;", "LEduStanfordNlpLingTokensregexEnv;LJavaUtilList;", "(Ledu/stanford/nlp/ling/tokensregex/Env;Ljava/util/List<Ledu/stanford/nlp/ling/tokensregex/SequenceMatchRules$Rule;>;)V", "appendRules", "LJavaUtilList;", "(Ljava/util/List<Ledu/stanford/nlp/ling/tokensregex/SequenceMatchRules$Rule;>;)V", "createMergedRule", "LEduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule;LJavaUtilList;", "(Ledu/stanford/nlp/ling/tokensregex/SequenceMatchRules$AnnotationExtractRule;Ljava/util/List<Ledu/stanford/nlp/ling/tokensregex/TokenSequencePattern;>;)Ledu/stanford/nlp/ling/tokensregex/SequenceMatchRules$AnnotationExtractRule;", "collapse", "(Ljava/util/List<Ledu/stanford/nlp/ling/tokensregex/SequenceMatchRules$Rule;>;)Ljava/util/List<Ledu/stanford/nlp/ling/tokensregex/SequenceMatchRules$Rule;>;", "setLogger", "LJavaUtilLoggingLogger;", "setExtractRules", "LEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule;LEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule;LJavaUtilFunctionPredicate;", "(Ledu/stanford/nlp/ling/tokensregex/SequenceMatchRules$ExtractRule<Ledu/stanford/nlp/util/CoreMap;TT;>;Ledu/stanford/nlp/ling/tokensregex/SequenceMatchRules$ExtractRule<Ljava/util/List<+Ledu/stanford/nlp/util/CoreMap;>;TT;>;Ljava/util/function/Predicate<TT;>;)V", "createExtractorFromFiles", "LEduStanfordNlpLingTokensregexEnv;[LNSString;", "LJavaLangRuntimeException;", "(Ledu/stanford/nlp/ling/tokensregex/Env;Ljava/util/List<Ljava/lang/String;>;)Ledu/stanford/nlp/ling/tokensregex/CoreMapExpressionExtractor;", "createExtractorFromFile", "LEduStanfordNlpLingTokensregexEnv;LNSString;", "createExtractorFromString", "LJavaIoIOException;LEduStanfordNlpLingTokensregexParserParseException;LEduStanfordNlpLingTokensregexParserTokenSequenceParseException;", "getValue", "LNSString;", "extractCoreMapsToList", "LJavaUtilList;LEduStanfordNlpUtilCoreMap;", "(Ljava/util/List<Ledu/stanford/nlp/util/CoreMap;>;Ledu/stanford/nlp/util/CoreMap;)Ljava/util/List<Ledu/stanford/nlp/util/CoreMap;>;", "extractCoreMaps", "LEduStanfordNlpUtilCoreMap;", "(Ledu/stanford/nlp/util/CoreMap;)Ljava/util/List<Ledu/stanford/nlp/util/CoreMap;>;", "extractCoreMapsMergedWithTokens", "flatten", "(Ljava/util/List<Ledu/stanford/nlp/util/CoreMap;>;)Ljava/util/List<Ledu/stanford/nlp/util/CoreMap;>;", "LJavaUtilList;LIOSClass;", "(Ljava/util/List<Ledu/stanford/nlp/util/CoreMap;>;Ljava/lang/Class;)Ljava/util/List<Ledu/stanford/nlp/util/CoreMap;>;", "cleanupTags", "LJavaUtilCollection;LJavaUtilMap;", "(Ljava/util/Collection;Ljava/util/Map<Ljava/lang/Object;Ljava/lang/Boolean;>;)V", "LEduStanfordNlpUtilCoreMap;LJavaUtilMap;", "(Ledu/stanford/nlp/util/CoreMap;Ljava/util/Map<Ljava/lang/Object;Ljava/lang/Boolean;>;)V", "applyCompositeRule", "LEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule;LJavaUtilList;LJavaUtilList;I", "(Ledu/stanford/nlp/ling/tokensregex/SequenceMatchRules$ExtractRule<Ljava/util/List<+Ledu/stanford/nlp/util/CoreMap;>;TT;>;Ljava/util/List<+Ledu/stanford/nlp/util/CoreMap;>;Ljava/util/List<TT;>;I)Ledu/stanford/nlp/util/Pair<Ljava/util/List<+Ledu/stanford/nlp/util/CoreMap;>;Ljava/util/List<TT;>;>;", "extractExpressions", "(Ledu/stanford/nlp/util/CoreMap;)Ljava/util/List<TT;>;", "annotateExpressions", "LEduStanfordNlpUtilCoreMap;LJavaUtilList;", "(Ledu/stanford/nlp/util/CoreMap;Ljava/util/List<TT;>;)V", "LJavaUtilList;LJavaUtilList;", "(Ljava/util/List<+Ledu/stanford/nlp/util/CoreMap;>;Ljava/util/List<TT;>;)V", "filterInvalidExpressions", "LJavaUtilFunctionPredicate;LJavaUtilList;", "(Ljava/util/function/Predicate<TT;>;Ljava/util/List<TT;>;)Ljava/util/List<TT;>;", "Ljava/util/Map<Ljava/lang/Integer;Ledu/stanford/nlp/ling/tokensregex/CoreMapExpressionExtractor$Stage<TT;>;>;", "LEduStanfordNlpLingTokensregexCoreMapExpressionExtractor_Stage;LEduStanfordNlpLingTokensregexCoreMapExpressionExtractor_CompositeMatchState;", "<T:Ledu/stanford/nlp/ling/tokensregex/MatchedExpression;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexCoreMapExpressionExtractor = { "CoreMapExpressionExtractor", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, fields, 7, 0x1, 28, 6, -1, 56, -1, 57, -1 };
  return &_EduStanfordNlpLingTokensregexCoreMapExpressionExtractor;
}

@end

void EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_init(EduStanfordNlpLingTokensregexCoreMapExpressionExtractor *self) {
  EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_initWithEduStanfordNlpLingTokensregexEnv_(self, nil);
}

EduStanfordNlpLingTokensregexCoreMapExpressionExtractor *new_EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexCoreMapExpressionExtractor, init)
}

EduStanfordNlpLingTokensregexCoreMapExpressionExtractor *create_EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexCoreMapExpressionExtractor, init)
}

void EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_initWithEduStanfordNlpLingTokensregexEnv_(EduStanfordNlpLingTokensregexCoreMapExpressionExtractor *self, EduStanfordNlpLingTokensregexEnv *env) {
  NSObject_init(self);
  self->logger_ = JavaUtilLoggingLogger_getLoggerWithNSString_([EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_class_() getName]);
  self->keepTags_ = false;
  self->collapseExtractionRules_ = false;
  self->stages_ = new_JavaUtilHashMap_init();
  self->env_ = env;
  self->tokensAnnotationKey_ = EduStanfordNlpLingTokensregexEnvLookup_getDefaultTokensAnnotationKeyWithEduStanfordNlpLingTokensregexEnv_(env);
  self->collapseExtractionRules_ = false;
  if (env != nil) {
    self->collapseExtractionRules_ = JavaUtilObjects_equalsWithId_withId_((JavaLangBoolean *) cast_chk([env getWithNSString:@"collapseExtractionRules"], [JavaLangBoolean class]), JavaLangBoolean_valueOfWithBoolean_(true));
  }
}

EduStanfordNlpLingTokensregexCoreMapExpressionExtractor *new_EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_initWithEduStanfordNlpLingTokensregexEnv_(EduStanfordNlpLingTokensregexEnv *env) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexCoreMapExpressionExtractor, initWithEduStanfordNlpLingTokensregexEnv_, env)
}

EduStanfordNlpLingTokensregexCoreMapExpressionExtractor *create_EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_initWithEduStanfordNlpLingTokensregexEnv_(EduStanfordNlpLingTokensregexEnv *env) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexCoreMapExpressionExtractor, initWithEduStanfordNlpLingTokensregexEnv_, env)
}

void EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_initWithEduStanfordNlpLingTokensregexEnv_withJavaUtilList_(EduStanfordNlpLingTokensregexCoreMapExpressionExtractor *self, EduStanfordNlpLingTokensregexEnv *env, id<JavaUtilList> rules) {
  EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_initWithEduStanfordNlpLingTokensregexEnv_(self, env);
  [self appendRulesWithJavaUtilList:rules];
}

EduStanfordNlpLingTokensregexCoreMapExpressionExtractor *new_EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_initWithEduStanfordNlpLingTokensregexEnv_withJavaUtilList_(EduStanfordNlpLingTokensregexEnv *env, id<JavaUtilList> rules) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexCoreMapExpressionExtractor, initWithEduStanfordNlpLingTokensregexEnv_withJavaUtilList_, env, rules)
}

EduStanfordNlpLingTokensregexCoreMapExpressionExtractor *create_EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_initWithEduStanfordNlpLingTokensregexEnv_withJavaUtilList_(EduStanfordNlpLingTokensregexEnv *env, id<JavaUtilList> rules) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexCoreMapExpressionExtractor, initWithEduStanfordNlpLingTokensregexEnv_withJavaUtilList_, env, rules)
}

EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule *EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_createMergedRuleWithEduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule_withJavaUtilList_(EduStanfordNlpLingTokensregexCoreMapExpressionExtractor *self, EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule *aerTemplate, id<JavaUtilList> patterns) {
  return EduStanfordNlpLingTokensregexSequenceMatchRules_createMultiTokenPatternRuleWithEduStanfordNlpLingTokensregexEnv_withEduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule_withJavaUtilList_(self->env_, aerTemplate, patterns);
}

id<JavaUtilList> EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_collapseWithJavaUtilList_(EduStanfordNlpLingTokensregexCoreMapExpressionExtractor *self, id<JavaUtilList> rules) {
  id<JavaUtilList> collapsed = new_JavaUtilArrayList_init();
  id<JavaUtilList> patterns = nil;
  EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule *aerTemplate = nil;
  for (id<EduStanfordNlpLingTokensregexSequenceMatchRules_Rule> __strong rule in nil_chk(rules)) {
    jboolean ruleHandled = false;
    if ([rule isKindOfClass:[EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule class]]) {
      EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule *aer = (EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule *) cast_chk(rule, [EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule class]);
      if ([((EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule *) nil_chk(aer)) hasTokensRegexPattern]) {
        if (aerTemplate == nil || [aerTemplate isMostlyCompatibleWithEduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule:aer]) {
          if (aerTemplate == nil) {
            aerTemplate = aer;
          }
          if (patterns == nil) {
            patterns = new_JavaUtilArrayList_init();
          }
          [patterns addWithId:(EduStanfordNlpLingTokensregexTokenSequencePattern *) cast_chk(aer->pattern_, [EduStanfordNlpLingTokensregexTokenSequencePattern class])];
          ruleHandled = true;
        }
      }
    }
    if (!ruleHandled) {
      if (aerTemplate != nil) {
        EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule *merged = EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_createMergedRuleWithEduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule_withJavaUtilList_(self, aerTemplate, patterns);
        [collapsed addWithId:merged];
        aerTemplate = nil;
        patterns = nil;
      }
      [collapsed addWithId:rule];
    }
  }
  if (aerTemplate != nil) {
    EduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule *merged = EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_createMergedRuleWithEduStanfordNlpLingTokensregexSequenceMatchRules_AnnotationExtractRule_withJavaUtilList_(self, aerTemplate, patterns);
    [collapsed addWithId:merged];
  }
  return collapsed;
}

EduStanfordNlpLingTokensregexCoreMapExpressionExtractor *EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_createExtractorFromFilesWithEduStanfordNlpLingTokensregexEnv_withNSStringArray_(EduStanfordNlpLingTokensregexEnv *env, IOSObjectArray *filenames) {
  EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_initialize();
  return EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_createExtractorFromFilesWithEduStanfordNlpLingTokensregexEnv_withJavaUtilList_(env, JavaUtilArrays_asListWithNSObjectArray_(filenames));
}

EduStanfordNlpLingTokensregexCoreMapExpressionExtractor *EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_createExtractorFromFilesWithEduStanfordNlpLingTokensregexEnv_withJavaUtilList_(EduStanfordNlpLingTokensregexEnv *env, id<JavaUtilList> filenames) {
  EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_initialize();
  EduStanfordNlpLingTokensregexCoreMapExpressionExtractor *extractor = new_EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_initWithEduStanfordNlpLingTokensregexEnv_(env);
  for (NSString * __strong filename in nil_chk(filenames)) {
    @try {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$", @"Reading TokensRegex rules from ", filename)];
      JavaIoBufferedReader *br = EduStanfordNlpIoIOUtils_readerFromStringWithNSString_(filename);
      EduStanfordNlpLingTokensregexParserTokenSequenceParser *parser = new_EduStanfordNlpLingTokensregexParserTokenSequenceParser_init();
      [parser updateExpressionExtractorWithEduStanfordNlpLingTokensregexCoreMapExpressionExtractor:extractor withJavaIoReader:br];
      EduStanfordNlpIoIOUtils_closeIgnoringExceptionsWithJavaIoCloseable_(br);
    }
    @catch (JavaLangException *ex) {
      @throw new_JavaLangRuntimeException_initWithNSString_withNSException_(JreStrcat("$$", @"Error parsing file: ", filename), ex);
    }
  }
  return extractor;
}

EduStanfordNlpLingTokensregexCoreMapExpressionExtractor *EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_createExtractorFromFileWithEduStanfordNlpLingTokensregexEnv_withNSString_(EduStanfordNlpLingTokensregexEnv *env, NSString *filename) {
  EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_initialize();
  return EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_createExtractorFromFilesWithEduStanfordNlpLingTokensregexEnv_withJavaUtilList_(env, JavaUtilCollections_singletonListWithId_(filename));
}

EduStanfordNlpLingTokensregexCoreMapExpressionExtractor *EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_createExtractorFromStringWithEduStanfordNlpLingTokensregexEnv_withNSString_(EduStanfordNlpLingTokensregexEnv *env, NSString *str) {
  EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_initialize();
  EduStanfordNlpLingTokensregexParserTokenSequenceParser *parser = new_EduStanfordNlpLingTokensregexParserTokenSequenceParser_init();
  EduStanfordNlpLingTokensregexCoreMapExpressionExtractor *extractor = [parser getExpressionExtractorWithEduStanfordNlpLingTokensregexEnv:env withJavaIoReader:new_JavaIoStringReader_initWithNSString_(str)];
  return extractor;
}

id<JavaUtilList> EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_flattenWithJavaUtilList_withIOSClass_(id<JavaUtilList> cms, IOSClass *key) {
  EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_initialize();
  id<JavaUtilList> res = new_JavaUtilArrayList_init();
  for (id<EduStanfordNlpUtilCoreMap> __strong cm in nil_chk(cms)) {
    if ([((id<EduStanfordNlpUtilCoreMap>) nil_chk(cm)) getWithIOSClass:key] != nil) {
      [res addAllWithJavaUtilCollection:(id<JavaUtilList>) cast_check([cm getWithIOSClass:key], JavaUtilList_class_())];
    }
    else {
      [res addWithId:cm];
    }
  }
  return res;
}

void EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_cleanupTagsWithJavaUtilCollection_withJavaUtilMap_(EduStanfordNlpLingTokensregexCoreMapExpressionExtractor *self, id<JavaUtilCollection> objs, id<JavaUtilMap> cleaned) {
  for (id __strong obj in nil_chk(objs)) {
    if (![((id<JavaUtilMap>) nil_chk(cleaned)) containsKeyWithId:obj]) {
      (void) [cleaned putWithId:obj withId:JavaLangBoolean_valueOfWithBoolean_(false)];
      if ([EduStanfordNlpUtilCoreMap_class_() isInstance:obj]) {
        EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_cleanupTagsWithEduStanfordNlpUtilCoreMap_withJavaUtilMap_(self, (id<EduStanfordNlpUtilCoreMap>) cast_check(obj, EduStanfordNlpUtilCoreMap_class_()), cleaned);
      }
      else if ([JavaUtilCollection_class_() isInstance:obj]) {
        EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_cleanupTagsWithJavaUtilCollection_withJavaUtilMap_(self, (id<JavaUtilCollection>) cast_check(obj, JavaUtilCollection_class_()), cleaned);
      }
      (void) [cleaned putWithId:obj withId:JavaLangBoolean_valueOfWithBoolean_(true)];
    }
  }
}

void EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_cleanupTagsWithEduStanfordNlpUtilCoreMap_(EduStanfordNlpLingTokensregexCoreMapExpressionExtractor *self, id<EduStanfordNlpUtilCoreMap> cm) {
  EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_cleanupTagsWithEduStanfordNlpUtilCoreMap_withJavaUtilMap_(self, cm, new_JavaUtilIdentityHashMap_init());
}

void EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_cleanupTagsWithEduStanfordNlpUtilCoreMap_withJavaUtilMap_(EduStanfordNlpLingTokensregexCoreMapExpressionExtractor *self, id<EduStanfordNlpUtilCoreMap> cm, id<JavaUtilMap> cleaned) {
  (void) [((id<EduStanfordNlpUtilCoreMap>) nil_chk(cm)) removeWithIOSClass:EduStanfordNlpLingTokensregexTypesTags_TagsAnnotation_class_()];
  for (IOSClass * __strong key in nil_chk([cm keySet])) {
    id obj = [cm getWithIOSClass:key];
    if (![((id<JavaUtilMap>) nil_chk(cleaned)) containsKeyWithId:obj]) {
      (void) [cleaned putWithId:obj withId:JavaLangBoolean_valueOfWithBoolean_(false)];
      if ([EduStanfordNlpUtilCoreMap_class_() isInstance:obj]) {
        EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_cleanupTagsWithEduStanfordNlpUtilCoreMap_withJavaUtilMap_(self, (id<EduStanfordNlpUtilCoreMap>) cast_check(obj, EduStanfordNlpUtilCoreMap_class_()), cleaned);
      }
      else if ([JavaUtilCollection_class_() isInstance:obj]) {
        EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_cleanupTagsWithJavaUtilCollection_withJavaUtilMap_(self, (id<JavaUtilCollection>) cast_check(obj, JavaUtilCollection_class_()), cleaned);
      }
      (void) [cleaned putWithId:obj withId:JavaLangBoolean_valueOfWithBoolean_(true)];
    }
  }
}

void EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_annotateExpressionsWithEduStanfordNlpUtilCoreMap_withJavaUtilList_(EduStanfordNlpLingTokensregexCoreMapExpressionExtractor *self, id<EduStanfordNlpUtilCoreMap> annotation, id<JavaUtilList> expressions) {
  id<JavaUtilList> toDiscard = new_JavaUtilArrayList_init();
  for (EduStanfordNlpLingTokensregexMatchedExpression * __strong te in nil_chk(expressions)) {
    if (((EduStanfordNlpLingTokensregexMatchedExpression *) nil_chk(te))->annotation_ == nil) {
      @try {
        jboolean extrackOkay = [te extractAnnotationWithEduStanfordNlpLingTokensregexEnv:self->env_ withEduStanfordNlpUtilCoreMap:annotation];
        if (!extrackOkay) {
          [toDiscard addWithId:te];
          [((JavaUtilLoggingLogger *) nil_chk(self->logger_)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, WARNING) withNSString:JreStrcat("$@", @"Error extracting annotation from ", te)];
        }
      }
      @catch (JavaLangException *ex) {
        [((JavaUtilLoggingLogger *) nil_chk(self->logger_)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, WARNING) withNSString:JreStrcat("$@", @"Error extracting annotation from ", te) withNSException:ex];
      }
    }
  }
  [expressions removeAllWithJavaUtilCollection:toDiscard];
}

void EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_annotateExpressionsWithJavaUtilList_withJavaUtilList_(EduStanfordNlpLingTokensregexCoreMapExpressionExtractor *self, id<JavaUtilList> chunks, id<JavaUtilList> expressions) {
  id<JavaUtilList> toDiscard = new_JavaUtilArrayList_init();
  for (EduStanfordNlpLingTokensregexMatchedExpression * __strong te in nil_chk(expressions)) {
    @try {
      jboolean extractOkay = [((EduStanfordNlpLingTokensregexMatchedExpression *) nil_chk(te)) extractAnnotationWithEduStanfordNlpLingTokensregexEnv:self->env_ withJavaUtilList:chunks];
      if (!extractOkay) {
        [toDiscard addWithId:te];
        [((JavaUtilLoggingLogger *) nil_chk(self->logger_)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, WARNING) withNSString:JreStrcat("$@", @"Error extracting annotation from ", te)];
      }
    }
    @catch (JavaLangException *ex) {
      [((JavaUtilLoggingLogger *) nil_chk(self->logger_)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, WARNING) withNSString:JreStrcat("$@", @"Error extracting annotation from ", te) withNSException:ex];
    }
  }
  [expressions removeAllWithJavaUtilCollection:toDiscard];
}

id<JavaUtilList> EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_filterInvalidExpressionsWithJavaUtilFunctionPredicate_withJavaUtilList_(EduStanfordNlpLingTokensregexCoreMapExpressionExtractor *self, id<JavaUtilFunctionPredicate> filterRule, id<JavaUtilList> expressions) {
  if (filterRule == nil) return expressions;
  if ([((id<JavaUtilList>) nil_chk(expressions)) size] == 0) return expressions;
  jint nfiltered = 0;
  id<JavaUtilList> kept = new_JavaUtilArrayList_initWithInt_([expressions size]);
  for (EduStanfordNlpLingTokensregexMatchedExpression * __strong expr in expressions) {
    if (![filterRule testWithId:expr]) {
      [kept addWithId:expr];
    }
    else {
      nfiltered++;
    }
  }
  if (nfiltered > 0) {
    [((JavaUtilLoggingLogger *) nil_chk(self->logger_)) finestWithNSString:JreStrcat("$I", @"Filtered ", nfiltered)];
  }
  return kept;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexCoreMapExpressionExtractor)

@implementation EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_Stage

+ (id<EduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule>)addRuleWithEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule:(id<EduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule>)origRule
                                                                          withEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule:(id<EduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule>)rule {
  return EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_Stage_addRuleWithEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule_withEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule_(origRule, rule);
}

- (void)addCompositeRuleWithEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule:(id<EduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule>)rule {
  EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_Stage_addCompositeRuleWithEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule_(self, rule);
}

- (void)addBasicRuleWithEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule:(id<EduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule>)rule {
  EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_Stage_addBasicRuleWithEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule_(self, rule);
}

- (void)addFilterRuleWithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)rule {
  EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_Stage_addFilterRuleWithJavaUtilFunctionPredicate_(self, rule);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_Stage_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule;", 0xa, 0, 1, -1, 2, -1, -1 },
    { NULL, "V", 0x2, 3, 4, -1, 5, -1, -1 },
    { NULL, "V", 0x2, 6, 4, -1, 7, -1, -1 },
    { NULL, "V", 0x2, 8, 9, -1, 10, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(addRuleWithEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule:withEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule:);
  methods[1].selector = @selector(addCompositeRuleWithEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule:);
  methods[2].selector = @selector(addBasicRuleWithEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule:);
  methods[3].selector = @selector(addFilterRuleWithJavaUtilFunctionPredicate:);
  methods[4].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "clearMatched_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "limitIters_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "stageId_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "basicExtractRule_", "LEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule;", .constantValue.asLong = 0, 0x0, -1, -1, 11, -1 },
    { "compositeExtractRule_", "LEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule;", .constantValue.asLong = 0, 0x0, -1, -1, 12, -1 },
    { "filterRule_", "LJavaUtilFunctionPredicate;", .constantValue.asLong = 0, 0x0, -1, -1, 13, -1 },
  };
  static const void *ptrTable[] = { "addRule", "LEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule;LEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule;", "<I:Ljava/lang/Object;O:Ljava/lang/Object;>(Ledu/stanford/nlp/ling/tokensregex/SequenceMatchRules$ExtractRule<TI;TO;>;Ledu/stanford/nlp/ling/tokensregex/SequenceMatchRules$ExtractRule<TI;TO;>;)Ledu/stanford/nlp/ling/tokensregex/SequenceMatchRules$ExtractRule<TI;TO;>;", "addCompositeRule", "LEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule;", "(Ledu/stanford/nlp/ling/tokensregex/SequenceMatchRules$ExtractRule<Ljava/util/List<+Ledu/stanford/nlp/util/CoreMap;>;TT;>;)V", "addBasicRule", "(Ledu/stanford/nlp/ling/tokensregex/SequenceMatchRules$ExtractRule<Ledu/stanford/nlp/util/CoreMap;TT;>;)V", "addFilterRule", "LJavaUtilFunctionPredicate;", "(Ljava/util/function/Predicate<TT;>;)V", "Ledu/stanford/nlp/ling/tokensregex/SequenceMatchRules$ExtractRule<Ledu/stanford/nlp/util/CoreMap;TT;>;", "Ledu/stanford/nlp/ling/tokensregex/SequenceMatchRules$ExtractRule<Ljava/util/List<+Ledu/stanford/nlp/util/CoreMap;>;TT;>;", "Ljava/util/function/Predicate<TT;>;", "LEduStanfordNlpLingTokensregexCoreMapExpressionExtractor;", "<T:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_Stage = { "Stage", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, fields, 7, 0x9, 5, 6, 14, -1, -1, 15, -1 };
  return &_EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_Stage;
}

@end

id<EduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule> EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_Stage_addRuleWithEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule_withEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule_(id<EduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule> origRule, id<EduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule> rule) {
  EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_Stage_initialize();
  EduStanfordNlpLingTokensregexSequenceMatchRules_ListExtractRule *r;
  if ([origRule isKindOfClass:[EduStanfordNlpLingTokensregexSequenceMatchRules_ListExtractRule class]]) {
    r = (EduStanfordNlpLingTokensregexSequenceMatchRules_ListExtractRule *) cast_chk(origRule, [EduStanfordNlpLingTokensregexSequenceMatchRules_ListExtractRule class]);
  }
  else {
    r = new_EduStanfordNlpLingTokensregexSequenceMatchRules_ListExtractRule_initWithEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRuleArray_([IOSObjectArray newArrayWithLength:0 type:EduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule_class_()]);
    if (origRule != nil) [r addRulesWithEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRuleArray:[IOSObjectArray newArrayWithObjects:(id[]){ origRule } count:1 type:EduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule_class_()]];
  }
  [((EduStanfordNlpLingTokensregexSequenceMatchRules_ListExtractRule *) nil_chk(r)) addRulesWithEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRuleArray:[IOSObjectArray newArrayWithObjects:(id[]){ rule } count:1 type:EduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule_class_()]];
  return r;
}

void EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_Stage_addCompositeRuleWithEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule_(EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_Stage *self, id<EduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule> rule) {
  self->compositeExtractRule_ = EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_Stage_addRuleWithEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule_withEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule_(self->compositeExtractRule_, rule);
}

void EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_Stage_addBasicRuleWithEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule_(EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_Stage *self, id<EduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule> rule) {
  self->basicExtractRule_ = EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_Stage_addRuleWithEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule_withEduStanfordNlpLingTokensregexSequenceMatchRules_ExtractRule_(self->basicExtractRule_, rule);
}

void EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_Stage_addFilterRuleWithJavaUtilFunctionPredicate_(EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_Stage *self, id<JavaUtilFunctionPredicate> rule) {
  EduStanfordNlpUtilFilters_DisjFilter *r;
  if ([self->filterRule_ isKindOfClass:[EduStanfordNlpUtilFilters_DisjFilter class]]) {
    r = (EduStanfordNlpUtilFilters_DisjFilter *) cast_chk(self->filterRule_, [EduStanfordNlpUtilFilters_DisjFilter class]);
    [((EduStanfordNlpUtilFilters_DisjFilter *) nil_chk(r)) addFilterWithJavaUtilFunctionPredicate:rule];
  }
  else {
    if (self->filterRule_ == nil) {
      r = new_EduStanfordNlpUtilFilters_DisjFilter_initWithJavaUtilFunctionPredicateArray_([IOSObjectArray newArrayWithObjects:(id[]){ rule } count:1 type:JavaUtilFunctionPredicate_class_()]);
    }
    else {
      r = new_EduStanfordNlpUtilFilters_DisjFilter_initWithJavaUtilFunctionPredicateArray_([IOSObjectArray newArrayWithObjects:(id[]){ self->filterRule_, rule } count:2 type:JavaUtilFunctionPredicate_class_()]);
    }
    self->filterRule_ = r;
  }
}

void EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_Stage_init(EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_Stage *self) {
  NSObject_init(self);
  self->clearMatched_ = false;
  self->limitIters_ = 50;
}

EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_Stage *new_EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_Stage_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_Stage, init)
}

EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_Stage *create_EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_Stage_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_Stage, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_Stage)

@implementation EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_CompositeMatchState

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)merged
                    withJavaUtilList:(id<JavaUtilList>)matched
                             withInt:(jint)iters {
  EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_CompositeMatchState_initWithJavaUtilList_withJavaUtilList_withInt_(self, merged, matched, iters);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilList:withJavaUtilList:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "merged_", "LJavaUtilList;", .constantValue.asLong = 0, 0x0, -1, -1, 2, -1 },
    { "matched_", "LJavaUtilList;", .constantValue.asLong = 0, 0x0, -1, -1, 3, -1 },
    { "iters_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilList;LJavaUtilList;I", "(Ljava/util/List<+Ledu/stanford/nlp/util/CoreMap;>;Ljava/util/List<TT;>;I)V", "Ljava/util/List<+Ledu/stanford/nlp/util/CoreMap;>;", "Ljava/util/List<TT;>;", "LEduStanfordNlpLingTokensregexCoreMapExpressionExtractor;", "<T:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_CompositeMatchState = { "CompositeMatchState", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, fields, 7, 0xa, 1, 3, 4, -1, -1, 5, -1 };
  return &_EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_CompositeMatchState;
}

@end

void EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_CompositeMatchState_initWithJavaUtilList_withJavaUtilList_withInt_(EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_CompositeMatchState *self, id<JavaUtilList> merged, id<JavaUtilList> matched, jint iters) {
  NSObject_init(self);
  self->merged_ = merged;
  self->matched_ = matched;
  self->iters_ = iters;
}

EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_CompositeMatchState *new_EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_CompositeMatchState_initWithJavaUtilList_withJavaUtilList_withInt_(id<JavaUtilList> merged, id<JavaUtilList> matched, jint iters) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_CompositeMatchState, initWithJavaUtilList_withJavaUtilList_withInt_, merged, matched, iters)
}

EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_CompositeMatchState *create_EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_CompositeMatchState_initWithJavaUtilList_withJavaUtilList_withInt_(id<JavaUtilList> merged, id<JavaUtilList> matched, jint iters) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_CompositeMatchState, initWithJavaUtilList_withJavaUtilList_withInt_, merged, matched, iters)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_CompositeMatchState)

@implementation EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_$Lambda$1

- (id)applyWithId:(id<EduStanfordNlpUtilCoreMap>)inArg {
  return EduStanfordNlpUtilInterval_toIntervalWithJavaLangComparable_withJavaLangComparable_(JavaLangInteger_valueOfWithInt_([((JavaLangInteger *) nil_chk([((id<EduStanfordNlpUtilCoreMap>) nil_chk(inArg)) getWithIOSClass:EduStanfordNlpLingCoreAnnotations_TokenBeginAnnotation_class_()])) intValue] - [((JavaLangInteger *) nil_chk(val$startTokenOffsetFinal_)) intValue]), JavaLangInteger_valueOfWithInt_([((JavaLangInteger *) nil_chk([inArg getWithIOSClass:EduStanfordNlpLingCoreAnnotations_TokenEndAnnotation_class_()])) intValue] - [val$startTokenOffsetFinal_ intValue]));
}

- (id<JavaUtilFunctionFunction>)andThenWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_andThenWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilFunctionFunction>)composeWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_composeWithJavaUtilFunctionFunction_(self, arg0);
}

@end

void EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_$Lambda$1_initWithJavaLangInteger_(EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_$Lambda$1 *self, JavaLangInteger *capture$0) {
  self->val$startTokenOffsetFinal_ = capture$0;
  NSObject_init(self);
}

EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_$Lambda$1 *new_EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_$Lambda$1_initWithJavaLangInteger_(JavaLangInteger *capture$0) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_$Lambda$1, initWithJavaLangInteger_, capture$0)
}

EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_$Lambda$1 *create_EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_$Lambda$1_initWithJavaLangInteger_(JavaLangInteger *capture$0) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexCoreMapExpressionExtractor_$Lambda$1, initWithJavaLangInteger_, capture$0)
}
