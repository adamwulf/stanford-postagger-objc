//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/ling/tokensregex/CoreMapSequenceMatchAction.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/ling/tokensregex/BasicSequenceMatchResult.h"
#include "edu/stanford/nlp/ling/tokensregex/CoreMapSequenceMatchAction.h"
#include "edu/stanford/nlp/ling/tokensregex/SequenceMatchResult.h"
#include "edu/stanford/nlp/pipeline/ChunkAnnotationUtils.h"
#include "edu/stanford/nlp/pipeline/CoreMapAggregator.h"
#include "edu/stanford/nlp/util/CollectionUtils.h"
#include "edu/stanford/nlp/util/CoreMap.h"
#include "java/lang/Integer.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/List.h"
#include "java/util/Map.h"

#pragma clang diagnostic ignored "-Wprotocol"

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpLingTokensregexCoreMapSequenceMatchAction)

EduStanfordNlpLingTokensregexCoreMapSequenceMatchAction_MergeAction *EduStanfordNlpLingTokensregexCoreMapSequenceMatchAction_DEFAULT_MERGE_ACTION;

@implementation EduStanfordNlpLingTokensregexCoreMapSequenceMatchAction

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpLingTokensregexCoreMapSequenceMatchAction_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_MERGE_ACTION", "LEduStanfordNlpLingTokensregexCoreMapSequenceMatchAction_MergeAction;", .constantValue.asLong = 0, 0x19, -1, 0, -1, -1 },
  };
  static const void *ptrTable[] = { &EduStanfordNlpLingTokensregexCoreMapSequenceMatchAction_DEFAULT_MERGE_ACTION, "LEduStanfordNlpLingTokensregexCoreMapSequenceMatchAction_AnnotateAction;LEduStanfordNlpLingTokensregexCoreMapSequenceMatchAction_MergeAction;", "<T::Ledu/stanford/nlp/util/CoreMap;>Ljava/lang/Object;Ledu/stanford/nlp/ling/tokensregex/SequenceMatchAction<TT;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexCoreMapSequenceMatchAction = { "CoreMapSequenceMatchAction", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, fields, 7, 0x401, 1, 1, -1, 1, -1, 2, -1 };
  return &_EduStanfordNlpLingTokensregexCoreMapSequenceMatchAction;
}

+ (void)initialize {
  if (self == [EduStanfordNlpLingTokensregexCoreMapSequenceMatchAction class]) {
    EduStanfordNlpLingTokensregexCoreMapSequenceMatchAction_DEFAULT_MERGE_ACTION = new_EduStanfordNlpLingTokensregexCoreMapSequenceMatchAction_MergeAction_init();
    J2OBJC_SET_INITIALIZED(EduStanfordNlpLingTokensregexCoreMapSequenceMatchAction)
  }
}

@end

void EduStanfordNlpLingTokensregexCoreMapSequenceMatchAction_init(EduStanfordNlpLingTokensregexCoreMapSequenceMatchAction *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexCoreMapSequenceMatchAction)

@implementation EduStanfordNlpLingTokensregexCoreMapSequenceMatchAction_AnnotateAction

- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)attributes {
  EduStanfordNlpLingTokensregexCoreMapSequenceMatchAction_AnnotateAction_initWithJavaUtilMap_(self, attributes);
  return self;
}

- (id<EduStanfordNlpLingTokensregexSequenceMatchResult>)applyWithEduStanfordNlpLingTokensregexSequenceMatchResult:(id<EduStanfordNlpLingTokensregexSequenceMatchResult>)matchResult
                                                                                                     withIntArray:(IOSIntArray *)groups {
  {
    IOSIntArray *a__ = groups;
    jint const *b__ = ((IOSIntArray *) nil_chk(a__))->buffer_;
    jint const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jint group = *b__++;
      jint groupStart = [((id<EduStanfordNlpLingTokensregexSequenceMatchResult>) nil_chk(matchResult)) startWithInt:group];
      if (groupStart >= 0) {
        jint groupEnd = [matchResult endWithInt:group];
        EduStanfordNlpPipelineChunkAnnotationUtils_annotateChunksWithJavaUtilList_withInt_withInt_withJavaUtilMap_([matchResult elements], groupStart, groupEnd, attributes_);
      }
    }
  }
  return matchResult;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexSequenceMatchResult;", 0x81, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilMap:);
  methods[1].selector = @selector(applyWithEduStanfordNlpLingTokensregexSequenceMatchResult:withIntArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "attributes_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x0, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)V", "apply", "LEduStanfordNlpLingTokensregexSequenceMatchResult;[I", "(Ledu/stanford/nlp/ling/tokensregex/SequenceMatchResult<TT;>;[I)Ledu/stanford/nlp/ling/tokensregex/SequenceMatchResult<TT;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", "LEduStanfordNlpLingTokensregexCoreMapSequenceMatchAction;", "<T::Ledu/stanford/nlp/util/CoreMap;>Ledu/stanford/nlp/ling/tokensregex/CoreMapSequenceMatchAction<TT;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexCoreMapSequenceMatchAction_AnnotateAction = { "AnnotateAction", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, fields, 7, 0x19, 2, 1, 6, -1, -1, 7, -1 };
  return &_EduStanfordNlpLingTokensregexCoreMapSequenceMatchAction_AnnotateAction;
}

@end

void EduStanfordNlpLingTokensregexCoreMapSequenceMatchAction_AnnotateAction_initWithJavaUtilMap_(EduStanfordNlpLingTokensregexCoreMapSequenceMatchAction_AnnotateAction *self, id<JavaUtilMap> attributes) {
  EduStanfordNlpLingTokensregexCoreMapSequenceMatchAction_init(self);
  self->attributes_ = attributes;
}

EduStanfordNlpLingTokensregexCoreMapSequenceMatchAction_AnnotateAction *new_EduStanfordNlpLingTokensregexCoreMapSequenceMatchAction_AnnotateAction_initWithJavaUtilMap_(id<JavaUtilMap> attributes) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexCoreMapSequenceMatchAction_AnnotateAction, initWithJavaUtilMap_, attributes)
}

EduStanfordNlpLingTokensregexCoreMapSequenceMatchAction_AnnotateAction *create_EduStanfordNlpLingTokensregexCoreMapSequenceMatchAction_AnnotateAction_initWithJavaUtilMap_(id<JavaUtilMap> attributes) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexCoreMapSequenceMatchAction_AnnotateAction, initWithJavaUtilMap_, attributes)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexCoreMapSequenceMatchAction_AnnotateAction)

@implementation EduStanfordNlpLingTokensregexCoreMapSequenceMatchAction_MergeAction

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpLingTokensregexCoreMapSequenceMatchAction_MergeAction_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithEduStanfordNlpPipelineCoreMapAggregator:(EduStanfordNlpPipelineCoreMapAggregator *)aggregator {
  EduStanfordNlpLingTokensregexCoreMapSequenceMatchAction_MergeAction_initWithEduStanfordNlpPipelineCoreMapAggregator_(self, aggregator);
  return self;
}

- (id<EduStanfordNlpLingTokensregexSequenceMatchResult>)applyWithEduStanfordNlpLingTokensregexSequenceMatchResult:(id<EduStanfordNlpLingTokensregexSequenceMatchResult>)matchResult
                                                                                                     withIntArray:(IOSIntArray *)groups {
  EduStanfordNlpLingTokensregexBasicSequenceMatchResult *res = [((id<EduStanfordNlpLingTokensregexSequenceMatchResult>) nil_chk(matchResult)) toBasicSequenceMatchResult];
  id<JavaUtilList> elements = [matchResult elements];
  id<JavaUtilList> mergedElements = new_JavaUtilArrayList_init();
  ((EduStanfordNlpLingTokensregexBasicSequenceMatchResult *) nil_chk(res))->elements_ = mergedElements;
  jint last = 0;
  jint mergedGroup = 0;
  jint offset = 0;
  id<JavaUtilList> orderedGroups = EduStanfordNlpUtilCollectionUtils_asListWithIntArray_(groups);
  JavaUtilCollections_sortWithJavaUtilList_(orderedGroups);
  for (JavaLangInteger *boxed__ in nil_chk(orderedGroups)) {
    jint group = [((JavaLangInteger *) nil_chk(boxed__)) intValue];
    jint groupStart = [matchResult startWithInt:group];
    if (groupStart >= last) {
      [mergedElements addAllWithJavaUtilCollection:[((id<JavaUtilList>) nil_chk(elements)) subListWithInt:last withInt:groupStart]];
      for (; mergedGroup < group; mergedGroup++) {
        if (IOSObjectArray_Get(nil_chk(res->matchedGroups_), mergedGroup) != nil) {
          ((EduStanfordNlpLingTokensregexBasicSequenceMatchResult_MatchedGroup *) nil_chk(IOSObjectArray_Get(res->matchedGroups_, mergedGroup)))->matchBegin_ -= offset;
          ((EduStanfordNlpLingTokensregexBasicSequenceMatchResult_MatchedGroup *) nil_chk(IOSObjectArray_Get(res->matchedGroups_, mergedGroup)))->matchEnd_ -= offset;
        }
      }
      jint groupEnd = [matchResult endWithInt:group];
      if (groupEnd - groupStart >= 1) {
        id<EduStanfordNlpUtilCoreMap> merged = [((EduStanfordNlpPipelineCoreMapAggregator *) nil_chk(aggregator_)) mergeWithJavaUtilList:elements withInt:groupStart withInt:groupEnd];
        [mergedElements addWithId:merged];
        last = groupEnd;
        ((EduStanfordNlpLingTokensregexBasicSequenceMatchResult_MatchedGroup *) nil_chk(IOSObjectArray_Get(nil_chk(res->matchedGroups_), mergedGroup)))->matchBegin_ = [mergedElements size] - 1;
        ((EduStanfordNlpLingTokensregexBasicSequenceMatchResult_MatchedGroup *) nil_chk(IOSObjectArray_Get(nil_chk(res->matchedGroups_), mergedGroup)))->matchEnd_ = [mergedElements size];
        mergedGroup++;
        while (mergedGroup < ((IOSObjectArray *) nil_chk(res->matchedGroups_))->size_) {
          if (IOSObjectArray_Get(res->matchedGroups_, mergedGroup) != nil) {
            if (((EduStanfordNlpLingTokensregexBasicSequenceMatchResult_MatchedGroup *) nil_chk(IOSObjectArray_Get(res->matchedGroups_, mergedGroup)))->matchBegin_ == [matchResult startWithInt:group] && ((EduStanfordNlpLingTokensregexBasicSequenceMatchResult_MatchedGroup *) nil_chk(IOSObjectArray_Get(nil_chk(res->matchedGroups_), mergedGroup)))->matchEnd_ == [matchResult endWithInt:group]) {
              ((EduStanfordNlpLingTokensregexBasicSequenceMatchResult_MatchedGroup *) nil_chk(IOSObjectArray_Get(nil_chk(res->matchedGroups_), mergedGroup)))->matchBegin_ = ((EduStanfordNlpLingTokensregexBasicSequenceMatchResult_MatchedGroup *) nil_chk(IOSObjectArray_Get(res->matchedGroups_, group)))->matchBegin_;
              ((EduStanfordNlpLingTokensregexBasicSequenceMatchResult_MatchedGroup *) nil_chk(IOSObjectArray_Get(res->matchedGroups_, mergedGroup)))->matchEnd_ = ((EduStanfordNlpLingTokensregexBasicSequenceMatchResult_MatchedGroup *) nil_chk(IOSObjectArray_Get(res->matchedGroups_, group)))->matchEnd_;
            }
            else if (((EduStanfordNlpLingTokensregexBasicSequenceMatchResult_MatchedGroup *) nil_chk(IOSObjectArray_Get(nil_chk(res->matchedGroups_), mergedGroup)))->matchEnd_ <= [matchResult endWithInt:group]) {
              (void) IOSObjectArray_Set(nil_chk(res->matchedGroups_), mergedGroup, nil);
            }
            else {
              break;
            }
          }
          mergedGroup++;
        }
        offset = [matchResult endWithInt:group] - ((EduStanfordNlpLingTokensregexBasicSequenceMatchResult_MatchedGroup *) nil_chk(IOSObjectArray_Get(nil_chk(res->matchedGroups_), group)))->matchEnd_;
      }
    }
  }
  [mergedElements addAllWithJavaUtilCollection:[((id<JavaUtilList>) nil_chk(elements)) subListWithInt:last withInt:[elements size]]];
  for (; mergedGroup < ((IOSObjectArray *) nil_chk(res->matchedGroups_))->size_; mergedGroup++) {
    if (IOSObjectArray_Get(res->matchedGroups_, mergedGroup) != nil) {
      ((EduStanfordNlpLingTokensregexBasicSequenceMatchResult_MatchedGroup *) nil_chk(IOSObjectArray_Get(res->matchedGroups_, mergedGroup)))->matchBegin_ -= offset;
      ((EduStanfordNlpLingTokensregexBasicSequenceMatchResult_MatchedGroup *) nil_chk(IOSObjectArray_Get(res->matchedGroups_, mergedGroup)))->matchEnd_ -= offset;
    }
  }
  return res;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexSequenceMatchResult;", 0x81, 1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithEduStanfordNlpPipelineCoreMapAggregator:);
  methods[2].selector = @selector(applyWithEduStanfordNlpLingTokensregexSequenceMatchResult:withIntArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "aggregator_", "LEduStanfordNlpPipelineCoreMapAggregator;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpPipelineCoreMapAggregator;", "apply", "LEduStanfordNlpLingTokensregexSequenceMatchResult;[I", "(Ledu/stanford/nlp/ling/tokensregex/SequenceMatchResult<Ledu/stanford/nlp/util/CoreMap;>;[I)Ledu/stanford/nlp/ling/tokensregex/SequenceMatchResult<Ledu/stanford/nlp/util/CoreMap;>;", "LEduStanfordNlpLingTokensregexCoreMapSequenceMatchAction;", "Ledu/stanford/nlp/ling/tokensregex/CoreMapSequenceMatchAction<Ledu/stanford/nlp/util/CoreMap;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexCoreMapSequenceMatchAction_MergeAction = { "MergeAction", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, fields, 7, 0x19, 3, 1, 4, -1, -1, 5, -1 };
  return &_EduStanfordNlpLingTokensregexCoreMapSequenceMatchAction_MergeAction;
}

@end

void EduStanfordNlpLingTokensregexCoreMapSequenceMatchAction_MergeAction_init(EduStanfordNlpLingTokensregexCoreMapSequenceMatchAction_MergeAction *self) {
  EduStanfordNlpLingTokensregexCoreMapSequenceMatchAction_init(self);
  self->aggregator_ = EduStanfordNlpPipelineCoreMapAggregator_getDefaultAggregator();
}

EduStanfordNlpLingTokensregexCoreMapSequenceMatchAction_MergeAction *new_EduStanfordNlpLingTokensregexCoreMapSequenceMatchAction_MergeAction_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexCoreMapSequenceMatchAction_MergeAction, init)
}

EduStanfordNlpLingTokensregexCoreMapSequenceMatchAction_MergeAction *create_EduStanfordNlpLingTokensregexCoreMapSequenceMatchAction_MergeAction_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexCoreMapSequenceMatchAction_MergeAction, init)
}

void EduStanfordNlpLingTokensregexCoreMapSequenceMatchAction_MergeAction_initWithEduStanfordNlpPipelineCoreMapAggregator_(EduStanfordNlpLingTokensregexCoreMapSequenceMatchAction_MergeAction *self, EduStanfordNlpPipelineCoreMapAggregator *aggregator) {
  EduStanfordNlpLingTokensregexCoreMapSequenceMatchAction_init(self);
  self->aggregator_ = EduStanfordNlpPipelineCoreMapAggregator_getDefaultAggregator();
  self->aggregator_ = aggregator;
}

EduStanfordNlpLingTokensregexCoreMapSequenceMatchAction_MergeAction *new_EduStanfordNlpLingTokensregexCoreMapSequenceMatchAction_MergeAction_initWithEduStanfordNlpPipelineCoreMapAggregator_(EduStanfordNlpPipelineCoreMapAggregator *aggregator) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexCoreMapSequenceMatchAction_MergeAction, initWithEduStanfordNlpPipelineCoreMapAggregator_, aggregator)
}

EduStanfordNlpLingTokensregexCoreMapSequenceMatchAction_MergeAction *create_EduStanfordNlpLingTokensregexCoreMapSequenceMatchAction_MergeAction_initWithEduStanfordNlpPipelineCoreMapAggregator_(EduStanfordNlpPipelineCoreMapAggregator *aggregator) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexCoreMapSequenceMatchAction_MergeAction, initWithEduStanfordNlpPipelineCoreMapAggregator_, aggregator)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexCoreMapSequenceMatchAction_MergeAction)
