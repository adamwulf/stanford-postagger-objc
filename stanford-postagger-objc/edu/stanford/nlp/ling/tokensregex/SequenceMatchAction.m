//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/ling/tokensregex/SequenceMatchAction.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/ling/tokensregex/SequenceMatchAction.h"
#include "edu/stanford/nlp/ling/tokensregex/SequenceMatchResult.h"
#include "edu/stanford/nlp/ling/tokensregex/SequenceMatcher.h"
#include "edu/stanford/nlp/ling/tokensregex/SequencePattern.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"
#include "java/util/function/Predicate.h"

@interface EduStanfordNlpLingTokensregexSequenceMatchAction : NSObject

@end

@implementation EduStanfordNlpLingTokensregexSequenceMatchAction

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LEduStanfordNlpLingTokensregexSequenceMatchResult;", 0x481, 0, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(applyWithEduStanfordNlpLingTokensregexSequenceMatchResult:withIntArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "apply", "LEduStanfordNlpLingTokensregexSequenceMatchResult;[I", "(Ledu/stanford/nlp/ling/tokensregex/SequenceMatchResult<TT;>;[I)Ledu/stanford/nlp/ling/tokensregex/SequenceMatchResult<TT;>;", "LEduStanfordNlpLingTokensregexSequenceMatchAction_BoundAction;LEduStanfordNlpLingTokensregexSequenceMatchAction_StartMatchAction;LEduStanfordNlpLingTokensregexSequenceMatchAction_NextMatchAction;LEduStanfordNlpLingTokensregexSequenceMatchAction_BranchAction;LEduStanfordNlpLingTokensregexSequenceMatchAction_SeriesAction;", "<T:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexSequenceMatchAction = { "SequenceMatchAction", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, NULL, 7, 0x609, 1, 0, -1, 3, -1, 4, -1 };
  return &_EduStanfordNlpLingTokensregexSequenceMatchAction;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexSequenceMatchAction)

@implementation EduStanfordNlpLingTokensregexSequenceMatchAction_BoundAction

- (id<EduStanfordNlpLingTokensregexSequenceMatchResult>)applyWithEduStanfordNlpLingTokensregexSequenceMatchResult:(id<EduStanfordNlpLingTokensregexSequenceMatchResult>)seqMatchResult {
  return [((id<EduStanfordNlpLingTokensregexSequenceMatchAction>) nil_chk(action_)) applyWithEduStanfordNlpLingTokensregexSequenceMatchResult:seqMatchResult withIntArray:groups_];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpLingTokensregexSequenceMatchAction_BoundAction_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LEduStanfordNlpLingTokensregexSequenceMatchResult;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(applyWithEduStanfordNlpLingTokensregexSequenceMatchResult:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "action_", "LEduStanfordNlpLingTokensregexSequenceMatchAction;", .constantValue.asLong = 0, 0x0, -1, -1, 3, -1 },
    { "groups_", "[I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "apply", "LEduStanfordNlpLingTokensregexSequenceMatchResult;", "(Ledu/stanford/nlp/ling/tokensregex/SequenceMatchResult<TT;>;)Ledu/stanford/nlp/ling/tokensregex/SequenceMatchResult<TT;>;", "Ledu/stanford/nlp/ling/tokensregex/SequenceMatchAction<TT;>;", "LEduStanfordNlpLingTokensregexSequenceMatchAction;", "<T:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexSequenceMatchAction_BoundAction = { "BoundAction", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, fields, 7, 0x19, 2, 2, 4, -1, -1, 5, -1 };
  return &_EduStanfordNlpLingTokensregexSequenceMatchAction_BoundAction;
}

@end

void EduStanfordNlpLingTokensregexSequenceMatchAction_BoundAction_init(EduStanfordNlpLingTokensregexSequenceMatchAction_BoundAction *self) {
  NSObject_init(self);
}

EduStanfordNlpLingTokensregexSequenceMatchAction_BoundAction *new_EduStanfordNlpLingTokensregexSequenceMatchAction_BoundAction_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequenceMatchAction_BoundAction, init)
}

EduStanfordNlpLingTokensregexSequenceMatchAction_BoundAction *create_EduStanfordNlpLingTokensregexSequenceMatchAction_BoundAction_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequenceMatchAction_BoundAction, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexSequenceMatchAction_BoundAction)

@implementation EduStanfordNlpLingTokensregexSequenceMatchAction_StartMatchAction

- (instancetype)initWithEduStanfordNlpLingTokensregexSequencePattern:(EduStanfordNlpLingTokensregexSequencePattern *)pattern {
  EduStanfordNlpLingTokensregexSequenceMatchAction_StartMatchAction_initWithEduStanfordNlpLingTokensregexSequencePattern_(self, pattern);
  return self;
}

- (id<EduStanfordNlpLingTokensregexSequenceMatchResult>)applyWithEduStanfordNlpLingTokensregexSequenceMatchResult:(id<EduStanfordNlpLingTokensregexSequenceMatchResult>)seqMatchResult
                                                                                                     withIntArray:(IOSIntArray *)groups {
  EduStanfordNlpLingTokensregexSequenceMatcher *matcher = [((EduStanfordNlpLingTokensregexSequencePattern *) nil_chk(pattern_)) getMatcherWithJavaUtilList:[((id<EduStanfordNlpLingTokensregexSequenceMatchResult>) nil_chk(seqMatchResult)) elements]];
  if ([((EduStanfordNlpLingTokensregexSequenceMatcher *) nil_chk(matcher)) find]) {
    return matcher;
  }
  else {
    return nil;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexSequenceMatchResult;", 0x81, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpLingTokensregexSequencePattern:);
  methods[1].selector = @selector(applyWithEduStanfordNlpLingTokensregexSequenceMatchResult:withIntArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "pattern_", "LEduStanfordNlpLingTokensregexSequencePattern;", .constantValue.asLong = 0, 0x0, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpLingTokensregexSequencePattern;", "(Ledu/stanford/nlp/ling/tokensregex/SequencePattern<TT;>;)V", "apply", "LEduStanfordNlpLingTokensregexSequenceMatchResult;[I", "(Ledu/stanford/nlp/ling/tokensregex/SequenceMatchResult<TT;>;[I)Ledu/stanford/nlp/ling/tokensregex/SequenceMatchResult<TT;>;", "Ledu/stanford/nlp/ling/tokensregex/SequencePattern<TT;>;", "LEduStanfordNlpLingTokensregexSequenceMatchAction;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Ledu/stanford/nlp/ling/tokensregex/SequenceMatchAction<TT;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexSequenceMatchAction_StartMatchAction = { "StartMatchAction", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, fields, 7, 0x19, 2, 1, 6, -1, -1, 7, -1 };
  return &_EduStanfordNlpLingTokensregexSequenceMatchAction_StartMatchAction;
}

@end

void EduStanfordNlpLingTokensregexSequenceMatchAction_StartMatchAction_initWithEduStanfordNlpLingTokensregexSequencePattern_(EduStanfordNlpLingTokensregexSequenceMatchAction_StartMatchAction *self, EduStanfordNlpLingTokensregexSequencePattern *pattern) {
  NSObject_init(self);
  self->pattern_ = pattern;
}

EduStanfordNlpLingTokensregexSequenceMatchAction_StartMatchAction *new_EduStanfordNlpLingTokensregexSequenceMatchAction_StartMatchAction_initWithEduStanfordNlpLingTokensregexSequencePattern_(EduStanfordNlpLingTokensregexSequencePattern *pattern) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequenceMatchAction_StartMatchAction, initWithEduStanfordNlpLingTokensregexSequencePattern_, pattern)
}

EduStanfordNlpLingTokensregexSequenceMatchAction_StartMatchAction *create_EduStanfordNlpLingTokensregexSequenceMatchAction_StartMatchAction_initWithEduStanfordNlpLingTokensregexSequencePattern_(EduStanfordNlpLingTokensregexSequencePattern *pattern) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequenceMatchAction_StartMatchAction, initWithEduStanfordNlpLingTokensregexSequencePattern_, pattern)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexSequenceMatchAction_StartMatchAction)

@implementation EduStanfordNlpLingTokensregexSequenceMatchAction_NextMatchAction

- (id<EduStanfordNlpLingTokensregexSequenceMatchResult>)applyWithEduStanfordNlpLingTokensregexSequenceMatchResult:(id<EduStanfordNlpLingTokensregexSequenceMatchResult>)seqMatchResult
                                                                                                     withIntArray:(IOSIntArray *)groups {
  if ([seqMatchResult isKindOfClass:[EduStanfordNlpLingTokensregexSequenceMatcher class]]) {
    EduStanfordNlpLingTokensregexSequenceMatcher *matcher = (EduStanfordNlpLingTokensregexSequenceMatcher *) cast_chk(seqMatchResult, [EduStanfordNlpLingTokensregexSequenceMatcher class]);
    if ([((EduStanfordNlpLingTokensregexSequenceMatcher *) nil_chk(matcher)) find]) {
      return matcher;
    }
    else {
      return nil;
    }
  }
  else {
    return nil;
  }
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpLingTokensregexSequenceMatchAction_NextMatchAction_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LEduStanfordNlpLingTokensregexSequenceMatchResult;", 0x81, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(applyWithEduStanfordNlpLingTokensregexSequenceMatchResult:withIntArray:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "apply", "LEduStanfordNlpLingTokensregexSequenceMatchResult;[I", "(Ledu/stanford/nlp/ling/tokensregex/SequenceMatchResult<TT;>;[I)Ledu/stanford/nlp/ling/tokensregex/SequenceMatchResult<TT;>;", "LEduStanfordNlpLingTokensregexSequenceMatchAction;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Ledu/stanford/nlp/ling/tokensregex/SequenceMatchAction<TT;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexSequenceMatchAction_NextMatchAction = { "NextMatchAction", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, NULL, 7, 0x19, 2, 0, 3, -1, -1, 4, -1 };
  return &_EduStanfordNlpLingTokensregexSequenceMatchAction_NextMatchAction;
}

@end

void EduStanfordNlpLingTokensregexSequenceMatchAction_NextMatchAction_init(EduStanfordNlpLingTokensregexSequenceMatchAction_NextMatchAction *self) {
  NSObject_init(self);
}

EduStanfordNlpLingTokensregexSequenceMatchAction_NextMatchAction *new_EduStanfordNlpLingTokensregexSequenceMatchAction_NextMatchAction_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequenceMatchAction_NextMatchAction, init)
}

EduStanfordNlpLingTokensregexSequenceMatchAction_NextMatchAction *create_EduStanfordNlpLingTokensregexSequenceMatchAction_NextMatchAction_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequenceMatchAction_NextMatchAction, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexSequenceMatchAction_NextMatchAction)

@implementation EduStanfordNlpLingTokensregexSequenceMatchAction_BranchAction

- (instancetype)initWithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)filter
withEduStanfordNlpLingTokensregexSequenceMatchAction:(id<EduStanfordNlpLingTokensregexSequenceMatchAction>)acceptBranch
withEduStanfordNlpLingTokensregexSequenceMatchAction:(id<EduStanfordNlpLingTokensregexSequenceMatchAction>)rejectBranch {
  EduStanfordNlpLingTokensregexSequenceMatchAction_BranchAction_initWithJavaUtilFunctionPredicate_withEduStanfordNlpLingTokensregexSequenceMatchAction_withEduStanfordNlpLingTokensregexSequenceMatchAction_(self, filter, acceptBranch, rejectBranch);
  return self;
}

- (id<EduStanfordNlpLingTokensregexSequenceMatchResult>)applyWithEduStanfordNlpLingTokensregexSequenceMatchResult:(id<EduStanfordNlpLingTokensregexSequenceMatchResult>)seqMatchResult
                                                                                                     withIntArray:(IOSIntArray *)groups {
  if ([((id<JavaUtilFunctionPredicate>) nil_chk(filter_)) testWithId:seqMatchResult]) {
    return (acceptBranch_ != nil) ? [((id<EduStanfordNlpLingTokensregexSequenceMatchAction>) nil_chk(acceptBranch_)) applyWithEduStanfordNlpLingTokensregexSequenceMatchResult:seqMatchResult withIntArray:[IOSIntArray newArrayWithLength:0]] : nil;
  }
  else {
    return (rejectBranch_ != nil) ? [((id<EduStanfordNlpLingTokensregexSequenceMatchAction>) nil_chk(rejectBranch_)) applyWithEduStanfordNlpLingTokensregexSequenceMatchResult:seqMatchResult withIntArray:[IOSIntArray newArrayWithLength:0]] : nil;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexSequenceMatchResult;", 0x81, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilFunctionPredicate:withEduStanfordNlpLingTokensregexSequenceMatchAction:withEduStanfordNlpLingTokensregexSequenceMatchAction:);
  methods[1].selector = @selector(applyWithEduStanfordNlpLingTokensregexSequenceMatchResult:withIntArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "filter_", "LJavaUtilFunctionPredicate;", .constantValue.asLong = 0, 0x0, -1, -1, 5, -1 },
    { "acceptBranch_", "LEduStanfordNlpLingTokensregexSequenceMatchAction;", .constantValue.asLong = 0, 0x0, -1, -1, 6, -1 },
    { "rejectBranch_", "LEduStanfordNlpLingTokensregexSequenceMatchAction;", .constantValue.asLong = 0, 0x0, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilFunctionPredicate;LEduStanfordNlpLingTokensregexSequenceMatchAction;LEduStanfordNlpLingTokensregexSequenceMatchAction;", "(Ljava/util/function/Predicate<Ledu/stanford/nlp/ling/tokensregex/SequenceMatchResult<TT;>;>;Ledu/stanford/nlp/ling/tokensregex/SequenceMatchAction<TT;>;Ledu/stanford/nlp/ling/tokensregex/SequenceMatchAction<TT;>;)V", "apply", "LEduStanfordNlpLingTokensregexSequenceMatchResult;[I", "(Ledu/stanford/nlp/ling/tokensregex/SequenceMatchResult<TT;>;[I)Ledu/stanford/nlp/ling/tokensregex/SequenceMatchResult<TT;>;", "Ljava/util/function/Predicate<Ledu/stanford/nlp/ling/tokensregex/SequenceMatchResult<TT;>;>;", "Ledu/stanford/nlp/ling/tokensregex/SequenceMatchAction<TT;>;", "LEduStanfordNlpLingTokensregexSequenceMatchAction;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Ledu/stanford/nlp/ling/tokensregex/SequenceMatchAction<TT;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexSequenceMatchAction_BranchAction = { "BranchAction", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, fields, 7, 0x19, 2, 3, 7, -1, -1, 8, -1 };
  return &_EduStanfordNlpLingTokensregexSequenceMatchAction_BranchAction;
}

@end

void EduStanfordNlpLingTokensregexSequenceMatchAction_BranchAction_initWithJavaUtilFunctionPredicate_withEduStanfordNlpLingTokensregexSequenceMatchAction_withEduStanfordNlpLingTokensregexSequenceMatchAction_(EduStanfordNlpLingTokensregexSequenceMatchAction_BranchAction *self, id<JavaUtilFunctionPredicate> filter, id<EduStanfordNlpLingTokensregexSequenceMatchAction> acceptBranch, id<EduStanfordNlpLingTokensregexSequenceMatchAction> rejectBranch) {
  NSObject_init(self);
  self->filter_ = filter;
  self->acceptBranch_ = acceptBranch;
  self->rejectBranch_ = rejectBranch;
}

EduStanfordNlpLingTokensregexSequenceMatchAction_BranchAction *new_EduStanfordNlpLingTokensregexSequenceMatchAction_BranchAction_initWithJavaUtilFunctionPredicate_withEduStanfordNlpLingTokensregexSequenceMatchAction_withEduStanfordNlpLingTokensregexSequenceMatchAction_(id<JavaUtilFunctionPredicate> filter, id<EduStanfordNlpLingTokensregexSequenceMatchAction> acceptBranch, id<EduStanfordNlpLingTokensregexSequenceMatchAction> rejectBranch) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequenceMatchAction_BranchAction, initWithJavaUtilFunctionPredicate_withEduStanfordNlpLingTokensregexSequenceMatchAction_withEduStanfordNlpLingTokensregexSequenceMatchAction_, filter, acceptBranch, rejectBranch)
}

EduStanfordNlpLingTokensregexSequenceMatchAction_BranchAction *create_EduStanfordNlpLingTokensregexSequenceMatchAction_BranchAction_initWithJavaUtilFunctionPredicate_withEduStanfordNlpLingTokensregexSequenceMatchAction_withEduStanfordNlpLingTokensregexSequenceMatchAction_(id<JavaUtilFunctionPredicate> filter, id<EduStanfordNlpLingTokensregexSequenceMatchAction> acceptBranch, id<EduStanfordNlpLingTokensregexSequenceMatchAction> rejectBranch) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequenceMatchAction_BranchAction, initWithJavaUtilFunctionPredicate_withEduStanfordNlpLingTokensregexSequenceMatchAction_withEduStanfordNlpLingTokensregexSequenceMatchAction_, filter, acceptBranch, rejectBranch)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexSequenceMatchAction_BranchAction)

@implementation EduStanfordNlpLingTokensregexSequenceMatchAction_SeriesAction

- (instancetype)initWithEduStanfordNlpLingTokensregexSequenceMatchActionArray:(IOSObjectArray *)actions {
  EduStanfordNlpLingTokensregexSequenceMatchAction_SeriesAction_initWithEduStanfordNlpLingTokensregexSequenceMatchActionArray_(self, actions);
  return self;
}

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)actions {
  EduStanfordNlpLingTokensregexSequenceMatchAction_SeriesAction_initWithJavaUtilList_(self, actions);
  return self;
}

- (id<EduStanfordNlpLingTokensregexSequenceMatchResult>)applyWithEduStanfordNlpLingTokensregexSequenceMatchResult:(id<EduStanfordNlpLingTokensregexSequenceMatchResult>)seqMatchResult
                                                                                                     withIntArray:(IOSIntArray *)groups {
  id<EduStanfordNlpLingTokensregexSequenceMatchResult> res = seqMatchResult;
  for (id<EduStanfordNlpLingTokensregexSequenceMatchAction> __strong a in nil_chk(actions_)) {
    res = [((id<EduStanfordNlpLingTokensregexSequenceMatchAction>) nil_chk(a)) applyWithEduStanfordNlpLingTokensregexSequenceMatchResult:res withIntArray:groups];
  }
  return res;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x81, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, 2, -1, -1 },
    { NULL, "LEduStanfordNlpLingTokensregexSequenceMatchResult;", 0x81, 3, 4, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithEduStanfordNlpLingTokensregexSequenceMatchActionArray:);
  methods[1].selector = @selector(initWithJavaUtilList:);
  methods[2].selector = @selector(applyWithEduStanfordNlpLingTokensregexSequenceMatchResult:withIntArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "actions_", "LJavaUtilList;", .constantValue.asLong = 0, 0x0, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "[LEduStanfordNlpLingTokensregexSequenceMatchAction;", "LJavaUtilList;", "(Ljava/util/List<Ledu/stanford/nlp/ling/tokensregex/SequenceMatchAction<TT;>;>;)V", "apply", "LEduStanfordNlpLingTokensregexSequenceMatchResult;[I", "(Ledu/stanford/nlp/ling/tokensregex/SequenceMatchResult<TT;>;[I)Ledu/stanford/nlp/ling/tokensregex/SequenceMatchResult<TT;>;", "Ljava/util/List<Ledu/stanford/nlp/ling/tokensregex/SequenceMatchAction<TT;>;>;", "LEduStanfordNlpLingTokensregexSequenceMatchAction;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Ledu/stanford/nlp/ling/tokensregex/SequenceMatchAction<TT;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingTokensregexSequenceMatchAction_SeriesAction = { "SeriesAction", "edu.stanford.nlp.ling.tokensregex", ptrTable, methods, fields, 7, 0x19, 3, 1, 7, -1, -1, 8, -1 };
  return &_EduStanfordNlpLingTokensregexSequenceMatchAction_SeriesAction;
}

@end

void EduStanfordNlpLingTokensregexSequenceMatchAction_SeriesAction_initWithEduStanfordNlpLingTokensregexSequenceMatchActionArray_(EduStanfordNlpLingTokensregexSequenceMatchAction_SeriesAction *self, IOSObjectArray *actions) {
  NSObject_init(self);
  self->actions_ = JavaUtilArrays_asListWithNSObjectArray_(actions);
}

EduStanfordNlpLingTokensregexSequenceMatchAction_SeriesAction *new_EduStanfordNlpLingTokensregexSequenceMatchAction_SeriesAction_initWithEduStanfordNlpLingTokensregexSequenceMatchActionArray_(IOSObjectArray *actions) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequenceMatchAction_SeriesAction, initWithEduStanfordNlpLingTokensregexSequenceMatchActionArray_, actions)
}

EduStanfordNlpLingTokensregexSequenceMatchAction_SeriesAction *create_EduStanfordNlpLingTokensregexSequenceMatchAction_SeriesAction_initWithEduStanfordNlpLingTokensregexSequenceMatchActionArray_(IOSObjectArray *actions) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequenceMatchAction_SeriesAction, initWithEduStanfordNlpLingTokensregexSequenceMatchActionArray_, actions)
}

void EduStanfordNlpLingTokensregexSequenceMatchAction_SeriesAction_initWithJavaUtilList_(EduStanfordNlpLingTokensregexSequenceMatchAction_SeriesAction *self, id<JavaUtilList> actions) {
  NSObject_init(self);
  self->actions_ = actions;
}

EduStanfordNlpLingTokensregexSequenceMatchAction_SeriesAction *new_EduStanfordNlpLingTokensregexSequenceMatchAction_SeriesAction_initWithJavaUtilList_(id<JavaUtilList> actions) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingTokensregexSequenceMatchAction_SeriesAction, initWithJavaUtilList_, actions)
}

EduStanfordNlpLingTokensregexSequenceMatchAction_SeriesAction *create_EduStanfordNlpLingTokensregexSequenceMatchAction_SeriesAction_initWithJavaUtilList_(id<JavaUtilList> actions) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingTokensregexSequenceMatchAction_SeriesAction, initWithJavaUtilList_, actions)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingTokensregexSequenceMatchAction_SeriesAction)
