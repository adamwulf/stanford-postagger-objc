//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/ling/CoreLabel.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/ling/AnnotationLookup.h"
#include "edu/stanford/nlp/ling/CoreAnnotations.h"
#include "edu/stanford/nlp/ling/CoreLabel.h"
#include "edu/stanford/nlp/ling/HasCategory.h"
#include "edu/stanford/nlp/ling/HasIndex.h"
#include "edu/stanford/nlp/ling/HasOffset.h"
#include "edu/stanford/nlp/ling/HasTag.h"
#include "edu/stanford/nlp/ling/HasWord.h"
#include "edu/stanford/nlp/ling/IndexedWord.h"
#include "edu/stanford/nlp/ling/Label.h"
#include "edu/stanford/nlp/ling/LabelFactory.h"
#include "edu/stanford/nlp/util/ArrayCoreMap.h"
#include "edu/stanford/nlp/util/CoreMap.h"
#include "edu/stanford/nlp/util/Generics.h"
#include "java/lang/Double.h"
#include "java/lang/Enum.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/Arrays.h"
#include "java/util/Comparator.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/TreeMap.h"
#include "java/util/function/Function.h"
#include "java/util/function/ToDoubleFunction.h"
#include "java/util/function/ToIntFunction.h"
#include "java/util/function/ToLongFunction.h"

@interface EduStanfordNlpLingCoreLabel ()

- (void)initFromStringsWithNSStringArray:(IOSObjectArray *)keys
                       withNSStringArray:(IOSObjectArray *)values OBJC_METHOD_FAMILY_NONE;

@end

inline jlong EduStanfordNlpLingCoreLabel_get_serialVersionUID();
#define EduStanfordNlpLingCoreLabel_serialVersionUID 2LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpLingCoreLabel, serialVersionUID, jlong)

inline id<JavaUtilComparator> EduStanfordNlpLingCoreLabel_get_asClassComparator();
static id<JavaUtilComparator> EduStanfordNlpLingCoreLabel_asClassComparator;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpLingCoreLabel, asClassComparator, id<JavaUtilComparator>)

__attribute__((unused)) static void EduStanfordNlpLingCoreLabel_initFromStringsWithNSStringArray_withNSStringArray_(EduStanfordNlpLingCoreLabel *self, IOSObjectArray *keys, IOSObjectArray *values);

__attribute__((unused)) static void EduStanfordNlpLingCoreLabel_setValueWithNSString_(EduStanfordNlpLingCoreLabel *self, NSString *value);

__attribute__((unused)) static NSString *EduStanfordNlpLingCoreLabel_value(EduStanfordNlpLingCoreLabel *self);

@interface EduStanfordNlpLingCoreLabel_GenericAnnotation : NSObject

@end

@interface EduStanfordNlpLingCoreLabel_CoreLabelFactory : NSObject < EduStanfordNlpLingLabelFactory >

- (id<EduStanfordNlpLingLabel>)newLabelWithNSString:(NSString *)labelStr OBJC_METHOD_FAMILY_NONE;

- (id<EduStanfordNlpLingLabel>)newLabelWithNSString:(NSString *)labelStr
                                            withInt:(jint)options OBJC_METHOD_FAMILY_NONE;

- (id<EduStanfordNlpLingLabel>)newLabelWithEduStanfordNlpLingLabel:(id<EduStanfordNlpLingLabel>)oldLabel OBJC_METHOD_FAMILY_NONE;

- (id<EduStanfordNlpLingLabel>)newLabelFromStringWithNSString:(NSString *)encodedLabelStr OBJC_METHOD_FAMILY_NONE;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpLingCoreLabel_CoreLabelFactory)

__attribute__((unused)) static void EduStanfordNlpLingCoreLabel_CoreLabelFactory_init(EduStanfordNlpLingCoreLabel_CoreLabelFactory *self);

__attribute__((unused)) static EduStanfordNlpLingCoreLabel_CoreLabelFactory *new_EduStanfordNlpLingCoreLabel_CoreLabelFactory_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpLingCoreLabel_CoreLabelFactory *create_EduStanfordNlpLingCoreLabel_CoreLabelFactory_init();

J2OBJC_TYPE_LITERAL_HEADER(EduStanfordNlpLingCoreLabel_CoreLabelFactory)

__attribute__((unused)) static void EduStanfordNlpLingCoreLabel_OutputFormat_initWithNSString_withInt_(EduStanfordNlpLingCoreLabel_OutputFormat *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static EduStanfordNlpLingCoreLabel_OutputFormat *new_EduStanfordNlpLingCoreLabel_OutputFormat_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

@interface EduStanfordNlpLingCoreLabel_$Lambda$1 : NSObject < JavaUtilComparator >

- (jint)compareWithId:(IOSClass *)o1
               withId:(IOSClass *)o2;

@end

J2OBJC_STATIC_INIT(EduStanfordNlpLingCoreLabel_$Lambda$1)

inline EduStanfordNlpLingCoreLabel_$Lambda$1 *EduStanfordNlpLingCoreLabel_$Lambda$1_get_instance();
static EduStanfordNlpLingCoreLabel_$Lambda$1 *EduStanfordNlpLingCoreLabel_$Lambda$1_instance;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EduStanfordNlpLingCoreLabel_$Lambda$1, instance, EduStanfordNlpLingCoreLabel_$Lambda$1 *)

__attribute__((unused)) static void EduStanfordNlpLingCoreLabel_$Lambda$1_init(EduStanfordNlpLingCoreLabel_$Lambda$1 *self);

__attribute__((unused)) static EduStanfordNlpLingCoreLabel_$Lambda$1 *new_EduStanfordNlpLingCoreLabel_$Lambda$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpLingCoreLabel_$Lambda$1 *create_EduStanfordNlpLingCoreLabel_$Lambda$1_init();

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpLingCoreLabel)

id<JavaUtilMap> EduStanfordNlpLingCoreLabel_genericKeys;
id<JavaUtilMap> EduStanfordNlpLingCoreLabel_genericValues;
NSString *EduStanfordNlpLingCoreLabel_TAG_SEPARATOR = @"/";
EduStanfordNlpLingCoreLabel_OutputFormat *EduStanfordNlpLingCoreLabel_DEFAULT_FORMAT;

@implementation EduStanfordNlpLingCoreLabel

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpLingCoreLabel_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithInt:(jint)capacity {
  EduStanfordNlpLingCoreLabel_initWithInt_(self, capacity);
  return self;
}

- (instancetype)initWithEduStanfordNlpLingCoreLabel:(EduStanfordNlpLingCoreLabel *)label {
  EduStanfordNlpLingCoreLabel_initWithEduStanfordNlpLingCoreLabel_(self, label);
  return self;
}

- (instancetype)initWithEduStanfordNlpUtilCoreMap:(id<EduStanfordNlpUtilCoreMap>)label {
  EduStanfordNlpLingCoreLabel_initWithEduStanfordNlpUtilCoreMap_(self, label);
  return self;
}

- (instancetype)initWithEduStanfordNlpLingLabel:(id<EduStanfordNlpLingLabel>)label {
  EduStanfordNlpLingCoreLabel_initWithEduStanfordNlpLingLabel_(self, label);
  return self;
}

- (instancetype)initWithNSStringArray:(IOSObjectArray *)keys
                    withNSStringArray:(IOSObjectArray *)values {
  EduStanfordNlpLingCoreLabel_initWithNSStringArray_withNSStringArray_(self, keys, values);
  return self;
}

- (void)initFromStringsWithNSStringArray:(IOSObjectArray *)keys
                       withNSStringArray:(IOSObjectArray *)values {
  EduStanfordNlpLingCoreLabel_initFromStringsWithNSStringArray_withNSStringArray_(self, keys, values);
}

+ (id<EduStanfordNlpLingLabelFactory>)factory {
  return EduStanfordNlpLingCoreLabel_factory();
}

- (id<EduStanfordNlpLingLabelFactory>)labelFactory {
  return EduStanfordNlpLingCoreLabel_factory();
}

- (NSString *)getStringWithIOSClass:(IOSClass *)key {
  return [self getStringWithIOSClass:key withNSString:@""];
}

- (NSString *)getStringWithIOSClass:(IOSClass *)key
                       withNSString:(NSString *)def {
  NSString *value = [self getWithIOSClass:key];
  if (value == nil) {
    return def;
  }
  return value;
}

- (void)setFromStringWithNSString:(NSString *)labelStr {
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"Cannot set from string");
}

- (void)setValueWithNSString:(NSString *)value {
  EduStanfordNlpLingCoreLabel_setValueWithNSString_(self, value);
}

- (NSString *)value {
  return EduStanfordNlpLingCoreLabel_value(self);
}

- (void)setWordWithNSString:(NSString *)word {
  NSString *originalWord = [self getWithIOSClass:EduStanfordNlpLingCoreAnnotations_TextAnnotation_class_()];
  (void) [self setWithIOSClass:EduStanfordNlpLingCoreAnnotations_TextAnnotation_class_() withId:word];
  if (word != nil && ![word isEqual:originalWord] && [self containsKeyWithIOSClass:EduStanfordNlpLingCoreAnnotations_LemmaAnnotation_class_()]) {
    (void) [self removeWithIOSClass:EduStanfordNlpLingCoreAnnotations_LemmaAnnotation_class_()];
  }
}

- (NSString *)word {
  return [self getWithIOSClass:EduStanfordNlpLingCoreAnnotations_TextAnnotation_class_()];
}

- (void)setTagWithNSString:(NSString *)tag {
  (void) [self setWithIOSClass:EduStanfordNlpLingCoreAnnotations_PartOfSpeechAnnotation_class_() withId:tag];
}

- (NSString *)tag {
  return [self getWithIOSClass:EduStanfordNlpLingCoreAnnotations_PartOfSpeechAnnotation_class_()];
}

- (void)setCategoryWithNSString:(NSString *)category {
  (void) [self setWithIOSClass:EduStanfordNlpLingCoreAnnotations_CategoryAnnotation_class_() withId:category];
}

- (NSString *)category {
  return [self getWithIOSClass:EduStanfordNlpLingCoreAnnotations_CategoryAnnotation_class_()];
}

- (void)setAfterWithNSString:(NSString *)after {
  (void) [self setWithIOSClass:EduStanfordNlpLingCoreAnnotations_AfterAnnotation_class_() withId:after];
}

- (NSString *)after {
  return [self getStringWithIOSClass:EduStanfordNlpLingCoreAnnotations_AfterAnnotation_class_()];
}

- (void)setBeforeWithNSString:(NSString *)before {
  (void) [self setWithIOSClass:EduStanfordNlpLingCoreAnnotations_BeforeAnnotation_class_() withId:before];
}

- (NSString *)before {
  return [self getStringWithIOSClass:EduStanfordNlpLingCoreAnnotations_BeforeAnnotation_class_()];
}

- (void)setOriginalTextWithNSString:(NSString *)originalText {
  (void) [self setWithIOSClass:EduStanfordNlpLingCoreAnnotations_OriginalTextAnnotation_class_() withId:originalText];
}

- (NSString *)originalText {
  return [self getStringWithIOSClass:EduStanfordNlpLingCoreAnnotations_OriginalTextAnnotation_class_()];
}

- (NSString *)docID {
  return [self getWithIOSClass:EduStanfordNlpLingCoreAnnotations_DocIDAnnotation_class_()];
}

- (void)setDocIDWithNSString:(NSString *)docID {
  (void) [self setWithIOSClass:EduStanfordNlpLingCoreAnnotations_DocIDAnnotation_class_() withId:docID];
}

- (NSString *)ner {
  return [self getWithIOSClass:EduStanfordNlpLingCoreAnnotations_NamedEntityTagAnnotation_class_()];
}

- (void)setNERWithNSString:(NSString *)ner {
  (void) [self setWithIOSClass:EduStanfordNlpLingCoreAnnotations_NamedEntityTagAnnotation_class_() withId:ner];
}

- (NSString *)lemma {
  return [self getWithIOSClass:EduStanfordNlpLingCoreAnnotations_LemmaAnnotation_class_()];
}

- (void)setLemmaWithNSString:(NSString *)lemma {
  (void) [self setWithIOSClass:EduStanfordNlpLingCoreAnnotations_LemmaAnnotation_class_() withId:lemma];
}

- (jint)index {
  JavaLangInteger *n = [self getWithIOSClass:EduStanfordNlpLingCoreAnnotations_IndexAnnotation_class_()];
  if (n == nil) return -1;
  return [n intValue];
}

- (void)setIndexWithInt:(jint)index {
  (void) [self setWithIOSClass:EduStanfordNlpLingCoreAnnotations_IndexAnnotation_class_() withId:JavaLangInteger_valueOfWithInt_(index)];
}

- (jint)sentIndex {
  JavaLangInteger *n = [self getWithIOSClass:EduStanfordNlpLingCoreAnnotations_SentenceIndexAnnotation_class_()];
  if (n == nil) return -1;
  return [n intValue];
}

- (void)setSentIndexWithInt:(jint)sentIndex {
  (void) [self setWithIOSClass:EduStanfordNlpLingCoreAnnotations_SentenceIndexAnnotation_class_() withId:JavaLangInteger_valueOfWithInt_(sentIndex)];
}

- (jint)beginPosition {
  JavaLangInteger *i = [self getWithIOSClass:EduStanfordNlpLingCoreAnnotations_CharacterOffsetBeginAnnotation_class_()];
  if (i != nil) return [i intValue];
  return -1;
}

- (jint)endPosition {
  JavaLangInteger *i = [self getWithIOSClass:EduStanfordNlpLingCoreAnnotations_CharacterOffsetEndAnnotation_class_()];
  if (i != nil) return [i intValue];
  return -1;
}

- (void)setBeginPositionWithInt:(jint)beginPos {
  (void) [self setWithIOSClass:EduStanfordNlpLingCoreAnnotations_CharacterOffsetBeginAnnotation_class_() withId:JavaLangInteger_valueOfWithInt_(beginPos)];
}

- (void)setEndPositionWithInt:(jint)endPos {
  (void) [self setWithIOSClass:EduStanfordNlpLingCoreAnnotations_CharacterOffsetEndAnnotation_class_() withId:JavaLangInteger_valueOfWithInt_(endPos)];
}

- (NSString *)description {
  return [self toStringWithEduStanfordNlpLingCoreLabel_OutputFormat:EduStanfordNlpLingCoreLabel_DEFAULT_FORMAT];
}

- (NSString *)toStringWithEduStanfordNlpLingCoreLabel_OutputFormat:(EduStanfordNlpLingCoreLabel_OutputFormat *)format {
  JavaLangStringBuilder *buf = new_JavaLangStringBuilder_init();
  {
    JavaLangInteger *index;
    switch ([format ordinal]) {
      case EduStanfordNlpLingCoreLabel_OutputFormat_Enum_VALUE:
      (void) [buf appendWithNSString:EduStanfordNlpLingCoreLabel_value(self)];
      break;
      case EduStanfordNlpLingCoreLabel_OutputFormat_Enum_MAP:
      {
        id<JavaUtilMap> map2 = new_JavaUtilTreeMap_init();
        for (IOSClass * __strong key in nil_chk([self keySet])) {
          (void) [map2 putWithId:[((IOSClass *) nil_chk(key)) getName] withId:[self getWithIOSClass:key]];
        }
        (void) [buf appendWithId:map2];
        break;
      }
      case EduStanfordNlpLingCoreLabel_OutputFormat_Enum_VALUE_MAP:
      {
        (void) [buf appendWithNSString:EduStanfordNlpLingCoreLabel_value(self)];
        id<JavaUtilMap> map2 = new_JavaUtilTreeMap_initWithJavaUtilComparator_(EduStanfordNlpLingCoreLabel_asClassComparator);
        for (IOSClass * __strong key in nil_chk([self keySet])) {
          (void) [map2 putWithId:key withId:[self getWithIOSClass:key]];
        }
        (void) [map2 removeWithId:EduStanfordNlpLingCoreAnnotations_ValueAnnotation_class_()];
        (void) [buf appendWithId:map2];
        break;
      }
      case EduStanfordNlpLingCoreLabel_OutputFormat_Enum_VALUE_INDEX:
      {
        (void) [buf appendWithNSString:EduStanfordNlpLingCoreLabel_value(self)];
        JavaLangInteger *index = [self getWithIOSClass:EduStanfordNlpLingCoreAnnotations_IndexAnnotation_class_()];
        if (index != nil) {
          (void) [((JavaLangStringBuilder *) nil_chk([buf appendWithChar:'-'])) appendWithInt:[(index) intValue]];
        }
        break;
      }
      case EduStanfordNlpLingCoreLabel_OutputFormat_Enum_VALUE_TAG:
      {
        (void) [buf appendWithNSString:EduStanfordNlpLingCoreLabel_value(self)];
        NSString *tag = [self tag];
        if (tag != nil) {
          (void) [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:EduStanfordNlpLingCoreLabel_TAG_SEPARATOR])) appendWithNSString:tag];
        }
        break;
      }
      case EduStanfordNlpLingCoreLabel_OutputFormat_Enum_VALUE_TAG_INDEX:
      {
        (void) [buf appendWithNSString:EduStanfordNlpLingCoreLabel_value(self)];
        NSString *tag = [self tag];
        if (tag != nil) {
          (void) [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:EduStanfordNlpLingCoreLabel_TAG_SEPARATOR])) appendWithNSString:tag];
        }
        JavaLangInteger *index = [self getWithIOSClass:EduStanfordNlpLingCoreAnnotations_IndexAnnotation_class_()];
        if (index != nil) {
          (void) [((JavaLangStringBuilder *) nil_chk([buf appendWithChar:'-'])) appendWithInt:[(index) intValue]];
        }
        break;
      }
      case EduStanfordNlpLingCoreLabel_OutputFormat_Enum_VALUE_INDEX_MAP:
      {
        (void) [buf appendWithNSString:EduStanfordNlpLingCoreLabel_value(self)];
        JavaLangInteger *index = [self getWithIOSClass:EduStanfordNlpLingCoreAnnotations_IndexAnnotation_class_()];
        if (index != nil) {
          (void) [((JavaLangStringBuilder *) nil_chk([buf appendWithChar:'-'])) appendWithInt:[(index) intValue]];
        }
        id<JavaUtilMap> map2 = new_JavaUtilTreeMap_init();
        for (IOSClass * __strong key in nil_chk([self keySet])) {
          NSString *cls = [((IOSClass *) nil_chk(key)) getName];
          jint idx = [((NSString *) nil_chk(cls)) indexOf:'$'];
          if (idx >= 0) {
            cls = [cls substring:idx + 1];
          }
          (void) [map2 putWithId:cls withId:[self getWithIOSClass:key]];
        }
        (void) [map2 removeWithId:@"IndexAnnotation"];
        (void) [map2 removeWithId:@"ValueAnnotation"];
        if (![map2 isEmpty]) {
          (void) [buf appendWithId:map2];
        }
        break;
      }
      case EduStanfordNlpLingCoreLabel_OutputFormat_Enum_WORD:
      (void) [buf appendWithNSString:[self word]];
      break;
      case EduStanfordNlpLingCoreLabel_OutputFormat_Enum_WORD_INDEX:
      {
        (void) [buf appendWithNSString:[self getWithIOSClass:EduStanfordNlpLingCoreAnnotations_TextAnnotation_class_()]];
        JavaLangInteger *index = [self getWithIOSClass:EduStanfordNlpLingCoreAnnotations_IndexAnnotation_class_()];
        if (index != nil) {
          (void) [((JavaLangStringBuilder *) nil_chk([buf appendWithChar:'-'])) appendWithInt:[(index) intValue]];
        }
        break;
      }
      case EduStanfordNlpLingCoreLabel_OutputFormat_Enum_VALUE_TAG_NER:
      {
        (void) [buf appendWithNSString:EduStanfordNlpLingCoreLabel_value(self)];
        NSString *tag = [self tag];
        if (tag != nil) {
          (void) [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:EduStanfordNlpLingCoreLabel_TAG_SEPARATOR])) appendWithNSString:tag];
        }
        if ([self ner] != nil) {
          (void) [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:EduStanfordNlpLingCoreLabel_TAG_SEPARATOR])) appendWithNSString:[self ner]];
        }
        break;
      }
      case EduStanfordNlpLingCoreLabel_OutputFormat_Enum_LEMMA_INDEX:
      (void) [buf appendWithNSString:[self lemma]];
      index = [self getWithIOSClass:EduStanfordNlpLingCoreAnnotations_IndexAnnotation_class_()];
      if (index != nil) {
        (void) [((JavaLangStringBuilder *) nil_chk([buf appendWithChar:'-'])) appendWithInt:[(index) intValue]];
      }
      break;
      case EduStanfordNlpLingCoreLabel_OutputFormat_Enum_ALL:
      {
        for (IOSClass * __strong en in nil_chk([self keySet])) {
          (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@";"])) appendWithId:en])) appendWithNSString:@":"])) appendWithId:[self getWithIOSClass:en]];
        }
        break;
      }
      default:
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"Unknown format ", format));
    }
  }
  return [buf description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 5, 4, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingLabelFactory;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingLabelFactory;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 6, 7, -1, 8, -1, -1 },
    { NULL, "LNSString;", 0x1, 6, 9, -1, 10, -1, -1 },
    { NULL, "V", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 13, 12, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 12, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 12, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 12, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 12, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 12, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 12, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 12, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 12, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 12, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 27, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 27, 28, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithInt:);
  methods[2].selector = @selector(initWithEduStanfordNlpLingCoreLabel:);
  methods[3].selector = @selector(initWithEduStanfordNlpUtilCoreMap:);
  methods[4].selector = @selector(initWithEduStanfordNlpLingLabel:);
  methods[5].selector = @selector(initWithNSStringArray:withNSStringArray:);
  methods[6].selector = @selector(initFromStringsWithNSStringArray:withNSStringArray:);
  methods[7].selector = @selector(factory);
  methods[8].selector = @selector(labelFactory);
  methods[9].selector = @selector(getStringWithIOSClass:);
  methods[10].selector = @selector(getStringWithIOSClass:withNSString:);
  methods[11].selector = @selector(setFromStringWithNSString:);
  methods[12].selector = @selector(setValueWithNSString:);
  methods[13].selector = @selector(value);
  methods[14].selector = @selector(setWordWithNSString:);
  methods[15].selector = @selector(word);
  methods[16].selector = @selector(setTagWithNSString:);
  methods[17].selector = @selector(tag);
  methods[18].selector = @selector(setCategoryWithNSString:);
  methods[19].selector = @selector(category);
  methods[20].selector = @selector(setAfterWithNSString:);
  methods[21].selector = @selector(after);
  methods[22].selector = @selector(setBeforeWithNSString:);
  methods[23].selector = @selector(before);
  methods[24].selector = @selector(setOriginalTextWithNSString:);
  methods[25].selector = @selector(originalText);
  methods[26].selector = @selector(docID);
  methods[27].selector = @selector(setDocIDWithNSString:);
  methods[28].selector = @selector(ner);
  methods[29].selector = @selector(setNERWithNSString:);
  methods[30].selector = @selector(lemma);
  methods[31].selector = @selector(setLemmaWithNSString:);
  methods[32].selector = @selector(index);
  methods[33].selector = @selector(setIndexWithInt:);
  methods[34].selector = @selector(sentIndex);
  methods[35].selector = @selector(setSentIndexWithInt:);
  methods[36].selector = @selector(beginPosition);
  methods[37].selector = @selector(endPosition);
  methods[38].selector = @selector(setBeginPositionWithInt:);
  methods[39].selector = @selector(setEndPositionWithInt:);
  methods[40].selector = @selector(description);
  methods[41].selector = @selector(toStringWithEduStanfordNlpLingCoreLabel_OutputFormat:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpLingCoreLabel_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "genericKeys", "LJavaUtilMap;", .constantValue.asLong = 0, 0x19, -1, 29, 30, -1 },
    { "genericValues", "LJavaUtilMap;", .constantValue.asLong = 0, 0x19, -1, 31, 32, -1 },
    { "TAG_SEPARATOR", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 33, -1, -1 },
    { "DEFAULT_FORMAT", "LEduStanfordNlpLingCoreLabel_OutputFormat;", .constantValue.asLong = 0, 0x19, -1, 34, -1, -1 },
    { "asClassComparator", "LJavaUtilComparator;", .constantValue.asLong = 0, 0x1a, -1, 35, 36, -1 },
  };
  static const void *ptrTable[] = { "I", "LEduStanfordNlpLingCoreLabel;", "LEduStanfordNlpUtilCoreMap;", "LEduStanfordNlpLingLabel;", "[LNSString;[LNSString;", "initFromStrings", "getString", "LIOSClass;", "<KEY::Ledu/stanford/nlp/util/TypesafeMap$Key<Ljava/lang/String;>;>(Ljava/lang/Class<TKEY;>;)Ljava/lang/String;", "LIOSClass;LNSString;", "<KEY::Ledu/stanford/nlp/util/TypesafeMap$Key<Ljava/lang/String;>;>(Ljava/lang/Class<TKEY;>;Ljava/lang/String;)Ljava/lang/String;", "setFromString", "LNSString;", "setValue", "setWord", "setTag", "setCategory", "setAfter", "setBefore", "setOriginalText", "setDocID", "setNER", "setLemma", "setIndex", "setSentIndex", "setBeginPosition", "setEndPosition", "toString", "LEduStanfordNlpLingCoreLabel_OutputFormat;", &EduStanfordNlpLingCoreLabel_genericKeys, "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Class<+Ledu/stanford/nlp/ling/CoreLabel$GenericAnnotation;>;>;", &EduStanfordNlpLingCoreLabel_genericValues, "Ljava/util/Map<Ljava/lang/Class<+Ledu/stanford/nlp/ling/CoreLabel$GenericAnnotation;>;Ljava/lang/String;>;", &EduStanfordNlpLingCoreLabel_TAG_SEPARATOR, &EduStanfordNlpLingCoreLabel_DEFAULT_FORMAT, &EduStanfordNlpLingCoreLabel_asClassComparator, "Ljava/util/Comparator<Ljava/lang/Class<*>;>;", "LEduStanfordNlpLingCoreLabel_GenericAnnotation;LEduStanfordNlpLingCoreLabel_CoreLabelFactory;LEduStanfordNlpLingCoreLabel_OutputFormat;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingCoreLabel = { "CoreLabel", "edu.stanford.nlp.ling", ptrTable, methods, fields, 7, 0x1, 42, 6, -1, 37, -1, -1, -1 };
  return &_EduStanfordNlpLingCoreLabel;
}

+ (void)initialize {
  if (self == [EduStanfordNlpLingCoreLabel class]) {
    EduStanfordNlpLingCoreLabel_genericKeys = EduStanfordNlpUtilGenerics_newHashMap();
    EduStanfordNlpLingCoreLabel_genericValues = EduStanfordNlpUtilGenerics_newHashMap();
    EduStanfordNlpLingCoreLabel_DEFAULT_FORMAT = JreLoadEnum(EduStanfordNlpLingCoreLabel_OutputFormat, VALUE_INDEX);
    EduStanfordNlpLingCoreLabel_asClassComparator = JreLoadStatic(EduStanfordNlpLingCoreLabel_$Lambda$1, instance);
    J2OBJC_SET_INITIALIZED(EduStanfordNlpLingCoreLabel)
  }
}

@end

void EduStanfordNlpLingCoreLabel_init(EduStanfordNlpLingCoreLabel *self) {
  EduStanfordNlpUtilArrayCoreMap_init(self);
}

EduStanfordNlpLingCoreLabel *new_EduStanfordNlpLingCoreLabel_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingCoreLabel, init)
}

EduStanfordNlpLingCoreLabel *create_EduStanfordNlpLingCoreLabel_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingCoreLabel, init)
}

void EduStanfordNlpLingCoreLabel_initWithInt_(EduStanfordNlpLingCoreLabel *self, jint capacity) {
  EduStanfordNlpUtilArrayCoreMap_initWithInt_(self, capacity);
}

EduStanfordNlpLingCoreLabel *new_EduStanfordNlpLingCoreLabel_initWithInt_(jint capacity) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingCoreLabel, initWithInt_, capacity)
}

EduStanfordNlpLingCoreLabel *create_EduStanfordNlpLingCoreLabel_initWithInt_(jint capacity) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingCoreLabel, initWithInt_, capacity)
}

void EduStanfordNlpLingCoreLabel_initWithEduStanfordNlpLingCoreLabel_(EduStanfordNlpLingCoreLabel *self, EduStanfordNlpLingCoreLabel *label) {
  EduStanfordNlpLingCoreLabel_initWithEduStanfordNlpUtilCoreMap_(self, label);
}

EduStanfordNlpLingCoreLabel *new_EduStanfordNlpLingCoreLabel_initWithEduStanfordNlpLingCoreLabel_(EduStanfordNlpLingCoreLabel *label) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingCoreLabel, initWithEduStanfordNlpLingCoreLabel_, label)
}

EduStanfordNlpLingCoreLabel *create_EduStanfordNlpLingCoreLabel_initWithEduStanfordNlpLingCoreLabel_(EduStanfordNlpLingCoreLabel *label) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingCoreLabel, initWithEduStanfordNlpLingCoreLabel_, label)
}

void EduStanfordNlpLingCoreLabel_initWithEduStanfordNlpUtilCoreMap_(EduStanfordNlpLingCoreLabel *self, id<EduStanfordNlpUtilCoreMap> label) {
  EduStanfordNlpUtilArrayCoreMap_initWithInt_(self, [((id<EduStanfordNlpUtilCoreMap>) nil_chk(label)) size]);
  for (IOSClass * __strong key in nil_chk([label keySet])) {
    (void) [self setWithIOSClass:key withId:[label getWithIOSClass:key]];
  }
}

EduStanfordNlpLingCoreLabel *new_EduStanfordNlpLingCoreLabel_initWithEduStanfordNlpUtilCoreMap_(id<EduStanfordNlpUtilCoreMap> label) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingCoreLabel, initWithEduStanfordNlpUtilCoreMap_, label)
}

EduStanfordNlpLingCoreLabel *create_EduStanfordNlpLingCoreLabel_initWithEduStanfordNlpUtilCoreMap_(id<EduStanfordNlpUtilCoreMap> label) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingCoreLabel, initWithEduStanfordNlpUtilCoreMap_, label)
}

void EduStanfordNlpLingCoreLabel_initWithEduStanfordNlpLingLabel_(EduStanfordNlpLingCoreLabel *self, id<EduStanfordNlpLingLabel> label) {
  EduStanfordNlpUtilArrayCoreMap_initWithInt_(self, 0);
  if ([EduStanfordNlpUtilCoreMap_class_() isInstance:label]) {
    id<EduStanfordNlpUtilCoreMap> cl = (id<EduStanfordNlpUtilCoreMap>) cast_check(label, EduStanfordNlpUtilCoreMap_class_());
    [self setCapacityWithInt:[((id<EduStanfordNlpUtilCoreMap>) nil_chk(cl)) size]];
    for (IOSClass * __strong key in nil_chk([cl keySet])) {
      (void) [self setWithIOSClass:key withId:[cl getWithIOSClass:key]];
    }
  }
  else if ([label isKindOfClass:[EduStanfordNlpLingIndexedWord class]]) {
    id<EduStanfordNlpUtilCoreMap> cl = [((EduStanfordNlpLingIndexedWord *) nil_chk(((EduStanfordNlpLingIndexedWord *) cast_chk(label, [EduStanfordNlpLingIndexedWord class])))) backingLabel];
    [self setCapacityWithInt:[((id<EduStanfordNlpUtilCoreMap>) nil_chk(cl)) size]];
    for (IOSClass * __strong key in nil_chk([cl keySet])) {
      (void) [self setWithIOSClass:key withId:[cl getWithIOSClass:key]];
    }
  }
  else {
    if ([EduStanfordNlpLingHasWord_class_() isInstance:label]) {
      [self setWordWithNSString:[((id<EduStanfordNlpLingHasWord>) nil_chk(((id<EduStanfordNlpLingHasWord>) cast_check(label, EduStanfordNlpLingHasWord_class_())))) word]];
    }
    EduStanfordNlpLingCoreLabel_setValueWithNSString_(self, [((id<EduStanfordNlpLingLabel>) nil_chk(label)) value]);
  }
}

EduStanfordNlpLingCoreLabel *new_EduStanfordNlpLingCoreLabel_initWithEduStanfordNlpLingLabel_(id<EduStanfordNlpLingLabel> label) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingCoreLabel, initWithEduStanfordNlpLingLabel_, label)
}

EduStanfordNlpLingCoreLabel *create_EduStanfordNlpLingCoreLabel_initWithEduStanfordNlpLingLabel_(id<EduStanfordNlpLingLabel> label) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingCoreLabel, initWithEduStanfordNlpLingLabel_, label)
}

void EduStanfordNlpLingCoreLabel_initWithNSStringArray_withNSStringArray_(EduStanfordNlpLingCoreLabel *self, IOSObjectArray *keys, IOSObjectArray *values) {
  EduStanfordNlpUtilArrayCoreMap_initWithInt_(self, ((IOSObjectArray *) nil_chk(keys))->size_);
  EduStanfordNlpLingCoreLabel_initFromStringsWithNSStringArray_withNSStringArray_(self, keys, values);
}

EduStanfordNlpLingCoreLabel *new_EduStanfordNlpLingCoreLabel_initWithNSStringArray_withNSStringArray_(IOSObjectArray *keys, IOSObjectArray *values) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingCoreLabel, initWithNSStringArray_withNSStringArray_, keys, values)
}

EduStanfordNlpLingCoreLabel *create_EduStanfordNlpLingCoreLabel_initWithNSStringArray_withNSStringArray_(IOSObjectArray *keys, IOSObjectArray *values) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingCoreLabel, initWithNSStringArray_withNSStringArray_, keys, values)
}

void EduStanfordNlpLingCoreLabel_initFromStringsWithNSStringArray_withNSStringArray_(EduStanfordNlpLingCoreLabel *self, IOSObjectArray *keys, IOSObjectArray *values) {
  if (((IOSObjectArray *) nil_chk(keys))->size_ != ((IOSObjectArray *) nil_chk(values))->size_) {
    @throw new_JavaLangUnsupportedOperationException_initWithNSString_(JreStrcat("$$$$", @"Argument array lengths differ: ", JavaUtilArrays_toStringWithNSObjectArray_(keys), @" vs. ", JavaUtilArrays_toStringWithNSObjectArray_(values)));
  }
  for (jint i = 0; i < keys->size_; i++) {
    NSString *key = IOSObjectArray_Get(keys, i);
    NSString *value = IOSObjectArray_Get(values, i);
    EduStanfordNlpLingAnnotationLookup_KeyLookup *lookup = EduStanfordNlpLingAnnotationLookup_getCoreKeyWithNSString_(key);
    if (lookup == nil) {
      if (key != nil) {
        @throw new_JavaLangUnsupportedOperationException_initWithNSString_(JreStrcat("$$", @"Unknown key ", key));
      }
    }
    else {
      @try {
        IOSClass *valueClass = EduStanfordNlpLingAnnotationLookup_getValueTypeWithIOSClass_(lookup->coreKey_);
        if ([((IOSClass *) nil_chk(valueClass)) isEqual:NSString_class_()]) {
          (void) [self setWithIOSClass:lookup->coreKey_ withId:IOSObjectArray_Get(values, i)];
        }
        else if (valueClass == JavaLangInteger_class_()) {
          (void) [self setWithIOSClass:lookup->coreKey_ withId:JavaLangInteger_valueOfWithInt_(JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(values, i)))];
        }
        else if (valueClass == JavaLangDouble_class_()) {
          (void) [self setWithIOSClass:lookup->coreKey_ withId:JavaLangDouble_valueOfWithDouble_(JavaLangDouble_parseDoubleWithNSString_(IOSObjectArray_Get(values, i)))];
        }
        else if (valueClass == JavaLangLong_class_()) {
          (void) [self setWithIOSClass:lookup->coreKey_ withId:JavaLangLong_valueOfWithLong_(JavaLangLong_parseLongWithNSString_(IOSObjectArray_Get(values, i)))];
        }
        else {
          @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$@", @"Can't handle ", valueClass));
        }
      }
      @catch (JavaLangException *e) {
        @throw new_JavaLangUnsupportedOperationException_initWithNSString_withNSException_(JreStrcat("$$$$$@", @"CORE: CoreLabel.initFromStrings: Bad type for ", key, @". Value was: ", value, @"; expected ", EduStanfordNlpLingAnnotationLookup_getValueTypeWithIOSClass_(lookup->coreKey_)), e);
      }
    }
  }
}

id<EduStanfordNlpLingLabelFactory> EduStanfordNlpLingCoreLabel_factory() {
  EduStanfordNlpLingCoreLabel_initialize();
  return new_EduStanfordNlpLingCoreLabel_CoreLabelFactory_init();
}

void EduStanfordNlpLingCoreLabel_setValueWithNSString_(EduStanfordNlpLingCoreLabel *self, NSString *value) {
  (void) [self setWithIOSClass:EduStanfordNlpLingCoreAnnotations_ValueAnnotation_class_() withId:value];
}

NSString *EduStanfordNlpLingCoreLabel_value(EduStanfordNlpLingCoreLabel *self) {
  return [self getWithIOSClass:EduStanfordNlpLingCoreAnnotations_ValueAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingCoreLabel)

@implementation EduStanfordNlpLingCoreLabel_GenericAnnotation

+ (const J2ObjcClassInfo *)__metadata {
  static const void *ptrTable[] = { "LEduStanfordNlpLingCoreLabel;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Ledu/stanford/nlp/ling/CoreAnnotation<TT;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingCoreLabel_GenericAnnotation = { "GenericAnnotation", "edu.stanford.nlp.ling", ptrTable, NULL, NULL, 7, 0x609, 0, 0, 0, -1, -1, 1, -1 };
  return &_EduStanfordNlpLingCoreLabel_GenericAnnotation;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(EduStanfordNlpLingCoreLabel_GenericAnnotation)

@implementation EduStanfordNlpLingCoreLabel_CoreLabelFactory

- (id<EduStanfordNlpLingLabel>)newLabelWithNSString:(NSString *)labelStr {
  EduStanfordNlpLingCoreLabel *label = new_EduStanfordNlpLingCoreLabel_init();
  EduStanfordNlpLingCoreLabel_setValueWithNSString_(label, labelStr);
  return label;
}

- (id<EduStanfordNlpLingLabel>)newLabelWithNSString:(NSString *)labelStr
                                            withInt:(jint)options {
  return [self newLabelWithNSString:labelStr];
}

- (id<EduStanfordNlpLingLabel>)newLabelWithEduStanfordNlpLingLabel:(id<EduStanfordNlpLingLabel>)oldLabel {
  if ([oldLabel isKindOfClass:[EduStanfordNlpLingCoreLabel class]]) {
    return new_EduStanfordNlpLingCoreLabel_initWithEduStanfordNlpLingCoreLabel_((EduStanfordNlpLingCoreLabel *) cast_chk(oldLabel, [EduStanfordNlpLingCoreLabel class]));
  }
  else {
    EduStanfordNlpLingCoreLabel *label = new_EduStanfordNlpLingCoreLabel_init();
    if ([EduStanfordNlpLingHasWord_class_() isInstance:oldLabel]) [label setWordWithNSString:[((id<EduStanfordNlpLingHasWord>) nil_chk(((id<EduStanfordNlpLingHasWord>) cast_check(oldLabel, EduStanfordNlpLingHasWord_class_())))) word]];
    if ([EduStanfordNlpLingHasTag_class_() isInstance:oldLabel]) [label setTagWithNSString:[((id<EduStanfordNlpLingHasTag>) nil_chk(((id<EduStanfordNlpLingHasTag>) cast_check(oldLabel, EduStanfordNlpLingHasTag_class_())))) tag]];
    if ([EduStanfordNlpLingHasOffset_class_() isInstance:oldLabel]) {
      [label setBeginPositionWithInt:[((id<EduStanfordNlpLingHasOffset>) nil_chk(((id<EduStanfordNlpLingHasOffset>) cast_check(oldLabel, EduStanfordNlpLingHasOffset_class_())))) beginPosition]];
      [label setEndPositionWithInt:[((id<EduStanfordNlpLingHasOffset>) nil_chk(((id<EduStanfordNlpLingHasOffset>) cast_check(oldLabel, EduStanfordNlpLingHasOffset_class_())))) endPosition]];
    }
    if ([EduStanfordNlpLingHasCategory_class_() isInstance:oldLabel]) [label setCategoryWithNSString:[((id<EduStanfordNlpLingHasCategory>) nil_chk(((id<EduStanfordNlpLingHasCategory>) cast_check(oldLabel, EduStanfordNlpLingHasCategory_class_())))) category]];
    if ([EduStanfordNlpLingHasIndex_class_() isInstance:oldLabel]) [label setIndexWithInt:[((id<EduStanfordNlpLingHasIndex>) nil_chk(((id<EduStanfordNlpLingHasIndex>) cast_check(oldLabel, EduStanfordNlpLingHasIndex_class_())))) index]];
    EduStanfordNlpLingCoreLabel_setValueWithNSString_(label, [((id<EduStanfordNlpLingLabel>) nil_chk(oldLabel)) value]);
    return label;
  }
}

- (id<EduStanfordNlpLingLabel>)newLabelFromStringWithNSString:(NSString *)encodedLabelStr {
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"This code branch left blank because we do not understand what this method should do.");
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpLingCoreLabel_CoreLabelFactory_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LEduStanfordNlpLingLabel;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingLabel;", 0x1, 0, 2, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingLabel;", 0x1, 0, 3, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingLabel;", 0x1, 4, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(newLabelWithNSString:);
  methods[1].selector = @selector(newLabelWithNSString:withInt:);
  methods[2].selector = @selector(newLabelWithEduStanfordNlpLingLabel:);
  methods[3].selector = @selector(newLabelFromStringWithNSString:);
  methods[4].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "newLabel", "LNSString;", "LNSString;I", "LEduStanfordNlpLingLabel;", "newLabelFromString", "LEduStanfordNlpLingCoreLabel;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingCoreLabel_CoreLabelFactory = { "CoreLabelFactory", "edu.stanford.nlp.ling", ptrTable, methods, NULL, 7, 0xa, 5, 0, 5, -1, -1, -1, -1 };
  return &_EduStanfordNlpLingCoreLabel_CoreLabelFactory;
}

@end

void EduStanfordNlpLingCoreLabel_CoreLabelFactory_init(EduStanfordNlpLingCoreLabel_CoreLabelFactory *self) {
  NSObject_init(self);
}

EduStanfordNlpLingCoreLabel_CoreLabelFactory *new_EduStanfordNlpLingCoreLabel_CoreLabelFactory_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingCoreLabel_CoreLabelFactory, init)
}

EduStanfordNlpLingCoreLabel_CoreLabelFactory *create_EduStanfordNlpLingCoreLabel_CoreLabelFactory_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingCoreLabel_CoreLabelFactory, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingCoreLabel_CoreLabelFactory)

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpLingCoreLabel_OutputFormat)

EduStanfordNlpLingCoreLabel_OutputFormat *EduStanfordNlpLingCoreLabel_OutputFormat_values_[12];

@implementation EduStanfordNlpLingCoreLabel_OutputFormat

+ (IOSObjectArray *)values {
  return EduStanfordNlpLingCoreLabel_OutputFormat_values();
}

+ (EduStanfordNlpLingCoreLabel_OutputFormat *)valueOfWithNSString:(NSString *)name {
  return EduStanfordNlpLingCoreLabel_OutputFormat_valueOfWithNSString_(name);
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LEduStanfordNlpLingCoreLabel_OutputFormat;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingCoreLabel_OutputFormat;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "VALUE_INDEX", "LEduStanfordNlpLingCoreLabel_OutputFormat;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "VALUE", "LEduStanfordNlpLingCoreLabel_OutputFormat;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "VALUE_TAG", "LEduStanfordNlpLingCoreLabel_OutputFormat;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "VALUE_TAG_INDEX", "LEduStanfordNlpLingCoreLabel_OutputFormat;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
    { "MAP", "LEduStanfordNlpLingCoreLabel_OutputFormat;", .constantValue.asLong = 0, 0x4019, -1, 6, -1, -1 },
    { "VALUE_MAP", "LEduStanfordNlpLingCoreLabel_OutputFormat;", .constantValue.asLong = 0, 0x4019, -1, 7, -1, -1 },
    { "VALUE_INDEX_MAP", "LEduStanfordNlpLingCoreLabel_OutputFormat;", .constantValue.asLong = 0, 0x4019, -1, 8, -1, -1 },
    { "WORD", "LEduStanfordNlpLingCoreLabel_OutputFormat;", .constantValue.asLong = 0, 0x4019, -1, 9, -1, -1 },
    { "WORD_INDEX", "LEduStanfordNlpLingCoreLabel_OutputFormat;", .constantValue.asLong = 0, 0x4019, -1, 10, -1, -1 },
    { "VALUE_TAG_NER", "LEduStanfordNlpLingCoreLabel_OutputFormat;", .constantValue.asLong = 0, 0x4019, -1, 11, -1, -1 },
    { "LEMMA_INDEX", "LEduStanfordNlpLingCoreLabel_OutputFormat;", .constantValue.asLong = 0, 0x4019, -1, 12, -1, -1 },
    { "ALL", "LEduStanfordNlpLingCoreLabel_OutputFormat;", .constantValue.asLong = 0, 0x4019, -1, 13, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(EduStanfordNlpLingCoreLabel_OutputFormat, VALUE_INDEX), &JreEnum(EduStanfordNlpLingCoreLabel_OutputFormat, VALUE), &JreEnum(EduStanfordNlpLingCoreLabel_OutputFormat, VALUE_TAG), &JreEnum(EduStanfordNlpLingCoreLabel_OutputFormat, VALUE_TAG_INDEX), &JreEnum(EduStanfordNlpLingCoreLabel_OutputFormat, MAP), &JreEnum(EduStanfordNlpLingCoreLabel_OutputFormat, VALUE_MAP), &JreEnum(EduStanfordNlpLingCoreLabel_OutputFormat, VALUE_INDEX_MAP), &JreEnum(EduStanfordNlpLingCoreLabel_OutputFormat, WORD), &JreEnum(EduStanfordNlpLingCoreLabel_OutputFormat, WORD_INDEX), &JreEnum(EduStanfordNlpLingCoreLabel_OutputFormat, VALUE_TAG_NER), &JreEnum(EduStanfordNlpLingCoreLabel_OutputFormat, LEMMA_INDEX), &JreEnum(EduStanfordNlpLingCoreLabel_OutputFormat, ALL), "LEduStanfordNlpLingCoreLabel;", "Ljava/lang/Enum<Ledu/stanford/nlp/ling/CoreLabel$OutputFormat;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingCoreLabel_OutputFormat = { "OutputFormat", "edu.stanford.nlp.ling", ptrTable, methods, fields, 7, 0x4019, 2, 12, 14, -1, -1, 15, -1 };
  return &_EduStanfordNlpLingCoreLabel_OutputFormat;
}

+ (void)initialize {
  if (self == [EduStanfordNlpLingCoreLabel_OutputFormat class]) {
    JreEnum(EduStanfordNlpLingCoreLabel_OutputFormat, VALUE_INDEX) = new_EduStanfordNlpLingCoreLabel_OutputFormat_initWithNSString_withInt_(@"VALUE_INDEX", 0);
    JreEnum(EduStanfordNlpLingCoreLabel_OutputFormat, VALUE) = new_EduStanfordNlpLingCoreLabel_OutputFormat_initWithNSString_withInt_(@"VALUE", 1);
    JreEnum(EduStanfordNlpLingCoreLabel_OutputFormat, VALUE_TAG) = new_EduStanfordNlpLingCoreLabel_OutputFormat_initWithNSString_withInt_(@"VALUE_TAG", 2);
    JreEnum(EduStanfordNlpLingCoreLabel_OutputFormat, VALUE_TAG_INDEX) = new_EduStanfordNlpLingCoreLabel_OutputFormat_initWithNSString_withInt_(@"VALUE_TAG_INDEX", 3);
    JreEnum(EduStanfordNlpLingCoreLabel_OutputFormat, MAP) = new_EduStanfordNlpLingCoreLabel_OutputFormat_initWithNSString_withInt_(@"MAP", 4);
    JreEnum(EduStanfordNlpLingCoreLabel_OutputFormat, VALUE_MAP) = new_EduStanfordNlpLingCoreLabel_OutputFormat_initWithNSString_withInt_(@"VALUE_MAP", 5);
    JreEnum(EduStanfordNlpLingCoreLabel_OutputFormat, VALUE_INDEX_MAP) = new_EduStanfordNlpLingCoreLabel_OutputFormat_initWithNSString_withInt_(@"VALUE_INDEX_MAP", 6);
    JreEnum(EduStanfordNlpLingCoreLabel_OutputFormat, WORD) = new_EduStanfordNlpLingCoreLabel_OutputFormat_initWithNSString_withInt_(@"WORD", 7);
    JreEnum(EduStanfordNlpLingCoreLabel_OutputFormat, WORD_INDEX) = new_EduStanfordNlpLingCoreLabel_OutputFormat_initWithNSString_withInt_(@"WORD_INDEX", 8);
    JreEnum(EduStanfordNlpLingCoreLabel_OutputFormat, VALUE_TAG_NER) = new_EduStanfordNlpLingCoreLabel_OutputFormat_initWithNSString_withInt_(@"VALUE_TAG_NER", 9);
    JreEnum(EduStanfordNlpLingCoreLabel_OutputFormat, LEMMA_INDEX) = new_EduStanfordNlpLingCoreLabel_OutputFormat_initWithNSString_withInt_(@"LEMMA_INDEX", 10);
    JreEnum(EduStanfordNlpLingCoreLabel_OutputFormat, ALL) = new_EduStanfordNlpLingCoreLabel_OutputFormat_initWithNSString_withInt_(@"ALL", 11);
    J2OBJC_SET_INITIALIZED(EduStanfordNlpLingCoreLabel_OutputFormat)
  }
}

@end

void EduStanfordNlpLingCoreLabel_OutputFormat_initWithNSString_withInt_(EduStanfordNlpLingCoreLabel_OutputFormat *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

EduStanfordNlpLingCoreLabel_OutputFormat *new_EduStanfordNlpLingCoreLabel_OutputFormat_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingCoreLabel_OutputFormat, initWithNSString_withInt_, __name, __ordinal)
}

IOSObjectArray *EduStanfordNlpLingCoreLabel_OutputFormat_values() {
  EduStanfordNlpLingCoreLabel_OutputFormat_initialize();
  return [IOSObjectArray arrayWithObjects:EduStanfordNlpLingCoreLabel_OutputFormat_values_ count:12 type:EduStanfordNlpLingCoreLabel_OutputFormat_class_()];
}

EduStanfordNlpLingCoreLabel_OutputFormat *EduStanfordNlpLingCoreLabel_OutputFormat_valueOfWithNSString_(NSString *name) {
  EduStanfordNlpLingCoreLabel_OutputFormat_initialize();
  for (int i = 0; i < 12; i++) {
    EduStanfordNlpLingCoreLabel_OutputFormat *e = EduStanfordNlpLingCoreLabel_OutputFormat_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

EduStanfordNlpLingCoreLabel_OutputFormat *EduStanfordNlpLingCoreLabel_OutputFormat_fromOrdinal(NSUInteger ordinal) {
  EduStanfordNlpLingCoreLabel_OutputFormat_initialize();
  if (ordinal >= 12) {
    return nil;
  }
  return EduStanfordNlpLingCoreLabel_OutputFormat_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingCoreLabel_OutputFormat)

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpLingCoreLabel_$Lambda$1)

@implementation EduStanfordNlpLingCoreLabel_$Lambda$1

- (jint)compareWithId:(IOSClass *)o1
               withId:(IOSClass *)o2 {
  return [((NSString *) nil_chk([((IOSClass *) nil_chk(o1)) getName])) compareToWithId:[((IOSClass *) nil_chk(o2)) getName]];
}

- (id<JavaUtilComparator>)reversed {
  return JavaUtilComparator_reversed(self);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilComparator:(id<JavaUtilComparator>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilComparator_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0
                                             withJavaUtilComparator:(id<JavaUtilComparator>)arg1 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_withJavaUtilComparator_(self, arg0, arg1);
}

- (id<JavaUtilComparator>)thenComparingDoubleWithJavaUtilFunctionToDoubleFunction:(id<JavaUtilFunctionToDoubleFunction>)arg0 {
  return JavaUtilComparator_thenComparingDoubleWithJavaUtilFunctionToDoubleFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingIntWithJavaUtilFunctionToIntFunction:(id<JavaUtilFunctionToIntFunction>)arg0 {
  return JavaUtilComparator_thenComparingIntWithJavaUtilFunctionToIntFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingLongWithJavaUtilFunctionToLongFunction:(id<JavaUtilFunctionToLongFunction>)arg0 {
  return JavaUtilComparator_thenComparingLongWithJavaUtilFunctionToLongFunction_(self, arg0);
}

+ (void)initialize {
  if (self == [EduStanfordNlpLingCoreLabel_$Lambda$1 class]) {
    EduStanfordNlpLingCoreLabel_$Lambda$1_instance = new_EduStanfordNlpLingCoreLabel_$Lambda$1_init();
    J2OBJC_SET_INITIALIZED(EduStanfordNlpLingCoreLabel_$Lambda$1)
  }
}

@end

void EduStanfordNlpLingCoreLabel_$Lambda$1_init(EduStanfordNlpLingCoreLabel_$Lambda$1 *self) {
  NSObject_init(self);
}

EduStanfordNlpLingCoreLabel_$Lambda$1 *new_EduStanfordNlpLingCoreLabel_$Lambda$1_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingCoreLabel_$Lambda$1, init)
}

EduStanfordNlpLingCoreLabel_$Lambda$1 *create_EduStanfordNlpLingCoreLabel_$Lambda$1_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingCoreLabel_$Lambda$1, init)
}
