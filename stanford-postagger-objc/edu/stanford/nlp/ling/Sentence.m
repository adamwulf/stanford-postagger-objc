//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/ling/Sentence.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/ling/CoreAnnotations.h"
#include "edu/stanford/nlp/ling/CoreLabel.h"
#include "edu/stanford/nlp/ling/HasLemma.h"
#include "edu/stanford/nlp/ling/HasTag.h"
#include "edu/stanford/nlp/ling/HasWord.h"
#include "edu/stanford/nlp/ling/Label.h"
#include "edu/stanford/nlp/ling/LabeledWord.h"
#include "edu/stanford/nlp/ling/Sentence.h"
#include "edu/stanford/nlp/ling/TaggedWord.h"
#include "edu/stanford/nlp/ling/Word.h"
#include "edu/stanford/nlp/ling/WordLemmaTag.h"
#include "edu/stanford/nlp/ling/WordTag.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"

@interface EduStanfordNlpLingSentence ()

- (instancetype)init;

@end

__attribute__((unused)) static void EduStanfordNlpLingSentence_init(EduStanfordNlpLingSentence *self);

__attribute__((unused)) static EduStanfordNlpLingSentence *new_EduStanfordNlpLingSentence_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpLingSentence *create_EduStanfordNlpLingSentence_init();

@implementation EduStanfordNlpLingSentence

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpLingSentence_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (JavaUtilArrayList *)toTaggedListWithJavaUtilList:(id<JavaUtilList>)lex
                                   withJavaUtilList:(id<JavaUtilList>)tags {
  return EduStanfordNlpLingSentence_toTaggedListWithJavaUtilList_withJavaUtilList_(lex, tags);
}

+ (JavaUtilArrayList *)toUntaggedListWithJavaUtilList:(id<JavaUtilList>)lex {
  return EduStanfordNlpLingSentence_toUntaggedListWithJavaUtilList_(lex);
}

+ (JavaUtilArrayList *)toUntaggedListWithNSStringArray:(IOSObjectArray *)words {
  return EduStanfordNlpLingSentence_toUntaggedListWithNSStringArray_(words);
}

+ (id<JavaUtilList>)toWordListWithNSStringArray:(IOSObjectArray *)words {
  return EduStanfordNlpLingSentence_toWordListWithNSStringArray_(words);
}

+ (id<JavaUtilList>)toCoreLabelListWithNSStringArray:(IOSObjectArray *)words {
  return EduStanfordNlpLingSentence_toCoreLabelListWithNSStringArray_(words);
}

+ (id<JavaUtilList>)toCoreLabelListWithJavaUtilList:(id<JavaUtilList>)words {
  return EduStanfordNlpLingSentence_toCoreLabelListWithJavaUtilList_(words);
}

+ (NSString *)listToStringWithJavaUtilList:(id<JavaUtilList>)list {
  return EduStanfordNlpLingSentence_listToStringWithJavaUtilList_(list);
}

+ (NSString *)listToStringWithJavaUtilList:(id<JavaUtilList>)list
                               withBoolean:(jboolean)justValue {
  return EduStanfordNlpLingSentence_listToStringWithJavaUtilList_withBoolean_(list, justValue);
}

+ (NSString *)listToStringWithJavaUtilList:(id<JavaUtilList>)list
                               withBoolean:(jboolean)justValue
                              withNSString:(NSString *)separator {
  return EduStanfordNlpLingSentence_listToStringWithJavaUtilList_withBoolean_withNSString_(list, justValue, separator);
}

+ (NSString *)listToOriginalTextStringWithJavaUtilList:(id<JavaUtilList>)list {
  return EduStanfordNlpLingSentence_listToOriginalTextStringWithJavaUtilList_(list);
}

+ (NSString *)listToOriginalTextStringWithJavaUtilList:(id<JavaUtilList>)list
                                           withBoolean:(jboolean)printBeforeBeforeStart {
  return EduStanfordNlpLingSentence_listToOriginalTextStringWithJavaUtilList_withBoolean_(list, printBeforeBeforeStart);
}

+ (NSString *)wordToStringWithId:(id)o
                     withBoolean:(jboolean)justValue {
  return EduStanfordNlpLingSentence_wordToStringWithId_withBoolean_(o, justValue);
}

+ (NSString *)wordToStringWithId:(id)o
                     withBoolean:(jboolean)justValue
                    withNSString:(NSString *)separator {
  return EduStanfordNlpLingSentence_wordToStringWithId_withBoolean_withNSString_(o, justValue, separator);
}

+ (NSString *)extractNgramWithJavaUtilList:(id<JavaUtilList>)list
                                   withInt:(jint)start
                                   withInt:(jint)end {
  return EduStanfordNlpLingSentence_extractNgramWithJavaUtilList_withInt_withInt_(list, start, end);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x9, 0, 1, -1, 2, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x9, 3, 4, -1, 5, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x89, 3, 6, -1, 7, -1, -1 },
    { NULL, "LJavaUtilList;", 0x89, 8, 6, -1, 9, -1, -1 },
    { NULL, "LJavaUtilList;", 0x89, 10, 6, -1, 11, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 10, 4, -1, 12, -1, -1 },
    { NULL, "LNSString;", 0x9, 13, 4, -1, 14, -1, -1 },
    { NULL, "LNSString;", 0x9, 13, 15, -1, 16, -1, -1 },
    { NULL, "LNSString;", 0x9, 13, 17, -1, 18, -1, -1 },
    { NULL, "LNSString;", 0x9, 19, 4, -1, 20, -1, -1 },
    { NULL, "LNSString;", 0x9, 19, 15, -1, 21, -1, -1 },
    { NULL, "LNSString;", 0x9, 22, 23, -1, 24, -1, -1 },
    { NULL, "LNSString;", 0x9, 22, 25, -1, 26, -1, -1 },
    { NULL, "LNSString;", 0x9, 27, 28, -1, 29, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(toTaggedListWithJavaUtilList:withJavaUtilList:);
  methods[2].selector = @selector(toUntaggedListWithJavaUtilList:);
  methods[3].selector = @selector(toUntaggedListWithNSStringArray:);
  methods[4].selector = @selector(toWordListWithNSStringArray:);
  methods[5].selector = @selector(toCoreLabelListWithNSStringArray:);
  methods[6].selector = @selector(toCoreLabelListWithJavaUtilList:);
  methods[7].selector = @selector(listToStringWithJavaUtilList:);
  methods[8].selector = @selector(listToStringWithJavaUtilList:withBoolean:);
  methods[9].selector = @selector(listToStringWithJavaUtilList:withBoolean:withNSString:);
  methods[10].selector = @selector(listToOriginalTextStringWithJavaUtilList:);
  methods[11].selector = @selector(listToOriginalTextStringWithJavaUtilList:withBoolean:);
  methods[12].selector = @selector(wordToStringWithId:withBoolean:);
  methods[13].selector = @selector(wordToStringWithId:withBoolean:withNSString:);
  methods[14].selector = @selector(extractNgramWithJavaUtilList:withInt:withInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "toTaggedList", "LJavaUtilList;LJavaUtilList;", "(Ljava/util/List<Ljava/lang/String;>;Ljava/util/List<Ljava/lang/String;>;)Ljava/util/ArrayList<Ledu/stanford/nlp/ling/TaggedWord;>;", "toUntaggedList", "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/String;>;)Ljava/util/ArrayList<Ledu/stanford/nlp/ling/Word;>;", "[LNSString;", "([Ljava/lang/String;)Ljava/util/ArrayList<Ledu/stanford/nlp/ling/Word;>;", "toWordList", "([Ljava/lang/String;)Ljava/util/List<Ledu/stanford/nlp/ling/HasWord;>;", "toCoreLabelList", "([Ljava/lang/String;)Ljava/util/List<Ledu/stanford/nlp/ling/CoreLabel;>;", "(Ljava/util/List<+Ledu/stanford/nlp/ling/HasWord;>;)Ljava/util/List<Ledu/stanford/nlp/ling/CoreLabel;>;", "listToString", "<T:Ljava/lang/Object;>(Ljava/util/List<TT;>;)Ljava/lang/String;", "LJavaUtilList;Z", "<T:Ljava/lang/Object;>(Ljava/util/List<TT;>;Z)Ljava/lang/String;", "LJavaUtilList;ZLNSString;", "<T:Ljava/lang/Object;>(Ljava/util/List<TT;>;ZLjava/lang/String;)Ljava/lang/String;", "listToOriginalTextString", "<T::Ledu/stanford/nlp/ling/HasWord;>(Ljava/util/List<TT;>;)Ljava/lang/String;", "<T::Ledu/stanford/nlp/ling/HasWord;>(Ljava/util/List<TT;>;Z)Ljava/lang/String;", "wordToString", "LNSObject;Z", "<T:Ljava/lang/Object;>(TT;Z)Ljava/lang/String;", "LNSObject;ZLNSString;", "<T:Ljava/lang/Object;>(TT;ZLjava/lang/String;)Ljava/lang/String;", "extractNgram", "LJavaUtilList;II", "<T:Ljava/lang/Object;>(Ljava/util/List<TT;>;II)Ljava/lang/String;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingSentence = { "Sentence", "edu.stanford.nlp.ling", ptrTable, methods, NULL, 7, 0x1, 15, 0, -1, -1, -1, -1, -1 };
  return &_EduStanfordNlpLingSentence;
}

@end

void EduStanfordNlpLingSentence_init(EduStanfordNlpLingSentence *self) {
  NSObject_init(self);
}

EduStanfordNlpLingSentence *new_EduStanfordNlpLingSentence_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingSentence, init)
}

EduStanfordNlpLingSentence *create_EduStanfordNlpLingSentence_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingSentence, init)
}

JavaUtilArrayList *EduStanfordNlpLingSentence_toTaggedListWithJavaUtilList_withJavaUtilList_(id<JavaUtilList> lex, id<JavaUtilList> tags) {
  EduStanfordNlpLingSentence_initialize();
  JavaUtilArrayList *sent = new_JavaUtilArrayList_init();
  jint ls = [((id<JavaUtilList>) nil_chk(lex)) size];
  jint ts = [((id<JavaUtilList>) nil_chk(tags)) size];
  if (ls != ts) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Sentence.toSentence: lengths differ");
  }
  for (jint i = 0; i < ls; i++) {
    [sent addWithId:new_EduStanfordNlpLingTaggedWord_initWithNSString_withNSString_([lex getWithInt:i], [tags getWithInt:i])];
  }
  return sent;
}

JavaUtilArrayList *EduStanfordNlpLingSentence_toUntaggedListWithJavaUtilList_(id<JavaUtilList> lex) {
  EduStanfordNlpLingSentence_initialize();
  JavaUtilArrayList *sent = new_JavaUtilArrayList_init();
  for (NSString * __strong str in nil_chk(lex)) {
    [sent addWithId:new_EduStanfordNlpLingWord_initWithNSString_(str)];
  }
  return sent;
}

JavaUtilArrayList *EduStanfordNlpLingSentence_toUntaggedListWithNSStringArray_(IOSObjectArray *words) {
  EduStanfordNlpLingSentence_initialize();
  JavaUtilArrayList *sent = new_JavaUtilArrayList_init();
  {
    IOSObjectArray *a__ = words;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *str = *b__++;
      [sent addWithId:new_EduStanfordNlpLingWord_initWithNSString_(str)];
    }
  }
  return sent;
}

id<JavaUtilList> EduStanfordNlpLingSentence_toWordListWithNSStringArray_(IOSObjectArray *words) {
  EduStanfordNlpLingSentence_initialize();
  id<JavaUtilList> sent = new_JavaUtilArrayList_init();
  {
    IOSObjectArray *a__ = words;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *word = *b__++;
      EduStanfordNlpLingCoreLabel *cl = new_EduStanfordNlpLingCoreLabel_init();
      [cl setValueWithNSString:word];
      [cl setWordWithNSString:word];
      [sent addWithId:cl];
    }
  }
  return sent;
}

id<JavaUtilList> EduStanfordNlpLingSentence_toCoreLabelListWithNSStringArray_(IOSObjectArray *words) {
  EduStanfordNlpLingSentence_initialize();
  id<JavaUtilList> sent = new_JavaUtilArrayList_initWithInt_(((IOSObjectArray *) nil_chk(words))->size_);
  {
    IOSObjectArray *a__ = words;
    NSString * const *b__ = a__->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *word = *b__++;
      EduStanfordNlpLingCoreLabel *cl = new_EduStanfordNlpLingCoreLabel_init();
      [cl setValueWithNSString:word];
      [cl setWordWithNSString:word];
      [sent addWithId:cl];
    }
  }
  return sent;
}

id<JavaUtilList> EduStanfordNlpLingSentence_toCoreLabelListWithJavaUtilList_(id<JavaUtilList> words) {
  EduStanfordNlpLingSentence_initialize();
  id<JavaUtilList> sent = new_JavaUtilArrayList_initWithInt_([((id<JavaUtilList>) nil_chk(words)) size]);
  for (id<EduStanfordNlpLingHasWord> __strong word in words) {
    EduStanfordNlpLingCoreLabel *cl = new_EduStanfordNlpLingCoreLabel_init();
    if ([EduStanfordNlpLingLabel_class_() isInstance:word]) {
      [cl setValueWithNSString:[((id<EduStanfordNlpLingLabel>) nil_chk(((id<EduStanfordNlpLingLabel>) cast_check(word, EduStanfordNlpLingLabel_class_())))) value]];
    }
    [cl setWordWithNSString:[((id<EduStanfordNlpLingHasWord>) nil_chk(word)) word]];
    if ([EduStanfordNlpLingHasTag_class_() isInstance:word]) {
      [cl setTagWithNSString:[((id<EduStanfordNlpLingHasTag>) cast_check(word, EduStanfordNlpLingHasTag_class_())) tag]];
    }
    if ([EduStanfordNlpLingHasLemma_class_() isInstance:word]) {
      [cl setLemmaWithNSString:[((id<EduStanfordNlpLingHasLemma>) cast_check(word, EduStanfordNlpLingHasLemma_class_())) lemma]];
    }
    [sent addWithId:cl];
  }
  return sent;
}

NSString *EduStanfordNlpLingSentence_listToStringWithJavaUtilList_(id<JavaUtilList> list) {
  EduStanfordNlpLingSentence_initialize();
  return EduStanfordNlpLingSentence_listToStringWithJavaUtilList_withBoolean_(list, true);
}

NSString *EduStanfordNlpLingSentence_listToStringWithJavaUtilList_withBoolean_(id<JavaUtilList> list, jboolean justValue) {
  EduStanfordNlpLingSentence_initialize();
  return EduStanfordNlpLingSentence_listToStringWithJavaUtilList_withBoolean_withNSString_(list, justValue, nil);
}

NSString *EduStanfordNlpLingSentence_listToStringWithJavaUtilList_withBoolean_withNSString_(id<JavaUtilList> list, jboolean justValue, NSString *separator) {
  EduStanfordNlpLingSentence_initialize();
  JavaLangStringBuilder *s = new_JavaLangStringBuilder_init();
  for (id<JavaUtilIterator> wordIterator = [((id<JavaUtilList>) nil_chk(list)) iterator]; [((id<JavaUtilIterator>) nil_chk(wordIterator)) hasNext]; ) {
    id o = [wordIterator next];
    (void) [s appendWithNSString:EduStanfordNlpLingSentence_wordToStringWithId_withBoolean_withNSString_(o, justValue, separator)];
    if ([wordIterator hasNext]) {
      (void) [s appendWithChar:' '];
    }
  }
  return [s description];
}

NSString *EduStanfordNlpLingSentence_listToOriginalTextStringWithJavaUtilList_(id<JavaUtilList> list) {
  EduStanfordNlpLingSentence_initialize();
  return EduStanfordNlpLingSentence_listToOriginalTextStringWithJavaUtilList_withBoolean_(list, true);
}

NSString *EduStanfordNlpLingSentence_listToOriginalTextStringWithJavaUtilList_withBoolean_(id<JavaUtilList> list, jboolean printBeforeBeforeStart) {
  EduStanfordNlpLingSentence_initialize();
  JavaLangStringBuilder *s = new_JavaLangStringBuilder_init();
  for (id<EduStanfordNlpLingHasWord> __strong word in nil_chk(list)) {
    EduStanfordNlpLingCoreLabel *cl = (EduStanfordNlpLingCoreLabel *) cast_chk(word, [EduStanfordNlpLingCoreLabel class]);
    if (printBeforeBeforeStart) {
      if ([((EduStanfordNlpLingCoreLabel *) nil_chk(cl)) getWithIOSClass:EduStanfordNlpLingCoreAnnotations_BeforeAnnotation_class_()] != nil) {
        (void) [s appendWithNSString:[cl getWithIOSClass:EduStanfordNlpLingCoreAnnotations_BeforeAnnotation_class_()]];
      }
      printBeforeBeforeStart = false;
    }
    (void) [s appendWithNSString:[((EduStanfordNlpLingCoreLabel *) nil_chk(cl)) getWithIOSClass:EduStanfordNlpLingCoreAnnotations_OriginalTextAnnotation_class_()]];
    if ([cl getWithIOSClass:EduStanfordNlpLingCoreAnnotations_AfterAnnotation_class_()] != nil) {
      (void) [s appendWithNSString:[cl getWithIOSClass:EduStanfordNlpLingCoreAnnotations_AfterAnnotation_class_()]];
    }
    else {
      (void) [s appendWithNSString:@" "];
    }
  }
  return [s description];
}

NSString *EduStanfordNlpLingSentence_wordToStringWithId_withBoolean_(id o, jboolean justValue) {
  EduStanfordNlpLingSentence_initialize();
  return EduStanfordNlpLingSentence_wordToStringWithId_withBoolean_withNSString_(o, justValue, nil);
}

NSString *EduStanfordNlpLingSentence_wordToStringWithId_withBoolean_withNSString_(id o, jboolean justValue, NSString *separator) {
  EduStanfordNlpLingSentence_initialize();
  if (justValue && [EduStanfordNlpLingLabel_class_() isInstance:o]) {
    if ([o isKindOfClass:[EduStanfordNlpLingCoreLabel class]]) {
      EduStanfordNlpLingCoreLabel *l = (EduStanfordNlpLingCoreLabel *) cast_chk(o, [EduStanfordNlpLingCoreLabel class]);
      NSString *w = [((EduStanfordNlpLingCoreLabel *) nil_chk(l)) value];
      if (w == nil) w = [l word];
      return w;
    }
    else {
      return ([((id<EduStanfordNlpLingLabel>) nil_chk(((id<EduStanfordNlpLingLabel>) cast_check(o, EduStanfordNlpLingLabel_class_())))) value]);
    }
  }
  else if ([o isKindOfClass:[EduStanfordNlpLingCoreLabel class]]) {
    EduStanfordNlpLingCoreLabel *l = ((EduStanfordNlpLingCoreLabel *) cast_chk(o, [EduStanfordNlpLingCoreLabel class]));
    NSString *w = [((EduStanfordNlpLingCoreLabel *) nil_chk(l)) value];
    if (w == nil) w = [l word];
    if ([l tag] != nil) {
      if (separator == nil) {
        return JreStrcat("$$$", w, EduStanfordNlpLingCoreLabel_TAG_SEPARATOR, [l tag]);
      }
      else {
        return JreStrcat("$$$", w, separator, [l tag]);
      }
    }
    return w;
  }
  else if (separator != nil && [o isKindOfClass:[EduStanfordNlpLingTaggedWord class]]) {
    return [((EduStanfordNlpLingTaggedWord *) nil_chk(((EduStanfordNlpLingTaggedWord *) cast_chk(o, [EduStanfordNlpLingTaggedWord class])))) toStringWithNSString:separator];
  }
  else if (separator != nil && [o isKindOfClass:[EduStanfordNlpLingLabeledWord class]]) {
    return [((EduStanfordNlpLingLabeledWord *) nil_chk(((EduStanfordNlpLingLabeledWord *) cast_chk(o, [EduStanfordNlpLingLabeledWord class])))) toStringWithNSString:separator];
  }
  else if (separator != nil && [o isKindOfClass:[EduStanfordNlpLingWordLemmaTag class]]) {
    return [((EduStanfordNlpLingWordLemmaTag *) nil_chk(((EduStanfordNlpLingWordLemmaTag *) cast_chk(o, [EduStanfordNlpLingWordLemmaTag class])))) toStringWithNSString:separator];
  }
  else if (separator != nil && [o isKindOfClass:[EduStanfordNlpLingWordTag class]]) {
    return [((EduStanfordNlpLingWordTag *) nil_chk(((EduStanfordNlpLingWordTag *) cast_chk(o, [EduStanfordNlpLingWordTag class])))) toStringWithNSString:separator];
  }
  else {
    return ([nil_chk(o) description]);
  }
}

NSString *EduStanfordNlpLingSentence_extractNgramWithJavaUtilList_withInt_withInt_(id<JavaUtilList> list, jint start, jint end) {
  EduStanfordNlpLingSentence_initialize();
  if (start < 0 || end > [((id<JavaUtilList>) nil_chk(list)) size] || start >= end) return nil;
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  for (jint i = start; i < end; i++) {
    id o = [((id<JavaUtilList>) nil_chk(list)) getWithInt:i];
    if ([sb length] != 0) (void) [sb appendWithNSString:@" "];
    (void) [sb appendWithNSString:([EduStanfordNlpLingHasWord_class_() isInstance:o]) ? [((id<EduStanfordNlpLingHasWord>) nil_chk(((id<EduStanfordNlpLingHasWord>) cast_check(o, EduStanfordNlpLingHasWord_class_())))) word] : [nil_chk(o) description]];
  }
  return [sb description];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingSentence)
