//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: stanford-postagger-java/edu/stanford/nlp/ling/IndexedWord.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "edu/stanford/nlp/ling/CoreAnnotations.h"
#include "edu/stanford/nlp/ling/CoreLabel.h"
#include "edu/stanford/nlp/ling/IndexedWord.h"
#include "edu/stanford/nlp/ling/Label.h"
#include "edu/stanford/nlp/ling/LabelFactory.h"
#include "edu/stanford/nlp/util/StringUtils.h"
#include "java/io/PrintStream.h"
#include "java/lang/Double.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/Set.h"

@interface EduStanfordNlpLingIndexedWord () {
 @public
  EduStanfordNlpLingCoreLabel *label_;
  jint copyCount_;
  jint numCopies_;
  EduStanfordNlpLingIndexedWord *original_;
  jdouble pseudoPosition_;
  jint cachedHashCode_;
}

@end

J2OBJC_FIELD_SETTER(EduStanfordNlpLingIndexedWord, label_, EduStanfordNlpLingCoreLabel *)
J2OBJC_FIELD_SETTER(EduStanfordNlpLingIndexedWord, original_, EduStanfordNlpLingIndexedWord *)

inline jlong EduStanfordNlpLingIndexedWord_get_serialVersionUID();
#define EduStanfordNlpLingIndexedWord_serialVersionUID 3739633991145239829LL
J2OBJC_STATIC_FIELD_CONSTANT(EduStanfordNlpLingIndexedWord, serialVersionUID, jlong)

@interface EduStanfordNlpLingIndexedWord_$1 : NSObject < EduStanfordNlpLingLabelFactory >

- (id<EduStanfordNlpLingLabel>)newLabelWithNSString:(NSString *)labelStr OBJC_METHOD_FAMILY_NONE;

- (id<EduStanfordNlpLingLabel>)newLabelWithNSString:(NSString *)labelStr
                                            withInt:(jint)options OBJC_METHOD_FAMILY_NONE;

- (id<EduStanfordNlpLingLabel>)newLabelWithEduStanfordNlpLingLabel:(id<EduStanfordNlpLingLabel>)oldLabel OBJC_METHOD_FAMILY_NONE;

- (id<EduStanfordNlpLingLabel>)newLabelFromStringWithNSString:(NSString *)encodedLabelStr OBJC_METHOD_FAMILY_NONE;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(EduStanfordNlpLingIndexedWord_$1)

__attribute__((unused)) static void EduStanfordNlpLingIndexedWord_$1_init(EduStanfordNlpLingIndexedWord_$1 *self);

__attribute__((unused)) static EduStanfordNlpLingIndexedWord_$1 *new_EduStanfordNlpLingIndexedWord_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static EduStanfordNlpLingIndexedWord_$1 *create_EduStanfordNlpLingIndexedWord_$1_init();

J2OBJC_INITIALIZED_DEFN(EduStanfordNlpLingIndexedWord)

EduStanfordNlpLingIndexedWord *EduStanfordNlpLingIndexedWord_NO_WORD;

@implementation EduStanfordNlpLingIndexedWord

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpLingIndexedWord_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithEduStanfordNlpLingLabel:(id<EduStanfordNlpLingLabel>)w {
  EduStanfordNlpLingIndexedWord_initWithEduStanfordNlpLingLabel_(self, w);
  return self;
}

- (instancetype)initWithEduStanfordNlpLingCoreLabel:(EduStanfordNlpLingCoreLabel *)w {
  EduStanfordNlpLingIndexedWord_initWithEduStanfordNlpLingCoreLabel_(self, w);
  return self;
}

- (instancetype)initWithNSString:(NSString *)docID
                         withInt:(jint)sentenceIndex
                         withInt:(jint)index {
  EduStanfordNlpLingIndexedWord_initWithNSString_withInt_withInt_(self, docID, sentenceIndex, index);
  return self;
}

- (EduStanfordNlpLingIndexedWord *)makeCopyWithInt:(jint)count {
  EduStanfordNlpLingCoreLabel *labelCopy = new_EduStanfordNlpLingCoreLabel_initWithEduStanfordNlpLingCoreLabel_(label_);
  EduStanfordNlpLingIndexedWord *copy_ = new_EduStanfordNlpLingIndexedWord_initWithEduStanfordNlpLingCoreLabel_(labelCopy);
  [copy_ setCopyCountWithInt:count];
  return copy_;
}

- (EduStanfordNlpLingIndexedWord *)makeCopy {
  return [self makeCopyWithInt:++numCopies_];
}

- (EduStanfordNlpLingIndexedWord *)makeSoftCopyWithInt:(jint)count {
  EduStanfordNlpLingIndexedWord *copy_ = new_EduStanfordNlpLingIndexedWord_initWithEduStanfordNlpLingCoreLabel_(label_);
  [copy_ setCopyCountWithInt:count];
  copy_->original_ = self;
  return copy_;
}

- (EduStanfordNlpLingIndexedWord *)makeSoftCopy {
  if (original_ != nil) {
    return [original_ makeSoftCopy];
  }
  else {
    return [self makeSoftCopyWithInt:++numCopies_];
  }
}

- (EduStanfordNlpLingIndexedWord *)getOriginal {
  return original_;
}

- (EduStanfordNlpLingCoreLabel *)backingLabel {
  return label_;
}

- (id)getWithIOSClass:(IOSClass *)key {
  return [((EduStanfordNlpLingCoreLabel *) nil_chk(label_)) getWithIOSClass:key];
}

- (jboolean)hasWithIOSClass:(IOSClass *)key {
  return [((EduStanfordNlpLingCoreLabel *) nil_chk(label_)) hasWithIOSClass:key];
}

- (jboolean)containsKeyWithIOSClass:(IOSClass *)key {
  return [((EduStanfordNlpLingCoreLabel *) nil_chk(label_)) containsKeyWithIOSClass:key];
}

- (id)setWithIOSClass:(IOSClass *)key
               withId:(id)value {
  return [((EduStanfordNlpLingCoreLabel *) nil_chk(label_)) setWithIOSClass:key withId:value];
}

- (NSString *)getStringWithIOSClass:(IOSClass *)key {
  return [((EduStanfordNlpLingCoreLabel *) nil_chk(label_)) getStringWithIOSClass:key];
}

- (NSString *)getStringWithIOSClass:(IOSClass *)key
                       withNSString:(NSString *)def {
  return [((EduStanfordNlpLingCoreLabel *) nil_chk(label_)) getStringWithIOSClass:key withNSString:def];
}

- (id)removeWithIOSClass:(IOSClass *)key {
  return [((EduStanfordNlpLingCoreLabel *) nil_chk(label_)) removeWithIOSClass:key];
}

- (id<JavaUtilSet>)keySet {
  return [((EduStanfordNlpLingCoreLabel *) nil_chk(label_)) keySet];
}

- (jint)size {
  return [((EduStanfordNlpLingCoreLabel *) nil_chk(label_)) size];
}

- (NSString *)value {
  return [((EduStanfordNlpLingCoreLabel *) nil_chk(label_)) value];
}

- (void)setValueWithNSString:(NSString *)value {
  [((EduStanfordNlpLingCoreLabel *) nil_chk(label_)) setValueWithNSString:value];
}

- (NSString *)tag {
  return [((EduStanfordNlpLingCoreLabel *) nil_chk(label_)) tag];
}

- (void)setTagWithNSString:(NSString *)tag {
  [((EduStanfordNlpLingCoreLabel *) nil_chk(label_)) setTagWithNSString:tag];
}

- (NSString *)word {
  return [((EduStanfordNlpLingCoreLabel *) nil_chk(label_)) word];
}

- (void)setWordWithNSString:(NSString *)word {
  [((EduStanfordNlpLingCoreLabel *) nil_chk(label_)) setWordWithNSString:word];
}

- (NSString *)lemma {
  return [((EduStanfordNlpLingCoreLabel *) nil_chk(label_)) lemma];
}

- (void)setLemmaWithNSString:(NSString *)lemma {
  [((EduStanfordNlpLingCoreLabel *) nil_chk(label_)) setLemmaWithNSString:lemma];
}

- (NSString *)ner {
  return [((EduStanfordNlpLingCoreLabel *) nil_chk(label_)) ner];
}

- (void)setNERWithNSString:(NSString *)ner {
  [((EduStanfordNlpLingCoreLabel *) nil_chk(label_)) setNERWithNSString:ner];
}

- (NSString *)docID {
  return [((EduStanfordNlpLingCoreLabel *) nil_chk(label_)) docID];
}

- (void)setDocIDWithNSString:(NSString *)docID {
  [((EduStanfordNlpLingCoreLabel *) nil_chk(label_)) setDocIDWithNSString:docID];
}

- (jint)index {
  return [((EduStanfordNlpLingCoreLabel *) nil_chk(label_)) index];
}

- (void)setIndexWithInt:(jint)index {
  [((EduStanfordNlpLingCoreLabel *) nil_chk(label_)) setIndexWithInt:index];
}

- (jdouble)pseudoPosition {
  if (!JavaLangDouble_isNaNWithDouble_(pseudoPosition_)) {
    return pseudoPosition_;
  }
  else {
    return (jdouble) [self index];
  }
}

- (void)setPseudoPositionWithDouble:(jdouble)position {
  self->pseudoPosition_ = position;
}

- (jint)sentIndex {
  return [((EduStanfordNlpLingCoreLabel *) nil_chk(label_)) sentIndex];
}

- (void)setSentIndexWithInt:(jint)sentIndex {
  [((EduStanfordNlpLingCoreLabel *) nil_chk(label_)) setSentIndexWithInt:sentIndex];
}

- (NSString *)originalText {
  return [((EduStanfordNlpLingCoreLabel *) nil_chk(label_)) originalText];
}

- (void)setOriginalTextWithNSString:(NSString *)originalText {
  [((EduStanfordNlpLingCoreLabel *) nil_chk(label_)) setOriginalTextWithNSString:originalText];
}

- (jint)beginPosition {
  return [((EduStanfordNlpLingCoreLabel *) nil_chk(label_)) beginPosition];
}

- (jint)endPosition {
  return [((EduStanfordNlpLingCoreLabel *) nil_chk(label_)) endPosition];
}

- (void)setBeginPositionWithInt:(jint)beginPos {
  [((EduStanfordNlpLingCoreLabel *) nil_chk(label_)) setBeginPositionWithInt:beginPos];
}

- (void)setEndPositionWithInt:(jint)endPos {
  [((EduStanfordNlpLingCoreLabel *) nil_chk(label_)) setEndPositionWithInt:endPos];
}

- (jint)copyCount {
  return copyCount_;
}

- (void)setCopyCountWithInt:(jint)count {
  self->copyCount_ = count;
}

- (NSString *)toPrimes {
  return EduStanfordNlpUtilStringUtils_repeatWithChar_withInt_('\'', copyCount_);
}

- (jboolean)isCopyWithEduStanfordNlpLingIndexedWord:(EduStanfordNlpLingIndexedWord *)otherWord {
  JavaLangInteger *myInd = [self getWithIOSClass:EduStanfordNlpLingCoreAnnotations_IndexAnnotation_class_()];
  JavaLangInteger *otherInd = [((EduStanfordNlpLingIndexedWord *) nil_chk(otherWord)) getWithIOSClass:EduStanfordNlpLingCoreAnnotations_IndexAnnotation_class_()];
  if (myInd == nil) {
    if (otherInd != nil) return false;
  }
  else if (![myInd isEqual:otherInd]) {
    return false;
  }
  JavaLangInteger *mySentInd = [self getWithIOSClass:EduStanfordNlpLingCoreAnnotations_SentenceIndexAnnotation_class_()];
  JavaLangInteger *otherSentInd = [otherWord getWithIOSClass:EduStanfordNlpLingCoreAnnotations_SentenceIndexAnnotation_class_()];
  if (mySentInd == nil) {
    if (otherSentInd != nil) return false;
  }
  else if (![mySentInd isEqual:otherSentInd]) {
    return false;
  }
  NSString *myDocID = [self getStringWithIOSClass:EduStanfordNlpLingCoreAnnotations_DocIDAnnotation_class_()];
  NSString *otherDocID = [otherWord getStringWithIOSClass:EduStanfordNlpLingCoreAnnotations_DocIDAnnotation_class_()];
  if (myDocID == nil) {
    if (otherDocID != nil) return false;
  }
  else if (![myDocID isEqual:otherDocID]) {
    return false;
  }
  if ([self copyCount] == 0 || [otherWord copyCount] != 0) {
    return false;
  }
  return true;
}

- (jboolean)isEqual:(id)o {
  if (self == o) return true;
  if (!([o isKindOfClass:[EduStanfordNlpLingIndexedWord class]])) return false;
  EduStanfordNlpLingIndexedWord *otherWord = (EduStanfordNlpLingIndexedWord *) cast_chk(o, [EduStanfordNlpLingIndexedWord class]);
  JavaLangInteger *myInd = [self getWithIOSClass:EduStanfordNlpLingCoreAnnotations_IndexAnnotation_class_()];
  JavaLangInteger *otherInd = [((EduStanfordNlpLingIndexedWord *) nil_chk(otherWord)) getWithIOSClass:EduStanfordNlpLingCoreAnnotations_IndexAnnotation_class_()];
  if (myInd == nil) {
    if (otherInd != nil) return false;
  }
  else if (![myInd isEqual:otherInd]) {
    return false;
  }
  JavaLangInteger *mySentInd = [self getWithIOSClass:EduStanfordNlpLingCoreAnnotations_SentenceIndexAnnotation_class_()];
  JavaLangInteger *otherSentInd = [otherWord getWithIOSClass:EduStanfordNlpLingCoreAnnotations_SentenceIndexAnnotation_class_()];
  if (mySentInd == nil) {
    if (otherSentInd != nil) return false;
  }
  else if (![mySentInd isEqual:otherSentInd]) {
    return false;
  }
  NSString *myDocID = [self getStringWithIOSClass:EduStanfordNlpLingCoreAnnotations_DocIDAnnotation_class_()];
  NSString *otherDocID = [otherWord getStringWithIOSClass:EduStanfordNlpLingCoreAnnotations_DocIDAnnotation_class_()];
  if (myDocID == nil) {
    if (otherDocID != nil) return false;
  }
  else if (![myDocID isEqual:otherDocID]) {
    return false;
  }
  if ([self copyCount] != [otherWord copyCount]) {
    return false;
  }
  if ((!JavaLangDouble_isNaNWithDouble_(self->pseudoPosition_) || !JavaLangDouble_isNaNWithDouble_(otherWord->pseudoPosition_)) && self->pseudoPosition_ != otherWord->pseudoPosition_) {
    return false;
  }
  return true;
}

- (NSUInteger)hash {
  if (cachedHashCode_ != 0) {
    return cachedHashCode_;
  }
  jboolean sensible = false;
  jint result = 0;
  if ([self getWithIOSClass:EduStanfordNlpLingCoreAnnotations_DocIDAnnotation_class_()] != nil) {
    result = ((jint) [((NSString *) nil_chk([self getWithIOSClass:EduStanfordNlpLingCoreAnnotations_DocIDAnnotation_class_()])) hash]);
    sensible = true;
  }
  if ([self hasWithIOSClass:EduStanfordNlpLingCoreAnnotations_SentenceIndexAnnotation_class_()]) {
    result = 29 * result + ((jint) [((JavaLangInteger *) nil_chk([self getWithIOSClass:EduStanfordNlpLingCoreAnnotations_SentenceIndexAnnotation_class_()])) hash]);
    sensible = true;
  }
  if ([self hasWithIOSClass:EduStanfordNlpLingCoreAnnotations_IndexAnnotation_class_()]) {
    result = 29 * result + ((jint) [((JavaLangInteger *) nil_chk([self getWithIOSClass:EduStanfordNlpLingCoreAnnotations_IndexAnnotation_class_()])) hash]);
    sensible = true;
  }
  if (!sensible) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"WARNING!!!  You have hashed an IndexedWord with no docID, sentIndex or wordIndex. You will almost certainly lose"];
  }
  cachedHashCode_ = result;
  return result;
}

- (jint)compareToWithId:(EduStanfordNlpLingIndexedWord *)w {
  (void) cast_chk(w, [EduStanfordNlpLingIndexedWord class]);
  if ([self isEqual:EduStanfordNlpLingIndexedWord_NO_WORD]) {
    if ([((EduStanfordNlpLingIndexedWord *) nil_chk(w)) isEqual:EduStanfordNlpLingIndexedWord_NO_WORD]) {
      return 0;
    }
    else {
      return -1;
    }
  }
  if ([((EduStanfordNlpLingIndexedWord *) nil_chk(w)) isEqual:EduStanfordNlpLingIndexedWord_NO_WORD]) {
    return 1;
  }
  if (!JavaLangDouble_isNaNWithDouble_(w->pseudoPosition_) || !JavaLangDouble_isNaNWithDouble_(self->pseudoPosition_)) {
    jdouble val = [self pseudoPosition] - [w pseudoPosition];
    if (val < 0) {
      return -1;
    }
    if (val > 0) {
      return 1;
    }
    else {
      return 0;
    }
  }
  NSString *docID = [self getStringWithIOSClass:EduStanfordNlpLingCoreAnnotations_DocIDAnnotation_class_()];
  jint docComp = [((NSString *) nil_chk(docID)) compareToWithId:[w getStringWithIOSClass:EduStanfordNlpLingCoreAnnotations_DocIDAnnotation_class_()]];
  if (docComp != 0) return docComp;
  jint sentComp = [self sentIndex] - [w sentIndex];
  if (sentComp != 0) return sentComp;
  jint indexComp = [self index] - [w index];
  if (indexComp != 0) return indexComp;
  return [self copyCount] - [w copyCount];
}

- (NSString *)description {
  return [self toStringWithEduStanfordNlpLingCoreLabel_OutputFormat:JreLoadEnum(EduStanfordNlpLingCoreLabel_OutputFormat, VALUE_TAG)];
}

- (NSString *)toStringWithEduStanfordNlpLingCoreLabel_OutputFormat:(EduStanfordNlpLingCoreLabel_OutputFormat *)format {
  return JreStrcat("$$", [((EduStanfordNlpLingCoreLabel *) nil_chk(label_)) toStringWithEduStanfordNlpLingCoreLabel_OutputFormat:format], [self toPrimes]);
}

- (void)setFromStringWithNSString:(NSString *)labelStr {
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"Cannot set from string");
}

+ (id<EduStanfordNlpLingLabelFactory>)factory {
  return EduStanfordNlpLingIndexedWord_factory();
}

- (id<EduStanfordNlpLingLabelFactory>)labelFactory {
  return EduStanfordNlpLingIndexedWord_factory();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingIndexedWord;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingIndexedWord;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingIndexedWord;", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingIndexedWord;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingIndexedWord;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingCoreLabel;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 6, 7, -1, 8, -1, -1 },
    { NULL, "Z", 0x1, 9, 7, -1, 10, -1, -1 },
    { NULL, "Z", 0x1, 11, 7, -1, 10, -1, -1 },
    { NULL, "LNSObject;", 0x1, 12, 13, -1, 14, -1, -1 },
    { NULL, "LNSString;", 0x1, 15, 7, -1, 16, -1, -1 },
    { NULL, "LNSString;", 0x1, 15, 17, -1, 18, -1, -1 },
    { NULL, "LNSObject;", 0x1, 19, 7, -1, 8, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 20, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 22, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 22, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 22, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 22, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 22, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 27, 22, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 4, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 29, 30, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 31, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 32, 22, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 33, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 34, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 35, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 36, 37, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 38, 39, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 40, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 41, 37, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 42, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 42, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 44, 22, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingLabelFactory;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingLabelFactory;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithEduStanfordNlpLingLabel:);
  methods[2].selector = @selector(initWithEduStanfordNlpLingCoreLabel:);
  methods[3].selector = @selector(initWithNSString:withInt:withInt:);
  methods[4].selector = @selector(makeCopyWithInt:);
  methods[5].selector = @selector(makeCopy);
  methods[6].selector = @selector(makeSoftCopyWithInt:);
  methods[7].selector = @selector(makeSoftCopy);
  methods[8].selector = @selector(getOriginal);
  methods[9].selector = @selector(backingLabel);
  methods[10].selector = @selector(getWithIOSClass:);
  methods[11].selector = @selector(hasWithIOSClass:);
  methods[12].selector = @selector(containsKeyWithIOSClass:);
  methods[13].selector = @selector(setWithIOSClass:withId:);
  methods[14].selector = @selector(getStringWithIOSClass:);
  methods[15].selector = @selector(getStringWithIOSClass:withNSString:);
  methods[16].selector = @selector(removeWithIOSClass:);
  methods[17].selector = @selector(keySet);
  methods[18].selector = @selector(size);
  methods[19].selector = @selector(value);
  methods[20].selector = @selector(setValueWithNSString:);
  methods[21].selector = @selector(tag);
  methods[22].selector = @selector(setTagWithNSString:);
  methods[23].selector = @selector(word);
  methods[24].selector = @selector(setWordWithNSString:);
  methods[25].selector = @selector(lemma);
  methods[26].selector = @selector(setLemmaWithNSString:);
  methods[27].selector = @selector(ner);
  methods[28].selector = @selector(setNERWithNSString:);
  methods[29].selector = @selector(docID);
  methods[30].selector = @selector(setDocIDWithNSString:);
  methods[31].selector = @selector(index);
  methods[32].selector = @selector(setIndexWithInt:);
  methods[33].selector = @selector(pseudoPosition);
  methods[34].selector = @selector(setPseudoPositionWithDouble:);
  methods[35].selector = @selector(sentIndex);
  methods[36].selector = @selector(setSentIndexWithInt:);
  methods[37].selector = @selector(originalText);
  methods[38].selector = @selector(setOriginalTextWithNSString:);
  methods[39].selector = @selector(beginPosition);
  methods[40].selector = @selector(endPosition);
  methods[41].selector = @selector(setBeginPositionWithInt:);
  methods[42].selector = @selector(setEndPositionWithInt:);
  methods[43].selector = @selector(copyCount);
  methods[44].selector = @selector(setCopyCountWithInt:);
  methods[45].selector = @selector(toPrimes);
  methods[46].selector = @selector(isCopyWithEduStanfordNlpLingIndexedWord:);
  methods[47].selector = @selector(isEqual:);
  methods[48].selector = @selector(hash);
  methods[49].selector = @selector(compareToWithId:);
  methods[50].selector = @selector(description);
  methods[51].selector = @selector(toStringWithEduStanfordNlpLingCoreLabel_OutputFormat:);
  methods[52].selector = @selector(setFromStringWithNSString:);
  methods[53].selector = @selector(factory);
  methods[54].selector = @selector(labelFactory);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = EduStanfordNlpLingIndexedWord_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "NO_WORD", "LEduStanfordNlpLingIndexedWord;", .constantValue.asLong = 0, 0x19, -1, 45, -1, -1 },
    { "label_", "LEduStanfordNlpLingCoreLabel;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "copyCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "numCopies_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "original_", "LEduStanfordNlpLingIndexedWord;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "pseudoPosition_", "D", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "cachedHashCode_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEduStanfordNlpLingLabel;", "LEduStanfordNlpLingCoreLabel;", "LNSString;II", "makeCopy", "I", "makeSoftCopy", "get", "LIOSClass;", "<VALUE:Ljava/lang/Object;>(Ljava/lang/Class<+Ledu/stanford/nlp/util/TypesafeMap$Key<TVALUE;>;>;)TVALUE;", "has", "<VALUE:Ljava/lang/Object;>(Ljava/lang/Class<+Ledu/stanford/nlp/util/TypesafeMap$Key<TVALUE;>;>;)Z", "containsKey", "set", "LIOSClass;LNSObject;", "<VALUE:Ljava/lang/Object;>(Ljava/lang/Class<+Ledu/stanford/nlp/util/TypesafeMap$Key<TVALUE;>;>;TVALUE;)TVALUE;", "getString", "<KEY::Ledu/stanford/nlp/util/TypesafeMap$Key<Ljava/lang/String;>;>(Ljava/lang/Class<TKEY;>;)Ljava/lang/String;", "LIOSClass;LNSString;", "<KEY::Ledu/stanford/nlp/util/TypesafeMap$Key<Ljava/lang/String;>;>(Ljava/lang/Class<TKEY;>;Ljava/lang/String;)Ljava/lang/String;", "remove", "()Ljava/util/Set<Ljava/lang/Class<*>;>;", "setValue", "LNSString;", "setTag", "setWord", "setLemma", "setNER", "setDocID", "setIndex", "setPseudoPosition", "D", "setSentIndex", "setOriginalText", "setBeginPosition", "setEndPosition", "setCopyCount", "isCopy", "LEduStanfordNlpLingIndexedWord;", "equals", "LNSObject;", "hashCode", "compareTo", "toString", "LEduStanfordNlpLingCoreLabel_OutputFormat;", "setFromString", &EduStanfordNlpLingIndexedWord_NO_WORD, "Ljava/lang/Object;Ledu/stanford/nlp/ling/AbstractCoreLabel;Ljava/lang/Comparable<Ledu/stanford/nlp/ling/IndexedWord;>;" };
  static const J2ObjcClassInfo _EduStanfordNlpLingIndexedWord = { "IndexedWord", "edu.stanford.nlp.ling", ptrTable, methods, fields, 7, 0x1, 55, 8, -1, -1, -1, 46, -1 };
  return &_EduStanfordNlpLingIndexedWord;
}

+ (void)initialize {
  if (self == [EduStanfordNlpLingIndexedWord class]) {
    EduStanfordNlpLingIndexedWord_NO_WORD = new_EduStanfordNlpLingIndexedWord_initWithNSString_withInt_withInt_(nil, -1, -1);
    J2OBJC_SET_INITIALIZED(EduStanfordNlpLingIndexedWord)
  }
}

@end

void EduStanfordNlpLingIndexedWord_init(EduStanfordNlpLingIndexedWord *self) {
  NSObject_init(self);
  self->numCopies_ = 0;
  self->original_ = nil;
  self->pseudoPosition_ = JavaLangDouble_NaN;
  self->cachedHashCode_ = 0;
  self->label_ = new_EduStanfordNlpLingCoreLabel_init();
}

EduStanfordNlpLingIndexedWord *new_EduStanfordNlpLingIndexedWord_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingIndexedWord, init)
}

EduStanfordNlpLingIndexedWord *create_EduStanfordNlpLingIndexedWord_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingIndexedWord, init)
}

void EduStanfordNlpLingIndexedWord_initWithEduStanfordNlpLingLabel_(EduStanfordNlpLingIndexedWord *self, id<EduStanfordNlpLingLabel> w) {
  NSObject_init(self);
  self->numCopies_ = 0;
  self->original_ = nil;
  self->pseudoPosition_ = JavaLangDouble_NaN;
  self->cachedHashCode_ = 0;
  if ([w isKindOfClass:[EduStanfordNlpLingCoreLabel class]]) {
    self->label_ = (EduStanfordNlpLingCoreLabel *) cast_chk(w, [EduStanfordNlpLingCoreLabel class]);
  }
  else {
    self->label_ = new_EduStanfordNlpLingCoreLabel_initWithEduStanfordNlpLingLabel_(w);
    if ([self->label_ word] == nil) {
      [self->label_ setWordWithNSString:[self->label_ value]];
    }
  }
}

EduStanfordNlpLingIndexedWord *new_EduStanfordNlpLingIndexedWord_initWithEduStanfordNlpLingLabel_(id<EduStanfordNlpLingLabel> w) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingIndexedWord, initWithEduStanfordNlpLingLabel_, w)
}

EduStanfordNlpLingIndexedWord *create_EduStanfordNlpLingIndexedWord_initWithEduStanfordNlpLingLabel_(id<EduStanfordNlpLingLabel> w) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingIndexedWord, initWithEduStanfordNlpLingLabel_, w)
}

void EduStanfordNlpLingIndexedWord_initWithEduStanfordNlpLingCoreLabel_(EduStanfordNlpLingIndexedWord *self, EduStanfordNlpLingCoreLabel *w) {
  NSObject_init(self);
  self->numCopies_ = 0;
  self->original_ = nil;
  self->pseudoPosition_ = JavaLangDouble_NaN;
  self->cachedHashCode_ = 0;
  self->label_ = w;
}

EduStanfordNlpLingIndexedWord *new_EduStanfordNlpLingIndexedWord_initWithEduStanfordNlpLingCoreLabel_(EduStanfordNlpLingCoreLabel *w) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingIndexedWord, initWithEduStanfordNlpLingCoreLabel_, w)
}

EduStanfordNlpLingIndexedWord *create_EduStanfordNlpLingIndexedWord_initWithEduStanfordNlpLingCoreLabel_(EduStanfordNlpLingCoreLabel *w) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingIndexedWord, initWithEduStanfordNlpLingCoreLabel_, w)
}

void EduStanfordNlpLingIndexedWord_initWithNSString_withInt_withInt_(EduStanfordNlpLingIndexedWord *self, NSString *docID, jint sentenceIndex, jint index) {
  NSObject_init(self);
  self->numCopies_ = 0;
  self->original_ = nil;
  self->pseudoPosition_ = JavaLangDouble_NaN;
  self->cachedHashCode_ = 0;
  self->label_ = new_EduStanfordNlpLingCoreLabel_init();
  (void) [self->label_ setWithIOSClass:EduStanfordNlpLingCoreAnnotations_DocIDAnnotation_class_() withId:docID];
  (void) [self->label_ setWithIOSClass:EduStanfordNlpLingCoreAnnotations_SentenceIndexAnnotation_class_() withId:JavaLangInteger_valueOfWithInt_(sentenceIndex)];
  (void) [self->label_ setWithIOSClass:EduStanfordNlpLingCoreAnnotations_IndexAnnotation_class_() withId:JavaLangInteger_valueOfWithInt_(index)];
}

EduStanfordNlpLingIndexedWord *new_EduStanfordNlpLingIndexedWord_initWithNSString_withInt_withInt_(NSString *docID, jint sentenceIndex, jint index) {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingIndexedWord, initWithNSString_withInt_withInt_, docID, sentenceIndex, index)
}

EduStanfordNlpLingIndexedWord *create_EduStanfordNlpLingIndexedWord_initWithNSString_withInt_withInt_(NSString *docID, jint sentenceIndex, jint index) {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingIndexedWord, initWithNSString_withInt_withInt_, docID, sentenceIndex, index)
}

id<EduStanfordNlpLingLabelFactory> EduStanfordNlpLingIndexedWord_factory() {
  EduStanfordNlpLingIndexedWord_initialize();
  return new_EduStanfordNlpLingIndexedWord_$1_init();
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduStanfordNlpLingIndexedWord)

@implementation EduStanfordNlpLingIndexedWord_$1

- (id<EduStanfordNlpLingLabel>)newLabelWithNSString:(NSString *)labelStr {
  EduStanfordNlpLingCoreLabel *coreLabel = new_EduStanfordNlpLingCoreLabel_init();
  [coreLabel setValueWithNSString:labelStr];
  return new_EduStanfordNlpLingIndexedWord_initWithEduStanfordNlpLingCoreLabel_(coreLabel);
}

- (id<EduStanfordNlpLingLabel>)newLabelWithNSString:(NSString *)labelStr
                                            withInt:(jint)options {
  return [self newLabelWithNSString:labelStr];
}

- (id<EduStanfordNlpLingLabel>)newLabelWithEduStanfordNlpLingLabel:(id<EduStanfordNlpLingLabel>)oldLabel {
  return new_EduStanfordNlpLingIndexedWord_initWithEduStanfordNlpLingLabel_(oldLabel);
}

- (id<EduStanfordNlpLingLabel>)newLabelFromStringWithNSString:(NSString *)encodedLabelStr {
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"This code branch left blank because we do not understand what this method should do.");
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EduStanfordNlpLingIndexedWord_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LEduStanfordNlpLingLabel;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingLabel;", 0x1, 0, 2, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingLabel;", 0x1, 0, 3, -1, -1, -1, -1 },
    { NULL, "LEduStanfordNlpLingLabel;", 0x1, 4, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(newLabelWithNSString:);
  methods[1].selector = @selector(newLabelWithNSString:withInt:);
  methods[2].selector = @selector(newLabelWithEduStanfordNlpLingLabel:);
  methods[3].selector = @selector(newLabelFromStringWithNSString:);
  methods[4].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "newLabel", "LNSString;", "LNSString;I", "LEduStanfordNlpLingLabel;", "newLabelFromString", "LEduStanfordNlpLingIndexedWord;", "factory" };
  static const J2ObjcClassInfo _EduStanfordNlpLingIndexedWord_$1 = { "", "edu.stanford.nlp.ling", ptrTable, methods, NULL, 7, 0x8008, 5, 0, 5, -1, 6, -1, -1 };
  return &_EduStanfordNlpLingIndexedWord_$1;
}

@end

void EduStanfordNlpLingIndexedWord_$1_init(EduStanfordNlpLingIndexedWord_$1 *self) {
  NSObject_init(self);
}

EduStanfordNlpLingIndexedWord_$1 *new_EduStanfordNlpLingIndexedWord_$1_init() {
  J2OBJC_NEW_IMPL(EduStanfordNlpLingIndexedWord_$1, init)
}

EduStanfordNlpLingIndexedWord_$1 *create_EduStanfordNlpLingIndexedWord_$1_init() {
  J2OBJC_CREATE_IMPL(EduStanfordNlpLingIndexedWord_$1, init)
}
